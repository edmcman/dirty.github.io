[{"repo_owner": "amazfitDev", "repo_name": "platform_kernel-3.10.14", "path": "amazfitDev/platform_kernel-3.10.14/d0a9d669a62383778e791aaa873ea0bb05db8ff712183e165b550b27446cad02", "path_in_repo": "amazfitDev/platform_kernel-3.10.14/tools/perf/util/pager.o", "objdump": "0000000000000000 <pager_preexec>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n   b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  12:\t00 00 \n  14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  18:\t31 c0                \txor    %eax,%eax\n  1a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  1f:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  24:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  2b:\t48 89 d7             \tmov    %rdx,%rdi\n  2e:\tfc                   \tcld    \n  2f:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  32:\t89 f8                \tmov    %edi,%eax\n  34:\t89 ca                \tmov    %ecx,%edx\n  36:\t89 95 68 ff ff ff    \tmov    %edx,-0x98(%rbp)\n  3c:\t89 85 6c ff ff ff    \tmov    %eax,-0x94(%rbp)\n  42:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n  49:\t48 83 c8 01          \tor     $0x1,%rax\n  4d:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n  54:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  5b:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  62:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  68:\t48 89 d1             \tmov    %rdx,%rcx\n  6b:\tba 00 00 00 00       \tmov    $0x0,%edx\n  70:\t48 89 c6             \tmov    %rax,%rsi\n  73:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  78:\te8 00 00 00 00       \tcallq  7d <pager_preexec+0x7d>\n  7d:\tba 00 00 00 00       \tmov    $0x0,%edx\n  82:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  87:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  8c:\te8 00 00 00 00       \tcallq  91 <pager_preexec+0x91>\n  91:\t90                   \tnop\n  92:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  96:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n  9d:\t00 00 \n  9f:\t74 05                \tje     a6 <pager_preexec+0xa6>\n  a1:\te8 00 00 00 00       \tcallq  a6 <pager_preexec+0xa6>\n  a6:\tc9                   \tleaveq \n  a7:\tc3                   \tretq   ", "code_s": "unsigned __int64 pager_preexec() {\n  fd_set <span class=\"supfact\">readfds</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  memset(&<span class=\"supfact\">readfds</span>, Number, sizeof(<span class=\"supfact\">readfds</span>));\n  <span class=\"supfact\">readfds</span>.fds_bits[Number] |= Number;\n  select(Number, &<span class=\"supfact\">readfds</span>, Number L, &<span class=\"supfact\">readfds</span>,\n         Number L);\n  setenv(String, String, Number);\n  return __readfsqword(Number) ^ v2;\n}", "code_t": "void __cdecl pager_preexec() {\n  fd_set <span class=\"supfact\">in</span>;\n  unsigned __int64 v1;\n  v1 = __readfsqword(Number);\n  memset(&<span class=\"supfact\">in</span>, Number, sizeof(<span class=\"supfact\">in</span>));\n  <span class=\"supfact\">in</span>.fds_bits[Number] |= Number;\n  select(Number, &<span class=\"supfact\">in</span>, Number L, &<span class=\"supfact\">in</span>, Number L);\n  setenv(String, String, Number);\n}", "var": [{"name": "readfds", "type": "struct fd_set { __fd_mask[16] fds_bits; }", "pred_name": "in", "ref_name": "in", "ref_type": "struct fd_set { __fd_mask[16] fds_bits; }"}], "body_in_train": true}, {"repo_owner": "VoIPGRID", "repo_name": "PJSIP", "path": "VoIPGRID/PJSIP/fef548ae6d32625e4ed35f9f165683c246c3b4fc96e304bb346e3109bacfaf40", "path_in_repo": "VoIPGRID/PJSIP//pjlib-util/bin/pjlib-util-test-x86_64-unknown-linux-gnu", "objdump": "0000000000422e1b <pj_gettimeofday>:\n  422e1b:\t55                   \tpush   %rbp\n  422e1c:\t48 89 e5             \tmov    %rsp,%rbp\n  422e1f:\t48 83 ec 30          \tsub    $0x30,%rsp\n  422e23:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  422e27:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  422e2b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  422e30:\t48 89 c7             \tmov    %rax,%rdi\n  422e33:\te8 28 06 fe ff       \tcallq  403460 <gettimeofday@plt>\n  422e38:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  422e3b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  422e3f:\t74 20                \tje     422e61 <pj_gettimeofday+0x46>\n  422e41:\te8 0a 08 fe ff       \tcallq  403650 <__errno_location@plt>\n  422e46:\t8b 00                \tmov    (%rax),%eax\n  422e48:\t85 c0                \ttest   %eax,%eax\n  422e4a:\t74 0e                \tje     422e5a <pj_gettimeofday+0x3f>\n  422e4c:\te8 ff 07 fe ff       \tcallq  403650 <__errno_location@plt>\n  422e51:\t8b 00                \tmov    (%rax),%eax\n  422e53:\t05 c0 d4 01 00       \tadd    $0x1d4c0,%eax\n  422e58:\teb 41                \tjmp    422e9b <pj_gettimeofday+0x80>\n  422e5a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  422e5f:\teb 3a                \tjmp    422e9b <pj_gettimeofday+0x80>\n  422e61:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  422e65:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  422e69:\t48 89 10             \tmov    %rdx,(%rax)\n  422e6c:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  422e70:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n  422e77:\t9b c4 20 \n  422e7a:\t48 89 c8             \tmov    %rcx,%rax\n  422e7d:\t48 f7 ea             \timul   %rdx\n  422e80:\t48 c1 fa 07          \tsar    $0x7,%rdx\n  422e84:\t48 89 c8             \tmov    %rcx,%rax\n  422e87:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  422e8b:\t48 29 c2             \tsub    %rax,%rdx\n  422e8e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  422e92:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  422e96:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  422e9b:\tc9                   \tleaveq \n  422e9c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_gettimeofday(__time_t *a1) {\n  __int64 result;\n  struct timeval <span class=\"supfact\">tv</span>;\n  if (gettimeofday(&<span class=\"supfact\">tv</span>, Number L)) {\n    if (*__errno_location())\n      result = (unsigned int)(*__errno_location() + Number);\n    else\n      result = Number;\n  } else {\n    *a1 = <span class=\"supfact\">tv</span>.tv_sec;\n    a1[Number] = <span class=\"supfact\">tv</span>.tv_usec / Number;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl pj_gettimeofday(pj_time_val_0 *p_tv) {\n  pj_status_t result;\n  timeval <span class=\"supfact\">the_time</span>;\n  if (gettimeofday(&<span class=\"supfact\">the_time</span>, Number L)) {\n    if (*__errno_location())\n      result = *__errno_location() + Number;\n    else\n      result = Number;\n  } else {\n    p_tv->sec = <span class=\"supfact\">the_time</span>.tv_sec;\n    p_tv->msec = <span class=\"supfact\">the_time</span>.tv_usec / Number;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "the_time", "ref_name": "the_time", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "XeryusTC", "repo_name": "computergraphics", "path": "XeryusTC/computergraphics/64441f3480ecc2737054a9900bd7e9e93e9919d6867c58766055fdcbe44dc7d4", "path_in_repo": "XeryusTC/computergraphics/raytracer/yaml/emitter.o", "objdump": "0000000000000000 <_ZNSt11_Deque_baseIN4YAML13EMITTER_STATEESaIS1_EE15_M_allocate_mapEm>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 28          \tsub    $0x28,%rsp\n   9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  11:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  15:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  19:\t48 89 d6             \tmov    %rdx,%rsi\n  1c:\t48 89 c7             \tmov    %rax,%rdi\n  1f:\te8 00 00 00 00       \tcallq  24 <_ZNSt11_Deque_baseIN4YAML13EMITTER_STATEESaIS1_EE15_M_allocate_mapEm+0x24>\n  24:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  28:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  2c:\t48 89 d6             \tmov    %rdx,%rsi\n  2f:\t48 89 c7             \tmov    %rax,%rdi\n  32:\te8 00 00 00 00       \tcallq  37 <_ZNSt11_Deque_baseIN4YAML13EMITTER_STATEESaIS1_EE15_M_allocate_mapEm+0x37>\n  37:\t48 89 c3             \tmov    %rax,%rbx\n  3a:\t90                   \tnop\n  3b:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  3f:\t48 89 c7             \tmov    %rax,%rdi\n  42:\te8 00 00 00 00       \tcallq  47 <_ZNSt11_Deque_baseIN4YAML13EMITTER_STATEESaIS1_EE15_M_allocate_mapEm+0x47>\n  47:\t48 89 d8             \tmov    %rbx,%rax\n  4a:\teb 1a                \tjmp    66 <_ZNSt11_Deque_baseIN4YAML13EMITTER_STATEESaIS1_EE15_M_allocate_mapEm+0x66>\n  4c:\t48 89 c3             \tmov    %rax,%rbx\n  4f:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  53:\t48 89 c7             \tmov    %rax,%rdi\n  56:\te8 00 00 00 00       \tcallq  5b <_ZNSt11_Deque_baseIN4YAML13EMITTER_STATEESaIS1_EE15_M_allocate_mapEm+0x5b>\n  5b:\t48 89 d8             \tmov    %rbx,%rax\n  5e:\t48 89 c7             \tmov    %rax,%rdi\n  61:\te8 00 00 00 00       \tcallq  66 <_ZNSt11_Deque_baseIN4YAML13EMITTER_STATEESaIS1_EE15_M_allocate_mapEm+0x66>\n  66:\t48 83 c4 28          \tadd    $0x28,%rsp\n  6a:\t5b                   \tpop    %rbx\n  6b:\t5d                   \tpop    %rbp\n  6c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std _Deque_base<YAML EMITTER_STATE>\n_M_allocate_map(__int64 a1, __int64 a2) {\n  __int64 v2;\n  char <span class=\"supfact\">v4</span>[Number];\n  std _Deque_base<YAML EMITTER_STATE> _M_get_map_allocator(<span class=\"supfact\">v4</span>,\n                                                           a1);\n  v2 = std allocator_traits<std allocator<YAML EMITTER_STATE *>> allocate(\n      <span class=\"supfact\">v4</span>, a2);\n  std allocator<YAML EMITTER_STATE *> ~allocator(<span class=\"supfact\">v4</span>);\n  return v2;\n}", "code_t": "std _Deque_base<YAML EMITTER_STATE> _Map_pointer __cdecl std\n    _Deque_base<YAML EMITTER_STATE>\n    _M_allocate_map(std _Deque_base<YAML EMITTER_STATE> *const this,\n                    std size_t __n) {\n  YAML EMITTER_STATE **v2;\n  std _Deque_base<YAML EMITTER_STATE> _Map_alloc_type\n      <span class=\"supfact\">__map_alloc</span>;\n  std _Deque_base<YAML EMITTER_STATE> _M_get_map_allocator(\n      (const std _Deque_base<YAML EMITTER_STATE> *const) &\n      <span class=\"supfact\">__map_alloc</span>);\n  v2 = std allocator_traits<std allocator<YAML EMITTER_STATE *>> allocate(\n      &<span class=\"supfact\">__map_alloc</span>, __n);\n  std allocator<YAML EMITTER_STATE *> ~allocator(&<span class=\"supfact\">__map_alloc</span>);\n  return v2;\n}", "var": [{"name": "v4", "type": "__unk__", "pred_name": "__map_alloc", "ref_name": "__map_alloc", "ref_type": "struct std::_Deque_base<YAML::EMITTER_STATE>::_Map_alloc_type { __gnu_cxx::new_allocator<YAML::EMITTER_STATE*> baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "SecureAuthCorp", "repo_name": "pycodin", "path": "SecureAuthCorp/pycodin/896e3aa1dd6ba6a0fc3b5efab1412f280eaed81a6e0d6f9667f3688c8952a550", "path_in_repo": "SecureAuthCorp/pycodin/qemu-0.12.3/ppc64-linux-user/op_helper.o", "objdump": "0000000000008d8c <helper_vrfim>:\n    8d8c:\t55                   \tpush   %rbp\n    8d8d:\t48 89 e5             \tmov    %rsp,%rbp\n    8d90:\t48 83 ec 20          \tsub    $0x20,%rsp\n    8d94:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    8d98:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    8d9c:\t4c 89 f0             \tmov    %r14,%rax\n    8d9f:\t8b 90 5c 82 01 00    \tmov    0x1825c(%rax),%edx\n    8da5:\t89 55 f6             \tmov    %edx,-0xa(%rbp)\n    8da8:\t0f b7 80 60 82 01 00 \tmovzwl 0x18260(%rax),%eax\n    8daf:\t66 89 45 fa          \tmov    %ax,-0x6(%rbp)\n    8db3:\t48 8d 45 f6          \tlea    -0xa(%rbp),%rax\n    8db7:\t48 89 c6             \tmov    %rax,%rsi\n    8dba:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    8dbf:\te8 00 00 00 00       \tcallq  8dc4 <helper_vrfim+0x38>\n    8dc4:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    8dcb:\te9 89 00 00 00       \tjmpq   8e59 <helper_vrfim+0xcd>\n    8dd0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8dd4:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    8dd7:\t48 63 d2             \tmovslq %edx,%rdx\n    8dda:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    8ddd:\t89 c7                \tmov    %eax,%edi\n    8ddf:\te8 00 00 00 00       \tcallq  8de4 <helper_vrfim+0x58>\n    8de4:\t85 c0                \ttest   %eax,%eax\n    8de6:\t75 18                \tjne    8e00 <helper_vrfim+0x74>\n    8de8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8dec:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    8def:\t48 63 d2             \tmovslq %edx,%rdx\n    8df2:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    8df5:\t89 c7                \tmov    %eax,%edi\n    8df7:\te8 00 00 00 00       \tcallq  8dfc <helper_vrfim+0x70>\n    8dfc:\t85 c0                \ttest   %eax,%eax\n    8dfe:\t74 2d                \tje     8e2d <helper_vrfim+0xa1>\n    8e00:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8e04:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    8e07:\t48 63 d2             \tmovslq %edx,%rdx\n    8e0a:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    8e0d:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    8e10:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    8e13:\t0d 00 00 40 00       \tor     $0x400000,%eax\n    8e18:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    8e1b:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n    8e1e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    8e22:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    8e25:\t48 63 d2             \tmovslq %edx,%rdx\n    8e28:\t89 0c 90             \tmov    %ecx,(%rax,%rdx,4)\n    8e2b:\teb 28                \tjmp    8e55 <helper_vrfim+0xc9>\n    8e2d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8e31:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    8e34:\t48 63 d2             \tmovslq %edx,%rdx\n    8e37:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    8e3a:\t48 8d 55 f6          \tlea    -0xa(%rbp),%rdx\n    8e3e:\t48 89 d6             \tmov    %rdx,%rsi\n    8e41:\t89 c7                \tmov    %eax,%edi\n    8e43:\te8 00 00 00 00       \tcallq  8e48 <helper_vrfim+0xbc>\n    8e48:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    8e4c:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n    8e4f:\t48 63 c9             \tmovslq %ecx,%rcx\n    8e52:\t89 04 8a             \tmov    %eax,(%rdx,%rcx,4)\n    8e55:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    8e59:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    8e5c:\t83 f8 03             \tcmp    $0x3,%eax\n    8e5f:\t0f 86 6b ff ff ff    \tjbe    8dd0 <helper_vrfim+0x44>\n    8e65:\t90                   \tnop\n    8e66:\t90                   \tnop\n    8e67:\tc9                   \tleaveq \n    8e68:\tc3                   \tretq   ", "code_s": "__int64 __fastcall helper_vrfim(__int64 a1, __int64 a2) {\n  __int64 v2;\n  int v3;\n  __int64 result;\n  int <span class=\"supfact\">v5</span>;\n  __int16 v6;\n  unsigned int i;\n  <span class=\"supfact\">v5</span> = *(_DWORD *)(v2 + Number);\n  v6 = *(_WORD *)(v2 + Number);\n  set_float_rounding_mode(Number L, &<span class=\"supfact\">v5</span>);\n  for (i = Number;; ++i) {\n    result = i;\n    if (i > Number)\n      break;\n    if ((unsigned int)float32_is_nan(\n            *(unsigned int *)(a2 + Number L * (int)i)) ||\n        (unsigned int)float32_is_signaling_nan(\n            *(unsigned int *)(a2 + Number L * (int)i))) {\n      *(_DWORD *)(a1 + Number L * (int)i) =\n          *(_DWORD *)(a2 + Number L * (int)i) | Number;\n    } else {\n      v3 = float32_round_to_int(*(unsigned int *)(a2 + Number L * (int)i),\n                                &<span class=\"supfact\">v5</span>);\n      *(_DWORD *)(a1 + Number L * (int)i) = v3;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl helper_vrfim(ppc_avr_t_0 *r, ppc_avr_t_0 *b) {\n  __int64 v2;\n  float32 v3;\n  float_status_0 <span class=\"supfact\">s</span>;\n  int i;\n  <span class=\"supfact\">s</span> = *(float_status_0 *)(v2 + Number);\n  set_float_rounding_mode(Number L, &<span class=\"supfact\">s</span>);\n  for (i = Number; (unsigned int)i <= Number; ++i) {\n    if ((unsigned int)float32_is_nan(b->f[i]) ||\n        (unsigned int)float32_is_signaling_nan(b->f[i])) {\n      r->f[i] = b->f[i] | Number;\n    } else {\n      v3 = float32_round_to_int(b->f[i], &<span class=\"supfact\">s</span>);\n      r->f[i] = v3;\n    }\n  }\n}", "var": [{"name": "v5", "type": "struct float_status_0 { char float_detect_tininess; char float_rounding_mode; char float_exception_flags; char floatx80_rounding_precision; flag flush_to_zero; flag default_nan_mode; }", "pred_name": "s", "ref_name": "s", "ref_type": "struct float_status_0 { char float_detect_tininess; char float_rounding_mode; char float_exception_flags; char floatx80_rounding_precision; flag flush_to_zero; flag default_nan_mode; }"}], "body_in_train": false}, {"repo_owner": "QinMing", "repo_name": "HTTP_Web_Server", "path": "QinMing/HTTP_Web_Server/1a017dbf98bc126abb2a2c80fc328c13a0e7d81607a8fe3ab6322b55f5c6b412", "path_in_repo": "QinMing/HTTP_Web_Server//permission.o", "objdump": "0000000000000294 <checkAuth>:\n 294:\t55                   \tpush   %rbp\n 295:\t48 89 e5             \tmov    %rsp,%rbp\n 298:\t53                   \tpush   %rbx\n 299:\t48 81 ec f8 01 00 00 \tsub    $0x1f8,%rsp\n 2a0:\t48 89 f9             \tmov    %rdi,%rcx\n 2a3:\t48 89 f0             \tmov    %rsi,%rax\n 2a6:\t48 89 c3             \tmov    %rax,%rbx\n 2a9:\t48 89 8d 10 fe ff ff \tmov    %rcx,-0x1f0(%rbp)\n 2b0:\t48 89 9d 18 fe ff ff \tmov    %rbx,-0x1e8(%rbp)\n 2b7:\t48 89 95 08 fe ff ff \tmov    %rdx,-0x1f8(%rbp)\n 2be:\t48 c7 45 98 00 00 00 \tmovq   $0x0,-0x68(%rbp)\n 2c5:\t00 \n 2c6:\t48 c7 45 90 00 00 00 \tmovq   $0x0,-0x70(%rbp)\n 2cd:\t00 \n 2ce:\t48 8d 45 8a          \tlea    -0x76(%rbp),%rax\n 2d2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 2d6:\t66 c7 85 2e fe ff ff \tmovw   $0x30,-0x1d2(%rbp)\n 2dd:\t30 00 \n 2df:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n 2e6:\tba 30 00 00 00       \tmov    $0x30,%edx\n 2eb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2f0:\t48 89 c7             \tmov    %rax,%rdi\n 2f3:\te8 00 00 00 00       \tcallq  2f8 <checkAuth+0x64>\n 2f8:\tc7 85 44 ff ff ff 02 \tmovl   $0x2,-0xbc(%rbp)\n 2ff:\t00 00 00 \n 302:\tc7 85 48 ff ff ff 01 \tmovl   $0x1,-0xb8(%rbp)\n 309:\t00 00 00 \n 30c:\tc7 85 4c ff ff ff 06 \tmovl   $0x6,-0xb4(%rbp)\n 313:\t00 00 00 \n 316:\t8b 85 14 fe ff ff    \tmov    -0x1ec(%rbp),%eax\n 31c:\t89 c0                \tmov    %eax,%eax\n 31e:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n 322:\t48 8b 85 08 fe ff ff \tmov    -0x1f8(%rbp),%rax\n 329:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 32e:\t48 89 c7             \tmov    %rax,%rdi\n 331:\te8 00 00 00 00       \tcallq  336 <checkAuth+0xa2>\n 336:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n 33a:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n 33f:\t0f 85 17 03 00 00    \tjne    65c <checkAuth+0x3c8>\n 345:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 34a:\te9 42 03 00 00       \tjmpq   691 <checkAuth+0x3fd>\n 34f:\t48 8d 45 8a          \tlea    -0x76(%rbp),%rax\n 353:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n 359:\t66 c7 40 04 00 00    \tmovw   $0x0,0x4(%rax)\n 35f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 363:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 367:\t48 8d 45 8a          \tlea    -0x76(%rbp),%rax\n 36b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 36f:\teb 1d                \tjmp    38e <checkAuth+0xfa>\n 371:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 375:\t48 8d 42 01          \tlea    0x1(%rdx),%rax\n 379:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 37d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 381:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n 385:\t48 89 4d e8          \tmov    %rcx,-0x18(%rbp)\n 389:\t0f b6 12             \tmovzbl (%rdx),%edx\n 38c:\t88 10                \tmov    %dl,(%rax)\n 38e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 392:\t0f b6 00             \tmovzbl (%rax),%eax\n 395:\t3c 20                \tcmp    $0x20,%al\n 397:\t75 d8                \tjne    371 <checkAuth+0xdd>\n 399:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n 39e:\teb 05                \tjmp    3a5 <checkAuth+0x111>\n 3a0:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n 3a5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 3a9:\t0f b6 00             \tmovzbl (%rax),%eax\n 3ac:\t3c 20                \tcmp    $0x20,%al\n 3ae:\t75 f0                \tjne    3a0 <checkAuth+0x10c>\n 3b0:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n 3b5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 3b9:\t0f b6 00             \tmovzbl (%rax),%eax\n 3bc:\t88 45 af             \tmov    %al,-0x51(%rbp)\n 3bf:\t80 7d af 40          \tcmpb   $0x40,-0x51(%rbp)\n 3c3:\t7e 06                \tjle    3cb <checkAuth+0x137>\n 3c5:\t80 7d af 5a          \tcmpb   $0x5a,-0x51(%rbp)\n 3c9:\t7e 14                \tjle    3df <checkAuth+0x14b>\n 3cb:\t80 7d af 60          \tcmpb   $0x60,-0x51(%rbp)\n 3cf:\t0f 8e 62 01 00 00    \tjle    537 <checkAuth+0x2a3>\n 3d5:\t80 7d af 7a          \tcmpb   $0x7a,-0x51(%rbp)\n 3d9:\t0f 8f 58 01 00 00    \tjg     537 <checkAuth+0x2a3>\n 3df:\t48 8d 85 30 fe ff ff \tlea    -0x1d0(%rbp),%rax\n 3e6:\t48 89 c6             \tmov    %rax,%rsi\n 3e9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3ee:\tba 20 00 00 00       \tmov    $0x20,%edx\n 3f3:\t48 89 f7             \tmov    %rsi,%rdi\n 3f6:\t48 89 d1             \tmov    %rdx,%rcx\n 3f9:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n 3fc:\t48 8d 85 30 fe ff ff \tlea    -0x1d0(%rbp),%rax\n 403:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 407:\teb 1d                \tjmp    426 <checkAuth+0x192>\n 409:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 40d:\t48 8d 42 01          \tlea    0x1(%rdx),%rax\n 411:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 415:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 419:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n 41d:\t48 89 4d e8          \tmov    %rcx,-0x18(%rbp)\n 421:\t0f b6 12             \tmovzbl (%rdx),%edx\n 424:\t88 10                \tmov    %dl,(%rax)\n 426:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 42a:\t0f b6 00             \tmovzbl (%rax),%eax\n 42d:\t3c 0a                \tcmp    $0xa,%al\n 42f:\t75 d8                \tjne    409 <checkAuth+0x175>\n 431:\t48 8d 85 30 fe ff ff \tlea    -0x1d0(%rbp),%rax\n 438:\t48 89 c6             \tmov    %rax,%rsi\n 43b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 440:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 445:\te8 00 00 00 00       \tcallq  44a <checkAuth+0x1b6>\n 44a:\t48 8d 8d 38 ff ff ff \tlea    -0xc8(%rbp),%rcx\n 451:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n 458:\t48 8d b5 2e fe ff ff \tlea    -0x1d2(%rbp),%rsi\n 45f:\t48 8d 85 30 fe ff ff \tlea    -0x1d0(%rbp),%rax\n 466:\t48 89 c7             \tmov    %rax,%rdi\n 469:\te8 00 00 00 00       \tcallq  46e <checkAuth+0x1da>\n 46e:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n 471:\t83 7d a8 00          \tcmpl   $0x0,-0x58(%rbp)\n 475:\t74 0a                \tje     481 <checkAuth+0x1ed>\n 477:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n 47a:\t89 c7                \tmov    %eax,%edi\n 47c:\te8 00 00 00 00       \tcallq  481 <checkAuth+0x1ed>\n 481:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 488:\t48 85 c0             \ttest   %rax,%rax\n 48b:\t75 0a                \tjne    497 <checkAuth+0x203>\n 48d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 492:\te8 00 00 00 00       \tcallq  497 <checkAuth+0x203>\n 497:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 49e:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 4a2:\te9 80 00 00 00       \tjmpq   527 <checkAuth+0x293>\n 4a7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 4ab:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 4af:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n 4b3:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 4b7:\t8b 40 04             \tmov    0x4(%rax),%eax\n 4ba:\t89 c0                \tmov    %eax,%eax\n 4bc:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 4c0:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n 4c4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 4c8:\tba 20 00 00 00       \tmov    $0x20,%edx\n 4cd:\t48 89 ce             \tmov    %rcx,%rsi\n 4d0:\t48 89 c7             \tmov    %rax,%rdi\n 4d3:\te8 00 00 00 00       \tcallq  4d8 <checkAuth+0x244>\n 4d8:\t83 f8 01             \tcmp    $0x1,%eax\n 4db:\t75 3e                \tjne    51b <checkAuth+0x287>\n 4dd:\t48 8d 45 8a          \tlea    -0x76(%rbp),%rax\n 4e1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 4e6:\t48 89 c7             \tmov    %rax,%rdi\n 4e9:\te8 00 00 00 00       \tcallq  4ee <checkAuth+0x25a>\n 4ee:\t85 c0                \ttest   %eax,%eax\n 4f0:\t75 0a                \tjne    4fc <checkAuth+0x268>\n 4f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4f7:\te9 95 01 00 00       \tjmpq   691 <checkAuth+0x3fd>\n 4fc:\t48 8d 45 8a          \tlea    -0x76(%rbp),%rax\n 500:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 505:\t48 89 c7             \tmov    %rax,%rdi\n 508:\te8 00 00 00 00       \tcallq  50d <checkAuth+0x279>\n 50d:\t85 c0                \ttest   %eax,%eax\n 50f:\t75 0a                \tjne    51b <checkAuth+0x287>\n 511:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 516:\te9 76 01 00 00       \tjmpq   691 <checkAuth+0x3fd>\n 51b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 51f:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n 523:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 527:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n 52c:\t0f 85 75 ff ff ff    \tjne    4a7 <checkAuth+0x213>\n 532:\te9 25 01 00 00       \tjmpq   65c <checkAuth+0x3c8>\n 537:\t80 7d af 2f          \tcmpb   $0x2f,-0x51(%rbp)\n 53b:\t0f 8e c8 00 00 00    \tjle    609 <checkAuth+0x375>\n 541:\t80 7d af 39          \tcmpb   $0x39,-0x51(%rbp)\n 545:\t0f 8f be 00 00 00    \tjg     609 <checkAuth+0x375>\n 54b:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 552:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n 559:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n 560:\t00 \n 561:\tc7 40 10 00 00 00 00 \tmovl   $0x0,0x10(%rax)\n 568:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 56f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 573:\teb 1d                \tjmp    592 <checkAuth+0x2fe>\n 575:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 579:\t48 8d 42 01          \tlea    0x1(%rdx),%rax\n 57d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 581:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 585:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n 589:\t48 89 4d e8          \tmov    %rcx,-0x18(%rbp)\n 58d:\t0f b6 12             \tmovzbl (%rdx),%edx\n 590:\t88 10                \tmov    %dl,(%rax)\n 592:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 596:\t0f b6 00             \tmovzbl (%rax),%eax\n 599:\t3c 2f                \tcmp    $0x2f,%al\n 59b:\t74 0b                \tje     5a8 <checkAuth+0x314>\n 59d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 5a1:\t0f b6 00             \tmovzbl (%rax),%eax\n 5a4:\t3c 0a                \tcmp    $0xa,%al\n 5a6:\t75 cd                \tjne    575 <checkAuth+0x2e1>\n 5a8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 5ac:\t0f b6 00             \tmovzbl (%rax),%eax\n 5af:\t3c 0a                \tcmp    $0xa,%al\n 5b1:\t75 14                \tjne    5c7 <checkAuth+0x333>\n 5b3:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 5ba:\t48 89 c7             \tmov    %rax,%rdi\n 5bd:\te8 00 00 00 00       \tcallq  5c2 <checkAuth+0x32e>\n 5c2:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n 5c5:\teb 42                \tjmp    609 <checkAuth+0x375>\n 5c7:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 5ce:\t48 89 c6             \tmov    %rax,%rsi\n 5d1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 5d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 5db:\te8 00 00 00 00       \tcallq  5e0 <checkAuth+0x34c>\n 5e0:\t48 8d 55 84          \tlea    -0x7c(%rbp),%rdx\n 5e4:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 5eb:\t48 89 d6             \tmov    %rdx,%rsi\n 5ee:\t48 89 c7             \tmov    %rax,%rdi\n 5f1:\te8 00 00 00 00       \tcallq  5f6 <checkAuth+0x362>\n 5f6:\t8b 45 84             \tmov    -0x7c(%rbp),%eax\n 5f9:\t89 c0                \tmov    %eax,%eax\n 5fb:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 5ff:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n 604:\te9 42 ff ff ff       \tjmpq   54b <checkAuth+0x2b7>\n 609:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n 60c:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n 610:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 614:\t48 89 ce             \tmov    %rcx,%rsi\n 617:\t48 89 c7             \tmov    %rax,%rdi\n 61a:\te8 00 00 00 00       \tcallq  61f <checkAuth+0x38b>\n 61f:\t83 f8 01             \tcmp    $0x1,%eax\n 622:\t75 38                \tjne    65c <checkAuth+0x3c8>\n 624:\t48 8d 45 8a          \tlea    -0x76(%rbp),%rax\n 628:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 62d:\t48 89 c7             \tmov    %rax,%rdi\n 630:\te8 00 00 00 00       \tcallq  635 <checkAuth+0x3a1>\n 635:\t85 c0                \ttest   %eax,%eax\n 637:\t75 07                \tjne    640 <checkAuth+0x3ac>\n 639:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 63e:\teb 51                \tjmp    691 <checkAuth+0x3fd>\n 640:\t48 8d 45 8a          \tlea    -0x76(%rbp),%rax\n 644:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 649:\t48 89 c7             \tmov    %rax,%rdi\n 64c:\te8 00 00 00 00       \tcallq  651 <checkAuth+0x3bd>\n 651:\t85 c0                \ttest   %eax,%eax\n 653:\t75 07                \tjne    65c <checkAuth+0x3c8>\n 655:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 65a:\teb 35                \tjmp    691 <checkAuth+0x3fd>\n 65c:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n 660:\t48 8d 4d 90          \tlea    -0x70(%rbp),%rcx\n 664:\t48 8d 45 98          \tlea    -0x68(%rbp),%rax\n 668:\t48 89 ce             \tmov    %rcx,%rsi\n 66b:\t48 89 c7             \tmov    %rax,%rdi\n 66e:\te8 00 00 00 00       \tcallq  673 <checkAuth+0x3df>\n 673:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n 677:\t0f 95 c0             \tsetne  %al\n 67a:\t0f b6 c0             \tmovzbl %al,%eax\n 67d:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n 681:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n 686:\t0f 85 c3 fc ff ff    \tjne    34f <checkAuth+0xbb>\n 68c:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 691:\t48 81 c4 f8 01 00 00 \tadd    $0x1f8,%rsp\n 698:\t5b                   \tpop    %rbx\n 699:\t5d                   \tpop    %rbp\n 69a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall checkAuth(__int64 a1, __int64 a2, const char *a3) {\n  char *v4;\n  char *v5;\n  char *v6;\n  char *v7;\n  char *v8;\n  char *v9;\n  __ssize_t v10;\n  char service[Number];\n  char name[Number];\n  struct addrinfo *pai;\n  struct addrinfo <span class=\"supfact\">s</span>;\n  __int64 nptr[Number];\n  int v17;\n  struct in_addr <span class=\"supfact\">inp</span>;\n  int s1;\n  __int16 v20;\n  size_t n;\n  char *lineptr;\n  struct sockaddr *v23;\n  int ecode;\n  char v25;\n  _BOOL8 v26;\n  FILE *stream;\n  __int64 v28;\n  struct addrinfo *i;\n  int v30;\n  __int64 v31;\n  char *v32;\n  char *v33;\n  lineptr = Number L;\n  n = Number L;\n  v33 = (char *)&s1;\n  strcpy(service, String);\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.ai_family = Number;\n  <span class=\"supfact\">s</span>.ai_socktype = Number;\n  <span class=\"supfact\">s</span>.ai_protocol = Number;\n  v28 = HIDWORD(a1);\n  stream = fopen(a3, String);\n  if (!stream)\n    return Number L;\n  while (Number) {\n    v10 = getline(&lineptr, &n, stream);\n    v26 = v10 != Number;\n    if (v10 == Number)\n      break;\n    s1 = Number;\n    v20 = Number;\n    v32 = lineptr;\n    v33 = (char *)&s1;\n    while (*v32 != Number) {\n      v4 = v32++;\n      v5 = v33++;\n      *v5 = *v4;\n    }\n    ++v32;\n    while (*v32 != Number)\n      ++v32;\n    v25 = *++v32;\n    if ((v25 <= Number || v25 > Number) && (v25 <= Number || v25 > Number)) {\n      if (v25 > Number && v25 <= Number) {\n        while (Number) {\n          nptr[Number] = Number L;\n          nptr[Number] = Number L;\n          v17 = Number;\n          v33 = (char *)nptr;\n          while (*v32 != Number && *v32 != Number) {\n            v8 = v32++;\n            v9 = v33++;\n            *v9 = *v8;\n          }\n          if (*v32 == Number)\n            break;\n          printf(String, (const char *)nptr);\n          inet_aton((const char *)nptr, &<span class=\"supfact\">inp</span>);\n          v31 = <span class=\"supfact\">inp</span>.s_addr;\n          ++v32;\n        }\n        v30 = atoi((const char *)nptr);\n      }\n      if (cmpNumIP(v31, v28, v30)) {\n        if (!strcmp((const char *)&s1, String))\n          return Number L;\n        if (!strcmp((const char *)&s1, String))\n          return Number L;\n      }\n    } else {\n      memset(name, Number, Number);\n      v33 = name;\n      while (*v32 != Number) {\n        v6 = v32++;\n        v7 = v33++;\n        *v7 = *v6;\n      }\n      printf(String, name);\n      ecode = getaddrinfo(name, service, &<span class=\"supfact\">s</span>, &pai);\n      if (ecode)\n        gai_strerror(ecode);\n      if (!pai)\n        puts(String);\n      for (i = pai; i; i = i->ai_next) {\n        v23 = i->ai_addr;\n        v31 = *(unsigned int *)&v23->sa_data[Number];\n        if (cmpNumIP(v31, v28, Number)) {\n          if (!strcmp((const char *)&s1, String))\n            return Number L;\n          if (!strcmp((const char *)&s1, String))\n            return Number L;\n        }\n      }\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl checkAuth(sockaddr_in clientIP, char *filename) {\n  char *v3;\n  char *v4;\n  char *v5;\n  char *v6;\n  char *v7;\n  char *v8;\n  __ssize_t v9;\n  char portString[Number];\n  char addrString[Number];\n  addrinfo *addrList;\n  addrinfo <span class=\"supfact\">addrCriteria</span>;\n  char strIPAddr[Number];\n  in_addr <span class=\"supfact\">netIPAddr</span>;\n  char comm[Number];\n  size_t len;\n  char *line;\n  sockaddr_in *ai_addr_in;\n  int rtnVal;\n  char temp;\n  ssize_t read;\n  FILE *fd;\n  unsigned __int64 reqIP;\n  addrinfo *addr;\n  unsigned int mask;\n  unsigned __int64 numIPAddr;\n  char *pline;\n  char *p;\n  line = Number L;\n  len = Number L;\n  p = comm;\n  strcpy(portString, String);\n  memset(&<span class=\"supfact\">addrCriteria</span>, Number,\n         sizeof(<span class=\"supfact\">addrCriteria</span>));\n  <span class=\"supfact\">addrCriteria</span>.ai_family = Number;\n  <span class=\"supfact\">addrCriteria</span>.ai_socktype = Number;\n  <span class=\"supfact\">addrCriteria</span>.ai_protocol = Number;\n  reqIP = clientIP.sin_addr.s_addr;\n  fd = fopen(filename, String);\n  if (!fd)\n    return Number;\n  while (Number) {\n    v9 = getline(&line, &len, fd);\n    read = v9 != Number;\n    if (v9 == Number)\n      break;\n    *(_DWORD *)comm = Number;\n    *(_WORD *)&comm[Number] = Number;\n    pline = line;\n    p = comm;\n    while (*pline != Number) {\n      v3 = pline++;\n      v4 = p++;\n      *v4 = *v3;\n    }\n    ++pline;\n    while (*pline != Number)\n      ++pline;\n    temp = *++pline;\n    if ((temp <= Number || temp > Number) &&\n        (temp <= Number || temp > Number)) {\n      if (temp > Number && temp <= Number) {\n        while (Number) {\n          *(_QWORD *)strIPAddr = Number L;\n          *(_QWORD *)&strIPAddr[Number] = Number L;\n          *(_DWORD *)&strIPAddr[Number] = Number;\n          p = strIPAddr;\n          while (*pline != Number && *pline != Number) {\n            v7 = pline++;\n            v8 = p++;\n            *v8 = *v7;\n          }\n          if (*pline == Number)\n            break;\n          printf(String, strIPAddr);\n          inet_aton(strIPAddr, &<span class=\"supfact\">netIPAddr</span>);\n          numIPAddr = <span class=\"supfact\">netIPAddr</span>.s_addr;\n          ++pline;\n        }\n        mask = atoi(strIPAddr);\n      }\n      if (cmpNumIP(numIPAddr, reqIP, mask) == Number) {\n        if (!strcmp(comm, String))\n          return Number;\n        if (!strcmp(comm, String))\n          return Number;\n      }\n    } else {\n      memset(addrString, Number, sizeof(addrString));\n      p = addrString;\n      while (*pline != Number) {\n        v5 = pline++;\n        v6 = p++;\n        *v6 = *v5;\n      }\n      printf(String, addrString);\n      rtnVal = getaddrinfo(addrString, portString,\n                           &<span class=\"supfact\">addrCriteria</span>, &addrList);\n      if (rtnVal)\n        gai_strerror(rtnVal);\n      if (!addrList)\n        puts(String);\n      for (addr = addrList; addr; addr = addr->ai_next) {\n        ai_addr_in = (sockaddr_in *)addr->ai_addr;\n        numIPAddr = ai_addr_in->sin_addr.s_addr;\n        if (cmpNumIP(numIPAddr, reqIP, Number) == Number) {\n          if (!strcmp(comm, String))\n            return Number;\n          if (!strcmp(comm, String))\n            return Number;\n        }\n      }\n    }\n  }\n  return Number;\n}", "var": [{"name": "s", "type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }", "pred_name": "hints", "ref_name": "addrCriteria", "ref_type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }"}, {"name": "inp", "type": "struct in_addr { in_addr_t s_addr; }", "pred_name": "__unk__", "ref_name": "netIPAddr", "ref_type": "struct in_addr { in_addr_t s_addr; }"}], "body_in_train": false}, {"repo_owner": "HelllGuest", "repo_name": "phoenix_kernel_lux", "path": "HelllGuest/phoenix_kernel_lux/1d5c27c4157c3a2a4e05ca4ea2743a951e109ae5e958c7a913acf996751e5fae", "path_in_repo": "HelllGuest/phoenix_kernel_lux/tools/perf/builtin-stat.o", "objdump": "00000000000011b2 <__run_perf_stat>:\n    11b2:\t55                   \tpush   %rbp\n    11b3:\t48 89 e5             \tmov    %rsp,%rbp\n    11b6:\t53                   \tpush   %rbx\n    11b7:\t48 81 ec 88 02 00 00 \tsub    $0x288,%rsp\n    11be:\t89 bd 7c fd ff ff    \tmov    %edi,-0x284(%rbp)\n    11c4:\t48 89 b5 70 fd ff ff \tmov    %rsi,-0x290(%rbp)\n    11cb:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    11d2:\t00 00 \n    11d4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    11d8:\t31 c0                \txor    %eax,%eax\n    11da:\tc7 85 84 fd ff ff 00 \tmovl   $0x0,-0x27c(%rbp)\n    11e1:\t00 00 00 \n    11e4:\t83 bd 7c fd ff ff 00 \tcmpl   $0x0,-0x284(%rbp)\n    11eb:\t0f 9f c0             \tsetg   %al\n    11ee:\t88 85 83 fd ff ff    \tmov    %al,-0x27d(%rbp)\n    11f4:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 11fa <__run_perf_stat+0x48>\n    11fa:\t85 c0                \ttest   %eax,%eax\n    11fc:\t74 50                \tje     124e <__run_perf_stat+0x9c>\n    11fe:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1204 <__run_perf_stat+0x52>\n    1204:\t89 c0                \tmov    %eax,%eax\n    1206:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n    120d:\t48 c1 e8 20          \tshr    $0x20,%rax\n    1211:\tc1 e8 06             \tshr    $0x6,%eax\n    1214:\t89 c0                \tmov    %eax,%eax\n    1216:\t48 89 85 d0 fd ff ff \tmov    %rax,-0x230(%rbp)\n    121d:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1223 <__run_perf_stat+0x71>\n    1223:\t89 d0                \tmov    %edx,%eax\n    1225:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n    122c:\t48 c1 e8 20          \tshr    $0x20,%rax\n    1230:\tc1 e8 06             \tshr    $0x6,%eax\n    1233:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n    1239:\t29 c2                \tsub    %eax,%edx\n    123b:\t89 d0                \tmov    %edx,%eax\n    123d:\t69 c0 40 42 0f 00    \timul   $0xf4240,%eax,%eax\n    1243:\t89 c0                \tmov    %eax,%eax\n    1245:\t48 89 85 d8 fd ff ff \tmov    %rax,-0x228(%rbp)\n    124c:\teb 16                \tjmp    1264 <__run_perf_stat+0xb2>\n    124e:\t48 c7 85 d0 fd ff ff \tmovq   $0x1,-0x230(%rbp)\n    1255:\t01 00 00 00 \n    1259:\t48 c7 85 d8 fd ff ff \tmovq   $0x0,-0x228(%rbp)\n    1260:\t00 00 00 00 \n    1264:\t80 bd 83 fd ff ff 00 \tcmpb   $0x0,-0x27d(%rbp)\n    126b:\t74 3e                \tje     12ab <__run_perf_stat+0xf9>\n    126d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1274 <__run_perf_stat+0xc2>\n    1274:\t48 8b 95 70 fd ff ff \tmov    -0x290(%rbp),%rdx\n    127b:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1281:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1286:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    128b:\t48 89 c7             \tmov    %rax,%rdi\n    128e:\te8 00 00 00 00       \tcallq  1293 <__run_perf_stat+0xe1>\n    1293:\t85 c0                \ttest   %eax,%eax\n    1295:\t79 14                \tjns    12ab <__run_perf_stat+0xf9>\n    1297:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    129c:\te8 00 00 00 00       \tcallq  12a1 <__run_perf_stat+0xef>\n    12a1:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    12a6:\te9 0f 04 00 00       \tjmpq   16ba <__run_perf_stat+0x508>\n    12ab:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 12b2 <__run_perf_stat+0x100>\n    12b2:\t84 c0                \ttest   %al,%al\n    12b4:\t74 0f                \tje     12c5 <__run_perf_stat+0x113>\n    12b6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 12bd <__run_perf_stat+0x10b>\n    12bd:\t48 89 c7             \tmov    %rax,%rdi\n    12c0:\te8 00 00 00 00       \tcallq  12c5 <__run_perf_stat+0x113>\n    12c5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 12cc <__run_perf_stat+0x11a>\n    12cc:\t48 8b 00             \tmov    (%rax),%rax\n    12cf:\t48 89 85 90 fd ff ff \tmov    %rax,-0x270(%rbp)\n    12d6:\t48 8b 85 90 fd ff ff \tmov    -0x270(%rbp),%rax\n    12dd:\t48 89 85 88 fd ff ff \tmov    %rax,-0x278(%rbp)\n    12e4:\te9 23 01 00 00       \tjmpq   140c <__run_perf_stat+0x25a>\n    12e9:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    12f0:\t48 89 c7             \tmov    %rax,%rdi\n    12f3:\te8 57 f5 ff ff       \tcallq  84f <create_perf_stat_counter>\n    12f8:\t85 c0                \ttest   %eax,%eax\n    12fa:\t0f 89 df 00 00 00    \tjns    13df <__run_perf_stat+0x22d>\n    1300:\te8 00 00 00 00       \tcallq  1305 <__run_perf_stat+0x153>\n    1305:\t8b 00                \tmov    (%rax),%eax\n    1307:\t83 f8 16             \tcmp    $0x16,%eax\n    130a:\t74 30                \tje     133c <__run_perf_stat+0x18a>\n    130c:\te8 00 00 00 00       \tcallq  1311 <__run_perf_stat+0x15f>\n    1311:\t8b 00                \tmov    (%rax),%eax\n    1313:\t83 f8 26             \tcmp    $0x26,%eax\n    1316:\t74 24                \tje     133c <__run_perf_stat+0x18a>\n    1318:\te8 00 00 00 00       \tcallq  131d <__run_perf_stat+0x16b>\n    131d:\t8b 00                \tmov    (%rax),%eax\n    131f:\t83 f8 02             \tcmp    $0x2,%eax\n    1322:\t74 18                \tje     133c <__run_perf_stat+0x18a>\n    1324:\te8 00 00 00 00       \tcallq  1329 <__run_perf_stat+0x177>\n    1329:\t8b 00                \tmov    (%rax),%eax\n    132b:\t83 f8 5f             \tcmp    $0x5f,%eax\n    132e:\t74 0c                \tje     133c <__run_perf_stat+0x18a>\n    1330:\te8 00 00 00 00       \tcallq  1335 <__run_perf_stat+0x183>\n    1335:\t8b 00                \tmov    (%rax),%eax\n    1337:\t83 f8 06             \tcmp    $0x6,%eax\n    133a:\t75 3b                \tjne    1377 <__run_perf_stat+0x1c5>\n    133c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1342 <__run_perf_stat+0x190>\n    1342:\t85 c0                \ttest   %eax,%eax\n    1344:\t74 21                \tje     1367 <__run_perf_stat+0x1b5>\n    1346:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    134d:\t48 89 c7             \tmov    %rax,%rdi\n    1350:\te8 00 00 00 00       \tcallq  1355 <__run_perf_stat+0x1a3>\n    1355:\t48 89 c6             \tmov    %rax,%rsi\n    1358:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    135d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1362:\te8 00 00 00 00       \tcallq  1367 <__run_perf_stat+0x1b5>\n    1367:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    136e:\tc6 80 d4 02 00 00 00 \tmovb   $0x0,0x2d4(%rax)\n    1375:\teb 76                \tjmp    13ed <__run_perf_stat+0x23b>\n    1377:\te8 00 00 00 00       \tcallq  137c <__run_perf_stat+0x1ca>\n    137c:\t8b 10                \tmov    (%rax),%edx\n    137e:\t48 8d 8d e0 fd ff ff \tlea    -0x220(%rbp),%rcx\n    1385:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    138c:\t41 b8 00 02 00 00    \tmov    $0x200,%r8d\n    1392:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1397:\t48 89 c7             \tmov    %rax,%rdi\n    139a:\te8 00 00 00 00       \tcallq  139f <__run_perf_stat+0x1ed>\n    139f:\t48 8d 85 e0 fd ff ff \tlea    -0x220(%rbp),%rax\n    13a6:\t48 89 c6             \tmov    %rax,%rsi\n    13a9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    13ae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    13b3:\te8 00 00 00 00       \tcallq  13b8 <__run_perf_stat+0x206>\n    13b8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 13be <__run_perf_stat+0x20c>\n    13be:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    13c1:\t74 12                \tje     13d5 <__run_perf_stat+0x223>\n    13c3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 13c9 <__run_perf_stat+0x217>\n    13c9:\tbe 0f 00 00 00       \tmov    $0xf,%esi\n    13ce:\t89 c7                \tmov    %eax,%edi\n    13d0:\te8 00 00 00 00       \tcallq  13d5 <__run_perf_stat+0x223>\n    13d5:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    13da:\te9 db 02 00 00       \tjmpq   16ba <__run_perf_stat+0x508>\n    13df:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    13e6:\tc6 80 d4 02 00 00 01 \tmovb   $0x1,0x2d4(%rax)\n    13ed:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    13f4:\t48 8b 00             \tmov    (%rax),%rax\n    13f7:\t48 89 85 c8 fd ff ff \tmov    %rax,-0x238(%rbp)\n    13fe:\t48 8b 85 c8 fd ff ff \tmov    -0x238(%rbp),%rax\n    1405:\t48 89 85 88 fd ff ff \tmov    %rax,-0x278(%rbp)\n    140c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1413 <__run_perf_stat+0x261>\n    1413:\t48 39 85 88 fd ff ff \tcmp    %rax,-0x278(%rbp)\n    141a:\t0f 85 c9 fe ff ff    \tjne    12e9 <__run_perf_stat+0x137>\n    1420:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1427 <__run_perf_stat+0x275>\n    1427:\t48 89 c7             \tmov    %rax,%rdi\n    142a:\te8 00 00 00 00       \tcallq  142f <__run_perf_stat+0x27d>\n    142f:\t85 c0                \ttest   %eax,%eax\n    1431:\t74 36                \tje     1469 <__run_perf_stat+0x2b7>\n    1433:\te8 00 00 00 00       \tcallq  1438 <__run_perf_stat+0x286>\n    1438:\t8b 00                \tmov    (%rax),%eax\n    143a:\t89 c7                \tmov    %eax,%edi\n    143c:\te8 00 00 00 00       \tcallq  1441 <__run_perf_stat+0x28f>\n    1441:\t48 89 c3             \tmov    %rax,%rbx\n    1444:\te8 00 00 00 00       \tcallq  1449 <__run_perf_stat+0x297>\n    1449:\t8b 00                \tmov    (%rax),%eax\n    144b:\t48 89 da             \tmov    %rbx,%rdx\n    144e:\t89 c6                \tmov    %eax,%esi\n    1450:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1455:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    145a:\te8 00 00 00 00       \tcallq  145f <__run_perf_stat+0x2ad>\n    145f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1464:\te9 51 02 00 00       \tjmpq   16ba <__run_perf_stat+0x508>\n    1469:\te8 92 eb ff ff       \tcallq  0 <rdclock>\n    146e:\t48 89 85 98 fd ff ff \tmov    %rax,-0x268(%rbp)\n    1475:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    147a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    147f:\te8 00 00 00 00       \tcallq  1484 <__run_perf_stat+0x2d2>\n    1484:\t80 bd 83 fd ff ff 00 \tcmpb   $0x0,-0x27d(%rbp)\n    148b:\t0f 84 b7 00 00 00    \tje     1548 <__run_perf_stat+0x396>\n    1491:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1498 <__run_perf_stat+0x2e6>\n    1498:\t48 89 c7             \tmov    %rax,%rdi\n    149b:\te8 00 00 00 00       \tcallq  14a0 <__run_perf_stat+0x2ee>\n    14a0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 14a6 <__run_perf_stat+0x2f4>\n    14a6:\t85 c0                \ttest   %eax,%eax\n    14a8:\t74 3b                \tje     14e5 <__run_perf_stat+0x333>\n    14aa:\teb 19                \tjmp    14c5 <__run_perf_stat+0x313>\n    14ac:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n    14b3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    14b8:\t48 89 c7             \tmov    %rax,%rdi\n    14bb:\te8 00 00 00 00       \tcallq  14c0 <__run_perf_stat+0x30e>\n    14c0:\te8 7a f9 ff ff       \tcallq  e3f <print_interval>\n    14c5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 14cb <__run_perf_stat+0x319>\n    14cb:\t48 8d 8d 84 fd ff ff \tlea    -0x27c(%rbp),%rcx\n    14d2:\tba 01 00 00 00       \tmov    $0x1,%edx\n    14d7:\t48 89 ce             \tmov    %rcx,%rsi\n    14da:\t89 c7                \tmov    %eax,%edi\n    14dc:\te8 00 00 00 00       \tcallq  14e1 <__run_perf_stat+0x32f>\n    14e1:\t85 c0                \ttest   %eax,%eax\n    14e3:\t74 c7                \tje     14ac <__run_perf_stat+0x2fa>\n    14e5:\t48 8d 85 84 fd ff ff \tlea    -0x27c(%rbp),%rax\n    14ec:\t48 89 c7             \tmov    %rax,%rdi\n    14ef:\te8 00 00 00 00       \tcallq  14f4 <__run_perf_stat+0x342>\n    14f4:\t8b 85 84 fd ff ff    \tmov    -0x27c(%rbp),%eax\n    14fa:\t83 e0 7f             \tand    $0x7f,%eax\n    14fd:\t83 c0 01             \tadd    $0x1,%eax\n    1500:\td0 f8                \tsar    %al\n    1502:\t84 c0                \ttest   %al,%al\n    1504:\t7e 4c                \tjle    1552 <__run_perf_stat+0x3a0>\n    1506:\t48 8b 85 70 fd ff ff \tmov    -0x290(%rbp),%rax\n    150d:\t48 8b 00             \tmov    (%rax),%rax\n    1510:\t8b 95 84 fd ff ff    \tmov    -0x27c(%rbp),%edx\n    1516:\t83 e2 7f             \tand    $0x7f,%edx\n    1519:\t48 89 c6             \tmov    %rax,%rsi\n    151c:\t89 d7                \tmov    %edx,%edi\n    151e:\te8 00 00 00 00       \tcallq  1523 <__run_perf_stat+0x371>\n    1523:\teb 2d                \tjmp    1552 <__run_perf_stat+0x3a0>\n    1525:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n    152c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1531:\t48 89 c7             \tmov    %rax,%rdi\n    1534:\te8 00 00 00 00       \tcallq  1539 <__run_perf_stat+0x387>\n    1539:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 153f <__run_perf_stat+0x38d>\n    153f:\t85 c0                \ttest   %eax,%eax\n    1541:\t74 05                \tje     1548 <__run_perf_stat+0x396>\n    1543:\te8 f7 f8 ff ff       \tcallq  e3f <print_interval>\n    1548:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 154e <__run_perf_stat+0x39c>\n    154e:\t85 c0                \ttest   %eax,%eax\n    1550:\t74 d3                \tje     1525 <__run_perf_stat+0x373>\n    1552:\te8 a9 ea ff ff       \tcallq  0 <rdclock>\n    1557:\t48 89 85 a0 fd ff ff \tmov    %rax,-0x260(%rbp)\n    155e:\t48 8b 85 a0 fd ff ff \tmov    -0x260(%rbp),%rax\n    1565:\t48 2b 85 98 fd ff ff \tsub    -0x268(%rbp),%rax\n    156c:\t48 89 c6             \tmov    %rax,%rsi\n    156f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1574:\te8 00 00 00 00       \tcallq  1579 <__run_perf_stat+0x3c7>\n    1579:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 157f <__run_perf_stat+0x3cd>\n    157f:\t83 f8 01             \tcmp    $0x1,%eax\n    1582:\t0f 85 a0 00 00 00    \tjne    1628 <__run_perf_stat+0x476>\n    1588:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 158f <__run_perf_stat+0x3dd>\n    158f:\t48 8b 00             \tmov    (%rax),%rax\n    1592:\t48 89 85 b8 fd ff ff \tmov    %rax,-0x248(%rbp)\n    1599:\t48 8b 85 b8 fd ff ff \tmov    -0x248(%rbp),%rax\n    15a0:\t48 89 85 88 fd ff ff \tmov    %rax,-0x278(%rbp)\n    15a7:\teb 6a                \tjmp    1613 <__run_perf_stat+0x461>\n    15a9:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    15b0:\t48 89 c7             \tmov    %rax,%rdi\n    15b3:\te8 5c f6 ff ff       \tcallq  c14 <read_counter_aggr>\n    15b8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 15bf <__run_perf_stat+0x40d>\n    15bf:\t48 8b 80 40 08 00 00 \tmov    0x840(%rax),%rax\n    15c6:\t48 89 c7             \tmov    %rax,%rdi\n    15c9:\te8 32 ec ff ff       \tcallq  200 <thread_map__nr>\n    15ce:\t89 c3                \tmov    %eax,%ebx\n    15d0:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    15d7:\t48 89 c7             \tmov    %rax,%rdi\n    15da:\te8 86 ed ff ff       \tcallq  365 <perf_evsel__nr_cpus>\n    15df:\t89 c1                \tmov    %eax,%ecx\n    15e1:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    15e8:\t89 da                \tmov    %ebx,%edx\n    15ea:\t89 ce                \tmov    %ecx,%esi\n    15ec:\t48 89 c7             \tmov    %rax,%rdi\n    15ef:\te8 00 00 00 00       \tcallq  15f4 <__run_perf_stat+0x442>\n    15f4:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    15fb:\t48 8b 00             \tmov    (%rax),%rax\n    15fe:\t48 89 85 c0 fd ff ff \tmov    %rax,-0x240(%rbp)\n    1605:\t48 8b 85 c0 fd ff ff \tmov    -0x240(%rbp),%rax\n    160c:\t48 89 85 88 fd ff ff \tmov    %rax,-0x278(%rbp)\n    1613:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 161a <__run_perf_stat+0x468>\n    161a:\t48 39 85 88 fd ff ff \tcmp    %rax,-0x278(%rbp)\n    1621:\t75 86                \tjne    15a9 <__run_perf_stat+0x3f7>\n    1623:\te9 86 00 00 00       \tjmpq   16ae <__run_perf_stat+0x4fc>\n    1628:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 162f <__run_perf_stat+0x47d>\n    162f:\t48 8b 00             \tmov    (%rax),%rax\n    1632:\t48 89 85 a8 fd ff ff \tmov    %rax,-0x258(%rbp)\n    1639:\t48 8b 85 a8 fd ff ff \tmov    -0x258(%rbp),%rax\n    1640:\t48 89 85 88 fd ff ff \tmov    %rax,-0x278(%rbp)\n    1647:\teb 55                \tjmp    169e <__run_perf_stat+0x4ec>\n    1649:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    1650:\t48 89 c7             \tmov    %rax,%rdi\n    1653:\te8 2c f7 ff ff       \tcallq  d84 <read_counter>\n    1658:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    165f:\t48 89 c7             \tmov    %rax,%rdi\n    1662:\te8 fe ec ff ff       \tcallq  365 <perf_evsel__nr_cpus>\n    1667:\t89 c1                \tmov    %eax,%ecx\n    1669:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    1670:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1675:\t89 ce                \tmov    %ecx,%esi\n    1677:\t48 89 c7             \tmov    %rax,%rdi\n    167a:\te8 00 00 00 00       \tcallq  167f <__run_perf_stat+0x4cd>\n    167f:\t48 8b 85 88 fd ff ff \tmov    -0x278(%rbp),%rax\n    1686:\t48 8b 00             \tmov    (%rax),%rax\n    1689:\t48 89 85 b0 fd ff ff \tmov    %rax,-0x250(%rbp)\n    1690:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n    1697:\t48 89 85 88 fd ff ff \tmov    %rax,-0x278(%rbp)\n    169e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 16a5 <__run_perf_stat+0x4f3>\n    16a5:\t48 39 85 88 fd ff ff \tcmp    %rax,-0x278(%rbp)\n    16ac:\t75 9b                \tjne    1649 <__run_perf_stat+0x497>\n    16ae:\t8b 85 84 fd ff ff    \tmov    -0x27c(%rbp),%eax\n    16b4:\tc1 f8 08             \tsar    $0x8,%eax\n    16b7:\t0f b6 c0             \tmovzbl %al,%eax\n    16ba:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    16be:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n    16c5:\t00 00 \n    16c7:\t74 05                \tje     16ce <__run_perf_stat+0x51c>\n    16c9:\te8 00 00 00 00       \tcallq  16ce <__run_perf_stat+0x51c>\n    16ce:\t48 81 c4 88 02 00 00 \tadd    $0x288,%rsp\n    16d5:\t5b                   \tpop    %rbx\n    16d6:\t5d                   \tpop    %rbp\n    16d7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall _run_perf_stat(int a1, const char **a2) {\n  __int64 result;\n  const char *v3;\n  int *v4;\n  int *v5;\n  char *v6;\n  int *v7;\n  unsigned int v8;\n  unsigned int v9;\n  unsigned int v10;\n  _BOOL4 v11;\n  char v12;\n  __int64 i;\n  __int64 v14;\n  __syscall_slong_t v15;\n  __syscall_slong_t v16;\n  __int64 v17;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  __int64 v21;\n  struct timespec <span class=\"supfact\">requested_time</span>;\n  char v23[Number];\n  unsigned __int64 v24;\n  v24 = __readfsqword(Number);\n  v12 = Number;\n  v11 = a1 > Number;\n  if (interval) {\n    <span class=\"supfact\">requested_time</span>.tv_sec = interval / Number;\n    <span class=\"supfact\">requested_time</span>.tv_nsec = Number * (interval % Number);\n  } else {\n    <span class=\"supfact\">requested_time</span>.tv_sec = Number L;\n    <span class=\"supfact\">requested_time</span>.tv_nsec = Number L;\n  }\n  if (v11 && (int)perf_evlist__prepare_workload(evsel_list, &target, a2,\n                                                Number L, Number L) < Number) {\n    perror(String);\n    return Number;\n  }\n  if (group)\n    perf_evlist__set_leader(evsel_list);\n  v14 = *(_QWORD *)evsel_list;\n  for (i = v14;; i = v21) {\n    if (i == evsel_list) {\n      if ((unsigned int)perf_evlist__apply_filters(evsel_list)) {\n        v5 = _errno_location();\n        v6 = strerror(*v5);\n        v7 = _errno_location();\n        error((int)String, *v7, v6);\n        result = Number;\n      } else {\n        v15 = rdclock();\n        clock_gettime(Number, &ref_time);\n        if (v11) {\n          perf_evlist__start_workload(evsel_list);\n          if (interval) {\n            while (\n                !waitpid(child_pid, (int *)((char *)&v11 + Number), Number)) {\n              nanosleep(&<span class=\"supfact\">requested_time</span>, Number L);\n              print_interval();\n            }\n          }\n          wait((__WAIT_STATUS)((char *)&v11 + Number));\n          if ((char)((BYTE1(v11) & Number) + Number) >> Number > Number)\n            psignal(BYTE1(v11) & Number, *a2);\n        } else {\n          while (!done) {\n            nanosleep(&<span class=\"supfact\">requested_time</span>, Number L);\n            if (interval)\n              print_interval();\n          }\n        }\n        v16 = rdclock();\n        update_stats(&walltime_nsecs_stats, v16 - v15);\n        if (aggr_mode == Number) {\n          v19 = *(_QWORD *)evsel_list;\n          for (i = v19; i != evsel_list; i = v20) {\n            read_counter_aggr(i);\n            v8 = thread_map__nr(*(unsigned int **)(evsel_list + Number));\n            v9 = perf_evsel__nr_cpus(i);\n            perf_evsel__close_fd(i, v9, v8);\n            v20 = *(_QWORD *)i;\n          }\n        } else {\n          v17 = *(_QWORD *)evsel_list;\n          for (i = v17; i != evsel_list; i = v18) {\n            read_counter(i);\n            v10 = perf_evsel__nr_cpus(i);\n            perf_evsel__close_fd(i, v10, Number L);\n            v18 = *(_QWORD *)i;\n          }\n        }\n        result = BYTE2(v11);\n      }\n      return result;\n    }\n    if ((int)create_perf_stat_counter(i) >= Number) {\n      *(_BYTE *)(i + Number) = Number;\n      goto LABEL_23;\n    }\n    if (*_errno_location() != Number && *_errno_location() != Number &&\n        *_errno_location() != Number && *_errno_location() != Number &&\n        *_errno_location() != Number) {\n      break;\n    }\n    if (verbose) {\n      v3 = (const char *)perf_evsel__name(i);\n      ui__warning(String, v3);\n    }\n    *(_BYTE *)(i + Number) = Number;\n  LABEL_23:\n    v21 = *(_QWORD *)i;\n  }\n  v4 = _errno_location();\n  perf_evsel__open_strerror(i, &target, (unsigned int)*v4, v23, Number L);\n  ui__error(String, v23);\n  if (child_pid != Number)\n    kill(child_pid, Number);\n  return Number;\n}", "code_t": "int __cdecl _run_perf_stat(int argc, const char **argv) {\n  int result;\n  const char *v3;\n  int *v4;\n  int *v5;\n  char *v6;\n  int *v7;\n  unsigned int v8;\n  unsigned int v9;\n  unsigned int v10;\n  _BYTE forks[Number];\n  perf_evsel *counter;\n  const list_head *__mptr;\n  unsigned __int64 t0;\n  unsigned __int64 t1;\n  const list_head *__mptr_3;\n  const list_head *__mptr_4;\n  const list_head *__mptr_1;\n  const list_head *__mptr_2;\n  const list_head *__mptr_0;\n  timespec <span class=\"supfact\">ts</span>;\n  char msg[Number];\n  unsigned __int64 v23;\n  v23 = __readfsqword(Number);\n  forks[Number] = Number;\n  *(_DWORD *)forks = argc > Number;\n  if (interval) {\n    <span class=\"supfact\">ts</span>.tv_sec = interval / Number;\n    <span class=\"supfact\">ts</span>.tv_nsec = Number * (interval % Number);\n  } else {\n    <span class=\"supfact\">ts</span>.tv_sec = Number L;\n    <span class=\"supfact\">ts</span>.tv_nsec = Number L;\n  }\n  if (forks[Number] &&\n      (int)perf_evlist__prepare_workload(evsel_list, &target, argv, Number L,\n                                         Number L) < Number) {\n    perror(String);\n    return Number;\n  }\n  if (group)\n    perf_evlist__set_leader(evsel_list);\n  __mptr = evsel_list->entries.next;\n  for (counter = (perf_evsel *)__mptr;; counter = (perf_evsel *)__mptr_0) {\n    if (counter == (perf_evsel *)evsel_list) {\n      if ((unsigned int)perf_evlist__apply_filters(evsel_list)) {\n        v5 = _errno_location();\n        v6 = strerror(*v5);\n        v7 = _errno_location();\n        error((int)String, *v7, v6);\n        result = Number;\n      } else {\n        t0 = rdclock();\n        clock_gettime(Number, &ref_time);\n        if (forks[Number]) {\n          perf_evlist__start_workload(evsel_list);\n          if (interval) {\n            while (!waitpid(child_pid, (int *)&forks[Number], Number)) {\n              nanosleep(&<span class=\"supfact\">ts</span>, Number L);\n              print_interval();\n            }\n          }\n          wait((__WAIT_STATUS)&forks[Number]);\n          if ((char)((forks[Number] & Number) + Number) >> Number > Number)\n            psignal(forks[Number] & Number, *argv);\n        } else {\n          while (!done) {\n            nanosleep(&<span class=\"supfact\">ts</span>, Number L);\n            if (interval)\n              print_interval();\n          }\n        }\n        t1 = rdclock();\n        update_stats(&walltime_nsecs_stats, t1 - t0);\n        if (aggr_mode_0 == AGGR_GLOBAL) {\n          __mptr_1 = evsel_list->entries.next;\n          for (counter = (perf_evsel *)__mptr_1;\n               counter != (perf_evsel *)evsel_list;\n               counter = (perf_evsel *)__mptr_2) {\n            read_counter_aggr(counter);\n            v8 = thread_map__nr(evsel_list->threads);\n            v9 = perf_evsel__nr_cpus(counter);\n            perf_evsel__close_fd(counter, v9, v8);\n            __mptr_2 = counter->node.next;\n          }\n        } else {\n          __mptr_3 = evsel_list->entries.next;\n          for (counter = (perf_evsel *)__mptr_3;\n               counter != (perf_evsel *)evsel_list;\n               counter = (perf_evsel *)__mptr_4) {\n            read_counter(counter);\n            v10 = perf_evsel__nr_cpus(counter);\n            perf_evsel__close_fd(counter, v10, Number L);\n            __mptr_4 = counter->node.next;\n          }\n        }\n        result = forks[Number];\n      }\n      return result;\n    }\n    if (create_perf_stat_counter(counter) >= Number) {\n      counter->supported = Number;\n      goto LABEL_23;\n    }\n    if (*_errno_location() != Number && *_errno_location() != Number &&\n        *_errno_location() != Number && *_errno_location() != Number &&\n        *_errno_location() != Number) {\n      break;\n    }\n    if (verbose) {\n      v3 = (const char *)perf_evsel__name(counter);\n      ui__warning(String, v3);\n    }\n    counter->supported = Number;\n  LABEL_23:\n    __mptr_0 = counter->node.next;\n  }\n  v4 = _errno_location();\n  perf_evsel__open_strerror(counter, &target, (unsigned int)*v4, msg, Number L);\n  ui__error(String, msg);\n  if (child_pid != Number)\n    kill(child_pid, Number);\n  return Number;\n}", "var": [{"name": "requested_time", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "pred_name": "ts", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "xurubin", "repo_name": "wl530g-mini", "path": "xurubin/wl530g-mini/f1034647ac02444fc51d598a32eb5e3c156860dfe51353ad993922675b59a829", "path_in_repo": "xurubin/wl530g-mini/Src/uClinux-dist/user/inetd/inetd.o", "objdump": "0000000000000504 <start_services>:\n 504:\t55                   \tpush   %rbp\n 505:\t48 89 e5             \tmov    %rsp,%rbp\n 508:\t48 83 ec 30          \tsub    $0x30,%rsp\n 50c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 513 <start_services+0xf>\n 513:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 517:\te9 d7 01 00 00       \tjmpq   6f3 <start_services+0x1ef>\n 51c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 520:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 523:\t85 c0                \ttest   %eax,%eax\n 525:\t0f 85 bc 01 00 00    \tjne    6e7 <start_services+0x1e3>\n 52b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 52f:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 533:\t0f b6 00             \tmovzbl (%rax),%eax\n 536:\t84 c0                \ttest   %al,%al\n 538:\t0f 84 a9 01 00 00    \tje     6e7 <start_services+0x1e3>\n 53e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 542:\t0f b6 40 64          \tmovzbl 0x64(%rax),%eax\n 546:\t83 e0 04             \tand    $0x4,%eax\n 549:\t84 c0                \ttest   %al,%al\n 54b:\t0f 84 e6 00 00 00    \tje     637 <start_services+0x133>\n 551:\tba 06 00 00 00       \tmov    $0x6,%edx\n 556:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 55b:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 560:\te8 00 00 00 00       \tcallq  565 <start_services+0x61>\n 565:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 568:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n 56c:\t75 0a                \tjne    578 <start_services+0x74>\n 56e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 573:\te8 00 00 00 00       \tcallq  578 <start_services+0x74>\n 578:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 57b:\t89 c7                \tmov    %eax,%edi\n 57d:\te8 ed fa ff ff       \tcallq  6f <close_on_exec>\n 582:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n 588:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 58c:\t8b 40 08             \tmov    0x8(%rax),%eax\n 58f:\t0f b7 c0             \tmovzwl %ax,%eax\n 592:\t89 c7                \tmov    %eax,%edi\n 594:\te8 00 00 00 00       \tcallq  599 <start_services+0x95>\n 599:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n 59d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 5a2:\te8 00 00 00 00       \tcallq  5a7 <start_services+0xa3>\n 5a7:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 5aa:\tc7 45 dc 01 00 00 00 \tmovl   $0x1,-0x24(%rbp)\n 5b1:\t48 8d 55 dc          \tlea    -0x24(%rbp),%rdx\n 5b5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 5b8:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n 5be:\t48 89 d1             \tmov    %rdx,%rcx\n 5c1:\tba 02 00 00 00       \tmov    $0x2,%edx\n 5c6:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 5cb:\t89 c7                \tmov    %eax,%edi\n 5cd:\te8 00 00 00 00       \tcallq  5d2 <start_services+0xce>\n 5d2:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 5d5:\t75 0a                \tjne    5e1 <start_services+0xdd>\n 5d7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 5dc:\te8 00 00 00 00       \tcallq  5e1 <start_services+0xdd>\n 5e1:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n 5e5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 5e8:\tba 10 00 00 00       \tmov    $0x10,%edx\n 5ed:\t48 89 ce             \tmov    %rcx,%rsi\n 5f0:\t89 c7                \tmov    %eax,%edi\n 5f2:\te8 00 00 00 00       \tcallq  5f7 <start_services+0xf3>\n 5f7:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 5fa:\t75 14                \tjne    610 <start_services+0x10c>\n 5fc:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 601:\te8 00 00 00 00       \tcallq  606 <start_services+0x102>\n 606:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 609:\t89 c7                \tmov    %eax,%edi\n 60b:\te8 00 00 00 00       \tcallq  610 <start_services+0x10c>\n 610:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 613:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 618:\t89 c7                \tmov    %eax,%edi\n 61a:\te8 00 00 00 00       \tcallq  61f <start_services+0x11b>\n 61f:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 622:\t0f 85 97 00 00 00    \tjne    6bf <start_services+0x1bb>\n 628:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 62d:\te8 00 00 00 00       \tcallq  632 <start_services+0x12e>\n 632:\te9 88 00 00 00       \tjmpq   6bf <start_services+0x1bb>\n 637:\tba 11 00 00 00       \tmov    $0x11,%edx\n 63c:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 641:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 646:\te8 00 00 00 00       \tcallq  64b <start_services+0x147>\n 64b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 64e:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n 652:\t75 0a                \tjne    65e <start_services+0x15a>\n 654:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 659:\te8 00 00 00 00       \tcallq  65e <start_services+0x15a>\n 65e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 661:\t89 c7                \tmov    %eax,%edi\n 663:\te8 07 fa ff ff       \tcallq  6f <close_on_exec>\n 668:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n 66e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 672:\t8b 40 08             \tmov    0x8(%rax),%eax\n 675:\t0f b7 c0             \tmovzwl %ax,%eax\n 678:\t89 c7                \tmov    %eax,%edi\n 67a:\te8 00 00 00 00       \tcallq  67f <start_services+0x17b>\n 67f:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n 683:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 688:\te8 00 00 00 00       \tcallq  68d <start_services+0x189>\n 68d:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 690:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n 694:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 697:\tba 10 00 00 00       \tmov    $0x10,%edx\n 69c:\t48 89 ce             \tmov    %rcx,%rsi\n 69f:\t89 c7                \tmov    %eax,%edi\n 6a1:\te8 00 00 00 00       \tcallq  6a6 <start_services+0x1a2>\n 6a6:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 6a9:\t75 14                \tjne    6bf <start_services+0x1bb>\n 6ab:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 6b0:\te8 00 00 00 00       \tcallq  6b5 <start_services+0x1b1>\n 6b5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 6b8:\t89 c7                \tmov    %eax,%edi\n 6ba:\te8 00 00 00 00       \tcallq  6bf <start_services+0x1bb>\n 6bf:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 6c3:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 6c6:\t89 50 0c             \tmov    %edx,0xc(%rax)\n 6c9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 6cd:\t0f b6 50 64          \tmovzbl 0x64(%rax),%edx\n 6d1:\t83 ca 08             \tor     $0x8,%edx\n 6d4:\t88 50 64             \tmov    %dl,0x64(%rax)\n 6d7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 6db:\t0f b6 50 64          \tmovzbl 0x64(%rax),%edx\n 6df:\t83 e2 fd             \tand    $0xfffffffd,%edx\n 6e2:\t88 50 64             \tmov    %dl,0x64(%rax)\n 6e5:\teb 01                \tjmp    6e8 <start_services+0x1e4>\n 6e7:\t90                   \tnop\n 6e8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 6ec:\t48 8b 00             \tmov    (%rax),%rax\n 6ef:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 6f3:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 6f8:\t0f 85 1e fe ff ff    \tjne    51c <start_services+0x18>\n 6fe:\t90                   \tnop\n 6ff:\t90                   \tnop\n 700:\tc9                   \tleaveq \n 701:\tc3                   \tretq   ", "code_s": "__int64 start_services() {\n  __int64 result;\n  int optval;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  __int64 i;\n  int fd;\n  result = servicelist;\n  for (i = servicelist; i; i = *(_QWORD *)i) {\n    if (!*(_DWORD *)(i + Number) && **(_BYTE **)(i + Number)) {\n      if ((*(_BYTE *)(i + Number) & Number) != Number) {\n        fd = socket(Number, Number, Number);\n        if (fd == Number)\n          puts(String);\n        close_on_exec(fd);\n        <span class=\"supfact\">addr</span>.sa_family = Number;\n        *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(*(_DWORD *)(i + Number));\n        *(_DWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = htonl(Number);\n        optval = Number;\n        if (setsockopt(fd, Number, Number, &optval, Number) == Number)\n          perror(String);\n        if (bind(fd, &<span class=\"supfact\">addr</span>, Number) == Number) {\n          perror(String);\n          close(fd);\n        }\n        if (listen(fd, Number) == Number)\n          puts(String);\n      } else {\n        fd = socket(Number, Number, Number);\n        if (fd == Number)\n          puts(String);\n        close_on_exec(fd);\n        <span class=\"supfact\">addr</span>.sa_family = Number;\n        *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(*(_DWORD *)(i + Number));\n        *(_DWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = htonl(Number);\n        if (bind(fd, &<span class=\"supfact\">addr</span>, Number) == Number) {\n          puts(String);\n          close(fd);\n        }\n      }\n      *(_DWORD *)(i + Number) = fd;\n      *(_BYTE *)(i + Number) |= Number;\n      *(_BYTE *)(i + Number) &= Number;\n    }\n    result = *(_QWORD *)i;\n  }\n  return result;\n}", "code_t": "void __cdecl start_services() {\n  int true;\n  sockaddr_in <span class=\"supfact\">server_sockaddr</span>;\n  stService *p;\n  int s;\n  for (p = servicelist; p; p = p->next) {\n    if (!p->master_socket && *p->args[Number]) {\n      if ((*((_BYTE *)p + Number) & Number) != Number) {\n        s = socket(Number, Number, Number);\n        if (s == Number)\n          puts(String);\n        close_on_exec(s);\n        <span class=\"supfact\">server_sockaddr</span>.sin_family = Number;\n        <span class=\"supfact\">server_sockaddr</span>.sin_port = htons(p->port);\n        <span class=\"supfact\">server_sockaddr</span>.sin_addr.s_addr = htonl(Number);\n        true = Number;\n        if (setsockopt(s, Number, Number, &true, Number) == Number)\n          perror(String);\n        if (bind(s, (const struct sockaddr *)&<span class=\"supfact\">server_sockaddr</span>,\n                 Number) == Number) {\n          perror(String);\n          close(s);\n        }\n        if (listen(s, Number) == Number)\n          puts(String);\n      } else {\n        s = socket(Number, Number, Number);\n        if (s == Number)\n          puts(String);\n        close_on_exec(s);\n        <span class=\"supfact\">server_sockaddr</span>.sin_family = Number;\n        <span class=\"supfact\">server_sockaddr</span>.sin_port = htons(p->port);\n        <span class=\"supfact\">server_sockaddr</span>.sin_addr.s_addr = htonl(Number);\n        if (bind(s, (const struct sockaddr *)&<span class=\"supfact\">server_sockaddr</span>,\n                 Number) == Number) {\n          puts(String);\n          close(s);\n        }\n      }\n      p->master_socket = s;\n      *((_BYTE *)p + Number) |= Number;\n      *((_BYTE *)p + Number) &= Number;\n    }\n  }\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "pred_name": "__unk__", "ref_name": "server_sockaddr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "hach-que", "repo_name": "roket3d", "path": "hach-que/roket3d/b3cb7263759364f1ae66b304137c535eecd0f520dc979a8777b203446328caab", "path_in_repo": "hach-que/roket3d/IDE.NET/Dependencies/Irrlicht.NET CP/Irrlicht SDK/source/Irrlicht/CGUIComboBox.o", "objdump": "0000000000000e72 <_ZN3irr3gui12CGUIComboBox7addItemEPKwj>:\n     e72:\t55                   \tpush   %rbp\n     e73:\t48 89 e5             \tmov    %rsp,%rbp\n     e76:\t53                   \tpush   %rbx\n     e77:\t48 83 ec 58          \tsub    $0x58,%rsp\n     e7b:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     e7f:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     e83:\t89 55 ac             \tmov    %edx,-0x54(%rbp)\n     e86:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     e8a:\t48 8d 98 38 01 00 00 \tlea    0x138(%rax),%rbx\n     e91:\t8b 55 ac             \tmov    -0x54(%rbp),%edx\n     e94:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n     e98:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     e9c:\t48 89 ce             \tmov    %rcx,%rsi\n     e9f:\t48 89 c7             \tmov    %rax,%rdi\n     ea2:\te8 00 00 00 00       \tcallq  ea7 <_ZN3irr3gui12CGUIComboBox7addItemEPKwj+0x35>\n     ea7:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     eab:\t48 89 c6             \tmov    %rax,%rsi\n     eae:\t48 89 df             \tmov    %rbx,%rdi\n     eb1:\te8 00 00 00 00       \tcallq  eb6 <_ZN3irr3gui12CGUIComboBox7addItemEPKwj+0x44>\n     eb6:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     eba:\t48 89 c7             \tmov    %rax,%rdi\n     ebd:\te8 00 00 00 00       \tcallq  ec2 <_ZN3irr3gui12CGUIComboBox7addItemEPKwj+0x50>\n     ec2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     ec6:\t8b 80 58 01 00 00    \tmov    0x158(%rax),%eax\n     ecc:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     ecf:\t75 1e                \tjne    eef <_ZN3irr3gui12CGUIComboBox7addItemEPKwj+0x7d>\n     ed1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     ed5:\t48 8b 00             \tmov    (%rax),%rax\n     ed8:\t48 05 28 01 00 00    \tadd    $0x128,%rax\n     ede:\t48 8b 10             \tmov    (%rax),%rdx\n     ee1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     ee5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     eea:\t48 89 c7             \tmov    %rax,%rdi\n     eed:\tff d2                \tcallq  *%rdx\n     eef:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     ef3:\t48 05 38 01 00 00    \tadd    $0x138,%rax\n     ef9:\t48 89 c7             \tmov    %rax,%rdi\n     efc:\te8 00 00 00 00       \tcallq  f01 <_ZN3irr3gui12CGUIComboBox7addItemEPKwj+0x8f>\n     f01:\t83 e8 01             \tsub    $0x1,%eax\n     f04:\t48 83 c4 58          \tadd    $0x58,%rsp\n     f08:\t5b                   \tpop    %rbx\n     f09:\t5d                   \tpop    %rbp\n     f0a:\tc3                   \tretq   \n     f0b:\t90                   \tnop", "code_s": "__int64 __fastcall irr gui CGUIComboBox addItem(irr gui CGUIComboBox *this,\n                                                const wchar_t *a2,\n                                                unsigned int a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  irr gui CGUIComboBox SComboData SComboData(\n      (irr gui CGUIComboBox SComboData *)<span class=\"supfact\">v4</span>, a2, a3);\n  irr core array<irr gui CGUIComboBox SComboData,\n                 irr core irrAllocator<irr gui CGUIComboBox SComboData>>\n      push_back((char *)this + Number, <span class=\"supfact\">v4</span>);\n  irr gui CGUIComboBox SComboData ~SComboData(\n      (irr gui CGUIComboBox SComboData *)<span class=\"supfact\">v4</span>);\n  if (*((_DWORD *)this + Number) == Number)\n    (*(void(__fastcall **)(irr gui CGUIComboBox *, _QWORD))(\n        *(_QWORD *)this + Number L))(this, Number L);\n  return (unsigned int)irr core\n             array<irr gui CGUIComboBox SComboData,\n                   irr core irrAllocator<irr gui CGUIComboBox SComboData>>\n                 size((char *)this + Number) - Number;\n}", "code_t": "irr u32 __cdecl irr gui CGUIComboBox addItem(irr gui CGUIComboBox *const this,\n                                             const wchar_t *text,\n                                             irr u32 data) {\n  irr gui CGUIComboBox SComboData <span class=\"supfact\">element</span>;\n  irr gui CGUIComboBox SComboData SComboData(&<span class=\"supfact\">element</span>, text,\n                                             data);\n  irr core array<irr gui CGUIComboBox SComboData,\n                 irr core irrAllocator<irr gui CGUIComboBox SComboData>>\n      push_back(&this->Items, &<span class=\"supfact\">element</span>);\n  irr gui CGUIComboBox SComboData ~SComboData(&<span class=\"supfact\">element</span>);\n  if (this->Selected == Number)\n    (*((void(__fastcall **)(irr gui CGUIComboBox *const,\n                            _QWORD))this->_vptr_IEventReceiver +\n       Number))(this, Number L);\n  return irr core array<irr gui CGUIComboBox SComboData,\n                        irr core irrAllocator<irr gui CGUIComboBox SComboData>>\n             size(&this->Items) - Number;\n}", "var": [{"name": "v4", "type": "__unk__", "pred_name": "v4", "ref_name": "element", "ref_type": "struct irr::gui::CGUIComboBox::SComboData { irr::core::stringw Name; irr::u32 Data; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "Jeongseob", "repo_name": "xen-coboost-sched", "path": "Jeongseob/xen-coboost-sched/a9511d0803780e505d2b2186c4fcadb0dcea564b29305fe2f1091f246fe72b04", "path_in_repo": "Jeongseob/xen-coboost-sched/tools/qemu-xen/net/socket.o", "objdump": "0000000000000da6 <net_socket_listen_init>:\n     da6:\t55                   \tpush   %rbp\n     da7:\t48 89 e5             \tmov    %rsp,%rbp\n     daa:\t48 83 ec 60          \tsub    $0x60,%rsp\n     dae:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     db2:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     db6:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n     dba:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n     dbe:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     dc5:\t00 00 \n     dc7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     dcb:\t31 c0                \txor    %eax,%eax\n     dcd:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n     dd1:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     dd5:\t48 89 d6             \tmov    %rdx,%rsi\n     dd8:\t48 89 c7             \tmov    %rax,%rdi\n     ddb:\te8 00 00 00 00       \tcallq  de0 <net_socket_listen_init+0x3a>\n     de0:\t85 c0                \ttest   %eax,%eax\n     de2:\t79 0a                \tjns    dee <net_socket_listen_init+0x48>\n     de4:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     de9:\te9 49 01 00 00       \tjmpq   f37 <net_socket_listen_init+0x191>\n     dee:\tbf 20 00 00 00       \tmov    $0x20,%edi\n     df3:\te8 00 00 00 00       \tcallq  df8 <net_socket_listen_init+0x52>\n     df8:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     dfc:\tba 00 00 00 00       \tmov    $0x0,%edx\n     e01:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     e06:\tbf 02 00 00 00       \tmov    $0x2,%edi\n     e0b:\te8 00 00 00 00       \tcallq  e10 <net_socket_listen_init+0x6a>\n     e10:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n     e13:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n     e17:\t79 16                \tjns    e2f <net_socket_listen_init+0x89>\n     e19:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # e20 <net_socket_listen_init+0x7a>\n     e20:\te8 00 00 00 00       \tcallq  e25 <net_socket_listen_init+0x7f>\n     e25:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     e2a:\te9 08 01 00 00       \tjmpq   f37 <net_socket_listen_init+0x191>\n     e2f:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     e32:\t89 c7                \tmov    %eax,%edi\n     e34:\te8 00 00 00 00       \tcallq  e39 <net_socket_listen_init+0x93>\n     e39:\tc7 45 cc 01 00 00 00 \tmovl   $0x1,-0x34(%rbp)\n     e40:\t48 8d 55 cc          \tlea    -0x34(%rbp),%rdx\n     e44:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     e47:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n     e4d:\t48 89 d1             \tmov    %rdx,%rcx\n     e50:\tba 02 00 00 00       \tmov    $0x2,%edx\n     e55:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     e5a:\t89 c7                \tmov    %eax,%edi\n     e5c:\te8 00 00 00 00       \tcallq  e61 <net_socket_listen_init+0xbb>\n     e61:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     e65:\t48 89 c1             \tmov    %rax,%rcx\n     e68:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     e6b:\tba 10 00 00 00       \tmov    $0x10,%edx\n     e70:\t48 89 ce             \tmov    %rcx,%rsi\n     e73:\t89 c7                \tmov    %eax,%edi\n     e75:\te8 00 00 00 00       \tcallq  e7a <net_socket_listen_init+0xd4>\n     e7a:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n     e7d:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n     e81:\t79 16                \tjns    e99 <net_socket_listen_init+0xf3>\n     e83:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # e8a <net_socket_listen_init+0xe4>\n     e8a:\te8 00 00 00 00       \tcallq  e8f <net_socket_listen_init+0xe9>\n     e8f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     e94:\te9 9e 00 00 00       \tjmpq   f37 <net_socket_listen_init+0x191>\n     e99:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     e9c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     ea1:\t89 c7                \tmov    %eax,%edi\n     ea3:\te8 00 00 00 00       \tcallq  ea8 <net_socket_listen_init+0x102>\n     ea8:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n     eab:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n     eaf:\t79 13                \tjns    ec4 <net_socket_listen_init+0x11e>\n     eb1:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # eb8 <net_socket_listen_init+0x112>\n     eb8:\te8 00 00 00 00       \tcallq  ebd <net_socket_listen_init+0x117>\n     ebd:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     ec2:\teb 73                \tjmp    f37 <net_socket_listen_init+0x191>\n     ec4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ec8:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     ecc:\t48 89 10             \tmov    %rdx,(%rax)\n     ecf:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     ed3:\t48 89 c7             \tmov    %rax,%rdi\n     ed6:\te8 00 00 00 00       \tcallq  edb <net_socket_listen_init+0x135>\n     edb:\t48 89 c2             \tmov    %rax,%rdx\n     ede:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ee2:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n     ee6:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n     eeb:\t74 11                \tje     efe <net_socket_listen_init+0x158>\n     eed:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     ef1:\t48 89 c7             \tmov    %rax,%rdi\n     ef4:\te8 00 00 00 00       \tcallq  ef9 <net_socket_listen_init+0x153>\n     ef9:\t48 89 c2             \tmov    %rax,%rdx\n     efc:\teb 05                \tjmp    f03 <net_socket_listen_init+0x15d>\n     efe:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f03:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f07:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     f0b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f0f:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n     f12:\t89 50 18             \tmov    %edx,0x18(%rax)\n     f15:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     f19:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     f1c:\t48 89 d1             \tmov    %rdx,%rcx\n     f1f:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f24:\t48 8d 35 73 fd ff ff \tlea    -0x28d(%rip),%rsi        # c9e <net_socket_accept>\n     f2b:\t89 c7                \tmov    %eax,%edi\n     f2d:\te8 00 00 00 00       \tcallq  f32 <net_socket_listen_init+0x18c>\n     f32:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f37:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     f3b:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     f42:\t00 00 \n     f44:\t74 05                \tje     f4b <net_socket_listen_init+0x1a5>\n     f46:\te8 00 00 00 00       \tcallq  f4b <net_socket_listen_init+0x1a5>\n     f4b:\tc9                   \tleaveq \n     f4c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall net_socket_listen_init(__int64 a1, __int64 a2, __int64 a3,\n                                          __int64 a4) {\n  __int64 result;\n  __int64 v5;\n  __int64 v6;\n  int optval;\n  int fd;\n  int v10;\n  __int64 v11;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  unsigned __int64 v13;\n  v13 = __readfsqword(Number);\n  if ((int)parse_host_port(&<span class=\"supfact\">addr</span>, a4) < Number)\n    return Number;\n  v11 = g_malloc0(Number L);\n  fd = qemu_socket(Number L, Number L, Number L);\n  if (fd >= Number) {\n    socket_set_nonblock((unsigned int)fd);\n    optval = Number;\n    setsockopt(fd, Number, Number, &optval, Number);\n    v10 = bind(fd, &<span class=\"supfact\">addr</span>, Number);\n    if (v10 >= Number) {\n      v10 = listen(fd, Number);\n      if (v10 >= Number) {\n        *(_QWORD *)v11 = a1;\n        v5 = g_strdup(a2);\n        *(_QWORD *)(v11 + Number) = v5;\n        if (a3)\n          v6 = g_strdup(a3);\n        else\n          v6 = Number L;\n        *(_QWORD *)(v11 + Number) = v6;\n        *(_DWORD *)(v11 + Number) = fd;\n        qemu_set_fd_handler((unsigned int)fd, net_socket_accept, Number L, v11);\n        result = Number L;\n      } else {\n        perror(String);\n        result = Number;\n      }\n    } else {\n      perror(String);\n      result = Number;\n    }\n  } else {\n    perror(String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl net_socket_listen_init(VLANState_0 *vlan, const char *model,\n                                   const char *name, const char *host_str) {\n  int result;\n  char *v5;\n  char *v6;\n  int val;\n  int fd;\n  int ret;\n  NetSocketListenState_0 *s;\n  sockaddr_in <span class=\"supfact\">saddr</span>;\n  unsigned __int64 v13;\n  v13 = __readfsqword(Number);\n  if ((int)parse_host_port(&<span class=\"supfact\">saddr</span>, host_str) < Number)\n    return Number;\n  s = (NetSocketListenState_0 *)g_malloc0(Number L);\n  fd = qemu_socket(Number L, Number L, Number L);\n  if (fd >= Number) {\n    socket_set_nonblock((unsigned int)fd);\n    val = Number;\n    setsockopt(fd, Number, Number, &val, Number);\n    ret = bind(fd, (const struct sockaddr *)&<span class=\"supfact\">saddr</span>, Number);\n    if (ret >= Number) {\n      ret = listen(fd, Number);\n      if (ret >= Number) {\n        s->vlan = vlan;\n        v5 = (char *)g_strdup(model);\n        s->model = v5;\n        if (name)\n          v6 = (char *)g_strdup(name);\n        else\n          v6 = Number L;\n        s->name = v6;\n        s->fd = fd;\n        qemu_set_fd_handler((unsigned int)fd, net_socket_accept, Number L, s);\n        result = Number;\n      } else {\n        perror(String);\n        result = Number;\n      }\n    } else {\n      perror(String);\n      result = Number;\n    }\n  } else {\n    perror(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "addr", "type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }", "pred_name": "saddr", "ref_name": "saddr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "btrask", "repo_name": "stronglink", "path": "btrask/stronglink/1183daa29fe6715f49b9547f3359105c5dd640c0ab29292af53c01137bdb5b17", "path_in_repo": "btrask/stronglink/deps/libasync/deps/libressl-portable/crypto/dsa/dsa_pmeth.o", "objdump": "00000000000006f7 <pkey_dsa_paramgen>:\n 6f7:\t55                   \tpush   %rbp\n 6f8:\t48 89 e5             \tmov    %rsp,%rbp\n 6fb:\t48 83 ec 50          \tsub    $0x50,%rsp\n 6ff:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n 703:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n 707:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 70e:\t00 00 \n 710:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 714:\t31 c0                \txor    %eax,%eax\n 716:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n 71d:\t00 \n 71e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 722:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n 726:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 72a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 72e:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n 732:\t48 85 c0             \ttest   %rax,%rax\n 735:\t74 1d                \tje     754 <pkey_dsa_paramgen+0x5d>\n 737:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 73b:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 73f:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n 743:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 747:\t48 89 d6             \tmov    %rdx,%rsi\n 74a:\t48 89 c7             \tmov    %rax,%rdi\n 74d:\te8 00 00 00 00       \tcallq  752 <pkey_dsa_paramgen+0x5b>\n 752:\teb 08                \tjmp    75c <pkey_dsa_paramgen+0x65>\n 754:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n 75b:\t00 \n 75c:\te8 00 00 00 00       \tcallq  761 <pkey_dsa_paramgen+0x6a>\n 761:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 765:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n 76a:\t75 07                \tjne    773 <pkey_dsa_paramgen+0x7c>\n 76c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 771:\teb 6f                \tjmp    7e2 <pkey_dsa_paramgen+0xeb>\n 773:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 777:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n 77b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 77f:\t8b 40 04             \tmov    0x4(%rax),%eax\n 782:\t48 63 d0             \tmovslq %eax,%rdx\n 785:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 789:\t8b 00                \tmov    (%rax),%eax\n 78b:\t48 63 f0             \tmovslq %eax,%rsi\n 78e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 792:\tff 75 c8             \tpushq  -0x38(%rbp)\n 795:\t6a 00                \tpushq  $0x0\n 797:\t6a 00                \tpushq  $0x0\n 799:\t6a 00                \tpushq  $0x0\n 79b:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 7a1:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 7a7:\t48 89 c7             \tmov    %rax,%rdi\n 7aa:\te8 00 00 00 00       \tcallq  7af <pkey_dsa_paramgen+0xb8>\n 7af:\t48 83 c4 20          \tadd    $0x20,%rsp\n 7b3:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n 7b6:\t83 7d c4 00          \tcmpl   $0x0,-0x3c(%rbp)\n 7ba:\t74 17                \tje     7d3 <pkey_dsa_paramgen+0xdc>\n 7bc:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 7c0:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 7c4:\tbe 74 00 00 00       \tmov    $0x74,%esi\n 7c9:\t48 89 c7             \tmov    %rax,%rdi\n 7cc:\te8 00 00 00 00       \tcallq  7d1 <pkey_dsa_paramgen+0xda>\n 7d1:\teb 0c                \tjmp    7df <pkey_dsa_paramgen+0xe8>\n 7d3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 7d7:\t48 89 c7             \tmov    %rax,%rdi\n 7da:\te8 00 00 00 00       \tcallq  7df <pkey_dsa_paramgen+0xe8>\n 7df:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 7e2:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 7e6:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 7ed:\t00 00 \n 7ef:\t74 05                \tje     7f6 <pkey_dsa_paramgen+0xff>\n 7f1:\te8 00 00 00 00       \tcallq  7f6 <pkey_dsa_paramgen+0xff>\n 7f6:\tc9                   \tleaveq \n 7f7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pkey_dsa_paramgen(__int64 a1, __int64 a2) {\n  unsigned int v3;\n  char *v4;\n  __int64 v5;\n  int *v6;\n  char <span class=\"supfact\">v7</span>[Number];\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  v6 = *(int **)(a1 + Number);\n  if (*(_QWORD *)(a1 + Number)) {\n    v4 = <span class=\"supfact\">v7</span>;\n    evp_pkey_set_cb_translate(<span class=\"supfact\">v7</span>, a1);\n  } else {\n    v4 = Number L;\n  }\n  v5 = DSA_new();\n  if (!v5)\n    return Number L;\n  v3 = dsa_builtin_paramgen(v5, *v6, v6[Number], *((_QWORD *)v6 + Number),\n                            Number L, Number L, Number L, Number L, Number L,\n                            v4);\n  if (v3)\n    EVP_PKEY_assign(a2, Number L, v5);\n  else\n    DSA_free(v5);\n  return v3;\n}", "code_t": "int __cdecl pkey_dsa_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey) {\n  int ret;\n  BN_GENCB *pcb;\n  DSA *dsa;\n  DSA_PKEY_CTX *dctx;\n  BN_GENCB <span class=\"supfact\">cb</span>;\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  dctx = (DSA_PKEY_CTX *)ctx->data;\n  if (ctx->pkey_gencb) {\n    pcb = &<span class=\"supfact\">cb</span>;\n    evp_pkey_set_cb_translate(&<span class=\"supfact\">cb</span>, ctx);\n  } else {\n    pcb = Number L;\n  }\n  dsa = (DSA *)DSA_new();\n  if (!dsa)\n    return Number;\n  ret = dsa_builtin_paramgen(dsa, dctx->nbits, dctx->qbits, dctx->pmd, Number L,\n                             Number L, Number L, Number L, Number L, pcb);\n  if (ret)\n    EVP_PKEY_assign(pkey, Number L, dsa);\n  else\n    DSA_free(dsa);\n  return ret;\n}", "var": [{"name": "v7", "type": "char[24]", "pred_name": "param", "ref_name": "cb", "ref_type": "struct BN_GENCB { unsigned int ver; PADDING (4); void * arg; $80C9AFFEFC010BC3DF322CE7AB13384D cb; }"}], "body_in_train": false}, {"repo_owner": "alextsits", "repo_name": "android_kernel_samsung_msm7x27a", "path": "alextsits/android_kernel_samsung_msm7x27a/5037def013036c66627004ac673ed6aba8603b7b1d6360bf99f7d0ca522e4741", "path_in_repo": "alextsits/android_kernel_samsung_msm7x27a/tools/perf/util/trace-event-info.o", "objdump": "00000000000008ca <copy_event_system>:\n     8ca:\t55                   \tpush   %rbp\n     8cb:\t48 89 e5             \tmov    %rsp,%rbp\n     8ce:\t53                   \tpush   %rbx\n     8cf:\t48 81 ec e8 00 00 00 \tsub    $0xe8,%rsp\n     8d6:\t48 89 bd 18 ff ff ff \tmov    %rdi,-0xe8(%rbp)\n     8dd:\t48 89 b5 10 ff ff ff \tmov    %rsi,-0xf0(%rbp)\n     8e4:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     8eb:\t00 00 \n     8ed:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     8f1:\t31 c0                \txor    %eax,%eax\n     8f3:\tc7 85 20 ff ff ff 00 \tmovl   $0x0,-0xe0(%rbp)\n     8fa:\t00 00 00 \n     8fd:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     904:\t48 89 c7             \tmov    %rax,%rdi\n     907:\te8 00 00 00 00       \tcallq  90c <copy_event_system+0x42>\n     90c:\t48 89 85 30 ff ff ff \tmov    %rax,-0xd0(%rbp)\n     913:\t48 83 bd 30 ff ff ff \tcmpq   $0x0,-0xd0(%rbp)\n     91a:\t00 \n     91b:\t0f 85 44 01 00 00    \tjne    a65 <copy_event_system+0x19b>\n     921:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     928:\t48 89 c6             \tmov    %rax,%rsi\n     92b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     930:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     935:\te8 f8 f6 ff ff       \tcallq  32 <die>\n     93a:\te9 26 01 00 00       \tjmpq   a65 <copy_event_system+0x19b>\n     93f:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     946:\t0f b6 40 12          \tmovzbl 0x12(%rax),%eax\n     94a:\t3c 04                \tcmp    $0x4,%al\n     94c:\t0f 85 13 01 00 00    \tjne    a65 <copy_event_system+0x19b>\n     952:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     959:\t48 83 c0 13          \tadd    $0x13,%rax\n     95d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     962:\t48 89 c7             \tmov    %rax,%rdi\n     965:\te8 00 00 00 00       \tcallq  96a <copy_event_system+0xa0>\n     96a:\t85 c0                \ttest   %eax,%eax\n     96c:\t0f 84 f3 00 00 00    \tje     a65 <copy_event_system+0x19b>\n     972:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     979:\t48 83 c0 13          \tadd    $0x13,%rax\n     97d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     982:\t48 89 c7             \tmov    %rax,%rdi\n     985:\te8 00 00 00 00       \tcallq  98a <copy_event_system+0xc0>\n     98a:\t85 c0                \ttest   %eax,%eax\n     98c:\t0f 84 d3 00 00 00    \tje     a65 <copy_event_system+0x19b>\n     992:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     999:\t48 8d 50 13          \tlea    0x13(%rax),%rdx\n     99d:\t48 8b 85 10 ff ff ff \tmov    -0xf0(%rbp),%rax\n     9a4:\t48 89 c6             \tmov    %rax,%rsi\n     9a7:\t48 89 d7             \tmov    %rdx,%rdi\n     9aa:\te8 aa fe ff ff       \tcallq  859 <name_in_tp_list>\n     9af:\t83 f0 01             \txor    $0x1,%eax\n     9b2:\t84 c0                \ttest   %al,%al\n     9b4:\t74 05                \tje     9bb <copy_event_system+0xf1>\n     9b6:\te9 aa 00 00 00       \tjmpq   a65 <copy_event_system+0x19b>\n     9bb:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     9c2:\t48 89 c7             \tmov    %rax,%rdi\n     9c5:\te8 00 00 00 00       \tcallq  9ca <copy_event_system+0x100>\n     9ca:\t89 c3                \tmov    %eax,%ebx\n     9cc:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     9d3:\t48 83 c0 13          \tadd    $0x13,%rax\n     9d7:\t48 89 c7             \tmov    %rax,%rdi\n     9da:\te8 00 00 00 00       \tcallq  9df <copy_event_system+0x115>\n     9df:\t01 d8                \tadd    %ebx,%eax\n     9e1:\t83 c0 0a             \tadd    $0xa,%eax\n     9e4:\t89 c7                \tmov    %eax,%edi\n     9e6:\te8 00 00 00 00       \tcallq  9eb <copy_event_system+0x121>\n     9eb:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n     9f2:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     9f9:\t48 8d 48 13          \tlea    0x13(%rax),%rcx\n     9fd:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n     a04:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     a0b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a10:\t48 89 c7             \tmov    %rax,%rdi\n     a13:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a18:\te8 00 00 00 00       \tcallq  a1d <copy_event_system+0x153>\n     a1d:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n     a24:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     a2b:\t48 89 d6             \tmov    %rdx,%rsi\n     a2e:\t48 89 c7             \tmov    %rax,%rdi\n     a31:\te8 00 00 00 00       \tcallq  a36 <copy_event_system+0x16c>\n     a36:\t89 85 24 ff ff ff    \tmov    %eax,-0xdc(%rbp)\n     a3c:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     a43:\t48 89 c7             \tmov    %rax,%rdi\n     a46:\te8 00 00 00 00       \tcallq  a4b <copy_event_system+0x181>\n     a4b:\t83 bd 24 ff ff ff 00 \tcmpl   $0x0,-0xdc(%rbp)\n     a52:\t79 02                \tjns    a56 <copy_event_system+0x18c>\n     a54:\teb 0f                \tjmp    a65 <copy_event_system+0x19b>\n     a56:\t8b 85 20 ff ff ff    \tmov    -0xe0(%rbp),%eax\n     a5c:\t83 c0 01             \tadd    $0x1,%eax\n     a5f:\t89 85 20 ff ff ff    \tmov    %eax,-0xe0(%rbp)\n     a65:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     a6c:\t48 89 c7             \tmov    %rax,%rdi\n     a6f:\te8 00 00 00 00       \tcallq  a74 <copy_event_system+0x1aa>\n     a74:\t48 89 85 38 ff ff ff \tmov    %rax,-0xc8(%rbp)\n     a7b:\t48 83 bd 38 ff ff ff \tcmpq   $0x0,-0xc8(%rbp)\n     a82:\t00 \n     a83:\t0f 85 b6 fe ff ff    \tjne    93f <copy_event_system+0x75>\n     a89:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n     a90:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     a95:\t48 89 c7             \tmov    %rax,%rdi\n     a98:\te8 d4 f8 ff ff       \tcallq  371 <write_or_die>\n     a9d:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     aa4:\t48 89 c7             \tmov    %rax,%rdi\n     aa7:\te8 00 00 00 00       \tcallq  aac <copy_event_system+0x1e2>\n     aac:\te9 7e 01 00 00       \tjmpq   c2f <copy_event_system+0x365>\n     ab1:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     ab8:\t0f b6 40 12          \tmovzbl 0x12(%rax),%eax\n     abc:\t3c 04                \tcmp    $0x4,%al\n     abe:\t0f 85 6b 01 00 00    \tjne    c2f <copy_event_system+0x365>\n     ac4:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     acb:\t48 83 c0 13          \tadd    $0x13,%rax\n     acf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     ad4:\t48 89 c7             \tmov    %rax,%rdi\n     ad7:\te8 00 00 00 00       \tcallq  adc <copy_event_system+0x212>\n     adc:\t85 c0                \ttest   %eax,%eax\n     ade:\t0f 84 4b 01 00 00    \tje     c2f <copy_event_system+0x365>\n     ae4:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     aeb:\t48 83 c0 13          \tadd    $0x13,%rax\n     aef:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     af4:\t48 89 c7             \tmov    %rax,%rdi\n     af7:\te8 00 00 00 00       \tcallq  afc <copy_event_system+0x232>\n     afc:\t85 c0                \ttest   %eax,%eax\n     afe:\t0f 84 2b 01 00 00    \tje     c2f <copy_event_system+0x365>\n     b04:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     b0b:\t48 8d 50 13          \tlea    0x13(%rax),%rdx\n     b0f:\t48 8b 85 10 ff ff ff \tmov    -0xf0(%rbp),%rax\n     b16:\t48 89 c6             \tmov    %rax,%rsi\n     b19:\t48 89 d7             \tmov    %rdx,%rdi\n     b1c:\te8 38 fd ff ff       \tcallq  859 <name_in_tp_list>\n     b21:\t83 f0 01             \txor    $0x1,%eax\n     b24:\t84 c0                \ttest   %al,%al\n     b26:\t74 05                \tje     b2d <copy_event_system+0x263>\n     b28:\te9 02 01 00 00       \tjmpq   c2f <copy_event_system+0x365>\n     b2d:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     b34:\t48 89 c7             \tmov    %rax,%rdi\n     b37:\te8 00 00 00 00       \tcallq  b3c <copy_event_system+0x272>\n     b3c:\t89 c3                \tmov    %eax,%ebx\n     b3e:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     b45:\t48 83 c0 13          \tadd    $0x13,%rax\n     b49:\t48 89 c7             \tmov    %rax,%rdi\n     b4c:\te8 00 00 00 00       \tcallq  b51 <copy_event_system+0x287>\n     b51:\t01 d8                \tadd    %ebx,%eax\n     b53:\t83 c0 0a             \tadd    $0xa,%eax\n     b56:\t89 c7                \tmov    %eax,%edi\n     b58:\te8 00 00 00 00       \tcallq  b5d <copy_event_system+0x293>\n     b5d:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n     b64:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     b6b:\t48 8d 48 13          \tlea    0x13(%rax),%rcx\n     b6f:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n     b76:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     b7d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b82:\t48 89 c7             \tmov    %rax,%rdi\n     b85:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b8a:\te8 00 00 00 00       \tcallq  b8f <copy_event_system+0x2c5>\n     b8f:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n     b96:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     b9d:\t48 89 d6             \tmov    %rdx,%rsi\n     ba0:\t48 89 c7             \tmov    %rax,%rdi\n     ba3:\te8 00 00 00 00       \tcallq  ba8 <copy_event_system+0x2de>\n     ba8:\t89 85 24 ff ff ff    \tmov    %eax,-0xdc(%rbp)\n     bae:\t83 bd 24 ff ff ff 00 \tcmpl   $0x0,-0xdc(%rbp)\n     bb5:\t78 69                \tjs     c20 <copy_event_system+0x356>\n     bb7:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     bbe:\t48 89 c7             \tmov    %rax,%rdi\n     bc1:\te8 69 fa ff ff       \tcallq  62f <get_size>\n     bc6:\t48 89 85 28 ff ff ff \tmov    %rax,-0xd8(%rbp)\n     bcd:\t48 8d 85 28 ff ff ff \tlea    -0xd8(%rbp),%rax\n     bd4:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     bd9:\t48 89 c7             \tmov    %rax,%rdi\n     bdc:\te8 90 f7 ff ff       \tcallq  371 <write_or_die>\n     be1:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     be8:\t48 89 c7             \tmov    %rax,%rdi\n     beb:\te8 13 f9 ff ff       \tcallq  503 <copy_file>\n     bf0:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n     bf7:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n     bfe:\t48 39 85 48 ff ff ff \tcmp    %rax,-0xb8(%rbp)\n     c05:\t74 19                \tje     c20 <copy_event_system+0x356>\n     c07:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     c0e:\t48 89 c6             \tmov    %rax,%rsi\n     c11:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c16:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c1b:\te8 12 f4 ff ff       \tcallq  32 <die>\n     c20:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     c27:\t48 89 c7             \tmov    %rax,%rdi\n     c2a:\te8 00 00 00 00       \tcallq  c2f <copy_event_system+0x365>\n     c2f:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     c36:\t48 89 c7             \tmov    %rax,%rdi\n     c39:\te8 00 00 00 00       \tcallq  c3e <copy_event_system+0x374>\n     c3e:\t48 89 85 38 ff ff ff \tmov    %rax,-0xc8(%rbp)\n     c45:\t48 83 bd 38 ff ff ff \tcmpq   $0x0,-0xc8(%rbp)\n     c4c:\t00 \n     c4d:\t0f 85 5e fe ff ff    \tjne    ab1 <copy_event_system+0x1e7>\n     c53:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     c5a:\t48 89 c7             \tmov    %rax,%rdi\n     c5d:\te8 00 00 00 00       \tcallq  c62 <copy_event_system+0x398>\n     c62:\t90                   \tnop\n     c63:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c67:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     c6e:\t00 00 \n     c70:\t74 05                \tje     c77 <copy_event_system+0x3ad>\n     c72:\te8 00 00 00 00       \tcallq  c77 <copy_event_system+0x3ad>\n     c77:\t48 81 c4 e8 00 00 00 \tadd    $0xe8,%rsp\n     c7e:\t5b                   \tpop    %rbx\n     c7f:\t5d                   \tpop    %rbp\n     c80:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall copy_event_system(const char *a1, __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  int v15;\n  int v16;\n  __int64 v17;\n  DIR *dirp;\n  struct dirent64 *v19;\n  char *s;\n  __int64 v21;\n  struct stat64 <span class=\"supfact\">v22</span>;\n  unsigned __int64 v23;\n  v23 = __readfsqword(Number);\n  v15 = Number;\n  dirp = opendir(a1);\n  if (!dirp)\n    die(String, (__int64)a1, v2, v3, v4, v5);\n  while (Number) {\n    v19 = readdir64(dirp);\n    if (!v19)\n      break;\n    if (v19->d_type == Number) {\n      if (strcmp(v19->d_name, String)) {\n        if (strcmp(v19->d_name, String)) {\n          if ((unsigned __int8)name_in_tp_list(v19->d_name, a2) == Number) {\n            v6 = strlen(a1);\n            v7 = strlen(v19->d_name);\n            s = (char *)malloc_or_die(v6 + v7 + Number, a2);\n            sprintf(s, String, a1, v19->d_name);\n            v16 = stat64(s, &<span class=\"supfact\">v22</span>);\n            free(s);\n            if (v16 >= Number)\n              ++v15;\n          }\n        }\n      }\n    }\n  }\n  write_or_die(&v15, Number);\n  rewinddir(dirp);\n  while (Number) {\n    v19 = readdir64(dirp);\n    if (!v19)\n      break;\n    if (v19->d_type == Number && strcmp(v19->d_name, String) &&\n        strcmp(v19->d_name, String) &&\n        (unsigned __int8)name_in_tp_list(v19->d_name, a2) == Number) {\n      v8 = strlen(a1);\n      v9 = strlen(v19->d_name);\n      s = (char *)malloc_or_die(v8 + v9 + Number, a2);\n      sprintf(s, String, a1, v19->d_name);\n      v16 = stat64(s, &<span class=\"supfact\">v22</span>);\n      if (v16 >= Number) {\n        v17 = get_size(s);\n        write_or_die(&v17, Number);\n        v21 = copy_file(s);\n        if (v21 != v17)\n          die(String, (__int64)s, v10, v11, v12, v13);\n      }\n      free(s);\n    }\n  }\n  closedir(dirp);\n  return __readfsqword(Number) ^ v23;\n}", "code_t": "void __cdecl copy_event_system(const char *sys, tracepoint_path *tps) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  int count;\n  int ret;\n  unsigned __int64 size;\n  DIR *dir;\n  dirent *dent;\n  char *format;\n  unsigned __int64 check_size;\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int64 v14;\n  v14 = __readfsqword(Number);\n  count = Number;\n  dir = opendir(sys);\n  if (!dir)\n    die(String, sys);\n  while (Number) {\n    dent = (dirent *)readdir64(dir);\n    if (!dent)\n      break;\n    if (dent->d_type == Number) {\n      if (strcmp(dent->d_name, String)) {\n        if (strcmp(dent->d_name, String)) {\n          if (name_in_tp_list(dent->d_name, tps)) {\n            v2 = strlen(sys);\n            v3 = strlen(dent->d_name);\n            format = (char *)malloc_or_die(v2 + v3 + Number);\n            sprintf(format, String, sys, dent->d_name);\n            ret = stat64(format, (struct stat64 *)&<span class=\"supfact\">st</span>);\n            free(format);\n            if (ret >= Number)\n              ++count;\n          }\n        }\n      }\n    }\n  }\n  write_or_die(&count, Number);\n  rewinddir(dir);\n  while (Number) {\n    dent = (dirent *)readdir64(dir);\n    if (!dent)\n      break;\n    if (dent->d_type == Number && strcmp(dent->d_name, String) &&\n        strcmp(dent->d_name, String) && name_in_tp_list(dent->d_name, tps)) {\n      v4 = strlen(sys);\n      v5 = strlen(dent->d_name);\n      format = (char *)malloc_or_die(v4 + v5 + Number);\n      sprintf(format, String, sys, dent->d_name);\n      ret = stat64(format, (struct stat64 *)&<span class=\"supfact\">st</span>);\n      if (ret >= Number) {\n        size = get_size(format);\n        write_or_die(&size, Number);\n        check_size = copy_file(format);\n        if (check_size != size)\n          die(String, format);\n      }\n      free(format);\n    }\n  }\n  closedir(dir);\n}", "var": [{"name": "v22", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "st", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "Dar13", "repo_name": "OpenMemDB", "path": "Dar13/OpenMemDB/f652a8e8913d63a93adbb5f4dc5a286f4a54baeb0912de7926f3f2c06b1e4428", "path_in_repo": "Dar13/OpenMemDB/database/libomdb/ConsoleDemo/omdb_console", "objdump": "000000000040830c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPlES1_lET0_T_S4_S3_RSaIT1_E>:\n  40830c:\t55                   \tpush   %rbp\n  40830d:\t48 89 e5             \tmov    %rsp,%rbp\n  408310:\t48 83 ec 20          \tsub    $0x20,%rsp\n  408314:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  408318:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  40831c:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  408320:\t48 89 4d e0          \tmov    %rcx,-0x20(%rbp)\n  408324:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  408328:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  40832c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  408330:\t48 89 ce             \tmov    %rcx,%rsi\n  408333:\t48 89 c7             \tmov    %rax,%rdi\n  408336:\te8 a5 06 00 00       \tcallq  4089e0 <_ZSt18uninitialized_copyISt13move_iteratorIPlES1_ET0_T_S4_S3_>\n  40833b:\tc9                   \tleaveq \n  40833c:\tc3                   \tretq   \n  40833d:\t90                   \tnop", "code_s": "__int64 __fastcall std\n__uninitialized_copy_a<std move_iterator<long *>, long *, long>(\n    __int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>, __int64 a3) {\n  return std uninitialized_copy<std move_iterator<long *>, long *>(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, a3);\n}", "code_t": "__int64 *__cdecl std\n__uninitialized_copy_a<std move_iterator<long *>, long *, long>(\n    std move_iterator<long int *> <span class=\"supfact\">__first</span>,\n    std move_iterator<long int *> <span class=\"supfact\">__last</span>, __int64 *__result,\n    std allocator<long int> *a4) {\n  return std uninitialized_copy<std move_iterator<long *>, long *>(\n      <span class=\"supfact\">__first</span>, <span class=\"supfact\">__last</span>, __result);\n}", "var": [{"name": "a1", "type": "struct std::move_iterator<long int*> { __int64 * _M_current; }", "pred_name": "__first", "ref_name": "__first", "ref_type": "struct std::move_iterator<long int*> { __int64 * _M_current; }"}, {"name": "a2", "type": "struct std::move_iterator<long int*> { __int64 * _M_current; }", "pred_name": "__last", "ref_name": "__last", "ref_type": "struct std::move_iterator<long int*> { __int64 * _M_current; }"}], "body_in_train": true}, {"repo_owner": "the0ry", "repo_name": "gfiber-gflt100", "path": "the0ry/gfiber-gflt100/cadc8f960aa71b0587735655e0d5bdc4b019d2ed6c1d18c59137f8398cd5f4c0", "path_in_repo": "the0ry/gfiber-gflt100/userspace/gpl/apps/sysstat/sadc", "objdump": "", "code_s": "__int64 __fastcall sub_403099(int a1) {\n  __int64 result;\n  int *v2;\n  char *v3;\n  char *v4;\n  int v5[Number];\n  __int16 v6;\n  struct utsname <span class=\"supfact\">name</span>;\n  char v8[Number];\n  int v9;\n  int v10;\n  int i;\n  sub_402F7C(&v6);\n  v10 = sub_402E66(a1, (__int64)&v6, Number);\n  if (v10 != Number)\n    goto LABEL_11;\n  memset(&qword_416D40, Number, Number);\n  qword_416D40 = sub_40D710(v8);\n  dword_416D48 = sub_4060FA(&off_4161C0, Number L, Number L);\n  byte_416D4C = v8[Number];\n  byte_416D4D = v8[Number];\n  byte_416D4E = v8[Number];\n  byte_416D4F = Number;\n  uname(&<span class=\"supfact\">name</span>);\n  strncpy(dest, <span class=\"supfact\">name</span>.sysname, Number);\n  byte_416D90 = Number;\n  strncpy(byte_416D91, <span class=\"supfact\">name</span>.nodename, Number);\n  byte_416DD1 = Number;\n  strncpy(byte_416DD2, <span class=\"supfact\">name</span>.release, Number);\n  byte_416E12 = Number;\n  strncpy(byte_416E13, <span class=\"supfact\">name</span>.machine, Number);\n  byte_416E53 = Number;\n  result = sub_402E66(a1, (__int64)&qword_416D40, Number);\n  v10 = result;\n  if ((_DWORD)result != Number) {\n  LABEL_11:\n    v2 = __errno_location();\n    v3 = strerror(*v2);\n    v4 = gettext(String);\n    fprintf(stderr, v4, v3);\n    exit(Number);\n  }\n  for (i = Number; i <= Number; ++i) {\n    result = (unsigned int)dword_416E60[i];\n    if ((_DWORD)result) {\n      result = sub_4060A9(&off_4161C0, (unsigned int)dword_416E60[i]);\n      v9 = result;\n      if ((int)result >= Number) {\n        result = *((_DWORD *)*(&off_4161C0 + v9) + Number) & Number;\n        if ((_DWORD)result) {\n          v5[Number] = *(_DWORD *)*(&off_4161C0 + v9);\n          v5[Number] = **((_DWORD **)*(&off_4161C0 + v9) + Number);\n          v5[Number] = *((_DWORD *)*(&off_4161C0 + v9) + Number);\n          result = sub_402E66(a1, (__int64)v5, Number);\n          v10 = result;\n          if ((_DWORD)result != Number)\n            goto LABEL_11;\n        }\n      }\n    }\n  }\n  return result;\n}", "code_t": "__int64 __fastcall sub_403099(int a1) {\n  __int64 result;\n  int *v2;\n  char *v3;\n  char *v4;\n  int v5[Number];\n  __int16 v6;\n  struct utsname <span class=\"supfact\">name</span>;\n  char v8[Number];\n  int v9;\n  int v10;\n  int i;\n  sub_402F7C(&v6);\n  v10 = sub_402E66(a1, (__int64)&v6, Number);\n  if (v10 != Number)\n    goto LABEL_11;\n  memset(&qword_416D40, Number, Number);\n  qword_416D40 = sub_40D710(v8);\n  dword_416D48 = sub_4060FA(&off_4161C0, Number L, Number L);\n  byte_416D4C = v8[Number];\n  byte_416D4D = v8[Number];\n  byte_416D4E = v8[Number];\n  byte_416D4F = Number;\n  uname(&<span class=\"supfact\">name</span>);\n  strncpy(dest, <span class=\"supfact\">name</span>.sysname, Number);\n  byte_416D90 = Number;\n  strncpy(byte_416D91, <span class=\"supfact\">name</span>.nodename, Number);\n  byte_416DD1 = Number;\n  strncpy(byte_416DD2, <span class=\"supfact\">name</span>.release, Number);\n  byte_416E12 = Number;\n  strncpy(byte_416E13, <span class=\"supfact\">name</span>.machine, Number);\n  byte_416E53 = Number;\n  result = sub_402E66(a1, (__int64)&qword_416D40, Number);\n  v10 = result;\n  if ((_DWORD)result != Number) {\n  LABEL_11:\n    v2 = __errno_location();\n    v3 = strerror(*v2);\n    v4 = gettext(String);\n    fprintf(stderr, v4, v3);\n    exit(Number);\n  }\n  for (i = Number; i <= Number; ++i) {\n    result = (unsigned int)dword_416E60[i];\n    if ((_DWORD)result) {\n      result = sub_4060A9(&off_4161C0, (unsigned int)dword_416E60[i]);\n      v9 = result;\n      if ((int)result >= Number) {\n        result = *((_DWORD *)*(&off_4161C0 + v9) + Number) & Number;\n        if ((_DWORD)result) {\n          v5[Number] = *(_DWORD *)*(&off_4161C0 + v9);\n          v5[Number] = **((_DWORD **)*(&off_4161C0 + v9) + Number);\n          v5[Number] = *((_DWORD *)*(&off_4161C0 + v9) + Number);\n          result = sub_402E66(a1, (__int64)v5, Number);\n          v10 = result;\n          if ((_DWORD)result != Number)\n            goto LABEL_11;\n        }\n      }\n    }\n  }\n  return result;\n}", "var": [{"name": "name", "type": "struct struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] domainname; }", "pred_name": "name", "ref_name": "name", "ref_type": "struct struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] domainname; }"}], "body_in_train": false}, {"repo_owner": "bboozzoo", "repo_name": "qemu-power", "path": "bboozzoo/qemu-power/b0b9698c6158cb2c4e9c6df6bf1213cc3d598b640a0f74f3e607561fc9bcea1e", "path_in_repo": "bboozzoo/qemu-power//sparc64-softmmu/e1000.o", "objdump": "0000000000002468 <e1000_receive>:\n    2468:\t55                   \tpush   %rbp\n    2469:\t48 89 e5             \tmov    %rsp,%rbp\n    246c:\t41 54                \tpush   %r12\n    246e:\t53                   \tpush   %rbx\n    246f:\t48 83 ec 70          \tsub    $0x70,%rsp\n    2473:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    2477:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n    247b:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n    247f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2486:\t00 00 \n    2488:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    248c:\t31 c0                \txor    %eax,%eax\n    248e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    2492:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    2496:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    249a:\t48 8b 80 58 01 00 00 \tmov    0x158(%rax),%rax\n    24a1:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    24a5:\t66 c7 45 aa 00 00    \tmovw   $0x0,-0x56(%rbp)\n    24ab:\tc6 45 a8 00          \tmovb   $0x0,-0x58(%rbp)\n    24af:\tc6 45 a9 00          \tmovb   $0x0,-0x57(%rbp)\n    24b3:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    24b7:\t8b 80 84 03 00 00    \tmov    0x384(%rax),%eax\n    24bd:\t83 e0 02             \tand    $0x2,%eax\n    24c0:\t85 c0                \ttest   %eax,%eax\n    24c2:\t75 0c                \tjne    24d0 <e1000_receive+0x68>\n    24c4:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n    24cb:\te9 19 04 00 00       \tjmpq   28e9 <e1000_receive+0x481>\n    24d0:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    24d4:\t8b 80 44 03 02 00    \tmov    0x20344(%rax),%eax\n    24da:\t89 c0                \tmov    %eax,%eax\n    24dc:\t48 39 45 88          \tcmp    %rax,-0x78(%rbp)\n    24e0:\t76 40                \tjbe    2522 <e1000_receive+0xba>\n    24e2:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 24e8 <e1000_receive+0x80>\n    24e8:\t83 e0 10             \tand    $0x10,%eax\n    24eb:\t85 c0                \ttest   %eax,%eax\n    24ed:\t74 27                \tje     2516 <e1000_receive+0xae>\n    24ef:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    24f3:\t8b 88 44 03 02 00    \tmov    0x20344(%rax),%ecx\n    24f9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2500 <e1000_receive+0x98>\n    2500:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    2504:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2509:\t48 89 c7             \tmov    %rax,%rdi\n    250c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2511:\te8 00 00 00 00       \tcallq  2516 <e1000_receive+0xae>\n    2516:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n    251d:\te9 c7 03 00 00       \tjmpq   28e9 <e1000_receive+0x481>\n    2522:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    2526:\t89 c2                \tmov    %eax,%edx\n    2528:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n    252c:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2530:\t48 89 ce             \tmov    %rcx,%rsi\n    2533:\t48 89 c7             \tmov    %rax,%rdi\n    2536:\te8 b9 f9 ff ff       \tcallq  1ef4 <receive_filter>\n    253b:\t85 c0                \ttest   %eax,%eax\n    253d:\t75 09                \tjne    2548 <e1000_receive+0xe0>\n    253f:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    2543:\te9 a1 03 00 00       \tjmpq   28e9 <e1000_receive+0x481>\n    2548:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    254c:\t48 89 c7             \tmov    %rax,%rdi\n    254f:\te8 a8 ea ff ff       \tcallq  ffc <vlan_enabled>\n    2554:\t85 c0                \ttest   %eax,%eax\n    2556:\t74 5e                \tje     25b6 <e1000_receive+0x14e>\n    2558:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    255c:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2560:\t48 89 d6             \tmov    %rdx,%rsi\n    2563:\t48 89 c7             \tmov    %rax,%rdi\n    2566:\te8 21 eb ff ff       \tcallq  108c <is_vlan_packet>\n    256b:\t85 c0                \ttest   %eax,%eax\n    256d:\t74 47                \tje     25b6 <e1000_receive+0x14e>\n    256f:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    2573:\t48 83 c0 0e          \tadd    $0xe,%rax\n    2577:\t48 89 c7             \tmov    %rax,%rdi\n    257a:\te8 a7 db ff ff       \tcallq  126 <be16_to_cpup>\n    257f:\t0f b7 c0             \tmovzwl %ax,%eax\n    2582:\t89 c7                \tmov    %eax,%edi\n    2584:\te8 16 dc ff ff       \tcallq  19f <cpu_to_le16>\n    2589:\t66 89 45 aa          \tmov    %ax,-0x56(%rbp)\n    258d:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    2591:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2595:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    2599:\tba 0c 00 00 00       \tmov    $0xc,%edx\n    259e:\t48 89 c6             \tmov    %rax,%rsi\n    25a1:\t48 89 cf             \tmov    %rcx,%rdi\n    25a4:\te8 00 00 00 00       \tcallq  25a9 <e1000_receive+0x141>\n    25a9:\tc6 45 a8 08          \tmovb   $0x8,-0x58(%rbp)\n    25ad:\tc6 45 a9 04          \tmovb   $0x4,-0x57(%rbp)\n    25b1:\t48 83 6d 88 04       \tsubq   $0x4,-0x78(%rbp)\n    25b6:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    25ba:\t8b 80 94 2a 00 00    \tmov    0x2a94(%rax),%eax\n    25c0:\t89 45 b4             \tmov    %eax,-0x4c(%rbp)\n    25c3:\t48 83 45 88 04       \taddq   $0x4,-0x78(%rbp)\n    25c8:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    25cc:\t8b 90 94 2a 00 00    \tmov    0x2a94(%rax),%edx\n    25d2:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    25d6:\t8b 80 9c 2a 00 00    \tmov    0x2a9c(%rax),%eax\n    25dc:\t39 c2                \tcmp    %eax,%edx\n    25de:\t75 30                \tjne    2610 <e1000_receive+0x1a8>\n    25e0:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    25e4:\t8b 80 4c 03 02 00    \tmov    0x2034c(%rax),%eax\n    25ea:\t85 c0                \ttest   %eax,%eax\n    25ec:\t74 22                \tje     2610 <e1000_receive+0x1a8>\n    25ee:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    25f2:\tba 40 00 00 00       \tmov    $0x40,%edx\n    25f7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    25fc:\t48 89 c7             \tmov    %rax,%rdi\n    25ff:\te8 cc e1 ff ff       \tcallq  7d0 <set_ics>\n    2604:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n    260b:\te9 d9 02 00 00       \tjmpq   28e9 <e1000_receive+0x481>\n    2610:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2614:\t8b 80 88 2a 00 00    \tmov    0x2a88(%rax),%eax\n    261a:\t89 c0                \tmov    %eax,%eax\n    261c:\t48 c1 e0 20          \tshl    $0x20,%rax\n    2620:\t48 89 c2             \tmov    %rax,%rdx\n    2623:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2627:\t8b 80 84 2a 00 00    \tmov    0x2a84(%rax),%eax\n    262d:\t89 c0                \tmov    %eax,%eax\n    262f:\t48 01 c2             \tadd    %rax,%rdx\n    2632:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2636:\t8b 80 94 2a 00 00    \tmov    0x2a94(%rax),%eax\n    263c:\t89 c0                \tmov    %eax,%eax\n    263e:\t48 c1 e0 04          \tshl    $0x4,%rax\n    2642:\t48 01 d0             \tadd    %rdx,%rax\n    2645:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    2649:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n    264d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2651:\tba 10 00 00 00       \tmov    $0x10,%edx\n    2656:\t48 89 ce             \tmov    %rcx,%rsi\n    2659:\t48 89 c7             \tmov    %rax,%rdi\n    265c:\te8 99 de ff ff       \tcallq  4fa <cpu_physical_memory_read>\n    2661:\t0f b7 45 aa          \tmovzwl -0x56(%rbp),%eax\n    2665:\t66 89 45 de          \tmov    %ax,-0x22(%rbp)\n    2669:\t0f b6 45 dc          \tmovzbl -0x24(%rbp),%eax\n    266d:\t0a 45 a8             \tor     -0x58(%rbp),%al\n    2670:\t83 c8 01             \tor     $0x1,%eax\n    2673:\t88 45 dc             \tmov    %al,-0x24(%rbp)\n    2676:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    267a:\t48 85 c0             \ttest   %rax,%rax\n    267d:\t74 4b                \tje     26ca <e1000_receive+0x262>\n    267f:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    2683:\t41 89 c4             \tmov    %eax,%r12d\n    2686:\t0f b6 55 a9          \tmovzbl -0x57(%rbp),%edx\n    268a:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    268e:\t48 8d 1c 02          \tlea    (%rdx,%rax,1),%rbx\n    2692:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2696:\t48 89 c7             \tmov    %rax,%rdi\n    2699:\te8 1e dc ff ff       \tcallq  2bc <le64_to_cpu>\n    269e:\t44 89 e2             \tmov    %r12d,%edx\n    26a1:\t48 89 de             \tmov    %rbx,%rsi\n    26a4:\t48 89 c7             \tmov    %rax,%rdi\n    26a7:\te8 9f de ff ff       \tcallq  54b <cpu_physical_memory_write>\n    26ac:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    26b0:\t0f b7 c0             \tmovzwl %ax,%eax\n    26b3:\t89 c7                \tmov    %eax,%edi\n    26b5:\te8 e5 da ff ff       \tcallq  19f <cpu_to_le16>\n    26ba:\t66 89 45 d8          \tmov    %ax,-0x28(%rbp)\n    26be:\t0f b6 45 dc          \tmovzbl -0x24(%rbp),%eax\n    26c2:\t83 c8 06             \tor     $0x6,%eax\n    26c5:\t88 45 dc             \tmov    %al,-0x24(%rbp)\n    26c8:\teb 2b                \tjmp    26f5 <e1000_receive+0x28d>\n    26ca:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 26d0 <e1000_receive+0x268>\n    26d0:\t83 e0 10             \tand    $0x10,%eax\n    26d3:\t85 c0                \ttest   %eax,%eax\n    26d5:\t74 1e                \tje     26f5 <e1000_receive+0x28d>\n    26d7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 26de <e1000_receive+0x276>\n    26de:\t48 89 c1             \tmov    %rax,%rcx\n    26e1:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    26e6:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    26eb:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    26f0:\te8 00 00 00 00       \tcallq  26f5 <e1000_receive+0x28d>\n    26f5:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n    26f9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    26fd:\tba 10 00 00 00       \tmov    $0x10,%edx\n    2702:\t48 89 ce             \tmov    %rcx,%rsi\n    2705:\t48 89 c7             \tmov    %rax,%rdi\n    2708:\te8 3e de ff ff       \tcallq  54b <cpu_physical_memory_write>\n    270d:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2711:\t8b 80 94 2a 00 00    \tmov    0x2a94(%rax),%eax\n    2717:\t8d 50 01             \tlea    0x1(%rax),%edx\n    271a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    271e:\t89 90 94 2a 00 00    \tmov    %edx,0x2a94(%rax)\n    2724:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2728:\t8b 80 94 2a 00 00    \tmov    0x2a94(%rax),%eax\n    272e:\t89 c0                \tmov    %eax,%eax\n    2730:\t48 c1 e0 04          \tshl    $0x4,%rax\n    2734:\t48 89 c2             \tmov    %rax,%rdx\n    2737:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    273b:\t8b 80 8c 2a 00 00    \tmov    0x2a8c(%rax),%eax\n    2741:\t89 c0                \tmov    %eax,%eax\n    2743:\t48 39 c2             \tcmp    %rax,%rdx\n    2746:\t72 0e                \tjb     2756 <e1000_receive+0x2ee>\n    2748:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    274c:\tc7 80 94 2a 00 00 00 \tmovl   $0x0,0x2a94(%rax)\n    2753:\t00 00 00 \n    2756:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    275a:\tc7 80 4c 03 02 00 01 \tmovl   $0x1,0x2034c(%rax)\n    2761:\t00 00 00 \n    2764:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2768:\t8b 80 94 2a 00 00    \tmov    0x2a94(%rax),%eax\n    276e:\t39 45 b4             \tcmp    %eax,-0x4c(%rbp)\n    2771:\t75 64                \tjne    27d7 <e1000_receive+0x36f>\n    2773:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2779 <e1000_receive+0x311>\n    2779:\t25 00 08 00 00       \tand    $0x800,%eax\n    277e:\t85 c0                \ttest   %eax,%eax\n    2780:\t74 33                \tje     27b5 <e1000_receive+0x34d>\n    2782:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2786:\t8b b0 8c 2a 00 00    \tmov    0x2a8c(%rax),%esi\n    278c:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2790:\t8b 88 9c 2a 00 00    \tmov    0x2a9c(%rax),%ecx\n    2796:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 279d <e1000_receive+0x335>\n    279d:\t8b 55 b4             \tmov    -0x4c(%rbp),%edx\n    27a0:\t41 89 f0             \tmov    %esi,%r8d\n    27a3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    27a8:\t48 89 c7             \tmov    %rax,%rdi\n    27ab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    27b0:\te8 00 00 00 00       \tcallq  27b5 <e1000_receive+0x34d>\n    27b5:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    27b9:\tba 40 00 00 00       \tmov    $0x40,%edx\n    27be:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    27c3:\t48 89 c7             \tmov    %rax,%rdi\n    27c6:\te8 05 e0 ff ff       \tcallq  7d0 <set_ics>\n    27cb:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n    27d2:\te9 12 01 00 00       \tjmpq   28e9 <e1000_receive+0x481>\n    27d7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    27db:\t48 85 c0             \ttest   %rax,%rax\n    27de:\t0f 84 e4 fd ff ff    \tje     25c8 <e1000_receive+0x160>\n    27e4:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    27e8:\t8b 80 f8 42 00 00    \tmov    0x42f8(%rax),%eax\n    27ee:\t8d 50 01             \tlea    0x1(%rax),%edx\n    27f1:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    27f5:\t89 90 f8 42 00 00    \tmov    %edx,0x42f8(%rax)\n    27fb:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    27ff:\t8b 80 54 43 00 00    \tmov    0x4354(%rax),%eax\n    2805:\t8d 50 01             \tlea    0x1(%rax),%edx\n    2808:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    280c:\t89 90 54 43 00 00    \tmov    %edx,0x4354(%rax)\n    2812:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2816:\t8b 80 44 43 00 00    \tmov    0x4344(%rax),%eax\n    281c:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    281f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2823:\t8b 80 44 43 00 00    \tmov    0x4344(%rax),%eax\n    2829:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    282d:\t01 c2                \tadd    %eax,%edx\n    282f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2833:\t89 90 44 43 00 00    \tmov    %edx,0x4344(%rax)\n    2839:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    283d:\t8b 80 44 43 00 00    \tmov    0x4344(%rax),%eax\n    2843:\t39 45 ac             \tcmp    %eax,-0x54(%rbp)\n    2846:\t76 17                \tjbe    285f <e1000_receive+0x3f7>\n    2848:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    284c:\t8b 80 48 43 00 00    \tmov    0x4348(%rax),%eax\n    2852:\t8d 50 01             \tlea    0x1(%rax),%edx\n    2855:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2859:\t89 90 48 43 00 00    \tmov    %edx,0x4348(%rax)\n    285f:\tc7 45 ac 80 00 00 00 \tmovl   $0x80,-0x54(%rbp)\n    2866:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    286a:\t8b 80 9c 2a 00 00    \tmov    0x2a9c(%rax),%eax\n    2870:\t89 45 b0             \tmov    %eax,-0x50(%rbp)\n    2873:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2877:\t8b 80 94 2a 00 00    \tmov    0x2a94(%rax),%eax\n    287d:\t39 45 b0             \tcmp    %eax,-0x50(%rbp)\n    2880:\t73 10                \tjae    2892 <e1000_receive+0x42a>\n    2882:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2886:\t8b 80 8c 2a 00 00    \tmov    0x2a8c(%rax),%eax\n    288c:\tc1 e8 04             \tshr    $0x4,%eax\n    288f:\t01 45 b0             \tadd    %eax,-0x50(%rbp)\n    2892:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2896:\t8b 80 94 2a 00 00    \tmov    0x2a94(%rax),%eax\n    289c:\t8b 55 b0             \tmov    -0x50(%rbp),%edx\n    289f:\t29 c2                \tsub    %eax,%edx\n    28a1:\t89 d0                \tmov    %edx,%eax\n    28a3:\t89 c0                \tmov    %eax,%eax\n    28a5:\t48 c1 e0 04          \tshl    $0x4,%rax\n    28a9:\t48 89 c6             \tmov    %rax,%rsi\n    28ac:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    28b0:\t8b 90 8c 2a 00 00    \tmov    0x2a8c(%rax),%edx\n    28b6:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    28ba:\t8b 80 48 03 02 00    \tmov    0x20348(%rax),%eax\n    28c0:\t89 c1                \tmov    %eax,%ecx\n    28c2:\td3 ea                \tshr    %cl,%edx\n    28c4:\t89 d0                \tmov    %edx,%eax\n    28c6:\t89 c0                \tmov    %eax,%eax\n    28c8:\t48 39 c6             \tcmp    %rax,%rsi\n    28cb:\t77 04                \tja     28d1 <e1000_receive+0x469>\n    28cd:\t83 4d ac 10          \torl    $0x10,-0x54(%rbp)\n    28d1:\t8b 55 ac             \tmov    -0x54(%rbp),%edx\n    28d4:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    28d8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    28dd:\t48 89 c7             \tmov    %rax,%rdi\n    28e0:\te8 eb de ff ff       \tcallq  7d0 <set_ics>\n    28e5:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    28e9:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    28ed:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n    28f4:\t00 00 \n    28f6:\t74 05                \tje     28fd <e1000_receive+0x495>\n    28f8:\te8 00 00 00 00       \tcallq  28fd <e1000_receive+0x495>\n    28fd:\t48 83 c4 70          \tadd    $0x70,%rsp\n    2901:\t5b                   \tpop    %rbx\n    2902:\t41 5c                \tpop    %r12\n    2904:\t5d                   \tpop    %rbp\n    2905:\tc3                   \tretq   ", "code_s": "__int64 __fastcall e1000_receive(__int64 a1, __int16 *a2, unsigned __int64 a3) {\n  __int64 result;\n  __int16 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  char v8;\n  unsigned __int8 v9;\n  __int16 v10;\n  unsigned int v11;\n  unsigned int v12;\n  unsigned int v13;\n  unsigned int v14;\n  _DWORD *v15;\n  __int64 v16;\n  __int64 <span class=\"supfact\">v17</span>;\n  __int16 v18;\n  char v19;\n  __int16 v20;\n  unsigned __int64 v21;\n  v6 = a3;\n  v21 = __readfsqword(Number);\n  v15 = *(_DWORD **)(a1 + Number);\n  v10 = Number;\n  v8 = Number;\n  v9 = Number;\n  if ((v15[Number] & Number) == Number)\n    return Number;\n  if (a3 <= *(unsigned int *)((char *)&dword_20344 + (_QWORD)v15)) {\n    if ((unsigned int)receive_filter((__int64)v15, (unsigned __int8 *)a2)) {\n      if (vlan_enabled((__int64)v15) &&\n          is_vlan_packet((__int64)v15, (__int64)a2)) {\n        v4 = be16_to_cpup(a2 + Number);\n        v10 = cpu_to_le16(v4);\n        memmove(a2 + Number, a2, Number);\n        v8 = Number;\n        v9 = Number;\n        v6 -= Number L;\n      }\n      v14 = v15[Number];\n      v7 = v6 + Number;\n      do {\n        if (v15[Number] == v15[Number] &&\n            *(int *)((char *)&dword_2034C + (_QWORD)v15))\n          goto LABEL_15;\n        v16 = (unsigned int)v15[Number] +\n              ((unsigned __int64)(unsigned int)v15[Number] << Number) +\n              Number L * (unsigned int)v15[Number];\n        cpu_physical_memory_read(v16, (__int64)&<span class=\"supfact\">v17</span>, Number);\n        v20 = v10;\n        v19 |= v8 | Number;\n        if (<span class=\"supfact\">v17</span>) {\n          v5 = le64_to_cpu(<span class=\"supfact\">v17</span>);\n          cpu_physical_memory_write(v5, (__int64)&a2[v9], v7);\n          v18 = cpu_to_le16(v7);\n          v19 |= Number;\n        } else if ((debugflags & Number) != Number) {\n          fwrite(String, Number, Number, stderr);\n        }\n        cpu_physical_memory_write(v16, (__int64)&<span class=\"supfact\">v17</span>, Number);\n        if (Number * (unsigned __int64)(unsigned int)++v15[Number] >=\n            (unsigned int)v15[Number])\n          v15[Number] = Number;\n        *(int *)((char *)&dword_2034C + (_QWORD)v15) = Number;\n        if (v14 == v15[Number]) {\n          if ((debugflags & Number) != Number)\n            fprintf(stderr, String, v14, (unsigned int)v15[Number],\n                    (unsigned int)v15[Number]);\n        LABEL_15:\n          set_ics((__int64)v15, Number L, Number);\n          return Number;\n        }\n      } while (!<span class=\"supfact\">v17</span>);\n      ++v15[Number];\n      ++v15[Number];\n      v11 = v15[Number];\n      v15[Number] = v11 + v7;\n      if (v11 > v15[Number])\n        ++v15[Number];\n      v12 = Number;\n      v13 = v15[Number];\n      if (v13 < v15[Number])\n        v13 += v15[Number] >> Number;\n      if (Number * (unsigned __int64)(v13 - v15[Number]) <=\n          (unsigned int)(v15[Number] >>\n                         *(int *)((char *)&dword_20348 + (_QWORD)v15)))\n        v12 = Number;\n      set_ics((__int64)v15, Number L, v12);\n      result = v7;\n    } else {\n      result = v6;\n    }\n  } else {\n    if ((debugflags & Number) != Number)\n      fprintf(stderr, String, a3,\n              *(unsigned int *)((char *)&dword_20344 + (_QWORD)v15));\n    result = Number;\n  }\n  return result;\n}", "code_t": "ssize_t __cdecl e1000_receive(VLANClientState_0 *nc, const uint8_t *buf,\n                              size_t size) {\n  ssize_t result;\n  uint16_t v4;\n  uint64_t v5;\n  ssize_t sizea;\n  size_t sizeb;\n  uint8_t vlan_status;\n  uint8_t vlan_offset;\n  uint16_t vlan_special;\n  unsigned int na;\n  unsigned int n;\n  unsigned int rdt;\n  uint32_t rdh_start;\n  E1000State *s;\n  unsigned __int64 base;\n  e1000_rx_desc <span class=\"supfact\">desc</span>;\n  unsigned __int64 v18;\n  sizea = size;\n  v18 = __readfsqword(Number);\n  s = *(E1000State **)&nc[Number].link_down;\n  vlan_special = Number;\n  vlan_status = Number;\n  vlan_offset = Number;\n  if ((s->mac_reg[Number] & Number) == Number)\n    return Number;\n  if (size <= s->rxbuf_size) {\n    if (receive_filter(s, buf, size)) {\n      if (vlan_enabled(s) && is_vlan_packet(s, buf)) {\n        v4 = be16_to_cpup((const uint16_t *)buf + Number);\n        vlan_special = cpu_to_le16(v4);\n        memmove((void *)(buf + Number), buf, Number);\n        vlan_status = Number;\n        vlan_offset = Number;\n        sizea -= Number L;\n      }\n      rdh_start = s->mac_reg[Number];\n      sizeb = sizea + Number;\n      do {\n        if (s->mac_reg[Number] == s->mac_reg[Number] && s->check_rxov)\n          goto LABEL_15;\n        base = s->mac_reg[Number] +\n               ((unsigned __int64)s->mac_reg[Number] << Number) +\n               Number L * s->mac_reg[Number];\n        cpu_physical_memory_read(base, (uint8_t *)&<span class=\"supfact\">desc</span>,\n                                 Number);\n        <span class=\"supfact\">desc</span>.special = vlan_special;\n        <span class=\"supfact\">desc</span>.status |= vlan_status | Number;\n        if (<span class=\"supfact\">desc</span>.buffer_addr) {\n          v5 = le64_to_cpu(<span class=\"supfact\">desc</span>.buffer_addr);\n          cpu_physical_memory_write(v5, &buf[vlan_offset], sizeb);\n          <span class=\"supfact\">desc</span>.length = cpu_to_le16(sizeb);\n          <span class=\"supfact\">desc</span>.status |= Number;\n        } else if ((debugflags & Number) != Number) {\n          fwrite(String, Number, Number, stderr);\n        }\n        cpu_physical_memory_write(base, (const uint8_t *)&<span class=\"supfact\">desc</span>,\n                                  Number);\n        if (Number * (unsigned __int64)++s->mac_reg[Number] >=\n            s->mac_reg[Number])\n          s->mac_reg[Number] = Number;\n        s->check_rxov = Number;\n        if (rdh_start == s->mac_reg[Number]) {\n          if ((debugflags & Number) != Number)\n            fprintf(stderr, String, rdh_start, s->mac_reg[Number],\n                    s->mac_reg[Number]);\n        LABEL_15:\n          set_ics(s, Number, Number);\n          return Number;\n        }\n      } while (!<span class=\"supfact\">desc</span>.buffer_addr);\n      ++s->mac_reg[Number];\n      ++s->mac_reg[Number];\n      na = s->mac_reg[Number];\n      s->mac_reg[Number] = na + sizeb;\n      if (na > s->mac_reg[Number])\n        ++s->mac_reg[Number];\n      n = Number;\n      rdt = s->mac_reg[Number];\n      if (rdt < s->mac_reg[Number])\n        rdt += s->mac_reg[Number] >> Number;\n      if (Number * (unsigned __int64)(rdt - s->mac_reg[Number]) <=\n          s->mac_reg[Number] >> s->rxbuf_min_shift)\n        n = Number;\n      set_ics(s, Number, n);\n      result = sizeb;\n    } else {\n      result = sizea;\n    }\n  } else {\n    if ((debugflags & Number) != Number)\n      fprintf(stderr, String, size, s->rxbuf_size);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v17", "type": "struct e1000_rx_desc { uint64_t buffer_addr; uint16_t length; uint16_t csum; uint8_t status; uint8_t errors; uint16_t special; }", "pred_name": "desc", "ref_name": "desc", "ref_type": "struct e1000_rx_desc { uint64_t buffer_addr; uint16_t length; uint16_t csum; uint8_t status; uint8_t errors; uint16_t special; }"}], "body_in_train": true}, {"repo_owner": "KrisChaplin", "repo_name": "LRT2x4_v1.0.2.06_GPL_source", "path": "KrisChaplin/LRT2x4_v1.0.2.06_GPL_source/e19825684aa52956d471a179462fe22bd8c6bd61cc410f6a423ec06b45e7a610", "path_in_repo": "KrisChaplin/LRT2x4_v1.0.2.06_GPL_source/linux/embedded_rootfs/pkg_addon/zebra/ospfd/ospfd.o", "objdump": "0000000000001fdd <ospf_area_stub_set>:\n    1fdd:\t55                   \tpush   %rbp\n    1fde:\t48 89 e5             \tmov    %rsp,%rbp\n    1fe1:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1fe5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1fe9:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    1fec:\tc7 45 fc 02 00 00 00 \tmovl   $0x2,-0x4(%rbp)\n    1ff3:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    1ff6:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    1ff9:\t89 d6                \tmov    %edx,%esi\n    1ffb:\t89 c7                \tmov    %eax,%edi\n    1ffd:\te8 00 00 00 00       \tcallq  2002 <ospf_area_stub_set+0x25>\n    2002:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2006:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    200a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    200e:\t48 89 d6             \tmov    %rdx,%rsi\n    2011:\t48 89 c7             \tmov    %rax,%rdi\n    2014:\te8 00 00 00 00       \tcallq  2019 <ospf_area_stub_set+0x3c>\n    2019:\t85 c0                \ttest   %eax,%eax\n    201b:\t74 07                \tje     2024 <ospf_area_stub_set+0x47>\n    201d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2022:\teb 22                \tjmp    2046 <ospf_area_stub_set+0x69>\n    2024:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2028:\t8b 40 20             \tmov    0x20(%rax),%eax\n    202b:\t83 f8 01             \tcmp    $0x1,%eax\n    202e:\t74 11                \tje     2041 <ospf_area_stub_set+0x64>\n    2030:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2034:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2039:\t48 89 c7             \tmov    %rax,%rdi\n    203c:\te8 00 00 00 00       \tcallq  2041 <ospf_area_stub_set+0x64>\n    2041:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    2046:\tc9                   \tleaveq \n    2047:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ospf_area_stub_set(__int64 a1,\n                                      unsigned int <span class=\"supfact\">a2</span>) {\n  __int64 v3;\n  v3 = ospf_area_get(<span class=\"supfact\">a2</span>, Number);\n  if ((unsigned int)ospf_area_vlink_count(a1, v3))\n    return Number L;\n  if (*(_DWORD *)(v3 + Number) != Number)\n    ospf_area_type_set(v3, Number);\n  return Number L;\n}", "code_t": "int __cdecl ospf_area_stub_set(ospf *ospf, in_addr <span class=\"supfact\">area_id</span>) {\n  ospf_area *area;\n  area = ospf_area_get(<span class=\"supfact\">area_id</span>, Number);\n  if (ospf_area_vlink_count(ospf, area))\n    return Number;\n  if (area->external_routing != Number)\n    ospf_area_type_set(area, Number);\n  return Number;\n}", "var": [{"name": "a2", "type": "int", "pred_name": "type", "ref_name": "area_id", "ref_type": "struct in_addr { in_addr_t s_addr; }"}], "body_in_train": false}, {"repo_owner": "raphielscape", "repo_name": "linux-scape-workstation", "path": "raphielscape/linux-scape-workstation/fd283fd4748736deff72d3d77776231c479e8bc86d17cf90970c7c01bacb3f35", "path_in_repo": "raphielscape/linux-scape-workstation/tools/lib/traceevent/libtraceevent.so.1.1.0", "objdump": "0000000000014acd <find_event>:\n   14acd:\t55                   \tpush   %rbp\n   14ace:\t48 89 e5             \tmov    %rsp,%rbp\n   14ad1:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n   14ad8:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n   14adf:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n   14ae6:\t48 89 95 38 ff ff ff \tmov    %rdx,-0xc8(%rbp)\n   14aed:\t48 89 8d 30 ff ff ff \tmov    %rcx,-0xd0(%rbp)\n   14af4:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n   14afb:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n   14b02:\t48 83 bd 30 ff ff ff \tcmpq   $0x0,-0xd0(%rbp)\n   14b09:\t00 \n   14b0a:\t75 19                \tjne    14b25 <find_event+0x58>\n   14b0c:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n   14b13:\t48 89 85 30 ff ff ff \tmov    %rax,-0xd0(%rbp)\n   14b1a:\t48 c7 85 38 ff ff ff \tmovq   $0x0,-0xc8(%rbp)\n   14b21:\t00 00 00 00 \n   14b25:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n   14b2c:\t48 8d 85 58 ff ff ff \tlea    -0xa8(%rbp),%rax\n   14b33:\t48 8d 35 3a 6f 00 00 \tlea    0x6f3a(%rip),%rsi        # 1ba74 <__func__.6185+0x1dc>\n   14b3a:\t48 89 c7             \tmov    %rax,%rdi\n   14b3d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   14b42:\te8 a9 f9 fe ff       \tcallq  44f0 <asprintf@plt>\n   14b47:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n   14b4a:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n   14b4e:\t79 0a                \tjns    14b5a <find_event+0x8d>\n   14b50:\tb8 61 79 fe ff       \tmov    $0xfffe7961,%eax\n   14b55:\te9 ba 01 00 00       \tjmpq   14d14 <find_event+0x247>\n   14b5a:\t48 8b 8d 58 ff ff ff \tmov    -0xa8(%rbp),%rcx\n   14b61:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   14b65:\tba 0a 00 00 00       \tmov    $0xa,%edx\n   14b6a:\t48 89 ce             \tmov    %rcx,%rsi\n   14b6d:\t48 89 c7             \tmov    %rax,%rdi\n   14b70:\te8 4b f7 fe ff       \tcallq  42c0 <regcomp@plt>\n   14b75:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n   14b78:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n   14b7f:\t48 89 c7             \tmov    %rax,%rdi\n   14b82:\te8 e9 f4 fe ff       \tcallq  4070 <free@plt>\n   14b87:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n   14b8b:\t74 0a                \tje     14b97 <find_event+0xca>\n   14b8d:\tb8 6a 79 fe ff       \tmov    $0xfffe796a,%eax\n   14b92:\te9 7d 01 00 00       \tjmpq   14d14 <find_event+0x247>\n   14b97:\t48 83 bd 38 ff ff ff \tcmpq   $0x0,-0xc8(%rbp)\n   14b9e:\t00 \n   14b9f:\t0f 84 8d 00 00 00    \tje     14c32 <find_event+0x165>\n   14ba5:\t48 8b 95 38 ff ff ff \tmov    -0xc8(%rbp),%rdx\n   14bac:\t48 8d 85 58 ff ff ff \tlea    -0xa8(%rbp),%rax\n   14bb3:\t48 8d 35 ba 6e 00 00 \tlea    0x6eba(%rip),%rsi        # 1ba74 <__func__.6185+0x1dc>\n   14bba:\t48 89 c7             \tmov    %rax,%rdi\n   14bbd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   14bc2:\te8 29 f9 fe ff       \tcallq  44f0 <asprintf@plt>\n   14bc7:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n   14bca:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n   14bce:\t79 16                \tjns    14be6 <find_event+0x119>\n   14bd0:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   14bd4:\t48 89 c7             \tmov    %rax,%rdi\n   14bd7:\te8 c4 f5 fe ff       \tcallq  41a0 <regfree@plt>\n   14bdc:\tb8 61 79 fe ff       \tmov    $0xfffe7961,%eax\n   14be1:\te9 2e 01 00 00       \tjmpq   14d14 <find_event+0x247>\n   14be6:\t48 8b 8d 58 ff ff ff \tmov    -0xa8(%rbp),%rcx\n   14bed:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n   14bf4:\tba 0a 00 00 00       \tmov    $0xa,%edx\n   14bf9:\t48 89 ce             \tmov    %rcx,%rsi\n   14bfc:\t48 89 c7             \tmov    %rax,%rdi\n   14bff:\te8 bc f6 fe ff       \tcallq  42c0 <regcomp@plt>\n   14c04:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n   14c07:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n   14c0e:\t48 89 c7             \tmov    %rax,%rdi\n   14c11:\te8 5a f4 fe ff       \tcallq  4070 <free@plt>\n   14c16:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n   14c1a:\t74 16                \tje     14c32 <find_event+0x165>\n   14c1c:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   14c20:\t48 89 c7             \tmov    %rax,%rdi\n   14c23:\te8 78 f5 fe ff       \tcallq  41a0 <regfree@plt>\n   14c28:\tb8 6a 79 fe ff       \tmov    $0xfffe796a,%eax\n   14c2d:\te9 e2 00 00 00       \tjmpq   14d14 <find_event+0x247>\n   14c32:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n   14c39:\teb 7f                \tjmp    14cba <find_event+0x1ed>\n   14c3b:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n   14c42:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n   14c49:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n   14c4c:\t48 63 d2             \tmovslq %edx,%rdx\n   14c4f:\t48 c1 e2 03          \tshl    $0x3,%rdx\n   14c53:\t48 01 d0             \tadd    %rdx,%rax\n   14c56:\t48 8b 00             \tmov    (%rax),%rax\n   14c59:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   14c5d:\t48 83 bd 38 ff ff ff \tcmpq   $0x0,-0xc8(%rbp)\n   14c64:\t00 \n   14c65:\t74 09                \tje     14c70 <find_event+0x1a3>\n   14c67:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n   14c6e:\teb 05                \tjmp    14c75 <find_event+0x1a8>\n   14c70:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   14c75:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n   14c79:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n   14c7d:\t48 89 c6             \tmov    %rax,%rsi\n   14c80:\t48 89 cf             \tmov    %rcx,%rdi\n   14c83:\te8 6e fd ff ff       \tcallq  149f6 <event_match>\n   14c88:\t85 c0                \ttest   %eax,%eax\n   14c8a:\t74 2a                \tje     14cb6 <find_event+0x1e9>\n   14c8c:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n   14c93:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   14c97:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n   14c9e:\t48 89 d6             \tmov    %rdx,%rsi\n   14ca1:\t48 89 c7             \tmov    %rax,%rdi\n   14ca4:\te8 f5 fc ff ff       \tcallq  1499e <add_event>\n   14ca9:\t85 c0                \ttest   %eax,%eax\n   14cab:\t79 09                \tjns    14cb6 <find_event+0x1e9>\n   14cad:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n   14cb4:\teb 1a                \tjmp    14cd0 <find_event+0x203>\n   14cb6:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n   14cba:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n   14cc1:\t8b 80 90 00 00 00    \tmov    0x90(%rax),%eax\n   14cc7:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n   14cca:\t0f 8c 6b ff ff ff    \tjl     14c3b <find_event+0x16e>\n   14cd0:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   14cd4:\t48 89 c7             \tmov    %rax,%rdi\n   14cd7:\te8 c4 f4 fe ff       \tcallq  41a0 <regfree@plt>\n   14cdc:\t48 83 bd 38 ff ff ff \tcmpq   $0x0,-0xc8(%rbp)\n   14ce3:\t00 \n   14ce4:\t74 0f                \tje     14cf5 <find_event+0x228>\n   14ce6:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n   14ced:\t48 89 c7             \tmov    %rax,%rdi\n   14cf0:\te8 ab f4 fe ff       \tcallq  41a0 <regfree@plt>\n   14cf5:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n   14cf9:\t75 07                \tjne    14d02 <find_event+0x235>\n   14cfb:\tb8 6b 79 fe ff       \tmov    $0xfffe796b,%eax\n   14d00:\teb 12                \tjmp    14d14 <find_event+0x247>\n   14d02:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n   14d06:\t74 07                \tje     14d0f <find_event+0x242>\n   14d08:\tb8 61 79 fe ff       \tmov    $0xfffe7961,%eax\n   14d0d:\teb 05                \tjmp    14d14 <find_event+0x247>\n   14d0f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   14d14:\tc9                   \tleaveq \n   14d15:\tc3                   \tretq   ", "code_s": "__int64 __fastcall find_event(__int64 a1, _QWORD *a2, const char *a3,\n                              const char *a4) {\n  __int64 result;\n  regex_t *v5;\n  const char *v6;\n  const char *v7;\n  char *ptr;\n  regex_t <span class=\"supfact\">v9</span>;\n  regex_t <span class=\"supfact\">preg</span>;\n  __int64 v11;\n  int v12;\n  int i;\n  int v14;\n  int v15;\n  v7 = a3;\n  v6 = a4;\n  v15 = Number;\n  v14 = Number;\n  if (!a4) {\n    v6 = a3;\n    v7 = Number L;\n  }\n  v12 = asprintf(&ptr, String, v6);\n  if (v12 < Number)\n    return Number L;\n  v12 = regcomp(&<span class=\"supfact\">preg</span>, ptr, Number);\n  free(ptr);\n  if (v12)\n    return Number L;\n  if (!v7)\n    goto LABEL_12;\n  v12 = asprintf(&ptr, String, v7);\n  if (v12 < Number) {\n    regfree(&<span class=\"supfact\">preg</span>);\n    return Number L;\n  }\n  v12 = regcomp(&<span class=\"supfact\">v9</span>, ptr, Number);\n  free(ptr);\n  if (v12) {\n    regfree(&<span class=\"supfact\">preg</span>);\n    result = Number L;\n  } else {\n  LABEL_12:\n    for (i = Number; i < *(_DWORD *)(a1 + Number); ++i) {\n      v11 = *(_QWORD *)(Number L * i + *(_QWORD *)(a1 + Number));\n      if (v7)\n        v5 = &<span class=\"supfact\">v9</span>;\n      else\n        v5 = Number L;\n      if (event_match(v11, v5, &<span class=\"supfact\">preg</span>)) {\n        v15 = Number;\n        if ((int)add_event_0(a2, v11) < Number) {\n          v14 = Number;\n          break;\n        }\n      }\n    }\n    regfree(&<span class=\"supfact\">preg</span>);\n    if (v7)\n      regfree(&<span class=\"supfact\">v9</span>);\n    if (v15) {\n      if (v14)\n        result = Number L;\n      else\n        result = Number L;\n    } else {\n      result = Number L;\n    }\n  }\n  return result;\n}", "code_t": "tep_errno __cdecl find_event(tep_handle *tep, event_list **events,\n                             char *sys_name, char *event_name) {\n  tep_errno result;\n  regex_t *v5;\n  const char *event_namea;\n  const char *sys_namea;\n  char *reg;\n  regex_t <span class=\"supfact\">sreg</span>;\n  regex_t <span class=\"supfact\">ereg</span>;\n  tep_event *event;\n  int ret;\n  int i;\n  int fail;\n  int match;\n  sys_namea = sys_name;\n  event_namea = event_name;\n  match = Number;\n  fail = Number;\n  if (!event_name) {\n    event_namea = sys_name;\n    sys_namea = Number L;\n  }\n  ret = asprintf(&reg, String, event_namea);\n  if (ret < Number)\n    return Number;\n  ret = regcomp(&<span class=\"supfact\">ereg</span>, reg, Number);\n  free(reg);\n  if (ret)\n    return Number;\n  if (!sys_namea)\n    goto LABEL_12;\n  ret = asprintf(&reg, String, sys_namea);\n  if (ret < Number) {\n    regfree(&<span class=\"supfact\">ereg</span>);\n    return Number;\n  }\n  ret = regcomp(&<span class=\"supfact\">sreg</span>, reg, Number);\n  free(reg);\n  if (ret) {\n    regfree(&<span class=\"supfact\">ereg</span>);\n    result = TEP_ERRNO__INVALID_EVENT_NAME;\n  } else {\n  LABEL_12:\n    for (i = Number; i < tep->nr_events; ++i) {\n      event = tep->events[i];\n      if (sys_namea)\n        v5 = &<span class=\"supfact\">sreg</span>;\n      else\n        v5 = Number L;\n      if (event_match(event, v5, &<span class=\"supfact\">ereg</span>)) {\n        match = Number;\n        if (add_event_0(events, event) < Number) {\n          fail = Number;\n          break;\n        }\n      }\n    }\n    regfree(&<span class=\"supfact\">ereg</span>);\n    if (sys_namea)\n      regfree(&<span class=\"supfact\">sreg</span>);\n    if (match) {\n      if (fail)\n        result = TEP_ERRNO__MEM_ALLOC_FAILED;\n      else\n        result = TEP_ERRNO__SUCCESS;\n    } else {\n      result = TEP_ERRNO__EVENT_NOT_FOUND;\n    }\n  }\n  return result;\n}", "var": [{"name": "v9", "type": "struct regex_t { re_dfa_t * buffer; __re_long_size_t allocated; __re_long_size_t used; reg_syntax_t syntax; char * fastmap; unsigned __int8 * translate; size_t re_nsub; unsigned __int32 : 1 can_be_null; unsigned __int32 : 2 regs_allocated; unsigned __int32 : 1 fastmap_accurate; unsigned __int32 : 1 no_sub; unsigned __int32 : 1 not_bol; unsigned __int32 : 1 not_eol; unsigned __int32 : 1 newline_anchor; PADDING (7); }", "pred_name": "sreg", "ref_name": "sreg", "ref_type": "struct regex_t { re_dfa_t * buffer; __re_long_size_t allocated; __re_long_size_t used; reg_syntax_t syntax; char * fastmap; unsigned __int8 * translate; size_t re_nsub; unsigned __int32 : 1 can_be_null; unsigned __int32 : 2 regs_allocated; unsigned __int32 : 1 fastmap_accurate; unsigned __int32 : 1 no_sub; unsigned __int32 : 1 not_bol; unsigned __int32 : 1 not_eol; unsigned __int32 : 1 newline_anchor; PADDING (7); }"}, {"name": "preg", "type": "struct regex_t { re_dfa_t * buffer; __re_long_size_t allocated; __re_long_size_t used; reg_syntax_t syntax; char * fastmap; unsigned __int8 * translate; size_t re_nsub; unsigned __int32 : 1 can_be_null; unsigned __int32 : 2 regs_allocated; unsigned __int32 : 1 fastmap_accurate; unsigned __int32 : 1 no_sub; unsigned __int32 : 1 not_bol; unsigned __int32 : 1 not_eol; unsigned __int32 : 1 newline_anchor; PADDING (7); }", "pred_name": "ereg", "ref_name": "ereg", "ref_type": "struct regex_t { re_dfa_t * buffer; __re_long_size_t allocated; __re_long_size_t used; reg_syntax_t syntax; char * fastmap; unsigned __int8 * translate; size_t re_nsub; unsigned __int32 : 1 can_be_null; unsigned __int32 : 2 regs_allocated; unsigned __int32 : 1 fastmap_accurate; unsigned __int32 : 1 no_sub; unsigned __int32 : 1 not_bol; unsigned __int32 : 1 not_eol; unsigned __int32 : 1 newline_anchor; PADDING (7); }"}], "body_in_train": true}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/00290a39657ef0ec055523773fa5e91729efad581457e453be1aec8a4a6025d2", "path_in_repo": "sslab-gatech/janus/lkl/tools/perf/pmu-events/jevents", "objdump": "000000000040251a <lookup_msr>:\n  40251a:\t55                   \tpush   %rbp\n  40251b:\t48 89 e5             \tmov    %rsp,%rbp\n  40251e:\t53                   \tpush   %rbx\n  40251f:\t48 83 ec 38          \tsub    $0x38,%rsp\n  402523:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  402527:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  40252b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40252f:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  402533:\t48 8b 00             \tmov    (%rax),%rax\n  402536:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  40253a:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  40253e:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  402542:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402546:\t48 89 d6             \tmov    %rdx,%rsi\n  402549:\t48 89 c7             \tmov    %rax,%rdi\n  40254c:\te8 ca fe ff ff       \tcallq  40241b <cut_comma>\n  402551:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  402558:\teb 41                \tjmp    40259b <lookup_msr+0x81>\n  40255a:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40255d:\t48 98                \tcltq   \n  40255f:\t48 c1 e0 04          \tshl    $0x4,%rax\n  402563:\t48 05 a0 91 40 00    \tadd    $0x4091a0,%rax\n  402569:\t48 8b 10             \tmov    (%rax),%rdx\n  40256c:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  402570:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402574:\t48 89 ce             \tmov    %rcx,%rsi\n  402577:\t48 89 c7             \tmov    %rax,%rdi\n  40257a:\te8 17 f2 ff ff       \tcallq  401796 <json_streq>\n  40257f:\t85 c0                \ttest   %eax,%eax\n  402581:\t74 14                \tje     402597 <lookup_msr+0x7d>\n  402583:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  402586:\t48 98                \tcltq   \n  402588:\t48 c1 e0 04          \tshl    $0x4,%rax\n  40258c:\t48 05 a0 91 40 00    \tadd    $0x4091a0,%rax\n  402592:\te9 81 00 00 00       \tjmpq   402618 <lookup_msr+0xfe>\n  402597:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  40259b:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40259e:\t48 98                \tcltq   \n  4025a0:\t48 c1 e0 04          \tshl    $0x4,%rax\n  4025a4:\t48 05 a0 91 40 00    \tadd    $0x4091a0,%rax\n  4025aa:\t48 8b 00             \tmov    (%rax),%rax\n  4025ad:\t48 85 c0             \ttest   %rax,%rax\n  4025b0:\t75 a8                \tjne    40255a <lookup_msr+0x40>\n  4025b2:\t0f b6 05 d7 6d 00 00 \tmovzbl 0x6dd7(%rip),%eax        # 409390 <warned.5030>\n  4025b9:\t83 f0 01             \txor    $0x1,%eax\n  4025bc:\t84 c0                \ttest   %al,%al\n  4025be:\t74 53                \tje     402613 <lookup_msr+0xf9>\n  4025c0:\tc6 05 c9 6d 00 00 01 \tmovb   $0x1,0x6dc9(%rip)        # 409390 <warned.5030>\n  4025c7:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  4025cb:\t8b 40 04             \tmov    0x4(%rax),%eax\n  4025ce:\t48 63 d0             \tmovslq %eax,%rdx\n  4025d1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4025d5:\t48 8d 1c 02          \tlea    (%rdx,%rax,1),%rbx\n  4025d9:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  4025dd:\t48 89 c7             \tmov    %rax,%rdi\n  4025e0:\te8 95 f1 ff ff       \tcallq  40177a <json_len>\n  4025e5:\t89 c1                \tmov    %eax,%ecx\n  4025e7:\t48 8b 15 aa 6d 00 00 \tmov    0x6daa(%rip),%rdx        # 409398 <prog>\n  4025ee:\t8b 05 ac 6d 00 00    \tmov    0x6dac(%rip),%eax        # 4093a0 <verbose>\n  4025f4:\t49 89 d9             \tmov    %rbx,%r9\n  4025f7:\t41 89 c8             \tmov    %ecx,%r8d\n  4025fa:\t48 89 d1             \tmov    %rdx,%rcx\n  4025fd:\tba 60 64 40 00       \tmov    $0x406460,%edx\n  402602:\t89 c6                \tmov    %eax,%esi\n  402604:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  402609:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40260e:\te8 80 fa ff ff       \tcallq  402093 <eprintf>\n  402613:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402618:\t48 83 c4 38          \tadd    $0x38,%rsp\n  40261c:\t5b                   \tpop    %rbx\n  40261d:\t5d                   \tpop    %rbp\n  40261e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall lookup_msr(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 v4;\n  unsigned int v5;\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  int i;\n  v2 = *(_QWORD *)(a2 + Number);\n  <span class=\"supfact\">v6</span>[Number] = *(_QWORD *)a2;\n  <span class=\"supfact\">v6</span>[Number] = v2;\n  cut_comma(a1, (__int64)<span class=\"supfact\">v6</span>);\n  for (i = Number; msrmap[Number * i]; ++i) {\n    if (json_streq(a1, (__int64)<span class=\"supfact\">v6</span>, msrmap[Number * i]))\n      return Number L * i + Number;\n  }\n  if (warned_5030 != Number) {\n    warned_5030 = Number;\n    v4 = *(int *)(a2 + Number) + a1;\n    v5 = json_len(a2);\n    eprintf(Number, verbose, String, prog, v5, v4);\n  }\n  return Number L;\n}", "code_t": "msrmap *__cdecl lookup_msr(char *map, jsmntok_t *val) {\n  __int64 v2;\n  const char *v4;\n  int v5;\n  jsmntok_t <span class=\"supfact\">newval</span>;\n  int i;\n  v2 = *(_QWORD *)&val->end;\n  *(_QWORD *)&<span class=\"supfact\">newval</span>.type = *(_QWORD *)&val->type;\n  *(_QWORD *)&<span class=\"supfact\">newval</span>.end = v2;\n  cut_comma(map, &<span class=\"supfact\">newval</span>);\n  for (i = Number; msrmap_0[i].num; ++i) {\n    if (json_streq(map, &<span class=\"supfact\">newval</span>, msrmap_0[i].num))\n      return (msrmap *)(Number L * i + Number);\n  }\n  if (!warned_5030) {\n    warned_5030 = Number;\n    v4 = &map[val->start];\n    v5 = json_len(val);\n    eprintf(Number, verbose, String, prog, v5, v4);\n  }\n  return Number L;\n}", "var": [{"name": "v6", "type": "struct jsmntok_t { jsmntype_t type; int start; int end; int size; }", "pred_name": "newval", "ref_name": "newval", "ref_type": "struct jsmntok_t { jsmntype_t type; int start; int end; int size; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/4cf2cb65f7fc90c39ef89366e298e5a15abac317d28cbc59f0ce26b66aab6da0", "path_in_repo": "XanClic/qemu//migration/savevm.o", "objdump": "00000000000004e9 <_nocheck__trace_qemu_loadvm_state_section_startfull>:\n     4e9:\t55                   \tpush   %rbp\n     4ea:\t48 89 e5             \tmov    %rsp,%rbp\n     4ed:\t41 54                \tpush   %r12\n     4ef:\t53                   \tpush   %rbx\n     4f0:\t48 83 ec 40          \tsub    $0x40,%rsp\n     4f4:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n     4f7:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     4fb:\t89 55 c8             \tmov    %edx,-0x38(%rbp)\n     4fe:\t89 4d bc             \tmov    %ecx,-0x44(%rbp)\n     501:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     508:\t00 00 \n     50a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     50e:\t31 c0                \txor    %eax,%eax\n     510:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 516 <_nocheck__trace_qemu_loadvm_state_section_startfull+0x2d>\n     516:\t85 c0                \ttest   %eax,%eax\n     518:\t0f 95 c0             \tsetne  %al\n     51b:\t0f b6 c0             \tmovzbl %al,%eax\n     51e:\t48 85 c0             \ttest   %rax,%rax\n     521:\t74 70                \tje     593 <_nocheck__trace_qemu_loadvm_state_section_startfull+0xaa>\n     523:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 52a <_nocheck__trace_qemu_loadvm_state_section_startfull+0x41>\n     52a:\t66 85 c0             \ttest   %ax,%ax\n     52d:\t74 64                \tje     593 <_nocheck__trace_qemu_loadvm_state_section_startfull+0xaa>\n     52f:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     534:\te8 8d fc ff ff       \tcallq  1c6 <qemu_loglevel_mask>\n     539:\t84 c0                \ttest   %al,%al\n     53b:\t74 56                \tje     593 <_nocheck__trace_qemu_loadvm_state_section_startfull+0xaa>\n     53d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     541:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     546:\t48 89 c7             \tmov    %rax,%rdi\n     549:\te8 00 00 00 00       \tcallq  54e <_nocheck__trace_qemu_loadvm_state_section_startfull+0x65>\n     54e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     552:\t49 89 c4             \tmov    %rax,%r12\n     555:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     559:\t48 89 c3             \tmov    %rax,%rbx\n     55c:\te8 00 00 00 00       \tcallq  561 <_nocheck__trace_qemu_loadvm_state_section_startfull+0x78>\n     561:\t89 c6                \tmov    %eax,%esi\n     563:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     567:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     56a:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     56d:\t50                   \tpush   %rax\n     56e:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     571:\t50                   \tpush   %rax\n     572:\t49 89 c9             \tmov    %rcx,%r9\n     575:\t41 89 d0             \tmov    %edx,%r8d\n     578:\t4c 89 e1             \tmov    %r12,%rcx\n     57b:\t48 89 da             \tmov    %rbx,%rdx\n     57e:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 585 <_nocheck__trace_qemu_loadvm_state_section_startfull+0x9c>\n     585:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     58a:\te8 00 00 00 00       \tcallq  58f <_nocheck__trace_qemu_loadvm_state_section_startfull+0xa6>\n     58f:\t48 83 c4 10          \tadd    $0x10,%rsp\n     593:\t90                   \tnop\n     594:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     598:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     59f:\t00 00 \n     5a1:\t74 05                \tje     5a8 <_nocheck__trace_qemu_loadvm_state_section_startfull+0xbf>\n     5a3:\te8 00 00 00 00       \tcallq  5a8 <_nocheck__trace_qemu_loadvm_state_section_startfull+0xbf>\n     5a8:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     5ac:\t5b                   \tpop    %rbx\n     5ad:\t41 5c                \tpop    %r12\n     5af:\t5d                   \tpop    %rbp\n     5b0:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_qemu_loadvm_state_section_startfull(\n    unsigned int a1, const char *a2, unsigned int a3, unsigned int a4) {\n  __suseconds_t v4;\n  __time_t v5;\n  unsigned int v6;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v11;\n  v11 = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v4 = <span class=\"supfact\">tv</span>.tv_usec;\n    v5 = <span class=\"supfact\">tv</span>.tv_sec;\n    v6 = qemu_get_thread_id();\n    qemu_log(String, v6, v5, v4, a1, a2, a3, a4);\n  }\n  return __readfsqword(Number) ^ v11;\n}", "code_t": "void __cdecl nocheck__trace_qemu_loadvm_state_section_startfull(\n    uint32_t section_id, const char *idstr, uint32_t instance_id,\n    uint32_t version_id) {\n  __suseconds_t v4;\n  __time_t v5;\n  unsigned int v6;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v4 = <span class=\"supfact\">_now</span>.tv_usec;\n    v5 = <span class=\"supfact\">_now</span>.tv_sec;\n    v6 = qemu_get_thread_id();\n    qemu_log(String, v6, v5, v4, section_id, idstr, instance_id, version_id);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "_now", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/3355b90a3b5f1aac2fa1eccc8ed0d98fc6b740f894aead5d4a5060608a2509cf", "path_in_repo": "eerimoq/pumbaa/simba/tst/drivers/flash/build/linux/obj/usr/src/repo/simba/src/drivers/ports/linux/socket_device.o", "objdump": "0000000000000000 <handle_uart_device_request>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 40          \tsub    $0x40,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <handle_uart_device_request+0xd>\n   d:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  11:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n  14:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1b <handle_uart_device_request+0x1b>\n  1b:\t48 83 c0 01          \tadd    $0x1,%rax\n  1f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 26 <handle_uart_device_request+0x26>\n  26:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  2d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  31:\t48 83 c0 08          \tadd    $0x8,%rax\n  35:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  39:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  3d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41:\t48 89 d6             \tmov    %rdx,%rsi\n  44:\t48 89 c7             \tmov    %rax,%rdi\n  47:\te8 00 00 00 00       \tcallq  4c <handle_uart_device_request+0x4c>\n  4c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 53 <handle_uart_device_request+0x53>\n  53:\t48 83 c2 01          \tadd    $0x1,%rdx\n  57:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 5e <handle_uart_device_request+0x5e>\n  5e:\t48 85 c0             \ttest   %rax,%rax\n  61:\t75 1a                \tjne    7d <handle_uart_device_request+0x7d>\n  63:\t48 c7 45 d8 ff ff ff \tmovq   $0xffffffffffffffff,-0x28(%rbp)\n  6a:\tff \n  6b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 72 <handle_uart_device_request+0x72>\n  72:\t48 83 c0 01          \tadd    $0x1,%rax\n  76:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 7d <handle_uart_device_request+0x7d>\n  7d:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  82:\te8 00 00 00 00       \tcallq  87 <handle_uart_device_request+0x87>\n  87:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  8a:\tbf 04 00 00 00       \tmov    $0x4,%edi\n  8f:\te8 00 00 00 00       \tcallq  94 <handle_uart_device_request+0x94>\n  94:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  97:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  9b:\t48 85 c0             \ttest   %rax,%rax\n  9e:\t78 1c                \tjs     bc <handle_uart_device_request+0xbc>\n  a0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a7 <handle_uart_device_request+0xa7>\n  a7:\t48 83 c0 01          \tadd    $0x1,%rax\n  ab:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # b2 <handle_uart_device_request+0xb2>\n  b2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  b6:\t48 83 f8 0f          \tcmp    $0xf,%rax\n  ba:\t7e 0c                \tjle    c8 <handle_uart_device_request+0xc8>\n  bc:\tc7 45 ec ed ff ff ff \tmovl   $0xffffffed,-0x14(%rbp)\n  c3:\te9 f6 00 00 00       \tjmpq   1be <handle_uart_device_request+0x1be>\n  c8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cf <handle_uart_device_request+0xcf>\n  cf:\t48 83 c0 01          \tadd    $0x1,%rax\n  d3:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # da <handle_uart_device_request+0xda>\n  da:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  de:\t48 89 d0             \tmov    %rdx,%rax\n  e1:\t48 c1 e0 02          \tshl    $0x2,%rax\n  e5:\t48 01 d0             \tadd    %rdx,%rax\n  e8:\t48 01 c0             \tadd    %rax,%rax\n  eb:\t48 01 d0             \tadd    %rdx,%rax\n  ee:\t48 c1 e0 03          \tshl    $0x3,%rax\n  f2:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n  f8:\t8b 00                \tmov    (%rax),%eax\n  fa:\t85 c0                \ttest   %eax,%eax\n  fc:\t78 1e                \tjs     11c <handle_uart_device_request+0x11c>\n  fe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 105 <handle_uart_device_request+0x105>\n 105:\t48 83 c0 01          \tadd    $0x1,%rax\n 109:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 110 <handle_uart_device_request+0x110>\n 110:\tc7 45 ec 9e ff ff ff \tmovl   $0xffffff9e,-0x14(%rbp)\n 117:\te9 a2 00 00 00       \tjmpq   1be <handle_uart_device_request+0x1be>\n 11c:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 120:\t48 89 d0             \tmov    %rdx,%rax\n 123:\t48 c1 e0 02          \tshl    $0x2,%rax\n 127:\t48 01 d0             \tadd    %rdx,%rax\n 12a:\t48 01 c0             \tadd    %rax,%rax\n 12d:\t48 01 d0             \tadd    %rdx,%rax\n 130:\t48 c1 e0 03          \tshl    $0x3,%rax\n 134:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 13a:\t8b 00                \tmov    (%rax),%eax\n 13c:\t83 f8 fe             \tcmp    $0xfffffffe,%eax\n 13f:\t75 76                \tjne    1b7 <handle_uart_device_request+0x1b7>\n 141:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 148 <handle_uart_device_request+0x148>\n 148:\t48 83 c0 01          \tadd    $0x1,%rax\n 14c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 153 <handle_uart_device_request+0x153>\n 153:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 157:\t48 89 d0             \tmov    %rdx,%rax\n 15a:\t48 c1 e0 02          \tshl    $0x2,%rax\n 15e:\t48 01 d0             \tadd    %rdx,%rax\n 161:\t48 01 c0             \tadd    %rax,%rax\n 164:\t48 01 d0             \tadd    %rdx,%rax\n 167:\t48 c1 e0 03          \tshl    $0x3,%rax\n 16b:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 171:\t48 8b 00             \tmov    (%rax),%rax\n 174:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 179:\t48 89 c7             \tmov    %rax,%rdi\n 17c:\te8 00 00 00 00       \tcallq  181 <handle_uart_device_request+0x181>\n 181:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 188 <handle_uart_device_request+0x188>\n 188:\t48 83 c0 01          \tadd    $0x1,%rax\n 18c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 193 <handle_uart_device_request+0x193>\n 193:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 197:\t48 89 d0             \tmov    %rdx,%rax\n 19a:\t48 c1 e0 02          \tshl    $0x2,%rax\n 19e:\t48 01 d0             \tadd    %rdx,%rax\n 1a1:\t48 01 c0             \tadd    %rax,%rax\n 1a4:\t48 01 d0             \tadd    %rdx,%rax\n 1a7:\t48 c1 e0 03          \tshl    $0x3,%rax\n 1ab:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 1b1:\tc7 00 ff ff ff ff    \tmovl   $0xffffffff,(%rax)\n 1b7:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n 1be:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 1c1:\t89 c7                \tmov    %eax,%edi\n 1c3:\te8 00 00 00 00       \tcallq  1c8 <handle_uart_device_request+0x1c8>\n 1c8:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 1cb:\t48 8d 4d e4          \tlea    -0x1c(%rbp),%rcx\n 1cf:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 1d2:\tba 0c 00 00 00       \tmov    $0xc,%edx\n 1d7:\t48 89 ce             \tmov    %rcx,%rsi\n 1da:\t89 c7                \tmov    %eax,%edi\n 1dc:\te8 00 00 00 00       \tcallq  1e1 <handle_uart_device_request+0x1e1>\n 1e1:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1e8 <handle_uart_device_request+0x1e8>\n 1e8:\t48 83 c2 01          \tadd    $0x1,%rdx\n 1ec:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 1f3 <handle_uart_device_request+0x1f3>\n 1f3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 1f6:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 1f9:\t85 c0                \ttest   %eax,%eax\n 1fb:\t74 1c                \tje     219 <handle_uart_device_request+0x219>\n 1fd:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n 202:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 209 <handle_uart_device_request+0x209>\n 209:\t48 83 c0 01          \tadd    $0x1,%rax\n 20d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 214 <handle_uart_device_request+0x214>\n 214:\te9 57 01 00 00       \tjmpq   370 <handle_uart_device_request+0x370>\n 219:\t83 7d fc 0c          \tcmpl   $0xc,-0x4(%rbp)\n 21d:\t0f 85 36 01 00 00    \tjne    359 <handle_uart_device_request+0x359>\n 223:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 22a <handle_uart_device_request+0x22a>\n 22a:\t48 83 c0 01          \tadd    $0x1,%rax\n 22e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 235 <handle_uart_device_request+0x235>\n 235:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 239:\t48 89 d0             \tmov    %rdx,%rax\n 23c:\t48 c1 e0 02          \tshl    $0x2,%rax\n 240:\t48 01 d0             \tadd    %rdx,%rax\n 243:\t48 01 c0             \tadd    %rax,%rax\n 246:\t48 01 d0             \tadd    %rdx,%rax\n 249:\t48 c1 e0 03          \tshl    $0x3,%rax\n 24d:\t48 8d 90 00 00 00 00 \tlea    0x0(%rax),%rdx\n 254:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 257:\t89 02                \tmov    %eax,(%rdx)\n 259:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 25d:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 261:\t48 c1 e0 03          \tshl    $0x3,%rax\n 265:\t48 8d 88 00 00 00 00 \tlea    0x0(%rax),%rcx\n 26c:\t48 89 d0             \tmov    %rdx,%rax\n 26f:\t48 c1 e0 02          \tshl    $0x2,%rax\n 273:\t48 01 d0             \tadd    %rdx,%rax\n 276:\t48 01 c0             \tadd    %rax,%rax\n 279:\t48 01 d0             \tadd    %rdx,%rax\n 27c:\t48 c1 e0 03          \tshl    $0x3,%rax\n 280:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 286:\t48 89 08             \tmov    %rcx,(%rax)\n 289:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 28d:\t48 89 d0             \tmov    %rdx,%rax\n 290:\t48 c1 e0 02          \tshl    $0x2,%rax\n 294:\t48 01 d0             \tadd    %rdx,%rax\n 297:\t48 01 c0             \tadd    %rax,%rax\n 29a:\t48 01 d0             \tadd    %rdx,%rax\n 29d:\t48 c1 e0 03          \tshl    $0x3,%rax\n 2a1:\t48 83 c0 10          \tadd    $0x10,%rax\n 2a5:\t48 8d 90 00 00 00 00 \tlea    0x0(%rax),%rdx\n 2ac:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 2b0:\t48 89 c6             \tmov    %rax,%rsi\n 2b3:\t48 89 d7             \tmov    %rdx,%rdi\n 2b6:\te8 00 00 00 00       \tcallq  2bb <handle_uart_device_request+0x2bb>\n 2bb:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 2bf:\t48 89 d0             \tmov    %rdx,%rax\n 2c2:\t48 c1 e0 02          \tshl    $0x2,%rax\n 2c6:\t48 01 d0             \tadd    %rdx,%rax\n 2c9:\t48 01 c0             \tadd    %rax,%rax\n 2cc:\t48 01 d0             \tadd    %rdx,%rax\n 2cf:\t48 c1 e0 03          \tshl    $0x3,%rax\n 2d3:\t48 8d 88 00 00 00 00 \tlea    0x0(%rax),%rcx\n 2da:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 2de:\t48 89 d0             \tmov    %rdx,%rax\n 2e1:\t48 c1 e0 02          \tshl    $0x2,%rax\n 2e5:\t48 01 d0             \tadd    %rdx,%rax\n 2e8:\t48 01 c0             \tadd    %rax,%rax\n 2eb:\t48 01 d0             \tadd    %rdx,%rax\n 2ee:\t48 c1 e0 03          \tshl    $0x3,%rax\n 2f2:\t48 83 c0 50          \tadd    $0x50,%rax\n 2f6:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 2fc:\tba 00 00 00 00       \tmov    $0x0,%edx\n 301:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 306:\t48 89 c7             \tmov    %rax,%rdi\n 309:\te8 00 00 00 00       \tcallq  30e <handle_uart_device_request+0x30e>\n 30e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 311:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 318 <handle_uart_device_request+0x318>\n 318:\t48 83 c0 01          \tadd    $0x1,%rax\n 31c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 323 <handle_uart_device_request+0x323>\n 323:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 327:\t74 30                \tje     359 <handle_uart_device_request+0x359>\n 329:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 330 <handle_uart_device_request+0x330>\n 330:\t48 83 c0 01          \tadd    $0x1,%rax\n 334:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 33b <handle_uart_device_request+0x33b>\n 33b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 342 <handle_uart_device_request+0x342>\n 342:\t48 89 c1             \tmov    %rax,%rcx\n 345:\tba 23 00 00 00       \tmov    $0x23,%edx\n 34a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 34f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 354:\te8 00 00 00 00       \tcallq  359 <handle_uart_device_request+0x359>\n 359:\tba 00 00 00 00       \tmov    $0x0,%edx\n 35e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 365 <handle_uart_device_request+0x365>\n 365:\t48 83 c0 01          \tadd    $0x1,%rax\n 369:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 370 <handle_uart_device_request+0x370>\n 370:\t89 d0                \tmov    %edx,%eax\n 372:\tc9                   \tleaveq \n 373:\tc3                   \tretq   ", "code_s": "__int64 __fastcall handle_uart_device_request(__int64 a1, int a2) {\n  __int64 v2;\n  int v3;\n  unsigned int v4;\n  __int64 v6;\n  int <span class=\"supfact\">buf</span>[Number];\n  unsigned int v8;\n  char *src;\n  int v10;\n  ++_gcov0_handle_uart_device_request;\n  v10 = Number;\n  src = (char *)(a1 + Number);\n  v2 = std_strtol(a1 + Number, &v6);\n  ++qword_9C88;\n  if (!v2) {\n    v6 = Number;\n    ++qword_9C90;\n  }\n  <span class=\"supfact\">buf</span>[Number] = htonl(Number);\n  <span class=\"supfact\">buf</span>[Number] = htonl(Number);\n  if (v6 >= Number && (++qword_9C98, v6 <= Number)) {\n    ++qword_9CA0;\n    if (*((int *)&uart_clients + Number * v6) < Number) {\n      if (*((_DWORD *)&uart_clients + Number * v6) == Number) {\n        ++qword_9CB0;\n        pthread_join(qword_B0[Number * v6], Number L);\n        ++qword_9CB8;\n        *((_DWORD *)&uart_clients + Number * v6) = Number;\n      }\n      v8 = Number;\n    } else {\n      ++qword_9CA8;\n      v8 = Number;\n    }\n  } else {\n    v8 = Number;\n  }\n  v8 = htonl(v8);\n  v3 = write(a2, <span class=\"supfact\">buf</span>, Number);\n  ++qword_9CC0;\n  v10 = v3;\n  if (v8) {\n    v4 = Number;\n    ++qword_9CC8;\n  } else {\n    if (v10 == Number) {\n      ++qword_9CD0;\n      *((_DWORD *)&uart_clients + Number * v6) = a2;\n      *((_QWORD *)&unk_68 + Number * v6) = (char *)&uart_device + Number * v6;\n      strcpy((char *)&uart_clients + Number * v6 + Number, src);\n      v10 = pthread_create((pthread_t *)&uart_clients + Number * v6 + Number,\n                           Number L, uart_client_main,\n                           (char *)&uart_clients + Number * v6);\n      ++qword_9CD8;\n      if (v10) {\n        ++qword_9CE0;\n        fwrite(String, Number, Number, stderr);\n      }\n    }\n    v4 = Number;\n    ++qword_9CE8;\n  }\n  return v4;\n}", "code_t": "int __cdecl handle_uart_device_request(device_request_t *request_p,\n                                       int client) {\n  __int64 v2;\n  int v3;\n  int v4;\n  __int64 index;\n  device_response_t <span class=\"supfact\">response</span>;\n  char *device_p;\n  int res;\n  ++_gcov0_handle_uart_device_request;\n  res = Number;\n  device_p = (char *)request_p->device;\n  v2 = std_strtol(request_p->device, &index);\n  ++qword_9C88;\n  if (!v2) {\n    index = Number;\n    ++qword_9C90;\n  }\n  <span class=\"supfact\">response</span>.header.type = htonl(Number);\n  <span class=\"supfact\">response</span>.header.size = htonl(Number);\n  if (index >= Number && (++qword_9C98, index <= Number)) {\n    ++qword_9CA0;\n    if (uart_clients[index].socket < Number) {\n      if (uart_clients[index].socket == Number) {\n        ++qword_9CB0;\n        pthread_join(uart_clients[index].thrd, Number L);\n        ++qword_9CB8;\n        uart_clients[index].socket = Number;\n      }\n      <span class=\"supfact\">response</span>.result = Number;\n    } else {\n      ++qword_9CA8;\n      <span class=\"supfact\">response</span>.result = Number;\n    }\n  } else {\n    <span class=\"supfact\">response</span>.result = Number;\n  }\n  <span class=\"supfact\">response</span>.result = htonl(<span class=\"supfact\">response</span>.result);\n  v3 = write(client, &<span class=\"supfact\">response</span>, Number);\n  ++qword_9CC0;\n  res = v3;\n  if (<span class=\"supfact\">response</span>.result) {\n    v4 = Number;\n    ++qword_9CC8;\n  } else {\n    if (res == Number) {\n      ++qword_9CD0;\n      uart_clients[index].socket = client;\n      uart_clients[index].dev_p =\n          (uart_device_t *)((char *)&uart_device + Number * index);\n      strcpy(uart_clients[index].name, device_p);\n      res = pthread_create(&uart_clients[index].thrd, Number L,\n                           (void *(*)(void *))uart_client_main,\n                           &uart_clients[index]);\n      ++qword_9CD8;\n      if (res) {\n        ++qword_9CE0;\n        fwrite(String, Number, Number, stderr);\n      }\n    }\n    v4 = Number;\n    ++qword_9CE8;\n  }\n  return v4;\n}", "var": [{"name": "buf", "type": "struct device_response_t { header_t header; int32_t result; }", "pred_name": "response", "ref_name": "response", "ref_type": "struct device_response_t { header_t header; int32_t result; }"}], "body_in_train": true}, {"repo_owner": "franziskuskiefer", "repo_name": "nss-benchmark", "path": "franziskuskiefer/nss-benchmark/0cd9bc721c370efa169a79962c2449acc48f375d6d576e87190b3ee5a1a4a906", "path_in_repo": "franziskuskiefer/nss-benchmark/supercop-20171218/ntl-10.5.0/src/GF2EX.o", "objdump": "000000000000096d <_ZN3NTL10MinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusEl.cold>:\n 96d:\t48 8d 7c 24 40       \tlea    0x40(%rsp),%rdi\n 972:\tc5 f8 77             \tvzeroupper \n 975:\te8 00 00 00 00       \tcallq  97a <_ZN3NTL10MinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusEl.cold+0xd>\n 97a:\t48 8d 7c 24 38       \tlea    0x38(%rsp),%rdi\n 97f:\te8 00 00 00 00       \tcallq  984 <_ZN3NTL10MinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusEl.cold+0x17>\n 984:\t4c 89 ff             \tmov    %r15,%rdi\n 987:\te8 00 00 00 00       \tcallq  98c <_ZN3NTL10MinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusEl.cold+0x1f>\n 98c:\t48 8d 7c 24 28       \tlea    0x28(%rsp),%rdi\n 991:\te8 00 00 00 00       \tcallq  996 <_ZN3NTL10MinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusEl.cold+0x29>\n 996:\t4c 89 f7             \tmov    %r14,%rdi\n 999:\te8 00 00 00 00       \tcallq  99e <_ZN3NTL10MinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusEl.cold+0x31>\n 99e:\t4c 89 ef             \tmov    %r13,%rdi\n 9a1:\te8 00 00 00 00       \tcallq  9a6 <_ZN3NTL10MinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusEl.cold+0x39>\n 9a6:\t48 89 ef             \tmov    %rbp,%rdi\n 9a9:\te8 00 00 00 00       \tcallq  9ae <_ZN3NTL12IrredPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusEl.cold>", "code_s": "void __fastcall __noreturn NTL MinPolyMod(__int64 a1, __int64 a2, __int64 a3,\n                                          __int64 a4, __int64 a5, __int64 a6,\n                                          __int64 a7, __int64 a8, __int64 a9,\n                                          __int64 a10, char <span class=\"supfact\">a11</span>,\n                                          __int64 a12, char <span class=\"supfact\">a13</span>,\n                                          char <span class=\"supfact\">a14</span>) {\n  struct _Unwind_Exception *<span class=\"supfact\">v14</span>;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  __asm { vzeroupper}\n  NTL GF2EXTransMultiplier ~GF2EXTransMultiplier(\n      (NTL GF2EXTransMultiplier *)&<span class=\"supfact\">a14</span>);\n  NTL Vec<NTL GF2E> ~Vec(&<span class=\"supfact\">a13</span>);\n  NTL Vec<NTL GF2E> ~Vec(v17);\n  NTL Vec<NTL GF2E> ~Vec(&<span class=\"supfact\">a11</span>);\n  NTL Vec<NTL GF2E> ~Vec(v16);\n  NTL Vec<NTL GF2E> ~Vec(v15);\n  Unwind_Resume(<span class=\"supfact\">v14</span>);\n}", "code_t": "void __fastcall __noreturn NTL\nMinPolyMod(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5,\n           __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10,\n           NTL Vec<NTL GF2E> <span class=\"supfact\">a11</span>, __int64 a12,\n           NTL Vec<NTL GF2E> <span class=\"supfact\">a13</span>,\n           NTL GF2EXTransMultiplier <span class=\"supfact\">a14</span>) {\n  struct _Unwind_Exception *<span class=\"supfact\">v14</span>;\n  NTL Vec<NTL GF2E> *v15;\n  NTL Vec<NTL GF2E> *v16;\n  NTL Vec<NTL GF2E> *v17;\n  __asm { vzeroupper}\n  NTL GF2EXTransMultiplier ~GF2EXTransMultiplier(&<span class=\"supfact\">a14</span>);\n  NTL Vec<NTL GF2E> ~Vec(&<span class=\"supfact\">a13</span>);\n  NTL Vec<NTL GF2E> ~Vec(v17);\n  NTL Vec<NTL GF2E> ~Vec(&<span class=\"supfact\">a11</span>);\n  NTL Vec<NTL GF2E> ~Vec(v16);\n  NTL Vec<NTL GF2E> ~Vec(v15);\n  Unwind_Resume(<span class=\"supfact\">v14</span>);\n}", "var": [{"name": "a11", "type": "__unk__", "pred_name": "a11", "ref_name": "a11", "ref_type": "struct NTL::Vec<NTL::GF2E> { NTL::WrappedPtr<NTL::GF2E,NTL::Vec<NTL::GF2E>::_vec_deleter> _vec__rep; }"}, {"name": "a13", "type": "__unk__", "pred_name": "a13", "ref_name": "a13", "ref_type": "struct NTL::Vec<NTL::GF2E> { NTL::WrappedPtr<NTL::GF2E,NTL::Vec<NTL::GF2E>::_vec_deleter> _vec__rep; }"}, {"name": "a14", "type": "__unk__", "pred_name": "a14", "ref_name": "a14", "ref_type": "struct NTL::GF2EXTransMultiplier { NTL::GF2EX f0; NTL::GF2EX fbi; NTL::GF2EX b; __int64 shamt; __int64 shamt_fbi; __int64 shamt_b; }"}, {"name": "v14", "type": "struct _Unwind_Exception *", "pred_name": "v14", "ref_name": "v14", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "raphielscape", "repo_name": "linux-scape-workstation", "path": "raphielscape/linux-scape-workstation/10593b780a71e76100809c468d77927c9530ef45b06e909807f278f4ab12ac4b", "path_in_repo": "raphielscape/linux-scape-workstation/tools/testing/selftests/kvm/clear_dirty_log_test", "objdump": "000000000040bb4d <vcpu_setup>:\n  40bb4d:\t55                   \tpush   %rbp\n  40bb4e:\t48 89 e5             \tmov    %rsp,%rbp\n  40bb51:\t48 81 ec 60 01 00 00 \tsub    $0x160,%rsp\n  40bb58:\t48 89 bd b8 fe ff ff \tmov    %rdi,-0x148(%rbp)\n  40bb5f:\t89 b5 b4 fe ff ff    \tmov    %esi,-0x14c(%rbp)\n  40bb65:\t89 95 b0 fe ff ff    \tmov    %edx,-0x150(%rbp)\n  40bb6b:\t89 8d ac fe ff ff    \tmov    %ecx,-0x154(%rbp)\n  40bb71:\t8b 8d b4 fe ff ff    \tmov    -0x14c(%rbp),%ecx\n  40bb77:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n  40bb7e:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n  40bb85:\t89 ce                \tmov    %ecx,%esi\n  40bb87:\t48 89 c7             \tmov    %rax,%rdi\n  40bb8a:\te8 4f ae ff ff       \tcallq  4069de <vcpu_sregs_get>\n  40bb8f:\t66 c7 45 98 00 00    \tmovw   $0x0,-0x68(%rbp)\n  40bb95:\t8b 8d b0 fe ff ff    \tmov    -0x150(%rbp),%ecx\n  40bb9b:\t8b 95 ac fe ff ff    \tmov    -0x154(%rbp),%edx\n  40bba1:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  40bba8:\t48 8d b0 c0 00 00 00 \tlea    0xc0(%rax),%rsi\n  40bbaf:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n  40bbb6:\t48 89 c7             \tmov    %rax,%rdi\n  40bbb9:\te8 53 fe ff ff       \tcallq  40ba11 <kvm_setup_gdt>\n  40bbbe:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n  40bbc5:\t8b 00                \tmov    (%rax),%eax\n  40bbc7:\t83 f8 06             \tcmp    $0x6,%eax\n  40bbca:\t0f 85 c5 00 00 00    \tjne    40bc95 <vcpu_setup+0x148>\n  40bbd0:\tb8 21 00 00 80       \tmov    $0x80000021,%eax\n  40bbd5:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n  40bbd9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40bbdd:\t48 0d 20 02 00 00    \tor     $0x220,%rax\n  40bbe3:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  40bbe7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40bbeb:\t80 cc 0d             \tor     $0xd,%ah\n  40bbee:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  40bbf2:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  40bbf9:\t48 05 a8 00 00 00    \tadd    $0xa8,%rax\n  40bbff:\t48 89 c7             \tmov    %rax,%rdi\n  40bc02:\te8 e6 f7 ff ff       \tcallq  40b3ed <kvm_seg_set_unusable>\n  40bc07:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n  40bc0e:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n  40bc15:\tbe 08 00 00 00       \tmov    $0x8,%esi\n  40bc1a:\t48 89 c7             \tmov    %rax,%rdi\n  40bc1d:\te8 c9 f9 ff ff       \tcallq  40b5eb <kvm_seg_set_kernel_code_64bit>\n  40bc22:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  40bc29:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n  40bc2d:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n  40bc34:\tbe 10 00 00 00       \tmov    $0x10,%esi\n  40bc39:\t48 89 c7             \tmov    %rax,%rdi\n  40bc3c:\te8 32 fa ff ff       \tcallq  40b673 <kvm_seg_set_kernel_data_64bit>\n  40bc41:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  40bc48:\t48 8d 50 30          \tlea    0x30(%rax),%rdx\n  40bc4c:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n  40bc53:\tbe 10 00 00 00       \tmov    $0x10,%esi\n  40bc58:\t48 89 c7             \tmov    %rax,%rdi\n  40bc5b:\te8 13 fa ff ff       \tcallq  40b673 <kvm_seg_set_kernel_data_64bit>\n  40bc60:\t8b 8d b0 fe ff ff    \tmov    -0x150(%rbp),%ecx\n  40bc66:\t8b 95 ac fe ff ff    \tmov    -0x154(%rbp),%edx\n  40bc6c:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  40bc73:\t48 8d b0 90 00 00 00 \tlea    0x90(%rax),%rsi\n  40bc7a:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n  40bc81:\t41 89 c8             \tmov    %ecx,%r8d\n  40bc84:\t89 d1                \tmov    %edx,%ecx\n  40bc86:\tba 18 00 00 00       \tmov    $0x18,%edx\n  40bc8b:\t48 89 c7             \tmov    %rax,%rdi\n  40bc8e:\te8 f9 fd ff ff       \tcallq  40ba8c <kvm_setup_tss_64bit>\n  40bc93:\teb 30                \tjmp    40bcc5 <vcpu_setup+0x178>\n  40bc95:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n  40bc9c:\t8b 00                \tmov    (%rax),%eax\n  40bc9e:\t41 89 c1             \tmov    %eax,%r9d\n  40bca1:\t41 b8 d8 15 41 00    \tmov    $0x4115d8,%r8d\n  40bca7:\tb9 7d 02 00 00       \tmov    $0x27d,%ecx\n  40bcac:\tba 2d 12 41 00       \tmov    $0x41122d,%edx\n  40bcb1:\tbe ce 15 41 00       \tmov    $0x4115ce,%esi\n  40bcb6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40bcbb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40bcc0:\te8 18 7c ff ff       \tcallq  4038dd <test_assert>\n  40bcc5:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n  40bccc:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n  40bcd0:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  40bcd4:\t8b 8d b4 fe ff ff    \tmov    -0x14c(%rbp),%ecx\n  40bcda:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n  40bce1:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n  40bce8:\t89 ce                \tmov    %ecx,%esi\n  40bcea:\t48 89 c7             \tmov    %rax,%rdi\n  40bced:\te8 a9 ad ff ff       \tcallq  406a9b <vcpu_sregs_set>\n  40bcf2:\t90                   \tnop\n  40bcf3:\tc9                   \tleaveq \n  40bcf4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vcpu_setup(unsigned int *a1, unsigned int a2,\n                              unsigned int a3, unsigned int a4) {\n  __int64 v4;\n  char <span class=\"supfact\">v8</span>[Number];\n  __int64 v9;\n  __int64 v10;\n  __int64 v11[Number];\n  char v12[Number];\n  _WORD v13[Number];\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  vcpu_sregs_get((__int64)a1, a2, (__int64)<span class=\"supfact\">v8</span>);\n  v13[Number] = Number;\n  kvm_setup_gdt((__int64)a1, (__int64)v13, a4, a3);\n  if (*a1 == Number) {\n    v14 = Number L;\n    v16 |= Number;\n    v4 = v17;\n    BYTE1(v4) = BYTE1(v17) | Number;\n    v17 = v4;\n    kvm_seg_set_unusable(v12);\n    kvm_seg_set_kernel_code_64bit((__int64)a1, Number,\n                                  (__int64)<span class=\"supfact\">v8</span>);\n    kvm_seg_set_kernel_data_64bit((__int64)a1, Number, (__int64)&v9);\n    kvm_seg_set_kernel_data_64bit((__int64)a1, Number, (__int64)&v10);\n    kvm_setup_tss_64bit((__int64)a1, v11, Number, a4, a3);\n  } else {\n    test_assert(Number, String, String, Number, String, *a1);\n  }\n  v15 = *((_QWORD *)a1 + Number);\n  return vcpu_sregs_set((__int64)a1, a2, (__int64)<span class=\"supfact\">v8</span>);\n}", "code_t": "void __cdecl vcpu_setup(kvm_vm *vm, int vcpuid, int pgd_memslot,\n                        int gdt_memslot) {\n  __u64 v4;\n  kvm_sregs <span class=\"supfact\">sregs</span>;\n  vcpu_sregs_get(vm, vcpuid, &<span class=\"supfact\">sregs</span>);\n  <span class=\"supfact\">sregs</span>.idt.limit = Number;\n  kvm_setup_gdt(vm, &<span class=\"supfact\">sregs</span>.gdt, gdt_memslot, pgd_memslot);\n  if (vm->mode == Number) {\n    <span class=\"supfact\">sregs</span>.cr0 = Number L;\n    <span class=\"supfact\">sregs</span>.cr4 |= Number;\n    v4 = <span class=\"supfact\">sregs</span>.efer;\n    BYTE1(v4) = BYTE1(<span class=\"supfact\">sregs</span>.efer) | Number;\n    <span class=\"supfact\">sregs</span>.efer = v4;\n    kvm_seg_set_unusable(&<span class=\"supfact\">sregs</span>.ldt);\n    kvm_seg_set_kernel_code_64bit(vm, Number, &<span class=\"supfact\">sregs</span>.cs);\n    kvm_seg_set_kernel_data_64bit(vm, Number, &<span class=\"supfact\">sregs</span>.ds);\n    kvm_seg_set_kernel_data_64bit(vm, Number, &<span class=\"supfact\">sregs</span>.es);\n    kvm_setup_tss_64bit(vm, &<span class=\"supfact\">sregs</span>.tr, Number, gdt_memslot,\n                        pgd_memslot);\n  } else {\n    test_assert(Number, String, String, Number, String, (unsigned int)vm->mode);\n  }\n  <span class=\"supfact\">sregs</span>.cr3 = vm->pgd;\n  vcpu_sregs_set(vm, vcpuid, &<span class=\"supfact\">sregs</span>);\n}", "var": [{"name": "v8", "type": "struct kvm_sregs { kvm_segment cs; kvm_segment ds; kvm_segment es; kvm_segment fs; kvm_segment gs; kvm_segment ss; kvm_segment tr; kvm_segment ldt; kvm_dtable gdt; kvm_dtable idt; __u64 cr0; __u64 cr2; __u64 cr3; __u64 cr4; __u64 cr8; __u64 efer; __u64 apic_base; __u64[4] interrupt_bitmap; }", "pred_name": "sregs", "ref_name": "sregs", "ref_type": "struct kvm_sregs { kvm_segment cs; kvm_segment ds; kvm_segment es; kvm_segment fs; kvm_segment gs; kvm_segment ss; kvm_segment tr; kvm_segment ldt; kvm_dtable gdt; kvm_dtable idt; __u64 cr0; __u64 cr2; __u64 cr3; __u64 cr4; __u64 cr8; __u64 efer; __u64 apic_base; __u64[4] interrupt_bitmap; }"}], "body_in_train": true}, {"repo_owner": "Wyvern", "repo_name": "git", "path": "Wyvern/git/c6757f013f2097cbb3edca6da1d448ac08f993790cb53fae3746a8d31f1f4142", "path_in_repo": "Wyvern/git//t/helper/test-revision-walking.o", "objdump": "0000000000000000 <print_commit>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n   b:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n  12:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  19:\t00 \n  1a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  21:\t00 \n  22:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  29:\t00 \n  2a:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n  31:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  36:\tb9 14 00 00 00       \tmov    $0x14,%ecx\n  3b:\t48 89 d7             \tmov    %rdx,%rdi\n  3e:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  41:\tc7 85 58 ff ff ff 00 \tmovl   $0x0,-0xa8(%rbp)\n  48:\t00 00 00 \n  4b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 52 <print_commit+0x52>\n  52:\t48 8d 8d 40 ff ff ff \tlea    -0xc0(%rbp),%rcx\n  59:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  5d:\t48 8b b5 38 ff ff ff \tmov    -0xc8(%rbp),%rsi\n  64:\t49 89 c8             \tmov    %rcx,%r8\n  67:\t48 89 d1             \tmov    %rdx,%rcx\n  6a:\tba 00 00 00 00       \tmov    $0x0,%edx\n  6f:\t48 89 c7             \tmov    %rax,%rdi\n  72:\te8 00 00 00 00       \tcallq  77 <print_commit+0x77>\n  77:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  7b:\t48 89 c7             \tmov    %rax,%rdi\n  7e:\te8 00 00 00 00       \tcallq  83 <print_commit+0x83>\n  83:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  87:\t48 89 c7             \tmov    %rax,%rdi\n  8a:\te8 00 00 00 00       \tcallq  8f <print_commit+0x8f>\n  8f:\t90                   \tnop\n  90:\tc9                   \tleaveq \n  91:\tc3                   \tretq   ", "code_s": "__int64 __fastcall print_commit(__int64 a1) {\n  int <span class=\"supfact\">v2</span>[Number];\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  char *s;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  s = (char *)&strbuf_slopbuf;\n  memset(<span class=\"supfact\">v2</span>, Number, sizeof(<span class=\"supfact\">v2</span>));\n  <span class=\"supfact\">v2</span>[Number] = Number;\n  repo_format_commit_message(the_repository, a1, String,\n                             (const char *)<span class=\"supfact\">v3</span>);\n  puts(s);\n  return strbuf_release(<span class=\"supfact\">v3</span>);\n}", "code_t": "void __cdecl print_commit(commit *commit) {\n  pretty_print_context <span class=\"supfact\">ctx</span>;\n  strbuf <span class=\"supfact\">sb</span>;\n  <span class=\"supfact\">sb</span>.alloc = Number L;\n  <span class=\"supfact\">sb</span>.len = Number L;\n  <span class=\"supfact\">sb</span>.buf = (char *)&strbuf_slopbuf;\n  memset(&<span class=\"supfact\">ctx</span>, Number, sizeof(<span class=\"supfact\">ctx</span>));\n  <span class=\"supfact\">ctx</span>.date_mode.type = DATE_NORMAL;\n  repo_format_commit_message(the_repository, commit, String,\n                             (const char *)&<span class=\"supfact\">sb</span>);\n  puts(<span class=\"supfact\">sb</span>.buf);\n  strbuf_release(&<span class=\"supfact\">sb</span>);\n}", "var": [{"name": "v2", "type": "commit *", "pred_name": "commit", "ref_name": "ctx", "ref_type": "struct pretty_print_context { cmit_fmt fmt; int abbrev; const char * after_subject; int preserve_subject; PADDING (4); date_mode date_mode; unsigned __int32 : 1 date_mode_explicit; PADDING (3); int print_email_subject; int expand_tabs_in_log; int need_8bit_cte; char * notes_message; reflog_walk_info * reflog_info; rev_info * rev; const char * output_encoding; string_list * mailmap; int color; PADDING (4); ident_split * from_ident; string_list in_body_headers; int graph_width; PADDING (4); }"}, {"name": "v3", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "pred_name": "sb", "ref_name": "sb", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": false}, {"repo_owner": "trevor-vincent", "repo_name": "d4est", "path": "trevor-vincent/d4est/da626b8655451e8ca91fd00da097285df8dbbc6bd5ef52e011dcfa9b89be9a58", "path_in_repo": "trevor-vincent/d4est/third_party/OpenBLAS/lapack-netlib/LAPACKE/src/lapacke_zhetrf_rk.o", "objdump": "0000000000000000 <LAPACKE_zhetrf_rk>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 40          \tsub    $0x40,%rsp\n   8:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n   b:\t89 f0                \tmov    %esi,%eax\n   d:\t89 55 d4             \tmov    %edx,-0x2c(%rbp)\n  10:\t48 89 4d c8          \tmov    %rcx,-0x38(%rbp)\n  14:\t44 89 45 d0          \tmov    %r8d,-0x30(%rbp)\n  18:\t4c 89 4d c0          \tmov    %r9,-0x40(%rbp)\n  1c:\t88 45 d8             \tmov    %al,-0x28(%rbp)\n  1f:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  26:\tc7 45 f8 ff ff ff ff \tmovl   $0xffffffff,-0x8(%rbp)\n  2d:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  34:\t00 \n  35:\t83 7d dc 66          \tcmpl   $0x66,-0x24(%rbp)\n  39:\t74 1f                \tje     5a <LAPACKE_zhetrf_rk+0x5a>\n  3b:\t83 7d dc 65          \tcmpl   $0x65,-0x24(%rbp)\n  3f:\t74 19                \tje     5a <LAPACKE_zhetrf_rk+0x5a>\n  41:\tbe ff ff ff ff       \tmov    $0xffffffff,%esi\n  46:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4b:\te8 00 00 00 00       \tcallq  50 <LAPACKE_zhetrf_rk+0x50>\n  50:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  55:\te9 14 01 00 00       \tjmpq   16e <LAPACKE_zhetrf_rk+0x16e>\n  5a:\t0f be 75 d8          \tmovsbl -0x28(%rbp),%esi\n  5e:\t8b 7d d0             \tmov    -0x30(%rbp),%edi\n  61:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  65:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  68:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  6b:\t41 89 f8             \tmov    %edi,%r8d\n  6e:\t89 c7                \tmov    %eax,%edi\n  70:\te8 00 00 00 00       \tcallq  75 <LAPACKE_zhetrf_rk+0x75>\n  75:\t85 c0                \ttest   %eax,%eax\n  77:\t74 0a                \tje     83 <LAPACKE_zhetrf_rk+0x83>\n  79:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n  7e:\te9 eb 00 00 00       \tjmpq   16e <LAPACKE_zhetrf_rk+0x16e>\n  83:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  87:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  8a:\tba 01 00 00 00       \tmov    $0x1,%edx\n  8f:\t48 89 ce             \tmov    %rcx,%rsi\n  92:\t89 c7                \tmov    %eax,%edi\n  94:\te8 00 00 00 00       \tcallq  99 <LAPACKE_zhetrf_rk+0x99>\n  99:\t85 c0                \ttest   %eax,%eax\n  9b:\t74 0a                \tje     a7 <LAPACKE_zhetrf_rk+0xa7>\n  9d:\tb8 fa ff ff ff       \tmov    $0xfffffffa,%eax\n  a2:\te9 c7 00 00 00       \tjmpq   16e <LAPACKE_zhetrf_rk+0x16e>\n  a7:\t0f be 75 d8          \tmovsbl -0x28(%rbp),%esi\n  ab:\t4c 8b 4d c0          \tmov    -0x40(%rbp),%r9\n  af:\t44 8b 45 d0          \tmov    -0x30(%rbp),%r8d\n  b3:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  b7:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  ba:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  bd:\t48 83 ec 08          \tsub    $0x8,%rsp\n  c1:\t8b 7d f8             \tmov    -0x8(%rbp),%edi\n  c4:\t57                   \tpush   %rdi\n  c5:\t48 8d 7d e0          \tlea    -0x20(%rbp),%rdi\n  c9:\t57                   \tpush   %rdi\n  ca:\tff 75 10             \tpushq  0x10(%rbp)\n  cd:\t89 c7                \tmov    %eax,%edi\n  cf:\te8 00 00 00 00       \tcallq  d4 <LAPACKE_zhetrf_rk+0xd4>\n  d4:\t48 83 c4 20          \tadd    $0x20,%rsp\n  d8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  db:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  df:\t75 71                \tjne    152 <LAPACKE_zhetrf_rk+0x152>\n  e1:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n  e6:\tf2 0f 2c c0          \tcvttsd2si %xmm0,%eax\n  ea:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  ed:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  f0:\t48 98                \tcltq   \n  f2:\t48 c1 e0 04          \tshl    $0x4,%rax\n  f6:\t48 89 c7             \tmov    %rax,%rdi\n  f9:\te8 00 00 00 00       \tcallq  fe <LAPACKE_zhetrf_rk+0xfe>\n  fe:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 102:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 107:\t75 09                \tjne    112 <LAPACKE_zhetrf_rk+0x112>\n 109:\tc7 45 fc 0e fc ff ff \tmovl   $0xfffffc0e,-0x4(%rbp)\n 110:\teb 41                \tjmp    153 <LAPACKE_zhetrf_rk+0x153>\n 112:\t0f be 75 d8          \tmovsbl -0x28(%rbp),%esi\n 116:\t4c 8b 4d c0          \tmov    -0x40(%rbp),%r9\n 11a:\t44 8b 45 d0          \tmov    -0x30(%rbp),%r8d\n 11e:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n 122:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n 125:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 128:\t48 83 ec 08          \tsub    $0x8,%rsp\n 12c:\t8b 7d f8             \tmov    -0x8(%rbp),%edi\n 12f:\t57                   \tpush   %rdi\n 130:\tff 75 f0             \tpushq  -0x10(%rbp)\n 133:\tff 75 10             \tpushq  0x10(%rbp)\n 136:\t89 c7                \tmov    %eax,%edi\n 138:\te8 00 00 00 00       \tcallq  13d <LAPACKE_zhetrf_rk+0x13d>\n 13d:\t48 83 c4 20          \tadd    $0x20,%rsp\n 141:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 144:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 148:\t48 89 c7             \tmov    %rax,%rdi\n 14b:\te8 00 00 00 00       \tcallq  150 <LAPACKE_zhetrf_rk+0x150>\n 150:\teb 01                \tjmp    153 <LAPACKE_zhetrf_rk+0x153>\n 152:\t90                   \tnop\n 153:\t81 7d fc 0e fc ff ff \tcmpl   $0xfffffc0e,-0x4(%rbp)\n 15a:\t75 0f                \tjne    16b <LAPACKE_zhetrf_rk+0x16b>\n 15c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 15f:\t89 c6                \tmov    %eax,%esi\n 161:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 166:\te8 00 00 00 00       \tcallq  16b <LAPACKE_zhetrf_rk+0x16b>\n 16b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 16e:\tc9                   \tleaveq \n 16f:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall LAPACKE_zhetrf_rk(unsigned int a1, char a2, unsigned int a3,\n                                     __int64 a4, unsigned int a5, __int64 a6,\n                                     __int64 a7) {\n  __int64 result;\n  double <span class=\"supfact\">v12</span>[Number];\n  void *ptr;\n  unsigned int v14;\n  unsigned int v15;\n  v15 = Number;\n  v14 = Number;\n  ptr = Number L;\n  if (a1 == Number || a1 == Number) {\n    if ((unsigned int)LAPACKE_zhe_nancheck(a1, (unsigned int)a2, a3, a4, a5)) {\n      result = Number L;\n    } else if ((unsigned int)LAPACKE_z_nancheck(a3, a6, Number L)) {\n      result = Number L;\n    } else {\n      v15 = LAPACKE_zhetrf_rk_work(a1, (unsigned int)a2, a3, a4, a5, a6, a7,\n                                   <span class=\"supfact\">v12</span>, v14);\n      if (!v15) {\n        v14 = (int)<span class=\"supfact\">v12</span>[Number];\n        ptr = malloc(Number L * (int)<span class=\"supfact\">v12</span>[Number]);\n        if (ptr) {\n          v15 = LAPACKE_zhetrf_rk_work(a1, (unsigned int)a2, a3, a4, a5, a6, a7,\n                                       ptr, v14);\n          free(ptr);\n        } else {\n          v15 = Number;\n        }\n      }\n      if (v15 == Number)\n        LAPACKE_xerbla(String, Number L);\n      result = v15;\n    }\n  } else {\n    LAPACKE_xerbla(String, Number);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl LAPACKE_zhetrf_rk(int matrix_layout, char uplo, int n,\n                              complex_double *a, int lda, complex_double *e,\n                              int *ipiv) {\n  int result;\n  complex_double <span class=\"supfact\">work_query</span>;\n  complex_double *work;\n  int lwork;\n  int info;\n  info = Number;\n  lwork = Number;\n  work = Number L;\n  if (matrix_layout == Number || matrix_layout == Number) {\n    if ((unsigned int)LAPACKE_zhe_nancheck((unsigned int)matrix_layout,\n                                           (unsigned int)uplo, (unsigned int)n,\n                                           a, (unsigned int)lda)) {\n      result = Number;\n    } else if ((unsigned int)LAPACKE_z_nancheck((unsigned int)n, e, Number L)) {\n      result = Number;\n    } else {\n      info = LAPACKE_zhetrf_rk_work(\n          (unsigned int)matrix_layout, (unsigned int)uplo, (unsigned int)n, a,\n          (unsigned int)lda, e, ipiv, &<span class=\"supfact\">work_query</span>,\n          (unsigned int)lwork);\n      if (!info) {\n        lwork = (int)<span class=\"supfact\">work_query</span>.real;\n        work = (complex_double *)malloc(Number L *\n                                        (int)<span class=\"supfact\">work_query</span>.real);\n        if (work) {\n          info = LAPACKE_zhetrf_rk_work(\n              (unsigned int)matrix_layout, (unsigned int)uplo, (unsigned int)n,\n              a, (unsigned int)lda, e, ipiv, work, (unsigned int)lwork);\n          free(work);\n        } else {\n          info = Number;\n        }\n      }\n      if (info == Number)\n        LAPACKE_xerbla(String, Number L);\n      result = info;\n    }\n  } else {\n    LAPACKE_xerbla(String, Number);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v12", "type": "struct complex_double { double real; double imag; }", "pred_name": "work_query", "ref_name": "work_query", "ref_type": "struct complex_double { double real; double imag; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/91af249e33bfc7867d0ba5ec88dabcc2588d4b38f04da46ee954dffea8f89304", "path_in_repo": "XanClic/qemu//mips64el-softmmu/hw/vfio/common.o", "objdump": "000000000000090e <_nocheck__trace_vfio_listener_region_add_iommu>:\n     90e:\t55                   \tpush   %rbp\n     90f:\t48 89 e5             \tmov    %rsp,%rbp\n     912:\t41 54                \tpush   %r12\n     914:\t53                   \tpush   %rbx\n     915:\t48 83 ec 30          \tsub    $0x30,%rsp\n     919:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     91d:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     921:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     928:\t00 00 \n     92a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     92e:\t31 c0                \txor    %eax,%eax\n     930:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 936 <_nocheck__trace_vfio_listener_region_add_iommu+0x28>\n     936:\t85 c0                \ttest   %eax,%eax\n     938:\t0f 95 c0             \tsetne  %al\n     93b:\t0f b6 c0             \tmovzbl %al,%eax\n     93e:\t48 85 c0             \ttest   %rax,%rax\n     941:\t74 65                \tje     9a8 <_nocheck__trace_vfio_listener_region_add_iommu+0x9a>\n     943:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 94a <_nocheck__trace_vfio_listener_region_add_iommu+0x3c>\n     94a:\t66 85 c0             \ttest   %ax,%ax\n     94d:\t74 59                \tje     9a8 <_nocheck__trace_vfio_listener_region_add_iommu+0x9a>\n     94f:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     954:\te8 af fb ff ff       \tcallq  508 <qemu_loglevel_mask>\n     959:\t84 c0                \ttest   %al,%al\n     95b:\t74 4b                \tje     9a8 <_nocheck__trace_vfio_listener_region_add_iommu+0x9a>\n     95d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     961:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     966:\t48 89 c7             \tmov    %rax,%rdi\n     969:\te8 00 00 00 00       \tcallq  96e <_nocheck__trace_vfio_listener_region_add_iommu+0x60>\n     96e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     972:\t49 89 c4             \tmov    %rax,%r12\n     975:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     979:\t48 89 c3             \tmov    %rax,%rbx\n     97c:\te8 00 00 00 00       \tcallq  981 <_nocheck__trace_vfio_listener_region_add_iommu+0x73>\n     981:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     985:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     989:\t49 89 c9             \tmov    %rcx,%r9\n     98c:\t49 89 d0             \tmov    %rdx,%r8\n     98f:\t4c 89 e1             \tmov    %r12,%rcx\n     992:\t48 89 da             \tmov    %rbx,%rdx\n     995:\t89 c6                \tmov    %eax,%esi\n     997:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 99e <_nocheck__trace_vfio_listener_region_add_iommu+0x90>\n     99e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9a3:\te8 00 00 00 00       \tcallq  9a8 <_nocheck__trace_vfio_listener_region_add_iommu+0x9a>\n     9a8:\t90                   \tnop\n     9a9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9ad:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     9b4:\t00 00 \n     9b6:\t74 05                \tje     9bd <_nocheck__trace_vfio_listener_region_add_iommu+0xaf>\n     9b8:\te8 00 00 00 00       \tcallq  9bd <_nocheck__trace_vfio_listener_region_add_iommu+0xaf>\n     9bd:\t48 83 c4 30          \tadd    $0x30,%rsp\n     9c1:\t5b                   \tpop    %rbx\n     9c2:\t41 5c                \tpop    %r12\n     9c4:\t5d                   \tpop    %rbp\n     9c5:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_vfio_listener_region_add_iommu(\n    __int64 a1, __int64 a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_VFIO_LISTENER_REGION_ADD_IOMMU_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v2 = <span class=\"supfact\">tv</span>.tv_usec;\n    v3 = <span class=\"supfact\">tv</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, a1, a2);\n  }\n  return __readfsqword(Number) ^ v7;\n}", "code_t": "void __cdecl nocheck__trace_vfio_listener_region_add_iommu(uint64_t start,\n                                                           uint64_t end) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_VFIO_LISTENER_REGION_ADD_IOMMU_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v2 = <span class=\"supfact\">_now</span>.tv_usec;\n    v3 = <span class=\"supfact\">_now</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, start, end);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "_now", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "tellapart", "repo_name": "ubuntu-precise", "path": "tellapart/ubuntu-precise/0e72c736cc69445278478ca61405635b8923d49e61b3e87cd2e2a60bc8efb883", "path_in_repo": "tellapart/ubuntu-precise/tools/hv/hv_kvp_daemon", "objdump": "", "code_s": "int poll(struct pollfd *<span class=\"supfact\">fds</span>, nfds_t nfds, int timeout) {\n  return poll(<span class=\"supfact\">fds</span>, nfds, timeout);\n}", "code_t": "int poll(struct pollfd *<span class=\"supfact\">fds</span>, nfds_t nfds, int timeout) {\n  return poll(<span class=\"supfact\">fds</span>, nfds, timeout);\n}", "var": [{"name": "fds", "type": "struct pollfd *", "pred_name": "fds", "ref_name": "fds", "ref_type": "struct pollfd *"}], "body_in_train": true}, {"repo_owner": "coder-Jonathan", "repo_name": "putty-with-timestamp", "path": "coder-Jonathan/putty-with-timestamp/916618af5f2c87dfc5c88a0f367313b71a610800127bba1702b425494a95a558", "path_in_repo": "coder-Jonathan/putty-with-timestamp//unix/uxstore.o", "objdump": "0000000000000d13 <read_setting_s>:\n     d13:\t55                   \tpush   %rbp\n     d14:\t48 89 e5             \tmov    %rsp,%rbp\n     d17:\t48 83 ec 40          \tsub    $0x40,%rsp\n     d1b:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     d1f:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     d23:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     d27:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     d2b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     d2f:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     d33:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     d38:\t74 4f                \tje     d89 <read_setting_s+0x76>\n     d3a:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n     d3e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d42:\tba 00 00 00 00       \tmov    $0x0,%edx\n     d47:\t48 89 ce             \tmov    %rcx,%rsi\n     d4a:\t48 89 c7             \tmov    %rax,%rdi\n     d4d:\te8 00 00 00 00       \tcallq  d52 <read_setting_s+0x3f>\n     d52:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     d56:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     d5b:\t74 2c                \tje     d89 <read_setting_s+0x76>\n     d5d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d61:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     d65:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d69:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     d6e:\t75 2b                \tjne    d9b <read_setting_s+0x88>\n     d70:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     d75:\tba 8f 01 00 00       \tmov    $0x18f,%edx\n     d7a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d7f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     d84:\te8 00 00 00 00       \tcallq  d89 <read_setting_s+0x76>\n     d89:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     d8d:\t48 89 c7             \tmov    %rax,%rdi\n     d90:\te8 00 00 00 00       \tcallq  d95 <read_setting_s+0x82>\n     d95:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d99:\teb 01                \tjmp    d9c <read_setting_s+0x89>\n     d9b:\t90                   \tnop\n     d9c:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     da1:\t75 07                \tjne    daa <read_setting_s+0x97>\n     da3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     da8:\teb 0c                \tjmp    db6 <read_setting_s+0xa3>\n     daa:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     dae:\t48 89 c7             \tmov    %rax,%rdi\n     db1:\te8 00 00 00 00       \tcallq  db6 <read_setting_s+0xa3>\n     db6:\tc9                   \tleaveq \n     db7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_setting_s(__int64 a1, __int64 a2) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  v5 = a1;\n  <span class=\"supfact\">v3</span>[Number] = a2;\n  if (a1 && (v4 = find234(v5, <span class=\"supfact\">v3</span>, Number L)) != Number) {\n    v6 = *(_QWORD *)(v4 + Number);\n    if (!v6)\n      _assert_fail(String, String, Number, String);\n  } else {\n    v6 = get_setting(a2);\n  }\n  if (v6)\n    result = dupstr(v6);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "char *__cdecl read_setting_s(void *handle, const char *key) {\n  char *result;\n  skeyval <span class=\"supfact\">tmp</span>;\n  skeyval *kv;\n  tree234 *tree;\n  const char *val;\n  tree = (tree234 *)handle;\n  <span class=\"supfact\">tmp</span>.key = key;\n  if (handle && (kv = (skeyval *)find234(tree, &<span class=\"supfact\">tmp</span>,\n                                         Number L)) != Number L) {\n    val = kv->value;\n    if (!val)\n      _assert_fail(String, String, Number, String);\n  } else {\n    val = get_setting(key);\n  }\n  if (val)\n    result = (char *)dupstr(val);\n  else\n    result = Number L;\n  return result;\n}", "var": [{"name": "v3", "type": "__unk__", "pred_name": "__unk__", "ref_name": "tmp", "ref_type": "struct skeyval { const char * key; const char * value; }"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/b91df0dd35cf5646c5a75dc0470b01a9002de38c1a4bbbd76c40360aac3725bd", "path_in_repo": "AlexanderVangelov/pjsip//pjlib/bin/pjlib-test-x86_64-unknown-linux-gnu", "objdump": "", "code_s": "int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,\n           struct timeval *<span class=\"supfact\">timeout</span>) {\n  return select(nfds, readfds, writefds, exceptfds, <span class=\"supfact\">timeout</span>);\n}", "code_t": "int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,\n           struct timeval *<span class=\"supfact\">timeout</span>) {\n  return select(nfds, readfds, writefds, exceptfds, <span class=\"supfact\">timeout</span>);\n}", "var": [{"name": "timeout", "type": "struct timeval *", "pred_name": "timeout", "ref_name": "timeout", "ref_type": "struct timeval *"}], "body_in_train": true}, {"repo_owner": "jerryos", "repo_name": "ffmpeg", "path": "jerryos/ffmpeg/8caacc43b43e5f39da356614a2fddb0ed4d86c003c65ef0deca5539cbf89e40e", "path_in_repo": "jerryos/ffmpeg//libavcodec/qdm2.o", "objdump": "0000000000004070 <process_subpacket_11>:\n    4070:\t48 83 ec 48          \tsub    $0x48,%rsp\n    4074:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    4079:\t48 89 34 24          \tmov    %rsi,(%rsp)\n    407d:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n    4084:\t00 \n    4085:\t48 83 3c 24 00       \tcmpq   $0x0,(%rsp)\n    408a:\t74 30                \tje     40bc <process_subpacket_11+0x4c>\n    408c:\t48 8b 04 24          \tmov    (%rsp),%rax\n    4090:\t48 8b 00             \tmov    (%rax),%rax\n    4093:\t8b 40 04             \tmov    0x4(%rax),%eax\n    4096:\tc1 e0 03             \tshl    $0x3,%eax\n    4099:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n    409d:\t48 8b 04 24          \tmov    (%rsp),%rax\n    40a1:\t48 8b 00             \tmov    (%rax),%rax\n    40a4:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n    40a8:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    40ac:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n    40b1:\t48 89 ce             \tmov    %rcx,%rsi\n    40b4:\t48 89 c7             \tmov    %rax,%rdi\n    40b7:\te8 be c0 ff ff       \tcallq  17a <init_get_bits>\n    40bc:\t83 7c 24 3c 1f       \tcmpl   $0x1f,0x3c(%rsp)\n    40c1:\t7e 7e                \tjle    4141 <process_subpacket_11+0xd1>\n    40c3:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n    40c8:\tbe 0d 00 00 00       \tmov    $0xd,%esi\n    40cd:\t48 89 c7             \tmov    %rax,%rdi\n    40d0:\te8 62 bf ff ff       \tcallq  37 <get_bits>\n    40d5:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n    40d9:\t83 7c 24 38 03       \tcmpl   $0x3,0x38(%rsp)\n    40de:\t7e 61                \tjle    4141 <process_subpacket_11+0xd1>\n    40e0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    40e5:\t8b 48 2c             \tmov    0x2c(%rax),%ecx\n    40e8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    40ed:\t44 8b 80 b8 2c 02 00 \tmov    0x22cb8(%rax),%r8d\n    40f4:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n    40f8:\t44 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%r10d\n    40ff:\t00 \n    4100:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    4105:\t8b 00                \tmov    (%rax),%eax\n    4107:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n    410c:\t48 81 c2 e0 f9 01 00 \tadd    $0x1f9e0,%rdx\n    4113:\t48 8b 74 24 08       \tmov    0x8(%rsp),%rsi\n    4118:\t48 81 c6 b4 1d 02 00 \tadd    $0x21db4,%rsi\n    411f:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n    4124:\t48 81 c7 b4 0e 02 00 \tadd    $0x20eb4,%rdi\n    412b:\t48 83 ec 08          \tsub    $0x8,%rsp\n    412f:\t51                   \tpush   %rcx\n    4130:\t45 89 c1             \tmov    %r8d,%r9d\n    4133:\t45 89 d0             \tmov    %r10d,%r8d\n    4136:\t89 c1                \tmov    %eax,%ecx\n    4138:\te8 d8 e3 ff ff       \tcallq  2515 <fill_coding_method_array>\n    413d:\t48 83 c4 10          \tadd    $0x10,%rsp\n    4141:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    4145:\t48 8d 74 24 10       \tlea    0x10(%rsp),%rsi\n    414a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    414f:\t41 b8 08 00 00 00    \tmov    $0x8,%r8d\n    4155:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    415a:\t48 89 c7             \tmov    %rax,%rdi\n    415d:\te8 aa e4 ff ff       \tcallq  260c <synthfilt_build_sb_samples>\n    4162:\t90                   \tnop\n    4163:\t48 83 c4 48          \tadd    $0x48,%rsp\n    4167:\tc3                   \tretq   ", "code_s": "__int64 __fastcall process_subpacket_11(int *a1, __int64 a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  int v4;\n  int v5;\n  v5 = Number;\n  if (a2) {\n    v5 = Number * *(_DWORD *)(*(_QWORD *)a2 + Number L);\n    init_get_bits((__int64)<span class=\"supfact\">v3</span>,\n                  *(_QWORD *)(*(_QWORD *)a2 + Number L), v5);\n  }\n  if (v5 > Number) {\n    v4 = get_bits((__int64)<span class=\"supfact\">v3</span>, Number);\n    if (v4 > Number)\n      fill_coding_method_array((__int64)(a1 + Number), (__int64)(a1 + Number),\n                               (__int64)(a1 + Number), *a1,\n                               (unsigned int)(Number * v4), a1[Number],\n                               a1[Number]);\n  }\n  return synthfilt_build_sb_samples(\n      (unsigned int *)a1, (__int64)<span class=\"supfact\">v3</span>, v5, Number, Number);\n}", "code_t": "void __cdecl process_subpacket_11(QDM2Context_0 *q, QDM2SubPNode_0 *node) {\n  GetBitContext_0 <span class=\"supfact\">gb</span>;\n  int c;\n  int length;\n  length = Number;\n  if (node) {\n    length = Number * node->packet->size;\n    init_get_bits(&<span class=\"supfact\">gb</span>, node->packet->data, length);\n  }\n  if (length > Number) {\n    c = get_bits(&<span class=\"supfact\">gb</span>, Number);\n    if (c > Number)\n      fill_coding_method_array(q->tone_level_idx, q->tone_level_idx_temp,\n                               q->coding_method, q->nb_channels, Number * c,\n                               q->superblocktype_2_3, q->cm_table_select);\n  }\n  synthfilt_build_sb_samples(q, &<span class=\"supfact\">gb</span>, length, Number, Number);\n}", "var": [{"name": "v3", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }", "pred_name": "gb", "ref_name": "gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "yosh1k104", "repo_name": "D-Switch", "path": "yosh1k104/D-Switch/d47490a77e790dfb21e616c1a6e9300be37b93a051b72b1a467049cc22606568", "path_in_repo": "yosh1k104/D-Switch/contiki-2.6/examples/ipv6/rpl-border-router/obj_native/elfloader.o", "objdump": "0000000000000420 <find_program_processes>:\n 420:\t55                   \tpush   %rbp\n 421:\t48 89 e5             \tmov    %rsp,%rbp\n 424:\t48 83 ec 60          \tsub    $0x60,%rsp\n 428:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n 42b:\t89 75 a8             \tmov    %esi,-0x58(%rbp)\n 42e:\t89 d0                \tmov    %edx,%eax\n 430:\t89 4d a0             \tmov    %ecx,-0x60(%rbp)\n 433:\t66 89 45 a4          \tmov    %ax,-0x5c(%rbp)\n 437:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n 43a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 43d:\teb 67                \tjmp    4a6 <find_program_processes+0x86>\n 43f:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n 443:\t8b 75 fc             \tmov    -0x4(%rbp),%esi\n 446:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n 449:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n 44e:\t89 c7                \tmov    %eax,%edi\n 450:\te8 ab fb ff ff       \tcallq  0 <seek_read>\n 455:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 459:\t48 85 c0             \ttest   %rax,%rax\n 45c:\t74 44                \tje     4a2 <find_program_processes+0x82>\n 45e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 462:\t89 c2                \tmov    %eax,%edx\n 464:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n 467:\t8d 34 02             \tlea    (%rdx,%rax,1),%esi\n 46a:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n 46e:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n 471:\tb9 1e 00 00 00       \tmov    $0x1e,%ecx\n 476:\t89 c7                \tmov    %eax,%edi\n 478:\te8 83 fb ff ff       \tcallq  0 <seek_read>\n 47d:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n 481:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 486:\t48 89 c7             \tmov    %rax,%rdi\n 489:\te8 00 00 00 00       \tcallq  48e <find_program_processes+0x6e>\n 48e:\t85 c0                \ttest   %eax,%eax\n 490:\t75 10                \tjne    4a2 <find_program_processes+0x82>\n 492:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 499 <find_program_processes+0x79>\n 499:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 49d:\t48 01 d0             \tadd    %rdx,%rax\n 4a0:\teb 17                \tjmp    4b9 <find_program_processes+0x99>\n 4a2:\t83 45 fc 20          \taddl   $0x20,-0x4(%rbp)\n 4a6:\t0f b7 55 a4          \tmovzwl -0x5c(%rbp),%edx\n 4aa:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n 4ad:\t01 d0                \tadd    %edx,%eax\n 4af:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 4b2:\t72 8b                \tjb     43f <find_program_processes+0x1f>\n 4b4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4b9:\tc9                   \tleaveq \n 4ba:\tc3                   \tretq   ", "code_s": "__int64 __fastcall find_program_processes(unsigned int a1, unsigned int a2,\n                                          unsigned __int16 a3, int a4) {\n  char s1[Number];\n  __int64 <span class=\"supfact\">v8</span>[Number];\n  unsigned int i;\n  for (i = a2; i < a3 + a2; i += Number) {\n    seek_read(a1, i, (__int64)<span class=\"supfact\">v8</span>, Number);\n    if (<span class=\"supfact\">v8</span>[Number]) {\n      seek_read(a1, LODWORD(<span class=\"supfact\">v8</span>[Number]) + a4, (__int64)s1,\n                Number);\n      if (!strcmp(s1, String))\n        return qword_C18 + <span class=\"supfact\">v8</span>[Number];\n    }\n  }\n  return Number L;\n}", "code_t": "void *__cdecl find_program_processes(int fd, unsigned int symtab,\n                                     unsigned __int16 size,\n                                     unsigned int strtab) {\n  char name[Number];\n  elf32_sym <span class=\"supfact\">s</span>;\n  unsigned int a;\n  for (a = symtab; a < size + symtab; a += Number) {\n    seek_read(fd, a, (char *)&<span class=\"supfact\">s</span>, Number);\n    if (<span class=\"supfact\">s</span>.st_name) {\n      seek_read(fd, LODWORD(<span class=\"supfact\">s</span>.st_name) + strtab, name, Number);\n      if (!strcmp(name, String))\n        return &data.address[<span class=\"supfact\">s</span>.st_value];\n    }\n  }\n  return Number L;\n}", "var": [{"name": "v8", "type": "struct elf32_sym { elf32_word st_name; elf32_addr st_value; elf32_word st_size; unsigned __int8 st_info; unsigned __int8 st_other; elf32_half st_shndx; PADDING (4); }", "pred_name": "s", "ref_name": "s", "ref_type": "struct elf32_sym { elf32_word st_name; elf32_addr st_value; elf32_word st_size; unsigned __int8 st_info; unsigned __int8 st_other; elf32_half st_shndx; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "jtanx", "repo_name": "libclipboard", "path": "jtanx/libclipboard/a5bb405315a8c227b400ae53e138e8a073501fc810add8d462a26e6d2a667d6c", "path_in_repo": "jtanx/libclipboard/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 30          \tsub    $0x30,%rsp\n   b:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   f:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  13:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  17:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  1b:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  20:\t75 46                \tjne    68 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x68>\n  22:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  26:\t48 89 c7             \tmov    %rax,%rdi\n  29:\te8 00 00 00 00       \tcallq  2e <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x2e>\n  2e:\t48 39 45 c8          \tcmp    %rax,-0x38(%rbp)\n  32:\t74 34                \tje     68 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x68>\n  34:\t48 8b 5d d8          \tmov    -0x28(%rbp),%rbx\n  38:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  3c:\t48 89 c7             \tmov    %rax,%rdi\n  3f:\te8 00 00 00 00       \tcallq  44 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x44>\n  44:\t4c 8b 20             \tmov    (%rax),%r12\n  47:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  4b:\t48 89 c7             \tmov    %rax,%rdi\n  4e:\te8 00 00 00 00       \tcallq  53 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x53>\n  53:\t48 8b 00             \tmov    (%rax),%rax\n  56:\t4c 89 e2             \tmov    %r12,%rdx\n  59:\t48 89 c6             \tmov    %rax,%rsi\n  5c:\t48 89 df             \tmov    %rbx,%rdi\n  5f:\te8 00 00 00 00       \tcallq  64 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x64>\n  64:\t84 c0                \ttest   %al,%al\n  66:\t74 07                \tje     6f <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x6f>\n  68:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  6d:\teb 05                \tjmp    74 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x74>\n  6f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  74:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n  77:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  7b:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n  7f:\t0f b6 45 ef          \tmovzbl -0x11(%rbp),%eax\n  83:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  87:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n  8b:\t89 c7                \tmov    %eax,%edi\n  8d:\te8 00 00 00 00       \tcallq  92 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x92>\n  92:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  96:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  9a:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  9e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  a2:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n  a6:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  aa:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  ae:\t48 89 d6             \tmov    %rdx,%rsi\n  b1:\t48 89 c7             \tmov    %rax,%rdi\n  b4:\te8 00 00 00 00       \tcallq  b9 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0xb9>\n  b9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  bd:\t48 83 c4 30          \tadd    $0x30,%rsp\n  c1:\t5b                   \tpop    %rbx\n  c2:\t41 5c                \tpop    %r12\n  c4:\t5d                   \tpop    %rbp\n  c5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std _Rb_tree<\n    void const *, std pair<void const *const, testing internal CallReaction>,\n    std _Select1st<std pair<void const *const, testing internal CallReaction>>,\n    std less<void const *>,\n    std allocator<std pair<void const *const, testing internal CallReaction>>>\n_M_insert_node(__int64 a1, __int64 a2, __int64 a3, __int64 a4) {\n  unsigned __int64 v4;\n  unsigned __int64 *v5;\n  bool v6;\n  __int64 <span class=\"supfact\">v10</span>;\n  bool v11;\n  v6 = Number;\n  if (!a2 &&\n      a3 != std _Rb_tree<\n                void const *,\n                std pair<void const *const, testing internal CallReaction>,\n                std _Select1st<\n                    std pair<void const *const, testing internal CallReaction>>,\n                std less<void const *>,\n                std allocator<\n                    std pair<void const *const, testing internal CallReaction>>>\n                _M_end(a1)) {\n    v4 = *(_QWORD *)std _Rb_tree<\n        void const *,\n        std pair<void const *const, testing internal CallReaction>,\n        std _Select1st<\n            std pair<void const *const, testing internal CallReaction>>,\n        std less<void const *>,\n        std allocator<\n            std pair<void const *const, testing internal CallReaction>>>\n             _S_key(a3);\n    v5 = (unsigned __int64 *)std _Rb_tree<\n        void const *,\n        std pair<void const *const, testing internal CallReaction>,\n        std _Select1st<\n            std pair<void const *const, testing internal CallReaction>>,\n        std less<void const *>,\n        std allocator<\n            std pair<void const *const, testing internal CallReaction>>>\n        _S_key(a4);\n    if (!std less<void const *> operator()(a1, *v5, v4))\n      v6 = Number;\n  }\n  v11 = v6;\n  std _Rb_tree_insert_and_rebalance(v6, a4, a3, a1 + Number);\n  ++*(_QWORD *)(a1 + Number);\n  std _Rb_tree_iterator<\n      std pair<void const *const, testing internal CallReaction>>\n      _Rb_tree_iterator(&<span class=\"supfact\">v10</span>, a4);\n  return <span class=\"supfact\">v10</span>;\n}", "code_t": "std _Rb_tree<\n    void const *, std pair<void const *const, testing internal CallReaction>,\n    std _Select1st<std pair<void const *const, testing internal CallReaction>>,\n    std less<void const *>,\n    std allocator<std pair<void const *const, testing internal CallReaction>>>\n    iterator __cdecl std _Rb_tree<\n        void const *,\n        std pair<void const *const, testing internal CallReaction>,\n        std _Select1st<\n            std pair<void const *const, testing internal CallReaction>>,\n        std less<void const *>,\n        std allocator<\n            std pair<void const *const, testing internal CallReaction>>>\n    _M_insert_node(\n        std _Rb_tree<void const *,\n                     std pair<void const *const, testing internal CallReaction>,\n                     std _Select1st<std pair<void const *const,\n                                             testing internal CallReaction>>,\n                     std less<void const *>,\n                     std allocator<std pair<void const *const,\n                                            testing internal CallReaction>>>\n            *const this,\n        std _Rb_tree<void const *,\n                     std pair<void const *const, testing internal CallReaction>,\n                     std _Select1st<std pair<void const *const,\n                                             testing internal CallReaction>>,\n                     std less<void const *>,\n                     std allocator<std pair<void const *const,\n                                            testing internal CallReaction>>>\n            _Base_ptr __x,\n        std _Rb_tree<void const *,\n                     std pair<void const *const, testing internal CallReaction>,\n                     std _Select1st<std pair<void const *const,\n                                             testing internal CallReaction>>,\n                     std less<void const *>,\n                     std allocator<std pair<void const *const,\n                                            testing internal CallReaction>>>\n            _Base_ptr __p,\n        std _Rb_tree<void const *,\n                     std pair<void const *const, testing internal CallReaction>,\n                     std _Select1st<std pair<void const *const,\n                                             testing internal CallReaction>>,\n                     std less<void const *>,\n                     std allocator<std pair<void const *const,\n                                            testing internal CallReaction>>>\n            _Link_type __z) {\n  const void *v4;\n  const void **v5;\n  bool v6;\n  std _Rb_tree_iterator<\n      std pair<void const *const, testing internal CallReaction>>\n      <span class=\"supfact\">v10</span>;\n  bool __insert_left;\n  v6 = Number;\n  if (!__x &&\n      __p !=\n          std _Rb_tree<\n              void const *,\n              std pair<void const *const, testing internal CallReaction>,\n              std _Select1st<\n                  std pair<void const *const, testing internal CallReaction>>,\n              std less<void const *>,\n              std allocator<\n                  std pair<void const *const, testing internal CallReaction>>>\n              _M_end(this)) {\n    v4 = *std _Rb_tree<\n        void const *,\n        std pair<void const *const, testing internal CallReaction>,\n        std _Select1st<\n            std pair<void const *const, testing internal CallReaction>>,\n        std less<void const *>,\n        std allocator<\n            std pair<void const *const, testing internal CallReaction>>>\n             _S_key(__p);\n    v5 = (const void **)std _Rb_tree<\n        void const *,\n        std pair<void const *const, testing internal CallReaction>,\n        std _Select1st<\n            std pair<void const *const, testing internal CallReaction>>,\n        std less<void const *>,\n        std allocator<\n            std pair<void const *const, testing internal CallReaction>>>\n        _S_key(__z);\n    if (!std less<void const *> operator()(\n            (const std less<void const *> *const)this, *v5, v4))\n      v6 = Number;\n  }\n  __insert_left = v6;\n  std _Rb_tree_insert_and_rebalance(v6, __z, __p, &this->_M_impl._M_header);\n  ++this->_M_impl._M_node_count;\n  std _Rb_tree_iterator<\n      std pair<void const *const, testing internal CallReaction>>\n      _Rb_tree_iterator(&<span class=\"supfact\">v10</span>, __z);\n  return <span class=\"supfact\">v10</span>;\n}", "var": [{"name": "v10", "type": "X509 *", "pred_name": "v10", "ref_name": "v10", "ref_type": "struct std::_Rb_tree_iterator<std::pair<void const* const,testing::internal::CallReaction> > { std::_Rb_tree_iterator<std::pair<void const* const,testing::internal::CallReaction> >::_Base_ptr _M_node; }"}], "body_in_train": true}, {"repo_owner": "averainy", "repo_name": "averainy", "path": "averainy/averainy/16ed15e96c5e2b91c01c8027f5c73fae74f576180136b5a9590386c7bf0f0ac2", "path_in_repo": "averainy/averainy/c/c_learn_code_the_hard_way/valgrind-3.10.1/memcheck/tests/vbit-test/vbit_test-vbits.o", "objdump": "000000000000061c <truncate_vbits>:\n     61c:\t55                   \tpush   %rbp\n     61d:\t48 89 e5             \tmov    %rsp,%rbp\n     620:\t53                   \tpush   %rbx\n     621:\t48 83 ec 48          \tsub    $0x48,%rsp\n     625:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     629:\t89 75 b4             \tmov    %esi,-0x4c(%rbp)\n     62c:\t8b 45 10             \tmov    0x10(%rbp),%eax\n     62f:\t39 45 b4             \tcmp    %eax,-0x4c(%rbp)\n     632:\t76 19                \tjbe    64d <truncate_vbits+0x31>\n     634:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     639:\tba 9b 00 00 00       \tmov    $0x9b,%edx\n     63e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     643:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     648:\te8 00 00 00 00       \tcallq  64d <truncate_vbits+0x31>\n     64d:\t8b 45 10             \tmov    0x10(%rbp),%eax\n     650:\t39 45 b4             \tcmp    %eax,-0x4c(%rbp)\n     653:\t75 30                \tjne    685 <truncate_vbits+0x69>\n     655:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     659:\t48 8b 4d 10          \tmov    0x10(%rbp),%rcx\n     65d:\t48 8b 5d 18          \tmov    0x18(%rbp),%rbx\n     661:\t48 89 08             \tmov    %rcx,(%rax)\n     664:\t48 89 58 08          \tmov    %rbx,0x8(%rax)\n     668:\t48 8b 4d 20          \tmov    0x20(%rbp),%rcx\n     66c:\t48 8b 5d 28          \tmov    0x28(%rbp),%rbx\n     670:\t48 89 48 10          \tmov    %rcx,0x10(%rax)\n     674:\t48 89 58 18          \tmov    %rbx,0x18(%rax)\n     678:\t48 8b 55 30          \tmov    0x30(%rbp),%rdx\n     67c:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n     680:\te9 a2 01 00 00       \tjmpq   827 <truncate_vbits+0x20b>\n     685:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n     68c:\t00 \n     68d:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n     694:\t00 \n     695:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n     69c:\t00 \n     69d:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n     6a4:\t00 \n     6a5:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n     6ac:\t00 \n     6ad:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n     6b0:\t89 45 c0             \tmov    %eax,-0x40(%rbp)\n     6b3:\t83 7d b4 40          \tcmpl   $0x40,-0x4c(%rbp)\n     6b7:\t0f 87 f7 00 00 00    \tja     7b4 <truncate_vbits+0x198>\n     6bd:\t8b 45 10             \tmov    0x10(%rbp),%eax\n     6c0:\t83 f8 40             \tcmp    $0x40,%eax\n     6c3:\t77 22                \tja     6e7 <truncate_vbits+0xcb>\n     6c5:\t48 83 ec 08          \tsub    $0x8,%rsp\n     6c9:\tff 75 30             \tpushq  0x30(%rbp)\n     6cc:\tff 75 28             \tpushq  0x28(%rbp)\n     6cf:\tff 75 20             \tpushq  0x20(%rbp)\n     6d2:\tff 75 18             \tpushq  0x18(%rbp)\n     6d5:\tff 75 10             \tpushq  0x10(%rbp)\n     6d8:\te8 23 f9 ff ff       \tcallq  0 <get_bits64>\n     6dd:\t48 83 c4 30          \tadd    $0x30,%rsp\n     6e1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     6e5:\teb 32                \tjmp    719 <truncate_vbits+0xfd>\n     6e7:\t8b 45 10             \tmov    0x10(%rbp),%eax\n     6ea:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n     6ef:\t75 0a                \tjne    6fb <truncate_vbits+0xdf>\n     6f1:\t48 8b 45 18          \tmov    0x18(%rbp),%rax\n     6f5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     6f9:\teb 1e                \tjmp    719 <truncate_vbits+0xfd>\n     6fb:\t8b 45 10             \tmov    0x10(%rbp),%eax\n     6fe:\t3d 00 01 00 00       \tcmp    $0x100,%eax\n     703:\t75 0a                \tjne    70f <truncate_vbits+0xf3>\n     705:\t48 8b 45 18          \tmov    0x18(%rbp),%rax\n     709:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     70d:\teb 0a                \tjmp    719 <truncate_vbits+0xfd>\n     70f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     714:\te8 00 00 00 00       \tcallq  719 <truncate_vbits+0xfd>\n     719:\t83 7d b4 40          \tcmpl   $0x40,-0x4c(%rbp)\n     71d:\t74 54                \tje     773 <truncate_vbits+0x157>\n     71f:\t83 7d b4 40          \tcmpl   $0x40,-0x4c(%rbp)\n     723:\t77 58                \tja     77d <truncate_vbits+0x161>\n     725:\t83 7d b4 20          \tcmpl   $0x20,-0x4c(%rbp)\n     729:\t74 3f                \tje     76a <truncate_vbits+0x14e>\n     72b:\t83 7d b4 20          \tcmpl   $0x20,-0x4c(%rbp)\n     72f:\t77 4c                \tja     77d <truncate_vbits+0x161>\n     731:\t83 7d b4 10          \tcmpl   $0x10,-0x4c(%rbp)\n     735:\t74 29                \tje     760 <truncate_vbits+0x144>\n     737:\t83 7d b4 10          \tcmpl   $0x10,-0x4c(%rbp)\n     73b:\t77 40                \tja     77d <truncate_vbits+0x161>\n     73d:\t83 7d b4 01          \tcmpl   $0x1,-0x4c(%rbp)\n     741:\t74 08                \tje     74b <truncate_vbits+0x12f>\n     743:\t83 7d b4 08          \tcmpl   $0x8,-0x4c(%rbp)\n     747:\t74 0e                \tje     757 <truncate_vbits+0x13b>\n     749:\teb 32                \tjmp    77d <truncate_vbits+0x161>\n     74b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     74f:\t83 e0 01             \tand    $0x1,%eax\n     752:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n     755:\teb 30                \tjmp    787 <truncate_vbits+0x16b>\n     757:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     75b:\t88 45 c8             \tmov    %al,-0x38(%rbp)\n     75e:\teb 27                \tjmp    787 <truncate_vbits+0x16b>\n     760:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     764:\t66 89 45 c8          \tmov    %ax,-0x38(%rbp)\n     768:\teb 1d                \tjmp    787 <truncate_vbits+0x16b>\n     76a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     76e:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n     771:\teb 14                \tjmp    787 <truncate_vbits+0x16b>\n     773:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     777:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     77b:\teb 0a                \tjmp    787 <truncate_vbits+0x16b>\n     77d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     782:\te8 00 00 00 00       \tcallq  787 <truncate_vbits+0x16b>\n     787:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     78b:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     78f:\t48 8b 5d c8          \tmov    -0x38(%rbp),%rbx\n     793:\t48 89 08             \tmov    %rcx,(%rax)\n     796:\t48 89 58 08          \tmov    %rbx,0x8(%rax)\n     79a:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     79e:\t48 8b 5d d8          \tmov    -0x28(%rbp),%rbx\n     7a2:\t48 89 48 10          \tmov    %rcx,0x10(%rax)\n     7a6:\t48 89 58 18          \tmov    %rbx,0x18(%rax)\n     7aa:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     7ae:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n     7b2:\teb 73                \tjmp    827 <truncate_vbits+0x20b>\n     7b4:\t81 7d b4 80 00 00 00 \tcmpl   $0x80,-0x4c(%rbp)\n     7bb:\t75 60                \tjne    81d <truncate_vbits+0x201>\n     7bd:\t8b 45 10             \tmov    0x10(%rbp),%eax\n     7c0:\t3d 00 01 00 00       \tcmp    $0x100,%eax\n     7c5:\t74 19                \tje     7e0 <truncate_vbits+0x1c4>\n     7c7:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     7cc:\tba c0 00 00 00       \tmov    $0xc0,%edx\n     7d1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     7d6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     7db:\te8 00 00 00 00       \tcallq  7e0 <truncate_vbits+0x1c4>\n     7e0:\t48 8b 45 18          \tmov    0x18(%rbp),%rax\n     7e4:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     7e8:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n     7ec:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     7f0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     7f4:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     7f8:\t48 8b 5d c8          \tmov    -0x38(%rbp),%rbx\n     7fc:\t48 89 08             \tmov    %rcx,(%rax)\n     7ff:\t48 89 58 08          \tmov    %rbx,0x8(%rax)\n     803:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     807:\t48 8b 5d d8          \tmov    -0x28(%rbp),%rbx\n     80b:\t48 89 48 10          \tmov    %rcx,0x10(%rax)\n     80f:\t48 89 58 18          \tmov    %rbx,0x18(%rax)\n     813:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     817:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n     81b:\teb 0a                \tjmp    827 <truncate_vbits+0x20b>\n     81d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     822:\te8 00 00 00 00       \tcallq  827 <truncate_vbits+0x20b>\n     827:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     82b:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n     82f:\tc9                   \tleaveq \n     830:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall truncate_vbits(_QWORD *a1, __int64 a2, __int64 a3,\n                                  __int64 a4, __int64 a5, __int64 a6,\n                                  __int64 <span class=\"supfact\">a7</span>, __int64 a8,\n                                  __int64 a9, __int64 a10, __int64 a11) {\n  __int64 v12;\n  __int64 v13;\n  if ((unsigned int)a2 > (unsigned int)<span class=\"supfact\">a7</span>)\n    _assert_fail(String, String, Number, String);\n  if ((_DWORD)a2 == (_DWORD)<span class=\"supfact\">a7</span>) {\n    *a1 = <span class=\"supfact\">a7</span>;\n    a1[Number] = a8;\n    a1[Number] = a9;\n    a1[Number] = a10;\n    a1[Number] = a11;\n    return a1;\n  }\n  v12 = Number L;\n  if ((unsigned int)a2 <= Number) {\n    if ((unsigned int)<span class=\"supfact\">a7</span> > Number) {\n      if ((_DWORD)<span class=\"supfact\">a7</span> == Number) {\n        v13 = a8;\n      } else if ((_DWORD)<span class=\"supfact\">a7</span> == Number) {\n        v13 = a8;\n      } else {\n        panic(String);\n      }\n    } else {\n      v13 = get_bits64((__int64)a1, a2, a3, a4, a5, a6, <span class=\"supfact\">a7</span>, a8);\n    }\n    if ((_DWORD)a2 == Number) {\n      v12 = v13;\n      goto LABEL_27;\n    }\n    if ((_DWORD)a2 == Number) {\n      LODWORD(v12) = v13;\n      goto LABEL_27;\n    }\n    if ((unsigned int)a2 <= Number) {\n      if ((_DWORD)a2 == Number) {\n        LOWORD(v12) = v13;\n        goto LABEL_27;\n      }\n      if ((unsigned int)a2 <= Number) {\n        if ((_DWORD)a2 == Number) {\n          LODWORD(v12) = v13 & Number;\n        } else {\n          if ((_DWORD)a2 != Number)\n            goto LABEL_26;\n          LOBYTE(v12) = v13;\n        }\n      LABEL_27:\n        *a1 = (unsigned int)a2;\n        a1[Number] = v12;\n        a1[Number] = Number L;\n        a1[Number] = Number L;\n        a1[Number] = Number L;\n        return a1;\n      }\n    }\n  LABEL_26:\n    panic(String);\n    goto LABEL_27;\n  }\n  if ((_DWORD)a2 == Number) {\n    if ((_DWORD)<span class=\"supfact\">a7</span> != Number)\n      _assert_fail(String, String, Number, String);\n    *a1 = (unsigned int)a2;\n    a1[Number] = a8;\n    a1[Number] = a9;\n    a1[Number] = Number L;\n    a1[Number] = Number L;\n  } else {\n    panic(String);\n  }\n  return a1;\n}", "code_t": "vbits_t *__cdecl truncate_vbits(vbits_t *retstr, vbits_t <span class=\"supfact\">v</span>,\n                                unsigned int num_bits) {\n  $39179F93270BE9968B06D5033278D907 new_8;\n  __int64 bits;\n  if (num_bits > <span class=\"supfact\">v</span>.num_bits)\n    _assert_fail(String, String, Number, String);\n  if (num_bits == <span class=\"supfact\">v</span>.num_bits) {\n    *retstr = <span class=\"supfact\">v</span>;\n    return retstr;\n  }\n  *(_OWORD *)&new_8.u8 = Number;\n  *(_OWORD *)&new_8.u256[Number] = Number;\n  if (num_bits <= Number) {\n    if (<span class=\"supfact\">v</span>.num_bits > Number) {\n      if (<span class=\"supfact\">v</span>.num_bits == Number) {\n        bits = <span class=\"supfact\">v</span>.bits.u64;\n      } else if (<span class=\"supfact\">v</span>.num_bits == Number) {\n        bits = <span class=\"supfact\">v</span>.bits.u64;\n      } else {\n        panic(String);\n      }\n    } else {\n      bits = get_bits64(<span class=\"supfact\">v</span>);\n    }\n    if (num_bits == Number) {\n      new_8.u64 = bits;\n      goto LABEL_27;\n    }\n    if (num_bits == Number) {\n      new_8.u32 = bits;\n      goto LABEL_27;\n    }\n    if (num_bits <= Number) {\n      if (num_bits == Number) {\n        new_8.u16 = bits;\n        goto LABEL_27;\n      }\n      if (num_bits <= Number) {\n        if (num_bits == Number) {\n          new_8.u32 = bits & Number;\n        } else {\n          if (num_bits != Number)\n            goto LABEL_26;\n          new_8.u8 = bits;\n        }\n      LABEL_27:\n        *(_QWORD *)&retstr->num_bits = num_bits;\n        retstr->bits = new_8;\n        return retstr;\n      }\n    }\n  LABEL_26:\n    panic(String);\n    goto LABEL_27;\n  }\n  if (num_bits == Number) {\n    if (<span class=\"supfact\">v</span>.num_bits != Number)\n      _assert_fail(String, String, Number, String);\n    *(_OWORD *)&new_8.u8 = *(_OWORD *)&<span class=\"supfact\">v</span>.bits.u8;\n    *(_QWORD *)&retstr->num_bits = num_bits;\n    retstr->bits.u64 = <span class=\"supfact\">v</span>.bits.u64;\n    *(_OWORD *)&retstr->bits.u256[Number] = *(_OWORD *)&new_8.u256[Number];\n    retstr->bits.u256[Number] = Number L;\n  } else {\n    panic(String);\n  }\n  return retstr;\n}", "var": [{"name": "a7", "type": "struct t_arg { t_pfs str; int add; int flags; unsigned int width; int width_add; int precision; t_pf_mod mod; char conver; PADDING (3); int error; void * value; }", "pred_name": "all", "ref_name": "v", "ref_type": "struct vbits_t { unsigned int num_bits; PADDING (4); $39179F93270BE9968B06D5033278D907 bits; }"}], "body_in_train": false}, {"repo_owner": "rajatgupta1998", "repo_name": "kernel_x86-64", "path": "rajatgupta1998/kernel_x86-64/79c07eea4d0a1adc6fe02bd89312fa4a2409a359501939bcb5b4bb0bff7c8d82", "path_in_repo": "rajatgupta1998/kernel_x86-64/tools/perf/tests/topology.o", "objdump": "0000000000000092 <session_write_header>:\n  92:\t55                   \tpush   %rbp\n  93:\t48 89 e5             \tmov    %rsp,%rbp\n  96:\t48 83 ec 50          \tsub    $0x50,%rsp\n  9a:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  9e:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  a5:\t00 00 \n  a7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  ab:\t31 c0                \txor    %eax,%eax\n  ad:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  b4:\t00 \n  b5:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  bc:\t00 \n  bd:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  c4:\t00 \n  c5:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  cc:\t00 \n  cd:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  d4:\t00 \n  d5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  d9:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  dd:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  e1:\tba 00 00 00 00       \tmov    $0x0,%edx\n  e6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  eb:\t48 89 c7             \tmov    %rax,%rdi\n  ee:\te8 00 00 00 00       \tcallq  f3 <session_write_header+0x61>\n  f3:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  f7:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  fc:\t75 37                \tjne    135 <session_write_header+0xa3>\n  fe:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 104 <session_write_header+0x72>\n 104:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 10a:\t41 b8 29 00 00 00    \tmov    $0x29,%r8d\n 110:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 115:\tba 00 00 00 00       \tmov    $0x0,%edx\n 11a:\t89 c6                \tmov    %eax,%esi\n 11c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 121:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 126:\te8 00 00 00 00       \tcallq  12b <session_write_header+0x99>\n 12b:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 130:\te9 06 01 00 00       \tjmpq   23b <session_write_header+0x1a9>\n 135:\te8 00 00 00 00       \tcallq  13a <session_write_header+0xa8>\n 13a:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 13e:\t48 89 82 10 62 00 00 \tmov    %rax,0x6210(%rdx)\n 145:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 149:\t48 8b 80 10 62 00 00 \tmov    0x6210(%rax),%rax\n 150:\t48 85 c0             \ttest   %rax,%rax\n 153:\t75 37                \tjne    18c <session_write_header+0xfa>\n 155:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 15b <session_write_header+0xc9>\n 15b:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 161:\t41 b8 2c 00 00 00    \tmov    $0x2c,%r8d\n 167:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 16c:\tba 00 00 00 00       \tmov    $0x0,%edx\n 171:\t89 c6                \tmov    %eax,%esi\n 173:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 178:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 17d:\te8 00 00 00 00       \tcallq  182 <session_write_header+0xf0>\n 182:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 187:\te9 af 00 00 00       \tjmpq   23b <session_write_header+0x1a9>\n 18c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 190:\tbe 0d 00 00 00       \tmov    $0xd,%esi\n 195:\t48 89 c7             \tmov    %rax,%rdi\n 198:\te8 00 00 00 00       \tcallq  19d <session_write_header+0x10b>\n 19d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1a1:\tbe 07 00 00 00       \tmov    $0x7,%esi\n 1a6:\t48 89 c7             \tmov    %rax,%rdi\n 1a9:\te8 00 00 00 00       \tcallq  1ae <session_write_header+0x11c>\n 1ae:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1b2:\tbe 06 00 00 00       \tmov    $0x6,%esi\n 1b7:\t48 89 c7             \tmov    %rax,%rdi\n 1ba:\te8 00 00 00 00       \tcallq  1bf <session_write_header+0x12d>\n 1bf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1c3:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 1c7:\t48 8d 50 0a          \tlea    0xa(%rax),%rdx\n 1cb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1cf:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 1d3:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n 1d6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1da:\t48 8b b0 10 62 00 00 \tmov    0x6210(%rax),%rsi\n 1e1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1e5:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n 1ea:\t48 89 c7             \tmov    %rax,%rdi\n 1ed:\te8 00 00 00 00       \tcallq  1f2 <session_write_header+0x160>\n 1f2:\t85 c0                \ttest   %eax,%eax\n 1f4:\t74 34                \tje     22a <session_write_header+0x198>\n 1f6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1fc <session_write_header+0x16a>\n 1fc:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 202:\t41 b8 34 00 00 00    \tmov    $0x34,%r8d\n 208:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 20d:\tba 00 00 00 00       \tmov    $0x0,%edx\n 212:\t89 c6                \tmov    %eax,%esi\n 214:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 219:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 21e:\te8 00 00 00 00       \tcallq  223 <session_write_header+0x191>\n 223:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 228:\teb 11                \tjmp    23b <session_write_header+0x1a9>\n 22a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 22e:\t48 89 c7             \tmov    %rax,%rdi\n 231:\te8 00 00 00 00       \tcallq  236 <session_write_header+0x1a4>\n 236:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 23b:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 23f:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 246:\t00 00 \n 248:\t74 05                \tje     24f <session_write_header+0x1bd>\n 24a:\te8 00 00 00 00       \tcallq  24f <session_write_header+0x1bd>\n 24f:\tc9                   \tleaveq \n 250:\tc3                   \tretq   ", "code_s": "__int64 __fastcall session_write_header(__int64 a1) {\n  __int64 result;\n  __int64 v2;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  v4 = Number L;\n  v5 = Number L;\n  v6 = Number L;\n  v7 = Number L;\n  <span class=\"supfact\">v3</span> = a1;\n  v2 = perf_session__new(&<span class=\"supfact\">v3</span>, Number L, Number L);\n  if (v2) {\n    *(_QWORD *)(v2 + Number) = perf_evlist__new_default();\n    if (*(_QWORD *)(v2 + Number)) {\n      perf_header__set_feat(v2, Number L);\n      perf_header__set_feat(v2, Number L);\n      perf_header__set_feat(v2, Number L);\n      *(_QWORD *)(v2 + Number) += Number L;\n      if ((unsigned int)perf_session__write_header(\n              v2, *(_QWORD *)(v2 + Number), (unsigned int)v4, Number L)) {\n        eprintf(Number L, verbose, String, String, Number L, String);\n        result = Number;\n      } else {\n        perf_session__delete(v2);\n        result = Number L;\n      }\n    } else {\n      eprintf(Number L, verbose, String, String, Number L, String);\n      result = Number;\n    }\n  } else {\n    eprintf(Number L, verbose, String, String, Number L, String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl session_write_header(char *path) {\n  int result;\n  perf_session *session;\n  perf_data <span class=\"supfact\">data</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  *(_QWORD *)&<span class=\"supfact\">data</span>.file.fd = Number L;\n  *(_QWORD *)&<span class=\"supfact\">data</span>.is_pipe = Number L;\n  <span class=\"supfact\">data</span>.size = Number L;\n  *(_QWORD *)&<span class=\"supfact\">data</span>.mode = Number L;\n  <span class=\"supfact\">data</span>.file.path = path;\n  session = (perf_session *)perf_session__new(&<span class=\"supfact\">data</span>, Number L,\n                                              Number L);\n  if (session) {\n    session->evlist = (perf_evlist *)perf_evlist__new_default();\n    if (session->evlist) {\n      perf_header__set_feat(session, Number L);\n      perf_header__set_feat(session, Number L);\n      perf_header__set_feat(session, Number L);\n      session->header.data_size += Number L;\n      if ((unsigned int)perf_session__write_header(\n              session, session->evlist,\n              (unsigned int)<span class=\"supfact\">data</span>.file.fd, Number L)) {\n        eprintf(Number L, verbose, String, String, Number L, String);\n        result = Number;\n      } else {\n        perf_session__delete(session);\n        result = Number;\n      }\n    } else {\n      eprintf(Number L, verbose, String, String, Number L, String);\n      result = Number;\n    }\n  } else {\n    eprintf(Number L, verbose, String, String, Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "struct perf_data { perf_data_file file; bool is_pipe; bool force; PADDING (6); unsigned __int64 size; perf_data_mode mode; PADDING (4); }", "pred_name": "data", "ref_name": "data", "ref_type": "struct perf_data { perf_data_file file; bool is_pipe; bool force; PADDING (6); unsigned __int64 size; perf_data_mode mode; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "deeponion", "repo_name": "deeponion-legacy", "path": "deeponion/deeponion-legacy/67ec94185c036a4087635d7c4988300ac248e7a67adafa162618d00c1699e799", "path_in_repo": "deeponion/deeponion-legacy/src/leveldb/out-static/hash_test", "objdump": "0000000000403de0 <_ZN7leveldb2DB6DeleteERKNS_12WriteOptionsERKNS_5SliceE.cold>:\n  403de0:\t48 89 e7             \tmov    %rsp,%rdi\n  403de3:\te8 58 23 02 00       \tcallq  426140 <_ZN7leveldb10WriteBatchD1Ev>\n  403de8:\t48 89 ef             \tmov    %rbp,%rdi\n  403deb:\te8 c0 f7 ff ff       \tcallq  4035b0 <_Unwind_Resume@plt>", "code_s": "void __fastcall __noreturn leveldb DB Delete() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  void *retaddr;\n  leveldb WriteBatch ~WriteBatch((leveldb WriteBatch *)&retaddr);\n  _Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "code_t": "void __fastcall __noreturn leveldb DB Delete() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  void *retaddr;\n  leveldb WriteBatch ~WriteBatch((leveldb WriteBatch *)&retaddr);\n  _Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "var": [{"name": "v0", "type": "struct _Unwind_Exception *", "pred_name": "v0", "ref_name": "v0", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": true}, {"repo_owner": "KianWeng", "repo_name": "ls1b-linux-kernel", "path": "KianWeng/ls1b-linux-kernel/95c30774d61e867caed54852216be2733420129ffa1a0d7959b987028c11dff3", "path_in_repo": "KianWeng/ls1b-linux-kernel/tools/perf/util/annotate.o", "objdump": "00000000000029df <symbol__annotate>:\n    29df:\t55                   \tpush   %rbp\n    29e0:\t48 89 e5             \tmov    %rsp,%rbp\n    29e3:\t41 55                \tpush   %r13\n    29e5:\t41 54                \tpush   %r12\n    29e7:\t53                   \tpush   %rbx\n    29e8:\t48 81 ec e8 30 00 00 \tsub    $0x30e8,%rsp\n    29ef:\t48 89 bd 18 cf ff ff \tmov    %rdi,-0x30e8(%rbp)\n    29f6:\t48 89 b5 10 cf ff ff \tmov    %rsi,-0x30f0(%rbp)\n    29fd:\t48 89 95 08 cf ff ff \tmov    %rdx,-0x30f8(%rbp)\n    2a04:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2a0b:\t00 00 \n    2a0d:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    2a11:\t31 c0                \txor    %eax,%eax\n    2a13:\t48 8b 85 10 cf ff ff \tmov    -0x30f0(%rbp),%rax\n    2a1a:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n    2a1e:\t48 89 85 40 cf ff ff \tmov    %rax,-0x30c0(%rbp)\n    2a25:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    2a2c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2a31:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2a36:\t48 89 c7             \tmov    %rax,%rdi\n    2a39:\te8 00 00 00 00       \tcallq  2a3e <symbol__annotate+0x5f>\n    2a3e:\t48 89 85 30 cf ff ff \tmov    %rax,-0x30d0(%rbp)\n    2a45:\tc6 85 2a cf ff ff 01 \tmovb   $0x1,-0x30d6(%rbp)\n    2a4c:\tc7 85 2c cf ff ff 00 \tmovl   $0x0,-0x30d4(%rbp)\n    2a53:\t00 00 00 \n    2a56:\tc6 85 2b cf ff ff 00 \tmovb   $0x0,-0x30d5(%rbp)\n    2a5d:\t48 83 bd 30 cf ff ff \tcmpq   $0x0,-0x30d0(%rbp)\n    2a64:\t00 \n    2a65:\t74 1b                \tje     2a82 <symbol__annotate+0xa3>\n    2a67:\t48 8b 95 30 cf ff ff \tmov    -0x30d0(%rbp),%rdx\n    2a6e:\t48 8d 85 d0 cf ff ff \tlea    -0x3030(%rbp),%rax\n    2a75:\tbe 00 10 00 00       \tmov    $0x1000,%esi\n    2a7a:\t48 89 c7             \tmov    %rax,%rdi\n    2a7d:\te8 4a da ff ff       \tcallq  4cc <__symbol__join_symfs>\n    2a82:\t48 83 bd 30 cf ff ff \tcmpq   $0x0,-0x30d0(%rbp)\n    2a89:\t00 \n    2a8a:\t75 4a                \tjne    2ad6 <symbol__annotate+0xf7>\n    2a8c:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    2a93:\t0f b6 40 6c          \tmovzbl 0x6c(%rax),%eax\n    2a97:\t83 e0 02             \tand    $0x2,%eax\n    2a9a:\t84 c0                \ttest   %al,%al\n    2a9c:\t0f 84 99 00 00 00    \tje     2b3b <symbol__annotate+0x15c>\n    2aa2:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2aa9:\t48 8d 50 2c          \tlea    0x2c(%rax),%rdx\n    2aad:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2ab3 <symbol__annotate+0xd4>\n    2ab3:\t48 89 d1             \tmov    %rdx,%rcx\n    2ab6:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2abb:\t89 c6                \tmov    %eax,%esi\n    2abd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2ac2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2ac7:\te8 00 00 00 00       \tcallq  2acc <symbol__annotate+0xed>\n    2acc:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    2ad1:\te9 a1 05 00 00       \tjmpq   3077 <symbol__annotate+0x698>\n    2ad6:\t48 8d 8d d0 df ff ff \tlea    -0x2030(%rbp),%rcx\n    2add:\t48 8d 85 d0 cf ff ff \tlea    -0x3030(%rbp),%rax\n    2ae4:\tba 00 20 00 00       \tmov    $0x2000,%edx\n    2ae9:\t48 89 ce             \tmov    %rcx,%rsi\n    2aec:\t48 89 c7             \tmov    %rax,%rdi\n    2aef:\te8 00 00 00 00       \tcallq  2af4 <symbol__annotate+0x115>\n    2af4:\t48 85 c0             \ttest   %rax,%rax\n    2af7:\t78 31                \tjs     2b2a <symbol__annotate+0x14b>\n    2af9:\t48 8d 85 d0 df ff ff \tlea    -0x2030(%rbp),%rax\n    2b00:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2b05:\t48 89 c7             \tmov    %rax,%rdi\n    2b08:\te8 00 00 00 00       \tcallq  2b0d <symbol__annotate+0x12e>\n    2b0d:\t48 85 c0             \ttest   %rax,%rax\n    2b10:\t75 18                \tjne    2b2a <symbol__annotate+0x14b>\n    2b12:\t48 8d 85 d0 cf ff ff \tlea    -0x3030(%rbp),%rax\n    2b19:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    2b1e:\t48 89 c7             \tmov    %rax,%rdi\n    2b21:\te8 00 00 00 00       \tcallq  2b26 <symbol__annotate+0x147>\n    2b26:\t85 c0                \ttest   %eax,%eax\n    2b28:\t74 49                \tje     2b73 <symbol__annotate+0x194>\n    2b2a:\t48 8b 85 30 cf ff ff \tmov    -0x30d0(%rbp),%rax\n    2b31:\t48 89 c7             \tmov    %rax,%rdi\n    2b34:\te8 00 00 00 00       \tcallq  2b39 <symbol__annotate+0x15a>\n    2b39:\teb 01                \tjmp    2b3c <symbol__annotate+0x15d>\n    2b3b:\t90                   \tnop\n    2b3c:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    2b43:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n    2b4a:\t48 89 85 30 cf ff ff \tmov    %rax,-0x30d0(%rbp)\n    2b51:\t48 8b 95 30 cf ff ff \tmov    -0x30d0(%rbp),%rdx\n    2b58:\t48 8d 85 d0 cf ff ff \tlea    -0x3030(%rbp),%rax\n    2b5f:\tbe 00 10 00 00       \tmov    $0x1000,%esi\n    2b64:\t48 89 c7             \tmov    %rax,%rdi\n    2b67:\te8 60 d9 ff ff       \tcallq  4cc <__symbol__join_symfs>\n    2b6c:\tc6 85 2a cf ff ff 00 \tmovb   $0x0,-0x30d6(%rbp)\n    2b73:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    2b7a:\t8b 40 64             \tmov    0x64(%rax),%eax\n    2b7d:\t85 c0                \ttest   %eax,%eax\n    2b7f:\t0f 85 36 01 00 00    \tjne    2cbb <symbol__annotate+0x2dc>\n    2b85:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    2b8c:\t48 89 c7             \tmov    %rax,%rdi\n    2b8f:\te8 99 d8 ff ff       \tcallq  42d <dso__is_kcore>\n    2b94:\t83 f0 01             \txor    $0x1,%eax\n    2b97:\t84 c0                \ttest   %al,%al\n    2b99:\t0f 84 1c 01 00 00    \tje     2cbb <symbol__annotate+0x2dc>\n    2b9f:\t48 b8 20 77 69 74 68 \tmovabs $0x7562206874697720,%rax\n    2ba6:\t20 62 75 \n    2ba9:\t48 ba 69 6c 64 20 69 \tmovabs $0x20646920646c69,%rdx\n    2bb0:\t64 20 00 \n    2bb3:\t48 89 85 90 cf ff ff \tmov    %rax,-0x3070(%rbp)\n    2bba:\t48 89 95 98 cf ff ff \tmov    %rdx,-0x3068(%rbp)\n    2bc1:\t48 c7 85 a0 cf ff ff \tmovq   $0x0,-0x3060(%rbp)\n    2bc8:\t00 00 00 00 \n    2bcc:\t48 c7 85 a8 cf ff ff \tmovq   $0x0,-0x3058(%rbp)\n    2bd3:\t00 00 00 00 \n    2bd7:\t48 c7 85 b0 cf ff ff \tmovq   $0x0,-0x3050(%rbp)\n    2bde:\t00 00 00 00 \n    2be2:\t48 c7 85 b8 cf ff ff \tmovq   $0x0,-0x3048(%rbp)\n    2be9:\t00 00 00 00 \n    2bed:\t48 c7 85 c0 cf ff ff \tmovq   $0x0,-0x3040(%rbp)\n    2bf4:\t00 00 00 00 \n    2bf8:\t48 c7 85 38 cf ff ff \tmovq   $0x0,-0x30c8(%rbp)\n    2bff:\t00 00 00 00 \n    2c03:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    2c0a:\t0f b6 40 6c          \tmovzbl 0x6c(%rax),%eax\n    2c0e:\t83 e0 10             \tand    $0x10,%eax\n    2c11:\t84 c0                \ttest   %al,%al\n    2c13:\t0f 85 24 04 00 00    \tjne    303d <symbol__annotate+0x65e>\n    2c19:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    2c20:\t0f b6 40 6c          \tmovzbl 0x6c(%rax),%eax\n    2c24:\t83 e0 02             \tand    $0x2,%eax\n    2c27:\t84 c0                \ttest   %al,%al\n    2c29:\t74 34                \tje     2c5f <symbol__annotate+0x280>\n    2c2b:\t48 8d 85 90 cf ff ff \tlea    -0x3070(%rbp),%rax\n    2c32:\t48 83 c0 0f          \tadd    $0xf,%rax\n    2c36:\t48 8b 95 40 cf ff ff \tmov    -0x30c0(%rbp),%rdx\n    2c3d:\t48 8d 4a 70          \tlea    0x70(%rdx),%rcx\n    2c41:\t48 89 c2             \tmov    %rax,%rdx\n    2c44:\tbe 14 00 00 00       \tmov    $0x14,%esi\n    2c49:\t48 89 cf             \tmov    %rcx,%rdi\n    2c4c:\te8 00 00 00 00       \tcallq  2c51 <symbol__annotate+0x272>\n    2c51:\t48 8d 85 90 cf ff ff \tlea    -0x3070(%rbp),%rax\n    2c58:\t48 89 85 38 cf ff ff \tmov    %rax,-0x30c8(%rbp)\n    2c5f:\tc7 85 2c cf ff ff fe \tmovl   $0xfffffffe,-0x30d4(%rbp)\n    2c66:\tff ff ff \n    2c69:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    2c70:\t0f b6 50 6c          \tmovzbl 0x6c(%rax),%edx\n    2c74:\t83 ca 10             \tor     $0x10,%edx\n    2c77:\t88 50 6c             \tmov    %dl,0x6c(%rax)\n    2c7a:\t48 8b 85 38 cf ff ff \tmov    -0x30c8(%rbp),%rax\n    2c81:\t48 85 c0             \ttest   %rax,%rax\n    2c84:\t75 05                \tjne    2c8b <symbol__annotate+0x2ac>\n    2c86:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2c8b:\t48 8b 95 18 cf ff ff \tmov    -0x30e8(%rbp),%rdx\n    2c92:\t48 83 c2 2c          \tadd    $0x2c,%rdx\n    2c96:\t8b 35 00 00 00 00    \tmov    0x0(%rip),%esi        # 2c9c <symbol__annotate+0x2bd>\n    2c9c:\t49 89 c0             \tmov    %rax,%r8\n    2c9f:\t48 89 d1             \tmov    %rdx,%rcx\n    2ca2:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2ca7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2cac:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2cb1:\te8 00 00 00 00       \tcallq  2cb6 <symbol__annotate+0x2d7>\n    2cb6:\te9 86 03 00 00       \tjmpq   3041 <symbol__annotate+0x662>\n    2cbb:\t48 8b 85 10 cf ff ff \tmov    -0x30f0(%rbp),%rax\n    2cc2:\t48 8b 48 68          \tmov    0x68(%rax),%rcx\n    2cc6:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2ccd:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n    2cd1:\t48 8b 85 10 cf ff ff \tmov    -0x30f0(%rbp),%rax\n    2cd8:\t48 89 d6             \tmov    %rdx,%rsi\n    2cdb:\t48 89 c7             \tmov    %rax,%rdi\n    2cde:\tff d1                \tcallq  *%rcx\n    2ce0:\t48 89 c3             \tmov    %rax,%rbx\n    2ce3:\t48 8b 85 10 cf ff ff \tmov    -0x30f0(%rbp),%rax\n    2cea:\t48 8b 48 68          \tmov    0x68(%rax),%rcx\n    2cee:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2cf5:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    2cf9:\t48 8b 85 10 cf ff ff \tmov    -0x30f0(%rbp),%rax\n    2d00:\t48 89 d6             \tmov    %rdx,%rsi\n    2d03:\t48 89 c7             \tmov    %rax,%rdi\n    2d06:\tff d1                \tcallq  *%rcx\n    2d08:\t48 89 c2             \tmov    %rax,%rdx\n    2d0b:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2d12:\t48 8d 70 2c          \tlea    0x2c(%rax),%rsi\n    2d16:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2d1c <symbol__annotate+0x33d>\n    2d1c:\t48 8b 8d 30 cf ff ff \tmov    -0x30d0(%rbp),%rcx\n    2d23:\t53                   \tpush   %rbx\n    2d24:\t52                   \tpush   %rdx\n    2d25:\t49 89 f1             \tmov    %rsi,%r9\n    2d28:\t49 89 c8             \tmov    %rcx,%r8\n    2d2b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    2d30:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2d35:\t89 c6                \tmov    %eax,%esi\n    2d37:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    2d3c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2d41:\te8 00 00 00 00       \tcallq  2d46 <symbol__annotate+0x367>\n    2d46:\t48 83 c4 10          \tadd    $0x10,%rsp\n    2d4a:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2d51:\t48 8d 48 2c          \tlea    0x2c(%rax),%rcx\n    2d55:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    2d5c:\t48 8b b0 90 00 00 00 \tmov    0x90(%rax),%rsi\n    2d63:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2d69 <symbol__annotate+0x38a>\n    2d69:\t48 8b bd 18 cf ff ff \tmov    -0x30e8(%rbp),%rdi\n    2d70:\t48 8b 95 40 cf ff ff \tmov    -0x30c0(%rbp),%rdx\n    2d77:\t48 83 ec 08          \tsub    $0x8,%rsp\n    2d7b:\t51                   \tpush   %rcx\n    2d7c:\t49 89 f9             \tmov    %rdi,%r9\n    2d7f:\t49 89 f0             \tmov    %rsi,%r8\n    2d82:\t48 89 d1             \tmov    %rdx,%rcx\n    2d85:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2d8a:\t89 c6                \tmov    %eax,%esi\n    2d8c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    2d91:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2d96:\te8 00 00 00 00       \tcallq  2d9b <symbol__annotate+0x3bc>\n    2d9b:\t48 83 c4 10          \tadd    $0x10,%rsp\n    2d9f:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    2da6:\t48 89 c7             \tmov    %rax,%rdi\n    2da9:\te8 7f d6 ff ff       \tcallq  42d <dso__is_kcore>\n    2dae:\t84 c0                \ttest   %al,%al\n    2db0:\t0f 84 d0 00 00 00    \tje     2e86 <symbol__annotate+0x4a7>\n    2db6:\t48 8d 85 d0 cf ff ff \tlea    -0x3030(%rbp),%rax\n    2dbd:\t48 89 85 50 cf ff ff \tmov    %rax,-0x30b0(%rbp)\n    2dc4:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2dcb:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    2dcf:\t48 8b 85 10 cf ff ff \tmov    -0x30f0(%rbp),%rax\n    2dd6:\t48 89 d6             \tmov    %rdx,%rsi\n    2dd9:\t48 89 c7             \tmov    %rax,%rdi\n    2ddc:\te8 00 00 00 00       \tcallq  2de1 <symbol__annotate+0x402>\n    2de1:\t48 89 85 58 cf ff ff \tmov    %rax,-0x30a8(%rbp)\n    2de8:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2def:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    2df3:\t48 89 85 60 cf ff ff \tmov    %rax,-0x30a0(%rbp)\n    2dfa:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2e01:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n    2e05:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2e0c:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    2e10:\t48 29 c2             \tsub    %rax,%rdx\n    2e13:\t48 89 d0             \tmov    %rdx,%rax\n    2e16:\t48 89 85 68 cf ff ff \tmov    %rax,-0x3098(%rbp)\n    2e1d:\t48 8d 85 50 cf ff ff \tlea    -0x30b0(%rbp),%rax\n    2e24:\t48 89 c7             \tmov    %rax,%rdi\n    2e27:\te8 00 00 00 00       \tcallq  2e2c <symbol__annotate+0x44d>\n    2e2c:\t85 c0                \ttest   %eax,%eax\n    2e2e:\t75 56                \tjne    2e86 <symbol__annotate+0x4a7>\n    2e30:\tc6 85 2b cf ff ff 01 \tmovb   $0x1,-0x30d5(%rbp)\n    2e37:\t48 8d 85 50 cf ff ff \tlea    -0x30b0(%rbp),%rax\n    2e3e:\t48 8d 48 20          \tlea    0x20(%rax),%rcx\n    2e42:\t48 8d 85 d0 cf ff ff \tlea    -0x3030(%rbp),%rax\n    2e49:\tba 00 10 00 00       \tmov    $0x1000,%edx\n    2e4e:\t48 89 ce             \tmov    %rcx,%rsi\n    2e51:\t48 89 c7             \tmov    %rax,%rdi\n    2e54:\te8 00 00 00 00       \tcallq  2e59 <symbol__annotate+0x47a>\n    2e59:\t80 bd 2a cf ff ff 00 \tcmpb   $0x0,-0x30d6(%rbp)\n    2e60:\t74 16                \tje     2e78 <symbol__annotate+0x499>\n    2e62:\t48 8b 85 30 cf ff ff \tmov    -0x30d0(%rbp),%rax\n    2e69:\t48 89 c7             \tmov    %rax,%rdi\n    2e6c:\te8 00 00 00 00       \tcallq  2e71 <symbol__annotate+0x492>\n    2e71:\tc6 85 2a cf ff ff 00 \tmovb   $0x0,-0x30d6(%rbp)\n    2e78:\t48 8d 85 d0 cf ff ff \tlea    -0x3030(%rbp),%rax\n    2e7f:\t48 89 85 30 cf ff ff \tmov    %rax,-0x30d0(%rbp)\n    2e86:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 2e8d <symbol__annotate+0x4ae>\n    2e8d:\t84 c0                \ttest   %al,%al\n    2e8f:\t74 08                \tje     2e99 <symbol__annotate+0x4ba>\n    2e91:\t41 bd 00 00 00 00    \tmov    $0x0,%r13d\n    2e97:\teb 06                \tjmp    2e9f <symbol__annotate+0x4c0>\n    2e99:\t41 bd 00 00 00 00    \tmov    $0x0,%r13d\n    2e9f:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 2ea6 <symbol__annotate+0x4c7>\n    2ea6:\t84 c0                \ttest   %al,%al\n    2ea8:\t74 08                \tje     2eb2 <symbol__annotate+0x4d3>\n    2eaa:\t41 bc 00 00 00 00    \tmov    $0x0,%r12d\n    2eb0:\teb 06                \tjmp    2eb8 <symbol__annotate+0x4d9>\n    2eb2:\t41 bc 00 00 00 00    \tmov    $0x0,%r12d\n    2eb8:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2ebf:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n    2ec3:\t48 8b 85 10 cf ff ff \tmov    -0x30f0(%rbp),%rax\n    2eca:\t48 89 d6             \tmov    %rdx,%rsi\n    2ecd:\t48 89 c7             \tmov    %rax,%rdi\n    2ed0:\te8 00 00 00 00       \tcallq  2ed5 <symbol__annotate+0x4f6>\n    2ed5:\t48 89 c3             \tmov    %rax,%rbx\n    2ed8:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2edf:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    2ee3:\t48 8b 85 10 cf ff ff \tmov    -0x30f0(%rbp),%rax\n    2eea:\t48 89 d6             \tmov    %rdx,%rsi\n    2eed:\t48 89 c7             \tmov    %rax,%rdi\n    2ef0:\te8 00 00 00 00       \tcallq  2ef5 <symbol__annotate+0x516>\n    2ef5:\t48 89 c2             \tmov    %rax,%rdx\n    2ef8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2eff <symbol__annotate+0x520>\n    2eff:\t48 85 c0             \ttest   %rax,%rax\n    2f02:\t74 09                \tje     2f0d <symbol__annotate+0x52e>\n    2f04:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 2f0b <symbol__annotate+0x52c>\n    2f0b:\teb 05                \tjmp    2f12 <symbol__annotate+0x533>\n    2f0d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2f12:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2f19 <symbol__annotate+0x53a>\n    2f19:\t48 85 c0             \ttest   %rax,%rax\n    2f1c:\t74 08                \tje     2f26 <symbol__annotate+0x547>\n    2f1e:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    2f24:\teb 06                \tjmp    2f2c <symbol__annotate+0x54d>\n    2f26:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    2f2c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2f33 <symbol__annotate+0x554>\n    2f33:\t48 85 c0             \ttest   %rax,%rax\n    2f36:\t74 09                \tje     2f41 <symbol__annotate+0x562>\n    2f38:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2f3f <symbol__annotate+0x560>\n    2f3f:\teb 05                \tjmp    2f46 <symbol__annotate+0x567>\n    2f41:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2f46:\t48 8d bd d0 df ff ff \tlea    -0x2030(%rbp),%rdi\n    2f4d:\tff b5 30 cf ff ff    \tpushq  -0x30d0(%rbp)\n    2f53:\t48 8d 8d d0 cf ff ff \tlea    -0x3030(%rbp),%rcx\n    2f5a:\t51                   \tpush   %rcx\n    2f5b:\t41 55                \tpush   %r13\n    2f5d:\t41 54                \tpush   %r12\n    2f5f:\t53                   \tpush   %rbx\n    2f60:\t52                   \tpush   %rdx\n    2f61:\t49 89 f1             \tmov    %rsi,%r9\n    2f64:\t48 89 c1             \tmov    %rax,%rcx\n    2f67:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2f6c:\tbe 00 20 00 00       \tmov    $0x2000,%esi\n    2f71:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2f76:\te8 00 00 00 00       \tcallq  2f7b <symbol__annotate+0x59c>\n    2f7b:\t48 83 c4 30          \tadd    $0x30,%rsp\n    2f7f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2f85 <symbol__annotate+0x5a6>\n    2f85:\t48 8d 95 d0 df ff ff \tlea    -0x2030(%rbp),%rdx\n    2f8c:\t48 89 d1             \tmov    %rdx,%rcx\n    2f8f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2f94:\t89 c6                \tmov    %eax,%esi\n    2f96:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    2f9b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2fa0:\te8 00 00 00 00       \tcallq  2fa5 <symbol__annotate+0x5c6>\n    2fa5:\t48 8d 85 d0 df ff ff \tlea    -0x2030(%rbp),%rax\n    2fac:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2fb1:\t48 89 c7             \tmov    %rax,%rdi\n    2fb4:\te8 00 00 00 00       \tcallq  2fb9 <symbol__annotate+0x5da>\n    2fb9:\t48 89 85 48 cf ff ff \tmov    %rax,-0x30b8(%rbp)\n    2fc0:\t48 83 bd 48 cf ff ff \tcmpq   $0x0,-0x30b8(%rbp)\n    2fc7:\t00 \n    2fc8:\t74 76                \tje     3040 <symbol__annotate+0x661>\n    2fca:\teb 28                \tjmp    2ff4 <symbol__annotate+0x615>\n    2fcc:\t48 8b 8d 08 cf ff ff \tmov    -0x30f8(%rbp),%rcx\n    2fd3:\t48 8b 95 48 cf ff ff \tmov    -0x30b8(%rbp),%rdx\n    2fda:\t48 8b b5 10 cf ff ff \tmov    -0x30f0(%rbp),%rsi\n    2fe1:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    2fe8:\t48 89 c7             \tmov    %rax,%rdi\n    2feb:\te8 1e f5 ff ff       \tcallq  250e <symbol__parse_objdump_line>\n    2ff0:\t85 c0                \ttest   %eax,%eax\n    2ff2:\t78 15                \tjs     3009 <symbol__annotate+0x62a>\n    2ff4:\t48 8b 85 48 cf ff ff \tmov    -0x30b8(%rbp),%rax\n    2ffb:\t48 89 c7             \tmov    %rax,%rdi\n    2ffe:\te8 00 00 00 00       \tcallq  3003 <symbol__annotate+0x624>\n    3003:\t85 c0                \ttest   %eax,%eax\n    3005:\t74 c5                \tje     2fcc <symbol__annotate+0x5ed>\n    3007:\teb 01                \tjmp    300a <symbol__annotate+0x62b>\n    3009:\t90                   \tnop\n    300a:\t48 8b 85 40 cf ff ff \tmov    -0x30c0(%rbp),%rax\n    3011:\t48 89 c7             \tmov    %rax,%rdi\n    3014:\te8 14 d4 ff ff       \tcallq  42d <dso__is_kcore>\n    3019:\t84 c0                \ttest   %al,%al\n    301b:\t74 0f                \tje     302c <symbol__annotate+0x64d>\n    301d:\t48 8b 85 18 cf ff ff \tmov    -0x30e8(%rbp),%rax\n    3024:\t48 89 c7             \tmov    %rax,%rdi\n    3027:\te8 9c f8 ff ff       \tcallq  28c8 <delete_last_nop>\n    302c:\t48 8b 85 48 cf ff ff \tmov    -0x30b8(%rbp),%rax\n    3033:\t48 89 c7             \tmov    %rax,%rdi\n    3036:\te8 00 00 00 00       \tcallq  303b <symbol__annotate+0x65c>\n    303b:\teb 04                \tjmp    3041 <symbol__annotate+0x662>\n    303d:\t90                   \tnop\n    303e:\teb 01                \tjmp    3041 <symbol__annotate+0x662>\n    3040:\t90                   \tnop\n    3041:\t80 bd 2b cf ff ff 00 \tcmpb   $0x0,-0x30d5(%rbp)\n    3048:\t74 0f                \tje     3059 <symbol__annotate+0x67a>\n    304a:\t48 8d 85 50 cf ff ff \tlea    -0x30b0(%rbp),%rax\n    3051:\t48 89 c7             \tmov    %rax,%rdi\n    3054:\te8 00 00 00 00       \tcallq  3059 <symbol__annotate+0x67a>\n    3059:\t80 bd 2a cf ff ff 00 \tcmpb   $0x0,-0x30d6(%rbp)\n    3060:\t74 0f                \tje     3071 <symbol__annotate+0x692>\n    3062:\t48 8b 85 30 cf ff ff \tmov    -0x30d0(%rbp),%rax\n    3069:\t48 89 c7             \tmov    %rax,%rdi\n    306c:\te8 00 00 00 00       \tcallq  3071 <symbol__annotate+0x692>\n    3071:\t8b 85 2c cf ff ff    \tmov    -0x30d4(%rbp),%eax\n    3077:\t48 8b 5d d8          \tmov    -0x28(%rbp),%rbx\n    307b:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n    3082:\t00 00 \n    3084:\t74 05                \tje     308b <symbol__annotate+0x6ac>\n    3086:\te8 00 00 00 00       \tcallq  308b <symbol__annotate+0x6ac>\n    308b:\t48 8d 65 e8          \tlea    -0x18(%rbp),%rsp\n    308f:\t5b                   \tpop    %rbx\n    3090:\t41 5c                \tpop    %r12\n    3092:\t41 5d                \tpop    %r13\n    3094:\t5d                   \tpop    %rbp\n    3095:\tc3                   \tretq   ", "code_s": "__int64 __fastcall symbol__annotate(__int64 a1, __int64 a2, __int64 a3) {\n  const char *v4;\n  __int64 v5;\n  __int64 v6;\n  const char *v7;\n  const char *v8;\n  __int64 v9;\n  __int64 v10;\n  const char *v11;\n  const char *v12;\n  const char *v13;\n  char v16;\n  char v17;\n  unsigned int v18;\n  char *ptr;\n  char *v20;\n  __int64 v21;\n  FILE *stream;\n  __int64 <span class=\"supfact\">v23</span>[Number];\n  __int64 v24;\n  char v25[Number];\n  __int64 v26;\n  __int64 v27;\n  __int64 v28;\n  __int64 v29;\n  __int64 v30;\n  char path[Number];\n  char buf[Number];\n  unsigned __int64 v33;\n  v33 = __readfsqword(Number);\n  v21 = *(_QWORD *)(a2 + Number);\n  ptr = (char *)dso__build_id_filename(v21, Number L, Number L);\n  v16 = Number;\n  v18 = Number;\n  v17 = Number;\n  if (ptr)\n    _symbol__join_symfs(path, Number L, (__int64)ptr);\n  if (ptr) {\n    if (readlink(path, buf, Number) >= Number && !strstr(buf, String) &&\n        !access(path, Number))\n      goto LABEL_11;\n    free(ptr);\n  } else if ((*(_BYTE *)(v21 + Number) & Number) != Number) {\n    eprintf(Number L, verbose, String, (const char *)(a1 + Number));\n    return Number L;\n  }\n  ptr = *(char **)(v21 + Number);\n  _symbol__join_symfs(path, Number L, (__int64)ptr);\n  v16 = Number;\nLABEL_11:\n  if (*(_DWORD *)(v21 + Number) || dso__is_kcore(v21)) {\n    v5 = (*(__int64(__fastcall **)(__int64, _QWORD))(a2 + Number))(\n        a2, *(_QWORD *)(a1 + Number));\n    v6 = (*(__int64(__fastcall **)(__int64, _QWORD))(a2 + Number))(\n        a2, *(_QWORD *)(a1 + Number));\n    eprintf(Number L, verbose, String, String, ptr, (const char *)(a1 + Number),\n            v6, v5);\n    eprintf(Number L, verbose, String, (const void *)v21,\n            *(const char **)(v21 + Number), (const void *)a1,\n            (const char *)(a1 + Number));\n    if (dso__is_kcore(v21)) {\n      <span class=\"supfact\">v23</span>[Number] = (__int64)path;\n      <span class=\"supfact\">v23</span>[Number] =\n          map__rip_2objdump(a2, *(_QWORD *)(a1 + Number));\n      <span class=\"supfact\">v23</span>[Number] = *(_QWORD *)(a1 + Number);\n      <span class=\"supfact\">v23</span>[Number] =\n          *(_QWORD *)(a1 + Number) - *(_QWORD *)(a1 + Number);\n      if (!(unsigned int)kcore_extract__create(<span class=\"supfact\">v23</span>)) {\n        v17 = Number;\n        strlcpy(path, &v24, Number L);\n        if (v16) {\n          free(ptr);\n          v16 = Number;\n        }\n        ptr = path;\n      }\n    }\n    if (LOBYTE(symbol_conf[Number]))\n      v7 = String;\n    else\n      v7 = (const char *)&unk_4942;\n    if (HIBYTE(symbol_conf[Number]))\n      v8 = (const char *)&unk_4942;\n    else\n      v8 = String;\n    v9 = map__rip_2objdump(a2, *(_QWORD *)(a1 + Number));\n    v10 = map__rip_2objdump(a2, *(_QWORD *)(a1 + Number));\n    if (disassembler_style)\n      v11 = (const char *)disassembler_style;\n    else\n      v11 = (const char *)&unk_4942;\n    if (disassembler_style)\n      v12 = String;\n    else\n      v12 = (const char *)&unk_4942;\n    if (objdump_path)\n      v13 = (const char *)objdump_path;\n    else\n      v13 = String;\n    snprintf(buf, Number, String, v13, v12, v11, v10, v9, v8, v7, path, ptr);\n    eprintf(Number L, verbose, String, buf);\n    stream = popen(buf, String);\n    if (stream) {\n      while (!feof(stream) &&\n             (int)symbol__parse_objdump_line(a1, a2, stream, a3) >= Number)\n        ;\n      if (dso__is_kcore(v21))\n        delete_last_nop(a1);\n      pclose(stream);\n    }\n  } else {\n    strcpy(v25, String);\n    v26 = Number L;\n    v27 = Number L;\n    v28 = Number L;\n    v29 = Number L;\n    v30 = Number L;\n    v20 = Number L;\n    if ((*(_BYTE *)(v21 + Number) & Number) == Number) {\n      if ((*(_BYTE *)(v21 + Number) & Number) != Number) {\n        build_id__sprintf(v21 + Number, Number L, &v25[Number]);\n        v20 = v25;\n      }\n      v18 = Number;\n      *(_BYTE *)(v21 + Number) |= Number;\n      v4 = v20;\n      if (!v20)\n        v4 = (const char *)&unk_4942;\n      eprintf(Number L, verbose,\n              String String String String String String String String String\n                  String String String,\n              (const char *)(a1 + Number), v4);\n    }\n  }\n  if (v17)\n    kcore_extract__delete(<span class=\"supfact\">v23</span>);\n  if (v16)\n    free(ptr);\n  return v18;\n}", "code_t": "int __cdecl symbol__annotate(symbol *sym, map *map, size_t privsize) {\n  const char *v4;\n  u64 v5;\n  u64 v6;\n  const char *v7;\n  const char *v8;\n  __int64 v9;\n  __int64 v10;\n  const char *v11;\n  const char *v12;\n  const char *v13;\n  bool free_filename;\n  bool delete_extract;\n  int err;\n  char *filename;\n  char *build_id_msg;\n  dso *dso;\n  FILE *file;\n  kcore_extract <span class=\"supfact\">kce</span>;\n  char bf[Number];\n  char symfs_filename[Number];\n  char command[Number];\n  unsigned __int64 v27;\n  v27 = __readfsqword(Number);\n  dso = map->dso;\n  filename = (char *)((__int64(__fastcall *)(\n      dso *, _QWORD, _QWORD))dso__build_id_filename)(dso, Number L, Number L);\n  free_filename = Number;\n  err = Number;\n  delete_extract = Number;\n  if (filename)\n    _symbol__join_symfs(symfs_filename, Number, filename);\n  if (filename) {\n    if (readlink(symfs_filename, command, Number) >= Number &&\n        !strstr(command, String) && !access(symfs_filename, Number)) {\n      goto LABEL_11;\n    }\n    free(filename);\n  } else if ((*((_BYTE *)dso + Number) & Number) != Number) {\n    eprintf(Number L, verbose, String, sym->name);\n    return Number;\n  }\n  filename = (char *)dso->long_name;\n  _symbol__join_symfs(symfs_filename, Number, filename);\n  free_filename = Number;\nLABEL_11:\n  if (dso->symtab_type || dso__is_kcore(dso)) {\n    v5 = map->unmap_ip(map, sym->end);\n    v6 = map->unmap_ip(map, sym->start);\n    eprintf(Number L, verbose, String, String, filename, sym->name, v6, v5);\n    eprintf(Number L, verbose, String, dso, dso->long_name, sym, sym->name);\n    if (dso__is_kcore(dso)) {\n      <span class=\"supfact\">kce</span>.kcore_filename = symfs_filename;\n      <span class=\"supfact\">kce</span>.addr = map__rip_2objdump(map, sym->start);\n      <span class=\"supfact\">kce</span>.offs = sym->start;\n      <span class=\"supfact\">kce</span>.len = sym->end - sym->start;\n      if (!(unsigned int)kcore_extract__create(&<span class=\"supfact\">kce</span>)) {\n        delete_extract = Number;\n        strlcpy(symfs_filename, <span class=\"supfact\">kce</span>.extract_filename, Number L);\n        if (free_filename) {\n          free(filename);\n          free_filename = Number;\n        }\n        filename = symfs_filename;\n      }\n    }\n    if (LOBYTE(symbol_conf_0[Number]))\n      v7 = String;\n    else\n      v7 = (const char *)&unk_4942;\n    if (HIBYTE(symbol_conf_0[Number]))\n      v8 = (const char *)&unk_4942;\n    else\n      v8 = String;\n    v9 = map__rip_2objdump(map, sym->end);\n    v10 = map__rip_2objdump(map, sym->start);\n    if (disassembler_style)\n      v11 = (const char *)disassembler_style;\n    else\n      v11 = (const char *)&unk_4942;\n    if (disassembler_style)\n      v12 = String;\n    else\n      v12 = (const char *)&unk_4942;\n    if (objdump_path)\n      v13 = objdump_path;\n    else\n      v13 = String;\n    snprintf(command, Number, String, v13, v12, v11, v10, v9, v8, v7,\n             symfs_filename, filename);\n    eprintf(Number L, verbose, String, command);\n    file = popen(command, String);\n    if (file) {\n      while (!feof(file) &&\n             symbol__parse_objdump_line(sym, map, file, privsize) >= Number)\n        ;\n      if (dso__is_kcore(dso))\n        delete_last_nop(sym);\n      pclose(file);\n    }\n  } else {\n    strcpy(bf, String);\n    *(_QWORD *)&bf[Number] = Number L;\n    *(_QWORD *)&bf[Number] = Number L;\n    *(_QWORD *)&bf[Number] = Number L;\n    *(_QWORD *)&bf[Number] = Number L;\n    *(_QWORD *)&bf[Number] = Number L;\n    build_id_msg = Number L;\n    if ((*((_BYTE *)dso + Number) & Number) == Number) {\n      if ((*((_BYTE *)dso + Number) & Number) != Number) {\n        build_id__sprintf(dso->build_id, Number L, &bf[Number]);\n        build_id_msg = bf;\n      }\n      err = Number;\n      *((_BYTE *)dso + Number) |= Number;\n      v4 = build_id_msg;\n      if (!build_id_msg)\n        v4 = (const char *)&unk_4942;\n      eprintf(Number L, verbose,\n              String String String String String String String String String\n                  String String String,\n              sym->name, v4);\n    }\n  }\n  if (delete_extract)\n    kcore_extract__delete(&<span class=\"supfact\">kce</span>);\n  if (free_filename)\n    free(filename);\n  return err;\n}", "var": [{"name": "v23", "type": "struct kcore_extract { char * kcore_filename; u64 addr; u64 offs; u64 len; char[23] extract_filename; PADDING (1); int fd; PADDING (4); }", "pred_name": "kce", "ref_name": "kce", "ref_type": "struct kcore_extract { char * kcore_filename; u64 addr; u64 offs; u64 len; char[23] extract_filename; PADDING (1); int fd; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "Husamdababneh", "repo_name": "Ring", "path": "Husamdababneh/Ring/5e63606a9cb99d7c5edeff54e86286dd63b74d51129634d8c6df9ef5b50e5ee0", "path_in_repo": "Husamdababneh/Ring/Ring/vendor/spdlog/tests/test_async.o", "objdump": "0000000000000000 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE>:\n   0:\t41 57                \tpush   %r15\n   2:\t41 56                \tpush   %r14\n   4:\t41 be 00 00 00 00    \tmov    $0x0,%r14d\n   a:\t41 55                \tpush   %r13\n   c:\t41 54                \tpush   %r12\n   e:\t49 89 f4             \tmov    %rsi,%r12\n  11:\t55                   \tpush   %rbp\n  12:\t53                   \tpush   %rbx\n  13:\t48 89 fb             \tmov    %rdi,%rbx\n  16:\t48 81 ec 88 02 00 00 \tsub    $0x288,%rsp\n  1d:\t4c 8b bf 20 03 00 00 \tmov    0x320(%rdi),%r15\n  24:\t4d 85 f6             \ttest   %r14,%r14\n  27:\t74 10                \tje     39 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x39>\n  29:\t4c 89 ff             \tmov    %r15,%rdi\n  2c:\te8 00 00 00 00       \tcallq  31 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x31>\n  31:\t85 c0                \ttest   %eax,%eax\n  33:\t0f 85 20 03 00 00    \tjne    359 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x359>\n  39:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  3e:\t48 8b 6b 10          \tmov    0x10(%rbx),%rbp\n  42:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n  47:\t48 8d 84 24 80 00 00 \tlea    0x80(%rsp),%rax\n  4e:\t00 \n  4f:\t48 89 04 24          \tmov    %rax,(%rsp)\n  53:\t0f 16 04 24          \tmovhps (%rsp),%xmm0\n  57:\t0f 29 44 24 60       \tmovaps %xmm0,0x60(%rsp)\n  5c:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n  60:\t66 0f 6f 05 00 00 00 \tmovdqa 0x0(%rip),%xmm0        # 68 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x68>\n  67:\t00 \n  68:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  6c:\t0f 29 44 24 70       \tmovaps %xmm0,0x70(%rsp)\n  71:\t48 3d 00 00 00 00    \tcmp    $0x0,%rax\n  77:\t0f 85 73 02 00 00    \tjne    2f0 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x2f0>\n  7d:\t48 ba b3 94 d6 26 e8 \tmovabs $0x112e0be826d694b3,%rdx\n  84:\t0b 2e 11 \n  87:\t49 8b 4c 24 10       \tmov    0x10(%r12),%rcx\n  8c:\t48 89 c8             \tmov    %rcx,%rax\n  8f:\t48 c1 f9 3f          \tsar    $0x3f,%rcx\n  93:\t48 f7 ea             \timul   %rdx\n  96:\t48 c1 fa 1a          \tsar    $0x1a,%rdx\n  9a:\t48 29 ca             \tsub    %rcx,%rdx\n  9d:\t49 89 d5             \tmov    %rdx,%r13\n  a0:\t48 3b 95 88 00 00 00 \tcmp    0x88(%rbp),%rdx\n  a7:\t0f 85 e3 00 00 00    \tjne    190 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x190>\n  ad:\t48 8b 85 98 00 00 00 \tmov    0x98(%rbp),%rax\n  b4:\t4c 8b ad 90 00 00 00 \tmov    0x90(%rbp),%r13\n  bb:\t48 8d 75 50          \tlea    0x50(%rbp),%rsi\n  bf:\t48 89 74 24 08       \tmov    %rsi,0x8(%rsp)\n  c4:\t48 89 04 24          \tmov    %rax,(%rsp)\n  c8:\t49 39 c5             \tcmp    %rax,%r13\n  cb:\t74 24                \tje     f1 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0xf1>\n  cd:\t0f 1f 00             \tnopl   (%rax)\n  d0:\t49 8b 7d 00          \tmov    0x0(%r13),%rdi\n  d4:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n  d9:\t48 8d 4c 24 60       \tlea    0x60(%rsp),%rcx\n  de:\t4c 89 e6             \tmov    %r12,%rsi\n  e1:\t48 8b 07             \tmov    (%rdi),%rax\n  e4:\tff 50 10             \tcallq  *0x10(%rax)\n  e7:\t49 83 c5 08          \tadd    $0x8,%r13\n  eb:\t4c 39 2c 24          \tcmp    %r13,(%rsp)\n  ef:\t75 df                \tjne    d0 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0xd0>\n  f1:\t48 8b 75 28          \tmov    0x28(%rbp),%rsi\n  f5:\t48 85 f6             \ttest   %rsi,%rsi\n  f8:\t74 11                \tje     10b <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x10b>\n  fa:\t48 8b 55 30          \tmov    0x30(%rbp),%rdx\n  fe:\t48 8d 7c 24 60       \tlea    0x60(%rsp),%rdi\n 103:\t48 01 f2             \tadd    %rsi,%rdx\n 106:\te8 00 00 00 00       \tcallq  10b <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x10b>\n 10b:\t80 bb 28 03 00 00 00 \tcmpb   $0x0,0x328(%rbx)\n 112:\t48 8b 8b 18 03 00 00 \tmov    0x318(%rbx),%rcx\n 119:\t48 8b 7c 24 68       \tmov    0x68(%rsp),%rdi\n 11e:\t74 10                \tje     130 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x130>\n 120:\t49 8b 54 24 28       \tmov    0x28(%r12),%rdx\n 125:\t49 39 54 24 30       \tcmp    %rdx,0x30(%r12)\n 12a:\t0f 87 b8 00 00 00    \tja     1e8 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x1e8>\n 130:\t48 8b 54 24 70       \tmov    0x70(%rsp),%rdx\n 135:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 13a:\te8 00 00 00 00       \tcallq  13f <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x13f>\n 13f:\t48 8b bb 18 03 00 00 \tmov    0x318(%rbx),%rdi\n 146:\te8 00 00 00 00       \tcallq  14b <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x14b>\n 14b:\t48 8b 7c 24 68       \tmov    0x68(%rsp),%rdi\n 150:\t48 8d 84 24 80 00 00 \tlea    0x80(%rsp),%rax\n 157:\t00 \n 158:\t48 c7 44 24 60 00 00 \tmovq   $0x0,0x60(%rsp)\n 15f:\t00 00 \n 161:\t48 39 c7             \tcmp    %rax,%rdi\n 164:\t74 05                \tje     16b <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x16b>\n 166:\te8 00 00 00 00       \tcallq  16b <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x16b>\n 16b:\t4d 85 f6             \ttest   %r14,%r14\n 16e:\t74 08                \tje     178 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x178>\n 170:\t4c 89 ff             \tmov    %r15,%rdi\n 173:\te8 00 00 00 00       \tcallq  178 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x178>\n 178:\t48 81 c4 88 02 00 00 \tadd    $0x288,%rsp\n 17f:\t5b                   \tpop    %rbx\n 180:\t5d                   \tpop    %rbp\n 181:\t41 5c                \tpop    %r12\n 183:\t41 5d                \tpop    %r13\n 185:\t41 5e                \tpop    %r14\n 187:\t41 5f                \tpop    %r15\n 189:\tc3                   \tretq   \n 18a:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n 190:\t8b 45 48             \tmov    0x48(%rbp),%eax\n 193:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n 198:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n 19d:\t48 8d 7c 24 18       \tlea    0x18(%rsp),%rdi\n 1a2:\t85 c0                \ttest   %eax,%eax\n 1a4:\t0f 84 36 01 00 00    \tje     2e0 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x2e0>\n 1aa:\te8 00 00 00 00       \tcallq  1af <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x1af>\n 1af:\t66 0f 6f 4c 24 20    \tmovdqa 0x20(%rsp),%xmm1\n 1b5:\t66 0f 6f 54 24 30    \tmovdqa 0x30(%rsp),%xmm2\n 1bb:\t4c 89 ad 88 00 00 00 \tmov    %r13,0x88(%rbp)\n 1c2:\t66 0f 6f 5c 24 40    \tmovdqa 0x40(%rsp),%xmm3\n 1c8:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 1cd:\t0f 11 4d 50          \tmovups %xmm1,0x50(%rbp)\n 1d1:\t48 89 85 80 00 00 00 \tmov    %rax,0x80(%rbp)\n 1d8:\t0f 11 55 60          \tmovups %xmm2,0x60(%rbp)\n 1dc:\t0f 11 5d 70          \tmovups %xmm3,0x70(%rbp)\n 1e0:\te9 c8 fe ff ff       \tjmpq   ad <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0xad>\n 1e5:\t0f 1f 00             \tnopl   (%rax)\n 1e8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 1ed:\te8 00 00 00 00       \tcallq  1f2 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x1f2>\n 1f2:\t49 63 6c 24 08       \tmovslq 0x8(%r12),%rbp\n 1f7:\t48 8b bb 38 03 00 00 \tmov    0x338(%rbx),%rdi\n 1fe:\t31 d2                \txor    %edx,%edx\n 200:\t48 89 e8             \tmov    %rbp,%rax\n 203:\t49 89 e8             \tmov    %rbp,%r8\n 206:\t48 f7 f7             \tdiv    %rdi\n 209:\t48 8b 83 30 03 00 00 \tmov    0x330(%rbx),%rax\n 210:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n 214:\t49 89 d5             \tmov    %rdx,%r13\n 217:\t48 85 c0             \ttest   %rax,%rax\n 21a:\t0f 84 e8 00 00 00    \tje     308 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x308>\n 220:\t48 8b 08             \tmov    (%rax),%rcx\n 223:\t8b 71 08             \tmov    0x8(%rcx),%esi\n 226:\teb 29                \tjmp    251 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x251>\n 228:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n 22f:\t00 \n 230:\t48 8b 09             \tmov    (%rcx),%rcx\n 233:\t48 85 c9             \ttest   %rcx,%rcx\n 236:\t0f 84 cc 00 00 00    \tje     308 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x308>\n 23c:\t48 63 41 08          \tmovslq 0x8(%rcx),%rax\n 240:\t31 d2                \txor    %edx,%edx\n 242:\t48 89 c6             \tmov    %rax,%rsi\n 245:\t48 f7 f7             \tdiv    %rdi\n 248:\t49 39 d5             \tcmp    %rdx,%r13\n 24b:\t0f 85 b7 00 00 00    \tjne    308 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x308>\n 251:\t41 39 f0             \tcmp    %esi,%r8d\n 254:\t75 da                \tjne    230 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x230>\n 256:\t48 8d 41 10          \tlea    0x10(%rcx),%rax\n 25a:\t48 8b 8b 18 03 00 00 \tmov    0x318(%rbx),%rcx\n 261:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 265:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 26a:\t48 8b 38             \tmov    (%rax),%rdi\n 26d:\te8 00 00 00 00       \tcallq  272 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x272>\n 272:\t49 8b 7c 24 28       \tmov    0x28(%r12),%rdi\n 277:\t49 8b 54 24 30       \tmov    0x30(%r12),%rdx\n 27c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 281:\t48 8b 8b 18 03 00 00 \tmov    0x318(%rbx),%rcx\n 288:\t48 29 fa             \tsub    %rdi,%rdx\n 28b:\t48 03 7c 24 68       \tadd    0x68(%rsp),%rdi\n 290:\te8 00 00 00 00       \tcallq  295 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x295>\n 295:\t48 8b 8b 18 03 00 00 \tmov    0x318(%rbx),%rcx\n 29c:\t48 8b 53 20          \tmov    0x20(%rbx),%rdx\n 2a0:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 2a5:\t48 8b 7b 18          \tmov    0x18(%rbx),%rdi\n 2a9:\te8 00 00 00 00       \tcallq  2ae <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x2ae>\n 2ae:\t49 8b 7c 24 30       \tmov    0x30(%r12),%rdi\n 2b3:\t48 8b 54 24 70       \tmov    0x70(%rsp),%rdx\n 2b8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 2bd:\t48 8b 8b 18 03 00 00 \tmov    0x318(%rbx),%rcx\n 2c4:\t48 29 fa             \tsub    %rdi,%rdx\n 2c7:\t48 03 7c 24 68       \tadd    0x68(%rsp),%rdi\n 2cc:\te8 00 00 00 00       \tcallq  2d1 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x2d1>\n 2d1:\te9 69 fe ff ff       \tjmpq   13f <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x13f>\n 2d6:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n 2dd:\t00 00 00 \n 2e0:\te8 00 00 00 00       \tcallq  2e5 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x2e5>\n 2e5:\te9 c5 fe ff ff       \tjmpq   1af <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x1af>\n 2ea:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n 2f0:\t48 8d 54 24 60       \tlea    0x60(%rsp),%rdx\n 2f5:\t4c 89 e6             \tmov    %r12,%rsi\n 2f8:\t48 89 ef             \tmov    %rbp,%rdi\n 2fb:\tff d0                \tcallq  *%rax\n 2fd:\te9 09 fe ff ff       \tjmpq   10b <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x10b>\n 302:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n 308:\tbf 30 00 00 00       \tmov    $0x30,%edi\n 30d:\te8 00 00 00 00       \tcallq  312 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x312>\n 312:\t48 89 c1             \tmov    %rax,%rcx\n 315:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n 31c:\t48 89 ea             \tmov    %rbp,%rdx\n 31f:\t4c 89 ee             \tmov    %r13,%rsi\n 322:\t41 8b 44 24 08       \tmov    0x8(%r12),%eax\n 327:\t48 c7 41 18 00 00 00 \tmovq   $0x0,0x18(%rcx)\n 32e:\t00 \n 32f:\t48 8d bb 30 03 00 00 \tlea    0x330(%rbx),%rdi\n 336:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n 33c:\tc6 41 20 00          \tmovb   $0x0,0x20(%rcx)\n 340:\t89 41 08             \tmov    %eax,0x8(%rcx)\n 343:\t48 8d 41 20          \tlea    0x20(%rcx),%rax\n 347:\t48 89 41 10          \tmov    %rax,0x10(%rcx)\n 34b:\te8 00 00 00 00       \tcallq  350 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x350>\n 350:\t48 83 c0 10          \tadd    $0x10,%rax\n 354:\te9 01 ff ff ff       \tjmpq   25a <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x25a>\n 359:\t89 c7                \tmov    %eax,%edi\n 35b:\te8 00 00 00 00       \tcallq  360 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x360>\n 360:\t48 89 c5             \tmov    %rax,%rbp\n 363:\t48 8b 7c 24 68       \tmov    0x68(%rsp),%rdi\n 368:\t48 8d 84 24 80 00 00 \tlea    0x80(%rsp),%rax\n 36f:\t00 \n 370:\t48 c7 44 24 60 00 00 \tmovq   $0x0,0x60(%rsp)\n 377:\t00 00 \n 379:\t48 39 c7             \tcmp    %rax,%rdi\n 37c:\t74 05                \tje     383 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x383>\n 37e:\te8 00 00 00 00       \tcallq  383 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x383>\n 383:\t4d 85 f6             \ttest   %r14,%r14\n 386:\t74 08                \tje     390 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x390>\n 388:\t4c 89 ff             \tmov    %r15,%rdi\n 38b:\te8 00 00 00 00       \tcallq  390 <_ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE+0x390>\n 390:\t48 89 ef             \tmov    %rbp,%rdi\n 393:\te8 00 00 00 00       \tcallq  398 <_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJZL31____C_A_T_C_H____T_E_S_T____122vEUlvE_EEEEED0Ev+0x58>", "code_s": "void __fastcall spdlog sinks\n    ansicolor_sink<spdlog details console_stdout, spdlog details console_mutex>\n    log(__int64 a1, __int64 a2) {\n  pthread_mutex_t *v4;\n  int v5;\n  __m128i *v6;\n  __int64(__fastcall * v7)(__m128i *, __int64, __int64);\n  __int64 v8;\n  __int64 v9;\n  char *v10;\n  const void *v11;\n  FILE *v12;\n  size_t v13;\n  __int32 v14;\n  __m128i v15;\n  __m128i v16;\n  __m128i v17;\n  const char *v18;\n  unsigned __int64 v19;\n  unsigned __int64 v20;\n  __int64 *v21;\n  unsigned __int64 v22;\n  __int64 *v23;\n  int v24;\n  __int64 v25;\n  __int64 v26;\n  int v27;\n  char *i;\n  __m128i *v29;\n  time_t timer;\n  struct tm <span class=\"supfact\">tp</span>;\n  void *ptr[Number];\n  size_t n[Number];\n  char v34[Number];\n  v4 = *(pthread_mutex_t **)(a1 + Number);\n  if (&_pthread_key_create) {\n    v5 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + Number));\n    if (v5)\n      std __throw_system_error(v5);\n  }\n  v6 = *(__m128i **)(a1 + Number);\n  i = v34;\n  *(__m128 *)ptr = _mm_loadh_ps((const double *)&i);\n  v7 = *(__int64(__fastcall **)(__m128i *, __int64, __int64))(\n      v6->m128i_i64[Number] + Number);\n  *(__m128i *)n = _mm_load_si128((const __m128i *)&LC48);\n  if (v7 == spdlog pattern_formatter format) {\n    v8 = *(_QWORD *)(a2 + Number) / Number L;\n    if (v8 != v6[Number].m128i_i64[Number]) {\n      v14 = v6[Number].m128i_i32[Number];\n      timer = *(_QWORD *)(a2 + Number) / Number L;\n      if (v14)\n        gmtime_r(&timer, &<span class=\"supfact\">tp</span>);\n      else\n        localtime_r(&timer, &<span class=\"supfact\">tp</span>);\n      v15 = _mm_load_si128((const __m128i *)&<span class=\"supfact\">tp</span>);\n      v16 = _mm_load_si128((const __m128i *)&<span class=\"supfact\">tp</span>.tm_mon);\n      v6[Number].m128i_i64[Number] = v8;\n      v17 = _mm_load_si128((const __m128i *)&<span class=\"supfact\">tp</span>.tm_isdst);\n      v18 = <span class=\"supfact\">tp</span>.tm_zone;\n      v6[Number] = v15;\n      v6[Number].m128i_i64[Number] = (__int64)v18;\n      v6[Number] = v16;\n      v6[Number] = v17;\n    }\n    v9 = v6[Number].m128i_i64[Number];\n    v10 = (char *)v6[Number].m128i_i64[Number];\n    v29 = v6 + Number;\n    for (i = (char *)v9; i != v10; v10 += Number)\n      (*(void(__fastcall **)(_QWORD, __int64, __m128i *, void **))(\n          **(_QWORD **)v10 + Number L))(*(_QWORD *)v10, a2, v29, ptr);\n    v11 = (const void *)v6[Number].m128i_i64[Number];\n    if (v11)\n      fmt v5 internal basic_buffer<char> append<char>(\n          (__int64)ptr, v11, (__int64)v11 + v6[Number].m128i_i64[Number]);\n  } else {\n    v7(v6, a2, (__int64)ptr);\n  }\n  v12 = *(FILE **)(a1 + Number);\n  if (*(_BYTE *)(a1 + Number) &&\n      (v13 = *(_QWORD *)(a2 + Number), *(_QWORD *)(a2 + Number) > v13)) {\n    fwrite(ptr[Number], Number, v13, v12);\n    v19 = *(int *)(a2 + Number);\n    v20 = *(_QWORD *)(a1 + Number);\n    v21 = *(__int64 **)(*(_QWORD *)(a1 + Number) + Number * (v19 % v20));\n    v22 = v19 % v20;\n    if (v21) {\n      v23 = (__int64 *)*v21;\n      v24 = *(_DWORD *)(*v21 + Number);\n      while (*(_DWORD *)(a2 + Number) != v24) {\n        v23 = (__int64 *)*v23;\n        if (v23) {\n          v24 = *((_DWORD *)v23 + Number);\n          if (v22 == v24 % v20)\n            continue;\n        }\n        goto LABEL_29;\n      }\n      v25 = (__int64)(v23 + Number);\n    } else {\n    LABEL_29:\n      v26 = operator new(Number);\n      *(_QWORD *)v26 = Number L;\n      v27 = *(_DWORD *)(a2 + Number);\n      *(_QWORD *)(v26 + Number) = Number L;\n      *(_BYTE *)(v26 + Number) = Number;\n      *(_DWORD *)(v26 + Number) = v27;\n      *(_QWORD *)(v26 + Number) = v26 + Number;\n      v25 =\n          std _Hashtable<\n              spdlog level level_enum,\n              std pair<spdlog level level_enum const,\n                       std __cxx11 basic_string<char, std char_traits<char>,\n                                                std allocator<char>>>,\n              std allocator<\n                  std pair<spdlog level level_enum const,\n                           std __cxx11 basic_string<char, std char_traits<char>,\n                                                    std allocator<char>>>>,\n              std __detail _Select1st, std equal_to<spdlog level level_enum>,\n              std hash<int>, std __detail _Mod_range_hashing,\n              std __detail _Default_ranged_hash,\n              std __detail _Prime_rehash_policy,\n              std __detail _Hashtable_traits<false, false, true>>\n              _M_insert_unique_node((__int64 *)(a1 + Number), v22, v19, v26,\n                                    Number) +\n          Number;\n    }\n    fwrite(*(const void **)v25, Number, *(_QWORD *)(v25 + Number),\n           *(FILE **)(a1 + Number));\n    fwrite((char *)ptr[Number] + *(_QWORD *)(a2 + Number), Number,\n           *(_QWORD *)(a2 + Number) - *(_QWORD *)(a2 + Number),\n           *(FILE **)(a1 + Number));\n    fwrite(*(const void **)(a1 + Number), Number, *(_QWORD *)(a1 + Number),\n           *(FILE **)(a1 + Number));\n    fwrite((char *)ptr[Number] + *(_QWORD *)(a2 + Number), Number,\n           n[Number] - *(_QWORD *)(a2 + Number), *(FILE **)(a1 + Number));\n  } else {\n    fwrite(ptr[Number], Number, n[Number], v12);\n  }\n  fflush(*(FILE **)(a1 + Number)); ptr [ Number ] = & ` vtable for ' fmt v5 basic_memory_buffer < char , Number , std allocator < char >> + Number ; if ( ptr [ Number ] != v34 ) operator delete ( ptr [ Number ] ) ; if ( & _pthread_key_create ) pthread_mutex_unlock ( v4 ) ; }", "code_t": "void __fastcall spdlog sinks\n    ansicolor_sink<spdlog details console_stdout, spdlog details console_mutex>\n    log(__int64 a1, __int64 a2) {\n  pthread_mutex_t *v4;\n  int v5;\n  __m128i *v6;\n  __int64(__fastcall * v7)(__m128i *, __int64, __int64);\n  __int64 v8;\n  __int64 v9;\n  char *v10;\n  const void *v11;\n  FILE *v12;\n  size_t v13;\n  __int32 v14;\n  __m128i v15;\n  __m128i v16;\n  __m128i v17;\n  const char *v18;\n  unsigned __int64 v19;\n  unsigned __int64 v20;\n  __int64 *v21;\n  unsigned __int64 v22;\n  __int64 *v23;\n  int v24;\n  __int64 v25;\n  __int64 v26;\n  int v27;\n  char *i;\n  __m128i *v29;\n  time_t timer;\n  struct tm <span class=\"supfact\">tp</span>;\n  void *ptr[Number];\n  size_t n[Number];\n  char v34[Number];\n  v4 = *(pthread_mutex_t **)(a1 + Number);\n  if (&_pthread_key_create) {\n    v5 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + Number));\n    if (v5)\n      std __throw_system_error(v5);\n  }\n  v6 = *(__m128i **)(a1 + Number);\n  i = v34;\n  *(__m128 *)ptr = _mm_loadh_ps((const double *)&i);\n  v7 = *(__int64(__fastcall **)(__m128i *, __int64, __int64))(\n      v6->m128i_i64[Number] + Number);\n  *(__m128i *)n = _mm_load_si128((const __m128i *)&LC48);\n  if (v7 == spdlog pattern_formatter format) {\n    v8 = *(_QWORD *)(a2 + Number) / Number L;\n    if (v8 != v6[Number].m128i_i64[Number]) {\n      v14 = v6[Number].m128i_i32[Number];\n      timer = *(_QWORD *)(a2 + Number) / Number L;\n      if (v14)\n        gmtime_r(&timer, &<span class=\"supfact\">tp</span>);\n      else\n        localtime_r(&timer, &<span class=\"supfact\">tp</span>);\n      v15 = _mm_load_si128((const __m128i *)&<span class=\"supfact\">tp</span>);\n      v16 = _mm_load_si128((const __m128i *)&<span class=\"supfact\">tp</span>.tm_mon);\n      v6[Number].m128i_i64[Number] = v8;\n      v17 = _mm_load_si128((const __m128i *)&<span class=\"supfact\">tp</span>.tm_isdst);\n      v18 = <span class=\"supfact\">tp</span>.tm_zone;\n      v6[Number] = v15;\n      v6[Number].m128i_i64[Number] = (__int64)v18;\n      v6[Number] = v16;\n      v6[Number] = v17;\n    }\n    v9 = v6[Number].m128i_i64[Number];\n    v10 = (char *)v6[Number].m128i_i64[Number];\n    v29 = v6 + Number;\n    for (i = (char *)v9; i != v10; v10 += Number)\n      (*(void(__fastcall **)(_QWORD, __int64, __m128i *, void **))(\n          **(_QWORD **)v10 + Number L))(*(_QWORD *)v10, a2, v29, ptr);\n    v11 = (const void *)v6[Number].m128i_i64[Number];\n    if (v11)\n      fmt v5 internal basic_buffer<char> append<char>(\n          (__int64)ptr, v11, (__int64)v11 + v6[Number].m128i_i64[Number]);\n  } else {\n    v7(v6, a2, (__int64)ptr);\n  }\n  v12 = *(FILE **)(a1 + Number);\n  if (*(_BYTE *)(a1 + Number) &&\n      (v13 = *(_QWORD *)(a2 + Number), *(_QWORD *)(a2 + Number) > v13)) {\n    fwrite(ptr[Number], Number, v13, v12);\n    v19 = *(int *)(a2 + Number);\n    v20 = *(_QWORD *)(a1 + Number);\n    v21 = *(__int64 **)(*(_QWORD *)(a1 + Number) + Number * (v19 % v20));\n    v22 = v19 % v20;\n    if (v21) {\n      v23 = (__int64 *)*v21;\n      v24 = *(_DWORD *)(*v21 + Number);\n      while (*(_DWORD *)(a2 + Number) != v24) {\n        v23 = (__int64 *)*v23;\n        if (v23) {\n          v24 = *((_DWORD *)v23 + Number);\n          if (v22 == v24 % v20)\n            continue;\n        }\n        goto LABEL_29;\n      }\n      v25 = (__int64)(v23 + Number);\n    } else {\n    LABEL_29:\n      v26 = operator new(Number);\n      *(_QWORD *)v26 = Number L;\n      v27 = *(_DWORD *)(a2 + Number);\n      *(_QWORD *)(v26 + Number) = Number L;\n      *(_BYTE *)(v26 + Number) = Number;\n      *(_DWORD *)(v26 + Number) = v27;\n      *(_QWORD *)(v26 + Number) = v26 + Number;\n      v25 =\n          std _Hashtable<\n              spdlog level level_enum,\n              std pair<spdlog level level_enum const,\n                       std __cxx11 basic_string<char, std char_traits<char>,\n                                                std allocator<char>>>,\n              std allocator<\n                  std pair<spdlog level level_enum const,\n                           std __cxx11 basic_string<char, std char_traits<char>,\n                                                    std allocator<char>>>>,\n              std __detail _Select1st, std equal_to<spdlog level level_enum>,\n              std hash<int>, std __detail _Mod_range_hashing,\n              std __detail _Default_ranged_hash,\n              std __detail _Prime_rehash_policy,\n              std __detail _Hashtable_traits<false, false, true>>\n              _M_insert_unique_node((__int64 *)(a1 + Number), v22, v19, v26,\n                                    Number) +\n          Number;\n    }\n    fwrite(*(const void **)v25, Number, *(_QWORD *)(v25 + Number),\n           *(FILE **)(a1 + Number));\n    fwrite((char *)ptr[Number] + *(_QWORD *)(a2 + Number), Number,\n           *(_QWORD *)(a2 + Number) - *(_QWORD *)(a2 + Number),\n           *(FILE **)(a1 + Number));\n    fwrite(*(const void **)(a1 + Number), Number, *(_QWORD *)(a1 + Number),\n           *(FILE **)(a1 + Number));\n    fwrite((char *)ptr[Number] + *(_QWORD *)(a2 + Number), Number,\n           n[Number] - *(_QWORD *)(a2 + Number), *(FILE **)(a1 + Number));\n  } else {\n    fwrite(ptr[Number], Number, n[Number], v12);\n  }\n  fflush(*(FILE **)(a1 + Number)); ptr [ Number ] = & ` vtable for ' fmt v5 basic_memory_buffer < char , Number , std allocator < char >> + Number ; if ( ptr [ Number ] != v34 ) operator delete ( ptr [ Number ] ) ; if ( & _pthread_key_create ) pthread_mutex_unlock ( v4 ) ; }", "var": [{"name": "tp", "type": "struct struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }", "pred_name": "tp", "ref_name": "tp", "ref_type": "struct struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}], "body_in_train": false}, {"repo_owner": "wnoguchi", "repo_name": "hikari_denwa_asterisk", "path": "wnoguchi/hikari_denwa_asterisk/513dcb0a92eafe6237d3f1016fb0a9d8e0e0abaa48a3af0a523fb3d2c8d326f6", "path_in_repo": "wnoguchi/hikari_denwa_asterisk/asterisk-11.0.1/res/pjproject/pjnath/bin/pjturn-client-x86_64-unknown-linux-gnu", "objdump": "000000000042ecea <pj_strncmp2>:\n  42ecea:\t55                   \tpush   %rbp\n  42eceb:\t48 89 e5             \tmov    %rsp,%rbp\n  42ecee:\t48 83 ec 30          \tsub    $0x30,%rsp\n  42ecf2:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  42ecf6:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  42ecfa:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  42ecfe:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  42ed03:\t74 1a                \tje     42ed1f <pj_strncmp2+0x35>\n  42ed05:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  42ed09:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  42ed0d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  42ed11:\t48 89 c7             \tmov    %rax,%rdi\n  42ed14:\te8 17 44 fd ff       \tcallq  403130 <strlen@plt>\n  42ed19:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  42ed1d:\teb 08                \tjmp    42ed27 <pj_strncmp2+0x3d>\n  42ed1f:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  42ed26:\t00 \n  42ed27:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  42ed2b:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n  42ed2f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42ed33:\t48 89 ce             \tmov    %rcx,%rsi\n  42ed36:\t48 89 c7             \tmov    %rax,%rdi\n  42ed39:\te8 2d ff ff ff       \tcallq  42ec6b <pj_strncmp>\n  42ed3e:\tc9                   \tleaveq \n  42ed3f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_strncmp2(__int64 *a1, const char *a2,\n                               unsigned __int64 a3) {\n  const char *<span class=\"supfact\">v5</span>;\n  size_t v6;\n  if (a2) {\n    <span class=\"supfact\">v5</span> = a2;\n    v6 = strlen(a2);\n  } else {\n    v6 = Number L;\n  }\n  return pj_strncmp(a1, (__int64 *)&<span class=\"supfact\">v5</span>, a3);\n}", "code_t": "int __cdecl pj_strncmp2(const pj_str_t_0 *str1, const char *str2,\n                        pj_size_t len) {\n  pj_str_t_0 <span class=\"supfact\">copy2</span>;\n  if (str2) {\n    <span class=\"supfact\">copy2</span>.ptr = (char *)str2;\n    <span class=\"supfact\">copy2</span>.slen = strlen(str2);\n  } else {\n    <span class=\"supfact\">copy2</span>.slen = Number L;\n  }\n  return pj_strncmp(str1, &<span class=\"supfact\">copy2</span>, len);\n}", "var": [{"name": "v5", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "pred_name": "copy2", "ref_name": "copy2", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "M0Rf30", "repo_name": "VMG-8823-B50B", "path": "M0Rf30/VMG-8823-B50B/53bc3688a348a16c6477cdd2fc719e2ef66480261d28a76d13449f5544bd2431", "path_in_repo": "M0Rf30/VMG-8823-B50B/package/network/utils/iwinfo/src/iwinfo_wext.o", "objdump": "000000000000021f <wext_get_bssid>:\n 21f:\t55                   \tpush   %rbp\n 220:\t48 89 e5             \tmov    %rsp,%rbp\n 223:\t48 83 ec 30          \tsub    $0x30,%rsp\n 227:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 22b:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n 22f:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 233:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 237:\tbe 15 8b 00 00       \tmov    $0x8b15,%esi\n 23c:\t48 89 c7             \tmov    %rax,%rdi\n 23f:\te8 4b fe ff ff       \tcallq  8f <wext_ioctl>\n 244:\t85 c0                \ttest   %eax,%eax\n 246:\t78 4f                \tjs     297 <wext_get_bssid+0x78>\n 248:\t0f b6 45 f7          \tmovzbl -0x9(%rbp),%eax\n 24c:\t0f b6 f8             \tmovzbl %al,%edi\n 24f:\t0f b6 45 f6          \tmovzbl -0xa(%rbp),%eax\n 253:\t0f b6 f0             \tmovzbl %al,%esi\n 256:\t0f b6 45 f5          \tmovzbl -0xb(%rbp),%eax\n 25a:\t44 0f b6 c8          \tmovzbl %al,%r9d\n 25e:\t0f b6 45 f4          \tmovzbl -0xc(%rbp),%eax\n 262:\t44 0f b6 c0          \tmovzbl %al,%r8d\n 266:\t0f b6 45 f3          \tmovzbl -0xd(%rbp),%eax\n 26a:\t0f b6 c8             \tmovzbl %al,%ecx\n 26d:\t0f b6 45 f2          \tmovzbl -0xe(%rbp),%eax\n 271:\t0f b6 d0             \tmovzbl %al,%edx\n 274:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 278:\t57                   \tpush   %rdi\n 279:\t56                   \tpush   %rsi\n 27a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 27f:\t48 89 c7             \tmov    %rax,%rdi\n 282:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 287:\te8 00 00 00 00       \tcallq  28c <wext_get_bssid+0x6d>\n 28c:\t48 83 c4 10          \tadd    $0x10,%rsp\n 290:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 295:\teb 05                \tjmp    29c <wext_get_bssid+0x7d>\n 297:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 29c:\tc9                   \tleaveq \n 29d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall wext_get_bssid(const char *a1, char *a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  if ((int)wext_ioctl(a1, Number, <span class=\"supfact\">v3</span>) < Number)\n    return Number;\n  sprintf(a2, String, (unsigned __int8)<span class=\"supfact\">v3</span>[Number],\n          (unsigned __int8)<span class=\"supfact\">v3</span>[Number],\n          (unsigned __int8)<span class=\"supfact\">v3</span>[Number],\n          (unsigned __int8)<span class=\"supfact\">v3</span>[Number],\n          (unsigned __int8)<span class=\"supfact\">v3</span>[Number],\n          (unsigned __int8)<span class=\"supfact\">v3</span>[Number]);\n  return Number L;\n}", "code_t": "int __cdecl wext_get_bssid(const char *ifname, char *buf) {\n  iwreq <span class=\"supfact\">wrq</span>;\n  if (wext_ioctl(ifname, Number, &<span class=\"supfact\">wrq</span>) < Number)\n    return Number;\n  sprintf(buf, String, <span class=\"supfact\">wrq</span>.u.qual.noise,\n          <span class=\"supfact\">wrq</span>.u.qual.updated, <span class=\"supfact\">wrq</span>.u.nwid.fixed,\n          <span class=\"supfact\">wrq</span>.u.nwid.disabled, <span class=\"supfact\">wrq</span>.u.freq.i,\n          <span class=\"supfact\">wrq</span>.u.freq.flags);\n  return Number;\n}", "var": [{"name": "v3", "type": "char[20]", "pred_name": "buf", "ref_name": "wrq", "ref_type": "struct iwreq { $EC3FB77B1F5CBB3C6B6AB4B4CE5B261D ifr_ifrn; iwreq_data u; }"}], "body_in_train": false}, {"repo_owner": "zakkak", "repo_name": "lb-bind", "path": "zakkak/lb-bind/532d3273a2804fd2d4d501ef54c5e8aebe856bfeb70796557ef5c06576f63bd4", "path_in_repo": "zakkak/lb-bind/bind-9.9.0/bin/tests/virtual-time/libvtwrapper.so", "objdump": "00000000000016f0 <gettimeofday>:\n    16f0:\t55                   \tpush   %rbp\n    16f1:\t48 89 e5             \tmov    %rsp,%rbp\n    16f4:\t48 83 ec 30          \tsub    $0x30,%rsp\n    16f8:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    16fc:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    1700:\t8b 05 4a 29 00 00    \tmov    0x294a(%rip),%eax        # 4050 <_init_called>\n    1706:\t85 c0                \ttest   %eax,%eax\n    1708:\t75 05                \tjne    170f <gettimeofday+0x1f>\n    170a:\te8 21 f9 ff ff       \tcallq  1030 <_init@plt>\n    170f:\t48 8b 05 2a 29 00 00 \tmov    0x292a(%rip),%rax        # 4040 <epoch>\n    1716:\t48 85 c0             \ttest   %rax,%rax\n    1719:\t75 1c                \tjne    1737 <gettimeofday+0x47>\n    171b:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    171f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1723:\t48 89 c6             \tmov    %rax,%rsi\n    1726:\tbf 60 00 00 00       \tmov    $0x60,%edi\n    172b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1730:\te8 eb f8 ff ff       \tcallq  1020 <syscall@plt>\n    1735:\teb 39                \tjmp    1770 <gettimeofday+0x80>\n    1737:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    173b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    173f:\t48 89 c6             \tmov    %rax,%rsi\n    1742:\tbf 60 00 00 00       \tmov    $0x60,%edi\n    1747:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    174c:\te8 cf f8 ff ff       \tcallq  1020 <syscall@plt>\n    1751:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1754:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    1758:\t75 13                \tjne    176d <gettimeofday+0x7d>\n    175a:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    175e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    1762:\t48 89 d6             \tmov    %rdx,%rsi\n    1765:\t48 89 c7             \tmov    %rax,%rdi\n    1768:\te8 1f f9 ff ff       \tcallq  108c <absolute_inflate>\n    176d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1770:\tc9                   \tleaveq \n    1771:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gettimeofday(__int64 *a1, __int64 a2) {\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  unsigned int v4;\n  if (!init_called)\n    _init();\n  if (!epoch)\n    return syscall(Number L, a1, a2);\n  v4 = syscall(Number L, <span class=\"supfact\">v3</span>, a2);\n  if (!v4)\n    absolute_inflate(<span class=\"supfact\">v3</span>, a1);\n  return v4;\n}", "code_t": "int __cdecl gettimeofday(timeval *tv, timezone *tz) {\n  timeval <span class=\"supfact\">now</span>;\n  int ret;\n  if (!init_called)\n    _init();\n  if (!epoch.tv_sec)\n    return syscall(Number L, tv, tz);\n  ret = syscall(Number L, &<span class=\"supfact\">now</span>, tz);\n  if (!ret)\n    absolute_inflate(&<span class=\"supfact\">now</span>, tv);\n  return ret;\n}", "var": [{"name": "v3", "type": "__int64[3]", "pred_name": "v3", "ref_name": "now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "igvtee", "repo_name": "books", "path": "igvtee/books/0be4c39a8f616a7fe624392a993f35178cd11839d59a63353db872eb17dfa2a7", "path_in_repo": "igvtee/books/qemu_linux/build/arm/linux/scripts/sortextable", "objdump": "", "code_s": "int __fxstat(int ver, int fildes, struct stat *<span class=\"supfact\">stat_buf</span>) {\n  return _fxstat(ver, fildes, <span class=\"supfact\">stat_buf</span>);\n}", "code_t": "int __fxstat(int ver, int fildes, struct stat *<span class=\"supfact\">stat_buf</span>) {\n  return _fxstat(ver, fildes, <span class=\"supfact\">stat_buf</span>);\n}", "var": [{"name": "stat_buf", "type": "struct stat *", "pred_name": "stat_buf", "ref_name": "stat_buf", "ref_type": "struct stat *"}], "body_in_train": true}, {"repo_owner": "rvandegrift", "repo_name": "hostap", "path": "rvandegrift/hostap/392adee7cb28d9a0258258ece635f5f825a801e7a16df00bb256a8a826008e0b", "path_in_repo": "rvandegrift/hostap/wlantest/rx_mgmt.o", "objdump": "0000000000001720 <rx_mgmt_reassoc_req>:\n    1720:\t55                   \tpush   %rbp\n    1721:\t48 89 e5             \tmov    %rsp,%rbp\n    1724:\t41 57                \tpush   %r15\n    1726:\t41 56                \tpush   %r14\n    1728:\t41 55                \tpush   %r13\n    172a:\t41 54                \tpush   %r12\n    172c:\t53                   \tpush   %rbx\n    172d:\t48 81 ec 78 01 00 00 \tsub    $0x178,%rsp\n    1734:\t48 89 bd 88 fe ff ff \tmov    %rdi,-0x178(%rbp)\n    173b:\t48 89 b5 80 fe ff ff \tmov    %rsi,-0x180(%rbp)\n    1742:\t48 89 95 78 fe ff ff \tmov    %rdx,-0x188(%rbp)\n    1749:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n    1750:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    1754:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1758:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n    175c:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n    1763:\t48 89 d6             \tmov    %rdx,%rsi\n    1766:\t48 89 c7             \tmov    %rax,%rdi\n    1769:\te8 00 00 00 00       \tcallq  176e <rx_mgmt_reassoc_req+0x4e>\n    176e:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    1772:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n    1777:\t0f 84 ac 03 00 00    \tje     1b29 <rx_mgmt_reassoc_req+0x409>\n    177d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1781:\t48 8d 50 0a          \tlea    0xa(%rax),%rdx\n    1785:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1789:\t48 89 d6             \tmov    %rdx,%rsi\n    178c:\t48 89 c7             \tmov    %rax,%rdi\n    178f:\te8 00 00 00 00       \tcallq  1794 <rx_mgmt_reassoc_req+0x74>\n    1794:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    1798:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n    179d:\t0f 84 89 03 00 00    \tje     1b2c <rx_mgmt_reassoc_req+0x40c>\n    17a3:\t48 83 bd 78 fe ff ff \tcmpq   $0x21,-0x188(%rbp)\n    17aa:\t21 \n    17ab:\t77 74                \tja     1821 <rx_mgmt_reassoc_req+0x101>\n    17ad:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    17b1:\t0f b6 40 0f          \tmovzbl 0xf(%rax),%eax\n    17b5:\t0f b6 f8             \tmovzbl %al,%edi\n    17b8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    17bc:\t0f b6 40 0e          \tmovzbl 0xe(%rax),%eax\n    17c0:\t0f b6 f0             \tmovzbl %al,%esi\n    17c3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    17c7:\t0f b6 40 0d          \tmovzbl 0xd(%rax),%eax\n    17cb:\t0f b6 c8             \tmovzbl %al,%ecx\n    17ce:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    17d2:\t0f b6 40 0c          \tmovzbl 0xc(%rax),%eax\n    17d6:\t44 0f b6 c8          \tmovzbl %al,%r9d\n    17da:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    17de:\t0f b6 40 0b          \tmovzbl 0xb(%rax),%eax\n    17e2:\t44 0f b6 c0          \tmovzbl %al,%r8d\n    17e6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    17ea:\t0f b6 40 0a          \tmovzbl 0xa(%rax),%eax\n    17ee:\t0f b6 d0             \tmovzbl %al,%edx\n    17f1:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n    17f8:\t48 83 ec 08          \tsub    $0x8,%rsp\n    17fc:\t57                   \tpush   %rdi\n    17fd:\t56                   \tpush   %rsi\n    17fe:\t51                   \tpush   %rcx\n    17ff:\t89 d1                \tmov    %edx,%ecx\n    1801:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1806:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    180b:\t48 89 c7             \tmov    %rax,%rdi\n    180e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1813:\te8 00 00 00 00       \tcallq  1818 <rx_mgmt_reassoc_req+0xf8>\n    1818:\t48 83 c4 20          \tadd    $0x20,%rsp\n    181c:\te9 0c 03 00 00       \tjmpq   1b2d <rx_mgmt_reassoc_req+0x40d>\n    1821:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1825:\t0f b6 40 21          \tmovzbl 0x21(%rax),%eax\n    1829:\t44 0f b6 c0          \tmovzbl %al,%r8d\n    182d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1831:\t0f b6 40 20          \tmovzbl 0x20(%rax),%eax\n    1835:\t44 0f b6 c8          \tmovzbl %al,%r9d\n    1839:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    183d:\t0f b6 40 1f          \tmovzbl 0x1f(%rax),%eax\n    1841:\t44 0f b6 d0          \tmovzbl %al,%r10d\n    1845:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1849:\t0f b6 40 1e          \tmovzbl 0x1e(%rax),%eax\n    184d:\t0f b6 d8             \tmovzbl %al,%ebx\n    1850:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1854:\t0f b6 40 1d          \tmovzbl 0x1d(%rax),%eax\n    1858:\t44 0f b6 e0          \tmovzbl %al,%r12d\n    185c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1860:\t0f b6 40 1c          \tmovzbl 0x1c(%rax),%eax\n    1864:\t0f b6 c0             \tmovzbl %al,%eax\n    1867:\t89 85 74 fe ff ff    \tmov    %eax,-0x18c(%rbp)\n    186d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1871:\t0f b7 40 1a          \tmovzwl 0x1a(%rax),%eax\n    1875:\t0f b7 c8             \tmovzwl %ax,%ecx\n    1878:\t89 8d 70 fe ff ff    \tmov    %ecx,-0x190(%rbp)\n    187e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1882:\t0f b7 40 18          \tmovzwl 0x18(%rax),%eax\n    1886:\t0f b7 f0             \tmovzwl %ax,%esi\n    1889:\t89 b5 6c fe ff ff    \tmov    %esi,-0x194(%rbp)\n    188f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1893:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n    1897:\t0f b6 f8             \tmovzbl %al,%edi\n    189a:\t89 bd 68 fe ff ff    \tmov    %edi,-0x198(%rbp)\n    18a0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    18a4:\t0f b6 40 08          \tmovzbl 0x8(%rax),%eax\n    18a8:\t0f b6 d0             \tmovzbl %al,%edx\n    18ab:\t89 95 64 fe ff ff    \tmov    %edx,-0x19c(%rbp)\n    18b1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    18b5:\t0f b6 40 07          \tmovzbl 0x7(%rax),%eax\n    18b9:\t44 0f b6 d8          \tmovzbl %al,%r11d\n    18bd:\t44 89 9d 60 fe ff ff \tmov    %r11d,-0x1a0(%rbp)\n    18c4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    18c8:\t0f b6 40 06          \tmovzbl 0x6(%rax),%eax\n    18cc:\t44 0f b6 f8          \tmovzbl %al,%r15d\n    18d0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    18d4:\t0f b6 40 05          \tmovzbl 0x5(%rax),%eax\n    18d8:\t44 0f b6 f0          \tmovzbl %al,%r14d\n    18dc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    18e0:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n    18e4:\t44 0f b6 e8          \tmovzbl %al,%r13d\n    18e8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    18ec:\t0f b6 40 0f          \tmovzbl 0xf(%rax),%eax\n    18f0:\t44 0f b6 d8          \tmovzbl %al,%r11d\n    18f4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    18f8:\t0f b6 40 0e          \tmovzbl 0xe(%rax),%eax\n    18fc:\t0f b6 f8             \tmovzbl %al,%edi\n    18ff:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1903:\t0f b6 40 0d          \tmovzbl 0xd(%rax),%eax\n    1907:\t0f b6 f0             \tmovzbl %al,%esi\n    190a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    190e:\t0f b6 40 0c          \tmovzbl 0xc(%rax),%eax\n    1912:\t0f b6 c8             \tmovzbl %al,%ecx\n    1915:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1919:\t0f b6 40 0b          \tmovzbl 0xb(%rax),%eax\n    191d:\t0f b6 d0             \tmovzbl %al,%edx\n    1920:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1924:\t0f b6 40 0a          \tmovzbl 0xa(%rax),%eax\n    1928:\t0f b6 c0             \tmovzbl %al,%eax\n    192b:\t41 50                \tpush   %r8\n    192d:\t41 51                \tpush   %r9\n    192f:\t41 52                \tpush   %r10\n    1931:\t53                   \tpush   %rbx\n    1932:\t41 54                \tpush   %r12\n    1934:\t8b 9d 74 fe ff ff    \tmov    -0x18c(%rbp),%ebx\n    193a:\t53                   \tpush   %rbx\n    193b:\t8b 9d 70 fe ff ff    \tmov    -0x190(%rbp),%ebx\n    1941:\t53                   \tpush   %rbx\n    1942:\t8b 9d 6c fe ff ff    \tmov    -0x194(%rbp),%ebx\n    1948:\t53                   \tpush   %rbx\n    1949:\t8b 9d 68 fe ff ff    \tmov    -0x198(%rbp),%ebx\n    194f:\t53                   \tpush   %rbx\n    1950:\t8b 9d 64 fe ff ff    \tmov    -0x19c(%rbp),%ebx\n    1956:\t53                   \tpush   %rbx\n    1957:\t8b 9d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ebx\n    195d:\t53                   \tpush   %rbx\n    195e:\t41 57                \tpush   %r15\n    1960:\t41 56                \tpush   %r14\n    1962:\t41 55                \tpush   %r13\n    1964:\t41 53                \tpush   %r11\n    1966:\t57                   \tpush   %rdi\n    1967:\t41 89 f1             \tmov    %esi,%r9d\n    196a:\t41 89 c8             \tmov    %ecx,%r8d\n    196d:\t89 d1                \tmov    %edx,%ecx\n    196f:\t89 c2                \tmov    %eax,%edx\n    1971:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1976:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    197b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1980:\te8 00 00 00 00       \tcallq  1985 <rx_mgmt_reassoc_req+0x265>\n    1985:\t48 83 ec 80          \tsub    $0xffffffffffffff80,%rsp\n    1989:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    198d:\t8b 80 e0 02 00 00    \tmov    0x2e0(%rax),%eax\n    1993:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1996:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    199a:\t89 90 e0 02 00 00    \tmov    %edx,0x2e0(%rax)\n    19a0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    19a4:\t48 83 c0 22          \tadd    $0x22,%rax\n    19a8:\t48 2b 85 80 fe ff ff \tsub    -0x180(%rbp),%rax\n    19af:\t48 89 c2             \tmov    %rax,%rdx\n    19b2:\t48 8b 85 78 fe ff ff \tmov    -0x188(%rbp),%rax\n    19b9:\t48 29 d0             \tsub    %rdx,%rax\n    19bc:\t48 89 c6             \tmov    %rax,%rsi\n    19bf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    19c3:\t48 8d 78 22          \tlea    0x22(%rax),%rdi\n    19c7:\t48 8d 85 90 fe ff ff \tlea    -0x170(%rbp),%rax\n    19ce:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    19d3:\t48 89 c2             \tmov    %rax,%rdx\n    19d6:\te8 00 00 00 00       \tcallq  19db <rx_mgmt_reassoc_req+0x2bb>\n    19db:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    19de:\t75 74                \tjne    1a54 <rx_mgmt_reassoc_req+0x334>\n    19e0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    19e4:\t0f b6 40 0f          \tmovzbl 0xf(%rax),%eax\n    19e8:\t0f b6 f8             \tmovzbl %al,%edi\n    19eb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    19ef:\t0f b6 40 0e          \tmovzbl 0xe(%rax),%eax\n    19f3:\t0f b6 f0             \tmovzbl %al,%esi\n    19f6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    19fa:\t0f b6 40 0d          \tmovzbl 0xd(%rax),%eax\n    19fe:\t0f b6 c8             \tmovzbl %al,%ecx\n    1a01:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1a05:\t0f b6 40 0c          \tmovzbl 0xc(%rax),%eax\n    1a09:\t44 0f b6 c8          \tmovzbl %al,%r9d\n    1a0d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1a11:\t0f b6 40 0b          \tmovzbl 0xb(%rax),%eax\n    1a15:\t44 0f b6 c0          \tmovzbl %al,%r8d\n    1a19:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1a1d:\t0f b6 40 0a          \tmovzbl 0xa(%rax),%eax\n    1a21:\t0f b6 d0             \tmovzbl %al,%edx\n    1a24:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n    1a2b:\t48 83 ec 08          \tsub    $0x8,%rsp\n    1a2f:\t57                   \tpush   %rdi\n    1a30:\t56                   \tpush   %rsi\n    1a31:\t51                   \tpush   %rcx\n    1a32:\t89 d1                \tmov    %edx,%ecx\n    1a34:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1a39:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    1a3e:\t48 89 c7             \tmov    %rax,%rdi\n    1a41:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1a46:\te8 00 00 00 00       \tcallq  1a4b <rx_mgmt_reassoc_req+0x32b>\n    1a4b:\t48 83 c4 20          \tadd    $0x20,%rsp\n    1a4f:\te9 d9 00 00 00       \tjmpq   1b2d <rx_mgmt_reassoc_req+0x40d>\n    1a54:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1a58:\t0f b7 50 18          \tmovzwl 0x18(%rax),%edx\n    1a5c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a60:\t66 89 90 6c 03 00 00 \tmov    %dx,0x36c(%rax)\n    1a67:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1a6b:\t0f b7 50 1a          \tmovzwl 0x1a(%rax),%edx\n    1a6f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a73:\t66 89 90 6e 03 00 00 \tmov    %dx,0x36e(%rax)\n    1a7a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a7e:\t48 8b 80 70 03 00 00 \tmov    0x370(%rax),%rax\n    1a85:\t48 89 c7             \tmov    %rax,%rdi\n    1a88:\te8 00 00 00 00       \tcallq  1a8d <rx_mgmt_reassoc_req+0x36d>\n    1a8d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1a91:\t48 83 c0 22          \tadd    $0x22,%rax\n    1a95:\t48 2b 85 80 fe ff ff \tsub    -0x180(%rbp),%rax\n    1a9c:\t48 89 c2             \tmov    %rax,%rdx\n    1a9f:\t48 8b 85 78 fe ff ff \tmov    -0x188(%rbp),%rax\n    1aa6:\t48 29 d0             \tsub    %rdx,%rax\n    1aa9:\t48 89 c2             \tmov    %rax,%rdx\n    1aac:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1ab0:\t48 89 90 78 03 00 00 \tmov    %rdx,0x378(%rax)\n    1ab7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1abb:\t48 8b 80 78 03 00 00 \tmov    0x378(%rax),%rax\n    1ac2:\t48 89 c7             \tmov    %rax,%rdi\n    1ac5:\te8 00 00 00 00       \tcallq  1aca <rx_mgmt_reassoc_req+0x3aa>\n    1aca:\t48 89 c2             \tmov    %rax,%rdx\n    1acd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1ad1:\t48 89 90 70 03 00 00 \tmov    %rdx,0x370(%rax)\n    1ad8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1adc:\t48 8b 80 70 03 00 00 \tmov    0x370(%rax),%rax\n    1ae3:\t48 85 c0             \ttest   %rax,%rax\n    1ae6:\t74 29                \tje     1b11 <rx_mgmt_reassoc_req+0x3f1>\n    1ae8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1aec:\t48 8b 90 78 03 00 00 \tmov    0x378(%rax),%rdx\n    1af3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1af7:\t48 8d 48 22          \tlea    0x22(%rax),%rcx\n    1afb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1aff:\t48 8b 80 70 03 00 00 \tmov    0x370(%rax),%rax\n    1b06:\t48 89 ce             \tmov    %rcx,%rsi\n    1b09:\t48 89 c7             \tmov    %rax,%rdi\n    1b0c:\te8 00 00 00 00       \tcallq  1b11 <rx_mgmt_reassoc_req+0x3f1>\n    1b11:\t48 8d 95 90 fe ff ff \tlea    -0x170(%rbp),%rdx\n    1b18:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1b1c:\t48 89 d6             \tmov    %rdx,%rsi\n    1b1f:\t48 89 c7             \tmov    %rax,%rdi\n    1b22:\te8 00 00 00 00       \tcallq  1b27 <rx_mgmt_reassoc_req+0x407>\n    1b27:\teb 04                \tjmp    1b2d <rx_mgmt_reassoc_req+0x40d>\n    1b29:\t90                   \tnop\n    1b2a:\teb 01                \tjmp    1b2d <rx_mgmt_reassoc_req+0x40d>\n    1b2c:\t90                   \tnop\n    1b2d:\t48 8d 65 d8          \tlea    -0x28(%rbp),%rsp\n    1b31:\t5b                   \tpop    %rbx\n    1b32:\t41 5c                \tpop    %r12\n    1b34:\t41 5d                \tpop    %r13\n    1b36:\t41 5e                \tpop    %r14\n    1b38:\t41 5f                \tpop    %r15\n    1b3a:\t5d                   \tpop    %rbp\n    1b3b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rx_mgmt_reassoc_req(__int64 a1, __int64 a2,\n                                       unsigned __int64 a3) {\n  __int64 result;\n  void *v4;\n  char <span class=\"supfact\">v6</span>[Number];\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  v9 = a2;\n  result = bss_get(a1, a2 + Number);\n  v8 = result;\n  if (result) {\n    result = sta_get(v8, v9 + Number);\n    v7 = result;\n    if (result) {\n      if (a3 > Number) {\n        wpa_printf(Number L, String String, *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int16 *)(v9 + Number),\n                   *(unsigned __int16 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number),\n                   *(unsigned __int8 *)(v9 + Number));\n        ++*(_DWORD *)(v7 + Number);\n        if ((unsigned int)ieee802_11_parse_elems(\n                v9 + Number, a3 - (v9 + Number - a2), <span class=\"supfact\">v6</span>,\n                Number L) == Number) {\n          result =\n              add_note(a1, Number L, String, *(unsigned __int8 *)(v9 + Number),\n                       *(unsigned __int8 *)(v9 + Number),\n                       *(unsigned __int8 *)(v9 + Number),\n                       *(unsigned __int8 *)(v9 + Number),\n                       *(unsigned __int8 *)(v9 + Number),\n                       *(unsigned __int8 *)(v9 + Number));\n        } else {\n          *(_WORD *)(v7 + Number) = *(_WORD *)(v9 + Number);\n          *(_WORD *)(v7 + Number) = *(_WORD *)(v9 + Number);\n          free(*(void **)(v7 + Number));\n          *(_QWORD *)(v7 + Number) = a3 - (v9 + Number - a2);\n          v4 = malloc(*(_QWORD *)(v7 + Number));\n          *(_QWORD *)(v7 + Number) = v4;\n          if (*(_QWORD *)(v7 + Number))\n            memcpy(*(void **)(v7 + Number), (const void *)(v9 + Number),\n                   *(_QWORD *)(v7 + Number));\n          result = sta_update_assoc(v7, <span class=\"supfact\">v6</span>);\n        }\n      } else {\n        result =\n            add_note(a1, Number L, String, *(unsigned __int8 *)(v9 + Number),\n                     *(unsigned __int8 *)(v9 + Number),\n                     *(unsigned __int8 *)(v9 + Number),\n                     *(unsigned __int8 *)(v9 + Number),\n                     *(unsigned __int8 *)(v9 + Number),\n                     *(unsigned __int8 *)(v9 + Number));\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl rx_mgmt_reassoc_req(wlantest *wt, const u8 *data, size_t len) {\n  u8 *v3;\n  ieee802_11_elems <span class=\"supfact\">elems</span>;\n  wlantest_sta *sta;\n  wlantest_bss *bss;\n  const ieee80211_mgmt *mgmt;\n  mgmt = (const ieee80211_mgmt *)data;\n  bss = (wlantest_bss *)bss_get(wt, data + Number);\n  if (bss) {\n    sta = (wlantest_sta *)sta_get(bss, mgmt->sa);\n    if (sta) {\n      if (len > Number) {\n        wpa_printf(Number L, String String, mgmt->sa[Number], mgmt->sa[Number],\n                   mgmt->sa[Number], mgmt->sa[Number], mgmt->sa[Number],\n                   mgmt->sa[Number], mgmt->da[Number], mgmt->da[Number],\n                   mgmt->da[Number], mgmt->da[Number], mgmt->da[Number],\n                   mgmt->da[Number], mgmt->u.auth.auth_alg,\n                   mgmt->u.auth.auth_transaction,\n                   mgmt->u.reassoc_req.current_ap[Number],\n                   mgmt->u.reassoc_req.current_ap[Number],\n                   mgmt->u.reassoc_req.current_ap[Number],\n                   mgmt->u.reassoc_req.current_ap[Number],\n                   mgmt->u.reassoc_req.current_ap[Number],\n                   mgmt->u.reassoc_req.current_ap[Number]);\n        ++sta->counters[Number];\n        if ((unsigned int)ieee802_11_parse_elems(\n                &mgmt->u.probe_resp.capab_info,\n                len - ((char *)&mgmt->u.probe_resp.capab_info - (char *)data),\n                &<span class=\"supfact\">elems</span>, Number L) == Number) {\n          add_note(wt, Number L, String, mgmt->sa[Number], mgmt->sa[Number],\n                   mgmt->sa[Number], mgmt->sa[Number], mgmt->sa[Number],\n                   mgmt->sa[Number]);\n        } else {\n          sta->assocreq_capab_info = mgmt->u.auth.auth_alg;\n          sta->assocreq_listen_int = mgmt->u.auth.auth_transaction;\n          free(sta->assocreq_ies);\n          sta->assocreq_ies_len =\n              len - ((char *)&mgmt->u.probe_resp.capab_info - (char *)data);\n          v3 = (u8 *)malloc(sta->assocreq_ies_len);\n          sta->assocreq_ies = v3;\n          if (sta->assocreq_ies)\n            memcpy(sta->assocreq_ies, &mgmt->u.probe_resp.capab_info,\n                   sta->assocreq_ies_len);\n          sta_update_assoc(sta, &<span class=\"supfact\">elems</span>);\n        }\n      } else {\n        add_note(wt, Number L, String, mgmt->sa[Number], mgmt->sa[Number],\n                 mgmt->sa[Number], mgmt->sa[Number], mgmt->sa[Number],\n                 mgmt->sa[Number]);\n      }\n    }\n  }\n}", "var": [{"name": "v6", "type": "struct ieee802_11_elems { const u8 * ssid; const u8 * supp_rates; const u8 * fh_params; const u8 * ds_params; const u8 * cf_params; const u8 * tim; const u8 * ibss_params; const u8 * challenge; const u8 * erp_info; const u8 * ext_supp_rates; const u8 * wpa_ie; const u8 * rsn_ie; const u8 * wmm; const u8 * wmm_tspec; const u8 * wps_ie; const u8 * power_cap; const u8 * supp_channels; const u8 * mdie; const u8 * ftie; const u8 * timeout_int; const u8 * ht_capabilities; const u8 * ht_operation; const u8 * vendor_ht_cap; const u8 * p2p; const u8 * wfd; const u8 * link_id; const u8 * interworking; const u8 * hs20; const u8 * ext_capab; const u8 * bss_max_idle_period; u8 ssid_len; u8 supp_rates_len; u8 fh_params_len; u8 ds_params_len; u8 cf_params_len; u8 tim_len; u8 ibss_params_len; u8 challenge_len; u8 erp_info_len; u8 ext_supp_rates_len; u8 wpa_ie_len; u8 rsn_ie_len; u8 wmm_len; u8 wmm_tspec_len; u8 wps_ie_len; u8 power_cap_len; u8 supp_channels_len; u8 mdie_len; u8 ftie_len; u8 timeout_int_len; u8 ht_capabilities_len; u8 ht_operation_len; u8 vendor_ht_cap_len; u8 p2p_len; u8 wfd_len; u8 interworking_len; u8 hs20_len; u8 ext_capab_len; PADDING (4); }", "pred_name": "elems", "ref_name": "elems", "ref_type": "struct ieee802_11_elems { const u8 * ssid; const u8 * supp_rates; const u8 * fh_params; const u8 * ds_params; const u8 * cf_params; const u8 * tim; const u8 * ibss_params; const u8 * challenge; const u8 * erp_info; const u8 * ext_supp_rates; const u8 * wpa_ie; const u8 * rsn_ie; const u8 * wmm; const u8 * wmm_tspec; const u8 * wps_ie; const u8 * power_cap; const u8 * supp_channels; const u8 * mdie; const u8 * ftie; const u8 * timeout_int; const u8 * ht_capabilities; const u8 * ht_operation; const u8 * vht_capabilities; const u8 * vht_operation; const u8 * vendor_ht_cap; const u8 * p2p; const u8 * wfd; const u8 * link_id; const u8 * interworking; const u8 * hs20; const u8 * ext_capab; const u8 * bss_max_idle_period; const u8 * ssid_list; u8 ssid_len; u8 supp_rates_len; u8 fh_params_len; u8 ds_params_len; u8 cf_params_len; u8 tim_len; u8 ibss_params_len; u8 challenge_len; u8 erp_info_len; u8 ext_supp_rates_len; u8 wpa_ie_len; u8 rsn_ie_len; u8 wmm_len; u8 wmm_tspec_len; u8 wps_ie_len; u8 power_cap_len; u8 supp_channels_len; u8 mdie_len; u8 ftie_len; u8 timeout_int_len; u8 ht_capabilities_len; u8 ht_operation_len; u8 vht_capabilities_len; u8 vht_operation_len; u8 vendor_ht_cap_len; u8 p2p_len; u8 wfd_len; u8 interworking_len; u8 hs20_len; u8 ext_capab_len; u8 ssid_list_len; PADDING (1); }"}], "body_in_train": false}, {"repo_owner": "SlimRoms", "repo_name": "kernel_samsung_mondrianwifi", "path": "SlimRoms/kernel_samsung_mondrianwifi/fc2ce89285213f7a76763ae19eda610322b3479b9c8b196478b35e554e38078d", "path_in_repo": "SlimRoms/kernel_samsung_mondrianwifi/tools/perf/builtin-test.o", "objdump": "00000000000044e9 <test__PERF_RECORD>:\n    44e9:\t55                   \tpush   %rbp\n    44ea:\t48 89 e5             \tmov    %rsp,%rbp\n    44ed:\t48 81 ec 80 01 00 00 \tsub    $0x180,%rsp\n    44f4:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    44fb:\t00 00 \n    44fd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4501:\t31 c0                \txor    %eax,%eax\n    4503:\t48 c7 85 00 ff ff ff \tmovq   $0x0,-0x100(%rbp)\n    450a:\t00 00 00 00 \n    450e:\t48 c7 85 08 ff ff ff \tmovq   $0x0,-0xf8(%rbp)\n    4515:\t00 00 00 00 \n    4519:\t48 c7 85 10 ff ff ff \tmovq   $0x0,-0xf0(%rbp)\n    4520:\t00 00 00 00 \n    4524:\t48 c7 85 18 ff ff ff \tmovq   $0x0,-0xe8(%rbp)\n    452b:\t00 00 00 00 \n    452f:\t48 c7 85 20 ff ff ff \tmovq   $0x0,-0xe0(%rbp)\n    4536:\t00 00 00 00 \n    453a:\t48 c7 85 28 ff ff ff \tmovq   $0x0,-0xd8(%rbp)\n    4541:\t00 00 00 00 \n    4545:\t48 c7 85 30 ff ff ff \tmovq   $0x0,-0xd0(%rbp)\n    454c:\t00 00 00 00 \n    4550:\t48 c7 85 38 ff ff ff \tmovq   $0x0,-0xc8(%rbp)\n    4557:\t00 00 00 00 \n    455b:\t48 c7 85 40 ff ff ff \tmovq   $0x0,-0xc0(%rbp)\n    4562:\t00 00 00 00 \n    4566:\t48 c7 85 48 ff ff ff \tmovq   $0x0,-0xb8(%rbp)\n    456d:\t00 00 00 00 \n    4571:\tc6 85 17 ff ff ff 01 \tmovb   $0x1,-0xe9(%rbp)\n    4578:\tc7 85 24 ff ff ff 0a \tmovl   $0xa,-0xdc(%rbp)\n    457f:\t00 00 00 \n    4582:\tc7 85 28 ff ff ff 00 \tmovl   $0x100,-0xd8(%rbp)\n    4589:\t01 00 00 \n    458c:\t48 c7 85 a8 fe ff ff \tmovq   $0x0,-0x158(%rbp)\n    4593:\t00 00 00 00 \n    4597:\t48 c7 85 b0 fe ff ff \tmovq   $0x0,-0x150(%rbp)\n    459e:\t00 00 00 00 \n    45a2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    45a7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    45ac:\te8 00 00 00 00       \tcallq  45b1 <test__PERF_RECORD+0xc8>\n    45b1:\t48 89 85 c0 fe ff ff \tmov    %rax,-0x140(%rbp)\n    45b8:\t48 c7 85 c8 fe ff ff \tmovq   $0x0,-0x138(%rbp)\n    45bf:\t00 00 00 00 \n    45c3:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    45ca:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    45ce:\t48 c7 45 b8 00 00 00 \tmovq   $0x0,-0x48(%rbp)\n    45d5:\t00 \n    45d6:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n    45dd:\t00 \n    45de:\t48 c7 85 b8 fe ff ff \tmovq   $0x0,-0x148(%rbp)\n    45e5:\t00 00 00 00 \n    45e9:\tc6 85 80 fe ff ff 00 \tmovb   $0x0,-0x180(%rbp)\n    45f0:\tc6 85 81 fe ff ff 00 \tmovb   $0x0,-0x17f(%rbp)\n    45f7:\tc6 85 82 fe ff ff 00 \tmovb   $0x0,-0x17e(%rbp)\n    45fe:\tc6 85 83 fe ff ff 00 \tmovb   $0x0,-0x17d(%rbp)\n    4605:\tc7 85 84 fe ff ff ff \tmovl   $0xffffffff,-0x17c(%rbp)\n    460c:\tff ff ff \n    460f:\tc7 85 88 fe ff ff 00 \tmovl   $0x0,-0x178(%rbp)\n    4616:\t00 00 00 \n    4619:\tc7 85 90 fe ff ff 00 \tmovl   $0x0,-0x170(%rbp)\n    4620:\t00 00 00 \n    4623:\tc7 85 94 fe ff ff 00 \tmovl   $0x0,-0x16c(%rbp)\n    462a:\t00 00 00 \n    462d:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n    4634:\t00 \n    4635:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    463c:\t00 \n    463d:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    4644:\t00 \n    4645:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    464c:\t00 \n    464d:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    4654:\t00 \n    4655:\t48 83 bd c0 fe ff ff \tcmpq   $0x0,-0x140(%rbp)\n    465c:\t00 \n    465d:\t75 19                \tjne    4678 <test__PERF_RECORD+0x18f>\n    465f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4664:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4669:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    466e:\te8 00 00 00 00       \tcallq  4673 <test__PERF_RECORD+0x18a>\n    4673:\te9 a6 09 00 00       \tjmpq   501e <test__PERF_RECORD+0xb35>\n    4678:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    467f:\t48 89 c7             \tmov    %rax,%rdi\n    4682:\te8 00 00 00 00       \tcallq  4687 <test__PERF_RECORD+0x19e>\n    4687:\t89 85 84 fe ff ff    \tmov    %eax,-0x17c(%rbp)\n    468d:\t83 bd 84 fe ff ff 00 \tcmpl   $0x0,-0x17c(%rbp)\n    4694:\t79 19                \tjns    46af <test__PERF_RECORD+0x1c6>\n    4696:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    469b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    46a0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    46a5:\te8 00 00 00 00       \tcallq  46aa <test__PERF_RECORD+0x1c1>\n    46aa:\te9 60 09 00 00       \tjmpq   500f <test__PERF_RECORD+0xb26>\n    46af:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n    46b6:\t48 8b 95 08 ff ff ff \tmov    -0xf8(%rbp),%rdx\n    46bd:\t48 8b b5 00 ff ff ff \tmov    -0x100(%rbp),%rsi\n    46c4:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    46cb:\t49 89 c8             \tmov    %rcx,%r8\n    46ce:\tb9 ff ff ff ff       \tmov    $0xffffffff,%ecx\n    46d3:\t48 89 c7             \tmov    %rax,%rdi\n    46d6:\te8 00 00 00 00       \tcallq  46db <test__PERF_RECORD+0x1f2>\n    46db:\t89 85 84 fe ff ff    \tmov    %eax,-0x17c(%rbp)\n    46e1:\t83 bd 84 fe ff ff 00 \tcmpl   $0x0,-0x17c(%rbp)\n    46e8:\t79 19                \tjns    4703 <test__PERF_RECORD+0x21a>\n    46ea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    46ef:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    46f4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    46f9:\te8 00 00 00 00       \tcallq  46fe <test__PERF_RECORD+0x215>\n    46fe:\te9 0c 09 00 00       \tjmpq   500f <test__PERF_RECORD+0xb26>\n    4703:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    4707:\t48 8d 8d 00 ff ff ff \tlea    -0x100(%rbp),%rcx\n    470e:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4715:\t48 89 ce             \tmov    %rcx,%rsi\n    4718:\t48 89 c7             \tmov    %rax,%rdi\n    471b:\te8 00 00 00 00       \tcallq  4720 <test__PERF_RECORD+0x237>\n    4720:\t89 85 84 fe ff ff    \tmov    %eax,-0x17c(%rbp)\n    4726:\t83 bd 84 fe ff ff 00 \tcmpl   $0x0,-0x17c(%rbp)\n    472d:\t79 19                \tjns    4748 <test__PERF_RECORD+0x25f>\n    472f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4734:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4739:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    473e:\te8 00 00 00 00       \tcallq  4743 <test__PERF_RECORD+0x25a>\n    4743:\te9 c7 08 00 00       \tjmpq   500f <test__PERF_RECORD+0xb26>\n    4748:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    474f:\t48 8b 00             \tmov    (%rax),%rax\n    4752:\t48 89 85 d0 fe ff ff \tmov    %rax,-0x130(%rbp)\n    4759:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n    4760:\t48 89 85 d8 fe ff ff \tmov    %rax,-0x128(%rbp)\n    4767:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    476e:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    4772:\t0c 80                \tor     $0x80,%al\n    4774:\t48 89 c2             \tmov    %rax,%rdx\n    4777:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    477e:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n    4782:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    4789:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    478d:\t48 83 c8 02          \tor     $0x2,%rax\n    4791:\t48 89 c2             \tmov    %rax,%rdx\n    4794:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    479b:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n    479f:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    47a6:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    47aa:\t48 83 c8 04          \tor     $0x4,%rax\n    47ae:\t48 89 c2             \tmov    %rax,%rdx\n    47b1:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    47b8:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n    47bc:\t48 8d 95 00 ff ff ff \tlea    -0x100(%rbp),%rdx\n    47c3:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    47ca:\t48 89 d6             \tmov    %rdx,%rsi\n    47cd:\t48 89 c7             \tmov    %rax,%rdi\n    47d0:\te8 00 00 00 00       \tcallq  47d5 <test__PERF_RECORD+0x2ec>\n    47d5:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    47dc:\t8b 80 24 08 00 00    \tmov    0x824(%rax),%eax\n    47e2:\t48 8d 95 b0 fe ff ff \tlea    -0x150(%rbp),%rdx\n    47e9:\t48 8d 8d a8 fe ff ff \tlea    -0x158(%rbp),%rcx\n    47f0:\t48 89 ce             \tmov    %rcx,%rsi\n    47f3:\t89 c7                \tmov    %eax,%edi\n    47f5:\te8 0d fb ff ff       \tcallq  4307 <sched__get_first_possible_cpu>\n    47fa:\t89 85 84 fe ff ff    \tmov    %eax,-0x17c(%rbp)\n    4800:\t83 bd 84 fe ff ff 00 \tcmpl   $0x0,-0x17c(%rbp)\n    4807:\t79 2a                \tjns    4833 <test__PERF_RECORD+0x34a>\n    4809:\te8 00 00 00 00       \tcallq  480e <test__PERF_RECORD+0x325>\n    480e:\t8b 00                \tmov    (%rax),%eax\n    4810:\t89 c7                \tmov    %eax,%edi\n    4812:\te8 00 00 00 00       \tcallq  4817 <test__PERF_RECORD+0x32e>\n    4817:\t48 89 c2             \tmov    %rax,%rdx\n    481a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    481f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4824:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4829:\te8 00 00 00 00       \tcallq  482e <test__PERF_RECORD+0x345>\n    482e:\te9 dc 07 00 00       \tjmpq   500f <test__PERF_RECORD+0xb26>\n    4833:\t8b 85 84 fe ff ff    \tmov    -0x17c(%rbp),%eax\n    4839:\t89 85 98 fe ff ff    \tmov    %eax,-0x168(%rbp)\n    483f:\t48 8b 95 a8 fe ff ff \tmov    -0x158(%rbp),%rdx\n    4846:\t48 8b 8d b0 fe ff ff \tmov    -0x150(%rbp),%rcx\n    484d:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4854:\t8b 80 24 08 00 00    \tmov    0x824(%rax),%eax\n    485a:\t48 89 ce             \tmov    %rcx,%rsi\n    485d:\t89 c7                \tmov    %eax,%edi\n    485f:\te8 00 00 00 00       \tcallq  4864 <test__PERF_RECORD+0x37b>\n    4864:\t85 c0                \ttest   %eax,%eax\n    4866:\t79 2a                \tjns    4892 <test__PERF_RECORD+0x3a9>\n    4868:\te8 00 00 00 00       \tcallq  486d <test__PERF_RECORD+0x384>\n    486d:\t8b 00                \tmov    (%rax),%eax\n    486f:\t89 c7                \tmov    %eax,%edi\n    4871:\te8 00 00 00 00       \tcallq  4876 <test__PERF_RECORD+0x38d>\n    4876:\t48 89 c2             \tmov    %rax,%rdx\n    4879:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    487e:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4883:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4888:\te8 00 00 00 00       \tcallq  488d <test__PERF_RECORD+0x3a4>\n    488d:\te9 6e 07 00 00       \tjmpq   5000 <test__PERF_RECORD+0xb17>\n    4892:\t0f b6 85 15 ff ff ff \tmovzbl -0xeb(%rbp),%eax\n    4899:\t0f b6 d0             \tmovzbl %al,%edx\n    489c:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    48a3:\t89 d6                \tmov    %edx,%esi\n    48a5:\t48 89 c7             \tmov    %rax,%rdi\n    48a8:\te8 00 00 00 00       \tcallq  48ad <test__PERF_RECORD+0x3c4>\n    48ad:\t89 85 84 fe ff ff    \tmov    %eax,-0x17c(%rbp)\n    48b3:\t83 bd 84 fe ff ff 00 \tcmpl   $0x0,-0x17c(%rbp)\n    48ba:\t79 2a                \tjns    48e6 <test__PERF_RECORD+0x3fd>\n    48bc:\te8 00 00 00 00       \tcallq  48c1 <test__PERF_RECORD+0x3d8>\n    48c1:\t8b 00                \tmov    (%rax),%eax\n    48c3:\t89 c7                \tmov    %eax,%edi\n    48c5:\te8 00 00 00 00       \tcallq  48ca <test__PERF_RECORD+0x3e1>\n    48ca:\t48 89 c2             \tmov    %rax,%rdx\n    48cd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    48d2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    48d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    48dc:\te8 00 00 00 00       \tcallq  48e1 <test__PERF_RECORD+0x3f8>\n    48e1:\te9 29 07 00 00       \tjmpq   500f <test__PERF_RECORD+0xb26>\n    48e6:\t8b 8d 28 ff ff ff    \tmov    -0xd8(%rbp),%ecx\n    48ec:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    48f3:\tba 00 00 00 00       \tmov    $0x0,%edx\n    48f8:\t89 ce                \tmov    %ecx,%esi\n    48fa:\t48 89 c7             \tmov    %rax,%rdi\n    48fd:\te8 00 00 00 00       \tcallq  4902 <test__PERF_RECORD+0x419>\n    4902:\t89 85 84 fe ff ff    \tmov    %eax,-0x17c(%rbp)\n    4908:\t83 bd 84 fe ff ff 00 \tcmpl   $0x0,-0x17c(%rbp)\n    490f:\t79 2a                \tjns    493b <test__PERF_RECORD+0x452>\n    4911:\te8 00 00 00 00       \tcallq  4916 <test__PERF_RECORD+0x42d>\n    4916:\t8b 00                \tmov    (%rax),%eax\n    4918:\t89 c7                \tmov    %eax,%edi\n    491a:\te8 00 00 00 00       \tcallq  491f <test__PERF_RECORD+0x436>\n    491f:\t48 89 c2             \tmov    %rax,%rdx\n    4922:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4927:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    492c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4931:\te8 00 00 00 00       \tcallq  4936 <test__PERF_RECORD+0x44d>\n    4936:\te9 d4 06 00 00       \tjmpq   500f <test__PERF_RECORD+0xb26>\n    493b:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4942:\t48 89 c7             \tmov    %rax,%rdi\n    4945:\te8 00 00 00 00       \tcallq  494a <test__PERF_RECORD+0x461>\n    494a:\t48 89 85 e0 fe ff ff \tmov    %rax,-0x120(%rbp)\n    4951:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    4958:\t48 89 c7             \tmov    %rax,%rdi\n    495b:\te8 00 00 00 00       \tcallq  4960 <test__PERF_RECORD+0x477>\n    4960:\t89 85 9c fe ff ff    \tmov    %eax,-0x164(%rbp)\n    4966:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    496d:\t48 89 c7             \tmov    %rax,%rdi\n    4970:\te8 00 00 00 00       \tcallq  4975 <test__PERF_RECORD+0x48c>\n    4975:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    497c:\t48 89 c7             \tmov    %rax,%rdi\n    497f:\te8 00 00 00 00       \tcallq  4984 <test__PERF_RECORD+0x49b>\n    4984:\t8b 85 94 fe ff ff    \tmov    -0x16c(%rbp),%eax\n    498a:\t89 85 a0 fe ff ff    \tmov    %eax,-0x160(%rbp)\n    4990:\tc7 85 8c fe ff ff 00 \tmovl   $0x0,-0x174(%rbp)\n    4997:\t00 00 00 \n    499a:\te9 f9 04 00 00       \tjmpq   4e98 <test__PERF_RECORD+0x9af>\n    499f:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    49a6:\t8b 00                \tmov    (%rax),%eax\n    49a8:\t89 85 a4 fe ff ff    \tmov    %eax,-0x15c(%rbp)\n    49ae:\t8b 85 a4 fe ff ff    \tmov    -0x15c(%rbp),%eax\n    49b4:\t89 c7                \tmov    %eax,%edi\n    49b6:\te8 00 00 00 00       \tcallq  49bb <test__PERF_RECORD+0x4d2>\n    49bb:\t48 89 85 f0 fe ff ff \tmov    %rax,-0x110(%rbp)\n    49c2:\t83 85 94 fe ff ff 01 \taddl   $0x1,-0x16c(%rbp)\n    49c9:\t83 bd a4 fe ff ff 09 \tcmpl   $0x9,-0x15c(%rbp)\n    49d0:\t77 17                \tja     49e9 <test__PERF_RECORD+0x500>\n    49d2:\t8b 85 a4 fe ff ff    \tmov    -0x15c(%rbp),%eax\n    49d8:\t8b 44 85 d0          \tmov    -0x30(%rbp,%rax,4),%eax\n    49dc:\t8d 50 01             \tlea    0x1(%rax),%edx\n    49df:\t8b 85 a4 fe ff ff    \tmov    -0x15c(%rbp),%eax\n    49e5:\t89 54 85 d0          \tmov    %edx,-0x30(%rbp,%rax,4)\n    49e9:\t48 8d 8d 50 ff ff ff \tlea    -0xb0(%rbp),%rcx\n    49f0:\t8b 95 9c fe ff ff    \tmov    -0x164(%rbp),%edx\n    49f6:\t48 8b b5 e0 fe ff ff \tmov    -0x120(%rbp),%rsi\n    49fd:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    4a04:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    4a0a:\t49 89 c8             \tmov    %rcx,%r8\n    4a0d:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    4a12:\t48 89 c7             \tmov    %rax,%rdi\n    4a15:\te8 00 00 00 00       \tcallq  4a1a <test__PERF_RECORD+0x531>\n    4a1a:\t89 85 84 fe ff ff    \tmov    %eax,-0x17c(%rbp)\n    4a20:\t83 bd 84 fe ff ff 00 \tcmpl   $0x0,-0x17c(%rbp)\n    4a27:\t79 3c                \tjns    4a65 <test__PERF_RECORD+0x57c>\n    4a29:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4a2f <test__PERF_RECORD+0x546>\n    4a2f:\t85 c0                \ttest   %eax,%eax\n    4a31:\t74 19                \tje     4a4c <test__PERF_RECORD+0x563>\n    4a33:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 4a3a <test__PERF_RECORD+0x551>\n    4a3a:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    4a41:\t48 89 d6             \tmov    %rdx,%rsi\n    4a44:\t48 89 c7             \tmov    %rax,%rdi\n    4a47:\te8 00 00 00 00       \tcallq  4a4c <test__PERF_RECORD+0x563>\n    4a4c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4a51:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4a56:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4a5b:\te8 00 00 00 00       \tcallq  4a60 <test__PERF_RECORD+0x577>\n    4a60:\te9 8c 05 00 00       \tjmpq   4ff1 <test__PERF_RECORD+0xb08>\n    4a65:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4a6b <test__PERF_RECORD+0x582>\n    4a6b:\t85 c0                \ttest   %eax,%eax\n    4a6d:\t74 3c                \tje     4aab <test__PERF_RECORD+0x5c2>\n    4a6f:\t8b 55 88             \tmov    -0x78(%rbp),%edx\n    4a72:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    4a79:\t89 d1                \tmov    %edx,%ecx\n    4a7b:\t48 89 c2             \tmov    %rax,%rdx\n    4a7e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4a83:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4a88:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4a8d:\te8 00 00 00 00       \tcallq  4a92 <test__PERF_RECORD+0x5a9>\n    4a92:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 4a99 <test__PERF_RECORD+0x5b0>\n    4a99:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    4aa0:\t48 89 d6             \tmov    %rdx,%rsi\n    4aa3:\t48 89 c7             \tmov    %rax,%rdi\n    4aa6:\te8 00 00 00 00       \tcallq  4aab <test__PERF_RECORD+0x5c2>\n    4aab:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    4ab2:\t48 39 85 b8 fe ff ff \tcmp    %rax,-0x148(%rbp)\n    4ab9:\t76 39                \tjbe    4af4 <test__PERF_RECORD+0x60b>\n    4abb:\t48 8b 8d 60 ff ff ff \tmov    -0xa0(%rbp),%rcx\n    4ac2:\t48 8b 95 b8 fe ff ff \tmov    -0x148(%rbp),%rdx\n    4ac9:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n    4ad0:\t49 89 c8             \tmov    %rcx,%r8\n    4ad3:\t48 89 d1             \tmov    %rdx,%rcx\n    4ad6:\t48 89 c2             \tmov    %rax,%rdx\n    4ad9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4ade:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4ae3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4ae8:\te8 00 00 00 00       \tcallq  4aed <test__PERF_RECORD+0x604>\n    4aed:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4af4:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    4afb:\t48 89 85 b8 fe ff ff \tmov    %rax,-0x148(%rbp)\n    4b02:\t8b 45 88             \tmov    -0x78(%rbp),%eax\n    4b05:\t39 85 98 fe ff ff    \tcmp    %eax,-0x168(%rbp)\n    4b0b:\t74 33                \tje     4b40 <test__PERF_RECORD+0x657>\n    4b0d:\t8b 4d 88             \tmov    -0x78(%rbp),%ecx\n    4b10:\t8b 95 98 fe ff ff    \tmov    -0x168(%rbp),%edx\n    4b16:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n    4b1d:\t41 89 c8             \tmov    %ecx,%r8d\n    4b20:\t89 d1                \tmov    %edx,%ecx\n    4b22:\t48 89 c2             \tmov    %rax,%rdx\n    4b25:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4b2a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4b2f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4b34:\te8 00 00 00 00       \tcallq  4b39 <test__PERF_RECORD+0x650>\n    4b39:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4b40:\t8b 85 58 ff ff ff    \tmov    -0xa8(%rbp),%eax\n    4b46:\t89 c2                \tmov    %eax,%edx\n    4b48:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4b4f:\t8b 80 24 08 00 00    \tmov    0x824(%rax),%eax\n    4b55:\t39 c2                \tcmp    %eax,%edx\n    4b57:\t74 3d                \tje     4b96 <test__PERF_RECORD+0x6ad>\n    4b59:\t8b 8d 58 ff ff ff    \tmov    -0xa8(%rbp),%ecx\n    4b5f:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4b66:\t8b 90 24 08 00 00    \tmov    0x824(%rax),%edx\n    4b6c:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n    4b73:\t41 89 c8             \tmov    %ecx,%r8d\n    4b76:\t89 d1                \tmov    %edx,%ecx\n    4b78:\t48 89 c2             \tmov    %rax,%rdx\n    4b7b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4b80:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4b85:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4b8a:\te8 00 00 00 00       \tcallq  4b8f <test__PERF_RECORD+0x6a6>\n    4b8f:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4b96:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    4b9c:\t89 c2                \tmov    %eax,%edx\n    4b9e:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4ba5:\t8b 80 24 08 00 00    \tmov    0x824(%rax),%eax\n    4bab:\t39 c2                \tcmp    %eax,%edx\n    4bad:\t74 3d                \tje     4bec <test__PERF_RECORD+0x703>\n    4baf:\t8b 8d 5c ff ff ff    \tmov    -0xa4(%rbp),%ecx\n    4bb5:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4bbc:\t8b 90 24 08 00 00    \tmov    0x824(%rax),%edx\n    4bc2:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n    4bc9:\t41 89 c8             \tmov    %ecx,%r8d\n    4bcc:\t89 d1                \tmov    %edx,%ecx\n    4bce:\t48 89 c2             \tmov    %rax,%rdx\n    4bd1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4bd6:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4bdb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4be0:\te8 00 00 00 00       \tcallq  4be5 <test__PERF_RECORD+0x6fc>\n    4be5:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4bec:\t83 bd a4 fe ff ff 03 \tcmpl   $0x3,-0x15c(%rbp)\n    4bf3:\t74 1b                \tje     4c10 <test__PERF_RECORD+0x727>\n    4bf5:\t83 bd a4 fe ff ff 01 \tcmpl   $0x1,-0x15c(%rbp)\n    4bfc:\t74 12                \tje     4c10 <test__PERF_RECORD+0x727>\n    4bfe:\t83 bd a4 fe ff ff 07 \tcmpl   $0x7,-0x15c(%rbp)\n    4c05:\t74 09                \tje     4c10 <test__PERF_RECORD+0x727>\n    4c07:\t83 bd a4 fe ff ff 04 \tcmpl   $0x4,-0x15c(%rbp)\n    4c0e:\t75 42                \tjne    4c52 <test__PERF_RECORD+0x769>\n    4c10:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    4c17:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4c1a:\t89 c2                \tmov    %eax,%edx\n    4c1c:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4c23:\t8b 80 24 08 00 00    \tmov    0x824(%rax),%eax\n    4c29:\t39 c2                \tcmp    %eax,%edx\n    4c2b:\t74 25                \tje     4c52 <test__PERF_RECORD+0x769>\n    4c2d:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n    4c34:\t48 89 c2             \tmov    %rax,%rdx\n    4c37:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4c3c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4c41:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4c46:\te8 00 00 00 00       \tcallq  4c4b <test__PERF_RECORD+0x762>\n    4c4b:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4c52:\t83 bd a4 fe ff ff 03 \tcmpl   $0x3,-0x15c(%rbp)\n    4c59:\t74 09                \tje     4c64 <test__PERF_RECORD+0x77b>\n    4c5b:\t83 bd a4 fe ff ff 01 \tcmpl   $0x1,-0x15c(%rbp)\n    4c62:\t75 3d                \tjne    4ca1 <test__PERF_RECORD+0x7b8>\n    4c64:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    4c6b:\t8b 50 08             \tmov    0x8(%rax),%edx\n    4c6e:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    4c75:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    4c78:\t39 c2                \tcmp    %eax,%edx\n    4c7a:\t74 25                \tje     4ca1 <test__PERF_RECORD+0x7b8>\n    4c7c:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n    4c83:\t48 89 c2             \tmov    %rax,%rdx\n    4c86:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4c8b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4c90:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4c95:\te8 00 00 00 00       \tcallq  4c9a <test__PERF_RECORD+0x7b1>\n    4c9a:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4ca1:\t83 bd a4 fe ff ff 09 \tcmpl   $0x9,-0x15c(%rbp)\n    4ca8:\t0f 84 b7 01 00 00    \tje     4e65 <test__PERF_RECORD+0x97c>\n    4cae:\t83 bd a4 fe ff ff 09 \tcmpl   $0x9,-0x15c(%rbp)\n    4cb5:\t0f 87 87 01 00 00    \tja     4e42 <test__PERF_RECORD+0x959>\n    4cbb:\t83 bd a4 fe ff ff 04 \tcmpl   $0x4,-0x15c(%rbp)\n    4cc2:\t0f 84 19 02 00 00    \tje     4ee1 <test__PERF_RECORD+0x9f8>\n    4cc8:\t83 bd a4 fe ff ff 04 \tcmpl   $0x4,-0x15c(%rbp)\n    4ccf:\t0f 87 6d 01 00 00    \tja     4e42 <test__PERF_RECORD+0x959>\n    4cd5:\t83 bd a4 fe ff ff 01 \tcmpl   $0x1,-0x15c(%rbp)\n    4cdc:\t74 5c                \tje     4d3a <test__PERF_RECORD+0x851>\n    4cde:\t83 bd a4 fe ff ff 03 \tcmpl   $0x3,-0x15c(%rbp)\n    4ce5:\t0f 85 57 01 00 00    \tjne    4e42 <test__PERF_RECORD+0x959>\n    4ceb:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    4cf2:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n    4cf6:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    4cfd:\t48 89 c6             \tmov    %rax,%rsi\n    4d00:\t48 89 d7             \tmov    %rdx,%rdi\n    4d03:\te8 00 00 00 00       \tcallq  4d08 <test__PERF_RECORD+0x81f>\n    4d08:\t85 c0                \ttest   %eax,%eax\n    4d0a:\t0f 84 55 01 00 00    \tje     4e65 <test__PERF_RECORD+0x97c>\n    4d10:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n    4d17:\t48 89 c2             \tmov    %rax,%rdx\n    4d1a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4d1f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4d24:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4d29:\te8 00 00 00 00       \tcallq  4d2e <test__PERF_RECORD+0x845>\n    4d2e:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4d35:\te9 2b 01 00 00       \tjmpq   4e65 <test__PERF_RECORD+0x97c>\n    4d3a:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    4d41:\t48 83 c0 28          \tadd    $0x28,%rax\n    4d45:\tbe 2f 00 00 00       \tmov    $0x2f,%esi\n    4d4a:\t48 89 c7             \tmov    %rax,%rdi\n    4d4d:\te8 00 00 00 00       \tcallq  4d52 <test__PERF_RECORD+0x869>\n    4d52:\t48 89 85 f8 fe ff ff \tmov    %rax,-0x108(%rbp)\n    4d59:\t48 83 bd f8 fe ff ff \tcmpq   $0x0,-0x108(%rbp)\n    4d60:\t00 \n    4d61:\t0f 84 a8 00 00 00    \tje     4e0f <test__PERF_RECORD+0x926>\n    4d67:\t0f b6 85 80 fe ff ff \tmovzbl -0x180(%rbp),%eax\n    4d6e:\t83 f0 01             \txor    $0x1,%eax\n    4d71:\t84 c0                \ttest   %al,%al\n    4d73:\t74 28                \tje     4d9d <test__PERF_RECORD+0x8b4>\n    4d75:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n    4d7c:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    4d80:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    4d87:\t48 89 c6             \tmov    %rax,%rsi\n    4d8a:\t48 89 d7             \tmov    %rdx,%rdi\n    4d8d:\te8 00 00 00 00       \tcallq  4d92 <test__PERF_RECORD+0x8a9>\n    4d92:\t85 c0                \ttest   %eax,%eax\n    4d94:\t0f 94 c0             \tsete   %al\n    4d97:\t88 85 80 fe ff ff    \tmov    %al,-0x180(%rbp)\n    4d9d:\t0f b6 85 81 fe ff ff \tmovzbl -0x17f(%rbp),%eax\n    4da4:\t83 f0 01             \txor    $0x1,%eax\n    4da7:\t84 c0                \ttest   %al,%al\n    4da9:\t74 28                \tje     4dd3 <test__PERF_RECORD+0x8ea>\n    4dab:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n    4db2:\t48 83 c0 01          \tadd    $0x1,%rax\n    4db6:\tba 04 00 00 00       \tmov    $0x4,%edx\n    4dbb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4dc0:\t48 89 c7             \tmov    %rax,%rdi\n    4dc3:\te8 00 00 00 00       \tcallq  4dc8 <test__PERF_RECORD+0x8df>\n    4dc8:\t85 c0                \ttest   %eax,%eax\n    4dca:\t0f 94 c0             \tsete   %al\n    4dcd:\t88 85 81 fe ff ff    \tmov    %al,-0x17f(%rbp)\n    4dd3:\t0f b6 85 83 fe ff ff \tmovzbl -0x17d(%rbp),%eax\n    4dda:\t83 f0 01             \txor    $0x1,%eax\n    4ddd:\t84 c0                \ttest   %al,%al\n    4ddf:\t0f 84 80 00 00 00    \tje     4e65 <test__PERF_RECORD+0x97c>\n    4de5:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n    4dec:\t48 83 c0 01          \tadd    $0x1,%rax\n    4df0:\tba 02 00 00 00       \tmov    $0x2,%edx\n    4df5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4dfa:\t48 89 c7             \tmov    %rax,%rdi\n    4dfd:\te8 00 00 00 00       \tcallq  4e02 <test__PERF_RECORD+0x919>\n    4e02:\t85 c0                \ttest   %eax,%eax\n    4e04:\t0f 94 c0             \tsete   %al\n    4e07:\t88 85 83 fe ff ff    \tmov    %al,-0x17d(%rbp)\n    4e0d:\teb 56                \tjmp    4e65 <test__PERF_RECORD+0x97c>\n    4e0f:\t0f b6 85 82 fe ff ff \tmovzbl -0x17e(%rbp),%eax\n    4e16:\t83 f0 01             \txor    $0x1,%eax\n    4e19:\t84 c0                \ttest   %al,%al\n    4e1b:\t74 48                \tje     4e65 <test__PERF_RECORD+0x97c>\n    4e1d:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    4e24:\t48 83 c0 28          \tadd    $0x28,%rax\n    4e28:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4e2d:\t48 89 c7             \tmov    %rax,%rdi\n    4e30:\te8 00 00 00 00       \tcallq  4e35 <test__PERF_RECORD+0x94c>\n    4e35:\t85 c0                \ttest   %eax,%eax\n    4e37:\t0f 94 c0             \tsete   %al\n    4e3a:\t88 85 82 fe ff ff    \tmov    %al,-0x17e(%rbp)\n    4e40:\teb 23                \tjmp    4e65 <test__PERF_RECORD+0x97c>\n    4e42:\t8b 85 a4 fe ff ff    \tmov    -0x15c(%rbp),%eax\n    4e48:\t89 c2                \tmov    %eax,%edx\n    4e4a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4e4f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4e54:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4e59:\te8 00 00 00 00       \tcallq  4e5e <test__PERF_RECORD+0x975>\n    4e5e:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4e65:\t8b 95 8c fe ff ff    \tmov    -0x174(%rbp),%edx\n    4e6b:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4e72:\t89 d6                \tmov    %edx,%esi\n    4e74:\t48 89 c7             \tmov    %rax,%rdi\n    4e77:\te8 00 00 00 00       \tcallq  4e7c <test__PERF_RECORD+0x993>\n    4e7c:\t48 89 85 e8 fe ff ff \tmov    %rax,-0x118(%rbp)\n    4e83:\t48 83 bd e8 fe ff ff \tcmpq   $0x0,-0x118(%rbp)\n    4e8a:\t00 \n    4e8b:\t0f 85 0e fb ff ff    \tjne    499f <test__PERF_RECORD+0x4b6>\n    4e91:\t83 85 8c fe ff ff 01 \taddl   $0x1,-0x174(%rbp)\n    4e98:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4e9f:\t8b 80 18 08 00 00    \tmov    0x818(%rax),%eax\n    4ea5:\t39 85 8c fe ff ff    \tcmp    %eax,-0x174(%rbp)\n    4eab:\t7c b8                \tjl     4e65 <test__PERF_RECORD+0x97c>\n    4ead:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4eb2:\te8 00 00 00 00       \tcallq  4eb7 <test__PERF_RECORD+0x9ce>\n    4eb7:\t83 85 90 fe ff ff 01 \taddl   $0x1,-0x170(%rbp)\n    4ebe:\t83 bd 90 fe ff ff 05 \tcmpl   $0x5,-0x170(%rbp)\n    4ec5:\t0f 8e b9 fa ff ff    \tjle    4984 <test__PERF_RECORD+0x49b>\n    4ecb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4ed0:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4ed5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4eda:\te8 00 00 00 00       \tcallq  4edf <test__PERF_RECORD+0x9f6>\n    4edf:\teb 01                \tjmp    4ee2 <test__PERF_RECORD+0x9f9>\n    4ee1:\t90                   \tnop\n    4ee2:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    4ee5:\t83 f8 01             \tcmp    $0x1,%eax\n    4ee8:\t7e 1b                \tjle    4f05 <test__PERF_RECORD+0xa1c>\n    4eea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4eef:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4ef4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4ef9:\te8 00 00 00 00       \tcallq  4efe <test__PERF_RECORD+0xa15>\n    4efe:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4f05:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    4f08:\t85 c0                \ttest   %eax,%eax\n    4f0a:\t75 25                \tjne    4f31 <test__PERF_RECORD+0xa48>\n    4f0c:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    4f13:\t48 89 c2             \tmov    %rax,%rdx\n    4f16:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4f1b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4f20:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4f25:\te8 00 00 00 00       \tcallq  4f2a <test__PERF_RECORD+0xa41>\n    4f2a:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4f31:\t0f b6 85 80 fe ff ff \tmovzbl -0x180(%rbp),%eax\n    4f38:\t83 f0 01             \txor    $0x1,%eax\n    4f3b:\t84 c0                \ttest   %al,%al\n    4f3d:\t74 25                \tje     4f64 <test__PERF_RECORD+0xa7b>\n    4f3f:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    4f46:\t48 89 c2             \tmov    %rax,%rdx\n    4f49:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4f4e:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4f53:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4f58:\te8 00 00 00 00       \tcallq  4f5d <test__PERF_RECORD+0xa74>\n    4f5d:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4f64:\t0f b6 85 81 fe ff ff \tmovzbl -0x17f(%rbp),%eax\n    4f6b:\t83 f0 01             \txor    $0x1,%eax\n    4f6e:\t84 c0                \ttest   %al,%al\n    4f70:\t74 20                \tje     4f92 <test__PERF_RECORD+0xaa9>\n    4f72:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4f77:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4f7c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4f81:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4f86:\te8 00 00 00 00       \tcallq  4f8b <test__PERF_RECORD+0xaa2>\n    4f8b:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4f92:\t0f b6 85 83 fe ff ff \tmovzbl -0x17d(%rbp),%eax\n    4f99:\t83 f0 01             \txor    $0x1,%eax\n    4f9c:\t84 c0                \ttest   %al,%al\n    4f9e:\t74 20                \tje     4fc0 <test__PERF_RECORD+0xad7>\n    4fa0:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4fa5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4faa:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4faf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4fb4:\te8 00 00 00 00       \tcallq  4fb9 <test__PERF_RECORD+0xad0>\n    4fb9:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4fc0:\t0f b6 85 82 fe ff ff \tmovzbl -0x17e(%rbp),%eax\n    4fc7:\t83 f0 01             \txor    $0x1,%eax\n    4fca:\t84 c0                \ttest   %al,%al\n    4fcc:\t74 22                \tje     4ff0 <test__PERF_RECORD+0xb07>\n    4fce:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4fd3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4fd8:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4fdd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4fe2:\te8 00 00 00 00       \tcallq  4fe7 <test__PERF_RECORD+0xafe>\n    4fe7:\t83 85 88 fe ff ff 01 \taddl   $0x1,-0x178(%rbp)\n    4fee:\teb 01                \tjmp    4ff1 <test__PERF_RECORD+0xb08>\n    4ff0:\t90                   \tnop\n    4ff1:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    4ff8:\t48 89 c7             \tmov    %rax,%rdi\n    4ffb:\te8 00 00 00 00       \tcallq  5000 <test__PERF_RECORD+0xb17>\n    5000:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    5007:\t48 89 c7             \tmov    %rax,%rdi\n    500a:\te8 00 00 00 00       \tcallq  500f <test__PERF_RECORD+0xb26>\n    500f:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    5016:\t48 89 c7             \tmov    %rax,%rdi\n    5019:\te8 00 00 00 00       \tcallq  501e <test__PERF_RECORD+0xb35>\n    501e:\t83 bd 84 fe ff ff 00 \tcmpl   $0x0,-0x17c(%rbp)\n    5025:\t78 09                \tjs     5030 <test__PERF_RECORD+0xb47>\n    5027:\t83 bd 88 fe ff ff 00 \tcmpl   $0x0,-0x178(%rbp)\n    502e:\t7e 07                \tjle    5037 <test__PERF_RECORD+0xb4e>\n    5030:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    5035:\teb 05                \tjmp    503c <test__PERF_RECORD+0xb53>\n    5037:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    503c:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    5040:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    5047:\t00 00 \n    5049:\t74 05                \tje     5050 <test__PERF_RECORD+0xb67>\n    504b:\te8 00 00 00 00       \tcallq  5050 <test__PERF_RECORD+0xb67>\n    5050:\tc9                   \tleaveq \n    5051:\tc3                   \tretq   ", "code_s": "__int64 test__PERF_RECORD() {\n  __int64 v0;\n  int *v1;\n  char *v2;\n  int *v3;\n  char *v4;\n  int *v5;\n  char *v6;\n  int *v7;\n  char *v8;\n  __int64 result;\n  bool v10;\n  bool v11;\n  bool v12;\n  bool v13;\n  int v14;\n  int v15;\n  unsigned int v16;\n  int v17;\n  int v18;\n  unsigned int v19;\n  unsigned int v20;\n  unsigned int v21;\n  cpu_set_t *cpuset;\n  size_t cpusetsize;\n  unsigned __int64 v24;\n  __int64 v25;\n  char *s2;\n  __int64 v27;\n  __int64 v28;\n  __int64 v29;\n  unsigned int *v30;\n  const char *v31;\n  char *v32;\n  __int64 <span class=\"supfact\">v33</span>;\n  __int64 v34;\n  __int64 v35;\n  __int64 v36;\n  __int64 v37;\n  __int64 v38;\n  __int64 v39;\n  __int64 v40;\n  __int64 v41;\n  __int64 v42;\n  char v43[Number];\n  unsigned int v44;\n  unsigned int v45;\n  unsigned __int64 v46;\n  unsigned int v47;\n  __int64 v48[Number];\n  __int64 v49;\n  __int64 v50;\n  __int64 v51;\n  __int64 v52;\n  __int64 v53;\n  unsigned __int64 v54;\n  v54 = __readfsqword(Number);\n  <span class=\"supfact\">v33</span> = Number L;\n  v34 = Number L;\n  v35 = Number;\n  v36 = Number L;\n  v37 = Number;\n  v38 = Number L;\n  v39 = Number L;\n  v40 = Number L;\n  v41 = Number L;\n  v42 = Number L;\n  cpuset = Number L;\n  cpusetsize = Number L;\n  v25 = perf_evlist__new(Number L, Number L);\n  s2 = String;\n  v48[Number] = (__int64)String;\n  v48[Number] = (__int64)String;\n  v48[Number] = Number L;\n  v24 = Number L;\n  v10 = Number;\n  v11 = Number;\n  v12 = Number;\n  v13 = Number;\n  v14 = Number;\n  v15 = Number;\n  v17 = Number;\n  v18 = Number;\n  v49 = Number L;\n  v50 = Number L;\n  v51 = Number L;\n  v52 = Number L;\n  v53 = Number L;\n  if (v25) {\n    v14 = perf_evlist__add_default(v25);\n    if (v14 < Number) {\n      eprintf(Number L, String);\n    LABEL_82:\n      perf_evlist__delete(v25);\n      goto LABEL_83;\n    }\n    v14 = perf_evlist__create_maps(v25, <span class=\"supfact\">v33</span>, v34, Number, v42);\n    if (v14 < Number) {\n      eprintf(Number L, String);\n      goto LABEL_82;\n    }\n    v14 = perf_evlist__prepare_workload(v25, &<span class=\"supfact\">v33</span>, v48);\n    if (v14 < Number) {\n      eprintf(Number L, String);\n      goto LABEL_82;\n    }\n    v27 = *(_QWORD *)v25;\n    v28 = v27;\n    v0 = *(_QWORD *)(v27 + Number);\n    LOBYTE(v0) = v0 | Number;\n    *(_QWORD *)(v27 + Number) = v0;\n    *(_QWORD *)(v28 + Number) |= Number;\n    *(_QWORD *)(v28 + Number) |= Number;\n    perf_evlist__config_attrs(v25, &<span class=\"supfact\">v33</span>);\n    v14 = sched__get_first_possible_cpu(*(_DWORD *)(v25 + Number), &cpuset,\n                                        &cpusetsize);\n    if (v14 < Number) {\n      v1 = _errno_location();\n      v2 = strerror(*v1);\n      eprintf(Number L, String, v2);\n      goto LABEL_82;\n    }\n    v19 = v14;\n    if (sched_setaffinity(*(_DWORD *)(v25 + Number), cpusetsize, cpuset) <\n        Number) {\n      v3 = _errno_location();\n      v4 = strerror(*v3);\n      eprintf(Number L, String, v4);\n    LABEL_81:\n      _sched_cpufree(cpuset);\n      goto LABEL_82;\n    }\n    v14 = perf_evlist__open(v25, BYTE5(v35));\n    if (v14 < Number) {\n      v5 = _errno_location();\n      v6 = strerror(*v5);\n      eprintf(Number L, String, v6);\n      goto LABEL_82;\n    }\n    v14 = perf_evlist__mmap(v25, (unsigned int)v38, Number L);\n    if (v14 < Number) {\n      v7 = _errno_location();\n      v8 = strerror(*v7);\n      eprintf(Number L, String, v8);\n      goto LABEL_82;\n    }\n    v29 = perf_evlist__sample_type(v25);\n    v20 = _perf_evsel__sample_size(v29);\n    perf_evlist__enable(v25);\n    perf_evlist__start_workload(v25);\n    while (Number) {\n      v16 = Number;\n    LABEL_65:\n      if ((signed int)v16 < *(_DWORD *)(v25 + Number))\n        break;\n      sleep(Number);\n      if (++v17 > Number) {\n        eprintf(Number L, String);\n      LABEL_68:\n        if (SHIDWORD(v50) > Number) {\n          eprintf(Number L, String);\n          ++v15;\n        }\n        if (!HIDWORD(v50)) {\n          eprintf(Number L, String, s2);\n          ++v15;\n        }\n        if (!v10) {\n          eprintf(Number L, String, s2);\n          ++v15;\n        }\n        if (!v11) {\n          eprintf(Number L, String, String);\n          ++v15;\n        }\n        if (!v13) {\n          eprintf(Number L, String, String);\n          ++v15;\n        }\n        if (!v12) {\n          eprintf(Number L, String, String);\n          ++v15;\n        }\n      LABEL_80:\n        perf_evlist__munmap(v25);\n        goto LABEL_81;\n      }\n    }\n    while (Number) {\n      while (Number) {\n        do {\n          v30 = (unsigned int *)perf_evlist__mmap_read(v25, v16);\n          if (!v30) {\n            ++v16;\n            goto LABEL_65;\n          }\n          v21 = *v30;\n          v31 = (const char *)perf_event__name(*v30);\n          ++v18;\n          if (v21 <= Number)\n            ++*((_DWORD *)&v49 + v21);\n          v14 =\n              perf_event__parse_sample(v30, v29, v20, Number L, v43, Number L);\n          if (v14 < Number) {\n            if (verbose)\n              perf_event__fprintf(v30, stderr);\n            eprintf(Number L, String);\n            goto LABEL_80;\n          }\n          if (verbose) {\n            eprintf(Number L, String, v46, v47);\n            perf_event__fprintf(v30, stderr);\n          }\n          if (v24 > v46) {\n            eprintf(Number L, String, v31, v24, v46);\n            ++v15;\n          }\n          v24 = v46;\n          if (v19 != v47) {\n            eprintf(Number L, String, v31, v19, v47);\n            ++v15;\n          }\n          if (v44 != *(_DWORD *)(v25 + Number)) {\n            eprintf(Number L, String, v31, *(unsigned int *)(v25 + Number),\n                    v44);\n            ++v15;\n          }\n          if (v45 != *(_DWORD *)(v25 + Number)) {\n            eprintf(Number L, String, v31, *(unsigned int *)(v25 + Number),\n                    v45);\n            ++v15;\n          }\n          if ((v21 == Number || v21 == Number || v21 == Number ||\n               v21 == Number) &&\n              v30[Number] != *(_DWORD *)(v25 + Number)) {\n            eprintf(Number L, String, v31);\n            ++v15;\n          }\n          if ((v21 == Number || v21 == Number) && v30[Number] != v30[Number]) {\n            eprintf(Number L, String, v31);\n            ++v15;\n          }\n        } while (v21 == Number);\n        if (v21 <= Number) {\n          if (v21 == Number)\n            goto LABEL_68;\n          if (v21 <= Number)\n            break;\n        }\n      LABEL_62:\n        eprintf(Number L, String, v21);\n        ++v15;\n      }\n      if (v21 == Number) {\n        v32 = strrchr((const char *)v30 + Number, Number);\n        if (v32) {\n          if (!v10)\n            v10 = strcmp(v32 + Number, s2) == Number;\n          if (!v11)\n            v11 = strncmp(v32 + Number, String, Number) == Number;\n          if (!v13)\n            v13 = strncmp(v32 + Number, String, Number) == Number;\n        } else if (!v12) {\n          v12 = strcmp((const char *)v30 + Number, String) == Number;\n        }\n      } else {\n        if (v21 != Number)\n          goto LABEL_62;\n        if (strcmp((const char *)v30 + Number, s2)) {\n          eprintf(Number L, String, v31);\n          ++v15;\n        }\n      }\n    }\n  }\n  eprintf(Number L, String);\nLABEL_83:\n  if (v14 >= Number && v15 <= Number)\n    result = Number L;\n  else\n    result = Number;\n  return result;\n}", "code_t": "int __cdecl test__PERF_RECORD() {\n  list_head *v0;\n  int *v1;\n  char *v2;\n  int *v3;\n  char *v4;\n  int *v5;\n  char *v6;\n  int *v7;\n  char *v8;\n  int result;\n  bool found_cmd_mmap;\n  bool found_libc_mmap;\n  bool found_vdso_mmap;\n  bool found_ld_mmap;\n  int err;\n  int errs;\n  int i;\n  int wakeups;\n  int total_events;\n  u32 cpu;\n  unsigned int sample_size;\n  __u32 type;\n  cpu_set_t *cpu_mask;\n  size_t cpu_mask_size;\n  u64 prev_time;\n  perf_evlist *evlist;\n  const char *cmd;\n  const list_head *__mptr;\n  perf_evsel *evsel;\n  u64 sample_type;\n  perf_event *event;\n  const char *name;\n  char *bname;\n  perf_record_opts <span class=\"supfact\">opts</span>;\n  perf_sample <span class=\"supfact\">sample</span>;\n  const char *argv[Number];\n  int nr_events[Number];\n  unsigned __int64 v37;\n  v37 = __readfsqword(Number);\n  <span class=\"supfact\">opts</span>.target_pid = Number L;\n  <span class=\"supfact\">opts</span>.target_tid = Number L;\n  *(_QWORD *)&<span class=\"supfact\">opts</span>.uid = Number;\n  *(_QWORD *)&<span class=\"supfact\">opts</span>.no_inherit = Number L;\n  *(_QWORD *)&<span class=\"supfact\">opts</span>.system_wide = Number;\n  *(_QWORD *)&<span class=\"supfact\">opts</span>.mmap_pages = Number L;\n  *(_QWORD *)&<span class=\"supfact\">opts</span>.branch_stack = Number L;\n  <span class=\"supfact\">opts</span>.default_interval = Number L;\n  <span class=\"supfact\">opts</span>.user_interval = Number L;\n  <span class=\"supfact\">opts</span>.cpu_list = Number L;\n  cpu_mask = Number L;\n  cpu_mask_size = Number L;\n  evlist = (perf_evlist *)perf_evlist__new(Number L, Number L);\n  cmd = String;\n  argv[Number] = String;\n  argv[Number] = String;\n  argv[Number] = Number L;\n  prev_time = Number L;\n  found_cmd_mmap = Number;\n  found_libc_mmap = Number;\n  found_vdso_mmap = Number;\n  found_ld_mmap = Number;\n  err = Number;\n  errs = Number;\n  wakeups = Number;\n  total_events = Number;\n  *(_QWORD *)nr_events = Number L;\n  *(_QWORD *)&nr_events[Number] = Number L;\n  *(_QWORD *)&nr_events[Number] = Number L;\n  *(_QWORD *)&nr_events[Number] = Number L;\n  *(_QWORD *)&nr_events[Number] = Number L;\n  if (evlist) {\n    err = perf_evlist__add_default(evlist);\n    if (err < Number) {\n      eprintf(Number L, String);\n    out_delete_evlist:\n      perf_evlist__delete(evlist);\n      goto out;\n    }\n    err = perf_evlist__create_maps(evlist, <span class=\"supfact\">opts</span>.target_pid,\n                                   <span class=\"supfact\">opts</span>.target_tid, Number,\n                                   <span class=\"supfact\">opts</span>.cpu_list);\n    if (err < Number) {\n      eprintf(Number L, String);\n      goto out_delete_evlist;\n    }\n    err = perf_evlist__prepare_workload(evlist, &<span class=\"supfact\">opts</span>, argv);\n    if (err < Number) {\n      eprintf(Number L, String);\n      goto out_delete_evlist;\n    }\n    __mptr = evlist->entries.next;\n    evsel = (perf_evsel *)__mptr;\n    v0 = __mptr[Number].prev;\n    LOBYTE(v0) = (unsigned __int8)v0 | Number;\n    __mptr[Number].prev = v0;\n    evsel->attr.sample_type |= Number;\n    evsel->attr.sample_type |= Number;\n    perf_evlist__config_attrs(evlist, &<span class=\"supfact\">opts</span>);\n    err = sched__get_first_possible_cpu(evlist->workload.pid, &cpu_mask,\n                                        &cpu_mask_size);\n    if (err < Number) {\n      v1 = _errno_location();\n      v2 = strerror(*v1);\n      eprintf(Number L, String, v2);\n      goto out_delete_evlist;\n    }\n    cpu = err;\n    if (sched_setaffinity(evlist->workload.pid, cpu_mask_size, cpu_mask) <\n        Number) {\n      v3 = _errno_location();\n      v4 = strerror(*v3);\n      eprintf(Number L, String, v4);\n    out_free_cpu_mask:\n      _sched_cpufree(cpu_mask);\n      goto out_delete_evlist;\n    }\n    err = perf_evlist__open(evlist, <span class=\"supfact\">opts</span>.group);\n    if (err < Number) {\n      v5 = _errno_location();\n      v6 = strerror(*v5);\n      eprintf(Number L, String, v6);\n      goto out_delete_evlist;\n    }\n    err = perf_evlist__mmap(evlist, <span class=\"supfact\">opts</span>.mmap_pages, Number L);\n    if (err < Number) {\n      v7 = _errno_location();\n      v8 = strerror(*v7);\n      eprintf(Number L, String, v8);\n      goto out_delete_evlist;\n    }\n    sample_type = perf_evlist__sample_type(evlist);\n    sample_size = _perf_evsel__sample_size(sample_type);\n    perf_evlist__enable(evlist);\n    perf_evlist__start_workload(evlist);\n    while (Number) {\n      i = Number;\n    LABEL_65:\n      if (i < evlist->nr_mmaps)\n        break;\n      sleep(Number);\n      if (++wakeups > Number) {\n        eprintf(Number L, String);\n      found_exit:\n        if (nr_events[Number] > Number) {\n          eprintf(Number L, String);\n          ++errs;\n        }\n        if (!nr_events[Number]) {\n          eprintf(Number L, String, cmd);\n          ++errs;\n        }\n        if (!found_cmd_mmap) {\n          eprintf(Number L, String, cmd);\n          ++errs;\n        }\n        if (!found_libc_mmap) {\n          eprintf(Number L, String, String);\n          ++errs;\n        }\n        if (!found_ld_mmap) {\n          eprintf(Number L, String, String);\n          ++errs;\n        }\n        if (!found_vdso_mmap) {\n          eprintf(Number L, String, String);\n          ++errs;\n        }\n      out_err:\n        perf_evlist__munmap(evlist);\n        goto out_free_cpu_mask;\n      }\n    }\n    while (Number) {\n      while (Number) {\n        do {\n          event = (perf_event *)perf_evlist__mmap_read(evlist, (unsigned int)i);\n          if (!event) {\n            ++i;\n            goto LABEL_65;\n          }\n          type = event->header.type;\n          name = (const char *)perf_event__name(event->header.type);\n          ++total_events;\n          if (type <= Number)\n            ++nr_events[type];\n          err = perf_event__parse_sample(event, sample_type, sample_size,\n                                         Number L, &<span class=\"supfact\">sample</span>,\n                                         Number L);\n          if (err < Number) {\n            if (verbose)\n              perf_event__fprintf(event, stderr);\n            eprintf(Number L, String);\n            goto out_err;\n          }\n          if (verbose) {\n            eprintf(Number L, String, <span class=\"supfact\">sample</span>.time,\n                    <span class=\"supfact\">sample</span>.cpu);\n            perf_event__fprintf(event, stderr);\n          }\n          if (prev_time > <span class=\"supfact\">sample</span>.time) {\n            eprintf(Number L, String, name, prev_time,\n                    <span class=\"supfact\">sample</span>.time);\n            ++errs;\n          }\n          prev_time = <span class=\"supfact\">sample</span>.time;\n          if (cpu != <span class=\"supfact\">sample</span>.cpu) {\n            eprintf(Number L, String, name, cpu, <span class=\"supfact\">sample</span>.cpu);\n            ++errs;\n          }\n          if (<span class=\"supfact\">sample</span>.pid != evlist->workload.pid) {\n            eprintf(Number L, String, name, (unsigned int)evlist->workload.pid,\n                    <span class=\"supfact\">sample</span>.pid);\n            ++errs;\n          }\n          if (<span class=\"supfact\">sample</span>.tid != evlist->workload.pid) {\n            eprintf(Number L, String, name, (unsigned int)evlist->workload.pid,\n                    <span class=\"supfact\">sample</span>.tid);\n            ++errs;\n          }\n          if ((type == Number || type == Number || type == Number ||\n               type == Number) &&\n              event->mmap.pid != evlist->workload.pid) {\n            eprintf(Number L, String, name);\n            ++errs;\n          }\n          if ((type == Number || type == Number) &&\n              event->mmap.pid != event->mmap.tid) {\n            eprintf(Number L, String, name);\n            ++errs;\n          }\n        } while (type == Number);\n        if (type <= Number) {\n          if (type == Number)\n            goto found_exit;\n          if (type <= Number)\n            break;\n        }\n      LABEL_62:\n        eprintf(Number L, String, type);\n        ++errs;\n      }\n      if (type == Number) {\n        bname = strrchr(event->mmap.filename, Number);\n        if (bname) {\n          if (!found_cmd_mmap)\n            found_cmd_mmap = strcmp(bname + Number, cmd) == Number;\n          if (!found_libc_mmap)\n            found_libc_mmap = strncmp(bname + Number, String, Number) == Number;\n          if (!found_ld_mmap)\n            found_ld_mmap = strncmp(bname + Number, String, Number) == Number;\n        } else if (!found_vdso_mmap) {\n          found_vdso_mmap = strcmp(event->mmap.filename, String) == Number;\n        }\n      } else {\n        if (type != Number)\n          goto LABEL_62;\n        if (strcmp(event->comm.comm, cmd)) {\n          eprintf(Number L, String, name);\n          ++errs;\n        }\n      }\n    }\n  }\n  eprintf(Number L, String);\nout:\n  if (err >= Number && errs <= Number)\n    result = Number;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v33", "type": "struct perf_record_opts { const char * target_pid; const char * target_tid; uid_t uid; bool call_graph; bool group; bool inherit_stat; bool no_delay; bool no_inherit; bool no_samples; bool pipe_output; bool raw_samples; bool sample_address; bool sample_time; bool sample_id_all_missing; bool exclude_guest_missing; bool system_wide; bool period; PADDING (2); unsigned int freq; unsigned int mmap_pages; unsigned int user_freq; int branch_stack; PADDING (4); u64 default_interval; u64 user_interval; const char * cpu_list; }", "pred_name": "opts", "ref_name": "opts", "ref_type": "struct perf_record_opts { const char * target_pid; const char * target_tid; uid_t uid; bool call_graph; bool group; bool inherit_stat; bool no_delay; bool no_inherit; bool no_samples; bool pipe_output; bool raw_samples; bool sample_address; bool sample_time; bool sample_id_all_missing; bool exclude_guest_missing; bool system_wide; bool period; PADDING (2); unsigned int freq; unsigned int mmap_pages; unsigned int user_freq; int branch_stack; PADDING (4); u64 default_interval; u64 user_interval; const char * cpu_list; }"}], "body_in_train": true}, {"repo_owner": "zenfone5", "repo_name": "android_kernel_asus_T00F", "path": "zenfone5/android_kernel_asus_T00F/5a03bbd96cb4b1acc38489792c8acd53593335670c7f176bbbd9dab968bb0199", "path_in_repo": "zenfone5/android_kernel_asus_T00F/T00F/tools/perf/util/probe-event.o", "objdump": "0000000000004797 <get_probe_trace_event_names>:\n    4797:\t55                   \tpush   %rbp\n    4798:\t48 89 e5             \tmov    %rsp,%rbp\n    479b:\t48 81 ec 00 01 00 00 \tsub    $0x100,%rsp\n    47a2:\t89 bd 0c ff ff ff    \tmov    %edi,-0xf4(%rbp)\n    47a8:\t89 f0                \tmov    %esi,%eax\n    47aa:\t88 85 08 ff ff ff    \tmov    %al,-0xf8(%rbp)\n    47b0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    47b7:\t00 00 \n    47b9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    47bd:\t31 c0                \txor    %eax,%eax\n    47bf:\tc7 85 14 ff ff ff 00 \tmovl   $0x0,-0xec(%rbp)\n    47c6:\t00 00 00 \n    47c9:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n    47d0:\tba 40 00 00 00       \tmov    $0x40,%edx\n    47d5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    47da:\t48 89 c7             \tmov    %rax,%rdi\n    47dd:\te8 00 00 00 00       \tcallq  47e2 <get_probe_trace_event_names+0x4b>\n    47e2:\t8b 85 0c ff ff ff    \tmov    -0xf4(%rbp),%eax\n    47e8:\t89 c7                \tmov    %eax,%edi\n    47ea:\te8 61 fa ff ff       \tcallq  4250 <get_probe_trace_command_rawlist>\n    47ef:\t48 89 85 20 ff ff ff \tmov    %rax,-0xe0(%rbp)\n    47f6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    47fb:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4800:\te8 00 00 00 00       \tcallq  4805 <get_probe_trace_event_names+0x6e>\n    4805:\t48 89 85 28 ff ff ff \tmov    %rax,-0xd8(%rbp)\n    480c:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    4813:\t48 89 c7             \tmov    %rax,%rdi\n    4816:\te8 d2 b8 ff ff       \tcallq  ed <strlist__first>\n    481b:\t48 89 85 18 ff ff ff \tmov    %rax,-0xe8(%rbp)\n    4822:\te9 e8 00 00 00       \tjmpq   490f <get_probe_trace_event_names+0x178>\n    4827:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    482e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    4832:\t48 8d 95 30 ff ff ff \tlea    -0xd0(%rbp),%rdx\n    4839:\t48 89 d6             \tmov    %rdx,%rsi\n    483c:\t48 89 c7             \tmov    %rax,%rdi\n    483f:\te8 5c e1 ff ff       \tcallq  29a0 <parse_probe_trace_command>\n    4844:\t89 85 14 ff ff ff    \tmov    %eax,-0xec(%rbp)\n    484a:\t83 bd 14 ff ff ff 00 \tcmpl   $0x0,-0xec(%rbp)\n    4851:\t0f 88 c8 00 00 00    \tjs     491f <get_probe_trace_event_names+0x188>\n    4857:\t80 bd 08 ff ff ff 00 \tcmpb   $0x0,-0xf8(%rbp)\n    485e:\t74 62                \tje     48c2 <get_probe_trace_event_names+0x12b>\n    4860:\t48 8b 8d 30 ff ff ff \tmov    -0xd0(%rbp),%rcx\n    4867:\t48 8b 95 38 ff ff ff \tmov    -0xc8(%rbp),%rdx\n    486e:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    4875:\t49 89 c8             \tmov    %rcx,%r8\n    4878:\t48 89 d1             \tmov    %rdx,%rcx\n    487b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4880:\tbe 80 00 00 00       \tmov    $0x80,%esi\n    4885:\t48 89 c7             \tmov    %rax,%rdi\n    4888:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    488d:\te8 dd b9 ff ff       \tcallq  26f <e_snprintf>\n    4892:\t89 85 14 ff ff ff    \tmov    %eax,-0xec(%rbp)\n    4898:\t83 bd 14 ff ff ff 00 \tcmpl   $0x0,-0xec(%rbp)\n    489f:\t78 40                \tjs     48e1 <get_probe_trace_event_names+0x14a>\n    48a1:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n    48a8:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    48af:\t48 89 d6             \tmov    %rdx,%rsi\n    48b2:\t48 89 c7             \tmov    %rax,%rdi\n    48b5:\te8 00 00 00 00       \tcallq  48ba <get_probe_trace_event_names+0x123>\n    48ba:\t89 85 14 ff ff ff    \tmov    %eax,-0xec(%rbp)\n    48c0:\teb 1f                \tjmp    48e1 <get_probe_trace_event_names+0x14a>\n    48c2:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n    48c9:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    48d0:\t48 89 d6             \tmov    %rdx,%rsi\n    48d3:\t48 89 c7             \tmov    %rax,%rdi\n    48d6:\te8 00 00 00 00       \tcallq  48db <get_probe_trace_event_names+0x144>\n    48db:\t89 85 14 ff ff ff    \tmov    %eax,-0xec(%rbp)\n    48e1:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n    48e8:\t48 89 c7             \tmov    %rax,%rdi\n    48eb:\te8 b7 f4 ff ff       \tcallq  3da7 <clear_probe_trace_event>\n    48f0:\t83 bd 14 ff ff ff 00 \tcmpl   $0x0,-0xec(%rbp)\n    48f7:\t78 29                \tjs     4922 <get_probe_trace_event_names+0x18b>\n    48f9:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    4900:\t48 89 c7             \tmov    %rax,%rdi\n    4903:\te8 40 b8 ff ff       \tcallq  148 <strlist__next>\n    4908:\t48 89 85 18 ff ff ff \tmov    %rax,-0xe8(%rbp)\n    490f:\t48 83 bd 18 ff ff ff \tcmpq   $0x0,-0xe8(%rbp)\n    4916:\t00 \n    4917:\t0f 85 0a ff ff ff    \tjne    4827 <get_probe_trace_event_names+0x90>\n    491d:\teb 04                \tjmp    4923 <get_probe_trace_event_names+0x18c>\n    491f:\t90                   \tnop\n    4920:\teb 01                \tjmp    4923 <get_probe_trace_event_names+0x18c>\n    4922:\t90                   \tnop\n    4923:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    492a:\t48 89 c7             \tmov    %rax,%rdi\n    492d:\te8 00 00 00 00       \tcallq  4932 <get_probe_trace_event_names+0x19b>\n    4932:\t83 bd 14 ff ff ff 00 \tcmpl   $0x0,-0xec(%rbp)\n    4939:\t79 16                \tjns    4951 <get_probe_trace_event_names+0x1ba>\n    493b:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    4942:\t48 89 c7             \tmov    %rax,%rdi\n    4945:\te8 00 00 00 00       \tcallq  494a <get_probe_trace_event_names+0x1b3>\n    494a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    494f:\teb 07                \tjmp    4958 <get_probe_trace_event_names+0x1c1>\n    4951:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    4958:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    495c:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    4963:\t00 00 \n    4965:\t74 05                \tje     496c <get_probe_trace_event_names+0x1d5>\n    4967:\te8 00 00 00 00       \tcallq  496c <get_probe_trace_event_names+0x1d5>\n    496c:\tc9                   \tleaveq \n    496d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_probe_trace_event_names(int a1, char a2) {\n  __int64 v2;\n  int v4;\n  __int64 i;\n  __int64 v6;\n  __int64 v7;\n  __int64 <span class=\"supfact\">s</span>[Number];\n  char v9[Number];\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  v4 = Number;\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  v6 = get_probe_trace_command_rawlist(a1);\n  v7 = strlist__new(Number L, Number L);\n  for (i = strlist__first(v6); i; i = strlist__next(i)) {\n    v4 = parse_probe_trace_command(*(const char **)(i + Number),\n                                   (__int64)<span class=\"supfact\">s</span>);\n    if (v4 < Number)\n      break;\n    if (a2) {\n      v4 = e_snprintf(v9, Number, String, <span class=\"supfact\">s</span>[Number],\n                      <span class=\"supfact\">s</span>[Number], v2);\n      if (v4 >= Number)\n        v4 = strlist__add(v7, v9);\n    } else {\n      v4 = strlist__add(v7, <span class=\"supfact\">s</span>[Number]);\n    }\n    clear_probe_trace_event((__int64)<span class=\"supfact\">s</span>);\n    if (v4 < Number)\n      break;\n  }\n  strlist__delete(v6);\n  if (v4 >= Number)\n    return v7;\n  strlist__delete(v7);\n  return Number L;\n}", "code_t": "strlist *__cdecl get_probe_trace_event_names(int fd, bool include_group) {\n  int ret;\n  str_node *ent;\n  strlist *rawlist;\n  strlist *sl;\n  probe_trace_event <span class=\"supfact\">tev</span>;\n  char buf[Number];\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  ret = Number;\n  memset(&<span class=\"supfact\">tev</span>, Number, sizeof(<span class=\"supfact\">tev</span>));\n  rawlist = get_probe_trace_command_rawlist(fd);\n  sl = (strlist *)strlist__new(Number L, Number L);\n  for (ent = strlist__first(rawlist); ent; ent = strlist__next(ent)) {\n    ret = parse_probe_trace_command(ent->s, &<span class=\"supfact\">tev</span>);\n    if (ret < Number)\n      break;\n    if (include_group) {\n      ret = e_snprintf(buf, Number, String, <span class=\"supfact\">tev</span>.group,\n                       <span class=\"supfact\">tev</span>.event);\n      if (ret >= Number)\n        ret = strlist__add(sl, buf);\n    } else {\n      ret = strlist__add(sl, <span class=\"supfact\">tev</span>.event);\n    }\n    clear_probe_trace_event(&<span class=\"supfact\">tev</span>);\n    if (ret < Number)\n      break;\n  }\n  strlist__delete(rawlist);\n  if (ret >= Number)\n    return sl;\n  strlist__delete(sl);\n  return Number L;\n}", "var": [{"name": "s", "type": "struct probe_trace_event { char * event; char * group; probe_trace_point point; int nargs; PADDING (4); probe_trace_arg * args; }", "pred_name": "tev", "ref_name": "tev", "ref_type": "struct probe_trace_event { char * event; char * group; probe_trace_point point; int nargs; bool uprobes; PADDING (3); probe_trace_arg * args; }"}], "body_in_train": true}, {"repo_owner": "pombreda", "repo_name": "servetome", "path": "pombreda/servetome/4274de31cf9bd44d19ebc0cf5527bd2ed506ae65c9be25973f631fe5479e2b30", "path_in_repo": "pombreda/servetome/ffmpeg-stm/libavcodec/sipr.o", "objdump": "000000000000115a <decode_frame>:\n    115a:\t48 81 ec a8 03 00 00 \tsub    $0x3a8,%rsp\n    1161:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    1166:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    116b:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    1170:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1175:\t8b 80 28 22 00 00    \tmov    0x2228(%rax),%eax\n    117b:\t89 c2                \tmov    %eax,%edx\n    117d:\t48 89 d0             \tmov    %rdx,%rax\n    1180:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1184:\t48 01 d0             \tadd    %rdx,%rax\n    1187:\t48 c1 e0 03          \tshl    $0x3,%rax\n    118b:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    1191:\t0f b6 00             \tmovzbl (%rax),%eax\n    1194:\t0f b6 c0             \tmovzbl %al,%eax\n    1197:\t89 84 24 88 03 00 00 \tmov    %eax,0x388(%rsp)\n    119e:\t8b 94 24 88 03 00 00 \tmov    0x388(%rsp),%edx\n    11a5:\t89 d0                \tmov    %edx,%eax\n    11a7:\t01 c0                \tadd    %eax,%eax\n    11a9:\t01 d0                \tadd    %edx,%eax\n    11ab:\tc1 e0 04             \tshl    $0x4,%eax\n    11ae:\t89 84 24 84 03 00 00 \tmov    %eax,0x384(%rsp)\n    11b5:\t48 8d 84 24 90 01 00 \tlea    0x190(%rsp),%rax\n    11bc:\t00 \n    11bd:\t48 83 c0 28          \tadd    $0x28,%rax\n    11c1:\t48 89 84 24 78 03 00 \tmov    %rax,0x378(%rsp)\n    11c8:\t00 \n    11c9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    11ce:\t48 05 80 29 00 00    \tadd    $0x2980,%rax\n    11d4:\t48 83 c0 40          \tadd    $0x40,%rax\n    11d8:\t48 89 84 24 70 03 00 \tmov    %rax,0x370(%rsp)\n    11df:\t00 \n    11e0:\tc7 84 24 8c 03 00 00 \tmovl   $0x0,0x38c(%rsp)\n    11e7:\t00 00 00 00 \n    11eb:\t48 8d 84 24 90 01 00 \tlea    0x190(%rsp),%rax\n    11f2:\t00 \n    11f3:\tba 28 00 00 00       \tmov    $0x28,%edx\n    11f8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11fd:\t48 89 c7             \tmov    %rax,%rdi\n    1200:\te8 00 00 00 00       \tcallq  1205 <decode_frame+0xab>\n    1205:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    120a:\t48 8d 88 30 22 00 00 \tlea    0x2230(%rax),%rcx\n    1211:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    1216:\t48 8d 84 24 60 01 00 \tlea    0x160(%rsp),%rax\n    121d:\t00 \n    121e:\t48 89 ce             \tmov    %rcx,%rsi\n    1221:\t48 89 c7             \tmov    %rax,%rdi\n    1224:\te8 b4 ef ff ff       \tcallq  1dd <lsf_decode_fp>\n    1229:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    122e:\t48 8d b0 80 2d 00 00 \tlea    0x2d80(%rax),%rsi\n    1235:\t8b 8c 24 88 03 00 00 \tmov    0x388(%rsp),%ecx\n    123c:\t48 8d 94 24 80 02 00 \tlea    0x280(%rsp),%rdx\n    1243:\t00 \n    1244:\t48 8d 84 24 60 01 00 \tlea    0x160(%rsp),%rax\n    124b:\t00 \n    124c:\t48 89 c7             \tmov    %rax,%rdi\n    124f:\te8 e6 f5 ff ff       \tcallq  83a <sipr_decode_lp>\n    1254:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1259:\t48 8d 88 80 2d 00 00 \tlea    0x2d80(%rax),%rcx\n    1260:\t48 8d 84 24 60 01 00 \tlea    0x160(%rsp),%rax\n    1267:\t00 \n    1268:\tba 28 00 00 00       \tmov    $0x28,%edx\n    126d:\t48 89 c6             \tmov    %rax,%rsi\n    1270:\t48 89 cf             \tmov    %rcx,%rdi\n    1273:\te8 00 00 00 00       \tcallq  1278 <decode_frame+0x11e>\n    1278:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    127d:\t48 05 70 22 00 00    \tadd    $0x2270,%rax\n    1283:\t48 05 68 02 00 00    \tadd    $0x268,%rax\n    1289:\t48 89 84 24 90 03 00 \tmov    %rax,0x390(%rsp)\n    1290:\t00 \n    1291:\tc7 84 24 9c 03 00 00 \tmovl   $0x0,0x39c(%rsp)\n    1298:\t00 00 00 00 \n    129c:\te9 80 05 00 00       \tjmpq   1821 <decode_frame+0x6c7>\n    12a1:\t8b 94 24 9c 03 00 00 \tmov    0x39c(%rsp),%edx\n    12a8:\t89 d0                \tmov    %edx,%eax\n    12aa:\tc1 e0 02             \tshl    $0x2,%eax\n    12ad:\t01 d0                \tadd    %edx,%eax\n    12af:\t01 c0                \tadd    %eax,%eax\n    12b1:\t48 98                \tcltq   \n    12b3:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    12ba:\t00 \n    12bb:\t48 8d 84 24 80 02 00 \tlea    0x280(%rsp),%rax\n    12c2:\t00 \n    12c3:\t48 01 d0             \tadd    %rdx,%rax\n    12c6:\t48 89 84 24 60 03 00 \tmov    %rax,0x360(%rsp)\n    12cd:\t00 \n    12ce:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    12d3:\t8b 80 28 22 00 00    \tmov    0x2228(%rax),%eax\n    12d9:\t83 f8 03             \tcmp    $0x3,%eax\n    12dc:\t0f 94 c0             \tsete   %al\n    12df:\t44 0f b6 c0          \tmovzbl %al,%r8d\n    12e3:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    12e8:\t8b 94 24 9c 03 00 00 \tmov    0x39c(%rsp),%edx\n    12ef:\t48 63 d2             \tmovslq %edx,%rdx\n    12f2:\t48 83 c2 04          \tadd    $0x4,%rdx\n    12f6:\t8b 54 90 08          \tmov    0x8(%rax,%rdx,4),%edx\n    12fa:\t8b bc 24 9c 03 00 00 \tmov    0x39c(%rsp),%edi\n    1301:\t8b 8c 24 8c 03 00 00 \tmov    0x38c(%rsp),%ecx\n    1308:\t48 8d b4 24 e8 00 00 \tlea    0xe8(%rsp),%rsi\n    130f:\t00 \n    1310:\t48 8d 84 24 ec 00 00 \tlea    0xec(%rsp),%rax\n    1317:\t00 \n    1318:\t48 83 ec 08          \tsub    $0x8,%rsp\n    131c:\t6a 06                \tpushq  $0x6\n    131e:\t45 89 c1             \tmov    %r8d,%r9d\n    1321:\t41 89 f8             \tmov    %edi,%r8d\n    1324:\t48 89 c7             \tmov    %rax,%rdi\n    1327:\te8 00 00 00 00       \tcallq  132c <decode_frame+0x1d2>\n    132c:\t48 83 c4 10          \tadd    $0x10,%rsp\n    1330:\t83 bc 24 9c 03 00 00 \tcmpl   $0x0,0x39c(%rsp)\n    1337:\t00 \n    1338:\t74 1a                \tje     1354 <decode_frame+0x1fa>\n    133a:\t83 bc 24 9c 03 00 00 \tcmpl   $0x2,0x39c(%rsp)\n    1341:\t02 \n    1342:\t75 1e                \tjne    1362 <decode_frame+0x208>\n    1344:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1349:\t8b 80 28 22 00 00    \tmov    0x2228(%rax),%eax\n    134f:\t83 f8 03             \tcmp    $0x3,%eax\n    1352:\t75 0e                \tjne    1362 <decode_frame+0x208>\n    1354:\t8b 84 24 ec 00 00 00 \tmov    0xec(%rsp),%eax\n    135b:\t89 84 24 8c 03 00 00 \tmov    %eax,0x38c(%rsp)\n    1362:\t8b 84 24 e8 00 00 00 \tmov    0xe8(%rsp),%eax\n    1369:\t8d 48 02             \tlea    0x2(%rax),%ecx\n    136c:\t48 63 c1             \tmovslq %ecx,%rax\n    136f:\t48 69 c0 56 55 55 55 \timul   $0x55555556,%rax,%rax\n    1376:\t48 c1 e8 20          \tshr    $0x20,%rax\n    137a:\t48 89 c2             \tmov    %rax,%rdx\n    137d:\t89 c8                \tmov    %ecx,%eax\n    137f:\tc1 f8 1f             \tsar    $0x1f,%eax\n    1382:\t29 c2                \tsub    %eax,%edx\n    1384:\t89 d0                \tmov    %edx,%eax\n    1386:\t01 c0                \tadd    %eax,%eax\n    1388:\t01 d0                \tadd    %edx,%eax\n    138a:\t29 c1                \tsub    %eax,%ecx\n    138c:\t89 ca                \tmov    %ecx,%edx\n    138e:\t8d 42 01             \tlea    0x1(%rdx),%eax\n    1391:\t8d 0c 00             \tlea    (%rax,%rax,1),%ecx\n    1394:\t8b 84 24 e8 00 00 00 \tmov    0xe8(%rsp),%eax\n    139b:\t85 c0                \ttest   %eax,%eax\n    139d:\t7f 07                \tjg     13a6 <decode_frame+0x24c>\n    139f:\tba 04 00 00 00       \tmov    $0x4,%edx\n    13a4:\teb 05                \tjmp    13ab <decode_frame+0x251>\n    13a6:\tba 00 00 00 00       \tmov    $0x0,%edx\n    13ab:\t8b 84 24 ec 00 00 00 \tmov    0xec(%rsp),%eax\n    13b2:\t48 98                \tcltq   \n    13b4:\t48 c1 e0 02          \tshl    $0x2,%rax\n    13b8:\t48 29 c2             \tsub    %rax,%rdx\n    13bb:\t48 8b 84 24 90 03 00 \tmov    0x390(%rsp),%rax\n    13c2:\t00 \n    13c3:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n    13c7:\t48 8b 84 24 90 03 00 \tmov    0x390(%rsp),%rax\n    13ce:\t00 \n    13cf:\t48 83 ec 08          \tsub    $0x8,%rsp\n    13d3:\t6a 30                \tpushq  $0x30\n    13d5:\t41 b9 0a 00 00 00    \tmov    $0xa,%r9d\n    13db:\t41 89 c8             \tmov    %ecx,%r8d\n    13de:\tb9 06 00 00 00       \tmov    $0x6,%ecx\n    13e3:\tba 00 00 00 00       \tmov    $0x0,%edx\n    13e8:\t48 89 c7             \tmov    %rax,%rdi\n    13eb:\te8 00 00 00 00       \tcallq  13f0 <decode_frame+0x296>\n    13f0:\t48 83 c4 10          \tadd    $0x10,%rsp\n    13f4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    13f9:\tf3 0f 10 80 2c 22 00 \tmovss  0x222c(%rax),%xmm0\n    1400:\t00 \n    1401:\tf3 0f 5a c8          \tcvtss2sd %xmm0,%xmm1\n    1405:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 140d <decode_frame+0x2b3>\n    140c:\t00 \n    140d:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    1411:\t0f 97 c0             \tseta   %al\n    1414:\t0f b6 c8             \tmovzbl %al,%ecx\n    1417:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    141c:\t8b b0 28 22 00 00    \tmov    0x2228(%rax),%esi\n    1422:\t8b 84 24 9c 03 00 00 \tmov    0x39c(%rsp),%eax\n    1429:\t48 63 d0             \tmovslq %eax,%rdx\n    142c:\t48 89 d0             \tmov    %rdx,%rax\n    142f:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1433:\t48 01 d0             \tadd    %rdx,%rax\n    1436:\t48 c1 e0 02          \tshl    $0x2,%rax\n    143a:\t48 8d 50 40          \tlea    0x40(%rax),%rdx\n    143e:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1443:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n    1447:\t48 8d 84 24 00 01 00 \tlea    0x100(%rsp),%rax\n    144e:\t00 \n    144f:\t89 f2                \tmov    %esi,%edx\n    1451:\t48 89 fe             \tmov    %rdi,%rsi\n    1454:\t48 89 c7             \tmov    %rax,%rdi\n    1457:\te8 34 f9 ff ff       \tcallq  d90 <decode_fixed_sparse>\n    145c:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1461:\t8b 80 28 22 00 00    \tmov    0x2228(%rax),%eax\n    1467:\t89 c2                \tmov    %eax,%edx\n    1469:\t48 89 d0             \tmov    %rdx,%rax\n    146c:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1470:\t48 01 d0             \tadd    %rdx,%rax\n    1473:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1477:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    147d:\t8b 30                \tmov    (%rax),%esi\n    147f:\t8b 8c 24 ec 00 00 00 \tmov    0xec(%rsp),%ecx\n    1486:\t48 8b 94 24 78 03 00 \tmov    0x378(%rsp),%rdx\n    148d:\t00 \n    148e:\t48 8b 84 24 60 03 00 \tmov    0x360(%rsp),%rax\n    1495:\t00 \n    1496:\t66 0f 6e c6          \tmovd   %esi,%xmm0\n    149a:\t89 ce                \tmov    %ecx,%esi\n    149c:\t48 89 c7             \tmov    %rax,%rdi\n    149f:\te8 b1 f4 ff ff       \tcallq  955 <eval_ir>\n    14a4:\t48 8b 94 24 78 03 00 \tmov    0x378(%rsp),%rdx\n    14ab:\t00 \n    14ac:\t48 8d b4 24 00 01 00 \tlea    0x100(%rsp),%rsi\n    14b3:\t00 \n    14b4:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    14b9:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n    14be:\t48 89 c7             \tmov    %rax,%rdi\n    14c1:\te8 c6 f5 ff ff       \tcallq  a8c <convolute_with_sparse>\n    14c6:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    14cb:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    14d0:\tba 30 00 00 00       \tmov    $0x30,%edx\n    14d5:\t48 89 ce             \tmov    %rcx,%rsi\n    14d8:\t48 89 c7             \tmov    %rax,%rdi\n    14db:\te8 00 00 00 00       \tcallq  14e0 <decode_frame+0x386>\n    14e0:\tf3 0f 5a c8          \tcvtss2sd %xmm0,%xmm1\n    14e4:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 14ec <decode_frame+0x392>\n    14eb:\t00 \n    14ec:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n    14f0:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 14f8 <decode_frame+0x39e>\n    14f7:\t00 \n    14f8:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    14fc:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n    1500:\tf3 0f 11 84 24 5c 03 \tmovss  %xmm0,0x35c(%rsp)\n    1507:\t00 00 \n    1509:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    150e:\t8b 94 24 9c 03 00 00 \tmov    0x39c(%rsp),%edx\n    1515:\t48 63 d2             \tmovslq %edx,%rdx\n    1518:\t48 83 c2 28          \tadd    $0x28,%rdx\n    151c:\t8b 44 90 04          \tmov    0x4(%rax,%rdx,4),%eax\n    1520:\t48 98                \tcltq   \n    1522:\tf3 0f 10 04 c5 00 00 \tmovss  0x0(,%rax,8),%xmm0\n    1529:\t00 00 \n    152b:\tf3 0f 11 84 24 58 03 \tmovss  %xmm0,0x358(%rsp)\n    1532:\t00 00 \n    1534:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1539:\tf3 0f 10 84 24 58 03 \tmovss  0x358(%rsp),%xmm0\n    1540:\t00 00 \n    1542:\tf3 0f 11 80 2c 22 00 \tmovss  %xmm0,0x222c(%rax)\n    1549:\t00 \n    154a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    154f:\t48 8d 90 ac 2d 00 00 \tlea    0x2dac(%rax),%rdx\n    1556:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    155b:\t8b 8c 24 9c 03 00 00 \tmov    0x39c(%rsp),%ecx\n    1562:\t48 63 c9             \tmovslq %ecx,%rcx\n    1565:\t48 83 c1 28          \tadd    $0x28,%rcx\n    1569:\t8b 44 88 04          \tmov    0x4(%rax,%rcx,4),%eax\n    156d:\t48 98                \tcltq   \n    156f:\t8b 04 c5 00 00 00 00 \tmov    0x0(,%rax,8),%eax\n    1576:\tf3 0f 10 84 24 5c 03 \tmovss  0x35c(%rsp),%xmm0\n    157d:\t00 00 \n    157f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1584:\tf3 0f 10 15 00 00 00 \tmovss  0x0(%rip),%xmm2        # 158c <decode_frame+0x432>\n    158b:\t00 \n    158c:\t48 89 d7             \tmov    %rdx,%rdi\n    158f:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n    1592:\t66 0f 6e c0          \tmovd   %eax,%xmm0\n    1596:\te8 00 00 00 00       \tcallq  159b <decode_frame+0x441>\n    159b:\t66 0f 7e c0          \tmovd   %xmm0,%eax\n    159f:\t89 84 24 54 03 00 00 \tmov    %eax,0x354(%rsp)\n    15a6:\tf3 0f 10 84 24 54 03 \tmovss  0x354(%rsp),%xmm0\n    15ad:\t00 00 \n    15af:\t8b bc 24 58 03 00 00 \tmov    0x358(%rsp),%edi\n    15b6:\t48 8d 54 24 20       \tlea    0x20(%rsp),%rdx\n    15bb:\t48 8b b4 24 90 03 00 \tmov    0x390(%rsp),%rsi\n    15c2:\t00 \n    15c3:\t48 8b 84 24 90 03 00 \tmov    0x390(%rsp),%rax\n    15ca:\t00 \n    15cb:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n    15d0:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n    15d3:\t66 0f 6e c7          \tmovd   %edi,%xmm0\n    15d7:\t48 89 c7             \tmov    %rax,%rdi\n    15da:\te8 00 00 00 00       \tcallq  15df <decode_frame+0x485>\n    15df:\tf3 0f 5a 8c 24 58 03 \tcvtss2sd 0x358(%rsp),%xmm1\n    15e6:\t00 00 \n    15e8:\tf3 0f 5a 94 24 58 03 \tcvtss2sd 0x358(%rsp),%xmm2\n    15ef:\t00 00 \n    15f1:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 15f9 <decode_frame+0x49f>\n    15f8:\t00 \n    15f9:\tf2 0f 59 c2          \tmulsd  %xmm2,%xmm0\n    15fd:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n    1601:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n    1605:\tf3 0f 11 84 24 58 03 \tmovss  %xmm0,0x358(%rsp)\n    160c:\t00 00 \n    160e:\tf3 0f 5a 84 24 58 03 \tcvtss2sd 0x358(%rsp),%xmm0\n    1615:\t00 00 \n    1617:\t66 0f 2f 05 00 00 00 \tcomisd 0x0(%rip),%xmm0        # 161f <decode_frame+0x4c5>\n    161e:\t00 \n    161f:\t76 0a                \tjbe    162b <decode_frame+0x4d1>\n    1621:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 1629 <decode_frame+0x4cf>\n    1628:\t00 \n    1629:\teb 09                \tjmp    1634 <decode_frame+0x4da>\n    162b:\tf3 0f 10 84 24 58 03 \tmovss  0x358(%rsp),%xmm0\n    1632:\t00 00 \n    1634:\tf3 0f 11 84 24 58 03 \tmovss  %xmm0,0x358(%rsp)\n    163b:\t00 00 \n    163d:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1642:\tf3 0f 10 80 a8 2d 00 \tmovss  0x2da8(%rax),%xmm0\n    1649:\t00 \n    164a:\tf3 0f 5a c8          \tcvtss2sd %xmm0,%xmm1\n    164e:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 1656 <decode_frame+0x4fc>\n    1655:\t00 \n    1656:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n    165a:\tf3 0f 5a 94 24 58 03 \tcvtss2sd 0x358(%rsp),%xmm2\n    1661:\t00 00 \n    1663:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 166b <decode_frame+0x511>\n    166a:\t00 \n    166b:\tf2 0f 59 c2          \tmulsd  %xmm2,%xmm0\n    166f:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n    1673:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n    1677:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    167c:\tf3 0f 11 80 a8 2d 00 \tmovss  %xmm0,0x2da8(%rax)\n    1683:\t00 \n    1684:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1689:\tf3 0f 10 80 a8 2d 00 \tmovss  0x2da8(%rax),%xmm0\n    1690:\t00 \n    1691:\t0f 2f 84 24 58 03 00 \tcomiss 0x358(%rsp),%xmm0\n    1698:\t00 \n    1699:\t76 0b                \tjbe    16a6 <decode_frame+0x54c>\n    169b:\tf3 0f 10 84 24 58 03 \tmovss  0x358(%rsp),%xmm0\n    16a2:\t00 00 \n    16a4:\teb 0d                \tjmp    16b3 <decode_frame+0x559>\n    16a6:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    16ab:\tf3 0f 10 80 a8 2d 00 \tmovss  0x2da8(%rax),%xmm0\n    16b2:\t00 \n    16b3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    16b8:\tf3 0f 11 80 a8 2d 00 \tmovss  %xmm0,0x2da8(%rax)\n    16bf:\t00 \n    16c0:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    16c5:\tf3 0f 10 80 a8 2d 00 \tmovss  0x2da8(%rax),%xmm0\n    16cc:\t00 \n    16cd:\tf3 0f 10 8c 24 54 03 \tmovss  0x354(%rsp),%xmm1\n    16d4:\t00 00 \n    16d6:\tf3 0f 59 c1          \tmulss  %xmm1,%xmm0\n    16da:\tf3 0f 11 84 24 54 03 \tmovss  %xmm0,0x354(%rsp)\n    16e1:\t00 00 \n    16e3:\tc7 84 24 98 03 00 00 \tmovl   $0x0,0x398(%rsp)\n    16ea:\t00 00 00 00 \n    16ee:\teb 53                \tjmp    1743 <decode_frame+0x5e9>\n    16f0:\t8b 84 24 98 03 00 00 \tmov    0x398(%rsp),%eax\n    16f7:\t48 98                \tcltq   \n    16f9:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1700:\t00 \n    1701:\t48 8b 84 24 90 03 00 \tmov    0x390(%rsp),%rax\n    1708:\t00 \n    1709:\t48 01 d0             \tadd    %rdx,%rax\n    170c:\tf3 0f 10 00          \tmovss  (%rax),%xmm0\n    1710:\t8b 84 24 98 03 00 00 \tmov    0x398(%rsp),%eax\n    1717:\t48 98                \tcltq   \n    1719:\tf3 0f 10 4c 84 20    \tmovss  0x20(%rsp,%rax,4),%xmm1\n    171f:\tf3 0f 59 8c 24 54 03 \tmulss  0x354(%rsp),%xmm1\n    1726:\t00 00 \n    1728:\tf3 0f 5c c1          \tsubss  %xmm1,%xmm0\n    172c:\t8b 84 24 98 03 00 00 \tmov    0x398(%rsp),%eax\n    1733:\t48 98                \tcltq   \n    1735:\tf3 0f 11 44 84 20    \tmovss  %xmm0,0x20(%rsp,%rax,4)\n    173b:\t83 84 24 98 03 00 00 \taddl   $0x1,0x398(%rsp)\n    1742:\t01 \n    1743:\t83 bc 24 98 03 00 00 \tcmpl   $0x2f,0x398(%rsp)\n    174a:\t2f \n    174b:\t7e a3                \tjle    16f0 <decode_frame+0x596>\n    174d:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1752:\t8b 80 28 22 00 00    \tmov    0x2228(%rax),%eax\n    1758:\t83 f8 03             \tcmp    $0x3,%eax\n    175b:\t75 6a                \tjne    17c7 <decode_frame+0x66d>\n    175d:\t48 8d 54 24 20       \tlea    0x20(%rsp),%rdx\n    1762:\t48 8b 8c 24 60 03 00 \tmov    0x360(%rsp),%rcx\n    1769:\t00 \n    176a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    176f:\t48 89 ce             \tmov    %rcx,%rsi\n    1772:\t48 89 c7             \tmov    %rax,%rdi\n    1775:\te8 1f f4 ff ff       \tcallq  b99 <postfilter_5k0>\n    177a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    177f:\t48 8d 88 94 32 00 00 \tlea    0x3294(%rax),%rcx\n    1786:\t8b 94 24 9c 03 00 00 \tmov    0x39c(%rsp),%edx\n    178d:\t89 d0                \tmov    %edx,%eax\n    178f:\t01 c0                \tadd    %eax,%eax\n    1791:\t01 d0                \tadd    %edx,%eax\n    1793:\tc1 e0 04             \tshl    $0x4,%eax\n    1796:\t48 98                \tcltq   \n    1798:\t48 83 c0 0a          \tadd    $0xa,%rax\n    179c:\t48 c1 e0 02          \tshl    $0x2,%rax\n    17a0:\t48 8d 3c 01          \tlea    (%rcx,%rax,1),%rdi\n    17a4:\t48 8b 94 24 90 03 00 \tmov    0x390(%rsp),%rdx\n    17ab:\t00 \n    17ac:\t48 8b 84 24 60 03 00 \tmov    0x360(%rsp),%rax\n    17b3:\t00 \n    17b4:\t41 b8 0a 00 00 00    \tmov    $0xa,%r8d\n    17ba:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n    17bf:\t48 89 c6             \tmov    %rax,%rsi\n    17c2:\te8 00 00 00 00       \tcallq  17c7 <decode_frame+0x66d>\n    17c7:\t8b 94 24 9c 03 00 00 \tmov    0x39c(%rsp),%edx\n    17ce:\t89 d0                \tmov    %edx,%eax\n    17d0:\t01 c0                \tadd    %eax,%eax\n    17d2:\t01 d0                \tadd    %edx,%eax\n    17d4:\tc1 e0 04             \tshl    $0x4,%eax\n    17d7:\t48 98                \tcltq   \n    17d9:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    17e0:\t00 \n    17e1:\t48 8b 84 24 70 03 00 \tmov    0x370(%rsp),%rax\n    17e8:\t00 \n    17e9:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n    17ed:\t48 8d 54 24 20       \tlea    0x20(%rsp),%rdx\n    17f2:\t48 8b 84 24 60 03 00 \tmov    0x360(%rsp),%rax\n    17f9:\t00 \n    17fa:\t41 b8 0a 00 00 00    \tmov    $0xa,%r8d\n    1800:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n    1805:\t48 89 c6             \tmov    %rax,%rsi\n    1808:\te8 00 00 00 00       \tcallq  180d <decode_frame+0x6b3>\n    180d:\t48 81 84 24 90 03 00 \taddq   $0xc0,0x390(%rsp)\n    1814:\t00 c0 00 00 00 \n    1819:\t83 84 24 9c 03 00 00 \taddl   $0x1,0x39c(%rsp)\n    1820:\t01 \n    1821:\t8b 84 24 9c 03 00 00 \tmov    0x39c(%rsp),%eax\n    1828:\t3b 84 24 88 03 00 00 \tcmp    0x388(%rsp),%eax\n    182f:\t0f 8c 6c fa ff ff    \tjl     12a1 <decode_frame+0x147>\n    1835:\t8b 84 24 84 03 00 00 \tmov    0x384(%rsp),%eax\n    183c:\t48 98                \tcltq   \n    183e:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1842:\t48 8d 50 d8          \tlea    -0x28(%rax),%rdx\n    1846:\t48 8b 84 24 70 03 00 \tmov    0x370(%rsp),%rax\n    184d:\t00 \n    184e:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n    1852:\t48 8b 84 24 70 03 00 \tmov    0x370(%rsp),%rax\n    1859:\t00 \n    185a:\t48 83 e8 28          \tsub    $0x28,%rax\n    185e:\tba 28 00 00 00       \tmov    $0x28,%edx\n    1863:\t48 89 ce             \tmov    %rcx,%rsi\n    1866:\t48 89 c7             \tmov    %rax,%rdi\n    1869:\te8 00 00 00 00       \tcallq  186e <decode_frame+0x714>\n    186e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1873:\t8b 80 28 22 00 00    \tmov    0x2228(%rax),%eax\n    1879:\t83 f8 03             \tcmp    $0x3,%eax\n    187c:\t0f 85 46 01 00 00    \tjne    19c8 <decode_frame+0x86e>\n    1882:\tc7 84 24 9c 03 00 00 \tmovl   $0x0,0x39c(%rsp)\n    1889:\t00 00 00 00 \n    188d:\te9 ea 00 00 00       \tjmpq   197c <decode_frame+0x822>\n    1892:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1897:\t48 8d 88 94 32 00 00 \tlea    0x3294(%rax),%rcx\n    189e:\t8b 94 24 9c 03 00 00 \tmov    0x39c(%rsp),%edx\n    18a5:\t89 d0                \tmov    %edx,%eax\n    18a7:\t01 c0                \tadd    %eax,%eax\n    18a9:\t01 d0                \tadd    %edx,%eax\n    18ab:\tc1 e0 04             \tshl    $0x4,%eax\n    18ae:\t48 98                \tcltq   \n    18b0:\t48 83 c0 0a          \tadd    $0xa,%rax\n    18b4:\t48 c1 e0 02          \tshl    $0x2,%rax\n    18b8:\t48 01 c1             \tadd    %rax,%rcx\n    18bb:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    18c0:\t48 8d b0 94 32 00 00 \tlea    0x3294(%rax),%rsi\n    18c7:\t8b 94 24 9c 03 00 00 \tmov    0x39c(%rsp),%edx\n    18ce:\t89 d0                \tmov    %edx,%eax\n    18d0:\t01 c0                \tadd    %eax,%eax\n    18d2:\t01 d0                \tadd    %edx,%eax\n    18d4:\tc1 e0 04             \tshl    $0x4,%eax\n    18d7:\t48 98                \tcltq   \n    18d9:\t48 83 c0 0a          \tadd    $0xa,%rax\n    18dd:\t48 c1 e0 02          \tshl    $0x2,%rax\n    18e1:\t48 01 f0             \tadd    %rsi,%rax\n    18e4:\tba 30 00 00 00       \tmov    $0x30,%edx\n    18e9:\t48 89 ce             \tmov    %rcx,%rsi\n    18ec:\t48 89 c7             \tmov    %rax,%rdi\n    18ef:\te8 00 00 00 00       \tcallq  18f4 <decode_frame+0x79a>\n    18f4:\t66 0f 7e c0          \tmovd   %xmm0,%eax\n    18f8:\t89 84 24 6c 03 00 00 \tmov    %eax,0x36c(%rsp)\n    18ff:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1904:\t48 8d 88 2c 30 00 00 \tlea    0x302c(%rax),%rcx\n    190b:\t8b 94 24 9c 03 00 00 \tmov    0x39c(%rsp),%edx\n    1912:\t89 d0                \tmov    %edx,%eax\n    1914:\t01 c0                \tadd    %eax,%eax\n    1916:\t01 d0                \tadd    %edx,%eax\n    1918:\tc1 e0 04             \tshl    $0x4,%eax\n    191b:\t48 98                \tcltq   \n    191d:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1924:\t00 \n    1925:\t48 8b 84 24 70 03 00 \tmov    0x370(%rsp),%rax\n    192c:\t00 \n    192d:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n    1931:\t8b 94 24 9c 03 00 00 \tmov    0x39c(%rsp),%edx\n    1938:\t89 d0                \tmov    %edx,%eax\n    193a:\t01 c0                \tadd    %eax,%eax\n    193c:\t01 d0                \tadd    %edx,%eax\n    193e:\tc1 e0 04             \tshl    $0x4,%eax\n    1941:\t48 98                \tcltq   \n    1943:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    194a:\t00 \n    194b:\t48 8b 84 24 70 03 00 \tmov    0x370(%rsp),%rax\n    1952:\t00 \n    1953:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n    1957:\t8b 84 24 6c 03 00 00 \tmov    0x36c(%rsp),%eax\n    195e:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # 1966 <decode_frame+0x80c>\n    1965:\t00 \n    1966:\tba 30 00 00 00       \tmov    $0x30,%edx\n    196b:\t66 0f 6e c0          \tmovd   %eax,%xmm0\n    196f:\te8 00 00 00 00       \tcallq  1974 <decode_frame+0x81a>\n    1974:\t83 84 24 9c 03 00 00 \taddl   $0x1,0x39c(%rsp)\n    197b:\t01 \n    197c:\t8b 84 24 9c 03 00 00 \tmov    0x39c(%rsp),%eax\n    1983:\t3b 84 24 88 03 00 00 \tcmp    0x388(%rsp),%eax\n    198a:\t0f 8c 02 ff ff ff    \tjl     1892 <decode_frame+0x738>\n    1990:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1995:\t48 8d 90 94 32 00 00 \tlea    0x3294(%rax),%rdx\n    199c:\t8b 84 24 84 03 00 00 \tmov    0x384(%rsp),%eax\n    19a3:\t48 98                \tcltq   \n    19a5:\t48 c1 e0 02          \tshl    $0x2,%rax\n    19a9:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n    19ad:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    19b2:\t48 05 94 32 00 00    \tadd    $0x3294,%rax\n    19b8:\tba 28 00 00 00       \tmov    $0x28,%edx\n    19bd:\t48 89 ce             \tmov    %rcx,%rsi\n    19c0:\t48 89 c7             \tmov    %rax,%rdi\n    19c3:\te8 00 00 00 00       \tcallq  19c8 <decode_frame+0x86e>\n    19c8:\t48 8b 84 24 90 03 00 \tmov    0x390(%rsp),%rax\n    19cf:\t00 \n    19d0:\t48 8d 88 98 fd ff ff \tlea    -0x268(%rax),%rcx\n    19d7:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    19dc:\t48 05 70 22 00 00    \tadd    $0x2270,%rax\n    19e2:\tba 68 02 00 00       \tmov    $0x268,%edx\n    19e7:\t48 89 ce             \tmov    %rcx,%rsi\n    19ea:\t48 89 c7             \tmov    %rax,%rdi\n    19ed:\te8 00 00 00 00       \tcallq  19f2 <decode_frame+0x898>\n    19f2:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    19f7:\t4c 8d 80 bc 2d 00 00 \tlea    0x2dbc(%rax),%r8\n    19fe:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 1a06 <decode_frame+0x8ac>\n    1a05:\t00 \n    1a06:\tf3 0f 11 84 24 f0 00 \tmovss  %xmm0,0xf0(%rsp)\n    1a0d:\t00 00 \n    1a0f:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 1a17 <decode_frame+0x8bd>\n    1a16:\t00 \n    1a17:\tf3 0f 11 84 24 f4 00 \tmovss  %xmm0,0xf4(%rsp)\n    1a1e:\t00 00 \n    1a20:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 1a28 <decode_frame+0x8ce>\n    1a27:\t00 \n    1a28:\tf3 0f 11 84 24 f8 00 \tmovss  %xmm0,0xf8(%rsp)\n    1a2f:\t00 00 \n    1a31:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 1a39 <decode_frame+0x8df>\n    1a38:\t00 \n    1a39:\tf3 0f 11 84 24 fc 00 \tmovss  %xmm0,0xfc(%rsp)\n    1a40:\t00 00 \n    1a42:\t8b bc 24 84 03 00 00 \tmov    0x384(%rsp),%edi\n    1a49:\t48 8d 8c 24 f0 00 00 \tlea    0xf0(%rsp),%rcx\n    1a50:\t00 \n    1a51:\t48 8d 94 24 f8 00 00 \tlea    0xf8(%rsp),%rdx\n    1a58:\t00 \n    1a59:\t48 8b b4 24 70 03 00 \tmov    0x370(%rsp),%rsi\n    1a60:\t00 \n    1a61:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a66:\t41 89 f9             \tmov    %edi,%r9d\n    1a69:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 1a71 <decode_frame+0x917>\n    1a70:\t00 \n    1a71:\t48 89 c7             \tmov    %rax,%rdi\n    1a74:\te8 00 00 00 00       \tcallq  1a79 <decode_frame+0x91f>\n    1a79:\t90                   \tnop\n    1a7a:\t48 81 c4 a8 03 00 00 \tadd    $0x3a8,%rsp\n    1a81:\tc3                   \tretq   ", "code_s": "__int64 __fastcall decode_frame(__int64 a1, __int64 a2, __int64 a3,\n                                __m128i a4) {\n  __int64 v4;\n  float v5;\n  __m128i v6;\n  float v7;\n  float v8;\n  float v9;\n  float v12[Number];\n  int v13;\n  signed int v14;\n  int v15[Number];\n  int v16[Number];\n  unsigned int <span class=\"supfact\">v17</span>[Number];\n  char src[Number];\n  char s[Number];\n  __int64 v20;\n  _DWORD v21[Number];\n  float v22;\n  float v23;\n  float v24;\n  _DWORD *v25;\n  unsigned int v26;\n  __int64 v27;\n  __int64 *v28;\n  unsigned int v29;\n  int v30;\n  unsigned int v31;\n  __int64 v32;\n  int j;\n  int i;\n  v30 =\n      *((unsigned __int8 *)&unk_332A + Number * *(unsigned int *)(a1 + Number));\n  v29 = Number * v30;\n  v28 = &v20;\n  v27 = a1 + Number;\n  v31 = Number;\n  memset(s, Number, sizeof(s));\n  lsf_decode_fp((__int64)src, (float *)(a1 + Number), a2);\n  sipr_decode_lp((__int64)src, a1 + Number, (__int64)v21, v30);\n  memcpy((void *)(a1 + Number), src, Number);\n  v32 = a1 + Number;\n  for (i = Number; i < v30; ++i) {\n    v25 = &v21[Number * i];\n    ff_decode_pitch_lag(\n        &v14, &v13, *(unsigned int *)(a2 + Number * (i + Number L) + Number),\n        v31, (unsigned int)i, *(_DWORD *)(a1 + Number) == Number, Number L);\n    if (!i || i == Number && *(_DWORD *)(a1 + Number) == Number)\n      v31 = v14;\n    if (v13 > Number)\n      v4 = Number L;\n    else\n      v4 = Number L;\n    ff_acelp_interpolatef(\n        v32, v4 - Number L * v14 + v32, &ff_b60_sinc, Number L,\n        (unsigned int)(Number * ((v13 + Number) % Number + Number)), Number L,\n        Number L);\n    decode_fixed_sparse(\n        (__int64)<span class=\"supfact\">v17</span>, (__int16 *)(Number L * i + Number + a2),\n        *(_DWORD *)(a1 + Number), *(float *)(a1 + Number) < Number);\n    eval_ir((__int64)v25, v14, (__int64)v28,\n            *((float *)&unk_332C + Number * *(unsigned int *)(a1 + Number)));\n    convolute_with_sparse(v12, <span class=\"supfact\">v17</span>, (__int64)v28, Number);\n    v5 = (ff_dot_productf(v12, v12, Number L) + Number) / Number;\n    v24 = v5;\n    v23 = *(float *)&gain_cb[Number *\n                             *(int *)(a2 + Number * (i + Number L) + Number)];\n    *(float *)(a1 + Number) = v23;\n    v6 = _mm_cvtsi32_si128(\n        dword_2F04[Number * *(int *)(a2 + Number * (i + Number L) + Number)]);\n    *(double *)v6.m128i_i64 = ff_amr_set_fixed_gain(\n        a1 + Number, &pred, *(double *)v6.m128i_i64, v24, Number);\n    v22 = COERCE_FLOAT(_mm_cvtsi128_si32(v6));\n    ff_weighted_vector_sumf(\n        v32, v32, v12, Number L,\n        *(double *)_mm_cvtsi32_si128(LODWORD(v23)).m128i_i64, v22);\n    *(float *)v6.m128i_i32 = Number * v23 * v23;\n    v23 = *(float *)v6.m128i_i32;\n    if (*(float *)v6.m128i_i32 <= Number)\n      v7 = v23;\n    else\n      v7 = Number;\n    v23 = v7;\n    v8 = Number * v7 + *(float *)(a1 + Number) * Number;\n    *(float *)(a1 + Number) = v8;\n    if (*(float *)(a1 + Number) <= v23)\n      v9 = *(float *)(a1 + Number);\n    else\n      v9 = v23;\n    *(float *)(a1 + Number) = v9;\n    a4 = (__m128i) * (unsigned int *)(a1 + Number);\n    v22 = *(float *)a4.m128i_i32 * v22;\n    for (j = Number; j <= Number; ++j) {\n      a4 = (__m128i) * (unsigned int *)(Number L * j + v32);\n      v12[j] = *(float *)a4.m128i_i32 - (float)(v12[j] * v22);\n    }\n    if (*(_DWORD *)(a1 + Number) == Number) {\n      postfilter_5k0(a1, (__int64)v25, (__int64)v12);\n      ff_celp_lp_synthesis_filterf(a1 + Number +\n                                       Number * (Number * i + Number L),\n                                   v25, v32, Number L, Number L);\n    }\n    ff_celp_lp_synthesis_filterf(Number L * i + v27, v25, v12, Number L,\n                                 Number L);\n    v32 += Number L;\n  }\n  memcpy((void *)(v27 - Number),\n         (const void *)(Number L * (int)v29 - Number + v27), Number);\n  if (*(_DWORD *)(a1 + Number) == Number) {\n    for (i = Number; i < v30; ++i) {\n      *(float *)a4.m128i_i32 = ff_dot_productf(\n          a1 + Number + Number * (Number * i + Number L),\n          Number * (Number * i + Number L) + a1 + Number, Number L);\n      v26 = _mm_cvtsi128_si32(a4);\n      a4 = _mm_cvtsi32_si128(v26);\n      ff_adaptive_gain_control(Number L * i + v27, Number L * i + v27, Number L,\n                               a1 + Number, *(double *)a4.m128i_i64, Number);\n    }\n    memcpy((void *)(a1 + Number),\n           (const void *)(a1 + Number + Number L * (int)v29), Number);\n  }\n  memcpy((void *)(a1 + Number), (const void *)(v32 - Number), Number);\n  v15[Number] = Number;\n  v15[Number] = Number;\n  v16[Number] = Number;\n  v16[Number] = Number;\n  return ff_acelp_apply_order_2_transfer_function(a3, v27, v16, v15,\n                                                  a1 + Number, v29, Number);\n}", "code_t": "void __cdecl decode_frame(SiprContext *ctx, SiprParameters *params,\n                          float *out_data) {\n  __m128i v3;\n  __int64 v4;\n  float v5;\n  __m128i v6;\n  float v7;\n  float v8;\n  float v9;\n  float fixed_vector[Number];\n  int T0_frac;\n  int T0;\n  int v14[Number];\n  int v15[Number];\n  AMRFixed <span class=\"supfact\">fixed_cb</span>;\n  float lsf_new[Number];\n  float ir_buf[Number];\n  float Az[Number];\n  float gain_code;\n  float pitch_gain;\n  float avg_energy;\n  float *pAz;\n  float energy;\n  float *synth;\n  float *impulse_response;\n  int frame_size;\n  int subframe_count;\n  int t0_first;\n  float *excitation;\n  int j;\n  int i;\n  subframe_count = modes[ctx->mode].subframe_count;\n  frame_size = Number * subframe_count;\n  impulse_response = &ir_buf[Number];\n  synth = &ctx->synth_buf[Number];\n  t0_first = Number;\n  memset(ir_buf, Number, Number);\n  lsf_decode_fp(lsf_new, ctx->lsf_history, params);\n  sipr_decode_lp(lsf_new, ctx->lsp_history, Az, subframe_count);\n  memcpy(ctx->lsp_history, lsf_new, sizeof(ctx->lsp_history));\n  excitation = &ctx->excitation[Number];\n  for (i = Number; i < subframe_count; ++i) {\n    pAz = &Az[Number * i];\n    ff_decode_pitch_lag(&T0, &T0_frac, (unsigned int)params->pitch_delay[i],\n                        (unsigned int)t0_first, (unsigned int)i,\n                        ctx->mode == MODE_5k0, Number L);\n    if (!i || i == Number && ctx->mode == MODE_5k0)\n      t0_first = T0;\n    if (T0_frac > Number)\n      v4 = Number L;\n    else\n      v4 = Number L;\n    ff_acelp_interpolatef(\n        excitation, (char *)excitation + v4 - Number L * T0, &ff_b60_sinc,\n        Number L,\n        (unsigned int)(Number * ((T0_frac + Number) % Number + Number)),\n        Number L, Number L);\n    decode_fixed_sparse(&<span class=\"supfact\">fixed_cb</span>, params->fc_indexes[i],\n                        ctx->mode, ctx->past_pitch_gain < Number);\n    eval_ir(pAz, T0, impulse_response, modes[ctx->mode].pitch_sharp_factor);\n    convolute_with_sparse(fixed_vector, &<span class=\"supfact\">fixed_cb</span>,\n                          impulse_response, Number);\n    v5 = (ff_dot_productf(fixed_vector, fixed_vector, Number L) + Number) /\n         Number;\n    avg_energy = v5;\n    pitch_gain = gain_cb[params->gc_index[i]][Number];\n    ctx->past_pitch_gain = pitch_gain;\n    v6 = _mm_cvtsi32_si128(LODWORD(gain_cb[params->gc_index[i]][Number]));\n    *(double *)v6.m128i_i64 = ff_amr_set_fixed_gain(\n        ctx->energy_history, pred, *(double *)v6.m128i_i64, avg_energy, Number);\n    gain_code = COERCE_FLOAT(_mm_cvtsi128_si32(v6));\n    ff_weighted_vector_sumf(\n        excitation, excitation, fixed_vector, Number L,\n        *(double *)_mm_cvtsi32_si128(LODWORD(pitch_gain)).m128i_i64, gain_code);\n    *(float *)v6.m128i_i32 = Number * pitch_gain * pitch_gain;\n    pitch_gain = *(float *)v6.m128i_i32;\n    if (*(float *)v6.m128i_i32 <= Number)\n      v7 = pitch_gain;\n    else\n      v7 = Number;\n    pitch_gain = v7;\n    v8 = Number * v7 + ctx->gain_mem * Number;\n    ctx->gain_mem = v8;\n    if (ctx->gain_mem <= pitch_gain)\n      v9 = ctx->gain_mem;\n    else\n      v9 = pitch_gain;\n    ctx->gain_mem = v9;\n    v3 = (__m128i)LODWORD(ctx->gain_mem);\n    gain_code = *(float *)v3.m128i_i32 * gain_code;\n    for (j = Number; j <= Number; ++j) {\n      v3 = (__m128i)LODWORD(excitation[j]);\n      fixed_vector[j] =\n          *(float *)v3.m128i_i32 - (float)(fixed_vector[j] * gain_code);\n    }\n    if (ctx->mode == MODE_5k0) {\n      postfilter_5k0(ctx, pAz, fixed_vector);\n      ff_celp_lp_synthesis_filterf(&ctx->postfilter_syn5k0[Number * i + Number],\n                                   pAz, excitation, Number L, Number L);\n    }\n    ff_celp_lp_synthesis_filterf(&synth[Number * i], pAz, fixed_vector,\n                                 Number L, Number L);\n    excitation += Number;\n  }\n  memcpy(synth - Number, &synth[frame_size - Number], Number);\n  if (ctx->mode == MODE_5k0) {\n    for (i = Number; i < subframe_count; ++i) {\n      *(float *)v3.m128i_i32 = ff_dot_productf(\n          &ctx->postfilter_syn5k0[Number * i + Number],\n          &ctx->postfilter_syn5k0[Number * i + Number], Number L);\n      LODWORD(energy) = _mm_cvtsi128_si32(v3);\n      v3 = _mm_cvtsi32_si128(LODWORD(energy));\n      ff_adaptive_gain_control(&synth[Number * i], &synth[Number * i], Number L,\n                               &ctx->postfilter_agc, *(double *)v3.m128i_i64,\n                               Number);\n    }\n    memcpy(ctx->postfilter_syn5k0, &ctx->postfilter_syn5k0[frame_size], Number);\n  }\n  memcpy(ctx->excitation, excitation - Number, Number);\n  v14[Number] = Number;\n  v14[Number] = Number;\n  v15[Number] = Number;\n  v15[Number] = Number;\n  ff_acelp_apply_order_2_transfer_function(out_data, synth, v15, v14,\n                                           ctx->highpass_filt_mem,\n                                           (unsigned int)frame_size, Number);\n}", "var": [{"name": "v17", "type": "struct AMRFixed { int n; int[10] x; float[10] y; int no_repeat_mask; int pitch_lag; float pitch_fac; }", "pred_name": "fixed_cb", "ref_name": "fixed_cb", "ref_type": "struct AMRFixed { int n; int[10] x; float[10] y; int no_repeat_mask; int pitch_lag; float pitch_fac; }"}], "body_in_train": false}, {"repo_owner": "peterfillmore", "repo_name": "QEMU-Experimentation", "path": "peterfillmore/QEMU-Experimentation/9a5c18db95e49452390ec73aafd76c752606715fa7c1ce07972098b86747df8b", "path_in_repo": "peterfillmore/QEMU-Experimentation//net/slirp.o", "objdump": "0000000000000978 <net_slirp_hostfwd_remove>:\n     978:\t55                   \tpush   %rbp\n     979:\t48 89 e5             \tmov    %rsp,%rbp\n     97c:\t48 81 ec 60 01 00 00 \tsub    $0x160,%rsp\n     983:\t48 89 bd a8 fe ff ff \tmov    %rdi,-0x158(%rbp)\n     98a:\t48 89 b5 a0 fe ff ff \tmov    %rsi,-0x160(%rbp)\n     991:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     998:\t00 00 \n     99a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     99e:\t31 c0                \txor    %eax,%eax\n     9a0:\tc7 85 b0 fe ff ff 00 \tmovl   $0x0,-0x150(%rbp)\n     9a7:\t00 00 00 \n     9aa:\tc7 85 b4 fe ff ff 00 \tmovl   $0x0,-0x14c(%rbp)\n     9b1:\t00 00 00 \n     9b4:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n     9bb:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 9c2 <net_slirp_hostfwd_remove+0x4a>\n     9c2:\t48 89 c7             \tmov    %rax,%rdi\n     9c5:\te8 00 00 00 00       \tcallq  9ca <net_slirp_hostfwd_remove+0x52>\n     9ca:\t48 89 85 d8 fe ff ff \tmov    %rax,-0x128(%rbp)\n     9d1:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n     9d8:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 9df <net_slirp_hostfwd_remove+0x67>\n     9df:\t48 89 c7             \tmov    %rax,%rdi\n     9e2:\te8 00 00 00 00       \tcallq  9e7 <net_slirp_hostfwd_remove+0x6f>\n     9e7:\t48 89 85 e0 fe ff ff \tmov    %rax,-0x120(%rbp)\n     9ee:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n     9f5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 9fc <net_slirp_hostfwd_remove+0x84>\n     9fc:\t48 89 c7             \tmov    %rax,%rdi\n     9ff:\te8 00 00 00 00       \tcallq  a04 <net_slirp_hostfwd_remove+0x8c>\n     a04:\t48 89 85 e8 fe ff ff \tmov    %rax,-0x118(%rbp)\n     a0b:\t48 83 bd e0 fe ff ff \tcmpq   $0x0,-0x120(%rbp)\n     a12:\t00 \n     a13:\t74 37                \tje     a4c <net_slirp_hostfwd_remove+0xd4>\n     a15:\t48 8b 95 e0 fe ff ff \tmov    -0x120(%rbp),%rdx\n     a1c:\t48 8b 8d d8 fe ff ff \tmov    -0x128(%rbp),%rcx\n     a23:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n     a2a:\t48 89 ce             \tmov    %rcx,%rsi\n     a2d:\t48 89 c7             \tmov    %rax,%rdi\n     a30:\te8 35 fe ff ff       \tcallq  86a <slirp_lookup>\n     a35:\t48 89 85 d0 fe ff ff \tmov    %rax,-0x130(%rbp)\n     a3c:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n     a43:\t48 89 85 c8 fe ff ff \tmov    %rax,-0x138(%rbp)\n     a4a:\teb 2e                \tjmp    a7a <net_slirp_hostfwd_remove+0x102>\n     a4c:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n     a53:\tba 00 00 00 00       \tmov    $0x0,%edx\n     a58:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a5d:\t48 89 c7             \tmov    %rax,%rdi\n     a60:\te8 05 fe ff ff       \tcallq  86a <slirp_lookup>\n     a65:\t48 89 85 d0 fe ff ff \tmov    %rax,-0x130(%rbp)\n     a6c:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n     a73:\t48 89 85 c8 fe ff ff \tmov    %rax,-0x138(%rbp)\n     a7a:\t48 83 bd d0 fe ff ff \tcmpq   $0x0,-0x130(%rbp)\n     a81:\t00 \n     a82:\t0f 84 9a 01 00 00    \tje     c22 <net_slirp_hostfwd_remove+0x2aa>\n     a88:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n     a8f:\t48 89 85 c0 fe ff ff \tmov    %rax,-0x140(%rbp)\n     a96:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n     a9d:\t48 85 c0             \ttest   %rax,%rax\n     aa0:\t0f 84 55 01 00 00    \tje     bfb <net_slirp_hostfwd_remove+0x283>\n     aa6:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n     aad:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n     ab4:\tb9 3a 00 00 00       \tmov    $0x3a,%ecx\n     ab9:\tbe 00 01 00 00       \tmov    $0x100,%esi\n     abe:\t48 89 c7             \tmov    %rax,%rdi\n     ac1:\te8 3a f5 ff ff       \tcallq  0 <get_str_sep>\n     ac6:\t85 c0                \ttest   %eax,%eax\n     ac8:\t0f 88 2d 01 00 00    \tjs     bfb <net_slirp_hostfwd_remove+0x283>\n     ace:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n     ad5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # adc <net_slirp_hostfwd_remove+0x164>\n     adc:\t48 89 c7             \tmov    %rax,%rdi\n     adf:\te8 00 00 00 00       \tcallq  ae4 <net_slirp_hostfwd_remove+0x16c>\n     ae4:\t85 c0                \ttest   %eax,%eax\n     ae6:\t74 0b                \tje     af3 <net_slirp_hostfwd_remove+0x17b>\n     ae8:\t0f b6 85 f0 fe ff ff \tmovzbl -0x110(%rbp),%eax\n     aef:\t84 c0                \ttest   %al,%al\n     af1:\t75 0c                \tjne    aff <net_slirp_hostfwd_remove+0x187>\n     af3:\tc7 85 b4 fe ff ff 00 \tmovl   $0x0,-0x14c(%rbp)\n     afa:\t00 00 00 \n     afd:\teb 28                \tjmp    b27 <net_slirp_hostfwd_remove+0x1af>\n     aff:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n     b06:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # b0d <net_slirp_hostfwd_remove+0x195>\n     b0d:\t48 89 c7             \tmov    %rax,%rdi\n     b10:\te8 00 00 00 00       \tcallq  b15 <net_slirp_hostfwd_remove+0x19d>\n     b15:\t85 c0                \ttest   %eax,%eax\n     b17:\t0f 85 e1 00 00 00    \tjne    bfe <net_slirp_hostfwd_remove+0x286>\n     b1d:\tc7 85 b4 fe ff ff 01 \tmovl   $0x1,-0x14c(%rbp)\n     b24:\t00 00 00 \n     b27:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n     b2e:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n     b35:\tb9 3a 00 00 00       \tmov    $0x3a,%ecx\n     b3a:\tbe 00 01 00 00       \tmov    $0x100,%esi\n     b3f:\t48 89 c7             \tmov    %rax,%rdi\n     b42:\te8 b9 f4 ff ff       \tcallq  0 <get_str_sep>\n     b47:\t85 c0                \ttest   %eax,%eax\n     b49:\t0f 88 b2 00 00 00    \tjs     c01 <net_slirp_hostfwd_remove+0x289>\n     b4f:\t0f b6 85 f0 fe ff ff \tmovzbl -0x110(%rbp),%eax\n     b56:\t84 c0                \ttest   %al,%al\n     b58:\t74 21                \tje     b7b <net_slirp_hostfwd_remove+0x203>\n     b5a:\t48 8d 95 b0 fe ff ff \tlea    -0x150(%rbp),%rdx\n     b61:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n     b68:\t48 89 d6             \tmov    %rdx,%rsi\n     b6b:\t48 89 c7             \tmov    %rax,%rdi\n     b6e:\te8 00 00 00 00       \tcallq  b73 <net_slirp_hostfwd_remove+0x1fb>\n     b73:\t85 c0                \ttest   %eax,%eax\n     b75:\t0f 84 89 00 00 00    \tje     c04 <net_slirp_hostfwd_remove+0x28c>\n     b7b:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n     b82:\t48 89 c7             \tmov    %rax,%rdi\n     b85:\te8 00 00 00 00       \tcallq  b8a <net_slirp_hostfwd_remove+0x212>\n     b8a:\t89 85 b8 fe ff ff    \tmov    %eax,-0x148(%rbp)\n     b90:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n     b97:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n     b9e:\t8b 8d b8 fe ff ff    \tmov    -0x148(%rbp),%ecx\n     ba4:\t8b 95 b0 fe ff ff    \tmov    -0x150(%rbp),%edx\n     baa:\t8b b5 b4 fe ff ff    \tmov    -0x14c(%rbp),%esi\n     bb0:\t48 89 c7             \tmov    %rax,%rdi\n     bb3:\te8 00 00 00 00       \tcallq  bb8 <net_slirp_hostfwd_remove+0x240>\n     bb8:\t89 85 bc fe ff ff    \tmov    %eax,-0x144(%rbp)\n     bbe:\t83 bd bc fe ff ff 00 \tcmpl   $0x0,-0x144(%rbp)\n     bc5:\t74 09                \tje     bd0 <net_slirp_hostfwd_remove+0x258>\n     bc7:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # bce <net_slirp_hostfwd_remove+0x256>\n     bce:\teb 07                \tjmp    bd7 <net_slirp_hostfwd_remove+0x25f>\n     bd0:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # bd7 <net_slirp_hostfwd_remove+0x25f>\n     bd7:\t48 8b 95 c8 fe ff ff \tmov    -0x138(%rbp),%rdx\n     bde:\t48 8b bd a8 fe ff ff \tmov    -0x158(%rbp),%rdi\n     be5:\t48 89 c1             \tmov    %rax,%rcx\n     be8:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # bef <net_slirp_hostfwd_remove+0x277>\n     bef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     bf4:\te8 00 00 00 00       \tcallq  bf9 <net_slirp_hostfwd_remove+0x281>\n     bf9:\teb 28                \tjmp    c23 <net_slirp_hostfwd_remove+0x2ab>\n     bfb:\t90                   \tnop\n     bfc:\teb 07                \tjmp    c05 <net_slirp_hostfwd_remove+0x28d>\n     bfe:\t90                   \tnop\n     bff:\teb 04                \tjmp    c05 <net_slirp_hostfwd_remove+0x28d>\n     c01:\t90                   \tnop\n     c02:\teb 01                \tjmp    c05 <net_slirp_hostfwd_remove+0x28d>\n     c04:\t90                   \tnop\n     c05:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n     c0c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # c13 <net_slirp_hostfwd_remove+0x29b>\n     c13:\t48 89 c7             \tmov    %rax,%rdi\n     c16:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c1b:\te8 00 00 00 00       \tcallq  c20 <net_slirp_hostfwd_remove+0x2a8>\n     c20:\teb 01                \tjmp    c23 <net_slirp_hostfwd_remove+0x2ab>\n     c22:\t90                   \tnop\n     c23:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     c27:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     c2e:\t00 00 \n     c30:\t74 05                \tje     c37 <net_slirp_hostfwd_remove+0x2bf>\n     c32:\te8 00 00 00 00       \tcallq  c37 <net_slirp_hostfwd_remove+0x2bf>\n     c37:\tc9                   \tleaveq \n     c38:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall net_slirp_hostfwd_remove(__int64 a1, __int64 a2) {\n  const char *v2;\n  struct in_addr <span class=\"supfact\">inp</span>;\n  unsigned int v5;\n  unsigned int v6;\n  char *nptr;\n  char *v9;\n  __int64 v10;\n  char *v11;\n  __int64 v12;\n  const char *v13;\n  char s1[Number];\n  unsigned __int64 v15;\n  v15 = __readfsqword(Number);\n  <span class=\"supfact\">inp</span>.s_addr = Number;\n  v5 = Number;\n  v11 = (char *)qdict_get_str(a2, String);\n  v12 = qdict_get_try_str(a2, String);\n  v13 = (const char *)qdict_get_try_str(a2, String);\n  if (v12) {\n    v10 = slirp_lookup(a1, v11, v12);\n    v9 = (char *)v13;\n  } else {\n    v10 = slirp_lookup(a1, Number L, Number L);\n    v9 = v11;\n  }\n  if (!v10)\n    return __readfsqword(Number) ^ v15;\n  nptr = v9;\n  if (!v9 ||\n      (int)get_str_sep(s1, Number, (const char **)&nptr, Number) < Number)\n    goto LABEL_19;\n  if (strcmp(s1, String) && s1[Number]) {\n    if (!strcmp(s1, String)) {\n      v5 = Number;\n      goto LABEL_12;\n    }\n  LABEL_19:\n    monitor_printf(a1, String);\n    return __readfsqword(Number) ^ v15;\n  }\n  v5 = Number;\nLABEL_12:\n  if ((int)get_str_sep(s1, Number, (const char **)&nptr, Number) < Number ||\n      s1[Number] && !inet_aton(s1, &<span class=\"supfact\">inp</span>))\n    goto LABEL_19;\n  v6 = atoi(nptr);\n  if ((unsigned int)slirp_remove_hostfwd(*(_QWORD *)(v10 + Number), v5,\n                                         <span class=\"supfact\">inp</span>.s_addr, v6))\n    v2 = String;\n  else\n    v2 = String;\n  monitor_printf(a1, String, v9, v2);\n  return __readfsqword(Number) ^ v15;\n}", "code_t": "void __cdecl net_slirp_hostfwd_remove(Monitor_0 *mon, const QDict_0 *qdict) {\n  const char *v2;\n  in_addr <span class=\"supfact\">host_addr</span>;\n  int is_udp;\n  int host_port;\n  const char *p;\n  const char *src_str;\n  SlirpState_0 *s;\n  const char *arg1;\n  const char *arg2;\n  const char *arg3;\n  char buf[Number];\n  unsigned __int64 v14;\n  v14 = __readfsqword(Number);\n  <span class=\"supfact\">host_addr</span>.s_addr = Number;\n  is_udp = Number;\n  arg1 = (const char *)qdict_get_str(qdict, String);\n  arg2 = (const char *)qdict_get_try_str(qdict, String);\n  arg3 = (const char *)qdict_get_try_str(qdict, String);\n  if (arg2) {\n    s = slirp_lookup(mon, arg1, arg2);\n    src_str = arg3;\n  } else {\n    s = slirp_lookup(mon, Number L, Number L);\n    src_str = arg1;\n  }\n  if (!s)\n    return;\n  p = src_str;\n  if (!src_str || get_str_sep(buf, Number, &p, Number) < Number)\n    goto fail_syntax;\n  if (strcmp(buf, String) && buf[Number]) {\n    if (!strcmp(buf, String)) {\n      is_udp = Number;\n      goto LABEL_12;\n    }\n  fail_syntax:\n    monitor_printf(mon, String);\n    return;\n  }\n  is_udp = Number;\nLABEL_12:\n  if (get_str_sep(buf, Number, &p, Number) < Number ||\n      buf[Number] && !inet_aton(buf, &<span class=\"supfact\">host_addr</span>))\n    goto fail_syntax;\n  host_port = atoi(p);\n  if ((unsigned int)slirp_remove_hostfwd(s->slirp, (unsigned int)is_udp,\n                                         <span class=\"supfact\">host_addr</span>.s_addr,\n                                         (unsigned int)host_port))\n    v2 = String;\n  else\n    v2 = String;\n  monitor_printf(mon, String, src_str, v2);\n}", "var": [{"name": "inp", "type": "struct in_addr { in_addr_t s_addr; }", "pred_name": "host_addr", "ref_name": "host_addr", "ref_type": "struct in_addr { in_addr_t s_addr; }"}], "body_in_train": false}, {"repo_owner": "yoshii", "repo_name": "qemu", "path": "yoshii/qemu/6aabd19c671ccc3be26feed9900465dea431ffcf535bc65ec813d90a6398d396", "path_in_repo": "yoshii/qemu//alpha-linux-user/signal.o", "objdump": "00000000000011c0 <host_signal_handler>:\n    11c0:\t55                   \tpush   %rbp\n    11c1:\t48 89 e5             \tmov    %rsp,%rbp\n    11c4:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    11cb:\t89 bd 5c ff ff ff    \tmov    %edi,-0xa4(%rbp)\n    11d1:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n    11d8:\t48 89 95 48 ff ff ff \tmov    %rdx,-0xb8(%rbp)\n    11df:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    11e6:\t00 00 \n    11e8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    11ec:\t31 c0                \txor    %eax,%eax\n    11ee:\t83 bd 5c ff ff ff 0b \tcmpl   $0xb,-0xa4(%rbp)\n    11f5:\t74 09                \tje     1200 <host_signal_handler+0x40>\n    11f7:\t83 bd 5c ff ff ff 07 \tcmpl   $0x7,-0xa4(%rbp)\n    11fe:\t75 30                \tjne    1230 <host_signal_handler+0x70>\n    1200:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1207:\t8b 40 08             \tmov    0x8(%rax),%eax\n    120a:\t85 c0                \ttest   %eax,%eax\n    120c:\t7e 22                \tjle    1230 <host_signal_handler+0x70>\n    120e:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    1215:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n    121c:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    1222:\t48 89 ce             \tmov    %rcx,%rsi\n    1225:\t89 c7                \tmov    %eax,%edi\n    1227:\te8 00 00 00 00       \tcallq  122c <host_signal_handler+0x6c>\n    122c:\t85 c0                \ttest   %eax,%eax\n    122e:\t75 7a                \tjne    12aa <host_signal_handler+0xea>\n    1230:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    1236:\t89 c7                \tmov    %eax,%edi\n    1238:\te8 00 00 00 00       \tcallq  123d <host_signal_handler+0x7d>\n    123d:\t89 85 6c ff ff ff    \tmov    %eax,-0x94(%rbp)\n    1243:\t83 bd 6c ff ff ff 00 \tcmpl   $0x0,-0x94(%rbp)\n    124a:\t7e 61                \tjle    12ad <host_signal_handler+0xed>\n    124c:\t83 bd 6c ff ff ff 40 \tcmpl   $0x40,-0x94(%rbp)\n    1253:\t7f 58                \tjg     12ad <host_signal_handler+0xed>\n    1255:\t48 8b 95 50 ff ff ff \tmov    -0xb0(%rbp),%rdx\n    125c:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    1263:\t48 89 d6             \tmov    %rdx,%rsi\n    1266:\t48 89 c7             \tmov    %rax,%rdi\n    1269:\te8 8a f4 ff ff       \tcallq  6f8 <host_to_target_siginfo_noswap>\n    126e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1275 <host_signal_handler+0xb5>\n    1275:\t64 48 8b 00          \tmov    %fs:(%rax),%rax\n    1279:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n    1280:\t8b 8d 6c ff ff ff    \tmov    -0x94(%rbp),%ecx\n    1286:\t89 ce                \tmov    %ecx,%esi\n    1288:\t48 89 c7             \tmov    %rax,%rdi\n    128b:\te8 00 00 00 00       \tcallq  1290 <host_signal_handler+0xd0>\n    1290:\t83 f8 01             \tcmp    $0x1,%eax\n    1293:\t75 19                \tjne    12ae <host_signal_handler+0xee>\n    1295:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 129c <host_signal_handler+0xdc>\n    129c:\t64 48 8b 00          \tmov    %fs:(%rax),%rax\n    12a0:\t48 89 c7             \tmov    %rax,%rdi\n    12a3:\te8 00 00 00 00       \tcallq  12a8 <host_signal_handler+0xe8>\n    12a8:\teb 04                \tjmp    12ae <host_signal_handler+0xee>\n    12aa:\t90                   \tnop\n    12ab:\teb 01                \tjmp    12ae <host_signal_handler+0xee>\n    12ad:\t90                   \tnop\n    12ae:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    12b2:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    12b9:\t00 00 \n    12bb:\t74 05                \tje     12c2 <host_signal_handler+0x102>\n    12bd:\te8 00 00 00 00       \tcallq  12c2 <host_signal_handler+0x102>\n    12c2:\tc9                   \tleaveq \n    12c3:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall host_signal_handler(unsigned int a1, int *a2,\n                                                __int64 a3) {\n  signed int v4;\n  _QWORD <span class=\"supfact\">v5</span>[Number];\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (a1 != Number && a1 != Number || a2[Number] <= Number ||\n      !(unsigned int)cpu_alpha_signal_handler(a1, a2, a3)) {\n    v4 = host_to_target_signal(a1);\n    if (v4 > Number && v4 <= Number) {\n      host_to_target_siginfo_noswap((__int64)<span class=\"supfact\">v5</span>, a2);\n      if ((unsigned int)queue_signal(thread_env, v4, <span class=\"supfact\">v5</span>) ==\n          Number)\n        cpu_exit(thread_env);\n    }\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl host_signal_handler(int host_signum, siginfo_t *info, void *puc) {\n  int sig;\n  target_siginfo_t <span class=\"supfact\">tinfo</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (host_signum != Number && host_signum != Number ||\n      info->si_code <= Number ||\n      !(unsigned int)cpu_alpha_signal_handler((unsigned int)host_signum, info,\n                                              puc)) {\n    sig = host_to_target_signal(host_signum);\n    if (sig > Number && sig <= Number) {\n      host_to_target_siginfo_noswap(&<span class=\"supfact\">tinfo</span>, info);\n      if (queue_signal(thread_env, sig, &<span class=\"supfact\">tinfo</span>) == Number)\n        cpu_exit(thread_env);\n    }\n  }\n}", "var": [{"name": "v5", "type": "struct target_siginfo_t { int si_signo; int si_errno; int si_code; $DBCC956373FB6279FC8930A00B52C698 _sifields; }", "pred_name": "tinfo", "ref_name": "tinfo", "ref_type": "struct target_siginfo_t { int si_signo; int si_errno; int si_code; PADDING (4); $866C21A0E0E280654BBE403694673FAA _sifields; }"}], "body_in_train": false}, {"repo_owner": "moneyadviceservice", "repo_name": "tidy-html5-gem", "path": "moneyadviceservice/tidy-html5-gem/c059824c1d9586ef235a45c26fb010dbe5c4ef37c9247efdb8a48abab8666bc4", "path_in_repo": "moneyadviceservice/tidy-html5-gem/ext/tidy-html5/build/gmake/obj/tidylib.o", "objdump": "00000000000012bb <tidyDocParseFile>:\n    12bb:\t55                   \tpush   %rbp\n    12bc:\t48 89 e5             \tmov    %rsp,%rbp\n    12bf:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    12c6:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n    12cd:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n    12d4:\tc7 45 fc fe ff ff ff \tmovl   $0xfffffffe,-0x4(%rbp)\n    12db:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    12e2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    12e7:\t48 89 c7             \tmov    %rax,%rdi\n    12ea:\te8 00 00 00 00       \tcallq  12ef <tidyDocParseFile+0x34>\n    12ef:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    12f3:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n    12fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12ff:\tb9 12 00 00 00       \tmov    $0x12,%ecx\n    1304:\t48 89 d7             \tmov    %rdx,%rdi\n    1307:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    130a:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1311:\t48 05 a0 13 00 00    \tadd    $0x13a0,%rax\n    1317:\tba 10 00 00 00       \tmov    $0x10,%edx\n    131c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1321:\t48 89 c7             \tmov    %rax,%rdi\n    1324:\te8 00 00 00 00       \tcallq  1329 <tidyDocParseFile+0x6e>\n    1329:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    132e:\t74 60                \tje     1390 <tidyDocParseFile+0xd5>\n    1330:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1337:\tbe 3a 00 00 00       \tmov    $0x3a,%esi\n    133c:\t48 89 c7             \tmov    %rax,%rdi\n    133f:\te8 00 00 00 00       \tcallq  1344 <tidyDocParseFile+0x89>\n    1344:\t85 c0                \ttest   %eax,%eax\n    1346:\t74 48                \tje     1390 <tidyDocParseFile+0xd5>\n    1348:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    134c:\t48 89 c7             \tmov    %rax,%rdi\n    134f:\te8 00 00 00 00       \tcallq  1354 <tidyDocParseFile+0x99>\n    1354:\t89 c2                \tmov    %eax,%edx\n    1356:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    135d:\t48 89 c6             \tmov    %rax,%rsi\n    1360:\t89 d7                \tmov    %edx,%edi\n    1362:\te8 00 00 00 00       \tcallq  1367 <tidyDocParseFile+0xac>\n    1367:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    136a:\t74 24                \tje     1390 <tidyDocParseFile+0xd5>\n    136c:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n    1370:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1377:\t48 89 90 a0 13 00 00 \tmov    %rdx,0x13a0(%rax)\n    137e:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    1382:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1389:\t48 89 90 a8 13 00 00 \tmov    %rdx,0x13a8(%rax)\n    1390:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1395:\t0f 84 86 00 00 00    \tje     1421 <tidyDocParseFile+0x166>\n    139b:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    13a2:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    13a7:\t48 89 c7             \tmov    %rax,%rdi\n    13aa:\te8 00 00 00 00       \tcallq  13af <tidyDocParseFile+0xf4>\n    13af:\t89 c2                \tmov    %eax,%edx\n    13b1:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    13b5:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    13bc:\t48 89 ce             \tmov    %rcx,%rsi\n    13bf:\t48 89 c7             \tmov    %rax,%rdi\n    13c2:\te8 00 00 00 00       \tcallq  13c7 <tidyDocParseFile+0x10c>\n    13c7:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    13cb:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    13d0:\t75 11                \tjne    13e3 <tidyDocParseFile+0x128>\n    13d2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    13d6:\t48 89 c7             \tmov    %rax,%rdi\n    13d9:\te8 00 00 00 00       \tcallq  13de <tidyDocParseFile+0x123>\n    13de:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    13e1:\teb 5f                \tjmp    1442 <tidyDocParseFile+0x187>\n    13e3:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    13e7:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    13ee:\t48 89 d6             \tmov    %rdx,%rsi\n    13f1:\t48 89 c7             \tmov    %rax,%rdi\n    13f4:\te8 00 00 00 00       \tcallq  13f9 <tidyDocParseFile+0x13e>\n    13f9:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    13fc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1400:\t48 05 38 01 00 00    \tadd    $0x138,%rax\n    1406:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    140b:\t48 89 c7             \tmov    %rax,%rdi\n    140e:\te8 00 00 00 00       \tcallq  1413 <tidyDocParseFile+0x158>\n    1413:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1417:\t48 89 c7             \tmov    %rax,%rdi\n    141a:\te8 00 00 00 00       \tcallq  141f <tidyDocParseFile+0x164>\n    141f:\teb 1e                \tjmp    143f <tidyDocParseFile+0x184>\n    1421:\t48 8b 8d 40 ff ff ff \tmov    -0xc0(%rbp),%rcx\n    1428:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    142f:\tba 04 00 00 00       \tmov    $0x4,%edx\n    1434:\t48 89 ce             \tmov    %rcx,%rsi\n    1437:\t48 89 c7             \tmov    %rax,%rdi\n    143a:\te8 00 00 00 00       \tcallq  143f <tidyDocParseFile+0x184>\n    143f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1442:\tc9                   \tleaveq \n    1443:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tidyDocParseFile(__int64 a1, const char *a2) {\n  int v2;\n  unsigned int v3;\n  struct stat <span class=\"supfact\">buf</span>;\n  __int64 v6;\n  FILE *stream;\n  unsigned int v8;\n  v8 = Number;\n  stream = fopen(a2, String);\n  memset(&<span class=\"supfact\">buf</span>, Number, sizeof(<span class=\"supfact\">buf</span>));\n  memset((void *)(a1 + Number), Number, Number);\n  if (stream && (unsigned int)prvTidy_cfgGetBool(a1, Number L)) {\n    v2 = fileno(stream);\n    if (fstat(v2, &<span class=\"supfact\">buf</span>) != Number) {\n      *(_QWORD *)(a1 + Number) = <span class=\"supfact\">buf</span>.st_atim.tv_sec;\n      *(_QWORD *)(a1 + Number) = <span class=\"supfact\">buf</span>.st_mtim.tv_sec;\n    }\n  }\n  if (stream) {\n    v3 = prvTidy_cfgGet(a1, Number L);\n    v6 = prvTidyFileInput(a1, stream, v3);\n    if (!v6) {\n      fclose(stream);\n      return v8;\n    }\n    v8 = prvTidyDocParseStream(a1, v6);\n    prvTidyfreeFileSource(v6 + Number, Number L);\n    prvTidyfreeStreamIn(v6);\n  } else {\n    prvTidyFileError(a1, a2, Number L);\n  }\n  return v8;\n}", "code_t": "int __cdecl tidyDocParseFile(TidyDocImpl *doc, ctmbstr filnam) {\n  int v2;\n  __int64 v3;\n  stat <span class=\"supfact\">sbuf</span>;\n  StreamIn *in;\n  FILE *fin;\n  int status;\n  status = Number;\n  fin = fopen(filnam, String);\n  memset(&<span class=\"supfact\">sbuf</span>, Number, sizeof(<span class=\"supfact\">sbuf</span>));\n  memset(&doc->filetimes, Number, sizeof(doc->filetimes));\n  if (fin && (unsigned int)prvTidy_cfgGetBool(doc, Number L)) {\n    v2 = fileno(fin);\n    if (fstat(v2, &<span class=\"supfact\">sbuf</span>) != Number) {\n      doc->filetimes.actime = <span class=\"supfact\">sbuf</span>.st_atim.tv_sec;\n      doc->filetimes.modtime = <span class=\"supfact\">sbuf</span>.st_mtim.tv_sec;\n    }\n  }\n  if (fin) {\n    v3 = (unsigned int)prvTidy_cfgGet(doc, Number L);\n    in = (StreamIn *)prvTidyFileInput(doc, fin, v3);\n    if (!in) {\n      fclose(fin);\n      return status;\n    }\n    status = prvTidyDocParseStream(doc, in);\n    prvTidyfreeFileSource(&in->source, Number L);\n    prvTidyfreeStreamIn(in);\n  } else {\n    prvTidyFileError(doc, filnam, Number L);\n  }\n  return status;\n}", "var": [{"name": "buf", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "buf", "ref_name": "sbuf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "baidang201", "repo_name": "NarutoFight", "path": "baidang201/NarutoFight/6ca03e68f4598f0dc6a9cead9434c09ba6ce7cfc057fd5e205e531aa3cc9c9d2", "path_in_repo": "baidang201/NarutoFight/external/emscripten/third_party/websockify/other/websockify.o", "objdump": "0000000000000bd1 <proxy_handler>:\n     bd1:\t55                   \tpush   %rbp\n     bd2:\t48 89 e5             \tmov    %rsp,%rbp\n     bd5:\t48 83 ec 30          \tsub    $0x30,%rsp\n     bd9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     bdd:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     be4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # beb <proxy_handler+0x1a>\n     beb:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n     bf1:\t85 c0                \ttest   %eax,%eax\n     bf3:\t75 5b                \tjne    c50 <proxy_handler+0x7f>\n     bf5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # bfc <proxy_handler+0x2b>\n     bfc:\t8b 90 10 01 00 00    \tmov    0x110(%rax),%edx\n     c02:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c09 <proxy_handler+0x38>\n     c09:\t48 8b 00             \tmov    (%rax),%rax\n     c0c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # c13 <proxy_handler+0x42>\n     c13:\t48 89 c7             \tmov    %rax,%rdi\n     c16:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c1b:\te8 00 00 00 00       \tcallq  c20 <proxy_handler+0x4f>\n     c20:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c27 <proxy_handler+0x56>\n     c27:\t8b 10                \tmov    (%rax),%edx\n     c29:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c30 <proxy_handler+0x5f>\n     c30:\t48 8b 00             \tmov    (%rax),%rax\n     c33:\t89 d1                \tmov    %edx,%ecx\n     c35:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # c3c <proxy_handler+0x6b>\n     c3c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # c43 <proxy_handler+0x72>\n     c43:\t48 89 c7             \tmov    %rax,%rdi\n     c46:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c4b:\te8 00 00 00 00       \tcallq  c50 <proxy_handler+0x7f>\n     c50:\tba 00 00 00 00       \tmov    $0x0,%edx\n     c55:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     c5a:\tbf 02 00 00 00       \tmov    $0x2,%edi\n     c5f:\te8 00 00 00 00       \tcallq  c64 <proxy_handler+0x93>\n     c64:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     c67:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     c6b:\t79 78                \tjns    ce5 <proxy_handler+0x114>\n     c6d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c74 <proxy_handler+0xa3>\n     c74:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n     c7a:\t85 c0                \ttest   %eax,%eax\n     c7c:\t0f 85 2e 02 00 00    \tjne    eb0 <proxy_handler+0x2df>\n     c82:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c89 <proxy_handler+0xb8>\n     c89:\t8b 90 10 01 00 00    \tmov    0x110(%rax),%edx\n     c8f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c96 <proxy_handler+0xc5>\n     c96:\t48 8b 00             \tmov    (%rax),%rax\n     c99:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # ca0 <proxy_handler+0xcf>\n     ca0:\t48 89 c7             \tmov    %rax,%rdi\n     ca3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ca8:\te8 00 00 00 00       \tcallq  cad <proxy_handler+0xdc>\n     cad:\te8 00 00 00 00       \tcallq  cb2 <proxy_handler+0xe1>\n     cb2:\t8b 00                \tmov    (%rax),%eax\n     cb4:\t89 c7                \tmov    %eax,%edi\n     cb6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     cbb:\te8 00 00 00 00       \tcallq  cc0 <proxy_handler+0xef>\n     cc0:\t89 c2                \tmov    %eax,%edx\n     cc2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cc9 <proxy_handler+0xf8>\n     cc9:\t48 8b 00             \tmov    (%rax),%rax\n     ccc:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # cd3 <proxy_handler+0x102>\n     cd3:\t48 89 c7             \tmov    %rax,%rdi\n     cd6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     cdb:\te8 00 00 00 00       \tcallq  ce0 <proxy_handler+0x10f>\n     ce0:\te9 cb 01 00 00       \tjmpq   eb0 <proxy_handler+0x2df>\n     ce5:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     ce9:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     cf0:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n     cf7:\t00 \n     cf8:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n     cfe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d05 <proxy_handler+0x134>\n     d05:\t8b 00                \tmov    (%rax),%eax\n     d07:\t0f b7 c0             \tmovzwl %ax,%eax\n     d0a:\t89 c7                \tmov    %eax,%edi\n     d0c:\te8 00 00 00 00       \tcallq  d11 <proxy_handler+0x140>\n     d11:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n     d15:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     d19:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n     d1d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d24 <proxy_handler+0x153>\n     d24:\t48 89 c6             \tmov    %rax,%rsi\n     d27:\t48 89 d7             \tmov    %rdx,%rdi\n     d2a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d2f:\te8 00 00 00 00       \tcallq  d34 <proxy_handler+0x163>\n     d34:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     d37:\t7d 6f                \tjge    da8 <proxy_handler+0x1d7>\n     d39:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d40 <proxy_handler+0x16f>\n     d40:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n     d46:\t85 c0                \ttest   %eax,%eax\n     d48:\t75 5e                \tjne    da8 <proxy_handler+0x1d7>\n     d4a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d51 <proxy_handler+0x180>\n     d51:\t8b 90 10 01 00 00    \tmov    0x110(%rax),%edx\n     d57:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d5e <proxy_handler+0x18d>\n     d5e:\t48 8b 00             \tmov    (%rax),%rax\n     d61:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d68 <proxy_handler+0x197>\n     d68:\t48 89 c7             \tmov    %rax,%rdi\n     d6b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d70:\te8 00 00 00 00       \tcallq  d75 <proxy_handler+0x1a4>\n     d75:\te8 00 00 00 00       \tcallq  d7a <proxy_handler+0x1a9>\n     d7a:\t8b 00                \tmov    (%rax),%eax\n     d7c:\t89 c7                \tmov    %eax,%edi\n     d7e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d83:\te8 00 00 00 00       \tcallq  d88 <proxy_handler+0x1b7>\n     d88:\t89 c2                \tmov    %eax,%edx\n     d8a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d91 <proxy_handler+0x1c0>\n     d91:\t48 8b 00             \tmov    (%rax),%rax\n     d94:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d9b <proxy_handler+0x1ca>\n     d9b:\t48 89 c7             \tmov    %rax,%rdi\n     d9e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     da3:\te8 00 00 00 00       \tcallq  da8 <proxy_handler+0x1d7>\n     da8:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n     dac:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     daf:\tba 10 00 00 00       \tmov    $0x10,%edx\n     db4:\t48 89 ce             \tmov    %rcx,%rsi\n     db7:\t89 c7                \tmov    %eax,%edi\n     db9:\te8 00 00 00 00       \tcallq  dbe <proxy_handler+0x1ed>\n     dbe:\t85 c0                \ttest   %eax,%eax\n     dc0:\t0f 89 80 00 00 00    \tjns    e46 <proxy_handler+0x275>\n     dc6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # dcd <proxy_handler+0x1fc>\n     dcd:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n     dd3:\t85 c0                \ttest   %eax,%eax\n     dd5:\t75 5e                \tjne    e35 <proxy_handler+0x264>\n     dd7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # dde <proxy_handler+0x20d>\n     dde:\t8b 90 10 01 00 00    \tmov    0x110(%rax),%edx\n     de4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # deb <proxy_handler+0x21a>\n     deb:\t48 8b 00             \tmov    (%rax),%rax\n     dee:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # df5 <proxy_handler+0x224>\n     df5:\t48 89 c7             \tmov    %rax,%rdi\n     df8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     dfd:\te8 00 00 00 00       \tcallq  e02 <proxy_handler+0x231>\n     e02:\te8 00 00 00 00       \tcallq  e07 <proxy_handler+0x236>\n     e07:\t8b 00                \tmov    (%rax),%eax\n     e09:\t89 c7                \tmov    %eax,%edi\n     e0b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e10:\te8 00 00 00 00       \tcallq  e15 <proxy_handler+0x244>\n     e15:\t89 c2                \tmov    %eax,%edx\n     e17:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e1e <proxy_handler+0x24d>\n     e1e:\t48 8b 00             \tmov    (%rax),%rax\n     e21:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # e28 <proxy_handler+0x257>\n     e28:\t48 89 c7             \tmov    %rax,%rdi\n     e2b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e30:\te8 00 00 00 00       \tcallq  e35 <proxy_handler+0x264>\n     e35:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     e38:\t89 c7                \tmov    %eax,%edi\n     e3a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e3f:\te8 00 00 00 00       \tcallq  e44 <proxy_handler+0x273>\n     e44:\teb 6b                \tjmp    eb1 <proxy_handler+0x2e0>\n     e46:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e4d <proxy_handler+0x27c>\n     e4d:\t8b 00                \tmov    (%rax),%eax\n     e4f:\t85 c0                \ttest   %eax,%eax\n     e51:\t74 2c                \tje     e7f <proxy_handler+0x2ae>\n     e53:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e5a <proxy_handler+0x289>\n     e5a:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n     e60:\t85 c0                \ttest   %eax,%eax\n     e62:\t75 1b                \tjne    e7f <proxy_handler+0x2ae>\n     e64:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e6b <proxy_handler+0x29a>\n     e6b:\t48 89 c6             \tmov    %rax,%rsi\n     e6e:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # e75 <proxy_handler+0x2a4>\n     e75:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e7a:\te8 00 00 00 00       \tcallq  e7f <proxy_handler+0x2ae>\n     e7f:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     e82:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     e86:\t89 d6                \tmov    %edx,%esi\n     e88:\t48 89 c7             \tmov    %rax,%rdi\n     e8b:\te8 00 00 00 00       \tcallq  e90 <proxy_handler+0x2bf>\n     e90:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     e93:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     e98:\t89 c7                \tmov    %eax,%edi\n     e9a:\te8 00 00 00 00       \tcallq  e9f <proxy_handler+0x2ce>\n     e9f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     ea2:\t89 c7                \tmov    %eax,%edi\n     ea4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ea9:\te8 00 00 00 00       \tcallq  eae <proxy_handler+0x2dd>\n     eae:\teb 01                \tjmp    eb1 <proxy_handler+0x2e0>\n     eb0:\t90                   \tnop\n     eb1:\tc9                   \tleaveq \n     eb2:\tc3                   \tretq   ", "code_s": "int __fastcall proxy_handler(__int64 a1) {\n  int result;\n  int *v2;\n  unsigned int v3;\n  int *v4;\n  unsigned int v5;\n  int *v6;\n  unsigned int v7;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  int fd;\n  fd = Number;\n  if (!settings[Number]) {\n    fprintf(stdout, String, settings[Number]);\n    fprintf(stdout, String, target_host, (unsigned int)target_port);\n  }\n  fd = socket(Number, Number, Number);\n  if (fd >= Number) {\n    *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_family = Number L;\n    *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = Number L;\n    *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(target_port);\n    if ((int)resolve_host(&<span class=\"supfact\">addr</span>.sa_data[Number], target_host) <\n            Number &&\n        !settings[Number]) {\n      fprintf(stderr, String, settings[Number]);\n      v4 = _errno_location();\n      v5 = (unsigned int)strerror(*v4);\n      fprintf(stderr, String, (const char *)v5);\n    }\n    if (connect(fd, &<span class=\"supfact\">addr</span>, Number) >= Number) {\n      if (settings[Number] && !settings[Number])\n        printf(String, traffic_legend);\n      do_proxy(a1, fd);\n      shutdown(fd, Number);\n      result = close(fd);\n    } else {\n      if (!settings[Number]) {\n        fprintf(stderr, String, settings[Number]);\n        v6 = _errno_location();\n        v7 = (unsigned int)strerror(*v6);\n        fprintf(stderr, String, (const char *)v7);\n      }\n      result = close(fd);\n    }\n  } else {\n    result = settings[Number];\n    if (!result) {\n      fprintf(stderr, String, settings[Number]);\n      v2 = _errno_location();\n      v3 = (unsigned int)strerror(*v2);\n      result = fprintf(stderr, String, (const char *)v3);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl proxy_handler(ws_ctx_t *ws_ctx) {\n  int *v1;\n  unsigned int v2;\n  int *v3;\n  unsigned int v4;\n  int *v5;\n  unsigned int v6;\n  sockaddr_in <span class=\"supfact\">taddr</span>;\n  int tsock;\n  tsock = Number;\n  if (!settings[Number]) {\n    fprintf(stdout, String, settings[Number]);\n    fprintf(stdout, String, target_host, (unsigned int)target_port);\n  }\n  tsock = socket(Number, Number, Number);\n  if (tsock >= Number) {\n    *(_QWORD *)&<span class=\"supfact\">taddr</span>.sin_family = Number L;\n    *(_QWORD *)<span class=\"supfact\">taddr</span>.sin_zero = Number L;\n    <span class=\"supfact\">taddr</span>.sin_port = htons(target_port);\n    if ((int)resolve_host(&<span class=\"supfact\">taddr</span>.sin_addr, target_host) <\n            Number &&\n        !settings[Number]) {\n      fprintf(stderr, String, settings[Number]);\n      v3 = _errno_location();\n      v4 = (unsigned int)strerror(*v3);\n      fprintf(stderr, String, (const char *)v4);\n    }\n    if (connect(tsock, (const struct sockaddr *)&<span class=\"supfact\">taddr</span>,\n                Number) >= Number) {\n      if (settings[Number] && !settings[Number])\n        printf(String, traffic_legend);\n      do_proxy(ws_ctx, tsock);\n      shutdown(tsock, Number);\n      close(tsock);\n    } else {\n      if (!settings[Number]) {\n        fprintf(stderr, String, settings[Number]);\n        v5 = _errno_location();\n        v6 = (unsigned int)strerror(*v5);\n        fprintf(stderr, String, (const char *)v6);\n      }\n      close(tsock);\n    }\n  } else if (!settings[Number]) {\n    fprintf(stderr, String, settings[Number]);\n    v1 = _errno_location();\n    v2 = (unsigned int)strerror(*v1);\n    fprintf(stderr, String, (const char *)v2);\n  }\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "pred_name": "server", "ref_name": "taddr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": true}, {"repo_owner": "avble", "repo_name": "pjproject-2.4", "path": "avble/pjproject-2.4/a74997ffd89fc7b55930f3e74afb05f28c979d6c9279b6e5094b0be4825027b4", "path_in_repo": "avble/pjproject-2.4/pjsip/build/output/pjsip-x86_64-unknown-linux-gnu/sip_auth_client.o", "objdump": "00000000000009d4 <respond_digest>:\n     9d4:\t55                   \tpush   %rbp\n     9d5:\t48 89 e5             \tmov    %rsp,%rbp\n     9d8:\t48 83 ec 50          \tsub    $0x50,%rsp\n     9dc:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     9e0:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     9e4:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     9e8:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n     9ec:\t4c 89 45 b8          \tmov    %r8,-0x48(%rbp)\n     9f0:\t4c 89 4d b0          \tmov    %r9,-0x50(%rbp)\n     9f4:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     9fb:\t00 \n     9fc:\t48 c7 45 f8 09 00 00 \tmovq   $0x9,-0x8(%rbp)\n     a03:\t00 \n     a04:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     a08:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n     a0f:\t48 85 c0             \ttest   %rax,%rax\n     a12:\t74 75                \tje     a89 <respond_digest+0xb5>\n     a14:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     a18:\t48 83 c0 78          \tadd    $0x78,%rax\n     a1c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a21:\t48 89 c7             \tmov    %rax,%rdi\n     a24:\te8 00 00 00 00       \tcallq  a29 <respond_digest+0x55>\n     a29:\t85 c0                \ttest   %eax,%eax\n     a2b:\t74 5c                \tje     a89 <respond_digest+0xb5>\n     a2d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     a31:\t48 8d 50 78          \tlea    0x78(%rax),%rdx\n     a35:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n     a39:\t48 89 c6             \tmov    %rax,%rsi\n     a3c:\t48 89 d7             \tmov    %rdx,%rdi\n     a3f:\te8 00 00 00 00       \tcallq  a44 <respond_digest+0x70>\n     a44:\t85 c0                \ttest   %eax,%eax\n     a46:\t74 41                \tje     a89 <respond_digest+0xb5>\n     a48:\te8 00 00 00 00       \tcallq  a4d <respond_digest+0x79>\n     a4d:\t83 f8 03             \tcmp    $0x3,%eax\n     a50:\t7e 2d                \tjle    a7f <respond_digest+0xab>\n     a52:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     a56:\t48 8b 50 78          \tmov    0x78(%rax),%rdx\n     a5a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     a5e:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n     a65:\t48 89 d1             \tmov    %rdx,%rcx\n     a68:\t48 89 c2             \tmov    %rax,%rdx\n     a6b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a70:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     a75:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a7a:\te8 00 00 00 00       \tcallq  a7f <respond_digest+0xab>\n     a7f:\tb8 5e 9c 02 00       \tmov    $0x29c5e,%eax\n     a84:\te9 2c 03 00 00       \tjmpq   db5 <respond_digest+0x3e1>\n     a89:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     a8d:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n     a91:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     a95:\t48 8d 48 40          \tlea    0x40(%rax),%rcx\n     a99:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a9d:\t48 89 ce             \tmov    %rcx,%rsi\n     aa0:\t48 89 c7             \tmov    %rax,%rdi\n     aa3:\te8 00 00 00 00       \tcallq  aa8 <respond_digest+0xd4>\n     aa8:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     aac:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     ab0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ab4:\t48 89 ce             \tmov    %rcx,%rsi\n     ab7:\t48 89 c7             \tmov    %rax,%rdi\n     aba:\te8 00 00 00 00       \tcallq  abf <respond_digest+0xeb>\n     abf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     ac3:\t48 8d 50 50          \tlea    0x50(%rax),%rdx\n     ac7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     acb:\t48 8d 48 50          \tlea    0x50(%rax),%rcx\n     acf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ad3:\t48 89 ce             \tmov    %rcx,%rsi\n     ad6:\t48 89 c7             \tmov    %rax,%rdi\n     ad9:\te8 00 00 00 00       \tcallq  ade <respond_digest+0x10a>\n     ade:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     ae2:\t48 8d 48 60          \tlea    0x60(%rax),%rcx\n     ae6:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n     aea:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     aee:\t48 89 ce             \tmov    %rcx,%rsi\n     af1:\t48 89 c7             \tmov    %rax,%rdi\n     af4:\te8 00 00 00 00       \tcallq  af9 <respond_digest+0x125>\n     af9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     afd:\t48 8d 50 78          \tlea    0x78(%rax),%rdx\n     b01:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b05:\t48 8d 88 80 00 00 00 \tlea    0x80(%rax),%rcx\n     b0c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b10:\t48 89 ce             \tmov    %rcx,%rsi\n     b13:\t48 89 c7             \tmov    %rax,%rdi\n     b16:\te8 00 00 00 00       \tcallq  b1b <respond_digest+0x147>\n     b1b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     b1f:\t48 8d 50 60          \tlea    0x60(%rax),%rdx\n     b23:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b27:\t48 8d 88 a0 00 00 00 \tlea    0xa0(%rax),%rcx\n     b2e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b32:\t48 89 ce             \tmov    %rcx,%rsi\n     b35:\t48 89 c7             \tmov    %rax,%rdi\n     b38:\te8 00 00 00 00       \tcallq  b3d <respond_digest+0x169>\n     b3d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b41:\tbe 20 00 00 00       \tmov    $0x20,%esi\n     b46:\t48 89 c7             \tmov    %rax,%rdi\n     b49:\te8 00 00 00 00       \tcallq  b4e <respond_digest+0x17a>\n     b4e:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     b52:\t48 89 42 70          \tmov    %rax,0x70(%rdx)\n     b56:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b5a:\t48 c7 40 78 20 00 00 \tmovq   $0x20,0x78(%rax)\n     b61:\t00 \n     b62:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     b66:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n     b6d:\t48 85 c0             \ttest   %rax,%rax\n     b70:\t0f 85 82 00 00 00    \tjne    bf8 <respond_digest+0x224>\n     b76:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     b7a:\t8b 40 30             \tmov    0x30(%rax),%eax\n     b7d:\t25 f0 00 00 00       \tand    $0xf0,%eax\n     b82:\t83 f8 10             \tcmp    $0x10,%eax\n     b85:\t75 2a                \tjne    bb1 <respond_digest+0x1dd>\n     b87:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     b8b:\t4c 8b 48 78          \tmov    0x78(%rax),%r9\n     b8f:\t48 8b 7d d0          \tmov    -0x30(%rbp),%rdi\n     b93:\t48 8b 4d 18          \tmov    0x18(%rbp),%rcx\n     b97:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     b9b:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n     b9f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ba3:\t49 89 f8             \tmov    %rdi,%r8\n     ba6:\t48 89 c7             \tmov    %rax,%rdi\n     ba9:\t41 ff d1             \tcallq  *%r9\n     bac:\te9 04 02 00 00       \tjmpq   db5 <respond_digest+0x3e1>\n     bb1:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     bb5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     bb9:\t48 8d 70 50          \tlea    0x50(%rax),%rsi\n     bbd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     bc1:\t48 83 c0 70          \tadd    $0x70,%rax\n     bc5:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     bc9:\t48 83 ec 08          \tsub    $0x8,%rsp\n     bcd:\tff 75 18             \tpushq  0x18(%rbp)\n     bd0:\tff 75 b8             \tpushq  -0x48(%rbp)\n     bd3:\t52                   \tpush   %rdx\n     bd4:\t49 89 c9             \tmov    %rcx,%r9\n     bd7:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     bdd:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     be2:\tba 00 00 00 00       \tmov    $0x0,%edx\n     be7:\t48 89 c7             \tmov    %rax,%rdi\n     bea:\te8 00 00 00 00       \tcallq  bef <respond_digest+0x21b>\n     bef:\t48 83 c4 20          \tadd    $0x20,%rsp\n     bf3:\te9 b8 01 00 00       \tjmpq   db0 <respond_digest+0x3dc>\n     bf8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     bfc:\t48 8d 90 88 00 00 00 \tlea    0x88(%rax),%rdx\n     c03:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c07:\t48 89 d6             \tmov    %rdx,%rsi\n     c0a:\t48 89 c7             \tmov    %rax,%rdi\n     c0d:\te8 de fc ff ff       \tcallq  8f0 <has_auth_qop>\n     c12:\t85 c0                \ttest   %eax,%eax\n     c14:\t0f 84 55 01 00 00    \tje     d6f <respond_digest+0x39b>\n     c1a:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     c1e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c25 <respond_digest+0x251>\n     c25:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # c2c <respond_digest+0x258>\n     c2c:\t48 89 81 b0 00 00 00 \tmov    %rax,0xb0(%rcx)\n     c33:\t48 89 91 b8 00 00 00 \tmov    %rdx,0xb8(%rcx)\n     c3a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c3e:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     c43:\t48 89 c7             \tmov    %rax,%rdi\n     c46:\te8 00 00 00 00       \tcallq  c4b <respond_digest+0x277>\n     c4b:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     c4f:\t48 89 82 c0 00 00 00 \tmov    %rax,0xc0(%rdx)\n     c56:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     c5a:\t48 8b 80 c0 00 00 00 \tmov    0xc0(%rax),%rax\n     c61:\t8b 4d 10             \tmov    0x10(%rbp),%ecx\n     c64:\tba 00 00 00 00       \tmov    $0x0,%edx\n     c69:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     c6e:\t48 89 c7             \tmov    %rax,%rdi\n     c71:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c76:\te8 00 00 00 00       \tcallq  c7b <respond_digest+0x2a7>\n     c7b:\t48 63 d0             \tmovslq %eax,%rdx\n     c7e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     c82:\t48 89 90 c8 00 00 00 \tmov    %rdx,0xc8(%rax)\n     c89:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n     c8e:\t74 2d                \tje     cbd <respond_digest+0x2e9>\n     c90:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     c94:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     c98:\t48 85 c0             \ttest   %rax,%rax\n     c9b:\t74 20                \tje     cbd <respond_digest+0x2e9>\n     c9d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     ca1:\t48 8d 88 90 00 00 00 \tlea    0x90(%rax),%rcx\n     ca8:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n     cac:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     cb0:\t48 89 ce             \tmov    %rcx,%rsi\n     cb3:\t48 89 c7             \tmov    %rax,%rdi\n     cb6:\te8 00 00 00 00       \tcallq  cbb <respond_digest+0x2e7>\n     cbb:\teb 2e                \tjmp    ceb <respond_digest+0x317>\n     cbd:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n     cc4:\t00 \n     cc5:\t48 c7 45 e8 06 00 00 \tmovq   $0x6,-0x18(%rbp)\n     ccc:\t00 \n     ccd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     cd1:\t48 8d 88 90 00 00 00 \tlea    0x90(%rax),%rcx\n     cd8:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     cdc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ce0:\t48 89 ce             \tmov    %rcx,%rsi\n     ce3:\t48 89 c7             \tmov    %rax,%rdi\n     ce6:\te8 00 00 00 00       \tcallq  ceb <respond_digest+0x317>\n     ceb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     cef:\t8b 40 30             \tmov    0x30(%rax),%eax\n     cf2:\t25 f0 00 00 00       \tand    $0xf0,%eax\n     cf7:\t83 f8 10             \tcmp    $0x10,%eax\n     cfa:\t75 2a                \tjne    d26 <respond_digest+0x352>\n     cfc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     d00:\t4c 8b 48 78          \tmov    0x78(%rax),%r9\n     d04:\t48 8b 7d d0          \tmov    -0x30(%rbp),%rdi\n     d08:\t48 8b 4d 18          \tmov    0x18(%rbp),%rcx\n     d0c:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     d10:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n     d14:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d18:\t49 89 f8             \tmov    %rdi,%r8\n     d1b:\t48 89 c7             \tmov    %rax,%rdi\n     d1e:\t41 ff d1             \tcallq  *%r9\n     d21:\te9 8f 00 00 00       \tjmpq   db5 <respond_digest+0x3e1>\n     d26:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n     d2a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     d2e:\t48 8d 90 c0 00 00 00 \tlea    0xc0(%rax),%rdx\n     d35:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     d39:\t48 8d 70 50          \tlea    0x50(%rax),%rsi\n     d3d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     d41:\t48 8d 78 70          \tlea    0x70(%rax),%rdi\n     d45:\t4c 8b 45 c0          \tmov    -0x40(%rbp),%r8\n     d49:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     d4d:\t48 83 ec 08          \tsub    $0x8,%rsp\n     d51:\tff 75 18             \tpushq  0x18(%rbp)\n     d54:\tff 75 b8             \tpushq  -0x48(%rbp)\n     d57:\t51                   \tpush   %rcx\n     d58:\t4d 89 c1             \tmov    %r8,%r9\n     d5b:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     d61:\t48 89 c1             \tmov    %rax,%rcx\n     d64:\te8 00 00 00 00       \tcallq  d69 <respond_digest+0x395>\n     d69:\t48 83 c4 20          \tadd    $0x20,%rsp\n     d6d:\teb 41                \tjmp    db0 <respond_digest+0x3dc>\n     d6f:\te8 00 00 00 00       \tcallq  d74 <respond_digest+0x3a0>\n     d74:\t83 f8 03             \tcmp    $0x3,%eax\n     d77:\t7e 30                \tjle    da9 <respond_digest+0x3d5>\n     d79:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     d7d:\t48 8b 90 88 00 00 00 \tmov    0x88(%rax),%rdx\n     d84:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     d88:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n     d8f:\t48 89 d1             \tmov    %rdx,%rcx\n     d92:\t48 89 c2             \tmov    %rax,%rdx\n     d95:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d9a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     d9f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     da4:\te8 00 00 00 00       \tcallq  da9 <respond_digest+0x3d5>\n     da9:\tb8 5f 9c 02 00       \tmov    $0x29c5f,%eax\n     dae:\teb 05                \tjmp    db5 <respond_digest+0x3e1>\n     db0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     db5:\tc9                   \tleaveq \n     db6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall respond_digest(__int64 a1, __int64 a2, _QWORD *a3,\n                                  _QWORD *a4, __int64 a5, _QWORD *a6,\n                                  unsigned int a7, _QWORD *a8) {\n  __int64 v9;\n  __int64 <span class=\"supfact\">v14</span>[Number];\n  __int64 <span class=\"supfact\">v15</span>[Number];\n  <span class=\"supfact\">v15</span>[Number] = (__int64)String;\n  <span class=\"supfact\">v15</span>[Number] = Number L;\n  if (a3[Number] && (unsigned int)pj_stricmp(a3 + Number, &pjsip_MD5_STR) &&\n      (unsigned int)pj_stricmp(a3 + Number, <span class=\"supfact\">v15</span>)) {\n    if ((int)pj_log_get_level() > Number)\n      pj_log_4(String, String, a3[Number], a3[Number]);\n    return Number L;\n  }\n  pj_strdup(a1, a2 + Number, a5 + Number);\n  pj_strdup(a1, a2, a3);\n  pj_strdup(a1, a2 + Number, a3 + Number);\n  pj_strdup(a1, a2 + Number, a4);\n  pj_strdup(a1, a2 + Number, a3 + Number);\n  pj_strdup(a1, a2 + Number, a3 + Number);\n  *(_QWORD *)(a2 + Number) = pj_pool_alloc(a1, Number L);\n  *(_QWORD *)(a2 + Number) = Number L;\n  if (!a3[Number]) {\n    if ((*(_DWORD *)(a5 + Number) & Number) == Number)\n      return (*(__int64(__fastcall **)(__int64, _QWORD *, __int64, _QWORD *,\n                                       __int64))(a5 + Number))(a1, a3, a5, a8,\n                                                               a2);\n    pjsip_auth_create_digest(a2 + Number, (_QWORD *)(a2 + Number), Number L,\n                             Number L, Number L, a4, a3, a5, a8);\n    return Number L;\n  }\n  if ((unsigned int)has_auth_qop(a1, (__int64)(a3 + Number))) {\n    v9 = pjsip_AUTH_STR[Number];\n    *(_QWORD *)(a2 + Number) = pjsip_AUTH_STR[Number];\n    *(_QWORD *)(a2 + Number) = v9;\n    *(_QWORD *)(a2 + Number) = pj_pool_alloc(a1, Number L);\n    *(_QWORD *)(a2 + Number) =\n        snprintf(*(char **)(a2 + Number), Number, String, a7);\n    if (a6 && a6[Number]) {\n      pj_strdup(a1, a2 + Number, a6);\n    } else {\n      <span class=\"supfact\">v14</span>[Number] = (__int64)String;\n      <span class=\"supfact\">v14</span>[Number] = Number L;\n      pj_strdup(a1, a2 + Number, <span class=\"supfact\">v14</span>);\n    }\n    if ((*(_DWORD *)(a5 + Number) & Number) == Number)\n      return (*(__int64(__fastcall **)(__int64, _QWORD *, __int64, _QWORD *,\n                                       __int64))(a5 + Number))(a1, a3, a5, a8,\n                                                               a2);\n    pjsip_auth_create_digest(a2 + Number, (_QWORD *)(a2 + Number),\n                             (_QWORD *)(a2 + Number), a6, pjsip_AUTH_STR, a4,\n                             a3, a5, a8);\n    return Number L;\n  }\n  if ((int)pj_log_get_level() > Number)\n    pj_log_4(String, String, a3[Number], a3[Number]);\n  return Number L;\n}", "code_t": "pj_status_t __cdecl respond_digest(pj_pool_t_0 *pool,\n                                   pjsip_digest_credential_0 *cred,\n                                   const pjsip_digest_challenge_0 *chal,\n                                   const pj_str_t_0 *uri,\n                                   const pjsip_cred_info_0 *cred_info,\n                                   const pj_str_t_0 *cnonce, pj_uint32_t nc,\n                                   const pj_str_t_0 *method) {\n  pj_ssize_t v9;\n  pj_str_t_0 <span class=\"supfact\">dummy_cnonce</span>;\n  pj_str_t_0 <span class=\"supfact\">pjsip_AKAv1_MD5_STR</span>;\n  <span class=\"supfact\">pjsip_AKAv1_MD5_STR</span>.ptr = String;\n  <span class=\"supfact\">pjsip_AKAv1_MD5_STR</span>.slen = Number L;\n  if (chal->algorithm.slen &&\n      (unsigned int)pj_stricmp(&chal->algorithm, &pjsip_MD5_STR) &&\n      (unsigned int)pj_stricmp(&chal->algorithm,\n                               &<span class=\"supfact\">pjsip_AKAv1_MD5_STR</span>)) {\n    if ((int)pj_log_get_level() > Number)\n      pj_log_4(String, String, chal->algorithm.slen, chal->algorithm.ptr);\n    return Number;\n  }\n  pj_strdup(pool, &cred->username, &cred_info->username);\n  pj_strdup(pool, cred, chal);\n  pj_strdup(pool, &cred->nonce, &chal->nonce);\n  pj_strdup(pool, &cred->uri, uri);\n  pj_strdup(pool, &cred->algorithm, &chal->algorithm);\n  pj_strdup(pool, &cred->opaque, &chal->opaque);\n  cred->response.ptr = (char *)pj_pool_alloc(pool, Number L);\n  cred->response.slen = Number L;\n  if (!chal->qop.slen) {\n    if ((cred_info->data_type & Number) == Number)\n      return cred_info->ext.aka.cb(pool, chal, cred_info, method, cred);\n    pjsip_auth_create_digest(&cred->response, &cred->nonce, Number L, Number L,\n                             Number L, uri, &chal->realm, cred_info, method);\n    return Number;\n  }\n  if (has_auth_qop(pool, &chal->qop)) {\n    v9 = pjsip_AUTH_STR.slen;\n    cred->qop.ptr = pjsip_AUTH_STR.ptr;\n    cred->qop.slen = v9;\n    cred->nc.ptr = (char *)pj_pool_alloc(pool, Number L);\n    cred->nc.slen = snprintf(cred->nc.ptr, Number, String, nc);\n    if (cnonce && cnonce->slen) {\n      pj_strdup(pool, &cred->cnonce, cnonce);\n    } else {\n      <span class=\"supfact\">dummy_cnonce</span>.ptr = String;\n      <span class=\"supfact\">dummy_cnonce</span>.slen = Number L;\n      pj_strdup(pool, &cred->cnonce, &<span class=\"supfact\">dummy_cnonce</span>);\n    }\n    if ((cred_info->data_type & Number) == Number)\n      return cred_info->ext.aka.cb(pool, chal, cred_info, method, cred);\n    pjsip_auth_create_digest(&cred->response, &cred->nonce, &cred->nc, cnonce,\n                             &pjsip_AUTH_STR, uri, &chal->realm, cred_info,\n                             method);\n    return Number;\n  }\n  if ((int)pj_log_get_level() > Number)\n    pj_log_4(String, String, chal->qop.slen, chal->qop.ptr);\n  return Number;\n}", "var": [{"name": "v14", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "pred_name": "__unk__", "ref_name": "dummy_cnonce", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}, {"name": "v15", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "pred_name": "__unk__", "ref_name": "pjsip_AKAv1_MD5_STR", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "themathpath", "repo_name": "lasvm", "path": "themathpath/lasvm/080e3565875ec6926977cb57d15b8f0ce76c02975f1b1f288e72f96b8553347c", "path_in_repo": "themathpath/lasvm//la_svm", "objdump": "0000000000406140 <_Z24lasvm_vector_dot_productP14lasvm_vector_sS0_>:\n  406140:\t8b 0e                \tmov    (%rsi),%ecx\n  406142:\t39 0f                \tcmp    %ecx,(%rdi)\n  406144:\t0f 4e 0f             \tcmovle (%rdi),%ecx\n  406147:\t85 c9                \ttest   %ecx,%ecx\n  406149:\t7e 6d                \tjle    4061b8 <_Z24lasvm_vector_dot_productP14lasvm_vector_sS0_+0x78>\n  40614b:\t83 f9 01             \tcmp    $0x1,%ecx\n  40614e:\t74 6d                \tje     4061bd <_Z24lasvm_vector_dot_productP14lasvm_vector_sS0_+0x7d>\n  406150:\t89 ca                \tmov    %ecx,%edx\n  406152:\tb8 08 00 00 00       \tmov    $0x8,%eax\n  406157:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40615b:\td1 ea                \tshr    %edx\n  40615d:\t48 c1 e2 04          \tshl    $0x4,%rdx\n  406161:\t48 83 c2 08          \tadd    $0x8,%rdx\n  406165:\t0f 1f 00             \tnopl   (%rax)\n  406168:\t66 0f 10 0c 07       \tmovupd (%rdi,%rax,1),%xmm1\n  40616d:\t66 0f 10 1c 06       \tmovupd (%rsi,%rax,1),%xmm3\n  406172:\t48 83 c0 10          \tadd    $0x10,%rax\n  406176:\t66 0f 59 cb          \tmulpd  %xmm3,%xmm1\n  40617a:\t66 0f 28 d1          \tmovapd %xmm1,%xmm2\n  40617e:\t66 0f 15 c9          \tunpckhpd %xmm1,%xmm1\n  406182:\tf2 0f 58 d0          \taddsd  %xmm0,%xmm2\n  406186:\t66 0f 28 c1          \tmovapd %xmm1,%xmm0\n  40618a:\tf2 0f 58 c2          \taddsd  %xmm2,%xmm0\n  40618e:\t48 39 c2             \tcmp    %rax,%rdx\n  406191:\t75 d5                \tjne    406168 <_Z24lasvm_vector_dot_productP14lasvm_vector_sS0_+0x28>\n  406193:\t89 c8                \tmov    %ecx,%eax\n  406195:\t83 e0 fe             \tand    $0xfffffffe,%eax\n  406198:\t83 e1 01             \tand    $0x1,%ecx\n  40619b:\t74 13                \tje     4061b0 <_Z24lasvm_vector_dot_productP14lasvm_vector_sS0_+0x70>\n  40619d:\t48 98                \tcltq   \n  40619f:\tf2 0f 10 4c c6 08    \tmovsd  0x8(%rsi,%rax,8),%xmm1\n  4061a5:\tf2 0f 59 4c c7 08    \tmulsd  0x8(%rdi,%rax,8),%xmm1\n  4061ab:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n  4061af:\tc3                   \tretq   \n  4061b0:\tc3                   \tretq   \n  4061b1:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n  4061b8:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  4061bc:\tc3                   \tretq   \n  4061bd:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  4061c1:\t31 c0                \txor    %eax,%eax\n  4061c3:\teb d8                \tjmp    40619d <_Z24lasvm_vector_dot_productP14lasvm_vector_sS0_+0x5d>\n  4061c5:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n  4061cc:\t00 00 00 00 ", "code_s": "double __fastcall lasvm_vector_dot_product(int *a1, int *a2) {\n  int v2;\n  __int64 v3;\n  double result;\n  __m128d <span class=\"supfact\">v5</span>;\n  __m128d <span class=\"supfact\">v6</span>;\n  __m128d <span class=\"supfact\">v7</span>;\n  signed int v8;\n  v2 = *a2;\n  if (*a1 <= *a2)\n    v2 = *a1;\n  if (v2 <= Number)\n    return Number;\n  if (v2 == Number) {\n    result = Number;\n    v8 = Number;\n    return result + *(double *)&a2[Number * v8 + Number] *\n                        *(double *)&a1[Number * v8 + Number];\n  }\n  v3 = Number L;\n  result = Number;\n  do {\n    <span class=\"supfact\">v5</span> = *(__m128d *)&a1[(unsigned __int64)v3 / Number];\n    <span class=\"supfact\">v6</span> = *(__m128d *)&a2[(unsigned __int64)v3 / Number];\n    v3 += Number L;\n    <span class=\"supfact\">v7</span> = _mm_mul_pd(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>);\n    result = _mm_unpackhi_pd(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v7</span>)\n                 .m128d_f64[Number] +\n             <span class=\"supfact\">v7</span>.m128d_f64[Number] + result;\n  } while (Number L * ((unsigned int)v2 >> Number) + Number != v3);\n  v8 = v2 & Number;\n  if ((v2 & Number) != Number)\n    return result + *(double *)&a2[Number * v8 + Number] *\n                        *(double *)&a1[Number * v8 + Number];\n  return result;\n}", "code_t": "double __fastcall lasvm_vector_dot_product(int *a1, int *a2) {\n  int v2;\n  __int64 v3;\n  double result;\n  __m128d <span class=\"supfact\">v5</span>;\n  __m128d <span class=\"supfact\">v6</span>;\n  __m128d <span class=\"supfact\">v7</span>;\n  signed int v8;\n  v2 = *a2;\n  if (*a1 <= *a2)\n    v2 = *a1;\n  if (v2 <= Number)\n    return Number;\n  if (v2 == Number) {\n    result = Number;\n    v8 = Number;\n    return result + *(double *)&a2[Number * v8 + Number] *\n                        *(double *)&a1[Number * v8 + Number];\n  }\n  v3 = Number L;\n  result = Number;\n  do {\n    <span class=\"supfact\">v5</span> = *(__m128d *)&a1[(unsigned __int64)v3 / Number];\n    <span class=\"supfact\">v6</span> = *(__m128d *)&a2[(unsigned __int64)v3 / Number];\n    v3 += Number L;\n    <span class=\"supfact\">v7</span> = _mm_mul_pd(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>);\n    result = _mm_unpackhi_pd(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v7</span>)\n                 .m128d_f64[Number] +\n             <span class=\"supfact\">v7</span>.m128d_f64[Number] + result;\n  } while (Number L * ((unsigned int)v2 >> Number) + Number != v3);\n  v8 = v2 & Number;\n  if ((v2 & Number) != Number)\n    return result + *(double *)&a2[Number * v8 + Number] *\n                        *(double *)&a1[Number * v8 + Number];\n  return result;\n}", "var": [{"name": "v5", "type": "struct __m128d { double[2] m128d_f64; }", "pred_name": "v5", "ref_name": "v5", "ref_type": "struct __m128d { double[2] m128d_f64; }"}, {"name": "v6", "type": "struct __m128d { double[2] m128d_f64; }", "pred_name": "v6", "ref_name": "v6", "ref_type": "struct __m128d { double[2] m128d_f64; }"}, {"name": "v7", "type": "struct __m128d { double[2] m128d_f64; }", "pred_name": "v7", "ref_name": "v7", "ref_type": "struct __m128d { double[2] m128d_f64; }"}], "body_in_train": false}, {"repo_owner": "DouglasSSilva", "repo_name": "QCADesigner", "path": "DouglasSSilva/QCADesigner/9f94081caccbd4c1f368d7e61c45a8d9bdc6700e411bb47a11f8772c3f3b5bd7", "path_in_repo": "DouglasSSilva/QCADesigner//src/objects/graph_dialog-QCADLabel.o", "objdump": "000000000000052a <draw>:\n     52a:\t55                   \tpush   %rbp\n     52b:\t48 89 e5             \tmov    %rsp,%rbp\n     52e:\t41 55                \tpush   %r13\n     530:\t41 54                \tpush   %r12\n     532:\t53                   \tpush   %rbx\n     533:\t48 83 ec 78          \tsub    $0x78,%rsp\n     537:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n     53b:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n     53f:\t89 95 7c ff ff ff    \tmov    %edx,-0x84(%rbp)\n     545:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n     54c:\t00 \n     54d:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n     554:\t00 \n     555:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n     55c:\t00 \n     55d:\t48 c7 45 b8 00 00 00 \tmovq   $0x0,-0x48(%rbp)\n     564:\t00 \n     565:\t48 c7 45 a0 00 00 00 \tmovq   $0x0,-0x60(%rbp)\n     56c:\t00 \n     56d:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n     574:\t00 \n     575:\t48 c7 45 90 00 00 00 \tmovq   $0x0,-0x70(%rbp)\n     57c:\t00 \n     57d:\t48 c7 45 98 00 00 00 \tmovq   $0x0,-0x68(%rbp)\n     584:\t00 \n     585:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n     58c:\t00 \n     58d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     592:\te8 00 00 00 00       \tcallq  597 <draw+0x6d>\n     597:\t48 89 c2             \tmov    %rax,%rdx\n     59a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     59e:\t48 89 d6             \tmov    %rdx,%rsi\n     5a1:\t48 89 c7             \tmov    %rax,%rdi\n     5a4:\te8 00 00 00 00       \tcallq  5a9 <draw+0x7f>\n     5a9:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     5ad:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     5b1:\t8b 40 60             \tmov    0x60(%rax),%eax\n     5b4:\t85 c0                \ttest   %eax,%eax\n     5b6:\t74 0c                \tje     5c4 <draw+0x9a>\n     5b8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     5bc:\t48 89 c7             \tmov    %rax,%rdi\n     5bf:\te8 00 00 00 00       \tcallq  5c4 <draw+0x9a>\n     5c4:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     5c8:\t48 8d 50 38          \tlea    0x38(%rax),%rdx\n     5cc:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     5d0:\t48 89 c6             \tmov    %rax,%rsi\n     5d3:\t48 89 d7             \tmov    %rdx,%rdi\n     5d6:\te8 00 00 00 00       \tcallq  5db <draw+0xb1>\n     5db:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     5df:\t48 8d 50 0c          \tlea    0xc(%rax),%rdx\n     5e3:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     5e7:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n     5eb:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     5ef:\t48 89 ce             \tmov    %rcx,%rsi\n     5f2:\t48 89 c7             \tmov    %rax,%rdi\n     5f5:\te8 00 00 00 00       \tcallq  5fa <draw+0xd0>\n     5fa:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n     5fe:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n     602:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     606:\t48 89 ce             \tmov    %rcx,%rsi\n     609:\t48 89 c7             \tmov    %rax,%rdi\n     60c:\te8 00 00 00 00       \tcallq  611 <draw+0xe7>\n     611:\t85 c0                \ttest   %eax,%eax\n     613:\t0f 84 80 02 00 00    \tje     899 <draw+0x36f>\n     619:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     61d:\t48 89 c7             \tmov    %rax,%rdi\n     620:\te8 00 00 00 00       \tcallq  625 <draw+0xfb>\n     625:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     629:\t8b 95 7c ff ff ff    \tmov    -0x84(%rbp),%edx\n     62f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     633:\t89 d6                \tmov    %edx,%esi\n     635:\t48 89 c7             \tmov    %rax,%rdi\n     638:\te8 00 00 00 00       \tcallq  63d <draw+0x113>\n     63d:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n     641:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     645:\t48 89 d6             \tmov    %rdx,%rsi\n     648:\t48 89 c7             \tmov    %rax,%rdi\n     64b:\te8 00 00 00 00       \tcallq  650 <draw+0x126>\n     650:\t83 bd 7c ff ff ff 00 \tcmpl   $0x0,-0x84(%rbp)\n     657:\t0f 85 99 00 00 00    \tjne    6f6 <draw+0x1cc>\n     65d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     661:\t8b 40 28             \tmov    0x28(%rax),%eax\n     664:\t85 c0                \ttest   %eax,%eax\n     666:\t74 0f                \tje     677 <draw+0x14d>\n     668:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     66c:\t48 8b 00             \tmov    (%rax),%rax\n     66f:\t48 05 20 01 00 00    \tadd    $0x120,%rax\n     675:\teb 08                \tjmp    67f <draw+0x155>\n     677:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     67b:\t48 83 c0 2c          \tadd    $0x2c,%rax\n     67f:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     683:\t48 89 c6             \tmov    %rax,%rsi\n     686:\t48 89 d7             \tmov    %rdx,%rdi\n     689:\te8 00 00 00 00       \tcallq  68e <draw+0x164>\n     68e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     692:\t4c 8b 60 58          \tmov    0x58(%rax),%r12\n     696:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n     699:\t44 8d 68 02          \tlea    0x2(%rax),%r13d\n     69d:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n     6a0:\t8d 58 02             \tlea    0x2(%rax),%ebx\n     6a3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6aa <draw+0x180>\n     6aa:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n     6af:\te8 00 00 00 00       \tcallq  6b4 <draw+0x18a>\n     6b4:\t89 c6                \tmov    %eax,%esi\n     6b6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     6bb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6c0:\te8 00 00 00 00       \tcallq  6c5 <draw+0x19b>\n     6c5:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     6c9:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     6cd:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n     6d1:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     6d5:\t4d 89 e1             \tmov    %r12,%r9\n     6d8:\t45 89 e8             \tmov    %r13d,%r8d\n     6db:\t89 d9                \tmov    %ebx,%ecx\n     6dd:\t48 89 c7             \tmov    %rax,%rdi\n     6e0:\te8 00 00 00 00       \tcallq  6e5 <draw+0x1bb>\n     6e5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     6e9:\t48 89 c7             \tmov    %rax,%rdi\n     6ec:\te8 00 00 00 00       \tcallq  6f1 <draw+0x1c7>\n     6f1:\te9 51 01 00 00       \tjmpq   847 <draw+0x31d>\n     6f6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     6fa:\t8b 40 64             \tmov    0x64(%rax),%eax\n     6fd:\t85 c0                \ttest   %eax,%eax\n     6ff:\t0f 84 02 01 00 00    \tje     807 <draw+0x2dd>\n     705:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n     70c:\t00 \n     70d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     711:\tc7 40 64 00 00 00 00 \tmovl   $0x0,0x64(%rax)\n     718:\t8b 4d 9c             \tmov    -0x64(%rbp),%ecx\n     71b:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n     71e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     722:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     726:\t48 8b 75 80          \tmov    -0x80(%rbp),%rsi\n     72a:\t41 b8 ff ff ff ff    \tmov    $0xffffffff,%r8d\n     730:\t48 89 c7             \tmov    %rax,%rdi\n     733:\te8 00 00 00 00       \tcallq  738 <draw+0x20e>\n     738:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     73c:\t48 89 42 68          \tmov    %rax,0x68(%rdx)\n     740:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     744:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     748:\t48 89 c7             \tmov    %rax,%rdi\n     74b:\te8 00 00 00 00       \tcallq  750 <draw+0x226>\n     750:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     754:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     758:\t48 8b 00             \tmov    (%rax),%rax\n     75b:\t48 89 c7             \tmov    %rax,%rdi\n     75e:\te8 00 00 00 00       \tcallq  763 <draw+0x239>\n     763:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     767:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     76b:\t8b 40 28             \tmov    0x28(%rax),%eax\n     76e:\t85 c0                \ttest   %eax,%eax\n     770:\t74 0f                \tje     781 <draw+0x257>\n     772:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     776:\t48 8b 00             \tmov    (%rax),%rax\n     779:\t48 05 20 01 00 00    \tadd    $0x120,%rax\n     77f:\teb 08                \tjmp    789 <draw+0x25f>\n     781:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     785:\t48 83 c0 2c          \tadd    $0x2c,%rax\n     789:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n     78d:\t48 89 c6             \tmov    %rax,%rsi\n     790:\t48 89 d7             \tmov    %rdx,%rdi\n     793:\te8 00 00 00 00       \tcallq  798 <draw+0x26e>\n     798:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     79c:\t48 8b 58 58          \tmov    0x58(%rax),%rbx\n     7a0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7a7 <draw+0x27d>\n     7a7:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n     7ac:\te8 00 00 00 00       \tcallq  7b1 <draw+0x287>\n     7b1:\t89 c6                \tmov    %eax,%esi\n     7b3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     7b8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     7bd:\te8 00 00 00 00       \tcallq  7c2 <draw+0x298>\n     7c2:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     7c6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     7ca:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     7ce:\t48 8b 00             \tmov    (%rax),%rax\n     7d1:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     7d5:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n     7d9:\t49 89 d9             \tmov    %rbx,%r9\n     7dc:\t41 b8 02 00 00 00    \tmov    $0x2,%r8d\n     7e2:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n     7e7:\t48 89 c7             \tmov    %rax,%rdi\n     7ea:\te8 00 00 00 00       \tcallq  7ef <draw+0x2c5>\n     7ef:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     7f3:\t48 89 c7             \tmov    %rax,%rdi\n     7f6:\te8 00 00 00 00       \tcallq  7fb <draw+0x2d1>\n     7fb:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     7ff:\t48 89 c7             \tmov    %rax,%rdi\n     802:\te8 00 00 00 00       \tcallq  807 <draw+0x2dd>\n     807:\t44 8b 45 9c          \tmov    -0x64(%rbp),%r8d\n     80b:\t8b 7d 98             \tmov    -0x68(%rbp),%edi\n     80e:\t8b 4d b4             \tmov    -0x4c(%rbp),%ecx\n     811:\t44 8b 4d b0          \tmov    -0x50(%rbp),%r9d\n     815:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     819:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     81d:\t48 8b 10             \tmov    (%rax),%rdx\n     820:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n     824:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     828:\t48 83 ec 08          \tsub    $0x8,%rsp\n     82c:\t41 50                \tpush   %r8\n     82e:\t57                   \tpush   %rdi\n     82f:\t51                   \tpush   %rcx\n     830:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     836:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     83b:\t48 89 c7             \tmov    %rax,%rdi\n     83e:\te8 00 00 00 00       \tcallq  843 <draw+0x319>\n     843:\t48 83 c4 20          \tadd    $0x20,%rsp\n     847:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     84b:\t8b 40 28             \tmov    0x28(%rax),%eax\n     84e:\t85 c0                \ttest   %eax,%eax\n     850:\t74 39                \tje     88b <draw+0x361>\n     852:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     855:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n     858:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n     85b:\t44 8d 40 ff          \tlea    -0x1(%rax),%r8d\n     85f:\t8b 7d b4             \tmov    -0x4c(%rbp),%edi\n     862:\t8b 55 b0             \tmov    -0x50(%rbp),%edx\n     865:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n     869:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     86d:\t48 83 ec 08          \tsub    $0x8,%rsp\n     871:\t51                   \tpush   %rcx\n     872:\t45 89 c1             \tmov    %r8d,%r9d\n     875:\t41 89 f8             \tmov    %edi,%r8d\n     878:\t89 d1                \tmov    %edx,%ecx\n     87a:\tba 00 00 00 00       \tmov    $0x0,%edx\n     87f:\t48 89 c7             \tmov    %rax,%rdi\n     882:\te8 00 00 00 00       \tcallq  887 <draw+0x35d>\n     887:\t48 83 c4 10          \tadd    $0x10,%rsp\n     88b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     88f:\t48 89 c7             \tmov    %rax,%rdi\n     892:\te8 00 00 00 00       \tcallq  897 <draw+0x36d>\n     897:\teb 01                \tjmp    89a <draw+0x370>\n     899:\t90                   \tnop\n     89a:\t48 8d 65 e8          \tlea    -0x18(%rbp),%rsp\n     89e:\t5b                   \tpop    %rbx\n     89f:\t41 5c                \tpop    %r12\n     8a1:\t41 5d                \tpop    %r13\n     8a3:\t5d                   \tpop    %rbp\n     8a4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall draw(__int64 a1, __int64 a2, unsigned int a3) {\n  __int64 v3;\n  __int64 result;\n  __int64 v5;\n  __int64 v6;\n  unsigned int v7;\n  unsigned int v8;\n  unsigned int v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  unsigned int v13;\n  __int64 <span class=\"supfact\">v15</span>;\n  __int64 v16;\n  __int64 <span class=\"supfact\">v17</span>;\n  __int64 v18;\n  __int64 <span class=\"supfact\">v19</span>;\n  __int64 v20;\n  __int64 v21;\n  __int64 v22;\n  __int64 v23;\n  __int64 v24;\n  v24 = Number L;\n  v23 = Number L;\n  <span class=\"supfact\">v19</span> = Number L;\n  v20 = Number L;\n  <span class=\"supfact\">v17</span> = Number L;\n  v18 = Number L;\n  <span class=\"supfact\">v15</span> = Number L;\n  v16 = Number L;\n  v3 = qcad_label_get_type(a1);\n  v22 = g_type_check_instance_cast(a1, v3);\n  if (*(_DWORD *)(v22 + Number))\n    qcad_label_shrinkwrap(v22);\n  world_to_real_rect(a1 + Number, &<span class=\"supfact\">v19</span>);\n  gdk_drawable_get_size(a2, &v18, (char *)&v18 + Number);\n  result = gdk_rectangle_intersect(&<span class=\"supfact\">v19</span>, &<span class=\"supfact\">v17</span>,\n                                   &<span class=\"supfact\">v15</span>);\n  if ((_DWORD)result) {\n    v24 = gdk_gc_new(a2);\n    gdk_gc_set_function(v24, a3);\n    gdk_gc_set_clip_rectangle(v24, &<span class=\"supfact\">v19</span>);\n    if (a3) {\n      if (*(_DWORD *)(v22 + Number)) {\n        v21 = Number L;\n        *(_DWORD *)(v22 + Number) = Number;\n        v10 = exp_pixmap_cond_new(*(_QWORD *)(v22 + Number), a2,\n                                  (unsigned int)v16, HIDWORD(v16), Number);\n        *(_QWORD *)(v22 + Number) = v10;\n        exp_pixmap_clean(*(_QWORD *)(v22 + Number));\n        v21 = gdk_gc_new(**(_QWORD **)(v22 + Number));\n        if (*(_DWORD *)(a1 + Number))\n          v11 = *(_QWORD *)a1 + Number L;\n        else\n          v11 = a1 + Number;\n        gdk_gc_set_foreground(v21, v11);\n        v12 = *(_QWORD *)(v22 + Number);\n        v13 = world_to_real_cy(Number);\n        v23 = g_strdup_printf(String, v13);\n        draw_string(**(_QWORD **)(v22 + Number), v21, v23, Number L, Number L,\n                    v12);\n        g_free(v23);\n        g_object_unref(v21);\n      }\n      gdk_draw_drawable(a2, v24, **(_QWORD **)(v22 + Number), Number L,\n                        Number L, (unsigned int)<span class=\"supfact\">v19</span>,\n                        HIDWORD(<span class=\"supfact\">v19</span>), (unsigned int)v16,\n                        HIDWORD(v16));\n    } else {\n      if (*(_DWORD *)(a1 + Number))\n        v5 = *(_QWORD *)a1 + Number L;\n      else\n        v5 = a1 + Number;\n      gdk_gc_set_foreground(v24, v5);\n      v6 = *(_QWORD *)(v22 + Number);\n      v7 = HIDWORD(<span class=\"supfact\">v19</span>) + Number;\n      v8 = <span class=\"supfact\">v19</span> + Number;\n      v9 = world_to_real_cy(Number);\n      v23 = g_strdup_printf(String, v9);\n      draw_string(a2, v24, v23, v8, v7, v6);\n      g_free(v23);\n    }\n    if (*(_DWORD *)(a1 + Number))\n      gdk_draw_rectangle(a2, v24, Number L, (unsigned int)<span class=\"supfact\">v19</span>,\n                         HIDWORD(<span class=\"supfact\">v19</span>),\n                         (unsigned int)(v20 - Number),\n                         (unsigned int)(HIDWORD(v20) - Number));\n    result = gdk_gc_unref(v24);\n  }\n  return result;\n}", "code_t": "void __cdecl draw(QCADDesignObject *obj, GdkDrawable *dst, GdkFunction rop) {\n  GType v3;\n  GdkColor *v4;\n  char *v5;\n  unsigned int v6;\n  unsigned int v7;\n  unsigned int v8;\n  EXP_PIXMAP *v9;\n  GdkColor *v10;\n  char *v11;\n  unsigned int v12;\n  GdkRectangle <span class=\"supfact\">rcDraw</span>;\n  GdkRectangle <span class=\"supfact\">rcDst</span>;\n  GdkRectangle <span class=\"supfact\">rc</span>;\n  GdkGC *gcEPM;\n  QCADLabel *label;\n  char *pszFont;\n  GdkGC *gc;\n  gc = Number L;\n  pszFont = Number L;\n  *(_QWORD *)&<span class=\"supfact\">rc</span>.x = Number L;\n  *(_QWORD *)&<span class=\"supfact\">rc</span>.width = Number L;\n  *(_QWORD *)&<span class=\"supfact\">rcDst</span>.x = Number L;\n  *(_QWORD *)&<span class=\"supfact\">rcDst</span>.width = Number L;\n  *(_QWORD *)&<span class=\"supfact\">rcDraw</span>.x = Number L;\n  *(_QWORD *)&<span class=\"supfact\">rcDraw</span>.width = Number L;\n  v3 = qcad_label_get_type();\n  label = (QCADLabel *)g_type_check_instance_cast(obj, v3);\n  if (label->bShrinkWrap)\n    qcad_label_shrinkwrap(label);\n  world_to_real_rect(&obj->bounding_box, &<span class=\"supfact\">rc</span>);\n  gdk_drawable_get_size(dst, &<span class=\"supfact\">rcDst</span>.width,\n                        &<span class=\"supfact\">rcDst</span>.height);\n  if ((unsigned int)gdk_rectangle_intersect(&<span class=\"supfact\">rc</span>,\n                                            &<span class=\"supfact\">rcDst</span>,\n                                            &<span class=\"supfact\">rcDraw</span>)) {\n    gc = (GdkGC *)gdk_gc_new(dst);\n    gdk_gc_set_function(gc, (unsigned int)rop);\n    gdk_gc_set_clip_rectangle(gc, &<span class=\"supfact\">rc</span>);\n    if (rop) {\n      if (label->bNeedsEPMDraw) {\n        gcEPM = Number L;\n        label->bNeedsEPMDraw = Number;\n        v9 = (EXP_PIXMAP *)exp_pixmap_cond_new(\n            label->epm, dst, (unsigned int)<span class=\"supfact\">rcDraw</span>.width,\n            (unsigned int)<span class=\"supfact\">rcDraw</span>.height, Number);\n        label->epm = v9;\n        exp_pixmap_clean(label->epm);\n        gcEPM = (GdkGC *)gdk_gc_new(label->epm->pixmap);\n        if (obj->bSelected)\n          v10 =\n              (GdkColor *)&obj->parent_instance.g_type_instance.g_class[Number];\n        else\n          v10 = &obj->clr;\n        gdk_gc_set_foreground(gcEPM, v10);\n        v11 = label->psz;\n        v12 = world_to_real_cy(Number);\n        pszFont = (char *)g_strdup_printf(String, v12);\n        draw_string(label->epm->pixmap, gcEPM, pszFont, Number L, Number L,\n                    v11);\n        g_free(pszFont);\n        g_object_unref(gcEPM);\n      }\n      gdk_draw_drawable(dst, gc, label->epm->pixmap, Number L, Number L,\n                        (unsigned int)<span class=\"supfact\">rc</span>.x,\n                        (unsigned int)<span class=\"supfact\">rc</span>.y,\n                        (unsigned int)<span class=\"supfact\">rcDraw</span>.width,\n                        (unsigned int)<span class=\"supfact\">rcDraw</span>.height);\n    } else {\n      if (obj->bSelected)\n        v4 = (GdkColor *)&obj->parent_instance.g_type_instance.g_class[Number];\n      else\n        v4 = &obj->clr;\n      gdk_gc_set_foreground(gc, v4);\n      v5 = label->psz;\n      v6 = <span class=\"supfact\">rc</span>.y + Number;\n      v7 = <span class=\"supfact\">rc</span>.x + Number;\n      v8 = world_to_real_cy(Number);\n      pszFont = (char *)g_strdup_printf(String, v8);\n      draw_string(dst, gc, pszFont, v7, v6, v5);\n      g_free(pszFont);\n    }\n    if (obj->bSelected)\n      gdk_draw_rectangle(dst, gc, Number L, (unsigned int)<span class=\"supfact\">rc</span>.x,\n                         (unsigned int)<span class=\"supfact\">rc</span>.y,\n                         (unsigned int)(<span class=\"supfact\">rc</span>.width - Number),\n                         (unsigned int)(<span class=\"supfact\">rc</span>.height - Number));\n    gdk_gc_unref(gc);\n  }\n}", "var": [{"name": "v15", "type": "__int64", "pred_name": "v15", "ref_name": "rcDraw", "ref_type": "struct GdkRectangle { gint x; gint y; gint width; gint height; }"}, {"name": "v17", "type": "__int64", "pred_name": "v17", "ref_name": "rcDst", "ref_type": "struct GdkRectangle { gint x; gint y; gint width; gint height; }"}, {"name": "v19", "type": "__int64", "pred_name": "v19", "ref_name": "rc", "ref_type": "struct GdkRectangle { gint x; gint y; gint width; gint height; }"}], "body_in_train": false}, {"repo_owner": "giovaniortolani", "repo_name": "Redes-Projeto1", "path": "giovaniortolani/Redes-Projeto1/b816b8a3028836e978a84bb9be58c7dd5ce0426ed543594dd142f5573b4cd7b4", "path_in_repo": "giovaniortolani/Redes-Projeto1//bin/reqtras", "objdump": "", "code_s": "int accept(int fd, struct sockaddr *<span class=\"supfact\">addr</span>, socklen_t *addr_len) {\n  return accept(fd, <span class=\"supfact\">addr</span>, addr_len);\n}", "code_t": "int accept(int fd, struct sockaddr *<span class=\"supfact\">addr</span>, socklen_t *addr_len) {\n  return accept(fd, <span class=\"supfact\">addr</span>, addr_len);\n}", "var": [{"name": "addr", "type": "struct sockaddr *", "pred_name": "addr", "ref_name": "addr", "ref_type": "struct sockaddr *"}], "body_in_train": true}, {"repo_owner": "deeponion", "repo_name": "deeponion-legacy", "path": "deeponion/deeponion-legacy/67ec94185c036a4087635d7c4988300ac248e7a67adafa162618d00c1699e799", "path_in_repo": "deeponion/deeponion-legacy/src/leveldb/out-static/hash_test", "objdump": "00000000004062eb <_ZN7leveldbL19DoWriteStringToFileEPNS_3EnvERKNS_5SliceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.cold>:\n  4062eb:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n  4062f0:\t48 85 ff             \ttest   %rdi,%rdi\n  4062f3:\t74 05                \tje     4062fa <_ZN7leveldbL19DoWriteStringToFileEPNS_3EnvERKNS_5SliceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.cold+0xf>\n  4062f5:\te8 06 d1 ff ff       \tcallq  403400 <_ZdaPv@plt>\n  4062fa:\t49 8b 3c 24          \tmov    (%r12),%rdi\n  4062fe:\t48 85 ff             \ttest   %rdi,%rdi\n  406301:\t74 05                \tje     406308 <_ZN7leveldbL19DoWriteStringToFileEPNS_3EnvERKNS_5SliceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.cold+0x1d>\n  406303:\te8 f8 d0 ff ff       \tcallq  403400 <_ZdaPv@plt>\n  406308:\t48 89 ef             \tmov    %rbp,%rdi\n  40630b:\te8 a0 d2 ff ff       \tcallq  4035b0 <_Unwind_Resume@plt>\n  406310:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n  406315:\t48 85 ff             \ttest   %rdi,%rdi\n  406318:\t74 e0                \tje     4062fa <_ZN7leveldbL19DoWriteStringToFileEPNS_3EnvERKNS_5SliceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.cold+0xf>\n  40631a:\te8 e1 d0 ff ff       \tcallq  403400 <_ZdaPv@plt>\n  40631f:\teb d9                \tjmp    4062fa <_ZN7leveldbL19DoWriteStringToFileEPNS_3EnvERKNS_5SliceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.cold+0xf>\n  406321:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n  406326:\t48 85 ff             \ttest   %rdi,%rdi\n  406329:\t74 cf                \tje     4062fa <_ZN7leveldbL19DoWriteStringToFileEPNS_3EnvERKNS_5SliceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.cold+0xf>\n  40632b:\te8 d0 d0 ff ff       \tcallq  403400 <_ZdaPv@plt>\n  406330:\teb c8                \tjmp    4062fa <_ZN7leveldbL19DoWriteStringToFileEPNS_3EnvERKNS_5SliceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.cold+0xf>", "code_s": "void __fastcall __noreturn leveldb DoWriteStringToFile(__int64 a1, __int64 a2,\n                                                       __int64 a3, __int64 a4,\n                                                       __int64 a5, __int64 a6,\n                                                       void *a7) {\n  struct _Unwind_Exception *<span class=\"supfact\">v7</span>;\n  void **v8;\n  if (a7)\n    operator delete[](a7);\n  if (*v8)\n    operator delete[](*v8);\n  _Unwind_Resume(<span class=\"supfact\">v7</span>);\n}", "code_t": "void __fastcall __noreturn leveldb DoWriteStringToFile(__int64 a1, __int64 a2,\n                                                       __int64 a3, __int64 a4,\n                                                       __int64 a5, __int64 a6,\n                                                       void *a7) {\n  struct _Unwind_Exception *<span class=\"supfact\">v7</span>;\n  void **v8;\n  if (a7)\n    operator delete[](a7);\n  if (*v8)\n    operator delete[](*v8);\n  _Unwind_Resume(<span class=\"supfact\">v7</span>);\n}", "var": [{"name": "v7", "type": "struct _Unwind_Exception *", "pred_name": "v7", "ref_name": "v7", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": true}, {"repo_owner": "VoIPGRID", "repo_name": "PJSIP", "path": "VoIPGRID/PJSIP/fef548ae6d32625e4ed35f9f165683c246c3b4fc96e304bb346e3109bacfaf40", "path_in_repo": "VoIPGRID/PJSIP//pjlib-util/bin/pjlib-util-test-x86_64-unknown-linux-gnu", "objdump": "0000000000420d3f <pj_init>:\n  420d3f:\t55                   \tpush   %rbp\n  420d40:\t48 89 e5             \tmov    %rsp,%rbp\n  420d43:\t48 83 ec 50          \tsub    $0x50,%rsp\n  420d47:\t8b 05 b3 30 02 00    \tmov    0x230b3(%rip),%eax        # 443e00 <initialized>\n  420d4d:\t85 c0                \ttest   %eax,%eax\n  420d4f:\t74 19                \tje     420d6a <pj_init+0x2b>\n  420d51:\t8b 05 a9 30 02 00    \tmov    0x230a9(%rip),%eax        # 443e00 <initialized>\n  420d57:\t83 c0 01             \tadd    $0x1,%eax\n  420d5a:\t89 05 a0 30 02 00    \tmov    %eax,0x230a0(%rip)        # 443e00 <initialized>\n  420d60:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  420d65:\te9 ee 00 00 00       \tjmpq   420e58 <pj_init+0x119>\n  420d6a:\te8 5d 05 00 00       \tcallq  4212cc <pj_thread_init>\n  420d6f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  420d72:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  420d76:\t74 08                \tje     420d80 <pj_init+0x41>\n  420d78:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  420d7b:\te9 d8 00 00 00       \tjmpq   420e58 <pj_init+0x119>\n  420d80:\tba 02 00 00 00       \tmov    $0x2,%edx\n  420d85:\tbe 60 70 43 00       \tmov    $0x437060,%esi\n  420d8a:\tbf 80 3e 44 00       \tmov    $0x443e80,%edi\n  420d8f:\te8 b6 0d 00 00       \tcallq  421b4a <init_mutex>\n  420d94:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  420d97:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  420d9b:\t74 08                \tje     420da5 <pj_init+0x66>\n  420d9d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  420da0:\te9 b3 00 00 00       \tjmpq   420e58 <pj_init+0x119>\n  420da5:\te8 43 81 00 00       \tcallq  428eed <pj_log_init>\n  420daa:\tbe 78 42 44 00       \tmov    $0x444278,%esi\n  420daf:\tbf 68 70 43 00       \tmov    $0x437068,%edi\n  420db4:\te8 e5 62 00 00       \tcallq  42709e <pj_exception_id_alloc>\n  420db9:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  420dbc:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  420dc0:\t74 08                \tje     420dca <pj_init+0x8b>\n  420dc2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  420dc5:\te9 8e 00 00 00       \tjmpq   420e58 <pj_init+0x119>\n  420dca:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  420dce:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  420dd2:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  420dd6:\t48 89 c7             \tmov    %rax,%rdi\n  420dd9:\te8 9b 21 00 00       \tcallq  422f79 <pj_generate_unique_string>\n  420dde:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  420de2:\t48 89 c7             \tmov    %rax,%rdi\n  420de5:\te8 b3 20 00 00       \tcallq  422e9d <pj_get_timestamp>\n  420dea:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  420ded:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  420df1:\t74 05                \tje     420df8 <pj_init+0xb9>\n  420df3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  420df6:\teb 60                \tjmp    420e58 <pj_init+0x119>\n  420df8:\t8b 05 02 30 02 00    \tmov    0x23002(%rip),%eax        # 443e00 <initialized>\n  420dfe:\t83 c0 01             \tadd    $0x1,%eax\n  420e01:\t89 05 f9 2f 02 00    \tmov    %eax,0x22ff9(%rip)        # 443e00 <initialized>\n  420e07:\t8b 05 f3 2f 02 00    \tmov    0x22ff3(%rip),%eax        # 443e00 <initialized>\n  420e0d:\t83 f8 01             \tcmp    $0x1,%eax\n  420e10:\t74 19                \tje     420e2b <pj_init+0xec>\n  420e12:\tb9 90 73 43 00       \tmov    $0x437390,%ecx\n  420e17:\tba d4 00 00 00       \tmov    $0xd4,%edx\n  420e1c:\tbe 78 70 43 00       \tmov    $0x437078,%esi\n  420e21:\tbf 91 70 43 00       \tmov    $0x437091,%edi\n  420e26:\te8 65 22 fe ff       \tcallq  403090 <__assert_fail@plt>\n  420e2b:\te8 51 82 00 00       \tcallq  429081 <pj_log_get_level>\n  420e30:\t83 f8 03             \tcmp    $0x3,%eax\n  420e33:\t7e 1e                \tjle    420e53 <pj_init+0x114>\n  420e35:\t48 8b 05 ac 2b 02 00 \tmov    0x22bac(%rip),%rax        # 4439e8 <PJ_VERSION>\n  420e3c:\t48 89 c2             \tmov    %rax,%rdx\n  420e3f:\tbe a8 70 43 00       \tmov    $0x4370a8,%esi\n  420e44:\tbf c7 70 43 00       \tmov    $0x4370c7,%edi\n  420e49:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  420e4e:\te8 a9 8b 00 00       \tcallq  4299fc <pj_log_4>\n  420e53:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  420e58:\tc9                   \tleaveq \n  420e59:\tc3                   \tretq   ", "code_s": "__int64 pj_init() {\n  __int64 result;\n  int v1;\n  int v2;\n  int v3;\n  char v4[Number];\n  char *<span class=\"supfact\">v5</span>;\n  char v6;\n  unsigned int v7;\n  if (initialized) {\n    ++initialized;\n    result = Number L;\n  } else {\n    v7 = pj_thread_init();\n    if (v7) {\n      result = v7;\n    } else {\n      v7 = init_mutex(&critical_section, String, Number L);\n      if (v7) {\n        result = v7;\n      } else {\n        pj_log_init();\n        v7 = pj_exception_id_alloc(String, &PJ_NO_MEMORY_EXCEPTION);\n        if (v7) {\n          result = v7;\n        } else {\n          <span class=\"supfact\">v5</span> = &v6;\n          pj_generate_unique_string(&<span class=\"supfact\">v5</span>);\n          v7 = pj_get_timestamp(v4);\n          if (v7) {\n            result = v7;\n          } else {\n            if (++initialized != Number)\n              __assert_fail(String, String, Number, String);\n            if ((int)pj_log_get_level(\n                    v4, (const char *)&PJ_NO_MEMORY_EXCEPTION) > Number)\n              pj_log_4((unsigned int)String, (unsigned int)String,\n                       (_DWORD)PJ_VERSION, v1, v2, v3);\n            result = Number L;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl pj_init() {\n  pj_status_t result;\n  pj_timestamp_0 dummy_ts;\n  pj_str_t_0 <span class=\"supfact\">guid</span>;\n  char dummy_guid[Number];\n  pj_status_t rc;\n  if (initialized) {\n    ++initialized;\n    result = Number;\n  } else {\n    rc = pj_thread_init();\n    if (rc) {\n      result = rc;\n    } else {\n      rc = init_mutex(&critical_section, String, Number);\n      if (rc) {\n        result = rc;\n      } else {\n        pj_log_init();\n        rc = pj_exception_id_alloc(String, &PJ_NO_MEMORY_EXCEPTION);\n        if (rc) {\n          result = rc;\n        } else {\n          <span class=\"supfact\">guid</span>.ptr = dummy_guid;\n          pj_generate_unique_string(&<span class=\"supfact\">guid</span>);\n          rc = pj_get_timestamp(&dummy_ts);\n          if (rc) {\n            result = rc;\n          } else {\n            if (++initialized != Number)\n              __assert_fail(String, String, Number, String);\n            if (pj_log_get_level() > Number)\n              pj_log_4(String, String, PJ_VERSION);\n            result = Number;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "pred_name": "guid", "ref_name": "guid", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "himyxia", "repo_name": "c", "path": "himyxia/c/841708db2794109ae98387e425520363eb0266f5612269c7baf9ffaf840a8693", "path_in_repo": "himyxia/c/network/unpv13e/udpcliserv/udpcli02", "objdump": "", "code_s": "int getpeername(int fd, struct sockaddr *<span class=\"supfact\">addr</span>, socklen_t *len) {\n  return getpeername(fd, <span class=\"supfact\">addr</span>, len);\n}", "code_t": "int getpeername(int fd, struct sockaddr *<span class=\"supfact\">addr</span>, socklen_t *len) {\n  return getpeername(fd, <span class=\"supfact\">addr</span>, len);\n}", "var": [{"name": "addr", "type": "struct sockaddr *", "pred_name": "addr", "ref_name": "addr", "ref_type": "struct sockaddr *"}], "body_in_train": true}, {"repo_owner": "dtsund", "repo_name": "dtsund-crawl-mod", "path": "dtsund/dtsund-crawl-mod/09edf38ab155b8fd44d57d0b248a4ef0ef50bb52c241e289648eaebb88cd10a0", "path_in_repo": "dtsund/dtsund-crawl-mod/source/describe.o", "objdump": "0000000000000307 <_ZL19_describe_draconianRK12monster_info.cold>:\n     307:\t48 8b 7c 24 50       \tmov    0x50(%rsp),%rdi\n     30c:\t48 8d 44 24 60       \tlea    0x60(%rsp),%rax\n     311:\t48 39 c7             \tcmp    %rax,%rdi\n     314:\t74 05                \tje     31b <_ZL19_describe_draconianRK12monster_info.cold+0x14>\n     316:\te8 00 00 00 00       \tcallq  31b <_ZL19_describe_draconianRK12monster_info.cold+0x14>\n     31b:\t48 8b 7c 24 30       \tmov    0x30(%rsp),%rdi\n     320:\t48 3b 7c 24 08       \tcmp    0x8(%rsp),%rdi\n     325:\t74 05                \tje     32c <_ZL19_describe_draconianRK12monster_info.cold+0x25>\n     327:\te8 00 00 00 00       \tcallq  32c <_ZL19_describe_draconianRK12monster_info.cold+0x25>\n     32c:\t48 8b 7c 24 10       \tmov    0x10(%rsp),%rdi\n     331:\t4c 39 f7             \tcmp    %r14,%rdi\n     334:\t74 05                \tje     33b <_ZL19_describe_draconianRK12monster_info.cold+0x34>\n     336:\te8 00 00 00 00       \tcallq  33b <_ZL19_describe_draconianRK12monster_info.cold+0x34>\n     33b:\t48 89 ef             \tmov    %rbp,%rdi\n     33e:\te8 00 00 00 00       \tcallq  343 <_ZL19_describe_draconianRK12monster_info.cold+0x3c>\n     343:\t48 8b 7c 24 50       \tmov    0x50(%rsp),%rdi\n     348:\t48 8d 44 24 60       \tlea    0x60(%rsp),%rax\n     34d:\t48 39 c7             \tcmp    %rax,%rdi\n     350:\t74 05                \tje     357 <_ZL19_describe_draconianRK12monster_info.cold+0x50>\n     352:\te8 00 00 00 00       \tcallq  357 <_ZL19_describe_draconianRK12monster_info.cold+0x50>\n     357:\t48 8b 7c 24 30       \tmov    0x30(%rsp),%rdi\n     35c:\t48 3b 7c 24 08       \tcmp    0x8(%rsp),%rdi\n     361:\t74 c9                \tje     32c <_ZL19_describe_draconianRK12monster_info.cold+0x25>\n     363:\te8 00 00 00 00       \tcallq  368 <_ZL19_describe_draconianRK12monster_info.cold+0x61>\n     368:\teb c2                \tjmp    32c <_ZL19_describe_draconianRK12monster_info.cold+0x25>", "code_s": "void __fastcall __noreturn\n_describe_draconian(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5,\n                    __int64 a6, void *a7, void *a8, __int64 a9, __int64 a10,\n                    __int64 a11, void *a12, __int64 a13, __int64 a14,\n                    __int64 a15, char *a16, __int64 a17, char a18) {\n  struct _Unwind_Exception *<span class=\"supfact\">v18</span>;\n  void *v19;\n  if (a16 != &a18)\n    operator delete(a16);\n  if (a12 != a7)\n    operator delete(a12);\n  if (a8 != v19)\n    operator delete(a8);\n  Unwind_Resume(<span class=\"supfact\">v18</span>);\n}", "code_t": "void __fastcall __noreturn\n_describe_draconian(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5,\n                    __int64 a6, void *a7, void *a8, __int64 a9, __int64 a10,\n                    __int64 a11, void *a12, __int64 a13, __int64 a14,\n                    __int64 a15, char *a16, __int64 a17, char a18) {\n  struct _Unwind_Exception *<span class=\"supfact\">v18</span>;\n  void *v19;\n  if (a16 != &a18)\n    operator delete(a16);\n  if (a12 != a7)\n    operator delete(a12);\n  if (a8 != v19)\n    operator delete(a8);\n  Unwind_Resume(<span class=\"supfact\">v18</span>);\n}", "var": [{"name": "v18", "type": "struct _Unwind_Exception *", "pred_name": "v18", "ref_name": "v18", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "yEsPaP", "repo_name": "android_kernel_samsung_coreprimevelte", "path": "yEsPaP/android_kernel_samsung_coreprimevelte/2f22c2dd40aee23e39c671970798faba0e335cd9810c09b90d63cfcdd369eea4", "path_in_repo": "yEsPaP/android_kernel_samsung_coreprimevelte/tools/power/cpupower/cpupower", "objdump": "000000000040755c <timespec_diff_us>:\n  40755c:\t55                   \tpush   %rbp\n  40755d:\t48 89 e5             \tmov    %rsp,%rbp\n  407560:\t48 89 f0             \tmov    %rsi,%rax\n  407563:\t49 89 f8             \tmov    %rdi,%r8\n  407566:\t4c 89 c6             \tmov    %r8,%rsi\n  407569:\t4c 89 cf             \tmov    %r9,%rdi\n  40756c:\t48 89 c7             \tmov    %rax,%rdi\n  40756f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  407573:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  407577:\t48 89 55 d0          \tmov    %rdx,-0x30(%rbp)\n  40757b:\t48 89 4d d8          \tmov    %rcx,-0x28(%rbp)\n  40757f:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  407583:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  407587:\t48 29 c2             \tsub    %rax,%rdx\n  40758a:\t48 89 d0             \tmov    %rdx,%rax\n  40758d:\t48 85 c0             \ttest   %rax,%rax\n  407590:\t79 31                \tjns    4075c3 <timespec_diff_us+0x67>\n  407592:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  407596:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40759a:\t48 29 c2             \tsub    %rax,%rdx\n  40759d:\t48 89 d0             \tmov    %rdx,%rax\n  4075a0:\t48 83 e8 01          \tsub    $0x1,%rax\n  4075a4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4075a8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4075ac:\t48 8d 90 00 ca 9a 3b \tlea    0x3b9aca00(%rax),%rdx\n  4075b3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4075b7:\t48 29 c2             \tsub    %rax,%rdx\n  4075ba:\t48 89 d0             \tmov    %rdx,%rax\n  4075bd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4075c1:\teb 24                \tjmp    4075e7 <timespec_diff_us+0x8b>\n  4075c3:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  4075c7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4075cb:\t48 29 c2             \tsub    %rax,%rdx\n  4075ce:\t48 89 d0             \tmov    %rdx,%rax\n  4075d1:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4075d5:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4075d9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4075dd:\t48 29 c2             \tsub    %rax,%rdx\n  4075e0:\t48 89 d0             \tmov    %rdx,%rax\n  4075e3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4075e7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4075eb:\t48 69 f0 40 42 0f 00 \timul   $0xf4240,%rax,%rsi\n  4075f2:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  4075f6:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n  4075fd:\t9b c4 20 \n  407600:\t48 89 c8             \tmov    %rcx,%rax\n  407603:\t48 f7 ea             \timul   %rdx\n  407606:\t48 c1 fa 07          \tsar    $0x7,%rdx\n  40760a:\t48 89 c8             \tmov    %rcx,%rax\n  40760d:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  407611:\t48 29 c2             \tsub    %rax,%rdx\n  407614:\t48 89 d0             \tmov    %rdx,%rax\n  407617:\t48 01 f0             \tadd    %rsi,%rax\n  40761a:\t5d                   \tpop    %rbp\n  40761b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall timespec_diff_us(__int64 <span class=\"supfact\">a1</span>, __int64 a2,\n                                    __int64 <span class=\"supfact\">a3</span>, __int64 a4) {\n  __int64 v5;\n  __int64 v6;\n  if (a4 - a2 >= Number) {\n    v5 = <span class=\"supfact\">a3</span> - <span class=\"supfact\">a1</span>;\n    v6 = a4 - a2;\n  } else {\n    v5 = <span class=\"supfact\">a3</span> - <span class=\"supfact\">a1</span> - Number;\n    v6 = a4 + Number - a2;\n  }\n  return Number * v5 + v6 / Number;\n}", "code_t": "__int64 __cdecl timespec_diff_us(timespec <span class=\"supfact\">start</span>,\n                                 timespec <span class=\"supfact\">end</span>) {\n  __time_t temp;\n  __syscall_slong_t temp_8;\n  if (<span class=\"supfact\">end</span>.tv_nsec - <span class=\"supfact\">start</span>.tv_nsec >= Number) {\n    temp = <span class=\"supfact\">end</span>.tv_sec - <span class=\"supfact\">start</span>.tv_sec;\n    temp_8 = <span class=\"supfact\">end</span>.tv_nsec - <span class=\"supfact\">start</span>.tv_nsec;\n  } else {\n    temp = <span class=\"supfact\">end</span>.tv_sec - <span class=\"supfact\">start</span>.tv_sec - Number;\n    temp_8 =\n        <span class=\"supfact\">end</span>.tv_nsec + Number - <span class=\"supfact\">start</span>.tv_nsec;\n  }\n  return Number * temp + temp_8 / Number;\n}", "var": [{"name": "a1", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "pred_name": "start", "ref_name": "start", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}, {"name": "a3", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "pred_name": "end", "ref_name": "end", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "OnePlusOSS", "repo_name": "android_kernel_oneplus_sm8150", "path": "OnePlusOSS/android_kernel_oneplus_sm8150/91d852325d30fde8418c35dc9dd64fe9dc0f61093947c0e4b10a00910cb7fd1d", "path_in_repo": "OnePlusOSS/android_kernel_oneplus_sm8150/tools/perf/builtin-help.o", "objdump": "00000000000001da <check_emacsclient_version>:\n     1da:\t55                   \tpush   %rbp\n     1db:\t48 89 e5             \tmov    %rsp,%rbp\n     1de:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n     1e5:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     1ec:\t00 00 \n     1ee:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     1f2:\t31 c0                \txor    %eax,%eax\n     1f4:\t48 c7 45 80 00 00 00 \tmovq   $0x0,-0x80(%rbp)\n     1fb:\t00 \n     1fc:\t48 c7 45 88 00 00 00 \tmovq   $0x0,-0x78(%rbp)\n     203:\t00 \n     204:\t48 c7 45 90 00 00 00 \tmovq   $0x0,-0x70(%rbp)\n     20b:\t00 \n     20c:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n     213:\t00 \n     214:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     21b:\t00 \n     21c:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     223:\t00 \n     224:\tc7 85 78 ff ff ff ff \tmovl   $0xffffffff,-0x88(%rbp)\n     22b:\tff ff ff \n     22e:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     232:\tba 38 00 00 00       \tmov    $0x38,%edx\n     237:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     23c:\t48 89 c7             \tmov    %rax,%rdi\n     23f:\te8 00 00 00 00       \tcallq  244 <check_emacsclient_version+0x6a>\n     244:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     248:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n     24c:\tc7 45 b4 ff ff ff ff \tmovl   $0xffffffff,-0x4c(%rbp)\n     253:\t0f b6 45 c8          \tmovzbl -0x38(%rbp),%eax\n     257:\t83 c8 10             \tor     $0x10,%eax\n     25a:\t88 45 c8             \tmov    %al,-0x38(%rbp)\n     25d:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     261:\t48 89 c7             \tmov    %rax,%rdi\n     264:\te8 00 00 00 00       \tcallq  269 <check_emacsclient_version+0x8f>\n     269:\t85 c0                \ttest   %eax,%eax\n     26b:\t74 28                \tje     295 <check_emacsclient_version+0xbb>\n     26d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 274 <check_emacsclient_version+0x9a>\n     274:\t48 89 c1             \tmov    %rax,%rcx\n     277:\tba 1d 00 00 00       \tmov    $0x1d,%edx\n     27c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     281:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     286:\te8 00 00 00 00       \tcallq  28b <check_emacsclient_version+0xb1>\n     28b:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     290:\te9 e8 00 00 00       \tjmpq   37d <check_emacsclient_version+0x1a3>\n     295:\t8b 4d b4             \tmov    -0x4c(%rbp),%ecx\n     298:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n     29c:\tba 14 00 00 00       \tmov    $0x14,%edx\n     2a1:\t89 ce                \tmov    %ecx,%esi\n     2a3:\t48 89 c7             \tmov    %rax,%rdi\n     2a6:\te8 00 00 00 00       \tcallq  2ab <check_emacsclient_version+0xd1>\n     2ab:\t48 85 c0             \ttest   %rax,%rax\n     2ae:\t79 23                \tjns    2d3 <check_emacsclient_version+0xf9>\n     2b0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b7 <check_emacsclient_version+0xdd>\n     2b7:\t48 89 c1             \tmov    %rax,%rcx\n     2ba:\tba 23 00 00 00       \tmov    $0x23,%edx\n     2bf:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     2c4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     2c9:\te8 00 00 00 00       \tcallq  2ce <check_emacsclient_version+0xf4>\n     2ce:\te9 98 00 00 00       \tjmpq   36b <check_emacsclient_version+0x191>\n     2d3:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n     2d6:\t89 c7                \tmov    %eax,%edi\n     2d8:\te8 00 00 00 00       \tcallq  2dd <check_emacsclient_version+0x103>\n     2dd:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     2e1:\t48 89 c7             \tmov    %rax,%rdi\n     2e4:\te8 00 00 00 00       \tcallq  2e9 <check_emacsclient_version+0x10f>\n     2e9:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n     2ed:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     2f2:\t48 89 c7             \tmov    %rax,%rdi\n     2f5:\te8 48 fd ff ff       \tcallq  42 <strstarts>\n     2fa:\t83 f0 01             \txor    $0x1,%eax\n     2fd:\t84 c0                \ttest   %al,%al\n     2ff:\t74 20                \tje     321 <check_emacsclient_version+0x147>\n     301:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 308 <check_emacsclient_version+0x12e>\n     308:\t48 89 c1             \tmov    %rax,%rcx\n     30b:\tba 25 00 00 00       \tmov    $0x25,%edx\n     310:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     315:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     31a:\te8 00 00 00 00       \tcallq  31f <check_emacsclient_version+0x145>\n     31f:\teb 4a                \tjmp    36b <check_emacsclient_version+0x191>\n     321:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n     325:\t48 83 c0 0b          \tadd    $0xb,%rax\n     329:\t48 89 c7             \tmov    %rax,%rdi\n     32c:\te8 00 00 00 00       \tcallq  331 <check_emacsclient_version+0x157>\n     331:\t89 85 7c ff ff ff    \tmov    %eax,-0x84(%rbp)\n     337:\t83 bd 7c ff ff ff 15 \tcmpl   $0x15,-0x84(%rbp)\n     33e:\t7f 21                \tjg     361 <check_emacsclient_version+0x187>\n     340:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 347 <check_emacsclient_version+0x16d>\n     347:\t8b 95 7c ff ff ff    \tmov    -0x84(%rbp),%edx\n     34d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     352:\t48 89 c7             \tmov    %rax,%rdi\n     355:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     35a:\te8 00 00 00 00       \tcallq  35f <check_emacsclient_version+0x185>\n     35f:\teb 0a                \tjmp    36b <check_emacsclient_version+0x191>\n     361:\tc7 85 78 ff ff ff 00 \tmovl   $0x0,-0x88(%rbp)\n     368:\t00 00 00 \n     36b:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n     36f:\t48 89 c7             \tmov    %rax,%rdi\n     372:\te8 00 00 00 00       \tcallq  377 <check_emacsclient_version+0x19d>\n     377:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n     37d:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     381:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     388:\t00 00 \n     38a:\t74 05                \tje     391 <check_emacsclient_version+0x1b7>\n     38c:\te8 00 00 00 00       \tcallq  391 <check_emacsclient_version+0x1b7>\n     391:\tc9                   \tleaveq \n     392:\tc3                   \tretq   ", "code_s": "__int64 check_emacsclient_version() {\n  __int64 result;\n  unsigned int v1;\n  int v2;\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  const char *v4;\n  __int64 <span class=\"supfact\">s</span>[Number];\n  __int64 v6[Number];\n  v6[Number] = __readfsqword(Number);\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  v4 = (const char *)&strbuf_slopbuf;\n  v6[Number] = (__int64)String;\n  v6[Number] = (__int64)String;\n  v6[Number] = Number L;\n  v1 = Number;\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  <span class=\"supfact\">s</span>[Number] = (__int64)v6;\n  HIDWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n  LOBYTE(<span class=\"supfact\">s</span>[Number]) |= Number;\n  if ((unsigned int)start_command(<span class=\"supfact\">s</span>)) {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  } else {\n    if (strbuf_read(<span class=\"supfact\">v3</span>, HIDWORD(<span class=\"supfact\">s</span>[Number]),\n                    Number L) >= Number) {\n      close(SHIDWORD(<span class=\"supfact\">s</span>[Number]));\n      finish_command(<span class=\"supfact\">s</span>);\n      if (!strstarts(v4, String)) {\n        fwrite(String, Number, Number, stderr);\n      } else {\n        v2 = atoi(v4 + Number);\n        if (v2 > Number)\n          v1 = Number;\n        else\n          fprintf(stderr, String, (unsigned int)v2);\n      }\n    } else {\n      fwrite(String, Number, Number, stderr);\n    }\n    strbuf_release(<span class=\"supfact\">v3</span>);\n    result = v1;\n  }\n  return result;\n}", "code_t": "int __cdecl check_emacsclient_version() {\n  int result;\n  int ret;\n  int version;\n  strbuf <span class=\"supfact\">buffer</span>;\n  child_process <span class=\"supfact\">ec_process</span>;\n  const char *argv_ec[Number];\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  <span class=\"supfact\">buffer</span>.alloc = Number L;\n  <span class=\"supfact\">buffer</span>.len = Number L;\n  <span class=\"supfact\">buffer</span>.buf = (char *)&strbuf_slopbuf;\n  argv_ec[Number] = String;\n  argv_ec[Number] = String;\n  argv_ec[Number] = Number L;\n  ret = Number;\n  memset(&<span class=\"supfact\">ec_process</span>, Number,\n         sizeof(<span class=\"supfact\">ec_process</span>));\n  <span class=\"supfact\">ec_process</span>.argv = argv_ec;\n  <span class=\"supfact\">ec_process</span>.err = Number;\n  *((_BYTE *)&<span class=\"supfact\">ec_process</span> + Number) |= Number;\n  if ((unsigned int)start_command(&<span class=\"supfact\">ec_process</span>)) {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  } else {\n    if (strbuf_read(&<span class=\"supfact\">buffer</span>,\n                    (unsigned int)<span class=\"supfact\">ec_process</span>.err,\n                    Number L) >= Number) {\n      close(<span class=\"supfact\">ec_process</span>.err);\n      finish_command(&<span class=\"supfact\">ec_process</span>);\n      if (!strstarts(<span class=\"supfact\">buffer</span>.buf, String)) {\n        fwrite(String, Number, Number, stderr);\n      } else {\n        version = atoi((const char *)<span class=\"supfact\">buffer</span>.buf + Number);\n        if (version > Number)\n          ret = Number;\n        else fprintf ( stderr , String . \\ n String ;\n      }\n    } else {\n      fwrite(String, Number, Number, stderr);\n    }\n    strbuf_release(&<span class=\"supfact\">buffer</span>);\n    result = ret;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "pred_name": "buffer", "ref_name": "buffer", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}, {"name": "s", "type": "struct child_process { const char ** argv; pid_t pid; int in; int out; int err; const char * dir; const char *const * env; unsigned __int32 : 1 no_stdin; unsigned __int32 : 1 no_stdout; unsigned __int32 : 1 no_stderr; unsigned __int32 : 1 perf_cmd; unsigned __int32 : 1 stdout_to_stderr; PADDING (7); void (*)(void) preexec_cb; }", "pred_name": "ec_process", "ref_name": "ec_process", "ref_type": "struct child_process { const char ** argv; pid_t pid; int in; int out; int err; const char * dir; const char *const * env; unsigned __int32 : 1 no_stdin; unsigned __int32 : 1 no_stdout; unsigned __int32 : 1 no_stderr; unsigned __int32 : 1 exec_cmd; unsigned __int32 : 1 stdout_to_stderr; PADDING (7); void (*)(void) preexec_cb; }"}], "body_in_train": true}, {"repo_owner": "yangmenghui", "repo_name": "LinuxKernel3_19_V2X", "path": "yangmenghui/LinuxKernel3_19_V2X/9376d36f3f1535540cf05bb105035d17c13d42a865cb5abb97d6d190fa674c61", "path_in_repo": "yangmenghui/LinuxKernel3_19_V2X/tools/power/acpi/acpidump", "objdump": "0000000000406b4e <osl_read_table_from_file>:\n  406b4e:\t55                   \tpush   %rbp\n  406b4f:\t48 89 e5             \tmov    %rsp,%rbp\n  406b52:\t48 83 ec 70          \tsub    $0x70,%rsp\n  406b56:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  406b5a:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  406b5e:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  406b62:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n  406b66:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  406b6d:\t00 \n  406b6e:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  406b75:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  406b79:\tbe ed 9c 40 00       \tmov    $0x409ced,%esi\n  406b7e:\t48 89 c7             \tmov    %rax,%rdi\n  406b81:\te8 ca a6 ff ff       \tcallq  401250 <fopen@plt>\n  406b86:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  406b8a:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  406b8f:\t75 2c                \tjne    406bbd <osl_read_table_from_file+0x6f>\n  406b91:\t48 8b 05 68 67 00 00 \tmov    0x6768(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406b98:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  406b9c:\tbe f0 9c 40 00       \tmov    $0x409cf0,%esi\n  406ba1:\t48 89 c7             \tmov    %rax,%rdi\n  406ba4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406ba9:\te8 f2 a5 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406bae:\tbf 05 00 00 00       \tmov    $0x5,%edi\n  406bb3:\te8 e0 ee ff ff       \tcallq  405a98 <osl_get_last_status>\n  406bb8:\te9 f8 01 00 00       \tjmpq   406db5 <osl_read_table_from_file+0x267>\n  406bbd:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n  406bc1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406bc5:\tba 00 00 00 00       \tmov    $0x0,%edx\n  406bca:\t48 89 ce             \tmov    %rcx,%rsi\n  406bcd:\t48 89 c7             \tmov    %rax,%rdi\n  406bd0:\te8 4b a6 ff ff       \tcallq  401220 <fseek@plt>\n  406bd5:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  406bd9:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  406bdd:\t48 89 d1             \tmov    %rdx,%rcx\n  406be0:\tba 24 00 00 00       \tmov    $0x24,%edx\n  406be5:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  406bea:\t48 89 c7             \tmov    %rax,%rdi\n  406bed:\te8 8e a4 ff ff       \tcallq  401080 <fread@plt>\n  406bf2:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  406bf5:\t83 7d e4 24          \tcmpl   $0x24,-0x1c(%rbp)\n  406bf9:\t74 29                \tje     406c24 <osl_read_table_from_file+0xd6>\n  406bfb:\t48 8b 05 fe 66 00 00 \tmov    0x66fe(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406c02:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  406c06:\tbe 10 9d 40 00       \tmov    $0x409d10,%esi\n  406c0b:\t48 89 c7             \tmov    %rax,%rdi\n  406c0e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406c13:\te8 88 a5 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406c18:\tc7 45 f4 02 20 00 00 \tmovl   $0x2002,-0xc(%rbp)\n  406c1f:\te9 77 01 00 00       \tjmpq   406d9b <osl_read_table_from_file+0x24d>\n  406c24:\t48 83 7d 98 00       \tcmpq   $0x0,-0x68(%rbp)\n  406c29:\t0f 84 9a 00 00 00    \tje     406cc9 <osl_read_table_from_file+0x17b>\n  406c2f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  406c33:\tba 08 00 00 00       \tmov    $0x8,%edx\n  406c38:\tbe 79 9c 40 00       \tmov    $0x409c79,%esi\n  406c3d:\t48 89 c7             \tmov    %rax,%rdi\n  406c40:\te8 0b a4 ff ff       \tcallq  401050 <strncmp@plt>\n  406c45:\t85 c0                \ttest   %eax,%eax\n  406c47:\t75 43                \tjne    406c8c <osl_read_table_from_file+0x13e>\n  406c49:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  406c4d:\tba 08 00 00 00       \tmov    $0x8,%edx\n  406c52:\tbe 79 9c 40 00       \tmov    $0x409c79,%esi\n  406c57:\t48 89 c7             \tmov    %rax,%rdi\n  406c5a:\te8 f1 a3 ff ff       \tcallq  401050 <strncmp@plt>\n  406c5f:\t85 c0                \ttest   %eax,%eax\n  406c61:\t74 66                \tje     406cc9 <osl_read_table_from_file+0x17b>\n  406c63:\t48 8b 05 96 66 00 00 \tmov    0x6696(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406c6a:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  406c6e:\tbe 38 9d 40 00       \tmov    $0x409d38,%esi\n  406c73:\t48 89 c7             \tmov    %rax,%rdi\n  406c76:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406c7b:\te8 20 a5 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406c80:\tc7 45 f4 01 20 00 00 \tmovl   $0x2001,-0xc(%rbp)\n  406c87:\te9 0f 01 00 00       \tjmpq   406d9b <osl_read_table_from_file+0x24d>\n  406c8c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  406c90:\t8b 10                \tmov    (%rax),%edx\n  406c92:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  406c96:\t8b 00                \tmov    (%rax),%eax\n  406c98:\t39 c2                \tcmp    %eax,%edx\n  406c9a:\t74 2d                \tje     406cc9 <osl_read_table_from_file+0x17b>\n  406c9c:\t48 8b 05 5d 66 00 00 \tmov    0x665d(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406ca3:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n  406ca7:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  406cab:\tbe 60 9d 40 00       \tmov    $0x409d60,%esi\n  406cb0:\t48 89 c7             \tmov    %rax,%rdi\n  406cb3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406cb8:\te8 e3 a4 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406cbd:\tc7 45 f4 01 20 00 00 \tmovl   $0x2001,-0xc(%rbp)\n  406cc4:\te9 d2 00 00 00       \tjmpq   406d9b <osl_read_table_from_file+0x24d>\n  406cc9:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  406ccd:\t48 89 c7             \tmov    %rax,%rdi\n  406cd0:\te8 fd a7 ff ff       \tcallq  4014d2 <ap_get_table_length>\n  406cd5:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  406cd8:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n  406cdc:\t75 0c                \tjne    406cea <osl_read_table_from_file+0x19c>\n  406cde:\tc7 45 f4 02 20 00 00 \tmovl   $0x2002,-0xc(%rbp)\n  406ce5:\te9 b1 00 00 00       \tjmpq   406d9b <osl_read_table_from_file+0x24d>\n  406cea:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  406ced:\t48 89 c6             \tmov    %rax,%rsi\n  406cf0:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  406cf5:\te8 76 a4 ff ff       \tcallq  401170 <calloc@plt>\n  406cfa:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  406cfe:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  406d03:\t75 29                \tjne    406d2e <osl_read_table_from_file+0x1e0>\n  406d05:\t48 8b 05 f4 65 00 00 \tmov    0x65f4(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406d0c:\t8b 4d e0             \tmov    -0x20(%rbp),%ecx\n  406d0f:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  406d13:\tbe 98 9d 40 00       \tmov    $0x409d98,%esi\n  406d18:\t48 89 c7             \tmov    %rax,%rdi\n  406d1b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406d20:\te8 7b a4 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406d25:\tc7 45 f4 04 00 00 00 \tmovl   $0x4,-0xc(%rbp)\n  406d2c:\teb 6d                \tjmp    406d9b <osl_read_table_from_file+0x24d>\n  406d2e:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n  406d32:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406d36:\tba 00 00 00 00       \tmov    $0x0,%edx\n  406d3b:\t48 89 ce             \tmov    %rcx,%rsi\n  406d3e:\t48 89 c7             \tmov    %rax,%rdi\n  406d41:\te8 da a4 ff ff       \tcallq  401220 <fseek@plt>\n  406d46:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  406d49:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  406d4d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406d51:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  406d56:\t48 89 c7             \tmov    %rax,%rdi\n  406d59:\te8 22 a3 ff ff       \tcallq  401080 <fread@plt>\n  406d5e:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  406d61:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  406d64:\t39 45 e0             \tcmp    %eax,-0x20(%rbp)\n  406d67:\t74 26                \tje     406d8f <osl_read_table_from_file+0x241>\n  406d69:\t48 8b 05 90 65 00 00 \tmov    0x6590(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406d70:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  406d74:\tbe d8 9d 40 00       \tmov    $0x409dd8,%esi\n  406d79:\t48 89 c7             \tmov    %rax,%rdi\n  406d7c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406d81:\te8 1a a4 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406d86:\tc7 45 f4 05 20 00 00 \tmovl   $0x2005,-0xc(%rbp)\n  406d8d:\teb 0c                \tjmp    406d9b <osl_read_table_from_file+0x24d>\n  406d8f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406d93:\t48 89 c7             \tmov    %rax,%rdi\n  406d96:\te8 bd a6 ff ff       \tcallq  401458 <ap_is_valid_checksum>\n  406d9b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406d9f:\t48 89 c7             \tmov    %rax,%rdi\n  406da2:\te8 f9 a2 ff ff       \tcallq  4010a0 <fclose@plt>\n  406da7:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  406dab:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  406daf:\t48 89 10             \tmov    %rdx,(%rax)\n  406db2:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  406db5:\tc9                   \tleaveq \n  406db6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall osl_read_table_from_file(const char *a1, __int64 a2,\n                                            const char *a3, void **a4) {\n  _DWORD <span class=\"supfact\">ptr</span>[Number];\n  size_t size;\n  FILE *stream;\n  unsigned int v10;\n  void *v11;\n  v11 = Number L;\n  v10 = Number;\n  stream = fopen(a1, String);\n  if (!stream) {\n    fprintf(stderr, String, a1);\n    return osl_get_last_status(Number);\n  }\n  fseek(stream, a2, Number);\n  HIDWORD(size) = fread(<span class=\"supfact\">ptr</span>, Number, Number, stream);\n  if (HIDWORD(size) == Number) {\n    if (a3) {\n      if (!strncmp(a3, String, Number)) {\n        if (strncmp((const char *)<span class=\"supfact\">ptr</span>, String, Number)) {\n          fprintf(stderr, String, (const char *)<span class=\"supfact\">ptr</span>);\n          v10 = Number;\n          goto LABEL_18;\n        }\n      } else if (*(_DWORD *)a3 != <span class=\"supfact\">ptr</span>[Number]) {\n        fprintf(stderr, String, a3, (const char *)<span class=\"supfact\">ptr</span>);\n        v10 = Number;\n        goto LABEL_18;\n      }\n    }\n    LODWORD(size) = ap_get_table_length((__int64)<span class=\"supfact\">ptr</span>);\n    if ((_DWORD)size) {\n      v11 = calloc(Number, (unsigned int)size);\n      if (v11) {\n        fseek(stream, a2, Number);\n        HIDWORD(size) = fread(v11, Number, (unsigned int)size, stream);\n        if ((_DWORD)size == HIDWORD(size)) {\n          ap_is_valid_checksum((__int64)v11);\n        } else {\n          fprintf(stderr, String, (const char *)<span class=\"supfact\">ptr</span>);\n          v10 = Number;\n        }\n      } else {\n        fprintf(stderr, String, (const char *)<span class=\"supfact\">ptr</span>,\n                (unsigned int)size);\n        v10 = Number;\n      }\n    } else {\n      v10 = Number;\n    }\n    goto LABEL_18;\n  }\n  fprintf(stderr, String, a1);\n  v10 = Number;\nLABEL_18:\n  fclose(stream);\n  *a4 = v11;\n  return v10;\n}", "code_t": "acpi_status __cdecl osl_read_table_from_file(char *filename,\n                                             acpi_size file_offset,\n                                             char *signature,\n                                             acpi_table_header **table) {\n  acpi_table_header <span class=\"supfact\">header</span>;\n  u32 table_length;\n  s32 count;\n  FILE *table_file;\n  acpi_status status;\n  acpi_table_header *local_table;\n  local_table = Number L;\n  status = Number;\n  table_file = fopen(filename, String);\n  if (!table_file) {\n    fprintf(stderr, String, filename);\n    return osl_get_last_status(Number);\n  }\n  fseek(table_file, file_offset, Number);\n  count = fread(&<span class=\"supfact\">header</span>, Number, Number, table_file);\n  if (count == Number) {\n    if (signature) {\n      if (!strncmp(signature, String, Number)) {\n        if (strncmp(<span class=\"supfact\">header</span>.signature, String, Number)) {\n          fprintf(stderr, String, <span class=\"supfact\">header</span>.signature);\n          status = Number;\n          goto exit;\n        }\n      } else if (*(_DWORD *)signature !=\n                 *(_DWORD *)<span class=\"supfact\">header</span>.signature) {\n        fprintf(stderr, String, signature, <span class=\"supfact\">header</span>.signature);\n        status = Number;\n        goto exit;\n      }\n    }\n    table_length = ap_get_table_length(&<span class=\"supfact\">header</span>);\n    if (table_length) {\n      local_table = (acpi_table_header *)calloc(Number, table_length);\n      if (local_table) {\n        fseek(table_file, file_offset, Number);\n        count = fread(local_table, Number, table_length, table_file);\n        if (table_length == count) {\n          ap_is_valid_checksum(local_table);\n        } else {\n          fprintf(stderr, String, <span class=\"supfact\">header</span>.signature);\n          status = Number;\n        }\n      } else {\n        fprintf(stderr, String, <span class=\"supfact\">header</span>.signature, table_length);\n        status = Number;\n      }\n    } else {\n      status = Number;\n    }\n    goto exit;\n  }\n  fprintf(stderr, String, filename);\n  status = Number;\nexit:\n  fclose(table_file);\n  *table = local_table;\n  return status;\n}", "var": [{"name": "ptr", "type": "struct acpi_table_header { char[4] signature; u32 length; u8 revision; u8 checksum; char[6] oem_id; char[8] oem_table_id; u32 oem_revision; char[4] asl_compiler_id; u32 asl_compiler_revision; }", "pred_name": "header", "ref_name": "header", "ref_type": "struct acpi_table_header { char[4] signature; u32 length; u8 revision; u8 checksum; char[6] oem_id; char[8] oem_table_id; u32 oem_revision; char[4] asl_compiler_id; u32 asl_compiler_revision; }"}], "body_in_train": true}, {"repo_owner": "postgrespro", "repo_name": "sqljson", "path": "postgrespro/sqljson/6d782ab441c4344e134823cc29cebef2313a8b494c89b35841d1b19836ab1e7e", "path_in_repo": "postgrespro/sqljson//src/bin/pg_test_timing/pg_test_timing.o", "objdump": "000000000000029d <test_timing>:\n 29d:\t55                   \tpush   %rbp\n 29e:\t48 89 e5             \tmov    %rsp,%rbp\n 2a1:\t48 83 ec 70          \tsub    $0x70,%rsp\n 2a5:\t89 7d 9c             \tmov    %edi,-0x64(%rbp)\n 2a8:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 2af:\t00 \n 2b0:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n 2b7:\t00 \n 2b8:\t83 7d 9c 00          \tcmpl   $0x0,-0x64(%rbp)\n 2bc:\t7e 0e                \tjle    2cc <test_timing+0x2f>\n 2be:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n 2c1:\t48 98                \tcltq   \n 2c3:\t48 69 c0 40 42 0f 00 \timul   $0xf4240,%rax,%rax\n 2ca:\teb 05                \tjmp    2d1 <test_timing+0x34>\n 2cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2d1:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 2d5:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 2d9:\t48 89 c6             \tmov    %rax,%rsi\n 2dc:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 2e1:\te8 00 00 00 00       \tcallq  2e6 <test_timing+0x49>\n 2e6:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 2ea:\t48 69 f0 40 42 0f 00 \timul   $0xf4240,%rax,%rsi\n 2f1:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n 2f5:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n 2fc:\t9b c4 20 \n 2ff:\t48 89 c8             \tmov    %rcx,%rax\n 302:\t48 f7 ea             \timul   %rdx\n 305:\t48 c1 fa 07          \tsar    $0x7,%rdx\n 309:\t48 89 c8             \tmov    %rcx,%rax\n 30c:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n 310:\t48 29 c2             \tsub    %rax,%rdx\n 313:\t48 89 d0             \tmov    %rdx,%rax\n 316:\t48 01 f0             \tadd    %rsi,%rax\n 319:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 31d:\te9 5d 01 00 00       \tjmpq   47f <test_timing+0x1e2>\n 322:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n 329:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 32d:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 331:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 335:\t48 89 c6             \tmov    %rax,%rsi\n 338:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 33d:\te8 00 00 00 00       \tcallq  342 <test_timing+0xa5>\n 342:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 346:\t48 69 f0 40 42 0f 00 \timul   $0xf4240,%rax,%rsi\n 34d:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n 351:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n 358:\t9b c4 20 \n 35b:\t48 89 c8             \tmov    %rcx,%rax\n 35e:\t48 f7 ea             \timul   %rdx\n 361:\t48 c1 fa 07          \tsar    $0x7,%rdx\n 365:\t48 89 c8             \tmov    %rcx,%rax\n 368:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n 36c:\t48 29 c2             \tsub    %rax,%rdx\n 36f:\t48 89 d0             \tmov    %rdx,%rax\n 372:\t48 01 f0             \tadd    %rsi,%rax\n 375:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 379:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 37d:\t89 c2                \tmov    %eax,%edx\n 37f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 383:\t29 c2                \tsub    %eax,%edx\n 385:\t89 d0                \tmov    %edx,%eax\n 387:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 38a:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n 38e:\t79 46                \tjns    3d6 <test_timing+0x139>\n 390:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 397 <test_timing+0xfa>\n 397:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 39c:\t48 89 c7             \tmov    %rax,%rdi\n 39f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3a4:\te8 00 00 00 00       \tcallq  3a9 <test_timing+0x10c>\n 3a9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3b0 <test_timing+0x113>\n 3b0:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n 3b3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3b8:\t48 89 c7             \tmov    %rax,%rdi\n 3bb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3c0:\te8 00 00 00 00       \tcallq  3c5 <test_timing+0x128>\n 3c5:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 3ca:\te8 00 00 00 00       \tcallq  3cf <test_timing+0x132>\n 3cf:\td1 7d e4             \tsarl   -0x1c(%rbp)\n 3d2:\t83 45 e0 01          \taddl   $0x1,-0x20(%rbp)\n 3d6:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n 3da:\t75 f3                \tjne    3cf <test_timing+0x132>\n 3dc:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n 3df:\t48 98                \tcltq   \n 3e1:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 3e8:\t00 \n 3e9:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 3ed:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n 3f0:\t48 98                \tcltq   \n 3f2:\t48 89 14 c5 00 00 00 \tmov    %rdx,0x0(,%rax,8)\n 3f9:\t00 \n 3fa:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n 3ff:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n 403:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 407:\t48 29 c2             \tsub    %rax,%rdx\n 40a:\t48 89 d0             \tmov    %rdx,%rax\n 40d:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n 411:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n 415:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 419:\t48 29 c2             \tsub    %rax,%rdx\n 41c:\t48 89 d0             \tmov    %rdx,%rax\n 41f:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n 423:\teb 1a                \tjmp    43f <test_timing+0x1a2>\n 425:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 429:\t48 05 00 ca 9a 3b    \tadd    $0x3b9aca00,%rax\n 42f:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n 433:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 437:\t48 83 e8 01          \tsub    $0x1,%rax\n 43b:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n 43f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 443:\t48 85 c0             \ttest   %rax,%rax\n 446:\t78 dd                \tjs     425 <test_timing+0x188>\n 448:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 44c:\t48 69 f0 40 42 0f 00 \timul   $0xf4240,%rax,%rsi\n 453:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n 457:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n 45e:\t9b c4 20 \n 461:\t48 89 c8             \tmov    %rcx,%rax\n 464:\t48 f7 ea             \timul   %rdx\n 467:\t48 c1 fa 07          \tsar    $0x7,%rdx\n 46b:\t48 89 c8             \tmov    %rcx,%rax\n 46e:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n 472:\t48 29 c2             \tsub    %rax,%rdx\n 475:\t48 89 d0             \tmov    %rdx,%rax\n 478:\t48 01 f0             \tadd    %rsi,%rax\n 47b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 47f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 483:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n 487:\t0f 87 95 fe ff ff    \tja     322 <test_timing+0x85>\n 48d:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n 491:\t48 89 c6             \tmov    %rax,%rsi\n 494:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 499:\te8 00 00 00 00       \tcallq  49e <test_timing+0x201>\n 49e:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n 4a2:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 4a6:\t48 29 c2             \tsub    %rax,%rdx\n 4a9:\t48 89 d0             \tmov    %rdx,%rax\n 4ac:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n 4b0:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n 4b4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 4b8:\t48 29 c2             \tsub    %rax,%rdx\n 4bb:\t48 89 d0             \tmov    %rdx,%rax\n 4be:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n 4c2:\teb 1a                \tjmp    4de <test_timing+0x241>\n 4c4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 4c8:\t48 05 00 ca 9a 3b    \tadd    $0x3b9aca00,%rax\n 4ce:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n 4d2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 4d6:\t48 83 e8 01          \tsub    $0x1,%rax\n 4da:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n 4de:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 4e2:\t48 85 c0             \ttest   %rax,%rax\n 4e5:\t78 dd                \tjs     4c4 <test_timing+0x227>\n 4e7:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 4eb:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n 4f0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 4f4:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n 4f9:\tf2 0f 10 15 00 00 00 \tmovsd  0x0(%rip),%xmm2        # 501 <test_timing+0x264>\n 500:\t00 \n 501:\tf2 0f 5e c2          \tdivsd  %xmm2,%xmm0\n 505:\tf2 0f 58 c8          \taddsd  %xmm0,%xmm1\n 509:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 511 <test_timing+0x274>\n 510:\t00 \n 511:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n 515:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 519:\t48 85 c0             \ttest   %rax,%rax\n 51c:\t78 07                \tjs     525 <test_timing+0x288>\n 51e:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n 523:\teb 15                \tjmp    53a <test_timing+0x29d>\n 525:\t48 89 c2             \tmov    %rax,%rdx\n 528:\t48 d1 ea             \tshr    %rdx\n 52b:\t83 e0 01             \tand    $0x1,%eax\n 52e:\t48 09 c2             \tor     %rax,%rdx\n 531:\tf2 48 0f 2a c2       \tcvtsi2sd %rdx,%xmm0\n 536:\tf2 0f 58 c0          \taddsd  %xmm0,%xmm0\n 53a:\tf2 0f 5e c8          \tdivsd  %xmm0,%xmm1\n 53e:\t66 0f 28 c1          \tmovapd %xmm1,%xmm0\n 542:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 547:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 54c:\te8 00 00 00 00       \tcallq  551 <test_timing+0x2b4>\n 551:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 555:\tc9                   \tleaveq \n 556:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall test_timing(int a1) {\n  __int64 v1;\n  double v2;\n  struct timespec <span class=\"supfact\">v4</span>;\n  struct timespec <span class=\"supfact\">v5</span>;\n  struct timespec <span class=\"supfact\">tp</span>;\n  __time_t v7;\n  unsigned __int64 v8;\n  int v9;\n  int v10;\n  __time_t v11;\n  unsigned __int64 v12;\n  unsigned __int64 v13;\n  v13 = Number L;\n  v12 = Number L;\n  if (a1 <= Number)\n    v1 = Number L;\n  else\n    v1 = Number L * a1;\n  v8 = v1;\n  clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n  v11 =\n      Number * <span class=\"supfact\">tp</span>.tv_sec + <span class=\"supfact\">tp</span>.tv_nsec / Number;\n  while (v8 > v13) {\n    v9 = Number;\n    v7 = v11;\n    clock_gettime(Number, &<span class=\"supfact\">v4</span>);\n    v11 = Number * <span class=\"supfact\">v4</span>.tv_sec +\n          <span class=\"supfact\">v4</span>.tv_nsec / Number;\n    v10 = Number * LODWORD(<span class=\"supfact\">v4</span>.tv_sec) +\n          <span class=\"supfact\">v4</span>.tv_nsec / Number - v7;\n    if (v10 < Number) {\n      pg_fprintf(stderr, String);\n      pg_fprintf(stderr, String, (unsigned int)v10);\n      exit(Number);\n    }\n    while (v10) {\n      v10 >>= Number;\n      ++v9;\n    }\n    ++histogram[v9];\n    ++v12;\n    <span class=\"supfact\">v4</span>.tv_sec -= <span class=\"supfact\">tp</span>.tv_sec;\n    <span class=\"supfact\">v4</span>.tv_nsec -= <span class=\"supfact\">tp</span>.tv_nsec;\n    while (<span class=\"supfact\">v4</span>.tv_nsec < Number) {\n      <span class=\"supfact\">v4</span>.tv_nsec += Number L;\n      --<span class=\"supfact\">v4</span>.tv_sec;\n    }\n    v13 = Number * <span class=\"supfact\">v4</span>.tv_sec +\n          <span class=\"supfact\">v4</span>.tv_nsec / Number;\n  }\n  clock_gettime(Number, &<span class=\"supfact\">v5</span>);\n  <span class=\"supfact\">v5</span>.tv_sec -= <span class=\"supfact\">tp</span>.tv_sec;\n  <span class=\"supfact\">v5</span>.tv_nsec -= <span class=\"supfact\">tp</span>.tv_nsec;\n  while (<span class=\"supfact\">v5</span>.tv_nsec < Number) {\n    <span class=\"supfact\">v5</span>.tv_nsec += Number L;\n    --<span class=\"supfact\">v5</span>.tv_sec;\n  }\n  if ((v12 & Number) != Number L)\n    v2 = (double)(int)(v12 & Number | (v12 >> Number)) +\n         (double)(int)(v12 & Number | (v12 >> Number));\n  else\n    v2 = (double)(int)v12;\n  pg_printf(String, ((double)SLODWORD(<span class=\"supfact\">v5</span>.tv_sec) +\n                     (double)SLODWORD(<span class=\"supfact\">v5</span>.tv_nsec) / Number) *\n                        Number / v2);\n  return v12;\n}", "code_t": "uint64 __cdecl test_timing(int32 duration) {\n  uint64 v1;\n  double v2;\n  instr_time <span class=\"supfact\">temp</span>;\n  instr_time <span class=\"supfact\">end_time</span>;\n  instr_time <span class=\"supfact\">start_time</span>;\n  uint64 prev;\n  uint64 total_time;\n  int32 bits;\n  int32 diff;\n  uint64 cur;\n  uint64 loop_count;\n  int64 time_elapsed;\n  time_elapsed = Number L;\n  loop_count = Number L;\n  if (duration <= Number)\n    v1 = Number L;\n  else\n    v1 = Number L * duration;\n  total_time = v1;\n  clock_gettime(Number, &<span class=\"supfact\">start_time</span>);\n  cur = Number * <span class=\"supfact\">start_time</span>.tv_sec +\n        <span class=\"supfact\">start_time</span>.tv_nsec / Number;\n  while (total_time > time_elapsed) {\n    bits = Number;\n    prev = cur;\n    clock_gettime(Number, &<span class=\"supfact\">temp</span>);\n    cur = Number * <span class=\"supfact\">temp</span>.tv_sec +\n          <span class=\"supfact\">temp</span>.tv_nsec / Number;\n    diff = Number * LODWORD(<span class=\"supfact\">temp</span>.tv_sec) +\n           <span class=\"supfact\">temp</span>.tv_nsec / Number - prev;\n    if (diff < Number) {\n      pg_fprintf(stderr, String);\n      pg_fprintf(stderr, String, (unsigned int)diff);\n      exit(Number);\n    }\n    while (diff) {\n      diff >>= Number;\n      ++bits;\n    }\n    ++histogram[bits];\n    ++loop_count;\n    <span class=\"supfact\">temp</span>.tv_sec -= <span class=\"supfact\">start_time</span>.tv_sec;\n    <span class=\"supfact\">temp</span>.tv_nsec -= <span class=\"supfact\">start_time</span>.tv_nsec;\n    while (<span class=\"supfact\">temp</span>.tv_nsec < Number) {\n      <span class=\"supfact\">temp</span>.tv_nsec += Number L;\n      --<span class=\"supfact\">temp</span>.tv_sec;\n    }\n    time_elapsed = Number * <span class=\"supfact\">temp</span>.tv_sec +\n                   <span class=\"supfact\">temp</span>.tv_nsec / Number;\n  }\n  clock_gettime(Number, &<span class=\"supfact\">end_time</span>);\n  <span class=\"supfact\">end_time</span>.tv_sec -= <span class=\"supfact\">start_time</span>.tv_sec;\n  <span class=\"supfact\">end_time</span>.tv_nsec -= <span class=\"supfact\">start_time</span>.tv_nsec;\n  while (<span class=\"supfact\">end_time</span>.tv_nsec < Number) {\n    <span class=\"supfact\">end_time</span>.tv_nsec += Number L;\n    --<span class=\"supfact\">end_time</span>.tv_sec;\n  }\n  if ((loop_count & Number) != Number L)\n    v2 = (double)(int)(loop_count & Number | (loop_count >> Number)) +\n         (double)(int)(loop_count & Number | (loop_count >> Number));\n  else\n    v2 = (double)(int)loop_count;\n  pg_printf(String,\n            ((double)SLODWORD(<span class=\"supfact\">end_time</span>.tv_sec) +\n             (double)SLODWORD(<span class=\"supfact\">end_time</span>.tv_nsec) / Number) *\n                Number / v2);\n  return loop_count;\n}", "var": [{"name": "v4", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "pred_name": "__unk__", "ref_name": "temp", "ref_type": "struct instr_time { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}, {"name": "v5", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "pred_name": "__unk__", "ref_name": "end_time", "ref_type": "struct instr_time { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}, {"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "pred_name": "__unk__", "ref_name": "start_time", "ref_type": "struct instr_time { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "ProjectVault", "repo_name": "orp", "path": "ProjectVault/orp/8ab0fa6a75642037601404d6690f67a740733a4e568ebda70fab018caaa449ea", "path_in_repo": "ProjectVault/orp/third-party/qemu-orp/hw/display/exynos4210_fimd.o", "objdump": "0000000000001386 <draw_line_palette_1>:\n    1386:\t55                   \tpush   %rbp\n    1387:\t48 89 e5             \tmov    %rsp,%rbp\n    138a:\t48 83 ec 60          \tsub    $0x60,%rsp\n    138e:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    1392:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    1396:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n    139a:\t89 c8                \tmov    %ecx,%eax\n    139c:\t88 45 a4             \tmov    %al,-0x5c(%rbp)\n    139f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    13a6:\t00 00 \n    13a8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    13ac:\t31 c0                \txor    %eax,%eax\n    13ae:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    13b2:\t0f b7 80 5c 04 00 00 \tmovzwl 0x45c(%rax),%eax\n    13b9:\t0f b7 d0             \tmovzwl %ax,%edx\n    13bc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    13c0:\t0f b7 80 58 04 00 00 \tmovzwl 0x458(%rax),%eax\n    13c7:\t0f b7 c0             \tmovzwl %ax,%eax\n    13ca:\t29 c2                \tsub    %eax,%edx\n    13cc:\t89 d0                \tmov    %edx,%eax\n    13ce:\t83 c0 01             \tadd    $0x1,%eax\n    13d1:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    13d4:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    13d8:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    13dc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    13e0:\t8b 00                \tmov    (%rax),%eax\n    13e2:\tc1 e8 0f             \tshr    $0xf,%eax\n    13e5:\t83 e0 0f             \tand    $0xf,%eax\n    13e8:\t88 45 cf             \tmov    %al,-0x31(%rbp)\n    13eb:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    13ef:\t48 8b 00             \tmov    (%rax),%rax\n    13f2:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    13f6:\t48 83 45 b0 08       \taddq   $0x8,-0x50(%rbp)\n    13fb:\t0f b6 45 cf          \tmovzbl -0x31(%rbp),%eax\n    13ff:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n    1403:\t48 89 d6             \tmov    %rdx,%rsi\n    1406:\t89 c7                \tmov    %eax,%edi\n    1408:\te8 f7 ed ff ff       \tcallq  204 <fimd_swap_data>\n    140d:\tc7 45 d4 3f 00 00 00 \tmovl   $0x3f,-0x2c(%rbp)\n    1414:\te9 a7 00 00 00       \tjmpq   14c0 <draw_line_palette_1+0x13a>\n    1419:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    141d:\t4c 8b 80 40 04 00 00 \tmov    0x440(%rax),%r8\n    1424:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1428:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    142b:\t89 c1                \tmov    %eax,%ecx\n    142d:\t48 d3 ea             \tshr    %cl,%rdx\n    1430:\t48 89 d0             \tmov    %rdx,%rax\n    1433:\t83 e0 01             \tand    $0x1,%eax\n    1436:\t48 89 c2             \tmov    %rax,%rdx\n    1439:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    143d:\t48 83 c2 0c          \tadd    $0xc,%rdx\n    1441:\t8b 44 90 04          \tmov    0x4(%rax,%rdx,4),%eax\n    1445:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    1449:\t48 89 d6             \tmov    %rdx,%rsi\n    144c:\t89 c7                \tmov    %eax,%edi\n    144e:\t41 ff d0             \tcallq  *%r8\n    1451:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1455:\t48 8b 88 50 04 00 00 \tmov    0x450(%rax),%rcx\n    145c:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    145f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1463:\t89 d6                \tmov    %edx,%esi\n    1465:\t48 89 c7             \tmov    %rax,%rdi\n    1468:\tff d1                \tcallq  *%rcx\n    146a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    146d:\t80 7d a4 00          \tcmpb   $0x0,-0x5c(%rbp)\n    1471:\t74 30                \tje     14a3 <draw_line_palette_1+0x11d>\n    1473:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n    1477:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    147b:\t48 89 d6             \tmov    %rdx,%rsi\n    147e:\t48 89 c7             \tmov    %rax,%rdi\n    1481:\te8 0c f5 ff ff       \tcallq  992 <get_pixel_ifb>\n    1486:\t48 98                \tcltq   \n    1488:\t48 01 45 e0          \tadd    %rax,-0x20(%rbp)\n    148c:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    1490:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    1494:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1498:\t48 89 ce             \tmov    %rcx,%rsi\n    149b:\t48 89 c7             \tmov    %rax,%rdi\n    149e:\te8 91 fb ff ff       \tcallq  1034 <exynos4210_fimd_blend_pixel>\n    14a3:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    14a7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    14ab:\t48 89 d6             \tmov    %rdx,%rsi\n    14ae:\t48 89 c7             \tmov    %rax,%rdi\n    14b1:\te8 8a f4 ff ff       \tcallq  940 <put_pixel_ifb>\n    14b6:\t48 98                \tcltq   \n    14b8:\t48 01 45 a8          \tadd    %rax,-0x58(%rbp)\n    14bc:\t83 6d d4 01          \tsubl   $0x1,-0x2c(%rbp)\n    14c0:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    14c4:\t0f 89 4f ff ff ff    \tjns    1419 <draw_line_palette_1+0x93>\n    14ca:\t83 6d d0 40          \tsubl   $0x40,-0x30(%rbp)\n    14ce:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n    14d2:\t0f 8f 13 ff ff ff    \tjg     13eb <draw_line_palette_1+0x65>\n    14d8:\t90                   \tnop\n    14d9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    14dd:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    14e4:\t00 00 \n    14e6:\t74 05                \tje     14ed <draw_line_palette_1+0x167>\n    14e8:\te8 00 00 00 00       \tcallq  14ed <draw_line_palette_1+0x167>\n    14ed:\tc9                   \tleaveq \n    14ee:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall draw_line_palette_1(__int64 a1,\n                                                unsigned __int64 *a2,\n                                                __int64 a3, char a4) {\n  int v4;\n  __int64 v7;\n  char v9;\n  int v10;\n  int i;\n  unsigned __int64 v12;\n  __int64 v13;\n  __int64 <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  unsigned __int64 v16;\n  v7 = a3;\n  v16 = __readfsqword(Number);\n  v10 = *(unsigned __int16 *)(a1 + Number) -\n        *(unsigned __int16 *)(a1 + Number) + Number;\n  v13 = a3;\n  v9 = (*(_DWORD *)a1 >> Number) & Number;\n  do {\n    v12 = *a2++;\n    fimd_swap_data(v9, &v12);\n    for (i = Number; i >= Number; --i) {\n      (*(void(__fastcall **)(_QWORD, __int64 *))(a1 + Number))(\n          *(unsigned int *)(a1 + Number * (((v12 >> i) & Number) + Number) +\n                            Number),\n          &<span class=\"supfact\">v14</span>);\n      HIDWORD(<span class=\"supfact\">v14</span>) =\n          (*(__int64(__fastcall **)(__int64, _QWORD))(a1 + Number))(\n              a1, HIDWORD(<span class=\"supfact\">v14</span>));\n      if (a4) {\n        v4 = get_pixel_ifb(v13, (__int64)&<span class=\"supfact\">v15</span>);\n        v13 += v4;\n        exynos4210_fimd_blend_pixel((_DWORD *)a1, <span class=\"supfact\">v15</span>,\n                                    (__int64)&<span class=\"supfact\">v14</span>);\n      }\n      v7 += (int)put_pixel_ifb(<span class=\"supfact\">v14</span>, v7);\n    }\n    v10 -= Number;\n  } while (v10 > Number);\n  return __readfsqword(Number) ^ v16;\n}", "code_t": "void __cdecl draw_line_palette_1(Exynos4210fimdWindow_0 *w, uint8_t *src,\n                                 uint8_t *dst, bool blend) {\n  int v4;\n  rgba v5;\n  rgba v6;\n  uint8_t *dsta;\n  uint8_t swap;\n  int width;\n  int i;\n  uint64_t data;\n  uint8_t *ifb;\n  rgba <span class=\"supfact\">p</span>;\n  rgba <span class=\"supfact\">p_old</span>;\n  unsigned __int64 v18;\n  dsta = dst;\n  v18 = __readfsqword(Number);\n  width = w->rightbot_x - w->lefttop_x + Number;\n  ifb = dst;\n  swap = (w->wincon >> Number) & Number;\n  do {\n    data = *(_QWORD *)src;\n    src += Number;\n    fimd_swap_data(swap, &data);\n    for (i = Number; i >= Number; --i) {\n      w->pixel_to_rgb(w->palette[(data >> i) & Number], &<span class=\"supfact\">p</span>);\n      <span class=\"supfact\">p</span>.a = w->get_alpha(w, <span class=\"supfact\">p</span>.a);\n      if (blend) {\n        v4 = get_pixel_ifb(ifb, &<span class=\"supfact\">p_old</span>);\n        ifb += v4;\n        v5 = <span class=\"supfact\">p_old</span>;\n        exynos4210_fimd_blend_pixel(w, v5, &<span class=\"supfact\">p</span>);\n      }\n      v6 = <span class=\"supfact\">p</span>;\n      dsta += put_pixel_ifb(v6, dsta);\n    }\n    width -= Number;\n  } while (width > Number);\n}", "var": [{"name": "v14", "type": "struct rgba { uint8_t r; uint8_t g; uint8_t b; PADDING (1); uint32_t a; }", "pred_name": "p", "ref_name": "p", "ref_type": "struct rgba { uint8_t r; uint8_t g; uint8_t b; PADDING (1); uint32_t a; }"}, {"name": "v15", "type": "struct rgba { uint8_t r; uint8_t g; uint8_t b; PADDING (1); uint32_t a; }", "pred_name": "p_old", "ref_name": "p_old", "ref_type": "struct rgba { uint8_t r; uint8_t g; uint8_t b; PADDING (1); uint32_t a; }"}], "body_in_train": true}, {"repo_owner": "nmacs", "repo_name": "lm3s-uclinux", "path": "nmacs/lm3s-uclinux/a798273fbf2411fd0849bd9fca28282850448604dc7d2e8fd7f54a0facb686ee", "path_in_repo": "nmacs/lm3s-uclinux/user/mtd-utils/mtd-utils-1.5.0/tests/fs-tests/stress/atoms/stress_3", "objdump": "000000000040586a <tests_fs_is_rootfs>:\n  40586a:\t55                   \tpush   %rbp\n  40586b:\t48 89 e5             \tmov    %rsp,%rbp\n  40586e:\t48 81 ec 20 01 00 00 \tsub    $0x120,%rsp\n  405875:\t48 8b 05 5c 39 00 00 \tmov    0x395c(%rip),%rax        # 4091d8 <tests_file_system_mount_dir>\n  40587c:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  405883:\t48 89 d6             \tmov    %rdx,%rsi\n  405886:\t48 89 c7             \tmov    %rax,%rdi\n  405889:\te8 c2 03 00 00       \tcallq  405c50 <__stat>\n  40588e:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  405891:\t0f 95 c0             \tsetne  %al\n  405894:\t0f b6 c0             \tmovzbl %al,%eax\n  405897:\tb9 b0 04 00 00       \tmov    $0x4b0,%ecx\n  40589c:\tba ef 66 40 00       \tmov    $0x4066ef,%edx\n  4058a1:\tbe 10 6b 40 00       \tmov    $0x406b10,%esi\n  4058a6:\t89 c7                \tmov    %eax,%edi\n  4058a8:\te8 c5 ce ff ff       \tcallq  402772 <tests_test>\n  4058ad:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n  4058b4:\t48 89 c6             \tmov    %rax,%rsi\n  4058b7:\tbf 8f 67 40 00       \tmov    $0x40678f,%edi\n  4058bc:\te8 8f 03 00 00       \tcallq  405c50 <__stat>\n  4058c1:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4058c4:\t0f 95 c0             \tsetne  %al\n  4058c7:\t0f b6 c0             \tmovzbl %al,%eax\n  4058ca:\tb9 b1 04 00 00       \tmov    $0x4b1,%ecx\n  4058cf:\tba ef 66 40 00       \tmov    $0x4066ef,%edx\n  4058d4:\tbe 10 6b 40 00       \tmov    $0x406b10,%esi\n  4058d9:\t89 c7                \tmov    %eax,%edi\n  4058db:\te8 92 ce ff ff       \tcallq  402772 <tests_test>\n  4058e0:\t48 8b 95 70 ff ff ff \tmov    -0x90(%rbp),%rdx\n  4058e7:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n  4058ee:\t48 39 c2             \tcmp    %rax,%rdx\n  4058f1:\t75 07                \tjne    4058fa <tests_fs_is_rootfs+0x90>\n  4058f3:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4058f8:\teb 05                \tjmp    4058ff <tests_fs_is_rootfs+0x95>\n  4058fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4058ff:\tc9                   \tleaveq \n  405900:\tc3                   \tretq   ", "code_s": "_BOOL8 tests_fs_is_rootfs() {\n  int v0;\n  int v1;\n  struct stat <span class=\"supfact\">v3</span>;\n  struct stat <span class=\"supfact\">v4</span>;\n  v0 = stat(tests_file_system_mount_dir, &<span class=\"supfact\">v4</span>);\n  tests_test(v0 != Number, String, String, Number);\n  v1 = stat(String, &<span class=\"supfact\">v3</span>);\n  tests_test(v1 != Number, String, String, Number);\n  return <span class=\"supfact\">v4</span>.st_dev == <span class=\"supfact\">v3</span>.st_dev;\n}", "code_t": "int __cdecl tests_fs_is_rootfs() {\n  int v0;\n  int v1;\n  stat <span class=\"supfact\">root_f_info</span>;\n  stat <span class=\"supfact\">f_info</span>;\n  v0 = stat_0(tests_file_system_mount_dir, &<span class=\"supfact\">f_info</span>);\n  tests_test(v0 != Number, String, String, Number);\n  v1 = stat_0(String, &<span class=\"supfact\">root_f_info</span>);\n  tests_test(v1 != Number, String, String, Number);\n  return <span class=\"supfact\">f_info</span>.st_dev == <span class=\"supfact\">root_f_info</span>.st_dev;\n}", "var": [{"name": "v3", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "root_f_info", "ref_name": "root_f_info", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}, {"name": "v4", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "f_info", "ref_name": "f_info", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/b91df0dd35cf5646c5a75dc0470b01a9002de38c1a4bbbd76c40360aac3725bd", "path_in_repo": "AlexanderVangelov/pjsip//pjlib/bin/pjlib-test-x86_64-unknown-linux-gnu", "objdump": "0000000000426271 <pj_sock_bind_in>:\n  426271:\t55                   \tpush   %rbp\n  426272:\t48 89 e5             \tmov    %rsp,%rbp\n  426275:\t48 83 ec 20          \tsub    $0x20,%rsp\n  426279:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  42627d:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  426280:\t89 d0                \tmov    %edx,%eax\n  426282:\t66 89 45 e0          \tmov    %ax,-0x20(%rbp)\n  426286:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  42628b:\t66 89 45 f0          \tmov    %ax,-0x10(%rbp)\n  42628f:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  426293:\t48 83 c0 08          \tadd    $0x8,%rax\n  426297:\tbe 08 00 00 00       \tmov    $0x8,%esi\n  42629c:\t48 89 c7             \tmov    %rax,%rdi\n  42629f:\te8 d9 f9 ff ff       \tcallq  425c7d <pj_bzero>\n  4262a4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4262a7:\t89 c7                \tmov    %eax,%edi\n  4262a9:\te8 71 fa ff ff       \tcallq  425d1f <pj_htonl>\n  4262ae:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4262b1:\t0f b7 45 e0          \tmovzwl -0x20(%rbp),%eax\n  4262b5:\t89 c7                \tmov    %eax,%edi\n  4262b7:\te8 31 fa ff ff       \tcallq  425ced <pj_htons>\n  4262bc:\t66 89 45 f2          \tmov    %ax,-0xe(%rbp)\n  4262c0:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n  4262c4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4262c8:\tba 10 00 00 00       \tmov    $0x10,%edx\n  4262cd:\t48 89 ce             \tmov    %rcx,%rsi\n  4262d0:\t48 89 c7             \tmov    %rax,%rdi\n  4262d3:\te8 0a ff ff ff       \tcallq  4261e2 <pj_sock_bind>\n  4262d8:\tc9                   \tleaveq \n  4262d9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_sock_bind_in(int a1, uint32_t a2, uint16_t a3) {\n  struct sockaddr <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span>.sa_family = Number;\n  pj_bzero_10(&<span class=\"supfact\">v5</span>.sa_data[Number], Number);\n  *(_DWORD *)&<span class=\"supfact\">v5</span>.sa_data[Number] = pj_htonl(a2);\n  *(_WORD *)<span class=\"supfact\">v5</span>.sa_data = pj_htons(a3);\n  return pj_sock_bind(a1, &<span class=\"supfact\">v5</span>, Number);\n}", "code_t": "pj_status_t __cdecl pj_sock_bind_in(pj_sock_t sock, pj_uint32_t addr32,\n                                    pj_uint16_t port) {\n  pj_sockaddr_in_0 <span class=\"supfact\">addr</span>;\n  <span class=\"supfact\">addr</span>.sin_family = Number;\n  pj_bzero_10(<span class=\"supfact\">addr</span>.sin_zero, Number);\n  <span class=\"supfact\">addr</span>.sin_addr.s_addr = pj_htonl(addr32);\n  <span class=\"supfact\">addr</span>.sin_port = pj_htons(port);\n  return pj_sock_bind(sock, &<span class=\"supfact\">addr</span>, Number);\n}", "var": [{"name": "v5", "type": "struct pj_sockaddr_in_0 { pj_uint16_t sin_family; pj_uint16_t sin_port; pj_in_addr_0 sin_addr; char[8] sin_zero; }", "pred_name": "addr", "ref_name": "addr", "ref_type": "struct pj_sockaddr_in_0 { pj_uint16_t sin_family; pj_uint16_t sin_port; pj_in_addr_0 sin_addr; char[8] sin_zero; }"}], "body_in_train": true}, {"repo_owner": "caninos-loucos", "repo_name": "CaninosSDK", "path": "caninos-loucos/CaninosSDK/872cbcbb8666f6bf6c537aa22e5d62a0ebf899dc6ead6807cfc45bde990dc139", "path_in_repo": "caninos-loucos/CaninosSDK/owl/out/labrador_debian_coreV2/kernel/scripts/dtc/flattree.o", "objdump": "000000000000164e <dt_to_asm>:\n    164e:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    1655:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    165a:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    165f:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n    1663:\t48 c7 44 24 78 00 00 \tmovq   $0x0,0x78(%rsp)\n    166a:\t00 00 \n    166c:\t48 c7 44 24 40 00 00 \tmovq   $0x0,0x40(%rsp)\n    1673:\t00 00 \n    1675:\t48 c7 44 24 48 00 00 \tmovq   $0x0,0x48(%rsp)\n    167c:\t00 00 \n    167e:\t48 c7 44 24 50 00 00 \tmovq   $0x0,0x50(%rsp)\n    1685:\t00 00 \n    1687:\t48 c7 44 24 58 00 00 \tmovq   $0x0,0x58(%rsp)\n    168e:\t00 00 \n    1690:\tc7 44 24 74 00 00 00 \tmovl   $0x0,0x74(%rsp)\n    1697:\t00 \n    1698:\teb 32                \tjmp    16cc <dt_to_asm+0x7e>\n    169a:\t8b 44 24 74          \tmov    0x74(%rsp),%eax\n    169e:\t48 98                \tcltq   \n    16a0:\t48 c1 e0 04          \tshl    $0x4,%rax\n    16a4:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    16aa:\t8b 00                \tmov    (%rax),%eax\n    16ac:\t39 44 24 0c          \tcmp    %eax,0xc(%rsp)\n    16b0:\t75 15                \tjne    16c7 <dt_to_asm+0x79>\n    16b2:\t8b 44 24 74          \tmov    0x74(%rsp),%eax\n    16b6:\t48 98                \tcltq   \n    16b8:\t48 c1 e0 04          \tshl    $0x4,%rax\n    16bc:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    16c2:\t48 89 44 24 78       \tmov    %rax,0x78(%rsp)\n    16c7:\t83 44 24 74 01       \taddl   $0x1,0x74(%rsp)\n    16cc:\t8b 44 24 74          \tmov    0x74(%rsp),%eax\n    16d0:\t83 f8 04             \tcmp    $0x4,%eax\n    16d3:\t76 c5                \tjbe    169a <dt_to_asm+0x4c>\n    16d5:\t48 83 7c 24 78 00    \tcmpq   $0x0,0x78(%rsp)\n    16db:\t75 15                \tjne    16f2 <dt_to_asm+0xa4>\n    16dd:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    16e1:\t89 c6                \tmov    %eax,%esi\n    16e3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    16e8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    16ed:\te8 0a ea ff ff       \tcallq  fc <die>\n    16f2:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    16f7:\t48 89 c1             \tmov    %rax,%rcx\n    16fa:\tba 29 00 00 00       \tmov    $0x29,%edx\n    16ff:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1704:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1709:\te8 00 00 00 00       \tcallq  170e <dt_to_asm+0xc0>\n    170e:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1713:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1718:\tba 00 00 00 00       \tmov    $0x0,%edx\n    171d:\t48 89 ce             \tmov    %rcx,%rsi\n    1720:\t48 89 c7             \tmov    %rax,%rdi\n    1723:\te8 3b ed ff ff       \tcallq  463 <emit_label>\n    1728:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    172d:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1732:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1737:\t48 89 ce             \tmov    %rcx,%rsi\n    173a:\t48 89 c7             \tmov    %rax,%rdi\n    173d:\te8 21 ed ff ff       \tcallq  463 <emit_label>\n    1742:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1747:\t48 89 c1             \tmov    %rax,%rcx\n    174a:\tba 0d 00 00 00       \tmov    $0xd,%edx\n    174f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1754:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1759:\te8 00 00 00 00       \tcallq  175e <dt_to_asm+0x110>\n    175e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1763:\tbe ed fe 0d d0       \tmov    $0xd00dfeed,%esi\n    1768:\t48 89 c7             \tmov    %rax,%rdi\n    176b:\te8 c3 ed ff ff       \tcallq  533 <asm_emit_cell>\n    1770:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1775:\t48 89 c1             \tmov    %rax,%rcx\n    1778:\tba 11 00 00 00       \tmov    $0x11,%edx\n    177d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1782:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1787:\te8 00 00 00 00       \tcallq  178c <dt_to_asm+0x13e>\n    178c:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1791:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1796:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    179b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    17a0:\t48 89 c7             \tmov    %rax,%rdi\n    17a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    17a8:\te8 00 00 00 00       \tcallq  17ad <dt_to_asm+0x15f>\n    17ad:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    17b2:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    17b7:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    17bc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    17c1:\t48 89 c7             \tmov    %rax,%rdi\n    17c4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    17c9:\te8 00 00 00 00       \tcallq  17ce <dt_to_asm+0x180>\n    17ce:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    17d3:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    17d8:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    17dd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    17e2:\t48 89 c7             \tmov    %rax,%rdi\n    17e5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    17ea:\te8 00 00 00 00       \tcallq  17ef <dt_to_asm+0x1a1>\n    17ef:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    17f4:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    17f9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    17fe:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1803:\t48 89 c7             \tmov    %rax,%rdi\n    1806:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    180b:\te8 00 00 00 00       \tcallq  1810 <dt_to_asm+0x1c2>\n    1810:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1815:\t48 89 c1             \tmov    %rax,%rcx\n    1818:\tba 15 00 00 00       \tmov    $0x15,%edx\n    181d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1822:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1827:\te8 00 00 00 00       \tcallq  182c <dt_to_asm+0x1de>\n    182c:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1831:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1836:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    183b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1840:\t48 89 c7             \tmov    %rax,%rdi\n    1843:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1848:\te8 00 00 00 00       \tcallq  184d <dt_to_asm+0x1ff>\n    184d:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1852:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1857:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    185c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1861:\t48 89 c7             \tmov    %rax,%rdi\n    1864:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1869:\te8 00 00 00 00       \tcallq  186e <dt_to_asm+0x220>\n    186e:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1873:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1878:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    187d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1882:\t48 89 c7             \tmov    %rax,%rdi\n    1885:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    188a:\te8 00 00 00 00       \tcallq  188f <dt_to_asm+0x241>\n    188f:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1894:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1899:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    189e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    18a3:\t48 89 c7             \tmov    %rax,%rdi\n    18a6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    18ab:\te8 00 00 00 00       \tcallq  18b0 <dt_to_asm+0x262>\n    18b0:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    18b5:\t48 89 c1             \tmov    %rax,%rcx\n    18b8:\tba 16 00 00 00       \tmov    $0x16,%edx\n    18bd:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    18c2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    18c7:\te8 00 00 00 00       \tcallq  18cc <dt_to_asm+0x27e>\n    18cc:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    18d1:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    18d6:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    18db:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    18e0:\t48 89 c7             \tmov    %rax,%rdi\n    18e3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    18e8:\te8 00 00 00 00       \tcallq  18ed <dt_to_asm+0x29f>\n    18ed:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    18f2:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    18f7:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    18fc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1901:\t48 89 c7             \tmov    %rax,%rdi\n    1904:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1909:\te8 00 00 00 00       \tcallq  190e <dt_to_asm+0x2c0>\n    190e:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1913:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1918:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    191d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1922:\t48 89 c7             \tmov    %rax,%rdi\n    1925:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    192a:\te8 00 00 00 00       \tcallq  192f <dt_to_asm+0x2e1>\n    192f:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1934:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1939:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    193e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1943:\t48 89 c7             \tmov    %rax,%rdi\n    1946:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    194b:\te8 00 00 00 00       \tcallq  1950 <dt_to_asm+0x302>\n    1950:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1955:\t48 89 c1             \tmov    %rax,%rcx\n    1958:\tba 16 00 00 00       \tmov    $0x16,%edx\n    195d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1962:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1967:\te8 00 00 00 00       \tcallq  196c <dt_to_asm+0x31e>\n    196c:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1971:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1976:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    197b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1980:\t48 89 c7             \tmov    %rax,%rdi\n    1983:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1988:\te8 00 00 00 00       \tcallq  198d <dt_to_asm+0x33f>\n    198d:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1992:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1997:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    199c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    19a1:\t48 89 c7             \tmov    %rax,%rdi\n    19a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    19a9:\te8 00 00 00 00       \tcallq  19ae <dt_to_asm+0x360>\n    19ae:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    19b3:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    19b8:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    19bd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    19c2:\t48 89 c7             \tmov    %rax,%rdi\n    19c5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    19ca:\te8 00 00 00 00       \tcallq  19cf <dt_to_asm+0x381>\n    19cf:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    19d4:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    19d9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    19de:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    19e3:\t48 89 c7             \tmov    %rax,%rdi\n    19e6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    19eb:\te8 00 00 00 00       \tcallq  19f0 <dt_to_asm+0x3a2>\n    19f0:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    19f5:\t48 89 c1             \tmov    %rax,%rcx\n    19f8:\tba 0f 00 00 00       \tmov    $0xf,%edx\n    19fd:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1a02:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1a07:\te8 00 00 00 00       \tcallq  1a0c <dt_to_asm+0x3be>\n    1a0c:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    1a11:\t8b 00                \tmov    (%rax),%eax\n    1a13:\t89 c2                \tmov    %eax,%edx\n    1a15:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1a1a:\t89 d6                \tmov    %edx,%esi\n    1a1c:\t48 89 c7             \tmov    %rax,%rdi\n    1a1f:\te8 0f eb ff ff       \tcallq  533 <asm_emit_cell>\n    1a24:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1a29:\t48 89 c1             \tmov    %rax,%rcx\n    1a2c:\tba 19 00 00 00       \tmov    $0x19,%edx\n    1a31:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1a36:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1a3b:\te8 00 00 00 00       \tcallq  1a40 <dt_to_asm+0x3f2>\n    1a40:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    1a45:\t8b 40 04             \tmov    0x4(%rax),%eax\n    1a48:\t89 c2                \tmov    %eax,%edx\n    1a4a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1a4f:\t89 d6                \tmov    %edx,%esi\n    1a51:\t48 89 c7             \tmov    %rax,%rdi\n    1a54:\te8 da ea ff ff       \tcallq  533 <asm_emit_cell>\n    1a59:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    1a5e:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    1a61:\t83 e0 08             \tand    $0x8,%eax\n    1a64:\t85 c0                \ttest   %eax,%eax\n    1a66:\t74 33                \tje     1a9b <dt_to_asm+0x44d>\n    1a68:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1a6d:\t48 89 c1             \tmov    %rax,%rcx\n    1a70:\tba 17 00 00 00       \tmov    $0x17,%edx\n    1a75:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1a7a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1a7f:\te8 00 00 00 00       \tcallq  1a84 <dt_to_asm+0x436>\n    1a84:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1a89:\t8b 50 10             \tmov    0x10(%rax),%edx\n    1a8c:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1a91:\t89 d6                \tmov    %edx,%esi\n    1a93:\t48 89 c7             \tmov    %rax,%rdi\n    1a96:\te8 98 ea ff ff       \tcallq  533 <asm_emit_cell>\n    1a9b:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    1aa0:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    1aa3:\t83 e0 10             \tand    $0x10,%eax\n    1aa6:\t85 c0                \ttest   %eax,%eax\n    1aa8:\t0f 84 a0 00 00 00    \tje     1b4e <dt_to_asm+0x500>\n    1aae:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1ab3:\t48 89 c1             \tmov    %rax,%rcx\n    1ab6:\tba 17 00 00 00       \tmov    $0x17,%edx\n    1abb:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1ac0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1ac5:\te8 00 00 00 00       \tcallq  1aca <dt_to_asm+0x47c>\n    1aca:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1acf:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1ad4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1ad9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ade:\t48 89 c7             \tmov    %rax,%rdi\n    1ae1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ae6:\te8 00 00 00 00       \tcallq  1aeb <dt_to_asm+0x49d>\n    1aeb:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1af0:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1af5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1afa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1aff:\t48 89 c7             \tmov    %rax,%rdi\n    1b02:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b07:\te8 00 00 00 00       \tcallq  1b0c <dt_to_asm+0x4be>\n    1b0c:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1b11:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1b16:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1b1b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b20:\t48 89 c7             \tmov    %rax,%rdi\n    1b23:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b28:\te8 00 00 00 00       \tcallq  1b2d <dt_to_asm+0x4df>\n    1b2d:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1b32:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1b37:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1b3c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b41:\t48 89 c7             \tmov    %rax,%rdi\n    1b44:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b49:\te8 00 00 00 00       \tcallq  1b4e <dt_to_asm+0x500>\n    1b4e:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    1b53:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    1b56:\t83 e0 20             \tand    $0x20,%eax\n    1b59:\t85 c0                \ttest   %eax,%eax\n    1b5b:\t0f 84 a0 00 00 00    \tje     1c01 <dt_to_asm+0x5b3>\n    1b61:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1b66:\t48 89 c1             \tmov    %rax,%rcx\n    1b69:\tba 16 00 00 00       \tmov    $0x16,%edx\n    1b6e:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1b73:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1b78:\te8 00 00 00 00       \tcallq  1b7d <dt_to_asm+0x52f>\n    1b7d:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1b82:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1b87:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1b8c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b91:\t48 89 c7             \tmov    %rax,%rdi\n    1b94:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b99:\te8 00 00 00 00       \tcallq  1b9e <dt_to_asm+0x550>\n    1b9e:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1ba3:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1ba8:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1bad:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1bb2:\t48 89 c7             \tmov    %rax,%rdi\n    1bb5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1bba:\te8 00 00 00 00       \tcallq  1bbf <dt_to_asm+0x571>\n    1bbf:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1bc4:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1bc9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1bce:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1bd3:\t48 89 c7             \tmov    %rax,%rdi\n    1bd6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1bdb:\te8 00 00 00 00       \tcallq  1be0 <dt_to_asm+0x592>\n    1be0:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1be5:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1bea:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1bef:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1bf4:\t48 89 c7             \tmov    %rax,%rdi\n    1bf7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1bfc:\te8 00 00 00 00       \tcallq  1c01 <dt_to_asm+0x5b3>\n    1c01:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1c06:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    1c0b:\t48 89 c7             \tmov    %rax,%rdi\n    1c0e:\te8 11 ea ff ff       \tcallq  624 <asm_emit_align>\n    1c13:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1c18:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1c1d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1c22:\t48 89 ce             \tmov    %rcx,%rsi\n    1c25:\t48 89 c7             \tmov    %rax,%rdi\n    1c28:\te8 36 e8 ff ff       \tcallq  463 <emit_label>\n    1c2d:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1c32:\t48 89 c1             \tmov    %rax,%rcx\n    1c35:\tba 2a 00 00 00       \tmov    $0x2a,%edx\n    1c3a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1c3f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1c44:\te8 00 00 00 00       \tcallq  1c49 <dt_to_asm+0x5fb>\n    1c49:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1c4e:\t48 8b 00             \tmov    (%rax),%rax\n    1c51:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n    1c56:\te9 b7 02 00 00       \tjmpq   1f12 <dt_to_asm+0x8c4>\n    1c5b:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1c60:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1c64:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n    1c69:\teb 59                \tjmp    1cc4 <dt_to_asm+0x676>\n    1c6b:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1c70:\t8b 00                \tmov    (%rax),%eax\n    1c72:\t85 c0                \ttest   %eax,%eax\n    1c74:\t75 40                \tjne    1cb6 <dt_to_asm+0x668>\n    1c76:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1c7b:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    1c7f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1c84:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c89:\t48 89 c7             \tmov    %rax,%rdi\n    1c8c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c91:\te8 00 00 00 00       \tcallq  1c96 <dt_to_asm+0x648>\n    1c96:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1c9b:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    1c9f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1ca4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ca9:\t48 89 c7             \tmov    %rax,%rdi\n    1cac:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1cb1:\te8 00 00 00 00       \tcallq  1cb6 <dt_to_asm+0x668>\n    1cb6:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1cbb:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1cbf:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n    1cc4:\t48 83 7c 24 60 00    \tcmpq   $0x0,0x60(%rsp)\n    1cca:\t75 9f                \tjne    1c6b <dt_to_asm+0x61d>\n    1ccc:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1cd1:\t48 8b 00             \tmov    (%rax),%rax\n    1cd4:\t48 c1 e8 20          \tshr    $0x20,%rax\n    1cd8:\t89 c2                \tmov    %eax,%edx\n    1cda:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1cdf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ce4:\t48 89 c7             \tmov    %rax,%rdi\n    1ce7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1cec:\te8 00 00 00 00       \tcallq  1cf1 <dt_to_asm+0x6a3>\n    1cf1:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1cf6:\t48 8b 00             \tmov    (%rax),%rax\n    1cf9:\t48 c1 e8 20          \tshr    $0x20,%rax\n    1cfd:\t89 c2                \tmov    %eax,%edx\n    1cff:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1d04:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1d09:\t48 89 c7             \tmov    %rax,%rdi\n    1d0c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d11:\te8 00 00 00 00       \tcallq  1d16 <dt_to_asm+0x6c8>\n    1d16:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1d1b:\t48 8b 00             \tmov    (%rax),%rax\n    1d1e:\t48 c1 e8 20          \tshr    $0x20,%rax\n    1d22:\t89 c2                \tmov    %eax,%edx\n    1d24:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1d29:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1d2e:\t48 89 c7             \tmov    %rax,%rdi\n    1d31:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d36:\te8 00 00 00 00       \tcallq  1d3b <dt_to_asm+0x6ed>\n    1d3b:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1d40:\t48 8b 00             \tmov    (%rax),%rax\n    1d43:\t48 c1 e8 20          \tshr    $0x20,%rax\n    1d47:\t89 c2                \tmov    %eax,%edx\n    1d49:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1d4e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1d53:\t48 89 c7             \tmov    %rax,%rdi\n    1d56:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d5b:\te8 00 00 00 00       \tcallq  1d60 <dt_to_asm+0x712>\n    1d60:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1d65:\t48 8b 00             \tmov    (%rax),%rax\n    1d68:\t89 c2                \tmov    %eax,%edx\n    1d6a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1d6f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1d74:\t48 89 c7             \tmov    %rax,%rdi\n    1d77:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d7c:\te8 00 00 00 00       \tcallq  1d81 <dt_to_asm+0x733>\n    1d81:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1d86:\t48 8b 00             \tmov    (%rax),%rax\n    1d89:\t89 c2                \tmov    %eax,%edx\n    1d8b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1d90:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1d95:\t48 89 c7             \tmov    %rax,%rdi\n    1d98:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d9d:\te8 00 00 00 00       \tcallq  1da2 <dt_to_asm+0x754>\n    1da2:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1da7:\t48 8b 00             \tmov    (%rax),%rax\n    1daa:\t89 c2                \tmov    %eax,%edx\n    1dac:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1db1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1db6:\t48 89 c7             \tmov    %rax,%rdi\n    1db9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1dbe:\te8 00 00 00 00       \tcallq  1dc3 <dt_to_asm+0x775>\n    1dc3:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1dc8:\t48 8b 00             \tmov    (%rax),%rax\n    1dcb:\t89 c2                \tmov    %eax,%edx\n    1dcd:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1dd2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1dd7:\t48 89 c7             \tmov    %rax,%rdi\n    1dda:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ddf:\te8 00 00 00 00       \tcallq  1de4 <dt_to_asm+0x796>\n    1de4:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1de9:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1ded:\t48 c1 e8 20          \tshr    $0x20,%rax\n    1df1:\t89 c2                \tmov    %eax,%edx\n    1df3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1df8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1dfd:\t48 89 c7             \tmov    %rax,%rdi\n    1e00:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e05:\te8 00 00 00 00       \tcallq  1e0a <dt_to_asm+0x7bc>\n    1e0a:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1e0f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1e13:\t48 c1 e8 20          \tshr    $0x20,%rax\n    1e17:\t89 c2                \tmov    %eax,%edx\n    1e19:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1e1e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e23:\t48 89 c7             \tmov    %rax,%rdi\n    1e26:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e2b:\te8 00 00 00 00       \tcallq  1e30 <dt_to_asm+0x7e2>\n    1e30:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1e35:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1e39:\t48 c1 e8 20          \tshr    $0x20,%rax\n    1e3d:\t89 c2                \tmov    %eax,%edx\n    1e3f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1e44:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e49:\t48 89 c7             \tmov    %rax,%rdi\n    1e4c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e51:\te8 00 00 00 00       \tcallq  1e56 <dt_to_asm+0x808>\n    1e56:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1e5b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1e5f:\t48 c1 e8 20          \tshr    $0x20,%rax\n    1e63:\t89 c2                \tmov    %eax,%edx\n    1e65:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1e6a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e6f:\t48 89 c7             \tmov    %rax,%rdi\n    1e72:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e77:\te8 00 00 00 00       \tcallq  1e7c <dt_to_asm+0x82e>\n    1e7c:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1e81:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1e85:\t89 c2                \tmov    %eax,%edx\n    1e87:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1e8c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e91:\t48 89 c7             \tmov    %rax,%rdi\n    1e94:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e99:\te8 00 00 00 00       \tcallq  1e9e <dt_to_asm+0x850>\n    1e9e:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1ea3:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1ea7:\t89 c2                \tmov    %eax,%edx\n    1ea9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1eae:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1eb3:\t48 89 c7             \tmov    %rax,%rdi\n    1eb6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ebb:\te8 00 00 00 00       \tcallq  1ec0 <dt_to_asm+0x872>\n    1ec0:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1ec5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1ec9:\t89 c2                \tmov    %eax,%edx\n    1ecb:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1ed0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ed5:\t48 89 c7             \tmov    %rax,%rdi\n    1ed8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1edd:\te8 00 00 00 00       \tcallq  1ee2 <dt_to_asm+0x894>\n    1ee2:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1ee7:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1eeb:\t89 c2                \tmov    %eax,%edx\n    1eed:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1ef2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ef7:\t48 89 c7             \tmov    %rax,%rdi\n    1efa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1eff:\te8 00 00 00 00       \tcallq  1f04 <dt_to_asm+0x8b6>\n    1f04:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1f09:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1f0d:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n    1f12:\t48 83 7c 24 68 00    \tcmpq   $0x0,0x68(%rsp)\n    1f18:\t0f 85 3d fd ff ff    \tjne    1c5b <dt_to_asm+0x60d>\n    1f1e:\tc7 44 24 74 00 00 00 \tmovl   $0x0,0x74(%rsp)\n    1f25:\t00 \n    1f26:\teb 21                \tjmp    1f49 <dt_to_asm+0x8fb>\n    1f28:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1f2d:\t48 89 c1             \tmov    %rax,%rcx\n    1f30:\tba 18 00 00 00       \tmov    $0x18,%edx\n    1f35:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1f3a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1f3f:\te8 00 00 00 00       \tcallq  1f44 <dt_to_asm+0x8f6>\n    1f44:\t83 44 24 74 01       \taddl   $0x1,0x74(%rsp)\n    1f49:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1f4f <dt_to_asm+0x901>\n    1f4f:\t39 44 24 74          \tcmp    %eax,0x74(%rsp)\n    1f53:\t7c d3                \tjl     1f28 <dt_to_asm+0x8da>\n    1f55:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1f5a:\t48 89 c1             \tmov    %rax,%rcx\n    1f5d:\tba 18 00 00 00       \tmov    $0x18,%edx\n    1f62:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1f67:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1f6c:\te8 00 00 00 00       \tcallq  1f71 <dt_to_asm+0x923>\n    1f71:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1f76:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1f7b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1f80:\t48 89 ce             \tmov    %rcx,%rsi\n    1f83:\t48 89 c7             \tmov    %rax,%rdi\n    1f86:\te8 d8 e4 ff ff       \tcallq  463 <emit_label>\n    1f8b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1f90:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1f94:\t48 8b 74 24 78       \tmov    0x78(%rsp),%rsi\n    1f99:\t48 8d 4c 24 40       \tlea    0x40(%rsp),%rcx\n    1f9e:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n    1fa3:\t49 89 f0             \tmov    %rsi,%r8\n    1fa6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1fab:\t48 89 c7             \tmov    %rax,%rdi\n    1fae:\te8 98 ea ff ff       \tcallq  a4b <flatten_tree>\n    1fb3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1fb8:\t48 89 c1             \tmov    %rax,%rcx\n    1fbb:\tba 0f 00 00 00       \tmov    $0xf,%edx\n    1fc0:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1fc5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1fca:\te8 00 00 00 00       \tcallq  1fcf <dt_to_asm+0x981>\n    1fcf:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1fd4:\tbe 09 00 00 00       \tmov    $0x9,%esi\n    1fd9:\t48 89 c7             \tmov    %rax,%rdi\n    1fdc:\te8 52 e5 ff ff       \tcallq  533 <asm_emit_cell>\n    1fe1:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1fe6:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1feb:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1ff0:\t48 89 ce             \tmov    %rcx,%rsi\n    1ff3:\t48 89 c7             \tmov    %rax,%rdi\n    1ff6:\te8 68 e4 ff ff       \tcallq  463 <emit_label>\n    1ffb:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    2000:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2005:\tba 00 00 00 00       \tmov    $0x0,%edx\n    200a:\t48 89 ce             \tmov    %rcx,%rsi\n    200d:\t48 89 c7             \tmov    %rax,%rdi\n    2010:\te8 4e e4 ff ff       \tcallq  463 <emit_label>\n    2015:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    201a:\t48 83 ec 08          \tsub    $0x8,%rsp\n    201e:\tff 74 24 58          \tpushq  0x58(%rsp)\n    2022:\tff 74 24 58          \tpushq  0x58(%rsp)\n    2026:\tff 74 24 58          \tpushq  0x58(%rsp)\n    202a:\t48 89 c7             \tmov    %rax,%rdi\n    202d:\te8 af f5 ff ff       \tcallq  15e1 <dump_stringtable_asm>\n    2032:\t48 83 c4 20          \tadd    $0x20,%rsp\n    2036:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    203b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2040:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2045:\t48 89 ce             \tmov    %rcx,%rsi\n    2048:\t48 89 c7             \tmov    %rax,%rdi\n    204b:\te8 13 e4 ff ff       \tcallq  463 <emit_label>\n    2050:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    2055:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    205a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    205f:\t48 89 ce             \tmov    %rcx,%rsi\n    2062:\t48 89 c7             \tmov    %rax,%rdi\n    2065:\te8 f9 e3 ff ff       \tcallq  463 <emit_label>\n    206a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2070 <dt_to_asm+0xa22>\n    2070:\t85 c0                \ttest   %eax,%eax\n    2072:\t7e 2a                \tjle    209e <dt_to_asm+0xa50>\n    2074:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 207a <dt_to_asm+0xa2c>\n    207a:\t48 8b 74 24 58       \tmov    0x58(%rsp),%rsi\n    207f:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    2084:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2089:\t49 89 f0             \tmov    %rsi,%r8\n    208c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2091:\t48 89 c7             \tmov    %rax,%rdi\n    2094:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2099:\te8 00 00 00 00       \tcallq  209e <dt_to_asm+0xa50>\n    209e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 20a4 <dt_to_asm+0xa56>\n    20a4:\t85 c0                \ttest   %eax,%eax\n    20a6:\t7e 1d                \tjle    20c5 <dt_to_asm+0xa77>\n    20a8:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 20ae <dt_to_asm+0xa60>\n    20ae:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    20b3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    20b8:\t48 89 c7             \tmov    %rax,%rdi\n    20bb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    20c0:\te8 00 00 00 00       \tcallq  20c5 <dt_to_asm+0xa77>\n    20c5:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    20ca:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    20cf:\tba 00 00 00 00       \tmov    $0x0,%edx\n    20d4:\t48 89 ce             \tmov    %rcx,%rsi\n    20d7:\t48 89 c7             \tmov    %rax,%rdi\n    20da:\te8 84 e3 ff ff       \tcallq  463 <emit_label>\n    20df:\t48 83 ec 08          \tsub    $0x8,%rsp\n    20e3:\tff 74 24 58          \tpushq  0x58(%rsp)\n    20e7:\tff 74 24 58          \tpushq  0x58(%rsp)\n    20eb:\tff 74 24 58          \tpushq  0x58(%rsp)\n    20ef:\te8 00 00 00 00       \tcallq  20f4 <dt_to_asm+0xaa6>\n    20f4:\t48 83 c4 20          \tadd    $0x20,%rsp\n    20f8:\t90                   \tnop\n    20f9:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    2100:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dt_to_asm(FILE *a1, __int64 a2, __int64 a3, __int64 a4,\n                             __int64 a5, __int64 a6) {\n  const char *v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  const char *v11;\n  __int64 v12;\n  __int64 <span class=\"supfact\">v14</span>;\n  char *v15;\n  __int64 v16;\n  const char *v17;\n  __int64 k;\n  _QWORD *j;\n  unsigned int i;\n  unsigned int *v21;\n  v21 = Number L;\n  <span class=\"supfact\">v14</span> = Number L;\n  v15 = Number L;\n  v16 = Number L;\n  v17 = String;\n  for (i = Number; i <= Number; ++i) {\n    if ((_DWORD)a3 == version_table[Number * i])\n      v21 = &version_table[Number * i];\n  }\n  if (!v21)\n    die(String, (unsigned int)a3, a3, a4, a5, a6);\n  fwrite(String, Number, Number, a1);\n  emit_label(a1, v17, String);\n  emit_label(a1, v17, String);\n  fwrite(String, Number, Number, a1);\n  asm_emit_cell(a1, Number);\n  fwrite(String, Number, Number, a1);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fwrite(String, Number, Number, a1);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fwrite(String, Number, Number, a1);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fwrite(String, Number, Number, a1);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fprintf(a1, String, v17, v17);\n  fwrite(String, Number, Number, a1);\n  asm_emit_cell(a1, *v21);\n  fwrite(String, Number, Number, a1);\n  asm_emit_cell(a1, v21[Number]);\n  if ((v21[Number] & Number) != Number) {\n    fwrite(String, Number, Number, a1);\n    asm_emit_cell(a1, *(_DWORD *)(a2 + Number));\n  }\n  if ((v21[Number] & Number) != Number) {\n    fwrite(String, Number, Number, a1);\n    fprintf(a1, String, v17, v17);\n    fprintf(a1, String, v17, v17);\n    fprintf(a1, String, v17, v17);\n    fprintf(a1, String, v17, v17);\n  }\n  if ((v21[Number] & Number) != Number) {\n    fwrite(String, Number, Number, a1);\n    fprintf(a1, String, v17, v17);\n    fprintf(a1, String, v17, v17);\n    fprintf(a1, String, v17, v17);\n    fprintf(a1, String, v17, v17);\n  }\n  asm_emit_align(a1, Number);\n  emit_label(a1, v17, String);\n  fwrite(String, Number, Number, a1);\n  for (j = *(_QWORD **)a2; j; j = (_QWORD *)j[Number]) {\n    for (k = j[Number]; k; k = *(_QWORD *)(k + Number)) {\n      if (!*(_DWORD *)k) {\n        fprintf(a1, String, *(const char **)(k + Number));\n        fprintf(a1, String, *(const char **)(k + Number));\n      }\n    }\n    fprintf(a1, String, HIDWORD(*j));\n    fprintf(a1, String, HIDWORD(*j));\n    fprintf(a1, String, HIDWORD(*j));\n    fprintf(a1, String, HIDWORD(*j));\n    fprintf(a1, String, (unsigned int)*j);\n    fprintf(a1, String, (unsigned int)*j);\n    fprintf(a1, String, (unsigned int)*j);\n    fprintf(a1, String, (unsigned int)*j);\n    fprintf(a1, String, HIDWORD(j[Number]));\n    fprintf(a1, String, HIDWORD(j[Number]));\n    fprintf(a1, String, HIDWORD(j[Number]));\n    fprintf(a1, String, HIDWORD(j[Number]));\n    fprintf(a1, String, (unsigned int)j[Number]);\n    fprintf(a1, String, (unsigned int)j[Number]);\n    fprintf(a1, String, (unsigned int)j[Number]);\n    fprintf(a1, String, (unsigned int)j[Number]);\n  }\n  for (i = Number; (int)i < reservenum; ++i)\n    fwrite(String, Number, Number, a1);\n  fwrite(String, Number, Number, a1);\n  emit_label(a1, v17, String);\n  flatten_tree(*(unsigned int **)(a2 + Number), (__int64)asm_emitter,\n               (__int64)a1, (__int64)&<span class=\"supfact\">v14</span>, (__int64)v21);\n  fwrite(String, Number, Number, a1);\n  asm_emit_cell(a1, Number);\n  emit_label(a1, v17, String);\n  v6 = v17;\n  emit_label(a1, v17, String);\n  dump_stringtable_asm(a1, (__int64)v6, v7, v8, v9, v10, <span class=\"supfact\">v14</span>,\n                       v15);\n  emit_label(a1, v17, String);\n  emit_label(a1, v17, String);\n  if (minsize > Number)\n    fprintf(a1, String, minsize, v17, v17);\n  if (padsize > Number)\n    fprintf(a1, String, padsize);\n  v11 = v17;\n  emit_label(a1, v17, String);\n  return data_free(a1, v11, v12);\n}", "code_t": "void __cdecl dt_to_asm(FILE *f, boot_info *bi, int version) {\n  const char *v3;\n  __int64 v4;\n  data <span class=\"supfact\">strbuf</span>;\n  const char *symprefix;\n  label *l;\n  reserve_info *re;\n  int i;\n  version_info *vi;\n  vi = Number L;\n  *(_QWORD *)&<span class=\"supfact\">strbuf</span>.len = Number L;\n  <span class=\"supfact\">strbuf</span>.val = Number L;\n  <span class=\"supfact\">strbuf</span>.markers = Number L;\n  symprefix = String;\n  for (i = Number; (unsigned int)i <= Number; ++i) {\n    if (version == version_table[i].version)\n      vi = &version_table[i];\n  }\n  if (!vi)\n    die(String, (unsigned int)version);\n  fwrite(String, Number, Number, f);\n  emit_label(f, symprefix, String);\n  emit_label(f, symprefix, String);\n  fwrite(String, Number, Number, f);\n  asm_emit_cell(f, Number);\n  fwrite(String, Number, Number, f);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fwrite(String, Number, Number, f);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fwrite(String, Number, Number, f);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fwrite(String, Number, Number, f);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fprintf(f, String, symprefix, symprefix);\n  fwrite(String, Number, Number, f);\n  asm_emit_cell(f, vi->version);\n  fwrite(String, Number, Number, f);\n  asm_emit_cell(f, vi->last_comp_version);\n  if ((vi->flags & Number) != Number) {\n    fwrite(String, Number, Number, f);\n    asm_emit_cell(f, bi->boot_cpuid_phys);\n  }\n  if ((vi->flags & Number) != Number) {\n    fwrite(String, Number, Number, f);\n    fprintf(f, String, symprefix, symprefix);\n    fprintf(f, String, symprefix, symprefix);\n    fprintf(f, String, symprefix, symprefix);\n    fprintf(f, String, symprefix, symprefix);\n  }\n  if ((vi->flags & Number) != Number) {\n    fwrite(String, Number, Number, f);\n    fprintf(f, String, symprefix, symprefix);\n    fprintf(f, String, symprefix, symprefix);\n    fprintf(f, String, symprefix, symprefix);\n    fprintf(f, String, symprefix, symprefix);\n  }\n  asm_emit_align(f, Number);\n  emit_label(f, symprefix, String);\n  fwrite(String, Number, Number, f);\n  for (re = bi->reservelist; re; re = re->next) {\n    for (l = re->labels; l; l = l->next) {\n      if (!l->deleted) {\n        fprintf(f, String, l->label);\n        fprintf(f, String, l->label);\n      }\n    }\n    fprintf(f, String, HIDWORD(re->re.address));\n    fprintf(f, String, HIDWORD(re->re.address));\n    fprintf(f, String, HIDWORD(re->re.address));\n    fprintf(f, String, HIDWORD(re->re.address));\n    fprintf(f, String, (unsigned int)re->re.address);\n    fprintf(f, String, (unsigned int)re->re.address);\n    fprintf(f, String, (unsigned int)re->re.address);\n    fprintf(f, String, (unsigned int)re->re.address);\n    fprintf(f, String, HIDWORD(re->re.size));\n    fprintf(f, String, HIDWORD(re->re.size));\n    fprintf(f, String, HIDWORD(re->re.size));\n    fprintf(f, String, HIDWORD(re->re.size));\n    fprintf(f, String, (unsigned int)re->re.size);\n    fprintf(f, String, (unsigned int)re->re.size);\n    fprintf(f, String, (unsigned int)re->re.size);\n    fprintf(f, String, (unsigned int)re->re.size);\n  }\n  for (i = Number; i < reservenum; ++i)\n    fwrite(String, Number, Number, f);\n  fwrite(String, Number, Number, f);\n  emit_label(f, symprefix, String);\n  flatten_tree(bi->dt, &asm_emitter, f, &<span class=\"supfact\">strbuf</span>, vi);\n  fwrite(String, Number, Number, f);\n  asm_emit_cell(f, Number);\n  emit_label(f, symprefix, String);\n  emit_label(f, symprefix, String);\n  dump_stringtable_asm(f, <span class=\"supfact\">strbuf</span>);\n  emit_label(f, symprefix, String);\n  emit_label(f, symprefix, String);\n  if (minsize > Number)\n    fprintf(f, String, minsize, symprefix, symprefix);\n  if (padsize > Number)\n    fprintf(f, String, padsize);\n  v3 = symprefix;\n  emit_label(f, symprefix, String);\n  data_free(f, v3, v4);\n}", "var": [{"name": "v14", "type": "disappear", "pred_name": "", "ref_name": "strbuf", "ref_type": "struct data { int len; PADDING (4); char * val; marker * markers; }"}], "body_in_train": false}, {"repo_owner": "Gandio", "repo_name": "Practicas-POO", "path": "Gandio/Practicas-POO/5bd5395b270ac8fe91418bfb098d6889f9316d5a2dd2db5ac4c889178cf9e7b4", "path_in_repo": "Gandio/Practicas-POO/P2/usuario.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 70          \tsub    $0x70,%rsp\n   b:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n   f:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n  13:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  17:\t48 89 c7             \tmov    %rax,%rdi\n  1a:\te8 00 00 00 00       \tcallq  1f <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x1f>\n  1f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  23:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  27:\t48 89 c7             \tmov    %rax,%rdi\n  2a:\te8 00 00 00 00       \tcallq  2f <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x2f>\n  2f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  33:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  38:\t0f 84 15 01 00 00    \tje     153 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x153>\n  3e:\t48 8b 5d 88          \tmov    -0x78(%rbp),%rbx\n  42:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  46:\t4c 8b 20             \tmov    (%rax),%r12\n  49:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4d:\t48 89 c7             \tmov    %rax,%rdi\n  50:\te8 00 00 00 00       \tcallq  55 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x55>\n  55:\t48 8b 00             \tmov    (%rax),%rax\n  58:\t4c 89 e2             \tmov    %r12,%rdx\n  5b:\t48 89 c6             \tmov    %rax,%rsi\n  5e:\t48 89 df             \tmov    %rbx,%rdi\n  61:\te8 00 00 00 00       \tcallq  66 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x66>\n  66:\t84 c0                \ttest   %al,%al\n  68:\t74 12                \tje     7c <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x7c>\n  6a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  6e:\t48 89 c7             \tmov    %rax,%rdi\n  71:\te8 00 00 00 00       \tcallq  76 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x76>\n  76:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  7a:\teb b7                \tjmp    33 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x33>\n  7c:\t48 8b 5d 88          \tmov    -0x78(%rbp),%rbx\n  80:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  84:\t48 89 c7             \tmov    %rax,%rdi\n  87:\te8 00 00 00 00       \tcallq  8c <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x8c>\n  8c:\t48 8b 10             \tmov    (%rax),%rdx\n  8f:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  93:\t48 8b 00             \tmov    (%rax),%rax\n  96:\t48 89 c6             \tmov    %rax,%rsi\n  99:\t48 89 df             \tmov    %rbx,%rdi\n  9c:\te8 00 00 00 00       \tcallq  a1 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0xa1>\n  a1:\t84 c0                \ttest   %al,%al\n  a3:\t74 1d                \tje     c2 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0xc2>\n  a5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  a9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  b1:\t48 89 c7             \tmov    %rax,%rdi\n  b4:\te8 00 00 00 00       \tcallq  b9 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0xb9>\n  b9:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  bd:\te9 71 ff ff ff       \tjmpq   33 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x33>\n  c2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  c6:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  ca:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  ce:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  d2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  d6:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  da:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  de:\t48 89 c7             \tmov    %rax,%rdi\n  e1:\te8 00 00 00 00       \tcallq  e6 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0xe6>\n  e6:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  ea:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  ee:\t48 89 c7             \tmov    %rax,%rdi\n  f1:\te8 00 00 00 00       \tcallq  f6 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0xf6>\n  f6:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  fa:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n  fe:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 102:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n 106:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 10a:\t48 89 c7             \tmov    %rax,%rdi\n 10d:\te8 00 00 00 00       \tcallq  112 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x112>\n 112:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n 116:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n 11a:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 11e:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n 122:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 126:\t48 89 c7             \tmov    %rax,%rdi\n 129:\te8 00 00 00 00       \tcallq  12e <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x12e>\n 12e:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n 132:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n 136:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n 13a:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 13e:\t48 89 ce             \tmov    %rcx,%rsi\n 141:\t48 89 c7             \tmov    %rax,%rdi\n 144:\te8 00 00 00 00       \tcallq  149 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x149>\n 149:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 14d:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n 151:\teb 45                \tjmp    198 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x198>\n 153:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 157:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 15b:\t48 89 d6             \tmov    %rdx,%rsi\n 15e:\t48 89 c7             \tmov    %rax,%rdi\n 161:\te8 00 00 00 00       \tcallq  166 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x166>\n 166:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 16a:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n 16e:\t48 89 d6             \tmov    %rdx,%rsi\n 171:\t48 89 c7             \tmov    %rax,%rdi\n 174:\te8 00 00 00 00       \tcallq  179 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x179>\n 179:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 17d:\t48 8d 4d c8          \tlea    -0x38(%rbp),%rcx\n 181:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n 185:\t48 89 ce             \tmov    %rcx,%rsi\n 188:\t48 89 c7             \tmov    %rax,%rdi\n 18b:\te8 00 00 00 00       \tcallq  190 <_ZNSt8_Rb_treeIP8ArticuloSt4pairIKS1_jESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_+0x190>\n 190:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 194:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n 198:\t48 83 c4 70          \tadd    $0x70,%rsp\n 19c:\t5b                   \tpop    %rbx\n 19d:\t41 5c                \tpop    %r12\n 19f:\t5d                   \tpop    %rbp\n 1a0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n    _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n             std _Select1st<std pair<Articulo *const, unsigned int>>,\n             std less<Articulo *>,\n             std allocator<std pair<Articulo *const, unsigned int>>>\n    equal_range(__int64 a1, unsigned __int64 *a2) {\n  unsigned __int64 v2;\n  unsigned __int64 *v3;\n  unsigned __int64 *v4;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>[Number];\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  __int64 v15;\n  v15 = std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n      _M_begin(a1);\n  v14 = std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n      _M_end(a1);\n  while (v15) {\n    v2 = *a2;\n    v3 = (unsigned __int64 *)\n        std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n            _S_key(v15);\n    if (std less<Articulo *> operator()(a1, *v3, v2)) {\n      v15 =\n          std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                       std _Select1st<std pair<Articulo *const, unsigned int>>,\n                       std less<Articulo *>,\n                       std allocator<std pair<Articulo *const, unsigned int>>>\n              _S_right(v15);\n    } else {\n      v4 = (unsigned __int64 *)\n          std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                       std _Select1st<std pair<Articulo *const, unsigned int>>,\n                       std less<Articulo *>,\n                       std allocator<std pair<Articulo *const, unsigned int>>>\n              _S_key(v15);\n      if (!std less<Articulo *> operator()(a1, *a2, *v4)) {\n        v13 = v15;\n        v12 = v14;\n        v14 = v15;\n        v15 = std\n            _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n                _S_left(v15);\n        v13 = std\n            _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n                _S_right(v13);\n        <span class=\"supfact\">v7</span> = std\n            _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n                _M_upper_bound(a1, v13, v12, a2);\n        <span class=\"supfact\">v8</span> = std\n            _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n                _M_lower_bound(a1, v15, v14, a2);\n        std pair<std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n                 std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>>\n            pair<std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n                 std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n                 true>(&<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v8</span>,\n                       &<span class=\"supfact\">v7</span>);\n        return <span class=\"supfact\">v6</span>;\n      }\n      v14 = v15;\n      v15 =\n          std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                       std _Select1st<std pair<Articulo *const, unsigned int>>,\n                       std less<Articulo *>,\n                       std allocator<std pair<Articulo *const, unsigned int>>>\n              _S_left(v15);\n    }\n  }\n  std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>\n      _Rb_tree_iterator(<span class=\"supfact\">v10</span>, v14);\n  std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>\n      _Rb_tree_iterator(<span class=\"supfact\">v11</span>, v14);\n  std pair<std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n           std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>>\n      pair<std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n           std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n           true>(&<span class=\"supfact\">v9</span>, <span class=\"supfact\">v11</span>, <span class=\"supfact\">v10</span>);\n  return <span class=\"supfact\">v9</span>;\n}", "code_t": "std pair<\n    std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n    std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>> __cdecl std\n    _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n             std _Select1st<std pair<Articulo *const, unsigned int>>,\n             std less<Articulo *>,\n             std allocator<std pair<Articulo *const, unsigned int>>>\n    equal_range(\n        std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n            *const this,\n        Articulo *const *__k) {\n  Articulo *v2;\n  Articulo **v3;\n  Articulo **v4;\n  std pair<std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n           std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>>\n      <span class=\"supfact\">v6</span>;\n  std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>\n      <span class=\"supfact\">v7</span>;\n  std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>\n      <span class=\"supfact\">v8</span>;\n  std pair<std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n           std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>>\n      <span class=\"supfact\">v9</span>;\n  std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>\n      <span class=\"supfact\">v10</span>;\n  std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>\n      <span class=\"supfact\">v11</span>;\n  std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n               std _Select1st<std pair<Articulo *const, unsigned int>>,\n               std less<Articulo *>,\n               std allocator<std pair<Articulo *const, unsigned int>>>\n      _Base_ptr __yu;\n  std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n               std _Select1st<std pair<Articulo *const, unsigned int>>,\n               std less<Articulo *>,\n               std allocator<std pair<Articulo *const, unsigned int>>>\n      _Link_type __xu;\n  std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n               std _Select1st<std pair<Articulo *const, unsigned int>>,\n               std less<Articulo *>,\n               std allocator<std pair<Articulo *const, unsigned int>>>\n      _Base_ptr __y;\n  std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n               std _Select1st<std pair<Articulo *const, unsigned int>>,\n               std less<Articulo *>,\n               std allocator<std pair<Articulo *const, unsigned int>>>\n      _Link_type __x;\n  __x = std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n      _M_begin(this);\n  __y = std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n      _M_end(this);\n  while (__x) {\n    v2 = *__k;\n    v3 = (Articulo **)\n        std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n            _S_key(__x);\n    if (std less<Articulo *> operator()((const std less<Articulo *> *const)this,\n                                        *v3, v2)) {\n      __x =\n          std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                       std _Select1st<std pair<Articulo *const, unsigned int>>,\n                       std less<Articulo *>,\n                       std allocator<std pair<Articulo *const, unsigned int>>>\n              _S_right(__x);\n    } else {\n      v4 = (Articulo **)\n          std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                       std _Select1st<std pair<Articulo *const, unsigned int>>,\n                       std less<Articulo *>,\n                       std allocator<std pair<Articulo *const, unsigned int>>>\n              _S_key(__x);\n      if (!std less<Articulo *> operator()(\n              (const std less<Articulo *> *const)this, *__k, *v4)) {\n        __xu = __x;\n        __yu = __y;\n        __y = __x;\n        __x = std\n            _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n                _S_left(__x);\n        __xu = std\n            _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                     std _Select1st<std pair<Articulo *const, unsigned int>>,\n                     std less<Articulo *>,\n                     std allocator<std pair<Articulo *const, unsigned int>>>\n                _S_right(__xu);\n        <span class=\"supfact\">v7</span>._M_node =\n            std _Rb_tree<\n                Articulo *, std pair<Articulo *const, unsigned int>,\n                std _Select1st<std pair<Articulo *const, unsigned int>>,\n                std less<Articulo *>,\n                std allocator<std pair<Articulo *const, unsigned int>>>\n                _M_upper_bound(this, __xu, __yu, __k)._M_node;\n        <span class=\"supfact\">v8</span>._M_node =\n            std _Rb_tree<\n                Articulo *, std pair<Articulo *const, unsigned int>,\n                std _Select1st<std pair<Articulo *const, unsigned int>>,\n                std less<Articulo *>,\n                std allocator<std pair<Articulo *const, unsigned int>>>\n                _M_lower_bound(this, __x, __y, __k)._M_node;\n        std pair<std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n                 std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>>\n            pair<std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n                 std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n                 true>(&<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v8</span>,\n                       &<span class=\"supfact\">v7</span>);\n        return <span class=\"supfact\">v6</span>;\n      }\n      __y = __x;\n      __x =\n          std _Rb_tree<Articulo *, std pair<Articulo *const, unsigned int>,\n                       std _Select1st<std pair<Articulo *const, unsigned int>>,\n                       std less<Articulo *>,\n                       std allocator<std pair<Articulo *const, unsigned int>>>\n              _S_left(__x);\n    }\n  }\n  std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>\n      _Rb_tree_iterator(&<span class=\"supfact\">v10</span>, __y);\n  std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>\n      _Rb_tree_iterator(&<span class=\"supfact\">v11</span>, __y);\n  std pair<std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n           std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>>\n      pair<std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n           std _Rb_tree_iterator<std pair<Articulo *const, unsigned int>>,\n           true>(&<span class=\"supfact\">v9</span>, &<span class=\"supfact\">v11</span>,\n                 &<span class=\"supfact\">v10</span>);\n  return <span class=\"supfact\">v9</span>;\n}", "var": [{"name": "v6", "type": "__unk__", "pred_name": "v6", "ref_name": "v6", "ref_type": "struct std::pair<std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >,std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > first; std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > second; }"}, {"name": "v7", "type": "struct std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >::_Base_ptr _M_node; }", "pred_name": "v7", "ref_name": "v7", "ref_type": "struct std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >::_Base_ptr _M_node; }"}, {"name": "v8", "type": "struct std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >::_Base_ptr _M_node; }", "pred_name": "v8", "ref_name": "v8", "ref_type": "struct std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >::_Base_ptr _M_node; }"}, {"name": "v9", "type": "struct std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >::_Base_ptr _M_node; }", "pred_name": "v9", "ref_name": "v9", "ref_type": "struct std::pair<std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >,std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > first; std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > second; }"}, {"name": "v10", "type": "struct std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >::_Base_ptr _M_node; }", "pred_name": "v10", "ref_name": "v10", "ref_type": "struct std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >::_Base_ptr _M_node; }"}, {"name": "v11", "type": "struct std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >::_Base_ptr _M_node; }", "pred_name": "v11", "ref_name": "v11", "ref_type": "struct std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> > { std::_Rb_tree_iterator<std::pair<Articulo* const,unsigned int> >::_Base_ptr _M_node; }"}], "body_in_train": true}, {"repo_owner": "isDerek", "repo_name": "BTC-Device", "path": "isDerek/BTC-Device/9eb5bdb0143a63b31132ea31d83410eefa0b801b31f29f5ffc43fd093e6ca1ae", "path_in_repo": "isDerek/BTC-Device/BTC_APP/middleware/multicore/erpc/Debug/Linux/erpcsniffer/obj/erpcgen/src/types/Type.o", "objdump": "0000000000000000 <_ZNKSt6vectorIPN7erpcgen10EnumMemberESaIS2_EE3endEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  18:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  1c:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  20:\t48 89 d6             \tmov    %rdx,%rsi\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZNKSt6vectorIPN7erpcgen10EnumMemberESaIS2_EE3endEv+0x2b>\n  2b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  2f:\tc9                   \tleaveq \n  30:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<erpcgen EnumMember *> end(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 v3;\n  v3 = *(_QWORD *)(a1 + Number);\n  __gnu_cxx __normal_iterator<erpcgen EnumMember *const *,\n                              std vector<erpcgen EnumMember *>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>, &v3);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std vector<erpcgen EnumMember *> const_iterator __cdecl std\n    vector<erpcgen EnumMember *>\n    end(const std vector<erpcgen EnumMember *> *const this) {\n  __gnu_cxx __normal_iterator<erpcgen EnumMember *const *,\n                              std vector<erpcgen EnumMember *>>\n      <span class=\"supfact\">v2</span>;\n  erpcgen EnumMember **__i;\n  __i = this->_M_impl._M_finish;\n  __gnu_cxx __normal_iterator<erpcgen EnumMember *const *,\n                              std vector<erpcgen EnumMember *>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>,\n                        (erpcgen EnumMember *const *const *)&__i);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__unk__", "pred_name": "v2", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<erpcgen::EnumMember* const*,std::vector<erpcgen::EnumMember*> > { erpcgen::EnumMember *const * _M_current; }"}], "body_in_train": false}, {"repo_owner": "tellapart", "repo_name": "ubuntu-precise", "path": "tellapart/ubuntu-precise/0e72c736cc69445278478ca61405635b8923d49e61b3e87cd2e2a60bc8efb883", "path_in_repo": "tellapart/ubuntu-precise/tools/hv/hv_kvp_daemon", "objdump": "", "code_s": "int getaddrinfo(const char *name, const char *service,\n                const struct addrinfo *req,\n                struct addrinfo **<span class=\"supfact\">pai</span>) {\n  return getaddrinfo(name, service, req, <span class=\"supfact\">pai</span>);\n}", "code_t": "int getaddrinfo(const char *name, const char *service,\n                const struct addrinfo *req,\n                struct addrinfo **<span class=\"supfact\">pai</span>) {\n  return getaddrinfo(name, service, req, <span class=\"supfact\">pai</span>);\n}", "var": [{"name": "pai", "type": "struct addrinfo * *", "pred_name": "pai", "ref_name": "pai", "ref_type": "struct addrinfo * *"}], "body_in_train": true}, {"repo_owner": "tongtongbaike", "repo_name": "Linux_summary", "path": "tongtongbaike/Linux_summary/baf7a556168622bbd6fb66983777cb0454b941a8d175d87039c2bdbef7c066f8", "path_in_repo": "tongtongbaike/Linux_summary/tcp_socket/iotcp/iotcp/readv_writev/server", "objdump": "00000000004013f4 <main>:\n  4013f4:\t55                   \tpush   %rbp\n  4013f5:\t48 89 e5             \tmov    %rsp,%rbp\n  4013f8:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4013fc:\tbe 32 12 40 00       \tmov    $0x401232,%esi\n  401401:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  401406:\te8 a5 fc ff ff       \tcallq  4010b0 <signal@plt>\n  40140b:\tbe 32 12 40 00       \tmov    $0x401232,%esi\n  401410:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n  401415:\te8 96 fc ff ff       \tcallq  4010b0 <signal@plt>\n  40141a:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40141f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401424:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  401429:\te8 12 fd ff ff       \tcallq  401140 <socket@plt>\n  40142e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  401431:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  401435:\t79 19                \tjns    401450 <main+0x5c>\n  401437:\tbf 41 20 40 00       \tmov    $0x402041,%edi\n  40143c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401441:\te8 3a fc ff ff       \tcallq  401080 <printf@plt>\n  401446:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40144b:\te9 05 01 00 00       \tjmpq   401555 <main+0x161>\n  401450:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  401454:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  40145b:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n  401462:\t00 \n  401463:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n  401469:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40146e:\te8 1d fc ff ff       \tcallq  401090 <htonl@plt>\n  401473:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  401476:\tbf b8 22 00 00       \tmov    $0x22b8,%edi\n  40147b:\te8 f0 fb ff ff       \tcallq  401070 <htons@plt>\n  401480:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n  401484:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  401488:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40148b:\tba 10 00 00 00       \tmov    $0x10,%edx\n  401490:\t48 89 ce             \tmov    %rcx,%rsi\n  401493:\t89 c7                \tmov    %eax,%edi\n  401495:\te8 46 fc ff ff       \tcallq  4010e0 <bind@plt>\n  40149a:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40149d:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  4014a1:\t79 19                \tjns    4014bc <main+0xc8>\n  4014a3:\tbf 57 20 40 00       \tmov    $0x402057,%edi\n  4014a8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4014ad:\te8 ce fb ff ff       \tcallq  401080 <printf@plt>\n  4014b2:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4014b7:\te9 99 00 00 00       \tjmpq   401555 <main+0x161>\n  4014bc:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4014bf:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  4014c4:\t89 c7                \tmov    %eax,%edi\n  4014c6:\te8 05 fc ff ff       \tcallq  4010d0 <listen@plt>\n  4014cb:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4014ce:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  4014d2:\t79 16                \tjns    4014ea <main+0xf6>\n  4014d4:\tbf 65 20 40 00       \tmov    $0x402065,%edi\n  4014d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4014de:\te8 9d fb ff ff       \tcallq  401080 <printf@plt>\n  4014e3:\tb8 03 00 00 00       \tmov    $0x3,%eax\n  4014e8:\teb 6b                \tjmp    401555 <main+0x161>\n  4014ea:\tc7 45 cc 10 00 00 00 \tmovl   $0x10,-0x34(%rbp)\n  4014f1:\t48 8d 55 cc          \tlea    -0x34(%rbp),%rdx\n  4014f5:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  4014f9:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4014fc:\t48 89 ce             \tmov    %rcx,%rsi\n  4014ff:\t89 c7                \tmov    %eax,%edi\n  401501:\te8 fa fb ff ff       \tcallq  401100 <accept@plt>\n  401506:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  401509:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  40150d:\t79 16                \tjns    401525 <main+0x131>\n  40150f:\tbf 7b 20 40 00       \tmov    $0x40207b,%edi\n  401514:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401519:\te8 62 fb ff ff       \tcallq  401080 <printf@plt>\n  40151e:\tb8 03 00 00 00       \tmov    $0x3,%eax\n  401523:\teb 30                \tjmp    401555 <main+0x161>\n  401525:\te8 06 fc ff ff       \tcallq  401130 <fork@plt>\n  40152a:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40152d:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  401531:\t75 16                \tjne    401549 <main+0x155>\n  401533:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401536:\t89 c7                \tmov    %eax,%edi\n  401538:\te8 63 fb ff ff       \tcallq  4010a0 <close@plt>\n  40153d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  401540:\t89 c7                \tmov    %eax,%edi\n  401542:\te8 19 fd ff ff       \tcallq  401260 <proccess_conn_server>\n  401547:\teb a1                \tjmp    4014ea <main+0xf6>\n  401549:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40154c:\t89 c7                \tmov    %eax,%edi\n  40154e:\te8 4d fb ff ff       \tcallq  4010a0 <close@plt>\n  401553:\teb 95                \tjmp    4014ea <main+0xf6>\n  401555:\tc9                   \tleaveq \n  401556:\tc3                   \tretq   \n  401557:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n  40155e:\t00 00 ", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  socklen_t addr_len;\n  struct sockaddr <span class=\"supfact\">v5</span>;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  int v8;\n  int v9;\n  int fd;\n  signal(Number, (__sighandler_t)signal_proccess);\n  signal(Number, (__sighandler_t)signal_proccess);\n  fd = socket(Number, Number, Number);\n  if (fd >= Number) {\n    <span class=\"supfact\">addr</span>.sa_family = Number;\n    *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = Number L;\n    *(_DWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = htonl(Number);\n    *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(Number);\n    v9 = bind(fd, &<span class=\"supfact\">addr</span>, Number);\n    if (v9 >= Number) {\n      v9 = listen(fd, Number);\n      if (v9 >= Number) {\n        while (Number) {\n          addr_len = Number;\n          v8 = accept(fd, &<span class=\"supfact\">v5</span>, &addr_len);\n          if (v8 < Number)\n            break;\n          if (fork()) {\n            close(v8);\n          } else {\n            close(fd);\n            proccess_conn_server(v8);\n          }\n        }\n        printf(String);\n        result = Number;\n      } else {\n        printf(String);\n        result = Number;\n      }\n    } else {\n      printf(String);\n      result = Number;\n    }\n  } else {\n    printf(String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  int addr;\n  sockaddr_in <span class=\"supfact\">client_sock</span>;\n  sockaddr_in <span class=\"supfact\">server_sock</span>;\n  int sc;\n  int err;\n  int ss_0;\n  signal(Number, (__sighandler_t)signal_proccess);\n  signal(Number, (__sighandler_t)signal_proccess);\n  ss_0 = socket(Number, Number, Number);\n  if (ss_0 >= Number) {\n    <span class=\"supfact\">server_sock</span>.sin_family = Number;\n    *(_QWORD *)<span class=\"supfact\">server_sock</span>.sin_zero = Number L;\n    <span class=\"supfact\">server_sock</span>.sin_addr.s_addr = htonl(Number);\n    <span class=\"supfact\">server_sock</span>.sin_port = htons(Number);\n    err = bind(ss_0, (const struct sockaddr *)&<span class=\"supfact\">server_sock</span>,\n               Number);\n    if (err >= Number) {\n      err = listen(ss_0, Number);\n      if (err >= Number) {\n        while (Number) {\n          addr = Number;\n          sc = accept(ss_0, (struct sockaddr *)&<span class=\"supfact\">client_sock</span>,\n                      (socklen_t *)&addr);\n          if (sc < Number)\n            break;\n          if (fork()) {\n            close(sc);\n          } else {\n            close(ss_0);\n            proccess_conn_server(sc);\n          }\n        }\n        printf(String);\n        result = Number;\n      } else {\n        printf(String);\n        result = Number;\n      }\n    } else {\n      printf(String);\n      result = Number;\n    }\n  } else {\n    printf(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "pred_name": "client", "ref_name": "client_sock", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}, {"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "pred_name": "server", "ref_name": "server_sock", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "miguelfrde", "repo_name": "operatingsystems-iteso", "path": "miguelfrde/operatingsystems-iteso/5e248c33508acb03f329c25e2d8067018c617e1b300de94091ad13a31a861dac", "path_in_repo": "miguelfrde/operatingsystems-iteso/src/practica4/mfq", "objdump": "", "code_s": "int sigaction(int sig, const struct sigaction *act,\n              struct sigaction *<span class=\"supfact\">oact</span>) {\n  return sigaction(sig, act, <span class=\"supfact\">oact</span>);\n}", "code_t": "int sigaction(int sig, const struct sigaction *act,\n              struct sigaction *<span class=\"supfact\">oact</span>) {\n  return sigaction_0(sig, act, <span class=\"supfact\">oact</span>);\n}", "var": [{"name": "oact", "type": "struct sigaction *", "pred_name": "oact", "ref_name": "oact", "ref_type": "struct sigaction *"}], "body_in_train": true}, {"repo_owner": "mr-sven", "repo_name": "ipc-25hdc", "path": "mr-sven/ipc-25hdc/e1120b5465e62626791b129e335ee766c24edc44a729bd1e0d1c5d9d97d181ba", "path_in_repo": "mr-sven/ipc-25hdc/source/user/v4l2rtspserver/live555/liveMedia/MPEG1or2VideoStreamFramer.o", "objdump": "0000000000000020 <_ZN25MPEG1or2VideoStreamFramer9createNewER16UsageEnvironmentP12FramedSourcehd.cold>:\n  20:\t4c 89 e7             \tmov    %r12,%rdi\n  23:\tbe 18 01 00 00       \tmov    $0x118,%esi\n  28:\te8 00 00 00 00       \tcallq  2d <_ZN25MPEG1or2VideoStreamFramer9createNewER16UsageEnvironmentP12FramedSourcehd.cold+0xd>\n  2d:\t48 89 ef             \tmov    %rbp,%rdi\n  30:\te8 00 00 00 00       \tcallq  35 <_ZN25MPEG1or2VideoStreamFramer9createNewER16UsageEnvironmentP12FramedSourcehd.cold+0x15>\n  35:\t90                   \tnop", "code_s": "void __fastcall __noreturn MPEG1or2VideoStreamFramer createNew() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  void *v1;\n  operator delete(v1, Number);\n  Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "code_t": "void __fastcall __noreturn MPEG1or2VideoStreamFramer createNew() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  void *v1;\n  operator delete(v1, Number);\n  Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "var": [{"name": "v0", "type": "struct _Unwind_Exception *", "pred_name": "v0", "ref_name": "v0", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "liushengxi13689209566", "repo_name": "unix_network_progream_code", "path": "liushengxi13689209566/unix_network_progream_code/356bcf52d6bf75eb260b0c2cca8cf116e8c86da2a94f09d7a7b6417564cc4f2d", "path_in_repo": "liushengxi13689209566/unix_network_progream_code/unpv13e_dump/names/daytimetcpcli3", "objdump": "", "code_s": "int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,\n           struct timeval *<span class=\"supfact\">timeout</span>) {\n  return select(nfds, readfds, writefds, exceptfds, <span class=\"supfact\">timeout</span>);\n}", "code_t": "int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,\n           struct timeval *<span class=\"supfact\">timeout</span>) {\n  return select(nfds, readfds, writefds, exceptfds, <span class=\"supfact\">timeout</span>);\n}", "var": [{"name": "timeout", "type": "struct timeval *", "pred_name": "timeout", "ref_name": "timeout", "ref_type": "struct timeval *"}], "body_in_train": true}, {"repo_owner": "mDibyo", "repo_name": "py-dlib", "path": "mDibyo/py-dlib/2fa2177e5c70c6dd2530f6bfdee1cc921b3de9e5d513af3ae7a1dcf1683890fa", "path_in_repo": "mDibyo/py-dlib/dlib/test/sammon.o", "objdump": "0000000000000000 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 81 ec b8 01 00 00 \tsub    $0x1b8,%rsp\n   c:\t48 89 bd 48 fe ff ff \tmov    %rdi,-0x1b8(%rbp)\n  13:\t48 89 b5 40 fe ff ff \tmov    %rsi,-0x1c0(%rbp)\n  1a:\t48 8b 95 48 fe ff ff \tmov    -0x1b8(%rbp),%rdx\n  21:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n  28:\t48 89 d6             \tmov    %rdx,%rsi\n  2b:\t48 89 c7             \tmov    %rax,%rdi\n  2e:\te8 00 00 00 00       \tcallq  33 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x33>\n  33:\t0f b6 c0             \tmovzbl %al,%eax\n  36:\t85 c0                \ttest   %eax,%eax\n  38:\t0f 94 c0             \tsete   %al\n  3b:\t84 c0                \ttest   %al,%al\n  3d:\t0f 84 d1 00 00 00    \tje     114 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x114>\n  43:\t48 8b 85 48 fe ff ff \tmov    -0x1b8(%rbp),%rax\n  4a:\t48 89 c7             \tmov    %rax,%rdi\n  4d:\te8 00 00 00 00       \tcallq  52 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x52>\n  52:\t48 89 c3             \tmov    %rax,%rbx\n  55:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n  5c:\t48 89 c7             \tmov    %rax,%rdi\n  5f:\te8 00 00 00 00       \tcallq  64 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x64>\n  64:\t48 39 c3             \tcmp    %rax,%rbx\n  67:\t75 2d                \tjne    96 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x96>\n  69:\t48 8b 85 48 fe ff ff \tmov    -0x1b8(%rbp),%rax\n  70:\t48 89 c7             \tmov    %rax,%rdi\n  73:\te8 00 00 00 00       \tcallq  78 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x78>\n  78:\t48 89 c3             \tmov    %rax,%rbx\n  7b:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n  82:\t48 89 c7             \tmov    %rax,%rdi\n  85:\te8 00 00 00 00       \tcallq  8a <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x8a>\n  8a:\t48 39 c3             \tcmp    %rax,%rbx\n  8d:\t75 07                \tjne    96 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x96>\n  8f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  94:\teb 05                \tjmp    9b <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x9b>\n  96:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  9b:\t84 c0                \ttest   %al,%al\n  9d:\t74 1e                \tje     bd <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0xbd>\n  9f:\t48 8b 95 40 fe ff ff \tmov    -0x1c0(%rbp),%rdx\n  a6:\t48 8b 85 48 fe ff ff \tmov    -0x1b8(%rbp),%rax\n  ad:\t48 89 d6             \tmov    %rdx,%rsi\n  b0:\t48 89 c7             \tmov    %rax,%rdi\n  b3:\te8 00 00 00 00       \tcallq  b8 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0xb8>\n  b8:\te9 e0 00 00 00       \tjmpq   19d <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x19d>\n  bd:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n  c4:\t48 89 c7             \tmov    %rax,%rdi\n  c7:\te8 00 00 00 00       \tcallq  cc <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0xcc>\n  cc:\t48 89 c3             \tmov    %rax,%rbx\n  cf:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n  d6:\t48 89 c7             \tmov    %rax,%rdi\n  d9:\te8 00 00 00 00       \tcallq  de <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0xde>\n  de:\t48 89 c1             \tmov    %rax,%rcx\n  e1:\t48 8b 85 48 fe ff ff \tmov    -0x1b8(%rbp),%rax\n  e8:\t48 89 da             \tmov    %rbx,%rdx\n  eb:\t48 89 ce             \tmov    %rcx,%rsi\n  ee:\t48 89 c7             \tmov    %rax,%rdi\n  f1:\te8 00 00 00 00       \tcallq  f6 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0xf6>\n  f6:\t48 8b 95 40 fe ff ff \tmov    -0x1c0(%rbp),%rdx\n  fd:\t48 8b 85 48 fe ff ff \tmov    -0x1b8(%rbp),%rax\n 104:\t48 89 d6             \tmov    %rdx,%rsi\n 107:\t48 89 c7             \tmov    %rax,%rdi\n 10a:\te8 00 00 00 00       \tcallq  10f <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x10f>\n 10f:\te9 89 00 00 00       \tjmpq   19d <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x19d>\n 114:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n 11b:\t48 89 c7             \tmov    %rax,%rdi\n 11e:\te8 00 00 00 00       \tcallq  123 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x123>\n 123:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n 12a:\t48 89 c7             \tmov    %rax,%rdi\n 12d:\te8 00 00 00 00       \tcallq  132 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x132>\n 132:\t48 89 c3             \tmov    %rax,%rbx\n 135:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n 13c:\t48 89 c7             \tmov    %rax,%rdi\n 13f:\te8 00 00 00 00       \tcallq  144 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x144>\n 144:\t48 89 c1             \tmov    %rax,%rcx\n 147:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n 14e:\t48 89 da             \tmov    %rbx,%rdx\n 151:\t48 89 ce             \tmov    %rcx,%rsi\n 154:\t48 89 c7             \tmov    %rax,%rdi\n 157:\te8 00 00 00 00       \tcallq  15c <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x15c>\n 15c:\t48 8b 95 40 fe ff ff \tmov    -0x1c0(%rbp),%rdx\n 163:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n 16a:\t48 89 d6             \tmov    %rdx,%rsi\n 16d:\t48 89 c7             \tmov    %rax,%rdi\n 170:\te8 00 00 00 00       \tcallq  175 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x175>\n 175:\t48 8b 95 48 fe ff ff \tmov    -0x1b8(%rbp),%rdx\n 17c:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n 183:\t48 89 d6             \tmov    %rdx,%rsi\n 186:\t48 89 c7             \tmov    %rax,%rdi\n 189:\te8 00 00 00 00       \tcallq  18e <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x18e>\n 18e:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n 195:\t48 89 c7             \tmov    %rax,%rdi\n 198:\te8 00 00 00 00       \tcallq  19d <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x19d>\n 19d:\t48 8b 85 48 fe ff ff \tmov    -0x1b8(%rbp),%rax\n 1a4:\teb 1d                \tjmp    1c3 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x1c3>\n 1a6:\t48 89 c3             \tmov    %rax,%rbx\n 1a9:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n 1b0:\t48 89 c7             \tmov    %rax,%rdi\n 1b3:\te8 00 00 00 00       \tcallq  1b8 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x1b8>\n 1b8:\t48 89 d8             \tmov    %rbx,%rax\n 1bb:\t48 89 c7             \tmov    %rax,%rdi\n 1be:\te8 00 00 00 00       \tcallq  1c3 <_ZN4dlib6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEaSINS_19matrix_multiply_expINS_9matrix_opINS_7op_colmIS4_EEEENS7_INS_8op_transISA_EEEEEEEERS4_RKNS_10matrix_expIT_EE+0x1c3>\n 1c3:\t48 81 c4 b8 01 00 00 \tadd    $0x1b8,%rsp\n 1ca:\t5b                   \tpop    %rbx\n 1cb:\t5d                   \tpop    %rbp\n 1cc:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>\noperator=<dlib matrix_multiply_exp<\n    dlib matrix_op<dlib op_colm<dlib matrix<\n        double, Number, Number, dlib memory_manager_stateless_kernel_1<char>,\n        dlib row_major_layout>>>,\n    dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<dlib matrix<\n        double, Number, Number, dlib memory_manager_stateless_kernel_1<char>,\n        dlib row_major_layout>>>>>>>(_QWORD *a1, __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  _QWORD <span class=\"supfact\">v10</span>[Number];\n  if ((unsigned __int8)dlib matrix_exp<dlib matrix_multiply_exp<\n          dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>,\n          dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>>>>>\n          destructively_aliases<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>(a2, a1)) {\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout>\n        matrix((__int64)<span class=\"supfact\">v10</span>);\n    v7 = dlib matrix_exp<dlib matrix_multiply_exp<\n        dlib matrix_op<dlib op_colm<\n            dlib matrix<double, Number, Number,\n                        dlib memory_manager_stateless_kernel_1<char>,\n                        dlib row_major_layout>>>,\n        dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n            dlib matrix<double, Number, Number,\n                        dlib memory_manager_stateless_kernel_1<char>,\n                        dlib row_major_layout>>>>>>>\n        nc(a2);\n    v8 = dlib matrix_exp<dlib matrix_multiply_exp<\n        dlib matrix_op<dlib op_colm<\n            dlib matrix<double, Number, Number,\n                        dlib memory_manager_stateless_kernel_1<char>,\n                        dlib row_major_layout>>>,\n        dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n            dlib matrix<double, Number, Number,\n                        dlib memory_manager_stateless_kernel_1<char>,\n                        dlib row_major_layout>>>>>>>\n        nr(a2);\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout>\n        set_size(<span class=\"supfact\">v10</span>, v8, v7);\n    dlib matrix_assign<\n        dlib matrix<double, Number, Number,\n                    dlib memory_manager_stateless_kernel_1<char>,\n                    dlib row_major_layout>,\n        dlib matrix_multiply_exp<\n            dlib matrix_op<dlib op_colm<\n                dlib matrix<double, Number, Number,\n                            dlib memory_manager_stateless_kernel_1<char>,\n                            dlib row_major_layout>>>,\n            dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n                dlib matrix<double, Number, Number,\n                            dlib memory_manager_stateless_kernel_1<char>,\n                            dlib row_major_layout>>>>>>>(<span class=\"supfact\">v10</span>,\n                                                         a2);\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout>\n        swap((__int64)<span class=\"supfact\">v10</span>, (__int64)a1);\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout> ~matrix((__int64)<span class=\"supfact\">v10</span>);\n  } else {\n    v2 = dlib row_major_layout\n        layout<double, Number, Number,\n               dlib memory_manager_stateless_kernel_1<char>, Number>\n            nr((__int64)a1);\n    if (v2 != dlib matrix_exp<dlib matrix_multiply_exp<\n                  dlib matrix_op<dlib op_colm<\n                      dlib matrix<double, Number, Number,\n                                  dlib memory_manager_stateless_kernel_1<char>,\n                                  dlib row_major_layout>>>,\n                  dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n                      dlib matrix<double, Number, Number,\n                                  dlib memory_manager_stateless_kernel_1<char>,\n                                  dlib row_major_layout>>>>>>>\n                  nr(a2) ||\n        (v3 = dlib row_major_layout\n             layout<double, Number, Number,\n                    dlib memory_manager_stateless_kernel_1<char>, Number>\n                 nc((__int64)a1),\n         v3 != dlib matrix_exp<dlib matrix_multiply_exp<\n                   dlib matrix_op<dlib op_colm<\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>>,\n                   dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>>>>>>\n                   nc(a2))) {\n      v5 = dlib matrix_exp<dlib matrix_multiply_exp<\n          dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>,\n          dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>>>>>\n          nc(a2);\n      v6 = dlib matrix_exp<dlib matrix_multiply_exp<\n          dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>,\n          dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>>>>>\n          nr(a2);\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout>\n          set_size(a1, v6, v5);\n    }\n    dlib matrix_assign<\n        dlib matrix<double, Number, Number,\n                    dlib memory_manager_stateless_kernel_1<char>,\n                    dlib row_major_layout>,\n        dlib matrix_multiply_exp<\n            dlib matrix_op<dlib op_colm<\n                dlib matrix<double, Number, Number,\n                            dlib memory_manager_stateless_kernel_1<char>,\n                            dlib row_major_layout>>>,\n            dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n                dlib matrix<double, Number, Number,\n                            dlib memory_manager_stateless_kernel_1<char>,\n                            dlib row_major_layout>>>>>>>(a1, a2);\n  }\n  return a1;\n}", "code_t": "dlib matrix<double, Number, Number,\n            dlib memory_manager_stateless_kernel_1<char>,\n            dlib row_major_layout> *__cdecl dlib\n    matrix<double, Number, Number, dlib memory_manager_stateless_kernel_1<char>,\n           dlib row_major_layout>\n    operator=<dlib matrix_multiply_exp<\n        dlib matrix_op<dlib op_colm<\n            dlib matrix<double, Number, Number,\n                        dlib memory_manager_stateless_kernel_1<char>,\n                        dlib row_major_layout>>>,\n        dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n            dlib matrix<double, Number, Number,\n                        dlib memory_manager_stateless_kernel_1<char>,\n                        dlib row_major_layout>>>>>>>(\n        dlib matrix<double, Number, Number,\n                    dlib memory_manager_stateless_kernel_1<char>,\n                    dlib row_major_layout> *const this,\n        const dlib matrix_exp<dlib matrix_multiply_exp<\n            dlib matrix_op<dlib op_colm<\n                dlib matrix<double, Number, Number,\n                            dlib memory_manager_stateless_kernel_1<char>,\n                            dlib row_major_layout>>>,\n            dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n                dlib matrix<double, Number, Number,\n                            dlib memory_manager_stateless_kernel_1<char>,\n                            dlib row_major_layout>>>>>>> *m) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  dlib matrix<double, Number, Number,\n              dlib memory_manager_stateless_kernel_1<char>,\n              dlib row_major_layout>\n      <span class=\"supfact\">temp</span>;\n  if (dlib matrix_exp<dlib matrix_multiply_exp<\n          dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>,\n          dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>>>>>\n          destructively_aliases<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>(\n              m, (const dlib matrix_exp<\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>> *)this)) {\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout>\n        matrix(&<span class=\"supfact\">temp</span>);\n    v7 = dlib matrix_exp<dlib matrix_multiply_exp<\n        dlib matrix_op<dlib op_colm<\n            dlib matrix<double, Number, Number,\n                        dlib memory_manager_stateless_kernel_1<char>,\n                        dlib row_major_layout>>>,\n        dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n            dlib matrix<double, Number, Number,\n                        dlib memory_manager_stateless_kernel_1<char>,\n                        dlib row_major_layout>>>>>>>\n        nc(m);\n    v8 = dlib matrix_exp<dlib matrix_multiply_exp<\n        dlib matrix_op<dlib op_colm<\n            dlib matrix<double, Number, Number,\n                        dlib memory_manager_stateless_kernel_1<char>,\n                        dlib row_major_layout>>>,\n        dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n            dlib matrix<double, Number, Number,\n                        dlib memory_manager_stateless_kernel_1<char>,\n                        dlib row_major_layout>>>>>>>\n        nr(m);\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout>\n        set_size(&<span class=\"supfact\">temp</span>, v8, v7);\n    dlib matrix_assign<\n        dlib matrix<double, Number, Number,\n                    dlib memory_manager_stateless_kernel_1<char>,\n                    dlib row_major_layout>,\n        dlib matrix_multiply_exp<\n            dlib matrix_op<dlib op_colm<\n                dlib matrix<double, Number, Number,\n                            dlib memory_manager_stateless_kernel_1<char>,\n                            dlib row_major_layout>>>,\n            dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n                dlib matrix<double, Number, Number,\n                            dlib memory_manager_stateless_kernel_1<char>,\n                            dlib row_major_layout>>>>>>>(&<span class=\"supfact\">temp</span>,\n                                                         m);\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout>\n        swap(&<span class=\"supfact\">temp</span>, this);\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout> ~matrix(&<span class=\"supfact\">temp</span>);\n  } else {\n    v2 = dlib row_major_layout\n        layout<double, Number, Number,\n               dlib memory_manager_stateless_kernel_1<char>, Number>\n            nr(&this->data);\n    if (v2 != dlib matrix_exp<dlib matrix_multiply_exp<\n                  dlib matrix_op<dlib op_colm<\n                      dlib matrix<double, Number, Number,\n                                  dlib memory_manager_stateless_kernel_1<char>,\n                                  dlib row_major_layout>>>,\n                  dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n                      dlib matrix<double, Number, Number,\n                                  dlib memory_manager_stateless_kernel_1<char>,\n                                  dlib row_major_layout>>>>>>>\n                  nr(m) ||\n        (v3 = dlib row_major_layout\n             layout<double, Number, Number,\n                    dlib memory_manager_stateless_kernel_1<char>, Number>\n                 nc(&this->data),\n         v3 != dlib matrix_exp<dlib matrix_multiply_exp<\n                   dlib matrix_op<dlib op_colm<\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>>,\n                   dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>>>>>>\n                   nc(m))) {\n      v5 = dlib matrix_exp<dlib matrix_multiply_exp<\n          dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>,\n          dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>>>>>\n          nc(m);\n      v6 = dlib matrix_exp<dlib matrix_multiply_exp<\n          dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>,\n          dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n              dlib matrix<double, Number, Number,\n                          dlib memory_manager_stateless_kernel_1<char>,\n                          dlib row_major_layout>>>>>>>\n          nr(m);\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout>\n          set_size(this, v6, v5);\n    }\n    dlib matrix_assign<\n        dlib matrix<double, Number, Number,\n                    dlib memory_manager_stateless_kernel_1<char>,\n                    dlib row_major_layout>,\n        dlib matrix_multiply_exp<\n            dlib matrix_op<dlib op_colm<\n                dlib matrix<double, Number, Number,\n                            dlib memory_manager_stateless_kernel_1<char>,\n                            dlib row_major_layout>>>,\n            dlib matrix_op<dlib op_trans<dlib matrix_op<dlib op_colm<\n                dlib matrix<double, Number, Number,\n                            dlib memory_manager_stateless_kernel_1<char>,\n                            dlib row_major_layout>>>>>>>(this, m);\n  }\n  return this;\n}", "var": [{"name": "v10", "type": "struct dlib::matrix<double,0,0,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> { dlib::row_major_layout::layout<double,0,0,dlib::memory_manager_stateless_kernel_1<char>,5> data; }", "pred_name": "temp", "ref_name": "temp", "ref_type": "struct dlib::matrix<double,0,0,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> { dlib::row_major_layout::layout<double,0,0,dlib::memory_manager_stateless_kernel_1<char>,5> data; }"}], "body_in_train": true}, {"repo_owner": "jack71728", "repo_name": "qemuVmHw1", "path": "jack71728/qemuVmHw1/0f8e83d16397d3a572b5744a6953e9fa11d07a8247ef1f4aa745746389a7fd3b", "path_in_repo": "jack71728/qemuVmHw1/qemu-0.13.0/ppc-softmmu/virtio-serial-bus.o", "objdump": "00000000000008cd <send_control_event>:\n     8cd:\t55                   \tpush   %rbp\n     8ce:\t48 89 e5             \tmov    %rsp,%rbp\n     8d1:\t48 83 ec 20          \tsub    $0x20,%rsp\n     8d5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     8d9:\t89 f1                \tmov    %esi,%ecx\n     8db:\t89 d0                \tmov    %edx,%eax\n     8dd:\t89 ca                \tmov    %ecx,%edx\n     8df:\t66 89 55 e4          \tmov    %dx,-0x1c(%rbp)\n     8e3:\t66 89 45 e0          \tmov    %ax,-0x20(%rbp)\n     8e7:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     8ee:\t00 00 \n     8f0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     8f4:\t31 c0                \txor    %eax,%eax\n     8f6:\t0f b7 45 e4          \tmovzwl -0x1c(%rbp),%eax\n     8fa:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n     8fe:\t48 83 c2 04          \tadd    $0x4,%rdx\n     902:\t89 c6                \tmov    %eax,%esi\n     904:\t48 89 d7             \tmov    %rdx,%rdi\n     907:\te8 8b f7 ff ff       \tcallq  97 <stw_be_p>\n     90c:\t0f b7 45 e0          \tmovzwl -0x20(%rbp),%eax\n     910:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n     914:\t48 83 c2 06          \tadd    $0x6,%rdx\n     918:\t89 c6                \tmov    %eax,%esi\n     91a:\t48 89 d7             \tmov    %rdx,%rdi\n     91d:\te8 75 f7 ff ff       \tcallq  97 <stw_be_p>\n     922:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n     926:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     92a:\tba 08 00 00 00       \tmov    $0x8,%edx\n     92f:\t48 89 ce             \tmov    %rcx,%rsi\n     932:\t48 89 c7             \tmov    %rax,%rdi\n     935:\te8 54 fe ff ff       \tcallq  78e <send_control_msg>\n     93a:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     93e:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     945:\t00 00 \n     947:\t74 05                \tje     94e <send_control_event+0x81>\n     949:\te8 00 00 00 00       \tcallq  94e <send_control_event+0x81>\n     94e:\tc9                   \tleaveq \n     94f:\tc3                   \tretq   ", "code_s": "size_t __fastcall send_control_event(__int64 a1, __int16 a2, __int16 a3) {\n  int <span class=\"supfact\">v5</span>;\n  char v6[Number];\n  char v7[Number];\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  stw_be_p(v6, a2);\n  stw_be_p(v7, a3);\n  return send_control_msg(a1, &<span class=\"supfact\">v5</span>, Number);\n}", "code_t": "size_t __cdecl send_control_event(VirtIOSerialPort_0 *port, uint16_t event,\n                                  uint16_t value) {\n  virtio_console_control <span class=\"supfact\">cpkt</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  stw_be_p(&<span class=\"supfact\">cpkt</span>.event, event);\n  stw_be_p(&<span class=\"supfact\">cpkt</span>.value, value);\n  return send_control_msg(port, &<span class=\"supfact\">cpkt</span>, Number);\n}", "var": [{"name": "v5", "type": "struct virtio_console_control { uint32_t id; uint16_t event; uint16_t value; }", "pred_name": "cpkt", "ref_name": "cpkt", "ref_type": "struct virtio_console_control { uint32_t id; uint16_t event; uint16_t value; }"}], "body_in_train": true}, {"repo_owner": "nu2001", "repo_name": "posemath", "path": "nu2001/posemath/af729ed8e1e984db900bd217d8bead85369d97c4959488859980f19bf699d4f0", "path_in_repo": "nu2001/posemath//testpmc", "objdump": "00000000004055c8 <pmQuatScalMult>:\n  4055c8:\t55                   \tpush   %rbp\n  4055c9:\t48 89 e5             \tmov    %rsp,%rbp\n  4055cc:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4055d0:\tf2 0f 11 45 c8       \tmovsd  %xmm0,-0x38(%rbp)\n  4055d5:\t48 89 7d c0          \tmov    %rdi,-0x40(%rbp)\n  4055d9:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4055dd:\tff 75 28             \tpushq  0x28(%rbp)\n  4055e0:\tff 75 20             \tpushq  0x20(%rbp)\n  4055e3:\tff 75 18             \tpushq  0x18(%rbp)\n  4055e6:\tff 75 10             \tpushq  0x10(%rbp)\n  4055e9:\t48 89 c7             \tmov    %rax,%rdi\n  4055ec:\te8 2b d1 ff ff       \tcallq  40271c <pmQuatRotConvert>\n  4055f1:\t48 83 c4 20          \tadd    $0x20,%rsp\n  4055f5:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4055f8:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  4055fc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  405600:\tff 75 e8             \tpushq  -0x18(%rbp)\n  405603:\tff 75 e0             \tpushq  -0x20(%rbp)\n  405606:\tff 75 d8             \tpushq  -0x28(%rbp)\n  405609:\tff 75 d0             \tpushq  -0x30(%rbp)\n  40560c:\t48 89 d7             \tmov    %rdx,%rdi\n  40560f:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n  405614:\te8 e9 f2 ff ff       \tcallq  404902 <pmRotScalMult>\n  405619:\t48 83 c4 20          \tadd    $0x20,%rsp\n  40561d:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405620:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  405624:\tff 75 e8             \tpushq  -0x18(%rbp)\n  405627:\tff 75 e0             \tpushq  -0x20(%rbp)\n  40562a:\tff 75 d8             \tpushq  -0x28(%rbp)\n  40562d:\tff 75 d0             \tpushq  -0x30(%rbp)\n  405630:\t48 89 c7             \tmov    %rax,%rdi\n  405633:\te8 f3 cb ff ff       \tcallq  40222b <pmRotQuatConvert>\n  405638:\t48 83 c4 20          \tadd    $0x20,%rsp\n  40563c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40563f:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  405643:\t75 0c                \tjne    405651 <pmQuatScalMult+0x89>\n  405645:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  405649:\t75 06                \tjne    405651 <pmQuatScalMult+0x89>\n  40564b:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  40564f:\t74 07                \tje     405658 <pmQuatScalMult+0x90>\n  405651:\tb8 fd ff ff ff       \tmov    $0xfffffffd,%eax\n  405656:\teb 05                \tjmp    40565d <pmQuatScalMult+0x95>\n  405658:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40565d:\t89 05 01 4a 00 00    \tmov    %eax,0x4a01(%rip)        # 40a064 <pmErrno>\n  405663:\t8b 05 fb 49 00 00    \tmov    0x49fb(%rip),%eax        # 40a064 <pmErrno>\n  405669:\tc9                   \tleaveq \n  40566a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pmQuatScalMult(__int64 a1, __int64 a2, int a3, int a4,\n                                  int a5, int a6, double a7, double a8,\n                                  double a9, double a10, double a11, double a12,\n                                  double a13, double a14,\n                                  __int64 <span class=\"supfact\">a15</span>, __int64 a16,\n                                  __int64 a17, double a18) {\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  double v21;\n  double v22;\n  double v23;\n  double v24;\n  __int64 result;\n  int <span class=\"supfact\">v26</span>[Number];\n  __int64 v27;\n  __int64 v28;\n  __int64 v29;\n  int v30;\n  __int64 v31;\n  HIDWORD(v31) = pmQuatRotConvert((double *)<span class=\"supfact\">v26</span>, a2, a3, a4, a5,\n                                  a6, a7, a8, a9, a10, a11, a12, a13, a14,\n                                  <span class=\"supfact\">a15</span>, a16, a17, a18);\n  LODWORD(v31) = pmRotScalMult((__int64)<span class=\"supfact\">v26</span>, a7, a2,\n                               (__int64)<span class=\"supfact\">v26</span>, v18, v19, v20, a8,\n                               a9, a10, v21, v22, a13, a14,\n                               *(double *)<span class=\"supfact\">v26</span>, v27, v28, v29);\n  v30 = pmRotQuatConvert(a1, a7, a8, a9, a10, v23, v24, a13, a14,\n                         *(double *)<span class=\"supfact\">v26</span>, *(double *)&v27,\n                         *(double *)&v28, *(double *)&v29);\n  if (v31 || v30)\n    LODWORD(result) = Number;\n  else\n    LODWORD(result) = Number;\n  pmErrno = result;\n  return (unsigned int)result;\n}", "code_t": "int __cdecl pmQuatScalMult(PmQuaternion <span class=\"supfact\">q</span>, double s,\n                           PmQuaternion *qout) {\n  int result;\n  PmRotationVector <span class=\"supfact\">r</span>;\n  int r3;\n  __int64 r2;\n  HIDWORD(r2) = pmQuatRotConvert(<span class=\"supfact\">q</span>, &<span class=\"supfact\">r</span>);\n  LODWORD(r2) = pmRotScalMult(<span class=\"supfact\">r</span>, s, &<span class=\"supfact\">r</span>);\n  r3 = pmRotQuatConvert(<span class=\"supfact\">r</span>, qout);\n  if (r2 || r3)\n    result = Number;\n  else\n    result = Number;\n  pmErrno = result;\n  return result;\n}", "var": [{"name": "a15", "type": "struct PmRotationMatrix { PmCartesian x; PmCartesian y; PmCartesian z; }", "pred_name": "m1", "ref_name": "q", "ref_type": "struct PmQuaternion { double s; double x; double y; double z; }"}, {"name": "v26", "type": "struct PmRotationMatrix { PmCartesian x; PmCartesian y; PmCartesian z; }", "pred_name": "m2", "ref_name": "r", "ref_type": "struct PmRotationVector { double s; double x; double y; double z; }"}], "body_in_train": false}, {"repo_owner": "wlanjie", "repo_name": "MacFFPlay", "path": "wlanjie/MacFFPlay/0a4e75d878dfdf151f1ae9890f3da2e0ba566268bfd99916c77cbf6533e904d4", "path_in_repo": "wlanjie/MacFFPlay/ffmpeg/libavformat/mpegts.o", "objdump": "0000000000005e37 <pat_cb>:\n    5e37:\t48 83 ec 78          \tsub    $0x78,%rsp\n    5e3b:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    5e40:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    5e45:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n    5e49:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    5e4e:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n    5e52:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n    5e57:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    5e5c:\t48 83 c0 20          \tadd    $0x20,%rax\n    5e60:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n    5e65:\t48 8d 44 24 28       \tlea    0x28(%rsp),%rax\n    5e6a:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n    5e6f:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    5e74:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    5e78:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5e7d:\tbe 38 00 00 00       \tmov    $0x38,%esi\n    5e82:\t48 89 c7             \tmov    %rax,%rdi\n    5e85:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5e8a:\te8 00 00 00 00       \tcallq  5e8f <pat_cb+0x58>\n    5e8f:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    5e93:\t48 98                \tcltq   \n    5e95:\t48 8d 50 fc          \tlea    -0x4(%rax),%rdx\n    5e99:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    5e9e:\t48 01 d0             \tadd    %rdx,%rax\n    5ea1:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n    5ea6:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    5eab:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n    5eb0:\t48 8b 54 24 48       \tmov    0x48(%rsp),%rdx\n    5eb5:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    5eba:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    5ebf:\t48 89 ce             \tmov    %rcx,%rsi\n    5ec2:\t48 89 c7             \tmov    %rax,%rdi\n    5ec5:\te8 5f b6 ff ff       \tcallq  1529 <parse_section_header>\n    5eca:\t85 c0                \ttest   %eax,%eax\n    5ecc:\t0f 88 30 03 00 00    \tjs     6202 <pat_cb+0x3cb>\n    5ed2:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    5ed7:\t0f b6 00             \tmovzbl (%rax),%eax\n    5eda:\t84 c0                \ttest   %al,%al\n    5edc:\t0f 85 23 03 00 00    \tjne    6205 <pat_cb+0x3ce>\n    5ee2:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    5ee7:\t8b 40 60             \tmov    0x60(%rax),%eax\n    5eea:\t85 c0                \ttest   %eax,%eax\n    5eec:\t0f 85 16 03 00 00    \tjne    6208 <pat_cb+0x3d1>\n    5ef2:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    5ef7:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    5efc:\t48 89 d6             \tmov    %rdx,%rsi\n    5eff:\t48 89 c7             \tmov    %rax,%rdi\n    5f02:\te8 0d b4 ff ff       \tcallq  1314 <skip_identical>\n    5f07:\t85 c0                \ttest   %eax,%eax\n    5f09:\t0f 85 fc 02 00 00    \tjne    620b <pat_cb+0x3d4>\n    5f0f:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    5f14:\t0f b7 50 02          \tmovzwl 0x2(%rax),%edx\n    5f18:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    5f1d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    5f21:\t0f b7 d2             \tmovzwl %dx,%edx\n    5f24:\t89 90 f0 04 00 00    \tmov    %edx,0x4f0(%rax)\n    5f2a:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    5f2f:\t48 89 c7             \tmov    %rax,%rdi\n    5f32:\te8 ec a6 ff ff       \tcallq  623 <clear_programs>\n    5f37:\t48 8b 54 24 48       \tmov    0x48(%rsp),%rdx\n    5f3c:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    5f41:\t48 89 d6             \tmov    %rdx,%rsi\n    5f44:\t48 89 c7             \tmov    %rax,%rdi\n    5f47:\te8 81 b4 ff ff       \tcallq  13cd <get16>\n    5f4c:\t89 44 24 44          \tmov    %eax,0x44(%rsp)\n    5f50:\t83 7c 24 44 00       \tcmpl   $0x0,0x44(%rsp)\n    5f55:\t0f 88 b2 01 00 00    \tjs     610d <pat_cb+0x2d6>\n    5f5b:\t48 8b 54 24 48       \tmov    0x48(%rsp),%rdx\n    5f60:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    5f65:\t48 89 d6             \tmov    %rdx,%rsi\n    5f68:\t48 89 c7             \tmov    %rax,%rdi\n    5f6b:\te8 5d b4 ff ff       \tcallq  13cd <get16>\n    5f70:\t89 44 24 40          \tmov    %eax,0x40(%rsp)\n    5f74:\t83 7c 24 40 00       \tcmpl   $0x0,0x40(%rsp)\n    5f79:\t0f 88 91 01 00 00    \tjs     6110 <pat_cb+0x2d9>\n    5f7f:\t81 64 24 40 ff 1f 00 \tandl   $0x1fff,0x40(%rsp)\n    5f86:\t00 \n    5f87:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    5f8c:\t8b 80 80 20 01 00    \tmov    0x12080(%rax),%eax\n    5f92:\t39 44 24 40          \tcmp    %eax,0x40(%rsp)\n    5f96:\t0f 84 77 01 00 00    \tje     6113 <pat_cb+0x2dc>\n    5f9c:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    5fa1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    5fa5:\t8b 4c 24 40          \tmov    0x40(%rsp),%ecx\n    5fa9:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n    5fad:\t41 89 c8             \tmov    %ecx,%r8d\n    5fb0:\t89 d1                \tmov    %edx,%ecx\n    5fb2:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5fb7:\tbe 38 00 00 00       \tmov    $0x38,%esi\n    5fbc:\t48 89 c7             \tmov    %rax,%rdi\n    5fbf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5fc4:\te8 00 00 00 00       \tcallq  5fc9 <pat_cb+0x192>\n    5fc9:\t83 7c 24 44 00       \tcmpl   $0x0,0x44(%rsp)\n    5fce:\t0f 84 63 ff ff ff    \tje     5f37 <pat_cb+0x100>\n    5fd4:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    5fd9:\t8b 54 24 40          \tmov    0x40(%rsp),%edx\n    5fdd:\t48 63 d2             \tmovslq %edx,%rdx\n    5fe0:\t48 81 c2 10 04 00 00 \tadd    $0x410,%rdx\n    5fe7:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n    5feb:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    5ff0:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    5ff5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    5ff9:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n    5ffd:\t89 d6                \tmov    %edx,%esi\n    5fff:\t48 89 c7             \tmov    %rax,%rdi\n    6002:\te8 00 00 00 00       \tcallq  6007 <pat_cb+0x1d0>\n    6007:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n    600c:\t48 83 7c 24 30 00    \tcmpq   $0x0,0x30(%rsp)\n    6012:\t74 18                \tje     602c <pat_cb+0x1f5>\n    6014:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    6019:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n    601d:\t89 50 28             \tmov    %edx,0x28(%rax)\n    6020:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    6025:\t8b 54 24 40          \tmov    0x40(%rsp),%edx\n    6029:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n    602c:\t48 83 7c 24 38 00    \tcmpq   $0x0,0x38(%rsp)\n    6032:\t74 52                \tje     6086 <pat_cb+0x24f>\n    6034:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    6039:\t8b 40 18             \tmov    0x18(%rax),%eax\n    603c:\t83 f8 01             \tcmp    $0x1,%eax\n    603f:\t75 1e                \tjne    605f <pat_cb+0x228>\n    6041:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    6046:\t8b 00                \tmov    (%rax),%eax\n    6048:\t39 44 24 40          \tcmp    %eax,0x40(%rsp)\n    604c:\t75 11                \tjne    605f <pat_cb+0x228>\n    604e:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    6053:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    6057:\t48 3d 00 00 00 00    \tcmp    $0x0,%rax\n    605d:\t74 27                \tje     6086 <pat_cb+0x24f>\n    605f:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    6064:\t8b 54 24 40          \tmov    0x40(%rsp),%edx\n    6068:\t48 63 d2             \tmovslq %edx,%rdx\n    606b:\t48 81 c2 10 04 00 00 \tadd    $0x410,%rdx\n    6072:\t48 8b 14 d0          \tmov    (%rax,%rdx,8),%rdx\n    6076:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    607b:\t48 89 d6             \tmov    %rdx,%rsi\n    607e:\t48 89 c7             \tmov    %rax,%rdi\n    6081:\te8 07 af ff ff       \tcallq  f8d <mpegts_close_filter>\n    6086:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    608b:\t8b 54 24 40          \tmov    0x40(%rsp),%edx\n    608f:\t48 63 d2             \tmovslq %edx,%rdx\n    6092:\t48 81 c2 10 04 00 00 \tadd    $0x410,%rdx\n    6099:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n    609d:\t48 85 c0             \ttest   %rax,%rax\n    60a0:\t75 24                \tjne    60c6 <pat_cb+0x28f>\n    60a2:\t8b 74 24 40          \tmov    0x40(%rsp),%esi\n    60a6:\t48 8b 54 24 60       \tmov    0x60(%rsp),%rdx\n    60ab:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    60b0:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    60b6:\t48 89 d1             \tmov    %rdx,%rcx\n    60b9:\tba 00 00 00 00       \tmov    $0x0,%edx\n    60be:\t48 89 c7             \tmov    %rax,%rdi\n    60c1:\te8 4b ad ff ff       \tcallq  e11 <mpegts_open_section_filter>\n    60c6:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n    60ca:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    60cf:\t89 d6                \tmov    %edx,%esi\n    60d1:\t48 89 c7             \tmov    %rax,%rdi\n    60d4:\te8 76 a5 ff ff       \tcallq  64f <add_pat_entry>\n    60d9:\t8b 4c 24 44          \tmov    0x44(%rsp),%ecx\n    60dd:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    60e2:\tba 00 00 00 00       \tmov    $0x0,%edx\n    60e7:\t89 ce                \tmov    %ecx,%esi\n    60e9:\t48 89 c7             \tmov    %rax,%rdi\n    60ec:\te8 03 a6 ff ff       \tcallq  6f4 <add_pid_to_pmt>\n    60f1:\t8b 54 24 40          \tmov    0x40(%rsp),%edx\n    60f5:\t8b 4c 24 44          \tmov    0x44(%rsp),%ecx\n    60f9:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    60fe:\t89 ce                \tmov    %ecx,%esi\n    6100:\t48 89 c7             \tmov    %rax,%rdi\n    6103:\te8 ec a5 ff ff       \tcallq  6f4 <add_pid_to_pmt>\n    6108:\te9 2a fe ff ff       \tjmpq   5f37 <pat_cb+0x100>\n    610d:\t90                   \tnop\n    610e:\teb 04                \tjmp    6114 <pat_cb+0x2dd>\n    6110:\t90                   \tnop\n    6111:\teb 01                \tjmp    6114 <pat_cb+0x2dd>\n    6113:\t90                   \tnop\n    6114:\t83 7c 24 44 00       \tcmpl   $0x0,0x44(%rsp)\n    6119:\t0f 89 ed 00 00 00    \tjns    620c <pat_cb+0x3d5>\n    611f:\tc7 44 24 68 00 00 00 \tmovl   $0x0,0x68(%rsp)\n    6126:\t00 \n    6127:\te9 b9 00 00 00       \tjmpq   61e5 <pat_cb+0x3ae>\n    612c:\tc7 44 24 6c 00 00 00 \tmovl   $0x0,0x6c(%rsp)\n    6133:\t00 \n    6134:\teb 47                \tjmp    617d <pat_cb+0x346>\n    6136:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    613b:\t48 8b 50 78          \tmov    0x78(%rax),%rdx\n    613f:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    6143:\t48 98                \tcltq   \n    6145:\t48 69 c0 0c 01 00 00 \timul   $0x10c,%rax,%rax\n    614c:\t48 01 d0             \tadd    %rdx,%rax\n    614f:\t8b 10                \tmov    (%rax),%edx\n    6151:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    6156:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    615a:\t48 8b 80 80 04 00 00 \tmov    0x480(%rax),%rax\n    6161:\t8b 4c 24 68          \tmov    0x68(%rsp),%ecx\n    6165:\t48 63 c9             \tmovslq %ecx,%rcx\n    6168:\t48 c1 e1 03          \tshl    $0x3,%rcx\n    616c:\t48 01 c8             \tadd    %rcx,%rax\n    616f:\t48 8b 00             \tmov    (%rax),%rax\n    6172:\t8b 00                \tmov    (%rax),%eax\n    6174:\t39 c2                \tcmp    %eax,%edx\n    6176:\t74 17                \tje     618f <pat_cb+0x358>\n    6178:\t83 44 24 6c 01       \taddl   $0x1,0x6c(%rsp)\n    617d:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    6182:\t8b 50 70             \tmov    0x70(%rax),%edx\n    6185:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    6189:\t39 c2                \tcmp    %eax,%edx\n    618b:\t77 a9                \tja     6136 <pat_cb+0x2ff>\n    618d:\teb 01                \tjmp    6190 <pat_cb+0x359>\n    618f:\t90                   \tnop\n    6190:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    6195:\t8b 50 70             \tmov    0x70(%rax),%edx\n    6198:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    619c:\t39 c2                \tcmp    %eax,%edx\n    619e:\t75 40                \tjne    61e0 <pat_cb+0x3a9>\n    61a0:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    61a5:\t8b 40 64             \tmov    0x64(%rax),%eax\n    61a8:\t85 c0                \ttest   %eax,%eax\n    61aa:\t75 34                \tjne    61e0 <pat_cb+0x3a9>\n    61ac:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    61b1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    61b5:\t48 8b 80 80 04 00 00 \tmov    0x480(%rax),%rax\n    61bc:\t8b 54 24 68          \tmov    0x68(%rsp),%edx\n    61c0:\t48 63 d2             \tmovslq %edx,%rdx\n    61c3:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    61c7:\t48 01 d0             \tadd    %rdx,%rax\n    61ca:\t48 8b 00             \tmov    (%rax),%rax\n    61cd:\t8b 00                \tmov    (%rax),%eax\n    61cf:\t89 c2                \tmov    %eax,%edx\n    61d1:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    61d6:\t89 d6                \tmov    %edx,%esi\n    61d8:\t48 89 c7             \tmov    %rax,%rdi\n    61db:\te8 f9 a2 ff ff       \tcallq  4d9 <clear_avprogram>\n    61e0:\t83 44 24 68 01       \taddl   $0x1,0x68(%rsp)\n    61e5:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    61ea:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    61ee:\t8b 90 7c 04 00 00    \tmov    0x47c(%rax),%edx\n    61f4:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n    61f8:\t39 c2                \tcmp    %eax,%edx\n    61fa:\t0f 87 2c ff ff ff    \tja     612c <pat_cb+0x2f5>\n    6200:\teb 0a                \tjmp    620c <pat_cb+0x3d5>\n    6202:\t90                   \tnop\n    6203:\teb 07                \tjmp    620c <pat_cb+0x3d5>\n    6205:\t90                   \tnop\n    6206:\teb 04                \tjmp    620c <pat_cb+0x3d5>\n    6208:\t90                   \tnop\n    6209:\teb 01                \tjmp    620c <pat_cb+0x3d5>\n    620b:\t90                   \tnop\n    620c:\t48 83 c4 78          \tadd    $0x78,%rsp\n    6210:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pat_cb(__int64 a1, _WORD *a2, int a3) {\n  __int64 result;\n  _WORD *v5;\n  char <span class=\"supfact\">v6</span>;\n  __int64 v7;\n  __int64 v8;\n  signed int v9;\n  unsigned int v10;\n  unsigned __int64 v11;\n  char *v12;\n  _DWORD *v13;\n  __int64 v14;\n  unsigned int i;\n  unsigned int j;\n  v14 = *(_QWORD *)(a1 + Number);\n  v13 = (_DWORD *)(a1 + Number);\n  v12 = &<span class=\"supfact\">v6</span>;\n  av_log(*(_QWORD *)(v14 + Number), Number L, String);\n  v11 = (unsigned __int64)a2 + a3 - Number;\n  v5 = a2;\n  result = parse_section_header((__int64)v12, (unsigned __int64 *)&v5, v11);\n  if ((int)result >= Number) {\n    result = (unsigned __int8)*v12;\n    if (!(_BYTE)result) {\n      result = *(unsigned int *)(v14 + Number);\n      if (!(_DWORD)result) {\n        result = skip_identical((__int64)v12, v13);\n        if (!(_DWORD)result) {\n          *(_DWORD *)(*(_QWORD *)(v14 + Number) + Number L) =\n              *((unsigned __int16 *)v12 + Number);\n          clear_programs(v14);\n          while (Number) {\n            result = get16(&v5, v11);\n            v10 = result;\n            if ((int)result < Number)\n              break;\n            result = get16(&v5, v11);\n            v9 = result;\n            if ((int)result < Number)\n              break;\n            v9 &= Number;\n            result = *(unsigned int *)(v14 + Number);\n            if (v9 == (_DWORD)result)\n              break;\n            av_log(*(_QWORD *)(v14 + Number), Number L, String, v10,\n                   (unsigned int)v9);\n            if (v10) {\n              v8 = *(_QWORD *)(v14 + Number * (v9 + Number L));\n              v7 = av_new_program(*(_QWORD *)(v14 + Number), v10);\n              if (v7) {\n                *(_DWORD *)(v7 + Number) = v10;\n                *(_DWORD *)(v7 + Number) = v9;\n              }\n              if (v8 &&\n                  (*(_DWORD *)(v8 + Number) != Number || v9 != *(_DWORD *)v8 ||\n                   *(__int64(__fastcall **)(__int64, _WORD *, unsigned int))(\n                       v8 + Number) != pmt_cb)) {\n                mpegts_close_filter(v14,\n                                    *(int **)(v14 + Number * (v9 + Number L)));\n              }\n              if (!*(_QWORD *)(v14 + Number * (v9 + Number L)))\n                mpegts_open_section_filter(v14, v9, (__int64)pmt_cb, v14,\n                                           Number);\n              add_pat_entry(v14, v10);\n              add_pid_to_pmt(v14, v10, Number);\n              add_pid_to_pmt(v14, v10, v9);\n            }\n          }\n          if ((v10 & Number) != Number) {\n            for (i = Number;; ++i) {\n              result = i;\n              if (*(_DWORD *)(*(_QWORD *)(v14 + Number) + Number L) <= i)\n                break;\n              for (j = Number;\n                   *(_DWORD *)(v14 + Number) > j &&\n                   *(_DWORD *)(*(_QWORD *)(v14 + Number) + Number L * (int)j) !=\n                       **(_DWORD **)(Number L * (int)i +\n                                     *(_QWORD *)(*(_QWORD *)(v14 + Number) +\n                                                 Number L));\n                   ++j) {\n                ;\n              }\n              if (*(_DWORD *)(v14 + Number) == j && !*(_DWORD *)(v14 + Number))\n                clear_avprogram(\n                    v14, **(_DWORD **)(Number L * (int)i +\n                                       *(_QWORD *)(*(_QWORD *)(v14 + Number) +\n                                                   Number L)));\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl pat_cb(MpegTSFilter_0 *filter, const uint8_t *section,\n                    int section_len) {\n  const uint8_t *p;\n  SectionHeader_0 <span class=\"supfact\">h1</span>;\n  AVProgram_0 *program;\n  MpegTSFilter_0 *fil;\n  int pmt_pid;\n  int sid;\n  const uint8_t *p_end;\n  SectionHeader_0 *h;\n  MpegTSSectionFilter_0 *tssf;\n  MpegTSContext_0 *ts;\n  int j;\n  int i;\n  ts = (MpegTSContext_0 *)filter->u.section_filter.opaque;\n  tssf = (MpegTSSectionFilter_0 *)&filter->u;\n  h = &<span class=\"supfact\">h1</span>;\n  av_log(ts->stream, Number L, String);\n  p_end = &section[section_len - Number];\n  p = section;\n  if (parse_section_header(h, &p, p_end) >= Number && !h->tid &&\n      !ts->skip_changes && !skip_identical(h, tssf)) {\n    ts->stream->ts_id = h->id;\n    clear_programs(ts);\n    while (Number) {\n      sid = get16(&p, p_end);\n      if (sid < Number)\n        break;\n      pmt_pid = get16(&p, p_end);\n      if (pmt_pid < Number)\n        break;\n      pmt_pid &= Number;\n      if (pmt_pid == ts->current_pid)\n        break;\n      av_log(ts->stream, Number L, String, (unsigned int)sid,\n             (unsigned int)pmt_pid);\n      if (sid) {\n        fil = ts->pids[pmt_pid];\n        program = (AVProgram_0 *)av_new_program(ts->stream, (unsigned int)sid);\n        if (program) {\n          program->program_num = sid;\n          program->pmt_pid = pmt_pid;\n        }\n        if (fil && (fil->type != MPEGTS_SECTION || pmt_pid != fil->pid ||\n                    (void(__cdecl *)(MpegTSFilter_0 *, const uint8_t *, int))\n                            fil->u.section_filter.section_cb != pmt_cb)) {\n          mpegts_close_filter(ts, ts->pids[pmt_pid]);\n        }\n        if (!ts->pids[pmt_pid])\n          mpegts_open_section_filter(ts, pmt_pid, (SectionCallback *)pmt_cb, ts,\n                                     Number);\n        add_pat_entry(ts, sid);\n        add_pid_to_pmt(ts, sid, Number);\n        add_pid_to_pmt(ts, sid, pmt_pid);\n      }\n    }\n    if (sid < Number) {\n      for (j = Number; ts->stream->nb_programs > j; ++j) {\n        for (i = Number;\n             ts->nb_prg > i && ts->prg[i].id != ts->stream->programs[j]->id;\n             ++i)\n          ;\n        if (ts->nb_prg == i && !ts->skip_clear)\n          clear_avprogram(ts, ts->stream->programs[j]->id);\n      }\n    }\n  }\n}", "var": [{"name": "v6", "type": "struct SectionHeader_0 { uint8_t tid; PADDING (1); uint16_t id; uint8_t version; uint8_t sec_num; uint8_t last_sec_num; PADDING (1); }", "pred_name": "h1", "ref_name": "h1", "ref_type": "struct SectionHeader_0 { uint8_t tid; PADDING (1); uint16_t id; uint8_t version; uint8_t sec_num; uint8_t last_sec_num; PADDING (1); }"}], "body_in_train": false}, {"repo_owner": "Maxul", "repo_name": "sgx_vmx_protocol", "path": "Maxul/sgx_vmx_protocol/6da8173114378d0a4811efe8908c96f0af9aa54e017727d8f60a53bc403781cd", "path_in_repo": "Maxul/sgx_vmx_protocol/Sandbox/qemu-sgx-master/hw/timer/milkymist-sysctl.o", "objdump": "00000000000005a5 <trace_milkymist_sysctl_pulse_irq_timer1>:\n 5a5:\t55                   \tpush   %rbp\n 5a6:\t48 89 e5             \tmov    %rsp,%rbp\n 5a9:\t41 54                \tpush   %r12\n 5ab:\t53                   \tpush   %rbx\n 5ac:\t48 83 ec 20          \tsub    $0x20,%rsp\n 5b0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 5b7:\t00 00 \n 5b9:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 5bd:\t31 c0                \txor    %eax,%eax\n 5bf:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 5c5 <trace_milkymist_sysctl_pulse_irq_timer1+0x20>\n 5c5:\t85 c0                \ttest   %eax,%eax\n 5c7:\t0f 95 c0             \tsetne  %al\n 5ca:\t0f b6 c0             \tmovzbl %al,%eax\n 5cd:\t48 85 c0             \ttest   %rax,%rax\n 5d0:\t74 5b                \tje     62d <trace_milkymist_sysctl_pulse_irq_timer1+0x88>\n 5d2:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 5d9 <trace_milkymist_sysctl_pulse_irq_timer1+0x34>\n 5d9:\t66 85 c0             \ttest   %ax,%ax\n 5dc:\t74 4f                \tje     62d <trace_milkymist_sysctl_pulse_irq_timer1+0x88>\n 5de:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 5e2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 5e7:\t48 89 c7             \tmov    %rax,%rdi\n 5ea:\te8 00 00 00 00       \tcallq  5ef <trace_milkymist_sysctl_pulse_irq_timer1+0x4a>\n 5ef:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n 5f4:\te8 38 fa ff ff       \tcallq  31 <qemu_loglevel_mask>\n 5f9:\t0f b6 c0             \tmovzbl %al,%eax\n 5fc:\t48 85 c0             \ttest   %rax,%rax\n 5ff:\t74 2c                \tje     62d <trace_milkymist_sysctl_pulse_irq_timer1+0x88>\n 601:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 605:\t49 89 c4             \tmov    %rax,%r12\n 608:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 60c:\t48 89 c3             \tmov    %rax,%rbx\n 60f:\te8 00 00 00 00       \tcallq  614 <trace_milkymist_sysctl_pulse_irq_timer1+0x6f>\n 614:\t4c 89 e1             \tmov    %r12,%rcx\n 617:\t48 89 da             \tmov    %rbx,%rdx\n 61a:\t89 c6                \tmov    %eax,%esi\n 61c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 623 <trace_milkymist_sysctl_pulse_irq_timer1+0x7e>\n 623:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 628:\te8 00 00 00 00       \tcallq  62d <trace_milkymist_sysctl_pulse_irq_timer1+0x88>\n 62d:\t90                   \tnop\n 62e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 632:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 639:\t00 00 \n 63b:\t74 05                \tje     642 <trace_milkymist_sysctl_pulse_irq_timer1+0x9d>\n 63d:\te8 00 00 00 00       \tcallq  642 <trace_milkymist_sysctl_pulse_irq_timer1+0x9d>\n 642:\t48 83 c4 20          \tadd    $0x20,%rsp\n 646:\t5b                   \tpop    %rbx\n 647:\t41 5c                \tpop    %r12\n 649:\t5d                   \tpop    %rbp\n 64a:\tc3                   \tretq   ", "code_s": "unsigned __int64 trace_milkymist_sysctl_pulse_irq_timer1() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v0 = <span class=\"supfact\">tv</span>.tv_usec;\n        v1 = <span class=\"supfact\">tv</span>.tv_sec;\n        v2 = getpid();\n        qemu_log(String, v2, v1, v0);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ v5;\n}", "code_t": "void __cdecl trace_milkymist_sysctl_pulse_irq_timer1() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v0 = <span class=\"supfact\">_now</span>.tv_usec;\n      v1 = <span class=\"supfact\">_now</span>.tv_sec;\n      v2 = getpid();\n      qemu_log(String, v2, v1, v0);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "_now", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/fd73ae9b4e680d1b393d386b8e99f71c5b879abc95955eec63dcd44ffc21f1f4", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Net/testsuite/obj/Linux/x86_64/debug_shared/IPAddressTest.o", "objdump": "0000000000000000 <_ZSt32__make_move_if_noexcept_iteratorIPN7CppUnit4TestESt13move_iteratorIPS2_EET0_PT_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  10:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  14:\t48 89 d6             \tmov    %rdx,%rsi\n  17:\t48 89 c7             \tmov    %rax,%rdi\n  1a:\te8 00 00 00 00       \tcallq  1f <_ZSt32__make_move_if_noexcept_iteratorIPN7CppUnit4TestESt13move_iteratorIPS2_EET0_PT_+0x1f>\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\tc9                   \tleaveq \n  24:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __make_move_if_noexcept_iterator<\n    CppUnit Test *, std move_iterator<CppUnit Test **>>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  std move_iterator<CppUnit Test **> move_iterator(&<span class=\"supfact\">v2</span>, a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std move_iterator<CppUnit Test **> __cdecl std __make_move_if_noexcept_iterator<\n    CppUnit Test *, std move_iterator<CppUnit Test **>>(CppUnit Test **__i) {\n  std move_iterator<CppUnit Test **> <span class=\"supfact\">v2</span>;\n  std move_iterator<CppUnit Test **> move_iterator(&<span class=\"supfact\">v2</span>, __i);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "struct std::move_iterator<CppUnit::Test**> { CppUnit::Test ** _M_current; }", "pred_name": "v2", "ref_name": "v2", "ref_type": "struct std::move_iterator<CppUnit::Test**> { CppUnit::Test ** _M_current; }"}], "body_in_train": true}, {"repo_owner": "casenh", "repo_name": "covert-channels", "path": "casenh/covert-channels/3874c6a2206afa824f092c8e48374342385a0e711752ae6f364d2495e357b5ed", "path_in_repo": "casenh/covert-channels/papi-5.3.0/src/libpfm-3.y/examples_v2.x/self", "objdump": "000000000040536b <pfm_create_context>:\n  40536b:\t55                   \tpush   %rbp\n  40536c:\t48 89 e5             \tmov    %rsp,%rbp\n  40536f:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  405376:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n  40537d:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n  405384:\t48 89 95 58 ff ff ff \tmov    %rdx,-0xa8(%rbp)\n  40538b:\t48 89 8d 50 ff ff ff \tmov    %rcx,-0xb0(%rbp)\n  405392:\t8b 05 40 92 0b 00    \tmov    0xb9240(%rip),%eax        # 4be5d8 <_pfmlib_major_version>\n  405398:\t83 f8 02             \tcmp    $0x2,%eax\n  40539b:\t0f 8f 2d 01 00 00    \tjg     4054ce <pfm_create_context+0x163>\n  4053a1:\t8b 05 2d 92 0b 00    \tmov    0xb922d(%rip),%eax        # 4be5d4 <_pfmlib_minor_version>\n  4053a7:\t83 f8 02             \tcmp    $0x2,%eax\n  4053aa:\t0f 8f e4 00 00 00    \tjg     405494 <pfm_create_context+0x129>\n  4053b0:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4053b7:\tba 80 00 00 00       \tmov    $0x80,%edx\n  4053bc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4053c1:\t48 89 c7             \tmov    %rax,%rdi\n  4053c4:\te8 47 bd ff ff       \tcallq  401110 <memset@plt>\n  4053c9:\t48 83 bd 60 ff ff ff \tcmpq   $0x0,-0xa0(%rbp)\n  4053d0:\t00 \n  4053d1:\t74 1c                \tje     4053ef <pfm_create_context+0x84>\n  4053d3:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4053da:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  4053de:\t48 8b 00             \tmov    (%rax),%rax\n  4053e1:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n  4053e8:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n  4053ef:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  4053f6:\t8b 00                \tmov    (%rax),%eax\n  4053f8:\t89 45 80             \tmov    %eax,-0x80(%rbp)\n  4053fb:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  405402:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n  405406:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  40540d:\t48 83 c0 20          \tadd    $0x20,%rax\n  405411:\tba 40 00 00 00       \tmov    $0x40,%edx\n  405416:\t48 89 ce             \tmov    %rcx,%rsi\n  405419:\t48 89 c7             \tmov    %rax,%rdi\n  40541c:\te8 8f bd ff ff       \tcallq  4011b0 <memcpy@plt>\n  405421:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405426:\te8 83 ec ff ff       \tcallq  4040ae <_pfmlib_get_sys_base>\n  40542b:\t48 98                \tcltq   \n  40542d:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n  405434:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  40543b:\t48 8d b5 70 ff ff ff \tlea    -0x90(%rbp),%rsi\n  405442:\t48 89 c7             \tmov    %rax,%rdi\n  405445:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40544a:\te8 41 bd ff ff       \tcallq  401190 <syscall@plt>\n  40544f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  405452:\t8b 55 80             \tmov    -0x80(%rbp),%edx\n  405455:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  40545c:\t89 10                \tmov    %edx,(%rax)\n  40545e:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  405465:\t48 83 c0 04          \tadd    $0x4,%rax\n  405469:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  405470:\t48 8d 4a 20          \tlea    0x20(%rdx),%rcx\n  405474:\tba 40 00 00 00       \tmov    $0x40,%edx\n  405479:\t48 89 ce             \tmov    %rcx,%rsi\n  40547c:\t48 89 c7             \tmov    %rax,%rdi\n  40547f:\te8 2c bd ff ff       \tcallq  4011b0 <memcpy@plt>\n  405484:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  405488:\t78 05                \tjs     40548f <pfm_create_context+0x124>\n  40548a:\t8b 45 84             \tmov    -0x7c(%rbp),%eax\n  40548d:\teb 63                \tjmp    4054f2 <pfm_create_context+0x187>\n  40548f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405492:\teb 5e                \tjmp    4054f2 <pfm_create_context+0x187>\n  405494:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405499:\te8 10 ec ff ff       \tcallq  4040ae <_pfmlib_get_sys_base>\n  40549e:\t48 98                \tcltq   \n  4054a0:\t48 8b bd 50 ff ff ff \tmov    -0xb0(%rbp),%rdi\n  4054a7:\t48 8b 8d 58 ff ff ff \tmov    -0xa8(%rbp),%rcx\n  4054ae:\t48 8b 95 60 ff ff ff \tmov    -0xa0(%rbp),%rdx\n  4054b5:\t48 8b b5 68 ff ff ff \tmov    -0x98(%rbp),%rsi\n  4054bc:\t49 89 f8             \tmov    %rdi,%r8\n  4054bf:\t48 89 c7             \tmov    %rax,%rdi\n  4054c2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4054c7:\te8 c4 bc ff ff       \tcallq  401190 <syscall@plt>\n  4054cc:\teb 24                \tjmp    4054f2 <pfm_create_context+0x187>\n  4054ce:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n  4054d5:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  4054dc:\t48 8b b5 60 ff ff ff \tmov    -0xa0(%rbp),%rsi\n  4054e3:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  4054ea:\t48 89 c7             \tmov    %rax,%rdi\n  4054ed:\te8 d7 eb ff ff       \tcallq  4040c9 <pfm_create_context_2v3>\n  4054f2:\tc9                   \tleaveq \n  4054f3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pfm_create_context(int *a1, __int64 *a2, __int64 a3,\n                                      __int64 a4, __int64 a5, int a6) {\n  __int64 v6;\n  int v7;\n  __int64 result;\n  int v9;\n  __int64 <span class=\"supfact\">s</span>[Number];\n  int v13;\n  unsigned int v14;\n  _BYTE v15[Number];\n  unsigned int v16;\n  if (pfmlib_major_version > Number)\n    return pfm_create_context_2v3(a1, (__int64)a2, a3, a4, a5, a6);\n  if (pfmlib_minor_version > Number) {\n    v9 = pfmlib_get_sys_base();\n    result = syscall(v9, a1, a2, a3, a4);\n  } else {\n    memset(<span class=\"supfact\">s</span>, Number, Number);\n    if (a2) {\n      v6 = a2[Number];\n      <span class=\"supfact\">s</span>[Number] = *a2;\n      <span class=\"supfact\">s</span>[Number] = v6;\n    }\n    v13 = *a1;\n    memcpy(v15, a1 + Number, Number);\n    v7 = pfmlib_get_sys_base();\n    v16 = syscall(v7, <span class=\"supfact\">s</span>, a3, a4);\n    *a1 = v13;\n    memcpy(a1 + Number, v15, Number);\n    if ((v16 & Number) != Number)\n      result = v16;\n    else\n      result = v14;\n  }\n  return result;\n}", "code_t": "int __cdecl pfm_create_context(pfarg_ctx_t *ctx, char *name, void *smpl_arg,\n                               size_t smpl_size) {\n  __int64 v4;\n  int v5;\n  int result;\n  int v7;\n  pfarg_ctx22_t <span class=\"supfact\">ctx22</span>;\n  int r;\n  if (pfmlib_major_version > Number)\n    return pfm_create_context_2v3(ctx, name, smpl_arg, smpl_size);\n  if (pfmlib_minor_version > Number) {\n    v7 = pfmlib_get_sys_base();\n    result = syscall(v7, ctx, name, smpl_arg, smpl_size);\n  } else {\n    memset(&<span class=\"supfact\">ctx22</span>, Number, sizeof(<span class=\"supfact\">ctx22</span>));\n    if (name) {\n      v4 = *((_QWORD *)name + Number);\n      *(_QWORD *)<span class=\"supfact\">ctx22</span>.ctx_smpl_buf_id = *(_QWORD *)name;\n      *(_QWORD *)&<span class=\"supfact\">ctx22</span>.ctx_smpl_buf_id[Number] = v4;\n    }\n    <span class=\"supfact\">ctx22</span>.ctx_flags = ctx->ctx_flags;\n    memcpy(<span class=\"supfact\">ctx22</span>.ctx_reserved3, &ctx->ctx_reserved1, Number);\n    v5 = pfmlib_get_sys_base();\n    r = syscall(v5, &<span class=\"supfact\">ctx22</span>, smpl_arg, smpl_size);\n    ctx->ctx_flags = <span class=\"supfact\">ctx22</span>.ctx_flags;\n    memcpy(&ctx->ctx_reserved1, <span class=\"supfact\">ctx22</span>.ctx_reserved3,\n           sizeof(pfarg_ctx_t));\n    if (r < Number)\n      result = r;\n    else\n      result = <span class=\"supfact\">ctx22</span>.ctx_fd;\n  }\n  return result;\n}", "var": [{"name": "s", "type": "struct pfarg_ctx22_t { unsigned __int8[16] ctx_smpl_buf_id; uint32_t ctx_flags; int32_t ctx_fd; uint64_t ctx_smpl_buf_size; uint64_t[12] ctx_reserved3; }", "pred_name": "ctx22", "ref_name": "ctx22", "ref_type": "struct pfarg_ctx22_t { unsigned __int8[16] ctx_smpl_buf_id; uint32_t ctx_flags; int32_t ctx_fd; uint64_t ctx_smpl_buf_size; uint64_t[12] ctx_reserved3; }"}], "body_in_train": true}, {"repo_owner": "cledesm", "repo_name": "git", "path": "cledesm/git/61b34cc079613a414241055c9513bc5ce37a36bd919d071ad2c505af9e2b090d", "path_in_repo": "cledesm/git//environment.o", "objdump": "000000000000033c <setup_git_env>:\n 33c:\t55                   \tpush   %rbp\n 33d:\t48 89 e5             \tmov    %rsp,%rbp\n 340:\t48 83 ec 30          \tsub    $0x30,%rsp\n 344:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n 34b:\t00 \n 34c:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n 353:\t00 \n 354:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n 35b:\t00 \n 35c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 361:\te8 00 00 00 00       \tcallq  366 <setup_git_env+0x2a>\n 366:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 36d <setup_git_env+0x31>\n 36d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 374 <setup_git_env+0x38>\n 374:\t48 85 c0             \ttest   %rax,%rax\n 377:\t75 0b                \tjne    384 <setup_git_env+0x48>\n 379:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 384 <setup_git_env+0x48>\n 380:\t00 00 00 00 \n 384:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 38b <setup_git_env+0x4f>\n 38b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 390:\t48 89 c7             \tmov    %rax,%rdi\n 393:\te8 00 00 00 00       \tcallq  398 <setup_git_env+0x5c>\n 398:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 39c:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 3a1:\t74 06                \tje     3a9 <setup_git_env+0x6d>\n 3a3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3a7:\teb 07                \tjmp    3b0 <setup_git_env+0x74>\n 3a9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3b0 <setup_git_env+0x74>\n 3b0:\t48 89 c7             \tmov    %rax,%rdi\n 3b3:\te8 00 00 00 00       \tcallq  3b8 <setup_git_env+0x7c>\n 3b8:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 3bf <setup_git_env+0x83>\n 3bf:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 3c6 <setup_git_env+0x8a>\n 3c6:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 3ca:\t48 89 d6             \tmov    %rdx,%rsi\n 3cd:\t48 89 c7             \tmov    %rax,%rdi\n 3d0:\te8 00 00 00 00       \tcallq  3d5 <setup_git_env+0x99>\n 3d5:\t85 c0                \ttest   %eax,%eax\n 3d7:\t74 0a                \tje     3e3 <setup_git_env+0xa7>\n 3d9:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 3e3 <setup_git_env+0xa7>\n 3e0:\t00 00 00 \n 3e3:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 3e7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3ec:\t48 89 c7             \tmov    %rax,%rdi\n 3ef:\te8 00 00 00 00       \tcallq  3f4 <setup_git_env+0xb8>\n 3f4:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 3fb <setup_git_env+0xbf>\n 3fb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 402 <setup_git_env+0xc6>\n 402:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 407:\tba 00 00 00 00       \tmov    $0x0,%edx\n 40c:\t48 89 c6             \tmov    %rax,%rsi\n 40f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 414:\te8 b9 fe ff ff       \tcallq  2d2 <git_path_from_env>\n 419:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 420 <setup_git_env+0xe4>\n 420:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 427 <setup_git_env+0xeb>\n 427:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 42c:\tba 00 00 00 00       \tmov    $0x0,%edx\n 431:\t48 89 c6             \tmov    %rax,%rsi\n 434:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 439:\te8 94 fe ff ff       \tcallq  2d2 <git_path_from_env>\n 43e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 445 <setup_git_env+0x109>\n 445:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 44c <setup_git_env+0x110>\n 44c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 451:\tba 00 00 00 00       \tmov    $0x0,%edx\n 456:\t48 89 c6             \tmov    %rax,%rsi\n 459:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 45e:\te8 6f fe ff ff       \tcallq  2d2 <git_path_from_env>\n 463:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 46a <setup_git_env+0x12e>\n 46a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 46f:\te8 00 00 00 00       \tcallq  474 <setup_git_env+0x138>\n 474:\t48 85 c0             \ttest   %rax,%rax\n 477:\t74 0a                \tje     483 <setup_git_env+0x147>\n 479:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 483 <setup_git_env+0x147>\n 480:\t00 00 00 \n 483:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 488:\te8 00 00 00 00       \tcallq  48d <setup_git_env+0x151>\n 48d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 491:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 496:\t74 06                \tje     49e <setup_git_env+0x162>\n 498:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 49c:\teb 05                \tjmp    4a3 <setup_git_env+0x167>\n 49e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4a3:\t48 89 c7             \tmov    %rax,%rdi\n 4a6:\te8 00 00 00 00       \tcallq  4ab <setup_git_env+0x16f>\n 4ab:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 4b2 <setup_git_env+0x176>\n 4b2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 4b7:\te8 00 00 00 00       \tcallq  4bc <setup_git_env+0x180>\n 4bc:\t48 89 c7             \tmov    %rax,%rdi\n 4bf:\te8 dd fc ff ff       \tcallq  1a1 <expand_namespace>\n 4c4:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 4cb <setup_git_env+0x18f>\n 4cb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4d2 <setup_git_env+0x196>\n 4d2:\t48 89 c7             \tmov    %rax,%rdi\n 4d5:\te8 00 00 00 00       \tcallq  4da <setup_git_env+0x19e>\n 4da:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 4e1 <setup_git_env+0x1a5>\n 4e1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 4e6:\te8 00 00 00 00       \tcallq  4eb <setup_git_env+0x1af>\n 4eb:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 4ef:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 4f4:\t74 11                \tje     507 <setup_git_env+0x1cb>\n 4f6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4fa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 4ff:\t48 89 c7             \tmov    %rax,%rdi\n 502:\te8 00 00 00 00       \tcallq  507 <setup_git_env+0x1cb>\n 507:\t90                   \tnop\n 508:\tc9                   \tleaveq \n 509:\tc3                   \tretq   ", "code_s": "char *setup_git_env() {\n  __int64 v0;\n  const char *v1;\n  char *v2;\n  char *result;\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  char *v5;\n  char *v6;\n  __int64 v7;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  <span class=\"supfact\">v4</span>[Number] = (__int64)&strbuf_slopbuf;\n  git_dir = (__int64)getenv(String);\n  if (!git_dir)\n    git_dir = (__int64)String;\n  v7 = read_gitfile_gently(git_dir, Number L);\n  if (v7)\n    v0 = v7;\n  else\n    v0 = git_dir;\n  git_dir = xstrdup(v0);\n  if ((unsigned int)get_common_dir(<span class=\"supfact\">v4</span>, git_dir))\n    git_common_dir_env = Number;\n  git_common_dir = strbuf_detach(<span class=\"supfact\">v4</span>, Number L);\n  git_object_dir = git_path_from_env(String, (const char *)git_common_dir,\n                                     String, &git_db_env);\n  git_index_file =\n      git_path_from_env(String, (const char *)git_dir, String, &git_index_env);\n  git_graft_file = git_path_from_env(String, (const char *)git_common_dir,\n                                     String, &git_graft_env);\n  if (getenv(String))\n    check_replace_refs = Number;\n  v6 = getenv(String);\n  if (v6)\n    v1 = v6;\n  else\n    v1 = String;\n  git_replace_ref_base = xstrdup(v1);\n  v2 = getenv(String);\n  namespace = (char *)expand_namespace(v2);\n  namespace_len = strlen(namespace);\n  result = getenv(String);\n  v5 = result;\n  if (result)\n    result = (char *)set_alternate_shallow_file(v5, Number L);\n  return result;\n}", "code_t": "void __cdecl setup_git_env() {\n  const char *v0;\n  const char *v1;\n  char *v2;\n  strbuf <span class=\"supfact\">sb</span>;\n  const char *shallow_file;\n  const char *replace_ref_base;\n  const char *gitfile;\n  <span class=\"supfact\">sb</span>.alloc = Number L;\n  <span class=\"supfact\">sb</span>.len = Number L;\n  <span class=\"supfact\">sb</span>.buf = (char *)&strbuf_slopbuf;\n  git_dir = getenv(String);\n  if (!git_dir)\n    git_dir = String;\n  gitfile = (const char *)read_gitfile_gently(git_dir, Number L);\n  if (gitfile)\n    v0 = gitfile;\n  else\n    v0 = git_dir;\n  git_dir = (const char *)xstrdup(v0);\n  if ((unsigned int)get_common_dir(&<span class=\"supfact\">sb</span>, git_dir))\n    git_common_dir_env = Number;\n  git_common_dir = (const char *)strbuf_detach(&<span class=\"supfact\">sb</span>, Number L);\n  git_object_dir =\n      git_path_from_env(String, git_common_dir, String, &git_db_env);\n  git_index_file = git_path_from_env(String, git_dir, String, &git_index_env);\n  git_graft_file =\n      git_path_from_env(String, git_common_dir, String, &git_graft_env);\n  if (getenv(String))\n    check_replace_refs = Number;\n  replace_ref_base = getenv(String);\n  if (replace_ref_base)\n    v1 = replace_ref_base;\n  else\n    v1 = String;\n  git_replace_ref_base = xstrdup(v1);\n  v2 = getenv(String);\n  namespace = expand_namespace(v2);\n  namespace_len = strlen(namespace);\n  shallow_file = getenv(String);\n  if (shallow_file)\n    set_alternate_shallow_file(shallow_file, Number L);\n}", "var": [{"name": "v4", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "pred_name": "sb", "ref_name": "sb", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": false}, {"repo_owner": "mpokwsths", "repo_name": "flo_kernel", "path": "mpokwsths/flo_kernel/086fb9998e1349be8cf42ac2e541ae9e858658de602767a6c819245c43d0e334", "path_in_repo": "mpokwsths/flo_kernel/tools/perf/builtin-top.o", "objdump": "0000000000001bb8 <display_thread>:\n    1bb8:\t55                   \tpush   %rbp\n    1bb9:\t48 89 e5             \tmov    %rsp,%rbp\n    1bbc:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    1bc3:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n    1bca:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1bd1:\t00 00 \n    1bd3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1bd7:\t31 c0                \txor    %eax,%eax\n    1bd9:\t48 c7 85 68 ff ff ff \tmovq   $0x0,-0x98(%rbp)\n    1be0:\t00 00 00 00 \n    1be4:\t66 c7 85 6c ff ff ff \tmovw   $0x1,-0x94(%rbp)\n    1beb:\t01 00 \n    1bed:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1bf4:\t48 89 85 60 ff ff ff \tmov    %rax,-0xa0(%rbp)\n    1bfb:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    1bff:\t48 89 c6             \tmov    %rax,%rsi\n    1c02:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1c07:\te8 00 00 00 00       \tcallq  1c0c <display_thread+0x54>\n    1c0c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1c10:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    1c14:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n    1c1b:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    1c22:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1c26:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    1c2a:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n    1c2e:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n    1c32:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1c36:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1c3a:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n    1c3e:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n    1c42:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c46:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n    1c4a:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    1c4d:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n    1c50:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n    1c56:\t83 e0 f5             \tand    $0xfffffff5,%eax\n    1c59:\t89 85 7c ff ff ff    \tmov    %eax,-0x84(%rbp)\n    1c5f:\tc6 45 87 00          \tmovb   $0x0,-0x79(%rbp)\n    1c63:\tc6 45 86 00          \tmovb   $0x0,-0x7a(%rbp)\n    1c67:\te8 00 00 00 00       \tcallq  1c6c <display_thread+0xb4>\n    1c6c:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    1c73:\t8b 80 b8 00 00 00    \tmov    0xb8(%rax),%eax\n    1c79:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n    1c7f:\t89 85 58 ff ff ff    \tmov    %eax,-0xa8(%rbp)\n    1c85:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    1c8c:\t48 89 c2             \tmov    %rax,%rdx\n    1c8f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c94:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1c99:\te8 00 00 00 00       \tcallq  1c9e <display_thread+0xe6>\n    1c9e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ca5 <display_thread+0xed>\n    1ca5:\t48 89 c7             \tmov    %rax,%rdi\n    1ca8:\te8 00 00 00 00       \tcallq  1cad <display_thread+0xf5>\n    1cad:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    1cb4:\t48 89 c7             \tmov    %rax,%rdi\n    1cb7:\te8 01 ee ff ff       \tcallq  abd <perf_top__print_sym_table>\n    1cbc:\t8b 95 58 ff ff ff    \tmov    -0xa8(%rbp),%edx\n    1cc2:\t48 8d 85 68 ff ff ff \tlea    -0x98(%rbp),%rax\n    1cc9:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1cce:\t48 89 c7             \tmov    %rax,%rdi\n    1cd1:\te8 00 00 00 00       \tcallq  1cd6 <display_thread+0x11e>\n    1cd6:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    1cd9:\t74 06                \tje     1ce1 <display_thread+0x129>\n    1cdb:\t85 c0                \ttest   %eax,%eax\n    1cdd:\t75 11                \tjne    1cf0 <display_thread+0x138>\n    1cdf:\teb 0d                \tjmp    1cee <display_thread+0x136>\n    1ce1:\te8 00 00 00 00       \tcallq  1ce6 <display_thread+0x12e>\n    1ce6:\t8b 00                \tmov    (%rax),%eax\n    1ce8:\t83 f8 04             \tcmp    $0x4,%eax\n    1ceb:\t75 03                \tjne    1cf0 <display_thread+0x138>\n    1ced:\t90                   \tnop\n    1cee:\teb bd                \tjmp    1cad <display_thread+0xf5>\n    1cf0:\t90                   \tnop\n    1cf1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1cf8 <display_thread+0x140>\n    1cf8:\t48 89 c7             \tmov    %rax,%rdi\n    1cfb:\te8 00 00 00 00       \tcallq  1d00 <display_thread+0x148>\n    1d00:\t89 85 5c ff ff ff    \tmov    %eax,-0xa4(%rbp)\n    1d06:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    1d0a:\t48 89 c2             \tmov    %rax,%rdx\n    1d0d:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    1d12:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1d17:\te8 00 00 00 00       \tcallq  1d1c <display_thread+0x164>\n    1d1c:\t8b 95 5c ff ff ff    \tmov    -0xa4(%rbp),%edx\n    1d22:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    1d29:\t89 d6                \tmov    %edx,%esi\n    1d2b:\t48 89 c7             \tmov    %rax,%rdi\n    1d2e:\te8 17 f6 ff ff       \tcallq  134a <perf_top__handle_keypress>\n    1d33:\te9 34 ff ff ff       \tjmpq   1c6c <display_thread+0xb4>", "code_s": "void __fastcall __noreturn display_thread(__int64 a1) {\n  int v1;\n  int timeout;\n  int v3;\n  struct pollfd <span class=\"supfact\">fds</span>;\n  struct termios <span class=\"supfact\">v5</span>;\n  struct termios <span class=\"supfact\">termios_p</span>;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  <span class=\"supfact\">fds</span> = (struct pollfd)Number;\n  tcgetattr(Number, &<span class=\"supfact\">termios_p</span>);\n  *(_QWORD *)&<span class=\"supfact\">v5</span>.c_iflag =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_iflag;\n  <span class=\"supfact\">v5</span>.c_cflag = <span class=\"supfact\">termios_p</span>.c_cflag;\n  *(_QWORD *)&<span class=\"supfact\">v5</span>.c_line =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_line;\n  *(_QWORD *)&<span class=\"supfact\">v5</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">v5</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">v5</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">v5</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_cc[Number];\n  <span class=\"supfact\">v5</span>.c_ospeed = <span class=\"supfact\">termios_p</span>.c_ospeed;\n  <span class=\"supfact\">v5</span>.c_lflag = <span class=\"supfact\">termios_p</span>.c_lflag & Number;\n  <span class=\"supfact\">v5</span>.c_cc[Number] = Number;\n  <span class=\"supfact\">v5</span>.c_cc[Number] = Number;\n  pthread__unblock_sigwinch();\n  while (Number) {\n    timeout = Number * *(_DWORD *)(a1 + Number);\n    tcsetattr(Number, Number, &<span class=\"supfact\">v5</span>);\n    getc(stdin);\n    do {\n      while (Number) {\n        perf_top__print_sym_table(a1);\n        v1 = poll(&<span class=\"supfact\">fds</span>, Number, timeout);\n        if (v1 == Number)\n          break;\n        if (v1)\n          goto LABEL_7;\n      }\n    } while (*_errno_location() == Number);\n  LABEL_7:\n    v3 = getc(stdin);\n    tcsetattr(Number, Number, &<span class=\"supfact\">termios_p</span>);\n    perf_top__handle_keypress(a1, v3);\n  }\n}", "code_t": "void *__cdecl __noreturn display_thread(void *arg) {\n  int v1;\n  int delay_msecs;\n  int c;\n  pollfd <span class=\"supfact\">stdin_poll</span>;\n  termios <span class=\"supfact\">tc</span>;\n  termios <span class=\"supfact\">save</span>;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  <span class=\"supfact\">stdin_poll</span> = (pollfd)Number;\n  tcgetattr(Number, &<span class=\"supfact\">save</span>);\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_iflag =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_iflag;\n  <span class=\"supfact\">tc</span>.c_cflag = <span class=\"supfact\">save</span>.c_cflag;\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_line =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_line;\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_cc[Number];\n  <span class=\"supfact\">tc</span>.c_ospeed = <span class=\"supfact\">save</span>.c_ospeed;\n  <span class=\"supfact\">tc</span>.c_lflag = <span class=\"supfact\">save</span>.c_lflag & Number;\n  <span class=\"supfact\">tc</span>.c_cc[Number] = Number;\n  <span class=\"supfact\">tc</span>.c_cc[Number] = Number;\n  pthread__unblock_sigwinch();\n  while (Number) {\n    delay_msecs = Number * *((_DWORD *)arg + Number);\n    tcsetattr(Number, Number, &<span class=\"supfact\">tc</span>);\n    getc(stdin);\n    do {\n      while (Number) {\n        perf_top__print_sym_table((perf_top *)arg);\n        v1 = poll(&<span class=\"supfact\">stdin_poll</span>, Number, delay_msecs);\n        if (v1 == Number)\n          break;\n        if (v1)\n          goto LABEL_7;\n      }\n    } while (*_errno_location() == Number);\n  LABEL_7:\n    c = getc(stdin);\n    tcsetattr(Number, Number, &<span class=\"supfact\">save</span>);\n    perf_top__handle_keypress((perf_top *)arg, c);\n  }\n}", "var": [{"name": "fds", "type": "struct pollfd { int fd; __int16 events; __int16 revents; }", "pred_name": "stdin_poll", "ref_name": "stdin_poll", "ref_type": "struct pollfd { int fd; __int16 events; __int16 revents; }"}, {"name": "v5", "type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }", "pred_name": "tc", "ref_name": "tc", "ref_type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }"}, {"name": "termios_p", "type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }", "pred_name": "save", "ref_name": "save", "ref_type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }"}], "body_in_train": true}, {"repo_owner": "joostrenes", "repo_name": "web", "path": "joostrenes/web/4c54da1514a53c97595728a59d4ee0787c1ca7104fce40dad058a3a005f7855e", "path_in_repo": "joostrenes/web/software/kummer/cref-kl25519/test/test", "objdump": "00000000004072a8 <group_scalar_sub>:\n  4072a8:\t55                   \tpush   %rbp\n  4072a9:\t48 89 e5             \tmov    %rsp,%rbp\n  4072ac:\t48 83 ec 68          \tsub    $0x68,%rsp\n  4072b0:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  4072b4:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  4072b8:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  4072bc:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4072c3:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4072ca:\teb 47                \tjmp    407313 <group_scalar_sub+0x6b>\n  4072cc:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4072cf:\t48 98                \tcltq   \n  4072d1:\t8b 0c 85 00 82 40 00 \tmov    0x408200(,%rax,4),%ecx\n  4072d8:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4072dc:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  4072df:\t48 63 d2             \tmovslq %edx,%rdx\n  4072e2:\t0f b7 04 50          \tmovzwl (%rax,%rdx,2),%eax\n  4072e6:\t0f b7 c0             \tmovzwl %ax,%eax\n  4072e9:\t29 c1                \tsub    %eax,%ecx\n  4072eb:\t89 c8                \tmov    %ecx,%eax\n  4072ed:\t2b 45 fc             \tsub    -0x4(%rbp),%eax\n  4072f0:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4072f3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  4072f6:\t0f b6 d0             \tmovzbl %al,%edx\n  4072f9:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4072fc:\t48 98                \tcltq   \n  4072fe:\t66 89 54 45 b0       \tmov    %dx,-0x50(%rbp,%rax,2)\n  407303:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  407306:\tc1 e8 08             \tshr    $0x8,%eax\n  407309:\t83 e0 01             \tand    $0x1,%eax\n  40730c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40730f:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  407313:\t83 7d f8 1f          \tcmpl   $0x1f,-0x8(%rbp)\n  407317:\t7e b3                \tjle    4072cc <group_scalar_sub+0x24>\n  407319:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  40731d:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n  407321:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  407325:\t48 89 ce             \tmov    %rcx,%rsi\n  407328:\t48 89 c7             \tmov    %rax,%rdi\n  40732b:\te8 a3 fe ff ff       \tcallq  4071d3 <group_scalar_add>\n  407330:\t90                   \tnop\n  407331:\tc9                   \tleaveq \n  407332:\tc3                   \tretq   ", "code_s": "__int64 __fastcall group_scalar_sub(__int64 a1, __int64 a2, __int64 a3) {\n  __int16 <span class=\"supfact\">v4</span>[Number];\n  unsigned int v5;\n  int i;\n  unsigned int v7;\n  v7 = Number;\n  for (i = Number; i <= Number; ++i) {\n    v5 = m[i] - *(unsigned __int16 *)(a3 + Number L * i) - v7;\n    <span class=\"supfact\">v4</span>[i] = (unsigned __int8)v5;\n    v7 = (v5 >> Number) & Number;\n  }\n  return group_scalar_add(a1, a2, (__int64)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl group_scalar_sub(group_scalar *r, const group_scalar *x,\n                              const group_scalar *y) {\n  group_scalar <span class=\"supfact\">d</span>;\n  crypto_uint32 t;\n  int i;\n  crypto_uint32 b;\n  b = Number;\n  for (i = Number; i <= Number; ++i) {\n    t = m[i] - y->v[i] - b;\n    <span class=\"supfact\">d</span>.v[i] = (unsigned __int8)t;\n    b = (t >> Number) & Number;\n  }\n  group_scalar_add(r, x, &<span class=\"supfact\">d</span>);\n}", "var": [{"name": "v4", "type": "__unk__", "pred_name": "t", "ref_name": "d", "ref_type": "struct group_scalar { uint16_t[32] v; }"}], "body_in_train": true}, {"repo_owner": "mthuurne", "repo_name": "qemu-dingoo", "path": "mthuurne/qemu-dingoo/2db5b5f22d954c9e3847cd28cfce1f9907ed29c1690b92e2804afe891265f8f8", "path_in_repo": "mthuurne/qemu-dingoo//i386-softmmu/kvm.o", "objdump": "0000000000002368 <kvm_get_sregs>:\n    2368:\t55                   \tpush   %rbp\n    2369:\t48 89 e5             \tmov    %rsp,%rbp\n    236c:\t48 81 ec 60 01 00 00 \tsub    $0x160,%rsp\n    2373:\t48 89 bd a8 fe ff ff \tmov    %rdi,-0x158(%rbp)\n    237a:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2381:\t00 00 \n    2383:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2387:\t31 c0                \txor    %eax,%eax\n    2389:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n    2390:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2397:\tbe 83 ae 38 81       \tmov    $0x8138ae83,%esi\n    239c:\t48 89 c7             \tmov    %rax,%rdi\n    239f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    23a4:\te8 00 00 00 00       \tcallq  23a9 <kvm_get_sregs+0x41>\n    23a9:\t89 85 b8 fe ff ff    \tmov    %eax,-0x148(%rbp)\n    23af:\t83 bd b8 fe ff ff 00 \tcmpl   $0x0,-0x148(%rbp)\n    23b6:\t79 0b                \tjns    23c3 <kvm_get_sregs+0x5b>\n    23b8:\t8b 85 b8 fe ff ff    \tmov    -0x148(%rbp),%eax\n    23be:\te9 f9 03 00 00       \tjmpq   27bc <kvm_get_sregs+0x454>\n    23c3:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    23ca:\tc7 80 28 d2 00 00 ff \tmovl   $0xffffffff,0xd228(%rax)\n    23d1:\tff ff ff \n    23d4:\tc7 85 b4 fe ff ff 00 \tmovl   $0x0,-0x14c(%rbp)\n    23db:\t00 00 00 \n    23de:\teb 64                \tjmp    2444 <kvm_get_sregs+0xdc>\n    23e0:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n    23e6:\t48 98                \tcltq   \n    23e8:\t48 83 c0 22          \tadd    $0x22,%rax\n    23ec:\t48 8b 84 c5 c8 fe ff \tmov    -0x138(%rbp,%rax,8),%rax\n    23f3:\tff \n    23f4:\t48 85 c0             \ttest   %rax,%rax\n    23f7:\t74 44                \tje     243d <kvm_get_sregs+0xd5>\n    23f9:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n    23ff:\t48 98                \tcltq   \n    2401:\t48 83 c0 22          \tadd    $0x22,%rax\n    2405:\t48 8b 84 c5 c8 fe ff \tmov    -0x138(%rbp,%rax,8),%rax\n    240c:\tff \n    240d:\t48 89 c7             \tmov    %rax,%rdi\n    2410:\te8 33 dc ff ff       \tcallq  48 <ctz64>\n    2415:\t89 85 bc fe ff ff    \tmov    %eax,-0x144(%rbp)\n    241b:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n    2421:\tc1 e0 06             \tshl    $0x6,%eax\n    2424:\t89 c2                \tmov    %eax,%edx\n    2426:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n    242c:\t01 c2                \tadd    %eax,%edx\n    242e:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2435:\t89 90 28 d2 00 00    \tmov    %edx,0xd228(%rax)\n    243b:\teb 12                \tjmp    244f <kvm_get_sregs+0xe7>\n    243d:\t83 85 b4 fe ff ff 01 \taddl   $0x1,-0x14c(%rbp)\n    2444:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n    244a:\t83 f8 03             \tcmp    $0x3,%eax\n    244d:\t76 91                \tjbe    23e0 <kvm_get_sregs+0x78>\n    244f:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2456:\t48 8d 50 50          \tlea    0x50(%rax),%rdx\n    245a:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n    2461:\t48 89 c6             \tmov    %rax,%rsi\n    2464:\t48 89 d7             \tmov    %rdx,%rdi\n    2467:\te8 d0 ec ff ff       \tcallq  113c <get_seg>\n    246c:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2473:\t48 83 c0 70          \tadd    $0x70,%rax\n    2477:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n    247e:\t48 83 c2 18          \tadd    $0x18,%rdx\n    2482:\t48 89 d6             \tmov    %rdx,%rsi\n    2485:\t48 89 c7             \tmov    %rax,%rdi\n    2488:\te8 af ec ff ff       \tcallq  113c <get_seg>\n    248d:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2494:\t48 83 c0 40          \tadd    $0x40,%rax\n    2498:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n    249f:\t48 83 c2 30          \tadd    $0x30,%rdx\n    24a3:\t48 89 d6             \tmov    %rdx,%rsi\n    24a6:\t48 89 c7             \tmov    %rax,%rdi\n    24a9:\te8 8e ec ff ff       \tcallq  113c <get_seg>\n    24ae:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    24b5:\t48 83 e8 80          \tsub    $0xffffffffffffff80,%rax\n    24b9:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n    24c0:\t48 83 c2 48          \tadd    $0x48,%rdx\n    24c4:\t48 89 d6             \tmov    %rdx,%rsi\n    24c7:\t48 89 c7             \tmov    %rax,%rdi\n    24ca:\te8 6d ec ff ff       \tcallq  113c <get_seg>\n    24cf:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    24d6:\t48 05 90 00 00 00    \tadd    $0x90,%rax\n    24dc:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n    24e3:\t48 83 c2 60          \tadd    $0x60,%rdx\n    24e7:\t48 89 d6             \tmov    %rdx,%rsi\n    24ea:\t48 89 c7             \tmov    %rax,%rdi\n    24ed:\te8 4a ec ff ff       \tcallq  113c <get_seg>\n    24f2:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    24f9:\t48 83 c0 60          \tadd    $0x60,%rax\n    24fd:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n    2504:\t48 83 c2 78          \tadd    $0x78,%rdx\n    2508:\t48 89 d6             \tmov    %rdx,%rsi\n    250b:\t48 89 c7             \tmov    %rax,%rdi\n    250e:\te8 29 ec ff ff       \tcallq  113c <get_seg>\n    2513:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    251a:\t48 05 b0 00 00 00    \tadd    $0xb0,%rax\n    2520:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n    2527:\t48 81 c2 90 00 00 00 \tadd    $0x90,%rdx\n    252e:\t48 89 d6             \tmov    %rdx,%rsi\n    2531:\t48 89 c7             \tmov    %rax,%rdi\n    2534:\te8 03 ec ff ff       \tcallq  113c <get_seg>\n    2539:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2540:\t48 05 a0 00 00 00    \tadd    $0xa0,%rax\n    2546:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n    254d:\t48 81 c2 a8 00 00 00 \tadd    $0xa8,%rdx\n    2554:\t48 89 d6             \tmov    %rdx,%rsi\n    2557:\t48 89 c7             \tmov    %rax,%rdi\n    255a:\te8 dd eb ff ff       \tcallq  113c <get_seg>\n    255f:\t0f b7 45 98          \tmovzwl -0x68(%rbp),%eax\n    2563:\t0f b7 d0             \tmovzwl %ax,%edx\n    2566:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    256d:\t89 90 d8 00 00 00    \tmov    %edx,0xd8(%rax)\n    2573:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    2577:\t89 c2                \tmov    %eax,%edx\n    2579:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2580:\t89 90 d4 00 00 00    \tmov    %edx,0xd4(%rax)\n    2586:\t0f b7 45 88          \tmovzwl -0x78(%rbp),%eax\n    258a:\t0f b7 d0             \tmovzwl %ax,%edx\n    258d:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2594:\t89 90 c8 00 00 00    \tmov    %edx,0xc8(%rax)\n    259a:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    259e:\t89 c2                \tmov    %eax,%edx\n    25a0:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    25a7:\t89 90 c4 00 00 00    \tmov    %edx,0xc4(%rax)\n    25ad:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    25b1:\t89 c2                \tmov    %eax,%edx\n    25b3:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    25ba:\t89 90 e0 00 00 00    \tmov    %edx,0xe0(%rax)\n    25c0:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    25c4:\t89 c2                \tmov    %eax,%edx\n    25c6:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    25cd:\t89 90 e8 00 00 00    \tmov    %edx,0xe8(%rax)\n    25d3:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    25d7:\t89 c2                \tmov    %eax,%edx\n    25d9:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    25e0:\t89 90 ec 00 00 00    \tmov    %edx,0xec(%rax)\n    25e6:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    25ea:\t89 c2                \tmov    %eax,%edx\n    25ec:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    25f3:\t89 90 f0 00 00 00    \tmov    %edx,0xf0(%rax)\n    25f9:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    25fd:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2604:\t48 8b 80 38 d2 00 00 \tmov    0xd238(%rax),%rax\n    260b:\t48 89 d6             \tmov    %rdx,%rsi\n    260e:\t48 89 c7             \tmov    %rax,%rdi\n    2611:\te8 00 00 00 00       \tcallq  2616 <kvm_get_sregs+0x2ae>\n    2616:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    261a:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2621:\t48 89 90 70 02 00 00 \tmov    %rdx,0x270(%rax)\n    2628:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    262f:\t8b 40 5c             \tmov    0x5c(%rax),%eax\n    2632:\tc1 e8 0d             \tshr    $0xd,%eax\n    2635:\t83 e0 03             \tand    $0x3,%eax\n    2638:\t89 85 b0 fe ff ff    \tmov    %eax,-0x150(%rbp)\n    263e:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2645:\t8b 80 e0 00 00 00    \tmov    0xe0(%rax),%eax\n    264b:\tc1 e0 07             \tshl    $0x7,%eax\n    264e:\t0f b6 c0             \tmovzbl %al,%eax\n    2651:\t09 85 b0 fe ff ff    \tor     %eax,-0x150(%rbp)\n    2657:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    265e:\t8b 80 e0 00 00 00    \tmov    0xe0(%rax),%eax\n    2664:\tc1 e0 08             \tshl    $0x8,%eax\n    2667:\t25 00 0e 00 00       \tand    $0xe00,%eax\n    266c:\t09 85 b0 fe ff ff    \tor     %eax,-0x150(%rbp)\n    2672:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2679:\t8b 40 24             \tmov    0x24(%rax),%eax\n    267c:\t25 00 31 02 00       \tand    $0x23100,%eax\n    2681:\t09 85 b0 fe ff ff    \tor     %eax,-0x150(%rbp)\n    2687:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    268e:\t8b 80 f0 00 00 00    \tmov    0xf0(%rax),%eax\n    2694:\tc1 e0 0d             \tshl    $0xd,%eax\n    2697:\t25 00 00 40 00       \tand    $0x400000,%eax\n    269c:\t09 85 b0 fe ff ff    \tor     %eax,-0x150(%rbp)\n    26a2:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    26a9:\t48 8b 80 70 02 00 00 \tmov    0x270(%rax),%rax\n    26b0:\t25 00 04 00 00       \tand    $0x400,%eax\n    26b5:\t48 85 c0             \ttest   %rax,%rax\n    26b8:\t74 0a                \tje     26c4 <kvm_get_sregs+0x35c>\n    26ba:\t81 8d b0 fe ff ff 00 \torl    $0x4000,-0x150(%rbp)\n    26c1:\t40 00 00 \n    26c4:\t8b 85 b0 fe ff ff    \tmov    -0x150(%rbp),%eax\n    26ca:\t25 00 40 00 00       \tand    $0x4000,%eax\n    26cf:\t85 c0                \ttest   %eax,%eax\n    26d1:\t74 22                \tje     26f5 <kvm_get_sregs+0x38d>\n    26d3:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    26da:\t8b 40 5c             \tmov    0x5c(%rax),%eax\n    26dd:\t25 00 00 20 00       \tand    $0x200000,%eax\n    26e2:\t85 c0                \ttest   %eax,%eax\n    26e4:\t74 0f                \tje     26f5 <kvm_get_sregs+0x38d>\n    26e6:\t81 8d b0 fe ff ff 30 \torl    $0x8030,-0x150(%rbp)\n    26ed:\t80 00 00 \n    26f0:\te9 a1 00 00 00       \tjmpq   2796 <kvm_get_sregs+0x42e>\n    26f5:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    26fc:\t8b 40 5c             \tmov    0x5c(%rax),%eax\n    26ff:\tc1 e8 12             \tshr    $0x12,%eax\n    2702:\t83 e0 10             \tand    $0x10,%eax\n    2705:\t09 85 b0 fe ff ff    \tor     %eax,-0x150(%rbp)\n    270b:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2712:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n    2715:\tc1 e8 11             \tshr    $0x11,%eax\n    2718:\t83 e0 20             \tand    $0x20,%eax\n    271b:\t09 85 b0 fe ff ff    \tor     %eax,-0x150(%rbp)\n    2721:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2728:\t8b 80 e0 00 00 00    \tmov    0xe0(%rax),%eax\n    272e:\t83 e0 01             \tand    $0x1,%eax\n    2731:\t85 c0                \ttest   %eax,%eax\n    2733:\t74 20                \tje     2755 <kvm_get_sregs+0x3ed>\n    2735:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    273c:\t8b 40 24             \tmov    0x24(%rax),%eax\n    273f:\t25 00 00 02 00       \tand    $0x20000,%eax\n    2744:\t85 c0                \ttest   %eax,%eax\n    2746:\t75 0d                \tjne    2755 <kvm_get_sregs+0x3ed>\n    2748:\t8b 85 b0 fe ff ff    \tmov    -0x150(%rbp),%eax\n    274e:\t83 e0 10             \tand    $0x10,%eax\n    2751:\t85 c0                \ttest   %eax,%eax\n    2753:\t75 09                \tjne    275e <kvm_get_sregs+0x3f6>\n    2755:\t83 8d b0 fe ff ff 40 \torl    $0x40,-0x150(%rbp)\n    275c:\teb 38                \tjmp    2796 <kvm_get_sregs+0x42e>\n    275e:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2765:\t8b 50 74             \tmov    0x74(%rax),%edx\n    2768:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    276f:\t8b 40 44             \tmov    0x44(%rax),%eax\n    2772:\t09 c2                \tor     %eax,%edx\n    2774:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    277b:\t8b 40 64             \tmov    0x64(%rax),%eax\n    277e:\t09 d0                \tor     %edx,%eax\n    2780:\t85 c0                \ttest   %eax,%eax\n    2782:\t74 07                \tje     278b <kvm_get_sregs+0x423>\n    2784:\tb8 40 00 00 00       \tmov    $0x40,%eax\n    2789:\teb 05                \tjmp    2790 <kvm_get_sregs+0x428>\n    278b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2790:\t09 85 b0 fe ff ff    \tor     %eax,-0x150(%rbp)\n    2796:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    279d:\t8b 40 38             \tmov    0x38(%rax),%eax\n    27a0:\t25 0c 00 bd ff       \tand    $0xffbd000c,%eax\n    27a5:\t0b 85 b0 fe ff ff    \tor     -0x150(%rbp),%eax\n    27ab:\t89 c2                \tmov    %eax,%edx\n    27ad:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    27b4:\t89 50 38             \tmov    %edx,0x38(%rax)\n    27b7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    27bc:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    27c0:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    27c7:\t00 00 \n    27c9:\t74 05                \tje     27d0 <kvm_get_sregs+0x468>\n    27cb:\te8 00 00 00 00       \tcallq  27d0 <kvm_get_sregs+0x468>\n    27d0:\tc9                   \tleaveq \n    27d1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall kvm_get_sregs(__int64 a1) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  unsigned int i;\n  int v7;\n  char <span class=\"supfact\">v8</span>[Number];\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  _DWORD v15[Number];\n  unsigned __int16 v16;\n  __int64 v17;\n  unsigned __int16 v18;\n  __int64 v19;\n  __int64 v20;\n  __int64 v21;\n  __int64 v22;\n  __int64 v23;\n  __int64 v24;\n  unsigned __int64 v25;\n  v25 = __readfsqword(Number);\n  v7 = kvm_vcpu_ioctl(a1, Number L, <span class=\"supfact\">v8</span>);\n  if (v7 < Number)\n    return (unsigned int)v7;\n  *(_DWORD *)(a1 + Number) = Number;\n  for (i = Number; i <= Number; ++i) {\n    if (*(_QWORD *)&<span class=\"supfact\">v8</span>[Number * i + Number]) {\n      *(_DWORD *)(a1 + Number) =\n          ctz64(*(_QWORD *)&<span class=\"supfact\">v8</span>[Number * i + Number]) +\n          (i << Number);\n      break;\n    }\n  }\n  get_seg((_DWORD *)(a1 + Number), (__int64)<span class=\"supfact\">v8</span>);\n  get_seg((_DWORD *)(a1 + Number), (__int64)&v9);\n  get_seg((_DWORD *)(a1 + Number), (__int64)&v10);\n  get_seg((_DWORD *)(a1 + Number), (__int64)&v11);\n  get_seg((_DWORD *)(a1 + Number), (__int64)&v12);\n  get_seg((_DWORD *)(a1 + Number), (__int64)&v13);\n  get_seg((_DWORD *)(a1 + Number), (__int64)&v14);\n  get_seg((_DWORD *)(a1 + Number), (__int64)v15);\n  *(_DWORD *)(a1 + Number) = v18;\n  *(_DWORD *)(a1 + Number) = v17;\n  *(_DWORD *)(a1 + Number) = v16;\n  *(_DWORD *)(a1 + Number) = v15[Number];\n  *(_DWORD *)(a1 + Number) = v19;\n  *(_DWORD *)(a1 + Number) = v20;\n  *(_DWORD *)(a1 + Number) = v21;\n  *(_DWORD *)(a1 + Number) = v22;\n  cpu_set_apic_base(*(_QWORD *)(a1 + Number), v24);\n  *(_QWORD *)(a1 + Number) = v23;\n  v3 = (*(_DWORD *)(a1 + Number) << Number) & Number |\n       *(_DWORD *)(a1 + Number) & Number |\n       ((unsigned __int16)*(_DWORD *)(a1 + Number) << Number) & Number |\n       (unsigned __int8)((unsigned __int8)*(_DWORD *)(a1 + Number) << Number) |\n       (*(_DWORD *)(a1 + Number) >> Number) & Number;\n  if ((*(_QWORD *)(a1 + Number) & Number) != Number)\n    v3 |= Number;\n  if ((v3 & Number) != Number &&\n      (*(_DWORD *)(a1 + Number) & Number) != Number) {\n    v4 = v3 | Number;\n  } else {\n    v5 = (*(_DWORD *)(a1 + Number) >> Number) & Number |\n         (*(_DWORD *)(a1 + Number) >> Number) & Number | v3;\n    if ((*(_DWORD *)(a1 + Number) & Number) != Number &&\n        (*(_DWORD *)(a1 + Number) & Number) == Number &&\n        (v5 & Number) != Number) {\n      if (*(_DWORD *)(a1 + Number) | *(_DWORD *)(a1 + Number) |\n          *(_DWORD *)(a1 + Number))\n        v2 = Number;\n      else\n        v2 = Number;\n      v4 = v2 | v5;\n    } else {\n      v4 = v5 | Number;\n    }\n  }\n  *(_DWORD *)(a1 + Number) = v4 | *(_DWORD *)(a1 + Number) & Number;\n  return Number L;\n}", "code_t": "int __cdecl kvm_get_sregs(CPUX86State *env) {\n  int v2;\n  uint32_t hflags;\n  int hflagsa;\n  uint32_t hflagsb;\n  unsigned int i;\n  int ret;\n  kvm_sregs <span class=\"supfact\">sregs</span>;\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  ret = kvm_vcpu_ioctl(env, Number L, &<span class=\"supfact\">sregs</span>);\n  if (ret < Number)\n    return ret;\n  env->interrupt_injected = Number;\n  for (i = Number; i <= Number; ++i) {\n    if (<span class=\"supfact\">sregs</span>.interrupt_bitmap[i]) {\n      env->interrupt_injected =\n          ctz64(<span class=\"supfact\">sregs</span>.interrupt_bitmap[i]) + (i << Number);\n      break;\n    }\n  }\n  get_seg(&env->segs[Number], &<span class=\"supfact\">sregs</span>.cs);\n  get_seg(&env->segs[Number], &<span class=\"supfact\">sregs</span>.ds);\n  get_seg(env->segs, &<span class=\"supfact\">sregs</span>.es);\n  get_seg(&env->segs[Number], &<span class=\"supfact\">sregs</span>.fs);\n  get_seg(&env->segs[Number], &<span class=\"supfact\">sregs</span>.gs);\n  get_seg(&env->segs[Number], &<span class=\"supfact\">sregs</span>.ss);\n  get_seg(&env->tr, &<span class=\"supfact\">sregs</span>.tr);\n  get_seg(&env->ldt, &<span class=\"supfact\">sregs</span>.ldt);\n  env->idt.limit = <span class=\"supfact\">sregs</span>.idt.limit;\n  env->idt.base = <span class=\"supfact\">sregs</span>.idt.base;\n  env->gdt.limit = <span class=\"supfact\">sregs</span>.gdt.limit;\n  env->gdt.base = <span class=\"supfact\">sregs</span>.gdt.base;\n  env->cr[Number] = <span class=\"supfact\">sregs</span>.cr0;\n  env->cr[Number] = <span class=\"supfact\">sregs</span>.cr2;\n  env->cr[Number] = <span class=\"supfact\">sregs</span>.cr3;\n  env->cr[Number] = <span class=\"supfact\">sregs</span>.cr4;\n  cpu_set_apic_base(env->apic_state, <span class=\"supfact\">sregs</span>.apic_base);\n  env->efer = <span class=\"supfact\">sregs</span>.efer;\n  hflags = (env->cr[Number] << Number) & Number | env->eflags & Number |\n           ((unsigned __int16)env->cr[Number] << Number) & Number |\n           (unsigned __int8)((unsigned __int8)env->cr[Number] << Number) |\n           (env->segs[Number].flags >> Number) & Number;\n  if ((env->efer & Number) != Number)\n    hflags |= Number;\n  if ((hflags & Number) != Number &&\n      (env->segs[Number].flags & Number) != Number) {\n    hflagsa = hflags | Number;\n  } else {\n    hflagsb = (env->segs[Number].flags >> Number) & Number |\n              (env->segs[Number].flags >> Number) & Number | hflags;\n    if ((env->cr[Number] & Number) != Number &&\n        (env->eflags & Number) == Number && (hflagsb & Number) != Number) {\n      if (env->segs[Number].base | env->segs[Number].base |\n          env->segs[Number].base)\n        v2 = Number;\n      else\n        v2 = Number;\n      hflagsa = v2 | hflagsb;\n    } else {\n      hflagsa = hflagsb | Number;\n    }\n  }\n  env->hflags = hflagsa | env->hflags & Number;\n  return Number;\n}", "var": [{"name": "v8", "type": "struct kvm_sregs { kvm_segment cs; kvm_segment ds; kvm_segment es; kvm_segment fs; kvm_segment gs; kvm_segment ss; kvm_segment tr; kvm_segment ldt; kvm_dtable gdt; kvm_dtable idt; __u64 cr0; __u64 cr2; __u64 cr3; __u64 cr4; __u64 cr8; __u64 efer; __u64 apic_base; __u64[4] interrupt_bitmap; }", "pred_name": "sregs", "ref_name": "sregs", "ref_type": "struct kvm_sregs { kvm_segment cs; kvm_segment ds; kvm_segment es; kvm_segment fs; kvm_segment gs; kvm_segment ss; kvm_segment tr; kvm_segment ldt; kvm_dtable gdt; kvm_dtable idt; __u64 cr0; __u64 cr2; __u64 cr3; __u64 cr4; __u64 cr8; __u64 efer; __u64 apic_base; __u64[4] interrupt_bitmap; }"}], "body_in_train": true}, {"repo_owner": "aschils", "repo_name": "packetdrill_mptcp", "path": "aschils/packetdrill_mptcp/f12586e93c870ce6d623d457774db79bece9afbd194c2c1db368116c352992a8", "path_in_repo": "aschils/packetdrill_mptcp/gtests/net/packetdrill/packet_to_string_test", "objdump": "000000000042913b <sha1_least_64bits>:\n  42913b:\t55                   \tpush   %rbp\n  42913c:\t48 89 e5             \tmov    %rsp,%rbp\n  42913f:\t48 83 ec 30          \tsub    $0x30,%rsp\n  429143:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  429147:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42914b:\t48 89 c7             \tmov    %rax,%rdi\n  42914e:\te8 ac fe ff ff       \tcallq  428fff <get_barray_from_key64>\n  429153:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  429157:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  42915b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  42915f:\t48 89 d6             \tmov    %rdx,%rsi\n  429162:\t48 89 c7             \tmov    %rax,%rdi\n  429165:\te8 4b fe ff ff       \tcallq  428fb5 <hash_key_sha1>\n  42916a:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  42916e:\t48 83 c0 0c          \tadd    $0xc,%rax\n  429172:\t48 8b 00             \tmov    (%rax),%rax\n  429175:\t48 89 c7             \tmov    %rax,%rdi\n  429178:\te8 18 cf ff ff       \tcallq  426095 <__bswap_64>\n  42917d:\tc9                   \tleaveq \n  42917e:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall sha1_least_64bits(__int64 a1) {\n  char v2[Number];\n  unsigned __int64 v3;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = get_barray_from_key64(a1);\n  hash_key_sha1(v2, <span class=\"supfact\">v4</span>);\n  return _bswap_64_0(v3);\n}", "code_t": "u64 __cdecl sha1_least_64bits(u64 key) {\n  uint8_t hash[Number];\n  key64 <span class=\"supfact\">key_arr</span>;\n  <span class=\"supfact\">key_arr</span> = get_barray_from_key64(key);\n  hash_key_sha1(hash, <span class=\"supfact\">key_arr</span>);\n  return _bswap_64_0(*(__uint64_t *)&hash[Number]);\n}", "var": [{"name": "v4", "type": "void *", "pred_name": "v4", "ref_name": "key_arr", "ref_type": "struct key64 { uint8_t[8] data; }"}], "body_in_train": false}, {"repo_owner": "bpintea", "repo_name": "elasticsearch-sql-odbc", "path": "bpintea/elasticsearch-sql-odbc/87177b47b31df0d277c608f1921f2be61b69a4a8e3f9fcb3648eed1c4be239ef", "path_in_repo": "bpintea/elasticsearch-sql-odbc/libs/tinycbor/tools/cborpretty.o", "objdump": "0000000000000b89 <value_to_pretty>:\n     b89:\t55                   \tpush   %rbp\n     b8a:\t48 89 e5             \tmov    %rsp,%rbp\n     b8d:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n     b94:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n     b9b:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n     ba2:\t48 89 95 38 ff ff ff \tmov    %rdx,-0xc8(%rbp)\n     ba9:\t89 8d 34 ff ff ff    \tmov    %ecx,-0xcc(%rbp)\n     baf:\t44 89 85 30 ff ff ff \tmov    %r8d,-0xd0(%rbp)\n     bb6:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     bbd:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     bc4:\t48 89 c7             \tmov    %rax,%rdi\n     bc7:\te8 83 f4 ff ff       \tcallq  4f <cbor_value_get_type>\n     bcc:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n     bcf:\t81 7d d4 ff 00 00 00 \tcmpl   $0xff,-0x2c(%rbp)\n     bd6:\t0f 87 6f 09 00 00    \tja     154b <value_to_pretty+0x9c2>\n     bdc:\t81 7d d4 c0 00 00 00 \tcmpl   $0xc0,-0x2c(%rbp)\n     be3:\t73 59                \tjae    c3e <value_to_pretty+0xb5>\n     be5:\t81 7d d4 a0 00 00 00 \tcmpl   $0xa0,-0x2c(%rbp)\n     bec:\t74 6d                \tje     c5b <value_to_pretty+0xd2>\n     bee:\t81 7d d4 a0 00 00 00 \tcmpl   $0xa0,-0x2c(%rbp)\n     bf5:\t0f 87 50 09 00 00    \tja     154b <value_to_pretty+0x9c2>\n     bfb:\t81 7d d4 80 00 00 00 \tcmpl   $0x80,-0x2c(%rbp)\n     c02:\t74 57                \tje     c5b <value_to_pretty+0xd2>\n     c04:\t81 7d d4 80 00 00 00 \tcmpl   $0x80,-0x2c(%rbp)\n     c0b:\t0f 87 3a 09 00 00    \tja     154b <value_to_pretty+0x9c2>\n     c11:\t83 7d d4 60          \tcmpl   $0x60,-0x2c(%rbp)\n     c15:\t0f 84 a1 02 00 00    \tje     ebc <value_to_pretty+0x333>\n     c1b:\t83 7d d4 60          \tcmpl   $0x60,-0x2c(%rbp)\n     c1f:\t0f 87 26 09 00 00    \tja     154b <value_to_pretty+0x9c2>\n     c25:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n     c29:\t0f 84 9a 01 00 00    \tje     dc9 <value_to_pretty+0x240>\n     c2f:\t83 7d d4 40          \tcmpl   $0x40,-0x2c(%rbp)\n     c33:\t0f 84 83 02 00 00    \tje     ebc <value_to_pretty+0x333>\n     c39:\te9 0d 09 00 00       \tjmpq   154b <value_to_pretty+0x9c2>\n     c3e:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     c41:\t2d c0 00 00 00       \tsub    $0xc0,%eax\n     c46:\t83 f8 3f             \tcmp    $0x3f,%eax\n     c49:\t0f 87 fc 08 00 00    \tja     154b <value_to_pretty+0x9c2>\n     c4f:\t89 c0                \tmov    %eax,%eax\n     c51:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     c58:\t00 \n     c59:\tff e0                \tjmpq   *%rax\n     c5b:\t8b 95 34 ff ff ff    \tmov    -0xcc(%rbp),%edx\n     c61:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     c68:\t89 d6                \tmov    %edx,%esi\n     c6a:\t48 89 c7             \tmov    %rax,%rdi\n     c6d:\te8 d4 fd ff ff       \tcallq  a46 <get_indicator>\n     c72:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     c76:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     c7a:\t0f b6 00             \tmovzbl (%rax),%eax\n     c7d:\t84 c0                \ttest   %al,%al\n     c7f:\t75 06                \tjne    c87 <value_to_pretty+0xfe>\n     c81:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     c85:\teb 05                \tjmp    c8c <value_to_pretty+0x103>\n     c87:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c8c:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     c90:\t81 7d d4 80 00 00 00 \tcmpl   $0x80,-0x2c(%rbp)\n     c97:\t75 07                \tjne    ca0 <value_to_pretty+0x117>\n     c99:\tbe 5b 00 00 00       \tmov    $0x5b,%esi\n     c9e:\teb 05                \tjmp    ca5 <value_to_pretty+0x11c>\n     ca0:\tbe 7b 00 00 00       \tmov    $0x7b,%esi\n     ca5:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     ca9:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     cad:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     cb4:\t4c 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%r9\n     cbb:\t49 89 c8             \tmov    %rcx,%r8\n     cbe:\t48 89 d1             \tmov    %rdx,%rcx\n     cc1:\t89 f2                \tmov    %esi,%edx\n     cc3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     cc8:\t48 89 c7             \tmov    %rax,%rdi\n     ccb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     cd0:\t41 ff d1             \tcallq  *%r9\n     cd3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     cd6:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     cda:\t74 08                \tje     ce4 <value_to_pretty+0x15b>\n     cdc:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     cdf:\te9 82 08 00 00       \tjmpq   1566 <value_to_pretty+0x9dd>\n     ce4:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n     ce8:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     cef:\t48 89 d6             \tmov    %rdx,%rsi\n     cf2:\t48 89 c7             \tmov    %rax,%rdi\n     cf5:\te8 00 00 00 00       \tcallq  cfa <value_to_pretty+0x171>\n     cfa:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     cfd:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     d01:\t74 17                \tje     d1a <value_to_pretty+0x191>\n     d03:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n     d07:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     d0e:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n     d12:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     d15:\te9 4c 08 00 00       \tjmpq   1566 <value_to_pretty+0x9dd>\n     d1a:\t8b 85 30 ff ff ff    \tmov    -0xd0(%rbp),%eax\n     d20:\t44 8d 40 ff          \tlea    -0x1(%rax),%r8d\n     d24:\t8b bd 34 ff ff ff    \tmov    -0xcc(%rbp),%edi\n     d2a:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n     d2d:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n     d31:\t48 8b b5 40 ff ff ff \tmov    -0xc0(%rbp),%rsi\n     d38:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     d3f:\t45 89 c1             \tmov    %r8d,%r9d\n     d42:\t41 89 f8             \tmov    %edi,%r8d\n     d45:\t48 89 c7             \tmov    %rax,%rdi\n     d48:\te8 2a fd ff ff       \tcallq  a77 <container_to_pretty>\n     d4d:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     d50:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     d54:\t74 17                \tje     d6d <value_to_pretty+0x1e4>\n     d56:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n     d5a:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     d61:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n     d65:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     d68:\te9 f9 07 00 00       \tjmpq   1566 <value_to_pretty+0x9dd>\n     d6d:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n     d71:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     d78:\t48 89 d6             \tmov    %rdx,%rsi\n     d7b:\t48 89 c7             \tmov    %rax,%rdi\n     d7e:\te8 00 00 00 00       \tcallq  d83 <value_to_pretty+0x1fa>\n     d83:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     d86:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     d8a:\t74 08                \tje     d94 <value_to_pretty+0x20b>\n     d8c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     d8f:\te9 d2 07 00 00       \tjmpq   1566 <value_to_pretty+0x9dd>\n     d94:\t81 7d d4 80 00 00 00 \tcmpl   $0x80,-0x2c(%rbp)\n     d9b:\t75 07                \tjne    da4 <value_to_pretty+0x21b>\n     d9d:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     da2:\teb 05                \tjmp    da9 <value_to_pretty+0x220>\n     da4:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     da9:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     db0:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n     db7:\t48 89 ce             \tmov    %rcx,%rsi\n     dba:\t48 89 c7             \tmov    %rax,%rdi\n     dbd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     dc2:\tff d2                \tcallq  *%rdx\n     dc4:\te9 9d 07 00 00       \tjmpq   1566 <value_to_pretty+0x9dd>\n     dc9:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n     dcd:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     dd4:\t48 89 d6             \tmov    %rdx,%rsi\n     dd7:\t48 89 c7             \tmov    %rax,%rdi\n     dda:\te8 ad f3 ff ff       \tcallq  18c <cbor_value_get_raw_integer>\n     ddf:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     de6:\t48 89 c7             \tmov    %rax,%rdi\n     de9:\te8 5f f3 ff ff       \tcallq  14d <cbor_value_is_unsigned_integer>\n     dee:\t84 c0                \ttest   %al,%al\n     df0:\t74 26                \tje     e18 <value_to_pretty+0x28f>\n     df2:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n     df6:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     dfd:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n     e04:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     e09:\t48 89 c7             \tmov    %rax,%rdi\n     e0c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e11:\tff d1                \tcallq  *%rcx\n     e13:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     e16:\teb 5b                \tjmp    e73 <value_to_pretty+0x2ea>\n     e18:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     e1c:\t48 83 c0 01          \tadd    $0x1,%rax\n     e20:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n     e24:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     e28:\t48 85 c0             \ttest   %rax,%rax\n     e2b:\t74 26                \tje     e53 <value_to_pretty+0x2ca>\n     e2d:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n     e31:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     e38:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n     e3f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     e44:\t48 89 c7             \tmov    %rax,%rdi\n     e47:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e4c:\tff d1                \tcallq  *%rcx\n     e4e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     e51:\teb 20                \tjmp    e73 <value_to_pretty+0x2ea>\n     e53:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     e5a:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n     e61:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     e66:\t48 89 c7             \tmov    %rax,%rdi\n     e69:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e6e:\tff d2                \tcallq  *%rdx\n     e70:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     e73:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     e77:\t0f 85 cd 06 00 00    \tjne    154a <value_to_pretty+0x9c1>\n     e7d:\t8b 95 34 ff ff ff    \tmov    -0xcc(%rbp),%edx\n     e83:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     e8a:\t89 d6                \tmov    %edx,%esi\n     e8c:\t48 89 c7             \tmov    %rax,%rdi\n     e8f:\te8 b2 fb ff ff       \tcallq  a46 <get_indicator>\n     e94:\t48 89 c2             \tmov    %rax,%rdx\n     e97:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     e9e:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n     ea5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     eaa:\t48 89 c7             \tmov    %rax,%rdi\n     ead:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     eb2:\tff d1                \tcallq  *%rcx\n     eb4:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     eb7:\te9 8e 06 00 00       \tjmpq   154a <value_to_pretty+0x9c1>\n     ebc:\t48 c7 45 90 00 00 00 \tmovq   $0x0,-0x70(%rbp)\n     ec3:\t00 \n     ec4:\t8b 85 34 ff ff ff    \tmov    -0xcc(%rbp),%eax\n     eca:\t25 00 01 00 00       \tand    $0x100,%eax\n     ecf:\t85 c0                \ttest   %eax,%eax\n     ed1:\t74 1d                \tje     ef0 <value_to_pretty+0x367>\n     ed3:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     eda:\t48 89 c7             \tmov    %rax,%rdi\n     edd:\te8 fd f2 ff ff       \tcallq  1df <cbor_value_is_length_known>\n     ee2:\t83 f0 01             \txor    $0x1,%eax\n     ee5:\t84 c0                \ttest   %al,%al\n     ee7:\t74 07                \tje     ef0 <value_to_pretty+0x367>\n     ee9:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     eee:\teb 05                \tjmp    ef5 <value_to_pretty+0x36c>\n     ef0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ef5:\t88 45 bf             \tmov    %al,-0x41(%rbp)\n     ef8:\t80 65 bf 01          \tandb   $0x1,-0x41(%rbp)\n     efc:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     f03:\t00 \n     f04:\tc6 45 ef 27          \tmovb   $0x27,-0x11(%rbp)\n     f08:\t66 c7 45 85 68 27    \tmovw   $0x2768,-0x7b(%rbp)\n     f0e:\tc6 45 87 00          \tmovb   $0x0,-0x79(%rbp)\n     f12:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n     f19:\t00 \n     f1a:\t83 7d d4 60          \tcmpl   $0x60,-0x2c(%rbp)\n     f1e:\t75 0f                \tjne    f2f <value_to_pretty+0x3a6>\n     f20:\tc6 45 85 22          \tmovb   $0x22,-0x7b(%rbp)\n     f24:\t0f b6 45 85          \tmovzbl -0x7b(%rbp),%eax\n     f28:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n     f2b:\tc6 45 86 00          \tmovb   $0x0,-0x7a(%rbp)\n     f2f:\t80 7d bf 00          \tcmpb   $0x0,-0x41(%rbp)\n     f33:\t74 41                \tje     f76 <value_to_pretty+0x3ed>\n     f35:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     f3c:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n     f43:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f48:\t48 89 c7             \tmov    %rax,%rdi\n     f4b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f50:\tff d2                \tcallq  *%rdx\n     f52:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     f55:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     f59:\t0f 85 75 01 00 00    \tjne    10d4 <value_to_pretty+0x54b>\n     f5f:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     f66:\t48 89 c7             \tmov    %rax,%rdi\n     f69:\te8 00 00 00 00       \tcallq  f6e <value_to_pretty+0x3e5>\n     f6e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     f71:\te9 5e 01 00 00       \tjmpq   10d4 <value_to_pretty+0x54b>\n     f76:\t48 8d 55 85          \tlea    -0x7b(%rbp),%rdx\n     f7a:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     f81:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n     f88:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f8d:\t48 89 c7             \tmov    %rax,%rdi\n     f90:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f95:\tff d1                \tcallq  *%rcx\n     f97:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     f9a:\te9 35 01 00 00       \tjmpq   10d4 <value_to_pretty+0x54b>\n     f9f:\t80 7d bf 00          \tcmpb   $0x0,-0x41(%rbp)\n     fa3:\t75 07                \tjne    fac <value_to_pretty+0x423>\n     fa5:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n     faa:\t75 2d                \tjne    fd9 <value_to_pretty+0x450>\n     fac:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     fb3:\t48 8b 00             \tmov    (%rax),%rax\n     fb6:\t48 8b 08             \tmov    (%rax),%rcx\n     fb9:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     fc0:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     fc4:\t8b 95 34 ff ff ff    \tmov    -0xcc(%rbp),%edx\n     fca:\t48 89 ce             \tmov    %rcx,%rsi\n     fcd:\t48 89 c7             \tmov    %rax,%rdi\n     fd0:\te8 64 f9 ff ff       \tcallq  939 <resolve_indicator>\n     fd5:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     fd9:\t48 8b 8d 38 ff ff ff \tmov    -0xc8(%rbp),%rcx\n     fe0:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n     fe4:\t48 8d 75 88          \tlea    -0x78(%rbp),%rsi\n     fe8:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     fef:\t48 89 c7             \tmov    %rax,%rdi\n     ff2:\te8 00 00 00 00       \tcallq  ff7 <value_to_pretty+0x46e>\n     ff7:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     ffa:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     ffe:\t74 08                \tje     1008 <value_to_pretty+0x47f>\n    1000:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1003:\te9 5e 05 00 00       \tjmpq   1566 <value_to_pretty+0x9dd>\n    1008:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    100c:\t48 85 c0             \ttest   %rax,%rax\n    100f:\t0f 84 cb 00 00 00    \tje     10e0 <value_to_pretty+0x557>\n    1015:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    1019:\t75 2f                \tjne    104a <value_to_pretty+0x4c1>\n    101b:\t80 7d bf 00          \tcmpb   $0x0,-0x41(%rbp)\n    101f:\t74 29                \tje     104a <value_to_pretty+0x4c1>\n    1021:\t48 8d 4d 85          \tlea    -0x7b(%rbp),%rcx\n    1025:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1029:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    1030:\t4c 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%r8\n    1037:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    103c:\t48 89 c7             \tmov    %rax,%rdi\n    103f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1044:\t41 ff d0             \tcallq  *%r8\n    1047:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    104a:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    104e:\t75 47                \tjne    1097 <value_to_pretty+0x50e>\n    1050:\t83 7d d4 40          \tcmpl   $0x40,-0x2c(%rbp)\n    1054:\t75 20                \tjne    1076 <value_to_pretty+0x4ed>\n    1056:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n    105a:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    105e:\t48 8b b5 40 ff ff ff \tmov    -0xc0(%rbp),%rsi\n    1065:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    106c:\t48 89 c7             \tmov    %rax,%rdi\n    106f:\te8 b6 f6 ff ff       \tcallq  72a <hexDump>\n    1074:\teb 1e                \tjmp    1094 <value_to_pretty+0x50b>\n    1076:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n    107a:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    107e:\t48 8b b5 40 ff ff ff \tmov    -0xc0(%rbp),%rsi\n    1085:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    108c:\t48 89 c7             \tmov    %rax,%rdi\n    108f:\te8 07 f7 ff ff       \tcallq  79b <utf8EscapedDump>\n    1094:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1097:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    109b:\t75 37                \tjne    10d4 <value_to_pretty+0x54b>\n    109d:\t80 7d bf 00          \tcmpb   $0x0,-0x41(%rbp)\n    10a1:\t74 31                \tje     10d4 <value_to_pretty+0x54b>\n    10a3:\t0f be 55 ef          \tmovsbl -0x11(%rbp),%edx\n    10a7:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    10ab:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    10b2:\t4c 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%r8\n    10b9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    10be:\t48 89 c7             \tmov    %rax,%rdi\n    10c1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    10c6:\t41 ff d0             \tcallq  *%r8\n    10c9:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    10cc:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    10d3:\t00 \n    10d4:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    10d8:\t0f 84 c1 fe ff ff    \tje     f9f <value_to_pretty+0x416>\n    10de:\teb 01                \tjmp    10e1 <value_to_pretty+0x558>\n    10e0:\t90                   \tnop\n    10e1:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    10e5:\t75 51                \tjne    1138 <value_to_pretty+0x5af>\n    10e7:\t80 7d bf 00          \tcmpb   $0x0,-0x41(%rbp)\n    10eb:\t74 22                \tje     110f <value_to_pretty+0x586>\n    10ed:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    10f4:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    10fb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1100:\t48 89 c7             \tmov    %rax,%rdi\n    1103:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1108:\tff d2                \tcallq  *%rdx\n    110a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    110d:\teb 29                \tjmp    1138 <value_to_pretty+0x5af>\n    110f:\t0f be 55 ef          \tmovsbl -0x11(%rbp),%edx\n    1113:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    1117:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    111e:\t4c 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%r8\n    1125:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    112a:\t48 89 c7             \tmov    %rax,%rdi\n    112d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1132:\t41 ff d0             \tcallq  *%r8\n    1135:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1138:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    113b:\te9 26 04 00 00       \tjmpq   1566 <value_to_pretty+0x9dd>\n    1140:\t48 8d 95 78 ff ff ff \tlea    -0x88(%rbp),%rdx\n    1147:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    114e:\t48 89 d6             \tmov    %rdx,%rsi\n    1151:\t48 89 c7             \tmov    %rax,%rdi\n    1154:\te8 ba f0 ff ff       \tcallq  213 <cbor_value_get_tag>\n    1159:\t8b 95 34 ff ff ff    \tmov    -0xcc(%rbp),%edx\n    115f:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    1166:\t89 d6                \tmov    %edx,%esi\n    1168:\t48 89 c7             \tmov    %rax,%rdi\n    116b:\te8 d6 f8 ff ff       \tcallq  a46 <get_indicator>\n    1170:\t48 89 c1             \tmov    %rax,%rcx\n    1173:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    117a:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    1181:\t4c 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%r8\n    1188:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    118d:\t48 89 c7             \tmov    %rax,%rdi\n    1190:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1195:\t41 ff d0             \tcallq  *%r8\n    1198:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    119b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    119f:\t75 12                \tjne    11b3 <value_to_pretty+0x62a>\n    11a1:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    11a8:\t48 89 c7             \tmov    %rax,%rdi\n    11ab:\te8 00 00 00 00       \tcallq  11b0 <value_to_pretty+0x627>\n    11b0:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    11b3:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    11b7:\t75 3d                \tjne    11f6 <value_to_pretty+0x66d>\n    11b9:\t83 bd 30 ff ff ff 00 \tcmpl   $0x0,-0xd0(%rbp)\n    11c0:\t74 34                \tje     11f6 <value_to_pretty+0x66d>\n    11c2:\t8b 85 30 ff ff ff    \tmov    -0xd0(%rbp),%eax\n    11c8:\t8d 78 ff             \tlea    -0x1(%rax),%edi\n    11cb:\t8b 8d 34 ff ff ff    \tmov    -0xcc(%rbp),%ecx\n    11d1:\t48 8b 95 38 ff ff ff \tmov    -0xc8(%rbp),%rdx\n    11d8:\t48 8b b5 40 ff ff ff \tmov    -0xc0(%rbp),%rsi\n    11df:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    11e6:\t41 89 f8             \tmov    %edi,%r8d\n    11e9:\t48 89 c7             \tmov    %rax,%rdi\n    11ec:\te8 98 f9 ff ff       \tcallq  b89 <value_to_pretty>\n    11f1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    11f4:\teb 1f                \tjmp    1215 <value_to_pretty+0x68c>\n    11f6:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    11fa:\t75 19                \tjne    1215 <value_to_pretty+0x68c>\n    11fc:\t48 8b 95 40 ff ff ff \tmov    -0xc0(%rbp),%rdx\n    1203:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    120a:\t48 89 d6             \tmov    %rdx,%rsi\n    120d:\t48 89 c7             \tmov    %rax,%rdi\n    1210:\te8 eb f4 ff ff       \tcallq  700 <printRecursionLimit>\n    1215:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    1219:\t75 20                \tjne    123b <value_to_pretty+0x6b2>\n    121b:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    1222:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    1229:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    122e:\t48 89 c7             \tmov    %rax,%rdi\n    1231:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1236:\tff d2                \tcallq  *%rdx\n    1238:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    123b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    123e:\te9 23 03 00 00       \tjmpq   1566 <value_to_pretty+0x9dd>\n    1243:\t48 8d 95 77 ff ff ff \tlea    -0x89(%rbp),%rdx\n    124a:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    1251:\t48 89 d6             \tmov    %rdx,%rsi\n    1254:\t48 89 c7             \tmov    %rax,%rdi\n    1257:\te8 8a ee ff ff       \tcallq  e6 <cbor_value_get_simple_type>\n    125c:\t0f b6 85 77 ff ff ff \tmovzbl -0x89(%rbp),%eax\n    1263:\t0f b6 d0             \tmovzbl %al,%edx\n    1266:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    126d:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n    1274:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1279:\t48 89 c7             \tmov    %rax,%rdi\n    127c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1281:\tff d1                \tcallq  *%rcx\n    1283:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1286:\te9 c0 02 00 00       \tjmpq   154b <value_to_pretty+0x9c2>\n    128b:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    1292:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    1299:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    129e:\t48 89 c7             \tmov    %rax,%rdi\n    12a1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12a6:\tff d2                \tcallq  *%rdx\n    12a8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    12ab:\te9 9b 02 00 00       \tjmpq   154b <value_to_pretty+0x9c2>\n    12b0:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    12b7:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    12be:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    12c3:\t48 89 c7             \tmov    %rax,%rdi\n    12c6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12cb:\tff d2                \tcallq  *%rdx\n    12cd:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    12d0:\te9 76 02 00 00       \tjmpq   154b <value_to_pretty+0x9c2>\n    12d5:\t48 8d 95 76 ff ff ff \tlea    -0x8a(%rbp),%rdx\n    12dc:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    12e3:\t48 89 d6             \tmov    %rdx,%rsi\n    12e6:\t48 89 c7             \tmov    %rax,%rdi\n    12e9:\te8 8d ed ff ff       \tcallq  7b <cbor_value_get_boolean>\n    12ee:\t0f b6 85 76 ff ff ff \tmovzbl -0x8a(%rbp),%eax\n    12f5:\t84 c0                \ttest   %al,%al\n    12f7:\t74 07                \tje     1300 <value_to_pretty+0x777>\n    12f9:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    12fe:\teb 05                \tjmp    1305 <value_to_pretty+0x77c>\n    1300:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1305:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    130c:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    1313:\t48 89 ce             \tmov    %rcx,%rsi\n    1316:\t48 89 c7             \tmov    %rax,%rdi\n    1319:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    131e:\tff d2                \tcallq  *%rdx\n    1320:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1323:\te9 23 02 00 00       \tjmpq   154b <value_to_pretty+0x9c2>\n    1328:\t48 8d 95 5c ff ff ff \tlea    -0xa4(%rbp),%rdx\n    132f:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    1336:\t48 89 d6             \tmov    %rdx,%rsi\n    1339:\t48 89 c7             \tmov    %rax,%rdi\n    133c:\te8 3c ef ff ff       \tcallq  27d <cbor_value_get_float>\n    1341:\tf3 0f 10 85 5c ff ff \tmovss  -0xa4(%rbp),%xmm0\n    1348:\tff \n    1349:\tf3 0f 5a c0          \tcvtss2sd %xmm0,%xmm0\n    134d:\tf2 0f 11 85 68 ff ff \tmovsd  %xmm0,-0x98(%rbp)\n    1354:\tff \n    1355:\t8b 85 34 ff ff ff    \tmov    -0xcc(%rbp),%eax\n    135b:\t83 e0 01             \tand    $0x1,%eax\n    135e:\t85 c0                \ttest   %eax,%eax\n    1360:\t74 07                \tje     1369 <value_to_pretty+0x7e0>\n    1362:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1367:\teb 05                \tjmp    136e <value_to_pretty+0x7e5>\n    1369:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    136e:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1372:\teb 76                \tjmp    13ea <value_to_pretty+0x861>\n    1374:\t48 8d 95 5a ff ff ff \tlea    -0xa6(%rbp),%rdx\n    137b:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    1382:\t48 89 d6             \tmov    %rdx,%rsi\n    1385:\t48 89 c7             \tmov    %rax,%rdi\n    1388:\te8 00 00 00 00       \tcallq  138d <value_to_pretty+0x804>\n    138d:\t0f b7 85 5a ff ff ff \tmovzwl -0xa6(%rbp),%eax\n    1394:\t0f b7 c0             \tmovzwl %ax,%eax\n    1397:\t89 c7                \tmov    %eax,%edi\n    1399:\te8 ff ef ff ff       \tcallq  39d <decode_half>\n    139e:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n    13a3:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n    13aa:\t8b 85 34 ff ff ff    \tmov    -0xcc(%rbp),%eax\n    13b0:\t83 e0 01             \tand    $0x1,%eax\n    13b3:\t85 c0                \ttest   %eax,%eax\n    13b5:\t74 07                \tje     13be <value_to_pretty+0x835>\n    13b7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    13bc:\teb 05                \tjmp    13c3 <value_to_pretty+0x83a>\n    13be:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    13c3:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    13c7:\teb 21                \tjmp    13ea <value_to_pretty+0x861>\n    13c9:\t48 8d 95 68 ff ff ff \tlea    -0x98(%rbp),%rdx\n    13d0:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    13d7:\t48 89 d6             \tmov    %rdx,%rsi\n    13da:\t48 89 c7             \tmov    %rax,%rdi\n    13dd:\te8 35 ef ff ff       \tcallq  317 <cbor_value_get_double>\n    13e2:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    13e9:\t00 \n    13ea:\t8b 85 34 ff ff ff    \tmov    -0xcc(%rbp),%eax\n    13f0:\t83 e0 01             \tand    $0x1,%eax\n    13f3:\t85 c0                \ttest   %eax,%eax\n    13f5:\t75 7a                \tjne    1471 <value_to_pretty+0x8e8>\n    13f7:\tf2 0f 10 85 68 ff ff \tmovsd  -0x98(%rbp),%xmm0\n    13fe:\tff \n    13ff:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 1407 <value_to_pretty+0x87e>\n    1406:\t00 \n    1407:\t66 0f 54 c1          \tandpd  %xmm1,%xmm0\n    140b:\t66 0f 2e c0          \tucomisd %xmm0,%xmm0\n    140f:\t7a 44                \tjp     1455 <value_to_pretty+0x8cc>\n    1411:\t66 0f 2e 05 00 00 00 \tucomisd 0x0(%rip),%xmm0        # 1419 <value_to_pretty+0x890>\n    1418:\t00 \n    1419:\t77 33                \tja     144e <value_to_pretty+0x8c5>\n    141b:\t66 0f 2f 05 00 00 00 \tcomisd 0x0(%rip),%xmm0        # 1423 <value_to_pretty+0x89a>\n    1422:\t00 \n    1423:\t72 07                \tjb     142c <value_to_pretty+0x8a3>\n    1425:\tb8 04 00 00 00       \tmov    $0x4,%eax\n    142a:\teb 2e                \tjmp    145a <value_to_pretty+0x8d1>\n    142c:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1430:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n    1434:\t7a 11                \tjp     1447 <value_to_pretty+0x8be>\n    1436:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    143a:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n    143e:\t75 07                \tjne    1447 <value_to_pretty+0x8be>\n    1440:\tb8 02 00 00 00       \tmov    $0x2,%eax\n    1445:\teb 13                \tjmp    145a <value_to_pretty+0x8d1>\n    1447:\tb8 03 00 00 00       \tmov    $0x3,%eax\n    144c:\teb 0c                \tjmp    145a <value_to_pretty+0x8d1>\n    144e:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1453:\teb 05                \tjmp    145a <value_to_pretty+0x8d1>\n    1455:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    145a:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    145d:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n    1461:\t74 06                \tje     1469 <value_to_pretty+0x8e0>\n    1463:\t83 7d d0 01          \tcmpl   $0x1,-0x30(%rbp)\n    1467:\t75 08                \tjne    1471 <value_to_pretty+0x8e8>\n    1469:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    1470:\t00 \n    1471:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    1478:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n    147f:\t48 89 d7             \tmov    %rdx,%rdi\n    1482:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n    1487:\te8 aa f1 ff ff       \tcallq  636 <convertToUint64>\n    148c:\t84 c0                \ttest   %al,%al\n    148e:\t74 55                \tje     14e5 <value_to_pretty+0x95c>\n    1490:\t48 8b 95 60 ff ff ff \tmov    -0xa0(%rbp),%rdx\n    1497:\tf2 0f 10 8d 68 ff ff \tmovsd  -0x98(%rbp),%xmm1\n    149e:\tff \n    149f:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    14a3:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    14a7:\t76 07                \tjbe    14b0 <value_to_pretty+0x927>\n    14a9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    14ae:\teb 05                \tjmp    14b5 <value_to_pretty+0x92c>\n    14b0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    14b5:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n    14b9:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    14c0:\t4c 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%r9\n    14c7:\t49 89 c8             \tmov    %rcx,%r8\n    14ca:\t48 89 d1             \tmov    %rdx,%rcx\n    14cd:\t48 89 f2             \tmov    %rsi,%rdx\n    14d0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    14d5:\t48 89 c7             \tmov    %rax,%rdi\n    14d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    14dd:\t41 ff d1             \tcallq  *%r9\n    14e0:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    14e3:\teb 66                \tjmp    154b <value_to_pretty+0x9c2>\n    14e5:\t48 8b 8d 68 ff ff ff \tmov    -0x98(%rbp),%rcx\n    14ec:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    14f0:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    14f7:\t4c 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%r8\n    14fe:\t66 48 0f 6e c1       \tmovq   %rcx,%xmm0\n    1503:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1508:\t48 89 c7             \tmov    %rax,%rdi\n    150b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1510:\t41 ff d0             \tcallq  *%r8\n    1513:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1516:\teb 33                \tjmp    154b <value_to_pretty+0x9c2>\n    1518:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    151f:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    1526:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    152b:\t48 89 c7             \tmov    %rax,%rdi\n    152e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1533:\tff d2                \tcallq  *%rdx\n    1535:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1538:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    153c:\t74 05                \tje     1543 <value_to_pretty+0x9ba>\n    153e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1541:\teb 23                \tjmp    1566 <value_to_pretty+0x9dd>\n    1543:\tb8 03 01 00 00       \tmov    $0x103,%eax\n    1548:\teb 1c                \tjmp    1566 <value_to_pretty+0x9dd>\n    154a:\t90                   \tnop\n    154b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    154f:\t75 12                \tjne    1563 <value_to_pretty+0x9da>\n    1551:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    1558:\t48 89 c7             \tmov    %rax,%rdi\n    155b:\te8 00 00 00 00       \tcallq  1560 <value_to_pretty+0x9d7>\n    1560:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1563:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1566:\tc9                   \tleaveq \n    1567:\tc3                   \tretq   ", "code_s": "__int64 __fastcall value_to_pretty(__int64(__fastcall *a1)(__int64,\n                                                           const char *),\n                                   __int64 a2, __int64 a3, unsigned int a4,\n                                   int a5) {\n  const char *v5;\n  unsigned int v6;\n  __int64 result;\n  const char *v8;\n  char *v9;\n  bool v10;\n  unsigned int v11;\n  char *v12;\n  const char *v13;\n  const char *v14;\n  const char *v15;\n  double v16;\n  int v17;\n  const char *v18;\n  __int16 v23;\n  float v24;\n  unsigned __int64 v25;\n  double v26;\n  bool v27;\n  unsigned __int8 v28;\n  __int64 v29;\n  char v30[Number];\n  __int64 v31;\n  __int64 v32;\n  char <span class=\"supfact\">v33</span>[Number];\n  __int64 v34;\n  bool v35;\n  const char *v36;\n  char *v37;\n  int v38;\n  unsigned int v39;\n  const char *v40;\n  char *v41;\n  char v42;\n  const char *v43;\n  unsigned int v44;\n  v44 = Number;\n  v39 = cbor_value_get_type(a3);\n  if (v39 > Number)\n    goto LABEL_115;\n  if (v39 >= Number) {\n    switch (v39) {\n    case Number:\n      cbor_value_get_tag(a3, &v29);\n      v12 = get_indicator(a3, a4);\n      v44 = ((__int64 (*)(__int64, const char *, ...))a1)(a2, String, v29, v12);\n      if (!v44)\n        v44 = cbor_value_advance_fixed(a3);\n      if (v44 || !a5) {\n        if (!v44)\n          printRecursionLimit(a1, a2);\n      } else {\n        v44 = value_to_pretty(a1, a2, a3, a4, (unsigned int)(a5 - Number));\n      }\n      if (!v44)\n        v44 = a1(a2, String);\n      return v44;\n    case Number:\n      cbor_value_get_simple_type(a3, &v28);\n      v44 = ((__int64 (*)(__int64, const char *, ...))a1)(a2, String, v28);\n      goto LABEL_115;\n    case Number:\n      cbor_value_get_boolean(a3, &v27);\n      if (v27)\n        v13 = String;\n      else\n        v13 = String;\n      v44 = a1(a2, v13);\n      goto LABEL_115;\n    case Number:\n      v44 = a1(a2, String);\n      goto LABEL_115;\n    case Number:\n      v44 = a1(a2, String);\n      goto LABEL_115;\n    case Number:\n      cbor_value_get_half_float(a3, &v23);\n      v26 = decode_half(v23);\n      if ((a4 & Number) != Number)\n        v15 = String;\n      else\n        v15 = String;\n      v40 = v15;\n      goto LABEL_96;\n    case Number:\n      cbor_value_get_float(a3, &v24);\n      v26 = v24;\n      if ((a4 & Number) != Number)\n        v14 = String;\n      else\n        v14 = String;\n      v40 = v14;\n      goto LABEL_96;\n    case Number:\n      cbor_value_get_double(a3, &v26);\n      v40 = (const char *)&unk_17C8;\n    LABEL_96:\n      if ((a4 & Number) == Number) {\n        v16 = fabs(v26);\n        if (v16 > Number) {\n          v17 = Number;\n        } else if (v16 < Number) {\n          v17 = v16 == Number ? Number : Number;\n        } else {\n          v17 = Number;\n        }\n        v38 = v17;\n        if (v17 == Number)\n          v40 = (const char *)&unk_17C8;\n      }\n      if (convertToUint64(&v25, v26)) {\n        if (v26 >= Number)\n          v18 = (const char *)&unk_17C8;\n        else\n          v18 = String;\n        v44 = ((__int64 (*)(__int64, const char *, ...))a1)(a2, String, v18,\n                                                            v25, v40);\n      } else {\n        v44 =\n            ((__int64 (*)(__int64, const char *, ...))a1)(a2, String, v40, v26);\n      }\n      goto LABEL_115;\n    case Number:\n      v44 = a1(a2, String);\n      if (v44)\n        result = v44;\n      else\n        result = Number L;\n      return result;\n    default:\n      goto LABEL_115;\n    }\n  }\n  if (v39 == Number)\n    goto LABEL_13;\n  if (v39 > Number)\n    goto LABEL_115;\n  if (v39 == Number) {\n  LABEL_13:\n    v37 = get_indicator(a3, a4);\n    if (*v37)\n      v5 = (const char *)&unk_17D2;\n    else\n      v5 = v37;\n    v36 = v5;\n    if (v39 == Number)\n      v6 = Number;\n    else\n      v6 = Number;\n    v44 =\n        ((__int64 (*)(__int64, const char *, ...))a1)(a2, String, v6, v37, v36);\n    if (v44) {\n      result = v44;\n    } else {\n      v44 = cbor_value_enter_container(a3, <span class=\"supfact\">v33</span>);\n      if (v44) {\n        *(_QWORD *)(a3 + Number) = v34;\n        result = v44;\n      } else {\n        v44 = container_to_pretty(\n            (__int64(__fastcall *)(__int64, void *, void *))a1, a2,\n            (__int64)<span class=\"supfact\">v33</span>, v39, a4, a5 - Number);\n        if (v44) {\n          *(_QWORD *)(a3 + Number) = v34;\n          result = v44;\n        } else {\n          v44 = cbor_value_leave_container(a3, <span class=\"supfact\">v33</span>);\n          if (v44) {\n            result = v44;\n          } else {\n            if (v39 == Number)\n              v8 = String;\n            else\n              v8 = String;\n            result = a1(a2, v8);\n          }\n        }\n      }\n    }\n  } else {\n    if (v39 > Number)\n      goto LABEL_115;\n    if (v39 != Number) {\n      if (v39 > Number)\n        goto LABEL_115;\n      if (!v39) {\n        cbor_value_get_raw_integer(a3, &v32);\n        if (cbor_value_is_unsigned_integer(a3)) {\n          v44 = ((__int64 (*)(__int64, const char *, ...))a1)(a2, String, v32);\n        } else if (++v32) {\n          v44 = ((__int64 (*)(__int64, const char *, ...))a1)(a2, String, v32);\n        } else {\n          v44 = a1(a2, String);\n        }\n        if (!v44) {\n          v9 = get_indicator(a3, a4);\n          v44 = ((__int64(__fastcall *)(__int64, const char *, char *))a1)(\n              a2, String, v9);\n        }\n        goto LABEL_115;\n      }\n      if (v39 != Number) {\n      LABEL_115:\n        if (!v44)\n          v44 = cbor_value_advance_fixed(a3);\n        return v44;\n      }\n    }\n    v31 = Number L;\n    v10 = (a4 & Number) != Number && !cbor_value_is_length_known(a3);\n    v35 = v10;\n    v43 = (const char *)&unk_17C8;\n    v42 = Number;\n    strcpy(v30, String);\n    v41 = Number L;\n    if (v39 == Number) {\n      strcpy(v30, String);\n      v42 = Number;\n    }\n    if (v35) {\n      v44 = a1(a2, String);\n      if (!v44)\n        v44 = cbor_value_prepare_string_iteration(a3);\n    } else {\n      v44 = ((__int64(__fastcall *)(__int64, const char *, char *))a1)(\n          a2, String, v30);\n    }\n    while (!v44) {\n      if (v35 || !v41)\n        v41 = resolve_indicator(*(_BYTE **)(a3 + Number), **(_BYTE ***)a3, a4);\n      v44 = cbor_value_get_string_chunk(a3, &v30[Number], &v31, a3);\n      if (v44)\n        return v44;\n      if (!*(_QWORD *)&v30[Number])\n        break;\n      if (v35)\n        v44 =\n            ((__int64 (*)(__int64, const char *, ...))a1)(a2, String, v43, v30);\n      if (!v44) {\n        if (v39 == Number)\n          v11 = hexDump((__int64 (*)(__int64, const char *, ...))a1, a2,\n                        *(unsigned __int8 **)&v30[Number], v31);\n        else\n          v11 = utf8EscapedDump((__int64 (*)(__int64, const char *, ...))a1, a2,\n                                *(unsigned __int64 *)&v30[Number], v31);\n        v44 = v11;\n      }\n      if (!v44 && v35) {\n        v44 = ((__int64 (*)(__int64, const char *, ...))a1)(\n            a2, String, (unsigned int)v42, v41);\n        v43 = (const char *)&unk_17CC;\n      }\n    }\n    if (!v44) {\n      if (v35)\n        v44 = a1(a2, String);\n      else\n        v44 = ((__int64 (*)(__int64, const char *, ...))a1)(\n            a2, String, (unsigned int)v42, v41);\n    }\n    result = v44;\n  }\n  return result;\n}", "code_t": "CborError_0 __cdecl value_to_pretty(CborStreamFunction stream, void *out,\n                                    CborValue_0 *it, int flags,\n                                    int recursionsLeft) {\n  const char *v5;\n  unsigned int v6;\n  CborError_0 result;\n  const char *v8;\n  const char *v9;\n  bool v10;\n  CborError_0 v11;\n  const char *v12;\n  const char *v13;\n  const char *v14;\n  const char *v15;\n  double v16;\n  int v17;\n  const char *v18;\n  uint16_t f16;\n  float f;\n  uint64_t ival;\n  double val_1;\n  bool val_0;\n  uint8_t simple_type;\n  CborTag tag;\n  char open[Number];\n  const void *ptr;\n  size_t n;\n  uint64_t val;\n  CborValue_0 <span class=\"supfact\">recursed</span>;\n  bool showingFragments;\n  const char *space;\n  const char *indicator;\n  int r;\n  CborType_0 type;\n  const char *suffix;\n  const char *indicator_0;\n  char close;\n  const char *separator;\n  CborError_0 err;\n  err = CborNoError;\n  type = cbor_value_get_type(it);\n  if ((unsigned int)type > CborInvalidType)\n    goto LABEL_115;\n  if ((unsigned int)type >= CborTagType) {\n    switch (type) {\n    case CborTagType:\n      cbor_value_get_tag(it, &tag);\n      v12 = get_indicator(it, flags);\n      err = stream(out, String, tag, v12);\n      if (err == CborNoError)\n        err = (unsigned int)cbor_value_advance_fixed(it);\n      if (err || !recursionsLeft) {\n        if (err == CborNoError)\n          printRecursionLimit(stream, out);\n      } else {\n        err = value_to_pretty(stream, out, it, flags, recursionsLeft - Number);\n      }\n      if (err == CborNoError)\n        err = stream(out, String);\n      return err;\n    case CborSimpleType:\n      cbor_value_get_simple_type(it, &simple_type);\n      err = stream(out, String, simple_type);\n      goto LABEL_115;\n    case CborBooleanType:\n      cbor_value_get_boolean(it, &val_0);\n      if (val_0)\n        v13 = String;\n      else\n        v13 = String;\n      err = stream(out, v13);\n      goto LABEL_115;\n    case CborNullType:\n      err = stream(out, String);\n      goto LABEL_115;\n    case CborUndefinedType:\n      err = stream(out, String);\n      goto LABEL_115;\n    case CborHalfFloatType:\n      cbor_value_get_half_float(it, &f16);\n      val_1 = decode_half(f16);\n      if ((flags & Number) != Number)\n        v15 = String;\n      else\n        v15 = String;\n      suffix = v15;\n      goto LABEL_96;\n    case CborFloatType:\n      cbor_value_get_float(it, &f);\n      val_1 = f;\n      if ((flags & Number) != Number)\n        v14 = String;\n      else\n        v14 = String;\n      suffix = v14;\n      goto LABEL_96;\n    case CborDoubleType:\n      cbor_value_get_double(it, &val_1);\n      suffix = (const char *)&unk_17C8;\n    LABEL_96:\n      if ((flags & Number) == Number) {\n        v16 = fabs(val_1);\n        if (v16 > Number) {\n          v17 = Number;\n        } else if (v16 < Number) {\n          v17 = v16 == Number ? Number : Number;\n        } else {\n          v17 = Number;\n        }\n        r = v17;\n        if (v17 == Number)\n          suffix = (const char *)&unk_17C8;\n      }\n      if (convertToUint64(val_1, &ival)) {\n        if (val_1 >= Number)\n          v18 = (const char *)&unk_17C8;\n        else\n          v18 = String;\n        err = stream(out, String, v18, ival, suffix);\n      } else {\n        err = stream(out, String, suffix, val_1);\n      }\n      goto LABEL_115;\n    case CborInvalidType:\n      err = stream(out, String);\n      if (err)\n        result = err;\n      else\n        result = CborErrorUnknownType;\n      return result;\n    default:\n      goto LABEL_115;\n    }\n  }\n  if (type == CborMapType)\n    goto LABEL_13;\n  if ((unsigned int)type > CborMapType)\n    goto LABEL_115;\n  if (type == CborArrayType) {\n  LABEL_13:\n    indicator = get_indicator(it, flags);\n    if (*indicator)\n      v5 = (const char *)&unk_17D2;\n    else\n      v5 = indicator;\n    space = v5;\n    if (type == CborArrayType)\n      v6 = Number;\n    else\n      v6 = Number;\n    err = stream(out, String, v6, indicator, space);\n    if (err) {\n      result = err;\n    } else {\n      err = (unsigned int)cbor_value_enter_container(it,\n                                                     &<span class=\"supfact\">recursed</span>);\n      if (err) {\n        it->ptr = <span class=\"supfact\">recursed</span>.ptr;\n        result = err;\n      } else {\n        err = container_to_pretty(stream, out, &<span class=\"supfact\">recursed</span>, type,\n                                  flags, recursionsLeft - Number);\n        if (err) {\n          it->ptr = <span class=\"supfact\">recursed</span>.ptr;\n          result = err;\n        } else {\n          err = (unsigned int)cbor_value_leave_container(\n              it, &<span class=\"supfact\">recursed</span>);\n          if (err) {\n            result = err;\n          } else {\n            if (type == CborArrayType)\n              v8 = String;\n            else\n              v8 = String;\n            result = stream(out, v8);\n          }\n        }\n      }\n    }\n  } else {\n    if ((unsigned int)type > CborArrayType)\n      goto LABEL_115;\n    if (type != CborTextStringType) {\n      if ((unsigned int)type > CborTextStringType)\n        goto LABEL_115;\n      if (type == CborIntegerType) {\n        cbor_value_get_raw_integer(it, &val);\n        if (cbor_value_is_unsigned_integer(it)) {\n          err = stream(out, String, val);\n        } else if (++val) {\n          err = stream(out, String, val);\n        } else {\n          err = stream(out, String);\n        }\n        if (err == CborNoError) {\n          v9 = get_indicator(it, flags);\n          err = stream(out, String, v9);\n        }\n        goto LABEL_115;\n      }\n      if (type != CborByteStringType) {\n      LABEL_115:\n        if (err == CborNoError)\n          err = (unsigned int)cbor_value_advance_fixed(it);\n        return err;\n      }\n    }\n    n = Number L;\n    v10 = (flags & Number) != Number && !cbor_value_is_length_known(it);\n    showingFragments = v10;\n    separator = (const char *)&unk_17C8;\n    close = Number;\n    strcpy(open, String);\n    indicator_0 = Number L;\n    if (type == CborTextStringType) {\n      open[Number] = Number;\n      close = Number;\n      open[Number] = Number;\n    }\n    if (showingFragments) {\n      err = stream(out, String);\n      if (err == CborNoError)\n        err = (unsigned int)cbor_value_prepare_string_iteration(it);\n    } else {\n      err = stream(out, String, open);\n    }\n    while (err == CborNoError) {\n      if (showingFragments || !indicator_0)\n        indicator_0 = resolve_indicator(it->ptr, it->parser->end, flags);\n      err = (unsigned int)cbor_value_get_string_chunk(it, &ptr, &n, it);\n      if (err)\n        return err;\n      if (!ptr)\n        break;\n      if (showingFragments)\n        err = stream(out, String, separator, open);\n      if (err == CborNoError) {\n        if (type == CborByteStringType)\n          v11 = hexDump(stream, out, ptr, n);\n        else\n          v11 = utf8EscapedDump(stream, out, ptr, n);\n        err = v11;\n      }\n      if (err == CborNoError && showingFragments) {\n        err = stream(out, String, (unsigned int)close, indicator_0);\n        separator = (const char *)&unk_17CC;\n      }\n    }\n    if (err == CborNoError) {\n      if (showingFragments)\n        err = stream(out, String);\n      else\n        err = stream(out, String, (unsigned int)close, indicator_0);\n    }\n    result = err;\n  }\n  return result;\n}", "var": [{"name": "v33", "type": "uint64_t", "pred_name": "__unk__", "ref_name": "recursed", "ref_type": "struct CborValue_0 { const CborParser_0 * parser; const uint8_t * ptr; uint32_t remaining; uint16_t extra; uint8_t type; uint8_t flags; }"}], "body_in_train": false}, {"repo_owner": "sconklin", "repo_name": "ltp-tools", "path": "sconklin/ltp-tools/377603de29c823142f76bf2808805e402509a582ff804fdb7d18e7644feac78b", "path_in_repo": "sconklin/ltp-tools/ltp-full-20110915/testcases/open_posix_testsuite/conformance/interfaces/mq_setattr/2-1.run-test", "objdump": "00000000004011b2 <main>:\n  4011b2:\t55                   \tpush   %rbp\n  4011b3:\t48 89 e5             \tmov    %rsp,%rbp\n  4011b6:\t48 81 ec 00 01 00 00 \tsub    $0x100,%rsp\n  4011bd:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4011c4:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4011cb:\te8 b0 fe ff ff       \tcallq  401080 <getpid@plt>\n  4011d0:\t89 c2                \tmov    %eax,%edx\n  4011d2:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4011d6:\tbe 08 20 40 00       \tmov    $0x402008,%esi\n  4011db:\t48 89 c7             \tmov    %rax,%rdi\n  4011de:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4011e3:\te8 d8 fe ff ff       \tcallq  4010c0 <sprintf@plt>\n  4011e8:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4011ec:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  4011f1:\tba 80 01 00 00       \tmov    $0x180,%edx\n  4011f6:\tbe 42 00 00 00       \tmov    $0x42,%esi\n  4011fb:\t48 89 c7             \tmov    %rax,%rdi\n  4011fe:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401203:\te8 68 fe ff ff       \tcallq  401070 <mq_open@plt>\n  401208:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40120b:\t83 7d f4 ff          \tcmpl   $0xffffffff,-0xc(%rbp)\n  40120f:\t75 14                \tjne    401225 <main+0x73>\n  401211:\tbf 20 20 40 00       \tmov    $0x402020,%edi\n  401216:\te8 85 fe ff ff       \tcallq  4010a0 <perror@plt>\n  40121b:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  401220:\te9 7f 01 00 00       \tjmpq   4013a4 <main+0x1f2>\n  401225:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n  40122c:\tba 40 00 00 00       \tmov    $0x40,%edx\n  401231:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401236:\t48 89 c7             \tmov    %rax,%rdi\n  401239:\te8 52 fe ff ff       \tcallq  401090 <memset@plt>\n  40123e:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  401242:\tba 40 00 00 00       \tmov    $0x40,%edx\n  401247:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40124c:\t48 89 c7             \tmov    %rax,%rdi\n  40124f:\te8 3c fe ff ff       \tcallq  401090 <memset@plt>\n  401254:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n  40125b:\tba 40 00 00 00       \tmov    $0x40,%edx\n  401260:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401265:\t48 89 c7             \tmov    %rax,%rdi\n  401268:\te8 23 fe ff ff       \tcallq  401090 <memset@plt>\n  40126d:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n  401271:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  401274:\t48 89 d6             \tmov    %rdx,%rsi\n  401277:\t89 c7                \tmov    %eax,%edi\n  401279:\te8 c2 fd ff ff       \tcallq  401040 <mq_getattr@plt>\n  40127e:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  401281:\t75 11                \tjne    401294 <main+0xe2>\n  401283:\tbf 48 20 40 00       \tmov    $0x402048,%edi\n  401288:\te8 13 fe ff ff       \tcallq  4010a0 <perror@plt>\n  40128d:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  401294:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  401298:\t48 89 c7             \tmov    %rax,%rdi\n  40129b:\te8 c0 fd ff ff       \tcallq  401060 <mq_unlink@plt>\n  4012a0:\t85 c0                \ttest   %eax,%eax\n  4012a2:\t74 14                \tje     4012b8 <main+0x106>\n  4012a4:\tbf 6c 20 40 00       \tmov    $0x40206c,%edi\n  4012a9:\te8 f2 fd ff ff       \tcallq  4010a0 <perror@plt>\n  4012ae:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4012b3:\te9 ec 00 00 00       \tjmpq   4013a4 <main+0x1f2>\n  4012b8:\t48 c7 85 00 ff ff ff \tmovq   $0x0,-0x100(%rbp)\n  4012bf:\t00 00 00 00 \n  4012c3:\t48 c7 85 08 ff ff ff \tmovq   $0x29a,-0xf8(%rbp)\n  4012ca:\t9a 02 00 00 \n  4012ce:\t48 c7 85 10 ff ff ff \tmovq   $0x309,-0xf0(%rbp)\n  4012d5:\t09 03 00 00 \n  4012d9:\t48 c7 85 18 ff ff ff \tmovq   $0x22b,-0xe8(%rbp)\n  4012e0:\t2b 02 00 00 \n  4012e4:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n  4012eb:\t48 8d 8d 00 ff ff ff \tlea    -0x100(%rbp),%rcx\n  4012f2:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  4012f5:\t48 89 ce             \tmov    %rcx,%rsi\n  4012f8:\t89 c7                \tmov    %eax,%edi\n  4012fa:\te8 b1 fd ff ff       \tcallq  4010b0 <mq_setattr@plt>\n  4012ff:\t85 c0                \ttest   %eax,%eax\n  401301:\t74 07                \tje     40130a <main+0x158>\n  401303:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  40130a:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n  40130e:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n  401315:\t48 39 c2             \tcmp    %rax,%rdx\n  401318:\t75 30                \tjne    40134a <main+0x198>\n  40131a:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n  40131e:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  401325:\t48 39 c2             \tcmp    %rax,%rdx\n  401328:\t75 20                \tjne    40134a <main+0x198>\n  40132a:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n  40132e:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401335:\t48 39 c2             \tcmp    %rax,%rdx\n  401338:\t75 10                \tjne    40134a <main+0x198>\n  40133a:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  40133e:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401345:\t48 39 c2             \tcmp    %rax,%rdx\n  401348:\t74 07                \tje     401351 <main+0x19f>\n  40134a:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  401351:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  401354:\t89 c7                \tmov    %eax,%edi\n  401356:\te8 f5 fc ff ff       \tcallq  401050 <mq_close@plt>\n  40135b:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40135f:\t48 89 c7             \tmov    %rax,%rdi\n  401362:\te8 f9 fc ff ff       \tcallq  401060 <mq_unlink@plt>\n  401367:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n  40136b:\t75 11                \tjne    40137e <main+0x1cc>\n  40136d:\tbf 78 20 40 00       \tmov    $0x402078,%edi\n  401372:\te8 b9 fc ff ff       \tcallq  401030 <puts@plt>\n  401377:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40137c:\teb 26                \tjmp    4013a4 <main+0x1f2>\n  40137e:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n  401382:\t75 11                \tjne    401395 <main+0x1e3>\n  401384:\tbf 84 20 40 00       \tmov    $0x402084,%edi\n  401389:\te8 a2 fc ff ff       \tcallq  401030 <puts@plt>\n  40138e:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  401393:\teb 0f                \tjmp    4013a4 <main+0x1f2>\n  401395:\tbf 94 20 40 00       \tmov    $0x402094,%edi\n  40139a:\te8 91 fc ff ff       \tcallq  401030 <puts@plt>\n  40139f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013a4:\tc9                   \tleaveq \n  4013a5:\tc3                   \tretq   \n  4013a6:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  4013ad:\t00 00 00 ", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  unsigned int v3;\n  int result;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  char s[Number];\n  int v9;\n  int v10;\n  int v11;\n  v11 = Number;\n  v10 = Number;\n  v3 = getpid();\n  sprintf(s, String, v3);\n  v9 = mq_open();\n  if (v9 == Number) {\n    perror(String);\n    result = Number;\n  } else {\n    memset(<span class=\"supfact\">v6</span>, Number, sizeof(<span class=\"supfact\">v6</span>));\n    memset(<span class=\"supfact\">v7</span>, Number, sizeof(<span class=\"supfact\">v7</span>));\n    memset(<span class=\"supfact\">v5</span>, Number, sizeof(<span class=\"supfact\">v5</span>));\n    if ((unsigned int)mq_getattr() == Number) {\n      perror(String);\n      v11 = Number;\n    }\n    if ((unsigned int)mq_unlink()) {\n      perror(String);\n      result = Number;\n    } else {\n      <span class=\"supfact\">v5</span>[Number] = Number L;\n      <span class=\"supfact\">v5</span>[Number] = Number L;\n      <span class=\"supfact\">v5</span>[Number] = Number L;\n      <span class=\"supfact\">v5</span>[Number] = Number L;\n      if ((unsigned int)mq_setattr())\n        v10 = Number;\n      if (<span class=\"supfact\">v7</span>[Number] != <span class=\"supfact\">v6</span>[Number] ||\n          <span class=\"supfact\">v7</span>[Number] != <span class=\"supfact\">v6</span>[Number] ||\n          <span class=\"supfact\">v7</span>[Number] != <span class=\"supfact\">v6</span>[Number] ||\n          <span class=\"supfact\">v7</span>[Number] != <span class=\"supfact\">v6</span>[Number])\n        v10 = Number;\n      mq_close();\n      mq_unlink();\n      if (v10 == Number) {\n        puts(String);\n        result = Number;\n      } else if (v11 == Number) {\n        puts(String);\n        result = Number;\n      } else {\n        puts(String);\n        result = Number;\n      }\n    }\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  unsigned int v3;\n  int result;\n  mq_attr <span class=\"supfact\">nmqstat</span>;\n  mq_attr <span class=\"supfact\">mqstat</span>;\n  mq_attr <span class=\"supfact\">omqstat</span>;\n  char mqname[Number];\n  mqd_t mqdes;\n  int failure;\n  int unresolved;\n  unresolved = Number;\n  failure = Number;\n  v3 = getpid();\n  sprintf(mqname, String, v3);\n  mqdes = mq_open();\n  if (mqdes == Number) {\n    perror(String);\n    result = Number;\n  } else {\n    memset(&<span class=\"supfact\">mqstat</span>, Number, sizeof(<span class=\"supfact\">mqstat</span>));\n    memset(&<span class=\"supfact\">omqstat</span>, Number, sizeof(<span class=\"supfact\">omqstat</span>));\n    memset(&<span class=\"supfact\">nmqstat</span>, Number, sizeof(<span class=\"supfact\">nmqstat</span>));\n    if ((unsigned int)mq_getattr() == Number) {\n      perror(String);\n      unresolved = Number;\n    }\n    if ((unsigned int)mq_unlink()) {\n      perror(String);\n      result = Number;\n    } else {\n      <span class=\"supfact\">nmqstat</span>.mq_flags = Number L;\n      <span class=\"supfact\">nmqstat</span>.mq_maxmsg = Number L;\n      <span class=\"supfact\">nmqstat</span>.mq_msgsize = Number L;\n      <span class=\"supfact\">nmqstat</span>.mq_curmsgs = Number L;\n      if ((unsigned int)mq_setattr())\n        failure = Number;\n      if (<span class=\"supfact\">omqstat</span>.mq_flags != <span class=\"supfact\">mqstat</span>.mq_flags ||\n          <span class=\"supfact\">omqstat</span>.mq_maxmsg !=\n              <span class=\"supfact\">mqstat</span>.mq_maxmsg ||\n          <span class=\"supfact\">omqstat</span>.mq_msgsize !=\n              <span class=\"supfact\">mqstat</span>.mq_msgsize ||\n          <span class=\"supfact\">omqstat</span>.mq_curmsgs !=\n              <span class=\"supfact\">mqstat</span>.mq_curmsgs) {\n        failure = Number;\n      }\n      mq_close();\n      mq_unlink();\n      if (failure == Number) {\n        puts(String);\n        result = Number;\n      } else if (unresolved == Number) {\n        puts(String);\n        result = Number;\n      } else {\n        puts(String);\n        result = Number;\n      }\n    }\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "struct mq_attr { __syscall_slong_t mq_flags; __syscall_slong_t mq_maxmsg; __syscall_slong_t mq_msgsize; __syscall_slong_t mq_curmsgs; __syscall_slong_t[4] __pad; }", "pred_name": "mqstat", "ref_name": "nmqstat", "ref_type": "struct mq_attr { __syscall_slong_t mq_flags; __syscall_slong_t mq_maxmsg; __syscall_slong_t mq_msgsize; __syscall_slong_t mq_curmsgs; __syscall_slong_t[4] __pad; }"}, {"name": "v6", "type": "struct mq_attr { __syscall_slong_t mq_flags; __syscall_slong_t mq_maxmsg; __syscall_slong_t mq_msgsize; __syscall_slong_t mq_curmsgs; __syscall_slong_t[4] __pad; }", "pred_name": "mqstat", "ref_name": "mqstat", "ref_type": "struct mq_attr { __syscall_slong_t mq_flags; __syscall_slong_t mq_maxmsg; __syscall_slong_t mq_msgsize; __syscall_slong_t mq_curmsgs; __syscall_slong_t[4] __pad; }"}, {"name": "v7", "type": "struct mq_attr { __syscall_slong_t mq_flags; __syscall_slong_t mq_maxmsg; __syscall_slong_t mq_msgsize; __syscall_slong_t mq_curmsgs; __syscall_slong_t[4] __pad; }", "pred_name": "mqstat", "ref_name": "omqstat", "ref_type": "struct mq_attr { __syscall_slong_t mq_flags; __syscall_slong_t mq_maxmsg; __syscall_slong_t mq_msgsize; __syscall_slong_t mq_curmsgs; __syscall_slong_t[4] __pad; }"}], "body_in_train": false}, {"repo_owner": "ebe-forks", "repo_name": "ltp", "path": "ebe-forks/ltp/9328e3ee1c009af1d7eac77793edbe9d0d6bfb875df6961c07fd8f729fe3c7a1", "path_in_repo": "ebe-forks/ltp/testcases/kernel/fs/scsi/ltpscsi/scsimain.o", "objdump": "000000000000a37d <do_scsi_read_write_buffer>:\n    a37d:\t55                   \tpush   %rbp\n    a37e:\t48 89 e5             \tmov    %rsp,%rbp\n    a381:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    a388:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n    a38f:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    a396:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    a39a:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    a3a1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    a3a6:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    a3ab:\te8 00 00 00 00       \tcallq  a3b0 <do_scsi_read_write_buffer+0x33>\n    a3b0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    a3b4:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    a3b9:\t48 89 c7             \tmov    %rax,%rdi\n    a3bc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    a3c1:\te8 00 00 00 00       \tcallq  a3c6 <do_scsi_read_write_buffer+0x49>\n    a3c6:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    a3c9:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    a3cd:\t79 14                \tjns    a3e3 <do_scsi_read_write_buffer+0x66>\n    a3cf:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    a3d4:\te8 00 00 00 00       \tcallq  a3d9 <do_scsi_read_write_buffer+0x5c>\n    a3d9:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    a3de:\te9 42 01 00 00       \tjmpq   a525 <do_scsi_read_write_buffer+0x1a8>\n    a3e3:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n    a3ea:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    a3ed:\t48 89 d6             \tmov    %rdx,%rsi\n    a3f0:\t89 c7                \tmov    %eax,%edi\n    a3f2:\te8 00 00 00 00       \tcallq  a3f7 <do_scsi_read_write_buffer+0x7a>\n    a3f7:\t85 c0                \ttest   %eax,%eax\n    a3f9:\t79 32                \tjns    a42d <do_scsi_read_write_buffer+0xb0>\n    a3fb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a402 <do_scsi_read_write_buffer+0x85>\n    a402:\t48 89 c1             \tmov    %rax,%rcx\n    a405:\tba 1a 00 00 00       \tmov    $0x1a,%edx\n    a40a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    a40f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    a414:\te8 00 00 00 00       \tcallq  a419 <do_scsi_read_write_buffer+0x9c>\n    a419:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    a41c:\t89 c7                \tmov    %eax,%edi\n    a41e:\te8 00 00 00 00       \tcallq  a423 <do_scsi_read_write_buffer+0xa6>\n    a423:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    a428:\te9 f8 00 00 00       \tjmpq   a525 <do_scsi_read_write_buffer+0x1a8>\n    a42d:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n    a433:\t25 00 f0 00 00       \tand    $0xf000,%eax\n    a438:\t3d 00 60 00 00       \tcmp    $0x6000,%eax\n    a43d:\t75 07                \tjne    a446 <do_scsi_read_write_buffer+0xc9>\n    a43f:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n    a446:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    a44a:\t75 1d                \tjne    a469 <do_scsi_read_write_buffer+0xec>\n    a44c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    a44f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    a454:\tbe 02 22 00 00       \tmov    $0x2202,%esi\n    a459:\t89 c7                \tmov    %eax,%edi\n    a45b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    a460:\te8 00 00 00 00       \tcallq  a465 <do_scsi_read_write_buffer+0xe8>\n    a465:\t85 c0                \ttest   %eax,%eax\n    a467:\t79 14                \tjns    a47d <do_scsi_read_write_buffer+0x100>\n    a469:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    a46e:\te8 00 00 00 00       \tcallq  a473 <do_scsi_read_write_buffer+0xf6>\n    a473:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    a478:\te9 a8 00 00 00       \tjmpq   a525 <do_scsi_read_write_buffer+0x1a8>\n    a47d:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    a481:\t48 8d 4d e4          \tlea    -0x1c(%rbp),%rcx\n    a485:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    a488:\t48 89 ce             \tmov    %rcx,%rsi\n    a48b:\t89 c7                \tmov    %eax,%edi\n    a48d:\te8 00 00 00 00       \tcallq  a492 <do_scsi_read_write_buffer+0x115>\n    a492:\t85 c0                \ttest   %eax,%eax\n    a494:\t74 0a                \tje     a4a0 <do_scsi_read_write_buffer+0x123>\n    a496:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    a49b:\te9 85 00 00 00       \tjmpq   a525 <do_scsi_read_write_buffer+0x1a8>\n    a4a0:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    a4a3:\t48 98                \tcltq   \n    a4a5:\t48 89 c7             \tmov    %rax,%rdi\n    a4a8:\te8 00 00 00 00       \tcallq  a4ad <do_scsi_read_write_buffer+0x130>\n    a4ad:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # a4b4 <do_scsi_read_write_buffer+0x137>\n    a4b4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    a4b7:\t89 c2                \tmov    %eax,%edx\n    a4b9:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    a4bc:\t89 d6                \tmov    %edx,%esi\n    a4be:\t89 c7                \tmov    %eax,%edi\n    a4c0:\te8 00 00 00 00       \tcallq  a4c5 <do_scsi_read_write_buffer+0x148>\n    a4c5:\t85 c0                \ttest   %eax,%eax\n    a4c7:\t74 07                \tje     a4d0 <do_scsi_read_write_buffer+0x153>\n    a4c9:\tb8 03 00 00 00       \tmov    $0x3,%eax\n    a4ce:\teb 55                \tjmp    a525 <do_scsi_read_write_buffer+0x1a8>\n    a4d0:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    a4d3:\t89 c2                \tmov    %eax,%edx\n    a4d5:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    a4d8:\t89 d6                \tmov    %edx,%esi\n    a4da:\t89 c7                \tmov    %eax,%edi\n    a4dc:\te8 00 00 00 00       \tcallq  a4e1 <do_scsi_read_write_buffer+0x164>\n    a4e1:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    a4e4:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n    a4e8:\t74 08                \tje     a4f2 <do_scsi_read_write_buffer+0x175>\n    a4ea:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    a4ed:\t83 c0 04             \tadd    $0x4,%eax\n    a4f0:\teb 33                \tjmp    a525 <do_scsi_read_write_buffer+0x1a8>\n    a4f2:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    a4f5:\t89 c7                \tmov    %eax,%edi\n    a4f7:\te8 00 00 00 00       \tcallq  a4fc <do_scsi_read_write_buffer+0x17f>\n    a4fc:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    a4ff:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n    a503:\t79 11                \tjns    a516 <do_scsi_read_write_buffer+0x199>\n    a505:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    a50a:\te8 00 00 00 00       \tcallq  a50f <do_scsi_read_write_buffer+0x192>\n    a50f:\tb8 06 00 00 00       \tmov    $0x6,%eax\n    a514:\teb 0f                \tjmp    a525 <do_scsi_read_write_buffer+0x1a8>\n    a516:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    a51b:\te8 00 00 00 00       \tcallq  a520 <do_scsi_read_write_buffer+0x1a3>\n    a520:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    a525:\tc9                   \tleaveq \n    a526:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_scsi_read_write_buffer(char *a1) {\n  __int64 result;\n  struct stat64 <span class=\"supfact\">v2</span>;\n  signed int v3;\n  int v4;\n  int fd;\n  char *file;\n  int v7;\n  file = a1;\n  v7 = Number;\n  print_msg(Number, String);\n  fd = open64(a1, Number);\n  if (fd >= Number) {\n    if (fstat64(fd, &<span class=\"supfact\">v2</span>) >= Number) {\n      if ((<span class=\"supfact\">v2</span>.st_mode & Number) == Number)\n        v7 = Number;\n      if (v7 || ioctl(fd, Number, Number L) < Number) {\n        puts(String);\n        result = Number L;\n      } else if ((unsigned int)find_out_about_buffer(fd, (unsigned int *)&v3,\n                                                     file)) {\n        result = Number L;\n      } else {\n        cmpbuf = malloc(v3);\n        if ((unsigned int)write_buffer(fd, v3)) {\n          result = Number L;\n        } else {\n          v4 = read_buffer(fd, v3);\n          if (v4) {\n            result = (unsigned int)(v4 + Number);\n          } else {\n            v4 = close(fd);\n            if (v4 >= Number) {\n              puts(String);\n              result = Number L;\n            } else {\n              perror(String);\n              result = Number L;\n            }\n          }\n        }\n      }\n    } else {\n      fwrite(String, Number, Number, stderr);\n      close(fd);\n      result = Number L;\n    }\n  } else {\n    perror(String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl do_scsi_read_write_buffer(char *device) {\n  int result;\n  stat <span class=\"supfact\">a_st</span>;\n  int buf_capacity;\n  int res;\n  int sg_fd;\n  char *file_name;\n  int block_dev;\n  file_name = device;\n  block_dev = Number;\n  print_msg(Number, String);\n  sg_fd = open64(device, Number);\n  if (sg_fd >= Number) {\n    if (fstat64(sg_fd, (struct stat64 *)&<span class=\"supfact\">a_st</span>) >= Number) {\n      if ((<span class=\"supfact\">a_st</span>.st_mode & Number) == Number)\n        block_dev = Number;\n      if (block_dev || ioctl(sg_fd, Number, Number L) < Number) {\n        puts(String);\n        result = Number;\n      } else if (find_out_about_buffer(sg_fd, &buf_capacity, file_name)) {\n        result = Number;\n      } else {\n        cmpbuf = (unsigned __int8 *)malloc(buf_capacity);\n        if (write_buffer(sg_fd, buf_capacity)) {\n          result = Number;\n        } else {\n          res = read_buffer(sg_fd, buf_capacity);\n          if (res) {\n            result = res + Number;\n          } else {\n            res = close(sg_fd);\n            if (res >= Number) {\n              puts(String);\n              result = Number;\n            } else {\n              perror(String);\n              result = Number;\n            }\n          }\n        }\n      }\n    } else {\n      fwrite(String, Number, Number, stderr);\n      close(sg_fd);\n      result = Number;\n    }\n  } else {\n    perror(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "buf", "ref_name": "a_st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "Andrew0Rowan", "repo_name": "rowan", "path": "Andrew0Rowan/rowan/a3d8b7523527700148e040bb55af22cbb15f71ff135fb8c4d2a03a7f6b9a7e16", "path_in_repo": "Andrew0Rowan/rowan/src/kernel/linux/v4.4/tools/perf/arch/x86/tests/rdpmc.o", "objdump": "0000000000000310 <__test__rdpmc>:\n 310:\t55                   \tpush   %rbp\n 311:\t48 89 e5             \tmov    %rsp,%rbp\n 314:\t48 81 ec f0 01 00 00 \tsub    $0x1f0,%rsp\n 31b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 322:\t00 00 \n 324:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 328:\t31 c0                \txor    %eax,%eax\n 32a:\tc7 85 1c fe ff ff 00 \tmovl   $0x0,-0x1e4(%rbp)\n 331:\t00 00 00 \n 334:\t48 c7 85 30 fe ff ff \tmovq   $0x3e8,-0x1d0(%rbp)\n 33b:\te8 03 00 00 \n 33f:\t48 8d 95 60 fe ff ff \tlea    -0x1a0(%rbp),%rdx\n 346:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 34b:\tb9 0e 00 00 00       \tmov    $0xe,%ecx\n 350:\t48 89 d7             \tmov    %rdx,%rdi\n 353:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n 356:\t48 c7 85 68 fe ff ff \tmovq   $0x1,-0x198(%rbp)\n 35d:\t01 00 00 00 \n 361:\t0f b6 85 88 fe ff ff \tmovzbl -0x178(%rbp),%eax\n 368:\t83 c8 20             \tor     $0x20,%eax\n 36b:\t88 85 88 fe ff ff    \tmov    %al,-0x178(%rbp)\n 371:\t48 c7 85 38 fe ff ff \tmovq   $0x0,-0x1c8(%rbp)\n 378:\t00 00 00 00 \n 37c:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n 383:\t48 83 c0 08          \tadd    $0x8,%rax\n 387:\t48 89 c7             \tmov    %rax,%rdi\n 38a:\te8 00 00 00 00       \tcallq  38f <__test__rdpmc+0x7f>\n 38f:\t48 c7 85 d0 fe ff ff \tmovq   $0x0,-0x130(%rbp)\n 396:\t00 00 00 00 \n 39a:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n 3a1:\tba 00 00 00 00       \tmov    $0x0,%edx\n 3a6:\t48 89 c6             \tmov    %rax,%rsi\n 3a9:\tbf 0b 00 00 00       \tmov    $0xb,%edi\n 3ae:\te8 00 00 00 00       \tcallq  3b3 <__test__rdpmc+0xa3>\n 3b3:\te8 00 00 00 00       \tcallq  3b8 <__test__rdpmc+0xa8>\n 3b8:\t48 89 c2             \tmov    %rax,%rdx\n 3bb:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n 3c2:\t49 89 d0             \tmov    %rdx,%r8\n 3c5:\tb9 ff ff ff ff       \tmov    $0xffffffff,%ecx\n 3ca:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n 3cf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3d4:\t48 89 c7             \tmov    %rax,%rdi\n 3d7:\te8 24 fc ff ff       \tcallq  0 <sys_perf_event_open>\n 3dc:\t89 85 24 fe ff ff    \tmov    %eax,-0x1dc(%rbp)\n 3e2:\t83 bd 24 fe ff ff 00 \tcmpl   $0x0,-0x1dc(%rbp)\n 3e9:\t79 51                \tjns    43c <__test__rdpmc+0x12c>\n 3eb:\te8 00 00 00 00       \tcallq  3f0 <__test__rdpmc+0xe0>\n 3f0:\t8b 00                \tmov    (%rax),%eax\n 3f2:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n 3f9:\tba 80 00 00 00       \tmov    $0x80,%edx\n 3fe:\t48 89 ce             \tmov    %rcx,%rsi\n 401:\t89 c7                \tmov    %eax,%edi\n 403:\te8 00 00 00 00       \tcallq  408 <__test__rdpmc+0xf8>\n 408:\t48 89 c1             \tmov    %rax,%rcx\n 40b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 411 <__test__rdpmc+0x101>\n 411:\t8b 95 24 fe ff ff    \tmov    -0x1dc(%rbp),%edx\n 417:\t49 89 c8             \tmov    %rcx,%r8\n 41a:\t89 d1                \tmov    %edx,%ecx\n 41c:\tba 00 00 00 00       \tmov    $0x0,%edx\n 421:\t89 c6                \tmov    %eax,%esi\n 423:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 428:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 42d:\te8 00 00 00 00       \tcallq  432 <__test__rdpmc+0x122>\n 432:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 437:\te9 c8 01 00 00       \tjmpq   604 <__test__rdpmc+0x2f4>\n 43c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 442 <__test__rdpmc+0x132>\n 442:\t89 c6                \tmov    %eax,%esi\n 444:\t8b 85 24 fe ff ff    \tmov    -0x1dc(%rbp),%eax\n 44a:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 450:\t41 89 c0             \tmov    %eax,%r8d\n 453:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n 458:\tba 01 00 00 00       \tmov    $0x1,%edx\n 45d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 462:\te8 00 00 00 00       \tcallq  467 <__test__rdpmc+0x157>\n 467:\t48 89 85 40 fe ff ff \tmov    %rax,-0x1c0(%rbp)\n 46e:\t48 83 bd 40 fe ff ff \tcmpq   $0xffffffffffffffff,-0x1c0(%rbp)\n 475:\tff \n 476:\t75 44                \tjne    4bc <__test__rdpmc+0x1ac>\n 478:\te8 00 00 00 00       \tcallq  47d <__test__rdpmc+0x16d>\n 47d:\t8b 00                \tmov    (%rax),%eax\n 47f:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n 486:\tba 80 00 00 00       \tmov    $0x80,%edx\n 48b:\t48 89 ce             \tmov    %rcx,%rsi\n 48e:\t89 c7                \tmov    %eax,%edi\n 490:\te8 00 00 00 00       \tcallq  495 <__test__rdpmc+0x185>\n 495:\t48 89 c2             \tmov    %rax,%rdx\n 498:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 49e <__test__rdpmc+0x18e>\n 49e:\t48 89 d1             \tmov    %rdx,%rcx\n 4a1:\tba 00 00 00 00       \tmov    $0x0,%edx\n 4a6:\t89 c6                \tmov    %eax,%esi\n 4a8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 4ad:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4b2:\te8 00 00 00 00       \tcallq  4b7 <__test__rdpmc+0x1a7>\n 4b7:\te9 25 01 00 00       \tjmpq   5e1 <__test__rdpmc+0x2d1>\n 4bc:\tc7 85 20 fe ff ff 00 \tmovl   $0x0,-0x1e0(%rbp)\n 4c3:\t00 00 00 \n 4c6:\te9 d3 00 00 00       \tjmpq   59e <__test__rdpmc+0x28e>\n 4cb:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n 4d2:\t48 89 c7             \tmov    %rax,%rdi\n 4d5:\te8 50 fc ff ff       \tcallq  12a <mmap_read_self>\n 4da:\t48 89 85 48 fe ff ff \tmov    %rax,-0x1b8(%rbp)\n 4e1:\t48 c7 85 28 fe ff ff \tmovq   $0x0,-0x1d8(%rbp)\n 4e8:\t00 00 00 00 \n 4ec:\teb 17                \tjmp    505 <__test__rdpmc+0x1f5>\n 4ee:\t8b 85 1c fe ff ff    \tmov    -0x1e4(%rbp),%eax\n 4f4:\t83 c0 01             \tadd    $0x1,%eax\n 4f7:\t89 85 1c fe ff ff    \tmov    %eax,-0x1e4(%rbp)\n 4fd:\t48 83 85 28 fe ff ff \taddq   $0x1,-0x1d8(%rbp)\n 504:\t01 \n 505:\t48 8b 85 28 fe ff ff \tmov    -0x1d8(%rbp),%rax\n 50c:\t48 3b 85 30 fe ff ff \tcmp    -0x1d0(%rbp),%rax\n 513:\t72 d9                \tjb     4ee <__test__rdpmc+0x1de>\n 515:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n 51c:\t48 89 c7             \tmov    %rax,%rdi\n 51f:\te8 06 fc ff ff       \tcallq  12a <mmap_read_self>\n 524:\t48 89 85 50 fe ff ff \tmov    %rax,-0x1b0(%rbp)\n 52b:\t48 8b 95 30 fe ff ff \tmov    -0x1d0(%rbp),%rdx\n 532:\t48 89 d0             \tmov    %rdx,%rax\n 535:\t48 c1 e0 02          \tshl    $0x2,%rax\n 539:\t48 01 d0             \tadd    %rdx,%rax\n 53c:\t48 01 c0             \tadd    %rax,%rax\n 53f:\t48 89 85 30 fe ff ff \tmov    %rax,-0x1d0(%rbp)\n 546:\t48 8b 85 50 fe ff ff \tmov    -0x1b0(%rbp),%rax\n 54d:\t48 2b 85 48 fe ff ff \tsub    -0x1b8(%rbp),%rax\n 554:\t48 89 85 58 fe ff ff \tmov    %rax,-0x1a8(%rbp)\n 55b:\t48 8b 8d 58 fe ff ff \tmov    -0x1a8(%rbp),%rcx\n 562:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 568 <__test__rdpmc+0x258>\n 568:\t8b 95 20 fe ff ff    \tmov    -0x1e0(%rbp),%edx\n 56e:\t49 89 c8             \tmov    %rcx,%r8\n 571:\t89 d1                \tmov    %edx,%ecx\n 573:\tba 00 00 00 00       \tmov    $0x0,%edx\n 578:\t89 c6                \tmov    %eax,%esi\n 57a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 57f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 584:\te8 00 00 00 00       \tcallq  589 <__test__rdpmc+0x279>\n 589:\t48 8b 85 58 fe ff ff \tmov    -0x1a8(%rbp),%rax\n 590:\t48 01 85 38 fe ff ff \tadd    %rax,-0x1c8(%rbp)\n 597:\t83 85 20 fe ff ff 01 \taddl   $0x1,-0x1e0(%rbp)\n 59e:\t83 bd 20 fe ff ff 05 \tcmpl   $0x5,-0x1e0(%rbp)\n 5a5:\t0f 8e 20 ff ff ff    \tjle    4cb <__test__rdpmc+0x1bb>\n 5ab:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 5b1 <__test__rdpmc+0x2a1>\n 5b1:\t89 c2                \tmov    %eax,%edx\n 5b3:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n 5ba:\t48 89 d6             \tmov    %rdx,%rsi\n 5bd:\t48 89 c7             \tmov    %rax,%rdi\n 5c0:\te8 00 00 00 00       \tcallq  5c5 <__test__rdpmc+0x2b5>\n 5c5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 5cb <__test__rdpmc+0x2bb>\n 5cb:\tba 00 00 00 00       \tmov    $0x0,%edx\n 5d0:\t89 c6                \tmov    %eax,%esi\n 5d2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 5d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 5dc:\te8 00 00 00 00       \tcallq  5e1 <__test__rdpmc+0x2d1>\n 5e1:\t8b 85 24 fe ff ff    \tmov    -0x1dc(%rbp),%eax\n 5e7:\t89 c7                \tmov    %eax,%edi\n 5e9:\te8 00 00 00 00       \tcallq  5ee <__test__rdpmc+0x2de>\n 5ee:\t48 83 bd 38 fe ff ff \tcmpq   $0x0,-0x1c8(%rbp)\n 5f5:\t00 \n 5f6:\t75 07                \tjne    5ff <__test__rdpmc+0x2ef>\n 5f8:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 5fd:\teb 05                \tjmp    604 <__test__rdpmc+0x2f4>\n 5ff:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 604:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n 608:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n 60f:\t00 00 \n 611:\t74 05                \tje     618 <__test__rdpmc+0x308>\n 613:\te8 00 00 00 00       \tcallq  618 <__test__rdpmc+0x308>\n 618:\tc9                   \tleaveq \n 619:\tc3                   \tretq   ", "code_s": "__int64 _test__rdpmc() {\n  __int64 v0;\n  int *v1;\n  char *v2;\n  __int64 result;\n  int *v4;\n  char *v5;\n  int v6;\n  int i;\n  int fd;\n  unsigned __int64 j;\n  unsigned __int64 v10;\n  __int64 v11;\n  void *addr;\n  unsigned __int64 v13;\n  unsigned __int64 v14;\n  __int64 <span class=\"supfact\">v15</span>[Number];\n  struct sigaction <span class=\"supfact\">v16</span>;\n  char buf[Number];\n  unsigned __int64 v18;\n  v18 = __readfsqword(Number);\n  v6 = Number;\n  v10 = Number L;\n  memset(<span class=\"supfact\">v15</span>, Number, sizeof(<span class=\"supfact\">v15</span>));\n  <span class=\"supfact\">v15</span>[Number] = Number L;\n  LOBYTE(<span class=\"supfact\">v15</span>[Number]) |= Number;\n  v11 = Number L;\n  sigfillset(&<span class=\"supfact\">v16</span>.sa_mask);\n  <span class=\"supfact\">v16</span>.sa_handler = (__sighandler_t)segfault_handler;\n  sigaction(Number, &<span class=\"supfact\">v16</span>, Number L);\n  v0 = perf_event_open_cloexec_flag();\n  fd = sys_perf_event_open((__int64)<span class=\"supfact\">v15</span>, Number, Number, Number,\n                           v0);\n  if (fd >= Number) {\n    addr =\n        mmap64(Number L, (unsigned int)page_size, Number, Number, fd, Number L);\n    if (addr == (void *)Number) {\n      v4 = _errno_location();\n      v5 = strerror_r(*v4, buf, Number);\n      eprintf(Number L, verbose, String, v5);\n    } else {\n      for (i = Number; i <= Number; ++i) {\n        v13 = mmap_read_self((__int64)addr);\n        for (j = Number L; j < v10; ++j)\n          ++v6;\n        v10 *= Number L;\n        v14 = mmap_read_self((__int64)addr) - v13;\n        eprintf(Number L, verbose, String, (unsigned int)i, v14);\n        v11 += v14;\n      }\n      munmap(addr, (unsigned int)page_size);\n      eprintf(Number L, verbose, String);\n    }\n    close(fd);\n    if (v11)\n      result = Number L;\n    else\n      result = Number;\n  } else {\n    v1 = _errno_location();\n    v2 = strerror_r(*v1, buf, Number);\n    eprintf(Number L, verbose, String, (unsigned int)fd, v2);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl _test__rdpmc() {\n  unsigned __int64 v0;\n  int *v1;\n  char *v2;\n  int result;\n  int *v4;\n  char *v5;\n  volatile int tmp;\n  int n;\n  int fd;\n  u64 i;\n  u64 loops;\n  u64 delta_sum;\n  void *addr;\n  u64 stamp;\n  u64 delta;\n  perf_event_attr <span class=\"supfact\">attr</span>;\n  sigaction <span class=\"supfact\">sa</span>;\n  char sbuf[Number];\n  unsigned __int64 v18;\n  v18 = __readfsqword(Number);\n  tmp = Number;\n  loops = Number L;\n  memset(&<span class=\"supfact\">attr</span>, Number, sizeof(<span class=\"supfact\">attr</span>));\n  <span class=\"supfact\">attr</span>.config = Number L;\n  *((_BYTE *)&<span class=\"supfact\">attr</span> + Number) |= Number;\n  delta_sum = Number L;\n  sigfillset(&<span class=\"supfact\">sa</span>.sa_mask);\n  <span class=\"supfact\">sa</span>.sa_handler = (__sighandler_t)segfault_handler;\n  sigaction_0(Number, &<span class=\"supfact\">sa</span>, Number L);\n  v0 = perf_event_open_cloexec_flag();\n  fd = sys_perf_event_open(&<span class=\"supfact\">attr</span>, Number, Number, Number, v0);\n  if (fd >= Number) {\n    addr =\n        mmap64(Number L, (unsigned int)page_size, Number, Number, fd, Number L);\n    if (addr == (void *)Number) {\n      v4 = _errno_location();\n      v5 = strerror_r(*v4, sbuf, Number);\n      eprintf(Number L, verbose, String, v5);\n    } else {\n      for (n = Number; n <= Number; ++n) {\n        stamp = mmap_read_self(addr);\n        for (i = Number L; i < loops; ++i)\n          ++tmp;\n        loops *= Number L;\n        delta = mmap_read_self(addr) - stamp;\n        eprintf(Number L, verbose, String, (unsigned int)n, delta);\n        delta_sum += delta;\n      }\n      munmap(addr, (unsigned int)page_size);\n      eprintf(Number L, verbose, String);\n    }\n    close(fd);\n    if (delta_sum)\n      result = Number;\n    else\n      result = Number;\n  } else {\n    v1 = _errno_location();\n    v2 = strerror_r(*v1, sbuf, Number);\n    eprintf(Number L, verbose, String, (unsigned int)fd, v2);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v15", "type": "struct perf_event_attr { __u32 type; __u32 size; __u64 config; $86B88B3CD111083968FE524AC8BE536C _anon_0; __u64 sample_type; __u64 read_format; unsigned __int64 : 1 disabled; unsigned __int64 : 1 inherit; unsigned __int64 : 1 pinned; unsigned __int64 : 1 exclusive; unsigned __int64 : 1 exclude_user; unsigned __int64 : 1 exclude_kernel; unsigned __int64 : 1 exclude_hv; unsigned __int64 : 1 exclude_idle; unsigned __int64 : 1 mmap; unsigned __int64 : 1 comm; unsigned __int64 : 1 freq; unsigned __int64 : 1 inherit_stat; unsigned __int64 : 1 enable_on_exec; unsigned __int64 : 1 task; unsigned __int64 : 1 watermark; unsigned __int64 : 2 precise_ip; unsigned __int64 : 1 mmap_data; unsigned __int64 : 1 sample_id_all; unsigned __int64 : 1 exclude_host; unsigned __int64 : 1 exclude_guest; unsigned __int64 : 1 exclude_callchain_kernel; unsigned __int64 : 1 exclude_callchain_user; unsigned __int64 : 1 mmap2; unsigned __int64 : 1 comm_exec; unsigned __int64 : 1 use_clockid; unsigned __int64 : 1 context_switch; unsigned __int64 : 1 write_backward; unsigned __int64 : 1 namespaces; unsigned __int64 : 35 __reserved_1; $01748923C192B011A525796019A81FA9 _anon_1; __u32 bp_type; $1E26EA1B40FFC8055DED6614B7C5D3C7 _anon_2; $E304040B534C38DCBAD4B871EB540B83 _anon_3; __u64 branch_sample_type; __u64 sample_regs_user; __u32 sample_stack_user; __s32 clockid; __u64 sample_regs_intr; __u32 aux_watermark; __u16 sample_max_stack; __u16 __reserved_2; }", "pred_name": "attr", "ref_name": "attr", "ref_type": "struct perf_event_attr { __u32 type; __u32 size; __u64 config; $86B88B3CD111083968FE524AC8BE536C _anon_0; __u64 sample_type; __u64 read_format; unsigned __int64 : 1 disabled; unsigned __int64 : 1 inherit; unsigned __int64 : 1 pinned; unsigned __int64 : 1 exclusive; unsigned __int64 : 1 exclude_user; unsigned __int64 : 1 exclude_kernel; unsigned __int64 : 1 exclude_hv; unsigned __int64 : 1 exclude_idle; unsigned __int64 : 1 mmap; unsigned __int64 : 1 comm; unsigned __int64 : 1 freq; unsigned __int64 : 1 inherit_stat; unsigned __int64 : 1 enable_on_exec; unsigned __int64 : 1 task; unsigned __int64 : 1 watermark; unsigned __int64 : 2 precise_ip; unsigned __int64 : 1 mmap_data; unsigned __int64 : 1 sample_id_all; unsigned __int64 : 1 exclude_host; unsigned __int64 : 1 exclude_guest; unsigned __int64 : 1 exclude_callchain_kernel; unsigned __int64 : 1 exclude_callchain_user; unsigned __int64 : 1 mmap2; unsigned __int64 : 1 comm_exec; unsigned __int64 : 1 use_clockid; unsigned __int64 : 1 context_switch; unsigned __int64 : 37 __reserved_1; $01748923C192B011A525796019A81FA9 _anon_1; __u32 bp_type; $1E26EA1B40FFC8055DED6614B7C5D3C7 _anon_2; $E304040B534C38DCBAD4B871EB540B83 _anon_3; __u64 branch_sample_type; __u64 sample_regs_user; __u32 sample_stack_user; __s32 clockid; __u64 sample_regs_intr; __u32 aux_watermark; __u32 __reserved_2; }"}, {"name": "v16", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "pred_name": "sa", "ref_name": "sa", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": true}, {"repo_owner": "unicorn-engine", "repo_name": "unicorn", "path": "unicorn-engine/unicorn/836ed9ffc01cad3f813d5e755e157786e9125a4b26fbbd2fb14a157cd1c51e59", "path_in_repo": "unicorn-engine/unicorn/qemu/x86_64-softmmu/exec.o", "objdump": "00000000000042ba <address_space_init_dispatch_x86_64>:\n    42ba:\t55                   \tpush   %rbp\n    42bb:\t48 89 e5             \tmov    %rsp,%rbp\n    42be:\t53                   \tpush   %rbx\n    42bf:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    42c6:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n    42cd:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    42d1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    42d6:\tb9 0e 00 00 00       \tmov    $0xe,%ecx\n    42db:\t48 89 d7             \tmov    %rdx,%rdi\n    42de:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    42e1:\t48 8d 05 b7 fd ff ff \tlea    -0x249(%rip),%rax        # 409f <mem_begin_x86_64>\n    42e8:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n    42ec:\t48 8d 05 0c ff ff ff \tlea    -0xf4(%rip),%rax        # 41ff <mem_commit_x86_64>\n    42f3:\t48 89 45 88          \tmov    %rax,-0x78(%rbp)\n    42f7:\t48 8d 05 24 e7 ff ff \tlea    -0x18dc(%rip),%rax        # 2a22 <mem_add_x86_64>\n    42fe:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n    4302:\t48 8d 05 19 e7 ff ff \tlea    -0x18e7(%rip),%rax        # 2a22 <mem_add_x86_64>\n    4309:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n    430d:\tc7 45 d0 00 00 00 00 \tmovl   $0x0,-0x30(%rbp)\n    4314:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    431b:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n    4322:\t00 \n    4323:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    432a:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n    432e:\t48 8b 5d 88          \tmov    -0x78(%rbp),%rbx\n    4332:\t48 89 48 28          \tmov    %rcx,0x28(%rax)\n    4336:\t48 89 58 30          \tmov    %rbx,0x30(%rax)\n    433a:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n    433e:\t48 8b 5d 98          \tmov    -0x68(%rbp),%rbx\n    4342:\t48 89 48 38          \tmov    %rcx,0x38(%rax)\n    4346:\t48 89 58 40          \tmov    %rbx,0x40(%rax)\n    434a:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n    434e:\t48 8b 5d a8          \tmov    -0x58(%rbp),%rbx\n    4352:\t48 89 48 48          \tmov    %rcx,0x48(%rax)\n    4356:\t48 89 58 50          \tmov    %rbx,0x50(%rax)\n    435a:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n    435e:\t48 8b 5d b8          \tmov    -0x48(%rbp),%rbx\n    4362:\t48 89 48 58          \tmov    %rcx,0x58(%rax)\n    4366:\t48 89 58 60          \tmov    %rbx,0x60(%rax)\n    436a:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n    436e:\t48 8b 5d c8          \tmov    -0x38(%rbp),%rbx\n    4372:\t48 89 48 68          \tmov    %rcx,0x68(%rax)\n    4376:\t48 89 58 70          \tmov    %rbx,0x70(%rax)\n    437a:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n    437e:\t48 8b 5d d8          \tmov    -0x28(%rbp),%rbx\n    4382:\t48 89 48 78          \tmov    %rcx,0x78(%rax)\n    4386:\t48 89 98 80 00 00 00 \tmov    %rbx,0x80(%rax)\n    438d:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    4391:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    4395:\t48 89 88 88 00 00 00 \tmov    %rcx,0x88(%rax)\n    439c:\t48 89 98 90 00 00 00 \tmov    %rbx,0x90(%rax)\n    43a3:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    43aa:\t48 8d 48 28          \tlea    0x28(%rax),%rcx\n    43ae:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    43b5:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    43bc:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    43c3:\t48 89 ce             \tmov    %rcx,%rsi\n    43c6:\t48 89 c7             \tmov    %rax,%rdi\n    43c9:\te8 00 00 00 00       \tcallq  43ce <address_space_init_dispatch_x86_64+0x114>\n    43ce:\t90                   \tnop\n    43cf:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    43d6:\t5b                   \tpop    %rbx\n    43d7:\t5d                   \tpop    %rbp\n    43d8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall address_space_init_dispatch_x86_64(_QWORD *a1) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  memset(<span class=\"supfact\">v9</span>, Number, sizeof(<span class=\"supfact\">v9</span>));\n  <span class=\"supfact\">v9</span>[Number] = (__int64)mem_begin_x86_64;\n  <span class=\"supfact\">v9</span>[Number] = (__int64)mem_commit_x86_64;\n  <span class=\"supfact\">v9</span>[Number] = (__int64)mem_add_x86_64;\n  <span class=\"supfact\">v9</span>[Number] = (__int64)mem_add_x86_64;\n  LODWORD(<span class=\"supfact\">v9</span>[Number]) = Number;\n  a1[Number] = Number L;\n  v1 = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = v1;\n  v2 = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = v2;\n  v3 = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = v3;\n  v4 = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = v4;\n  v5 = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = v5;\n  v6 = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = v6;\n  v7 = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = <span class=\"supfact\">v9</span>[Number];\n  a1[Number] = v7;\n  return memory_listener_register_x86_64(a1[Number], a1 + Number, a1);\n}", "code_t": "void __cdecl address_space_init_dispatch_x86_64(AddressSpace_0 *as) {\n  void (*v1)(MemoryListener_0 *);\n  void (*v2)(MemoryListener_0 *, MemoryRegionSection_0 *);\n  void (*v3)(MemoryListener_0 *, MemoryRegionSection_0 *);\n  void (*v4)(MemoryListener_0 *, MemoryRegionSection_0 *);\n  void (*v5)(MemoryListener_0 *);\n  AddressSpace_0 *v6;\n  MemoryListener **v7;\n  MemoryListener_0 <span class=\"supfact\">ml</span>;\n  memset(&<span class=\"supfact\">ml</span>, Number, sizeof(<span class=\"supfact\">ml</span>));\n  <span class=\"supfact\">ml</span>.begin = (void (*)(MemoryListener_0 *))mem_begin_x86_64;\n  <span class=\"supfact\">ml</span>.commit = (void (*)(MemoryListener_0 *))mem_commit_x86_64;\n  <span class=\"supfact\">ml</span>.region_add =\n      (void (*)(MemoryListener_0 *, MemoryRegionSection_0 *))mem_add_x86_64;\n  <span class=\"supfact\">ml</span>.region_nop =\n      (void (*)(MemoryListener_0 *, MemoryRegionSection_0 *))mem_add_x86_64;\n  <span class=\"supfact\">ml</span>.priority = Number;\n  as->dispatch = Number L;\n  v1 = <span class=\"supfact\">ml</span>.commit;\n  as->dispatch_listener.begin = <span class=\"supfact\">ml</span>.begin;\n  as->dispatch_listener.commit = v1;\n  v2 = <span class=\"supfact\">ml</span>.region_del;\n  as->dispatch_listener.region_add = <span class=\"supfact\">ml</span>.region_add;\n  as->dispatch_listener.region_del = v2;\n  v3 = <span class=\"supfact\">ml</span>.log_start;\n  as->dispatch_listener.region_nop = <span class=\"supfact\">ml</span>.region_nop;\n  as->dispatch_listener.log_start = v3;\n  v4 = <span class=\"supfact\">ml</span>.log_sync;\n  as->dispatch_listener.log_stop = <span class=\"supfact\">ml</span>.log_stop;\n  as->dispatch_listener.log_sync = v4;\n  v5 = <span class=\"supfact\">ml</span>.log_global_stop;\n  as->dispatch_listener.log_global_start = <span class=\"supfact\">ml</span>.log_global_start;\n  as->dispatch_listener.log_global_stop = v5;\n  v6 = <span class=\"supfact\">ml</span>.address_space_filter;\n  *(_QWORD *)&as->dispatch_listener.priority =\n      *(_QWORD *)&<span class=\"supfact\">ml</span>.priority;\n  as->dispatch_listener.address_space_filter = v6;\n  v7 = <span class=\"supfact\">ml</span>.link.tqe_prev;\n  as->dispatch_listener.link.tqe_next = <span class=\"supfact\">ml</span>.link.tqe_next;\n  as->dispatch_listener.link.tqe_prev = v7;\n  memory_listener_register_x86_64(as->uc, &as->dispatch_listener, as);\n}", "var": [{"name": "v9", "type": "struct MemoryListener_0 { void (*)(MemoryListener_0 *) begin; void (*)(MemoryListener_0 *) commit; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) region_add; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) region_del; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) region_nop; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) log_start; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) log_stop; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) log_sync; void (*)(MemoryListener_0 *) log_global_start; void (*)(MemoryListener_0 *) log_global_stop; unsigned int priority; PADDING (4); AddressSpace_0 * address_space_filter; $6C8A045EA00284F1CD12B031A2F82167 link; }", "pred_name": "ml", "ref_name": "ml", "ref_type": "struct MemoryListener_0 { void (*)(MemoryListener_0 *) begin; void (*)(MemoryListener_0 *) commit; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) region_add; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) region_del; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) region_nop; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) log_start; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) log_stop; void (*)(MemoryListener_0 *, MemoryRegionSection_0 *) log_sync; void (*)(MemoryListener_0 *) log_global_start; void (*)(MemoryListener_0 *) log_global_stop; unsigned int priority; PADDING (4); AddressSpace_0 * address_space_filter; $6C8A045EA00284F1CD12B031A2F82167 link; }"}], "body_in_train": true}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/72d863e358d23a9787e1d769e3a76917875ec295a59ff580baf5a03eba41f638", "path_in_repo": "ftnapps/pkg-sbbs/src/uifc/gcc.linux.exe.debug/uifctest", "objdump": "0000000000414732 <curs_putch>:\n  414732:\t55                   \tpush   %rbp\n  414733:\t48 89 e5             \tmov    %rsp,%rbp\n  414736:\t53                   \tpush   %rbx\n  414737:\t48 83 ec 38          \tsub    $0x38,%rsp\n  41473b:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n  41473e:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  414741:\t88 45 df             \tmov    %al,-0x21(%rbp)\n  414744:\t8b 05 72 5e 05 00    \tmov    0x55e72(%rip),%eax        # 46a5bc <lastattr>\n  41474a:\t88 45 e0             \tmov    %al,-0x20(%rbp)\n  41474d:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  414750:\t83 e8 07             \tsub    $0x7,%eax\n  414753:\t83 f8 06             \tcmp    $0x6,%eax\n  414756:\t0f 87 85 01 00 00    \tja     4148e1 <curs_putch+0x1af>\n  41475c:\t89 c0                \tmov    %eax,%eax\n  41475e:\t48 8b 04 c5 40 21 42 \tmov    0x422140(,%rax,8),%rax\n  414765:\t00 \n  414766:\tff e0                \tjmpq   *%rax\n  414768:\te8 72 c7 ff ff       \tcallq  410edf <ciolib_wherey>\n  41476d:\t89 c6                \tmov    %eax,%esi\n  41476f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  414774:\te8 ab c7 ff ff       \tcallq  410f24 <ciolib_gotoxy>\n  414779:\te9 36 03 00 00       \tjmpq   414ab4 <curs_putch+0x382>\n  41477e:\t48 8d 45 e1          \tlea    -0x1f(%rbp),%rax\n  414782:\t48 89 c7             \tmov    %rax,%rdi\n  414785:\te8 30 c5 ff ff       \tcallq  410cba <ciolib_gettextinfo>\n  41478a:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  41478e:\t0f b6 c0             \tmovzbl %al,%eax\n  414791:\t0f b6 55 e4          \tmovzbl -0x1c(%rbp),%edx\n  414795:\t0f b6 ca             \tmovzbl %dl,%ecx\n  414798:\t0f b6 55 e2          \tmovzbl -0x1e(%rbp),%edx\n  41479c:\t0f b6 d2             \tmovzbl %dl,%edx\n  41479f:\t29 d1                \tsub    %edx,%ecx\n  4147a1:\t89 ca                \tmov    %ecx,%edx\n  4147a3:\t83 c2 01             \tadd    $0x1,%edx\n  4147a6:\t39 d0                \tcmp    %edx,%eax\n  4147a8:\t75 0a                \tjne    4147b4 <curs_putch+0x82>\n  4147aa:\te8 01 c6 ff ff       \tcallq  410db0 <ciolib_wscroll>\n  4147af:\te9 00 03 00 00       \tjmpq   414ab4 <curs_putch+0x382>\n  4147b4:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  4147b8:\t0f b6 c0             \tmovzbl %al,%eax\n  4147bb:\t8d 50 01             \tlea    0x1(%rax),%edx\n  4147be:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  4147c2:\t0f b6 c0             \tmovzbl %al,%eax\n  4147c5:\t89 d6                \tmov    %edx,%esi\n  4147c7:\t89 c7                \tmov    %eax,%edi\n  4147c9:\te8 56 c7 ff ff       \tcallq  410f24 <ciolib_gotoxy>\n  4147ce:\te9 e1 02 00 00       \tjmpq   414ab4 <curs_putch+0x382>\n  4147d3:\t48 8d 45 e1          \tlea    -0x1f(%rbp),%rax\n  4147d7:\t48 89 c7             \tmov    %rax,%rdi\n  4147da:\te8 db c4 ff ff       \tcallq  410cba <ciolib_gettextinfo>\n  4147df:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  4147e3:\t3c 01                \tcmp    $0x1,%al\n  4147e5:\t0f 86 c5 02 00 00    \tjbe    414ab0 <curs_putch+0x37e>\n  4147eb:\tc6 45 df 20          \tmovb   $0x20,-0x21(%rbp)\n  4147ef:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  4147f3:\t0f b6 c0             \tmovzbl %al,%eax\n  4147f6:\t0f b6 55 ea          \tmovzbl -0x16(%rbp),%edx\n  4147fa:\t0f b6 d2             \tmovzbl %dl,%edx\n  4147fd:\t83 ea 01             \tsub    $0x1,%edx\n  414800:\t89 c6                \tmov    %eax,%esi\n  414802:\t89 d7                \tmov    %edx,%edi\n  414804:\te8 1b c7 ff ff       \tcallq  410f24 <ciolib_gotoxy>\n  414809:\t0f b6 45 e2          \tmovzbl -0x1e(%rbp),%eax\n  41480d:\t0f b6 d0             \tmovzbl %al,%edx\n  414810:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  414814:\t0f b6 c0             \tmovzbl %al,%eax\n  414817:\t01 d0                \tadd    %edx,%eax\n  414819:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n  41481c:\t0f b6 45 e1          \tmovzbl -0x1f(%rbp),%eax\n  414820:\t0f b6 d0             \tmovzbl %al,%edx\n  414823:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  414827:\t0f b6 c0             \tmovzbl %al,%eax\n  41482a:\t01 d0                \tadd    %edx,%eax\n  41482c:\t8d 50 fe             \tlea    -0x2(%rax),%edx\n  41482f:\t0f b6 45 e2          \tmovzbl -0x1e(%rbp),%eax\n  414833:\t0f b6 f0             \tmovzbl %al,%esi\n  414836:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  41483a:\t0f b6 c0             \tmovzbl %al,%eax\n  41483d:\t01 f0                \tadd    %esi,%eax\n  41483f:\t8d 70 ff             \tlea    -0x1(%rax),%esi\n  414842:\t0f b6 45 e1          \tmovzbl -0x1f(%rbp),%eax\n  414846:\t0f b6 f8             \tmovzbl %al,%edi\n  414849:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  41484d:\t0f b6 c0             \tmovzbl %al,%eax\n  414850:\t01 f8                \tadd    %edi,%eax\n  414852:\t83 e8 02             \tsub    $0x2,%eax\n  414855:\t48 8d 7d df          \tlea    -0x21(%rbp),%rdi\n  414859:\t49 89 f8             \tmov    %rdi,%r8\n  41485c:\t89 c7                \tmov    %eax,%edi\n  41485e:\te8 3f d0 ff ff       \tcallq  4118a2 <ciolib_puttext>\n  414863:\te9 48 02 00 00       \tjmpq   414ab0 <curs_putch+0x37e>\n  414868:\te8 83 e9 fe ff       \tcallq  4031f0 <beep@plt>\n  41486d:\te9 42 02 00 00       \tjmpq   414ab4 <curs_putch+0x382>\n  414872:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  414879:\teb 3d                \tjmp    4148b8 <curs_putch+0x186>\n  41487b:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  41487e:\t48 98                \tcltq   \n  414880:\t8b 1c 85 a0 1a 42 00 \tmov    0x421aa0(,%rax,4),%ebx\n  414887:\te8 0e c6 ff ff       \tcallq  410e9a <ciolib_wherex>\n  41488c:\t39 c3                \tcmp    %eax,%ebx\n  41488e:\t7e 24                \tjle    4148b4 <curs_putch+0x182>\n  414890:\teb 0a                \tjmp    41489c <curs_putch+0x16a>\n  414892:\tbf 20 00 00 00       \tmov    $0x20,%edi\n  414897:\te8 07 d1 ff ff       \tcallq  4119a3 <ciolib_putch>\n  41489c:\te8 f9 c5 ff ff       \tcallq  410e9a <ciolib_wherex>\n  4148a1:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4148a4:\t48 63 d2             \tmovslq %edx,%rdx\n  4148a7:\t8b 14 95 a0 1a 42 00 \tmov    0x421aa0(,%rdx,4),%edx\n  4148ae:\t39 d0                \tcmp    %edx,%eax\n  4148b0:\t7c e0                \tjl     414892 <curs_putch+0x160>\n  4148b2:\teb 0a                \tjmp    4148be <curs_putch+0x18c>\n  4148b4:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  4148b8:\t83 7d ec 09          \tcmpl   $0x9,-0x14(%rbp)\n  4148bc:\t7e bd                \tjle    41487b <curs_putch+0x149>\n  4148be:\t83 7d ec 0a          \tcmpl   $0xa,-0x14(%rbp)\n  4148c2:\t0f 85 eb 01 00 00    \tjne    414ab3 <curs_putch+0x381>\n  4148c8:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n  4148cd:\te8 d1 d0 ff ff       \tcallq  4119a3 <ciolib_putch>\n  4148d2:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  4148d7:\te8 c7 d0 ff ff       \tcallq  4119a3 <ciolib_putch>\n  4148dc:\te9 d2 01 00 00       \tjmpq   414ab3 <curs_putch+0x381>\n  4148e1:\t48 8d 45 e1          \tlea    -0x1f(%rbp),%rax\n  4148e5:\t48 89 c7             \tmov    %rax,%rdi\n  4148e8:\te8 cd c3 ff ff       \tcallq  410cba <ciolib_gettextinfo>\n  4148ed:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  4148f1:\t0f b6 c0             \tmovzbl %al,%eax\n  4148f4:\t0f b6 55 e4          \tmovzbl -0x1c(%rbp),%edx\n  4148f8:\t0f b6 ca             \tmovzbl %dl,%ecx\n  4148fb:\t0f b6 55 e2          \tmovzbl -0x1e(%rbp),%edx\n  4148ff:\t0f b6 d2             \tmovzbl %dl,%edx\n  414902:\t29 d1                \tsub    %edx,%ecx\n  414904:\t89 ca                \tmov    %ecx,%edx\n  414906:\t83 c2 01             \tadd    $0x1,%edx\n  414909:\t39 d0                \tcmp    %edx,%eax\n  41490b:\t0f 85 97 00 00 00    \tjne    4149a8 <curs_putch+0x276>\n  414911:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  414915:\t0f b6 c0             \tmovzbl %al,%eax\n  414918:\t0f b6 55 e3          \tmovzbl -0x1d(%rbp),%edx\n  41491c:\t0f b6 ca             \tmovzbl %dl,%ecx\n  41491f:\t0f b6 55 e1          \tmovzbl -0x1f(%rbp),%edx\n  414923:\t0f b6 d2             \tmovzbl %dl,%edx\n  414926:\t29 d1                \tsub    %edx,%ecx\n  414928:\t89 ca                \tmov    %ecx,%edx\n  41492a:\t83 c2 01             \tadd    $0x1,%edx\n  41492d:\t39 d0                \tcmp    %edx,%eax\n  41492f:\t75 77                \tjne    4149a8 <curs_putch+0x276>\n  414931:\t0f b6 45 e2          \tmovzbl -0x1e(%rbp),%eax\n  414935:\t0f b6 d0             \tmovzbl %al,%edx\n  414938:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  41493c:\t0f b6 c0             \tmovzbl %al,%eax\n  41493f:\t01 d0                \tadd    %edx,%eax\n  414941:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n  414944:\t0f b6 45 e1          \tmovzbl -0x1f(%rbp),%eax\n  414948:\t0f b6 d0             \tmovzbl %al,%edx\n  41494b:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  41494f:\t0f b6 c0             \tmovzbl %al,%eax\n  414952:\t01 d0                \tadd    %edx,%eax\n  414954:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  414957:\t0f b6 45 e2          \tmovzbl -0x1e(%rbp),%eax\n  41495b:\t0f b6 f0             \tmovzbl %al,%esi\n  41495e:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  414962:\t0f b6 c0             \tmovzbl %al,%eax\n  414965:\t01 f0                \tadd    %esi,%eax\n  414967:\t8d 70 ff             \tlea    -0x1(%rax),%esi\n  41496a:\t0f b6 45 e1          \tmovzbl -0x1f(%rbp),%eax\n  41496e:\t0f b6 f8             \tmovzbl %al,%edi\n  414971:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  414975:\t0f b6 c0             \tmovzbl %al,%eax\n  414978:\t01 f8                \tadd    %edi,%eax\n  41497a:\t83 e8 01             \tsub    $0x1,%eax\n  41497d:\t48 8d 7d df          \tlea    -0x21(%rbp),%rdi\n  414981:\t49 89 f8             \tmov    %rdi,%r8\n  414984:\t89 c7                \tmov    %eax,%edi\n  414986:\te8 17 cf ff ff       \tcallq  4118a2 <ciolib_puttext>\n  41498b:\te8 20 c4 ff ff       \tcallq  410db0 <ciolib_wscroll>\n  414990:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  414994:\t0f b6 c0             \tmovzbl %al,%eax\n  414997:\t89 c6                \tmov    %eax,%esi\n  414999:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  41499e:\te8 81 c5 ff ff       \tcallq  410f24 <ciolib_gotoxy>\n  4149a3:\te9 0c 01 00 00       \tjmpq   414ab4 <curs_putch+0x382>\n  4149a8:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  4149ac:\t0f b6 c0             \tmovzbl %al,%eax\n  4149af:\t0f b6 55 e3          \tmovzbl -0x1d(%rbp),%edx\n  4149b3:\t0f b6 ca             \tmovzbl %dl,%ecx\n  4149b6:\t0f b6 55 e1          \tmovzbl -0x1f(%rbp),%edx\n  4149ba:\t0f b6 d2             \tmovzbl %dl,%edx\n  4149bd:\t29 d1                \tsub    %edx,%ecx\n  4149bf:\t89 ca                \tmov    %ecx,%edx\n  4149c1:\t83 c2 01             \tadd    $0x1,%edx\n  4149c4:\t39 d0                \tcmp    %edx,%eax\n  4149c6:\t75 72                \tjne    414a3a <curs_putch+0x308>\n  4149c8:\t0f b6 45 e2          \tmovzbl -0x1e(%rbp),%eax\n  4149cc:\t0f b6 d0             \tmovzbl %al,%edx\n  4149cf:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  4149d3:\t0f b6 c0             \tmovzbl %al,%eax\n  4149d6:\t01 d0                \tadd    %edx,%eax\n  4149d8:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n  4149db:\t0f b6 45 e1          \tmovzbl -0x1f(%rbp),%eax\n  4149df:\t0f b6 d0             \tmovzbl %al,%edx\n  4149e2:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  4149e6:\t0f b6 c0             \tmovzbl %al,%eax\n  4149e9:\t01 d0                \tadd    %edx,%eax\n  4149eb:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  4149ee:\t0f b6 45 e2          \tmovzbl -0x1e(%rbp),%eax\n  4149f2:\t0f b6 f0             \tmovzbl %al,%esi\n  4149f5:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  4149f9:\t0f b6 c0             \tmovzbl %al,%eax\n  4149fc:\t01 f0                \tadd    %esi,%eax\n  4149fe:\t8d 70 ff             \tlea    -0x1(%rax),%esi\n  414a01:\t0f b6 45 e1          \tmovzbl -0x1f(%rbp),%eax\n  414a05:\t0f b6 f8             \tmovzbl %al,%edi\n  414a08:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  414a0c:\t0f b6 c0             \tmovzbl %al,%eax\n  414a0f:\t01 f8                \tadd    %edi,%eax\n  414a11:\t83 e8 01             \tsub    $0x1,%eax\n  414a14:\t48 8d 7d df          \tlea    -0x21(%rbp),%rdi\n  414a18:\t49 89 f8             \tmov    %rdi,%r8\n  414a1b:\t89 c7                \tmov    %eax,%edi\n  414a1d:\te8 80 ce ff ff       \tcallq  4118a2 <ciolib_puttext>\n  414a22:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  414a26:\t0f b6 c0             \tmovzbl %al,%eax\n  414a29:\t83 c0 01             \tadd    $0x1,%eax\n  414a2c:\t89 c6                \tmov    %eax,%esi\n  414a2e:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  414a33:\te8 ec c4 ff ff       \tcallq  410f24 <ciolib_gotoxy>\n  414a38:\teb 7a                \tjmp    414ab4 <curs_putch+0x382>\n  414a3a:\t0f b6 45 e2          \tmovzbl -0x1e(%rbp),%eax\n  414a3e:\t0f b6 d0             \tmovzbl %al,%edx\n  414a41:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  414a45:\t0f b6 c0             \tmovzbl %al,%eax\n  414a48:\t01 d0                \tadd    %edx,%eax\n  414a4a:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n  414a4d:\t0f b6 45 e1          \tmovzbl -0x1f(%rbp),%eax\n  414a51:\t0f b6 d0             \tmovzbl %al,%edx\n  414a54:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  414a58:\t0f b6 c0             \tmovzbl %al,%eax\n  414a5b:\t01 d0                \tadd    %edx,%eax\n  414a5d:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  414a60:\t0f b6 45 e2          \tmovzbl -0x1e(%rbp),%eax\n  414a64:\t0f b6 f0             \tmovzbl %al,%esi\n  414a67:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  414a6b:\t0f b6 c0             \tmovzbl %al,%eax\n  414a6e:\t01 f0                \tadd    %esi,%eax\n  414a70:\t8d 70 ff             \tlea    -0x1(%rax),%esi\n  414a73:\t0f b6 45 e1          \tmovzbl -0x1f(%rbp),%eax\n  414a77:\t0f b6 f8             \tmovzbl %al,%edi\n  414a7a:\t0f b6 45 ea          \tmovzbl -0x16(%rbp),%eax\n  414a7e:\t0f b6 c0             \tmovzbl %al,%eax\n  414a81:\t01 f8                \tadd    %edi,%eax\n  414a83:\t83 e8 01             \tsub    $0x1,%eax\n  414a86:\t48 8d 7d df          \tlea    -0x21(%rbp),%rdi\n  414a8a:\t49 89 f8             \tmov    %rdi,%r8\n  414a8d:\t89 c7                \tmov    %eax,%edi\n  414a8f:\te8 0e ce ff ff       \tcallq  4118a2 <ciolib_puttext>\n  414a94:\t0f b6 45 eb          \tmovzbl -0x15(%rbp),%eax\n  414a98:\t0f b6 c0             \tmovzbl %al,%eax\n  414a9b:\t0f b6 55 ea          \tmovzbl -0x16(%rbp),%edx\n  414a9f:\t0f b6 d2             \tmovzbl %dl,%edx\n  414aa2:\t83 c2 01             \tadd    $0x1,%edx\n  414aa5:\t89 c6                \tmov    %eax,%esi\n  414aa7:\t89 d7                \tmov    %edx,%edi\n  414aa9:\te8 76 c4 ff ff       \tcallq  410f24 <ciolib_gotoxy>\n  414aae:\teb 04                \tjmp    414ab4 <curs_putch+0x382>\n  414ab0:\t90                   \tnop\n  414ab1:\teb 01                \tjmp    414ab4 <curs_putch+0x382>\n  414ab3:\t90                   \tnop\n  414ab4:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  414ab7:\t48 83 c4 38          \tadd    $0x38,%rsp\n  414abb:\t5b                   \tpop    %rbx\n  414abc:\t5d                   \tpop    %rbp\n  414abd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall curs_putch(unsigned int a1) {\n  int v1;\n  int v2;\n  char v4[Number];\n  unsigned __int8 <span class=\"supfact\">v5</span>;\n  unsigned __int8 v6;\n  unsigned __int8 v7;\n  unsigned __int8 v8;\n  unsigned __int8 v9;\n  unsigned __int8 v10;\n  int i;\n  v4[Number] = a1;\n  v4[Number] = lastattr;\n  switch (a1) {\n  case Number:\n    beep();\n    break;\n  case Number:\n    ciolib_gettextinfo((char *)&<span class=\"supfact\">v5</span>);\n    if (v9 > Number) {\n      v4[Number] = Number;\n      ciolib_gotoxy(v9 - Number, v10);\n      ciolib_puttext(<span class=\"supfact\">v5</span> + v9 - Number, v6 + v10 - Number,\n                     <span class=\"supfact\">v5</span> + v9 - Number, v6 + v10 - Number,\n                     (__int64)v4);\n    }\n    break;\n  case Number:\n    for (i = Number; i <= Number; ++i) {\n      v2 = curs_tabs[i];\n      if (v2 > (int)ciolib_wherex()) {\n        while ((int)ciolib_wherex() < curs_tabs[i])\n          ciolib_putch(Number);\n        break;\n      }\n    }\n    if (i == Number) {\n      ciolib_putch(Number);\n      ciolib_putch(Number);\n    }\n    break;\n  case Number:\n    ciolib_gettextinfo((char *)&<span class=\"supfact\">v5</span>);\n    if (v10 == v8 - v6 + Number)\n      ciolib_wscroll();\n    else\n      ciolib_gotoxy(v9, v10 + Number);\n    break;\n  case Number:\n    v1 = ciolib_wherey();\n    ciolib_gotoxy(Number, v1);\n    break;\n  default:\n    ciolib_gettextinfo((char *)&<span class=\"supfact\">v5</span>);\n    if (v10 == v8 - v6 + Number && v9 == v7 - <span class=\"supfact\">v5</span> + Number) {\n      ciolib_puttext(<span class=\"supfact\">v5</span> + v9 - Number, v6 + v10 - Number,\n                     <span class=\"supfact\">v5</span> + v9 - Number, v6 + v10 - Number,\n                     (__int64)v4);\n      ciolib_wscroll();\n      ciolib_gotoxy(Number, v10);\n    } else if (v9 == v7 - <span class=\"supfact\">v5</span> + Number) {\n      ciolib_puttext(<span class=\"supfact\">v5</span> + v9 - Number, v6 + v10 - Number,\n                     <span class=\"supfact\">v5</span> + v9 - Number, v6 + v10 - Number,\n                     (__int64)v4);\n      ciolib_gotoxy(Number, v10 + Number);\n    } else {\n      ciolib_puttext(<span class=\"supfact\">v5</span> + v9 - Number, v6 + v10 - Number,\n                     <span class=\"supfact\">v5</span> + v9 - Number, v6 + v10 - Number,\n                     (__int64)v4);\n      ciolib_gotoxy(v9 + Number, v10);\n    }\n    break;\n  }\n  return a1;\n}", "code_t": "int __cdecl curs_putch(int ch_0) {\n  int v1;\n  int v2;\n  unsigned __int8 buf[Number];\n  text_info <span class=\"supfact\">ti</span>;\n  int i;\n  buf[Number] = ch_0;\n  buf[Number] = lastattr;\n  switch (ch_0) {\n  case Number:\n    beep();\n    break;\n  case Number:\n    ciolib_gettextinfo(&<span class=\"supfact\">ti</span>);\n    if (<span class=\"supfact\">ti</span>.curx > Number) {\n      buf[Number] = Number;\n      ciolib_gotoxy(<span class=\"supfact\">ti</span>.curx - Number, <span class=\"supfact\">ti</span>.cury);\n      ciolib_puttext(\n          <span class=\"supfact\">ti</span>.winleft + <span class=\"supfact\">ti</span>.curx - Number,\n          <span class=\"supfact\">ti</span>.wintop + <span class=\"supfact\">ti</span>.cury - Number,\n          <span class=\"supfact\">ti</span>.winleft + <span class=\"supfact\">ti</span>.curx - Number,\n          <span class=\"supfact\">ti</span>.wintop + <span class=\"supfact\">ti</span>.cury - Number, buf);\n    }\n    break;\n  case Number:\n    for (i = Number; i <= Number; ++i) {\n      v2 = curs_tabs[i];\n      if (v2 > ciolib_wherex()) {\n        while (ciolib_wherex() < curs_tabs[i])\n          ciolib_putch(Number);\n        break;\n      }\n    }\n    if (i == Number) {\n      ciolib_putch(Number);\n      ciolib_putch(Number);\n    }\n    break;\n  case Number:\n    ciolib_gettextinfo(&<span class=\"supfact\">ti</span>);\n    if (<span class=\"supfact\">ti</span>.cury ==\n        <span class=\"supfact\">ti</span>.winbottom - <span class=\"supfact\">ti</span>.wintop + Number)\n      ciolib_wscroll();\n    else\n      ciolib_gotoxy(<span class=\"supfact\">ti</span>.curx, <span class=\"supfact\">ti</span>.cury + Number);\n    break;\n  case Number:\n    v1 = ciolib_wherey();\n    ciolib_gotoxy(Number, v1);\n    break;\n  default:\n    ciolib_gettextinfo(&<span class=\"supfact\">ti</span>);\n    if (<span class=\"supfact\">ti</span>.cury ==\n            <span class=\"supfact\">ti</span>.winbottom - <span class=\"supfact\">ti</span>.wintop + Number &&\n        <span class=\"supfact\">ti</span>.curx ==\n            <span class=\"supfact\">ti</span>.winright - <span class=\"supfact\">ti</span>.winleft + Number) {\n      ciolib_puttext(\n          <span class=\"supfact\">ti</span>.winleft + <span class=\"supfact\">ti</span>.curx - Number,\n          <span class=\"supfact\">ti</span>.wintop + <span class=\"supfact\">ti</span>.cury - Number,\n          <span class=\"supfact\">ti</span>.winleft + <span class=\"supfact\">ti</span>.curx - Number,\n          <span class=\"supfact\">ti</span>.wintop + <span class=\"supfact\">ti</span>.cury - Number, buf);\n      ciolib_wscroll();\n      ciolib_gotoxy(Number, <span class=\"supfact\">ti</span>.cury);\n    } else if (<span class=\"supfact\">ti</span>.curx == <span class=\"supfact\">ti</span>.winright -\n                                              <span class=\"supfact\">ti</span>.winleft +\n                                              Number) {\n      ciolib_puttext(\n          <span class=\"supfact\">ti</span>.winleft + <span class=\"supfact\">ti</span>.curx - Number,\n          <span class=\"supfact\">ti</span>.wintop + <span class=\"supfact\">ti</span>.cury - Number,\n          <span class=\"supfact\">ti</span>.winleft + <span class=\"supfact\">ti</span>.curx - Number,\n          <span class=\"supfact\">ti</span>.wintop + <span class=\"supfact\">ti</span>.cury - Number, buf);\n      ciolib_gotoxy(Number, <span class=\"supfact\">ti</span>.cury + Number);\n    } else {\n      ciolib_puttext(\n          <span class=\"supfact\">ti</span>.winleft + <span class=\"supfact\">ti</span>.curx - Number,\n          <span class=\"supfact\">ti</span>.wintop + <span class=\"supfact\">ti</span>.cury - Number,\n          <span class=\"supfact\">ti</span>.winleft + <span class=\"supfact\">ti</span>.curx - Number,\n          <span class=\"supfact\">ti</span>.wintop + <span class=\"supfact\">ti</span>.cury - Number, buf);\n      ciolib_gotoxy(<span class=\"supfact\">ti</span>.curx + Number, <span class=\"supfact\">ti</span>.cury);\n    }\n    break;\n  }\n  return ch_0;\n}", "var": [{"name": "v5", "type": "unsigned __int8[2]", "pred_name": "buf", "ref_name": "ti", "ref_type": "struct text_info { unsigned __int8 winleft; unsigned __int8 wintop; unsigned __int8 winright; unsigned __int8 winbottom; unsigned __int8 attribute; unsigned __int8 normattr; unsigned __int8 currmode; unsigned __int8 screenheight; unsigned __int8 screenwidth; unsigned __int8 curx; unsigned __int8 cury; }"}], "body_in_train": false}, {"repo_owner": "kjo6152", "repo_name": "Phonetop", "path": "kjo6152/Phonetop/2cf5e2d7989494b3588925ecfbc7281ded8f0b35263818b477b03aea578379c2", "path_in_repo": "kjo6152/Phonetop/phonetopclient/ffmpeg-2.3/libavformat/ipmovie.o", "objdump": "0000000000000f06 <ipmovie_read_header>:\n     f06:\t48 81 ec c8 00 00 00 \tsub    $0xc8,%rsp\n     f0d:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     f12:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f17:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     f1b:\t48 89 84 24 b0 00 00 \tmov    %rax,0xb0(%rsp)\n     f22:\t00 \n     f23:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f28:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     f2c:\t48 89 84 24 a8 00 00 \tmov    %rax,0xa8(%rsp)\n     f33:\t00 \n     f34:\t48 8d 4c 24 10       \tlea    0x10(%rsp),%rcx\n     f39:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n     f40:\t00 \n     f41:\tba 16 00 00 00       \tmov    $0x16,%edx\n     f46:\t48 89 ce             \tmov    %rcx,%rsi\n     f49:\t48 89 c7             \tmov    %rax,%rdi\n     f4c:\te8 00 00 00 00       \tcallq  f51 <ipmovie_read_header+0x4b>\n     f51:\teb 50                \tjmp    fa3 <ipmovie_read_header+0x9d>\n     f53:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n     f58:\t48 83 c0 01          \tadd    $0x1,%rax\n     f5c:\t48 8d 4c 24 10       \tlea    0x10(%rsp),%rcx\n     f61:\tba 15 00 00 00       \tmov    $0x15,%edx\n     f66:\t48 89 c6             \tmov    %rax,%rsi\n     f69:\t48 89 cf             \tmov    %rcx,%rdi\n     f6c:\te8 00 00 00 00       \tcallq  f71 <ipmovie_read_header+0x6b>\n     f71:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n     f78:\t00 \n     f79:\t48 89 c7             \tmov    %rax,%rdi\n     f7c:\te8 00 00 00 00       \tcallq  f81 <ipmovie_read_header+0x7b>\n     f81:\t88 44 24 25          \tmov    %al,0x25(%rsp)\n     f85:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n     f8c:\t00 \n     f8d:\t48 89 c7             \tmov    %rax,%rdi\n     f90:\te8 00 00 00 00       \tcallq  f95 <ipmovie_read_header+0x8f>\n     f95:\t85 c0                \ttest   %eax,%eax\n     f97:\t74 0a                \tje     fa3 <ipmovie_read_header+0x9d>\n     f99:\tb8 bb b0 b9 df       \tmov    $0xdfb9b0bb,%eax\n     f9e:\te9 ff 04 00 00       \tjmpq   14a2 <ipmovie_read_header+0x59c>\n     fa3:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n     fa8:\tba 16 00 00 00       \tmov    $0x16,%edx\n     fad:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     fb2:\t48 89 c7             \tmov    %rax,%rdi\n     fb5:\te8 00 00 00 00       \tcallq  fba <ipmovie_read_header+0xb4>\n     fba:\t85 c0                \ttest   %eax,%eax\n     fbc:\t75 95                \tjne    f53 <ipmovie_read_header+0x4d>\n     fbe:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n     fc5:\t00 \n     fc6:\tc7 80 48 04 00 00 00 \tmovl   $0x0,0x448(%rax)\n     fcd:\t00 00 00 \n     fd0:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n     fd7:\t00 \n     fd8:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     fdf:\t00 \n     fe0:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n     fe7:\t00 \n     fe8:\t48 c7 80 78 04 00 00 \tmovq   $0x0,0x478(%rax)\n     fef:\t00 00 00 00 \n     ff3:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n     ffa:\t00 \n     ffb:\t48 8b 90 78 04 00 00 \tmov    0x478(%rax),%rdx\n    1002:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    1009:\t00 \n    100a:\t48 89 90 68 04 00 00 \tmov    %rdx,0x468(%rax)\n    1011:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    1018:\t00 \n    1019:\t48 8b 90 68 04 00 00 \tmov    0x468(%rax),%rdx\n    1020:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    1027:\t00 \n    1028:\t48 89 90 58 04 00 00 \tmov    %rdx,0x458(%rax)\n    102f:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    1036:\t00 \n    1037:\t48 89 84 24 90 00 00 \tmov    %rax,0x90(%rsp)\n    103e:\t00 \n    103f:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    1046:\t00 \n    1047:\tba 01 00 00 00       \tmov    $0x1,%edx\n    104c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1051:\t48 89 c7             \tmov    %rax,%rdi\n    1054:\te8 00 00 00 00       \tcallq  1059 <ipmovie_read_header+0x153>\n    1059:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n    105d:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    1064:\t00 \n    1065:\t48 89 90 88 04 00 00 \tmov    %rdx,0x488(%rax)\n    106c:\tc7 84 24 bc 00 00 00 \tmovl   $0x0,0xbc(%rsp)\n    1073:\t00 00 00 00 \n    1077:\teb 25                \tjmp    109e <ipmovie_read_header+0x198>\n    1079:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    1080:\t00 \n    1081:\t8b 94 24 bc 00 00 00 \tmov    0xbc(%rsp),%edx\n    1088:\t48 63 d2             \tmovslq %edx,%rdx\n    108b:\t48 83 c2 0c          \tadd    $0xc,%rdx\n    108f:\tc7 04 90 00 00 00 ff \tmovl   $0xff000000,(%rax,%rdx,4)\n    1096:\t83 84 24 bc 00 00 00 \taddl   $0x1,0xbc(%rsp)\n    109d:\t01 \n    109e:\t81 bc 24 bc 00 00 00 \tcmpl   $0xff,0xbc(%rsp)\n    10a5:\tff 00 00 00 \n    10a9:\t7e ce                \tjle    1079 <ipmovie_read_header+0x173>\n    10ab:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n    10b0:\t48 8b 8c 24 a8 00 00 \tmov    0xa8(%rsp),%rcx\n    10b7:\t00 \n    10b8:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    10bf:\t00 \n    10c0:\t48 89 ce             \tmov    %rcx,%rsi\n    10c3:\t48 89 c7             \tmov    %rax,%rdi\n    10c6:\te8 f1 f3 ff ff       \tcallq  4bc <process_ipmovie_chunk>\n    10cb:\t83 f8 02             \tcmp    $0x2,%eax\n    10ce:\t74 0a                \tje     10da <ipmovie_read_header+0x1d4>\n    10d0:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n    10d5:\te9 c8 03 00 00       \tjmpq   14a2 <ipmovie_read_header+0x59c>\n    10da:\t48 8d 4c 24 2c       \tlea    0x2c(%rsp),%rcx\n    10df:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    10e6:\t00 \n    10e7:\tba 04 00 00 00       \tmov    $0x4,%edx\n    10ec:\t48 89 ce             \tmov    %rcx,%rsi\n    10ef:\t48 89 c7             \tmov    %rax,%rdi\n    10f2:\te8 00 00 00 00       \tcallq  10f7 <ipmovie_read_header+0x1f1>\n    10f7:\t83 f8 04             \tcmp    $0x4,%eax\n    10fa:\t74 0a                \tje     1106 <ipmovie_read_header+0x200>\n    10fc:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n    1101:\te9 9c 03 00 00       \tjmpq   14a2 <ipmovie_read_header+0x59c>\n    1106:\t48 8d 44 24 2c       \tlea    0x2c(%rsp),%rax\n    110b:\t48 83 c0 02          \tadd    $0x2,%rax\n    110f:\t0f b7 00             \tmovzwl (%rax),%eax\n    1112:\t0f b7 c0             \tmovzwl %ax,%eax\n    1115:\t89 84 24 a4 00 00 00 \tmov    %eax,0xa4(%rsp)\n    111c:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    1123:\t00 \n    1124:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1129:\t48 c7 c6 fc ff ff ff \tmov    $0xfffffffffffffffc,%rsi\n    1130:\t48 89 c7             \tmov    %rax,%rdi\n    1133:\te8 00 00 00 00       \tcallq  1138 <ipmovie_read_header+0x232>\n    1138:\t83 bc 24 a4 00 00 00 \tcmpl   $0x3,0xa4(%rsp)\n    113f:\t03 \n    1140:\t75 14                \tjne    1156 <ipmovie_read_header+0x250>\n    1142:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    1149:\t00 \n    114a:\tc7 80 44 04 00 00 00 \tmovl   $0x0,0x444(%rax)\n    1151:\t00 00 00 \n    1154:\teb 2e                \tjmp    1184 <ipmovie_read_header+0x27e>\n    1156:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n    115b:\t48 8b 8c 24 a8 00 00 \tmov    0xa8(%rsp),%rcx\n    1162:\t00 \n    1163:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    116a:\t00 \n    116b:\t48 89 ce             \tmov    %rcx,%rsi\n    116e:\t48 89 c7             \tmov    %rax,%rdi\n    1171:\te8 46 f3 ff ff       \tcallq  4bc <process_ipmovie_chunk>\n    1176:\t85 c0                \ttest   %eax,%eax\n    1178:\t74 0a                \tje     1184 <ipmovie_read_header+0x27e>\n    117a:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n    117f:\te9 1e 03 00 00       \tjmpq   14a2 <ipmovie_read_header+0x59c>\n    1184:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1189:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    118e:\t48 89 c7             \tmov    %rax,%rdi\n    1191:\te8 00 00 00 00       \tcallq  1196 <ipmovie_read_header+0x290>\n    1196:\t48 89 84 24 98 00 00 \tmov    %rax,0x98(%rsp)\n    119d:\t00 \n    119e:\t48 83 bc 24 98 00 00 \tcmpq   $0x0,0x98(%rsp)\n    11a5:\t00 00 \n    11a7:\t75 0a                \tjne    11b3 <ipmovie_read_header+0x2ad>\n    11a9:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    11ae:\te9 ef 02 00 00       \tjmpq   14a2 <ipmovie_read_header+0x59c>\n    11b3:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    11ba:\t00 \n    11bb:\tb9 40 42 0f 00       \tmov    $0xf4240,%ecx\n    11c0:\tba 01 00 00 00       \tmov    $0x1,%edx\n    11c5:\tbe 3f 00 00 00       \tmov    $0x3f,%esi\n    11ca:\t48 89 c7             \tmov    %rax,%rdi\n    11cd:\te8 00 00 00 00       \tcallq  11d2 <ipmovie_read_header+0x2cc>\n    11d2:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    11d9:\t00 \n    11da:\t8b 10                \tmov    (%rax),%edx\n    11dc:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    11e3:\t00 \n    11e4:\t89 90 4c 04 00 00    \tmov    %edx,0x44c(%rax)\n    11ea:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    11f1:\t00 \n    11f2:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    11f6:\tc7 40 0c 00 00 00 00 \tmovl   $0x0,0xc(%rax)\n    11fd:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    1204:\t00 \n    1205:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1209:\tc7 40 38 28 00 00 00 \tmovl   $0x28,0x38(%rax)\n    1210:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    1217:\t00 \n    1218:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    121c:\tc7 40 3c 00 00 00 00 \tmovl   $0x0,0x3c(%rax)\n    1223:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    122a:\t00 \n    122b:\t8b 50 1c             \tmov    0x1c(%rax),%edx\n    122e:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    1235:\t00 \n    1236:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    123a:\t89 90 94 00 00 00    \tmov    %edx,0x94(%rax)\n    1240:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    1247:\t00 \n    1248:\t8b 50 20             \tmov    0x20(%rax),%edx\n    124b:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    1252:\t00 \n    1253:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1257:\t89 90 98 00 00 00    \tmov    %edx,0x98(%rax)\n    125d:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    1264:\t00 \n    1265:\t8b 50 18             \tmov    0x18(%rax),%edx\n    1268:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    126f:\t00 \n    1270:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1274:\t89 90 70 03 00 00    \tmov    %edx,0x370(%rax)\n    127a:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    1281:\t00 \n    1282:\t8b 80 44 04 00 00    \tmov    0x444(%rax),%eax\n    1288:\t85 c0                \ttest   %eax,%eax\n    128a:\t0f 84 0d 02 00 00    \tje     149d <ipmovie_read_header+0x597>\n    1290:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1295:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    129a:\t48 89 c7             \tmov    %rax,%rdi\n    129d:\te8 00 00 00 00       \tcallq  12a2 <ipmovie_read_header+0x39c>\n    12a2:\t48 89 84 24 98 00 00 \tmov    %rax,0x98(%rsp)\n    12a9:\t00 \n    12aa:\t48 83 bc 24 98 00 00 \tcmpq   $0x0,0x98(%rsp)\n    12b1:\t00 00 \n    12b3:\t75 0a                \tjne    12bf <ipmovie_read_header+0x3b9>\n    12b5:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    12ba:\te9 e3 01 00 00       \tjmpq   14a2 <ipmovie_read_header+0x59c>\n    12bf:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    12c6:\t00 \n    12c7:\t8b 90 40 04 00 00    \tmov    0x440(%rax),%edx\n    12cd:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    12d4:\t00 \n    12d5:\t89 d1                \tmov    %edx,%ecx\n    12d7:\tba 01 00 00 00       \tmov    $0x1,%edx\n    12dc:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    12e1:\t48 89 c7             \tmov    %rax,%rdi\n    12e4:\te8 00 00 00 00       \tcallq  12e9 <ipmovie_read_header+0x3e3>\n    12e9:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    12f0:\t00 \n    12f1:\t8b 10                \tmov    (%rax),%edx\n    12f3:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    12fa:\t00 \n    12fb:\t89 90 50 04 00 00    \tmov    %edx,0x450(%rax)\n    1301:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    1308:\t00 \n    1309:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    130d:\tc7 40 0c 01 00 00 00 \tmovl   $0x1,0xc(%rax)\n    1314:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    131b:\t00 \n    131c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1320:\t48 8b 94 24 b0 00 00 \tmov    0xb0(%rsp),%rdx\n    1327:\t00 \n    1328:\t8b 92 44 04 00 00    \tmov    0x444(%rdx),%edx\n    132e:\t89 50 38             \tmov    %edx,0x38(%rax)\n    1331:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    1338:\t00 \n    1339:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    133d:\tc7 40 3c 00 00 00 00 \tmovl   $0x0,0x3c(%rax)\n    1344:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    134b:\t00 \n    134c:\t8b 90 3c 04 00 00    \tmov    0x43c(%rax),%edx\n    1352:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    1359:\t00 \n    135a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    135e:\t89 90 d4 01 00 00    \tmov    %edx,0x1d4(%rax)\n    1364:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    136b:\t00 \n    136c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1370:\t8b 80 d4 01 00 00    \tmov    0x1d4(%rax),%eax\n    1376:\t83 f8 01             \tcmp    $0x1,%eax\n    1379:\t75 07                \tjne    1382 <ipmovie_read_header+0x47c>\n    137b:\tba 04 00 00 00       \tmov    $0x4,%edx\n    1380:\teb 05                \tjmp    1387 <ipmovie_read_header+0x481>\n    1382:\tba 03 00 00 00       \tmov    $0x3,%edx\n    1387:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    138e:\t00 \n    138f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1393:\t48 89 90 f0 01 00 00 \tmov    %rdx,0x1f0(%rax)\n    139a:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    13a1:\t00 \n    13a2:\t8b 90 40 04 00 00    \tmov    0x440(%rax),%edx\n    13a8:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    13af:\t00 \n    13b0:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    13b4:\t89 90 d0 01 00 00    \tmov    %edx,0x1d0(%rax)\n    13ba:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    13c1:\t00 \n    13c2:\t8b 90 38 04 00 00    \tmov    0x438(%rax),%edx\n    13c8:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    13cf:\t00 \n    13d0:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    13d4:\t89 90 70 03 00 00    \tmov    %edx,0x370(%rax)\n    13da:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    13e1:\t00 \n    13e2:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    13e6:\t8b 90 d4 01 00 00    \tmov    0x1d4(%rax),%edx\n    13ec:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    13f3:\t00 \n    13f4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    13f8:\t8b 80 d0 01 00 00    \tmov    0x1d0(%rax),%eax\n    13fe:\t89 d1                \tmov    %edx,%ecx\n    1400:\t0f af c8             \timul   %eax,%ecx\n    1403:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    140a:\t00 \n    140b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    140f:\t8b 90 70 03 00 00    \tmov    0x370(%rax),%edx\n    1415:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    141c:\t00 \n    141d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1421:\t0f af d1             \timul   %ecx,%edx\n    1424:\t89 50 60             \tmov    %edx,0x60(%rax)\n    1427:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    142e:\t00 \n    142f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1433:\t8b 40 38             \tmov    0x38(%rax),%eax\n    1436:\t3d 01 40 01 00       \tcmp    $0x14001,%eax\n    143b:\t75 27                \tjne    1464 <ipmovie_read_header+0x55e>\n    143d:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    1444:\t00 \n    1445:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1449:\t8b 40 60             \tmov    0x60(%rax),%eax\n    144c:\t48 8b 94 24 98 00 00 \tmov    0x98(%rsp),%rdx\n    1453:\t00 \n    1454:\t48 8b 52 08          \tmov    0x8(%rdx),%rdx\n    1458:\t89 c1                \tmov    %eax,%ecx\n    145a:\tc1 e9 1f             \tshr    $0x1f,%ecx\n    145d:\t01 c8                \tadd    %ecx,%eax\n    145f:\td1 f8                \tsar    %eax\n    1461:\t89 42 60             \tmov    %eax,0x60(%rdx)\n    1464:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    146b:\t00 \n    146c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1470:\t8b 88 d4 01 00 00    \tmov    0x1d4(%rax),%ecx\n    1476:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    147d:\t00 \n    147e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1482:\t8b 90 70 03 00 00    \tmov    0x370(%rax),%edx\n    1488:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    148f:\t00 \n    1490:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1494:\t0f af d1             \timul   %ecx,%edx\n    1497:\t89 90 e4 01 00 00    \tmov    %edx,0x1e4(%rax)\n    149d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    14a2:\t48 81 c4 c8 00 00 00 \tadd    $0xc8,%rsp\n    14a9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ipmovie_read_header(__int64 a1) {\n  __int64 v2;\n  __int64 v3;\n  char dest;\n  _BYTE v5[Number];\n  char v6[Number];\n  unsigned __int16 v7;\n  char <span class=\"supfact\">v8</span>[Number];\n  __int64 v9;\n  __int64 v10;\n  int v11;\n  __int64 v12;\n  __int64 v13;\n  int i;\n  v13 = *(_QWORD *)(a1 + Number);\n  v12 = *(_QWORD *)(a1 + Number);\n  avio_read(v12, &dest, Number L);\n  while (memcmp(&dest, &signature, Number)) {\n    memmove(&dest, v5, Number);\n    v5[Number] = avio_r8(v12);\n    if ((unsigned int)url_feof(v12))\n      return Number L;\n  }\n  *(_DWORD *)(v13 + Number) = Number;\n  *(_QWORD *)(v13 + Number) = Number L;\n  *(_QWORD *)(v13 + Number) = Number L;\n  *(_QWORD *)(v13 + Number) = *(_QWORD *)(v13 + Number);\n  *(_QWORD *)(v13 + Number) = *(_QWORD *)(v13 + Number);\n  v9 = v12;\n  v2 = avio_seek(v12, Number L, Number L);\n  *(_QWORD *)(v13 + Number) = v2 + Number;\n  for (i = Number; i <= Number; ++i)\n    *(_DWORD *)(v13 + Number * (i + Number L)) = Number;\n  if ((unsigned int)process_ipmovie_chunk(\n          v13, v12, (__int64)<span class=\"supfact\">v8</span>) != Number)\n    return Number L;\n  if ((unsigned int)avio_read(v12, v6, Number L) != Number)\n    return Number L;\n  v11 = v7;\n  avio_seek(v12, Number, Number L);\n  if (v11 == Number) {\n    *(_DWORD *)(v13 + Number) = Number;\n  } else if ((unsigned int)process_ipmovie_chunk(v13, v12,\n                                                 (__int64)<span class=\"supfact\">v8</span>)) {\n    return Number L;\n  }\n  v10 = avformat_new_stream(a1, Number L);\n  if (!v10)\n    return Number L;\n  avpriv_set_pts_info(v10, Number L, Number L, Number L);\n  *(_DWORD *)(v13 + Number) = *(_DWORD *)v10;\n  *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) = *(_DWORD *)(v13 + Number);\n  *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) = *(_DWORD *)(v13 + Number);\n  *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) = *(_DWORD *)(v13 + Number);\n  if (*(_DWORD *)(v13 + Number)) {\n    v10 = avformat_new_stream(a1, Number L);\n    if (!v10)\n      return Number L;\n    avpriv_set_pts_info(v10, Number L, Number L,\n                        *(unsigned int *)(v13 + Number));\n    *(_DWORD *)(v13 + Number) = *(_DWORD *)v10;\n    *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) = Number;\n    *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) =\n        *(_DWORD *)(v13 + Number);\n    *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) = Number;\n    *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) =\n        *(_DWORD *)(v13 + Number);\n    if (*(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) == Number)\n      v3 = Number L;\n    else\n      v3 = Number L;\n    *(_QWORD *)(*(_QWORD *)(v10 + Number) + Number L) = v3;\n    *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) =\n        *(_DWORD *)(v13 + Number);\n    *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) =\n        *(_DWORD *)(v13 + Number);\n    *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) =\n        *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) *\n        *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) *\n        *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L);\n    if (*(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) == Number)\n      *(int *)(*(_QWORD *)(v10 + Number) + Number L) /= Number;\n    *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) =\n        *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L) *\n        *(_DWORD *)(*(_QWORD *)(v10 + Number) + Number L);\n  }\n  return Number L;\n}", "code_t": "int __cdecl ipmovie_read_header(AVFormatContext_0 *s) {\n  __int64 v2;\n  uint64_t v3;\n  uint8_t signature_buffer[Number];\n  unsigned __int8 chunk_preamble[Number];\n  AVPacket_0 <span class=\"supfact\">pkt</span>;\n  AVIOContext_0 *v7;\n  AVStream_0 *st;\n  int chunk_type;\n  AVIOContext_0 *pb;\n  IPMVEContext_0 *ipmovie;\n  int i;\n  ipmovie = (IPMVEContext_0 *)s->priv_data;\n  pb = s->pb;\n  avio_read(pb, signature_buffer, Number L);\n  while (memcmp(signature_buffer, signature, Number)) {\n    memmove(signature_buffer, &signature_buffer[Number], Number);\n    signature_buffer[Number] = avio_r8(pb);\n    if ((unsigned int)url_feof(pb))\n      return Number;\n  }\n  ipmovie->audio_frame_count = Number;\n  ipmovie->video_pts = Number L;\n  ipmovie->decode_map_chunk_offset = Number L;\n  ipmovie->video_chunk_offset = ipmovie->decode_map_chunk_offset;\n  ipmovie->audio_chunk_offset = ipmovie->video_chunk_offset;\n  v7 = pb;\n  v2 = avio_seek(pb, Number L, Number L);\n  ipmovie->next_chunk_offset = v2 + Number;\n  for (i = Number; i <= Number; ++i)\n    ipmovie->palette[i] = Number;\n  if (process_ipmovie_chunk(ipmovie, pb, &<span class=\"supfact\">pkt</span>) != Number)\n    return Number;\n  if ((unsigned int)avio_read(pb, chunk_preamble, Number L) != Number)\n    return Number;\n  chunk_type = *(unsigned __int16 *)&chunk_preamble[Number];\n  avio_seek(pb, Number, Number L);\n  if (chunk_type == Number) {\n    ipmovie->audio_type = AV_CODEC_ID_NONE;\n  } else if (process_ipmovie_chunk(ipmovie, pb, &<span class=\"supfact\">pkt</span>)) {\n    return Number;\n  }\n  st = (AVStream_0 *)avformat_new_stream(s, Number L);\n  if (!st)\n    return Number;\n  avpriv_set_pts_info(st, Number L, Number L, Number L);\n  ipmovie->video_stream_index = st->index;\n  st->codec->codec_type = AVMEDIA_TYPE_VIDEO;\n  st->codec->codec_id = AV_CODEC_ID_INTERPLAY_VIDEO;\n  st->codec->codec_tag = Number;\n  st->codec->width = ipmovie->video_width;\n  st->codec->height = ipmovie->video_height;\n  st->codec->bits_per_coded_sample = ipmovie->video_bpp;\n  if (ipmovie->audio_type) {\n    st = (AVStream_0 *)avformat_new_stream(s, Number L);\n    if (!st)\n      return Number;\n    avpriv_set_pts_info(st, Number L, Number L, ipmovie->audio_sample_rate);\n    ipmovie->audio_stream_index = st->index;\n    st->codec->codec_type = AVMEDIA_TYPE_AUDIO;\n    st->codec->codec_id = ipmovie->audio_type;\n    st->codec->codec_tag = Number;\n    st->codec->channels = ipmovie->audio_channels;\n    if (st->codec->channels == Number)\n      v3 = Number L;\n    else\n      v3 = Number L;\n    st->codec->channel_layout = v3;\n    st->codec->sample_rate = ipmovie->audio_sample_rate;\n    st->codec->bits_per_coded_sample = ipmovie->audio_bits;\n    st->codec->bit_rate = st->codec->sample_rate * st->codec->channels *\n                          st->codec->bits_per_coded_sample;\n    if (st->codec->codec_id == AV_CODEC_ID_INTERPLAY_DPCM)\n      st->codec->bit_rate /= Number;\n    st->codec->block_align =\n        st->codec->channels * st->codec->bits_per_coded_sample;\n  }\n  return Number;\n}", "var": [{"name": "v8", "type": "struct AVPacket_0 { AVBufferRef_0 * buf; int64_t pts; int64_t dts; uint8_t * data; int size; int stream_index; int flags; PADDING (4); AVPacketSideData_0 * side_data; int side_data_elems; PADDING (4); int64_t duration; int64_t pos; int64_t convergence_duration; }", "pred_name": "pkt", "ref_name": "pkt", "ref_type": "struct AVPacket_0 { AVBufferRef_0 * buf; int64_t pts; int64_t dts; uint8_t * data; int size; int stream_index; int flags; PADDING (4); AVPacketSideData_0 * side_data; int side_data_elems; int duration; void (*)(AVPacket *) destruct; void * priv; int64_t pos; int64_t convergence_duration; }"}], "body_in_train": true}, {"repo_owner": "kuraoka", "repo_name": "wiotpjp-robotarm-test", "path": "kuraoka/wiotpjp-robotarm-test/ab699615ca6f2d1d9afdb03be630e55158047f1588d53cbb41d8059f6b995e4f", "path_in_repo": "kuraoka/wiotpjp-robotarm-test/app/node_modules/mongodb/node_modules/kerberos/build/Release/obj.target/kerberos/lib/kerberosgss.o", "objdump": "0000000000000000 <authenticate_gss_server_init>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 40          \tsub    $0x40,%rsp\n   8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   c:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  10:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  17:\t00 \n  18:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  1f:\t00 \n  20:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  27:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  2b:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  32:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  36:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n  3d:\t00 \n  3e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  42:\t48 c7 40 10 00 00 00 \tmovq   $0x0,0x10(%rax)\n  49:\t00 \n  4a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  4e:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n  55:\t00 \n  56:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  5a:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n  61:\t00 \n  62:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  66:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n  6d:\t00 \n  6e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  72:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n  79:\t00 \n  7a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  7e:\t48 c7 40 38 00 00 00 \tmovq   $0x0,0x38(%rax)\n  85:\t00 \n  86:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  8a:\t48 89 c7             \tmov    %rax,%rdi\n  8d:\te8 00 00 00 00       \tcallq  92 <authenticate_gss_server_init+0x92>\n  92:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  96:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  9b:\t0f 84 bd 00 00 00    \tje     15e <authenticate_gss_server_init+0x15e>\n  a1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  a5:\t48 89 c7             \tmov    %rax,%rdi\n  a8:\te8 00 00 00 00       \tcallq  ad <authenticate_gss_server_init+0xad>\n  ad:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  b1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  b5:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  b9:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  bd:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n  c1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c8 <authenticate_gss_server_init+0xc8>\n  c8:\t48 8b 10             \tmov    (%rax),%rdx\n  cb:\t48 8d 75 d0          \tlea    -0x30(%rbp),%rsi\n  cf:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  d3:\t48 89 c7             \tmov    %rax,%rdi\n  d6:\te8 00 00 00 00       \tcallq  db <authenticate_gss_server_init+0xdb>\n  db:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  de:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  e1:\t66 b8 00 00          \tmov    $0x0,%ax\n  e5:\t85 c0                \ttest   %eax,%eax\n  e7:\t74 18                \tje     101 <authenticate_gss_server_init+0x101>\n  e9:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  ec:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  ef:\t89 d6                \tmov    %edx,%esi\n  f1:\t89 c7                \tmov    %eax,%edi\n  f3:\te8 00 00 00 00       \tcallq  f8 <authenticate_gss_server_init+0xf8>\n  f8:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n  ff:\teb 5e                \tjmp    15f <authenticate_gss_server_init+0x15f>\n 101:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 105:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n 109:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 10d:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n 111:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n 115:\t6a 00                \tpushq  $0x0\n 117:\t6a 00                \tpushq  $0x0\n 119:\t49 89 d1             \tmov    %rdx,%r9\n 11c:\t41 b8 02 00 00 00    \tmov    $0x2,%r8d\n 122:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 127:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n 12c:\t48 89 c7             \tmov    %rax,%rdi\n 12f:\te8 00 00 00 00       \tcallq  134 <authenticate_gss_server_init+0x134>\n 134:\t48 83 c4 10          \tadd    $0x10,%rsp\n 138:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 13b:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 13e:\t66 b8 00 00          \tmov    $0x0,%ax\n 142:\t85 c0                \ttest   %eax,%eax\n 144:\t74 18                \tje     15e <authenticate_gss_server_init+0x15e>\n 146:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n 149:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 14c:\t89 d6                \tmov    %edx,%esi\n 14e:\t89 c7                \tmov    %eax,%edi\n 150:\te8 00 00 00 00       \tcallq  155 <authenticate_gss_server_init+0x155>\n 155:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n 15c:\teb 01                \tjmp    15f <authenticate_gss_server_init+0x15f>\n 15e:\t90                   \tnop\n 15f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 162:\tc9                   \tleaveq \n 163:\tc3                   \tretq   ", "code_s": "__int64 __fastcall authenticate_gss_server_init(const char *a1, _QWORD *a2) {\n  unsigned int v2;\n  unsigned int v3;\n  size_t <span class=\"supfact\">v5</span>;\n  const char *v6;\n  unsigned int v7;\n  unsigned int v8;\n  unsigned int v10;\n  <span class=\"supfact\">v5</span> = Number L;\n  v6 = Number L;\n  v10 = Number;\n  *a2 = Number L;\n  a2[Number] = Number L;\n  a2[Number] = Number L;\n  a2[Number] = Number L;\n  a2[Number] = Number L;\n  a2[Number] = Number L;\n  a2[Number] = Number L;\n  a2[Number] = Number L;\n  if (strlen(a1)) {\n    <span class=\"supfact\">v5</span> = strlen(a1);\n    v6 = a1;\n    v2 = gss_import_name(&v7, &<span class=\"supfact\">v5</span>, GSS_C_NT_HOSTBASED_SERVICE,\n                         a2 + Number);\n    v8 = v2;\n    LOWORD(v2) = Number;\n    if (v2 || (v3 = gss_acquire_cred(&v7, a2[Number], Number, Number L,\n                                     Number L, a2 + Number, Number L, Number L),\n               v8 = v3, LOWORD(v3) = Number, v3)) {\n      set_gss_error(v8, v7);\n      v10 = Number;\n    }\n  }\n  return v10;\n}", "code_t": "int __cdecl authenticate_gss_server_init(const char *service,\n                                         gss_server_state *state) {\n  OM_uint32 v2;\n  OM_uint32 v3;\n  gss_buffer_desc <span class=\"supfact\">name_token</span>;\n  OM_uint32 min_stat;\n  OM_uint32 maj_stat;\n  int ret;\n  <span class=\"supfact\">name_token</span>.length = Number L;\n  <span class=\"supfact\">name_token</span>.value = Number L;\n  ret = Number;\n  state->context = Number L;\n  state->server_name = Number L;\n  state->client_name = Number L;\n  state->server_creds = Number L;\n  state->client_creds = Number L;\n  state->username = Number L;\n  state->targetname = Number L;\n  state->response = Number L;\n  if (strlen(service)) {\n    <span class=\"supfact\">name_token</span>.length = strlen(service);\n    <span class=\"supfact\">name_token</span>.value = (void *)service;\n    v2 = gss_import_name(&min_stat, &<span class=\"supfact\">name_token</span>,\n                         GSS_C_NT_HOSTBASED_SERVICE, &state->server_name);\n    maj_stat = v2;\n    LOWORD(v2) = Number;\n    if (v2 || (v3 = gss_acquire_cred(&min_stat, state->server_name, Number,\n                                     Number L, Number L, &state->server_creds,\n                                     Number L, Number L),\n               maj_stat = v3, LOWORD(v3) = Number, v3)) {\n      set_gss_error(maj_stat, min_stat);\n      ret = Number;\n    }\n  }\n  return ret;\n}", "var": [{"name": "v5", "type": "__unk__", "pred_name": "__unk__", "ref_name": "name_token", "ref_type": "struct gss_buffer_desc { size_t length; void * value; }"}], "body_in_train": false}, {"repo_owner": "zencodex", "repo_name": "csip", "path": "zencodex/csip/5af91a3f00db7008256c83a0d6cd3b74d9b2ea37746ef9fc6a10992798d41c52", "path_in_repo": "zencodex/csip/CSipSimple/jni/pjsip/sources/pjmedia/build/output/pjmedia-x86_64-unknown-linux-gnu/stream.o", "objdump": "000000000000060b <get_frame>:\n     60b:\t55                   \tpush   %rbp\n     60c:\t48 89 e5             \tmov    %rsp,%rbp\n     60f:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n     616:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n     61d:\t48 89 b5 30 ff ff ff \tmov    %rsi,-0xd0(%rbp)\n     624:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     62b:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n     62f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     633:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     637:\t48 8b 80 30 01 00 00 \tmov    0x130(%rax),%rax\n     63e:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     642:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     646:\t8b 40 10             \tmov    0x10(%rax),%eax\n     649:\t85 c0                \ttest   %eax,%eax\n     64b:\t74 17                \tje     664 <get_frame+0x59>\n     64d:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     654:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     65a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     65f:\te9 b1 07 00 00       \tjmpq   e15 <get_frame+0x80a>\n     664:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     668:\t48 8b 80 e0 05 00 00 \tmov    0x5e0(%rax),%rax\n     66f:\t48 89 c7             \tmov    %rax,%rdi\n     672:\te8 00 00 00 00       \tcallq  677 <get_frame+0x6c>\n     677:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     67b:\t48 05 b8 00 00 00    \tadd    $0xb8,%rax\n     681:\t48 89 c7             \tmov    %rax,%rdi\n     684:\te8 d4 fb ff ff       \tcallq  25d <PJMEDIA_PIA_SPF>\n     689:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n     68c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     690:\t0f b7 80 84 01 00 00 \tmovzwl 0x184(%rax),%eax\n     697:\t0f b7 d0             \tmovzwl %ax,%edx\n     69a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     69e:\t8b 80 70 01 00 00    \tmov    0x170(%rax),%eax\n     6a4:\t0f af d0             \timul   %eax,%edx\n     6a7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     6ab:\t8b 80 74 01 00 00    \tmov    0x174(%rax),%eax\n     6b1:\t0f af c2             \timul   %edx,%eax\n     6b4:\t89 c0                \tmov    %eax,%eax\n     6b6:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n     6bd:\t48 c1 e8 20          \tshr    $0x20,%rax\n     6c1:\tc1 e8 06             \tshr    $0x6,%eax\n     6c4:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n     6c7:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     6ce:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     6d2:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     6d6:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     6dd:\te9 bd 06 00 00       \tjmpq   d9f <get_frame+0x794>\n     6e2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6e6:\t48 8b 70 18          \tmov    0x18(%rax),%rsi\n     6ea:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     6ee:\t48 8b 80 e8 05 00 00 \tmov    0x5e8(%rax),%rax\n     6f5:\t48 8d 7d b4          \tlea    -0x4c(%rbp),%rdi\n     6f9:\t48 8d 4d c7          \tlea    -0x39(%rbp),%rcx\n     6fd:\t48 8d 55 b8          \tlea    -0x48(%rbp),%rdx\n     701:\t49 89 f8             \tmov    %rdi,%r8\n     704:\t48 89 c7             \tmov    %rax,%rdi\n     707:\te8 00 00 00 00       \tcallq  70c <get_frame+0x101>\n     70c:\t0f b6 45 c7          \tmovzbl -0x39(%rbp),%eax\n     710:\t84 c0                \ttest   %al,%al\n     712:\t0f 85 6a 01 00 00    \tjne    882 <get_frame+0x277>\n     718:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     71c:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n     723:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     727:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     72b:\t48 85 c0             \ttest   %rax,%rax\n     72e:\t0f 84 9a 00 00 00    \tje     7ce <get_frame+0x1c3>\n     734:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     738:\t0f b6 80 91 01 00 00 \tmovzbl 0x191(%rax),%eax\n     73f:\t83 e0 08             \tand    $0x8,%eax\n     742:\t84 c0                \ttest   %al,%al\n     744:\t0f 84 84 00 00 00    \tje     7ce <get_frame+0x1c3>\n     74a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     74e:\t8b 90 c0 05 00 00    \tmov    0x5c0(%rax),%edx\n     754:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     758:\t8b 80 c4 05 00 00    \tmov    0x5c4(%rax),%eax\n     75e:\t39 c2                \tcmp    %eax,%edx\n     760:\t73 6c                \tjae    7ce <get_frame+0x1c3>\n     762:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     765:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n     769:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     76d:\t48 01 d0             \tadd    %rdx,%rax\n     770:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n     777:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     77e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     782:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     785:\t01 d2                \tadd    %edx,%edx\n     787:\t89 d2                \tmov    %edx,%edx\n     789:\t48 29 d0             \tsub    %rdx,%rax\n     78c:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n     790:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     794:\t89 c1                \tmov    %eax,%ecx\n     796:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     79a:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n     7a1:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n     7a8:\t89 ce                \tmov    %ecx,%esi\n     7aa:\t48 89 c7             \tmov    %rax,%rdi\n     7ad:\te8 93 fc ff ff       \tcallq  445 <pjmedia_codec_recover>\n     7b2:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     7b5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     7b9:\t8b 80 c0 05 00 00    \tmov    0x5c0(%rax),%eax\n     7bf:\t8d 50 01             \tlea    0x1(%rax),%edx\n     7c2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     7c6:\t89 90 c0 05 00 00    \tmov    %edx,0x5c0(%rax)\n     7cc:\teb 07                \tjmp    7d5 <get_frame+0x1ca>\n     7ce:\tc7 45 f8 ff ff ff ff \tmovl   $0xffffffff,-0x8(%rbp)\n     7d5:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n     7d9:\t74 1e                \tje     7f9 <get_frame+0x1ee>\n     7db:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     7de:\t2b 45 fc             \tsub    -0x4(%rbp),%eax\n     7e1:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     7e4:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n     7e8:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     7ec:\t48 01 ca             \tadd    %rcx,%rdx\n     7ef:\t89 c6                \tmov    %eax,%esi\n     7f1:\t48 89 d7             \tmov    %rdx,%rdi\n     7f4:\te8 b0 f9 ff ff       \tcallq  1a9 <pjmedia_zero_samples>\n     7f9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     7fd:\t0f b6 90 f0 05 00 00 \tmovzbl 0x5f0(%rax),%edx\n     804:\t0f b6 45 c7          \tmovzbl -0x39(%rbp),%eax\n     808:\t38 c2                \tcmp    %al,%dl\n     80a:\t74 5a                \tje     866 <get_frame+0x25b>\n     80c:\te8 00 00 00 00       \tcallq  811 <get_frame+0x206>\n     811:\t83 f8 04             \tcmp    $0x4,%eax\n     814:\t7e 2f                \tjle    845 <get_frame+0x23a>\n     816:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n     81a:\t75 07                \tjne    823 <get_frame+0x218>\n     81c:\tba 00 00 00 00       \tmov    $0x0,%edx\n     821:\teb 05                \tjmp    828 <get_frame+0x21d>\n     823:\tba 00 00 00 00       \tmov    $0x0,%edx\n     828:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     82c:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n     833:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     838:\t48 89 c7             \tmov    %rax,%rdi\n     83b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     840:\te8 00 00 00 00       \tcallq  845 <get_frame+0x23a>\n     845:\t0f b6 55 c7          \tmovzbl -0x39(%rbp),%edx\n     849:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     84d:\t88 90 f0 05 00 00    \tmov    %dl,0x5f0(%rax)\n     853:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     857:\tc7 80 f4 05 00 00 01 \tmovl   $0x1,0x5f4(%rax)\n     85e:\t00 00 00 \n     861:\te9 33 05 00 00       \tjmpq   d99 <get_frame+0x78e>\n     866:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     86a:\t8b 80 f4 05 00 00    \tmov    0x5f4(%rax),%eax\n     870:\t8d 50 01             \tlea    0x1(%rax),%edx\n     873:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     877:\t89 90 f4 05 00 00    \tmov    %edx,0x5f4(%rax)\n     87d:\te9 17 05 00 00       \tjmpq   d99 <get_frame+0x78e>\n     882:\t0f b6 45 c7          \tmovzbl -0x39(%rbp),%eax\n     886:\t3c 03                \tcmp    $0x3,%al\n     888:\t0f 85 c2 01 00 00    \tjne    a50 <get_frame+0x445>\n     88e:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     895:\t00 \n     896:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     89a:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n     8a1:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     8a5:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     8a9:\t48 85 c0             \ttest   %rax,%rax\n     8ac:\t0f 84 d7 00 00 00    \tje     989 <get_frame+0x37e>\n     8b2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     8b6:\t0f b6 80 91 01 00 00 \tmovzbl 0x191(%rax),%eax\n     8bd:\t83 e0 08             \tand    $0x8,%eax\n     8c0:\t84 c0                \ttest   %al,%al\n     8c2:\t0f 84 c1 00 00 00    \tje     989 <get_frame+0x37e>\n     8c8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     8cc:\t8b 90 c0 05 00 00    \tmov    0x5c0(%rax),%edx\n     8d2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     8d6:\t8b 80 c4 05 00 00    \tmov    0x5c4(%rax),%eax\n     8dc:\t39 c2                \tcmp    %eax,%edx\n     8de:\t0f 83 a5 00 00 00    \tjae    989 <get_frame+0x37e>\n     8e4:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     8e7:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n     8eb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     8ef:\t48 01 d0             \tadd    %rdx,%rax\n     8f2:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n     8f9:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     900:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     904:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     907:\t01 d2                \tadd    %edx,%edx\n     909:\t89 d2                \tmov    %edx,%edx\n     90b:\t48 29 d0             \tsub    %rdx,%rax\n     90e:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n     912:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     916:\t89 c1                \tmov    %eax,%ecx\n     918:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     91c:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n     923:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n     92a:\t89 ce                \tmov    %ecx,%esi\n     92c:\t48 89 c7             \tmov    %rax,%rdi\n     92f:\te8 11 fb ff ff       \tcallq  445 <pjmedia_codec_recover>\n     934:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     937:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n     93b:\t75 43                \tjne    980 <get_frame+0x375>\n     93d:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     940:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n     943:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     947:\t8b 80 c0 05 00 00    \tmov    0x5c0(%rax),%eax\n     94d:\t8d 50 01             \tlea    0x1(%rax),%edx\n     950:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     954:\t89 90 c0 05 00 00    \tmov    %edx,0x5c0(%rax)\n     95a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     95d:\t3b 45 d4             \tcmp    -0x2c(%rbp),%eax\n     960:\t73 1f                \tjae    981 <get_frame+0x376>\n     962:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     966:\t8b 90 c0 05 00 00    \tmov    0x5c0(%rax),%edx\n     96c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     970:\t8b 80 c4 05 00 00    \tmov    0x5c4(%rax),%eax\n     976:\t39 c2                \tcmp    %eax,%edx\n     978:\t0f 82 66 ff ff ff    \tjb     8e4 <get_frame+0x2d9>\n     97e:\teb 01                \tjmp    981 <get_frame+0x376>\n     980:\t90                   \tnop\n     981:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     988:\t00 \n     989:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     98c:\t3b 45 d4             \tcmp    -0x2c(%rbp),%eax\n     98f:\t73 24                \tjae    9b5 <get_frame+0x3aa>\n     991:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     994:\t2b 45 fc             \tsub    -0x4(%rbp),%eax\n     997:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     99a:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n     99e:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     9a2:\t48 01 ca             \tadd    %rcx,%rdx\n     9a5:\t89 c6                \tmov    %eax,%esi\n     9a7:\t48 89 d7             \tmov    %rdx,%rdi\n     9aa:\te8 fa f7 ff ff       \tcallq  1a9 <pjmedia_zero_samples>\n     9af:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     9b2:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     9b5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     9b9:\t0f b6 90 f0 05 00 00 \tmovzbl 0x5f0(%rax),%edx\n     9c0:\t0f b6 45 c7          \tmovzbl -0x39(%rbp),%eax\n     9c4:\t38 c2                \tcmp    %al,%dl\n     9c6:\t74 6c                \tje     a34 <get_frame+0x429>\n     9c8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     9cc:\t48 8b 80 e8 05 00 00 \tmov    0x5e8(%rax),%rax\n     9d3:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n     9da:\t48 89 d6             \tmov    %rdx,%rsi\n     9dd:\t48 89 c7             \tmov    %rax,%rdi\n     9e0:\te8 00 00 00 00       \tcallq  9e5 <get_frame+0x3da>\n     9e5:\te8 00 00 00 00       \tcallq  9ea <get_frame+0x3df>\n     9ea:\t83 f8 04             \tcmp    $0x4,%eax\n     9ed:\t7e 24                \tjle    a13 <get_frame+0x408>\n     9ef:\t8b 55 80             \tmov    -0x80(%rbp),%edx\n     9f2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     9f6:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n     9fd:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n     a01:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a06:\t48 89 c7             \tmov    %rax,%rdi\n     a09:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a0e:\te8 00 00 00 00       \tcallq  a13 <get_frame+0x408>\n     a13:\t0f b6 55 c7          \tmovzbl -0x39(%rbp),%edx\n     a17:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     a1b:\t88 90 f0 05 00 00    \tmov    %dl,0x5f0(%rax)\n     a21:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     a25:\tc7 80 f4 05 00 00 01 \tmovl   $0x1,0x5f4(%rax)\n     a2c:\t00 00 00 \n     a2f:\te9 77 03 00 00       \tjmpq   dab <get_frame+0x7a0>\n     a34:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     a38:\t8b 80 f4 05 00 00    \tmov    0x5f4(%rax),%eax\n     a3e:\t8d 50 01             \tlea    0x1(%rax),%edx\n     a41:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     a45:\t89 90 f4 05 00 00    \tmov    %edx,0x5f4(%rax)\n     a4b:\te9 5b 03 00 00       \tjmpq   dab <get_frame+0x7a0>\n     a50:\t0f b6 45 c7          \tmovzbl -0x39(%rbp),%eax\n     a54:\t3c 01                \tcmp    $0x1,%al\n     a56:\t0f 84 e3 01 00 00    \tje     c3f <get_frame+0x634>\n     a5c:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     a63:\t00 \n     a64:\t0f b6 45 c7          \tmovzbl -0x39(%rbp),%eax\n     a68:\t3c 02                \tcmp    $0x2,%al\n     a6a:\t74 19                \tje     a85 <get_frame+0x47a>\n     a6c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     a71:\tba 71 02 00 00       \tmov    $0x271,%edx\n     a76:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a7b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     a80:\te8 00 00 00 00       \tcallq  a85 <get_frame+0x47a>\n     a85:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     a89:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n     a90:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     a94:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     a98:\t48 85 c0             \ttest   %rax,%rax\n     a9b:\t0f 84 d7 00 00 00    \tje     b78 <get_frame+0x56d>\n     aa1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     aa5:\t0f b6 80 91 01 00 00 \tmovzbl 0x191(%rax),%eax\n     aac:\t83 e0 08             \tand    $0x8,%eax\n     aaf:\t84 c0                \ttest   %al,%al\n     ab1:\t0f 84 c1 00 00 00    \tje     b78 <get_frame+0x56d>\n     ab7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     abb:\t8b 90 c0 05 00 00    \tmov    0x5c0(%rax),%edx\n     ac1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     ac5:\t8b 80 c4 05 00 00    \tmov    0x5c4(%rax),%eax\n     acb:\t39 c2                \tcmp    %eax,%edx\n     acd:\t0f 83 a5 00 00 00    \tjae    b78 <get_frame+0x56d>\n     ad3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     ad6:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n     ada:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     ade:\t48 01 d0             \tadd    %rdx,%rax\n     ae1:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n     ae8:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     aef:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     af3:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     af6:\t01 d2                \tadd    %edx,%edx\n     af8:\t89 d2                \tmov    %edx,%edx\n     afa:\t48 29 d0             \tsub    %rdx,%rax\n     afd:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n     b01:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     b05:\t89 c1                \tmov    %eax,%ecx\n     b07:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     b0b:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n     b12:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n     b19:\t89 ce                \tmov    %ecx,%esi\n     b1b:\t48 89 c7             \tmov    %rax,%rdi\n     b1e:\te8 22 f9 ff ff       \tcallq  445 <pjmedia_codec_recover>\n     b23:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     b26:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n     b2a:\t75 43                \tjne    b6f <get_frame+0x564>\n     b2c:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     b2f:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n     b32:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     b36:\t8b 80 c0 05 00 00    \tmov    0x5c0(%rax),%eax\n     b3c:\t8d 50 01             \tlea    0x1(%rax),%edx\n     b3f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     b43:\t89 90 c0 05 00 00    \tmov    %edx,0x5c0(%rax)\n     b49:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     b4c:\t3b 45 d4             \tcmp    -0x2c(%rbp),%eax\n     b4f:\t73 1f                \tjae    b70 <get_frame+0x565>\n     b51:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     b55:\t8b 90 c0 05 00 00    \tmov    0x5c0(%rax),%edx\n     b5b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     b5f:\t8b 80 c4 05 00 00    \tmov    0x5c4(%rax),%eax\n     b65:\t39 c2                \tcmp    %eax,%edx\n     b67:\t0f 82 66 ff ff ff    \tjb     ad3 <get_frame+0x4c8>\n     b6d:\teb 01                \tjmp    b70 <get_frame+0x565>\n     b6f:\t90                   \tnop\n     b70:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     b77:\t00 \n     b78:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     b7b:\t3b 45 d4             \tcmp    -0x2c(%rbp),%eax\n     b7e:\t73 24                \tjae    ba4 <get_frame+0x599>\n     b80:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     b83:\t2b 45 fc             \tsub    -0x4(%rbp),%eax\n     b86:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     b89:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n     b8d:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     b91:\t48 01 ca             \tadd    %rcx,%rdx\n     b94:\t89 c6                \tmov    %eax,%esi\n     b96:\t48 89 d7             \tmov    %rdx,%rdi\n     b99:\te8 0b f6 ff ff       \tcallq  1a9 <pjmedia_zero_samples>\n     b9e:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     ba1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     ba4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     ba8:\t0f b6 90 f0 05 00 00 \tmovzbl 0x5f0(%rax),%edx\n     baf:\t0f b6 45 c7          \tmovzbl -0x39(%rbp),%eax\n     bb3:\t38 c2                \tcmp    %al,%dl\n     bb5:\t74 6c                \tje     c23 <get_frame+0x618>\n     bb7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     bbb:\t48 8b 80 e8 05 00 00 \tmov    0x5e8(%rax),%rax\n     bc2:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n     bc9:\t48 89 d6             \tmov    %rdx,%rsi\n     bcc:\t48 89 c7             \tmov    %rax,%rdi\n     bcf:\te8 00 00 00 00       \tcallq  bd4 <get_frame+0x5c9>\n     bd4:\te8 00 00 00 00       \tcallq  bd9 <get_frame+0x5ce>\n     bd9:\t83 f8 04             \tcmp    $0x4,%eax\n     bdc:\t7e 24                \tjle    c02 <get_frame+0x5f7>\n     bde:\t8b 55 80             \tmov    -0x80(%rbp),%edx\n     be1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     be5:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n     bec:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n     bf0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     bf5:\t48 89 c7             \tmov    %rax,%rdi\n     bf8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     bfd:\te8 00 00 00 00       \tcallq  c02 <get_frame+0x5f7>\n     c02:\t0f b6 55 c7          \tmovzbl -0x39(%rbp),%edx\n     c06:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     c0a:\t88 90 f0 05 00 00    \tmov    %dl,0x5f0(%rax)\n     c10:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     c14:\tc7 80 f4 05 00 00 01 \tmovl   $0x1,0x5f4(%rax)\n     c1b:\t00 00 00 \n     c1e:\te9 88 01 00 00       \tjmpq   dab <get_frame+0x7a0>\n     c23:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     c27:\t8b 80 f4 05 00 00    \tmov    0x5f4(%rax),%eax\n     c2d:\t8d 50 01             \tlea    0x1(%rax),%edx\n     c30:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     c34:\t89 90 f4 05 00 00    \tmov    %edx,0x5f4(%rax)\n     c3a:\te9 6c 01 00 00       \tjmpq   dab <get_frame+0x7a0>\n     c3f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     c43:\tc7 80 c0 05 00 00 00 \tmovl   $0x0,0x5c0(%rax)\n     c4a:\t00 00 00 \n     c4d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c51:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     c55:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n     c5c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     c60:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n     c67:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n     c6a:\t89 85 60 ff ff ff    \tmov    %eax,-0xa0(%rbp)\n     c70:\tc7 85 40 ff ff ff 01 \tmovl   $0x1,-0xc0(%rbp)\n     c77:\t00 00 00 \n     c7a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     c7d:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n     c81:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     c85:\t48 01 d0             \tadd    %rdx,%rax\n     c88:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n     c8f:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     c96:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     c9a:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     c9d:\t01 d2                \tadd    %edx,%edx\n     c9f:\t89 d2                \tmov    %edx,%edx\n     ca1:\t48 29 d0             \tsub    %rdx,%rax\n     ca4:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n     ca8:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     cac:\t89 c7                \tmov    %eax,%edi\n     cae:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     cb2:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n     cb9:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n     cc0:\t48 8d b5 40 ff ff ff \tlea    -0xc0(%rbp),%rsi\n     cc7:\t48 89 d1             \tmov    %rdx,%rcx\n     cca:\t89 fa                \tmov    %edi,%edx\n     ccc:\t48 89 c7             \tmov    %rax,%rdi\n     ccf:\te8 37 f7 ff ff       \tcallq  40b <pjmedia_codec_decode>\n     cd4:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     cd7:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n     cdb:\t74 35                \tje     d12 <get_frame+0x707>\n     cdd:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     ce4:\t48 8b 00             \tmov    (%rax),%rax\n     ce7:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n     cea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     cef:\t48 89 c7             \tmov    %rax,%rdi\n     cf2:\te8 ba f8 ff ff       \tcallq  5b1 <stream_perror>\n     cf7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     cfa:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n     cfe:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     d02:\t48 01 c2             \tadd    %rax,%rdx\n     d05:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     d08:\t89 c6                \tmov    %eax,%esi\n     d0a:\t48 89 d7             \tmov    %rdx,%rdi\n     d0d:\te8 97 f4 ff ff       \tcallq  1a9 <pjmedia_zero_samples>\n     d12:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     d16:\t0f b6 90 f0 05 00 00 \tmovzbl 0x5f0(%rax),%edx\n     d1d:\t0f b6 45 c7          \tmovzbl -0x39(%rbp),%eax\n     d21:\t38 c2                \tcmp    %al,%dl\n     d23:\t74 5d                \tje     d82 <get_frame+0x777>\n     d25:\te8 00 00 00 00       \tcallq  d2a <get_frame+0x71f>\n     d2a:\t83 f8 04             \tcmp    $0x4,%eax\n     d2d:\t7e 35                \tjle    d64 <get_frame+0x759>\n     d2f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     d33:\t0f b6 80 f0 05 00 00 \tmovzbl 0x5f0(%rax),%eax\n     d3a:\t0f be c8             \tmovsbl %al,%ecx\n     d3d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     d41:\t8b 90 f4 05 00 00    \tmov    0x5f4(%rax),%edx\n     d47:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     d4b:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n     d52:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d57:\t48 89 c7             \tmov    %rax,%rdi\n     d5a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d5f:\te8 00 00 00 00       \tcallq  d64 <get_frame+0x759>\n     d64:\t0f b6 55 c7          \tmovzbl -0x39(%rbp),%edx\n     d68:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     d6c:\t88 90 f0 05 00 00    \tmov    %dl,0x5f0(%rax)\n     d72:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     d76:\tc7 80 f4 05 00 00 01 \tmovl   $0x1,0x5f4(%rax)\n     d7d:\t00 00 00 \n     d80:\teb 17                \tjmp    d99 <get_frame+0x78e>\n     d82:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     d86:\t8b 80 f4 05 00 00    \tmov    0x5f4(%rax),%eax\n     d8c:\t8d 50 01             \tlea    0x1(%rax),%edx\n     d8f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     d93:\t89 90 f4 05 00 00    \tmov    %edx,0x5f4(%rax)\n     d99:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     d9c:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n     d9f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     da2:\t3b 45 d4             \tcmp    -0x2c(%rbp),%eax\n     da5:\t0f 82 37 f9 ff ff    \tjb     6e2 <get_frame+0xd7>\n     dab:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     daf:\t48 8b 80 e0 05 00 00 \tmov    0x5e0(%rax),%rax\n     db6:\t48 89 c7             \tmov    %rax,%rdi\n     db9:\te8 00 00 00 00       \tcallq  dbe <get_frame+0x7b3>\n     dbe:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     dc2:\t75 1e                \tjne    de2 <get_frame+0x7d7>\n     dc4:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     dcb:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     dd1:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     dd8:\t48 c7 40 10 00 00 00 \tmovq   $0x0,0x10(%rax)\n     ddf:\t00 \n     de0:\teb 2e                \tjmp    e10 <get_frame+0x805>\n     de2:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     de9:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n     def:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     df2:\t01 c0                \tadd    %eax,%eax\n     df4:\t89 c2                \tmov    %eax,%edx\n     df6:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     dfd:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     e01:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     e08:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n     e0f:\t00 \n     e10:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e15:\tc9                   \tleaveq \n     e16:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_frame(__int64 *a1, __int64 a2) {\n  __int64 result;\n  const char *v3;\n  int <span class=\"supfact\">v4</span>;\n  __int64 v5;\n  __int64 v6;\n  int v7;\n  char <span class=\"supfact\">v8</span>[Number];\n  __int64 v9;\n  __int64 v10;\n  int v11;\n  __int64 v12;\n  char v13;\n  __int64 v14;\n  int v15;\n  unsigned int v16;\n  __int64 v17;\n  __int64 v18;\n  const char *v19;\n  const char *v20;\n  unsigned int v21;\n  unsigned int i;\n  v18 = a1[Number];\n  v17 = *(_QWORD *)(v18 + Number);\n  if (*(_DWORD *)(v17 + Number)) {\n    *(_DWORD *)a2 = Number;\n    result = Number L;\n  } else {\n    pj_mutex_lock(*(_QWORD *)(v18 + Number));\n    v16 = PJMEDIA_PIA_SPF((_DWORD *)(v18 + Number));\n    v15 = *(_DWORD *)(v18 + Number) *\n          (unsigned int)*(unsigned __int16 *)(v18 + Number) *\n          *(_DWORD *)(v18 + Number) / Number;\n    v14 = *(_QWORD *)(a2 + Number);\n    for (i = Number; i < v16; i += v15) {\n      pjmedia_jbuf_get_frame2(*(_QWORD *)(v18 + Number),\n                              *(_QWORD *)(v17 + Number), &v12, &v13, &v11);\n      if (v13) {\n        if (v13 == Number) {\n          v20 = (const char *)&unk_52CD;\n          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + Number) + Number L) +\n                          Number L) &&\n              (*(_BYTE *)(v18 + Number) & Number) != Number &&\n              *(_DWORD *)(v18 + Number) < *(_DWORD *)(v18 + Number)) {\n            do {\n              v9 = Number L * i + v14;\n              v10 = *(_QWORD *)(a2 + Number) - Number * i;\n              v21 = pjmedia_codec_recover(*(_QWORD *)(v18 + Number), v10,\n                                          (__int64)<span class=\"supfact\">v8</span>);\n              if (v21)\n                break;\n              i += v15;\n              ++*(_DWORD *)(v18 + Number);\n              if (i >= v16)\n                break;\n            } while (*(_DWORD *)(v18 + Number) < *(_DWORD *)(v18 + Number));\n            v20 = String;\n          }\n          if (i < v16) {\n            pjmedia_zero_samples((void *)(Number L * i + v14), v16 - i);\n            i = v16;\n          }\n          if (*(_BYTE *)(v18 + Number) == v13) {\n            ++*(_DWORD *)(v18 + Number);\n          } else {\n            pjmedia_jbuf_get_state(*(_QWORD *)(v18 + Number),\n                                   <span class=\"supfact\">v8</span>);\n            if ((int)pj_log_get_level() > Number)\n              pj_log_5(*(_QWORD *)(v18 + Number), String, (unsigned int)v10,\n                       v20);\n            *(_BYTE *)(v18 + Number) = v13;\n            *(_DWORD *)(v18 + Number) = Number;\n          }\n          break;\n        }\n        if (v13 != Number) {\n          v19 = (const char *)&unk_52CD;\n          if (v13 != Number)\n            _assert_fail(String, String, Number, String);\n          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + Number) + Number L) +\n                          Number L) &&\n              (*(_BYTE *)(v18 + Number) & Number) != Number &&\n              *(_DWORD *)(v18 + Number) < *(_DWORD *)(v18 + Number)) {\n            do {\n              v9 = Number L * i + v14;\n              v10 = *(_QWORD *)(a2 + Number) - Number * i;\n              v21 = pjmedia_codec_recover(*(_QWORD *)(v18 + Number), v10,\n                                          (__int64)<span class=\"supfact\">v8</span>);\n              if (v21)\n                break;\n              i += v15;\n              ++*(_DWORD *)(v18 + Number);\n              if (i >= v16)\n                break;\n            } while (*(_DWORD *)(v18 + Number) < *(_DWORD *)(v18 + Number));\n            v19 = String;\n          }\n          if (i < v16) {\n            pjmedia_zero_samples((void *)(Number L * i + v14), v16 - i);\n            i = v16;\n          }\n          if (*(_BYTE *)(v18 + Number) == v13) {\n            ++*(_DWORD *)(v18 + Number);\n          } else {\n            pjmedia_jbuf_get_state(*(_QWORD *)(v18 + Number),\n                                   <span class=\"supfact\">v8</span>);\n            if ((int)pj_log_get_level() > Number)\n              pj_log_5(*(_QWORD *)(v18 + Number), String, (unsigned int)v10,\n                       v19);\n            *(_BYTE *)(v18 + Number) = v13;\n            *(_DWORD *)(v18 + Number) = Number;\n          }\n          break;\n        }\n        *(_DWORD *)(v18 + Number) = Number;\n        v5 = *(_QWORD *)(v17 + Number);\n        v6 = v12;\n        v7 = v11;\n        <span class=\"supfact\">v4</span> = Number;\n        v9 = Number L * i + v14;\n        v10 = *(_QWORD *)(a2 + Number) - Number * i;\n        v21 = pjmedia_codec_decode(*(_QWORD *)(v18 + Number),\n                                   (__int64)&<span class=\"supfact\">v4</span>, v10,\n                                   (__int64)<span class=\"supfact\">v8</span>);\n        if (v21) {\n          stream_perror(*a1, String, v21);\n          pjmedia_zero_samples((void *)(v14 + Number L * i), v15);\n        }\n        if (*(_BYTE *)(v18 + Number) == v13) {\n          ++*(_DWORD *)(v18 + Number);\n        } else {\n          if ((int)pj_log_get_level() > Number)\n            pj_log_5(*(_QWORD *)(v18 + Number), String,\n                     *(unsigned int *)(v18 + Number));\n          *(_BYTE *)(v18 + Number) = v13;\n          *(_DWORD *)(v18 + Number) = Number;\n        }\n      } else {\n        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + Number) + Number L) +\n                        Number L) &&\n            (*(_BYTE *)(v18 + Number) & Number) != Number &&\n            *(_DWORD *)(v18 + Number) < *(_DWORD *)(v18 + Number)) {\n          v9 = Number L * i + v14;\n          v10 = *(_QWORD *)(a2 + Number) - Number * i;\n          v21 = pjmedia_codec_recover(*(_QWORD *)(v18 + Number), v10,\n                                      (__int64)<span class=\"supfact\">v8</span>);\n          ++*(_DWORD *)(v18 + Number);\n        } else {\n          v21 = Number;\n        }\n        if (v21)\n          pjmedia_zero_samples((void *)(Number L * i + v14), v16 - i);\n        if (*(_BYTE *)(v18 + Number) == v13) {\n          ++*(_DWORD *)(v18 + Number);\n        } else {\n          if ((int)pj_log_get_level() > Number) {\n            if (v21)\n              v3 = (const char *)&unk_52CD;\n            else\n              v3 = String;\n            pj_log_5(*(_QWORD *)(v18 + Number), String, v3);\n          }\n          *(_BYTE *)(v18 + Number) = v13;\n          *(_DWORD *)(v18 + Number) = Number;\n        }\n      }\n    }\n    pj_mutex_unlock(*(_QWORD *)(v18 + Number));\n    if (i) {\n      *(_DWORD *)a2 = Number;\n      *(_QWORD *)(a2 + Number) = Number * i;\n      *(_QWORD *)(a2 + Number) = Number L;\n    } else {\n      *(_DWORD *)a2 = Number;\n      *(_QWORD *)(a2 + Number) = Number L;\n    }\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl get_frame(pjmedia_port_0 *port, pjmedia_frame_0 *frame) {\n  pj_status_t result;\n  const char *v3;\n  pjmedia_frame_0 <span class=\"supfact\">frame_in</span>;\n  pjmedia_frame_0 <span class=\"supfact\">frame_out</span>;\n  pj_uint32_t bit_info;\n  pj_size_t frame_size;\n  char frame_type;\n  pj_int16_t *p_out_samp;\n  unsigned int samples_per_frame;\n  unsigned int samples_required;\n  pjmedia_channel_0 *channel;\n  pjmedia_stream_0 *stream;\n  const char *with_plc_0;\n  const char *with_plc;\n  pj_status_t status;\n  unsigned int samples_count;\n  stream = (pjmedia_stream_0 *)port->port_data.pdata;\n  channel = stream->dec;\n  if (channel->paused) {\n    frame->type = PJMEDIA_FRAME_TYPE_NONE;\n    result = Number;\n  } else {\n    pj_mutex_lock(stream->jb_mutex);\n    samples_required = PJMEDIA_PIA_SPF(&stream->port.info);\n    samples_per_frame = stream->codec_param.info.clock_rate *\n                        stream->codec_param.info.frm_ptime *\n                        stream->codec_param.info.channel_cnt / Number;\n    p_out_samp = (pj_int16_t *)frame->buf;\n    for (samples_count = Number; samples_count < samples_required;\n         samples_count += samples_per_frame) {\n      pjmedia_jbuf_get_frame2(stream->jb, channel->out_pkt, &frame_size,\n                              &frame_type, &bit_info);\n      if (frame_type) {\n        if (frame_type == Number) {\n          with_plc = (const char *)&unk_52CD;\n          if (stream->codec->op->recover &&\n              (*((_BYTE *)&stream->codec_param.setting + Number) & Number) !=\n                  Number &&\n              stream->plc_cnt < stream->max_plc_cnt) {\n            do {\n              <span class=\"supfact\">frame_out</span>.buf = &p_out_samp[samples_count];\n              <span class=\"supfact\">frame_out</span>.size =\n                  frame->size - Number * samples_count;\n              status = pjmedia_codec_recover(stream->codec,\n                                             <span class=\"supfact\">frame_out</span>.size,\n                                             &<span class=\"supfact\">frame_out</span>);\n              if (status)\n                break;\n              samples_count += samples_per_frame;\n              ++stream->plc_cnt;\n              if (samples_count >= samples_required)\n                break;\n            } while (stream->plc_cnt < stream->max_plc_cnt);\n            with_plc = String;\n          }\n          if (samples_count < samples_required) {\n            pjmedia_zero_samples(&p_out_samp[samples_count],\n                                 samples_required - samples_count);\n            samples_count = samples_required;\n          }\n          if (stream->jb_last_frm == frame_type) {\n            ++stream->jb_last_frm_cnt;\n          } else {\n            pjmedia_jbuf_get_state(stream->jb, &<span class=\"supfact\">frame_out</span>);\n            if ((int)pj_log_get_level() > Number)\n              pj_log_5(stream->port.info.name.ptr, String,\n                       LODWORD(<span class=\"supfact\">frame_out</span>.size), with_plc);\n            stream->jb_last_frm = frame_type;\n            stream->jb_last_frm_cnt = Number;\n          }\n          break;\n        }\n        if (frame_type != Number) {\n          with_plc_0 = (const char *)&unk_52CD;\n          if (frame_type != Number)\n            _assert_fail(String, String, Number, String);\n          if (stream->codec->op->recover &&\n              (*((_BYTE *)&stream->codec_param.setting + Number) & Number) !=\n                  Number &&\n              stream->plc_cnt < stream->max_plc_cnt) {\n            do {\n              <span class=\"supfact\">frame_out</span>.buf = &p_out_samp[samples_count];\n              <span class=\"supfact\">frame_out</span>.size =\n                  frame->size - Number * samples_count;\n              status = pjmedia_codec_recover(stream->codec,\n                                             <span class=\"supfact\">frame_out</span>.size,\n                                             &<span class=\"supfact\">frame_out</span>);\n              if (status)\n                break;\n              samples_count += samples_per_frame;\n              ++stream->plc_cnt;\n              if (samples_count >= samples_required)\n                break;\n            } while (stream->plc_cnt < stream->max_plc_cnt);\n            with_plc_0 = String;\n          }\n          if (samples_count < samples_required) {\n            pjmedia_zero_samples(&p_out_samp[samples_count],\n                                 samples_required - samples_count);\n            samples_count = samples_required;\n          }\n          if (stream->jb_last_frm == frame_type) {\n            ++stream->jb_last_frm_cnt;\n          } else {\n            pjmedia_jbuf_get_state(stream->jb, &<span class=\"supfact\">frame_out</span>);\n            if ((int)pj_log_get_level() > Number)\n              pj_log_5(stream->port.info.name.ptr, String,\n                       LODWORD(<span class=\"supfact\">frame_out</span>.size), with_plc_0);\n            stream->jb_last_frm = frame_type;\n            stream->jb_last_frm_cnt = Number;\n          }\n          break;\n        }\n        stream->plc_cnt = Number;\n        <span class=\"supfact\">frame_in</span>.buf = channel->out_pkt;\n        <span class=\"supfact\">frame_in</span>.size = frame_size;\n        <span class=\"supfact\">frame_in</span>.bit_info = bit_info;\n        <span class=\"supfact\">frame_in</span>.type = PJMEDIA_FRAME_TYPE_AUDIO;\n        <span class=\"supfact\">frame_out</span>.buf = &p_out_samp[samples_count];\n        <span class=\"supfact\">frame_out</span>.size = frame->size - Number * samples_count;\n        status = pjmedia_codec_decode(stream->codec, &<span class=\"supfact\">frame_in</span>,\n                                      <span class=\"supfact\">frame_out</span>.size,\n                                      &<span class=\"supfact\">frame_out</span>);\n        if (status) {\n          stream_perror(port->info.name.ptr, String, status);\n          pjmedia_zero_samples(&p_out_samp[samples_count], samples_per_frame);\n        }\n        if (stream->jb_last_frm == frame_type) {\n          ++stream->jb_last_frm_cnt;\n        } else {\n          if ((int)pj_log_get_level() > Number)\n            pj_log_5(stream->port.info.name.ptr, String,\n                     stream->jb_last_frm_cnt);\n          stream->jb_last_frm = frame_type;\n          stream->jb_last_frm_cnt = Number;\n        }\n      } else {\n        if (stream->codec->op->recover &&\n            (*((_BYTE *)&stream->codec_param.setting + Number) & Number) !=\n                Number &&\n            stream->plc_cnt < stream->max_plc_cnt) {\n          <span class=\"supfact\">frame_out</span>.buf = &p_out_samp[samples_count];\n          <span class=\"supfact\">frame_out</span>.size = frame->size - Number * samples_count;\n          status = pjmedia_codec_recover(stream->codec,\n                                         <span class=\"supfact\">frame_out</span>.size,\n                                         &<span class=\"supfact\">frame_out</span>);\n          ++stream->plc_cnt;\n        } else {\n          status = Number;\n        }\n        if (status)\n          pjmedia_zero_samples(&p_out_samp[samples_count],\n                               samples_required - samples_count);\n        if (stream->jb_last_frm == frame_type) {\n          ++stream->jb_last_frm_cnt;\n        } else {\n          if ((int)pj_log_get_level() > Number) {\n            if (status)\n              v3 = (const char *)&unk_52CD;\n            else\n              v3 = String;\n            pj_log_5(stream->port.info.name.ptr, String, v3);\n          }\n          stream->jb_last_frm = frame_type;\n          stream->jb_last_frm_cnt = Number;\n        }\n      }\n    }\n    pj_mutex_unlock(stream->jb_mutex);\n    if (samples_count) {\n      frame->type = PJMEDIA_FRAME_TYPE_AUDIO;\n      frame->size = Number * samples_count;\n      frame->timestamp.u64 = Number L;\n    } else {\n      frame->type = PJMEDIA_FRAME_TYPE_NONE;\n      frame->size = Number L;\n    }\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct pjmedia_frame_0 { pjmedia_frame_type_0 type; PADDING (4); void * buf; pj_size_t size; pj_timestamp_0 timestamp; pj_uint32_t bit_info; PADDING (4); }", "pred_name": "__unk__", "ref_name": "frame_in", "ref_type": "struct pjmedia_frame_0 { pjmedia_frame_type_0 type; PADDING (4); void * buf; pj_size_t size; pj_timestamp_0 timestamp; pj_uint32_t bit_info; PADDING (4); }"}, {"name": "v8", "type": "struct pjmedia_frame_0 { pjmedia_frame_type_0 type; PADDING (4); void * buf; pj_size_t size; pj_timestamp_0 timestamp; pj_uint32_t bit_info; PADDING (4); }", "pred_name": "__unk__", "ref_name": "frame_out", "ref_type": "struct pjmedia_frame_0 { pjmedia_frame_type_0 type; PADDING (4); void * buf; pj_size_t size; pj_timestamp_0 timestamp; pj_uint32_t bit_info; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "Alhadis", "repo_name": "Research-Unix-v8", "path": "Alhadis/Research-Unix-v8/1d3b30d3853418123cd92ad67b452d17a18c070d60ab7bc7faee3cb066e03b66", "path_in_repo": "Alhadis/Research-Unix-v8/v8/usr/src/libI77/close.o", "objdump": "000000000000017a <f_exit>:\n 17a:\t55                   \tpush   %rbp\n 17b:\t48 89 e5             \tmov    %rsp,%rbp\n 17e:\t48 83 ec 20          \tsub    $0x20,%rsp\n 182:\t48 c7 45 e0 01 00 00 \tmovq   $0x1,-0x20(%rbp)\n 189:\t00 \n 18a:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n 191:\t00 \n 192:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 199:\teb 1e                \tjmp    1b9 <f_exit+0x3f>\n 19b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 19e:\t48 98                \tcltq   \n 1a0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 1a4:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 1a8:\t48 89 c7             \tmov    %rax,%rdi\n 1ab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1b0:\te8 00 00 00 00       \tcallq  1b5 <f_exit+0x3b>\n 1b5:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 1b9:\t83 7d fc 63          \tcmpl   $0x63,-0x4(%rbp)\n 1bd:\t7e dc                \tjle    19b <f_exit+0x21>\n 1bf:\t90                   \tnop\n 1c0:\tc9                   \tleaveq \n 1c1:\tc3                   \tretq   ", "code_s": "__int64 f_exit() {\n  __int64 result;\n  __int64 <span class=\"supfact\">v1</span>[Number];\n  int i;\n  <span class=\"supfact\">v1</span>[Number] = Number L;\n  <span class=\"supfact\">v1</span>[Number] = Number L;\n  for (i = Number; i <= Number; ++i) {\n    <span class=\"supfact\">v1</span>[Number] = i;\n    result = f_clos((__int64)<span class=\"supfact\">v1</span>);\n  }\n  return result;\n}", "code_t": "int __cdecl f_exit() {\n  int result;\n  cllist <span class=\"supfact\">xx</span>;\n  int i;\n  <span class=\"supfact\">xx</span>.cerr = Number L;\n  <span class=\"supfact\">xx</span>.csta = Number L;\n  for (i = Number; i <= Number; ++i) {\n    <span class=\"supfact\">xx</span>.cunit = i;\n    result = f_clos(&<span class=\"supfact\">xx</span>);\n  }\n  return result;\n}", "var": [{"name": "v1", "type": "__unk__", "pred_name": "__unk__", "ref_name": "xx", "ref_type": "struct cllist { flag cerr; ftnint cunit; char * csta; }"}], "body_in_train": false}, {"repo_owner": "estonetechnology", "repo_name": "ppc-4510-android-kernel-imx", "path": "estonetechnology/ppc-4510-android-kernel-imx/12b13a4c67f7953906107cbfcfa95afdbc7cab2619527d11300e95b79e31dd62", "path_in_repo": "estonetechnology/ppc-4510-android-kernel-imx/tools/perf/util/trace-event-info.o", "objdump": "0000000000000262 <record_header_files>:\n     262:\t55                   \tpush   %rbp\n     263:\t48 89 e5             \tmov    %rsp,%rbp\n     266:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n     26d:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     274:\t00 00 \n     276:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     27a:\t31 c0                \txor    %eax,%eax\n     27c:\tc7 85 54 ff ff ff fb \tmovl   $0xfffffffb,-0xac(%rbp)\n     283:\tff ff ff \n     286:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     28b:\te8 00 00 00 00       \tcallq  290 <record_header_files+0x2e>\n     290:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     297:\t48 83 bd 58 ff ff ff \tcmpq   $0x0,-0xa8(%rbp)\n     29e:\t00 \n     29f:\t75 1e                \tjne    2bf <record_header_files+0x5d>\n     2a1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     2a6:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     2ab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     2b0:\te8 00 00 00 00       \tcallq  2b5 <record_header_files+0x53>\n     2b5:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     2ba:\te9 b1 01 00 00       \tjmpq   470 <record_header_files+0x20e>\n     2bf:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n     2c6:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     2cd:\t48 89 d6             \tmov    %rdx,%rsi\n     2d0:\t48 89 c7             \tmov    %rax,%rdi\n     2d3:\te8 00 00 00 00       \tcallq  2d8 <record_header_files+0x76>\n     2d8:\t85 c0                \ttest   %eax,%eax\n     2da:\t79 23                \tjns    2ff <record_header_files+0x9d>\n     2dc:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     2e3:\t48 89 c2             \tmov    %rax,%rdx\n     2e6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     2eb:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     2f0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     2f5:\te8 00 00 00 00       \tcallq  2fa <record_header_files+0x98>\n     2fa:\te9 5c 01 00 00       \tjmpq   45b <record_header_files+0x1f9>\n     2ff:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 305 <record_header_files+0xa3>\n     305:\tba 0c 00 00 00       \tmov    $0xc,%edx\n     30a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     30f:\t89 c7                \tmov    %eax,%edi\n     311:\te8 00 00 00 00       \tcallq  316 <record_header_files+0xb4>\n     316:\t48 83 f8 0c          \tcmp    $0xc,%rax\n     31a:\t74 19                \tje     335 <record_header_files+0xd3>\n     31c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     321:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     326:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     32b:\te8 00 00 00 00       \tcallq  330 <record_header_files+0xce>\n     330:\te9 26 01 00 00       \tjmpq   45b <record_header_files+0x1f9>\n     335:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     33c:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     341:\t48 89 c7             \tmov    %rax,%rdi\n     344:\te8 05 fd ff ff       \tcallq  4e <record_file>\n     349:\t85 c0                \ttest   %eax,%eax\n     34b:\t79 19                \tjns    366 <record_header_files+0x104>\n     34d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     352:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     357:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     35c:\te8 00 00 00 00       \tcallq  361 <record_header_files+0xff>\n     361:\te9 f5 00 00 00       \tjmpq   45b <record_header_files+0x1f9>\n     366:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     36d:\t48 89 c7             \tmov    %rax,%rdi\n     370:\te8 00 00 00 00       \tcallq  375 <record_header_files+0x113>\n     375:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     37a:\te8 00 00 00 00       \tcallq  37f <record_header_files+0x11d>\n     37f:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     386:\t48 83 bd 58 ff ff ff \tcmpq   $0x0,-0xa8(%rbp)\n     38d:\t00 \n     38e:\t75 23                \tjne    3b3 <record_header_files+0x151>\n     390:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     395:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     39a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     39f:\te8 00 00 00 00       \tcallq  3a4 <record_header_files+0x142>\n     3a4:\tc7 85 54 ff ff ff f4 \tmovl   $0xfffffff4,-0xac(%rbp)\n     3ab:\tff ff ff \n     3ae:\te9 a8 00 00 00       \tjmpq   45b <record_header_files+0x1f9>\n     3b3:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n     3ba:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     3c1:\t48 89 d6             \tmov    %rdx,%rsi\n     3c4:\t48 89 c7             \tmov    %rax,%rdi\n     3c7:\te8 00 00 00 00       \tcallq  3cc <record_header_files+0x16a>\n     3cc:\t85 c0                \ttest   %eax,%eax\n     3ce:\t79 20                \tjns    3f0 <record_header_files+0x18e>\n     3d0:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     3d7:\t48 89 c2             \tmov    %rax,%rdx\n     3da:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     3df:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     3e4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     3e9:\te8 00 00 00 00       \tcallq  3ee <record_header_files+0x18c>\n     3ee:\teb 6b                \tjmp    45b <record_header_files+0x1f9>\n     3f0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3f6 <record_header_files+0x194>\n     3f6:\tba 0d 00 00 00       \tmov    $0xd,%edx\n     3fb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     400:\t89 c7                \tmov    %eax,%edi\n     402:\te8 00 00 00 00       \tcallq  407 <record_header_files+0x1a5>\n     407:\t48 83 f8 0d          \tcmp    $0xd,%rax\n     40b:\t74 16                \tje     423 <record_header_files+0x1c1>\n     40d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     412:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     417:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     41c:\te8 00 00 00 00       \tcallq  421 <record_header_files+0x1bf>\n     421:\teb 38                \tjmp    45b <record_header_files+0x1f9>\n     423:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     42a:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     42f:\t48 89 c7             \tmov    %rax,%rdi\n     432:\te8 17 fc ff ff       \tcallq  4e <record_file>\n     437:\t85 c0                \ttest   %eax,%eax\n     439:\t79 16                \tjns    451 <record_header_files+0x1ef>\n     43b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     440:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     445:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     44a:\te8 00 00 00 00       \tcallq  44f <record_header_files+0x1ed>\n     44f:\teb 0a                \tjmp    45b <record_header_files+0x1f9>\n     451:\tc7 85 54 ff ff ff 00 \tmovl   $0x0,-0xac(%rbp)\n     458:\t00 00 00 \n     45b:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     462:\t48 89 c7             \tmov    %rax,%rdi\n     465:\te8 00 00 00 00       \tcallq  46a <record_header_files+0x208>\n     46a:\t8b 85 54 ff ff ff    \tmov    -0xac(%rbp),%eax\n     470:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     474:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     47b:\t00 00 \n     47d:\t74 05                \tje     484 <record_header_files+0x222>\n     47f:\te8 00 00 00 00       \tcallq  484 <record_header_files+0x222>\n     484:\tc9                   \tleaveq \n     485:\tc3                   \tretq   ", "code_s": "__int64 record_header_files() {\n  unsigned int v1;\n  char *file;\n  struct stat64 <span class=\"supfact\">v3</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  v1 = Number;\n  file = (char *)get_tracing_file(String);\n  if (!file) {\n    eprintf(Number L, String);\n    return Number L;\n  }\n  if (stat64(file, &<span class=\"supfact\">v3</span>) >= Number) {\n    if (write(output_fd, String, Number) != Number) {\n      eprintf(Number L, String);\n      goto LABEL_17;\n    }\n    if ((int)record_file(file, Number) < Number) {\n      eprintf(Number L, String);\n      goto LABEL_17;\n    }\n    put_tracing_file(file);\n    file = (char *)get_tracing_file(String);\n    if (!file) {\n      eprintf(Number L, String);\n      v1 = Number;\n      goto LABEL_17;\n    }\n    if (stat64(file, &<span class=\"supfact\">v3</span>) >= Number) {\n      if (write(output_fd, String, Number) == Number) {\n        if ((int)record_file(file, Number) >= Number)\n          v1 = Number;\n        else\n          eprintf(Number L, String);\n      } else {\n        eprintf(Number L, String);\n      }\n      goto LABEL_17;\n    }\n  }\n  eprintf(Number L, String, file);\nLABEL_17:\n  put_tracing_file(file);\n  return v1;\n}", "code_t": "int __cdecl record_header_files() {\n  int err;\n  char *path;\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  err = Number;\n  path = (char *)get_tracing_file(String);\n  if (!path) {\n    eprintf(Number L, String);\n    return Number;\n  }\n  if (stat64(path, (struct stat64 *)&<span class=\"supfact\">st</span>) >= Number) {\n    if (write(output_fd, String, Number) != Number) {\n      eprintf(Number L, String);\n      goto out;\n    }\n    if (record_file(path, Number L) < Number) {\n      eprintf(Number L, String);\n      goto out;\n    }\n    put_tracing_file(path);\n    path = (char *)get_tracing_file(String);\n    if (!path) {\n      eprintf(Number L, String);\n      err = Number;\n      goto out;\n    }\n    if (stat64(path, (struct stat64 *)&<span class=\"supfact\">st</span>) >= Number) {\n      if (write(output_fd, String, Number) == Number) {\n        if (record_file(path, Number L) >= Number)\n          err = Number;\n        else\n          eprintf(Number L, String);\n      } else {\n        eprintf(Number L, String);\n      }\n      goto out;\n    }\n  }\n  eprintf(Number L, String, path);\nout:\n  put_tracing_file(path);\n  return err;\n}", "var": [{"name": "v3", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "st", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "mligor", "repo_name": "jucpp", "path": "mligor/jucpp/cc29fc3e9694847e1e3419d302477cfee7793b4552555260ffbb248b3bd65f3a", "path_in_repo": "mligor/jucpp//build/session.obj", "objdump": "0000000000001190 <_ZN5jucpp4http7Session6removeEv>:\n    1190:\t55                   \tpush   %rbp\n    1191:\t48 89 e5             \tmov    %rsp,%rbp\n    1194:\t53                   \tpush   %rbx\n    1195:\t48 81 ec c8 00 00 00 \tsub    $0xc8,%rsp\n    119c:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n    11a3:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    11aa:\t48 89 c7             \tmov    %rax,%rdi\n    11ad:\te8 00 00 00 00       \tcallq  11b2 <_ZN5jucpp4http7Session6removeEv+0x22>\n    11b2:\t48 85 c0             \ttest   %rax,%rax\n    11b5:\t0f 95 c0             \tsetne  %al\n    11b8:\t84 c0                \ttest   %al,%al\n    11ba:\t0f 84 4d 01 00 00    \tje     130d <_ZN5jucpp4http7Session6removeEv+0x17d>\n    11c0:\t48 8d 85 48 ff ff ff \tlea    -0xb8(%rbp),%rax\n    11c7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11cc:\t48 89 c7             \tmov    %rax,%rdi\n    11cf:\te8 00 00 00 00       \tcallq  11d4 <_ZN5jucpp4http7Session6removeEv+0x44>\n    11d4:\t48 8b 95 38 ff ff ff \tmov    -0xc8(%rbp),%rdx\n    11db:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    11e2:\t48 89 d6             \tmov    %rdx,%rsi\n    11e5:\t48 89 c7             \tmov    %rax,%rdi\n    11e8:\te8 00 00 00 00       \tcallq  11ed <_ZN5jucpp4http7Session6removeEv+0x5d>\n    11ed:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n    11f4:\t48 8d 85 48 ff ff ff \tlea    -0xb8(%rbp),%rax\n    11fb:\t48 89 d6             \tmov    %rdx,%rsi\n    11fe:\t48 89 c7             \tmov    %rax,%rdi\n    1201:\te8 00 00 00 00       \tcallq  1206 <_ZN5jucpp4http7Session6removeEv+0x76>\n    1206:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    120d:\t48 89 c7             \tmov    %rax,%rdi\n    1210:\te8 00 00 00 00       \tcallq  1215 <_ZN5jucpp4http7Session6removeEv+0x85>\n    1215:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    121c:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n    1220:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    1224:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1229:\t48 89 c7             \tmov    %rax,%rdi\n    122c:\te8 00 00 00 00       \tcallq  1231 <_ZN5jucpp4http7Session6removeEv+0xa1>\n    1231:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1235:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    123a:\t48 89 c7             \tmov    %rax,%rdi\n    123d:\te8 00 00 00 00       \tcallq  1242 <_ZN5jucpp4http7Session6removeEv+0xb2>\n    1242:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    1246:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n    124a:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    1251:\t48 89 ce             \tmov    %rcx,%rsi\n    1254:\t48 89 c7             \tmov    %rax,%rdi\n    1257:\te8 00 00 00 00       \tcallq  125c <_ZN5jucpp4http7Session6removeEv+0xcc>\n    125c:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    1263:\t48 89 c6             \tmov    %rax,%rsi\n    1266:\t48 89 df             \tmov    %rbx,%rdi\n    1269:\te8 00 00 00 00       \tcallq  126e <_ZN5jucpp4http7Session6removeEv+0xde>\n    126e:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    1275:\t48 89 c7             \tmov    %rax,%rdi\n    1278:\te8 00 00 00 00       \tcallq  127d <_ZN5jucpp4http7Session6removeEv+0xed>\n    127d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1281:\t48 89 c7             \tmov    %rax,%rdi\n    1284:\te8 00 00 00 00       \tcallq  1289 <_ZN5jucpp4http7Session6removeEv+0xf9>\n    1289:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    128d:\t48 89 c7             \tmov    %rax,%rdi\n    1290:\te8 00 00 00 00       \tcallq  1295 <_ZN5jucpp4http7Session6removeEv+0x105>\n    1295:\t48 8d 85 48 ff ff ff \tlea    -0xb8(%rbp),%rax\n    129c:\t48 89 c7             \tmov    %rax,%rdi\n    129f:\te8 00 00 00 00       \tcallq  12a4 <_ZN5jucpp4http7Session6removeEv+0x114>\n    12a4:\teb 67                \tjmp    130d <_ZN5jucpp4http7Session6removeEv+0x17d>\n    12a6:\t48 89 c3             \tmov    %rax,%rbx\n    12a9:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    12b0:\t48 89 c7             \tmov    %rax,%rdi\n    12b3:\te8 00 00 00 00       \tcallq  12b8 <_ZN5jucpp4http7Session6removeEv+0x128>\n    12b8:\teb 39                \tjmp    12f3 <_ZN5jucpp4http7Session6removeEv+0x163>\n    12ba:\t48 89 c3             \tmov    %rax,%rbx\n    12bd:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    12c4:\t48 89 c7             \tmov    %rax,%rdi\n    12c7:\te8 00 00 00 00       \tcallq  12cc <_ZN5jucpp4http7Session6removeEv+0x13c>\n    12cc:\teb 03                \tjmp    12d1 <_ZN5jucpp4http7Session6removeEv+0x141>\n    12ce:\t48 89 c3             \tmov    %rax,%rbx\n    12d1:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    12d5:\t48 89 c7             \tmov    %rax,%rdi\n    12d8:\te8 00 00 00 00       \tcallq  12dd <_ZN5jucpp4http7Session6removeEv+0x14d>\n    12dd:\teb 03                \tjmp    12e2 <_ZN5jucpp4http7Session6removeEv+0x152>\n    12df:\t48 89 c3             \tmov    %rax,%rbx\n    12e2:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    12e6:\t48 89 c7             \tmov    %rax,%rdi\n    12e9:\te8 00 00 00 00       \tcallq  12ee <_ZN5jucpp4http7Session6removeEv+0x15e>\n    12ee:\teb 03                \tjmp    12f3 <_ZN5jucpp4http7Session6removeEv+0x163>\n    12f0:\t48 89 c3             \tmov    %rax,%rbx\n    12f3:\t48 8d 85 48 ff ff ff \tlea    -0xb8(%rbp),%rax\n    12fa:\t48 89 c7             \tmov    %rax,%rdi\n    12fd:\te8 00 00 00 00       \tcallq  1302 <_ZN5jucpp4http7Session6removeEv+0x172>\n    1302:\t48 89 d8             \tmov    %rbx,%rax\n    1305:\t48 89 c7             \tmov    %rax,%rdi\n    1308:\te8 00 00 00 00       \tcallq  130d <_ZN5jucpp4http7Session6removeEv+0x17d>\n    130d:\t90                   \tnop\n    130e:\t48 81 c4 c8 00 00 00 \tadd    $0xc8,%rsp\n    1315:\t5b                   \tpop    %rbx\n    1316:\t5d                   \tpop    %rbp\n    1317:\tc3                   \tretq   ", "code_s": "void __fastcall jucpp http Session remove(jucpp http Session *this) {\n  jucpp http Response *v1;\n  char <span class=\"supfact\">v2</span>[Number];\n  char <span class=\"supfact\">v3</span>[Number];\n  char <span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>[Number];\n  char <span class=\"supfact\">v6</span>[Number];\n  if (std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          length(this)) {\n    jucpp http SessionManager SessionManager(\n        (jucpp sql SQLDB *)<span class=\"supfact\">v2</span>,\n        (__int64)&jucpp http Session s_storageSettings);\n    jucpp String String((jucpp String *)<span class=\"supfact\">v3</span>, this);\n    jucpp http SessionManager deleteSession(<span class=\"supfact\">v2</span>,\n                                            (__int64)<span class=\"supfact\">v3</span>);\n    jucpp String ~String(<span class=\"supfact\">v3</span>);\n    v1 = (jucpp http Response *)*((_QWORD *)this + Number);\n    jucpp String String((jucpp String *)<span class=\"supfact\">v5</span>, String);\n    jucpp String String(\n        (jucpp String *)<span class=\"supfact\">v6</span>,\n        (const jucpp String *)&jucpp http Session s_sessionCookieName);\n    jucpp http Cookie Cookie(<span class=\"supfact\">v4</span>, <span class=\"supfact\">v6</span>,\n                             <span class=\"supfact\">v5</span>);\n    jucpp http Response addCookie(\n        v1, (const jucpp http Cookie *)<span class=\"supfact\">v4</span>);\n    jucpp http Cookie ~Cookie((jucpp http Cookie *)<span class=\"supfact\">v4</span>);\n    jucpp String ~String(<span class=\"supfact\">v6</span>);\n    jucpp String ~String(<span class=\"supfact\">v5</span>);\n    jucpp http SessionManager ~SessionManager(\n        (jucpp http SessionManager *)<span class=\"supfact\">v2</span>);\n  }\n}", "code_t": "void __cdecl jucpp http Session remove(jucpp http Session *const this) {\n  jucpp http Response *v1;\n  jucpp http SessionManager <span class=\"supfact\">sm</span>;\n  jucpp String <span class=\"supfact\">p_s</span>;\n  jucpp http Cookie <span class=\"supfact\">cookie</span>;\n  jucpp String <span class=\"supfact\">p_value</span>;\n  jucpp String <span class=\"supfact\">p_name</span>;\n  if (std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          length(this)) {\n    jucpp http SessionManager SessionManager(\n        &<span class=\"supfact\">sm</span>, &jucpp http Session s_storageSettings);\n    jucpp String String(&<span class=\"supfact\">p_s</span>, &this->m_sessionId);\n    jucpp http SessionManager deleteSession(&<span class=\"supfact\">sm</span>,\n                                            &<span class=\"supfact\">p_s</span>);\n    jucpp String ~String(&<span class=\"supfact\">p_s</span>);\n    v1 = this->m_response;\n    jucpp String String(&<span class=\"supfact\">p_value</span>, String);\n    jucpp String String(&<span class=\"supfact\">p_name</span>,\n                        &jucpp http Session s_sessionCookieName);\n    jucpp http Cookie Cookie(&<span class=\"supfact\">cookie</span>, &<span class=\"supfact\">p_name</span>,\n                             &<span class=\"supfact\">p_value</span>);\n    jucpp http Response addCookie(v1, &<span class=\"supfact\">cookie</span>);\n    jucpp http Cookie ~Cookie(&<span class=\"supfact\">cookie</span>);\n    jucpp String ~String(&<span class=\"supfact\">p_name</span>);\n    jucpp String ~String(&<span class=\"supfact\">p_value</span>);\n    jucpp http SessionManager ~SessionManager(&<span class=\"supfact\">sm</span>);\n  }\n}", "var": [{"name": "v2", "type": "char[8]", "pred_name": "v2", "ref_name": "sm", "ref_type": "struct jucpp::http::SessionManager { jucpp::sql::SQLDB m_db; }"}, {"name": "v3", "type": "char[32]", "pred_name": "v3", "ref_name": "p_s", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v4", "type": "char[64]", "pred_name": "v4", "ref_name": "cookie", "ref_type": "struct jucpp::http::Cookie { jucpp::String m_name; jucpp::String m_value; }"}, {"name": "v5", "type": "char[32]", "pred_name": "v5", "ref_name": "p_value", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v6", "type": "char[48]", "pred_name": "v6", "ref_name": "p_name", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "kjkasi", "repo_name": "030005", "path": "kjkasi/030005/42e3536ccbc1b695fb11b7d977771ee12fe1f447e7c6cf84d9004fd03c1822ae", "path_in_repo": "kjkasi/030005/ngos/JWNR2000_4EMRUS/SW/opensource/openssl/demos/eay/loadrsa", "objdump": "000000000041266d <OBJ_nid2sn>:\n  41266d:\t48 83 ec 68          \tsub    $0x68,%rsp\n  412671:\t89 7c 24 0c          \tmov    %edi,0xc(%rsp)\n  412675:\t83 7c 24 0c 00       \tcmpl   $0x0,0xc(%rsp)\n  41267a:\t0f 88 88 00 00 00    \tjs     412708 <OBJ_nid2sn+0x9b>\n  412680:\t81 7c 24 0c 95 02 00 \tcmpl   $0x295,0xc(%rsp)\n  412687:\t00 \n  412688:\t7f 7e                \tjg     412708 <OBJ_nid2sn+0x9b>\n  41268a:\t83 7c 24 0c 00       \tcmpl   $0x0,0xc(%rsp)\n  41268f:\t74 4f                \tje     4126e0 <OBJ_nid2sn+0x73>\n  412691:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n  412695:\t48 63 d0             \tmovslq %eax,%rdx\n  412698:\t48 89 d0             \tmov    %rdx,%rax\n  41269b:\t48 c1 e0 02          \tshl    $0x2,%rax\n  41269f:\t48 01 d0             \tadd    %rdx,%rax\n  4126a2:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4126a6:\t48 89 c2             \tmov    %rax,%rdx\n  4126a9:\t48 8d 05 e0 df 03 00 \tlea    0x3dfe0(%rip),%rax        # 450690 <nid_objs+0x10>\n  4126b0:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n  4126b3:\t85 c0                \ttest   %eax,%eax\n  4126b5:\t75 29                \tjne    4126e0 <OBJ_nid2sn+0x73>\n  4126b7:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  4126bd:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  4126c2:\tba 65 00 00 00       \tmov    $0x65,%edx\n  4126c7:\tbe 68 00 00 00       \tmov    $0x68,%esi\n  4126cc:\tbf 08 00 00 00       \tmov    $0x8,%edi\n  4126d1:\te8 78 0e ff ff       \tcallq  40354e <ERR_put_error>\n  4126d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4126db:\te9 ab 00 00 00       \tjmpq   41278b <OBJ_nid2sn+0x11e>\n  4126e0:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n  4126e4:\t48 63 d0             \tmovslq %eax,%rdx\n  4126e7:\t48 89 d0             \tmov    %rdx,%rax\n  4126ea:\t48 c1 e0 02          \tshl    $0x2,%rax\n  4126ee:\t48 01 d0             \tadd    %rdx,%rax\n  4126f1:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4126f5:\t48 89 c2             \tmov    %rax,%rdx\n  4126f8:\t48 8d 05 81 df 03 00 \tlea    0x3df81(%rip),%rax        # 450680 <nid_objs>\n  4126ff:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n  412703:\te9 83 00 00 00       \tjmpq   41278b <OBJ_nid2sn+0x11e>\n  412708:\t48 8b 05 61 89 04 00 \tmov    0x48961(%rip),%rax        # 45b070 <added>\n  41270f:\t48 85 c0             \ttest   %rax,%rax\n  412712:\t75 07                \tjne    41271b <OBJ_nid2sn+0xae>\n  412714:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  412719:\teb 70                \tjmp    41278b <OBJ_nid2sn+0x11e>\n  41271b:\tc7 44 24 40 03 00 00 \tmovl   $0x3,0x40(%rsp)\n  412722:\t00 \n  412723:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  412728:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n  41272d:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n  412731:\t89 44 24 20          \tmov    %eax,0x20(%rsp)\n  412735:\t48 8b 05 34 89 04 00 \tmov    0x48934(%rip),%rax        # 45b070 <added>\n  41273c:\t48 8d 54 24 40       \tlea    0x40(%rsp),%rdx\n  412741:\t48 89 d6             \tmov    %rdx,%rsi\n  412744:\t48 89 c7             \tmov    %rax,%rdi\n  412747:\te8 6b 83 ff ff       \tcallq  40aab7 <lh_retrieve>\n  41274c:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n  412751:\t48 83 7c 24 58 00    \tcmpq   $0x0,0x58(%rsp)\n  412757:\t74 0e                \tje     412767 <OBJ_nid2sn+0xfa>\n  412759:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n  41275e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  412762:\t48 8b 00             \tmov    (%rax),%rax\n  412765:\teb 24                \tjmp    41278b <OBJ_nid2sn+0x11e>\n  412767:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  41276d:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  412772:\tba 65 00 00 00       \tmov    $0x65,%edx\n  412777:\tbe 68 00 00 00       \tmov    $0x68,%esi\n  41277c:\tbf 08 00 00 00       \tmov    $0x8,%edi\n  412781:\te8 c8 0d ff ff       \tcallq  40354e <ERR_put_error>\n  412786:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41278b:\t48 83 c4 68          \tadd    $0x68,%rsp\n  41278f:\tc3                   \tretq   ", "code_s": "char *__fastcall OBJ_nid2sn(int a1) {\n  char *result;\n  char <span class=\"supfact\">v2</span>;\n  int v3;\n  int <span class=\"supfact\">v4</span>;\n  char *v5;\n  __int64 v6;\n  if (a1 < Number || a1 > Number) {\n    if (added) {\n      <span class=\"supfact\">v4</span> = Number;\n      v5 = &<span class=\"supfact\">v2</span>;\n      v3 = a1;\n      v6 = lh_retrieve(added, (__int64)&<span class=\"supfact\">v4</span>);\n      if (v6) {\n        result = **(char ***)(v6 + Number);\n      } else {\n        ERR_put_error(Number, Number, Number, Number L, Number);\n        result = Number L;\n      }\n    } else {\n      result = Number L;\n    }\n  } else if (!a1 || *((_DWORD *)&unk_450690 + Number * a1)) {\n    result = nid_objs[Number * a1];\n  } else {\n    ERR_put_error(Number, Number, Number, Number L, Number);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "const char *__cdecl OBJ_nid2sn(int n) {\n  const char *result;\n  ASN1_OBJECT <span class=\"supfact\">ob</span>;\n  ADDED_OBJ <span class=\"supfact\">ad</span>;\n  ADDED_OBJ *adp;\n  if (n < Number || n > Number) {\n    if (added) {\n      <span class=\"supfact\">ad</span>.type = Number;\n      <span class=\"supfact\">ad</span>.obj = &<span class=\"supfact\">ob</span>;\n      <span class=\"supfact\">ob</span>.nid = n;\n      adp = (ADDED_OBJ *)lh_retrieve(added, &<span class=\"supfact\">ad</span>);\n      if (adp) {\n        result = adp->obj->sn;\n      } else {\n        ERR_put_error(Number, Number, Number, Number L, Number);\n        result = Number L;\n      }\n    } else {\n      result = Number L;\n    }\n  } else if (!n || nid_objs[n].nid) {\n    result = nid_objs[n].sn;\n  } else {\n    ERR_put_error(Number, Number, Number, Number L, Number);\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "struct ASN1_OBJECT { const char * sn; const char * ln; int nid; int length; unsigned __int8 * data; int flags; PADDING (4); }", "pred_name": "ob", "ref_name": "ob", "ref_type": "struct ASN1_OBJECT { const char * sn; const char * ln; int nid; int length; unsigned __int8 * data; int flags; PADDING (4); }"}, {"name": "v4", "type": "struct ADDED_OBJ { int type; PADDING (4); ASN1_OBJECT * obj; }", "pred_name": "ad", "ref_name": "ad", "ref_type": "struct ADDED_OBJ { int type; PADDING (4); ASN1_OBJECT * obj; }"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/af4a34ceecd9a87fd3e5a0029c8f79de9225a5c3b51e2361fd394a2608d155c0", "path_in_repo": "AlexanderVangelov/pjsip//pjsip/build/output/pjsua-lib-x86_64-unknown-linux-gnu/pjsua_call.o", "objdump": "000000000000616a <pjsua_call_send_im>:\n    616a:\t55                   \tpush   %rbp\n    616b:\t48 89 e5             \tmov    %rsp,%rbp\n    616e:\t53                   \tpush   %rbx\n    616f:\t48 81 ec c8 00 00 00 \tsub    $0xc8,%rsp\n    6176:\t89 bd 5c ff ff ff    \tmov    %edi,-0xa4(%rbp)\n    617c:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n    6183:\t48 89 95 48 ff ff ff \tmov    %rdx,-0xb8(%rbp)\n    618a:\t48 89 8d 40 ff ff ff \tmov    %rcx,-0xc0(%rbp)\n    6191:\t4c 89 85 38 ff ff ff \tmov    %r8,-0xc8(%rbp)\n    6198:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n    619f:\t00 \n    61a0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    61a5:\te8 00 00 00 00       \tcallq  61aa <pjsua_call_send_im+0x40>\n    61aa:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    61ae:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    61b2:\t83 bd 5c ff ff ff 00 \tcmpl   $0x0,-0xa4(%rbp)\n    61b9:\t78 0e                \tjs     61c9 <pjsua_call_send_im+0x5f>\n    61bb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 61c1 <pjsua_call_send_im+0x57>\n    61c1:\t39 85 5c ff ff ff    \tcmp    %eax,-0xa4(%rbp)\n    61c7:\t7c 3a                \tjl     6203 <pjsua_call_send_im+0x99>\n    61c9:\t83 bd 5c ff ff ff 00 \tcmpl   $0x0,-0xa4(%rbp)\n    61d0:\t78 0e                \tjs     61e0 <pjsua_call_send_im+0x76>\n    61d2:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 61d8 <pjsua_call_send_im+0x6e>\n    61d8:\t39 85 5c ff ff ff    \tcmp    %eax,-0xa4(%rbp)\n    61de:\t7c 19                \tjl     61f9 <pjsua_call_send_im+0x8f>\n    61e0:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    61e5:\tba bb 0b 00 00       \tmov    $0xbbb,%edx\n    61ea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    61ef:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    61f4:\te8 00 00 00 00       \tcallq  61f9 <pjsua_call_send_im+0x8f>\n    61f9:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n    61fe:\te9 a7 02 00 00       \tjmpq   64aa <pjsua_call_send_im+0x340>\n    6203:\te8 00 00 00 00       \tcallq  6208 <pjsua_call_send_im+0x9e>\n    6208:\t83 f8 03             \tcmp    $0x3,%eax\n    620b:\t7e 2b                \tjle    6238 <pjsua_call_send_im+0xce>\n    620d:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    6214:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    6218:\t89 c2                \tmov    %eax,%edx\n    621a:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    6220:\t89 d1                \tmov    %edx,%ecx\n    6222:\t89 c2                \tmov    %eax,%edx\n    6224:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6229:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    622e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6233:\te8 00 00 00 00       \tcallq  6238 <pjsua_call_send_im+0xce>\n    6238:\te8 00 00 00 00       \tcallq  623d <pjsua_call_send_im+0xd3>\n    623d:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n    6241:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n    6245:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    624b:\t89 c6                \tmov    %eax,%esi\n    624d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    6252:\te8 00 00 00 00       \tcallq  6257 <pjsua_call_send_im+0xed>\n    6257:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    625a:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    625e:\t0f 85 25 02 00 00    \tjne    6489 <pjsua_call_send_im+0x31f>\n    6264:\t48 83 bd 50 ff ff ff \tcmpq   $0x0,-0xb0(%rbp)\n    626b:\t00 \n    626c:\t75 0b                \tjne    6279 <pjsua_call_send_im+0x10f>\n    626e:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    6272:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n    6279:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    627d:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    6281:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n    6285:\t48 8d 95 68 ff ff ff \tlea    -0x98(%rbp),%rdx\n    628c:\t48 89 d1             \tmov    %rdx,%rcx\n    628f:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    6294:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6299:\t48 89 c7             \tmov    %rax,%rdi\n    629c:\te8 00 00 00 00       \tcallq  62a1 <pjsua_call_send_im+0x137>\n    62a1:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    62a4:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    62a8:\t74 19                \tje     62c3 <pjsua_call_send_im+0x159>\n    62aa:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    62ad:\t89 c2                \tmov    %eax,%edx\n    62af:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    62b4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    62b9:\te8 00 00 00 00       \tcallq  62be <pjsua_call_send_im+0x154>\n    62be:\te9 ca 01 00 00       \tjmpq   648d <pjsua_call_send_im+0x323>\n    62c3:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    62ca:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    62ce:\t48 89 c7             \tmov    %rax,%rdi\n    62d1:\te8 00 00 00 00       \tcallq  62d6 <pjsua_call_send_im+0x16c>\n    62d6:\t48 89 c2             \tmov    %rax,%rdx\n    62d9:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    62e0:\t48 8b 80 88 01 00 00 \tmov    0x188(%rax),%rax\n    62e7:\t48 89 d6             \tmov    %rdx,%rsi\n    62ea:\t48 89 c7             \tmov    %rax,%rdi\n    62ed:\te8 f0 9d ff ff       \tcallq  e2 <pjsip_msg_add_hdr>\n    62f2:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    62f9:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    62fd:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n    6304:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n    630b:\t48 89 ce             \tmov    %rcx,%rsi\n    630e:\t48 89 c7             \tmov    %rax,%rdi\n    6311:\te8 00 00 00 00       \tcallq  6316 <pjsua_call_send_im+0x1ac>\n    6316:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    631d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    6321:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n    6328:\t48 8b 9a 88 01 00 00 \tmov    0x188(%rdx),%rbx\n    632f:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    6336:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n    633d:\t48 8d 79 10          \tlea    0x10(%rcx),%rdi\n    6341:\t48 8d b5 70 ff ff ff \tlea    -0x90(%rbp),%rsi\n    6348:\t48 89 d1             \tmov    %rdx,%rcx\n    634b:\t48 89 fa             \tmov    %rdi,%rdx\n    634e:\t48 89 c7             \tmov    %rax,%rdi\n    6351:\te8 00 00 00 00       \tcallq  6356 <pjsua_call_send_im+0x1ec>\n    6356:\t48 89 43 68          \tmov    %rax,0x68(%rbx)\n    635a:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    6361:\t48 8b 80 88 01 00 00 \tmov    0x188(%rax),%rax\n    6368:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n    636c:\t48 85 c0             \ttest   %rax,%rax\n    636f:\t75 28                \tjne    6399 <pjsua_call_send_im+0x22f>\n    6371:\tba 77 11 01 00       \tmov    $0x11177,%edx\n    6376:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    637b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    6380:\te8 00 00 00 00       \tcallq  6385 <pjsua_call_send_im+0x21b>\n    6385:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    638c:\t48 89 c7             \tmov    %rax,%rdi\n    638f:\te8 00 00 00 00       \tcallq  6394 <pjsua_call_send_im+0x22a>\n    6394:\te9 f4 00 00 00       \tjmpq   648d <pjsua_call_send_im+0x323>\n    6399:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    63a0:\t48 8b 95 40 ff ff ff \tmov    -0xc0(%rbp),%rdx\n    63a7:\t48 89 d6             \tmov    %rdx,%rsi\n    63aa:\t48 89 c7             \tmov    %rax,%rdi\n    63ad:\te8 00 00 00 00       \tcallq  63b2 <pjsua_call_send_im+0x248>\n    63b2:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    63b9:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    63bd:\tbe 30 00 00 00       \tmov    $0x30,%esi\n    63c2:\t48 89 c7             \tmov    %rax,%rdi\n    63c5:\te8 42 9d ff ff       \tcallq  10c <pj_pool_zalloc>\n    63ca:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    63ce:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    63d2:\t8b 90 80 00 00 00    \tmov    0x80(%rax),%edx\n    63d8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    63dc:\t89 10                \tmov    %edx,(%rax)\n    63de:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    63e2:\t8b 95 5c ff ff ff    \tmov    -0xa4(%rbp),%edx\n    63e8:\t89 50 04             \tmov    %edx,0x4(%rax)\n    63eb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    63ef:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    63f3:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n    63f7:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    63fb:\t48 8b 90 20 01 00 00 \tmov    0x120(%rax),%rdx\n    6402:\t48 8b 80 18 01 00 00 \tmov    0x118(%rax),%rax\n    6409:\t48 89 41 08          \tmov    %rax,0x8(%rcx)\n    640d:\t48 89 51 10          \tmov    %rdx,0x10(%rcx)\n    6411:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    6415:\t48 8d 48 18          \tlea    0x18(%rax),%rcx\n    6419:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    6420:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    6424:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    642b:\t48 89 ce             \tmov    %rcx,%rsi\n    642e:\t48 89 c7             \tmov    %rax,%rdi\n    6431:\te8 00 00 00 00       \tcallq  6436 <pjsua_call_send_im+0x2cc>\n    6436:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    643a:\t48 8b 95 38 ff ff ff \tmov    -0xc8(%rbp),%rdx\n    6441:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n    6445:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 644b <pjsua_call_send_im+0x2e1>\n    644b:\t48 8b b5 68 ff ff ff \tmov    -0x98(%rbp),%rsi\n    6452:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    6456:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    645a:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n    645e:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    6462:\t48 89 c7             \tmov    %rax,%rdi\n    6465:\te8 00 00 00 00       \tcallq  646a <pjsua_call_send_im+0x300>\n    646a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    646d:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    6471:\t74 19                \tje     648c <pjsua_call_send_im+0x322>\n    6473:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    6476:\t89 c2                \tmov    %eax,%edx\n    6478:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    647d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    6482:\te8 00 00 00 00       \tcallq  6487 <pjsua_call_send_im+0x31d>\n    6487:\teb 04                \tjmp    648d <pjsua_call_send_im+0x323>\n    6489:\t90                   \tnop\n    648a:\teb 01                \tjmp    648d <pjsua_call_send_im+0x323>\n    648c:\t90                   \tnop\n    648d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    6491:\t48 85 c0             \ttest   %rax,%rax\n    6494:\t74 0c                \tje     64a2 <pjsua_call_send_im+0x338>\n    6496:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    649a:\t48 89 c7             \tmov    %rax,%rdi\n    649d:\te8 00 00 00 00       \tcallq  64a2 <pjsua_call_send_im+0x338>\n    64a2:\te8 00 00 00 00       \tcallq  64a7 <pjsua_call_send_im+0x33d>\n    64a7:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    64aa:\t48 81 c4 c8 00 00 00 \tadd    $0xc8,%rsp\n    64b1:\t5b                   \tpop    %rbx\n    64b2:\t5d                   \tpop    %rbp\n    64b3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pjsua_call_send_im(signed int a1, __int64 *a2, __int64 a3,\n                                      __int64 a4, __int64 a5) {\n  __int64 v5;\n  __int64 result;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 *v15;\n  __int64 v16;\n  char <span class=\"supfact\">v17</span>[Number];\n  __int64 v18;\n  __int64 <span class=\"supfact\">v19</span>[Number];\n  __int64 v20;\n  unsigned int *v21;\n  __int64 v22;\n  unsigned int v23;\n  v15 = a2;\n  v20 = Number L;\n  <span class=\"supfact\">v19</span>[Number] = pj_str(String);\n  <span class=\"supfact\">v19</span>[Number] = v5;\n  if (a1 >= Number && a1 < (int)pjsua_var[Number]) {\n    if ((int)pj_log_get_level() > Number)\n      pj_log_4(String, String, (unsigned int)a1,\n               (unsigned int)*(_QWORD *)(a3 + Number));\n    pj_log_push_indent();\n    v23 = acquire_call(String, a1, &v21, &v20);\n    if (!v23) {\n      if (!a2)\n        v15 = <span class=\"supfact\">v19</span>;\n      v23 = pjsip_dlg_create_request(\n          *(_QWORD *)(*((_QWORD *)v21 + Number) + Number L),\n          &pjsip_message_method, Number, &v16);\n      if (v23) {\n        pjsua_perror(String, String, v23);\n      } else {\n        v7 = pjsua_im_create_accept(*(_QWORD *)(v16 + Number));\n        pjsip_msg_add_hdr(*(_QWORD *)(v16 + Number), v7);\n        pjsua_parse_media_type(*(_QWORD *)(v16 + Number), v15,\n                               <span class=\"supfact\">v17</span>);\n        v8 = *(_QWORD *)(v16 + Number);\n        *(_QWORD *)(v8 + Number) = pjsip_msg_body_create(\n            *(_QWORD *)(v16 + Number), <span class=\"supfact\">v17</span>, &v18, a3);\n        if (*(_QWORD *)(*(_QWORD *)(v16 + Number) + Number L)) {\n          pjsua_process_msg_data(v16, a4);\n          v22 = pj_pool_zalloc(*(_QWORD *)(v16 + Number), Number L);\n          *(_DWORD *)v22 = v21[Number];\n          *(_DWORD *)(v22 + Number) = a1;\n          v9 = *(_QWORD *)(*((_QWORD *)v21 + Number) + Number L);\n          v10 = v22;\n          v11 = *(_QWORD *)(v9 + Number);\n          *(_QWORD *)(v22 + Number) = *(_QWORD *)(v9 + Number);\n          *(_QWORD *)(v10 + Number) = v11;\n          pj_strdup_with_null(*(_QWORD *)(v16 + Number), v22 + Number, a3);\n          *(_QWORD *)(v22 + Number) = a5;\n          v23 = pjsip_dlg_send_request(\n              *(_QWORD *)(*((_QWORD *)v21 + Number) + Number L), v16,\n              pjsua_var[Number], v22);\n          if (v23)\n            pjsua_perror(String, String, v23);\n        } else {\n          pjsua_perror(String, String, Number L);\n          pjsip_tx_data_dec_ref(v16);\n        }\n      }\n    }\n    if (v20)\n      pjsip_dlg_dec_lock(v20);\n    pj_log_pop_indent();\n    result = v23;\n  } else {\n    if (a1 < Number || a1 >= (int)pjsua_var[Number])\n      _assert_fail(String, String, Number, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl pjsua_call_send_im(pjsua_call_id call_id,\n                                       const pj_str_t_0 *mime_type,\n                                       const pj_str_t_0 *content,\n                                       const pjsua_msg_data_0 *msg_data,\n                                       void *user_data) {\n  pj_ssize_t v5;\n  pj_status_t result;\n  pjsip_hdr_0 *v7;\n  pjsip_msg_0 *v8;\n  pjsip_dialog_0 *v9;\n  pjsua_im_data_0 *v10;\n  pj_ssize_t v11;\n  const pj_str_t_0 *mime_typea;\n  pjsip_tx_data_0 *tdata;\n  pjsip_media_type_0 <span class=\"supfact\">ctype</span>;\n  pj_str_t_0 <span class=\"supfact\">mime_text_plain</span>;\n  pjsip_dialog_0 *dlg;\n  pjsua_call_0 *call;\n  pjsua_im_data_0 *im_data;\n  pj_status_t status;\n  mime_typea = mime_type;\n  dlg = Number L;\n  <span class=\"supfact\">mime_text_plain</span>.ptr = (char *)pj_str(String);\n  <span class=\"supfact\">mime_text_plain</span>.slen = v5;\n  if (call_id >= Number && call_id < pjsua_var[Number]) {\n    if ((int)pj_log_get_level() > Number)\n      pj_log_4(String, String, (unsigned int)call_id,\n               (unsigned int)content->slen);\n    pj_log_push_indent();\n    status = acquire_call(String, call_id, &call, &dlg);\n    if (!status) {\n      if (!mime_type)\n        mime_typea = &<span class=\"supfact\">mime_text_plain</span>;\n      status = pjsip_dlg_create_request(call->inv->dlg, &pjsip_message_method,\n                                        Number, &tdata);\n      if (status) {\n        pjsua_perror(String, String, (unsigned int)status);\n      } else {\n        v7 = (pjsip_hdr_0 *)pjsua_im_create_accept(tdata->pool);\n        pjsip_msg_add_hdr(tdata->msg, v7);\n        pjsua_parse_media_type(tdata->pool, mime_typea, &<span class=\"supfact\">ctype</span>);\n        v8 = tdata->msg;\n        v8->body = (pjsip_msg_body_0 *)pjsip_msg_body_create(\n            tdata->pool, &<span class=\"supfact\">ctype</span>, &<span class=\"supfact\">ctype</span>.subtype,\n            content);\n        if (tdata->msg->body) {\n          pjsua_process_msg_data(tdata, msg_data);\n          im_data = (pjsua_im_data_0 *)pj_pool_zalloc(tdata->pool, Number);\n          im_data->acc_id = call->acc_id;\n          im_data->call_id = call_id;\n          v9 = call->inv->dlg;\n          v10 = im_data;\n          v11 = v9->remote.info_str.slen;\n          im_data->to.ptr = v9->remote.info_str.ptr;\n          v10->to.slen = v11;\n          pj_strdup_with_null(tdata->pool, &im_data->body, content);\n          im_data->user_data = user_data;\n          status = pjsip_dlg_send_request(\n              call->inv->dlg, tdata, (unsigned int)pjsua_var[Number], im_data);\n          if (status)\n            pjsua_perror(String, String, (unsigned int)status);\n        } else {\n          pjsua_perror(String, String, Number L);\n          pjsip_tx_data_dec_ref(tdata);\n        }\n      }\n    }\n    if (dlg)\n      pjsip_dlg_dec_lock(dlg);\n    pj_log_pop_indent();\n    result = status;\n  } else {\n    if (call_id < Number || call_id >= pjsua_var[Number])\n      _assert_fail(String, String, Number, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v17", "type": "struct pjsip_media_type_0 { pj_str_t_0 type; pj_str_t_0 subtype; pjsip_param_0 param; }", "pred_name": "ctype", "ref_name": "ctype", "ref_type": "struct pjsip_media_type_0 { pj_str_t_0 type; pj_str_t_0 subtype; pjsip_param_0 param; }"}, {"name": "v19", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "pred_name": "mime_text_plain", "ref_name": "mime_text_plain", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": false}, {"repo_owner": "jack71728", "repo_name": "qemuVmHw1", "path": "jack71728/qemuVmHw1/68f2cd867895e2db85c69e2c3af259fb129b994f322ce3c37eacb506bdd868fd", "path_in_repo": "jack71728/qemuVmHw1/qemu-0.13.0/sparc32plus-linux-user/main.o", "objdump": "00000000000011d6 <main>:\n    11d6:\t55                   \tpush   %rbp\n    11d7:\t48 89 e5             \tmov    %rsp,%rbp\n    11da:\t53                   \tpush   %rbx\n    11db:\t48 81 ec 98 49 02 00 \tsub    $0x24998,%rsp\n    11e2:\t89 bd 7c b6 fd ff    \tmov    %edi,-0x24984(%rbp)\n    11e8:\t48 89 b5 70 b6 fd ff \tmov    %rsi,-0x24990(%rbp)\n    11ef:\t48 89 95 68 b6 fd ff \tmov    %rdx,-0x24998(%rbp)\n    11f6:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    11fd:\t00 00 \n    11ff:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1203:\t31 c0                \txor    %eax,%eax\n    1205:\t48 8d 85 a0 b7 fd ff \tlea    -0x24860(%rbp),%rax\n    120c:\t48 89 85 d8 b6 fd ff \tmov    %rax,-0x24928(%rbp)\n    1213:\t48 8d 85 40 b7 fd ff \tlea    -0x248c0(%rbp),%rax\n    121a:\t48 89 85 e0 b6 fd ff \tmov    %rax,-0x24920(%rbp)\n    1221:\t48 8d 85 b0 b9 fd ff \tlea    -0x24650(%rbp),%rax\n    1228:\t48 89 85 e8 b6 fd ff \tmov    %rax,-0x24918(%rbp)\n    122f:\tc7 85 90 b6 fd ff 00 \tmovl   $0x0,-0x24970(%rbp)\n    1236:\t00 00 00 \n    1239:\t48 c7 85 f0 b6 fd ff \tmovq   $0x0,-0x24910(%rbp)\n    1240:\t00 00 00 00 \n    1244:\t48 c7 85 c8 b6 fd ff \tmovq   $0x0,-0x24938(%rbp)\n    124b:\t00 00 00 00 \n    124f:\t83 bd 7c b6 fd ff 01 \tcmpl   $0x1,-0x24984(%rbp)\n    1256:\t7f 05                \tjg     125d <main+0x87>\n    1258:\te8 d2 fd ff ff       \tcallq  102f <usage>\n    125d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1262:\te8 00 00 00 00       \tcallq  1267 <main+0x91>\n    1267:\te8 00 00 00 00       \tcallq  126c <main+0x96>\n    126c:\t48 89 85 f0 b6 fd ff \tmov    %rax,-0x24910(%rbp)\n    1273:\t48 83 bd f0 b6 fd ff \tcmpq   $0x0,-0x24910(%rbp)\n    127a:\t00 \n    127b:\t75 28                \tjne    12a5 <main+0xcf>\n    127d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1284 <main+0xae>\n    1284:\t48 89 c1             \tmov    %rax,%rcx\n    1287:\tba 1b 00 00 00       \tmov    $0x1b,%edx\n    128c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1291:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1296:\te8 00 00 00 00       \tcallq  129b <main+0xc5>\n    129b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    12a0:\te8 00 00 00 00       \tcallq  12a5 <main+0xcf>\n    12a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 12ac <main+0xd6>\n    12ac:\t48 89 85 c0 b6 fd ff \tmov    %rax,-0x24940(%rbp)\n    12b3:\teb 24                \tjmp    12d9 <main+0x103>\n    12b5:\t48 8b 85 c0 b6 fd ff \tmov    -0x24940(%rbp),%rax\n    12bc:\t48 8b 10             \tmov    (%rax),%rdx\n    12bf:\t48 8b 85 f0 b6 fd ff \tmov    -0x24910(%rbp),%rax\n    12c6:\t48 89 d6             \tmov    %rdx,%rsi\n    12c9:\t48 89 c7             \tmov    %rax,%rdi\n    12cc:\te8 00 00 00 00       \tcallq  12d1 <main+0xfb>\n    12d1:\t48 83 85 c0 b6 fd ff \taddq   $0x8,-0x24940(%rbp)\n    12d8:\t08 \n    12d9:\t48 8b 85 c0 b6 fd ff \tmov    -0x24940(%rbp),%rax\n    12e0:\t48 8b 00             \tmov    (%rax),%rax\n    12e3:\t48 85 c0             \ttest   %rax,%rax\n    12e6:\t75 cd                \tjne    12b5 <main+0xdf>\n    12e8:\t48 8d 85 30 b7 fd ff \tlea    -0x248d0(%rbp),%rax\n    12ef:\t48 89 c6             \tmov    %rax,%rsi\n    12f2:\tbf 03 00 00 00       \tmov    $0x3,%edi\n    12f7:\te8 00 00 00 00       \tcallq  12fc <main+0x126>\n    12fc:\t85 c0                \ttest   %eax,%eax\n    12fe:\t75 1b                \tjne    131b <main+0x145>\n    1300:\t48 8b 85 30 b7 fd ff \tmov    -0x248d0(%rbp),%rax\n    1307:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n    130b:\t74 0e                \tje     131b <main+0x145>\n    130d:\t48 8b 85 30 b7 fd ff \tmov    -0x248d0(%rbp),%rax\n    1314:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 131b <main+0x145>\n    131b:\t48 c7 85 b8 b6 fd ff \tmovq   $0x0,-0x24948(%rbp)\n    1322:\t00 00 00 00 \n    1326:\tc7 85 8c b6 fd ff 01 \tmovl   $0x1,-0x24974(%rbp)\n    132d:\t00 00 00 \n    1330:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1336:\t3b 85 7c b6 fd ff    \tcmp    -0x24984(%rbp),%eax\n    133c:\t0f 8d 38 08 00 00    \tjge    1b7a <main+0x9a4>\n    1342:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1348:\t48 98                \tcltq   \n    134a:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1351:\t00 \n    1352:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    1359:\t48 01 d0             \tadd    %rdx,%rax\n    135c:\t48 8b 00             \tmov    (%rax),%rax\n    135f:\t48 89 85 b0 b6 fd ff \tmov    %rax,-0x24950(%rbp)\n    1366:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    136d:\t0f b6 00             \tmovzbl (%rax),%eax\n    1370:\t3c 2d                \tcmp    $0x2d,%al\n    1372:\t0f 85 05 08 00 00    \tjne    1b7d <main+0x9a7>\n    1378:\t83 85 8c b6 fd ff 01 \taddl   $0x1,-0x24974(%rbp)\n    137f:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    1386:\t48 83 c0 01          \tadd    $0x1,%rax\n    138a:\t48 89 85 b0 b6 fd ff \tmov    %rax,-0x24950(%rbp)\n    1391:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    1398:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    139d:\t48 89 c7             \tmov    %rax,%rdi\n    13a0:\te8 00 00 00 00       \tcallq  13a5 <main+0x1cf>\n    13a5:\t85 c0                \ttest   %eax,%eax\n    13a7:\t0f 84 d3 07 00 00    \tje     1b80 <main+0x9aa>\n    13ad:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    13b4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    13b9:\t48 89 c7             \tmov    %rax,%rdi\n    13bc:\te8 00 00 00 00       \tcallq  13c1 <main+0x1eb>\n    13c1:\t85 c0                \ttest   %eax,%eax\n    13c3:\t0f 85 cd 00 00 00    \tjne    1496 <main+0x2c0>\n    13c9:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    13cf:\t3b 85 7c b6 fd ff    \tcmp    -0x24984(%rbp),%eax\n    13d5:\t0f 8d a8 07 00 00    \tjge    1b83 <main+0x9ad>\n    13db:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    13e1:\t8d 50 01             \tlea    0x1(%rax),%edx\n    13e4:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    13ea:\t48 98                \tcltq   \n    13ec:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    13f3:\t00 \n    13f4:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    13fb:\t48 01 d0             \tadd    %rdx,%rax\n    13fe:\t48 8b 00             \tmov    (%rax),%rax\n    1401:\t48 89 85 b0 b6 fd ff \tmov    %rax,-0x24950(%rbp)\n    1408:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    140f:\t48 89 c7             \tmov    %rax,%rdi\n    1412:\te8 00 00 00 00       \tcallq  1417 <main+0x241>\n    1417:\t89 85 a4 b6 fd ff    \tmov    %eax,-0x2495c(%rbp)\n    141d:\t83 bd a4 b6 fd ff 00 \tcmpl   $0x0,-0x2495c(%rbp)\n    1424:\t75 5e                \tjne    1484 <main+0x2ae>\n    1426:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    142b:\te8 00 00 00 00       \tcallq  1430 <main+0x25a>\n    1430:\t48 c7 85 d0 b6 fd ff \tmovq   $0x0,-0x24930(%rbp)\n    1437:\t00 00 00 00 \n    143b:\teb 30                \tjmp    146d <main+0x297>\n    143d:\t48 8b 85 d0 b6 fd ff \tmov    -0x24930(%rbp),%rax\n    1444:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1448:\t48 8b 85 d0 b6 fd ff \tmov    -0x24930(%rbp),%rax\n    144f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1453:\t48 89 c6             \tmov    %rax,%rsi\n    1456:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    145b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1460:\te8 00 00 00 00       \tcallq  1465 <main+0x28f>\n    1465:\t48 83 85 d0 b6 fd ff \taddq   $0x18,-0x24930(%rbp)\n    146c:\t18 \n    146d:\t48 8b 85 d0 b6 fd ff \tmov    -0x24930(%rbp),%rax\n    1474:\t8b 00                \tmov    (%rax),%eax\n    1476:\t85 c0                \ttest   %eax,%eax\n    1478:\t75 c3                \tjne    143d <main+0x267>\n    147a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    147f:\te8 00 00 00 00       \tcallq  1484 <main+0x2ae>\n    1484:\t8b 85 a4 b6 fd ff    \tmov    -0x2495c(%rbp),%eax\n    148a:\t89 c7                \tmov    %eax,%edi\n    148c:\te8 00 00 00 00       \tcallq  1491 <main+0x2bb>\n    1491:\te9 9a fe ff ff       \tjmpq   1330 <main+0x15a>\n    1496:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    149d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    14a2:\t48 89 c7             \tmov    %rax,%rdi\n    14a5:\te8 00 00 00 00       \tcallq  14aa <main+0x2d4>\n    14aa:\t85 c0                \ttest   %eax,%eax\n    14ac:\t75 58                \tjne    1506 <main+0x330>\n    14ae:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    14b4:\t8d 50 01             \tlea    0x1(%rax),%edx\n    14b7:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    14bd:\t48 98                \tcltq   \n    14bf:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    14c6:\t00 \n    14c7:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    14ce:\t48 01 d0             \tadd    %rdx,%rax\n    14d1:\t48 8b 00             \tmov    (%rax),%rax\n    14d4:\t48 89 85 b0 b6 fd ff \tmov    %rax,-0x24950(%rbp)\n    14db:\t48 8b 95 b0 b6 fd ff \tmov    -0x24950(%rbp),%rdx\n    14e2:\t48 8b 85 f0 b6 fd ff \tmov    -0x24910(%rbp),%rax\n    14e9:\t48 89 d6             \tmov    %rdx,%rsi\n    14ec:\t48 89 c7             \tmov    %rax,%rdi\n    14ef:\te8 00 00 00 00       \tcallq  14f4 <main+0x31e>\n    14f4:\t85 c0                \ttest   %eax,%eax\n    14f6:\t0f 84 34 fe ff ff    \tje     1330 <main+0x15a>\n    14fc:\te8 2e fb ff ff       \tcallq  102f <usage>\n    1501:\te9 2a fe ff ff       \tjmpq   1330 <main+0x15a>\n    1506:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    150d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1512:\t48 89 c7             \tmov    %rax,%rdi\n    1515:\te8 00 00 00 00       \tcallq  151a <main+0x344>\n    151a:\t85 c0                \ttest   %eax,%eax\n    151c:\t75 58                \tjne    1576 <main+0x3a0>\n    151e:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1524:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1527:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    152d:\t48 98                \tcltq   \n    152f:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1536:\t00 \n    1537:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    153e:\t48 01 d0             \tadd    %rdx,%rax\n    1541:\t48 8b 00             \tmov    (%rax),%rax\n    1544:\t48 89 85 b0 b6 fd ff \tmov    %rax,-0x24950(%rbp)\n    154b:\t48 8b 95 b0 b6 fd ff \tmov    -0x24950(%rbp),%rdx\n    1552:\t48 8b 85 f0 b6 fd ff \tmov    -0x24910(%rbp),%rax\n    1559:\t48 89 d6             \tmov    %rdx,%rsi\n    155c:\t48 89 c7             \tmov    %rax,%rdi\n    155f:\te8 00 00 00 00       \tcallq  1564 <main+0x38e>\n    1564:\t85 c0                \ttest   %eax,%eax\n    1566:\t0f 84 c4 fd ff ff    \tje     1330 <main+0x15a>\n    156c:\te8 be fa ff ff       \tcallq  102f <usage>\n    1571:\te9 ba fd ff ff       \tjmpq   1330 <main+0x15a>\n    1576:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    157d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1582:\t48 89 c7             \tmov    %rax,%rdi\n    1585:\te8 00 00 00 00       \tcallq  158a <main+0x3b4>\n    158a:\t85 c0                \ttest   %eax,%eax\n    158c:\t75 40                \tjne    15ce <main+0x3f8>\n    158e:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1594:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1597:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    159d:\t48 98                \tcltq   \n    159f:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    15a6:\t00 \n    15a7:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    15ae:\t48 01 d0             \tadd    %rdx,%rax\n    15b1:\t48 8b 00             \tmov    (%rax),%rax\n    15b4:\t48 89 85 b0 b6 fd ff \tmov    %rax,-0x24950(%rbp)\n    15bb:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    15c2:\t48 89 85 c8 b6 fd ff \tmov    %rax,-0x24938(%rbp)\n    15c9:\te9 62 fd ff ff       \tjmpq   1330 <main+0x15a>\n    15ce:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    15d5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    15da:\t48 89 c7             \tmov    %rax,%rdi\n    15dd:\te8 00 00 00 00       \tcallq  15e2 <main+0x40c>\n    15e2:\t85 c0                \ttest   %eax,%eax\n    15e4:\t0f 85 d1 00 00 00    \tjne    16bb <main+0x4e5>\n    15ea:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    15f0:\t3b 85 7c b6 fd ff    \tcmp    -0x24984(%rbp),%eax\n    15f6:\t0f 8d 8a 05 00 00    \tjge    1b86 <main+0x9b0>\n    15fc:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1602:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1605:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    160b:\t48 98                \tcltq   \n    160d:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1614:\t00 \n    1615:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    161c:\t48 01 d0             \tadd    %rdx,%rax\n    161f:\t48 8b 00             \tmov    (%rax),%rax\n    1622:\t48 89 85 b0 b6 fd ff \tmov    %rax,-0x24950(%rbp)\n    1629:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    1630:\t48 8d 8d b0 b6 fd ff \tlea    -0x24950(%rbp),%rcx\n    1637:\tba 00 00 00 00       \tmov    $0x0,%edx\n    163c:\t48 89 ce             \tmov    %rcx,%rsi\n    163f:\t48 89 c7             \tmov    %rax,%rdi\n    1642:\te8 00 00 00 00       \tcallq  1647 <main+0x471>\n    1647:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 164e <main+0x478>\n    164e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1655 <main+0x47f>\n    1655:\t48 85 c0             \ttest   %rax,%rax\n    1658:\t75 05                \tjne    165f <main+0x489>\n    165a:\te8 d0 f9 ff ff       \tcallq  102f <usage>\n    165f:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    1666:\t0f b6 00             \tmovzbl (%rax),%eax\n    1669:\t3c 4d                \tcmp    $0x4d,%al\n    166b:\t75 17                \tjne    1684 <main+0x4ae>\n    166d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1674 <main+0x49e>\n    1674:\t48 c1 e0 14          \tshl    $0x14,%rax\n    1678:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 167f <main+0x4a9>\n    167f:\te9 ac fc ff ff       \tjmpq   1330 <main+0x15a>\n    1684:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    168b:\t0f b6 00             \tmovzbl (%rax),%eax\n    168e:\t3c 6b                \tcmp    $0x6b,%al\n    1690:\t74 12                \tje     16a4 <main+0x4ce>\n    1692:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    1699:\t0f b6 00             \tmovzbl (%rax),%eax\n    169c:\t3c 4b                \tcmp    $0x4b,%al\n    169e:\t0f 85 8c fc ff ff    \tjne    1330 <main+0x15a>\n    16a4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 16ab <main+0x4d5>\n    16ab:\t48 c1 e0 0a          \tshl    $0xa,%rax\n    16af:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 16b6 <main+0x4e0>\n    16b6:\te9 75 fc ff ff       \tjmpq   1330 <main+0x15a>\n    16bb:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    16c2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    16c7:\t48 89 c7             \tmov    %rax,%rdi\n    16ca:\te8 00 00 00 00       \tcallq  16cf <main+0x4f9>\n    16cf:\t85 c0                \ttest   %eax,%eax\n    16d1:\t75 32                \tjne    1705 <main+0x52f>\n    16d3:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    16d9:\t8d 50 01             \tlea    0x1(%rax),%edx\n    16dc:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    16e2:\t48 98                \tcltq   \n    16e4:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    16eb:\t00 \n    16ec:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    16f3:\t48 01 d0             \tadd    %rdx,%rax\n    16f6:\t48 8b 00             \tmov    (%rax),%rax\n    16f9:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1700 <main+0x52a>\n    1700:\te9 2b fc ff ff       \tjmpq   1330 <main+0x15a>\n    1705:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    170c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1711:\t48 89 c7             \tmov    %rax,%rdi\n    1714:\te8 00 00 00 00       \tcallq  1719 <main+0x543>\n    1719:\t85 c0                \ttest   %eax,%eax\n    171b:\t0f 85 9b 00 00 00    \tjne    17bc <main+0x5e6>\n    1721:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1727:\t3b 85 7c b6 fd ff    \tcmp    -0x24984(%rbp),%eax\n    172d:\t0f 8d 56 04 00 00    \tjge    1b89 <main+0x9b3>\n    1733:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1739:\t8d 50 01             \tlea    0x1(%rax),%edx\n    173c:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    1742:\t48 98                \tcltq   \n    1744:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    174b:\t00 \n    174c:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    1753:\t48 01 d0             \tadd    %rdx,%rax\n    1756:\t48 8b 00             \tmov    (%rax),%rax\n    1759:\t48 89 c7             \tmov    %rax,%rdi\n    175c:\te8 00 00 00 00       \tcallq  1761 <main+0x58b>\n    1761:\t48 98                \tcltq   \n    1763:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 176a <main+0x594>\n    176a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1771 <main+0x59b>\n    1771:\t48 85 c0             \ttest   %rax,%rax\n    1774:\t74 1e                \tje     1794 <main+0x5be>\n    1776:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 177d <main+0x5a7>\n    177d:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n    1781:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1788 <main+0x5b2>\n    1788:\t48 21 d0             \tand    %rdx,%rax\n    178b:\t48 85 c0             \ttest   %rax,%rax\n    178e:\t0f 84 9c fb ff ff    \tje     1330 <main+0x15a>\n    1794:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 179b <main+0x5c5>\n    179b:\t48 89 c1             \tmov    %rax,%rcx\n    179e:\tba 21 00 00 00       \tmov    $0x21,%edx\n    17a3:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    17a8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    17ad:\te8 00 00 00 00       \tcallq  17b2 <main+0x5dc>\n    17b2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    17b7:\te8 00 00 00 00       \tcallq  17bc <main+0x5e6>\n    17bc:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    17c3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    17c8:\t48 89 c7             \tmov    %rax,%rdi\n    17cb:\te8 00 00 00 00       \tcallq  17d0 <main+0x5fa>\n    17d0:\t85 c0                \ttest   %eax,%eax\n    17d2:\t75 4b                \tjne    181f <main+0x649>\n    17d4:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    17da:\t3b 85 7c b6 fd ff    \tcmp    -0x24984(%rbp),%eax\n    17e0:\t0f 8d a6 03 00 00    \tjge    1b8c <main+0x9b6>\n    17e6:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    17ec:\t8d 50 01             \tlea    0x1(%rax),%edx\n    17ef:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    17f5:\t48 98                \tcltq   \n    17f7:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    17fe:\t00 \n    17ff:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    1806:\t48 01 d0             \tadd    %rdx,%rax\n    1809:\t48 8b 00             \tmov    (%rax),%rax\n    180c:\t48 89 c7             \tmov    %rax,%rdi\n    180f:\te8 00 00 00 00       \tcallq  1814 <main+0x63e>\n    1814:\t89 85 90 b6 fd ff    \tmov    %eax,-0x24970(%rbp)\n    181a:\te9 11 fb ff ff       \tjmpq   1330 <main+0x15a>\n    181f:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    1826:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    182b:\t48 89 c7             \tmov    %rax,%rdi\n    182e:\te8 00 00 00 00       \tcallq  1833 <main+0x65d>\n    1833:\t85 c0                \ttest   %eax,%eax\n    1835:\t75 32                \tjne    1869 <main+0x693>\n    1837:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    183d:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1840:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    1846:\t48 98                \tcltq   \n    1848:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    184f:\t00 \n    1850:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    1857:\t48 01 d0             \tadd    %rdx,%rax\n    185a:\t48 8b 00             \tmov    (%rax),%rax\n    185d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1864 <main+0x68e>\n    1864:\te9 c7 fa ff ff       \tjmpq   1330 <main+0x15a>\n    1869:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    1870:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1875:\t48 89 c7             \tmov    %rax,%rdi\n    1878:\te8 00 00 00 00       \tcallq  187d <main+0x6a7>\n    187d:\t85 c0                \ttest   %eax,%eax\n    187f:\t75 71                \tjne    18f2 <main+0x71c>\n    1881:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1887:\t8d 50 01             \tlea    0x1(%rax),%edx\n    188a:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    1890:\t48 98                \tcltq   \n    1892:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1899:\t00 \n    189a:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    18a1:\t48 01 d0             \tadd    %rdx,%rax\n    18a4:\t48 8b 00             \tmov    (%rax),%rax\n    18a7:\t48 89 85 b8 b6 fd ff \tmov    %rax,-0x24948(%rbp)\n    18ae:\t48 83 bd b8 b6 fd ff \tcmpq   $0x0,-0x24948(%rbp)\n    18b5:\t00 \n    18b6:\t74 1c                \tje     18d4 <main+0x6fe>\n    18b8:\t48 8b 85 b8 b6 fd ff \tmov    -0x24948(%rbp),%rax\n    18bf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    18c4:\t48 89 c7             \tmov    %rax,%rdi\n    18c7:\te8 00 00 00 00       \tcallq  18cc <main+0x6f6>\n    18cc:\t85 c0                \ttest   %eax,%eax\n    18ce:\t0f 85 5c fa ff ff    \tjne    1330 <main+0x15a>\n    18d4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18db <main+0x705>\n    18db:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    18e0:\t48 89 c7             \tmov    %rax,%rdi\n    18e3:\te8 00 00 00 00       \tcallq  18e8 <main+0x712>\n    18e8:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    18ed:\te8 00 00 00 00       \tcallq  18f2 <main+0x71c>\n    18f2:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    18f9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    18fe:\t48 89 c7             \tmov    %rax,%rdi\n    1901:\te8 00 00 00 00       \tcallq  1906 <main+0x730>\n    1906:\t85 c0                \ttest   %eax,%eax\n    1908:\t75 4e                \tjne    1958 <main+0x782>\n    190a:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1910:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1913:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    1919:\t48 98                \tcltq   \n    191b:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1922:\t00 \n    1923:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    192a:\t48 01 d0             \tadd    %rdx,%rax\n    192d:\t48 8b 00             \tmov    (%rax),%rax\n    1930:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1935:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    193a:\t48 89 c7             \tmov    %rax,%rdi\n    193d:\te8 00 00 00 00       \tcallq  1942 <main+0x76c>\n    1942:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1949 <main+0x773>\n    1949:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 1953 <main+0x77d>\n    1950:\t00 00 00 \n    1953:\te9 d8 f9 ff ff       \tjmpq   1330 <main+0x15a>\n    1958:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    195f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1964:\t48 89 c7             \tmov    %rax,%rdi\n    1967:\te8 00 00 00 00       \tcallq  196c <main+0x796>\n    196c:\t85 c0                \ttest   %eax,%eax\n    196e:\t0f 85 7d 01 00 00    \tjne    1af1 <main+0x91b>\n    1974:\tc7 85 98 b6 fd ff 00 \tmovl   $0x0,-0x24968(%rbp)\n    197b:\t00 00 00 \n    197e:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1984:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1987:\t89 95 8c b6 fd ff    \tmov    %edx,-0x24974(%rbp)\n    198d:\t48 98                \tcltq   \n    198f:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1996:\t00 \n    1997:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    199e:\t48 01 d0             \tadd    %rdx,%rax\n    19a1:\t48 8b 00             \tmov    (%rax),%rax\n    19a4:\t48 8d 8d 30 b7 fd ff \tlea    -0x248d0(%rbp),%rcx\n    19ab:\tba 00 00 00 00       \tmov    $0x0,%edx\n    19b0:\t48 89 ce             \tmov    %rcx,%rsi\n    19b3:\t48 89 c7             \tmov    %rax,%rdi\n    19b6:\te8 00 00 00 00       \tcallq  19bb <main+0x7e5>\n    19bb:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 19c2 <main+0x7ec>\n    19c2:\t48 8b 85 30 b7 fd ff \tmov    -0x248d0(%rbp),%rax\n    19c9:\t0f b6 00             \tmovzbl (%rax),%eax\n    19cc:\t0f be c0             \tmovsbl %al,%eax\n    19cf:\t83 f8 6b             \tcmp    $0x6b,%eax\n    19d2:\t74 19                \tje     19ed <main+0x817>\n    19d4:\t83 f8 6b             \tcmp    $0x6b,%eax\n    19d7:\t7f 37                \tjg     1a10 <main+0x83a>\n    19d9:\t83 f8 4d             \tcmp    $0x4d,%eax\n    19dc:\t74 1b                \tje     19f9 <main+0x823>\n    19de:\t83 f8 4d             \tcmp    $0x4d,%eax\n    19e1:\t7f 2d                \tjg     1a10 <main+0x83a>\n    19e3:\t83 f8 47             \tcmp    $0x47,%eax\n    19e6:\t74 1d                \tje     1a05 <main+0x82f>\n    19e8:\t83 f8 4b             \tcmp    $0x4b,%eax\n    19eb:\t75 23                \tjne    1a10 <main+0x83a>\n    19ed:\tc7 85 98 b6 fd ff 0a \tmovl   $0xa,-0x24968(%rbp)\n    19f4:\t00 00 00 \n    19f7:\teb 17                \tjmp    1a10 <main+0x83a>\n    19f9:\tc7 85 98 b6 fd ff 14 \tmovl   $0x14,-0x24968(%rbp)\n    1a00:\t00 00 00 \n    1a03:\teb 0b                \tjmp    1a10 <main+0x83a>\n    1a05:\tc7 85 98 b6 fd ff 1e \tmovl   $0x1e,-0x24968(%rbp)\n    1a0c:\t00 00 00 \n    1a0f:\t90                   \tnop\n    1a10:\t83 bd 98 b6 fd ff 00 \tcmpl   $0x0,-0x24968(%rbp)\n    1a17:\t0f 84 98 00 00 00    \tje     1ab5 <main+0x8df>\n    1a1d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a24 <main+0x84e>\n    1a24:\t48 89 85 f8 b6 fd ff \tmov    %rax,-0x24908(%rbp)\n    1a2b:\t48 8b 85 30 b7 fd ff \tmov    -0x248d0(%rbp),%rax\n    1a32:\t48 83 c0 01          \tadd    $0x1,%rax\n    1a36:\t48 89 85 30 b7 fd ff \tmov    %rax,-0x248d0(%rbp)\n    1a3d:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1a44 <main+0x86e>\n    1a44:\t8b 85 98 b6 fd ff    \tmov    -0x24968(%rbp),%eax\n    1a4a:\t89 c1                \tmov    %eax,%ecx\n    1a4c:\t48 d3 e2             \tshl    %cl,%rdx\n    1a4f:\t48 89 d0             \tmov    %rdx,%rax\n    1a52:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1a59 <main+0x883>\n    1a59:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1a60 <main+0x88a>\n    1a60:\t8b 85 98 b6 fd ff    \tmov    -0x24968(%rbp),%eax\n    1a66:\t89 c1                \tmov    %eax,%ecx\n    1a68:\t48 d3 ea             \tshr    %cl,%rdx\n    1a6b:\t48 89 d0             \tmov    %rdx,%rax\n    1a6e:\t48 39 85 f8 b6 fd ff \tcmp    %rax,-0x24908(%rbp)\n    1a75:\t75 16                \tjne    1a8d <main+0x8b7>\n    1a77:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a7e <main+0x8a8>\n    1a7e:\t48 ba 00 00 00 00 01 \tmovabs $0x100000000,%rdx\n    1a85:\t00 00 00 \n    1a88:\t48 39 d0             \tcmp    %rdx,%rax\n    1a8b:\t76 28                \tjbe    1ab5 <main+0x8df>\n    1a8d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a94 <main+0x8be>\n    1a94:\t48 89 c1             \tmov    %rax,%rcx\n    1a97:\tba 21 00 00 00       \tmov    $0x21,%edx\n    1a9c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1aa1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1aa6:\te8 00 00 00 00       \tcallq  1aab <main+0x8d5>\n    1aab:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    1ab0:\te8 00 00 00 00       \tcallq  1ab5 <main+0x8df>\n    1ab5:\t48 8b 85 30 b7 fd ff \tmov    -0x248d0(%rbp),%rax\n    1abc:\t0f b6 00             \tmovzbl (%rax),%eax\n    1abf:\t84 c0                \ttest   %al,%al\n    1ac1:\t0f 84 69 f8 ff ff    \tje     1330 <main+0x15a>\n    1ac7:\t48 8b 95 30 b7 fd ff \tmov    -0x248d0(%rbp),%rdx\n    1ace:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ad5 <main+0x8ff>\n    1ad5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ada:\t48 89 c7             \tmov    %rax,%rdi\n    1add:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ae2:\te8 00 00 00 00       \tcallq  1ae7 <main+0x911>\n    1ae7:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    1aec:\te8 00 00 00 00       \tcallq  1af1 <main+0x91b>\n    1af1:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    1af8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1afd:\t48 89 c7             \tmov    %rax,%rdi\n    1b00:\te8 00 00 00 00       \tcallq  1b05 <main+0x92f>\n    1b05:\t85 c0                \ttest   %eax,%eax\n    1b07:\t75 19                \tjne    1b22 <main+0x94c>\n    1b09:\t48 8b 85 f0 b6 fd ff \tmov    -0x24910(%rbp),%rax\n    1b10:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b15:\t48 89 c7             \tmov    %rax,%rdi\n    1b18:\te8 00 00 00 00       \tcallq  1b1d <main+0x947>\n    1b1d:\te9 0e f8 ff ff       \tjmpq   1330 <main+0x15a>\n    1b22:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    1b29:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b2e:\t48 89 c7             \tmov    %rax,%rdi\n    1b31:\te8 00 00 00 00       \tcallq  1b36 <main+0x960>\n    1b36:\t85 c0                \ttest   %eax,%eax\n    1b38:\t75 0f                \tjne    1b49 <main+0x973>\n    1b3a:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 1b44 <main+0x96e>\n    1b41:\t00 00 00 \n    1b44:\te9 e7 f7 ff ff       \tjmpq   1330 <main+0x15a>\n    1b49:\t48 8b 85 b0 b6 fd ff \tmov    -0x24950(%rbp),%rax\n    1b50:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b55:\t48 89 c7             \tmov    %rax,%rdi\n    1b58:\te8 00 00 00 00       \tcallq  1b5d <main+0x987>\n    1b5d:\t85 c0                \ttest   %eax,%eax\n    1b5f:\t75 0f                \tjne    1b70 <main+0x99a>\n    1b61:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 1b6b <main+0x995>\n    1b68:\t00 00 00 \n    1b6b:\te9 c0 f7 ff ff       \tjmpq   1330 <main+0x15a>\n    1b70:\te8 ba f4 ff ff       \tcallq  102f <usage>\n    1b75:\te9 b6 f7 ff ff       \tjmpq   1330 <main+0x15a>\n    1b7a:\t90                   \tnop\n    1b7b:\teb 10                \tjmp    1b8d <main+0x9b7>\n    1b7d:\t90                   \tnop\n    1b7e:\teb 0d                \tjmp    1b8d <main+0x9b7>\n    1b80:\t90                   \tnop\n    1b81:\teb 0a                \tjmp    1b8d <main+0x9b7>\n    1b83:\t90                   \tnop\n    1b84:\teb 07                \tjmp    1b8d <main+0x9b7>\n    1b86:\t90                   \tnop\n    1b87:\teb 04                \tjmp    1b8d <main+0x9b7>\n    1b89:\t90                   \tnop\n    1b8a:\teb 01                \tjmp    1b8d <main+0x9b7>\n    1b8c:\t90                   \tnop\n    1b8d:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1b93:\t3b 85 7c b6 fd ff    \tcmp    -0x24984(%rbp),%eax\n    1b99:\t7c 05                \tjl     1ba0 <main+0x9ca>\n    1b9b:\te8 8f f4 ff ff       \tcallq  102f <usage>\n    1ba0:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1ba6:\t48 98                \tcltq   \n    1ba8:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1baf:\t00 \n    1bb0:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    1bb7:\t48 01 d0             \tadd    %rdx,%rax\n    1bba:\t48 8b 00             \tmov    (%rax),%rax\n    1bbd:\t48 89 85 00 b7 fd ff \tmov    %rax,-0x24900(%rbp)\n    1bc4:\t8b 85 8c b6 fd ff    \tmov    -0x24974(%rbp),%eax\n    1bca:\t48 98                \tcltq   \n    1bcc:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1bd3:\t00 \n    1bd4:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    1bdb:\t48 01 d0             \tadd    %rdx,%rax\n    1bde:\t48 8b 00             \tmov    (%rax),%rax\n    1be1:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1be8 <main+0xa12>\n    1be8:\t48 8b 85 d8 b6 fd ff \tmov    -0x24928(%rbp),%rax\n    1bef:\tba 50 00 00 00       \tmov    $0x50,%edx\n    1bf4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1bf9:\t48 89 c7             \tmov    %rax,%rdi\n    1bfc:\te8 00 00 00 00       \tcallq  1c01 <main+0xa2b>\n    1c01:\t48 8b 85 e0 b6 fd ff \tmov    -0x24920(%rbp),%rax\n    1c08:\tba 58 00 00 00       \tmov    $0x58,%edx\n    1c0d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c12:\t48 89 c7             \tmov    %rax,%rdi\n    1c15:\te8 00 00 00 00       \tcallq  1c1a <main+0xa44>\n    1c1a:\t48 8d 85 f0 b7 fd ff \tlea    -0x24810(%rbp),%rax\n    1c21:\tba c0 01 00 00       \tmov    $0x1c0,%edx\n    1c26:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c2b:\t48 89 c7             \tmov    %rax,%rdi\n    1c2e:\te8 00 00 00 00       \tcallq  1c33 <main+0xa5d>\n    1c33:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c3a <main+0xa64>\n    1c3a:\t48 89 c7             \tmov    %rax,%rdi\n    1c3d:\te8 00 00 00 00       \tcallq  1c42 <main+0xa6c>\n    1c42:\t48 83 bd b8 b6 fd ff \tcmpq   $0x0,-0x24948(%rbp)\n    1c49:\t00 \n    1c4a:\t75 0b                \tjne    1c57 <main+0xa81>\n    1c4c:\t48 c7 85 b8 b6 fd ff \tmovq   $0x0,-0x24948(%rbp)\n    1c53:\t00 00 00 00 \n    1c57:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1c5c:\te8 00 00 00 00       \tcallq  1c61 <main+0xa8b>\n    1c61:\t48 8b 85 b8 b6 fd ff \tmov    -0x24948(%rbp),%rax\n    1c68:\t48 89 c7             \tmov    %rax,%rdi\n    1c6b:\te8 00 00 00 00       \tcallq  1c70 <main+0xa9a>\n    1c70:\t48 89 85 08 b7 fd ff \tmov    %rax,-0x248f8(%rbp)\n    1c77:\t48 83 bd 08 b7 fd ff \tcmpq   $0x0,-0x248f8(%rbp)\n    1c7e:\t00 \n    1c7f:\t75 28                \tjne    1ca9 <main+0xad3>\n    1c81:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c88 <main+0xab2>\n    1c88:\t48 89 c1             \tmov    %rax,%rcx\n    1c8b:\tba 1e 00 00 00       \tmov    $0x1e,%edx\n    1c90:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1c95:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1c9a:\te8 00 00 00 00       \tcallq  1c9f <main+0xac9>\n    1c9f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    1ca4:\te8 00 00 00 00       \tcallq  1ca9 <main+0xad3>\n    1ca9:\t48 8b 85 08 b7 fd ff \tmov    -0x248f8(%rbp),%rax\n    1cb0:\t48 89 c7             \tmov    %rax,%rdi\n    1cb3:\te8 00 00 00 00       \tcallq  1cb8 <main+0xae2>\n    1cb8:\t48 8b 85 08 b7 fd ff \tmov    -0x248f8(%rbp),%rax\n    1cbf:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1cc6 <main+0xaf0>\n    1cc6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1ccb:\te8 00 00 00 00       \tcallq  1cd0 <main+0xafa>\n    1cd0:\t48 85 c0             \ttest   %rax,%rax\n    1cd3:\t74 0a                \tje     1cdf <main+0xb09>\n    1cd5:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 1cdf <main+0xb09>\n    1cdc:\t00 00 00 \n    1cdf:\t48 8b 85 f0 b6 fd ff \tmov    -0x24910(%rbp),%rax\n    1ce6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ceb:\t48 89 c7             \tmov    %rax,%rdi\n    1cee:\te8 00 00 00 00       \tcallq  1cf3 <main+0xb1d>\n    1cf3:\t48 89 85 10 b7 fd ff \tmov    %rax,-0x248f0(%rbp)\n    1cfa:\t48 8b 85 f0 b6 fd ff \tmov    -0x24910(%rbp),%rax\n    1d01:\t48 89 c7             \tmov    %rax,%rdi\n    1d04:\te8 00 00 00 00       \tcallq  1d09 <main+0xb33>\n    1d09:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1d10 <main+0xb3a>\n    1d10:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d17 <main+0xb41>\n    1d17:\t48 01 d0             \tadd    %rdx,%rax\n    1d1a:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n    1d1e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d25 <main+0xb4f>\n    1d25:\t48 21 d0             \tand    %rdx,%rax\n    1d28:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1d2f <main+0xb59>\n    1d2f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d36 <main+0xb60>\n    1d36:\t48 85 c0             \ttest   %rax,%rax\n    1d39:\t0f 84 92 01 00 00    \tje     1ed1 <main+0xcfb>\n    1d3f:\tc7 85 9c b6 fd ff 22 \tmovl   $0x4022,-0x24964(%rbp)\n    1d46:\t40 00 00 \n    1d49:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1d4f <main+0xb79>\n    1d4f:\t85 c0                \ttest   %eax,%eax\n    1d51:\t74 07                \tje     1d5a <main+0xb84>\n    1d53:\t83 8d 9c b6 fd ff 10 \torl    $0x10,-0x24964(%rbp)\n    1d5a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d61 <main+0xb8b>\n    1d61:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1d68 <main+0xb92>\n    1d68:\t48 89 d7             \tmov    %rdx,%rdi\n    1d6b:\t8b 95 9c b6 fd ff    \tmov    -0x24964(%rbp),%edx\n    1d71:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    1d77:\t41 b8 ff ff ff ff    \tmov    $0xffffffff,%r8d\n    1d7d:\t89 d1                \tmov    %edx,%ecx\n    1d7f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1d84:\t48 89 c6             \tmov    %rax,%rsi\n    1d87:\te8 00 00 00 00       \tcallq  1d8c <main+0xbb6>\n    1d8c:\t48 89 85 18 b7 fd ff \tmov    %rax,-0x248e8(%rbp)\n    1d93:\t48 83 bd 18 b7 fd ff \tcmpq   $0xffffffffffffffff,-0x248e8(%rbp)\n    1d9a:\tff \n    1d9b:\t75 28                \tjne    1dc5 <main+0xbef>\n    1d9d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1da4 <main+0xbce>\n    1da4:\t48 89 c1             \tmov    %rax,%rcx\n    1da7:\tba 26 00 00 00       \tmov    $0x26,%edx\n    1dac:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1db1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1db6:\te8 00 00 00 00       \tcallq  1dbb <main+0xbe5>\n    1dbb:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    1dc0:\te8 00 00 00 00       \tcallq  1dc5 <main+0xbef>\n    1dc5:\t48 8b 85 18 b7 fd ff \tmov    -0x248e8(%rbp),%rax\n    1dcc:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1dd3 <main+0xbfd>\n    1dd3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1dda <main+0xc04>\n    1dda:\t48 f7 d0             \tnot    %rax\n    1ddd:\t48 89 c2             \tmov    %rax,%rdx\n    1de0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1de7 <main+0xc11>\n    1de7:\t48 21 d0             \tand    %rdx,%rax\n    1dea:\t48 85 c0             \ttest   %rax,%rax\n    1ded:\t0f 84 b2 00 00 00    \tje     1ea5 <main+0xccf>\n    1df3:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1dfa <main+0xc24>\n    1dfa:\t48 8b 85 18 b7 fd ff \tmov    -0x248e8(%rbp),%rax\n    1e01:\t48 89 d6             \tmov    %rdx,%rsi\n    1e04:\t48 89 c7             \tmov    %rax,%rdi\n    1e07:\te8 00 00 00 00       \tcallq  1e0c <main+0xc36>\n    1e0c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1e13 <main+0xc3d>\n    1e13:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e1a <main+0xc44>\n    1e1a:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n    1e1e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e25 <main+0xc4f>\n    1e25:\t48 89 c7             \tmov    %rax,%rdi\n    1e28:\t8b 85 9c b6 fd ff    \tmov    -0x24964(%rbp),%eax\n    1e2e:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    1e34:\t41 b8 ff ff ff ff    \tmov    $0xffffffff,%r8d\n    1e3a:\t89 c1                \tmov    %eax,%ecx\n    1e3c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1e41:\te8 00 00 00 00       \tcallq  1e46 <main+0xc70>\n    1e46:\t48 89 85 18 b7 fd ff \tmov    %rax,-0x248e8(%rbp)\n    1e4d:\t48 83 bd 18 b7 fd ff \tcmpq   $0xffffffffffffffff,-0x248e8(%rbp)\n    1e54:\tff \n    1e55:\t75 28                \tjne    1e7f <main+0xca9>\n    1e57:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e5e <main+0xc88>\n    1e5e:\t48 89 c1             \tmov    %rax,%rcx\n    1e61:\tba 26 00 00 00       \tmov    $0x26,%edx\n    1e66:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1e6b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1e70:\te8 00 00 00 00       \tcallq  1e75 <main+0xc9f>\n    1e75:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    1e7a:\te8 00 00 00 00       \tcallq  1e7f <main+0xca9>\n    1e7f:\t48 8b 95 18 b7 fd ff \tmov    -0x248e8(%rbp),%rdx\n    1e86:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e8d <main+0xcb7>\n    1e8d:\t48 01 d0             \tadd    %rdx,%rax\n    1e90:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n    1e94:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e9b <main+0xcc5>\n    1e9b:\t48 21 d0             \tand    %rdx,%rax\n    1e9e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1ea5 <main+0xccf>\n    1ea5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1eac <main+0xcd6>\n    1eac:\t48 85 c0             \ttest   %rax,%rax\n    1eaf:\t74 20                \tje     1ed1 <main+0xcfb>\n    1eb1:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1eb8 <main+0xce2>\n    1eb8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ebf <main+0xce9>\n    1ebf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ec4:\t48 89 c7             \tmov    %rax,%rdi\n    1ec7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ecc:\te8 00 00 00 00       \tcallq  1ed1 <main+0xcfb>\n    1ed1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ed6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1edb:\te8 00 00 00 00       \tcallq  1ee0 <main+0xd0a>\n    1ee0:\t48 89 85 20 b7 fd ff \tmov    %rax,-0x248e0(%rbp)\n    1ee7:\t48 83 bd 20 b7 fd ff \tcmpq   $0x0,-0x248e0(%rbp)\n    1eee:\t00 \n    1eef:\t74 6e                \tje     1f5f <main+0xd89>\n    1ef1:\t48 8d 95 30 b7 fd ff \tlea    -0x248d0(%rbp),%rdx\n    1ef8:\t48 8b 85 20 b7 fd ff \tmov    -0x248e0(%rbp),%rax\n    1eff:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f04:\t48 89 c7             \tmov    %rax,%rdi\n    1f07:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f0c:\te8 00 00 00 00       \tcallq  1f11 <main+0xd3b>\n    1f11:\t83 f8 01             \tcmp    $0x1,%eax\n    1f14:\t75 3a                \tjne    1f50 <main+0xd7a>\n    1f16:\t48 8b 85 30 b7 fd ff \tmov    -0x248d0(%rbp),%rax\n    1f1d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1f24 <main+0xd4e>\n    1f24:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1f2b <main+0xd55>\n    1f2b:\t48 85 c0             \ttest   %rax,%rax\n    1f2e:\t74 20                \tje     1f50 <main+0xd7a>\n    1f30:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1f37 <main+0xd61>\n    1f37:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1f3e <main+0xd68>\n    1f3e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f43:\t48 89 c7             \tmov    %rax,%rdi\n    1f46:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f4b:\te8 00 00 00 00       \tcallq  1f50 <main+0xd7a>\n    1f50:\t48 8b 85 20 b7 fd ff \tmov    -0x248e0(%rbp),%rax\n    1f57:\t48 89 c7             \tmov    %rax,%rdi\n    1f5a:\te8 00 00 00 00       \tcallq  1f5f <main+0xd89>\n    1f5f:\t8b 85 7c b6 fd ff    \tmov    -0x24984(%rbp),%eax\n    1f65:\t2b 85 8c b6 fd ff    \tsub    -0x24974(%rbp),%eax\n    1f6b:\t89 85 a8 b6 fd ff    \tmov    %eax,-0x24958(%rbp)\n    1f71:\t8b 85 a8 b6 fd ff    \tmov    -0x24958(%rbp),%eax\n    1f77:\t83 c0 01             \tadd    $0x1,%eax\n    1f7a:\t48 98                \tcltq   \n    1f7c:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    1f81:\t48 89 c7             \tmov    %rax,%rdi\n    1f84:\te8 00 00 00 00       \tcallq  1f89 <main+0xdb3>\n    1f89:\t48 89 85 28 b7 fd ff \tmov    %rax,-0x248d8(%rbp)\n    1f90:\t48 83 bd 28 b7 fd ff \tcmpq   $0x0,-0x248d8(%rbp)\n    1f97:\t00 \n    1f98:\t75 28                \tjne    1fc2 <main+0xdec>\n    1f9a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1fa1 <main+0xdcb>\n    1fa1:\t48 89 c1             \tmov    %rax,%rcx\n    1fa4:\tba 2a 00 00 00       \tmov    $0x2a,%edx\n    1fa9:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1fae:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1fb3:\te8 00 00 00 00       \tcallq  1fb8 <main+0xde2>\n    1fb8:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    1fbd:\te8 00 00 00 00       \tcallq  1fc2 <main+0xdec>\n    1fc2:\tc7 85 94 b6 fd ff 00 \tmovl   $0x0,-0x2496c(%rbp)\n    1fc9:\t00 00 00 \n    1fcc:\t48 83 bd c8 b6 fd ff \tcmpq   $0x0,-0x24938(%rbp)\n    1fd3:\t00 \n    1fd4:\t0f 84 8b 00 00 00    \tje     2065 <main+0xe8f>\n    1fda:\t8b 85 94 b6 fd ff    \tmov    -0x2496c(%rbp),%eax\n    1fe0:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1fe3:\t89 95 94 b6 fd ff    \tmov    %edx,-0x2496c(%rbp)\n    1fe9:\t48 98                \tcltq   \n    1feb:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1ff2:\t00 \n    1ff3:\t48 8b 85 28 b7 fd ff \tmov    -0x248d8(%rbp),%rax\n    1ffa:\t48 8d 1c 02          \tlea    (%rdx,%rax,1),%rbx\n    1ffe:\t48 8b 85 c8 b6 fd ff \tmov    -0x24938(%rbp),%rax\n    2005:\t48 89 c7             \tmov    %rax,%rdi\n    2008:\te8 00 00 00 00       \tcallq  200d <main+0xe37>\n    200d:\t48 89 03             \tmov    %rax,(%rbx)\n    2010:\teb 53                \tjmp    2065 <main+0xe8f>\n    2012:\t8b 95 8c b6 fd ff    \tmov    -0x24974(%rbp),%edx\n    2018:\t8b 85 94 b6 fd ff    \tmov    -0x2496c(%rbp),%eax\n    201e:\t01 d0                \tadd    %edx,%eax\n    2020:\t48 98                \tcltq   \n    2022:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    2029:\t00 \n    202a:\t48 8b 85 70 b6 fd ff \tmov    -0x24990(%rbp),%rax\n    2031:\t48 01 d0             \tadd    %rdx,%rax\n    2034:\t48 8b 00             \tmov    (%rax),%rax\n    2037:\t8b 95 94 b6 fd ff    \tmov    -0x2496c(%rbp),%edx\n    203d:\t48 63 d2             \tmovslq %edx,%rdx\n    2040:\t48 8d 0c d5 00 00 00 \tlea    0x0(,%rdx,8),%rcx\n    2047:\t00 \n    2048:\t48 8b 95 28 b7 fd ff \tmov    -0x248d8(%rbp),%rdx\n    204f:\t48 8d 1c 11          \tlea    (%rcx,%rdx,1),%rbx\n    2053:\t48 89 c7             \tmov    %rax,%rdi\n    2056:\te8 00 00 00 00       \tcallq  205b <main+0xe85>\n    205b:\t48 89 03             \tmov    %rax,(%rbx)\n    205e:\t83 85 94 b6 fd ff 01 \taddl   $0x1,-0x2496c(%rbp)\n    2065:\t8b 85 94 b6 fd ff    \tmov    -0x2496c(%rbp),%eax\n    206b:\t3b 85 a8 b6 fd ff    \tcmp    -0x24958(%rbp),%eax\n    2071:\t7c 9f                \tjl     2012 <main+0xe3c>\n    2073:\t8b 85 a8 b6 fd ff    \tmov    -0x24958(%rbp),%eax\n    2079:\t48 98                \tcltq   \n    207b:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    2082:\t00 \n    2083:\t48 8b 85 28 b7 fd ff \tmov    -0x248d8(%rbp),%rax\n    208a:\t48 01 d0             \tadd    %rdx,%rax\n    208d:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    2094:\t48 8b 85 e8 b6 fd ff \tmov    -0x24918(%rbp),%rax\n    209b:\tba 30 46 02 00       \tmov    $0x24630,%edx\n    20a0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    20a5:\t48 89 c7             \tmov    %rax,%rdi\n    20a8:\te8 00 00 00 00       \tcallq  20ad <main+0xed7>\n    20ad:\t48 8b 85 e8 b6 fd ff \tmov    -0x24918(%rbp),%rax\n    20b4:\t48 89 c7             \tmov    %rax,%rdi\n    20b7:\te8 00 00 00 00       \tcallq  20bc <main+0xee6>\n    20bc:\t48 8b 85 e8 b6 fd ff \tmov    -0x24918(%rbp),%rax\n    20c3:\t48 8b 95 e0 b6 fd ff \tmov    -0x24920(%rbp),%rdx\n    20ca:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    20ce:\t48 8b 85 e8 b6 fd ff \tmov    -0x24918(%rbp),%rax\n    20d5:\t48 8d 95 f0 b7 fd ff \tlea    -0x24810(%rbp),%rdx\n    20dc:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    20e0:\t48 8b 85 08 b7 fd ff \tmov    -0x248f8(%rbp),%rax\n    20e7:\t48 8b 95 e8 b6 fd ff \tmov    -0x24918(%rbp),%rdx\n    20ee:\t48 89 90 70 97 00 00 \tmov    %rdx,0x9770(%rax)\n    20f5:\t48 8b 85 e8 b6 fd ff \tmov    -0x24918(%rbp),%rax\n    20fc:\t48 89 c7             \tmov    %rax,%rdi\n    20ff:\te8 00 00 00 00       \tcallq  2104 <main+0xf2e>\n    2104:\t4c 8d 85 f0 b7 fd ff \tlea    -0x24810(%rbp),%r8\n    210b:\t48 8b bd e0 b6 fd ff \tmov    -0x24920(%rbp),%rdi\n    2112:\t48 8b 8d d8 b6 fd ff \tmov    -0x24928(%rbp),%rcx\n    2119:\t48 8b 95 10 b7 fd ff \tmov    -0x248f0(%rbp),%rdx\n    2120:\t48 8b b5 28 b7 fd ff \tmov    -0x248d8(%rbp),%rsi\n    2127:\t48 8b 85 00 b7 fd ff \tmov    -0x24900(%rbp),%rax\n    212e:\t4d 89 c1             \tmov    %r8,%r9\n    2131:\t49 89 f8             \tmov    %rdi,%r8\n    2134:\t48 89 c7             \tmov    %rax,%rdi\n    2137:\te8 00 00 00 00       \tcallq  213c <main+0xf66>\n    213c:\t89 85 ac b6 fd ff    \tmov    %eax,-0x24954(%rbp)\n    2142:\t83 bd ac b6 fd ff 00 \tcmpl   $0x0,-0x24954(%rbp)\n    2149:\t74 28                \tje     2173 <main+0xf9d>\n    214b:\t48 8b 95 00 b7 fd ff \tmov    -0x24900(%rbp),%rdx\n    2152:\t8b 85 ac b6 fd ff    \tmov    -0x24954(%rbp),%eax\n    2158:\t89 c6                \tmov    %eax,%esi\n    215a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    215f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2164:\te8 00 00 00 00       \tcallq  2169 <main+0xf93>\n    2169:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    216e:\te8 00 00 00 00       \tcallq  2173 <main+0xf9d>\n    2173:\tc7 85 94 b6 fd ff 00 \tmovl   $0x0,-0x2496c(%rbp)\n    217a:\t00 00 00 \n    217d:\teb 2c                \tjmp    21ab <main+0xfd5>\n    217f:\t8b 85 94 b6 fd ff    \tmov    -0x2496c(%rbp),%eax\n    2185:\t48 98                \tcltq   \n    2187:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    218e:\t00 \n    218f:\t48 8b 85 28 b7 fd ff \tmov    -0x248d8(%rbp),%rax\n    2196:\t48 01 d0             \tadd    %rdx,%rax\n    2199:\t48 8b 00             \tmov    (%rax),%rax\n    219c:\t48 89 c7             \tmov    %rax,%rdi\n    219f:\te8 00 00 00 00       \tcallq  21a4 <main+0xfce>\n    21a4:\t83 85 94 b6 fd ff 01 \taddl   $0x1,-0x2496c(%rbp)\n    21ab:\t8b 85 94 b6 fd ff    \tmov    -0x2496c(%rbp),%eax\n    21b1:\t3b 85 a8 b6 fd ff    \tcmp    -0x24958(%rbp),%eax\n    21b7:\t7c c6                \tjl     217f <main+0xfa9>\n    21b9:\t48 8b 85 28 b7 fd ff \tmov    -0x248d8(%rbp),%rax\n    21c0:\t48 89 c7             \tmov    %rax,%rdi\n    21c3:\te8 00 00 00 00       \tcallq  21c8 <main+0xff2>\n    21c8:\t48 8b 85 10 b7 fd ff \tmov    -0x248f0(%rbp),%rax\n    21cf:\t48 89 85 c0 b6 fd ff \tmov    %rax,-0x24940(%rbp)\n    21d6:\teb 1a                \tjmp    21f2 <main+0x101c>\n    21d8:\t48 8b 85 c0 b6 fd ff \tmov    -0x24940(%rbp),%rax\n    21df:\t48 8b 00             \tmov    (%rax),%rax\n    21e2:\t48 89 c7             \tmov    %rax,%rdi\n    21e5:\te8 00 00 00 00       \tcallq  21ea <main+0x1014>\n    21ea:\t48 83 85 c0 b6 fd ff \taddq   $0x8,-0x24940(%rbp)\n    21f1:\t08 \n    21f2:\t48 8b 85 c0 b6 fd ff \tmov    -0x24940(%rbp),%rax\n    21f9:\t48 8b 00             \tmov    (%rax),%rax\n    21fc:\t48 85 c0             \ttest   %rax,%rax\n    21ff:\t75 d7                \tjne    21d8 <main+0x1002>\n    2201:\t48 8b 85 10 b7 fd ff \tmov    -0x248f0(%rbp),%rax\n    2208:\t48 89 c7             \tmov    %rax,%rdi\n    220b:\te8 00 00 00 00       \tcallq  2210 <main+0x103a>\n    2210:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2217 <main+0x1041>\n    2217:\t48 85 c0             \ttest   %rax,%rax\n    221a:\t0f 84 b3 01 00 00    \tje     23d3 <main+0x11fd>\n    2220:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2227 <main+0x1051>\n    2227:\t48 85 c0             \ttest   %rax,%rax\n    222a:\t74 20                \tje     224c <main+0x1076>\n    222c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2233 <main+0x105d>\n    2233:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 223a <main+0x1064>\n    223a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    223f:\t48 89 c7             \tmov    %rax,%rdi\n    2242:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2247:\te8 00 00 00 00       \tcallq  224c <main+0x1076>\n    224c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2253 <main+0x107d>\n    2253:\t48 89 c7             \tmov    %rax,%rdi\n    2256:\te8 00 00 00 00       \tcallq  225b <main+0x1085>\n    225b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2262 <main+0x108c>\n    2262:\t48 85 c0             \ttest   %rax,%rax\n    2265:\t74 23                \tje     228a <main+0x10b4>\n    2267:\t48 8b 85 e0 b6 fd ff \tmov    -0x24920(%rbp),%rax\n    226e:\t8b 50 14             \tmov    0x14(%rax),%edx\n    2271:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2278 <main+0x10a2>\n    2278:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    227d:\t48 89 c7             \tmov    %rax,%rdi\n    2280:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2285:\te8 00 00 00 00       \tcallq  228a <main+0x10b4>\n    228a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2291 <main+0x10bb>\n    2291:\t48 85 c0             \ttest   %rax,%rax\n    2294:\t74 23                \tje     22b9 <main+0x10e3>\n    2296:\t48 8b 85 e0 b6 fd ff \tmov    -0x24920(%rbp),%rax\n    229d:\t8b 50 08             \tmov    0x8(%rax),%edx\n    22a0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 22a7 <main+0x10d1>\n    22a7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    22ac:\t48 89 c7             \tmov    %rax,%rdi\n    22af:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22b4:\te8 00 00 00 00       \tcallq  22b9 <main+0x10e3>\n    22b9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 22c0 <main+0x10ea>\n    22c0:\t48 85 c0             \ttest   %rax,%rax\n    22c3:\t74 23                \tje     22e8 <main+0x1112>\n    22c5:\t48 8b 85 e0 b6 fd ff \tmov    -0x24920(%rbp),%rax\n    22cc:\t8b 50 04             \tmov    0x4(%rax),%edx\n    22cf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 22d6 <main+0x1100>\n    22d6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    22db:\t48 89 c7             \tmov    %rax,%rdi\n    22de:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22e3:\te8 00 00 00 00       \tcallq  22e8 <main+0x1112>\n    22e8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 22ef <main+0x1119>\n    22ef:\t48 85 c0             \ttest   %rax,%rax\n    22f2:\t74 23                \tje     2317 <main+0x1141>\n    22f4:\t48 8b 85 e0 b6 fd ff \tmov    -0x24920(%rbp),%rax\n    22fb:\t8b 50 0c             \tmov    0xc(%rax),%edx\n    22fe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2305 <main+0x112f>\n    2305:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    230a:\t48 89 c7             \tmov    %rax,%rdi\n    230d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2312:\te8 00 00 00 00       \tcallq  2317 <main+0x1141>\n    2317:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 231e <main+0x1148>\n    231e:\t48 85 c0             \ttest   %rax,%rax\n    2321:\t74 23                \tje     2346 <main+0x1170>\n    2323:\t48 8b 85 e0 b6 fd ff \tmov    -0x24920(%rbp),%rax\n    232a:\t8b 50 10             \tmov    0x10(%rax),%edx\n    232d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2334 <main+0x115e>\n    2334:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2339:\t48 89 c7             \tmov    %rax,%rdi\n    233c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2341:\te8 00 00 00 00       \tcallq  2346 <main+0x1170>\n    2346:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 234d <main+0x1177>\n    234d:\t48 85 c0             \ttest   %rax,%rax\n    2350:\t74 23                \tje     2375 <main+0x119f>\n    2352:\t48 8b 85 e0 b6 fd ff \tmov    -0x24920(%rbp),%rax\n    2359:\t8b 50 28             \tmov    0x28(%rax),%edx\n    235c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2363 <main+0x118d>\n    2363:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2368:\t48 89 c7             \tmov    %rax,%rdi\n    236b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2370:\te8 00 00 00 00       \tcallq  2375 <main+0x119f>\n    2375:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 237c <main+0x11a6>\n    237c:\t48 85 c0             \ttest   %rax,%rax\n    237f:\t74 23                \tje     23a4 <main+0x11ce>\n    2381:\t48 8b 85 e0 b6 fd ff \tmov    -0x24920(%rbp),%rax\n    2388:\t8b 50 18             \tmov    0x18(%rax),%edx\n    238b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2392 <main+0x11bc>\n    2392:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2397:\t48 89 c7             \tmov    %rax,%rdi\n    239a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    239f:\te8 00 00 00 00       \tcallq  23a4 <main+0x11ce>\n    23a4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 23ab <main+0x11d5>\n    23ab:\t48 85 c0             \ttest   %rax,%rax\n    23ae:\t74 23                \tje     23d3 <main+0x11fd>\n    23b0:\t48 8b 85 e0 b6 fd ff \tmov    -0x24920(%rbp),%rax\n    23b7:\t8b 50 30             \tmov    0x30(%rax),%edx\n    23ba:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 23c1 <main+0x11eb>\n    23c1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    23c6:\t48 89 c7             \tmov    %rax,%rdi\n    23c9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    23ce:\te8 00 00 00 00       \tcallq  23d3 <main+0x11fd>\n    23d3:\t48 8b 85 e0 b6 fd ff \tmov    -0x24920(%rbp),%rax\n    23da:\t8b 40 18             \tmov    0x18(%rax),%eax\n    23dd:\t89 c7                \tmov    %eax,%edi\n    23df:\te8 00 00 00 00       \tcallq  23e4 <main+0x120e>\n    23e4:\te8 00 00 00 00       \tcallq  23e9 <main+0x1213>\n    23e9:\te8 00 00 00 00       \tcallq  23ee <main+0x1218>\n    23ee:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    23f3:\te8 00 00 00 00       \tcallq  23f8 <main+0x1222>\n    23f8:\t48 8b 85 d8 b6 fd ff \tmov    -0x24928(%rbp),%rax\n    23ff:\t8b 40 04             \tmov    0x4(%rax),%eax\n    2402:\t89 c2                \tmov    %eax,%edx\n    2404:\t48 8b 85 08 b7 fd ff \tmov    -0x248f8(%rbp),%rax\n    240b:\t48 89 50 48          \tmov    %rdx,0x48(%rax)\n    240f:\t48 8b 85 d8 b6 fd ff \tmov    -0x24928(%rbp),%rax\n    2416:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2419:\t89 c2                \tmov    %eax,%edx\n    241b:\t48 8b 85 08 b7 fd ff \tmov    -0x248f8(%rbp),%rax\n    2422:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n    2426:\t48 8b 85 d8 b6 fd ff \tmov    -0x24928(%rbp),%rax\n    242d:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    2430:\t89 c2                \tmov    %eax,%edx\n    2432:\t48 8b 85 08 b7 fd ff \tmov    -0x248f8(%rbp),%rax\n    2439:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n    243d:\tc7 85 a0 b6 fd ff 00 \tmovl   $0x0,-0x24960(%rbp)\n    2444:\t00 00 00 \n    2447:\teb 34                \tjmp    247d <main+0x12a7>\n    2449:\t48 8b 85 d8 b6 fd ff \tmov    -0x24928(%rbp),%rax\n    2450:\t8b 95 a0 b6 fd ff    \tmov    -0x24960(%rbp),%edx\n    2456:\t48 63 d2             \tmovslq %edx,%rdx\n    2459:\t48 83 c2 04          \tadd    $0x4,%rdx\n    245d:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    2460:\t89 c1                \tmov    %eax,%ecx\n    2462:\t48 8b 85 08 b7 fd ff \tmov    -0x248f8(%rbp),%rax\n    2469:\t8b 95 a0 b6 fd ff    \tmov    -0x24960(%rbp),%edx\n    246f:\t48 63 d2             \tmovslq %edx,%rdx\n    2472:\t48 89 0c d0          \tmov    %rcx,(%rax,%rdx,8)\n    2476:\t83 85 a0 b6 fd ff 01 \taddl   $0x1,-0x24960(%rbp)\n    247d:\t83 bd a0 b6 fd ff 07 \tcmpl   $0x7,-0x24960(%rbp)\n    2484:\t7e c3                \tjle    2449 <main+0x1273>\n    2486:\tc7 85 a0 b6 fd ff 00 \tmovl   $0x0,-0x24960(%rbp)\n    248d:\t00 00 00 \n    2490:\teb 41                \tjmp    24d3 <main+0x12fd>\n    2492:\t8b 85 a0 b6 fd ff    \tmov    -0x24960(%rbp),%eax\n    2498:\t8d 50 08             \tlea    0x8(%rax),%edx\n    249b:\t48 8b 85 d8 b6 fd ff \tmov    -0x24928(%rbp),%rax\n    24a2:\t48 63 d2             \tmovslq %edx,%rdx\n    24a5:\t48 83 c2 04          \tadd    $0x4,%rdx\n    24a9:\t8b 0c 90             \tmov    (%rax,%rdx,4),%ecx\n    24ac:\t48 8b 85 08 b7 fd ff \tmov    -0x248f8(%rbp),%rax\n    24b3:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    24b7:\t8b 95 a0 b6 fd ff    \tmov    -0x24960(%rbp),%edx\n    24bd:\t48 63 d2             \tmovslq %edx,%rdx\n    24c0:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    24c4:\t48 01 d0             \tadd    %rdx,%rax\n    24c7:\t89 ca                \tmov    %ecx,%edx\n    24c9:\t48 89 10             \tmov    %rdx,(%rax)\n    24cc:\t83 85 a0 b6 fd ff 01 \taddl   $0x1,-0x24960(%rbp)\n    24d3:\t83 bd a0 b6 fd ff 07 \tcmpl   $0x7,-0x24960(%rbp)\n    24da:\t7e b6                \tjle    2492 <main+0x12bc>\n    24dc:\t83 bd 90 b6 fd ff 00 \tcmpl   $0x0,-0x24970(%rbp)\n    24e3:\t74 21                \tje     2506 <main+0x1330>\n    24e5:\t8b 85 90 b6 fd ff    \tmov    -0x24970(%rbp),%eax\n    24eb:\t89 c7                \tmov    %eax,%edi\n    24ed:\te8 00 00 00 00       \tcallq  24f2 <main+0x131c>\n    24f2:\t48 8b 85 08 b7 fd ff \tmov    -0x248f8(%rbp),%rax\n    24f9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    24fe:\t48 89 c7             \tmov    %rax,%rdi\n    2501:\te8 00 00 00 00       \tcallq  2506 <main+0x1330>\n    2506:\t48 8b 85 08 b7 fd ff \tmov    -0x248f8(%rbp),%rax\n    250d:\t48 89 c7             \tmov    %rax,%rdi\n    2510:\te8 00 00 00 00       \tcallq  2515 <main+0x133f>\n    2515:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    251a:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    251e:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n    2525:\t00 00 \n    2527:\t74 05                \tje     252e <main+0x1358>\n    2529:\te8 00 00 00 00       \tcallq  252e <main+0x1358>\n    252e:\t48 81 c4 98 49 02 00 \tadd    $0x24998,%rsp\n    2535:\t5b                   \tpop    %rbx\n    2536:\t5d                   \tpop    %rbp\n    2537:\tc3                   \tretq   \n", "code_s": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  int v10;\n  int v11;\n  int v12;\n  int v13;\n  int v14;\n  int v15;\n  int v16;\n  _QWORD *v17;\n  char **v18;\n  int v19;\n  unsigned int v20;\n  int v21;\n  int j;\n  int v23;\n  int flags;\n  int k;\n  int l;\n  unsigned int v27;\n  int v28;\n  unsigned int v29;\n  char *s1;\n  char *v31;\n  void **i;\n  char *v33;\n  const char **m;\n  void *s;\n  void *v36;\n  void *v37;\n  __int64 v38;\n  size_t v39;\n  const char *v40;\n  _QWORD *v41;\n  void *v42;\n  void *addr;\n  FILE *stream;\n  void *ptr;\n  struct rlimit64 <span class=\"supfact\">rlimits</span>;\n  char <span class=\"supfact\">v47</span>;\n  char <span class=\"supfact\">v48</span>;\n  char <span class=\"supfact\">v49</span>[Number];\n  char <span class=\"supfact\">v50</span>;\n  unsigned __int64 v51;\n  v51 = __readfsqword(Number);\n  s = &<span class=\"supfact\">v48</span>;\n  v36 = &<span class=\"supfact\">v47</span>;\n  v37 = &<span class=\"supfact\">v50</span>;\n  v20 = Number;\n  v38 = Number L;\n  v33 = Number L;\n  if (argc <= Number)\n    usage();\n  cpu_set_log_filename(String);\n  v38 = envlist_create();\n  if (!v38) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  for (i = (void **)environ; *i; ++i)\n    envlist_setenv(v38, *i);\n  if (!getrlimit64(RLIMIT_STACK, &<span class=\"supfact\">rlimits</span>) &&\n      <span class=\"supfact\">rlimits</span>.rlim_cur != Number)\n    guest_stack_size = <span class=\"supfact\">rlimits</span>.rlim_cur;\n  v31 = Number L;\n  v19 = Number;\n  while (Number) {\n    while (Number) {\n      while (Number) {\n        while (Number) {\n          while (Number) {\n            while (Number) {\n              while (Number) {\n                while (Number) {\n                  while (Number) {\n                    while (Number) {\n                      while (Number) {\n                        while (Number) {\n                          while (Number) {\n                            if (v19 >= argc ||\n                                (s1 = (char *)argv[v19], *s1 != Number) ||\n                                (++v19, ++s1, !strcmp(s1, String))) {\n                            LABEL_81:\n                              if (v19 >= argc)\n                                usage();\n                              v40 = argv[v19];\n                              exec_path = (__int64)argv[v19];\n                              memset(s, Number, Number);\n                              memset(v36, Number, Number);\n                              memset(<span class=\"supfact\">v49</span>, Number,\n                                     sizeof(<span class=\"supfact\">v49</span>));\n                              init_paths(interp_prefix);\n                              if (!v31)\n                                v31 = String;\n                              cpu_exec_init_all(Number L);\n                              v41 = (_QWORD *)cpu_sparc_init(v31);\n                              if (!v41) {\n                                fwrite(String, Number, Number, stderr);\n                                exit(Number);\n                              }\n                              cpu_reset(v41);\n                              thread_env = (__int64)v41;\n                              if (getenv(String))\n                                do_strace = Number;\n                              v42 = (void *)envlist_to_environ(v38, Number L);\n                              envlist_free(v38);\n                              guest_base =\n                                  (void *)(((unsigned __int64)guest_base +\n                                            qemu_host_page_size - Number) &\n                                           qemu_host_page_mask);\n                              if (reserved_va) {\n                                flags = Number;\n                                if (have_guest_base)\n                                  flags = Number;\n                                addr = mmap64(guest_base, reserved_va, Number,\n                                              flags, Number, Number L);\n                                if (addr == (void *)Number) {\n                                  fwrite(String, Number, Number, stderr);\n                                  exit(Number);\n                                }\n                                guest_base = addr;\n                                if ((~qemu_host_page_mask &\n                                     (unsigned __int64)addr) != Number) {\n                                  munmap(addr, reserved_va);\n                                  addr =\n                                      mmap64(guest_base,\n                                             reserved_va + qemu_host_page_size,\n                                             Number, flags, Number, Number L);\n                                  if (addr == (void *)Number) {\n                                    fwrite(String, Number, Number, stderr);\n                                    exit(Number);\n                                  }\n                                  guest_base =\n                                      (void *)(((unsigned __int64)addr +\n                                                qemu_host_page_size - Number) &\n                                               qemu_host_page_mask);\n                                }\n                                if (logfile)\n                                  fprintf(logfile, String, reserved_va);\n                              }\n                              stream = fopen64(String, String);\n                              if (stream) {\n                                if (fscanf(stream, String,\n                                           &<span class=\"supfact\">rlimits</span>) ==\n                                    Number) {\n                                  mmap_min_addr =\n                                      <span class=\"supfact\">rlimits</span>.rlim_cur;\n                                  if (logfile)\n                                    fprintf(logfile, String, mmap_min_addr);\n                                }\n                                fclose(stream);\n                              }\n                              v28 = argc - v19;\n                              ptr = calloc(argc - v19 + Number, Number);\n                              if (!ptr) {\n                                fwrite(String, Number, Number, stderr);\n                                exit(Number);\n                              }\n                              v21 = Number;\n                              if (v33) {\n                                v21 = Number;\n                                v17 = ptr;\n                                *v17 = strdup(v33);\n                              }\n                              while (v21 < v28) {\n                                v18 = (char **)((char *)ptr + Number * v21);\n                                *v18 = strdup((&argv[v19])[v21++]);\n                              }\n                              *((_QWORD *)ptr + v28) = Number L;\n                              memset(v37, Number, Number);\n                              init_task_state((__int64)v37);\n                              *((_QWORD *)v37 + Number) = v36;\n                              *((_QWORD *)v37 + Number) = <span class=\"supfact\">v49</span>;\n                              v41[Number] = v37;\n                              task_settid((__pid_t *)v37);\n                              v29 = loader_exec(v40, ptr, v42, s, v36,\n                                                <span class=\"supfact\">v49</span>);\n                              if (v29) {\n                                printf(String, v29, v40);\n                                exit(Number);\n                              }\n                              for (j = Number; j < v28; ++j)\n                                free(*((void **)ptr + j));\n                              free(ptr);\n                              for (i = (void **)v42; *i; ++i)\n                                free(*i);\n                              free(v42);\n                              if (logfile) {\n                                fprintf(logfile, String, guest_base);\n                                page_dump(logfile);\n                                if (logfile)\n                                  fprintf(logfile, String,\n                                          *((unsigned int *)v36 + Number));\n                                if (logfile)\n                                  fprintf(logfile, String,\n                                          *((unsigned int *)v36 + Number));\n                                if (logfile)\n                                  fprintf(logfile, String,\n                                          *((unsigned int *)v36 + Number));\n                                if (logfile)\n                                  fprintf(logfile, String,\n                                          *((unsigned int *)v36 + Number));\n                                if (logfile)\n                                  fprintf(logfile, String,\n                                          *((unsigned int *)v36 + Number));\n                                if (logfile)\n                                  fprintf(logfile, String,\n                                          *((unsigned int *)v36 + Number));\n                                if (logfile)\n                                  fprintf(logfile, String,\n                                          *((unsigned int *)v36 + Number));\n                                if (logfile)\n                                  fprintf(logfile, String,\n                                          *((unsigned int *)v36 + Number));\n                              }\n                              target_set_brk(*((unsigned int *)v36 + Number));\n                              syscall_init();\n                              signal_init();\n                              tcg_prologue_init(&tcg_ctx);\n                              v41[Number] = *((unsigned int *)s + Number);\n                              v41[Number] = *((unsigned int *)s + Number);\n                              v41[Number] = *((unsigned int *)s + Number);\n                              for (k = Number; k <= Number; ++k)\n                                v41[k] = *((unsigned int *)s + k + Number);\n                              for (l = Number; l <= Number; ++l)\n                                *(_QWORD *)(Number L * l + v41[Number]) =\n                                    *((unsigned int *)s + l + Number);\n                              if (v20) {\n                                gdbserver_start(v20);\n                                gdb_handlesig(v41, Number L);\n                              }\n                              cpu_loop((__int64)v41);\n                            }\n                            if (strcmp(s1, String))\n                              break;\n                            if (v19 >= argc)\n                              goto LABEL_81;\n                            v3 = v19++;\n                            s1 = (char *)argv[v3];\n                            v27 = cpu_str_to_log_mask(s1);\n                            if (!v27) {\n                              puts(String);\n                              for (m = (const char **)&cpu_log_items;\n                                   *(_DWORD *)m; m += Number)\n                                printf(String, m[Number], m[Number]);\n                              exit(Number);\n                            }\n                            cpu_set_log(v27);\n                          }\n                          if (strcmp(s1, String))\n                            break;\n                          v4 = v19++;\n                          s1 = (char *)argv[v4];\n                          if ((unsigned int)envlist_setenv(v38, s1))\n                            usage();\n                        }\n                        if (strcmp(s1, String))\n                          break;\n                        v5 = v19++;\n                        s1 = (char *)argv[v5];\n                        if ((unsigned int)envlist_unsetenv(v38, s1))\n                          usage();\n                      }\n                      if (strcmp(s1, String))\n                        break;\n                      v6 = v19++;\n                      s1 = (char *)argv[v6];\n                      v33 = s1;\n                    }\n                    if (strcmp(s1, String))\n                      break;\n                    if (v19 >= argc)\n                      goto LABEL_81;\n                    v7 = v19++;\n                    s1 = (char *)argv[v7];\n                    guest_stack_size = strtoul(s1, &s1, Number);\n                    if (!guest_stack_size)\n                      usage();\n                    if (*s1 == Number) {\n                      guest_stack_size <<= Number;\n                    } else if (*s1 == Number || *s1 == Number) {\n                      guest_stack_size <<= Number;\n                    }\n                  }\n                  if (strcmp(s1, String))\n                    break;\n                  v8 = v19++;\n                  interp_prefix = (char *)argv[v8];\n                }\n                if (strcmp(s1, String))\n                  break;\n                if (v19 >= argc)\n                  goto LABEL_81;\n                v9 = v19++;\n                v10 = atoi(argv[v9]);\n                qemu_host_page_size = v10;\n                if (!v10 || ((qemu_host_page_size - Number L) &\n                             qemu_host_page_size) != Number) {\n                  fwrite(String, Number, Number, stderr);\n                  exit(Number);\n                }\n              }\n              if (strcmp(s1, String))\n                break;\n              if (v19 >= argc)\n                goto LABEL_81;\n              v11 = v19++;\n              v20 = atoi(argv[v11]);\n            }\n            if (strcmp(s1, String))\n              break;\n            v12 = v19++;\n            qemu_uname_release = (void *)argv[v12];\n          }\n          if (strcmp(s1, String))\n            break;\n          v13 = v19++;\n          v31 = (char *)argv[v13];\n          if (!v31 || !strcmp(v31, String)) {\n            sparc_cpu_list(stdout, &fprintf);\n            exit(Number);\n          }\n        }\n        if (strcmp(s1, String))\n          break;\n        v14 = v19++;\n        guest_base = (void *)strtol(argv[v14], Number L, Number);\n        have_guest_base = Number;\n      }\n      if (!strcmp(s1, String))\n        break;\n      if (!strcmp(s1, String)) {\n        envlist_unsetenv(v38, String);\n      } else if (!strcmp(s1, String)) {\n        singlestep = Number;\n      } else {\n        if (strcmp(s1, String))\n          usage();\n        do_strace = Number;\n      }\n    }\n    v23 = Number;\n    v15 = v19++;\n    reserved_va = strtoul(argv[v15], (char **)&<span class=\"supfact\">rlimits</span>, Number);\n    v16 = *(char *)<span class=\"supfact\">rlimits</span>.rlim_cur;\n    if (v16 == Number)\n      goto LABEL_65;\n    if (v16 <= Number) {\n      if (v16 == Number) {\n        v23 = Number;\n        goto LABEL_68;\n      }\n      if (v16 <= Number) {\n        if (v16 == Number) {\n          v23 = Number;\n          goto LABEL_68;\n        }\n        if (v16 == Number)\n        LABEL_65:\n          v23 = Number;\n      }\n    }\n  LABEL_68:\n    if (v23) {\n      v39 = reserved_va;\n      ++<span class=\"supfact\">rlimits</span>.rlim_cur;\n      reserved_va <<= v23;\n      if (v39 != reserved_va >> v23 || reserved_va > Number) {\n        fwrite(String, Number, Number, stderr);\n        exit(Number);\n      }\n    }\n    if (*(_BYTE *)<span class=\"supfact\">rlimits</span>.rlim_cur) {\n      fprintf(stderr, String, (const char *)<span class=\"supfact\">rlimits</span>.rlim_cur);\n      exit(Number);\n    }\n  }\n}", "code_t": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  int v10;\n  int v11;\n  int v12;\n  int v13;\n  int v14;\n  int v15;\n  int v16;\n  char **v17;\n  char **v18;\n  int optind;\n  unsigned int gdbstub_port;\n  int i;\n  int ia;\n  int shift;\n  int flags;\n  int i_0;\n  int i_0a;\n  unsigned int mask;\n  int target_argc;\n  unsigned int ret;\n  const char *r;\n  const char *cpu_model;\n  char **wrk;\n  const char *argv0;\n  const CPULogItem_0 *item;\n  target_pt_regs *regs;\n  image_info *info;\n  TaskState_0 *ts;\n  envlist_t *envlist;\n  unsigned __int64 unshifted;\n  const char *filename;\n  CPUSPARCState *env;\n  char **target_environ;\n  void *p_0;\n  FILE *fp;\n  char **target_argv;\n  struct rlimit64 <span class=\"supfact\">tmp</span>;\n  image_info <span class=\"supfact\">info1</span>;\n  target_pt_regs <span class=\"supfact\">regs1</span>;\n  linux_binprm <span class=\"supfact\">bprm</span>;\n  TaskState_0 <span class=\"supfact\">ts1</span>;\n  unsigned __int64 v51;\n  v51 = __readfsqword(Number);\n  regs = &<span class=\"supfact\">regs1</span>;\n  info = &<span class=\"supfact\">info1</span>;\n  ts = &<span class=\"supfact\">ts1</span>;\n  gdbstub_port = Number;\n  envlist = Number L;\n  argv0 = Number L;\n  if (argc <= Number)\n    usage();\n  cpu_set_log_filename(String);\n  envlist = (envlist_t *)envlist_create();\n  if (!envlist) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  for (wrk = environ; *wrk; ++wrk)\n    envlist_setenv(envlist, *wrk);\n  if (!getrlimit64(RLIMIT_STACK, &<span class=\"supfact\">tmp</span>) &&\n      <span class=\"supfact\">tmp</span>.rlim_cur != Number)\n    guest_stack_size = <span class=\"supfact\">tmp</span>.rlim_cur;\n  cpu_model = Number L;\n  optind = Number;\n  while (Number) {\n    while (Number) {\n      while (Number) {\n        while (Number) {\n          while (Number) {\n            while (Number) {\n              while (Number) {\n                while (Number) {\n                  while (Number) {\n                    while (Number) {\n                      while (Number) {\n                        while (Number) {\n                          while (Number) {\n                            if (optind >= argc ||\n                                (r = argv[optind], *r != Number) ||\n                                (++optind, ++r, !strcmp(r, String))) {\n                            LABEL_81:\n                              if (optind >= argc)\n                                usage();\n                              filename = argv[optind];\n                              exec_path = (CPUSPARCState *)argv[optind];\n                              memset(regs, Number, sizeof(target_pt_regs));\n                              memset(info, Number, sizeof(image_info));\n                              memset(&<span class=\"supfact\">bprm</span>, Number,\n                                     sizeof(<span class=\"supfact\">bprm</span>));\n                              init_paths(interp_prefix);\n                              if (!cpu_model)\n                                cpu_model = String;\n                              cpu_exec_init_all(Number L);\n                              env = (CPUSPARCState *)cpu_sparc_init(cpu_model);\n                              if (!env) {\n                                fwrite(String, Number, Number, stderr);\n                                exit(Number);\n                              }\n                              cpu_reset(env);\n                              thread_env = (__int64)env;\n                              if (getenv(String))\n                                do_strace = Number;\n                              target_environ = (char **)envlist_to_environ(\n                                  envlist, Number L);\n                              envlist_free(envlist);\n                              guest_base =\n                                  (void *)(((unsigned __int64)guest_base +\n                                            qemu_host_page_size - Number) &\n                                           qemu_host_page_mask);\n                              if (reserved_va) {\n                                flags = Number;\n                                if (have_guest_base)\n                                  flags = Number;\n                                p_0 = mmap64(guest_base, reserved_va, Number,\n                                             flags, Number, Number L);\n                                if (p_0 == (void *)Number) {\n                                  fwrite(String, Number, Number, stderr);\n                                  exit(Number);\n                                }\n                                guest_base = p_0;\n                                if ((~qemu_host_page_mask &\n                                     (unsigned __int64)p_0) != Number) {\n                                  munmap(p_0, reserved_va);\n                                  p_0 =\n                                      mmap64(guest_base,\n                                             reserved_va + qemu_host_page_size,\n                                             Number, flags, Number, Number L);\n                                  if (p_0 == (void *)Number) {\n                                    fwrite(String, Number, Number, stderr);\n                                    exit(Number);\n                                  }\n                                  guest_base =\n                                      (void *)(((unsigned __int64)p_0 +\n                                                qemu_host_page_size - Number) &\n                                               qemu_host_page_mask);\n                                }\n                                if (logfile)\n                                  fprintf(logfile, String, reserved_va);\n                              }\n                              fp = fopen64(String, String);\n                              if (fp) {\n                                if (fscanf(fp, String, &<span class=\"supfact\">tmp</span>) ==\n                                    Number) {\n                                  mmap_min_addr = <span class=\"supfact\">tmp</span>.rlim_cur;\n                                  if (logfile)\n                                    fprintf(logfile, String, mmap_min_addr);\n                                }\n                                fclose(fp);\n                              }\n                              target_argc = argc - optind;\n                              target_argv = (char **)calloc(\n                                  argc - optind + Number, Number);\n                              if (!target_argv) {\n                                fwrite(String, Number, Number, stderr);\n                                exit(Number);\n                              }\n                              i = Number;\n                              if (argv0) {\n                                i = Number;\n                                v17 = target_argv;\n                                *v17 = strdup(argv0);\n                              }\n                              while (i < target_argc) {\n                                v18 = &target_argv[i];\n                                *v18 = strdup((&argv[optind])[i++]);\n                              }\n                              target_argv[target_argc] = Number L;\n                              memset(ts, Number, sizeof(TaskState_0));\n                              init_task_state(ts);\n                              ts->info = info;\n                              ts-><span class=\"supfact\">bprm</span> = &<span class=\"supfact\">bprm</span>;\n                              env->opaque = ts;\n                              task_settid(ts);\n                              ret = loader_exec(filename, target_argv,\n                                                target_environ, regs, info,\n                                                &<span class=\"supfact\">bprm</span>);\n                              if (ret) {\n                                printf(String, ret, filename);\n                                exit(Number);\n                              }\n                              for (ia = Number; ia < target_argc; ++ia)\n                                free(target_argv[ia]);\n                              free(target_argv);\n                              for (wrk = target_environ; *wrk; ++wrk)\n                                free(*wrk);\n                              free(target_environ);\n                              if (logfile) {\n                                fprintf(logfile, String, guest_base);\n                                page_dump(logfile);\n                                if (logfile)\n                                  fprintf(logfile, String, info->start_brk);\n                                if (logfile)\n                                  fprintf(logfile, String, info->end_code);\n                                if (logfile)\n                                  fprintf(logfile, String, info->start_code);\n                                if (logfile)\n                                  fprintf(logfile, String, info->start_data);\n                                if (logfile)\n                                  fprintf(logfile, String, info->end_data);\n                                if (logfile)\n                                  fprintf(logfile, String, info->start_stack);\n                                if (logfile)\n                                  fprintf(logfile, String, info->brk);\n                                if (logfile)\n                                  fprintf(logfile, String, info->entry);\n                              }\n                              target_set_brk(info->brk);\n                              syscall_init();\n                              signal_init();\n                              tcg_prologue_init(&tcg_ctx);\n                              env->pc = regs->pc;\n                              env->npc = regs->npc;\n                              env->y = regs->y;\n                              for (i_0 = Number; i_0 <= Number; ++i_0)\n                                env->gregs[i_0] = regs->u_regs[i_0];\n                              for (i_0a = Number; i_0a <= Number; ++i_0a)\n                                env->regwptr[i_0a] =\n                                    regs->u_regs[i_0a + Number];\n                              if (gdbstub_port) {\n                                gdbserver_start(gdbstub_port);\n                                gdb_handlesig(env, Number L);\n                              }\n                              cpu_loop(env);\n                            }\n                            if (strcmp(r, String))\n                              break;\n                            if (optind >= argc)\n                              goto LABEL_81;\n                            v3 = optind++;\n                            r = argv[v3];\n                            mask = cpu_str_to_log_mask(r);\n                            if (!mask) {\n                              puts(String);\n                              for (item = (const CPULogItem_0 *)&cpu_log_items;\n                                   item->mask; ++item)\n                                printf(String, item->name, item->help);\n                              exit(Number);\n                            }\n                            cpu_set_log(mask);\n                          }\n                          if (strcmp(r, String))\n                            break;\n                          v4 = optind++;\n                          r = argv[v4];\n                          if ((unsigned int)envlist_setenv(envlist, r))\n                            usage();\n                        }\n                        if (strcmp(r, String))\n                          break;\n                        v5 = optind++;\n                        r = argv[v5];\n                        if ((unsigned int)envlist_unsetenv(envlist, r))\n                          usage();\n                      }\n                      if (strcmp(r, String))\n                        break;\n                      v6 = optind++;\n                      r = argv[v6];\n                      argv0 = r;\n                    }\n                    if (strcmp(r, String))\n                      break;\n                    if (optind >= argc)\n                      goto LABEL_81;\n                    v7 = optind++;\n                    r = argv[v7];\n                    guest_stack_size = strtoul(r, (char **)&r, Number);\n                    if (!guest_stack_size)\n                      usage();\n                    if (*r == Number) {\n                      guest_stack_size <<= Number;\n                    } else if (*r == Number || *r == Number) {\n                      guest_stack_size <<= Number;\n                    }\n                  }\n                  if (strcmp(r, String))\n                    break;\n                  v8 = optind++;\n                  interp_prefix = argv[v8];\n                }\n                if (strcmp(r, String))\n                  break;\n                if (optind >= argc)\n                  goto LABEL_81;\n                v9 = optind++;\n                v10 = atoi(argv[v9]);\n                qemu_host_page_size = v10;\n                if (!v10 || ((qemu_host_page_size - Number L) &\n                             qemu_host_page_size) != Number) {\n                  fwrite(String, Number, Number, stderr);\n                  exit(Number);\n                }\n              }\n              if (strcmp(r, String))\n                break;\n              if (optind >= argc)\n                goto LABEL_81;\n              v11 = optind++;\n              gdbstub_port = atoi(argv[v11]);\n            }\n            if (strcmp(r, String))\n              break;\n            v12 = optind++;\n            qemu_uname_release = argv[v12];\n          }\n          if (strcmp(r, String))\n            break;\n          v13 = optind++;\n          cpu_model = argv[v13];\n          if (!cpu_model || !strcmp(cpu_model, String)) {\n            sparc_cpu_list(stdout, &fprintf);\n            exit(Number);\n          }\n        }\n        if (strcmp(r, String))\n          break;\n        v14 = optind++;\n        guest_base = (void *)strtol(argv[v14], Number L, Number);\n        have_guest_base = Number;\n      }\n      if (!strcmp(r, String))\n        break;\n      if (!strcmp(r, String)) {\n        envlist_unsetenv(envlist, String);\n      } else if (!strcmp(r, String)) {\n        singlestep = Number;\n      } else {\n        if (strcmp(r, String))\n          usage();\n        do_strace = Number;\n      }\n    }\n    shift = Number;\n    v15 = optind++;\n    reserved_va = strtoul(argv[v15], (char **)&<span class=\"supfact\">tmp</span>, Number);\n    v16 = *(char *)<span class=\"supfact\">tmp</span>.rlim_cur;\n    if (v16 == Number)\n      goto LABEL_65;\n    if (v16 <= Number) {\n      if (v16 == Number) {\n        shift = Number;\n        goto LABEL_68;\n      }\n      if (v16 <= Number) {\n        if (v16 == Number) {\n          shift = Number;\n          goto LABEL_68;\n        }\n        if (v16 == Number)\n        LABEL_65:\n          shift = Number;\n      }\n    }\n  LABEL_68:\n    if (shift) {\n      unshifted = reserved_va;\n      ++<span class=\"supfact\">tmp</span>.rlim_cur;\n      reserved_va <<= shift;\n      if (unshifted != reserved_va >> shift || reserved_va > Number) {\n        fwrite(String, Number, Number, stderr);\n        exit(Number);\n      }\n    }\n    if (*(_BYTE *)<span class=\"supfact\">tmp</span>.rlim_cur) {\n      fprintf(stderr, String, (const char *)<span class=\"supfact\">tmp</span>.rlim_cur);\n      exit(Number);\n    }\n  }\n}", "var": [{"name": "rlimits", "type": "struct struct rlimit64 { rlim64_t rlim_cur; rlim64_t rlim_max; }", "pred_name": "tmp", "ref_name": "tmp", "ref_type": "struct struct rlimit64 { rlim64_t rlim_cur; rlim64_t rlim_max; }"}, {"name": "v47", "type": "__unk__", "pred_name": "info1", "ref_name": "info1", "ref_type": "struct image_info { abi_ulong load_addr; abi_ulong start_code; abi_ulong end_code; abi_ulong start_data; abi_ulong end_data; abi_ulong start_brk; abi_ulong brk; abi_ulong start_mmap; abi_ulong mmap; abi_ulong rss; abi_ulong start_stack; abi_ulong stack_limit; abi_ulong entry; abi_ulong code_offset; abi_ulong data_offset; abi_ulong saved_auxv; abi_ulong arg_start; abi_ulong arg_end; char ** host_argv; int personality; PADDING (4); }"}, {"name": "v48", "type": "__unk__", "pred_name": "regs1", "ref_name": "regs1", "ref_type": "struct target_pt_regs { abi_ulong psr; abi_ulong pc; abi_ulong npc; abi_ulong y; abi_ulong[16] u_regs; }"}, {"name": "v49", "type": "__unk__", "pred_name": "bprm", "ref_name": "bprm", "ref_type": "struct linux_binprm { char[128] buf; void *[33] page; abi_ulong p; int fd; int e_uid; int e_gid; int argc; int envc; char ** argv; char ** envp; char * filename; int (*)(int, const CPUSPARCState *) core_dump; }"}, {"name": "v50", "type": "disappear", "pred_name": "", "ref_name": "ts1", "ref_type": "struct TaskState_0 { pid_t ts_tid; int used; image_info * info; linux_binprm * bprm; emulated_sigtable[64] sigtab; sigqueue[1024] sigqueue_table; sigqueue * first_free; int signal_pending; uint8_t[] stack; PADDING (12); }"}], "body_in_train": false}, {"repo_owner": "sipwise", "repo_name": "kamailio", "path": "sipwise/kamailio/c70d161be453f8e5ea1deb4bdc651b06d18e91973a2f9d654b58f61538e7f916", "path_in_repo": "sipwise/kamailio/src/modules/pv/pv.o", "objdump": "00000000000008fc <w_var_to_xavp>:\n     8fc:\t55                   \tpush   %rbp\n     8fd:\t48 89 e5             \tmov    %rsp,%rbp\n     900:\t41 57                \tpush   %r15\n     902:\t41 56                \tpush   %r14\n     904:\t41 55                \tpush   %r13\n     906:\t41 54                \tpush   %r12\n     908:\t53                   \tpush   %rbx\n     909:\t48 83 ec 58          \tsub    $0x58,%rsp\n     90d:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n     911:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n     915:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n     919:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n     920:\t00 \n     921:\tc7 45 b8 00 00 00 00 \tmovl   $0x0,-0x48(%rbp)\n     928:\t48 c7 45 a0 00 00 00 \tmovq   $0x0,-0x60(%rbp)\n     92f:\t00 \n     930:\tc7 45 a8 00 00 00 00 \tmovl   $0x0,-0x58(%rbp)\n     937:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n     93b:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n     93f:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     943:\t48 89 ce             \tmov    %rcx,%rsi\n     946:\t48 89 c7             \tmov    %rax,%rdi\n     949:\te8 00 00 00 00       \tcallq  94e <w_var_to_xavp+0x52>\n     94e:\t85 c0                \ttest   %eax,%eax\n     950:\t0f 89 fe 02 00 00    \tjns    c54 <w_var_to_xavp+0x358>\n     956:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     95b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 962 <w_var_to_xavp+0x66>\n     962:\te8 00 00 00 00       \tcallq  967 <w_var_to_xavp+0x6b>\n     967:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     96a:\t0f 8c da 02 00 00    \tjl     c4a <w_var_to_xavp+0x34e>\n     970:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 977 <w_var_to_xavp+0x7b>\n     977:\t8b 00                \tmov    (%rax),%eax\n     979:\t85 c0                \ttest   %eax,%eax\n     97b:\t0f 85 c9 02 00 00    \tjne    c4a <w_var_to_xavp+0x34e>\n     981:\tc7 45 c8 ff ff ff ff \tmovl   $0xffffffff,-0x38(%rbp)\n     988:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 98f <w_var_to_xavp+0x93>\n     98f:\t8b 00                \tmov    (%rax),%eax\n     991:\t8d 50 01             \tlea    0x1(%rax),%edx\n     994:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 99b <w_var_to_xavp+0x9f>\n     99b:\t89 10                \tmov    %edx,(%rax)\n     99d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9a4 <w_var_to_xavp+0xa8>\n     9a4:\t8b 00                \tmov    (%rax),%eax\n     9a6:\t85 c0                \ttest   %eax,%eax\n     9a8:\t0f 95 c0             \tsetne  %al\n     9ab:\t0f b6 c0             \tmovzbl %al,%eax\n     9ae:\t48 85 c0             \ttest   %rax,%rax\n     9b1:\t0f 84 46 01 00 00    \tje     afd <w_var_to_xavp+0x201>\n     9b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9be <w_var_to_xavp+0xc2>\n     9be:\t8b 00                \tmov    (%rax),%eax\n     9c0:\t85 c0                \ttest   %eax,%eax\n     9c2:\t0f 95 c0             \tsetne  %al\n     9c5:\t0f b6 c0             \tmovzbl %al,%eax\n     9c8:\t48 85 c0             \ttest   %rax,%rax\n     9cb:\t74 0a                \tje     9d7 <w_var_to_xavp+0xdb>\n     9cd:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     9d0:\t89 c7                \tmov    %eax,%edi\n     9d2:\te8 00 00 00 00       \tcallq  9d7 <w_var_to_xavp+0xdb>\n     9d7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9de <w_var_to_xavp+0xe2>\n     9de:\t48 8b 00             \tmov    (%rax),%rax\n     9e1:\t48 85 c0             \ttest   %rax,%rax\n     9e4:\t0f 95 c0             \tsetne  %al\n     9e7:\t0f b6 c0             \tmovzbl %al,%eax\n     9ea:\t48 85 c0             \ttest   %rax,%rax\n     9ed:\t0f 84 84 00 00 00    \tje     a77 <w_var_to_xavp+0x17b>\n     9f3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9fa <w_var_to_xavp+0xfe>\n     9fa:\t48 8b 00             \tmov    (%rax),%rax\n     9fd:\t48 8b 18             \tmov    (%rax),%rbx\n     a00:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a07 <w_var_to_xavp+0x10b>\n     a07:\t48 8b 00             \tmov    (%rax),%rax\n     a0a:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n     a0e:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     a11:\t8d 50 05             \tlea    0x5(%rax),%edx\n     a14:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a1b <w_var_to_xavp+0x11f>\n     a1b:\t48 63 d2             \tmovslq %edx,%rdx\n     a1e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     a22:\t48 01 d0             \tadd    %rdx,%rax\n     a25:\t4c 8b 20             \tmov    (%rax),%r12\n     a28:\te8 00 00 00 00       \tcallq  a2d <w_var_to_xavp+0x131>\n     a2d:\t89 c1                \tmov    %eax,%ecx\n     a2f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a36 <w_var_to_xavp+0x13a>\n     a36:\t8b 10                \tmov    (%rax),%edx\n     a38:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a3f <w_var_to_xavp+0x143>\n     a3f:\t48 8b 00             \tmov    (%rax),%rax\n     a42:\t48 83 ec 08          \tsub    $0x8,%rsp\n     a46:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # a4d <w_var_to_xavp+0x151>\n     a4d:\t56                   \tpush   %rsi\n     a4e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # a55 <w_var_to_xavp+0x159>\n     a55:\t56                   \tpush   %rsi\n     a56:\t53                   \tpush   %rbx\n     a57:\t45 89 e9             \tmov    %r13d,%r9d\n     a5a:\t4d 89 e0             \tmov    %r12,%r8\n     a5d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # a64 <w_var_to_xavp+0x168>\n     a64:\t48 89 c7             \tmov    %rax,%rdi\n     a67:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a6c:\te8 00 00 00 00       \tcallq  a71 <w_var_to_xavp+0x175>\n     a71:\t48 83 c4 20          \tadd    $0x20,%rsp\n     a75:\teb 62                \tjmp    ad9 <w_var_to_xavp+0x1dd>\n     a77:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     a7a:\t8d 50 05             \tlea    0x5(%rax),%edx\n     a7d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a84 <w_var_to_xavp+0x188>\n     a84:\t48 63 d2             \tmovslq %edx,%rdx\n     a87:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     a8b:\t48 01 d0             \tadd    %rdx,%rax\n     a8e:\t48 8b 18             \tmov    (%rax),%rbx\n     a91:\te8 00 00 00 00       \tcallq  a96 <w_var_to_xavp+0x19a>\n     a96:\t89 c1                \tmov    %eax,%ecx\n     a98:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a9f <w_var_to_xavp+0x1a3>\n     a9f:\t8b 10                \tmov    (%rax),%edx\n     aa1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # aa8 <w_var_to_xavp+0x1ac>\n     aa8:\t48 8b 00             \tmov    (%rax),%rax\n     aab:\t48 83 ec 08          \tsub    $0x8,%rsp\n     aaf:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # ab6 <w_var_to_xavp+0x1ba>\n     ab6:\t56                   \tpush   %rsi\n     ab7:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # abe <w_var_to_xavp+0x1c2>\n     abe:\t49 89 d8             \tmov    %rbx,%r8\n     ac1:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # ac8 <w_var_to_xavp+0x1cc>\n     ac8:\t48 89 c7             \tmov    %rax,%rdi\n     acb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ad0:\te8 00 00 00 00       \tcallq  ad5 <w_var_to_xavp+0x1d9>\n     ad5:\t48 83 c4 10          \tadd    $0x10,%rsp\n     ad9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ae0 <w_var_to_xavp+0x1e4>\n     ae0:\t8b 00                \tmov    (%rax),%eax\n     ae2:\t85 c0                \ttest   %eax,%eax\n     ae4:\t0f 95 c0             \tsetne  %al\n     ae7:\t0f b6 c0             \tmovzbl %al,%eax\n     aea:\t48 85 c0             \ttest   %rax,%rax\n     aed:\t0f 84 42 01 00 00    \tje     c35 <w_var_to_xavp+0x339>\n     af3:\te8 00 00 00 00       \tcallq  af8 <w_var_to_xavp+0x1fc>\n     af8:\te9 38 01 00 00       \tjmpq   c35 <w_var_to_xavp+0x339>\n     afd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b04 <w_var_to_xavp+0x208>\n     b04:\t48 8b 00             \tmov    (%rax),%rax\n     b07:\t48 85 c0             \ttest   %rax,%rax\n     b0a:\t0f 95 c0             \tsetne  %al\n     b0d:\t0f b6 c0             \tmovzbl %al,%eax\n     b10:\t48 85 c0             \ttest   %rax,%rax\n     b13:\t0f 84 a4 00 00 00    \tje     bbd <w_var_to_xavp+0x2c1>\n     b19:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b20 <w_var_to_xavp+0x224>\n     b20:\t4c 8b 28             \tmov    (%rax),%r13\n     b23:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b2a <w_var_to_xavp+0x22e>\n     b2a:\t48 8b 00             \tmov    (%rax),%rax\n     b2d:\t4c 8b 38             \tmov    (%rax),%r15\n     b30:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b37 <w_var_to_xavp+0x23b>\n     b37:\t48 8b 00             \tmov    (%rax),%rax\n     b3a:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n     b3e:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     b41:\t8d 50 05             \tlea    0x5(%rax),%edx\n     b44:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b4b <w_var_to_xavp+0x24f>\n     b4b:\t48 63 d2             \tmovslq %edx,%rdx\n     b4e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     b52:\t48 01 d0             \tadd    %rdx,%rax\n     b55:\t48 8b 18             \tmov    (%rax),%rbx\n     b58:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     b5b:\t8d 50 05             \tlea    0x5(%rax),%edx\n     b5e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b65 <w_var_to_xavp+0x269>\n     b65:\t48 63 d2             \tmovslq %edx,%rdx\n     b68:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     b6c:\t48 01 d0             \tadd    %rdx,%rax\n     b6f:\t48 83 c0 08          \tadd    $0x8,%rax\n     b73:\t44 8b 30             \tmov    (%rax),%r14d\n     b76:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     b7b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # b82 <w_var_to_xavp+0x286>\n     b82:\te8 00 00 00 00       \tcallq  b87 <w_var_to_xavp+0x28b>\n     b87:\t44 09 f0             \tor     %r14d,%eax\n     b8a:\t48 83 ec 08          \tsub    $0x8,%rsp\n     b8e:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # b95 <w_var_to_xavp+0x299>\n     b95:\t52                   \tpush   %rdx\n     b96:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # b9d <w_var_to_xavp+0x2a1>\n     b9d:\t4d 89 f8             \tmov    %r15,%r8\n     ba0:\t44 89 e1             \tmov    %r12d,%ecx\n     ba3:\t48 89 da             \tmov    %rbx,%rdx\n     ba6:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # bad <w_var_to_xavp+0x2b1>\n     bad:\t89 c7                \tmov    %eax,%edi\n     baf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     bb4:\t41 ff d5             \tcallq  *%r13\n     bb7:\t48 83 c4 10          \tadd    $0x10,%rsp\n     bbb:\teb 78                \tjmp    c35 <w_var_to_xavp+0x339>\n     bbd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # bc4 <w_var_to_xavp+0x2c8>\n     bc4:\t4c 8b 20             \tmov    (%rax),%r12\n     bc7:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     bca:\t8d 50 05             \tlea    0x5(%rax),%edx\n     bcd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # bd4 <w_var_to_xavp+0x2d8>\n     bd4:\t48 63 d2             \tmovslq %edx,%rdx\n     bd7:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     bdb:\t48 01 d0             \tadd    %rdx,%rax\n     bde:\t48 8b 18             \tmov    (%rax),%rbx\n     be1:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     be4:\t8d 50 05             \tlea    0x5(%rax),%edx\n     be7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # bee <w_var_to_xavp+0x2f2>\n     bee:\t48 63 d2             \tmovslq %edx,%rdx\n     bf1:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     bf5:\t48 01 d0             \tadd    %rdx,%rax\n     bf8:\t48 83 c0 08          \tadd    $0x8,%rax\n     bfc:\t44 8b 28             \tmov    (%rax),%r13d\n     bff:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     c04:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # c0b <w_var_to_xavp+0x30f>\n     c0b:\te8 00 00 00 00       \tcallq  c10 <w_var_to_xavp+0x314>\n     c10:\t44 09 e8             \tor     %r13d,%eax\n     c13:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # c1a <w_var_to_xavp+0x31e>\n     c1a:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # c21 <w_var_to_xavp+0x325>\n     c21:\t48 89 da             \tmov    %rbx,%rdx\n     c24:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # c2b <w_var_to_xavp+0x32f>\n     c2b:\t89 c7                \tmov    %eax,%edi\n     c2d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c32:\t41 ff d4             \tcallq  *%r12\n     c35:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c3c <w_var_to_xavp+0x340>\n     c3c:\t8b 00                \tmov    (%rax),%eax\n     c3e:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     c41:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c48 <w_var_to_xavp+0x34c>\n     c48:\t89 10                \tmov    %edx,(%rax)\n     c4a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     c4f:\te9 2d 03 00 00       \tjmpq   f81 <w_var_to_xavp+0x685>\n     c54:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n     c58:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n     c5c:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     c60:\t48 89 ce             \tmov    %rcx,%rsi\n     c63:\t48 89 c7             \tmov    %rax,%rdi\n     c66:\te8 00 00 00 00       \tcallq  c6b <w_var_to_xavp+0x36f>\n     c6b:\t85 c0                \ttest   %eax,%eax\n     c6d:\t0f 89 fb 02 00 00    \tjns    f6e <w_var_to_xavp+0x672>\n     c73:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     c78:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # c7f <w_var_to_xavp+0x383>\n     c7f:\te8 00 00 00 00       \tcallq  c84 <w_var_to_xavp+0x388>\n     c84:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     c87:\t0f 8c da 02 00 00    \tjl     f67 <w_var_to_xavp+0x66b>\n     c8d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c94 <w_var_to_xavp+0x398>\n     c94:\t8b 00                \tmov    (%rax),%eax\n     c96:\t85 c0                \ttest   %eax,%eax\n     c98:\t0f 85 c9 02 00 00    \tjne    f67 <w_var_to_xavp+0x66b>\n     c9e:\tc7 45 cc ff ff ff ff \tmovl   $0xffffffff,-0x34(%rbp)\n     ca5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cac <w_var_to_xavp+0x3b0>\n     cac:\t8b 00                \tmov    (%rax),%eax\n     cae:\t8d 50 01             \tlea    0x1(%rax),%edx\n     cb1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cb8 <w_var_to_xavp+0x3bc>\n     cb8:\t89 10                \tmov    %edx,(%rax)\n     cba:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cc1 <w_var_to_xavp+0x3c5>\n     cc1:\t8b 00                \tmov    (%rax),%eax\n     cc3:\t85 c0                \ttest   %eax,%eax\n     cc5:\t0f 95 c0             \tsetne  %al\n     cc8:\t0f b6 c0             \tmovzbl %al,%eax\n     ccb:\t48 85 c0             \ttest   %rax,%rax\n     cce:\t0f 84 46 01 00 00    \tje     e1a <w_var_to_xavp+0x51e>\n     cd4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cdb <w_var_to_xavp+0x3df>\n     cdb:\t8b 00                \tmov    (%rax),%eax\n     cdd:\t85 c0                \ttest   %eax,%eax\n     cdf:\t0f 95 c0             \tsetne  %al\n     ce2:\t0f b6 c0             \tmovzbl %al,%eax\n     ce5:\t48 85 c0             \ttest   %rax,%rax\n     ce8:\t74 0a                \tje     cf4 <w_var_to_xavp+0x3f8>\n     cea:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     ced:\t89 c7                \tmov    %eax,%edi\n     cef:\te8 00 00 00 00       \tcallq  cf4 <w_var_to_xavp+0x3f8>\n     cf4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cfb <w_var_to_xavp+0x3ff>\n     cfb:\t48 8b 00             \tmov    (%rax),%rax\n     cfe:\t48 85 c0             \ttest   %rax,%rax\n     d01:\t0f 95 c0             \tsetne  %al\n     d04:\t0f b6 c0             \tmovzbl %al,%eax\n     d07:\t48 85 c0             \ttest   %rax,%rax\n     d0a:\t0f 84 84 00 00 00    \tje     d94 <w_var_to_xavp+0x498>\n     d10:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d17 <w_var_to_xavp+0x41b>\n     d17:\t48 8b 00             \tmov    (%rax),%rax\n     d1a:\t48 8b 18             \tmov    (%rax),%rbx\n     d1d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d24 <w_var_to_xavp+0x428>\n     d24:\t48 8b 00             \tmov    (%rax),%rax\n     d27:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n     d2b:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     d2e:\t8d 50 05             \tlea    0x5(%rax),%edx\n     d31:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d38 <w_var_to_xavp+0x43c>\n     d38:\t48 63 d2             \tmovslq %edx,%rdx\n     d3b:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     d3f:\t48 01 d0             \tadd    %rdx,%rax\n     d42:\t4c 8b 20             \tmov    (%rax),%r12\n     d45:\te8 00 00 00 00       \tcallq  d4a <w_var_to_xavp+0x44e>\n     d4a:\t89 c1                \tmov    %eax,%ecx\n     d4c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d53 <w_var_to_xavp+0x457>\n     d53:\t8b 10                \tmov    (%rax),%edx\n     d55:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d5c <w_var_to_xavp+0x460>\n     d5c:\t48 8b 00             \tmov    (%rax),%rax\n     d5f:\t48 83 ec 08          \tsub    $0x8,%rsp\n     d63:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d6a <w_var_to_xavp+0x46e>\n     d6a:\t56                   \tpush   %rsi\n     d6b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d72 <w_var_to_xavp+0x476>\n     d72:\t56                   \tpush   %rsi\n     d73:\t53                   \tpush   %rbx\n     d74:\t45 89 e9             \tmov    %r13d,%r9d\n     d77:\t4d 89 e0             \tmov    %r12,%r8\n     d7a:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d81 <w_var_to_xavp+0x485>\n     d81:\t48 89 c7             \tmov    %rax,%rdi\n     d84:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d89:\te8 00 00 00 00       \tcallq  d8e <w_var_to_xavp+0x492>\n     d8e:\t48 83 c4 20          \tadd    $0x20,%rsp\n     d92:\teb 62                \tjmp    df6 <w_var_to_xavp+0x4fa>\n     d94:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     d97:\t8d 50 05             \tlea    0x5(%rax),%edx\n     d9a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # da1 <w_var_to_xavp+0x4a5>\n     da1:\t48 63 d2             \tmovslq %edx,%rdx\n     da4:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     da8:\t48 01 d0             \tadd    %rdx,%rax\n     dab:\t48 8b 18             \tmov    (%rax),%rbx\n     dae:\te8 00 00 00 00       \tcallq  db3 <w_var_to_xavp+0x4b7>\n     db3:\t89 c1                \tmov    %eax,%ecx\n     db5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # dbc <w_var_to_xavp+0x4c0>\n     dbc:\t8b 10                \tmov    (%rax),%edx\n     dbe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # dc5 <w_var_to_xavp+0x4c9>\n     dc5:\t48 8b 00             \tmov    (%rax),%rax\n     dc8:\t48 83 ec 08          \tsub    $0x8,%rsp\n     dcc:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # dd3 <w_var_to_xavp+0x4d7>\n     dd3:\t56                   \tpush   %rsi\n     dd4:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # ddb <w_var_to_xavp+0x4df>\n     ddb:\t49 89 d8             \tmov    %rbx,%r8\n     dde:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # de5 <w_var_to_xavp+0x4e9>\n     de5:\t48 89 c7             \tmov    %rax,%rdi\n     de8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ded:\te8 00 00 00 00       \tcallq  df2 <w_var_to_xavp+0x4f6>\n     df2:\t48 83 c4 10          \tadd    $0x10,%rsp\n     df6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # dfd <w_var_to_xavp+0x501>\n     dfd:\t8b 00                \tmov    (%rax),%eax\n     dff:\t85 c0                \ttest   %eax,%eax\n     e01:\t0f 95 c0             \tsetne  %al\n     e04:\t0f b6 c0             \tmovzbl %al,%eax\n     e07:\t48 85 c0             \ttest   %rax,%rax\n     e0a:\t0f 84 42 01 00 00    \tje     f52 <w_var_to_xavp+0x656>\n     e10:\te8 00 00 00 00       \tcallq  e15 <w_var_to_xavp+0x519>\n     e15:\te9 38 01 00 00       \tjmpq   f52 <w_var_to_xavp+0x656>\n     e1a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e21 <w_var_to_xavp+0x525>\n     e21:\t48 8b 00             \tmov    (%rax),%rax\n     e24:\t48 85 c0             \ttest   %rax,%rax\n     e27:\t0f 95 c0             \tsetne  %al\n     e2a:\t0f b6 c0             \tmovzbl %al,%eax\n     e2d:\t48 85 c0             \ttest   %rax,%rax\n     e30:\t0f 84 a4 00 00 00    \tje     eda <w_var_to_xavp+0x5de>\n     e36:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e3d <w_var_to_xavp+0x541>\n     e3d:\t4c 8b 28             \tmov    (%rax),%r13\n     e40:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e47 <w_var_to_xavp+0x54b>\n     e47:\t48 8b 00             \tmov    (%rax),%rax\n     e4a:\t4c 8b 38             \tmov    (%rax),%r15\n     e4d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e54 <w_var_to_xavp+0x558>\n     e54:\t48 8b 00             \tmov    (%rax),%rax\n     e57:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n     e5b:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     e5e:\t8d 50 05             \tlea    0x5(%rax),%edx\n     e61:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e68 <w_var_to_xavp+0x56c>\n     e68:\t48 63 d2             \tmovslq %edx,%rdx\n     e6b:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     e6f:\t48 01 d0             \tadd    %rdx,%rax\n     e72:\t48 8b 18             \tmov    (%rax),%rbx\n     e75:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     e78:\t8d 50 05             \tlea    0x5(%rax),%edx\n     e7b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e82 <w_var_to_xavp+0x586>\n     e82:\t48 63 d2             \tmovslq %edx,%rdx\n     e85:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     e89:\t48 01 d0             \tadd    %rdx,%rax\n     e8c:\t48 83 c0 08          \tadd    $0x8,%rax\n     e90:\t44 8b 30             \tmov    (%rax),%r14d\n     e93:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     e98:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # e9f <w_var_to_xavp+0x5a3>\n     e9f:\te8 00 00 00 00       \tcallq  ea4 <w_var_to_xavp+0x5a8>\n     ea4:\t44 09 f0             \tor     %r14d,%eax\n     ea7:\t48 83 ec 08          \tsub    $0x8,%rsp\n     eab:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # eb2 <w_var_to_xavp+0x5b6>\n     eb2:\t52                   \tpush   %rdx\n     eb3:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # eba <w_var_to_xavp+0x5be>\n     eba:\t4d 89 f8             \tmov    %r15,%r8\n     ebd:\t44 89 e1             \tmov    %r12d,%ecx\n     ec0:\t48 89 da             \tmov    %rbx,%rdx\n     ec3:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # eca <w_var_to_xavp+0x5ce>\n     eca:\t89 c7                \tmov    %eax,%edi\n     ecc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ed1:\t41 ff d5             \tcallq  *%r13\n     ed4:\t48 83 c4 10          \tadd    $0x10,%rsp\n     ed8:\teb 78                \tjmp    f52 <w_var_to_xavp+0x656>\n     eda:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ee1 <w_var_to_xavp+0x5e5>\n     ee1:\t4c 8b 20             \tmov    (%rax),%r12\n     ee4:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     ee7:\t8d 50 05             \tlea    0x5(%rax),%edx\n     eea:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ef1 <w_var_to_xavp+0x5f5>\n     ef1:\t48 63 d2             \tmovslq %edx,%rdx\n     ef4:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     ef8:\t48 01 d0             \tadd    %rdx,%rax\n     efb:\t48 8b 18             \tmov    (%rax),%rbx\n     efe:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     f01:\t8d 50 05             \tlea    0x5(%rax),%edx\n     f04:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f0b <w_var_to_xavp+0x60f>\n     f0b:\t48 63 d2             \tmovslq %edx,%rdx\n     f0e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     f12:\t48 01 d0             \tadd    %rdx,%rax\n     f15:\t48 83 c0 08          \tadd    $0x8,%rax\n     f19:\t44 8b 28             \tmov    (%rax),%r13d\n     f1c:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     f21:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # f28 <w_var_to_xavp+0x62c>\n     f28:\te8 00 00 00 00       \tcallq  f2d <w_var_to_xavp+0x631>\n     f2d:\t44 09 e8             \tor     %r13d,%eax\n     f30:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # f37 <w_var_to_xavp+0x63b>\n     f37:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # f3e <w_var_to_xavp+0x642>\n     f3e:\t48 89 da             \tmov    %rbx,%rdx\n     f41:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # f48 <w_var_to_xavp+0x64c>\n     f48:\t89 c7                \tmov    %eax,%edi\n     f4a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f4f:\t41 ff d4             \tcallq  *%r12\n     f52:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f59 <w_var_to_xavp+0x65d>\n     f59:\t8b 00                \tmov    (%rax),%eax\n     f5b:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     f5e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f65 <w_var_to_xavp+0x669>\n     f65:\t89 10                \tmov    %edx,(%rax)\n     f67:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     f6c:\teb 13                \tjmp    f81 <w_var_to_xavp+0x685>\n     f6e:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n     f72:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     f76:\t48 89 d6             \tmov    %rdx,%rsi\n     f79:\t48 89 c7             \tmov    %rax,%rdi\n     f7c:\te8 00 00 00 00       \tcallq  f81 <w_var_to_xavp+0x685>\n     f81:\t48 8d 65 d8          \tlea    -0x28(%rbp),%rsp\n     f85:\t5b                   \tpop    %rbx\n     f86:\t41 5c                \tpop    %r12\n     f88:\t41 5d                \tpop    %r13\n     f8a:\t41 5e                \tpop    %r14\n     f8c:\t41 5f                \tpop    %r15\n     f8e:\t5d                   \tpop    %rbp\n     f8f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall w_var_to_xavp(__int64 a1, __int64 a2, __int64 a3) {\n  const char *v3;\n  int v4;\n  const char *v5;\n  unsigned int v6;\n  const char *v7;\n  unsigned int v8;\n  void (*v9)(_QWORD, const char *, ...);\n  __int64 v10;\n  unsigned int v11;\n  __int64 v12;\n  int v13;\n  unsigned int v14;\n  void (*v15)(_QWORD, const char *, ...);\n  const char *v16;\n  int v17;\n  unsigned int v18;\n  __int64 result;\n  const char *v20;\n  int v21;\n  const char *v22;\n  unsigned int v23;\n  const char *v24;\n  unsigned int v25;\n  void (*v26)(_QWORD, const char *, ...);\n  __int64 v27;\n  unsigned int v28;\n  __int64 v29;\n  int v30;\n  unsigned int v31;\n  void (*v32)(_QWORD, const char *, ...);\n  const char *v33;\n  int v34;\n  unsigned int v35;\n  __int64 <span class=\"supfact\">v37</span>;\n  int v38;\n  __int64 <span class=\"supfact\">v39</span>;\n  int v40;\n  unsigned int v41;\n  unsigned int v42;\n  <span class=\"supfact\">v39</span> = Number L;\n  v40 = Number;\n  <span class=\"supfact\">v37</span> = Number L;\n  v38 = Number;\n  if ((int)get_str_fparam(&<span class=\"supfact\">v37</span>, a1, a2) >= Number) {\n    if ((int)get_str_fparam(&<span class=\"supfact\">v39</span>, a1, a3) >= Number) {\n      result = pv_var_to_xavp(&<span class=\"supfact\">v37</span>, &<span class=\"supfact\">v39</span>);\n    } else {\n      if ((int)get_debug_level(&off_63F0, Number L) >= Number && !dprint_crit) {\n        v42 = Number;\n        ++dprint_crit;\n        if (log_stderr) {\n          if (log_color)\n            dprint_color(v42);\n          if (log_prefix_val) {\n            v20 = (const char *)*log_prefix_val;\n            v21 = *((_DWORD *)log_prefix_val + Number);\n            v22 = (const char *)*((_QWORD *)&log_level_info +\n                                  Number * (int)(v42 + Number));\n            v23 = my_pid();\n            fprintf(stderr, String, process_no, v23, v22, v21, v20, String,\n                    String);\n          } else {\n            v24 = (const char *)*((_QWORD *)&log_level_info +\n                                  Number * (int)(v42 + Number));\n            v25 = my_pid();\n            fprintf(stderr, String, process_no, v25, v24, String, String);\n          }\n          if (log_color)\n            dprint_color_reset();\n        } else if (log_prefix_val) {\n          v26 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v27 = *log_prefix_val;\n          v28 = *((_DWORD *)log_prefix_val + Number);\n          v29 = *((_QWORD *)&log_level_info + Number * (int)(v42 + Number));\n          v30 = *((_DWORD *)&log_level_info + Number * (int)(v42 + Number) +\n                  Number);\n          v31 = get_debug_facility(&off_63F0, Number L);\n          v26(v30 | v31, String, v29, v28, v27, String, String);\n        } else {\n          v32 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v33 = (const char *)*((_QWORD *)&log_level_info +\n                                Number * (int)(v42 + Number));\n          v34 = *((_DWORD *)&log_level_info + Number * (int)(v42 + Number) +\n                  Number);\n          v35 = get_debug_facility(&off_63F0, Number L);\n          v32(v34 | v35, String, v33, String, String);\n        }\n        --dprint_crit;\n      }\n      result = Number;\n    }\n  } else {\n    if ((int)get_debug_level(&off_63F0, Number L) >= Number && !dprint_crit) {\n      v41 = Number;\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color(v41);\n        if (log_prefix_val) {\n          v3 = (const char *)*log_prefix_val;\n          v4 = *((_DWORD *)log_prefix_val + Number);\n          v5 = (const char *)*((_QWORD *)&log_level_info +\n                               Number * (int)(v41 + Number));\n          v6 = my_pid();\n          fprintf(stderr, String, process_no, v6, v5, v4, v3, String, String);\n        } else {\n          v7 = (const char *)*((_QWORD *)&log_level_info +\n                               Number * (int)(v41 + Number));\n          v8 = my_pid();\n          fprintf(stderr, String, process_no, v8, v7, String, String);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v9 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v10 = *log_prefix_val;\n        v11 = *((_DWORD *)log_prefix_val + Number);\n        v12 = *((_QWORD *)&log_level_info + Number * (int)(v41 + Number));\n        v13 = *((_DWORD *)&log_level_info + Number * (int)(v41 + Number) +\n                Number);\n        v14 = get_debug_facility(&off_63F0, Number L);\n        v9(v13 | v14, String, v12, v11, v10, String, String);\n      } else {\n        v15 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v16 = (const char *)*((_QWORD *)&log_level_info +\n                              Number * (int)(v41 + Number));\n        v17 = *((_DWORD *)&log_level_info + Number * (int)(v41 + Number) +\n                Number);\n        v18 = get_debug_facility(&off_63F0, Number L);\n        v15(v17 | v18, String, v16, String, String);\n      }\n      --dprint_crit;\n    }\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl w_var_to_xavp(sip_msg_t *msg, char *s1, char *s2) {\n  const char *v3;\n  int v4;\n  const char *v5;\n  unsigned int v6;\n  const char *v7;\n  unsigned int v8;\n  void (*v9)(_QWORD, const char *, ...);\n  __int64 v10;\n  unsigned int v11;\n  __int64 v12;\n  int v13;\n  unsigned int v14;\n  void (*v15)(_QWORD, const char *, ...);\n  const char *v16;\n  int v17;\n  unsigned int v18;\n  int result;\n  const char *v20;\n  int v21;\n  const char *v22;\n  unsigned int v23;\n  const char *v24;\n  unsigned int v25;\n  void (*v26)(_QWORD, const char *, ...);\n  __int64 v27;\n  unsigned int v28;\n  __int64 v29;\n  int v30;\n  unsigned int v31;\n  void (*v32)(_QWORD, const char *, ...);\n  const char *v33;\n  int v34;\n  unsigned int v35;\n  str <span class=\"supfact\">varname</span>;\n  str <span class=\"supfact\">xname</span>;\n  int __llevel;\n  int __llevel_0;\n  <span class=\"supfact\">xname</span>.s = Number L;\n  <span class=\"supfact\">xname</span>.len = Number;\n  <span class=\"supfact\">varname</span>.s = Number L;\n  <span class=\"supfact\">varname</span>.len = Number;\n  if ((int)get_str_fparam(&<span class=\"supfact\">varname</span>, msg, s1) >= Number) {\n    if ((int)get_str_fparam(&<span class=\"supfact\">xname</span>, msg, s2) >= Number) {\n      result = pv_var_to_xavp(&<span class=\"supfact\">varname</span>, &<span class=\"supfact\">xname</span>);\n    } else {\n      if ((int)get_debug_level(&off_63F0, Number L) >= Number && !dprint_crit) {\n        __llevel_0 = Number;\n        ++dprint_crit;\n        if (log_stderr) {\n          if (log_color)\n            dprint_color((unsigned int)__llevel_0);\n          if (log_prefix_val) {\n            v20 = (const char *)*log_prefix_val;\n            v21 = *((_DWORD *)log_prefix_val + Number);\n            v22 = (const char *)*((_QWORD *)&log_level_info_0 +\n                                  Number * __llevel_0 + Number);\n            v23 = my_pid();\n            fprintf(stderr, String, process_no, v23, v22, v21, v20, String,\n                    String);\n          } else {\n            v24 = (const char *)*((_QWORD *)&log_level_info_0 +\n                                  Number * __llevel_0 + Number);\n            v25 = my_pid();\n            fprintf(stderr, String, process_no, v25, v24, String, String);\n          }\n          if (log_color)\n            dprint_color_reset();\n        } else if (log_prefix_val) {\n          v26 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v27 = *log_prefix_val;\n          v28 = *((_DWORD *)log_prefix_val + Number);\n          v29 = *((_QWORD *)&log_level_info_0 + Number * __llevel_0 + Number);\n          v30 = *((_DWORD *)&log_level_info_0 + Number * __llevel_0 + Number);\n          v31 = get_debug_facility(&off_63F0, Number L);\n          v26(v30 | v31, String, v29, v28, v27, String, String);\n        } else {\n          v32 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v33 = (const char *)*((_QWORD *)&log_level_info_0 +\n                                Number * __llevel_0 + Number);\n          v34 = *((_DWORD *)&log_level_info_0 + Number * __llevel_0 + Number);\n          v35 = get_debug_facility(&off_63F0, Number L);\n          v32(v34 | v35, String, v33, String, String);\n        }\n        --dprint_crit;\n      }\n      result = Number;\n    }\n  } else {\n    if ((int)get_debug_level(&off_63F0, Number L) >= Number && !dprint_crit) {\n      __llevel = Number;\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color((unsigned int)__llevel);\n        if (log_prefix_val) {\n          v3 = (const char *)*log_prefix_val;\n          v4 = *((_DWORD *)log_prefix_val + Number);\n          v5 = (const char *)*((_QWORD *)&log_level_info_0 + Number * __llevel +\n                               Number);\n          v6 = my_pid();\n          fprintf(stderr, String, process_no, v6, v5, v4, v3, String, String);\n        } else {\n          v7 = (const char *)*((_QWORD *)&log_level_info_0 + Number * __llevel +\n                               Number);\n          v8 = my_pid();\n          fprintf(stderr, String, process_no, v8, v7, String, String);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v9 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v10 = *log_prefix_val;\n        v11 = *((_DWORD *)log_prefix_val + Number);\n        v12 = *((_QWORD *)&log_level_info_0 + Number * __llevel + Number);\n        v13 = *((_DWORD *)&log_level_info_0 + Number * __llevel + Number);\n        v14 = get_debug_facility(&off_63F0, Number L);\n        v9(v13 | v14, String, v12, v11, v10, String, String);\n      } else {\n        v15 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v16 = (const char *)*((_QWORD *)&log_level_info_0 + Number * __llevel +\n                              Number);\n        v17 = *((_DWORD *)&log_level_info_0 + Number * __llevel + Number);\n        v18 = get_debug_facility(&off_63F0, Number L);\n        v15(v17 | v18, String, v16, String, String);\n      }\n      --dprint_crit;\n    }\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v37", "type": "struct str { char * s; int len; PADDING (4); }", "pred_name": "tmp", "ref_name": "varname", "ref_type": "struct str { char * s; int len; PADDING (4); }"}, {"name": "v39", "type": "void", "pred_name": "avp_val", "ref_name": "xname", "ref_type": "struct str { char * s; int len; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "popo55668", "repo_name": "DAG-Aware-MIG-Rewriting", "path": "popo55668/DAG-Aware-MIG-Rewriting/7da7b119522e05b7d1d86c203654b7bf3a3a64236ddc081c8858bb01ec4a4a23", "path_in_repo": "popo55668/DAG-Aware-MIG-Rewriting//src/base/abci/abcVerify.o", "objdump": "00000000000011ee <Abc_NtkCecFraig>:\n    11ee:\t55                   \tpush   %rbp\n    11ef:\t48 89 e5             \tmov    %rsp,%rbp\n    11f2:\t53                   \tpush   %rbx\n    11f3:\t48 81 ec b8 00 00 00 \tsub    $0xb8,%rsp\n    11fa:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n    1201:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n    1208:\t89 95 4c ff ff ff    \tmov    %edx,-0xb4(%rbp)\n    120e:\t89 8d 48 ff ff ff    \tmov    %ecx,-0xb8(%rbp)\n    1214:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    121b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    121f:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1226:\t00 \n    1227:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    122e:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n    1235:\t48 85 c0             \ttest   %rax,%rax\n    1238:\t75 17                \tjne    1251 <Abc_NtkCecFraig+0x63>\n    123a:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1241:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n    1248:\t48 85 c0             \ttest   %rax,%rax\n    124b:\t0f 84 f9 00 00 00    \tje     134a <Abc_NtkCecFraig+0x15c>\n    1251:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    1258:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n    125f:\t48 85 c0             \ttest   %rax,%rax\n    1262:\t74 6b                \tje     12cf <Abc_NtkCecFraig+0xe1>\n    1264:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    126b:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n    1272:\t48 85 c0             \ttest   %rax,%rax\n    1275:\t74 58                \tje     12cf <Abc_NtkCecFraig+0xe1>\n    1277:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    127c:\te8 00 00 00 00       \tcallq  1281 <Abc_NtkCecFraig+0x93>\n    1281:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1288:\t48 8b b0 48 01 00 00 \tmov    0x148(%rax),%rsi\n    128f:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    1296:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n    129d:\t8b 8d 48 ff ff ff    \tmov    -0xb8(%rbp),%ecx\n    12a3:\t8b 95 4c ff ff ff    \tmov    -0xb4(%rbp),%edx\n    12a9:\t48 89 c7             \tmov    %rax,%rdi\n    12ac:\te8 00 00 00 00       \tcallq  12b1 <Abc_NtkCecFraig+0xc3>\n    12b1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    12b6:\te8 00 00 00 00       \tcallq  12bb <Abc_NtkCecFraig+0xcd>\n    12bb:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    12c2:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n    12c9:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    12cd:\teb 7b                \tjmp    134a <Abc_NtkCecFraig+0x15c>\n    12cf:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    12d6:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n    12dd:\t48 85 c0             \ttest   %rax,%rax\n    12e0:\t74 1e                \tje     1300 <Abc_NtkCecFraig+0x112>\n    12e2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    12e7:\te8 00 00 00 00       \tcallq  12ec <Abc_NtkCecFraig+0xfe>\n    12ec:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    12f3:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n    12fa:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    12fe:\teb 4a                \tjmp    134a <Abc_NtkCecFraig+0x15c>\n    1300:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1307:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n    130e:\t48 85 c0             \ttest   %rax,%rax\n    1311:\t74 1e                \tje     1331 <Abc_NtkCecFraig+0x143>\n    1313:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1318:\te8 00 00 00 00       \tcallq  131d <Abc_NtkCecFraig+0x12f>\n    131d:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1324:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n    132b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    132f:\teb 19                \tjmp    134a <Abc_NtkCecFraig+0x15c>\n    1331:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1336:\tba 97 00 00 00       \tmov    $0x97,%edx\n    133b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1340:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1345:\te8 00 00 00 00       \tcallq  134a <Abc_NtkCecFraig+0x15c>\n    134a:\t48 8b b5 50 ff ff ff \tmov    -0xb0(%rbp),%rsi\n    1351:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    1358:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    135e:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1364:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1369:\tba 01 00 00 00       \tmov    $0x1,%edx\n    136e:\t48 89 c7             \tmov    %rax,%rdi\n    1371:\te8 00 00 00 00       \tcallq  1376 <Abc_NtkCecFraig+0x188>\n    1376:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n    137d:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    1384:\t48 85 c0             \ttest   %rax,%rax\n    1387:\t75 0f                \tjne    1398 <Abc_NtkCecFraig+0x1aa>\n    1389:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    138e:\te8 00 00 00 00       \tcallq  1393 <Abc_NtkCecFraig+0x1a5>\n    1393:\te9 85 02 00 00       \tjmpq   161d <Abc_NtkCecFraig+0x42f>\n    1398:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    139d:\t0f 84 9b 00 00 00    \tje     143e <Abc_NtkCecFraig+0x250>\n    13a3:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    13aa:\t48 89 c7             \tmov    %rax,%rdi\n    13ad:\te8 8d f8 ff ff       \tcallq  c3f <Abc_NtkPoNum>\n    13b2:\t83 f8 01             \tcmp    $0x1,%eax\n    13b5:\t74 19                \tje     13d0 <Abc_NtkCecFraig+0x1e2>\n    13b7:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    13bc:\tba a4 00 00 00       \tmov    $0xa4,%edx\n    13c1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    13c6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    13cb:\te8 00 00 00 00       \tcallq  13d0 <Abc_NtkCecFraig+0x1e2>\n    13d0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    13d4:\t48 89 c7             \tmov    %rax,%rdi\n    13d7:\te8 63 f8 ff ff       \tcallq  c3f <Abc_NtkPoNum>\n    13dc:\t83 f8 01             \tcmp    $0x1,%eax\n    13df:\t74 19                \tje     13fa <Abc_NtkCecFraig+0x20c>\n    13e1:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    13e6:\tba a5 00 00 00       \tmov    $0xa5,%edx\n    13eb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    13f0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    13f5:\te8 00 00 00 00       \tcallq  13fa <Abc_NtkCecFraig+0x20c>\n    13fa:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    1401:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1405:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    1409:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    140d:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    1413:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    1419:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    141e:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1423:\t48 89 c7             \tmov    %rax,%rdi\n    1426:\te8 00 00 00 00       \tcallq  142b <Abc_NtkCecFraig+0x23d>\n    142b:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n    1432:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1436:\t48 89 c7             \tmov    %rax,%rdi\n    1439:\te8 00 00 00 00       \tcallq  143e <Abc_NtkCecFraig+0x250>\n    143e:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    1445:\t48 89 c7             \tmov    %rax,%rdi\n    1448:\te8 00 00 00 00       \tcallq  144d <Abc_NtkCecFraig+0x25f>\n    144d:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    1450:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    1454:\t0f 85 a2 00 00 00    \tjne    14fc <Abc_NtkCecFraig+0x30e>\n    145a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    145f:\te8 00 00 00 00       \tcallq  1464 <Abc_NtkCecFraig+0x276>\n    1464:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    146b:\t48 8b 9d 68 ff ff ff \tmov    -0x98(%rbp),%rbx\n    1472:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1477:\t48 89 c7             \tmov    %rax,%rdi\n    147a:\te8 00 00 00 00       \tcallq  147f <Abc_NtkCecFraig+0x291>\n    147f:\t48 89 83 30 01 00 00 \tmov    %rax,0x130(%rbx)\n    1486:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    148d:\t48 8b 90 30 01 00 00 \tmov    0x130(%rax),%rdx\n    1494:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n    149b:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    14a2:\t48 89 ce             \tmov    %rcx,%rsi\n    14a5:\t48 89 c7             \tmov    %rax,%rdi\n    14a8:\te8 4f 11 00 00       \tcallq  25fc <Abc_NtkVerifyReportError>\n    14ad:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    14b4:\t48 8b 80 30 01 00 00 \tmov    0x130(%rax),%rax\n    14bb:\t48 85 c0             \ttest   %rax,%rax\n    14be:\t74 28                \tje     14e8 <Abc_NtkCecFraig+0x2fa>\n    14c0:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    14c7:\t48 8b 80 30 01 00 00 \tmov    0x130(%rax),%rax\n    14ce:\t48 89 c7             \tmov    %rax,%rdi\n    14d1:\te8 00 00 00 00       \tcallq  14d6 <Abc_NtkCecFraig+0x2e8>\n    14d6:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    14dd:\t48 c7 80 30 01 00 00 \tmovq   $0x0,0x130(%rax)\n    14e4:\t00 00 00 00 \n    14e8:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    14ef:\t48 89 c7             \tmov    %rax,%rdi\n    14f2:\te8 00 00 00 00       \tcallq  14f7 <Abc_NtkCecFraig+0x309>\n    14f7:\te9 21 01 00 00       \tjmpq   161d <Abc_NtkCecFraig+0x42f>\n    14fc:\t83 7d d4 01          \tcmpl   $0x1,-0x2c(%rbp)\n    1500:\t75 1e                \tjne    1520 <Abc_NtkCecFraig+0x332>\n    1502:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1507:\te8 00 00 00 00       \tcallq  150c <Abc_NtkCecFraig+0x31e>\n    150c:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    1513:\t48 89 c7             \tmov    %rax,%rdi\n    1516:\te8 00 00 00 00       \tcallq  151b <Abc_NtkCecFraig+0x32d>\n    151b:\te9 fd 00 00 00       \tjmpq   161d <Abc_NtkCecFraig+0x42f>\n    1520:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1524:\t48 89 c7             \tmov    %rax,%rdi\n    1527:\te8 00 00 00 00       \tcallq  152c <Abc_NtkCecFraig+0x33e>\n    152c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1530:\tc7 40 10 05 00 00 00 \tmovl   $0x5,0x10(%rax)\n    1537:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    153b:\t48 8d 85 68 ff ff ff \tlea    -0x98(%rbp),%rax\n    1542:\t48 89 d6             \tmov    %rdx,%rsi\n    1545:\t48 89 c7             \tmov    %rax,%rdi\n    1548:\te8 00 00 00 00       \tcallq  154d <Abc_NtkCecFraig+0x35f>\n    154d:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    1550:\t83 7d d4 ff          \tcmpl   $0xffffffff,-0x2c(%rbp)\n    1554:\t75 0c                \tjne    1562 <Abc_NtkCecFraig+0x374>\n    1556:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    155b:\te8 00 00 00 00       \tcallq  1560 <Abc_NtkCecFraig+0x372>\n    1560:\teb 72                \tjmp    15d4 <Abc_NtkCecFraig+0x3e6>\n    1562:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    1566:\t75 62                \tjne    15ca <Abc_NtkCecFraig+0x3dc>\n    1568:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    156f:\t48 8b 90 30 01 00 00 \tmov    0x130(%rax),%rdx\n    1576:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    157d:\t48 89 d6             \tmov    %rdx,%rsi\n    1580:\t48 89 c7             \tmov    %rax,%rdi\n    1583:\te8 00 00 00 00       \tcallq  1588 <Abc_NtkCecFraig+0x39a>\n    1588:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    158c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1590:\t8b 00                \tmov    (%rax),%eax\n    1592:\t83 f8 01             \tcmp    $0x1,%eax\n    1595:\t74 0c                \tje     15a3 <Abc_NtkCecFraig+0x3b5>\n    1597:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    159c:\te8 00 00 00 00       \tcallq  15a1 <Abc_NtkCecFraig+0x3b3>\n    15a1:\teb 0a                \tjmp    15ad <Abc_NtkCecFraig+0x3bf>\n    15a3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    15a8:\te8 00 00 00 00       \tcallq  15ad <Abc_NtkCecFraig+0x3bf>\n    15ad:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    15b2:\t74 20                \tje     15d4 <Abc_NtkCecFraig+0x3e6>\n    15b4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    15b8:\t48 89 c7             \tmov    %rax,%rdi\n    15bb:\te8 00 00 00 00       \tcallq  15c0 <Abc_NtkCecFraig+0x3d2>\n    15c0:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n    15c7:\t00 \n    15c8:\teb 0a                \tjmp    15d4 <Abc_NtkCecFraig+0x3e6>\n    15ca:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    15cf:\te8 00 00 00 00       \tcallq  15d4 <Abc_NtkCecFraig+0x3e6>\n    15d4:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    15db:\t48 8b 80 30 01 00 00 \tmov    0x130(%rax),%rax\n    15e2:\t48 85 c0             \ttest   %rax,%rax\n    15e5:\t74 27                \tje     160e <Abc_NtkCecFraig+0x420>\n    15e7:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    15ee:\t48 8b 90 30 01 00 00 \tmov    0x130(%rax),%rdx\n    15f5:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n    15fc:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    1603:\t48 89 ce             \tmov    %rcx,%rsi\n    1606:\t48 89 c7             \tmov    %rax,%rdi\n    1609:\te8 ee 0f 00 00       \tcallq  25fc <Abc_NtkVerifyReportError>\n    160e:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    1615:\t48 89 c7             \tmov    %rax,%rdi\n    1618:\te8 00 00 00 00       \tcallq  161d <Abc_NtkCecFraig+0x42f>\n    161d:\t48 81 c4 b8 00 00 00 \tadd    $0xb8,%rsp\n    1624:\t5b                   \tpop    %rbx\n    1625:\t5d                   \tpop    %rbp\n    1626:\tc3                   \tretq   ", "code_s": "int __fastcall Abc_NtkCecFraig(__int64 a1, __int64 a2, unsigned int a3,\n                               unsigned int a4) {\n  int result;\n  __int64 v7;\n  char <span class=\"supfact\">v8</span>;\n  void *ptr;\n  int v10;\n  __int64 v11;\n  char *v12;\n  __int64 v13;\n  v12 = &<span class=\"supfact\">v8</span>;\n  v13 = Number L;\n  if (*(_QWORD *)(a1 + Number) || *(_QWORD *)(a2 + Number)) {\n    if (*(_QWORD *)(a1 + Number) && *(_QWORD *)(a2 + Number)) {\n      puts(String);\n      Abc_NtkCecFraig(*(_QWORD *)(a1 + Number), *(_QWORD *)(a2 + Number), a3,\n                      a4);\n      puts(String);\n      v13 = *(_QWORD *)(a1 + Number);\n    } else if (*(_QWORD *)(a1 + Number)) {\n      puts(String);\n      v13 = *(_QWORD *)(a1 + Number);\n    } else {\n      if (!*(_QWORD *)(a2 + Number))\n        _assert_fail(String, String, Number, String);\n      puts(String);\n      v13 = *(_QWORD *)(a2 + Number);\n    }\n  }\n  v7 = Abc_NtkMiter(a1, a2, Number L, Number L, Number L, Number L);\n  if (!v7)\n    return puts(String);\n  if (v13) {\n    if ((unsigned int)Abc_NtkPoNum(v7) != Number)\n      _assert_fail(String, String, Number, String);\n    if ((unsigned int)Abc_NtkPoNum(v13) != Number)\n      _assert_fail(String, String, Number, String);\n    v11 = v7;\n    v7 = Abc_NtkMiter(v7, v13, Number L, Number L, Number L, Number L);\n    Abc_NtkDelete(v11);\n  }\n  v10 = Abc_NtkMiterIsConstant(v7);\n  if (v10) {\n    if (v10 == Number) {\n      puts(String);\n      result = Abc_NtkDelete(v7);\n    } else {\n      Prove_ParamsSetDefault(v12);\n      *((_DWORD *)v12 + Number) = Number;\n      v10 = Abc_NtkIvyProve(&v7, v12);\n      if (v10 == Number) {\n        puts(String);\n      } else if (v10) {\n        puts(String);\n      } else {\n        ptr =\n            (void *)Abc_NtkVerifySimulatePattern(v7, *(_QWORD *)(v7 + Number));\n        if (*(_DWORD *)ptr == Number)\n          puts(String);\n        else puts ( String : Generated counter - example is invalid . String ; if ( ptr ) {\n            free(ptr);\n            ptr = Number L; }\n      }\n      if (*(_QWORD *)(v7 + Number))\n        Abc_NtkVerifyReportError(a1, a2, *(_QWORD *)(v7 + Number));\n      result = Abc_NtkDelete(v7);\n    }\n  } else {\n    puts(String);\n    *(_QWORD *)(v7 + Number) = Abc_NtkVerifyGetCleanModel(v7, Number L);\n    Abc_NtkVerifyReportError(a1, a2, *(_QWORD *)(v7 + Number));\n    if (*(_QWORD *)(v7 + Number)) {\n      free(*(void **)(v7 + Number));\n      *(_QWORD *)(v7 + Number) = Number L;\n    }\n    result = Abc_NtkDelete(v7);\n  }\n  return result;\n}", "code_t": "void __cdecl Abc_NtkCecFraig(Abc_Ntk_t *pNtk1, Abc_Ntk_t *pNtk2, int nSeconds,\n                             int fVerbose) {\n  Abc_Ntk_t *pMiter;\n  Prove_Params_t <span class=\"supfact\">Params</span>;\n  int *pSimInfo;\n  int RetValue;\n  Abc_Ntk_t *pTemp;\n  Prove_Params_t *pParams;\n  Abc_Ntk_t *pExdc;\n  pParams = &<span class=\"supfact\">Params</span>;\n  pExdc = Number L;\n  if (pNtk1->pExdc || pNtk2->pExdc) {\n    if (pNtk1->pExdc && pNtk2->pExdc) {\n      puts(String);\n      Abc_NtkCecFraig(pNtk1->pExdc, pNtk2->pExdc, nSeconds, fVerbose);\n      puts(String);\n      pExdc = pNtk1->pExdc;\n    } else if (pNtk1->pExdc) {\n      puts(String);\n      pExdc = pNtk1->pExdc;\n    } else {\n      if (!pNtk2->pExdc)\n        _assert_fail(String, String, Number, String);\n      puts(String);\n      pExdc = pNtk2->pExdc;\n    }\n  }\n  pMiter = (Abc_Ntk_t *)Abc_NtkMiter(pNtk1, pNtk2, Number L, Number L, Number L,\n                                     Number L);\n  if (pMiter) {\n    if (pExdc) {\n      if (Abc_NtkPoNum(pMiter) != Number)\n        _assert_fail(String, String, Number, String);\n      if (Abc_NtkPoNum(pExdc) != Number)\n        _assert_fail(String, String, Number, String);\n      pTemp = pMiter;\n      pMiter = (Abc_Ntk_t *)Abc_NtkMiter(pMiter, pExdc, Number L, Number L,\n                                         Number L, Number L);\n      Abc_NtkDelete(pTemp);\n    }\n    RetValue = Abc_NtkMiterIsConstant(pMiter);\n    if (RetValue) {\n      if (RetValue == Number) {\n        puts(String);\n        Abc_NtkDelete(pMiter);\n      } else {\n        Prove_ParamsSetDefault(pParams);\n        pParams->nItersMax = Number;\n        RetValue = Abc_NtkIvyProve(&pMiter, pParams);\n        if (RetValue == Number) {\n          puts(String);\n        } else if (RetValue) {\n          puts(String);\n        } else {\n          pSimInfo = Abc_NtkVerifySimulatePattern(pMiter, pMiter->pModel);\n          if (*pSimInfo == Number)\n            puts(String);\n          else puts ( String : Generated counter - example is invalid . String ; if ( pSimInfo ) {\n              free(pSimInfo);\n              pSimInfo = Number L; }\n        }\n        if (pMiter->pModel)\n          Abc_NtkVerifyReportError(pNtk1, pNtk2, pMiter->pModel);\n        Abc_NtkDelete(pMiter);\n      }\n    } else {\n      puts(String);\n      pMiter->pModel = Abc_NtkVerifyGetCleanModel(pMiter, Number);\n      Abc_NtkVerifyReportError(pNtk1, pNtk2, pMiter->pModel);\n      if (pMiter->pModel) {\n        free(pMiter->pModel);\n        pMiter->pModel = Number L;\n      }\n      Abc_NtkDelete(pMiter);\n    }\n  } else {\n    puts(String);\n  }\n}", "var": [{"name": "v8", "type": "disappear", "pred_name": "", "ref_name": "Params", "ref_type": "struct Prove_Params_t { int fUseFraiging; int fUseRewriting; int fUseBdds; int fVerbose; int nItersMax; int nMiteringLimitStart; float nMiteringLimitMulti; int nRewritingLimitStart; float nRewritingLimitMulti; int nFraigingLimitStart; float nFraigingLimitMulti; int nBddSizeLimit; int fBddReorder; int nMiteringLimitLast; ABC_INT64_T nTotalBacktrackLimit; ABC_INT64_T nTotalInspectLimit; ABC_INT64_T nTotalBacktracksMade; ABC_INT64_T nTotalInspectsMade; }"}], "body_in_train": false}, {"repo_owner": "lixuewei", "repo_name": "rt-n56u", "path": "lixuewei/rt-n56u/3a3c001e73b0ce7dc4f4832e0e32f6d7a7f0dfc33334901c687aeab06874ebd7", "path_in_repo": "lixuewei/rt-n56u/trunk/user/e2fsprogs/e2fsprogs-1.42.8/lib/ext2fs/elfshared/bb_inode.o", "objdump": "0000000000000000 <ext2fs_update_bb_inode>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n   b:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n  12:\t48 89 b5 30 ff ff ff \tmov    %rsi,-0xd0(%rbp)\n  19:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n  20:\t48 8b 00             \tmov    (%rax),%rax\n  23:\t48 3d 01 b7 2b 7f    \tcmp    $0x7f2bb701,%rax\n  29:\t74 0a                \tje     35 <ext2fs_update_bb_inode+0x35>\n  2b:\tb8 01 b7 2b 7f       \tmov    $0x7f2bb701,%eax\n  30:\te9 eb 02 00 00       \tjmpq   320 <ext2fs_update_bb_inode+0x320>\n  35:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n  3c:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  40:\t48 85 c0             \ttest   %rax,%rax\n  43:\t75 0a                \tjne    4f <ext2fs_update_bb_inode+0x4f>\n  45:\tb8 28 b7 2b 7f       \tmov    $0x7f2bb728,%eax\n  4a:\te9 d1 02 00 00       \tjmpq   320 <ext2fs_update_bb_inode+0x320>\n  4f:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  53:\tba 38 00 00 00       \tmov    $0x38,%edx\n  58:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  5d:\t48 89 c7             \tmov    %rax,%rdi\n  60:\te8 00 00 00 00       \tcallq  65 <ext2fs_update_bb_inode+0x65>\n  65:\tc7 45 d8 0a 00 00 00 \tmovl   $0xa,-0x28(%rbp)\n  6c:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  6f:\t48 98                \tcltq   \n  71:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  75:\t48 83 c2 10          \tadd    $0x10,%rdx\n  79:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  7e:\t48 89 c7             \tmov    %rax,%rdi\n  81:\te8 00 00 00 00       \tcallq  86 <ext2fs_update_bb_inode+0x86>\n  86:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  8a:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  8f:\t74 09                \tje     9a <ext2fs_update_bb_inode+0x9a>\n  91:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  95:\te9 86 02 00 00       \tjmpq   320 <ext2fs_update_bb_inode+0x320>\n  9a:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  9d:\t48 98                \tcltq   \n  9f:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  a6:\t00 \n  a7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  ab:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  b0:\t48 89 c7             \tmov    %rax,%rdi\n  b3:\te8 00 00 00 00       \tcallq  b8 <ext2fs_update_bb_inode+0xb8>\n  b8:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n  bf:\t8b 40 28             \tmov    0x28(%rax),%eax\n  c2:\t89 c2                \tmov    %eax,%edx\n  c4:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  c8:\t48 83 c0 28          \tadd    $0x28,%rax\n  cc:\t48 89 c6             \tmov    %rax,%rsi\n  cf:\t48 89 d7             \tmov    %rdx,%rdi\n  d2:\te8 00 00 00 00       \tcallq  d7 <ext2fs_update_bb_inode+0xd7>\n  d7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  db:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  e0:\t0f 85 09 02 00 00    \tjne    2ef <ext2fs_update_bb_inode+0x2ef>\n  e6:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n  ed:\t8b 40 28             \tmov    0x28(%rax),%eax\n  f0:\t89 c2                \tmov    %eax,%edx\n  f2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  f6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  fb:\t48 89 c7             \tmov    %rax,%rdi\n  fe:\te8 00 00 00 00       \tcallq  103 <ext2fs_update_bb_inode+0x103>\n 103:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n 10a:\t00 \n 10b:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 10f:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 116:\t49 89 d1             \tmov    %rdx,%r9\n 119:\t4c 8d 05 02 02 00 00 \tlea    0x202(%rip),%r8        # 322 <clear_bad_block_proc>\n 120:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 125:\tba 02 00 00 00       \tmov    $0x2,%edx\n 12a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 12f:\t48 89 c7             \tmov    %rax,%rdi\n 132:\te8 00 00 00 00       \tcallq  137 <ext2fs_update_bb_inode+0x137>\n 137:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 13b:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 140:\t0f 85 ac 01 00 00    \tjne    2f2 <ext2fs_update_bb_inode+0x2f2>\n 146:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 14a:\t48 85 c0             \ttest   %rax,%rax\n 14d:\t74 0d                \tje     15c <ext2fs_update_bb_inode+0x15c>\n 14f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 153:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 157:\te9 a0 01 00 00       \tjmpq   2fc <ext2fs_update_bb_inode+0x2fc>\n 15c:\t48 83 bd 30 ff ff ff \tcmpq   $0x0,-0xd0(%rbp)\n 163:\t00 \n 164:\t0f 84 82 00 00 00    \tje     1ec <ext2fs_update_bb_inode+0x1ec>\n 16a:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 16e:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 175:\t48 89 d6             \tmov    %rdx,%rsi\n 178:\t48 89 c7             \tmov    %rax,%rdi\n 17b:\te8 00 00 00 00       \tcallq  180 <ext2fs_update_bb_inode+0x180>\n 180:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 184:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 189:\t0f 85 66 01 00 00    \tjne    2f5 <ext2fs_update_bb_inode+0x2f5>\n 18f:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 193:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 19a:\t49 89 d1             \tmov    %rdx,%r9\n 19d:\t4c 8d 05 f3 02 00 00 \tlea    0x2f3(%rip),%r8        # 497 <set_bad_block_proc>\n 1a4:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 1a9:\tba 01 00 00 00       \tmov    $0x1,%edx\n 1ae:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 1b3:\t48 89 c7             \tmov    %rax,%rdi\n 1b6:\te8 00 00 00 00       \tcallq  1bb <ext2fs_update_bb_inode+0x1bb>\n 1bb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 1bf:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 1c3:\t48 89 c7             \tmov    %rax,%rdi\n 1c6:\te8 00 00 00 00       \tcallq  1cb <ext2fs_update_bb_inode+0x1cb>\n 1cb:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 1d0:\t0f 85 22 01 00 00    \tjne    2f8 <ext2fs_update_bb_inode+0x2f8>\n 1d6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 1da:\t48 85 c0             \ttest   %rax,%rax\n 1dd:\t74 0d                \tje     1ec <ext2fs_update_bb_inode+0x1ec>\n 1df:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 1e3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 1e7:\te9 10 01 00 00       \tjmpq   2fc <ext2fs_update_bb_inode+0x2fc>\n 1ec:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n 1f3:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 1fa:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 1ff:\t48 89 c7             \tmov    %rax,%rdi\n 202:\te8 00 00 00 00       \tcallq  207 <ext2fs_update_bb_inode+0x207>\n 207:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 20b:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 210:\t0f 85 e5 00 00 00    \tjne    2fb <ext2fs_update_bb_inode+0x2fb>\n 216:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 21d:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n 224:\t48 85 c0             \ttest   %rax,%rax\n 227:\t74 10                \tje     239 <ext2fs_update_bb_inode+0x239>\n 229:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 230:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n 237:\teb 0a                \tjmp    243 <ext2fs_update_bb_inode+0x243>\n 239:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 23e:\te8 00 00 00 00       \tcallq  243 <ext2fs_update_bb_inode+0x243>\n 243:\t89 85 50 ff ff ff    \tmov    %eax,-0xb0(%rbp)\n 249:\t8b 85 50 ff ff ff    \tmov    -0xb0(%rbp),%eax\n 24f:\t89 85 48 ff ff ff    \tmov    %eax,-0xb8(%rbp)\n 255:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n 25b:\t85 c0                \ttest   %eax,%eax\n 25d:\t75 33                \tjne    292 <ext2fs_update_bb_inode+0x292>\n 25f:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 266:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n 26d:\t48 85 c0             \ttest   %rax,%rax\n 270:\t74 10                \tje     282 <ext2fs_update_bb_inode+0x282>\n 272:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 279:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n 280:\teb 0a                \tjmp    28c <ext2fs_update_bb_inode+0x28c>\n 282:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 287:\te8 00 00 00 00       \tcallq  28c <ext2fs_update_bb_inode+0x28c>\n 28c:\t89 85 4c ff ff ff    \tmov    %eax,-0xb4(%rbp)\n 292:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 295:\t48 63 d0             \tmovslq %eax,%rdx\n 298:\t48 8d 8d 40 ff ff ff \tlea    -0xc0(%rbp),%rcx\n 29f:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 2a6:\t48 89 ce             \tmov    %rcx,%rsi\n 2a9:\t48 89 c7             \tmov    %rax,%rdi\n 2ac:\te8 00 00 00 00       \tcallq  2b1 <ext2fs_update_bb_inode+0x2b1>\n 2b1:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 2b4:\t89 c2                \tmov    %eax,%edx\n 2b6:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 2bd:\t8b 40 28             \tmov    0x28(%rax),%eax\n 2c0:\t0f af c2             \timul   %edx,%eax\n 2c3:\t89 85 44 ff ff ff    \tmov    %eax,-0xbc(%rbp)\n 2c9:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n 2d0:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 2d7:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 2dc:\t48 89 c7             \tmov    %rax,%rdi\n 2df:\te8 00 00 00 00       \tcallq  2e4 <ext2fs_update_bb_inode+0x2e4>\n 2e4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 2e8:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 2ed:\teb 0d                \tjmp    2fc <ext2fs_update_bb_inode+0x2fc>\n 2ef:\t90                   \tnop\n 2f0:\teb 0a                \tjmp    2fc <ext2fs_update_bb_inode+0x2fc>\n 2f2:\t90                   \tnop\n 2f3:\teb 07                \tjmp    2fc <ext2fs_update_bb_inode+0x2fc>\n 2f5:\t90                   \tnop\n 2f6:\teb 04                \tjmp    2fc <ext2fs_update_bb_inode+0x2fc>\n 2f8:\t90                   \tnop\n 2f9:\teb 01                \tjmp    2fc <ext2fs_update_bb_inode+0x2fc>\n 2fb:\t90                   \tnop\n 2fc:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 300:\t48 83 c0 10          \tadd    $0x10,%rax\n 304:\t48 89 c7             \tmov    %rax,%rdi\n 307:\te8 00 00 00 00       \tcallq  30c <ext2fs_update_bb_inode+0x30c>\n 30c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 310:\t48 83 c0 28          \tadd    $0x28,%rax\n 314:\t48 89 c7             \tmov    %rax,%rdi\n 317:\te8 00 00 00 00       \tcallq  31c <ext2fs_update_bb_inode+0x31c>\n 31c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 320:\tc9                   \tleaveq \n 321:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ext2fs_update_bb_inode(__int64 a1, __int64 a2) {\n  __int64 v3;\n  __int64 v4;\n  char <span class=\"supfact\">v5</span>[Number];\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  __int64 <span class=\"supfact\">s</span>[Number];\n  __int64 v11;\n  if (*(_QWORD *)a1 != Number L)\n    return Number L;\n  if (!*(_QWORD *)(a1 + Number))\n    return Number L;\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  LODWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n  v11 = ext2fs_get_array(Number L, Number L, &<span class=\"supfact\">s</span>[Number]);\n  if (v11)\n    return v11;\n  memset((void *)<span class=\"supfact\">s</span>[Number], Number,\n         Number L * SLODWORD(<span class=\"supfact\">s</span>[Number]));\n  v11 = ext2fs_get_mem(*(unsigned int *)(a1 + Number),\n                       &<span class=\"supfact\">s</span>[Number]);\n  if (!v11) {\n    memset((void *)<span class=\"supfact\">s</span>[Number], Number,\n           *(unsigned int *)(a1 + Number));\n    <span class=\"supfact\">s</span>[Number] = Number L;\n    v11 = ext2fs_block_iterate2(a1, Number L, Number L, Number L,\n                                clear_bad_block_proc, <span class=\"supfact\">s</span>);\n    if (!v11) {\n      if (<span class=\"supfact\">s</span>[Number]) {\n        v11 = <span class=\"supfact\">s</span>[Number];\n      } else {\n        if (!a2)\n          goto LABEL_16;\n        v11 = ext2fs_badblocks_list_iterate_begin(a2, <span class=\"supfact\">s</span>);\n        if (v11)\n          goto LABEL_26;\n        v11 = ext2fs_block_iterate2(a1, Number L, Number L, Number L,\n                                    set_bad_block_proc, <span class=\"supfact\">s</span>);\n        ext2fs_badblocks_list_iterate_end(<span class=\"supfact\">s</span>[Number]);\n        if (v11)\n          goto LABEL_26;\n        if (!<span class=\"supfact\">s</span>[Number]) {\n        LABEL_16:\n          v11 = ext2fs_read_inode(a1, Number L, <span class=\"supfact\">v5</span>);\n          if (!v11) {\n            if (*(_QWORD *)(a1 + Number))\n              v3 = *(_QWORD *)(a1 + Number);\n            else\n              LODWORD(v3) = time(Number L);\n            v9 = v3;\n            v7 = v3;\n            if (!v8) {\n              if (*(_QWORD *)(a1 + Number))\n                v4 = *(_QWORD *)(a1 + Number);\n              else\n                LODWORD(v4) = time(Number L);\n              v8 = v4;\n            }\n            ext2fs_iblk_set(a1, <span class=\"supfact\">v5</span>,\n                            SLODWORD(<span class=\"supfact\">s</span>[Number]));\n            v6 = LODWORD(<span class=\"supfact\">s</span>[Number]) * *(_DWORD *)(a1 + Number);\n            v11 = ext2fs_write_inode(a1, Number L, <span class=\"supfact\">v5</span>);\n          }\n          goto LABEL_26;\n        }\n        v11 = <span class=\"supfact\">s</span>[Number];\n      }\n    }\n  }\nLABEL_26:\n  ext2fs_free_mem(&<span class=\"supfact\">s</span>[Number]);\n  ext2fs_free_mem(&<span class=\"supfact\">s</span>[Number]);\n  return v11;\n}", "code_t": "errcode_t __cdecl ext2fs_update_bb_inode(ext2_filsys fs_0,\n                                         ext2_badblocks_list bb_list) {\n  time_t v3;\n  time_t v4;\n  ext2_inode <span class=\"supfact\">inode</span>;\n  set_badblock_record <span class=\"supfact\">rec</span>;\n  errcode_t retval;\n  if (fs_0->magic != Number)\n    return Number L;\n  if (!fs_0->block_map)\n    return Number L;\n  memset(&<span class=\"supfact\">rec</span>, Number, sizeof(<span class=\"supfact\">rec</span>));\n  <span class=\"supfact\">rec</span>.max_ind_blocks = Number;\n  retval =\n      ext2fs_get_array(Number L, Number L, &<span class=\"supfact\">rec</span>.ind_blocks);\n  if (retval)\n    return retval;\n  memset(<span class=\"supfact\">rec</span>.ind_blocks, Number,\n         Number L * <span class=\"supfact\">rec</span>.max_ind_blocks);\n  retval = ext2fs_get_mem(fs_0->blocksize, &<span class=\"supfact\">rec</span>.block_buf);\n  if (!retval) {\n    memset(<span class=\"supfact\">rec</span>.block_buf, Number, fs_0->blocksize);\n    <span class=\"supfact\">rec</span>.err = Number L;\n    retval = ext2fs_block_iterate2(fs_0, Number L, Number L, Number L,\n                                   clear_bad_block_proc, &<span class=\"supfact\">rec</span>);\n    if (!retval) {\n      if (<span class=\"supfact\">rec</span>.err) {\n        retval = <span class=\"supfact\">rec</span>.err;\n      } else {\n        if (!bb_list)\n          goto LABEL_16;\n        retval =\n            ext2fs_badblocks_list_iterate_begin(bb_list, &<span class=\"supfact\">rec</span>);\n        if (retval)\n          goto cleanup;\n        retval =\n            ext2fs_block_iterate2(fs_0, Number L, Number L, Number L,\n                                  set_bad_block_proc, &<span class=\"supfact\">rec</span>);\n        ext2fs_badblocks_list_iterate_end(<span class=\"supfact\">rec</span>.bb_iter);\n        if (retval)\n          goto cleanup;\n        if (!<span class=\"supfact\">rec</span>.err) {\n        LABEL_16:\n          retval = ext2fs_read_inode(fs_0, Number L, &<span class=\"supfact\">inode</span>);\n          if (!retval) {\n            if (fs_0->now)\n              v3 = fs_0->now;\n            else\n              LODWORD(v3) = time(Number L);\n            <span class=\"supfact\">inode</span>.i_mtime = v3;\n            <span class=\"supfact\">inode</span>.i_atime = v3;\n            if (!<span class=\"supfact\">inode</span>.i_ctime) {\n              if (fs_0->now)\n                v4 = fs_0->now;\n              else\n                LODWORD(v4) = time(Number L);\n              <span class=\"supfact\">inode</span>.i_ctime = v4;\n            }\n            ext2fs_iblk_set(fs_0, &<span class=\"supfact\">inode</span>,\n                            <span class=\"supfact\">rec</span>.bad_block_count);\n            <span class=\"supfact\">inode</span>.i_size =\n                <span class=\"supfact\">rec</span>.bad_block_count * fs_0->blocksize;\n            retval = ext2fs_write_inode(fs_0, Number L, &<span class=\"supfact\">inode</span>);\n          }\n          goto cleanup;\n        }\n        retval = <span class=\"supfact\">rec</span>.err;\n      }\n    }\n  }\ncleanup:\n  ext2fs_free_mem(&<span class=\"supfact\">rec</span>.ind_blocks);\n  ext2fs_free_mem(&<span class=\"supfact\">rec</span>.block_buf);\n  return retval;\n}", "var": [{"name": "v5", "type": "int", "pred_name": "__unk__", "ref_name": "inode", "ref_type": "struct ext2_inode { __u16 i_mode; __u16 i_uid; __u32 i_size; __u32 i_atime; __u32 i_ctime; __u32 i_mtime; __u32 i_dtime; __u16 i_gid; __u16 i_links_count; __u32 i_blocks; __u32 i_flags; $5ADB628DA63E79BD3C10CF5E92D07832 osd1; __u32[15] i_block; __u32 i_generation; __u32 i_file_acl; __u32 i_size_high; __u32 i_faddr; $3AF7EEA379CB690DF9130B9F27002DB2 osd2; }"}, {"name": "s", "type": "blk_t", "pred_name": "blk", "ref_name": "rec", "ref_type": "struct set_badblock_record { ext2_badblocks_iterate bb_iter; int bad_block_count; PADDING (4); blk_t * ind_blocks; int max_ind_blocks; int ind_blocks_size; int ind_blocks_ptr; PADDING (4); char * block_buf; errcode_t err; }"}], "body_in_train": false}]