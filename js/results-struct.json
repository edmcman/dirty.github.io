[{"repo_owner": "afni", "repo_name": "afni", "path": "afni/afni/12f9e4a9d90aa4f3633a7351f4acfc4d9829f9345666ef901b82ad04dd05acd1", "path_in_repo": "afni/afni/src/gifti/gifti_tool", "objdump": "000000000041e43a <stack_is_valid>:\n  41e43a:\t55                   \tpush   %rbp\n  41e43b:\t48 89 e5             \tmov    %rsp,%rbp\n  41e43e:\t48 83 ec 20          \tsub    $0x20,%rsp\n  41e442:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  41e446:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41e44a:\t8b 40 44             \tmov    0x44(%rax),%eax\n  41e44d:\t85 c0                \ttest   %eax,%eax\n  41e44f:\t79 0a                \tjns    41e45b <stack_is_valid+0x21>\n  41e451:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41e456:\te9 64 02 00 00       \tjmpq   41e6bf <stack_is_valid+0x285>\n  41e45b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41e45f:\t8b 40 44             \tmov    0x44(%rax),%eax\n  41e462:\t85 c0                \ttest   %eax,%eax\n  41e464:\t75 0a                \tjne    41e470 <stack_is_valid+0x36>\n  41e466:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  41e46b:\te9 4f 02 00 00       \tjmpq   41e6bf <stack_is_valid+0x285>\n  41e470:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41e474:\t8b 40 44             \tmov    0x44(%rax),%eax\n  41e477:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  41e47a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41e47e:\t48 63 d2             \tmovslq %edx,%rdx\n  41e481:\t48 83 c2 10          \tadd    $0x10,%rdx\n  41e485:\t8b 44 90 08          \tmov    0x8(%rax,%rdx,4),%eax\n  41e489:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  41e48c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41e490:\t8b 40 44             \tmov    0x44(%rax),%eax\n  41e493:\t83 f8 01             \tcmp    $0x1,%eax\n  41e496:\t75 2b                \tjne    41e4c3 <stack_is_valid+0x89>\n  41e498:\t83 7d f4 01          \tcmpl   $0x1,-0xc(%rbp)\n  41e49c:\t74 1b                \tje     41e4b9 <stack_is_valid+0x7f>\n  41e49e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41e4a2:\t48 89 c6             \tmov    %rax,%rsi\n  41e4a5:\tbf 3f ce 44 00       \tmov    $0x44ce3f,%edi\n  41e4aa:\te8 c4 fe ff ff       \tcallq  41e373 <show_stack>\n  41e4af:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41e4b4:\te9 06 02 00 00       \tjmpq   41e6bf <stack_is_valid+0x285>\n  41e4b9:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  41e4be:\te9 fc 01 00 00       \tjmpq   41e6bf <stack_is_valid+0x285>\n  41e4c3:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  41e4ca:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  41e4d1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41e4d5:\t8b 40 44             \tmov    0x44(%rax),%eax\n  41e4d8:\t8d 50 fe             \tlea    -0x2(%rax),%edx\n  41e4db:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41e4df:\t48 63 d2             \tmovslq %edx,%rdx\n  41e4e2:\t48 83 c2 10          \tadd    $0x10,%rdx\n  41e4e6:\t8b 44 90 08          \tmov    0x8(%rax,%rdx,4),%eax\n  41e4ea:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  41e4ed:\t83 7d f4 0e          \tcmpl   $0xe,-0xc(%rbp)\n  41e4f1:\t77 0d                \tja     41e500 <stack_is_valid+0xc6>\n  41e4f3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  41e4f6:\t48 8b 04 c5 80 ce 44 \tmov    0x44ce80(,%rax,8),%rax\n  41e4fd:\t00 \n  41e4fe:\tff e0                \tjmpq   *%rax\n  41e500:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  41e507:\te9 45 01 00 00       \tjmpq   41e651 <stack_is_valid+0x217>\n  41e50c:\t83 7d f0 01          \tcmpl   $0x1,-0x10(%rbp)\n  41e510:\t0f 84 16 01 00 00    \tje     41e62c <stack_is_valid+0x1f2>\n  41e516:\t83 7d f0 08          \tcmpl   $0x8,-0x10(%rbp)\n  41e51a:\t0f 84 0c 01 00 00    \tje     41e62c <stack_is_valid+0x1f2>\n  41e520:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e527:\te9 00 01 00 00       \tjmpq   41e62c <stack_is_valid+0x1f2>\n  41e52c:\t83 7d f0 02          \tcmpl   $0x2,-0x10(%rbp)\n  41e530:\t0f 84 f9 00 00 00    \tje     41e62f <stack_is_valid+0x1f5>\n  41e536:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e53d:\te9 ed 00 00 00       \tjmpq   41e62f <stack_is_valid+0x1f5>\n  41e542:\t83 7d f0 03          \tcmpl   $0x3,-0x10(%rbp)\n  41e546:\t0f 84 e6 00 00 00    \tje     41e632 <stack_is_valid+0x1f8>\n  41e54c:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e553:\te9 da 00 00 00       \tjmpq   41e632 <stack_is_valid+0x1f8>\n  41e558:\t83 7d f0 03          \tcmpl   $0x3,-0x10(%rbp)\n  41e55c:\t0f 84 d3 00 00 00    \tje     41e635 <stack_is_valid+0x1fb>\n  41e562:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e569:\te9 c7 00 00 00       \tjmpq   41e635 <stack_is_valid+0x1fb>\n  41e56e:\t83 7d f0 01          \tcmpl   $0x1,-0x10(%rbp)\n  41e572:\t0f 84 c0 00 00 00    \tje     41e638 <stack_is_valid+0x1fe>\n  41e578:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e57f:\te9 b4 00 00 00       \tjmpq   41e638 <stack_is_valid+0x1fe>\n  41e584:\t83 7d f0 06          \tcmpl   $0x6,-0x10(%rbp)\n  41e588:\t0f 84 ad 00 00 00    \tje     41e63b <stack_is_valid+0x201>\n  41e58e:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e595:\te9 a1 00 00 00       \tjmpq   41e63b <stack_is_valid+0x201>\n  41e59a:\t83 7d f0 01          \tcmpl   $0x1,-0x10(%rbp)\n  41e59e:\t0f 84 9a 00 00 00    \tje     41e63e <stack_is_valid+0x204>\n  41e5a4:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e5ab:\te9 8e 00 00 00       \tjmpq   41e63e <stack_is_valid+0x204>\n  41e5b0:\t83 7d f0 08          \tcmpl   $0x8,-0x10(%rbp)\n  41e5b4:\t0f 84 87 00 00 00    \tje     41e641 <stack_is_valid+0x207>\n  41e5ba:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e5c1:\teb 7e                \tjmp    41e641 <stack_is_valid+0x207>\n  41e5c3:\t83 7d f0 08          \tcmpl   $0x8,-0x10(%rbp)\n  41e5c7:\t74 7b                \tje     41e644 <stack_is_valid+0x20a>\n  41e5c9:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e5d0:\teb 72                \tjmp    41e644 <stack_is_valid+0x20a>\n  41e5d2:\t83 7d f0 09          \tcmpl   $0x9,-0x10(%rbp)\n  41e5d6:\t74 6f                \tje     41e647 <stack_is_valid+0x20d>\n  41e5d8:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e5df:\teb 66                \tjmp    41e647 <stack_is_valid+0x20d>\n  41e5e1:\t83 7d f0 09          \tcmpl   $0x9,-0x10(%rbp)\n  41e5e5:\t74 63                \tje     41e64a <stack_is_valid+0x210>\n  41e5e7:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e5ee:\teb 5a                \tjmp    41e64a <stack_is_valid+0x210>\n  41e5f0:\t83 7d f0 09          \tcmpl   $0x9,-0x10(%rbp)\n  41e5f4:\t74 57                \tje     41e64d <stack_is_valid+0x213>\n  41e5f6:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e5fd:\teb 4e                \tjmp    41e64d <stack_is_valid+0x213>\n  41e5ff:\t83 7d f0 04          \tcmpl   $0x4,-0x10(%rbp)\n  41e603:\t74 4b                \tje     41e650 <stack_is_valid+0x216>\n  41e605:\t83 7d f0 05          \tcmpl   $0x5,-0x10(%rbp)\n  41e609:\t74 45                \tje     41e650 <stack_is_valid+0x216>\n  41e60b:\t83 7d f0 07          \tcmpl   $0x7,-0x10(%rbp)\n  41e60f:\t74 3f                \tje     41e650 <stack_is_valid+0x216>\n  41e611:\t83 7d f0 0b          \tcmpl   $0xb,-0x10(%rbp)\n  41e615:\t74 39                \tje     41e650 <stack_is_valid+0x216>\n  41e617:\t83 7d f0 0c          \tcmpl   $0xc,-0x10(%rbp)\n  41e61b:\t74 33                \tje     41e650 <stack_is_valid+0x216>\n  41e61d:\t83 7d f0 0d          \tcmpl   $0xd,-0x10(%rbp)\n  41e621:\t74 2d                \tje     41e650 <stack_is_valid+0x216>\n  41e623:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41e62a:\teb 24                \tjmp    41e650 <stack_is_valid+0x216>\n  41e62c:\t90                   \tnop\n  41e62d:\teb 22                \tjmp    41e651 <stack_is_valid+0x217>\n  41e62f:\t90                   \tnop\n  41e630:\teb 1f                \tjmp    41e651 <stack_is_valid+0x217>\n  41e632:\t90                   \tnop\n  41e633:\teb 1c                \tjmp    41e651 <stack_is_valid+0x217>\n  41e635:\t90                   \tnop\n  41e636:\teb 19                \tjmp    41e651 <stack_is_valid+0x217>\n  41e638:\t90                   \tnop\n  41e639:\teb 16                \tjmp    41e651 <stack_is_valid+0x217>\n  41e63b:\t90                   \tnop\n  41e63c:\teb 13                \tjmp    41e651 <stack_is_valid+0x217>\n  41e63e:\t90                   \tnop\n  41e63f:\teb 10                \tjmp    41e651 <stack_is_valid+0x217>\n  41e641:\t90                   \tnop\n  41e642:\teb 0d                \tjmp    41e651 <stack_is_valid+0x217>\n  41e644:\t90                   \tnop\n  41e645:\teb 0a                \tjmp    41e651 <stack_is_valid+0x217>\n  41e647:\t90                   \tnop\n  41e648:\teb 07                \tjmp    41e651 <stack_is_valid+0x217>\n  41e64a:\t90                   \tnop\n  41e64b:\teb 04                \tjmp    41e651 <stack_is_valid+0x217>\n  41e64d:\t90                   \tnop\n  41e64e:\teb 01                \tjmp    41e651 <stack_is_valid+0x217>\n  41e650:\t90                   \tnop\n  41e651:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  41e655:\t74 3d                \tje     41e694 <stack_is_valid+0x25a>\n  41e657:\t8b 05 03 07 04 00    \tmov    0x40703(%rip),%eax        # 45ed60 <GXD>\n  41e65d:\t85 c0                \ttest   %eax,%eax\n  41e65f:\t74 33                \tje     41e694 <stack_is_valid+0x25a>\n  41e661:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  41e664:\t48 98                \tcltq   \n  41e666:\t48 8b 0c c5 60 e9 45 \tmov    0x45e960(,%rax,8),%rcx\n  41e66d:\t00 \n  41e66e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  41e671:\t48 98                \tcltq   \n  41e673:\t48 8b 14 c5 60 e9 45 \tmov    0x45e960(,%rax,8),%rdx\n  41e67a:\t00 \n  41e67b:\t48 8b 05 1e 09 04 00 \tmov    0x4091e(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  41e682:\tbe 56 ce 44 00       \tmov    $0x44ce56,%esi\n  41e687:\t48 89 c7             \tmov    %rax,%rdi\n  41e68a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41e68f:\te8 ac 3c fe ff       \tcallq  402340 <fprintf@plt>\n  41e694:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  41e698:\t74 06                \tje     41e6a0 <stack_is_valid+0x266>\n  41e69a:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  41e69e:\t74 1c                \tje     41e6bc <stack_is_valid+0x282>\n  41e6a0:\t8b 05 ba 06 04 00    \tmov    0x406ba(%rip),%eax        # 45ed60 <GXD>\n  41e6a6:\t83 f8 01             \tcmp    $0x1,%eax\n  41e6a9:\t7e 11                \tjle    41e6bc <stack_is_valid+0x282>\n  41e6ab:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41e6af:\t48 89 c6             \tmov    %rax,%rsi\n  41e6b2:\tbf 6e ce 44 00       \tmov    $0x44ce6e,%edi\n  41e6b7:\te8 b7 fc ff ff       \tcallq  41e373 <show_stack>\n  41e6bc:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41e6bf:\tc9                   \tleaveq \n  41e6c0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall stack_is_valid(__int64 a1) {\n  __int64 result;\n  int v2;\n  int v3;\n  int v4;\n  unsigned int v5;\n  if (*(int *)(a1 + Number) < Number)\n    return Number L;\n  if (!*(_DWORD *)(a1 + Number))\n    return Number L;\n  v3 =\n      *(_DWORD *)(a1 + Number * (*(_DWORD *)(a1 + Number) - Number + Number L) +\n                  Number);\n  if (*(_DWORD *)(a1 + Number) == Number) {\n    if (v3 == Number) {\n      result = Number L;\n    } else {\n      show_stack(String, a1);\n      result = Number L;\n    }\n  } else {\n    v5 = Number;\n    v4 = Number;\n    v2 = *(_DWORD *)(a1 +\n                     Number * (*(_DWORD *)(a1 + Number) - Number + Number L) +\n                     Number);\n    switch (v3) {\n    case Number:\n      if (v2 != Number && v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number)\n        v4 = Number;\n      break;\n    case Number:\n      if (v2 != Number && v2 != Number && v2 != Number && v2 != Number &&\n          v2 != Number && v2 != Number)\n        v4 = Number;\n      break;\n    default:\n      v5 = Number;\n      break;\n    }\n    if (v4 && GXD)\n      fprintf(stderr, String, (&enames)[v3], (&enames)[v2]);\n    if ((!v5 || v4) && GXD > Number)\n      show_stack(String, a1);\n    result = v5;\n  }\n  return result;\n}", "code_t": "int __cdecl stack_is_valid(gxml_data *xd) {\n  int result;\n  int parent;\n  int etype;\n  int bad_parent;\n  int valid;\n  if (xd->depth < Number)\n    return Number;\n  if (!xd->depth)\n    return Number;\n  etype = *(&xd->depth + xd->depth);\n  if (xd->depth == Number) {\n    if (etype == Number) {\n      result = Number;\n    } else {\n      show_stack(String, xd);\n      result = Number;\n    }\n  } else {\n    valid = Number;\n    bad_parent = Number;\n    parent = *(&xd->skip + xd->depth);\n    switch (etype) {\n    case Number:\n      if (parent != Number && parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number)\n        bad_parent = Number;\n      break;\n    case Number:\n      if (parent != Number && parent != Number && parent != Number &&\n          parent != Number && parent != Number && parent != Number)\n        bad_parent = Number;\n      break;\n    default:\n      valid = Number;\n      break;\n    }\n    if (bad_parent && GXD.verb)\n      fprintf(stderr, String, enames[etype], enames[parent]);\n    if ((!valid || bad_parent) && GXD.verb > Number)\n      show_stack(String, xd);\n    result = valid;\n  }\n  return result;\n}", "var": [], "body_in_train": false}, {"repo_owner": "sslab-gatech", "repo_name": "perf-fuzz", "path": "sslab-gatech/perf-fuzz/218b582ca34765ede3319647e5549e0266e7d0879fc4058c1ad37234f2a7b15e", "path_in_repo": "sslab-gatech/perf-fuzz/afl/afl-gotcpu", "objdump": "0000000000401211 <get_cpu_usage_us>:\n  401211:\t55                   \tpush   %rbp\n  401212:\t48 89 e5             \tmov    %rsp,%rbp\n  401215:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n  40121c:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  401223:\t48 89 c6             \tmov    %rax,%rsi\n  401226:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40122b:\te8 70 fe ff ff       \tcallq  4010a0 <getrusage@plt>\n  401230:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n  401237:\t48 89 c2             \tmov    %rax,%rdx\n  40123a:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  40123e:\t48 01 d0             \tadd    %rdx,%rax\n  401241:\t48 69 c0 40 42 0f 00 \timul   $0xf4240,%rax,%rax\n  401248:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n  40124f:\t48 01 c2             \tadd    %rax,%rdx\n  401252:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  401256:\t48 01 d0             \tadd    %rdx,%rax\n  401259:\tc9                   \tleaveq \n  40125a:\tc3                   \tretq   ", "code_s": "__time_t get_cpu_usage_us() {\n  struct rusage <span class=\"supfact\">usage</span>;\n  getrusage(RUSAGE_SELF, &<span class=\"supfact\">usage</span>);\n  return Number * (<span class=\"supfact\">usage</span>.ru_utime.tv_sec +\n                   <span class=\"supfact\">usage</span>.ru_stime.tv_sec) +\n         <span class=\"supfact\">usage</span>.ru_utime.tv_usec +\n         <span class=\"supfact\">usage</span>.ru_stime.tv_usec;\n}", "code_t": "u64 __cdecl get_cpu_usage_us() {\n  rusage <span class=\"supfact\">u</span>;\n  getrusage(RUSAGE_SELF, &<span class=\"supfact\">u</span>);\n  return Number * (<span class=\"supfact\">u</span>.ru_utime.tv_sec +\n                   <span class=\"supfact\">u</span>.ru_stime.tv_sec) +\n         <span class=\"supfact\">u</span>.ru_utime.tv_usec +\n         <span class=\"supfact\">u</span>.ru_stime.tv_usec;\n}", "var": [{"name": "usage", "type": "struct rusage { timeval ru_utime; timeval ru_stime; $AFD12F2780B43E6FE38B6B9706ACAC3D _anon_0; $532CEF825D94AC2AB94F49F6475E130E _anon_1; $66A2DE23866A271B95BDDB0CFC621200 _anon_2; $D7B0DA7033B4A064E9B9FDDBD7C23927 _anon_3; $0724066DBCB20967A007E1922F93DD8D _anon_4; $E3ED6156413D9EFF7392FCF5D4C88B92 _anon_5; $CD16977EFB50B4747411BF78CDAEB1F3 _anon_6; $929FFA9E3E540B14A77DC71BC7A41B8C _anon_7; $FE38B77A86D08DEC2C74D6373E0C6416 _anon_8; $8CFCFFE5543F8A2FB5604D0E42418403 _anon_9; $3B84F6F9EECC4FA8F586A2BAC354D043 _anon_10; $229726AEB3C3CA3CA87656F9B9828FB0 _anon_11; $BFE386E9477C7E9875A5D4C107075383 _anon_12; $FA0D2E48EE8615A3C4A68D7252C48DF0 _anon_13; }", "pred_name": "ru", "ref_name": "u", "ref_type": "struct rusage { timeval ru_utime; timeval ru_stime; $AFD12F2780B43E6FE38B6B9706ACAC3D _anon_0; $532CEF825D94AC2AB94F49F6475E130E _anon_1; $66A2DE23866A271B95BDDB0CFC621200 _anon_2; $D7B0DA7033B4A064E9B9FDDBD7C23927 _anon_3; $0724066DBCB20967A007E1922F93DD8D _anon_4; $E3ED6156413D9EFF7392FCF5D4C88B92 _anon_5; $CD16977EFB50B4747411BF78CDAEB1F3 _anon_6; $929FFA9E3E540B14A77DC71BC7A41B8C _anon_7; $FE38B77A86D08DEC2C74D6373E0C6416 _anon_8; $8CFCFFE5543F8A2FB5604D0E42418403 _anon_9; $3B84F6F9EECC4FA8F586A2BAC354D043 _anon_10; $229726AEB3C3CA3CA87656F9B9828FB0 _anon_11; $BFE386E9477C7E9875A5D4C107075383 _anon_12; $FA0D2E48EE8615A3C4A68D7252C48DF0 _anon_13; }"}], "body_in_train": false}, {"repo_owner": "luotao717", "repo_name": "dytpro", "path": "luotao717/dytpro/43fbd89274b3f69669889887a5cb72945f6a742921ff3f7ca9650ed791103ca4", "path_in_repo": "luotao717/dytpro/ra5350/lktos_sdk/source/user/samba-3.0.2/source/param/loadparm.po", "objdump": "00000000000002ee <init_globals>:\n     2ee:\t55                   \tpush   %rbp\n     2ef:\t48 89 e5             \tmov    %rsp,%rbp\n     2f2:\t48 81 ec 10 04 00 00 \tsub    $0x410,%rsp\n     2f9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2ff <init_globals+0x11>\n     2ff:\t85 c0                \ttest   %eax,%eax\n     301:\t0f 85 12 01 00 00    \tjne    419 <init_globals+0x12b>\n     307:\tba 70 04 00 00       \tmov    $0x470,%edx\n     30c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     311:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 318 <init_globals+0x2a>\n     318:\te8 00 00 00 00       \tcallq  31d <init_globals+0x2f>\n     31d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     324:\te9 a8 00 00 00       \tjmpq   3d1 <init_globals+0xe3>\n     329:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     32c:\t48 63 d0             \tmovslq %eax,%rdx\n     32f:\t48 89 d0             \tmov    %rdx,%rax\n     332:\t48 c1 e0 03          \tshl    $0x3,%rax\n     336:\t48 29 d0             \tsub    %rdx,%rax\n     339:\t48 c1 e0 03          \tshl    $0x3,%rax\n     33d:\t48 89 c2             \tmov    %rax,%rdx\n     340:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 347 <init_globals+0x59>\n     347:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n     34a:\t83 f8 06             \tcmp    $0x6,%eax\n     34d:\t74 26                \tje     375 <init_globals+0x87>\n     34f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     352:\t48 63 d0             \tmovslq %eax,%rdx\n     355:\t48 89 d0             \tmov    %rdx,%rax\n     358:\t48 c1 e0 03          \tshl    $0x3,%rax\n     35c:\t48 29 d0             \tsub    %rdx,%rax\n     35f:\t48 c1 e0 03          \tshl    $0x3,%rax\n     363:\t48 89 c2             \tmov    %rax,%rdx\n     366:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 36d <init_globals+0x7f>\n     36d:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n     370:\t83 f8 07             \tcmp    $0x7,%eax\n     373:\t75 58                \tjne    3cd <init_globals+0xdf>\n     375:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     378:\t48 63 d0             \tmovslq %eax,%rdx\n     37b:\t48 89 d0             \tmov    %rdx,%rax\n     37e:\t48 c1 e0 03          \tshl    $0x3,%rax\n     382:\t48 29 d0             \tsub    %rdx,%rax\n     385:\t48 c1 e0 03          \tshl    $0x3,%rax\n     389:\t48 89 c2             \tmov    %rax,%rdx\n     38c:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 393 <init_globals+0xa5>\n     393:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n     397:\t48 85 c0             \ttest   %rax,%rax\n     39a:\t74 31                \tje     3cd <init_globals+0xdf>\n     39c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     39f:\t48 63 d0             \tmovslq %eax,%rdx\n     3a2:\t48 89 d0             \tmov    %rdx,%rax\n     3a5:\t48 c1 e0 03          \tshl    $0x3,%rax\n     3a9:\t48 29 d0             \tsub    %rdx,%rax\n     3ac:\t48 c1 e0 03          \tshl    $0x3,%rax\n     3b0:\t48 89 c2             \tmov    %rax,%rdx\n     3b3:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 3ba <init_globals+0xcc>\n     3ba:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n     3be:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 3c5 <init_globals+0xd7>\n     3c5:\t48 89 c7             \tmov    %rax,%rdi\n     3c8:\te8 00 00 00 00       \tcallq  3cd <init_globals+0xdf>\n     3cd:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     3d1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     3d4:\t48 63 d0             \tmovslq %eax,%rdx\n     3d7:\t48 89 d0             \tmov    %rdx,%rax\n     3da:\t48 c1 e0 03          \tshl    $0x3,%rax\n     3de:\t48 29 d0             \tsub    %rdx,%rax\n     3e1:\t48 c1 e0 03          \tshl    $0x3,%rax\n     3e5:\t48 89 c2             \tmov    %rax,%rdx\n     3e8:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 3ef <init_globals+0x101>\n     3ef:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n     3f3:\t48 85 c0             \ttest   %rax,%rax\n     3f6:\t0f 85 2d ff ff ff    \tjne    329 <init_globals+0x3b>\n     3fc:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 403 <init_globals+0x115>\n     403:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 40a <init_globals+0x11c>\n     40a:\te8 00 00 00 00       \tcallq  40f <init_globals+0x121>\n     40f:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 419 <init_globals+0x12b>\n     416:\t00 00 00 \n     419:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 420 <init_globals+0x132>\n     420:\t48 8b 00             \tmov    (%rax),%rax\n     423:\t8b 00                \tmov    (%rax),%eax\n     425:\t83 f8 02             \tcmp    $0x2,%eax\n     428:\t7f 21                \tjg     44b <init_globals+0x15d>\n     42a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 431 <init_globals+0x143>\n     431:\t48 8b 00             \tmov    (%rax),%rax\n     434:\t8b 00                \tmov    (%rax),%eax\n     436:\t85 c0                \ttest   %eax,%eax\n     438:\t75 46                \tjne    480 <init_globals+0x192>\n     43a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 441 <init_globals+0x153>\n     441:\t48 8b 00             \tmov    (%rax),%rax\n     444:\t8b 00                \tmov    (%rax),%eax\n     446:\t83 f8 02             \tcmp    $0x2,%eax\n     449:\t7e 35                \tjle    480 <init_globals+0x192>\n     44b:\tb9 1b 05 00 00       \tmov    $0x51b,%ecx\n     450:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 457 <init_globals+0x169>\n     457:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 45e <init_globals+0x170>\n     45e:\tbf 03 00 00 00       \tmov    $0x3,%edi\n     463:\te8 00 00 00 00       \tcallq  468 <init_globals+0x17a>\n     468:\t85 c0                \ttest   %eax,%eax\n     46a:\t74 14                \tje     480 <init_globals+0x192>\n     46c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 473 <init_globals+0x185>\n     473:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     478:\te8 00 00 00 00       \tcallq  47d <init_globals+0x18f>\n     47d:\t85 c0                \ttest   %eax,%eax\n     47f:\t90                   \tnop\n     480:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 487 <init_globals+0x199>\n     487:\t48 89 c6             \tmov    %rax,%rsi\n     48a:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 491 <init_globals+0x1a3>\n     491:\te8 00 00 00 00       \tcallq  496 <init_globals+0x1a8>\n     496:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 49d <init_globals+0x1af>\n     49d:\t48 89 c6             \tmov    %rax,%rsi\n     4a0:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4a7 <init_globals+0x1b9>\n     4a7:\te8 00 00 00 00       \tcallq  4ac <init_globals+0x1be>\n     4ac:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4b3 <init_globals+0x1c5>\n     4b3:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4ba <init_globals+0x1cc>\n     4ba:\te8 00 00 00 00       \tcallq  4bf <init_globals+0x1d1>\n     4bf:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 4c9 <init_globals+0x1db>\n     4c6:\t00 00 00 \n     4c9:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4d0 <init_globals+0x1e2>\n     4d0:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4d7 <init_globals+0x1e9>\n     4d7:\te8 00 00 00 00       \tcallq  4dc <init_globals+0x1ee>\n     4dc:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4e3 <init_globals+0x1f5>\n     4e3:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4ea <init_globals+0x1fc>\n     4ea:\te8 00 00 00 00       \tcallq  4ef <init_globals+0x201>\n     4ef:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4f6 <init_globals+0x208>\n     4f6:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4fd <init_globals+0x20f>\n     4fd:\te8 00 00 00 00       \tcallq  502 <init_globals+0x214>\n     502:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 509 <init_globals+0x21b>\n     509:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 510 <init_globals+0x222>\n     510:\te8 00 00 00 00       \tcallq  515 <init_globals+0x227>\n     515:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 51c <init_globals+0x22e>\n     51c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 523 <init_globals+0x235>\n     523:\te8 00 00 00 00       \tcallq  528 <init_globals+0x23a>\n     528:\te8 00 00 00 00       \tcallq  52d <init_globals+0x23f>\n     52d:\t48 89 c7             \tmov    %rax,%rdi\n     530:\te8 00 00 00 00       \tcallq  535 <init_globals+0x247>\n     535:\te8 00 00 00 00       \tcallq  53a <init_globals+0x24c>\n     53a:\t48 89 c6             \tmov    %rax,%rsi\n     53d:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 544 <init_globals+0x256>\n     544:\te8 00 00 00 00       \tcallq  549 <init_globals+0x25b>\n     549:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 550 <init_globals+0x262>\n     550:\te8 00 00 00 00       \tcallq  555 <init_globals+0x267>\n     555:\te8 00 00 00 00       \tcallq  55a <init_globals+0x26c>\n     55a:\t48 89 c6             \tmov    %rax,%rsi\n     55d:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 564 <init_globals+0x276>\n     564:\te8 00 00 00 00       \tcallq  569 <init_globals+0x27b>\n     569:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 570 <init_globals+0x282>\n     570:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 577 <init_globals+0x289>\n     577:\te8 00 00 00 00       \tcallq  57c <init_globals+0x28e>\n     57c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 583 <init_globals+0x295>\n     583:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 58a <init_globals+0x29c>\n     58a:\te8 00 00 00 00       \tcallq  58f <init_globals+0x2a1>\n     58f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 596 <init_globals+0x2a8>\n     596:\t48 89 c6             \tmov    %rax,%rsi\n     599:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5a0 <init_globals+0x2b2>\n     5a0:\te8 00 00 00 00       \tcallq  5a5 <init_globals+0x2b7>\n     5a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5ac <init_globals+0x2be>\n     5ac:\t48 89 c6             \tmov    %rax,%rsi\n     5af:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5b6 <init_globals+0x2c8>\n     5b6:\te8 00 00 00 00       \tcallq  5bb <init_globals+0x2cd>\n     5bb:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5c2 <init_globals+0x2d4>\n     5c2:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5c9 <init_globals+0x2db>\n     5c9:\te8 00 00 00 00       \tcallq  5ce <init_globals+0x2e0>\n     5ce:\t48 8d 85 f0 fb ff ff \tlea    -0x410(%rbp),%rax\n     5d5:\t41 b8 ff 03 00 00    \tmov    $0x3ff,%r8d\n     5db:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 5e2 <init_globals+0x2f4>\n     5e2:\t48 89 c2             \tmov    %rax,%rdx\n     5e5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     5ea:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5f1 <init_globals+0x303>\n     5f1:\te8 00 00 00 00       \tcallq  5f6 <init_globals+0x308>\n     5f6:\te8 00 00 00 00       \tcallq  5fb <init_globals+0x30d>\n     5fb:\t48 89 c2             \tmov    %rax,%rdx\n     5fe:\t48 8d 85 f0 fb ff ff \tlea    -0x410(%rbp),%rax\n     605:\t41 b8 ff 03 00 00    \tmov    $0x3ff,%r8d\n     60b:\t48 89 d1             \tmov    %rdx,%rcx\n     60e:\t48 89 c2             \tmov    %rax,%rdx\n     611:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     616:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 61d <init_globals+0x32f>\n     61d:\te8 00 00 00 00       \tcallq  622 <init_globals+0x334>\n     622:\t48 8d 85 f0 fb ff ff \tlea    -0x410(%rbp),%rax\n     629:\t48 89 c6             \tmov    %rax,%rsi\n     62c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 633 <init_globals+0x345>\n     633:\te8 00 00 00 00       \tcallq  638 <init_globals+0x34a>\n     638:\t48 8d 85 f0 fb ff ff \tlea    -0x410(%rbp),%rax\n     63f:\t41 b8 09 00 00 00    \tmov    $0x9,%r8d\n     645:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n     64a:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 651 <init_globals+0x363>\n     651:\tbe ff 03 00 00       \tmov    $0x3ff,%esi\n     656:\t48 89 c7             \tmov    %rax,%rdi\n     659:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     65e:\te8 00 00 00 00       \tcallq  663 <init_globals+0x375>\n     663:\t48 8d 85 f0 fb ff ff \tlea    -0x410(%rbp),%rax\n     66a:\t48 89 c6             \tmov    %rax,%rsi\n     66d:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 674 <init_globals+0x386>\n     674:\te8 00 00 00 00       \tcallq  679 <init_globals+0x38b>\n     679:\t41 b8 ff 03 00 00    \tmov    $0x3ff,%r8d\n     67f:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 686 <init_globals+0x398>\n     686:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 68d <init_globals+0x39f>\n     68d:\t48 89 c2             \tmov    %rax,%rdx\n     690:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     695:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 69c <init_globals+0x3ae>\n     69c:\te8 00 00 00 00       \tcallq  6a1 <init_globals+0x3b3>\n     6a1:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6a8 <init_globals+0x3ba>\n     6a8:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6af <init_globals+0x3c1>\n     6af:\te8 00 00 00 00       \tcallq  6b4 <init_globals+0x3c6>\n     6b4:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6bb <init_globals+0x3cd>\n     6bb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6c2 <init_globals+0x3d4>\n     6c2:\te8 00 00 00 00       \tcallq  6c7 <init_globals+0x3d9>\n     6c7:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6ce <init_globals+0x3e0>\n     6ce:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6d5 <init_globals+0x3e7>\n     6d5:\te8 00 00 00 00       \tcallq  6da <init_globals+0x3ec>\n     6da:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6e1 <init_globals+0x3f3>\n     6e1:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6e8 <init_globals+0x3fa>\n     6e8:\te8 00 00 00 00       \tcallq  6ed <init_globals+0x3ff>\n     6ed:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6f4 <init_globals+0x406>\n     6f4:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6fb <init_globals+0x40d>\n     6fb:\te8 00 00 00 00       \tcallq  700 <init_globals+0x412>\n     700:\tc7 05 00 00 00 00 e8 \tmovl   $0x3e8,0x0(%rip)        # 70a <init_globals+0x41c>\n     707:\t03 00 00 \n     70a:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 714 <init_globals+0x426>\n     711:\t00 00 00 \n     714:\tc7 05 00 00 00 00 04 \tmovl   $0x4104,0x0(%rip)        # 71e <init_globals+0x430>\n     71b:\t41 00 00 \n     71e:\tc7 05 00 00 00 00 32 \tmovl   $0x32,0x0(%rip)        # 728 <init_globals+0x43a>\n     725:\t00 00 00 \n     728:\tc7 05 00 00 00 00 0a \tmovl   $0xa,0x0(%rip)        # 732 <init_globals+0x444>\n     72f:\t00 00 00 \n     732:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 73c <init_globals+0x44e>\n     739:\t00 00 00 \n     73c:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 746 <init_globals+0x458>\n     743:\t00 00 00 \n     746:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 750 <init_globals+0x462>\n     74d:\t00 00 00 \n     750:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 75a <init_globals+0x46c>\n     757:\t00 00 00 \n     75a:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 764 <init_globals+0x476>\n     761:\t00 00 00 \n     764:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 76e <init_globals+0x480>\n     76b:\t00 00 00 \n     76e:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 778 <init_globals+0x48a>\n     775:\t00 00 00 \n     778:\tc7 05 00 00 00 00 88 \tmovl   $0x1388,0x0(%rip)        # 782 <init_globals+0x494>\n     77f:\t13 00 00 \n     782:\tc7 05 00 00 00 00 10 \tmovl   $0x2710,0x0(%rip)        # 78c <init_globals+0x49e>\n     789:\t27 00 00 \n     78c:\tc7 05 00 00 00 00 05 \tmovl   $0x5,0x0(%rip)        # 796 <init_globals+0x4a8>\n     793:\t00 00 00 \n     796:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 7a0 <init_globals+0x4b2>\n     79d:\t00 00 00 \n     7a0:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 7aa <init_globals+0x4bc>\n     7a7:\t00 00 00 \n     7aa:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 7b4 <init_globals+0x4c6>\n     7b1:\t00 00 00 \n     7b4:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 7be <init_globals+0x4d0>\n     7bb:\t00 00 00 \n     7be:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 7c8 <init_globals+0x4da>\n     7c5:\t00 00 00 \n     7c8:\tc7 05 00 00 00 00 02 \tmovl   $0x2,0x0(%rip)        # 7d2 <init_globals+0x4e4>\n     7cf:\t00 00 00 \n     7d2:\tc7 05 00 00 00 00 02 \tmovl   $0x2,0x0(%rip)        # 7dc <init_globals+0x4ee>\n     7d9:\t00 00 00 \n     7dc:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 7e6 <init_globals+0x4f8>\n     7e3:\t00 00 00 \n     7e6:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 7f0 <init_globals+0x502>\n     7ed:\t00 00 00 \n     7f0:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 7fa <init_globals+0x50c>\n     7f7:\t00 00 00 \n     7fa:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 804 <init_globals+0x516>\n     801:\t00 00 00 \n     804:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 80e <init_globals+0x520>\n     80b:\t00 00 00 \n     80e:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 818 <init_globals+0x52a>\n     815:\t00 00 00 \n     818:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 822 <init_globals+0x534>\n     81f:\t00 00 00 \n     822:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 82c <init_globals+0x53e>\n     829:\t00 00 00 \n     82c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 833 <init_globals+0x545>\n     833:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 83a <init_globals+0x54c>\n     83a:\te8 00 00 00 00       \tcallq  83f <init_globals+0x551>\n     83f:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 849 <init_globals+0x55b>\n     846:\t00 00 00 \n     849:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 853 <init_globals+0x565>\n     850:\t00 00 00 \n     853:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 85d <init_globals+0x56f>\n     85a:\t00 00 00 \n     85d:\tc7 05 00 00 00 00 80 \tmovl   $0x3f480,0x0(%rip)        # 867 <init_globals+0x579>\n     864:\tf4 03 00 \n     867:\tc7 05 00 00 00 00 00 \tmovl   $0x7e900,0x0(%rip)        # 871 <init_globals+0x583>\n     86e:\te9 07 00 \n     871:\tc7 05 00 00 00 00 60 \tmovl   $0x5460,0x0(%rip)        # 87b <init_globals+0x58d>\n     878:\t54 00 00 \n     87b:\tc7 05 00 00 00 00 80 \tmovl   $0x93a80,0x0(%rip)        # 885 <init_globals+0x597>\n     882:\t3a 09 00 \n     885:\tc7 05 00 00 00 00 3c \tmovl   $0x3c,0x0(%rip)        # 88f <init_globals+0x5a1>\n     88c:\t00 00 00 \n     88f:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 899 <init_globals+0x5ab>\n     896:\t00 00 00 \n     899:\tc7 05 00 00 00 00 02 \tmovl   $0x2,0x0(%rip)        # 8a3 <init_globals+0x5b5>\n     8a0:\t00 00 00 \n     8a3:\tc7 05 00 00 00 00 3c \tmovl   $0x3c,0x0(%rip)        # 8ad <init_globals+0x5bf>\n     8aa:\t00 00 00 \n     8ad:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 8b7 <init_globals+0x5c9>\n     8b4:\t00 00 00 \n     8b7:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 8c1 <init_globals+0x5d3>\n     8be:\t00 00 00 \n     8c1:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 8cb <init_globals+0x5dd>\n     8c8:\t00 00 00 \n     8cb:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 8d5 <init_globals+0x5e7>\n     8d2:\t00 00 00 \n     8d5:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 8df <init_globals+0x5f1>\n     8dc:\t00 00 00 \n     8df:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 8e9 <init_globals+0x5fb>\n     8e6:\t00 00 00 \n     8e9:\tc7 05 00 00 00 00 02 \tmovl   $0x2,0x0(%rip)        # 8f3 <init_globals+0x605>\n     8f0:\t00 00 00 \n     8f3:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 8fd <init_globals+0x60f>\n     8fa:\t00 00 00 \n     8fd:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 907 <init_globals+0x619>\n     904:\t00 00 00 \n     907:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 911 <init_globals+0x623>\n     90e:\t00 00 00 \n     911:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 91b <init_globals+0x62d>\n     918:\t00 00 00 \n     91b:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 925 <init_globals+0x637>\n     922:\t00 00 00 \n     925:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 92f <init_globals+0x641>\n     92c:\t00 00 00 \n     92f:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 939 <init_globals+0x64b>\n     936:\t00 00 00 \n     939:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 943 <init_globals+0x655>\n     940:\t00 00 00 \n     943:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 94d <init_globals+0x65f>\n     94a:\t00 00 00 \n     94d:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 957 <init_globals+0x669>\n     954:\t00 00 00 \n     957:\tc7 05 00 00 00 00 05 \tmovl   $0x5,0x0(%rip)        # 961 <init_globals+0x673>\n     95e:\t00 00 00 \n     961:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 96b <init_globals+0x67d>\n     968:\t00 00 00 \n     96b:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 975 <init_globals+0x687>\n     972:\t00 00 00 \n     975:\tc7 05 00 00 00 00 03 \tmovl   $0x3,0x0(%rip)        # 97f <init_globals+0x691>\n     97c:\t00 00 00 \n     97f:\tc7 05 00 00 00 00 0a \tmovl   $0xa,0x0(%rip)        # 989 <init_globals+0x69b>\n     986:\t00 00 00 \n     989:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 993 <init_globals+0x6a5>\n     990:\t00 00 00 \n     993:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 99d <init_globals+0x6af>\n     99a:\t00 00 00 \n     99d:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 9a7 <init_globals+0x6b9>\n     9a4:\t00 00 00 \n     9a7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     9ac:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 9b3 <init_globals+0x6c5>\n     9b3:\te8 00 00 00 00       \tcallq  9b8 <init_globals+0x6ca>\n     9b8:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 9bf <init_globals+0x6d1>\n     9bf:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 9c6 <init_globals+0x6d8>\n     9c6:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 9cd <init_globals+0x6df>\n     9cd:\te8 00 00 00 00       \tcallq  9d2 <init_globals+0x6e4>\n     9d2:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 9d9 <init_globals+0x6eb>\n     9d9:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 9e0 <init_globals+0x6f2>\n     9e0:\te8 00 00 00 00       \tcallq  9e5 <init_globals+0x6f7>\n     9e5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 9ec <init_globals+0x6fe>\n     9ec:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 9f3 <init_globals+0x705>\n     9f3:\te8 00 00 00 00       \tcallq  9f8 <init_globals+0x70a>\n     9f8:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 9ff <init_globals+0x711>\n     9ff:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # a06 <init_globals+0x718>\n     a06:\te8 00 00 00 00       \tcallq  a0b <init_globals+0x71d>\n     a0b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # a12 <init_globals+0x724>\n     a12:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # a19 <init_globals+0x72b>\n     a19:\te8 00 00 00 00       \tcallq  a1e <init_globals+0x730>\n     a1e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # a25 <init_globals+0x737>\n     a25:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # a2c <init_globals+0x73e>\n     a2c:\te8 00 00 00 00       \tcallq  a31 <init_globals+0x743>\n     a31:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # a38 <init_globals+0x74a>\n     a38:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # a3f <init_globals+0x751>\n     a3f:\te8 00 00 00 00       \tcallq  a44 <init_globals+0x756>\n     a44:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # a4e <init_globals+0x760>\n     a4b:\t00 00 00 \n     a4e:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # a58 <init_globals+0x76a>\n     a55:\t00 00 00 \n     a58:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # a62 <init_globals+0x774>\n     a5f:\t00 00 00 \n     a62:\tc7 05 00 00 00 00 e8 \tmovl   $0x3e8,0x0(%rip)        # a6c <init_globals+0x77e>\n     a69:\t03 00 00 \n     a6c:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # a76 <init_globals+0x788>\n     a73:\t00 00 00 \n     a76:\tc7 05 00 00 00 00 02 \tmovl   $0x2,0x0(%rip)        # a80 <init_globals+0x792>\n     a7d:\t00 00 00 \n     a80:\tc7 05 00 00 00 00 14 \tmovl   $0x14,0x0(%rip)        # a8a <init_globals+0x79c>\n     a87:\t00 00 00 \n     a8a:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # a94 <init_globals+0x7a6>\n     a91:\t00 00 00 \n     a94:\tc7 05 00 00 00 00 02 \tmovl   $0x2,0x0(%rip)        # a9e <init_globals+0x7b0>\n     a9b:\t00 00 00 \n     a9e:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # aa8 <init_globals+0x7ba>\n     aa5:\t00 00 00 \n     aa8:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # ab2 <init_globals+0x7c4>\n     aaf:\t00 00 00 \n     ab2:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # abc <init_globals+0x7ce>\n     ab9:\t00 00 00 \n     abc:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # ac6 <init_globals+0x7d8>\n     ac3:\t00 00 00 \n     ac6:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # ad0 <init_globals+0x7e2>\n     acd:\t00 00 00 \n     ad0:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # ada <init_globals+0x7ec>\n     ad7:\t00 00 00 \n     ada:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # ae4 <init_globals+0x7f6>\n     ae1:\t00 00 00 \n     ae4:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # aeb <init_globals+0x7fd>\n     aeb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # af2 <init_globals+0x804>\n     af2:\te8 00 00 00 00       \tcallq  af7 <init_globals+0x809>\n     af7:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # afe <init_globals+0x810>\n     afe:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # b05 <init_globals+0x817>\n     b05:\te8 00 00 00 00       \tcallq  b0a <init_globals+0x81c>\n     b0a:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # b11 <init_globals+0x823>\n     b11:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # b18 <init_globals+0x82a>\n     b18:\te8 00 00 00 00       \tcallq  b1d <init_globals+0x82f>\n     b1d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # b24 <init_globals+0x836>\n     b24:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # b2b <init_globals+0x83d>\n     b2b:\te8 00 00 00 00       \tcallq  b30 <init_globals+0x842>\n     b30:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # b37 <init_globals+0x849>\n     b37:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # b3e <init_globals+0x850>\n     b3e:\te8 00 00 00 00       \tcallq  b43 <init_globals+0x855>\n     b43:\tc7 05 00 00 00 00 2c \tmovl   $0x12c,0x0(%rip)        # b4d <init_globals+0x85f>\n     b4a:\t01 00 00 \n     b4d:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # b57 <init_globals+0x869>\n     b54:\t00 00 00 \n     b57:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # b61 <init_globals+0x873>\n     b5e:\t00 00 00 \n     b61:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # b6b <init_globals+0x87d>\n     b68:\t00 00 00 \n     b6b:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # b75 <init_globals+0x887>\n     b72:\t00 00 00 \n     b75:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # b7f <init_globals+0x891>\n     b7c:\t00 00 00 \n     b7f:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # b89 <init_globals+0x89b>\n     b86:\t00 00 00 \n     b89:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # b93 <init_globals+0x8a5>\n     b90:\t00 00 00 \n     b93:\tc7 05 00 00 00 00 94 \tmovl   $0x294,0x0(%rip)        # b9d <init_globals+0x8af>\n     b9a:\t02 00 00 \n     b9d:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # ba7 <init_globals+0x8b9>\n     ba4:\t00 00 00 \n     ba7:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # bb1 <init_globals+0x8c3>\n     bae:\t00 00 00 \n     bb1:\tc7 05 00 00 00 00 02 \tmovl   $0x2,0x0(%rip)        # bbb <init_globals+0x8cd>\n     bb8:\t00 00 00 \n     bbb:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # bc5 <init_globals+0x8d7>\n     bc2:\t00 00 00 \n     bc5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # bcc <init_globals+0x8de>\n     bcc:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # bd3 <init_globals+0x8e5>\n     bd3:\te8 00 00 00 00       \tcallq  bd8 <init_globals+0x8ea>\n     bd8:\t90                   \tnop\n     bd9:\tc9                   \tleaveq \n     bda:\tc3                   \tretq   ", "code_s": "__int64 init_globals() {\n  _QWORD *v0;\n  _QWORD *v1;\n  __int64 v2;\n  const char *v3;\n  const char *v4;\n  __int64 v5;\n  __int64 v6;\n  char v8[Number];\n  int i;\n  if (!done_init_32171) {\n    memset(&Globals, Number, Number);\n    for (i = Number; (&parm_table)[Number * i]; ++i) {\n      if ((*((_DWORD *)&unk_E148 + Number * i) == Number ||\n           *((_DWORD *)&unk_E148 + Number * i) == Number) &&\n          *((_QWORD *)&unk_E150 + Number * i)) {\n        string_set(*((_QWORD *)&unk_E150 + Number * i),\n                   (const char *)&unk_CE9C);\n      }\n    }\n    string_set(&qword_B070, String);\n    done_init_32171 = Number;\n  }\n  if ((int)*DEBUGLEVEL_CLASS > Number ||\n      !*DEBUGLEVEL_CLASS_ISSET && (int)*DEBUGLEVEL_CLASS > Number) {\n    if ((unsigned int)dbghdr(Number L, String, String, Number L))\n      dbgtext(String);\n  }\n  string_set(&qword_B2C0, (const char *)&dyn_SMB_PASSWD_FILE);\n  string_set(&qword_B2C8, (const char *)&dyn_PRIVATE_DIR);\n  string_set(&qword_B490, String);\n  dword_B498 = Number;\n  string_set(&qword_B488, String);\n  string_set(&qword_B210, String);\n  string_set(&qword_B218, String);\n  string_set(&qword_B208, String);\n  string_set(&qword_B2A8, String, v0, v1);\n  v2 = myhostname();\n  set_global_myname(v2);\n  v3 = (const char *)global_myname();\n  string_set(&unk_B368, v3);\n  set_global_myworkgroup(String);\n  v4 = (const char *)lp_workgroup();\n  string_set(&unk_B360, v4);\n  string_set(&qword_B2A0, (const char *)&unk_CE9C);\n  string_set(&qword_B220, String);\n  string_set(&qword_B250, (const char *)&dyn_PIDDIR);\n  string_set(&qword_B248, (const char *)&dyn_LOCKDIR);\n  string_set(&qword_B348, String);\n  safe_strcpy_fn(&unk_CE9C, Number L, v8, String, Number L);\n  v5 = samba_version_string();\n  safe_strcat_fn(&unk_CE9C, Number L, v8, v5, Number L);\n  string_set(&qword_B290, v8);\n  smb_snprintf(v8, Number L, String, Number L, Number L);\n  string_set(&qword_B358, v8);\n  safe_strcpy_fn(&unk_CE9C, Number L, &user_socket_options, String, Number L);\n  string_set(&qword_B318, (const char *)&unk_CE9C);\n  string_set(&qword_B320, String);\n  string_set(&qword_B310, String);\n  string_set(&qword_B388, String);\n  string_set(&qword_B2E0, String);\n  dword_B424 = Number;\n  dword_B5C4 = Number;\n  dword_B4A8 = Number;\n  dword_B4AC = Number;\n  dword_B4E0 = Number;\n  dword_B4E8 = Number;\n  dword_B4E4 = Number;\n  dword_B4EC = Number;\n  dword_B4B4 = Number;\n  dword_B4B8 = Number;\n  dword_B4BC = Number;\n  dword_B5C8 = Number;\n  dword_B49C = Number;\n  dword_B4B0 = Number;\n  dword_B4C0 = Number;\n  dword_B4C4 = Number;\n  dword_B4C8 = Number;\n  dword_B4D8 = Number;\n  dword_B5AC = Number;\n  dword_B5B0 = Number;\n  dword_B5B4 = Number;\n  dword_B5B8 = Number;\n  dword_B5CC = Number;\n  dword_B5D0 = Number;\n  dword_B5D4 = Number;\n  dword_B5BC = Number;\n  dword_B5C0 = Number;\n  dword_B4F0 = Number;\n  dword_B5D8 = Number;\n  dword_B5FC = Number;\n  string_set(&unk_B4A0, String);\n  dword_B634 = Number;\n  dword_B638 = Number;\n  dword_B63C = Number;\n  dword_B4FC = Number;\n  dword_B500 = Number;\n  dword_B504 = Number;\n  dword_B514 = Number;\n  dword_B518 = Number;\n  dword_B654 = Number;\n  dword_B508 = Number;\n  dword_B50C = Number;\n  dword_B510 = Number;\n  dword_B5E4 = Number;\n  dword_B5E8 = Number;\n  dword_B5F0 = Number;\n  dword_B5EC = Number;\n  dword_B5F4 = Number;\n  dword_B5F8 = Number;\n  dword_B604 = Number;\n  dword_B608 = Number;\n  dword_B60C = Number;\n  dword_B658 = Number;\n  dword_B624 = Number;\n  dword_B62C = Number;\n  dword_B618 = Number;\n  dword_B61C = Number;\n  dword_B628 = Number;\n  dword_B51C = Number;\n  dword_B520 = Number;\n  dword_B524 = Number;\n  dword_B4F8 = Number;\n  dword_B52C = Number;\n  dword_B530 = Number;\n  dword_B644 = Number;\n  dword_B64C = Number;\n  dword_B648 = Number;\n  qword_B2D0 = str_list_make(String, Number L);\n  string_set(&qword_B560, (const char *)&unk_CE9C);\n  string_set(&qword_B568, String, v6);\n  string_set(&qword_B538, (const char *)&unk_CE9C);\n  string_set(&qword_B540, (const char *)&unk_CE9C);\n  string_set(&qword_B550, (const char *)&unk_CE9C);\n  string_set(&qword_B548, (const char *)&unk_CE9C);\n  string_set(&qword_B570, (const char *)&unk_CE9C);\n  dword_B558 = Number;\n  dword_B580 = Number;\n  dword_B588 = Number;\n  dword_B584 = Number;\n  dword_B58C = Number;\n  dword_B5A0 = Number;\n  dword_B4F4 = Number;\n  dword_B59C = Number;\n  dword_B5A4 = Number;\n  dword_B5A8 = Number;\n  dword_B5DC = Number;\n  dword_B594 = Number;\n  dword_B598 = Number;\n  dword_B590 = Number;\n  dword_B610 = Number;\n  dword_B614 = Number;\n  string_set(&qword_B438, String);\n  string_set(&qword_B430, String);\n  string_set(&qword_B428, String);\n  string_set(&qword_B440, String);\n  string_set(&qword_B578, (const char *)&unk_CE9C);\n  dword_B528 = Number;\n  dword_B448 = Number;\n  dword_B44C = Number;\n  dword_B450 = Number;\n  dword_B454 = Number;\n  dword_B458 = Number;\n  dword_B45C = Number;\n  dword_B420 = Number;\n  dword_B65C = Number;\n  dword_B620 = Number;\n  dword_B630 = Number;\n  dword_B660 = Number;\n  dword_B664 = Number;\n  return string_set(&Globals, String);\n}", "code_t": "void __cdecl init_globals() {\n  _QWORD *v0;\n  _QWORD *v1;\n  __int64 v2;\n  const char *v3;\n  const char *v4;\n  __int64 v5;\n  __int64 v6;\n  pstring s;\n  int i;\n  if (!done_init_32171) {\n    memset(&Globals, Number, sizeof(Globals));\n    for (i = Number; parm_table[i].label; ++i) {\n      if ((parm_table[i].type == P_STRING || parm_table[i].type == P_USTRING) &&\n          parm_table[i].ptr)\n        string_set(parm_table[i].ptr, (const char *)&unk_CE9C);\n    }\n    string_set(&sDefault.fstype, String);\n    done_init_32171 = Number;\n  }\n  if ((int)*DEBUGLEVEL_CLASS > Number ||\n      !*DEBUGLEVEL_CLASS_ISSET && (int)*DEBUGLEVEL_CLASS > Number) {\n    if ((unsigned int)dbghdr(Number L, String, String, Number L))\n      dbgtext(String);\n  }\n  string_set(&Globals.szSMBPasswdFile, (const char *)&dyn_SMB_PASSWD_FILE);\n  string_set(&Globals.szPrivateDir, (const char *)&dyn_PRIVATE_DIR);\n  string_set(&Globals.szManglingMethod, String);\n  Globals.mangle_prefix = Number;\n  string_set(&Globals.szGuestaccount, String);\n  string_set(&Globals.unix_charset, String);\n  string_set(&Globals.display_charset, String);\n  string_set(&Globals.dos_charset, String);\n  string_set(&Globals.szPasswdChat, String, v0, v1);\n  v2 = myhostname();\n  set_global_myname(v2);\n  v3 = (const char *)global_myname();\n  string_set(&Globals.szNetbiosName, v3);\n  set_global_myworkgroup(String);\n  v4 = (const char *)lp_workgroup();\n  string_set(&Globals.szWorkgroup, v4);\n  string_set(&Globals.szPasswdProgram, (const char *)&unk_CE9C);\n  string_set(&Globals.szPrintcapname, String);\n  string_set(&Globals.szPidDir, (const char *)&dyn_PIDDIR);\n  string_set(&Globals.szLockDir, (const char *)&dyn_LOCKDIR);\n  string_set(&Globals.szSocketAddress, String);\n  safe_strcpy_fn(&unk_CE9C, Number L, s, String, Number L);\n  v5 = samba_version_string();\n  safe_strcat_fn(&unk_CE9C, Number L, s, v5, Number L);\n  string_set(&Globals.szServerString, s);\n  smb_snprintf(s, Number L, String, Number L, Number L);\n  string_set(&Globals.szAnnounceVersion, s);\n  safe_strcpy_fn(&unk_CE9C, Number L, &user_socket_options, String, Number L);\n  string_set(&Globals.szLogonDrive, (const char *)&unk_CE9C);\n  string_set(&Globals.szLogonHome, String);\n  string_set(&Globals.szLogonPath, String);\n  string_set(&Globals.szNameResolveOrder, String);\n  string_set(&Globals.szPasswordServer, String);\n  Globals.AlgorithmicRidBase = Number;\n  Globals.bLoadPrinters = Number;\n  Globals.max_xmit = Number;\n  Globals.max_mux = Number;\n  Globals.lpqcachetime = Number;\n  Globals.bDisableSpoolss = Number;\n  Globals.iMaxSmbdProcesses = Number;\n  Globals.iTotalPrintJobs = Number;\n  Globals.pwordlevel = Number;\n  Globals.unamelevel = Number;\n  Globals.deadtime = Number;\n  Globals.bLargeReadwrite = Number;\n  Globals.max_log_size = Number;\n  Globals.max_open_files = Number;\n  Globals.maxprotocol = Number;\n  Globals.minprotocol = Number;\n  Globals.security = Number;\n  Globals.paranoid_server_security = Number;\n  Globals.bEncryptPasswords = Number;\n  Globals.bUpdateEncrypt = Number;\n  Globals.clientSchannel = Number;\n  Globals.serverSchannel = Number;\n  Globals.bReadRaw = Number;\n  Globals.bWriteRaw = Number;\n  Globals.bReadbmpx = Number;\n  Globals.bNullPasswords = Number;\n  Globals.bObeyPamRestrictions = Number;\n  Globals.syslog = Number;\n  Globals.bSyslogOnly = Number;\n  Globals.bTimestampLogs = Number;\n  string_set(&Globals.szLogLevel, String);\n  Globals.bDebugHiresTimestamp = Number;\n  Globals.bDebugPid = Number;\n  Globals.bDebugUid = Number;\n  Globals.max_ttl = Number;\n  Globals.max_wins_ttl = Number;\n  Globals.min_wins_ttl = Number;\n  Globals.machine_password_timeout = Number;\n  Globals.change_notify_timeout = Number;\n  Globals.bKernelChangeNotify = Number;\n  Globals.lm_announce = Number;\n  Globals.lm_interval = Number;\n  Globals.announce_as = Number;\n  Globals.bTimeServer = Number;\n  Globals.bBindInterfacesOnly = Number;\n  Globals.bUnixPasswdSync = Number;\n  Globals.bPamPasswordChange = Number;\n  Globals.bPasswdChatDebug = Number;\n  Globals.iPasswdChatTimeout = Number;\n  Globals.bNTPipeSupport = Number;\n  Globals.bNTStatusSupport = Number;\n  Globals.bStatCache = Number;\n  Globals.restrict_anonymous = Number;\n  Globals.bClientLanManAuth = Number;\n  Globals.bClientPlaintextAuth = Number;\n  Globals.bLanmanAuth = Number;\n  Globals.bNTLMAuth = Number;\n  Globals.bClientNTLMv2Auth = Number;\n  Globals.map_to_guest = Number;\n  Globals.min_passwd_length = Number;\n  Globals.oplock_break_wait_time = Number;\n  Globals.enhanced_browsing = Number;\n  Globals.iLockSpinCount = Number;\n  Globals.iLockSpinTime = Number;\n  Globals.bUseMmap = Number;\n  Globals.bUnixExtensions = Number;\n  Globals.bHostnameLookups = Number;\n  Globals.szPassdbBackend = (char **)str_list_make(String, Number L);\n  string_set(&Globals.szLdapSuffix, (const char *)&unk_CE9C);\n  string_set(&Globals.szLdapFilter, String, v6);\n  string_set(&Globals.szLdapMachineSuffix, (const char *)&unk_CE9C);\n  string_set(&Globals.szLdapUserSuffix, (const char *)&unk_CE9C);\n  string_set(&Globals.szLdapGroupSuffix, (const char *)&unk_CE9C);\n  string_set(&Globals.szLdapIdmapSuffix, (const char *)&unk_CE9C);\n  string_set(&Globals.szLdapAdminDn, (const char *)&unk_CE9C);\n  Globals.ldap_ssl = Number;\n  Globals.ldap_passwd_sync = Number;\n  Globals.ldap_delete_dn = Number;\n  Globals.ldap_replication_sleep = Number;\n  Globals.bMsAddPrinterWizard = Number;\n  Globals.bPreferredMaster = Number;\n  Globals.os_level = Number;\n  Globals.bLocalMaster = Number;\n  Globals.bDomainMaster = Number;\n  Globals.bDomainLogons = Number;\n  Globals.bBrowseList = Number;\n  Globals.bWINSsupport = Number;\n  Globals.bWINSproxy = Number;\n  Globals.bDNSproxy = Number;\n  Globals.bKernelOplocks = Number;\n  Globals.bAllowTrustedDomains = Number;\n  string_set(&Globals.szTemplateShell, String);\n  string_set(&Globals.szTemplateHomedir, String);\n  string_set(&Globals.szTemplatePrimaryGroup, String);\n  string_set(&Globals.szWinbindSeparator, String);\n  string_set(&Globals.szAclCompat, (const char *)&unk_CE9C);\n  Globals.winbind_cache_time = Number;\n  Globals.bWinbindEnableLocalAccounts = Number;\n  Globals.bWinbindEnumUsers = Number;\n  Globals.bWinbindEnumGroups = Number;\n  Globals.bWinbindUseDefaultDomain = Number;\n  Globals.bWinbindTrustedDomainsOnly = Number;\n  Globals.bWinbindNestedGroups = Number;\n  Globals.bEnableRidAlgorithm = Number;\n  Globals.name_cache_timeout = Number;\n  Globals.bUseSpnego = Number;\n  Globals.bClientUseSpnego = Number;\n  Globals.client_signing = Number;\n  Globals.server_signing = Number;\n  string_set(&Globals, String);\n}", "var": [], "body_in_train": false}, {"repo_owner": "TheSphereIO", "repo_name": "kamailio-src", "path": "TheSphereIO/kamailio-src/cc67f5f1167a66bbecf8b0330c9e689e56ab2f8152e0bcd1883ddbc395212f18", "path_in_repo": "TheSphereIO/kamailio-src/src/core/select_buf.o", "objdump": "0000000000000000 <int2str_base_0pad>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t41 57                \tpush   %r15\n       6:\t41 56                \tpush   %r14\n       8:\t41 55                \tpush   %r13\n       a:\t41 54                \tpush   %r12\n       c:\t53                   \tpush   %rbx\n       d:\t48 83 ec 48          \tsub    $0x48,%rsp\n      11:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n      14:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n      18:\t89 55 a8             \tmov    %edx,-0x58(%rbp)\n      1b:\t89 4d 9c             \tmov    %ecx,-0x64(%rbp)\n      1e:\t83 7d a8 01          \tcmpl   $0x1,-0x58(%rbp)\n      22:\t0f 8f 79 02 00 00    \tjg     2a1 <int2str_base_0pad+0x2a1>\n      28:\tbe 04 00 00 00       \tmov    $0x4,%esi\n      2d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n      32:\te8 00 00 00 00       \tcallq  37 <int2str_base_0pad+0x37>\n      37:\t83 f8 fc             \tcmp    $0xfffffffc,%eax\n      3a:\t0f 8c 57 02 00 00    \tjl     297 <int2str_base_0pad+0x297>\n      40:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 46 <int2str_base_0pad+0x46>\n      46:\t85 c0                \ttest   %eax,%eax\n      48:\t0f 85 49 02 00 00    \tjne    297 <int2str_base_0pad+0x297>\n      4e:\tc7 45 bc fc ff ff ff \tmovl   $0xfffffffc,-0x44(%rbp)\n      55:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 5b <int2str_base_0pad+0x5b>\n      5b:\t83 c0 01             \tadd    $0x1,%eax\n      5e:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 64 <int2str_base_0pad+0x64>\n      64:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6a <int2str_base_0pad+0x6a>\n      6a:\t85 c0                \ttest   %eax,%eax\n      6c:\t0f 95 c0             \tsetne  %al\n      6f:\t0f b6 c0             \tmovzbl %al,%eax\n      72:\t48 85 c0             \ttest   %rax,%rax\n      75:\t0f 84 0f 01 00 00    \tje     18a <int2str_base_0pad+0x18a>\n      7b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 81 <int2str_base_0pad+0x81>\n      81:\t85 c0                \ttest   %eax,%eax\n      83:\t0f 95 c0             \tsetne  %al\n      86:\t0f b6 c0             \tmovzbl %al,%eax\n      89:\t48 85 c0             \ttest   %rax,%rax\n      8c:\t74 0a                \tje     98 <int2str_base_0pad+0x98>\n      8e:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n      91:\t89 c7                \tmov    %eax,%edi\n      93:\te8 00 00 00 00       \tcallq  98 <int2str_base_0pad+0x98>\n      98:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9f <int2str_base_0pad+0x9f>\n      9f:\t48 85 c0             \ttest   %rax,%rax\n      a2:\t0f 95 c0             \tsetne  %al\n      a5:\t0f b6 c0             \tmovzbl %al,%eax\n      a8:\t48 85 c0             \ttest   %rax,%rax\n      ab:\t74 6b                \tje     118 <int2str_base_0pad+0x118>\n      ad:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b4 <int2str_base_0pad+0xb4>\n      b4:\t48 8b 18             \tmov    (%rax),%rbx\n      b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # be <int2str_base_0pad+0xbe>\n      be:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n      c2:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n      c5:\t83 c0 05             \tadd    $0x5,%eax\n      c8:\t48 98                \tcltq   \n      ca:\t48 c1 e0 04          \tshl    $0x4,%rax\n      ce:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n      d4:\t4c 8b 20             \tmov    (%rax),%r12\n      d7:\te8 00 00 00 00       \tcallq  dc <int2str_base_0pad+0xdc>\n      dc:\t89 c1                \tmov    %eax,%ecx\n      de:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # e4 <int2str_base_0pad+0xe4>\n      e4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # eb <int2str_base_0pad+0xeb>\n      eb:\t48 83 ec 08          \tsub    $0x8,%rsp\n      ef:\t68 00 00 00 00       \tpushq  $0x0\n      f4:\t68 00 00 00 00       \tpushq  $0x0\n      f9:\t53                   \tpush   %rbx\n      fa:\t45 89 e9             \tmov    %r13d,%r9d\n      fd:\t4d 89 e0             \tmov    %r12,%r8\n     100:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     105:\t48 89 c7             \tmov    %rax,%rdi\n     108:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     10d:\te8 00 00 00 00       \tcallq  112 <int2str_base_0pad+0x112>\n     112:\t48 83 c4 20          \tadd    $0x20,%rsp\n     116:\teb 51                \tjmp    169 <int2str_base_0pad+0x169>\n     118:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     11b:\t83 c0 05             \tadd    $0x5,%eax\n     11e:\t48 98                \tcltq   \n     120:\t48 c1 e0 04          \tshl    $0x4,%rax\n     124:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     12a:\t48 8b 18             \tmov    (%rax),%rbx\n     12d:\te8 00 00 00 00       \tcallq  132 <int2str_base_0pad+0x132>\n     132:\t89 c1                \tmov    %eax,%ecx\n     134:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 13a <int2str_base_0pad+0x13a>\n     13a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 141 <int2str_base_0pad+0x141>\n     141:\t48 83 ec 08          \tsub    $0x8,%rsp\n     145:\t68 00 00 00 00       \tpushq  $0x0\n     14a:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n     150:\t49 89 d8             \tmov    %rbx,%r8\n     153:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     158:\t48 89 c7             \tmov    %rax,%rdi\n     15b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     160:\te8 00 00 00 00       \tcallq  165 <int2str_base_0pad+0x165>\n     165:\t48 83 c4 10          \tadd    $0x10,%rsp\n     169:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 16f <int2str_base_0pad+0x16f>\n     16f:\t85 c0                \ttest   %eax,%eax\n     171:\t0f 95 c0             \tsetne  %al\n     174:\t0f b6 c0             \tmovzbl %al,%eax\n     177:\t48 85 c0             \ttest   %rax,%rax\n     17a:\t0f 84 08 01 00 00    \tje     288 <int2str_base_0pad+0x288>\n     180:\te8 00 00 00 00       \tcallq  185 <int2str_base_0pad+0x185>\n     185:\te9 fe 00 00 00       \tjmpq   288 <int2str_base_0pad+0x288>\n     18a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 191 <int2str_base_0pad+0x191>\n     191:\t48 85 c0             \ttest   %rax,%rax\n     194:\t0f 95 c0             \tsetne  %al\n     197:\t0f b6 c0             \tmovzbl %al,%eax\n     19a:\t48 85 c0             \ttest   %rax,%rax\n     19d:\t0f 84 85 00 00 00    \tje     228 <int2str_base_0pad+0x228>\n     1a3:\t4c 8b 2d 00 00 00 00 \tmov    0x0(%rip),%r13        # 1aa <int2str_base_0pad+0x1aa>\n     1aa:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1b1 <int2str_base_0pad+0x1b1>\n     1b1:\t4c 8b 38             \tmov    (%rax),%r15\n     1b4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1bb <int2str_base_0pad+0x1bb>\n     1bb:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n     1bf:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     1c2:\t83 c0 05             \tadd    $0x5,%eax\n     1c5:\t48 98                \tcltq   \n     1c7:\t48 c1 e0 04          \tshl    $0x4,%rax\n     1cb:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     1d1:\t48 8b 18             \tmov    (%rax),%rbx\n     1d4:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     1d7:\t83 c0 05             \tadd    $0x5,%eax\n     1da:\t48 98                \tcltq   \n     1dc:\t48 c1 e0 04          \tshl    $0x4,%rax\n     1e0:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     1e6:\t44 8b 30             \tmov    (%rax),%r14d\n     1e9:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     1ee:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     1f3:\te8 00 00 00 00       \tcallq  1f8 <int2str_base_0pad+0x1f8>\n     1f8:\t44 09 f0             \tor     %r14d,%eax\n     1fb:\t48 83 ec 08          \tsub    $0x8,%rsp\n     1ff:\t68 00 00 00 00       \tpushq  $0x0\n     204:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n     20a:\t4d 89 f8             \tmov    %r15,%r8\n     20d:\t44 89 e1             \tmov    %r12d,%ecx\n     210:\t48 89 da             \tmov    %rbx,%rdx\n     213:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     218:\t89 c7                \tmov    %eax,%edi\n     21a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     21f:\t41 ff d5             \tcallq  *%r13\n     222:\t48 83 c4 10          \tadd    $0x10,%rsp\n     226:\teb 60                \tjmp    288 <int2str_base_0pad+0x288>\n     228:\t4c 8b 25 00 00 00 00 \tmov    0x0(%rip),%r12        # 22f <int2str_base_0pad+0x22f>\n     22f:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     232:\t83 c0 05             \tadd    $0x5,%eax\n     235:\t48 98                \tcltq   \n     237:\t48 c1 e0 04          \tshl    $0x4,%rax\n     23b:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     241:\t48 8b 18             \tmov    (%rax),%rbx\n     244:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     247:\t83 c0 05             \tadd    $0x5,%eax\n     24a:\t48 98                \tcltq   \n     24c:\t48 c1 e0 04          \tshl    $0x4,%rax\n     250:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     256:\t44 8b 28             \tmov    (%rax),%r13d\n     259:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     25e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     263:\te8 00 00 00 00       \tcallq  268 <int2str_base_0pad+0x268>\n     268:\t44 09 e8             \tor     %r13d,%eax\n     26b:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     271:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     276:\t48 89 da             \tmov    %rbx,%rdx\n     279:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     27e:\t89 c7                \tmov    %eax,%edi\n     280:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     285:\t41 ff d4             \tcallq  *%r12\n     288:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 28e <int2str_base_0pad+0x28e>\n     28e:\t83 e8 01             \tsub    $0x1,%eax\n     291:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 297 <int2str_base_0pad+0x297>\n     297:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     29c:\te9 d4 05 00 00       \tjmpq   875 <int2str_base_0pad+0x875>\n     2a1:\t83 7d a8 24          \tcmpl   $0x24,-0x58(%rbp)\n     2a5:\t0f 8e 79 02 00 00    \tjle    524 <int2str_base_0pad+0x524>\n     2ab:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     2b0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     2b5:\te8 00 00 00 00       \tcallq  2ba <int2str_base_0pad+0x2ba>\n     2ba:\t83 f8 fc             \tcmp    $0xfffffffc,%eax\n     2bd:\t0f 8c 57 02 00 00    \tjl     51a <int2str_base_0pad+0x51a>\n     2c3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2c9 <int2str_base_0pad+0x2c9>\n     2c9:\t85 c0                \ttest   %eax,%eax\n     2cb:\t0f 85 49 02 00 00    \tjne    51a <int2str_base_0pad+0x51a>\n     2d1:\tc7 45 c0 fc ff ff ff \tmovl   $0xfffffffc,-0x40(%rbp)\n     2d8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2de <int2str_base_0pad+0x2de>\n     2de:\t83 c0 01             \tadd    $0x1,%eax\n     2e1:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 2e7 <int2str_base_0pad+0x2e7>\n     2e7:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2ed <int2str_base_0pad+0x2ed>\n     2ed:\t85 c0                \ttest   %eax,%eax\n     2ef:\t0f 95 c0             \tsetne  %al\n     2f2:\t0f b6 c0             \tmovzbl %al,%eax\n     2f5:\t48 85 c0             \ttest   %rax,%rax\n     2f8:\t0f 84 0f 01 00 00    \tje     40d <int2str_base_0pad+0x40d>\n     2fe:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 304 <int2str_base_0pad+0x304>\n     304:\t85 c0                \ttest   %eax,%eax\n     306:\t0f 95 c0             \tsetne  %al\n     309:\t0f b6 c0             \tmovzbl %al,%eax\n     30c:\t48 85 c0             \ttest   %rax,%rax\n     30f:\t74 0a                \tje     31b <int2str_base_0pad+0x31b>\n     311:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     314:\t89 c7                \tmov    %eax,%edi\n     316:\te8 00 00 00 00       \tcallq  31b <int2str_base_0pad+0x31b>\n     31b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 322 <int2str_base_0pad+0x322>\n     322:\t48 85 c0             \ttest   %rax,%rax\n     325:\t0f 95 c0             \tsetne  %al\n     328:\t0f b6 c0             \tmovzbl %al,%eax\n     32b:\t48 85 c0             \ttest   %rax,%rax\n     32e:\t74 6b                \tje     39b <int2str_base_0pad+0x39b>\n     330:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 337 <int2str_base_0pad+0x337>\n     337:\t48 8b 18             \tmov    (%rax),%rbx\n     33a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 341 <int2str_base_0pad+0x341>\n     341:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n     345:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     348:\t83 c0 05             \tadd    $0x5,%eax\n     34b:\t48 98                \tcltq   \n     34d:\t48 c1 e0 04          \tshl    $0x4,%rax\n     351:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     357:\t4c 8b 20             \tmov    (%rax),%r12\n     35a:\te8 00 00 00 00       \tcallq  35f <int2str_base_0pad+0x35f>\n     35f:\t89 c1                \tmov    %eax,%ecx\n     361:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 367 <int2str_base_0pad+0x367>\n     367:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 36e <int2str_base_0pad+0x36e>\n     36e:\t48 83 ec 08          \tsub    $0x8,%rsp\n     372:\t68 00 00 00 00       \tpushq  $0x0\n     377:\t68 00 00 00 00       \tpushq  $0x0\n     37c:\t53                   \tpush   %rbx\n     37d:\t45 89 e9             \tmov    %r13d,%r9d\n     380:\t4d 89 e0             \tmov    %r12,%r8\n     383:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     388:\t48 89 c7             \tmov    %rax,%rdi\n     38b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     390:\te8 00 00 00 00       \tcallq  395 <int2str_base_0pad+0x395>\n     395:\t48 83 c4 20          \tadd    $0x20,%rsp\n     399:\teb 51                \tjmp    3ec <int2str_base_0pad+0x3ec>\n     39b:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     39e:\t83 c0 05             \tadd    $0x5,%eax\n     3a1:\t48 98                \tcltq   \n     3a3:\t48 c1 e0 04          \tshl    $0x4,%rax\n     3a7:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     3ad:\t48 8b 18             \tmov    (%rax),%rbx\n     3b0:\te8 00 00 00 00       \tcallq  3b5 <int2str_base_0pad+0x3b5>\n     3b5:\t89 c1                \tmov    %eax,%ecx\n     3b7:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 3bd <int2str_base_0pad+0x3bd>\n     3bd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3c4 <int2str_base_0pad+0x3c4>\n     3c4:\t48 83 ec 08          \tsub    $0x8,%rsp\n     3c8:\t68 00 00 00 00       \tpushq  $0x0\n     3cd:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n     3d3:\t49 89 d8             \tmov    %rbx,%r8\n     3d6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     3db:\t48 89 c7             \tmov    %rax,%rdi\n     3de:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     3e3:\te8 00 00 00 00       \tcallq  3e8 <int2str_base_0pad+0x3e8>\n     3e8:\t48 83 c4 10          \tadd    $0x10,%rsp\n     3ec:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3f2 <int2str_base_0pad+0x3f2>\n     3f2:\t85 c0                \ttest   %eax,%eax\n     3f4:\t0f 95 c0             \tsetne  %al\n     3f7:\t0f b6 c0             \tmovzbl %al,%eax\n     3fa:\t48 85 c0             \ttest   %rax,%rax\n     3fd:\t0f 84 08 01 00 00    \tje     50b <int2str_base_0pad+0x50b>\n     403:\te8 00 00 00 00       \tcallq  408 <int2str_base_0pad+0x408>\n     408:\te9 fe 00 00 00       \tjmpq   50b <int2str_base_0pad+0x50b>\n     40d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 414 <int2str_base_0pad+0x414>\n     414:\t48 85 c0             \ttest   %rax,%rax\n     417:\t0f 95 c0             \tsetne  %al\n     41a:\t0f b6 c0             \tmovzbl %al,%eax\n     41d:\t48 85 c0             \ttest   %rax,%rax\n     420:\t0f 84 85 00 00 00    \tje     4ab <int2str_base_0pad+0x4ab>\n     426:\t4c 8b 2d 00 00 00 00 \tmov    0x0(%rip),%r13        # 42d <int2str_base_0pad+0x42d>\n     42d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 434 <int2str_base_0pad+0x434>\n     434:\t4c 8b 38             \tmov    (%rax),%r15\n     437:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 43e <int2str_base_0pad+0x43e>\n     43e:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n     442:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     445:\t83 c0 05             \tadd    $0x5,%eax\n     448:\t48 98                \tcltq   \n     44a:\t48 c1 e0 04          \tshl    $0x4,%rax\n     44e:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     454:\t48 8b 18             \tmov    (%rax),%rbx\n     457:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     45a:\t83 c0 05             \tadd    $0x5,%eax\n     45d:\t48 98                \tcltq   \n     45f:\t48 c1 e0 04          \tshl    $0x4,%rax\n     463:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     469:\t44 8b 30             \tmov    (%rax),%r14d\n     46c:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     471:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     476:\te8 00 00 00 00       \tcallq  47b <int2str_base_0pad+0x47b>\n     47b:\t44 09 f0             \tor     %r14d,%eax\n     47e:\t48 83 ec 08          \tsub    $0x8,%rsp\n     482:\t68 00 00 00 00       \tpushq  $0x0\n     487:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n     48d:\t4d 89 f8             \tmov    %r15,%r8\n     490:\t44 89 e1             \tmov    %r12d,%ecx\n     493:\t48 89 da             \tmov    %rbx,%rdx\n     496:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     49b:\t89 c7                \tmov    %eax,%edi\n     49d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     4a2:\t41 ff d5             \tcallq  *%r13\n     4a5:\t48 83 c4 10          \tadd    $0x10,%rsp\n     4a9:\teb 60                \tjmp    50b <int2str_base_0pad+0x50b>\n     4ab:\t4c 8b 25 00 00 00 00 \tmov    0x0(%rip),%r12        # 4b2 <int2str_base_0pad+0x4b2>\n     4b2:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     4b5:\t83 c0 05             \tadd    $0x5,%eax\n     4b8:\t48 98                \tcltq   \n     4ba:\t48 c1 e0 04          \tshl    $0x4,%rax\n     4be:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     4c4:\t48 8b 18             \tmov    (%rax),%rbx\n     4c7:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     4ca:\t83 c0 05             \tadd    $0x5,%eax\n     4cd:\t48 98                \tcltq   \n     4cf:\t48 c1 e0 04          \tshl    $0x4,%rax\n     4d3:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     4d9:\t44 8b 28             \tmov    (%rax),%r13d\n     4dc:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     4e1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     4e6:\te8 00 00 00 00       \tcallq  4eb <int2str_base_0pad+0x4eb>\n     4eb:\t44 09 e8             \tor     %r13d,%eax\n     4ee:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     4f4:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     4f9:\t48 89 da             \tmov    %rbx,%rdx\n     4fc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     501:\t89 c7                \tmov    %eax,%edi\n     503:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     508:\t41 ff d4             \tcallq  *%r12\n     50b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 511 <int2str_base_0pad+0x511>\n     511:\t83 e8 01             \tsub    $0x1,%eax\n     514:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 51a <int2str_base_0pad+0x51a>\n     51a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     51f:\te9 51 03 00 00       \tjmpq   875 <int2str_base_0pad+0x875>\n     524:\tc7 45 cc 14 00 00 00 \tmovl   $0x14,-0x34(%rbp)\n     52b:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     52e:\t2b 45 9c             \tsub    -0x64(%rbp),%eax\n     531:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n     534:\tc6 05 00 00 00 00 00 \tmovb   $0x0,0x0(%rip)        # 53b <int2str_base_0pad+0x53b>\n     53b:\t8b 4d a8             \tmov    -0x58(%rbp),%ecx\n     53e:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n     541:\tba 00 00 00 00       \tmov    $0x0,%edx\n     546:\tf7 f1                \tdiv    %ecx\n     548:\t89 d0                \tmov    %edx,%eax\n     54a:\t89 c2                \tmov    %eax,%edx\n     54c:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     54f:\t48 98                \tcltq   \n     551:\t88 90 00 00 00 00    \tmov    %dl,0x0(%rax)\n     557:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     55a:\t48 98                \tcltq   \n     55c:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n     563:\t3c 09                \tcmp    $0x9,%al\n     565:\t7f 1e                \tjg     585 <int2str_base_0pad+0x585>\n     567:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     56a:\t48 98                \tcltq   \n     56c:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n     573:\t83 c0 30             \tadd    $0x30,%eax\n     576:\t89 c2                \tmov    %eax,%edx\n     578:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     57b:\t48 98                \tcltq   \n     57d:\t88 90 00 00 00 00    \tmov    %dl,0x0(%rax)\n     583:\teb 1c                \tjmp    5a1 <int2str_base_0pad+0x5a1>\n     585:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     588:\t48 98                \tcltq   \n     58a:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n     591:\t83 c0 57             \tadd    $0x57,%eax\n     594:\t89 c2                \tmov    %eax,%edx\n     596:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     599:\t48 98                \tcltq   \n     59b:\t88 90 00 00 00 00    \tmov    %dl,0x0(%rax)\n     5a1:\t83 6d cc 01          \tsubl   $0x1,-0x34(%rbp)\n     5a5:\t8b 75 a8             \tmov    -0x58(%rbp),%esi\n     5a8:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n     5ab:\tba 00 00 00 00       \tmov    $0x0,%edx\n     5b0:\tf7 f6                \tdiv    %esi\n     5b2:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n     5b5:\t83 7d ac 00          \tcmpl   $0x0,-0x54(%rbp)\n     5b9:\t75 08                \tjne    5c3 <int2str_base_0pad+0x5c3>\n     5bb:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     5be:\t3b 45 c8             \tcmp    -0x38(%rbp),%eax\n     5c1:\t7e 0a                \tjle    5cd <int2str_base_0pad+0x5cd>\n     5c3:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n     5c7:\t0f 89 6e ff ff ff    \tjns    53b <int2str_base_0pad+0x53b>\n     5cd:\t83 7d ac 00          \tcmpl   $0x0,-0x54(%rbp)\n     5d1:\t0f 84 79 02 00 00    \tje     850 <int2str_base_0pad+0x850>\n     5d7:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n     5db:\t0f 89 6f 02 00 00    \tjns    850 <int2str_base_0pad+0x850>\n     5e1:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     5e6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     5eb:\te8 00 00 00 00       \tcallq  5f0 <int2str_base_0pad+0x5f0>\n     5f0:\t83 f8 fc             \tcmp    $0xfffffffc,%eax\n     5f3:\t0f 8c 57 02 00 00    \tjl     850 <int2str_base_0pad+0x850>\n     5f9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 5ff <int2str_base_0pad+0x5ff>\n     5ff:\t85 c0                \ttest   %eax,%eax\n     601:\t0f 85 49 02 00 00    \tjne    850 <int2str_base_0pad+0x850>\n     607:\tc7 45 c4 fc ff ff ff \tmovl   $0xfffffffc,-0x3c(%rbp)\n     60e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 614 <int2str_base_0pad+0x614>\n     614:\t83 c0 01             \tadd    $0x1,%eax\n     617:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 61d <int2str_base_0pad+0x61d>\n     61d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 623 <int2str_base_0pad+0x623>\n     623:\t85 c0                \ttest   %eax,%eax\n     625:\t0f 95 c0             \tsetne  %al\n     628:\t0f b6 c0             \tmovzbl %al,%eax\n     62b:\t48 85 c0             \ttest   %rax,%rax\n     62e:\t0f 84 0f 01 00 00    \tje     743 <int2str_base_0pad+0x743>\n     634:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 63a <int2str_base_0pad+0x63a>\n     63a:\t85 c0                \ttest   %eax,%eax\n     63c:\t0f 95 c0             \tsetne  %al\n     63f:\t0f b6 c0             \tmovzbl %al,%eax\n     642:\t48 85 c0             \ttest   %rax,%rax\n     645:\t74 0a                \tje     651 <int2str_base_0pad+0x651>\n     647:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     64a:\t89 c7                \tmov    %eax,%edi\n     64c:\te8 00 00 00 00       \tcallq  651 <int2str_base_0pad+0x651>\n     651:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 658 <int2str_base_0pad+0x658>\n     658:\t48 85 c0             \ttest   %rax,%rax\n     65b:\t0f 95 c0             \tsetne  %al\n     65e:\t0f b6 c0             \tmovzbl %al,%eax\n     661:\t48 85 c0             \ttest   %rax,%rax\n     664:\t74 6b                \tje     6d1 <int2str_base_0pad+0x6d1>\n     666:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 66d <int2str_base_0pad+0x66d>\n     66d:\t48 8b 18             \tmov    (%rax),%rbx\n     670:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 677 <int2str_base_0pad+0x677>\n     677:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n     67b:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     67e:\t83 c0 05             \tadd    $0x5,%eax\n     681:\t48 98                \tcltq   \n     683:\t48 c1 e0 04          \tshl    $0x4,%rax\n     687:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     68d:\t4c 8b 20             \tmov    (%rax),%r12\n     690:\te8 00 00 00 00       \tcallq  695 <int2str_base_0pad+0x695>\n     695:\t89 c1                \tmov    %eax,%ecx\n     697:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 69d <int2str_base_0pad+0x69d>\n     69d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6a4 <int2str_base_0pad+0x6a4>\n     6a4:\t48 83 ec 08          \tsub    $0x8,%rsp\n     6a8:\t68 00 00 00 00       \tpushq  $0x0\n     6ad:\t68 00 00 00 00       \tpushq  $0x0\n     6b2:\t53                   \tpush   %rbx\n     6b3:\t45 89 e9             \tmov    %r13d,%r9d\n     6b6:\t4d 89 e0             \tmov    %r12,%r8\n     6b9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     6be:\t48 89 c7             \tmov    %rax,%rdi\n     6c1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6c6:\te8 00 00 00 00       \tcallq  6cb <int2str_base_0pad+0x6cb>\n     6cb:\t48 83 c4 20          \tadd    $0x20,%rsp\n     6cf:\teb 51                \tjmp    722 <int2str_base_0pad+0x722>\n     6d1:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     6d4:\t83 c0 05             \tadd    $0x5,%eax\n     6d7:\t48 98                \tcltq   \n     6d9:\t48 c1 e0 04          \tshl    $0x4,%rax\n     6dd:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     6e3:\t48 8b 18             \tmov    (%rax),%rbx\n     6e6:\te8 00 00 00 00       \tcallq  6eb <int2str_base_0pad+0x6eb>\n     6eb:\t89 c1                \tmov    %eax,%ecx\n     6ed:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 6f3 <int2str_base_0pad+0x6f3>\n     6f3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6fa <int2str_base_0pad+0x6fa>\n     6fa:\t48 83 ec 08          \tsub    $0x8,%rsp\n     6fe:\t68 00 00 00 00       \tpushq  $0x0\n     703:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n     709:\t49 89 d8             \tmov    %rbx,%r8\n     70c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     711:\t48 89 c7             \tmov    %rax,%rdi\n     714:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     719:\te8 00 00 00 00       \tcallq  71e <int2str_base_0pad+0x71e>\n     71e:\t48 83 c4 10          \tadd    $0x10,%rsp\n     722:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 728 <int2str_base_0pad+0x728>\n     728:\t85 c0                \ttest   %eax,%eax\n     72a:\t0f 95 c0             \tsetne  %al\n     72d:\t0f b6 c0             \tmovzbl %al,%eax\n     730:\t48 85 c0             \ttest   %rax,%rax\n     733:\t0f 84 08 01 00 00    \tje     841 <int2str_base_0pad+0x841>\n     739:\te8 00 00 00 00       \tcallq  73e <int2str_base_0pad+0x73e>\n     73e:\te9 fe 00 00 00       \tjmpq   841 <int2str_base_0pad+0x841>\n     743:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 74a <int2str_base_0pad+0x74a>\n     74a:\t48 85 c0             \ttest   %rax,%rax\n     74d:\t0f 95 c0             \tsetne  %al\n     750:\t0f b6 c0             \tmovzbl %al,%eax\n     753:\t48 85 c0             \ttest   %rax,%rax\n     756:\t0f 84 85 00 00 00    \tje     7e1 <int2str_base_0pad+0x7e1>\n     75c:\t4c 8b 2d 00 00 00 00 \tmov    0x0(%rip),%r13        # 763 <int2str_base_0pad+0x763>\n     763:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 76a <int2str_base_0pad+0x76a>\n     76a:\t4c 8b 38             \tmov    (%rax),%r15\n     76d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 774 <int2str_base_0pad+0x774>\n     774:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n     778:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     77b:\t83 c0 05             \tadd    $0x5,%eax\n     77e:\t48 98                \tcltq   \n     780:\t48 c1 e0 04          \tshl    $0x4,%rax\n     784:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     78a:\t48 8b 18             \tmov    (%rax),%rbx\n     78d:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     790:\t83 c0 05             \tadd    $0x5,%eax\n     793:\t48 98                \tcltq   \n     795:\t48 c1 e0 04          \tshl    $0x4,%rax\n     799:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     79f:\t44 8b 30             \tmov    (%rax),%r14d\n     7a2:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     7a7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     7ac:\te8 00 00 00 00       \tcallq  7b1 <int2str_base_0pad+0x7b1>\n     7b1:\t44 09 f0             \tor     %r14d,%eax\n     7b4:\t48 83 ec 08          \tsub    $0x8,%rsp\n     7b8:\t68 00 00 00 00       \tpushq  $0x0\n     7bd:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n     7c3:\t4d 89 f8             \tmov    %r15,%r8\n     7c6:\t44 89 e1             \tmov    %r12d,%ecx\n     7c9:\t48 89 da             \tmov    %rbx,%rdx\n     7cc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     7d1:\t89 c7                \tmov    %eax,%edi\n     7d3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     7d8:\t41 ff d5             \tcallq  *%r13\n     7db:\t48 83 c4 10          \tadd    $0x10,%rsp\n     7df:\teb 60                \tjmp    841 <int2str_base_0pad+0x841>\n     7e1:\t4c 8b 25 00 00 00 00 \tmov    0x0(%rip),%r12        # 7e8 <int2str_base_0pad+0x7e8>\n     7e8:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     7eb:\t83 c0 05             \tadd    $0x5,%eax\n     7ee:\t48 98                \tcltq   \n     7f0:\t48 c1 e0 04          \tshl    $0x4,%rax\n     7f4:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     7fa:\t48 8b 18             \tmov    (%rax),%rbx\n     7fd:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     800:\t83 c0 05             \tadd    $0x5,%eax\n     803:\t48 98                \tcltq   \n     805:\t48 c1 e0 04          \tshl    $0x4,%rax\n     809:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     80f:\t44 8b 28             \tmov    (%rax),%r13d\n     812:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     817:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     81c:\te8 00 00 00 00       \tcallq  821 <int2str_base_0pad+0x821>\n     821:\t44 09 e8             \tor     %r13d,%eax\n     824:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     82a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     82f:\t48 89 da             \tmov    %rbx,%rdx\n     832:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     837:\t89 c7                \tmov    %eax,%edi\n     839:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     83e:\t41 ff d4             \tcallq  *%r12\n     841:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 847 <int2str_base_0pad+0x847>\n     847:\t83 e8 01             \tsub    $0x1,%eax\n     84a:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 850 <int2str_base_0pad+0x850>\n     850:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n     855:\t74 10                \tje     867 <int2str_base_0pad+0x867>\n     857:\tb8 14 00 00 00       \tmov    $0x14,%eax\n     85c:\t2b 45 cc             \tsub    -0x34(%rbp),%eax\n     85f:\t89 c2                \tmov    %eax,%edx\n     861:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     865:\t89 10                \tmov    %edx,(%rax)\n     867:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     86a:\t83 c0 01             \tadd    $0x1,%eax\n     86d:\t48 98                \tcltq   \n     86f:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     875:\t48 8d 65 d8          \tlea    -0x28(%rbp),%rsp\n     879:\t5b                   \tpop    %rbx\n     87a:\t41 5c                \tpop    %r12\n     87c:\t41 5d                \tpop    %r13\n     87e:\t41 5e                \tpop    %r14\n     880:\t41 5f                \tpop    %r15\n     882:\t5d                   \tpop    %rbp\n     883:\tc3                   \tretq   ", "code_s": "char *__fastcall int2str_base_0pad(unsigned int a1, _DWORD *a2, __int64 a3,\n                                   int a4) {\n  const char *v4;\n  int v5;\n  const char *v6;\n  unsigned int v7;\n  const char *v8;\n  unsigned int v9;\n  void (*v10)(_QWORD, const char *, ...);\n  __int64 v11;\n  unsigned int v12;\n  __int64 v13;\n  int v14;\n  unsigned int v15;\n  void (*v16)(_QWORD, const char *, ...);\n  const char *v17;\n  int v18;\n  unsigned int v19;\n  char *result;\n  const char *v21;\n  int v22;\n  const char *v23;\n  unsigned int v24;\n  const char *v25;\n  unsigned int v26;\n  void (*v27)(_QWORD, const char *, ...);\n  __int64 v28;\n  unsigned int v29;\n  __int64 v30;\n  int v31;\n  unsigned int v32;\n  void (*v33)(_QWORD, const char *, ...);\n  const char *v34;\n  int v35;\n  unsigned int v36;\n  char v37;\n  __int64 v38;\n  const char *v39;\n  int v40;\n  const char *v41;\n  unsigned int v42;\n  const char *v43;\n  unsigned int v44;\n  void (*v45)(_QWORD, const char *, ...);\n  __int64 v46;\n  unsigned int v47;\n  __int64 v48;\n  int v49;\n  unsigned int v50;\n  void (*v51)(_QWORD, const char *, ...);\n  const char *v52;\n  int v53;\n  unsigned int v54;\n  unsigned int v55;\n  int v57;\n  v55 = a3;\n  if ((int)a3 > Number) {\n    if ((int)a3 <= Number) {\n      v57 = Number;\n      byte_11F5 = Number;\n      do {\n        r_4485[v57] = a1 % v55;\n        if (r_4485[v57] > Number)\n          v37 = r_4485[v57] + Number;\n        else\n          v37 = r_4485[v57] + Number;\n        r_4485[v57--] = v37;\n        v38 = a1 % v55;\n        a1 /= v55;\n      } while ((a1 || v57 > Number - a4) && v57 >= Number);\n      if (a1 && v57 < Number &&\n          (int)get_debug_level(String, Number L, v38) >= Number &&\n          !dprint_crit) {\n        ++dprint_crit;\n        if (log_stderr) {\n          if (log_color)\n            dprint_color(Number L);\n          if (log_prefix_val) {\n            v39 = (const char *)*log_prefix_val;\n            v40 = *(_DWORD *)(log_prefix_val + Number L);\n            v41 = (const char *)*((_QWORD *)&log_level_info + Number);\n            v42 = my_pid();\n            fprintf(stderr, String, process_no, v42, v41, v40, v39, String,\n                    String);\n          } else {\n            v43 = (const char *)*((_QWORD *)&log_level_info + Number);\n            v44 = my_pid();\n            fprintf(stderr, String, process_no, v44, v43, String, String);\n          }\n          if (log_color)\n            dprint_color_reset();\n        } else if (log_prefix_val) {\n          v45 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v46 = *log_prefix_val;\n          v47 = *(_DWORD *)(log_prefix_val + Number L);\n          v48 = *((_QWORD *)&log_level_info + Number);\n          v49 = *((_DWORD *)&log_level_info + Number);\n          v50 = get_debug_facility(String, Number L);\n          v45(v49 | v50, String, v48, v47, v46, String, String);\n        } else {\n          v51 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v52 = (const char *)*((_QWORD *)&log_level_info + Number);\n          v53 = *((_DWORD *)&log_level_info + Number);\n          v54 = get_debug_facility(String, Number L);\n          v51(v53 | v54, String, v52, String, String);\n        }\n        --dprint_crit;\n      }\n      if (a2)\n        *a2 = Number - v57;\n      result = &r_4485[v57 + Number];\n    } else {\n      if ((int)get_debug_level(String, Number L, a3) >= Number &&\n          !dprint_crit) {\n        ++dprint_crit;\n        if (log_stderr) {\n          if (log_color)\n            dprint_color(Number L);\n          if (log_prefix_val) {\n            v21 = (const char *)*log_prefix_val;\n            v22 = *(_DWORD *)(log_prefix_val + Number L);\n            v23 = (const char *)*((_QWORD *)&log_level_info + Number);\n            v24 = my_pid();\n            fprintf(stderr, String, process_no, v24, v23, v22, v21, String,\n                    String);\n          } else {\n            v25 = (const char *)*((_QWORD *)&log_level_info + Number);\n            v26 = my_pid();\n            fprintf(stderr, String, process_no, v26, v25, String, String);\n          }\n          if (log_color)\n            dprint_color_reset();\n        } else if (log_prefix_val) {\n          v27 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v28 = *log_prefix_val;\n          v29 = *(_DWORD *)(log_prefix_val + Number L);\n          v30 = *((_QWORD *)&log_level_info + Number);\n          v31 = *((_DWORD *)&log_level_info + Number);\n          v32 = get_debug_facility(String, Number L);\n          v27(v31 | v32, String, v30, v29, v28, String, String);\n        } else {\n          v33 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v34 = (const char *)*((_QWORD *)&log_level_info + Number);\n          v35 = *((_DWORD *)&log_level_info + Number);\n          v36 = get_debug_facility(String, Number L);\n          v33(v35 | v36, String, v34, String, String);\n        }\n        --dprint_crit;\n      }\n      result = Number L;\n    }\n  } else {\n    if ((int)get_debug_level(String, Number L, a3) >= Number && !dprint_crit) {\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color(Number L);\n        if (log_prefix_val) {\n          v4 = (const char *)*log_prefix_val;\n          v5 = *(_DWORD *)(log_prefix_val + Number L);\n          v6 = (const char *)*((_QWORD *)&log_level_info + Number);\n          v7 = my_pid();\n          fprintf(stderr, String, process_no, v7, v6, v5, v4, String, String);\n        } else {\n          v8 = (const char *)*((_QWORD *)&log_level_info + Number);\n          v9 = my_pid();\n          fprintf(stderr, String, process_no, v9, v8, String, String);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v10 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v11 = *log_prefix_val;\n        v12 = *(_DWORD *)(log_prefix_val + Number L);\n        v13 = *((_QWORD *)&log_level_info + Number);\n        v14 = *((_DWORD *)&log_level_info + Number);\n        v15 = get_debug_facility(String, Number L);\n        v10(v14 | v15, String, v13, v12, v11, String, String);\n      } else {\n        v16 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v17 = (const char *)*((_QWORD *)&log_level_info + Number);\n        v18 = *((_DWORD *)&log_level_info + Number);\n        v19 = get_debug_facility(String, Number L);\n        v16(v18 | v19, String, v17, String, String);\n      }\n      --dprint_crit;\n    }\n    result = Number L;\n  }\n  return result;\n}", "code_t": "char *__cdecl int2str_base_0pad(unsigned int l, int *len, int base, int size) {\n  const char *v4;\n  int v5;\n  const char *v6;\n  unsigned int v7;\n  const char *v8;\n  unsigned int v9;\n  void (*v10)(_QWORD, const char *, ...);\n  __int64 v11;\n  unsigned int v12;\n  __int64 v13;\n  int v14;\n  unsigned int v15;\n  void (*v16)(_QWORD, const char *, ...);\n  const char *v17;\n  int v18;\n  unsigned int v19;\n  char *result;\n  const char *v21;\n  int v22;\n  const char *v23;\n  unsigned int v24;\n  const char *v25;\n  unsigned int v26;\n  void (*v27)(_QWORD, const char *, ...);\n  __int64 v28;\n  unsigned int v29;\n  __int64 v30;\n  int v31;\n  unsigned int v32;\n  void (*v33)(_QWORD, const char *, ...);\n  const char *v34;\n  int v35;\n  unsigned int v36;\n  char v37;\n  __int64 v38;\n  const char *v39;\n  int v40;\n  const char *v41;\n  unsigned int v42;\n  const char *v43;\n  unsigned int v44;\n  void (*v45)(_QWORD, const char *, ...);\n  __int64 v46;\n  unsigned int v47;\n  __int64 v48;\n  int v49;\n  unsigned int v50;\n  void (*v51)(_QWORD, const char *, ...);\n  const char *v52;\n  int v53;\n  unsigned int v54;\n  int i;\n  if (base > Number) {\n    if (base <= Number) {\n      i = Number;\n      byte_11F5 = Number;\n      do {\n        r_4485[i] = l % base;\n        if (r_4485[i] > Number)\n          v37 = r_4485[i] + Number;\n        else\n          v37 = r_4485[i] + Number;\n        r_4485[i--] = v37;\n        v38 = l % base;\n        l /= (unsigned int)base;\n      } while ((l || i > Number - size) && i >= Number);\n      if (l && i < Number &&\n          (int)get_debug_level(String, Number L, v38) >= Number &&\n          !dprint_crit) {\n        ++dprint_crit;\n        if (log_stderr) {\n          if (log_color)\n            dprint_color(Number L);\n          if (log_prefix_val) {\n            v39 = (const char *)*log_prefix_val;\n            v40 = *(_DWORD *)(log_prefix_val + Number L);\n            v41 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n            v42 = my_pid();\n            fprintf(stderr, String, process_no, v42, v41, v40, v39, String,\n                    String);\n          } else {\n            v43 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n            v44 = my_pid();\n            fprintf(stderr, String, process_no, v44, v43, String, String);\n          }\n          if (log_color)\n            dprint_color_reset();\n        } else if (log_prefix_val) {\n          v45 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v46 = *log_prefix_val;\n          v47 = *(_DWORD *)(log_prefix_val + Number L);\n          v48 = *((_QWORD *)&log_level_info_0 + Number);\n          v49 = *((_DWORD *)&log_level_info_0 + Number);\n          v50 = get_debug_facility(String, Number L);\n          v45(v49 | v50, String, v48, v47, v46, String, String);\n        } else {\n          v51 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v52 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n          v53 = *((_DWORD *)&log_level_info_0 + Number);\n          v54 = get_debug_facility(String, Number L);\n          v51(v53 | v54, String, v52, String, String);\n        }\n        --dprint_crit;\n      }\n      if (len)\n        *len = Number - i;\n      result = &r_4485[i + Number];\n    } else {\n      if ((int)get_debug_level(String, Number L, base) >= Number &&\n          !dprint_crit) {\n        ++dprint_crit;\n        if (log_stderr) {\n          if (log_color)\n            dprint_color(Number L);\n          if (log_prefix_val) {\n            v21 = (const char *)*log_prefix_val;\n            v22 = *(_DWORD *)(log_prefix_val + Number L);\n            v23 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n            v24 = my_pid();\n            fprintf(stderr, String, process_no, v24, v23, v22, v21, String,\n                    String);\n          } else {\n            v25 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n            v26 = my_pid();\n            fprintf(stderr, String, process_no, v26, v25, String, String);\n          }\n          if (log_color)\n            dprint_color_reset();\n        } else if (log_prefix_val) {\n          v27 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v28 = *log_prefix_val;\n          v29 = *(_DWORD *)(log_prefix_val + Number L);\n          v30 = *((_QWORD *)&log_level_info_0 + Number);\n          v31 = *((_DWORD *)&log_level_info_0 + Number);\n          v32 = get_debug_facility(String, Number L);\n          v27(v31 | v32, String, v30, v29, v28, String, String);\n        } else {\n          v33 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v34 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n          v35 = *((_DWORD *)&log_level_info_0 + Number);\n          v36 = get_debug_facility(String, Number L);\n          v33(v35 | v36, String, v34, String, String);\n        }\n        --dprint_crit;\n      }\n      result = Number L;\n    }\n  } else {\n    if ((int)get_debug_level(String, Number L, base) >= Number &&\n        !dprint_crit) {\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color(Number L);\n        if (log_prefix_val) {\n          v4 = (const char *)*log_prefix_val;\n          v5 = *(_DWORD *)(log_prefix_val + Number L);\n          v6 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n          v7 = my_pid();\n          fprintf(stderr, String, process_no, v7, v6, v5, v4, String, String);\n        } else {\n          v8 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n          v9 = my_pid();\n          fprintf(stderr, String, process_no, v9, v8, String, String);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v10 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v11 = *log_prefix_val;\n        v12 = *(_DWORD *)(log_prefix_val + Number L);\n        v13 = *((_QWORD *)&log_level_info_0 + Number);\n        v14 = *((_DWORD *)&log_level_info_0 + Number);\n        v15 = get_debug_facility(String, Number L);\n        v10(v14 | v15, String, v13, v12, v11, String, String);\n      } else {\n        v16 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v17 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n        v18 = *((_DWORD *)&log_level_info_0 + Number);\n        v19 = get_debug_facility(String, Number L);\n        v16(v18 | v19, String, v17, String, String);\n      }\n      --dprint_crit;\n    }\n    result = Number L;\n  }\n  return result;\n}", "var": [], "body_in_train": false}, {"repo_owner": "nmacs", "repo_name": "print3d", "path": "nmacs/print3d/142ee0ab03aaea08c1cce3b49aba610648f7bc1ddb53dfc348f2f9408898fa3c", "path_in_repo": "nmacs/print3d//toolchain/openocd-0.7.0/jimtcl/jimsh", "objdump": "000000000040fbaa <JimFreeCallFrame>:\n  40fbaa:\t55                   \tpush   %rbp\n  40fbab:\t48 89 e5             \tmov    %rsp,%rbp\n  40fbae:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40fbb2:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  40fbb6:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  40fbba:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n  40fbbd:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fbc1:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  40fbc5:\t48 85 c0             \ttest   %rax,%rax\n  40fbc8:\t74 2f                \tje     40fbf9 <JimFreeCallFrame+0x4f>\n  40fbca:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fbce:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  40fbd2:\t8b 50 10             \tmov    0x10(%rax),%edx\n  40fbd5:\t83 ea 01             \tsub    $0x1,%edx\n  40fbd8:\t89 50 10             \tmov    %edx,0x10(%rax)\n  40fbdb:\t8b 40 10             \tmov    0x10(%rax),%eax\n  40fbde:\t85 c0                \ttest   %eax,%eax\n  40fbe0:\t7f 17                \tjg     40fbf9 <JimFreeCallFrame+0x4f>\n  40fbe2:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fbe6:\t48 8b 50 58          \tmov    0x58(%rax),%rdx\n  40fbea:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40fbee:\t48 89 d6             \tmov    %rdx,%rsi\n  40fbf1:\t48 89 c7             \tmov    %rax,%rdi\n  40fbf4:\te8 9f b3 ff ff       \tcallq  40af98 <Jim_FreeObj>\n  40fbf9:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fbfd:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n  40fc01:\t48 85 c0             \ttest   %rax,%rax\n  40fc04:\t74 2f                \tje     40fc35 <JimFreeCallFrame+0x8b>\n  40fc06:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fc0a:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n  40fc0e:\t8b 50 10             \tmov    0x10(%rax),%edx\n  40fc11:\t83 ea 01             \tsub    $0x1,%edx\n  40fc14:\t89 50 10             \tmov    %edx,0x10(%rax)\n  40fc17:\t8b 40 10             \tmov    0x10(%rax),%eax\n  40fc1a:\t85 c0                \ttest   %eax,%eax\n  40fc1c:\t7f 17                \tjg     40fc35 <JimFreeCallFrame+0x8b>\n  40fc1e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fc22:\t48 8b 50 60          \tmov    0x60(%rax),%rdx\n  40fc26:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40fc2a:\t48 89 d6             \tmov    %rdx,%rsi\n  40fc2d:\t48 89 c7             \tmov    %rax,%rdi\n  40fc30:\te8 63 b3 ff ff       \tcallq  40af98 <Jim_FreeObj>\n  40fc35:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fc39:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n  40fc3d:\t8b 50 10             \tmov    0x10(%rax),%edx\n  40fc40:\t83 ea 01             \tsub    $0x1,%edx\n  40fc43:\t89 50 10             \tmov    %edx,0x10(%rax)\n  40fc46:\t8b 40 10             \tmov    0x10(%rax),%eax\n  40fc49:\t85 c0                \ttest   %eax,%eax\n  40fc4b:\t7f 17                \tjg     40fc64 <JimFreeCallFrame+0xba>\n  40fc4d:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fc51:\t48 8b 50 70          \tmov    0x70(%rax),%rdx\n  40fc55:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40fc59:\t48 89 d6             \tmov    %rdx,%rsi\n  40fc5c:\t48 89 c7             \tmov    %rax,%rdi\n  40fc5f:\te8 34 b3 ff ff       \tcallq  40af98 <Jim_FreeObj>\n  40fc64:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  40fc67:\t83 e0 01             \tand    $0x1,%eax\n  40fc6a:\t85 c0                \ttest   %eax,%eax\n  40fc6c:\t75 15                \tjne    40fc83 <JimFreeCallFrame+0xd9>\n  40fc6e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fc72:\t48 83 c0 10          \tadd    $0x10,%rax\n  40fc76:\t48 89 c7             \tmov    %rax,%rdi\n  40fc79:\te8 26 8e ff ff       \tcallq  408aa4 <Jim_FreeHashTable>\n  40fc7e:\te9 ef 00 00 00       \tjmpq   40fd72 <JimFreeCallFrame+0x1c8>\n  40fc83:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fc87:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40fc8b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40fc8f:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40fc96:\te9 c2 00 00 00       \tjmpq   40fd5d <JimFreeCallFrame+0x1b3>\n  40fc9b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40fc9e:\t48 98                \tcltq   \n  40fca0:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40fca7:\t00 \n  40fca8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40fcac:\t48 01 d0             \tadd    %rdx,%rax\n  40fcaf:\t48 8b 00             \tmov    (%rax),%rax\n  40fcb2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40fcb6:\te9 93 00 00 00       \tjmpq   40fd4e <JimFreeCallFrame+0x1a4>\n  40fcbb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40fcbf:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40fcc3:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40fcc7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40fccb:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40fccf:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  40fcd3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40fcd7:\t48 8b 00             \tmov    (%rax),%rax\n  40fcda:\t8b 50 10             \tmov    0x10(%rax),%edx\n  40fcdd:\t83 ea 01             \tsub    $0x1,%edx\n  40fce0:\t89 50 10             \tmov    %edx,0x10(%rax)\n  40fce3:\t8b 40 10             \tmov    0x10(%rax),%eax\n  40fce6:\t85 c0                \ttest   %eax,%eax\n  40fce8:\t7f 16                \tjg     40fd00 <JimFreeCallFrame+0x156>\n  40fcea:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40fcee:\t48 8b 10             \tmov    (%rax),%rdx\n  40fcf1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40fcf5:\t48 89 d6             \tmov    %rdx,%rsi\n  40fcf8:\t48 89 c7             \tmov    %rax,%rdi\n  40fcfb:\te8 98 b2 ff ff       \tcallq  40af98 <Jim_FreeObj>\n  40fd00:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40fd04:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40fd08:\t48 89 c7             \tmov    %rax,%rdi\n  40fd0b:\te8 ce 85 ff ff       \tcallq  4082de <Jim_Free>\n  40fd10:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40fd14:\t48 8b 00             \tmov    (%rax),%rax\n  40fd17:\t48 89 c7             \tmov    %rax,%rdi\n  40fd1a:\te8 bf 85 ff ff       \tcallq  4082de <Jim_Free>\n  40fd1f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40fd23:\t48 89 c7             \tmov    %rax,%rdi\n  40fd26:\te8 b3 85 ff ff       \tcallq  4082de <Jim_Free>\n  40fd2b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40fd2e:\t48 98                \tcltq   \n  40fd30:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40fd37:\t00 \n  40fd38:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40fd3c:\t48 01 d0             \tadd    %rdx,%rax\n  40fd3f:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  40fd46:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40fd4a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40fd4e:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  40fd53:\t0f 85 62 ff ff ff    \tjne    40fcbb <JimFreeCallFrame+0x111>\n  40fd59:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40fd5d:\t83 7d fc 0f          \tcmpl   $0xf,-0x4(%rbp)\n  40fd61:\t0f 8e 34 ff ff ff    \tjle    40fc9b <JimFreeCallFrame+0xf1>\n  40fd67:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fd6b:\tc7 40 28 00 00 00 00 \tmovl   $0x0,0x28(%rax)\n  40fd72:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fd76:\t48 8b 90 88 00 00 00 \tmov    0x88(%rax),%rdx\n  40fd7d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40fd81:\t48 89 d6             \tmov    %rdx,%rsi\n  40fd84:\t48 89 c7             \tmov    %rax,%rdi\n  40fd87:\te8 9f fc ff ff       \tcallq  40fa2b <JimDeleteLocalProcs>\n  40fd8c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40fd90:\t48 8b 90 48 01 00 00 \tmov    0x148(%rax),%rdx\n  40fd97:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40fd9b:\t48 89 50 68          \tmov    %rdx,0x68(%rax)\n  40fd9f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40fda3:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  40fda7:\t48 89 90 48 01 00 00 \tmov    %rdx,0x148(%rax)\n  40fdae:\t90                   \tnop\n  40fdaf:\tc9                   \tleaveq \n  40fdb0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall JimFreeCallFrame(__int64 a1, __int64 a2, char a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 result;\n  __int64 *v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 j;\n  int i;\n  if (*(_QWORD *)(a2 + Number)) {\n    v3 = *(_QWORD *)(a2 + Number);\n    if ((int)--*(_DWORD *)(v3 + Number) <= Number)\n      Jim_FreeObj(a1, *(_QWORD *)(a2 + Number));\n  }\n  if (*(_QWORD *)(a2 + Number)) {\n    v4 = *(_QWORD *)(a2 + Number);\n    if ((int)--*(_DWORD *)(v4 + Number) <= Number)\n      Jim_FreeObj(a1, *(_QWORD *)(a2 + Number));\n  }\n  v5 = *(_QWORD *)(a2 + Number);\n  if ((int)--*(_DWORD *)(v5 + Number) <= Number)\n    Jim_FreeObj(a1, *(_QWORD *)(a2 + Number));\n  if ((a3 & Number) != Number) {\n    v11 = *(_QWORD *)(a2 + Number);\n    for (i = Number; i <= Number; ++i) {\n      for (j = *(_QWORD *)(Number L * i + v11); j; j = v10) {\n        v10 = *(_QWORD *)(j + Number);\n        v9 = *(__int64 **)(j + Number);\n        v6 = *v9;\n        *(_DWORD *)(v6 + Number) = *(_DWORD *)(*v9 + Number) - Number;\n        if (*(int *)(v6 + Number) <= Number)\n          Jim_FreeObj(a1, *v9);\n        Jim_Free(*(void **)(j + Number));\n        Jim_Free(*(void **)j);\n        Jim_Free((void *)j);\n        *(_QWORD *)(Number L * i + v11) = Number L;\n      }\n    }\n    *(_DWORD *)(a2 + Number) = Number;\n  } else {\n    Jim_FreeHashTable(a2 + Number);\n  }\n  JimDeleteLocalProcs(a1, *(void **)(a2 + Number));\n  *(_QWORD *)(a2 + Number) = *(_QWORD *)(a1 + Number);\n  result = a1;\n  *(_QWORD *)(a1 + Number) = a2;\n  return result;\n}", "code_t": "void __cdecl JimFreeCallFrame(Jim_Interp_0 *interp, Jim_CallFrame_0 *cf_0,\n                              int flags) {\n  Jim_Obj_0 *v3;\n  Jim_Obj_0 *v4;\n  Jim_Obj_0 *v5;\n  Jim_Obj_0 *v6;\n  char flagsa;\n  Jim_Var_0 *varPtr;\n  Jim_HashEntry_0 *nextEntry;\n  Jim_HashEntry_0 **table;\n  Jim_HashEntry_0 *he;\n  int i;\n  flagsa = flags;\n  if (cf_0->procArgsObjPtr) {\n    v3 = cf_0->procArgsObjPtr;\n    if (--v3->refCount <= Number)\n      Jim_FreeObj(interp, cf_0->procArgsObjPtr);\n  }\n  if (cf_0->procBodyObjPtr) {\n    v4 = cf_0->procBodyObjPtr;\n    if (--v4->refCount <= Number)\n      Jim_FreeObj(interp, cf_0->procBodyObjPtr);\n  }\n  v5 = cf_0->nsObj;\n  if (--v5->refCount <= Number)\n    Jim_FreeObj(interp, cf_0->nsObj);\n  if ((flagsa & Number) != Number) {\n    table = cf_0->vars.table;\n    for (i = Number; i <= Number; ++i) {\n      for (he = table[i]; he; he = nextEntry) {\n        nextEntry = he->next;\n        varPtr = (Jim_Var_0 *)he->u.val;\n        v6 = varPtr->objPtr;\n        v6->refCount = varPtr->objPtr->refCount - Number;\n        if (v6->refCount <= Number)\n          Jim_FreeObj(interp, varPtr->objPtr);\n        Jim_Free(he->u.val);\n        Jim_Free(he->key);\n        Jim_Free(he);\n        table[i] = Number L;\n      }\n    }\n    cf_0->vars.used = Number;\n  } else {\n    Jim_FreeHashTable(&cf_0->vars);\n  }\n  JimDeleteLocalProcs(interp, cf_0->localCommands);\n  cf_0->next = interp->freeFramesList;\n  interp->freeFramesList = cf_0;\n}", "var": [], "body_in_train": false}, {"repo_owner": "Pixel-AOSP", "repo_name": "kernel_google_wahoo_hardened", "path": "Pixel-AOSP/kernel_google_wahoo_hardened/01e7e7992ac473f0352418a26e53b7060c024275051d5dd5779fd24099733a57", "path_in_repo": "Pixel-AOSP/kernel_google_wahoo_hardened/tools/perf/ui/browsers/hists.o", "objdump": "0000000000005663 <add_socket_opt>:\n    5663:\t55                   \tpush   %rbp\n    5664:\t48 89 e5             \tmov    %rsp,%rbp\n    5667:\t48 83 ec 30          \tsub    $0x30,%rsp\n    566b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    566f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    5673:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    5677:\t89 4d d4             \tmov    %ecx,-0x2c(%rbp)\n    567a:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    5681:\t00 00 \n    5683:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    5687:\t31 c0                \txor    %eax,%eax\n    5689:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    568d:\t79 07                \tjns    5696 <add_socket_opt+0x33>\n    568f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5694:\teb 65                \tjmp    56fb <add_socket_opt+0x98>\n    5696:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    569a:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    56a1:\t8b 80 38 02 00 00    \tmov    0x238(%rax),%eax\n    56a7:\t85 c0                \ttest   %eax,%eax\n    56a9:\t78 07                \tjs     56b2 <add_socket_opt+0x4f>\n    56ab:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    56b0:\teb 05                \tjmp    56b7 <add_socket_opt+0x54>\n    56b2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    56b7:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n    56ba:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    56be:\t89 d1                \tmov    %edx,%ecx\n    56c0:\t48 89 f2             \tmov    %rsi,%rdx\n    56c3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    56c8:\t48 89 c7             \tmov    %rax,%rdi\n    56cb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    56d0:\te8 00 00 00 00       \tcallq  56d5 <add_socket_opt+0x72>\n    56d5:\t85 c0                \ttest   %eax,%eax\n    56d7:\t79 07                \tjns    56e0 <add_socket_opt+0x7d>\n    56d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    56de:\teb 1b                \tjmp    56fb <add_socket_opt+0x98>\n    56e0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    56e4:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n    56e7:\t89 50 18             \tmov    %edx,0x18(%rax)\n    56ea:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    56ee:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    56f5:\t00 \n    56f6:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    56fb:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    56ff:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    5706:\t00 00 \n    5708:\t74 05                \tje     570f <add_socket_opt+0xac>\n    570a:\te8 00 00 00 00       \tcallq  570f <add_socket_opt+0xac>\n    570f:\tc9                   \tleaveq \n    5710:\tc3                   \tretq   ", "code_s": "__int64 __fastcall add_socket_opt(__int64 a1, __int64 a2, char **a3, int a4) {\n  const char *v5;\n  if (a4 < Number)\n    return Number L;\n  if (*(int *)(*(_QWORD *)(a1 + Number) + Number L) < Number)\n    v5 = String;\n  else\n    v5 = String;\n  if (asprintf(a3, String, v5, (unsigned int)a4) < Number)\n    return Number L;\n  *(_DWORD *)(a2 + Number) = a4;\n  *(_QWORD *)(a2 + Number) = do_zoom_socket;\n  return Number L;\n}", "code_t": "int __cdecl add_socket_opt(hist_browser *browser, popup_action *act,\n                           char **optstr, int socket_id) {\n  const char *v5;\n  if (socket_id < Number)\n    return Number;\n  if (browser->hists->socket_filter < Number)\n    v5 = String;\n  else\n    v5 = String;\n  if (asprintf(optstr, String, v5, (unsigned int)socket_id) < Number)\n    return Number;\n  act->socket = socket_id;\n  act->fn = (int (*)(hist_browser *, popup_action *))do_zoom_socket;\n  return Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "chenjingtao123", "repo_name": "linux_program", "path": "chenjingtao123/linux_program/bdfb03a84c479d7fde2b5ff6da450a1ff185f521d93aaf2833fe9ce5c1460740", "path_in_repo": "chenjingtao123/linux_program/test/signals/critical", "objdump": "", "code_s": "int snprintf(char *s, size_t maxlen, const char *format, ...) {\n  return snprintf(s, maxlen, format);\n}", "code_t": "int snprintf(char *s, size_t maxlen, const char *format, ...) {\n  return snprintf(s, maxlen, format);\n}", "var": [], "body_in_train": true}, {"repo_owner": "rockchip-toybrick", "repo_name": "external-wpa_supplicant_8", "path": "rockchip-toybrick/external-wpa_supplicant_8/6c2672fab34303e61c1d7e93a0407c1791fe28b43ea8f5250feccdda94afd81e", "path_in_repo": "rockchip-toybrick/external-wpa_supplicant_8/hostapd/hostapd", "objdump": "0000000000435ecf <int_array_add_unique>:\n  435ecf:\t55                   \tpush   %rbp\n  435ed0:\t48 89 e5             \tmov    %rsp,%rbp\n  435ed3:\t48 83 ec 20          \tsub    $0x20,%rsp\n  435ed7:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  435edb:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  435ede:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  435ee5:\teb 23                \tjmp    435f0a <int_array_add_unique+0x3b>\n  435ee7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  435eeb:\t48 8b 00             \tmov    (%rax),%rax\n  435eee:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  435ef1:\t48 63 d2             \tmovslq %edx,%rdx\n  435ef4:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  435ef8:\t48 01 d0             \tadd    %rdx,%rax\n  435efb:\t8b 00                \tmov    (%rax),%eax\n  435efd:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n  435f00:\t0f 84 b5 00 00 00    \tje     435fbb <int_array_add_unique+0xec>\n  435f06:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  435f0a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  435f0e:\t48 8b 00             \tmov    (%rax),%rax\n  435f11:\t48 85 c0             \ttest   %rax,%rax\n  435f14:\t74 1a                \tje     435f30 <int_array_add_unique+0x61>\n  435f16:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  435f1a:\t48 8b 00             \tmov    (%rax),%rax\n  435f1d:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  435f20:\t48 63 d2             \tmovslq %edx,%rdx\n  435f23:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  435f27:\t48 01 d0             \tadd    %rdx,%rax\n  435f2a:\t8b 00                \tmov    (%rax),%eax\n  435f2c:\t85 c0                \ttest   %eax,%eax\n  435f2e:\t75 b7                \tjne    435ee7 <int_array_add_unique+0x18>\n  435f30:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  435f33:\t83 c0 02             \tadd    $0x2,%eax\n  435f36:\t48 63 c8             \tmovslq %eax,%rcx\n  435f39:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  435f3d:\t48 8b 00             \tmov    (%rax),%rax\n  435f40:\tba 04 00 00 00       \tmov    $0x4,%edx\n  435f45:\t48 89 ce             \tmov    %rcx,%rsi\n  435f48:\t48 89 c7             \tmov    %rax,%rdi\n  435f4b:\te8 41 e5 ff ff       \tcallq  434491 <os_realloc_array>\n  435f50:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  435f54:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  435f59:\t75 1c                \tjne    435f77 <int_array_add_unique+0xa8>\n  435f5b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  435f5f:\t48 8b 00             \tmov    (%rax),%rax\n  435f62:\t48 89 c7             \tmov    %rax,%rdi\n  435f65:\te8 e6 e4 fc ff       \tcallq  404450 <free@plt>\n  435f6a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  435f6e:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  435f75:\teb 45                \tjmp    435fbc <int_array_add_unique+0xed>\n  435f77:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  435f7a:\t48 98                \tcltq   \n  435f7c:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  435f83:\t00 \n  435f84:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  435f88:\t48 01 c2             \tadd    %rax,%rdx\n  435f8b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  435f8e:\t89 02                \tmov    %eax,(%rdx)\n  435f90:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  435f93:\t48 98                \tcltq   \n  435f95:\t48 83 c0 01          \tadd    $0x1,%rax\n  435f99:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  435fa0:\t00 \n  435fa1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  435fa5:\t48 01 d0             \tadd    %rdx,%rax\n  435fa8:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  435fae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  435fb2:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  435fb6:\t48 89 10             \tmov    %rdx,(%rax)\n  435fb9:\teb 01                \tjmp    435fbc <int_array_add_unique+0xed>\n  435fbb:\t90                   \tnop\n  435fbc:\tc9                   \tleaveq \n  435fbd:\tc3                   \tretq   ", "code_s": "void **__fastcall int_array_add_unique(void **a1, int a2) {\n  void **result;\n  _DWORD *v3;\n  int i;\n  for (i = Number; *a1 && *((_DWORD *)*a1 + i); ++i) {\n    result = (void **)*((unsigned int *)*a1 + i);\n    if (a2 == (_DWORD)result)\n      return result;\n  }\n  v3 = os_realloc_array_4(*a1, i + Number, Number);\n  if (v3) {\n    v3[i] = a2;\n    v3[i + Number] = Number;\n    result = a1;\n    *a1 = v3;\n  } else {\n    free(*a1);\n    result = a1;\n    *a1 = Number L;\n  }\n  return result;\n}", "code_t": "void __cdecl int_array_add_unique(int **res, int a) {\n  int *n;\n  int reslen;\n  for (reslen = Number; *res && (*res)[reslen]; ++reslen) {\n    if (a == (*res)[reslen])\n      return;\n  }\n  n = (int *)os_realloc_array_4(*res, reslen + Number, Number);\n  if (n) {\n    n[reslen] = a;\n    n[reslen + Number] = Number;\n    *res = n;\n  } else {\n    free(*res);\n    *res = Number L;\n  }\n}", "var": [], "body_in_train": false}, {"repo_owner": "sqs", "repo_name": "nss", "path": "sqs/nss/f36a3fca0d3c498d278f8e74fffe70b0e4ade3e9438812b4a4d59cd8d07aa34f", "path_in_repo": "sqs/nss/mozilla/security/coreconf/nsinstall/Linux4.4_cc_DBG.OBJ/nsinstall", "objdump": "", "code_s": "char *strdup(const char *s) { return strdup(s); }", "code_t": "char *strdup(const char *s) { return strdup(s); }", "var": [], "body_in_train": true}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "000000000000e597 <glGenFramebuffersEXT>:\n    e597:\t55                   \tpush   %rbp\n    e598:\t48 89 e5             \tmov    %rsp,%rbp\n    e59b:\t48 83 ec 10          \tsub    $0x10,%rsp\n    e59f:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    e5a2:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    e5a6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e5ad <glGenFramebuffersEXT+0x16>\n    e5ad:\t48 8b 88 68 1a 00 00 \tmov    0x1a68(%rax),%rcx\n    e5b4:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    e5b8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    e5bb:\t48 89 d6             \tmov    %rdx,%rsi\n    e5be:\t89 c7                \tmov    %eax,%edi\n    e5c0:\tff d1                \tcallq  *%rcx\n    e5c2:\t90                   \tnop\n    e5c3:\tc9                   \tleaveq \n    e5c4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glGenFramebuffersEXT(unsigned int a1, __int64 a2) {\n  return (*(__int64(__fastcall **)(_QWORD, __int64))(glapi_Dispatch +\n                                                     Number L))(a1, a2);\n}", "code_t": "void __cdecl glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers) {\n  (*(void(__fastcall **)(_QWORD, GLuint *))(glapi_Dispatch + Number L))(\n      (unsigned int)n, framebuffers);\n}", "var": [], "body_in_train": false}, {"repo_owner": "zheolong", "repo_name": "gapso-rbf-pid", "path": "zheolong/gapso-rbf-pid/cfc1c60efbdd96a4d25828af47cfd68a67ac142bdc19f34bc1fe369349a73df2", "path_in_repo": "zheolong/gapso-rbf-pid/iproute2-3.1.0/tc/f_flow.o", "objdump": "000000000000016b <get_addend>:\n     16b:\t55                   \tpush   %rbp\n     16c:\t48 89 e5             \tmov    %rsp,%rbp\n     16f:\t48 83 ec 60          \tsub    $0x60,%rsp\n     173:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     177:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     17b:\t89 55 ac             \tmov    %edx,-0x54(%rbp)\n     17e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     185:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     189:\t0f b6 00             \tmovzbl (%rax),%eax\n     18c:\t3c 2d                \tcmp    $0x2d,%al\n     18e:\t75 0c                \tjne    19c <get_addend+0x31>\n     190:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n     197:\t48 83 45 b0 01       \taddq   $0x1,-0x50(%rbp)\n     19c:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n     1a0:\t48 8d 45 cc          \tlea    -0x34(%rbp),%rax\n     1a4:\tba 00 00 00 00       \tmov    $0x0,%edx\n     1a9:\t48 89 ce             \tmov    %rcx,%rsi\n     1ac:\t48 89 c7             \tmov    %rax,%rdi\n     1af:\te8 00 00 00 00       \tcallq  1b4 <get_addend+0x49>\n     1b4:\t85 c0                \ttest   %eax,%eax\n     1b6:\t74 5e                \tje     216 <get_addend+0xab>\n     1b8:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n     1bb:\t83 e0 0b             \tand    $0xb,%eax\n     1be:\t85 c0                \ttest   %eax,%eax\n     1c0:\t74 4d                \tje     20f <get_addend+0xa4>\n     1c2:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n     1c6:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     1ca:\tba 00 00 00 00       \tmov    $0x0,%edx\n     1cf:\t48 89 ce             \tmov    %rcx,%rsi\n     1d2:\t48 89 c7             \tmov    %rax,%rdi\n     1d5:\te8 00 00 00 00       \tcallq  1da <get_addend+0x6f>\n     1da:\t85 c0                \ttest   %eax,%eax\n     1dc:\t75 31                \tjne    20f <get_addend+0xa4>\n     1de:\t0f b6 45 d0          \tmovzbl -0x30(%rbp),%eax\n     1e2:\t0f b6 c0             \tmovzbl %al,%eax\n     1e5:\t83 f8 02             \tcmp    $0x2,%eax\n     1e8:\t74 07                \tje     1f1 <get_addend+0x86>\n     1ea:\t83 f8 0a             \tcmp    $0xa,%eax\n     1ed:\t74 11                \tje     200 <get_addend+0x95>\n     1ef:\teb 1e                \tjmp    20f <get_addend+0xa4>\n     1f1:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     1f4:\t89 c7                \tmov    %eax,%edi\n     1f6:\te8 00 00 00 00       \tcallq  1fb <get_addend+0x90>\n     1fb:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n     1fe:\teb 17                \tjmp    217 <get_addend+0xac>\n     200:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     203:\t89 c7                \tmov    %eax,%edi\n     205:\te8 00 00 00 00       \tcallq  20a <get_addend+0x9f>\n     20a:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n     20d:\teb 08                \tjmp    217 <get_addend+0xac>\n     20f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     214:\teb 1d                \tjmp    233 <get_addend+0xc8>\n     216:\t90                   \tnop\n     217:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     21b:\t74 08                \tje     225 <get_addend+0xba>\n     21d:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     220:\tf7 d8                \tneg    %eax\n     222:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n     225:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     228:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     22c:\t89 10                \tmov    %edx,(%rax)\n     22e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     233:\tc9                   \tleaveq \n     234:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_addend(uint32_t *a1, _BYTE *a2, char a3) {\n  _BYTE *v5;\n  uint32_t v6;\n  char <span class=\"supfact\">v7</span>[Number];\n  uint32_t netlong;\n  uint32_t v9;\n  int v10;\n  v5 = a2;\n  v10 = Number;\n  if (*a2 == Number) {\n    v10 = Number;\n    v5 = a2 + Number;\n  }\n  if ((unsigned int)get_u32(&v6, v5, Number L)) {\n    if ((a3 & Number) == Number ||\n        (unsigned int)get_addr(<span class=\"supfact\">v7</span>, v5, Number L))\n      return Number;\n    if (<span class=\"supfact\">v7</span>[Number] == Number) {\n      v6 = ntohl(netlong);\n    } else {\n      if (<span class=\"supfact\">v7</span>[Number] != Number)\n        return Number;\n      v6 = ntohl(v9);\n    }\n  }\n  if (v10)\n    v6 = -v6;\n  *a1 = v6;\n  return Number L;\n}", "code_t": "int __cdecl get_addend(__u32 *addend, char *argv, __u32 keys) {\n  char keysa;\n  char *argva;\n  __u32 tmp;\n  inet_prefix <span class=\"supfact\">addr</span>;\n  int sign;\n  argva = argv;\n  keysa = keys;\n  sign = Number;\n  if (*argv == Number) {\n    sign = Number;\n    argva = argv + Number;\n  }\n  if ((unsigned int)get_u32(&tmp, argva, Number L)) {\n    if ((keysa & Number) == Number ||\n        (unsigned int)get_addr(&<span class=\"supfact\">addr</span>, argva, Number L))\n      return Number;\n    if (<span class=\"supfact\">addr</span>.family == Number) {\n      tmp = ntohl(<span class=\"supfact\">addr</span>.data[Number]);\n    } else {\n      if (<span class=\"supfact\">addr</span>.family != Number)\n        return Number;\n      tmp = ntohl(<span class=\"supfact\">addr</span>.data[Number]);\n    }\n  }\n  if (sign)\n    tmp = -tmp;\n  *addend = tmp;\n  return Number;\n}", "var": [{"name": "v7", "type": "char[8]", "pred_name": "addr", "ref_name": "addr", "ref_type": "struct inet_prefix { __u8 family; __u8 bytelen; __s16 bitlen; __u32 flags; __u32[8] data; }"}], "body_in_train": false}, {"repo_owner": "UberGames", "repo_name": "rpgxEF", "path": "UberGames/rpgxEF/f3ff0faba8033d1dcfd4af79f2a12a89007f5d1dc9f7e55953e888bf249a072c", "path_in_repo": "UberGames/rpgxEF//build/release-linux-x86_64/rpgxEF/game/ldblib.o", "objdump": "0000000000000eb0 <unmakemask>:\n     eb0:\t89 7c 24 ec          \tmov    %edi,-0x14(%rsp)\n     eb4:\t48 89 74 24 e0       \tmov    %rsi,-0x20(%rsp)\n     eb9:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n     ec0:\t00 \n     ec1:\t8b 44 24 ec          \tmov    -0x14(%rsp),%eax\n     ec5:\t83 e0 01             \tand    $0x1,%eax\n     ec8:\t85 c0                \ttest   %eax,%eax\n     eca:\t74 19                \tje     ee5 <unmakemask+0x35>\n     ecc:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     ed0:\t8d 50 01             \tlea    0x1(%rax),%edx\n     ed3:\t89 54 24 fc          \tmov    %edx,-0x4(%rsp)\n     ed7:\t48 63 d0             \tmovslq %eax,%rdx\n     eda:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n     edf:\t48 01 d0             \tadd    %rdx,%rax\n     ee2:\tc6 00 63             \tmovb   $0x63,(%rax)\n     ee5:\t8b 44 24 ec          \tmov    -0x14(%rsp),%eax\n     ee9:\t83 e0 02             \tand    $0x2,%eax\n     eec:\t85 c0                \ttest   %eax,%eax\n     eee:\t74 19                \tje     f09 <unmakemask+0x59>\n     ef0:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     ef4:\t8d 50 01             \tlea    0x1(%rax),%edx\n     ef7:\t89 54 24 fc          \tmov    %edx,-0x4(%rsp)\n     efb:\t48 63 d0             \tmovslq %eax,%rdx\n     efe:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n     f03:\t48 01 d0             \tadd    %rdx,%rax\n     f06:\tc6 00 72             \tmovb   $0x72,(%rax)\n     f09:\t8b 44 24 ec          \tmov    -0x14(%rsp),%eax\n     f0d:\t83 e0 04             \tand    $0x4,%eax\n     f10:\t85 c0                \ttest   %eax,%eax\n     f12:\t74 19                \tje     f2d <unmakemask+0x7d>\n     f14:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     f18:\t8d 50 01             \tlea    0x1(%rax),%edx\n     f1b:\t89 54 24 fc          \tmov    %edx,-0x4(%rsp)\n     f1f:\t48 63 d0             \tmovslq %eax,%rdx\n     f22:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n     f27:\t48 01 d0             \tadd    %rdx,%rax\n     f2a:\tc6 00 6c             \tmovb   $0x6c,(%rax)\n     f2d:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     f31:\t48 63 d0             \tmovslq %eax,%rdx\n     f34:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n     f39:\t48 01 d0             \tadd    %rdx,%rax\n     f3c:\tc6 00 00             \tmovb   $0x0,(%rax)\n     f3f:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n     f44:\tc3                   \tretq   \n     f45:\t90                   \tnop", "code_s": "_BYTE *__fastcall unmakemask(char a1, _BYTE *a2) {\n  int v2;\n  int v3;\n  int v5;\n  v5 = Number;\n  if ((a1 & Number) != Number) {\n    v5 = Number;\n    *a2 = Number;\n  }\n  if ((a1 & Number) != Number) {\n    v2 = v5++;\n    a2[v2] = Number;\n  }\n  if ((a1 & Number) != Number) {\n    v3 = v5++;\n    a2[v3] = Number;\n  }\n  a2[v5] = Number;\n  return a2;\n}", "code_t": "char *__cdecl unmakemask(int mask, char *smask) {\n  int v2;\n  int v3;\n  int i;\n  i = Number;\n  if ((mask & Number) != Number) {\n    i = Number;\n    *smask = Number;\n  }\n  if ((mask & Number) != Number) {\n    v2 = i++;\n    smask[v2] = Number;\n  }\n  if ((mask & Number) != Number) {\n    v3 = i++;\n    smask[v3] = Number;\n  }\n  smask[i] = Number;\n  return smask;\n}", "var": [], "body_in_train": true}, {"repo_owner": "vmware", "repo_name": "likewise-open", "path": "vmware/likewise-open/804f97446220d375cafe88a3f03f0efdb56bc424111ec325b5a425780dd49d85", "path_in_repo": "vmware/likewise-open/openssl/test/dhtest", "objdump": "0000000000416536 <dh_init>:\n  416536:\t55                   \tpush   %rbp\n  416537:\t48 89 e5             \tmov    %rsp,%rbp\n  41653a:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  41653e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  416542:\t8b 40 30             \tmov    0x30(%rax),%eax\n  416545:\t83 c8 01             \tor     $0x1,%eax\n  416548:\t89 c2                \tmov    %eax,%edx\n  41654a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41654e:\t89 50 30             \tmov    %edx,0x30(%rax)\n  416551:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  416556:\t5d                   \tpop    %rbp\n  416557:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dh_init(__int64 a1) {\n  *(_DWORD *)(a1 + Number) |= Number;\n  return Number L;\n}", "code_t": "int __cdecl dh_init(DH *dh_0) {\n  dh_0->flags |= Number;\n  return Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "mDibyo", "repo_name": "py-dlib", "path": "mDibyo/py-dlib/2fa2177e5c70c6dd2530f6bfdee1cc921b3de9e5d513af3ae7a1dcf1683890fa", "path_in_repo": "mDibyo/py-dlib/dlib/test/sammon.o", "objdump": "0000000000000000 <_ZNK4dlib10matrix_expINS_19matrix_multiply_expINS_6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEES6_EEE2ncEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  10:\t48 89 c7             \tmov    %rax,%rdi\n  13:\te8 00 00 00 00       \tcallq  18 <_ZNK4dlib10matrix_expINS_19matrix_multiply_expINS_6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEES6_EEE2ncEv+0x18>\n  18:\t48 89 c7             \tmov    %rax,%rdi\n  1b:\te8 00 00 00 00       \tcallq  20 <_ZNK4dlib10matrix_expINS_19matrix_multiply_expINS_6matrixIdLl0ELl0ENS_33memory_manager_stateless_kernel_1IcEENS_16row_major_layoutEEES6_EEE2ncEv+0x20>\n  20:\tc9                   \tleaveq \n  21:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dlib matrix_exp<dlib matrix_multiply_exp<\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout>,\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout>>>\nnc(__int64 a1) {\n  __int64 v1;\n  v1 = dlib matrix_exp<dlib matrix_multiply_exp<\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout>,\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout>>>\n      ref(a1);\n  return dlib get_nc_helper<\n      dlib matrix_multiply_exp<\n          dlib matrix<double, Number, Number,\n                      dlib memory_manager_stateless_kernel_1<char>,\n                      dlib row_major_layout>,\n          dlib matrix<double, Number, Number,\n                      dlib memory_manager_stateless_kernel_1<char>,\n                      dlib row_major_layout>>,\n      Number>\n      get(v1);\n}", "code_t": "__int64 __cdecl dlib matrix_exp<dlib matrix_multiply_exp<\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout>,\n    dlib matrix<double, Number, Number,\n                dlib memory_manager_stateless_kernel_1<char>,\n                dlib row_major_layout>>>\nnc(const dlib matrix_exp<dlib matrix_multiply_exp<\n       dlib matrix<double, Number, Number,\n                   dlib memory_manager_stateless_kernel_1<char>,\n                   dlib row_major_layout>,\n       dlib matrix<double, Number, Number,\n                   dlib memory_manager_stateless_kernel_1<char>,\n                   dlib row_major_layout>>> *const this) {\n  const dlib matrix_exp<dlib matrix_multiply_exp<\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout>,\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout>>>\n      exp_type *v1;\n  v1 = dlib matrix_exp<dlib matrix_multiply_exp<\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout>,\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout>>>\n      ref(this);\n  return dlib get_nc_helper<\n      dlib matrix_multiply_exp<\n          dlib matrix<double, Number, Number,\n                      dlib memory_manager_stateless_kernel_1<char>,\n                      dlib row_major_layout>,\n          dlib matrix<double, Number, Number,\n                      dlib memory_manager_stateless_kernel_1<char>,\n                      dlib row_major_layout>>,\n      Number>\n      get(v1);\n}", "var": [], "body_in_train": true}, {"repo_owner": "lizhengxian1991", "repo_name": "HelloFFmpeg", "path": "lizhengxian1991/HelloFFmpeg/8165cc39d47395297451cb06846d7c2b756245ce2e0434685a7d1793a9dbd603", "path_in_repo": "lizhengxian1991/HelloFFmpeg/ffmpeg-android/libavfilter/af_amerge.o", "objdump": "0000000000000086 <ff_bufqueue_is_full>:\n      86:\t48 89 7c 24 f8       \tmov    %rdi,-0x8(%rsp)\n      8b:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n      90:\t0f b7 80 02 01 00 00 \tmovzwl 0x102(%rax),%eax\n      97:\t66 83 f8 20          \tcmp    $0x20,%ax\n      9b:\t0f 94 c0             \tsete   %al\n      9e:\t0f b6 c0             \tmovzbl %al,%eax\n      a1:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall ff_bufqueue_is_full(__int64 a1) {\n  return *(_WORD *)(a1 + Number) == Number;\n}", "code_t": "int __cdecl ff_bufqueue_is_full(FFBufQueue *queue) {\n  return queue->available == Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "lspss9950101", "repo_name": "Database_Course", "path": "lspss9950101/Database_Course/1f0f8d1a998134055c126d9a7f529efb3400589b0957b303bbfab3d24cb9e0bb", "path_in_repo": "lspss9950101/Database_Course/HW3_sad/0716020/shell", "objdump": "", "code_s": "int __xstat(int ver, const char *filename,\n            struct stat *<span class=\"supfact\">stat_buf</span>) {\n  return _xstat(ver, filename, <span class=\"supfact\">stat_buf</span>);\n}", "code_t": "int __xstat(int ver, const char *filename,\n            struct stat *<span class=\"supfact\">stat_buf</span>) {\n  return _xstat(ver, filename, <span class=\"supfact\">stat_buf</span>);\n}", "var": [{"name": "stat_buf", "type": "struct stat *", "pred_name": "stat_buf", "ref_name": "stat_buf", "ref_type": "struct stat *"}], "body_in_train": true}, {"repo_owner": "xurubin", "repo_name": "wl530g-mini", "path": "xurubin/wl530g-mini/cbf1f1aaf82fc3d58684c8f62d8ad5cb42060d9d3b81017e222910243ad073f0", "path_in_repo": "xurubin/wl530g-mini/Src/uClinux-dist/user/wget/src/wget", "objdump": "000000000041c8ad <unique_name_1>:\n  41c8ad:\t55                   \tpush   %rbp\n  41c8ae:\t48 89 e5             \tmov    %rsp,%rbp\n  41c8b1:\t53                   \tpush   %rbx\n  41c8b2:\t48 83 ec 28          \tsub    $0x28,%rsp\n  41c8b6:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  41c8ba:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  41c8bd:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n  41c8c1:\t74 50                \tje     41c913 <unique_name_1+0x66>\n  41c8c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41c8c7:\t48 89 c7             \tmov    %rax,%rdi\n  41c8ca:\te8 01 59 fe ff       \tcallq  4021d0 <strlen@plt>\n  41c8cf:\t48 89 c3             \tmov    %rax,%rbx\n  41c8d2:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  41c8d5:\t48 98                \tcltq   \n  41c8d7:\t48 89 c7             \tmov    %rax,%rdi\n  41c8da:\te8 fa 0d 00 00       \tcallq  41d6d9 <numdigit>\n  41c8df:\t48 98                \tcltq   \n  41c8e1:\t48 01 d8             \tadd    %rbx,%rax\n  41c8e4:\t48 83 c0 02          \tadd    $0x2,%rax\n  41c8e8:\t48 89 c7             \tmov    %rax,%rdi\n  41c8eb:\te8 c1 f6 ff ff       \tcallq  41bfb1 <xmalloc>\n  41c8f0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  41c8f4:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n  41c8f7:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  41c8fb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41c8ff:\tbe 0b 2e 42 00       \tmov    $0x422e0b,%esi\n  41c904:\t48 89 c7             \tmov    %rax,%rdi\n  41c907:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c90c:\te8 3f 5c fe ff       \tcallq  402550 <sprintf@plt>\n  41c911:\teb 10                \tjmp    41c923 <unique_name_1+0x76>\n  41c913:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41c917:\t48 89 c7             \tmov    %rax,%rdi\n  41c91a:\te8 1c f7 ff ff       \tcallq  41c03b <xstrdup>\n  41c91f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  41c923:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41c927:\t48 89 c7             \tmov    %rax,%rdi\n  41c92a:\te8 0c ff ff ff       \tcallq  41c83b <file_exists_p>\n  41c92f:\t85 c0                \ttest   %eax,%eax\n  41c931:\t75 06                \tjne    41c939 <unique_name_1+0x8c>\n  41c933:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41c937:\teb 11                \tjmp    41c94a <unique_name_1+0x9d>\n  41c939:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41c93d:\t48 89 c7             \tmov    %rax,%rdi\n  41c940:\te8 0b 57 fe ff       \tcallq  402050 <free@plt>\n  41c945:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c94a:\t48 83 c4 28          \tadd    $0x28,%rsp\n  41c94e:\t5b                   \tpop    %rbx\n  41c94f:\t5d                   \tpop    %rbp\n  41c950:\tc3                   \tretq   ", "code_s": "char *__fastcall unique_name_1(const char *a1, __int64 a2) {\n  size_t v2;\n  int v3;\n  char *v5;\n  if ((_DWORD)a2) {\n    v2 = strlen(a1);\n    v3 = numdigit((int)a2);\n    v5 = (char *)xmalloc(v2 + v3 + Number, a2);\n    sprintf(v5, String, a1, (unsigned int)a2);\n  } else {\n    v5 = xstrdup(a1, a2);\n  }\n  if (!file_exists_p(v5))\n    return v5;\n  free(v5);\n  return Number L;\n}", "code_t": "char *__cdecl unique_name_1(const char *fileprefix, int count) {\n  size_t v2;\n  int v3;\n  char *filename;\n  if (count) {\n    v2 = strlen(fileprefix);\n    v3 = numdigit(count);\n    filename = (char *)xmalloc(v2 + v3 + Number);\n    sprintf(filename, String, fileprefix, (unsigned int)count);\n  } else {\n    filename = xstrdup(fileprefix);\n  }\n  if (!file_exists_p(filename))\n    return filename;\n  free(filename);\n  return Number L;\n}", "var": [], "body_in_train": false}, {"repo_owner": "Panopto", "repo_name": "panopto-ffmpeg", "path": "Panopto/panopto-ffmpeg/50bbd19dcf23557bec66d7a3f9a8955269ca223089c67edab6e912f8fb47a68a", "path_in_repo": "Panopto/panopto-ffmpeg//libavcodec/eatgq.o", "objdump": "00000000000001d1 <skip_bits>:\n     1d1:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n     1d6:\t89 74 24 e4          \tmov    %esi,-0x1c(%rsp)\n     1da:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     1df:\t8b 40 10             \tmov    0x10(%rax),%eax\n     1e2:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n     1e6:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     1eb:\t8b 40 18             \tmov    0x18(%rax),%eax\n     1ee:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n     1f2:\t8b 54 24 e4          \tmov    -0x1c(%rsp),%edx\n     1f6:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     1fa:\t01 d0                \tadd    %edx,%eax\n     1fc:\t39 44 24 f8          \tcmp    %eax,-0x8(%rsp)\n     200:\t0f 46 44 24 f8       \tcmovbe -0x8(%rsp),%eax\n     205:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n     209:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n     20d:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     212:\t89 50 10             \tmov    %edx,0x10(%rax)\n     215:\t90                   \tnop\n     216:\tc3                   \tretq   ", "code_s": "__int64 __fastcall skip_bits(__int64 a1, int a2) {\n  unsigned int v2;\n  unsigned int v3;\n  __int64 result;\n  v2 = a2 + *(_DWORD *)(a1 + Number);\n  if (*(_DWORD *)(a1 + Number) <= v2)\n    v2 = *(_DWORD *)(a1 + Number);\n  v3 = v2;\n  result = a1;\n  *(_DWORD *)(a1 + Number) = v3;\n  return result;\n}", "code_t": "void __cdecl skip_bits(GetBitContext_0 *s, int n) {\n  unsigned int v2;\n  v2 = n + s->index;\n  if (s->size_in_bits_plus8 <= v2)\n    v2 = s->size_in_bits_plus8;\n  s->index = v2;\n}", "var": [], "body_in_train": true}, {"repo_owner": "andrey-utkin", "repo_name": "ffmpeg", "path": "andrey-utkin/ffmpeg/cf8055254a90631c23d26e51c92bbf528881911be9fa4e7ca5684bbeb9a04206", "path_in_repo": "andrey-utkin/ffmpeg//libavformat/rpl.o", "objdump": "00000000000001d2 <read_fps>:\n 1d2:\t48 83 ec 38          \tsub    $0x38,%rsp\n 1d6:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n 1db:\t48 89 34 24          \tmov    %rsi,(%rsp)\n 1df:\t48 c7 44 24 20 01 00 \tmovq   $0x1,0x20(%rsp)\n 1e6:\t00 00 \n 1e8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 1ed:\t48 8b 14 24          \tmov    (%rsp),%rdx\n 1f1:\t48 8d 4c 24 08       \tlea    0x8(%rsp),%rcx\n 1f6:\t48 89 ce             \tmov    %rcx,%rsi\n 1f9:\t48 89 c7             \tmov    %rax,%rdi\n 1fc:\te8 ea fe ff ff       \tcallq  eb <read_int>\n 201:\t48 98                \tcltq   \n 203:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n 208:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 20d:\t0f b6 00             \tmovzbl (%rax),%eax\n 210:\t3c 2e                \tcmp    $0x2e,%al\n 212:\t0f 85 84 00 00 00    \tjne    29c <read_fps+0xca>\n 218:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 21d:\t48 83 c0 01          \tadd    $0x1,%rax\n 221:\t48 89 44 24 08       \tmov    %rax,0x8(%rsp)\n 226:\teb 74                \tjmp    29c <read_fps+0xca>\n 228:\t48 b8 cb cc cc cc cc \tmovabs $0xccccccccccccccb,%rax\n 22f:\tcc cc 0c \n 232:\t48 39 44 24 28       \tcmp    %rax,0x28(%rsp)\n 237:\t7f 7f                \tjg     2b8 <read_fps+0xe6>\n 239:\t48 b8 cc cc cc cc cc \tmovabs $0xccccccccccccccc,%rax\n 240:\tcc cc 0c \n 243:\t48 39 44 24 20       \tcmp    %rax,0x20(%rsp)\n 248:\t7f 6e                \tjg     2b8 <read_fps+0xe6>\n 24a:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n 24f:\t48 89 d0             \tmov    %rdx,%rax\n 252:\t48 c1 e0 02          \tshl    $0x2,%rax\n 256:\t48 01 d0             \tadd    %rdx,%rax\n 259:\t48 01 c0             \tadd    %rax,%rax\n 25c:\t48 89 c2             \tmov    %rax,%rdx\n 25f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 264:\t0f b6 00             \tmovzbl (%rax),%eax\n 267:\t48 0f be c0          \tmovsbq %al,%rax\n 26b:\t48 01 d0             \tadd    %rdx,%rax\n 26e:\t48 83 e8 30          \tsub    $0x30,%rax\n 272:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n 277:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n 27c:\t48 89 d0             \tmov    %rdx,%rax\n 27f:\t48 c1 e0 02          \tshl    $0x2,%rax\n 283:\t48 01 d0             \tadd    %rdx,%rax\n 286:\t48 01 c0             \tadd    %rax,%rax\n 289:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n 28e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 293:\t48 83 c0 01          \tadd    $0x1,%rax\n 297:\t48 89 44 24 08       \tmov    %rax,0x8(%rsp)\n 29c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 2a1:\t0f b6 00             \tmovzbl (%rax),%eax\n 2a4:\t3c 2f                \tcmp    $0x2f,%al\n 2a6:\t7e 10                \tjle    2b8 <read_fps+0xe6>\n 2a8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 2ad:\t0f b6 00             \tmovzbl (%rax),%eax\n 2b0:\t3c 39                \tcmp    $0x39,%al\n 2b2:\t0f 8e 70 ff ff ff    \tjle    228 <read_fps+0x56>\n 2b8:\t48 83 7c 24 28 00    \tcmpq   $0x0,0x28(%rsp)\n 2be:\t75 0a                \tjne    2ca <read_fps+0xf8>\n 2c0:\t48 8b 04 24          \tmov    (%rsp),%rax\n 2c4:\tc7 00 ff ff ff ff    \tmovl   $0xffffffff,(%rax)\n 2ca:\t48 8b 4c 24 20       \tmov    0x20(%rsp),%rcx\n 2cf:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n 2d4:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n 2d9:\t48 8d 70 04          \tlea    0x4(%rax),%rsi\n 2dd:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n 2e2:\t41 b8 ff ff ff 7f    \tmov    $0x7fffffff,%r8d\n 2e8:\t48 89 c7             \tmov    %rax,%rdi\n 2eb:\te8 00 00 00 00       \tcallq  2f0 <read_fps+0x11e>\n 2f0:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 2f5:\t48 83 c4 38          \tadd    $0x38,%rsp\n 2f9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_fps(char *a1, _DWORD *a2) {\n  char *v3;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 v5;\n  __int64 v6;\n  v3 = a1;\n  v5 = Number L;\n  v6 = (int)read_int(a1, &v3, a2);\n  if (*v3 == Number)\n    ++v3;\n  while (*v3 > Number && *v3 <= Number && v6 <= Number && v5 <= Number) {\n    v6 = Number * v6 + *v3 - Number;\n    v5 *= Number L;\n    ++v3;\n  }\n  if (!v6)\n    *a2 = Number;\n  av_reduce(&<span class=\"supfact\">v4</span>, (char *)&<span class=\"supfact\">v4</span> + Number, v6, v5,\n            Number);\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "AVRational_0 __cdecl read_fps(const char *line, int *error) {\n  const char *linea;\n  AVRational_0 <span class=\"supfact\">result</span>;\n  int64_t den;\n  int64_t num;\n  linea = line;\n  den = Number L;\n  num = read_int(line, &linea, error);\n  if (*linea == Number)\n    ++linea;\n  while (*linea > Number && *linea <= Number && num <= Number &&\n         den <= Number) {\n    num = Number * num + *linea - Number;\n    den *= Number L;\n    ++linea;\n  }\n  if (!num)\n    *error = Number;\n  av_reduce(&<span class=\"supfact\">result</span>, &<span class=\"supfact\">result</span>.den, num, den,\n            Number);\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "v4", "type": "struct AVRational_0 { int num; int den; }", "pred_name": "result", "ref_name": "result", "ref_type": "struct AVRational_0 { int num; int den; }"}], "body_in_train": true}, {"repo_owner": "sensite", "repo_name": "libamplayer-m1", "path": "sensite/libamplayer-m1/b36bb973bd4ee105fa03538a87c7503bf680bf355a9094142f601cea374b819d", "path_in_repo": "sensite/libamplayer-m1/amffmpeg/libavcodec/x86/dsputil_mmx.o", "objdump": "00000000000149bd <put_2tap_qpel8_mc01_3dnow>:\n   149bd:\t48 83 ec 18          \tsub    $0x18,%rsp\n   149c1:\t48 89 7c 24 10       \tmov    %rdi,0x10(%rsp)\n   149c6:\t48 89 74 24 08       \tmov    %rsi,0x8(%rsp)\n   149cb:\t89 54 24 04          \tmov    %edx,0x4(%rsp)\n   149cf:\t8b 4c 24 04          \tmov    0x4(%rsp),%ecx\n   149d3:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n   149d7:\t48 8b 74 24 08       \tmov    0x8(%rsp),%rsi\n   149dc:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   149e1:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n   149e7:\t41 89 c8             \tmov    %ecx,%r8d\n   149ea:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   149ef:\t48 89 c7             \tmov    %rax,%rdi\n   149f2:\te8 1f e7 fe ff       \tcallq  3116 <put_2tap_qpel8_l3_3dnow>\n   149f7:\t90                   \tnop\n   149f8:\t48 83 c4 18          \tadd    $0x18,%rsp\n   149fc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall put_2tap_qpel8_mc01_3dnow(__int64 a1, __m64 *a2, int a3) {\n  return put_2tap_qpel8_l3_3dnow(a1, a2, a3, Number, a3, Number);\n}", "code_t": "void __cdecl put_2tap_qpel8_mc01_3dnow(uint8_t *dst, uint8_t *src, int stride) {\n  put_2tap_qpel8_l3_3dnow(dst, src, stride, Number, stride, Number);\n}", "var": [], "body_in_train": true}, {"repo_owner": "Augertron", "repo_name": "magic", "path": "Augertron/magic/0109db1a01be8360248aed460f67d16082874656db54d3682f17c2d8ad51102e", "path_in_repo": "Augertron/magic/utils/undo.o", "objdump": "0000000000000cad <undoPrintBack>:\n cad:\t55                   \tpush   %rbp\n cae:\t48 89 e5             \tmov    %rsp,%rbp\n cb1:\t48 83 ec 20          \tsub    $0x20,%rsp\n cb5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n cb9:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n cbc:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n cc3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cca <undoPrintBack+0x1d>\n cca:\t48 8b 08             \tmov    (%rax),%rcx\n ccd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cd4 <undoPrintBack+0x27>\n cd4:\t48 8b 10             \tmov    (%rax),%rdx\n cd7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cde <undoPrintBack+0x31>\n cde:\t48 8b 00             \tmov    (%rax),%rax\n ce1:\t48 89 c6             \tmov    %rax,%rsi\n ce4:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # ceb <undoPrintBack+0x3e>\n ceb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n cf0:\te8 00 00 00 00       \tcallq  cf5 <undoPrintBack+0x48>\n cf5:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n cfa:\t75 39                \tjne    d35 <undoPrintBack+0x88>\n cfc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d03 <undoPrintBack+0x56>\n d03:\t48 8b 00             \tmov    (%rax),%rax\n d06:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n d0a:\teb 29                \tjmp    d35 <undoPrintBack+0x88>\n d0c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n d10:\t48 89 c7             \tmov    %rax,%rdi\n d13:\tb8 00 00 00 00       \tmov    $0x0,%eax\n d18:\te8 00 00 00 00       \tcallq  d1d <undoPrintBack+0x70>\n d1d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n d21:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n d25:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n d29:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n d2d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n d30:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n d33:\t74 09                \tje     d3e <undoPrintBack+0x91>\n d35:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n d3a:\t75 d0                \tjne    d0c <undoPrintBack+0x5f>\n d3c:\teb 01                \tjmp    d3f <undoPrintBack+0x92>\n d3e:\t90                   \tnop\n d3f:\t90                   \tnop\n d40:\tc9                   \tleaveq \n d41:\tc3                   \tretq   ", "code_s": "__int64 __fastcall undoPrintBack(__int64 a1, int a2) {\n  __int64 result;\n  __int64 v3;\n  int v4;\n  v3 = a1;\n  v4 = Number;\n  result = TxPrintf(String, undoLogHead, undoLogTail, undoLogCur);\n  if (!a1) {\n    result = undoLogTail;\n    v3 = undoLogTail;\n  }\n  do {\n    if (!v3)\n      break;\n    undoPrintEvent((int *)v3);\n    v3 = *(_QWORD *)(v3 + Number);\n    result = (unsigned int)++v4;\n  } while (v4 != a2);\n  return result;\n}", "code_t": "void __cdecl undoPrintBack(internalUndoEvent *iup, int n) {\n  internalUndoEvent *iupa;\n  int i;\n  iupa = iup;\n  i = Number;\n  TxPrintf(String, undoLogHead, undoLogTail, undoLogCur);\n  if (!iup)\n    iupa = undoLogTail;\n  do {\n    if (!iupa)\n      break;\n    undoPrintEvent(iupa);\n    iupa = iupa->iue_back;\n    ++i;\n  } while (i != n);\n}", "var": [], "body_in_train": false}, {"repo_owner": "janakj", "repo_name": "git-ccn", "path": "janakj/git-ccn/74feaae3c870253f5e2ecccdf635392116f674c2a82d14091ae3c66d7bfc73e0", "path_in_repo": "janakj/git-ccn//dir.o", "objdump": "00000000000025f8 <is_empty_dir>:\n    25f8:\t55                   \tpush   %rbp\n    25f9:\t48 89 e5             \tmov    %rsp,%rbp\n    25fc:\t48 83 ec 30          \tsub    $0x30,%rsp\n    2600:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    2604:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2608:\t48 89 c7             \tmov    %rax,%rdi\n    260b:\te8 00 00 00 00       \tcallq  2610 <is_empty_dir+0x18>\n    2610:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2614:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n    261b:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    2620:\t75 24                \tjne    2646 <is_empty_dir+0x4e>\n    2622:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2627:\teb 43                \tjmp    266c <is_empty_dir+0x74>\n    2629:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    262d:\t48 83 c0 13          \tadd    $0x13,%rax\n    2631:\t48 89 c7             \tmov    %rax,%rdi\n    2634:\te8 57 db ff ff       \tcallq  190 <is_dot_or_dotdot>\n    2639:\t85 c0                \ttest   %eax,%eax\n    263b:\t75 09                \tjne    2646 <is_empty_dir+0x4e>\n    263d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    2644:\teb 17                \tjmp    265d <is_empty_dir+0x65>\n    2646:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    264a:\t48 89 c7             \tmov    %rax,%rdi\n    264d:\te8 00 00 00 00       \tcallq  2652 <is_empty_dir+0x5a>\n    2652:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2656:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    265b:\t75 cc                \tjne    2629 <is_empty_dir+0x31>\n    265d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2661:\t48 89 c7             \tmov    %rax,%rdi\n    2664:\te8 00 00 00 00       \tcallq  2669 <is_empty_dir+0x71>\n    2669:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    266c:\tc9                   \tleaveq \n    266d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall is_empty_dir(const char *a1) {\n  struct dirent64 *v2;\n  DIR *dirp;\n  unsigned int v4;\n  dirp = opendir(a1);\n  v4 = Number;\n  if (!dirp)\n    return Number L;\n  while (Number) {\n    v2 = readdir64(dirp);\n    if (!v2)\n      break;\n    if (!is_dot_or_dotdot(v2->d_name)) {\n      v4 = Number;\n      break;\n    }\n  }\n  closedir(dirp);\n  return v4;\n}", "code_t": "int __cdecl is_empty_dir(const char *path) {\n  dirent *e;\n  DIR *dir;\n  int ret;\n  dir = opendir(path);\n  ret = Number;\n  if (!dir)\n    return Number;\n  while (Number) {\n    e = (dirent *)readdir64(dir);\n    if (!e)\n      break;\n    if (!is_dot_or_dotdot(e->d_name)) {\n      ret = Number;\n      break;\n    }\n  }\n  closedir(dir);\n  return ret;\n}", "var": [], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/e3dbc0fedb966a1e35486f621cbc4ba6bc7fb785371bea4029dd338eb49f7ef2", "path_in_repo": "XanClic/qemu//s390x-softmmu/hw/net/virtio-net.o", "objdump": "000000000000296c <is_my_primary>:\n    296c:\t55                   \tpush   %rbp\n    296d:\t48 89 e5             \tmov    %rsp,%rbp\n    2970:\t48 83 ec 40          \tsub    $0x40,%rsp\n    2974:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    2978:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    297c:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    2980:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2984:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2988:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    298f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2993:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 299a <is_my_primary+0x2e>\n    299a:\t48 89 c7             \tmov    %rax,%rdi\n    299d:\te8 00 00 00 00       \tcallq  29a2 <is_my_primary+0x36>\n    29a2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    29a6:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    29ab:\t74 42                \tje     29ef <is_my_primary+0x83>\n    29ad:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    29b1:\t48 8b 90 a0 22 00 00 \tmov    0x22a0(%rax),%rdx\n    29b8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    29bc:\t48 89 d6             \tmov    %rdx,%rsi\n    29bf:\t48 89 c7             \tmov    %rax,%rdi\n    29c2:\te8 00 00 00 00       \tcallq  29c7 <is_my_primary+0x5b>\n    29c7:\t85 c0                \ttest   %eax,%eax\n    29c9:\t75 24                \tjne    29ef <is_my_primary+0x83>\n    29cb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    29cf:\t48 8b 00             \tmov    (%rax),%rax\n    29d2:\t48 89 c7             \tmov    %rax,%rdi\n    29d5:\te8 00 00 00 00       \tcallq  29da <is_my_primary+0x6e>\n    29da:\t48 89 c2             \tmov    %rax,%rdx\n    29dd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    29e1:\t48 89 90 38 23 00 00 \tmov    %rdx,0x2338(%rax)\n    29e8:\tc7 45 ec 01 00 00 00 \tmovl   $0x1,-0x14(%rbp)\n    29ef:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    29f2:\tc9                   \tleaveq \n    29f3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall is_my_primary(__int64 a1, _QWORD *a2) {\n  unsigned int v3;\n  __int64 v4;\n  v3 = Number;\n  v4 = qemu_opt_get(a2, String);\n  if (v4 && !(unsigned int)g_strcmp0(v4, *(_QWORD *)(a1 + Number))) {\n    *(_QWORD *)(a1 + Number) = g_strdup(*a2);\n    v3 = Number;\n  }\n  return v3;\n}", "code_t": "int __cdecl is_my_primary(void *opaque, QemuOpts_0 *opts, Error_0 **errp) {\n  int ret;\n  const char *standby_id;\n  ret = Number;\n  standby_id = (const char *)qemu_opt_get(opts, String);\n  if (standby_id &&\n      !(unsigned int)g_strcmp0(standby_id, *((_QWORD *)opaque + Number))) {\n    *((_QWORD *)opaque + Number) = g_strdup(opts->id);\n    ret = Number;\n  }\n  return ret;\n}", "var": [], "body_in_train": true}, {"repo_owner": "slwilliams", "repo_name": "stegasis", "path": "slwilliams/stegasis/5ea32af73c76f412fbdd11b32a5ec313f3dbae9cf18bd8a607affda7e86ab53a", "path_in_repo": "slwilliams/stegasis/lib/ffmpeg/libavformat/mmst.o", "objdump": "00000000000007de <pad_media_packet>:\n     7de:\t48 83 ec 28          \tsub    $0x28,%rsp\n     7e2:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     7e7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     7ec:\t8b 90 20 02 01 00    \tmov    0x10220(%rax),%edx\n     7f2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     7f7:\t8b 80 38 02 01 00    \tmov    0x10238(%rax),%eax\n     7fd:\t39 c2                \tcmp    %eax,%edx\n     7ff:\t7d 6d                \tjge    86e <pad_media_packet+0x90>\n     801:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     806:\t8b 90 38 02 01 00    \tmov    0x10238(%rax),%edx\n     80c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     811:\t8b 80 20 02 01 00    \tmov    0x10220(%rax),%eax\n     817:\t29 c2                \tsub    %eax,%edx\n     819:\t89 d0                \tmov    %edx,%eax\n     81b:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n     81f:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     823:\t48 98                \tcltq   \n     825:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n     82a:\t48 8d 8a 18 02 00 00 \tlea    0x218(%rdx),%rcx\n     831:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n     836:\t8b 92 20 02 01 00    \tmov    0x10220(%rdx),%edx\n     83c:\t48 63 d2             \tmovslq %edx,%rdx\n     83f:\t48 01 d1             \tadd    %rdx,%rcx\n     842:\t48 89 c2             \tmov    %rax,%rdx\n     845:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     84a:\t48 89 cf             \tmov    %rcx,%rdi\n     84d:\te8 00 00 00 00       \tcallq  852 <pad_media_packet+0x74>\n     852:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     857:\t8b 90 20 02 01 00    \tmov    0x10220(%rax),%edx\n     85d:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     861:\t01 c2                \tadd    %eax,%edx\n     863:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     868:\t89 90 20 02 01 00    \tmov    %edx,0x10220(%rax)\n     86e:\t90                   \tnop\n     86f:\t48 83 c4 28          \tadd    $0x28,%rsp\n     873:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pad_media_packet(__int64 a1) {\n  __int64 result;\n  int v2;\n  result = *(unsigned int *)(a1 + Number);\n  if (*(_DWORD *)(a1 + Number) < (int)result) {\n    v2 = *(_DWORD *)(a1 + Number) - *(_DWORD *)(a1 + Number);\n    memset((void *)(*(int *)(a1 + Number) + a1 + Number), Number, v2);\n    result = a1;\n    *(_DWORD *)(a1 + Number) += v2;\n  }\n  return result;\n}", "code_t": "void __cdecl pad_media_packet(MMSContext_0 *mms) {\n  int padding_size;\n  if (mms->remaining_in_len < mms->asf_packet_len) {\n    padding_size = mms->asf_packet_len - mms->remaining_in_len;\n    memset(&mms->in_buffer[mms->remaining_in_len], Number, padding_size);\n    mms->remaining_in_len += padding_size;\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/31433cf766b26e41da89f229871135b8835af5ec31025ee51c6c59f7931c203a", "path_in_repo": "XanClic/qemu//s390x-softmmu/tcg/tcg-op-gvec.o", "objdump": "00000000000028ac <gen_helper_gvec_umax64>:\n    28ac:\t55                   \tpush   %rbp\n    28ad:\t48 89 e5             \tmov    %rsp,%rbp\n    28b0:\t48 83 ec 50          \tsub    $0x50,%rsp\n    28b4:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    28b8:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    28bc:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    28c0:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n    28c4:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    28cb:\t00 00 \n    28cd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    28d1:\t31 c0                \txor    %eax,%eax\n    28d3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    28d7:\t48 89 c7             \tmov    %rax,%rdi\n    28da:\te8 16 d9 ff ff       \tcallq  1f5 <tcgv_ptr_temp>\n    28df:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    28e3:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    28e7:\t48 89 c7             \tmov    %rax,%rdi\n    28ea:\te8 06 d9 ff ff       \tcallq  1f5 <tcgv_ptr_temp>\n    28ef:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    28f3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    28f7:\t48 89 c7             \tmov    %rax,%rdi\n    28fa:\te8 f6 d8 ff ff       \tcallq  1f5 <tcgv_ptr_temp>\n    28ff:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    2903:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    2907:\t48 89 c7             \tmov    %rax,%rdi\n    290a:\te8 75 d8 ff ff       \tcallq  184 <tcgv_i32_temp>\n    290f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2913:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    2917:\t48 89 c1             \tmov    %rax,%rcx\n    291a:\tba 04 00 00 00       \tmov    $0x4,%edx\n    291f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2924:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 292b <gen_helper_gvec_umax64+0x7f>\n    292b:\t48 89 c7             \tmov    %rax,%rdi\n    292e:\te8 00 00 00 00       \tcallq  2933 <gen_helper_gvec_umax64+0x87>\n    2933:\t90                   \tnop\n    2934:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2938:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    293f:\t00 00 \n    2941:\t74 05                \tje     2948 <gen_helper_gvec_umax64+0x9c>\n    2943:\te8 00 00 00 00       \tcallq  2948 <gen_helper_gvec_umax64+0x9c>\n    2948:\tc9                   \tleaveq \n    2949:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall gen_helper_gvec_umax64(__int64 a1, __int64 a2,\n                                                   __int64 a3, __int64 a4) {\n  __int64 v7[Number];\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  v7[Number] = tcgv_ptr_temp(a1);\n  v7[Number] = tcgv_ptr_temp(a2);\n  v7[Number] = tcgv_ptr_temp(a3);\n  v7[Number] = tcgv_i32_temp(a4);\n  tcg_gen_callN(&helper_gvec_umax64, Number L, Number L, v7);\n  return __readfsqword(Number) ^ v8;\n}", "code_t": "void __cdecl gen_helper_gvec_umax64(TCGv_ptr arg1, TCGv_ptr arg2, TCGv_ptr arg3,\n                                    TCGv_i32 arg4) {\n  TCGTemp_0 *args[Number];\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  args[Number] = tcgv_ptr_temp(arg1);\n  args[Number] = tcgv_ptr_temp(arg2);\n  args[Number] = tcgv_ptr_temp(arg3);\n  args[Number] = tcgv_i32_temp(arg4);\n  tcg_gen_callN(&helper_gvec_umax64, Number L, Number L, args);\n}", "var": [], "body_in_train": true}, {"repo_owner": "sensite", "repo_name": "libamplayer-m1", "path": "sensite/libamplayer-m1/b36bb973bd4ee105fa03538a87c7503bf680bf355a9094142f601cea374b819d", "path_in_repo": "sensite/libamplayer-m1/amffmpeg/libavcodec/x86/dsputil_mmx.o", "objdump": "00000000000202b2 <avg_h264_qpel16_mc21_3dnow>:\n   202b2:\t48 81 ec 28 04 00 00 \tsub    $0x428,%rsp\n   202b9:\t48 89 7c 24 10       \tmov    %rdi,0x10(%rsp)\n   202be:\t48 89 74 24 08       \tmov    %rsi,0x8(%rsp)\n   202c3:\t89 54 24 04          \tmov    %edx,0x4(%rsp)\n   202c7:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n   202cc:\t48 89 84 24 20 04 00 \tmov    %rax,0x420(%rsp)\n   202d3:\t00 \n   202d4:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n   202d9:\t48 05 00 01 00 00    \tadd    $0x100,%rax\n   202df:\t48 89 84 24 18 04 00 \tmov    %rax,0x418(%rsp)\n   202e6:\t00 \n   202e7:\t8b 4c 24 04          \tmov    0x4(%rsp),%ecx\n   202eb:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n   202f0:\t48 8b b4 24 18 04 00 \tmov    0x418(%rsp),%rsi\n   202f7:\t00 \n   202f8:\t48 8b 84 24 20 04 00 \tmov    0x420(%rsp),%rax\n   202ff:\t00 \n   20300:\t41 89 c9             \tmov    %ecx,%r9d\n   20303:\t41 b8 10 00 00 00    \tmov    $0x10,%r8d\n   20309:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n   2030e:\t48 89 c7             \tmov    %rax,%rdi\n   20311:\te8 7c 68 ff ff       \tcallq  16b92 <put_h264_qpel16_hv_lowpass_3dnow>\n   20316:\t8b 4c 24 04          \tmov    0x4(%rsp),%ecx\n   2031a:\t48 8b 94 24 20 04 00 \tmov    0x420(%rsp),%rdx\n   20321:\t00 \n   20322:\t48 8b 74 24 08       \tmov    0x8(%rsp),%rsi\n   20327:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   2032c:\t41 b8 10 00 00 00    \tmov    $0x10,%r8d\n   20332:\t48 89 c7             \tmov    %rax,%rdi\n   20335:\te8 dc 77 ff ff       \tcallq  17b16 <avg_h264_qpel16_h_lowpass_l2_3dnow>\n   2033a:\t90                   \tnop\n   2033b:\t48 81 c4 28 04 00 00 \tadd    $0x428,%rsp\n   20342:\tc3                   \tretq   ", "code_s": "__int64 __fastcall avg_h264_qpel16_mc21_3dnow(__m64 *a1, __int64 a2, int a3) {\n  __m64 v5[Number];\n  __m64 v6[Number];\n  __m64 *v7;\n  v7 = v5;\n  v6[Number] = (__m64)v6;\n  put_h264_qpel16_hv_lowpass_3dnow(v5, v6, a2, Number, Number, a3);\n  return avg_h264_qpel16_h_lowpass_l2_3dnow(a1, a2, v7, a3, Number);\n}", "code_t": "void __cdecl avg_h264_qpel16_mc21_3dnow(uint8_t *dst, uint8_t *src,\n                                        int stride) {\n  uint8_t temp[Number];\n  int16_t *halfV;\n  uint8_t *halfHV;\n  halfHV = temp;\n  halfV = (int16_t *)&temp[Number];\n  put_h264_qpel16_hv_lowpass_3dnow(temp, (int16_t *)&temp[Number], src, Number,\n                                   Number, stride);\n  avg_h264_qpel16_h_lowpass_l2_3dnow(dst, src, halfHV, stride, Number);\n}", "var": [], "body_in_train": true}, {"repo_owner": "unicorn-engine", "repo_name": "unicorn", "path": "unicorn-engine/unicorn/b53183f7cbbc4ab88ffaa467036529dc8c028722fdc15457026fe6ceb8238d21", "path_in_repo": "unicorn-engine/unicorn//qemu/mipsel-softmmu/target-mips/op_helper.o", "objdump": "000000000000164b <cpu_lduw_user>:\n    164b:\t55                   \tpush   %rbp\n    164c:\t48 89 e5             \tmov    %rsp,%rbp\n    164f:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1653:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1657:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n    165a:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    165d:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    1660:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    1663:\tc1 e8 0c             \tshr    $0xc,%eax\n    1666:\t25 ff 00 00 00       \tand    $0xff,%eax\n    166b:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    166e:\tc7 45 f4 02 00 00 00 \tmovl   $0x2,-0xc(%rbp)\n    1675:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1679:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n    167c:\t48 63 d2             \tmovslq %edx,%rdx\n    167f:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n    1682:\t48 63 c9             \tmovslq %ecx,%rcx\n    1685:\t48 c1 e1 08          \tshl    $0x8,%rcx\n    1689:\t48 01 ca             \tadd    %rcx,%rdx\n    168c:\t48 c1 e2 05          \tshl    $0x5,%rdx\n    1690:\t48 01 d0             \tadd    %rdx,%rax\n    1693:\t48 05 f8 14 00 00    \tadd    $0x14f8,%rax\n    1699:\t8b 00                \tmov    (%rax),%eax\n    169b:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    169e:\t81 e2 01 f0 ff ff    \tand    $0xfffff001,%edx\n    16a4:\t39 d0                \tcmp    %edx,%eax\n    16a6:\t0f 95 c0             \tsetne  %al\n    16a9:\t0f b6 c0             \tmovzbl %al,%eax\n    16ac:\t48 85 c0             \ttest   %rax,%rax\n    16af:\t74 1c                \tje     16cd <cpu_lduw_user+0x82>\n    16b1:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    16b4:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n    16b7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    16bb:\t89 ce                \tmov    %ecx,%esi\n    16bd:\t48 89 c7             \tmov    %rax,%rdi\n    16c0:\te8 00 00 00 00       \tcallq  16c5 <cpu_lduw_user+0x7a>\n    16c5:\t0f b7 c0             \tmovzwl %ax,%eax\n    16c8:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    16cb:\teb 45                \tjmp    1712 <cpu_lduw_user+0xc7>\n    16cd:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    16d0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    16d4:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n    16d7:\t48 63 c9             \tmovslq %ecx,%rcx\n    16da:\t8b 75 f4             \tmov    -0xc(%rbp),%esi\n    16dd:\t48 63 f6             \tmovslq %esi,%rsi\n    16e0:\t48 c1 e6 08          \tshl    $0x8,%rsi\n    16e4:\t48 01 f1             \tadd    %rsi,%rcx\n    16e7:\t48 81 c1 a8 00 00 00 \tadd    $0xa8,%rcx\n    16ee:\t48 c1 e1 05          \tshl    $0x5,%rcx\n    16f2:\t48 01 c8             \tadd    %rcx,%rax\n    16f5:\t48 83 c0 08          \tadd    $0x8,%rax\n    16f9:\t48 8b 00             \tmov    (%rax),%rax\n    16fc:\t48 01 d0             \tadd    %rdx,%rax\n    16ff:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1703:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1707:\t48 89 c7             \tmov    %rax,%rdi\n    170a:\te8 be eb ff ff       \tcallq  2cd <lduw_le_p_mipsel>\n    170f:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    1712:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    1715:\tc9                   \tleaveq \n    1716:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cpu_lduw_user(__int64 a1, unsigned int a2) {\n  unsigned int v3;\n  if (*(_DWORD *)(Number * ((unsigned __int8)(a2 >> Number) + Number L) + a1 +\n                  Number) == (a2 & Number))\n    v3 = lduw_le_p_mipsel(\n        (unsigned __int16 *)(a2 +\n                             *(_QWORD *)(Number *\n                                             ((unsigned __int8)(a2 >> Number) +\n                                              Number L) +\n                                         a1 + Number)));\n  else\n    v3 = (unsigned __int16)helper_ldw_mmu_mipsel(a1, a2, Number L);\n  return v3;\n}", "code_t": "uint32_t __cdecl cpu_lduw_user(CPUMIPSState *env, target_ulong ptr) {\n  int res;\n  if (env->tlb_table[Number][(unsigned __int8)(ptr >> Number)].addr_read ==\n      (ptr & Number))\n    res = lduw_le_p_mipsel(\n        (const void *)(ptr +\n                       env->tlb_table[Number][(unsigned __int8)(ptr >> Number)]\n                           .addend));\n  else\n    res = (unsigned __int16)helper_ldw_mmu_mipsel(env, ptr, Number L);\n  return res;\n}", "var": [], "body_in_train": false}, {"repo_owner": "whistlinwilly", "repo_name": "graphics-project2", "path": "whistlinwilly/graphics-project2/e5b77334a9186e6f25ab057991b7930a49bb119faf5167236fbb049aa41c2052", "path_in_repo": "whistlinwilly/graphics-project2/p2out/bin/debug/scene/mesh.o", "objdump": "", "code_s": "__int64 __fastcall std vector<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>\nvector(__int64 a1) {\n  return std _Vector_base<std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>\n      _Vector_base(a1);\n}", "code_t": "void __cdecl std vector<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>\nvector(std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>>> *const this) {\n  std _Vector_base<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>\n      _Vector_base(this);\n}", "var": [], "body_in_train": true}, {"repo_owner": "avble", "repo_name": "natClientEx", "path": "avble/natClientEx/a360aed68a7016f580649d16dacbf62c5871877259fd2ac35a159812917aa7c5", "path_in_repo": "avble/natClientEx/pjproject-2.5/pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/playsine", "objdump": "0000000000430982 <Gsm_Coder>:\n  430982:\t55                   \tpush   %rbp\n  430983:\t48 89 e5             \tmov    %rsp,%rbp\n  430986:\t41 54                \tpush   %r12\n  430988:\t53                   \tpush   %rbx\n  430989:\t48 81 ec 90 01 00 00 \tsub    $0x190,%rsp\n  430990:\t48 89 bd 88 fe ff ff \tmov    %rdi,-0x178(%rbp)\n  430997:\t48 89 b5 80 fe ff ff \tmov    %rsi,-0x180(%rbp)\n  43099e:\t48 89 95 78 fe ff ff \tmov    %rdx,-0x188(%rbp)\n  4309a5:\t48 89 8d 70 fe ff ff \tmov    %rcx,-0x190(%rbp)\n  4309ac:\t4c 89 85 68 fe ff ff \tmov    %r8,-0x198(%rbp)\n  4309b3:\t4c 89 8d 60 fe ff ff \tmov    %r9,-0x1a0(%rbp)\n  4309ba:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  4309c1:\t48 05 f0 00 00 00    \tadd    $0xf0,%rax\n  4309c7:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4309cb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4309cf:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  4309d3:\t48 8d 95 90 fe ff ff \tlea    -0x170(%rbp),%rdx\n  4309da:\t48 8b 8d 80 fe ff ff \tmov    -0x180(%rbp),%rcx\n  4309e1:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  4309e8:\t48 89 ce             \tmov    %rcx,%rsi\n  4309eb:\t48 89 c7             \tmov    %rax,%rdi\n  4309ee:\te8 9f 29 00 00       \tcallq  433392 <Gsm_Preprocess>\n  4309f3:\t48 8b 95 78 fe ff ff \tmov    -0x188(%rbp),%rdx\n  4309fa:\t48 8d 8d 90 fe ff ff \tlea    -0x170(%rbp),%rcx\n  430a01:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  430a08:\t48 89 ce             \tmov    %rcx,%rsi\n  430a0b:\t48 89 c7             \tmov    %rax,%rdi\n  430a0e:\te8 2a 29 00 00       \tcallq  43333d <Gsm_LPC_Analysis>\n  430a13:\t48 8d 95 90 fe ff ff \tlea    -0x170(%rbp),%rdx\n  430a1a:\t48 8b 8d 78 fe ff ff \tmov    -0x188(%rbp),%rcx\n  430a21:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  430a28:\t48 89 ce             \tmov    %rcx,%rsi\n  430a2b:\t48 89 c7             \tmov    %rax,%rdi\n  430a2e:\te8 22 46 00 00       \tcallq  435055 <Gsm_Short_Term_Analysis_Filter>\n  430a33:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  430a3a:\te9 56 01 00 00       \tjmpq   430b95 <Gsm_Coder+0x213>\n  430a3f:\t48 8b 95 68 fe ff ff \tmov    -0x198(%rbp),%rdx\n  430a46:\t48 8d 42 02          \tlea    0x2(%rdx),%rax\n  430a4a:\t48 89 85 68 fe ff ff \tmov    %rax,-0x198(%rbp)\n  430a51:\t48 8b 8d 70 fe ff ff \tmov    -0x190(%rbp),%rcx\n  430a58:\t48 8d 41 02          \tlea    0x2(%rcx),%rax\n  430a5c:\t48 89 85 70 fe ff ff \tmov    %rax,-0x190(%rbp)\n  430a63:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  430a6a:\t48 05 30 02 00 00    \tadd    $0x230,%rax\n  430a70:\t4c 8d 50 0a          \tlea    0xa(%rax),%r10\n  430a74:\t8b 75 ec             \tmov    -0x14(%rbp),%esi\n  430a77:\t89 f0                \tmov    %esi,%eax\n  430a79:\tc1 e0 02             \tshl    $0x2,%eax\n  430a7c:\t01 f0                \tadd    %esi,%eax\n  430a7e:\tc1 e0 03             \tshl    $0x3,%eax\n  430a81:\t48 98                \tcltq   \n  430a83:\t48 8d 34 00          \tlea    (%rax,%rax,1),%rsi\n  430a87:\t48 8d 85 90 fe ff ff \tlea    -0x170(%rbp),%rax\n  430a8e:\t48 8d 3c 30          \tlea    (%rax,%rsi,1),%rdi\n  430a92:\t4c 8b 45 d8          \tmov    -0x28(%rbp),%r8\n  430a96:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n  430a9a:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  430aa1:\t48 83 ec 08          \tsub    $0x8,%rsp\n  430aa5:\t52                   \tpush   %rdx\n  430aa6:\t49 89 c9             \tmov    %rcx,%r9\n  430aa9:\t4c 89 d1             \tmov    %r10,%rcx\n  430aac:\t48 89 f2             \tmov    %rsi,%rdx\n  430aaf:\t48 89 fe             \tmov    %rdi,%rsi\n  430ab2:\t48 89 c7             \tmov    %rax,%rdi\n  430ab5:\te8 6e 0f 00 00       \tcallq  431a28 <Gsm_Long_Term_Predictor>\n  430aba:\t48 83 c4 10          \tadd    $0x10,%rsp\n  430abe:\t48 8b 95 60 fe ff ff \tmov    -0x1a0(%rbp),%rdx\n  430ac5:\t48 8d 42 02          \tlea    0x2(%rdx),%rax\n  430ac9:\t48 89 85 60 fe ff ff \tmov    %rax,-0x1a0(%rbp)\n  430ad0:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  430ad4:\t48 8d 48 02          \tlea    0x2(%rax),%rcx\n  430ad8:\t48 89 4d 10          \tmov    %rcx,0x10(%rbp)\n  430adc:\t48 8b 8d 88 fe ff ff \tmov    -0x178(%rbp),%rcx\n  430ae3:\t48 81 c1 30 02 00 00 \tadd    $0x230,%rcx\n  430aea:\t48 8d 71 0a          \tlea    0xa(%rcx),%rsi\n  430aee:\t48 8b 4d 18          \tmov    0x18(%rbp),%rcx\n  430af2:\t48 8b bd 88 fe ff ff \tmov    -0x178(%rbp),%rdi\n  430af9:\t49 89 c8             \tmov    %rcx,%r8\n  430afc:\t48 89 d1             \tmov    %rdx,%rcx\n  430aff:\t48 89 c2             \tmov    %rax,%rdx\n  430b02:\te8 2a 38 00 00       \tcallq  434331 <Gsm_RPE_Encoding>\n  430b07:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n  430b0c:\teb 6f                \tjmp    430b7d <Gsm_Coder+0x1fb>\n  430b0e:\t8d 53 05             \tlea    0x5(%rbx),%edx\n  430b11:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  430b18:\t48 63 d2             \tmovslq %edx,%rdx\n  430b1b:\t48 81 c2 18 01 00 00 \tadd    $0x118,%rdx\n  430b22:\t0f b7 04 50          \tmovzwl (%rax,%rdx,2),%eax\n  430b26:\t48 0f bf d0          \tmovswq %ax,%rdx\n  430b2a:\t48 63 c3             \tmovslq %ebx,%rax\n  430b2d:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n  430b31:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  430b35:\t48 01 c8             \tadd    %rcx,%rax\n  430b38:\t0f b7 00             \tmovzwl (%rax),%eax\n  430b3b:\t48 0f bf c0          \tmovswq %ax,%rax\n  430b3f:\t4c 8d 24 02          \tlea    (%rdx,%rax,1),%r12\n  430b43:\t49 8d 84 24 00 80 00 \tlea    0x8000(%r12),%rax\n  430b4a:\t00 \n  430b4b:\t48 3d ff ff 00 00    \tcmp    $0xffff,%rax\n  430b51:\t76 13                \tjbe    430b66 <Gsm_Coder+0x1e4>\n  430b53:\t4d 85 e4             \ttest   %r12,%r12\n  430b56:\t7e 07                \tjle    430b5f <Gsm_Coder+0x1dd>\n  430b58:\tb8 ff 7f 00 00       \tmov    $0x7fff,%eax\n  430b5d:\teb 0a                \tjmp    430b69 <Gsm_Coder+0x1e7>\n  430b5f:\tb8 00 80 ff ff       \tmov    $0xffff8000,%eax\n  430b64:\teb 03                \tjmp    430b69 <Gsm_Coder+0x1e7>\n  430b66:\t44 89 e0             \tmov    %r12d,%eax\n  430b69:\t48 63 d3             \tmovslq %ebx,%rdx\n  430b6c:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n  430b70:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  430b74:\t48 01 ca             \tadd    %rcx,%rdx\n  430b77:\t66 89 02             \tmov    %ax,(%rdx)\n  430b7a:\t83 c3 01             \tadd    $0x1,%ebx\n  430b7d:\t83 fb 27             \tcmp    $0x27,%ebx\n  430b80:\t7e 8c                \tjle    430b0e <Gsm_Coder+0x18c>\n  430b82:\t48 83 45 e0 50       \taddq   $0x50,-0x20(%rbp)\n  430b87:\t48 83 45 d8 50       \taddq   $0x50,-0x28(%rbp)\n  430b8c:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  430b90:\t48 83 45 18 1a       \taddq   $0x1a,0x18(%rbp)\n  430b95:\t83 7d ec 03          \tcmpl   $0x3,-0x14(%rbp)\n  430b99:\t0f 8e a0 fe ff ff    \tjle    430a3f <Gsm_Coder+0xbd>\n  430b9f:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  430ba6:\t48 8d 88 40 01 00 00 \tlea    0x140(%rax),%rcx\n  430bad:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  430bb4:\tba f0 00 00 00       \tmov    $0xf0,%edx\n  430bb9:\t48 89 ce             \tmov    %rcx,%rsi\n  430bbc:\t48 89 c7             \tmov    %rax,%rdi\n  430bbf:\te8 6c 48 fd ff       \tcallq  405430 <memcpy@plt>\n  430bc4:\t90                   \tnop\n  430bc5:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n  430bc9:\t5b                   \tpop    %rbx\n  430bca:\t41 5c                \tpop    %r12\n  430bcc:\t5d                   \tpop    %rbp\n  430bcd:\tc3                   \tretq   ", "code_s": "void *__fastcall Gsm_Coder(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n                           __int64 a5, __int64 a6, __int64 a7, __int64 a8) {\n  __int64 v8;\n  int v9;\n  __int64 v10;\n  __int64 v11;\n  int i;\n  __int64 v13;\n  __int16 v14;\n  _WORD v20[Number];\n  __int64 v21;\n  __int64 v22;\n  int v23;\n  v22 = a1 + Number;\n  v21 = a1 + Number;\n  Gsm_Preprocess(a1, a2, v20);\n  Gsm_LPC_Analysis(a1, v20, a3);\n  Gsm_Short_Term_Analysis_Filter(a1, a3, v20);\n  v23 = Number;\n  while (v23 <= Number) {\n    v8 = a5;\n    a5 += Number L;\n    v9 = a4;\n    a4 += Number L;\n    Gsm_Long_Term_Predictor(a1, (unsigned int)&v20[Number * v23], v22,\n                            a1 + Number, v21, v9, v8);\n    v10 = a6;\n    a6 += Number L;\n    v11 = a7;\n    a7 += Number L;\n    Gsm_RPE_Encoding(a1, a1 + Number, v11, v10, a8);\n    for (i = Number; i <= Number; ++i) {\n      v13 = *(__int16 *)(a1 + Number * (i + Number + Number L)) +\n            (__int64)*(__int16 *)(Number L * i + v21);\n      if ((unsigned __int64)(v13 + Number) <= Number) {\n        v14 = *(_WORD *)(a1 + Number * (i + Number + Number L)) +\n              *(_WORD *)(Number L * i + v21);\n      } else if (v13 <= Number) {\n        v14 = Number;\n      } else {\n        v14 = Number;\n      }\n      *(_WORD *)(Number L * i + v22) = v14;\n    }\n    v22 += Number L;\n    v21 += Number L;\n    ++v23;\n    a8 += Number L;\n  }\n  return memcpy((void *)a1, (const void *)(a1 + Number), Number);\n}", "code_t": "void __cdecl Gsm_Coder(gsm_state *S, word *s, word *LARc, word *Nc, word *bc,\n                       word *Mc, word *xmaxc, word *xMc) {\n  word *v8;\n  word *v9;\n  word *v10;\n  word *v11;\n  int i;\n  __int64 v13;\n  word v14;\n  word so[Number];\n  word *dpp;\n  word *dp;\n  int k;\n  dp = &S->dp0[Number];\n  dpp = &S->dp0[Number];\n  Gsm_Preprocess(S, s, so);\n  Gsm_LPC_Analysis(S, so, LARc);\n  Gsm_Short_Term_Analysis_Filter(S, LARc, so);\n  k = Number;\n  while (k <= Number) {\n    v8 = bc++;\n    v9 = Nc++;\n    Gsm_Long_Term_Predictor(S, &so[Number * k], dp, &S->e[Number], dpp, v9, v8);\n    v10 = Mc++;\n    v11 = xmaxc++;\n    Gsm_RPE_Encoding(S, &S->e[Number], v11, v10, xMc);\n    for (i = Number; i <= Number; ++i) {\n      v13 = S->e[i + Number] + (__int64)dpp[i];\n      if ((unsigned __int64)(v13 + Number) <= Number) {\n        v14 = S->e[i + Number] + dpp[i];\n      } else if (v13 <= Number) {\n        v14 = Number;\n      } else {\n        v14 = Number;\n      }\n      dp[i] = v14;\n    }\n    dp += Number;\n    dpp += Number;\n    ++k;\n    xMc += Number;\n  }\n  memcpy(S, &S->dp0[Number], Number);\n}", "var": [], "body_in_train": true}, {"repo_owner": "t-crest", "repo_name": "patmos-benchmarks", "path": "t-crest/patmos-benchmarks/f8219c104e85d0561cc8d33fe857bf926e80b145a0b39c74d2d01fdadf84fad4", "path_in_repo": "t-crest/patmos-benchmarks/MiBench/consumer/jpeg/jpeg-6a/jpegtran", "objdump": "0000000000406bc1 <write_file_trailer>:\n  406bc1:\t55                   \tpush   %rbp\n  406bc2:\t48 89 e5             \tmov    %rsp,%rbp\n  406bc5:\t48 83 ec 10          \tsub    $0x10,%rsp\n  406bc9:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  406bcd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406bd1:\tbe d9 00 00 00       \tmov    $0xd9,%esi\n  406bd6:\t48 89 c7             \tmov    %rax,%rdi\n  406bd9:\te8 ea f3 ff ff       \tcallq  405fc8 <emit_marker>\n  406bde:\t90                   \tnop\n  406bdf:\tc9                   \tleaveq \n  406be0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall write_file_trailer(_QWORD *a1) {\n  return emit_marker(a1, Number);\n}", "code_t": "void __cdecl write_file_trailer(j_compress_ptr cinfo) {\n  emit_marker(cinfo, M_EOI);\n}", "var": [], "body_in_train": true}, {"repo_owner": "notno", "repo_name": "rosq", "path": "notno/rosq/35e3cec068f344418bdfabd46d509df9f68a2f36f189653cffe62270faf47ed5", "path_in_repo": "notno/rosq/src/functions", "objdump": "00000000004076f3 <mpc_undefine_and>:\n  4076f3:\t55                   \tpush   %rbp\n  4076f4:\t48 89 e5             \tmov    %rsp,%rbp\n  4076f7:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4076fb:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4076ff:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  407706:\teb 29                \tjmp    407731 <mpc_undefine_and+0x3e>\n  407708:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40770c:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  407710:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  407713:\t48 63 d2             \tmovslq %edx,%rdx\n  407716:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  40771a:\t48 01 d0             \tadd    %rdx,%rax\n  40771d:\t48 8b 00             \tmov    (%rax),%rax\n  407720:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  407725:\t48 89 c7             \tmov    %rax,%rdi\n  407728:\te8 33 00 00 00       \tcallq  407760 <mpc_undefine_unretained>\n  40772d:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  407731:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  407735:\t8b 40 18             \tmov    0x18(%rax),%eax\n  407738:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  40773b:\t7c cb                \tjl     407708 <mpc_undefine_and+0x15>\n  40773d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  407741:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  407745:\t48 89 c7             \tmov    %rax,%rdi\n  407748:\te8 e3 98 ff ff       \tcallq  401030 <free@plt>\n  40774d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  407751:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  407755:\t48 89 c7             \tmov    %rax,%rdi\n  407758:\te8 d3 98 ff ff       \tcallq  401030 <free@plt>\n  40775d:\t90                   \tnop\n  40775e:\tc9                   \tleaveq \n  40775f:\tc3                   \tretq   ", "code_s": "void __fastcall mpc_undefine_and(__int64 a1) {\n  int i;\n  for (i = Number; i < *(_DWORD *)(a1 + Number); ++i)\n    mpc_undefine_unretained(\n        *(_QWORD *)(Number L * i + *(_QWORD *)(a1 + Number)), Number L);\n  free(*(void **)(a1 + Number));\n  free(*(void **)(a1 + Number));\n}", "code_t": "void __cdecl mpc_undefine_and(mpc_parser_t_0 *p) {\n  int i;\n  for (i = Number; i < p->data.repeat.n; ++i)\n    mpc_undefine_unretained(*((mpc_parser_t_0 **)p->data.apply_to.d + i),\n                            Number);\n  free(p->data.apply_to.d);\n  free(p->data.repeat.dx);\n}", "var": [], "body_in_train": true}, {"repo_owner": "Bill-Gray", "repo_name": "prngs", "path": "Bill-Gray/prngs/cfb11fc0c1b5e177ff64859e4ddf0064b142c3ce8993720b87ada349f4195cd5", "path_in_repo": "Bill-Gray/prngs//latin1", "objdump": "", "code_s": "void *malloc(size_t size) { return malloc(size); }", "code_t": "void *malloc(size_t size) { return malloc(size); }", "var": [], "body_in_train": true}, {"repo_owner": "mfabregas", "repo_name": "6loweather", "path": "mfabregas/6loweather/b81e2cf7b7372fa2020343faf08994e29296f954132b230a22617174a2f5a54d", "path_in_repo": "mfabregas/6loweather/6lbr/tools/release-tools/compile-platforms/minimal-net/obj_minimal-net/shell-rime-sniff.o", "objdump": "0000000000000000 <sniff_attributes_output>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n   b:\t66 c7 45 e0 0a 00    \tmovw   $0xa,-0x20(%rbp)\n  11:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  14:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n  18:\tbf 04 00 00 00       \tmov    $0x4,%edi\n  1d:\te8 00 00 00 00       \tcallq  22 <sniff_attributes_output+0x22>\n  22:\t66 89 45 e4          \tmov    %ax,-0x1c(%rbp)\n  26:\tbf 03 00 00 00       \tmov    $0x3,%edi\n  2b:\te8 00 00 00 00       \tcallq  30 <sniff_attributes_output+0x30>\n  30:\t66 89 45 e6          \tmov    %ax,-0x1a(%rbp)\n  34:\tbf 05 00 00 00       \tmov    $0x5,%edi\n  39:\te8 00 00 00 00       \tcallq  3e <sniff_attributes_output+0x3e>\n  3e:\t66 89 45 e8          \tmov    %ax,-0x18(%rbp)\n  42:\tbf 07 00 00 00       \tmov    $0x7,%edi\n  47:\te8 00 00 00 00       \tcallq  4c <sniff_attributes_output+0x4c>\n  4c:\t66 89 45 ea          \tmov    %ax,-0x16(%rbp)\n  50:\tbf 08 00 00 00       \tmov    $0x8,%edi\n  55:\te8 00 00 00 00       \tcallq  5a <sniff_attributes_output+0x5a>\n  5a:\t66 89 45 ec          \tmov    %ax,-0x14(%rbp)\n  5e:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  63:\te8 00 00 00 00       \tcallq  68 <sniff_attributes_output+0x68>\n  68:\t66 89 45 ee          \tmov    %ax,-0x12(%rbp)\n  6c:\tbf 1a 00 00 00       \tmov    $0x1a,%edi\n  71:\te8 00 00 00 00       \tcallq  76 <sniff_attributes_output+0x76>\n  76:\t48 89 c2             \tmov    %rax,%rdx\n  79:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  7d:\t48 83 c0 10          \tadd    $0x10,%rax\n  81:\t48 89 d6             \tmov    %rdx,%rsi\n  84:\t48 89 c7             \tmov    %rax,%rdi\n  87:\te8 00 00 00 00       \tcallq  8c <sniff_attributes_output+0x8c>\n  8c:\tbf 1b 00 00 00       \tmov    $0x1b,%edi\n  91:\te8 00 00 00 00       \tcallq  96 <sniff_attributes_output+0x96>\n  96:\t48 89 c2             \tmov    %rax,%rdx\n  99:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  9d:\t48 83 c0 12          \tadd    $0x12,%rax\n  a1:\t48 89 d6             \tmov    %rdx,%rsi\n  a4:\t48 89 c7             \tmov    %rax,%rdi\n  a7:\te8 00 00 00 00       \tcallq  ac <sniff_attributes_output+0xac>\n  ac:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  b0:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  b6:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  bb:\tba 14 00 00 00       \tmov    $0x14,%edx\n  c0:\t48 89 c6             \tmov    %rax,%rsi\n  c3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  c8:\te8 00 00 00 00       \tcallq  cd <sniff_attributes_output+0xcd>\n  cd:\t90                   \tnop\n  ce:\tc9                   \tleaveq \n  cf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sniff_attributes_output(__int16 a1) {\n  __int64 v1;\n  __int64 v2;\n  __int16 <span class=\"supfact\">v4</span>[Number];\n  __int64 v5;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v4</span>[Number] = a1;\n  <span class=\"supfact\">v4</span>[Number] = packetbuf_attr(Number L);\n  <span class=\"supfact\">v4</span>[Number] = packetbuf_attr(Number L);\n  <span class=\"supfact\">v4</span>[Number] = packetbuf_attr(Number L);\n  <span class=\"supfact\">v4</span>[Number] = packetbuf_attr(Number L);\n  <span class=\"supfact\">v4</span>[Number] = packetbuf_attr(Number L);\n  <span class=\"supfact\">v4</span>[Number] = packetbuf_attr(Number L);\n  v1 = packetbuf_addr(Number L);\n  linkaddr_copy(&v5, v1);\n  v2 = packetbuf_addr(Number L);\n  linkaddr_copy((char *)&v5 + Number, v2);\n  return shell_output(&sniff_command, <span class=\"supfact\">v4</span>, Number L, Number L,\n                      Number L);\n}", "code_t": "void __cdecl sniff_attributes_output(int type) {\n  __int64 v1;\n  __int64 v2;\n  sniff_attributes_blob <span class=\"supfact\">msg</span>;\n  <span class=\"supfact\">msg</span>.len = Number;\n  <span class=\"supfact\">msg</span>.type = type;\n  <span class=\"supfact\">msg</span>.rssi = packetbuf_attr(Number L);\n  <span class=\"supfact\">msg</span>.lqi = packetbuf_attr(Number L);\n  <span class=\"supfact\">msg</span>.timestamp = packetbuf_attr(Number L);\n  <span class=\"supfact\">msg</span>.listen_time = packetbuf_attr(Number L);\n  <span class=\"supfact\">msg</span>.transmit_time = packetbuf_attr(Number L);\n  <span class=\"supfact\">msg</span>.channel = packetbuf_attr(Number L);\n  v1 = packetbuf_addr(Number L);\n  linkaddr_copy(&<span class=\"supfact\">msg</span>.src, v1);\n  v2 = packetbuf_addr(Number L);\n  linkaddr_copy(&<span class=\"supfact\">msg</span>.dest, v2);\n  shell_output(&sniff_command, &<span class=\"supfact\">msg</span>, Number L, Number L,\n               Number L);\n}", "var": [{"name": "v4", "type": "struct sniff_attributes_blob { uint16_t len; uint16_t type; uint16_t rssi; uint16_t lqi; uint16_t timestamp; uint16_t listen_time; uint16_t transmit_time; uint16_t channel; rimeaddr_t src; rimeaddr_t dest; }", "pred_name": "msg", "ref_name": "msg", "ref_type": "struct sniff_attributes_blob { uint16_t len; uint16_t type; uint16_t rssi; uint16_t lqi; uint16_t timestamp; uint16_t listen_time; uint16_t transmit_time; uint16_t channel; linkaddr_t src; linkaddr_t dest; }"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/fd73ae9b4e680d1b393d386b8e99f71c5b879abc95955eec63dcd44ffc21f1f4", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Net/testsuite/obj/Linux/x86_64/debug_shared/IPAddressTest.o", "objdump": "0000000000000000 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN7CppUnit4TestEES6_EET0_T_S9_S8_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  10:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  14:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  18:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  1c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  20:\t48 89 ce             \tmov    %rcx,%rsi\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN7CppUnit4TestEES6_EET0_T_S9_S8_+0x2b>\n  2b:\tc9                   \tleaveq \n  2c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __uninitialized_copy<true>\n__uninit_copy<std move_iterator<CppUnit Test **>, CppUnit Test **>(\n    __int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>, __int64 a3) {\n  return std copy<std move_iterator<CppUnit Test **>, CppUnit Test **>(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, a3);\n}", "code_t": "CppUnit Test **__cdecl std __uninitialized_copy<true>\n__uninit_copy<std move_iterator<CppUnit Test **>, CppUnit Test **>(\n    std move_iterator<CppUnit Test **> <span class=\"supfact\">__first</span>,\n    std move_iterator<CppUnit Test **> <span class=\"supfact\">__last</span>,\n    CppUnit Test **__result) {\n  return std copy<std move_iterator<CppUnit Test **>, CppUnit Test **>(\n      <span class=\"supfact\">__first</span>, <span class=\"supfact\">__last</span>, __result);\n}", "var": [{"name": "a1", "type": "struct std::move_iterator<CppUnit::Test**> { CppUnit::Test ** _M_current; }", "pred_name": "__first", "ref_name": "__first", "ref_type": "struct std::move_iterator<CppUnit::Test**> { CppUnit::Test ** _M_current; }"}, {"name": "a2", "type": "struct std::move_iterator<CppUnit::Test**> { CppUnit::Test ** _M_current; }", "pred_name": "__last", "ref_name": "__last", "ref_type": "struct std::move_iterator<CppUnit::Test**> { CppUnit::Test ** _M_current; }"}], "body_in_train": true}, {"repo_owner": "afni", "repo_name": "afni", "path": "afni/afni/12f9e4a9d90aa4f3633a7351f4acfc4d9829f9345666ef901b82ad04dd05acd1", "path_in_repo": "afni/afni/src/gifti/gifti_tool", "objdump": "00000000004134d7 <gifti_strdiff>:\n  4134d7:\t55                   \tpush   %rbp\n  4134d8:\t48 89 e5             \tmov    %rsp,%rbp\n  4134db:\t48 83 ec 10          \tsub    $0x10,%rsp\n  4134df:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  4134e3:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  4134e7:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4134ec:\t74 07                \tje     4134f5 <gifti_strdiff+0x1e>\n  4134ee:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  4134f3:\t75 1c                \tjne    413511 <gifti_strdiff+0x3a>\n  4134f5:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4134fa:\t75 07                \tjne    413503 <gifti_strdiff+0x2c>\n  4134fc:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  413501:\t74 07                \tje     41350a <gifti_strdiff+0x33>\n  413503:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  413508:\teb 1a                \tjmp    413524 <gifti_strdiff+0x4d>\n  41350a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41350f:\teb 13                \tjmp    413524 <gifti_strdiff+0x4d>\n  413511:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  413515:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  413519:\t48 89 d6             \tmov    %rdx,%rsi\n  41351c:\t48 89 c7             \tmov    %rax,%rdi\n  41351f:\te8 cc ed fe ff       \tcallq  4022f0 <strcmp@plt>\n  413524:\tc9                   \tleaveq \n  413525:\tc3                   \tretq   ", "code_s": "int __fastcall gifti_strdiff(const char *a1, const char *a2) {\n  if (a1 && a2)\n    return strcmp(a1, a2);\n  return a1 || a2;\n}", "code_t": "int __cdecl gifti_strdiff(const char *s1, const char *s2) {\n  if (s1 && s2)\n    return strcmp(s1, s2);\n  return s1 || s2;\n}", "var": [], "body_in_train": false}, {"repo_owner": "sipwise", "repo_name": "kamailio", "path": "sipwise/kamailio/b6a419fbfddde2afae2bf09f3322fa72ba9f84a0b6e54d9c5b7f92310c13e8f8", "path_in_repo": "sipwise/kamailio/src/modules/ims_usrloc_pcscf/pcontact.o", "objdump": "0000000000004da4 <nodb_timer>:\n    4da4:\t55                   \tpush   %rbp\n    4da5:\t48 89 e5             \tmov    %rsp,%rbp\n    4da8:\t41 57                \tpush   %r15\n    4daa:\t41 56                \tpush   %r14\n    4dac:\t41 55                \tpush   %r13\n    4dae:\t41 54                \tpush   %r12\n    4db0:\t53                   \tpush   %rbx\n    4db1:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    4db8:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    4dbc:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    4dc1:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4dc8 <nodb_timer+0x24>\n    4dc8:\te8 00 00 00 00       \tcallq  4dcd <nodb_timer+0x29>\n    4dcd:\t83 f8 02             \tcmp    $0x2,%eax\n    4dd0:\t0f 8e e7 06 00 00    \tjle    54bd <nodb_timer+0x719>\n    4dd6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4ddd <nodb_timer+0x39>\n    4ddd:\t8b 00                \tmov    (%rax),%eax\n    4ddf:\t85 c0                \ttest   %eax,%eax\n    4de1:\t0f 85 d6 06 00 00    \tjne    54bd <nodb_timer+0x719>\n    4de7:\tc7 45 cc 03 00 00 00 \tmovl   $0x3,-0x34(%rbp)\n    4dee:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4df5 <nodb_timer+0x51>\n    4df5:\t8b 00                \tmov    (%rax),%eax\n    4df7:\t8d 50 01             \tlea    0x1(%rax),%edx\n    4dfa:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4e01 <nodb_timer+0x5d>\n    4e01:\t89 10                \tmov    %edx,(%rax)\n    4e03:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4e0a <nodb_timer+0x66>\n    4e0a:\t8b 00                \tmov    (%rax),%eax\n    4e0c:\t85 c0                \ttest   %eax,%eax\n    4e0e:\t0f 95 c0             \tsetne  %al\n    4e11:\t0f b6 c0             \tmovzbl %al,%eax\n    4e14:\t48 85 c0             \ttest   %rax,%rax\n    4e17:\t0f 84 30 03 00 00    \tje     514d <nodb_timer+0x3a9>\n    4e1d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4e24 <nodb_timer+0x80>\n    4e24:\t8b 00                \tmov    (%rax),%eax\n    4e26:\t85 c0                \ttest   %eax,%eax\n    4e28:\t0f 95 c0             \tsetne  %al\n    4e2b:\t0f b6 c0             \tmovzbl %al,%eax\n    4e2e:\t48 85 c0             \ttest   %rax,%rax\n    4e31:\t74 0a                \tje     4e3d <nodb_timer+0x99>\n    4e33:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    4e36:\t89 c7                \tmov    %eax,%edi\n    4e38:\te8 00 00 00 00       \tcallq  4e3d <nodb_timer+0x99>\n    4e3d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4e44 <nodb_timer+0xa0>\n    4e44:\t48 8b 00             \tmov    (%rax),%rax\n    4e47:\t48 85 c0             \ttest   %rax,%rax\n    4e4a:\t0f 95 c0             \tsetne  %al\n    4e4d:\t0f b6 c0             \tmovzbl %al,%eax\n    4e50:\t48 85 c0             \ttest   %rax,%rax\n    4e53:\t0f 84 86 01 00 00    \tje     4fdf <nodb_timer+0x23b>\n    4e59:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4e5d:\t44 8b 60 04          \tmov    0x4(%rax),%r12d\n    4e61:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4e65:\t44 8b 28             \tmov    (%rax),%r13d\n    4e68:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4e6c:\t0f b7 80 82 00 00 00 \tmovzwl 0x82(%rax),%eax\n    4e73:\t44 0f b7 f0          \tmovzwl %ax,%r14d\n    4e77:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4e7b:\t48 8b 80 a0 00 00 00 \tmov    0xa0(%rax),%rax\n    4e82:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    4e86:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4e8a:\t8b 88 a8 00 00 00    \tmov    0xa8(%rax),%ecx\n    4e90:\t89 4d a8             \tmov    %ecx,-0x58(%rbp)\n    4e93:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4e97:\t0f b7 80 80 00 00 00 \tmovzwl 0x80(%rax),%eax\n    4e9e:\t0f b7 f8             \tmovzwl %ax,%edi\n    4ea1:\t89 7d a0             \tmov    %edi,-0x60(%rbp)\n    4ea4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4ea8:\t48 8b 58 70          \tmov    0x70(%rax),%rbx\n    4eac:\t48 89 5d 98          \tmov    %rbx,-0x68(%rbp)\n    4eb0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4eb4:\t8b 50 78             \tmov    0x78(%rax),%edx\n    4eb7:\t89 55 90             \tmov    %edx,-0x70(%rbp)\n    4eba:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4ebe:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    4ec5:\t89 c3                \tmov    %eax,%ebx\n    4ec7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4ecc:\te8 00 00 00 00       \tcallq  4ed1 <nodb_timer+0x12d>\n    4ed1:\t29 c3                \tsub    %eax,%ebx\n    4ed3:\t89 d8                \tmov    %ebx,%eax\n    4ed5:\t89 45 88             \tmov    %eax,-0x78(%rbp)\n    4ed8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4edc:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    4ee3:\t89 45 80             \tmov    %eax,-0x80(%rbp)\n    4ee6:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4eea:\t8b 80 c0 00 00 00    \tmov    0xc0(%rax),%eax\n    4ef0:\t89 c7                \tmov    %eax,%edi\n    4ef2:\te8 b2 b1 ff ff       \tcallq  a9 <reg_state_to_string>\n    4ef7:\t49 89 c7             \tmov    %rax,%r15\n    4efa:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4efe:\t4c 8b 50 18          \tmov    0x18(%rax),%r10\n    4f02:\t4c 89 95 78 ff ff ff \tmov    %r10,-0x88(%rbp)\n    4f09:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4f0d:\t44 8b 58 20          \tmov    0x20(%rax),%r11d\n    4f11:\t44 89 9d 70 ff ff ff \tmov    %r11d,-0x90(%rbp)\n    4f18:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4f1f <nodb_timer+0x17b>\n    4f1f:\t48 8b 00             \tmov    (%rax),%rax\n    4f22:\t4c 8b 08             \tmov    (%rax),%r9\n    4f25:\t4c 89 8d 68 ff ff ff \tmov    %r9,-0x98(%rbp)\n    4f2c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4f33 <nodb_timer+0x18f>\n    4f33:\t48 8b 00             \tmov    (%rax),%rax\n    4f36:\t44 8b 40 08          \tmov    0x8(%rax),%r8d\n    4f3a:\t44 89 85 60 ff ff ff \tmov    %r8d,-0xa0(%rbp)\n    4f41:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    4f44:\t83 c0 05             \tadd    $0x5,%eax\n    4f47:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 4f4e <nodb_timer+0x1aa>\n    4f4e:\t48 98                \tcltq   \n    4f50:\t48 c1 e0 04          \tshl    $0x4,%rax\n    4f54:\t48 01 d0             \tadd    %rdx,%rax\n    4f57:\t48 8b 18             \tmov    (%rax),%rbx\n    4f5a:\te8 00 00 00 00       \tcallq  4f5f <nodb_timer+0x1bb>\n    4f5f:\t89 c1                \tmov    %eax,%ecx\n    4f61:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4f68 <nodb_timer+0x1c4>\n    4f68:\t8b 10                \tmov    (%rax),%edx\n    4f6a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4f71 <nodb_timer+0x1cd>\n    4f71:\t48 8b 38             \tmov    (%rax),%rdi\n    4f74:\t41 54                \tpush   %r12\n    4f76:\t41 55                \tpush   %r13\n    4f78:\t41 56                \tpush   %r14\n    4f7a:\tff 75 b0             \tpushq  -0x50(%rbp)\n    4f7d:\t8b 75 a8             \tmov    -0x58(%rbp),%esi\n    4f80:\t56                   \tpush   %rsi\n    4f81:\t8b 75 a0             \tmov    -0x60(%rbp),%esi\n    4f84:\t56                   \tpush   %rsi\n    4f85:\tff 75 98             \tpushq  -0x68(%rbp)\n    4f88:\t8b 75 90             \tmov    -0x70(%rbp),%esi\n    4f8b:\t56                   \tpush   %rsi\n    4f8c:\t8b 45 88             \tmov    -0x78(%rbp),%eax\n    4f8f:\t50                   \tpush   %rax\n    4f90:\t8b 45 80             \tmov    -0x80(%rbp),%eax\n    4f93:\t50                   \tpush   %rax\n    4f94:\t41 57                \tpush   %r15\n    4f96:\tff b5 78 ff ff ff    \tpushq  -0x88(%rbp)\n    4f9c:\t44 8b 9d 70 ff ff ff \tmov    -0x90(%rbp),%r11d\n    4fa3:\t41 53                \tpush   %r11\n    4fa5:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 4fac <nodb_timer+0x208>\n    4fac:\t50                   \tpush   %rax\n    4fad:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 4fb4 <nodb_timer+0x210>\n    4fb4:\t50                   \tpush   %rax\n    4fb5:\tff b5 68 ff ff ff    \tpushq  -0x98(%rbp)\n    4fbb:\t44 8b 8d 60 ff ff ff \tmov    -0xa0(%rbp),%r9d\n    4fc2:\t49 89 d8             \tmov    %rbx,%r8\n    4fc5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4fcc <nodb_timer+0x228>\n    4fcc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4fd1:\te8 00 00 00 00       \tcallq  4fd6 <nodb_timer+0x232>\n    4fd6:\t48 83 ec 80          \tsub    $0xffffffffffffff80,%rsp\n    4fda:\te9 4a 01 00 00       \tjmpq   5129 <nodb_timer+0x385>\n    4fdf:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4fe3:\t44 8b 60 04          \tmov    0x4(%rax),%r12d\n    4fe7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4feb:\t44 8b 28             \tmov    (%rax),%r13d\n    4fee:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4ff2:\t0f b7 80 82 00 00 00 \tmovzwl 0x82(%rax),%eax\n    4ff9:\t0f b7 c0             \tmovzwl %ax,%eax\n    4ffc:\t89 45 b0             \tmov    %eax,-0x50(%rbp)\n    4fff:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5003:\t48 8b 88 a0 00 00 00 \tmov    0xa0(%rax),%rcx\n    500a:\t48 89 4d a8          \tmov    %rcx,-0x58(%rbp)\n    500e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5012:\t8b b8 a8 00 00 00    \tmov    0xa8(%rax),%edi\n    5018:\t89 7d a0             \tmov    %edi,-0x60(%rbp)\n    501b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    501f:\t0f b7 80 80 00 00 00 \tmovzwl 0x80(%rax),%eax\n    5026:\t0f b7 d8             \tmovzwl %ax,%ebx\n    5029:\t89 5d 98             \tmov    %ebx,-0x68(%rbp)\n    502c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5030:\t48 8b 50 70          \tmov    0x70(%rax),%rdx\n    5034:\t48 89 55 90          \tmov    %rdx,-0x70(%rbp)\n    5038:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    503c:\t44 8b 50 78          \tmov    0x78(%rax),%r10d\n    5040:\t44 89 55 88          \tmov    %r10d,-0x78(%rbp)\n    5044:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5048:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    504f:\t89 c3                \tmov    %eax,%ebx\n    5051:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5056:\te8 00 00 00 00       \tcallq  505b <nodb_timer+0x2b7>\n    505b:\t29 c3                \tsub    %eax,%ebx\n    505d:\t89 d8                \tmov    %ebx,%eax\n    505f:\t89 45 80             \tmov    %eax,-0x80(%rbp)\n    5062:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5066:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    506d:\t89 85 78 ff ff ff    \tmov    %eax,-0x88(%rbp)\n    5073:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5077:\t8b 80 c0 00 00 00    \tmov    0xc0(%rax),%eax\n    507d:\t89 c7                \tmov    %eax,%edi\n    507f:\te8 25 b0 ff ff       \tcallq  a9 <reg_state_to_string>\n    5084:\t49 89 c6             \tmov    %rax,%r14\n    5087:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    508b:\t4c 8b 58 18          \tmov    0x18(%rax),%r11\n    508f:\t4c 89 9d 70 ff ff ff \tmov    %r11,-0x90(%rbp)\n    5096:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    509a:\t44 8b 78 20          \tmov    0x20(%rax),%r15d\n    509e:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    50a1:\t83 c0 05             \tadd    $0x5,%eax\n    50a4:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 50ab <nodb_timer+0x307>\n    50ab:\t48 98                \tcltq   \n    50ad:\t48 c1 e0 04          \tshl    $0x4,%rax\n    50b1:\t48 01 d0             \tadd    %rdx,%rax\n    50b4:\t48 8b 18             \tmov    (%rax),%rbx\n    50b7:\te8 00 00 00 00       \tcallq  50bc <nodb_timer+0x318>\n    50bc:\t89 c1                \tmov    %eax,%ecx\n    50be:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 50c5 <nodb_timer+0x321>\n    50c5:\t8b 10                \tmov    (%rax),%edx\n    50c7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 50ce <nodb_timer+0x32a>\n    50ce:\t48 8b 38             \tmov    (%rax),%rdi\n    50d1:\t41 54                \tpush   %r12\n    50d3:\t41 55                \tpush   %r13\n    50d5:\t8b 75 b0             \tmov    -0x50(%rbp),%esi\n    50d8:\t56                   \tpush   %rsi\n    50d9:\tff 75 a8             \tpushq  -0x58(%rbp)\n    50dc:\t8b 75 a0             \tmov    -0x60(%rbp),%esi\n    50df:\t56                   \tpush   %rsi\n    50e0:\t8b 75 98             \tmov    -0x68(%rbp),%esi\n    50e3:\t56                   \tpush   %rsi\n    50e4:\tff 75 90             \tpushq  -0x70(%rbp)\n    50e7:\t44 8b 55 88          \tmov    -0x78(%rbp),%r10d\n    50eb:\t41 52                \tpush   %r10\n    50ed:\t8b 45 80             \tmov    -0x80(%rbp),%eax\n    50f0:\t50                   \tpush   %rax\n    50f1:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n    50f7:\t50                   \tpush   %rax\n    50f8:\t41 56                \tpush   %r14\n    50fa:\tff b5 70 ff ff ff    \tpushq  -0x90(%rbp)\n    5100:\t41 57                \tpush   %r15\n    5102:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 5109 <nodb_timer+0x365>\n    5109:\t50                   \tpush   %rax\n    510a:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 5111 <nodb_timer+0x36d>\n    5111:\t49 89 d8             \tmov    %rbx,%r8\n    5114:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 511b <nodb_timer+0x377>\n    511b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5120:\te8 00 00 00 00       \tcallq  5125 <nodb_timer+0x381>\n    5125:\t48 83 c4 70          \tadd    $0x70,%rsp\n    5129:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5130 <nodb_timer+0x38c>\n    5130:\t8b 00                \tmov    (%rax),%eax\n    5132:\t85 c0                \ttest   %eax,%eax\n    5134:\t0f 95 c0             \tsetne  %al\n    5137:\t0f b6 c0             \tmovzbl %al,%eax\n    513a:\t48 85 c0             \ttest   %rax,%rax\n    513d:\t0f 84 65 03 00 00    \tje     54a8 <nodb_timer+0x704>\n    5143:\te8 00 00 00 00       \tcallq  5148 <nodb_timer+0x3a4>\n    5148:\te9 5b 03 00 00       \tjmpq   54a8 <nodb_timer+0x704>\n    514d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5154 <nodb_timer+0x3b0>\n    5154:\t48 8b 00             \tmov    (%rax),%rax\n    5157:\t48 85 c0             \ttest   %rax,%rax\n    515a:\t0f 95 c0             \tsetne  %al\n    515d:\t0f b6 c0             \tmovzbl %al,%eax\n    5160:\t48 85 c0             \ttest   %rax,%rax\n    5163:\t0f 84 c1 01 00 00    \tje     532a <nodb_timer+0x586>\n    5169:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5170 <nodb_timer+0x3cc>\n    5170:\t48 8b 00             \tmov    (%rax),%rax\n    5173:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    5177:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    517b:\t44 8b 70 04          \tmov    0x4(%rax),%r14d\n    517f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5183:\t8b 08                \tmov    (%rax),%ecx\n    5185:\t89 4d a8             \tmov    %ecx,-0x58(%rbp)\n    5188:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    518c:\t0f b7 80 82 00 00 00 \tmovzwl 0x82(%rax),%eax\n    5193:\t0f b7 f8             \tmovzwl %ax,%edi\n    5196:\t89 7d a0             \tmov    %edi,-0x60(%rbp)\n    5199:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    519d:\t48 8b b0 a0 00 00 00 \tmov    0xa0(%rax),%rsi\n    51a4:\t48 89 75 98          \tmov    %rsi,-0x68(%rbp)\n    51a8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    51ac:\t8b 90 a8 00 00 00    \tmov    0xa8(%rax),%edx\n    51b2:\t89 55 90             \tmov    %edx,-0x70(%rbp)\n    51b5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    51b9:\t0f b7 80 80 00 00 00 \tmovzwl 0x80(%rax),%eax\n    51c0:\t44 0f b7 d0          \tmovzwl %ax,%r10d\n    51c4:\t44 89 55 88          \tmov    %r10d,-0x78(%rbp)\n    51c8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    51cc:\t4c 8b 58 70          \tmov    0x70(%rax),%r11\n    51d0:\t4c 89 5d 80          \tmov    %r11,-0x80(%rbp)\n    51d4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    51d8:\t44 8b 48 78          \tmov    0x78(%rax),%r9d\n    51dc:\t44 89 8d 78 ff ff ff \tmov    %r9d,-0x88(%rbp)\n    51e3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    51e7:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    51ee:\t89 c3                \tmov    %eax,%ebx\n    51f0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    51f5:\te8 00 00 00 00       \tcallq  51fa <nodb_timer+0x456>\n    51fa:\t29 c3                \tsub    %eax,%ebx\n    51fc:\t89 d8                \tmov    %ebx,%eax\n    51fe:\t89 85 70 ff ff ff    \tmov    %eax,-0x90(%rbp)\n    5204:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5208:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    520f:\t89 85 68 ff ff ff    \tmov    %eax,-0x98(%rbp)\n    5215:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5219:\t8b 80 c0 00 00 00    \tmov    0xc0(%rax),%eax\n    521f:\t89 c7                \tmov    %eax,%edi\n    5221:\te8 83 ae ff ff       \tcallq  a9 <reg_state_to_string>\n    5226:\t49 89 c7             \tmov    %rax,%r15\n    5229:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    522d:\t4c 8b 40 18          \tmov    0x18(%rax),%r8\n    5231:\t4c 89 85 60 ff ff ff \tmov    %r8,-0xa0(%rbp)\n    5238:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    523c:\t44 8b 60 20          \tmov    0x20(%rax),%r12d\n    5240:\t44 89 a5 5c ff ff ff \tmov    %r12d,-0xa4(%rbp)\n    5247:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 524e <nodb_timer+0x4aa>\n    524e:\t48 8b 00             \tmov    (%rax),%rax\n    5251:\t4c 8b 28             \tmov    (%rax),%r13\n    5254:\t4c 89 ad 50 ff ff ff \tmov    %r13,-0xb0(%rbp)\n    525b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5262 <nodb_timer+0x4be>\n    5262:\t48 8b 00             \tmov    (%rax),%rax\n    5265:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n    5269:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    526c:\t83 c0 05             \tadd    $0x5,%eax\n    526f:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 5276 <nodb_timer+0x4d2>\n    5276:\t48 98                \tcltq   \n    5278:\t48 c1 e0 04          \tshl    $0x4,%rax\n    527c:\t48 01 d0             \tadd    %rdx,%rax\n    527f:\t4c 8b 20             \tmov    (%rax),%r12\n    5282:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    5285:\t83 c0 05             \tadd    $0x5,%eax\n    5288:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 528f <nodb_timer+0x4eb>\n    528f:\t48 98                \tcltq   \n    5291:\t48 c1 e0 04          \tshl    $0x4,%rax\n    5295:\t48 01 d0             \tadd    %rdx,%rax\n    5298:\t48 83 c0 08          \tadd    $0x8,%rax\n    529c:\t8b 18                \tmov    (%rax),%ebx\n    529e:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    52a3:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 52aa <nodb_timer+0x506>\n    52aa:\te8 00 00 00 00       \tcallq  52af <nodb_timer+0x50b>\n    52af:\t09 c3                \tor     %eax,%ebx\n    52b1:\t89 df                \tmov    %ebx,%edi\n    52b3:\t41 56                \tpush   %r14\n    52b5:\t8b 4d a8             \tmov    -0x58(%rbp),%ecx\n    52b8:\t51                   \tpush   %rcx\n    52b9:\t8b 4d a0             \tmov    -0x60(%rbp),%ecx\n    52bc:\t51                   \tpush   %rcx\n    52bd:\tff 75 98             \tpushq  -0x68(%rbp)\n    52c0:\t8b 55 90             \tmov    -0x70(%rbp),%edx\n    52c3:\t52                   \tpush   %rdx\n    52c4:\t44 8b 55 88          \tmov    -0x78(%rbp),%r10d\n    52c8:\t41 52                \tpush   %r10\n    52ca:\tff 75 80             \tpushq  -0x80(%rbp)\n    52cd:\t44 8b 8d 78 ff ff ff \tmov    -0x88(%rbp),%r9d\n    52d4:\t41 51                \tpush   %r9\n    52d6:\t8b b5 70 ff ff ff    \tmov    -0x90(%rbp),%esi\n    52dc:\t56                   \tpush   %rsi\n    52dd:\t8b b5 68 ff ff ff    \tmov    -0x98(%rbp),%esi\n    52e3:\t56                   \tpush   %rsi\n    52e4:\t41 57                \tpush   %r15\n    52e6:\tff b5 60 ff ff ff    \tpushq  -0xa0(%rbp)\n    52ec:\t8b 8d 5c ff ff ff    \tmov    -0xa4(%rbp),%ecx\n    52f2:\t51                   \tpush   %rcx\n    52f3:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 52fa <nodb_timer+0x556>\n    52fa:\t50                   \tpush   %rax\n    52fb:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 5302 <nodb_timer+0x55e>\n    5302:\t4c 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%r8\n    5309:\t44 89 e9             \tmov    %r13d,%ecx\n    530c:\t4c 89 e2             \tmov    %r12,%rdx\n    530f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5316 <nodb_timer+0x572>\n    5316:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    531b:\t48 8b 5d b0          \tmov    -0x50(%rbp),%rbx\n    531f:\tff d3                \tcallq  *%rbx\n    5321:\t48 83 c4 70          \tadd    $0x70,%rsp\n    5325:\te9 7e 01 00 00       \tjmpq   54a8 <nodb_timer+0x704>\n    532a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5331 <nodb_timer+0x58d>\n    5331:\t4c 8b 38             \tmov    (%rax),%r15\n    5334:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5338:\t44 8b 70 04          \tmov    0x4(%rax),%r14d\n    533c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5340:\t8b 00                \tmov    (%rax),%eax\n    5342:\t89 45 b0             \tmov    %eax,-0x50(%rbp)\n    5345:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5349:\t0f b7 80 82 00 00 00 \tmovzwl 0x82(%rax),%eax\n    5350:\t0f b7 f8             \tmovzwl %ax,%edi\n    5353:\t89 7d a8             \tmov    %edi,-0x58(%rbp)\n    5356:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    535a:\t48 8b 98 a0 00 00 00 \tmov    0xa0(%rax),%rbx\n    5361:\t48 89 5d a0          \tmov    %rbx,-0x60(%rbp)\n    5365:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5369:\t8b b0 a8 00 00 00    \tmov    0xa8(%rax),%esi\n    536f:\t89 75 98             \tmov    %esi,-0x68(%rbp)\n    5372:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5376:\t0f b7 80 80 00 00 00 \tmovzwl 0x80(%rax),%eax\n    537d:\t0f b7 d0             \tmovzwl %ax,%edx\n    5380:\t89 55 90             \tmov    %edx,-0x70(%rbp)\n    5383:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5387:\t4c 8b 58 70          \tmov    0x70(%rax),%r11\n    538b:\t4c 89 5d 88          \tmov    %r11,-0x78(%rbp)\n    538f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5393:\t44 8b 50 78          \tmov    0x78(%rax),%r10d\n    5397:\t44 89 55 80          \tmov    %r10d,-0x80(%rbp)\n    539b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    539f:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    53a6:\t89 c3                \tmov    %eax,%ebx\n    53a8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    53ad:\te8 00 00 00 00       \tcallq  53b2 <nodb_timer+0x60e>\n    53b2:\t29 c3                \tsub    %eax,%ebx\n    53b4:\t89 d8                \tmov    %ebx,%eax\n    53b6:\t89 85 78 ff ff ff    \tmov    %eax,-0x88(%rbp)\n    53bc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    53c0:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    53c7:\t89 85 70 ff ff ff    \tmov    %eax,-0x90(%rbp)\n    53cd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    53d1:\t8b 80 c0 00 00 00    \tmov    0xc0(%rax),%eax\n    53d7:\t89 c7                \tmov    %eax,%edi\n    53d9:\te8 cb ac ff ff       \tcallq  a9 <reg_state_to_string>\n    53de:\t49 89 c5             \tmov    %rax,%r13\n    53e1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    53e5:\t4c 8b 40 18          \tmov    0x18(%rax),%r8\n    53e9:\t4c 89 85 68 ff ff ff \tmov    %r8,-0x98(%rbp)\n    53f0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    53f4:\t44 8b 48 20          \tmov    0x20(%rax),%r9d\n    53f8:\t44 89 8d 60 ff ff ff \tmov    %r9d,-0xa0(%rbp)\n    53ff:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    5402:\t83 c0 05             \tadd    $0x5,%eax\n    5405:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 540c <nodb_timer+0x668>\n    540c:\t48 98                \tcltq   \n    540e:\t48 c1 e0 04          \tshl    $0x4,%rax\n    5412:\t48 01 d0             \tadd    %rdx,%rax\n    5415:\t4c 8b 20             \tmov    (%rax),%r12\n    5418:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    541b:\t83 c0 05             \tadd    $0x5,%eax\n    541e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 5425 <nodb_timer+0x681>\n    5425:\t48 98                \tcltq   \n    5427:\t48 c1 e0 04          \tshl    $0x4,%rax\n    542b:\t48 01 d0             \tadd    %rdx,%rax\n    542e:\t48 83 c0 08          \tadd    $0x8,%rax\n    5432:\t8b 18                \tmov    (%rax),%ebx\n    5434:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    5439:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5440 <nodb_timer+0x69c>\n    5440:\te8 00 00 00 00       \tcallq  5445 <nodb_timer+0x6a1>\n    5445:\t09 d8                \tor     %ebx,%eax\n    5447:\t41 56                \tpush   %r14\n    5449:\t8b 4d b0             \tmov    -0x50(%rbp),%ecx\n    544c:\t51                   \tpush   %rcx\n    544d:\t8b 7d a8             \tmov    -0x58(%rbp),%edi\n    5450:\t57                   \tpush   %rdi\n    5451:\tff 75 a0             \tpushq  -0x60(%rbp)\n    5454:\t8b 75 98             \tmov    -0x68(%rbp),%esi\n    5457:\t56                   \tpush   %rsi\n    5458:\t8b 55 90             \tmov    -0x70(%rbp),%edx\n    545b:\t52                   \tpush   %rdx\n    545c:\tff 75 88             \tpushq  -0x78(%rbp)\n    545f:\t44 8b 55 80          \tmov    -0x80(%rbp),%r10d\n    5463:\t41 52                \tpush   %r10\n    5465:\t8b 8d 78 ff ff ff    \tmov    -0x88(%rbp),%ecx\n    546b:\t51                   \tpush   %rcx\n    546c:\t8b 8d 70 ff ff ff    \tmov    -0x90(%rbp),%ecx\n    5472:\t51                   \tpush   %rcx\n    5473:\t41 55                \tpush   %r13\n    5475:\tff b5 68 ff ff ff    \tpushq  -0x98(%rbp)\n    547b:\t44 8b 8d 60 ff ff ff \tmov    -0xa0(%rbp),%r9d\n    5482:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 5489 <nodb_timer+0x6e5>\n    5489:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 5490 <nodb_timer+0x6ec>\n    5490:\t4c 89 e2             \tmov    %r12,%rdx\n    5493:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 549a <nodb_timer+0x6f6>\n    549a:\t89 c7                \tmov    %eax,%edi\n    549c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    54a1:\t41 ff d7             \tcallq  *%r15\n    54a4:\t48 83 c4 60          \tadd    $0x60,%rsp\n    54a8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 54af <nodb_timer+0x70b>\n    54af:\t8b 00                \tmov    (%rax),%eax\n    54b1:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    54b4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 54bb <nodb_timer+0x717>\n    54bb:\t89 10                \tmov    %edx,(%rax)\n    54bd:\te8 00 00 00 00       \tcallq  54c2 <nodb_timer+0x71e>\n    54c2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    54c6:\t48 8b 90 c8 00 00 00 \tmov    0xc8(%rax),%rdx\n    54cd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 54d4 <nodb_timer+0x730>\n    54d4:\t48 8b 00             \tmov    (%rax),%rax\n    54d7:\t48 29 c2             \tsub    %rax,%rdx\n    54da:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 54e1 <nodb_timer+0x73d>\n    54e1:\t8b 00                \tmov    (%rax),%eax\n    54e3:\t48 98                \tcltq   \n    54e5:\t48 01 d0             \tadd    %rdx,%rax\n    54e8:\t48 85 c0             \ttest   %rax,%rax\n    54eb:\t0f 8f b9 06 00 00    \tjg     5baa <nodb_timer+0xe06>\n    54f1:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    54f6:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 54fd <nodb_timer+0x759>\n    54fd:\te8 00 00 00 00       \tcallq  5502 <nodb_timer+0x75e>\n    5502:\t83 f8 02             \tcmp    $0x2,%eax\n    5505:\t0f 8e 3b 03 00 00    \tjle    5846 <nodb_timer+0xaa2>\n    550b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5512 <nodb_timer+0x76e>\n    5512:\t8b 00                \tmov    (%rax),%eax\n    5514:\t85 c0                \ttest   %eax,%eax\n    5516:\t0f 85 2a 03 00 00    \tjne    5846 <nodb_timer+0xaa2>\n    551c:\tc7 45 c8 03 00 00 00 \tmovl   $0x3,-0x38(%rbp)\n    5523:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 552a <nodb_timer+0x786>\n    552a:\t8b 00                \tmov    (%rax),%eax\n    552c:\t8d 50 01             \tlea    0x1(%rax),%edx\n    552f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5536 <nodb_timer+0x792>\n    5536:\t89 10                \tmov    %edx,(%rax)\n    5538:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 553f <nodb_timer+0x79b>\n    553f:\t8b 00                \tmov    (%rax),%eax\n    5541:\t85 c0                \ttest   %eax,%eax\n    5543:\t0f 95 c0             \tsetne  %al\n    5546:\t0f b6 c0             \tmovzbl %al,%eax\n    5549:\t48 85 c0             \ttest   %rax,%rax\n    554c:\t0f 84 6c 01 00 00    \tje     56be <nodb_timer+0x91a>\n    5552:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5559 <nodb_timer+0x7b5>\n    5559:\t8b 00                \tmov    (%rax),%eax\n    555b:\t85 c0                \ttest   %eax,%eax\n    555d:\t0f 95 c0             \tsetne  %al\n    5560:\t0f b6 c0             \tmovzbl %al,%eax\n    5563:\t48 85 c0             \ttest   %rax,%rax\n    5566:\t74 0a                \tje     5572 <nodb_timer+0x7ce>\n    5568:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    556b:\t89 c7                \tmov    %eax,%edi\n    556d:\te8 00 00 00 00       \tcallq  5572 <nodb_timer+0x7ce>\n    5572:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5579 <nodb_timer+0x7d5>\n    5579:\t48 8b 00             \tmov    (%rax),%rax\n    557c:\t48 85 c0             \ttest   %rax,%rax\n    557f:\t0f 95 c0             \tsetne  %al\n    5582:\t0f b6 c0             \tmovzbl %al,%eax\n    5585:\t48 85 c0             \ttest   %rax,%rax\n    5588:\t0f 84 98 00 00 00    \tje     5626 <nodb_timer+0x882>\n    558e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5592:\t4c 8b 68 18          \tmov    0x18(%rax),%r13\n    5596:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    559a:\t44 8b 60 20          \tmov    0x20(%rax),%r12d\n    559e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 55a5 <nodb_timer+0x801>\n    55a5:\t48 8b 00             \tmov    (%rax),%rax\n    55a8:\t48 8b 18             \tmov    (%rax),%rbx\n    55ab:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 55b2 <nodb_timer+0x80e>\n    55b2:\t48 8b 00             \tmov    (%rax),%rax\n    55b5:\t44 8b 78 08          \tmov    0x8(%rax),%r15d\n    55b9:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    55bc:\t8d 50 05             \tlea    0x5(%rax),%edx\n    55bf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 55c6 <nodb_timer+0x822>\n    55c6:\t48 63 d2             \tmovslq %edx,%rdx\n    55c9:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    55cd:\t48 01 d0             \tadd    %rdx,%rax\n    55d0:\t4c 8b 30             \tmov    (%rax),%r14\n    55d3:\te8 00 00 00 00       \tcallq  55d8 <nodb_timer+0x834>\n    55d8:\t89 c1                \tmov    %eax,%ecx\n    55da:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 55e1 <nodb_timer+0x83d>\n    55e1:\t8b 10                \tmov    (%rax),%edx\n    55e3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 55ea <nodb_timer+0x846>\n    55ea:\t48 8b 00             \tmov    (%rax),%rax\n    55ed:\t48 83 ec 08          \tsub    $0x8,%rsp\n    55f1:\t41 55                \tpush   %r13\n    55f3:\t41 54                \tpush   %r12\n    55f5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 55fc <nodb_timer+0x858>\n    55fc:\t56                   \tpush   %rsi\n    55fd:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5604 <nodb_timer+0x860>\n    5604:\t56                   \tpush   %rsi\n    5605:\t53                   \tpush   %rbx\n    5606:\t45 89 f9             \tmov    %r15d,%r9d\n    5609:\t4d 89 f0             \tmov    %r14,%r8\n    560c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5613 <nodb_timer+0x86f>\n    5613:\t48 89 c7             \tmov    %rax,%rdi\n    5616:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    561b:\te8 00 00 00 00       \tcallq  5620 <nodb_timer+0x87c>\n    5620:\t48 83 c4 30          \tadd    $0x30,%rsp\n    5624:\teb 74                \tjmp    569a <nodb_timer+0x8f6>\n    5626:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    562a:\t4c 8b 60 18          \tmov    0x18(%rax),%r12\n    562e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5632:\t8b 58 20             \tmov    0x20(%rax),%ebx\n    5635:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    5638:\t8d 50 05             \tlea    0x5(%rax),%edx\n    563b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5642 <nodb_timer+0x89e>\n    5642:\t48 63 d2             \tmovslq %edx,%rdx\n    5645:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    5649:\t48 01 d0             \tadd    %rdx,%rax\n    564c:\t4c 8b 28             \tmov    (%rax),%r13\n    564f:\te8 00 00 00 00       \tcallq  5654 <nodb_timer+0x8b0>\n    5654:\t89 c1                \tmov    %eax,%ecx\n    5656:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 565d <nodb_timer+0x8b9>\n    565d:\t8b 10                \tmov    (%rax),%edx\n    565f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5666 <nodb_timer+0x8c2>\n    5666:\t48 8b 00             \tmov    (%rax),%rax\n    5669:\t48 83 ec 08          \tsub    $0x8,%rsp\n    566d:\t41 54                \tpush   %r12\n    566f:\t53                   \tpush   %rbx\n    5670:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5677 <nodb_timer+0x8d3>\n    5677:\t56                   \tpush   %rsi\n    5678:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 567f <nodb_timer+0x8db>\n    567f:\t4d 89 e8             \tmov    %r13,%r8\n    5682:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5689 <nodb_timer+0x8e5>\n    5689:\t48 89 c7             \tmov    %rax,%rdi\n    568c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5691:\te8 00 00 00 00       \tcallq  5696 <nodb_timer+0x8f2>\n    5696:\t48 83 c4 20          \tadd    $0x20,%rsp\n    569a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 56a1 <nodb_timer+0x8fd>\n    56a1:\t8b 00                \tmov    (%rax),%eax\n    56a3:\t85 c0                \ttest   %eax,%eax\n    56a5:\t0f 95 c0             \tsetne  %al\n    56a8:\t0f b6 c0             \tmovzbl %al,%eax\n    56ab:\t48 85 c0             \ttest   %rax,%rax\n    56ae:\t0f 84 7d 01 00 00    \tje     5831 <nodb_timer+0xa8d>\n    56b4:\te8 00 00 00 00       \tcallq  56b9 <nodb_timer+0x915>\n    56b9:\te9 73 01 00 00       \tjmpq   5831 <nodb_timer+0xa8d>\n    56be:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 56c5 <nodb_timer+0x921>\n    56c5:\t48 8b 00             \tmov    (%rax),%rax\n    56c8:\t48 85 c0             \ttest   %rax,%rax\n    56cb:\t0f 95 c0             \tsetne  %al\n    56ce:\t0f b6 c0             \tmovzbl %al,%eax\n    56d1:\t48 85 c0             \ttest   %rax,%rax\n    56d4:\t0f 84 c2 00 00 00    \tje     579c <nodb_timer+0x9f8>\n    56da:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 56e1 <nodb_timer+0x93d>\n    56e1:\t4c 8b 28             \tmov    (%rax),%r13\n    56e4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    56e8:\t4c 8b 78 18          \tmov    0x18(%rax),%r15\n    56ec:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    56f0:\t44 8b 70 20          \tmov    0x20(%rax),%r14d\n    56f4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 56fb <nodb_timer+0x957>\n    56fb:\t48 8b 00             \tmov    (%rax),%rax\n    56fe:\t48 8b 00             \tmov    (%rax),%rax\n    5701:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    5705:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 570c <nodb_timer+0x968>\n    570c:\t48 8b 00             \tmov    (%rax),%rax\n    570f:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n    5713:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    5716:\t8d 50 05             \tlea    0x5(%rax),%edx\n    5719:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5720 <nodb_timer+0x97c>\n    5720:\t48 63 d2             \tmovslq %edx,%rdx\n    5723:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    5727:\t48 01 d0             \tadd    %rdx,%rax\n    572a:\t48 8b 18             \tmov    (%rax),%rbx\n    572d:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    5730:\t8d 50 05             \tlea    0x5(%rax),%edx\n    5733:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 573a <nodb_timer+0x996>\n    573a:\t48 63 d2             \tmovslq %edx,%rdx\n    573d:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    5741:\t48 01 d0             \tadd    %rdx,%rax\n    5744:\t48 83 c0 08          \tadd    $0x8,%rax\n    5748:\t8b 08                \tmov    (%rax),%ecx\n    574a:\t89 4d a8             \tmov    %ecx,-0x58(%rbp)\n    574d:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    5752:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5759 <nodb_timer+0x9b5>\n    5759:\te8 00 00 00 00       \tcallq  575e <nodb_timer+0x9ba>\n    575e:\t0b 45 a8             \tor     -0x58(%rbp),%eax\n    5761:\t48 83 ec 08          \tsub    $0x8,%rsp\n    5765:\t41 57                \tpush   %r15\n    5767:\t41 56                \tpush   %r14\n    5769:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 5770 <nodb_timer+0x9cc>\n    5770:\t52                   \tpush   %rdx\n    5771:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 5778 <nodb_timer+0x9d4>\n    5778:\t4c 8b 45 b0          \tmov    -0x50(%rbp),%r8\n    577c:\t44 89 e1             \tmov    %r12d,%ecx\n    577f:\t48 89 da             \tmov    %rbx,%rdx\n    5782:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5789 <nodb_timer+0x9e5>\n    5789:\t89 c7                \tmov    %eax,%edi\n    578b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5790:\t41 ff d5             \tcallq  *%r13\n    5793:\t48 83 c4 20          \tadd    $0x20,%rsp\n    5797:\te9 95 00 00 00       \tjmpq   5831 <nodb_timer+0xa8d>\n    579c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 57a3 <nodb_timer+0x9ff>\n    57a3:\t4c 8b 20             \tmov    (%rax),%r12\n    57a6:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    57aa:\t4c 8b 68 18          \tmov    0x18(%rax),%r13\n    57ae:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    57b2:\t44 8b 78 20          \tmov    0x20(%rax),%r15d\n    57b6:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    57b9:\t8d 50 05             \tlea    0x5(%rax),%edx\n    57bc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 57c3 <nodb_timer+0xa1f>\n    57c3:\t48 63 d2             \tmovslq %edx,%rdx\n    57c6:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    57ca:\t48 01 d0             \tadd    %rdx,%rax\n    57cd:\t48 8b 18             \tmov    (%rax),%rbx\n    57d0:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    57d3:\t8d 50 05             \tlea    0x5(%rax),%edx\n    57d6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 57dd <nodb_timer+0xa39>\n    57dd:\t48 63 d2             \tmovslq %edx,%rdx\n    57e0:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    57e4:\t48 01 d0             \tadd    %rdx,%rax\n    57e7:\t48 83 c0 08          \tadd    $0x8,%rax\n    57eb:\t44 8b 30             \tmov    (%rax),%r14d\n    57ee:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    57f3:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 57fa <nodb_timer+0xa56>\n    57fa:\te8 00 00 00 00       \tcallq  57ff <nodb_timer+0xa5b>\n    57ff:\t44 09 f0             \tor     %r14d,%eax\n    5802:\t48 83 ec 08          \tsub    $0x8,%rsp\n    5806:\t41 55                \tpush   %r13\n    5808:\t45 89 f9             \tmov    %r15d,%r9d\n    580b:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 5812 <nodb_timer+0xa6e>\n    5812:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 5819 <nodb_timer+0xa75>\n    5819:\t48 89 da             \tmov    %rbx,%rdx\n    581c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5823 <nodb_timer+0xa7f>\n    5823:\t89 c7                \tmov    %eax,%edi\n    5825:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    582a:\t41 ff d4             \tcallq  *%r12\n    582d:\t48 83 c4 10          \tadd    $0x10,%rsp\n    5831:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5838 <nodb_timer+0xa94>\n    5838:\t8b 00                \tmov    (%rax),%eax\n    583a:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    583d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5844 <nodb_timer+0xaa0>\n    5844:\t89 10                \tmov    %edx,(%rax)\n    5846:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    584a:\t48 89 c6             \tmov    %rax,%rsi\n    584d:\tbf 08 00 00 00       \tmov    $0x8,%edi\n    5852:\te8 00 00 00 00       \tcallq  5857 <nodb_timer+0xab3>\n    5857:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 585e <nodb_timer+0xaba>\n    585e:\t8b 00                \tmov    (%rax),%eax\n    5860:\t83 f8 01             \tcmp    $0x1,%eax\n    5863:\t0f 85 08 03 00 00    \tjne    5b71 <nodb_timer+0xdcd>\n    5869:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    586d:\t48 89 c7             \tmov    %rax,%rdi\n    5870:\te8 00 00 00 00       \tcallq  5875 <nodb_timer+0xad1>\n    5875:\t85 c0                \ttest   %eax,%eax\n    5877:\t0f 84 f4 02 00 00    \tje     5b71 <nodb_timer+0xdcd>\n    587d:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    5882:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5889 <nodb_timer+0xae5>\n    5889:\te8 00 00 00 00       \tcallq  588e <nodb_timer+0xaea>\n    588e:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    5891:\t0f 8c da 02 00 00    \tjl     5b71 <nodb_timer+0xdcd>\n    5897:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 589e <nodb_timer+0xafa>\n    589e:\t8b 00                \tmov    (%rax),%eax\n    58a0:\t85 c0                \ttest   %eax,%eax\n    58a2:\t0f 85 c9 02 00 00    \tjne    5b71 <nodb_timer+0xdcd>\n    58a8:\tc7 45 c4 ff ff ff ff \tmovl   $0xffffffff,-0x3c(%rbp)\n    58af:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 58b6 <nodb_timer+0xb12>\n    58b6:\t8b 00                \tmov    (%rax),%eax\n    58b8:\t8d 50 01             \tlea    0x1(%rax),%edx\n    58bb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 58c2 <nodb_timer+0xb1e>\n    58c2:\t89 10                \tmov    %edx,(%rax)\n    58c4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 58cb <nodb_timer+0xb27>\n    58cb:\t8b 00                \tmov    (%rax),%eax\n    58cd:\t85 c0                \ttest   %eax,%eax\n    58cf:\t0f 95 c0             \tsetne  %al\n    58d2:\t0f b6 c0             \tmovzbl %al,%eax\n    58d5:\t48 85 c0             \ttest   %rax,%rax\n    58d8:\t0f 84 46 01 00 00    \tje     5a24 <nodb_timer+0xc80>\n    58de:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 58e5 <nodb_timer+0xb41>\n    58e5:\t8b 00                \tmov    (%rax),%eax\n    58e7:\t85 c0                \ttest   %eax,%eax\n    58e9:\t0f 95 c0             \tsetne  %al\n    58ec:\t0f b6 c0             \tmovzbl %al,%eax\n    58ef:\t48 85 c0             \ttest   %rax,%rax\n    58f2:\t74 0a                \tje     58fe <nodb_timer+0xb5a>\n    58f4:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    58f7:\t89 c7                \tmov    %eax,%edi\n    58f9:\te8 00 00 00 00       \tcallq  58fe <nodb_timer+0xb5a>\n    58fe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5905 <nodb_timer+0xb61>\n    5905:\t48 8b 00             \tmov    (%rax),%rax\n    5908:\t48 85 c0             \ttest   %rax,%rax\n    590b:\t0f 95 c0             \tsetne  %al\n    590e:\t0f b6 c0             \tmovzbl %al,%eax\n    5911:\t48 85 c0             \ttest   %rax,%rax\n    5914:\t0f 84 84 00 00 00    \tje     599e <nodb_timer+0xbfa>\n    591a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5921 <nodb_timer+0xb7d>\n    5921:\t48 8b 00             \tmov    (%rax),%rax\n    5924:\t48 8b 18             \tmov    (%rax),%rbx\n    5927:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 592e <nodb_timer+0xb8a>\n    592e:\t48 8b 00             \tmov    (%rax),%rax\n    5931:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n    5935:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    5938:\t8d 50 05             \tlea    0x5(%rax),%edx\n    593b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5942 <nodb_timer+0xb9e>\n    5942:\t48 63 d2             \tmovslq %edx,%rdx\n    5945:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    5949:\t48 01 d0             \tadd    %rdx,%rax\n    594c:\t4c 8b 20             \tmov    (%rax),%r12\n    594f:\te8 00 00 00 00       \tcallq  5954 <nodb_timer+0xbb0>\n    5954:\t89 c1                \tmov    %eax,%ecx\n    5956:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 595d <nodb_timer+0xbb9>\n    595d:\t8b 10                \tmov    (%rax),%edx\n    595f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5966 <nodb_timer+0xbc2>\n    5966:\t48 8b 00             \tmov    (%rax),%rax\n    5969:\t48 83 ec 08          \tsub    $0x8,%rsp\n    596d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5974 <nodb_timer+0xbd0>\n    5974:\t56                   \tpush   %rsi\n    5975:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 597c <nodb_timer+0xbd8>\n    597c:\t56                   \tpush   %rsi\n    597d:\t53                   \tpush   %rbx\n    597e:\t45 89 e9             \tmov    %r13d,%r9d\n    5981:\t4d 89 e0             \tmov    %r12,%r8\n    5984:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 598b <nodb_timer+0xbe7>\n    598b:\t48 89 c7             \tmov    %rax,%rdi\n    598e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5993:\te8 00 00 00 00       \tcallq  5998 <nodb_timer+0xbf4>\n    5998:\t48 83 c4 20          \tadd    $0x20,%rsp\n    599c:\teb 62                \tjmp    5a00 <nodb_timer+0xc5c>\n    599e:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    59a1:\t8d 50 05             \tlea    0x5(%rax),%edx\n    59a4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 59ab <nodb_timer+0xc07>\n    59ab:\t48 63 d2             \tmovslq %edx,%rdx\n    59ae:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    59b2:\t48 01 d0             \tadd    %rdx,%rax\n    59b5:\t48 8b 18             \tmov    (%rax),%rbx\n    59b8:\te8 00 00 00 00       \tcallq  59bd <nodb_timer+0xc19>\n    59bd:\t89 c1                \tmov    %eax,%ecx\n    59bf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 59c6 <nodb_timer+0xc22>\n    59c6:\t8b 10                \tmov    (%rax),%edx\n    59c8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 59cf <nodb_timer+0xc2b>\n    59cf:\t48 8b 00             \tmov    (%rax),%rax\n    59d2:\t48 83 ec 08          \tsub    $0x8,%rsp\n    59d6:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 59dd <nodb_timer+0xc39>\n    59dd:\t56                   \tpush   %rsi\n    59de:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 59e5 <nodb_timer+0xc41>\n    59e5:\t49 89 d8             \tmov    %rbx,%r8\n    59e8:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 59ef <nodb_timer+0xc4b>\n    59ef:\t48 89 c7             \tmov    %rax,%rdi\n    59f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    59f7:\te8 00 00 00 00       \tcallq  59fc <nodb_timer+0xc58>\n    59fc:\t48 83 c4 10          \tadd    $0x10,%rsp\n    5a00:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a07 <nodb_timer+0xc63>\n    5a07:\t8b 00                \tmov    (%rax),%eax\n    5a09:\t85 c0                \ttest   %eax,%eax\n    5a0b:\t0f 95 c0             \tsetne  %al\n    5a0e:\t0f b6 c0             \tmovzbl %al,%eax\n    5a11:\t48 85 c0             \ttest   %rax,%rax\n    5a14:\t0f 84 42 01 00 00    \tje     5b5c <nodb_timer+0xdb8>\n    5a1a:\te8 00 00 00 00       \tcallq  5a1f <nodb_timer+0xc7b>\n    5a1f:\te9 38 01 00 00       \tjmpq   5b5c <nodb_timer+0xdb8>\n    5a24:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a2b <nodb_timer+0xc87>\n    5a2b:\t48 8b 00             \tmov    (%rax),%rax\n    5a2e:\t48 85 c0             \ttest   %rax,%rax\n    5a31:\t0f 95 c0             \tsetne  %al\n    5a34:\t0f b6 c0             \tmovzbl %al,%eax\n    5a37:\t48 85 c0             \ttest   %rax,%rax\n    5a3a:\t0f 84 a4 00 00 00    \tje     5ae4 <nodb_timer+0xd40>\n    5a40:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a47 <nodb_timer+0xca3>\n    5a47:\t4c 8b 28             \tmov    (%rax),%r13\n    5a4a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a51 <nodb_timer+0xcad>\n    5a51:\t48 8b 00             \tmov    (%rax),%rax\n    5a54:\t4c 8b 38             \tmov    (%rax),%r15\n    5a57:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a5e <nodb_timer+0xcba>\n    5a5e:\t48 8b 00             \tmov    (%rax),%rax\n    5a61:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n    5a65:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    5a68:\t8d 50 05             \tlea    0x5(%rax),%edx\n    5a6b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a72 <nodb_timer+0xcce>\n    5a72:\t48 63 d2             \tmovslq %edx,%rdx\n    5a75:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    5a79:\t48 01 d0             \tadd    %rdx,%rax\n    5a7c:\t48 8b 18             \tmov    (%rax),%rbx\n    5a7f:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    5a82:\t8d 50 05             \tlea    0x5(%rax),%edx\n    5a85:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a8c <nodb_timer+0xce8>\n    5a8c:\t48 63 d2             \tmovslq %edx,%rdx\n    5a8f:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    5a93:\t48 01 d0             \tadd    %rdx,%rax\n    5a96:\t48 83 c0 08          \tadd    $0x8,%rax\n    5a9a:\t44 8b 30             \tmov    (%rax),%r14d\n    5a9d:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    5aa2:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5aa9 <nodb_timer+0xd05>\n    5aa9:\te8 00 00 00 00       \tcallq  5aae <nodb_timer+0xd0a>\n    5aae:\t44 09 f0             \tor     %r14d,%eax\n    5ab1:\t48 83 ec 08          \tsub    $0x8,%rsp\n    5ab5:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 5abc <nodb_timer+0xd18>\n    5abc:\t52                   \tpush   %rdx\n    5abd:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 5ac4 <nodb_timer+0xd20>\n    5ac4:\t4d 89 f8             \tmov    %r15,%r8\n    5ac7:\t44 89 e1             \tmov    %r12d,%ecx\n    5aca:\t48 89 da             \tmov    %rbx,%rdx\n    5acd:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5ad4 <nodb_timer+0xd30>\n    5ad4:\t89 c7                \tmov    %eax,%edi\n    5ad6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5adb:\t41 ff d5             \tcallq  *%r13\n    5ade:\t48 83 c4 10          \tadd    $0x10,%rsp\n    5ae2:\teb 78                \tjmp    5b5c <nodb_timer+0xdb8>\n    5ae4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5aeb <nodb_timer+0xd47>\n    5aeb:\t4c 8b 20             \tmov    (%rax),%r12\n    5aee:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    5af1:\t8d 50 05             \tlea    0x5(%rax),%edx\n    5af4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5afb <nodb_timer+0xd57>\n    5afb:\t48 63 d2             \tmovslq %edx,%rdx\n    5afe:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    5b02:\t48 01 d0             \tadd    %rdx,%rax\n    5b05:\t48 8b 18             \tmov    (%rax),%rbx\n    5b08:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    5b0b:\t8d 50 05             \tlea    0x5(%rax),%edx\n    5b0e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5b15 <nodb_timer+0xd71>\n    5b15:\t48 63 d2             \tmovslq %edx,%rdx\n    5b18:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    5b1c:\t48 01 d0             \tadd    %rdx,%rax\n    5b1f:\t48 83 c0 08          \tadd    $0x8,%rax\n    5b23:\t44 8b 28             \tmov    (%rax),%r13d\n    5b26:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    5b2b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5b32 <nodb_timer+0xd8e>\n    5b32:\te8 00 00 00 00       \tcallq  5b37 <nodb_timer+0xd93>\n    5b37:\t44 09 e8             \tor     %r13d,%eax\n    5b3a:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 5b41 <nodb_timer+0xd9d>\n    5b41:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 5b48 <nodb_timer+0xda4>\n    5b48:\t48 89 da             \tmov    %rbx,%rdx\n    5b4b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5b52 <nodb_timer+0xdae>\n    5b52:\t89 c7                \tmov    %eax,%edi\n    5b54:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5b59:\t41 ff d4             \tcallq  *%r12\n    5b5c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5b63 <nodb_timer+0xdbf>\n    5b63:\t8b 00                \tmov    (%rax),%eax\n    5b65:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    5b68:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5b6f <nodb_timer+0xdcb>\n    5b6f:\t89 10                \tmov    %edx,(%rax)\n    5b71:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5b75:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    5b79:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    5b7d:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    5b81:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    5b86:\t48 89 c7             \tmov    %rax,%rdi\n    5b89:\te8 f1 a4 ff ff       \tcallq  7f <update_stat>\n    5b8e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5b92:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    5b96:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    5b9a:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    5b9e:\t48 89 d6             \tmov    %rdx,%rsi\n    5ba1:\t48 89 c7             \tmov    %rax,%rdi\n    5ba4:\te8 00 00 00 00       \tcallq  5ba9 <nodb_timer+0xe05>\n    5ba9:\t90                   \tnop\n    5baa:\t48 8d 65 d8          \tlea    -0x28(%rbp),%rsp\n    5bae:\t5b                   \tpop    %rbx\n    5baf:\t41 5c                \tpop    %r12\n    5bb1:\t41 5d                \tpop    %r13\n    5bb3:\t41 5e                \tpop    %r14\n    5bb5:\t41 5f                \tpop    %r15\n    5bb7:\t5d                   \tpop    %rbp\n    5bb8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall nodb_timer(unsigned int *a1) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  int v4;\n  const char *v5;\n  const char *v6;\n  unsigned int v7;\n  int v8;\n  const char *v9;\n  unsigned int v10;\n  const char *v11;\n  unsigned int v12;\n  __int64 v13;\n  int v14;\n  const char *v15;\n  unsigned int v16;\n  __int64 v17;\n  int v18;\n  __int64 v19;\n  void (*v20)(_QWORD, const char *, ...);\n  __int64 v21;\n  int v22;\n  const char *v23;\n  __int64 v24;\n  int v25;\n  unsigned int v26;\n  __int64 result;\n  const char *v28;\n  unsigned int v29;\n  const char *v30;\n  int v31;\n  const char *v32;\n  unsigned int v33;\n  const char *v34;\n  unsigned int v35;\n  const char *v36;\n  unsigned int v37;\n  void (*v38)(_QWORD, const char *, ...);\n  __int64 v39;\n  __int64 v40;\n  unsigned int v41;\n  __int64 v42;\n  unsigned int v43;\n  void (*v44)(_QWORD, const char *, ...);\n  __int64 v45;\n  unsigned int v46;\n  __int64 v47;\n  int v48;\n  unsigned int v49;\n  const char *v50;\n  int v51;\n  const char *v52;\n  unsigned int v53;\n  const char *v54;\n  unsigned int v55;\n  void (*v56)(_QWORD, const char *, ...);\n  __int64 v57;\n  unsigned int v58;\n  __int64 v59;\n  int v60;\n  unsigned int v61;\n  void (*v62)(_QWORD, const char *, ...);\n  const char *v63;\n  int v64;\n  unsigned int v65;\n  __int64 v66;\n  unsigned int v67;\n  int v68;\n  __int64 v69;\n  unsigned int v70;\n  const char *v71;\n  unsigned int v72;\n  __int64 v73;\n  unsigned int v74;\n  const char *v75;\n  unsigned int v76;\n  unsigned int v77;\n  const char *v78;\n  unsigned int v79;\n  unsigned int v80;\n  unsigned int v81;\n  unsigned int v82;\n  unsigned int v83;\n  __int64 v84;\n  unsigned int v85;\n  unsigned int v86;\n  unsigned int v87;\n  unsigned int v88;\n  __int64 v89;\n  unsigned int v90;\n  const char *v91;\n  unsigned int v92;\n  unsigned int v93;\n  const char *v94;\n  unsigned int v95;\n  __int64 v96;\n  unsigned int v97;\n  unsigned int v98;\n  unsigned int v99;\n  unsigned int v100;\n  __int64 v101;\n  unsigned int v102;\n  const char *v103;\n  unsigned int v104;\n  unsigned int v105;\n  int v106;\n  const char *v107;\n  unsigned int v108;\n  void (*v109)(__int64, const char *, ...);\n  unsigned int v110;\n  __int64 v111;\n  if ((int)get_debug_level(String, Number L) > Number && !dprint_crit) {\n    ++dprint_crit;\n    if (log_stderr) {\n      if (log_color)\n        dprint_color(Number L);\n      v1 = a1[Number];\n      v2 = *a1;\n      if (log_prefix_val) {\n        v3 = *((unsigned __int16 *)a1 + Number);\n        v107 = (const char *)*((_QWORD *)a1 + Number);\n        v102 = a1[Number];\n        v98 = *((unsigned __int16 *)a1 + Number);\n        v94 = (const char *)*((_QWORD *)a1 + Number);\n        v90 = a1[Number];\n        v4 = *((_QWORD *)a1 + Number);\n        v86 = v4 - time(Number L);\n        v82 = *((_QWORD *)a1 + Number);\n        v5 = reg_state_to_string(a1[Number]);\n        v78 = (const char *)*((_QWORD *)a1 + Number);\n        v74 = a1[Number];\n        v71 = (const char *)*log_prefix_val;\n        v68 = *((_DWORD *)log_prefix_val + Number);\n        v6 = (const char *)*((_QWORD *)&log_level_info + Number);\n        v7 = my_pid();\n        fprintf(stderr, String String, process_no, v7, v6, v68, v71, String,\n                String, v74, v78, v5, v82, v86, v90, v94, v98, v102, v107, v3,\n                v2, v1);\n      } else {\n        v108 = *((unsigned __int16 *)a1 + Number);\n        v103 = (const char *)*((_QWORD *)a1 + Number);\n        v99 = a1[Number];\n        v95 = *((unsigned __int16 *)a1 + Number);\n        v91 = (const char *)*((_QWORD *)a1 + Number);\n        v87 = a1[Number];\n        v8 = *((_QWORD *)a1 + Number);\n        v83 = v8 - time(Number L);\n        v79 = *((_QWORD *)a1 + Number);\n        v9 = reg_state_to_string(a1[Number]);\n        v75 = (const char *)*((_QWORD *)a1 + Number);\n        v10 = a1[Number];\n        v11 = (const char *)*((_QWORD *)&log_level_info + Number);\n        v12 = my_pid();\n        fprintf(stderr, String String, process_no, v12, v11, String, String,\n                v10, v75, v9, v79, v83, v87, v91, v95, v99, v103, v108, v2, v1);\n      }\n      if (log_color)\n        dprint_color_reset();\n    } else if (log_prefix_val) {\n      v109 = (void (*)(__int64, const char *, ...))km_log_func;\n      v13 = a1[Number];\n      v104 = *a1;\n      v100 = *((unsigned __int16 *)a1 + Number);\n      v96 = *((_QWORD *)a1 + Number);\n      v92 = a1[Number];\n      v88 = *((unsigned __int16 *)a1 + Number);\n      v84 = *((_QWORD *)a1 + Number);\n      v80 = a1[Number];\n      v14 = *((_QWORD *)a1 + Number);\n      v76 = v14 - time(Number L);\n      v72 = *((_QWORD *)a1 + Number);\n      v15 = reg_state_to_string(a1[Number]);\n      v69 = *((_QWORD *)a1 + Number);\n      v67 = a1[Number];\n      v66 = *log_prefix_val;\n      v16 = *((_DWORD *)log_prefix_val + Number);\n      v17 = *((_QWORD *)&log_level_info + Number);\n      v18 = *((_DWORD *)&log_level_info + Number);\n      v19 = (unsigned int)get_debug_facility(String, Number L) | v18;\n      v109(v19, String String, v17, v16, v66, String, String, v67, v69, v15,\n           v72, v76, v80, v84, v88, v92, v96, v100, v104, v13);\n    } else {\n      v20 = (void (*)(_QWORD, const char *, ...))km_log_func;\n      v21 = a1[Number];\n      v110 = *a1;\n      v105 = *((unsigned __int16 *)a1 + Number);\n      v101 = *((_QWORD *)a1 + Number);\n      v97 = a1[Number];\n      v93 = *((unsigned __int16 *)a1 + Number);\n      v89 = *((_QWORD *)a1 + Number);\n      v85 = a1[Number];\n      v22 = *((_QWORD *)a1 + Number);\n      v81 = v22 - time(Number L);\n      v77 = *((_QWORD *)a1 + Number);\n      v23 = reg_state_to_string(a1[Number]);\n      v73 = *((_QWORD *)a1 + Number);\n      v70 = a1[Number];\n      v24 = *((_QWORD *)&log_level_info + Number);\n      v25 = *((_DWORD *)&log_level_info + Number);\n      v26 = get_debug_facility(String, Number L);\n      v20(v25 | v26, String String, v24, String, String, v70, v73, v23, v77,\n          v81, v85, v89, v93, v97, v101, v105, v110, v21);\n    }\n    --dprint_crit;\n  }\n  get_act_time();\n  result = *((_QWORD *)a1 + Number) - act_time + expires_grace;\n  if (result <= Number) {\n    if ((int)get_debug_level(String, Number L) > Number && !dprint_crit) {\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color(Number L);\n        if (log_prefix_val) {\n          v28 = (const char *)*((_QWORD *)a1 + Number);\n          v29 = a1[Number];\n          v30 = (const char *)*log_prefix_val;\n          v31 = *((_DWORD *)log_prefix_val + Number);\n          v32 = (const char *)*((_QWORD *)&log_level_info + Number);\n          v33 = my_pid();\n          fprintf(stderr, String, process_no, v33, v32, v31, v30, String,\n                  String, v29, v28);\n        } else {\n          v34 = (const char *)*((_QWORD *)a1 + Number);\n          v35 = a1[Number];\n          v36 = (const char *)*((_QWORD *)&log_level_info + Number);\n          v37 = my_pid();\n          fprintf(stderr, String, process_no, v37, v36, String, String, v35,\n                  v34);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v38 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v39 = *((_QWORD *)a1 + Number);\n        v40 = a1[Number];\n        v111 = *log_prefix_val;\n        v41 = *((_DWORD *)log_prefix_val + Number);\n        v42 = *((_QWORD *)&log_level_info + Number);\n        v106 = *((_DWORD *)&log_level_info + Number);\n        v43 = get_debug_facility(String, Number L);\n        v38(v106 | v43, String, v42, v41, v111, String, String, v40, v39);\n      } else {\n        v44 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v45 = *((_QWORD *)a1 + Number);\n        v46 = a1[Number];\n        v47 = *((_QWORD *)&log_level_info + Number);\n        v48 = *((_DWORD *)&log_level_info + Number);\n        v49 = get_debug_facility(String, Number L);\n        v44(v48 | v49, String, v47, String, String, v46, v45);\n      }\n      --dprint_crit;\n    }\n    run_ul_callbacks(Number L, a1);\n    if (db_mode == Number && (unsigned int)db_delete_pcontact(a1) &&\n        (int)get_debug_level(String, Number L) >= Number && !dprint_crit) {\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color(Number);\n        if (log_prefix_val) {\n          v50 = (const char *)*log_prefix_val;\n          v51 = *((_DWORD *)log_prefix_val + Number);\n          v52 = (const char *)*((_QWORD *)&log_level_info + Number);\n          v53 = my_pid();\n          fprintf(stderr, String, process_no, v53, v52, v51, v50, String,\n                  String);\n        } else {\n          v54 = (const char *)*((_QWORD *)&log_level_info + Number);\n          v55 = my_pid();\n          fprintf(stderr, String, process_no, v55, v54, String, String);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v56 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v57 = *log_prefix_val;\n        v58 = *((_DWORD *)log_prefix_val + Number);\n        v59 = *((_QWORD *)&log_level_info + Number);\n        v60 = *((_DWORD *)&log_level_info + Number);\n        v61 = get_debug_facility(String, Number L);\n        v56(v60 | v61, String, v59, v58, v57, String, String);\n      } else {\n        v62 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v63 = (const char *)*((_QWORD *)&log_level_info + Number);\n        v64 = *((_DWORD *)&log_level_info + Number);\n        v65 = get_debug_facility(String, Number L);\n        v62(v64 | v65, String, v63, String, String);\n      }\n      --dprint_crit;\n    }\n    update_stat(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + Number) + Number L) +\n                            Number L),\n                Number);\n    result = mem_delete_pcontact(\n        *(_QWORD *)(*((_QWORD *)a1 + Number) + Number L), a1);\n  }\n  return result;\n}", "code_t": "void __cdecl nodb_timer(pcontact_t *_c) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  int v4;\n  char *v5;\n  const char *v6;\n  unsigned int v7;\n  int v8;\n  char *v9;\n  int v10;\n  const char *v11;\n  unsigned int v12;\n  __int64 v13;\n  int v14;\n  char *v15;\n  unsigned int v16;\n  __int64 v17;\n  int v18;\n  __int64 v19;\n  void (*v20)(_QWORD, const char *, ...);\n  __int64 v21;\n  int v22;\n  char *v23;\n  __int64 v24;\n  int v25;\n  unsigned int v26;\n  char *v27;\n  int v28;\n  const char *v29;\n  int v30;\n  const char *v31;\n  unsigned int v32;\n  char *v33;\n  int v34;\n  const char *v35;\n  unsigned int v36;\n  void (*v37)(_QWORD, const char *, ...);\n  char *v38;\n  __int64 v39;\n  unsigned int v40;\n  __int64 v41;\n  unsigned int v42;\n  void (*v43)(_QWORD, const char *, ...);\n  char *v44;\n  unsigned int v45;\n  __int64 v46;\n  int v47;\n  unsigned int v48;\n  const char *v49;\n  int v50;\n  const char *v51;\n  unsigned int v52;\n  const char *v53;\n  unsigned int v54;\n  void (*v55)(_QWORD, const char *, ...);\n  __int64 v56;\n  unsigned int v57;\n  __int64 v58;\n  int v59;\n  unsigned int v60;\n  void (*v61)(_QWORD, const char *, ...);\n  const char *v62;\n  int v63;\n  unsigned int v64;\n  __int64 v65;\n  unsigned int v66;\n  int v67;\n  char *v68;\n  unsigned int v69;\n  const char *v70;\n  unsigned int v71;\n  char *v72;\n  int v73;\n  char *v74;\n  unsigned int v75;\n  unsigned int v76;\n  char *v77;\n  unsigned int v78;\n  unsigned int v79;\n  unsigned int v80;\n  unsigned int v81;\n  unsigned int v82;\n  char *v83;\n  unsigned int v84;\n  unsigned int v85;\n  int v86;\n  unsigned int v87;\n  char *v88;\n  int v89;\n  char *v90;\n  unsigned int v91;\n  unsigned int v92;\n  char *v93;\n  unsigned int v94;\n  char *v95;\n  unsigned int v96;\n  unsigned int v97;\n  int v98;\n  unsigned int v99;\n  char *v100;\n  int v101;\n  char *v102;\n  unsigned int v103;\n  unsigned int v104;\n  int v105;\n  char *v106;\n  unsigned int v107;\n  void (*v108)(__int64, const char *, ...);\n  unsigned int v109;\n  __int64 v110;\n  if ((int)get_debug_level(String, Number L) > Number && !dprint_crit) {\n    ++dprint_crit;\n    if (log_stderr) {\n      if (log_color)\n        dprint_color(Number L);\n      v1 = _c->sl;\n      v2 = _c->aorhash;\n      if (log_prefix_val) {\n        v3 = _c->received_proto;\n        v106 = _c->path.s;\n        v101 = _c->path.len;\n        v97 = _c->received_port;\n        v93 = _c->received_host.s;\n        v89 = _c->received_host.len;\n        v4 = _c->expires;\n        v85 = v4 - time(Number L);\n        v81 = _c->expires;\n        v5 = reg_state_to_string(_c->reg_state);\n        v77 = _c->aor.s;\n        v73 = _c->aor.len;\n        v70 = (const char *)*log_prefix_val;\n        v67 = *((_DWORD *)log_prefix_val + Number);\n        v6 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n        v7 = my_pid();\n        fprintf(stderr, String String, process_no, v7, v6, v67, v70, String,\n                String, v73, v77, v5, v81, v85, v89, v93, v97, v101, v106, v3,\n                v2, v1);\n      } else {\n        v107 = _c->received_proto;\n        v102 = _c->path.s;\n        v98 = _c->path.len;\n        v94 = _c->received_port;\n        v90 = _c->received_host.s;\n        v86 = _c->received_host.len;\n        v8 = _c->expires;\n        v82 = v8 - time(Number L);\n        v78 = _c->expires;\n        v9 = reg_state_to_string(_c->reg_state);\n        v74 = _c->aor.s;\n        v10 = _c->aor.len;\n        v11 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n        v12 = my_pid();\n        fprintf(stderr, String String, process_no, v12, v11, String, String,\n                v10, v74, v9, v78, v82, v86, v90, v94, v98, v102, v107, v2, v1);\n      }\n      if (log_color)\n        dprint_color_reset();\n    } else if (log_prefix_val) {\n      v108 = (void (*)(__int64, const char *, ...))km_log_func;\n      v13 = _c->sl;\n      v103 = _c->aorhash;\n      v99 = _c->received_proto;\n      v95 = _c->path.s;\n      v91 = _c->path.len;\n      v87 = _c->received_port;\n      v83 = _c->received_host.s;\n      v79 = _c->received_host.len;\n      v14 = _c->expires;\n      v75 = v14 - time(Number L);\n      v71 = _c->expires;\n      v15 = reg_state_to_string(_c->reg_state);\n      v68 = _c->aor.s;\n      v66 = _c->aor.len;\n      v65 = *log_prefix_val;\n      v16 = *((_DWORD *)log_prefix_val + Number);\n      v17 = *((_QWORD *)&log_level_info_0 + Number);\n      v18 = *((_DWORD *)&log_level_info_0 + Number);\n      v19 = (unsigned int)get_debug_facility(String, Number L) | v18;\n      v108(v19, String String, v17, v16, v65, String, String, v66, v68, v15,\n           v71, v75, v79, v83, v87, v91, v95, v99, v103, v13);\n    } else {\n      v20 = (void (*)(_QWORD, const char *, ...))km_log_func;\n      v21 = _c->sl;\n      v109 = _c->aorhash;\n      v104 = _c->received_proto;\n      v100 = _c->path.s;\n      v96 = _c->path.len;\n      v92 = _c->received_port;\n      v88 = _c->received_host.s;\n      v84 = _c->received_host.len;\n      v22 = _c->expires;\n      v80 = v22 - time(Number L);\n      v76 = _c->expires;\n      v23 = reg_state_to_string(_c->reg_state);\n      v72 = _c->aor.s;\n      v69 = _c->aor.len;\n      v24 = *((_QWORD *)&log_level_info_0 + Number);\n      v25 = *((_DWORD *)&log_level_info_0 + Number);\n      v26 = get_debug_facility(String, Number L);\n      v20(v25 | v26, String String, v24, String, String, v69, v72, v23, v76,\n          v80, v84, v88, v92, v96, v100, v104, v109, v21);\n    }\n    --dprint_crit;\n  }\n  get_act_time();\n  if (_c->expires - act_time + expires_grace <= Number) {\n    if ((int)get_debug_level(String, Number L) > Number && !dprint_crit) {\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color(Number L);\n        if (log_prefix_val) {\n          v27 = _c->aor.s;\n          v28 = _c->aor.len;\n          v29 = (const char *)*log_prefix_val;\n          v30 = *((_DWORD *)log_prefix_val + Number);\n          v31 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n          v32 = my_pid();\n          fprintf(stderr, String, process_no, v32, v31, v30, v29, String,\n                  String, v28, v27);\n        } else {\n          v33 = _c->aor.s;\n          v34 = _c->aor.len;\n          v35 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n          v36 = my_pid();\n          fprintf(stderr, String, process_no, v36, v35, String, String, v34,\n                  v33);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v37 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v38 = _c->aor.s;\n        v39 = (unsigned int)_c->aor.len;\n        v110 = *log_prefix_val;\n        v40 = *((_DWORD *)log_prefix_val + Number);\n        v41 = *((_QWORD *)&log_level_info_0 + Number);\n        v105 = *((_DWORD *)&log_level_info_0 + Number);\n        v42 = get_debug_facility(String, Number L);\n        v37(v105 | v42, String, v41, v40, v110, String, String, v39, v38);\n      } else {\n        v43 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v44 = _c->aor.s;\n        v45 = _c->aor.len;\n        v46 = *((_QWORD *)&log_level_info_0 + Number);\n        v47 = *((_DWORD *)&log_level_info_0 + Number);\n        v48 = get_debug_facility(String, Number L);\n        v43(v47 | v48, String, v46, String, String, v45, v44);\n      }\n      --dprint_crit;\n    }\n    run_ul_callbacks(Number L, _c);\n    if (db_mode == Number && (unsigned int)db_delete_pcontact(_c) &&\n        (int)get_debug_level(String, Number L) >= Number && !dprint_crit) {\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color(Number);\n        if (log_prefix_val) {\n          v49 = (const char *)*log_prefix_val;\n          v50 = *((_DWORD *)log_prefix_val + Number);\n          v51 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n          v52 = my_pid();\n          fprintf(stderr, String, process_no, v52, v51, v50, v49, String,\n                  String);\n        } else {\n          v53 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n          v54 = my_pid();\n          fprintf(stderr, String, process_no, v54, v53, String, String);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v55 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v56 = *log_prefix_val;\n        v57 = *((_DWORD *)log_prefix_val + Number);\n        v58 = *((_QWORD *)&log_level_info_0 + Number);\n        v59 = *((_DWORD *)&log_level_info_0 + Number);\n        v60 = get_debug_facility(String, Number L);\n        v55(v59 | v60, String, v58, v57, v56, String, String);\n      } else {\n        v61 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v62 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n        v63 = *((_DWORD *)&log_level_info_0 + Number);\n        v64 = get_debug_facility(String, Number L);\n        v61(v63 | v64, String, v62, String, String);\n      }\n      --dprint_crit;\n    }\n    update_stat(_c->slot->d->expired, Number);\n    mem_delete_pcontact(_c->slot->d, _c);\n  }\n}", "var": [], "body_in_train": false}, {"repo_owner": "popo55668", "repo_name": "DAG-Aware-MIG-Rewriting", "path": "popo55668/DAG-Aware-MIG-Rewriting/9677f5cd0e817ec34d957bbe33275d4293ec3ab99f96f49190c0ebc569afb9a9", "path_in_repo": "popo55668/DAG-Aware-MIG-Rewriting//src/opt/mig/migFadds.o", "objdump": "0000000000000076 <Vec_IntFree>:\n      76:\t55                   \tpush   %rbp\n      77:\t48 89 e5             \tmov    %rsp,%rbp\n      7a:\t48 83 ec 10          \tsub    $0x10,%rsp\n      7e:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n      82:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      86:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n      8a:\t48 85 c0             \ttest   %rax,%rax\n      8d:\t74 1c                \tje     ab <Vec_IntFree+0x35>\n      8f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      93:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n      97:\t48 89 c7             \tmov    %rax,%rdi\n      9a:\te8 00 00 00 00       \tcallq  9f <Vec_IntFree+0x29>\n      9f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      a3:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n      aa:\t00 \n      ab:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n      b0:\t74 14                \tje     c6 <Vec_IntFree+0x50>\n      b2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      b6:\t48 89 c7             \tmov    %rax,%rdi\n      b9:\te8 00 00 00 00       \tcallq  be <Vec_IntFree+0x48>\n      be:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n      c5:\t00 \n      c6:\t90                   \tnop\n      c7:\tc9                   \tleaveq \n      c8:\tc3                   \tretq   ", "code_s": "void __fastcall Vec_IntFree(void **a1) {\n  if (a1[Number]) {\n    free(a1[Number]);\n    a1[Number] = Number L;\n  }\n  if (a1)\n    free(a1);\n}", "code_t": "void __cdecl Vec_IntFree(Vec_Int_t *p) {\n  if (p->pArray) {\n    free(p->pArray);\n    p->pArray = Number L;\n  }\n  if (p)\n    free(p);\n}", "var": [], "body_in_train": true}, {"repo_owner": "vmware", "repo_name": "likewise-open", "path": "vmware/likewise-open/804f97446220d375cafe88a3f03f0efdb56bc424111ec325b5a425780dd49d85", "path_in_repo": "vmware/likewise-open/openssl/test/dhtest", "objdump": "000000000042de42 <ASN1_get_object>:\n  42de42:\t55                   \tpush   %rbp\n  42de43:\t48 89 e5             \tmov    %rsp,%rbp\n  42de46:\t48 83 ec 70          \tsub    $0x70,%rsp\n  42de4a:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  42de4e:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  42de52:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n  42de56:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n  42de5a:\t4c 89 45 98          \tmov    %r8,-0x68(%rbp)\n  42de5e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  42de62:\t48 8b 00             \tmov    (%rax),%rax\n  42de65:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  42de69:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  42de6d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  42de71:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  42de76:\t0f 84 8f 01 00 00    \tje     42e00b <ASN1_get_object+0x1c9>\n  42de7c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  42de80:\t0f b6 00             \tmovzbl (%rax),%eax\n  42de83:\t0f b6 c0             \tmovzbl %al,%eax\n  42de86:\t83 e0 20             \tand    $0x20,%eax\n  42de89:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42de8c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  42de90:\t0f b6 00             \tmovzbl (%rax),%eax\n  42de93:\t0f b6 c0             \tmovzbl %al,%eax\n  42de96:\t25 c0 00 00 00       \tand    $0xc0,%eax\n  42de9b:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  42de9e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  42dea2:\t0f b6 00             \tmovzbl (%rax),%eax\n  42dea5:\t0f b6 c0             \tmovzbl %al,%eax\n  42dea8:\t83 e0 1f             \tand    $0x1f,%eax\n  42deab:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  42deae:\t83 7d d8 1f          \tcmpl   $0x1f,-0x28(%rbp)\n  42deb2:\t0f 85 a7 00 00 00    \tjne    42df5f <ASN1_get_object+0x11d>\n  42deb8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  42debc:\t48 83 c0 01          \tadd    $0x1,%rax\n  42dec0:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  42dec4:\t48 83 6d e0 01       \tsubq   $0x1,-0x20(%rbp)\n  42dec9:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  42dece:\t0f 84 3a 01 00 00    \tje     42e00e <ASN1_get_object+0x1cc>\n  42ded4:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  42dedb:\t00 \n  42dedc:\teb 3e                \tjmp    42df1c <ASN1_get_object+0xda>\n  42dede:\t48 c1 65 f0 07       \tshlq   $0x7,-0x10(%rbp)\n  42dee3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  42dee7:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  42deeb:\t48 89 55 d0          \tmov    %rdx,-0x30(%rbp)\n  42deef:\t0f b6 00             \tmovzbl (%rax),%eax\n  42def2:\t0f b6 c0             \tmovzbl %al,%eax\n  42def5:\t83 e0 7f             \tand    $0x7f,%eax\n  42def8:\t48 98                \tcltq   \n  42defa:\t48 09 45 f0          \tor     %rax,-0x10(%rbp)\n  42defe:\t48 83 6d e0 01       \tsubq   $0x1,-0x20(%rbp)\n  42df03:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  42df08:\t0f 84 03 01 00 00    \tje     42e011 <ASN1_get_object+0x1cf>\n  42df0e:\t48 81 7d f0 ff ff ff \tcmpq   $0xffffff,-0x10(%rbp)\n  42df15:\t00 \n  42df16:\t0f 8f f8 00 00 00    \tjg     42e014 <ASN1_get_object+0x1d2>\n  42df1c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  42df20:\t0f b6 00             \tmovzbl (%rax),%eax\n  42df23:\t84 c0                \ttest   %al,%al\n  42df25:\t78 b7                \tjs     42dede <ASN1_get_object+0x9c>\n  42df27:\t48 c1 65 f0 07       \tshlq   $0x7,-0x10(%rbp)\n  42df2c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  42df30:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  42df34:\t48 89 55 d0          \tmov    %rdx,-0x30(%rbp)\n  42df38:\t0f b6 00             \tmovzbl (%rax),%eax\n  42df3b:\t0f b6 c0             \tmovzbl %al,%eax\n  42df3e:\t83 e0 7f             \tand    $0x7f,%eax\n  42df41:\t48 98                \tcltq   \n  42df43:\t48 09 45 f0          \tor     %rax,-0x10(%rbp)\n  42df47:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  42df4b:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  42df4e:\t48 83 6d e0 01       \tsubq   $0x1,-0x20(%rbp)\n  42df53:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  42df58:\t75 27                \tjne    42df81 <ASN1_get_object+0x13f>\n  42df5a:\te9 bc 00 00 00       \tjmpq   42e01b <ASN1_get_object+0x1d9>\n  42df5f:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  42df62:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  42df65:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  42df69:\t48 83 c0 01          \tadd    $0x1,%rax\n  42df6d:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  42df71:\t48 83 6d e0 01       \tsubq   $0x1,-0x20(%rbp)\n  42df76:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  42df7b:\t0f 84 96 00 00 00    \tje     42e017 <ASN1_get_object+0x1d5>\n  42df81:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  42df85:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  42df88:\t89 10                \tmov    %edx,(%rax)\n  42df8a:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  42df8e:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  42df91:\t89 10                \tmov    %edx,(%rax)\n  42df93:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  42df97:\t89 c1                \tmov    %eax,%ecx\n  42df99:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  42df9d:\t48 8d 75 cc          \tlea    -0x34(%rbp),%rsi\n  42dfa1:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  42dfa5:\t48 89 c7             \tmov    %rax,%rdi\n  42dfa8:\te8 94 00 00 00       \tcallq  42e041 <asn1_get_length>\n  42dfad:\t85 c0                \ttest   %eax,%eax\n  42dfaf:\t74 69                \tje     42e01a <ASN1_get_object+0x1d8>\n  42dfb1:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  42dfb5:\t48 8b 10             \tmov    (%rax),%rdx\n  42dfb8:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  42dfbc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  42dfc0:\t48 8b 00             \tmov    (%rax),%rax\n  42dfc3:\t48 29 c1             \tsub    %rax,%rcx\n  42dfc6:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  42dfca:\t48 29 c8             \tsub    %rcx,%rax\n  42dfcd:\t48 39 c2             \tcmp    %rax,%rdx\n  42dfd0:\t7e 26                \tjle    42dff8 <ASN1_get_object+0x1b6>\n  42dfd2:\t41 b8 8e 00 00 00    \tmov    $0x8e,%r8d\n  42dfd8:\tb9 a9 b8 44 00       \tmov    $0x44b8a9,%ecx\n  42dfdd:\tba 9b 00 00 00       \tmov    $0x9b,%edx\n  42dfe2:\tbe 72 00 00 00       \tmov    $0x72,%esi\n  42dfe7:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n  42dfec:\te8 7b e7 fe ff       \tcallq  41c76c <ERR_put_error>\n  42dff1:\t81 4d fc 80 00 00 00 \torl    $0x80,-0x4(%rbp)\n  42dff8:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  42dffc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  42e000:\t48 89 10             \tmov    %rdx,(%rax)\n  42e003:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  42e006:\t0b 45 fc             \tor     -0x4(%rbp),%eax\n  42e009:\teb 34                \tjmp    42e03f <ASN1_get_object+0x1fd>\n  42e00b:\t90                   \tnop\n  42e00c:\teb 0d                \tjmp    42e01b <ASN1_get_object+0x1d9>\n  42e00e:\t90                   \tnop\n  42e00f:\teb 0a                \tjmp    42e01b <ASN1_get_object+0x1d9>\n  42e011:\t90                   \tnop\n  42e012:\teb 07                \tjmp    42e01b <ASN1_get_object+0x1d9>\n  42e014:\t90                   \tnop\n  42e015:\teb 04                \tjmp    42e01b <ASN1_get_object+0x1d9>\n  42e017:\t90                   \tnop\n  42e018:\teb 01                \tjmp    42e01b <ASN1_get_object+0x1d9>\n  42e01a:\t90                   \tnop\n  42e01b:\t41 b8 96 00 00 00    \tmov    $0x96,%r8d\n  42e021:\tb9 a9 b8 44 00       \tmov    $0x44b8a9,%ecx\n  42e026:\tba 7b 00 00 00       \tmov    $0x7b,%edx\n  42e02b:\tbe 72 00 00 00       \tmov    $0x72,%esi\n  42e030:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n  42e035:\te8 32 e7 fe ff       \tcallq  41c76c <ERR_put_error>\n  42e03a:\tb8 80 00 00 00       \tmov    $0x80,%eax\n  42e03f:\tc9                   \tleaveq \n  42e040:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ASN1_get_object(_BYTE **a1, _QWORD *a2, _DWORD *a3,\n                                   _DWORD *a4, __int64 a5) {\n  _BYTE *v5;\n  _BYTE *v6;\n  unsigned int v9;\n  _BYTE *v10;\n  int v11;\n  int v12;\n  __int64 v13;\n  int v14;\n  __int64 v15;\n  int v16;\n  v10 = *a1;\n  v13 = a5;\n  if (!a5)\n    goto LABEL_15;\n  v16 = *v10 & Number;\n  v12 = *v10 & Number;\n  v11 = *v10 & Number;\n  if (v11 == Number) {\n    ++v10;\n    if (!--v13)\n      goto LABEL_15;\n    v15 = Number L;\n    while ((char)*v10 < Number) {\n      v5 = v10++;\n      v15 = *v5 & Number | (unsigned __int64)(v15 << Number);\n      if (!--v13 || v15 > Number)\n        goto LABEL_15;\n    }\n    v6 = v10++;\n    v15 = *v6 & Number | (unsigned __int64)(v15 << Number);\n    v14 = v15;\n    if (!--v13)\n      goto LABEL_15;\n  } else {\n    v14 = v11;\n    ++v10;\n    if (!--v13) {\n    LABEL_15:\n      ERR_put_error(Number, Number, Number, (__int64)String, Number);\n      return Number L;\n    }\n  }\n  *a3 = v14;\n  *a4 = v12;\n  if (!(unsigned int)asn1_get_length(&v10, &v9, a2, (unsigned int)v13))\n    goto LABEL_15;\n  if (*a2 > a5 - (v10 - *a1)) {\n    ERR_put_error(Number, Number, Number, (__int64)String, Number);\n    v16 |= Number;\n  }\n  *a1 = v10;\n  return v16 | v9;\n}", "code_t": "int __cdecl ASN1_get_object(const unsigned __int8 **pp, __int64 *plength,\n                            int *ptag, int *pclass, __int64 omax) {\n  const unsigned __int8 *v5;\n  const unsigned __int8 *v6;\n  int inf;\n  const unsigned __int8 *p;\n  int i;\n  int xclass;\n  __int64 max;\n  int tag;\n  __int64 l;\n  int ret;\n  p = *pp;\n  max = omax;\n  if (!omax)\n    goto err;\n  ret = *p & Number;\n  xclass = *p & Number;\n  i = *p & Number;\n  if (i == Number) {\n    ++p;\n    if (!--max)\n      goto err;\n    l = Number L;\n    while (*(char *)p < Number) {\n      v5 = p++;\n      l = *v5 & Number | (unsigned __int64)(l << Number);\n      if (!--max || l > Number)\n        goto err;\n    }\n    v6 = p++;\n    l = *v6 & Number | (unsigned __int64)(l << Number);\n    tag = l;\n    if (!--max)\n      goto err;\n  } else {\n    tag = i;\n    ++p;\n    if (!--max) {\n    err:\n      ERR_put_error(Number, Number, Number, String, Number);\n      return Number;\n    }\n  }\n  *ptag = tag;\n  *pclass = xclass;\n  if (!asn1_get_length(&p, &inf, plength, max))\n    goto err;\n  if (*plength > omax - (p - *pp)) {\n    ERR_put_error(Number, Number, Number, String, Number);\n    ret |= Number;\n  }\n  *pp = p;\n  return ret | inf;\n}", "var": [], "body_in_train": true}, {"repo_owner": "NetApp", "repo_name": "zufs-zuf", "path": "NetApp/zufs-zuf/67b8d4aff9f48b810c5cf6c703c786f2495017e6f081718e6ae6485ca9b8a0d5", "path_in_repo": "NetApp/zufs-zuf/tools/testing/selftests/bpf/test_btf_dump", "objdump": "0000000000414bee <btf_dedup_merge_hypot_map>:\n  414bee:\t55                   \tpush   %rbp\n  414bef:\t48 89 e5             \tmov    %rsp,%rbp\n  414bf2:\t48 83 ec 28          \tsub    $0x28,%rsp\n  414bf6:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  414bfa:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  414c01:\te9 4c 01 00 00       \tjmpq   414d52 <btf_dedup_merge_hypot_map+0x164>\n  414c06:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414c0a:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  414c0e:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  414c11:\t48 63 d2             \tmovslq %edx,%rdx\n  414c14:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  414c18:\t48 01 d0             \tadd    %rdx,%rax\n  414c1b:\t8b 00                \tmov    (%rax),%eax\n  414c1d:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  414c20:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414c24:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  414c28:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  414c2b:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  414c2f:\t48 01 d0             \tadd    %rdx,%rax\n  414c32:\t8b 00                \tmov    (%rax),%eax\n  414c34:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  414c37:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  414c3a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414c3e:\t89 d6                \tmov    %edx,%esi\n  414c40:\t48 89 c7             \tmov    %rax,%rdi\n  414c43:\te8 f8 f9 ff ff       \tcallq  414640 <resolve_type_id>\n  414c48:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  414c4b:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  414c4e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414c52:\t89 d6                \tmov    %edx,%esi\n  414c54:\t48 89 c7             \tmov    %rax,%rdi\n  414c57:\te8 e4 f9 ff ff       \tcallq  414640 <resolve_type_id>\n  414c5c:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  414c5f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414c63:\t48 8b 00             \tmov    (%rax),%rax\n  414c66:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  414c6a:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  414c6d:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  414c71:\t48 01 d0             \tadd    %rdx,%rax\n  414c74:\t48 8b 00             \tmov    (%rax),%rax\n  414c77:\t8b 40 04             \tmov    0x4(%rax),%eax\n  414c7a:\tc1 e8 18             \tshr    $0x18,%eax\n  414c7d:\t83 e0 0f             \tand    $0xf,%eax\n  414c80:\t66 89 45 ea          \tmov    %ax,-0x16(%rbp)\n  414c84:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414c88:\t48 8b 00             \tmov    (%rax),%rax\n  414c8b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  414c8f:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  414c92:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  414c96:\t48 01 d0             \tadd    %rdx,%rax\n  414c99:\t48 8b 00             \tmov    (%rax),%rax\n  414c9c:\t8b 40 04             \tmov    0x4(%rax),%eax\n  414c9f:\tc1 e8 18             \tshr    $0x18,%eax\n  414ca2:\t83 e0 0f             \tand    $0xf,%eax\n  414ca5:\t66 89 45 e8          \tmov    %ax,-0x18(%rbp)\n  414ca9:\t66 83 7d ea 07       \tcmpw   $0x7,-0x16(%rbp)\n  414cae:\t74 20                \tje     414cd0 <btf_dedup_merge_hypot_map+0xe2>\n  414cb0:\t66 83 7d e8 07       \tcmpw   $0x7,-0x18(%rbp)\n  414cb5:\t75 19                \tjne    414cd0 <btf_dedup_merge_hypot_map+0xe2>\n  414cb7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414cbb:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  414cbf:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  414cc2:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  414cc6:\t48 01 c2             \tadd    %rax,%rdx\n  414cc9:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  414ccc:\t89 02                \tmov    %eax,(%rdx)\n  414cce:\teb 25                \tjmp    414cf5 <btf_dedup_merge_hypot_map+0x107>\n  414cd0:\t66 83 7d ea 07       \tcmpw   $0x7,-0x16(%rbp)\n  414cd5:\t75 1e                \tjne    414cf5 <btf_dedup_merge_hypot_map+0x107>\n  414cd7:\t66 83 7d e8 07       \tcmpw   $0x7,-0x18(%rbp)\n  414cdc:\t74 17                \tje     414cf5 <btf_dedup_merge_hypot_map+0x107>\n  414cde:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414ce2:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  414ce6:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  414ce9:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  414ced:\t48 01 c2             \tadd    %rax,%rdx\n  414cf0:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  414cf3:\t89 02                \tmov    %eax,(%rdx)\n  414cf5:\t66 83 7d ea 04       \tcmpw   $0x4,-0x16(%rbp)\n  414cfa:\t74 07                \tje     414d03 <btf_dedup_merge_hypot_map+0x115>\n  414cfc:\t66 83 7d ea 05       \tcmpw   $0x5,-0x16(%rbp)\n  414d01:\t75 4b                \tjne    414d4e <btf_dedup_merge_hypot_map+0x160>\n  414d03:\t66 83 7d e8 07       \tcmpw   $0x7,-0x18(%rbp)\n  414d08:\t74 44                \tje     414d4e <btf_dedup_merge_hypot_map+0x160>\n  414d0a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  414d0d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414d11:\t89 d6                \tmov    %edx,%esi\n  414d13:\t48 89 c7             \tmov    %rax,%rdi\n  414d16:\te8 ff f8 ff ff       \tcallq  41461a <is_type_mapped>\n  414d1b:\t84 c0                \ttest   %al,%al\n  414d1d:\t74 2f                \tje     414d4e <btf_dedup_merge_hypot_map+0x160>\n  414d1f:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  414d22:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414d26:\t89 d6                \tmov    %edx,%esi\n  414d28:\t48 89 c7             \tmov    %rax,%rdi\n  414d2b:\te8 ea f8 ff ff       \tcallq  41461a <is_type_mapped>\n  414d30:\t83 f0 01             \txor    $0x1,%eax\n  414d33:\t84 c0                \ttest   %al,%al\n  414d35:\t74 17                \tje     414d4e <btf_dedup_merge_hypot_map+0x160>\n  414d37:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414d3b:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  414d3f:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  414d42:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  414d46:\t48 01 c2             \tadd    %rax,%rdx\n  414d49:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  414d4c:\t89 02                \tmov    %eax,(%rdx)\n  414d4e:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  414d52:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  414d55:\t48 63 d0             \tmovslq %eax,%rdx\n  414d58:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  414d5c:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  414d60:\t48 39 c2             \tcmp    %rax,%rdx\n  414d63:\t0f 82 9d fe ff ff    \tjb     414c06 <btf_dedup_merge_hypot_map+0x18>\n  414d69:\t90                   \tnop\n  414d6a:\t90                   \tnop\n  414d6b:\tc9                   \tleaveq \n  414d6c:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall btf_dedup_merge_hypot_map(_QWORD *a1) {\n  unsigned __int64 result;\n  __int16 v2;\n  __int16 v3;\n  unsigned int v4;\n  unsigned int v5;\n  unsigned int v6;\n  int i;\n  for (i = Number;; ++i) {\n    result = a1[Number];\n    if (i >= result)\n      break;\n    v6 = *(_DWORD *)(Number L * i + a1[Number]);\n    v5 = resolve_type_id((__int64)a1, *(_DWORD *)(Number L * v6 + a1[Number]));\n    v4 = resolve_type_id((__int64)a1, v6);\n    v3 = HIBYTE(*(_DWORD *)(*(_QWORD *)(Number L * v5 +\n                                        *(_QWORD *)(*a1 + Number L)) +\n                            Number L)) &\n         Number;\n    v2 = HIBYTE(*(_DWORD *)(*(_QWORD *)(Number L * v4 +\n                                        *(_QWORD *)(*a1 + Number L)) +\n                            Number L)) &\n         Number;\n    if (v3 == Number || v2 != Number) {\n      if (v3 == Number && v2 != Number)\n        *(_DWORD *)(a1[Number] + Number L * v5) = v4;\n    } else {\n      *(_DWORD *)(a1[Number] + Number L * v4) = v5;\n    }\n    if ((v3 == Number || v3 == Number) && v2 != Number &&\n        is_type_mapped((__int64)a1, v4) && !is_type_mapped((__int64)a1, v5))\n      *(_DWORD *)(a1[Number] + Number L * v5) = v4;\n  }\n  return result;\n}", "code_t": "void __cdecl btf_dedup_merge_hypot_map(btf_dedup *d) {\n  __u16 c_kind;\n  __u16 t_kind;\n  uint32_t c_id;\n  uint32_t t_id;\n  __u32 cand_type_id;\n  int i;\n  for (i = Number; i < d->hypot_cnt; ++i) {\n    cand_type_id = d->hypot_list[i];\n    t_id = resolve_type_id(d, d->hypot_map[cand_type_id]);\n    c_id = resolve_type_id(d, cand_type_id);\n    t_kind = HIBYTE(d->btf->types[t_id]->info) & Number;\n    c_kind = HIBYTE(d->btf->types[c_id]->info) & Number;\n    if (t_kind == Number || c_kind != Number) {\n      if (t_kind == Number && c_kind != Number)\n        d->map[t_id] = c_id;\n    } else {\n      d->map[c_id] = t_id;\n    }\n    if ((t_kind == Number || t_kind == Number) && c_kind != Number &&\n        is_type_mapped(d, c_id) && !is_type_mapped(d, t_id))\n      d->map[t_id] = c_id;\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "s3lsensor", "repo_name": "snowfort", "path": "s3lsensor/snowfort/10666a30725ea337613ca7d127e6d5b357b5cd696d7d2eabea34eece38343d44", "path_in_repo": "s3lsensor/snowfort/examples/netperf/obj_native/rudolph0.o", "objdump": "00000000000005d8 <rudolph0_set_version>:\n 5d8:\t55                   \tpush   %rbp\n 5d9:\t48 89 e5             \tmov    %rsp,%rbp\n 5dc:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n 5e0:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n 5e3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 5e6:\t89 c2                \tmov    %eax,%edx\n 5e8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 5ec:\t88 90 13 01 00 00    \tmov    %dl,0x113(%rax)\n 5f2:\t90                   \tnop\n 5f3:\t5d                   \tpop    %rbp\n 5f4:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall rudolph0_set_version(__int64 a1, char a2) {\n  __int64 result;\n  result = a1;\n  *(_BYTE *)(a1 + Number) = a2;\n  return result;\n}", "code_t": "void __cdecl rudolph0_set_version(rudolph0_conn *c, int version) {\n  c->current.h.version = version;\n}", "var": [], "body_in_train": true}, {"repo_owner": "avble", "repo_name": "natClientEx", "path": "avble/natClientEx/a360aed68a7016f580649d16dacbf62c5871877259fd2ac35a159812917aa7c5", "path_in_repo": "avble/natClientEx/pjproject-2.5/pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/playsine", "objdump": "000000000042b73f <sha1_core>:\n  42b73f:\t55                   \tpush   %rbp\n  42b740:\t48 89 e5             \tmov    %rsp,%rbp\n  42b743:\t48 81 ec 80 01 00 00 \tsub    $0x180,%rsp\n  42b74a:\t48 89 bd 88 fe ff ff \tmov    %rdi,-0x178(%rbp)\n  42b751:\t48 89 b5 80 fe ff ff \tmov    %rsi,-0x180(%rbp)\n  42b758:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  42b75f:\t8b 00                \tmov    (%rax),%eax\n  42b761:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  42b764:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  42b76b:\t8b 40 04             \tmov    0x4(%rax),%eax\n  42b76e:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  42b771:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  42b778:\t8b 40 08             \tmov    0x8(%rax),%eax\n  42b77b:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  42b77e:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  42b785:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  42b788:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  42b78b:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  42b792:\t8b 40 10             \tmov    0x10(%rax),%eax\n  42b795:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  42b798:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b79f:\t8b 00                \tmov    (%rax),%eax\n  42b7a1:\t89 c7                \tmov    %eax,%edi\n  42b7a3:\te8 98 a1 fd ff       \tcallq  405940 <ntohl@plt>\n  42b7a8:\t89 85 90 fe ff ff    \tmov    %eax,-0x170(%rbp)\n  42b7ae:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b7b5:\t48 83 c0 04          \tadd    $0x4,%rax\n  42b7b9:\t8b 00                \tmov    (%rax),%eax\n  42b7bb:\t89 c7                \tmov    %eax,%edi\n  42b7bd:\te8 7e a1 fd ff       \tcallq  405940 <ntohl@plt>\n  42b7c2:\t89 85 94 fe ff ff    \tmov    %eax,-0x16c(%rbp)\n  42b7c8:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b7cf:\t48 83 c0 08          \tadd    $0x8,%rax\n  42b7d3:\t8b 00                \tmov    (%rax),%eax\n  42b7d5:\t89 c7                \tmov    %eax,%edi\n  42b7d7:\te8 64 a1 fd ff       \tcallq  405940 <ntohl@plt>\n  42b7dc:\t89 85 98 fe ff ff    \tmov    %eax,-0x168(%rbp)\n  42b7e2:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b7e9:\t48 83 c0 0c          \tadd    $0xc,%rax\n  42b7ed:\t8b 00                \tmov    (%rax),%eax\n  42b7ef:\t89 c7                \tmov    %eax,%edi\n  42b7f1:\te8 4a a1 fd ff       \tcallq  405940 <ntohl@plt>\n  42b7f6:\t89 85 9c fe ff ff    \tmov    %eax,-0x164(%rbp)\n  42b7fc:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b803:\t48 83 c0 10          \tadd    $0x10,%rax\n  42b807:\t8b 00                \tmov    (%rax),%eax\n  42b809:\t89 c7                \tmov    %eax,%edi\n  42b80b:\te8 30 a1 fd ff       \tcallq  405940 <ntohl@plt>\n  42b810:\t89 85 a0 fe ff ff    \tmov    %eax,-0x160(%rbp)\n  42b816:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b81d:\t48 83 c0 14          \tadd    $0x14,%rax\n  42b821:\t8b 00                \tmov    (%rax),%eax\n  42b823:\t89 c7                \tmov    %eax,%edi\n  42b825:\te8 16 a1 fd ff       \tcallq  405940 <ntohl@plt>\n  42b82a:\t89 85 a4 fe ff ff    \tmov    %eax,-0x15c(%rbp)\n  42b830:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b837:\t48 83 c0 18          \tadd    $0x18,%rax\n  42b83b:\t8b 00                \tmov    (%rax),%eax\n  42b83d:\t89 c7                \tmov    %eax,%edi\n  42b83f:\te8 fc a0 fd ff       \tcallq  405940 <ntohl@plt>\n  42b844:\t89 85 a8 fe ff ff    \tmov    %eax,-0x158(%rbp)\n  42b84a:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b851:\t48 83 c0 1c          \tadd    $0x1c,%rax\n  42b855:\t8b 00                \tmov    (%rax),%eax\n  42b857:\t89 c7                \tmov    %eax,%edi\n  42b859:\te8 e2 a0 fd ff       \tcallq  405940 <ntohl@plt>\n  42b85e:\t89 85 ac fe ff ff    \tmov    %eax,-0x154(%rbp)\n  42b864:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b86b:\t48 83 c0 20          \tadd    $0x20,%rax\n  42b86f:\t8b 00                \tmov    (%rax),%eax\n  42b871:\t89 c7                \tmov    %eax,%edi\n  42b873:\te8 c8 a0 fd ff       \tcallq  405940 <ntohl@plt>\n  42b878:\t89 85 b0 fe ff ff    \tmov    %eax,-0x150(%rbp)\n  42b87e:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b885:\t48 83 c0 24          \tadd    $0x24,%rax\n  42b889:\t8b 00                \tmov    (%rax),%eax\n  42b88b:\t89 c7                \tmov    %eax,%edi\n  42b88d:\te8 ae a0 fd ff       \tcallq  405940 <ntohl@plt>\n  42b892:\t89 85 b4 fe ff ff    \tmov    %eax,-0x14c(%rbp)\n  42b898:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b89f:\t48 83 c0 28          \tadd    $0x28,%rax\n  42b8a3:\t8b 00                \tmov    (%rax),%eax\n  42b8a5:\t89 c7                \tmov    %eax,%edi\n  42b8a7:\te8 94 a0 fd ff       \tcallq  405940 <ntohl@plt>\n  42b8ac:\t89 85 b8 fe ff ff    \tmov    %eax,-0x148(%rbp)\n  42b8b2:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b8b9:\t48 83 c0 2c          \tadd    $0x2c,%rax\n  42b8bd:\t8b 00                \tmov    (%rax),%eax\n  42b8bf:\t89 c7                \tmov    %eax,%edi\n  42b8c1:\te8 7a a0 fd ff       \tcallq  405940 <ntohl@plt>\n  42b8c6:\t89 85 bc fe ff ff    \tmov    %eax,-0x144(%rbp)\n  42b8cc:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b8d3:\t48 83 c0 30          \tadd    $0x30,%rax\n  42b8d7:\t8b 00                \tmov    (%rax),%eax\n  42b8d9:\t89 c7                \tmov    %eax,%edi\n  42b8db:\te8 60 a0 fd ff       \tcallq  405940 <ntohl@plt>\n  42b8e0:\t89 85 c0 fe ff ff    \tmov    %eax,-0x140(%rbp)\n  42b8e6:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b8ed:\t48 83 c0 34          \tadd    $0x34,%rax\n  42b8f1:\t8b 00                \tmov    (%rax),%eax\n  42b8f3:\t89 c7                \tmov    %eax,%edi\n  42b8f5:\te8 46 a0 fd ff       \tcallq  405940 <ntohl@plt>\n  42b8fa:\t89 85 c4 fe ff ff    \tmov    %eax,-0x13c(%rbp)\n  42b900:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b907:\t48 83 c0 38          \tadd    $0x38,%rax\n  42b90b:\t8b 00                \tmov    (%rax),%eax\n  42b90d:\t89 c7                \tmov    %eax,%edi\n  42b90f:\te8 2c a0 fd ff       \tcallq  405940 <ntohl@plt>\n  42b914:\t89 85 c8 fe ff ff    \tmov    %eax,-0x138(%rbp)\n  42b91a:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  42b921:\t48 83 c0 3c          \tadd    $0x3c,%rax\n  42b925:\t8b 00                \tmov    (%rax),%eax\n  42b927:\t89 c7                \tmov    %eax,%edi\n  42b929:\te8 12 a0 fd ff       \tcallq  405940 <ntohl@plt>\n  42b92e:\t89 85 cc fe ff ff    \tmov    %eax,-0x134(%rbp)\n  42b934:\t8b 95 c4 fe ff ff    \tmov    -0x13c(%rbp),%edx\n  42b93a:\t8b 85 b0 fe ff ff    \tmov    -0x150(%rbp),%eax\n  42b940:\t31 c2                \txor    %eax,%edx\n  42b942:\t8b 85 98 fe ff ff    \tmov    -0x168(%rbp),%eax\n  42b948:\t31 c2                \txor    %eax,%edx\n  42b94a:\t8b 85 90 fe ff ff    \tmov    -0x170(%rbp),%eax\n  42b950:\t31 d0                \txor    %edx,%eax\n  42b952:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42b955:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42b958:\td1 c0                \trol    %eax\n  42b95a:\t89 85 d0 fe ff ff    \tmov    %eax,-0x130(%rbp)\n  42b960:\t8b 95 c8 fe ff ff    \tmov    -0x138(%rbp),%edx\n  42b966:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n  42b96c:\t31 c2                \txor    %eax,%edx\n  42b96e:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n  42b974:\t31 c2                \txor    %eax,%edx\n  42b976:\t8b 85 94 fe ff ff    \tmov    -0x16c(%rbp),%eax\n  42b97c:\t31 d0                \txor    %edx,%eax\n  42b97e:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42b981:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42b984:\td1 c0                \trol    %eax\n  42b986:\t89 85 d4 fe ff ff    \tmov    %eax,-0x12c(%rbp)\n  42b98c:\t8b 95 cc fe ff ff    \tmov    -0x134(%rbp),%edx\n  42b992:\t8b 85 b8 fe ff ff    \tmov    -0x148(%rbp),%eax\n  42b998:\t31 c2                \txor    %eax,%edx\n  42b99a:\t8b 85 a0 fe ff ff    \tmov    -0x160(%rbp),%eax\n  42b9a0:\t31 c2                \txor    %eax,%edx\n  42b9a2:\t8b 85 98 fe ff ff    \tmov    -0x168(%rbp),%eax\n  42b9a8:\t31 d0                \txor    %edx,%eax\n  42b9aa:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42b9ad:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42b9b0:\td1 c0                \trol    %eax\n  42b9b2:\t89 85 d8 fe ff ff    \tmov    %eax,-0x128(%rbp)\n  42b9b8:\t8b 95 d0 fe ff ff    \tmov    -0x130(%rbp),%edx\n  42b9be:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n  42b9c4:\t31 c2                \txor    %eax,%edx\n  42b9c6:\t8b 85 a4 fe ff ff    \tmov    -0x15c(%rbp),%eax\n  42b9cc:\t31 c2                \txor    %eax,%edx\n  42b9ce:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n  42b9d4:\t31 d0                \txor    %edx,%eax\n  42b9d6:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42b9d9:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42b9dc:\td1 c0                \trol    %eax\n  42b9de:\t89 85 dc fe ff ff    \tmov    %eax,-0x124(%rbp)\n  42b9e4:\t8b 95 d4 fe ff ff    \tmov    -0x12c(%rbp),%edx\n  42b9ea:\t8b 85 c0 fe ff ff    \tmov    -0x140(%rbp),%eax\n  42b9f0:\t31 c2                \txor    %eax,%edx\n  42b9f2:\t8b 85 a8 fe ff ff    \tmov    -0x158(%rbp),%eax\n  42b9f8:\t31 c2                \txor    %eax,%edx\n  42b9fa:\t8b 85 a0 fe ff ff    \tmov    -0x160(%rbp),%eax\n  42ba00:\t31 d0                \txor    %edx,%eax\n  42ba02:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42ba05:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42ba08:\td1 c0                \trol    %eax\n  42ba0a:\t89 85 e0 fe ff ff    \tmov    %eax,-0x120(%rbp)\n  42ba10:\t8b 95 d8 fe ff ff    \tmov    -0x128(%rbp),%edx\n  42ba16:\t8b 85 c4 fe ff ff    \tmov    -0x13c(%rbp),%eax\n  42ba1c:\t31 c2                \txor    %eax,%edx\n  42ba1e:\t8b 85 ac fe ff ff    \tmov    -0x154(%rbp),%eax\n  42ba24:\t31 c2                \txor    %eax,%edx\n  42ba26:\t8b 85 a4 fe ff ff    \tmov    -0x15c(%rbp),%eax\n  42ba2c:\t31 d0                \txor    %edx,%eax\n  42ba2e:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42ba31:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42ba34:\td1 c0                \trol    %eax\n  42ba36:\t89 85 e4 fe ff ff    \tmov    %eax,-0x11c(%rbp)\n  42ba3c:\t8b 95 dc fe ff ff    \tmov    -0x124(%rbp),%edx\n  42ba42:\t8b 85 c8 fe ff ff    \tmov    -0x138(%rbp),%eax\n  42ba48:\t31 c2                \txor    %eax,%edx\n  42ba4a:\t8b 85 b0 fe ff ff    \tmov    -0x150(%rbp),%eax\n  42ba50:\t31 c2                \txor    %eax,%edx\n  42ba52:\t8b 85 a8 fe ff ff    \tmov    -0x158(%rbp),%eax\n  42ba58:\t31 d0                \txor    %edx,%eax\n  42ba5a:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42ba5d:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42ba60:\td1 c0                \trol    %eax\n  42ba62:\t89 85 e8 fe ff ff    \tmov    %eax,-0x118(%rbp)\n  42ba68:\t8b 95 e0 fe ff ff    \tmov    -0x120(%rbp),%edx\n  42ba6e:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  42ba74:\t31 c2                \txor    %eax,%edx\n  42ba76:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n  42ba7c:\t31 c2                \txor    %eax,%edx\n  42ba7e:\t8b 85 ac fe ff ff    \tmov    -0x154(%rbp),%eax\n  42ba84:\t31 d0                \txor    %edx,%eax\n  42ba86:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42ba89:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42ba8c:\td1 c0                \trol    %eax\n  42ba8e:\t89 85 ec fe ff ff    \tmov    %eax,-0x114(%rbp)\n  42ba94:\t8b 95 e4 fe ff ff    \tmov    -0x11c(%rbp),%edx\n  42ba9a:\t8b 85 d0 fe ff ff    \tmov    -0x130(%rbp),%eax\n  42baa0:\t31 c2                \txor    %eax,%edx\n  42baa2:\t8b 85 b8 fe ff ff    \tmov    -0x148(%rbp),%eax\n  42baa8:\t31 c2                \txor    %eax,%edx\n  42baaa:\t8b 85 b0 fe ff ff    \tmov    -0x150(%rbp),%eax\n  42bab0:\t31 d0                \txor    %edx,%eax\n  42bab2:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bab5:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bab8:\td1 c0                \trol    %eax\n  42baba:\t89 85 f0 fe ff ff    \tmov    %eax,-0x110(%rbp)\n  42bac0:\t8b 95 e8 fe ff ff    \tmov    -0x118(%rbp),%edx\n  42bac6:\t8b 85 d4 fe ff ff    \tmov    -0x12c(%rbp),%eax\n  42bacc:\t31 c2                \txor    %eax,%edx\n  42bace:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n  42bad4:\t31 c2                \txor    %eax,%edx\n  42bad6:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n  42badc:\t31 d0                \txor    %edx,%eax\n  42bade:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bae1:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bae4:\td1 c0                \trol    %eax\n  42bae6:\t89 85 f4 fe ff ff    \tmov    %eax,-0x10c(%rbp)\n  42baec:\t8b 95 ec fe ff ff    \tmov    -0x114(%rbp),%edx\n  42baf2:\t8b 85 d8 fe ff ff    \tmov    -0x128(%rbp),%eax\n  42baf8:\t31 c2                \txor    %eax,%edx\n  42bafa:\t8b 85 c0 fe ff ff    \tmov    -0x140(%rbp),%eax\n  42bb00:\t31 c2                \txor    %eax,%edx\n  42bb02:\t8b 85 b8 fe ff ff    \tmov    -0x148(%rbp),%eax\n  42bb08:\t31 d0                \txor    %edx,%eax\n  42bb0a:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bb0d:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bb10:\td1 c0                \trol    %eax\n  42bb12:\t89 85 f8 fe ff ff    \tmov    %eax,-0x108(%rbp)\n  42bb18:\t8b 95 f0 fe ff ff    \tmov    -0x110(%rbp),%edx\n  42bb1e:\t8b 85 dc fe ff ff    \tmov    -0x124(%rbp),%eax\n  42bb24:\t31 c2                \txor    %eax,%edx\n  42bb26:\t8b 85 c4 fe ff ff    \tmov    -0x13c(%rbp),%eax\n  42bb2c:\t31 c2                \txor    %eax,%edx\n  42bb2e:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n  42bb34:\t31 d0                \txor    %edx,%eax\n  42bb36:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bb39:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bb3c:\td1 c0                \trol    %eax\n  42bb3e:\t89 85 fc fe ff ff    \tmov    %eax,-0x104(%rbp)\n  42bb44:\t8b 95 f4 fe ff ff    \tmov    -0x10c(%rbp),%edx\n  42bb4a:\t8b 85 e0 fe ff ff    \tmov    -0x120(%rbp),%eax\n  42bb50:\t31 c2                \txor    %eax,%edx\n  42bb52:\t8b 85 c8 fe ff ff    \tmov    -0x138(%rbp),%eax\n  42bb58:\t31 c2                \txor    %eax,%edx\n  42bb5a:\t8b 85 c0 fe ff ff    \tmov    -0x140(%rbp),%eax\n  42bb60:\t31 d0                \txor    %edx,%eax\n  42bb62:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bb65:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bb68:\td1 c0                \trol    %eax\n  42bb6a:\t89 85 00 ff ff ff    \tmov    %eax,-0x100(%rbp)\n  42bb70:\t8b 95 f8 fe ff ff    \tmov    -0x108(%rbp),%edx\n  42bb76:\t8b 85 e4 fe ff ff    \tmov    -0x11c(%rbp),%eax\n  42bb7c:\t31 c2                \txor    %eax,%edx\n  42bb7e:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  42bb84:\t31 c2                \txor    %eax,%edx\n  42bb86:\t8b 85 c4 fe ff ff    \tmov    -0x13c(%rbp),%eax\n  42bb8c:\t31 d0                \txor    %edx,%eax\n  42bb8e:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bb91:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bb94:\td1 c0                \trol    %eax\n  42bb96:\t89 85 04 ff ff ff    \tmov    %eax,-0xfc(%rbp)\n  42bb9c:\t8b 95 fc fe ff ff    \tmov    -0x104(%rbp),%edx\n  42bba2:\t8b 85 e8 fe ff ff    \tmov    -0x118(%rbp),%eax\n  42bba8:\t31 c2                \txor    %eax,%edx\n  42bbaa:\t8b 85 d0 fe ff ff    \tmov    -0x130(%rbp),%eax\n  42bbb0:\t31 c2                \txor    %eax,%edx\n  42bbb2:\t8b 85 c8 fe ff ff    \tmov    -0x138(%rbp),%eax\n  42bbb8:\t31 d0                \txor    %edx,%eax\n  42bbba:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bbbd:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bbc0:\td1 c0                \trol    %eax\n  42bbc2:\t89 85 08 ff ff ff    \tmov    %eax,-0xf8(%rbp)\n  42bbc8:\t8b 95 00 ff ff ff    \tmov    -0x100(%rbp),%edx\n  42bbce:\t8b 85 ec fe ff ff    \tmov    -0x114(%rbp),%eax\n  42bbd4:\t31 c2                \txor    %eax,%edx\n  42bbd6:\t8b 85 d4 fe ff ff    \tmov    -0x12c(%rbp),%eax\n  42bbdc:\t31 c2                \txor    %eax,%edx\n  42bbde:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  42bbe4:\t31 d0                \txor    %edx,%eax\n  42bbe6:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bbe9:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bbec:\td1 c0                \trol    %eax\n  42bbee:\t89 85 0c ff ff ff    \tmov    %eax,-0xf4(%rbp)\n  42bbf4:\tc7 45 e8 20 00 00 00 \tmovl   $0x20,-0x18(%rbp)\n  42bbfb:\teb 5c                \tjmp    42bc59 <sha1_core+0x51a>\n  42bbfd:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  42bc00:\t83 e8 03             \tsub    $0x3,%eax\n  42bc03:\t48 98                \tcltq   \n  42bc05:\t8b 94 85 90 fe ff ff \tmov    -0x170(%rbp,%rax,4),%edx\n  42bc0c:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  42bc0f:\t83 e8 08             \tsub    $0x8,%eax\n  42bc12:\t48 98                \tcltq   \n  42bc14:\t8b 84 85 90 fe ff ff \tmov    -0x170(%rbp,%rax,4),%eax\n  42bc1b:\t31 c2                \txor    %eax,%edx\n  42bc1d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  42bc20:\t83 e8 0e             \tsub    $0xe,%eax\n  42bc23:\t48 98                \tcltq   \n  42bc25:\t8b 84 85 90 fe ff ff \tmov    -0x170(%rbp,%rax,4),%eax\n  42bc2c:\t31 c2                \txor    %eax,%edx\n  42bc2e:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  42bc31:\t83 e8 10             \tsub    $0x10,%eax\n  42bc34:\t48 98                \tcltq   \n  42bc36:\t8b 84 85 90 fe ff ff \tmov    -0x170(%rbp,%rax,4),%eax\n  42bc3d:\t31 d0                \txor    %edx,%eax\n  42bc3f:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bc42:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bc45:\td1 c0                \trol    %eax\n  42bc47:\t89 c2                \tmov    %eax,%edx\n  42bc49:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  42bc4c:\t48 98                \tcltq   \n  42bc4e:\t89 94 85 90 fe ff ff \tmov    %edx,-0x170(%rbp,%rax,4)\n  42bc55:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  42bc59:\t83 7d e8 4f          \tcmpl   $0x4f,-0x18(%rbp)\n  42bc5d:\t7e 9e                \tjle    42bbfd <sha1_core+0x4be>\n  42bc5f:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  42bc62:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42bc65:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  42bc68:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  42bc6b:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  42bc6e:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  42bc71:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  42bc74:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  42bc77:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  42bc7a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  42bc7d:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  42bc84:\teb 60                \tjmp    42bce6 <sha1_core+0x5a7>\n  42bc86:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42bc89:\tc1 c0 05             \trol    $0x5,%eax\n  42bc8c:\t89 c1                \tmov    %eax,%ecx\n  42bc8e:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42bc91:\t23 45 f4             \tand    -0xc(%rbp),%eax\n  42bc94:\t89 c2                \tmov    %eax,%edx\n  42bc96:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42bc99:\tf7 d0                \tnot    %eax\n  42bc9b:\t23 45 f0             \tand    -0x10(%rbp),%eax\n  42bc9e:\t09 d0                \tor     %edx,%eax\n  42bca0:\t8d 14 01             \tlea    (%rcx,%rax,1),%edx\n  42bca3:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  42bca6:\t01 c2                \tadd    %eax,%edx\n  42bca8:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  42bcab:\t48 98                \tcltq   \n  42bcad:\t8b 84 85 90 fe ff ff \tmov    -0x170(%rbp,%rax,4),%eax\n  42bcb4:\t01 c2                \tadd    %eax,%edx\n  42bcb6:\t8b 05 84 7c 06 00    \tmov    0x67c84(%rip),%eax        # 493940 <SHA_K0>\n  42bcbc:\t01 d0                \tadd    %edx,%eax\n  42bcbe:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bcc1:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  42bcc4:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  42bcc7:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  42bcca:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  42bccd:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42bcd0:\tc1 c8 02             \tror    $0x2,%eax\n  42bcd3:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  42bcd6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42bcd9:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  42bcdc:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bcdf:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42bce2:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  42bce6:\t83 7d e8 13          \tcmpl   $0x13,-0x18(%rbp)\n  42bcea:\t7e 9a                \tjle    42bc86 <sha1_core+0x547>\n  42bcec:\teb 56                \tjmp    42bd44 <sha1_core+0x605>\n  42bcee:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42bcf1:\tc1 c0 05             \trol    $0x5,%eax\n  42bcf4:\t89 c2                \tmov    %eax,%edx\n  42bcf6:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42bcf9:\t33 45 f4             \txor    -0xc(%rbp),%eax\n  42bcfc:\t33 45 f0             \txor    -0x10(%rbp),%eax\n  42bcff:\t01 c2                \tadd    %eax,%edx\n  42bd01:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  42bd04:\t01 c2                \tadd    %eax,%edx\n  42bd06:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  42bd09:\t48 98                \tcltq   \n  42bd0b:\t8b 84 85 90 fe ff ff \tmov    -0x170(%rbp,%rax,4),%eax\n  42bd12:\t01 c2                \tadd    %eax,%edx\n  42bd14:\t8b 05 2a 7c 06 00    \tmov    0x67c2a(%rip),%eax        # 493944 <SHA_K1>\n  42bd1a:\t01 d0                \tadd    %edx,%eax\n  42bd1c:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bd1f:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  42bd22:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  42bd25:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  42bd28:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  42bd2b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42bd2e:\tc1 c8 02             \tror    $0x2,%eax\n  42bd31:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  42bd34:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42bd37:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  42bd3a:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bd3d:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42bd40:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  42bd44:\t83 7d e8 27          \tcmpl   $0x27,-0x18(%rbp)\n  42bd48:\t7e a4                \tjle    42bcee <sha1_core+0x5af>\n  42bd4a:\teb 61                \tjmp    42bdad <sha1_core+0x66e>\n  42bd4c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42bd4f:\tc1 c0 05             \trol    $0x5,%eax\n  42bd52:\t89 c1                \tmov    %eax,%ecx\n  42bd54:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  42bd57:\t0b 45 f0             \tor     -0x10(%rbp),%eax\n  42bd5a:\t23 45 f8             \tand    -0x8(%rbp),%eax\n  42bd5d:\t89 c2                \tmov    %eax,%edx\n  42bd5f:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  42bd62:\t23 45 f0             \tand    -0x10(%rbp),%eax\n  42bd65:\t09 d0                \tor     %edx,%eax\n  42bd67:\t8d 14 01             \tlea    (%rcx,%rax,1),%edx\n  42bd6a:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  42bd6d:\t01 c2                \tadd    %eax,%edx\n  42bd6f:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  42bd72:\t48 98                \tcltq   \n  42bd74:\t8b 84 85 90 fe ff ff \tmov    -0x170(%rbp,%rax,4),%eax\n  42bd7b:\t01 c2                \tadd    %eax,%edx\n  42bd7d:\t8b 05 c5 7b 06 00    \tmov    0x67bc5(%rip),%eax        # 493948 <SHA_K2>\n  42bd83:\t01 d0                \tadd    %edx,%eax\n  42bd85:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bd88:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  42bd8b:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  42bd8e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  42bd91:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  42bd94:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42bd97:\tc1 c8 02             \tror    $0x2,%eax\n  42bd9a:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  42bd9d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42bda0:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  42bda3:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42bda6:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42bda9:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  42bdad:\t83 7d e8 3b          \tcmpl   $0x3b,-0x18(%rbp)\n  42bdb1:\t7e 99                \tjle    42bd4c <sha1_core+0x60d>\n  42bdb3:\teb 56                \tjmp    42be0b <sha1_core+0x6cc>\n  42bdb5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42bdb8:\tc1 c0 05             \trol    $0x5,%eax\n  42bdbb:\t89 c2                \tmov    %eax,%edx\n  42bdbd:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42bdc0:\t33 45 f4             \txor    -0xc(%rbp),%eax\n  42bdc3:\t33 45 f0             \txor    -0x10(%rbp),%eax\n  42bdc6:\t01 c2                \tadd    %eax,%edx\n  42bdc8:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  42bdcb:\t01 c2                \tadd    %eax,%edx\n  42bdcd:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  42bdd0:\t48 98                \tcltq   \n  42bdd2:\t8b 84 85 90 fe ff ff \tmov    -0x170(%rbp,%rax,4),%eax\n  42bdd9:\t01 c2                \tadd    %eax,%edx\n  42bddb:\t8b 05 6b 7b 06 00    \tmov    0x67b6b(%rip),%eax        # 49394c <SHA_K3>\n  42bde1:\t01 d0                \tadd    %edx,%eax\n  42bde3:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  42bde6:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  42bde9:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  42bdec:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  42bdef:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  42bdf2:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42bdf5:\tc1 c8 02             \tror    $0x2,%eax\n  42bdf8:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  42bdfb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42bdfe:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  42be01:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  42be04:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42be07:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  42be0b:\t83 7d e8 4f          \tcmpl   $0x4f,-0x18(%rbp)\n  42be0f:\t7e a4                \tjle    42bdb5 <sha1_core+0x676>\n  42be11:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  42be14:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42be17:\t01 c2                \tadd    %eax,%edx\n  42be19:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  42be20:\t89 10                \tmov    %edx,(%rax)\n  42be22:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  42be29:\t48 83 c0 04          \tadd    $0x4,%rax\n  42be2d:\t8b 4d e0             \tmov    -0x20(%rbp),%ecx\n  42be30:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  42be33:\t01 ca                \tadd    %ecx,%edx\n  42be35:\t89 10                \tmov    %edx,(%rax)\n  42be37:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  42be3e:\t48 83 c0 08          \tadd    $0x8,%rax\n  42be42:\t8b 4d dc             \tmov    -0x24(%rbp),%ecx\n  42be45:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  42be48:\t01 ca                \tadd    %ecx,%edx\n  42be4a:\t89 10                \tmov    %edx,(%rax)\n  42be4c:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  42be53:\t48 83 c0 0c          \tadd    $0xc,%rax\n  42be57:\t8b 4d d8             \tmov    -0x28(%rbp),%ecx\n  42be5a:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  42be5d:\t01 ca                \tadd    %ecx,%edx\n  42be5f:\t89 10                \tmov    %edx,(%rax)\n  42be61:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  42be68:\t48 83 c0 10          \tadd    $0x10,%rax\n  42be6c:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n  42be6f:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  42be72:\t01 ca                \tadd    %ecx,%edx\n  42be74:\t89 10                \tmov    %edx,(%rax)\n  42be76:\t90                   \tnop\n  42be77:\tc9                   \tleaveq \n  42be78:\tc3                   \tretq   ", "code_s": "int *__fastcall sha1_core(uint32_t *a1, int *a2) {\n  int *result;\n  uint32_t v3;\n  uint32_t v4;\n  uint32_t v5;\n  uint32_t v6;\n  uint32_t v7;\n  uint32_t v8;\n  uint32_t v9;\n  uint32_t v10;\n  uint32_t v11;\n  uint32_t v12;\n  uint32_t v13;\n  uint32_t v14;\n  uint32_t v15;\n  uint32_t v16;\n  uint32_t v17;\n  uint32_t v18;\n  int v19;\n  int v20;\n  int v21;\n  int v22;\n  int v23;\n  int v24;\n  int v25;\n  int v26;\n  int v27;\n  int v28;\n  int v29;\n  int v30;\n  int v31;\n  int v32;\n  int v33;\n  int v34;\n  uint32_t v35;\n  __int64 v36;\n  int v37;\n  uint32_t v38;\n  int v39;\n  int i;\n  char v41[Number];\n  uint32_t v42;\n  uint32_t v43;\n  v39 = *a2;\n  v38 = a2[Number];\n  v37 = a2[Number];\n  HIDWORD(v36) = a2[Number];\n  LODWORD(v36) = a2[Number];\n  v3 = ntohl(*a1);\n  v4 = ntohl(a1[Number]);\n  v5 = ntohl(a1[Number]);\n  v6 = ntohl(a1[Number]);\n  v7 = ntohl(a1[Number]);\n  v8 = ntohl(a1[Number]);\n  v9 = ntohl(a1[Number]);\n  v10 = ntohl(a1[Number]);\n  v11 = ntohl(a1[Number]);\n  v12 = ntohl(a1[Number]);\n  v13 = ntohl(a1[Number]);\n  v14 = ntohl(a1[Number]);\n  v15 = ntohl(a1[Number]);\n  v16 = ntohl(a1[Number]);\n  v17 = ntohl(a1[Number]);\n  v18 = ntohl(a1[Number]);\n  v19 = __ROL4__(v5 ^ v11 ^ v16 ^ v3, Number);\n  v20 = __ROL4__(v6 ^ v12 ^ v17 ^ v4, Number);\n  v21 = __ROL4__(v7 ^ v13 ^ v18 ^ v5, Number);\n  v22 = __ROL4__(v8 ^ v14 ^ v19 ^ v6, Number);\n  v23 = __ROL4__(v9 ^ v15 ^ v20 ^ v7, Number);\n  v24 = __ROL4__(v10 ^ v16 ^ v21 ^ v8, Number);\n  v25 = __ROL4__(v11 ^ v17 ^ v22 ^ v9, Number);\n  v26 = __ROL4__(v12 ^ v18 ^ v23 ^ v10, Number);\n  v27 = __ROL4__(v13 ^ v19 ^ v24 ^ v11, Number);\n  v28 = __ROL4__(v14 ^ v20 ^ v25 ^ v12, Number);\n  v29 = __ROL4__(v15 ^ v21 ^ v26 ^ v13, Number);\n  v30 = __ROL4__(v16 ^ v22 ^ v27 ^ v14, Number);\n  v31 = __ROL4__(v17 ^ v23 ^ v28 ^ v15, Number);\n  v32 = __ROL4__(v18 ^ v24 ^ v29 ^ v16, Number);\n  v33 = __ROL4__(v19 ^ v25 ^ v30 ^ v17, Number);\n  v35 = v20 ^ v26 ^ v31 ^ v18;\n  v34 = __ROL4__(v35, Number);\n  for (i = Number; i <= Number; ++i) {\n    v35 = *(&v3 + i - Number) ^ *(&v3 + i - Number) ^ *(&v3 + i - Number) ^\n          *(&v3 + i - Number);\n    *(&v3 + i) = __ROL4__(v35, Number);\n  }\n  v43 = v39;\n  v42 = v38;\n  *(_DWORD *)&v41[Number] = v37;\n  *(_QWORD *)v41 = v36;\n  for (i = Number; i <= Number; ++i) {\n    v35 = *(&v3 + i) + *(_DWORD *)v41 + __ROL4__(v43, Number) +\n          (*(_DWORD *)&v41[Number] & v42 | *(_DWORD *)&v41[Number] & ~v42) +\n          SHA_K0;\n    *(_QWORD *)v41 = *(_QWORD *)&v41[Number];\n    *(_DWORD *)&v41[Number] = __ROR4__(v42, Number);\n    v42 = v43;\n    v43 = v35;\n  }\n  while (i <= Number) {\n    v35 = *(&v3 + i) + *(_DWORD *)v41 +\n          (*(_DWORD *)&v41[Number] ^ *(_DWORD *)&v41[Number] ^ v42) +\n          __ROL4__(v43, Number) + SHA_K1;\n    *(_DWORD *)v41 = *(_DWORD *)&v41[Number];\n    *(_DWORD *)&v41[Number] = *(_DWORD *)&v41[Number];\n    *(_DWORD *)&v41[Number] = __ROR4__(v42, Number);\n    v42 = v43;\n    v43 = v35;\n    ++i;\n  }\n  while (i <= Number) {\n    v35 = *(&v3 + i) + *(_DWORD *)v41 + __ROL4__(v43, Number) +\n          (v42 & (*(_DWORD *)&v41[Number] | *(_DWORD *)&v41[Number]) |\n           *(_DWORD *)&v41[Number] & *(_DWORD *)&v41[Number]) +\n          SHA_K2;\n    *(_DWORD *)v41 = *(_DWORD *)&v41[Number];\n    *(_DWORD *)&v41[Number] = *(_DWORD *)&v41[Number];\n    *(_DWORD *)&v41[Number] = __ROR4__(v42, Number);\n    v42 = v43;\n    v43 = v35;\n    ++i;\n  }\n  while (i <= Number) {\n    v35 = *(&v3 + i) + *(_DWORD *)v41 +\n          (*(_DWORD *)&v41[Number] ^ *(_DWORD *)&v41[Number] ^ v42) +\n          __ROL4__(v43, Number) + SHA_K3;\n    *(_DWORD *)v41 = *(_DWORD *)&v41[Number];\n    *(_DWORD *)&v41[Number] = *(_DWORD *)&v41[Number];\n    *(_DWORD *)&v41[Number] = __ROR4__(v42, Number);\n    v42 = v43;\n    v43 = v35;\n    ++i;\n  }\n  *a2 = v43 + v39;\n  a2[Number] = v38 + v42;\n  a2[Number] = v37 + *(_DWORD *)&v41[Number];\n  a2[Number] = HIDWORD(v36) + *(_DWORD *)&v41[Number];\n  result = a2 + Number;\n  a2[Number] = v36 + *(_DWORD *)v41;\n  return result;\n}", "code_t": "void __cdecl sha1_core(const uint32_t *M, uint32_t *hash_value) {\n  uint32_t W[Number];\n  uint32_t TEMP;\n  uint32_t H4;\n  uint32_t H3;\n  uint32_t H2;\n  uint32_t H1;\n  uint32_t H0;\n  int t;\n  _BYTE E[Number];\n  uint32_t B;\n  uint32_t A;\n  H0 = *hash_value;\n  H1 = hash_value[Number];\n  H2 = hash_value[Number];\n  H3 = hash_value[Number];\n  H4 = hash_value[Number];\n  W[Number] = ntohl(*M);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = ntohl(M[Number]);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  W[Number] = __ROL4__(W[Number] ^ W[Number] ^ W[Number] ^ W[Number], Number);\n  TEMP = W[Number] ^ W[Number] ^ W[Number] ^ W[Number];\n  W[Number] = __ROL4__(TEMP, Number);\n  for (t = Number; t <= Number; ++t) {\n    TEMP = W[t - Number] ^ W[t - Number] ^ W[t - Number] ^ W[t - Number];\n    W[t] = __ROL4__(TEMP, Number);\n  }\n  A = H0;\n  B = H1;\n  *(_DWORD *)&E[Number] = H2;\n  *(_QWORD *)E = __PAIR64__(H3, H4);\n  for (t = Number; t <= Number; ++t) {\n    TEMP = W[t] + *(_DWORD *)E + __ROL4__(A, Number) +\n           (*(_DWORD *)&E[Number] & B | *(_DWORD *)&E[Number] & ~B) + SHA_K0;\n    *(_QWORD *)E = *(_QWORD *)&E[Number];\n    *(_DWORD *)&E[Number] = __ROR4__(B, Number);\n    B = A;\n    A = TEMP;\n  }\n  while (t <= Number) {\n    TEMP = W[t] + *(_DWORD *)E +\n           (*(_DWORD *)&E[Number] ^ *(_DWORD *)&E[Number] ^ B) +\n           __ROL4__(A, Number) + SHA_K1;\n    *(_QWORD *)E = *(_QWORD *)&E[Number];\n    *(_DWORD *)&E[Number] = __ROR4__(B, Number);\n    B = A;\n    A = TEMP;\n    ++t;\n  }\n  while (t <= Number) {\n    TEMP = W[t] + *(_DWORD *)E + __ROL4__(A, Number) +\n           (B & (*(_DWORD *)&E[Number] | *(_DWORD *)&E[Number]) |\n            *(_DWORD *)&E[Number] & *(_DWORD *)&E[Number]) +\n           SHA_K2;\n    *(_QWORD *)E = *(_QWORD *)&E[Number];\n    *(_DWORD *)&E[Number] = __ROR4__(B, Number);\n    B = A;\n    A = TEMP;\n    ++t;\n  }\n  while (t <= Number) {\n    TEMP = W[t] + *(_DWORD *)E +\n           (*(_DWORD *)&E[Number] ^ *(_DWORD *)&E[Number] ^ B) +\n           __ROL4__(A, Number) + SHA_K3;\n    *(_QWORD *)E = *(_QWORD *)&E[Number];\n    *(_DWORD *)&E[Number] = __ROR4__(B, Number);\n    B = A;\n    A = TEMP;\n    ++t;\n  }\n  *hash_value = A + H0;\n  hash_value[Number] = H1 + B;\n  hash_value[Number] = H2 + *(_DWORD *)&E[Number];\n  hash_value[Number] = H3 + *(_DWORD *)&E[Number];\n  hash_value[Number] = H4 + *(_DWORD *)E;\n}", "var": [], "body_in_train": true}, {"repo_owner": "vmware", "repo_name": "vmaccel", "path": "vmware/vmaccel/fb2a59bde366c3e9e4a3f2960b53ee1df7066d824f90122ce2c369a47632ff17", "path_in_repo": "vmware/vmaccel/external/spirv-llvm/lib/AsmParser/Release+Asserts/Parser.o", "objdump": "0000000000000000 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_>:\n   0:\t41 57                \tpush   %r15\n   2:\t41 56                \tpush   %r14\n   4:\t41 55                \tpush   %r13\n   6:\t41 54                \tpush   %r12\n   8:\t49 89 fc             \tmov    %rdi,%r12\n   b:\t55                   \tpush   %rbp\n   c:\t53                   \tpush   %rbx\n   d:\t48 83 ec 18          \tsub    $0x18,%rsp\n  11:\t48 39 f7             \tcmp    %rsi,%rdi\n  14:\t74 7d                \tje     93 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x93>\n  16:\t48 8b 3e             \tmov    (%rsi),%rdi\n  19:\t4c 8d 7e 18          \tlea    0x18(%rsi),%r15\n  1d:\t49 8b 1c 24          \tmov    (%r12),%rbx\n  21:\t49 89 f5             \tmov    %rsi,%r13\n  24:\t49 8b 6c 24 08       \tmov    0x8(%r12),%rbp\n  29:\t49 39 ff             \tcmp    %rdi,%r15\n  2c:\t74 7a                \tje     a8 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0xa8>\n  2e:\t48 39 eb             \tcmp    %rbp,%rbx\n  31:\t74 28                \tje     5b <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x5b>\n  33:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n  38:\t48 83 ed 30          \tsub    $0x30,%rbp\n  3c:\t48 8b 7d 10          \tmov    0x10(%rbp),%rdi\n  40:\t48 8d 45 20          \tlea    0x20(%rbp),%rax\n  44:\t48 39 c7             \tcmp    %rax,%rdi\n  47:\t0f 84 8b 01 00 00    \tje     1d8 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x1d8>\n  4d:\te8 00 00 00 00       \tcallq  52 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x52>\n  52:\t48 39 dd             \tcmp    %rbx,%rbp\n  55:\t75 e1                \tjne    38 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x38>\n  57:\t49 8b 2c 24          \tmov    (%r12),%rbp\n  5b:\t49 8d 44 24 18       \tlea    0x18(%r12),%rax\n  60:\t48 39 c5             \tcmp    %rax,%rbp\n  63:\t74 08                \tje     6d <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x6d>\n  65:\t48 89 ef             \tmov    %rbp,%rdi\n  68:\te8 00 00 00 00       \tcallq  6d <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x6d>\n  6d:\tf3 41 0f 6f 6d 00    \tmovdqu 0x0(%r13),%xmm5\n  73:\t66 49 0f 6e c7       \tmovq   %r15,%xmm0\n  78:\t66 0f 6c c0          \tpunpcklqdq %xmm0,%xmm0\n  7c:\t41 0f 11 2c 24       \tmovups %xmm5,(%r12)\n  81:\t49 8b 45 10          \tmov    0x10(%r13),%rax\n  85:\t49 89 44 24 10       \tmov    %rax,0x10(%r12)\n  8a:\t4d 89 7d 10          \tmov    %r15,0x10(%r13)\n  8e:\t41 0f 11 45 00       \tmovups %xmm0,0x0(%r13)\n  93:\t48 83 c4 18          \tadd    $0x18,%rsp\n  97:\t4c 89 e0             \tmov    %r12,%rax\n  9a:\t5b                   \tpop    %rbx\n  9b:\t5d                   \tpop    %rbp\n  9c:\t41 5c                \tpop    %r12\n  9e:\t41 5d                \tpop    %r13\n  a0:\t41 5e                \tpop    %r14\n  a2:\t41 5f                \tpop    %r15\n  a4:\tc3                   \tretq   \n  a5:\t0f 1f 00             \tnopl   (%rax)\n  a8:\t48 8b 56 08          \tmov    0x8(%rsi),%rdx\n  ac:\t48 89 e9             \tmov    %rbp,%rcx\n  af:\t49 b9 ab aa aa aa aa \tmovabs $0xaaaaaaaaaaaaaaab,%r9\n  b6:\taa aa aa \n  b9:\t48 29 d9             \tsub    %rbx,%rcx\n  bc:\t48 89 d0             \tmov    %rdx,%rax\n  bf:\t49 89 c8             \tmov    %rcx,%r8\n  c2:\t4c 29 f8             \tsub    %r15,%rax\n  c5:\t49 c1 f8 04          \tsar    $0x4,%r8\n  c9:\t48 89 c6             \tmov    %rax,%rsi\n  cc:\t4d 0f af c1          \timul   %r9,%r8\n  d0:\t48 89 04 24          \tmov    %rax,(%rsp)\n  d4:\t48 c1 fe 04          \tsar    $0x4,%rsi\n  d8:\t49 0f af f1          \timul   %r9,%rsi\n  dc:\t49 89 f6             \tmov    %rsi,%r14\n  df:\t49 39 f0             \tcmp    %rsi,%r8\n  e2:\t0f 83 28 03 00 00    \tjae    410 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x410>\n  e8:\t49 8b 44 24 10       \tmov    0x10(%r12),%rax\n  ed:\t48 29 d8             \tsub    %rbx,%rax\n  f0:\t48 c1 f8 04          \tsar    $0x4,%rax\n  f4:\t49 0f af c1          \timul   %r9,%rax\n  f8:\t48 39 c6             \tcmp    %rax,%rsi\n  fb:\t0f 87 ef 00 00 00    \tja     1f0 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x1f0>\n 101:\t4d 85 c0             \ttest   %r8,%r8\n 104:\t0f 84 b6 04 00 00    \tje     5c0 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x5c0>\n 10a:\t49 8d 04 0f          \tlea    (%r15,%rcx,1),%rax\n 10e:\t4c 39 f8             \tcmp    %r15,%rax\n 111:\t0f 84 b1 01 00 00    \tje     2c8 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x2c8>\n 117:\t4c 29 f8             \tsub    %r15,%rax\n 11a:\t49 8d 6d 38          \tlea    0x38(%r13),%rbp\n 11e:\t48 83 c3 20          \tadd    $0x20,%rbx\n 122:\t48 83 e8 30          \tsub    $0x30,%rax\n 126:\t48 83 e0 f0          \tand    $0xfffffffffffffff0,%rax\n 12a:\t4d 8d 7c 05 68       \tlea    0x68(%r13,%rax,1),%r15\n 12f:\teb 4f                \tjmp    180 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x180>\n 131:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n 138:\t48 39 df             \tcmp    %rbx,%rdi\n 13b:\t0f 84 5f 04 00 00    \tje     5a0 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x5a0>\n 141:\t48 89 43 f0          \tmov    %rax,-0x10(%rbx)\n 145:\t48 8b 33             \tmov    (%rbx),%rsi\n 148:\t48 89 53 f8          \tmov    %rdx,-0x8(%rbx)\n 14c:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n 150:\t48 89 03             \tmov    %rax,(%rbx)\n 153:\t48 85 ff             \ttest   %rdi,%rdi\n 156:\t0f 84 53 04 00 00    \tje     5af <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x5af>\n 15c:\t48 89 7d f0          \tmov    %rdi,-0x10(%rbp)\n 160:\t48 89 75 00          \tmov    %rsi,0x0(%rbp)\n 164:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 16b:\t00 \n 16c:\t48 83 c5 30          \tadd    $0x30,%rbp\n 170:\t48 83 c3 30          \tadd    $0x30,%rbx\n 174:\tc6 07 00             \tmovb   $0x0,(%rdi)\n 177:\t4c 39 fd             \tcmp    %r15,%rbp\n 17a:\t0f 84 50 04 00 00    \tje     5d0 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x5d0>\n 180:\tf3 0f 6f 65 e0       \tmovdqu -0x20(%rbp),%xmm4\n 185:\t48 8b 7b f0          \tmov    -0x10(%rbx),%rdi\n 189:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 18d:\t0f 11 63 e0          \tmovups %xmm4,-0x20(%rbx)\n 191:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 195:\t48 39 e8             \tcmp    %rbp,%rax\n 198:\t75 9e                \tjne    138 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x138>\n 19a:\t48 85 d2             \ttest   %rdx,%rdx\n 19d:\t74 24                \tje     1c3 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x1c3>\n 19f:\t48 83 fa 01          \tcmp    $0x1,%rdx\n 1a3:\t0f 84 3f 04 00 00    \tje     5e8 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x5e8>\n 1a9:\t48 89 ee             \tmov    %rbp,%rsi\n 1ac:\t48 89 4c 24 08       \tmov    %rcx,0x8(%rsp)\n 1b1:\te8 00 00 00 00       \tcallq  1b6 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x1b6>\n 1b6:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 1ba:\t48 8b 7b f0          \tmov    -0x10(%rbx),%rdi\n 1be:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n 1c3:\t48 89 53 f8          \tmov    %rdx,-0x8(%rbx)\n 1c7:\tc6 04 17 00          \tmovb   $0x0,(%rdi,%rdx,1)\n 1cb:\t48 8b 7d f0          \tmov    -0x10(%rbp),%rdi\n 1cf:\teb 93                \tjmp    164 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x164>\n 1d1:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n 1d8:\t48 39 dd             \tcmp    %rbx,%rbp\n 1db:\t0f 85 57 fe ff ff    \tjne    38 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x38>\n 1e1:\te9 71 fe ff ff       \tjmpq   57 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x57>\n 1e6:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n 1ed:\t00 00 00 \n 1f0:\t48 39 eb             \tcmp    %rbp,%rbx\n 1f3:\t74 40                \tje     235 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x235>\n 1f5:\t0f 1f 00             \tnopl   (%rax)\n 1f8:\t48 83 ed 30          \tsub    $0x30,%rbp\n 1fc:\t48 8b 7d 10          \tmov    0x10(%rbp),%rdi\n 200:\t48 8d 45 20          \tlea    0x20(%rbp),%rax\n 204:\t48 39 c7             \tcmp    %rax,%rdi\n 207:\t0f 84 f3 01 00 00    \tje     400 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x400>\n 20d:\te8 00 00 00 00       \tcallq  212 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x212>\n 212:\t48 39 eb             \tcmp    %rbp,%rbx\n 215:\t75 e1                \tjne    1f8 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x1f8>\n 217:\t49 8b 2c 24          \tmov    (%r12),%rbp\n 21b:\t49 8b 44 24 10       \tmov    0x10(%r12),%rax\n 220:\t48 ba ab aa aa aa aa \tmovabs $0xaaaaaaaaaaaaaaab,%rdx\n 227:\taa aa aa \n 22a:\t48 29 e8             \tsub    %rbp,%rax\n 22d:\t48 c1 f8 04          \tsar    $0x4,%rax\n 231:\t48 0f af c2          \timul   %rdx,%rax\n 235:\t48 83 c0 02          \tadd    $0x2,%rax\n 239:\t4c 89 f6             \tmov    %r14,%rsi\n 23c:\t48 89 c2             \tmov    %rax,%rdx\n 23f:\t48 d1 ea             \tshr    %rdx\n 242:\t48 09 d0             \tor     %rdx,%rax\n 245:\t48 89 c2             \tmov    %rax,%rdx\n 248:\t48 c1 ea 02          \tshr    $0x2,%rdx\n 24c:\t48 09 d0             \tor     %rdx,%rax\n 24f:\t48 89 c2             \tmov    %rax,%rdx\n 252:\t48 c1 ea 04          \tshr    $0x4,%rdx\n 256:\t48 09 d0             \tor     %rdx,%rax\n 259:\t48 89 c2             \tmov    %rax,%rdx\n 25c:\t48 c1 ea 08          \tshr    $0x8,%rdx\n 260:\t48 09 d0             \tor     %rdx,%rax\n 263:\t48 89 c2             \tmov    %rax,%rdx\n 266:\t48 c1 ea 10          \tshr    $0x10,%rdx\n 26a:\t48 09 d0             \tor     %rdx,%rax\n 26d:\t48 89 c2             \tmov    %rax,%rdx\n 270:\t48 c1 ea 20          \tshr    $0x20,%rdx\n 274:\t48 09 d0             \tor     %rdx,%rax\n 277:\t48 83 c0 01          \tadd    $0x1,%rax\n 27b:\t4c 39 f0             \tcmp    %r14,%rax\n 27e:\t48 0f 43 f0          \tcmovae %rax,%rsi\n 282:\t4c 8d 3c 76          \tlea    (%rsi,%rsi,2),%r15\n 286:\t49 c1 e7 04          \tshl    $0x4,%r15\n 28a:\t4c 89 ff             \tmov    %r15,%rdi\n 28d:\te8 00 00 00 00       \tcallq  292 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x292>\n 292:\t48 89 c3             \tmov    %rax,%rbx\n 295:\t49 8d 44 24 18       \tlea    0x18(%r12),%rax\n 29a:\t48 39 c5             \tcmp    %rax,%rbp\n 29d:\t74 08                \tje     2a7 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x2a7>\n 29f:\t48 89 ef             \tmov    %rbp,%rdi\n 2a2:\te8 00 00 00 00       \tcallq  2a7 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x2a7>\n 2a7:\t66 48 0f 6e c3       \tmovq   %rbx,%xmm0\n 2ac:\t49 01 df             \tadd    %rbx,%r15\n 2af:\t48 89 dd             \tmov    %rbx,%rbp\n 2b2:\t66 0f 6c c0          \tpunpcklqdq %xmm0,%xmm0\n 2b6:\t4d 89 7c 24 10       \tmov    %r15,0x10(%r12)\n 2bb:\t41 0f 11 04 24       \tmovups %xmm0,(%r12)\n 2c0:\t49 8b 7d 00          \tmov    0x0(%r13),%rdi\n 2c4:\t49 8b 55 08          \tmov    0x8(%r13),%rdx\n 2c8:\t48 39 fa             \tcmp    %rdi,%rdx\n 2cb:\t0f 84 91 00 00 00    \tje     362 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x362>\n 2d1:\t48 83 ea 30          \tsub    $0x30,%rdx\n 2d5:\t48 8d 47 20          \tlea    0x20(%rdi),%rax\n 2d9:\t48 b9 ab aa aa aa aa \tmovabs $0xaaaaaaaaaaaaaab,%rcx\n 2e0:\taa aa 0a \n 2e3:\t48 29 fa             \tsub    %rdi,%rdx\n 2e6:\t48 c1 ea 04          \tshr    $0x4,%rdx\n 2ea:\t48 0f af d1          \timul   %rcx,%rdx\n 2ee:\t48 b9 ff ff ff ff ff \tmovabs $0xfffffffffffffff,%rcx\n 2f5:\tff ff 0f \n 2f8:\t48 21 ca             \tand    %rcx,%rdx\n 2fb:\t48 8d 4c 52 03       \tlea    0x3(%rdx,%rdx,2),%rcx\n 300:\t48 c1 e1 04          \tshl    $0x4,%rcx\n 304:\t48 01 e9             \tadd    %rbp,%rcx\n 307:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n 30e:\t00 00 \n 310:\tf3 0f 6f 48 e0       \tmovdqu -0x20(%rax),%xmm1\n 315:\t48 8d 55 20          \tlea    0x20(%rbp),%rdx\n 319:\t48 89 55 10          \tmov    %rdx,0x10(%rbp)\n 31d:\t0f 11 4d 00          \tmovups %xmm1,0x0(%rbp)\n 321:\t48 8b 50 f0          \tmov    -0x10(%rax),%rdx\n 325:\t48 39 d0             \tcmp    %rdx,%rax\n 328:\t0f 84 92 00 00 00    \tje     3c0 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x3c0>\n 32e:\t48 89 55 10          \tmov    %rdx,0x10(%rbp)\n 332:\t48 8b 10             \tmov    (%rax),%rdx\n 335:\t48 83 c5 30          \tadd    $0x30,%rbp\n 339:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n 33d:\t48 8b 50 f8          \tmov    -0x8(%rax),%rdx\n 341:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 345:\t48 89 40 f0          \tmov    %rax,-0x10(%rax)\n 349:\t48 83 c0 30          \tadd    $0x30,%rax\n 34d:\t48 c7 40 c8 00 00 00 \tmovq   $0x0,-0x38(%rax)\n 354:\t00 \n 355:\tc6 40 d0 00          \tmovb   $0x0,-0x30(%rax)\n 359:\t48 39 cd             \tcmp    %rcx,%rbp\n 35c:\t75 b2                \tjne    310 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x310>\n 35e:\t49 8b 1c 24          \tmov    (%r12),%rbx\n 362:\t48 03 1c 24          \tadd    (%rsp),%rbx\n 366:\t49 89 5c 24 08       \tmov    %rbx,0x8(%r12)\n 36b:\t49 8b 5d 08          \tmov    0x8(%r13),%rbx\n 36f:\t49 8b 6d 00          \tmov    0x0(%r13),%rbp\n 373:\t48 39 eb             \tcmp    %rbp,%rbx\n 376:\t74 27                \tje     39f <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x39f>\n 378:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n 37f:\t00 \n 380:\t48 83 eb 30          \tsub    $0x30,%rbx\n 384:\t48 8b 7b 10          \tmov    0x10(%rbx),%rdi\n 388:\t48 8d 43 20          \tlea    0x20(%rbx),%rax\n 38c:\t48 39 c7             \tcmp    %rax,%rdi\n 38f:\t74 1f                \tje     3b0 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x3b0>\n 391:\te8 00 00 00 00       \tcallq  396 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x396>\n 396:\t48 39 dd             \tcmp    %rbx,%rbp\n 399:\t75 e5                \tjne    380 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x380>\n 39b:\t49 8b 6d 00          \tmov    0x0(%r13),%rbp\n 39f:\t49 89 6d 08          \tmov    %rbp,0x8(%r13)\n 3a3:\te9 eb fc ff ff       \tjmpq   93 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x93>\n 3a8:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n 3af:\t00 \n 3b0:\t48 39 dd             \tcmp    %rbx,%rbp\n 3b3:\t75 cb                \tjne    380 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x380>\n 3b5:\teb e4                \tjmp    39b <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x39b>\n 3b7:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n 3be:\t00 00 \n 3c0:\tf3 0f 6f 10          \tmovdqu (%rax),%xmm2\n 3c4:\t48 83 c5 30          \tadd    $0x30,%rbp\n 3c8:\t0f 11 55 f0          \tmovups %xmm2,-0x10(%rbp)\n 3cc:\t48 8b 50 f8          \tmov    -0x8(%rax),%rdx\n 3d0:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 3d4:\t48 89 40 f0          \tmov    %rax,-0x10(%rax)\n 3d8:\t48 83 c0 30          \tadd    $0x30,%rax\n 3dc:\t48 c7 40 c8 00 00 00 \tmovq   $0x0,-0x38(%rax)\n 3e3:\t00 \n 3e4:\tc6 40 d0 00          \tmovb   $0x0,-0x30(%rax)\n 3e8:\t48 39 e9             \tcmp    %rbp,%rcx\n 3eb:\t0f 85 1f ff ff ff    \tjne    310 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x310>\n 3f1:\te9 68 ff ff ff       \tjmpq   35e <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x35e>\n 3f6:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n 3fd:\t00 00 00 \n 400:\t48 39 eb             \tcmp    %rbp,%rbx\n 403:\t0f 85 ef fd ff ff    \tjne    1f8 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x1f8>\n 409:\te9 09 fe ff ff       \tjmpq   217 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x217>\n 40e:\t66 90                \txchg   %ax,%ax\n 410:\t48 85 f6             \ttest   %rsi,%rsi\n 413:\t0f 84 ff 00 00 00    \tje     518 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x518>\n 419:\t49 39 d7             \tcmp    %rdx,%r15\n 41c:\t0f 84 f6 00 00 00    \tje     518 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x518>\n 422:\t48 8d 4a d0          \tlea    -0x30(%rdx),%rcx\n 426:\t49 8d 6d 38          \tlea    0x38(%r13),%rbp\n 42a:\t48 b8 ab aa aa aa aa \tmovabs $0xaaaaaaaaaaaaaab,%rax\n 431:\taa aa 0a \n 434:\t4c 29 f9             \tsub    %r15,%rcx\n 437:\t4c 8d 73 20          \tlea    0x20(%rbx),%r14\n 43b:\t48 c1 e9 04          \tshr    $0x4,%rcx\n 43f:\t48 0f af c8          \timul   %rax,%rcx\n 443:\t48 b8 ff ff ff ff ff \tmovabs $0xfffffffffffffff,%rax\n 44a:\tff ff 0f \n 44d:\t48 21 c1             \tand    %rax,%rcx\n 450:\t48 8d 04 49          \tlea    (%rcx,%rcx,2),%rax\n 454:\t48 c1 e0 04          \tshl    $0x4,%rax\n 458:\t4d 8d 44 05 68       \tlea    0x68(%r13,%rax,1),%r8\n 45d:\teb 45                \tjmp    4a4 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x4a4>\n 45f:\t90                   \tnop\n 460:\t49 39 fe             \tcmp    %rdi,%r14\n 463:\t0f 84 17 01 00 00    \tje     580 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x580>\n 469:\t4d 89 7e f0          \tmov    %r15,-0x10(%r14)\n 46d:\t49 8b 06             \tmov    (%r14),%rax\n 470:\t49 89 56 f8          \tmov    %rdx,-0x8(%r14)\n 474:\t48 8b 55 00          \tmov    0x0(%rbp),%rdx\n 478:\t49 89 16             \tmov    %rdx,(%r14)\n 47b:\t48 85 ff             \ttest   %rdi,%rdi\n 47e:\t0f 84 0b 01 00 00    \tje     58f <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x58f>\n 484:\t48 89 7d f0          \tmov    %rdi,-0x10(%rbp)\n 488:\t48 89 45 00          \tmov    %rax,0x0(%rbp)\n 48c:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 493:\t00 \n 494:\t48 83 c5 30          \tadd    $0x30,%rbp\n 498:\t49 83 c6 30          \tadd    $0x30,%r14\n 49c:\tc6 07 00             \tmovb   $0x0,(%rdi)\n 49f:\t49 39 e8             \tcmp    %rbp,%r8\n 4a2:\t74 5c                \tje     500 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x500>\n 4a4:\tf3 0f 6f 5d e0       \tmovdqu -0x20(%rbp),%xmm3\n 4a9:\t49 8b 7e f0          \tmov    -0x10(%r14),%rdi\n 4ad:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 4b1:\t41 0f 11 5e e0       \tmovups %xmm3,-0x20(%r14)\n 4b6:\t4c 8b 7d f0          \tmov    -0x10(%rbp),%r15\n 4ba:\t4c 39 fd             \tcmp    %r15,%rbp\n 4bd:\t75 a1                \tjne    460 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x460>\n 4bf:\t48 85 d2             \ttest   %rdx,%rdx\n 4c2:\t74 2c                \tje     4f0 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x4f0>\n 4c4:\t48 83 fa 01          \tcmp    $0x1,%rdx\n 4c8:\t0f 84 2d 01 00 00    \tje     5fb <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x5fb>\n 4ce:\t48 89 ee             \tmov    %rbp,%rsi\n 4d1:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n 4d6:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n 4da:\te8 00 00 00 00       \tcallq  4df <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x4df>\n 4df:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 4e3:\t49 8b 7e f0          \tmov    -0x10(%r14),%rdi\n 4e7:\t4c 8b 44 24 08       \tmov    0x8(%rsp),%r8\n 4ec:\t48 8b 0c 24          \tmov    (%rsp),%rcx\n 4f0:\t49 89 56 f8          \tmov    %rdx,-0x8(%r14)\n 4f4:\tc6 04 17 00          \tmovb   $0x0,(%rdi,%rdx,1)\n 4f8:\t49 8b 7f f0          \tmov    -0x10(%r15),%rdi\n 4fc:\teb 8e                \tjmp    48c <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x48c>\n 4fe:\t66 90                \txchg   %ax,%ax\n 500:\t48 8d 44 49 03       \tlea    0x3(%rcx,%rcx,2),%rax\n 505:\t49 8b 6c 24 08       \tmov    0x8(%r12),%rbp\n 50a:\t48 c1 e0 04          \tshl    $0x4,%rax\n 50e:\t48 01 c3             \tadd    %rax,%rbx\n 511:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n 518:\t48 39 eb             \tcmp    %rbp,%rbx\n 51b:\t74 1b                \tje     538 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x538>\n 51d:\t48 83 ed 30          \tsub    $0x30,%rbp\n 521:\t48 8b 7d 10          \tmov    0x10(%rbp),%rdi\n 525:\t48 8d 45 20          \tlea    0x20(%rbp),%rax\n 529:\t48 39 c7             \tcmp    %rax,%rdi\n 52c:\t74 ea                \tje     518 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x518>\n 52e:\te8 00 00 00 00       \tcallq  533 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x533>\n 533:\t48 39 eb             \tcmp    %rbp,%rbx\n 536:\t75 e5                \tjne    51d <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x51d>\n 538:\t49 89 5c 24 08       \tmov    %rbx,0x8(%r12)\n 53d:\t49 8b 5d 08          \tmov    0x8(%r13),%rbx\n 541:\t49 8b 6d 00          \tmov    0x0(%r13),%rbp\n 545:\t48 39 eb             \tcmp    %rbp,%rbx\n 548:\t0f 84 51 fe ff ff    \tje     39f <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x39f>\n 54e:\t66 90                \txchg   %ax,%ax\n 550:\t48 83 eb 30          \tsub    $0x30,%rbx\n 554:\t48 8b 7b 10          \tmov    0x10(%rbx),%rdi\n 558:\t48 8d 43 20          \tlea    0x20(%rbx),%rax\n 55c:\t48 39 c7             \tcmp    %rax,%rdi\n 55f:\t74 0f                \tje     570 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x570>\n 561:\te8 00 00 00 00       \tcallq  566 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x566>\n 566:\t48 39 dd             \tcmp    %rbx,%rbp\n 569:\t75 e5                \tjne    550 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x550>\n 56b:\te9 2b fe ff ff       \tjmpq   39b <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x39b>\n 570:\t48 39 dd             \tcmp    %rbx,%rbp\n 573:\t75 db                \tjne    550 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x550>\n 575:\te9 21 fe ff ff       \tjmpq   39b <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x39b>\n 57a:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n 580:\t4d 89 7e f0          \tmov    %r15,-0x10(%r14)\n 584:\t49 89 56 f8          \tmov    %rdx,-0x8(%r14)\n 588:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n 58c:\t49 89 06             \tmov    %rax,(%r14)\n 58f:\t48 89 6d f0          \tmov    %rbp,-0x10(%rbp)\n 593:\t48 89 ef             \tmov    %rbp,%rdi\n 596:\te9 f1 fe ff ff       \tjmpq   48c <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x48c>\n 59b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n 5a0:\t48 89 43 f0          \tmov    %rax,-0x10(%rbx)\n 5a4:\t48 89 53 f8          \tmov    %rdx,-0x8(%rbx)\n 5a8:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n 5ac:\t48 89 03             \tmov    %rax,(%rbx)\n 5af:\t48 89 6d f0          \tmov    %rbp,-0x10(%rbp)\n 5b3:\t48 89 ef             \tmov    %rbp,%rdi\n 5b6:\te9 a9 fb ff ff       \tjmpq   164 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x164>\n 5bb:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n 5c0:\t48 89 dd             \tmov    %rbx,%rbp\n 5c3:\te9 00 fd ff ff       \tjmpq   2c8 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x2c8>\n 5c8:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n 5cf:\t00 \n 5d0:\t49 8b 1c 24          \tmov    (%r12),%rbx\n 5d4:\t49 8b 55 08          \tmov    0x8(%r13),%rdx\n 5d8:\t48 8d 2c 0b          \tlea    (%rbx,%rcx,1),%rbp\n 5dc:\t49 03 4d 00          \tadd    0x0(%r13),%rcx\n 5e0:\t48 89 cf             \tmov    %rcx,%rdi\n 5e3:\te9 e0 fc ff ff       \tjmpq   2c8 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x2c8>\n 5e8:\t0f b6 45 00          \tmovzbl 0x0(%rbp),%eax\n 5ec:\t88 07                \tmov    %al,(%rdi)\n 5ee:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 5f2:\t48 8b 7b f0          \tmov    -0x10(%rbx),%rdi\n 5f6:\te9 c8 fb ff ff       \tjmpq   1c3 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x1c3>\n 5fb:\t0f b6 45 00          \tmovzbl 0x0(%rbp),%eax\n 5ff:\t88 07                \tmov    %al,(%rdi)\n 601:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 605:\t49 8b 7e f0          \tmov    -0x10(%r14),%rdi\n 609:\te9 e2 fe ff ff       \tjmpq   4f0 <_ZN4llvm15SmallVectorImplINS_7SMFixItEEaSEOS2_+0x4f0>", "code_s": "__m128i *__fastcall llvm SmallVectorImpl<llvm SMFixIt> operator=(__m128i *a1,\n                                                                 __m128i *a2) {\n  const __m128i *v3;\n  char *v4;\n  __m128i *v5;\n  __m128i *v7;\n  __m128i *v8;\n  __int64 v10;\n  signed __int64 v11;\n  unsigned __int64 v12;\n  unsigned __int64 v13;\n  unsigned __int64 v14;\n  __m128i *v15;\n  __m128i *v16;\n  unsigned __int64 v17;\n  __int64 v18;\n  __m128i *v19;\n  size_t v20;\n  __m128i *v21;\n  __m128i *v22;\n  unsigned __int64 v23;\n  unsigned __int64 v24;\n  unsigned __int64 v25;\n  const __m128i *v26;\n  __m128i *v27;\n  __m128i v28;\n  const __m128i *v29;\n  __int64 v30;\n  __int64 v31;\n  void *v32;\n  __m128i *v33;\n  __m128i *v34;\n  unsigned __int64 v35;\n  __int64 v36;\n  __int64 v37;\n  __m128i *v38;\n  size_t v39;\n  __m128i *v40;\n  __m128i *v41;\n  __int64 v42;\n  void *v43;\n  __int64 v44;\n  unsigned __int64 v45;\n  signed __int64 v46;\n  __int64 v47;\n  if (a1 == a2)\n    return a1;\n  v3 = (const __m128i *)a2->m128i_i64[Number];\n  v4 = &a2[Number].m128i_i8[Number];\n  v5 = (__m128i *)a1->m128i_i64[Number];\n  v7 = (__m128i *)a1->m128i_i64[Number];\n  if (&a2[Number].m128i_u64[Number] ==\n      (unsigned __int64 *)a2->m128i_i64[Number]) {\n    v10 = a2->m128i_i64[Number];\n    v11 = (char *)v7 - (char *)v5;\n    v12 = Number * (v7 - v5);\n    v44 = v10 - (_QWORD)v4;\n    v13 = Number * ((v10 - (__int64)v4) >> Number);\n    if (v12 < v13) {\n      v14 = Number * ((a1[Number].m128i_i64[Number] - (__int64)v5) >> Number);\n      if (v13 <= v14) {\n        if (!v12) {\n          v7 = (__m128i *)a1->m128i_i64[Number];\n          goto LABEL_36;\n        }\n        if (&v4[v11] == v4)\n          goto LABEL_36;\n        v15 = (__m128i *)((char *)a2 + Number);\n        v16 = v5 + Number;\n        v17 = (unsigned __int64)&a2[Number].m128i_u64[Number] +\n              ((v11 - Number) & Number);\n        while (Number) {\n          v19 = (__m128i *)v16[Number].m128i_i64[Number];\n          v20 = v15[Number].m128i_u64[Number];\n          v16[Number] = _mm_loadu_si128(v15 - Number);\n          v21 = (__m128i *)v15[Number].m128i_i64[Number];\n          if (v21 == v15) {\n            if (v20) {\n              if (v20 == Number) {\n                v19->m128i_i8[Number] = v15->m128i_i8[Number];\n                v20 = v15[Number].m128i_u64[Number];\n                v19 = (__m128i *)v16[Number].m128i_i64[Number];\n              } else {\n                v46 = v11;\n                memcpy(v19, v15, v20);\n                v20 = v15[Number].m128i_u64[Number];\n                v19 = (__m128i *)v16[Number].m128i_i64[Number];\n                v11 = v46;\n              }\n            }\n            v16[Number].m128i_i64[Number] = v20;\n            v19->m128i_i8[v20] = Number;\n            v19 = (__m128i *)v15[Number].m128i_i64[Number];\n            goto LABEL_19;\n          }\n          if (v19 == v16)\n            break;\n          v16[Number].m128i_i64[Number] = (__int64)v21;\n          v18 = v16->m128i_i64[Number];\n          v16[Number].m128i_i64[Number] = v20;\n          v16->m128i_i64[Number] = v15->m128i_i64[Number];\n          if (!v19)\n            goto LABEL_77;\n          v15[Number].m128i_i64[Number] = (__int64)v19;\n          v15->m128i_i64[Number] = v18;\n        LABEL_19:\n          v15[Number].m128i_i64[Number] = Number L;\n          v15 += Number;\n          v16 += Number;\n          v19->m128i_i8[Number] = Number;\n          if (v15 == (__m128i *)v17) {\n            v5 = (__m128i *)a1->m128i_i64[Number];\n            v10 = a2->m128i_i64[Number];\n            v7 = (__m128i *)(a1->m128i_i64[Number] + v11);\n            v3 = (const __m128i *)(a2->m128i_i64[Number] + v11);\n            goto LABEL_36;\n          }\n        }\n        v16[Number].m128i_i64[Number] = (__int64)v21;\n        v16[Number].m128i_i64[Number] = v20;\n        v16->m128i_i64[Number] = v15->m128i_i64[Number];\n      LABEL_77:\n        v15[Number].m128i_i64[Number] = (__int64)v15;\n        v19 = v15;\n        goto LABEL_19;\n      }\n      if (v5 != v7) {\n        do {\n          while (Number) {\n            v7 -= Number;\n            v22 = (__m128i *)v7[Number].m128i_i64[Number];\n            if (v22 == &v7[Number])\n              break;\n            operator delete(v22);\n            if (v5 == v7)\n              goto LABEL_30;\n          }\n        } while (v5 != v7);\n      LABEL_30:\n        v7 = (__m128i *)a1->m128i_i64[Number];\n        v14 =\n            Number *\n            ((a1[Number].m128i_i64[Number] - a1->m128i_i64[Number]) >> Number);\n      }\n      v23 = ((((v14 + Number) >> Number) | (v14 + Number)) >> Number) |\n            ((v14 + Number) >> Number) | (v14 + Number);\n      v24 = (((v23 >> Number) | v23) >> Number) | (v23 >> Number) | v23;\n      v25 = ((((v24 >> Number) | v24) >> Number) | (v24 >> Number) | v24) +\n            Number;\n      if (v25 >= v13)\n        v13 = v25;\n      v5 = (__m128i *)malloc(Number * v13);\n      if (v7 != (__m128i *)&a1[Number].m128i_u64[Number])\n        free(v7);\n      v7 = v5;\n      a1[Number].m128i_i64[Number] = (__int64)v5[Number * v13].m128i_i64;\n      *a1 = _mm_unpacklo_epi64((__m128i)(unsigned __int64)v5,\n                               (__m128i)(unsigned __int64)v5);\n      v3 = (const __m128i *)a2->m128i_i64[Number];\n      v10 = a2->m128i_i64[Number];\n    LABEL_36:\n      if ((const __m128i *)v10 != v3) {\n        v26 = v3 + Number;\n        v27 =\n            &v7[Number *\n                    ((Number * ((unsigned __int64)(v10 - Number - (_QWORD)v3) >>\n                                Number)) &\n                     Number) +\n                Number];\n        do {\n          while (Number) {\n            v28 = _mm_loadu_si128(v26 - Number);\n            v7[Number].m128i_i64[Number] = (__int64)v7[Number].m128i_i64;\n            *v7 = v28;\n            v29 = (const __m128i *)v26[Number].m128i_i64[Number];\n            if (v26 == v29)\n              break;\n            v7[Number].m128i_i64[Number] = (__int64)v29;\n            v7 += Number;\n            v7[Number].m128i_i64[Number] = v26->m128i_i64[Number];\n            v7[Number].m128i_i64[Number] = v26[Number].m128i_i64[Number];\n            v26[Number].m128i_i64[Number] = (__int64)v26;\n            v26 += Number;\n            v26[Number].m128i_i64[Number] = Number L;\n            v26[Number].m128i_i8[Number] = Number;\n            if (v7 == v27)\n              goto LABEL_40;\n          }\n          v7 += Number;\n          v7[Number] = _mm_loadu_si128(v26);\n          v7[Number].m128i_i64[Number] = v26[Number].m128i_i64[Number];\n          v26[Number].m128i_i64[Number] = (__int64)v26;\n          v26 += Number;\n          v26[Number].m128i_i64[Number] = Number L;\n          v26[Number].m128i_i8[Number] = Number;\n        } while (v27 != v7);\n      LABEL_40:\n        v5 = (__m128i *)a1->m128i_i64[Number];\n      }\n      a1->m128i_i64[Number] = (__int64)v5->m128i_i64 + v44;\n      v30 = a2->m128i_i64[Number];\n      v31 = a2->m128i_i64[Number];\n      if (v30 == a2->m128i_i64[Number]) {\n      LABEL_45:\n        a2->m128i_i64[Number] = v31;\n        return a1;\n      }\n      do {\n        while (Number) {\n          v30 -= Number L;\n          v32 = *(void **)(v30 + Number);\n          if (v32 == (void *)(v30 + Number))\n            break;\n          operator delete(v32);\n          if (v31 == v30)\n            goto LABEL_44;\n        }\n      } while (v31 != v30);\n    LABEL_44:\n      v31 = a2->m128i_i64[Number];\n      goto LABEL_45;\n    }\n    if (!v13 || v4 == (char *)v10) {\n    LABEL_65:\n      while (v5 != v7) {\n        while (Number) {\n          v7 -= Number;\n          v41 = (__m128i *)v7[Number].m128i_i64[Number];\n          if (v41 == &v7[Number])\n            break;\n          operator delete(v41);\n          if (v5 == v7)\n            goto LABEL_68;\n        }\n      }\n    LABEL_68:\n      a1->m128i_i64[Number] = (__int64)v5;\n      v42 = a2->m128i_i64[Number];\n      v31 = a2->m128i_i64[Number];\n      if (v42 == a2->m128i_i64[Number])\n        goto LABEL_45;\n      do {\n        while (Number) {\n          v42 -= Number L;\n          v43 = *(void **)(v42 + Number);\n          if (v43 == (void *)(v42 + Number))\n            break;\n          operator delete(v43);\n          if (v31 == v42)\n            goto LABEL_44;\n        }\n      } while (v31 != v42);\n      goto LABEL_44;\n    }\n    v33 = (__m128i *)((char *)a2 + Number);\n    v34 = v5 + Number;\n    v35 = (Number * ((unsigned __int64)(v10 - Number - (_QWORD)v4) >> Number)) &\n          Number;\n    v36 = (__int64)&a2[Number * v35 + Number].m128i_i64[Number];\n    while (Number) {\n      v38 = (__m128i *)v34[Number].m128i_i64[Number];\n      v39 = v33[Number].m128i_u64[Number];\n      v34[Number] = _mm_loadu_si128(v33 - Number);\n      v40 = (__m128i *)v33[Number].m128i_i64[Number];\n      if (v33 == v40) {\n        if (v39) {\n          if (v39 == Number) {\n            v38->m128i_i8[Number] = v33->m128i_i8[Number];\n            v39 = v33[Number].m128i_u64[Number];\n            v38 = (__m128i *)v34[Number].m128i_i64[Number];\n          } else {\n            v47 = v36;\n            v45 = v35;\n            memcpy(v38, v33, v39);\n            v39 = v33[Number].m128i_u64[Number];\n            v38 = (__m128i *)v34[Number].m128i_i64[Number];\n            v36 = v47;\n            v35 = v45;\n          }\n        }\n        v34[Number].m128i_i64[Number] = v39;\n        v38->m128i_i8[v39] = Number;\n        v38 = (__m128i *)v40[Number].m128i_i64[Number];\n        goto LABEL_58;\n      }\n      if (v34 == v38)\n        break;\n      v34[Number].m128i_i64[Number] = (__int64)v40;\n      v37 = v34->m128i_i64[Number];\n      v34[Number].m128i_i64[Number] = v39;\n      v34->m128i_i64[Number] = v33->m128i_i64[Number];\n      if (!v38)\n        goto LABEL_75;\n      v33[Number].m128i_i64[Number] = (__int64)v38;\n      v33->m128i_i64[Number] = v37;\n    LABEL_58:\n      v33[Number].m128i_i64[Number] = Number L;\n      v33 += Number;\n      v34 += Number;\n      v38->m128i_i8[Number] = Number;\n      if ((__m128i *)v36 == v33) {\n        v7 = (__m128i *)a1->m128i_i64[Number];\n        v5 += Number * v35 + Number;\n        goto LABEL_65;\n      }\n    }\n    v34[Number].m128i_i64[Number] = (__int64)v40;\n    v34[Number].m128i_i64[Number] = v39;\n    v34->m128i_i64[Number] = v33->m128i_i64[Number];\n  LABEL_75:\n    v33[Number].m128i_i64[Number] = (__int64)v33;\n    v38 = v33;\n    goto LABEL_58;\n  }\n  if (v5 != v7) {\n    do {\n      while (Number) {\n        v7 -= Number;\n        v8 = (__m128i *)v7[Number].m128i_i64[Number];\n        if (v8 == &v7[Number])\n          break;\n        operator delete(v8);\n        if (v7 == v5)\n          goto LABEL_6;\n      }\n    } while (v7 != v5);\n  LABEL_6:\n    v7 = (__m128i *)a1->m128i_i64[Number];\n  }\n  if (v7 != (__m128i *)&a1[Number].m128i_u64[Number])\n    free(v7);\n  *a1 = _mm_loadu_si128(a2);\n  a1[Number].m128i_i64[Number] = a2[Number].m128i_i64[Number];\n  a2[Number].m128i_i64[Number] = (__int64)v4;\n  *a2 = _mm_unpacklo_epi64((__m128i)(unsigned __int64)v4,\n                           (__m128i)(unsigned __int64)v4);\n  return a1;\n}", "code_t": "__m128i *__fastcall llvm SmallVectorImpl<llvm SMFixIt> operator=(__m128i *a1,\n                                                                 __m128i *a2) {\n  const __m128i *v3;\n  char *v4;\n  __m128i *v5;\n  __m128i *v7;\n  __m128i *v8;\n  __int64 v10;\n  signed __int64 v11;\n  unsigned __int64 v12;\n  unsigned __int64 v13;\n  unsigned __int64 v14;\n  __m128i *v15;\n  __m128i *v16;\n  unsigned __int64 v17;\n  __int64 v18;\n  __m128i *v19;\n  size_t v20;\n  __m128i *v21;\n  __m128i *v22;\n  unsigned __int64 v23;\n  unsigned __int64 v24;\n  unsigned __int64 v25;\n  const __m128i *v26;\n  __m128i *v27;\n  __m128i v28;\n  const __m128i *v29;\n  __int64 v30;\n  __int64 v31;\n  void *v32;\n  __m128i *v33;\n  __m128i *v34;\n  unsigned __int64 v35;\n  __int64 v36;\n  __int64 v37;\n  __m128i *v38;\n  size_t v39;\n  __m128i *v40;\n  __m128i *v41;\n  __int64 v42;\n  void *v43;\n  __int64 v44;\n  unsigned __int64 v45;\n  signed __int64 v46;\n  __int64 v47;\n  if (a1 == a2)\n    return a1;\n  v3 = (const __m128i *)a2->m128i_i64[Number];\n  v4 = &a2[Number].m128i_i8[Number];\n  v5 = (__m128i *)a1->m128i_i64[Number];\n  v7 = (__m128i *)a1->m128i_i64[Number];\n  if (&a2[Number].m128i_u64[Number] ==\n      (unsigned __int64 *)a2->m128i_i64[Number]) {\n    v10 = a2->m128i_i64[Number];\n    v11 = (char *)v7 - (char *)v5;\n    v12 = Number * (v7 - v5);\n    v44 = v10 - (_QWORD)v4;\n    v13 = Number * ((v10 - (__int64)v4) >> Number);\n    if (v12 < v13) {\n      v14 = Number * ((a1[Number].m128i_i64[Number] - (__int64)v5) >> Number);\n      if (v13 <= v14) {\n        if (!v12) {\n          v7 = (__m128i *)a1->m128i_i64[Number];\n          goto LABEL_36;\n        }\n        if (&v4[v11] == v4)\n          goto LABEL_36;\n        v15 = (__m128i *)((char *)a2 + Number);\n        v16 = v5 + Number;\n        v17 = (unsigned __int64)&a2[Number].m128i_u64[Number] +\n              ((v11 - Number) & Number);\n        while (Number) {\n          v19 = (__m128i *)v16[Number].m128i_i64[Number];\n          v20 = v15[Number].m128i_u64[Number];\n          v16[Number] = _mm_loadu_si128(v15 - Number);\n          v21 = (__m128i *)v15[Number].m128i_i64[Number];\n          if (v21 == v15) {\n            if (v20) {\n              if (v20 == Number) {\n                v19->m128i_i8[Number] = v15->m128i_i8[Number];\n                v20 = v15[Number].m128i_u64[Number];\n                v19 = (__m128i *)v16[Number].m128i_i64[Number];\n              } else {\n                v46 = v11;\n                memcpy(v19, v15, v20);\n                v20 = v15[Number].m128i_u64[Number];\n                v19 = (__m128i *)v16[Number].m128i_i64[Number];\n                v11 = v46;\n              }\n            }\n            v16[Number].m128i_i64[Number] = v20;\n            v19->m128i_i8[v20] = Number;\n            v19 = (__m128i *)v15[Number].m128i_i64[Number];\n            goto LABEL_19;\n          }\n          if (v19 == v16)\n            break;\n          v16[Number].m128i_i64[Number] = (__int64)v21;\n          v18 = v16->m128i_i64[Number];\n          v16[Number].m128i_i64[Number] = v20;\n          v16->m128i_i64[Number] = v15->m128i_i64[Number];\n          if (!v19)\n            goto LABEL_77;\n          v15[Number].m128i_i64[Number] = (__int64)v19;\n          v15->m128i_i64[Number] = v18;\n        LABEL_19:\n          v15[Number].m128i_i64[Number] = Number L;\n          v15 += Number;\n          v16 += Number;\n          v19->m128i_i8[Number] = Number;\n          if (v15 == (__m128i *)v17) {\n            v5 = (__m128i *)a1->m128i_i64[Number];\n            v10 = a2->m128i_i64[Number];\n            v7 = (__m128i *)(a1->m128i_i64[Number] + v11);\n            v3 = (const __m128i *)(a2->m128i_i64[Number] + v11);\n            goto LABEL_36;\n          }\n        }\n        v16[Number].m128i_i64[Number] = (__int64)v21;\n        v16[Number].m128i_i64[Number] = v20;\n        v16->m128i_i64[Number] = v15->m128i_i64[Number];\n      LABEL_77:\n        v15[Number].m128i_i64[Number] = (__int64)v15;\n        v19 = v15;\n        goto LABEL_19;\n      }\n      if (v5 != v7) {\n        do {\n          while (Number) {\n            v7 -= Number;\n            v22 = (__m128i *)v7[Number].m128i_i64[Number];\n            if (v22 == &v7[Number])\n              break;\n            operator delete(v22);\n            if (v5 == v7)\n              goto LABEL_30;\n          }\n        } while (v5 != v7);\n      LABEL_30:\n        v7 = (__m128i *)a1->m128i_i64[Number];\n        v14 =\n            Number *\n            ((a1[Number].m128i_i64[Number] - a1->m128i_i64[Number]) >> Number);\n      }\n      v23 = ((((v14 + Number) >> Number) | (v14 + Number)) >> Number) |\n            ((v14 + Number) >> Number) | (v14 + Number);\n      v24 = (((v23 >> Number) | v23) >> Number) | (v23 >> Number) | v23;\n      v25 = ((((v24 >> Number) | v24) >> Number) | (v24 >> Number) | v24) +\n            Number;\n      if (v25 >= v13)\n        v13 = v25;\n      v5 = (__m128i *)malloc(Number * v13);\n      if (v7 != (__m128i *)&a1[Number].m128i_u64[Number])\n        free(v7);\n      v7 = v5;\n      a1[Number].m128i_i64[Number] = (__int64)v5[Number * v13].m128i_i64;\n      *a1 = _mm_unpacklo_epi64((__m128i)(unsigned __int64)v5,\n                               (__m128i)(unsigned __int64)v5);\n      v3 = (const __m128i *)a2->m128i_i64[Number];\n      v10 = a2->m128i_i64[Number];\n    LABEL_36:\n      if ((const __m128i *)v10 != v3) {\n        v26 = v3 + Number;\n        v27 =\n            &v7[Number *\n                    ((Number * ((unsigned __int64)(v10 - Number - (_QWORD)v3) >>\n                                Number)) &\n                     Number) +\n                Number];\n        do {\n          while (Number) {\n            v28 = _mm_loadu_si128(v26 - Number);\n            v7[Number].m128i_i64[Number] = (__int64)v7[Number].m128i_i64;\n            *v7 = v28;\n            v29 = (const __m128i *)v26[Number].m128i_i64[Number];\n            if (v26 == v29)\n              break;\n            v7[Number].m128i_i64[Number] = (__int64)v29;\n            v7 += Number;\n            v7[Number].m128i_i64[Number] = v26->m128i_i64[Number];\n            v7[Number].m128i_i64[Number] = v26[Number].m128i_i64[Number];\n            v26[Number].m128i_i64[Number] = (__int64)v26;\n            v26 += Number;\n            v26[Number].m128i_i64[Number] = Number L;\n            v26[Number].m128i_i8[Number] = Number;\n            if (v7 == v27)\n              goto LABEL_40;\n          }\n          v7 += Number;\n          v7[Number] = _mm_loadu_si128(v26);\n          v7[Number].m128i_i64[Number] = v26[Number].m128i_i64[Number];\n          v26[Number].m128i_i64[Number] = (__int64)v26;\n          v26 += Number;\n          v26[Number].m128i_i64[Number] = Number L;\n          v26[Number].m128i_i8[Number] = Number;\n        } while (v27 != v7);\n      LABEL_40:\n        v5 = (__m128i *)a1->m128i_i64[Number];\n      }\n      a1->m128i_i64[Number] = (__int64)v5->m128i_i64 + v44;\n      v30 = a2->m128i_i64[Number];\n      v31 = a2->m128i_i64[Number];\n      if (v30 == a2->m128i_i64[Number]) {\n      LABEL_45:\n        a2->m128i_i64[Number] = v31;\n        return a1;\n      }\n      do {\n        while (Number) {\n          v30 -= Number L;\n          v32 = *(void **)(v30 + Number);\n          if (v32 == (void *)(v30 + Number))\n            break;\n          operator delete(v32);\n          if (v31 == v30)\n            goto LABEL_44;\n        }\n      } while (v31 != v30);\n    LABEL_44:\n      v31 = a2->m128i_i64[Number];\n      goto LABEL_45;\n    }\n    if (!v13 || v4 == (char *)v10) {\n    LABEL_65:\n      while (v5 != v7) {\n        while (Number) {\n          v7 -= Number;\n          v41 = (__m128i *)v7[Number].m128i_i64[Number];\n          if (v41 == &v7[Number])\n            break;\n          operator delete(v41);\n          if (v5 == v7)\n            goto LABEL_68;\n        }\n      }\n    LABEL_68:\n      a1->m128i_i64[Number] = (__int64)v5;\n      v42 = a2->m128i_i64[Number];\n      v31 = a2->m128i_i64[Number];\n      if (v42 == a2->m128i_i64[Number])\n        goto LABEL_45;\n      do {\n        while (Number) {\n          v42 -= Number L;\n          v43 = *(void **)(v42 + Number);\n          if (v43 == (void *)(v42 + Number))\n            break;\n          operator delete(v43);\n          if (v31 == v42)\n            goto LABEL_44;\n        }\n      } while (v31 != v42);\n      goto LABEL_44;\n    }\n    v33 = (__m128i *)((char *)a2 + Number);\n    v34 = v5 + Number;\n    v35 = (Number * ((unsigned __int64)(v10 - Number - (_QWORD)v4) >> Number)) &\n          Number;\n    v36 = (__int64)&a2[Number * v35 + Number].m128i_i64[Number];\n    while (Number) {\n      v38 = (__m128i *)v34[Number].m128i_i64[Number];\n      v39 = v33[Number].m128i_u64[Number];\n      v34[Number] = _mm_loadu_si128(v33 - Number);\n      v40 = (__m128i *)v33[Number].m128i_i64[Number];\n      if (v33 == v40) {\n        if (v39) {\n          if (v39 == Number) {\n            v38->m128i_i8[Number] = v33->m128i_i8[Number];\n            v39 = v33[Number].m128i_u64[Number];\n            v38 = (__m128i *)v34[Number].m128i_i64[Number];\n          } else {\n            v47 = v36;\n            v45 = v35;\n            memcpy(v38, v33, v39);\n            v39 = v33[Number].m128i_u64[Number];\n            v38 = (__m128i *)v34[Number].m128i_i64[Number];\n            v36 = v47;\n            v35 = v45;\n          }\n        }\n        v34[Number].m128i_i64[Number] = v39;\n        v38->m128i_i8[v39] = Number;\n        v38 = (__m128i *)v40[Number].m128i_i64[Number];\n        goto LABEL_58;\n      }\n      if (v34 == v38)\n        break;\n      v34[Number].m128i_i64[Number] = (__int64)v40;\n      v37 = v34->m128i_i64[Number];\n      v34[Number].m128i_i64[Number] = v39;\n      v34->m128i_i64[Number] = v33->m128i_i64[Number];\n      if (!v38)\n        goto LABEL_75;\n      v33[Number].m128i_i64[Number] = (__int64)v38;\n      v33->m128i_i64[Number] = v37;\n    LABEL_58:\n      v33[Number].m128i_i64[Number] = Number L;\n      v33 += Number;\n      v34 += Number;\n      v38->m128i_i8[Number] = Number;\n      if ((__m128i *)v36 == v33) {\n        v7 = (__m128i *)a1->m128i_i64[Number];\n        v5 += Number * v35 + Number;\n        goto LABEL_65;\n      }\n    }\n    v34[Number].m128i_i64[Number] = (__int64)v40;\n    v34[Number].m128i_i64[Number] = v39;\n    v34->m128i_i64[Number] = v33->m128i_i64[Number];\n  LABEL_75:\n    v33[Number].m128i_i64[Number] = (__int64)v33;\n    v38 = v33;\n    goto LABEL_58;\n  }\n  if (v5 != v7) {\n    do {\n      while (Number) {\n        v7 -= Number;\n        v8 = (__m128i *)v7[Number].m128i_i64[Number];\n        if (v8 == &v7[Number])\n          break;\n        operator delete(v8);\n        if (v7 == v5)\n          goto LABEL_6;\n      }\n    } while (v7 != v5);\n  LABEL_6:\n    v7 = (__m128i *)a1->m128i_i64[Number];\n  }\n  if (v7 != (__m128i *)&a1[Number].m128i_u64[Number])\n    free(v7);\n  *a1 = _mm_loadu_si128(a2);\n  a1[Number].m128i_i64[Number] = a2[Number].m128i_i64[Number];\n  a2[Number].m128i_i64[Number] = (__int64)v4;\n  *a2 = _mm_unpacklo_epi64((__m128i)(unsigned __int64)v4,\n                           (__m128i)(unsigned __int64)v4);\n  return a1;\n}", "var": [], "body_in_train": false}, {"repo_owner": "miztooks", "repo_name": "myeditor", "path": "miztooks/myeditor/44a4aaad6c5547f735d6b281a90ac37c97a687a5028313d8ccc5a8aa66c1fd81", "path_in_repo": "miztooks/myeditor/Dependency/openssl-1.0.1j/test/rc4test", "objdump": "000000000040f2b1 <bn_sqr_words>:\n  40f2b1:\t55                   \tpush   %rbp\n  40f2b2:\t48 89 e5             \tmov    %rsp,%rbp\n  40f2b5:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  40f2b9:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  40f2bd:\t89 55 ac             \tmov    %edx,-0x54(%rbp)\n  40f2c0:\t83 7d ac 00          \tcmpl   $0x0,-0x54(%rbp)\n  40f2c4:\t0f 8e 4b 02 00 00    \tjle    40f515 <bn_sqr_words+0x264>\n  40f2ca:\te9 b9 01 00 00       \tjmpq   40f488 <bn_sqr_words+0x1d7>\n  40f2cf:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  40f2d3:\t8b 00                \tmov    (%rax),%eax\n  40f2d5:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40f2d8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40f2db:\t0f b7 c0             \tmovzwl %ax,%eax\n  40f2de:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  40f2e1:\tc1 6d fc 10          \tshrl   $0x10,-0x4(%rbp)\n  40f2e5:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  40f2e8:\t0f af 45 fc          \timul   -0x4(%rbp),%eax\n  40f2ec:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  40f2ef:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  40f2f2:\t0f af c0             \timul   %eax,%eax\n  40f2f5:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  40f2f8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40f2fb:\t0f af c0             \timul   %eax,%eax\n  40f2fe:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40f301:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  40f304:\tc1 e8 0f             \tshr    $0xf,%eax\n  40f307:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  40f30a:\tc1 65 dc 11          \tshll   $0x11,-0x24(%rbp)\n  40f30e:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  40f311:\t01 45 e0             \tadd    %eax,-0x20(%rbp)\n  40f314:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  40f317:\t3b 45 dc             \tcmp    -0x24(%rbp),%eax\n  40f31a:\t73 04                \tjae    40f320 <bn_sqr_words+0x6f>\n  40f31c:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40f320:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40f324:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  40f327:\t89 10                \tmov    %edx,(%rax)\n  40f329:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40f32d:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n  40f331:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40f334:\t89 02                \tmov    %eax,(%rdx)\n  40f336:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  40f33a:\t8b 40 04             \tmov    0x4(%rax),%eax\n  40f33d:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40f340:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40f343:\t0f b7 c0             \tmovzwl %ax,%eax\n  40f346:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  40f349:\tc1 6d f8 10          \tshrl   $0x10,-0x8(%rbp)\n  40f34d:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  40f350:\t0f af 45 f8          \timul   -0x8(%rbp),%eax\n  40f354:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  40f357:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  40f35a:\t0f af c0             \timul   %eax,%eax\n  40f35d:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  40f360:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40f363:\t0f af c0             \timul   %eax,%eax\n  40f366:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40f369:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  40f36c:\tc1 e8 0f             \tshr    $0xf,%eax\n  40f36f:\t01 45 f8             \tadd    %eax,-0x8(%rbp)\n  40f372:\tc1 65 d4 11          \tshll   $0x11,-0x2c(%rbp)\n  40f376:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  40f379:\t01 45 d8             \tadd    %eax,-0x28(%rbp)\n  40f37c:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  40f37f:\t3b 45 d4             \tcmp    -0x2c(%rbp),%eax\n  40f382:\t73 04                \tjae    40f388 <bn_sqr_words+0xd7>\n  40f384:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  40f388:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40f38c:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  40f390:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  40f393:\t89 02                \tmov    %eax,(%rdx)\n  40f395:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40f399:\t48 8d 50 0c          \tlea    0xc(%rax),%rdx\n  40f39d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40f3a0:\t89 02                \tmov    %eax,(%rdx)\n  40f3a2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  40f3a6:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40f3a9:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40f3ac:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40f3af:\t0f b7 c0             \tmovzwl %ax,%eax\n  40f3b2:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  40f3b5:\tc1 6d f4 10          \tshrl   $0x10,-0xc(%rbp)\n  40f3b9:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  40f3bc:\t0f af 45 f4          \timul   -0xc(%rbp),%eax\n  40f3c0:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  40f3c3:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  40f3c6:\t0f af c0             \timul   %eax,%eax\n  40f3c9:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  40f3cc:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40f3cf:\t0f af c0             \timul   %eax,%eax\n  40f3d2:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40f3d5:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  40f3d8:\tc1 e8 0f             \tshr    $0xf,%eax\n  40f3db:\t01 45 f4             \tadd    %eax,-0xc(%rbp)\n  40f3de:\tc1 65 cc 11          \tshll   $0x11,-0x34(%rbp)\n  40f3e2:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  40f3e5:\t01 45 d0             \tadd    %eax,-0x30(%rbp)\n  40f3e8:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  40f3eb:\t3b 45 cc             \tcmp    -0x34(%rbp),%eax\n  40f3ee:\t73 04                \tjae    40f3f4 <bn_sqr_words+0x143>\n  40f3f0:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  40f3f4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40f3f8:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n  40f3fc:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  40f3ff:\t89 02                \tmov    %eax,(%rdx)\n  40f401:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40f405:\t48 8d 50 14          \tlea    0x14(%rax),%rdx\n  40f409:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40f40c:\t89 02                \tmov    %eax,(%rdx)\n  40f40e:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  40f412:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  40f415:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40f418:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  40f41b:\t0f b7 c0             \tmovzwl %ax,%eax\n  40f41e:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n  40f421:\tc1 6d f0 10          \tshrl   $0x10,-0x10(%rbp)\n  40f425:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  40f428:\t0f af 45 f0          \timul   -0x10(%rbp),%eax\n  40f42c:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n  40f42f:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  40f432:\t0f af c0             \timul   %eax,%eax\n  40f435:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n  40f438:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  40f43b:\t0f af c0             \timul   %eax,%eax\n  40f43e:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40f441:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  40f444:\tc1 e8 0f             \tshr    $0xf,%eax\n  40f447:\t01 45 f0             \tadd    %eax,-0x10(%rbp)\n  40f44a:\tc1 65 c4 11          \tshll   $0x11,-0x3c(%rbp)\n  40f44e:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  40f451:\t01 45 c8             \tadd    %eax,-0x38(%rbp)\n  40f454:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  40f457:\t3b 45 c4             \tcmp    -0x3c(%rbp),%eax\n  40f45a:\t73 04                \tjae    40f460 <bn_sqr_words+0x1af>\n  40f45c:\t83 45 f0 01          \taddl   $0x1,-0x10(%rbp)\n  40f460:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40f464:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n  40f468:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  40f46b:\t89 02                \tmov    %eax,(%rdx)\n  40f46d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40f471:\t48 8d 50 1c          \tlea    0x1c(%rax),%rdx\n  40f475:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  40f478:\t89 02                \tmov    %eax,(%rdx)\n  40f47a:\t48 83 45 b0 10       \taddq   $0x10,-0x50(%rbp)\n  40f47f:\t48 83 45 b8 20       \taddq   $0x20,-0x48(%rbp)\n  40f484:\t83 6d ac 04          \tsubl   $0x4,-0x54(%rbp)\n  40f488:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  40f48b:\t83 e0 fc             \tand    $0xfffffffc,%eax\n  40f48e:\t85 c0                \ttest   %eax,%eax\n  40f490:\t0f 85 39 fe ff ff    \tjne    40f2cf <bn_sqr_words+0x1e>\n  40f496:\teb 75                \tjmp    40f50d <bn_sqr_words+0x25c>\n  40f498:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  40f49c:\t8b 00                \tmov    (%rax),%eax\n  40f49e:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  40f4a1:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40f4a4:\t0f b7 c0             \tmovzwl %ax,%eax\n  40f4a7:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  40f4aa:\tc1 6d ec 10          \tshrl   $0x10,-0x14(%rbp)\n  40f4ae:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40f4b1:\t0f af 45 ec          \timul   -0x14(%rbp),%eax\n  40f4b5:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  40f4b8:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40f4bb:\t0f af c0             \timul   %eax,%eax\n  40f4be:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  40f4c1:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40f4c4:\t0f af c0             \timul   %eax,%eax\n  40f4c7:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  40f4ca:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40f4cd:\tc1 e8 0f             \tshr    $0xf,%eax\n  40f4d0:\t01 45 ec             \tadd    %eax,-0x14(%rbp)\n  40f4d3:\tc1 65 e4 11          \tshll   $0x11,-0x1c(%rbp)\n  40f4d7:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40f4da:\t01 45 e8             \tadd    %eax,-0x18(%rbp)\n  40f4dd:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40f4e0:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n  40f4e3:\t73 04                \tjae    40f4e9 <bn_sqr_words+0x238>\n  40f4e5:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  40f4e9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40f4ed:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  40f4f0:\t89 10                \tmov    %edx,(%rax)\n  40f4f2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40f4f6:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n  40f4fa:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40f4fd:\t89 02                \tmov    %eax,(%rdx)\n  40f4ff:\t48 83 45 b0 04       \taddq   $0x4,-0x50(%rbp)\n  40f504:\t48 83 45 b8 08       \taddq   $0x8,-0x48(%rbp)\n  40f509:\t83 6d ac 01          \tsubl   $0x1,-0x54(%rbp)\n  40f50d:\t83 7d ac 00          \tcmpl   $0x0,-0x54(%rbp)\n  40f511:\t75 85                \tjne    40f498 <bn_sqr_words+0x1e7>\n  40f513:\teb 01                \tjmp    40f516 <bn_sqr_words+0x265>\n  40f515:\t90                   \tnop\n  40f516:\t5d                   \tpop    %rbp\n  40f517:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bn_sqr_words(unsigned int *a1, _DWORD *a2, int a3) {\n  __int64 result;\n  int v4;\n  unsigned int v7;\n  int v8;\n  unsigned int v9;\n  unsigned int v10;\n  int v11;\n  unsigned int v12;\n  unsigned int v13;\n  int v14;\n  unsigned int v15;\n  unsigned int v16;\n  int v17;\n  unsigned int v18;\n  unsigned int v19;\n  int v20;\n  unsigned int v21;\n  int v22;\n  unsigned int v23;\n  unsigned int v24;\n  unsigned int v25;\n  unsigned int v26;\n  unsigned int v27;\n  unsigned int v28;\n  unsigned int v29;\n  int v30;\n  unsigned int v31;\n  v4 = a3;\n  if (a3 > Number) {\n    while (Number) {\n      result = v4 & Number;\n      if (!(_DWORD)result)\n        break;\n      v17 = (unsigned __int16)*a2;\n      v30 = HIWORD(*a2);\n      v16 = v30 * v17;\n      v31 = ((unsigned int)(v30 * v17) >> Number) + v30 * v30;\n      v16 <<= Number;\n      v18 = v16 + v17 * v17;\n      if (v18 < v16)\n        ++v31;\n      *a1 = v18;\n      a1[Number] = v31;\n      v28 = a2[Number];\n      v14 = (unsigned __int16)v28;\n      v28 >>= Number;\n      v13 = v28 * v14;\n      v29 = ((v28 * v14) >> Number) + v28 * v28;\n      v13 <<= Number;\n      v15 = v13 + v14 * v14;\n      if (v15 < v13)\n        ++v29;\n      a1[Number] = v15;\n      a1[Number] = v29;\n      v26 = a2[Number];\n      v11 = (unsigned __int16)v26;\n      v26 >>= Number;\n      v10 = v26 * v11;\n      v27 = ((v26 * v11) >> Number) + v26 * v26;\n      v10 <<= Number;\n      v12 = v10 + v11 * v11;\n      if (v12 < v10)\n        ++v27;\n      a1[Number] = v12;\n      a1[Number] = v27;\n      v24 = a2[Number];\n      v8 = (unsigned __int16)v24;\n      v24 >>= Number;\n      v7 = v24 * v8;\n      v25 = ((v24 * v8) >> Number) + v24 * v24;\n      v7 <<= Number;\n      v9 = v7 + v8 * v8;\n      if (v9 < v7)\n        ++v25;\n      a1[Number] = v9;\n      a1[Number] = v25;\n      a2 += Number;\n      a1 += Number;\n      v4 -= Number;\n    }\n    while (v4) {\n      v20 = (unsigned __int16)*a2;\n      v22 = HIWORD(*a2);\n      v19 = v22 * v20;\n      v23 = ((unsigned int)(v22 * v20) >> Number) + v22 * v22;\n      v19 <<= Number;\n      v21 = v19 + v20 * v20;\n      if (v21 < v19)\n        ++v23;\n      *a1 = v21;\n      result = v23;\n      a1[Number] = v23;\n      ++a2;\n      a1 += Number;\n      --v4;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl bn_sqr_words(unsigned int *r, const unsigned int *a, int n) {\n  int na;\n  unsigned int m_2;\n  unsigned int l_2a;\n  unsigned int l_2;\n  unsigned int m_1;\n  unsigned int l_1a;\n  unsigned int l_1;\n  unsigned int m_0;\n  unsigned int l_0a;\n  unsigned int l_0;\n  unsigned int m;\n  unsigned int la;\n  unsigned int l;\n  unsigned int m_3;\n  unsigned int l_3a;\n  unsigned int l_3;\n  unsigned int h_3a;\n  unsigned int h_3;\n  unsigned int h_2a;\n  unsigned int h_2;\n  unsigned int h_1a;\n  unsigned int h_1;\n  unsigned int h_0a;\n  unsigned int h_0;\n  unsigned int ha;\n  unsigned int h;\n  na = n;\n  if (n > Number) {\n    while ((na & Number) != Number) {\n      la = (unsigned __int16)*a;\n      ha = HIWORD(*a);\n      m = ha * la;\n      h = ((ha * la) >> Number) + ha * ha;\n      m <<= Number;\n      l = m + la * la;\n      if (l < m)\n        ++h;\n      *r = l;\n      r[Number] = h;\n      h_0a = a[Number];\n      l_0a = (unsigned __int16)h_0a;\n      h_0a >>= Number;\n      m_0 = h_0a * l_0a;\n      h_0 = ((h_0a * l_0a) >> Number) + h_0a * h_0a;\n      m_0 <<= Number;\n      l_0 = m_0 + l_0a * l_0a;\n      if (l_0 < m_0)\n        ++h_0;\n      r[Number] = l_0;\n      r[Number] = h_0;\n      h_1a = a[Number];\n      l_1a = (unsigned __int16)h_1a;\n      h_1a >>= Number;\n      m_1 = h_1a * l_1a;\n      h_1 = ((h_1a * l_1a) >> Number) + h_1a * h_1a;\n      m_1 <<= Number;\n      l_1 = m_1 + l_1a * l_1a;\n      if (l_1 < m_1)\n        ++h_1;\n      r[Number] = l_1;\n      r[Number] = h_1;\n      h_2a = a[Number];\n      l_2a = (unsigned __int16)h_2a;\n      h_2a >>= Number;\n      m_2 = h_2a * l_2a;\n      h_2 = ((h_2a * l_2a) >> Number) + h_2a * h_2a;\n      m_2 <<= Number;\n      l_2 = m_2 + l_2a * l_2a;\n      if (l_2 < m_2)\n        ++h_2;\n      r[Number] = l_2;\n      r[Number] = h_2;\n      a += Number;\n      r += Number;\n      na -= Number;\n    }\n    while (na) {\n      l_3a = (unsigned __int16)*a;\n      h_3a = HIWORD(*a);\n      m_3 = h_3a * l_3a;\n      h_3 = ((h_3a * l_3a) >> Number) + h_3a * h_3a;\n      m_3 <<= Number;\n      l_3 = m_3 + l_3a * l_3a;\n      if (l_3 < m_3)\n        ++h_3;\n      *r = l_3;\n      r[Number] = h_3;\n      ++a;\n      r += Number;\n      --na;\n    }\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "claymodel", "repo_name": "voip-foip", "path": "claymodel/voip-foip/34933eda38be8fdd28d096bce5fe080652f154052cc27e4456c730142e13f164", "path_in_repo": "claymodel/voip-foip/kamailio-3.1.4/modules_k/qos/qos.so", "objdump": "", "code_s": "int __fastcall _cxa_finalize(void *a1) { return __cxa_finalize(a1); }", "code_t": "int __fastcall _cxa_finalize(void *a1) { return __cxa_finalize(a1); }", "var": [], "body_in_train": true}, {"repo_owner": "LibXenonProject", "repo_name": "xmplayer", "path": "LibXenonProject/xmplayer/3c828ba284f91f536848c051dc88d3e436801835d7381a6bbf19e4484ca5d44c", "path_in_repo": "LibXenonProject/xmplayer/mplayer/ffmpeg/libavcodec/nellymoserenc.o", "objdump": "000000000000045c <encode_init>:\n     45c:\t48 83 ec 28          \tsub    $0x28,%rsp\n     460:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     465:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     46a:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n     46e:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n     473:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     478:\t8b 80 e4 01 00 00    \tmov    0x1e4(%rax),%eax\n     47e:\t83 f8 01             \tcmp    $0x1,%eax\n     481:\t74 26                \tje     4a9 <encode_init+0x4d>\n     483:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     488:\tba 00 00 00 00       \tmov    $0x0,%edx\n     48d:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     492:\t48 89 c7             \tmov    %rax,%rdi\n     495:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     49a:\te8 00 00 00 00       \tcallq  49f <encode_init+0x43>\n     49f:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n     4a4:\te9 65 02 00 00       \tjmpq   70e <encode_init+0x2b2>\n     4a9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     4ae:\t8b 80 e0 01 00 00    \tmov    0x1e0(%rax),%eax\n     4b4:\t3d 40 1f 00 00       \tcmp    $0x1f40,%eax\n     4b9:\t74 7d                \tje     538 <encode_init+0xdc>\n     4bb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     4c0:\t8b 80 e0 01 00 00    \tmov    0x1e0(%rax),%eax\n     4c6:\t3d 80 3e 00 00       \tcmp    $0x3e80,%eax\n     4cb:\t74 6b                \tje     538 <encode_init+0xdc>\n     4cd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     4d2:\t8b 80 e0 01 00 00    \tmov    0x1e0(%rax),%eax\n     4d8:\t3d 11 2b 00 00       \tcmp    $0x2b11,%eax\n     4dd:\t74 59                \tje     538 <encode_init+0xdc>\n     4df:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     4e4:\t8b 80 e0 01 00 00    \tmov    0x1e0(%rax),%eax\n     4ea:\t3d 22 56 00 00       \tcmp    $0x5622,%eax\n     4ef:\t74 47                \tje     538 <encode_init+0xdc>\n     4f1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     4f6:\t8b 80 e0 01 00 00    \tmov    0x1e0(%rax),%eax\n     4fc:\t3d 44 ac 00 00       \tcmp    $0xac44,%eax\n     501:\t74 35                \tje     538 <encode_init+0xdc>\n     503:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     508:\t8b 80 fc 02 00 00    \tmov    0x2fc(%rax),%eax\n     50e:\t85 c0                \ttest   %eax,%eax\n     510:\t78 26                \tjs     538 <encode_init+0xdc>\n     512:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     517:\tba 00 00 00 00       \tmov    $0x0,%edx\n     51c:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     521:\t48 89 c7             \tmov    %rax,%rdi\n     524:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     529:\te8 00 00 00 00       \tcallq  52e <encode_init+0xd2>\n     52e:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n     533:\te9 d6 01 00 00       \tjmpq   70e <encode_init+0x2b2>\n     538:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     53d:\tc7 80 ec 01 00 00 00 \tmovl   $0x100,0x1ec(%rax)\n     544:\t01 00 00 \n     547:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     54c:\tc7 80 90 00 00 00 80 \tmovl   $0x80,0x90(%rax)\n     553:\t00 00 00 \n     556:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     55b:\t48 8d 90 60 16 00 00 \tlea    0x1660(%rax),%rdx\n     562:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     567:\t48 89 d6             \tmov    %rdx,%rsi\n     56a:\t48 89 c7             \tmov    %rax,%rdi\n     56d:\te8 00 00 00 00       \tcallq  572 <encode_init+0x116>\n     572:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     577:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n     57c:\t48 89 10             \tmov    %rdx,(%rax)\n     57f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     584:\t48 8d 88 f8 15 00 00 \tlea    0x15f8(%rax),%rcx\n     58b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 592 <encode_init+0x136>\n     592:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n     597:\tba 00 00 00 00       \tmov    $0x0,%edx\n     59c:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     5a1:\t48 89 cf             \tmov    %rcx,%rdi\n     5a4:\te8 00 00 00 00       \tcallq  5a9 <encode_init+0x14d>\n     5a9:\t89 44 24 18          \tmov    %eax,0x18(%rsp)\n     5ad:\t83 7c 24 18 00       \tcmpl   $0x0,0x18(%rsp)\n     5b2:\t0f 88 44 01 00 00    \tjs     6fc <encode_init+0x2a0>\n     5b8:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     5bd:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n     5c1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     5c6:\t48 89 c6             \tmov    %rax,%rsi\n     5c9:\t48 89 d7             \tmov    %rdx,%rdi\n     5cc:\te8 00 00 00 00       \tcallq  5d1 <encode_init+0x175>\n     5d1:\tbf 07 00 00 00       \tmov    $0x7,%edi\n     5d6:\te8 00 00 00 00       \tcallq  5db <encode_init+0x17f>\n     5db:\tc7 44 24 1c 00 00 00 \tmovl   $0x0,0x1c(%rsp)\n     5e2:\t00 \n     5e3:\teb 6a                \tjmp    64f <encode_init+0x1f3>\n     5e5:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     5e9:\tf7 d8                \tneg    %eax\n     5eb:\tf2 0f 2a c0          \tcvtsi2sd %eax,%xmm0\n     5ef:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 5f7 <encode_init+0x19b>\n     5f6:\t00 \n     5f7:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n     5fb:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 603 <encode_init+0x1a7>\n     602:\t00 \n     603:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n     607:\t66 0f 28 c8          \tmovapd %xmm0,%xmm1\n     60b:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 613 <encode_init+0x1b7>\n     612:\t00 \n     613:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     617:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 61e <encode_init+0x1c2>\n     61e:\t66 0f 28 c8          \tmovapd %xmm0,%xmm1\n     622:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n     627:\te8 00 00 00 00       \tcallq  62c <encode_init+0x1d0>\n     62c:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n     630:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # 638 <encode_init+0x1dc>\n     637:\t00 \n     638:\t0f 57 c1             \txorps  %xmm1,%xmm0\n     63b:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     63f:\t48 98                \tcltq   \n     641:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n     648:\t00 00 \n     64a:\t83 44 24 1c 01       \taddl   $0x1,0x1c(%rsp)\n     64f:\t81 7c 24 1c ff 07 00 \tcmpl   $0x7ff,0x1c(%rsp)\n     656:\t00 \n     657:\t7e 8c                \tjle    5e5 <encode_init+0x189>\n     659:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     65e:\t48 8b 00             \tmov    (%rax),%rax\n     661:\t8b 80 a4 02 00 00    \tmov    0x2a4(%rax),%eax\n     667:\t85 c0                \ttest   %eax,%eax\n     669:\t74 5e                \tje     6c9 <encode_init+0x26d>\n     66b:\tbf 20 36 32 00       \tmov    $0x323620,%edi\n     670:\te8 00 00 00 00       \tcallq  675 <encode_init+0x219>\n     675:\t48 89 c2             \tmov    %rax,%rdx\n     678:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     67d:\t48 89 90 80 24 00 00 \tmov    %rdx,0x2480(%rax)\n     684:\tbf 88 8d 0c 00       \tmov    $0xc8d88,%edi\n     689:\te8 00 00 00 00       \tcallq  68e <encode_init+0x232>\n     68e:\t48 89 c2             \tmov    %rax,%rdx\n     691:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     696:\t48 89 90 88 24 00 00 \tmov    %rdx,0x2488(%rax)\n     69d:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     6a2:\t48 8b 80 80 24 00 00 \tmov    0x2480(%rax),%rax\n     6a9:\t48 85 c0             \ttest   %rax,%rax\n     6ac:\t74 11                \tje     6bf <encode_init+0x263>\n     6ae:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     6b3:\t48 8b 80 88 24 00 00 \tmov    0x2488(%rax),%rax\n     6ba:\t48 85 c0             \ttest   %rax,%rax\n     6bd:\t75 0a                \tjne    6c9 <encode_init+0x26d>\n     6bf:\tc7 44 24 18 f4 ff ff \tmovl   $0xfffffff4,0x18(%rsp)\n     6c6:\tff \n     6c7:\teb 34                \tjmp    6fd <encode_init+0x2a1>\n     6c9:\te8 00 00 00 00       \tcallq  6ce <encode_init+0x272>\n     6ce:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n     6d3:\t48 89 82 80 03 00 00 \tmov    %rax,0x380(%rdx)\n     6da:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     6df:\t48 8b 80 80 03 00 00 \tmov    0x380(%rax),%rax\n     6e6:\t48 85 c0             \ttest   %rax,%rax\n     6e9:\t75 0a                \tjne    6f5 <encode_init+0x299>\n     6eb:\tc7 44 24 18 f4 ff ff \tmovl   $0xfffffff4,0x18(%rsp)\n     6f2:\tff \n     6f3:\teb 08                \tjmp    6fd <encode_init+0x2a1>\n     6f5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6fa:\teb 12                \tjmp    70e <encode_init+0x2b2>\n     6fc:\t90                   \tnop\n     6fd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     702:\t48 89 c7             \tmov    %rax,%rdi\n     705:\te8 be fc ff ff       \tcallq  3c8 <encode_end>\n     70a:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n     70e:\t48 83 c4 28          \tadd    $0x28,%rsp\n     712:\tc3                   \tretq   ", "code_s": "__int64 __fastcall encode_init(__int64 a1) {\n  float v2;\n  __int64 *v3;\n  int v4;\n  int i;\n  v3 = *(__int64 **)(a1 + Number);\n  if (*(_DWORD *)(a1 + Number) != Number) {\n    av_log(a1, Number L, String);\n    return Number L;\n  }\n  if (*(_DWORD *)(a1 + Number) != Number &&\n      *(_DWORD *)(a1 + Number) != Number &&\n      *(_DWORD *)(a1 + Number) != Number &&\n      *(_DWORD *)(a1 + Number) != Number &&\n      *(_DWORD *)(a1 + Number) != Number && *(int *)(a1 + Number) >= Number) {\n    av_log(a1, Number L, String);\n    return Number L;\n  }\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  ff_af_queue_init(a1, v3 + Number);\n  *v3 = a1;\n  v4 = ff_mdct_init(v3 + Number, Number L, Number L, Number);\n  if (v4 >= Number) {\n    ff_dsputil_init(v3 + Number, a1);\n    ff_init_ff_sine_windows(Number L);\n    for (i = Number; i <= Number; ++i) {\n      v2 = pow(Number, (double)-i / Number - Number + Number);\n      pow_table[i] = -v2;\n    }\n    if (!*(_DWORD *)(*v3 + Number) ||\n        (v3[Number] = av_malloc(Number L), v3[Number] = av_malloc(Number L),\n         v3[Number]) &&\n            v3[Number]) {\n      *(_QWORD *)(a1 + Number) = avcodec_alloc_frame();\n      if (*(_QWORD *)(a1 + Number))\n        return Number L;\n      v4 = Number;\n    } else {\n      v4 = Number;\n    }\n  }\n  encode_end(a1);\n  return (unsigned int)v4;\n}", "code_t": "int __cdecl encode_init(AVCodecContext_0 *avctx) {\n  float v2;\n  NellyMoserEncodeContext_0 *s;\n  int ret;\n  int i;\n  s = (NellyMoserEncodeContext_0 *)avctx->priv_data;\n  if (avctx->channels != Number) {\n    av_log(avctx, Number L, String);\n    return Number;\n  }\n  if (avctx->sample_rate != Number && avctx->sample_rate != Number &&\n      avctx->sample_rate != Number && avctx->sample_rate != Number &&\n      avctx->sample_rate != Number && avctx->strict_std_compliance >= Number) {\n    av_log(avctx, Number L, String);\n    return Number;\n  }\n  avctx->frame_size = Number;\n  avctx->delay = Number;\n  ff_af_queue_init(avctx, &s->afq);\n  s->avctx = avctx;\n  ret = ff_mdct_init(&s->mdct_ctx, Number L, Number L, Number);\n  if (ret >= Number) {\n    ff_dsputil_init(&s->dsp, avctx);\n    ff_init_ff_sine_windows(Number L);\n    for (i = Number; i <= Number; ++i) {\n      v2 = pow(Number, (double)-i / Number - Number + Number);\n      pow_table[i] = -v2;\n    }\n    if (!s->avctx->trellis ||\n        (s->opt = (float(*)[Number])av_malloc(Number L),\n         s->path = (uint8_t(*)[Number])av_malloc(Number L), s->opt) &&\n            s->path) {\n      avctx->coded_frame = (AVFrame_0 *)avcodec_alloc_frame();\n      if (avctx->coded_frame)\n        return Number;\n      ret = Number;\n    } else {\n      ret = Number;\n    }\n  }\n  encode_end(avctx);\n  return ret;\n}", "var": [], "body_in_train": true}, {"repo_owner": "evirt", "repo_name": "qemu-gl", "path": "evirt/qemu-gl/f3f979519781da734178f9722e4a80006f0271c5729c967db3463e59bb134ae6", "path_in_repo": "evirt/qemu-gl//sparc-linux-user/disas.o", "objdump": "0000000000000115 <perror_memory>:\n 115:\t55                   \tpush   %rbp\n 116:\t48 89 e5             \tmov    %rsp,%rbp\n 119:\t48 83 ec 30          \tsub    $0x30,%rsp\n 11d:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n 120:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 124:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 128:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 12f:\t00 00 \n 131:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 135:\t31 c0                \txor    %eax,%eax\n 137:\t83 7d ec 05          \tcmpl   $0x5,-0x14(%rbp)\n 13b:\t74 23                \tje     160 <perror_memory+0x4b>\n 13d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 141:\t48 8b 08             \tmov    (%rax),%rcx\n 144:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 148:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 14c:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n 14f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 154:\t48 89 c7             \tmov    %rax,%rdi\n 157:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 15c:\tff d1                \tcallq  *%rcx\n 15e:\teb 22                \tjmp    182 <perror_memory+0x6d>\n 160:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 164:\t48 8b 08             \tmov    (%rax),%rcx\n 167:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 16b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 16f:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 173:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 178:\t48 89 c7             \tmov    %rax,%rdi\n 17b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 180:\tff d1                \tcallq  *%rcx\n 182:\t90                   \tnop\n 183:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 187:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 18e:\t00 00 \n 190:\t74 05                \tje     197 <perror_memory+0x82>\n 192:\te8 00 00 00 00       \tcallq  197 <perror_memory+0x82>\n 197:\tc9                   \tleaveq \n 198:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall perror_memory(unsigned int a1, __int64 a2,\n                                          __int64 a3) {\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (a1 == Number)\n    (*(void (**)(_QWORD, const char *, ...))a3)(*(_QWORD *)(a3 + Number),\n                                                String, a2);\n  else\n    (*(void (**)(_QWORD, const char *, ...))a3)(*(_QWORD *)(a3 + Number),\n                                                String, a1);\n  return __readfsqword(Number) ^ v4;\n}", "code_t": "void __cdecl perror_memory(int status, bfd_vma memaddr,\n                           disassemble_info *info) {\n  if (status == Number)\n    info->fprintf_func(info->stream, String, memaddr);\n  else\n    info->fprintf_func(info->stream, String, (unsigned int)status);\n}", "var": [], "body_in_train": true}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/8161a116325d80774a947b6eee9d3e76babfabbf185dab3cf9726dff777ae0b5", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Source/CMakeFiles/CMakeLib.dir/cmGeneratorExpression.cxx.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeIN5cmsys6StringES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  10:\t5d                   \tpop    %rbp\n  11:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n    _Rb_tree<cmsys String, cmsys String, std _Identity<cmsys String>,\n             std less<cmsys String>, std allocator<cmsys String>>\n    _S_left(__int64 a1) {\n  return *(_QWORD *)(a1 + Number);\n}", "code_t": "__int64 __fastcall std\n    _Rb_tree<cmsys String, cmsys String, std _Identity<cmsys String>,\n             std less<cmsys String>, std allocator<cmsys String>>\n    _S_left(__int64 a1) {\n  return *(_QWORD *)(a1 + Number);\n}", "var": [], "body_in_train": true}, {"repo_owner": "amikey", "repo_name": "FFPlayer", "path": "amikey/FFPlayer/bec350af32e78ea241c3364c1ab10978249309dc30cd8999960ec312c3c878a0", "path_in_repo": "amikey/FFPlayer/jni/ffmpeg/libavcodec/x86/dsputil_init.o", "objdump": "0000000000003943 <put_no_rnd_qpel16_mc32_mmxext>:\n    3943:\t48 81 ec 48 01 00 00 \tsub    $0x148,%rsp\n    394a:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    394f:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    3954:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    3959:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    395e:\t48 89 84 24 38 01 00 \tmov    %rax,0x138(%rsp)\n    3965:\t00 \n    3966:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    396b:\t89 c2                \tmov    %eax,%edx\n    396d:\t48 8b 74 24 10       \tmov    0x10(%rsp),%rsi\n    3972:\t48 8b 84 24 38 01 00 \tmov    0x138(%rsp),%rax\n    3979:\t00 \n    397a:\t41 b8 11 00 00 00    \tmov    $0x11,%r8d\n    3980:\t89 d1                \tmov    %edx,%ecx\n    3982:\tba 10 00 00 00       \tmov    $0x10,%edx\n    3987:\t48 89 c7             \tmov    %rax,%rdi\n    398a:\te8 00 00 00 00       \tcallq  398f <put_no_rnd_qpel16_mc32_mmxext+0x4c>\n    398f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    3994:\t89 c1                \tmov    %eax,%ecx\n    3996:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    399b:\t48 8d 70 01          \tlea    0x1(%rax),%rsi\n    399f:\t48 8b 94 24 38 01 00 \tmov    0x138(%rsp),%rdx\n    39a6:\t00 \n    39a7:\t48 8b 84 24 38 01 00 \tmov    0x138(%rsp),%rax\n    39ae:\t00 \n    39af:\t41 b9 11 00 00 00    \tmov    $0x11,%r9d\n    39b5:\t41 89 c8             \tmov    %ecx,%r8d\n    39b8:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    39bd:\t48 89 c7             \tmov    %rax,%rdi\n    39c0:\te8 00 00 00 00       \tcallq  39c5 <put_no_rnd_qpel16_mc32_mmxext+0x82>\n    39c5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    39ca:\t89 c2                \tmov    %eax,%edx\n    39cc:\t48 8b b4 24 38 01 00 \tmov    0x138(%rsp),%rsi\n    39d3:\t00 \n    39d4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    39d9:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    39de:\t48 89 c7             \tmov    %rax,%rdi\n    39e1:\te8 00 00 00 00       \tcallq  39e6 <put_no_rnd_qpel16_mc32_mmxext+0xa3>\n    39e6:\t90                   \tnop\n    39e7:\t48 81 c4 48 01 00 00 \tadd    $0x148,%rsp\n    39ee:\tc3                   \tretq   ", "code_s": "__int64 __fastcall put_no_rnd_qpel16_mc32_mmxext(__int64 a1, __int64 a2,\n                                                 unsigned int a3) {\n  char v5[Number];\n  char *v6;\n  v6 = v5;\n  ff_put_no_rnd_mpeg4_qpel16_h_lowpass_mmxext(v5, a2, Number L, a3, Number L);\n  ff_put_no_rnd_pixels16_l2_mmxext(v6, a2 + Number, v6, Number L, a3, Number L);\n  return ff_put_no_rnd_mpeg4_qpel16_v_lowpass_mmxext(a1, v6, a3, Number L);\n}", "code_t": "void __cdecl put_no_rnd_qpel16_mc32_mmxext(uint8_t *dst, uint8_t *src,\n                                           ptrdiff_t stride) {\n  unsigned int stridea;\n  uint64_t half[Number];\n  uint8_t *halfH;\n  stridea = stride;\n  halfH = (uint8_t *)half;\n  ff_put_no_rnd_mpeg4_qpel16_h_lowpass_mmxext(half, src, Number L,\n                                              (unsigned int)stride, Number L);\n  ff_put_no_rnd_pixels16_l2_mmxext(halfH, src + Number, halfH, Number L,\n                                   stridea, Number L);\n  ff_put_no_rnd_mpeg4_qpel16_v_lowpass_mmxext(dst, halfH, stridea, Number L);\n}", "var": [], "body_in_train": true}, {"repo_owner": "gabrielleLQX", "repo_name": "SAM3_codeqemu", "path": "gabrielleLQX/SAM3_codeqemu/ae431d73035870dd72c626d9944cbca0e6337752d097ca2c74cf7b75e8665fb8", "path_in_repo": "gabrielleLQX/SAM3_codeqemu//block-migration.o", "objdump": "0000000000000efc <flush_blks>:\n     efc:\t55                   \tpush   %rbp\n     efd:\t48 89 e5             \tmov    %rsp,%rbp\n     f00:\t48 83 ec 30          \tsub    $0x30,%rsp\n     f04:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     f08:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     f0f:\t00 00 \n     f11:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     f15:\t31 c0                \txor    %eax,%eax\n     f17:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n     f1e:\te8 dd f0 ff ff       \tcallq  0 <blk_mig_lock>\n     f23:\te9 d9 00 00 00       \tjmpq   1001 <flush_blks+0x105>\n     f28:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f2c:\t48 89 c7             \tmov    %rax,%rdi\n     f2f:\te8 00 00 00 00       \tcallq  f34 <flush_blks+0x38>\n     f34:\t85 c0                \ttest   %eax,%eax\n     f36:\t0f 85 dd 00 00 00    \tjne    1019 <flush_blks+0x11d>\n     f3c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     f40:\t8b 40 50             \tmov    0x50(%rax),%eax\n     f43:\t85 c0                \ttest   %eax,%eax\n     f45:\t79 0f                \tjns    f56 <flush_blks+0x5a>\n     f47:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     f4b:\t8b 40 50             \tmov    0x50(%rax),%eax\n     f4e:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     f51:\te9 c4 00 00 00       \tjmpq   101a <flush_blks+0x11e>\n     f56:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f5d <flush_blks+0x61>\n     f5d:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     f61:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # f68 <flush_blks+0x6c>\n     f68:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f6f <flush_blks+0x73>\n     f6f:\t48 85 c0             \ttest   %rax,%rax\n     f72:\t75 0e                \tjne    f82 <flush_blks+0x86>\n     f74:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # f7b <flush_blks+0x7f>\n     f7b:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # f82 <flush_blks+0x86>\n     f82:\te8 b3 f0 ff ff       \tcallq  3a <blk_mig_unlock>\n     f87:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     f8b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f8f:\t48 89 d6             \tmov    %rdx,%rsi\n     f92:\t48 89 c7             \tmov    %rax,%rdi\n     f95:\te8 da f0 ff ff       \tcallq  74 <blk_send>\n     f9a:\te8 61 f0 ff ff       \tcallq  0 <blk_mig_lock>\n     f9f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     fa3:\t48 8b 00             \tmov    (%rax),%rax\n     fa6:\t48 89 c7             \tmov    %rax,%rdi\n     fa9:\te8 00 00 00 00       \tcallq  fae <flush_blks+0xb2>\n     fae:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     fb2:\t48 89 c7             \tmov    %rax,%rdi\n     fb5:\te8 00 00 00 00       \tcallq  fba <flush_blks+0xbe>\n     fba:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # fc0 <flush_blks+0xc4>\n     fc0:\t83 e8 01             \tsub    $0x1,%eax\n     fc3:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # fc9 <flush_blks+0xcd>\n     fc9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # fcf <flush_blks+0xd3>\n     fcf:\t83 c0 01             \tadd    $0x1,%eax\n     fd2:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # fd8 <flush_blks+0xdc>\n     fd8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # fde <flush_blks+0xe2>\n     fde:\t85 c0                \ttest   %eax,%eax\n     fe0:\t79 1f                \tjns    1001 <flush_blks+0x105>\n     fe2:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # fe9 <flush_blks+0xed>\n     fe9:\tba 1b 02 00 00       \tmov    $0x21b,%edx\n     fee:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # ff5 <flush_blks+0xf9>\n     ff5:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # ffc <flush_blks+0x100>\n     ffc:\te8 00 00 00 00       \tcallq  1001 <flush_blks+0x105>\n    1001:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1008 <flush_blks+0x10c>\n    1008:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    100c:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1011:\t0f 85 11 ff ff ff    \tjne    f28 <flush_blks+0x2c>\n    1017:\teb 01                \tjmp    101a <flush_blks+0x11e>\n    1019:\t90                   \tnop\n    101a:\te8 1b f0 ff ff       \tcallq  3a <blk_mig_unlock>\n    101f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    1022:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1026:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    102d:\t00 00 \n    102f:\t74 05                \tje     1036 <flush_blks+0x13a>\n    1031:\te8 00 00 00 00       \tcallq  1036 <flush_blks+0x13a>\n    1036:\tc9                   \tleaveq \n    1037:\tc3                   \tretq   ", "code_s": "__int64 __fastcall flush_blks(__int64 a1) {\n  unsigned int v2;\n  _QWORD *v3;\n  v2 = Number;\n  blk_mig_lock();\n  while (Number) {\n    v3 = (_QWORD *)qword_1A28;\n    if (!qword_1A28 || (unsigned int)qemu_file_rate_limit(a1))\n      break;\n    if (*((int *)v3 + Number) < Number) {\n      v2 = *((_DWORD *)v3 + Number);\n      break;\n    }\n    qword_1A28 = *(_QWORD *)(qword_1A28 + Number);\n    if (!qword_1A28)\n      qword_1A30 = (__int64)&qword_1A28;\n    blk_mig_unlock();\n    blk_send(a1, v3);\n    blk_mig_lock();\n    g_free(*v3);\n    g_free(v3);\n    --dword_1A3C;\n    ++dword_1A40;\n    if (dword_1A3C < Number)\n      _assert_fail(String, String, Number, String);\n  }\n  blk_mig_unlock();\n  return v2;\n}", "code_t": "int __cdecl flush_blks(QEMUFile_0 *f) {\n  int ret;\n  BlkMigBlock *blk;\n  ret = Number;\n  blk_mig_lock();\n  while (Number) {\n    blk = block_mig_state.blk_list.sqh_first;\n    if (!block_mig_state.blk_list.sqh_first ||\n        (unsigned int)qemu_file_rate_limit(f))\n      break;\n    if (blk->ret < Number) {\n      ret = blk->ret;\n      break;\n    }\n    block_mig_state.blk_list.sqh_first =\n        block_mig_state.blk_list.sqh_first->entry.sqe_next;\n    if (!block_mig_state.blk_list.sqh_first)\n      block_mig_state.blk_list.sqh_last = &block_mig_state.blk_list.sqh_first;\n    blk_mig_unlock();\n    blk_send(f, blk);\n    blk_mig_lock();\n    g_free(blk->buf);\n    g_free(blk);\n    --block_mig_state.read_done;\n    ++block_mig_state.transferred;\n    if (block_mig_state.read_done < Number)\n      _assert_fail(String, String, Number, String);\n  }\n  blk_mig_unlock();\n  return ret;\n}", "var": [], "body_in_train": true}, {"repo_owner": "avble", "repo_name": "mqtt", "path": "avble/mqtt/ef6b050651cbb287cf44e377c6c5b8aac03f62040e58d768e9b7f6d903718b3d", "path_in_repo": "avble/mqtt/mosquitto-1.4.2/lib/cpp/mosquittopp.o", "objdump": "0000000000000420 <_ZN6mosqpp11mosquittopp17message_retry_setEj>:\n 420:\t48 8b 7f 08          \tmov    0x8(%rdi),%rdi\n 424:\te9 00 00 00 00       \tjmpq   429 <_ZN6mosqpp11mosquittopp17message_retry_setEj+0x9>\n 429:\t90                   \tnop\n 42a:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)", "code_s": "__int64 __fastcall mosqpp mosquittopp\nmessage_retry_set(mosqpp mosquittopp *this) {\n  return mosquitto_message_retry_set(*((_QWORD *)this + Number));\n}", "code_t": "void __fastcall mosqpp mosquittopp\nmessage_retry_set(mosqpp mosquittopp *const this, unsigned int message_retry) {\n  mosquitto_message_retry_set(this->m_mosq, message_retry);\n}", "var": [], "body_in_train": false}, {"repo_owner": "kushpatel", "repo_name": "linux", "path": "kushpatel/linux/4fa4c5702d4c900ba6266e34cf07e8426f5ad6bea7d59f251f8a36210c1c378e", "path_in_repo": "kushpatel/linux/linux-4.1/tools/testing/selftests/ipc/msgque_test", "objdump": "", "code_s": "int sprintf(char *s, const char *format, ...) { return sprintf(s, format); }", "code_t": "int sprintf(char *s, const char *format, ...) { return sprintf(s, format); }", "var": [], "body_in_train": true}, {"repo_owner": "wlanjie", "repo_name": "MacFFPlay", "path": "wlanjie/MacFFPlay/0a4e75d878dfdf151f1ae9890f3da2e0ba566268bfd99916c77cbf6533e904d4", "path_in_repo": "wlanjie/MacFFPlay/ffmpeg/libavformat/mpegts.o", "objdump": "00000000000032c0 <parse_mp4_descr_arr>:\n    32c0:\t48 83 ec 38          \tsub    $0x38,%rsp\n    32c4:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    32c9:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    32ce:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n    32d2:\teb 4a                \tjmp    331e <parse_mp4_descr_arr+0x5e>\n    32d4:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n    32d8:\t48 8b 74 24 10       \tmov    0x10(%rsp),%rsi\n    32dd:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    32e2:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    32e7:\t48 89 c7             \tmov    %rax,%rdi\n    32ea:\te8 f8 05 00 00       \tcallq  38e7 <parse_mp4_descr>\n    32ef:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n    32f3:\t83 7c 24 2c 00       \tcmpl   $0x0,0x2c(%rsp)\n    32f8:\t79 06                \tjns    3300 <parse_mp4_descr_arr+0x40>\n    32fa:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n    32fe:\teb 2b                \tjmp    332b <parse_mp4_descr_arr+0x6b>\n    3300:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    3305:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n    3309:\t48 8d 54 24 0c       \tlea    0xc(%rsp),%rdx\n    330e:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n    3313:\t48 89 c6             \tmov    %rax,%rsi\n    3316:\t48 89 cf             \tmov    %rcx,%rdi\n    3319:\te8 2f ff ff ff       \tcallq  324d <update_offsets>\n    331e:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    3322:\t85 c0                \ttest   %eax,%eax\n    3324:\t7f ae                \tjg     32d4 <parse_mp4_descr_arr+0x14>\n    3326:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    332b:\t48 83 c4 38          \tadd    $0x38,%rsp\n    332f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall parse_mp4_descr_arr(__int64 a1, __int64 a2,\n                                       unsigned int a3) {\n  unsigned int i;\n  __int64 v5;\n  __int64 v6;\n  unsigned int v7;\n  v6 = a1;\n  v5 = a2;\n  for (i = a3; (int)i > Number; update_offsets(v6 + Number, &v5, &i)) {\n    v7 = parse_mp4_descr(v6, v5, i, Number L);\n    if ((v7 & Number) != Number)\n      return v7;\n  }\n  return Number L;\n}", "code_t": "int __cdecl parse_mp4_descr_arr(MP4DescrParseContext_0 *d, int64_t off,\n                                int len) {\n  int lena;\n  int64_t offa;\n  MP4DescrParseContext_0 *da;\n  int ret;\n  da = d;\n  offa = off;\n  for (lena = len; lena > Number; update_offsets(&da->pb, &offa, &lena)) {\n    ret = parse_mp4_descr(da, offa, lena, Number);\n    if (ret < Number)\n      return ret;\n  }\n  return Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "nining", "repo_name": "tomato", "path": "nining/tomato/6adf8a9ad985414a790a2c3843efb160d3148772a4a393aa85404932672260ea", "path_in_repo": "nining/tomato/release/src/router/ffmpeg/libavcodec/h263dec.o", "objdump": "000000000000014e <get_bits_left>:\n     14e:\t53                   \tpush   %rbx\n     14f:\t48 83 ec 08          \tsub    $0x8,%rsp\n     153:\t48 89 3c 24          \tmov    %rdi,(%rsp)\n     157:\t48 8b 04 24          \tmov    (%rsp),%rax\n     15b:\t8b 58 14             \tmov    0x14(%rax),%ebx\n     15e:\t48 8b 04 24          \tmov    (%rsp),%rax\n     162:\t48 89 c7             \tmov    %rax,%rdi\n     165:\te8 ba fe ff ff       \tcallq  24 <get_bits_count>\n     16a:\t29 c3                \tsub    %eax,%ebx\n     16c:\t89 d8                \tmov    %ebx,%eax\n     16e:\t48 83 c4 08          \tadd    $0x8,%rsp\n     172:\t5b                   \tpop    %rbx\n     173:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_bits_left(__int64 a1) {\n  int v1;\n  v1 = *(_DWORD *)(a1 + Number);\n  return v1 - (unsigned int)get_bits_count(a1);\n}", "code_t": "int __cdecl get_bits_left(GetBitContext_0 *gb) {\n  int v1;\n  v1 = gb->size_in_bits;\n  return v1 - get_bits_count(gb);\n}", "var": [], "body_in_train": true}, {"repo_owner": "slapin", "repo_name": "q2-dev", "path": "slapin/q2-dev/e1b91f1ae6f6bf16d95fca94468a1efb869b9f59680796b18b71f5c99abc0058", "path_in_repo": "slapin/q2-dev/quake2/releasex86_64/ref_glx.so", "objdump": "000000000002f8ce <logRasterPos4fv>:\n   2f8ce:\t48 83 ec 18          \tsub    $0x18,%rsp\n   2f8d2:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n   2f8d7:\t48 8b 05 d2 de 01 00 \tmov    0x1ded2(%rip),%rax        # 4d7b0 <glw_state@@Base-0xfe800>\n   2f8de:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   2f8e2:\t48 89 c1             \tmov    %rax,%rcx\n   2f8e5:\tba 0f 00 00 00       \tmov    $0xf,%edx\n   2f8ea:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   2f8ef:\t48 8d 3d 4c 4c 01 00 \tlea    0x14c4c(%rip),%rdi        # 44542 <_fini+0x2db2>\n   2f8f6:\te8 75 26 fe ff       \tcallq  11f70 <fwrite@plt>\n   2f8fb:\t48 8b 15 de 34 04 00 \tmov    0x434de(%rip),%rdx        # 72de0 <dllRasterPos4fv>\n   2f902:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   2f907:\t48 89 c7             \tmov    %rax,%rdi\n   2f90a:\tff d2                \tcallq  *%rdx\n   2f90c:\t90                   \tnop\n   2f90d:\t48 83 c4 18          \tadd    $0x18,%rsp\n   2f911:\tc3                   \tretq   ", "code_s": "__int64 __fastcall logRasterPos4fv(__int64 a1) {\n  fwrite(String, Number, Number, *((FILE **)&glw_state + Number));\n  return dllRasterPos4fv(a1);\n}", "code_t": "void __cdecl logRasterPos4fv(const GLfloat *v) {\n  fwrite(String, Number, Number, glw_state.log_fp);\n  dllRasterPos4fv(v);\n}", "var": [], "body_in_train": true}, {"repo_owner": "euiko", "repo_name": "platchamer", "path": "euiko/platchamer/367ec57e0b105587d6f339daffeeca40572f30e9b2c0afc01de628a12c6230e5", "path_in_repo": "euiko/platchamer/3rdparty/bgfx/3rdparty/spirv-cross/spirv_cpp.o", "objdump": "", "code_s": "void __fastcall std _Hashtable<\n    unsigned int, std pair<unsigned int const, spirv_cross SPIREntryPoint>,\n    std allocator<std pair<unsigned int const, spirv_cross SPIREntryPoint>>,\n    std __detail _Select1st, std equal_to<unsigned int>, std hash<unsigned int>,\n    std __detail _Mod_range_hashing, std __detail _Default_ranged_hash,\n    std __detail _Prime_rehash_policy,\n    std __detail _Hashtable_traits<false, false, true>> ~_Hashtable(__int64\n                                                                        a1) {\n  void **v1;\n  void **v3;\n  void **v4;\n  void **v5;\n  void **v6;\n  __int64 v7;\n  void *v8;\n  _QWORD *v9;\n  _QWORD *v10;\n  v1 = *(void ***)(a1 + Number);\n  while (v1) {\n    v3 = v1;\n    v1 = (void **)*v1;\n    std _Hashtable<\n        unsigned int, unsigned int, std allocator<unsigned int>,\n        std __detail _Identity, std equal_to<unsigned int>,\n        std hash<unsigned int>, std __detail _Mod_range_hashing,\n        std __detail _Default_ranged_hash, std __detail _Prime_rehash_policy,\n        std __detail _Hashtable_traits<false, true, true>> ~_Hashtable(v3 +\n                                                                       Number);\n    v4 = (void **)v3[Number];\n    if (v4 != v3 + Number)\n      free(v4);\n    v5 = (void **)v3[Number];\n    if (v5 != v3 + Number)\n      operator delete(v5);\n    v6 = (void **)v3[Number];\n    if (v6 != v3 + Number)\n      operator delete(v6);\n    operator delete(v3);\n  }\n  v7 = *(_QWORD *)(a1 + Number);\n  v8 = *(void **)a1;\n  v9 = (_QWORD *)(a1 + Number);\n  memset(v8, Number, Number * v7);\n  v10 = (_QWORD *)*(v9 - Number);\n  *(v9 - Number) = Number L;\n  *(v9 - Number) = Number L;\n  if (v10 != v9)\n    operator delete(v10);\n}", "code_t": "void __fastcall std _Hashtable<\n    unsigned int, std pair<unsigned int const, spirv_cross SPIREntryPoint>,\n    std allocator<std pair<unsigned int const, spirv_cross SPIREntryPoint>>,\n    std __detail _Select1st, std equal_to<unsigned int>, std hash<unsigned int>,\n    std __detail _Mod_range_hashing, std __detail _Default_ranged_hash,\n    std __detail _Prime_rehash_policy,\n    std __detail _Hashtable_traits<false, false, true>> ~_Hashtable(__int64\n                                                                        a1) {\n  void **v1;\n  void **v3;\n  void **v4;\n  void **v5;\n  void **v6;\n  __int64 v7;\n  void *v8;\n  _QWORD *v9;\n  _QWORD *v10;\n  v1 = *(void ***)(a1 + Number);\n  while (v1) {\n    v3 = v1;\n    v1 = (void **)*v1;\n    std _Hashtable<\n        unsigned int, unsigned int, std allocator<unsigned int>,\n        std __detail _Identity, std equal_to<unsigned int>,\n        std hash<unsigned int>, std __detail _Mod_range_hashing,\n        std __detail _Default_ranged_hash, std __detail _Prime_rehash_policy,\n        std __detail _Hashtable_traits<false, true, true>> ~_Hashtable(v3 +\n                                                                       Number);\n    v4 = (void **)v3[Number];\n    if (v4 != v3 + Number)\n      free(v4);\n    v5 = (void **)v3[Number];\n    if (v5 != v3 + Number)\n      operator delete(v5);\n    v6 = (void **)v3[Number];\n    if (v6 != v3 + Number)\n      operator delete(v6);\n    operator delete(v3);\n  }\n  v7 = *(_QWORD *)(a1 + Number);\n  v8 = *(void **)a1;\n  v9 = (_QWORD *)(a1 + Number);\n  memset(v8, Number, Number * v7);\n  v10 = (_QWORD *)*(v9 - Number);\n  *(v9 - Number) = Number L;\n  *(v9 - Number) = Number L;\n  if (v10 != v9)\n    operator delete(v10);\n}", "var": [], "body_in_train": false}, {"repo_owner": "volkswagen", "repo_name": "mycustomkernel", "path": "volkswagen/mycustomkernel/172f9bf27f0ba85c41ec4176b49b4c08de3b3c75d7b69dc6e84e4bb792e1661b", "path_in_repo": "volkswagen/mycustomkernel/linux-4.0.9/tools/power/cpupower/bench/cpufreq-bench", "objdump": "", "code_s": "int sched_get_priority_min(int algorithm) {\n  return sched_get_priority_min(algorithm);\n}", "code_t": "int sched_get_priority_min(int algorithm) {\n  return sched_get_priority_min(algorithm);\n}", "var": [], "body_in_train": true}, {"repo_owner": "jameswg2012", "repo_name": "libamplayer-m3", "path": "jameswg2012/libamplayer-m3/7afcb6772f4205b172d5f98de8f727aa4035d9e9399729ba285767d5e3198699", "path_in_repo": "jameswg2012/libamplayer-m3/amffmpeg/libavcodec/h264_parser.o", "objdump": "0000000000000362 <renorm_cabac_decoder_once>:\n     362:\t48 83 ec 18          \tsub    $0x18,%rsp\n     366:\t48 89 3c 24          \tmov    %rdi,(%rsp)\n     36a:\t48 8b 04 24          \tmov    (%rsp),%rax\n     36e:\t8b 40 04             \tmov    0x4(%rax),%eax\n     371:\t2d 00 01 00 00       \tsub    $0x100,%eax\n     376:\tc1 e8 1f             \tshr    $0x1f,%eax\n     379:\t89 44 24 14          \tmov    %eax,0x14(%rsp)\n     37d:\t48 8b 04 24          \tmov    (%rsp),%rax\n     381:\t8b 50 04             \tmov    0x4(%rax),%edx\n     384:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n     388:\t89 c1                \tmov    %eax,%ecx\n     38a:\td3 e2                \tshl    %cl,%edx\n     38c:\t48 8b 04 24          \tmov    (%rsp),%rax\n     390:\t89 50 04             \tmov    %edx,0x4(%rax)\n     393:\t48 8b 04 24          \tmov    (%rsp),%rax\n     397:\t8b 10                \tmov    (%rax),%edx\n     399:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n     39d:\t89 c1                \tmov    %eax,%ecx\n     39f:\td3 e2                \tshl    %cl,%edx\n     3a1:\t48 8b 04 24          \tmov    (%rsp),%rax\n     3a5:\t89 10                \tmov    %edx,(%rax)\n     3a7:\t48 8b 04 24          \tmov    (%rsp),%rax\n     3ab:\t8b 00                \tmov    (%rax),%eax\n     3ad:\t0f b7 c0             \tmovzwl %ax,%eax\n     3b0:\t85 c0                \ttest   %eax,%eax\n     3b2:\t75 0c                \tjne    3c0 <renorm_cabac_decoder_once+0x5e>\n     3b4:\t48 8b 04 24          \tmov    (%rsp),%rax\n     3b8:\t48 89 c7             \tmov    %rax,%rdi\n     3bb:\te8 36 ff ff ff       \tcallq  2f6 <refill>\n     3c0:\t90                   \tnop\n     3c1:\t48 83 c4 18          \tadd    $0x18,%rsp\n     3c5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall renorm_cabac_decoder_once(_DWORD *a1) {\n  __int64 result;\n  unsigned int v2;\n  v2 = (unsigned int)(a1[Number] - Number) >> Number;\n  a1[Number] <<= a1[Number] - Number < Number;\n  *a1 <<= v2;\n  result = (unsigned __int16)*a1;\n  if (!(unsigned __int16)*a1)\n    result = refill((__int64)a1);\n  return result;\n}", "code_t": "void __cdecl renorm_cabac_decoder_once(CABACContext_0 *c) {\n  int shift;\n  shift = (unsigned int)(c->range - Number) >> Number;\n  c->range <<= c->range - Number < Number;\n  c->low <<= shift;\n  if (!(unsigned __int16)c->low)\n    refill(c);\n}", "var": [], "body_in_train": true}, {"repo_owner": "hustustor", "repo_name": "simplecfs", "path": "hustustor/simplecfs/6c5ab0dd6945359d509bb39dd892f6e9585bd63c429d2d0586134a818ccbbd9f", "path_in_repo": "hustustor/simplecfs/ext/redis/deps/lua/src/luac", "objdump": "0000000000410082 <luaS_resize>:\n  410082:\t55                   \tpush   %rbp\n  410083:\t48 89 e5             \tmov    %rsp,%rbp\n  410086:\t48 83 ec 40          \tsub    $0x40,%rsp\n  41008a:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  41008e:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n  410091:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  410095:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  410099:\t0f b6 40 21          \tmovzbl 0x21(%rax),%eax\n  41009d:\t3c 02                \tcmp    $0x2,%al\n  41009f:\t0f 84 60 01 00 00    \tje     410205 <luaS_resize+0x183>\n  4100a5:\t83 7d c4 ff          \tcmpl   $0xffffffff,-0x3c(%rbp)\n  4100a9:\t7c 28                \tjl     4100d3 <luaS_resize+0x51>\n  4100ab:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  4100ae:\t48 98                \tcltq   \n  4100b0:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4100b7:\t00 \n  4100b8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4100bc:\t48 89 d1             \tmov    %rdx,%rcx\n  4100bf:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4100c4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4100c9:\t48 89 c7             \tmov    %rax,%rdi\n  4100cc:\te8 81 b3 ff ff       \tcallq  40b452 <luaM_realloc_>\n  4100d1:\teb 0c                \tjmp    4100df <luaS_resize+0x5d>\n  4100d3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4100d7:\t48 89 c7             \tmov    %rax,%rdi\n  4100da:\te8 4a b3 ff ff       \tcallq  40b429 <luaM_toobig>\n  4100df:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4100e3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4100e7:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4100eb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4100ef:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4100f6:\teb 1f                \tjmp    410117 <luaS_resize+0x95>\n  4100f8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4100fb:\t48 98                \tcltq   \n  4100fd:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  410104:\t00 \n  410105:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  410109:\t48 01 d0             \tadd    %rdx,%rax\n  41010c:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  410113:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  410117:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41011a:\t3b 45 c4             \tcmp    -0x3c(%rbp),%eax\n  41011d:\t7c d9                \tjl     4100f8 <luaS_resize+0x76>\n  41011f:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  410126:\te9 8a 00 00 00       \tjmpq   4101b5 <luaS_resize+0x133>\n  41012b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41012f:\t48 8b 00             \tmov    (%rax),%rax\n  410132:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  410135:\t48 63 d2             \tmovslq %edx,%rdx\n  410138:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  41013c:\t48 01 d0             \tadd    %rdx,%rax\n  41013f:\t48 8b 00             \tmov    (%rax),%rax\n  410142:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  410146:\teb 62                \tjmp    4101aa <luaS_resize+0x128>\n  410148:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41014c:\t48 8b 00             \tmov    (%rax),%rax\n  41014f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  410153:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  410157:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  41015a:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  41015d:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  410160:\t83 e8 01             \tsub    $0x1,%eax\n  410163:\t23 45 d4             \tand    -0x2c(%rbp),%eax\n  410166:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  410169:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  41016c:\t48 98                \tcltq   \n  41016e:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  410175:\t00 \n  410176:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41017a:\t48 01 d0             \tadd    %rdx,%rax\n  41017d:\t48 8b 10             \tmov    (%rax),%rdx\n  410180:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  410184:\t48 89 10             \tmov    %rdx,(%rax)\n  410187:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  41018a:\t48 98                \tcltq   \n  41018c:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  410193:\t00 \n  410194:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  410198:\t48 01 c2             \tadd    %rax,%rdx\n  41019b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41019f:\t48 89 02             \tmov    %rax,(%rdx)\n  4101a2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4101a6:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4101aa:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  4101af:\t75 97                \tjne    410148 <luaS_resize+0xc6>\n  4101b1:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4101b5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4101b9:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  4101bc:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  4101bf:\t0f 8c 66 ff ff ff    \tjl     41012b <luaS_resize+0xa9>\n  4101c5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4101c9:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  4101cc:\t48 98                \tcltq   \n  4101ce:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4101d5:\t00 \n  4101d6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4101da:\t48 8b 30             \tmov    (%rax),%rsi\n  4101dd:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4101e1:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  4101e6:\t48 89 c7             \tmov    %rax,%rdi\n  4101e9:\te8 64 b2 ff ff       \tcallq  40b452 <luaM_realloc_>\n  4101ee:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4101f2:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  4101f5:\t89 50 0c             \tmov    %edx,0xc(%rax)\n  4101f8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4101fc:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  410200:\t48 89 10             \tmov    %rdx,(%rax)\n  410203:\teb 01                \tjmp    410206 <luaS_resize+0x184>\n  410205:\t90                   \tnop\n  410206:\tc9                   \tleaveq \n  410207:\tc3                   \tretq   ", "code_s": "__int64 __fastcall luaS_resize(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4,\n                               __int64 a5, __int64 a6) {\n  __int64 result;\n  int v7;\n  __int64 *v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 *k;\n  int i;\n  int j;\n  result = *(unsigned __int8 *)(a1[Number] + Number L);\n  if ((_BYTE)result != Number) {\n    if ((int)a2 < Number)\n      luaM_toobig(a1, a2, a3, a4, a5, a6);\n    v10 = luaM_realloc_((__int64)a1, Number L, Number L, Number L * (int)a2);\n    v9 = a1[Number];\n    for (i = Number; i < (int)a2; ++i)\n      *(_QWORD *)(Number L * i + v10) = Number L;\n    for (j = Number; j < *(_DWORD *)(v9 + Number); ++j) {\n      for (k = *(__int64 **)(Number L * j + *(_QWORD *)v9); k; k = v8) {\n        v8 = (__int64 *)*k;\n        v7 = *((_DWORD *)k + Number) & (a2 - Number);\n        *k = *(_QWORD *)(Number L * v7 + v10);\n        *(_QWORD *)(v10 + Number L * v7) = k;\n      }\n    }\n    luaM_realloc_((__int64)a1, *(_QWORD *)v9, Number L * *(int *)(v9 + Number),\n                  Number L);\n    *(_DWORD *)(v9 + Number) = a2;\n    result = v9;\n    *(_QWORD *)v9 = v10;\n  }\n  return result;\n}", "code_t": "void __cdecl luaS_resize(lua_State_0 *L, int newsize) {\n  int h1;\n  GCObject_0 *next;\n  global_State_0 *tb;\n  GCObject_0 **newhash;\n  GCObject_0 *p;\n  int i;\n  int ia;\n  if (L->l_G->gcstate != Number) {\n    if (newsize < Number)\n      luaM_toobig(L);\n    newhash =\n        (GCObject_0 **)luaM_realloc_(L, Number L, Number L, Number L * newsize);\n    tb = L->l_G;\n    for (i = Number; i < newsize; ++i)\n      newhash[i] = Number L;\n    for (ia = Number; ia < tb->strt.size; ++ia) {\n      for (p = tb->strt.hash[ia]; p; p = next) {\n        next = (GCObject_0 *)p->ts.dummy.l;\n        h1 = p->ts.tsv.hash & (newsize - Number);\n        p->ts.dummy.l = (__int64)newhash[h1];\n        newhash[h1] = p;\n      }\n    }\n    luaM_realloc_(L, tb->strt.hash, Number L * tb->strt.size, Number L);\n    tb->strt.size = newsize;\n    tb->strt.hash = newhash;\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "Shoko84", "repo_name": "arcadeplusplus", "path": "Shoko84/arcadeplusplus/69261b135f6769d0bc919ca4cf1aa572440591107d5adc15a63a32d0245a60d5", "path_in_repo": "Shoko84/arcadeplusplus/lib/Libcaca/lib_arcade_libcaca.so", "objdump": "000000000000e374 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN6arcade6SpriteEELb1EEEEE19_M_deallocate_nodesEPSD_>:\n    e374:\t55                   \tpush   %rbp\n    e375:\t48 89 e5             \tmov    %rsp,%rbp\n    e378:\t48 83 ec 20          \tsub    $0x20,%rsp\n    e37c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    e380:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    e384:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    e389:\t74 2d                \tje     e3b8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN6arcade6SpriteEELb1EEEEE19_M_deallocate_nodesEPSD_+0x44>\n    e38b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    e38f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    e393:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    e397:\t48 89 c7             \tmov    %rax,%rdi\n    e39a:\te8 81 e4 ff ff       \tcallq  c820 <_ZNKSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN6arcade6SpriteEELb1EE7_M_nextEv@plt>\n    e39f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    e3a3:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    e3a7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    e3ab:\t48 89 d6             \tmov    %rdx,%rsi\n    e3ae:\t48 89 c7             \tmov    %rax,%rdi\n    e3b1:\te8 3a e8 ff ff       \tcallq  cbf0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN6arcade6SpriteEELb1EEEEE18_M_deallocate_nodeEPSD_@plt>\n    e3b6:\teb cc                \tjmp    e384 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN6arcade6SpriteEELb1EEEEE19_M_deallocate_nodesEPSD_+0x10>\n    e3b8:\t90                   \tnop\n    e3b9:\tc9                   \tleaveq \n    e3ba:\tc3                   \tretq   \n    e3bb:\t90                   \tnop", "code_s": "void __fastcall std\n    __detail _Hashtable_alloc<std allocator<std __detail _Hash_node<\n        std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> const,\n                 arcade Sprite>,\n        true>>>\n    _M_deallocate_nodes(__int64 a1, __int64 a2) {\n  __int64 v3;\n  while (a2) {\n    v3 = a2;\n    a2 = std __detail _Hash_node<\n        std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> const,\n                 arcade Sprite>,\n        true>\n        _M_next(a2);\n    std __detail _Hashtable_alloc<std allocator<std __detail _Hash_node<\n        std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> const,\n                 arcade Sprite>,\n        true>>>\n        _M_deallocate_node(a1, v3);\n  }\n}", "code_t": "void __fastcall std\n    __detail _Hashtable_alloc<std allocator<std __detail _Hash_node<\n        std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> const,\n                 arcade Sprite>,\n        true>>>\n    _M_deallocate_nodes(__int64 a1, __int64 a2) {\n  __int64 v3;\n  while (a2) {\n    v3 = a2;\n    a2 = std __detail _Hash_node<\n        std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> const,\n                 arcade Sprite>,\n        true>\n        _M_next(a2);\n    std __detail _Hashtable_alloc<std allocator<std __detail _Hash_node<\n        std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> const,\n                 arcade Sprite>,\n        true>>>\n        _M_deallocate_node(a1, v3);\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "creeper168", "repo_name": "sim", "path": "creeper168/sim/9842d8875046ff500d93f9ff7e8f25fb99c584ff1c6147a24b9748ffbcff8c98", "path_in_repo": "creeper168/sim/os/kernel/tools/lib/lockdep/liblockdep.so.3.18.16", "objdump": "0000000000006152 <print_lock_nested_lock_not_held>:\n    6152:\t55                   \tpush   %rbp\n    6153:\t48 89 e5             \tmov    %rsp,%rbp\n    6156:\t48 83 ec 20          \tsub    $0x20,%rsp\n    615a:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    615e:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    6162:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n    6166:\t48 8b 05 db 7d 00 00 \tmov    0x7ddb(%rip),%rax        # df48 <debug_locks_silent@@Base-0xab05bc>\n    616d:\t0f b6 00             \tmovzbl (%rax),%eax\n    6170:\t84 c0                \ttest   %al,%al\n    6172:\t74 0a                \tje     617e <print_lock_nested_lock_not_held+0x2c>\n    6174:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6179:\te9 c9 00 00 00       \tjmpq   6247 <print_lock_nested_lock_not_held+0xf5>\n    617e:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n    6183:\te8 b8 ce ff ff       \tcallq  3040 <putchar@plt>\n    6188:\t48 8d 3d d1 45 00 00 \tlea    0x45d1(%rip),%rdi        # a760 <_fini+0x854>\n    618f:\te8 ec ce ff ff       \tcallq  3080 <puts@plt>\n    6194:\t48 8d 3d ed 45 00 00 \tlea    0x45ed(%rip),%rdi        # a788 <_fini+0x87c>\n    619b:\te8 e0 ce ff ff       \tcallq  3080 <puts@plt>\n    61a0:\te8 bf db ff ff       \tcallq  3d64 <print_kernel_ident>\n    61a5:\t48 8d 3d 04 46 00 00 \tlea    0x4604(%rip),%rdi        # a7b0 <_fini+0x8a4>\n    61ac:\te8 cf ce ff ff       \tcallq  3080 <puts@plt>\n    61b1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    61b5:\t8b 80 94 38 01 00    \tmov    0x13894(%rax),%eax\n    61bb:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    61bf:\t48 8d 8a 98 38 01 00 \tlea    0x13898(%rdx),%rcx\n    61c6:\t89 c2                \tmov    %eax,%edx\n    61c8:\t48 89 ce             \tmov    %rcx,%rsi\n    61cb:\t48 8d 3d 01 46 00 00 \tlea    0x4601(%rip),%rdi        # a7d3 <_fini+0x8c7>\n    61d2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    61d7:\te8 f4 ce ff ff       \tcallq  30d0 <printf@plt>\n    61dc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    61e0:\t48 89 c7             \tmov    %rax,%rdi\n    61e3:\te8 50 da ff ff       \tcallq  3c38 <print_lock>\n    61e8:\t48 8d 3d 01 46 00 00 \tlea    0x4601(%rip),%rdi        # a7f0 <_fini+0x8e4>\n    61ef:\te8 8c ce ff ff       \tcallq  3080 <puts@plt>\n    61f4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    61f8:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    61fc:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    6200:\t48 89 c7             \tmov    %rax,%rdi\n    6203:\te8 78 ce ff ff       \tcallq  3080 <puts@plt>\n    6208:\t48 8d 3d 55 42 00 00 \tlea    0x4255(%rip),%rdi        # a464 <_fini+0x558>\n    620f:\te8 6c ce ff ff       \tcallq  3080 <puts@plt>\n    6214:\te8 e2 d2 ff ff       \tcallq  34fb <dump_stack>\n    6219:\t48 8d 3d 30 43 00 00 \tlea    0x4330(%rip),%rdi        # a550 <_fini+0x644>\n    6220:\te8 5b ce ff ff       \tcallq  3080 <puts@plt>\n    6225:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6229:\t48 89 c7             \tmov    %rax,%rdi\n    622c:\te8 4b da ff ff       \tcallq  3c7c <lockdep_print_held_locks>\n    6231:\t48 8d 3d 2c 42 00 00 \tlea    0x422c(%rip),%rdi        # a464 <_fini+0x558>\n    6238:\te8 43 ce ff ff       \tcallq  3080 <puts@plt>\n    623d:\te8 b9 d2 ff ff       \tcallq  34fb <dump_stack>\n    6242:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6247:\tc9                   \tleaveq \n    6248:\tc3                   \tretq   ", "code_s": "__int64 __fastcall print_lock_nested_lock_not_held(__int64 a1, __int64 a2) {\n  if (!debug_locks_silent) {\n    putchar(Number);\n    puts(String);\n    puts(String);\n    print_kernel_ident();\n    puts(String);\n    printf(String, &byte_13898[a1],\n           *(unsigned int *)((char *)&dword_13894 + a1));\n    print_lock(a2);\n    puts(String);\n    puts(*(const char **)(*(_QWORD *)(a2 + Number) + Number L));\n    puts(String);\n    dump_stack(String, &byte_13898[a1]);\n    puts(String);\n    lockdep_print_held_locks(a1);\n    puts(String);\n    dump_stack(String, &byte_13898[a1]);\n  }\n  return Number L;\n}", "code_t": "int __cdecl print_lock_nested_lock_not_held(task_struct *curr, held_lock *hlock,\n                                            unsigned __int64 ip_0) {\n  if (!debug_locks_silent) {\n    putchar(Number);\n    puts(String);\n    puts(String);\n    print_kernel_ident();\n    puts(String);\n    printf(String, curr->comm, (unsigned int)curr->pid);\n    print_lock(hlock);\n    puts(String);\n    puts(hlock->nest_lock->name);\n    puts(String);\n    dump_stack();\n    puts(String);\n    lockdep_print_held_locks(curr);\n    puts(String);\n    dump_stack();\n  }\n  return Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "yosh1k104", "repo_name": "D-Switch", "path": "yosh1k104/D-Switch/56e25a0115b0fb84c501c23a81df5e9f9165c053552aa5da36192526ec931e40", "path_in_repo": "yosh1k104/D-Switch/contiki-2.6/examples/rtimer-processing-sample/obj_native/compower.o", "objdump": "00000000000000fe <compower_accumulate_attrs>:\n  fe:\t55                   \tpush   %rbp\n  ff:\t48 89 e5             \tmov    %rsp,%rbp\n 102:\t48 83 ec 10          \tsub    $0x10,%rsp\n 106:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n 10a:\tbf 07 00 00 00       \tmov    $0x7,%edi\n 10f:\te8 00 00 00 00       \tcallq  114 <compower_accumulate_attrs+0x16>\n 114:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 118:\t8b 12                \tmov    (%rdx),%edx\n 11a:\t0f b7 c0             \tmovzwl %ax,%eax\n 11d:\t01 c2                \tadd    %eax,%edx\n 11f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 123:\t89 10                \tmov    %edx,(%rax)\n 125:\tbf 08 00 00 00       \tmov    $0x8,%edi\n 12a:\te8 00 00 00 00       \tcallq  12f <compower_accumulate_attrs+0x31>\n 12f:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 133:\t8b 52 04             \tmov    0x4(%rdx),%edx\n 136:\t0f b7 c0             \tmovzwl %ax,%eax\n 139:\t01 c2                \tadd    %eax,%edx\n 13b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 13f:\t89 50 04             \tmov    %edx,0x4(%rax)\n 142:\t90                   \tnop\n 143:\tc9                   \tleaveq \n 144:\tc3                   \tretq   \n", "code_s": "_DWORD *__fastcall compower_accumulate_attrs(_DWORD *a1) {\n  int v1;\n  _DWORD *result;\n  *a1 += (unsigned __int16)packetbuf_attr(Number L);\n  v1 = (unsigned __int16)packetbuf_attr(Number L) + a1[Number];\n  result = a1;\n  a1[Number] = v1;\n  return result;\n}", "code_t": "void __cdecl compower_accumulate_attrs(compower_activity *e) {\n  e->listen += (unsigned __int16)packetbuf_attr(Number L);\n  e->transmit += (unsigned __int16)packetbuf_attr(Number L);\n}", "var": [], "body_in_train": true}, {"repo_owner": "victorbreder", "repo_name": "parallel-computing-ce265", "path": "victorbreder/parallel-computing-ce265/46bfda731b4095424392e2724302aead0f24b5c5971805b1ba2b0e70b6caabbf", "path_in_repo": "victorbreder/parallel-computing-ce265/Exercicio06/MM/wall_time.o", "objdump": "0000000000000000 <wall_time>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n   c:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  10:\t48 89 d6             \tmov    %rdx,%rsi\n  13:\t48 89 c7             \tmov    %rax,%rdi\n  16:\te8 00 00 00 00       \tcallq  1b <wall_time+0x1b>\n  1b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  1f:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n  24:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  28:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  2d:\tf2 0f 10 15 00 00 00 \tmovsd  0x0(%rip),%xmm2        # 35 <wall_time+0x35>\n  34:\t00 \n  35:\tf2 0f 5e c2          \tdivsd  %xmm2,%xmm0\n  39:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n  3d:\tc9                   \tleaveq \n  3e:\tc3                   \tretq   \n", "code_s": "double wall_time() {\n  struct timezone <span class=\"supfact\">tz</span>;\n  struct timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, &<span class=\"supfact\">tz</span>);\n  return (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_usec) / Number +\n         (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_sec);\n}", "code_t": "double __cdecl wall_time() {\n  timezone <span class=\"supfact\">tz</span>;\n  timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, &<span class=\"supfact\">tz</span>);\n  return (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_usec) / Number +\n         (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_sec);\n}", "var": [{"name": "tz", "type": "struct timezone { int tz_minuteswest; int tz_dsttime; }", "pred_name": "tzp", "ref_name": "tz", "ref_type": "struct timezone { int tz_minuteswest; int tz_dsttime; }"}, {"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "tm", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "BlastarIndia", "repo_name": "Blastarix", "path": "BlastarIndia/Blastarix/444faa29e40e289da710db79eb869d1ae670101c97c2e83c1bc359975eb85465", "path_in_repo": "BlastarIndia/Blastarix/qemu-1.7.0/util/qemu-config.o", "objdump": "0000000000000749 <qemu_add_drive_opts>:\n     749:\t55                   \tpush   %rbp\n     74a:\t48 89 e5             \tmov    %rsp,%rbp\n     74d:\t48 83 ec 20          \tsub    $0x20,%rsp\n     751:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     755:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     75c:\t00 00 \n     75e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     762:\t31 c0                \txor    %eax,%eax\n     764:\tc7 45 f4 04 00 00 00 \tmovl   $0x4,-0xc(%rbp)\n     76b:\t83 6d f4 01          \tsubl   $0x1,-0xc(%rbp)\n     76f:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n     776:\teb 4f                \tjmp    7c7 <qemu_add_drive_opts+0x7e>\n     778:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n     77b:\t48 98                \tcltq   \n     77d:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     784:\t00 \n     785:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 78c <qemu_add_drive_opts+0x43>\n     78c:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n     790:\t48 85 c0             \ttest   %rax,%rax\n     793:\t75 2e                \tjne    7c3 <qemu_add_drive_opts+0x7a>\n     795:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n     798:\t48 98                \tcltq   \n     79a:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n     7a1:\t00 \n     7a2:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 7a9 <qemu_add_drive_opts+0x60>\n     7a9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7ad:\t48 89 04 11          \tmov    %rax,(%rcx,%rdx,1)\n     7b1:\t90                   \tnop\n     7b2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7b6:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     7bd:\t00 00 \n     7bf:\t74 38                \tje     7f9 <qemu_add_drive_opts+0xb0>\n     7c1:\teb 31                \tjmp    7f4 <qemu_add_drive_opts+0xab>\n     7c3:\t83 45 f0 01          \taddl   $0x1,-0x10(%rbp)\n     7c7:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n     7ca:\t3b 45 f4             \tcmp    -0xc(%rbp),%eax\n     7cd:\t7c a9                \tjl     778 <qemu_add_drive_opts+0x2f>\n     7cf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7d6 <qemu_add_drive_opts+0x8d>\n     7d6:\t48 89 c1             \tmov    %rax,%rcx\n     7d9:\tba 27 00 00 00       \tmov    $0x27,%edx\n     7de:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     7e3:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 7ea <qemu_add_drive_opts+0xa1>\n     7ea:\te8 00 00 00 00       \tcallq  7ef <qemu_add_drive_opts+0xa6>\n     7ef:\te8 00 00 00 00       \tcallq  7f4 <qemu_add_drive_opts+0xab>\n     7f4:\te8 00 00 00 00       \tcallq  7f9 <qemu_add_drive_opts+0xb0>\n     7f9:\tc9                   \tleaveq \n     7fa:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall qemu_add_drive_opts(__int64 a1) {\n  int i;\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  for (i = Number;; ++i) {\n    if (i >= Number) {\n      fwrite(String, Number, Number, stderr);\n      abort();\n    }\n    if (!drive_config_groups[i])\n      break;\n  }\n  drive_config_groups[i] = a1;\n  return __readfsqword(Number) ^ v3;\n}", "code_t": "void __cdecl qemu_add_drive_opts(QemuOptsList_0 *list) {\n  int i;\n  for (i = Number;; ++i) {\n    if (i >= Number) {\n      fwrite(String, Number, Number, stderr);\n      abort();\n    }\n    if (!drive_config_groups[i])\n      break;\n  }\n  drive_config_groups[i] = list;\n}", "var": [], "body_in_train": false}, {"repo_owner": "codablock", "repo_name": "btrfs-progs", "path": "codablock/btrfs-progs/64eabf51ba5af0bebd072d32dcd50dde46f36ab15d2e74978ef751f488013061", "path_in_repo": "codablock/btrfs-progs//extent_io.o", "objdump": "00000000000001aa <alloc_extent_state>:\n     1aa:\t55                   \tpush   %rbp\n     1ab:\t48 89 e5             \tmov    %rsp,%rbp\n     1ae:\t48 83 ec 10          \tsub    $0x10,%rsp\n     1b2:\tbf 50 00 00 00       \tmov    $0x50,%edi\n     1b7:\te8 00 00 00 00       \tcallq  1bc <alloc_extent_state+0x12>\n     1bc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     1c0:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     1c5:\t75 07                \tjne    1ce <alloc_extent_state+0x24>\n     1c7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     1cc:\teb 27                \tjmp    1f5 <alloc_extent_state+0x4b>\n     1ce:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1d2:\tc7 40 38 01 00 00 00 \tmovl   $0x1,0x38(%rax)\n     1d9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1dd:\t48 c7 40 40 00 00 00 \tmovq   $0x0,0x40(%rax)\n     1e4:\t00 \n     1e5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1e9:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n     1f0:\t00 \n     1f1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1f5:\tc9                   \tleaveq \n     1f6:\tc3                   \tretq   ", "code_s": "_DWORD *alloc_extent_state() {\n  _DWORD *v1;\n  v1 = malloc(Number);\n  if (!v1)\n    return Number L;\n  v1[Number] = Number;\n  *((_QWORD *)v1 + Number) = Number L;\n  *((_QWORD *)v1 + Number) = Number L;\n  return v1;\n}", "code_t": "extent_state *__cdecl alloc_extent_state() {\n  extent_state *state;\n  state = (extent_state *)malloc(Number);\n  if (!state)\n    return Number L;\n  state->refs = Number;\n  state->state = Number L;\n  state->private = Number L;\n  return state;\n}", "var": [], "body_in_train": true}, {"repo_owner": "pgrudzinski", "repo_name": "usbtmc-gadget", "path": "pgrudzinski/usbtmc-gadget/51f4bc1da9b46e4455d43ebf99b22ace68df2d4d2ffe5a4dfeb587fa8e004d16", "path_in_repo": "pgrudzinski/usbtmc-gadget/tools/perf/util/svghelper.o", "objdump": "0000000000002b0e <svg_time_grid>:\n    2b0e:\t55                   \tpush   %rbp\n    2b0f:\t48 89 e5             \tmov    %rsp,%rbp\n    2b12:\t53                   \tpush   %rbx\n    2b13:\t48 83 ec 38          \tsub    $0x38,%rsp\n    2b17:\tf2 0f 11 45 c8       \tmovsd  %xmm0,-0x38(%rbp)\n    2b1c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2b23:\t00 00 \n    2b25:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2b29:\t31 c0                \txor    %eax,%eax\n    2b2b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b32 <svg_time_grid+0x24>\n    2b32:\t48 85 c0             \ttest   %rax,%rax\n    2b35:\t0f 84 38 01 00 00    \tje     2c73 <svg_time_grid+0x165>\n    2b3b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b42 <svg_time_grid+0x34>\n    2b42:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    2b46:\te9 15 01 00 00       \tjmpq   2c60 <svg_time_grid+0x152>\n    2b4b:\tc7 45 d4 dc 00 00 00 \tmovl   $0xdc,-0x2c(%rbp)\n    2b52:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 2b5a <svg_time_grid+0x4c>\n    2b59:\t00 \n    2b5a:\tf2 0f 11 45 e0       \tmovsd  %xmm0,-0x20(%rbp)\n    2b5f:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n    2b63:\t48 ba fd ce 61 84 11 \tmovabs $0xabcc77118461cefd,%rdx\n    2b6a:\t77 cc ab \n    2b6d:\t48 89 c8             \tmov    %rcx,%rax\n    2b70:\t48 f7 e2             \tmul    %rdx\n    2b73:\t48 89 d0             \tmov    %rdx,%rax\n    2b76:\t48 c1 e8 1a          \tshr    $0x1a,%rax\n    2b7a:\t48 69 c0 00 e1 f5 05 \timul   $0x5f5e100,%rax,%rax\n    2b81:\t48 29 c1             \tsub    %rax,%rcx\n    2b84:\t48 89 c8             \tmov    %rcx,%rax\n    2b87:\t48 85 c0             \ttest   %rax,%rax\n    2b8a:\t75 14                \tjne    2ba0 <svg_time_grid+0x92>\n    2b8c:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 2b94 <svg_time_grid+0x86>\n    2b93:\t00 \n    2b94:\tf2 0f 11 45 e0       \tmovsd  %xmm0,-0x20(%rbp)\n    2b99:\tc7 45 d4 c0 00 00 00 \tmovl   $0xc0,-0x2c(%rbp)\n    2ba0:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n    2ba4:\t48 89 c8             \tmov    %rcx,%rax\n    2ba7:\t48 c1 e8 09          \tshr    $0x9,%rax\n    2bab:\t48 ba 53 5a 9b a0 2f \tmovabs $0x44b82fa09b5a53,%rdx\n    2bb2:\tb8 44 00 \n    2bb5:\t48 f7 e2             \tmul    %rdx\n    2bb8:\t48 89 d0             \tmov    %rdx,%rax\n    2bbb:\t48 c1 e8 0b          \tshr    $0xb,%rax\n    2bbf:\t48 69 c0 00 ca 9a 3b \timul   $0x3b9aca00,%rax,%rax\n    2bc6:\t48 29 c1             \tsub    %rax,%rcx\n    2bc9:\t48 89 c8             \tmov    %rcx,%rax\n    2bcc:\t48 85 c0             \ttest   %rax,%rax\n    2bcf:\t75 14                \tjne    2be5 <svg_time_grid+0xd7>\n    2bd1:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 2bd9 <svg_time_grid+0xcb>\n    2bd8:\t00 \n    2bd9:\tf2 0f 11 45 e0       \tmovsd  %xmm0,-0x20(%rbp)\n    2bde:\tc7 45 d4 80 00 00 00 \tmovl   $0x80,-0x2c(%rbp)\n    2be5:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n    2bea:\t66 0f 2f 45 c8       \tcomisd -0x38(%rbp),%xmm0\n    2bef:\t72 67                \tjb     2c58 <svg_time_grid+0x14a>\n    2bf1:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 2bf8 <svg_time_grid+0xea>\n    2bf8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2bfc:\t48 89 c7             \tmov    %rax,%rdi\n    2bff:\te8 3f d5 ff ff       \tcallq  143 <time2pixels>\n    2c04:\tf2 0f 11 45 c0       \tmovsd  %xmm0,-0x40(%rbp)\n    2c09:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2c0d:\t48 89 c7             \tmov    %rax,%rdi\n    2c10:\te8 2e d5 ff ff       \tcallq  143 <time2pixels>\n    2c15:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2c1c <svg_time_grid+0x10e>\n    2c1c:\tf2 0f 10 55 e0       \tmovsd  -0x20(%rbp),%xmm2\n    2c21:\t8b 75 d4             \tmov    -0x2c(%rbp),%esi\n    2c24:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n    2c27:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n    2c2a:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 2c32 <svg_time_grid+0x124>\n    2c31:\t00 \n    2c32:\t66 0f 28 da          \tmovapd %xmm2,%xmm3\n    2c36:\t41 89 f1             \tmov    %esi,%r9d\n    2c39:\t41 89 c8             \tmov    %ecx,%r8d\n    2c3c:\t89 d1                \tmov    %edx,%ecx\n    2c3e:\t48 89 da             \tmov    %rbx,%rdx\n    2c41:\tf2 0f 10 55 c0       \tmovsd  -0x40(%rbp),%xmm2\n    2c46:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2c4b:\t48 89 c7             \tmov    %rax,%rdi\n    2c4e:\tb8 04 00 00 00       \tmov    $0x4,%eax\n    2c53:\te8 00 00 00 00       \tcallq  2c58 <svg_time_grid+0x14a>\n    2c58:\t48 81 45 d8 80 96 98 \taddq   $0x989680,-0x28(%rbp)\n    2c5f:\t00 \n    2c60:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2c67 <svg_time_grid+0x159>\n    2c67:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n    2c6b:\t0f 82 da fe ff ff    \tjb     2b4b <svg_time_grid+0x3d>\n    2c71:\teb 01                \tjmp    2c74 <svg_time_grid+0x166>\n    2c73:\t90                   \tnop\n    2c74:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c78:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    2c7f:\t00 00 \n    2c81:\t74 05                \tje     2c88 <svg_time_grid+0x17a>\n    2c83:\te8 00 00 00 00       \tcallq  2c88 <svg_time_grid+0x17a>\n    2c88:\t48 83 c4 38          \tadd    $0x38,%rsp\n    2c8c:\t5b                   \tpop    %rbx\n    2c8d:\t5d                   \tpop    %rbp\n    2c8e:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall svg_time_grid(double a1) {\n  __int64 v1;\n  double v2;\n  double v4;\n  unsigned int v6;\n  unsigned __int64 i;\n  double v8;\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  if (svgfile) {\n    for (i = first_time; i < last_time; i += Number L) {\n      v6 = Number;\n      v8 = Number;\n      if (!(i % Number)) {\n        v8 = Number;\n        v6 = Number;\n      }\n      if (!(i % Number)) {\n        v8 = Number;\n        v6 = Number;\n      }\n      if (v8 >= a1) {\n        v1 = total_height;\n        v4 = time2pixels(i);\n        v2 = time2pixels(i);\n        fprintf(svgfile, String, v2, Number, v4, v1, v6, v6, v6, v8);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ v9;\n}", "code_t": "void __cdecl svg_time_grid(double min_thickness) {\n  u64 v1;\n  double v2;\n  double v3;\n  unsigned int color;\n  u64 i;\n  double thickness;\n  if (svgfile) {\n    for (i = first_time; i < last_time; i += Number L) {\n      color = Number;\n      thickness = Number;\n      if (!(i % Number)) {\n        thickness = Number;\n        color = Number;\n      }\n      if (!(i % Number)) {\n        thickness = Number;\n        color = Number;\n      }\n      if (thickness >= min_thickness) {\n        v1 = total_height;\n        v3 = time2pixels(i);\n        v2 = time2pixels(i);\n        fprintf(svgfile, String, v2, Number, v3, v1, color, color, color,\n                thickness);\n      }\n    }\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "lcmarvell", "repo_name": "mcu_utest", "path": "lcmarvell/mcu_utest/dcd3067276456569e7a6b67d164119b0787543e5128aad7463eefa68ba1f8a00", "path_in_repo": "lcmarvell/mcu_utest/sample/exception_test.o", "objdump": "0000000000000000 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 b8 ff ff ff ff ff \tmovabs $0x1fffffffffffffff,%rax\n  13:\tff ff 1f \n  16:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  1a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  1e:\t48 89 c7             \tmov    %rax,%rdi\n  21:\te8 00 00 00 00       \tcallq  26 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_+0x26>\n  26:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  2a:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  2e:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  32:\t48 89 d6             \tmov    %rdx,%rsi\n  35:\t48 89 c7             \tmov    %rax,%rdi\n  38:\te8 00 00 00 00       \tcallq  3d <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_+0x3d>\n  3d:\t48 8b 00             \tmov    (%rax),%rax\n  40:\tc9                   \tleaveq \n  41:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<int> _S_max_size(__int64 a1) {\n  __int64 v2;\n  __int64 v3;\n  v3 = Number;\n  v2 = __gnu_cxx __alloc_traits<std allocator<int>, int> max_size(a1);\n  return *(_QWORD *)std min<unsigned long>(&v3, &v2);\n}", "code_t": "__int64 __fastcall std vector<int> _S_max_size(__int64 a1) {\n  __int64 v2;\n  __int64 v3;\n  v3 = Number;\n  v2 = __gnu_cxx __alloc_traits<std allocator<int>, int> max_size(a1);\n  return *(_QWORD *)std min<unsigned long>(&v3, &v2);\n}", "var": [], "body_in_train": true}, {"repo_owner": "zzilla", "repo_name": "CodeCollection", "path": "zzilla/CodeCollection/1e761f57c008553543c5a1453f465f3ad2573948830079d32719e51cf77e05de", "path_in_repo": "zzilla/CodeCollection/OwnCode/ipCamera/Decode/ffmpeg/libavutil/rc4.o", "objdump": "0000000000000161 <av_rc4_crypt>:\n 161:\t48 89 7c 24 d8       \tmov    %rdi,-0x28(%rsp)\n 166:\t48 89 74 24 d0       \tmov    %rsi,-0x30(%rsp)\n 16b:\t48 89 54 24 c8       \tmov    %rdx,-0x38(%rsp)\n 170:\t89 4c 24 c4          \tmov    %ecx,-0x3c(%rsp)\n 174:\t4c 89 44 24 b8       \tmov    %r8,-0x48(%rsp)\n 179:\t44 89 4c 24 c0       \tmov    %r9d,-0x40(%rsp)\n 17e:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n 183:\t8b 80 00 01 00 00    \tmov    0x100(%rax),%eax\n 189:\t88 44 24 ff          \tmov    %al,-0x1(%rsp)\n 18d:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n 192:\t8b 80 04 01 00 00    \tmov    0x104(%rax),%eax\n 198:\t88 44 24 fe          \tmov    %al,-0x2(%rsp)\n 19c:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n 1a1:\t48 89 44 24 f0       \tmov    %rax,-0x10(%rsp)\n 1a6:\te9 dc 00 00 00       \tjmpq   287 <av_rc4_crypt+0x126>\n 1ab:\t0f b6 54 24 ff       \tmovzbl -0x1(%rsp),%edx\n 1b0:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n 1b5:\t48 01 d0             \tadd    %rdx,%rax\n 1b8:\t0f b6 10             \tmovzbl (%rax),%edx\n 1bb:\t0f b6 4c 24 fe       \tmovzbl -0x2(%rsp),%ecx\n 1c0:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n 1c5:\t48 01 c8             \tadd    %rcx,%rax\n 1c8:\t0f b6 00             \tmovzbl (%rax),%eax\n 1cb:\t01 d0                \tadd    %edx,%eax\n 1cd:\t88 44 24 ef          \tmov    %al,-0x11(%rsp)\n 1d1:\t0f b6 54 24 fe       \tmovzbl -0x2(%rsp),%edx\n 1d6:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n 1db:\t48 01 d0             \tadd    %rdx,%rax\n 1de:\t0f b6 00             \tmovzbl (%rax),%eax\n 1e1:\t88 44 24 ee          \tmov    %al,-0x12(%rsp)\n 1e5:\t0f b6 54 24 ff       \tmovzbl -0x1(%rsp),%edx\n 1ea:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n 1ef:\t48 01 d0             \tadd    %rdx,%rax\n 1f2:\t0f b6 4c 24 fe       \tmovzbl -0x2(%rsp),%ecx\n 1f7:\t48 8b 54 24 f0       \tmov    -0x10(%rsp),%rdx\n 1fc:\t48 01 ca             \tadd    %rcx,%rdx\n 1ff:\t0f b6 00             \tmovzbl (%rax),%eax\n 202:\t88 02                \tmov    %al,(%rdx)\n 204:\t0f b6 54 24 ff       \tmovzbl -0x1(%rsp),%edx\n 209:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n 20e:\t48 01 c2             \tadd    %rax,%rdx\n 211:\t0f b6 44 24 ee       \tmovzbl -0x12(%rsp),%eax\n 216:\t88 02                \tmov    %al,(%rdx)\n 218:\t48 83 7c 24 c8 00    \tcmpq   $0x0,-0x38(%rsp)\n 21e:\t74 27                \tje     247 <av_rc4_crypt+0xe6>\n 220:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n 225:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 229:\t48 89 54 24 c8       \tmov    %rdx,-0x38(%rsp)\n 22e:\t0f b6 08             \tmovzbl (%rax),%ecx\n 231:\t0f b6 54 24 ef       \tmovzbl -0x11(%rsp),%edx\n 236:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n 23b:\t48 01 d0             \tadd    %rdx,%rax\n 23e:\t0f b6 00             \tmovzbl (%rax),%eax\n 241:\t31 c1                \txor    %eax,%ecx\n 243:\t89 ca                \tmov    %ecx,%edx\n 245:\teb 10                \tjmp    257 <av_rc4_crypt+0xf6>\n 247:\t0f b6 54 24 ef       \tmovzbl -0x11(%rsp),%edx\n 24c:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n 251:\t48 01 d0             \tadd    %rdx,%rax\n 254:\t0f b6 10             \tmovzbl (%rax),%edx\n 257:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n 25c:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n 260:\t48 89 4c 24 d0       \tmov    %rcx,-0x30(%rsp)\n 265:\t88 10                \tmov    %dl,(%rax)\n 267:\t0f b6 44 24 ff       \tmovzbl -0x1(%rsp),%eax\n 26c:\t83 c0 01             \tadd    $0x1,%eax\n 26f:\t88 44 24 ff          \tmov    %al,-0x1(%rsp)\n 273:\t0f b6 54 24 ff       \tmovzbl -0x1(%rsp),%edx\n 278:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n 27d:\t48 01 d0             \tadd    %rdx,%rax\n 280:\t0f b6 00             \tmovzbl (%rax),%eax\n 283:\t00 44 24 fe          \tadd    %al,-0x2(%rsp)\n 287:\t8b 44 24 c4          \tmov    -0x3c(%rsp),%eax\n 28b:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n 28e:\t89 54 24 c4          \tmov    %edx,-0x3c(%rsp)\n 292:\t85 c0                \ttest   %eax,%eax\n 294:\t0f 8f 11 ff ff ff    \tjg     1ab <av_rc4_crypt+0x4a>\n 29a:\t0f b6 54 24 ff       \tmovzbl -0x1(%rsp),%edx\n 29f:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n 2a4:\t89 90 00 01 00 00    \tmov    %edx,0x100(%rax)\n 2aa:\t0f b6 54 24 fe       \tmovzbl -0x2(%rsp),%edx\n 2af:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n 2b4:\t89 90 04 01 00 00    \tmov    %edx,0x104(%rax)\n 2ba:\t90                   \tnop\n 2bb:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall av_rc4_crypt(__int64 a1, _BYTE *a2, _BYTE *a3, int a4) {\n  _BYTE *v4;\n  char v5;\n  _BYTE *v6;\n  int v7;\n  __int64 result;\n  char v12;\n  unsigned __int8 v13;\n  unsigned __int8 i;\n  unsigned __int8 v15;\n  v15 = *(_DWORD *)(a1 + Number);\n  for (i = *(_DWORD *)(a1 + Number);; i += *(_BYTE *)(v15 + a1)) {\n    v7 = a4--;\n    if (v7 <= Number)\n      break;\n    v13 = *(_BYTE *)(v15 + a1) + *(_BYTE *)(i + a1);\n    v12 = *(_BYTE *)(i + a1);\n    *(_BYTE *)(i + a1) = *(_BYTE *)(v15 + a1);\n    *(_BYTE *)(a1 + v15) = v12;\n    if (a3) {\n      v4 = a3++;\n      v5 = *(_BYTE *)(v13 + a1) ^ *v4;\n    } else {\n      v5 = *(_BYTE *)(v13 + a1);\n    }\n    v6 = a2++;\n    *v6 = v5;\n    ++v15;\n  }\n  *(_DWORD *)(a1 + Number) = v15;\n  result = a1;\n  *(_DWORD *)(a1 + Number) = i;\n  return result;\n}", "code_t": "void __cdecl av_rc4_crypt(AVRC4_0 *r, uint8_t *dst, const uint8_t *src,\n                          int count, uint8_t *iv, int decrypt) {\n  const uint8_t *v6;\n  uint8_t v7;\n  uint8_t *v8;\n  int v9;\n  uint8_t SWAP_tmp;\n  uint8_t sum;\n  uint8_t y;\n  uint8_t x;\n  x = r->x;\n  for (y = r->y;; y += r->state[x]) {\n    v9 = count--;\n    if (v9 <= Number)\n      break;\n    sum = r->state[x] + r->state[y];\n    SWAP_tmp = r->state[y];\n    r->state[y] = r->state[x];\n    r->state[x] = SWAP_tmp;\n    if (src) {\n      v6 = src++;\n      v7 = r->state[sum] ^ *v6;\n    } else {\n      v7 = r->state[sum];\n    }\n    v8 = dst++;\n    *v8 = v7;\n    ++x;\n  }\n  r->x = x;\n  r->y = y;\n}", "var": [], "body_in_train": true}, {"repo_owner": "CPFL", "repo_name": "gxen", "path": "CPFL/gxen/c35b9846bdf3bbe7eb6ad5adfa09ee3654099b36f1db890750fd388704352071", "path_in_repo": "CPFL/gxen/tools/qemu-xen-traditional/qemu-nbd", "objdump": "000000000041c3b8 <nbd_trip>:\n  41c3b8:\t55                   \tpush   %rbp\n  41c3b9:\t48 89 e5             \tmov    %rsp,%rbp\n  41c3bc:\t48 83 ec 60          \tsub    $0x60,%rsp\n  41c3c0:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  41c3c4:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n  41c3c7:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  41c3cb:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n  41c3cf:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n  41c3d3:\t44 89 c8             \tmov    %r9d,%eax\n  41c3d6:\t88 45 c0             \tmov    %al,-0x40(%rbp)\n  41c3d9:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  41c3dd:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  41c3e0:\t48 89 d6             \tmov    %rdx,%rsi\n  41c3e3:\t89 c7                \tmov    %eax,%edi\n  41c3e5:\te8 e4 fc ff ff       \tcallq  41c0ce <nbd_receive_request>\n  41c3ea:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  41c3ed:\t75 0a                \tjne    41c3f9 <nbd_trip+0x41>\n  41c3ef:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c3f4:\te9 f1 03 00 00       \tjmpq   41c7ea <nbd_trip+0x432>\n  41c3f9:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  41c3fc:\t8b 45 18             \tmov    0x18(%rbp),%eax\n  41c3ff:\t39 c2                \tcmp    %eax,%edx\n  41c401:\t76 50                \tjbe    41c453 <nbd_trip+0x9b>\n  41c403:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n  41c406:\t48 8b 05 93 42 01 00 \tmov    0x14293(%rip),%rax        # 4306a0 <stderr@@GLIBC_2.2.5>\n  41c40d:\t48 83 ec 08          \tsub    $0x8,%rsp\n  41c411:\t8b 55 18             \tmov    0x18(%rbp),%edx\n  41c414:\t52                   \tpush   %rdx\n  41c415:\t41 89 c9             \tmov    %ecx,%r9d\n  41c418:\t41 b8 38 02 00 00    \tmov    $0x238,%r8d\n  41c41e:\tb9 28 77 42 00       \tmov    $0x427728,%ecx\n  41c423:\tba 39 73 42 00       \tmov    $0x427339,%edx\n  41c428:\tbe d0 74 42 00       \tmov    $0x4274d0,%esi\n  41c42d:\t48 89 c7             \tmov    %rax,%rdi\n  41c430:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c435:\te8 e6 70 fe ff       \tcallq  403520 <fprintf@plt>\n  41c43a:\t48 83 c4 10          \tadd    $0x10,%rsp\n  41c43e:\te8 fd 6b fe ff       \tcallq  403040 <__errno_location@plt>\n  41c443:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  41c449:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c44e:\te9 97 03 00 00       \tjmpq   41c7ea <nbd_trip+0x432>\n  41c453:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41c457:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  41c45a:\t89 d2                \tmov    %edx,%edx\n  41c45c:\t48 01 c2             \tadd    %rax,%rdx\n  41c45f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41c463:\t48 39 c2             \tcmp    %rax,%rdx\n  41c466:\t73 3e                \tjae    41c4a6 <nbd_trip+0xee>\n  41c468:\t48 8b 05 31 42 01 00 \tmov    0x14231(%rip),%rax        # 4306a0 <stderr@@GLIBC_2.2.5>\n  41c46f:\t41 b8 3f 02 00 00    \tmov    $0x23f,%r8d\n  41c475:\tb9 28 77 42 00       \tmov    $0x427728,%ecx\n  41c47a:\tba 39 73 42 00       \tmov    $0x427339,%edx\n  41c47f:\tbe 08 75 42 00       \tmov    $0x427508,%esi\n  41c484:\t48 89 c7             \tmov    %rax,%rdi\n  41c487:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c48c:\te8 8f 70 fe ff       \tcallq  403520 <fprintf@plt>\n  41c491:\te8 aa 6b fe ff       \tcallq  403040 <__errno_location@plt>\n  41c496:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  41c49c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c4a1:\te9 44 03 00 00       \tjmpq   41c7ea <nbd_trip+0x432>\n  41c4a6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41c4aa:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  41c4ad:\t89 d2                \tmov    %edx,%edx\n  41c4af:\t48 01 c2             \tadd    %rax,%rdx\n  41c4b2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  41c4b6:\t48 39 c2             \tcmp    %rax,%rdx\n  41c4b9:\t0f 86 80 00 00 00    \tjbe    41c53f <nbd_trip+0x187>\n  41c4bf:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  41c4c2:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  41c4c6:\t48 8b 05 d3 41 01 00 \tmov    0x141d3(%rip),%rax        # 4306a0 <stderr@@GLIBC_2.2.5>\n  41c4cd:\t48 83 ec 08          \tsub    $0x8,%rsp\n  41c4d1:\tff 75 b0             \tpushq  -0x50(%rbp)\n  41c4d4:\tff 75 b8             \tpushq  -0x48(%rbp)\n  41c4d7:\t52                   \tpush   %rdx\n  41c4d8:\t49 89 c9             \tmov    %rcx,%r9\n  41c4db:\t41 b8 46 02 00 00    \tmov    $0x246,%r8d\n  41c4e1:\tb9 28 77 42 00       \tmov    $0x427728,%ecx\n  41c4e6:\tba 39 73 42 00       \tmov    $0x427339,%edx\n  41c4eb:\tbe 50 75 42 00       \tmov    $0x427550,%esi\n  41c4f0:\t48 89 c7             \tmov    %rax,%rdi\n  41c4f3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c4f8:\te8 23 70 fe ff       \tcallq  403520 <fprintf@plt>\n  41c4fd:\t48 83 c4 20          \tadd    $0x20,%rsp\n  41c501:\t48 8b 05 98 41 01 00 \tmov    0x14198(%rip),%rax        # 4306a0 <stderr@@GLIBC_2.2.5>\n  41c508:\t41 b8 49 02 00 00    \tmov    $0x249,%r8d\n  41c50e:\tb9 28 77 42 00       \tmov    $0x427728,%ecx\n  41c513:\tba 39 73 42 00       \tmov    $0x427339,%edx\n  41c518:\tbe 90 75 42 00       \tmov    $0x427590,%esi\n  41c51d:\t48 89 c7             \tmov    %rax,%rdi\n  41c520:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c525:\te8 f6 6f fe ff       \tcallq  403520 <fprintf@plt>\n  41c52a:\te8 11 6b fe ff       \tcallq  403040 <__errno_location@plt>\n  41c52f:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  41c535:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c53a:\te9 ab 02 00 00       \tjmpq   41c7ea <nbd_trip+0x432>\n  41c53f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41c543:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  41c547:\tc7 45 d0 00 00 00 00 \tmovl   $0x0,-0x30(%rbp)\n  41c54e:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  41c551:\t83 f8 02             \tcmp    $0x2,%eax\n  41c554:\t0f 84 34 02 00 00    \tje     41c78e <nbd_trip+0x3d6>\n  41c55a:\t83 f8 02             \tcmp    $0x2,%eax\n  41c55d:\t0f 87 3d 02 00 00    \tja     41c7a0 <nbd_trip+0x3e8>\n  41c563:\t85 c0                \ttest   %eax,%eax\n  41c565:\t74 0e                \tje     41c575 <nbd_trip+0x1bd>\n  41c567:\t83 f8 01             \tcmp    $0x1,%eax\n  41c56a:\t0f 84 0c 01 00 00    \tje     41c67c <nbd_trip+0x2c4>\n  41c570:\te9 2b 02 00 00       \tjmpq   41c7a0 <nbd_trip+0x3e8>\n  41c575:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41c578:\tc1 e8 09             \tshr    $0x9,%eax\n  41c57b:\t89 c1                \tmov    %eax,%ecx\n  41c57d:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  41c581:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  41c585:\t48 01 d0             \tadd    %rdx,%rax\n  41c588:\t48 c1 e8 09          \tshr    $0x9,%rax\n  41c58c:\t48 89 c6             \tmov    %rax,%rsi\n  41c58f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41c593:\t48 8b 55 10          \tmov    0x10(%rbp),%rdx\n  41c597:\t48 89 c7             \tmov    %rax,%rdi\n  41c59a:\te8 74 11 00 00       \tcallq  41d713 <bdrv_read>\n  41c59f:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  41c5a2:\t75 3e                \tjne    41c5e2 <nbd_trip+0x22a>\n  41c5a4:\t48 8b 05 f5 40 01 00 \tmov    0x140f5(%rip),%rax        # 4306a0 <stderr@@GLIBC_2.2.5>\n  41c5ab:\t41 b8 59 02 00 00    \tmov    $0x259,%r8d\n  41c5b1:\tb9 28 77 42 00       \tmov    $0x427728,%ecx\n  41c5b6:\tba 39 73 42 00       \tmov    $0x427339,%edx\n  41c5bb:\tbe c8 75 42 00       \tmov    $0x4275c8,%esi\n  41c5c0:\t48 89 c7             \tmov    %rax,%rdi\n  41c5c3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c5c8:\te8 53 6f fe ff       \tcallq  403520 <fprintf@plt>\n  41c5cd:\te8 6e 6a fe ff       \tcallq  403040 <__errno_location@plt>\n  41c5d2:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  41c5d8:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c5dd:\te9 08 02 00 00       \tjmpq   41c7ea <nbd_trip+0x432>\n  41c5e2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  41c5e6:\t48 8b 00             \tmov    (%rax),%rax\n  41c5e9:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  41c5ec:\t89 d2                \tmov    %edx,%edx\n  41c5ee:\t48 01 c2             \tadd    %rax,%rdx\n  41c5f1:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  41c5f5:\t48 89 10             \tmov    %rdx,(%rax)\n  41c5f8:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  41c5fc:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  41c5ff:\t48 89 d6             \tmov    %rdx,%rsi\n  41c602:\t89 c7                \tmov    %eax,%edi\n  41c604:\te8 fc fc ff ff       \tcallq  41c305 <nbd_send_reply>\n  41c609:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  41c60c:\t75 0a                \tjne    41c618 <nbd_trip+0x260>\n  41c60e:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c613:\te9 d2 01 00 00       \tjmpq   41c7ea <nbd_trip+0x432>\n  41c618:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41c61b:\t89 c2                \tmov    %eax,%edx\n  41c61d:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  41c620:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  41c625:\t48 8b 75 10          \tmov    0x10(%rbp),%rsi\n  41c629:\t89 c7                \tmov    %eax,%edi\n  41c62b:\te8 ba f0 ff ff       \tcallq  41b6ea <nbd_wr_sync>\n  41c630:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  41c633:\t89 d2                \tmov    %edx,%edx\n  41c635:\t48 39 d0             \tcmp    %rdx,%rax\n  41c638:\t0f 84 a3 01 00 00    \tje     41c7e1 <nbd_trip+0x429>\n  41c63e:\t48 8b 05 5b 40 01 00 \tmov    0x1405b(%rip),%rax        # 4306a0 <stderr@@GLIBC_2.2.5>\n  41c645:\t41 b8 67 02 00 00    \tmov    $0x267,%r8d\n  41c64b:\tb9 28 77 42 00       \tmov    $0x427728,%ecx\n  41c650:\tba 39 73 42 00       \tmov    $0x427339,%edx\n  41c655:\tbe 80 74 42 00       \tmov    $0x427480,%esi\n  41c65a:\t48 89 c7             \tmov    %rax,%rdi\n  41c65d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c662:\te8 b9 6e fe ff       \tcallq  403520 <fprintf@plt>\n  41c667:\te8 d4 69 fe ff       \tcallq  403040 <__errno_location@plt>\n  41c66c:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  41c672:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c677:\te9 6e 01 00 00       \tjmpq   41c7ea <nbd_trip+0x432>\n  41c67c:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41c67f:\t89 c2                \tmov    %eax,%edx\n  41c681:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  41c684:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n  41c689:\t48 8b 75 10          \tmov    0x10(%rbp),%rsi\n  41c68d:\t89 c7                \tmov    %eax,%edi\n  41c68f:\te8 56 f0 ff ff       \tcallq  41b6ea <nbd_wr_sync>\n  41c694:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  41c697:\t89 d2                \tmov    %edx,%edx\n  41c699:\t48 39 d0             \tcmp    %rdx,%rax\n  41c69c:\t74 3e                \tje     41c6dc <nbd_trip+0x324>\n  41c69e:\t48 8b 05 fb 3f 01 00 \tmov    0x13ffb(%rip),%rax        # 4306a0 <stderr@@GLIBC_2.2.5>\n  41c6a5:\t41 b8 72 02 00 00    \tmov    $0x272,%r8d\n  41c6ab:\tb9 28 77 42 00       \tmov    $0x427728,%ecx\n  41c6b0:\tba 39 73 42 00       \tmov    $0x427339,%edx\n  41c6b5:\tbe f0 75 42 00       \tmov    $0x4275f0,%esi\n  41c6ba:\t48 89 c7             \tmov    %rax,%rdi\n  41c6bd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c6c2:\te8 59 6e fe ff       \tcallq  403520 <fprintf@plt>\n  41c6c7:\te8 74 69 fe ff       \tcallq  403040 <__errno_location@plt>\n  41c6cc:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  41c6d2:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c6d7:\te9 0e 01 00 00       \tjmpq   41c7ea <nbd_trip+0x432>\n  41c6dc:\t80 7d c0 00          \tcmpb   $0x0,-0x40(%rbp)\n  41c6e0:\t74 0c                \tje     41c6ee <nbd_trip+0x336>\n  41c6e2:\tc7 45 d0 01 00 00 00 \tmovl   $0x1,-0x30(%rbp)\n  41c6e9:\te9 83 00 00 00       \tjmpq   41c771 <nbd_trip+0x3b9>\n  41c6ee:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41c6f1:\tc1 e8 09             \tshr    $0x9,%eax\n  41c6f4:\t89 c1                \tmov    %eax,%ecx\n  41c6f6:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  41c6fa:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  41c6fe:\t48 01 d0             \tadd    %rdx,%rax\n  41c701:\t48 c1 e8 09          \tshr    $0x9,%rax\n  41c705:\t48 89 c6             \tmov    %rax,%rsi\n  41c708:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41c70c:\t48 8b 55 10          \tmov    0x10(%rbp),%rdx\n  41c710:\t48 89 c7             \tmov    %rax,%rdi\n  41c713:\te8 36 11 00 00       \tcallq  41d84e <bdrv_write>\n  41c718:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  41c71b:\t75 3e                \tjne    41c75b <nbd_trip+0x3a3>\n  41c71d:\t48 8b 05 7c 3f 01 00 \tmov    0x13f7c(%rip),%rax        # 4306a0 <stderr@@GLIBC_2.2.5>\n  41c724:\t41 b8 7f 02 00 00    \tmov    $0x27f,%r8d\n  41c72a:\tb9 28 77 42 00       \tmov    $0x427728,%ecx\n  41c72f:\tba 39 73 42 00       \tmov    $0x427339,%edx\n  41c734:\tbe 20 76 42 00       \tmov    $0x427620,%esi\n  41c739:\t48 89 c7             \tmov    %rax,%rdi\n  41c73c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c741:\te8 da 6d fe ff       \tcallq  403520 <fprintf@plt>\n  41c746:\te8 f5 68 fe ff       \tcallq  403040 <__errno_location@plt>\n  41c74b:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  41c751:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c756:\te9 8f 00 00 00       \tjmpq   41c7ea <nbd_trip+0x432>\n  41c75b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  41c75f:\t48 8b 00             \tmov    (%rax),%rax\n  41c762:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  41c765:\t89 d2                \tmov    %edx,%edx\n  41c767:\t48 01 c2             \tadd    %rax,%rdx\n  41c76a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  41c76e:\t48 89 10             \tmov    %rdx,(%rax)\n  41c771:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  41c775:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  41c778:\t48 89 d6             \tmov    %rdx,%rsi\n  41c77b:\t89 c7                \tmov    %eax,%edi\n  41c77d:\te8 83 fb ff ff       \tcallq  41c305 <nbd_send_reply>\n  41c782:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  41c785:\t75 5d                \tjne    41c7e4 <nbd_trip+0x42c>\n  41c787:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c78c:\teb 5c                \tjmp    41c7ea <nbd_trip+0x432>\n  41c78e:\te8 ad 68 fe ff       \tcallq  403040 <__errno_location@plt>\n  41c793:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  41c799:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  41c79e:\teb 4a                \tjmp    41c7ea <nbd_trip+0x432>\n  41c7a0:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  41c7a3:\t48 8b 05 f6 3e 01 00 \tmov    0x13ef6(%rip),%rax        # 4306a0 <stderr@@GLIBC_2.2.5>\n  41c7aa:\t41 89 d1             \tmov    %edx,%r9d\n  41c7ad:\t41 b8 8f 02 00 00    \tmov    $0x28f,%r8d\n  41c7b3:\tb9 28 77 42 00       \tmov    $0x427728,%ecx\n  41c7b8:\tba 39 73 42 00       \tmov    $0x427339,%edx\n  41c7bd:\tbe 48 76 42 00       \tmov    $0x427648,%esi\n  41c7c2:\t48 89 c7             \tmov    %rax,%rdi\n  41c7c5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c7ca:\te8 51 6d fe ff       \tcallq  403520 <fprintf@plt>\n  41c7cf:\te8 6c 68 fe ff       \tcallq  403040 <__errno_location@plt>\n  41c7d4:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  41c7da:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41c7df:\teb 09                \tjmp    41c7ea <nbd_trip+0x432>\n  41c7e1:\t90                   \tnop\n  41c7e2:\teb 01                \tjmp    41c7e5 <nbd_trip+0x42d>\n  41c7e4:\t90                   \tnop\n  41c7e5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c7ea:\tc9                   \tleaveq \n  41c7eb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall nbd_trip(__int64 a1, int a2, unsigned __int64 a3, __int64 a4,\n                            _QWORD *a5, char a6, __int64 a7, unsigned int a8) {\n  __int64 result;\n  unsigned __int64 v9;\n  unsigned __int64 v10;\n  int <span class=\"supfact\">v15</span>;\n  __int64 v16;\n  unsigned int <span class=\"supfact\">v17</span>;\n  __int64 v18;\n  unsigned __int64 v19;\n  unsigned int v20;\n  if ((unsigned int)nbd_receive_request(a2, (__int64)&<span class=\"supfact\">v17</span>) ==\n      Number)\n    return Number;\n  if (v20 > a8) {\n    fprintf(stderr, String, String, String, Number L, v20, a8);\n    *__errno_location() = Number;\n    return Number;\n  }\n  if (v19 + v20 < v19) {\n    fprintf(stderr, String, String, String, Number L);\n    *__errno_location() = Number;\n    return Number;\n  }\n  if (v19 + v20 > a3) {\n    fprintf(stderr, String, String, String, Number L, v19, v20, a3, a4);\n    fprintf(stderr, String, String, String, Number L);\n    *__errno_location() = Number;\n    return Number;\n  }\n  v16 = v18;\n  <span class=\"supfact\">v15</span> = Number;\n  if (<span class=\"supfact\">v17</span> == Number) {\n    *__errno_location() = Number;\n    result = Number L;\n  } else if (<span class=\"supfact\">v17</span> > Number) {\n    fprintf(stderr, String, String, String, Number L, <span class=\"supfact\">v17</span>);\n    *__errno_location() = Number;\n    result = Number;\n  } else {\n    if (<span class=\"supfact\">v17</span>) {\n      v10 = nbd_wr_sync(a2, a7, v20, Number);\n      if (v10 != v20) {\n        fprintf(stderr, String, String, String, Number L);\n        *__errno_location() = Number;\n        return Number;\n      }\n      if (a6) {\n        <span class=\"supfact\">v15</span> = Number;\n      } else {\n        if ((unsigned int)bdrv_write(a1, (v19 + a4) >> Number, a7,\n                                     v20 >> Number) == Number) {\n          fprintf(stderr, String, String, String, Number L);\n          *__errno_location() = Number;\n          return Number;\n        }\n        *a5 += v20;\n      }\n      if ((unsigned int)nbd_send_reply(a2, (__int64)&<span class=\"supfact\">v15</span>) ==\n          Number)\n        return Number;\n    } else {\n      if ((unsigned int)bdrv_read(a1, (v19 + a4) >> Number, a7,\n                                  v20 >> Number) == Number) {\n        fprintf(stderr, String, String, String, Number L);\n        *__errno_location() = Number;\n        return Number;\n      }\n      *a5 += v20;\n      if ((unsigned int)nbd_send_reply(a2, (__int64)&<span class=\"supfact\">v15</span>) ==\n          Number)\n        return Number;\n      v9 = nbd_wr_sync(a2, a7, v20, Number);\n      if (v9 != v20) {\n        fprintf(stderr, String, String, String, Number L);\n        *__errno_location() = Number;\n        return Number;\n      }\n    }\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl nbd_trip(BlockDriverState_0 *bs, int csock, off_t size,\n                     uint64_t dev_offset, off_t *offset, bool readonly,\n                     uint8_t *data, int data_size) {\n  int result;\n  size_t v9;\n  size_t v10;\n  nbd_reply <span class=\"supfact\">reply</span>;\n  nbd_request <span class=\"supfact\">request</span>;\n  if (nbd_receive_request(csock, &<span class=\"supfact\">request</span>) == Number)\n    return Number;\n  if (<span class=\"supfact\">request</span>.len > data_size) {\n    fprintf(stderr, String, String, String, Number L,\n            <span class=\"supfact\">request</span>.len, (unsigned int)data_size);\n    *__errno_location() = Number;\n    return Number;\n  }\n  if (<span class=\"supfact\">request</span>.from + <span class=\"supfact\">request</span>.len <\n      <span class=\"supfact\">request</span>.from) {\n    fprintf(stderr, String, String, String, Number L);\n    *__errno_location() = Number;\n    return Number;\n  }\n  if (<span class=\"supfact\">request</span>.from + <span class=\"supfact\">request</span>.len > size) {\n    fprintf(stderr, String, String, String, Number L,\n            <span class=\"supfact\">request</span>.from, <span class=\"supfact\">request</span>.len, size,\n            dev_offset);\n    fprintf(stderr, String, String, String, Number L);\n    *__errno_location() = Number;\n    return Number;\n  }\n  <span class=\"supfact\">reply</span>.handle = <span class=\"supfact\">request</span>.handle;\n  <span class=\"supfact\">reply</span>.error = Number;\n  if (<span class=\"supfact\">request</span>.type == Number) {\n    *__errno_location() = Number;\n    result = Number;\n  } else if (<span class=\"supfact\">request</span>.type > Number) {\n    fprintf(stderr, String, String, String, Number L,\n            <span class=\"supfact\">request</span>.type);\n    *__errno_location() = Number;\n    result = Number;\n  } else {\n    if (<span class=\"supfact\">request</span>.type) {\n      v10 = nbd_wr_sync(csock, data, <span class=\"supfact\">request</span>.len, Number);\n      if (v10 != <span class=\"supfact\">request</span>.len) {\n        fprintf(stderr, String, String, String, Number L);\n        *__errno_location() = Number;\n        return Number;\n      }\n      if (readonly) {\n        <span class=\"supfact\">reply</span>.error = Number;\n      } else {\n        if (bdrv_write(bs,\n                       (<span class=\"supfact\">request</span>.from + dev_offset) >> Number,\n                       data, <span class=\"supfact\">request</span>.len >> Number) == Number) {\n          fprintf(stderr, String, String, String, Number L);\n          *__errno_location() = Number;\n          return Number;\n        }\n        *offset += <span class=\"supfact\">request</span>.len;\n      }\n      if (nbd_send_reply(csock, &<span class=\"supfact\">reply</span>) == Number)\n        return Number;\n    } else {\n      if (bdrv_read(bs, (<span class=\"supfact\">request</span>.from + dev_offset) >> Number,\n                    data, <span class=\"supfact\">request</span>.len >> Number) == Number) {\n        fprintf(stderr, String, String, String, Number L);\n        *__errno_location() = Number;\n        return Number;\n      }\n      *offset += <span class=\"supfact\">request</span>.len;\n      if (nbd_send_reply(csock, &<span class=\"supfact\">reply</span>) == Number)\n        return Number;\n      v9 = nbd_wr_sync(csock, data, <span class=\"supfact\">request</span>.len, Number);\n      if (v9 != <span class=\"supfact\">request</span>.len) {\n        fprintf(stderr, String, String, String, Number L);\n        *__errno_location() = Number;\n        return Number;\n      }\n    }\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v15", "type": "struct nbd_reply { uint32_t error; PADDING (4); uint64_t handle; }", "pred_name": "reply", "ref_name": "reply", "ref_type": "struct nbd_reply { uint32_t error; PADDING (4); uint64_t handle; }"}, {"name": "v17", "type": "struct nbd_request { uint32_t type; PADDING (4); uint64_t handle; uint64_t from; uint32_t len; PADDING (4); }", "pred_name": "request", "ref_name": "request", "ref_type": "struct nbd_request { uint32_t type; PADDING (4); uint64_t handle; uint64_t from; uint32_t len; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "maemo-leste", "repo_name": "droid4-linux", "path": "maemo-leste/droid4-linux/ba6e5c20267a7514ae23c7061cbf58f059d54ede762ed3362d992468d93cddb4", "path_in_repo": "maemo-leste/droid4-linux/tools/perf/ui/gtk/gtk-in.o", "objdump": "000000000000097b <he_get_period_us>:\n     97b:\t55                   \tpush   %rbp\n     97c:\t48 89 e5             \tmov    %rsp,%rbp\n     97f:\t48 83 ec 20          \tsub    $0x20,%rsp\n     983:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     987:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     98e:\t00 00 \n     990:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     994:\t31 c0                \txor    %eax,%eax\n     996:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     99a:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     99e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     9a2:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n     9a9:\t00 00 \n     9ab:\t74 05                \tje     9b2 <he_get_period_us+0x37>\n     9ad:\te8 00 00 00 00       \tcallq  9b2 <he_get_period_us+0x37>\n     9b2:\tc9                   \tleaveq \n     9b3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall he_get_period_us(__int64 a1) {\n  return *(_QWORD *)(a1 + Number);\n}", "code_t": "u64 __cdecl he_get_period_us(hist_entry *he) { return he->stat.period_us; }", "var": [], "body_in_train": true}, {"repo_owner": "jzeng4", "repo_name": "top", "path": "jzeng4/top/bbbc3e97a7d79d5d4ea86c8ff94d3d9daa4714f1558985a28ee5d50f47119871", "path_in_repo": "jzeng4/top//hw/display/pl110.o", "objdump": "000000000000f83a <pl110_draw_line16_555_lblp_rgb16>:\n    f83a:\t55                   \tpush   %rbp\n    f83b:\t48 89 e5             \tmov    %rsp,%rbp\n    f83e:\t48 83 ec 40          \tsub    $0x40,%rsp\n    f842:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    f846:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    f84a:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    f84e:\t89 4d c4             \tmov    %ecx,-0x3c(%rbp)\n    f851:\t44 89 45 c0          \tmov    %r8d,-0x40(%rbp)\n    f855:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    f85c:\t00 00 \n    f85e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    f862:\t31 c0                \txor    %eax,%eax\n    f864:\te9 be 00 00 00       \tjmpq   f927 <pl110_draw_line16_555_lblp_rgb16+0xed>\n    f869:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    f86d:\t8b 00                \tmov    (%rax),%eax\n    f86f:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    f872:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    f875:\tc1 e0 03             \tshl    $0x3,%eax\n    f878:\t25 ff 00 00 00       \tand    $0xff,%eax\n    f87d:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    f880:\tc1 6d e8 05          \tshrl   $0x5,-0x18(%rbp)\n    f884:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    f887:\tc1 e0 03             \tshl    $0x3,%eax\n    f88a:\t25 ff 00 00 00       \tand    $0xff,%eax\n    f88f:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    f892:\tc1 6d e8 05          \tshrl   $0x5,-0x18(%rbp)\n    f896:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    f899:\tc1 e0 03             \tshl    $0x3,%eax\n    f89c:\t25 ff 00 00 00       \tand    $0xff,%eax\n    f8a1:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    f8a4:\tc1 6d e8 05          \tshrl   $0x5,-0x18(%rbp)\n    f8a8:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    f8ab:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n    f8ae:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    f8b1:\t89 ce                \tmov    %ecx,%esi\n    f8b3:\t89 c7                \tmov    %eax,%edi\n    f8b5:\te8 2b 09 ff ff       \tcallq  1e5 <rgb_to_pixel16>\n    f8ba:\t89 c2                \tmov    %eax,%edx\n    f8bc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    f8c0:\t66 89 10             \tmov    %dx,(%rax)\n    f8c3:\t48 83 45 d0 02       \taddq   $0x2,-0x30(%rbp)\n    f8c8:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    f8cb:\tc1 e0 03             \tshl    $0x3,%eax\n    f8ce:\t25 ff 00 00 00       \tand    $0xff,%eax\n    f8d3:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    f8d6:\tc1 6d e8 05          \tshrl   $0x5,-0x18(%rbp)\n    f8da:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    f8dd:\tc1 e0 03             \tshl    $0x3,%eax\n    f8e0:\t25 ff 00 00 00       \tand    $0xff,%eax\n    f8e5:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    f8e8:\tc1 6d e8 05          \tshrl   $0x5,-0x18(%rbp)\n    f8ec:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    f8ef:\tc1 e0 03             \tshl    $0x3,%eax\n    f8f2:\t25 ff 00 00 00       \tand    $0xff,%eax\n    f8f7:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    f8fa:\tc1 6d e8 06          \tshrl   $0x6,-0x18(%rbp)\n    f8fe:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    f901:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n    f904:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    f907:\t89 ce                \tmov    %ecx,%esi\n    f909:\t89 c7                \tmov    %eax,%edi\n    f90b:\te8 d5 08 ff ff       \tcallq  1e5 <rgb_to_pixel16>\n    f910:\t89 c2                \tmov    %eax,%edx\n    f912:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    f916:\t66 89 10             \tmov    %dx,(%rax)\n    f919:\t48 83 45 d0 02       \taddq   $0x2,-0x30(%rbp)\n    f91e:\t83 6d c4 02          \tsubl   $0x2,-0x3c(%rbp)\n    f922:\t48 83 45 c8 04       \taddq   $0x4,-0x38(%rbp)\n    f927:\t83 7d c4 00          \tcmpl   $0x0,-0x3c(%rbp)\n    f92b:\t0f 8f 38 ff ff ff    \tjg     f869 <pl110_draw_line16_555_lblp_rgb16+0x2f>\n    f931:\t90                   \tnop\n    f932:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    f936:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    f93d:\t00 00 \n    f93f:\t74 05                \tje     f946 <pl110_draw_line16_555_lblp_rgb16+0x10c>\n    f941:\te8 00 00 00 00       \tcallq  f946 <pl110_draw_line16_555_lblp_rgb16+0x10c>\n    f946:\tc9                   \tleaveq \n    f947:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall pl110_draw_line16_555_lblp_rgb16(__int64 a1,\n                                                             _WORD *a2,\n                                                             _DWORD *a3,\n                                                             int a4) {\n  unsigned int v8;\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  while (a4 > Number) {\n    v8 = *a3 >> Number;\n    *a2 = rgb_to_pixel16((unsigned __int8)(Number * *a3),\n                         (unsigned __int8)(Number * (*a3 >> Number)),\n                         (unsigned __int8)(Number * (*a3 >> Number)));\n    a2[Number] = rgb_to_pixel16((unsigned __int8)(Number * v8),\n                                (unsigned __int8)(Number * (v8 >> Number)),\n                                (unsigned __int8)(Number * (v8 >> Number)));\n    a2 += Number;\n    a4 -= Number;\n    ++a3;\n  }\n  return __readfsqword(Number) ^ v9;\n}", "code_t": "void __cdecl pl110_draw_line16_555_lblp_rgb16(void *opaque, uint8_t *d,\n                                              const uint8_t *src, int width,\n                                              int deststep) {\n  uint32_t data;\n  while (width > Number) {\n    data = *(_DWORD *)src >> Number;\n    *(_WORD *)d =\n        rgb_to_pixel16((unsigned __int8)(Number * *(_DWORD *)src),\n                       (unsigned __int8)(Number * (*(_DWORD *)src >> Number)),\n                       (unsigned __int8)(Number * (*(_DWORD *)src >> Number)));\n    *((_WORD *)d + Number) =\n        rgb_to_pixel16((unsigned __int8)(Number * data),\n                       (unsigned __int8)(Number * (data >> Number)),\n                       (unsigned __int8)(Number * (data >> Number)));\n    d += Number;\n    width -= Number;\n    src += Number;\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "SecureAuthCorp", "repo_name": "pycodin", "path": "SecureAuthCorp/pycodin/896e3aa1dd6ba6a0fc3b5efab1412f280eaed81a6e0d6f9667f3688c8952a550", "path_in_repo": "SecureAuthCorp/pycodin/qemu-0.12.3/ppc64-linux-user/op_helper.o", "objdump": "000000000000b31d <helper_efdctui>:\n    b31d:\t55                   \tpush   %rbp\n    b31e:\t48 89 e5             \tmov    %rsp,%rbp\n    b321:\t48 83 ec 20          \tsub    $0x20,%rsp\n    b325:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    b329:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b32d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    b331:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    b335:\t48 89 c7             \tmov    %rax,%rdi\n    b338:\te8 00 00 00 00       \tcallq  b33d <helper_efdctui+0x20>\n    b33d:\t85 c0                \ttest   %eax,%eax\n    b33f:\t0f 95 c0             \tsetne  %al\n    b342:\t0f b6 c0             \tmovzbl %al,%eax\n    b345:\t48 85 c0             \ttest   %rax,%rax\n    b348:\t74 07                \tje     b351 <helper_efdctui+0x34>\n    b34a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    b34f:\teb 19                \tjmp    b36a <helper_efdctui+0x4d>\n    b351:\t4c 89 f0             \tmov    %r14,%rax\n    b354:\t48 8d 90 5c 82 01 00 \tlea    0x1825c(%rax),%rdx\n    b35b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    b35f:\t48 89 d6             \tmov    %rdx,%rsi\n    b362:\t48 89 c7             \tmov    %rax,%rdi\n    b365:\te8 00 00 00 00       \tcallq  b36a <helper_efdctui+0x4d>\n    b36a:\tc9                   \tleaveq \n    b36b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall helper_efdctui(__int64 a1) {\n  __int64 v1;\n  __int64 result;\n  if ((unsigned int)float64_is_nan(a1))\n    result = Number L;\n  else\n    result = float64_to_uint32(a1, v1 + Number);\n  return result;\n}", "code_t": "uint32_t __cdecl helper_efdctui(uint64_t val) {\n  __int64 v1;\n  uint32_t result;\n  if ((unsigned int)float64_is_nan(val))\n    result = Number;\n  else\n    result = float64_to_uint32(val, v1 + Number);\n  return result;\n}", "var": [], "body_in_train": false}, {"repo_owner": "wnoguchi", "repo_name": "hikari_denwa_asterisk", "path": "wnoguchi/hikari_denwa_asterisk/513dcb0a92eafe6237d3f1016fb0a9d8e0e0abaa48a3af0a523fb3d2c8d326f6", "path_in_repo": "wnoguchi/hikari_denwa_asterisk/asterisk-11.0.1/res/pjproject/pjnath/bin/pjturn-client-x86_64-unknown-linux-gnu", "objdump": "000000000042880f <pj_throw_exception_>:\n  42880f:\t55                   \tpush   %rbp\n  428810:\t48 89 e5             \tmov    %rsp,%rbp\n  428813:\t48 83 ec 20          \tsub    $0x20,%rsp\n  428817:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  42881a:\t48 8b 05 0f b5 01 00 \tmov    0x1b50f(%rip),%rax        # 443d30 <thread_local_id>\n  428821:\t48 89 c7             \tmov    %rax,%rdi\n  428824:\te8 51 aa ff ff       \tcallq  42327a <pj_thread_local_get>\n  428829:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  42882d:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  428832:\t75 4a                \tjne    42887e <pj_throw_exception_+0x6f>\n  428834:\te8 e3 18 00 00       \tcallq  42a11c <pj_log_get_level>\n  428839:\t85 c0                \ttest   %eax,%eax\n  42883b:\t7e 21                \tjle    42885e <pj_throw_exception_+0x4f>\n  42883d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  428840:\t89 c7                \tmov    %eax,%edi\n  428842:\te8 58 02 00 00       \tcallq  428a9f <pj_exception_id_name>\n  428847:\t48 89 c2             \tmov    %rax,%rdx\n  42884a:\tbe 30 8c 43 00       \tmov    $0x438c30,%esi\n  42884f:\tbf 53 8c 43 00       \tmov    $0x438c53,%edi\n  428854:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  428859:\te8 06 20 00 00       \tcallq  42a864 <pj_log_1>\n  42885e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  428863:\t75 19                \tjne    42887e <pj_throw_exception_+0x6f>\n  428865:\tb9 d0 8c 43 00       \tmov    $0x438cd0,%ecx\n  42886a:\tba 32 00 00 00       \tmov    $0x32,%edx\n  42886f:\tbe 5c 8c 43 00       \tmov    $0x438c5c,%esi\n  428874:\tbf 6f 8c 43 00       \tmov    $0x438c6f,%edi\n  428879:\te8 12 a8 fd ff       \tcallq  403090 <__assert_fail@plt>\n  42887e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  428882:\t48 89 c7             \tmov    %rax,%rdi\n  428885:\te8 fc 00 00 00       \tcallq  428986 <pj_pop_exception_handler_>\n  42888a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  42888e:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  428892:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  428895:\t89 c6                \tmov    %eax,%esi\n  428897:\t48 89 d7             \tmov    %rdx,%rdi\n  42889a:\te8 01 a9 fd ff       \tcallq  4031a0 <longjmp@plt>", "code_s": "void __fastcall __noreturn pj_throw_exception_(unsigned int a1) {\n  __int64 v1;\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  char *v7;\n  v1 = thread_local_id;\n  v7 = (char *)pj_thread_local_get(thread_local_id);\n  if (!v7) {\n    if ((int)pj_log_get_level(v1) > Number) {\n      v2 = pj_exception_id_name(a1);\n      pj_log_1((unsigned int)String, (unsigned int)String, v2, v3, v4, v5);\n    }\n    __assert_fail(String, String, Number, String);\n  }\n  pj_pop_exception_handler_(v7);\n  longjmp((struct __jmp_buf_tag *)(v7 + Number), a1);\n}", "code_t": "void __cdecl __noreturn pj_throw_exception_(int exception_id) {\n  const char *v1;\n  pj_exception_state_t *handler;\n  handler = (pj_exception_state_t *)pj_thread_local_get(thread_local_id);\n  if (!handler) {\n    if (pj_log_get_level() > Number) {\n      v1 = pj_exception_id_name(exception_id);\n      pj_log_1(String, String, v1);\n    }\n    __assert_fail(String, String, Number, String);\n  }\n  pj_pop_exception_handler_(handler);\n  longjmp(handler->state, exception_id);\n}", "var": [], "body_in_train": false}, {"repo_owner": "slapin", "repo_name": "q2-dev", "path": "slapin/q2-dev/6a6a70112ab46169e29e4c2f9e84312e9c4184ba1c134952fa0112ccdd1afe6c", "path_in_repo": "slapin/q2-dev/game/releasex86_64/game/m_berserk.o", "objdump": "000000000000022d <berserk_attack_club>:\n 22d:\t48 83 ec 28          \tsub    $0x28,%rsp\n 231:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n 236:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 23e <berserk_attack_club+0x11>\n 23d:\t00 \n 23e:\tf3 0f 11 44 24 14    \tmovss  %xmm0,0x14(%rsp)\n 244:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 249:\tf3 0f 10 80 cc 00 00 \tmovss  0xcc(%rax),%xmm0\n 250:\t00 \n 251:\tf3 0f 11 44 24 18    \tmovss  %xmm0,0x18(%rsp)\n 257:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 25f <berserk_attack_club+0x32>\n 25e:\t00 \n 25f:\tf3 0f 11 44 24 1c    \tmovss  %xmm0,0x1c(%rsp)\n 265:\te8 00 00 00 00       \tcallq  26a <berserk_attack_club+0x3d>\n 26a:\t89 c2                \tmov    %eax,%edx\n 26c:\t48 63 c2             \tmovslq %edx,%rax\n 26f:\t48 69 c0 ab aa aa 2a \timul   $0x2aaaaaab,%rax,%rax\n 276:\t48 c1 e8 20          \tshr    $0x20,%rax\n 27a:\t48 89 c1             \tmov    %rax,%rcx\n 27d:\t89 d0                \tmov    %edx,%eax\n 27f:\tc1 f8 1f             \tsar    $0x1f,%eax\n 282:\t29 c1                \tsub    %eax,%ecx\n 284:\t89 c8                \tmov    %ecx,%eax\n 286:\t01 c0                \tadd    %eax,%eax\n 288:\t01 c8                \tadd    %ecx,%eax\n 28a:\t01 c0                \tadd    %eax,%eax\n 28c:\t29 c2                \tsub    %eax,%edx\n 28e:\t89 d1                \tmov    %edx,%ecx\n 290:\t8d 51 05             \tlea    0x5(%rcx),%edx\n 293:\t48 8d 74 24 14       \tlea    0x14(%rsp),%rsi\n 298:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 29d:\tb9 90 01 00 00       \tmov    $0x190,%ecx\n 2a2:\t48 89 c7             \tmov    %rax,%rdi\n 2a5:\te8 00 00 00 00       \tcallq  2aa <berserk_attack_club+0x7d>\n 2aa:\t90                   \tnop\n 2ab:\t48 83 c4 28          \tadd    $0x28,%rsp\n 2af:\tc3                   \tretq   ", "code_s": "__int64 __fastcall berserk_attack_club(__int64 a1) {\n  int v1;\n  int v3[Number];\n  v3[Number] = Number;\n  v3[Number] = *(_DWORD *)(a1 + Number);\n  v3[Number] = Number;\n  v1 = rand();\n  return fire_hit(a1, v3, (unsigned int)(v1 % Number + Number), Number L);\n}", "code_t": "void __cdecl berserk_attack_club(edict_t *self) {\n  __int64 v1;\n  vec3_t aim;\n  aim[Number] = Number;\n  aim[Number] = self->mins[Number];\n  aim[Number] = Number;\n  v1 = (unsigned int)(rand() % Number + Number);\n  fire_hit(self, aim, v1, Number L);\n}", "var": [], "body_in_train": true}, {"repo_owner": "webosose", "repo_name": "gst-libav", "path": "webosose/gst-libav/1b6fa2293204c0cc91b45d5b5c8b3a19c97c96bfff79c3cbbe9798b6237918ad", "path_in_repo": "webosose/gst-libav/gst-libs/ext/libav/libavfilter/af_aresample.o", "objdump": "0000000000000d7e <resample_child_class_next>:\n d7e:\t48 83 ec 18          \tsub    $0x18,%rsp\n d82:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n d87:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n d8d:\t75 07                \tjne    d96 <resample_child_class_next+0x18>\n d8f:\te8 00 00 00 00       \tcallq  d94 <resample_child_class_next+0x16>\n d94:\teb 05                \tjmp    d9b <resample_child_class_next+0x1d>\n d96:\tb8 00 00 00 00       \tmov    $0x0,%eax\n d9b:\t48 83 c4 18          \tadd    $0x18,%rsp\n d9f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall resample_child_class_next(__int64 a1) {\n  __int64 result;\n  if (a1)\n    result = Number L;\n  else\n    result = swr_get_class();\n  return result;\n}", "code_t": "const AVClass_0 *__cdecl resample_child_class_next(const AVClass_0 *prev) {\n  const AVClass_0 *result;\n  if (prev)\n    result = Number L;\n  else\n    result = (const AVClass_0 *)swr_get_class();\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "thamilton2014", "repo_name": "system_programming", "path": "thamilton2014/system_programming/747af6170e10c4e8c7e3e7085a0ec0f46dee7b6e58266cf2d6a3ffe1922a8f11", "path_in_repo": "thamilton2014/system_programming/assignment7/apue.3e/standards/conf", "objdump": "0000000000401ad3 <err_dump>:\n  401ad3:\t55                   \tpush   %rbp\n  401ad4:\t48 89 e5             \tmov    %rsp,%rbp\n  401ad7:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n  401ade:\t48 89 bd 28 ff ff ff \tmov    %rdi,-0xd8(%rbp)\n  401ae5:\t48 89 b5 58 ff ff ff \tmov    %rsi,-0xa8(%rbp)\n  401aec:\t48 89 95 60 ff ff ff \tmov    %rdx,-0xa0(%rbp)\n  401af3:\t48 89 8d 68 ff ff ff \tmov    %rcx,-0x98(%rbp)\n  401afa:\t4c 89 85 70 ff ff ff \tmov    %r8,-0x90(%rbp)\n  401b01:\t4c 89 8d 78 ff ff ff \tmov    %r9,-0x88(%rbp)\n  401b08:\t84 c0                \ttest   %al,%al\n  401b0a:\t74 20                \tje     401b2c <err_dump+0x59>\n  401b0c:\t0f 29 45 80          \tmovaps %xmm0,-0x80(%rbp)\n  401b10:\t0f 29 4d 90          \tmovaps %xmm1,-0x70(%rbp)\n  401b14:\t0f 29 55 a0          \tmovaps %xmm2,-0x60(%rbp)\n  401b18:\t0f 29 5d b0          \tmovaps %xmm3,-0x50(%rbp)\n  401b1c:\t0f 29 65 c0          \tmovaps %xmm4,-0x40(%rbp)\n  401b20:\t0f 29 6d d0          \tmovaps %xmm5,-0x30(%rbp)\n  401b24:\t0f 29 75 e0          \tmovaps %xmm6,-0x20(%rbp)\n  401b28:\t0f 29 7d f0          \tmovaps %xmm7,-0x10(%rbp)\n  401b2c:\tc7 85 38 ff ff ff 08 \tmovl   $0x8,-0xc8(%rbp)\n  401b33:\t00 00 00 \n  401b36:\tc7 85 3c ff ff ff 30 \tmovl   $0x30,-0xc4(%rbp)\n  401b3d:\t00 00 00 \n  401b40:\t48 8d 45 10          \tlea    0x10(%rbp),%rax\n  401b44:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n  401b4b:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  401b52:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n  401b59:\te8 e2 f4 ff ff       \tcallq  401040 <__errno_location@plt>\n  401b5e:\t8b 00                \tmov    (%rax),%eax\n  401b60:\t48 8d 8d 38 ff ff ff \tlea    -0xc8(%rbp),%rcx\n  401b67:\t48 8b 95 28 ff ff ff \tmov    -0xd8(%rbp),%rdx\n  401b6e:\t89 c6                \tmov    %eax,%esi\n  401b70:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401b75:\te8 64 01 00 00       \tcallq  401cde <err_doit>\n  401b7a:\te8 b1 f4 ff ff       \tcallq  401030 <abort@plt>", "code_s": "void __noreturn err_dump(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n                         __int64 a5, __int64 a6, ...) {\n  int *v6;\n  gcc_va_list va;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  va_start(va, a6);\n  v8 = a2;\n  v9 = a3;\n  v10 = a4;\n  v11 = a5;\n  v12 = a6;\n  va[Number].gp_offset = Number;\n  v6 = __errno_location();\n  err_doit(Number L, (unsigned int)*v6, a1, va);\n  abort();\n}", "code_t": "void __noreturn err_dump(const char *fmt, ...) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  int *v6;\n  va_list ap;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  va_start(ap, fmt);\n  v3 = va_arg(ap, _QWORD);\n  v1 = va_arg(ap, _QWORD);\n  v2 = va_arg(ap, _QWORD);\n  v4 = va_arg(ap, _QWORD);\n  v5 = va_arg(ap, _QWORD);\n  v8 = v3;\n  v9 = v1;\n  v10 = v2;\n  v11 = v4;\n  v12 = v5;\n  ap[Number].gp_offset = Number;\n  v6 = __errno_location();\n  err_doit(Number, *v6, fmt, ap);\n  abort();\n}", "var": [], "body_in_train": true}, {"repo_owner": "rockchip-toybrick", "repo_name": "external-wpa_supplicant_8", "path": "rockchip-toybrick/external-wpa_supplicant_8/6c2672fab34303e61c1d7e93a0407c1791fe28b43ea8f5250feccdda94afd81e", "path_in_repo": "rockchip-toybrick/external-wpa_supplicant_8/hostapd/hostapd", "objdump": "000000000043dc1f <hw_get_channel_freq>:\n  43dc1f:\t55                   \tpush   %rbp\n  43dc20:\t48 89 e5             \tmov    %rsp,%rbp\n  43dc23:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  43dc27:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  43dc2a:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  43dc2e:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  43dc33:\t74 0a                \tje     43dc3f <hw_get_channel_freq+0x20>\n  43dc35:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  43dc39:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  43dc3f:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  43dc44:\t75 07                \tjne    43dc4d <hw_get_channel_freq+0x2e>\n  43dc46:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  43dc4b:\teb 6a                \tjmp    43dcb7 <hw_get_channel_freq+0x98>\n  43dc4d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  43dc54:\teb 50                \tjmp    43dca6 <hw_get_channel_freq+0x87>\n  43dc56:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43dc5a:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  43dc5e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  43dc61:\t48 63 d0             \tmovslq %eax,%rdx\n  43dc64:\t48 89 d0             \tmov    %rdx,%rax\n  43dc67:\t48 c1 e0 02          \tshl    $0x2,%rax\n  43dc6b:\t48 01 d0             \tadd    %rdx,%rax\n  43dc6e:\t48 c1 e0 03          \tshl    $0x3,%rax\n  43dc72:\t48 01 c8             \tadd    %rcx,%rax\n  43dc75:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  43dc79:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  43dc7d:\t8b 40 04             \tmov    0x4(%rax),%eax\n  43dc80:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n  43dc83:\t75 1d                \tjne    43dca2 <hw_get_channel_freq+0x83>\n  43dc85:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  43dc8a:\t74 10                \tje     43dc9c <hw_get_channel_freq+0x7d>\n  43dc8c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  43dc90:\t0f b7 00             \tmovzwl (%rax),%eax\n  43dc93:\t0f bf d0             \tmovswl %ax,%edx\n  43dc96:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  43dc9a:\t89 10                \tmov    %edx,(%rax)\n  43dc9c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  43dca0:\teb 15                \tjmp    43dcb7 <hw_get_channel_freq+0x98>\n  43dca2:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  43dca6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43dcaa:\t8b 40 04             \tmov    0x4(%rax),%eax\n  43dcad:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  43dcb0:\t7c a4                \tjl     43dc56 <hw_get_channel_freq+0x37>\n  43dcb2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  43dcb7:\t5d                   \tpop    %rbp\n  43dcb8:\tc3                   \tretq   ", "code_s": "__int16 *__fastcall hw_get_channel_freq(__int64 a1, int a2, _DWORD *a3) {\n  __int16 *v4;\n  int i;\n  if (a3)\n    *a3 = Number;\n  if (!a1)\n    return Number L;\n  for (i = Number;; ++i) {\n    if (i >= *(_DWORD *)(a1 + Number))\n      return Number L;\n    v4 = (__int16 *)(*(_QWORD *)(a1 + Number) + Number L * i);\n    if (a2 == *((_DWORD *)v4 + Number))\n      break;\n  }\n  if (a3)\n    *a3 = *v4;\n  return v4;\n}", "code_t": "hostapd_channel_data *__cdecl hw_get_channel_freq(hostapd_hw_modes *mode,\n                                                  int freq, int *chan) {\n  hostapd_channel_data *ch_0;\n  int i;\n  if (chan)\n    *chan = Number;\n  if (!mode)\n    return Number L;\n  for (i = Number;; ++i) {\n    if (i >= mode->num_channels)\n      return Number L;\n    ch_0 = &mode->channels[i];\n    if (freq == ch_0->freq)\n      break;\n  }\n  if (chan)\n    *chan = ch_0->chan;\n  return ch_0;\n}", "var": [], "body_in_train": true}, {"repo_owner": "junehappylove", "repo_name": "june.everything", "path": "junehappylove/june.everything/c394e684b76582360a76ce774ee17d3643faa8d629898f92f4162c6761825a14", "path_in_repo": "junehappylove/june.everything/c++/zlib-1.2.8/libz.so.1.2.8", "objdump": "0000000000005738 <deflateBound>:\n    5738:\t55                   \tpush   %rbp\n    5739:\t48 89 e5             \tmov    %rsp,%rbp\n    573c:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    5740:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    5744:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5748:\t48 83 c0 07          \tadd    $0x7,%rax\n    574c:\t48 c1 e8 03          \tshr    $0x3,%rax\n    5750:\t48 89 c2             \tmov    %rax,%rdx\n    5753:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5757:\t48 01 c2             \tadd    %rax,%rdx\n    575a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    575e:\t48 83 c0 3f          \tadd    $0x3f,%rax\n    5762:\t48 c1 e8 06          \tshr    $0x6,%rax\n    5766:\t48 01 d0             \tadd    %rdx,%rax\n    5769:\t48 83 c0 05          \tadd    $0x5,%rax\n    576d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    5771:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    5776:\t74 0d                \tje     5785 <deflateBound+0x4d>\n    5778:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    577c:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    5780:\t48 85 c0             \ttest   %rax,%rax\n    5783:\t75 0d                \tjne    5792 <deflateBound+0x5a>\n    5785:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5789:\t48 83 c0 06          \tadd    $0x6,%rax\n    578d:\te9 74 01 00 00       \tjmpq   5906 <deflateBound+0x1ce>\n    5792:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5796:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    579a:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    579e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    57a2:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    57a5:\t83 f8 02             \tcmp    $0x2,%eax\n    57a8:\t74 47                \tje     57f1 <deflateBound+0xb9>\n    57aa:\t83 f8 02             \tcmp    $0x2,%eax\n    57ad:\t0f 8f f0 00 00 00    \tjg     58a3 <deflateBound+0x16b>\n    57b3:\t85 c0                \ttest   %eax,%eax\n    57b5:\t74 0a                \tje     57c1 <deflateBound+0x89>\n    57b7:\t83 f8 01             \tcmp    $0x1,%eax\n    57ba:\t74 12                \tje     57ce <deflateBound+0x96>\n    57bc:\te9 e2 00 00 00       \tjmpq   58a3 <deflateBound+0x16b>\n    57c1:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    57c8:\t00 \n    57c9:\te9 e0 00 00 00       \tjmpq   58ae <deflateBound+0x176>\n    57ce:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    57d2:\t8b 80 9c 00 00 00    \tmov    0x9c(%rax),%eax\n    57d8:\t85 c0                \ttest   %eax,%eax\n    57da:\t74 07                \tje     57e3 <deflateBound+0xab>\n    57dc:\tb8 0a 00 00 00       \tmov    $0xa,%eax\n    57e1:\teb 05                \tjmp    57e8 <deflateBound+0xb0>\n    57e3:\tb8 06 00 00 00       \tmov    $0x6,%eax\n    57e8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    57ec:\te9 bd 00 00 00       \tjmpq   58ae <deflateBound+0x176>\n    57f1:\t48 c7 45 f8 12 00 00 \tmovq   $0x12,-0x8(%rbp)\n    57f8:\t00 \n    57f9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    57fd:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    5801:\t48 85 c0             \ttest   %rax,%rax\n    5804:\t0f 84 a3 00 00 00    \tje     58ad <deflateBound+0x175>\n    580a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    580e:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    5812:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    5816:\t48 85 c0             \ttest   %rax,%rax\n    5819:\t74 14                \tje     582f <deflateBound+0xf7>\n    581b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    581f:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    5823:\t8b 40 20             \tmov    0x20(%rax),%eax\n    5826:\t83 c0 02             \tadd    $0x2,%eax\n    5829:\t89 c0                \tmov    %eax,%eax\n    582b:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n    582f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    5833:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    5837:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    583b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    583f:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    5844:\t74 18                \tje     585e <deflateBound+0x126>\n    5846:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    584b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    584f:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    5853:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n    5857:\t0f b6 00             \tmovzbl (%rax),%eax\n    585a:\t84 c0                \ttest   %al,%al\n    585c:\t75 e8                \tjne    5846 <deflateBound+0x10e>\n    585e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    5862:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    5866:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    586a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    586e:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    5873:\t74 18                \tje     588d <deflateBound+0x155>\n    5875:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    587a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    587e:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    5882:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n    5886:\t0f b6 00             \tmovzbl (%rax),%eax\n    5889:\t84 c0                \ttest   %al,%al\n    588b:\t75 e8                \tjne    5875 <deflateBound+0x13d>\n    588d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    5891:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    5895:\t8b 40 44             \tmov    0x44(%rax),%eax\n    5898:\t85 c0                \ttest   %eax,%eax\n    589a:\t74 11                \tje     58ad <deflateBound+0x175>\n    589c:\t48 83 45 f8 02       \taddq   $0x2,-0x8(%rbp)\n    58a1:\teb 0a                \tjmp    58ad <deflateBound+0x175>\n    58a3:\t48 c7 45 f8 06 00 00 \tmovq   $0x6,-0x8(%rbp)\n    58aa:\t00 \n    58ab:\teb 01                \tjmp    58ae <deflateBound+0x176>\n    58ad:\t90                   \tnop\n    58ae:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    58b2:\t8b 40 48             \tmov    0x48(%rax),%eax\n    58b5:\t83 f8 0f             \tcmp    $0xf,%eax\n    58b8:\t75 0c                \tjne    58c6 <deflateBound+0x18e>\n    58ba:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    58be:\t8b 40 78             \tmov    0x78(%rax),%eax\n    58c1:\t83 f8 0f             \tcmp    $0xf,%eax\n    58c4:\t74 0d                \tje     58d3 <deflateBound+0x19b>\n    58c6:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    58ca:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    58ce:\t48 01 d0             \tadd    %rdx,%rax\n    58d1:\teb 33                \tjmp    5906 <deflateBound+0x1ce>\n    58d3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    58d7:\t48 c1 e8 0c          \tshr    $0xc,%rax\n    58db:\t48 89 c2             \tmov    %rax,%rdx\n    58de:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    58e2:\t48 01 c2             \tadd    %rax,%rdx\n    58e5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    58e9:\t48 c1 e8 0e          \tshr    $0xe,%rax\n    58ed:\t48 01 c2             \tadd    %rax,%rdx\n    58f0:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    58f4:\t48 c1 e8 19          \tshr    $0x19,%rax\n    58f8:\t48 01 c2             \tadd    %rax,%rdx\n    58fb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    58ff:\t48 01 d0             \tadd    %rdx,%rax\n    5902:\t48 83 c0 07          \tadd    $0x7,%rax\n    5906:\t5d                   \tpop    %rbp\n    5907:\tc3                   \tretq   ", "code_s": "__int64 __fastcall deflateBound(__int64 a1, unsigned __int64 a2) {\n  __int64 result;\n  int v3;\n  __int64 v4;\n  _BYTE *v5;\n  _BYTE *v6;\n  __int64 v7;\n  _BYTE *v8;\n  _BYTE *v9;\n  __int64 v10;\n  if (!a1 || !*(_QWORD *)(a1 + Number))\n    return a2 + ((a2 + Number) >> Number) + ((a2 + Number) >> Number) + Number;\n  v7 = *(_QWORD *)(a1 + Number);\n  v3 = *(_DWORD *)(v7 + Number);\n  if (v3 == Number) {\n    v10 = Number L;\n    if (*(_QWORD *)(v7 + Number)) {\n      if (*(_QWORD *)(*(_QWORD *)(v7 + Number) + Number L))\n        v10 = (unsigned int)(*(_DWORD *)(*(_QWORD *)(v7 + Number) + Number L) +\n                             Number) +\n              Number L;\n      v8 = *(_BYTE **)(*(_QWORD *)(v7 + Number) + Number L);\n      if (v8) {\n        do {\n          ++v10;\n          v5 = v8++;\n        } while (*v5);\n      }\n      v9 = *(_BYTE **)(*(_QWORD *)(v7 + Number) + Number L);\n      if (v9) {\n        do {\n          ++v10;\n          v6 = v9++;\n        } while (*v6);\n      }\n      if (*(_DWORD *)(*(_QWORD *)(v7 + Number) + Number L))\n        v10 += Number L;\n    }\n    goto LABEL_24;\n  }\n  if (v3 > Number) {\n  LABEL_23:\n    v10 = Number L;\n    goto LABEL_24;\n  }\n  if (v3) {\n    if (v3 == Number) {\n      if (*(_DWORD *)(v7 + Number))\n        v4 = Number L;\n      else\n        v4 = Number L;\n      v10 = v4;\n      goto LABEL_24;\n    }\n    goto LABEL_23;\n  }\n  v10 = Number L;\nLABEL_24:\n  if (*(_DWORD *)(v7 + Number) == Number && *(_DWORD *)(v7 + Number) == Number)\n    result =\n        (a2 >> Number) + (a2 >> Number) + a2 + (a2 >> Number) + v10 + Number;\n  else\n    result = a2 + ((a2 + Number) >> Number) + ((a2 + Number) >> Number) +\n             Number + v10;\n  return result;\n}", "code_t": "uLong __cdecl deflateBound(z_streamp strm, uLong sourceLen) {\n  uLong result;\n  int v3;\n  __int64 v4;\n  Bytef *v5;\n  Bytef *v6;\n  internal_state *s;\n  Bytef *str;\n  Bytef *stra;\n  uLong wraplen;\n  if (!strm || !strm->state)\n    return sourceLen + ((sourceLen + Number) >> Number) +\n           ((sourceLen + Number) >> Number) + Number;\n  s = strm->state;\n  v3 = s->wrap;\n  if (v3 == Number) {\n    wraplen = Number L;\n    if (s->gzhead) {\n      if (s->gzhead->extra)\n        wraplen = s->gzhead->extra_len + Number + Number L;\n      str = s->gzhead->name;\n      if (str) {\n        do {\n          ++wraplen;\n          v5 = str++;\n        } while (*v5);\n      }\n      stra = s->gzhead->comment;\n      if (stra) {\n        do {\n          ++wraplen;\n          v6 = stra++;\n        } while (*v6);\n      }\n      if (s->gzhead->hcrc)\n        wraplen += Number L;\n    }\n    goto LABEL_24;\n  }\n  if (v3 > Number) {\n  LABEL_23:\n    wraplen = Number L;\n    goto LABEL_24;\n  }\n  if (v3) {\n    if (v3 == Number) {\n      if (s->strstart)\n        v4 = Number L;\n      else\n        v4 = Number L;\n      wraplen = v4;\n      goto LABEL_24;\n    }\n    goto LABEL_23;\n  }\n  wraplen = Number L;\nLABEL_24:\n  if (s->w_bits == Number && s->hash_bits == Number)\n    result = (sourceLen >> Number) + (sourceLen >> Number) + sourceLen +\n             (sourceLen >> Number) + wraplen + Number;\n  else\n    result = sourceLen + ((sourceLen + Number) >> Number) +\n             ((sourceLen + Number) >> Number) + Number + wraplen;\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "mindbergh", "repo_name": "VideoCDN", "path": "mindbergh/VideoCDN/119f053194602b02e2ef0afe82928fb0a01818a4b506aeb009af9f4ad62b597f", "path_in_repo": "mindbergh/VideoCDN/src/proxy", "objdump": "00000000004024a0 <__do_global_dtors_aux>:\n  4024a0:\t80 3d a9 7d 00 00 00 \tcmpb   $0x0,0x7da9(%rip)        # 40a250 <completed.7348>\n  4024a7:\t75 17                \tjne    4024c0 <__do_global_dtors_aux+0x20>\n  4024a9:\t55                   \tpush   %rbp\n  4024aa:\t48 89 e5             \tmov    %rsp,%rbp\n  4024ad:\te8 7e ff ff ff       \tcallq  402430 <deregister_tm_clones>\n  4024b2:\tc6 05 97 7d 00 00 01 \tmovb   $0x1,0x7d97(%rip)        # 40a250 <completed.7348>\n  4024b9:\t5d                   \tpop    %rbp\n  4024ba:\tc3                   \tretq   \n  4024bb:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n  4024c0:\tc3                   \tretq   \n  4024c1:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n  4024c8:\t00 00 00 00 \n  4024cc:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "FILE **_do_global_dtors_aux() {\n  FILE **result;\n  if (!completed_7348) {\n    result = deregister_tm_clones();\n    completed_7348 = Number;\n  }\n  return result;\n}", "code_t": "FILE **_do_global_dtors_aux() {\n  FILE **result;\n  if (!completed_7348) {\n    result = deregister_tm_clones();\n    completed_7348 = Number;\n  }\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "rockchip-toybrick", "repo_name": "external-wpa_supplicant_8", "path": "rockchip-toybrick/external-wpa_supplicant_8/6c2672fab34303e61c1d7e93a0407c1791fe28b43ea8f5250feccdda94afd81e", "path_in_repo": "rockchip-toybrick/external-wpa_supplicant_8/hostapd/hostapd", "objdump": "000000000041622c <hostapd_drv_set_key>:\n  41622c:\t55                   \tpush   %rbp\n  41622d:\t48 89 e5             \tmov    %rsp,%rbp\n  416230:\t48 83 ec 30          \tsub    $0x30,%rsp\n  416234:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  416238:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  41623c:\t89 55 ec             \tmov    %edx,-0x14(%rbp)\n  41623f:\t48 89 4d e0          \tmov    %rcx,-0x20(%rbp)\n  416243:\t44 89 45 e8          \tmov    %r8d,-0x18(%rbp)\n  416247:\t44 89 4d dc          \tmov    %r9d,-0x24(%rbp)\n  41624b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41624f:\t48 8b 80 30 09 00 00 \tmov    0x930(%rax),%rax\n  416256:\t48 85 c0             \ttest   %rax,%rax\n  416259:\t74 14                \tje     41626f <hostapd_drv_set_key+0x43>\n  41625b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41625f:\t48 8b 80 30 09 00 00 \tmov    0x930(%rax),%rax\n  416266:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  41626a:\t48 85 c0             \ttest   %rax,%rax\n  41626d:\t75 07                \tjne    416276 <hostapd_drv_set_key+0x4a>\n  41626f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  416274:\teb 48                \tjmp    4162be <hostapd_drv_set_key+0x92>\n  416276:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41627a:\t48 8b 80 30 09 00 00 \tmov    0x930(%rax),%rax\n  416281:\t4c 8b 50 20          \tmov    0x20(%rax),%r10\n  416285:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  416289:\t48 8b b0 38 09 00 00 \tmov    0x938(%rax),%rsi\n  416290:\t44 8b 45 dc          \tmov    -0x24(%rbp),%r8d\n  416294:\t8b 7d e8             \tmov    -0x18(%rbp),%edi\n  416297:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  41629b:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  41629e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4162a2:\tff 75 28             \tpushq  0x28(%rbp)\n  4162a5:\tff 75 20             \tpushq  0x20(%rbp)\n  4162a8:\tff 75 18             \tpushq  0x18(%rbp)\n  4162ab:\tff 75 10             \tpushq  0x10(%rbp)\n  4162ae:\t45 89 c1             \tmov    %r8d,%r9d\n  4162b1:\t41 89 f8             \tmov    %edi,%r8d\n  4162b4:\t48 89 c7             \tmov    %rax,%rdi\n  4162b7:\t41 ff d2             \tcallq  *%r10\n  4162ba:\t48 83 c4 20          \tadd    $0x20,%rsp\n  4162be:\tc9                   \tleaveq \n  4162bf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hostapd_drv_set_key(__int64 a1, __int64 a2, unsigned int a3,\n                                       __int64 a4, unsigned int a5,\n                                       unsigned int a6, __int64 a7, __int64 a8,\n                                       __int64 a9, __int64 a10) {\n  __int64 result;\n  if (*(_QWORD *)(a2 + Number) &&\n      *(_QWORD *)(*(_QWORD *)(a2 + Number) + Number L))\n    result = (*(__int64(__fastcall **)(\n        __int64, _QWORD, _QWORD, __int64, _QWORD, _QWORD, __int64, __int64,\n        __int64, __int64))(*(_QWORD *)(a2 + Number) + Number L))(\n        a1, *(_QWORD *)(a2 + Number), a3, a4, a5, a6, a7, a8, a9, a10);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl hostapd_drv_set_key(const char *ifname, hostapd_data *hapd,\n                                wpa_alg alg, const u8 *addr, int key_idx,\n                                int set_tx, const u8 *seq, size_t seq_len,\n                                const u8 *key, size_t key_len) {\n  int result;\n  if (hapd->driver && hapd->driver->set_key)\n    result = hapd->driver->set_key(ifname, hapd->drv_priv, alg, addr, key_idx,\n                                   set_tx, seq, seq_len, key, key_len);\n  else\n    result = Number;\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "evirt", "repo_name": "qemu-gl", "path": "evirt/qemu-gl/61a30907eb0ae4c53867f4c548ff5c85e0e1e0454052f1261d96dc4b067ab7fd", "path_in_repo": "evirt/qemu-gl//sh4-linux-user/translate.o", "objdump": "0000000000001bd3 <gen_helper_movcal>:\n    1bd3:\t55                   \tpush   %rbp\n    1bd4:\t48 89 e5             \tmov    %rsp,%rbp\n    1bd7:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1bdb:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    1bde:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    1be1:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1be8:\t00 00 \n    1bea:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1bee:\t31 c0                \txor    %eax,%eax\n    1bf0:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    1bf7:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    1bfa:\t48 98                \tcltq   \n    1bfc:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1c00:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    1c03:\t48 98                \tcltq   \n    1c05:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1c09:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    1c0d:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    1c10:\t49 89 d1             \tmov    %rdx,%r9\n    1c13:\t41 b8 02 00 00 00    \tmov    $0x2,%r8d\n    1c19:\t48 c7 c1 ff ff ff ff \tmov    $0xffffffffffffffff,%rcx\n    1c20:\t89 c2                \tmov    %eax,%edx\n    1c22:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c27:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1c2c:\te8 09 eb ff ff       \tcallq  73a <tcg_gen_helperN>\n    1c31:\t90                   \tnop\n    1c32:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1c36:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1c3d:\t00 00 \n    1c3f:\t74 05                \tje     1c46 <gen_helper_movcal+0x73>\n    1c41:\te8 00 00 00 00       \tcallq  1c46 <gen_helper_movcal+0x73>\n    1c46:\tc9                   \tleaveq \n    1c47:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall gen_helper_movcal(int a1, int a2) {\n  __int64 v3[Number];\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  v3[Number] = a1;\n  v3[Number] = a2;\n  tcg_gen_helperN((__int64)&helper_movcal, Number, Number, Number, Number,\n                  (__int64)v3);\n  return __readfsqword(Number) ^ v4;\n}", "code_t": "void __cdecl gen_helper_movcal(TCGv_i32 arg1, TCGv_i32 arg2) {\n  TCGArg args[Number];\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  args[Number] = arg1;\n  args[Number] = arg2;\n  tcg_gen_helperN(&helper_movcal, Number, Number, Number, Number, args);\n}", "var": [], "body_in_train": true}, {"repo_owner": "SANL-2015", "repo_name": "SANL-2015", "path": "SANL-2015/SANL-2015/c47e87ca6d9886afe40d226cddd8c8d1c3fc36855cee1ef0095f4e484275a577", "path_in_repo": "SANL-2015/SANL-2015/SAND2015/memcached-liblock/libmemcached-1.0.2/libmemcached/libmemcachedinternal_libmemcachedinternal_la-options.o", "objdump": "0000000000000120 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st>:\n 120:\t41 57                \tpush   %r15\n 122:\t49 89 f7             \tmov    %rsi,%r15\n 125:\t41 56                \tpush   %r14\n 127:\t41 55                \tpush   %r13\n 129:\t41 bd 26 00 00 00    \tmov    $0x26,%r13d\n 12f:\t41 54                \tpush   %r12\n 131:\t49 89 fc             \tmov    %rdi,%r12\n 134:\t48 89 f7             \tmov    %rsi,%rdi\n 137:\t55                   \tpush   %rbp\n 138:\t53                   \tpush   %rbx\n 139:\t48 bb 01 80 60 01 01 \tmovabs $0x101608001,%rbx\n 140:\t00 00 00 \n 143:\t48 81 ec 08 20 00 00 \tsub    $0x2008,%rsp\n 14a:\te8 00 00 00 00       \tcallq  14f <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x2f>\n 14f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 154:\t49 89 e6             \tmov    %rsp,%r14\n 157:\t48 89 c7             \tmov    %rax,%rdi\n 15a:\te8 00 00 00 00       \tcallq  15f <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x3f>\n 15f:\t48 89 c5             \tmov    %rax,%rbp\n 162:\t48 85 c0             \ttest   %rax,%rax\n 165:\t0f 84 b5 00 00 00    \tje     220 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x100>\n 16b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n 170:\t48 89 ea             \tmov    %rbp,%rdx\n 173:\tbe 00 20 00 00       \tmov    $0x2000,%esi\n 178:\t4c 89 f7             \tmov    %r14,%rdi\n 17b:\te8 00 00 00 00       \tcallq  180 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x60>\n 180:\t48 85 c0             \ttest   %rax,%rax\n 183:\t74 5f                \tje     1e4 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0xc4>\n 185:\t4d 89 f0             \tmov    %r14,%r8\n 188:\t41 8b 08             \tmov    (%r8),%ecx\n 18b:\t49 83 c0 04          \tadd    $0x4,%r8\n 18f:\t8d 91 ff fe fe fe    \tlea    -0x1010101(%rcx),%edx\n 195:\tf7 d1                \tnot    %ecx\n 197:\t21 ca                \tand    %ecx,%edx\n 199:\t81 e2 80 80 80 80    \tand    $0x80808080,%edx\n 19f:\t74 e7                \tje     188 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x68>\n 1a1:\t89 d0                \tmov    %edx,%eax\n 1a3:\tc1 e8 10             \tshr    $0x10,%eax\n 1a6:\tf7 c2 80 80 00 00    \ttest   $0x8080,%edx\n 1ac:\t0f 44 d0             \tcmove  %eax,%edx\n 1af:\t49 8d 40 02          \tlea    0x2(%r8),%rax\n 1b3:\t4c 0f 44 c0          \tcmove  %rax,%r8\n 1b7:\t89 d0                \tmov    %edx,%eax\n 1b9:\t00 d0                \tadd    %dl,%al\n 1bb:\t49 83 d8 03          \tsbb    $0x3,%r8\n 1bf:\t4d 29 f0             \tsub    %r14,%r8\n 1c2:\t49 83 f8 01          \tcmp    $0x1,%r8\n 1c6:\t75 06                \tjne    1ce <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0xae>\n 1c8:\t80 3c 24 0a          \tcmpb   $0xa,(%rsp)\n 1cc:\t74 a2                \tje     170 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x50>\n 1ce:\t4c 89 c2             \tmov    %r8,%rdx\n 1d1:\t4c 89 f6             \tmov    %r14,%rsi\n 1d4:\t4c 89 e7             \tmov    %r12,%rdi\n 1d7:\te8 00 00 00 00       \tcallq  1dc <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0xbc>\n 1dc:\t41 89 c5             \tmov    %eax,%r13d\n 1df:\t83 f8 20             \tcmp    $0x20,%eax\n 1e2:\t76 24                \tjbe    208 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0xe8>\n 1e4:\t48 89 ef             \tmov    %rbp,%rdi\n 1e7:\te8 00 00 00 00       \tcallq  1ec <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0xcc>\n 1ec:\t48 81 c4 08 20 00 00 \tadd    $0x2008,%rsp\n 1f3:\t44 89 e8             \tmov    %r13d,%eax\n 1f6:\t5b                   \tpop    %rbx\n 1f7:\t5d                   \tpop    %rbp\n 1f8:\t41 5c                \tpop    %r12\n 1fa:\t41 5d                \tpop    %r13\n 1fc:\t41 5e                \tpop    %r14\n 1fe:\t41 5f                \tpop    %r15\n 200:\tc3                   \tretq   \n 201:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n 208:\t48 0f a3 c3          \tbt     %rax,%rbx\n 20c:\t0f 82 5e ff ff ff    \tjb     170 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x50>\n 212:\t83 f8 17             \tcmp    $0x17,%eax\n 215:\t0f 84 55 ff ff ff    \tje     170 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x50>\n 21b:\teb c7                \tjmp    1e4 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0xc4>\n 21d:\t0f 1f 00             \tnopl   (%rax)\n 220:\t4c 89 ff             \tmov    %r15,%rdi\n 223:\te8 00 00 00 00       \tcallq  228 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x108>\n 228:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n 22d:\t48 89 04 24          \tmov    %rax,(%rsp)\n 231:\te8 00 00 00 00       \tcallq  236 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x116>\n 236:\t4c 89 f1             \tmov    %r14,%rcx\n 239:\tba 00 00 00 00       \tmov    $0x0,%edx\n 23e:\t4c 89 e7             \tmov    %r12,%rdi\n 241:\t8b 30                \tmov    (%rax),%esi\n 243:\te8 00 00 00 00       \tcallq  248 <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0x128>\n 248:\t41 89 c5             \tmov    %eax,%r13d\n 24b:\teb 9f                \tjmp    1ec <_ZL19_parse_file_optionsR12memcached_stP18memcached_array_st+0xcc>\n 24d:\t0f 1f 00             \tnopl   (%rax)", "code_s": "__int64 __fastcall _parse_file_options(__int64 a1, __int64 a2) {\n  unsigned int v2;\n  __int64 v3;\n  const char *v4;\n  FILE *v5;\n  char *v6;\n  __int64 v7;\n  __int64 v9;\n  __int64 v10;\n  int *v11;\n  __int64 <span class=\"supfact\">v12</span>[Number];\n  v2 = Number;\n  v3 = Number;\n  v4 = (const char *)memcached_array_string(a2);\n  v5 = fopen(v4, String);\n  if (v5) {\n    while (fgets((char *)<span class=\"supfact\">v12</span>, Number, v5)) {\n      v6 = (char *)<span class=\"supfact\">v12</span> +\n           strlen((const char *)<span class=\"supfact\">v12</span>);\n      if (v6 - (char *)<span class=\"supfact\">v12</span> != Number ||\n          LOBYTE(<span class=\"supfact\">v12</span>[Number]) != Number) {\n        v7 = memcached_parse_configuration(a1, (__int64)<span class=\"supfact\">v12</span>,\n                                           v6 - (char *)<span class=\"supfact\">v12</span>);\n        v2 = v7;\n        if ((unsigned int)v7 > Number ||\n            !_bittest64(&v3, v7) && (_DWORD)v7 != Number)\n          break;\n      }\n    }\n    fclose(v5);\n  } else {\n    v9 = memcached_array_to_string(a2);\n    <span class=\"supfact\">v12</span>[Number] = v10;\n    <span class=\"supfact\">v12</span>[Number] = v9;\n    v11 = _errno_location();\n    v2 = memcached_set_errno(a1, (unsigned int)*v11, String,\n                             <span class=\"supfact\">v12</span>);\n  }\n  return v2;\n}", "code_t": "memcached_return_t __fastcall _parse_file_options(\n    memcached_st_0 *self, memcached_array_st_0 *real_name) {\n  memcached_return_t v2;\n  __int64 v3;\n  const char *v4;\n  FILE *v5;\n  char *v6;\n  __int64 v7;\n  const char *v9;\n  size_t v10;\n  int *v11;\n  memcached_string_t_0 <span class=\"supfact\">error_message</span>;\n  v2 = MEMCACHED_INVALID_ARGUMENTS;\n  v3 = Number;\n  v4 = (const char *)memcached_array_string(real_name);\n  v5 = fopen(v4, String);\n  if (v5) {\n    while (fgets((char *)&<span class=\"supfact\">error_message</span>, Number, v5)) {\n      v6 = (char *)&<span class=\"supfact\">error_message</span> +\n           strlen((const char *)&<span class=\"supfact\">error_message</span>);\n      if (v6 - (char *)&<span class=\"supfact\">error_message</span> != Number ||\n          LOBYTE(<span class=\"supfact\">error_message</span>.c_str) != Number) {\n        v7 = memcached_parse_configuration(\n            self, (const char *)&<span class=\"supfact\">error_message</span>,\n            v6 - (char *)&<span class=\"supfact\">error_message</span>);\n        v2 = (int)v7;\n        if ((unsigned int)v7 > Number ||\n            !_bittest64(&v3, v7) && (_DWORD)v7 != Number)\n          break;\n      }\n    }\n    fclose(v5);\n  } else {\n    v9 = (const char *)memcached_array_to_string(real_name);\n    <span class=\"supfact\">error_message</span>.size = v10;\n    <span class=\"supfact\">error_message</span>.c_str = v9;\n    v11 = _errno_location();\n    v2 = (unsigned int)memcached_set_errno(self, *v11, String,\n                                           &<span class=\"supfact\">error_message</span>);\n  }\n  return v2;\n}", "var": [{"name": "v12", "type": "__unk__", "pred_name": "self", "ref_name": "error_message", "ref_type": "struct memcached_string_t_0 { const char * c_str; size_t size; }"}], "body_in_train": false}, {"repo_owner": "codechix", "repo_name": "mul-OFconnect", "path": "codechix/mul-OFconnect/3b307de64dc56fbea8f5b23522fdbfd1b9cf8761641f9f3adcda9301ea0f084b", "path_in_repo": "codechix/mul-OFconnect/common-libs/3rd-party/quagga-lib/prefix.o", "objdump": "00000000000007a1 <prefix2str>:\n 7a1:\t55                   \tpush   %rbp\n 7a2:\t48 89 e5             \tmov    %rsp,%rbp\n 7a5:\t48 81 ec 20 20 00 00 \tsub    $0x2020,%rsp\n 7ac:\t48 89 bd f8 df ff ff \tmov    %rdi,-0x2008(%rbp)\n 7b3:\t48 89 b5 f0 df ff ff \tmov    %rsi,-0x2010(%rbp)\n 7ba:\t89 95 ec df ff ff    \tmov    %edx,-0x2014(%rbp)\n 7c0:\t48 8b 85 f8 df ff ff \tmov    -0x2008(%rbp),%rax\n 7c7:\t48 8d 70 08          \tlea    0x8(%rax),%rsi\n 7cb:\t48 8b 85 f8 df ff ff \tmov    -0x2008(%rbp),%rax\n 7d2:\t0f b6 00             \tmovzbl (%rax),%eax\n 7d5:\t0f b6 c0             \tmovzbl %al,%eax\n 7d8:\t48 8d 95 00 e0 ff ff \tlea    -0x2000(%rbp),%rdx\n 7df:\tb9 00 20 00 00       \tmov    $0x2000,%ecx\n 7e4:\t89 c7                \tmov    %eax,%edi\n 7e6:\te8 00 00 00 00       \tcallq  7eb <prefix2str+0x4a>\n 7eb:\t48 8b 85 f8 df ff ff \tmov    -0x2008(%rbp),%rax\n 7f2:\t0f b6 40 01          \tmovzbl 0x1(%rax),%eax\n 7f6:\t0f b6 c8             \tmovzbl %al,%ecx\n 7f9:\t8b 85 ec df ff ff    \tmov    -0x2014(%rbp),%eax\n 7ff:\t48 63 f0             \tmovslq %eax,%rsi\n 802:\t48 8d 95 00 e0 ff ff \tlea    -0x2000(%rbp),%rdx\n 809:\t48 8b 85 f0 df ff ff \tmov    -0x2010(%rbp),%rax\n 810:\t41 89 c8             \tmov    %ecx,%r8d\n 813:\t48 89 d1             \tmov    %rdx,%rcx\n 816:\tba 00 00 00 00       \tmov    $0x0,%edx\n 81b:\t48 89 c7             \tmov    %rax,%rdi\n 81e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 823:\te8 00 00 00 00       \tcallq  828 <prefix2str+0x87>\n 828:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 82d:\tc9                   \tleaveq \n 82e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall prefix2str(unsigned __int8 *a1, char *a2, int a3) {\n  char buf[Number];\n  inet_ntop(*a1, a1 + Number, buf, Number);\n  snprintf(a2, a3, String, buf, a1[Number]);\n  return Number L;\n}", "code_t": "int __cdecl prefix2str(const prefix *p, char *str, int size) {\n  char buf[Number];\n  inet_ntop(p->family, &p->u, buf, Number);\n  snprintf(str, size, String, buf, p->prefixlen);\n  return Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "themasterofunderground", "repo_name": "limbo-android", "path": "themasterofunderground/limbo-android/778436279b4441751614064743c737f4d8d073a981c9366e7cd7e2df0189d25f", "path_in_repo": "themasterofunderground/limbo-android/jni/qemu/roms/seabios/out/tools/kconfig/conf", "objdump": "000000000040ef5f <sym_string_within_range>:\n  40ef5f:\t55                   \tpush   %rbp\n  40ef60:\t48 89 e5             \tmov    %rsp,%rbp\n  40ef63:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40ef67:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40ef6b:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40ef6f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ef73:\t8b 40 10             \tmov    0x10(%rax),%eax\n  40ef76:\t83 f8 05             \tcmp    $0x5,%eax\n  40ef79:\t74 37                \tje     40efb2 <sym_string_within_range+0x53>\n  40ef7b:\t83 f8 05             \tcmp    $0x5,%eax\n  40ef7e:\t0f 87 fd 01 00 00    \tja     40f181 <sym_string_within_range+0x222>\n  40ef84:\t83 f8 04             \tcmp    $0x4,%eax\n  40ef87:\t0f 84 eb 00 00 00    \tje     40f078 <sym_string_within_range+0x119>\n  40ef8d:\t83 f8 04             \tcmp    $0x4,%eax\n  40ef90:\t0f 87 eb 01 00 00    \tja     40f181 <sym_string_within_range+0x222>\n  40ef96:\t83 f8 02             \tcmp    $0x2,%eax\n  40ef99:\t77 0d                \tja     40efa8 <sym_string_within_range+0x49>\n  40ef9b:\t85 c0                \ttest   %eax,%eax\n  40ef9d:\t0f 85 80 01 00 00    \tjne    40f123 <sym_string_within_range+0x1c4>\n  40efa3:\te9 d9 01 00 00       \tjmpq   40f181 <sym_string_within_range+0x222>\n  40efa8:\t83 f8 03             \tcmp    $0x3,%eax\n  40efab:\t74 1d                \tje     40efca <sym_string_within_range+0x6b>\n  40efad:\te9 cf 01 00 00       \tjmpq   40f181 <sym_string_within_range+0x222>\n  40efb2:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40efb6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40efba:\t48 89 d6             \tmov    %rdx,%rsi\n  40efbd:\t48 89 c7             \tmov    %rax,%rdi\n  40efc0:\te8 a9 fd ff ff       \tcallq  40ed6e <sym_string_valid>\n  40efc5:\te9 bc 01 00 00       \tjmpq   40f186 <sym_string_within_range+0x227>\n  40efca:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40efce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40efd2:\t48 89 d6             \tmov    %rdx,%rsi\n  40efd5:\t48 89 c7             \tmov    %rax,%rdi\n  40efd8:\te8 91 fd ff ff       \tcallq  40ed6e <sym_string_valid>\n  40efdd:\t83 f0 01             \txor    $0x1,%eax\n  40efe0:\t84 c0                \ttest   %al,%al\n  40efe2:\t74 0a                \tje     40efee <sym_string_within_range+0x8f>\n  40efe4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40efe9:\te9 98 01 00 00       \tjmpq   40f186 <sym_string_within_range+0x227>\n  40efee:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40eff2:\t48 89 c7             \tmov    %rax,%rdi\n  40eff5:\te8 32 ef ff ff       \tcallq  40df2c <sym_get_range_prop>\n  40effa:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40effe:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40f003:\t75 0a                \tjne    40f00f <sym_string_within_range+0xb0>\n  40f005:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40f00a:\te9 77 01 00 00       \tjmpq   40f186 <sym_string_within_range+0x227>\n  40f00f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40f013:\tba 0a 00 00 00       \tmov    $0xa,%edx\n  40f018:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40f01d:\t48 89 c7             \tmov    %rax,%rdi\n  40f020:\te8 7b 32 ff ff       \tcallq  4022a0 <strtol@plt>\n  40f025:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40f028:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40f02c:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40f030:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40f034:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n  40f039:\t48 89 c7             \tmov    %rax,%rdi\n  40f03c:\te8 52 ef ff ff       \tcallq  40df93 <sym_get_range_val>\n  40f041:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n  40f044:\t7c 25                \tjl     40f06b <sym_string_within_range+0x10c>\n  40f046:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40f04a:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40f04e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40f052:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n  40f057:\t48 89 c7             \tmov    %rax,%rdi\n  40f05a:\te8 34 ef ff ff       \tcallq  40df93 <sym_get_range_val>\n  40f05f:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n  40f062:\t7f 07                \tjg     40f06b <sym_string_within_range+0x10c>\n  40f064:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40f069:\teb 05                \tjmp    40f070 <sym_string_within_range+0x111>\n  40f06b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40f070:\t83 e0 01             \tand    $0x1,%eax\n  40f073:\te9 0e 01 00 00       \tjmpq   40f186 <sym_string_within_range+0x227>\n  40f078:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40f07c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40f080:\t48 89 d6             \tmov    %rdx,%rsi\n  40f083:\t48 89 c7             \tmov    %rax,%rdi\n  40f086:\te8 e3 fc ff ff       \tcallq  40ed6e <sym_string_valid>\n  40f08b:\t83 f0 01             \txor    $0x1,%eax\n  40f08e:\t84 c0                \ttest   %al,%al\n  40f090:\t74 0a                \tje     40f09c <sym_string_within_range+0x13d>\n  40f092:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40f097:\te9 ea 00 00 00       \tjmpq   40f186 <sym_string_within_range+0x227>\n  40f09c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40f0a0:\t48 89 c7             \tmov    %rax,%rdi\n  40f0a3:\te8 84 ee ff ff       \tcallq  40df2c <sym_get_range_prop>\n  40f0a8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40f0ac:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40f0b1:\t75 0a                \tjne    40f0bd <sym_string_within_range+0x15e>\n  40f0b3:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40f0b8:\te9 c9 00 00 00       \tjmpq   40f186 <sym_string_within_range+0x227>\n  40f0bd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40f0c1:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40f0c6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40f0cb:\t48 89 c7             \tmov    %rax,%rdi\n  40f0ce:\te8 cd 31 ff ff       \tcallq  4022a0 <strtol@plt>\n  40f0d3:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40f0d6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40f0da:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40f0de:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40f0e2:\tbe 10 00 00 00       \tmov    $0x10,%esi\n  40f0e7:\t48 89 c7             \tmov    %rax,%rdi\n  40f0ea:\te8 a4 ee ff ff       \tcallq  40df93 <sym_get_range_val>\n  40f0ef:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n  40f0f2:\t7c 25                \tjl     40f119 <sym_string_within_range+0x1ba>\n  40f0f4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40f0f8:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40f0fc:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40f100:\tbe 10 00 00 00       \tmov    $0x10,%esi\n  40f105:\t48 89 c7             \tmov    %rax,%rdi\n  40f108:\te8 86 ee ff ff       \tcallq  40df93 <sym_get_range_val>\n  40f10d:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n  40f110:\t7f 07                \tjg     40f119 <sym_string_within_range+0x1ba>\n  40f112:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40f117:\teb 05                \tjmp    40f11e <sym_string_within_range+0x1bf>\n  40f119:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40f11e:\t83 e0 01             \tand    $0x1,%eax\n  40f121:\teb 63                \tjmp    40f186 <sym_string_within_range+0x227>\n  40f123:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40f127:\t0f b6 00             \tmovzbl (%rax),%eax\n  40f12a:\t0f be c0             \tmovsbl %al,%eax\n  40f12d:\t83 e8 4d             \tsub    $0x4d,%eax\n  40f130:\t83 f8 2c             \tcmp    $0x2c,%eax\n  40f133:\t77 45                \tja     40f17a <sym_string_within_range+0x21b>\n  40f135:\t89 c0                \tmov    %eax,%eax\n  40f137:\t48 8b 04 c5 d8 63 41 \tmov    0x4163d8(,%rax,8),%rax\n  40f13e:\t00 \n  40f13f:\tff e0                \tjmpq   *%rax\n  40f141:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40f145:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  40f14a:\t48 89 c7             \tmov    %rax,%rdi\n  40f14d:\te8 92 f9 ff ff       \tcallq  40eae4 <sym_tristate_within_range>\n  40f152:\teb 32                \tjmp    40f186 <sym_string_within_range+0x227>\n  40f154:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40f158:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40f15d:\t48 89 c7             \tmov    %rax,%rdi\n  40f160:\te8 7f f9 ff ff       \tcallq  40eae4 <sym_tristate_within_range>\n  40f165:\teb 1f                \tjmp    40f186 <sym_string_within_range+0x227>\n  40f167:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40f16b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40f170:\t48 89 c7             \tmov    %rax,%rdi\n  40f173:\te8 6c f9 ff ff       \tcallq  40eae4 <sym_tristate_within_range>\n  40f178:\teb 0c                \tjmp    40f186 <sym_string_within_range+0x227>\n  40f17a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40f17f:\teb 05                \tjmp    40f186 <sym_string_within_range+0x227>\n  40f181:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40f186:\tc9                   \tleaveq \n  40f187:\tc3                   \tretq   ", "code_s": "bool __fastcall sym_string_within_range(__int64 a1, char *a2) {\n  unsigned int v2;\n  bool result;\n  bool v4;\n  bool v5;\n  int v6;\n  int v7;\n  __int64 *v8;\n  __int64 *v9;\n  v2 = *(_DWORD *)(a1 + Number);\n  if (v2 == Number)\n    return sym_string_valid(a1, a2);\n  if (v2 > Number)\n    return Number;\n  if (v2 == Number) {\n    if (!sym_string_valid(a1, a2)) {\n      result = Number;\n    } else {\n      v9 = sym_get_range_prop(a1);\n      if (v9) {\n        v7 = strtol(a2, Number L, Number);\n        v5 = v7 >= (int)sym_get_range_val(*(_QWORD *)(v9[Number] + Number),\n                                          Number) &&\n             v7 <= (int)sym_get_range_val(*(_QWORD *)(v9[Number] + Number),\n                                          Number);\n        result = v5;\n      } else {\n        result = Number;\n      }\n    }\n  } else if (v2 > Number) {\n    if (!sym_string_valid(a1, a2)) {\n      result = Number;\n    } else {\n      v8 = sym_get_range_prop(a1);\n      if (v8) {\n        v6 = strtol(a2, Number L, Number);\n        v4 = v6 >= (int)sym_get_range_val(*(_QWORD *)(v8[Number] + Number),\n                                          Number) &&\n             v6 <= (int)sym_get_range_val(*(_QWORD *)(v8[Number] + Number),\n                                          Number);\n        result = v4;\n      } else {\n        result = Number;\n      }\n    }\n  } else {\n    if (!v2)\n      return Number;\n    switch (*a2) {\n    case String:\n    case String:\n      result = sym_tristate_within_range(a1, Number);\n      break;\n    case String:\n    case String:\n      result = sym_tristate_within_range(a1, Number);\n      break;\n    case String:\n    case String:\n      result = sym_tristate_within_range(a1, Number);\n      break;\n    default:\n      result = Number;\n      break;\n    }\n  }\n  return result;\n}", "code_t": "bool __cdecl sym_string_within_range(symbol *sym, const char *str) {\n  symbol_type v2;\n  bool result;\n  bool v4;\n  bool v5;\n  int val;\n  int vala;\n  property *prop;\n  property *propa;\n  v2 = sym->type;\n  if (v2 == S_STRING)\n    return sym_string_valid(sym, str);\n  if ((unsigned int)v2 > S_STRING)\n    return Number;\n  if (v2 == S_HEX) {\n    if (!sym_string_valid(sym, str)) {\n      result = Number;\n    } else {\n      propa = sym_get_range_prop(sym);\n      if (propa) {\n        vala = strtol(str, Number L, Number);\n        v5 = vala >= sym_get_range_val(propa->expr->left.sym, Number) &&\n             vala <= sym_get_range_val(propa->expr->right.sym, Number);\n        result = v5;\n      } else {\n        result = Number;\n      }\n    }\n  } else if ((unsigned int)v2 > S_TRISTATE) {\n    if (!sym_string_valid(sym, str)) {\n      result = Number;\n    } else {\n      prop = sym_get_range_prop(sym);\n      if (prop) {\n        val = strtol(str, Number L, Number);\n        v4 = val >= sym_get_range_val(prop->expr->left.sym, Number) &&\n             val <= sym_get_range_val(prop->expr->right.sym, Number);\n        result = v4;\n      } else {\n        result = Number;\n      }\n    }\n  } else {\n    if (v2 == S_UNKNOWN)\n      return Number;\n    switch (*str) {\n    case String:\n    case String:\n      result = sym_tristate_within_range(sym, mod);\n      break;\n    case String:\n    case String:\n      result = sym_tristate_within_range(sym, no);\n      break;\n    case String:\n    case String:\n      result = sym_tristate_within_range(sym, yes);\n      break;\n    default:\n      result = Number;\n      break;\n    }\n  }\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "Rodney-McAndrew", "repo_name": "OpenSGN-Reboot", "path": "Rodney-McAndrew/OpenSGN-Reboot/5c2f824b0a7ce557202103815a25f163229079641a23226b4304de131778e16d", "path_in_repo": "Rodney-McAndrew/OpenSGN-Reboot/tools/perf/builtin-lock.o", "objdump": "00000000000007b1 <lock_stat_key_wait_time_min>:\n     7b1:\t55                   \tpush   %rbp\n     7b2:\t48 89 e5             \tmov    %rsp,%rbp\n     7b5:\t48 83 ec 30          \tsub    $0x30,%rsp\n     7b9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     7bd:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     7c1:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     7c8:\t00 00 \n     7ca:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     7ce:\t31 c0                \txor    %eax,%eax\n     7d0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7d4:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n     7d8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     7dc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     7e0:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n     7e4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     7e8:\t48 83 7d e8 ff       \tcmpq   $0xffffffffffffffff,-0x18(%rbp)\n     7ed:\t75 08                \tjne    7f7 <lock_stat_key_wait_time_min+0x46>\n     7ef:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     7f6:\t00 \n     7f7:\t48 83 7d f0 ff       \tcmpq   $0xffffffffffffffff,-0x10(%rbp)\n     7fc:\t75 08                \tjne    806 <lock_stat_key_wait_time_min+0x55>\n     7fe:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     805:\t00 \n     806:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     80a:\t48 3b 45 f0          \tcmp    -0x10(%rbp),%rax\n     80e:\t0f 97 c0             \tseta   %al\n     811:\t0f b6 c0             \tmovzbl %al,%eax\n     814:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     818:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n     81f:\t00 00 \n     821:\t74 05                \tje     828 <lock_stat_key_wait_time_min+0x77>\n     823:\te8 00 00 00 00       \tcallq  828 <lock_stat_key_wait_time_min+0x77>\n     828:\tc9                   \tleaveq \n     829:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall lock_stat_key_wait_time_min(__int64 a1, __int64 a2) {\n  unsigned __int64 v3;\n  unsigned __int64 v4;\n  v3 = *(_QWORD *)(a1 + Number);\n  v4 = *(_QWORD *)(a2 + Number);\n  if (v3 == Number)\n    v3 = Number L;\n  if (v4 == Number)\n    v4 = Number L;\n  return v3 > v4;\n}", "code_t": "int __cdecl lock_stat_key_wait_time_min(lock_stat *one, lock_stat *two) {\n  u64 s1;\n  u64 s2;\n  s1 = one->wait_time_min;\n  s2 = two->wait_time_min;\n  if (s1 == Number)\n    s1 = Number L;\n  if (s2 == Number)\n    s2 = Number L;\n  return s1 > s2;\n}", "var": [], "body_in_train": true}, {"repo_owner": "antmicro", "repo_name": "abc-lib", "path": "antmicro/abc-lib/00ab4feaff7d05360b07839df0b8755c831c38dcb9ea9a47ee11d9f3cd1ef0ce", "path_in_repo": "antmicro/abc-lib//src/opt/dau/dauTree.o", "objdump": "00000000000005ea <Vec_IntEntry>:\n     5ea:\t55                   \tpush   %rbp\n     5eb:\t48 89 e5             \tmov    %rsp,%rbp\n     5ee:\t48 83 ec 10          \tsub    $0x10,%rsp\n     5f2:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     5f6:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n     5f9:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     5fd:\t78 0c                \tjs     60b <Vec_IntEntry+0x21>\n     5ff:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     603:\t8b 40 04             \tmov    0x4(%rax),%eax\n     606:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n     609:\t7c 19                \tjl     624 <Vec_IntEntry+0x3a>\n     60b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     610:\tba 9e 01 00 00       \tmov    $0x19e,%edx\n     615:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     61a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     61f:\te8 00 00 00 00       \tcallq  624 <Vec_IntEntry+0x3a>\n     624:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     628:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     62c:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n     62f:\t48 63 d2             \tmovslq %edx,%rdx\n     632:\t48 c1 e2 02          \tshl    $0x2,%rdx\n     636:\t48 01 d0             \tadd    %rdx,%rax\n     639:\t8b 00                \tmov    (%rax),%eax\n     63b:\tc9                   \tleaveq \n     63c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Vec_IntEntry(__int64 a1, int a2) {\n  if (a2 < Number || a2 >= *(_DWORD *)(a1 + Number))\n    _assert_fail(String, String, Number, String);\n  return *(unsigned int *)(Number L * a2 + *(_QWORD *)(a1 + Number));\n}", "code_t": "int __cdecl Vec_IntEntry(Vec_Int_t *p, int i) {\n  if (i < Number || i >= p->nSize)\n    _assert_fail(String, String, Number, String);\n  return p->pArray[i];\n}", "var": [], "body_in_train": true}, {"repo_owner": "kjkasi", "repo_name": "030005", "path": "kjkasi/030005/42e3536ccbc1b695fb11b7d977771ee12fe1f447e7c6cf84d9004fd03c1822ae", "path_in_repo": "kjkasi/030005/ngos/JWNR2000_4EMRUS/SW/opensource/openssl/demos/eay/loadrsa", "objdump": "0000000000410551 <print_leak>:\n  410551:\t48 81 ec 48 04 00 00 \tsub    $0x448,%rsp\n  410558:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n  41055d:\t48 89 34 24          \tmov    %rsi,(%rsp)\n  410561:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  410566:\t48 89 84 24 38 04 00 \tmov    %rax,0x438(%rsp)\n  41056d:\t00 \n  41056e:\t48 c7 84 24 20 04 00 \tmovq   $0x0,0x420(%rsp)\n  410575:\t00 00 00 00 00 \n  41057a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41057f:\t48 8b 10             \tmov    (%rax),%rdx\n  410582:\t48 8b 04 24          \tmov    (%rsp),%rax\n  410586:\t48 8b 00             \tmov    (%rax),%rax\n  410589:\t48 39 c2             \tcmp    %rax,%rdx\n  41058c:\t0f 84 5e 04 00 00    \tje     4109f0 <print_leak+0x49f>\n  410592:\t48 8b 05 a7 aa 04 00 \tmov    0x4aaa7(%rip),%rax        # 45b040 <options>\n  410599:\t83 e0 01             \tand    $0x1,%eax\n  41059c:\t48 85 c0             \ttest   %rax,%rax\n  41059f:\t0f 84 94 00 00 00    \tje     410639 <print_leak+0xe8>\n  4105a5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4105aa:\t48 83 c0 30          \tadd    $0x30,%rax\n  4105ae:\t48 89 c7             \tmov    %rax,%rdi\n  4105b1:\te8 7a 0a ff ff       \tcallq  401030 <localtime@plt>\n  4105b6:\t48 89 84 24 20 04 00 \tmov    %rax,0x420(%rsp)\n  4105bd:\t00 \n  4105be:\t48 8b 84 24 20 04 00 \tmov    0x420(%rsp),%rax\n  4105c5:\t00 \n  4105c6:\t44 8b 00             \tmov    (%rax),%r8d\n  4105c9:\t48 8b 84 24 20 04 00 \tmov    0x420(%rsp),%rax\n  4105d0:\t00 \n  4105d1:\t8b 78 04             \tmov    0x4(%rax),%edi\n  4105d4:\t48 8b 84 24 20 04 00 \tmov    0x420(%rsp),%rax\n  4105db:\t00 \n  4105dc:\t8b 50 08             \tmov    0x8(%rax),%edx\n  4105df:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  4105e4:\t48 8b 8c 24 38 04 00 \tmov    0x438(%rsp),%rcx\n  4105eb:\t00 \n  4105ec:\t48 29 c1             \tsub    %rax,%rcx\n  4105ef:\t48 89 c8             \tmov    %rcx,%rax\n  4105f2:\tb9 00 04 00 00       \tmov    $0x400,%ecx\n  4105f7:\t48 89 ce             \tmov    %rcx,%rsi\n  4105fa:\t48 29 c6             \tsub    %rax,%rsi\n  4105fd:\t48 8b 84 24 38 04 00 \tmov    0x438(%rsp),%rax\n  410604:\t00 \n  410605:\t45 89 c1             \tmov    %r8d,%r9d\n  410608:\t41 89 f8             \tmov    %edi,%r8d\n  41060b:\t89 d1                \tmov    %edx,%ecx\n  41060d:\t48 8d 15 b6 11 03 00 \tlea    0x311b6(%rip),%rdx        # 4417ca <_IO_stdin_used+0x7ca>\n  410614:\t48 89 c7             \tmov    %rax,%rdi\n  410617:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41061c:\te8 84 df ff ff       \tcallq  40e5a5 <BIO_snprintf>\n  410621:\t48 8b 84 24 38 04 00 \tmov    0x438(%rsp),%rax\n  410628:\t00 \n  410629:\t48 89 c7             \tmov    %rax,%rdi\n  41062c:\te8 9f 0a ff ff       \tcallq  4010d0 <strlen@plt>\n  410631:\t48 01 84 24 38 04 00 \tadd    %rax,0x438(%rsp)\n  410638:\t00 \n  410639:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41063e:\t44 8b 40 18          \tmov    0x18(%rax),%r8d\n  410642:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410647:\t48 8b 78 10          \tmov    0x10(%rax),%rdi\n  41064b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410650:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  410654:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  410659:\t48 8b 8c 24 38 04 00 \tmov    0x438(%rsp),%rcx\n  410660:\t00 \n  410661:\t48 29 c1             \tsub    %rax,%rcx\n  410664:\t48 89 c8             \tmov    %rcx,%rax\n  410667:\tb9 00 04 00 00       \tmov    $0x400,%ecx\n  41066c:\t48 89 ce             \tmov    %rcx,%rsi\n  41066f:\t48 29 c6             \tsub    %rax,%rsi\n  410672:\t48 8b 84 24 38 04 00 \tmov    0x438(%rsp),%rax\n  410679:\t00 \n  41067a:\t45 89 c1             \tmov    %r8d,%r9d\n  41067d:\t49 89 f8             \tmov    %rdi,%r8\n  410680:\t48 89 d1             \tmov    %rdx,%rcx\n  410683:\t48 8d 15 52 11 03 00 \tlea    0x31152(%rip),%rdx        # 4417dc <_IO_stdin_used+0x7dc>\n  41068a:\t48 89 c7             \tmov    %rax,%rdi\n  41068d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  410692:\te8 0e df ff ff       \tcallq  40e5a5 <BIO_snprintf>\n  410697:\t48 8b 84 24 38 04 00 \tmov    0x438(%rsp),%rax\n  41069e:\t00 \n  41069f:\t48 89 c7             \tmov    %rax,%rdi\n  4106a2:\te8 29 0a ff ff       \tcallq  4010d0 <strlen@plt>\n  4106a7:\t48 01 84 24 38 04 00 \tadd    %rax,0x438(%rsp)\n  4106ae:\t00 \n  4106af:\t48 8b 05 8a a9 04 00 \tmov    0x4a98a(%rip),%rax        # 45b040 <options>\n  4106b6:\t83 e0 02             \tand    $0x2,%eax\n  4106b9:\t48 85 c0             \ttest   %rax,%rax\n  4106bc:\t74 5e                \tje     41071c <print_leak+0x1cb>\n  4106be:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4106c3:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n  4106c7:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  4106cc:\t48 8b 8c 24 38 04 00 \tmov    0x438(%rsp),%rcx\n  4106d3:\t00 \n  4106d4:\t48 29 c1             \tsub    %rax,%rcx\n  4106d7:\t48 89 c8             \tmov    %rcx,%rax\n  4106da:\tb9 00 04 00 00       \tmov    $0x400,%ecx\n  4106df:\t48 89 ce             \tmov    %rcx,%rsi\n  4106e2:\t48 29 c6             \tsub    %rax,%rsi\n  4106e5:\t48 8b 84 24 38 04 00 \tmov    0x438(%rsp),%rax\n  4106ec:\t00 \n  4106ed:\t48 89 d1             \tmov    %rdx,%rcx\n  4106f0:\t48 8d 15 fd 10 03 00 \tlea    0x310fd(%rip),%rdx        # 4417f4 <_IO_stdin_used+0x7f4>\n  4106f7:\t48 89 c7             \tmov    %rax,%rdi\n  4106fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4106ff:\te8 a1 de ff ff       \tcallq  40e5a5 <BIO_snprintf>\n  410704:\t48 8b 84 24 38 04 00 \tmov    0x438(%rsp),%rax\n  41070b:\t00 \n  41070c:\t48 89 c7             \tmov    %rax,%rdi\n  41070f:\te8 bc 09 ff ff       \tcallq  4010d0 <strlen@plt>\n  410714:\t48 01 84 24 38 04 00 \tadd    %rax,0x438(%rsp)\n  41071b:\t00 \n  41071c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410721:\t48 8b 00             \tmov    (%rax),%rax\n  410724:\t48 89 c7             \tmov    %rax,%rdi\n  410727:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41072c:\t8b 50 08             \tmov    0x8(%rax),%edx\n  41072f:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  410734:\t48 8b 8c 24 38 04 00 \tmov    0x438(%rsp),%rcx\n  41073b:\t00 \n  41073c:\t48 29 c1             \tsub    %rax,%rcx\n  41073f:\t48 89 c8             \tmov    %rcx,%rax\n  410742:\tb9 00 04 00 00       \tmov    $0x400,%ecx\n  410747:\t48 89 ce             \tmov    %rcx,%rsi\n  41074a:\t48 29 c6             \tsub    %rax,%rsi\n  41074d:\t48 8b 84 24 38 04 00 \tmov    0x438(%rsp),%rax\n  410754:\t00 \n  410755:\t49 89 f8             \tmov    %rdi,%r8\n  410758:\t89 d1                \tmov    %edx,%ecx\n  41075a:\t48 8d 15 a0 10 03 00 \tlea    0x310a0(%rip),%rdx        # 441801 <_IO_stdin_used+0x801>\n  410761:\t48 89 c7             \tmov    %rax,%rdi\n  410764:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  410769:\te8 37 de ff ff       \tcallq  40e5a5 <BIO_snprintf>\n  41076e:\t48 8b 84 24 38 04 00 \tmov    0x438(%rsp),%rax\n  410775:\t00 \n  410776:\t48 89 c7             \tmov    %rax,%rdi\n  410779:\te8 52 09 ff ff       \tcallq  4010d0 <strlen@plt>\n  41077e:\t48 01 84 24 38 04 00 \tadd    %rax,0x438(%rsp)\n  410785:\t00 \n  410786:\t48 8b 04 24          \tmov    (%rsp),%rax\n  41078a:\t48 8b 00             \tmov    (%rax),%rax\n  41078d:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n  410792:\t48 89 d6             \tmov    %rdx,%rsi\n  410795:\t48 89 c7             \tmov    %rax,%rdi\n  410798:\te8 72 b1 ff ff       \tcallq  40b90f <BIO_puts>\n  41079d:\t48 8b 04 24          \tmov    (%rsp),%rax\n  4107a1:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4107a4:\t8d 50 01             \tlea    0x1(%rax),%edx\n  4107a7:\t48 8b 04 24          \tmov    (%rsp),%rax\n  4107ab:\t89 50 08             \tmov    %edx,0x8(%rax)\n  4107ae:\t48 8b 04 24          \tmov    (%rsp),%rax\n  4107b2:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  4107b6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4107bb:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4107be:\t48 98                \tcltq   \n  4107c0:\t48 01 c2             \tadd    %rax,%rdx\n  4107c3:\t48 8b 04 24          \tmov    (%rsp),%rax\n  4107c7:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  4107cb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4107d0:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  4107d4:\t48 89 84 24 30 04 00 \tmov    %rax,0x430(%rsp)\n  4107db:\t00 \n  4107dc:\tc7 84 24 2c 04 00 00 \tmovl   $0x0,0x42c(%rsp)\n  4107e3:\t00 00 00 00 \n  4107e7:\t48 83 bc 24 30 04 00 \tcmpq   $0x0,0x430(%rsp)\n  4107ee:\t00 00 \n  4107f0:\t0f 84 fd 01 00 00    \tje     4109f3 <print_leak+0x4a2>\n  4107f6:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n  4107fd:\t00 \n  4107fe:\t48 8b 00             \tmov    (%rax),%rax\n  410801:\t48 89 84 24 18 04 00 \tmov    %rax,0x418(%rsp)\n  410808:\t00 \n  410809:\t83 84 24 2c 04 00 00 \taddl   $0x1,0x42c(%rsp)\n  410810:\t01 \n  410811:\t8b 84 24 2c 04 00 00 \tmov    0x42c(%rsp),%eax\n  410818:\t48 63 d0             \tmovslq %eax,%rdx\n  41081b:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  410820:\tbe 3e 00 00 00       \tmov    $0x3e,%esi\n  410825:\t48 89 c7             \tmov    %rax,%rdi\n  410828:\te8 e3 08 ff ff       \tcallq  401110 <memset@plt>\n  41082d:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n  410834:\t00 \n  410835:\t44 8b 48 10          \tmov    0x10(%rax),%r9d\n  410839:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n  410840:\t00 \n  410841:\t4c 8b 40 08          \tmov    0x8(%rax),%r8\n  410845:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n  41084c:\t00 \n  41084d:\t48 8b 00             \tmov    (%rax),%rax\n  410850:\t8b 94 24 2c 04 00 00 \tmov    0x42c(%rsp),%edx\n  410857:\t48 63 d2             \tmovslq %edx,%rdx\n  41085a:\tb9 00 04 00 00       \tmov    $0x400,%ecx\n  41085f:\t48 89 ce             \tmov    %rcx,%rsi\n  410862:\t48 29 d6             \tsub    %rdx,%rsi\n  410865:\t8b 94 24 2c 04 00 00 \tmov    0x42c(%rsp),%edx\n  41086c:\t48 63 d2             \tmovslq %edx,%rdx\n  41086f:\t48 8d 4c 24 10       \tlea    0x10(%rsp),%rcx\n  410874:\t48 8d 3c 11          \tlea    (%rcx,%rdx,1),%rdi\n  410878:\t48 89 c1             \tmov    %rax,%rcx\n  41087b:\t48 8d 15 9e 0f 03 00 \tlea    0x30f9e(%rip),%rdx        # 441820 <_IO_stdin_used+0x820>\n  410882:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  410887:\te8 19 dd ff ff       \tcallq  40e5a5 <BIO_snprintf>\n  41088c:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  410891:\t48 89 c7             \tmov    %rax,%rdi\n  410894:\te8 37 08 ff ff       \tcallq  4010d0 <strlen@plt>\n  410899:\t89 84 24 28 04 00 00 \tmov    %eax,0x428(%rsp)\n  4108a0:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n  4108a7:\t00 \n  4108a8:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4108ac:\t48 89 c7             \tmov    %rax,%rdi\n  4108af:\te8 1c 08 ff ff       \tcallq  4010d0 <strlen@plt>\n  4108b4:\t89 84 24 14 04 00 00 \tmov    %eax,0x414(%rsp)\n  4108bb:\tb8 7d 00 00 00       \tmov    $0x7d,%eax\n  4108c0:\t2b 84 24 28 04 00 00 \tsub    0x428(%rsp),%eax\n  4108c7:\t39 84 24 14 04 00 00 \tcmp    %eax,0x414(%rsp)\n  4108ce:\t7e 45                \tjle    410915 <print_leak+0x3c4>\n  4108d0:\tb8 7d 00 00 00       \tmov    $0x7d,%eax\n  4108d5:\t2b 84 24 28 04 00 00 \tsub    0x428(%rsp),%eax\n  4108dc:\t48 63 d0             \tmovslq %eax,%rdx\n  4108df:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n  4108e6:\t00 \n  4108e7:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4108eb:\t8b 8c 24 28 04 00 00 \tmov    0x428(%rsp),%ecx\n  4108f2:\t48 63 c9             \tmovslq %ecx,%rcx\n  4108f5:\t48 8d 74 24 10       \tlea    0x10(%rsp),%rsi\n  4108fa:\t48 01 f1             \tadd    %rsi,%rcx\n  4108fd:\t48 89 c6             \tmov    %rax,%rsi\n  410900:\t48 89 cf             \tmov    %rcx,%rdi\n  410903:\te8 a8 08 ff ff       \tcallq  4011b0 <memcpy@plt>\n  410908:\tc7 84 24 28 04 00 00 \tmovl   $0x7d,0x428(%rsp)\n  41090f:\t7d 00 00 00 \n  410913:\teb 4e                \tjmp    410963 <print_leak+0x412>\n  410915:\t8b 84 24 28 04 00 00 \tmov    0x428(%rsp),%eax\n  41091c:\t48 98                \tcltq   \n  41091e:\tba 00 04 00 00       \tmov    $0x400,%edx\n  410923:\t48 29 c2             \tsub    %rax,%rdx\n  410926:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n  41092d:\t00 \n  41092e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  410932:\t8b 8c 24 28 04 00 00 \tmov    0x428(%rsp),%ecx\n  410939:\t48 63 c9             \tmovslq %ecx,%rcx\n  41093c:\t48 8d 74 24 10       \tlea    0x10(%rsp),%rsi\n  410941:\t48 01 f1             \tadd    %rsi,%rcx\n  410944:\t48 89 c6             \tmov    %rax,%rsi\n  410947:\t48 89 cf             \tmov    %rcx,%rdi\n  41094a:\te8 58 18 02 00       \tcallq  4321a7 <BUF_strlcpy>\n  41094f:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  410954:\t48 89 c7             \tmov    %rax,%rdi\n  410957:\te8 74 07 ff ff       \tcallq  4010d0 <strlen@plt>\n  41095c:\t89 84 24 28 04 00 00 \tmov    %eax,0x428(%rsp)\n  410963:\t8b 84 24 28 04 00 00 \tmov    0x428(%rsp),%eax\n  41096a:\t48 98                \tcltq   \n  41096c:\tba 00 04 00 00       \tmov    $0x400,%edx\n  410971:\t48 29 c2             \tsub    %rax,%rdx\n  410974:\t48 89 d1             \tmov    %rdx,%rcx\n  410977:\t8b 84 24 28 04 00 00 \tmov    0x428(%rsp),%eax\n  41097e:\t48 98                \tcltq   \n  410980:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n  410985:\t48 01 d0             \tadd    %rdx,%rax\n  410988:\t48 8d 15 b7 0e 03 00 \tlea    0x30eb7(%rip),%rdx        # 441846 <_IO_stdin_used+0x846>\n  41098f:\t48 89 ce             \tmov    %rcx,%rsi\n  410992:\t48 89 c7             \tmov    %rax,%rdi\n  410995:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41099a:\te8 06 dc ff ff       \tcallq  40e5a5 <BIO_snprintf>\n  41099f:\t48 8b 04 24          \tmov    (%rsp),%rax\n  4109a3:\t48 8b 00             \tmov    (%rax),%rax\n  4109a6:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n  4109ab:\t48 89 d6             \tmov    %rdx,%rsi\n  4109ae:\t48 89 c7             \tmov    %rax,%rdi\n  4109b1:\te8 59 af ff ff       \tcallq  40b90f <BIO_puts>\n  4109b6:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n  4109bd:\t00 \n  4109be:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4109c2:\t48 89 84 24 30 04 00 \tmov    %rax,0x430(%rsp)\n  4109c9:\t00 \n  4109ca:\t48 83 bc 24 30 04 00 \tcmpq   $0x0,0x430(%rsp)\n  4109d1:\t00 00 \n  4109d3:\t74 1f                \tje     4109f4 <print_leak+0x4a3>\n  4109d5:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n  4109dc:\t00 \n  4109dd:\t48 8b 00             \tmov    (%rax),%rax\n  4109e0:\t48 39 84 24 18 04 00 \tcmp    %rax,0x418(%rsp)\n  4109e7:\t00 \n  4109e8:\t0f 84 1b fe ff ff    \tje     410809 <print_leak+0x2b8>\n  4109ee:\teb 04                \tjmp    4109f4 <print_leak+0x4a3>\n  4109f0:\t90                   \tnop\n  4109f1:\teb 01                \tjmp    4109f4 <print_leak+0x4a3>\n  4109f3:\t90                   \tnop\n  4109f4:\t48 81 c4 48 04 00 00 \tadd    $0x448,%rsp\n  4109fb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall print_leak(__int64 a1, __int64 *a2) {\n  __int64 result;\n  size_t v3;\n  size_t v4;\n  __int64 v5;\n  __int64 v6;\n  size_t v7;\n  size_t v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  char v12[Number];\n  int v13;\n  __int64 v14;\n  struct tm *v15;\n  int v16;\n  int v17;\n  __int64 v18;\n  char *s;\n  s = v12;\n  v15 = Number L;\n  result = *a2;\n  if (*(_QWORD *)a1 != *a2) {\n    if ((options & Number) != Number) {\n      v15 = localtime((const time_t *)(a1 + Number));\n      BIO_snprintf((__int64)s, Number - (s - v12), (__int64)String,\n                   (unsigned int)v15->tm_hour, (unsigned int)v15->tm_min,\n                   (unsigned int)v15->tm_sec);\n      v3 = strlen(s);\n      s += v3;\n    }\n    BIO_snprintf((__int64)s, Number - (s - v12), (__int64)String,\n                 *(_QWORD *)(a1 + Number), *(_QWORD *)(a1 + Number),\n                 *(unsigned int *)(a1 + Number), a2);\n    v4 = strlen(s);\n    s += v4;\n    if ((options & Number) != Number) {\n      BIO_snprintf((__int64)s, Number - (s - v12), (__int64)String,\n                   *(_QWORD *)(a1 + Number), v5, v6);\n      v7 = strlen(s);\n      s += v7;\n    }\n    BIO_snprintf((__int64)s, Number - (s - v12), (__int64)String,\n                 *(unsigned int *)(a1 + Number), *(_QWORD *)a1, v6);\n    v8 = strlen(s);\n    s += v8;\n    BIO_puts(*(_QWORD *)v11, (__int64)v12);\n    ++*(_DWORD *)(v11 + Number);\n    *(_QWORD *)(v11 + Number) += *(int *)(a1 + Number);\n    result = *(_QWORD *)(a1 + Number);\n    v18 = result;\n    v17 = Number;\n    if (result) {\n      v14 = *(_QWORD *)v18;\n      do {\n        memset(v12, Number, ++v17);\n        BIO_snprintf((__int64)&v12[v17], Number L - v17, (__int64)String,\n                     *(_QWORD *)v18, *(_QWORD *)(v18 + Number),\n                     *(unsigned int *)(v18 + Number));\n        v16 = strlen(v12);\n        v13 = strlen(*(const char **)(v18 + Number));\n        if (v13 <= Number - v16) {\n          BUF_strlcpy(&v12[v16], *(_QWORD *)(v18 + Number), Number L - v16);\n          v16 = strlen(v12);\n        } else {\n          memcpy(&v12[v16], *(const void **)(v18 + Number), Number - v16);\n          v16 = Number;\n        }\n        BIO_snprintf((__int64)&v12[v16], Number L - v16, (__int64)String,\n                     Number L - v16, v9, v10);\n        BIO_puts(*(_QWORD *)v11, (__int64)v12);\n        result = *(_QWORD *)(v18 + Number);\n        v18 = result;\n        if (!result)\n          break;\n        result = *(_QWORD *)v18;\n      } while (v14 == *(_QWORD *)v18);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl print_leak(const MEM *m, MEM_LEAK *l) {\n  size_t v2;\n  size_t v3;\n  size_t v4;\n  size_t v5;\n  char buf[Number];\n  int info_len;\n  unsigned __int64 ti;\n  tm *lcl;\n  int buf_len;\n  int ami_cnt;\n  APP_INFO *amip;\n  char *bufp;\n  bufp = buf;\n  lcl = Number L;\n  if (m->addr != l->bio) {\n    if ((options & Number) != Number) {\n      lcl = localtime(&m->time);\n      BIO_snprintf(bufp, Number - (bufp - buf), String,\n                   (unsigned int)lcl->tm_hour, (unsigned int)lcl->tm_min,\n                   (unsigned int)lcl->tm_sec);\n      v2 = strlen(bufp);\n      bufp += v2;\n    }\n    BIO_snprintf(bufp, Number - (bufp - buf), String, m->order, m->file,\n                 (unsigned int)m->line);\n    v3 = strlen(bufp);\n    bufp += v3;\n    if ((options & Number) != Number) {\n      BIO_snprintf(bufp, Number - (bufp - buf), String, m->thread);\n      v4 = strlen(bufp);\n      bufp += v4;\n    }\n    BIO_snprintf(bufp, Number - (bufp - buf), String, (unsigned int)m->num,\n                 m->addr);\n    v5 = strlen(bufp);\n    bufp += v5;\n    BIO_puts(l->bio, buf);\n    ++l->chunks;\n    l->bytes += m->num;\n    amip = m->app_info;\n    ami_cnt = Number;\n    if (amip) {\n      ti = amip->thread;\n      do {\n        memset(buf, Number, ++ami_cnt);\n        BIO_snprintf(&buf[ami_cnt], Number L - ami_cnt, String, amip->thread,\n                     amip->file, (unsigned int)amip->line);\n        buf_len = strlen(buf);\n        info_len = strlen(amip->info);\n        if (info_len <= Number - buf_len) {\n          BUF_strlcpy(&buf[buf_len], amip->info, Number L - buf_len);\n          buf_len = strlen(buf);\n        } else {\n          memcpy(&buf[buf_len], amip->info, Number - buf_len);\n          buf_len = Number;\n        }\n        BIO_snprintf(&buf[buf_len], Number L - buf_len, String);\n        BIO_puts(l->bio, buf);\n        amip = amip->next;\n      } while (amip && ti == amip->thread);\n    }\n  }\n}", "var": [], "body_in_train": false}, {"repo_owner": "postgrespro", "repo_name": "sqljson", "path": "postgrespro/sqljson/e76bafd09939174deb7830d21a65ee7c0c6997cfb169fbe4f60f0eb3c4a49fcd", "path_in_repo": "postgrespro/sqljson//src/bin/scripts/reindexdb", "objdump": "0000000000408000 <pg_sprintf>:\n  408000:\t55                   \tpush   %rbp\n  408001:\t48 89 e5             \tmov    %rsp,%rbp\n  408004:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n  40800b:\t48 89 bd 28 ff ff ff \tmov    %rdi,-0xd8(%rbp)\n  408012:\t48 89 b5 20 ff ff ff \tmov    %rsi,-0xe0(%rbp)\n  408019:\t48 89 95 60 ff ff ff \tmov    %rdx,-0xa0(%rbp)\n  408020:\t48 89 8d 68 ff ff ff \tmov    %rcx,-0x98(%rbp)\n  408027:\t4c 89 85 70 ff ff ff \tmov    %r8,-0x90(%rbp)\n  40802e:\t4c 89 8d 78 ff ff ff \tmov    %r9,-0x88(%rbp)\n  408035:\t84 c0                \ttest   %al,%al\n  408037:\t74 20                \tje     408059 <pg_sprintf+0x59>\n  408039:\t0f 29 45 80          \tmovaps %xmm0,-0x80(%rbp)\n  40803d:\t0f 29 4d 90          \tmovaps %xmm1,-0x70(%rbp)\n  408041:\t0f 29 55 a0          \tmovaps %xmm2,-0x60(%rbp)\n  408045:\t0f 29 5d b0          \tmovaps %xmm3,-0x50(%rbp)\n  408049:\t0f 29 65 c0          \tmovaps %xmm4,-0x40(%rbp)\n  40804d:\t0f 29 6d d0          \tmovaps %xmm5,-0x30(%rbp)\n  408051:\t0f 29 75 e0          \tmovaps %xmm6,-0x20(%rbp)\n  408055:\t0f 29 7d f0          \tmovaps %xmm7,-0x10(%rbp)\n  408059:\tc7 85 30 ff ff ff 10 \tmovl   $0x10,-0xd0(%rbp)\n  408060:\t00 00 00 \n  408063:\tc7 85 34 ff ff ff 30 \tmovl   $0x30,-0xcc(%rbp)\n  40806a:\t00 00 00 \n  40806d:\t48 8d 45 10          \tlea    0x10(%rbp),%rax\n  408071:\t48 89 85 38 ff ff ff \tmov    %rax,-0xc8(%rbp)\n  408078:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  40807f:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n  408086:\t48 8d 95 30 ff ff ff \tlea    -0xd0(%rbp),%rdx\n  40808d:\t48 8b 8d 20 ff ff ff \tmov    -0xe0(%rbp),%rcx\n  408094:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n  40809b:\t48 89 ce             \tmov    %rcx,%rsi\n  40809e:\t48 89 c7             \tmov    %rax,%rdi\n  4080a1:\te8 d7 fe ff ff       \tcallq  407f7d <pg_vsprintf>\n  4080a6:\t89 85 4c ff ff ff    \tmov    %eax,-0xb4(%rbp)\n  4080ac:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n  4080b2:\tc9                   \tleaveq \n  4080b3:\tc3                   \tretq   ", "code_s": "__int64 pg_sprintf(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5,\n                   __int64 a6, ...) {\n  gcc_va_list va;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  va_start(va, a6);\n  v8 = a3;\n  v9 = a4;\n  v10 = a5;\n  v11 = a6;\n  va[Number].gp_offset = Number;\n  return (unsigned int)pg_vsprintf(a1, a2, (__int64)va);\n}", "code_t": "int pg_sprintf(char *str, const char *fmt, ...) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  va_list args;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  va_start(args, fmt);\n  v2 = va_arg(args, _QWORD);\n  v3 = va_arg(args, _QWORD);\n  v4 = va_arg(args, _QWORD);\n  v5 = va_arg(args, _QWORD);\n  v8 = v2;\n  v9 = v3;\n  v10 = v4;\n  v11 = v5;\n  args[Number].gp_offset = Number;\n  return pg_vsprintf(str, fmt, args);\n}", "var": [], "body_in_train": true}, {"repo_owner": "nmacs", "repo_name": "print3d", "path": "nmacs/print3d/142ee0ab03aaea08c1cce3b49aba610648f7bc1ddb53dfc348f2f9408898fa3c", "path_in_repo": "nmacs/print3d//toolchain/openocd-0.7.0/jimtcl/jimsh", "objdump": "000000000042b240 <aio_cmd_listen>:\n  42b240:\t55                   \tpush   %rbp\n  42b241:\t48 89 e5             \tmov    %rsp,%rbp\n  42b244:\t48 83 ec 30          \tsub    $0x30,%rsp\n  42b248:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  42b24c:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  42b24f:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  42b253:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42b257:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n  42b25e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  42b262:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42b266:\t48 8b 08             \tmov    (%rax),%rcx\n  42b269:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  42b26d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42b271:\t48 89 ce             \tmov    %rcx,%rsi\n  42b274:\t48 89 c7             \tmov    %rax,%rdi\n  42b277:\te8 06 6a fe ff       \tcallq  411c82 <Jim_GetLong>\n  42b27c:\t85 c0                \ttest   %eax,%eax\n  42b27e:\t74 07                \tje     42b287 <aio_cmd_listen+0x47>\n  42b280:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  42b285:\teb 37                \tjmp    42b2be <aio_cmd_listen+0x7e>\n  42b287:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  42b28b:\t89 c2                \tmov    %eax,%edx\n  42b28d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  42b291:\t8b 40 18             \tmov    0x18(%rax),%eax\n  42b294:\t89 d6                \tmov    %edx,%esi\n  42b296:\t89 c7                \tmov    %eax,%edi\n  42b298:\te8 c3 b3 fd ff       \tcallq  406660 <listen@plt>\n  42b29d:\t85 c0                \ttest   %eax,%eax\n  42b29f:\t74 18                \tje     42b2b9 <aio_cmd_listen+0x79>\n  42b2a1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42b2a5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  42b2aa:\t48 89 c7             \tmov    %rax,%rdi\n  42b2ad:\te8 c2 ef ff ff       \tcallq  42a274 <JimAioSetError>\n  42b2b2:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  42b2b7:\teb 05                \tjmp    42b2be <aio_cmd_listen+0x7e>\n  42b2b9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42b2be:\tc9                   \tleaveq \n  42b2bf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall aio_cmd_listen(__int64 *a1, __int64 a2, __int64 *a3) {\n  int n[Number];\n  __int64 v5;\n  v5 = a1[Number];\n  if ((unsigned int)Jim_GetLong(a1, *a3, n))\n    return Number L;\n  if (!listen(*(_DWORD *)(v5 + Number), n[Number]))\n    return Number L;\n  JimAioSetError(a1, Number L);\n  return Number L;\n}", "code_t": "int __cdecl aio_cmd_listen(Jim_Interp_0 *interp, int argc,\n                           Jim_Obj_0 *const *argv) {\n  __int64 backlog;\n  AioFile_0 *af_0;\n  af_0 = (AioFile_0 *)interp->cmdPrivData;\n  if (Jim_GetLong(interp, *argv, &backlog))\n    return Number;\n  if (!listen(af_0->fd, backlog))\n    return Number;\n  JimAioSetError(interp, Number L);\n  return Number;\n}", "var": [], "body_in_train": false}, {"repo_owner": "asterIRC", "repo_name": "DakotaIRCd-old", "path": "asterIRC/DakotaIRCd-old/7529a9650cb39e2affcd885d93afad4ec10e26341b7a469c7ee28de8194020ca", "path_in_repo": "asterIRC/DakotaIRCd-old/lolltdl/libltdlc_la-ltdl.o", "objdump": "0000000000003ae6 <lt_dlgetinfo>:\n    3ae6:\t55                   \tpush   %rbp\n    3ae7:\t48 89 e5             \tmov    %rsp,%rbp\n    3aea:\t48 83 ec 10          \tsub    $0x10,%rsp\n    3aee:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    3af2:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    3af7:\t75 19                \tjne    3b12 <lt_dlgetinfo+0x2c>\n    3af9:\tbf 0c 00 00 00       \tmov    $0xc,%edi\n    3afe:\te8 00 00 00 00       \tcallq  3b03 <lt_dlgetinfo+0x1d>\n    3b03:\t48 89 c7             \tmov    %rax,%rdi\n    3b06:\te8 00 00 00 00       \tcallq  3b0b <lt_dlgetinfo+0x25>\n    3b0b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3b10:\teb 08                \tjmp    3b1a <lt_dlgetinfo+0x34>\n    3b12:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3b16:\t48 83 c0 10          \tadd    $0x10,%rax\n    3b1a:\tc9                   \tleaveq \n    3b1b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall lt_dlgetinfo(__int64 a1) {\n  __int64 v1;\n  if (a1)\n    return a1 + Number;\n  v1 = lt__error_string(Number L);\n  lt__set_last_error(v1);\n  return Number L;\n}", "code_t": "const lt_dlinfo *__cdecl lt_dlgetinfo(lt_dlhandle handle) {\n  __int64 v1;\n  if (handle)\n    return &handle->info;\n  v1 = lt__error_string(Number L);\n  lt__set_last_error(v1);\n  return Number L;\n}", "var": [], "body_in_train": false}, {"repo_owner": "godujun", "repo_name": "FfmpegWithStage", "path": "godujun/FfmpegWithStage/f9e179719b89b0354e4960171da2ed489653d6a190feb496a3853584979d9ebd", "path_in_repo": "godujun/FfmpegWithStage//libavcodec/h264pred.o", "objdump": "0000000000032ccf <pred8x8_horizontal_add_12_c>:\n   32ccf:\t48 83 ec 38          \tsub    $0x38,%rsp\n   32cd3:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n   32cd8:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n   32cdd:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n   32ce2:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n   32ce6:\tc7 44 24 2c 00 00 00 \tmovl   $0x0,0x2c(%rsp)\n   32ced:\t00 \n   32cee:\teb 52                \tjmp    32d42 <pred8x8_horizontal_add_12_c+0x73>\n   32cf0:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   32cf4:\tc1 e0 04             \tshl    $0x4,%eax\n   32cf7:\t48 98                \tcltq   \n   32cf9:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   32d00:\t00 \n   32d01:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   32d06:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n   32d0a:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   32d0e:\t48 98                \tcltq   \n   32d10:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   32d17:\t00 \n   32d18:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   32d1d:\t48 01 d0             \tadd    %rdx,%rax\n   32d20:\t8b 00                \tmov    (%rax),%eax\n   32d22:\t48 63 d0             \tmovslq %eax,%rdx\n   32d25:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   32d2a:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n   32d2e:\t48 8b 04 24          \tmov    (%rsp),%rax\n   32d32:\t48 89 c2             \tmov    %rax,%rdx\n   32d35:\t48 89 cf             \tmov    %rcx,%rdi\n   32d38:\te8 8d f8 ff ff       \tcallq  325ca <pred4x4_horizontal_add_12_c>\n   32d3d:\t83 44 24 2c 01       \taddl   $0x1,0x2c(%rsp)\n   32d42:\t83 7c 24 2c 03       \tcmpl   $0x3,0x2c(%rsp)\n   32d47:\t7e a7                \tjle    32cf0 <pred8x8_horizontal_add_12_c+0x21>\n   32d49:\t90                   \tnop\n   32d4a:\t90                   \tnop\n   32d4b:\t48 83 c4 38          \tadd    $0x38,%rsp\n   32d4f:\tc3                   \tretq   ", "code_s": "void *__fastcall pred8x8_horizontal_add_12_c(__int64 a1, __int64 a2, __int64 a3,\n                                             __int64 a4) {\n  void *result;\n  int i;\n  for (i = Number; i <= Number; ++i)\n    result =\n        pred4x4_horizontal_add_12_c((_WORD *)(*(int *)(Number L * i + a2) + a1),\n                                    (_DWORD *)(Number L * i + a3), a4);\n  return result;\n}", "code_t": "void __cdecl pred8x8_horizontal_add_12_c(uint8_t *pix, const int *block_offset,\n                                         int16_t *block, ptrdiff_t stride) {\n  int i;\n  for (i = Number; i <= Number; ++i)\n    pred4x4_horizontal_add_12_c(&pix[block_offset[i]], &block[Number * i],\n                                stride);\n}", "var": [], "body_in_train": true}, {"repo_owner": "SlimRoms-Extended", "repo_name": "external_wpa_supplicant_8", "path": "SlimRoms-Extended/external_wpa_supplicant_8/c7272d4b0405b21365dd8fc45cc69ec847385f3b24587c114cf381e5c3c831e2", "path_in_repo": "SlimRoms-Extended/external_wpa_supplicant_8/src/p2p/p2p.o", "objdump": "000000000000d12d <p2p_set_no_go_freq>:\n    d12d:\t55                   \tpush   %rbp\n    d12e:\t48 89 e5             \tmov    %rsp,%rbp\n    d131:\t48 83 ec 20          \tsub    $0x20,%rsp\n    d135:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    d139:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    d13d:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    d142:\t74 0b                \tje     d14f <p2p_set_no_go_freq+0x22>\n    d144:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    d148:\t8b 40 08             \tmov    0x8(%rax),%eax\n    d14b:\t85 c0                \ttest   %eax,%eax\n    d14d:\t75 3a                \tjne    d189 <p2p_set_no_go_freq+0x5c>\n    d14f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    d153:\t48 8b 80 98 02 00 00 \tmov    0x298(%rax),%rax\n    d15a:\t48 89 c7             \tmov    %rax,%rdi\n    d15d:\te8 00 00 00 00       \tcallq  d162 <p2p_set_no_go_freq+0x35>\n    d162:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    d166:\t48 c7 80 98 02 00 00 \tmovq   $0x0,0x298(%rax)\n    d16d:\t00 00 00 00 \n    d171:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    d175:\tc7 80 a0 02 00 00 00 \tmovl   $0x0,0x2a0(%rax)\n    d17c:\t00 00 00 \n    d17f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    d184:\te9 9d 00 00 00       \tjmpq   d226 <p2p_set_no_go_freq+0xf9>\n    d189:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    d18d:\t8b 40 08             \tmov    0x8(%rax),%eax\n    d190:\t89 c0                \tmov    %eax,%eax\n    d192:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    d197:\t48 89 c7             \tmov    %rax,%rdi\n    d19a:\te8 88 2f ff ff       \tcallq  127 <os_calloc>\n    d19f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    d1a3:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    d1a8:\t75 07                \tjne    d1b1 <p2p_set_no_go_freq+0x84>\n    d1aa:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    d1af:\teb 75                \tjmp    d226 <p2p_set_no_go_freq+0xf9>\n    d1b1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    d1b5:\t8b 40 08             \tmov    0x8(%rax),%eax\n    d1b8:\t89 c0                \tmov    %eax,%eax\n    d1ba:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    d1c1:\t00 \n    d1c2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    d1c6:\t48 8b 08             \tmov    (%rax),%rcx\n    d1c9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    d1cd:\t48 89 ce             \tmov    %rcx,%rsi\n    d1d0:\t48 89 c7             \tmov    %rax,%rdi\n    d1d3:\te8 00 00 00 00       \tcallq  d1d8 <p2p_set_no_go_freq+0xab>\n    d1d8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    d1dc:\t48 8b 80 98 02 00 00 \tmov    0x298(%rax),%rax\n    d1e3:\t48 89 c7             \tmov    %rax,%rdi\n    d1e6:\te8 00 00 00 00       \tcallq  d1eb <p2p_set_no_go_freq+0xbe>\n    d1eb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    d1ef:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    d1f3:\t48 89 90 98 02 00 00 \tmov    %rdx,0x298(%rax)\n    d1fa:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    d1fe:\t8b 50 08             \tmov    0x8(%rax),%edx\n    d201:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    d205:\t89 90 a0 02 00 00    \tmov    %edx,0x2a0(%rax)\n    d20b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    d20f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    d214:\t48 89 c7             \tmov    %rax,%rdi\n    d217:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    d21c:\te8 00 00 00 00       \tcallq  d221 <p2p_set_no_go_freq+0xf4>\n    d221:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    d226:\tc9                   \tleaveq \n    d227:\tc3                   \tretq   ", "code_s": "__int64 __fastcall p2p_set_no_go_freq(__int64 a1, __int64 a2) {\n  __int64 result;\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  void *dest;\n  if (a2 && *(_DWORD *)(a2 + Number)) {\n    dest = (void *)os_calloc(*(unsigned int *)(a2 + Number), Number);\n    if (dest) {\n      memcpy(dest, *(const void **)a2,\n             Number L * *(unsigned int *)(a2 + Number));\n      free(*(void **)(a1 + Number));\n      *(_QWORD *)(a1 + Number) = dest;\n      v3 = *(_DWORD *)(a2 + Number);\n      *(_DWORD *)(a1 + Number) = v3;\n      p2p_dbg(a1, (unsigned int)String, v3, v4, v5, v6);\n      result = Number L;\n    } else {\n      result = Number;\n    }\n  } else {\n    free(*(void **)(a1 + Number));\n    *(_QWORD *)(a1 + Number) = Number L;\n    *(_DWORD *)(a1 + Number) = Number;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl p2p_set_no_go_freq(p2p_data *p2p, const wpa_freq_range_list *list) {\n  int result;\n  wpa_freq_range *tmp;\n  if (list && list->num) {\n    tmp = (wpa_freq_range *)os_calloc(list->num, Number);\n    if (tmp) {\n      memcpy(tmp, list->range, Number L * list->num);\n      free(p2p->no_go_freq.range);\n      p2p->no_go_freq.range = tmp;\n      p2p->no_go_freq.num = list->num;\n      p2p_dbg(p2p, String);\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else {\n    free(p2p->no_go_freq.range);\n    p2p->no_go_freq.range = Number L;\n    p2p->no_go_freq.num = Number;\n    result = Number;\n  }\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "emfoa23", "repo_name": "LinuxKernel", "path": "emfoa23/LinuxKernel/9f449c06418031693a2e762089bf526afec773b64acf6c58520b2d685cc26f99", "path_in_repo": "emfoa23/LinuxKernel/tools/testing/radix-tree/xarray", "objdump": "", "code_s": "bool __fastcall xa_is_value_1(char a1) { return (a1 & Number) != Number L; }", "code_t": "bool __cdecl xa_is_value_1(const void *entry) {\n  return ((unsigned __int8)entry & Number) != Number L;\n}", "var": [], "body_in_train": true}, {"repo_owner": "antmicro", "repo_name": "abc-lib", "path": "antmicro/abc-lib/2989202598d65655a013b7716ddb0f5adb6c1332188b797fe580dec8c5fc6997", "path_in_repo": "antmicro/abc-lib//src/opt/ret/retFlow.o", "objdump": "0000000000001213 <Abc_ObjFanin>:\n    1213:\t55                   \tpush   %rbp\n    1214:\t48 89 e5             \tmov    %rsp,%rbp\n    1217:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    121b:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n    121e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1222:\t48 8b 00             \tmov    (%rax),%rax\n    1225:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1229:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    122d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1231:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1235:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n    1238:\t48 63 c9             \tmovslq %ecx,%rcx\n    123b:\t48 c1 e1 02          \tshl    $0x2,%rcx\n    123f:\t48 01 c8             \tadd    %rcx,%rax\n    1242:\t8b 00                \tmov    (%rax),%eax\n    1244:\t48 98                \tcltq   \n    1246:\t48 c1 e0 03          \tshl    $0x3,%rax\n    124a:\t48 01 d0             \tadd    %rdx,%rax\n    124d:\t48 8b 00             \tmov    (%rax),%rax\n    1250:\t5d                   \tpop    %rbp\n    1251:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Abc_ObjFanin(_QWORD *a1, int a2) {\n  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + Number L) + Number L) +\n                     Number L * *(int *)(Number L * a2 + a1[Number]));\n}", "code_t": "Abc_Obj_t *__cdecl Abc_ObjFanin(Abc_Obj_t *pObj, int i) {\n  return (Abc_Obj_t *)pObj->pNtk->vObjs->pArray[pObj->vFanins.pArray[i]];\n}", "var": [], "body_in_train": true}, {"repo_owner": "daveti", "repo_name": "GoodUSB", "path": "daveti/GoodUSB/f31294d59483c1fcdba51c65a310bb78c3737780c5991594281ef9e4a741a7bf", "path_in_repo": "daveti/GoodUSB/kernel/linux-3.13.0/tools/vm/page-types", "objdump": "", "code_s": "ssize_t read(int fd, void *buf, size_t nbytes) { return read(fd, buf, nbytes); }", "code_t": "ssize_t read(int fd, void *buf, size_t nbytes) { return read(fd, buf, nbytes); }", "var": [], "body_in_train": true}, {"repo_owner": "CGrader", "repo_name": "ffmpeg-modif", "path": "CGrader/ffmpeg-modif/e83009e3a163e76d1b48694ce57133b941fb13e6944974f719edf6b2c3a29109", "path_in_repo": "CGrader/ffmpeg-modif//libavformat/ac3dec.o", "objdump": "0000000000000000 <init_get_bits>:\n   0:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n   5:\t48 89 74 24 e0       \tmov    %rsi,-0x20(%rsp)\n   a:\t89 54 24 dc          \tmov    %edx,-0x24(%rsp)\n   e:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n  15:\t00 \n  16:\t81 7c 24 dc f7 ff ff \tcmpl   $0x7ffffff7,-0x24(%rsp)\n  1d:\t7f \n  1e:\t7f 0f                \tjg     2f <init_get_bits+0x2f>\n  20:\t83 7c 24 dc 00       \tcmpl   $0x0,-0x24(%rsp)\n  25:\t78 08                \tjs     2f <init_get_bits+0x2f>\n  27:\t48 83 7c 24 e0 00    \tcmpq   $0x0,-0x20(%rsp)\n  2d:\t75 21                \tjne    50 <init_get_bits+0x50>\n  2f:\tc7 44 24 dc 00 00 00 \tmovl   $0x0,-0x24(%rsp)\n  36:\t00 \n  37:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n  3b:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n  3f:\t48 c7 44 24 e0 00 00 \tmovq   $0x0,-0x20(%rsp)\n  46:\t00 00 \n  48:\tc7 44 24 fc b7 b1 bb \tmovl   $0xbebbb1b7,-0x4(%rsp)\n  4f:\tbe \n  50:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n  54:\t83 c0 07             \tadd    $0x7,%eax\n  57:\tc1 f8 03             \tsar    $0x3,%eax\n  5a:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n  5e:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n  63:\t48 8b 54 24 e0       \tmov    -0x20(%rsp),%rdx\n  68:\t48 89 10             \tmov    %rdx,(%rax)\n  6b:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n  70:\t8b 54 24 dc          \tmov    -0x24(%rsp),%edx\n  74:\t89 50 14             \tmov    %edx,0x14(%rax)\n  77:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n  7b:\t8d 50 08             \tlea    0x8(%rax),%edx\n  7e:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n  83:\t89 50 18             \tmov    %edx,0x18(%rax)\n  86:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n  8a:\t48 63 d0             \tmovslq %eax,%rdx\n  8d:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n  92:\t48 01 c2             \tadd    %rax,%rdx\n  95:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n  9a:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  9e:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n  a3:\tc7 40 10 00 00 00 00 \tmovl   $0x0,0x10(%rax)\n  aa:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n  ae:\tc3                   \tretq   ", "code_s": "__int64 __fastcall init_get_bits(__int64 a1, __int64 a2, int a3) {\n  int v4;\n  __int64 v5;\n  unsigned int v6;\n  v5 = a2;\n  v4 = a3;\n  v6 = Number;\n  if (a3 > Number || a3 < Number || !a2) {\n    v4 = Number;\n    v5 = Number L;\n    v6 = Number;\n  }\n  *(_QWORD *)a1 = v5;\n  *(_DWORD *)(a1 + Number) = v4;\n  *(_DWORD *)(a1 + Number) = v4 + Number;\n  *(_QWORD *)(a1 + Number) = v5 + ((v4 + Number) >> Number);\n  *(_DWORD *)(a1 + Number) = Number;\n  return v6;\n}", "code_t": "int __cdecl init_get_bits(GetBitContext_0 *s, const uint8_t *buffer,\n                          int bit_size) {\n  int bit_sizea;\n  const uint8_t *buffera;\n  int ret;\n  buffera = buffer;\n  bit_sizea = bit_size;\n  ret = Number;\n  if (bit_size > Number || bit_size < Number || !buffer) {\n    bit_sizea = Number;\n    buffera = Number L;\n    ret = Number;\n  }\n  s->buffer = buffera;\n  s->size_in_bits = bit_sizea;\n  s->size_in_bits_plus8 = bit_sizea + Number;\n  s->buffer_end = &buffera[(bit_sizea + Number) >> Number];\n  s->index = Number;\n  return ret;\n}", "var": [], "body_in_train": true}, {"repo_owner": "ystk", "repo_name": "debian-qemu", "path": "ystk/debian-qemu/f88c1a255eaeee5bea851dcf21260a0c95738a778e62bf86bfe5e460c4f8f78c", "path_in_repo": "ystk/debian-qemu//ppc-softmmu/tcg/tcg.o", "objdump": "00000000000041f5 <tcg_get_arg_str_i64>:\n    41f5:\t55                   \tpush   %rbp\n    41f6:\t48 89 e5             \tmov    %rsp,%rbp\n    41f9:\t48 83 ec 20          \tsub    $0x20,%rsp\n    41fd:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    4201:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    4205:\t89 55 ec             \tmov    %edx,-0x14(%rbp)\n    4208:\t89 4d e8             \tmov    %ecx,-0x18(%rbp)\n    420b:\t8b 4d e8             \tmov    -0x18(%rbp),%ecx\n    420e:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    4211:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n    4215:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4219:\t48 89 c7             \tmov    %rax,%rdi\n    421c:\te8 db fe ff ff       \tcallq  40fc <tcg_get_arg_str_idx>\n    4221:\tc9                   \tleaveq \n    4222:\tc3                   \tretq   ", "code_s": "char *__fastcall tcg_get_arg_str_i64(__int64 a1, char *a2, unsigned int a3,\n                                     int a4) {\n  return tcg_get_arg_str_idx(a1, a2, a3, a4);\n}", "code_t": "char *__cdecl tcg_get_arg_str_i64(TCGContext_0 *s, char *buf, int buf_size,\n                                  TCGv_i64 arg) {\n  return tcg_get_arg_str_idx(s, buf, buf_size, arg);\n}", "var": [], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/425fb15c8ec3f6f1ca32fd5c23da0e4432edf3a105b8d797229d1a4cad845c7d", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/asap/asap.o", "objdump": "0000000000003e00 <_ZN11asap_device5stb_cEv>:\n    3e00:\t55                   \tpush   %rbp\n    3e01:\t48 89 e5             \tmov    %rsp,%rbp\n    3e04:\t48 83 ec 20          \tsub    $0x20,%rsp\n    3e08:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    3e0c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3e10:\t8b 80 ec 22 00 00    \tmov    0x22ec(%rax),%eax\n    3e16:\tc1 e8 16             \tshr    $0x16,%eax\n    3e19:\t83 e0 1f             \tand    $0x1f,%eax\n    3e1c:\t8d 90 e0 ff 00 00    \tlea    0xffe0(%rax),%edx\n    3e22:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3e26:\t89 d2                \tmov    %edx,%edx\n    3e28:\t48 81 c2 c4 08 00 00 \tadd    $0x8c4,%rdx\n    3e2f:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    3e32:\t0f b6 c0             \tmovzbl %al,%eax\n    3e35:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    3e38:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3e3c:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    3e3f:\t89 90 e4 22 00 00    \tmov    %edx,0x22e4(%rax)\n    3e45:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    3e48:\t0f b6 d0             \tmovzbl %al,%edx\n    3e4b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3e4f:\t8b 80 ec 22 00 00    \tmov    0x22ec(%rax),%eax\n    3e55:\tc1 e8 10             \tshr    $0x10,%eax\n    3e58:\t83 e0 1f             \tand    $0x1f,%eax\n    3e5b:\t8d 88 e0 ff 00 00    \tlea    0xffe0(%rax),%ecx\n    3e61:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3e65:\t89 c9                \tmov    %ecx,%ecx\n    3e67:\t48 81 c1 c4 08 00 00 \tadd    $0x8c4,%rcx\n    3e6e:\t8b 0c 88             \tmov    (%rax,%rcx,4),%ecx\n    3e71:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3e75:\t8b 80 ec 22 00 00    \tmov    0x22ec(%rax),%eax\n    3e7b:\t0f b7 f0             \tmovzwl %ax,%esi\n    3e7e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3e82:\t89 f6                \tmov    %esi,%esi\n    3e84:\t48 81 c6 c4 08 00 00 \tadd    $0x8c4,%rsi\n    3e8b:\t8b 04 b0             \tmov    (%rax,%rsi,4),%eax\n    3e8e:\t01 c1                \tadd    %eax,%ecx\n    3e90:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3e94:\t89 ce                \tmov    %ecx,%esi\n    3e96:\t48 89 c7             \tmov    %rax,%rdi\n    3e99:\te8 00 00 00 00       \tcallq  3e9e <_ZN11asap_device5stb_cEv+0x9e>\n    3e9e:\t90                   \tnop\n    3e9f:\tc9                   \tleaveq \n    3ea0:\tc3                   \tretq   \n    3ea1:\t90                   \tnop", "code_s": "__int64 __fastcall asap_device stb_c(asap_device *this) {\n  int v2;\n  v2 = (unsigned __int8)*((_DWORD *)this +\n                          ((*((_DWORD *)this + Number) >> Number) & Number) +\n                          Number);\n  *((_DWORD *)this + Number) = v2;\n  return asap_device writebyte(\n      this,\n      *((_DWORD *)this + (unsigned __int16)*((_DWORD *)this + Number) +\n        Number) +\n          *((_DWORD *)this + (HIWORD(*((_DWORD *)this + Number)) & Number) +\n            Number),\n      v2);\n}", "code_t": "void __cdecl asap_device stb_c(asap_device *const this) {\n  UINT32 dst;\n  dst = (unsigned __int8)this\n            ->m_src2val[((this->m_op >> Number) & Number) + Number];\n  this->m_znflag = dst;\n  asap_device writebyte(\n      this,\n      this->m_src2val[(unsigned __int16)this->m_op] +\n          this->m_src2val[(HIWORD(this->m_op) & Number) + Number],\n      dst);\n}", "var": [], "body_in_train": false}, {"repo_owner": "eric-erki", "repo_name": "darknet", "path": "eric-erki/darknet/cab70a91f9add30d6d2817aa20290287c4bc702c38026ccf335b20656518f97a", "path_in_repo": "eric-erki/darknet//obj/utils.o", "objdump": "0000000000000558 <find_char_arg>:\n     558:\t55                   \tpush   %rbp\n     559:\t48 89 e5             \tmov    %rsp,%rbp\n     55c:\t48 83 ec 30          \tsub    $0x30,%rsp\n     560:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n     563:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     567:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     56b:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n     56f:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     576:\te9 94 00 00 00       \tjmpq   60f <find_char_arg+0xb7>\n     57b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     57e:\t48 98                \tcltq   \n     580:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     587:\t00 \n     588:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     58c:\t48 01 d0             \tadd    %rdx,%rax\n     58f:\t48 8b 00             \tmov    (%rax),%rax\n     592:\t48 85 c0             \ttest   %rax,%rax\n     595:\t74 73                \tje     60a <find_char_arg+0xb2>\n     597:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     59a:\t48 98                \tcltq   \n     59c:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     5a3:\t00 \n     5a4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     5a8:\t48 01 d0             \tadd    %rdx,%rax\n     5ab:\t48 8b 00             \tmov    (%rax),%rax\n     5ae:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     5b2:\t48 89 d6             \tmov    %rdx,%rsi\n     5b5:\t48 89 c7             \tmov    %rax,%rdi\n     5b8:\te8 00 00 00 00       \tcallq  5bd <find_char_arg+0x65>\n     5bd:\t85 c0                \ttest   %eax,%eax\n     5bf:\t75 4a                \tjne    60b <find_char_arg+0xb3>\n     5c1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     5c4:\t48 98                \tcltq   \n     5c6:\t48 83 c0 01          \tadd    $0x1,%rax\n     5ca:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     5d1:\t00 \n     5d2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     5d6:\t48 01 d0             \tadd    %rdx,%rax\n     5d9:\t48 8b 00             \tmov    (%rax),%rax\n     5dc:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     5e0:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     5e3:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n     5e7:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     5ea:\t48 89 ce             \tmov    %rcx,%rsi\n     5ed:\t89 c7                \tmov    %eax,%edi\n     5ef:\te8 00 00 00 00       \tcallq  5f4 <find_char_arg+0x9c>\n     5f4:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     5f7:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n     5fb:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     5fe:\t48 89 ce             \tmov    %rcx,%rsi\n     601:\t89 c7                \tmov    %eax,%edi\n     603:\te8 00 00 00 00       \tcallq  608 <find_char_arg+0xb0>\n     608:\teb 14                \tjmp    61e <find_char_arg+0xc6>\n     60a:\t90                   \tnop\n     60b:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     60f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     612:\t83 e8 01             \tsub    $0x1,%eax\n     615:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n     618:\t0f 8c 5d ff ff ff    \tjl     57b <find_char_arg+0x23>\n     61e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     622:\tc9                   \tleaveq \n     623:\tc3                   \tretq   ", "code_s": "__int64 __fastcall find_char_arg(int a1, __int64 a2, const char *a3,\n                                 __int64 a4) {\n  int i;\n  for (i = Number; i < a1 - Number; ++i) {\n    if (*(_QWORD *)(Number L * i + a2) &&\n        !strcmp(*(const char **)(Number L * i + a2), a3)) {\n      a4 = *(_QWORD *)(Number * (i + Number L) + a2);\n      del_arg(a1, a2, i);\n      del_arg(a1, a2, i);\n      return a4;\n    }\n  }\n  return a4;\n}", "code_t": "char *__cdecl find_char_arg(int argc, char **argv, char *arg, char *def) {\n  int i;\n  for (i = Number; i < argc - Number; ++i) {\n    if (argv[i] && !strcmp(argv[i], arg)) {\n      def = argv[i + Number];\n      del_arg(argc, argv, i);\n      del_arg(argc, argv, i);\n      return def;\n    }\n  }\n  return def;\n}", "var": [], "body_in_train": false}, {"repo_owner": "islanderz", "repo_name": "ARDRoneSDK", "path": "islanderz/ARDRoneSDK/7855c3ca514d139573ece4d0c77614e2f101580fe32776edcced49eb2f43c708", "path_in_repo": "islanderz/ARDRoneSDK/ARDroneLib/FFMPEG/ffmpeg/libavcodec/dsputil.o", "objdump": "00000000000370fe <put_no_rnd_qpel8_mc12_c>:\n   370fe:\t48 81 ec f8 00 00 00 \tsub    $0xf8,%rsp\n   37105:\t48 89 7c 24 10       \tmov    %rdi,0x10(%rsp)\n   3710a:\t48 89 74 24 08       \tmov    %rsi,0x8(%rsp)\n   3710f:\t89 54 24 04          \tmov    %edx,0x4(%rsp)\n   37113:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n   37117:\t48 8b 74 24 08       \tmov    0x8(%rsp),%rsi\n   3711c:\t48 8d 44 24 68       \tlea    0x68(%rsp),%rax\n   37121:\t41 b8 09 00 00 00    \tmov    $0x9,%r8d\n   37127:\t89 d1                \tmov    %edx,%ecx\n   37129:\tba 10 00 00 00       \tmov    $0x10,%edx\n   3712e:\t48 89 c7             \tmov    %rax,%rdi\n   37131:\te8 fa 8f fc ff       \tcallq  130 <copy_block9>\n   37136:\t48 8d 74 24 68       \tlea    0x68(%rsp),%rsi\n   3713b:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n   37140:\t41 b8 09 00 00 00    \tmov    $0x9,%r8d\n   37146:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n   3714b:\tba 08 00 00 00       \tmov    $0x8,%edx\n   37150:\t48 89 c7             \tmov    %rax,%rdi\n   37153:\te8 9d d2 ff ff       \tcallq  343f5 <put_no_rnd_mpeg4_qpel8_h_lowpass>\n   37158:\t48 8d 54 24 68       \tlea    0x68(%rsp),%rdx\n   3715d:\t48 8d 74 24 18       \tlea    0x18(%rsp),%rsi\n   37162:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n   37167:\t6a 09                \tpushq  $0x9\n   37169:\t41 b9 10 00 00 00    \tmov    $0x10,%r9d\n   3716f:\t41 b8 08 00 00 00    \tmov    $0x8,%r8d\n   37175:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   3717a:\t48 89 c7             \tmov    %rax,%rdi\n   3717d:\te8 57 8d fe ff       \tcallq  1fed9 <put_no_rnd_pixels8_l2_8>\n   37182:\t48 83 c4 08          \tadd    $0x8,%rsp\n   37186:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n   3718a:\t48 8d 74 24 18       \tlea    0x18(%rsp),%rsi\n   3718f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   37194:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   37199:\t48 89 c7             \tmov    %rax,%rdi\n   3719c:\te8 9d d8 ff ff       \tcallq  34a3e <put_no_rnd_mpeg4_qpel8_v_lowpass>\n   371a1:\t90                   \tnop\n   371a2:\t48 81 c4 f8 00 00 00 \tadd    $0xf8,%rsp\n   371a9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall put_no_rnd_qpel8_mc12_c(_BYTE *a1, __int64 a2, int a3) {\n  unsigned __int8 v5[Number];\n  unsigned __int8 v6[Number];\n  copy_block9((__int64)v6, a2, Number, a3, Number);\n  put_no_rnd_mpeg4_qpel8_h_lowpass(v5, v6, Number, Number, Number);\n  put_no_rnd_pixels8_l2_8((__int64)v5, (__int64)v5, (__int64)v6, Number, Number,\n                          Number, Number);\n  return put_no_rnd_mpeg4_qpel8_v_lowpass(a1, v5, a3, Number);\n}", "code_t": "void __cdecl put_no_rnd_qpel8_mc12_c(uint8_t *dst, uint8_t *src, int stride) {\n  uint8_t halfH[Number];\n  uint8_t full[Number];\n  copy_block9(full, src, Number, stride, Number);\n  put_no_rnd_mpeg4_qpel8_h_lowpass(halfH, full, Number, Number, Number);\n  put_no_rnd_pixels8_l2_8(halfH, halfH, full, Number, Number, Number, Number);\n  put_no_rnd_mpeg4_qpel8_v_lowpass(dst, halfH, stride, Number);\n}", "var": [], "body_in_train": true}, {"repo_owner": "kjkasi", "repo_name": "030005", "path": "kjkasi/030005/42e3536ccbc1b695fb11b7d977771ee12fe1f447e7c6cf84d9004fd03c1822ae", "path_in_repo": "kjkasi/030005/ngos/JWNR2000_4EMRUS/SW/opensource/openssl/demos/eay/loadrsa", "objdump": "0000000000430ad3 <RSA_eay_init>:\n  430ad3:\t48 89 7c 24 f8       \tmov    %rdi,-0x8(%rsp)\n  430ad8:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n  430add:\t8b 40 74             \tmov    0x74(%rax),%eax\n  430ae0:\t83 c8 06             \tor     $0x6,%eax\n  430ae3:\t89 c2                \tmov    %eax,%edx\n  430ae5:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n  430aea:\t89 50 74             \tmov    %edx,0x74(%rax)\n  430aed:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  430af2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall RSA_eay_init(__int64 a1) {\n  *(_DWORD *)(a1 + Number) |= Number;\n  return Number L;\n}", "code_t": "int __cdecl RSA_eay_init(RSA *rsa) {\n  rsa->flags |= Number;\n  return Number;\n}", "var": [], "body_in_train": true}]