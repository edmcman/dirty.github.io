[{"repo_owner": "UFRGS-CAROL", "repo_name": "radiation-benchmarks", "path": "UFRGS-CAROL/radiation-benchmarks/a2a2e44b7d23efef16cc66835d128667404b4a1abb4a48228024e0d9c71c8c87", "path_in_repo": "UFRGS-CAROL/radiation-benchmarks/src/cuda/deprecated/bfs/obj/logs_processing.o", "objdump": "0000000000000000 <_Z8get_timev>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n   c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  11:\t48 89 c7             \tmov    %rax,%rdi\n  14:\te8 00 00 00 00       \tcallq  19 <_Z8get_timev+0x19>\n  19:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  1d:\t48 69 c0 40 42 0f 00 \timul   $0xf4240,%rax,%rax\n  24:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n  29:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  2d:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  32:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n  36:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 3e <_Z8get_timev+0x3e>\n  3d:\t00 \n  3e:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n  42:\tc9                   \tleaveq \n  43:\tc3                   \tretq   ", "code_s": "double get_time(void) {\n  struct timeval tv;\n  gettimeofday(&tv, Number L);\n  return ((double)SLODWORD(tv.tv_usec) +\n          (double)(Number * LODWORD(tv.tv_sec))) /\n         Number;\n}", "code_t": "double get_time(void) {\n  struct timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  return ((double)SLODWORD(<span class=\"supfact\">tv</span>.tv_usec) +\n          (double)(Number * LODWORD(<span class=\"supfact\">tv</span>.tv_sec))) /\n         Number;\n}", "var": [{"name": "tv", "type": "struct struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "tv", "ref_name": "tv", "ref_type": "struct struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "TeamFahQ", "repo_name": "kernel_linux-4.X.X-lz", "path": "TeamFahQ/kernel_linux-4.X.X-lz/fb244b30c10b2289514fa9a958e9ab08a81713046fc48c8392f70076e7b61367", "path_in_repo": "TeamFahQ/kernel_linux-4.X.X-lz//scripts/kconfig/conf", "objdump": "0000000000410158 <sym_calc_value>:\n  410158:\t48 83 ec 68          \tsub    $0x68,%rsp\n  41015c:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n  410161:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n  410167:\t0f 84 59 06 00 00    \tje     4107c6 <sym_calc_value+0x66e>\n  41016d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410172:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  410175:\t25 80 00 00 00       \tand    $0x80,%eax\n  41017a:\t85 c0                \ttest   %eax,%eax\n  41017c:\t0f 85 47 06 00 00    \tjne    4107c9 <sym_calc_value+0x671>\n  410182:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410187:\t48 89 c7             \tmov    %rax,%rdi\n  41018a:\te8 a2 3e ff ff       \tcallq  404031 <sym_is_choice_value>\n  41018f:\t84 c0                \ttest   %al,%al\n  410191:\t74 4f                \tje     4101e2 <sym_calc_value+0x8a>\n  410193:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410198:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  41019b:\t25 00 00 10 00       \tand    $0x100000,%eax\n  4101a0:\t85 c0                \ttest   %eax,%eax\n  4101a2:\t74 3e                \tje     4101e2 <sym_calc_value+0x8a>\n  4101a4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4101a9:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  4101ac:\t25 ff ff ef ff       \tand    $0xffefffff,%eax\n  4101b1:\t89 c2                \tmov    %eax,%edx\n  4101b3:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4101b8:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  4101bb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4101c0:\t48 89 c7             \tmov    %rax,%rdi\n  4101c3:\te8 12 f8 ff ff       \tcallq  40f9da <sym_get_choice_prop>\n  4101c8:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n  4101cd:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  4101d2:\t48 89 c7             \tmov    %rax,%rdi\n  4101d5:\te8 47 28 00 00       \tcallq  412a21 <prop_get_symbol>\n  4101da:\t48 89 c7             \tmov    %rax,%rdi\n  4101dd:\te8 76 ff ff ff       \tcallq  410158 <sym_calc_value>\n  4101e2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4101e7:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  4101ea:\t0c 80                \tor     $0x80,%al\n  4101ec:\t89 c2                \tmov    %eax,%edx\n  4101ee:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4101f3:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  4101f6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4101fb:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n  4101ff:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  410203:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n  410208:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n  41020d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410212:\t8b 40 10             \tmov    0x10(%rax),%eax\n  410215:\t83 f8 02             \tcmp    $0x2,%eax\n  410218:\t77 06                \tja     410220 <sym_calc_value+0xc8>\n  41021a:\t85 c0                \ttest   %eax,%eax\n  41021c:\t75 24                \tjne    410242 <sym_calc_value+0xea>\n  41021e:\teb 3c                \tjmp    41025c <sym_calc_value+0x104>\n  410220:\t83 e8 03             \tsub    $0x3,%eax\n  410223:\t83 f8 02             \tcmp    $0x2,%eax\n  410226:\t77 34                \tja     41025c <sym_calc_value+0x104>\n  410228:\t48 8b 05 69 e4 00 00 \tmov    0xe469(%rip),%rax        # 41e698 <symbol_empty+0x18>\n  41022f:\t48 8b 15 6a e4 00 00 \tmov    0xe46a(%rip),%rdx        # 41e6a0 <symbol_empty+0x20>\n  410236:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n  41023b:\t48 89 54 24 28       \tmov    %rdx,0x28(%rsp)\n  410240:\teb 3d                \tjmp    41027f <sym_calc_value+0x127>\n  410242:\t48 8b 05 af e3 00 00 \tmov    0xe3af(%rip),%rax        # 41e5f8 <symbol_no+0x18>\n  410249:\t48 8b 15 b0 e3 00 00 \tmov    0xe3b0(%rip),%rdx        # 41e600 <symbol_no+0x20>\n  410250:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n  410255:\t48 89 54 24 28       \tmov    %rdx,0x28(%rsp)\n  41025a:\teb 23                \tjmp    41027f <sym_calc_value+0x127>\n  41025c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410261:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  410265:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41026a:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n  41026e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410273:\tc7 40 20 00 00 00 00 \tmovl   $0x0,0x20(%rax)\n  41027a:\te9 4b 05 00 00       \tjmpq   4107ca <sym_calc_value+0x672>\n  41027f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410284:\t48 89 c7             \tmov    %rax,%rdi\n  410287:\te8 a5 3d ff ff       \tcallq  404031 <sym_is_choice_value>\n  41028c:\t83 f0 01             \txor    $0x1,%eax\n  41028f:\t84 c0                \ttest   %al,%al\n  410291:\t74 15                \tje     4102a8 <sym_calc_value+0x150>\n  410293:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410298:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  41029b:\t80 e4 fd             \tand    $0xfd,%ah\n  41029e:\t89 c2                \tmov    %eax,%edx\n  4102a0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4102a5:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  4102a8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4102ad:\t48 89 c7             \tmov    %rax,%rdi\n  4102b0:\te8 f3 fa ff ff       \tcallq  40fda8 <sym_calc_visibility>\n  4102b5:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n  4102ba:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n  4102bf:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n  4102c4:\t48 89 41 18          \tmov    %rax,0x18(%rcx)\n  4102c8:\t48 89 51 20          \tmov    %rdx,0x20(%rcx)\n  4102cc:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4102d1:\t48 89 c7             \tmov    %rax,%rdi\n  4102d4:\te8 62 f6 ff ff       \tcallq  40f93b <sym_get_type>\n  4102d9:\t83 f8 02             \tcmp    $0x2,%eax\n  4102dc:\t77 09                \tja     4102e7 <sym_calc_value+0x18f>\n  4102de:\t85 c0                \ttest   %eax,%eax\n  4102e0:\t75 16                \tjne    4102f8 <sym_calc_value+0x1a0>\n  4102e2:\te9 40 03 00 00       \tjmpq   410627 <sym_calc_value+0x4cf>\n  4102e7:\t83 e8 03             \tsub    $0x3,%eax\n  4102ea:\t83 f8 02             \tcmp    $0x2,%eax\n  4102ed:\t0f 87 34 03 00 00    \tja     410627 <sym_calc_value+0x4cf>\n  4102f3:\te9 83 02 00 00       \tjmpq   41057b <sym_calc_value+0x423>\n  4102f8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4102fd:\t48 89 c7             \tmov    %rax,%rdi\n  410300:\te8 2c 3d ff ff       \tcallq  404031 <sym_is_choice_value>\n  410305:\t84 c0                \ttest   %al,%al\n  410307:\t74 4c                \tje     410355 <sym_calc_value+0x1fd>\n  410309:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41030e:\t8b 40 68             \tmov    0x68(%rax),%eax\n  410311:\t83 f8 02             \tcmp    $0x2,%eax\n  410314:\t75 3f                \tjne    410355 <sym_calc_value+0x1fd>\n  410316:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41031b:\t48 89 c7             \tmov    %rax,%rdi\n  41031e:\te8 b7 f6 ff ff       \tcallq  40f9da <sym_get_choice_prop>\n  410323:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n  410328:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  41032d:\t48 89 c7             \tmov    %rax,%rdi\n  410330:\te8 ec 26 00 00       \tcallq  412a21 <prop_get_symbol>\n  410335:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  410339:\t48 39 44 24 08       \tcmp    %rax,0x8(%rsp)\n  41033e:\t75 07                \tjne    410347 <sym_calc_value+0x1ef>\n  410340:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  410345:\teb 05                \tjmp    41034c <sym_calc_value+0x1f4>\n  410347:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41034c:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n  410350:\te9 f6 01 00 00       \tjmpq   41054b <sym_calc_value+0x3f3>\n  410355:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41035a:\t8b 40 68             \tmov    0x68(%rax),%eax\n  41035d:\t85 c0                \ttest   %eax,%eax\n  41035f:\t74 44                \tje     4103a5 <sym_calc_value+0x24d>\n  410361:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410366:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  410369:\t80 cc 02             \tor     $0x2,%ah\n  41036c:\t89 c2                \tmov    %eax,%edx\n  41036e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410373:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  410376:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41037b:\t48 89 c7             \tmov    %rax,%rdi\n  41037e:\te8 e0 3c ff ff       \tcallq  404063 <sym_has_value>\n  410383:\t84 c0                \ttest   %al,%al\n  410385:\t74 1e                \tje     4103a5 <sym_calc_value+0x24d>\n  410387:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41038c:\t8b 50 68             \tmov    0x68(%rax),%edx\n  41038f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410394:\t8b 40 30             \tmov    0x30(%rax),%eax\n  410397:\t39 c2                \tcmp    %eax,%edx\n  410399:\t0f 46 c2             \tcmovbe %edx,%eax\n  41039c:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n  4103a0:\te9 a6 00 00 00       \tjmpq   41044b <sym_calc_value+0x2f3>\n  4103a5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4103aa:\t8b 80 90 00 00 00    \tmov    0x90(%rax),%eax\n  4103b0:\t85 c0                \ttest   %eax,%eax\n  4103b2:\t74 15                \tje     4103c9 <sym_calc_value+0x271>\n  4103b4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4103b9:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  4103bc:\t80 cc 02             \tor     $0x2,%ah\n  4103bf:\t89 c2                \tmov    %eax,%edx\n  4103c1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4103c6:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  4103c9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4103ce:\t48 89 c7             \tmov    %rax,%rdi\n  4103d1:\te8 42 3c ff ff       \tcallq  404018 <sym_is_choice>\n  4103d6:\t83 f0 01             \txor    $0x1,%eax\n  4103d9:\t84 c0                \ttest   %al,%al\n  4103db:\t74 6d                \tje     41044a <sym_calc_value+0x2f2>\n  4103dd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4103e2:\t48 89 c7             \tmov    %rax,%rdi\n  4103e5:\te8 76 f6 ff ff       \tcallq  40fa60 <sym_get_default_prop>\n  4103ea:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n  4103ef:\t48 83 7c 24 50 00    \tcmpq   $0x0,0x50(%rsp)\n  4103f5:\t74 53                \tje     41044a <sym_calc_value+0x2f2>\n  4103f7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4103fc:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  4103ff:\t80 cc 02             \tor     $0x2,%ah\n  410402:\t89 c2                \tmov    %eax,%edx\n  410404:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410409:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  41040c:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  410411:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  410415:\t48 89 c7             \tmov    %rax,%rdi\n  410418:\te8 d9 e6 ff ff       \tcallq  40eaf6 <expr_calc_value>\n  41041d:\t48 8b 54 24 50       \tmov    0x50(%rsp),%rdx\n  410422:\t8b 52 28             \tmov    0x28(%rdx),%edx\n  410425:\t39 d0                \tcmp    %edx,%eax\n  410427:\t73 13                \tjae    41043c <sym_calc_value+0x2e4>\n  410429:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  41042e:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  410432:\t48 89 c7             \tmov    %rax,%rdi\n  410435:\te8 bc e6 ff ff       \tcallq  40eaf6 <expr_calc_value>\n  41043a:\teb 08                \tjmp    410444 <sym_calc_value+0x2ec>\n  41043c:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  410441:\t8b 40 28             \tmov    0x28(%rax),%eax\n  410444:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n  410448:\teb 01                \tjmp    41044b <sym_calc_value+0x2f3>\n  41044a:\t90                   \tnop\n  41044b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410450:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n  410456:\t85 c0                \ttest   %eax,%eax\n  410458:\t0f 85 d5 00 00 00    \tjne    410533 <sym_calc_value+0x3db>\n  41045e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410463:\t8b 80 90 00 00 00    \tmov    0x90(%rax),%eax\n  410469:\t85 c0                \ttest   %eax,%eax\n  41046b:\t0f 84 c2 00 00 00    \tje     410533 <sym_calc_value+0x3db>\n  410471:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410476:\t48 8b 50 78          \tmov    0x78(%rax),%rdx\n  41047a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41047f:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n  410486:\t48 89 d6             \tmov    %rdx,%rsi\n  410489:\t48 89 c7             \tmov    %rax,%rdi\n  41048c:\te8 da ea ff ff       \tcallq  40ef6b <expr_simplify_unmet_dep>\n  410491:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n  410496:\t48 8b 05 c3 e2 00 00 \tmov    0xe2c3(%rip),%rax        # 41e760 <stderr@@GLIBC_2.2.5>\n  41049d:\t48 89 c1             \tmov    %rax,%rcx\n  4104a0:\tba 0a 00 00 00       \tmov    $0xa,%edx\n  4104a5:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4104aa:\tbf 4c 99 41 00       \tmov    $0x41994c,%edi\n  4104af:\te8 bc 1f ff ff       \tcallq  402470 <fwrite@plt>\n  4104b4:\t48 8b 15 a5 e2 00 00 \tmov    0xe2a5(%rip),%rdx        # 41e760 <stderr@@GLIBC_2.2.5>\n  4104bb:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n  4104c0:\t48 89 d6             \tmov    %rdx,%rsi\n  4104c3:\t48 89 c7             \tmov    %rax,%rdi\n  4104c6:\te8 e3 f1 ff ff       \tcallq  40f6ae <expr_fprint>\n  4104cb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4104d0:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  4104d4:\t48 8b 05 85 e2 00 00 \tmov    0xe285(%rip),%rax        # 41e760 <stderr@@GLIBC_2.2.5>\n  4104db:\tbe 58 99 41 00       \tmov    $0x419958,%esi\n  4104e0:\t48 89 c7             \tmov    %rax,%rdi\n  4104e3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4104e8:\te8 03 1e ff ff       \tcallq  4022f0 <fprintf@plt>\n  4104ed:\t48 8b 15 6c e2 00 00 \tmov    0xe26c(%rip),%rdx        # 41e760 <stderr@@GLIBC_2.2.5>\n  4104f4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4104f9:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n  4104fd:\t48 89 d6             \tmov    %rdx,%rsi\n  410500:\t48 89 c7             \tmov    %rax,%rdi\n  410503:\te8 a6 f1 ff ff       \tcallq  40f6ae <expr_fprint>\n  410508:\t48 8b 05 51 e2 00 00 \tmov    0xe251(%rip),%rax        # 41e760 <stderr@@GLIBC_2.2.5>\n  41050f:\t48 89 c1             \tmov    %rax,%rcx\n  410512:\tba 02 00 00 00       \tmov    $0x2,%edx\n  410517:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  41051c:\tbf 8b 99 41 00       \tmov    $0x41998b,%edi\n  410521:\te8 4a 1f ff ff       \tcallq  402470 <fwrite@plt>\n  410526:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n  41052b:\t48 89 c7             \tmov    %rax,%rdi\n  41052e:\te8 06 c4 ff ff       \tcallq  40c939 <expr_free>\n  410533:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410538:\t8b 90 90 00 00 00    \tmov    0x90(%rax),%edx\n  41053e:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n  410542:\t39 c2                \tcmp    %eax,%edx\n  410544:\t0f 43 c2             \tcmovae %edx,%eax\n  410547:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n  41054b:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n  41054f:\t83 f8 01             \tcmp    $0x1,%eax\n  410552:\t0f 85 cb 00 00 00    \tjne    410623 <sym_calc_value+0x4cb>\n  410558:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41055d:\t48 89 c7             \tmov    %rax,%rdi\n  410560:\te8 d6 f3 ff ff       \tcallq  40f93b <sym_get_type>\n  410565:\t83 f8 01             \tcmp    $0x1,%eax\n  410568:\t0f 85 b5 00 00 00    \tjne    410623 <sym_calc_value+0x4cb>\n  41056e:\tc7 44 24 28 02 00 00 \tmovl   $0x2,0x28(%rsp)\n  410575:\t00 \n  410576:\te9 a8 00 00 00       \tjmpq   410623 <sym_calc_value+0x4cb>\n  41057b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410580:\t8b 40 68             \tmov    0x68(%rax),%eax\n  410583:\t85 c0                \ttest   %eax,%eax\n  410585:\t74 36                \tje     4105bd <sym_calc_value+0x465>\n  410587:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41058c:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  41058f:\t80 cc 02             \tor     $0x2,%ah\n  410592:\t89 c2                \tmov    %eax,%edx\n  410594:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410599:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  41059c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4105a1:\t48 89 c7             \tmov    %rax,%rdi\n  4105a4:\te8 ba 3a ff ff       \tcallq  404063 <sym_has_value>\n  4105a9:\t84 c0                \ttest   %al,%al\n  4105ab:\t74 10                \tje     4105bd <sym_calc_value+0x465>\n  4105ad:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4105b2:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  4105b6:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n  4105bb:\teb 6a                \tjmp    410627 <sym_calc_value+0x4cf>\n  4105bd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4105c2:\t48 89 c7             \tmov    %rax,%rdi\n  4105c5:\te8 96 f4 ff ff       \tcallq  40fa60 <sym_get_default_prop>\n  4105ca:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n  4105cf:\t48 83 7c 24 50 00    \tcmpq   $0x0,0x50(%rsp)\n  4105d5:\t74 4f                \tje     410626 <sym_calc_value+0x4ce>\n  4105d7:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  4105dc:\t48 89 c7             \tmov    %rax,%rdi\n  4105df:\te8 3d 24 00 00       \tcallq  412a21 <prop_get_symbol>\n  4105e4:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n  4105e9:\t48 83 7c 24 48 00    \tcmpq   $0x0,0x48(%rsp)\n  4105ef:\t74 35                \tje     410626 <sym_calc_value+0x4ce>\n  4105f1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4105f6:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  4105f9:\t80 cc 02             \tor     $0x2,%ah\n  4105fc:\t89 c2                \tmov    %eax,%edx\n  4105fe:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410603:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  410606:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n  41060b:\t48 89 c7             \tmov    %rax,%rdi\n  41060e:\te8 45 fb ff ff       \tcallq  410158 <sym_calc_value>\n  410613:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n  410618:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  41061c:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n  410621:\teb 03                \tjmp    410626 <sym_calc_value+0x4ce>\n  410623:\t90                   \tnop\n  410624:\teb 01                \tjmp    410627 <sym_calc_value+0x4cf>\n  410626:\t90                   \tnop\n  410627:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n  41062c:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n  410631:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n  410636:\t48 89 41 18          \tmov    %rax,0x18(%rcx)\n  41063a:\t48 89 51 20          \tmov    %rdx,0x20(%rcx)\n  41063e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410643:\t48 89 c7             \tmov    %rax,%rdi\n  410646:\te8 cd 39 ff ff       \tcallq  404018 <sym_is_choice>\n  41064b:\t84 c0                \ttest   %al,%al\n  41064d:\t74 1f                \tje     41066e <sym_calc_value+0x516>\n  41064f:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n  410653:\t83 f8 02             \tcmp    $0x2,%eax\n  410656:\t75 16                \tjne    41066e <sym_calc_value+0x516>\n  410658:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41065d:\t48 89 c7             \tmov    %rax,%rdi\n  410660:\te8 f6 f9 ff ff       \tcallq  41005b <sym_calc_choice>\n  410665:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n  41066a:\t48 89 42 18          \tmov    %rax,0x18(%rdx)\n  41066e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410673:\t48 89 c7             \tmov    %rax,%rdi\n  410676:\te8 27 f5 ff ff       \tcallq  40fba2 <sym_validate_range>\n  41067b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410680:\t48 8d 48 18          \tlea    0x18(%rax),%rcx\n  410684:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  410689:\tba 10 00 00 00       \tmov    $0x10,%edx\n  41068e:\t48 89 ce             \tmov    %rcx,%rsi\n  410691:\t48 89 c7             \tmov    %rax,%rdi\n  410694:\te8 e7 1b ff ff       \tcallq  402280 <memcmp@plt>\n  410699:\t85 c0                \ttest   %eax,%eax\n  41069b:\t74 30                \tje     4106cd <sym_calc_value+0x575>\n  41069d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4106a2:\t48 89 c7             \tmov    %rax,%rdi\n  4106a5:\te8 2b f6 ff ff       \tcallq  40fcd5 <sym_set_changed>\n  4106aa:\t48 8b 05 ef 2b 02 00 \tmov    0x22bef(%rip),%rax        # 4332a0 <modules_sym>\n  4106b1:\t48 39 44 24 08       \tcmp    %rax,0x8(%rsp)\n  4106b6:\t75 15                \tjne    4106cd <sym_calc_value+0x575>\n  4106b8:\te8 83 f6 ff ff       \tcallq  40fd40 <sym_set_all_changed>\n  4106bd:\t48 8b 05 dc 2b 02 00 \tmov    0x22bdc(%rip),%rax        # 4332a0 <modules_sym>\n  4106c4:\t8b 40 20             \tmov    0x20(%rax),%eax\n  4106c7:\t89 05 d3 f3 00 00    \tmov    %eax,0xf3d3(%rip)        # 41faa0 <modules_val>\n  4106cd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4106d2:\t48 89 c7             \tmov    %rax,%rdi\n  4106d5:\te8 3e 39 ff ff       \tcallq  404018 <sym_is_choice>\n  4106da:\t84 c0                \ttest   %al,%al\n  4106dc:\t0f 84 9e 00 00 00    \tje     410780 <sym_calc_value+0x628>\n  4106e2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4106e7:\t48 89 c7             \tmov    %rax,%rdi\n  4106ea:\te8 eb f2 ff ff       \tcallq  40f9da <sym_get_choice_prop>\n  4106ef:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n  4106f4:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  4106f9:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  4106fd:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n  410702:\teb 5e                \tjmp    410762 <sym_calc_value+0x60a>\n  410704:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410709:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  41070c:\t25 00 02 00 00       \tand    $0x200,%eax\n  410711:\t85 c0                \ttest   %eax,%eax\n  410713:\t74 21                \tje     410736 <sym_calc_value+0x5de>\n  410715:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n  41071a:\t8b 40 68             \tmov    0x68(%rax),%eax\n  41071d:\t85 c0                \ttest   %eax,%eax\n  41071f:\t74 15                \tje     410736 <sym_calc_value+0x5de>\n  410721:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n  410726:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  410729:\t80 cc 02             \tor     $0x2,%ah\n  41072c:\t89 c2                \tmov    %eax,%edx\n  41072e:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n  410733:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  410736:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41073b:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  41073e:\t25 00 04 00 00       \tand    $0x400,%eax\n  410743:\t85 c0                \ttest   %eax,%eax\n  410745:\t74 0d                \tje     410754 <sym_calc_value+0x5fc>\n  410747:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n  41074c:\t48 89 c7             \tmov    %rax,%rdi\n  41074f:\te8 81 f5 ff ff       \tcallq  40fcd5 <sym_set_changed>\n  410754:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n  410759:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  41075d:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n  410762:\t48 83 7c 24 58 00    \tcmpq   $0x0,0x58(%rsp)\n  410768:\t74 16                \tje     410780 <sym_calc_value+0x628>\n  41076a:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n  41076f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  410773:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n  410778:\t48 83 7c 24 38 00    \tcmpq   $0x0,0x38(%rsp)\n  41077e:\t75 84                \tjne    410704 <sym_calc_value+0x5ac>\n  410780:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410785:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  410788:\t25 00 10 00 00       \tand    $0x1000,%eax\n  41078d:\t85 c0                \ttest   %eax,%eax\n  41078f:\t74 15                \tje     4107a6 <sym_calc_value+0x64e>\n  410791:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  410796:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  410799:\t80 e4 fd             \tand    $0xfd,%ah\n  41079c:\t89 c2                \tmov    %eax,%edx\n  41079e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4107a3:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  4107a6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4107ab:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  4107ae:\t25 00 00 10 00       \tand    $0x100000,%eax\n  4107b3:\t85 c0                \ttest   %eax,%eax\n  4107b5:\t74 13                \tje     4107ca <sym_calc_value+0x672>\n  4107b7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4107bc:\t48 89 c7             \tmov    %rax,%rdi\n  4107bf:\te8 c1 b8 ff ff       \tcallq  40c085 <set_all_choice_values>\n  4107c4:\teb 04                \tjmp    4107ca <sym_calc_value+0x672>\n  4107c6:\t90                   \tnop\n  4107c7:\teb 01                \tjmp    4107ca <sym_calc_value+0x672>\n  4107c9:\t90                   \tnop\n  4107ca:\t48 83 c4 68          \tadd    $0x68,%rsp\n  4107ce:\tc3                   \tretq   ", "code_s": "void __fastcall sym_calc_value(__int64 a1) {\n  __int64 v1;\n  int v2;\n  __int64 v3;\n  unsigned int v4;\n  int v5;\n  __int64 v6;\n  unsigned int v7;\n  int v8;\n  int v9;\n  unsigned int v10;\n  int v11;\n  int v12;\n  int v13;\n  int v14;\n  int v15;\n  int v16;\n  __int64 v17;\n  int v18;\n  int v19;\n  __int64 s1[Number];\n  char *v21;\n  __int64 v22;\n  __int64 v23;\n  unsigned int *v24;\n  __int64 v25;\n  __int64 *v26;\n  __int64 i;\n  if (a1 && (*(_DWORD *)(a1 + Number) & Number) == Number) {\n    if (sym_is_choice_value_0(a1) &&\n        (*(_DWORD *)(a1 + Number) & Number) != Number) {\n      *(_DWORD *)(a1 + Number) &= Number;\n      v26 = sym_get_choice_prop(a1);\n      v1 = prop_get_symbol(v26);\n      sym_calc_value(v1);\n    }\n    v2 = *(_DWORD *)(a1 + Number);\n    LOBYTE(v2) = v2 | Number;\n    *(_DWORD *)(a1 + Number) = v2;\n    v3 = *(_QWORD *)(a1 + Number);\n    s1[Number] = *(_QWORD *)(a1 + Number);\n    s1[Number] = v3;\n    v4 = *(_DWORD *)(a1 + Number);\n    if (v4 > Number) {\n      if (v4 - Number > Number) {\n      LABEL_12:\n        *(_QWORD *)(a1 + Number) = *(_QWORD *)(a1 + Number);\n        *(_DWORD *)(a1 + Number) = Number;\n        return;\n      }\n      v21 = (char *)off_41E698;\n      v22 = qword_41E6A0;\n    } else {\n      if (!v4)\n        goto LABEL_12;\n      v21 = off_41E5F8;\n      v22 = qword_41E600;\n    }\n    if (!sym_is_choice_value_0(a1)) {\n      v5 = *(_DWORD *)(a1 + Number);\n      BYTE1(v5) &= Number;\n      *(_DWORD *)(a1 + Number) = v5;\n    }\n    sym_calc_visibility(a1);\n    v6 = v22;\n    *(_QWORD *)(a1 + Number) = v21;\n    *(_QWORD *)(a1 + Number) = v6;\n    v7 = sym_get_type(a1);\n    if (v7 > Number) {\n      if (v7 - Number <= Number) {\n        if (*(_DWORD *)(a1 + Number) &&\n            (v15 = *(_DWORD *)(a1 + Number), BYTE1(v15) |= Number,\n             *(_DWORD *)(a1 + Number) = v15, sym_has_value_0(a1))) {\n          v21 = *(char **)(a1 + Number);\n        } else {\n          v26 = sym_get_default_prop(a1);\n          if (v26) {\n            v25 = prop_get_symbol(v26);\n            if (v25) {\n              v16 = *(_DWORD *)(a1 + Number);\n              BYTE1(v16) |= Number;\n              *(_DWORD *)(a1 + Number) = v16;\n              sym_calc_value(v25);\n              v21 = *(char **)(v25 + Number);\n            }\n          }\n        }\n      }\n    } else if (v7) {\n      if (sym_is_choice_value_0(a1) && *(_DWORD *)(a1 + Number) == Number) {\n        v26 = sym_get_choice_prop(a1);\n        if (a1 == *(_QWORD *)(prop_get_symbol(v26) + Number))\n          v8 = Number;\n        else\n          v8 = Number;\n        LODWORD(v22) = v8;\n      } else {\n        if (*(_DWORD *)(a1 + Number) &&\n            (v9 = *(_DWORD *)(a1 + Number), BYTE1(v9) |= Number,\n             *(_DWORD *)(a1 + Number) = v9, sym_has_value_0(a1))) {\n          v10 = *(_DWORD *)(a1 + Number);\n          if (*(_DWORD *)(a1 + Number) <= v10)\n            v10 = *(_DWORD *)(a1 + Number);\n          LODWORD(v22) = v10;\n        } else {\n          if (*(_DWORD *)(a1 + Number)) {\n            v11 = *(_DWORD *)(a1 + Number);\n            BYTE1(v11) |= Number;\n            *(_DWORD *)(a1 + Number) = v11;\n          }\n          if (!sym_is_choice_0(a1)) {\n            v26 = sym_get_default_prop(a1);\n            if (v26) {\n              v12 = *(_DWORD *)(a1 + Number);\n              BYTE1(v12) |= Number;\n              *(_DWORD *)(a1 + Number) = v12;\n              if ((unsigned int)expr_calc_value((unsigned int *)v26[Number]) >=\n                  *((_DWORD *)v26 + Number))\n                v13 = *((_DWORD *)v26 + Number);\n              else\n                v13 = expr_calc_value((unsigned int *)v26[Number]);\n              LODWORD(v22) = v13;\n            }\n          }\n        }\n        if (!*(_DWORD *)(a1 + Number) && *(_DWORD *)(a1 + Number)) {\n          v24 = (unsigned int *)expr_simplify_unmet_dep(\n              *(unsigned int **)(a1 + Number), *(_QWORD **)(a1 + Number));\n          fwrite(String, Number, Number, stderr);\n          expr_fprint(v24, (__int64)stderr);\n          fprintf(stderr, String, *(const char **)(a1 + Number));\n          expr_fprint(*(unsigned int **)(a1 + Number), (__int64)stderr);\n          fwrite(String, Number, Number, stderr);\n          expr_free(v24);\n        }\n        v14 = v22;\n        if (*(_DWORD *)(a1 + Number) >= (unsigned int)v22)\n          v14 = *(_DWORD *)(a1 + Number);\n        LODWORD(v22) = v14;\n      }\n      if ((_DWORD)v22 == Number && (unsigned int)sym_get_type(a1) == Number)\n        LODWORD(v22) = Number;\n    }\n    v17 = v22;\n    *(_QWORD *)(a1 + Number) = v21;\n    *(_QWORD *)(a1 + Number) = v17;\n    if (sym_is_choice_0(a1) && (_DWORD)v22 == Number)\n      *(_QWORD *)(a1 + Number) = sym_calc_choice(a1);\n    sym_validate_range(a1);\n    if (memcmp(s1, (const void *)(a1 + Number), Number)) {\n      sym_set_changed(a1);\n      if (a1 == modules_sym) {\n        sym_set_all_changed();\n        modules_val = *(_DWORD *)(modules_sym + Number);\n      }\n    }\n    if (sym_is_choice_0(a1)) {\n      v26 = sym_get_choice_prop(a1);\n      for (i = v26[Number]; i; i = *(_QWORD *)(i + Number)) {\n        v23 = *(_QWORD *)(i + Number);\n        if (!v23)\n          break;\n        if ((*(_DWORD *)(a1 + Number) & Number) != Number &&\n            *(_DWORD *)(v23 + Number)) {\n          v18 = *(_DWORD *)(v23 + Number);\n          BYTE1(v18) |= Number;\n          *(_DWORD *)(v23 + Number) = v18;\n        }\n        if ((*(_DWORD *)(a1 + Number) & Number) != Number)\n          sym_set_changed(v23);\n      }\n    }\n    if ((*(_DWORD *)(a1 + Number) & Number) != Number) {\n      v19 = *(_DWORD *)(a1 + Number);\n      BYTE1(v19) &= Number;\n      *(_DWORD *)(a1 + Number) = v19;\n    }\n    if ((*(_DWORD *)(a1 + Number) & Number) != Number)\n      set_all_choice_values(a1);\n  }\n}", "code_t": "void __cdecl sym_calc_value(symbol *sym) {\n  symbol *v1;\n  int v2;\n  __int64 v3;\n  symbol_type v4;\n  int v5;\n  __int64 v6;\n  symbol_type v7;\n  tristate_0 v8;\n  int v9;\n  tristate_0 v10;\n  int v11;\n  int v12;\n  tristate_0 v13;\n  tristate_0 v14;\n  int v15;\n  int v16;\n  __int64 v17;\n  int v18;\n  int v19;\n  symbol_value <span class=\"supfact\">oldval</span>;\n  symbol_value <span class=\"supfact\">newval</span>;\n  symbol *choice_sym;\n  expr *e_0;\n  symbol *ds_0;\n  property *prop;\n  expr *e;\n  if (sym && (sym->flags & Number) == Number) {\n    if (sym_is_choice_value_0(sym) && (sym->flags & Number) != Number) {\n      sym->flags &= Number;\n      prop = sym_get_choice_prop(sym);\n      v1 = prop_get_symbol(prop);\n      sym_calc_value(v1);\n    }\n    v2 = sym->flags;\n    LOBYTE(v2) = v2 | Number;\n    sym->flags = v2;\n    v3 = *(_QWORD *)&sym->curr.tri;\n    <span class=\"supfact\">oldval</span>.val = sym->curr.val;\n    *(_QWORD *)&<span class=\"supfact\">oldval</span>.tri = v3;\n    v4 = sym->type;\n    if ((unsigned int)v4 > S_TRISTATE) {\n      if ((unsigned int)(v4 - Number) > Number) {\n      LABEL_12:\n        sym->curr.val = sym->name;\n        sym->curr.tri = no;\n        return;\n      }\n      <span class=\"supfact\">newval</span> = symbol_empty.curr;\n    } else {\n      if (v4 == S_UNKNOWN)\n        goto LABEL_12;\n      <span class=\"supfact\">newval</span> = symbol_no.curr;\n    }\n    if (!sym_is_choice_value_0(sym)) {\n      v5 = sym->flags;\n      BYTE1(v5) &= Number;\n      sym->flags = v5;\n    }\n    sym_calc_visibility(sym);\n    v6 = *(_QWORD *)&<span class=\"supfact\">newval</span>.tri;\n    sym->curr.val = <span class=\"supfact\">newval</span>.val;\n    *(_QWORD *)&sym->curr.tri = v6;\n    v7 = sym_get_type(sym);\n    if ((unsigned int)v7 > S_TRISTATE) {\n      if ((unsigned int)(v7 - Number) <= Number) {\n        if (sym->visible && (v15 = sym->flags, BYTE1(v15) |= Number,\n                             sym->flags = v15, sym_has_value_0(sym))) {\n          <span class=\"supfact\">newval</span>.val = sym->def[Number].val;\n        } else {\n          prop = sym_get_default_prop(sym);\n          if (prop) {\n            ds_0 = prop_get_symbol(prop);\n            if (ds_0) {\n              v16 = sym->flags;\n              BYTE1(v16) |= Number;\n              sym->flags = v16;\n              sym_calc_value(ds_0);\n              <span class=\"supfact\">newval</span>.val = ds_0->curr.val;\n            }\n          }\n        }\n      }\n    } else if (v7) {\n      if (sym_is_choice_value_0(sym) && sym->visible == yes) {\n        prop = sym_get_choice_prop(sym);\n        if (sym == prop_get_symbol(prop)->curr.val)\n          v8 = yes;\n        else\n          v8 = no;\n        <span class=\"supfact\">newval</span>.tri = v8;\n      } else {\n        if (sym->visible && (v9 = sym->flags, BYTE1(v9) |= Number,\n                             sym->flags = v9, sym_has_value_0(sym))) {\n          v10 = sym->def[Number].tri;\n          if (sym->visible <= (unsigned int)v10)\n            v10 = sym->visible;\n          <span class=\"supfact\">newval</span>.tri = v10;\n        } else {\n          if (sym->rev_dep.tri) {\n            v11 = sym->flags;\n            BYTE1(v11) |= Number;\n            sym->flags = v11;\n          }\n          if (!sym_is_choice_0(sym)) {\n            prop = sym_get_default_prop(sym);\n            if (prop) {\n              v12 = sym->flags;\n              BYTE1(v12) |= Number;\n              sym->flags = v12;\n              if ((unsigned int)expr_calc_value(prop->expr) >=\n                  prop->visible.tri)\n                v13 = prop->visible.tri;\n              else\n                v13 = expr_calc_value(prop->expr);\n              <span class=\"supfact\">newval</span>.tri = v13;\n            }\n          }\n        }\n        if (sym->dir_dep.tri == no && sym->rev_dep.tri) {\n          e_0 = expr_simplify_unmet_dep(sym->rev_dep.expr, sym->dir_dep.expr);\n          fwrite(String, Number, Number, stderr);\n          expr_fprint(e_0, stderr);\n          fprintf(stderr, String, sym->name);\n          expr_fprint(sym->dir_dep.expr, stderr);\n          fwrite(String, Number, Number, stderr);\n          expr_free(e_0);\n        }\n        v14 = <span class=\"supfact\">newval</span>.tri;\n        if (sym->rev_dep.tri >= (unsigned int)<span class=\"supfact\">newval</span>.tri)\n          v14 = sym->rev_dep.tri;\n        <span class=\"supfact\">newval</span>.tri = v14;\n      }\n      if (<span class=\"supfact\">newval</span>.tri == mod && sym_get_type(sym) == S_BOOLEAN)\n        <span class=\"supfact\">newval</span>.tri = yes;\n    }\n    v17 = *(_QWORD *)&<span class=\"supfact\">newval</span>.tri;\n    sym->curr.val = <span class=\"supfact\">newval</span>.val;\n    *(_QWORD *)&sym->curr.tri = v17;\n    if (sym_is_choice_0(sym) && <span class=\"supfact\">newval</span>.tri == yes)\n      sym->curr.val = sym_calc_choice(sym);\n    sym_validate_range(sym);\n    if (memcmp(&<span class=\"supfact\">oldval</span>, &sym->curr, Number)) {\n      sym_set_changed(sym);\n      if (sym == modules_sym) {\n        sym_set_all_changed();\n        modules_val = modules_sym->curr.tri;\n      }\n    }\n    if (sym_is_choice_0(sym)) {\n      prop = sym_get_choice_prop(sym);\n      for (e = prop->expr; e; e = e->left.expr) {\n        choice_sym = e->right.sym;\n        if (!choice_sym)\n          break;\n        if ((sym->flags & Number) != Number && choice_sym->visible) {\n          v18 = choice_sym->flags;\n          BYTE1(v18) |= Number;\n          choice_sym->flags = v18;\n        }\n        if ((sym->flags & Number) != Number)\n          sym_set_changed(choice_sym);\n      }\n    }\n    if ((sym->flags & Number) != Number) {\n      v19 = sym->flags;\n      BYTE1(v19) &= Number;\n      sym->flags = v19;\n    }\n    if ((sym->flags & Number) != Number)\n      set_all_choice_values(sym);\n  }\n}", "var": [{"name": "s1", "type": "struct symbol_value { void * val; tristate_0 tri; PADDING (4); }", "pred_name": "oldval", "ref_name": "oldval", "ref_type": "struct symbol_value { void * val; tristate_0 tri; PADDING (4); }"}, {"name": "v21", "type": "struct symbol_value { void * val; tristate_0 tri; PADDING (4); }", "pred_name": "newval", "ref_name": "newval", "ref_type": "struct symbol_value { void * val; tristate_0 tri; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "OnePlusOSS", "repo_name": "android_kernel_oneplus_sm8150", "path": "OnePlusOSS/android_kernel_oneplus_sm8150/91d852325d30fde8418c35dc9dd64fe9dc0f61093947c0e4b10a00910cb7fd1d", "path_in_repo": "OnePlusOSS/android_kernel_oneplus_sm8150/tools/perf/builtin-help.o", "objdump": "0000000000001132 <get_html_page_path>:\n    1132:\t55                   \tpush   %rbp\n    1133:\t48 89 e5             \tmov    %rsp,%rbp\n    1136:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    113d:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n    1144:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n    114b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1152:\t00 00 \n    1154:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1158:\t31 c0                \txor    %eax,%eax\n    115a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    115f:\te8 00 00 00 00       \tcallq  1164 <get_html_page_path+0x32>\n    1164:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n    116b:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    1172:\t48 89 c6             \tmov    %rax,%rsi\n    1175:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    117a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    117f:\te8 00 00 00 00       \tcallq  1184 <get_html_page_path+0x52>\n    1184:\t48 89 c2             \tmov    %rax,%rdx\n    1187:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    118e:\t48 89 c6             \tmov    %rax,%rsi\n    1191:\t48 89 d7             \tmov    %rdx,%rdi\n    1194:\te8 00 00 00 00       \tcallq  1199 <get_html_page_path+0x67>\n    1199:\t85 c0                \ttest   %eax,%eax\n    119b:\t75 12                \tjne    11af <get_html_page_path+0x7d>\n    119d:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n    11a3:\t25 00 f0 00 00       \tand    $0xf000,%eax\n    11a8:\t3d 00 80 00 00       \tcmp    $0x8000,%eax\n    11ad:\t74 2d                \tje     11dc <get_html_page_path+0xaa>\n    11af:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 11b5 <get_html_page_path+0x83>\n    11b5:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n    11bc:\t48 89 d1             \tmov    %rdx,%rcx\n    11bf:\tba 00 00 00 00       \tmov    $0x0,%edx\n    11c4:\t89 c6                \tmov    %eax,%esi\n    11c6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    11cb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    11d0:\te8 00 00 00 00       \tcallq  11d5 <get_html_page_path+0xa3>\n    11d5:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    11da:\teb 27                \tjmp    1203 <get_html_page_path+0xd1>\n    11dc:\t48 8b 8d 40 ff ff ff \tmov    -0xc0(%rbp),%rcx\n    11e3:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n    11ea:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    11f1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11f6:\t48 89 c7             \tmov    %rax,%rdi\n    11f9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    11fe:\te8 00 00 00 00       \tcallq  1203 <get_html_page_path+0xd1>\n    1203:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1207:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    120e:\t00 00 \n    1210:\t74 05                \tje     1217 <get_html_page_path+0xe5>\n    1212:\te8 00 00 00 00       \tcallq  1217 <get_html_page_path+0xe5>\n    1217:\tc9                   \tleaveq \n    1218:\tc3                   \tretq   ", "code_s": "int __fastcall get_html_page_path(char **a1, const char *a2) {\n  const char *v2;\n  const char *v4;\n  struct stat64 v5;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  v4 = (const char *)system_path(String);\n  v2 = (const char *)mkpath(String, v4);\n  if (!stat64(v2, &v5) && (v5.st_mode & Number) == Number)\n    return asprintf(a1, String, v4, a2);\n  eprintf(Number L, verbose, String, v4);\n  return Number;\n}", "code_t": "int __cdecl get_html_page_path(char **page_path, const char *page) {\n  const char *v2;\n  const char *html_path;\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  html_path = (const char *)system_path(String);\n  v2 = (const char *)mkpath(String, html_path);\n  if (!stat64(v2, (struct stat64 *)&<span class=\"supfact\">st</span>) &&\n      (<span class=\"supfact\">st</span>.st_mode & Number) == Number)\n    return asprintf(page_path, String, html_path, page);\n  eprintf(Number L, verbose, String, html_path);\n  return Number;\n}", "var": [{"name": "v5", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "st", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "javaperson", "repo_name": "swapdb", "path": "javaperson/swapdb/60bc66aaa5a77756c5e777fedb57b5f7b63c6d07aa005cd6567862015e81b8d5", "path_in_repo": "javaperson/swapdb/swap-ssdb-1.9.2/deps/rocksdb/utilities/env_mirror.o", "objdump": "0000000000000000 <_ZN7rocksdb18WritableFileMirror5CloseEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 55                \tpush   %r13\n   6:\t41 54                \tpush   %r12\n   8:\t49 89 fc             \tmov    %rdi,%r12\n   b:\t53                   \tpush   %rbx\n   c:\t48 89 f3             \tmov    %rsi,%rbx\n   f:\t48 83 ec 18          \tsub    $0x18,%rsp\n  13:\t48 8b 76 20          \tmov    0x20(%rsi),%rsi\n  17:\t48 8b 06             \tmov    (%rsi),%rax\n  1a:\tff 50 28             \tcallq  *0x28(%rax)\n  1d:\t48 8b 73 28          \tmov    0x28(%rbx),%rsi\n  21:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n  25:\t48 8b 06             \tmov    (%rsi),%rax\n  28:\tff 50 28             \tcallq  *0x28(%rax)\n  2b:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  2e:\t41 39 04 24          \tcmp    %eax,(%r12)\n  32:\t75 1c                \tjne    50 <_ZN7rocksdb18WritableFileMirror5CloseEv+0x50>\n  34:\t48 8b 7d d8          \tmov    -0x28(%rbp),%rdi\n  38:\t48 85 ff             \ttest   %rdi,%rdi\n  3b:\t74 05                \tje     42 <_ZN7rocksdb18WritableFileMirror5CloseEv+0x42>\n  3d:\te8 00 00 00 00       \tcallq  42 <_ZN7rocksdb18WritableFileMirror5CloseEv+0x42>\n  42:\t48 83 c4 18          \tadd    $0x18,%rsp\n  46:\t4c 89 e0             \tmov    %r12,%rax\n  49:\t5b                   \tpop    %rbx\n  4a:\t41 5c                \tpop    %r12\n  4c:\t41 5d                \tpop    %r13\n  4e:\t5d                   \tpop    %rbp\n  4f:\tc3                   \tretq   \n  50:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  55:\tba 7f 00 00 00       \tmov    $0x7f,%edx\n  5a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  5f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  64:\te8 00 00 00 00       \tcallq  69 <_ZN7rocksdb18WritableFileMirror5CloseEv+0x69>\n  69:\t49 89 c5             \tmov    %rax,%r13\n  6c:\t49 8b 7c 24 08       \tmov    0x8(%r12),%rdi\n  71:\t48 85 ff             \ttest   %rdi,%rdi\n  74:\t74 10                \tje     86 <_ZN7rocksdb18WritableFileMirror5CloseEv+0x86>\n  76:\tc5 f8 77             \tvzeroupper \n  79:\te8 00 00 00 00       \tcallq  7e <_ZN7rocksdb18WritableFileMirror5CloseEv+0x7e>\n  7e:\t4c 89 ef             \tmov    %r13,%rdi\n  81:\te8 00 00 00 00       \tcallq  86 <_ZN7rocksdb18WritableFileMirror5CloseEv+0x86>\n  86:\tc5 f8 77             \tvzeroupper \n  89:\teb f3                \tjmp    7e <_ZN7rocksdb18WritableFileMirror5CloseEv+0x7e>", "code_s": "rocksdb WritableFileMirror *__fastcall rocksdb WritableFileMirror\nClose(rocksdb WritableFileMirror *this, __int64 a2) {\n  int v3;\n  void *v4;\n  (*(void (**)(void))(**(_QWORD **)(a2 + Number) + Number L))();\n  (*(void(__fastcall **)(int *))(**(_QWORD **)(a2 + Number) + Number L))(&v3);\n  if (*(_DWORD *)this != v3)\n    _assert_fail(String, String, Number, String);\n  if (v4)\n    operator delete[](v4);\n  return this;\n}", "code_t": "_DWORD *__fastcall rocksdb WritableFileMirror\nClose(_DWORD *a1, rocksdb WritableFileMirror *const this) {\n  rocksdb Status <span class=\"supfact\">bs</span>;\n  (*(void (**)(void))(*(_QWORD *)this->a_._M_t._M_t._M_head_impl + Number L))();\n  (*(void(__fastcall **)(rocksdb Status *))(\n      *(_QWORD *)this->b_._M_t._M_t._M_head_impl + Number L))(\n      &<span class=\"supfact\">bs</span>);\n  if (*a1 != <span class=\"supfact\">bs</span>.code_)\n    _assert_fail(String, String, Number, String);\n  if (<span class=\"supfact\">bs</span>.state_)\n    operator delete[]((void *)<span class=\"supfact\">bs</span>.state_);\n  return a1;\n}", "var": [{"name": "v3", "type": "int", "pred_name": "v3", "ref_name": "bs", "ref_type": "struct rocksdb::Status { rocksdb::Status::Code code_; rocksdb::Status::SubCode subcode_; const char * state_; }"}], "body_in_train": false}, {"repo_owner": "mligor", "repo_name": "jucpp", "path": "mligor/jucpp/cc29fc3e9694847e1e3419d302477cfee7793b4552555260ffbb248b3bd65f3a", "path_in_repo": "mligor/jucpp//build/session.obj", "objdump": "0000000000000160 <_ZN5jucpp4http14SessionManager13random_stringEm>:\n     160:\t55                   \tpush   %rbp\n     161:\t48 89 e5             \tmov    %rsp,%rbp\n     164:\t53                   \tpush   %rbx\n     165:\t48 83 ec 48          \tsub    $0x48,%rsp\n     169:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     16d:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     171:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n     175:\t48 89 c7             \tmov    %rax,%rdi\n     178:\te8 00 00 00 00       \tcallq  17d <_ZN5jucpp4http14SessionManager13random_stringEm+0x1d>\n     17d:\t48 8d 55 ef          \tlea    -0x11(%rbp),%rdx\n     181:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n     185:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     189:\t48 89 d1             \tmov    %rdx,%rcx\n     18c:\tba 00 00 00 00       \tmov    $0x0,%edx\n     191:\t48 89 c7             \tmov    %rax,%rdi\n     194:\te8 00 00 00 00       \tcallq  199 <_ZN5jucpp4http14SessionManager13random_stringEm+0x39>\n     199:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n     19d:\t48 89 c7             \tmov    %rax,%rdi\n     1a0:\te8 00 00 00 00       \tcallq  1a5 <_ZN5jucpp4http14SessionManager13random_stringEm+0x45>\n     1a5:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     1a9:\t48 89 c7             \tmov    %rax,%rdi\n     1ac:\te8 00 00 00 00       \tcallq  1b1 <_ZN5jucpp4http14SessionManager13random_stringEm+0x51>\n     1b1:\t48 89 c2             \tmov    %rax,%rdx\n     1b4:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     1b8:\t48 89 c6             \tmov    %rax,%rsi\n     1bb:\t48 89 d7             \tmov    %rdx,%rdi\n     1be:\te8 55 11 00 00       \tcallq  1318 <_ZSt10generate_nIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmZN5jucpp4http14SessionManager13random_stringEmEUlvE_ET_SE_T0_T1_>\n     1c3:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n     1c7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     1cb:\t48 89 d6             \tmov    %rdx,%rsi\n     1ce:\t48 89 c7             \tmov    %rax,%rdi\n     1d1:\te8 00 00 00 00       \tcallq  1d6 <_ZN5jucpp4http14SessionManager13random_stringEm+0x76>\n     1d6:\t90                   \tnop\n     1d7:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     1db:\t48 89 c7             \tmov    %rax,%rdi\n     1de:\te8 00 00 00 00       \tcallq  1e3 <_ZN5jucpp4http14SessionManager13random_stringEm+0x83>\n     1e3:\teb 34                \tjmp    219 <_ZN5jucpp4http14SessionManager13random_stringEm+0xb9>\n     1e5:\t48 89 c3             \tmov    %rax,%rbx\n     1e8:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n     1ec:\t48 89 c7             \tmov    %rax,%rdi\n     1ef:\te8 00 00 00 00       \tcallq  1f4 <_ZN5jucpp4http14SessionManager13random_stringEm+0x94>\n     1f4:\t48 89 d8             \tmov    %rbx,%rax\n     1f7:\t48 89 c7             \tmov    %rax,%rdi\n     1fa:\te8 00 00 00 00       \tcallq  1ff <_ZN5jucpp4http14SessionManager13random_stringEm+0x9f>\n     1ff:\t48 89 c3             \tmov    %rax,%rbx\n     202:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     206:\t48 89 c7             \tmov    %rax,%rdi\n     209:\te8 00 00 00 00       \tcallq  20e <_ZN5jucpp4http14SessionManager13random_stringEm+0xae>\n     20e:\t48 89 d8             \tmov    %rbx,%rax\n     211:\t48 89 c7             \tmov    %rax,%rdi\n     214:\te8 00 00 00 00       \tcallq  219 <_ZN5jucpp4http14SessionManager13random_stringEm+0xb9>\n     219:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     21d:\t48 83 c4 48          \tadd    $0x48,%rsp\n     221:\t5b                   \tpop    %rbx\n     222:\t5d                   \tpop    %rbp\n     223:\tc3                   \tretq   ", "code_s": "jucpp http SessionManager *__fastcall jucpp http SessionManager\nrandom_string(jucpp http SessionManager *this, __int64 a2) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  char v7[Number];\n  char v8[Number];\n  std allocator<char> allocator(v8);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string(v7, a2, Number L, v8);\n  std allocator<char> ~allocator(v8);\n  v2 =\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          begin(v7);\n  std generate_n<\n      __gnu_cxx __normal_iterator<\n          char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>>>,\n      unsigned long,\n      jucpp http SessionManager random_string(unsigned long){\n          lambda(void) #Number}>(v2, a2, v2, v3, v4, v5, a2);\n  jucpp String String(this, v7);\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string(v7);\n  return this;\n}", "code_t": "jucpp String *__cdecl jucpp http SessionManager\nrandom_string(jucpp String *retstr, size_t length) {\n  __gnu_cxx __normal_iterator<\n      char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>>>\n      v2;\n  std string <span class=\"supfact\">str</span>;\n  char v5[Number];\n  std allocator<char> allocator(v5);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string(&<span class=\"supfact\">str</span>, length, Number L, v5);\n  std allocator<char> ~allocator(v5);\n  v2._M_current = (char *)\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          begin(&<span class=\"supfact\">str</span>);\n  std generate_n<\n      __gnu_cxx __normal_iterator<\n          char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>>>,\n      unsigned long,\n      jucpp http SessionManager random_string(unsigned long){\n          lambda(void) #Number}>(\n      v2, length,\n      (jucpp http SessionManager random_string<lambda()>)v2._M_current);\n  jucpp String String(retstr, &<span class=\"supfact\">str</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">str</span>);\n  return retstr;\n}", "var": [{"name": "v7", "type": "char[47]", "pred_name": "v7", "ref_name": "str", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "lanpishu6300", "repo_name": "test", "path": "lanpishu6300/test/9d028c997ede3aa6a5c37522df7a7cda820c858c238def8ed5bcfd34f0db6cee", "path_in_repo": "lanpishu6300/test/redis-3.0.3/deps/lua/src/lparser.o", "objdump": "0000000000002b47 <forbody>:\n    2b47:\t55                   \tpush   %rbp\n    2b48:\t48 89 e5             \tmov    %rsp,%rbp\n    2b4b:\t53                   \tpush   %rbx\n    2b4c:\t48 83 ec 48          \tsub    $0x48,%rsp\n    2b50:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    2b54:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    2b57:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n    2b5a:\t89 4d bc             \tmov    %ecx,-0x44(%rbp)\n    2b5d:\t44 89 45 b8          \tmov    %r8d,-0x48(%rbp)\n    2b61:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2b65:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    2b69:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2b6d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2b71:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    2b76:\t48 89 c7             \tmov    %rax,%rdi\n    2b79:\te8 9d d9 ff ff       \tcallq  51b <adjustlocalvars>\n    2b7e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2b82:\tbe 03 01 00 00       \tmov    $0x103,%esi\n    2b87:\t48 89 c7             \tmov    %rax,%rdi\n    2b8a:\te8 12 d6 ff ff       \tcallq  1a1 <checknext>\n    2b8f:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n    2b93:\t74 1b                \tje     2bb0 <forbody+0x69>\n    2b95:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    2b98:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2b9c:\tb9 fe ff 01 00       \tmov    $0x1fffe,%ecx\n    2ba1:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    2ba6:\t48 89 c7             \tmov    %rax,%rdi\n    2ba9:\te8 00 00 00 00       \tcallq  2bae <forbody+0x67>\n    2bae:\teb 0c                \tjmp    2bbc <forbody+0x75>\n    2bb0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2bb4:\t48 89 c7             \tmov    %rax,%rdi\n    2bb7:\te8 00 00 00 00       \tcallq  2bbc <forbody+0x75>\n    2bbc:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    2bbf:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n    2bc3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2bc7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2bcc:\t48 89 ce             \tmov    %rcx,%rsi\n    2bcf:\t48 89 c7             \tmov    %rax,%rdi\n    2bd2:\te8 39 df ff ff       \tcallq  b10 <enterblock>\n    2bd7:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n    2bda:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2bde:\t89 d6                \tmov    %edx,%esi\n    2be0:\t48 89 c7             \tmov    %rax,%rdi\n    2be3:\te8 33 d9 ff ff       \tcallq  51b <adjustlocalvars>\n    2be8:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n    2beb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2bef:\t89 d6                \tmov    %edx,%esi\n    2bf1:\t48 89 c7             \tmov    %rax,%rdi\n    2bf4:\te8 00 00 00 00       \tcallq  2bf9 <forbody+0xb2>\n    2bf9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2bfd:\t48 89 c7             \tmov    %rax,%rdi\n    2c00:\te8 e9 f8 ff ff       \tcallq  24ee <block>\n    2c05:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c09:\t48 89 c7             \tmov    %rax,%rdi\n    2c0c:\te8 5b df ff ff       \tcallq  b6c <leaveblock>\n    2c11:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    2c14:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c18:\t89 d6                \tmov    %edx,%esi\n    2c1a:\t48 89 c7             \tmov    %rax,%rdi\n    2c1d:\te8 00 00 00 00       \tcallq  2c22 <forbody+0xdb>\n    2c22:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n    2c26:\t74 1b                \tje     2c43 <forbody+0xfc>\n    2c28:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    2c2b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c2f:\tb9 fe ff 01 00       \tmov    $0x1fffe,%ecx\n    2c34:\tbe 1f 00 00 00       \tmov    $0x1f,%esi\n    2c39:\t48 89 c7             \tmov    %rax,%rdi\n    2c3c:\te8 00 00 00 00       \tcallq  2c41 <forbody+0xfa>\n    2c41:\teb 1f                \tjmp    2c62 <forbody+0x11b>\n    2c43:\t8b 4d bc             \tmov    -0x44(%rbp),%ecx\n    2c46:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    2c49:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c4d:\t41 89 c8             \tmov    %ecx,%r8d\n    2c50:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    2c55:\tbe 21 00 00 00       \tmov    $0x21,%esi\n    2c5a:\t48 89 c7             \tmov    %rax,%rdi\n    2c5d:\te8 00 00 00 00       \tcallq  2c62 <forbody+0x11b>\n    2c62:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    2c65:\t8b 55 c0             \tmov    -0x40(%rbp),%edx\n    2c68:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c6c:\t89 d6                \tmov    %edx,%esi\n    2c6e:\t48 89 c7             \tmov    %rax,%rdi\n    2c71:\te8 00 00 00 00       \tcallq  2c76 <forbody+0x12f>\n    2c76:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    2c79:\t8d 58 01             \tlea    0x1(%rax),%ebx\n    2c7c:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n    2c80:\t75 0e                \tjne    2c90 <forbody+0x149>\n    2c82:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c86:\t48 89 c7             \tmov    %rax,%rdi\n    2c89:\te8 00 00 00 00       \tcallq  2c8e <forbody+0x147>\n    2c8e:\teb 03                \tjmp    2c93 <forbody+0x14c>\n    2c90:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n    2c93:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    2c97:\t89 da                \tmov    %ebx,%edx\n    2c99:\t89 c6                \tmov    %eax,%esi\n    2c9b:\t48 89 cf             \tmov    %rcx,%rdi\n    2c9e:\te8 00 00 00 00       \tcallq  2ca3 <forbody+0x15c>\n    2ca3:\t90                   \tnop\n    2ca4:\t48 83 c4 48          \tadd    $0x48,%rsp\n    2ca8:\t5b                   \tpop    %rbx\n    2ca9:\t5d                   \tpop    %rbp\n    2caa:\tc3                   \tretq   ", "code_s": "__int64 __fastcall forbody(__int64 a1, unsigned int a2, unsigned int a3,\n                           unsigned int a4, int a5) {\n  unsigned int v5;\n  int v6;\n  unsigned int v7;\n  unsigned int v8;\n  char v13[Number];\n  int v14;\n  unsigned int v15;\n  __int64 v16;\n  v16 = *(_QWORD *)(a1 + Number);\n  adjustlocalvars(a1, Number);\n  checknext(a1, Number);\n  if (a5)\n    v5 = luaK_codeABx(v16, Number L, a2, Number L);\n  else\n    v5 = luaK_jump(v16);\n  v15 = v5;\n  enterblock(v16, (__int64)v13, Number);\n  adjustlocalvars(a1, a4);\n  luaK_reserveregs(v16, a4);\n  block(a1);\n  leaveblock(v16);\n  luaK_patchtohere(v16, v15);\n  if (a5)\n    v6 = luaK_codeABx(v16, Number L, a2, Number L);\n  else\n    v6 = luaK_codeABC(v16, Number L, a2, Number L, a4);\n  v14 = v6;\n  luaK_fixline(v16, a3);\n  v7 = v15 + Number;\n  if (a5)\n    v8 = v14;\n  else\n    v8 = luaK_jump(v16);\n  return luaK_patchlist(v16, v8, v7);\n}", "code_t": "void __cdecl forbody(LexState_0 *ls, int base, int line, int nvars, int isnum) {\n  int v5;\n  int v6;\n  unsigned int v7;\n  unsigned int v8;\n  BlockCnt_0 <span class=\"supfact\">bl_0</span>;\n  int endfor;\n  int prep;\n  FuncState_0 *fs_0;\n  fs_0 = ls->fs;\n  adjustlocalvars(ls, Number);\n  checknext(ls, Number);\n  if (isnum)\n    v5 = luaK_codeABx(fs_0, Number L, (unsigned int)base, Number L);\n  else\n    v5 = luaK_jump(fs_0);\n  prep = v5;\n  enterblock(fs_0, &<span class=\"supfact\">bl_0</span>, Number);\n  adjustlocalvars(ls, nvars);\n  luaK_reserveregs(fs_0, (unsigned int)nvars);\n  block(ls);\n  leaveblock(fs_0);\n  luaK_patchtohere(fs_0, (unsigned int)prep);\n  if (isnum)\n    v6 = luaK_codeABx(fs_0, Number L, (unsigned int)base, Number L);\n  else\n    v6 = luaK_codeABC(fs_0, Number L, (unsigned int)base, Number L,\n                      (unsigned int)nvars);\n  endfor = v6;\n  luaK_fixline(fs_0, (unsigned int)line);\n  v7 = prep + Number;\n  if (isnum)\n    v8 = endfor;\n  else\n    v8 = luaK_jump(fs_0);\n  luaK_patchlist(fs_0, v8, v7);\n}", "var": [{"name": "v13", "type": "struct BlockCnt_0 { BlockCnt * previous; int breaklist; lu_byte nactvar; lu_byte upval; lu_byte isbreakable; PADDING (1); }", "pred_name": "bl_0", "ref_name": "bl_0", "ref_type": "struct BlockCnt_0 { BlockCnt * previous; int breaklist; lu_byte nactvar; lu_byte upval; lu_byte isbreakable; PADDING (1); }"}], "body_in_train": true}, {"repo_owner": "scbwin", "repo_name": "sanguo", "path": "scbwin/sanguo/0cdbaa36898b295c0fe1affd7c1cb3098c2042371c353827f20c8d3c3f184d8a", "path_in_repo": "scbwin/sanguo/cocos2dx/external/chipmunk/proj.linux/obj/release/cpCollision.o", "objdump": "0000000000000531 <cpPolyShapeValueOnAxis>:\n     531:\t55                   \tpush   %rbp\n     532:\t48 89 e5             \tmov    %rsp,%rbp\n     535:\t48 83 ec 40          \tsub    $0x40,%rsp\n     539:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     53d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     542:\tba 00 00 00 00       \tmov    $0x0,%edx\n     547:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n     54c:\t66 48 0f 7e ca       \tmovq   %xmm1,%rdx\n     551:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     555:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     559:\tf2 0f 11 55 d0       \tmovsd  %xmm2,-0x30(%rbp)\n     55e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     562:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n     569:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     56d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     571:\tf2 0f 10 10          \tmovsd  (%rax),%xmm2\n     575:\tf2 0f 10 40 08       \tmovsd  0x8(%rax),%xmm0\n     57a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     57e:\tf2 0f 10 4d c8       \tmovsd  -0x38(%rbp),%xmm1\n     583:\t66 0f 28 d8          \tmovapd %xmm0,%xmm3\n     587:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n     58c:\te8 5e fd ff ff       \tcallq  2ef <cpvdot>\n     591:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n     596:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     59a:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n     5a1:\teb 52                \tjmp    5f5 <cpPolyShapeValueOnAxis+0xc4>\n     5a3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     5a6:\t48 98                \tcltq   \n     5a8:\t48 c1 e0 04          \tshl    $0x4,%rax\n     5ac:\t48 89 c2             \tmov    %rax,%rdx\n     5af:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5b3:\t48 01 d0             \tadd    %rdx,%rax\n     5b6:\tf2 0f 10 10          \tmovsd  (%rax),%xmm2\n     5ba:\tf2 0f 10 40 08       \tmovsd  0x8(%rax),%xmm0\n     5bf:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     5c3:\tf2 0f 10 4d c8       \tmovsd  -0x38(%rbp),%xmm1\n     5c8:\t66 0f 28 d8          \tmovapd %xmm0,%xmm3\n     5cc:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n     5d1:\te8 19 fd ff ff       \tcallq  2ef <cpvdot>\n     5d6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     5da:\t66 0f 28 c8          \tmovapd %xmm0,%xmm1\n     5de:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n     5e3:\te8 40 fa ff ff       \tcallq  28 <cpfmin>\n     5e8:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n     5ed:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     5f1:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n     5f5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     5f9:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n     5ff:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n     602:\t7c 9f                \tjl     5a3 <cpPolyShapeValueOnAxis+0x72>\n     604:\tf2 0f 10 45 f8       \tmovsd  -0x8(%rbp),%xmm0\n     609:\tf2 0f 5c 45 d0       \tsubsd  -0x30(%rbp),%xmm0\n     60e:\tc9                   \tleaveq \n     60f:\tc3                   \tretq   ", "code_s": "double __fastcall cpPolyShapeValueOnAxis(__int64 a1, double a2, double a3,\n                                         double a4) {\n  double v4;\n  double *v7;\n  int i;\n  double v9;\n  v7 = *(double **)(a1 + Number);\n  v9 = cpvdot(a2, a3, *v7, v7[Number]);\n  for (i = Number; i < *(_DWORD *)(a1 + Number); ++i) {\n    v4 = cpvdot(a2, a3, v7[Number * i], v7[Number * i + Number]);\n    v9 = cpfmin(v9, v4);\n  }\n  return v9 - a4;\n}", "code_t": "cpFloat __cdecl cpPolyShapeValueOnAxis(const cpPolyShape_0 *poly,\n                                       const cpVect_0 <span class=\"supfact\">n</span>,\n                                       const cpFloat d) {\n  cpFloat v3;\n  cpVect_0 na;\n  const cpVect_0 *verts;\n  int i;\n  double min;\n  na.x = <span class=\"supfact\">n</span>.x;\n  na.y = <span class=\"supfact\">n</span>.y;\n  verts = poly->tVerts;\n  min = cpvdot(\n      (const cpVect_0)__PAIR128__(*(unsigned __int64 *)&<span class=\"supfact\">n</span>.y,\n                                  *(unsigned __int64 *)&<span class=\"supfact\">n</span>.x),\n      *verts);\n  for (i = Number; i < poly->numVerts; ++i) {\n    v3 = cpvdot(na, verts[i]);\n    min = cpfmin(min, v3);\n  }\n  return min - d;\n}", "var": [{"name": "a2", "type": "struct const cpVect_0 { cpFloat x; cpFloat y; }", "pred_name": "n", "ref_name": "n", "ref_type": "struct const cpVect_0 { cpFloat x; cpFloat y; }"}], "body_in_train": true}, {"repo_owner": "gyc2015", "repo_name": "GYC", "path": "gyc2015/GYC/56b566358efc31a405e4a2e7e8792375bb832b0505b212bf908ac7ddbe85bbec", "path_in_repo": "gyc2015/GYC/examples/tdictionary", "objdump": "0000000000407118 <vector_int_order_dec>:\n  407118:\t55                   \tpush   %rbp\n  407119:\t48 89 e5             \tmov    %rsp,%rbp\n  40711c:\t48 83 ec 70          \tsub    $0x70,%rsp\n  407120:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  407124:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  407128:\t89 55 9c             \tmov    %edx,-0x64(%rbp)\n  40712b:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n  407130:\t75 19                \tjne    40714b <vector_int_order_dec+0x33>\n  407132:\tb9 80 ae 40 00       \tmov    $0x40ae80,%ecx\n  407137:\tba 72 00 00 00       \tmov    $0x72,%edx\n  40713c:\tbe 66 a2 40 00       \tmov    $0x40a266,%esi\n  407141:\tbf 4c a1 40 00       \tmov    $0x40a14c,%edi\n  407146:\te8 35 9f ff ff       \tcallq  401080 <__assert_fail@plt>\n  40714b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40714f:\t48 8b 00             \tmov    (%rax),%rax\n  407152:\t48 85 c0             \ttest   %rax,%rax\n  407155:\t75 19                \tjne    407170 <vector_int_order_dec+0x58>\n  407157:\tb9 80 ae 40 00       \tmov    $0x40ae80,%ecx\n  40715c:\tba 73 00 00 00       \tmov    $0x73,%edx\n  407161:\tbe 66 a2 40 00       \tmov    $0x40a266,%esi\n  407166:\tbf 56 a1 40 00       \tmov    $0x40a156,%edi\n  40716b:\te8 10 9f ff ff       \tcallq  401080 <__assert_fail@plt>\n  407170:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  407174:\t48 89 c7             \tmov    %rax,%rdi\n  407177:\te8 74 af ff ff       \tcallq  4020f0 <vector_int_size>\n  40717c:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40717f:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  407182:\t8d 50 01             \tlea    0x1(%rax),%edx\n  407185:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  407189:\t89 d6                \tmov    %edx,%esi\n  40718b:\t48 89 c7             \tmov    %rax,%rdi\n  40718e:\te8 f4 a8 ff ff       \tcallq  401a87 <vector_int_init>\n  407193:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  407196:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  40719a:\t89 d6                \tmov    %edx,%esi\n  40719c:\t48 89 c7             \tmov    %rax,%rdi\n  40719f:\te8 e3 a8 ff ff       \tcallq  401a87 <vector_int_init>\n  4071a4:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  4071a7:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  4071ab:\t89 d6                \tmov    %edx,%esi\n  4071ad:\t48 89 c7             \tmov    %rax,%rdi\n  4071b0:\te8 1a b1 ff ff       \tcallq  4022cf <vector_int_resize>\n  4071b5:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4071bc:\teb 7a                \tjmp    407238 <vector_int_order_dec+0x120>\n  4071be:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4071c2:\t48 8b 00             \tmov    (%rax),%rax\n  4071c5:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4071c8:\t48 63 d2             \tmovslq %edx,%rdx\n  4071cb:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  4071cf:\t48 01 d0             \tadd    %rdx,%rax\n  4071d2:\t8b 00                \tmov    (%rax),%eax\n  4071d4:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n  4071d7:\t29 c2                \tsub    %eax,%edx\n  4071d9:\t89 d0                \tmov    %edx,%eax\n  4071db:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4071de:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4071e2:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4071e5:\t48 63 d2             \tmovslq %edx,%rdx\n  4071e8:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  4071ec:\t48 01 d0             \tadd    %rdx,%rax\n  4071ef:\t8b 00                \tmov    (%rax),%eax\n  4071f1:\t85 c0                \ttest   %eax,%eax\n  4071f3:\t74 26                \tje     40721b <vector_int_order_dec+0x103>\n  4071f5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4071f9:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4071fc:\t48 63 d2             \tmovslq %edx,%rdx\n  4071ff:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  407203:\t48 01 d0             \tadd    %rdx,%rax\n  407206:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  40720a:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n  40720d:\t48 63 c9             \tmovslq %ecx,%rcx\n  407210:\t48 c1 e1 02          \tshl    $0x2,%rcx\n  407214:\t48 01 ca             \tadd    %rcx,%rdx\n  407217:\t8b 00                \tmov    (%rax),%eax\n  407219:\t89 02                \tmov    %eax,(%rdx)\n  40721b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40721f:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  407222:\t48 63 d2             \tmovslq %edx,%rdx\n  407225:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  407229:\t48 01 d0             \tadd    %rdx,%rax\n  40722c:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40722f:\t83 c2 01             \tadd    $0x1,%edx\n  407232:\t89 10                \tmov    %edx,(%rax)\n  407234:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  407238:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40723b:\t3b 45 f0             \tcmp    -0x10(%rbp),%eax\n  40723e:\t0f 8c 7a ff ff ff    \tjl     4071be <vector_int_order_dec+0xa6>\n  407244:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  40724b:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  407252:\te9 a8 00 00 00       \tjmpq   4072ff <vector_int_order_dec+0x1e7>\n  407257:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40725b:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40725e:\t48 63 d2             \tmovslq %edx,%rdx\n  407261:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  407265:\t48 01 d0             \tadd    %rdx,%rax\n  407268:\t8b 00                \tmov    (%rax),%eax\n  40726a:\t85 c0                \ttest   %eax,%eax\n  40726c:\t0f 84 89 00 00 00    \tje     4072fb <vector_int_order_dec+0x1e3>\n  407272:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  407276:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  407279:\t48 63 d2             \tmovslq %edx,%rdx\n  40727c:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  407280:\t48 01 d0             \tadd    %rdx,%rax\n  407283:\t8b 00                \tmov    (%rax),%eax\n  407285:\t83 e8 01             \tsub    $0x1,%eax\n  407288:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40728b:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  40728f:\t48 8b 08             \tmov    (%rax),%rcx\n  407292:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  407295:\t8d 50 01             \tlea    0x1(%rax),%edx\n  407298:\t89 55 f8             \tmov    %edx,-0x8(%rbp)\n  40729b:\t48 98                \tcltq   \n  40729d:\t48 c1 e0 02          \tshl    $0x2,%rax\n  4072a1:\t48 8d 14 01          \tlea    (%rcx,%rax,1),%rdx\n  4072a5:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  4072a8:\t89 02                \tmov    %eax,(%rdx)\n  4072aa:\teb 38                \tjmp    4072e4 <vector_int_order_dec+0x1cc>\n  4072ac:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  4072b0:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  4072b3:\t48 63 d2             \tmovslq %edx,%rdx\n  4072b6:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  4072ba:\t48 01 d0             \tadd    %rdx,%rax\n  4072bd:\t8b 00                \tmov    (%rax),%eax\n  4072bf:\t83 e8 01             \tsub    $0x1,%eax\n  4072c2:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4072c5:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  4072c9:\t48 8b 08             \tmov    (%rax),%rcx\n  4072cc:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4072cf:\t8d 50 01             \tlea    0x1(%rax),%edx\n  4072d2:\t89 55 f8             \tmov    %edx,-0x8(%rbp)\n  4072d5:\t48 98                \tcltq   \n  4072d7:\t48 c1 e0 02          \tshl    $0x2,%rax\n  4072db:\t48 8d 14 01          \tlea    (%rcx,%rax,1),%rdx\n  4072df:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  4072e2:\t89 02                \tmov    %eax,(%rdx)\n  4072e4:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  4072e8:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  4072eb:\t48 63 d2             \tmovslq %edx,%rdx\n  4072ee:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  4072f2:\t48 01 d0             \tadd    %rdx,%rax\n  4072f5:\t8b 00                \tmov    (%rax),%eax\n  4072f7:\t85 c0                \ttest   %eax,%eax\n  4072f9:\t75 b1                \tjne    4072ac <vector_int_order_dec+0x194>\n  4072fb:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4072ff:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  407302:\t3b 45 fc             \tcmp    -0x4(%rbp),%eax\n  407305:\t0f 8d 4c ff ff ff    \tjge    407257 <vector_int_order_dec+0x13f>\n  40730b:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  40730f:\t48 89 c7             \tmov    %rax,%rdi\n  407312:\te8 35 ac ff ff       \tcallq  401f4c <vector_int_destroy>\n  407317:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  40731b:\t48 89 c7             \tmov    %rax,%rdi\n  40731e:\te8 29 ac ff ff       \tcallq  401f4c <vector_int_destroy>\n  407323:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  407328:\tc9                   \tleaveq \n  407329:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vector_int_order_dec(_QWORD *a1, __int64 *a2, int a3) {\n  __int64 v3;\n  int v4;\n  __int64 v5;\n  int v6;\n  void *v9[Number];\n  void *v10[Number];\n  int v11;\n  int v12;\n  int v13;\n  int v14;\n  int i;\n  if (!a1)\n    __assert_fail(String, String, Number, String);\n  if (!*a1)\n    __assert_fail(String, String, Number, String);\n  v12 = vector_int_size(a1);\n  vector_int_init(v10, a3 + Number);\n  vector_int_init(v9, v12);\n  vector_int_resize((__int64)a2, v12);\n  for (i = Number; i < v12; ++i) {\n    v11 = a3 - *(_DWORD *)(Number L * i + *a1);\n    if (*((_DWORD *)v10[Number] + v11))\n      *((_DWORD *)v9[Number] + i) = *((_DWORD *)v10[Number] + v11);\n    *((_DWORD *)v10[Number] + v11) = i + Number;\n  }\n  v14 = Number;\n  for (i = Number; a3 >= i; ++i) {\n    if (*((_DWORD *)v10[Number] + i)) {\n      v13 = *((_DWORD *)v10[Number] + i) - Number;\n      v3 = *a2;\n      v4 = v14++;\n      *(_DWORD *)(v3 + Number L * v4) = v13;\n      while (*((_DWORD *)v9[Number] + v13)) {\n        v13 = *((_DWORD *)v9[Number] + v13) - Number;\n        v5 = *a2;\n        v6 = v14++;\n        *(_DWORD *)(v5 + Number L * v6) = v13;\n      }\n    }\n  }\n  vector_int_destroy((__int64)v10);\n  vector_int_destroy((__int64)v9);\n  return Number L;\n}", "code_t": "int __cdecl vector_int_order_dec(const vector_int_0 *v, vector_int_0 *ret,\n                                 int max) {\n  int *v3;\n  int v4;\n  int *v5;\n  int v6;\n  vector_int_0 <span class=\"supfact\">rad</span>;\n  vector_int_0 <span class=\"supfact\">ptr</span>;\n  int radix;\n  int n;\n  int next;\n  int j;\n  int i;\n  if (!v)\n    __assert_fail(String, String, Number, String);\n  if (!v->stor_begin)\n    __assert_fail(String, String, Number, String);\n  n = vector_int_size(v);\n  vector_int_init(&<span class=\"supfact\">ptr</span>, max + Number);\n  vector_int_init(&<span class=\"supfact\">rad</span>, n);\n  vector_int_resize(ret, n);\n  for (i = Number; i < n; ++i) {\n    radix = max - v->stor_begin[i];\n    if (<span class=\"supfact\">ptr</span>.stor_begin[radix])\n      <span class=\"supfact\">rad</span>.stor_begin[i] = <span class=\"supfact\">ptr</span>.stor_begin[radix];\n    <span class=\"supfact\">ptr</span>.stor_begin[radix] = i + Number;\n  }\n  j = Number;\n  for (i = Number; max >= i; ++i) {\n    if (<span class=\"supfact\">ptr</span>.stor_begin[i]) {\n      next = <span class=\"supfact\">ptr</span>.stor_begin[i] - Number;\n      v3 = ret->stor_begin;\n      v4 = j++;\n      v3[v4] = next;\n      while (<span class=\"supfact\">rad</span>.stor_begin[next]) {\n        next = <span class=\"supfact\">rad</span>.stor_begin[next] - Number;\n        v5 = ret->stor_begin;\n        v6 = j++;\n        v5[v6] = next;\n      }\n    }\n  }\n  vector_int_destroy(&<span class=\"supfact\">ptr</span>);\n  vector_int_destroy(&<span class=\"supfact\">rad</span>);\n  return Number;\n}", "var": [{"name": "v9", "type": "vector_ptr_0 *", "pred_name": "v", "ref_name": "rad", "ref_type": "struct vector_int_0 { int * stor_begin; int * stor_end; int * end; }"}, {"name": "v10", "type": "vector_ptr_0 *", "pred_name": "u", "ref_name": "ptr", "ref_type": "struct vector_int_0 { int * stor_begin; int * stor_end; int * end; }"}], "body_in_train": false}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/64ff4f1119dc9a3401eb29d3e647f585df0cc92c34240f110fee7bb356ba1046", "path_in_repo": "eerimoq/pumbaa/simba/tst/oam/shell/build/linux/obj/usr/src/repo/simba/src/sync/chan.o", "objdump": "0000000000000000 <chan_poll>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 50          \tsub    $0x50,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <chan_poll+0xd>\n   d:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  11:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  15:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c <chan_poll+0x1c>\n  1c:\t48 83 c0 01          \tadd    $0x1,%rax\n  20:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 27 <chan_poll+0x27>\n  27:\t48 8d 4d c8          \tlea    -0x38(%rbp),%rcx\n  2b:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  2f:\tba 08 00 00 00       \tmov    $0x8,%edx\n  34:\t48 89 ce             \tmov    %rcx,%rsi\n  37:\t48 89 c7             \tmov    %rax,%rdi\n  3a:\te8 00 00 00 00       \tcallq  3f <chan_poll+0x3f>\n  3f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 46 <chan_poll+0x46>\n  46:\t48 83 c0 01          \tadd    $0x1,%rax\n  4a:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 51 <chan_poll+0x51>\n  51:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  55:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  59:\t48 89 d6             \tmov    %rdx,%rsi\n  5c:\t48 89 c7             \tmov    %rax,%rdi\n  5f:\te8 00 00 00 00       \tcallq  64 <chan_poll+0x64>\n  64:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6b <chan_poll+0x6b>\n  6b:\t48 83 c0 01          \tadd    $0x1,%rax\n  6f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 76 <chan_poll+0x76>\n  76:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  7a:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  7e:\t48 89 d6             \tmov    %rdx,%rsi\n  81:\t48 89 c7             \tmov    %rax,%rdi\n  84:\te8 00 00 00 00       \tcallq  89 <chan_poll+0x89>\n  89:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  8d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 94 <chan_poll+0x94>\n  94:\t48 83 c0 01          \tadd    $0x1,%rax\n  98:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 9f <chan_poll+0x9f>\n  9f:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  a3:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  a7:\t48 89 d6             \tmov    %rdx,%rsi\n  aa:\t48 89 c7             \tmov    %rax,%rdi\n  ad:\te8 00 00 00 00       \tcallq  b2 <chan_poll+0xb2>\n  b2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  b6:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # bd <chan_poll+0xbd>\n  bd:\t48 83 c2 01          \tadd    $0x1,%rdx\n  c1:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # c8 <chan_poll+0xc8>\n  c8:\tc9                   \tleaveq \n  c9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall chan_poll(__int64 a1, __int64 a2) {\n  __int64 result;\n  char v3[Number];\n  _QWORD v4[Number];\n  __int64 v5;\n  ++_gcov0_chan_poll;\n  chan_list_init((__int64)v4, (__int64)v3, Number);\n  ++qword_1B88;\n  chan_list_add(v4, a1);\n  ++qword_1B90;\n  v5 = chan_list_poll((__int64)v4, a2);\n  ++qword_1B98;\n  chan_list_remove(v4, a1);\n  result = v5;\n  ++qword_1BA0;\n  return result;\n}", "code_t": "void *__cdecl chan_poll(void *chan_p, const time_t *timeout_p) {\n  void *result;\n  chan_t *workspace_p;\n  chan_list_t <span class=\"supfact\">list</span>;\n  void *res_p;\n  ++_gcov0_chan_poll;\n  chan_list_init(&<span class=\"supfact\">list</span>, &workspace_p, Number);\n  ++qword_1B88;\n  chan_list_add(&<span class=\"supfact\">list</span>, chan_p);\n  ++qword_1B90;\n  res_p = chan_list_poll(&<span class=\"supfact\">list</span>, timeout_p);\n  ++qword_1B98;\n  chan_list_remove(&<span class=\"supfact\">list</span>, chan_p);\n  result = res_p;\n  ++qword_1BA0;\n  return result;\n}", "var": [{"name": "v4", "type": "struct chan_list_t { chan_t ** chans_pp; size_t max; size_t len; int flags; PADDING (4); }", "pred_name": "list", "ref_name": "list", "ref_type": "struct chan_list_t { chan_t ** chans_pp; size_t max; size_t len; int flags; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "hmgle", "repo_name": "dot_matrix_font_to_bmp", "path": "hmgle/dot_matrix_font_to_bmp/0484392654b3383c58e036d39f38172370d4afc2448b4fb18a092cdba4b4106b", "path_in_repo": "hmgle/dot_matrix_font_to_bmp//bmps2bmp", "objdump": "0000000000401da4 <bmp_h_combin_3>:\n  401da4:\t55                   \tpush   %rbp\n  401da5:\t48 89 e5             \tmov    %rsp,%rbp\n  401da8:\t53                   \tpush   %rbx\n  401da9:\t48 81 ec b8 00 00 00 \tsub    $0xb8,%rsp\n  401db0:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  401db7:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n  401dbe:\t89 95 4c ff ff ff    \tmov    %edx,-0xb4(%rbp)\n  401dc4:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401dcb:\t48 8b 40 36          \tmov    0x36(%rax),%rax\n  401dcf:\t48 85 c0             \ttest   %rax,%rax\n  401dd2:\t75 79                \tjne    401e4d <bmp_h_combin_3+0xa9>\n  401dd4:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n  401ddb:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401de2:\tba 3e 00 00 00       \tmov    $0x3e,%edx\n  401de7:\t48 89 ce             \tmov    %rcx,%rsi\n  401dea:\t48 89 c7             \tmov    %rax,%rdi\n  401ded:\te8 7e f2 ff ff       \tcallq  401070 <memcpy@plt>\n  401df2:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401df9:\t8b 40 22             \tmov    0x22(%rax),%eax\n  401dfc:\t89 c0                \tmov    %eax,%eax\n  401dfe:\t48 89 c7             \tmov    %rax,%rdi\n  401e01:\te8 7a f2 ff ff       \tcallq  401080 <malloc@plt>\n  401e06:\t48 89 c2             \tmov    %rax,%rdx\n  401e09:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401e10:\t48 89 50 36          \tmov    %rdx,0x36(%rax)\n  401e14:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401e1b:\t8b 40 22             \tmov    0x22(%rax),%eax\n  401e1e:\t89 c2                \tmov    %eax,%edx\n  401e20:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401e27:\t48 8b 48 36          \tmov    0x36(%rax),%rcx\n  401e2b:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401e32:\t48 8b 40 36          \tmov    0x36(%rax),%rax\n  401e36:\t48 89 ce             \tmov    %rcx,%rsi\n  401e39:\t48 89 c7             \tmov    %rax,%rdi\n  401e3c:\te8 2f f2 ff ff       \tcallq  401070 <memcpy@plt>\n  401e41:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401e48:\te9 0b 03 00 00       \tjmpq   402158 <bmp_h_combin_3+0x3b4>\n  401e4d:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401e54:\t8b 50 16             \tmov    0x16(%rax),%edx\n  401e57:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401e5e:\t8b 40 16             \tmov    0x16(%rax),%eax\n  401e61:\t39 c2                \tcmp    %eax,%edx\n  401e63:\t0f 86 51 01 00 00    \tjbe    401fba <bmp_h_combin_3+0x216>\n  401e69:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401e70:\t8b 50 16             \tmov    0x16(%rax),%edx\n  401e73:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401e7a:\t8b 40 16             \tmov    0x16(%rax),%eax\n  401e7d:\t29 c2                \tsub    %eax,%edx\n  401e7f:\t89 d0                \tmov    %edx,%eax\n  401e81:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  401e84:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401e8b:\t0f b7 40 1c          \tmovzwl 0x1c(%rax),%eax\n  401e8f:\t0f b7 d0             \tmovzwl %ax,%edx\n  401e92:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401e99:\t8b 40 12             \tmov    0x12(%rax),%eax\n  401e9c:\t0f af c2             \timul   %edx,%eax\n  401e9f:\t83 c0 1f             \tadd    $0x1f,%eax\n  401ea2:\tc1 e8 05             \tshr    $0x5,%eax\n  401ea5:\tc1 e0 02             \tshl    $0x2,%eax\n  401ea8:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  401eab:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401eae:\t0f af 45 ec          \timul   -0x14(%rbp),%eax\n  401eb2:\t89 c0                \tmov    %eax,%eax\n  401eb4:\t48 89 c7             \tmov    %rax,%rdi\n  401eb7:\te8 c4 f1 ff ff       \tcallq  401080 <malloc@plt>\n  401ebc:\t48 89 45 d6          \tmov    %rax,-0x2a(%rbp)\n  401ec0:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401ec7:\t0f b7 40 1c          \tmovzwl 0x1c(%rax),%eax\n  401ecb:\t0f b7 c8             \tmovzwl %ax,%ecx\n  401ece:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401ed5:\t8b 70 12             \tmov    0x12(%rax),%esi\n  401ed8:\t8b bd 4c ff ff ff    \tmov    -0xb4(%rbp),%edi\n  401ede:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  401ee1:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  401ee5:\t41 89 f8             \tmov    %edi,%r8d\n  401ee8:\t48 89 c7             \tmov    %rax,%rdi\n  401eeb:\te8 44 f8 ff ff       \tcallq  401734 <create_blank_bmp>\n  401ef0:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  401ef4:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  401ef8:\t48 89 85 60 ff ff ff \tmov    %rax,-0xa0(%rbp)\n  401eff:\t48 89 95 68 ff ff ff \tmov    %rdx,-0x98(%rbp)\n  401f06:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  401f0a:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  401f0e:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n  401f15:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n  401f1c:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  401f20:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  401f24:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n  401f28:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n  401f2c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  401f30:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n  401f34:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  401f37:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n  401f3a:\t0f b7 45 dc          \tmovzwl -0x24(%rbp),%eax\n  401f3e:\t66 89 45 9c          \tmov    %ax,-0x64(%rbp)\n  401f42:\t8b 45 82             \tmov    -0x7e(%rbp),%eax\n  401f45:\t89 c0                \tmov    %eax,%eax\n  401f47:\t48 89 c7             \tmov    %rax,%rdi\n  401f4a:\te8 31 f1 ff ff       \tcallq  401080 <malloc@plt>\n  401f4f:\t48 89 45 96          \tmov    %rax,-0x6a(%rbp)\n  401f53:\t8b 45 82             \tmov    -0x7e(%rbp),%eax\n  401f56:\t89 c2                \tmov    %eax,%edx\n  401f58:\t48 8b 4d d6          \tmov    -0x2a(%rbp),%rcx\n  401f5c:\t48 8b 45 96          \tmov    -0x6a(%rbp),%rax\n  401f60:\t48 89 ce             \tmov    %rcx,%rsi\n  401f63:\t48 89 c7             \tmov    %rax,%rdi\n  401f66:\te8 05 f1 ff ff       \tcallq  401070 <memcpy@plt>\n  401f6b:\t48 8b 95 50 ff ff ff \tmov    -0xb0(%rbp),%rdx\n  401f72:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  401f79:\t48 89 d6             \tmov    %rdx,%rsi\n  401f7c:\t48 89 c7             \tmov    %rax,%rdi\n  401f7f:\te8 de 01 00 00       \tcallq  402162 <bmp_v_combin_2>\n  401f84:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  401f8b:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401f92:\t48 89 d6             \tmov    %rdx,%rsi\n  401f95:\t48 89 c7             \tmov    %rax,%rdi\n  401f98:\te8 bb fc ff ff       \tcallq  401c58 <bmp_h_combin_2>\n  401f9d:\t48 8b 45 96          \tmov    -0x6a(%rbp),%rax\n  401fa1:\t48 89 c7             \tmov    %rax,%rdi\n  401fa4:\te8 87 f0 ff ff       \tcallq  401030 <free@plt>\n  401fa9:\t48 8b 45 d6          \tmov    -0x2a(%rbp),%rax\n  401fad:\t48 89 c7             \tmov    %rax,%rdi\n  401fb0:\te8 7b f0 ff ff       \tcallq  401030 <free@plt>\n  401fb5:\te9 97 01 00 00       \tjmpq   402151 <bmp_h_combin_3+0x3ad>\n  401fba:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401fc1:\t8b 50 16             \tmov    0x16(%rax),%edx\n  401fc4:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401fcb:\t8b 40 16             \tmov    0x16(%rax),%eax\n  401fce:\t39 c2                \tcmp    %eax,%edx\n  401fd0:\t0f 83 62 01 00 00    \tjae    402138 <bmp_h_combin_3+0x394>\n  401fd6:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401fdd:\t8b 50 16             \tmov    0x16(%rax),%edx\n  401fe0:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401fe7:\t8b 40 16             \tmov    0x16(%rax),%eax\n  401fea:\t29 c2                \tsub    %eax,%edx\n  401fec:\t89 d0                \tmov    %edx,%eax\n  401fee:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  401ff1:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401ff8:\t0f b7 40 1c          \tmovzwl 0x1c(%rax),%eax\n  401ffc:\t0f b7 d0             \tmovzwl %ax,%edx\n  401fff:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  402006:\t8b 40 12             \tmov    0x12(%rax),%eax\n  402009:\t0f af c2             \timul   %edx,%eax\n  40200c:\t83 c0 1f             \tadd    $0x1f,%eax\n  40200f:\tc1 e8 05             \tshr    $0x5,%eax\n  402012:\tc1 e0 02             \tshl    $0x2,%eax\n  402015:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  402018:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40201b:\t0f af 45 ec          \timul   -0x14(%rbp),%eax\n  40201f:\t89 c0                \tmov    %eax,%eax\n  402021:\t48 89 c7             \tmov    %rax,%rdi\n  402024:\te8 57 f0 ff ff       \tcallq  401080 <malloc@plt>\n  402029:\t48 89 45 d6          \tmov    %rax,-0x2a(%rbp)\n  40202d:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  402034:\t0f b7 40 1c          \tmovzwl 0x1c(%rax),%eax\n  402038:\t0f b7 c8             \tmovzwl %ax,%ecx\n  40203b:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  402042:\t8b 70 12             \tmov    0x12(%rax),%esi\n  402045:\t8b bd 4c ff ff ff    \tmov    -0xb4(%rbp),%edi\n  40204b:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  40204e:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  402052:\t41 89 f8             \tmov    %edi,%r8d\n  402055:\t48 89 c7             \tmov    %rax,%rdi\n  402058:\te8 d7 f6 ff ff       \tcallq  401734 <create_blank_bmp>\n  40205d:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  402064:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  402068:\t48 89 d6             \tmov    %rdx,%rsi\n  40206b:\t48 89 c7             \tmov    %rax,%rdi\n  40206e:\te8 ef 00 00 00       \tcallq  402162 <bmp_v_combin_2>\n  402073:\t48 8b 95 50 ff ff ff \tmov    -0xb0(%rbp),%rdx\n  40207a:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  40207e:\t48 89 d6             \tmov    %rdx,%rsi\n  402081:\t48 89 c7             \tmov    %rax,%rdi\n  402084:\te8 cf fb ff ff       \tcallq  401c58 <bmp_h_combin_2>\n  402089:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  402090:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n  402094:\t48 89 10             \tmov    %rdx,(%rax)\n  402097:\t8b 55 a8             \tmov    -0x58(%rbp),%edx\n  40209a:\t89 50 08             \tmov    %edx,0x8(%rax)\n  40209d:\t0f b7 55 ac          \tmovzwl -0x54(%rbp),%edx\n  4020a1:\t66 89 50 0c          \tmov    %dx,0xc(%rax)\n  4020a5:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4020ac:\t48 83 c0 0e          \tadd    $0xe,%rax\n  4020b0:\t48 8b 4d ae          \tmov    -0x52(%rbp),%rcx\n  4020b4:\t48 8b 5d b6          \tmov    -0x4a(%rbp),%rbx\n  4020b8:\t48 89 08             \tmov    %rcx,(%rax)\n  4020bb:\t48 89 58 08          \tmov    %rbx,0x8(%rax)\n  4020bf:\t48 8b 4d be          \tmov    -0x42(%rbp),%rcx\n  4020c3:\t48 8b 5d c6          \tmov    -0x3a(%rbp),%rbx\n  4020c7:\t48 89 48 10          \tmov    %rcx,0x10(%rax)\n  4020cb:\t48 89 58 18          \tmov    %rbx,0x18(%rax)\n  4020cf:\t48 8b 55 ce          \tmov    -0x32(%rbp),%rdx\n  4020d3:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n  4020d7:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4020de:\t8b 40 22             \tmov    0x22(%rax),%eax\n  4020e1:\t89 c2                \tmov    %eax,%edx\n  4020e3:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4020ea:\t48 8b 40 36          \tmov    0x36(%rax),%rax\n  4020ee:\t48 89 d6             \tmov    %rdx,%rsi\n  4020f1:\t48 89 c7             \tmov    %rax,%rdi\n  4020f4:\te8 a7 ef ff ff       \tcallq  4010a0 <realloc@plt>\n  4020f9:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  402100:\t48 89 42 36          \tmov    %rax,0x36(%rdx)\n  402104:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40210b:\t8b 40 22             \tmov    0x22(%rax),%eax\n  40210e:\t89 c2                \tmov    %eax,%edx\n  402110:\t48 8b 4d d6          \tmov    -0x2a(%rbp),%rcx\n  402114:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40211b:\t48 8b 40 36          \tmov    0x36(%rax),%rax\n  40211f:\t48 89 ce             \tmov    %rcx,%rsi\n  402122:\t48 89 c7             \tmov    %rax,%rdi\n  402125:\te8 46 ef ff ff       \tcallq  401070 <memcpy@plt>\n  40212a:\t48 8b 45 d6          \tmov    -0x2a(%rbp),%rax\n  40212e:\t48 89 c7             \tmov    %rax,%rdi\n  402131:\te8 fa ee ff ff       \tcallq  401030 <free@plt>\n  402136:\teb 19                \tjmp    402151 <bmp_h_combin_3+0x3ad>\n  402138:\t48 8b 95 50 ff ff ff \tmov    -0xb0(%rbp),%rdx\n  40213f:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  402146:\t48 89 d6             \tmov    %rdx,%rsi\n  402149:\t48 89 c7             \tmov    %rax,%rdi\n  40214c:\te8 07 fb ff ff       \tcallq  401c58 <bmp_h_combin_2>\n  402151:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  402158:\t48 81 c4 b8 00 00 00 \tadd    $0xb8,%rsp\n  40215f:\t5b                   \tpop    %rbx\n  402160:\t5d                   \tpop    %rbp\n  402161:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bmp_h_combin_3(__int64 a1, __int64 a2, int a3) {\n  __int64 result;\n  __int64 v4;\n  __int64 v6[Number];\n  size_t size;\n  __int64 v8;\n  _BYTE ptr[Number];\n  __int64 v10;\n  _BYTE v11[Number];\n  unsigned int v12;\n  int v13;\n  if (*(_QWORD *)(a1 + Number)) {\n    if (*(_DWORD *)(a1 + Number) <= *(_DWORD *)(a2 + Number)) {\n      if (*(_DWORD *)(a1 + Number) >= *(_DWORD *)(a2 + Number)) {\n        bmp_h_combin_2(a1, a2);\n      } else {\n        v13 = *(_DWORD *)(a2 + Number) - *(_DWORD *)(a1 + Number);\n        v12 = Number * (((unsigned int)*(unsigned __int16 *)(a2 + Number) *\n                             *(_DWORD *)(a1 + Number) +\n                         Number) >>\n                        Number);\n        *(_QWORD *)&v11[Number] = malloc(v13 * v12);\n        create_blank_bmp((__int64)&v10, *(_DWORD *)(a1 + Number), v13,\n                         *(_WORD *)(a1 + Number), a3);\n        bmp_v_combin_2(&v10, a1);\n        bmp_h_combin_2((__int64)&v10, a2);\n        *(_QWORD *)a1 = v10;\n        *(_DWORD *)(a1 + Number) = *(_DWORD *)v11;\n        *(_WORD *)(a1 + Number) = *(_WORD *)&v11[Number];\n        v4 = *(_QWORD *)&v11[Number];\n        *(_QWORD *)(a1 + Number) = *(_QWORD *)&v11[Number];\n        *(_QWORD *)(a1 + Number) = v4;\n        *(_OWORD *)(a1 + Number) = *(_OWORD *)&v11[Number];\n        *(_QWORD *)(a1 + Number) = *(_QWORD *)&v11[Number];\n        *(_QWORD *)(a1 + Number) =\n            realloc(*(void **)(a1 + Number), *(unsigned int *)(a1 + Number));\n        memcpy(*(void **)(a1 + Number), *(const void **)&v11[Number],\n               *(unsigned int *)(a1 + Number));\n        free(*(void **)&v11[Number]);\n      }\n    } else {\n      v13 = *(_DWORD *)(a1 + Number) - *(_DWORD *)(a2 + Number);\n      v12 = Number * (((unsigned int)*(unsigned __int16 *)(a2 + Number) *\n                           *(_DWORD *)(a2 + Number) +\n                       Number) >>\n                      Number);\n      *(_QWORD *)&v11[Number] = malloc(v13 * v12);\n      create_blank_bmp((__int64)&v10, *(_DWORD *)(a2 + Number), v13,\n                       *(_WORD *)(a1 + Number), a3);\n      v6[Number] = v10;\n      v6[Number] = *(_QWORD *)v11;\n      v6[Number] = *(_QWORD *)&v11[Number];\n      v6[Number] = *(_QWORD *)&v11[Number];\n      size = *(_QWORD *)&v11[Number];\n      v8 = *(_QWORD *)&v11[Number];\n      *(_QWORD *)ptr = *(_QWORD *)&v11[Number];\n      *(_QWORD *)&ptr[Number] =\n          malloc((unsigned int)(*(_QWORD *)&v11[Number] >> Number));\n      memcpy(*(void **)&ptr[Number], *(const void **)&v11[Number],\n             *(unsigned int *)((char *)&size + Number));\n      bmp_v_combin_2(v6, a2);\n      bmp_h_combin_2(a1, (__int64)v6);\n      free(*(void **)&ptr[Number]);\n      free(*(void **)&v11[Number]);\n    }\n    result = a1;\n  } else {\n    memcpy((void *)a1, (const void *)a2, Number);\n    *(_QWORD *)(a1 + Number) = malloc(*(unsigned int *)(a1 + Number));\n    memcpy(*(void **)(a1 + Number), *(const void **)(a2 + Number),\n           *(unsigned int *)(a2 + Number));\n    result = a1;\n  }\n  return result;\n}", "code_t": "bmp_file_t *__cdecl bmp_h_combin_3(bmp_file_t *dst, const bmp_file_t *add,\n                                   uint32_t blank_color) {\n  bmp_file_t *result;\n  __int64 v4;\n  __int64 v5;\n  bmp_file_t <span class=\"supfact\">tmp_bmp</span>;\n  bmp_file_t <span class=\"supfact\">bmp_blank</span>;\n  uint32_t rowsize;\n  uint32_t h_diff;\n  if (dst->pdata) {\n    if (dst->dib_h.height <= add->dib_h.height) {\n      if (dst->dib_h.height >= add->dib_h.height) {\n        bmp_h_combin_2(dst, add);\n      } else {\n        h_diff = add->dib_h.height - dst->dib_h.height;\n        rowsize =\n            Number *\n            ((add->dib_h.bits_per_pix * dst->dib_h.width + Number) >> Number);\n        <span class=\"supfact\">bmp_blank</span>.pdata = (uint8_t *)malloc(h_diff * rowsize);\n        create_blank_bmp(&<span class=\"supfact\">bmp_blank</span>, dst->dib_h.width, h_diff,\n                         dst->dib_h.bits_per_pix, blank_color);\n        bmp_v_combin_2(&<span class=\"supfact\">bmp_blank</span>, dst);\n        bmp_h_combin_2(&<span class=\"supfact\">bmp_blank</span>, add);\n        *(_QWORD *)dst->bmp_h.magic =\n            *(_QWORD *)<span class=\"supfact\">bmp_blank</span>.bmp_h.magic;\n        *(_DWORD *)&dst->bmp_h.reserved2 =\n            *(_DWORD *)&<span class=\"supfact\">bmp_blank</span>.bmp_h.reserved2;\n        HIWORD(dst->bmp_h.offset) =\n            HIWORD(<span class=\"supfact\">bmp_blank</span>.bmp_h.offset);\n        v4 = *(_QWORD *)&<span class=\"supfact\">bmp_blank</span>.dib_h.height;\n        *(_QWORD *)&dst->dib_h.dib_header_size =\n            *(_QWORD *)&<span class=\"supfact\">bmp_blank</span>.dib_h.dib_header_size;\n        *(_QWORD *)&dst->dib_h.height = v4;\n        v5 = *(_QWORD *)&<span class=\"supfact\">bmp_blank</span>.dib_h.x_pix_per_meter;\n        *(_QWORD *)&dst->dib_h.compression =\n            *(_QWORD *)&<span class=\"supfact\">bmp_blank</span>.dib_h.compression;\n        *(_QWORD *)&dst->dib_h.x_pix_per_meter = v5;\n        *(_QWORD *)&dst->dib_h.colors_in_colortable =\n            *(_QWORD *)&<span class=\"supfact\">bmp_blank</span>.dib_h.colors_in_colortable;\n        dst->pdata = (uint8_t *)realloc(dst->pdata, dst->dib_h.image_size);\n        memcpy(dst->pdata, <span class=\"supfact\">bmp_blank</span>.pdata,\n               dst->dib_h.image_size);\n        free(<span class=\"supfact\">bmp_blank</span>.pdata);\n      }\n    } else {\n      h_diff = dst->dib_h.height - add->dib_h.height;\n      rowsize =\n          Number *\n          ((add->dib_h.bits_per_pix * add->dib_h.width + Number) >> Number);\n      <span class=\"supfact\">bmp_blank</span>.pdata = (uint8_t *)malloc(h_diff * rowsize);\n      create_blank_bmp(&<span class=\"supfact\">bmp_blank</span>, add->dib_h.width, h_diff,\n                       dst->dib_h.bits_per_pix, blank_color);\n      *(_QWORD *)<span class=\"supfact\">tmp_bmp</span>.bmp_h.magic =\n          *(_QWORD *)<span class=\"supfact\">bmp_blank</span>.bmp_h.magic;\n      *(_OWORD *)&<span class=\"supfact\">tmp_bmp</span>.bmp_h.reserved2 =\n          *(_OWORD *)&<span class=\"supfact\">bmp_blank</span>.bmp_h.reserved2;\n      *(_OWORD *)((char *)&<span class=\"supfact\">tmp_bmp</span>.dib_h.height + Number) =\n          *(_OWORD *)((char *)&<span class=\"supfact\">bmp_blank</span>.dib_h.height + Number);\n      *(_OWORD *)((char *)&<span class=\"supfact\">tmp_bmp</span>.dib_h.x_pix_per_meter +\n                  Number) =\n          *(_OWORD *)((char *)&<span class=\"supfact\">bmp_blank</span>.dib_h.x_pix_per_meter +\n                      Number);\n      <span class=\"supfact\">tmp_bmp</span>.pdata = (uint8_t *)malloc(\n          (unsigned int)(*(_QWORD *)((char *)&<span class=\"supfact\">bmp_blank</span>.dib_h\n                                         .compression +\n                                     Number) >>\n                         Number));\n      memcpy(<span class=\"supfact\">tmp_bmp</span>.pdata, <span class=\"supfact\">bmp_blank</span>.pdata,\n             <span class=\"supfact\">tmp_bmp</span>.dib_h.image_size);\n      bmp_v_combin_2(&<span class=\"supfact\">tmp_bmp</span>, add);\n      bmp_h_combin_2(dst, &<span class=\"supfact\">tmp_bmp</span>);\n      free(<span class=\"supfact\">tmp_bmp</span>.pdata);\n      free(<span class=\"supfact\">bmp_blank</span>.pdata);\n    }\n    result = dst;\n  } else {\n    memcpy(dst, add, sizeof(bmp_file_t));\n    dst->pdata = (uint8_t *)malloc(dst->dib_h.image_size);\n    memcpy(dst->pdata, add->pdata, add->dib_h.image_size);\n    result = dst;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "__unk__", "pred_name": "__unk__", "ref_name": "tmp_bmp", "ref_type": "struct bmp_file_t { bmp_file_header_t bmp_h; dib_header_t dib_h; uint8_t * pdata; }"}, {"name": "v10", "type": "__unk__", "pred_name": "__unk__", "ref_name": "bmp_blank", "ref_type": "struct bmp_file_t { bmp_file_header_t bmp_h; dib_header_t dib_h; uint8_t * pdata; }"}], "body_in_train": true}, {"repo_owner": "isDerek", "repo_name": "BTC-Device", "path": "isDerek/BTC-Device/9eb5bdb0143a63b31132ea31d83410eefa0b801b31f29f5ffc43fd093e6ca1ae", "path_in_repo": "isDerek/BTC-Device/BTC_APP/middleware/multicore/erpc/Debug/Linux/erpcsniffer/obj/erpcgen/src/types/Type.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 50          \tsub    $0x50,%rsp\n   b:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   f:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  13:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  17:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n  1b:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n  1f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x2b>\n  2b:\t49 89 c4             \tmov    %rax,%r12\n  2e:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  32:\t48 89 c7             \tmov    %rax,%rdi\n  35:\te8 00 00 00 00       \tcallq  3a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x3a>\n  3a:\t48 89 c3             \tmov    %rax,%rbx\n  3d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  41:\t48 89 c7             \tmov    %rax,%rdi\n  44:\te8 00 00 00 00       \tcallq  49 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x49>\n  49:\t48 89 c6             \tmov    %rax,%rsi\n  4c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  50:\t4c 89 e1             \tmov    %r12,%rcx\n  53:\t48 89 da             \tmov    %rbx,%rdx\n  56:\t48 89 c7             \tmov    %rax,%rdi\n  59:\te8 00 00 00 00       \tcallq  5e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x5e>\n  5e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  62:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  66:\t48 89 c7             \tmov    %rax,%rdi\n  69:\te8 00 00 00 00       \tcallq  6e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x6e>\n  6e:\t48 89 c2             \tmov    %rax,%rdx\n  71:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  75:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  79:\t48 89 ce             \tmov    %rcx,%rsi\n  7c:\t48 89 c7             \tmov    %rax,%rdi\n  7f:\te8 00 00 00 00       \tcallq  84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x84>\n  84:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  88:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  8c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  90:\t48 85 c0             \ttest   %rax,%rax\n  93:\t74 1a                \tje     af <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xaf>\n  95:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  99:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n  9d:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  a1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  a5:\t48 89 c7             \tmov    %rax,%rdi\n  a8:\te8 00 00 00 00       \tcallq  ad <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xad>\n  ad:\teb 5f                \tjmp    10e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x10e>\n  af:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  b3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  b7:\t48 89 d6             \tmov    %rdx,%rsi\n  ba:\t48 89 c7             \tmov    %rax,%rdi\n  bd:\te8 00 00 00 00       \tcallq  c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xc2>\n  c2:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  c6:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  ca:\t48 89 d6             \tmov    %rdx,%rsi\n  cd:\t48 89 c7             \tmov    %rax,%rdi\n  d0:\te8 00 00 00 00       \tcallq  d5 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xd5>\n  d5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  d9:\teb 33                \tjmp    10e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x10e>\n  db:\t48 89 c7             \tmov    %rax,%rdi\n  de:\te8 00 00 00 00       \tcallq  e3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xe3>\n  e3:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  e7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  eb:\t48 89 d6             \tmov    %rdx,%rsi\n  ee:\t48 89 c7             \tmov    %rax,%rdi\n  f1:\te8 00 00 00 00       \tcallq  f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf6>\n  f6:\te8 00 00 00 00       \tcallq  fb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xfb>\n  fb:\t48 89 c3             \tmov    %rax,%rbx\n  fe:\te8 00 00 00 00       \tcallq  103 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x103>\n 103:\t48 89 d8             \tmov    %rbx,%rax\n 106:\t48 89 c7             \tmov    %rax,%rdi\n 109:\te8 00 00 00 00       \tcallq  10e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN7erpcgen6SymbolEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x10e>\n 10e:\t48 83 c4 50          \tadd    $0x50,%rsp\n 112:\t5b                   \tpop    %rbx\n 113:\t41 5c                \tpop    %r12\n 115:\t5d                   \tpop    %rbp\n 116:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std _Rb_tree<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>,\n    std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                      std allocator<char>> const,\n             erpcgen Symbol *>,\n    std _Select1st<\n        std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> const,\n                 erpcgen Symbol *>>,\n    std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                      std allocator<char>>>,\n    std allocator<std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                                    std allocator<char>> const,\n                           erpcgen Symbol *>>>\n_M_emplace_hint_unique<\n    std piecewise_construct_t const &,\n    std tuple<std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>> const &>,\n    std tuple<>>(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5) {\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v13;\n  __int64 v14;\n  __int64 v15;\n  v5 = std forward<std tuple<>>(a5);\n  v6 = std forward<std tuple<std __cxx11 basic_string<\n      char, std char_traits<char>, std allocator<char>> const &>>(a4);\n  v7 = std forward<std piecewise_construct_t const &>(a3);\n  v15 = std _Rb_tree<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> const,\n               erpcgen Symbol *>,\n      std _Select1st<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>,\n      std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>,\n      std allocator<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>>\n      _M_create_node<\n          std piecewise_construct_t const &,\n          std tuple<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>> const &>,\n          std tuple<>>(a1, v7, v6, v5);\n  v8 = std _Rb_tree<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> const,\n               erpcgen Symbol *>,\n      std _Select1st<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>,\n      std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>,\n      std allocator<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>>\n      _S_key(v15);\n  v13 = std _Rb_tree<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> const,\n               erpcgen Symbol *>,\n      std _Select1st<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>,\n      std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>,\n      std allocator<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>>\n      _M_get_insert_hint_unique_pos(a1, a2, v8);\n  if (v9)\n    return std _Rb_tree<\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>>,\n        std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> const,\n                 erpcgen Symbol *>,\n        std _Select1st<\n            std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>> const,\n                     erpcgen Symbol *>>,\n        std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>,\n        std allocator<\n            std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>> const,\n                     erpcgen Symbol *>>>\n        _M_insert_node(a1, v13, v9, v15);\n  std _Rb_tree<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> const,\n               erpcgen Symbol *>,\n      std _Select1st<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>,\n      std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>,\n      std allocator<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>>\n      _M_drop_node(a1, v15);\n  std _Rb_tree_iterator<\n      std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> const,\n               erpcgen Symbol *>>\n      _Rb_tree_iterator(&v14, v13);\n  return v14;\n}", "code_t": "std _Rb_tree<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>,\n    std pair<const std __cxx11\n                 basic_string<char, std char_traits<char>, std allocator<char>>,\n             erpcgen Symbol *>,\n    std _Select1st<\n        std pair<const std __cxx11 basic_string<char, std char_traits<char>,\n                                                std allocator<char>>,\n                 erpcgen Symbol *>>,\n    std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                      std allocator<char>>>,\n    std allocator<\n        std pair<const std __cxx11 basic_string<char, std char_traits<char>,\n                                                std allocator<char>>,\n                 erpcgen Symbol *>>>\n    iterator __fastcall std _Rb_tree<\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>>,\n        std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> const,\n                 erpcgen Symbol *>,\n        std _Select1st<\n            std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>> const,\n                     erpcgen Symbol *>>,\n        std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>,\n        std allocator<\n            std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>> const,\n                     erpcgen Symbol *>>>\n    _M_emplace_hint_unique<\n        std piecewise_construct_t const &,\n        std tuple<std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>> const &>,\n        std tuple<>>(\n        std _Rb_tree<\n            std __cxx11\n                basic_string<char, std char_traits<char>, std allocator<char>>,\n            std pair<const std __cxx11 basic_string<char, std char_traits<char>,\n                                                    std allocator<char>>,\n                     erpcgen Symbol *>,\n            std _Select1st<\n                std pair<const std __cxx11 basic_string<\n                             char, std char_traits<char>, std allocator<char>>,\n                         erpcgen Symbol *>>,\n            std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>>,\n            std allocator<\n                std pair<const std __cxx11 basic_string<\n                             char, std char_traits<char>, std allocator<char>>,\n                         erpcgen Symbol *>>> *const this,\n        std _Rb_tree<\n            std __cxx11\n                basic_string<char, std char_traits<char>, std allocator<char>>,\n            std pair<const std __cxx11 basic_string<char, std char_traits<char>,\n                                                    std allocator<char>>,\n                     erpcgen Symbol *>,\n            std _Select1st<\n                std pair<const std __cxx11 basic_string<\n                             char, std char_traits<char>, std allocator<char>>,\n                         erpcgen Symbol *>>,\n            std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>>,\n            std allocator<\n                std pair<const std __cxx11 basic_string<\n                             char, std char_traits<char>, std allocator<char>>,\n                         erpcgen Symbol *>>>\n            const_iterator <span class=\"supfact\">__pos</span>,\n        const std piecewise_construct_t *a3,\n        std tuple<const std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>> &> *a4,\n        std tuple<> *a5, const std piecewise_construct_t *__args_0) {\n  std tuple<> *v6;\n  std tuple<const std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>> &> *v7;\n  const std piecewise_construct_t *v8;\n  const std piecewise_construct_t *v9;\n  std tuple<const std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>> &> *v10;\n  const std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *v11;\n  std pair<std _Rb_tree_node_base *, std _Rb_tree_node_base *> v12;\n  std tuple<> *v14;\n  std _Rb_tree_node_base *__res;\n  std _Rb_tree_iterator<\n      std pair<const std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>,\n               erpcgen Symbol *>>\n      <span class=\"supfact\">v18</span>;\n  std _Rb_tree<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std pair<const std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>,\n               erpcgen Symbol *>,\n      std _Select1st<\n          std pair<const std __cxx11 basic_string<char, std char_traits<char>,\n                                                  std allocator<char>>,\n                   erpcgen Symbol *>>,\n      std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>,\n      std allocator<\n          std pair<const std __cxx11 basic_string<char, std char_traits<char>,\n                                                  std allocator<char>>,\n                   erpcgen Symbol *>>>\n      _Link_type __z;\n  v6 = std forward<std tuple<>>(a5);\n  v7 = std forward<std tuple<std __cxx11 basic_string<\n      char, std char_traits<char>, std allocator<char>> const &>>(a4);\n  v8 = std forward<std piecewise_construct_t const &>(\n      (std remove_reference<const std piecewise_construct_t &> type *)a3);\n  __z = std _Rb_tree<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> const,\n               erpcgen Symbol *>,\n      std _Select1st<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>,\n      std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>,\n      std allocator<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>>\n      _M_create_node<\n          std piecewise_construct_t const &,\n          std tuple<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>> const &>,\n          std tuple<>>(this, v8, v7, v6, v9, v10, v14);\n  v11 = std _Rb_tree<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> const,\n               erpcgen Symbol *>,\n      std _Select1st<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>,\n      std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>,\n      std allocator<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>>\n      _S_key(__z);\n  v12 = std _Rb_tree<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> const,\n               erpcgen Symbol *>,\n      std _Select1st<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>,\n      std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>,\n      std allocator<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>>\n      _M_get_insert_hint_unique_pos(this, <span class=\"supfact\">__pos</span>, v11);\n  __res = v12.first;\n  if (v12.second)\n    return std _Rb_tree<\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>>,\n        std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> const,\n                 erpcgen Symbol *>,\n        std _Select1st<\n            std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>> const,\n                     erpcgen Symbol *>>,\n        std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>,\n        std allocator<\n            std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>> const,\n                     erpcgen Symbol *>>>\n        _M_insert_node(this, v12.first, v12.second, __z);\n  std _Rb_tree<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> const,\n               erpcgen Symbol *>,\n      std _Select1st<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>,\n      std less<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>,\n      std allocator<\n          std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>> const,\n                   erpcgen Symbol *>>>\n      _M_drop_node(this, __z);\n  std _Rb_tree_iterator<\n      std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> const,\n               erpcgen Symbol *>>\n      _Rb_tree_iterator(&<span class=\"supfact\">v18</span>, __res);\n  return <span class=\"supfact\">v18</span>;\n}", "var": [{"name": "a2", "type": "__unk__", "pred_name": "__pos", "ref_name": "__pos", "ref_type": "struct std::_Rb_tree<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,erpcgen::Symbol*>,std::_Select1st<std::pair<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,erpcgen::Symbol*> >,std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,erpcgen::Symbol*> > >::const_iterator { std::_Rb_tree_const_iterator<std::pair<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,erpcgen::Symbol*> >::_Base_ptr _M_node; }"}, {"name": "v14", "type": "__unk__", "pred_name": "v18", "ref_name": "v18", "ref_type": "struct std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,erpcgen::Symbol*> > { std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,erpcgen::Symbol*> >::_Base_ptr _M_node; }"}], "body_in_train": false}, {"repo_owner": "CPFL", "repo_name": "gxen", "path": "CPFL/gxen/c35b9846bdf3bbe7eb6ad5adfa09ee3654099b36f1db890750fd388704352071", "path_in_repo": "CPFL/gxen/tools/qemu-xen-traditional/qemu-nbd", "objdump": "000000000041b540 <nbd_close>:\n  41b540:\t55                   \tpush   %rbp\n  41b541:\t48 89 e5             \tmov    %rsp,%rbp\n  41b544:\t48 83 ec 40          \tsub    $0x40,%rsp\n  41b548:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  41b54c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41b550:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  41b554:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  41b558:\tc7 45 d0 02 00 00 00 \tmovl   $0x2,-0x30(%rbp)\n  41b55f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41b563:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  41b567:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  41b56e:\t00 \n  41b56f:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  41b576:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41b57a:\t8b 00                \tmov    (%rax),%eax\n  41b57c:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  41b580:\t48 89 d6             \tmov    %rdx,%rsi\n  41b583:\t89 c7                \tmov    %eax,%edi\n  41b585:\te8 5d 0a 00 00       \tcallq  41bfe7 <nbd_send_request>\n  41b58a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41b58e:\t8b 00                \tmov    (%rax),%eax\n  41b590:\t89 c7                \tmov    %eax,%edi\n  41b592:\te8 39 81 fe ff       \tcallq  4036d0 <close@plt>\n  41b597:\t90                   \tnop\n  41b598:\tc9                   \tleaveq \n  41b599:\tc3                   \tretq   ", "code_s": "int __fastcall nbd_close(__int64 a1) {\n  int v2;\n  __int64 v3;\n  __int64 v4;\n  int v5;\n  int *v6;\n  v6 = *(int **)(a1 + Number);\n  v2 = Number;\n  v3 = a1;\n  v4 = Number L;\n  v5 = Number;\n  nbd_send_request((unsigned int)*v6, &v2);\n  return close(*v6);\n}", "code_t": "void __cdecl nbd_close(BlockDriverState_0 *bs) {\n  nbd_request <span class=\"supfact\">request</span>;\n  BDRVNBDState_0 *s;\n  s = (BDRVNBDState_0 *)bs->opaque;\n  <span class=\"supfact\">request</span>.type = Number;\n  <span class=\"supfact\">request</span>.handle = (uint64_t)bs;\n  <span class=\"supfact\">request</span>.from = Number L;\n  <span class=\"supfact\">request</span>.len = Number;\n  nbd_send_request(s->sock, &<span class=\"supfact\">request</span>);\n  close(s->sock);\n}", "var": [{"name": "v2", "type": "struct nbd_request { uint32_t type; PADDING (4); uint64_t handle; uint64_t from; uint32_t len; PADDING (4); }", "pred_name": "request", "ref_name": "request", "ref_type": "struct nbd_request { uint32_t type; PADDING (4); uint64_t handle; uint64_t from; uint32_t len; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "yosh1k104", "repo_name": "D-Switch", "path": "yosh1k104/D-Switch/16a6c1c16c3bfb2a22aec0f76c83ca083800e4e1b6c644ed01264e71dd21a08c", "path_in_repo": "yosh1k104/D-Switch/contiki-2.6/examples/antelope/shell/obj_native/elfloader.o", "objdump": "00000000000004cd <elfloader_load>:\n 4cd:\t55                   \tpush   %rbp\n 4ce:\t48 89 e5             \tmov    %rsp,%rbp\n 4d1:\t53                   \tpush   %rbx\n 4d2:\t48 81 ec 68 01 00 00 \tsub    $0x168,%rsp\n 4d9:\t89 bd 9c fe ff ff    \tmov    %edi,-0x164(%rbp)\n 4df:\tc6 45 e7 ff          \tmovb   $0xff,-0x19(%rbp)\n 4e3:\t66 c7 45 e4 00 00    \tmovw   $0x0,-0x1c(%rbp)\n 4e9:\t66 c7 45 e0 00 00    \tmovw   $0x0,-0x20(%rbp)\n 4ef:\t66 c7 45 dc 00 00    \tmovw   $0x0,-0x24(%rbp)\n 4f5:\t66 c7 45 d8 00 00    \tmovw   $0x0,-0x28(%rbp)\n 4fb:\t66 c7 45 d4 00 00    \tmovw   $0x0,-0x2c(%rbp)\n 501:\t66 c7 45 d0 00 00    \tmovw   $0x0,-0x30(%rbp)\n 507:\t66 c7 45 cc 00 00    \tmovw   $0x0,-0x34(%rbp)\n 50d:\t66 c7 45 c8 00 00    \tmovw   $0x0,-0x38(%rbp)\n 513:\t66 c7 45 c4 00 00    \tmovw   $0x0,-0x3c(%rbp)\n 519:\tc6 05 00 00 00 00 00 \tmovb   $0x0,0x0(%rip)        # 520 <elfloader_load+0x53>\n 520:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n 527:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n 52d:\tb9 50 00 00 00       \tmov    $0x50,%ecx\n 532:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 537:\t89 c7                \tmov    %eax,%edi\n 539:\te8 c2 fa ff ff       \tcallq  0 <seek_read>\n 53e:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n 545:\tba 07 00 00 00       \tmov    $0x7,%edx\n 54a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 54f:\t48 89 c7             \tmov    %rax,%rdi\n 552:\te8 00 00 00 00       \tcallq  557 <elfloader_load+0x8a>\n 557:\t85 c0                \ttest   %eax,%eax\n 559:\t74 0a                \tje     565 <elfloader_load+0x98>\n 55b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 560:\te9 91 06 00 00       \tjmpq   bf6 <elfloader_load+0x729>\n 565:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 569:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 56c:\t48 8d 95 00 ff ff ff \tlea    -0x100(%rbp),%rdx\n 573:\t8b 75 ec             \tmov    -0x14(%rbp),%esi\n 576:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n 57c:\tb9 50 00 00 00       \tmov    $0x50,%ecx\n 581:\t89 c7                \tmov    %eax,%edi\n 583:\te8 78 fa ff ff       \tcallq  0 <seek_read>\n 588:\t0f b7 45 96          \tmovzwl -0x6a(%rbp),%eax\n 58c:\t66 89 45 c2          \tmov    %ax,-0x3e(%rbp)\n 590:\t0f b7 45 98          \tmovzwl -0x68(%rbp),%eax\n 594:\t66 89 45 c0          \tmov    %ax,-0x40(%rbp)\n 598:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 59c:\t89 c1                \tmov    %eax,%ecx\n 59e:\t0f b7 55 c2          \tmovzwl -0x3e(%rbp),%edx\n 5a2:\t0f b7 45 9a          \tmovzwl -0x66(%rbp),%eax\n 5a6:\t0f b7 c0             \tmovzwl %ax,%eax\n 5a9:\t0f af c2             \timul   %edx,%eax\n 5ac:\t8d 34 01             \tlea    (%rcx,%rax,1),%esi\n 5af:\t48 8d 95 b0 fe ff ff \tlea    -0x150(%rbp),%rdx\n 5b6:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n 5bc:\tb9 50 00 00 00       \tmov    $0x50,%ecx\n 5c1:\t89 c7                \tmov    %eax,%edi\n 5c3:\te8 38 fa ff ff       \tcallq  0 <seek_read>\n 5c8:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n 5cf:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n 5d2:\t66 c7 45 c6 00 00    \tmovw   $0x0,-0x3a(%rbp)\n 5d8:\t0f b7 45 c6          \tmovzwl -0x3a(%rbp),%eax\n 5dc:\t66 89 45 ca          \tmov    %ax,-0x36(%rbp)\n 5e0:\t0f b7 45 ca          \tmovzwl -0x36(%rbp),%eax\n 5e4:\t66 89 45 ce          \tmov    %ax,-0x32(%rbp)\n 5e8:\t0f b7 45 ce          \tmovzwl -0x32(%rbp),%eax\n 5ec:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n 5f0:\t0f b7 45 d2          \tmovzwl -0x2e(%rbp),%eax\n 5f4:\t66 89 45 d6          \tmov    %ax,-0x2a(%rbp)\n 5f8:\t0f b7 45 d6          \tmovzwl -0x2a(%rbp),%eax\n 5fc:\t66 89 45 da          \tmov    %ax,-0x26(%rbp)\n 600:\t0f b7 45 da          \tmovzwl -0x26(%rbp),%eax\n 604:\t66 89 45 de          \tmov    %ax,-0x22(%rbp)\n 608:\t0f b7 45 de          \tmovzwl -0x22(%rbp),%eax\n 60c:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n 610:\tc6 05 00 00 00 00 ff \tmovb   $0xff,0x0(%rip)        # 617 <elfloader_load+0x14a>\n 617:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 61e <elfloader_load+0x151>\n 61e:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 624 <elfloader_load+0x157>\n 624:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 62b <elfloader_load+0x15e>\n 62b:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 631 <elfloader_load+0x164>\n 631:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 638 <elfloader_load+0x16b>\n 638:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 63e <elfloader_load+0x171>\n 63e:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 642:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 645:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n 64c:\te9 22 03 00 00       \tjmpq   973 <elfloader_load+0x4a6>\n 651:\t48 8d 95 00 ff ff ff \tlea    -0x100(%rbp),%rdx\n 658:\t8b 75 ec             \tmov    -0x14(%rbp),%esi\n 65b:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n 661:\tb9 50 00 00 00       \tmov    $0x50,%ecx\n 666:\t89 c7                \tmov    %eax,%edi\n 668:\te8 93 f9 ff ff       \tcallq  0 <seek_read>\n 66d:\t48 8b 85 00 ff ff ff \tmov    -0x100(%rbp),%rax\n 674:\t89 c2                \tmov    %eax,%edx\n 676:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n 679:\t01 d0                \tadd    %edx,%eax\n 67b:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n 67e:\t48 8d 95 a4 fe ff ff \tlea    -0x15c(%rbp),%rdx\n 685:\t8b 75 ac             \tmov    -0x54(%rbp),%esi\n 688:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n 68e:\tb9 0c 00 00 00       \tmov    $0xc,%ecx\n 693:\t89 c7                \tmov    %eax,%edi\n 695:\te8 66 f9 ff ff       \tcallq  0 <seek_read>\n 69a:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n 6a1:\t48 83 f8 02          \tcmp    $0x2,%rax\n 6a5:\t75 1b                \tjne    6c2 <elfloader_load+0x1f5>\n 6a7:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 6ae:\t66 89 45 cc          \tmov    %ax,-0x34(%rbp)\n 6b2:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 6b9:\t66 89 45 ca          \tmov    %ax,-0x36(%rbp)\n 6bd:\te9 a6 02 00 00       \tjmpq   968 <elfloader_load+0x49b>\n 6c2:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n 6c9:\t48 83 f8 03          \tcmp    $0x3,%rax\n 6cd:\t75 1b                \tjne    6ea <elfloader_load+0x21d>\n 6cf:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 6d6:\t66 89 45 c8          \tmov    %ax,-0x38(%rbp)\n 6da:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 6e1:\t66 89 45 c6          \tmov    %ax,-0x3a(%rbp)\n 6e5:\te9 7e 02 00 00       \tjmpq   968 <elfloader_load+0x49b>\n 6ea:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 6f1:\tba 05 00 00 00       \tmov    $0x5,%edx\n 6f6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 6fb:\t48 89 c7             \tmov    %rax,%rdi\n 6fe:\te8 00 00 00 00       \tcallq  703 <elfloader_load+0x236>\n 703:\t85 c0                \ttest   %eax,%eax\n 705:\t75 2e                \tjne    735 <elfloader_load+0x268>\n 707:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 70e:\t66 89 45 e4          \tmov    %ax,-0x1c(%rbp)\n 712:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 719:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n 71d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 720:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 726 <elfloader_load+0x259>\n 726:\t0f b7 45 e4          \tmovzwl -0x1c(%rbp),%eax\n 72a:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 730 <elfloader_load+0x263>\n 730:\te9 33 02 00 00       \tjmpq   968 <elfloader_load+0x49b>\n 735:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 73c:\tba 09 00 00 00       \tmov    $0x9,%edx\n 741:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 746:\t48 89 c7             \tmov    %rax,%rdi\n 749:\te8 00 00 00 00       \tcallq  74e <elfloader_load+0x281>\n 74e:\t85 c0                \ttest   %eax,%eax\n 750:\t75 1f                \tjne    771 <elfloader_load+0x2a4>\n 752:\tc6 45 e7 00          \tmovb   $0x0,-0x19(%rbp)\n 756:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 75d:\t66 89 45 e0          \tmov    %ax,-0x20(%rbp)\n 761:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 768:\t66 89 45 de          \tmov    %ax,-0x22(%rbp)\n 76c:\te9 f7 01 00 00       \tjmpq   968 <elfloader_load+0x49b>\n 771:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 778:\tba 0a 00 00 00       \tmov    $0xa,%edx\n 77d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 782:\t48 89 c7             \tmov    %rax,%rdi\n 785:\te8 00 00 00 00       \tcallq  78a <elfloader_load+0x2bd>\n 78a:\t85 c0                \ttest   %eax,%eax\n 78c:\t75 1f                \tjne    7ad <elfloader_load+0x2e0>\n 78e:\tc6 45 e7 01          \tmovb   $0x1,-0x19(%rbp)\n 792:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 799:\t66 89 45 e0          \tmov    %ax,-0x20(%rbp)\n 79d:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 7a4:\t66 89 45 de          \tmov    %ax,-0x22(%rbp)\n 7a8:\te9 bb 01 00 00       \tjmpq   968 <elfloader_load+0x49b>\n 7ad:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 7b4:\tba 05 00 00 00       \tmov    $0x5,%edx\n 7b9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 7be:\t48 89 c7             \tmov    %rax,%rdi\n 7c1:\te8 00 00 00 00       \tcallq  7c6 <elfloader_load+0x2f9>\n 7c6:\t85 c0                \ttest   %eax,%eax\n 7c8:\t75 2e                \tjne    7f8 <elfloader_load+0x32b>\n 7ca:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 7d1:\t66 89 45 dc          \tmov    %ax,-0x24(%rbp)\n 7d5:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 7dc:\t66 89 45 da          \tmov    %ax,-0x26(%rbp)\n 7e0:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 7e3:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 7e9 <elfloader_load+0x31c>\n 7e9:\t0f b7 45 dc          \tmovzwl -0x24(%rbp),%eax\n 7ed:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 7f3 <elfloader_load+0x326>\n 7f3:\te9 70 01 00 00       \tjmpq   968 <elfloader_load+0x49b>\n 7f8:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 7ff:\tba 07 00 00 00       \tmov    $0x7,%edx\n 804:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 809:\t48 89 c7             \tmov    %rax,%rdi\n 80c:\te8 00 00 00 00       \tcallq  811 <elfloader_load+0x344>\n 811:\t85 c0                \ttest   %eax,%eax\n 813:\t75 2e                \tjne    843 <elfloader_load+0x376>\n 815:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 81c:\t66 89 45 d4          \tmov    %ax,-0x2c(%rbp)\n 820:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 827:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n 82b:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 82e:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 834 <elfloader_load+0x367>\n 834:\t0f b7 45 d4          \tmovzwl -0x2c(%rbp),%eax\n 838:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 83e <elfloader_load+0x371>\n 83e:\te9 25 01 00 00       \tjmpq   968 <elfloader_load+0x49b>\n 843:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 84a:\tba 0b 00 00 00       \tmov    $0xb,%edx\n 84f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 854:\t48 89 c7             \tmov    %rax,%rdi\n 857:\te8 00 00 00 00       \tcallq  85c <elfloader_load+0x38f>\n 85c:\t85 c0                \ttest   %eax,%eax\n 85e:\t75 1f                \tjne    87f <elfloader_load+0x3b2>\n 860:\tc6 45 e7 00          \tmovb   $0x0,-0x19(%rbp)\n 864:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 86b:\t66 89 45 d0          \tmov    %ax,-0x30(%rbp)\n 86f:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 876:\t66 89 45 ce          \tmov    %ax,-0x32(%rbp)\n 87a:\te9 e9 00 00 00       \tjmpq   968 <elfloader_load+0x49b>\n 87f:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 886:\tba 0c 00 00 00       \tmov    $0xc,%edx\n 88b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 890:\t48 89 c7             \tmov    %rax,%rdi\n 893:\te8 00 00 00 00       \tcallq  898 <elfloader_load+0x3cb>\n 898:\t85 c0                \ttest   %eax,%eax\n 89a:\t75 1f                \tjne    8bb <elfloader_load+0x3ee>\n 89c:\tc6 45 e7 01          \tmovb   $0x1,-0x19(%rbp)\n 8a0:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 8a7:\t66 89 45 d0          \tmov    %ax,-0x30(%rbp)\n 8ab:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 8b2:\t66 89 45 ce          \tmov    %ax,-0x32(%rbp)\n 8b6:\te9 ad 00 00 00       \tjmpq   968 <elfloader_load+0x49b>\n 8bb:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 8c2:\tba 09 00 00 00       \tmov    $0x9,%edx\n 8c7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 8cc:\t48 89 c7             \tmov    %rax,%rdi\n 8cf:\te8 00 00 00 00       \tcallq  8d4 <elfloader_load+0x407>\n 8d4:\t85 c0                \ttest   %eax,%eax\n 8d6:\t75 1c                \tjne    8f4 <elfloader_load+0x427>\n 8d8:\tc6 45 e7 00          \tmovb   $0x0,-0x19(%rbp)\n 8dc:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 8e3:\t66 89 45 d8          \tmov    %ax,-0x28(%rbp)\n 8e7:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 8ee:\t66 89 45 d6          \tmov    %ax,-0x2a(%rbp)\n 8f2:\teb 74                \tjmp    968 <elfloader_load+0x49b>\n 8f4:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 8fb:\tba 0a 00 00 00       \tmov    $0xa,%edx\n 900:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 905:\t48 89 c7             \tmov    %rax,%rdi\n 908:\te8 00 00 00 00       \tcallq  90d <elfloader_load+0x440>\n 90d:\t85 c0                \ttest   %eax,%eax\n 90f:\t75 1c                \tjne    92d <elfloader_load+0x460>\n 911:\tc6 45 e7 01          \tmovb   $0x1,-0x19(%rbp)\n 915:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 91c:\t66 89 45 d8          \tmov    %ax,-0x28(%rbp)\n 920:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 927:\t66 89 45 d6          \tmov    %ax,-0x2a(%rbp)\n 92b:\teb 3b                \tjmp    968 <elfloader_load+0x49b>\n 92d:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 934:\tba 04 00 00 00       \tmov    $0x4,%edx\n 939:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 93e:\t48 89 c7             \tmov    %rax,%rdi\n 941:\te8 00 00 00 00       \tcallq  946 <elfloader_load+0x479>\n 946:\t85 c0                \ttest   %eax,%eax\n 948:\t75 1e                \tjne    968 <elfloader_load+0x49b>\n 94a:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 951:\t66 89 45 c4          \tmov    %ax,-0x3c(%rbp)\n 955:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 958:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 95e <elfloader_load+0x491>\n 95e:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 968 <elfloader_load+0x49b>\n 965:\t00 00 00 \n 968:\t0f b7 45 c2          \tmovzwl -0x3e(%rbp),%eax\n 96c:\t01 45 ec             \tadd    %eax,-0x14(%rbp)\n 96f:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n 973:\t0f b7 45 c0          \tmovzwl -0x40(%rbp),%eax\n 977:\t39 45 e8             \tcmp    %eax,-0x18(%rbp)\n 97a:\t0f 8c d1 fc ff ff    \tjl     651 <elfloader_load+0x184>\n 980:\t66 83 7d ca 00       \tcmpw   $0x0,-0x36(%rbp)\n 985:\t75 0a                \tjne    991 <elfloader_load+0x4c4>\n 987:\tb8 02 00 00 00       \tmov    $0x2,%eax\n 98c:\te9 65 02 00 00       \tjmpq   bf6 <elfloader_load+0x729>\n 991:\t66 83 7d c6 00       \tcmpw   $0x0,-0x3a(%rbp)\n 996:\t75 0a                \tjne    9a2 <elfloader_load+0x4d5>\n 998:\tb8 03 00 00 00       \tmov    $0x3,%eax\n 99d:\te9 54 02 00 00       \tjmpq   bf6 <elfloader_load+0x729>\n 9a2:\t66 83 7d e2 00       \tcmpw   $0x0,-0x1e(%rbp)\n 9a7:\t75 0a                \tjne    9b3 <elfloader_load+0x4e6>\n 9a9:\tb8 04 00 00 00       \tmov    $0x4,%eax\n 9ae:\te9 43 02 00 00       \tjmpq   bf6 <elfloader_load+0x729>\n 9b3:\t0f b7 55 c4          \tmovzwl -0x3c(%rbp),%edx\n 9b7:\t0f b7 45 da          \tmovzwl -0x26(%rbp),%eax\n 9bb:\t01 d0                \tadd    %edx,%eax\n 9bd:\t89 c7                \tmov    %eax,%edi\n 9bf:\te8 00 00 00 00       \tcallq  9c4 <elfloader_load+0x4f7>\n 9c4:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 9cb <elfloader_load+0x4fe>\n 9cb:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 9d2 <elfloader_load+0x505>\n 9d2:\t0f b7 45 c4          \tmovzwl -0x3c(%rbp),%eax\n 9d6:\t48 01 d0             \tadd    %rdx,%rax\n 9d9:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 9e0 <elfloader_load+0x513>\n 9e0:\t0f b7 55 e2          \tmovzwl -0x1e(%rbp),%edx\n 9e4:\t0f b7 45 d2          \tmovzwl -0x2e(%rbp),%eax\n 9e8:\t01 d0                \tadd    %edx,%eax\n 9ea:\t89 c7                \tmov    %eax,%edi\n 9ec:\te8 00 00 00 00       \tcallq  9f1 <elfloader_load+0x524>\n 9f1:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 9f8 <elfloader_load+0x52b>\n 9f8:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 9ff <elfloader_load+0x532>\n 9ff:\t0f b7 45 e2          \tmovzwl -0x1e(%rbp),%eax\n a03:\t48 01 d0             \tadd    %rdx,%rax\n a06:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # a0d <elfloader_load+0x540>\n a0d:\t66 83 7d de 00       \tcmpw   $0x0,-0x22(%rbp)\n a12:\t74 58                \tje     a6c <elfloader_load+0x59f>\n a14:\t44 0f b6 55 e7       \tmovzbl -0x19(%rbp),%r10d\n a19:\t44 0f b7 4d ca       \tmovzwl -0x36(%rbp),%r9d\n a1e:\t44 0f b7 45 cc       \tmovzwl -0x34(%rbp),%r8d\n a23:\t0f b7 7d c8          \tmovzwl -0x38(%rbp),%edi\n a27:\t4c 8b 1d 00 00 00 00 \tmov    0x0(%rip),%r11        # a2e <elfloader_load+0x561>\n a2e:\t0f b7 4d e4          \tmovzwl -0x1c(%rbp),%ecx\n a32:\t0f b7 55 de          \tmovzwl -0x22(%rbp),%edx\n a36:\t0f b7 75 e0          \tmovzwl -0x20(%rbp),%esi\n a3a:\t8b 5d bc             \tmov    -0x44(%rbp),%ebx\n a3d:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n a43:\t41 52                \tpush   %r10\n a45:\t41 51                \tpush   %r9\n a47:\t41 50                \tpush   %r8\n a49:\t57                   \tpush   %rdi\n a4a:\t41 89 d9             \tmov    %ebx,%r9d\n a4d:\t4d 89 d8             \tmov    %r11,%r8\n a50:\t89 c7                \tmov    %eax,%edi\n a52:\te8 f5 f6 ff ff       \tcallq  14c <relocate_section>\n a57:\t48 83 c4 20          \tadd    $0x20,%rsp\n a5b:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n a5e:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n a62:\t74 08                \tje     a6c <elfloader_load+0x59f>\n a64:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n a67:\te9 8a 01 00 00       \tjmpq   bf6 <elfloader_load+0x729>\n a6c:\t66 83 7d ce 00       \tcmpw   $0x0,-0x32(%rbp)\n a71:\t74 58                \tje     acb <elfloader_load+0x5fe>\n a73:\t44 0f b6 55 e7       \tmovzbl -0x19(%rbp),%r10d\n a78:\t44 0f b7 4d ca       \tmovzwl -0x36(%rbp),%r9d\n a7d:\t44 0f b7 45 cc       \tmovzwl -0x34(%rbp),%r8d\n a82:\t0f b7 7d c8          \tmovzwl -0x38(%rbp),%edi\n a86:\t4c 8b 1d 00 00 00 00 \tmov    0x0(%rip),%r11        # a8d <elfloader_load+0x5c0>\n a8d:\t0f b7 4d d4          \tmovzwl -0x2c(%rbp),%ecx\n a91:\t0f b7 55 ce          \tmovzwl -0x32(%rbp),%edx\n a95:\t0f b7 75 d0          \tmovzwl -0x30(%rbp),%esi\n a99:\t8b 5d bc             \tmov    -0x44(%rbp),%ebx\n a9c:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n aa2:\t41 52                \tpush   %r10\n aa4:\t41 51                \tpush   %r9\n aa6:\t41 50                \tpush   %r8\n aa8:\t57                   \tpush   %rdi\n aa9:\t41 89 d9             \tmov    %ebx,%r9d\n aac:\t4d 89 d8             \tmov    %r11,%r8\n aaf:\t89 c7                \tmov    %eax,%edi\n ab1:\te8 96 f6 ff ff       \tcallq  14c <relocate_section>\n ab6:\t48 83 c4 20          \tadd    $0x20,%rsp\n aba:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n abd:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n ac1:\t74 08                \tje     acb <elfloader_load+0x5fe>\n ac3:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n ac6:\te9 2b 01 00 00       \tjmpq   bf6 <elfloader_load+0x729>\n acb:\t66 83 7d d6 00       \tcmpw   $0x0,-0x2a(%rbp)\n ad0:\t74 58                \tje     b2a <elfloader_load+0x65d>\n ad2:\t44 0f b6 55 e7       \tmovzbl -0x19(%rbp),%r10d\n ad7:\t44 0f b7 4d ca       \tmovzwl -0x36(%rbp),%r9d\n adc:\t44 0f b7 45 cc       \tmovzwl -0x34(%rbp),%r8d\n ae1:\t0f b7 7d c8          \tmovzwl -0x38(%rbp),%edi\n ae5:\t4c 8b 1d 00 00 00 00 \tmov    0x0(%rip),%r11        # aec <elfloader_load+0x61f>\n aec:\t0f b7 4d dc          \tmovzwl -0x24(%rbp),%ecx\n af0:\t0f b7 55 d6          \tmovzwl -0x2a(%rbp),%edx\n af4:\t0f b7 75 d8          \tmovzwl -0x28(%rbp),%esi\n af8:\t8b 5d bc             \tmov    -0x44(%rbp),%ebx\n afb:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n b01:\t41 52                \tpush   %r10\n b03:\t41 51                \tpush   %r9\n b05:\t41 50                \tpush   %r8\n b07:\t57                   \tpush   %rdi\n b08:\t41 89 d9             \tmov    %ebx,%r9d\n b0b:\t4d 89 d8             \tmov    %r11,%r8\n b0e:\t89 c7                \tmov    %eax,%edi\n b10:\te8 37 f6 ff ff       \tcallq  14c <relocate_section>\n b15:\t48 83 c4 20          \tadd    $0x20,%rsp\n b19:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n b1c:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n b20:\t74 08                \tje     b2a <elfloader_load+0x65d>\n b22:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n b25:\te9 cc 00 00 00       \tjmpq   bf6 <elfloader_load+0x729>\n b2a:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # b31 <elfloader_load+0x664>\n b31:\t0f b7 55 e2          \tmovzwl -0x1e(%rbp),%edx\n b35:\t0f b7 75 e4          \tmovzwl -0x1c(%rbp),%esi\n b39:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n b3f:\t89 c7                \tmov    %eax,%edi\n b41:\te8 00 00 00 00       \tcallq  b46 <elfloader_load+0x679>\n b46:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # b4d <elfloader_load+0x680>\n b4d:\t0f b7 55 d2          \tmovzwl -0x2e(%rbp),%edx\n b51:\t0f b7 75 d4          \tmovzwl -0x2c(%rbp),%esi\n b55:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n b5b:\t89 c7                \tmov    %eax,%edi\n b5d:\te8 00 00 00 00       \tcallq  b62 <elfloader_load+0x695>\n b62:\t0f b7 55 c4          \tmovzwl -0x3c(%rbp),%edx\n b66:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b6d <elfloader_load+0x6a0>\n b6d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n b72:\t48 89 c7             \tmov    %rax,%rdi\n b75:\te8 00 00 00 00       \tcallq  b7a <elfloader_load+0x6ad>\n b7a:\t0f b7 4d da          \tmovzwl -0x26(%rbp),%ecx\n b7e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # b85 <elfloader_load+0x6b8>\n b85:\t0f b7 75 dc          \tmovzwl -0x24(%rbp),%esi\n b89:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n b8f:\t89 c7                \tmov    %eax,%edi\n b91:\te8 6a f4 ff ff       \tcallq  0 <seek_read>\n b96:\t0f b7 75 c8          \tmovzwl -0x38(%rbp),%esi\n b9a:\t0f b7 4d ca          \tmovzwl -0x36(%rbp),%ecx\n b9e:\t0f b7 55 cc          \tmovzwl -0x34(%rbp),%edx\n ba2:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n ba8:\t41 89 f0             \tmov    %esi,%r8d\n bab:\tbe 00 00 00 00       \tmov    $0x0,%esi\n bb0:\t89 c7                \tmov    %eax,%edi\n bb2:\te8 89 f4 ff ff       \tcallq  40 <find_local_symbol>\n bb7:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n bbb:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n bc0:\t74 12                \tje     bd4 <elfloader_load+0x707>\n bc2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n bc6:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # bcd <elfloader_load+0x700>\n bcd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n bd2:\teb 22                \tjmp    bf6 <elfloader_load+0x729>\n bd4:\t0f b7 4d c8          \tmovzwl -0x38(%rbp),%ecx\n bd8:\t0f b7 55 ca          \tmovzwl -0x36(%rbp),%edx\n bdc:\t0f b7 75 cc          \tmovzwl -0x34(%rbp),%esi\n be0:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n be6:\t89 c7                \tmov    %eax,%edi\n be8:\te8 33 f8 ff ff       \tcallq  420 <find_program_processes>\n bed:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n bf1:\tb8 07 00 00 00       \tmov    $0x7,%eax\n bf6:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n bfa:\tc9                   \tleaveq \n bfb:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall elfloader_load(unsigned int a1) {\n  __int64 result;\n  char v2[Number];\n  char v3[Number];\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  char s1[Number];\n  __int64 v10;\n  unsigned __int16 v11;\n  unsigned __int16 v12;\n  unsigned __int16 v13;\n  int v14;\n  __int64 v15;\n  unsigned int v16;\n  unsigned int v17;\n  unsigned __int16 v18;\n  unsigned __int16 v19;\n  unsigned __int16 v20;\n  __int16 v21;\n  unsigned __int16 v22;\n  unsigned __int16 v23;\n  unsigned __int16 v24;\n  unsigned __int16 v25;\n  unsigned __int16 v26;\n  unsigned __int16 v27;\n  unsigned __int16 v28;\n  unsigned __int16 v29;\n  unsigned __int16 v30;\n  unsigned __int16 v31;\n  unsigned __int16 v32;\n  unsigned __int16 v33;\n  unsigned __int16 v34;\n  unsigned __int16 v35;\n  unsigned __int16 v36;\n  char v37;\n  int i;\n  unsigned int v39;\n  v37 = Number;\n  v36 = Number;\n  v34 = Number;\n  v32 = Number;\n  v30 = Number;\n  v28 = Number;\n  v26 = Number;\n  v24 = Number;\n  v22 = Number;\n  v20 = Number;\n  elfloader_unknown[Number] = Number;\n  seek_read(a1, Number, (__int64)s1, Number);\n  if (memcmp(s1, &elf_magic_header, Number))\n    return Number L;\n  v39 = v10;\n  seek_read(a1, v10, (__int64)&v5, Number);\n  v19 = v11;\n  v18 = v12;\n  seek_read(a1, v10 + v11 * v13, (__int64)v3, Number);\n  v17 = v4;\n  v21 = Number;\n  v23 = Number;\n  v25 = Number;\n  v27 = Number;\n  v29 = Number;\n  v31 = Number;\n  v33 = Number;\n  v35 = Number;\n  text = Number;\n  rodata = Number;\n  data = Number;\n  bss = Number;\n  v39 = v10;\n  for (i = Number; i < v18; ++i) {\n    seek_read(a1, v39, (__int64)&v5, Number);\n    v14 = v5 + v17;\n    seek_read(a1, v5 + v17, (__int64)v2, Number);\n    if (v6 == Number) {\n      v24 = v7;\n      v23 = v8;\n    } else if (v6 == Number) {\n      v22 = v7;\n      v21 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v36 = v7;\n      v35 = v8;\n      text = i;\n      dword_C34 = (unsigned __int16)v7;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v34 = v7;\n      v33 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v34 = v7;\n      v33 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v32 = v7;\n      v31 = v8;\n      data = i;\n      dword_C14 = (unsigned __int16)v7;\n    } else if (!strncmp(v2, String, Number)) {\n      v28 = v7;\n      v27 = v8;\n      rodata = i;\n      dword_C24 = (unsigned __int16)v7;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v26 = v7;\n      v25 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v26 = v7;\n      v25 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v30 = v7;\n      v29 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v30 = v7;\n      v29 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v20 = v8;\n      bss = i;\n      dword_C04 = Number;\n    }\n    v39 += v19;\n  }\n  if (!v23)\n    return Number L;\n  if (!v21)\n    return Number L;\n  if (!v35)\n    return Number L;\n  s = (void *)elfloader_arch_allocate_ram(v20 + (unsigned int)v31);\n  qword_C18 = (__int64)s + v20;\n  qword_C38 = elfloader_arch_allocate_rom(v35 + (unsigned int)v27);\n  qword_C28 = qword_C38 + v35;\n  if (v33) {\n    v16 =\n        relocate_section(a1, v34, v33, v36, qword_C38, v17, v22, v24, v23, v37);\n    if (v16)\n      return v16;\n  }\n  if (v25) {\n    v16 =\n        relocate_section(a1, v26, v25, v28, qword_C28, v17, v22, v24, v23, v37);\n    if (v16)\n      return v16;\n  }\n  if (v29) {\n    v16 =\n        relocate_section(a1, v30, v29, v32, qword_C18, v17, v22, v24, v23, v37);\n    if (v16)\n      return v16;\n  }\n  elfloader_arch_write_rom(a1, v36, v35, qword_C38);\n  elfloader_arch_write_rom(a1, v28, v27, qword_C28);\n  memset(s, Number, v20);\n  seek_read(a1, v32, qword_C18, v31);\n  v15 = find_local_symbol(a1, String, v24, v23, v22);\n  if (v15) {\n    elfloader_autostart_processes = v15;\n    result = Number L;\n  } else {\n    find_program_processes(a1, v24, v23, v22);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl elfloader_load(int fd) {\n  int result;\n  char name[Number];\n  elf32_shdr <span class=\"supfact\">strtable</span>;\n  elf32_shdr <span class=\"supfact\">shdr</span>;\n  elf32_ehdr <span class=\"supfact\">ehdr</span>;\n  unsigned int nameptr;\n  process **process;\n  int ret;\n  unsigned int strs;\n  unsigned __int16 shdrnum;\n  unsigned __int16 shdrsize;\n  unsigned __int16 bsssize;\n  unsigned __int16 strtabsize;\n  unsigned __int16 strtaboff;\n  unsigned __int16 symtabsize;\n  unsigned __int16 symtaboff;\n  unsigned __int16 rodatarelasize;\n  unsigned __int16 rodatarelaoff;\n  unsigned __int16 rodatasize;\n  unsigned __int16 rodataoff;\n  unsigned __int16 datarelasize;\n  unsigned __int16 datarelaoff;\n  unsigned __int16 datasize;\n  unsigned __int16 dataoff;\n  unsigned __int16 textrelasize;\n  unsigned __int16 textrelaoff;\n  unsigned __int16 textsize;\n  unsigned __int16 textoff;\n  unsigned __int8 using_relas;\n  int i;\n  unsigned int shdrptr;\n  using_relas = Number;\n  textoff = Number;\n  textrelaoff = Number;\n  dataoff = Number;\n  datarelaoff = Number;\n  rodataoff = Number;\n  rodatarelaoff = Number;\n  symtaboff = Number;\n  strtaboff = Number;\n  bsssize = Number;\n  elfloader_unknown[Number] = Number;\n  seek_read(fd, Number, (char *)&<span class=\"supfact\">ehdr</span>, Number);\n  if (memcmp(&<span class=\"supfact\">ehdr</span>, elf_magic_header, Number))\n    return Number;\n  shdrptr = <span class=\"supfact\">ehdr</span>.e_shoff;\n  seek_read(fd, <span class=\"supfact\">ehdr</span>.e_shoff, (char *)&<span class=\"supfact\">shdr</span>,\n            Number);\n  shdrsize = <span class=\"supfact\">ehdr</span>.e_shentsize;\n  shdrnum = <span class=\"supfact\">ehdr</span>.e_shnum;\n  seek_read(fd,\n            LODWORD(<span class=\"supfact\">ehdr</span>.e_shoff) +\n                <span class=\"supfact\">ehdr</span>.e_shentsize *\n                    <span class=\"supfact\">ehdr</span>.e_shstrndx,\n            (char *)&<span class=\"supfact\">strtable</span>, Number);\n  strs = <span class=\"supfact\">strtable</span>.sh_offset;\n  strtabsize = Number;\n  symtabsize = Number;\n  rodatarelasize = Number;\n  rodatasize = Number;\n  datarelasize = Number;\n  datasize = Number;\n  textrelasize = Number;\n  textsize = Number;\n  text.number = Number;\n  rodata.number = Number;\n  data.number = Number;\n  bss.number = Number;\n  shdrptr = <span class=\"supfact\">ehdr</span>.e_shoff;\n  for (i = Number; i < shdrnum; ++i) {\n    seek_read(fd, shdrptr, (char *)&<span class=\"supfact\">shdr</span>, Number);\n    nameptr = LODWORD(<span class=\"supfact\">shdr</span>.sh_name) + strs;\n    seek_read(fd, LODWORD(<span class=\"supfact\">shdr</span>.sh_name) + strs, name, Number);\n    if (<span class=\"supfact\">shdr</span>.sh_type == Number) {\n      symtaboff = <span class=\"supfact\">shdr</span>.sh_offset;\n      symtabsize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (<span class=\"supfact\">shdr</span>.sh_type == Number) {\n      strtaboff = <span class=\"supfact\">shdr</span>.sh_offset;\n      strtabsize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      textoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      textsize = <span class=\"supfact\">shdr</span>.sh_size;\n      text.number = i;\n      text.offset = LOWORD(<span class=\"supfact\">shdr</span>.sh_offset);\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      textrelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      textrelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      textrelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      textrelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      dataoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      datasize = <span class=\"supfact\">shdr</span>.sh_size;\n      data.number = i;\n      data.offset = LOWORD(<span class=\"supfact\">shdr</span>.sh_offset);\n    } else if (!strncmp(name, String, Number)) {\n      rodataoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      rodatasize = <span class=\"supfact\">shdr</span>.sh_size;\n      rodata.number = i;\n      rodata.offset = LOWORD(<span class=\"supfact\">shdr</span>.sh_offset);\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      rodatarelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      rodatarelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      rodatarelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      rodatarelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      datarelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      datarelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      datarelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      datarelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      bsssize = <span class=\"supfact\">shdr</span>.sh_size;\n      bss.number = i;\n      bss.offset = Number;\n    }\n    shdrptr += shdrsize;\n  }\n  if (!symtabsize)\n    return Number;\n  if (!strtabsize)\n    return Number;\n  if (!textsize)\n    return Number;\n  bss.address =\n      (char *)elfloader_arch_allocate_ram(bsssize + (unsigned int)datasize);\n  data.address = &bss.address[bsssize];\n  text.address =\n      (char *)elfloader_arch_allocate_rom(textsize + (unsigned int)rodatasize);\n  rodata.address = &text.address[textsize];\n  if (textrelasize) {\n    ret = relocate_section(fd, textrelaoff, textrelasize, textoff, text.address,\n                           strs, strtaboff, symtaboff, symtabsize, using_relas);\n    if (ret)\n      return ret;\n  }\n  if (rodatarelasize) {\n    ret = relocate_section(fd, rodatarelaoff, rodatarelasize, rodataoff,\n                           rodata.address, strs, strtaboff, symtaboff,\n                           symtabsize, using_relas);\n    if (ret)\n      return ret;\n  }\n  if (datarelasize) {\n    ret = relocate_section(fd, datarelaoff, datarelasize, dataoff, data.address,\n                           strs, strtaboff, symtaboff, symtabsize, using_relas);\n    if (ret)\n      return ret;\n  }\n  elfloader_arch_write_rom((unsigned int)fd, textoff, textsize, text.address);\n  elfloader_arch_write_rom((unsigned int)fd, rodataoff, rodatasize,\n                           rodata.address);\n  memset(bss.address, Number, bsssize);\n  seek_read(fd, dataoff, data.address, datasize);\n  process = (process **)find_local_symbol(fd, String, symtaboff, symtabsize,\n                                          strtaboff);\n  if (process) {\n    elfloader_autostart_processes = process;\n    result = Number;\n  } else {\n    find_program_processes(fd, symtaboff, symtabsize, strtaboff);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "struct elf32_shdr { elf32_word sh_name; elf32_word sh_type; elf32_word sh_flags; elf32_addr sh_addr; elf32_off sh_offset; elf32_word sh_size; elf32_word sh_link; elf32_word sh_info; elf32_word sh_addralign; elf32_word sh_entsize; }", "pred_name": "strtable", "ref_name": "strtable", "ref_type": "struct elf32_shdr { elf32_word sh_name; elf32_word sh_type; elf32_word sh_flags; elf32_addr sh_addr; elf32_off sh_offset; elf32_word sh_size; elf32_word sh_link; elf32_word sh_info; elf32_word sh_addralign; elf32_word sh_entsize; }"}, {"name": "v5", "type": "struct elf32_shdr { elf32_word sh_name; elf32_word sh_type; elf32_word sh_flags; elf32_addr sh_addr; elf32_off sh_offset; elf32_word sh_size; elf32_word sh_link; elf32_word sh_info; elf32_word sh_addralign; elf32_word sh_entsize; }", "pred_name": "shdr", "ref_name": "shdr", "ref_type": "struct elf32_shdr { elf32_word sh_name; elf32_word sh_type; elf32_word sh_flags; elf32_addr sh_addr; elf32_off sh_offset; elf32_word sh_size; elf32_word sh_link; elf32_word sh_info; elf32_word sh_addralign; elf32_word sh_entsize; }"}, {"name": "s1", "type": "struct elf32_ehdr { unsigned __int8[16] e_ident; elf32_half e_type; elf32_half e_machine; PADDING (4); elf32_word e_version; elf32_addr e_entry; elf32_off e_phoff; elf32_off e_shoff; elf32_word e_flags; elf32_half e_ehsize; elf32_half e_phentsize; elf32_half e_phnum; elf32_half e_shentsize; elf32_half e_shnum; elf32_half e_shstrndx; PADDING (4); }", "pred_name": "ehdr", "ref_name": "ehdr", "ref_type": "struct elf32_ehdr { unsigned __int8[16] e_ident; elf32_half e_type; elf32_half e_machine; PADDING (4); elf32_word e_version; elf32_addr e_entry; elf32_off e_phoff; elf32_off e_shoff; elf32_word e_flags; elf32_half e_ehsize; elf32_half e_phentsize; elf32_half e_phnum; elf32_half e_shentsize; elf32_half e_shnum; elf32_half e_shstrndx; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "allinurl", "repo_name": "dwm", "path": "allinurl/dwm/3839b87a1610eefa38917bf8b7c7486cd1534140cb424a37d2ea27bfcf7ada15", "path_in_repo": "allinurl/dwm//dwm.o", "objdump": "0000000000004321 <resizeclient>:\n    4321:\t55                   \tpush   %rbp\n    4322:\t48 89 e5             \tmov    %rsp,%rbp\n    4325:\t48 83 ec 50          \tsub    $0x50,%rsp\n    4329:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    432d:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    4330:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n    4333:\t89 4d bc             \tmov    %ecx,-0x44(%rbp)\n    4336:\t44 89 45 b8          \tmov    %r8d,-0x48(%rbp)\n    433a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    433e:\t8b 90 08 01 00 00    \tmov    0x108(%rax),%edx\n    4344:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4348:\t89 90 18 01 00 00    \tmov    %edx,0x118(%rax)\n    434e:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    4351:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    4354:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n    4357:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    435b:\t89 90 08 01 00 00    \tmov    %edx,0x108(%rax)\n    4361:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4365:\t8b 90 0c 01 00 00    \tmov    0x10c(%rax),%edx\n    436b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    436f:\t89 90 1c 01 00 00    \tmov    %edx,0x11c(%rax)\n    4375:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    4378:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    437b:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n    437e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4382:\t89 90 0c 01 00 00    \tmov    %edx,0x10c(%rax)\n    4388:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    438c:\t8b 90 10 01 00 00    \tmov    0x110(%rax),%edx\n    4392:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4396:\t89 90 20 01 00 00    \tmov    %edx,0x120(%rax)\n    439c:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    439f:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    43a2:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n    43a5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    43a9:\t89 90 10 01 00 00    \tmov    %edx,0x110(%rax)\n    43af:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    43b3:\t8b 90 14 01 00 00    \tmov    0x114(%rax),%edx\n    43b9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    43bd:\t89 90 24 01 00 00    \tmov    %edx,0x124(%rax)\n    43c3:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n    43c6:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    43c9:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    43cc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    43d0:\t89 90 14 01 00 00    \tmov    %edx,0x114(%rax)\n    43d6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    43da:\t8b 80 48 01 00 00    \tmov    0x148(%rax),%eax\n    43e0:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    43e3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    43e7:\t48 8b b0 88 01 00 00 \tmov    0x188(%rax),%rsi\n    43ee:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 43f5 <resizeclient+0xd4>\n    43f5:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    43f9:\t48 89 d1             \tmov    %rdx,%rcx\n    43fc:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n    4401:\t48 89 c7             \tmov    %rax,%rdi\n    4404:\te8 00 00 00 00       \tcallq  4409 <resizeclient+0xe8>\n    4409:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    440d:\t48 89 c7             \tmov    %rax,%rdi\n    4410:\te8 5f d1 ff ff       \tcallq  1574 <configure>\n    4415:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 441c <resizeclient+0xfb>\n    441c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4421:\t48 89 c7             \tmov    %rax,%rdi\n    4424:\te8 00 00 00 00       \tcallq  4429 <resizeclient+0x108>\n    4429:\t90                   \tnop\n    442a:\tc9                   \tleaveq \n    442b:\tc3                   \tretq   ", "code_s": "int __fastcall resizeclient(__int64 a1, int a2, int a3, int a4, int a5) {\n  XWindowChanges v6;\n  *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number);\n  v6.x = a2;\n  *(_DWORD *)(a1 + Number) = a2;\n  *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number);\n  v6.y = a3;\n  *(_DWORD *)(a1 + Number) = a3;\n  *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number);\n  v6.width = a4;\n  *(_DWORD *)(a1 + Number) = a4;\n  *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number);\n  v6.height = a5;\n  *(_DWORD *)(a1 + Number) = a5;\n  v6.border_width = *(_DWORD *)(a1 + Number);\n  XConfigureWindow(dpy, *(_QWORD *)(a1 + Number), Number, &v6);\n  configure(a1);\n  return XSync(dpy, Number);\n}", "code_t": "void __cdecl resizeclient(Client_0 *c, int x, int y, int w, int h) {\n  XWindowChanges <span class=\"supfact\">wc</span>;\n  c->oldx = c->x;\n  <span class=\"supfact\">wc</span>.x = x;\n  c->x = x;\n  c->oldy = c->y;\n  <span class=\"supfact\">wc</span>.y = y;\n  c->y = y;\n  c->oldw = c->w;\n  <span class=\"supfact\">wc</span>.width = w;\n  c->w = w;\n  c->oldh = c->h;\n  <span class=\"supfact\">wc</span>.height = h;\n  c->h = h;\n  <span class=\"supfact\">wc</span>.border_width = c->bw;\n  XConfigureWindow(dpy, c->win, Number, &<span class=\"supfact\">wc</span>);\n  configure(c);\n  XSync(dpy, Number);\n}", "var": [{"name": "v6", "type": "struct XWindowChanges { int x; int y; int width; int height; int border_width; PADDING (4); Window sibling; int stack_mode; PADDING (4); }", "pred_name": "wc", "ref_name": "wc", "ref_type": "struct XWindowChanges { int x; int y; int width; int height; int border_width; PADDING (4); Window sibling; int stack_mode; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "Octavianus-zzw", "repo_name": "ansible", "path": "Octavianus-zzw/ansible/f2d6cbe7291a3ae5d8bd07ec29af1dd9855b1cb89aae5d4128f71a44553179f3", "path_in_repo": "Octavianus-zzw/ansible/redis/redis-5.0.4/deps/lua/src/lstrlib.o", "objdump": "00000000000003d2 <str_rep>:\n     3d2:\t55                   \tpush   %rbp\n     3d3:\t48 89 e5             \tmov    %rsp,%rbp\n     3d6:\t48 81 ec 40 20 00 00 \tsub    $0x2040,%rsp\n     3dd:\t48 89 bd c8 df ff ff \tmov    %rdi,-0x2038(%rbp)\n     3e4:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n     3e8:\t48 8b 85 c8 df ff ff \tmov    -0x2038(%rbp),%rax\n     3ef:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     3f4:\t48 89 c7             \tmov    %rax,%rdi\n     3f7:\te8 00 00 00 00       \tcallq  3fc <str_rep+0x2a>\n     3fc:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     400:\t48 8b 85 c8 df ff ff \tmov    -0x2038(%rbp),%rax\n     407:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     40c:\t48 89 c7             \tmov    %rax,%rdi\n     40f:\te8 00 00 00 00       \tcallq  414 <str_rep+0x42>\n     414:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     417:\t48 8d 95 d0 df ff ff \tlea    -0x2030(%rbp),%rdx\n     41e:\t48 8b 85 c8 df ff ff \tmov    -0x2038(%rbp),%rax\n     425:\t48 89 d6             \tmov    %rdx,%rsi\n     428:\t48 89 c7             \tmov    %rax,%rdi\n     42b:\te8 00 00 00 00       \tcallq  430 <str_rep+0x5e>\n     430:\teb 1a                \tjmp    44c <str_rep+0x7a>\n     432:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     436:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n     43a:\t48 8d 85 d0 df ff ff \tlea    -0x2030(%rbp),%rax\n     441:\t48 89 ce             \tmov    %rcx,%rsi\n     444:\t48 89 c7             \tmov    %rax,%rdi\n     447:\te8 00 00 00 00       \tcallq  44c <str_rep+0x7a>\n     44c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     44f:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     452:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n     455:\t85 c0                \ttest   %eax,%eax\n     457:\t7f d9                \tjg     432 <str_rep+0x60>\n     459:\t48 8d 85 d0 df ff ff \tlea    -0x2030(%rbp),%rax\n     460:\t48 89 c7             \tmov    %rax,%rdi\n     463:\te8 00 00 00 00       \tcallq  468 <str_rep+0x96>\n     468:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     46d:\tc9                   \tleaveq \n     46e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall str_rep(__int64 a1) {\n  int v1;\n  char v3[Number];\n  __int64 v4;\n  __int64 v5;\n  int v6;\n  v5 = luaL_checklstring(a1, Number L, &v4);\n  v6 = luaL_checkinteger(a1, Number L);\n  luaL_buffinit(a1, v3);\n  while (Number) {\n    v1 = v6--;\n    if (v1 <= Number)\n      break;\n    luaL_addlstring(v3, v5, v4);\n  }\n  luaL_pushresult(v3);\n  return Number L;\n}", "code_t": "int __cdecl str_rep(lua_State_0 *L) {\n  int v1;\n  luaL_Buffer_0 <span class=\"supfact\">b</span>;\n  size_t l;\n  const char *s;\n  int n;\n  s = (const char *)luaL_checklstring(L, Number L, &l);\n  n = luaL_checkinteger(L, Number L);\n  luaL_buffinit(L, &<span class=\"supfact\">b</span>);\n  while (Number) {\n    v1 = n--;\n    if (v1 <= Number)\n      break;\n    luaL_addlstring(&<span class=\"supfact\">b</span>, s, l);\n  }\n  luaL_pushresult(&<span class=\"supfact\">b</span>);\n  return Number;\n}", "var": [{"name": "v3", "type": "struct luaL_Buffer_0 { char * p; int lvl; PADDING (4); lua_State_0 * L; char[8192] buffer; }", "pred_name": "b", "ref_name": "b", "ref_type": "struct luaL_Buffer_0 { char * p; int lvl; PADDING (4); lua_State_0 * L; char[8192] buffer; }"}], "body_in_train": true}, {"repo_owner": "Dar13", "repo_name": "OpenMemDB", "path": "Dar13/OpenMemDB/f652a8e8913d63a93adbb5f4dc5a286f4a54baeb0912de7926f3f2c06b1e4428", "path_in_repo": "Dar13/OpenMemDB/database/libomdb/ConsoleDemo/omdb_console", "objdump": "0000000000409aca <_ZNSt6vectorIS_IlSaIlEESaIS1_EE4backEv>:\n  409aca:\t55                   \tpush   %rbp\n  409acb:\t48 89 e5             \tmov    %rsp,%rbp\n  409ace:\t48 83 ec 20          \tsub    $0x20,%rsp\n  409ad2:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  409ad6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409ada:\t48 89 c7             \tmov    %rax,%rdi\n  409add:\te8 b4 c9 ff ff       \tcallq  406496 <_ZNSt6vectorIS_IlSaIlEESaIS1_EE3endEv>\n  409ae2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  409ae6:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  409aea:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  409aef:\t48 89 c7             \tmov    %rax,%rdi\n  409af2:\te8 41 01 00 00       \tcallq  409c38 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIlSaIlEES1_IS3_SaIS3_EEEmiEl>\n  409af7:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  409afb:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  409aff:\t48 89 c7             \tmov    %rax,%rdi\n  409b02:\te8 7d 01 00 00       \tcallq  409c84 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIlSaIlEES1_IS3_SaIS3_EEEdeEv>\n  409b07:\tc9                   \tleaveq \n  409b08:\tc3                   \tretq   \n  409b09:\t90                   \tnop", "code_s": "__int64 __fastcall std vector<std vector<long>> back(__int64 a1) {\n  __int64 v2;\n  __int64 v3;\n  v3 = std vector<std vector<long>> end(a1);\n  v2 = __gnu_cxx\n      __normal_iterator<std vector<long> *, std vector<std vector<long>>>\n      operator-(&v3, Number L);\n  return __gnu_cxx\n      __normal_iterator<std vector<long> *, std vector<std vector<long>>>\n      operator*(&v2);\n}", "code_t": "std vector<std vector<long int>> reference __cdecl std vector<std vector<long>>\nback(std vector<std vector<long int>> *const this) {\n  __gnu_cxx __normal_iterator<std vector<long int> *,\n                              std vector<std vector<long int>>>\n      <span class=\"supfact\">v2</span>;\n  __gnu_cxx __normal_iterator<std vector<long int> *,\n                              std vector<std vector<long int>>>\n      <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span>._M_current =\n      std vector<std vector<long>> end(this)._M_current;\n  <span class=\"supfact\">v2</span>._M_current =\n      __gnu_cxx\n          __normal_iterator<std vector<long> *, std vector<std vector<long>>>\n          operator-(&<span class=\"supfact\">v3</span>, Number L)._M_current;\n  return __gnu_cxx\n      __normal_iterator<std vector<long> *, std vector<std vector<long>>>\n      operator*(&<span class=\"supfact\">v2</span>);\n}", "var": [{"name": "v2", "type": "__int64", "pred_name": "v2", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<std::vector<long int>*,std::vector<std::vector<long int>> > { std::vector<long int> * _M_current; }"}, {"name": "v3", "type": "__int64", "pred_name": "v3", "ref_name": "v3", "ref_type": "struct __gnu_cxx::__normal_iterator<std::vector<long int>*,std::vector<std::vector<long int>> > { std::vector<long int> * _M_current; }"}], "body_in_train": true}, {"repo_owner": "baozich", "repo_name": "mini-os", "path": "baozich/mini-os/be0fb54ff224953bf43fc7cc60f775bf92928678f4daa8e38d6edccb12ac2fcb", "path_in_repo": "baozich/mini-os//mini-os.o", "objdump": "0000000000010f14 <allocate_xenbus_id>:\n   10f14:\t55                   \tpush   %rbp\n   10f15:\t48 89 e5             \tmov    %rsp,%rbp\n   10f18:\t48 83 ec 50          \tsub    $0x50,%rsp\n   10f1c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   10f21:\te8 13 f6 ff ff       \tcallq  10539 <_raw_spin_lock>\n   10f26:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 10f2c <allocate_xenbus_id+0x18>\n   10f2c:\t83 f8 1f             \tcmp    $0x1f,%eax\n   10f2f:\t0f 8e 6b 01 00 00    \tjle    110a0 <allocate_xenbus_id+0x18c>\n   10f35:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   10f3a:\te8 da f5 ff ff       \tcallq  10519 <_raw_spin_unlock>\n   10f3f:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n   10f46:\t00 \n   10f47:\t48 c7 45 b8 00 00 00 \tmovq   $0x0,-0x48(%rbp)\n   10f4e:\t00 \n   10f4f:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n   10f56:\t00 \n   10f57:\te8 b9 f3 ff ff       \tcallq  10315 <get_current>\n   10f5c:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n   10f60:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 10f66 <allocate_xenbus_id+0x52>\n   10f66:\t83 f8 1f             \tcmp    $0x1f,%eax\n   10f69:\t0f 8e 2b 01 00 00    \tjle    1109a <allocate_xenbus_id+0x186>\n   10f6f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10f76 <allocate_xenbus_id+0x62>\n   10f76:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   10f7a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   10f7e:\t0f b6 40 01          \tmovzbl 0x1(%rax),%eax\n   10f82:\t0f b6 c0             \tmovzbl %al,%eax\n   10f85:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   10f89:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   10f8d:\tc6 40 01 01          \tmovb   $0x1,0x1(%rax)\n   10f91:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n   10f95:\t48 89 c6             \tmov    %rax,%rsi\n   10f98:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   10f9d:\te8 b5 f3 ff ff       \tcallq  10357 <add_wait_queue>\n   10fa2:\te8 6e f3 ff ff       \tcallq  10315 <get_current>\n   10fa7:\t48 c7 40 38 00 00 00 \tmovq   $0x0,0x38(%rax)\n   10fae:\t00 \n   10faf:\te8 61 f3 ff ff       \tcallq  10315 <get_current>\n   10fb4:\t8b 50 30             \tmov    0x30(%rax),%edx\n   10fb7:\t83 e2 fe             \tand    $0xfffffffe,%edx\n   10fba:\t89 50 30             \tmov    %edx,0x30(%rax)\n   10fbd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10fc4 <allocate_xenbus_id+0xb0>\n   10fc4:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   10fc8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   10fcc:\t89 c2                \tmov    %eax,%edx\n   10fce:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   10fd2:\t88 50 01             \tmov    %dl,0x1(%rax)\n   10fd5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   10fd9:\t0f b6 40 01          \tmovzbl 0x1(%rax),%eax\n   10fdd:\t84 c0                \ttest   %al,%al\n   10fdf:\t75 19                \tjne    10ffa <allocate_xenbus_id+0xe6>\n   10fe1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   10fe5:\t0f b6 00             \tmovzbl (%rax),%eax\n   10fe8:\t84 c0                \ttest   %al,%al\n   10fea:\t0f 95 c0             \tsetne  %al\n   10fed:\t0f b6 c0             \tmovzbl %al,%eax\n   10ff0:\t48 85 c0             \ttest   %rax,%rax\n   10ff3:\t74 05                \tje     10ffa <allocate_xenbus_id+0xe6>\n   10ff5:\te8 00 00 00 00       \tcallq  10ffa <allocate_xenbus_id+0xe6>\n   10ffa:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 11000 <allocate_xenbus_id+0xec>\n   11000:\t83 f8 1f             \tcmp    $0x1f,%eax\n   11003:\t7e 0a                \tjle    1100f <allocate_xenbus_id+0xfb>\n   11005:\te8 00 00 00 00       \tcallq  1100a <allocate_xenbus_id+0xf6>\n   1100a:\te9 60 ff ff ff       \tjmpq   10f6f <allocate_xenbus_id+0x5b>\n   1100f:\t90                   \tnop\n   11010:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11017 <allocate_xenbus_id+0x103>\n   11017:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   1101b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1101f:\t0f b6 40 01          \tmovzbl 0x1(%rax),%eax\n   11023:\t0f b6 c0             \tmovzbl %al,%eax\n   11026:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   1102a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1102e:\tc6 40 01 01          \tmovb   $0x1,0x1(%rax)\n   11032:\te8 de f2 ff ff       \tcallq  10315 <get_current>\n   11037:\t48 89 c7             \tmov    %rax,%rdi\n   1103a:\te8 00 00 00 00       \tcallq  1103f <allocate_xenbus_id+0x12b>\n   1103f:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n   11043:\t48 89 c6             \tmov    %rax,%rsi\n   11046:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   1104b:\te8 65 f3 ff ff       \tcallq  103b5 <remove_wait_queue>\n   11050:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11057 <allocate_xenbus_id+0x143>\n   11057:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n   1105b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1105f:\t89 c2                \tmov    %eax,%edx\n   11061:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   11065:\t88 50 01             \tmov    %dl,0x1(%rax)\n   11068:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   1106c:\t0f b6 40 01          \tmovzbl 0x1(%rax),%eax\n   11070:\t84 c0                \ttest   %al,%al\n   11072:\t0f 85 a4 fe ff ff    \tjne    10f1c <allocate_xenbus_id+0x8>\n   11078:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   1107c:\t0f b6 00             \tmovzbl (%rax),%eax\n   1107f:\t84 c0                \ttest   %al,%al\n   11081:\t0f 95 c0             \tsetne  %al\n   11084:\t0f b6 c0             \tmovzbl %al,%eax\n   11087:\t48 85 c0             \ttest   %rax,%rax\n   1108a:\t0f 84 8c fe ff ff    \tje     10f1c <allocate_xenbus_id+0x8>\n   11090:\te8 00 00 00 00       \tcallq  11095 <allocate_xenbus_id+0x181>\n   11095:\te9 82 fe ff ff       \tjmpq   10f1c <allocate_xenbus_id+0x8>\n   1109a:\t90                   \tnop\n   1109b:\te9 7c fe ff ff       \tjmpq   10f1c <allocate_xenbus_id+0x8>\n   110a0:\t90                   \tnop\n   110a1:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 110a7 <allocate_xenbus_id+0x193>\n   110a7:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n   110aa:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   110ad:\t48 98                \tcltq   \n   110af:\t48 c1 e0 05          \tshl    $0x5,%rax\n   110b3:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n   110b9:\t0f b6 00             \tmovzbl (%rax),%eax\n   110bc:\tc1 e0 07             \tshl    $0x7,%eax\n   110bf:\tc0 f8 07             \tsar    $0x7,%al\n   110c2:\t84 c0                \ttest   %al,%al\n   110c4:\t74 48                \tje     1110e <allocate_xenbus_id+0x1fa>\n   110c6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   110c9:\t8d 50 01             \tlea    0x1(%rax),%edx\n   110cc:\t89 d0                \tmov    %edx,%eax\n   110ce:\tc1 f8 1f             \tsar    $0x1f,%eax\n   110d1:\tc1 e8 1b             \tshr    $0x1b,%eax\n   110d4:\t01 c2                \tadd    %eax,%edx\n   110d6:\t83 e2 1f             \tand    $0x1f,%edx\n   110d9:\t29 c2                \tsub    %eax,%edx\n   110db:\t89 d0                \tmov    %edx,%eax\n   110dd:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n   110e0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 110e6 <allocate_xenbus_id+0x1d2>\n   110e6:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n   110e9:\t75 bf                \tjne    110aa <allocate_xenbus_id+0x196>\n   110eb:\tb9 3d 01 00 00       \tmov    $0x13d,%ecx\n   110f0:\tba 00 00 00 00       \tmov    $0x0,%edx\n   110f5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   110fa:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   110ff:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   11104:\te8 00 00 00 00       \tcallq  11109 <allocate_xenbus_id+0x1f5>\n   11109:\te8 00 00 00 00       \tcallq  1110e <allocate_xenbus_id+0x1fa>\n   1110e:\t90                   \tnop\n   1110f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 11115 <allocate_xenbus_id+0x201>\n   11115:\t83 c0 01             \tadd    $0x1,%eax\n   11118:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1111e <allocate_xenbus_id+0x20a>\n   1111e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   11121:\t48 98                \tcltq   \n   11123:\t48 c1 e0 05          \tshl    $0x5,%rax\n   11127:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n   1112d:\t0f b6 10             \tmovzbl (%rax),%edx\n   11130:\t83 ca 01             \tor     $0x1,%edx\n   11133:\t88 10                \tmov    %dl,(%rax)\n   11135:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   11138:\t8d 50 01             \tlea    0x1(%rax),%edx\n   1113b:\t89 d0                \tmov    %edx,%eax\n   1113d:\tc1 f8 1f             \tsar    $0x1f,%eax\n   11140:\tc1 e8 1b             \tshr    $0x1b,%eax\n   11143:\t01 c2                \tadd    %eax,%edx\n   11145:\t83 e2 1f             \tand    $0x1f,%edx\n   11148:\t29 c2                \tsub    %eax,%edx\n   1114a:\t89 d0                \tmov    %edx,%eax\n   1114c:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 11152 <allocate_xenbus_id+0x23e>\n   11152:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   11157:\te8 bd f3 ff ff       \tcallq  10519 <_raw_spin_unlock>\n   1115c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   1115f:\t48 98                \tcltq   \n   11161:\t48 c1 e0 05          \tshl    $0x5,%rax\n   11165:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n   1116b:\t48 83 c0 08          \tadd    $0x8,%rax\n   1116f:\t48 89 c7             \tmov    %rax,%rdi\n   11172:\te8 ba f1 ff ff       \tcallq  10331 <init_waitqueue_head>\n   11177:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   1117a:\tc9                   \tleaveq \n   1117b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall allocate_xenbus_id(__int64 a1, __int64 *a2) {\n  int v2;\n  int v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  int v8;\n  int v9;\n  int v10;\n  __int64 v11;\n  __int64 v12;\n  int v13;\n  int v14;\n  int v15;\n  int v16;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  _BYTE *v21;\n  __int64 v22;\n  _BYTE *v23;\n  __int64 v24;\n  __int64 v25;\n  unsigned int v26;\n  while (Number) {\n    raw_spin_lock(req_lock);\n    if (nr_live_reqs <= Number)\n      break;\n    raw_spin_unlock(req_lock);\n    v18 = Number L;\n    v19 = Number L;\n    v20 = Number L;\n    v19 = get_current_4(req_lock, a2, v4);\n    if (nr_live_reqs > Number) {\n      while (Number) {\n        v25 = HYPERVISOR_shared_info;\n        v24 = *(unsigned __int8 *)(HYPERVISOR_shared_info + Number);\n        *(_BYTE *)(HYPERVISOR_shared_info + Number) = Number;\n        add_wait_queue_4(&req_wq, (unsigned int *)&v18);\n        *(_QWORD *)(get_current_4(&req_wq, &v18, v5) + Number) = Number L;\n        v7 = get_current_4(&req_wq, &v18, v6);\n        *(_DWORD *)(v7 + Number) &= Number;\n        v23 = (_BYTE *)HYPERVISOR_shared_info;\n        v11 = (unsigned int)v24;\n        *(_BYTE *)(HYPERVISOR_shared_info + Number) = v24;\n        if (!v23[Number] && *v23)\n          force_evtchn_callback();\n        if (nr_live_reqs <= Number)\n          break;\n        schedule((__int64)&req_wq, (int)&v18, v11, v8, v9, v10);\n      }\n      v22 = HYPERVISOR_shared_info;\n      v24 = *(unsigned __int8 *)(HYPERVISOR_shared_info + Number);\n      *(_BYTE *)(HYPERVISOR_shared_info + Number) = Number;\n      v12 = get_current_4(&req_wq, &v18, v11);\n      wake(v12);\n      a2 = &v18;\n      remove_wait_queue_4(&req_wq, &v18);\n      v21 = (_BYTE *)HYPERVISOR_shared_info;\n      *(_BYTE *)(HYPERVISOR_shared_info + Number) = v24;\n      if (!v21[Number]) {\n        if (*v21)\n          force_evtchn_callback();\n      }\n    }\n  }\n  v26 = probe_3861;\n  while ((*((_BYTE *)&req_info + Number * (int)v26) & Number) != Number) {\n    v26 = (int)(v26 + Number) % Number;\n    if (v26 == probe_3861) {\n      printk((unsigned int)String, (unsigned int)String, (unsigned int)String,\n             Number, v2, v3);\n      do_exit((__int64)String, (int)String, v13, v14, v15, v16);\n    }\n  }\n  ++nr_live_reqs;\n  *((_BYTE *)&req_info + Number * (int)v26) |= Number;\n  probe_3861 = (int)(v26 + Number) % Number;\n  raw_spin_unlock(req_lock);\n  init_waitqueue_head_0((_QWORD *)&req_info + Number * (int)v26 + Number);\n  return v26;\n}", "code_t": "int __cdecl allocate_xenbus_id() {\n  thread *v0;\n  thread *v1;\n  wait_queue <span class=\"supfact\">__wait</span>;\n  vcpu_info_t *_vcpu_2;\n  vcpu_info_t *_vcpu_1;\n  vcpu_info_t *_vcpu_0;\n  unsigned __int64 flags;\n  vcpu_info_t *_vcpu;\n  int o_probe;\n  while (Number) {\n    raw_spin_lock(&req_lock);\n    if (nr_live_reqs <= Number)\n      break;\n    raw_spin_unlock(&req_lock);\n    *(_QWORD *)&<span class=\"supfact\">__wait</span>.waiting = Number L;\n    <span class=\"supfact\">__wait</span>.thread = Number L;\n    <span class=\"supfact\">__wait</span>.thread_list.stqe_next = Number L;\n    <span class=\"supfact\">__wait</span>.thread = get_current_4();\n    if (nr_live_reqs > Number) {\n      while (Number) {\n        _vcpu = (vcpu_info_t *)HYPERVISOR_shared_info;\n        flags = *(unsigned __int8 *)(HYPERVISOR_shared_info + Number);\n        *(_BYTE *)(HYPERVISOR_shared_info + Number) = Number;\n        add_wait_queue_4(&req_wq, &<span class=\"supfact\">__wait</span>);\n        get_current_4()->wakeup_time = Number L;\n        v0 = get_current_4();\n        v0->flags &= Number;\n        _vcpu_0 = (vcpu_info_t *)HYPERVISOR_shared_info;\n        *(_BYTE *)(HYPERVISOR_shared_info + Number) = flags;\n        if (!_vcpu_0->evtchn_upcall_mask && _vcpu_0->evtchn_upcall_pending)\n          force_evtchn_callback();\n        if (nr_live_reqs <= Number)\n          break;\n        schedule();\n      }\n      _vcpu_1 = (vcpu_info_t *)HYPERVISOR_shared_info;\n      flags = *(unsigned __int8 *)(HYPERVISOR_shared_info + Number);\n      *(_BYTE *)(HYPERVISOR_shared_info + Number) = Number;\n      v1 = get_current_4();\n      wake((thread_0 *)v1);\n      remove_wait_queue_4(&req_wq, &<span class=\"supfact\">__wait</span>);\n      _vcpu_2 = (vcpu_info_t *)HYPERVISOR_shared_info;\n      *(_BYTE *)(HYPERVISOR_shared_info + Number) = flags;\n      if (!_vcpu_2->evtchn_upcall_mask) {\n        if (_vcpu_2->evtchn_upcall_pending)\n          force_evtchn_callback();\n      }\n    }\n  }\n  o_probe = probe_3861;\n  while ((*(_BYTE *)&req_info[o_probe] & Number) != Number) {\n    o_probe = (o_probe + Number) % Number;\n    if (o_probe == probe_3861) {\n      printk(String, String, String, Number L);\n      do_exit();\n    }\n  }\n  ++nr_live_reqs;\n  *(_BYTE *)&req_info[o_probe] |= Number;\n  probe_3861 = (o_probe + Number) % Number;\n  raw_spin_unlock(&req_lock);\n  init_waitqueue_head_0(&req_info[o_probe].waitq);\n  return o_probe;\n}", "var": [{"name": "v18", "type": "struct wait_queue { int waiting; PADDING (4); thread * thread; $D01FF465DD489B221C5D633625861AD2 thread_list; }", "pred_name": "__wait", "ref_name": "__wait", "ref_type": "struct wait_queue { int waiting; PADDING (4); thread * thread; $D01FF465DD489B221C5D633625861AD2 thread_list; }"}], "body_in_train": false}, {"repo_owner": "erofs", "repo_name": "atc19-erofs", "path": "erofs/atc19-erofs/98c7ff8033d1b24f40fa81acb833318870593c5653f14753bec1252e28c3f994", "path_in_repo": "erofs/atc19-erofs/tools/gpio/lsgpio.o", "objdump": "00000000000003d2 <main>:\n 3d2:\t55                   \tpush   %rbp\n 3d3:\t48 89 e5             \tmov    %rsp,%rbp\n 3d6:\t48 83 ec 30          \tsub    $0x30,%rsp\n 3da:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n 3dd:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n 3e1:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 3e8:\t00 \n 3e9:\teb 28                \tjmp    413 <main+0x41>\n 3eb:\t83 7d f0 3f          \tcmpl   $0x3f,-0x10(%rbp)\n 3ef:\t74 13                \tje     404 <main+0x32>\n 3f1:\t83 7d f0 6e          \tcmpl   $0x6e,-0x10(%rbp)\n 3f5:\t75 1c                \tjne    413 <main+0x41>\n 3f7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3fe <main+0x2c>\n 3fe:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 402:\teb 0f                \tjmp    413 <main+0x41>\n 404:\te8 00 00 00 00       \tcallq  409 <main+0x37>\n 409:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 40e:\te9 e9 00 00 00       \tjmpq   4fc <main+0x12a>\n 413:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n 417:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 41a:\tba 00 00 00 00       \tmov    $0x0,%edx\n 41f:\t48 89 ce             \tmov    %rcx,%rsi\n 422:\t89 c7                \tmov    %eax,%edi\n 424:\te8 00 00 00 00       \tcallq  429 <main+0x57>\n 429:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 42c:\t83 7d f0 ff          \tcmpl   $0xffffffff,-0x10(%rbp)\n 430:\t75 b9                \tjne    3eb <main+0x19>\n 432:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 437:\t74 14                \tje     44d <main+0x7b>\n 439:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 43d:\t48 89 c7             \tmov    %rax,%rdi\n 440:\te8 00 00 00 00       \tcallq  445 <main+0x73>\n 445:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 448:\te9 ac 00 00 00       \tjmpq   4f9 <main+0x127>\n 44d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 452:\te8 00 00 00 00       \tcallq  457 <main+0x85>\n 457:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 45b:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 460:\t75 11                \tjne    473 <main+0xa1>\n 462:\te8 00 00 00 00       \tcallq  467 <main+0x95>\n 467:\t8b 00                \tmov    (%rax),%eax\n 469:\tf7 d8                \tneg    %eax\n 46b:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 46e:\te9 86 00 00 00       \tjmpq   4f9 <main+0x127>\n 473:\tc7 45 f4 fe ff ff ff \tmovl   $0xfffffffe,-0xc(%rbp)\n 47a:\teb 32                \tjmp    4ae <main+0xdc>\n 47c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 480:\t48 83 c0 13          \tadd    $0x13,%rax\n 484:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 489:\t48 89 c7             \tmov    %rax,%rdi\n 48c:\te8 6f fb ff ff       \tcallq  0 <check_prefix>\n 491:\t85 c0                \ttest   %eax,%eax\n 493:\t74 19                \tje     4ae <main+0xdc>\n 495:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 499:\t48 83 c0 13          \tadd    $0x13,%rax\n 49d:\t48 89 c7             \tmov    %rax,%rdi\n 4a0:\te8 00 00 00 00       \tcallq  4a5 <main+0xd3>\n 4a5:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 4a8:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 4ac:\t75 19                \tjne    4c7 <main+0xf5>\n 4ae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4b2:\t48 89 c7             \tmov    %rax,%rdi\n 4b5:\te8 00 00 00 00       \tcallq  4ba <main+0xe8>\n 4ba:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 4be:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n 4c3:\t75 b7                \tjne    47c <main+0xaa>\n 4c5:\teb 01                \tjmp    4c8 <main+0xf6>\n 4c7:\t90                   \tnop\n 4c8:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n 4cf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4d3:\t48 89 c7             \tmov    %rax,%rdi\n 4d6:\te8 00 00 00 00       \tcallq  4db <main+0x109>\n 4db:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 4de:\t75 18                \tjne    4f8 <main+0x126>\n 4e0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 4e5:\te8 00 00 00 00       \tcallq  4ea <main+0x118>\n 4ea:\te8 00 00 00 00       \tcallq  4ef <main+0x11d>\n 4ef:\t8b 00                \tmov    (%rax),%eax\n 4f1:\tf7 d8                \tneg    %eax\n 4f3:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 4f6:\teb 01                \tjmp    4f9 <main+0x127>\n 4f8:\t90                   \tnop\n 4f9:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 4fc:\tc9                   \tleaveq \n 4fd:\tc3                   \tretq   \n", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  struct dirent *v4;\n  DIR *dirp;\n  int v6;\n  int v7;\n  char *v8;\n  v8 = Number L;\n  while (Number) {\n    v6 = getopt(argc, (char *const *)argv, String);\n    if (v6 == Number)\n      break;\n    if (v6 == Number) {\n      print_usage();\n      return Number;\n    }\n    if (v6 == Number)\n      v8 = optarg;\n  }\n  if (v8)\n    return list_device(v8);\n  dirp = opendir(String);\n  if (!dirp)\n    return -*_errno_location();\n  do\n    v4 = readdir(dirp);\n  while (v4 && (!check_prefix(v4->d_name, String) ||\n                !(unsigned int)list_device(v4->d_name)));\n  v7 = Number;\n  if (closedir(dirp) == Number) {\n    perror(String);\n    v7 = -*_errno_location();\n  }\n  return v7;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  struct dirent *<span class=\"supfact\">ent</span>;\n  DIR *dp;\n  int c;\n  int ret;\n  char *device_name;\n  device_name = Number L;\n  while (Number) {\n    c = getopt(argc, (char *const *)argv, String);\n    if (c == Number)\n      break;\n    if (c == Number) {\n      print_usage();\n      return Number;\n    }\n    if (c == Number)\n      device_name = optarg;\n  }\n  if (device_name)\n    return list_device(device_name);\n  dp = opendir(String);\n  if (!dp)\n    return -*_errno_location();\n  do\n    <span class=\"supfact\">ent</span> = readdir(dp);\n  while (<span class=\"supfact\">ent</span> &&\n         (!check_prefix(<span class=\"supfact\">ent</span>->d_name, String) ||\n          !list_device(<span class=\"supfact\">ent</span>->d_name)));\n  ret = Number;\n  if (closedir(dp) == Number) {\n    perror(String);\n    ret = -*_errno_location();\n  }\n  return ret;\n}", "var": [{"name": "v4", "type": "struct dirent *", "pred_name": "ent", "ref_name": "ent", "ref_type": "struct dirent *"}], "body_in_train": true}, {"repo_owner": "sdinesh-94", "repo_name": "ORB-SLAM-Android-app", "path": "sdinesh-94/ORB-SLAM-Android-app/e7d6ff574fcd21bdec69ea3d4853acb33d7df8fd0bff82bcc20eacd2a232467d", "path_in_repo": "sdinesh-94/ORB-SLAM-Android-app/slam_ext/build.android/clapack/INSTALL/testslamch", "objdump": "0000000000406d19 <f_open>:\n  406d19:\t55                   \tpush   %rbp\n  406d1a:\t48 89 e5             \tmov    %rsp,%rbp\n  406d1d:\t53                   \tpush   %rbx\n  406d1e:\t48 81 ec 78 01 00 00 \tsub    $0x178,%rsp\n  406d25:\t48 89 bd 88 fe ff ff \tmov    %rdi,-0x178(%rbp)\n  406d2c:\t48 c7 05 99 d6 00 00 \tmovq   $0x1,0xd699(%rip)        # 4143d0 <f__external>\n  406d33:\t01 00 00 00 \n  406d37:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406d3e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  406d42:\t48 83 f8 63          \tcmp    $0x63,%rax\n  406d46:\t7f 10                \tjg     406d58 <f_open+0x3f>\n  406d48:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406d4f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  406d53:\t48 85 c0             \ttest   %rax,%rax\n  406d56:\t79 35                \tjns    406d8d <f_open+0x74>\n  406d58:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406d5f:\t48 8b 00             \tmov    (%rax),%rax\n  406d62:\t48 85 c0             \ttest   %rax,%rax\n  406d65:\t74 0d                \tje     406d74 <f_open+0x5b>\n  406d67:\te8 e4 a2 ff ff       \tcallq  401050 <__errno_location@plt>\n  406d6c:\tc7 00 65 00 00 00    \tmovl   $0x65,(%rax)\n  406d72:\teb 0f                \tjmp    406d83 <f_open+0x6a>\n  406d74:\tbe 38 d2 40 00       \tmov    $0x40d238,%esi\n  406d79:\tbf 65 00 00 00       \tmov    $0x65,%edi\n  406d7e:\te8 c6 c8 ff ff       \tcallq  403649 <f__fatal>\n  406d83:\tb8 65 00 00 00       \tmov    $0x65,%eax\n  406d88:\te9 04 08 00 00       \tjmpq   407591 <f_open+0x878>\n  406d8d:\t48 8b 05 34 d6 00 00 \tmov    0xd634(%rip),%rax        # 4143c8 <f__init>\n  406d94:\t48 85 c0             \ttest   %rax,%rax\n  406d97:\t75 05                \tjne    406d9e <f_open+0x85>\n  406d99:\te8 be ca ff ff       \tcallq  40385c <f_init>\n  406d9e:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406da5:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  406da9:\t48 89 d0             \tmov    %rdx,%rax\n  406dac:\t48 c1 e0 02          \tshl    $0x2,%rax\n  406db0:\t48 01 d0             \tadd    %rdx,%rax\n  406db3:\t48 01 c0             \tadd    %rax,%rax\n  406db6:\t48 01 d0             \tadd    %rdx,%rax\n  406db9:\t48 c1 e0 03          \tshl    $0x3,%rax\n  406dbd:\t48 05 40 21 41 00    \tadd    $0x412140,%rax\n  406dc3:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  406dc7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406dcb:\t48 89 05 f6 b2 00 00 \tmov    %rax,0xb2f6(%rip)        # 4120c8 <f__curunit>\n  406dd2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406dd6:\t48 8b 00             \tmov    (%rax),%rax\n  406dd9:\t48 85 c0             \ttest   %rax,%rax\n  406ddc:\t0f 84 1d 01 00 00    \tje     406eff <f_open+0x1e6>\n  406de2:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406de9:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  406ded:\t48 85 c0             \ttest   %rax,%rax\n  406df0:\t75 59                \tjne    406e4b <f_open+0x132>\n  406df2:\t90                   \tnop\n  406df3:\teb 01                \tjmp    406df6 <f_open+0xdd>\n  406df5:\t90                   \tnop\n  406df6:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406dfd:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  406e01:\t48 85 c0             \ttest   %rax,%rax\n  406e04:\t74 3b                \tje     406e41 <f_open+0x128>\n  406e06:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406e0d:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  406e11:\t0f b6 00             \tmovzbl (%rax),%eax\n  406e14:\t3c 7a                \tcmp    $0x7a,%al\n  406e16:\t74 12                \tje     406e2a <f_open+0x111>\n  406e18:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406e1f:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  406e23:\t0f b6 00             \tmovzbl (%rax),%eax\n  406e26:\t3c 5a                \tcmp    $0x5a,%al\n  406e28:\t75 07                \tjne    406e31 <f_open+0x118>\n  406e2a:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  406e2f:\teb 05                \tjmp    406e36 <f_open+0x11d>\n  406e31:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406e36:\t48 63 d0             \tmovslq %eax,%rdx\n  406e39:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406e3d:\t48 89 50 38          \tmov    %rdx,0x38(%rax)\n  406e41:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406e46:\te9 46 07 00 00       \tjmpq   407591 <f_open+0x878>\n  406e4b:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406e52:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n  406e56:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406e5d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  406e61:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n  406e68:\t48 89 ce             \tmov    %rcx,%rsi\n  406e6b:\t48 89 c7             \tmov    %rax,%rdi\n  406e6e:\te8 a6 0c 00 00       \tcallq  407b19 <g_char>\n  406e73:\t48 8d 95 9c fe ff ff \tlea    -0x164(%rbp),%rdx\n  406e7a:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  406e81:\t48 89 d6             \tmov    %rdx,%rsi\n  406e84:\t48 89 c7             \tmov    %rax,%rdi\n  406e87:\te8 92 0d 00 00       \tcallq  407c1e <f__inode>\n  406e8c:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  406e90:\t48 8b 52 10          \tmov    0x10(%rdx),%rdx\n  406e94:\t48 39 d0             \tcmp    %rdx,%rax\n  406e97:\t75 15                \tjne    406eae <f_open+0x195>\n  406e99:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406e9d:\t8b 50 18             \tmov    0x18(%rax),%edx\n  406ea0:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n  406ea6:\t39 c2                \tcmp    %eax,%edx\n  406ea8:\t0f 84 47 ff ff ff    \tje     406df5 <f_open+0xdc>\n  406eae:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406eb5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  406eb9:\t48 89 85 a8 fe ff ff \tmov    %rax,-0x158(%rbp)\n  406ec0:\t48 c7 85 b0 fe ff ff \tmovq   $0x0,-0x150(%rbp)\n  406ec7:\t00 00 00 00 \n  406ecb:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406ed2:\t48 8b 00             \tmov    (%rax),%rax\n  406ed5:\t48 89 85 a0 fe ff ff \tmov    %rax,-0x160(%rbp)\n  406edc:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  406ee3:\t48 89 c7             \tmov    %rax,%rdi\n  406ee6:\te8 dc c1 ff ff       \tcallq  4030c7 <f_clos>\n  406eeb:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  406eef:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  406ef4:\t74 09                \tje     406eff <f_open+0x1e6>\n  406ef6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  406efa:\te9 92 06 00 00       \tjmpq   407591 <f_open+0x878>\n  406eff:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406f06:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  406f0a:\t89 c2                \tmov    %eax,%edx\n  406f0c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406f10:\t89 50 1c             \tmov    %edx,0x1c(%rax)\n  406f13:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406f1a:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  406f1e:\t48 85 c0             \ttest   %rax,%rax\n  406f21:\t74 2b                \tje     406f4e <f_open+0x235>\n  406f23:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406f2a:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  406f2e:\t0f b6 00             \tmovzbl (%rax),%eax\n  406f31:\t3c 7a                \tcmp    $0x7a,%al\n  406f33:\t74 12                \tje     406f47 <f_open+0x22e>\n  406f35:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406f3c:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  406f40:\t0f b6 00             \tmovzbl (%rax),%eax\n  406f43:\t3c 5a                \tcmp    $0x5a,%al\n  406f45:\t75 07                \tjne    406f4e <f_open+0x235>\n  406f47:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  406f4c:\teb 05                \tjmp    406f53 <f_open+0x23a>\n  406f4e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406f53:\t48 63 d0             \tmovslq %eax,%rdx\n  406f56:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406f5a:\t48 89 50 38          \tmov    %rdx,0x38(%rax)\n  406f5e:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406f65:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  406f69:\t48 85 c0             \ttest   %rax,%rax\n  406f6c:\t75 27                \tjne    406f95 <f_open+0x27c>\n  406f6e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406f72:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n  406f75:\t85 c0                \ttest   %eax,%eax\n  406f77:\t7e 0e                \tjle    406f87 <f_open+0x26e>\n  406f79:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406f7d:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n  406f84:\t00 \n  406f85:\teb 4c                \tjmp    406fd3 <f_open+0x2ba>\n  406f87:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406f8b:\t48 c7 40 28 01 00 00 \tmovq   $0x1,0x28(%rax)\n  406f92:\t00 \n  406f93:\teb 3e                \tjmp    406fd3 <f_open+0x2ba>\n  406f95:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406f9c:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  406fa0:\t0f b6 00             \tmovzbl (%rax),%eax\n  406fa3:\t3c 66                \tcmp    $0x66,%al\n  406fa5:\t74 12                \tje     406fb9 <f_open+0x2a0>\n  406fa7:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406fae:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  406fb2:\t0f b6 00             \tmovzbl (%rax),%eax\n  406fb5:\t3c 46                \tcmp    $0x46,%al\n  406fb7:\t75 0e                \tjne    406fc7 <f_open+0x2ae>\n  406fb9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406fbd:\t48 c7 40 28 01 00 00 \tmovq   $0x1,0x28(%rax)\n  406fc4:\t00 \n  406fc5:\teb 0c                \tjmp    406fd3 <f_open+0x2ba>\n  406fc7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406fcb:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n  406fd2:\t00 \n  406fd3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406fd7:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  406fdb:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  406fde:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406fe5:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  406fe9:\t48 85 c0             \ttest   %rax,%rax\n  406fec:\t74 72                \tje     407060 <f_open+0x347>\n  406fee:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  406ff5:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n  406ff9:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  407000:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  407004:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n  40700b:\t48 89 ce             \tmov    %rcx,%rsi\n  40700e:\t48 89 c7             \tmov    %rax,%rdi\n  407011:\te8 03 0b 00 00       \tcallq  407b19 <g_char>\n  407016:\t0f b6 85 c0 fe ff ff \tmovzbl -0x140(%rbp),%eax\n  40701d:\t84 c0                \ttest   %al,%al\n  40701f:\t75 63                \tjne    407084 <f_open+0x36b>\n  407021:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  407028:\t48 8b 00             \tmov    (%rax),%rax\n  40702b:\t48 85 c0             \ttest   %rax,%rax\n  40702e:\t74 0d                \tje     40703d <f_open+0x324>\n  407030:\te8 1b a0 ff ff       \tcallq  401050 <__errno_location@plt>\n  407035:\tc7 00 6b 00 00 00    \tmovl   $0x6b,(%rax)\n  40703b:\teb 19                \tjmp    407056 <f_open+0x33d>\n  40703d:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  407044:\t48 89 c2             \tmov    %rax,%rdx\n  407047:\tbe 38 d2 40 00       \tmov    $0x40d238,%esi\n  40704c:\tbf 6b 00 00 00       \tmov    $0x6b,%edi\n  407051:\te8 35 fc ff ff       \tcallq  406c8b <x_putc+0x53>\n  407056:\tb8 6b 00 00 00       \tmov    $0x6b,%eax\n  40705b:\te9 31 05 00 00       \tjmpq   407591 <f_open+0x878>\n  407060:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  407067:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  40706b:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  407072:\tbe 3d d2 40 00       \tmov    $0x40d23d,%esi\n  407077:\t48 89 c7             \tmov    %rax,%rdi\n  40707a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40707f:\te8 cc a1 ff ff       \tcallq  401250 <sprintf@plt>\n  407084:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  407088:\t48 c7 40 50 00 00 00 \tmovq   $0x0,0x50(%rax)\n  40708f:\t00 \n  407090:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  407094:\t48 c7 40 40 00 00 00 \tmovq   $0x0,0x40(%rax)\n  40709b:\t00 \n  40709c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4070a0:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n  4070a7:\t00 \n  4070a8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4070ac:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  4070b3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4070b7:\t48 c7 40 30 03 00 00 \tmovq   $0x3,0x30(%rax)\n  4070be:\t00 \n  4070bf:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  4070c6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4070ca:\t48 85 c0             \ttest   %rax,%rax\n  4070cd:\t74 13                \tje     4070e2 <f_open+0x3c9>\n  4070cf:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  4070d6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4070da:\t0f b6 00             \tmovzbl (%rax),%eax\n  4070dd:\t0f be c0             \tmovsbl %al,%eax\n  4070e0:\teb 05                \tjmp    4070e7 <f_open+0x3ce>\n  4070e2:\tb8 75 00 00 00       \tmov    $0x75,%eax\n  4070e7:\t83 e8 4e             \tsub    $0x4e,%eax\n  4070ea:\t83 f8 25             \tcmp    $0x25,%eax\n  4070ed:\t0f 87 a3 01 00 00    \tja     407296 <f_open+0x57d>\n  4070f3:\t89 c0                \tmov    %eax,%eax\n  4070f5:\t48 8b 04 c5 50 d2 40 \tmov    0x40d250(,%rax,8),%rax\n  4070fc:\t00 \n  4070fd:\tff e0                \tjmpq   *%rax\n  4070ff:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  407106:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40710b:\t48 89 c7             \tmov    %rax,%rdi\n  40710e:\te8 ed a0 ff ff       \tcallq  401200 <access@plt>\n  407113:\t85 c0                \ttest   %eax,%eax\n  407115:\t0f 84 7a 01 00 00    \tje     407295 <f_open+0x57c>\n  40711b:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  407122:\t48 8b 00             \tmov    (%rax),%rax\n  407125:\t48 85 c0             \ttest   %rax,%rax\n  407128:\t74 13                \tje     40713d <f_open+0x424>\n  40712a:\te8 21 9f ff ff       \tcallq  401050 <__errno_location@plt>\n  40712f:\t48 89 c3             \tmov    %rax,%rbx\n  407132:\te8 19 9f ff ff       \tcallq  401050 <__errno_location@plt>\n  407137:\t8b 13                \tmov    (%rbx),%edx\n  407139:\t89 10                \tmov    %edx,(%rax)\n  40713b:\teb 1a                \tjmp    407157 <f_open+0x43e>\n  40713d:\te8 0e 9f ff ff       \tcallq  401050 <__errno_location@plt>\n  407142:\t8b 00                \tmov    (%rax),%eax\n  407144:\t48 8b 95 88 fe ff ff \tmov    -0x178(%rbp),%rdx\n  40714b:\tbe 38 d2 40 00       \tmov    $0x40d238,%esi\n  407150:\t89 c7                \tmov    %eax,%edi\n  407152:\te8 34 fb ff ff       \tcallq  406c8b <x_putc+0x53>\n  407157:\te8 f4 9e ff ff       \tcallq  401050 <__errno_location@plt>\n  40715c:\t8b 00                \tmov    (%rax),%eax\n  40715e:\t48 98                \tcltq   \n  407160:\te9 2c 04 00 00       \tjmpq   407591 <f_open+0x878>\n  407165:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  407169:\t48 c7 40 50 01 00 00 \tmovq   $0x1,0x50(%rax)\n  407170:\t00 \n  407171:\te8 9a 9f ff ff       \tcallq  401110 <tmpfile@plt>\n  407176:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  40717a:\t48 89 02             \tmov    %rax,(%rdx)\n  40717d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  407181:\t48 8b 00             \tmov    (%rax),%rax\n  407184:\t48 85 c0             \ttest   %rax,%rax\n  407187:\t75 4a                \tjne    4071d3 <f_open+0x4ba>\n  407189:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  407190:\t48 8b 00             \tmov    (%rax),%rax\n  407193:\t48 85 c0             \ttest   %rax,%rax\n  407196:\t74 13                \tje     4071ab <f_open+0x492>\n  407198:\te8 b3 9e ff ff       \tcallq  401050 <__errno_location@plt>\n  40719d:\t48 89 c3             \tmov    %rax,%rbx\n  4071a0:\te8 ab 9e ff ff       \tcallq  401050 <__errno_location@plt>\n  4071a5:\t8b 13                \tmov    (%rbx),%edx\n  4071a7:\t89 10                \tmov    %edx,(%rax)\n  4071a9:\teb 1a                \tjmp    4071c5 <f_open+0x4ac>\n  4071ab:\te8 a0 9e ff ff       \tcallq  401050 <__errno_location@plt>\n  4071b0:\t8b 00                \tmov    (%rax),%eax\n  4071b2:\t48 8b 95 88 fe ff ff \tmov    -0x178(%rbp),%rdx\n  4071b9:\tbe 38 d2 40 00       \tmov    $0x40d238,%esi\n  4071be:\t89 c7                \tmov    %eax,%edi\n  4071c0:\te8 c6 fa ff ff       \tcallq  406c8b <x_putc+0x53>\n  4071c5:\te8 86 9e ff ff       \tcallq  401050 <__errno_location@plt>\n  4071ca:\t8b 00                \tmov    (%rax),%eax\n  4071cc:\t48 98                \tcltq   \n  4071ce:\te9 be 03 00 00       \tjmpq   407591 <f_open+0x878>\n  4071d3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4071d7:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n  4071de:\t00 \n  4071df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4071e3:\tc7 40 18 ff ff ff ff \tmovl   $0xffffffff,0x18(%rax)\n  4071ea:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4071ee:\t48 c7 40 10 ff ff ff \tmovq   $0xffffffffffffffff,0x10(%rax)\n  4071f5:\tff \n  4071f6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4071fa:\t48 c7 40 20 01 00 00 \tmovq   $0x1,0x20(%rax)\n  407201:\t00 \n  407202:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  407207:\te9 85 03 00 00       \tjmpq   407591 <f_open+0x878>\n  40720c:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  407213:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  407218:\t48 89 c7             \tmov    %rax,%rdi\n  40721b:\te8 e0 9f ff ff       \tcallq  401200 <access@plt>\n  407220:\t85 c0                \ttest   %eax,%eax\n  407222:\t75 3f                \tjne    407263 <f_open+0x54a>\n  407224:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  40722b:\t48 8b 00             \tmov    (%rax),%rax\n  40722e:\t48 85 c0             \ttest   %rax,%rax\n  407231:\t74 0d                \tje     407240 <f_open+0x527>\n  407233:\te8 18 9e ff ff       \tcallq  401050 <__errno_location@plt>\n  407238:\tc7 00 80 00 00 00    \tmovl   $0x80,(%rax)\n  40723e:\teb 19                \tjmp    407259 <f_open+0x540>\n  407240:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  407247:\t48 89 c2             \tmov    %rax,%rdx\n  40724a:\tbe 38 d2 40 00       \tmov    $0x40d238,%esi\n  40724f:\tbf 80 00 00 00       \tmov    $0x80,%edi\n  407254:\te8 32 fa ff ff       \tcallq  406c8b <x_putc+0x53>\n  407259:\tb8 80 00 00 00       \tmov    $0x80,%eax\n  40725e:\te9 2e 03 00 00       \tjmpq   407591 <f_open+0x878>\n  407263:\t48 8b 15 36 95 00 00 \tmov    0x9536(%rip),%rdx        # 4107a0 <f__w_mode>\n  40726a:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  407271:\t48 89 d6             \tmov    %rdx,%rsi\n  407274:\t48 89 c7             \tmov    %rax,%rdi\n  407277:\te8 94 9f ff ff       \tcallq  401210 <fopen@plt>\n  40727c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  407280:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  407285:\t74 0f                \tje     407296 <f_open+0x57d>\n  407287:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40728b:\t48 89 c7             \tmov    %rax,%rdi\n  40728e:\te8 1d 9e ff ff       \tcallq  4010b0 <fclose@plt>\n  407293:\teb 01                \tjmp    407296 <f_open+0x57d>\n  407295:\t90                   \tnop\n  407296:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  40729d:\t48 89 c7             \tmov    %rax,%rdi\n  4072a0:\te8 1b 9e ff ff       \tcallq  4010c0 <strlen@plt>\n  4072a5:\t83 c0 01             \tadd    $0x1,%eax\n  4072a8:\t89 c0                \tmov    %eax,%eax\n  4072aa:\t48 89 c7             \tmov    %rax,%rdi\n  4072ad:\te8 ee 9e ff ff       \tcallq  4011a0 <malloc@plt>\n  4072b2:\t48 89 c2             \tmov    %rax,%rdx\n  4072b5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4072b9:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  4072bd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4072c1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4072c5:\t48 85 c0             \ttest   %rax,%rax\n  4072c8:\t75 3f                \tjne    407309 <f_open+0x5f0>\n  4072ca:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  4072d1:\t48 8b 00             \tmov    (%rax),%rax\n  4072d4:\t48 85 c0             \ttest   %rax,%rax\n  4072d7:\t74 0d                \tje     4072e6 <f_open+0x5cd>\n  4072d9:\te8 72 9d ff ff       \tcallq  401050 <__errno_location@plt>\n  4072de:\tc7 00 71 00 00 00    \tmovl   $0x71,(%rax)\n  4072e4:\teb 19                \tjmp    4072ff <f_open+0x5e6>\n  4072e6:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  4072ed:\t48 89 c2             \tmov    %rax,%rdx\n  4072f0:\tbe 46 d2 40 00       \tmov    $0x40d246,%esi\n  4072f5:\tbf 71 00 00 00       \tmov    $0x71,%edi\n  4072fa:\te8 8c f9 ff ff       \tcallq  406c8b <x_putc+0x53>\n  4072ff:\tb8 71 00 00 00       \tmov    $0x71,%eax\n  407304:\te9 88 02 00 00       \tjmpq   407591 <f_open+0x878>\n  407309:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40730d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  407311:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n  407318:\t48 89 d6             \tmov    %rdx,%rsi\n  40731b:\t48 89 c7             \tmov    %rax,%rdi\n  40731e:\te8 4d 9d ff ff       \tcallq  401070 <strcpy@plt>\n  407323:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  40732a:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  40732e:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  407332:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  407337:\t74 12                \tje     40734b <f_open+0x632>\n  407339:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40733d:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n  407340:\t85 c0                \ttest   %eax,%eax\n  407342:\t74 07                \tje     40734b <f_open+0x632>\n  407344:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  40734b:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40734e:\t83 c8 02             \tor     $0x2,%eax\n  407351:\t48 98                \tcltq   \n  407353:\t48 8b 14 c5 a0 07 41 \tmov    0x4107a0(,%rax,8),%rdx\n  40735a:\t00 \n  40735b:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  407362:\t48 89 d6             \tmov    %rdx,%rsi\n  407365:\t48 89 c7             \tmov    %rax,%rdi\n  407368:\te8 a3 9e ff ff       \tcallq  401210 <fopen@plt>\n  40736d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  407371:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  407376:\t0f 85 c2 00 00 00    \tjne    40743e <f_open+0x725>\n  40737c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40737f:\t48 98                \tcltq   \n  407381:\t48 8b 14 c5 80 07 41 \tmov    0x410780(,%rax,8),%rdx\n  407388:\t00 \n  407389:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  407390:\t48 89 d6             \tmov    %rdx,%rsi\n  407393:\t48 89 c7             \tmov    %rax,%rdi\n  407396:\te8 75 9e ff ff       \tcallq  401210 <fopen@plt>\n  40739b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40739f:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  4073a4:\t74 11                \tje     4073b7 <f_open+0x69e>\n  4073a6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4073aa:\t48 c7 40 30 01 00 00 \tmovq   $0x1,0x30(%rax)\n  4073b1:\t00 \n  4073b2:\te9 87 00 00 00       \tjmpq   40743e <f_open+0x725>\n  4073b7:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4073ba:\t48 98                \tcltq   \n  4073bc:\t48 8b 14 c5 a0 07 41 \tmov    0x4107a0(,%rax,8),%rdx\n  4073c3:\t00 \n  4073c4:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  4073cb:\t48 89 d6             \tmov    %rdx,%rsi\n  4073ce:\t48 89 c7             \tmov    %rax,%rdi\n  4073d1:\te8 3a 9e ff ff       \tcallq  401210 <fopen@plt>\n  4073d6:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4073da:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  4073df:\t74 1a                \tje     4073fb <f_open+0x6e2>\n  4073e1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4073e5:\t48 c7 40 48 01 00 00 \tmovq   $0x1,0x48(%rax)\n  4073ec:\t00 \n  4073ed:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4073f1:\t48 c7 40 30 02 00 00 \tmovq   $0x2,0x30(%rax)\n  4073f8:\t00 \n  4073f9:\teb 43                \tjmp    40743e <f_open+0x725>\n  4073fb:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  407402:\t48 8b 00             \tmov    (%rax),%rax\n  407405:\t48 85 c0             \ttest   %rax,%rax\n  407408:\t74 13                \tje     40741d <f_open+0x704>\n  40740a:\te8 41 9c ff ff       \tcallq  401050 <__errno_location@plt>\n  40740f:\t48 89 c3             \tmov    %rax,%rbx\n  407412:\te8 39 9c ff ff       \tcallq  401050 <__errno_location@plt>\n  407417:\t8b 13                \tmov    (%rbx),%edx\n  407419:\t89 10                \tmov    %edx,(%rax)\n  40741b:\teb 13                \tjmp    407430 <f_open+0x717>\n  40741d:\te8 2e 9c ff ff       \tcallq  401050 <__errno_location@plt>\n  407422:\t8b 00                \tmov    (%rax),%eax\n  407424:\tbe 38 d2 40 00       \tmov    $0x40d238,%esi\n  407429:\t89 c7                \tmov    %eax,%edi\n  40742b:\te8 19 c2 ff ff       \tcallq  403649 <f__fatal>\n  407430:\te8 1b 9c ff ff       \tcallq  401050 <__errno_location@plt>\n  407435:\t8b 00                \tmov    (%rax),%eax\n  407437:\t48 98                \tcltq   \n  407439:\te9 53 01 00 00       \tjmpq   407591 <f_open+0x878>\n  40743e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  407442:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  407446:\t48 89 10             \tmov    %rdx,(%rax)\n  407449:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40744d:\t48 8b 00             \tmov    (%rax),%rax\n  407450:\t48 89 c7             \tmov    %rax,%rdi\n  407453:\te8 33 c1 ff ff       \tcallq  40358b <f__canseek>\n  407458:\t48 63 d0             \tmovslq %eax,%rdx\n  40745b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40745f:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n  407463:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  407467:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n  40746b:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  407472:\t48 89 d6             \tmov    %rdx,%rsi\n  407475:\t48 89 c7             \tmov    %rax,%rdi\n  407478:\te8 a1 07 00 00       \tcallq  407c1e <f__inode>\n  40747d:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  407481:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n  407485:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  407489:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40748d:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n  407491:\t75 3f                \tjne    4074d2 <f_open+0x7b9>\n  407493:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  40749a:\t48 8b 00             \tmov    (%rax),%rax\n  40749d:\t48 85 c0             \ttest   %rax,%rax\n  4074a0:\t74 0d                \tje     4074af <f_open+0x796>\n  4074a2:\te8 a9 9b ff ff       \tcallq  401050 <__errno_location@plt>\n  4074a7:\tc7 00 6c 00 00 00    \tmovl   $0x6c,(%rax)\n  4074ad:\teb 19                \tjmp    4074c8 <f_open+0x7af>\n  4074af:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  4074b6:\t48 89 c2             \tmov    %rax,%rdx\n  4074b9:\tbe 38 d2 40 00       \tmov    $0x40d238,%esi\n  4074be:\tbf 6c 00 00 00       \tmov    $0x6c,%edi\n  4074c3:\te8 c3 f7 ff ff       \tcallq  406c8b <x_putc+0x53>\n  4074c8:\tb8 6c 00 00 00       \tmov    $0x6c,%eax\n  4074cd:\te9 bf 00 00 00       \tjmpq   407591 <f_open+0x878>\n  4074d2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4074d6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4074da:\t48 85 c0             \ttest   %rax,%rax\n  4074dd:\t0f 84 a9 00 00 00    \tje     40758c <f_open+0x873>\n  4074e3:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  4074ea:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  4074ee:\t48 85 c0             \ttest   %rax,%rax\n  4074f1:\t74 14                \tje     407507 <f_open+0x7ee>\n  4074f3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4074f7:\t48 8b 00             \tmov    (%rax),%rax\n  4074fa:\t48 89 c7             \tmov    %rax,%rdi\n  4074fd:\te8 ce 9b ff ff       \tcallq  4010d0 <rewind@plt>\n  407502:\te9 85 00 00 00       \tjmpq   40758c <f_open+0x873>\n  407507:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  40750e:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  407512:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  407516:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  40751b:\t74 6f                \tje     40758c <f_open+0x873>\n  40751d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  407521:\t0f b6 00             \tmovzbl (%rax),%eax\n  407524:\t3c 61                \tcmp    $0x61,%al\n  407526:\t74 0b                \tje     407533 <f_open+0x81a>\n  407528:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40752c:\t0f b6 00             \tmovzbl (%rax),%eax\n  40752f:\t3c 41                \tcmp    $0x41,%al\n  407531:\t75 59                \tjne    40758c <f_open+0x873>\n  407533:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  407537:\t48 8b 00             \tmov    (%rax),%rax\n  40753a:\tba 02 00 00 00       \tmov    $0x2,%edx\n  40753f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  407544:\t48 89 c7             \tmov    %rax,%rdi\n  407547:\te8 94 9c ff ff       \tcallq  4011e0 <fseek@plt>\n  40754c:\t85 c0                \ttest   %eax,%eax\n  40754e:\t74 3c                \tje     40758c <f_open+0x873>\n  407550:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  407557:\t48 8b 00             \tmov    (%rax),%rax\n  40755a:\t48 85 c0             \ttest   %rax,%rax\n  40755d:\t74 0d                \tje     40756c <f_open+0x853>\n  40755f:\te8 ec 9a ff ff       \tcallq  401050 <__errno_location@plt>\n  407564:\tc7 00 81 00 00 00    \tmovl   $0x81,(%rax)\n  40756a:\teb 19                \tjmp    407585 <f_open+0x86c>\n  40756c:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  407573:\t48 89 c2             \tmov    %rax,%rdx\n  407576:\tbe 38 d2 40 00       \tmov    $0x40d238,%esi\n  40757b:\tbf 81 00 00 00       \tmov    $0x81,%edi\n  407580:\te8 06 f7 ff ff       \tcallq  406c8b <x_putc+0x53>\n  407585:\tb8 81 00 00 00       \tmov    $0x81,%eax\n  40758a:\teb 05                \tjmp    407591 <f_open+0x878>\n  40758c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  407591:\t48 81 c4 78 01 00 00 \tadd    $0x178,%rsp\n  407598:\t5b                   \tpop    %rbx\n  407599:\t5d                   \tpop    %rbp\n  40759a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall f_open(__int64 a1) {\n  __int64 result;\n  _BOOL4 v2;\n  __int64 v3;\n  _BOOL4 v4;\n  int v5;\n  int *v6;\n  int *v7;\n  int v8;\n  int *v9;\n  int *v10;\n  int v11;\n  __int64 v12;\n  int v13;\n  __int64 v14[Number];\n  char s[Number];\n  _BYTE *v16;\n  __int64 v17;\n  __int64 v18;\n  FILE *stream;\n  int v20;\n  f__external = Number L;\n  if (*(__int64 *)(a1 + Number) > Number ||\n      *(__int64 *)(a1 + Number) < Number) {\n    if (!*(_QWORD *)a1)\n      f__fatal(Number, String);\n    *__errno_location() = Number;\n    return Number L;\n  }\n  if (!f__init)\n    f_init();\n  v18 = Number L * *(_QWORD *)(a1 + Number) + Number;\n  f__curunit = v18;\n  if (*(_QWORD *)v18) {\n    if (!*(_QWORD *)(a1 + Number) ||\n        (g_char(*(_QWORD *)(a1 + Number), *(_QWORD *)(a1 + Number), s),\n         v3 = f__inode(s, &v13), v3 == *(_QWORD *)(v18 + Number)) &&\n            *(_DWORD *)(v18 + Number) == v13) {\n      if (*(_QWORD *)(a1 + Number)) {\n        v2 = **(_BYTE **)(a1 + Number) == Number ||\n             **(_BYTE **)(a1 + Number) == Number;\n        *(_QWORD *)(v18 + Number) = v2;\n      }\n      return Number L;\n    }\n    v14[Number] = *(_QWORD *)(a1 + Number);\n    v14[Number] = Number L;\n    v14[Number] = *(_QWORD *)a1;\n    v17 = f_clos((__int64)v14);\n    if (v17)\n      return v17;\n  }\n  *(_DWORD *)(v18 + Number) = *(_QWORD *)(a1 + Number);\n  v4 = *(_QWORD *)(a1 + Number) && (**(_BYTE **)(a1 + Number) == Number ||\n                                    **(_BYTE **)(a1 + Number) == Number);\n  *(_QWORD *)(v18 + Number) = v4;\n  if (*(_QWORD *)(a1 + Number))\n    *(_QWORD *)(v18 + Number) = **(_BYTE **)(a1 + Number) == Number ||\n                                **(_BYTE **)(a1 + Number) == Number;\n  else\n    *(_QWORD *)(v18 + Number) = *(int *)(v18 + Number) <= Number;\n  v20 = *(_QWORD *)(v18 + Number);\n  if (*(_QWORD *)(a1 + Number)) {\n    g_char(*(_QWORD *)(a1 + Number), *(_QWORD *)(a1 + Number), s);\n    if (!s[Number]) {\n      if (!*(_QWORD *)a1)\n        sub_406C8B(Number, String, a1);\n      *__errno_location() = Number;\n      return Number L;\n    }\n  } else {\n    sprintf(s, String, *(_QWORD *)(a1 + Number));\n  }\n  *(_QWORD *)(v18 + Number) = Number L;\n  *(_QWORD *)(v18 + Number) = Number L;\n  *(_QWORD *)(v18 + Number) = Number L;\n  *(_QWORD *)v18 = Number L;\n  *(_QWORD *)(v18 + Number) = Number L;\n  if (*(_QWORD *)(a1 + Number))\n    v5 = **(char **)(a1 + Number);\n  else\n    v5 = Number;\n  switch (v5) {\n  case String:\n  case String:\n    if (access(s, Number))\n      goto LABEL_56;\n    if (!*(_QWORD *)a1)\n      sub_406C8B(Number, String, a1);\n    *__errno_location() = Number;\n    return Number L;\n  case String:\n  case String:\n    if (!access(s, Number))\n      goto LABEL_58;\n    if (!*(_QWORD *)a1) {\n      v6 = __errno_location();\n      sub_406C8B(*v6, String, a1);\n    }\n    goto LABEL_71;\n  case String:\n  case String:\n  LABEL_56:\n    stream = fopen(s, f__w_mode);\n    if (stream)\n      fclose(stream);\n    goto LABEL_58;\n  case String:\n  case String:\n    *(_QWORD *)(v18 + Number) = Number L;\n    *(_QWORD *)v18 = tmpfile();\n    if (*(_QWORD *)v18) {\n      *(_QWORD *)(v18 + Number) = Number L;\n      *(_DWORD *)(v18 + Number) = Number;\n      *(_QWORD *)(v18 + Number) = Number;\n      *(_QWORD *)(v18 + Number) = Number L;\n      return Number L;\n    }\n    if (!*(_QWORD *)a1) {\n      v7 = __errno_location();\n      sub_406C8B(*v7, String, a1);\n    }\n    goto LABEL_71;\n  default:\n  LABEL_58:\n    v8 = strlen(s);\n    *(_QWORD *)(v18 + Number) = malloc((unsigned int)(v8 + Number));\n    if (!*(_QWORD *)(v18 + Number)) {\n      if (!*(_QWORD *)a1)\n        sub_406C8B(Number, String, a1);\n      *__errno_location() = Number;\n      return Number L;\n    }\n    strcpy(*(char **)(v18 + Number), s);\n    v16 = *(_BYTE **)(a1 + Number);\n    if (v16 && *(_DWORD *)(v18 + Number))\n      v20 = Number;\n    stream = fopen(s, (&f__w_mode)[v20 | Number]);\n    if (stream)\n      goto LABEL_73;\n    stream = fopen(s, (&f__r_mode)[v20]);\n    if (stream) {\n      *(_QWORD *)(v18 + Number) = Number L;\n    } else {\n      stream = fopen(s, (&f__w_mode)[v20]);\n      if (!stream) {\n        if (!*(_QWORD *)a1) {\n          v10 = __errno_location();\n          f__fatal(*v10, String);\n        }\n      LABEL_71:\n        v9 = __errno_location();\n        *__errno_location() = *v9;\n        return *__errno_location();\n      }\n      *(_QWORD *)(v18 + Number) = Number L;\n      *(_QWORD *)(v18 + Number) = Number L;\n    }\n  LABEL_73:\n    *(_QWORD *)v18 = stream;\n    v11 = f__canseek(*(FILE **)v18);\n    *(_QWORD *)(v18 + Number) = v11;\n    v12 = f__inode(s, v18 + Number);\n    *(_QWORD *)(v18 + Number) = v12;\n    if (*(_QWORD *)(v18 + Number) == Number) {\n      if (!*(_QWORD *)a1)\n        sub_406C8B(Number, String, a1);\n      *__errno_location() = Number;\n      return Number L;\n    }\n    if (!*(_QWORD *)(v18 + Number))\n      return Number L;\n    if (*(_QWORD *)(a1 + Number)) {\n      rewind(*(FILE **)v18);\n      return Number L;\n    }\n    v16 = *(_BYTE **)(a1 + Number);\n    if (!v16 || *v16 != Number && *v16 != Number ||\n        !fseek(*(FILE **)v18, Number L, Number))\n      return Number L;\n    if (!*(_QWORD *)a1)\n      sub_406C8B(Number, String, a1);\n    *__errno_location() = Number;\n    result = Number L;\n    break;\n  }\n  return result;\n}", "code_t": "integer __cdecl f_open(olist *a) {\n  integer result;\n  _BOOL4 v2;\n  __int64 v3;\n  _BOOL4 v4;\n  int v5;\n  int *v6;\n  int *v7;\n  int v8;\n  int *v9;\n  int *v10;\n  int v11;\n  __int64 v12;\n  int n;\n  cllist <span class=\"supfact\">x</span>;\n  char buf[Number];\n  char *s;\n  integer rv;\n  unit *b;\n  FILE *tf_0;\n  int ufmt;\n  f__external = Number L;\n  if (a->ounit > Number || a->ounit < Number) {\n    if (!a->oerr)\n      f__fatal(Number, String);\n    *__errno_location() = Number;\n    return Number L;\n  }\n  if (!f__init)\n    f_init();\n  b = (unit *)(Number * a->ounit + Number);\n  f__curunit = b;\n  if (b->ufd) {\n    if (!a->ofnm || (g_char(a->ofnm, a->ofnmlen, buf), v3 = f__inode(buf, &n),\n                     v3 == b->uinode) &&\n                        b->udev == n) {\n      if (a->oblnk) {\n        v2 = *a->oblnk == Number || *a->oblnk == Number;\n        b->ublnk = v2;\n      }\n      return Number L;\n    }\n    <span class=\"supfact\">x</span>.cunit = a->ounit;\n    <span class=\"supfact\">x</span>.csta = Number L;\n    <span class=\"supfact\">x</span>.cerr = a->oerr;\n    rv = f_clos(&<span class=\"supfact\">x</span>);\n    if (rv)\n      return rv;\n  }\n  b->url = a->orl;\n  v4 = a->oblnk && (*a->oblnk == Number || *a->oblnk == Number);\n  b->ublnk = v4;\n  if (a->ofm)\n    b->ufmt = *a->ofm == Number || *a->ofm == Number;\n  else\n    b->ufmt = b->url <= Number;\n  ufmt = b->ufmt;\n  if (a->ofnm) {\n    g_char(a->ofnm, a->ofnmlen, buf);\n    if (!buf[Number]) {\n      if (!a->oerr)\n        opn_err(Number, String, a);\n      *__errno_location() = Number;\n      return Number L;\n    }\n  } else {\n    sprintf(buf, String, a->ounit);\n  }\n  b->uscrtch = Number L;\n  b->uend = Number L;\n  b->uwrt = Number L;\n  b->ufd = Number L;\n  b->urw = Number L;\n  if (a->osta)\n    v5 = *a->osta;\n  else\n    v5 = Number;\n  switch (v5) {\n  case String:\n  case String:\n    if (access(buf, Number))\n      goto LABEL_56;\n    if (!a->oerr)\n      opn_err(Number, String, a);\n    *__errno_location() = Number;\n    return Number L;\n  case String:\n  case String:\n    if (!access(buf, Number))\n      goto LABEL_58;\n    if (!a->oerr) {\n      v6 = __errno_location();\n      opn_err(*v6, String, a);\n    }\n    goto LABEL_71;\n  case String:\n  case String:\n  LABEL_56:\n    tf_0 = fopen(buf, f__w_mode[Number]);\n    if (tf_0)\n      fclose(tf_0);\n    goto LABEL_58;\n  case String:\n  case String:\n    b->uscrtch = Number L;\n    b->ufd = tmpfile();\n    if (b->ufd) {\n      b->ufnm = Number L;\n      b->udev = Number;\n      b->uinode = Number;\n      b->useek = Number L;\n      return Number L;\n    }\n    if (!a->oerr) {\n      v7 = __errno_location();\n      opn_err(*v7, String, a);\n    }\n    goto LABEL_71;\n  default:\n  LABEL_58:\n    v8 = strlen(buf);\n    b->ufnm = (char *)malloc((unsigned int)(v8 + Number));\n    if (!b->ufnm) {\n      if (!a->oerr)\n        opn_err(Number, String, a);\n      *__errno_location() = Number;\n      return Number L;\n    }\n    strcpy(b->ufnm, buf);\n    s = a->oacc;\n    if (s && b->url)\n      ufmt = Number;\n    tf_0 = fopen(buf, f__w_mode[ufmt | Number]);\n    if (tf_0)\n      goto LABEL_73;\n    tf_0 = fopen(buf, f__r_mode[ufmt]);\n    if (tf_0) {\n      b->urw = Number L;\n    } else {\n      tf_0 = fopen(buf, f__w_mode[ufmt]);\n      if (!tf_0) {\n        if (!a->oerr) {\n          v10 = __errno_location();\n          f__fatal(*v10, String);\n        }\n      LABEL_71:\n        v9 = __errno_location();\n        *__errno_location() = *v9;\n        return *__errno_location();\n      }\n      b->uwrt = Number L;\n      b->urw = Number L;\n    }\n  LABEL_73:\n    b->ufd = tf_0;\n    v11 = f__canseek(b->ufd);\n    b->useek = v11;\n    v12 = f__inode(buf, &b->udev);\n    b->uinode = v12;\n    if (b->uinode == Number) {\n      if (!a->oerr)\n        opn_err(Number, String, a);\n      *__errno_location() = Number;\n      return Number L;\n    }\n    if (!b->useek)\n      return Number L;\n    if (a->orl) {\n      rewind(b->ufd);\n      return Number L;\n    }\n    s = a->oacc;\n    if (!s || *s != Number && *s != Number || !fseek(b->ufd, Number L, Number))\n      return Number L;\n    if (!a->oerr)\n      opn_err(Number, String, a);\n    *__errno_location() = Number;\n    result = Number L;\n    break;\n  }\n  return result;\n}", "var": [{"name": "v14", "type": "struct cllist { flag cerr; ftnint cunit; char * csta; }", "pred_name": "x", "ref_name": "x", "ref_type": "struct cllist { flag cerr; ftnint cunit; char * csta; }"}], "body_in_train": false}, {"repo_owner": "XboxDev", "repo_name": "nxdk", "path": "XboxDev/nxdk/48d303569995b7310ebea64eea0d160c2c504b1b260fa630cbf23fbf234a2983", "path_in_repo": "XboxDev/nxdk/tools/fp20compiler/_rc1.0_parser.o", "objdump": "0000000000000000 <_ZN21GeneralCombinerStruct4InitE20GeneralPortionStruct16ConstColorStruct>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 89 7d f0          \tmov    %rdi,-0x10(%rbp)\n   9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   d:\t48 8b 4d 10          \tmov    0x10(%rbp),%rcx\n  11:\t48 8b 5d 18          \tmov    0x18(%rbp),%rbx\n  15:\t48 89 08             \tmov    %rcx,(%rax)\n  18:\t48 89 58 08          \tmov    %rbx,0x8(%rax)\n  1c:\t48 8b 4d 20          \tmov    0x20(%rbp),%rcx\n  20:\t48 8b 5d 28          \tmov    0x28(%rbp),%rbx\n  24:\t48 89 48 10          \tmov    %rcx,0x10(%rax)\n  28:\t48 89 58 18          \tmov    %rbx,0x18(%rax)\n  2c:\t48 8b 4d 30          \tmov    0x30(%rbp),%rcx\n  30:\t48 8b 5d 38          \tmov    0x38(%rbp),%rbx\n  34:\t48 89 48 20          \tmov    %rcx,0x20(%rax)\n  38:\t48 89 58 28          \tmov    %rbx,0x28(%rax)\n  3c:\t48 8b 4d 40          \tmov    0x40(%rbp),%rcx\n  40:\t48 8b 5d 48          \tmov    0x48(%rbp),%rbx\n  44:\t48 89 48 30          \tmov    %rcx,0x30(%rax)\n  48:\t48 89 58 38          \tmov    %rbx,0x38(%rax)\n  4c:\t48 8b 4d 50          \tmov    0x50(%rbp),%rcx\n  50:\t48 8b 5d 58          \tmov    0x58(%rbp),%rbx\n  54:\t48 89 48 40          \tmov    %rcx,0x40(%rax)\n  58:\t48 89 58 48          \tmov    %rbx,0x48(%rax)\n  5c:\t48 8b 4d 60          \tmov    0x60(%rbp),%rcx\n  60:\t48 8b 5d 68          \tmov    0x68(%rbp),%rbx\n  64:\t48 89 48 50          \tmov    %rcx,0x50(%rax)\n  68:\t48 89 58 58          \tmov    %rbx,0x58(%rax)\n  6c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  70:\tc7 80 c0 00 00 00 01 \tmovl   $0x1,0xc0(%rax)\n  77:\t00 00 00 \n  7a:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  7e:\t48 8b 45 70          \tmov    0x70(%rbp),%rax\n  82:\t48 8b 55 78          \tmov    0x78(%rbp),%rdx\n  86:\t48 89 81 c4 00 00 00 \tmov    %rax,0xc4(%rcx)\n  8d:\t48 89 91 cc 00 00 00 \tmov    %rdx,0xcc(%rcx)\n  94:\t8b 85 80 00 00 00    \tmov    0x80(%rbp),%eax\n  9a:\t89 81 d4 00 00 00    \tmov    %eax,0xd4(%rcx)\n  a0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  a4:\tc7 80 ec 00 00 00 01 \tmovl   $0x1,0xec(%rax)\n  ab:\t00 00 00 \n  ae:\t90                   \tnop\n  af:\t5b                   \tpop    %rbx\n  b0:\t5d                   \tpop    %rbp\n  b1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall GeneralCombinerStruct\nInit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6,\n     __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12,\n     __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17,\n     __int64 a18, __int64 a19, __int64 a20, int a21) {\n  __int64 result;\n  *(_QWORD *)a1 = a7;\n  *(_QWORD *)(a1 + Number) = a8;\n  *(_QWORD *)(a1 + Number) = a9;\n  *(_QWORD *)(a1 + Number) = a10;\n  *(_QWORD *)(a1 + Number) = a11;\n  *(_QWORD *)(a1 + Number) = a12;\n  *(_QWORD *)(a1 + Number) = a13;\n  *(_QWORD *)(a1 + Number) = a14;\n  *(_QWORD *)(a1 + Number) = a15;\n  *(_QWORD *)(a1 + Number) = a16;\n  *(_QWORD *)(a1 + Number) = a17;\n  *(_QWORD *)(a1 + Number) = a18;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = a19;\n  *(_QWORD *)(a1 + Number) = a20;\n  *(_DWORD *)(a1 + Number) = a21;\n  result = a1;\n  *(_DWORD *)(a1 + Number) = Number;\n  return result;\n}", "code_t": "void __cdecl GeneralCombinerStruct\nInit(GeneralCombinerStruct *const this,\n     GeneralPortionStruct <span class=\"supfact\">_portion0</span>,\n     ConstColorStruct <span class=\"supfact\">_cc0</span>) {\n  this->portion[Number] = <span class=\"supfact\">_portion0</span>;\n  this->numPortions = Number;\n  this->cc[Number] = <span class=\"supfact\">_cc0</span>;\n  this->numConsts = Number;\n}", "var": [{"name": "a7", "type": "__unk__", "pred_name": "__unk__", "ref_name": "_portion0", "ref_type": "struct GeneralPortionStruct { int designator; GeneralFunctionStruct gf; BiasScaleEnum bs; }"}, {"name": "a19", "type": "disappear", "pred_name": "", "ref_name": "_cc0", "ref_type": "struct ConstColorStruct { RegisterEnum reg; float[4] v; }"}], "body_in_train": false}, {"repo_owner": "msloth", "repo_name": "contiki-launchpad", "path": "msloth/contiki-launchpad/33c0456689df882f7a491ec345af1f692ec267cdd562edc180c55c7b0e1ec7e0", "path_in_repo": "msloth/contiki-launchpad/examples/collect/obj_native/netflood.o", "objdump": "000000000000002d <recv_from_ipolite>:\n  2d:\t55                   \tpush   %rbp\n  2e:\t48 89 e5             \tmov    %rsp,%rbp\n  31:\t48 83 ec 30          \tsub    $0x30,%rsp\n  35:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  39:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  3d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  45:\te8 00 00 00 00       \tcallq  4a <recv_from_ipolite+0x1d>\n  4a:\t8b 10                \tmov    (%rax),%edx\n  4c:\t89 55 e8             \tmov    %edx,-0x18(%rbp)\n  4f:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n  53:\t66 89 45 ec          \tmov    %ax,-0x14(%rbp)\n  57:\t0f b7 45 ec          \tmovzwl -0x14(%rbp),%eax\n  5b:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n  5e:\te8 00 00 00 00       \tcallq  63 <recv_from_ipolite+0x36>\n  63:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  67:\tbf 06 00 00 00       \tmov    $0x6,%edi\n  6c:\te8 00 00 00 00       \tcallq  71 <recv_from_ipolite+0x44>\n  71:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  75:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n  7c:\t48 8b 00             \tmov    (%rax),%rax\n  7f:\t48 85 c0             \ttest   %rax,%rax\n  82:\t0f 84 15 01 00 00    \tje     19d <recv_from_ipolite+0x170>\n  88:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  8c:\t48 8d 90 98 00 00 00 \tlea    0x98(%rax),%rdx\n  93:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  97:\t48 83 c0 02          \tadd    $0x2,%rax\n  9b:\t48 89 d6             \tmov    %rdx,%rsi\n  9e:\t48 89 c7             \tmov    %rax,%rdi\n  a1:\te8 00 00 00 00       \tcallq  a6 <recv_from_ipolite+0x79>\n  a6:\t85 c0                \ttest   %eax,%eax\n  a8:\t74 1b                \tje     c5 <recv_from_ipolite+0x98>\n  aa:\t0f b7 55 e8          \tmovzwl -0x18(%rbp),%edx\n  ae:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  b2:\t0f b6 80 9a 00 00 00 \tmovzbl 0x9a(%rax),%eax\n  b9:\t0f b6 c0             \tmovzbl %al,%eax\n  bc:\t66 39 c2             \tcmp    %ax,%dx\n  bf:\t0f 86 d8 00 00 00    \tjbe    19d <recv_from_ipolite+0x170>\n  c5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  c9:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n  d0:\t4c 8b 08             \tmov    (%rax),%r9\n  d3:\t0f b6 4d ef          \tmovzbl -0x11(%rbp),%ecx\n  d7:\t0f b7 45 e8          \tmovzwl -0x18(%rbp),%eax\n  db:\t0f b6 d0             \tmovzbl %al,%edx\n  de:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  e2:\t48 8d 78 02          \tlea    0x2(%rax),%rdi\n  e6:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n  ea:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  ee:\t41 89 c8             \tmov    %ecx,%r8d\n  f1:\t89 d1                \tmov    %edx,%ecx\n  f3:\t48 89 fa             \tmov    %rdi,%rdx\n  f6:\t48 89 c7             \tmov    %rax,%rdi\n  f9:\t41 ff d1             \tcallq  *%r9\n  fc:\t85 c0                \ttest   %eax,%eax\n  fe:\t0f 84 99 00 00 00    \tje     19d <recv_from_ipolite+0x170>\n 104:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 109:\t0f 84 8e 00 00 00    \tje     19d <recv_from_ipolite+0x170>\n 10f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 113:\t48 89 c7             \tmov    %rax,%rdi\n 116:\te8 00 00 00 00       \tcallq  11b <recv_from_ipolite+0xee>\n 11b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 11f:\t48 89 c7             \tmov    %rax,%rdi\n 122:\te8 00 00 00 00       \tcallq  127 <recv_from_ipolite+0xfa>\n 127:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 12e:\t00 \n 12f:\te8 00 00 00 00       \tcallq  134 <recv_from_ipolite+0x107>\n 134:\t8b 10                \tmov    (%rax),%edx\n 136:\t89 55 e8             \tmov    %edx,-0x18(%rbp)\n 139:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n 13d:\t66 89 45 ec          \tmov    %ax,-0x14(%rbp)\n 141:\t80 7d ef 0f          \tcmpb   $0xf,-0x11(%rbp)\n 145:\t77 56                \tja     19d <recv_from_ipolite+0x170>\n 147:\t0f b7 45 ec          \tmovzwl -0x14(%rbp),%eax\n 14b:\t83 c0 01             \tadd    $0x1,%eax\n 14e:\t66 89 45 ec          \tmov    %ax,-0x14(%rbp)\n 152:\te8 00 00 00 00       \tcallq  157 <recv_from_ipolite+0x12a>\n 157:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n 15a:\t89 10                \tmov    %edx,(%rax)\n 15c:\t0f b7 55 ec          \tmovzwl -0x14(%rbp),%edx\n 160:\t66 89 50 04          \tmov    %dx,0x4(%rax)\n 164:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 168:\t48 89 c7             \tmov    %rax,%rdi\n 16b:\te8 90 fe ff ff       \tcallq  0 <send>\n 170:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 174:\t48 05 98 00 00 00    \tadd    $0x98,%rax\n 17a:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n 17e:\t48 83 c2 02          \tadd    $0x2,%rdx\n 182:\t48 89 d6             \tmov    %rdx,%rsi\n 185:\t48 89 c7             \tmov    %rax,%rdi\n 188:\te8 00 00 00 00       \tcallq  18d <recv_from_ipolite+0x160>\n 18d:\t0f b7 45 e8          \tmovzwl -0x18(%rbp),%eax\n 191:\t89 c2                \tmov    %eax,%edx\n 193:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 197:\t88 90 9a 00 00 00    \tmov    %dl,0x9a(%rax)\n 19d:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 1a2:\t74 0c                \tje     1b0 <recv_from_ipolite+0x183>\n 1a4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1a8:\t48 89 c7             \tmov    %rax,%rdi\n 1ab:\te8 00 00 00 00       \tcallq  1b0 <recv_from_ipolite+0x183>\n 1b0:\t90                   \tnop\n 1b1:\tc9                   \tleaveq \n 1b2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall recv_from_ipolite(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 result;\n  __int64 v4;\n  __int64 v5;\n  int v6;\n  __int16 v7;\n  unsigned __int8 v8;\n  __int64 v9;\n  __int64 v10;\n  v9 = a1;\n  v2 = packetbuf_dataptr();\n  v6 = *(_DWORD *)v2;\n  v7 = *(_WORD *)(v2 + Number);\n  v8 = v7;\n  v10 = queuebuf_new_from_packetbuf();\n  packetbuf_hdrreduce(Number L);\n  result = **(_QWORD **)(a1 + Number);\n  if (result) {\n    if (!(unsigned int)rimeaddr_cmp((char *)&v6 + Number, v9 + Number) ||\n        (result = *(unsigned __int8 *)(v9 + Number),\n         (unsigned __int16)v6 > (unsigned __int16)result)) {\n      result = (**(__int64(__fastcall ***)(__int64, __int64, char *, _QWORD,\n                                           _QWORD))(v9 + Number))(\n          v9, a2, (char *)&v6 + Number, (unsigned __int8)v6, v8);\n      if ((_DWORD)result) {\n        if (v10) {\n          queuebuf_to_packetbuf(v10);\n          queuebuf_free(v10);\n          v10 = Number L;\n          v4 = packetbuf_dataptr();\n          v6 = *(_DWORD *)v4;\n          result = *(unsigned __int16 *)(v4 + Number);\n          v7 = result;\n          if (v8 <= Number) {\n            ++v7;\n            v5 = packetbuf_dataptr();\n            *(_DWORD *)v5 = v6;\n            *(_WORD *)(v5 + Number) = v7;\n            send(v9);\n            rimeaddr_copy(v9 + Number, (char *)&v6 + Number);\n            result = v9;\n            *(_BYTE *)(v9 + Number) = v6;\n          }\n        }\n      }\n    }\n  }\n  if (v10)\n    result = queuebuf_free(v10);\n  return result;\n}", "code_t": "void __cdecl recv_from_ipolite(ipolite_conn *ipolite, const rimeaddr_t *from) {\n  netflood_hdr <span class=\"supfact\">hdr</span>;\n  uint8_t hops;\n  netflood_conn *c;\n  queuebuf *queuebuf;\n  c = (netflood_conn *)ipolite;\n  <span class=\"supfact\">hdr</span> = *(netflood_hdr *)packetbuf_dataptr();\n  hops = <span class=\"supfact\">hdr</span>.hops;\n  queuebuf = (queuebuf *)queuebuf_new_from_packetbuf();\n  packetbuf_hdrreduce(Number L);\n  if (ipolite[Number].c.c.channel.next->next &&\n      (!(unsigned int)rimeaddr_cmp(&<span class=\"supfact\">hdr</span>.originator,\n                                   &c->last_originator) ||\n       (unsigned int)<span class=\"supfact\">hdr</span>.originator_seqno >\n           c->last_originator_seqno)) {\n    if (c->u->recv(c, from, &<span class=\"supfact\">hdr</span>.originator,\n                   LOBYTE(<span class=\"supfact\">hdr</span>.originator_seqno), hops)) {\n      if (queuebuf) {\n        queuebuf_to_packetbuf(queuebuf);\n        queuebuf_free(queuebuf);\n        queuebuf = Number L;\n        <span class=\"supfact\">hdr</span> = *(netflood_hdr *)packetbuf_dataptr();\n        if (hops <= Number) {\n          ++<span class=\"supfact\">hdr</span>.hops;\n          *(netflood_hdr *)packetbuf_dataptr() = <span class=\"supfact\">hdr</span>;\n          send(c);\n          rimeaddr_copy(&c->last_originator, &<span class=\"supfact\">hdr</span>.originator);\n          c->last_originator_seqno = <span class=\"supfact\">hdr</span>.originator_seqno;\n        }\n      }\n    }\n  }\n  if (queuebuf)\n    queuebuf_free(queuebuf);\n}", "var": [{"name": "v6", "type": "struct netflood_hdr { uint16_t originator_seqno; rimeaddr_t originator; uint16_t hops; }", "pred_name": "hdr", "ref_name": "hdr", "ref_type": "struct netflood_hdr { uint16_t originator_seqno; rimeaddr_t originator; uint16_t hops; }"}], "body_in_train": true}, {"repo_owner": "mDibyo", "repo_name": "py-dlib", "path": "mDibyo/py-dlib/2fa2177e5c70c6dd2530f6bfdee1cc921b3de9e5d513af3ae7a1dcf1683890fa", "path_in_repo": "mDibyo/py-dlib/dlib/test/sammon.o", "objdump": "0000000000000000 <_ZNSt6vectorIN4dlib6matrixIdLl4ELl1ENS0_33memory_manager_stateless_kernel_1IcEENS0_16row_major_layoutEEESaIS5_EE5beginEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  10:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  14:\t48 89 d6             \tmov    %rdx,%rsi\n  17:\t48 89 c7             \tmov    %rax,%rdi\n  1a:\te8 00 00 00 00       \tcallq  1f <_ZNSt6vectorIN4dlib6matrixIdLl4ELl1ENS0_33memory_manager_stateless_kernel_1IcEENS0_16row_major_layoutEEESaIS5_EE5beginEv+0x1f>\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\tc9                   \tleaveq \n  24:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n    vector<dlib matrix<double, Number, Number,\n                       dlib memory_manager_stateless_kernel_1<char>,\n                       dlib row_major_layout>>\n    begin(_QWORD *a1) {\n  __int64 v2;\n  __gnu_cxx __normal_iterator<\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout> *,\n      std vector<dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>>>\n      __normal_iterator(&v2, a1);\n  return v2;\n}", "code_t": "std vector<dlib matrix<double, Number, Number,\n                       dlib memory_manager_stateless_kernel_1<char>,\n                       dlib row_major_layout>>\n    iterator __cdecl std vector<dlib matrix<\n        double, Number, Number, dlib memory_manager_stateless_kernel_1<char>,\n        dlib row_major_layout>>\n    begin(std vector<dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>> *const this) {\n  __gnu_cxx __normal_iterator<\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout> *,\n      std vector<dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>>>\n      <span class=\"supfact\">v2</span>;\n  __gnu_cxx __normal_iterator<\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout> *,\n      std vector<dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>, &this->_M_impl._M_start);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__unk__", "pred_name": "v2", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<dlib::matrix<double,4,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>*,std::vector<dlib::matrix<double,4,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout>> > { dlib::matrix<double,4,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> * _M_current; }"}], "body_in_train": true}, {"repo_owner": "miztooks", "repo_name": "myeditor", "path": "miztooks/myeditor/44a4aaad6c5547f735d6b281a90ac37c97a687a5028313d8ccc5a8aa66c1fd81", "path_in_repo": "miztooks/myeditor/Dependency/openssl-1.0.1j/test/rc4test", "objdump": "000000000040812b <ERR_get_state>:\n  40812b:\t55                   \tpush   %rbp\n  40812c:\t48 89 e5             \tmov    %rsp,%rbp\n  40812f:\t48 81 ec 80 02 00 00 \tsub    $0x280,%rsp\n  408136:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  40813d:\t00 \n  40813e:\te8 54 e7 ff ff       \tcallq  406897 <err_fns_check>\n  408143:\t48 8d 85 80 fd ff ff \tlea    -0x280(%rbp),%rax\n  40814a:\t48 89 c7             \tmov    %rax,%rdi\n  40814d:\te8 97 9f ff ff       \tcallq  4020e9 <CRYPTO_THREADID_current>\n  408152:\t48 8d 95 80 fd ff ff \tlea    -0x280(%rbp),%rdx\n  408159:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n  408160:\t48 89 d6             \tmov    %rdx,%rsi\n  408163:\t48 89 c7             \tmov    %rax,%rdi\n  408166:\te8 14 a0 ff ff       \tcallq  40217f <CRYPTO_THREADID_cpy>\n  40816b:\t48 8b 05 4e 29 03 00 \tmov    0x3294e(%rip),%rax        # 43aac0 <err_fns>\n  408172:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n  408176:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n  40817d:\t48 89 c7             \tmov    %rax,%rdi\n  408180:\tff d2                \tcallq  *%rdx\n  408182:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  408186:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40818b:\t0f 85 f1 00 00 00    \tjne    408282 <ERR_get_state+0x157>\n  408191:\tba fb 03 00 00       \tmov    $0x3fb,%edx\n  408196:\tbe 18 19 42 00       \tmov    $0x421918,%esi\n  40819b:\tbf 58 02 00 00       \tmov    $0x258,%edi\n  4081a0:\te8 b9 a9 ff ff       \tcallq  402b5e <CRYPTO_malloc>\n  4081a5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4081a9:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4081ae:\t75 0a                \tjne    4081ba <ERR_get_state+0x8f>\n  4081b0:\tb8 c0 c3 43 00       \tmov    $0x43c3c0,%eax\n  4081b5:\te9 cc 00 00 00       \tjmpq   408286 <ERR_get_state+0x15b>\n  4081ba:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4081be:\t48 8d 95 80 fd ff ff \tlea    -0x280(%rbp),%rdx\n  4081c5:\t48 89 d6             \tmov    %rdx,%rsi\n  4081c8:\t48 89 c7             \tmov    %rax,%rdi\n  4081cb:\te8 af 9f ff ff       \tcallq  40217f <CRYPTO_THREADID_cpy>\n  4081d0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4081d4:\tc7 80 50 02 00 00 00 \tmovl   $0x0,0x250(%rax)\n  4081db:\t00 00 00 \n  4081de:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4081e2:\tc7 80 54 02 00 00 00 \tmovl   $0x0,0x254(%rax)\n  4081e9:\t00 00 00 \n  4081ec:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  4081f3:\teb 2f                \tjmp    408224 <ERR_get_state+0xf9>\n  4081f5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4081f9:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  4081fc:\t48 63 d2             \tmovslq %edx,%rdx\n  4081ff:\t48 83 c2 1a          \tadd    $0x1a,%rdx\n  408203:\t48 c7 04 d0 00 00 00 \tmovq   $0x0,(%rax,%rdx,8)\n  40820a:\t00 \n  40820b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40820f:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  408212:\t48 63 d2             \tmovslq %edx,%rdx\n  408215:\t48 83 c2 54          \tadd    $0x54,%rdx\n  408219:\tc7 04 90 00 00 00 00 \tmovl   $0x0,(%rax,%rdx,4)\n  408220:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  408224:\t83 7d f4 0f          \tcmpl   $0xf,-0xc(%rbp)\n  408228:\t7e cb                \tjle    4081f5 <ERR_get_state+0xca>\n  40822a:\t48 8b 05 8f 28 03 00 \tmov    0x3288f(%rip),%rax        # 43aac0 <err_fns>\n  408231:\t48 8b 50 40          \tmov    0x40(%rax),%rdx\n  408235:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  408239:\t48 89 c7             \tmov    %rax,%rdi\n  40823c:\tff d2                \tcallq  *%rdx\n  40823e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  408242:\t48 8b 05 77 28 03 00 \tmov    0x32877(%rip),%rax        # 43aac0 <err_fns>\n  408249:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n  40824d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  408251:\t48 89 c7             \tmov    %rax,%rdi\n  408254:\tff d2                \tcallq  *%rdx\n  408256:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  40825a:\t74 13                \tje     40826f <ERR_get_state+0x144>\n  40825c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  408260:\t48 89 c7             \tmov    %rax,%rdi\n  408263:\te8 35 f0 ff ff       \tcallq  40729d <ERR_STATE_free>\n  408268:\tb8 c0 c3 43 00       \tmov    $0x43c3c0,%eax\n  40826d:\teb 17                \tjmp    408286 <ERR_get_state+0x15b>\n  40826f:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  408274:\t74 0c                \tje     408282 <ERR_get_state+0x157>\n  408276:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40827a:\t48 89 c7             \tmov    %rax,%rdi\n  40827d:\te8 1b f0 ff ff       \tcallq  40729d <ERR_STATE_free>\n  408282:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  408286:\tc9                   \tleaveq \n  408287:\tc3                   \tretq   ", "code_s": "__int64 *ERR_get_state() {\n  __int64 *v1;\n  __int64 v2[Number];\n  __int64 v3[Number];\n  __int64 v4;\n  int i;\n  __int64 *v6;\n  v4 = Number L;\n  err_fns_check();\n  CRYPTO_THREADID_current(v2);\n  CRYPTO_THREADID_cpy(v3, v2);\n  v6 = (__int64 *)(*(__int64(__fastcall **)(__int64 *))(err_fns + Number))(v3);\n  if (!v6) {\n    v6 = (__int64 *)CRYPTO_malloc(Number, (__int64)String, Number);\n    if (!v6)\n      return (__int64 *)&fallback_5219;\n    CRYPTO_THREADID_cpy(v6, v2);\n    *((_DWORD *)v6 + Number) = Number;\n    *((_DWORD *)v6 + Number) = Number;\n    for (i = Number; i <= Number; ++i) {\n      v6[i + Number] = Number L;\n      *((_DWORD *)v6 + i + Number) = Number;\n    }\n    v4 = (*(__int64(__fastcall **)(__int64 *))(err_fns + Number))(v6);\n    v1 =\n        (__int64 *)(*(__int64(__fastcall **)(__int64 *))(err_fns + Number))(v6);\n    if (v6 != v1) {\n      ERR_STATE_free((__int64)v6);\n      return (__int64 *)&fallback_5219;\n    }\n    if (v4)\n      ERR_STATE_free(v4);\n  }\n  return v6;\n}", "code_t": "ERR_STATE *__cdecl ERR_get_state() {\n  ERR_STATE *v1;\n  CRYPTO_THREADID <span class=\"supfact\">tid</span>;\n  ERR_STATE <span class=\"supfact\">tmp</span>;\n  ERR_STATE *tmpp;\n  int i;\n  ERR_STATE *ret;\n  tmpp = Number L;\n  err_fns_check();\n  CRYPTO_THREADID_current(&<span class=\"supfact\">tid</span>);\n  CRYPTO_THREADID_cpy(&<span class=\"supfact\">tmp</span>.<span class=\"supfact\">tid</span>,\n                      &<span class=\"supfact\">tid</span>);\n  ret = err_fns->cb_thread_get_item(&<span class=\"supfact\">tmp</span>);\n  if (!ret) {\n    ret = (ERR_STATE *)CRYPTO_malloc(Number, String, Number);\n    if (!ret)\n      return &fallback_5219;\n    CRYPTO_THREADID_cpy(&ret-><span class=\"supfact\">tid</span>, &<span class=\"supfact\">tid</span>);\n    ret->top = Number;\n    ret->bottom = Number;\n    for (i = Number; i <= Number; ++i) {\n      ret->err_data[i] = Number L;\n      ret->err_data_flags[i] = Number;\n    }\n    tmpp = err_fns->cb_thread_set_item(ret);\n    v1 = err_fns->cb_thread_get_item(ret);\n    if (ret != v1) {\n      ERR_STATE_free(ret);\n      return &fallback_5219;\n    }\n    if (tmpp)\n      ERR_STATE_free(tmpp);\n  }\n  return ret;\n}", "var": [{"name": "v2", "type": "struct CRYPTO_THREADID { void * ptr; unsigned __int64 val; }", "pred_name": "tid", "ref_name": "tid", "ref_type": "struct CRYPTO_THREADID { void * ptr; unsigned __int64 val; }"}, {"name": "v3", "type": "struct ERR_STATE { CRYPTO_THREADID tid; int[16] err_flags; unsigned __int64[16] err_buffer; char *[16] err_data; int[16] err_data_flags; const char *[16] err_file; int[16] err_line; int top; int bottom; }", "pred_name": "tmp", "ref_name": "tmp", "ref_type": "struct ERR_STATE { CRYPTO_THREADID tid; int[16] err_flags; unsigned __int64[16] err_buffer; char *[16] err_data; int[16] err_data_flags; const char *[16] err_file; int[16] err_line; int top; int bottom; }"}], "body_in_train": false}, {"repo_owner": "Benaddayoussef", "repo_name": "Puissance4", "path": "Benaddayoussef/Puissance4/4f434288668b3e1d0259f1655b3c8bef96c5d1bce0f2bbab6b0180d74658a5a7", "path_in_repo": "Benaddayoussef/Puissance4//puissance4", "objdump": "0000000000403fce <pf_handle_list>:\n  403fce:\t55                   \tpush   %rbp\n  403fcf:\t48 89 e5             \tmov    %rsp,%rbp\n  403fd2:\t48 83 ec 30          \tsub    $0x30,%rsp\n  403fd6:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  403fda:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  403fe1:\t8b 05 c9 41 00 00    \tmov    0x41c9(%rip),%eax        # 4081b0 <n.2992>\n  403fe7:\t8d 50 01             \tlea    0x1(%rax),%edx\n  403fea:\t89 15 c0 41 00 00    \tmov    %edx,0x41c0(%rip)        # 4081b0 <n.2992>\n  403ff0:\t48 98                \tcltq   \n  403ff2:\tff 75 48             \tpushq  0x48(%rbp)\n  403ff5:\tff 75 40             \tpushq  0x40(%rbp)\n  403ff8:\tff 75 38             \tpushq  0x38(%rbp)\n  403ffb:\tff 75 30             \tpushq  0x30(%rbp)\n  403ffe:\tff 75 28             \tpushq  0x28(%rbp)\n  404001:\tff 75 20             \tpushq  0x20(%rbp)\n  404004:\tff 75 18             \tpushq  0x18(%rbp)\n  404007:\tff 75 10             \tpushq  0x10(%rbp)\n  40400a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40400f:\t48 89 c7             \tmov    %rax,%rdi\n  404012:\te8 6c 0a 00 00       \tcallq  404a83 <pf_itoa>\n  404017:\t48 83 c4 40          \tadd    $0x40,%rsp\n  40401b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40401f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  404023:\tbe ff ff ff 7f       \tmov    $0x7fffffff,%esi\n  404028:\t48 89 c7             \tmov    %rax,%rdi\n  40402b:\te8 b3 0b 00 00       \tcallq  404be3 <pf_strlen>\n  404030:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  404034:\t8b 45 3c             \tmov    0x3c(%rbp),%eax\n  404037:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40403b:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  40403f:\t48 89 ce             \tmov    %rcx,%rsi\n  404042:\t89 c7                \tmov    %eax,%edi\n  404044:\te8 2c f2 ff ff       \tcallq  403275 <pf_write>\n  404049:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  40404c:\t8b 45 3c             \tmov    0x3c(%rbp),%eax\n  40404f:\tba 01 00 00 00       \tmov    $0x1,%edx\n  404054:\tbe 55 51 40 00       \tmov    $0x405155,%esi\n  404059:\t89 c7                \tmov    %eax,%edi\n  40405b:\te8 15 f2 ff ff       \tcallq  403275 <pf_write>\n  404060:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  404063:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  404067:\t48 89 c7             \tmov    %rax,%rdi\n  40406a:\te8 c1 cf ff ff       \tcallq  401030 <free@plt>\n  40406f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404072:\tc9                   \tleaveq \n  404073:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pf_handle_list(__int64 a1, __int64 a2, __int64 a3, int a4,\n                                  int a5, int a6, __int64 a7, __int64 a8,\n                                  __int64 a9, __int64 a10, __int64 a11,\n                                  __int64 a12) {\n  int v12;\n  size_t v14;\n  void *ptr;\n  int v16;\n  unsigned int v17;\n  v12 = n_2992++;\n  ptr = (void *)pf_itoa(v12, Number, n_2992, a4, a5, a6, a7, a8, a9, a10, a11);\n  v14 = pf_strlen(ptr, Number);\n  v16 = pf_write(SHIDWORD(a12), ptr, v14);\n  v17 = pf_write(SHIDWORD(a12), String, Number) + v16;\n  free(ptr);\n  return v17;\n}", "code_t": "int __cdecl pf_handle_list(t_pf_param <span class=\"supfact\">param</span>,\n                           __va_list_tag *list) {\n  int v2;\n  size_t len;\n  char *str;\n  int res;\n  int resa;\n  v2 = n_2992++;\n  str = pf_itoa(v2, <span class=\"supfact\">param</span>, Number);\n  len = pf_strlen(str, Number);\n  res = pf_write(<span class=\"supfact\">param</span>.fd, str, len);\n  resa = pf_write(<span class=\"supfact\">param</span>.fd, String, Number) + res;\n  free(str);\n  return resa;\n}", "var": [{"name": "a7", "type": "__unk__", "pred_name": "__unk__", "ref_name": "param", "ref_type": "struct t_pf_param { t_pf_string str; int access; int flags; unsigned int width; int width_access; int precision; t_pf_modifier modifier; char conversion; PADDING (3); int fd; int error; PADDING (4); void * value; }"}], "body_in_train": false}, {"repo_owner": "hai046", "repo_name": "MediaPlayer", "path": "hai046/MediaPlayer/bef8e8b710d56acb57ccb7bd352110d7b10650b4a6454cc2575dc992678bccb1", "path_in_repo": "hai046/MediaPlayer/app/src/main/jni/ffmpeg/libavcodec/mss2.o", "objdump": "0000000000001424 <decode_rle>:\n    1424:\t48 81 ec 48 06 00 00 \tsub    $0x648,%rsp\n    142b:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n    1430:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n    1435:\t89 54 24 1c          \tmov    %edx,0x1c(%rsp)\n    1439:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n    143e:\t44 89 44 24 18       \tmov    %r8d,0x18(%rsp)\n    1443:\t4c 89 4c 24 08       \tmov    %r9,0x8(%rsp)\n    1448:\t48 c7 84 24 90 04 00 \tmovq   $0x0,0x490(%rsp)\n    144f:\t00 00 00 00 00 \n    1454:\t48 c7 84 24 98 04 00 \tmovq   $0x0,0x498(%rsp)\n    145b:\t00 00 00 00 00 \n    1460:\t48 8d 94 24 a0 04 00 \tlea    0x4a0(%rsp),%rdx\n    1467:\t00 \n    1468:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    146d:\tb9 1f 00 00 00       \tmov    $0x1f,%ecx\n    1472:\t48 89 d7             \tmov    %rdx,%rdi\n    1475:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    1478:\t48 89 fa             \tmov    %rdi,%rdx\n    147b:\t89 02                \tmov    %eax,(%rdx)\n    147d:\t48 83 c2 04          \tadd    $0x4,%rdx\n    1481:\t66 89 02             \tmov    %ax,(%rdx)\n    1484:\t48 83 c2 02          \tadd    $0x2,%rdx\n    1488:\tc7 84 24 3c 06 00 00 \tmovl   $0x0,0x63c(%rsp)\n    148f:\t00 00 00 00 \n    1493:\tc7 84 24 38 06 00 00 \tmovl   $0x0,0x638(%rsp)\n    149a:\t00 00 00 00 \n    149e:\tc7 84 24 34 06 00 00 \tmovl   $0x0,0x634(%rsp)\n    14a5:\t00 00 00 00 \n    14a9:\tc7 84 24 30 06 00 00 \tmovl   $0x0,0x630(%rsp)\n    14b0:\t00 00 00 00 \n    14b4:\tb8 0e 01 00 00       \tmov    $0x10e,%eax\n    14b9:\t2b 84 24 50 06 00 00 \tsub    0x650(%rsp),%eax\n    14c0:\t89 84 24 00 06 00 00 \tmov    %eax,0x600(%rsp)\n    14c7:\tc7 84 24 24 06 00 00 \tmovl   $0x0,0x624(%rsp)\n    14ce:\t00 00 00 00 \n    14d2:\tc7 84 24 20 06 00 00 \tmovl   $0x0,0x620(%rsp)\n    14d9:\t00 00 00 00 \n    14dd:\tc7 84 24 1c 06 00 00 \tmovl   $0x0,0x61c(%rsp)\n    14e4:\t00 00 00 00 \n    14e8:\t83 bc 24 50 06 00 00 \tcmpl   $0x0,0x650(%rsp)\n    14ef:\t00 \n    14f0:\t0f 85 22 01 00 00    \tjne    1618 <decode_rle+0x1f4>\n    14f6:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    14fb:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n    1500:\t48 89 c7             \tmov    %rax,%rdi\n    1503:\te8 2a eb ff ff       \tcallq  32 <get_bits>\n    1508:\t89 84 24 fc 05 00 00 \tmov    %eax,0x5fc(%rsp)\n    150f:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1514:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n    1519:\t48 89 c7             \tmov    %rax,%rdi\n    151c:\te8 11 eb ff ff       \tcallq  32 <get_bits>\n    1521:\t89 84 24 f8 05 00 00 \tmov    %eax,0x5f8(%rsp)\n    1528:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    152d:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n    1532:\t48 89 c7             \tmov    %rax,%rdi\n    1535:\te8 f8 ea ff ff       \tcallq  32 <get_bits>\n    153a:\t83 c0 01             \tadd    $0x1,%eax\n    153d:\t89 84 24 f4 05 00 00 \tmov    %eax,0x5f4(%rsp)\n    1544:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1549:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n    154e:\t48 89 c7             \tmov    %rax,%rdi\n    1551:\te8 dc ea ff ff       \tcallq  32 <get_bits>\n    1556:\t83 c0 01             \tadd    $0x1,%eax\n    1559:\t89 84 24 f0 05 00 00 \tmov    %eax,0x5f0(%rsp)\n    1560:\t8b 94 24 fc 05 00 00 \tmov    0x5fc(%rsp),%edx\n    1567:\t8b 84 24 f4 05 00 00 \tmov    0x5f4(%rsp),%eax\n    156e:\t01 d0                \tadd    %edx,%eax\n    1570:\t39 84 24 68 06 00 00 \tcmp    %eax,0x668(%rsp)\n    1577:\t7c 19                \tjl     1592 <decode_rle+0x16e>\n    1579:\t8b 94 24 f8 05 00 00 \tmov    0x5f8(%rsp),%edx\n    1580:\t8b 84 24 f0 05 00 00 \tmov    0x5f0(%rsp),%eax\n    1587:\t01 d0                \tadd    %edx,%eax\n    1589:\t39 84 24 70 06 00 00 \tcmp    %eax,0x670(%rsp)\n    1590:\t7d 0a                \tjge    159c <decode_rle+0x178>\n    1592:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n    1597:\te9 fe 0a 00 00       \tjmpq   209a <decode_rle+0xc76>\n    159c:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    15a0:\t0f af 84 24 f8 05 00 \timul   0x5f8(%rsp),%eax\n    15a7:\t00 \n    15a8:\t89 c2                \tmov    %eax,%edx\n    15aa:\t8b 84 24 fc 05 00 00 \tmov    0x5fc(%rsp),%eax\n    15b1:\t01 d0                \tadd    %edx,%eax\n    15b3:\t48 98                \tcltq   \n    15b5:\t48 01 44 24 20       \tadd    %rax,0x20(%rsp)\n    15ba:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    15be:\t0f af 84 24 f8 05 00 \timul   0x5f8(%rsp),%eax\n    15c5:\t00 \n    15c6:\t89 c1                \tmov    %eax,%ecx\n    15c8:\t8b 94 24 fc 05 00 00 \tmov    0x5fc(%rsp),%edx\n    15cf:\t89 d0                \tmov    %edx,%eax\n    15d1:\t01 c0                \tadd    %eax,%eax\n    15d3:\t01 d0                \tadd    %edx,%eax\n    15d5:\t01 c8                \tadd    %ecx,%eax\n    15d7:\t48 98                \tcltq   \n    15d9:\t48 01 44 24 10       \tadd    %rax,0x10(%rsp)\n    15de:\t8b 84 24 f4 05 00 00 \tmov    0x5f4(%rsp),%eax\n    15e5:\t89 84 24 68 06 00 00 \tmov    %eax,0x668(%rsp)\n    15ec:\t8b 84 24 f0 05 00 00 \tmov    0x5f0(%rsp),%eax\n    15f3:\t89 84 24 70 06 00 00 \tmov    %eax,0x670(%rsp)\n    15fa:\t83 bc 24 f8 05 00 00 \tcmpl   $0x0,0x5f8(%rsp)\n    1601:\t00 \n    1602:\t0f 84 45 01 00 00    \tje     174d <decode_rle+0x329>\n    1608:\tc7 84 24 1c 06 00 00 \tmovl   $0x1,0x61c(%rsp)\n    160f:\t01 00 00 00 \n    1613:\te9 35 01 00 00       \tjmpq   174d <decode_rle+0x329>\n    1618:\t83 bc 24 60 06 00 00 \tcmpl   $0x0,0x660(%rsp)\n    161f:\t00 \n    1620:\t7e 44                \tjle    1666 <decode_rle+0x242>\n    1622:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    1626:\t0f af 84 24 58 06 00 \timul   0x658(%rsp),%eax\n    162d:\t00 \n    162e:\t48 98                \tcltq   \n    1630:\t48 01 44 24 20       \tadd    %rax,0x20(%rsp)\n    1635:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    1639:\t0f af 84 24 58 06 00 \timul   0x658(%rsp),%eax\n    1640:\t00 \n    1641:\t48 98                \tcltq   \n    1643:\t48 01 44 24 10       \tadd    %rax,0x10(%rsp)\n    1648:\tc7 84 24 1c 06 00 00 \tmovl   $0x1,0x61c(%rsp)\n    164f:\t01 00 00 00 \n    1653:\t8b 84 24 58 06 00 00 \tmov    0x658(%rsp),%eax\n    165a:\t29 84 24 70 06 00 00 \tsub    %eax,0x670(%rsp)\n    1661:\te9 e7 00 00 00       \tjmpq   174d <decode_rle+0x329>\n    1666:\t8b 84 24 58 06 00 00 \tmov    0x658(%rsp),%eax\n    166d:\t89 84 24 70 06 00 00 \tmov    %eax,0x670(%rsp)\n    1674:\te9 d4 00 00 00       \tjmpq   174d <decode_rle+0x329>\n    1679:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    167e:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    1683:\t48 89 c7             \tmov    %rax,%rdi\n    1686:\te8 a7 e9 ff ff       \tcallq  32 <get_bits>\n    168b:\t89 84 24 18 06 00 00 \tmov    %eax,0x618(%rsp)\n    1692:\tb8 cc 00 00 00       \tmov    $0xcc,%eax\n    1697:\t2b 84 24 50 06 00 00 \tsub    0x650(%rsp),%eax\n    169e:\t39 84 24 18 06 00 00 \tcmp    %eax,0x618(%rsp)\n    16a5:\t7c 15                \tjl     16bc <decode_rle+0x298>\n    16a7:\tb8 0e 00 00 00       \tmov    $0xe,%eax\n    16ac:\t2b 84 24 50 06 00 00 \tsub    0x650(%rsp),%eax\n    16b3:\t01 84 24 18 06 00 00 \tadd    %eax,0x618(%rsp)\n    16ba:\teb 31                \tjmp    16ed <decode_rle+0x2c9>\n    16bc:\t81 bc 24 18 06 00 00 \tcmpl   $0xbd,0x618(%rsp)\n    16c3:\tbd 00 00 00 \n    16c7:\t7e 24                \tjle    16ed <decode_rle+0x2c9>\n    16c9:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    16ce:\t48 89 c7             \tmov    %rax,%rdi\n    16d1:\te8 69 ea ff ff       \tcallq  13f <get_bits1>\n    16d6:\t8b 94 24 18 06 00 00 \tmov    0x618(%rsp),%edx\n    16dd:\t01 d2                \tadd    %edx,%edx\n    16df:\t01 d0                \tadd    %edx,%eax\n    16e1:\t2d be 00 00 00       \tsub    $0xbe,%eax\n    16e6:\t89 84 24 18 06 00 00 \tmov    %eax,0x618(%rsp)\n    16ed:\t8b 84 24 18 06 00 00 \tmov    0x618(%rsp),%eax\n    16f4:\t48 98                \tcltq   \n    16f6:\t0f b6 84 04 90 04 00 \tmovzbl 0x490(%rsp,%rax,1),%eax\n    16fd:\t00 \n    16fe:\t84 c0                \ttest   %al,%al\n    1700:\t74 0a                \tje     170c <decode_rle+0x2e8>\n    1702:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n    1707:\te9 8e 09 00 00       \tjmpq   209a <decode_rle+0xc76>\n    170c:\t8b 84 24 3c 06 00 00 \tmov    0x63c(%rsp),%eax\n    1713:\t89 c2                \tmov    %eax,%edx\n    1715:\t8b 84 24 18 06 00 00 \tmov    0x618(%rsp),%eax\n    171c:\t48 98                \tcltq   \n    171e:\t88 94 04 90 04 00 00 \tmov    %dl,0x490(%rsp,%rax,1)\n    1725:\t8b 84 24 34 06 00 00 \tmov    0x634(%rsp),%eax\n    172c:\t8d 50 01             \tlea    0x1(%rax),%edx\n    172f:\t89 94 24 34 06 00 00 \tmov    %edx,0x634(%rsp)\n    1736:\t89 c2                \tmov    %eax,%edx\n    1738:\t8b 84 24 18 06 00 00 \tmov    0x618(%rsp),%eax\n    173f:\t48 98                \tcltq   \n    1741:\t89 54 84 50          \tmov    %edx,0x50(%rsp,%rax,4)\n    1745:\t83 84 24 38 06 00 00 \taddl   $0x1,0x638(%rsp)\n    174c:\t01 \n    174d:\t8b 84 24 30 06 00 00 \tmov    0x630(%rsp),%eax\n    1754:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    1757:\t89 94 24 30 06 00 00 \tmov    %edx,0x630(%rsp)\n    175e:\t85 c0                \ttest   %eax,%eax\n    1760:\t0f 85 13 ff ff ff    \tjne    1679 <decode_rle+0x255>\n    1766:\t83 84 24 3c 06 00 00 \taddl   $0x1,0x63c(%rsp)\n    176d:\t01 \n    176e:\td1 a4 24 34 06 00 00 \tshll   0x634(%rsp)\n    1775:\t8b 84 24 3c 06 00 00 \tmov    0x63c(%rsp),%eax\n    177c:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1781:\t89 c1                \tmov    %eax,%ecx\n    1783:\td3 e2                \tshl    %cl,%edx\n    1785:\t89 d0                \tmov    %edx,%eax\n    1787:\t2b 84 24 34 06 00 00 \tsub    0x634(%rsp),%eax\n    178e:\t89 84 24 ec 05 00 00 \tmov    %eax,0x5ec(%rsp)\n    1795:\t8b 84 24 ec 05 00 00 \tmov    0x5ec(%rsp),%eax\n    179c:\t83 c0 01             \tadd    $0x1,%eax\n    179f:\t89 84 24 e4 05 00 00 \tmov    %eax,0x5e4(%rsp)\n    17a6:\t8b 84 24 e4 05 00 00 \tmov    0x5e4(%rsp),%eax\n    17ad:\t83 e8 01             \tsub    $0x1,%eax\n    17b0:\t01 c0                \tadd    %eax,%eax\n    17b2:\t83 c8 01             \tor     $0x1,%eax\n    17b5:\t0f bd c0             \tbsr    %eax,%eax\n    17b8:\t83 f0 1f             \txor    $0x1f,%eax\n    17bb:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n    17c0:\t29 c2                \tsub    %eax,%edx\n    17c2:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    17c7:\t89 d6                \tmov    %edx,%esi\n    17c9:\t48 89 c7             \tmov    %rax,%rdi\n    17cc:\te8 61 e8 ff ff       \tcallq  32 <get_bits>\n    17d1:\t89 84 24 30 06 00 00 \tmov    %eax,0x630(%rsp)\n    17d8:\t83 bc 24 3c 06 00 00 \tcmpl   $0x16,0x63c(%rsp)\n    17df:\t16 \n    17e0:\t7f 10                \tjg     17f2 <decode_rle+0x3ce>\n    17e2:\t8b 84 24 30 06 00 00 \tmov    0x630(%rsp),%eax\n    17e9:\t3b 84 24 ec 05 00 00 \tcmp    0x5ec(%rsp),%eax\n    17f0:\t7e 0a                \tjle    17fc <decode_rle+0x3d8>\n    17f2:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n    17f7:\te9 9e 08 00 00       \tjmpq   209a <decode_rle+0xc76>\n    17fc:\t8b 84 24 30 06 00 00 \tmov    0x630(%rsp),%eax\n    1803:\t3b 84 24 ec 05 00 00 \tcmp    0x5ec(%rsp),%eax\n    180a:\t0f 85 3d ff ff ff    \tjne    174d <decode_rle+0x329>\n    1810:\t8b 84 24 00 06 00 00 \tmov    0x600(%rsp),%eax\n    1817:\t2b 84 24 38 06 00 00 \tsub    0x638(%rsp),%eax\n    181e:\t89 84 24 ec 05 00 00 \tmov    %eax,0x5ec(%rsp)\n    1825:\teb 0f                \tjmp    1836 <decode_rle+0x412>\n    1827:\t83 84 24 3c 06 00 00 \taddl   $0x1,0x63c(%rsp)\n    182e:\t01 \n    182f:\td1 a4 24 34 06 00 00 \tshll   0x634(%rsp)\n    1836:\t8b 84 24 3c 06 00 00 \tmov    0x63c(%rsp),%eax\n    183d:\tba 02 00 00 00       \tmov    $0x2,%edx\n    1842:\t89 c1                \tmov    %eax,%ecx\n    1844:\td3 e2                \tshl    %cl,%edx\n    1846:\t8b 84 24 34 06 00 00 \tmov    0x634(%rsp),%eax\n    184d:\t01 c0                \tadd    %eax,%eax\n    184f:\t29 c2                \tsub    %eax,%edx\n    1851:\t89 d0                \tmov    %edx,%eax\n    1853:\t2b 84 24 ec 05 00 00 \tsub    0x5ec(%rsp),%eax\n    185a:\t89 84 24 2c 06 00 00 \tmov    %eax,0x62c(%rsp)\n    1861:\t83 bc 24 2c 06 00 00 \tcmpl   $0x0,0x62c(%rsp)\n    1868:\t00 \n    1869:\t78 bc                \tjs     1827 <decode_rle+0x403>\n    186b:\tc7 84 24 28 06 00 00 \tmovl   $0x0,0x628(%rsp)\n    1872:\t00 00 00 00 \n    1876:\teb 7a                \tjmp    18f2 <decode_rle+0x4ce>\n    1878:\t8b 84 24 28 06 00 00 \tmov    0x628(%rsp),%eax\n    187f:\t48 98                \tcltq   \n    1881:\t0f b6 84 04 90 04 00 \tmovzbl 0x490(%rsp,%rax,1),%eax\n    1888:\t00 \n    1889:\t84 c0                \ttest   %al,%al\n    188b:\t75 5d                \tjne    18ea <decode_rle+0x4c6>\n    188d:\t8b 84 24 2c 06 00 00 \tmov    0x62c(%rsp),%eax\n    1894:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    1897:\t89 94 24 2c 06 00 00 \tmov    %edx,0x62c(%rsp)\n    189e:\t85 c0                \ttest   %eax,%eax\n    18a0:\t75 0f                \tjne    18b1 <decode_rle+0x48d>\n    18a2:\t83 84 24 3c 06 00 00 \taddl   $0x1,0x63c(%rsp)\n    18a9:\t01 \n    18aa:\td1 a4 24 34 06 00 00 \tshll   0x634(%rsp)\n    18b1:\t8b 84 24 3c 06 00 00 \tmov    0x63c(%rsp),%eax\n    18b8:\t89 c2                \tmov    %eax,%edx\n    18ba:\t8b 84 24 28 06 00 00 \tmov    0x628(%rsp),%eax\n    18c1:\t48 98                \tcltq   \n    18c3:\t88 94 04 90 04 00 00 \tmov    %dl,0x490(%rsp,%rax,1)\n    18ca:\t8b 84 24 34 06 00 00 \tmov    0x634(%rsp),%eax\n    18d1:\t8d 50 01             \tlea    0x1(%rax),%edx\n    18d4:\t89 94 24 34 06 00 00 \tmov    %edx,0x634(%rsp)\n    18db:\t89 c2                \tmov    %eax,%edx\n    18dd:\t8b 84 24 28 06 00 00 \tmov    0x628(%rsp),%eax\n    18e4:\t48 98                \tcltq   \n    18e6:\t89 54 84 50          \tmov    %edx,0x50(%rsp,%rax,4)\n    18ea:\t83 84 24 28 06 00 00 \taddl   $0x1,0x628(%rsp)\n    18f1:\t01 \n    18f2:\t8b 84 24 28 06 00 00 \tmov    0x628(%rsp),%eax\n    18f9:\t3b 84 24 00 06 00 00 \tcmp    0x600(%rsp),%eax\n    1900:\t0f 8c 72 ff ff ff    \tjl     1878 <decode_rle+0x454>\n    1906:\t8b 84 24 3c 06 00 00 \tmov    0x63c(%rsp),%eax\n    190d:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1912:\t89 c1                \tmov    %eax,%ecx\n    1914:\td3 e2                \tshl    %cl,%edx\n    1916:\t89 d0                \tmov    %edx,%eax\n    1918:\t39 84 24 34 06 00 00 \tcmp    %eax,0x634(%rsp)\n    191f:\t74 0a                \tje     192b <decode_rle+0x507>\n    1921:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n    1926:\te9 6f 07 00 00       \tjmpq   209a <decode_rle+0xc76>\n    192b:\t48 8d 8c 24 90 04 00 \tlea    0x490(%rsp),%rcx\n    1932:\t00 \n    1933:\t8b 94 24 00 06 00 00 \tmov    0x600(%rsp),%edx\n    193a:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    193f:\t48 83 ec 08          \tsub    $0x8,%rsp\n    1943:\t6a 00                \tpushq  $0x0\n    1945:\t6a 00                \tpushq  $0x0\n    1947:\t6a 00                \tpushq  $0x0\n    1949:\t6a 00                \tpushq  $0x0\n    194b:\t6a 04                \tpushq  $0x4\n    194d:\t6a 04                \tpushq  $0x4\n    194f:\t48 8d b4 24 88 00 00 \tlea    0x88(%rsp),%rsi\n    1956:\t00 \n    1957:\t56                   \tpush   %rsi\n    1958:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n    195e:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    1964:\tbe 09 00 00 00       \tmov    $0x9,%esi\n    1969:\t48 89 c7             \tmov    %rax,%rdi\n    196c:\te8 00 00 00 00       \tcallq  1971 <decode_rle+0x54d>\n    1971:\t48 83 c4 40          \tadd    $0x40,%rsp\n    1975:\t89 84 24 28 06 00 00 \tmov    %eax,0x628(%rsp)\n    197c:\t83 bc 24 28 06 00 00 \tcmpl   $0x0,0x628(%rsp)\n    1983:\t00 \n    1984:\t79 0c                \tjns    1992 <decode_rle+0x56e>\n    1986:\t8b 84 24 28 06 00 00 \tmov    0x628(%rsp),%eax\n    198d:\te9 08 07 00 00       \tjmpq   209a <decode_rle+0xc76>\n    1992:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    1997:\t48 89 84 24 10 06 00 \tmov    %rax,0x610(%rsp)\n    199e:\t00 \n    199f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    19a4:\t48 89 84 24 08 06 00 \tmov    %rax,0x608(%rsp)\n    19ab:\t00 \n    19ac:\t8b 84 24 20 06 00 00 \tmov    0x620(%rsp),%eax\n    19b3:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    19b6:\t89 94 24 20 06 00 00 \tmov    %edx,0x620(%rsp)\n    19bd:\t85 c0                \ttest   %eax,%eax\n    19bf:\t0f 8f 4e 05 00 00    \tjg     1f13 <decode_rle+0xaef>\n    19c5:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    19ca:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    19cf:\t48 89 94 24 d8 05 00 \tmov    %rdx,0x5d8(%rsp)\n    19d6:\t00 \n    19d7:\t48 89 84 24 d0 05 00 \tmov    %rax,0x5d0(%rsp)\n    19de:\t00 \n    19df:\tc7 84 24 cc 05 00 00 \tmovl   $0x9,0x5cc(%rsp)\n    19e6:\t09 00 00 00 \n    19ea:\tc7 84 24 c8 05 00 00 \tmovl   $0x3,0x5c8(%rsp)\n    19f1:\t03 00 00 00 \n    19f5:\t48 8b 84 24 d8 05 00 \tmov    0x5d8(%rsp),%rax\n    19fc:\t00 \n    19fd:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1a00:\t89 84 24 c4 05 00 00 \tmov    %eax,0x5c4(%rsp)\n    1a07:\t48 8b 84 24 d8 05 00 \tmov    0x5d8(%rsp),%rax\n    1a0e:\t00 \n    1a0f:\t8b 40 18             \tmov    0x18(%rax),%eax\n    1a12:\t89 84 24 c0 05 00 00 \tmov    %eax,0x5c0(%rsp)\n    1a19:\t48 8b 84 24 d8 05 00 \tmov    0x5d8(%rsp),%rax\n    1a20:\t00 \n    1a21:\t48 8b 00             \tmov    (%rax),%rax\n    1a24:\t8b 94 24 c4 05 00 00 \tmov    0x5c4(%rsp),%edx\n    1a2b:\tc1 ea 03             \tshr    $0x3,%edx\n    1a2e:\t89 d2                \tmov    %edx,%edx\n    1a30:\t48 01 d0             \tadd    %rdx,%rax\n    1a33:\t8b 00                \tmov    (%rax),%eax\n    1a35:\t89 84 24 bc 05 00 00 \tmov    %eax,0x5bc(%rsp)\n    1a3c:\t8b 84 24 bc 05 00 00 \tmov    0x5bc(%rsp),%eax\n    1a43:\tc1 e0 08             \tshl    $0x8,%eax\n    1a46:\t0f b7 d0             \tmovzwl %ax,%edx\n    1a49:\t8b 84 24 bc 05 00 00 \tmov    0x5bc(%rsp),%eax\n    1a50:\tc1 e8 08             \tshr    $0x8,%eax\n    1a53:\t0f b6 c0             \tmovzbl %al,%eax\n    1a56:\t09 d0                \tor     %edx,%eax\n    1a58:\tc1 e0 10             \tshl    $0x10,%eax\n    1a5b:\t89 c1                \tmov    %eax,%ecx\n    1a5d:\t8b 84 24 bc 05 00 00 \tmov    0x5bc(%rsp),%eax\n    1a64:\tc1 e8 10             \tshr    $0x10,%eax\n    1a67:\tc1 e0 08             \tshl    $0x8,%eax\n    1a6a:\t0f b7 c0             \tmovzwl %ax,%eax\n    1a6d:\t8b 94 24 bc 05 00 00 \tmov    0x5bc(%rsp),%edx\n    1a74:\tc1 ea 18             \tshr    $0x18,%edx\n    1a77:\t09 d0                \tor     %edx,%eax\n    1a79:\t09 c1                \tor     %eax,%ecx\n    1a7b:\t89 ca                \tmov    %ecx,%edx\n    1a7d:\t8b 84 24 c4 05 00 00 \tmov    0x5c4(%rsp),%eax\n    1a84:\t83 e0 07             \tand    $0x7,%eax\n    1a87:\t89 c1                \tmov    %eax,%ecx\n    1a89:\td3 e2                \tshl    %cl,%edx\n    1a8b:\t89 d0                \tmov    %edx,%eax\n    1a8d:\t89 84 24 b8 05 00 00 \tmov    %eax,0x5b8(%rsp)\n    1a94:\t8b 84 24 cc 05 00 00 \tmov    0x5cc(%rsp),%eax\n    1a9b:\t0f be d0             \tmovsbl %al,%edx\n    1a9e:\t8b 84 24 b8 05 00 00 \tmov    0x5b8(%rsp),%eax\n    1aa5:\t89 d6                \tmov    %edx,%esi\n    1aa7:\t89 c7                \tmov    %eax,%edi\n    1aa9:\te8 52 e5 ff ff       \tcallq  0 <NEG_USR32>\n    1aae:\t89 84 24 b4 05 00 00 \tmov    %eax,0x5b4(%rsp)\n    1ab5:\t8b 84 24 b4 05 00 00 \tmov    0x5b4(%rsp),%eax\n    1abc:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1ac3:\t00 \n    1ac4:\t48 8b 84 24 d0 05 00 \tmov    0x5d0(%rsp),%rax\n    1acb:\t00 \n    1acc:\t48 01 d0             \tadd    %rdx,%rax\n    1acf:\t0f b7 00             \tmovzwl (%rax),%eax\n    1ad2:\t98                   \tcwtl   \n    1ad3:\t89 84 24 b0 05 00 00 \tmov    %eax,0x5b0(%rsp)\n    1ada:\t8b 84 24 b4 05 00 00 \tmov    0x5b4(%rsp),%eax\n    1ae1:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1ae8:\t00 \n    1ae9:\t48 8b 84 24 d0 05 00 \tmov    0x5d0(%rsp),%rax\n    1af0:\t00 \n    1af1:\t48 01 d0             \tadd    %rdx,%rax\n    1af4:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n    1af8:\t98                   \tcwtl   \n    1af9:\t89 84 24 ac 05 00 00 \tmov    %eax,0x5ac(%rsp)\n    1b00:\t83 bc 24 c8 05 00 00 \tcmpl   $0x1,0x5c8(%rsp)\n    1b07:\t01 \n    1b08:\t0f 8e 76 02 00 00    \tjle    1d84 <decode_rle+0x960>\n    1b0e:\t83 bc 24 ac 05 00 00 \tcmpl   $0x0,0x5ac(%rsp)\n    1b15:\t00 \n    1b16:\t0f 89 68 02 00 00    \tjns    1d84 <decode_rle+0x960>\n    1b1c:\t8b 94 24 cc 05 00 00 \tmov    0x5cc(%rsp),%edx\n    1b23:\t8b 84 24 c4 05 00 00 \tmov    0x5c4(%rsp),%eax\n    1b2a:\t01 d0                \tadd    %edx,%eax\n    1b2c:\t39 84 24 c0 05 00 00 \tcmp    %eax,0x5c0(%rsp)\n    1b33:\t0f 46 84 24 c0 05 00 \tcmovbe 0x5c0(%rsp),%eax\n    1b3a:\t00 \n    1b3b:\t89 84 24 c4 05 00 00 \tmov    %eax,0x5c4(%rsp)\n    1b42:\t48 8b 84 24 d8 05 00 \tmov    0x5d8(%rsp),%rax\n    1b49:\t00 \n    1b4a:\t48 8b 00             \tmov    (%rax),%rax\n    1b4d:\t8b 94 24 c4 05 00 00 \tmov    0x5c4(%rsp),%edx\n    1b54:\tc1 ea 03             \tshr    $0x3,%edx\n    1b57:\t89 d2                \tmov    %edx,%edx\n    1b59:\t48 01 d0             \tadd    %rdx,%rax\n    1b5c:\t8b 00                \tmov    (%rax),%eax\n    1b5e:\t89 84 24 a8 05 00 00 \tmov    %eax,0x5a8(%rsp)\n    1b65:\t8b 84 24 a8 05 00 00 \tmov    0x5a8(%rsp),%eax\n    1b6c:\tc1 e0 08             \tshl    $0x8,%eax\n    1b6f:\t0f b7 d0             \tmovzwl %ax,%edx\n    1b72:\t8b 84 24 a8 05 00 00 \tmov    0x5a8(%rsp),%eax\n    1b79:\tc1 e8 08             \tshr    $0x8,%eax\n    1b7c:\t0f b6 c0             \tmovzbl %al,%eax\n    1b7f:\t09 d0                \tor     %edx,%eax\n    1b81:\tc1 e0 10             \tshl    $0x10,%eax\n    1b84:\t89 c1                \tmov    %eax,%ecx\n    1b86:\t8b 84 24 a8 05 00 00 \tmov    0x5a8(%rsp),%eax\n    1b8d:\tc1 e8 10             \tshr    $0x10,%eax\n    1b90:\tc1 e0 08             \tshl    $0x8,%eax\n    1b93:\t0f b7 c0             \tmovzwl %ax,%eax\n    1b96:\t8b 94 24 a8 05 00 00 \tmov    0x5a8(%rsp),%edx\n    1b9d:\tc1 ea 18             \tshr    $0x18,%edx\n    1ba0:\t09 d0                \tor     %edx,%eax\n    1ba2:\t09 c1                \tor     %eax,%ecx\n    1ba4:\t89 ca                \tmov    %ecx,%edx\n    1ba6:\t8b 84 24 c4 05 00 00 \tmov    0x5c4(%rsp),%eax\n    1bad:\t83 e0 07             \tand    $0x7,%eax\n    1bb0:\t89 c1                \tmov    %eax,%ecx\n    1bb2:\td3 e2                \tshl    %cl,%edx\n    1bb4:\t89 d0                \tmov    %edx,%eax\n    1bb6:\t89 84 24 b8 05 00 00 \tmov    %eax,0x5b8(%rsp)\n    1bbd:\t8b 84 24 ac 05 00 00 \tmov    0x5ac(%rsp),%eax\n    1bc4:\tf7 d8                \tneg    %eax\n    1bc6:\t89 84 24 a4 05 00 00 \tmov    %eax,0x5a4(%rsp)\n    1bcd:\t8b 84 24 a4 05 00 00 \tmov    0x5a4(%rsp),%eax\n    1bd4:\t0f be d0             \tmovsbl %al,%edx\n    1bd7:\t8b 84 24 b8 05 00 00 \tmov    0x5b8(%rsp),%eax\n    1bde:\t89 d6                \tmov    %edx,%esi\n    1be0:\t89 c7                \tmov    %eax,%edi\n    1be2:\te8 19 e4 ff ff       \tcallq  0 <NEG_USR32>\n    1be7:\t8b 94 24 b0 05 00 00 \tmov    0x5b0(%rsp),%edx\n    1bee:\t01 d0                \tadd    %edx,%eax\n    1bf0:\t89 84 24 b4 05 00 00 \tmov    %eax,0x5b4(%rsp)\n    1bf7:\t8b 84 24 b4 05 00 00 \tmov    0x5b4(%rsp),%eax\n    1bfe:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1c05:\t00 \n    1c06:\t48 8b 84 24 d0 05 00 \tmov    0x5d0(%rsp),%rax\n    1c0d:\t00 \n    1c0e:\t48 01 d0             \tadd    %rdx,%rax\n    1c11:\t0f b7 00             \tmovzwl (%rax),%eax\n    1c14:\t98                   \tcwtl   \n    1c15:\t89 84 24 b0 05 00 00 \tmov    %eax,0x5b0(%rsp)\n    1c1c:\t8b 84 24 b4 05 00 00 \tmov    0x5b4(%rsp),%eax\n    1c23:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1c2a:\t00 \n    1c2b:\t48 8b 84 24 d0 05 00 \tmov    0x5d0(%rsp),%rax\n    1c32:\t00 \n    1c33:\t48 01 d0             \tadd    %rdx,%rax\n    1c36:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n    1c3a:\t98                   \tcwtl   \n    1c3b:\t89 84 24 ac 05 00 00 \tmov    %eax,0x5ac(%rsp)\n    1c42:\t83 bc 24 c8 05 00 00 \tcmpl   $0x2,0x5c8(%rsp)\n    1c49:\t02 \n    1c4a:\t0f 8e 34 01 00 00    \tjle    1d84 <decode_rle+0x960>\n    1c50:\t83 bc 24 ac 05 00 00 \tcmpl   $0x0,0x5ac(%rsp)\n    1c57:\t00 \n    1c58:\t0f 89 26 01 00 00    \tjns    1d84 <decode_rle+0x960>\n    1c5e:\t8b 94 24 a4 05 00 00 \tmov    0x5a4(%rsp),%edx\n    1c65:\t8b 84 24 c4 05 00 00 \tmov    0x5c4(%rsp),%eax\n    1c6c:\t01 d0                \tadd    %edx,%eax\n    1c6e:\t39 84 24 c0 05 00 00 \tcmp    %eax,0x5c0(%rsp)\n    1c75:\t0f 46 84 24 c0 05 00 \tcmovbe 0x5c0(%rsp),%eax\n    1c7c:\t00 \n    1c7d:\t89 84 24 c4 05 00 00 \tmov    %eax,0x5c4(%rsp)\n    1c84:\t48 8b 84 24 d8 05 00 \tmov    0x5d8(%rsp),%rax\n    1c8b:\t00 \n    1c8c:\t48 8b 00             \tmov    (%rax),%rax\n    1c8f:\t8b 94 24 c4 05 00 00 \tmov    0x5c4(%rsp),%edx\n    1c96:\tc1 ea 03             \tshr    $0x3,%edx\n    1c99:\t89 d2                \tmov    %edx,%edx\n    1c9b:\t48 01 d0             \tadd    %rdx,%rax\n    1c9e:\t8b 00                \tmov    (%rax),%eax\n    1ca0:\t89 84 24 a0 05 00 00 \tmov    %eax,0x5a0(%rsp)\n    1ca7:\t8b 84 24 a0 05 00 00 \tmov    0x5a0(%rsp),%eax\n    1cae:\tc1 e0 08             \tshl    $0x8,%eax\n    1cb1:\t0f b7 d0             \tmovzwl %ax,%edx\n    1cb4:\t8b 84 24 a0 05 00 00 \tmov    0x5a0(%rsp),%eax\n    1cbb:\tc1 e8 08             \tshr    $0x8,%eax\n    1cbe:\t0f b6 c0             \tmovzbl %al,%eax\n    1cc1:\t09 d0                \tor     %edx,%eax\n    1cc3:\tc1 e0 10             \tshl    $0x10,%eax\n    1cc6:\t89 c1                \tmov    %eax,%ecx\n    1cc8:\t8b 84 24 a0 05 00 00 \tmov    0x5a0(%rsp),%eax\n    1ccf:\tc1 e8 10             \tshr    $0x10,%eax\n    1cd2:\tc1 e0 08             \tshl    $0x8,%eax\n    1cd5:\t0f b7 c0             \tmovzwl %ax,%eax\n    1cd8:\t8b 94 24 a0 05 00 00 \tmov    0x5a0(%rsp),%edx\n    1cdf:\tc1 ea 18             \tshr    $0x18,%edx\n    1ce2:\t09 d0                \tor     %edx,%eax\n    1ce4:\t09 c1                \tor     %eax,%ecx\n    1ce6:\t89 ca                \tmov    %ecx,%edx\n    1ce8:\t8b 84 24 c4 05 00 00 \tmov    0x5c4(%rsp),%eax\n    1cef:\t83 e0 07             \tand    $0x7,%eax\n    1cf2:\t89 c1                \tmov    %eax,%ecx\n    1cf4:\td3 e2                \tshl    %cl,%edx\n    1cf6:\t89 d0                \tmov    %edx,%eax\n    1cf8:\t89 84 24 b8 05 00 00 \tmov    %eax,0x5b8(%rsp)\n    1cff:\t8b 84 24 ac 05 00 00 \tmov    0x5ac(%rsp),%eax\n    1d06:\tf7 d8                \tneg    %eax\n    1d08:\t89 84 24 a4 05 00 00 \tmov    %eax,0x5a4(%rsp)\n    1d0f:\t8b 84 24 a4 05 00 00 \tmov    0x5a4(%rsp),%eax\n    1d16:\t0f be d0             \tmovsbl %al,%edx\n    1d19:\t8b 84 24 b8 05 00 00 \tmov    0x5b8(%rsp),%eax\n    1d20:\t89 d6                \tmov    %edx,%esi\n    1d22:\t89 c7                \tmov    %eax,%edi\n    1d24:\te8 d7 e2 ff ff       \tcallq  0 <NEG_USR32>\n    1d29:\t8b 94 24 b0 05 00 00 \tmov    0x5b0(%rsp),%edx\n    1d30:\t01 d0                \tadd    %edx,%eax\n    1d32:\t89 84 24 b4 05 00 00 \tmov    %eax,0x5b4(%rsp)\n    1d39:\t8b 84 24 b4 05 00 00 \tmov    0x5b4(%rsp),%eax\n    1d40:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1d47:\t00 \n    1d48:\t48 8b 84 24 d0 05 00 \tmov    0x5d0(%rsp),%rax\n    1d4f:\t00 \n    1d50:\t48 01 d0             \tadd    %rdx,%rax\n    1d53:\t0f b7 00             \tmovzwl (%rax),%eax\n    1d56:\t98                   \tcwtl   \n    1d57:\t89 84 24 b0 05 00 00 \tmov    %eax,0x5b0(%rsp)\n    1d5e:\t8b 84 24 b4 05 00 00 \tmov    0x5b4(%rsp),%eax\n    1d65:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1d6c:\t00 \n    1d6d:\t48 8b 84 24 d0 05 00 \tmov    0x5d0(%rsp),%rax\n    1d74:\t00 \n    1d75:\t48 01 d0             \tadd    %rdx,%rax\n    1d78:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n    1d7c:\t98                   \tcwtl   \n    1d7d:\t89 84 24 ac 05 00 00 \tmov    %eax,0x5ac(%rsp)\n    1d84:\t8b 84 24 ac 05 00 00 \tmov    0x5ac(%rsp),%eax\n    1d8b:\t89 c1                \tmov    %eax,%ecx\n    1d8d:\td3 a4 24 b8 05 00 00 \tshll   %cl,0x5b8(%rsp)\n    1d94:\t8b 94 24 ac 05 00 00 \tmov    0x5ac(%rsp),%edx\n    1d9b:\t8b 84 24 c4 05 00 00 \tmov    0x5c4(%rsp),%eax\n    1da2:\t01 d0                \tadd    %edx,%eax\n    1da4:\t39 84 24 c0 05 00 00 \tcmp    %eax,0x5c0(%rsp)\n    1dab:\t0f 46 84 24 c0 05 00 \tcmovbe 0x5c0(%rsp),%eax\n    1db2:\t00 \n    1db3:\t89 84 24 c4 05 00 00 \tmov    %eax,0x5c4(%rsp)\n    1dba:\t8b 94 24 c4 05 00 00 \tmov    0x5c4(%rsp),%edx\n    1dc1:\t48 8b 84 24 d8 05 00 \tmov    0x5d8(%rsp),%rax\n    1dc8:\t00 \n    1dc9:\t89 50 10             \tmov    %edx,0x10(%rax)\n    1dcc:\t8b 84 24 b0 05 00 00 \tmov    0x5b0(%rsp),%eax\n    1dd3:\t89 84 24 04 06 00 00 \tmov    %eax,0x604(%rsp)\n    1dda:\t81 bc 24 04 06 00 00 \tcmpl   $0xff,0x604(%rsp)\n    1de1:\tff 00 00 00 \n    1de5:\t7f 13                \tjg     1dfa <decode_rle+0x9d6>\n    1de7:\t8b 84 24 04 06 00 00 \tmov    0x604(%rsp),%eax\n    1dee:\t89 84 24 24 06 00 00 \tmov    %eax,0x624(%rsp)\n    1df5:\te9 19 01 00 00       \tjmpq   1f13 <decode_rle+0xaef>\n    1dfa:\t81 bc 24 04 06 00 00 \tcmpl   $0x10b,0x604(%rsp)\n    1e01:\t0b 01 00 00 \n    1e05:\t0f 8f f5 00 00 00    \tjg     1f00 <decode_rle+0xadc>\n    1e0b:\t81 ac 24 04 06 00 00 \tsubl   $0x100,0x604(%rsp)\n    1e12:\t00 01 00 00 \n    1e16:\t83 bc 24 04 06 00 00 \tcmpl   $0xb,0x604(%rsp)\n    1e1d:\t0b \n    1e1e:\t75 1c                \tjne    1e3c <decode_rle+0xa18>\n    1e20:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1e25:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    1e2a:\t48 89 c7             \tmov    %rax,%rdi\n    1e2d:\te8 00 e2 ff ff       \tcallq  32 <get_bits>\n    1e32:\t83 c0 0a             \tadd    $0xa,%eax\n    1e35:\t89 84 24 04 06 00 00 \tmov    %eax,0x604(%rsp)\n    1e3c:\t83 bc 24 04 06 00 00 \tcmpl   $0x0,0x604(%rsp)\n    1e43:\t00 \n    1e44:\t75 0d                \tjne    1e53 <decode_rle+0xa2f>\n    1e46:\tc7 84 24 20 06 00 00 \tmovl   $0x0,0x620(%rsp)\n    1e4d:\t00 00 00 00 \n    1e51:\teb 1d                \tjmp    1e70 <decode_rle+0xa4c>\n    1e53:\t8b 94 24 04 06 00 00 \tmov    0x604(%rsp),%edx\n    1e5a:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1e5f:\t89 d6                \tmov    %edx,%esi\n    1e61:\t48 89 c7             \tmov    %rax,%rdi\n    1e64:\te8 c9 e1 ff ff       \tcallq  32 <get_bits>\n    1e69:\t89 84 24 20 06 00 00 \tmov    %eax,0x620(%rsp)\n    1e70:\t8b 84 24 04 06 00 00 \tmov    0x604(%rsp),%eax\n    1e77:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1e7c:\t89 c1                \tmov    %eax,%ecx\n    1e7e:\td3 e2                \tshl    %cl,%edx\n    1e80:\t89 d0                \tmov    %edx,%eax\n    1e82:\t83 e8 01             \tsub    $0x1,%eax\n    1e85:\t01 84 24 20 06 00 00 \tadd    %eax,0x620(%rsp)\n    1e8c:\t83 bc 24 24 06 00 00 \tcmpl   $0xfffffffe,0x624(%rsp)\n    1e93:\tfe \n    1e94:\t75 7d                \tjne    1f13 <decode_rle+0xaef>\n    1e96:\t8b 84 24 20 06 00 00 \tmov    0x620(%rsp),%eax\n    1e9d:\t48 63 d0             \tmovslq %eax,%rdx\n    1ea0:\t8b 84 24 68 06 00 00 \tmov    0x668(%rsp),%eax\n    1ea7:\t48 63 c8             \tmovslq %eax,%rcx\n    1eaa:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    1eaf:\t48 01 c8             \tadd    %rcx,%rax\n    1eb2:\t48 2b 84 24 10 06 00 \tsub    0x610(%rsp),%rax\n    1eb9:\t00 \n    1eba:\t48 39 c2             \tcmp    %rax,%rdx\n    1ebd:\t48 0f 4e c2          \tcmovle %rdx,%rax\n    1ec1:\t89 84 24 e8 05 00 00 \tmov    %eax,0x5e8(%rsp)\n    1ec8:\t8b 84 24 e8 05 00 00 \tmov    0x5e8(%rsp),%eax\n    1ecf:\t29 84 24 20 06 00 00 \tsub    %eax,0x620(%rsp)\n    1ed6:\t8b 84 24 e8 05 00 00 \tmov    0x5e8(%rsp),%eax\n    1edd:\t48 98                \tcltq   \n    1edf:\t48 01 84 24 10 06 00 \tadd    %rax,0x610(%rsp)\n    1ee6:\t00 \n    1ee7:\t8b 94 24 e8 05 00 00 \tmov    0x5e8(%rsp),%edx\n    1eee:\t89 d0                \tmov    %edx,%eax\n    1ef0:\t01 c0                \tadd    %eax,%eax\n    1ef2:\t01 d0                \tadd    %edx,%eax\n    1ef4:\t48 98                \tcltq   \n    1ef6:\t48 01 84 24 08 06 00 \tadd    %rax,0x608(%rsp)\n    1efd:\t00 \n    1efe:\teb 13                \tjmp    1f13 <decode_rle+0xaef>\n    1f00:\tb8 0b 01 00 00       \tmov    $0x10b,%eax\n    1f05:\t2b 84 24 04 06 00 00 \tsub    0x604(%rsp),%eax\n    1f0c:\t89 84 24 24 06 00 00 \tmov    %eax,0x624(%rsp)\n    1f13:\t83 bc 24 24 06 00 00 \tcmpl   $0x0,0x624(%rsp)\n    1f1a:\t00 \n    1f1b:\t0f 88 96 00 00 00    \tjs     1fb7 <decode_rle+0xb93>\n    1f21:\t8b 84 24 24 06 00 00 \tmov    0x624(%rsp),%eax\n    1f28:\t89 c2                \tmov    %eax,%edx\n    1f2a:\t48 8b 84 24 10 06 00 \tmov    0x610(%rsp),%rax\n    1f31:\t00 \n    1f32:\t88 10                \tmov    %dl,(%rax)\n    1f34:\t8b 84 24 24 06 00 00 \tmov    0x624(%rsp),%eax\n    1f3b:\t48 98                \tcltq   \n    1f3d:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1f44:\t00 \n    1f45:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1f4a:\t48 01 d0             \tadd    %rdx,%rax\n    1f4d:\t8b 10                \tmov    (%rax),%edx\n    1f4f:\t48 8b 84 24 08 06 00 \tmov    0x608(%rsp),%rax\n    1f56:\t00 \n    1f57:\t48 83 c0 02          \tadd    $0x2,%rax\n    1f5b:\t88 10                \tmov    %dl,(%rax)\n    1f5d:\t8b 84 24 24 06 00 00 \tmov    0x624(%rsp),%eax\n    1f64:\t48 98                \tcltq   \n    1f66:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1f6d:\t00 \n    1f6e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1f73:\t48 01 d0             \tadd    %rdx,%rax\n    1f76:\t8b 00                \tmov    (%rax),%eax\n    1f78:\tc1 e8 08             \tshr    $0x8,%eax\n    1f7b:\t89 c2                \tmov    %eax,%edx\n    1f7d:\t48 8b 84 24 08 06 00 \tmov    0x608(%rsp),%rax\n    1f84:\t00 \n    1f85:\t48 83 c0 01          \tadd    $0x1,%rax\n    1f89:\t88 10                \tmov    %dl,(%rax)\n    1f8b:\t8b 84 24 24 06 00 00 \tmov    0x624(%rsp),%eax\n    1f92:\t48 98                \tcltq   \n    1f94:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1f9b:\t00 \n    1f9c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1fa1:\t48 01 d0             \tadd    %rdx,%rax\n    1fa4:\t8b 00                \tmov    (%rax),%eax\n    1fa6:\tc1 e8 10             \tshr    $0x10,%eax\n    1fa9:\t89 c2                \tmov    %eax,%edx\n    1fab:\t48 8b 84 24 08 06 00 \tmov    0x608(%rsp),%rax\n    1fb2:\t00 \n    1fb3:\t88 10                \tmov    %dl,(%rax)\n    1fb5:\teb 68                \tjmp    201f <decode_rle+0xbfb>\n    1fb7:\t83 bc 24 24 06 00 00 \tcmpl   $0xffffffff,0x624(%rsp)\n    1fbe:\tff \n    1fbf:\t75 5e                \tjne    201f <decode_rle+0xbfb>\n    1fc1:\t83 bc 24 1c 06 00 00 \tcmpl   $0x0,0x61c(%rsp)\n    1fc8:\t00 \n    1fc9:\t74 54                \tje     201f <decode_rle+0xbfb>\n    1fcb:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    1fcf:\t48 98                \tcltq   \n    1fd1:\t48 f7 d8             \tneg    %rax\n    1fd4:\t48 89 c2             \tmov    %rax,%rdx\n    1fd7:\t48 8b 84 24 10 06 00 \tmov    0x610(%rsp),%rax\n    1fde:\t00 \n    1fdf:\t48 01 d0             \tadd    %rdx,%rax\n    1fe2:\t0f b6 10             \tmovzbl (%rax),%edx\n    1fe5:\t48 8b 84 24 10 06 00 \tmov    0x610(%rsp),%rax\n    1fec:\t00 \n    1fed:\t88 10                \tmov    %dl,(%rax)\n    1fef:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    1ff3:\t48 98                \tcltq   \n    1ff5:\t48 f7 d8             \tneg    %rax\n    1ff8:\t48 89 c2             \tmov    %rax,%rdx\n    1ffb:\t48 8b 84 24 08 06 00 \tmov    0x608(%rsp),%rax\n    2002:\t00 \n    2003:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n    2007:\t48 8b 84 24 08 06 00 \tmov    0x608(%rsp),%rax\n    200e:\t00 \n    200f:\tba 03 00 00 00       \tmov    $0x3,%edx\n    2014:\t48 89 ce             \tmov    %rcx,%rsi\n    2017:\t48 89 c7             \tmov    %rax,%rdi\n    201a:\te8 00 00 00 00       \tcallq  201f <decode_rle+0xbfb>\n    201f:\t48 83 84 24 08 06 00 \taddq   $0x3,0x608(%rsp)\n    2026:\t00 03 \n    2028:\t48 83 84 24 10 06 00 \taddq   $0x1,0x610(%rsp)\n    202f:\t00 01 \n    2031:\t8b 84 24 68 06 00 00 \tmov    0x668(%rsp),%eax\n    2038:\t48 63 d0             \tmovslq %eax,%rdx\n    203b:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    2040:\t48 01 d0             \tadd    %rdx,%rax\n    2043:\t48 39 84 24 10 06 00 \tcmp    %rax,0x610(%rsp)\n    204a:\t00 \n    204b:\t0f 82 5b f9 ff ff    \tjb     19ac <decode_rle+0x588>\n    2051:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    2055:\t48 98                \tcltq   \n    2057:\t48 01 44 24 20       \tadd    %rax,0x20(%rsp)\n    205c:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    2060:\t48 98                \tcltq   \n    2062:\t48 01 44 24 10       \tadd    %rax,0x10(%rsp)\n    2067:\tc7 84 24 1c 06 00 00 \tmovl   $0x1,0x61c(%rsp)\n    206e:\t01 00 00 00 \n    2072:\t83 ac 24 70 06 00 00 \tsubl   $0x1,0x670(%rsp)\n    2079:\t01 \n    207a:\t83 bc 24 70 06 00 00 \tcmpl   $0x0,0x670(%rsp)\n    2081:\t00 \n    2082:\t0f 85 0a f9 ff ff    \tjne    1992 <decode_rle+0x56e>\n    2088:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    208d:\t48 89 c7             \tmov    %rax,%rdi\n    2090:\te8 00 00 00 00       \tcallq  2095 <decode_rle+0xc71>\n    2095:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    209a:\t48 81 c4 48 06 00 00 \tadd    $0x648,%rsp\n    20a1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall decode_rle(__int64 a1, _BYTE *a2, int a3, char *a4, int a5,\n                              __int64 a6, int a7, int a8, int a9, int a10,\n                              int a11) {\n  int v12;\n  int v13;\n  unsigned int v15;\n  int v17;\n  int v18;\n  unsigned int v19;\n  unsigned int v20;\n  unsigned int v21;\n  __int64 v22;\n  char *v24;\n  _BYTE *v27;\n  char v28[Number];\n  __int64 v29;\n  int v30[Number];\n  __int64 v31[Number];\n  char v32[Number];\n  int v33;\n  __int16 v34;\n  unsigned int v35;\n  int v36;\n  unsigned int v37;\n  int v38;\n  int v39;\n  unsigned int v40;\n  unsigned int v41;\n  unsigned int v42;\n  unsigned int v43;\n  unsigned int v44;\n  int v45;\n  int v46;\n  __int64 v47;\n  __int64 v48;\n  int v49;\n  int v50;\n  int v51;\n  int v52;\n  int v53;\n  int v54;\n  int v55;\n  unsigned int v56;\n  int v57;\n  void *dest;\n  _BYTE *v59;\n  int v60;\n  int v61;\n  int v62;\n  int v63;\n  int i;\n  int v65;\n  int v66;\n  int v67;\n  int v68;\n  int v69;\n  int v70;\n  v27 = a2;\n  v24 = a4;\n  v31[Number] = Number L;\n  v31[Number] = Number L;\n  memset(v32, Number, sizeof(v32));\n  v33 = Number;\n  v34 = Number;\n  v69 = Number;\n  v68 = Number;\n  v67 = Number;\n  v66 = Number;\n  v56 = Number - a7;\n  v63 = Number;\n  v62 = Number;\n  v61 = Number;\n  if (a7) {\n    if (a9 <= Number) {\n      v70 = a8;\n    } else {\n      v27 = &a2[a8 * a3];\n      v24 = &a4[a8 * a5];\n      v61 = Number;\n      v70 = a11 - a8;\n    }\n    goto LABEL_17;\n  }\n  v55 = get_bits(a1, Number);\n  v54 = get_bits(a1, Number);\n  v53 = get_bits(a1, Number) + Number;\n  v52 = get_bits(a1, Number) + Number;\n  if (a10 < v55 + v53 || a11 < v54 + v52)\n    return Number L;\n  v27 = &a2[v54 * a3 + v55];\n  v24 += Number * v55 + v54 * a5;\n  a10 = v53;\n  v70 = v52;\n  if (v54)\n    v61 = Number;\n  do {\n  LABEL_17:\n    while (v66--) {\n      v60 = get_bits(a1, Number);\n      if (v60 < Number - a7) {\n        if (v60 > Number) {\n          v12 = get_bits1(a1);\n          v60 = Number * v60 + v12 - Number;\n        }\n      } else {\n        v60 += Number - a7;\n      }\n      if (*((_BYTE *)v31 + v60))\n        return Number L;\n      *((_BYTE *)v31 + v60) = v69;\n      v13 = v67++;\n      v30[v60] = v13;\n      ++v68;\n    }\n    ++v69;\n    v67 *= Number;\n    v51 = (Number << v69) - v67;\n    v49 = v51 + Number;\n    _BitScanReverse(&v15, (Number * v51) | Number);\n    v66 = get_bits(a1, Number - (v15 ^ Number));\n    if (v69 > Number || v66 > v51)\n      return Number L;\n  } while (v66 != v51);\n  v51 = v56 - v68;\n  while (Number) {\n    v65 = (Number << v69) - Number * v67 - v51;\n    if (v65 >= Number)\n      break;\n    ++v69;\n    v67 *= Number;\n  }\n  for (i = Number; i < (int)v56; ++i) {\n    if (!*((_BYTE *)v31 + i)) {\n      if (!v65--) {\n        ++v69;\n        v67 *= Number;\n      }\n      *((_BYTE *)v31 + i) = v69;\n      v17 = v67++;\n      v30[i] = v17;\n    }\n  }\n  if (v67 != Number << v69)\n    return Number L;\n  i = ff_init_vlc_sparse(v28, Number L, v56, v31, Number L, Number L, v30,\n                         Number L, Number L, Number L, Number L, Number L,\n                         Number L);\n  if (i < Number)\n    return (unsigned int)i;\n  do {\n    v59 = v27;\n    dest = v24;\n    do {\n      v18 = v62--;\n      if (v18 <= Number) {\n        v48 = a1;\n        v47 = v29;\n        v46 = Number;\n        v45 = Number;\n        v44 = *(_DWORD *)(a1 + Number);\n        v43 = *(_DWORD *)(a1 + Number);\n        v42 = *(_DWORD *)((v44 >> Number) + *(_QWORD *)a1);\n        v41 = (HIBYTE(v42) | (unsigned __int16)(HIWORD(v42) << Number) |\n               (((unsigned __int16)((_WORD)v42 << Number) | BYTE1(v42))\n                << Number))\n              << (v44 & Number);\n        v40 = NEG_USR32(v41, Number);\n        v39 = *(__int16 *)(Number L * v40 + v47);\n        v38 = *(__int16 *)(Number L * v40 + v47 + Number);\n        if (v45 > Number && v38 < Number) {\n          v19 = v46 + v44;\n          if (v43 <= v46 + v44)\n            v19 = v43;\n          v44 = v19;\n          v37 = *(_DWORD *)((v19 >> Number) + *(_QWORD *)v48);\n          v41 = (HIBYTE(v37) | (unsigned __int16)(HIWORD(v37) << Number) |\n                 (((unsigned __int16)((_WORD)v37 << Number) | BYTE1(v37))\n                  << Number))\n                << (v19 & Number);\n          v36 = -v38;\n          v40 = v39 + NEG_USR32(v41, -(char)v38);\n          v39 = *(__int16 *)(Number L * v40 + v47);\n          v38 = *(__int16 *)(Number L * v40 + v47 + Number);\n          if (v45 > Number && v38 < Number) {\n            v20 = v36 + v44;\n            if (v43 <= v36 + v44)\n              v20 = v43;\n            v44 = v20;\n            v35 = *(_DWORD *)((v20 >> Number) + *(_QWORD *)v48);\n            v41 = (HIBYTE(v35) | (unsigned __int16)(HIWORD(v35) << Number) |\n                   (((unsigned __int16)((_WORD)v35 << Number) | BYTE1(v35))\n                    << Number))\n                  << (v20 & Number);\n            v36 = -v38;\n            v40 = v39 + NEG_USR32(v41, -(char)v38);\n            v39 = *(__int16 *)(Number L * v40 + v47);\n            v38 = *(__int16 *)(Number L * v40 + v47 + Number);\n          }\n        }\n        v41 <<= v38;\n        v21 = v38 + v44;\n        if (v43 <= v38 + v44)\n          v21 = v43;\n        v44 = v21;\n        *(_DWORD *)(v48 + Number) = v21;\n        v57 = v39;\n        if (v39 > Number) {\n          if (v57 > Number) {\n            v63 = Number - v57;\n          } else {\n            v57 -= Number;\n            if (v57 == Number)\n              v57 = get_bits(a1, Number) + Number;\n            if (v57)\n              v62 = get_bits(a1, v57);\n            else\n              v62 = Number;\n            v62 += (Number << v57) - Number;\n            if (v63 == Number) {\n              v22 = &v27[a10] - v59;\n              if (v62 <= v22)\n                LODWORD(v22) = v62;\n              v50 = v22;\n              v62 -= v22;\n              v59 += (int)v22;\n              dest = (char *)dest + Number * (int)v22;\n            }\n          }\n        } else {\n          v63 = v57;\n        }\n      }\n      if (v63 < Number) {\n        if (v63 == Number) {\n          if (v61) {\n            *v59 = v59[-a3];\n            memcpy(dest, (char *)dest - a5, Number);\n          }\n        }\n      } else {\n        *v59 = v63;\n        *((_BYTE *)dest + Number) = *(_DWORD *)(Number L * v63 + a6);\n        *((_BYTE *)dest + Number) = BYTE1(*(_DWORD *)(Number L * v63 + a6));\n        *(_BYTE *)dest = BYTE2(*(_DWORD *)(Number L * v63 + a6));\n      }\n      dest = (char *)dest + Number;\n      ++v59;\n    } while (v59 < &v27[a10]);\n    v27 += a3;\n    v24 += a5;\n    v61 = Number;\n    --v70;\n  } while (v70);\n  ff_free_vlc(v28);\n  return Number L;\n}", "code_t": "int __cdecl decode_rle(GetBitContext_0 *gb, uint8_t *pal_dst, int pal_stride,\n                       uint8_t *rgb_dst, int rgb_stride, uint32_t *pal,\n                       int keyframe, int kf_slipt, int slice, int w, int h) {\n  unsigned int v12;\n  int v13;\n  unsigned int v15;\n  int v17;\n  int v18;\n  unsigned int v19;\n  unsigned int v20;\n  unsigned int v21;\n  signed __int64 v22;\n  uint8_t *rgb_dsta;\n  uint8_t *pal_dsta;\n  VLC_0 <span class=\"supfact\">vlc</span>;\n  uint32_t codes[Number];\n  uint8_t bits[Number];\n  unsigned int v31;\n  int v32;\n  unsigned int v33;\n  int v34;\n  int v35;\n  uint32_t v36;\n  uint32_t a;\n  unsigned int v38;\n  unsigned int v39;\n  unsigned int v40;\n  int v41;\n  int v42;\n  int16_t(*v43)[Number];\n  GetBitContext_0 *v44;\n  int v45;\n  int skip;\n  int remaining_codes;\n  int cliph;\n  int clipw;\n  int y;\n  int x;\n  int alphabet_size;\n  int b;\n  uint8_t *rp;\n  uint8_t *pp;\n  int symbol;\n  int prev_avail;\n  int repeat;\n  int last_symbol;\n  int i;\n  int surplus_codes;\n  int current_codes;\n  int next_code;\n  int read_codes;\n  int current_length;\n  int ha;\n  pal_dsta = pal_dst;\n  rgb_dsta = rgb_dst;\n  *(_QWORD *)bits = Number L;\n  *(_QWORD *)&bits[Number] = Number L;\n  memset(&bits[Number], Number, Number);\n  *(_DWORD *)&bits[Number] = Number;\n  *(_WORD *)&bits[Number] = Number;\n  current_length = Number;\n  read_codes = Number;\n  next_code = Number;\n  current_codes = Number;\n  alphabet_size = Number - keyframe;\n  last_symbol = Number;\n  repeat = Number;\n  prev_avail = Number;\n  if (keyframe) {\n    if (slice <= Number) {\n      ha = kf_slipt;\n    } else {\n      pal_dsta = &pal_dst[kf_slipt * pal_stride];\n      rgb_dsta = &rgb_dst[kf_slipt * rgb_stride];\n      prev_avail = Number;\n      ha = h - kf_slipt;\n    }\n    goto LABEL_17;\n  }\n  x = get_bits(gb, Number);\n  y = get_bits(gb, Number);\n  clipw = get_bits(gb, Number) + Number;\n  cliph = get_bits(gb, Number) + Number;\n  if (w < x + clipw || h < y + cliph)\n    return Number;\n  pal_dsta = &pal_dst[y * pal_stride + x];\n  rgb_dsta += Number * x + y * rgb_stride;\n  w = clipw;\n  ha = cliph;\n  if (y)\n    prev_avail = Number;\n  do {\n  LABEL_17:\n    while (current_codes--) {\n      symbol = get_bits(gb, Number);\n      if (symbol < Number - keyframe) {\n        if (symbol > Number) {\n          v12 = get_bits1(gb);\n          symbol = Number * symbol + v12 - Number;\n        }\n      } else {\n        symbol += Number - keyframe;\n      }\n      if (bits[symbol])\n        return Number;\n      bits[symbol] = current_length;\n      v13 = next_code++;\n      codes[symbol] = v13;\n      ++read_codes;\n    }\n    ++current_length;\n    next_code *= Number;\n    remaining_codes = (Number << current_length) - next_code;\n    v45 = remaining_codes + Number;\n    _BitScanReverse(&v15, (Number * remaining_codes) | Number);\n    current_codes = get_bits(gb, Number - (v15 ^ Number));\n    if (current_length > Number || current_codes > remaining_codes)\n      return Number;\n  } while (current_codes != remaining_codes);\n  remaining_codes = alphabet_size - read_codes;\n  while (Number) {\n    surplus_codes =\n        (Number << current_length) - Number * next_code - remaining_codes;\n    if (surplus_codes >= Number)\n      break;\n    ++current_length;\n    next_code *= Number;\n  }\n  for (i = Number; i < alphabet_size; ++i) {\n    if (!bits[i]) {\n      if (!surplus_codes--) {\n        ++current_length;\n        next_code *= Number;\n      }\n      bits[i] = current_length;\n      v17 = next_code++;\n      codes[i] = v17;\n    }\n  }\n  if (next_code != Number << current_length)\n    return Number;\n  i = ff_init_vlc_sparse(&<span class=\"supfact\">vlc</span>, Number L,\n                         (unsigned int)alphabet_size, bits, Number L, Number L,\n                         codes, Number L, Number L, Number L, Number L,\n                         Number L, Number L);\n  if (i < Number)\n    return i;\n  do {\n    pp = pal_dsta;\n    rp = rgb_dsta;\n    do {\n      v18 = repeat--;\n      if (v18 <= Number) {\n        v44 = gb;\n        v43 = <span class=\"supfact\">vlc</span>.table;\n        v42 = Number;\n        v41 = Number;\n        v40 = gb->index;\n        v39 = gb->size_in_bits_plus8;\n        v38 = *(_DWORD *)&gb->buffer[v40 >> Number];\n        a = (HIBYTE(v38) | (unsigned __int16)(HIWORD(v38) << Number) |\n             (((unsigned __int16)((_WORD)v38 << Number) | BYTE1(v38))\n              << Number))\n            << (v40 & Number);\n        v36 = NEG_USR32(a, Number);\n        v35 = v43[v36][Number];\n        v34 = v43[v36][Number];\n        if (v41 > Number && v34 < Number) {\n          v19 = v42 + v40;\n          if (v39 <= v42 + v40)\n            v19 = v39;\n          v40 = v19;\n          v33 = *(_DWORD *)&v44->buffer[v19 >> Number];\n          a = (HIBYTE(v33) | (unsigned __int16)(HIWORD(v33) << Number) |\n               (((unsigned __int16)((_WORD)v33 << Number) | BYTE1(v33))\n                << Number))\n              << (v19 & Number);\n          v32 = -v34;\n          v36 = v35 + NEG_USR32(a, -(char)v34);\n          v35 = v43[v36][Number];\n          v34 = v43[v36][Number];\n          if (v41 > Number && v34 < Number) {\n            v20 = v32 + v40;\n            if (v39 <= v32 + v40)\n              v20 = v39;\n            v40 = v20;\n            v31 = *(_DWORD *)&v44->buffer[v20 >> Number];\n            a = (HIBYTE(v31) | (unsigned __int16)(HIWORD(v31) << Number) |\n                 (((unsigned __int16)((_WORD)v31 << Number) | BYTE1(v31))\n                  << Number))\n                << (v20 & Number);\n            v32 = -v34;\n            v36 = v35 + NEG_USR32(a, -(char)v34);\n            v35 = v43[v36][Number];\n            v34 = v43[v36][Number];\n          }\n        }\n        a <<= v34;\n        v21 = v34 + v40;\n        if (v39 <= v34 + v40)\n          v21 = v39;\n        v40 = v21;\n        v44->index = v21;\n        b = v35;\n        if (v35 > Number) {\n          if (b > Number) {\n            last_symbol = Number - b;\n          } else {\n            b -= Number;\n            if (b == Number)\n              b = get_bits(gb, Number) + Number;\n            if (b)\n              repeat = get_bits(gb, b);\n            else\n              repeat = Number;\n            repeat += (Number << b) - Number;\n            if (last_symbol == Number) {\n              v22 = &pal_dsta[w] - pp;\n              if (repeat <= v22)\n                LODWORD(v22) = repeat;\n              skip = v22;\n              repeat -= v22;\n              pp += (int)v22;\n              rp += Number * (int)v22;\n            }\n          }\n        } else {\n          last_symbol = b;\n        }\n      }\n      if (last_symbol < Number) {\n        if (last_symbol == Number) {\n          if (prev_avail) {\n            *pp = pp[-pal_stride];\n            memcpy(rp, &rp[-rgb_stride], Number);\n          }\n        }\n      } else {\n        *pp = last_symbol;\n        rp[Number] = pal[last_symbol];\n        rp[Number] = BYTE1(pal[last_symbol]);\n        *rp = BYTE2(pal[last_symbol]);\n      }\n      rp += Number;\n      ++pp;\n    } while (pp < &pal_dsta[w]);\n    pal_dsta += pal_stride;\n    rgb_dsta += rgb_stride;\n    prev_avail = Number;\n    --ha;\n  } while (ha);\n  ff_free_vlc(&<span class=\"supfact\">vlc</span>);\n  return Number;\n}", "var": [{"name": "v28", "type": "struct VLC_0 { int bits; PADDING (4); int16_t (*)[2] table; int table_size; int table_allocated; }", "pred_name": "vlc", "ref_name": "vlc", "ref_type": "struct VLC_0 { int bits; PADDING (4); int16_t (*)[2] table; int table_size; int table_allocated; }"}], "body_in_train": true}, {"repo_owner": "ob-encoder", "repo_name": "libav-obe", "path": "ob-encoder/libav-obe/8346c6ec106d48c394d52a257d821897a921241c11b330419cf38ff3d03c5f20", "path_in_repo": "ob-encoder/libav-obe//libavcodec/mlpdec.o", "objdump": "0000000000000ded <read_major_sync>:\n     ded:\t48 83 ec 78          \tsub    $0x78,%rsp\n     df1:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     df6:\t48 89 34 24          \tmov    %rsi,(%rsp)\n     dfa:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     dff:\t48 8b 00             \tmov    (%rax),%rax\n     e02:\t48 8b 14 24          \tmov    (%rsp),%rdx\n     e06:\t48 8d 4c 24 10       \tlea    0x10(%rsp),%rcx\n     e0b:\t48 89 ce             \tmov    %rcx,%rsi\n     e0e:\t48 89 c7             \tmov    %rax,%rdi\n     e11:\te8 00 00 00 00       \tcallq  e16 <read_major_sync+0x29>\n     e16:\t89 44 24 68          \tmov    %eax,0x68(%rsp)\n     e1a:\t83 7c 24 68 00       \tcmpl   $0x0,0x68(%rsp)\n     e1f:\t74 09                \tje     e2a <read_major_sync+0x3d>\n     e21:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n     e25:\te9 d3 03 00 00       \tjmpq   11fd <read_major_sync+0x410>\n     e2a:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n     e2e:\t85 c0                \ttest   %eax,%eax\n     e30:\t75 29                \tjne    e5b <read_major_sync+0x6e>\n     e32:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     e37:\t48 8b 00             \tmov    (%rax),%rax\n     e3a:\tba 00 00 00 00       \tmov    $0x0,%edx\n     e3f:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     e44:\t48 89 c7             \tmov    %rax,%rdi\n     e47:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e4c:\te8 00 00 00 00       \tcallq  e51 <read_major_sync+0x64>\n     e51:\tb8 49 4e 44 c1       \tmov    $0xc1444e49,%eax\n     e56:\te9 a2 03 00 00       \tjmpq   11fd <read_major_sync+0x410>\n     e5b:\t8b 54 24 18          \tmov    0x18(%rsp),%edx\n     e5f:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n     e63:\t39 c2                \tcmp    %eax,%edx\n     e65:\t7e 29                \tjle    e90 <read_major_sync+0xa3>\n     e67:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     e6c:\t48 8b 00             \tmov    (%rax),%rax\n     e6f:\tba 00 00 00 00       \tmov    $0x0,%edx\n     e74:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     e79:\t48 89 c7             \tmov    %rax,%rdi\n     e7c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e81:\te8 00 00 00 00       \tcallq  e86 <read_major_sync+0x99>\n     e86:\tb8 49 4e 44 c1       \tmov    $0xc1444e49,%eax\n     e8b:\te9 6d 03 00 00       \tjmpq   11fd <read_major_sync+0x410>\n     e90:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n     e94:\t85 c0                \ttest   %eax,%eax\n     e96:\t74 35                \tje     ecd <read_major_sync+0xe0>\n     e98:\t8b 54 24 20          \tmov    0x20(%rsp),%edx\n     e9c:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     ea0:\t39 c2                \tcmp    %eax,%edx\n     ea2:\t74 29                \tje     ecd <read_major_sync+0xe0>\n     ea4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     ea9:\t48 8b 00             \tmov    (%rax),%rax\n     eac:\tba 00 00 00 00       \tmov    $0x0,%edx\n     eb1:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     eb6:\t48 89 c7             \tmov    %rax,%rdi\n     eb9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ebe:\te8 00 00 00 00       \tcallq  ec3 <read_major_sync+0xd6>\n     ec3:\tb8 49 4e 44 c1       \tmov    $0xc1444e49,%eax\n     ec8:\te9 30 03 00 00       \tjmpq   11fd <read_major_sync+0x410>\n     ecd:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     ed1:\t85 c0                \ttest   %eax,%eax\n     ed3:\t75 29                \tjne    efe <read_major_sync+0x111>\n     ed5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     eda:\t48 8b 00             \tmov    (%rax),%rax\n     edd:\tba 00 00 00 00       \tmov    $0x0,%edx\n     ee2:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     ee7:\t48 89 c7             \tmov    %rax,%rdi\n     eea:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     eef:\te8 00 00 00 00       \tcallq  ef4 <read_major_sync+0x107>\n     ef4:\tb8 49 4e 44 c1       \tmov    $0xc1444e49,%eax\n     ef9:\te9 ff 02 00 00       \tjmpq   11fd <read_major_sync+0x410>\n     efe:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     f02:\t3d 00 ee 02 00       \tcmp    $0x2ee00,%eax\n     f07:\t7e 35                \tjle    f3e <read_major_sync+0x151>\n     f09:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n     f0d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f12:\t48 8b 00             \tmov    (%rax),%rax\n     f15:\t41 b8 00 ee 02 00    \tmov    $0x2ee00,%r8d\n     f1b:\t89 d1                \tmov    %edx,%ecx\n     f1d:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f22:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     f27:\t48 89 c7             \tmov    %rax,%rdi\n     f2a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f2f:\te8 00 00 00 00       \tcallq  f34 <read_major_sync+0x147>\n     f34:\tb8 49 4e 44 c1       \tmov    $0xc1444e49,%eax\n     f39:\te9 bf 02 00 00       \tjmpq   11fd <read_major_sync+0x410>\n     f3e:\t8b 44 24 48          \tmov    0x48(%rsp),%eax\n     f42:\t3d a0 00 00 00       \tcmp    $0xa0,%eax\n     f47:\t7e 35                \tjle    f7e <read_major_sync+0x191>\n     f49:\t8b 54 24 48          \tmov    0x48(%rsp),%edx\n     f4d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f52:\t48 8b 00             \tmov    (%rax),%rax\n     f55:\t41 b8 a0 00 00 00    \tmov    $0xa0,%r8d\n     f5b:\t89 d1                \tmov    %edx,%ecx\n     f5d:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f62:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     f67:\t48 89 c7             \tmov    %rax,%rdi\n     f6a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f6f:\te8 00 00 00 00       \tcallq  f74 <read_major_sync+0x187>\n     f74:\tb8 49 4e 44 c1       \tmov    $0xc1444e49,%eax\n     f79:\te9 7f 02 00 00       \tjmpq   11fd <read_major_sync+0x410>\n     f7e:\t8b 44 24 4c          \tmov    0x4c(%rsp),%eax\n     f82:\t3d 00 01 00 00       \tcmp    $0x100,%eax\n     f87:\t7e 35                \tjle    fbe <read_major_sync+0x1d1>\n     f89:\t8b 54 24 4c          \tmov    0x4c(%rsp),%edx\n     f8d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f92:\t48 8b 00             \tmov    (%rax),%rax\n     f95:\t41 b8 00 01 00 00    \tmov    $0x100,%r8d\n     f9b:\t89 d1                \tmov    %edx,%ecx\n     f9d:\tba 00 00 00 00       \tmov    $0x0,%edx\n     fa2:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     fa7:\t48 89 c7             \tmov    %rax,%rdi\n     faa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     faf:\te8 00 00 00 00       \tcallq  fb4 <read_major_sync+0x1c7>\n     fb4:\tb8 49 4e 44 c1       \tmov    $0xc1444e49,%eax\n     fb9:\te9 3f 02 00 00       \tjmpq   11fd <read_major_sync+0x410>\n     fbe:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n     fc2:\t85 c0                \ttest   %eax,%eax\n     fc4:\t75 0a                \tjne    fd0 <read_major_sync+0x1e3>\n     fc6:\tb8 49 4e 44 c1       \tmov    $0xc1444e49,%eax\n     fcb:\te9 2d 02 00 00       \tjmpq   11fd <read_major_sync+0x410>\n     fd0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     fd5:\t48 8b 00             \tmov    (%rax),%rax\n     fd8:\t8b 40 38             \tmov    0x38(%rax),%eax\n     fdb:\t3d 1d 50 01 00       \tcmp    $0x1501d,%eax\n     fe0:\t75 32                \tjne    1014 <read_major_sync+0x227>\n     fe2:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n     fe6:\t83 f8 02             \tcmp    $0x2,%eax\n     fe9:\t7e 29                \tjle    1014 <read_major_sync+0x227>\n     feb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     ff0:\t48 8b 00             \tmov    (%rax),%rax\n     ff3:\tba 00 00 00 00       \tmov    $0x0,%edx\n     ff8:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     ffd:\t48 89 c7             \tmov    %rax,%rdi\n    1000:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1005:\te8 00 00 00 00       \tcallq  100a <read_major_sync+0x21d>\n    100a:\tb8 49 4e 44 c1       \tmov    $0xc1444e49,%eax\n    100f:\te9 e9 01 00 00       \tjmpq   11fd <read_major_sync+0x410>\n    1014:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    1018:\t83 f8 03             \tcmp    $0x3,%eax\n    101b:\t7e 28                \tjle    1045 <read_major_sync+0x258>\n    101d:\t8b 54 24 58          \tmov    0x58(%rsp),%edx\n    1021:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1026:\t48 8b 00             \tmov    (%rax),%rax\n    1029:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    102e:\t48 89 c7             \tmov    %rax,%rdi\n    1031:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1036:\te8 00 00 00 00       \tcallq  103b <read_major_sync+0x24e>\n    103b:\tb8 50 41 57 c5       \tmov    $0xc5574150,%eax\n    1040:\te9 b8 01 00 00       \tjmpq   11fd <read_major_sync+0x410>\n    1045:\t8b 54 24 48          \tmov    0x48(%rsp),%edx\n    1049:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    104e:\t89 50 10             \tmov    %edx,0x10(%rax)\n    1051:\t8b 54 24 4c          \tmov    0x4c(%rsp),%edx\n    1055:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    105a:\t89 50 14             \tmov    %edx,0x14(%rax)\n    105d:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    1061:\t89 c2                \tmov    %eax,%edx\n    1063:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1068:\t88 50 0d             \tmov    %dl,0xd(%rax)\n    106b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1070:\t0f b6 40 0d          \tmovzbl 0xd(%rax),%eax\n    1074:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    1077:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    107c:\t88 50 0e             \tmov    %dl,0xe(%rax)\n    107f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1084:\t48 8b 00             \tmov    (%rax),%rax\n    1087:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n    108b:\t89 90 d0 01 00 00    \tmov    %edx,0x1d0(%rax)\n    1091:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1096:\t48 8b 00             \tmov    (%rax),%rax\n    1099:\t8b 54 24 48          \tmov    0x48(%rsp),%edx\n    109d:\t89 90 dc 01 00 00    \tmov    %edx,0x1dc(%rax)\n    10a3:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    10a8:\t48 8b 00             \tmov    (%rax),%rax\n    10ab:\t8b 54 24 14          \tmov    0x14(%rsp),%edx\n    10af:\t89 90 74 03 00 00    \tmov    %edx,0x374(%rax)\n    10b5:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    10b9:\t83 f8 10             \tcmp    $0x10,%eax\n    10bc:\t7e 14                \tjle    10d2 <read_major_sync+0x2e5>\n    10be:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    10c3:\t48 8b 00             \tmov    (%rax),%rax\n    10c6:\tc7 80 d8 01 00 00 02 \tmovl   $0x2,0x1d8(%rax)\n    10cd:\t00 00 00 \n    10d0:\teb 12                \tjmp    10e4 <read_major_sync+0x2f7>\n    10d2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    10d7:\t48 8b 00             \tmov    (%rax),%rax\n    10da:\tc7 80 d8 01 00 00 01 \tmovl   $0x1,0x1d8(%rax)\n    10e1:\t00 00 00 \n    10e4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    10e9:\tc6 40 0c 01          \tmovb   $0x1,0xc(%rax)\n    10ed:\tc7 44 24 6c 00 00 00 \tmovl   $0x0,0x6c(%rsp)\n    10f4:\t00 \n    10f5:\teb 21                \tjmp    1118 <read_major_sync+0x32b>\n    10f7:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n    10fc:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    1100:\t48 98                \tcltq   \n    1102:\t48 69 c0 f8 05 00 00 \timul   $0x5f8,%rax,%rax\n    1109:\t48 01 d0             \tadd    %rdx,%rax\n    110c:\t48 83 c0 18          \tadd    $0x18,%rax\n    1110:\tc6 00 00             \tmovb   $0x0,(%rax)\n    1113:\t83 44 24 6c 01       \taddl   $0x1,0x6c(%rsp)\n    1118:\t83 7c 24 6c 02       \tcmpl   $0x2,0x6c(%rsp)\n    111d:\t7e d8                \tjle    10f7 <read_major_sync+0x30a>\n    111f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1124:\t48 8b 00             \tmov    (%rax),%rax\n    1127:\t8b 40 38             \tmov    0x38(%rax),%eax\n    112a:\t3d 1d 50 01 00       \tcmp    $0x1501d,%eax\n    112f:\t75 49                \tjne    117a <read_major_sync+0x38d>\n    1131:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    1135:\t83 f8 01             \tcmp    $0x1,%eax\n    1138:\t0f 9f c0             \tsetg   %al\n    113b:\t0f b6 c0             \tmovzbl %al,%eax\n    113e:\t89 44 24 6c          \tmov    %eax,0x6c(%rsp)\n    1142:\t83 7c 24 6c 00       \tcmpl   $0x0,0x6c(%rsp)\n    1147:\t74 0d                \tje     1156 <read_major_sync+0x369>\n    1149:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    114e:\t48 c7 40 28 03 00 00 \tmovq   $0x3,0x28(%rax)\n    1155:\t00 \n    1156:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    115b:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    1160:\t8b 54 24 6c          \tmov    0x6c(%rsp),%edx\n    1164:\t48 63 d2             \tmovslq %edx,%rdx\n    1167:\t48 69 d2 f8 05 00 00 \timul   $0x5f8,%rdx,%rdx\n    116e:\t48 01 ca             \tadd    %rcx,%rdx\n    1171:\t48 83 c2 28          \tadd    $0x28,%rdx\n    1175:\t48 89 02             \tmov    %rax,(%rdx)\n    1178:\teb 7e                \tjmp    11f8 <read_major_sync+0x40b>\n    117a:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    117e:\t83 f8 01             \tcmp    $0x1,%eax\n    1181:\t0f 9f c0             \tsetg   %al\n    1184:\t0f b6 c0             \tmovzbl %al,%eax\n    1187:\t89 44 24 6c          \tmov    %eax,0x6c(%rsp)\n    118b:\t83 7c 24 6c 00       \tcmpl   $0x0,0x6c(%rsp)\n    1190:\t74 0d                \tje     119f <read_major_sync+0x3b2>\n    1192:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1197:\t48 c7 40 28 03 00 00 \tmovq   $0x3,0x28(%rax)\n    119e:\t00 \n    119f:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    11a3:\t83 f8 02             \tcmp    $0x2,%eax\n    11a6:\t7e 2e                \tjle    11d6 <read_major_sync+0x3e9>\n    11a8:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    11ad:\t48 85 c0             \ttest   %rax,%rax\n    11b0:\t74 13                \tje     11c5 <read_major_sync+0x3d8>\n    11b2:\t48 8b 54 24 40       \tmov    0x40(%rsp),%rdx\n    11b7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    11bc:\t48 89 90 18 0c 00 00 \tmov    %rdx,0xc18(%rax)\n    11c3:\teb 11                \tjmp    11d6 <read_major_sync+0x3e9>\n    11c5:\t48 8b 54 24 38       \tmov    0x38(%rsp),%rdx\n    11ca:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    11cf:\t48 89 90 18 0c 00 00 \tmov    %rdx,0xc18(%rax)\n    11d6:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    11db:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    11e0:\t8b 54 24 6c          \tmov    0x6c(%rsp),%edx\n    11e4:\t48 63 d2             \tmovslq %edx,%rdx\n    11e7:\t48 69 d2 f8 05 00 00 \timul   $0x5f8,%rdx,%rdx\n    11ee:\t48 01 ca             \tadd    %rcx,%rdx\n    11f1:\t48 83 c2 28          \tadd    $0x28,%rdx\n    11f5:\t48 89 02             \tmov    %rax,(%rdx)\n    11f8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    11fd:\t48 83 c4 78          \tadd    $0x78,%rsp\n    1201:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_major_sync(_QWORD *a1, __int64 a2) {\n  __int64 result;\n  char v3[Number];\n  int v4;\n  int v5;\n  unsigned int v6;\n  int v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  unsigned int v11;\n  unsigned int v12;\n  int v13;\n  unsigned int v14;\n  int i;\n  v14 = ff_mlp_read_major_sync(*a1, v3, a2);\n  if (v14)\n    return v14;\n  if (v4) {\n    if (v5 <= v4) {\n      if (!v7 || v7 == v6) {\n        if (v6) {\n          if ((int)v6 <= Number) {\n            if ((int)v11 <= Number) {\n              if ((int)v12 <= Number) {\n                if (v13) {\n                  if (*(_DWORD *)(*a1 + Number L) == Number && v13 > Number) {\n                    av_log(*a1, Number L, String);\n                    result = Number L;\n                  } else if (v13 <= Number) {\n                    *((_DWORD *)a1 + Number) = v11;\n                    *((_DWORD *)a1 + Number) = v12;\n                    *((_BYTE *)a1 + Number) = v13;\n                    *((_BYTE *)a1 + Number) = *((_BYTE *)a1 + Number) - Number;\n                    *(_DWORD *)(*a1 + Number L) = v6;\n                    *(_DWORD *)(*a1 + Number L) = v11;\n                    *(_DWORD *)(*a1 + Number L) = v4;\n                    if (v4 <= Number)\n                      *(_DWORD *)(*a1 + Number L) = Number;\n                    else\n                      *(_DWORD *)(*a1 + Number L) = Number;\n                    *((_BYTE *)a1 + Number) = Number;\n                    for (i = Number; i <= Number; ++i)\n                      LOBYTE(a1[Number * i + Number]) = Number;\n                    if (*(_DWORD *)(*a1 + Number L) == Number) {\n                      i = v13 > Number;\n                      if (v13 > Number)\n                        a1[Number] = Number L;\n                      a1[Number * i + Number] = v8;\n                    } else {\n                      i = v13 > Number;\n                      if (v13 > Number)\n                        a1[Number] = Number L;\n                      if (v13 > Number) {\n                        if (v10)\n                          a1[Number] = v10;\n                        else\n                          a1[Number] = v9;\n                      }\n                      a1[Number * i + Number] = v9;\n                    }\n                    result = Number L;\n                  } else {\n                    avpriv_request_sample(*a1, String, (unsigned int)v13);\n                    result = Number L;\n                  }\n                } else {\n                  result = Number L;\n                }\n              } else {\n                av_log(*a1, Number L, String, v12, Number L);\n                result = Number L;\n              }\n            } else {\n              av_log(*a1, Number L, String, v11, Number L);\n              result = Number L;\n            }\n          } else {\n            av_log(*a1, Number L, String, v6, Number L);\n            result = Number L;\n          }\n        } else {\n          av_log(*a1, Number L, String);\n          result = Number L;\n        }\n      } else {\n        av_log(*a1, Number L, String);\n        result = Number L;\n      }\n    } else {\n      av_log(*a1, Number L, String);\n      result = Number L;\n    }\n  } else {\n    av_log(*a1, Number L, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl read_major_sync(MLPDecodeContext_0 *m, GetBitContext_0 *gb) {\n  int result;\n  MLPHeaderInfo_0 <span class=\"supfact\">mh</span>;\n  int ret;\n  int substr;\n  ret = ff_mlp_read_major_sync(m->avctx, &<span class=\"supfact\">mh</span>, gb);\n  if (ret)\n    return ret;\n  if (<span class=\"supfact\">mh</span>.group1_bits) {\n    if (<span class=\"supfact\">mh</span>.group2_bits <= <span class=\"supfact\">mh</span>.group1_bits) {\n      if (!<span class=\"supfact\">mh</span>.group2_samplerate ||\n          <span class=\"supfact\">mh</span>.group2_samplerate ==\n              <span class=\"supfact\">mh</span>.group1_samplerate) {\n        if (<span class=\"supfact\">mh</span>.group1_samplerate) {\n          if (<span class=\"supfact\">mh</span>.group1_samplerate <= Number) {\n            if (<span class=\"supfact\">mh</span>.access_unit_size <= Number) {\n              if (<span class=\"supfact\">mh</span>.access_unit_size_pow2 <= Number) {\n                if (<span class=\"supfact\">mh</span>.num_substreams) {\n                  if (m->avctx->codec_id == AV_CODEC_ID_MLP &&\n                      <span class=\"supfact\">mh</span>.num_substreams > Number) {\n                    av_log(m->avctx, Number L, String);\n                    result = Number;\n                  } else if (<span class=\"supfact\">mh</span>.num_substreams <= Number) {\n                    m->access_unit_size = <span class=\"supfact\">mh</span>.access_unit_size;\n                    m->access_unit_size_pow2 =\n                        <span class=\"supfact\">mh</span>.access_unit_size_pow2;\n                    m->num_substreams = <span class=\"supfact\">mh</span>.num_substreams;\n                    m->max_decoded_substream = m->num_substreams - Number;\n                    m->avctx->sample_rate =\n                        <span class=\"supfact\">mh</span>.group1_samplerate;\n                    m->avctx->frame_size = <span class=\"supfact\">mh</span>.access_unit_size;\n                    m->avctx->bits_per_raw_sample =\n                        <span class=\"supfact\">mh</span>.group1_bits;\n                    if (<span class=\"supfact\">mh</span>.group1_bits <= Number)\n                      m->avctx->sample_fmt = AV_SAMPLE_FMT_S16;\n                    else\n                      m->avctx->sample_fmt = AV_SAMPLE_FMT_S32;\n                    m->params_valid = Number;\n                    for (substr = Number; substr <= Number; ++substr)\n                      m->substream[substr].restart_seen = Number;\n                    if (m->avctx->codec_id == AV_CODEC_ID_MLP) {\n                      substr = <span class=\"supfact\">mh</span>.num_substreams > Number;\n                      if (<span class=\"supfact\">mh</span>.num_substreams > Number)\n                        m->substream[Number].ch_layout = Number L;\n                      m->substream[substr].ch_layout =\n                          <span class=\"supfact\">mh</span>.channel_layout_mlp;\n                    } else {\n                      substr = <span class=\"supfact\">mh</span>.num_substreams > Number;\n                      if (<span class=\"supfact\">mh</span>.num_substreams > Number)\n                        m->substream[Number].ch_layout = Number L;\n                      if (<span class=\"supfact\">mh</span>.num_substreams > Number) {\n                        if (<span class=\"supfact\">mh</span>.channel_layout_thd_stream2)\n                          m->substream[Number].ch_layout =\n                              <span class=\"supfact\">mh</span>.channel_layout_thd_stream2;\n                        else\n                          m->substream[Number].ch_layout =\n                              <span class=\"supfact\">mh</span>.channel_layout_thd_stream1;\n                      }\n                      m->substream[substr].ch_layout =\n                          <span class=\"supfact\">mh</span>.channel_layout_thd_stream1;\n                    }\n                    result = Number;\n                  } else {\n                    avpriv_request_sample(\n                        m->avctx, String,\n                        (unsigned int)<span class=\"supfact\">mh</span>.num_substreams);\n                    result = Number;\n                  }\n                } else {\n                  result = Number;\n                }\n              } else {\n                av_log(m->avctx, Number L, String,\n                       (unsigned int)<span class=\"supfact\">mh</span>.access_unit_size_pow2,\n                       Number L);\n                result = Number;\n              }\n            } else {\n              av_log(m->avctx, Number L, String,\n                     (unsigned int)<span class=\"supfact\">mh</span>.access_unit_size,\n                     Number L);\n              result = Number;\n            }\n          } else {\n            av_log(m->avctx, Number L, String,\n                   (unsigned int)<span class=\"supfact\">mh</span>.group1_samplerate,\n                   Number L);\n            result = Number;\n          }\n        } else {\n          av_log(m->avctx, Number L, String);\n          result = Number;\n        }\n      } else {\n        av_log(m->avctx, Number L, String);\n        result = Number;\n      }\n    } else {\n      av_log(m->avctx, Number L, String);\n      result = Number;\n    }\n  } else {\n    av_log(m->avctx, Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "struct MLPHeaderInfo_0 { int stream_type; int group1_bits; int group2_bits; int group1_samplerate; int group2_samplerate; int channels_mlp; int channels_thd_stream1; int channels_thd_stream2; int access_unit_size; int access_unit_size_pow2; int is_vbr; int peak_bitrate; int num_substreams; }", "pred_name": "mh", "ref_name": "mh", "ref_type": "struct MLPHeaderInfo_0 { int stream_type; int group1_bits; int group2_bits; int group1_samplerate; int group2_samplerate; int channels_mlp; int channels_thd_stream1; int channels_thd_stream2; uint64_t channel_layout_mlp; uint64_t channel_layout_thd_stream1; uint64_t channel_layout_thd_stream2; int access_unit_size; int access_unit_size_pow2; int is_vbr; int peak_bitrate; int num_substreams; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "allinurl", "repo_name": "dwm", "path": "allinurl/dwm/3839b87a1610eefa38917bf8b7c7486cd1534140cb424a37d2ea27bfcf7ada15", "path_in_repo": "allinurl/dwm//dwm.o", "objdump": "0000000000003260 <manage>:\n    3260:\t55                   \tpush   %rbp\n    3261:\t48 89 e5             \tmov    %rsp,%rbp\n    3264:\t48 83 ec 50          \tsub    $0x50,%rsp\n    3268:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    326c:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    3270:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    3277:\t00 \n    3278:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    327f:\t00 \n    3280:\tbe 90 01 00 00       \tmov    $0x190,%esi\n    3285:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    328a:\te8 00 00 00 00       \tcallq  328f <manage+0x2f>\n    328f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    3293:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3297:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    329b:\t48 89 90 88 01 00 00 \tmov    %rdx,0x188(%rax)\n    32a2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    32a6:\t48 89 c7             \tmov    %rax,%rdi\n    32a9:\te8 c7 3e 00 00       \tcallq  7175 <updatetitle>\n    32ae:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 32b5 <manage+0x55>\n    32b5:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    32b9:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    32bd:\t48 89 ce             \tmov    %rcx,%rsi\n    32c0:\t48 89 c7             \tmov    %rax,%rdi\n    32c3:\te8 00 00 00 00       \tcallq  32c8 <manage+0x68>\n    32c8:\t85 c0                \ttest   %eax,%eax\n    32ca:\t74 43                \tje     330f <manage+0xaf>\n    32cc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    32d0:\t48 89 c7             \tmov    %rax,%rdi\n    32d3:\te8 d3 43 00 00       \tcallq  76ab <wintoclient>\n    32d8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    32dc:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    32e1:\t74 2c                \tje     330f <manage+0xaf>\n    32e3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    32e7:\t48 8b 90 80 01 00 00 \tmov    0x180(%rax),%rdx\n    32ee:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    32f2:\t48 89 90 80 01 00 00 \tmov    %rdx,0x180(%rax)\n    32f9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    32fd:\t8b 90 50 01 00 00    \tmov    0x150(%rax),%edx\n    3303:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3307:\t89 90 50 01 00 00    \tmov    %edx,0x150(%rax)\n    330d:\teb 1e                \tjmp    332d <manage+0xcd>\n    330f:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 3316 <manage+0xb6>\n    3316:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    331a:\t48 89 90 80 01 00 00 \tmov    %rdx,0x180(%rax)\n    3321:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3325:\t48 89 c7             \tmov    %rax,%rdi\n    3328:\te8 9e d0 ff ff       \tcallq  3cb <applyrules>\n    332d:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    3331:\t8b 10                \tmov    (%rax),%edx\n    3333:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3337:\t89 90 18 01 00 00    \tmov    %edx,0x118(%rax)\n    333d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3341:\t8b 90 18 01 00 00    \tmov    0x118(%rax),%edx\n    3347:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    334b:\t89 90 08 01 00 00    \tmov    %edx,0x108(%rax)\n    3351:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    3355:\t8b 50 04             \tmov    0x4(%rax),%edx\n    3358:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    335c:\t89 90 1c 01 00 00    \tmov    %edx,0x11c(%rax)\n    3362:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3366:\t8b 90 1c 01 00 00    \tmov    0x11c(%rax),%edx\n    336c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3370:\t89 90 0c 01 00 00    \tmov    %edx,0x10c(%rax)\n    3376:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    337a:\t8b 50 08             \tmov    0x8(%rax),%edx\n    337d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3381:\t89 90 20 01 00 00    \tmov    %edx,0x120(%rax)\n    3387:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    338b:\t8b 90 20 01 00 00    \tmov    0x120(%rax),%edx\n    3391:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3395:\t89 90 10 01 00 00    \tmov    %edx,0x110(%rax)\n    339b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    339f:\t8b 50 0c             \tmov    0xc(%rax),%edx\n    33a2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    33a6:\t89 90 24 01 00 00    \tmov    %edx,0x124(%rax)\n    33ac:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    33b0:\t8b 90 24 01 00 00    \tmov    0x124(%rax),%edx\n    33b6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    33ba:\t89 90 14 01 00 00    \tmov    %edx,0x114(%rax)\n    33c0:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    33c4:\t8b 50 10             \tmov    0x10(%rax),%edx\n    33c7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    33cb:\t89 90 4c 01 00 00    \tmov    %edx,0x14c(%rax)\n    33d1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    33d5:\t8b 90 08 01 00 00    \tmov    0x108(%rax),%edx\n    33db:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    33df:\t8b 88 10 01 00 00    \tmov    0x110(%rax),%ecx\n    33e5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    33e9:\t8b 80 48 01 00 00    \tmov    0x148(%rax),%eax\n    33ef:\t01 c0                \tadd    %eax,%eax\n    33f1:\t01 c8                \tadd    %ecx,%eax\n    33f3:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    33f6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    33fa:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    3401:\t8b 50 20             \tmov    0x20(%rax),%edx\n    3404:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3408:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    340f:\t8b 40 28             \tmov    0x28(%rax),%eax\n    3412:\t01 d0                \tadd    %edx,%eax\n    3414:\t39 c1                \tcmp    %eax,%ecx\n    3416:\t7e 45                \tjle    345d <manage+0x1fd>\n    3418:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    341c:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    3423:\t8b 50 20             \tmov    0x20(%rax),%edx\n    3426:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    342a:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    3431:\t8b 40 28             \tmov    0x28(%rax),%eax\n    3434:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    3437:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    343b:\t8b 90 10 01 00 00    \tmov    0x110(%rax),%edx\n    3441:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3445:\t8b 80 48 01 00 00    \tmov    0x148(%rax),%eax\n    344b:\t01 c0                \tadd    %eax,%eax\n    344d:\t01 d0                \tadd    %edx,%eax\n    344f:\t29 c1                \tsub    %eax,%ecx\n    3451:\t89 ca                \tmov    %ecx,%edx\n    3453:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3457:\t89 90 08 01 00 00    \tmov    %edx,0x108(%rax)\n    345d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3461:\t8b 90 0c 01 00 00    \tmov    0x10c(%rax),%edx\n    3467:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    346b:\t8b 88 14 01 00 00    \tmov    0x114(%rax),%ecx\n    3471:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3475:\t8b 80 48 01 00 00    \tmov    0x148(%rax),%eax\n    347b:\t01 c0                \tadd    %eax,%eax\n    347d:\t01 c8                \tadd    %ecx,%eax\n    347f:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    3482:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3486:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    348d:\t8b 50 24             \tmov    0x24(%rax),%edx\n    3490:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3494:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    349b:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    349e:\t01 d0                \tadd    %edx,%eax\n    34a0:\t39 c1                \tcmp    %eax,%ecx\n    34a2:\t7e 45                \tjle    34e9 <manage+0x289>\n    34a4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    34a8:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    34af:\t8b 50 24             \tmov    0x24(%rax),%edx\n    34b2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    34b6:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    34bd:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    34c0:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    34c3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    34c7:\t8b 90 14 01 00 00    \tmov    0x114(%rax),%edx\n    34cd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    34d1:\t8b 80 48 01 00 00    \tmov    0x148(%rax),%eax\n    34d7:\t01 c0                \tadd    %eax,%eax\n    34d9:\t01 d0                \tadd    %edx,%eax\n    34db:\t29 c1                \tsub    %eax,%ecx\n    34dd:\t89 ca                \tmov    %ecx,%edx\n    34df:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    34e3:\t89 90 0c 01 00 00    \tmov    %edx,0x10c(%rax)\n    34e9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    34ed:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    34f4:\t8b 50 20             \tmov    0x20(%rax),%edx\n    34f7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    34fb:\t8b 80 08 01 00 00    \tmov    0x108(%rax),%eax\n    3501:\t39 c2                \tcmp    %eax,%edx\n    3503:\t0f 4c d0             \tcmovl  %eax,%edx\n    3506:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    350a:\t89 90 08 01 00 00    \tmov    %edx,0x108(%rax)\n    3510:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3514:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    351b:\t8b 50 1c             \tmov    0x1c(%rax),%edx\n    351e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3522:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    3529:\t8b 40 24             \tmov    0x24(%rax),%eax\n    352c:\t39 c2                \tcmp    %eax,%edx\n    352e:\t75 73                \tjne    35a3 <manage+0x343>\n    3530:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3534:\t8b 90 08 01 00 00    \tmov    0x108(%rax),%edx\n    353a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    353e:\t8b 80 10 01 00 00    \tmov    0x110(%rax),%eax\n    3544:\t89 c1                \tmov    %eax,%ecx\n    3546:\tc1 e9 1f             \tshr    $0x1f,%ecx\n    3549:\t01 c8                \tadd    %ecx,%eax\n    354b:\td1 f8                \tsar    %eax\n    354d:\t01 c2                \tadd    %eax,%edx\n    354f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3553:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    355a:\t8b 40 30             \tmov    0x30(%rax),%eax\n    355d:\t39 c2                \tcmp    %eax,%edx\n    355f:\t7c 42                \tjl     35a3 <manage+0x343>\n    3561:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3565:\t8b 90 08 01 00 00    \tmov    0x108(%rax),%edx\n    356b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    356f:\t8b 80 10 01 00 00    \tmov    0x110(%rax),%eax\n    3575:\t89 c1                \tmov    %eax,%ecx\n    3577:\tc1 e9 1f             \tshr    $0x1f,%ecx\n    357a:\t01 c8                \tadd    %ecx,%eax\n    357c:\td1 f8                \tsar    %eax\n    357e:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    3581:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3585:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    358c:\t8b 50 30             \tmov    0x30(%rax),%edx\n    358f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3593:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    359a:\t8b 40 38             \tmov    0x38(%rax),%eax\n    359d:\t01 d0                \tadd    %edx,%eax\n    359f:\t39 c1                \tcmp    %eax,%ecx\n    35a1:\t7c 10                \tjl     35b3 <manage+0x353>\n    35a3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    35a7:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    35ae:\t8b 40 24             \tmov    0x24(%rax),%eax\n    35b1:\teb 06                \tjmp    35b9 <manage+0x359>\n    35b3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 35b9 <manage+0x359>\n    35b9:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    35bd:\t8b 92 0c 01 00 00    \tmov    0x10c(%rdx),%edx\n    35c3:\t39 d0                \tcmp    %edx,%eax\n    35c5:\t0f 4d d0             \tcmovge %eax,%edx\n    35c8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    35cc:\t89 90 0c 01 00 00    \tmov    %edx,0x10c(%rax)\n    35d2:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    35d7:\t89 c2                \tmov    %eax,%edx\n    35d9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    35dd:\t89 90 48 01 00 00    \tmov    %edx,0x148(%rax)\n    35e3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    35e7:\t8b 80 48 01 00 00    \tmov    0x148(%rax),%eax\n    35ed:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    35f0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 35f7 <manage+0x397>\n    35f7:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    35fb:\t48 8b 75 b8          \tmov    -0x48(%rbp),%rsi\n    35ff:\t48 89 d1             \tmov    %rdx,%rcx\n    3602:\tba 10 00 00 00       \tmov    $0x10,%edx\n    3607:\t48 89 c7             \tmov    %rax,%rdi\n    360a:\te8 00 00 00 00       \tcallq  360f <manage+0x3af>\n    360f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3616 <manage+0x3b6>\n    3616:\t48 8b 10             \tmov    (%rax),%rdx\n    3619:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3620 <manage+0x3c0>\n    3620:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    3624:\t48 89 ce             \tmov    %rcx,%rsi\n    3627:\t48 89 c7             \tmov    %rax,%rdi\n    362a:\te8 00 00 00 00       \tcallq  362f <manage+0x3cf>\n    362f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3633:\t48 89 c7             \tmov    %rax,%rdi\n    3636:\te8 39 df ff ff       \tcallq  1574 <configure>\n    363b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    363f:\t48 89 c7             \tmov    %rax,%rdi\n    3642:\te8 fa 3b 00 00       \tcallq  7241 <updatewindowtype>\n    3647:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    364b:\t48 89 c7             \tmov    %rax,%rdi\n    364e:\te8 77 38 00 00       \tcallq  6eca <updatesizehints>\n    3653:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3657:\t48 89 c7             \tmov    %rax,%rdi\n    365a:\te8 5e 3c 00 00       \tcallq  72bd <updatewmhints>\n    365f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3666 <manage+0x406>\n    3666:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    366a:\tba 10 00 62 00       \tmov    $0x620010,%edx\n    366f:\t48 89 ce             \tmov    %rcx,%rsi\n    3672:\t48 89 c7             \tmov    %rax,%rdi\n    3675:\te8 00 00 00 00       \tcallq  367a <manage+0x41a>\n    367a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    367e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3683:\t48 89 c7             \tmov    %rax,%rdi\n    3686:\te8 8c f6 ff ff       \tcallq  2d17 <grabbuttons>\n    368b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    368f:\t8b 80 58 01 00 00    \tmov    0x158(%rax),%eax\n    3695:\t85 c0                \ttest   %eax,%eax\n    3697:\t75 41                \tjne    36da <manage+0x47a>\n    3699:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    369d:\t48 85 c0             \ttest   %rax,%rax\n    36a0:\t75 0e                \tjne    36b0 <manage+0x450>\n    36a2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    36a6:\t8b 80 54 01 00 00    \tmov    0x154(%rax),%eax\n    36ac:\t85 c0                \ttest   %eax,%eax\n    36ae:\t74 07                \tje     36b7 <manage+0x457>\n    36b0:\tba 01 00 00 00       \tmov    $0x1,%edx\n    36b5:\teb 05                \tjmp    36bc <manage+0x45c>\n    36b7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    36bc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    36c0:\t89 90 64 01 00 00    \tmov    %edx,0x164(%rax)\n    36c6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    36ca:\t8b 90 64 01 00 00    \tmov    0x164(%rax),%edx\n    36d0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    36d4:\t89 90 58 01 00 00    \tmov    %edx,0x158(%rax)\n    36da:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    36de:\t8b 80 58 01 00 00    \tmov    0x158(%rax),%eax\n    36e4:\t85 c0                \ttest   %eax,%eax\n    36e6:\t74 1d                \tje     3705 <manage+0x4a5>\n    36e8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    36ec:\t48 8b 90 88 01 00 00 \tmov    0x188(%rax),%rdx\n    36f3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 36fa <manage+0x49a>\n    36fa:\t48 89 d6             \tmov    %rdx,%rsi\n    36fd:\t48 89 c7             \tmov    %rax,%rdi\n    3700:\te8 00 00 00 00       \tcallq  3705 <manage+0x4a5>\n    3705:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3709:\t48 89 c7             \tmov    %rax,%rdi\n    370c:\te8 b1 d5 ff ff       \tcallq  cc2 <attach>\n    3711:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3715:\t48 89 c7             \tmov    %rax,%rdi\n    3718:\te8 dd d5 ff ff       \tcallq  cfa <attachstack>\n    371d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3721:\t48 8d 88 88 01 00 00 \tlea    0x188(%rax),%rcx\n    3728:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 372f <manage+0x4cf>\n    372f:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 3736 <manage+0x4d6>\n    3736:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 373d <manage+0x4dd>\n    373d:\t6a 01                \tpushq  $0x1\n    373f:\t51                   \tpush   %rcx\n    3740:\t41 b9 02 00 00 00    \tmov    $0x2,%r9d\n    3746:\t41 b8 20 00 00 00    \tmov    $0x20,%r8d\n    374c:\tb9 21 00 00 00       \tmov    $0x21,%ecx\n    3751:\t48 89 c7             \tmov    %rax,%rdi\n    3754:\te8 00 00 00 00       \tcallq  3759 <manage+0x4f9>\n    3759:\t48 83 c4 10          \tadd    $0x10,%rsp\n    375d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3761:\t8b 80 14 01 00 00    \tmov    0x114(%rax),%eax\n    3767:\t41 89 c1             \tmov    %eax,%r9d\n    376a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    376e:\t8b 80 10 01 00 00    \tmov    0x110(%rax),%eax\n    3774:\t41 89 c0             \tmov    %eax,%r8d\n    3777:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    377b:\t8b 90 0c 01 00 00    \tmov    0x10c(%rax),%edx\n    3781:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3785:\t8b 80 08 01 00 00    \tmov    0x108(%rax),%eax\n    378b:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 3791 <manage+0x531>\n    3791:\t01 c9                \tadd    %ecx,%ecx\n    3793:\t8d 3c 08             \tlea    (%rax,%rcx,1),%edi\n    3796:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    379a:\t48 8b b0 88 01 00 00 \tmov    0x188(%rax),%rsi\n    37a1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 37a8 <manage+0x548>\n    37a8:\t89 d1                \tmov    %edx,%ecx\n    37aa:\t89 fa                \tmov    %edi,%edx\n    37ac:\t48 89 c7             \tmov    %rax,%rdi\n    37af:\te8 00 00 00 00       \tcallq  37b4 <manage+0x554>\n    37b4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    37b8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    37bd:\t48 89 c7             \tmov    %rax,%rdi\n    37c0:\te8 f0 15 00 00       \tcallq  4db5 <setclientstate>\n    37c5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    37c9:\t48 8b 90 80 01 00 00 \tmov    0x180(%rax),%rdx\n    37d0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 37d7 <manage+0x577>\n    37d7:\t48 39 c2             \tcmp    %rax,%rdx\n    37da:\t75 18                \tjne    37f4 <manage+0x594>\n    37dc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 37e3 <manage+0x583>\n    37e3:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n    37e7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    37ec:\t48 89 c7             \tmov    %rax,%rdi\n    37ef:\te8 e7 2b 00 00       \tcallq  63db <unfocus>\n    37f4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    37f8:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    37ff:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    3803:\t48 89 50 60          \tmov    %rdx,0x60(%rax)\n    3807:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    380b:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n    3812:\t48 89 c7             \tmov    %rax,%rdi\n    3815:\te8 88 d3 ff ff       \tcallq  ba2 <arrange>\n    381a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    381e:\t48 8b 90 88 01 00 00 \tmov    0x188(%rax),%rdx\n    3825:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 382c <manage+0x5cc>\n    382c:\t48 89 d6             \tmov    %rdx,%rsi\n    382f:\t48 89 c7             \tmov    %rax,%rdi\n    3832:\te8 00 00 00 00       \tcallq  3837 <manage+0x5d7>\n    3837:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    383c:\te8 a4 ed ff ff       \tcallq  25e5 <focus>\n    3841:\t90                   \tnop\n    3842:\tc9                   \tleaveq \n    3843:\tc3                   \tretq   ", "code_s": "__int64 __fastcall manage(Window a1, _DWORD *a2) {\n  int v2;\n  signed int v3;\n  signed int v4;\n  _BOOL4 v5;\n  XWindowChanges v7;\n  Window v8;\n  __int64 v9;\n  __int64 v10;\n  v10 = Number L;\n  v8 = Number L;\n  v9 = ecalloc(Number L, Number L);\n  *(_QWORD *)(v9 + Number) = a1;\n  updatetitle(v9);\n  if (XGetTransientForHint(dpy, a1, &v8) && (v10 = wintoclient(v8)) != Number) {\n    *(_QWORD *)(v9 + Number) = *(_QWORD *)(v10 + Number);\n    *(_DWORD *)(v9 + Number) = *(_DWORD *)(v10 + Number);\n  } else {\n    *(_QWORD *)(v9 + Number) = selmon;\n    applyrules(v9);\n  }\n  *(_DWORD *)(v9 + Number) = *a2;\n  *(_DWORD *)(v9 + Number) = *(_DWORD *)(v9 + Number);\n  *(_DWORD *)(v9 + Number) = a2[Number];\n  *(_DWORD *)(v9 + Number) = *(_DWORD *)(v9 + Number);\n  *(_DWORD *)(v9 + Number) = a2[Number];\n  *(_DWORD *)(v9 + Number) = *(_DWORD *)(v9 + Number);\n  *(_DWORD *)(v9 + Number) = a2[Number];\n  *(_DWORD *)(v9 + Number) = *(_DWORD *)(v9 + Number);\n  *(_DWORD *)(v9 + Number) = a2[Number];\n  if (*(_DWORD *)(v9 + Number) + *(_DWORD *)(v9 + Number) +\n          Number * *(_DWORD *)(v9 + Number) >\n      *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L) +\n          *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L))\n    *(_DWORD *)(v9 + Number) =\n        *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L) +\n        *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L) -\n        (*(_DWORD *)(v9 + Number) + Number * *(_DWORD *)(v9 + Number));\n  if (*(_DWORD *)(v9 + Number) + *(_DWORD *)(v9 + Number) +\n          Number * *(_DWORD *)(v9 + Number) >\n      *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L) +\n          *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L))\n    *(_DWORD *)(v9 + Number) =\n        *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L) +\n        *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L) -\n        (*(_DWORD *)(v9 + Number) + Number * *(_DWORD *)(v9 + Number));\n  v2 = *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L);\n  if (v2 < *(_DWORD *)(v9 + Number))\n    v2 = *(_DWORD *)(v9 + Number);\n  *(_DWORD *)(v9 + Number) = v2;\n  if (*(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L) ==\n          *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L) &&\n      *(_DWORD *)(v9 + Number) / Number + *(_DWORD *)(v9 + Number) >=\n          *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L) &&\n      *(_DWORD *)(v9 + Number) + *(_DWORD *)(v9 + Number) / Number <\n          *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L) +\n              *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L)) {\n    v3 = dword_898C;\n  } else {\n    v3 = *(_DWORD *)(*(_QWORD *)(v9 + Number) + Number L);\n  }\n  v4 = *(_DWORD *)(v9 + Number);\n  if (v3 >= v4)\n    v4 = v3;\n  *(_DWORD *)(v9 + Number) = v4;\n  *(_DWORD *)(v9 + Number) = Number;\n  v7.border_width = *(_DWORD *)(v9 + Number);\n  XConfigureWindow(dpy, a1, Number, &v7);\n  XSetWindowBorder(dpy, a1, *(_QWORD *)qword_8A50[Number]);\n  configure(v9);\n  updatewindowtype(v9);\n  updatesizehints(v9);\n  updatewmhints(v9);\n  XSelectInput(dpy, a1, Number L);\n  grabbuttons(v9, Number);\n  if (!*(_DWORD *)(v9 + Number)) {\n    v5 = v8 || *(_DWORD *)(v9 + Number);\n    *(_DWORD *)(v9 + Number) = v5;\n    *(_DWORD *)(v9 + Number) = *(_DWORD *)(v9 + Number);\n  }\n  if (*(_DWORD *)(v9 + Number))\n    XRaiseWindow(dpy, *(_QWORD *)(v9 + Number));\n  attach(v9);\n  attachstack(v9);\n  XChangeProperty(dpy, root, qword_8A18, Number, Number, Number,\n                  (const unsigned __int8 *)(v9 + Number), Number);\n  XMoveResizeWindow(dpy, *(_QWORD *)(v9 + Number),\n                    *(_DWORD *)(v9 + Number) + Number * sw,\n                    *(_DWORD *)(v9 + Number), *(_DWORD *)(v9 + Number),\n                    *(_DWORD *)(v9 + Number));\n  setclientstate(v9, Number L);\n  if (*(char **)(v9 + Number) == selmon)\n    unfocus(*((_QWORD *)selmon + Number), Number L);\n  *(_QWORD *)(*(_QWORD *)(v9 + Number) + Number L) = v9;\n  arrange(*(_QWORD *)(v9 + Number));\n  XMapWindow(dpy, *(_QWORD *)(v9 + Number));\n  return focus(Number L);\n}", "code_t": "void __cdecl manage(Window w, XWindowAttributes *wa) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  XWindowChanges <span class=\"supfact\">wc</span>;\n  Window trans;\n  Client_0 *c;\n  Client_0 *t;\n  t = Number L;\n  trans = Number L;\n  c = (Client_0 *)ecalloc(Number L, Number L);\n  c->win = w;\n  updatetitle(c);\n  if (XGetTransientForHint(dpy, w, &trans) &&\n      (t = wintoclient(trans)) != Number L) {\n    c->mon = t->mon;\n    c->tags = t->tags;\n  } else {\n    c->mon = selmon;\n    applyrules(c);\n  }\n  c->oldx = wa->x;\n  c->x = c->oldx;\n  c->oldy = wa->y;\n  c->y = c->oldy;\n  c->oldw = wa->width;\n  c->w = c->oldw;\n  c->oldh = wa->height;\n  c->h = c->oldh;\n  c->oldbw = wa->border_width;\n  if (c->x + c->w + Number * c->bw > c->mon->mx + c->mon->mw)\n    c->x = c->mon->mx + c->mon->mw - (c->w + Number * c->bw);\n  if (c->y + c->h + Number * c->bw > c->mon->my + c->mon->mh)\n    c->y = c->mon->my + c->mon->mh - (c->h + Number * c->bw);\n  v2 = c->mon->mx;\n  if (v2 < c->x)\n    v2 = c->x;\n  c->x = v2;\n  if (c->mon->by == c->mon->my && c->w / Number + c->x >= c->mon->wx &&\n      c->x + c->w / Number < c->mon->wx + c->mon->ww)\n    v3 = dword_898C;\n  else\n    v3 = c->mon->my;\n  v4 = c->y;\n  if (v3 >= v4)\n    v4 = v3;\n  c->y = v4;\n  c->bw = Number;\n  <span class=\"supfact\">wc</span>.border_width = c->bw;\n  XConfigureWindow(dpy, w, Number, &<span class=\"supfact\">wc</span>);\n  XSetWindowBorder(dpy, w, scheme[Number].border->pix);\n  configure(c);\n  updatewindowtype(c);\n  updatesizehints(c);\n  updatewmhints(c);\n  XSelectInput(dpy, w, Number L);\n  grabbuttons(c, Number);\n  if (!c->isfloating) {\n    v5 = trans || c->isfixed;\n    c->oldstate = v5;\n    c->isfloating = c->oldstate;\n  }\n  if (c->isfloating)\n    XRaiseWindow(dpy, c->win);\n  attach(c);\n  attachstack(c);\n  XChangeProperty(dpy, root, netatom[Number], Number, Number, Number,\n                  (const unsigned __int8 *)&c->win, Number);\n  XMoveResizeWindow(dpy, c->win, c->x + Number * sw, c->y, c->w, c->h);\n  setclientstate(c, Number L);\n  if (c->mon == selmon)\n    unfocus(selmon->sel, Number);\n  c->mon->sel = c;\n  arrange(c->mon);\n  XMapWindow(dpy, c->win);\n  focus(Number L);\n}", "var": [{"name": "v7", "type": "struct XWindowChanges { int x; int y; int width; int height; int border_width; PADDING (4); Window sibling; int stack_mode; PADDING (4); }", "pred_name": "wc", "ref_name": "wc", "ref_type": "struct XWindowChanges { int x; int y; int width; int height; int border_width; PADDING (4); Window sibling; int stack_mode; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "Shoko84", "repo_name": "arcadeplusplus", "path": "Shoko84/arcadeplusplus/69261b135f6769d0bc919ca4cf1aa572440591107d5adc15a63a32d0245a60d5", "path_in_repo": "Shoko84/arcadeplusplus/lib/Libcaca/lib_arcade_libcaca.so", "objdump": "", "code_s": "void __noreturn _Unwind_Resume(struct _Unwind_Exception *a1) {\n  Unwind_Resume(a1);\n}", "code_t": "void __noreturn _Unwind_Resume(struct _Unwind_Exception *<span class=\"supfact\">a1</span>) {\n  Unwind_Resume(<span class=\"supfact\">a1</span>);\n}", "var": [{"name": "a1", "type": "struct _Unwind_Exception *", "pred_name": "a1", "ref_name": "a1", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": true}, {"repo_owner": "exported", "repo_name": "intrace", "path": "exported/intrace/8feb045a80348b40c46b9406f93367b9051099c1cd73deb9c0991c6cf0ceec62", "path_in_repo": "exported/intrace//debug.o", "objdump": "0000000000000000 <_debug_printf>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 81 ec b8 11 00 00 \tsub    $0x11b8,%rsp\n   c:\t89 bd 5c ee ff ff    \tmov    %edi,-0x11a4(%rbp)\n  12:\t48 89 b5 50 ee ff ff \tmov    %rsi,-0x11b0(%rbp)\n  19:\t48 89 95 48 ee ff ff \tmov    %rdx,-0x11b8(%rbp)\n  20:\t89 8d 58 ee ff ff    \tmov    %ecx,-0x11a8(%rbp)\n  26:\t4c 89 85 40 ee ff ff \tmov    %r8,-0x11c0(%rbp)\n  2d:\t4c 89 8d 68 ff ff ff \tmov    %r9,-0x98(%rbp)\n  34:\t84 c0                \ttest   %al,%al\n  36:\t74 23                \tje     5b <_debug_printf+0x5b>\n  38:\t0f 29 85 70 ff ff ff \tmovaps %xmm0,-0x90(%rbp)\n  3f:\t0f 29 4d 80          \tmovaps %xmm1,-0x80(%rbp)\n  43:\t0f 29 55 90          \tmovaps %xmm2,-0x70(%rbp)\n  47:\t0f 29 5d a0          \tmovaps %xmm3,-0x60(%rbp)\n  4b:\t0f 29 65 b0          \tmovaps %xmm4,-0x50(%rbp)\n  4f:\t0f 29 6d c0          \tmovaps %xmm5,-0x40(%rbp)\n  53:\t0f 29 75 d0          \tmovaps %xmm6,-0x30(%rbp)\n  57:\t0f 29 7d e0          \tmovaps %xmm7,-0x20(%rbp)\n  5b:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 62 <_debug_printf+0x62>\n  62:\t48 89 85 80 ee ff ff \tmov    %rax,-0x1180(%rbp)\n  69:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 70 <_debug_printf+0x70>\n  70:\t48 89 85 88 ee ff ff \tmov    %rax,-0x1178(%rbp)\n  77:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 7e <_debug_printf+0x7e>\n  7e:\t48 89 85 90 ee ff ff \tmov    %rax,-0x1170(%rbp)\n  85:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 8c <_debug_printf+0x8c>\n  8c:\t48 89 85 98 ee ff ff \tmov    %rax,-0x1168(%rbp)\n  93:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 9a <_debug_printf+0x9a>\n  9a:\t48 89 85 a0 ee ff ff \tmov    %rax,-0x1160(%rbp)\n  a1:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # a8 <_debug_printf+0xa8>\n  a8:\t48 89 85 a8 ee ff ff \tmov    %rax,-0x1158(%rbp)\n  af:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # b6 <_debug_printf+0xb6>\n  b6:\t48 89 85 b0 ee ff ff \tmov    %rax,-0x1150(%rbp)\n  bd:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # c4 <_debug_printf+0xc4>\n  c4:\t48 89 85 b8 ee ff ff \tmov    %rax,-0x1148(%rbp)\n  cb:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # d2 <_debug_printf+0xd2>\n  d2:\t48 89 85 c0 ee ff ff \tmov    %rax,-0x1140(%rbp)\n  d9:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # e0 <_debug_printf+0xe0>\n  e0:\t48 89 85 c8 ee ff ff \tmov    %rax,-0x1138(%rbp)\n  e7:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # ee <_debug_printf+0xee>\n  ee:\t48 89 85 d0 ee ff ff \tmov    %rax,-0x1130(%rbp)\n  f5:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # fc <_debug_printf+0xfc>\n  fc:\t48 89 85 d8 ee ff ff \tmov    %rax,-0x1128(%rbp)\n 103:\tc7 85 68 ee ff ff 28 \tmovl   $0x28,-0x1198(%rbp)\n 10a:\t00 00 00 \n 10d:\tc7 85 6c ee ff ff 30 \tmovl   $0x30,-0x1194(%rbp)\n 114:\t00 00 00 \n 117:\t48 8d 45 10          \tlea    0x10(%rbp),%rax\n 11b:\t48 89 85 70 ee ff ff \tmov    %rax,-0x1190(%rbp)\n 122:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n 129:\t48 89 85 78 ee ff ff \tmov    %rax,-0x1188(%rbp)\n 130:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 137 <_debug_printf+0x137>\n 137:\t8b 40 28             \tmov    0x28(%rax),%eax\n 13a:\t39 85 5c ee ff ff    \tcmp    %eax,-0x11a4(%rbp)\n 140:\t0f 87 05 03 00 00    \tja     44b <_debug_printf+0x44b>\n 146:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 14d <_debug_printf+0x14d>\n 14d:\t48 89 c7             \tmov    %rax,%rdi\n 150:\te8 00 00 00 00       \tcallq  155 <_debug_printf+0x155>\n 155:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 15c <_debug_printf+0x15c>\n 15c:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n 160:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 167 <_debug_printf+0x167>\n 167:\t48 8b 00             \tmov    (%rax),%rax\n 16a:\t48 39 c2             \tcmp    %rax,%rdx\n 16d:\t74 1a                \tje     189 <_debug_printf+0x189>\n 16f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 176 <_debug_printf+0x176>\n 176:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n 17a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 181 <_debug_printf+0x181>\n 181:\t48 8b 00             \tmov    (%rax),%rax\n 184:\t48 39 c2             \tcmp    %rax,%rdx\n 187:\t75 33                \tjne    1bc <_debug_printf+0x1bc>\n 189:\t8b 85 5c ee ff ff    \tmov    -0x11a4(%rbp),%eax\n 18f:\t48 c1 e0 04          \tshl    $0x4,%rax\n 193:\t48 8d 9d 40 ff ff ff \tlea    -0xc0(%rbp),%rbx\n 19a:\t48 01 d8             \tadd    %rbx,%rax\n 19d:\t48 2d b8 10 00 00    \tsub    $0x10b8,%rax\n 1a3:\t48 8b 00             \tmov    (%rax),%rax\n 1a6:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1ad <_debug_printf+0x1ad>\n 1ad:\t48 8b 52 30          \tmov    0x30(%rdx),%rdx\n 1b1:\t48 89 d6             \tmov    %rdx,%rsi\n 1b4:\t48 89 c7             \tmov    %rax,%rdi\n 1b7:\te8 00 00 00 00       \tcallq  1bc <_debug_printf+0x1bc>\n 1bc:\t48 8d 95 e8 ee ff ff \tlea    -0x1118(%rbp),%rdx\n 1c3:\t48 8d 85 f0 ee ff ff \tlea    -0x1110(%rbp),%rax\n 1ca:\t48 89 d6             \tmov    %rdx,%rsi\n 1cd:\t48 89 c7             \tmov    %rax,%rdi\n 1d0:\te8 00 00 00 00       \tcallq  1d5 <_debug_printf+0x1d5>\n 1d5:\t48 8d 95 00 ff ff ff \tlea    -0x100(%rbp),%rdx\n 1dc:\t48 8d 85 f0 ee ff ff \tlea    -0x1110(%rbp),%rax\n 1e3:\t48 89 d6             \tmov    %rdx,%rsi\n 1e6:\t48 89 c7             \tmov    %rax,%rdi\n 1e9:\te8 00 00 00 00       \tcallq  1ee <_debug_printf+0x1ee>\n 1ee:\t83 bd 5c ee ff ff 04 \tcmpl   $0x4,-0x11a4(%rbp)\n 1f5:\t0f 86 a1 00 00 00    \tjbe    29c <_debug_printf+0x29c>\n 1fb:\t8b 85 5c ee ff ff    \tmov    -0x11a4(%rbp),%eax\n 201:\t48 c1 e0 04          \tshl    $0x4,%rax\n 205:\t48 8d 8d 40 ff ff ff \tlea    -0xc0(%rbp),%rcx\n 20c:\t48 01 c8             \tadd    %rcx,%rax\n 20f:\t48 2d c0 10 00 00    \tsub    $0x10c0,%rax\n 215:\t4c 8b 00             \tmov    (%rax),%r8\n 218:\t48 8b 85 f8 ee ff ff \tmov    -0x1108(%rbp),%rax\n 21f:\t89 c3                \tmov    %eax,%ebx\n 221:\t8b bd 00 ff ff ff    \tmov    -0x100(%rbp),%edi\n 227:\t8b b5 04 ff ff ff    \tmov    -0xfc(%rbp),%esi\n 22d:\t8b 8d 08 ff ff ff    \tmov    -0xf8(%rbp),%ecx\n 233:\t44 8b 95 0c ff ff ff \tmov    -0xf4(%rbp),%r10d\n 23a:\t8b 85 10 ff ff ff    \tmov    -0xf0(%rbp),%eax\n 240:\t44 8d 58 01          \tlea    0x1(%rax),%r11d\n 244:\t8b 85 14 ff ff ff    \tmov    -0xec(%rbp),%eax\n 24a:\t8d 90 6c 07 00 00    \tlea    0x76c(%rax),%edx\n 250:\t48 8d 85 00 ef ff ff \tlea    -0x1100(%rbp),%rax\n 257:\t44 8b 8d 58 ee ff ff \tmov    -0x11a8(%rbp),%r9d\n 25e:\t41 51                \tpush   %r9\n 260:\tff b5 48 ee ff ff    \tpushq  -0x11b8(%rbp)\n 266:\tff b5 50 ee ff ff    \tpushq  -0x11b0(%rbp)\n 26c:\t41 50                \tpush   %r8\n 26e:\t53                   \tpush   %rbx\n 26f:\t57                   \tpush   %rdi\n 270:\t56                   \tpush   %rsi\n 271:\t51                   \tpush   %rcx\n 272:\t45 89 d1             \tmov    %r10d,%r9d\n 275:\t45 89 d8             \tmov    %r11d,%r8d\n 278:\t89 d1                \tmov    %edx,%ecx\n 27a:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 281 <_debug_printf+0x281>\n 281:\tbe 00 10 00 00       \tmov    $0x1000,%esi\n 286:\t48 89 c7             \tmov    %rax,%rdi\n 289:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 28e:\te8 00 00 00 00       \tcallq  293 <_debug_printf+0x293>\n 293:\t48 83 c4 40          \tadd    $0x40,%rsp\n 297:\te9 8a 00 00 00       \tjmpq   326 <_debug_printf+0x326>\n 29c:\t8b 85 5c ee ff ff    \tmov    -0x11a4(%rbp),%eax\n 2a2:\t48 c1 e0 04          \tshl    $0x4,%rax\n 2a6:\t48 8d 9d 40 ff ff ff \tlea    -0xc0(%rbp),%rbx\n 2ad:\t48 01 d8             \tadd    %rbx,%rax\n 2b0:\t48 2d c0 10 00 00    \tsub    $0x10c0,%rax\n 2b6:\t4c 8b 00             \tmov    (%rax),%r8\n 2b9:\t48 8b 85 f8 ee ff ff \tmov    -0x1108(%rbp),%rax\n 2c0:\t41 89 c3             \tmov    %eax,%r11d\n 2c3:\t8b bd 00 ff ff ff    \tmov    -0x100(%rbp),%edi\n 2c9:\t8b b5 04 ff ff ff    \tmov    -0xfc(%rbp),%esi\n 2cf:\t8b 8d 08 ff ff ff    \tmov    -0xf8(%rbp),%ecx\n 2d5:\t44 8b 8d 0c ff ff ff \tmov    -0xf4(%rbp),%r9d\n 2dc:\t8b 85 10 ff ff ff    \tmov    -0xf0(%rbp),%eax\n 2e2:\t44 8d 50 01          \tlea    0x1(%rax),%r10d\n 2e6:\t8b 85 14 ff ff ff    \tmov    -0xec(%rbp),%eax\n 2ec:\t8d 90 6c 07 00 00    \tlea    0x76c(%rax),%edx\n 2f2:\t48 8d 85 00 ef ff ff \tlea    -0x1100(%rbp),%rax\n 2f9:\t48 83 ec 08          \tsub    $0x8,%rsp\n 2fd:\t41 50                \tpush   %r8\n 2ff:\t41 53                \tpush   %r11\n 301:\t57                   \tpush   %rdi\n 302:\t56                   \tpush   %rsi\n 303:\t51                   \tpush   %rcx\n 304:\t45 89 d0             \tmov    %r10d,%r8d\n 307:\t89 d1                \tmov    %edx,%ecx\n 309:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 310 <_debug_printf+0x310>\n 310:\tbe 00 10 00 00       \tmov    $0x1000,%esi\n 315:\t48 89 c7             \tmov    %rax,%rdi\n 318:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 31d:\te8 00 00 00 00       \tcallq  322 <_debug_printf+0x322>\n 322:\t48 83 c4 30          \tadd    $0x30,%rsp\n 326:\t48 8d 85 00 ef ff ff \tlea    -0x1100(%rbp),%rax\n 32d:\t48 89 c7             \tmov    %rax,%rdi\n 330:\te8 00 00 00 00       \tcallq  335 <_debug_printf+0x335>\n 335:\tba 00 10 00 00       \tmov    $0x1000,%edx\n 33a:\t48 89 d3             \tmov    %rdx,%rbx\n 33d:\t48 29 c3             \tsub    %rax,%rbx\n 340:\t48 8d 85 00 ef ff ff \tlea    -0x1100(%rbp),%rax\n 347:\t48 89 c7             \tmov    %rax,%rdi\n 34a:\te8 00 00 00 00       \tcallq  34f <_debug_printf+0x34f>\n 34f:\t48 8d 95 00 ef ff ff \tlea    -0x1100(%rbp),%rdx\n 356:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n 35a:\t48 8d 95 68 ee ff ff \tlea    -0x1198(%rbp),%rdx\n 361:\t48 8b 85 40 ee ff ff \tmov    -0x11c0(%rbp),%rax\n 368:\t48 89 d1             \tmov    %rdx,%rcx\n 36b:\t48 89 c2             \tmov    %rax,%rdx\n 36e:\t48 89 de             \tmov    %rbx,%rsi\n 371:\te8 00 00 00 00       \tcallq  376 <_debug_printf+0x376>\n 376:\t48 8d 85 00 ef ff ff \tlea    -0x1100(%rbp),%rax\n 37d:\t48 89 85 38 ff ff ff \tmov    %rax,-0xc8(%rbp)\n 384:\teb 20                \tjmp    3a6 <_debug_printf+0x3a6>\n 386:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 38d:\t0f b6 00             \tmovzbl (%rax),%eax\n 390:\t84 c0                \ttest   %al,%al\n 392:\t79 0a                \tjns    39e <_debug_printf+0x39e>\n 394:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 39b:\tc6 00 5f             \tmovb   $0x5f,(%rax)\n 39e:\t48 83 85 38 ff ff ff \taddq   $0x1,-0xc8(%rbp)\n 3a5:\t01 \n 3a6:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 3ad:\t0f b6 00             \tmovzbl (%rax),%eax\n 3b0:\t84 c0                \ttest   %al,%al\n 3b2:\t75 d2                \tjne    386 <_debug_printf+0x386>\n 3b4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3bb <_debug_printf+0x3bb>\n 3bb:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n 3bf:\t48 8d 85 00 ef ff ff \tlea    -0x1100(%rbp),%rax\n 3c6:\t48 89 d6             \tmov    %rdx,%rsi\n 3c9:\t48 89 c7             \tmov    %rax,%rdi\n 3cc:\te8 00 00 00 00       \tcallq  3d1 <_debug_printf+0x3d1>\n 3d1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3d8 <_debug_printf+0x3d8>\n 3d8:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n 3dc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3e3 <_debug_printf+0x3e3>\n 3e3:\t48 8b 00             \tmov    (%rax),%rax\n 3e6:\t48 39 c2             \tcmp    %rax,%rdx\n 3e9:\t74 1a                \tje     405 <_debug_printf+0x405>\n 3eb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3f2 <_debug_printf+0x3f2>\n 3f2:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n 3f6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3fd <_debug_printf+0x3fd>\n 3fd:\t48 8b 00             \tmov    (%rax),%rax\n 400:\t48 39 c2             \tcmp    %rax,%rdx\n 403:\t75 24                \tjne    429 <_debug_printf+0x429>\n 405:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40c <_debug_printf+0x40c>\n 40c:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 410:\t48 89 c1             \tmov    %rax,%rcx\n 413:\tba 04 00 00 00       \tmov    $0x4,%edx\n 418:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 41d:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 424 <_debug_printf+0x424>\n 424:\te8 00 00 00 00       \tcallq  429 <_debug_printf+0x429>\n 429:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 430 <_debug_printf+0x430>\n 430:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 434:\t48 89 c7             \tmov    %rax,%rdi\n 437:\te8 00 00 00 00       \tcallq  43c <_debug_printf+0x43c>\n 43c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 443 <_debug_printf+0x443>\n 443:\t48 89 c7             \tmov    %rax,%rdi\n 446:\te8 00 00 00 00       \tcallq  44b <_debug_printf+0x44b>\n 44b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 450:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n 454:\tc9                   \tleaveq \n 455:\tc3                   \tretq   ", "code_s": "__int64 debug_printf(unsigned int a1, const char *a2, const char *a3,\n                     unsigned int a4, const char *a5, __int64 a6, ...) {\n  size_t v6;\n  size_t v7;\n  gcc_va_list arg;\n  const char *v13;\n  __int64 v14[Number];\n  struct timeval tv;\n  char s[Number];\n  struct tm tp;\n  char *i;\n  __int64 v19;\n  va_start(arg, a6);\n  v19 = a6;\n  v13 = String;\n  v14[Number] = (__int64)String;\n  v14[Number] = (__int64)String;\n  v14[Number] = (__int64)String;\n  v14[Number] = (__int64)String;\n  v14[Number] = (__int64)String;\n  v14[Number] = (__int64)String;\n  v14[Number] = (__int64)String;\n  v14[Number] = (__int64)String;\n  v14[Number] = (__int64)String;\n  v14[Number] = (__int64)String;\n  v14[Number] = (__int64)String;\n  arg[Number].gp_offset = Number;\n  if (a1 <= *((_DWORD *)&debug + Number)) {\n    pthread_mutex_lock(&debug);\n    if (*((struct _IO_FILE **)&debug + Number) == stdout ||\n        *((struct _IO_FILE **)&debug + Number) == stderr)\n      fputs((const char *)v14[Number * a1], *((FILE **)&debug + Number));\n    gettimeofday(&tv, (__timezone_ptr_t)&v14[Number]);\n    localtime_r(&tv.tv_sec, &tp);\n    if (a1 <= Number)\n      snprintf(s, Number, String, (unsigned int)(tp.tm_year + Number),\n               (unsigned int)(tp.tm_mon + Number), (unsigned int)tp.tm_mday,\n               (unsigned int)tp.tm_hour, (unsigned int)tp.tm_min,\n               (unsigned int)tp.tm_sec, LODWORD(tv.tv_usec),\n               (&v13)[Number * a1]);\n    else\n      snprintf(s, Number, String, (unsigned int)(tp.tm_year + Number),\n               (unsigned int)(tp.tm_mon + Number), (unsigned int)tp.tm_mday,\n               (unsigned int)tp.tm_hour, (unsigned int)tp.tm_min,\n               (unsigned int)tp.tm_sec, LODWORD(tv.tv_usec),\n               (&v13)[Number * a1], a2, a3, a4);\n    v6 = Number - strlen(s);\n    v7 = strlen(s);\n    vsnprintf(&s[v7], v6, a5, arg);\n    for (i = s; *i; ++i) {\n      if (*i < Number)\n        *i = Number;\n    }\n    fputs(s, *((FILE **)&debug + Number));\n    if (*((struct _IO_FILE **)&debug + Number) == stdout ||\n        *((struct _IO_FILE **)&debug + Number) == stderr)\n      fwrite(String, Number, Number, *((FILE **)&debug + Number));\n    fflush(*((FILE **)&debug + Number));\n    pthread_mutex_unlock(&debug);\n  }\n  return Number L;\n}", "code_t": "int debug_printf(debug_level_t dl_0, const char *file, const char *func,\n                 int line, const char *fmt, ...) {\n  __int64 v5;\n  size_t v6;\n  size_t v7;\n  va_list args;\n  _debug_printf $3670715A78C3C9C0FB855DECBA75CE8E dls[Number];\n  timezone tz;\n  timeval <span class=\"supfact\">tv</span>;\n  char buf[Number];\n  <span class=\"supfact\">tm</span> <span class=\"supfact\">tm</span>;\n  char *p;\n  _OWORD v19[Number];\n  __int64 v20;\n  va_start(args, fmt);\n  v5 = va_arg(args, _QWORD);\n  v20 = v5;\n  dls[Number].name = String;\n  dls[Number].color = String;\n  dls[Number].name = String;\n  dls[Number].color = String;\n  dls[Number].name = String;\n  dls[Number].color = String;\n  dls[Number].name = String;\n  dls[Number].color = String;\n  dls[Number].name = String;\n  dls[Number].color = String;\n  dls[Number].name = String;\n  dls[Number].color = String;\n  args[Number].gp_offset = Number;\n  if ((unsigned int)dl_0 <= debug.dl) {\n    pthread_mutex_lock(&debug.mutex);\n    if (debug.f == stdout || debug.f == stderr)\n      fputs(*((const char **)&v19[(unsigned int)dl_0 - Number] - Number),\n            debug.f);\n    gettimeofday(&<span class=\"supfact\">tv</span>, &tz);\n    localtime_r(&<span class=\"supfact\">tv</span>.tv_sec, &<span class=\"supfact\">tm</span>);\n    if ((unsigned int)dl_0 <= dlDetails)\n      snprintf(buf, Number, String,\n               (unsigned int)(<span class=\"supfact\">tm</span>.tm_year + Number),\n               (unsigned int)(<span class=\"supfact\">tm</span>.tm_mon + Number),\n               (unsigned int)<span class=\"supfact\">tm</span>.tm_mday,\n               (unsigned int)<span class=\"supfact\">tm</span>.tm_hour,\n               (unsigned int)<span class=\"supfact\">tm</span>.tm_min,\n               (unsigned int)<span class=\"supfact\">tm</span>.tm_sec,\n               LODWORD(<span class=\"supfact\">tv</span>.tv_usec), dls[dl_0].name);\n    else\n      snprintf(buf, Number, String,\n               (unsigned int)(<span class=\"supfact\">tm</span>.tm_year + Number),\n               (unsigned int)(<span class=\"supfact\">tm</span>.tm_mon + Number),\n               (unsigned int)<span class=\"supfact\">tm</span>.tm_mday,\n               (unsigned int)<span class=\"supfact\">tm</span>.tm_hour,\n               (unsigned int)<span class=\"supfact\">tm</span>.tm_min,\n               (unsigned int)<span class=\"supfact\">tm</span>.tm_sec,\n               LODWORD(<span class=\"supfact\">tv</span>.tv_usec), dls[dl_0].name, file, func,\n               (unsigned int)line);\n    v6 = Number - strlen(buf);\n    v7 = strlen(buf);\n    vsnprintf(&buf[v7], v6, fmt, args);\n    for (p = buf; *p; ++p) {\n      if (*p < Number)\n        *p = Number;\n    }\n    fputs(buf, debug.f);\n    if (debug.f == stdout || debug.f == stderr)\n      fwrite(String, Number, Number, debug.f);\n    fflush(debug.f);\n    pthread_mutex_unlock(&debug.mutex);\n  }\n  return Number;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "now", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "tp", "type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }", "pred_name": "tm", "ref_name": "tm", "ref_type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}], "body_in_train": true}, {"repo_owner": "hach-que", "repo_name": "roket3d", "path": "hach-que/roket3d/ea00cdad2dc022b31b57f0ef6ed257a842d3332fabf30ba216071e82c8c8bc21", "path_in_repo": "hach-que/roket3d/IDE.NET/Dependencies/Irrlicht.NET CP/Irrlicht SDK/source/Irrlicht/CGUITabControl.o", "objdump": "0000000000000000 <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 40          \tsub    $0x40,%rsp\n   8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   c:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  10:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  14:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  18:\t48 85 c0             \ttest   %rax,%rax\n  1b:\t0f 84 1f 01 00 00    \tje     140 <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE+0x140>\n  21:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  25:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  29:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  2d:\t48 89 d6             \tmov    %rdx,%rsi\n  30:\t48 89 c7             \tmov    %rax,%rdi\n  33:\te8 00 00 00 00       \tcallq  38 <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE+0x38>\n  38:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  3c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  44:\t48 89 c7             \tmov    %rax,%rdi\n  47:\te8 00 00 00 00       \tcallq  4c <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE+0x4c>\n  4c:\t48 c1 f8 20          \tsar    $0x20,%rax\n  50:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n  54:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n  59:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  5d:\t48 89 c7             \tmov    %rax,%rdi\n  60:\te8 00 00 00 00       \tcallq  65 <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE+0x65>\n  65:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n  69:\tf3 0f 11 45 f4       \tmovss  %xmm0,-0xc(%rbp)\n  6e:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  72:\t48 8d 4d f4          \tlea    -0xc(%rbp),%rcx\n  76:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  7a:\t48 89 ce             \tmov    %rcx,%rsi\n  7d:\t48 89 c7             \tmov    %rax,%rdi\n  80:\te8 00 00 00 00       \tcallq  85 <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE+0x85>\n  85:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  89:\t8b 80 f8 00 00 00    \tmov    0xf8(%rax),%eax\n  8f:\t83 f8 03             \tcmp    $0x3,%eax\n  92:\t75 1f                \tjne    b3 <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE+0xb3>\n  94:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  98:\t8b 00                \tmov    (%rax),%eax\n  9a:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n  9e:\tf3 0f 10 4d d8       \tmovss  -0x28(%rbp),%xmm1\n  a3:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n  a7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  ab:\tf3 0f 11 80 80 00 00 \tmovss  %xmm0,0x80(%rax)\n  b2:\t00 \n  b3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  b7:\t8b 80 fc 00 00 00    \tmov    0xfc(%rax),%eax\n  bd:\t83 f8 03             \tcmp    $0x3,%eax\n  c0:\t75 20                \tjne    e2 <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE+0xe2>\n  c2:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  c6:\t8b 40 08             \tmov    0x8(%rax),%eax\n  c9:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n  cd:\tf3 0f 10 4d d8       \tmovss  -0x28(%rbp),%xmm1\n  d2:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n  d6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  da:\tf3 0f 11 80 88 00 00 \tmovss  %xmm0,0x88(%rax)\n  e1:\t00 \n  e2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  e6:\t8b 80 00 01 00 00    \tmov    0x100(%rax),%eax\n  ec:\t83 f8 03             \tcmp    $0x3,%eax\n  ef:\t75 20                \tjne    111 <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE+0x111>\n  f1:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  f5:\t8b 40 04             \tmov    0x4(%rax),%eax\n  f8:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n  fc:\tf3 0f 10 4d dc       \tmovss  -0x24(%rbp),%xmm1\n 101:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n 105:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 109:\tf3 0f 11 80 84 00 00 \tmovss  %xmm0,0x84(%rax)\n 110:\t00 \n 111:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 115:\t8b 80 04 01 00 00    \tmov    0x104(%rax),%eax\n 11b:\t83 f8 03             \tcmp    $0x3,%eax\n 11e:\t75 20                \tjne    140 <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE+0x140>\n 120:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 124:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 127:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n 12b:\tf3 0f 10 4d dc       \tmovss  -0x24(%rbp),%xmm1\n 130:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n 134:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 138:\tf3 0f 11 80 8c 00 00 \tmovss  %xmm0,0x8c(%rax)\n 13f:\t00 \n 140:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 144:\t48 8d 50 60          \tlea    0x60(%rax),%rdx\n 148:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 14c:\t48 89 c6             \tmov    %rax,%rsi\n 14f:\t48 89 d7             \tmov    %rdx,%rdi\n 152:\te8 00 00 00 00       \tcallq  157 <_ZN3irr3gui11IGUIElement19setRelativePositionERKNS_4core4rectIiEE+0x157>\n 157:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 15b:\t48 8b 00             \tmov    (%rax),%rax\n 15e:\t48 83 c0 18          \tadd    $0x18,%rax\n 162:\t48 8b 10             \tmov    (%rax),%rdx\n 165:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 169:\t48 89 c7             \tmov    %rax,%rdi\n 16c:\tff d2                \tcallq  *%rdx\n 16e:\t90                   \tnop\n 16f:\tc9                   \tleaveq \n 170:\tc3                   \tretq   ", "code_s": "__int64 __fastcall irr gui IGUIElement setRelativePosition(__int64 a1,\n                                                           int *a2) {\n  __int64 v2;\n  float v5;\n  float v6;\n  char v7[Number];\n  float v8;\n  float v9;\n  char *v10;\n  if (*(_QWORD *)(a1 + Number)) {\n    v2 = *(_QWORD *)(a1 + Number);\n    irr gui IGUIElement getAbsolutePosition((irr gui IGUIElement *)v7);\n    v10 = v7;\n    v8 = (float)(int)((unsigned __int64)irr core rect<int> getSize(v7, v2) >>\n                      Number);\n    v9 = (float)(int)irr core rect<int> getSize(v10, v2);\n    irr core dimension2d<float> dimension2d(&v5, &v9, &v8);\n    if (*(_DWORD *)(a1 + Number) == Number)\n      *(float *)(a1 + Number) = (float)*a2 / v5;\n    if (*(_DWORD *)(a1 + Number) == Number)\n      *(float *)(a1 + Number) = (float)a2[Number] / v5;\n    if (*(_DWORD *)(a1 + Number) == Number)\n      *(float *)(a1 + Number) = (float)a2[Number] / v6;\n    if (*(_DWORD *)(a1 + Number) == Number)\n      *(float *)(a1 + Number) = (float)a2[Number] / v6;\n  }\n  irr core rect<int> operator=(a1 + Number, (__int64)a2);\n  return (*(__int64(__fastcall **)(__int64))(*(_QWORD *)a1 + Number L))(a1);\n}", "code_t": "void __cdecl irr gui IGUIElement setRelativePosition(\n    irr gui IGUIElement *const this, const irr core rect<int> *r) {\n  irr core dimension2df <span class=\"supfact\">d</span>;\n  irr core rect<int> <span class=\"supfact\">v3</span>;\n  float height;\n  float width;\n  const irr core rect<int> *r2;\n  if (this->Parent) {\n    irr gui IGUIElement getAbsolutePosition((const irr gui IGUIElement *const) &\n                                            <span class=\"supfact\">v3</span>);\n    r2 = &<span class=\"supfact\">v3</span>;\n    height = (float)irr core rect<int> getSize(&<span class=\"supfact\">v3</span>).Height;\n    width = (float)irr core rect<int> getSize(r2).Width;\n    irr core dimension2d<float> dimension2d(&<span class=\"supfact\">d</span>, &width,\n                                            &height);\n    if (this->AlignLeft == EGUIA_SCALE)\n      this->ScaleRect.UpperLeftCorner.X =\n          (float)r->UpperLeftCorner.X / <span class=\"supfact\">d</span>.Width;\n    if (this->AlignRight == EGUIA_SCALE)\n      this->ScaleRect.LowerRightCorner.X =\n          (float)r->LowerRightCorner.X / <span class=\"supfact\">d</span>.Width;\n    if (this->AlignTop == EGUIA_SCALE)\n      this->ScaleRect.UpperLeftCorner.Y =\n          (float)r->UpperLeftCorner.Y / <span class=\"supfact\">d</span>.Height;\n    if (this->AlignBottom == EGUIA_SCALE)\n      this->ScaleRect.LowerRightCorner.Y =\n          (float)r->LowerRightCorner.Y / <span class=\"supfact\">d</span>.Height;\n  }\n  irr core rect<int> operator=(&this->DesiredRect, r);\n  (*((void(__fastcall **)(\n         irr gui IGUIElement *const))this->_vptr_IEventReceiver +\n     Number))(this);\n}", "var": [{"name": "v5", "type": "struct irr::core::dimension2df { float Width; float Height; }", "pred_name": "d", "ref_name": "d", "ref_type": "struct irr::core::dimension2df { float Width; float Height; }"}, {"name": "v7", "type": "struct irr::core::rect<int> { irr::core::vector2d<int> UpperLeftCorner; irr::core::vector2d<int> LowerRightCorner; }", "pred_name": "v3", "ref_name": "v3", "ref_type": "struct irr::core::rect<int> { irr::core::vector2d<int> UpperLeftCorner; irr::core::vector2d<int> LowerRightCorner; }"}], "body_in_train": true}, {"repo_owner": "li-ch", "repo_name": "rdma-examples", "path": "li-ch/rdma-examples/e6f257de96c514738804c650444ce5c85df557e1143bef285a74e10cc7bdbbe5", "path_in_repo": "li-ch/rdma-examples/rdma_st/src/3_rdma/6-rc_write/hello_world_rc_write.o", "objdump": "0000000000000d45 <modify_qp_to_rts>:\n     d45:\t55                   \tpush   %rbp\n     d46:\t48 89 e5             \tmov    %rsp,%rbp\n     d49:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n     d50:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n     d57:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n     d5e:\tba 90 00 00 00       \tmov    $0x90,%edx\n     d63:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d68:\t48 89 c7             \tmov    %rax,%rdi\n     d6b:\te8 00 00 00 00       \tcallq  d70 <modify_qp_to_rts+0x2b>\n     d70:\tc7 85 60 ff ff ff 03 \tmovl   $0x3,-0xa0(%rbp)\n     d77:\t00 00 00 \n     d7a:\tc6 45 e2 12          \tmovb   $0x12,-0x1e(%rbp)\n     d7e:\tc6 45 e3 06          \tmovb   $0x6,-0x1d(%rbp)\n     d82:\tc6 45 e4 00          \tmovb   $0x0,-0x1c(%rbp)\n     d86:\tc7 85 78 ff ff ff 00 \tmovl   $0x0,-0x88(%rbp)\n     d8d:\t00 00 00 \n     d90:\tc6 45 de 00          \tmovb   $0x0,-0x22(%rbp)\n     d94:\tc7 45 fc 01 2e 01 00 \tmovl   $0x12e01,-0x4(%rbp)\n     d9b:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     d9e:\t48 8d 8d 60 ff ff ff \tlea    -0xa0(%rbp),%rcx\n     da5:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     dac:\t48 89 ce             \tmov    %rcx,%rsi\n     daf:\t48 89 c7             \tmov    %rax,%rdi\n     db2:\te8 00 00 00 00       \tcallq  db7 <modify_qp_to_rts+0x72>\n     db7:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     dba:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n     dbe:\t74 23                \tje     de3 <modify_qp_to_rts+0x9e>\n     dc0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # dc7 <modify_qp_to_rts+0x82>\n     dc7:\t48 89 c1             \tmov    %rax,%rcx\n     dca:\tba 21 00 00 00       \tmov    $0x21,%edx\n     dcf:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     dd4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     dd9:\te8 00 00 00 00       \tcallq  dde <modify_qp_to_rts+0x99>\n     dde:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     de1:\teb 05                \tjmp    de8 <modify_qp_to_rts+0xa3>\n     de3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     de8:\tc9                   \tleaveq \n     de9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall modify_qp_to_rts(__int64 a1) {\n  int s[Number];\n  unsigned int v3;\n  int v4;\n  memset(s, Number, Number);\n  s[Number] = Number;\n  HIWORD(s[Number]) = Number;\n  LOBYTE(s[Number]) = Number;\n  s[Number] = Number;\n  BYTE2(s[Number]) = Number;\n  v4 = Number;\n  v3 = ibv_modify_qp(a1, s, Number L);\n  if (!v3)\n    return Number L;\n  fwrite(String, Number, Number, stderr);\n  return v3;\n}", "code_t": "int __cdecl modify_qp_to_rts(ibv_qp *qp) {\n  ibv_qp_attr <span class=\"supfact\">attr</span>;\n  int rc;\n  int flags;\n  memset(&<span class=\"supfact\">attr</span>, Number, sizeof(<span class=\"supfact\">attr</span>));\n  <span class=\"supfact\">attr</span>.qp_state = IBV_QPS_RTS;\n  <span class=\"supfact\">attr</span>.timeout = Number;\n  <span class=\"supfact\">attr</span>.retry_cnt = Number;\n  <span class=\"supfact\">attr</span>.rnr_retry = Number;\n  <span class=\"supfact\">attr</span>.sq_psn = Number;\n  <span class=\"supfact\">attr</span>.max_rd_atomic = Number;\n  flags = Number;\n  rc = ibv_modify_qp(qp, &<span class=\"supfact\">attr</span>, Number L);\n  if (!rc)\n    return Number;\n  fwrite(String, Number, Number, stderr);\n  return rc;\n}", "var": [{"name": "s", "type": "struct ibv_qp_attr { ibv_qp_state qp_state; ibv_qp_state cur_qp_state; ibv_mtu path_mtu; ibv_mig_state path_mig_state; uint32_t qkey; uint32_t rq_psn; uint32_t sq_psn; uint32_t dest_qp_num; unsigned int qp_access_flags; ibv_qp_cap cap; ibv_ah_attr ah_attr; ibv_ah_attr alt_ah_attr; uint16_t pkey_index; uint16_t alt_pkey_index; uint8_t en_sqd_async_notify; uint8_t sq_draining; uint8_t max_rd_atomic; uint8_t max_dest_rd_atomic; uint8_t min_rnr_timer; uint8_t port_num; uint8_t timeout; uint8_t retry_cnt; uint8_t rnr_retry; uint8_t alt_port_num; uint8_t alt_timeout; PADDING (1); uint32_t rate_limit; PADDING (4); }", "pred_name": "attr", "ref_name": "attr", "ref_type": "struct ibv_qp_attr { ibv_qp_state qp_state; ibv_qp_state cur_qp_state; ibv_mtu path_mtu; ibv_mig_state path_mig_state; uint32_t qkey; uint32_t rq_psn; uint32_t sq_psn; uint32_t dest_qp_num; unsigned int qp_access_flags; ibv_qp_cap cap; ibv_ah_attr ah_attr; ibv_ah_attr alt_ah_attr; uint16_t pkey_index; uint16_t alt_pkey_index; uint8_t en_sqd_async_notify; uint8_t sq_draining; uint8_t max_rd_atomic; uint8_t max_dest_rd_atomic; uint8_t min_rnr_timer; uint8_t port_num; uint8_t timeout; uint8_t retry_cnt; uint8_t rnr_retry; uint8_t alt_port_num; uint8_t alt_timeout; PADDING (1); uint32_t rate_limit; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "wtlin2015", "repo_name": "git-test", "path": "wtlin2015/git-test/448b5c6480afeb1708122aa7afe5897a45c70cfa860c7a07897732c43218a375", "path_in_repo": "wtlin2015/git-test/YahooKeyKey-Source-1.1.2528/ExternalLibraries/UnitTest++/src/DeferredTestReporter.o", "objdump": "0000000000000000 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 38          \tsub    $0x38,%rsp\n   9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  11:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  15:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  19:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  1d:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  21:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  25:\t48 89 d6             \tmov    %rdx,%rsi\n  28:\t48 89 c7             \tmov    %rax,%rdi\n  2b:\te8 00 00 00 00       \tcallq  30 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x30>\n  30:\t84 c0                \ttest   %al,%al\n  32:\t74 39                \tje     6d <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x6d>\n  34:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  38:\t48 89 c7             \tmov    %rax,%rdi\n  3b:\te8 00 00 00 00       \tcallq  40 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x40>\n  40:\t48 89 c3             \tmov    %rax,%rbx\n  43:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  47:\t48 89 c7             \tmov    %rax,%rdi\n  4a:\te8 00 00 00 00       \tcallq  4f <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x4f>\n  4f:\t48 89 de             \tmov    %rbx,%rsi\n  52:\t48 89 c7             \tmov    %rax,%rdi\n  55:\te8 00 00 00 00       \tcallq  5a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x5a>\n  5a:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  5e:\t48 89 c7             \tmov    %rax,%rdi\n  61:\te8 00 00 00 00       \tcallq  66 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x66>\n  66:\t48 83 45 e8 28       \taddq   $0x28,-0x18(%rbp)\n  6b:\teb b0                \tjmp    1d <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x1d>\n  6d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  71:\teb 33                \tjmp    a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0xa6>\n  73:\t48 89 c7             \tmov    %rax,%rdi\n  76:\te8 00 00 00 00       \tcallq  7b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x7b>\n  7b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  7f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  83:\t48 89 d6             \tmov    %rdx,%rsi\n  86:\t48 89 c7             \tmov    %rax,%rdi\n  89:\te8 00 00 00 00       \tcallq  8e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x8e>\n  8e:\te8 00 00 00 00       \tcallq  93 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x93>\n  93:\t48 89 c3             \tmov    %rax,%rbx\n  96:\te8 00 00 00 00       \tcallq  9b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0x9b>\n  9b:\t48 89 d8             \tmov    %rbx,%rax\n  9e:\t48 89 c7             \tmov    %rax,%rdi\n  a1:\te8 00 00 00 00       \tcallq  a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_+0xa6>\n  a6:\t48 83 c4 38          \tadd    $0x38,%rsp\n  aa:\t5b                   \tpop    %rbx\n  ab:\t5d                   \tpop    %rbp\n  ac:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __uninitialized_copy<false> __uninit_copy<\n    __gnu_cxx __normal_iterator<\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>> const *,\n        std vector<\n            std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>>,\n    std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>>> *>(\n    __int64 a1, __int64 a2, __int64 a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 v6;\n  __int64 v7[Number];\n  __int64 v8;\n  v7[Number] = a1;\n  v6 = a2;\n  v8 = a3;\n  while (\n      (unsigned __int8)__gnu_cxx operator!=\n      <std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>> const *,\n       std vector<\n           std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                  std allocator<char>>>>>(\n          v7, &v6)) {\n    v3 = __gnu_cxx __normal_iterator<\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>> const *,\n        std vector<\n            std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>>\n    operator*(v7);\n    v4 = std __addressof<\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>>>(v8);\n    std _Construct<\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>>,\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>>>(v4, v3);\n    __gnu_cxx __normal_iterator<\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>> const *,\n        std vector<\n            std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>>\n    operator++(v7);\n    v8 += Number L;\n  }\n  return v8;\n}", "code_t": "std pair<int, std __cxx11 basic_string<\n                  char, std char_traits<char>,\n                  std allocator<char>>> *__cdecl std __uninitialized_copy<false>\n__uninit_copy<\n    __gnu_cxx __normal_iterator<\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>> const *,\n        std vector<\n            std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>>,\n    std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>>> *>(\n    __gnu_cxx __normal_iterator<\n        const std\n            pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>> *,\n        std vector<\n            std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>>\n        <span class=\"supfact\">__first</span>,\n    __gnu_cxx __normal_iterator<\n        const std\n            pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>> *,\n        std vector<\n            std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>>\n        <span class=\"supfact\">__last</span>,\n    std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>>> *__result) {\n  const std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>> *v3;\n  std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                         std allocator<char>>> *v4;\n  __gnu_cxx __normal_iterator<\n      const std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>> *,\n      std vector<\n          std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>>>>\n      <span class=\"supfact\">__lasta</span>;\n  __gnu_cxx __normal_iterator<\n      const std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>> *,\n      std vector<\n          std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>>>>\n      <span class=\"supfact\">__firsta</span>;\n  std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                         std allocator<char>>> *__cur;\n  <span class=\"supfact\">__firsta</span>._M_current = <span class=\"supfact\">__first</span>._M_current;\n  <span class=\"supfact\">__lasta</span>._M_current = <span class=\"supfact\">__last</span>._M_current;\n  __cur = __result;\n  while (\n      __gnu_cxx operator!=\n      <std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>> const *,\n       std vector<\n           std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                  std allocator<char>>>>>(\n          &<span class=\"supfact\">__firsta</span>, &<span class=\"supfact\">__lasta</span>)) {\n    v3 = __gnu_cxx __normal_iterator<\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>> const *,\n        std vector<\n            std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>>\n    operator*(&<span class=\"supfact\">__firsta</span>);\n    v4 = std __addressof<\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>>>(__cur);\n    std _Construct<\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>>,\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>>>(v4, v3);\n    __gnu_cxx __normal_iterator<\n        std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>>> const *,\n        std vector<\n            std pair<int, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>>\n    operator++(&<span class=\"supfact\">__firsta</span>);\n    ++__cur;\n  }\n  return __cur;\n}", "var": [{"name": "a1", "type": "struct __gnu_cxx::__normal_iterator<const std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >*,std::vector<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >> > { const std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > * _M_current; }", "pred_name": "__first", "ref_name": "__first", "ref_type": "struct __gnu_cxx::__normal_iterator<const std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >*,std::vector<std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >> > { const std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > * _M_current; }"}, {"name": "a2", "type": "struct __gnu_cxx::__normal_iterator<const std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >*,std::vector<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >> > { const std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > * _M_current; }", "pred_name": "__last", "ref_name": "__last", "ref_type": "struct __gnu_cxx::__normal_iterator<const std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >*,std::vector<std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >> > { const std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > * _M_current; }"}, {"name": "v6", "type": "struct __gnu_cxx::__normal_iterator<const std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >*,std::vector<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >> > { const std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > * _M_current; }", "pred_name": "__lasta", "ref_name": "__lasta", "ref_type": "struct __gnu_cxx::__normal_iterator<const std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >*,std::vector<std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >> > { const std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > * _M_current; }"}, {"name": "v7", "type": "struct __gnu_cxx::__normal_iterator<const std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >*,std::vector<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >> > { const std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > * _M_current; }", "pred_name": "__firsta", "ref_name": "__firsta", "ref_type": "struct __gnu_cxx::__normal_iterator<const std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >*,std::vector<std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > >> > { const std::pair<int,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > * _M_current; }"}], "body_in_train": true}, {"repo_owner": "xurubin", "repo_name": "wl530g-mini", "path": "xurubin/wl530g-mini/cbf1f1aaf82fc3d58684c8f62d8ad5cb42060d9d3b81017e222910243ad073f0", "path_in_repo": "xurubin/wl530g-mini/Src/uClinux-dist/user/wget/src/wget", "objdump": "", "code_s": "int getsockname(int fd, struct sockaddr *addr, socklen_t *len) {\n  return getsockname(fd, addr, len);\n}", "code_t": "int getsockname(int fd, struct sockaddr *<span class=\"supfact\">addr</span>, socklen_t *len) {\n  return getsockname(fd, <span class=\"supfact\">addr</span>, len);\n}", "var": [{"name": "addr", "type": "struct sockaddr *", "pred_name": "addr", "ref_name": "addr", "ref_type": "struct sockaddr *"}], "body_in_train": true}, {"repo_owner": "qaul", "repo_name": "qaul.net_legacy", "path": "qaul/qaul.net_legacy/3bae5286e51979a009ded9b484a259dfcde358997dcb5d2e100e7b34b1c29541", "path_in_repo": "qaul/qaul.net_legacy/android/external/olsrd/lib/tas/src/lua/lparser.o", "objdump": "0000000000002c8f <forstat>:\n    2c8f:\t55                   \tpush   %rbp\n    2c90:\t48 89 e5             \tmov    %rsp,%rbp\n    2c93:\t48 83 ec 40          \tsub    $0x40,%rsp\n    2c97:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    2c9b:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    2c9e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2ca2:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    2ca6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2caa:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n    2cae:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2cb2:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2cb7:\t48 89 ce             \tmov    %rcx,%rsi\n    2cba:\t48 89 c7             \tmov    %rax,%rdi\n    2cbd:\te8 d0 dd ff ff       \tcallq  a92 <enterblock>\n    2cc2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2cc6:\t48 89 c7             \tmov    %rax,%rdi\n    2cc9:\te8 32 d3 ff ff       \tcallq  0 <next>\n    2cce:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2cd2:\t48 89 c7             \tmov    %rax,%rdi\n    2cd5:\te8 2e d5 ff ff       \tcallq  208 <str_checkname>\n    2cda:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2cde:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2ce2:\t8b 40 10             \tmov    0x10(%rax),%eax\n    2ce5:\t3d 0b 01 00 00       \tcmp    $0x10b,%eax\n    2cea:\t74 29                \tje     2d15 <forstat+0x86>\n    2cec:\t3d 0b 01 00 00       \tcmp    $0x10b,%eax\n    2cf1:\t7f 37                \tjg     2d2a <forstat+0x9b>\n    2cf3:\t83 f8 2c             \tcmp    $0x2c,%eax\n    2cf6:\t74 1d                \tje     2d15 <forstat+0x86>\n    2cf8:\t83 f8 3d             \tcmp    $0x3d,%eax\n    2cfb:\t75 2d                \tjne    2d2a <forstat+0x9b>\n    2cfd:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    2d00:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    2d04:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2d08:\t48 89 ce             \tmov    %rcx,%rsi\n    2d0b:\t48 89 c7             \tmov    %rax,%rdi\n    2d0e:\te8 b3 fc ff ff       \tcallq  29c6 <fornum>\n    2d13:\teb 28                \tjmp    2d3d <forstat+0xae>\n    2d15:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    2d19:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2d1d:\t48 89 d6             \tmov    %rdx,%rsi\n    2d20:\t48 89 c7             \tmov    %rax,%rdi\n    2d23:\te8 0d fe ff ff       \tcallq  2b35 <forlist>\n    2d28:\teb 13                \tjmp    2d3d <forstat+0xae>\n    2d2a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2d2e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2d35 <forstat+0xa6>\n    2d35:\t48 89 c7             \tmov    %rax,%rdi\n    2d38:\te8 00 00 00 00       \tcallq  2d3d <forstat+0xae>\n    2d3d:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    2d40:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2d44:\t89 d1                \tmov    %edx,%ecx\n    2d46:\tba 08 01 00 00       \tmov    $0x108,%edx\n    2d4b:\tbe 06 01 00 00       \tmov    $0x106,%esi\n    2d50:\t48 89 c7             \tmov    %rax,%rdi\n    2d53:\te8 01 d4 ff ff       \tcallq  159 <check_match>\n    2d58:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2d5c:\t48 89 c7             \tmov    %rax,%rdi\n    2d5f:\te8 89 dd ff ff       \tcallq  aed <leaveblock>\n    2d64:\t90                   \tnop\n    2d65:\tc9                   \tleaveq \n    2d66:\tc3                   \tretq   ", "code_s": "__int64 __fastcall forstat(__int64 a1, unsigned int a2) {\n  int v2;\n  char v4[Number];\n  __int64 v5;\n  __int64 v6;\n  v6 = *(_QWORD *)(a1 + Number);\n  enterblock(v6, (__int64)v4, Number);\n  next(a1);\n  v5 = str_checkname(a1);\n  v2 = *(_DWORD *)(a1 + Number);\n  if (v2 == Number)\n    goto LABEL_6;\n  if (v2 > Number) {\n  LABEL_7:\n    luaX_syntaxerror(a1, String);\n    goto LABEL_8;\n  }\n  if (v2 == Number) {\n  LABEL_6:\n    forlist(a1, v5);\n    goto LABEL_8;\n  }\n  if (v2 != Number)\n    goto LABEL_7;\n  fornum(a1, v5, a2);\nLABEL_8:\n  check_match(a1, Number, Number, a2);\n  return leaveblock(v6);\n}", "code_t": "void __cdecl forstat(LexState_0 *ls, int line) {\n  int v2;\n  BlockCnt_0 <span class=\"supfact\">bl_0</span>;\n  TString_0 *varname;\n  FuncState_0 *fs_0;\n  fs_0 = ls->fs;\n  enterblock(fs_0, &<span class=\"supfact\">bl_0</span>, Number);\n  next(ls);\n  varname = str_checkname(ls);\n  v2 = ls->t.token;\n  if (v2 == Number)\n    goto LABEL_6;\n  if (v2 > Number) {\n  LABEL_7:\n    luaX_syntaxerror(ls, String);\n    goto LABEL_8;\n  }\n  if (v2 == Number) {\n  LABEL_6:\n    forlist(ls, varname);\n    goto LABEL_8;\n  }\n  if (v2 != Number)\n    goto LABEL_7;\n  fornum(ls, varname, line);\nLABEL_8:\n  check_match(ls, Number, Number, line);\n  leaveblock(fs_0);\n}", "var": [{"name": "v4", "type": "char[32]", "pred_name": "buf", "ref_name": "bl_0", "ref_type": "struct BlockCnt_0 { BlockCnt * previous; int breaklist; int nactvar; int upval; int isbreakable; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/86fa5aa0fbd3eddabbaf3f280b5c87028c14c996328b040303fbd04dfcae7f6c", "path_in_repo": "XanClic/qemu//hw/block/nvme.o", "objdump": "0000000000002ba4 <_nocheck__trace_nvme_err_invalid_create_sq_qflags>:\n    2ba4:\t55                   \tpush   %rbp\n    2ba5:\t48 89 e5             \tmov    %rsp,%rbp\n    2ba8:\t41 55                \tpush   %r13\n    2baa:\t41 54                \tpush   %r12\n    2bac:\t53                   \tpush   %rbx\n    2bad:\t48 83 ec 38          \tsub    $0x38,%rsp\n    2bb1:\t89 f8                \tmov    %edi,%eax\n    2bb3:\t66 89 45 bc          \tmov    %ax,-0x44(%rbp)\n    2bb7:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2bbe:\t00 00 \n    2bc0:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    2bc4:\t31 c0                \txor    %eax,%eax\n    2bc6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2bcc <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0x28>\n    2bcc:\t85 c0                \ttest   %eax,%eax\n    2bce:\t0f 95 c0             \tsetne  %al\n    2bd1:\t0f b6 c0             \tmovzbl %al,%eax\n    2bd4:\t48 85 c0             \ttest   %rax,%rax\n    2bd7:\t74 5e                \tje     2c37 <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0x93>\n    2bd9:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 2be0 <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0x3c>\n    2be0:\t66 85 c0             \ttest   %ax,%ax\n    2be3:\t74 52                \tje     2c37 <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0x93>\n    2be5:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    2bea:\te8 d7 dc ff ff       \tcallq  8c6 <qemu_loglevel_mask>\n    2bef:\t84 c0                \ttest   %al,%al\n    2bf1:\t74 44                \tje     2c37 <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0x93>\n    2bf3:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    2bf7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2bfc:\t48 89 c7             \tmov    %rax,%rdi\n    2bff:\te8 00 00 00 00       \tcallq  2c04 <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0x60>\n    2c04:\t0f b7 5d bc          \tmovzwl -0x44(%rbp),%ebx\n    2c08:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2c0c:\t49 89 c5             \tmov    %rax,%r13\n    2c0f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2c13:\t49 89 c4             \tmov    %rax,%r12\n    2c16:\te8 00 00 00 00       \tcallq  2c1b <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0x77>\n    2c1b:\t41 89 d8             \tmov    %ebx,%r8d\n    2c1e:\t4c 89 e9             \tmov    %r13,%rcx\n    2c21:\t4c 89 e2             \tmov    %r12,%rdx\n    2c24:\t89 c6                \tmov    %eax,%esi\n    2c26:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2c2d <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0x89>\n    2c2d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2c32:\te8 00 00 00 00       \tcallq  2c37 <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0x93>\n    2c37:\t90                   \tnop\n    2c38:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2c3c:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    2c43:\t00 00 \n    2c45:\t74 05                \tje     2c4c <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0xa8>\n    2c47:\te8 00 00 00 00       \tcallq  2c4c <_nocheck__trace_nvme_err_invalid_create_sq_qflags+0xa8>\n    2c4c:\t48 83 c4 38          \tadd    $0x38,%rsp\n    2c50:\t5b                   \tpop    %rbx\n    2c51:\t41 5c                \tpop    %r12\n    2c53:\t41 5d                \tpop    %r13\n    2c55:\t5d                   \tpop    %rbp\n    2c56:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_nvme_err_invalid_create_sq_qflags(\n    unsigned __int16 a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval tv;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_NVME_ERR_INVALID_CREATE_SQ_QFLAGS_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&tv, Number L);\n    v1 = tv.tv_usec;\n    v2 = tv.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl nocheck__trace_nvme_err_invalid_create_sq_qflags(uint16_t qflags) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_NVME_ERR_INVALID_CREATE_SQ_QFLAGS_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, qflags);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "_now", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "raphielscape", "repo_name": "linux-scape-workstation", "path": "raphielscape/linux-scape-workstation/b1fc7c636bad19ce052ce9ab89f23b318ffecd973ab06bf8fa74331815d4bd5c", "path_in_repo": "raphielscape/linux-scape-workstation/tools/perf/util/evsel.o", "objdump": "00000000000045c2 <evsel__open>:\n    45c2:\t55                   \tpush   %rbp\n    45c3:\t48 89 e5             \tmov    %rsp,%rbp\n    45c6:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n    45ca:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    45ce:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n    45d2:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n    45d6:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    45dd:\t00 00 \n    45df:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    45e3:\t31 c0                \txor    %eax,%eax\n    45e5:\t48 c7 45 d8 08 00 00 \tmovq   $0x8,-0x28(%rbp)\n    45ec:\t00 \n    45ed:\tc7 45 b8 ff ff ff ff \tmovl   $0xffffffff,-0x48(%rbp)\n    45f4:\tc7 45 c0 00 00 00 00 \tmovl   $0x0,-0x40(%rbp)\n    45fb:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4602 <evsel__open+0x40>\n    4602:\t84 c0                \ttest   %al,%al\n    4604:\t74 0f                \tje     4615 <evsel__open+0x53>\n    4606:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    460a:\t0f b6 40 3b          \tmovzbl 0x3b(%rax),%eax\n    460e:\t83 e0 08             \tand    $0x8,%eax\n    4611:\t84 c0                \ttest   %al,%al\n    4613:\t75 1a                \tjne    462f <evsel__open+0x6d>\n    4615:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 461c <evsel__open+0x5a>\n    461c:\t84 c0                \ttest   %al,%al\n    461e:\t74 19                \tje     4639 <evsel__open+0x77>\n    4620:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4624:\t0f b6 40 3b          \tmovzbl 0x3b(%rax),%eax\n    4628:\t83 e0 80             \tand    $0xffffff80,%eax\n    462b:\t84 c0                \ttest   %al,%al\n    462d:\t74 0a                \tje     4639 <evsel__open+0x77>\n    462f:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    4634:\te9 07 09 00 00       \tjmpq   4f40 <evsel__open+0x97e>\n    4639:\t48 83 7d 90 00       \tcmpq   $0x0,-0x70(%rbp)\n    463e:\t75 39                \tjne    4679 <evsel__open+0xb7>\n    4640:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4647 <evsel__open+0x85>\n    4647:\t48 85 c0             \ttest   %rax,%rax\n    464a:\t75 22                \tjne    466e <evsel__open+0xac>\n    464c:\te8 00 00 00 00       \tcallq  4651 <evsel__open+0x8f>\n    4651:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 4658 <evsel__open+0x96>\n    4658:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 465f <evsel__open+0x9d>\n    465f:\t48 85 c0             \ttest   %rax,%rax\n    4662:\t75 0a                \tjne    466e <evsel__open+0xac>\n    4664:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    4669:\te9 d2 08 00 00       \tjmpq   4f40 <evsel__open+0x97e>\n    466e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4675 <evsel__open+0xb3>\n    4675:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n    4679:\t48 83 7d 88 00       \tcmpq   $0x0,-0x78(%rbp)\n    467e:\t75 3e                \tjne    46be <evsel__open+0xfc>\n    4680:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4687 <evsel__open+0xc5>\n    4687:\t48 85 c0             \ttest   %rax,%rax\n    468a:\t75 27                \tjne    46b3 <evsel__open+0xf1>\n    468c:\tbf ff ff ff ff       \tmov    $0xffffffff,%edi\n    4691:\te8 00 00 00 00       \tcallq  4696 <evsel__open+0xd4>\n    4696:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 469d <evsel__open+0xdb>\n    469d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 46a4 <evsel__open+0xe2>\n    46a4:\t48 85 c0             \ttest   %rax,%rax\n    46a7:\t75 0a                \tjne    46b3 <evsel__open+0xf1>\n    46a9:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    46ae:\te9 8d 08 00 00       \tjmpq   4f40 <evsel__open+0x97e>\n    46b3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 46ba <evsel__open+0xf8>\n    46ba:\t48 89 45 88          \tmov    %rax,-0x78(%rbp)\n    46be:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    46c2:\t0f b6 80 b8 00 00 00 \tmovzbl 0xb8(%rax),%eax\n    46c9:\t84 c0                \ttest   %al,%al\n    46cb:\t74 09                \tje     46d6 <evsel__open+0x114>\n    46cd:\tc7 45 b4 01 00 00 00 \tmovl   $0x1,-0x4c(%rbp)\n    46d4:\teb 0a                \tjmp    46e0 <evsel__open+0x11e>\n    46d6:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    46da:\t8b 40 04             \tmov    0x4(%rax),%eax\n    46dd:\t89 45 b4             \tmov    %eax,-0x4c(%rbp)\n    46e0:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    46e4:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    46eb:\t48 85 c0             \ttest   %rax,%rax\n    46ee:\t75 26                \tjne    4716 <evsel__open+0x154>\n    46f0:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    46f4:\t8b 48 04             \tmov    0x4(%rax),%ecx\n    46f7:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    46fb:\t8b 55 b4             \tmov    -0x4c(%rbp),%edx\n    46fe:\t89 ce                \tmov    %ecx,%esi\n    4700:\t48 89 c7             \tmov    %rax,%rdi\n    4703:\te8 00 00 00 00       \tcallq  4708 <evsel__open+0x146>\n    4708:\t85 c0                \ttest   %eax,%eax\n    470a:\t79 0a                \tjns    4716 <evsel__open+0x154>\n    470c:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    4711:\te9 2a 08 00 00       \tjmpq   4f40 <evsel__open+0x97e>\n    4716:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    471a:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n    4721:\t48 85 c0             \ttest   %rax,%rax\n    4724:\t74 18                \tje     473e <evsel__open+0x17c>\n    4726:\t48 83 4d d8 04       \torq    $0x4,-0x28(%rbp)\n    472b:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    472f:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n    4736:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4739:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n    473c:\teb 01                \tjmp    473f <evsel__open+0x17d>\n    473e:\t90                   \tnop\n    473f:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4746 <evsel__open+0x184>\n    4746:\t84 c0                \ttest   %al,%al\n    4748:\t74 0b                \tje     4755 <evsel__open+0x193>\n    474a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    474e:\tc7 40 6c 01 00 00 00 \tmovl   $0x1,0x6c(%rax)\n    4755:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 475c <evsel__open+0x19a>\n    475c:\t84 c0                \ttest   %al,%al\n    475e:\t74 19                \tje     4779 <evsel__open+0x1b7>\n    4760:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4764:\t0f b6 50 3b          \tmovzbl 0x3b(%rax),%edx\n    4768:\t83 e2 fd             \tand    $0xfffffffd,%edx\n    476b:\t88 50 3b             \tmov    %dl,0x3b(%rax)\n    476e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4772:\tc7 40 6c 00 00 00 00 \tmovl   $0x0,0x6c(%rax)\n    4779:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4780 <evsel__open+0x1be>\n    4780:\t84 c0                \ttest   %al,%al\n    4782:\t74 05                \tje     4789 <evsel__open+0x1c7>\n    4784:\t48 83 65 d8 f7       \tandq   $0xfffffffffffffff7,-0x28(%rbp)\n    4789:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4790 <evsel__open+0x1ce>\n    4790:\t84 c0                \ttest   %al,%al\n    4792:\t74 0e                \tje     47a2 <evsel__open+0x1e0>\n    4794:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4798:\t0f b6 50 3a          \tmovzbl 0x3a(%rax),%edx\n    479c:\t83 e2 7f             \tand    $0x7f,%edx\n    479f:\t88 50 3a             \tmov    %dl,0x3a(%rax)\n    47a2:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 47a9 <evsel__open+0x1e7>\n    47a9:\t84 c0                \ttest   %al,%al\n    47ab:\t74 34                \tje     47e1 <evsel__open+0x21f>\n    47ad:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    47b1:\t0f b6 50 3a          \tmovzbl 0x3a(%rax),%edx\n    47b5:\t83 e2 f7             \tand    $0xfffffff7,%edx\n    47b8:\t88 50 3a             \tmov    %dl,0x3a(%rax)\n    47bb:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    47bf:\t0f b6 40 3a          \tmovzbl 0x3a(%rax),%eax\n    47c3:\tc0 e8 03             \tshr    $0x3,%al\n    47c6:\t83 e0 01             \tand    $0x1,%eax\n    47c9:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n    47cd:\t83 e0 01             \tand    $0x1,%eax\n    47d0:\tc1 e0 04             \tshl    $0x4,%eax\n    47d3:\t89 c1                \tmov    %eax,%ecx\n    47d5:\t0f b6 42 3a          \tmovzbl 0x3a(%rdx),%eax\n    47d9:\t83 e0 ef             \tand    $0xffffffef,%eax\n    47dc:\t09 c8                \tor     %ecx,%eax\n    47de:\t88 42 3a             \tmov    %al,0x3a(%rdx)\n    47e1:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 47e8 <evsel__open+0x226>\n    47e8:\t84 c0                \ttest   %al,%al\n    47ea:\t74 16                \tje     4802 <evsel__open+0x240>\n    47ec:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    47f0:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n    47f4:\t80 e4 3f             \tand    $0x3f,%ah\n    47f7:\t48 89 c2             \tmov    %rax,%rdx\n    47fa:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    47fe:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n    4802:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4809 <evsel__open+0x247>\n    4809:\t84 c0                \ttest   %al,%al\n    480b:\t74 26                \tje     4833 <evsel__open+0x271>\n    480d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4811:\t0f b6 40 38          \tmovzbl 0x38(%rax),%eax\n    4815:\t83 e0 02             \tand    $0x2,%eax\n    4818:\t84 c0                \ttest   %al,%al\n    481a:\t74 17                \tje     4833 <evsel__open+0x271>\n    481c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4820:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    4824:\t48 83 e0 f3          \tand    $0xfffffffffffffff3,%rax\n    4828:\t48 89 c2             \tmov    %rax,%rdx\n    482b:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    482f:\t48 89 50 30          \tmov    %rdx,0x30(%rax)\n    4833:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 483a <evsel__open+0x278>\n    483a:\t84 c0                \ttest   %al,%al\n    483c:\t74 0e                \tje     484c <evsel__open+0x28a>\n    483e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4842:\t0f b6 50 3b          \tmovzbl 0x3b(%rax),%edx\n    4846:\t83 e2 df             \tand    $0xffffffdf,%edx\n    4849:\t88 50 3b             \tmov    %dl,0x3b(%rax)\n    484c:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4853 <evsel__open+0x291>\n    4853:\t84 c0                \ttest   %al,%al\n    4855:\t74 10                \tje     4867 <evsel__open+0x2a5>\n    4857:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    485b:\t0f b6 50 3b          \tmovzbl 0x3b(%rax),%edx\n    485f:\t83 e2 bf             \tand    $0xffffffbf,%edx\n    4862:\t88 50 3b             \tmov    %dl,0x3b(%rax)\n    4865:\teb 01                \tjmp    4868 <evsel__open+0x2a6>\n    4867:\t90                   \tnop\n    4868:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 486f <evsel__open+0x2ad>\n    486f:\t84 c0                \ttest   %al,%al\n    4871:\t74 0e                \tje     4881 <evsel__open+0x2bf>\n    4873:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4877:\t0f b6 50 3a          \tmovzbl 0x3a(%rax),%edx\n    487b:\t83 e2 fb             \tand    $0xfffffffb,%edx\n    487e:\t88 50 3a             \tmov    %dl,0x3a(%rax)\n    4881:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4885:\t48 83 c0 10          \tadd    $0x10,%rax\n    4889:\t48 89 c7             \tmov    %rax,%rdi\n    488c:\te8 dd fa ff ff       \tcallq  436e <display_attr>\n    4891:\tc7 45 ac 00 00 00 00 \tmovl   $0x0,-0x54(%rbp)\n    4898:\te9 1a 02 00 00       \tjmpq   4ab7 <evsel__open+0x4f5>\n    489d:\tc7 45 b0 00 00 00 00 \tmovl   $0x0,-0x50(%rbp)\n    48a4:\te9 fe 01 00 00       \tjmpq   4aa7 <evsel__open+0x4e5>\n    48a9:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    48ad:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n    48b4:\t48 85 c0             \ttest   %rax,%rax\n    48b7:\t75 26                \tjne    48df <evsel__open+0x31d>\n    48b9:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    48bd:\t0f b6 80 b8 00 00 00 \tmovzbl 0xb8(%rax),%eax\n    48c4:\t83 f0 01             \txor    $0x1,%eax\n    48c7:\t84 c0                \ttest   %al,%al\n    48c9:\t74 14                \tje     48df <evsel__open+0x31d>\n    48cb:\t8b 55 b0             \tmov    -0x50(%rbp),%edx\n    48ce:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    48d2:\t89 d6                \tmov    %edx,%esi\n    48d4:\t48 89 c7             \tmov    %rax,%rdi\n    48d7:\te8 00 00 00 00       \tcallq  48dc <evsel__open+0x31a>\n    48dc:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n    48df:\t8b 55 b0             \tmov    -0x50(%rbp),%edx\n    48e2:\t8b 4d ac             \tmov    -0x54(%rbp),%ecx\n    48e5:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    48e9:\t89 ce                \tmov    %ecx,%esi\n    48eb:\t48 89 c7             \tmov    %rax,%rdi\n    48ee:\te8 c2 f6 ff ff       \tcallq  3fb5 <get_group_fd>\n    48f3:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n    48f6:\te8 00 00 00 00       \tcallq  48fb <evsel__open+0x339>\n    48fb:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    48ff:\t8b 55 ac             \tmov    -0x54(%rbp),%edx\n    4902:\t48 63 d2             \tmovslq %edx,%rdx\n    4905:\t8b 54 90 08          \tmov    0x8(%rax,%rdx,4),%edx\n    4909:\t48 8b 7d d8          \tmov    -0x28(%rbp),%rdi\n    490d:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n    4910:\t8b 75 b8             \tmov    -0x48(%rbp),%esi\n    4913:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4917:\t49 89 f8             \tmov    %rdi,%r8\n    491a:\t48 89 c7             \tmov    %rax,%rdi\n    491d:\te8 04 fb ff ff       \tcallq  4426 <perf_event_open>\n    4922:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n    4925:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4929:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    4930:\t8b 55 b0             \tmov    -0x50(%rbp),%edx\n    4933:\t8b 4d ac             \tmov    -0x54(%rbp),%ecx\n    4936:\t89 ce                \tmov    %ecx,%esi\n    4938:\t48 89 c7             \tmov    %rax,%rdi\n    493b:\te8 57 ba ff ff       \tcallq  397 <xyarray__entry>\n    4940:\t8b 55 c8             \tmov    -0x38(%rbp),%edx\n    4943:\t89 10                \tmov    %edx,(%rax)\n    4945:\t83 7d c8 00          \tcmpl   $0x0,-0x38(%rbp)\n    4949:\t79 7c                \tjns    49c7 <evsel__open+0x405>\n    494b:\te8 00 00 00 00       \tcallq  4950 <evsel__open+0x38e>\n    4950:\t8b 00                \tmov    (%rax),%eax\n    4952:\tf7 d8                \tneg    %eax\n    4954:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n    4957:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    495b:\t8b 70 04             \tmov    0x4(%rax),%esi\n    495e:\t44 8b 45 bc          \tmov    -0x44(%rbp),%r8d\n    4962:\t8b 7d b0             \tmov    -0x50(%rbp),%edi\n    4965:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    4969:\t8b 55 ac             \tmov    -0x54(%rbp),%edx\n    496c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4970:\t45 89 c1             \tmov    %r8d,%r9d\n    4973:\t41 89 f8             \tmov    %edi,%r8d\n    4976:\t48 89 c7             \tmov    %rax,%rdi\n    4979:\te8 7d f8 ff ff       \tcallq  41fb <ignore_missing_thread>\n    497e:\t84 c0                \ttest   %al,%al\n    4980:\t74 14                \tje     4996 <evsel__open+0x3d4>\n    4982:\t83 6d b4 01          \tsubl   $0x1,-0x4c(%rbp)\n    4986:\t83 6d b0 01          \tsubl   $0x1,-0x50(%rbp)\n    498a:\tc7 45 bc 00 00 00 00 \tmovl   $0x0,-0x44(%rbp)\n    4991:\te9 0d 01 00 00       \tjmpq   4aa3 <evsel__open+0x4e1>\n    4996:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 499c <evsel__open+0x3da>\n    499c:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n    499f:\t89 d1                \tmov    %edx,%ecx\n    49a1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    49a6:\t89 c6                \tmov    %eax,%esi\n    49a8:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    49ad:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    49b2:\te8 00 00 00 00       \tcallq  49b7 <evsel__open+0x3f5>\n    49b7:\t90                   \tnop\n    49b8:\t83 7d bc e8          \tcmpl   $0xffffffe8,-0x44(%rbp)\n    49bc:\t0f 85 8c 01 00 00    \tjne    4b4e <evsel__open+0x58c>\n    49c2:\te9 0a 01 00 00       \tjmpq   4ad1 <evsel__open+0x50f>\n    49c7:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 49cd <evsel__open+0x40b>\n    49cd:\t8b 55 c8             \tmov    -0x38(%rbp),%edx\n    49d0:\t89 d1                \tmov    %edx,%ecx\n    49d2:\tba 00 00 00 00       \tmov    $0x0,%edx\n    49d7:\t89 c6                \tmov    %eax,%esi\n    49d9:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    49de:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    49e3:\te8 00 00 00 00       \tcallq  49e8 <evsel__open+0x426>\n    49e8:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    49ec:\t8b 80 a8 01 00 00    \tmov    0x1a8(%rax),%eax\n    49f2:\t85 c0                \ttest   %eax,%eax\n    49f4:\t0f 88 80 00 00 00    \tjs     4a7a <evsel__open+0x4b8>\n    49fa:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    49fd:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    4a00:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4a04:\t8b 80 a8 01 00 00    \tmov    0x1a8(%rax),%eax\n    4a0a:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    4a0d:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n    4a10:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    4a13:\tbe 08 24 04 40       \tmov    $0x40042408,%esi\n    4a18:\t89 c7                \tmov    %eax,%edi\n    4a1a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4a1f:\te8 00 00 00 00       \tcallq  4a24 <evsel__open+0x462>\n    4a24:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n    4a27:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n    4a2b:\t74 4d                \tje     4a7a <evsel__open+0x4b8>\n    4a2d:\te8 00 00 00 00       \tcallq  4a32 <evsel__open+0x470>\n    4a32:\t8b 00                \tmov    (%rax),%eax\n    4a34:\t83 f8 11             \tcmp    $0x11,%eax\n    4a37:\t74 41                \tje     4a7a <evsel__open+0x4b8>\n    4a39:\te8 00 00 00 00       \tcallq  4a3e <evsel__open+0x47c>\n    4a3e:\t8b 00                \tmov    (%rax),%eax\n    4a40:\t89 c7                \tmov    %eax,%edi\n    4a42:\te8 00 00 00 00       \tcallq  4a47 <evsel__open+0x485>\n    4a47:\t48 89 c1             \tmov    %rax,%rcx\n    4a4a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4a50 <evsel__open+0x48e>\n    4a50:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n    4a53:\t49 89 c8             \tmov    %rcx,%r8\n    4a56:\t89 d1                \tmov    %edx,%ecx\n    4a58:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4a5d:\t89 c6                \tmov    %eax,%esi\n    4a5f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4a64:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4a69:\te8 00 00 00 00       \tcallq  4a6e <evsel__open+0x4ac>\n    4a6e:\tc7 45 bc ea ff ff ff \tmovl   $0xffffffea,-0x44(%rbp)\n    4a75:\te9 52 04 00 00       \tjmpq   4ecc <evsel__open+0x90a>\n    4a7a:\tc7 45 c0 00 00 00 00 \tmovl   $0x0,-0x40(%rbp)\n    4a81:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4a88 <evsel__open+0x4c6>\n    4a88:\t84 c0                \ttest   %al,%al\n    4a8a:\t75 0b                \tjne    4a97 <evsel__open+0x4d5>\n    4a8c:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4a93 <evsel__open+0x4d1>\n    4a93:\t84 c0                \ttest   %al,%al\n    4a95:\t74 0c                \tje     4aa3 <evsel__open+0x4e1>\n    4a97:\tc7 45 bc ea ff ff ff \tmovl   $0xffffffea,-0x44(%rbp)\n    4a9e:\te9 29 04 00 00       \tjmpq   4ecc <evsel__open+0x90a>\n    4aa3:\t83 45 b0 01          \taddl   $0x1,-0x50(%rbp)\n    4aa7:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n    4aaa:\t3b 45 b4             \tcmp    -0x4c(%rbp),%eax\n    4aad:\t0f 8c f6 fd ff ff    \tjl     48a9 <evsel__open+0x2e7>\n    4ab3:\t83 45 ac 01          \taddl   $0x1,-0x54(%rbp)\n    4ab7:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    4abb:\t8b 40 04             \tmov    0x4(%rax),%eax\n    4abe:\t39 45 ac             \tcmp    %eax,-0x54(%rbp)\n    4ac1:\t0f 8c d6 fd ff ff    \tjl     489d <evsel__open+0x2db>\n    4ac7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4acc:\te9 6f 04 00 00       \tjmpq   4f40 <evsel__open+0x97e>\n    4ad1:\t83 7d c0 01          \tcmpl   $0x1,-0x40(%rbp)\n    4ad5:\t77 77                \tja     4b4e <evsel__open+0x58c>\n    4ad7:\te8 00 00 00 00       \tcallq  4adc <evsel__open+0x51a>\n    4adc:\t8b 00                \tmov    (%rax),%eax\n    4ade:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    4ae1:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    4ae5:\t48 89 c6             \tmov    %rax,%rsi\n    4ae8:\tbf 07 00 00 00       \tmov    $0x7,%edi\n    4aed:\te8 00 00 00 00       \tcallq  4af2 <evsel__open+0x530>\n    4af2:\t85 c0                \ttest   %eax,%eax\n    4af4:\t75 4e                \tjne    4b44 <evsel__open+0x582>\n    4af6:\t83 7d c0 00          \tcmpl   $0x0,-0x40(%rbp)\n    4afa:\t75 0a                \tjne    4b06 <evsel__open+0x544>\n    4afc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4b00:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4b04:\teb 16                \tjmp    4b1c <evsel__open+0x55a>\n    4b06:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4b0a:\t48 05 e8 03 00 00    \tadd    $0x3e8,%rax\n    4b10:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4b14:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    4b18:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    4b1c:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    4b20:\t48 89 c6             \tmov    %rax,%rsi\n    4b23:\tbf 07 00 00 00       \tmov    $0x7,%edi\n    4b28:\te8 00 00 00 00       \tcallq  4b2d <evsel__open+0x56b>\n    4b2d:\t85 c0                \ttest   %eax,%eax\n    4b2f:\t75 13                \tjne    4b44 <evsel__open+0x582>\n    4b31:\t83 45 c0 01          \taddl   $0x1,-0x40(%rbp)\n    4b35:\te8 00 00 00 00       \tcallq  4b3a <evsel__open+0x578>\n    4b3a:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n    4b3d:\t89 10                \tmov    %edx,(%rax)\n    4b3f:\te9 b2 fd ff ff       \tjmpq   48f6 <evsel__open+0x334>\n    4b44:\te8 00 00 00 00       \tcallq  4b49 <evsel__open+0x587>\n    4b49:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n    4b4c:\t89 10                \tmov    %edx,(%rax)\n    4b4e:\t83 7d bc ea          \tcmpl   $0xffffffea,-0x44(%rbp)\n    4b52:\t0f 85 70 03 00 00    \tjne    4ec8 <evsel__open+0x906>\n    4b58:\t83 7d ac 00          \tcmpl   $0x0,-0x54(%rbp)\n    4b5c:\t0f 8f 66 03 00 00    \tjg     4ec8 <evsel__open+0x906>\n    4b62:\t83 7d b0 00          \tcmpl   $0x0,-0x50(%rbp)\n    4b66:\t0f 8f 5c 03 00 00    \tjg     4ec8 <evsel__open+0x906>\n    4b6c:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4b73 <evsel__open+0x5b1>\n    4b73:\t83 f0 01             \txor    $0x1,%eax\n    4b76:\t84 c0                \ttest   %al,%al\n    4b78:\t74 37                \tje     4bb1 <evsel__open+0x5ef>\n    4b7a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4b7e:\t0f b6 40 3b          \tmovzbl 0x3b(%rax),%eax\n    4b82:\t83 e0 80             \tand    $0xffffff80,%eax\n    4b85:\t84 c0                \ttest   %al,%al\n    4b87:\t74 28                \tje     4bb1 <evsel__open+0x5ef>\n    4b89:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4b90 <evsel__open+0x5ce>\n    4b90:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4b96 <evsel__open+0x5d4>\n    4b96:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4b9b:\t89 c6                \tmov    %eax,%esi\n    4b9d:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4ba2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4ba7:\te8 00 00 00 00       \tcallq  4bac <evsel__open+0x5ea>\n    4bac:\te9 1b 03 00 00       \tjmpq   4ecc <evsel__open+0x90a>\n    4bb1:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4bb8 <evsel__open+0x5f6>\n    4bb8:\t83 f0 01             \txor    $0x1,%eax\n    4bbb:\t84 c0                \ttest   %al,%al\n    4bbd:\t74 37                \tje     4bf6 <evsel__open+0x634>\n    4bbf:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4bc3:\t0f b6 40 3b          \tmovzbl 0x3b(%rax),%eax\n    4bc7:\t83 e0 40             \tand    $0x40,%eax\n    4bca:\t84 c0                \ttest   %al,%al\n    4bcc:\t74 28                \tje     4bf6 <evsel__open+0x634>\n    4bce:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4bd5 <evsel__open+0x613>\n    4bd5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4bdb <evsel__open+0x619>\n    4bdb:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4be0:\t89 c6                \tmov    %eax,%esi\n    4be2:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4be7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4bec:\te8 00 00 00 00       \tcallq  4bf1 <evsel__open+0x62f>\n    4bf1:\te9 49 fb ff ff       \tjmpq   473f <evsel__open+0x17d>\n    4bf6:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4bfd <evsel__open+0x63b>\n    4bfd:\t83 f0 01             \txor    $0x1,%eax\n    4c00:\t84 c0                \ttest   %al,%al\n    4c02:\t74 37                \tje     4c3b <evsel__open+0x679>\n    4c04:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4c08:\t0f b6 40 3b          \tmovzbl 0x3b(%rax),%eax\n    4c0c:\t83 e0 20             \tand    $0x20,%eax\n    4c0f:\t84 c0                \ttest   %al,%al\n    4c11:\t74 28                \tje     4c3b <evsel__open+0x679>\n    4c13:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4c1a <evsel__open+0x658>\n    4c1a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4c20 <evsel__open+0x65e>\n    4c20:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4c25:\t89 c6                \tmov    %eax,%esi\n    4c27:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4c2c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4c31:\te8 00 00 00 00       \tcallq  4c36 <evsel__open+0x674>\n    4c36:\te9 04 fb ff ff       \tjmpq   473f <evsel__open+0x17d>\n    4c3b:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4c42 <evsel__open+0x680>\n    4c42:\t83 f0 01             \txor    $0x1,%eax\n    4c45:\t84 c0                \ttest   %al,%al\n    4c47:\t74 37                \tje     4c80 <evsel__open+0x6be>\n    4c49:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4c4d:\t0f b6 40 3b          \tmovzbl 0x3b(%rax),%eax\n    4c51:\t83 e0 08             \tand    $0x8,%eax\n    4c54:\t84 c0                \ttest   %al,%al\n    4c56:\t74 28                \tje     4c80 <evsel__open+0x6be>\n    4c58:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4c5f <evsel__open+0x69d>\n    4c5f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4c65 <evsel__open+0x6a3>\n    4c65:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4c6a:\t89 c6                \tmov    %eax,%esi\n    4c6c:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4c71:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4c76:\te8 00 00 00 00       \tcallq  4c7b <evsel__open+0x6b9>\n    4c7b:\te9 4c 02 00 00       \tjmpq   4ecc <evsel__open+0x90a>\n    4c80:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4c87 <evsel__open+0x6c5>\n    4c87:\t83 f0 01             \txor    $0x1,%eax\n    4c8a:\t84 c0                \ttest   %al,%al\n    4c8c:\t74 37                \tje     4cc5 <evsel__open+0x703>\n    4c8e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4c92:\t0f b6 40 3b          \tmovzbl 0x3b(%rax),%eax\n    4c96:\t83 e0 02             \tand    $0x2,%eax\n    4c99:\t84 c0                \ttest   %al,%al\n    4c9b:\t74 28                \tje     4cc5 <evsel__open+0x703>\n    4c9d:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4ca4 <evsel__open+0x6e2>\n    4ca4:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4caa <evsel__open+0x6e8>\n    4caa:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4caf:\t89 c6                \tmov    %eax,%esi\n    4cb1:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4cb6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4cbb:\te8 00 00 00 00       \tcallq  4cc0 <evsel__open+0x6fe>\n    4cc0:\te9 7a fa ff ff       \tjmpq   473f <evsel__open+0x17d>\n    4cc5:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4ccc <evsel__open+0x70a>\n    4ccc:\t83 f0 01             \txor    $0x1,%eax\n    4ccf:\t84 c0                \ttest   %al,%al\n    4cd1:\t74 37                \tje     4d0a <evsel__open+0x748>\n    4cd3:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4cd7:\t0f b6 40 3b          \tmovzbl 0x3b(%rax),%eax\n    4cdb:\t83 e0 02             \tand    $0x2,%eax\n    4cde:\t84 c0                \ttest   %al,%al\n    4ce0:\t74 28                \tje     4d0a <evsel__open+0x748>\n    4ce2:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4ce9 <evsel__open+0x727>\n    4ce9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4cef <evsel__open+0x72d>\n    4cef:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4cf4:\t89 c6                \tmov    %eax,%esi\n    4cf6:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4cfb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4d00:\te8 00 00 00 00       \tcallq  4d05 <evsel__open+0x743>\n    4d05:\te9 35 fa ff ff       \tjmpq   473f <evsel__open+0x17d>\n    4d0a:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4d11 <evsel__open+0x74f>\n    4d11:\t83 f0 01             \txor    $0x1,%eax\n    4d14:\t84 c0                \ttest   %al,%al\n    4d16:\t74 34                \tje     4d4c <evsel__open+0x78a>\n    4d18:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4d1c:\t83 e0 08             \tand    $0x8,%eax\n    4d1f:\t48 85 c0             \ttest   %rax,%rax\n    4d22:\t74 28                \tje     4d4c <evsel__open+0x78a>\n    4d24:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4d2b <evsel__open+0x769>\n    4d2b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4d31 <evsel__open+0x76f>\n    4d31:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4d36:\t89 c6                \tmov    %eax,%esi\n    4d38:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4d3d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4d42:\te8 00 00 00 00       \tcallq  4d47 <evsel__open+0x785>\n    4d47:\te9 f3 f9 ff ff       \tjmpq   473f <evsel__open+0x17d>\n    4d4c:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4d53 <evsel__open+0x791>\n    4d53:\t83 f0 01             \txor    $0x1,%eax\n    4d56:\t84 c0                \ttest   %al,%al\n    4d58:\t74 37                \tje     4d91 <evsel__open+0x7cf>\n    4d5a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4d5e:\t0f b6 40 3a          \tmovzbl 0x3a(%rax),%eax\n    4d62:\t83 e0 80             \tand    $0xffffff80,%eax\n    4d65:\t84 c0                \ttest   %al,%al\n    4d67:\t74 28                \tje     4d91 <evsel__open+0x7cf>\n    4d69:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4d70 <evsel__open+0x7ae>\n    4d70:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4d76 <evsel__open+0x7b4>\n    4d76:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4d7b:\t89 c6                \tmov    %eax,%esi\n    4d7d:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4d82:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4d87:\te8 00 00 00 00       \tcallq  4d8c <evsel__open+0x7ca>\n    4d8c:\te9 ae f9 ff ff       \tjmpq   473f <evsel__open+0x17d>\n    4d91:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4d98 <evsel__open+0x7d6>\n    4d98:\t83 f0 01             \txor    $0x1,%eax\n    4d9b:\t84 c0                \ttest   %al,%al\n    4d9d:\t74 46                \tje     4de5 <evsel__open+0x823>\n    4d9f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4da3:\t0f b6 40 3a          \tmovzbl 0x3a(%rax),%eax\n    4da7:\t83 e0 10             \tand    $0x10,%eax\n    4daa:\t84 c0                \ttest   %al,%al\n    4dac:\t75 0f                \tjne    4dbd <evsel__open+0x7fb>\n    4dae:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4db2:\t0f b6 40 3a          \tmovzbl 0x3a(%rax),%eax\n    4db6:\t83 e0 08             \tand    $0x8,%eax\n    4db9:\t84 c0                \ttest   %al,%al\n    4dbb:\t74 28                \tje     4de5 <evsel__open+0x823>\n    4dbd:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4dc4 <evsel__open+0x802>\n    4dc4:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4dca <evsel__open+0x808>\n    4dca:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4dcf:\t89 c6                \tmov    %eax,%esi\n    4dd1:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4dd6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4ddb:\te8 00 00 00 00       \tcallq  4de0 <evsel__open+0x81e>\n    4de0:\te9 5a f9 ff ff       \tjmpq   473f <evsel__open+0x17d>\n    4de5:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4dec <evsel__open+0x82a>\n    4dec:\t83 f0 01             \txor    $0x1,%eax\n    4def:\t84 c0                \ttest   %al,%al\n    4df1:\t74 28                \tje     4e1b <evsel__open+0x859>\n    4df3:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4dfa <evsel__open+0x838>\n    4dfa:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4e00 <evsel__open+0x83e>\n    4e00:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4e05:\t89 c6                \tmov    %eax,%esi\n    4e07:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4e0c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4e11:\te8 00 00 00 00       \tcallq  4e16 <evsel__open+0x854>\n    4e16:\te9 4d fa ff ff       \tjmpq   4868 <evsel__open+0x2a6>\n    4e1b:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4e22 <evsel__open+0x860>\n    4e22:\t83 f0 01             \txor    $0x1,%eax\n    4e25:\t84 c0                \ttest   %al,%al\n    4e27:\t74 3a                \tje     4e63 <evsel__open+0x8a1>\n    4e29:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4e2d:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n    4e31:\t25 00 c0 00 00       \tand    $0xc000,%eax\n    4e36:\t48 85 c0             \ttest   %rax,%rax\n    4e39:\t74 28                \tje     4e63 <evsel__open+0x8a1>\n    4e3b:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4e42 <evsel__open+0x880>\n    4e42:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4e48 <evsel__open+0x886>\n    4e48:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4e4d:\t89 c6                \tmov    %eax,%esi\n    4e4f:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4e54:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4e59:\te8 00 00 00 00       \tcallq  4e5e <evsel__open+0x89c>\n    4e5e:\te9 dc f8 ff ff       \tjmpq   473f <evsel__open+0x17d>\n    4e63:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4e6a <evsel__open+0x8a8>\n    4e6a:\t83 f0 01             \txor    $0x1,%eax\n    4e6d:\t84 c0                \ttest   %al,%al\n    4e6f:\t74 5a                \tje     4ecb <evsel__open+0x909>\n    4e71:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4e75:\t0f b6 40 38          \tmovzbl 0x38(%rax),%eax\n    4e79:\t83 e0 02             \tand    $0x2,%eax\n    4e7c:\t84 c0                \ttest   %al,%al\n    4e7e:\t74 4b                \tje     4ecb <evsel__open+0x909>\n    4e80:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4e84:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    4e88:\t83 e0 08             \tand    $0x8,%eax\n    4e8b:\t48 85 c0             \ttest   %rax,%rax\n    4e8e:\t74 3b                \tje     4ecb <evsel__open+0x909>\n    4e90:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4e94:\t48 89 c7             \tmov    %rax,%rdi\n    4e97:\te8 c5 b6 ff ff       \tcallq  561 <perf_evsel__is_group_leader>\n    4e9c:\t84 c0                \ttest   %al,%al\n    4e9e:\t74 2b                \tje     4ecb <evsel__open+0x909>\n    4ea0:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 4ea7 <evsel__open+0x8e5>\n    4ea7:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4ead <evsel__open+0x8eb>\n    4ead:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4eb2:\t89 c6                \tmov    %eax,%esi\n    4eb4:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4eb9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4ebe:\te8 00 00 00 00       \tcallq  4ec3 <evsel__open+0x901>\n    4ec3:\te9 77 f8 ff ff       \tjmpq   473f <evsel__open+0x17d>\n    4ec8:\t90                   \tnop\n    4ec9:\teb 01                \tjmp    4ecc <evsel__open+0x90a>\n    4ecb:\t90                   \tnop\n    4ecc:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n    4ed0:\t74 51                \tje     4f23 <evsel__open+0x961>\n    4ed2:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    4ed6:\t8b 55 b0             \tmov    -0x50(%rbp),%edx\n    4ed9:\t89 50 08             \tmov    %edx,0x8(%rax)\n    4edc:\teb 45                \tjmp    4f23 <evsel__open+0x961>\n    4ede:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4ee2:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    4ee9:\t8b 55 b0             \tmov    -0x50(%rbp),%edx\n    4eec:\t8b 4d ac             \tmov    -0x54(%rbp),%ecx\n    4eef:\t89 ce                \tmov    %ecx,%esi\n    4ef1:\t48 89 c7             \tmov    %rax,%rdi\n    4ef4:\te8 9e b4 ff ff       \tcallq  397 <xyarray__entry>\n    4ef9:\t8b 00                \tmov    (%rax),%eax\n    4efb:\t89 c7                \tmov    %eax,%edi\n    4efd:\te8 00 00 00 00       \tcallq  4f02 <evsel__open+0x940>\n    4f02:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4f06:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    4f0d:\t8b 55 b0             \tmov    -0x50(%rbp),%edx\n    4f10:\t8b 4d ac             \tmov    -0x54(%rbp),%ecx\n    4f13:\t89 ce                \tmov    %ecx,%esi\n    4f15:\t48 89 c7             \tmov    %rax,%rdi\n    4f18:\te8 7a b4 ff ff       \tcallq  397 <xyarray__entry>\n    4f1d:\tc7 00 ff ff ff ff    \tmovl   $0xffffffff,(%rax)\n    4f23:\t83 6d b0 01          \tsubl   $0x1,-0x50(%rbp)\n    4f27:\t83 7d b0 00          \tcmpl   $0x0,-0x50(%rbp)\n    4f2b:\t79 b1                \tjns    4ede <evsel__open+0x91c>\n    4f2d:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n    4f30:\t89 45 b0             \tmov    %eax,-0x50(%rbp)\n    4f33:\t83 6d ac 01          \tsubl   $0x1,-0x54(%rbp)\n    4f37:\t83 7d ac 00          \tcmpl   $0x0,-0x54(%rbp)\n    4f3b:\t79 e6                \tjns    4f23 <evsel__open+0x961>\n    4f3d:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    4f40:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    4f44:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    4f4b:\t00 00 \n    4f4d:\t74 05                \tje     4f54 <evsel__open+0x992>\n    4f4f:\te8 00 00 00 00       \tcallq  4f54 <evsel__open+0x992>\n    4f54:\tc9                   \tleaveq \n    4f55:\tc3                   \tretq   ", "code_s": "__int64 __fastcall evsel__open(__int64 a1, __int64 a2, int *a3, double a4) {\n  __int64 v5;\n  int *v6;\n  char *v7;\n  int *v8;\n  __int64 v10;\n  int i;\n  int v12;\n  int v13;\n  unsigned int v14;\n  unsigned int v15;\n  unsigned int v16;\n  unsigned int v17;\n  int v18;\n  unsigned int v19;\n  int v20;\n  __int64 v21;\n  struct rlimit64 rlimits;\n  unsigned __int64 v23;\n  v10 = a2;\n  v23 = __readfsqword(Number);\n  v21 = Number L;\n  v14 = Number;\n  v16 = Number;\n  if (perf_missing_features[Number] &&\n          (*(_BYTE *)(a1 + Number) & Number) != Number ||\n      perf_missing_features[Number] && *(char *)(a1 + Number) < Number)\n    return Number L;\n  if (!a2) {\n    if (!empty_cpu_map_12059) {\n      empty_cpu_map_12059 = perf_cpu_map__dummy_new();\n      if (!empty_cpu_map_12059)\n        return Number L;\n    }\n    v10 = empty_cpu_map_12059;\n  }\n  if (!a3) {\n    if (!empty_thread_map_12060) {\n      empty_thread_map_12060 = thread_map__new_by_tid(Number);\n      if (!empty_thread_map_12060)\n        return Number L;\n    }\n    a3 = (int *)empty_thread_map_12060;\n  }\n  if (*(_BYTE *)(a1 + Number))\n    v13 = Number;\n  else\n    v13 = a3[Number];\n  if (!*(_QWORD *)(a1 + Number) &&\n      (int)perf_evsel__alloc_fd(a1, *(unsigned int *)(v10 + Number),\n                                (unsigned int)v13) < Number)\n    return Number L;\n  if (*(_QWORD *)(a1 + Number)) {\n    v21 = Number L;\n    v14 = *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n  }\n  while (Number) {\n    if (perf_missing_features[Number])\n      *(_DWORD *)(a1 + Number) = Number;\n    if (perf_missing_features[Number]) {\n      *(_BYTE *)(a1 + Number) &= Number;\n      *(_DWORD *)(a1 + Number) = Number;\n    }\n    if (perf_missing_features[Number])\n      v21 &= Number;\n    if (perf_missing_features[Number])\n      *(_BYTE *)(a1 + Number) &= Number;\n    if (perf_missing_features[Number]) {\n      *(_BYTE *)(a1 + Number) &= Number;\n      *(_BYTE *)(a1 + Number) =\n          (Number * ((*(_BYTE *)(a1 + Number) & Number) != Number)) |\n          *(_BYTE *)(a1 + Number) & Number;\n    }\n    if (perf_missing_features[Number]) {\n      v5 = *(_QWORD *)(a1 + Number);\n      BYTE1(v5) &= Number;\n      *(_QWORD *)(a1 + Number) = v5;\n    }\n    if (perf_missing_features[Number] &&\n        (*(_BYTE *)(a1 + Number) & Number) != Number)\n      *(_QWORD *)(a1 + Number) &= Number;\n    if (perf_missing_features[Number])\n      *(_BYTE *)(a1 + Number) &= Number;\n    if (perf_missing_features[Number])\n      *(_BYTE *)(a1 + Number) &= Number;\n  LABEL_43:\n    if (perf_missing_features[Number])\n      *(_BYTE *)(a1 + Number) &= Number;\n    display_attr(a1 + Number);\n    for (i = Number;; ++i) {\n      if (i >= *(_DWORD *)(v10 + Number))\n        return Number L;\n      v12 = Number;\n    LABEL_64:\n      if (v12 < v13)\n        break;\n    }\n    if (!*(_QWORD *)(a1 + Number) && *(_BYTE *)(a1 + Number) != Number)\n      v14 = perf_thread_map(a3, a4);\n    v17 = get_group_fd(a1, i, v12);\n  LABEL_51:\n    test_attr__ready();\n    v18 = perf_event_open(a1, v14, *(_DWORD *)(v10 + Number L * i + Number),\n                          v17, v21);\n    *(_DWORD *)xyarray__entry(*(_QWORD **)(a1 + Number), i, v12) = v18;\n    if (v18 >= Number) {\n      eprintf(Number L, verbose, String, (unsigned int)v18);\n      if (*(int *)(a1 + Number) >= Number) {\n        v19 = *(_DWORD *)(a1 + Number);\n        if (ioctl(v18, Number, v19)) {\n          if (*_errno_location() != Number) {\n            v6 = _errno_location();\n            v7 = strerror(*v6);\n            eprintf(Number L, verbose, String, v19, v7);\n            v15 = Number;\n            break;\n          }\n        }\n      }\n      v16 = Number;\n      if (perf_missing_features[Number] || perf_missing_features[Number]) {\n        v15 = Number;\n        break;\n      }\n    LABEL_63:\n      ++v12;\n      goto LABEL_64;\n    }\n    v15 = -*_errno_location();\n    if ((unsigned __int8)ignore_missing_thread(a1, *(_DWORD *)(v10 + Number), i,\n                                               a3, v12, v15, a4)) {\n      --v13;\n      --v12;\n      goto LABEL_63;\n    }\n    eprintf(Number L, verbose, String, v15);\n    if (v15 != Number || v16 > Number)\n      goto LABEL_76;\n    v20 = *_errno_location();\n    if (!getrlimit64(RLIMIT_NOFILE, &rlimits)) {\n      if (v16) {\n        rlimits.rlim_cur = rlimits.rlim_max + Number;\n        rlimits.rlim_max += Number L;\n      } else {\n        rlimits.rlim_cur = rlimits.rlim_max;\n      }\n      if (!setrlimit64(RLIMIT_NOFILE, &rlimits)) {\n        ++v16;\n        *_errno_location() = v20;\n        goto LABEL_51;\n      }\n    }\n    *_errno_location() = v20;\n  LABEL_76:\n    if (v15 != Number || i > Number || v12 > Number)\n      break;\n    if (perf_missing_features[Number] != Number &&\n        *(char *)(a1 + Number) < Number) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n      break;\n    }\n    if (perf_missing_features[Number] != Number &&\n        (*(_BYTE *)(a1 + Number) & Number) != Number) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features[Number] != Number &&\n        (*(_BYTE *)(a1 + Number) & Number) != Number) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features[Number] != Number &&\n        (*(_BYTE *)(a1 + Number) & Number) != Number) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n      break;\n    }\n    if (perf_missing_features[Number] != Number &&\n        (*(_BYTE *)(a1 + Number) & Number) != Number) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features[Number] != Number &&\n        (*(_BYTE *)(a1 + Number) & Number) != Number) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features[Number] != Number && (v21 & Number) != Number) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features[Number] != Number &&\n        *(char *)(a1 + Number) < Number) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features[Number] != Number &&\n        ((*(_BYTE *)(a1 + Number) & Number) != Number ||\n         (*(_BYTE *)(a1 + Number) & Number) != Number)) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features[Number] != Number) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n      goto LABEL_43;\n    }\n    if (perf_missing_features[Number] != Number &&\n        (*(_QWORD *)(a1 + Number) & Number) != Number) {\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n    } else {\n      if (perf_missing_features[Number] == Number ||\n          (*(_BYTE *)(a1 + Number) & Number) == Number ||\n          (*(_QWORD *)(a1 + Number) & Number L) == Number ||\n          !perf_evsel__is_group_leader(a1)) {\n        break;\n      }\n      perf_missing_features[Number] = Number;\n      eprintf(Number L, verbose, String);\n    }\n  }\n  if (v15)\n    a3[Number] = v12;\n  do {\n    while (--v12 >= Number) {\n      v8 = (int *)xyarray__entry(*(_QWORD **)(a1 + Number), i, v12);\n      close(*v8);\n      *(_DWORD *)xyarray__entry(*(_QWORD **)(a1 + Number), i, v12) = Number;\n    }\n    v12 = v13;\n    --i;\n  } while (i >= Number);\n  return v15;\n}", "code_t": "int __cdecl evsel__open(evsel *evsel, perf_cpu_map *cpus,\n                        perf_thread_map *threads) {\n  double v3;\n  __u64 v5;\n  int *v6;\n  char *v7;\n  int *v8;\n  perf_cpu_map *cpusa;\n  int cpu;\n  int thread;\n  int nthreads;\n  pid_t pid;\n  unsigned int err;\n  evsel__open $3B7D240EDE649134482C959399F39D79 set_rlimit;\n  int group_fd;\n  int fd;\n  unsigned int bpf_fd;\n  int old_errno;\n  __int64 flags;\n  rlimit <span class=\"supfact\">l</span>;\n  unsigned __int64 v23;\n  cpusa = cpus;\n  v23 = __readfsqword(Number);\n  flags = Number L;\n  pid = Number;\n  set_rlimit = NO_CHANGE;\n  if (perf_missing_features_0[Number] &&\n          (*((_BYTE *)&evsel->core.attr + Number) & Number) != Number ||\n      perf_missing_features_0[Number] &&\n          *((char *)&evsel->core.attr + Number) < Number) {\n    return Number;\n  }\n  if (!cpus) {\n    if (!empty_cpu_map_12059) {\n      empty_cpu_map_12059 = (perf_cpu_map *)perf_cpu_map__dummy_new();\n      if (!empty_cpu_map_12059)\n        return Number;\n    }\n    cpusa = empty_cpu_map_12059;\n  }\n  if (!threads) {\n    if (!empty_thread_map_12060) {\n      empty_thread_map_12060 =\n          (perf_thread_map *)thread_map__new_by_tid(Number);\n      if (!empty_thread_map_12060)\n        return Number;\n    }\n    threads = empty_thread_map_12060;\n  }\n  if (evsel->core.system_wide)\n    nthreads = Number;\n  else\n    nthreads = threads->nr;\n  if (!evsel->core.fd &&\n      (int)perf_evsel__alloc_fd(evsel, (unsigned int)cpusa->nr,\n                                (unsigned int)nthreads) < Number)\n    return Number;\n  if (evsel->cgrp) {\n    flags = Number L;\n    pid = evsel->cgrp->fd;\n  }\n  while (Number) {\n    if (perf_missing_features_0[Number])\n      evsel->core.attr.clockid = Number;\n    if (perf_missing_features_0[Number]) {\n      *((_BYTE *)&evsel->core.attr + Number) &= Number;\n      evsel->core.attr.clockid = Number;\n    }\n    if (perf_missing_features_0[Number])\n      flags &= Number;\n    if (perf_missing_features_0[Number])\n      *((_BYTE *)&evsel->core.attr + Number) &= Number;\n    if (perf_missing_features_0[Number]) {\n      *((_BYTE *)&evsel->core.attr + Number) &= Number;\n      *((_BYTE *)&evsel->core.attr + Number) =\n          (Number *\n           ((*((_BYTE *)&evsel->core.attr + Number) & Number) != Number)) |\n          *((_BYTE *)&evsel->core.attr + Number) & Number;\n    }\n    if (perf_missing_features_0[Number]) {\n      v5 = evsel->core.attr.branch_sample_type;\n      BYTE1(v5) &= Number;\n      evsel->core.attr.branch_sample_type = v5;\n    }\n    if (perf_missing_features_0[Number] &&\n        (*((_BYTE *)&evsel->core.attr + Number) & Number) != Number)\n      evsel->core.attr.read_format &= Number;\n    if (perf_missing_features_0[Number])\n      *((_BYTE *)&evsel->core.attr + Number) &= Number;\n    if (perf_missing_features_0[Number])\n      *((_BYTE *)&evsel->core.attr + Number) &= Number;\n  retry_sample_id:\n    if (perf_missing_features_0[Number])\n      *((_BYTE *)&evsel->core.attr + Number) &= Number;\n    display_attr(&evsel->core.attr);\n    for (cpu = Number;; ++cpu) {\n      if (cpu >= cpusa->nr)\n        return Number;\n      thread = Number;\n    LABEL_64:\n      if (thread < nthreads)\n        break;\n    }\n    if (!evsel->cgrp && !evsel->core.system_wide)\n      pid = perf_thread_map(&threads->refcnt.refs.counter, v3);\n    group_fd = get_group_fd(evsel, cpu, thread);\n  retry_open:\n    test_attr__ready();\n    fd = perf_event_open(evsel, pid, cpusa->map[cpu], group_fd, flags);\n    *(_DWORD *)xyarray__entry(evsel->core.fd, cpu, thread) = fd;\n    if (fd >= Number) {\n      eprintf(Number L, verbose, String, (unsigned int)fd);\n      if (evsel->bpf_fd >= Number) {\n        bpf_fd = evsel->bpf_fd;\n        if (ioctl(fd, Number, bpf_fd)) {\n          if (*_errno_location() != Number) {\n            v6 = _errno_location();\n            v7 = strerror(*v6);\n            eprintf(Number L, verbose, String, bpf_fd, v7);\n            err = Number;\n            break;\n          }\n        }\n      }\n      set_rlimit = NO_CHANGE;\n      if (perf_missing_features_0[Number] || perf_missing_features_0[Number]) {\n        err = Number;\n        break;\n      }\n    LABEL_63:\n      ++thread;\n      goto LABEL_64;\n    }\n    err = -*_errno_location();\n    if (ignore_missing_thread(evsel, cpusa->nr, cpu, threads, thread, err)) {\n      --nthreads;\n      --thread;\n      goto LABEL_63;\n    }\n    eprintf(Number L, verbose, String, err);\n    if (err != Number || (unsigned int)set_rlimit > SET_TO_MAX)\n      goto LABEL_76;\n    old_errno = *_errno_location();\n    if (!getrlimit64(RLIMIT_NOFILE, (struct rlimit64 *)&<span class=\"supfact\">l</span>)) {\n      if (set_rlimit) {\n        <span class=\"supfact\">l</span>.rlim_cur = <span class=\"supfact\">l</span>.rlim_max + Number;\n        <span class=\"supfact\">l</span>.rlim_max += Number L;\n      } else {\n        <span class=\"supfact\">l</span>.rlim_cur = <span class=\"supfact\">l</span>.rlim_max;\n      }\n      if (!setrlimit64(RLIMIT_NOFILE,\n                       (const struct rlimit64 *)&<span class=\"supfact\">l</span>)) {\n        ++set_rlimit;\n        *_errno_location() = old_errno;\n        goto retry_open;\n      }\n    }\n    *_errno_location() = old_errno;\n  LABEL_76:\n    if (err != Number || cpu > Number || thread > Number)\n      break;\n    if (perf_missing_features_0[Number] != Number &&\n        *((char *)&evsel->core.attr + Number) < Number) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n      break;\n    }\n    if (perf_missing_features_0[Number] != Number &&\n        (*((_BYTE *)&evsel->core.attr + Number) & Number) != Number) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features_0[Number] != Number &&\n        (*((_BYTE *)&evsel->core.attr + Number) & Number) != Number) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features_0[Number] != Number &&\n        (*((_BYTE *)&evsel->core.attr + Number) & Number) != Number) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n      break;\n    }\n    if (perf_missing_features_0[Number] != Number &&\n        (*((_BYTE *)&evsel->core.attr + Number) & Number) != Number) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features_0[Number] != Number &&\n        (*((_BYTE *)&evsel->core.attr + Number) & Number) != Number) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features_0[Number] != Number &&\n        (flags & Number) != Number) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features_0[Number] != Number &&\n        *((char *)&evsel->core.attr + Number) < Number) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features_0[Number] != Number &&\n        ((*((_BYTE *)&evsel->core.attr + Number) & Number) != Number ||\n         (*((_BYTE *)&evsel->core.attr + Number) & Number) != Number)) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n      continue;\n    }\n    if (perf_missing_features_0[Number] != Number) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n      goto retry_sample_id;\n    }\n    if (perf_missing_features_0[Number] != Number &&\n        (evsel->core.attr.branch_sample_type & Number) != Number) {\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n    } else {\n      if (perf_missing_features_0[Number] == Number ||\n          (*((_BYTE *)&evsel->core.attr + Number) & Number) == Number ||\n          (evsel->core.attr.read_format & Number) == Number ||\n          !perf_evsel__is_group_leader(evsel)) {\n        break;\n      }\n      perf_missing_features_0[Number] = Number;\n      eprintf(Number L, verbose, String);\n    }\n  }\n  if (err)\n    threads->err_thread = thread;\n  do {\n    while (--thread >= Number) {\n      v8 = (int *)xyarray__entry(evsel->core.fd, cpu, thread);\n      close(*v8);\n      *(_DWORD *)xyarray__entry(evsel->core.fd, cpu, thread) = Number;\n    }\n    thread = nthreads;\n    --cpu;\n  } while (cpu >= Number);\n  return err;\n}", "var": [{"name": "rlimits", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "pred_name": "fmt", "ref_name": "l", "ref_type": "struct rlimit { rlim_t rlim_cur; rlim_t rlim_max; }"}], "body_in_train": false}, {"repo_owner": "nathanchance", "repo_name": "shamu", "path": "nathanchance/shamu/6db8ed445506192adae5a2d3fe98afeb6aafb5f2ad5b105f0dad429300539c7d", "path_in_repo": "nathanchance/shamu/tools/perf/builtin-stat.o", "objdump": "0000000000004024 <cmd_stat>:\n    4024:\t55                   \tpush   %rbp\n    4025:\t48 89 e5             \tmov    %rsp,%rbp\n    4028:\t48 81 ec 30 07 00 00 \tsub    $0x730,%rsp\n    402f:\t89 bd ec f8 ff ff    \tmov    %edi,-0x714(%rbp)\n    4035:\t48 89 b5 e0 f8 ff ff \tmov    %rsi,-0x720(%rbp)\n    403c:\t48 89 95 d8 f8 ff ff \tmov    %rdx,-0x728(%rbp)\n    4043:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    404a:\t00 00 \n    404c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4050:\t31 c0                \txor    %eax,%eax\n    4052:\tc6 85 f3 f8 ff ff 00 \tmovb   $0x0,-0x70d(%rbp)\n    4059:\tc7 85 f4 f8 ff ff 00 \tmovl   $0x0,-0x70c(%rbp)\n    4060:\t00 00 00 \n    4063:\t48 c7 85 00 f9 ff ff \tmovq   $0x0,-0x700(%rbp)\n    406a:\t00 00 00 00 \n    406e:\t48 8d 95 30 f9 ff ff \tlea    -0x6d0(%rbp),%rdx\n    4075:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    407a:\tb9 d8 00 00 00       \tmov    $0xd8,%ecx\n    407f:\t48 89 d7             \tmov    %rdx,%rdi\n    4082:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    4085:\tc7 85 30 f9 ff ff 0b \tmovl   $0xb,-0x6d0(%rbp)\n    408c:\t00 00 00 \n    408f:\tc7 85 34 f9 ff ff 65 \tmovl   $0x65,-0x6cc(%rbp)\n    4096:\t00 00 00 \n    4099:\t48 c7 85 38 f9 ff ff \tmovq   $0x0,-0x6c8(%rbp)\n    40a0:\t00 00 00 00 \n    40a4:\t48 c7 85 40 f9 ff ff \tmovq   $0x0,-0x6c0(%rbp)\n    40ab:\t00 00 00 00 \n    40af:\t48 c7 85 48 f9 ff ff \tmovq   $0x0,-0x6b8(%rbp)\n    40b6:\t00 00 00 00 \n    40ba:\t48 c7 85 50 f9 ff ff \tmovq   $0x0,-0x6b0(%rbp)\n    40c1:\t00 00 00 00 \n    40c5:\t48 c7 85 60 f9 ff ff \tmovq   $0x0,-0x6a0(%rbp)\n    40cc:\t00 00 00 00 \n    40d0:\tc7 85 70 f9 ff ff 0b \tmovl   $0xb,-0x690(%rbp)\n    40d7:\t00 00 00 \n    40da:\t48 c7 85 78 f9 ff ff \tmovq   $0x0,-0x688(%rbp)\n    40e1:\t00 00 00 00 \n    40e5:\t48 c7 85 80 f9 ff ff \tmovq   $0x0,-0x680(%rbp)\n    40ec:\t00 00 00 00 \n    40f0:\t48 c7 85 88 f9 ff ff \tmovq   $0x0,-0x678(%rbp)\n    40f7:\t00 00 00 00 \n    40fb:\t48 c7 85 90 f9 ff ff \tmovq   $0x0,-0x670(%rbp)\n    4102:\t00 00 00 00 \n    4106:\t48 c7 85 a0 f9 ff ff \tmovq   $0x0,-0x660(%rbp)\n    410d:\t00 00 00 00 \n    4111:\tc7 85 b0 f9 ff ff 04 \tmovl   $0x4,-0x650(%rbp)\n    4118:\t00 00 00 \n    411b:\tc7 85 b4 f9 ff ff 69 \tmovl   $0x69,-0x64c(%rbp)\n    4122:\t00 00 00 \n    4125:\t48 c7 85 b8 f9 ff ff \tmovq   $0x0,-0x648(%rbp)\n    412c:\t00 00 00 00 \n    4130:\t48 c7 85 c0 f9 ff ff \tmovq   $0x0,-0x640(%rbp)\n    4137:\t00 00 00 00 \n    413b:\t48 c7 85 d0 f9 ff ff \tmovq   $0x0,-0x630(%rbp)\n    4142:\t00 00 00 00 \n    4146:\tc7 85 f0 f9 ff ff 08 \tmovl   $0x8,-0x610(%rbp)\n    414d:\t00 00 00 \n    4150:\tc7 85 f4 f9 ff ff 70 \tmovl   $0x70,-0x60c(%rbp)\n    4157:\t00 00 00 \n    415a:\t48 c7 85 f8 f9 ff ff \tmovq   $0x0,-0x608(%rbp)\n    4161:\t00 00 00 00 \n    4165:\t48 c7 85 00 fa ff ff \tmovq   $0x0,-0x600(%rbp)\n    416c:\t00 00 00 00 \n    4170:\t48 c7 85 08 fa ff ff \tmovq   $0x0,-0x5f8(%rbp)\n    4177:\t00 00 00 00 \n    417b:\t48 c7 85 10 fa ff ff \tmovq   $0x0,-0x5f0(%rbp)\n    4182:\t00 00 00 00 \n    4186:\tc7 85 30 fa ff ff 08 \tmovl   $0x8,-0x5d0(%rbp)\n    418d:\t00 00 00 \n    4190:\tc7 85 34 fa ff ff 74 \tmovl   $0x74,-0x5cc(%rbp)\n    4197:\t00 00 00 \n    419a:\t48 c7 85 38 fa ff ff \tmovq   $0x0,-0x5c8(%rbp)\n    41a1:\t00 00 00 00 \n    41a5:\t48 c7 85 40 fa ff ff \tmovq   $0x0,-0x5c0(%rbp)\n    41ac:\t00 00 00 00 \n    41b0:\t48 c7 85 48 fa ff ff \tmovq   $0x0,-0x5b8(%rbp)\n    41b7:\t00 00 00 00 \n    41bb:\t48 c7 85 50 fa ff ff \tmovq   $0x0,-0x5b0(%rbp)\n    41c2:\t00 00 00 00 \n    41c6:\tc7 85 70 fa ff ff 04 \tmovl   $0x4,-0x590(%rbp)\n    41cd:\t00 00 00 \n    41d0:\tc7 85 74 fa ff ff 61 \tmovl   $0x61,-0x58c(%rbp)\n    41d7:\t00 00 00 \n    41da:\t48 c7 85 78 fa ff ff \tmovq   $0x0,-0x588(%rbp)\n    41e1:\t00 00 00 00 \n    41e5:\t48 c7 85 80 fa ff ff \tmovq   $0x0,-0x580(%rbp)\n    41ec:\t00 00 00 00 \n    41f0:\t48 c7 85 90 fa ff ff \tmovq   $0x0,-0x570(%rbp)\n    41f7:\t00 00 00 00 \n    41fb:\tc7 85 b0 fa ff ff 04 \tmovl   $0x4,-0x550(%rbp)\n    4202:\t00 00 00 \n    4205:\tc7 85 b4 fa ff ff 67 \tmovl   $0x67,-0x54c(%rbp)\n    420c:\t00 00 00 \n    420f:\t48 c7 85 b8 fa ff ff \tmovq   $0x0,-0x548(%rbp)\n    4216:\t00 00 00 00 \n    421a:\t48 c7 85 c0 fa ff ff \tmovq   $0x0,-0x540(%rbp)\n    4221:\t00 00 00 00 \n    4225:\t48 c7 85 d0 fa ff ff \tmovq   $0x0,-0x530(%rbp)\n    422c:\t00 00 00 00 \n    4230:\tc7 85 f0 fa ff ff 04 \tmovl   $0x4,-0x510(%rbp)\n    4237:\t00 00 00 \n    423a:\tc7 85 f4 fa ff ff 63 \tmovl   $0x63,-0x50c(%rbp)\n    4241:\t00 00 00 \n    4244:\t48 c7 85 f8 fa ff ff \tmovq   $0x0,-0x508(%rbp)\n    424b:\t00 00 00 00 \n    424f:\t48 c7 85 00 fb ff ff \tmovq   $0x0,-0x500(%rbp)\n    4256:\t00 00 00 00 \n    425a:\t48 c7 85 10 fb ff ff \tmovq   $0x0,-0x4f0(%rbp)\n    4261:\t00 00 00 00 \n    4265:\tc7 85 30 fb ff ff 05 \tmovl   $0x5,-0x4d0(%rbp)\n    426c:\t00 00 00 \n    426f:\tc7 85 34 fb ff ff 76 \tmovl   $0x76,-0x4cc(%rbp)\n    4276:\t00 00 00 \n    4279:\t48 c7 85 38 fb ff ff \tmovq   $0x0,-0x4c8(%rbp)\n    4280:\t00 00 00 00 \n    4284:\t48 c7 85 40 fb ff ff \tmovq   $0x0,-0x4c0(%rbp)\n    428b:\t00 00 00 00 \n    428f:\t48 c7 85 50 fb ff ff \tmovq   $0x0,-0x4b0(%rbp)\n    4296:\t00 00 00 00 \n    429a:\tc7 85 70 fb ff ff 09 \tmovl   $0x9,-0x490(%rbp)\n    42a1:\t00 00 00 \n    42a4:\tc7 85 74 fb ff ff 72 \tmovl   $0x72,-0x48c(%rbp)\n    42ab:\t00 00 00 \n    42ae:\t48 c7 85 78 fb ff ff \tmovq   $0x0,-0x488(%rbp)\n    42b5:\t00 00 00 00 \n    42b9:\t48 c7 85 80 fb ff ff \tmovq   $0x0,-0x480(%rbp)\n    42c0:\t00 00 00 00 \n    42c4:\t48 c7 85 90 fb ff ff \tmovq   $0x0,-0x470(%rbp)\n    42cb:\t00 00 00 00 \n    42cf:\tc7 85 b0 fb ff ff 04 \tmovl   $0x4,-0x450(%rbp)\n    42d6:\t00 00 00 \n    42d9:\tc7 85 b4 fb ff ff 6e \tmovl   $0x6e,-0x44c(%rbp)\n    42e0:\t00 00 00 \n    42e3:\t48 c7 85 b8 fb ff ff \tmovq   $0x0,-0x448(%rbp)\n    42ea:\t00 00 00 00 \n    42ee:\t48 c7 85 c0 fb ff ff \tmovq   $0x0,-0x440(%rbp)\n    42f5:\t00 00 00 00 \n    42f9:\t48 c7 85 d0 fb ff ff \tmovq   $0x0,-0x430(%rbp)\n    4300:\t00 00 00 00 \n    4304:\tc7 85 f0 fb ff ff 05 \tmovl   $0x5,-0x410(%rbp)\n    430b:\t00 00 00 \n    430e:\tc7 85 f4 fb ff ff 64 \tmovl   $0x64,-0x40c(%rbp)\n    4315:\t00 00 00 \n    4318:\t48 c7 85 f8 fb ff ff \tmovq   $0x0,-0x408(%rbp)\n    431f:\t00 00 00 00 \n    4323:\t48 c7 85 00 fc ff ff \tmovq   $0x0,-0x400(%rbp)\n    432a:\t00 00 00 00 \n    432e:\t48 c7 85 10 fc ff ff \tmovq   $0x0,-0x3f0(%rbp)\n    4335:\t00 00 00 00 \n    4339:\tc7 85 30 fc ff ff 04 \tmovl   $0x4,-0x3d0(%rbp)\n    4340:\t00 00 00 \n    4343:\tc7 85 34 fc ff ff 53 \tmovl   $0x53,-0x3cc(%rbp)\n    434a:\t00 00 00 \n    434d:\t48 c7 85 38 fc ff ff \tmovq   $0x0,-0x3c8(%rbp)\n    4354:\t00 00 00 00 \n    4358:\t48 c7 85 40 fc ff ff \tmovq   $0x0,-0x3c0(%rbp)\n    435f:\t00 00 00 00 \n    4363:\t48 c7 85 50 fc ff ff \tmovq   $0x0,-0x3b0(%rbp)\n    436a:\t00 00 00 00 \n    436e:\tc7 85 70 fc ff ff 0b \tmovl   $0xb,-0x390(%rbp)\n    4375:\t00 00 00 \n    4378:\tc7 85 74 fc ff ff 42 \tmovl   $0x42,-0x38c(%rbp)\n    437f:\t00 00 00 \n    4382:\t48 c7 85 78 fc ff ff \tmovq   $0x0,-0x388(%rbp)\n    4389:\t00 00 00 00 \n    438d:\t48 c7 85 90 fc ff ff \tmovq   $0x0,-0x370(%rbp)\n    4394:\t00 00 00 00 \n    4398:\tc7 85 98 fc ff ff 02 \tmovl   $0x2,-0x368(%rbp)\n    439f:\t00 00 00 \n    43a2:\t48 c7 85 a0 fc ff ff \tmovq   $0x0,-0x360(%rbp)\n    43a9:\t00 00 00 00 \n    43ad:\tc7 85 b0 fc ff ff 08 \tmovl   $0x8,-0x350(%rbp)\n    43b4:\t00 00 00 \n    43b7:\tc7 85 b4 fc ff ff 43 \tmovl   $0x43,-0x34c(%rbp)\n    43be:\t00 00 00 \n    43c1:\t48 c7 85 b8 fc ff ff \tmovq   $0x0,-0x348(%rbp)\n    43c8:\t00 00 00 00 \n    43cc:\t48 c7 85 c0 fc ff ff \tmovq   $0x0,-0x340(%rbp)\n    43d3:\t00 00 00 00 \n    43d7:\t48 c7 85 c8 fc ff ff \tmovq   $0x0,-0x338(%rbp)\n    43de:\t00 00 00 00 \n    43e2:\t48 c7 85 d0 fc ff ff \tmovq   $0x0,-0x330(%rbp)\n    43e9:\t00 00 00 00 \n    43ed:\tc7 85 f0 fc ff ff 06 \tmovl   $0x6,-0x310(%rbp)\n    43f4:\t00 00 00 \n    43f7:\tc7 85 f4 fc ff ff 41 \tmovl   $0x41,-0x30c(%rbp)\n    43fe:\t00 00 00 \n    4401:\t48 c7 85 f8 fc ff ff \tmovq   $0x0,-0x308(%rbp)\n    4408:\t00 00 00 00 \n    440c:\t48 c7 85 00 fd ff ff \tmovq   $0x0,-0x300(%rbp)\n    4413:\t00 00 00 00 \n    4417:\t48 c7 85 10 fd ff ff \tmovq   $0x0,-0x2f0(%rbp)\n    441e:\t00 00 00 00 \n    4422:\tc7 85 30 fd ff ff 08 \tmovl   $0x8,-0x2d0(%rbp)\n    4429:\t00 00 00 \n    442c:\tc7 85 34 fd ff ff 78 \tmovl   $0x78,-0x2cc(%rbp)\n    4433:\t00 00 00 \n    4436:\t48 c7 85 38 fd ff ff \tmovq   $0x0,-0x2c8(%rbp)\n    443d:\t00 00 00 00 \n    4441:\t48 c7 85 40 fd ff ff \tmovq   $0x0,-0x2c0(%rbp)\n    4448:\t00 00 00 00 \n    444c:\t48 c7 85 48 fd ff ff \tmovq   $0x0,-0x2b8(%rbp)\n    4453:\t00 00 00 00 \n    4457:\t48 c7 85 50 fd ff ff \tmovq   $0x0,-0x2b0(%rbp)\n    445e:\t00 00 00 00 \n    4462:\tc7 85 70 fd ff ff 0b \tmovl   $0xb,-0x290(%rbp)\n    4469:\t00 00 00 \n    446c:\tc7 85 74 fd ff ff 47 \tmovl   $0x47,-0x28c(%rbp)\n    4473:\t00 00 00 \n    4476:\t48 c7 85 78 fd ff ff \tmovq   $0x0,-0x288(%rbp)\n    447d:\t00 00 00 00 \n    4481:\t48 c7 85 80 fd ff ff \tmovq   $0x0,-0x280(%rbp)\n    4488:\t00 00 00 00 \n    448c:\t48 c7 85 88 fd ff ff \tmovq   $0x0,-0x278(%rbp)\n    4493:\t00 00 00 00 \n    4497:\t48 c7 85 90 fd ff ff \tmovq   $0x0,-0x270(%rbp)\n    449e:\t00 00 00 00 \n    44a2:\t48 c7 85 a0 fd ff ff \tmovq   $0x0,-0x260(%rbp)\n    44a9:\t00 00 00 00 \n    44ad:\tc7 85 b0 fd ff ff 08 \tmovl   $0x8,-0x250(%rbp)\n    44b4:\t00 00 00 \n    44b7:\tc7 85 b4 fd ff ff 6f \tmovl   $0x6f,-0x24c(%rbp)\n    44be:\t00 00 00 \n    44c1:\t48 c7 85 b8 fd ff ff \tmovq   $0x0,-0x248(%rbp)\n    44c8:\t00 00 00 00 \n    44cc:\t48 8d 85 00 f9 ff ff \tlea    -0x700(%rbp),%rax\n    44d3:\t48 89 85 c0 fd ff ff \tmov    %rax,-0x240(%rbp)\n    44da:\t48 c7 85 c8 fd ff ff \tmovq   $0x0,-0x238(%rbp)\n    44e1:\t00 00 00 00 \n    44e5:\t48 c7 85 d0 fd ff ff \tmovq   $0x0,-0x230(%rbp)\n    44ec:\t00 00 00 00 \n    44f0:\tc7 85 f0 fd ff ff 04 \tmovl   $0x4,-0x210(%rbp)\n    44f7:\t00 00 00 \n    44fa:\t48 c7 85 f8 fd ff ff \tmovq   $0x0,-0x208(%rbp)\n    4501:\t00 00 00 00 \n    4505:\t48 8d 85 f3 f8 ff ff \tlea    -0x70d(%rbp),%rax\n    450c:\t48 89 85 00 fe ff ff \tmov    %rax,-0x200(%rbp)\n    4513:\t48 c7 85 10 fe ff ff \tmovq   $0x0,-0x1f0(%rbp)\n    451a:\t00 00 00 00 \n    451e:\tc7 85 30 fe ff ff 09 \tmovl   $0x9,-0x1d0(%rbp)\n    4525:\t00 00 00 \n    4528:\t48 c7 85 38 fe ff ff \tmovq   $0x0,-0x1c8(%rbp)\n    452f:\t00 00 00 00 \n    4533:\t48 8d 85 f4 f8 ff ff \tlea    -0x70c(%rbp),%rax\n    453a:\t48 89 85 40 fe ff ff \tmov    %rax,-0x1c0(%rbp)\n    4541:\t48 c7 85 50 fe ff ff \tmovq   $0x0,-0x1b0(%rbp)\n    4548:\t00 00 00 00 \n    454c:\tc7 85 70 fe ff ff 08 \tmovl   $0x8,-0x190(%rbp)\n    4553:\t00 00 00 \n    4556:\t48 c7 85 78 fe ff ff \tmovq   $0x0,-0x188(%rbp)\n    455d:\t00 00 00 00 \n    4561:\t48 c7 85 80 fe ff ff \tmovq   $0x0,-0x180(%rbp)\n    4568:\t00 00 00 00 \n    456c:\t48 c7 85 88 fe ff ff \tmovq   $0x0,-0x178(%rbp)\n    4573:\t00 00 00 00 \n    4577:\t48 c7 85 90 fe ff ff \tmovq   $0x0,-0x170(%rbp)\n    457e:\t00 00 00 00 \n    4582:\tc7 85 b0 fe ff ff 08 \tmovl   $0x8,-0x150(%rbp)\n    4589:\t00 00 00 \n    458c:\t48 c7 85 b8 fe ff ff \tmovq   $0x0,-0x148(%rbp)\n    4593:\t00 00 00 00 \n    4597:\t48 c7 85 c0 fe ff ff \tmovq   $0x0,-0x140(%rbp)\n    459e:\t00 00 00 00 \n    45a2:\t48 c7 85 c8 fe ff ff \tmovq   $0x0,-0x138(%rbp)\n    45a9:\t00 00 00 00 \n    45ad:\t48 c7 85 d0 fe ff ff \tmovq   $0x0,-0x130(%rbp)\n    45b4:\t00 00 00 00 \n    45b8:\tc7 85 f0 fe ff ff 0d \tmovl   $0xd,-0x110(%rbp)\n    45bf:\t00 00 00 \n    45c2:\tc7 85 f4 fe ff ff 49 \tmovl   $0x49,-0x10c(%rbp)\n    45c9:\t00 00 00 \n    45cc:\t48 c7 85 f8 fe ff ff \tmovq   $0x0,-0x108(%rbp)\n    45d3:\t00 00 00 00 \n    45d7:\t48 c7 85 00 ff ff ff \tmovq   $0x0,-0x100(%rbp)\n    45de:\t00 00 00 00 \n    45e2:\t48 c7 85 10 ff ff ff \tmovq   $0x0,-0xf0(%rbp)\n    45e9:\t00 00 00 00 \n    45ed:\tc7 85 30 ff ff ff 06 \tmovl   $0x6,-0xd0(%rbp)\n    45f4:\t00 00 00 \n    45f7:\t48 c7 85 38 ff ff ff \tmovq   $0x0,-0xc8(%rbp)\n    45fe:\t00 00 00 00 \n    4602:\t48 c7 85 40 ff ff ff \tmovq   $0x0,-0xc0(%rbp)\n    4609:\t00 00 00 00 \n    460d:\t48 c7 85 50 ff ff ff \tmovq   $0x0,-0xb0(%rbp)\n    4614:\t00 00 00 00 \n    4618:\t48 c7 85 68 ff ff ff \tmovq   $0x2,-0x98(%rbp)\n    461f:\t02 00 00 00 \n    4623:\tc7 85 70 ff ff ff 06 \tmovl   $0x6,-0x90(%rbp)\n    462a:\t00 00 00 \n    462d:\t48 c7 85 78 ff ff ff \tmovq   $0x0,-0x88(%rbp)\n    4634:\t00 00 00 00 \n    4638:\t48 c7 45 80 00 00 00 \tmovq   $0x0,-0x80(%rbp)\n    463f:\t00 \n    4640:\t48 c7 45 90 00 00 00 \tmovq   $0x0,-0x70(%rbp)\n    4647:\t00 \n    4648:\t48 c7 45 a8 03 00 00 \tmovq   $0x3,-0x58(%rbp)\n    464f:\t00 \n    4650:\t48 c7 85 20 f9 ff ff \tmovq   $0x0,-0x6e0(%rbp)\n    4657:\t00 00 00 00 \n    465b:\t48 c7 85 28 f9 ff ff \tmovq   $0x0,-0x6d8(%rbp)\n    4662:\t00 00 00 00 \n    4666:\tc7 85 f8 f8 ff ff f4 \tmovl   $0xfffffff4,-0x708(%rbp)\n    466d:\tff ff ff \n    4670:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4675:\tbf 06 00 00 00       \tmov    $0x6,%edi\n    467a:\te8 00 00 00 00       \tcallq  467f <cmd_stat+0x65b>\n    467f:\te8 00 00 00 00       \tcallq  4684 <cmd_stat+0x660>\n    4684:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 468b <cmd_stat+0x667>\n    468b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4692 <cmd_stat+0x66e>\n    4692:\t48 85 c0             \ttest   %rax,%rax\n    4695:\t75 0a                \tjne    46a1 <cmd_stat+0x67d>\n    4697:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    469c:\te9 19 06 00 00       \tjmpq   4cba <cmd_stat+0xc96>\n    46a1:\t48 8d 8d 20 f9 ff ff \tlea    -0x6e0(%rbp),%rcx\n    46a8:\t48 8d 95 30 f9 ff ff \tlea    -0x6d0(%rbp),%rdx\n    46af:\t48 8b b5 e0 f8 ff ff \tmov    -0x720(%rbp),%rsi\n    46b6:\t8b 85 ec f8 ff ff    \tmov    -0x714(%rbp),%eax\n    46bc:\t41 b8 02 00 00 00    \tmov    $0x2,%r8d\n    46c2:\t89 c7                \tmov    %eax,%edi\n    46c4:\te8 00 00 00 00       \tcallq  46c9 <cmd_stat+0x6a5>\n    46c9:\t89 85 ec f8 ff ff    \tmov    %eax,-0x714(%rbp)\n    46cf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 46d6 <cmd_stat+0x6b2>\n    46d6:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 46dd <cmd_stat+0x6b9>\n    46dd:\t48 8b 85 00 f9 ff ff \tmov    -0x700(%rbp),%rax\n    46e4:\t48 85 c0             \ttest   %rax,%rax\n    46e7:\t74 23                \tje     470c <cmd_stat+0x6e8>\n    46e9:\t48 8b 85 00 f9 ff ff \tmov    -0x700(%rbp),%rax\n    46f0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    46f5:\t48 89 c7             \tmov    %rax,%rdi\n    46f8:\te8 00 00 00 00       \tcallq  46fd <cmd_stat+0x6d9>\n    46fd:\t85 c0                \ttest   %eax,%eax\n    46ff:\t74 0b                \tje     470c <cmd_stat+0x6e8>\n    4701:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 470c <cmd_stat+0x6e8>\n    4708:\t00 00 00 00 \n    470c:\t48 8b 85 00 f9 ff ff \tmov    -0x700(%rbp),%rax\n    4713:\t48 85 c0             \ttest   %rax,%rax\n    4716:\t74 41                \tje     4759 <cmd_stat+0x735>\n    4718:\t8b 85 f4 f8 ff ff    \tmov    -0x70c(%rbp),%eax\n    471e:\t85 c0                \ttest   %eax,%eax\n    4720:\t74 37                \tje     4759 <cmd_stat+0x735>\n    4722:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4729 <cmd_stat+0x705>\n    4729:\t48 89 c1             \tmov    %rax,%rcx\n    472c:\tba 26 00 00 00       \tmov    $0x26,%edx\n    4731:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    4736:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    473b:\te8 00 00 00 00       \tcallq  4740 <cmd_stat+0x71c>\n    4740:\t48 8d 95 30 f9 ff ff \tlea    -0x6d0(%rbp),%rdx\n    4747:\t48 8d 85 20 f9 ff ff \tlea    -0x6e0(%rbp),%rax\n    474e:\t48 89 d6             \tmov    %rdx,%rsi\n    4751:\t48 89 c7             \tmov    %rax,%rdi\n    4754:\te8 00 00 00 00       \tcallq  4759 <cmd_stat+0x735>\n    4759:\t8b 85 f4 f8 ff ff    \tmov    -0x70c(%rbp),%eax\n    475f:\t85 c0                \ttest   %eax,%eax\n    4761:\t79 37                \tjns    479a <cmd_stat+0x776>\n    4763:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 476a <cmd_stat+0x746>\n    476a:\t48 89 c1             \tmov    %rax,%rcx\n    476d:\tba 23 00 00 00       \tmov    $0x23,%edx\n    4772:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    4777:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    477c:\te8 00 00 00 00       \tcallq  4781 <cmd_stat+0x75d>\n    4781:\t48 8d 95 30 f9 ff ff \tlea    -0x6d0(%rbp),%rdx\n    4788:\t48 8d 85 20 f9 ff ff \tlea    -0x6e0(%rbp),%rax\n    478f:\t48 89 d6             \tmov    %rdx,%rsi\n    4792:\t48 89 c7             \tmov    %rax,%rdi\n    4795:\te8 00 00 00 00       \tcallq  479a <cmd_stat+0x776>\n    479a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 47a1 <cmd_stat+0x77d>\n    47a1:\t48 85 c0             \ttest   %rax,%rax\n    47a4:\t0f 85 9f 00 00 00    \tjne    4849 <cmd_stat+0x825>\n    47aa:\t0f b6 85 f3 f8 ff ff \tmovzbl -0x70d(%rbp),%eax\n    47b1:\t84 c0                \ttest   %al,%al\n    47b3:\t74 07                \tje     47bc <cmd_stat+0x798>\n    47b5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    47ba:\teb 05                \tjmp    47c1 <cmd_stat+0x79d>\n    47bc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    47c1:\t48 89 85 08 f9 ff ff \tmov    %rax,-0x6f8(%rbp)\n    47c8:\t48 8b 85 00 f9 ff ff \tmov    -0x700(%rbp),%rax\n    47cf:\t48 8b 95 08 f9 ff ff \tmov    -0x6f8(%rbp),%rdx\n    47d6:\t48 89 d6             \tmov    %rdx,%rsi\n    47d9:\t48 89 c7             \tmov    %rax,%rdi\n    47dc:\te8 00 00 00 00       \tcallq  47e1 <cmd_stat+0x7bd>\n    47e1:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 47e8 <cmd_stat+0x7c4>\n    47e8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 47ef <cmd_stat+0x7cb>\n    47ef:\t48 85 c0             \ttest   %rax,%rax\n    47f2:\t75 14                \tjne    4808 <cmd_stat+0x7e4>\n    47f4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    47f9:\te8 00 00 00 00       \tcallq  47fe <cmd_stat+0x7da>\n    47fe:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    4803:\te9 b2 04 00 00       \tjmpq   4cba <cmd_stat+0xc96>\n    4808:\t48 8d 85 10 f9 ff ff \tlea    -0x6f0(%rbp),%rax\n    480f:\t48 89 c6             \tmov    %rax,%rsi\n    4812:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4817:\te8 00 00 00 00       \tcallq  481c <cmd_stat+0x7f8>\n    481c:\t48 8d 85 10 f9 ff ff \tlea    -0x6f0(%rbp),%rax\n    4823:\t48 89 c7             \tmov    %rax,%rdi\n    4826:\te8 00 00 00 00       \tcallq  482b <cmd_stat+0x807>\n    482b:\t48 89 c2             \tmov    %rax,%rdx\n    482e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4835 <cmd_stat+0x811>\n    4835:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    483a:\t48 89 c7             \tmov    %rax,%rdi\n    483d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4842:\te8 00 00 00 00       \tcallq  4847 <cmd_stat+0x823>\n    4847:\teb 6a                \tjmp    48b3 <cmd_stat+0x88f>\n    4849:\t8b 85 f4 f8 ff ff    \tmov    -0x70c(%rbp),%eax\n    484f:\t85 c0                \ttest   %eax,%eax\n    4851:\t7e 60                \tjle    48b3 <cmd_stat+0x88f>\n    4853:\t0f b6 85 f3 f8 ff ff \tmovzbl -0x70d(%rbp),%eax\n    485a:\t84 c0                \ttest   %al,%al\n    485c:\t74 07                \tje     4865 <cmd_stat+0x841>\n    485e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4863:\teb 05                \tjmp    486a <cmd_stat+0x846>\n    4865:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    486a:\t48 89 85 08 f9 ff ff \tmov    %rax,-0x6f8(%rbp)\n    4871:\t8b 85 f4 f8 ff ff    \tmov    -0x70c(%rbp),%eax\n    4877:\t48 8b 95 08 f9 ff ff \tmov    -0x6f8(%rbp),%rdx\n    487e:\t48 89 d6             \tmov    %rdx,%rsi\n    4881:\t89 c7                \tmov    %eax,%edi\n    4883:\te8 00 00 00 00       \tcallq  4888 <cmd_stat+0x864>\n    4888:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 488f <cmd_stat+0x86b>\n    488f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4896 <cmd_stat+0x872>\n    4896:\t48 85 c0             \ttest   %rax,%rax\n    4899:\t75 18                \tjne    48b3 <cmd_stat+0x88f>\n    489b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    48a0:\te8 00 00 00 00       \tcallq  48a5 <cmd_stat+0x881>\n    48a5:\te8 00 00 00 00       \tcallq  48aa <cmd_stat+0x886>\n    48aa:\t8b 00                \tmov    (%rax),%eax\n    48ac:\tf7 d8                \tneg    %eax\n    48ae:\te9 07 04 00 00       \tjmpq   4cba <cmd_stat+0xc96>\n    48b3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 48ba <cmd_stat+0x896>\n    48ba:\t48 85 c0             \ttest   %rax,%rax\n    48bd:\t74 2c                \tje     48eb <cmd_stat+0x8c7>\n    48bf:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 48c6 <cmd_stat+0x8a2>\n    48c6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 48cd <cmd_stat+0x8a9>\n    48cd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    48d2:\t48 89 c7             \tmov    %rax,%rdi\n    48d5:\te8 00 00 00 00       \tcallq  48da <cmd_stat+0x8b6>\n    48da:\t85 c0                \ttest   %eax,%eax\n    48dc:\t75 18                \tjne    48f6 <cmd_stat+0x8d2>\n    48de:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 48e9 <cmd_stat+0x8c5>\n    48e5:\t00 00 00 00 \n    48e9:\teb 0b                \tjmp    48f6 <cmd_stat+0x8d2>\n    48eb:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 48f6 <cmd_stat+0x8d2>\n    48f2:\t00 00 00 00 \n    48f6:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 48fd <cmd_stat+0x8d9>\n    48fd:\t84 c0                \ttest   %al,%al\n    48ff:\t74 4b                \tje     494c <cmd_stat+0x928>\n    4901:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4907 <cmd_stat+0x8e3>\n    4907:\t83 f8 01             \tcmp    $0x1,%eax\n    490a:\t75 37                \tjne    4943 <cmd_stat+0x91f>\n    490c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4913 <cmd_stat+0x8ef>\n    4913:\t48 89 c1             \tmov    %rax,%rcx\n    4916:\tba 20 00 00 00       \tmov    $0x20,%edx\n    491b:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    4920:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4925:\te8 00 00 00 00       \tcallq  492a <cmd_stat+0x906>\n    492a:\t48 8d 95 30 f9 ff ff \tlea    -0x6d0(%rbp),%rdx\n    4931:\t48 8d 85 20 f9 ff ff \tlea    -0x6e0(%rbp),%rax\n    4938:\t48 89 d6             \tmov    %rdx,%rsi\n    493b:\t48 89 c7             \tmov    %rax,%rdi\n    493e:\te8 00 00 00 00       \tcallq  4943 <cmd_stat+0x91f>\n    4943:\tc6 05 00 00 00 00 00 \tmovb   $0x0,0x0(%rip)        # 494a <cmd_stat+0x926>\n    494a:\teb 11                \tjmp    495d <cmd_stat+0x939>\n    494c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4952 <cmd_stat+0x92e>\n    4952:\t85 c0                \ttest   %eax,%eax\n    4954:\t75 07                \tjne    495d <cmd_stat+0x939>\n    4956:\tc6 05 00 00 00 00 00 \tmovb   $0x0,0x0(%rip)        # 495d <cmd_stat+0x939>\n    495d:\t83 bd ec f8 ff ff 00 \tcmpl   $0x0,-0x714(%rbp)\n    4964:\t75 2a                \tjne    4990 <cmd_stat+0x96c>\n    4966:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    496b:\te8 e0 b6 ff ff       \tcallq  50 <perf_target__has_task>\n    4970:\t83 f0 01             \txor    $0x1,%eax\n    4973:\t84 c0                \ttest   %al,%al\n    4975:\t74 19                \tje     4990 <cmd_stat+0x96c>\n    4977:\t48 8d 95 30 f9 ff ff \tlea    -0x6d0(%rbp),%rdx\n    497e:\t48 8d 85 20 f9 ff ff \tlea    -0x6e0(%rbp),%rax\n    4985:\t48 89 d6             \tmov    %rdx,%rsi\n    4988:\t48 89 c7             \tmov    %rax,%rdi\n    498b:\te8 00 00 00 00       \tcallq  4990 <cmd_stat+0x96c>\n    4990:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4996 <cmd_stat+0x972>\n    4996:\t85 c0                \ttest   %eax,%eax\n    4998:\t79 19                \tjns    49b3 <cmd_stat+0x98f>\n    499a:\t48 8d 95 30 f9 ff ff \tlea    -0x6d0(%rbp),%rdx\n    49a1:\t48 8d 85 20 f9 ff ff \tlea    -0x6e0(%rbp),%rax\n    49a8:\t48 89 d6             \tmov    %rdx,%rsi\n    49ab:\t48 89 c7             \tmov    %rax,%rdi\n    49ae:\te8 00 00 00 00       \tcallq  49b3 <cmd_stat+0x98f>\n    49b3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 49b9 <cmd_stat+0x995>\n    49b9:\t85 c0                \ttest   %eax,%eax\n    49bb:\t75 11                \tjne    49ce <cmd_stat+0x9aa>\n    49bd:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 49c4 <cmd_stat+0x9a0>\n    49c4:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 49ce <cmd_stat+0x9aa>\n    49cb:\t00 00 00 \n    49ce:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 49d4 <cmd_stat+0x9b0>\n    49d4:\t83 f8 01             \tcmp    $0x1,%eax\n    49d7:\t75 0a                \tjne    49e3 <cmd_stat+0x9bf>\n    49d9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 49df <cmd_stat+0x9bb>\n    49df:\t85 c0                \ttest   %eax,%eax\n    49e1:\t74 48                \tje     4a2b <cmd_stat+0xa07>\n    49e3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    49e8:\te8 c9 b6 ff ff       \tcallq  b6 <perf_target__has_cpu>\n    49ed:\t83 f0 01             \txor    $0x1,%eax\n    49f0:\t84 c0                \ttest   %al,%al\n    49f2:\t74 37                \tje     4a2b <cmd_stat+0xa07>\n    49f4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 49fb <cmd_stat+0x9d7>\n    49fb:\t48 89 c1             \tmov    %rax,%rcx\n    49fe:\tba 48 00 00 00       \tmov    $0x48,%edx\n    4a03:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    4a08:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4a0d:\te8 00 00 00 00       \tcallq  4a12 <cmd_stat+0x9ee>\n    4a12:\t48 8d 95 30 f9 ff ff \tlea    -0x6d0(%rbp),%rdx\n    4a19:\t48 8d 85 20 f9 ff ff \tlea    -0x6e0(%rbp),%rax\n    4a20:\t48 89 d6             \tmov    %rdx,%rsi\n    4a23:\t48 89 c7             \tmov    %rax,%rdi\n    4a26:\te8 00 00 00 00       \tcallq  4a2b <cmd_stat+0xa07>\n    4a2b:\te8 f5 f2 ff ff       \tcallq  3d25 <add_default_attributes>\n    4a30:\t85 c0                \ttest   %eax,%eax\n    4a32:\t0f 85 69 02 00 00    \tjne    4ca1 <cmd_stat+0xc7d>\n    4a38:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4a3d:\te8 00 00 00 00       \tcallq  4a42 <cmd_stat+0xa1e>\n    4a42:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4a49 <cmd_stat+0xa25>\n    4a49:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4a4e:\t48 89 c7             \tmov    %rax,%rdi\n    4a51:\te8 00 00 00 00       \tcallq  4a56 <cmd_stat+0xa32>\n    4a56:\t85 c0                \ttest   %eax,%eax\n    4a58:\t79 53                \tjns    4aad <cmd_stat+0xa89>\n    4a5a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4a5f:\te8 ec b5 ff ff       \tcallq  50 <perf_target__has_task>\n    4a64:\t84 c0                \ttest   %al,%al\n    4a66:\t74 14                \tje     4a7c <cmd_stat+0xa58>\n    4a68:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4a6d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4a72:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4a77:\te8 00 00 00 00       \tcallq  4a7c <cmd_stat+0xa58>\n    4a7c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4a81:\te8 30 b6 ff ff       \tcallq  b6 <perf_target__has_cpu>\n    4a86:\t84 c0                \ttest   %al,%al\n    4a88:\t74 0a                \tje     4a94 <cmd_stat+0xa70>\n    4a8a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4a8f:\te8 00 00 00 00       \tcallq  4a94 <cmd_stat+0xa70>\n    4a94:\t48 8d 95 30 f9 ff ff \tlea    -0x6d0(%rbp),%rdx\n    4a9b:\t48 8d 85 20 f9 ff ff \tlea    -0x6e0(%rbp),%rax\n    4aa2:\t48 89 d6             \tmov    %rdx,%rsi\n    4aa5:\t48 89 c7             \tmov    %rax,%rdi\n    4aa8:\te8 00 00 00 00       \tcallq  4aad <cmd_stat+0xa89>\n    4aad:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4ab3 <cmd_stat+0xa8f>\n    4ab3:\t85 c0                \ttest   %eax,%eax\n    4ab5:\t74 38                \tje     4aef <cmd_stat+0xacb>\n    4ab7:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4abd <cmd_stat+0xa99>\n    4abd:\t83 f8 63             \tcmp    $0x63,%eax\n    4ac0:\t77 2d                \tja     4aef <cmd_stat+0xacb>\n    4ac2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4ac7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4acc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4ad1:\te8 00 00 00 00       \tcallq  4ad6 <cmd_stat+0xab2>\n    4ad6:\t48 8d 95 30 f9 ff ff \tlea    -0x6d0(%rbp),%rdx\n    4add:\t48 8d 85 20 f9 ff ff \tlea    -0x6e0(%rbp),%rax\n    4ae4:\t48 89 d6             \tmov    %rdx,%rsi\n    4ae7:\t48 89 c7             \tmov    %rax,%rdi\n    4aea:\te8 00 00 00 00       \tcallq  4aef <cmd_stat+0xacb>\n    4aef:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4af5 <cmd_stat+0xad1>\n    4af5:\t85 c0                \ttest   %eax,%eax\n    4af7:\t0f 95 c0             \tsetne  %al\n    4afa:\t0f b6 d0             \tmovzbl %al,%edx\n    4afd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4b04 <cmd_stat+0xae0>\n    4b04:\t89 d6                \tmov    %edx,%esi\n    4b06:\t48 89 c7             \tmov    %rax,%rdi\n    4b09:\te8 fe ba ff ff       \tcallq  60c <perf_evlist__alloc_stats>\n    4b0e:\t85 c0                \ttest   %eax,%eax\n    4b10:\t0f 85 79 01 00 00    \tjne    4c8f <cmd_stat+0xc6b>\n    4b16:\te8 4d f1 ff ff       \tcallq  3c68 <perf_stat_init_aggr_mode>\n    4b1b:\t85 c0                \ttest   %eax,%eax\n    4b1d:\t0f 85 81 01 00 00    \tjne    4ca4 <cmd_stat+0xc80>\n    4b23:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4b28:\te8 00 00 00 00       \tcallq  4b2d <cmd_stat+0xb09>\n    4b2d:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4b34 <cmd_stat+0xb10>\n    4b34:\t83 f0 01             \txor    $0x1,%eax\n    4b37:\t84 c0                \ttest   %al,%al\n    4b39:\t74 0f                \tje     4b4a <cmd_stat+0xb26>\n    4b3b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4b40:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4b45:\te8 00 00 00 00       \tcallq  4b4a <cmd_stat+0xb26>\n    4b4a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4b4f:\tbf 11 00 00 00       \tmov    $0x11,%edi\n    4b54:\te8 00 00 00 00       \tcallq  4b59 <cmd_stat+0xb35>\n    4b59:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4b5e:\tbf 0e 00 00 00       \tmov    $0xe,%edi\n    4b63:\te8 00 00 00 00       \tcallq  4b68 <cmd_stat+0xb44>\n    4b68:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4b6d:\tbf 06 00 00 00       \tmov    $0x6,%edi\n    4b72:\te8 00 00 00 00       \tcallq  4b77 <cmd_stat+0xb53>\n    4b77:\tc7 85 f8 f8 ff ff 00 \tmovl   $0x0,-0x708(%rbp)\n    4b7e:\t00 00 00 \n    4b81:\tc7 85 fc f8 ff ff 00 \tmovl   $0x0,-0x704(%rbp)\n    4b88:\t00 00 00 \n    4b8b:\te9 95 00 00 00       \tjmpq   4c25 <cmd_stat+0xc01>\n    4b90:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4b96 <cmd_stat+0xb72>\n    4b96:\t83 f8 01             \tcmp    $0x1,%eax\n    4b99:\t74 2c                \tje     4bc7 <cmd_stat+0xba3>\n    4b9b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4ba1 <cmd_stat+0xb7d>\n    4ba1:\t85 c0                \ttest   %eax,%eax\n    4ba3:\t74 22                \tje     4bc7 <cmd_stat+0xba3>\n    4ba5:\t8b 85 fc f8 ff ff    \tmov    -0x704(%rbp),%eax\n    4bab:\t8d 50 01             \tlea    0x1(%rax),%edx\n    4bae:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4bb5 <cmd_stat+0xb91>\n    4bb5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4bba:\t48 89 c7             \tmov    %rax,%rdi\n    4bbd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4bc2:\te8 00 00 00 00       \tcallq  4bc7 <cmd_stat+0xba3>\n    4bc7:\t48 8b 95 e0 f8 ff ff \tmov    -0x720(%rbp),%rdx\n    4bce:\t8b 85 ec f8 ff ff    \tmov    -0x714(%rbp),%eax\n    4bd4:\t48 89 d6             \tmov    %rdx,%rsi\n    4bd7:\t89 c7                \tmov    %eax,%edi\n    4bd9:\te8 fa ca ff ff       \tcallq  16d8 <run_perf_stat>\n    4bde:\t89 85 f8 f8 ff ff    \tmov    %eax,-0x708(%rbp)\n    4be4:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4beb <cmd_stat+0xbc7>\n    4beb:\t84 c0                \ttest   %al,%al\n    4bed:\t74 2f                \tje     4c1e <cmd_stat+0xbfa>\n    4bef:\t83 bd f8 f8 ff ff ff \tcmpl   $0xffffffff,-0x708(%rbp)\n    4bf6:\t74 26                \tje     4c1e <cmd_stat+0xbfa>\n    4bf8:\t48 8b 95 e0 f8 ff ff \tmov    -0x720(%rbp),%rdx\n    4bff:\t8b 85 ec f8 ff ff    \tmov    -0x714(%rbp),%eax\n    4c05:\t48 89 d6             \tmov    %rdx,%rsi\n    4c08:\t89 c7                \tmov    %eax,%edi\n    4c0a:\te8 f0 eb ff ff       \tcallq  37ff <print_stat>\n    4c0f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4c16 <cmd_stat+0xbf2>\n    4c16:\t48 89 c7             \tmov    %rax,%rdi\n    4c19:\te8 b5 ba ff ff       \tcallq  6d3 <perf_stat__reset_stats>\n    4c1e:\t83 85 fc f8 ff ff 01 \taddl   $0x1,-0x704(%rbp)\n    4c25:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4c2c <cmd_stat+0xc08>\n    4c2c:\t84 c0                \ttest   %al,%al\n    4c2e:\t0f 85 5c ff ff ff    \tjne    4b90 <cmd_stat+0xb6c>\n    4c34:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4c3a <cmd_stat+0xc16>\n    4c3a:\t39 85 fc f8 ff ff    \tcmp    %eax,-0x704(%rbp)\n    4c40:\t0f 8c 4a ff ff ff    \tjl     4b90 <cmd_stat+0xb6c>\n    4c46:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4c4d <cmd_stat+0xc29>\n    4c4d:\t83 f0 01             \txor    $0x1,%eax\n    4c50:\t84 c0                \ttest   %al,%al\n    4c52:\t74 2a                \tje     4c7e <cmd_stat+0xc5a>\n    4c54:\t83 bd f8 f8 ff ff ff \tcmpl   $0xffffffff,-0x708(%rbp)\n    4c5b:\t74 21                \tje     4c7e <cmd_stat+0xc5a>\n    4c5d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4c63 <cmd_stat+0xc3f>\n    4c63:\t85 c0                \ttest   %eax,%eax\n    4c65:\t75 17                \tjne    4c7e <cmd_stat+0xc5a>\n    4c67:\t48 8b 95 e0 f8 ff ff \tmov    -0x720(%rbp),%rdx\n    4c6e:\t8b 85 ec f8 ff ff    \tmov    -0x714(%rbp),%eax\n    4c74:\t48 89 d6             \tmov    %rdx,%rsi\n    4c77:\t89 c7                \tmov    %eax,%edi\n    4c79:\te8 81 eb ff ff       \tcallq  37ff <print_stat>\n    4c7e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4c85 <cmd_stat+0xc61>\n    4c85:\t48 89 c7             \tmov    %rax,%rdi\n    4c88:\te8 f7 b8 ff ff       \tcallq  584 <perf_evlist__free_stats>\n    4c8d:\teb 01                \tjmp    4c90 <cmd_stat+0xc6c>\n    4c8f:\t90                   \tnop\n    4c90:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4c97 <cmd_stat+0xc73>\n    4c97:\t48 89 c7             \tmov    %rax,%rdi\n    4c9a:\te8 00 00 00 00       \tcallq  4c9f <cmd_stat+0xc7b>\n    4c9f:\teb 04                \tjmp    4ca5 <cmd_stat+0xc81>\n    4ca1:\t90                   \tnop\n    4ca2:\teb 01                \tjmp    4ca5 <cmd_stat+0xc81>\n    4ca4:\t90                   \tnop\n    4ca5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4cac <cmd_stat+0xc88>\n    4cac:\t48 89 c7             \tmov    %rax,%rdi\n    4caf:\te8 00 00 00 00       \tcallq  4cb4 <cmd_stat+0xc90>\n    4cb4:\t8b 85 f8 f8 ff ff    \tmov    -0x708(%rbp),%eax\n    4cba:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    4cbe:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    4cc5:\t00 00 \n    4cc7:\t74 05                \tje     4cce <cmd_stat+0xcaa>\n    4cc9:\te8 00 00 00 00       \tcallq  4cce <cmd_stat+0xcaa>\n    4cce:\tc9                   \tleaveq \n    4ccf:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall cmd_stat(unsigned int a1, const char **a2) {\n  char *v3;\n  char *v4;\n  char *v5;\n  int v6;\n  char v7;\n  int fd;\n  unsigned int v9;\n  int i;\n  char *s1;\n  char *modes;\n  struct timespec tp;\n  __int64 v14[Number];\n  _QWORD v15[Number];\n  v15[Number] = __readfsqword(Number);\n  v7 = Number;\n  fd = Number;\n  s1 = Number L;\n  memset(v15, Number, Number);\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &evsel_list;\n  v15[Number] = String;\n  v15[Number] = String;\n  v15[Number] = &parse_events_option;\n  LODWORD(v15[Number]) = Number;\n  v15[Number] = String;\n  v15[Number] = &evsel_list;\n  v15[Number] = String;\n  v15[Number] = String;\n  v15[Number] = &parse_filter;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &no_inherit;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &target;\n  v15[Number] = String;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &qword_4CE8;\n  v15[Number] = String;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &unk_4D04;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &group;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &scale;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &verbose;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &run_count;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &null_run;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &detailed_run;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &sync_run;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = String;\n  LODWORD(v15[Number]) = Number;\n  v15[Number] = stat__set_big_num;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &qword_4CF0;\n  v15[Number] = String;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &aggr_mode;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &csv_sep;\n  v15[Number] = String;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &evsel_list;\n  v15[Number] = String;\n  v15[Number] = String;\n  v15[Number] = &parse_cgroups;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &s1;\n  v15[Number] = String;\n  v15[Number] = String;\n  LODWORD(v15[Number]) = Number;\n  v15[Number] = String;\n  v15[Number] = &v7;\n  v15[Number] = String;\n  LODWORD(v15[Number]) = Number;\n  v15[Number] = String;\n  v15[Number] = &fd;\n  v15[Number] = String;\n  LODWORD(v15[Number]) = Number;\n  v15[Number] = String;\n  v15[Number] = &pre_cmd;\n  v15[Number] = String;\n  v15[Number] = String;\n  LODWORD(v15[Number]) = Number;\n  v15[Number] = String;\n  v15[Number] = &post_cmd;\n  v15[Number] = String;\n  v15[Number] = String;\n  v15[Number] = Number;\n  v15[Number] = String;\n  v15[Number] = &interval;\n  v15[Number] = String;\n  LODWORD(v15[Number]) = Number;\n  v15[Number] = String;\n  v15[Number] = &aggr_mode;\n  v15[Number] = String;\n  v15[Number] = Number L;\n  LODWORD(v15[Number]) = Number;\n  v15[Number] = String;\n  v15[Number] = &aggr_mode;\n  v15[Number] = String;\n  v15[Number] = Number L;\n  v14[Number] = (__int64)String;\n  v14[Number] = Number L;\n  v9 = Number;\n  setlocale(Number, &locale);\n  evsel_list = perf_evlist__new();\n  if (!evsel_list)\n    return Number L;\n  v6 = parse_options(a1, a2, v15, v14, Number L);\n  output = stderr;\n  if (s1 && strcmp(s1, String))\n    output = Number L;\n  if (s1 && fd) {\n    fwrite(String, Number, Number, stderr);\n    usage_with_options(v14, v15);\n  }\n  if (fd < Number) {\n    fwrite(String, Number, Number, stderr);\n    usage_with_options(v14, v15);\n  }\n  if (output) {\n    if (fd > Number) {\n      v5 = v7 ? String : String;\n      modes = v5;\n      output = fdopen(fd, v5);\n      if (!output) {\n        perror(String);\n        return (unsigned int)-*_errno_location();\n      }\n    }\n  } else {\n    if (v7)\n      v3 = String;\n    else\n      v3 = String;\n    modes = v3;\n    output = fopen64(s1, v3);\n    if (!output) {\n      perror(String);\n      return Number;\n    }\n    clock_gettime(Number, &tp);\n    v4 = ctime(&tp.tv_sec);\n    fprintf(output, String, v4);\n  }\n  if (csv_sep) {\n    csv_output = Number;\n    if (!strcmp(csv_sep, String))\n      csv_sep = String;\n  } else {\n    csv_sep = String;\n  }\n  if (csv_output) {\n    if (big_num_opt == Number) {\n      fwrite(String, Number, Number, stderr);\n      usage_with_options(v14, v15);\n    }\n    big_num = Number;\n  } else if (!big_num_opt) {\n    big_num = Number;\n  }\n  if (!v6 && !perf_target__has_task(&target))\n    usage_with_options(v14, v15);\n  if (run_count < Number)\n    usage_with_options(v14, v15);\n  if (!run_count) {\n    forever = Number;\n    run_count = Number;\n  }\n  if ((aggr_mode != Number || nr_cgroups) &&\n      !perf_target__has_cpu((__int64)&target)) {\n    fwrite(String, Number, Number, stderr);\n    usage_with_options(v14, v15);\n  }\n  if (!(unsigned int)add_default_attributes()) {\n    perf_target__validate(&target);\n    if ((int)perf_evlist__create_maps(evsel_list, &target) < Number) {\n      if (perf_target__has_task(&target))\n        eprintf(Number L, String);\n      if (perf_target__has_cpu((__int64)&target))\n        perror(String);\n      usage_with_options(v14, v15);\n    }\n    if (interval && (unsigned int)interval <= Number) {\n      eprintf(Number L, String);\n      usage_with_options(v14, v15);\n    }\n    if ((unsigned int)perf_evlist__alloc_stats((_QWORD **)evsel_list,\n                                               interval != Number))\n      goto LABEL_74;\n    if (!(unsigned int)perf_stat_init_aggr_mode()) {\n      atexit(sig_atexit);\n      if (forever != Number)\n        signal(Number, skip_signal);\n      signal(Number, skip_signal);\n      signal(Number, skip_signal);\n      signal(Number, skip_signal);\n      v9 = Number;\n      for (i = Number; forever || i < run_count; ++i) {\n        if (run_count != Number && verbose)\n          fprintf(output, String, (unsigned int)(i + Number));\n        v9 = run_perf_stat(v6, a2);\n        if (forever && v9 != Number) {\n          print_stat(v6, a2);\n          perf_stat__reset_stats((_QWORD **)evsel_list);\n        }\n      }\n      if (forever != Number && v9 != Number && !interval)\n        print_stat(v6, a2);\n      perf_evlist__free_stats((_QWORD **)evsel_list);\n    LABEL_74:\n      perf_evlist__delete_maps(evsel_list);\n      goto LABEL_75;\n    }\n  }\nLABEL_75:\n  perf_evlist__delete(evsel_list);\n  return v9;\n}", "code_t": "int __cdecl cmd_stat(int argc, const char **argv, const char *prefix) {\n  const char *v4;\n  char *v5;\n  const char *v6;\n  int argca;\n  bool append_file;\n  int output_fd;\n  int status;\n  int run_idx;\n  const char *output_name;\n  const char *mode;\n  timespec <span class=\"supfact\">tm</span>;\n  const char *stat_usage[Number];\n  option options[Number];\n  unsigned __int64 v17;\n  v17 = __readfsqword(Number);\n  append_file = Number;\n  output_fd = Number;\n  output_name = Number L;\n  memset(options, Number, sizeof(options));\n  options[Number].type = OPTION_CALLBACK;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &evsel_list;\n  options[Number].argh = String;\n  options[Number].help = String;\n  options[Number].callback = (parse_opt_cb *)&parse_events_option;\n  options[Number].type = OPTION_CALLBACK;\n  options[Number].long_name = String;\n  options[Number].value = &evsel_list;\n  options[Number].argh = String;\n  options[Number].help = String;\n  options[Number].callback = (parse_opt_cb *)&parse_filter;\n  options[Number].type = OPTION_BOOLEAN;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &no_inherit;\n  options[Number].help = String;\n  options[Number].type = OPTION_STRING;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &target;\n  options[Number].argh = String;\n  options[Number].help = String;\n  options[Number].type = OPTION_STRING;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &target.tid;\n  options[Number].argh = String;\n  options[Number].help = String;\n  options[Number].type = OPTION_BOOLEAN;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &target.system_wide;\n  options[Number].help = String;\n  options[Number].type = OPTION_BOOLEAN;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &group;\n  options[Number].help = String;\n  options[Number].type = OPTION_BOOLEAN;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &scale;\n  options[Number].help = String;\n  options[Number].type = OPTION_INCR;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &verbose;\n  options[Number].help = String;\n  options[Number].type = OPTION_INTEGER;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &run_count;\n  options[Number].help = String;\n  options[Number].type = OPTION_BOOLEAN;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &null_run;\n  options[Number].help = String;\n  options[Number].type = OPTION_INCR;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &detailed_run;\n  options[Number].help = String;\n  options[Number].type = OPTION_BOOLEAN;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &sync_run;\n  options[Number].help = String;\n  options[Number].type = OPTION_CALLBACK;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].help = String;\n  options[Number].flags = Number;\n  options[Number].callback = (parse_opt_cb *)stat__set_big_num;\n  options[Number].type = OPTION_STRING;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &target.cpu_list;\n  options[Number].argh = String;\n  options[Number].help = String;\n  options[Number].type = OPTION_SET_UINT;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &aggr_mode_0;\n  options[Number].help = String;\n  options[Number].type = OPTION_STRING;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &csv_sep;\n  options[Number].argh = String;\n  options[Number].help = String;\n  options[Number].type = OPTION_CALLBACK;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &evsel_list;\n  options[Number].argh = String;\n  options[Number].help = String;\n  options[Number].callback = (parse_opt_cb *)&parse_cgroups;\n  options[Number].type = OPTION_STRING;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &output_name;\n  options[Number].argh = String;\n  options[Number].help = String;\n  options[Number].type = OPTION_BOOLEAN;\n  options[Number].long_name = String;\n  options[Number].value = &append_file;\n  options[Number].help = String;\n  options[Number].type = OPTION_INTEGER;\n  options[Number].long_name = String;\n  options[Number].value = &output_fd;\n  options[Number].help = String;\n  options[Number].type = OPTION_STRING;\n  options[Number].long_name = String;\n  options[Number].value = &pre_cmd;\n  options[Number].argh = String;\n  options[Number].help = String;\n  options[Number].type = OPTION_STRING;\n  options[Number].long_name = String;\n  options[Number].value = &post_cmd;\n  options[Number].argh = String;\n  options[Number].help = String;\n  options[Number].type = OPTION_UINTEGER;\n  options[Number].short_name = Number;\n  options[Number].long_name = String;\n  options[Number].value = &interval;\n  options[Number].help = String;\n  options[Number].type = OPTION_SET_UINT;\n  options[Number].long_name = String;\n  options[Number].value = &aggr_mode_0;\n  options[Number].help = String;\n  options[Number].defval = Number L;\n  options[Number].type = OPTION_SET_UINT;\n  options[Number].long_name = String;\n  options[Number].value = &aggr_mode_0;\n  options[Number].help = String;\n  options[Number].defval = Number L;\n  stat_usage[Number] = String;\n  stat_usage[Number] = Number L;\n  status = Number;\n  setlocale(Number, &locale);\n  evsel_list = (perf_evlist *)perf_evlist__new();\n  if (!evsel_list)\n    return Number;\n  argca =\n      parse_options((unsigned int)argc, argv, options, stat_usage, Number L);\n  output = stderr;\n  if (output_name && strcmp(output_name, String))\n    output = Number L;\n  if (output_name && output_fd) {\n    fwrite(String, Number, Number, stderr);\n    usage_with_options(stat_usage, options);\n  }\n  if (output_fd < Number) {\n    fwrite(String, Number, Number, stderr);\n    usage_with_options(stat_usage, options);\n  }\n  if (output) {\n    if (output_fd > Number) {\n      v6 = append_file ? String : String;\n      mode = v6;\n      output = fdopen(output_fd, v6);\n      if (!output) {\n        perror(String);\n        return -*_errno_location();\n      }\n    }\n  } else {\n    if (append_file)\n      v4 = String;\n    else\n      v4 = String;\n    mode = v4;\n    output = fopen64(output_name, v4);\n    if (!output) {\n      perror(String);\n      return Number;\n    }\n    clock_gettime(Number, &<span class=\"supfact\">tm</span>);\n    v5 = ctime(&<span class=\"supfact\">tm</span>.tv_sec);\n    fprintf(output, String, v5);\n  }\n  if (csv_sep) {\n    csv_output = Number;\n    if (!strcmp(csv_sep, String))\n      csv_sep = String;\n  } else {\n    csv_sep = String;\n  }\n  if (csv_output) {\n    if (big_num_opt == Number) {\n      fwrite(String, Number, Number, stderr);\n      usage_with_options(stat_usage, options);\n    }\n    big_num = Number;\n  } else if (!big_num_opt) {\n    big_num = Number;\n  }\n  if (!argca && !perf_target__has_task(&target))\n    usage_with_options(stat_usage, options);\n  if (run_count < Number)\n    usage_with_options(stat_usage, options);\n  if (!run_count) {\n    forever = Number;\n    run_count = Number;\n  }\n  if ((aggr_mode_0 != AGGR_GLOBAL || nr_cgroups) &&\n      !perf_target__has_cpu(&target)) {\n    fwrite(String, Number, Number, stderr);\n    usage_with_options(stat_usage, options);\n  }\n  if (!add_default_attributes()) {\n    perf_target__validate(&target);\n    if ((int)perf_evlist__create_maps(evsel_list, &target) < Number) {\n      if (perf_target__has_task(&target))\n        eprintf(Number L, String);\n      if (perf_target__has_cpu(&target))\n        perror(String);\n      usage_with_options(stat_usage, options);\n    }\n    if (interval && interval <= Number) {\n      eprintf(Number L, String);\n      usage_with_options(stat_usage, options);\n    }\n    if (perf_evlist__alloc_stats(evsel_list, interval != Number))\n      goto out_free_maps;\n    if (!perf_stat_init_aggr_mode()) {\n      atexit(sig_atexit);\n      if (!forever)\n        signal(Number, (__sighandler_t)skip_signal);\n      signal(Number, (__sighandler_t)skip_signal);\n      signal(Number, (__sighandler_t)skip_signal);\n      signal(Number, (__sighandler_t)skip_signal);\n      status = Number;\n      for (run_idx = Number; forever || run_idx < run_count; ++run_idx) {\n        if (run_count != Number && verbose)\n          fprintf(output, String, (unsigned int)(run_idx + Number));\n        status = run_perf_stat(argca, argv);\n        if (forever && status != Number) {\n          print_stat(argca, argv);\n          perf_stat__reset_stats(evsel_list);\n        }\n      }\n      if (!forever && status != Number && !interval)\n        print_stat(argca, argv);\n      perf_evlist__free_stats(evsel_list);\n    out_free_maps:\n      perf_evlist__delete_maps(evsel_list);\n      goto out;\n    }\n  }\nout:\n  perf_evlist__delete(evsel_list);\n  return status;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "pred_name": "tm", "ref_name": "tm", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "zakkak", "repo_name": "lb-bind", "path": "zakkak/lb-bind/54aa281813b65caf130f7b637667ec3960bb1e60bd7b85c9746455877e3658dd", "path_in_repo": "zakkak/lb-bind/bind-9.9.0/bin/tests/virtual-time/vtwrapper.o", "objdump": "000000000000052a <interval_deflate>:\n 52a:\t55                   \tpush   %rbp\n 52b:\t48 89 e5             \tmov    %rsp,%rbp\n 52e:\t48 83 ec 30          \tsub    $0x30,%rsp\n 532:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 536:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n 53a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 53e:\t48 8b 10             \tmov    (%rax),%rdx\n 541:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 545:\t48 89 10             \tmov    %rdx,(%rax)\n 548:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 54c:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 550:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 554:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n 558:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 55c:\t48 8b 00             \tmov    (%rax),%rax\n 55f:\t48 85 c0             \ttest   %rax,%rax\n 562:\t75 14                \tjne    578 <interval_deflate+0x4e>\n 564:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 568:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 56c:\t48 3d 10 27 00 00    \tcmp    $0x2710,%rax\n 572:\t0f 8e 12 01 00 00    \tjle    68a <interval_deflate+0x160>\n 578:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n 57c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 581:\t48 89 c7             \tmov    %rax,%rdi\n 584:\te8 00 00 00 00       \tcallq  589 <interval_deflate+0x5f>\n 589:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 58d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 591:\t48 8b 00             \tmov    (%rax),%rax\n 594:\t48 01 d0             \tadd    %rdx,%rax\n 597:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 59b:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 59f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 5a3:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 5a7:\t48 01 d0             \tadd    %rdx,%rax\n 5aa:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 5ae:\teb 1a                \tjmp    5ca <interval_deflate+0xa0>\n 5b0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 5b4:\t48 83 c0 01          \tadd    $0x1,%rax\n 5b8:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 5bc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 5c0:\t48 2d 40 42 0f 00    \tsub    $0xf4240,%rax\n 5c6:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 5ca:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 5ce:\t48 3d 3f 42 0f 00    \tcmp    $0xf423f,%rax\n 5d4:\t7f da                \tjg     5b0 <interval_deflate+0x86>\n 5d6:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n 5da:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n 5de:\t48 89 d6             \tmov    %rdx,%rsi\n 5e1:\t48 89 c7             \tmov    %rax,%rdi\n 5e4:\te8 3e fc ff ff       \tcallq  227 <absolute_deflate>\n 5e9:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 5ed:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 5f1:\t48 89 d6             \tmov    %rdx,%rsi\n 5f4:\t48 89 c7             \tmov    %rax,%rdi\n 5f7:\te8 2b fc ff ff       \tcallq  227 <absolute_deflate>\n 5fc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 600:\t48 8b 10             \tmov    (%rax),%rdx\n 603:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 607:\t48 29 c2             \tsub    %rax,%rdx\n 60a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 60e:\t48 89 10             \tmov    %rdx,(%rax)\n 611:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 615:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 619:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 61d:\t48 29 c2             \tsub    %rax,%rdx\n 620:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 624:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n 628:\teb 29                \tjmp    653 <interval_deflate+0x129>\n 62a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 62e:\t48 8b 00             \tmov    (%rax),%rax\n 631:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n 635:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 639:\t48 89 10             \tmov    %rdx,(%rax)\n 63c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 640:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 644:\t48 8d 90 40 42 0f 00 \tlea    0xf4240(%rax),%rdx\n 64b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 64f:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n 653:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 657:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 65b:\t48 85 c0             \ttest   %rax,%rax\n 65e:\t78 ca                \tjs     62a <interval_deflate+0x100>\n 660:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 664:\t48 8b 00             \tmov    (%rax),%rax\n 667:\t48 85 c0             \ttest   %rax,%rax\n 66a:\t75 21                \tjne    68d <interval_deflate+0x163>\n 66c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 670:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 674:\t48 3d 0f 27 00 00    \tcmp    $0x270f,%rax\n 67a:\t7f 11                \tjg     68d <interval_deflate+0x163>\n 67c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 680:\t48 c7 40 08 10 27 00 \tmovq   $0x2710,0x8(%rax)\n 687:\t00 \n 688:\teb 03                \tjmp    68d <interval_deflate+0x163>\n 68a:\t90                   \tnop\n 68b:\teb 01                \tjmp    68e <interval_deflate+0x164>\n 68d:\t90                   \tnop\n 68e:\tc9                   \tleaveq \n 68f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall interval_deflate(__int64 *a1, __int64 *a2) {\n  __int64 result;\n  __int64 v3;\n  __int64 i;\n  __int64 v5;\n  __int64 v6;\n  *a2 = *a1;\n  a2[Number] = a1[Number];\n  if (*a2 || (result = a2[Number], result > Number)) {\n    gettimeofday(&v5, Number L);\n    v3 = v5 + *a1;\n    for (i = v6 + a1[Number]; i > Number; i -= Number L)\n      ++v3;\n    absolute_deflate(&v5, &v5);\n    absolute_deflate(&v3, a2);\n    *a2 -= v5;\n    for (a2[Number] -= v6; a2[Number] < Number; a2[Number] += Number L)\n      --*a2;\n    result = *a2;\n    if (!*a2) {\n      result = a2[Number];\n      if (result <= Number) {\n        result = (__int64)a2;\n        a2[Number] = Number L;\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl interval_deflate(timeval *rt, timeval *vt) {\n  timeval <span class=\"supfact\">tv</span>;\n  timeval <span class=\"supfact\">now</span>;\n  *vt = *rt;\n  if (vt->tv_sec || vt->tv_usec > Number) {\n    gettimeofday(&<span class=\"supfact\">now</span>, Number L);\n    <span class=\"supfact\">tv</span>.tv_sec = <span class=\"supfact\">now</span>.tv_sec + rt->tv_sec;\n    for (<span class=\"supfact\">tv</span>.tv_usec = <span class=\"supfact\">now</span>.tv_usec + rt->tv_usec;\n         <span class=\"supfact\">tv</span>.tv_usec > Number;\n         <span class=\"supfact\">tv</span>.tv_usec -= Number L)\n      ++<span class=\"supfact\">tv</span>.tv_sec;\n    absolute_deflate(&<span class=\"supfact\">now</span>, &<span class=\"supfact\">now</span>);\n    absolute_deflate(&<span class=\"supfact\">tv</span>, vt);\n    vt->tv_sec -= <span class=\"supfact\">now</span>.tv_sec;\n    for (vt->tv_usec -= <span class=\"supfact\">now</span>.tv_usec; vt->tv_usec < Number;\n         vt->tv_usec += Number L)\n      --vt->tv_sec;\n    if (!vt->tv_sec && vt->tv_usec <= Number)\n      vt->tv_usec = Number L;\n  }\n}", "var": [{"name": "v3", "type": "unsigned __int64", "pred_name": "__unk__", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v5", "type": "unsigned __int64", "pred_name": "__unk__", "ref_name": "now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "deeponion", "repo_name": "deeponion-legacy", "path": "deeponion/deeponion-legacy/67ec94185c036a4087635d7c4988300ac248e7a67adafa162618d00c1699e799", "path_in_repo": "deeponion/deeponion-legacy/src/leveldb/out-static/hash_test", "objdump": "0000000000403be2 <_ZN7leveldb6DBImpl11GetPropertyERKNS_5SliceEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold>:\n  403be2:\t4c 89 e7             \tmov    %r12,%rdi\n  403be5:\te8 06 fe 02 00       \tcallq  4339f0 <_ZN7leveldb4port5Mutex6UnlockEv>\n  403bea:\t48 89 ef             \tmov    %rbp,%rdi\n  403bed:\te8 be f9 ff ff       \tcallq  4035b0 <_Unwind_Resume@plt>", "code_s": "void __fastcall __noreturn leveldb DBImpl GetProperty() {\n  struct _Unwind_Exception *v0;\n  leveldb port Mutex *v1;\n  leveldb port Mutex Unlock(v1);\n  _Unwind_Resume(v0);\n}", "code_t": "void __fastcall __noreturn leveldb DBImpl GetProperty() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  leveldb port Mutex *v1;\n  leveldb port Mutex Unlock(v1);\n  _Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "var": [{"name": "v0", "type": "struct _Unwind_Exception *", "pred_name": "v0", "ref_name": "v0", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": true}, {"repo_owner": "avble", "repo_name": "natClientEx", "path": "avble/natClientEx/a360aed68a7016f580649d16dacbf62c5871877259fd2ac35a159812917aa7c5", "path_in_repo": "avble/natClientEx/pjproject-2.5/pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/playsine", "objdump": "0000000000423939 <srtp_protect_rtcp>:\n  423939:\t55                   \tpush   %rbp\n  42393a:\t48 89 e5             \tmov    %rsp,%rbp\n  42393d:\t53                   \tpush   %rbx\n  42393e:\t48 81 ec b8 00 00 00 \tsub    $0xb8,%rsp\n  423945:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  42394c:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n  423953:\t48 89 95 48 ff ff ff \tmov    %rdx,-0xb8(%rbp)\n  42395a:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  423961:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  423965:\tc7 45 a4 00 00 00 00 \tmovl   $0x0,-0x5c(%rbp)\n  42396c:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n  423973:\t00 \n  423974:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  42397b:\t8b 00                \tmov    (%rax),%eax\n  42397d:\t83 f8 07             \tcmp    $0x7,%eax\n  423980:\t7f 0a                \tjg     42398c <srtp_protect_rtcp+0x53>\n  423982:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  423987:\te9 4c 05 00 00       \tjmpq   423ed8 <srtp_protect_rtcp+0x59f>\n  42398c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  423990:\t8b 50 04             \tmov    0x4(%rax),%edx\n  423993:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  42399a:\t89 d6                \tmov    %edx,%esi\n  42399c:\t48 89 c7             \tmov    %rax,%rdi\n  42399f:\te8 55 ee ff ff       \tcallq  4227f9 <srtp_get_stream>\n  4239a4:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  4239a8:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  4239ad:\t75 78                \tjne    423a27 <srtp_protect_rtcp+0xee>\n  4239af:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4239b6:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4239ba:\t48 85 c0             \ttest   %rax,%rax\n  4239bd:\t74 5e                \tje     423a1d <srtp_protect_rtcp+0xe4>\n  4239bf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4239c3:\t8b 48 04             \tmov    0x4(%rax),%ecx\n  4239c6:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4239cd:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4239d1:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n  4239d5:\t89 ce                \tmov    %ecx,%esi\n  4239d7:\t48 89 c7             \tmov    %rax,%rdi\n  4239da:\te8 5c c4 ff ff       \tcallq  41fe3b <srtp_stream_clone>\n  4239df:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  4239e2:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  4239e6:\t74 08                \tje     4239f0 <srtp_protect_rtcp+0xb7>\n  4239e8:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4239eb:\te9 e8 04 00 00       \tjmpq   423ed8 <srtp_protect_rtcp+0x59f>\n  4239f0:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4239f4:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  4239fb:\t48 8b 12             \tmov    (%rdx),%rdx\n  4239fe:\t48 89 90 98 00 00 00 \tmov    %rdx,0x98(%rax)\n  423a05:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  423a09:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  423a10:\t48 89 10             \tmov    %rdx,(%rax)\n  423a13:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  423a17:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  423a1b:\teb 0a                \tjmp    423a27 <srtp_protect_rtcp+0xee>\n  423a1d:\tb8 0d 00 00 00       \tmov    $0xd,%eax\n  423a22:\te9 b1 04 00 00       \tjmpq   423ed8 <srtp_protect_rtcp+0x59f>\n  423a27:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423a2b:\t8b 40 70             \tmov    0x70(%rax),%eax\n  423a2e:\t83 f8 01             \tcmp    $0x1,%eax\n  423a31:\t74 4e                \tje     423a81 <srtp_protect_rtcp+0x148>\n  423a33:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423a37:\t8b 40 70             \tmov    0x70(%rax),%eax\n  423a3a:\t85 c0                \ttest   %eax,%eax\n  423a3c:\t75 0d                \tjne    423a4b <srtp_protect_rtcp+0x112>\n  423a3e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423a42:\tc7 40 70 01 00 00 00 \tmovl   $0x1,0x70(%rax)\n  423a49:\teb 36                \tjmp    423a81 <srtp_protect_rtcp+0x148>\n  423a4b:\t48 8b 05 be ce 06 00 \tmov    0x6cebe(%rip),%rax        # 490910 <srtp_event_handler>\n  423a52:\t48 85 c0             \ttest   %rax,%rax\n  423a55:\t74 2a                \tje     423a81 <srtp_protect_rtcp+0x148>\n  423a57:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  423a5e:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n  423a62:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423a66:\t48 89 45 88          \tmov    %rax,-0x78(%rbp)\n  423a6a:\tc7 45 90 00 00 00 00 \tmovl   $0x0,-0x70(%rbp)\n  423a71:\t48 8b 15 98 ce 06 00 \tmov    0x6ce98(%rip),%rdx        # 490910 <srtp_event_handler>\n  423a78:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  423a7c:\t48 89 c7             \tmov    %rax,%rdi\n  423a7f:\tff d2                \tcallq  *%rdx\n  423a81:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423a85:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  423a89:\t8b 40 14             \tmov    0x14(%rax),%eax\n  423a8c:\t83 f8 06             \tcmp    $0x6,%eax\n  423a8f:\t74 10                \tje     423aa1 <srtp_protect_rtcp+0x168>\n  423a91:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423a95:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  423a99:\t8b 40 14             \tmov    0x14(%rax),%eax\n  423a9c:\t83 f8 07             \tcmp    $0x7,%eax\n  423a9f:\t75 26                \tjne    423ac7 <srtp_protect_rtcp+0x18e>\n  423aa1:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n  423aa8:\t48 8b 95 50 ff ff ff \tmov    -0xb0(%rbp),%rdx\n  423aaf:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n  423ab3:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  423aba:\t48 89 c7             \tmov    %rax,%rdi\n  423abd:\te8 78 f5 ff ff       \tcallq  42303a <srtp_protect_rtcp_aead>\n  423ac2:\te9 11 04 00 00       \tjmpq   423ed8 <srtp_protect_rtcp+0x59f>\n  423ac7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423acb:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  423acf:\t48 89 c7             \tmov    %rax,%rdi\n  423ad2:\te8 9a 59 00 00       \tcallq  429471 <auth_get_tag_length>\n  423ad7:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n  423ada:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  423ade:\t48 83 c0 08          \tadd    $0x8,%rax\n  423ae2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  423ae6:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  423aed:\t8b 00                \tmov    (%rax),%eax\n  423aef:\t83 e8 08             \tsub    $0x8,%eax\n  423af2:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n  423af5:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  423af8:\t89 c2                \tmov    %eax,%edx\n  423afa:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  423afe:\t48 01 d0             \tadd    %rdx,%rax\n  423b01:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  423b05:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423b09:\t8b 40 60             \tmov    0x60(%rax),%eax\n  423b0c:\t83 e0 01             \tand    $0x1,%eax\n  423b0f:\t85 c0                \ttest   %eax,%eax\n  423b11:\t74 12                \tje     423b25 <srtp_protect_rtcp+0x1ec>\n  423b13:\tbf 00 00 00 80       \tmov    $0x80000000,%edi\n  423b18:\te8 d3 1b fe ff       \tcallq  4056f0 <htonl@plt>\n  423b1d:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  423b21:\t89 02                \tmov    %eax,(%rdx)\n  423b23:\teb 19                \tjmp    423b3e <srtp_protect_rtcp+0x205>\n  423b25:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  423b2c:\t00 \n  423b2d:\tc7 45 a4 00 00 00 00 \tmovl   $0x0,-0x5c(%rbp)\n  423b34:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  423b38:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  423b3e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  423b42:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  423b46:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  423b4d:\t8b 00                \tmov    (%rax),%eax\n  423b4f:\t48 98                \tcltq   \n  423b51:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n  423b55:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  423b59:\t48 01 d0             \tadd    %rdx,%rax\n  423b5c:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  423b60:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423b64:\t48 83 c0 18          \tadd    $0x18,%rax\n  423b68:\t48 89 c7             \tmov    %rax,%rdi\n  423b6b:\te8 73 79 00 00       \tcallq  42b4e3 <rdbx_get_packet_index>\n  423b70:\t48 89 c7             \tmov    %rax,%rdi\n  423b73:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  423b76:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423b7a:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n  423b7e:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n  423b85:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n  423b89:\t49 89 f8             \tmov    %rdi,%r8\n  423b8c:\t48 89 c7             \tmov    %rax,%rdi\n  423b8f:\te8 0b 0f 00 00       \tcallq  424a9f <ekt_write_data>\n  423b94:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423b98:\t48 83 c0 48          \tadd    $0x48,%rax\n  423b9c:\t48 89 c7             \tmov    %rax,%rdi\n  423b9f:\te8 ea 76 00 00       \tcallq  42b28e <rdb_increment>\n  423ba4:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  423ba7:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  423bab:\t74 08                \tje     423bb5 <srtp_protect_rtcp+0x27c>\n  423bad:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  423bb0:\te9 23 03 00 00       \tjmpq   423ed8 <srtp_protect_rtcp+0x59f>\n  423bb5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423bb9:\t48 83 c0 48          \tadd    $0x48,%rax\n  423bbd:\t48 89 c7             \tmov    %rax,%rdi\n  423bc0:\te8 f2 76 00 00       \tcallq  42b2b7 <rdb_get_value>\n  423bc5:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n  423bc8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  423bcc:\t8b 18                \tmov    (%rax),%ebx\n  423bce:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  423bd1:\t89 c7                \tmov    %eax,%edi\n  423bd3:\te8 18 1b fe ff       \tcallq  4056f0 <htonl@plt>\n  423bd8:\t09 c3                \tor     %eax,%ebx\n  423bda:\t89 da                \tmov    %ebx,%edx\n  423bdc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  423be0:\t89 10                \tmov    %edx,(%rax)\n  423be2:\t8b 05 18 cd 06 00    \tmov    0x6cd18(%rip),%eax        # 490900 <mod_srtp>\n  423be8:\t85 c0                \ttest   %eax,%eax\n  423bea:\t74 23                \tje     423c0f <srtp_protect_rtcp+0x2d6>\n  423bec:\t48 8b 05 15 cd 06 00 \tmov    0x6cd15(%rip),%rax        # 490908 <mod_srtp+0x8>\n  423bf3:\t8b 55 ac             \tmov    -0x54(%rbp),%edx\n  423bf6:\t89 d1                \tmov    %edx,%ecx\n  423bf8:\t48 89 c2             \tmov    %rax,%rdx\n  423bfb:\tbe ac 8a 47 00       \tmov    $0x478aac,%esi\n  423c00:\tbf 07 00 00 00       \tmov    $0x7,%edi\n  423c05:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  423c0a:\te8 ac ba ff ff       \tcallq  41f6bb <err_report>\n  423c0f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423c13:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  423c17:\t48 8b 00             \tmov    (%rax),%rax\n  423c1a:\t8b 40 60             \tmov    0x60(%rax),%eax\n  423c1d:\t83 f8 01             \tcmp    $0x1,%eax\n  423c20:\t0f 85 86 00 00 00    \tjne    423cac <srtp_protect_rtcp+0x373>\n  423c26:\tc7 85 70 ff ff ff 00 \tmovl   $0x0,-0x90(%rbp)\n  423c2d:\t00 00 00 \n  423c30:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  423c34:\t8b 40 04             \tmov    0x4(%rax),%eax\n  423c37:\t89 85 74 ff ff ff    \tmov    %eax,-0x8c(%rbp)\n  423c3d:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  423c40:\tc1 e8 10             \tshr    $0x10,%eax\n  423c43:\t89 c7                \tmov    %eax,%edi\n  423c45:\te8 a6 1a fe ff       \tcallq  4056f0 <htonl@plt>\n  423c4a:\t89 85 78 ff ff ff    \tmov    %eax,-0x88(%rbp)\n  423c50:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  423c53:\tc1 e0 10             \tshl    $0x10,%eax\n  423c56:\t89 c7                \tmov    %eax,%edi\n  423c58:\te8 93 1a fe ff       \tcallq  4056f0 <htonl@plt>\n  423c5d:\t89 85 7c ff ff ff    \tmov    %eax,-0x84(%rbp)\n  423c63:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423c67:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  423c6b:\t48 85 c0             \ttest   %rax,%rax\n  423c6e:\t74 32                \tje     423ca2 <srtp_protect_rtcp+0x369>\n  423c70:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423c74:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  423c78:\t48 8b 00             \tmov    (%rax),%rax\n  423c7b:\t4c 8b 40 30          \tmov    0x30(%rax),%r8\n  423c7f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423c83:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  423c87:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  423c8b:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n  423c92:\tba 00 00 00 00       \tmov    $0x0,%edx\n  423c97:\t48 89 ce             \tmov    %rcx,%rsi\n  423c9a:\t48 89 c7             \tmov    %rax,%rdi\n  423c9d:\t41 ff d0             \tcallq  *%r8\n  423ca0:\teb 05                \tjmp    423ca7 <srtp_protect_rtcp+0x36e>\n  423ca2:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n  423ca7:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  423caa:\teb 75                \tjmp    423d21 <srtp_protect_rtcp+0x3e8>\n  423cac:\tc7 85 60 ff ff ff 00 \tmovl   $0x0,-0xa0(%rbp)\n  423cb3:\t00 00 00 \n  423cb6:\tc7 85 64 ff ff ff 00 \tmovl   $0x0,-0x9c(%rbp)\n  423cbd:\t00 00 00 \n  423cc0:\tc7 85 68 ff ff ff 00 \tmovl   $0x0,-0x98(%rbp)\n  423cc7:\t00 00 00 \n  423cca:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  423ccd:\t89 c7                \tmov    %eax,%edi\n  423ccf:\te8 1c 1a fe ff       \tcallq  4056f0 <htonl@plt>\n  423cd4:\t89 85 6c ff ff ff    \tmov    %eax,-0x94(%rbp)\n  423cda:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423cde:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  423ce2:\t48 85 c0             \ttest   %rax,%rax\n  423ce5:\t74 32                \tje     423d19 <srtp_protect_rtcp+0x3e0>\n  423ce7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423ceb:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  423cef:\t48 8b 00             \tmov    (%rax),%rax\n  423cf2:\t4c 8b 40 30          \tmov    0x30(%rax),%r8\n  423cf6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423cfa:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  423cfe:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  423d02:\t48 8d 8d 60 ff ff ff \tlea    -0xa0(%rbp),%rcx\n  423d09:\tba 00 00 00 00       \tmov    $0x0,%edx\n  423d0e:\t48 89 ce             \tmov    %rcx,%rsi\n  423d11:\t48 89 c7             \tmov    %rax,%rdi\n  423d14:\t41 ff d0             \tcallq  *%r8\n  423d17:\teb 05                \tjmp    423d1e <srtp_protect_rtcp+0x3e5>\n  423d19:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n  423d1e:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  423d21:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  423d25:\t74 0a                \tje     423d31 <srtp_protect_rtcp+0x3f8>\n  423d27:\tb8 08 00 00 00       \tmov    $0x8,%eax\n  423d2c:\te9 a7 01 00 00       \tjmpq   423ed8 <srtp_protect_rtcp+0x59f>\n  423d31:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n  423d36:\t74 7f                \tje     423db7 <srtp_protect_rtcp+0x47e>\n  423d38:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423d3c:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  423d40:\t48 89 c7             \tmov    %rax,%rdi\n  423d43:\te8 3a 57 00 00       \tcallq  429482 <auth_get_prefix_length>\n  423d48:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n  423d4b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423d4f:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  423d53:\t8b 55 a8             \tmov    -0x58(%rbp),%edx\n  423d56:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  423d5a:\t48 89 ce             \tmov    %rcx,%rsi\n  423d5d:\t48 89 c7             \tmov    %rax,%rdi\n  423d60:\te8 6f 0f 00 00       \tcallq  424cd4 <cipher_output>\n  423d65:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  423d68:\t8b 05 92 cb 06 00    \tmov    0x6cb92(%rip),%eax        # 490900 <mod_srtp>\n  423d6e:\t85 c0                \ttest   %eax,%eax\n  423d70:\t74 35                \tje     423da7 <srtp_protect_rtcp+0x46e>\n  423d72:\t8b 55 a8             \tmov    -0x58(%rbp),%edx\n  423d75:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  423d79:\t89 d6                \tmov    %edx,%esi\n  423d7b:\t48 89 c7             \tmov    %rax,%rdi\n  423d7e:\te8 26 5b 00 00       \tcallq  4298a9 <octet_string_hex_string>\n  423d83:\t48 89 c2             \tmov    %rax,%rdx\n  423d86:\t48 8b 05 7b cb 06 00 \tmov    0x6cb7b(%rip),%rax        # 490908 <mod_srtp+0x8>\n  423d8d:\t48 89 d1             \tmov    %rdx,%rcx\n  423d90:\t48 89 c2             \tmov    %rax,%rdx\n  423d93:\tbe ba 89 47 00       \tmov    $0x4789ba,%esi\n  423d98:\tbf 07 00 00 00       \tmov    $0x7,%edi\n  423d9d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  423da2:\te8 14 b9 ff ff       \tcallq  41f6bb <err_report>\n  423da7:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  423dab:\t74 0a                \tje     423db7 <srtp_protect_rtcp+0x47e>\n  423dad:\tb8 08 00 00 00       \tmov    $0x8,%eax\n  423db2:\te9 21 01 00 00       \tjmpq   423ed8 <srtp_protect_rtcp+0x59f>\n  423db7:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  423dbc:\t74 3f                \tje     423dfd <srtp_protect_rtcp+0x4c4>\n  423dbe:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423dc2:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  423dc6:\t48 8b 00             \tmov    (%rax),%rax\n  423dc9:\t4c 8b 40 20          \tmov    0x20(%rax),%r8\n  423dcd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423dd1:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  423dd5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  423dd9:\t48 8d 55 a4          \tlea    -0x5c(%rbp),%rdx\n  423ddd:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  423de1:\t48 89 ce             \tmov    %rcx,%rsi\n  423de4:\t48 89 c7             \tmov    %rax,%rdi\n  423de7:\t41 ff d0             \tcallq  *%r8\n  423dea:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  423ded:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  423df1:\t74 0a                \tje     423dfd <srtp_protect_rtcp+0x4c4>\n  423df3:\tb8 08 00 00 00       \tmov    $0x8,%eax\n  423df8:\te9 db 00 00 00       \tjmpq   423ed8 <srtp_protect_rtcp+0x59f>\n  423dfd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423e01:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  423e05:\t48 8b 00             \tmov    (%rax),%rax\n  423e08:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  423e0c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423e10:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  423e14:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  423e18:\t48 89 c7             \tmov    %rax,%rdi\n  423e1b:\tff d2                \tcallq  *%rdx\n  423e1d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423e21:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  423e25:\t48 8b 00             \tmov    (%rax),%rax\n  423e28:\t4c 8b 48 18          \tmov    0x18(%rax),%r9\n  423e2c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423e30:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  423e34:\t8b 50 10             \tmov    0x10(%rax),%edx\n  423e37:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  423e3e:\t8b 00                \tmov    (%rax),%eax\n  423e40:\t83 c0 04             \tadd    $0x4,%eax\n  423e43:\t89 c7                \tmov    %eax,%edi\n  423e45:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  423e49:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  423e4d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  423e51:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  423e55:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n  423e59:\t49 89 c8             \tmov    %rcx,%r8\n  423e5c:\t89 d1                \tmov    %edx,%ecx\n  423e5e:\t89 fa                \tmov    %edi,%edx\n  423e60:\t48 89 c7             \tmov    %rax,%rdi\n  423e63:\t41 ff d1             \tcallq  *%r9\n  423e66:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  423e69:\t8b 05 91 ca 06 00    \tmov    0x6ca91(%rip),%eax        # 490900 <mod_srtp>\n  423e6f:\t85 c0                \ttest   %eax,%eax\n  423e71:\t74 35                \tje     423ea8 <srtp_protect_rtcp+0x56f>\n  423e73:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  423e76:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  423e7a:\t89 d6                \tmov    %edx,%esi\n  423e7c:\t48 89 c7             \tmov    %rax,%rdi\n  423e7f:\te8 25 5a 00 00       \tcallq  4298a9 <octet_string_hex_string>\n  423e84:\t48 89 c2             \tmov    %rax,%rdx\n  423e87:\t48 8b 05 7a ca 06 00 \tmov    0x6ca7a(%rip),%rax        # 490908 <mod_srtp+0x8>\n  423e8e:\t48 89 d1             \tmov    %rdx,%rcx\n  423e91:\t48 89 c2             \tmov    %rax,%rdx\n  423e94:\tbe c1 8a 47 00       \tmov    $0x478ac1,%esi\n  423e99:\tbf 07 00 00 00       \tmov    $0x7,%edi\n  423e9e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  423ea3:\te8 13 b8 ff ff       \tcallq  41f6bb <err_report>\n  423ea8:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  423eac:\t74 07                \tje     423eb5 <srtp_protect_rtcp+0x57c>\n  423eae:\tb8 07 00 00 00       \tmov    $0x7,%eax\n  423eb3:\teb 23                \tjmp    423ed8 <srtp_protect_rtcp+0x59f>\n  423eb5:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  423ebc:\t8b 00                \tmov    (%rax),%eax\n  423ebe:\t89 c2                \tmov    %eax,%edx\n  423ec0:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  423ec3:\t01 d0                \tadd    %edx,%eax\n  423ec5:\t83 c0 04             \tadd    $0x4,%eax\n  423ec8:\t89 c2                \tmov    %eax,%edx\n  423eca:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  423ed1:\t89 10                \tmov    %edx,(%rax)\n  423ed3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  423ed8:\t48 81 c4 b8 00 00 00 \tadd    $0xb8,%rsp\n  423edf:\t5b                   \tpop    %rbx\n  423ee0:\t5d                   \tpop    %rbp\n  423ee1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall srtp_protect_rtcp(__int64 *a1, __int64 a2, int *a3) {\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  uint32_t v7;\n  __int64 v8;\n  __int64 v9;\n  unsigned int v10;\n  unsigned int v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  int v19[Number];\n  int v20[Number];\n  __int64 v21[Number];\n  int v22;\n  _QWORD *v23;\n  unsigned int v24;\n  unsigned int v25;\n  uint32_t hostlong;\n  __int64 v27;\n  uint32_t *v28;\n  unsigned int v29;\n  __int64 v30;\n  __int64 v31;\n  _DWORD *v32;\n  unsigned int v33;\n  __int64 v34;\n  v31 = a2;\n  v24 = Number;\n  v30 = Number L;\n  if (*a3 <= Number)\n    return Number L;\n  v32 = (_DWORD *)srtp_get_stream(a1, *(_DWORD *)(v31 + Number));\n  if (!v32) {\n    if (!a1[Number])\n      return Number L;\n    v33 =\n        srtp_stream_clone(a1[Number], *(_DWORD *)(v31 + Number), (void **)&v23,\n                          *(unsigned int *)(v31 + Number), v4, v5);\n    if (v33)\n      return v33;\n    v23[Number] = *a1;\n    *a1 = (__int64)v23;\n    v32 = v23;\n  }\n  if (v32[Number] != Number) {\n    if (v32[Number]) {\n      if (srtp_event_handler) {\n        v21[Number] = (__int64)a1;\n        v21[Number] = (__int64)v32;\n        v22 = Number;\n        srtp_event_handler(v21);\n      }\n    } else {\n      v32[Number] = Number;\n    }\n  }\n  if (*(_DWORD *)(*((_QWORD *)v32 + Number) + Number L) == Number ||\n      *(_DWORD *)(*((_QWORD *)v32 + Number) + Number L) == Number)\n    return srtp_protect_rtcp_aead((__int64)a1, (__int64)v32, a2, a3);\n  v29 = auth_get_tag_length(*((_QWORD *)v32 + Number));\n  v34 = v31 + Number;\n  v24 = *a3 - Number;\n  v28 = (uint32_t *)(v24 + v31 + Number);\n  if ((v32[Number] & Number) != Number) {\n    *v28 = htonl(Number);\n  } else {\n    v34 = Number L;\n    v24 = Number;\n    *v28 = Number;\n  }\n  v27 = v31;\n  v30 = *a3 + Number L + v31;\n  v6 = rdbx_get_packet_index(v32 + Number);\n  ekt_write_data(*((_QWORD *)v32 + Number), v30, v29, a3, v6);\n  v33 = rdb_increment(v32 + Number);\n  if (v33)\n    return v33;\n  hostlong = rdb_get_value(v32 + Number);\n  v7 = *v28;\n  *v28 = htonl(hostlong) | v7;\n  if (mod_srtp)\n    err_report(Number, (__int64)String, (__int64)off_490908, hostlong, v8, v9);\n  if (*(_DWORD *)(**((_QWORD **)v32 + Number) + Number L) == Number) {\n    v20[Number] = Number;\n    v20[Number] = *(_DWORD *)(v31 + Number);\n    v20[Number] = htonl(HIWORD(hostlong));\n    v20[Number] = htonl(hostlong << Number);\n    if (*((_QWORD *)v32 + Number))\n      v10 = (*(__int64(__fastcall **)(_QWORD, int *, _QWORD))(\n          **((_QWORD **)v32 + Number) + Number L))(\n          *(_QWORD *)(*((_QWORD *)v32 + Number) + Number L), v20, Number L);\n    else\n      v10 = Number;\n    v33 = v10;\n  } else {\n    v19[Number] = Number;\n    v19[Number] = Number;\n    v19[Number] = Number;\n    v19[Number] = htonl(hostlong);\n    if (*((_QWORD *)v32 + Number))\n      v11 = (*(__int64(__fastcall **)(_QWORD, int *, _QWORD))(\n          **((_QWORD **)v32 + Number) + Number L))(\n          *(_QWORD *)(*((_QWORD *)v32 + Number) + Number L), v19, Number L);\n    else\n      v11 = Number;\n    v33 = v11;\n  }\n  if (v33)\n    return Number L;\n  if (!v27)\n    goto LABEL_50;\n  v25 = auth_get_prefix_length(*((_QWORD *)v32 + Number));\n  v33 = cipher_output(*((_QWORD *)v32 + Number), v30, v25);\n  if (mod_srtp) {\n    v12 = octet_string_hex_string(v30, v25);\n    err_report(Number, (__int64)String, (__int64)off_490908, v12, v13, v14);\n  }\n  if (v33)\n    return Number L;\nLABEL_50:\n  if (v34) {\n    v33 = (*(__int64(__fastcall **)(_QWORD, __int64, unsigned int *))(\n        **((_QWORD **)v32 + Number) + Number L))(\n        *(_QWORD *)(*((_QWORD *)v32 + Number) + Number L), v34, &v24);\n    if (v33)\n      return Number L;\n  }\n  (*(void(__fastcall **)(_QWORD))(**((_QWORD **)v32 + Number) + Number L))(\n      *(_QWORD *)(*((_QWORD *)v32 + Number) + Number L));\n  v33 = (*(__int64(__fastcall **)(_QWORD, __int64, _QWORD, _QWORD, __int64))(\n      **((_QWORD **)v32 + Number) + Number L))(\n      *(_QWORD *)(*((_QWORD *)v32 + Number) + Number L), v27,\n      (unsigned int)(*a3 + Number),\n      *(unsigned int *)(*((_QWORD *)v32 + Number) + Number L), v30);\n  if (mod_srtp) {\n    v15 = octet_string_hex_string(v30, v29);\n    err_report(Number, (__int64)String, (__int64)off_490908, v15, v16, v17);\n  }\n  if (v33)\n    return Number L;\n  *a3 += v29 + Number;\n  return Number L;\n}", "code_t": "err_status_t __cdecl srtp_protect_rtcp(srtp_t ctx, void *rtcp_hdr,\n                                       int *pkt_octet_len) {\n  xtd_seq_num_t v4;\n  uint32_t v5;\n  err_status_t v6;\n  err_status_t v7;\n  char *v8;\n  char *v9;\n  v128_t iv_0;\n  v128_t iv;\n  srtp_event_data_t_0 <span class=\"supfact\">data</span>;\n  srtp_stream_ctx_t_0 *new_stream;\n  unsigned int enc_octet_len;\n  int prefix_len;\n  uint32_t seq_num;\n  uint32_t *auth_start;\n  uint32_t *trailer;\n  int tag_len;\n  uint8_t *auth_tag;\n  srtcp_hdr_t *hdr;\n  srtp_stream_ctx_t_0 *stream;\n  err_status_t status;\n  uint32_t *enc_start;\n  hdr = (srtcp_hdr_t *)rtcp_hdr;\n  enc_octet_len = Number;\n  auth_tag = Number L;\n  if (*pkt_octet_len <= Number)\n    return Number;\n  stream = srtp_get_stream(ctx, hdr->ssrc);\n  if (!stream) {\n    if (!ctx->stream_template)\n      return Number;\n    status = srtp_stream_clone(ctx->stream_template, hdr->ssrc, &new_stream);\n    if (status)\n      return status;\n    new_stream->next = ctx->stream_list;\n    ctx->stream_list = new_stream;\n    stream = new_stream;\n  }\n  if (stream->direction != dir_srtp_sender) {\n    if (stream->direction) {\n      if (srtp_event_handler) {\n        <span class=\"supfact\">data</span>.session = ctx;\n        <span class=\"supfact\">data</span>.stream = stream;\n        <span class=\"supfact\">data</span>.event = event_ssrc_collision;\n        srtp_event_handler(&<span class=\"supfact\">data</span>);\n      }\n    } else {\n      stream->direction = dir_srtp_sender;\n    }\n  }\n  if (stream->rtp_cipher->algorithm == Number ||\n      stream->rtp_cipher->algorithm == Number)\n    return srtp_protect_rtcp_aead(ctx, stream, rtcp_hdr,\n                                  (unsigned int *)pkt_octet_len);\n  tag_len = auth_get_tag_length(stream->rtcp_auth);\n  enc_start = (uint32_t *)&hdr[Number];\n  enc_octet_len = *pkt_octet_len - Number;\n  trailer = (uint32_t *)((char *)&hdr[Number] + enc_octet_len);\n  if ((stream->rtcp_services & Number) != Number) {\n    *trailer = htonl(Number);\n  } else {\n    enc_start = Number L;\n    enc_octet_len = Number;\n    *trailer = Number;\n  }\n  auth_start = (uint32_t *)hdr;\n  auth_tag = (uint8_t *)&hdr->ssrc + *pkt_octet_len;\n  v4 = rdbx_get_packet_index(&stream->rtp_rdbx);\n  ekt_write_data(stream->ekt, auth_tag, tag_len, pkt_octet_len, v4);\n  status = rdb_increment(&stream->rtcp_rdb);\n  if (status)\n    return status;\n  seq_num = rdb_get_value(&stream->rtcp_rdb);\n  v5 = *trailer;\n  *trailer = htonl(seq_num) | v5;\n  if (mod_srtp.on)\n    err_report(Number, String, mod_srtp.name, seq_num);\n  if (stream->rtcp_cipher->type->id == Number) {\n    iv.v32[Number] = Number;\n    iv.v32[Number] = hdr->ssrc;\n    iv.v32[Number] = htonl(HIWORD(seq_num));\n    iv.v32[Number] = htonl(seq_num << Number);\n    if (stream->rtcp_cipher)\n      v6 = stream->rtcp_cipher->type->set_iv(\n          (cipher_pointer_t)stream->rtcp_cipher->state, &iv, direction_encrypt);\n    else\n      v6 = err_status_no_such_op;\n    status = v6;\n  } else {\n    iv_0.v64[Number] = Number L;\n    iv_0.v32[Number] = Number;\n    iv_0.v32[Number] = htonl(seq_num);\n    if (stream->rtcp_cipher)\n      v7 = stream->rtcp_cipher->type->set_iv(\n          (cipher_pointer_t)stream->rtcp_cipher->state, &iv_0,\n          direction_encrypt);\n    else\n      v7 = err_status_no_such_op;\n    status = v7;\n  }\n  if (status)\n    return Number;\n  if (!auth_start)\n    goto LABEL_50;\n  prefix_len = auth_get_prefix_length(stream->rtcp_auth);\n  status = cipher_output(stream->rtcp_cipher, auth_tag, prefix_len);\n  if (mod_srtp.on) {\n    v8 = octet_string_hex_string(auth_tag, prefix_len);\n    err_report(Number, String, mod_srtp.name, v8);\n  }\n  if (status)\n    return Number;\nLABEL_50:\n  if (enc_start) {\n    status = stream->rtcp_cipher->type->encrypt(\n        stream->rtcp_cipher->state, (uint8_t *)enc_start, &enc_octet_len);\n    if (status)\n      return Number;\n  }\n  stream->rtcp_auth->type->start(stream->rtcp_auth->state);\n  status = stream->rtcp_auth->type->compute(\n      stream->rtcp_auth->state, (uint8_t *)auth_start, *pkt_octet_len + Number,\n      stream->rtcp_auth->out_len, auth_tag);\n  if (mod_srtp.on) {\n    v9 = octet_string_hex_string(auth_tag, tag_len);\n    err_report(Number, String, mod_srtp.name, v9);\n  }\n  if (status)\n    return Number;\n  *pkt_octet_len += tag_len + Number;\n  return Number;\n}", "var": [{"name": "v21", "type": "struct srtp_event_data_t_0 { srtp_t session; srtp_stream_t stream; srtp_event_t event; PADDING (4); }", "pred_name": "data", "ref_name": "data", "ref_type": "struct srtp_event_data_t_0 { srtp_t session; srtp_stream_t stream; srtp_event_t event; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "lambor", "repo_name": "UU-LP-Examples", "path": "lambor/UU-LP-Examples/cb954dca0dd6f3c99bc9cc6f32e1e245106697eba03f759636f9cd48ab20d730", "path_in_repo": "lambor/UU-LP-Examples/test_linux_showtty/showtty", "objdump": "0000000000401172 <main>:\n  401172:\t55                   \tpush   %rbp\n  401173:\t48 89 e5             \tmov    %rsp,%rbp\n  401176:\t48 83 ec 40          \tsub    $0x40,%rsp\n  40117a:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40117e:\t48 89 c6             \tmov    %rax,%rsi\n  401181:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401186:\te8 d5 fe ff ff       \tcallq  401060 <tcgetattr@plt>\n  40118b:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  40118e:\t75 14                \tjne    4011a4 <main+0x32>\n  401190:\tbf 08 20 40 00       \tmov    $0x402008,%edi\n  401195:\te8 d6 fe ff ff       \tcallq  401070 <perror@plt>\n  40119a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40119f:\te8 dc fe ff ff       \tcallq  401080 <exit@plt>\n  4011a4:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4011a8:\t48 89 c7             \tmov    %rax,%rdi\n  4011ab:\te8 a0 fe ff ff       \tcallq  401050 <cfgetospeed@plt>\n  4011b0:\t89 c7                \tmov    %eax,%edi\n  4011b2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4011b7:\te8 5c 00 00 00       \tcallq  401218 <showbaud>\n  4011bc:\t0f b6 45 d3          \tmovzbl -0x2d(%rbp),%eax\n  4011c0:\t0f b6 c0             \tmovzbl %al,%eax\n  4011c3:\t8d 50 40             \tlea    0x40(%rax),%edx\n  4011c6:\t0f b6 45 d3          \tmovzbl -0x2d(%rbp),%eax\n  4011ca:\t0f b6 c0             \tmovzbl %al,%eax\n  4011cd:\t89 c6                \tmov    %eax,%esi\n  4011cf:\tbf 28 20 40 00       \tmov    $0x402028,%edi\n  4011d4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4011d9:\te8 62 fe ff ff       \tcallq  401040 <printf@plt>\n  4011de:\t0f b6 45 d4          \tmovzbl -0x2c(%rbp),%eax\n  4011e2:\t0f b6 c0             \tmovzbl %al,%eax\n  4011e5:\t8d 50 40             \tlea    0x40(%rax),%edx\n  4011e8:\t0f b6 45 d4          \tmovzbl -0x2c(%rbp),%eax\n  4011ec:\t0f b6 c0             \tmovzbl %al,%eax\n  4011ef:\t89 c6                \tmov    %eax,%esi\n  4011f1:\tbf 58 20 40 00       \tmov    $0x402058,%edi\n  4011f6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4011fb:\te8 40 fe ff ff       \tcallq  401040 <printf@plt>\n  401200:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  401204:\t48 89 c7             \tmov    %rax,%rdi\n  401207:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40120c:\te8 9a 00 00 00       \tcallq  4012ab <show_some_flags>\n  401211:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401216:\tc9                   \tleaveq \n  401217:\tc3                   \tretq   ", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  speed_t v3;\n  struct termios termios_p;\n  if (tcgetattr(Number, &termios_p) == Number) {\n    perror(String);\n    exit(Number);\n  }\n  v3 = cfgetospeed(&termios_p);\n  showbaud(v3);\n  printf(String, termios_p.c_cc[Number],\n         (unsigned int)termios_p.c_cc[Number] + Number);\n  printf(String, termios_p.c_cc[Number],\n         (unsigned int)termios_p.c_cc[Number] + Number);\n  show_some_flags(&termios_p);\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int v3;\n  termios <span class=\"supfact\">ttyinfo</span>;\n  if (tcgetattr(Number, &<span class=\"supfact\">ttyinfo</span>) == Number) {\n    perror(String);\n    exit(Number);\n  }\n  v3 = cfgetospeed(&<span class=\"supfact\">ttyinfo</span>);\n  showbaud(v3);\n  printf(String, <span class=\"supfact\">ttyinfo</span>.c_cc[Number],\n         (unsigned int)<span class=\"supfact\">ttyinfo</span>.c_cc[Number] + Number);\n  printf(String, <span class=\"supfact\">ttyinfo</span>.c_cc[Number],\n         (unsigned int)<span class=\"supfact\">ttyinfo</span>.c_cc[Number] + Number);\n  show_some_flags(&<span class=\"supfact\">ttyinfo</span>);\n  return Number;\n}", "var": [{"name": "termios_p", "type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }", "pred_name": "t", "ref_name": "ttyinfo", "ref_type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }"}], "body_in_train": false}, {"repo_owner": "XeryusTC", "repo_name": "computergraphics", "path": "XeryusTC/computergraphics/64441f3480ecc2737054a9900bd7e9e93e9919d6867c58766055fdcbe44dc7d4", "path_in_repo": "XeryusTC/computergraphics/raytracer/yaml/emitter.o", "objdump": "000000000000120a <_ZN4YAML7Emitter7EmitKeyEv>:\n    120a:\t55                   \tpush   %rbp\n    120b:\t48 89 e5             \tmov    %rsp,%rbp\n    120e:\t53                   \tpush   %rbx\n    120f:\t48 83 ec 28          \tsub    $0x28,%rsp\n    1213:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1217:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    121b:\t48 89 c7             \tmov    %rax,%rdi\n    121e:\te8 00 00 00 00       \tcallq  1223 <_ZN4YAML7Emitter7EmitKeyEv+0x19>\n    1223:\t83 f0 01             \txor    $0x1,%eax\n    1226:\t84 c0                \ttest   %al,%al\n    1228:\t0f 85 e8 01 00 00    \tjne    1416 <_ZN4YAML7Emitter7EmitKeyEv+0x20c>\n    122e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1232:\t48 83 c0 18          \tadd    $0x18,%rax\n    1236:\t48 89 c7             \tmov    %rax,%rdi\n    1239:\te8 00 00 00 00       \tcallq  123e <_ZN4YAML7Emitter7EmitKeyEv+0x34>\n    123e:\t48 89 c7             \tmov    %rax,%rdi\n    1241:\te8 00 00 00 00       \tcallq  1246 <_ZN4YAML7Emitter7EmitKeyEv+0x3c>\n    1246:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    1249:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    124d:\t48 83 c0 18          \tadd    $0x18,%rax\n    1251:\t48 89 c7             \tmov    %rax,%rdi\n    1254:\te8 00 00 00 00       \tcallq  1259 <_ZN4YAML7Emitter7EmitKeyEv+0x4f>\n    1259:\t48 89 c7             \tmov    %rax,%rdi\n    125c:\te8 00 00 00 00       \tcallq  1261 <_ZN4YAML7Emitter7EmitKeyEv+0x57>\n    1261:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    1264:\t83 7d ec 09          \tcmpl   $0x9,-0x14(%rbp)\n    1268:\t74 34                \tje     129e <_ZN4YAML7Emitter7EmitKeyEv+0x94>\n    126a:\t83 7d ec 0f          \tcmpl   $0xf,-0x14(%rbp)\n    126e:\t74 2e                \tje     129e <_ZN4YAML7Emitter7EmitKeyEv+0x94>\n    1270:\t83 7d ec 10          \tcmpl   $0x10,-0x14(%rbp)\n    1274:\t74 28                \tje     129e <_ZN4YAML7Emitter7EmitKeyEv+0x94>\n    1276:\t83 7d ec 16          \tcmpl   $0x16,-0x14(%rbp)\n    127a:\t74 22                \tje     129e <_ZN4YAML7Emitter7EmitKeyEv+0x94>\n    127c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1280:\t48 83 c0 18          \tadd    $0x18,%rax\n    1284:\t48 89 c7             \tmov    %rax,%rdi\n    1287:\te8 00 00 00 00       \tcallq  128c <_ZN4YAML7Emitter7EmitKeyEv+0x82>\n    128c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1291:\t48 89 c7             \tmov    %rax,%rdi\n    1294:\te8 00 00 00 00       \tcallq  1299 <_ZN4YAML7Emitter7EmitKeyEv+0x8f>\n    1299:\te9 79 01 00 00       \tjmpq   1417 <_ZN4YAML7Emitter7EmitKeyEv+0x20d>\n    129e:\t83 7d e8 02          \tcmpl   $0x2,-0x18(%rbp)\n    12a2:\t75 75                \tjne    1319 <_ZN4YAML7Emitter7EmitKeyEv+0x10f>\n    12a4:\t83 7d ec 0f          \tcmpl   $0xf,-0x14(%rbp)\n    12a8:\t75 11                \tjne    12bb <_ZN4YAML7Emitter7EmitKeyEv+0xb1>\n    12aa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    12ae:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n    12b3:\t48 89 c7             \tmov    %rax,%rdi\n    12b6:\te8 00 00 00 00       \tcallq  12bb <_ZN4YAML7Emitter7EmitKeyEv+0xb1>\n    12bb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    12bf:\t48 83 c0 18          \tadd    $0x18,%rax\n    12c3:\t48 89 c7             \tmov    %rax,%rdi\n    12c6:\te8 00 00 00 00       \tcallq  12cb <_ZN4YAML7Emitter7EmitKeyEv+0xc1>\n    12cb:\t48 89 c7             \tmov    %rax,%rdi\n    12ce:\te8 00 00 00 00       \tcallq  12d3 <_ZN4YAML7Emitter7EmitKeyEv+0xc9>\n    12d3:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    12d6:\t48 8b 5d d8          \tmov    -0x28(%rbp),%rbx\n    12da:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    12dd:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    12e1:\t89 d6                \tmov    %edx,%esi\n    12e3:\t48 89 c7             \tmov    %rax,%rdi\n    12e6:\te8 00 00 00 00       \tcallq  12eb <_ZN4YAML7Emitter7EmitKeyEv+0xe1>\n    12eb:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    12ef:\t48 89 c6             \tmov    %rax,%rsi\n    12f2:\t48 89 df             \tmov    %rbx,%rdi\n    12f5:\te8 00 00 00 00       \tcallq  12fa <_ZN4YAML7Emitter7EmitKeyEv+0xf0>\n    12fa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    12fe:\t48 83 c0 18          \tadd    $0x18,%rax\n    1302:\t48 89 c7             \tmov    %rax,%rdi\n    1305:\te8 00 00 00 00       \tcallq  130a <_ZN4YAML7Emitter7EmitKeyEv+0x100>\n    130a:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n    130f:\t48 89 c7             \tmov    %rax,%rdi\n    1312:\te8 00 00 00 00       \tcallq  1317 <_ZN4YAML7Emitter7EmitKeyEv+0x10d>\n    1317:\teb 6d                \tjmp    1386 <_ZN4YAML7Emitter7EmitKeyEv+0x17c>\n    1319:\t83 7d e8 01          \tcmpl   $0x1,-0x18(%rbp)\n    131d:\t75 4e                \tjne    136d <_ZN4YAML7Emitter7EmitKeyEv+0x163>\n    131f:\t83 7d ec 16          \tcmpl   $0x16,-0x14(%rbp)\n    1323:\t75 29                \tjne    134e <_ZN4YAML7Emitter7EmitKeyEv+0x144>\n    1325:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1329:\tbe 2c 00 00 00       \tmov    $0x2c,%esi\n    132e:\t48 89 c7             \tmov    %rax,%rdi\n    1331:\te8 00 00 00 00       \tcallq  1336 <_ZN4YAML7Emitter7EmitKeyEv+0x12c>\n    1336:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    133a:\t48 83 c0 18          \tadd    $0x18,%rax\n    133e:\t48 89 c7             \tmov    %rax,%rdi\n    1341:\te8 00 00 00 00       \tcallq  1346 <_ZN4YAML7Emitter7EmitKeyEv+0x13c>\n    1346:\t48 89 c7             \tmov    %rax,%rdi\n    1349:\te8 00 00 00 00       \tcallq  134e <_ZN4YAML7Emitter7EmitKeyEv+0x144>\n    134e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1352:\t48 83 c0 18          \tadd    $0x18,%rax\n    1356:\t48 89 c7             \tmov    %rax,%rdi\n    1359:\te8 00 00 00 00       \tcallq  135e <_ZN4YAML7Emitter7EmitKeyEv+0x154>\n    135e:\tbe 11 00 00 00       \tmov    $0x11,%esi\n    1363:\t48 89 c7             \tmov    %rax,%rdi\n    1366:\te8 00 00 00 00       \tcallq  136b <_ZN4YAML7Emitter7EmitKeyEv+0x161>\n    136b:\teb 19                \tjmp    1386 <_ZN4YAML7Emitter7EmitKeyEv+0x17c>\n    136d:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1372:\tba cb 01 00 00       \tmov    $0x1cb,%edx\n    1377:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    137c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1381:\te8 00 00 00 00       \tcallq  1386 <_ZN4YAML7Emitter7EmitKeyEv+0x17c>\n    1386:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    138a:\t48 83 c0 18          \tadd    $0x18,%rax\n    138e:\t48 89 c7             \tmov    %rax,%rdi\n    1391:\te8 00 00 00 00       \tcallq  1396 <_ZN4YAML7Emitter7EmitKeyEv+0x18c>\n    1396:\t48 89 c7             \tmov    %rax,%rdi\n    1399:\te8 00 00 00 00       \tcallq  139e <_ZN4YAML7Emitter7EmitKeyEv+0x194>\n    139e:\t83 f8 19             \tcmp    $0x19,%eax\n    13a1:\t0f 94 c0             \tsete   %al\n    13a4:\t84 c0                \ttest   %al,%al\n    13a6:\t74 1a                \tje     13c2 <_ZN4YAML7Emitter7EmitKeyEv+0x1b8>\n    13a8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    13ac:\t48 83 c0 18          \tadd    $0x18,%rax\n    13b0:\t48 89 c7             \tmov    %rax,%rdi\n    13b3:\te8 00 00 00 00       \tcallq  13b8 <_ZN4YAML7Emitter7EmitKeyEv+0x1ae>\n    13b8:\t48 89 c7             \tmov    %rax,%rdi\n    13bb:\te8 00 00 00 00       \tcallq  13c0 <_ZN4YAML7Emitter7EmitKeyEv+0x1b6>\n    13c0:\teb 55                \tjmp    1417 <_ZN4YAML7Emitter7EmitKeyEv+0x20d>\n    13c2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    13c6:\t48 83 c0 18          \tadd    $0x18,%rax\n    13ca:\t48 89 c7             \tmov    %rax,%rdi\n    13cd:\te8 00 00 00 00       \tcallq  13d2 <_ZN4YAML7Emitter7EmitKeyEv+0x1c8>\n    13d2:\t48 89 c7             \tmov    %rax,%rdi\n    13d5:\te8 00 00 00 00       \tcallq  13da <_ZN4YAML7Emitter7EmitKeyEv+0x1d0>\n    13da:\t85 c0                \ttest   %eax,%eax\n    13dc:\t0f 94 c0             \tsete   %al\n    13df:\t84 c0                \ttest   %al,%al\n    13e1:\t74 1a                \tje     13fd <_ZN4YAML7Emitter7EmitKeyEv+0x1f3>\n    13e3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    13e7:\t48 83 c0 18          \tadd    $0x18,%rax\n    13eb:\t48 89 c7             \tmov    %rax,%rdi\n    13ee:\te8 00 00 00 00       \tcallq  13f3 <_ZN4YAML7Emitter7EmitKeyEv+0x1e9>\n    13f3:\t48 89 c7             \tmov    %rax,%rdi\n    13f6:\te8 00 00 00 00       \tcallq  13fb <_ZN4YAML7Emitter7EmitKeyEv+0x1f1>\n    13fb:\teb 1a                \tjmp    1417 <_ZN4YAML7Emitter7EmitKeyEv+0x20d>\n    13fd:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1402:\tba d2 01 00 00       \tmov    $0x1d2,%edx\n    1407:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    140c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1411:\te8 00 00 00 00       \tcallq  1416 <_ZN4YAML7Emitter7EmitKeyEv+0x20c>\n    1416:\t90                   \tnop\n    1417:\t48 83 c4 28          \tadd    $0x28,%rsp\n    141b:\t5b                   \tpop    %rbx\n    141c:\t5d                   \tpop    %rbp\n    141d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall YAML Emitter EmitKey(YAML Emitter *this) {\n  __int64 result;\n  YAML EmitterState *v2;\n  YAML EmitterState *v3;\n  __int64 v4;\n  YAML EmitterState *v5;\n  __int64 v6;\n  YAML EmitterState *v7;\n  __int64 v8;\n  YAML EmitterState *v9;\n  YAML EmitterState *v10;\n  YAML EmitterState *v11;\n  YAML EmitterState *v12;\n  char v13[Number];\n  unsigned int v14;\n  int v15;\n  int v16;\n  result = (unsigned int)YAML Emitter good(this) ^ Number;\n  if (!(_BYTE)result) {\n    v2 = (YAML EmitterState *)std auto_ptr<YAML EmitterState> operator->(\n        (char *)this + Number);\n    v16 = YAML EmitterState GetCurState(v2);\n    v3 = (YAML EmitterState *)std auto_ptr<YAML EmitterState> operator->(\n        (char *)this + Number);\n    v15 = YAML EmitterState GetCurGroupFlowType(v3);\n    if (v16 == Number || v16 == Number || v16 == Number || v16 == Number) {\n      if (v15 == Number) {\n        if (v16 == Number)\n          YAML operator<<(this, Number L);\n        v5 = (YAML EmitterState *)std auto_ptr<YAML EmitterState> operator->(\n            (char *)this + Number);\n        v14 = YAML EmitterState GetCurIndent(v5);\n        YAML IndentTo IndentTo((YAML IndentTo *)v13, v14);\n        YAML operator<<(this, v13);\n        v6 = std auto_ptr<YAML EmitterState> operator->((char *)this + Number);\n        YAML EmitterState SwitchState(v6, Number L);\n      } else {\n        if (v15 != Number)\n          _assert_fail(String, String, Number, String);\n        if (v16 == Number) {\n          YAML operator<<(this, Number L);\n          v7 = (YAML EmitterState *)std auto_ptr<YAML EmitterState> operator->(\n              (char *)this + Number);\n          YAML EmitterState RequireSeparation(v7);\n        }\n        v8 = std auto_ptr<YAML EmitterState> operator->((char *)this + Number);\n        YAML EmitterState SwitchState(v8, Number L);\n      }\n      v9 = (YAML EmitterState *)std auto_ptr<YAML EmitterState> operator->(\n          (char *)this + Number);\n      if ((unsigned int)YAML EmitterState GetMapKeyFormat(v9) == Number) {\n        v10 = (YAML EmitterState *)std auto_ptr<YAML EmitterState> operator->(\n            (char *)this + Number);\n        result = YAML EmitterState StartLongKey(v10);\n      } else {\n        v11 = (YAML EmitterState *)std auto_ptr<YAML EmitterState> operator->(\n            (char *)this + Number);\n        if ((unsigned int)YAML EmitterState GetMapKeyFormat(v11))\n          _assert_fail(String, String, Number, String);\n        v12 = (YAML EmitterState *)std auto_ptr<YAML EmitterState> operator->(\n            (char *)this + Number);\n        result = YAML EmitterState StartSimpleKey(v12);\n      }\n    } else {\n      v4 = std auto_ptr<YAML EmitterState> operator->((char *)this + Number);\n      result =\n          YAML EmitterState SetError(v4, &YAML ErrorMsg UNEXPECTED_KEY_TOKEN);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl YAML Emitter EmitKey(YAML Emitter *const this) {\n  std auto_ptr<YAML EmitterState> element_type *v1;\n  YAML EmitterState *v2;\n  YAML EmitterState *v3;\n  std auto_ptr<YAML EmitterState> element_type *v4;\n  YAML EmitterState *v5;\n  YAML EmitterState *v6;\n  YAML EmitterState *v7;\n  std auto_ptr<YAML EmitterState> element_type *v8;\n  YAML EmitterState *v9;\n  std auto_ptr<YAML EmitterState> element_type *v10;\n  YAML EmitterState *v11;\n  YAML IndentTo <span class=\"supfact\">indent</span>;\n  unsigned int curIndent;\n  YAML FLOW_TYPE flowType;\n  YAML EMITTER_STATE curState;\n  if (YAML Emitter good(this)) {\n    v1 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n    curState = YAML EmitterState GetCurState(v1);\n    v2 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n    flowType = (unsigned int)YAML EmitterState GetCurGroupFlowType(v2);\n    if (curState == ES_WAITING_FOR_BLOCK_MAP_ENTRY ||\n        curState == ES_DONE_WITH_BLOCK_MAP_VALUE ||\n        curState == ES_WAITING_FOR_FLOW_MAP_ENTRY ||\n        curState == ES_DONE_WITH_FLOW_MAP_VALUE) {\n      if (flowType == FT_BLOCK) {\n        if (curState == ES_DONE_WITH_BLOCK_MAP_VALUE)\n          YAML operator<<(this, Number L);\n        v4 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n        curIndent = YAML EmitterState GetCurIndent(v4);\n        YAML IndentTo IndentTo(&<span class=\"supfact\">indent</span>, curIndent);\n        YAML operator<<(&this->m_stream, &<span class=\"supfact\">indent</span>);\n        v5 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n        YAML EmitterState SwitchState(v5, ES_WAITING_FOR_BLOCK_MAP_KEY);\n      } else {\n        if (flowType != FT_FLOW)\n          _assert_fail(String, String, Number, String);\n        if (curState == ES_DONE_WITH_FLOW_MAP_VALUE) {\n          YAML operator<<(this, Number L);\n          v6 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n          YAML EmitterState RequireSeparation(v6);\n        }\n        v7 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n        YAML EmitterState SwitchState(v7, ES_WAITING_FOR_FLOW_MAP_KEY);\n      }\n      v8 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n      if (YAML EmitterState GetMapKeyFormat(v8) == LongKey) {\n        v9 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n        YAML EmitterState StartLongKey(v9);\n      } else {\n        v10 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n        if (YAML EmitterState GetMapKeyFormat(v10))\n          _assert_fail(String, String, Number, String);\n        v11 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n        YAML EmitterState StartSimpleKey(v11);\n      }\n    } else {\n      v3 = std auto_ptr<YAML EmitterState> operator->(&this->m_pState);\n      YAML EmitterState SetError(v3, &YAML ErrorMsg UNEXPECTED_KEY_TOKEN);\n    }\n  }\n}", "var": [{"name": "v13", "type": "__unk__", "pred_name": "__unk__", "ref_name": "indent", "ref_type": "struct YAML::IndentTo { unsigned int n; }"}], "body_in_train": false}, {"repo_owner": "xtlx2000", "repo_name": "CloudStore", "path": "xtlx2000/CloudStore/738def8fd2f64144e22311ef76f25f51ed638295abf289e6ca50b2affc677505", "path_in_repo": "xtlx2000/CloudStore/code/MU/src/zip/test/zip", "objdump": "00000000004031ca <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:\n  4031ca:\t55                   \tpush   %rbp\n  4031cb:\t48 89 e5             \tmov    %rsp,%rbp\n  4031ce:\t41 54                \tpush   %r12\n  4031d0:\t53                   \tpush   %rbx\n  4031d1:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n  4031d8:\t48 89 bd 28 ff ff ff \tmov    %rdi,-0xd8(%rbp)\n  4031df:\t48 89 b5 20 ff ff ff \tmov    %rsi,-0xe0(%rbp)\n  4031e6:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  4031ed:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4031f4:\t48 89 c7             \tmov    %rax,%rdi\n  4031f7:\te8 f4 ef ff ff       \tcallq  4021f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@plt>\n  4031fc:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  403203:\t48 89 c7             \tmov    %rax,%rdi\n  403206:\te8 e5 ef ff ff       \tcallq  4021f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@plt>\n  40320b:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n  403212:\tbe 22 50 40 00       \tmov    $0x405022,%esi\n  403217:\t48 89 c7             \tmov    %rax,%rdi\n  40321a:\te8 cc 0a 00 00       \tcallq  403ceb <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>\n  40321f:\t84 c0                \ttest   %al,%al\n  403221:\t0f 84 d4 00 00 00    \tje     4032fb <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x131>\n  403227:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n  40322e:\t48 83 c0 50          \tadd    $0x50,%rax\n  403232:\t48 89 c7             \tmov    %rax,%rdi\n  403235:\te8 d6 ef ff ff       \tcallq  402210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>\n  40323a:\t48 89 c2             \tmov    %rax,%rdx\n  40323d:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n  403244:\t48 8b b5 20 ff ff ff \tmov    -0xe0(%rbp),%rsi\n  40324b:\t48 c7 c1 ff ff ff ff \tmov    $0xffffffffffffffff,%rcx\n  403252:\t48 89 c7             \tmov    %rax,%rdi\n  403255:\te8 36 ef ff ff       \tcallq  402190 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>\n  40325a:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n  403261:\t48 89 c7             \tmov    %rax,%rdi\n  403264:\te8 37 ee ff ff       \tcallq  4020a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>\n  403269:\t48 89 c2             \tmov    %rax,%rdx\n  40326c:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n  403273:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  403277:\t48 89 d6             \tmov    %rdx,%rsi\n  40327a:\t48 89 c7             \tmov    %rax,%rdi\n  40327d:\te8 7e ee ff ff       \tcallq  402100 <zip_add_dir@plt>\n  403282:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  403285:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n  403289:\t75 51                \tjne    4032dc <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x112>\n  40328b:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n  403292:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  403296:\t48 89 c7             \tmov    %rax,%rdi\n  403299:\te8 42 ee ff ff       \tcallq  4020e0 <zip_strerror@plt>\n  40329e:\t48 89 c3             \tmov    %rax,%rbx\n  4032a1:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n  4032a8:\t48 89 c7             \tmov    %rax,%rdi\n  4032ab:\te8 f0 ed ff ff       \tcallq  4020a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>\n  4032b0:\t48 89 c2             \tmov    %rax,%rdx\n  4032b3:\t48 8b 05 e6 3e 00 00 \tmov    0x3ee6(%rip),%rax        # 4071a0 <stderr@@GLIBC_2.2.5>\n  4032ba:\t48 89 d9             \tmov    %rbx,%rcx\n  4032bd:\tbe 80 53 40 00       \tmov    $0x405380,%esi\n  4032c2:\t48 89 c7             \tmov    %rax,%rdi\n  4032c5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4032ca:\te8 31 ef ff ff       \tcallq  402200 <fprintf@plt>\n  4032cf:\tbb ff ff ff ff       \tmov    $0xffffffff,%ebx\n  4032d4:\t41 bc 00 00 00 00    \tmov    $0x0,%r12d\n  4032da:\teb 06                \tjmp    4032e2 <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x118>\n  4032dc:\t41 bc 01 00 00 00    \tmov    $0x1,%r12d\n  4032e2:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n  4032e9:\t48 89 c7             \tmov    %rax,%rdi\n  4032ec:\te8 2f ee ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  4032f1:\t41 83 fc 01          \tcmp    $0x1,%r12d\n  4032f5:\t0f 85 3f 02 00 00    \tjne    40353a <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x370>\n  4032fb:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n  403302:\t48 89 c7             \tmov    %rax,%rdi\n  403305:\te8 96 ed ff ff       \tcallq  4020a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>\n  40330a:\t48 89 c7             \tmov    %rax,%rdi\n  40330d:\te8 0e ef ff ff       \tcallq  402220 <opendir@plt>\n  403312:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  403316:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  40331b:\t75 49                \tjne    403366 <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19c>\n  40331d:\te8 1e ed ff ff       \tcallq  402040 <__errno_location@plt>\n  403322:\t8b 00                \tmov    (%rax),%eax\n  403324:\t89 c7                \tmov    %eax,%edi\n  403326:\te8 55 ed ff ff       \tcallq  402080 <strerror@plt>\n  40332b:\t48 89 c3             \tmov    %rax,%rbx\n  40332e:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n  403335:\t48 89 c7             \tmov    %rax,%rdi\n  403338:\te8 63 ed ff ff       \tcallq  4020a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>\n  40333d:\t48 89 c2             \tmov    %rax,%rdx\n  403340:\t48 8b 05 59 3e 00 00 \tmov    0x3e59(%rip),%rax        # 4071a0 <stderr@@GLIBC_2.2.5>\n  403347:\t48 89 d9             \tmov    %rbx,%rcx\n  40334a:\tbe 9e 53 40 00       \tmov    $0x40539e,%esi\n  40334f:\t48 89 c7             \tmov    %rax,%rdi\n  403352:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403357:\te8 a4 ee ff ff       \tcallq  402200 <fprintf@plt>\n  40335c:\tbb ff ff ff ff       \tmov    $0xffffffff,%ebx\n  403361:\te9 d4 01 00 00       \tjmpq   40353a <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x370>\n  403366:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  40336d:\t00 \n  40336e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  403372:\t48 89 c7             \tmov    %rax,%rdi\n  403375:\te8 c6 ee ff ff       \tcallq  402240 <readdir@plt>\n  40337a:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  40337e:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  403383:\t0f 95 c0             \tsetne  %al\n  403386:\t84 c0                \ttest   %al,%al\n  403388:\t0f 84 9b 01 00 00    \tje     403529 <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x35f>\n  40338e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403392:\t48 8d 50 13          \tlea    0x13(%rax),%rdx\n  403396:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  40339d:\t48 89 d6             \tmov    %rdx,%rsi\n  4033a0:\t48 89 c7             \tmov    %rax,%rdi\n  4033a3:\te8 28 ee ff ff       \tcallq  4021d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>\n  4033a8:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4033af:\tbe bc 53 40 00       \tmov    $0x4053bc,%esi\n  4033b4:\t48 89 c7             \tmov    %rax,%rdi\n  4033b7:\te8 57 09 00 00       \tcallq  403d13 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>\n  4033bc:\t84 c0                \ttest   %al,%al\n  4033be:\t75 18                \tjne    4033d8 <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20e>\n  4033c0:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4033c7:\tbe be 53 40 00       \tmov    $0x4053be,%esi\n  4033cc:\t48 89 c7             \tmov    %rax,%rdi\n  4033cf:\te8 3f 09 00 00       \tcallq  403d13 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>\n  4033d4:\t84 c0                \ttest   %al,%al\n  4033d6:\t74 07                \tje     4033df <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x215>\n  4033d8:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4033dd:\teb 05                \tjmp    4033e4 <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x21a>\n  4033df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4033e4:\t84 c0                \ttest   %al,%al\n  4033e6:\t0f 85 37 01 00 00    \tjne    403523 <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x359>\n  4033ec:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  4033f0:\t48 8b 8d 20 ff ff ff \tmov    -0xe0(%rbp),%rcx\n  4033f7:\tba 22 50 40 00       \tmov    $0x405022,%edx\n  4033fc:\t48 89 ce             \tmov    %rcx,%rsi\n  4033ff:\t48 89 c7             \tmov    %rax,%rdi\n  403402:\te8 36 09 00 00       \tcallq  403d3d <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>\n  403407:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  40340b:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  403412:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n  403416:\t48 89 ce             \tmov    %rcx,%rsi\n  403419:\t48 89 c7             \tmov    %rax,%rdi\n  40341c:\te8 7e 09 00 00       \tcallq  403d9f <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>\n  403421:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n  403425:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  40342c:\t48 89 d6             \tmov    %rdx,%rsi\n  40342f:\t48 89 c7             \tmov    %rax,%rdi\n  403432:\te8 79 ed ff ff       \tcallq  4021b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@plt>\n  403437:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  40343b:\t48 89 c7             \tmov    %rax,%rdi\n  40343e:\te8 dd ec ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  403443:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  403447:\t48 89 c7             \tmov    %rax,%rdi\n  40344a:\te8 d1 ec ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  40344f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403453:\t0f b6 40 12          \tmovzbl 0x12(%rax),%eax\n  403457:\t3c 04                \tcmp    $0x4,%al\n  403459:\t75 64                \tjne    4034bf <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f5>\n  40345b:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n  403462:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n  403469:\t48 89 d6             \tmov    %rdx,%rsi\n  40346c:\t48 89 c7             \tmov    %rax,%rdi\n  40346f:\te8 56 fd ff ff       \tcallq  4031ca <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>\n  403474:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  403477:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n  40347b:\t0f 85 ed fe ff ff    \tjne    40336e <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a4>\n  403481:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  403488:\t48 89 c7             \tmov    %rax,%rdi\n  40348b:\te8 10 ec ff ff       \tcallq  4020a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>\n  403490:\t48 89 c2             \tmov    %rax,%rdx\n  403493:\t48 8b 05 06 3d 00 00 \tmov    0x3d06(%rip),%rax        # 4071a0 <stderr@@GLIBC_2.2.5>\n  40349a:\tbe 95 50 40 00       \tmov    $0x405095,%esi\n  40349f:\t48 89 c7             \tmov    %rax,%rdi\n  4034a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4034a7:\te8 54 ed ff ff       \tcallq  402200 <fprintf@plt>\n  4034ac:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4034b0:\t48 89 c7             \tmov    %rax,%rdi\n  4034b3:\te8 98 ed ff ff       \tcallq  402250 <closedir@plt>\n  4034b8:\tbb ff ff ff ff       \tmov    $0xffffffff,%ebx\n  4034bd:\teb 7b                \tjmp    40353a <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x370>\n  4034bf:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n  4034c6:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n  4034cd:\t48 89 d6             \tmov    %rdx,%rsi\n  4034d0:\t48 89 c7             \tmov    %rax,%rdi\n  4034d3:\te8 e2 00 00 00       \tcallq  4035ba <_ZN3Zip16addFileToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>\n  4034d8:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4034db:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n  4034df:\t0f 85 89 fe ff ff    \tjne    40336e <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a4>\n  4034e5:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  4034ec:\t48 89 c7             \tmov    %rax,%rdi\n  4034ef:\te8 ac eb ff ff       \tcallq  4020a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>\n  4034f4:\t48 89 c2             \tmov    %rax,%rdx\n  4034f7:\t48 8b 05 a2 3c 00 00 \tmov    0x3ca2(%rip),%rax        # 4071a0 <stderr@@GLIBC_2.2.5>\n  4034fe:\tbe 95 50 40 00       \tmov    $0x405095,%esi\n  403503:\t48 89 c7             \tmov    %rax,%rdi\n  403506:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40350b:\te8 f0 ec ff ff       \tcallq  402200 <fprintf@plt>\n  403510:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  403514:\t48 89 c7             \tmov    %rax,%rdi\n  403517:\te8 34 ed ff ff       \tcallq  402250 <closedir@plt>\n  40351c:\tbb ff ff ff ff       \tmov    $0xffffffff,%ebx\n  403521:\teb 17                \tjmp    40353a <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x370>\n  403523:\t90                   \tnop\n  403524:\te9 45 fe ff ff       \tjmpq   40336e <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a4>\n  403529:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40352d:\t48 89 c7             \tmov    %rax,%rdi\n  403530:\te8 1b ed ff ff       \tcallq  402250 <closedir@plt>\n  403535:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n  40353a:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  403541:\t48 89 c7             \tmov    %rax,%rdi\n  403544:\te8 d7 eb ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  403549:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  403550:\t48 89 c7             \tmov    %rax,%rdi\n  403553:\te8 c8 eb ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  403558:\t89 d8                \tmov    %ebx,%eax\n  40355a:\teb 51                \tjmp    4035ad <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e3>\n  40355c:\t48 89 c3             \tmov    %rax,%rbx\n  40355f:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n  403566:\t48 89 c7             \tmov    %rax,%rdi\n  403569:\te8 b2 eb ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  40356e:\teb 14                \tjmp    403584 <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3ba>\n  403570:\t48 89 c3             \tmov    %rax,%rbx\n  403573:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  403577:\t48 89 c7             \tmov    %rax,%rdi\n  40357a:\te8 a1 eb ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  40357f:\teb 03                \tjmp    403584 <_ZN3Zip15addDirToArchiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3ba>\n  403581:\t48 89 c3             \tmov    %rax,%rbx\n  403584:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  40358b:\t48 89 c7             \tmov    %rax,%rdi\n  40358e:\te8 8d eb ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  403593:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  40359a:\t48 89 c7             \tmov    %rax,%rdi\n  40359d:\te8 7e eb ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  4035a2:\t48 89 d8             \tmov    %rbx,%rax\n  4035a5:\t48 89 c7             \tmov    %rax,%rdi\n  4035a8:\te8 f3 ec ff ff       \tcallq  4022a0 <_Unwind_Resume@plt>\n  4035ad:\t48 81 c4 d0 00 00 00 \tadd    $0xd0,%rsp\n  4035b4:\t5b                   \tpop    %rbx\n  4035b5:\t41 5c                \tpop    %r12\n  4035b7:\t5d                   \tpop    %rbp\n  4035b8:\tc3                   \tretq   \n  4035b9:\t90                   \tnop", "code_s": "__int64 __fastcall Zip addDirToArchive(__int64 a1, __int64 a2) {\n  unsigned int v2;\n  const char *v3;\n  const char *v4;\n  int v5;\n  const char *v6;\n  int *v7;\n  char *v8;\n  const char *v9;\n  const char *v11;\n  char v13[Number];\n  char v14[Number];\n  char v15[Number];\n  char v16[Number];\n  struct dirent *v17;\n  DIR *dirp;\n  int v19;\n  v19 = Number;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  if (!(unsigned __int8)std operator!=<char>(a2, String))\n    goto LABEL_6;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  length();\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  substr();\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  c_str();\n  v19 = zip_add_dir();\n  if (v19 == Number) {\n    v3 = (const char *)zip_strerror();\n    v4 = (const char *)std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        c_str();\n    fprintf(_bss_start, String, v4, v3);\n    v2 = Number;\n    v5 = Number;\n  } else {\n    v5 = Number;\n  }\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  if (v5 == Number) {\n  LABEL_6:\n    v6 = (const char *)std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        c_str();\n    dirp = opendir(v6);\n    if (dirp) {\n      v17 = Number L;\n      while (Number) {\n        v17 = readdir(dirp);\n        if (!v17)\n          break;\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>>\n            operator=();\n        if (!(unsigned __int8)std operator==<char>(v14, String) &&\n            !(unsigned __int8)std operator==<char>(v14, String)) {\n          std operator+<char>(v16, a2, String);\n          std operator+<char>(v15, v16, v14);\n          std __cxx11\n              basic_string<char, std char_traits<char>, std allocator<char>>\n              operator=();\n          std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> ~basic_string();\n          std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> ~basic_string();\n          if (v17->d_type == Number) {\n            v19 = Zip addDirToArchive(a1, v13);\n            if (v19 == Number)\n              goto LABEL_17;\n          } else {\n            v19 = Zip addFileToArchive(a1, v13);\n            if (v19 == Number) {\n            LABEL_17:\n              v11 = (const char *)std __cxx11\n                  basic_string<char, std char_traits<char>, std allocator<char>>\n                  c_str();\n              fprintf(_bss_start, String, v11);\n              closedir(dirp);\n              v2 = Number;\n              goto LABEL_22;\n            }\n          }\n        }\n      }\n      closedir(dirp);\n      v2 = Number;\n    } else {\n      v7 = __errno_location();\n      v8 = strerror(*v7);\n      v9 = (const char *)std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>\n          c_str();\n      fprintf(_bss_start, String, v9, v8);\n      v2 = Number;\n    }\n  }\nLABEL_22:\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  return v2;\n}", "code_t": "int __cdecl Zip addDirToArchive(Zip *const this, const std string *path) {\n  int v2;\n  const char *v3;\n  const char *v4;\n  int v5;\n  const char *v6;\n  int *v7;\n  char *v8;\n  const char *v9;\n  const char *v11;\n  std string <span class=\"supfact\">npath</span>;\n  std string <span class=\"supfact\">entryName</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">v15</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">__lhs</span>;\n  dirent *pEnt;\n  DIR *pDir;\n  int rt;\n  rt = Number;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  if (!std operator!=<char>(path, String))\n    goto LABEL_6;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  length();\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  substr();\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  c_str();\n  rt = zip_add_dir();\n  if (rt == Number) {\n    v3 = (const char *)zip_strerror();\n    v4 = (const char *)std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        c_str();\n    fprintf(_bss_start, String, v4, v3);\n    v2 = Number;\n    v5 = Number;\n  } else {\n    v5 = Number;\n  }\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  if (v5 == Number) {\n  LABEL_6:\n    v6 = (const char *)std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        c_str();\n    pDir = opendir(v6);\n    if (pDir) {\n      pEnt = Number L;\n      while (Number) {\n        pEnt = readdir(pDir);\n        if (!pEnt)\n          break;\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>>\n            operator=();\n        if (!std operator==<char>(&<span class=\"supfact\">entryName</span>, String) &&\n            !std operator==<char>(&<span class=\"supfact\">entryName</span>, String)) {\n          std operator+<char>(&<span class=\"supfact\">__lhs</span>, path, String);\n          std operator+<char>(&<span class=\"supfact\">v15</span>, &<span class=\"supfact\">__lhs</span>,\n                              &<span class=\"supfact\">entryName</span>);\n          std __cxx11\n              basic_string<char, std char_traits<char>, std allocator<char>>\n              operator=();\n          std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> ~basic_string();\n          std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> ~basic_string();\n          if (pEnt->d_type == Number) {\n            rt = Zip addDirToArchive(this, &<span class=\"supfact\">npath</span>);\n            if (rt == Number)\n              goto LABEL_17;\n          } else {\n            rt = Zip addFileToArchive(this, &<span class=\"supfact\">npath</span>);\n            if (rt == Number) {\n            LABEL_17:\n              v11 = (const char *)std __cxx11\n                  basic_string<char, std char_traits<char>, std allocator<char>>\n                  c_str();\n              fprintf(_bss_start, String, v11);\n              closedir(pDir);\n              v2 = Number;\n              goto LABEL_22;\n            }\n          }\n        }\n      }\n      closedir(pDir);\n      v2 = Number;\n    } else {\n      v7 = __errno_location();\n      v8 = strerror(*v7);\n      v9 = (const char *)std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>\n          c_str();\n      fprintf(_bss_start, String, v9, v8);\n      v2 = Number;\n    }\n  }\nLABEL_22:\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  return v2;\n}", "var": [{"name": "v13", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "buffer", "ref_name": "npath", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v14", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "__lhs", "ref_name": "entryName", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v15", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "__rhs", "ref_name": "v15", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v16", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v16", "ref_name": "__lhs", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "nmacs", "repo_name": "print3d", "path": "nmacs/print3d/142ee0ab03aaea08c1cce3b49aba610648f7bc1ddb53dfc348f2f9408898fa3c", "path_in_repo": "nmacs/print3d//toolchain/openocd-0.7.0/jimtcl/jimsh", "objdump": "", "code_s": "struct tm *localtime_r(const time_t *timer, struct tm *tp) {\n  return localtime_r(timer, tp);\n}", "code_t": "struct tm *localtime_r(const time_t *timer, struct tm *<span class=\"supfact\">tp</span>) {\n  return localtime_r(timer, <span class=\"supfact\">tp</span>);\n}", "var": [{"name": "tp", "type": "struct tm *", "pred_name": "tp", "ref_name": "tp", "ref_type": "struct tm *"}], "body_in_train": true}, {"repo_owner": "ipwndev", "repo_name": "DSLinux", "path": "ipwndev/DSLinux/12fde458e0754cf17360bf4f3dd87e8237149ad579846e33d8b0da5651010024", "path_in_repo": "ipwndev/DSLinux/user/netcat/nc", "objdump": "", "code_s": "void __noreturn longjmp(struct __jmp_buf_tag env[Number], int val) {\n  longjmp(env, val);\n}", "code_t": "void __noreturn longjmp(struct __jmp_buf_tag <span class=\"supfact\">env</span>[Number],\n                        int val) {\n  longjmp(<span class=\"supfact\">env</span>, val);\n}", "var": [{"name": "env", "type": "struct __jmp_buf_tag *__attribute__((__org_arrdim(0,1)))", "pred_name": "env", "ref_name": "env", "ref_type": "struct __jmp_buf_tag *__attribute__((__org_arrdim(0,1)))"}], "body_in_train": true}, {"repo_owner": "s3lsensor", "repo_name": "snowfort", "path": "s3lsensor/snowfort/57eb0b73aa07a2d9a00a6c5f9b9eb123b89ee674821d26638befe01a0fb84914", "path_in_repo": "s3lsensor/snowfort/examples/ipv6/native-border-router/obj_native/elfloader.o", "objdump": "00000000000004ee <elfloader_load>:\n 4ee:\t55                   \tpush   %rbp\n 4ef:\t48 89 e5             \tmov    %rsp,%rbp\n 4f2:\t53                   \tpush   %rbx\n 4f3:\t48 81 ec 68 01 00 00 \tsub    $0x168,%rsp\n 4fa:\t89 bd 9c fe ff ff    \tmov    %edi,-0x164(%rbp)\n 500:\tc6 45 e7 ff          \tmovb   $0xff,-0x19(%rbp)\n 504:\t66 c7 45 e4 00 00    \tmovw   $0x0,-0x1c(%rbp)\n 50a:\t66 c7 45 e0 00 00    \tmovw   $0x0,-0x20(%rbp)\n 510:\t66 c7 45 dc 00 00    \tmovw   $0x0,-0x24(%rbp)\n 516:\t66 c7 45 d8 00 00    \tmovw   $0x0,-0x28(%rbp)\n 51c:\t66 c7 45 d4 00 00    \tmovw   $0x0,-0x2c(%rbp)\n 522:\t66 c7 45 d0 00 00    \tmovw   $0x0,-0x30(%rbp)\n 528:\t66 c7 45 cc 00 00    \tmovw   $0x0,-0x34(%rbp)\n 52e:\t66 c7 45 c8 00 00    \tmovw   $0x0,-0x38(%rbp)\n 534:\t66 c7 45 c4 00 00    \tmovw   $0x0,-0x3c(%rbp)\n 53a:\tc6 05 00 00 00 00 00 \tmovb   $0x0,0x0(%rip)        # 541 <elfloader_load+0x53>\n 541:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n 548:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n 54e:\tb9 50 00 00 00       \tmov    $0x50,%ecx\n 553:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 558:\t89 c7                \tmov    %eax,%edi\n 55a:\te8 a1 fa ff ff       \tcallq  0 <seek_read>\n 55f:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n 566:\tba 07 00 00 00       \tmov    $0x7,%edx\n 56b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 570:\t48 89 c7             \tmov    %rax,%rdi\n 573:\te8 00 00 00 00       \tcallq  578 <elfloader_load+0x8a>\n 578:\t85 c0                \ttest   %eax,%eax\n 57a:\t74 0a                \tje     586 <elfloader_load+0x98>\n 57c:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 581:\te9 91 06 00 00       \tjmpq   c17 <elfloader_load+0x729>\n 586:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 58a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 58d:\t48 8d 95 00 ff ff ff \tlea    -0x100(%rbp),%rdx\n 594:\t8b 75 ec             \tmov    -0x14(%rbp),%esi\n 597:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n 59d:\tb9 50 00 00 00       \tmov    $0x50,%ecx\n 5a2:\t89 c7                \tmov    %eax,%edi\n 5a4:\te8 57 fa ff ff       \tcallq  0 <seek_read>\n 5a9:\t0f b7 45 96          \tmovzwl -0x6a(%rbp),%eax\n 5ad:\t66 89 45 c2          \tmov    %ax,-0x3e(%rbp)\n 5b1:\t0f b7 45 98          \tmovzwl -0x68(%rbp),%eax\n 5b5:\t66 89 45 c0          \tmov    %ax,-0x40(%rbp)\n 5b9:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 5bd:\t89 c1                \tmov    %eax,%ecx\n 5bf:\t0f b7 55 c2          \tmovzwl -0x3e(%rbp),%edx\n 5c3:\t0f b7 45 9a          \tmovzwl -0x66(%rbp),%eax\n 5c7:\t0f b7 c0             \tmovzwl %ax,%eax\n 5ca:\t0f af c2             \timul   %edx,%eax\n 5cd:\t8d 34 01             \tlea    (%rcx,%rax,1),%esi\n 5d0:\t48 8d 95 b0 fe ff ff \tlea    -0x150(%rbp),%rdx\n 5d7:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n 5dd:\tb9 50 00 00 00       \tmov    $0x50,%ecx\n 5e2:\t89 c7                \tmov    %eax,%edi\n 5e4:\te8 17 fa ff ff       \tcallq  0 <seek_read>\n 5e9:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n 5f0:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n 5f3:\t66 c7 45 c6 00 00    \tmovw   $0x0,-0x3a(%rbp)\n 5f9:\t0f b7 45 c6          \tmovzwl -0x3a(%rbp),%eax\n 5fd:\t66 89 45 ca          \tmov    %ax,-0x36(%rbp)\n 601:\t0f b7 45 ca          \tmovzwl -0x36(%rbp),%eax\n 605:\t66 89 45 ce          \tmov    %ax,-0x32(%rbp)\n 609:\t0f b7 45 ce          \tmovzwl -0x32(%rbp),%eax\n 60d:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n 611:\t0f b7 45 d2          \tmovzwl -0x2e(%rbp),%eax\n 615:\t66 89 45 d6          \tmov    %ax,-0x2a(%rbp)\n 619:\t0f b7 45 d6          \tmovzwl -0x2a(%rbp),%eax\n 61d:\t66 89 45 da          \tmov    %ax,-0x26(%rbp)\n 621:\t0f b7 45 da          \tmovzwl -0x26(%rbp),%eax\n 625:\t66 89 45 de          \tmov    %ax,-0x22(%rbp)\n 629:\t0f b7 45 de          \tmovzwl -0x22(%rbp),%eax\n 62d:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n 631:\tc6 05 00 00 00 00 ff \tmovb   $0xff,0x0(%rip)        # 638 <elfloader_load+0x14a>\n 638:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 63f <elfloader_load+0x151>\n 63f:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 645 <elfloader_load+0x157>\n 645:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 64c <elfloader_load+0x15e>\n 64c:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 652 <elfloader_load+0x164>\n 652:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 659 <elfloader_load+0x16b>\n 659:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 65f <elfloader_load+0x171>\n 65f:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 663:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 666:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n 66d:\te9 22 03 00 00       \tjmpq   994 <elfloader_load+0x4a6>\n 672:\t48 8d 95 00 ff ff ff \tlea    -0x100(%rbp),%rdx\n 679:\t8b 75 ec             \tmov    -0x14(%rbp),%esi\n 67c:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n 682:\tb9 50 00 00 00       \tmov    $0x50,%ecx\n 687:\t89 c7                \tmov    %eax,%edi\n 689:\te8 72 f9 ff ff       \tcallq  0 <seek_read>\n 68e:\t48 8b 85 00 ff ff ff \tmov    -0x100(%rbp),%rax\n 695:\t89 c2                \tmov    %eax,%edx\n 697:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n 69a:\t01 d0                \tadd    %edx,%eax\n 69c:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n 69f:\t48 8d 95 a4 fe ff ff \tlea    -0x15c(%rbp),%rdx\n 6a6:\t8b 75 ac             \tmov    -0x54(%rbp),%esi\n 6a9:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n 6af:\tb9 0c 00 00 00       \tmov    $0xc,%ecx\n 6b4:\t89 c7                \tmov    %eax,%edi\n 6b6:\te8 45 f9 ff ff       \tcallq  0 <seek_read>\n 6bb:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n 6c2:\t48 83 f8 02          \tcmp    $0x2,%rax\n 6c6:\t75 1b                \tjne    6e3 <elfloader_load+0x1f5>\n 6c8:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 6cf:\t66 89 45 cc          \tmov    %ax,-0x34(%rbp)\n 6d3:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 6da:\t66 89 45 ca          \tmov    %ax,-0x36(%rbp)\n 6de:\te9 a6 02 00 00       \tjmpq   989 <elfloader_load+0x49b>\n 6e3:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n 6ea:\t48 83 f8 03          \tcmp    $0x3,%rax\n 6ee:\t75 1b                \tjne    70b <elfloader_load+0x21d>\n 6f0:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 6f7:\t66 89 45 c8          \tmov    %ax,-0x38(%rbp)\n 6fb:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 702:\t66 89 45 c6          \tmov    %ax,-0x3a(%rbp)\n 706:\te9 7e 02 00 00       \tjmpq   989 <elfloader_load+0x49b>\n 70b:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 712:\tba 05 00 00 00       \tmov    $0x5,%edx\n 717:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 71c:\t48 89 c7             \tmov    %rax,%rdi\n 71f:\te8 00 00 00 00       \tcallq  724 <elfloader_load+0x236>\n 724:\t85 c0                \ttest   %eax,%eax\n 726:\t75 2e                \tjne    756 <elfloader_load+0x268>\n 728:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 72f:\t66 89 45 e4          \tmov    %ax,-0x1c(%rbp)\n 733:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 73a:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n 73e:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 741:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 747 <elfloader_load+0x259>\n 747:\t0f b7 45 e4          \tmovzwl -0x1c(%rbp),%eax\n 74b:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 751 <elfloader_load+0x263>\n 751:\te9 33 02 00 00       \tjmpq   989 <elfloader_load+0x49b>\n 756:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 75d:\tba 09 00 00 00       \tmov    $0x9,%edx\n 762:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 767:\t48 89 c7             \tmov    %rax,%rdi\n 76a:\te8 00 00 00 00       \tcallq  76f <elfloader_load+0x281>\n 76f:\t85 c0                \ttest   %eax,%eax\n 771:\t75 1f                \tjne    792 <elfloader_load+0x2a4>\n 773:\tc6 45 e7 00          \tmovb   $0x0,-0x19(%rbp)\n 777:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 77e:\t66 89 45 e0          \tmov    %ax,-0x20(%rbp)\n 782:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 789:\t66 89 45 de          \tmov    %ax,-0x22(%rbp)\n 78d:\te9 f7 01 00 00       \tjmpq   989 <elfloader_load+0x49b>\n 792:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 799:\tba 0a 00 00 00       \tmov    $0xa,%edx\n 79e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 7a3:\t48 89 c7             \tmov    %rax,%rdi\n 7a6:\te8 00 00 00 00       \tcallq  7ab <elfloader_load+0x2bd>\n 7ab:\t85 c0                \ttest   %eax,%eax\n 7ad:\t75 1f                \tjne    7ce <elfloader_load+0x2e0>\n 7af:\tc6 45 e7 01          \tmovb   $0x1,-0x19(%rbp)\n 7b3:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 7ba:\t66 89 45 e0          \tmov    %ax,-0x20(%rbp)\n 7be:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 7c5:\t66 89 45 de          \tmov    %ax,-0x22(%rbp)\n 7c9:\te9 bb 01 00 00       \tjmpq   989 <elfloader_load+0x49b>\n 7ce:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 7d5:\tba 05 00 00 00       \tmov    $0x5,%edx\n 7da:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 7df:\t48 89 c7             \tmov    %rax,%rdi\n 7e2:\te8 00 00 00 00       \tcallq  7e7 <elfloader_load+0x2f9>\n 7e7:\t85 c0                \ttest   %eax,%eax\n 7e9:\t75 2e                \tjne    819 <elfloader_load+0x32b>\n 7eb:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 7f2:\t66 89 45 dc          \tmov    %ax,-0x24(%rbp)\n 7f6:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 7fd:\t66 89 45 da          \tmov    %ax,-0x26(%rbp)\n 801:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 804:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 80a <elfloader_load+0x31c>\n 80a:\t0f b7 45 dc          \tmovzwl -0x24(%rbp),%eax\n 80e:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 814 <elfloader_load+0x326>\n 814:\te9 70 01 00 00       \tjmpq   989 <elfloader_load+0x49b>\n 819:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 820:\tba 07 00 00 00       \tmov    $0x7,%edx\n 825:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 82a:\t48 89 c7             \tmov    %rax,%rdi\n 82d:\te8 00 00 00 00       \tcallq  832 <elfloader_load+0x344>\n 832:\t85 c0                \ttest   %eax,%eax\n 834:\t75 2e                \tjne    864 <elfloader_load+0x376>\n 836:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 83d:\t66 89 45 d4          \tmov    %ax,-0x2c(%rbp)\n 841:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 848:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n 84c:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 84f:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 855 <elfloader_load+0x367>\n 855:\t0f b7 45 d4          \tmovzwl -0x2c(%rbp),%eax\n 859:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 85f <elfloader_load+0x371>\n 85f:\te9 25 01 00 00       \tjmpq   989 <elfloader_load+0x49b>\n 864:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 86b:\tba 0b 00 00 00       \tmov    $0xb,%edx\n 870:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 875:\t48 89 c7             \tmov    %rax,%rdi\n 878:\te8 00 00 00 00       \tcallq  87d <elfloader_load+0x38f>\n 87d:\t85 c0                \ttest   %eax,%eax\n 87f:\t75 1f                \tjne    8a0 <elfloader_load+0x3b2>\n 881:\tc6 45 e7 00          \tmovb   $0x0,-0x19(%rbp)\n 885:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 88c:\t66 89 45 d0          \tmov    %ax,-0x30(%rbp)\n 890:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 897:\t66 89 45 ce          \tmov    %ax,-0x32(%rbp)\n 89b:\te9 e9 00 00 00       \tjmpq   989 <elfloader_load+0x49b>\n 8a0:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 8a7:\tba 0c 00 00 00       \tmov    $0xc,%edx\n 8ac:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 8b1:\t48 89 c7             \tmov    %rax,%rdi\n 8b4:\te8 00 00 00 00       \tcallq  8b9 <elfloader_load+0x3cb>\n 8b9:\t85 c0                \ttest   %eax,%eax\n 8bb:\t75 1f                \tjne    8dc <elfloader_load+0x3ee>\n 8bd:\tc6 45 e7 01          \tmovb   $0x1,-0x19(%rbp)\n 8c1:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 8c8:\t66 89 45 d0          \tmov    %ax,-0x30(%rbp)\n 8cc:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 8d3:\t66 89 45 ce          \tmov    %ax,-0x32(%rbp)\n 8d7:\te9 ad 00 00 00       \tjmpq   989 <elfloader_load+0x49b>\n 8dc:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 8e3:\tba 09 00 00 00       \tmov    $0x9,%edx\n 8e8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 8ed:\t48 89 c7             \tmov    %rax,%rdi\n 8f0:\te8 00 00 00 00       \tcallq  8f5 <elfloader_load+0x407>\n 8f5:\t85 c0                \ttest   %eax,%eax\n 8f7:\t75 1c                \tjne    915 <elfloader_load+0x427>\n 8f9:\tc6 45 e7 00          \tmovb   $0x0,-0x19(%rbp)\n 8fd:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 904:\t66 89 45 d8          \tmov    %ax,-0x28(%rbp)\n 908:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 90f:\t66 89 45 d6          \tmov    %ax,-0x2a(%rbp)\n 913:\teb 74                \tjmp    989 <elfloader_load+0x49b>\n 915:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 91c:\tba 0a 00 00 00       \tmov    $0xa,%edx\n 921:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 926:\t48 89 c7             \tmov    %rax,%rdi\n 929:\te8 00 00 00 00       \tcallq  92e <elfloader_load+0x440>\n 92e:\t85 c0                \ttest   %eax,%eax\n 930:\t75 1c                \tjne    94e <elfloader_load+0x460>\n 932:\tc6 45 e7 01          \tmovb   $0x1,-0x19(%rbp)\n 936:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 93d:\t66 89 45 d8          \tmov    %ax,-0x28(%rbp)\n 941:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 948:\t66 89 45 d6          \tmov    %ax,-0x2a(%rbp)\n 94c:\teb 3b                \tjmp    989 <elfloader_load+0x49b>\n 94e:\t48 8d 85 a4 fe ff ff \tlea    -0x15c(%rbp),%rax\n 955:\tba 04 00 00 00       \tmov    $0x4,%edx\n 95a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 95f:\t48 89 c7             \tmov    %rax,%rdi\n 962:\te8 00 00 00 00       \tcallq  967 <elfloader_load+0x479>\n 967:\t85 c0                \ttest   %eax,%eax\n 969:\t75 1e                \tjne    989 <elfloader_load+0x49b>\n 96b:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 972:\t66 89 45 c4          \tmov    %ax,-0x3c(%rbp)\n 976:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 979:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 97f <elfloader_load+0x491>\n 97f:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 989 <elfloader_load+0x49b>\n 986:\t00 00 00 \n 989:\t0f b7 45 c2          \tmovzwl -0x3e(%rbp),%eax\n 98d:\t01 45 ec             \tadd    %eax,-0x14(%rbp)\n 990:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n 994:\t0f b7 45 c0          \tmovzwl -0x40(%rbp),%eax\n 998:\t39 45 e8             \tcmp    %eax,-0x18(%rbp)\n 99b:\t0f 8c d1 fc ff ff    \tjl     672 <elfloader_load+0x184>\n 9a1:\t66 83 7d ca 00       \tcmpw   $0x0,-0x36(%rbp)\n 9a6:\t75 0a                \tjne    9b2 <elfloader_load+0x4c4>\n 9a8:\tb8 02 00 00 00       \tmov    $0x2,%eax\n 9ad:\te9 65 02 00 00       \tjmpq   c17 <elfloader_load+0x729>\n 9b2:\t66 83 7d c6 00       \tcmpw   $0x0,-0x3a(%rbp)\n 9b7:\t75 0a                \tjne    9c3 <elfloader_load+0x4d5>\n 9b9:\tb8 03 00 00 00       \tmov    $0x3,%eax\n 9be:\te9 54 02 00 00       \tjmpq   c17 <elfloader_load+0x729>\n 9c3:\t66 83 7d e2 00       \tcmpw   $0x0,-0x1e(%rbp)\n 9c8:\t75 0a                \tjne    9d4 <elfloader_load+0x4e6>\n 9ca:\tb8 04 00 00 00       \tmov    $0x4,%eax\n 9cf:\te9 43 02 00 00       \tjmpq   c17 <elfloader_load+0x729>\n 9d4:\t0f b7 55 c4          \tmovzwl -0x3c(%rbp),%edx\n 9d8:\t0f b7 45 da          \tmovzwl -0x26(%rbp),%eax\n 9dc:\t01 d0                \tadd    %edx,%eax\n 9de:\t89 c7                \tmov    %eax,%edi\n 9e0:\te8 00 00 00 00       \tcallq  9e5 <elfloader_load+0x4f7>\n 9e5:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 9ec <elfloader_load+0x4fe>\n 9ec:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 9f3 <elfloader_load+0x505>\n 9f3:\t0f b7 45 c4          \tmovzwl -0x3c(%rbp),%eax\n 9f7:\t48 01 d0             \tadd    %rdx,%rax\n 9fa:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # a01 <elfloader_load+0x513>\n a01:\t0f b7 55 e2          \tmovzwl -0x1e(%rbp),%edx\n a05:\t0f b7 45 d2          \tmovzwl -0x2e(%rbp),%eax\n a09:\t01 d0                \tadd    %edx,%eax\n a0b:\t89 c7                \tmov    %eax,%edi\n a0d:\te8 00 00 00 00       \tcallq  a12 <elfloader_load+0x524>\n a12:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # a19 <elfloader_load+0x52b>\n a19:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # a20 <elfloader_load+0x532>\n a20:\t0f b7 45 e2          \tmovzwl -0x1e(%rbp),%eax\n a24:\t48 01 d0             \tadd    %rdx,%rax\n a27:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # a2e <elfloader_load+0x540>\n a2e:\t66 83 7d de 00       \tcmpw   $0x0,-0x22(%rbp)\n a33:\t74 58                \tje     a8d <elfloader_load+0x59f>\n a35:\t44 0f b6 55 e7       \tmovzbl -0x19(%rbp),%r10d\n a3a:\t44 0f b7 4d ca       \tmovzwl -0x36(%rbp),%r9d\n a3f:\t44 0f b7 45 cc       \tmovzwl -0x34(%rbp),%r8d\n a44:\t0f b7 7d c8          \tmovzwl -0x38(%rbp),%edi\n a48:\t4c 8b 1d 00 00 00 00 \tmov    0x0(%rip),%r11        # a4f <elfloader_load+0x561>\n a4f:\t0f b7 4d e4          \tmovzwl -0x1c(%rbp),%ecx\n a53:\t0f b7 55 de          \tmovzwl -0x22(%rbp),%edx\n a57:\t0f b7 75 e0          \tmovzwl -0x20(%rbp),%esi\n a5b:\t8b 5d bc             \tmov    -0x44(%rbp),%ebx\n a5e:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n a64:\t41 52                \tpush   %r10\n a66:\t41 51                \tpush   %r9\n a68:\t41 50                \tpush   %r8\n a6a:\t57                   \tpush   %rdi\n a6b:\t41 89 d9             \tmov    %ebx,%r9d\n a6e:\t4d 89 d8             \tmov    %r11,%r8\n a71:\t89 c7                \tmov    %eax,%edi\n a73:\te8 f5 f6 ff ff       \tcallq  16d <relocate_section>\n a78:\t48 83 c4 20          \tadd    $0x20,%rsp\n a7c:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n a7f:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n a83:\t74 08                \tje     a8d <elfloader_load+0x59f>\n a85:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n a88:\te9 8a 01 00 00       \tjmpq   c17 <elfloader_load+0x729>\n a8d:\t66 83 7d ce 00       \tcmpw   $0x0,-0x32(%rbp)\n a92:\t74 58                \tje     aec <elfloader_load+0x5fe>\n a94:\t44 0f b6 55 e7       \tmovzbl -0x19(%rbp),%r10d\n a99:\t44 0f b7 4d ca       \tmovzwl -0x36(%rbp),%r9d\n a9e:\t44 0f b7 45 cc       \tmovzwl -0x34(%rbp),%r8d\n aa3:\t0f b7 7d c8          \tmovzwl -0x38(%rbp),%edi\n aa7:\t4c 8b 1d 00 00 00 00 \tmov    0x0(%rip),%r11        # aae <elfloader_load+0x5c0>\n aae:\t0f b7 4d d4          \tmovzwl -0x2c(%rbp),%ecx\n ab2:\t0f b7 55 ce          \tmovzwl -0x32(%rbp),%edx\n ab6:\t0f b7 75 d0          \tmovzwl -0x30(%rbp),%esi\n aba:\t8b 5d bc             \tmov    -0x44(%rbp),%ebx\n abd:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n ac3:\t41 52                \tpush   %r10\n ac5:\t41 51                \tpush   %r9\n ac7:\t41 50                \tpush   %r8\n ac9:\t57                   \tpush   %rdi\n aca:\t41 89 d9             \tmov    %ebx,%r9d\n acd:\t4d 89 d8             \tmov    %r11,%r8\n ad0:\t89 c7                \tmov    %eax,%edi\n ad2:\te8 96 f6 ff ff       \tcallq  16d <relocate_section>\n ad7:\t48 83 c4 20          \tadd    $0x20,%rsp\n adb:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n ade:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n ae2:\t74 08                \tje     aec <elfloader_load+0x5fe>\n ae4:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n ae7:\te9 2b 01 00 00       \tjmpq   c17 <elfloader_load+0x729>\n aec:\t66 83 7d d6 00       \tcmpw   $0x0,-0x2a(%rbp)\n af1:\t74 58                \tje     b4b <elfloader_load+0x65d>\n af3:\t44 0f b6 55 e7       \tmovzbl -0x19(%rbp),%r10d\n af8:\t44 0f b7 4d ca       \tmovzwl -0x36(%rbp),%r9d\n afd:\t44 0f b7 45 cc       \tmovzwl -0x34(%rbp),%r8d\n b02:\t0f b7 7d c8          \tmovzwl -0x38(%rbp),%edi\n b06:\t4c 8b 1d 00 00 00 00 \tmov    0x0(%rip),%r11        # b0d <elfloader_load+0x61f>\n b0d:\t0f b7 4d dc          \tmovzwl -0x24(%rbp),%ecx\n b11:\t0f b7 55 d6          \tmovzwl -0x2a(%rbp),%edx\n b15:\t0f b7 75 d8          \tmovzwl -0x28(%rbp),%esi\n b19:\t8b 5d bc             \tmov    -0x44(%rbp),%ebx\n b1c:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n b22:\t41 52                \tpush   %r10\n b24:\t41 51                \tpush   %r9\n b26:\t41 50                \tpush   %r8\n b28:\t57                   \tpush   %rdi\n b29:\t41 89 d9             \tmov    %ebx,%r9d\n b2c:\t4d 89 d8             \tmov    %r11,%r8\n b2f:\t89 c7                \tmov    %eax,%edi\n b31:\te8 37 f6 ff ff       \tcallq  16d <relocate_section>\n b36:\t48 83 c4 20          \tadd    $0x20,%rsp\n b3a:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n b3d:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n b41:\t74 08                \tje     b4b <elfloader_load+0x65d>\n b43:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n b46:\te9 cc 00 00 00       \tjmpq   c17 <elfloader_load+0x729>\n b4b:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # b52 <elfloader_load+0x664>\n b52:\t0f b7 55 e2          \tmovzwl -0x1e(%rbp),%edx\n b56:\t0f b7 75 e4          \tmovzwl -0x1c(%rbp),%esi\n b5a:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n b60:\t89 c7                \tmov    %eax,%edi\n b62:\te8 00 00 00 00       \tcallq  b67 <elfloader_load+0x679>\n b67:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # b6e <elfloader_load+0x680>\n b6e:\t0f b7 55 d2          \tmovzwl -0x2e(%rbp),%edx\n b72:\t0f b7 75 d4          \tmovzwl -0x2c(%rbp),%esi\n b76:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n b7c:\t89 c7                \tmov    %eax,%edi\n b7e:\te8 00 00 00 00       \tcallq  b83 <elfloader_load+0x695>\n b83:\t0f b7 55 c4          \tmovzwl -0x3c(%rbp),%edx\n b87:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b8e <elfloader_load+0x6a0>\n b8e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n b93:\t48 89 c7             \tmov    %rax,%rdi\n b96:\te8 00 00 00 00       \tcallq  b9b <elfloader_load+0x6ad>\n b9b:\t0f b7 4d da          \tmovzwl -0x26(%rbp),%ecx\n b9f:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # ba6 <elfloader_load+0x6b8>\n ba6:\t0f b7 75 dc          \tmovzwl -0x24(%rbp),%esi\n baa:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n bb0:\t89 c7                \tmov    %eax,%edi\n bb2:\te8 49 f4 ff ff       \tcallq  0 <seek_read>\n bb7:\t0f b7 75 c8          \tmovzwl -0x38(%rbp),%esi\n bbb:\t0f b7 4d ca          \tmovzwl -0x36(%rbp),%ecx\n bbf:\t0f b7 55 cc          \tmovzwl -0x34(%rbp),%edx\n bc3:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n bc9:\t41 89 f0             \tmov    %esi,%r8d\n bcc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n bd1:\t89 c7                \tmov    %eax,%edi\n bd3:\te8 68 f4 ff ff       \tcallq  40 <find_local_symbol>\n bd8:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n bdc:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n be1:\t74 12                \tje     bf5 <elfloader_load+0x707>\n be3:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n be7:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # bee <elfloader_load+0x700>\n bee:\tb8 00 00 00 00       \tmov    $0x0,%eax\n bf3:\teb 22                \tjmp    c17 <elfloader_load+0x729>\n bf5:\t0f b7 4d c8          \tmovzwl -0x38(%rbp),%ecx\n bf9:\t0f b7 55 ca          \tmovzwl -0x36(%rbp),%edx\n bfd:\t0f b7 75 cc          \tmovzwl -0x34(%rbp),%esi\n c01:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n c07:\t89 c7                \tmov    %eax,%edi\n c09:\te8 33 f8 ff ff       \tcallq  441 <find_program_processes>\n c0e:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n c12:\tb8 07 00 00 00       \tmov    $0x7,%eax\n c17:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n c1b:\tc9                   \tleaveq \n c1c:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall elfloader_load(unsigned int a1) {\n  __int64 result;\n  char v2[Number];\n  char v3[Number];\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  char s1[Number];\n  __int64 v10;\n  unsigned __int16 v11;\n  unsigned __int16 v12;\n  unsigned __int16 v13;\n  int v14;\n  __int64 v15;\n  unsigned int v16;\n  unsigned int v17;\n  unsigned __int16 v18;\n  unsigned __int16 v19;\n  unsigned __int16 v20;\n  __int16 v21;\n  unsigned __int16 v22;\n  unsigned __int16 v23;\n  unsigned __int16 v24;\n  unsigned __int16 v25;\n  unsigned __int16 v26;\n  unsigned __int16 v27;\n  unsigned __int16 v28;\n  unsigned __int16 v29;\n  unsigned __int16 v30;\n  unsigned __int16 v31;\n  unsigned __int16 v32;\n  unsigned __int16 v33;\n  unsigned __int16 v34;\n  unsigned __int16 v35;\n  unsigned __int16 v36;\n  char v37;\n  int i;\n  unsigned int v39;\n  v37 = Number;\n  v36 = Number;\n  v34 = Number;\n  v32 = Number;\n  v30 = Number;\n  v28 = Number;\n  v26 = Number;\n  v24 = Number;\n  v22 = Number;\n  v20 = Number;\n  elfloader_unknown[Number] = Number;\n  seek_read(a1, Number, (__int64)s1, Number);\n  if (memcmp(s1, &elf_magic_header, Number))\n    return Number L;\n  v39 = v10;\n  seek_read(a1, v10, (__int64)&v5, Number);\n  v19 = v11;\n  v18 = v12;\n  seek_read(a1, v10 + v11 * v13, (__int64)v3, Number);\n  v17 = v4;\n  v21 = Number;\n  v23 = Number;\n  v25 = Number;\n  v27 = Number;\n  v29 = Number;\n  v31 = Number;\n  v33 = Number;\n  v35 = Number;\n  text = Number;\n  rodata = Number;\n  data = Number;\n  bss = Number;\n  v39 = v10;\n  for (i = Number; i < v18; ++i) {\n    seek_read(a1, v39, (__int64)&v5, Number);\n    v14 = v5 + v17;\n    seek_read(a1, v5 + v17, (__int64)v2, Number);\n    if (v6 == Number) {\n      v24 = v7;\n      v23 = v8;\n    } else if (v6 == Number) {\n      v22 = v7;\n      v21 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v36 = v7;\n      v35 = v8;\n      text = i;\n      dword_C54 = (unsigned __int16)v7;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v34 = v7;\n      v33 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v34 = v7;\n      v33 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v32 = v7;\n      v31 = v8;\n      data = i;\n      dword_C34 = (unsigned __int16)v7;\n    } else if (!strncmp(v2, String, Number)) {\n      v28 = v7;\n      v27 = v8;\n      rodata = i;\n      dword_C44 = (unsigned __int16)v7;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v26 = v7;\n      v25 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v26 = v7;\n      v25 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v30 = v7;\n      v29 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v37 = Number;\n      v30 = v7;\n      v29 = v8;\n    } else if (!strncmp(v2, String, Number)) {\n      v20 = v8;\n      bss = i;\n      dword_C24 = Number;\n    }\n    v39 += v19;\n  }\n  if (!v23)\n    return Number L;\n  if (!v21)\n    return Number L;\n  if (!v35)\n    return Number L;\n  s = (void *)elfloader_arch_allocate_ram(v20 + (unsigned int)v31);\n  qword_C38 = (__int64)s + v20;\n  qword_C58 = elfloader_arch_allocate_rom(v35 + (unsigned int)v27);\n  qword_C48 = qword_C58 + v35;\n  if (v33) {\n    v16 =\n        relocate_section(a1, v34, v33, v36, qword_C58, v17, v22, v24, v23, v37);\n    if (v16)\n      return v16;\n  }\n  if (v25) {\n    v16 =\n        relocate_section(a1, v26, v25, v28, qword_C48, v17, v22, v24, v23, v37);\n    if (v16)\n      return v16;\n  }\n  if (v29) {\n    v16 =\n        relocate_section(a1, v30, v29, v32, qword_C38, v17, v22, v24, v23, v37);\n    if (v16)\n      return v16;\n  }\n  elfloader_arch_write_rom(a1, v36, v35, qword_C58);\n  elfloader_arch_write_rom(a1, v28, v27, qword_C48);\n  memset(s, Number, v20);\n  seek_read(a1, v32, qword_C38, v31);\n  v15 = find_local_symbol(a1, String, v24, v23, v22);\n  if (v15) {\n    elfloader_autostart_processes = v15;\n    result = Number L;\n  } else {\n    find_program_processes(a1, v24, v23, v22);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl elfloader_load(int fd) {\n  int result;\n  char name[Number];\n  elf32_shdr <span class=\"supfact\">strtable</span>;\n  elf32_shdr <span class=\"supfact\">shdr</span>;\n  elf32_ehdr <span class=\"supfact\">ehdr</span>;\n  unsigned int nameptr;\n  process **process;\n  int ret;\n  unsigned int strs;\n  unsigned __int16 shdrnum;\n  unsigned __int16 shdrsize;\n  unsigned __int16 bsssize;\n  unsigned __int16 strtabsize;\n  unsigned __int16 strtaboff;\n  unsigned __int16 symtabsize;\n  unsigned __int16 symtaboff;\n  unsigned __int16 rodatarelasize;\n  unsigned __int16 rodatarelaoff;\n  unsigned __int16 rodatasize;\n  unsigned __int16 rodataoff;\n  unsigned __int16 datarelasize;\n  unsigned __int16 datarelaoff;\n  unsigned __int16 datasize;\n  unsigned __int16 dataoff;\n  unsigned __int16 textrelasize;\n  unsigned __int16 textrelaoff;\n  unsigned __int16 textsize;\n  unsigned __int16 textoff;\n  unsigned __int8 using_relas;\n  int i;\n  unsigned int shdrptr;\n  using_relas = Number;\n  textoff = Number;\n  textrelaoff = Number;\n  dataoff = Number;\n  datarelaoff = Number;\n  rodataoff = Number;\n  rodatarelaoff = Number;\n  symtaboff = Number;\n  strtaboff = Number;\n  bsssize = Number;\n  elfloader_unknown[Number] = Number;\n  seek_read(fd, Number, (char *)&<span class=\"supfact\">ehdr</span>, Number);\n  if (memcmp(&<span class=\"supfact\">ehdr</span>, elf_magic_header, Number))\n    return Number;\n  shdrptr = <span class=\"supfact\">ehdr</span>.e_shoff;\n  seek_read(fd, <span class=\"supfact\">ehdr</span>.e_shoff, (char *)&<span class=\"supfact\">shdr</span>,\n            Number);\n  shdrsize = <span class=\"supfact\">ehdr</span>.e_shentsize;\n  shdrnum = <span class=\"supfact\">ehdr</span>.e_shnum;\n  seek_read(fd,\n            LODWORD(<span class=\"supfact\">ehdr</span>.e_shoff) +\n                <span class=\"supfact\">ehdr</span>.e_shentsize *\n                    <span class=\"supfact\">ehdr</span>.e_shstrndx,\n            (char *)&<span class=\"supfact\">strtable</span>, Number);\n  strs = <span class=\"supfact\">strtable</span>.sh_offset;\n  strtabsize = Number;\n  symtabsize = Number;\n  rodatarelasize = Number;\n  rodatasize = Number;\n  datarelasize = Number;\n  datasize = Number;\n  textrelasize = Number;\n  textsize = Number;\n  text.number = Number;\n  rodata.number = Number;\n  data.number = Number;\n  bss.number = Number;\n  shdrptr = <span class=\"supfact\">ehdr</span>.e_shoff;\n  for (i = Number; i < shdrnum; ++i) {\n    seek_read(fd, shdrptr, (char *)&<span class=\"supfact\">shdr</span>, Number);\n    nameptr = LODWORD(<span class=\"supfact\">shdr</span>.sh_name) + strs;\n    seek_read(fd, LODWORD(<span class=\"supfact\">shdr</span>.sh_name) + strs, name, Number);\n    if (<span class=\"supfact\">shdr</span>.sh_type == Number) {\n      symtaboff = <span class=\"supfact\">shdr</span>.sh_offset;\n      symtabsize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (<span class=\"supfact\">shdr</span>.sh_type == Number) {\n      strtaboff = <span class=\"supfact\">shdr</span>.sh_offset;\n      strtabsize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      textoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      textsize = <span class=\"supfact\">shdr</span>.sh_size;\n      text.number = i;\n      text.offset = LOWORD(<span class=\"supfact\">shdr</span>.sh_offset);\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      textrelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      textrelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      textrelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      textrelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      dataoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      datasize = <span class=\"supfact\">shdr</span>.sh_size;\n      data.number = i;\n      data.offset = LOWORD(<span class=\"supfact\">shdr</span>.sh_offset);\n    } else if (!strncmp(name, String, Number)) {\n      rodataoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      rodatasize = <span class=\"supfact\">shdr</span>.sh_size;\n      rodata.number = i;\n      rodata.offset = LOWORD(<span class=\"supfact\">shdr</span>.sh_offset);\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      rodatarelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      rodatarelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      rodatarelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      rodatarelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      datarelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      datarelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      using_relas = Number;\n      datarelaoff = <span class=\"supfact\">shdr</span>.sh_offset;\n      datarelasize = <span class=\"supfact\">shdr</span>.sh_size;\n    } else if (!strncmp(name, String, Number)) {\n      bsssize = <span class=\"supfact\">shdr</span>.sh_size;\n      bss.number = i;\n      bss.offset = Number;\n    }\n    shdrptr += shdrsize;\n  }\n  if (!symtabsize)\n    return Number;\n  if (!strtabsize)\n    return Number;\n  if (!textsize)\n    return Number;\n  bss.address =\n      (char *)elfloader_arch_allocate_ram(bsssize + (unsigned int)datasize);\n  data.address = &bss.address[bsssize];\n  text.address =\n      (char *)elfloader_arch_allocate_rom(textsize + (unsigned int)rodatasize);\n  rodata.address = &text.address[textsize];\n  if (textrelasize) {\n    ret = relocate_section(fd, textrelaoff, textrelasize, textoff, text.address,\n                           strs, strtaboff, symtaboff, symtabsize, using_relas);\n    if (ret)\n      return ret;\n  }\n  if (rodatarelasize) {\n    ret = relocate_section(fd, rodatarelaoff, rodatarelasize, rodataoff,\n                           rodata.address, strs, strtaboff, symtaboff,\n                           symtabsize, using_relas);\n    if (ret)\n      return ret;\n  }\n  if (datarelasize) {\n    ret = relocate_section(fd, datarelaoff, datarelasize, dataoff, data.address,\n                           strs, strtaboff, symtaboff, symtabsize, using_relas);\n    if (ret)\n      return ret;\n  }\n  elfloader_arch_write_rom((unsigned int)fd, textoff, textsize, text.address);\n  elfloader_arch_write_rom((unsigned int)fd, rodataoff, rodatasize,\n                           rodata.address);\n  memset(bss.address, Number, bsssize);\n  seek_read(fd, dataoff, data.address, datasize);\n  process = (process **)find_local_symbol(fd, String, symtaboff, symtabsize,\n                                          strtaboff);\n  if (process) {\n    elfloader_autostart_processes = process;\n    result = Number;\n  } else {\n    find_program_processes(fd, symtaboff, symtabsize, strtaboff);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "struct elf32_shdr { elf32_word sh_name; elf32_word sh_type; elf32_word sh_flags; elf32_addr sh_addr; elf32_off sh_offset; elf32_word sh_size; elf32_word sh_link; elf32_word sh_info; elf32_word sh_addralign; elf32_word sh_entsize; }", "pred_name": "strtable", "ref_name": "strtable", "ref_type": "struct elf32_shdr { elf32_word sh_name; elf32_word sh_type; elf32_word sh_flags; elf32_addr sh_addr; elf32_off sh_offset; elf32_word sh_size; elf32_word sh_link; elf32_word sh_info; elf32_word sh_addralign; elf32_word sh_entsize; }"}, {"name": "v5", "type": "struct elf32_shdr { elf32_word sh_name; elf32_word sh_type; elf32_word sh_flags; elf32_addr sh_addr; elf32_off sh_offset; elf32_word sh_size; elf32_word sh_link; elf32_word sh_info; elf32_word sh_addralign; elf32_word sh_entsize; }", "pred_name": "shdr", "ref_name": "shdr", "ref_type": "struct elf32_shdr { elf32_word sh_name; elf32_word sh_type; elf32_word sh_flags; elf32_addr sh_addr; elf32_off sh_offset; elf32_word sh_size; elf32_word sh_link; elf32_word sh_info; elf32_word sh_addralign; elf32_word sh_entsize; }"}, {"name": "s1", "type": "struct elf32_ehdr { unsigned __int8[16] e_ident; elf32_half e_type; elf32_half e_machine; PADDING (4); elf32_word e_version; elf32_addr e_entry; elf32_off e_phoff; elf32_off e_shoff; elf32_word e_flags; elf32_half e_ehsize; elf32_half e_phentsize; elf32_half e_phnum; elf32_half e_shentsize; elf32_half e_shnum; elf32_half e_shstrndx; PADDING (4); }", "pred_name": "ehdr", "ref_name": "ehdr", "ref_type": "struct elf32_ehdr { unsigned __int8[16] e_ident; elf32_half e_type; elf32_half e_machine; PADDING (4); elf32_word e_version; elf32_addr e_entry; elf32_off e_phoff; elf32_off e_shoff; elf32_word e_flags; elf32_half e_ehsize; elf32_half e_phentsize; elf32_half e_phnum; elf32_half e_shentsize; elf32_half e_shnum; elf32_half e_shstrndx; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "mineralos", "repo_name": "soc_kernel", "path": "mineralos/soc_kernel/e59cd7269eca6c1393838e04f0e8de0cc84ed1f9d59b1357881e4c220c5c4d55", "path_in_repo": "mineralos/soc_kernel/tools/net/bpf_dbg", "objdump": "", "code_s": "int __fastcall fstat(int fildes, struct stat *stat_buf) {\n  return __fxstat(Number, fildes, stat_buf);\n}", "code_t": "int __fastcall fstat(int fildes, struct stat *<span class=\"supfact\">stat_buf</span>) {\n  return __fxstat(Number, fildes, <span class=\"supfact\">stat_buf</span>);\n}", "var": [{"name": "stat_buf", "type": "struct stat *", "pred_name": "stat_buf", "ref_name": "stat_buf", "ref_type": "struct stat *"}], "body_in_train": true}, {"repo_owner": "trakons", "repo_name": "QEMU-s5l89xx-test", "path": "trakons/QEMU-s5l89xx-test/af1c6a7c806016e0b4be61df1b946725a49d1b69c17dd3a046e2c3a5b09e7a6b", "path_in_repo": "trakons/QEMU-s5l89xx-test//ui/vnc-enc-tight.o", "objdump": "0000000000004c7c <send_jpeg_rect>:\n    4c7c:\t55                   \tpush   %rbp\n    4c7d:\t48 89 e5             \tmov    %rsp,%rbp\n    4c80:\t48 81 ec 20 03 00 00 \tsub    $0x320,%rsp\n    4c87:\t48 89 bd f8 fc ff ff \tmov    %rdi,-0x308(%rbp)\n    4c8e:\t89 b5 f4 fc ff ff    \tmov    %esi,-0x30c(%rbp)\n    4c94:\t89 95 f0 fc ff ff    \tmov    %edx,-0x310(%rbp)\n    4c9a:\t89 8d ec fc ff ff    \tmov    %ecx,-0x314(%rbp)\n    4ca0:\t44 89 85 e8 fc ff ff \tmov    %r8d,-0x318(%rbp)\n    4ca7:\t44 89 8d e4 fc ff ff \tmov    %r9d,-0x31c(%rbp)\n    4cae:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    4cb5:\t00 00 \n    4cb7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4cbb:\t31 c0                \txor    %eax,%eax\n    4cbd:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4cc4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4cc8:\t48 89 c7             \tmov    %rax,%rdi\n    4ccb:\te8 53 b4 ff ff       \tcallq  123 <ds_get_bytes_per_pixel>\n    4cd0:\t83 f8 01             \tcmp    $0x1,%eax\n    4cd3:\t75 2f                \tjne    4d04 <send_jpeg_rect+0x88>\n    4cd5:\t8b bd e8 fc ff ff    \tmov    -0x318(%rbp),%edi\n    4cdb:\t8b 8d ec fc ff ff    \tmov    -0x314(%rbp),%ecx\n    4ce1:\t8b 95 f0 fc ff ff    \tmov    -0x310(%rbp),%edx\n    4ce7:\t8b b5 f4 fc ff ff    \tmov    -0x30c(%rbp),%esi\n    4ced:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4cf4:\t41 89 f8             \tmov    %edi,%r8d\n    4cf7:\t48 89 c7             \tmov    %rax,%rdi\n    4cfa:\te8 78 eb ff ff       \tcallq  3877 <send_full_color_rect>\n    4cff:\te9 38 02 00 00       \tjmpq   4f3c <send_jpeg_rect+0x2c0>\n    4d04:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4d0b:\t48 05 d8 c2 00 00    \tadd    $0xc2d8,%rax\n    4d11:\tbe 00 08 00 00       \tmov    $0x800,%esi\n    4d16:\t48 89 c7             \tmov    %rax,%rdi\n    4d19:\te8 00 00 00 00       \tcallq  4d1e <send_jpeg_rect+0xa2>\n    4d1e:\t48 8d 85 40 fd ff ff \tlea    -0x2c0(%rbp),%rax\n    4d25:\t48 89 c7             \tmov    %rax,%rdi\n    4d28:\te8 00 00 00 00       \tcallq  4d2d <send_jpeg_rect+0xb1>\n    4d2d:\t48 89 85 f0 fd ff ff \tmov    %rax,-0x210(%rbp)\n    4d34:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n    4d3b:\tba 08 02 00 00       \tmov    $0x208,%edx\n    4d40:\tbe 3e 00 00 00       \tmov    $0x3e,%esi\n    4d45:\t48 89 c7             \tmov    %rax,%rdi\n    4d48:\te8 00 00 00 00       \tcallq  4d4d <send_jpeg_rect+0xd1>\n    4d4d:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4d54:\t48 89 85 08 fe ff ff \tmov    %rax,-0x1f8(%rbp)\n    4d5b:\t8b 85 ec fc ff ff    \tmov    -0x314(%rbp),%eax\n    4d61:\t89 85 20 fe ff ff    \tmov    %eax,-0x1e0(%rbp)\n    4d67:\t8b 85 e8 fc ff ff    \tmov    -0x318(%rbp),%eax\n    4d6d:\t89 85 24 fe ff ff    \tmov    %eax,-0x1dc(%rbp)\n    4d73:\tc7 85 28 fe ff ff 03 \tmovl   $0x3,-0x1d8(%rbp)\n    4d7a:\t00 00 00 \n    4d7d:\tc7 85 2c fe ff ff 02 \tmovl   $0x2,-0x1d4(%rbp)\n    4d84:\t00 00 00 \n    4d87:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n    4d8e:\t48 89 c7             \tmov    %rax,%rdi\n    4d91:\te8 00 00 00 00       \tcallq  4d96 <send_jpeg_rect+0x11a>\n    4d96:\t8b 8d e4 fc ff ff    \tmov    -0x31c(%rbp),%ecx\n    4d9c:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n    4da3:\tba 01 00 00 00       \tmov    $0x1,%edx\n    4da8:\t89 ce                \tmov    %ecx,%esi\n    4daa:\t48 89 c7             \tmov    %rax,%rdi\n    4dad:\te8 00 00 00 00       \tcallq  4db2 <send_jpeg_rect+0x136>\n    4db2:\t48 c7 85 20 fd ff ff \tmovq   $0x0,-0x2e0(%rbp)\n    4db9:\t00 00 00 00 \n    4dbd:\t48 c7 85 28 fd ff ff \tmovq   $0x0,-0x2d8(%rbp)\n    4dc4:\t00 00 00 00 \n    4dc8:\t48 c7 85 30 fd ff ff \tmovq   $0x0,-0x2d0(%rbp)\n    4dcf:\t00 00 00 00 \n    4dd3:\t48 8d 85 10 fd ff ff \tlea    -0x2f0(%rbp),%rax\n    4dda:\t48 89 85 18 fe ff ff \tmov    %rax,-0x1e8(%rbp)\n    4de1:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n    4de8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    4ded:\t48 89 c7             \tmov    %rax,%rdi\n    4df0:\te8 00 00 00 00       \tcallq  4df5 <send_jpeg_rect+0x179>\n    4df5:\t8b 95 ec fc ff ff    \tmov    -0x314(%rbp),%edx\n    4dfb:\t89 d0                \tmov    %edx,%eax\n    4dfd:\t01 c0                \tadd    %eax,%eax\n    4dff:\t01 d0                \tadd    %edx,%eax\n    4e01:\t48 98                \tcltq   \n    4e03:\t48 89 c7             \tmov    %rax,%rdi\n    4e06:\te8 00 00 00 00       \tcallq  4e0b <send_jpeg_rect+0x18f>\n    4e0b:\t48 89 85 08 fd ff ff \tmov    %rax,-0x2f8(%rbp)\n    4e12:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n    4e19:\t48 89 85 38 fd ff ff \tmov    %rax,-0x2c8(%rbp)\n    4e20:\tc7 85 04 fd ff ff 00 \tmovl   $0x0,-0x2fc(%rbp)\n    4e27:\t00 00 00 \n    4e2a:\teb 59                \tjmp    4e85 <send_jpeg_rect+0x209>\n    4e2c:\t8b 95 f0 fc ff ff    \tmov    -0x310(%rbp),%edx\n    4e32:\t8b 85 04 fd ff ff    \tmov    -0x2fc(%rbp),%eax\n    4e38:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    4e3b:\t8b bd ec fc ff ff    \tmov    -0x314(%rbp),%edi\n    4e41:\t8b 95 f4 fc ff ff    \tmov    -0x30c(%rbp),%edx\n    4e47:\t48 8b b5 08 fd ff ff \tmov    -0x2f8(%rbp),%rsi\n    4e4e:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4e55:\t41 89 f8             \tmov    %edi,%r8d\n    4e58:\t48 89 c7             \tmov    %rax,%rdi\n    4e5b:\te8 c5 fb ff ff       \tcallq  4a25 <rgb_prepare_row>\n    4e60:\t48 8d 8d 38 fd ff ff \tlea    -0x2c8(%rbp),%rcx\n    4e67:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n    4e6e:\tba 01 00 00 00       \tmov    $0x1,%edx\n    4e73:\t48 89 ce             \tmov    %rcx,%rsi\n    4e76:\t48 89 c7             \tmov    %rax,%rdi\n    4e79:\te8 00 00 00 00       \tcallq  4e7e <send_jpeg_rect+0x202>\n    4e7e:\t83 85 04 fd ff ff 01 \taddl   $0x1,-0x2fc(%rbp)\n    4e85:\t8b 85 04 fd ff ff    \tmov    -0x2fc(%rbp),%eax\n    4e8b:\t3b 85 e8 fc ff ff    \tcmp    -0x318(%rbp),%eax\n    4e91:\t7c 99                \tjl     4e2c <send_jpeg_rect+0x1b0>\n    4e93:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n    4e9a:\t48 89 c7             \tmov    %rax,%rdi\n    4e9d:\te8 00 00 00 00       \tcallq  4ea2 <send_jpeg_rect+0x226>\n    4ea2:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n    4ea9:\t48 89 c7             \tmov    %rax,%rdi\n    4eac:\te8 00 00 00 00       \tcallq  4eb1 <send_jpeg_rect+0x235>\n    4eb1:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n    4eb8:\t48 89 c7             \tmov    %rax,%rdi\n    4ebb:\te8 00 00 00 00       \tcallq  4ec0 <send_jpeg_rect+0x244>\n    4ec0:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4ec7:\tbe 90 00 00 00       \tmov    $0x90,%esi\n    4ecc:\t48 89 c7             \tmov    %rax,%rdi\n    4ecf:\te8 00 00 00 00       \tcallq  4ed4 <send_jpeg_rect+0x258>\n    4ed4:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4edb:\t48 8b 90 e0 c2 00 00 \tmov    0xc2e0(%rax),%rdx\n    4ee2:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4ee9:\t48 89 d6             \tmov    %rdx,%rsi\n    4eec:\t48 89 c7             \tmov    %rax,%rdi\n    4eef:\te8 ce e4 ff ff       \tcallq  33c2 <tight_send_compact_size>\n    4ef4:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4efb:\t48 8b 90 e0 c2 00 00 \tmov    0xc2e0(%rax),%rdx\n    4f02:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4f09:\t48 8b 88 e8 c2 00 00 \tmov    0xc2e8(%rax),%rcx\n    4f10:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4f17:\t48 89 ce             \tmov    %rcx,%rsi\n    4f1a:\t48 89 c7             \tmov    %rax,%rdi\n    4f1d:\te8 00 00 00 00       \tcallq  4f22 <send_jpeg_rect+0x2a6>\n    4f22:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    4f29:\t48 05 d8 c2 00 00    \tadd    $0xc2d8,%rax\n    4f2f:\t48 89 c7             \tmov    %rax,%rdi\n    4f32:\te8 00 00 00 00       \tcallq  4f37 <send_jpeg_rect+0x2bb>\n    4f37:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    4f3c:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    4f40:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    4f47:\t00 00 \n    4f49:\t74 05                \tje     4f50 <send_jpeg_rect+0x2d4>\n    4f4b:\te8 00 00 00 00       \tcallq  4f50 <send_jpeg_rect+0x2d4>\n    4f50:\tc9                   \tleaveq \n    4f51:\tc3                   \tretq   ", "code_s": "__int64 __fastcall send_jpeg_rect(_QWORD *a1, unsigned int a2, unsigned int a3,\n                                  int a4, signed int a5, unsigned int a6) {\n  signed int i;\n  _BYTE *v12;\n  char v13;\n  unsigned __int64(__fastcall * v14)(__int64);\n  __int64(__fastcall * v15)(__int64);\n  unsigned __int64(__fastcall * v16)(__int64);\n  _BYTE *v17;\n  char v18[Number];\n  __int64 v19[Number];\n  int v20;\n  int v21;\n  int v22;\n  int v23;\n  unsigned __int64 v24;\n  v24 = __readfsqword(Number);\n  if ((unsigned int)ds_get_bytes_per_pixel(a1[Number]) == Number)\n    return send_full_color_rect((__int64)a1, a2, a3, a4, a5);\n  buffer_reserve(a1 + Number, Number L);\n  v19[Number] = jpeg_std_error(v18);\n  jpeg_CreateCompress(v19, Number L, Number L);\n  v19[Number] = (__int64)a1;\n  v20 = a4;\n  v21 = a5;\n  v22 = Number;\n  v23 = Number;\n  jpeg_set_defaults(v19);\n  jpeg_set_quality(v19, a6, Number L);\n  v14 = jpeg_init_destination;\n  v15 = jpeg_empty_output_buffer;\n  v16 = jpeg_term_destination;\n  v19[Number] = (__int64)&v13;\n  jpeg_start_compress(v19, Number L);\n  v12 = (_BYTE *)qemu_malloc(Number * a4);\n  v17 = v12;\n  for (i = Number; i < a5; ++i) {\n    rgb_prepare_row((__int64)a1, v12, a2, a3 + i, a4);\n    jpeg_write_scanlines(v19, &v17, Number L);\n  }\n  qemu_free(v12);\n  jpeg_finish_compress(v19);\n  jpeg_destroy_compress(v19);\n  vnc_write_u8(a1, Number L);\n  tight_send_compact_size((__int64)a1, a1[Number]);\n  vnc_write(a1, a1[Number], a1[Number]);\n  buffer_reset(a1 + Number);\n  return Number L;\n}", "code_t": "int __cdecl send_jpeg_rect(VncState_0 *vs, int x, int y, int w, int h,\n                           int quality) {\n  int dy;\n  JSAMPLE *buf;\n  jpeg_destination_mgr <span class=\"supfact\">manager</span>;\n  JSAMPROW row[Number];\n  jpeg_error_mgr <span class=\"supfact\">jerr</span>;\n  jpeg_compress_struct <span class=\"supfact\">cinfo</span>;\n  unsigned __int64 v17;\n  v17 = __readfsqword(Number);\n  if (ds_get_bytes_per_pixel(vs->ds) == Number)\n    return send_full_color_rect(vs, x, y, w, h);\n  buffer_reserve(&vs->tight.jpeg, Number L);\n  <span class=\"supfact\">cinfo</span>.err =\n      (jpeg_error_mgr *)jpeg_std_error(&<span class=\"supfact\">jerr</span>);\n  jpeg_CreateCompress(&<span class=\"supfact\">cinfo</span>, Number L, Number L);\n  <span class=\"supfact\">cinfo</span>.client_data = vs;\n  <span class=\"supfact\">cinfo</span>.image_width = w;\n  <span class=\"supfact\">cinfo</span>.image_height = h;\n  <span class=\"supfact\">cinfo</span>.input_components = Number;\n  <span class=\"supfact\">cinfo</span>.in_color_space = JCS_RGB;\n  jpeg_set_defaults(&<span class=\"supfact\">cinfo</span>);\n  jpeg_set_quality(&<span class=\"supfact\">cinfo</span>, (unsigned int)quality, Number L);\n  <span class=\"supfact\">manager</span>.init_destination =\n      (void (*)(j_compress_ptr))jpeg_init_destination;\n  <span class=\"supfact\">manager</span>.empty_output_buffer =\n      (boolean(*)(j_compress_ptr))jpeg_empty_output_buffer;\n  <span class=\"supfact\">manager</span>.term_destination =\n      (void (*)(j_compress_ptr))jpeg_term_destination;\n  <span class=\"supfact\">cinfo</span>.dest = &<span class=\"supfact\">manager</span>;\n  jpeg_start_compress(&<span class=\"supfact\">cinfo</span>, Number L);\n  buf = (JSAMPLE *)qemu_malloc(Number * w);\n  row[Number] = buf;\n  for (dy = Number; dy < h; ++dy) {\n    rgb_prepare_row(vs, buf, x, y + dy, w);\n    jpeg_write_scanlines(&<span class=\"supfact\">cinfo</span>, row, Number L);\n  }\n  qemu_free(buf);\n  jpeg_finish_compress(&<span class=\"supfact\">cinfo</span>);\n  jpeg_destroy_compress(&<span class=\"supfact\">cinfo</span>);\n  vnc_write_u8(vs, Number L);\n  tight_send_compact_size(vs, vs->tight.jpeg.offset);\n  vnc_write(vs, vs->tight.jpeg.buffer, vs->tight.jpeg.offset);\n  buffer_reset(&vs->tight.jpeg);\n  return Number;\n}", "var": [{"name": "v13", "type": "disappear", "pred_name": "", "ref_name": "manager", "ref_type": "struct jpeg_destination_mgr { JOCTET * next_output_byte; size_t free_in_buffer; void (*)(j_compress_ptr) init_destination; boolean (*)(j_compress_ptr) empty_output_buffer; void (*)(j_compress_ptr) term_destination; }"}, {"name": "v18", "type": "struct jpeg_error_mgr { void (*)(j_common_ptr) error_exit; void (*)(j_common_ptr, int) emit_message; void (*)(j_common_ptr) output_message; void (*)(j_common_ptr, char *) format_message; void (*)(j_common_ptr) reset_error_mgr; int msg_code; $9ABC9F8FBE040ED0EE3085A2A6D6B68F msg_parm; int trace_level; __int64 num_warnings; const char *const * jpeg_message_table; int last_jpeg_message; PADDING (4); const char *const * addon_message_table; int first_addon_message; int last_addon_message; }", "pred_name": "jerr", "ref_name": "jerr", "ref_type": "struct jpeg_error_mgr { void (*)(j_common_ptr) error_exit; void (*)(j_common_ptr, int) emit_message; void (*)(j_common_ptr) output_message; void (*)(j_common_ptr, char *) format_message; void (*)(j_common_ptr) reset_error_mgr; int msg_code; $9ABC9F8FBE040ED0EE3085A2A6D6B68F msg_parm; int trace_level; __int64 num_warnings; const char *const * jpeg_message_table; int last_jpeg_message; PADDING (4); const char *const * addon_message_table; int first_addon_message; int last_addon_message; }"}, {"name": "v19", "type": "struct jpeg_compress_struct { jpeg_error_mgr * err; jpeg_memory_mgr * mem; jpeg_progress_mgr * progress; void * client_data; boolean is_decompressor; int global_state; jpeg_destination_mgr * dest; JDIMENSION image_width; JDIMENSION image_height; int input_components; J_COLOR_SPACE in_color_space; double input_gamma; int data_precision; int num_components; J_COLOR_SPACE jpeg_color_space; PADDING (4); jpeg_component_info * comp_info; JQUANT_TBL *[4] quant_tbl_ptrs; JHUFF_TBL *[4] dc_huff_tbl_ptrs; JHUFF_TBL *[4] ac_huff_tbl_ptrs; UINT8[16] arith_dc_L; UINT8[16] arith_dc_U; UINT8[16] arith_ac_K; int num_scans; PADDING (4); const jpeg_scan_info * scan_info; boolean raw_data_in; boolean arith_code; boolean optimize_coding; boolean CCIR601_sampling; int smoothing_factor; J_DCT_METHOD dct_method; unsigned int restart_interval; int restart_in_rows; boolean write_JFIF_header; UINT8 JFIF_major_version; UINT8 JFIF_minor_version; UINT8 density_unit; PADDING (1); UINT16 X_density; UINT16 Y_density; boolean write_Adobe_marker; JDIMENSION next_scanline; boolean progressive_mode; int max_h_samp_factor; int max_v_samp_factor; JDIMENSION total_iMCU_rows; int comps_in_scan; jpeg_component_info *[4] cur_comp_info; JDIMENSION MCUs_per_row; JDIMENSION MCU_rows_in_scan; int blocks_in_MCU; int[10] MCU_membership; int Ss; int Se; int Ah; int Al; PADDING (4); jpeg_comp_master * master; jpeg_c_main_controller * main; jpeg_c_prep_controller * prep; jpeg_c_coef_controller * coef; jpeg_marker_writer * marker; jpeg_color_converter * cconvert; jpeg_downsampler * downsample; jpeg_forward_dct * fdct; jpeg_entropy_encoder * entropy; jpeg_scan_info * script_space; int script_space_size; PADDING (4); }", "pred_name": "cinfo", "ref_name": "cinfo", "ref_type": "struct jpeg_compress_struct { jpeg_error_mgr * err; jpeg_memory_mgr * mem; jpeg_progress_mgr * progress; void * client_data; boolean is_decompressor; int global_state; jpeg_destination_mgr * dest; JDIMENSION image_width; JDIMENSION image_height; int input_components; J_COLOR_SPACE in_color_space; double input_gamma; int data_precision; int num_components; J_COLOR_SPACE jpeg_color_space; PADDING (4); jpeg_component_info * comp_info; JQUANT_TBL *[4] quant_tbl_ptrs; JHUFF_TBL *[4] dc_huff_tbl_ptrs; JHUFF_TBL *[4] ac_huff_tbl_ptrs; UINT8[16] arith_dc_L; UINT8[16] arith_dc_U; UINT8[16] arith_ac_K; int num_scans; PADDING (4); const jpeg_scan_info * scan_info; boolean raw_data_in; boolean arith_code; boolean optimize_coding; boolean CCIR601_sampling; int smoothing_factor; J_DCT_METHOD dct_method; unsigned int restart_interval; int restart_in_rows; boolean write_JFIF_header; UINT8 JFIF_major_version; UINT8 JFIF_minor_version; UINT8 density_unit; PADDING (1); UINT16 X_density; UINT16 Y_density; boolean write_Adobe_marker; JDIMENSION next_scanline; boolean progressive_mode; int max_h_samp_factor; int max_v_samp_factor; JDIMENSION total_iMCU_rows; int comps_in_scan; jpeg_component_info *[4] cur_comp_info; JDIMENSION MCUs_per_row; JDIMENSION MCU_rows_in_scan; int blocks_in_MCU; int[10] MCU_membership; int Ss; int Se; int Ah; int Al; PADDING (4); jpeg_comp_master * master; jpeg_c_main_controller * main; jpeg_c_prep_controller * prep; jpeg_c_coef_controller * coef; jpeg_marker_writer * marker; jpeg_color_converter * cconvert; jpeg_downsampler * downsample; jpeg_forward_dct * fdct; jpeg_entropy_encoder * entropy; jpeg_scan_info * script_space; int script_space_size; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "Eudemony", "repo_name": "note4_kernel_test", "path": "Eudemony/note4_kernel_test/8bf508dc8cc45f1c69906b65284f7f89435dae0a93574c4af6a7b4459f49abae", "path_in_repo": "Eudemony/note4_kernel_test/tools/perf/builtin-lock.o", "objdump": "0000000000001be9 <read_events>:\n    1be9:\t55                   \tpush   %rbp\n    1bea:\t48 89 e5             \tmov    %rsp,%rbp\n    1bed:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n    1bf1:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1bf8:\t00 00 \n    1bfa:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1bfe:\t31 c0                \txor    %eax,%eax\n    1c00:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    1c04:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c09:\tb9 0f 00 00 00       \tmov    $0xf,%ecx\n    1c0e:\t48 89 d7             \tmov    %rdx,%rdi\n    1c11:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    1c14:\t48 c7 45 80 00 00 00 \tmovq   $0x0,-0x80(%rbp)\n    1c1b:\t00 \n    1c1c:\t48 c7 45 98 00 00 00 \tmovq   $0x0,-0x68(%rbp)\n    1c23:\t00 \n    1c24:\tc6 45 f0 01          \tmovb   $0x1,-0x10(%rbp)\n    1c28:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c2f <read_events+0x46>\n    1c2f:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    1c33:\t49 89 d0             \tmov    %rdx,%r8\n    1c36:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1c3b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1c40:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c45:\t48 89 c7             \tmov    %rax,%rdi\n    1c48:\te8 00 00 00 00       \tcallq  1c4d <read_events+0x64>\n    1c4d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1c54 <read_events+0x6b>\n    1c54:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c5b <read_events+0x72>\n    1c5b:\t48 85 c0             \ttest   %rax,%rax\n    1c5e:\t75 1b                \tjne    1c7b <read_events+0x92>\n    1c60:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c65:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1c6a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c6f:\te8 00 00 00 00       \tcallq  1c74 <read_events+0x8b>\n    1c74:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1c79:\teb 4e                \tjmp    1cc9 <read_events+0xe0>\n    1c7b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c82 <read_events+0x99>\n    1c82:\tba 04 00 00 00       \tmov    $0x4,%edx\n    1c87:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c8c:\t48 89 c7             \tmov    %rax,%rdi\n    1c8f:\te8 00 00 00 00       \tcallq  1c94 <read_events+0xab>\n    1c94:\t85 c0                \ttest   %eax,%eax\n    1c96:\t74 1b                \tje     1cb3 <read_events+0xca>\n    1c98:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c9d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1ca2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ca7:\te8 00 00 00 00       \tcallq  1cac <read_events+0xc3>\n    1cac:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1cb1:\teb 16                \tjmp    1cc9 <read_events+0xe0>\n    1cb3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1cba <read_events+0xd1>\n    1cba:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    1cbe:\t48 89 d6             \tmov    %rdx,%rsi\n    1cc1:\t48 89 c7             \tmov    %rax,%rdi\n    1cc4:\te8 00 00 00 00       \tcallq  1cc9 <read_events+0xe0>\n    1cc9:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1ccd:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    1cd4:\t00 00 \n    1cd6:\t74 05                \tje     1cdd <read_events+0xf4>\n    1cd8:\te8 00 00 00 00       \tcallq  1cdd <read_events+0xf4>\n    1cdd:\tc9                   \tleaveq \n    1cde:\tc3                   \tretq   ", "code_s": "__int64 read_events() {\n  __int64 result;\n  __int64 v1[Number];\n  v1[Number] = __readfsqword(Number);\n  memset(v1, Number, Number);\n  v1[Number] = (__int64)process_sample_event;\n  v1[Number] = (__int64)&perf_event__process_comm;\n  LOBYTE(v1[Number]) = Number;\n  session = perf_session__new(input_name, Number L, Number L, Number L, v1);\n  if (session) {\n    if ((unsigned int)_perf_session__set_tracepoints_handlers(\n            session, &lock_tracepoints, Number L)) {\n      eprintf(Number L, String);\n      result = Number;\n    } else {\n      result = perf_session__process_events(session, v1);\n    }\n  } else {\n    eprintf(Number L, String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl read_events() {\n  int result;\n  perf_tool <span class=\"supfact\">eops</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  memset(&<span class=\"supfact\">eops</span>, Number, sizeof(<span class=\"supfact\">eops</span>));\n  <span class=\"supfact\">eops</span>.sample = (event_sample)process_sample_event;\n  <span class=\"supfact\">eops</span>.comm = (event_op)&perf_event__process_comm;\n  <span class=\"supfact\">eops</span>.ordered_samples = Number;\n  session = (perf_session *)perf_session__new(input_name, Number L, Number L,\n                                              Number L, &<span class=\"supfact\">eops</span>);\n  if (session) {\n    if ((unsigned int)_perf_session__set_tracepoints_handlers(\n            session, lock_tracepoints, Number L)) {\n      eprintf(Number L, String);\n      result = Number;\n    } else {\n      result = perf_session__process_events(session, &<span class=\"supfact\">eops</span>);\n    }\n  } else {\n    eprintf(Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v1", "type": "struct perf_tool { event_sample sample; event_sample read; event_op mmap; event_op comm; event_op fork; event_op exit; event_op lost; event_op throttle; event_op unthrottle; event_attr_op attr; event_synth_op tracing_data; event_simple_op event_type; event_op2 finished_round; event_op2 build_id; bool ordered_samples; bool ordering_requires_timestamps; PADDING (6); }", "pred_name": "eops", "ref_name": "eops", "ref_type": "struct perf_tool { event_sample sample; event_sample read; event_op mmap; event_op comm; event_op fork; event_op exit; event_op lost; event_op throttle; event_op unthrottle; event_attr_op attr; event_synth_op tracing_data; event_simple_op event_type; event_op2 finished_round; event_op2 build_id; bool ordered_samples; bool ordering_requires_timestamps; PADDING (6); }"}], "body_in_train": true}, {"repo_owner": "franziskuskiefer", "repo_name": "nss-benchmark", "path": "franziskuskiefer/nss-benchmark/71d3b443d1732395e32dd7f5c54d703494c3586ced7efb8a5685017cee5e721d", "path_in_repo": "franziskuskiefer/nss-benchmark/supercop-20171218/ntl-10.5.0/src/quad_float.o", "objdump": "0000000000000000 <_ZN3NTL4convERNS_10quad_floatERKNS_2ZZE.cold>:\n   0:\t48 8d 7c 24 08       \tlea    0x8(%rsp),%rdi\n   5:\tc5 f8 77             \tvzeroupper \n   8:\te8 00 00 00 00       \tcallq  d <_ZN3NTL4convERNS_10quad_floatERKNS_2ZZE.cold+0xd>\n   d:\t48 89 ef             \tmov    %rbp,%rdi\n  10:\te8 00 00 00 00       \tcallq  15 <_ZN3NTL4convERNS_2ZZERKNS_10quad_floatE.cold>", "code_s": "void __fastcall __noreturn NTL conv(__int64 a1, __int64 a2, __int64 a3,\n                                    __int64 a4, __int64 a5, __int64 a6,\n                                    char a7) {\n  struct _Unwind_Exception *v7;\n  __asm { vzeroupper}\n  NTL ZZWatcher ~ZZWatcher((NTL ZZWatcher *)&a7);\n  Unwind_Resume(v7);\n}", "code_t": "void __fastcall __noreturn NTL conv(__int64 a1, __int64 a2, __int64 a3,\n                                    __int64 a4, __int64 a5, __int64 a6,\n                                    NTL ZZWatcher <span class=\"supfact\">a7</span>) {\n  struct _Unwind_Exception *<span class=\"supfact\">v7</span>;\n  __asm { vzeroupper}\n  NTL ZZWatcher ~ZZWatcher(&<span class=\"supfact\">a7</span>);\n  Unwind_Resume(<span class=\"supfact\">v7</span>);\n}", "var": [{"name": "a7", "type": "char", "pred_name": "a7", "ref_name": "a7", "ref_type": "struct NTL::ZZWatcher { NTL::ZZ * watched; }"}, {"name": "v7", "type": "struct _Unwind_Exception *", "pred_name": "v7", "ref_name": "v7", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "foss-for-synopsys-dwc-arc-processors", "repo_name": "lmbench", "path": "foss-for-synopsys-dwc-arc-processors/lmbench/592c6ac07a90d46d265722d9da4323af338dc65a3b446b8fa544dcfcec7c5cc9", "path_in_repo": "foss-for-synopsys-dwc-arc-processors/lmbench//bin/x86_64-linux-gnu/lat_fifo", "objdump": "00000000004035ae <start>:\n  4035ae:\t55                   \tpush   %rbp\n  4035af:\t48 89 e5             \tmov    %rsp,%rbp\n  4035b2:\t48 83 ec 10          \tsub    $0x10,%rsp\n  4035b6:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  4035ba:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4035bf:\t75 08                \tjne    4035c9 <start+0x1b>\n  4035c1:\t48 c7 45 f8 40 b2 40 \tmovq   $0x40b240,-0x8(%rbp)\n  4035c8:\t00 \n  4035c9:\tbe 80 b2 40 00       \tmov    $0x40b280,%esi\n  4035ce:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4035d3:\te8 38 dc ff ff       \tcallq  401210 <getrusage@plt>\n  4035d8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4035dc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4035e1:\t48 89 c7             \tmov    %rax,%rdi\n  4035e4:\te8 d7 da ff ff       \tcallq  4010c0 <gettimeofday@plt>\n  4035e9:\t90                   \tnop\n  4035ea:\tc9                   \tleaveq \n  4035eb:\tc3                   \tretq   ", "code_s": "int __fastcall start(struct timeval *a1) {\n  struct timeval *tv;\n  tv = a1;\n  if (!a1)\n    tv = (struct timeval *)&start_tv;\n  getrusage(RUSAGE_SELF, &ru_start);\n  return gettimeofday(tv, Number L);\n}", "code_t": "void __cdecl start(timeval *tv) {\n  struct timeval *<span class=\"supfact\">tva</span>;\n  <span class=\"supfact\">tva</span> = tv;\n  if (!tv)\n    <span class=\"supfact\">tva</span> = &start_tv;\n  getrusage(RUSAGE_SELF, &ru_start);\n  gettimeofday(<span class=\"supfact\">tva</span>, Number L);\n}", "var": [{"name": "tv", "type": "struct timeval *", "pred_name": "tva", "ref_name": "tva", "ref_type": "struct timeval *"}], "body_in_train": true}, {"repo_owner": "fireeye", "repo_name": "rvmi-kvm", "path": "fireeye/rvmi-kvm/151c66f438f128bb1447756b8d0c897315031d3cf4fb67b657073c7afb97c6a9", "path_in_repo": "fireeye/rvmi-kvm/tools/power/cpupower/utils/cpupower.o", "objdump": "0000000000000475 <main>:\n 475:\t55                   \tpush   %rbp\n 476:\t48 89 e5             \tmov    %rsp,%rbp\n 479:\t48 81 ec 50 02 00 00 \tsub    $0x250,%rsp\n 480:\t89 bd bc fd ff ff    \tmov    %edi,-0x244(%rbp)\n 486:\t48 89 b5 b0 fd ff ff \tmov    %rsi,-0x250(%rbp)\n 48d:\tbf 53 00 00 00       \tmov    $0x53,%edi\n 492:\te8 00 00 00 00       \tcallq  497 <main+0x22>\n 497:\t89 c7                \tmov    %eax,%edi\n 499:\te8 00 00 00 00       \tcallq  49e <main+0x29>\n 49e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 4a5 <main+0x30>\n 4a5:\t8b 85 bc fd ff ff    \tmov    -0x244(%rbp),%eax\n 4ab:\t83 e8 01             \tsub    $0x1,%eax\n 4ae:\t89 85 bc fd ff ff    \tmov    %eax,-0x244(%rbp)\n 4b4:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n 4bb:\t48 83 c0 08          \tadd    $0x8,%rax\n 4bf:\t48 89 85 b0 fd ff ff \tmov    %rax,-0x250(%rbp)\n 4c6:\t48 8d 95 b0 fd ff ff \tlea    -0x250(%rbp),%rdx\n 4cd:\t48 8d 85 bc fd ff ff \tlea    -0x244(%rbp),%rax\n 4d4:\t48 89 d6             \tmov    %rdx,%rsi\n 4d7:\t48 89 c7             \tmov    %rax,%rdi\n 4da:\te8 1a fd ff ff       \tcallq  1f9 <handle_options>\n 4df:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n 4e6:\t48 8b 00             \tmov    (%rax),%rax\n 4e9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 4ed:\t8b 85 bc fd ff ff    \tmov    -0x244(%rbp),%eax\n 4f3:\t85 c0                \ttest   %eax,%eax\n 4f5:\t7f 0f                \tjg     506 <main+0x91>\n 4f7:\te8 04 fb ff ff       \tcallq  0 <print_help>\n 4fc:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 501:\te9 02 02 00 00       \tjmpq   708 <main+0x293>\n 506:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 50b:\tbf 06 00 00 00       \tmov    $0x6,%edi\n 510:\te8 00 00 00 00       \tcallq  515 <main+0xa0>\n 515:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 51a:\te8 00 00 00 00       \tcallq  51f <main+0xaa>\n 51f:\t8b 85 bc fd ff ff    \tmov    -0x244(%rbp),%eax\n 525:\t83 f8 01             \tcmp    $0x1,%eax\n 528:\t7e 4d                \tjle    577 <main+0x102>\n 52a:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n 531:\t48 83 c0 08          \tadd    $0x8,%rax\n 535:\t48 8b 00             \tmov    (%rax),%rax\n 538:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 53d:\t48 89 c7             \tmov    %rax,%rdi\n 540:\te8 00 00 00 00       \tcallq  545 <main+0xd0>\n 545:\t85 c0                \ttest   %eax,%eax\n 547:\t75 2e                \tjne    577 <main+0x102>\n 549:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n 550:\t48 8b 95 b0 fd ff ff \tmov    -0x250(%rbp),%rdx\n 557:\t48 83 c2 08          \tadd    $0x8,%rdx\n 55b:\t48 8b 00             \tmov    (%rax),%rax\n 55e:\t48 89 02             \tmov    %rax,(%rdx)\n 561:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 568:\t00 \n 569:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n 570:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 574:\t48 89 10             \tmov    %rdx,(%rax)\n 577:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 57c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 581:\te8 00 00 00 00       \tcallq  586 <main+0x111>\n 586:\te8 00 00 00 00       \tcallq  58b <main+0x116>\n 58b:\t85 c0                \ttest   %eax,%eax\n 58d:\t0f 94 c0             \tsete   %al\n 590:\t0f b6 c0             \tmovzbl %al,%eax\n 593:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 599 <main+0x124>\n 599:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 59f <main+0x12a>\n 59f:\t85 c0                \ttest   %eax,%eax\n 5a1:\t0f 84 81 00 00 00    \tje     628 <main+0x1b3>\n 5a7:\t48 8d 85 c0 fd ff ff \tlea    -0x240(%rbp),%rax\n 5ae:\t48 89 c7             \tmov    %rax,%rdi\n 5b1:\te8 00 00 00 00       \tcallq  5b6 <main+0x141>\n 5b6:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 5b9:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n 5bd:\t75 69                \tjne    628 <main+0x1b3>\n 5bf:\t48 8d 85 c0 fd ff ff \tlea    -0x240(%rbp),%rax\n 5c6:\t48 05 04 01 00 00    \tadd    $0x104,%rax\n 5cc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 5d1:\t48 89 c7             \tmov    %rax,%rdi\n 5d4:\te8 00 00 00 00       \tcallq  5d9 <main+0x164>\n 5d9:\t85 c0                \ttest   %eax,%eax\n 5db:\t75 4b                \tjne    628 <main+0x1b3>\n 5dd:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n 5e4:\t48 89 c6             \tmov    %rax,%rsi\n 5e7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 5ec:\te8 00 00 00 00       \tcallq  5f1 <main+0x17c>\n 5f1:\t85 c0                \ttest   %eax,%eax\n 5f3:\t74 33                \tje     628 <main+0x1b3>\n 5f5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 5fa:\te8 00 00 00 00       \tcallq  5ff <main+0x18a>\n 5ff:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 602:\t75 24                \tjne    628 <main+0x1b3>\n 604:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 609:\te8 00 00 00 00       \tcallq  60e <main+0x199>\n 60e:\t48 89 c2             \tmov    %rax,%rdx\n 611:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 618 <main+0x1a3>\n 618:\t48 89 d6             \tmov    %rdx,%rsi\n 61b:\t48 89 c7             \tmov    %rax,%rdi\n 61e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 623:\te8 00 00 00 00       \tcallq  628 <main+0x1b3>\n 628:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n 62f:\te9 c0 00 00 00       \tjmpq   6f4 <main+0x27f>\n 634:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 637:\t48 89 d0             \tmov    %rdx,%rax\n 63a:\t48 01 c0             \tadd    %rax,%rax\n 63d:\t48 01 d0             \tadd    %rdx,%rax\n 640:\t48 c1 e0 03          \tshl    $0x3,%rax\n 644:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 64a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 64e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 652:\t48 8b 00             \tmov    (%rax),%rax\n 655:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 659:\t48 89 d6             \tmov    %rdx,%rsi\n 65c:\t48 89 c7             \tmov    %rax,%rdi\n 65f:\te8 00 00 00 00       \tcallq  664 <main+0x1ef>\n 664:\t85 c0                \ttest   %eax,%eax\n 666:\t74 09                \tje     671 <main+0x1fc>\n 668:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n 66c:\te9 83 00 00 00       \tjmpq   6f4 <main+0x27f>\n 671:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 677 <main+0x202>\n 677:\t85 c0                \ttest   %eax,%eax\n 679:\t75 3a                \tjne    6b5 <main+0x240>\n 67b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 67f:\t8b 40 10             \tmov    0x10(%rax),%eax\n 682:\t85 c0                \ttest   %eax,%eax\n 684:\t74 2f                \tje     6b5 <main+0x240>\n 686:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 68b:\te8 00 00 00 00       \tcallq  690 <main+0x21b>\n 690:\t48 89 c1             \tmov    %rax,%rcx\n 693:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 69a <main+0x225>\n 69a:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 69e:\t48 89 ce             \tmov    %rcx,%rsi\n 6a1:\t48 89 c7             \tmov    %rax,%rdi\n 6a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 6a9:\te8 00 00 00 00       \tcallq  6ae <main+0x239>\n 6ae:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 6b3:\teb 53                \tjmp    708 <main+0x293>\n 6b5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 6b9:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n 6bd:\t48 8b 95 b0 fd ff ff \tmov    -0x250(%rbp),%rdx\n 6c4:\t8b 85 bc fd ff ff    \tmov    -0x244(%rbp),%eax\n 6ca:\t48 89 d6             \tmov    %rdx,%rsi\n 6cd:\t89 c7                \tmov    %eax,%edi\n 6cf:\tff d1                \tcallq  *%rcx\n 6d1:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 6d4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6db <main+0x266>\n 6db:\t48 85 c0             \ttest   %rax,%rax\n 6de:\t74 0f                \tje     6ef <main+0x27a>\n 6e0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6e7 <main+0x272>\n 6e7:\t48 89 c7             \tmov    %rax,%rdi\n 6ea:\te8 00 00 00 00       \tcallq  6ef <main+0x27a>\n 6ef:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 6f2:\teb 14                \tjmp    708 <main+0x293>\n 6f4:\t83 7d f4 07          \tcmpl   $0x7,-0xc(%rbp)\n 6f8:\t0f 86 36 ff ff ff    \tjbe    634 <main+0x1bf>\n 6fe:\te8 fd f8 ff ff       \tcallq  0 <print_help>\n 703:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 708:\tc9                   \tleaveq \n 709:\tc3                   \tretq   \n", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  unsigned int v3;\n  __uid_t v4;\n  char *v5;\n  char *v6;\n  int result;\n  const char **v8;\n  int v9;\n  struct utsname name;\n  struct stat v11;\n  char **v12;\n  int v13;\n  unsigned int i;\n  char *s2;\n  v3 = sysconf(Number);\n  cpus_chosen = bitmask_alloc(v3);\n  v9 = argc - Number;\n  v8 = argv + Number;\n  handle_options(&v9, &v8);\n  s2 = (char *)*v8;\n  if (v9 > Number) {\n    setlocale(Number, &locale);\n    textdomain(String);\n    if (v9 > Number && !strcmp(v8[Number], String)) {\n      v8[Number] = *v8;\n      s2 = String;\n      *v8 = String;\n    }\n    get_cpu_info(Number L, cpupower_cpu_info);\n    v4 = geteuid();\n    run_as_root = v4 == Number;\n    if (!v4) {\n      v13 = uname(&name);\n      if (!v13 && !strcmp(name.machine, String) && stat(String, &v11) &&\n          system(String) == Number) {\n        v5 = gettext(String);\n        fprintf(stderr, v5);\n      }\n    }\n    for (i = Number; i <= Number; ++i) {\n      v12 = &(&commands)[Number * i];\n      if (!strcmp(*v12, s2)) {\n        if (run_as_root || !*((_DWORD *)v12 + Number)) {\n          v13 = ((__int64(__fastcall *)(_QWORD, const char **))v12[Number])(\n              (unsigned int)v9, v8);\n          if (cpus_chosen)\n            bitmask_free(cpus_chosen);\n          result = v13;\n        } else {\n          v6 = gettext(String);\n          fprintf(stderr, v6, s2);\n          result = Number;\n        }\n        return result;\n      }\n    }\n  }\n  print_help();\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  unsigned int v3;\n  __uid_t v4;\n  char *v5;\n  char *v6;\n  int result;\n  const char **argva;\n  int argca;\n  utsname <span class=\"supfact\">uts</span>;\n  stat <span class=\"supfact\">statbuf</span>;\n  cmd_struct *p;\n  unsigned int ret;\n  unsigned int i;\n  const char *cmd;\n  v3 = sysconf(Number);\n  *(_QWORD *)&cpus_chosen.vendor = bitmask_alloc(v3);\n  argca = argc - Number;\n  argva = argv + Number;\n  handle_options(&argca, &argva);\n  cmd = *argva;\n  if (argca > Number) {\n    setlocale(Number, &locale);\n    textdomain(String);\n    if (argca > Number && !strcmp(argva[Number], String)) {\n      argva[Number] = *argva;\n      cmd = String;\n      *argva = String;\n    }\n    get_cpu_info(Number L, cpupower_cpu_info_0);\n    v4 = geteuid();\n    LODWORD(run_as_root) = v4 == Number;\n    if (!v4) {\n      ret = uname(&<span class=\"supfact\">uts</span>);\n      if (!ret && !strcmp(<span class=\"supfact\">uts</span>.machine, String) &&\n          stat_0(String, &<span class=\"supfact\">statbuf</span>) &&\n          system(String) == Number) {\n        v5 = gettext(String);\n        fprintf(stderr, v5);\n      }\n    }\n    for (i = Number; i <= Number; ++i) {\n      p = &commands[i];\n      if (!strcmp(p->cmd, cmd)) {\n        if ((_DWORD)run_as_root || !p->needs_root) {\n          ret = p->main(argca, argva);\n          if (*(_QWORD *)&cpus_chosen.vendor)\n            bitmask_free(*(_QWORD *)&cpus_chosen.vendor);\n          result = ret;\n        } else {\n          v6 = gettext(String);\n          fprintf(stderr, v6, cmd);\n          result = Number;\n        }\n        return result;\n      }\n    }\n  }\n  print_help();\n  return Number;\n}", "var": [{"name": "name", "type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] domainname; }", "pred_name": "uts", "ref_name": "uts", "ref_type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] domainname; }"}, {"name": "v11", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "statbuf", "ref_name": "statbuf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "slwilliams", "repo_name": "stegasis", "path": "slwilliams/stegasis/f23d957c41da5f5faf04a2c27c2fd6c0491edd0a5d6c845f437fab6d96f104f7", "path_in_repo": "slwilliams/stegasis/lib/ffmpeg/libavfilter/af_join.o", "objdump": "00000000000005f8 <join_init>:\n     5f8:\t53                   \tpush   %rbx\n     5f9:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n     600:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     605:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     60a:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n     60e:\t48 89 84 24 a0 00 00 \tmov    %rax,0xa0(%rsp)\n     615:\t00 \n     616:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     61d:\t00 \n     61e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     622:\t48 89 c7             \tmov    %rax,%rdi\n     625:\te8 00 00 00 00       \tcallq  62a <join_init+0x32>\n     62a:\t48 8b 94 24 a0 00 00 \tmov    0xa0(%rsp),%rdx\n     631:\t00 \n     632:\t48 89 42 20          \tmov    %rax,0x20(%rdx)\n     636:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     63d:\t00 \n     63e:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     642:\t48 85 c0             \ttest   %rax,%rax\n     645:\t75 35                \tjne    67c <join_init+0x84>\n     647:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     64e:\t00 \n     64f:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n     653:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     658:\t48 89 d1             \tmov    %rdx,%rcx\n     65b:\tba 00 00 00 00       \tmov    $0x0,%edx\n     660:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     665:\t48 89 c7             \tmov    %rax,%rdi\n     668:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     66d:\te8 00 00 00 00       \tcallq  672 <join_init+0x7a>\n     672:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n     677:\te9 62 02 00 00       \tjmpq   8de <join_init+0x2e6>\n     67c:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     683:\t00 \n     684:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     688:\t48 89 c7             \tmov    %rax,%rdi\n     68b:\te8 00 00 00 00       \tcallq  690 <join_init+0x98>\n     690:\t48 8b 94 24 a0 00 00 \tmov    0xa0(%rsp),%rdx\n     697:\t00 \n     698:\t89 42 28             \tmov    %eax,0x28(%rdx)\n     69b:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     6a2:\t00 \n     6a3:\t8b 40 28             \tmov    0x28(%rax),%eax\n     6a6:\t48 98                \tcltq   \n     6a8:\tbe 18 00 00 00       \tmov    $0x18,%esi\n     6ad:\t48 89 c7             \tmov    %rax,%rdi\n     6b0:\te8 4b f9 ff ff       \tcallq  0 <av_mallocz_array>\n     6b5:\t48 8b 94 24 a0 00 00 \tmov    0xa0(%rsp),%rdx\n     6bc:\t00 \n     6bd:\t48 89 42 30          \tmov    %rax,0x30(%rdx)\n     6c1:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     6c8:\t00 \n     6c9:\t8b 40 28             \tmov    0x28(%rax),%eax\n     6cc:\t48 98                \tcltq   \n     6ce:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     6d3:\t48 89 c7             \tmov    %rax,%rdi\n     6d6:\te8 25 f9 ff ff       \tcallq  0 <av_mallocz_array>\n     6db:\t48 8b 94 24 a0 00 00 \tmov    0xa0(%rsp),%rdx\n     6e2:\t00 \n     6e3:\t48 89 42 40          \tmov    %rax,0x40(%rdx)\n     6e7:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     6ee:\t00 \n     6ef:\t8b 40 08             \tmov    0x8(%rax),%eax\n     6f2:\t48 98                \tcltq   \n     6f4:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     6f9:\t48 89 c7             \tmov    %rax,%rdi\n     6fc:\te8 ff f8 ff ff       \tcallq  0 <av_mallocz_array>\n     701:\t48 8b 94 24 a0 00 00 \tmov    0xa0(%rsp),%rdx\n     708:\t00 \n     709:\t48 89 42 38          \tmov    %rax,0x38(%rdx)\n     70d:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     714:\t00 \n     715:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     719:\t48 85 c0             \ttest   %rax,%rax\n     71c:\t74 22                \tje     740 <join_init+0x148>\n     71e:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     725:\t00 \n     726:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n     72a:\t48 85 c0             \ttest   %rax,%rax\n     72d:\t74 11                \tje     740 <join_init+0x148>\n     72f:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     736:\t00 \n     737:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     73b:\t48 85 c0             \ttest   %rax,%rax\n     73e:\t75 0a                \tjne    74a <join_init+0x152>\n     740:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     745:\te9 94 01 00 00       \tjmpq   8de <join_init+0x2e6>\n     74a:\tc7 84 24 ac 00 00 00 \tmovl   $0x0,0xac(%rsp)\n     751:\t00 00 00 00 \n     755:\teb 7c                \tjmp    7d3 <join_init+0x1db>\n     757:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     75e:\t00 \n     75f:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n     763:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     76a:\t00 \n     76b:\t48 8b 70 30          \tmov    0x30(%rax),%rsi\n     76f:\t8b 84 24 ac 00 00 00 \tmov    0xac(%rsp),%eax\n     776:\t48 63 d0             \tmovslq %eax,%rdx\n     779:\t48 89 d0             \tmov    %rdx,%rax\n     77c:\t48 01 c0             \tadd    %rax,%rax\n     77f:\t48 01 d0             \tadd    %rdx,%rax\n     782:\t48 c1 e0 03          \tshl    $0x3,%rax\n     786:\t48 8d 1c 06          \tlea    (%rsi,%rax,1),%rbx\n     78a:\t8b 84 24 ac 00 00 00 \tmov    0xac(%rsp),%eax\n     791:\t89 c6                \tmov    %eax,%esi\n     793:\t48 89 cf             \tmov    %rcx,%rdi\n     796:\te8 00 00 00 00       \tcallq  79b <join_init+0x1a3>\n     79b:\t48 89 43 10          \tmov    %rax,0x10(%rbx)\n     79f:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     7a6:\t00 \n     7a7:\t48 8b 48 30          \tmov    0x30(%rax),%rcx\n     7ab:\t8b 84 24 ac 00 00 00 \tmov    0xac(%rsp),%eax\n     7b2:\t48 63 d0             \tmovslq %eax,%rdx\n     7b5:\t48 89 d0             \tmov    %rdx,%rax\n     7b8:\t48 01 c0             \tadd    %rax,%rax\n     7bb:\t48 01 d0             \tadd    %rdx,%rax\n     7be:\t48 c1 e0 03          \tshl    $0x3,%rax\n     7c2:\t48 01 c8             \tadd    %rcx,%rax\n     7c5:\tc7 00 ff ff ff ff    \tmovl   $0xffffffff,(%rax)\n     7cb:\t83 84 24 ac 00 00 00 \taddl   $0x1,0xac(%rsp)\n     7d2:\t01 \n     7d3:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     7da:\t00 \n     7db:\t8b 40 28             \tmov    0x28(%rax),%eax\n     7de:\t39 84 24 ac 00 00 00 \tcmp    %eax,0xac(%rsp)\n     7e5:\t0f 8c 6c ff ff ff    \tjl     757 <join_init+0x15f>\n     7eb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     7f0:\t48 89 c7             \tmov    %rax,%rdi\n     7f3:\te8 d8 f9 ff ff       \tcallq  1d0 <parse_maps>\n     7f8:\t89 84 24 9c 00 00 00 \tmov    %eax,0x9c(%rsp)\n     7ff:\t83 bc 24 9c 00 00 00 \tcmpl   $0x0,0x9c(%rsp)\n     806:\t00 \n     807:\t79 0c                \tjns    815 <join_init+0x21d>\n     809:\t8b 84 24 9c 00 00 00 \tmov    0x9c(%rsp),%eax\n     810:\te9 c9 00 00 00       \tjmpq   8de <join_init+0x2e6>\n     815:\tc7 84 24 ac 00 00 00 \tmovl   $0x0,0xac(%rsp)\n     81c:\t00 00 00 00 \n     820:\te9 9c 00 00 00       \tjmpq   8c1 <join_init+0x2c9>\n     825:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n     82a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     82f:\tb9 0d 00 00 00       \tmov    $0xd,%ecx\n     834:\t48 89 d7             \tmov    %rdx,%rdi\n     837:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n     83a:\t8b 94 24 ac 00 00 00 \tmov    0xac(%rsp),%edx\n     841:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n     846:\t89 d1                \tmov    %edx,%ecx\n     848:\tba 00 00 00 00       \tmov    $0x0,%edx\n     84d:\tbe 20 00 00 00       \tmov    $0x20,%esi\n     852:\t48 89 c7             \tmov    %rax,%rdi\n     855:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     85a:\te8 00 00 00 00       \tcallq  85f <join_init+0x267>\n     85f:\tc7 44 24 38 01 00 00 \tmovl   $0x1,0x38(%rsp)\n     866:\t00 \n     867:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n     86c:\t48 89 c7             \tmov    %rax,%rdi\n     86f:\te8 00 00 00 00       \tcallq  874 <join_init+0x27c>\n     874:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n     879:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n     87e:\t48 85 c0             \ttest   %rax,%rax\n     881:\t75 07                \tjne    88a <join_init+0x292>\n     883:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     888:\teb 54                \tjmp    8de <join_init+0x2e6>\n     88a:\t48 c7 44 24 70 00 00 \tmovq   $0x0,0x70(%rsp)\n     891:\t00 00 \n     893:\tc7 84 24 90 00 00 00 \tmovl   $0x1,0x90(%rsp)\n     89a:\t01 00 00 00 \n     89e:\t8b 8c 24 ac 00 00 00 \tmov    0xac(%rsp),%ecx\n     8a5:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n     8aa:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     8af:\t89 ce                \tmov    %ecx,%esi\n     8b1:\t48 89 c7             \tmov    %rax,%rdi\n     8b4:\te8 8e f7 ff ff       \tcallq  47 <ff_insert_inpad>\n     8b9:\t83 84 24 ac 00 00 00 \taddl   $0x1,0xac(%rsp)\n     8c0:\t01 \n     8c1:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n     8c8:\t00 \n     8c9:\t8b 40 08             \tmov    0x8(%rax),%eax\n     8cc:\t39 84 24 ac 00 00 00 \tcmp    %eax,0xac(%rsp)\n     8d3:\t0f 8c 4c ff ff ff    \tjl     825 <join_init+0x22d>\n     8d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     8de:\t48 81 c4 b0 00 00 00 \tadd    $0xb0,%rsp\n     8e5:\t5b                   \tpop    %rbx\n     8e6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall join_init(__int64 a1) {\n  __int64 result;\n  __int64 v2;\n  char s[Number];\n  __int64 v4[Number];\n  unsigned int v5;\n  __int64 v6;\n  signed int i;\n  v6 = *(_QWORD *)(a1 + Number);\n  *(_QWORD *)(v6 + Number) = av_get_channel_layout(*(_QWORD *)(v6 + Number));\n  if (*(_QWORD *)(v6 + Number)) {\n    *(_DWORD *)(v6 + Number) =\n        av_get_channel_layout_nb_channels(*(_QWORD *)(v6 + Number));\n    *(_QWORD *)(v6 + Number) = av_mallocz_array(*(int *)(v6 + Number), Number);\n    *(_QWORD *)(v6 + Number) = av_mallocz_array(*(int *)(v6 + Number), Number);\n    *(_QWORD *)(v6 + Number) = av_mallocz_array(*(int *)(v6 + Number), Number);\n    if (*(_QWORD *)(v6 + Number) && *(_QWORD *)(v6 + Number) &&\n        *(_QWORD *)(v6 + Number)) {\n      for (i = Number; i < *(_DWORD *)(v6 + Number); ++i) {\n        v2 = *(_QWORD *)(v6 + Number) + Number L * i;\n        *(_QWORD *)(v2 + Number) = av_channel_layout_extract_channel(\n            *(_QWORD *)(v6 + Number), (unsigned int)i);\n        *(_DWORD *)(*(_QWORD *)(v6 + Number) + Number L * i) = Number;\n      }\n      v5 = parse_maps(a1);\n      if ((v5 & Number) == Number) {\n        for (i = Number; i < *(_DWORD *)(v6 + Number); ++i) {\n          memset(v4, Number, sizeof(v4));\n          snprintf(s, Number, String, (unsigned int)i);\n          LODWORD(v4[Number]) = Number;\n          v4[Number] = av_strdup(s);\n          if (!v4[Number])\n            return Number L;\n          v4[Number] = (__int64)filter_frame;\n          LODWORD(v4[Number]) = Number;\n          ff_insert_inpad(a1, i, (__int64)v4);\n        }\n        result = Number L;\n      } else {\n        result = v5;\n      }\n    } else {\n      result = Number L;\n    }\n  } else {\n    av_log(a1, Number L, String, *(const char **)(v6 + Number));\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl join_init(AVFilterContext_0 *ctx) {\n  int result;\n  ChannelMap_0 *v2;\n  char name[Number];\n  AVFilterPad_0 <span class=\"supfact\">pad</span>;\n  int ret;\n  JoinContext_0 *s;\n  int i;\n  s = (JoinContext_0 *)ctx->priv;\n  s->channel_layout = av_get_channel_layout(s->channel_layout_str);\n  if (s->channel_layout) {\n    s->nb_channels = av_get_channel_layout_nb_channels(s->channel_layout);\n    s->channels = (ChannelMap_0 *)av_mallocz_array(s->nb_channels, Number);\n    s->buffers = (AVBufferRef_0 **)av_mallocz_array(s->nb_channels, Number);\n    s->input_frames = (AVFrame_0 **)av_mallocz_array(s->inputs, Number);\n    if (s->channels && s->buffers && s->input_frames) {\n      for (i = Number; i < s->nb_channels; ++i) {\n        v2 = &s->channels[i];\n        v2->out_channel = av_channel_layout_extract_channel(s->channel_layout,\n                                                            (unsigned int)i);\n        s->channels[i].input = Number;\n      }\n      ret = parse_maps(ctx);\n      if (ret >= Number) {\n        for (i = Number; i < s->inputs; ++i) {\n          memset(&<span class=\"supfact\">pad</span>, Number, sizeof(<span class=\"supfact\">pad</span>));\n          snprintf(name, Number, String, (unsigned int)i);\n          <span class=\"supfact\">pad</span>.type = AVMEDIA_TYPE_AUDIO;\n          <span class=\"supfact\">pad</span>.name = (const char *)av_strdup(name);\n          if (!<span class=\"supfact\">pad</span>.name)\n            return Number;\n          <span class=\"supfact\">pad</span>.filter_frame =\n              (int (*)(AVFilterLink_0 *, AVFrame_0 *))filter_frame;\n          <span class=\"supfact\">pad</span>.needs_fifo = Number;\n          ff_insert_inpad(ctx, i, &<span class=\"supfact\">pad</span>);\n        }\n        result = Number;\n      } else {\n        result = ret;\n      }\n    } else {\n      result = Number;\n    }\n  } else {\n    av_log(ctx, Number L, String, s->channel_layout_str);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct AVFilterPad_0 { const char * name; AVMediaType type; int min_perms; int rej_perms; PADDING (4); int (*)(AVFilterLink_0 *, AVFilterBufferRef_0 *) start_frame; AVFrame_0 *(*)(AVFilterLink_0 *, int, int) get_video_buffer; AVFrame_0 *(*)(AVFilterLink_0 *, int) get_audio_buffer; int (*)(AVFilterLink_0 *) end_frame; int (*)(AVFilterLink_0 *, int, int, int) draw_slice; int (*)(AVFilterLink_0 *, AVFrame_0 *) filter_frame; int (*)(AVFilterLink_0 *) poll_frame; int (*)(AVFilterLink_0 *) request_frame; int (*)(AVFilterLink_0 *) config_props; int needs_fifo; int needs_writable; }", "pred_name": "pad", "ref_name": "pad", "ref_type": "struct AVFilterPad_0 { const char * name; AVMediaType type; int min_perms; int rej_perms; PADDING (4); int (*)(AVFilterLink_0 *, AVFilterBufferRef_0 *) start_frame; AVFrame_0 *(*)(AVFilterLink_0 *, int, int) get_video_buffer; AVFrame_0 *(*)(AVFilterLink_0 *, int) get_audio_buffer; int (*)(AVFilterLink_0 *) end_frame; int (*)(AVFilterLink_0 *, int, int, int) draw_slice; int (*)(AVFilterLink_0 *, AVFrame_0 *) filter_frame; int (*)(AVFilterLink_0 *) poll_frame; int (*)(AVFilterLink_0 *) request_frame; int (*)(AVFilterLink_0 *) config_props; int needs_fifo; int needs_writable; }"}], "body_in_train": false}, {"repo_owner": "mrayy", "repo_name": "ChampionRun", "path": "mrayy/ChampionRun/0a9c47e8b201ac60965703b9a99ab314553f8f24e98fe99a2d6774e94af78a44", "path_in_repo": "mrayy/ChampionRun/cocos2dx/proj.linux/obj/release/menu_nodes/CCMenuItem.o", "objdump": "0000000000000230 <_ZN7cocos2d17MenuItemAtlasFont6createEPKcS2_iicPNS_6ObjectEMS3_FvS4_E.cold>:\n 230:\t4c 89 e7             \tmov    %r12,%rdi\n 233:\te8 00 00 00 00       \tcallq  238 <_ZN7cocos2d17MenuItemAtlasFont6createEPKcS2_iicPNS_6ObjectEMS3_FvS4_E.cold+0x8>\n 238:\t48 89 ef             \tmov    %rbp,%rdi\n 23b:\te8 00 00 00 00       \tcallq  240 <_ZN7cocos2d12MenuItemFont14initWithStringEPKcPNS_6ObjectEMS3_FvS4_E.cold>", "code_s": "void __fastcall __noreturn cocos2d MenuItemAtlasFont create() {\n  struct _Unwind_Exception *v0;\n  void *v1;\n  operator delete(v1);\n  Unwind_Resume(v0);\n}", "code_t": "void __fastcall __noreturn cocos2d MenuItemAtlasFont create() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  void *v1;\n  operator delete(v1);\n  Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "var": [{"name": "v0", "type": "struct _Unwind_Exception *", "pred_name": "v0", "ref_name": "v0", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": true}, {"repo_owner": "othiym23", "repo_name": "nonsense-benchmark", "path": "othiym23/nonsense-benchmark/7416f0a390f1987d8cce3a1b021de8bfd48d294c3c5cff8044a94b207efcf183", "path_in_repo": "othiym23/nonsense-benchmark/c/ben-pthreads/sha2.o", "objdump": "0000000000000b9f <sha512>:\n     b9f:\t55                   \tpush   %rbp\n     ba0:\t48 89 e5             \tmov    %rsp,%rbp\n     ba3:\t48 81 ec 70 01 00 00 \tsub    $0x170,%rsp\n     baa:\t48 89 bd a8 fe ff ff \tmov    %rdi,-0x158(%rbp)\n     bb1:\t89 b5 a4 fe ff ff    \tmov    %esi,-0x15c(%rbp)\n     bb7:\t48 89 95 98 fe ff ff \tmov    %rdx,-0x168(%rbp)\n     bbe:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n     bc5:\t48 89 c7             \tmov    %rax,%rdi\n     bc8:\te8 00 00 00 00       \tcallq  bcd <sha512+0x2e>\n     bcd:\t8b 95 a4 fe ff ff    \tmov    -0x15c(%rbp),%edx\n     bd3:\t48 8b 8d a8 fe ff ff \tmov    -0x158(%rbp),%rcx\n     bda:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n     be1:\t48 89 ce             \tmov    %rcx,%rsi\n     be4:\t48 89 c7             \tmov    %rax,%rdi\n     be7:\te8 00 00 00 00       \tcallq  bec <sha512+0x4d>\n     bec:\t48 8b 95 98 fe ff ff \tmov    -0x168(%rbp),%rdx\n     bf3:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n     bfa:\t48 89 d6             \tmov    %rdx,%rsi\n     bfd:\t48 89 c7             \tmov    %rax,%rdi\n     c00:\te8 00 00 00 00       \tcallq  c05 <sha512+0x66>\n     c05:\t90                   \tnop\n     c06:\tc9                   \tleaveq \n     c07:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sha512(__int64 a1, unsigned int a2, __int64 a3) {\n  char v5[Number];\n  sha512_init(v5);\n  sha512_update(v5, a1, a2);\n  return sha512_final(v5, a3);\n}", "code_t": "void __cdecl sha512(const unsigned __int8 *message, unsigned int len,\n                    unsigned __int8 *digest) {\n  sha512_ctx <span class=\"supfact\">ctx</span>;\n  sha512_init(&<span class=\"supfact\">ctx</span>);\n  sha512_update(&<span class=\"supfact\">ctx</span>, message, len);\n  sha512_final(&<span class=\"supfact\">ctx</span>, digest);\n}", "var": [{"name": "v5", "type": "__unk__", "pred_name": "ctx", "ref_name": "ctx", "ref_type": "struct sha512_ctx { unsigned int tot_len; unsigned int len; unsigned __int8[256] block; uint64[8] h; }"}], "body_in_train": true}, {"repo_owner": "gaara4896", "repo_name": "ffmpeg-mirror", "path": "gaara4896/ffmpeg-mirror/afdbb965a1e42f00c0bdf8e200a3575a435c118902cd8969176eebbdaed1d383", "path_in_repo": "gaara4896/ffmpeg-mirror//libavdevice/xcbgrab.o", "objdump": "00000000000001cd <xcbgrab_frame>:\n     1cd:\t48 83 ec 58          \tsub    $0x58,%rsp\n     1d1:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     1d6:\t48 89 34 24          \tmov    %rsi,(%rsp)\n     1da:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     1df:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     1e3:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n     1e8:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     1ed:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     1f1:\t8b 00                \tmov    (%rax),%eax\n     1f3:\t89 44 24 44          \tmov    %eax,0x44(%rsp)\n     1f7:\t48 c7 44 24 18 00 00 \tmovq   $0x0,0x18(%rsp)\n     1fe:\t00 00 \n     200:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     205:\t8b 40 3c             \tmov    0x3c(%rax),%eax\n     208:\t0f b7 f0             \tmovzwl %ax,%esi\n     20b:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     210:\t8b 40 38             \tmov    0x38(%rax),%eax\n     213:\t44 0f b7 c0          \tmovzwl %ax,%r8d\n     217:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     21c:\t8b 40 34             \tmov    0x34(%rax),%eax\n     21f:\t0f bf f8             \tmovswl %ax,%edi\n     222:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     227:\t8b 40 30             \tmov    0x30(%rax),%eax\n     22a:\t0f bf c8             \tmovswl %ax,%ecx\n     22d:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     232:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     236:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n     23a:\t6a ff                \tpushq  $0xffffffffffffffff\n     23c:\t56                   \tpush   %rsi\n     23d:\t45 89 c1             \tmov    %r8d,%r9d\n     240:\t41 89 f8             \tmov    %edi,%r8d\n     243:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     248:\t48 89 c7             \tmov    %rax,%rdi\n     24b:\te8 00 00 00 00       \tcallq  250 <xcbgrab_frame+0x83>\n     250:\t48 83 c4 10          \tadd    $0x10,%rsp\n     254:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n     258:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     25d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     261:\t48 8d 54 24 18       \tlea    0x18(%rsp),%rdx\n     266:\t8b 4c 24 24          \tmov    0x24(%rsp),%ecx\n     26a:\t89 ce                \tmov    %ecx,%esi\n     26c:\t48 89 c7             \tmov    %rax,%rdi\n     26f:\te8 00 00 00 00       \tcallq  274 <xcbgrab_frame+0xa7>\n     274:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n     279:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     27e:\t48 85 c0             \ttest   %rax,%rax\n     281:\t74 75                \tje     2f8 <xcbgrab_frame+0x12b>\n     283:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     288:\t0f b6 40 0a          \tmovzbl 0xa(%rax),%eax\n     28c:\t0f b6 f8             \tmovzbl %al,%edi\n     28f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     294:\t0f b7 40 08          \tmovzwl 0x8(%rax),%eax\n     298:\t0f b7 f0             \tmovzwl %ax,%esi\n     29b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     2a0:\t8b 48 04             \tmov    0x4(%rax),%ecx\n     2a3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     2a8:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n     2ac:\t44 0f b7 c8          \tmovzwl %ax,%r9d\n     2b0:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     2b5:\t0f b6 40 01          \tmovzbl 0x1(%rax),%eax\n     2b9:\t44 0f b6 c0          \tmovzbl %al,%r8d\n     2bd:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     2c2:\t0f b6 00             \tmovzbl (%rax),%eax\n     2c5:\t0f b6 d0             \tmovzbl %al,%edx\n     2c8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     2cd:\t48 83 ec 08          \tsub    $0x8,%rsp\n     2d1:\t57                   \tpush   %rdi\n     2d2:\t56                   \tpush   %rsi\n     2d3:\t51                   \tpush   %rcx\n     2d4:\t89 d1                \tmov    %edx,%ecx\n     2d6:\tba 00 00 00 00       \tmov    $0x0,%edx\n     2db:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     2e0:\t48 89 c7             \tmov    %rax,%rdi\n     2e3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     2e8:\te8 00 00 00 00       \tcallq  2ed <xcbgrab_frame+0x120>\n     2ed:\t48 83 c4 20          \tadd    $0x20,%rsp\n     2f1:\tb8 f3 ff ff ff       \tmov    $0xfffffff3,%eax\n     2f6:\teb 7f                \tjmp    377 <xcbgrab_frame+0x1aa>\n     2f8:\t48 83 7c 24 38 00    \tcmpq   $0x0,0x38(%rsp)\n     2fe:\t75 07                \tjne    307 <xcbgrab_frame+0x13a>\n     300:\tb8 f5 ff ff ff       \tmov    $0xfffffff5,%eax\n     305:\teb 70                \tjmp    377 <xcbgrab_frame+0x1aa>\n     307:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n     30c:\t48 89 c7             \tmov    %rax,%rdi\n     30f:\te8 00 00 00 00       \tcallq  314 <xcbgrab_frame+0x147>\n     314:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n     319:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n     31e:\t48 89 c7             \tmov    %rax,%rdi\n     321:\te8 00 00 00 00       \tcallq  326 <xcbgrab_frame+0x159>\n     326:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n     32a:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n     32e:\t48 8b 04 24          \tmov    (%rsp),%rax\n     332:\t89 d6                \tmov    %edx,%esi\n     334:\t48 89 c7             \tmov    %rax,%rdi\n     337:\te8 00 00 00 00       \tcallq  33c <xcbgrab_frame+0x16f>\n     33c:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n     340:\t83 7c 24 28 00       \tcmpl   $0x0,0x28(%rsp)\n     345:\t75 1f                \tjne    366 <xcbgrab_frame+0x199>\n     347:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n     34b:\t48 63 d0             \tmovslq %eax,%rdx\n     34e:\t48 8b 04 24          \tmov    (%rsp),%rax\n     352:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     356:\t48 8b 4c 24 30       \tmov    0x30(%rsp),%rcx\n     35b:\t48 89 ce             \tmov    %rcx,%rsi\n     35e:\t48 89 c7             \tmov    %rax,%rdi\n     361:\te8 00 00 00 00       \tcallq  366 <xcbgrab_frame+0x199>\n     366:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n     36b:\t48 89 c7             \tmov    %rax,%rdi\n     36e:\te8 00 00 00 00       \tcallq  373 <xcbgrab_frame+0x1a6>\n     373:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n     377:\t48 83 c4 58          \tadd    $0x58,%rsp\n     37b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall xcbgrab_frame(__int64 a1, __int64 a2) {\n  __int64 result;\n  xcb_generic_error_t *e;\n  xcb_get_image_cookie_t cookie;\n  unsigned int v5;\n  unsigned int v6;\n  void *src;\n  xcb_get_image_reply_t *R;\n  xcb_drawable_t drawable;\n  __int64 v10;\n  v10 = *(_QWORD *)(a1 + Number);\n  drawable = **(_DWORD **)(v10 + Number);\n  e = Number L;\n  cookie.sequence =\n      xcb_get_image(*(xcb_connection_t **)(v10 + Number), Number, drawable,\n                    *(_DWORD *)(v10 + Number), *(_DWORD *)(v10 + Number),\n                    *(_DWORD *)(v10 + Number), *(_DWORD *)(v10 + Number),\n                    Number)\n          .sequence;\n  R = xcb_get_image_reply(*(xcb_connection_t **)(v10 + Number), cookie, &e);\n  if (e) {\n    av_log(a1, Number L, String, e->response_type, e->error_code, e->sequence,\n           e->resource_id, e->minor_code, e->major_code);\n    result = Number L;\n  } else if (R) {\n    src = xcb_get_image_data(R);\n    v6 = xcb_get_image_data_length(R);\n    v5 = av_new_packet(a2, v6);\n    if (!v5)\n      memcpy(*(void **)(a2 + Number), src, (int)v6);\n    free(R);\n    result = v5;\n  } else {\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl xcbgrab_frame(AVFormatContext_0 *s, AVPacket_0 *pkt) {\n  int result;\n  xcb_generic_error_t *e;\n  xcb_get_image_cookie_t_0 <span class=\"supfact\">iq</span>;\n  int ret;\n  int length;\n  uint8_t *data;\n  xcb_get_image_reply_t_0 *img;\n  xcb_drawable_t drawable;\n  XCBGrabContext_0 *c;\n  c = (XCBGrabContext_0 *)s->priv_data;\n  drawable = c->screen->root;\n  e = Number L;\n  <span class=\"supfact\">iq</span>.sequence = xcb_get_image(c->conn, Number, drawable, c->x,\n                                              c->y, c->width, c->height, Number)\n                                    .sequence;\n  img = xcb_get_image_reply(c->conn, <span class=\"supfact\">iq</span>, &e);\n  if (e) {\n    av_log(s, Number L, String, e->response_type, e->error_code, e->sequence,\n           e->resource_id, e->minor_code, e->major_code);\n    result = Number;\n  } else if (img) {\n    data = xcb_get_image_data(img);\n    length = xcb_get_image_data_length(img);\n    ret = av_new_packet(pkt, (unsigned int)length);\n    if (!ret)\n      memcpy(pkt->data, data, length);\n    free(img);\n    result = ret;\n  } else {\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "cookie", "type": "__unk__", "pred_name": "iq", "ref_name": "iq", "ref_type": "struct xcb_get_image_cookie_t_0 { unsigned int sequence; }"}], "body_in_train": true}, {"repo_owner": "DhirajMS", "repo_name": "kernel-Moto-C-plus", "path": "DhirajMS/kernel-Moto-C-plus/445692d5de941fb9158e01e90105b4dc584565013364d8b784c6a422709612fb", "path_in_repo": "DhirajMS/kernel-Moto-C-plus/tools/perf/builtin-script.o", "objdump": "0000000000002e51 <is_directory>:\n    2e51:\t55                   \tpush   %rbp\n    2e52:\t48 89 e5             \tmov    %rsp,%rbp\n    2e55:\t48 81 ec b0 10 00 00 \tsub    $0x10b0,%rsp\n    2e5c:\t48 89 bd 58 ef ff ff \tmov    %rdi,-0x10a8(%rbp)\n    2e63:\t48 89 b5 50 ef ff ff \tmov    %rsi,-0x10b0(%rbp)\n    2e6a:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2e71:\t00 00 \n    2e73:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2e77:\t31 c0                \txor    %eax,%eax\n    2e79:\t48 8b 85 50 ef ff ff \tmov    -0x10b0(%rbp),%rax\n    2e80:\t48 8d 48 13          \tlea    0x13(%rax),%rcx\n    2e84:\t48 8b 95 58 ef ff ff \tmov    -0x10a8(%rbp),%rdx\n    2e8b:\t48 8d 85 f0 ef ff ff \tlea    -0x1010(%rbp),%rax\n    2e92:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2e97:\t48 89 c7             \tmov    %rax,%rdi\n    2e9a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2e9f:\te8 00 00 00 00       \tcallq  2ea4 <is_directory+0x53>\n    2ea4:\t48 8d 95 60 ef ff ff \tlea    -0x10a0(%rbp),%rdx\n    2eab:\t48 8d 85 f0 ef ff ff \tlea    -0x1010(%rbp),%rax\n    2eb2:\t48 89 d6             \tmov    %rdx,%rsi\n    2eb5:\t48 89 c7             \tmov    %rax,%rdi\n    2eb8:\te8 00 00 00 00       \tcallq  2ebd <is_directory+0x6c>\n    2ebd:\t85 c0                \ttest   %eax,%eax\n    2ebf:\t74 07                \tje     2ec8 <is_directory+0x77>\n    2ec1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2ec6:\teb 16                \tjmp    2ede <is_directory+0x8d>\n    2ec8:\t8b 85 78 ef ff ff    \tmov    -0x1088(%rbp),%eax\n    2ece:\t25 00 f0 00 00       \tand    $0xf000,%eax\n    2ed3:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n    2ed8:\t0f 94 c0             \tsete   %al\n    2edb:\t0f b6 c0             \tmovzbl %al,%eax\n    2ede:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    2ee2:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    2ee9:\t00 00 \n    2eeb:\t74 05                \tje     2ef2 <is_directory+0xa1>\n    2eed:\te8 00 00 00 00       \tcallq  2ef2 <is_directory+0xa1>\n    2ef2:\tc9                   \tleaveq \n    2ef3:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall is_directory(const char *a1, __int64 a2) {\n  _BOOL8 result;\n  struct stat64 v3;\n  char s[Number];\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  sprintf(s, String, a1, (const char *)(a2 + Number));\n  if (stat64(s, &v3))\n    result = Number L;\n  else\n    result = (v3.st_mode & Number) == Number;\n  return result;\n}", "code_t": "int __cdecl is_directory(const char *base_path, const dirent *dent) {\n  int result;\n  stat <span class=\"supfact\">st</span>;\n  char path[Number];\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  sprintf(path, String, base_path, dent->d_name);\n  if (stat64(path, (struct stat64 *)&<span class=\"supfact\">st</span>))\n    result = Number;\n  else\n    result = (<span class=\"supfact\">st</span>.st_mode & Number) == Number;\n  return result;\n}", "var": [{"name": "v3", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "st", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "daniloegea", "repo_name": "freebsd", "path": "daniloegea/freebsd/aeae63fb709049f5d1786436080f6ac9bed86c1793e6a23aea7af49a9d02c439", "path_in_repo": "daniloegea/freebsd/contrib/groff/src/roff/troff/input.o", "objdump": "0000000000010190 <_Z16hyphenation_codev>:\n   10190:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 10196 <_Z16hyphenation_codev+0x6>\n   10196:\t53                   \tpush   %rbx\n   10197:\t83 f8 13             \tcmp    $0x13,%eax\n   1019a:\t75 19                \tjne    101b5 <_Z16hyphenation_codev+0x25>\n   1019c:\t0f 1f 40 00          \tnopl   0x0(%rax)\n   101a0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   101a5:\te8 00 00 00 00       \tcallq  101aa <_Z16hyphenation_codev+0x1a>\n   101aa:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 101b0 <_Z16hyphenation_codev+0x20>\n   101b0:\t83 f8 13             \tcmp    $0x13,%eax\n   101b3:\t74 eb                \tje     101a0 <_Z16hyphenation_codev+0x10>\n   101b5:\t83 f8 1c             \tcmp    $0x1c,%eax\n   101b8:\t74 66                \tje     10220 <_Z16hyphenation_codev+0x90>\n   101ba:\t83 f8 0d             \tcmp    $0xd,%eax\n   101bd:\t74 61                \tje     10220 <_Z16hyphenation_codev+0x90>\n   101bf:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   101c4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   101c9:\te8 00 00 00 00       \tcallq  101ce <_Z16hyphenation_codev+0x3e>\n   101ce:\t48 89 c3             \tmov    %rax,%rbx\n   101d1:\t48 85 c0             \ttest   %rax,%rax\n   101d4:\t74 4a                \tje     10220 <_Z16hyphenation_codev+0x90>\n   101d6:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n   101dd:\t00 00 00 \n   101e0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   101e5:\te8 00 00 00 00       \tcallq  101ea <_Z16hyphenation_codev+0x5a>\n   101ea:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 101f0 <_Z16hyphenation_codev+0x60>\n   101f0:\t83 f8 13             \tcmp    $0x13,%eax\n   101f3:\t74 eb                \tje     101e0 <_Z16hyphenation_codev+0x50>\n   101f5:\t0f b6 15 00 00 00 00 \tmovzbl 0x0(%rip),%edx        # 101fc <_Z16hyphenation_codev+0x6c>\n   101fc:\t83 f8 02             \tcmp    $0x2,%eax\n   101ff:\t75 04                \tjne    10205 <_Z16hyphenation_codev+0x75>\n   10201:\t84 d2                \ttest   %dl,%dl\n   10203:\t75 2b                \tjne    10230 <_Z16hyphenation_codev+0xa0>\n   10205:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   1020b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   10210:\tbf 02 00 00 00       \tmov    $0x2,%edi\n   10215:\t4c 89 c1             \tmov    %r8,%rcx\n   10218:\t4c 89 c2             \tmov    %r8,%rdx\n   1021b:\te8 80 0e ff ff       \tcallq  10a0 <_ZL8do_error10error_typePKcRK6errargS4_S4_>\n   10220:\t5b                   \tpop    %rbx\n   10221:\te9 ea c1 ff ff       \tjmpq   c410 <_Z9skip_linev>\n   10226:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n   1022d:\t00 00 00 \n   10230:\t0f b6 c2             \tmovzbl %dl,%eax\n   10233:\t80 b8 00 00 00 00 00 \tcmpb   $0x0,0x0(%rax)\n   1023a:\t75 2e                \tjne    1026a <_Z16hyphenation_codev+0xda>\n   1023c:\t48 8b 03             \tmov    (%rbx),%rax\n   1023f:\t88 53 19             \tmov    %dl,0x19(%rbx)\n   10242:\t48 85 c0             \ttest   %rax,%rax\n   10245:\t74 09                \tje     10250 <_Z16hyphenation_codev+0xc0>\n   10247:\t80 78 1f 00          \tcmpb   $0x0,0x1f(%rax)\n   1024b:\t74 03                \tje     10250 <_Z16hyphenation_codev+0xc0>\n   1024d:\t88 50 19             \tmov    %dl,0x19(%rax)\n   10250:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   10255:\te8 00 00 00 00       \tcallq  1025a <_Z16hyphenation_codev+0xca>\n   1025a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 10260 <_Z16hyphenation_codev+0xd0>\n   10260:\t83 f8 13             \tcmp    $0x13,%eax\n   10263:\t74 eb                \tje     10250 <_Z16hyphenation_codev+0xc0>\n   10265:\te9 4b ff ff ff       \tjmpq   101b5 <_Z16hyphenation_codev+0x25>\n   1026a:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   10270:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   10275:\tbf 02 00 00 00       \tmov    $0x2,%edi\n   1027a:\t4c 89 c1             \tmov    %r8,%rcx\n   1027d:\t4c 89 c2             \tmov    %r8,%rdx\n   10280:\te8 1b 0e ff ff       \tcallq  10a0 <_ZL8do_error10error_typePKcRK6errargS4_S4_>\n   10285:\teb 99                \tjmp    10220 <_Z16hyphenation_codev+0x90>\n   10287:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n   1028e:\t00 00 ", "code_s": "void __fastcall hyphenation_code(__int64 *a1, const char *a2) {\n  int i;\n  __int64 v3;\n  int v4;\n  unsigned __int8 v5;\n  __int64 v6;\n  for (i = *((_DWORD *)&tok + Number); i == Number;\n       i = *((_DWORD *)&tok + Number)) {\n    a1 = &tok;\n    token next((token *)&tok, (__int64)a2);\n  }\n  while (i != Number) {\n    if (i == Number)\n      break;\n    a2 = (_BYTE *)(input_iterator fill + Number);\n    a1 = &tok;\n    v3 = token get_char((token *)&tok, Number);\n    if (!v3)\n      break;\n    do {\n      token next((token *)&tok, Number L);\n      v4 = *((_DWORD *)&tok + Number);\n    } while (v4 == Number);\n    v5 = *((_BYTE *)&tok + Number);\n    if (v4 != Number || !v5) {\n      a2 = String;\n      a1 = (_QWORD *)(input_iterator fill + Number);\n      do_error((input_stack *)((char *)input_iterator fill + Number), String,\n               (const errarg *)&empty_errarg, (const errarg *)&empty_errarg,\n               (const errarg *)&empty_errarg);\n      break;\n    }\n    if (*((_BYTE *)&csdigit + v5)) {\n      a2 = String;\n      a1 = (_QWORD *)(input_iterator fill + Number);\n      do_error((input_stack *)((char *)input_iterator fill + Number), String,\n               (const errarg *)&empty_errarg, (const errarg *)&empty_errarg,\n               (const errarg *)&empty_errarg);\n      break;\n    }\n    v6 = *(_QWORD *)v3;\n    *(_BYTE *)(v3 + Number) = v5;\n    if (v6 && *(_BYTE *)(v6 + Number))\n      *(_BYTE *)(v6 + Number) = v5;\n    do {\n      a1 = &tok;\n      token next((token *)&tok, Number L);\n      i = *((_DWORD *)&tok + Number);\n    } while (i == Number);\n  }\n  skip_line((__int64)a1, (__int64)a2);\n}", "code_t": "void __cdecl hyphenation_code() {\n  symbol <span class=\"supfact\">v0</span>;\n  token token_type i;\n  charinfo *v2;\n  token token_type v3;\n  unsigned __int8 v4;\n  charinfo *v5;\n  for (i = tok.type; i == TOKEN_SPACE; i = tok.type)\n    token next(&tok, <span class=\"supfact\">v0</span>);\n  while (i != TOKEN_EOF) {\n    if (i == TOKEN_NEWLINE)\n      break;\n    v2 = token get_char(&tok, Number);\n    if (!v2)\n      break;\n    do {\n      token next(&tok, (symbol)Number L);\n      v3 = tok.type;\n    } while (v3 == TOKEN_SPACE);\n    v4 = tok.c;\n    if (v3 != TOKEN_CHAR || !v4) {\n      do_error(ERROR, String, &empty_errarg, &empty_errarg, &empty_errarg);\n      break;\n    }\n    if (*((_BYTE *)&csdigit + v4)) {\n      do_error(ERROR, String, &empty_errarg, &empty_errarg, &empty_errarg);\n      break;\n    }\n    v5 = v2->translation;\n    v2->hyphenation_code = v4;\n    if (v5 && v5->translate_input)\n      v5->hyphenation_code = v4;\n    do {\n      token next(&tok, (symbol)Number L);\n      i = tok.type;\n    } while (i == TOKEN_SPACE);\n  }\n  skip_line();\n}", "var": [{"name": "a2", "type": "disappear", "pred_name": "", "ref_name": "v0", "ref_type": "struct symbol { const char * s; }"}], "body_in_train": false}, {"repo_owner": "ZHAW-INES", "repo_name": "rioxo-uClinux-dist", "path": "ZHAW-INES/rioxo-uClinux-dist/da653f61b168303992071adb3218ebe918366940393f020e90d067048978326a", "path_in_repo": "ZHAW-INES/rioxo-uClinux-dist/user/ser/parser/parse_expires.o", "objdump": "0000000000000076 <expires_parser>:\n  76:\t55                   \tpush   %rbp\n  77:\t48 89 e5             \tmov    %rsp,%rbp\n  7a:\t48 83 ec 40          \tsub    $0x40,%rsp\n  7e:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  82:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  85:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  89:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  8d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  91:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  94:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  97:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  9b:\t48 89 c7             \tmov    %rax,%rdi\n  9e:\te8 5d ff ff ff       \tcallq  0 <trim_leading>\n  a3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  a6:\t85 c0                \ttest   %eax,%eax\n  a8:\t75 55                \tjne    ff <expires_parser+0x89>\n  aa:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # b0 <expires_parser+0x3a>\n  b0:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  b3:\t7c 37                \tjl     ec <expires_parser+0x76>\n  b5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # bb <expires_parser+0x45>\n  bb:\t85 c0                \ttest   %eax,%eax\n  bd:\t74 11                \tje     d0 <expires_parser+0x5a>\n  bf:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  c4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  c9:\te8 00 00 00 00       \tcallq  ce <expires_parser+0x58>\n  ce:\teb 1d                \tjmp    ed <expires_parser+0x77>\n  d0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # d6 <expires_parser+0x60>\n  d6:\t83 c8 03             \tor     $0x3,%eax\n  d9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  de:\t89 c7                \tmov    %eax,%edi\n  e0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  e5:\te8 00 00 00 00       \tcallq  ea <expires_parser+0x74>\n  ea:\teb 01                \tjmp    ed <expires_parser+0x77>\n  ec:\t90                   \tnop\n  ed:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  f1:\tc6 40 10 00          \tmovb   $0x0,0x10(%rax)\n  f5:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  fa:\te9 0a 01 00 00       \tjmpq   209 <expires_parser+0x193>\n  ff:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 103:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 107:\t48 89 10             \tmov    %rdx,(%rax)\n 10a:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 111:\te9 d0 00 00 00       \tjmpq   1e6 <expires_parser+0x170>\n 116:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 11a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 11d:\t48 98                \tcltq   \n 11f:\t48 01 d0             \tadd    %rdx,%rax\n 122:\t0f b6 00             \tmovzbl (%rax),%eax\n 125:\t3c 2f                \tcmp    $0x2f,%al\n 127:\t7e 58                \tjle    181 <expires_parser+0x10b>\n 129:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 12d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 130:\t48 98                \tcltq   \n 132:\t48 01 d0             \tadd    %rdx,%rax\n 135:\t0f b6 00             \tmovzbl (%rax),%eax\n 138:\t3c 39                \tcmp    $0x39,%al\n 13a:\t7f 45                \tjg     181 <expires_parser+0x10b>\n 13c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 140:\t8b 50 14             \tmov    0x14(%rax),%edx\n 143:\t89 d0                \tmov    %edx,%eax\n 145:\tc1 e0 02             \tshl    $0x2,%eax\n 148:\t01 d0                \tadd    %edx,%eax\n 14a:\t01 c0                \tadd    %eax,%eax\n 14c:\t89 c2                \tmov    %eax,%edx\n 14e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 152:\t89 50 14             \tmov    %edx,0x14(%rax)\n 155:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 159:\t8b 40 14             \tmov    0x14(%rax),%eax\n 15c:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n 160:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 163:\t48 63 d2             \tmovslq %edx,%rdx\n 166:\t48 01 ca             \tadd    %rcx,%rdx\n 169:\t0f b6 12             \tmovzbl (%rdx),%edx\n 16c:\t0f be d2             \tmovsbl %dl,%edx\n 16f:\t83 ea 30             \tsub    $0x30,%edx\n 172:\t01 c2                \tadd    %eax,%edx\n 174:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 178:\t89 50 14             \tmov    %edx,0x14(%rax)\n 17b:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 17f:\teb 65                \tjmp    1e6 <expires_parser+0x170>\n 181:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 185:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 188:\t48 98                \tcltq   \n 18a:\t48 01 d0             \tadd    %rdx,%rax\n 18d:\t0f b6 00             \tmovzbl (%rax),%eax\n 190:\t0f be c0             \tmovsbl %al,%eax\n 193:\t83 f8 20             \tcmp    $0x20,%eax\n 196:\t0f 97 c2             \tseta   %dl\n 199:\t84 d2                \ttest   %dl,%dl\n 19b:\t75 3a                \tjne    1d7 <expires_parser+0x161>\n 19d:\tba 01 00 00 00       \tmov    $0x1,%edx\n 1a2:\t89 c1                \tmov    %eax,%ecx\n 1a4:\t48 d3 e2             \tshl    %cl,%rdx\n 1a7:\t48 b8 00 26 00 00 01 \tmovabs $0x100002600,%rax\n 1ae:\t00 00 00 \n 1b1:\t48 21 d0             \tand    %rdx,%rax\n 1b4:\t48 85 c0             \ttest   %rax,%rax\n 1b7:\t0f 95 c0             \tsetne  %al\n 1ba:\t84 c0                \ttest   %al,%al\n 1bc:\t74 19                \tje     1d7 <expires_parser+0x161>\n 1be:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1c2:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 1c5:\t89 50 08             \tmov    %edx,0x8(%rax)\n 1c8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1cc:\tc6 40 10 01          \tmovb   $0x1,0x10(%rax)\n 1d0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1d5:\teb 32                \tjmp    209 <expires_parser+0x193>\n 1d7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1db:\tc6 40 10 00          \tmovb   $0x0,0x10(%rax)\n 1df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1e4:\teb 23                \tjmp    209 <expires_parser+0x193>\n 1e6:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 1e9:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 1ec:\t0f 8c 24 ff ff ff    \tjl     116 <expires_parser+0xa0>\n 1f2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1f6:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n 1f9:\t89 50 08             \tmov    %edx,0x8(%rax)\n 1fc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 200:\tc6 40 10 01          \tmovb   $0x1,0x10(%rax)\n 204:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 209:\tc9                   \tleaveq \n 20a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall expires_parser(char *a1, int a2, __int64 a3) {\n  __int64 result;\n  unsigned int v4;\n  char *v6;\n  int v7;\n  int i;\n  v6 = a1;\n  v7 = a2;\n  trim_leading(&v6);\n  if (v7) {\n    *(_QWORD *)a3 = v6;\n    for (i = Number;; ++i) {\n      if (i >= v7) {\n        *(_DWORD *)(a3 + Number) = a2;\n        *(_BYTE *)(a3 + Number) = Number;\n        return Number L;\n      }\n      if (v6[i] <= Number || v6[i] > Number)\n        break;\n      *(_DWORD *)(a3 + Number) *= Number;\n      *(_DWORD *)(a3 + Number) += v6[i] - Number;\n    }\n    v4 = v6[i];\n    if (v4 <= Number && ((Number L << v4) & Number) != Number) {\n      *(_DWORD *)(a3 + Number) = i;\n      *(_BYTE *)(a3 + Number) = Number;\n      result = Number L;\n    } else {\n      *(_BYTE *)(a3 + Number) = Number;\n      result = Number L;\n    }\n  } else {\n    if (debug >= Number) {\n      if (log_stderr)\n        dprint(String);\n      else syslog ( log_facility | Number , String : Empty body \\ n String ;\n    }\n    *(_BYTE *)(a3 + Number) = Number;\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl expires_parser(char *_s, int _l, exp_body_t *_e) {\n  int result;\n  unsigned int v4;\n  str <span class=\"supfact\">tmp</span>;\n  int i;\n  <span class=\"supfact\">tmp</span>.s = _s;\n  <span class=\"supfact\">tmp</span>.len = _l;\n  trim_leading(&<span class=\"supfact\">tmp</span>);\n  if (<span class=\"supfact\">tmp</span>.len) {\n    _e->text.s = <span class=\"supfact\">tmp</span>.s;\n    for (i = Number;; ++i) {\n      if (i >= <span class=\"supfact\">tmp</span>.len) {\n        _e->text.len = _l;\n        _e->valid = Number;\n        return Number;\n      }\n      if (<span class=\"supfact\">tmp</span>.s[i] <= Number ||\n          <span class=\"supfact\">tmp</span>.s[i] > Number)\n        break;\n      _e->val *= Number;\n      _e->val += <span class=\"supfact\">tmp</span>.s[i] - Number;\n    }\n    v4 = <span class=\"supfact\">tmp</span>.s[i];\n    if (v4 <= Number && ((Number L << v4) & Number) != Number) {\n      _e->text.len = i;\n      _e->valid = Number;\n      result = Number;\n    } else {\n      _e->valid = Number;\n      result = Number;\n    }\n  } else {\n    if (debug >= Number) {\n      if (log_stderr)\n        dprint(String);\n      else syslog ( log_facility | Number , String : Empty body \\ n String ;\n    }\n    _e->valid = Number;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "struct str { char * s; int len; PADDING (4); }", "pred_name": "cmd", "ref_name": "tmp", "ref_type": "struct str { char * s; int len; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "gibtang", "repo_name": "CCNSCoding", "path": "gibtang/CCNSCoding/d7718f917214cdab6462921bf18e4e1430ab81d24546150811081e266a291909", "path_in_repo": "gibtang/CCNSCoding/cocos2dx/proj.linux/obj/release/actions/CCActionManager.o", "objdump": "0000000000000000 <_ZN7cocos2d13ActionManager22pauseAllRunningActionsEv.cold>:\n   0:\t4c 89 e7             \tmov    %r12,%rdi\n   3:\te8 00 00 00 00       \tcallq  8 <_ZN7cocos2d13ActionManager22pauseAllRunningActionsEv.cold+0x8>\n   8:\t48 89 ef             \tmov    %rbp,%rdi\n   b:\te8 00 00 00 00       \tcallq  10 <_ZN7cocos2d13ActionManager22pauseAllRunningActionsEv.cold+0x10>\n", "code_s": "void __fastcall __noreturn cocos2d ActionManager pauseAllRunningActions() {\n  struct _Unwind_Exception *v0;\n  void *v1;\n  operator delete(v1);\n  Unwind_Resume(v0);\n}", "code_t": "void __fastcall __noreturn cocos2d ActionManager pauseAllRunningActions() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  void *v1;\n  operator delete(v1);\n  Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "var": [{"name": "v0", "type": "struct _Unwind_Exception *", "pred_name": "v0", "ref_name": "v0", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/53d830a43215f228fc0a4c27e6f0f8ad5a6e43d5f5cf7f601c574db1fd46c809", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/recfile", "objdump": "0000000000410100 <pjmedia_srtp_setting_default>:\n  410100:\t55                   \tpush   %rbp\n  410101:\t48 89 e5             \tmov    %rsp,%rbp\n  410104:\t53                   \tpush   %rbx\n  410105:\t48 83 ec 28          \tsub    $0x28,%rsp\n  410109:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  41010d:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  410112:\t75 19                \tjne    41012d <pjmedia_srtp_setting_default+0x2d>\n  410114:\tb9 c0 dc 48 00       \tmov    $0x48dcc0,%ecx\n  410119:\tba 5d 02 00 00       \tmov    $0x25d,%edx\n  41011e:\tbe a8 d7 48 00       \tmov    $0x48d7a8,%esi\n  410123:\tbf c8 d7 48 00       \tmov    $0x48d7c8,%edi\n  410128:\te8 d3 5f ff ff       \tcallq  406100 <__assert_fail@plt>\n  41012d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  410131:\tbe b0 02 00 00       \tmov    $0x2b0,%esi\n  410136:\t48 89 c7             \tmov    %rax,%rdi\n  410139:\te8 48 e2 ff ff       \tcallq  40e386 <pj_bzero>\n  41013e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  410142:\tc7 40 04 01 00 00 00 \tmovl   $0x1,0x4(%rax)\n  410149:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41014d:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n  410153:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  410157:\tc7 40 08 04 00 00 00 \tmovl   $0x4,0x8(%rax)\n  41015e:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  410165:\teb 4e                \tjmp    4101b5 <pjmedia_srtp_setting_default+0xb5>\n  410167:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  41016a:\t83 c0 01             \tadd    $0x1,%eax\n  41016d:\t89 c2                \tmov    %eax,%edx\n  41016f:\t48 89 d0             \tmov    %rdx,%rax\n  410172:\t48 c1 e0 03          \tshl    $0x3,%rax\n  410176:\t48 29 d0             \tsub    %rdx,%rax\n  410179:\t48 c1 e0 03          \tshl    $0x3,%rax\n  41017d:\t48 05 80 76 4b 00    \tadd    $0x4b7680,%rax\n  410183:\t48 8b 08             \tmov    (%rax),%rcx\n  410186:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n  41018a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  41018d:\t48 89 d0             \tmov    %rdx,%rax\n  410190:\t48 c1 e0 02          \tshl    $0x2,%rax\n  410194:\t48 01 d0             \tadd    %rdx,%rax\n  410197:\t48 c1 e0 03          \tshl    $0x3,%rax\n  41019b:\t48 01 f0             \tadd    %rsi,%rax\n  41019e:\t48 8d 58 20          \tlea    0x20(%rax),%rbx\n  4101a2:\t48 89 cf             \tmov    %rcx,%rdi\n  4101a5:\te8 dc 6d 07 00       \tcallq  486f86 <pj_str>\n  4101aa:\t48 89 03             \tmov    %rax,(%rbx)\n  4101ad:\t48 89 53 08          \tmov    %rdx,0x8(%rbx)\n  4101b1:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  4101b5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4101b9:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4101bc:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  4101bf:\t72 a6                \tjb     410167 <pjmedia_srtp_setting_default+0x67>\n  4101c1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4101c5:\tc7 80 90 02 00 00 02 \tmovl   $0x2,0x290(%rax)\n  4101cc:\t00 00 00 \n  4101cf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4101d3:\tc7 80 94 02 00 00 00 \tmovl   $0x0,0x294(%rax)\n  4101da:\t00 00 00 \n  4101dd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4101e1:\tc7 80 98 02 00 00 01 \tmovl   $0x1,0x298(%rax)\n  4101e8:\t00 00 00 \n  4101eb:\t90                   \tnop\n  4101ec:\t48 83 c4 28          \tadd    $0x28,%rsp\n  4101f0:\t5b                   \tpop    %rbx\n  4101f1:\t5d                   \tpop    %rbp\n  4101f2:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall pjmedia_srtp_setting_default(_DWORD *a1) {\n  _QWORD *v1;\n  __int64 v2;\n  _DWORD *result;\n  unsigned int i;\n  if (!a1)\n    __assert_fail(String, String, Number, String);\n  pj_bzero_2(a1, Number);\n  a1[Number] = Number;\n  *a1 = Number;\n  a1[Number] = Number;\n  for (i = Number; i < a1[Number]; ++i) {\n    v1 = &a1[Number * i + Number];\n    *v1 = pj_str((&crypto_suites)[Number * i + Number]);\n    v1[Number] = v2;\n  }\n  a1[Number] = Number;\n  a1[Number] = Number;\n  result = a1;\n  a1[Number] = Number;\n  return result;\n}", "code_t": "void __cdecl pjmedia_srtp_setting_default(pjmedia_srtp_setting_0 *opt) {\n  pj_str_t_0 *v1;\n  pj_str_t_0 <span class=\"supfact\">v2</span>;\n  unsigned int i;\n  if (!opt)\n    __assert_fail(String, String, Number, String);\n  pj_bzero_2(opt, Number);\n  opt->close_member_tp = Number;\n  opt->use = PJMEDIA_SRTP_OPTIONAL;\n  opt->crypto_count = Number;\n  for (i = Number; i < opt->crypto_count; ++i) {\n    v1 = &opt->crypto[i].name;\n    <span class=\"supfact\">v2</span> = pj_str(crypto_suites[i + Number].name);\n    v1->ptr = <span class=\"supfact\">v2</span>.ptr;\n    v1->slen = <span class=\"supfact\">v2</span>.slen;\n  }\n  opt->keying_count = Number;\n  opt->keying[Number] = PJMEDIA_SRTP_KEYING_SDES;\n  opt->keying[Number] = PJMEDIA_SRTP_KEYING_DTLS_SRTP;\n}", "var": [{"name": "result", "type": "disappear", "pred_name": "", "ref_name": "v2", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "mDibyo", "repo_name": "py-dlib", "path": "mDibyo/py-dlib/2fa2177e5c70c6dd2530f6bfdee1cc921b3de9e5d513af3ae7a1dcf1683890fa", "path_in_repo": "mDibyo/py-dlib/dlib/test/sammon.o", "objdump": "0000000000000000 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 78          \tsub    $0x78,%rsp\n   9:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   d:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n  11:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n  15:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n  19:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  1d:\t48 89 c7             \tmov    %rax,%rdi\n  20:\te8 00 00 00 00       \tcallq  25 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x25>\n  25:\t48 89 c7             \tmov    %rax,%rdi\n  28:\te8 00 00 00 00       \tcallq  2d <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x2d>\n  2d:\t48 89 c2             \tmov    %rax,%rdx\n  30:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  34:\t48 89 d6             \tmov    %rdx,%rsi\n  37:\t48 89 c7             \tmov    %rax,%rdi\n  3a:\te8 00 00 00 00       \tcallq  3f <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x3f>\n  3f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43:\t48 89 c7             \tmov    %rax,%rdi\n  46:\te8 00 00 00 00       \tcallq  4b <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x4b>\n  4b:\t48 89 c7             \tmov    %rax,%rdi\n  4e:\te8 00 00 00 00       \tcallq  53 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x53>\n  53:\t48 89 c3             \tmov    %rax,%rbx\n  56:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  5a:\t48 89 c7             \tmov    %rax,%rdi\n  5d:\te8 00 00 00 00       \tcallq  62 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x62>\n  62:\t48 89 de             \tmov    %rbx,%rsi\n  65:\t48 89 c7             \tmov    %rax,%rdi\n  68:\te8 00 00 00 00       \tcallq  6d <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x6d>\n  6d:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  71:\t48 89 c7             \tmov    %rax,%rdi\n  74:\te8 00 00 00 00       \tcallq  79 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x79>\n  79:\t48 89 c2             \tmov    %rax,%rdx\n  7c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  80:\t48 89 d6             \tmov    %rdx,%rsi\n  83:\t48 89 c7             \tmov    %rax,%rdi\n  86:\te8 00 00 00 00       \tcallq  8b <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x8b>\n  8b:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  8f:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  93:\t48 89 d6             \tmov    %rdx,%rsi\n  96:\t48 89 c7             \tmov    %rax,%rdi\n  99:\te8 00 00 00 00       \tcallq  9e <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x9e>\n  9e:\t48 89 c3             \tmov    %rax,%rbx\n  a1:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  a5:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  a9:\t48 89 d6             \tmov    %rdx,%rsi\n  ac:\t48 89 c7             \tmov    %rax,%rdi\n  af:\te8 00 00 00 00       \tcallq  b4 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0xb4>\n  b4:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  b8:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  bc:\t48 89 d1             \tmov    %rdx,%rcx\n  bf:\t48 89 da             \tmov    %rbx,%rdx\n  c2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  c7:\t48 89 c7             \tmov    %rax,%rdi\n  ca:\te8 00 00 00 00       \tcallq  cf <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0xcf>\n  cf:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  d3:\t48 89 c7             \tmov    %rax,%rdi\n  d6:\te8 00 00 00 00       \tcallq  db <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0xdb>\n  db:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  df:\t48 89 c7             \tmov    %rax,%rdi\n  e2:\te8 00 00 00 00       \tcallq  e7 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0xe7>\n  e7:\teb 2b                \tjmp    114 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x114>\n  e9:\t48 89 c3             \tmov    %rax,%rbx\n  ec:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  f0:\t48 89 c7             \tmov    %rax,%rdi\n  f3:\te8 00 00 00 00       \tcallq  f8 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0xf8>\n  f8:\teb 03                \tjmp    fd <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0xfd>\n  fa:\t48 89 c3             \tmov    %rax,%rbx\n  fd:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 101:\t48 89 c7             \tmov    %rax,%rdi\n 104:\te8 00 00 00 00       \tcallq  109 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x109>\n 109:\t48 89 d8             \tmov    %rbx,%rax\n 10c:\t48 89 c7             \tmov    %rax,%rdi\n 10f:\te8 00 00 00 00       \tcallq  114 <_ZSt10__pop_heapISt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS4_33memory_manager_stateless_kernel_1IcEENS4_16row_major_layoutEEEESt6vectorISA_NS4_13std_allocatorISA_S7_EEEEEENS1_5__ops15_Iter_comp_iterINS4_24sort_columns_sort_helperEEEEvT_SM_SM_RT0_+0x114>\n 114:\t48 83 c4 78          \tadd    $0x78,%rsp\n 118:\t5b                   \tpop    %rbx\n 119:\t5d                   \tpop    %rbp\n 11a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __pop_heap<\n    std reverse_iterator<__gnu_cxx __normal_iterator<\n        std pair<double,\n                 dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>> *,\n        std vector<\n            std pair<double,\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>>,\n            dlib std_allocator<\n                std pair<\n                    double,\n                    dlib matrix<double, Number, Number,\n                                dlib memory_manager_stateless_kernel_1<char>,\n                                dlib row_major_layout>>,\n                dlib memory_manager_stateless_kernel_1<char>>>>>,\n    __gnu_cxx __ops _Iter_comp_iter<dlib sort_columns_sort_helper>>(__int64 *a1,\n                                                                    __int64 a2,\n                                                                    __int64 *a3,\n                                                                    char a4) {\n  __int64 v4;\n  _QWORD *v5;\n  __int64 v6;\n  __int64 v7;\n  _QWORD *v8;\n  _QWORD *v9;\n  int v10;\n  int v11;\n  _QWORD v15[Number];\n  _QWORD v16[Number];\n  _QWORD v17[Number];\n  v4 = std reverse_iterator<__gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>>\n  operator*(a3);\n  v5 = (_QWORD *)std move<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> &>(v4);\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>\n      pair(v15, v5);\n  v6 = std reverse_iterator<__gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>>\n  operator*(a1);\n  v7 = std move<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> &>(v6);\n  v8 = (_QWORD *)std reverse_iterator<__gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>>\n  operator*(a3);\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>\n  operator=(v8, v7);\n  v9 = (_QWORD *)std move<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> &>((__int64)v15);\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>\n      pair(v16, v9);\n  LODWORD(v7) = std operator-<\n      __gnu_cxx __normal_iterator<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *,\n          std vector<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib std_allocator<\n                  std pair<\n                      double,\n                      dlib matrix<double, Number, Number,\n                                  dlib memory_manager_stateless_kernel_1<char>,\n                                  dlib row_major_layout>>,\n                  dlib memory_manager_stateless_kernel_1<char>>>>,\n      __gnu_cxx __normal_iterator<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *,\n          std vector<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib std_allocator<\n                  std pair<\n                      double,\n                      dlib matrix<double, Number, Number,\n                                  dlib memory_manager_stateless_kernel_1<char>,\n                                  dlib row_major_layout>>,\n                  dlib memory_manager_stateless_kernel_1<char>>>>>(a2,\n                                                                   (__int64)a1);\n  std reverse_iterator<__gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>>\n      reverse_iterator(v17, a1);\n  std __adjust_heap<\n      std reverse_iterator<__gnu_cxx __normal_iterator<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *,\n          std vector<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib std_allocator<\n                  std pair<\n                      double,\n                      dlib matrix<double, Number, Number,\n                                  dlib memory_manager_stateless_kernel_1<char>,\n                                  dlib row_major_layout>>,\n                  dlib memory_manager_stateless_kernel_1<char>>>>>,\n      long,\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n      __gnu_cxx __ops _Iter_comp_iter<dlib sort_columns_sort_helper>>(\n      (unsigned int)v17, Number, v7, (unsigned int)v16, v10, v11, a4);\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> ~pair((__int64)v16);\n  return std\n      pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> ~pair((__int64)v15);\n}", "code_t": "void __cdecl std __pop_heap<\n    std reverse_iterator<__gnu_cxx __normal_iterator<\n        std pair<double,\n                 dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>> *,\n        std vector<\n            std pair<double,\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>>,\n            dlib std_allocator<\n                std pair<\n                    double,\n                    dlib matrix<double, Number, Number,\n                                dlib memory_manager_stateless_kernel_1<char>,\n                                dlib row_major_layout>>,\n                dlib memory_manager_stateless_kernel_1<char>>>>>,\n    __gnu_cxx __ops _Iter_comp_iter<dlib sort_columns_sort_helper>>(\n    std reverse_iterator<__gnu_cxx __normal_iterator<\n        std pair<double,\n                 dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>> *,\n        std vector<\n            std pair<double,\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>>,\n            dlib std_allocator<\n                std pair<\n                    double,\n                    dlib matrix<double, Number, Number,\n                                dlib memory_manager_stateless_kernel_1<char>,\n                                dlib row_major_layout>>,\n                dlib memory_manager_stateless_kernel_1<char>>>>> *p___first,\n    std reverse_iterator<__gnu_cxx __normal_iterator<\n        std pair<double,\n                 dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>> *,\n        std vector<\n            std pair<double,\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>>,\n            dlib std_allocator<\n                std pair<\n                    double,\n                    dlib matrix<double, Number, Number,\n                                dlib memory_manager_stateless_kernel_1<char>,\n                                dlib row_major_layout>>,\n                dlib memory_manager_stateless_kernel_1<char>>>>> *p___last,\n    std reverse_iterator<__gnu_cxx __normal_iterator<\n        std pair<double,\n                 dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>> *,\n        std vector<\n            std pair<double,\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>>,\n            dlib std_allocator<\n                std pair<\n                    double,\n                    dlib matrix<double, Number, Number,\n                                dlib memory_manager_stateless_kernel_1<char>,\n                                dlib row_major_layout>>,\n                dlib memory_manager_stateless_kernel_1<char>>>>> *p___result,\n    __gnu_cxx __ops _Iter_comp_iter<dlib sort_columns_sort_helper> *__comp) {\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *v4;\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *v5;\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *v6;\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *v7;\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *v8;\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *v9;\n  __int64 v10;\n  __gnu_cxx __ops _Iter_comp_iter<dlib sort_columns_sort_helper>\n      <span class=\"supfact\">v11</span>;\n  std __pop_heap<\n      std reverse_iterator<__gnu_cxx __normal_iterator<\n          std pair<double, dlib matrix<double, Number, Number>> *,\n          std vector<std pair<double, dlib matrix<double, Number, Number>>,\n                     dlib std_allocator<\n                         std pair<double, dlib matrix<double, Number, Number>>,\n                         dlib memory_manager_stateless_kernel_1<char>>>>>,\n      __gnu_cxx __ops _Iter_comp_iter<dlib sort_columns_sort_helper>>\n      _ValueType <span class=\"supfact\">__value</span>;\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>\n      <span class=\"supfact\">p___value</span>;\n  std reverse_iterator<__gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>>\n      <span class=\"supfact\">v15</span>;\n  v4 = std reverse_iterator<__gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>>\n  operator*(p___result);\n  v5 = std move<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> &>(v4);\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>\n      pair(&<span class=\"supfact\">__value</span>, v5);\n  v6 = std reverse_iterator<__gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>>\n  operator*(p___first);\n  v7 = std move<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> &>(v6);\n  v8 = std reverse_iterator<__gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>>\n  operator*(p___result);\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>\n  operator=(v8, v7);\n  v9 = std move<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> &>(\n      &<span class=\"supfact\">__value</span>);\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>\n      pair(&<span class=\"supfact\">p___value</span>, v9);\n  v10 = std operator-<\n      __gnu_cxx __normal_iterator<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *,\n          std vector<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib std_allocator<\n                  std pair<\n                      double,\n                      dlib matrix<double, Number, Number,\n                                  dlib memory_manager_stateless_kernel_1<char>,\n                                  dlib row_major_layout>>,\n                  dlib memory_manager_stateless_kernel_1<char>>>>,\n      __gnu_cxx __normal_iterator<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *,\n          std vector<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib std_allocator<\n                  std pair<\n                      double,\n                      dlib matrix<double, Number, Number,\n                                  dlib memory_manager_stateless_kernel_1<char>,\n                                  dlib row_major_layout>>,\n                  dlib memory_manager_stateless_kernel_1<char>>>>>(p___last,\n                                                                   p___first);\n  std reverse_iterator<__gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>>\n      reverse_iterator(&<span class=\"supfact\">v15</span>, p___first);\n  std __adjust_heap<\n      std reverse_iterator<__gnu_cxx __normal_iterator<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *,\n          std vector<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib std_allocator<\n                  std pair<\n                      double,\n                      dlib matrix<double, Number, Number,\n                                  dlib memory_manager_stateless_kernel_1<char>,\n                                  dlib row_major_layout>>,\n                  dlib memory_manager_stateless_kernel_1<char>>>>>,\n      long,\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n      __gnu_cxx __ops _Iter_comp_iter<dlib sort_columns_sort_helper>>(\n      &<span class=\"supfact\">v15</span>, Number L, v10, &<span class=\"supfact\">p___value</span>,\n      <span class=\"supfact\">v11</span>);\n  std pair<\n      double,\n      dlib matrix<double, Number, Number,\n                  dlib memory_manager_stateless_kernel_1<char>,\n                  dlib row_major_layout>> ~pair(&<span class=\"supfact\">p___value</span>);\n  std pair<double,\n           dlib matrix<double, Number, Number,\n                       dlib memory_manager_stateless_kernel_1<char>,\n                       dlib row_major_layout>> ~pair(&<span class=\"supfact\">__value</span>);\n}", "var": [{"name": "v10", "type": "disappear", "pred_name": "", "ref_name": "v11", "ref_type": "struct __gnu_cxx::__ops::_Iter_comp_iter<dlib::sort_columns_sort_helper> { dlib::sort_columns_sort_helper _M_comp; }"}, {"name": "v15", "type": "__unk__", "pred_name": "__value", "ref_name": "__value", "ref_type": "struct std::__pop_heap<std::reverse_iterator<__gnu_cxx::__normal_iterator<std::pair<double,dlib::matrix<double,0,1> >*,std::vector<std::pair<double,dlib::matrix<double,0,1> >,dlib::std_allocator<std::pair<double,dlib::matrix<double,0,1> >,dlib::memory_manager_stateless_kernel_1<char> > > > >,__gnu_cxx::__ops::_Iter_comp_iter<dlib::sort_columns_sort_helper> >::_ValueType { double first; dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> second; }"}, {"name": "v16", "type": "struct std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> > { double first; dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> second; }", "pred_name": "p___value", "ref_name": "p___value", "ref_type": "struct std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> > { double first; dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> second; }"}, {"name": "v17", "type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >*,std::vector<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::std_allocator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::memory_manager_stateless_kernel_1<char> > > > > { __gnu_cxx::__normal_iterator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >*,std::vector<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::std_allocator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::memory_manager_stateless_kernel_1<char> > > > current; }", "pred_name": "v15", "ref_name": "v15", "ref_type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >*,std::vector<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::std_allocator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::memory_manager_stateless_kernel_1<char> > > > > { __gnu_cxx::__normal_iterator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >*,std::vector<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::std_allocator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::memory_manager_stateless_kernel_1<char> > > > current; }"}], "body_in_train": true}, {"repo_owner": "franziskuskiefer", "repo_name": "nss-benchmark", "path": "franziskuskiefer/nss-benchmark/42142a295b70a96e5ea3f4cee8a2133dcc504d0dbd531f2ef5deda50c4989393", "path_in_repo": "franziskuskiefer/nss-benchmark/supercop-20171218/ntl-10.5.0/src/GF2E.o", "objdump": "0000000000000210 <_ZN3NTLrsERSiRNS_4GF2EE>:\n 210:\t41 54                \tpush   %r12\n 212:\t49 89 fc             \tmov    %rdi,%r12\n 215:\t55                   \tpush   %rbp\n 216:\t48 89 f5             \tmov    %rsi,%rbp\n 219:\t48 83 ec 18          \tsub    $0x18,%rsp\n 21d:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n 224:\t00 00 \n 226:\t48 8d 74 24 08       \tlea    0x8(%rsp),%rsi\n 22b:\te8 00 00 00 00       \tcallq  230 <_ZN3NTLrsERSiRNS_4GF2EE+0x20>\n 230:\t48 8b 10             \tmov    (%rax),%rdx\n 233:\t48 8b 52 e8          \tmov    -0x18(%rdx),%rdx\n 237:\tf6 44 10 20 05       \ttestb  $0x5,0x20(%rax,%rdx,1)\n 23c:\t75 32                \tjne    270 <_ZN3NTLrsERSiRNS_4GF2EE+0x60>\n 23e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 245 <_ZN3NTLrsERSiRNS_4GF2EE+0x35>\n 245:\t48 8d 74 24 08       \tlea    0x8(%rsp),%rsi\n 24a:\t48 89 ef             \tmov    %rbp,%rdi\n 24d:\te8 00 00 00 00       \tcallq  252 <_ZN3NTLrsERSiRNS_4GF2EE+0x42>\n 252:\t48 8d 7c 24 08       \tlea    0x8(%rsp),%rdi\n 257:\te8 00 00 00 00       \tcallq  25c <_ZN3NTLrsERSiRNS_4GF2EE+0x4c>\n 25c:\t48 83 c4 18          \tadd    $0x18,%rsp\n 260:\t4c 89 e0             \tmov    %r12,%rax\n 263:\t5d                   \tpop    %rbp\n 264:\t41 5c                \tpop    %r12\n 266:\tc3                   \tretq   \n 267:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n 26e:\t00 00 \n 270:\t49 8b 04 24          \tmov    (%r12),%rax\n 274:\t48 8b 78 e8          \tmov    -0x18(%rax),%rdi\n 278:\t4c 01 e7             \tadd    %r12,%rdi\n 27b:\t8b 77 20             \tmov    0x20(%rdi),%esi\n 27e:\t83 ce 04             \tor     $0x4,%esi\n 281:\te8 00 00 00 00       \tcallq  286 <_ZN3NTLrsERSiRNS_4GF2EE+0x76>\n 286:\teb ca                \tjmp    252 <_ZN3NTLrsERSiRNS_4GF2EE+0x42>\n 288:\t48 89 c5             \tmov    %rax,%rbp\n 28b:\te9 00 00 00 00       \tjmpq   290 <_ZN3NTL3divERNS_4GF2EERKS0_S3_>", "code_s": "_QWORD *__fastcall NTL operator>>(_QWORD *a1, __int64 a2) {\n  _QWORD *v2;\n  __int64 v4[Number];\n  v4[Number] = Number L;\n  v2 = (_QWORD *)NTL operator>>(a1, v4);\n  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - Number L) + Number) & Number) !=\n      Number)\n    std ios clear(\n        (char *)a1 + *(_QWORD *)(*a1 - Number L),\n        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - Number L) + Number) |\n            Number);\n  else\n    NTL rem(a2, v4, NTL GF2EInfo);\n  NTL WordVector ~WordVector((NTL WordVector *)v4);\n  return a1;\n}", "code_t": "_QWORD *__fastcall NTL operator>>(_QWORD *a1, NTL *a2) {\n  _QWORD *v2;\n  const NTL GF2XModulus *v3;\n  NTL WordVector <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span>.rep = Number L;\n  v2 = (_QWORD *)NTL operator>>(a1, &<span class=\"supfact\">v5</span>);\n  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - Number L) + Number) & Number) !=\n      Number)\n    std ios clear(\n        (char *)a1 + *(_QWORD *)(*a1 - Number L),\n        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - Number L) + Number) |\n            Number);\n  else\n    NTL rem(a2, (NTL GF2X *)&<span class=\"supfact\">v5</span>, &NTL GF2EInfo->p.f, v3);\n  NTL WordVector ~WordVector(&<span class=\"supfact\">v5</span>);\n  return a1;\n}", "var": [{"name": "v4", "type": "__int64[4]", "pred_name": "v4", "ref_name": "v5", "ref_type": "struct NTL::WordVector { _ntl_ulong * rep; }"}], "body_in_train": false}, {"repo_owner": "mariapelika", "repo_name": "tinyos3", "path": "mariapelika/tinyos3/20ecb3e2f9550181937ea570a26819744277c5fde812f4113b18fa332956ee98", "path_in_repo": "mariapelika/tinyos3//validate_api.o", "objdump": "000000000000259c <__test_test_pipe_fails_on_exhausted_fid>:\n    259c:\t55                   \tpush   %rbp\n    259d:\t48 89 e5             \tmov    %rsp,%rbp\n    25a0:\t48 83 ec 20          \tsub    $0x20,%rsp\n    25a4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n    25a7:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    25ab:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    25b2:\teb 3c                \tjmp    25f0 <__test_test_pipe_fails_on_exhausted_fid+0x54>\n    25b4:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n    25b8:\t48 89 c7             \tmov    %rax,%rdi\n    25bb:\te8 00 00 00 00       \tcallq  25c0 <__test_test_pipe_fails_on_exhausted_fid+0x24>\n    25c0:\t85 c0                \ttest   %eax,%eax\n    25c2:\t74 28                \tje     25ec <__test_test_pipe_fails_on_exhausted_fid+0x50>\n    25c4:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 25ce <__test_test_pipe_fails_on_exhausted_fid+0x32>\n    25cb:\t00 00 00 \n    25ce:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    25d3:\tba 79 03 00 00       \tmov    $0x379,%edx\n    25d8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    25dd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    25e2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    25e7:\te8 00 00 00 00       \tcallq  25ec <__test_test_pipe_fails_on_exhausted_fid+0x50>\n    25ec:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    25f0:\t83 7d fc 07          \tcmpl   $0x7,-0x4(%rbp)\n    25f4:\t76 be                \tjbe    25b4 <__test_test_pipe_fails_on_exhausted_fid+0x18>\n    25f6:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    25fd:\teb 3d                \tjmp    263c <__test_test_pipe_fails_on_exhausted_fid+0xa0>\n    25ff:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n    2603:\t48 89 c7             \tmov    %rax,%rdi\n    2606:\te8 00 00 00 00       \tcallq  260b <__test_test_pipe_fails_on_exhausted_fid+0x6f>\n    260b:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    260e:\t74 28                \tje     2638 <__test_test_pipe_fails_on_exhausted_fid+0x9c>\n    2610:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 261a <__test_test_pipe_fails_on_exhausted_fid+0x7e>\n    2617:\t00 00 00 \n    261a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    261f:\tba 7b 03 00 00       \tmov    $0x37b,%edx\n    2624:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2629:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    262e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2633:\te8 00 00 00 00       \tcallq  2638 <__test_test_pipe_fails_on_exhausted_fid+0x9c>\n    2638:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n    263c:\t83 7d f8 07          \tcmpl   $0x7,-0x8(%rbp)\n    2640:\t76 bd                \tjbe    25ff <__test_test_pipe_fails_on_exhausted_fid+0x63>\n    2642:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2647:\tc9                   \tleaveq \n    2648:\tc3                   \tretq   ", "code_s": "__int64 _test_test_pipe_fails_on_exhausted_fid() {\n  char v1[Number];\n  unsigned int j;\n  unsigned int i;\n  for (i = Number; i <= Number; ++i) {\n    if ((unsigned int)Pipe(v1)) {\n      FLAG_FAILURE = Number;\n      MSG(String, String, Number L, String);\n    }\n  }\n  for (j = Number; j <= Number; ++j) {\n    if ((unsigned int)Pipe(v1) != Number) {\n      FLAG_FAILURE = Number;\n      MSG(String, String, Number L, String);\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl _test_test_pipe_fails_on_exhausted_fid(int argl, void *args) {\n  pipe_t <span class=\"supfact\">pipe</span>;\n  uint i_0;\n  uint i;\n  for (i = Number; i <= Number; ++i) {\n    if ((unsigned int)Pipe(&<span class=\"supfact\">pipe</span>)) {\n      FLAG_FAILURE = Number;\n      MSG(String, String, Number L, String);\n    }\n  }\n  for (i_0 = Number; i_0 <= Number; ++i_0) {\n    if ((unsigned int)Pipe(&<span class=\"supfact\">pipe</span>) != Number) {\n      FLAG_FAILURE = Number;\n      MSG(String, String, Number L, String);\n    }\n  }\n  return Number;\n}", "var": [{"name": "v1", "type": "struct pipe_t { Fid_t read; Fid_t write; }", "pred_name": "pipe", "ref_name": "pipe", "ref_type": "struct pipe_t { Fid_t read; Fid_t write; }"}], "body_in_train": false}, {"repo_owner": "raphielscape", "repo_name": "linux-scape-workstation", "path": "raphielscape/linux-scape-workstation/10593b780a71e76100809c468d77927c9530ef45b06e909807f278f4ab12ac4b", "path_in_repo": "raphielscape/linux-scape-workstation/tools/testing/selftests/kvm/clear_dirty_log_test", "objdump": "000000000040c256 <vcpu_set_msr>:\n  40c256:\t55                   \tpush   %rbp\n  40c257:\t48 89 e5             \tmov    %rsp,%rbp\n  40c25a:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40c25e:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  40c262:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n  40c265:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  40c269:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n  40c26d:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  40c270:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40c274:\t89 d6                \tmov    %edx,%esi\n  40c276:\t48 89 c7             \tmov    %rax,%rdi\n  40c279:\te8 cc 8a ff ff       \tcallq  404d4a <vcpu_find>\n  40c27e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c282:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  40c289:\t00 \n  40c28a:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  40c291:\t00 \n  40c292:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  40c299:\t00 \n  40c29a:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40c29f:\t0f 95 c0             \tsetne  %al\n  40c2a2:\t0f b6 c0             \tmovzbl %al,%eax\n  40c2a5:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  40c2a8:\t41 89 d1             \tmov    %edx,%r9d\n  40c2ab:\t41 b8 6d 16 41 00    \tmov    $0x41166d,%r8d\n  40c2b1:\tb9 80 03 00 00       \tmov    $0x380,%ecx\n  40c2b6:\tba 2d 12 41 00       \tmov    $0x41122d,%edx\n  40c2bb:\tbe 88 16 41 00       \tmov    $0x411688,%esi\n  40c2c0:\t89 c7                \tmov    %eax,%edi\n  40c2c2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40c2c7:\te8 11 76 ff ff       \tcallq  4038dd <test_assert>\n  40c2cc:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  40c2d0:\tba 18 00 00 00       \tmov    $0x18,%edx\n  40c2d5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40c2da:\t48 89 c7             \tmov    %rax,%rdi\n  40c2dd:\te8 6e 5e ff ff       \tcallq  402150 <memset@plt>\n  40c2e2:\tc7 45 d0 01 00 00 00 \tmovl   $0x1,-0x30(%rbp)\n  40c2e9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40c2ed:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  40c2f0:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  40c2f4:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40c2f8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40c2fc:\t8b 40 14             \tmov    0x14(%rax),%eax\n  40c2ff:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  40c303:\tbe 89 ae 08 40       \tmov    $0x4008ae89,%esi\n  40c308:\t89 c7                \tmov    %eax,%edi\n  40c30a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40c30f:\te8 4c 5e ff ff       \tcallq  402160 <ioctl@plt>\n  40c314:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40c317:\te8 44 5d ff ff       \tcallq  402060 <__errno_location@plt>\n  40c31c:\t8b 10                \tmov    (%rax),%edx\n  40c31e:\t83 7d f4 01          \tcmpl   $0x1,-0xc(%rbp)\n  40c322:\t0f 94 c0             \tsete   %al\n  40c325:\t0f b6 c0             \tmovzbl %al,%eax\n  40c328:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n  40c32b:\t48 83 ec 08          \tsub    $0x8,%rsp\n  40c32f:\t52                   \tpush   %rdx\n  40c330:\t41 89 c9             \tmov    %ecx,%r9d\n  40c333:\t41 b8 00 17 41 00    \tmov    $0x411700,%r8d\n  40c339:\tb9 86 03 00 00       \tmov    $0x386,%ecx\n  40c33e:\tba 2d 12 41 00       \tmov    $0x41122d,%edx\n  40c343:\tbe f6 16 41 00       \tmov    $0x4116f6,%esi\n  40c348:\t89 c7                \tmov    %eax,%edi\n  40c34a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40c34f:\te8 89 75 ff ff       \tcallq  4038dd <test_assert>\n  40c354:\t48 83 c4 10          \tadd    $0x10,%rsp\n  40c358:\t90                   \tnop\n  40c359:\tc9                   \tleaveq \n  40c35a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vcpu_set_msr(__int64 a1, unsigned int a2, int a3,\n                                __int64 a4) {\n  int *v4;\n  __int64 s;\n  __int64 v9;\n  __int64 v10;\n  unsigned int v11;\n  __int64 *v12;\n  v12 = vcpu_find(a1, a2);\n  s = Number L;\n  v9 = Number L;\n  v10 = Number L;\n  test_assert(v12 != Number L, String, String, Number, String, a2);\n  memset(&s, Number, Number);\n  LODWORD(s) = Number;\n  LODWORD(v9) = a3;\n  v10 = a4;\n  v11 = ioctl(*((_DWORD *)v12 + Number), Number, &s);\n  v4 = __errno_location();\n  return test_assert(v11 == Number, String, String, Number, String, v11,\n                     (unsigned int)*v4);\n}", "code_t": "void __cdecl vcpu_set_msr(kvm_vm *vm, uint32_t vcpuid, uint64_t msr_index,\n                          uint64_t msr_value) {\n  int *v4;\n  __u32 msr_indexa;\n  vcpu_set_msr $90490A3C1150F0ED98433EABAE1526FA <span class=\"supfact\">buffer</span>;\n  int r;\n  vcpu *vcpu;\n  msr_indexa = msr_index;\n  vcpu = vcpu_find(vm, vcpuid);\n  <span class=\"supfact\">buffer</span>.header = Number L;\n  *(_QWORD *)&<span class=\"supfact\">buffer</span>.entry.index = Number L;\n  <span class=\"supfact\">buffer</span>.entry.data = Number L;\n  test_assert(vcpu != Number L, String, String, Number, String, vcpuid);\n  memset(&<span class=\"supfact\">buffer</span>, Number, sizeof(<span class=\"supfact\">buffer</span>));\n  <span class=\"supfact\">buffer</span>.header.nmsrs = Number;\n  <span class=\"supfact\">buffer</span>.entry.index = msr_indexa;\n  <span class=\"supfact\">buffer</span>.entry.data = msr_value;\n  r = ioctl(vcpu->fd, Number, &<span class=\"supfact\">buffer</span>);\n  v4 = __errno_location();\n  test_assert(r == Number, String, String, Number, String, (unsigned int)r,\n              (unsigned int)*v4);\n}", "var": [{"name": "s", "type": "struct vcpu_set_msr::$90490A3C1150F0ED98433EABAE1526FA { kvm_msrs header; kvm_msr_entry entry; }", "pred_name": "buffer", "ref_name": "buffer", "ref_type": "struct vcpu_set_msr::$90490A3C1150F0ED98433EABAE1526FA { kvm_msrs header; kvm_msr_entry entry; }"}], "body_in_train": true}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/00290a39657ef0ec055523773fa5e91729efad581457e453be1aec8a4a6025d2", "path_in_repo": "sslab-gatech/janus/lkl/tools/perf/pmu-events/jevents", "objdump": "0000000000404d74 <process_one_file>:\n  404d74:\t55                   \tpush   %rbp\n  404d75:\t48 89 e5             \tmov    %rsp,%rbp\n  404d78:\t48 83 ec 50          \tsub    $0x50,%rsp\n  404d7c:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  404d80:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  404d84:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n  404d87:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n  404d8b:\t83 7d bc 01          \tcmpl   $0x1,-0x44(%rbp)\n  404d8f:\t0f 94 c0             \tsete   %al\n  404d92:\t0f b6 c0             \tmovzbl %al,%eax\n  404d95:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  404d98:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n  404d9c:\t0f 94 c0             \tsete   %al\n  404d9f:\t0f b6 c0             \tmovzbl %al,%eax\n  404da2:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  404da5:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  404da9:\t8b 40 04             \tmov    0x4(%rax),%eax\n  404dac:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  404daf:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  404db6:\t83 7d e8 02          \tcmpl   $0x2,-0x18(%rbp)\n  404dba:\t75 37                \tjne    404df3 <process_one_file+0x7f>\n  404dbc:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  404dc0:\t74 31                \tje     404df3 <process_one_file+0x7f>\n  404dc2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  404dc6:\t8b 00                \tmov    (%rax),%eax\n  404dc8:\t48 98                \tcltq   \n  404dca:\t48 8d 50 fe          \tlea    -0x2(%rax),%rdx\n  404dce:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  404dd2:\t48 01 d0             \tadd    %rdx,%rax\n  404dd5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  404dd9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404ddd:\t0f b6 00             \tmovzbl (%rax),%eax\n  404de0:\t3c 2f                \tcmp    $0x2f,%al\n  404de2:\t74 07                \tje     404deb <process_one_file+0x77>\n  404de4:\t48 83 6d f8 01       \tsubq   $0x1,-0x8(%rbp)\n  404de9:\teb ee                \tjmp    404dd9 <process_one_file+0x65>\n  404deb:\t90                   \tnop\n  404dec:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  404df1:\teb 14                \tjmp    404e07 <process_one_file+0x93>\n  404df3:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  404df7:\t8b 00                \tmov    (%rax),%eax\n  404df9:\t48 63 d0             \tmovslq %eax,%rdx\n  404dfc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  404e00:\t48 01 d0             \tadd    %rdx,%rax\n  404e03:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  404e07:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  404e0b:\t48 8b 48 30          \tmov    0x30(%rax),%rcx\n  404e0f:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  404e13:\t75 14                \tjne    404e29 <process_one_file+0xb5>\n  404e15:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  404e19:\t74 07                \tje     404e22 <process_one_file+0xae>\n  404e1b:\tb8 eb 6a 40 00       \tmov    $0x406aeb,%eax\n  404e20:\teb 0c                \tjmp    404e2e <process_one_file+0xba>\n  404e22:\tb8 ed 6a 40 00       \tmov    $0x406aed,%eax\n  404e27:\teb 05                \tjmp    404e2e <process_one_file+0xba>\n  404e29:\tb8 ef 6a 40 00       \tmov    $0x406aef,%eax\n  404e2e:\t8b 35 6c 45 00 00    \tmov    0x456c(%rip),%esi        # 4093a0 <verbose>\n  404e34:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  404e37:\tff 75 c8             \tpushq  -0x38(%rbp)\n  404e3a:\tff 75 f8             \tpushq  -0x8(%rbp)\n  404e3d:\t49 89 c9             \tmov    %rcx,%r9\n  404e40:\t41 89 d0             \tmov    %edx,%r8d\n  404e43:\t48 89 c1             \tmov    %rax,%rcx\n  404e46:\tba f1 6a 40 00       \tmov    $0x406af1,%edx\n  404e4b:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  404e50:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404e55:\te8 39 d2 ff ff       \tcallq  402093 <eprintf>\n  404e5a:\t48 83 c4 10          \tadd    $0x10,%rsp\n  404e5e:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  404e62:\t74 06                \tje     404e6a <process_one_file+0xf6>\n  404e64:\t83 7d e8 03          \tcmpl   $0x3,-0x18(%rbp)\n  404e68:\t7e 0a                \tjle    404e74 <process_one_file+0x100>\n  404e6a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404e6f:\te9 d4 01 00 00       \tjmpq   405048 <process_one_file+0x2d4>\n  404e74:\t83 7d e8 01          \tcmpl   $0x1,-0x18(%rbp)\n  404e78:\t75 16                \tjne    404e90 <process_one_file+0x11c>\n  404e7a:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  404e7e:\t74 10                \tje     404e90 <process_one_file+0x11c>\n  404e80:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  404e84:\t48 89 c7             \tmov    %rax,%rdi\n  404e87:\te8 e9 fc ff ff       \tcallq  404b75 <is_leaf_dir>\n  404e8c:\t85 c0                \ttest   %eax,%eax\n  404e8e:\t75 14                \tjne    404ea4 <process_one_file+0x130>\n  404e90:\t83 7d e8 02          \tcmpl   $0x2,-0x18(%rbp)\n  404e94:\t0f 85 91 00 00 00    \tjne    404f2b <process_one_file+0x1b7>\n  404e9a:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  404e9e:\t0f 84 87 00 00 00    \tje     404f2b <process_one_file+0x1b7>\n  404ea4:\t8b 05 ce 44 00 00    \tmov    0x44ce(%rip),%eax        # 409378 <close_table>\n  404eaa:\t85 c0                \ttest   %eax,%eax\n  404eac:\t74 0f                \tje     404ebd <process_one_file+0x149>\n  404eae:\t48 8b 05 cb 44 00 00 \tmov    0x44cb(%rip),%rax        # 409380 <eventsfp>\n  404eb5:\t48 89 c7             \tmov    %rax,%rdi\n  404eb8:\te8 7a df ff ff       \tcallq  402e37 <print_events_table_suffix>\n  404ebd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404ec1:\t48 89 c7             \tmov    %rax,%rdi\n  404ec4:\te8 52 f6 ff ff       \tcallq  40451b <file_name_to_table_name>\n  404ec9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  404ecd:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  404ed2:\t75 37                \tjne    404f0b <process_one_file+0x197>\n  404ed4:\t48 8b 15 bd 44 00 00 \tmov    0x44bd(%rip),%rdx        # 409398 <prog>\n  404edb:\t8b 05 bf 44 00 00    \tmov    0x44bf(%rip),%eax        # 4093a0 <verbose>\n  404ee1:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  404ee5:\t49 89 c8             \tmov    %rcx,%r8\n  404ee8:\t48 89 d1             \tmov    %rdx,%rcx\n  404eeb:\tba 08 6b 40 00       \tmov    $0x406b08,%edx\n  404ef0:\t89 c6                \tmov    %eax,%esi\n  404ef2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  404ef7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404efc:\te8 92 d1 ff ff       \tcallq  402093 <eprintf>\n  404f01:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  404f06:\te9 3d 01 00 00       \tjmpq   405048 <process_one_file+0x2d4>\n  404f0b:\t48 8b 05 6e 44 00 00 \tmov    0x446e(%rip),%rax        # 409380 <eventsfp>\n  404f12:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  404f16:\t48 89 d6             \tmov    %rdx,%rsi\n  404f19:\t48 89 c7             \tmov    %rax,%rdi\n  404f1c:\te8 cf d8 ff ff       \tcallq  4027f0 <print_events_table_prefix>\n  404f21:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404f26:\te9 1d 01 00 00       \tjmpq   405048 <process_one_file+0x2d4>\n  404f2b:\t83 7d e8 01          \tcmpl   $0x1,-0x18(%rbp)\n  404f2f:\t75 6f                \tjne    404fa0 <process_one_file+0x22c>\n  404f31:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  404f35:\t74 69                \tje     404fa0 <process_one_file+0x22c>\n  404f37:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404f3b:\tbe 31 6b 40 00       \tmov    $0x406b31,%esi\n  404f40:\t48 89 c7             \tmov    %rax,%rdi\n  404f43:\te8 e8 c1 ff ff       \tcallq  401130 <strcmp@plt>\n  404f48:\t85 c0                \ttest   %eax,%eax\n  404f4a:\t75 1d                \tjne    404f69 <process_one_file+0x1f5>\n  404f4c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  404f50:\t48 89 c7             \tmov    %rax,%rdi\n  404f53:\te8 68 c3 ff ff       \tcallq  4012c0 <strdup@plt>\n  404f58:\t48 89 05 29 44 00 00 \tmov    %rax,0x4429(%rip)        # 409388 <mapfile>\n  404f5f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404f64:\te9 df 00 00 00       \tjmpq   405048 <process_one_file+0x2d4>\n  404f69:\t48 8b 15 28 44 00 00 \tmov    0x4428(%rip),%rdx        # 409398 <prog>\n  404f70:\t8b 05 2a 44 00 00    \tmov    0x442a(%rip),%eax        # 4093a0 <verbose>\n  404f76:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  404f7a:\t49 89 c8             \tmov    %rcx,%r8\n  404f7d:\t48 89 d1             \tmov    %rdx,%rcx\n  404f80:\tba 3d 6b 40 00       \tmov    $0x406b3d,%edx\n  404f85:\t89 c6                \tmov    %eax,%esi\n  404f87:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  404f8c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404f91:\te8 fd d0 ff ff       \tcallq  402093 <eprintf>\n  404f96:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404f9b:\te9 a8 00 00 00       \tjmpq   405048 <process_one_file+0x2d4>\n  404fa0:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  404fa4:\t74 44                \tje     404fea <process_one_file+0x276>\n  404fa6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404faa:\t48 89 c7             \tmov    %rax,%rdi\n  404fad:\te8 f2 fc ff ff       \tcallq  404ca4 <is_json_file>\n  404fb2:\t85 c0                \ttest   %eax,%eax\n  404fb4:\t75 34                \tjne    404fea <process_one_file+0x276>\n  404fb6:\t48 8b 15 db 43 00 00 \tmov    0x43db(%rip),%rdx        # 409398 <prog>\n  404fbd:\t8b 05 dd 43 00 00    \tmov    0x43dd(%rip),%eax        # 4093a0 <verbose>\n  404fc3:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  404fc7:\t49 89 c8             \tmov    %rcx,%r8\n  404fca:\t48 89 d1             \tmov    %rdx,%rcx\n  404fcd:\tba 58 6b 40 00       \tmov    $0x406b58,%edx\n  404fd2:\t89 c6                \tmov    %eax,%esi\n  404fd4:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  404fd9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404fde:\te8 b0 d0 ff ff       \tcallq  402093 <eprintf>\n  404fe3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404fe8:\teb 5e                \tjmp    405048 <process_one_file+0x2d4>\n  404fea:\t83 7d e8 01          \tcmpl   $0x1,-0x18(%rbp)\n  404fee:\t7e 17                \tjle    405007 <process_one_file+0x293>\n  404ff0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404ff4:\t48 89 c7             \tmov    %rax,%rdi\n  404ff7:\te8 6b d7 ff ff       \tcallq  402767 <add_topic>\n  404ffc:\t85 c0                \ttest   %eax,%eax\n  404ffe:\t74 07                \tje     405007 <process_one_file+0x293>\n  405000:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n  405005:\teb 41                \tjmp    405048 <process_one_file+0x2d4>\n  405007:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  40500b:\t74 38                \tje     405045 <process_one_file+0x2d1>\n  40500d:\t48 8b 05 6c 43 00 00 \tmov    0x436c(%rip),%rax        # 409380 <eventsfp>\n  405014:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  405018:\te8 8b d6 ff ff       \tcallq  4026a8 <get_topic>\n  40501d:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  405021:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  405025:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  405029:\tbe 27 28 40 00       \tmov    $0x402827,%esi\n  40502e:\t48 89 c7             \tmov    %rax,%rdi\n  405031:\te8 fe e2 ff ff       \tcallq  403334 <json_events>\n  405036:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  405039:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40503d:\t48 89 c7             \tmov    %rax,%rdi\n  405040:\te8 eb bf ff ff       \tcallq  401030 <free@plt>\n  405045:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  405048:\tc9                   \tleaveq \n  405049:\tc3                   \tretq   ", "code_s": "__int64 __fastcall process_one_file(const char *filename,\n                                    const struct stat *status, int flag,\n                                    struct FTW *info) {\n  const char *v4;\n  __int64 result;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  FILE *v9;\n  void *ptr;\n  char *v11;\n  int v12;\n  _BOOL4 v13;\n  _BOOL4 v14;\n  unsigned int v15;\n  char *s1;\n  v14 = flag == Number;\n  v13 = flag == Number;\n  v12 = info->level;\n  v15 = Number;\n  if (v12 == Number && v14) {\n    for (s1 = (char *)&filename[info->base - Number]; *s1 != Number; --s1)\n      ;\n    ++s1;\n  } else {\n    s1 = (char *)&filename[info->base];\n  }\n  if (v13) {\n    v4 = String;\n  } else if (v14) {\n    v4 = String;\n  } else {\n    v4 = String;\n  }\n  eprintf(Number, verbose, String, (__int64)v4, (unsigned int)v12,\n          status->st_size, s1, filename);\n  if (!v12 || v12 > Number)\n    return Number L;\n  if (v12 == Number && v14 && (unsigned int)is_leaf_dir(filename) ||\n      v12 == Number && v14) {\n    if (close_table)\n      print_events_table_suffix(eventsfp);\n    v11 = file_name_to_table_name(s1);\n    if (v11) {\n      print_events_table_prefix(eventsfp, v11);\n      result = Number L;\n    } else {\n      eprintf(Number, verbose, String, prog, (__int64)s1, v6);\n      result = Number;\n    }\n  } else if (v12 == Number && v13) {\n    if (!strcmp(s1, String))\n      mapfile_0 = (__int64)strdup(filename);\n    else\n      eprintf(Number, verbose, String, prog, (__int64)filename, v7);\n    result = Number L;\n  } else if (!v13 || is_json_file(s1)) {\n    if (v12 > Number && (unsigned int)add_topic(s1)) {\n      result = Number L;\n    } else {\n      if (v13) {\n        v9 = eventsfp;\n        ptr = get_topic();\n        v15 = json_events(\n            filename,\n            (__int64(__fastcall *)(__int64, void *, char *, char *, void *,\n                                   void *, void *, void *, void *, void *,\n                                   void *))print_events_table_entry,\n            (__int64)&v9);\n        free(ptr);\n      }\n      result = v15;\n    }\n  } else {\n    eprintf(Number, verbose, String, prog, (__int64)filename, v8);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl process_one_file(const char *fpath, const stat *sb, int typeflag,\n                             FTW *ftwbuf) {\n  const char *v4;\n  int result;\n  perf_entry_data <span class=\"supfact\">data</span>;\n  char *tblname;\n  int level;\n  int is_file;\n  int is_dir;\n  int err;\n  char *bname;\n  is_dir = typeflag == Number;\n  is_file = typeflag == Number;\n  level = ftwbuf->level;\n  err = Number;\n  if (level == Number && is_dir) {\n    for (bname = (char *)&fpath[ftwbuf->base - Number]; *bname != Number;\n         --bname)\n      ;\n    ++bname;\n  } else {\n    bname = (char *)&fpath[ftwbuf->base];\n  }\n  if (is_file) {\n    v4 = String;\n  } else if (is_dir) {\n    v4 = String;\n  } else {\n    v4 = String;\n  }\n  eprintf(Number, verbose, String, v4, (unsigned int)level, sb->st_size, bname,\n          fpath);\n  if (!level || level > Number)\n    return Number;\n  if (level == Number && is_dir && is_leaf_dir(fpath) ||\n      level == Number && is_dir) {\n    if (close_table)\n      print_events_table_suffix(eventsfp);\n    tblname = file_name_to_table_name(bname);\n    if (tblname) {\n      print_events_table_prefix(eventsfp, tblname);\n      result = Number;\n    } else {\n      eprintf(Number, verbose, String, prog, bname);\n      result = Number;\n    }\n  } else if (level == Number && is_file) {\n    if (!strcmp(bname, String))\n      mapfile_0 = strdup(fpath);\n    else\n      eprintf(Number, verbose, String, prog, fpath);\n    result = Number;\n  } else if (!is_file || is_json_file(bname)) {\n    if (level > Number && add_topic(bname)) {\n      result = Number;\n    } else {\n      if (is_file) {\n        <span class=\"supfact\">data</span>.outfp = eventsfp;\n        <span class=\"supfact\">data</span>.topic = get_topic();\n        err = json_events(\n            fpath,\n            (int (*)(void *, char *, char *, char *, char *, char *, char *,\n                     char *, char *, char *, char *))print_events_table_entry,\n            &<span class=\"supfact\">data</span>);\n        free(<span class=\"supfact\">data</span>.topic);\n      }\n      result = err;\n    }\n  } else {\n    eprintf(Number, verbose, String, prog, fpath);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v9", "type": "struct perf_entry_data { FILE * outfp; char * topic; }", "pred_name": "data", "ref_name": "data", "ref_type": "struct perf_entry_data { FILE * outfp; char * topic; }"}], "body_in_train": true}, {"repo_owner": "pathscale", "repo_name": "absoft", "path": "pathscale/absoft/b5b18face89bf1f2768a2fee0a6e74b8602a44c70b136265c81032cf4e378d41", "path_in_repo": "pathscale/absoft/svn/trunk/kpro64/targx8664_builtonia32/libfortran/matmul_c4s.pg.o", "objdump": "000000000000089d <_MATMUL_C4S>:\n 89d:\t55                   \tpush   %rbp\n 89e:\t48 89 e5             \tmov    %rsp,%rbp\n 8a1:\t41 55                \tpush   %r13\n 8a3:\t41 54                \tpush   %r12\n 8a5:\t53                   \tpush   %rbx\n 8a6:\t48 81 ec c8 00 00 00 \tsub    $0xc8,%rsp\n 8ad:\te8 00 00 00 00       \tcallq  8b2 <_MATMUL_C4S+0x15>\n 8b2:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n 8b9:\t48 89 b5 30 ff ff ff \tmov    %rsi,-0xd0(%rbp)\n 8c0:\t48 89 95 28 ff ff ff \tmov    %rdx,-0xd8(%rbp)\n 8c7:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 8cf <_MATMUL_C4S+0x32>\n 8ce:\t00 \n 8cf:\tf2 0f 11 85 48 ff ff \tmovsd  %xmm0,-0xb8(%rbp)\n 8d6:\tff \n 8d7:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 8db:\tf2 0f 11 85 40 ff ff \tmovsd  %xmm0,-0xc0(%rbp)\n 8e2:\tff \n 8e3:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n 8ea:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 8ee:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n 8f2:\t48 8b 95 28 ff ff ff \tmov    -0xd8(%rbp),%rdx\n 8f9:\t48 8b b5 30 ff ff ff \tmov    -0xd0(%rbp),%rsi\n 900:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 907:\t48 89 c7             \tmov    %rax,%rdi\n 90a:\te8 20 f7 ff ff       \tcallq  2f <_premult>\n 90f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 913:\t48 8b 00             \tmov    (%rax),%rax\n 916:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 91a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 91e:\t48 83 c0 04          \tadd    $0x4,%rax\n 922:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 926:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 92a:\t8b 40 48             \tmov    0x48(%rax),%eax\n 92d:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n 930:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 934:\t89 50 48             \tmov    %edx,0x48(%rax)\n 937:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 93b:\t8b 40 4c             \tmov    0x4c(%rax),%eax\n 93e:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n 941:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 945:\t89 50 4c             \tmov    %edx,0x4c(%rax)\n 948:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 94c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 950:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n 954:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 958:\t48 83 c0 08          \tadd    $0x8,%rax\n 95c:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n 960:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 964:\t8b 40 58             \tmov    0x58(%rax),%eax\n 967:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n 96a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 96e:\t89 50 58             \tmov    %edx,0x58(%rax)\n 971:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 975:\t8b 40 5c             \tmov    0x5c(%rax),%eax\n 978:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n 97b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 97f:\t89 50 5c             \tmov    %edx,0x5c(%rax)\n 982:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 986:\t48 8d 58 5c          \tlea    0x5c(%rax),%rbx\n 98a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 98e:\t4c 8d 40 58          \tlea    0x58(%rax),%r8\n 992:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 996:\t4c 8d 58 54          \tlea    0x54(%rax),%r11\n 99a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 99e:\t4c 8d 50 50          \tlea    0x50(%rax),%r10\n 9a2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 9a6:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n 9aa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 9ae:\t4c 8d 48 4c          \tlea    0x4c(%rax),%r9\n 9b2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 9b6:\t4c 8d 68 48          \tlea    0x48(%rax),%r13\n 9ba:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 9be:\t48 8d 50 44          \tlea    0x44(%rax),%rdx\n 9c2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 9c6:\t48 8d 70 40          \tlea    0x40(%rax),%rsi\n 9ca:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 9ce:\t48 8d 78 3c          \tlea    0x3c(%rax),%rdi\n 9d2:\t4c 8b 65 d0          \tmov    -0x30(%rbp),%r12\n 9d6:\t48 8d 85 48 ff ff ff \tlea    -0xb8(%rbp),%rax\n 9dd:\t53                   \tpush   %rbx\n 9de:\t41 50                \tpush   %r8\n 9e0:\tff 75 c0             \tpushq  -0x40(%rbp)\n 9e3:\t4c 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%r8\n 9ea:\t41 50                \tpush   %r8\n 9ec:\t41 53                \tpush   %r11\n 9ee:\t41 52                \tpush   %r10\n 9f0:\t51                   \tpush   %rcx\n 9f1:\t41 51                \tpush   %r9\n 9f3:\t4d 89 e9             \tmov    %r13,%r9\n 9f6:\t4d 89 e0             \tmov    %r12,%r8\n 9f9:\t48 89 c1             \tmov    %rax,%rcx\n 9fc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n a01:\te8 00 00 00 00       \tcallq  a06 <_MATMUL_C4S+0x169>\n a06:\t48 83 c4 40          \tadd    $0x40,%rsp\n a0a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a0e:\t48 8d 58 5c          \tlea    0x5c(%rax),%rbx\n a12:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a16:\t4c 8d 40 58          \tlea    0x58(%rax),%r8\n a1a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a1e:\t4c 8d 58 54          \tlea    0x54(%rax),%r11\n a22:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a26:\t4c 8d 50 50          \tlea    0x50(%rax),%r10\n a2a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a2e:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n a32:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a36:\t4c 8d 48 4c          \tlea    0x4c(%rax),%r9\n a3a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a3e:\t4c 8d 68 48          \tlea    0x48(%rax),%r13\n a42:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a46:\t48 8d 50 44          \tlea    0x44(%rax),%rdx\n a4a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a4e:\t48 8d 70 40          \tlea    0x40(%rax),%rsi\n a52:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a56:\t48 8d 78 3c          \tlea    0x3c(%rax),%rdi\n a5a:\t4c 8b 65 c8          \tmov    -0x38(%rbp),%r12\n a5e:\t48 8d 85 48 ff ff ff \tlea    -0xb8(%rbp),%rax\n a65:\t53                   \tpush   %rbx\n a66:\t41 50                \tpush   %r8\n a68:\tff 75 b8             \tpushq  -0x48(%rbp)\n a6b:\t4c 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%r8\n a72:\t41 50                \tpush   %r8\n a74:\t41 53                \tpush   %r11\n a76:\t41 52                \tpush   %r10\n a78:\t51                   \tpush   %rcx\n a79:\t41 51                \tpush   %r9\n a7b:\t4d 89 e9             \tmov    %r13,%r9\n a7e:\t4d 89 e0             \tmov    %r12,%r8\n a81:\t48 89 c1             \tmov    %rax,%rcx\n a84:\tb8 00 00 00 00       \tmov    $0x0,%eax\n a89:\te8 00 00 00 00       \tcallq  a8e <_MATMUL_C4S+0x1f1>\n a8e:\t48 83 c4 40          \tadd    $0x40,%rsp\n a92:\t90                   \tnop\n a93:\t48 8d 65 e8          \tlea    -0x18(%rbp),%rsp\n a97:\t5b                   \tpop    %rbx\n a98:\t41 5c                \tpop    %r12\n a9a:\t41 5d                \tpop    %r13\n a9c:\t5d                   \tpop    %rbp\n a9d:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall MATMUL_C4S(__int64 a1, __int64 a2, __int64 a3) {\n  __int64 v4;\n  __int64 v5;\n  char v6[Number];\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  char *v11;\n  v5 = Number;\n  v4 = Number L;\n  v11 = v6;\n  premult(a1, a2, a3, (__int64)v6);\n  v10 = *(_QWORD *)v11;\n  v9 = v10 + Number;\n  *((_DWORD *)v11 + Number) *= Number;\n  *((_DWORD *)v11 + Number) *= Number;\n  v8 = *((_QWORD *)v11 + Number);\n  v7 = v8 + Number;\n  *((_DWORD *)v11 + Number) *= Number;\n  *((_DWORD *)v11 + Number) *= Number;\n  s4sgemmx__(v11 + Number, v11 + Number, v11 + Number, &v5, v10, v11 + Number,\n             v11 + Number, *((_QWORD *)v11 + Number), v11 + Number,\n             v11 + Number, &v4, v8, v11 + Number, v11 + Number);\n  return s4sgemmx__(v11 + Number, v11 + Number, v11 + Number, &v5, v9,\n                    v11 + Number, v11 + Number, *((_QWORD *)v11 + Number),\n                    v11 + Number, v11 + Number, &v4, v7, v11 + Number,\n                    v11 + Number);\n}", "code_t": "void __cdecl MATMUL_C4S(DopeVectorType *RESULT, DopeVectorType *MATRIX_A,\n                        DopeVectorType *MATRIX_B) {\n  _f_real8 zero;\n  _f_real8 one;\n  MatrixDimenType <span class=\"supfact\">matdimdata</span>;\n  _f_real8 *Ci;\n  _f_real8 *Cr;\n  _f_real4 *Ai;\n  _f_real4 *Ar;\n  MatrixDimenType *MATDIM;\n  one = Number;\n  zero = Number;\n  MATDIM = &<span class=\"supfact\">matdimdata</span>;\n  premult(RESULT, MATRIX_A, MATRIX_B, &<span class=\"supfact\">matdimdata</span>);\n  Ar = (_f_real4 *)MATDIM->A;\n  Ai = Ar + Number;\n  MATDIM->inc1a *= Number;\n  MATDIM->inc2a *= Number;\n  Cr = (_f_real8 *)MATDIM->C;\n  Ci = Cr + Number;\n  MATDIM->inc1c *= Number;\n  MATDIM->inc2c *= Number;\n  s4sgemmx__(&MATDIM->m, &MATDIM->n, &MATDIM->k, &one, Ar, &MATDIM->inc1a,\n             &MATDIM->inc2a, MATDIM->B, &MATDIM->inc1b, &MATDIM->inc2b, &zero,\n             Cr, &MATDIM->inc1c, &MATDIM->inc2c);\n  s4sgemmx__(&MATDIM->m, &MATDIM->n, &MATDIM->k, &one, Ai, &MATDIM->inc1a,\n             &MATDIM->inc2a, MATDIM->B, &MATDIM->inc1b, &MATDIM->inc2b, &zero,\n             Ci, &MATDIM->inc1c, &MATDIM->inc2c);\n}", "var": [{"name": "v6", "type": "struct MatrixDimenType { void * A; void * B; void * C; int ndima; int ndimb; int ndimc; int n1a; int n2a; int n1b; int n2b; int n1c; int n2c; int m; int n; int k; int inc1a; int inc2a; int inc1b; int inc2b; int inc1c; int inc2c; }", "pred_name": "matdimdata", "ref_name": "matdimdata", "ref_type": "struct MatrixDimenType { void * A; void * B; void * C; int ndima; int ndimb; int ndimc; int n1a; int n2a; int n1b; int n2b; int n1c; int n2c; int m; int n; int k; int inc1a; int inc2a; int inc1b; int inc2b; int inc1c; int inc2c; }"}], "body_in_train": false}, {"repo_owner": "Jakub-Ciecierski", "repo_name": "Unix", "path": "Jakub-Ciecierski/Unix/b7ea718873cc37e44dbc02e92c0e7df1597c6bdbbffd5fcac70cd0d948a35101", "path_in_repo": "Jakub-Ciecierski/Unix/sockets/tutorial/clientLocal", "objdump": "0000000000401b99 <connect_local_socket>:\n  401b99:\t55                   \tpush   %rbp\n  401b9a:\t48 89 e5             \tmov    %rsp,%rbp\n  401b9d:\t48 81 ec a0 01 00 00 \tsub    $0x1a0,%rsp\n  401ba4:\t48 89 bd d8 fe ff ff \tmov    %rdi,-0x128(%rbp)\n  401bab:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401bb0:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401bb5:\te8 1c fa ff ff       \tcallq  4015d6 <make_socket>\n  401bba:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  401bbd:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n  401bc4:\t48 8b 95 d8 fe ff ff \tmov    -0x128(%rbp),%rdx\n  401bcb:\t48 89 d6             \tmov    %rdx,%rsi\n  401bce:\t48 89 c7             \tmov    %rax,%rdi\n  401bd1:\te8 76 fa ff ff       \tcallq  40164c <make_local_address>\n  401bd6:\t48 8b 85 60 fe ff ff \tmov    -0x1a0(%rbp),%rax\n  401bdd:\t48 8b 95 68 fe ff ff \tmov    -0x198(%rbp),%rdx\n  401be4:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n  401beb:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n  401bf2:\t48 8b 85 70 fe ff ff \tmov    -0x190(%rbp),%rax\n  401bf9:\t48 8b 95 78 fe ff ff \tmov    -0x188(%rbp),%rdx\n  401c00:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n  401c04:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n  401c08:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n  401c0f:\t48 8b 95 88 fe ff ff \tmov    -0x178(%rbp),%rdx\n  401c16:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n  401c1a:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  401c1e:\t48 8b 85 90 fe ff ff \tmov    -0x170(%rbp),%rax\n  401c25:\t48 8b 95 98 fe ff ff \tmov    -0x168(%rbp),%rdx\n  401c2c:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n  401c30:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n  401c34:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n  401c3b:\t48 8b 95 a8 fe ff ff \tmov    -0x158(%rbp),%rdx\n  401c42:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  401c46:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  401c4a:\t48 8b 85 b0 fe ff ff \tmov    -0x150(%rbp),%rax\n  401c51:\t48 8b 95 b8 fe ff ff \tmov    -0x148(%rbp),%rdx\n  401c58:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  401c5c:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  401c60:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n  401c67:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  401c6b:\t8b 85 c8 fe ff ff    \tmov    -0x138(%rbp),%eax\n  401c71:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  401c74:\t0f b7 85 cc fe ff ff \tmovzwl -0x134(%rbp),%eax\n  401c7b:\t66 89 45 dc          \tmov    %ax,-0x24(%rbp)\n  401c7f:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  401c86:\t48 83 c0 02          \tadd    $0x2,%rax\n  401c8a:\t48 89 c7             \tmov    %rax,%rdi\n  401c8d:\te8 0e f4 ff ff       \tcallq  4010a0 <strlen@plt>\n  401c92:\t8d 50 02             \tlea    0x2(%rax),%edx\n  401c95:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  401c9c:\t48 89 c1             \tmov    %rax,%rcx\n  401c9f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401ca2:\t48 89 ce             \tmov    %rcx,%rsi\n  401ca5:\t89 c7                \tmov    %eax,%edi\n  401ca7:\te8 f4 f4 ff ff       \tcallq  4011a0 <connect@plt>\n  401cac:\t85 c0                \ttest   %eax,%eax\n  401cae:\t0f 89 14 02 00 00    \tjns    401ec8 <connect_local_socket+0x32f>\n  401cb4:\te8 77 f3 ff ff       \tcallq  401030 <__errno_location@plt>\n  401cb9:\t8b 00                \tmov    (%rax),%eax\n  401cbb:\t83 f8 04             \tcmp    $0x4,%eax\n  401cbe:\t74 46                \tje     401d06 <connect_local_socket+0x16d>\n  401cc0:\t48 8b 05 79 34 00 00 \tmov    0x3479(%rip),%rax        # 405140 <stderr@@GLIBC_2.2.5>\n  401cc7:\tb9 3f 00 00 00       \tmov    $0x3f,%ecx\n  401ccc:\tba 75 30 40 00       \tmov    $0x403075,%edx\n  401cd1:\tbe 7f 30 40 00       \tmov    $0x40307f,%esi\n  401cd6:\t48 89 c7             \tmov    %rax,%rdi\n  401cd9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401cde:\te8 3d f4 ff ff       \tcallq  401120 <fprintf@plt>\n  401ce3:\tbf ca 30 40 00       \tmov    $0x4030ca,%edi\n  401ce8:\te8 83 f4 ff ff       \tcallq  401170 <perror@plt>\n  401ced:\tbe 09 00 00 00       \tmov    $0x9,%esi\n  401cf2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401cf7:\te8 34 f4 ff ff       \tcallq  401130 <kill@plt>\n  401cfc:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401d01:\te8 8a f4 ff ff       \tcallq  401190 <exit@plt>\n  401d06:\tc7 85 68 ff ff ff 04 \tmovl   $0x4,-0x98(%rbp)\n  401d0d:\t00 00 00 \n  401d10:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401d15:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  401d1a:\t48 8d 95 e0 fe ff ff \tlea    -0x120(%rbp),%rdx\n  401d21:\t48 89 d7             \tmov    %rdx,%rdi\n  401d24:\tfc                   \tcld    \n  401d25:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  401d28:\t89 f8                \tmov    %edi,%eax\n  401d2a:\t89 ca                \tmov    %ecx,%edx\n  401d2c:\t89 55 f8             \tmov    %edx,-0x8(%rbp)\n  401d2f:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  401d32:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401d35:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  401d38:\t85 c0                \ttest   %eax,%eax\n  401d3a:\t0f 48 c2             \tcmovs  %edx,%eax\n  401d3d:\tc1 f8 06             \tsar    $0x6,%eax\n  401d40:\t89 c6                \tmov    %eax,%esi\n  401d42:\t48 63 c6             \tmovslq %esi,%rax\n  401d45:\t48 8b bc c5 e0 fe ff \tmov    -0x120(%rbp,%rax,8),%rdi\n  401d4c:\tff \n  401d4d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401d50:\t99                   \tcltd   \n  401d51:\tc1 ea 1a             \tshr    $0x1a,%edx\n  401d54:\t01 d0                \tadd    %edx,%eax\n  401d56:\t83 e0 3f             \tand    $0x3f,%eax\n  401d59:\t29 d0                \tsub    %edx,%eax\n  401d5b:\tba 01 00 00 00       \tmov    $0x1,%edx\n  401d60:\t89 c1                \tmov    %eax,%ecx\n  401d62:\t48 d3 e2             \tshl    %cl,%rdx\n  401d65:\t48 89 d0             \tmov    %rdx,%rax\n  401d68:\t48 09 c7             \tor     %rax,%rdi\n  401d6b:\t48 89 fa             \tmov    %rdi,%rdx\n  401d6e:\t48 63 c6             \tmovslq %esi,%rax\n  401d71:\t48 89 94 c5 e0 fe ff \tmov    %rdx,-0x120(%rbp,%rax,8)\n  401d78:\tff \n  401d79:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401d7c:\t8d 78 01             \tlea    0x1(%rax),%edi\n  401d7f:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n  401d86:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  401d8c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  401d91:\t48 89 c2             \tmov    %rax,%rdx\n  401d94:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401d99:\te8 a2 f3 ff ff       \tcallq  401140 <select@plt>\n  401d9e:\t48 98                \tcltq   \n  401da0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  401da4:\t48 83 7d e8 ff       \tcmpq   $0xffffffffffffffff,-0x18(%rbp)\n  401da9:\t75 0c                \tjne    401db7 <connect_local_socket+0x21e>\n  401dab:\te8 80 f2 ff ff       \tcallq  401030 <__errno_location@plt>\n  401db0:\t8b 00                \tmov    (%rax),%eax\n  401db2:\t83 f8 04             \tcmp    $0x4,%eax\n  401db5:\t74 c2                \tje     401d79 <connect_local_socket+0x1e0>\n  401db7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401dbb:\t48 85 c0             \ttest   %rax,%rax\n  401dbe:\t79 46                \tjns    401e06 <connect_local_socket+0x26d>\n  401dc0:\t48 8b 05 79 33 00 00 \tmov    0x3379(%rip),%rax        # 405140 <stderr@@GLIBC_2.2.5>\n  401dc7:\tb9 47 00 00 00       \tmov    $0x47,%ecx\n  401dcc:\tba 75 30 40 00       \tmov    $0x403075,%edx\n  401dd1:\tbe 7f 30 40 00       \tmov    $0x40307f,%esi\n  401dd6:\t48 89 c7             \tmov    %rax,%rdi\n  401dd9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401dde:\te8 3d f3 ff ff       \tcallq  401120 <fprintf@plt>\n  401de3:\tbf d2 30 40 00       \tmov    $0x4030d2,%edi\n  401de8:\te8 83 f3 ff ff       \tcallq  401170 <perror@plt>\n  401ded:\tbe 09 00 00 00       \tmov    $0x9,%esi\n  401df2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401df7:\te8 34 f3 ff ff       \tcallq  401130 <kill@plt>\n  401dfc:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401e01:\te8 8a f3 ff ff       \tcallq  401190 <exit@plt>\n  401e06:\t48 8d 8d 68 ff ff ff \tlea    -0x98(%rbp),%rcx\n  401e0d:\t48 8d 95 6c ff ff ff \tlea    -0x94(%rbp),%rdx\n  401e14:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401e17:\t49 89 c8             \tmov    %rcx,%r8\n  401e1a:\t48 89 d1             \tmov    %rdx,%rcx\n  401e1d:\tba 04 00 00 00       \tmov    $0x4,%edx\n  401e22:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401e27:\t89 c7                \tmov    %eax,%edi\n  401e29:\te8 d2 f2 ff ff       \tcallq  401100 <getsockopt@plt>\n  401e2e:\t85 c0                \ttest   %eax,%eax\n  401e30:\t79 46                \tjns    401e78 <connect_local_socket+0x2df>\n  401e32:\t48 8b 05 07 33 00 00 \tmov    0x3307(%rip),%rax        # 405140 <stderr@@GLIBC_2.2.5>\n  401e39:\tb9 49 00 00 00       \tmov    $0x49,%ecx\n  401e3e:\tba 75 30 40 00       \tmov    $0x403075,%edx\n  401e43:\tbe 7f 30 40 00       \tmov    $0x40307f,%esi\n  401e48:\t48 89 c7             \tmov    %rax,%rdi\n  401e4b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401e50:\te8 cb f2 ff ff       \tcallq  401120 <fprintf@plt>\n  401e55:\tbf d9 30 40 00       \tmov    $0x4030d9,%edi\n  401e5a:\te8 11 f3 ff ff       \tcallq  401170 <perror@plt>\n  401e5f:\tbe 09 00 00 00       \tmov    $0x9,%esi\n  401e64:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401e69:\te8 c2 f2 ff ff       \tcallq  401130 <kill@plt>\n  401e6e:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401e73:\te8 18 f3 ff ff       \tcallq  401190 <exit@plt>\n  401e78:\t8b 85 6c ff ff ff    \tmov    -0x94(%rbp),%eax\n  401e7e:\t85 c0                \ttest   %eax,%eax\n  401e80:\t74 46                \tje     401ec8 <connect_local_socket+0x32f>\n  401e82:\t48 8b 05 b7 32 00 00 \tmov    0x32b7(%rip),%rax        # 405140 <stderr@@GLIBC_2.2.5>\n  401e89:\tb9 4a 00 00 00       \tmov    $0x4a,%ecx\n  401e8e:\tba 75 30 40 00       \tmov    $0x403075,%edx\n  401e93:\tbe 7f 30 40 00       \tmov    $0x40307f,%esi\n  401e98:\t48 89 c7             \tmov    %rax,%rdi\n  401e9b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401ea0:\te8 7b f2 ff ff       \tcallq  401120 <fprintf@plt>\n  401ea5:\tbf ca 30 40 00       \tmov    $0x4030ca,%edi\n  401eaa:\te8 c1 f2 ff ff       \tcallq  401170 <perror@plt>\n  401eaf:\tbe 09 00 00 00       \tmov    $0x9,%esi\n  401eb4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401eb9:\te8 72 f2 ff ff       \tcallq  401130 <kill@plt>\n  401ebe:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401ec3:\te8 c8 f2 ff ff       \tcallq  401190 <exit@plt>\n  401ec8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401ecb:\tc9                   \tleaveq \n  401ecc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall connect_local_socket(const char *a1) {\n  int v1;\n  struct sockaddr v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  int v15;\n  __int16 v16;\n  const char *v17;\n  fd_set writefds;\n  __int64 v19;\n  socklen_t optlen;\n  int optval;\n  struct sockaddr addr;\n  __int64 v23;\n  __int64 v24;\n  __int64 v25;\n  __int64 v26;\n  __int64 v27;\n  __int64 v28;\n  __int64 v29;\n  __int64 v30;\n  __int64 v31;\n  __int64 v32;\n  __int64 v33;\n  int v34;\n  __int16 v35;\n  __int64 v36;\n  unsigned int v37;\n  int v38;\n  int fd;\n  v17 = a1;\n  fd = make_socket(Number, Number);\n  make_local_address((__int64)&v3, a1);\n  addr = v3;\n  v23 = v4;\n  v24 = v5;\n  v25 = v6;\n  v26 = v7;\n  v27 = v8;\n  v28 = v9;\n  v29 = v10;\n  v30 = v11;\n  v31 = v12;\n  v32 = v13;\n  v33 = v14;\n  v34 = v15;\n  v35 = v16;\n  v1 = strlen(addr.sa_data);\n  if (connect(fd, &addr, v1 + Number) < Number) {\n    if (*__errno_location() != Number) {\n      fprintf(stderr, String, String, Number L);\n      perror(String);\n      kill(Number, Number);\n      exit(Number);\n    }\n    optlen = Number;\n    memset(&writefds, Number, sizeof(writefds));\n    v38 = Number;\n    v37 = (unsigned int)&v19;\n    writefds.fds_bits[fd / Number] |= Number L << (fd % Number);\n    do\n      v36 = select(fd + Number, Number L, &writefds, Number L, Number L);\n    while (v36 == Number && *__errno_location() == Number);\n    if (v36 < Number) {\n      fprintf(stderr, String, String, Number L);\n      perror(String);\n      kill(Number, Number);\n      exit(Number);\n    }\n    if (getsockopt(fd, Number, Number, &optval, &optlen) < Number) {\n      fprintf(stderr, String, String, Number L);\n      perror(String);\n      kill(Number, Number);\n      exit(Number);\n    }\n    if (optval) {\n      fprintf(stderr, String, String, Number L);\n      perror(String);\n      kill(Number, Number);\n      exit(Number);\n    }\n  }\n  return (unsigned int)fd;\n}", "code_t": "int __cdecl connect_local_socket(char *name) {\n  int v1;\n  sockaddr_un <span class=\"supfact\">v3</span>;\n  char *namea;\n  fd_set <span class=\"supfact\">wfds</span>;\n  __int64 v6;\n  socklen_t size;\n  int status;\n  sockaddr_un <span class=\"supfact\">addr</span>;\n  __int64 __result;\n  int __d1;\n  int __d0;\n  int socketfd;\n  namea = name;\n  socketfd = make_socket(Number, Number);\n  make_local_address(&<span class=\"supfact\">v3</span>, name);\n  <span class=\"supfact\">addr</span> = <span class=\"supfact\">v3</span>;\n  v1 = strlen(<span class=\"supfact\">addr</span>.sun_path);\n  if (connect(socketfd, (const struct sockaddr *)&<span class=\"supfact\">addr</span>,\n              v1 + Number) < Number) {\n    if (*__errno_location() != Number) {\n      fprintf(stderr, String, String, Number L);\n      perror(String);\n      kill(Number, Number);\n      exit(Number);\n    }\n    size = Number;\n    memset(&<span class=\"supfact\">wfds</span>, Number, sizeof(<span class=\"supfact\">wfds</span>));\n    __d0 = Number;\n    __d1 = (unsigned int)&v6;\n    <span class=\"supfact\">wfds</span>.fds_bits[socketfd / Number] |= Number L\n                                                        << (socketfd % Number);\n    do\n      __result = select(socketfd + Number, Number L, &<span class=\"supfact\">wfds</span>,\n                        Number L, Number L);\n    while (__result == Number && *__errno_location() == Number);\n    if (__result < Number) {\n      fprintf(stderr, String, String, Number L);\n      perror(String);\n      kill(Number, Number);\n      exit(Number);\n    }\n    if (getsockopt(socketfd, Number, Number, &status, &size) < Number) {\n      fprintf(stderr, String, String, Number L);\n      perror(String);\n      kill(Number, Number);\n      exit(Number);\n    }\n    if (status) {\n      fprintf(stderr, String, String, Number L);\n      perror(String);\n      kill(Number, Number);\n      exit(Number);\n    }\n  }\n  return socketfd;\n}", "var": [{"name": "v3", "type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }", "pred_name": "v3", "ref_name": "v3", "ref_type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }"}, {"name": "writefds", "type": "struct fd_set { __fd_mask[16] __fds_bits; }", "pred_name": "wfds", "ref_name": "wfds", "ref_type": "struct fd_set { __fd_mask[16] fds_bits; }"}, {"name": "addr", "type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }", "pred_name": "addr", "ref_name": "addr", "ref_type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }"}], "body_in_train": true}, {"repo_owner": "daniloegea", "repo_name": "freebsd", "path": "daniloegea/freebsd/aeae63fb709049f5d1786436080f6ac9bed86c1793e6a23aea7af49a9d02c439", "path_in_repo": "daniloegea/freebsd/contrib/groff/src/roff/troff/input.o", "objdump": "00000000000001fc <_ZL28interpolate_string_with_args6symbol.cold>:\n 1fc:\t48 89 ef             \tmov    %rbp,%rdi\n 1ff:\tbe a8 00 00 00       \tmov    $0xa8,%esi\n 204:\te8 00 00 00 00       \tcallq  209 <_ZL28interpolate_string_with_args6symbol.cold+0xd>\n 209:\t4c 89 e7             \tmov    %r12,%rdi\n 20c:\te8 00 00 00 00       \tcallq  211 <_ZL20composite_glyph_name6symbol.cold>", "code_s": "void __fastcall __noreturn interpolate_string_with_args() {\n  void *v0;\n  struct _Unwind_Exception *v1;\n  operator delete(v0, Number);\n  Unwind_Resume(v1);\n}", "code_t": "void __fastcall __noreturn interpolate_string_with_args() {\n  void *v0;\n  struct _Unwind_Exception *<span class=\"supfact\">v1</span>;\n  operator delete(v0, Number);\n  Unwind_Resume(<span class=\"supfact\">v1</span>);\n}", "var": [{"name": "v1", "type": "void *", "pred_name": "v1", "ref_name": "v1", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "peterfillmore", "repo_name": "QEMU-Experimentation", "path": "peterfillmore/QEMU-Experimentation/2ceebfe4ba3f9befd3bdf43c42d0305503f40f8b2e526fb2376dfe57f1fe9c0a", "path_in_repo": "peterfillmore/QEMU-Experimentation//qga/main.o", "objdump": "000000000000049e <ga_log>:\n     49e:\t55                   \tpush   %rbp\n     49f:\t48 89 e5             \tmov    %rsp,%rbp\n     4a2:\t48 83 ec 50          \tsub    $0x50,%rsp\n     4a6:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     4aa:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n     4ad:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     4b1:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n     4b5:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     4bc:\t00 00 \n     4be:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     4c2:\t31 c0                \txor    %eax,%eax\n     4c4:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     4c8:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     4cc:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     4cf:\t89 c7                \tmov    %eax,%edi\n     4d1:\te8 0c ff ff ff       \tcallq  3e2 <ga_log_level_str>\n     4d6:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     4da:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     4de:\t48 89 c7             \tmov    %rax,%rdi\n     4e1:\te8 00 00 00 00       \tcallq  4e6 <ga_log+0x48>\n     4e6:\t83 f0 01             \txor    $0x1,%eax\n     4e9:\t84 c0                \ttest   %al,%al\n     4eb:\t0f 85 a6 00 00 00    \tjne    597 <ga_log+0xf9>\n     4f1:\t83 65 c4 fc          \tandl   $0xfffffffc,-0x3c(%rbp)\n     4f5:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n     4fa:\t74 3d                \tje     539 <ga_log+0x9b>\n     4fc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     500:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 507 <ga_log+0x69>\n     507:\t48 89 c7             \tmov    %rax,%rdi\n     50a:\te8 00 00 00 00       \tcallq  50f <ga_log+0x71>\n     50f:\t85 c0                \ttest   %eax,%eax\n     511:\t75 26                \tjne    539 <ga_log+0x9b>\n     513:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     517:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     51b:\t48 89 d1             \tmov    %rdx,%rcx\n     51e:\t48 89 c2             \tmov    %rax,%rdx\n     521:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 528 <ga_log+0x8a>\n     528:\tbf 06 00 00 00       \tmov    $0x6,%edi\n     52d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     532:\te8 00 00 00 00       \tcallq  537 <ga_log+0x99>\n     537:\teb 5f                \tjmp    598 <ga_log+0xfa>\n     539:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     53d:\t8b 40 60             \tmov    0x60(%rax),%eax\n     540:\t23 45 c4             \tand    -0x3c(%rbp),%eax\n     543:\t85 c0                \ttest   %eax,%eax\n     545:\t74 51                \tje     598 <ga_log+0xfa>\n     547:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     54b:\t48 89 c7             \tmov    %rax,%rdi\n     54e:\te8 00 00 00 00       \tcallq  553 <ga_log+0xb5>\n     553:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n     557:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     55b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     55f:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     563:\t48 8b 7d b8          \tmov    -0x48(%rbp),%rdi\n     567:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n     56b:\t49 89 f9             \tmov    %rdi,%r9\n     56e:\t49 89 f0             \tmov    %rsi,%r8\n     571:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 578 <ga_log+0xda>\n     578:\t48 89 c7             \tmov    %rax,%rdi\n     57b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     580:\te8 00 00 00 00       \tcallq  585 <ga_log+0xe7>\n     585:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     589:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     58d:\t48 89 c7             \tmov    %rax,%rdi\n     590:\te8 00 00 00 00       \tcallq  595 <ga_log+0xf7>\n     595:\teb 01                \tjmp    598 <ga_log+0xfa>\n     597:\t90                   \tnop\n     598:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     59c:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     5a3:\t00 00 \n     5a5:\t74 05                \tje     5ac <ga_log+0x10e>\n     5a7:\te8 00 00 00 00       \tcallq  5ac <ga_log+0x10e>\n     5ac:\tc9                   \tleaveq \n     5ad:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall ga_log(const char *a1, int a2, const char *a3,\n                                   __int64 a4) {\n  const char *v7;\n  __int64 v8[Number];\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  v7 = ga_log_level_str(a2);\n  if ((unsigned __int8)ga_logging_enabled(a4) == Number) {\n    if (a1 && !strcmp(a1, String)) {\n      syslog(Number, String, v7, a3);\n    } else if ((a2 & Number & *(_DWORD *)(a4 + Number)) != Number) {\n      g_get_current_time(v8);\n      fprintf(*(FILE **)(a4 + Number), String, v8[Number], v8[Number], v7, a3);\n      fflush(*(FILE **)(a4 + Number));\n    }\n  }\n  return __readfsqword(Number) ^ v9;\n}", "code_t": "void __cdecl ga_log(const gchar *domain, GLogLevelFlags level, const gchar *msg,\n                    gpointer opaque) {\n  const char *level_str;\n  GTimeVal <span class=\"supfact\">time</span>;\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  level_str = ga_log_level_str(level);\n  if (ga_logging_enabled((GAState_0 *)opaque)) {\n    if (domain && !strcmp(domain, String)) {\n      syslog(Number, String, level_str, msg);\n    } else if ((level & Number & *((_DWORD *)opaque + Number)) != Number) {\n      g_get_current_time(&<span class=\"supfact\">time</span>);\n      fprintf(*((FILE **)opaque + Number), String, <span class=\"supfact\">time</span>.tv_sec,\n              <span class=\"supfact\">time</span>.tv_usec, level_str, msg);\n      fflush(*((FILE **)opaque + Number));\n    }\n  }\n}", "var": [{"name": "v8", "type": "struct GTimeVal { glong tv_sec; glong tv_usec; }", "pred_name": "time", "ref_name": "time", "ref_type": "struct GTimeVal { glong tv_sec; glong tv_usec; }"}], "body_in_train": true}, {"repo_owner": "wnoguchi", "repo_name": "hikari_denwa_asterisk", "path": "wnoguchi/hikari_denwa_asterisk/513dcb0a92eafe6237d3f1016fb0a9d8e0e0abaa48a3af0a523fb3d2c8d326f6", "path_in_repo": "wnoguchi/hikari_denwa_asterisk/asterisk-11.0.1/res/pjproject/pjnath/bin/pjturn-client-x86_64-unknown-linux-gnu", "objdump": "0000000000417535 <pj_dns_resolver_set_ns>:\n  417535:\t55                   \tpush   %rbp\n  417536:\t48 89 e5             \tmov    %rsp,%rbp\n  417539:\t48 83 ec 50          \tsub    $0x50,%rsp\n  41753d:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  417541:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n  417544:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  417548:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n  41754c:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  417551:\t74 0d                \tje     417560 <pj_dns_resolver_set_ns+0x2b>\n  417553:\t83 7d c4 00          \tcmpl   $0x0,-0x3c(%rbp)\n  417557:\t74 07                \tje     417560 <pj_dns_resolver_set_ns+0x2b>\n  417559:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n  41755e:\t75 37                \tjne    417597 <pj_dns_resolver_set_ns+0x62>\n  417560:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  417565:\t74 0d                \tje     417574 <pj_dns_resolver_set_ns+0x3f>\n  417567:\t83 7d c4 00          \tcmpl   $0x0,-0x3c(%rbp)\n  41756b:\t74 07                \tje     417574 <pj_dns_resolver_set_ns+0x3f>\n  41756d:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n  417572:\t75 19                \tjne    41758d <pj_dns_resolver_set_ns+0x58>\n  417574:\tb9 60 68 43 00       \tmov    $0x436860,%ecx\n  417579:\tba b4 01 00 00       \tmov    $0x1b4,%edx\n  41757e:\tbe 33 63 43 00       \tmov    $0x436333,%esi\n  417583:\tbf 75 63 43 00       \tmov    $0x436375,%edi\n  417588:\te8 03 bb fe ff       \tcallq  403090 <__assert_fail@plt>\n  41758d:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n  417592:\te9 6f 01 00 00       \tjmpq   417706 <pj_dns_resolver_set_ns+0x1d1>\n  417597:\t83 7d c4 0f          \tcmpl   $0xf,-0x3c(%rbp)\n  41759b:\t76 29                \tjbe    4175c6 <pj_dns_resolver_set_ns+0x91>\n  41759d:\t83 7d c4 0f          \tcmpl   $0xf,-0x3c(%rbp)\n  4175a1:\t76 19                \tjbe    4175bc <pj_dns_resolver_set_ns+0x87>\n  4175a3:\tb9 60 68 43 00       \tmov    $0x436860,%ecx\n  4175a8:\tba b5 01 00 00       \tmov    $0x1b5,%edx\n  4175ad:\tbe 33 63 43 00       \tmov    $0x436333,%esi\n  4175b2:\tbf 92 63 43 00       \tmov    $0x436392,%edi\n  4175b7:\te8 d4 ba fe ff       \tcallq  403090 <__assert_fail@plt>\n  4175bc:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n  4175c1:\te9 40 01 00 00       \tjmpq   417706 <pj_dns_resolver_set_ns+0x1d1>\n  4175c6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4175ca:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4175ce:\t48 89 c7             \tmov    %rax,%rdi\n  4175d1:\te8 b4 bf 00 00       \tcallq  42358a <pj_mutex_lock>\n  4175d6:\t83 7d c4 10          \tcmpl   $0x10,-0x3c(%rbp)\n  4175da:\t76 07                \tjbe    4175e3 <pj_dns_resolver_set_ns+0xae>\n  4175dc:\tc7 45 c4 10 00 00 00 \tmovl   $0x10,-0x3c(%rbp)\n  4175e3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4175e7:\tc7 80 34 15 00 00 00 \tmovl   $0x0,0x1534(%rax)\n  4175ee:\t00 00 00 \n  4175f1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4175f5:\t48 05 38 15 00 00    \tadd    $0x1538,%rax\n  4175fb:\tbe 00 05 00 00       \tmov    $0x500,%esi\n  417600:\t48 89 c7             \tmov    %rax,%rdi\n  417603:\te8 94 f7 ff ff       \tcallq  416d9c <pj_bzero>\n  417608:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  41760c:\t48 89 c7             \tmov    %rax,%rdi\n  41760f:\te8 08 cc 00 00       \tcallq  42421c <pj_gettimeofday>\n  417614:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  41761b:\te9 b8 00 00 00       \tjmpq   4176d8 <pj_dns_resolver_set_ns+0x1a3>\n  417620:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  417623:\t48 89 d0             \tmov    %rdx,%rax\n  417626:\t48 c1 e0 02          \tshl    $0x2,%rax\n  41762a:\t48 01 d0             \tadd    %rdx,%rax\n  41762d:\t48 c1 e0 04          \tshl    $0x4,%rax\n  417631:\t48 8d 90 30 15 00 00 \tlea    0x1530(%rax),%rdx\n  417638:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41763c:\t48 01 d0             \tadd    %rdx,%rax\n  41763f:\t48 83 c0 08          \tadd    $0x8,%rax\n  417643:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  417647:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n  41764c:\t74 16                \tje     417664 <pj_dns_resolver_set_ns+0x12f>\n  41764e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  417651:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n  417655:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  417659:\t48 01 d0             \tadd    %rdx,%rax\n  41765c:\t0f b7 00             \tmovzwl (%rax),%eax\n  41765f:\t0f b7 c0             \tmovzwl %ax,%eax\n  417662:\teb 05                \tjmp    417669 <pj_dns_resolver_set_ns+0x134>\n  417664:\tb8 35 00 00 00       \tmov    $0x35,%eax\n  417669:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  41766c:\t48 89 d1             \tmov    %rdx,%rcx\n  41766f:\t48 c1 e1 04          \tshl    $0x4,%rcx\n  417673:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  417677:\t48 8d 34 11          \tlea    (%rcx,%rdx,1),%rsi\n  41767b:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  41767f:\t89 c2                \tmov    %eax,%edx\n  417681:\t48 89 cf             \tmov    %rcx,%rdi\n  417684:\te8 dd 4e 01 00       \tcallq  42c566 <pj_sockaddr_in_init>\n  417689:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  41768c:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  417690:\t74 17                \tje     4176a9 <pj_dns_resolver_set_ns+0x174>\n  417692:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  417696:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  41769a:\t48 89 c7             \tmov    %rax,%rdi\n  41769d:\te8 a1 bf 00 00       \tcallq  423643 <pj_mutex_unlock>\n  4176a2:\tb8 2c e2 04 00       \tmov    $0x4e22c,%eax\n  4176a7:\teb 5d                \tjmp    417706 <pj_dns_resolver_set_ns+0x1d1>\n  4176a9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4176ad:\tc7 40 10 01 00 00 00 \tmovl   $0x1,0x10(%rax)\n  4176b4:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  4176b8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4176bc:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4176c0:\t48 89 41 18          \tmov    %rax,0x18(%rcx)\n  4176c4:\t48 89 51 20          \tmov    %rdx,0x20(%rcx)\n  4176c8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4176cc:\t48 c7 40 28 0a 00 00 \tmovq   $0xa,0x28(%rax)\n  4176d3:\t00 \n  4176d4:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4176d8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4176db:\t3b 45 c4             \tcmp    -0x3c(%rbp),%eax\n  4176de:\t0f 82 3c ff ff ff    \tjb     417620 <pj_dns_resolver_set_ns+0xeb>\n  4176e4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4176e8:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  4176eb:\t89 90 34 15 00 00    \tmov    %edx,0x1534(%rax)\n  4176f1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4176f5:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4176f9:\t48 89 c7             \tmov    %rax,%rdi\n  4176fc:\te8 42 bf 00 00       \tcallq  423643 <pj_mutex_unlock>\n  417701:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  417706:\tc9                   \tleaveq \n  417707:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_dns_resolver_set_ns(__int64 a1, unsigned int a2,\n                                          __int64 a3, __int64 a4) {\n  __int64 result;\n  unsigned int v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v10[Number];\n  __int64 v12;\n  unsigned int i;\n  if (a1 && a2 && a3) {\n    if (a2 > Number)\n      __assert_fail(String, String, Number, String);\n    pj_mutex_lock(*(_QWORD *)(a1 + Number));\n    *(_DWORD *)(a1 + Number) = Number;\n    pj_bzero_7((void *)(a1 + Number), Number);\n    pj_gettimeofday(v10);\n    for (i = Number; i < a2; ++i) {\n      v12 = Number L * i + Number + a1 + Number;\n      if (a4)\n        v5 = *(unsigned __int16 *)(Number L * i + a4);\n      else\n        v5 = Number;\n      if ((unsigned int)pj_sockaddr_in_init(v12, Number L * i + a3, v5)) {\n        pj_mutex_unlock(*(_QWORD *)(a1 + Number));\n        return Number L;\n      }\n      *(_DWORD *)(v12 + Number) = Number;\n      v6 = v12;\n      v7 = v10[Number];\n      *(_QWORD *)(v12 + Number) = v10[Number];\n      *(_QWORD *)(v6 + Number) = v7;\n      *(_QWORD *)(v12 + Number) = Number L;\n    }\n    *(_DWORD *)(a1 + Number) = a2;\n    pj_mutex_unlock(*(_QWORD *)(a1 + Number));\n    result = Number L;\n  } else {\n    if (!a1 || !a2 || !a3)\n      __assert_fail(String, String, Number, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl pj_dns_resolver_set_ns(pj_dns_resolver_0 *resolver,\n                                           unsigned int count,\n                                           const pj_str_t_0 *servers,\n                                           const pj_uint16_t *ports) {\n  pj_status_t result;\n  pj_uint16_t v5;\n  nameserver *v6;\n  __int64 v7;\n  pj_time_val_0 <span class=\"supfact\">now</span>;\n  nameserver *ns;\n  unsigned int i;\n  if (resolver && count && servers) {\n    if (count > Number)\n      __assert_fail(String, String, Number, String);\n    pj_mutex_lock(resolver->mutex);\n    resolver->ns_count = Number;\n    pj_bzero_7(resolver->ns, Number);\n    pj_gettimeofday(&<span class=\"supfact\">now</span>);\n    for (i = Number; i < count; ++i) {\n      ns = &resolver->ns[i];\n      if (ports)\n        v5 = ports[i];\n      else\n        v5 = Number;\n      if (pj_sockaddr_in_init(&ns->addr, &servers[i], v5)) {\n        pj_mutex_unlock(resolver->mutex);\n        return Number;\n      }\n      ns->state = STATE_ACTIVE;\n      v6 = ns;\n      v7 = <span class=\"supfact\">now</span>.msec;\n      ns->state_expiry.sec = <span class=\"supfact\">now</span>.sec;\n      v6->state_expiry.msec = v7;\n      ns->rt_delay.sec = Number L;\n    }\n    resolver->ns_count = count;\n    pj_mutex_unlock(resolver->mutex);\n    result = Number;\n  } else {\n    if (!resolver || !count || !servers)\n      __assert_fail(String, String, Number, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v10", "type": "struct pj_time_val_0 { __int64 sec; __int64 msec; }", "pred_name": "now", "ref_name": "now", "ref_type": "struct pj_time_val_0 { __int64 sec; __int64 msec; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/e3dbc0fedb966a1e35486f621cbc4ba6bc7fb785371bea4029dd338eb49f7ef2", "path_in_repo": "XanClic/qemu//s390x-softmmu/hw/net/virtio-net.o", "objdump": "0000000000005bd4 <virtio_net_rsc_receive6>:\n    5bd4:\t55                   \tpush   %rbp\n    5bd5:\t48 89 e5             \tmov    %rsp,%rbp\n    5bd8:\t48 83 ec 60          \tsub    $0x60,%rsp\n    5bdc:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    5be0:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    5be4:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n    5be8:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n    5bec:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    5bf3:\t00 00 \n    5bf5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    5bf9:\t31 c0                \txor    %eax,%eax\n    5bfb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5bff:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    5c03:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    5c07:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5c0b:\t48 8b 80 f0 01 00 00 \tmov    0x1f0(%rax),%rax\n    5c12:\t66 89 45 c2          \tmov    %ax,-0x3e(%rbp)\n    5c16:\t0f b7 45 c2          \tmovzwl -0x3e(%rbp),%eax\n    5c1a:\t48 83 c0 4a          \tadd    $0x4a,%rax\n    5c1e:\t48 39 45 a0          \tcmp    %rax,-0x60(%rbp)\n    5c22:\t73 1c                \tjae    5c40 <virtio_net_rsc_receive6+0x6c>\n    5c24:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n    5c28:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n    5c2c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    5c30:\t48 89 ce             \tmov    %rcx,%rsi\n    5c33:\t48 89 c7             \tmov    %rax,%rdi\n    5c36:\te8 6c ec ff ff       \tcallq  48a7 <virtio_net_do_receive>\n    5c3b:\te9 e8 00 00 00       \tjmpq   5d28 <virtio_net_rsc_receive6+0x154>\n    5c40:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    5c44:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n    5c48:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    5c4c:\t48 89 ce             \tmov    %rcx,%rsi\n    5c4f:\t48 89 c7             \tmov    %rax,%rdi\n    5c52:\te8 95 ed ff ff       \tcallq  49ec <virtio_net_rsc_extract_unit6>\n    5c57:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n    5c5b:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n    5c5f:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    5c63:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    5c67:\t48 89 c7             \tmov    %rax,%rdi\n    5c6a:\te8 6b fe ff ff       \tcallq  5ada <virtio_net_rsc_sanity_check6>\n    5c6f:\t83 f8 04             \tcmp    $0x4,%eax\n    5c72:\t74 1c                \tje     5c90 <virtio_net_rsc_receive6+0xbc>\n    5c74:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n    5c78:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n    5c7c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    5c80:\t48 89 ce             \tmov    %rcx,%rsi\n    5c83:\t48 89 c7             \tmov    %rax,%rdi\n    5c86:\te8 1c ec ff ff       \tcallq  48a7 <virtio_net_do_receive>\n    5c8b:\te9 98 00 00 00       \tjmpq   5d28 <virtio_net_rsc_receive6+0x154>\n    5c90:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    5c94:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    5c98:\t48 89 d6             \tmov    %rdx,%rsi\n    5c9b:\t48 89 c7             \tmov    %rax,%rdi\n    5c9e:\te8 c5 f7 ff ff       \tcallq  5468 <virtio_net_rsc_tcp_ctrl_check>\n    5ca3:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n    5ca6:\t83 7d c4 03          \tcmpl   $0x3,-0x3c(%rbp)\n    5caa:\t75 19                \tjne    5cc5 <virtio_net_rsc_receive6+0xf1>\n    5cac:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n    5cb0:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n    5cb4:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    5cb8:\t48 89 ce             \tmov    %rcx,%rsi\n    5cbb:\t48 89 c7             \tmov    %rax,%rdi\n    5cbe:\te8 e4 eb ff ff       \tcallq  48a7 <virtio_net_do_receive>\n    5cc3:\teb 63                \tjmp    5d28 <virtio_net_rsc_receive6+0x154>\n    5cc5:\t83 7d c4 01          \tcmpl   $0x1,-0x3c(%rbp)\n    5cc9:\t75 3e                \tjne    5d09 <virtio_net_rsc_receive6+0x135>\n    5ccb:\t0f b7 45 c2          \tmovzwl -0x3e(%rbp),%eax\n    5ccf:\t83 c0 36             \tadd    $0x36,%eax\n    5cd2:\t0f b7 f8             \tmovzwl %ax,%edi\n    5cd5:\t0f b7 45 c2          \tmovzwl -0x3e(%rbp),%eax\n    5cd9:\t83 c0 16             \tadd    $0x16,%eax\n    5cdc:\t44 0f b7 c0          \tmovzwl %ax,%r8d\n    5ce0:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n    5ce4:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    5ce8:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n    5cec:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    5cf0:\t48 83 ec 08          \tsub    $0x8,%rsp\n    5cf4:\t57                   \tpush   %rdi\n    5cf5:\t41 b9 20 00 00 00    \tmov    $0x20,%r9d\n    5cfb:\t48 89 c7             \tmov    %rax,%rdi\n    5cfe:\te8 db f9 ff ff       \tcallq  56de <virtio_net_rsc_drain_flow>\n    5d03:\t48 83 c4 10          \tadd    $0x10,%rsp\n    5d07:\teb 1f                \tjmp    5d28 <virtio_net_rsc_receive6+0x154>\n    5d09:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n    5d0d:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n    5d11:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    5d15:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n    5d19:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    5d1d:\t49 89 f8             \tmov    %rdi,%r8\n    5d20:\t48 89 c7             \tmov    %rax,%rdi\n    5d23:\te8 06 f8 ff ff       \tcallq  552e <virtio_net_rsc_do_coalesce>\n    5d28:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n    5d2c:\t64 48 33 3c 25 28 00 \txor    %fs:0x28,%rdi\n    5d33:\t00 00 \n    5d35:\t74 05                \tje     5d3c <virtio_net_rsc_receive6+0x168>\n    5d37:\te8 00 00 00 00       \tcallq  5d3c <virtio_net_rsc_receive6+0x168>\n    5d3c:\tc9                   \tleaveq \n    5d3d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall virtio_net_rsc_receive6(__int64 a1, __int64 a2, __int16 *a3,\n                                           unsigned __int64 a4) {\n  unsigned __int16 v7;\n  int v8;\n  _WORD *v9[Number];\n  v9[Number] = (_WORD *)__readfsqword(Number);\n  v7 = *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n  if (a4 < (unsigned __int64)v7 + Number)\n    return virtio_net_do_receive(a2, a3, a4);\n  virtio_net_rsc_extract_unit6(a1, (__int64)a3, (__int64)v9);\n  if ((unsigned int)virtio_net_rsc_sanity_check6(a1, (__int64)v9[Number],\n                                                 (__int64)a3, a4) != Number)\n    return virtio_net_do_receive(a2, a3, a4);\n  v8 = virtio_net_rsc_tcp_ctrl_check((_DWORD *)a1, (__int64)v9[Number]);\n  if (v8 == Number)\n    return virtio_net_do_receive(a2, a3, a4);\n  if (v8 == Number)\n    return virtio_net_rsc_drain_flow(a1, a2, a3, a4, v7 + Number, Number,\n                                     v7 + Number);\n  return virtio_net_rsc_do_coalesce(a1, a2, a3, a4, v9);\n}", "code_t": "size_t __cdecl virtio_net_rsc_receive6(void *opq, NetClientState_0 *nc,\n                                       const uint8_t *buf, size_t size) {\n  uint16_t hdr_len;\n  int ret;\n  VirtioNetRscUnit_0 <span class=\"supfact\">unit</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  hdr_len = *(_QWORD *)(*((_QWORD *)opq + Number) + Number L);\n  if (size < (unsigned __int64)hdr_len + Number)\n    return virtio_net_do_receive(nc, buf, size);\n  virtio_net_rsc_extract_unit6((VirtioNetRscChain_0 *)opq, buf,\n                               &<span class=\"supfact\">unit</span>);\n  if (virtio_net_rsc_sanity_check6((VirtioNetRscChain_0 *)opq,\n                                   (ip6_header *)<span class=\"supfact\">unit</span>.ip, buf,\n                                   size) != Number)\n    return virtio_net_do_receive(nc, buf, size);\n  ret = virtio_net_rsc_tcp_ctrl_check((VirtioNetRscChain_0 *)opq,\n                                      <span class=\"supfact\">unit</span>.tcp);\n  if (ret == Number)\n    return virtio_net_do_receive(nc, buf, size);\n  if (ret == Number)\n    return virtio_net_rsc_drain_flow((VirtioNetRscChain_0 *)opq, nc, buf, size,\n                                     hdr_len + Number, Number,\n                                     hdr_len + Number);\n  return virtio_net_rsc_do_coalesce((VirtioNetRscChain_0 *)opq, nc, buf, size,\n                                    &<span class=\"supfact\">unit</span>);\n}", "var": [{"name": "v9", "type": "__unk__", "pred_name": "unit", "ref_name": "unit", "ref_type": "struct VirtioNetRscUnit_0 { void * ip; uint16_t * ip_plen; tcp_header * tcp; uint16_t tcp_hdrlen; uint16_t payload; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "ovsoft", "repo_name": "ffmpeg", "path": "ovsoft/ffmpeg/0f0a53ee485a7293b318f361358ec01ca7b3c441e2f5d5561df4d68f4c5d8034", "path_in_repo": "ovsoft/ffmpeg/libavcodec/mjpegdec.o", "objdump": "00000000000043b4 <mjpeg_decode_scan>:\n    43b4:\t48 81 ec 18 01 00 00 \tsub    $0x118,%rsp\n    43bb:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n    43c0:\t89 74 24 24          \tmov    %esi,0x24(%rsp)\n    43c4:\t89 54 24 20          \tmov    %edx,0x20(%rsp)\n    43c8:\t89 4c 24 1c          \tmov    %ecx,0x1c(%rsp)\n    43cc:\t4c 89 44 24 10       \tmov    %r8,0x10(%rsp)\n    43d1:\t4c 89 4c 24 08       \tmov    %r9,0x8(%rsp)\n    43d6:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n    43dc:\t74 2e                \tje     440c <mjpeg_decode_scan+0x58>\n    43de:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    43e3:\t8b 90 b4 03 00 00    \tmov    0x3b4(%rax),%edx\n    43e9:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    43ee:\t8b 80 b8 03 00 00    \tmov    0x3b8(%rax),%eax\n    43f4:\t0f af d0             \timul   %eax,%edx\n    43f7:\t48 8b 4c 24 10       \tmov    0x10(%rsp),%rcx\n    43fc:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    4401:\t48 89 ce             \tmov    %rcx,%rsi\n    4404:\t48 89 c7             \tmov    %rax,%rdi\n    4407:\te8 76 c2 ff ff       \tcallq  682 <init_get_bits>\n    440c:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4411:\t8b 80 8c 1d 00 00    \tmov    0x1d8c(%rax),%eax\n    4417:\t85 c0                \ttest   %eax,%eax\n    4419:\t74 44                \tje     445f <mjpeg_decode_scan+0xab>\n    441b:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4420:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4424:\t8b 40 10             \tmov    0x10(%rax),%eax\n    4427:\t25 00 40 00 00       \tand    $0x4000,%eax\n    442c:\t85 c0                \ttest   %eax,%eax\n    442e:\t74 2f                \tje     445f <mjpeg_decode_scan+0xab>\n    4430:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4435:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4439:\tba 00 00 00 00       \tmov    $0x0,%edx\n    443e:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    4443:\t48 89 c7             \tmov    %rax,%rdi\n    4446:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    444b:\te8 00 00 00 00       \tcallq  4450 <mjpeg_decode_scan+0x9c>\n    4450:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4455:\tc7 80 8c 1d 00 00 00 \tmovl   $0x0,0x1d8c(%rax)\n    445c:\t00 00 00 \n    445f:\tc7 84 24 0c 01 00 00 \tmovl   $0x0,0x10c(%rsp)\n    4466:\t00 00 00 00 \n    446a:\te9 d7 01 00 00       \tjmpq   4646 <mjpeg_decode_scan+0x292>\n    446f:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4474:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    447b:\t48 63 d2             \tmovslq %edx,%rdx\n    447e:\t48 81 c2 00 01 00 00 \tadd    $0x100,%rdx\n    4485:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    4488:\t89 84 24 bc 00 00 00 \tmov    %eax,0xbc(%rsp)\n    448f:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4494:\t48 8b 80 f8 05 00 00 \tmov    0x5f8(%rax),%rax\n    449b:\t8b 94 24 bc 00 00 00 \tmov    0xbc(%rsp),%edx\n    44a2:\t48 63 d2             \tmovslq %edx,%rdx\n    44a5:\t48 8b 14 d0          \tmov    (%rax,%rdx,8),%rdx\n    44a9:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    44b0:\t48 98                \tcltq   \n    44b2:\t48 89 94 c4 80 00 00 \tmov    %rdx,0x80(%rsp,%rax,8)\n    44b9:\t00 \n    44ba:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n    44c0:\t74 15                \tje     44d7 <mjpeg_decode_scan+0x123>\n    44c2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    44c7:\t8b 94 24 bc 00 00 00 \tmov    0xbc(%rsp),%edx\n    44ce:\t48 63 d2             \tmovslq %edx,%rdx\n    44d1:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n    44d5:\teb 05                \tjmp    44dc <mjpeg_decode_scan+0x128>\n    44d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    44dc:\t8b 94 24 bc 00 00 00 \tmov    0xbc(%rsp),%edx\n    44e3:\t48 63 d2             \tmovslq %edx,%rdx\n    44e6:\t48 89 44 d4 60       \tmov    %rax,0x60(%rsp,%rdx,8)\n    44eb:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    44f0:\t8b 94 24 bc 00 00 00 \tmov    0xbc(%rsp),%edx\n    44f7:\t48 63 d2             \tmovslq %edx,%rdx\n    44fa:\t48 81 c2 80 01 00 00 \tadd    $0x180,%rdx\n    4501:\t8b 54 90 04          \tmov    0x4(%rax,%rdx,4),%edx\n    4505:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    450c:\t48 98                \tcltq   \n    450e:\t89 54 84 50          \tmov    %edx,0x50(%rsp,%rax,4)\n    4512:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4517:\t8b 94 24 bc 00 00 00 \tmov    0xbc(%rsp),%edx\n    451e:\t48 63 d2             \tmovslq %edx,%rdx\n    4521:\t48 81 c2 dc 00 00 00 \tadd    $0xdc,%rdx\n    4528:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n    452c:\t48 83 c8 01          \tor     $0x1,%rax\n    4530:\t48 89 c1             \tmov    %rax,%rcx\n    4533:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4538:\t8b 94 24 bc 00 00 00 \tmov    0xbc(%rsp),%edx\n    453f:\t48 63 d2             \tmovslq %edx,%rdx\n    4542:\t48 81 c2 dc 00 00 00 \tadd    $0xdc,%rdx\n    4549:\t48 89 0c d0          \tmov    %rcx,(%rax,%rdx,8)\n    454d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4552:\t8b 80 8c 1d 00 00    \tmov    0x1d8c(%rax),%eax\n    4558:\t85 c0                \ttest   %eax,%eax\n    455a:\t0f 84 de 00 00 00    \tje     463e <mjpeg_decode_scan+0x28a>\n    4560:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    4567:\t48 98                \tcltq   \n    4569:\t8b 4c 84 50          \tmov    0x50(%rsp,%rax,4),%ecx\n    456d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4572:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4579:\t48 63 d2             \tmovslq %edx,%rdx\n    457c:\t48 81 c2 14 01 00 00 \tadd    $0x114,%rdx\n    4583:\t8b 34 90             \tmov    (%rax,%rdx,4),%esi\n    4586:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    458b:\t8b 80 b8 03 00 00    \tmov    0x3b8(%rax),%eax\n    4591:\t8d 3c c5 00 00 00 00 \tlea    0x0(,%rax,8),%edi\n    4598:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    459d:\t8b 80 b0 03 00 00    \tmov    0x3b0(%rax),%eax\n    45a3:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    45a8:\t44 8b 92 64 04 00 00 \tmov    0x464(%rdx),%r10d\n    45af:\t99                   \tcltd   \n    45b0:\t41 f7 fa             \tidiv   %r10d\n    45b3:\t83 e0 07             \tand    $0x7,%eax\n    45b6:\t29 c7                \tsub    %eax,%edi\n    45b8:\t89 f8                \tmov    %edi,%eax\n    45ba:\t0f af c6             \timul   %esi,%eax\n    45bd:\t83 e8 01             \tsub    $0x1,%eax\n    45c0:\t0f af c1             \timul   %ecx,%eax\n    45c3:\t89 84 24 b8 00 00 00 \tmov    %eax,0xb8(%rsp)\n    45ca:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    45d1:\t48 98                \tcltq   \n    45d3:\t48 8b 94 c4 80 00 00 \tmov    0x80(%rsp,%rax,8),%rdx\n    45da:\t00 \n    45db:\t8b 84 24 b8 00 00 00 \tmov    0xb8(%rsp),%eax\n    45e2:\t48 98                \tcltq   \n    45e4:\t48 01 c2             \tadd    %rax,%rdx\n    45e7:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    45ee:\t48 98                \tcltq   \n    45f0:\t48 89 94 c4 80 00 00 \tmov    %rdx,0x80(%rsp,%rax,8)\n    45f7:\t00 \n    45f8:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    45ff:\t48 98                \tcltq   \n    4601:\t48 8b 54 c4 60       \tmov    0x60(%rsp,%rax,8),%rdx\n    4606:\t8b 84 24 b8 00 00 00 \tmov    0xb8(%rsp),%eax\n    460d:\t48 98                \tcltq   \n    460f:\t48 01 c2             \tadd    %rax,%rdx\n    4612:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    4619:\t48 98                \tcltq   \n    461b:\t48 89 54 c4 60       \tmov    %rdx,0x60(%rsp,%rax,8)\n    4620:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    4627:\t48 98                \tcltq   \n    4629:\t8b 44 84 50          \tmov    0x50(%rsp,%rax,4),%eax\n    462d:\tf7 d8                \tneg    %eax\n    462f:\t89 c2                \tmov    %eax,%edx\n    4631:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    4638:\t48 98                \tcltq   \n    463a:\t89 54 84 50          \tmov    %edx,0x50(%rsp,%rax,4)\n    463e:\t83 84 24 0c 01 00 00 \taddl   $0x1,0x10c(%rsp)\n    4645:\t01 \n    4646:\t8b 84 24 0c 01 00 00 \tmov    0x10c(%rsp),%eax\n    464d:\t3b 44 24 24          \tcmp    0x24(%rsp),%eax\n    4651:\t0f 8c 18 fe ff ff    \tjl     446f <mjpeg_decode_scan+0xbb>\n    4657:\tc7 84 24 04 01 00 00 \tmovl   $0x0,0x104(%rsp)\n    465e:\t00 00 00 00 \n    4662:\te9 e1 08 00 00       \tjmpq   4f48 <mjpeg_decode_scan+0xb94>\n    4667:\tc7 84 24 08 01 00 00 \tmovl   $0x0,0x108(%rsp)\n    466e:\t00 00 00 00 \n    4672:\te9 b1 08 00 00       \tjmpq   4f28 <mjpeg_decode_scan+0xb74>\n    4677:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n    467d:\t74 18                \tje     4697 <mjpeg_decode_scan+0x2e3>\n    467f:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    4684:\t48 89 c7             \tmov    %rax,%rdi\n    4687:\te8 2d bf ff ff       \tcallq  5b9 <get_bits1>\n    468c:\t85 c0                \ttest   %eax,%eax\n    468e:\t75 07                \tjne    4697 <mjpeg_decode_scan+0x2e3>\n    4690:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    4695:\teb 05                \tjmp    469c <mjpeg_decode_scan+0x2e8>\n    4697:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    469c:\t89 84 24 f0 00 00 00 \tmov    %eax,0xf0(%rsp)\n    46a3:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    46a8:\t8b 80 70 1d 00 00    \tmov    0x1d70(%rax),%eax\n    46ae:\t85 c0                \ttest   %eax,%eax\n    46b0:\t74 25                \tje     46d7 <mjpeg_decode_scan+0x323>\n    46b2:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    46b7:\t8b 80 74 1d 00 00    \tmov    0x1d74(%rax),%eax\n    46bd:\t85 c0                \ttest   %eax,%eax\n    46bf:\t75 16                \tjne    46d7 <mjpeg_decode_scan+0x323>\n    46c1:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    46c6:\t8b 90 70 1d 00 00    \tmov    0x1d70(%rax),%edx\n    46cc:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    46d1:\t89 90 74 1d 00 00    \tmov    %edx,0x1d74(%rax)\n    46d7:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    46dc:\t48 83 c0 10          \tadd    $0x10,%rax\n    46e0:\t48 89 c7             \tmov    %rax,%rdi\n    46e3:\te8 b0 bc ff ff       \tcallq  398 <get_bits_count>\n    46e8:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    46ed:\t8b 52 24             \tmov    0x24(%rdx),%edx\n    46f0:\t39 d0                \tcmp    %edx,%eax\n    46f2:\t7e 49                \tjle    473d <mjpeg_decode_scan+0x389>\n    46f4:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    46f9:\t48 83 c0 10          \tadd    $0x10,%rax\n    46fd:\t48 89 c7             \tmov    %rax,%rdi\n    4700:\te8 93 bc ff ff       \tcallq  398 <get_bits_count>\n    4705:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    470a:\t8b 52 24             \tmov    0x24(%rdx),%edx\n    470d:\t29 d0                \tsub    %edx,%eax\n    470f:\t89 c2                \tmov    %eax,%edx\n    4711:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4716:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    471a:\t89 d1                \tmov    %edx,%ecx\n    471c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4721:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    4726:\t48 89 c7             \tmov    %rax,%rdi\n    4729:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    472e:\te8 00 00 00 00       \tcallq  4733 <mjpeg_decode_scan+0x37f>\n    4733:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    4738:\te9 28 08 00 00       \tjmpq   4f65 <mjpeg_decode_scan+0xbb1>\n    473d:\tc7 84 24 0c 01 00 00 \tmovl   $0x0,0x10c(%rsp)\n    4744:\t00 00 00 00 \n    4748:\te9 07 06 00 00       \tjmpq   4d54 <mjpeg_decode_scan+0x9a0>\n    474d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4752:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4759:\t48 63 d2             \tmovslq %edx,%rdx\n    475c:\t48 81 c2 0c 01 00 00 \tadd    $0x10c,%rdx\n    4763:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    4766:\t89 84 24 e8 00 00 00 \tmov    %eax,0xe8(%rsp)\n    476d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4772:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4779:\t48 63 d2             \tmovslq %edx,%rdx\n    477c:\t48 81 c2 00 01 00 00 \tadd    $0x100,%rdx\n    4783:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    4786:\t89 84 24 e4 00 00 00 \tmov    %eax,0xe4(%rsp)\n    478d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4792:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4799:\t48 63 d2             \tmovslq %edx,%rdx\n    479c:\t48 81 c2 10 01 00 00 \tadd    $0x110,%rdx\n    47a3:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    47a6:\t89 84 24 e0 00 00 00 \tmov    %eax,0xe0(%rsp)\n    47ad:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    47b2:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    47b9:\t48 63 d2             \tmovslq %edx,%rdx\n    47bc:\t48 81 c2 14 01 00 00 \tadd    $0x114,%rdx\n    47c3:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    47c6:\t89 84 24 dc 00 00 00 \tmov    %eax,0xdc(%rsp)\n    47cd:\tc7 84 24 00 01 00 00 \tmovl   $0x0,0x100(%rsp)\n    47d4:\t00 00 00 00 \n    47d8:\tc7 84 24 fc 00 00 00 \tmovl   $0x0,0xfc(%rsp)\n    47df:\t00 00 00 00 \n    47e3:\tc7 84 24 f8 00 00 00 \tmovl   $0x0,0xf8(%rsp)\n    47ea:\t00 00 00 00 \n    47ee:\te9 45 05 00 00       \tjmpq   4d38 <mjpeg_decode_scan+0x984>\n    47f3:\t8b 84 24 e4 00 00 00 \tmov    0xe4(%rsp),%eax\n    47fa:\t48 98                \tcltq   \n    47fc:\t8b 54 84 50          \tmov    0x50(%rsp,%rax,4),%edx\n    4800:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    4807:\t0f af 84 24 04 01 00 \timul   0x104(%rsp),%eax\n    480e:\t00 \n    480f:\t89 c1                \tmov    %eax,%ecx\n    4811:\t8b 84 24 fc 00 00 00 \tmov    0xfc(%rsp),%eax\n    4818:\t01 c8                \tadd    %ecx,%eax\n    481a:\t0f af d0             \timul   %eax,%edx\n    481d:\t8b 84 24 e0 00 00 00 \tmov    0xe0(%rsp),%eax\n    4824:\t0f af 84 24 08 01 00 \timul   0x108(%rsp),%eax\n    482b:\t00 \n    482c:\t89 c1                \tmov    %eax,%ecx\n    482e:\t8b 84 24 00 01 00 00 \tmov    0x100(%rsp),%eax\n    4835:\t01 c8                \tadd    %ecx,%eax\n    4837:\t01 d0                \tadd    %edx,%eax\n    4839:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n    4840:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4845:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4849:\t8b 80 00 03 00 00    \tmov    0x300(%rax),%eax\n    484f:\t89 c1                \tmov    %eax,%ecx\n    4851:\td3 fa                \tsar    %cl,%edx\n    4853:\t89 d0                \tmov    %edx,%eax\n    4855:\t89 84 24 f4 00 00 00 \tmov    %eax,0xf4(%rsp)\n    485c:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4861:\t8b 80 70 03 00 00    \tmov    0x370(%rax),%eax\n    4867:\t85 c0                \ttest   %eax,%eax\n    4869:\t74 25                \tje     4890 <mjpeg_decode_scan+0x4dc>\n    486b:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4870:\t8b 80 74 03 00 00    \tmov    0x374(%rax),%eax\n    4876:\t85 c0                \ttest   %eax,%eax\n    4878:\t74 16                \tje     4890 <mjpeg_decode_scan+0x4dc>\n    487a:\t8b 84 24 e4 00 00 00 \tmov    0xe4(%rsp),%eax\n    4881:\t48 98                \tcltq   \n    4883:\t8b 44 84 50          \tmov    0x50(%rsp,%rax,4),%eax\n    4887:\td1 f8                \tsar    %eax\n    4889:\t01 84 24 f4 00 00 00 \tadd    %eax,0xf4(%rsp)\n    4890:\t8b 84 24 e4 00 00 00 \tmov    0xe4(%rsp),%eax\n    4897:\t48 98                \tcltq   \n    4899:\t48 8b 94 c4 80 00 00 \tmov    0x80(%rsp,%rax,8),%rdx\n    48a0:\t00 \n    48a1:\t8b 84 24 f4 00 00 00 \tmov    0xf4(%rsp),%eax\n    48a8:\t48 98                \tcltq   \n    48aa:\t48 01 d0             \tadd    %rdx,%rax\n    48ad:\t48 89 84 24 d0 00 00 \tmov    %rax,0xd0(%rsp)\n    48b4:\t00 \n    48b5:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    48ba:\t8b 80 80 03 00 00    \tmov    0x380(%rax),%eax\n    48c0:\t85 c0                \ttest   %eax,%eax\n    48c2:\t0f 85 8b 02 00 00    \tjne    4b53 <mjpeg_decode_scan+0x79f>\n    48c8:\t83 bc 24 f0 00 00 00 \tcmpl   $0x0,0xf0(%rsp)\n    48cf:\t00 \n    48d0:\t0f 84 5d 01 00 00    \tje     4a33 <mjpeg_decode_scan+0x67f>\n    48d6:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    48db:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    48df:\t8b 80 00 03 00 00    \tmov    0x300(%rax),%eax\n    48e5:\t8b 94 24 e4 00 00 00 \tmov    0xe4(%rsp),%edx\n    48ec:\t48 63 d2             \tmovslq %edx,%rdx\n    48ef:\t8b 54 94 50          \tmov    0x50(%rsp,%rdx,4),%edx\n    48f3:\t8b 8c 24 e4 00 00 00 \tmov    0xe4(%rsp),%ecx\n    48fa:\t48 63 c9             \tmovslq %ecx,%rcx\n    48fd:\t48 8b 74 cc 60       \tmov    0x60(%rsp,%rcx,8),%rsi\n    4902:\t8b 8c 24 f4 00 00 00 \tmov    0xf4(%rsp),%ecx\n    4909:\t48 63 c9             \tmovslq %ecx,%rcx\n    490c:\t48 01 ce             \tadd    %rcx,%rsi\n    490f:\t48 8b 8c 24 d0 00 00 \tmov    0xd0(%rsp),%rcx\n    4916:\t00 \n    4917:\t48 89 8c 24 b0 00 00 \tmov    %rcx,0xb0(%rsp)\n    491e:\t00 \n    491f:\t48 89 b4 24 a8 00 00 \tmov    %rsi,0xa8(%rsp)\n    4926:\t00 \n    4927:\t89 94 24 a4 00 00 00 \tmov    %edx,0xa4(%rsp)\n    492e:\t89 84 24 a0 00 00 00 \tmov    %eax,0xa0(%rsp)\n    4935:\t83 bc 24 a0 00 00 00 \tcmpl   $0x3,0xa0(%rsp)\n    493c:\t03 \n    493d:\t0f 84 d6 00 00 00    \tje     4a19 <mjpeg_decode_scan+0x665>\n    4943:\t83 bc 24 a0 00 00 00 \tcmpl   $0x3,0xa0(%rsp)\n    494a:\t03 \n    494b:\t0f 8f b4 03 00 00    \tjg     4d05 <mjpeg_decode_scan+0x951>\n    4951:\t83 bc 24 a0 00 00 00 \tcmpl   $0x2,0xa0(%rsp)\n    4958:\t02 \n    4959:\t0f 84 89 00 00 00    \tje     49e8 <mjpeg_decode_scan+0x634>\n    495f:\t83 bc 24 a0 00 00 00 \tcmpl   $0x2,0xa0(%rsp)\n    4966:\t02 \n    4967:\t0f 8f 98 03 00 00    \tjg     4d05 <mjpeg_decode_scan+0x951>\n    496d:\t83 bc 24 a0 00 00 00 \tcmpl   $0x0,0xa0(%rsp)\n    4974:\t00 \n    4975:\t74 0f                \tje     4986 <mjpeg_decode_scan+0x5d2>\n    4977:\t83 bc 24 a0 00 00 00 \tcmpl   $0x1,0xa0(%rsp)\n    497e:\t01 \n    497f:\t74 36                \tje     49b7 <mjpeg_decode_scan+0x603>\n    4981:\te9 7f 03 00 00       \tjmpq   4d05 <mjpeg_decode_scan+0x951>\n    4986:\t8b 8c 24 a4 00 00 00 \tmov    0xa4(%rsp),%ecx\n    498d:\t8b 94 24 a4 00 00 00 \tmov    0xa4(%rsp),%edx\n    4994:\t48 8b b4 24 a8 00 00 \tmov    0xa8(%rsp),%rsi\n    499b:\t00 \n    499c:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    49a3:\t00 \n    49a4:\t41 b8 08 00 00 00    \tmov    $0x8,%r8d\n    49aa:\t48 89 c7             \tmov    %rax,%rdi\n    49ad:\te8 fe b6 ff ff       \tcallq  b0 <copy_block8>\n    49b2:\te9 4e 03 00 00       \tjmpq   4d05 <mjpeg_decode_scan+0x951>\n    49b7:\t8b 8c 24 a4 00 00 00 \tmov    0xa4(%rsp),%ecx\n    49be:\t8b 94 24 a4 00 00 00 \tmov    0xa4(%rsp),%edx\n    49c5:\t48 8b b4 24 a8 00 00 \tmov    0xa8(%rsp),%rsi\n    49cc:\t00 \n    49cd:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    49d4:\t00 \n    49d5:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n    49db:\t48 89 c7             \tmov    %rax,%rdi\n    49de:\te8 76 b6 ff ff       \tcallq  59 <copy_block4>\n    49e3:\te9 1d 03 00 00       \tjmpq   4d05 <mjpeg_decode_scan+0x951>\n    49e8:\t8b 8c 24 a4 00 00 00 \tmov    0xa4(%rsp),%ecx\n    49ef:\t8b 94 24 a4 00 00 00 \tmov    0xa4(%rsp),%edx\n    49f6:\t48 8b b4 24 a8 00 00 \tmov    0xa8(%rsp),%rsi\n    49fd:\t00 \n    49fe:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    4a05:\t00 \n    4a06:\t41 b8 02 00 00 00    \tmov    $0x2,%r8d\n    4a0c:\t48 89 c7             \tmov    %rax,%rdi\n    4a0f:\te8 ec b5 ff ff       \tcallq  0 <copy_block2>\n    4a14:\te9 ec 02 00 00       \tjmpq   4d05 <mjpeg_decode_scan+0x951>\n    4a19:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    4a20:\t00 \n    4a21:\t0f b6 10             \tmovzbl (%rax),%edx\n    4a24:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n    4a2b:\t00 \n    4a2c:\t88 10                \tmov    %dl,(%rax)\n    4a2e:\te9 d2 02 00 00       \tjmpq   4d05 <mjpeg_decode_scan+0x951>\n    4a33:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4a38:\t48 8b 80 e8 07 00 00 \tmov    0x7e8(%rax),%rax\n    4a3f:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    4a44:\t48 81 c2 20 06 00 00 \tadd    $0x620,%rdx\n    4a4b:\t48 89 d7             \tmov    %rdx,%rdi\n    4a4e:\tff d0                \tcallq  *%rax\n    4a50:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4a55:\t8b 94 24 e4 00 00 00 \tmov    0xe4(%rsp),%edx\n    4a5c:\t48 63 d2             \tmovslq %edx,%rdx\n    4a5f:\t48 81 c2 18 01 00 00 \tadd    $0x118,%rdx\n    4a66:\t8b 44 90 08          \tmov    0x8(%rax,%rdx,4),%eax\n    4a6a:\t48 98                \tcltq   \n    4a6c:\t48 c1 e0 07          \tshl    $0x7,%rax\n    4a70:\t48 8d 50 30          \tlea    0x30(%rax),%rdx\n    4a74:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4a79:\t48 01 d0             \tadd    %rdx,%rax\n    4a7c:\t4c 8d 40 08          \tlea    0x8(%rax),%r8\n    4a80:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4a85:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4a8c:\t48 63 d2             \tmovslq %edx,%rdx\n    4a8f:\t48 81 c2 08 01 00 00 \tadd    $0x108,%rdx\n    4a96:\t8b 3c 90             \tmov    (%rax,%rdx,4),%edi\n    4a99:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4a9e:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4aa5:\t48 63 d2             \tmovslq %edx,%rdx\n    4aa8:\t48 81 c2 04 01 00 00 \tadd    $0x104,%rdx\n    4aaf:\t8b 0c 90             \tmov    (%rax,%rdx,4),%ecx\n    4ab2:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4ab7:\t48 8d b0 20 06 00 00 \tlea    0x620(%rax),%rsi\n    4abe:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4ac5:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4aca:\t4d 89 c1             \tmov    %r8,%r9\n    4acd:\t41 89 f8             \tmov    %edi,%r8d\n    4ad0:\t48 89 c7             \tmov    %rax,%rdi\n    4ad3:\te8 70 d7 ff ff       \tcallq  2248 <decode_block>\n    4ad8:\t85 c0                \ttest   %eax,%eax\n    4ada:\t79 3d                \tjns    4b19 <mjpeg_decode_scan+0x765>\n    4adc:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4ae1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4ae5:\t8b 8c 24 08 01 00 00 \tmov    0x108(%rsp),%ecx\n    4aec:\t8b 94 24 04 01 00 00 \tmov    0x104(%rsp),%edx\n    4af3:\t41 89 c8             \tmov    %ecx,%r8d\n    4af6:\t89 d1                \tmov    %edx,%ecx\n    4af8:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4afd:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    4b02:\t48 89 c7             \tmov    %rax,%rdi\n    4b05:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4b0a:\te8 00 00 00 00       \tcallq  4b0f <mjpeg_decode_scan+0x75b>\n    4b0f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    4b14:\te9 4c 04 00 00       \tjmpq   4f65 <mjpeg_decode_scan+0xbb1>\n    4b19:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4b1e:\t4c 8b 80 38 1c 00 00 \tmov    0x1c38(%rax),%r8\n    4b25:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4b2a:\t48 8d 90 20 06 00 00 \tlea    0x620(%rax),%rdx\n    4b31:\t8b 84 24 e4 00 00 00 \tmov    0xe4(%rsp),%eax\n    4b38:\t48 98                \tcltq   \n    4b3a:\t8b 4c 84 50          \tmov    0x50(%rsp,%rax,4),%ecx\n    4b3e:\t48 8b 84 24 d0 00 00 \tmov    0xd0(%rsp),%rax\n    4b45:\t00 \n    4b46:\t89 ce                \tmov    %ecx,%esi\n    4b48:\t48 89 c7             \tmov    %rax,%rdi\n    4b4b:\t41 ff d0             \tcallq  *%r8\n    4b4e:\te9 b2 01 00 00       \tjmpq   4d05 <mjpeg_decode_scan+0x951>\n    4b53:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4b58:\t8b 94 24 e4 00 00 00 \tmov    0xe4(%rsp),%edx\n    4b5f:\t48 63 d2             \tmovslq %edx,%rdx\n    4b62:\t48 81 c2 f0 00 00 00 \tadd    $0xf0,%rdx\n    4b69:\t8b 14 90             \tmov    (%rax,%rdx,4),%edx\n    4b6c:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    4b73:\t0f af 84 24 04 01 00 \timul   0x104(%rsp),%eax\n    4b7a:\t00 \n    4b7b:\t89 c1                \tmov    %eax,%ecx\n    4b7d:\t8b 84 24 fc 00 00 00 \tmov    0xfc(%rsp),%eax\n    4b84:\t01 c8                \tadd    %ecx,%eax\n    4b86:\t0f af d0             \timul   %eax,%edx\n    4b89:\t8b 84 24 e0 00 00 00 \tmov    0xe0(%rsp),%eax\n    4b90:\t0f af 84 24 08 01 00 \timul   0x108(%rsp),%eax\n    4b97:\t00 \n    4b98:\t89 c1                \tmov    %eax,%ecx\n    4b9a:\t8b 84 24 00 01 00 00 \tmov    0x100(%rsp),%eax\n    4ba1:\t01 c8                \tadd    %ecx,%eax\n    4ba3:\t01 d0                \tadd    %edx,%eax\n    4ba5:\t89 84 24 cc 00 00 00 \tmov    %eax,0xcc(%rsp)\n    4bac:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4bb1:\t8b 94 24 e4 00 00 00 \tmov    0xe4(%rsp),%edx\n    4bb8:\t48 63 d2             \tmovslq %edx,%rdx\n    4bbb:\t48 81 c2 d4 00 00 00 \tadd    $0xd4,%rdx\n    4bc2:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n    4bc6:\t8b 94 24 cc 00 00 00 \tmov    0xcc(%rsp),%edx\n    4bcd:\t48 63 d2             \tmovslq %edx,%rdx\n    4bd0:\t48 c1 e2 07          \tshl    $0x7,%rdx\n    4bd4:\t48 01 d0             \tadd    %rdx,%rax\n    4bd7:\t48 89 84 24 c0 00 00 \tmov    %rax,0xc0(%rsp)\n    4bde:\t00 \n    4bdf:\t83 7c 24 20 00       \tcmpl   $0x0,0x20(%rsp)\n    4be4:\t74 72                \tje     4c58 <mjpeg_decode_scan+0x8a4>\n    4be6:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4beb:\t48 83 c0 10          \tadd    $0x10,%rax\n    4bef:\t48 89 c7             \tmov    %rax,%rdi\n    4bf2:\te8 c2 b9 ff ff       \tcallq  5b9 <get_bits1>\n    4bf7:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    4bfc:\t8b 8c 24 e4 00 00 00 \tmov    0xe4(%rsp),%ecx\n    4c03:\t48 63 c9             \tmovslq %ecx,%rcx\n    4c06:\t48 81 c1 18 01 00 00 \tadd    $0x118,%rcx\n    4c0d:\t8b 4c 8a 08          \tmov    0x8(%rdx,%rcx,4),%ecx\n    4c11:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    4c16:\t48 63 c9             \tmovslq %ecx,%rcx\n    4c19:\t48 c1 e1 07          \tshl    $0x7,%rcx\n    4c1d:\t48 01 ca             \tadd    %rcx,%rdx\n    4c20:\t48 83 c2 38          \tadd    $0x38,%rdx\n    4c24:\t0f b7 12             \tmovzwl (%rdx),%edx\n    4c27:\t0f bf d2             \tmovswl %dx,%edx\n    4c2a:\t0f af d0             \timul   %eax,%edx\n    4c2d:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    4c31:\t89 c1                \tmov    %eax,%ecx\n    4c33:\td3 e2                \tshl    %cl,%edx\n    4c35:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n    4c3c:\t00 \n    4c3d:\t0f b7 00             \tmovzwl (%rax),%eax\n    4c40:\t89 c1                \tmov    %eax,%ecx\n    4c42:\t89 d0                \tmov    %edx,%eax\n    4c44:\t01 c8                \tadd    %ecx,%eax\n    4c46:\t89 c2                \tmov    %eax,%edx\n    4c48:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n    4c4f:\t00 \n    4c50:\t66 89 10             \tmov    %dx,(%rax)\n    4c53:\te9 ad 00 00 00       \tjmpq   4d05 <mjpeg_decode_scan+0x951>\n    4c58:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4c5d:\t8b 94 24 e4 00 00 00 \tmov    0xe4(%rsp),%edx\n    4c64:\t48 63 d2             \tmovslq %edx,%rdx\n    4c67:\t48 81 c2 18 01 00 00 \tadd    $0x118,%rdx\n    4c6e:\t8b 44 90 08          \tmov    0x8(%rax,%rdx,4),%eax\n    4c72:\t48 98                \tcltq   \n    4c74:\t48 c1 e0 07          \tshl    $0x7,%rax\n    4c78:\t48 8d 50 30          \tlea    0x30(%rax),%rdx\n    4c7c:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4c81:\t48 01 d0             \tadd    %rdx,%rax\n    4c84:\t4c 8d 40 08          \tlea    0x8(%rax),%r8\n    4c88:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4c8d:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4c94:\t48 63 d2             \tmovslq %edx,%rdx\n    4c97:\t48 81 c2 04 01 00 00 \tadd    $0x104,%rdx\n    4c9e:\t8b 0c 90             \tmov    (%rax,%rdx,4),%ecx\n    4ca1:\t8b 7c 24 1c          \tmov    0x1c(%rsp),%edi\n    4ca5:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4cac:\t48 8b b4 24 c0 00 00 \tmov    0xc0(%rsp),%rsi\n    4cb3:\t00 \n    4cb4:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4cb9:\t41 89 f9             \tmov    %edi,%r9d\n    4cbc:\t48 89 c7             \tmov    %rax,%rdi\n    4cbf:\te8 5a d9 ff ff       \tcallq  261e <decode_dc_progressive>\n    4cc4:\t85 c0                \ttest   %eax,%eax\n    4cc6:\t79 3d                \tjns    4d05 <mjpeg_decode_scan+0x951>\n    4cc8:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4ccd:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4cd1:\t8b 8c 24 08 01 00 00 \tmov    0x108(%rsp),%ecx\n    4cd8:\t8b 94 24 04 01 00 00 \tmov    0x104(%rsp),%edx\n    4cdf:\t41 89 c8             \tmov    %ecx,%r8d\n    4ce2:\t89 d1                \tmov    %edx,%ecx\n    4ce4:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4ce9:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    4cee:\t48 89 c7             \tmov    %rax,%rdi\n    4cf1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4cf6:\te8 00 00 00 00       \tcallq  4cfb <mjpeg_decode_scan+0x947>\n    4cfb:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    4d00:\te9 60 02 00 00       \tjmpq   4f65 <mjpeg_decode_scan+0xbb1>\n    4d05:\t83 84 24 00 01 00 00 \taddl   $0x1,0x100(%rsp)\n    4d0c:\t01 \n    4d0d:\t8b 84 24 00 01 00 00 \tmov    0x100(%rsp),%eax\n    4d14:\t3b 84 24 e0 00 00 00 \tcmp    0xe0(%rsp),%eax\n    4d1b:\t75 13                \tjne    4d30 <mjpeg_decode_scan+0x97c>\n    4d1d:\tc7 84 24 00 01 00 00 \tmovl   $0x0,0x100(%rsp)\n    4d24:\t00 00 00 00 \n    4d28:\t83 84 24 fc 00 00 00 \taddl   $0x1,0xfc(%rsp)\n    4d2f:\t01 \n    4d30:\t83 84 24 f8 00 00 00 \taddl   $0x1,0xf8(%rsp)\n    4d37:\t01 \n    4d38:\t8b 84 24 f8 00 00 00 \tmov    0xf8(%rsp),%eax\n    4d3f:\t3b 84 24 e8 00 00 00 \tcmp    0xe8(%rsp),%eax\n    4d46:\t0f 8c a7 fa ff ff    \tjl     47f3 <mjpeg_decode_scan+0x43f>\n    4d4c:\t83 84 24 0c 01 00 00 \taddl   $0x1,0x10c(%rsp)\n    4d53:\t01 \n    4d54:\t8b 84 24 0c 01 00 00 \tmov    0x10c(%rsp),%eax\n    4d5b:\t3b 44 24 24          \tcmp    0x24(%rsp),%eax\n    4d5f:\t0f 8c e8 f9 ff ff    \tjl     474d <mjpeg_decode_scan+0x399>\n    4d65:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4d6a:\t8b 80 70 1d 00 00    \tmov    0x1d70(%rax),%eax\n    4d70:\t85 c0                \ttest   %eax,%eax\n    4d72:\t74 19                \tje     4d8d <mjpeg_decode_scan+0x9d9>\n    4d74:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4d79:\t8b 80 74 1d 00 00    \tmov    0x1d74(%rax),%eax\n    4d7f:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    4d82:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4d87:\t89 90 74 1d 00 00    \tmov    %edx,0x1d74(%rax)\n    4d8d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4d92:\t48 83 c0 10          \tadd    $0x10,%rax\n    4d96:\t48 89 c7             \tmov    %rax,%rdi\n    4d99:\te8 fa b5 ff ff       \tcallq  398 <get_bits_count>\n    4d9e:\tf7 d8                \tneg    %eax\n    4da0:\t83 e0 07             \tand    $0x7,%eax\n    4da3:\t83 c0 08             \tadd    $0x8,%eax\n    4da6:\t89 84 24 0c 01 00 00 \tmov    %eax,0x10c(%rsp)\n    4dad:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4db2:\t8b 80 70 1d 00 00    \tmov    0x1d70(%rax),%eax\n    4db8:\t85 c0                \ttest   %eax,%eax\n    4dba:\t0f 84 60 01 00 00    \tje     4f20 <mjpeg_decode_scan+0xb6c>\n    4dc0:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4dc5:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n    4dc9:\t8b 84 24 0c 01 00 00 \tmov    0x10c(%rsp),%eax\n    4dd0:\t89 c6                \tmov    %eax,%esi\n    4dd2:\t48 89 d7             \tmov    %rdx,%rdi\n    4dd5:\te8 0a b7 ff ff       \tcallq  4e4 <show_bits>\n    4dda:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4de1:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    4de6:\t89 d1                \tmov    %edx,%ecx\n    4de8:\td3 e6                \tshl    %cl,%esi\n    4dea:\t89 f2                \tmov    %esi,%edx\n    4dec:\t83 ea 01             \tsub    $0x1,%edx\n    4def:\t39 d0                \tcmp    %edx,%eax\n    4df1:\t0f 85 29 01 00 00    \tjne    4f20 <mjpeg_decode_scan+0xb6c>\n    4df7:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4dfc:\t48 83 c0 10          \tadd    $0x10,%rax\n    4e00:\t48 89 c7             \tmov    %rax,%rdi\n    4e03:\te8 90 b5 ff ff       \tcallq  398 <get_bits_count>\n    4e08:\t89 84 24 ec 00 00 00 \tmov    %eax,0xec(%rsp)\n    4e0f:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4e14:\t48 83 c0 10          \tadd    $0x10,%rax\n    4e18:\t48 89 c7             \tmov    %rax,%rdi\n    4e1b:\te8 e4 b8 ff ff       \tcallq  704 <align_get_bits>\n    4e20:\teb 16                \tjmp    4e38 <mjpeg_decode_scan+0xa84>\n    4e22:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4e27:\t48 83 c0 10          \tadd    $0x10,%rax\n    4e2b:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    4e30:\t48 89 c7             \tmov    %rax,%rdi\n    4e33:\te8 1d b7 ff ff       \tcallq  555 <skip_bits>\n    4e38:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4e3d:\t48 83 c0 10          \tadd    $0x10,%rax\n    4e41:\t48 89 c7             \tmov    %rax,%rdi\n    4e44:\te8 4f b5 ff ff       \tcallq  398 <get_bits_count>\n    4e49:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    4e4e:\t8b 52 24             \tmov    0x24(%rdx),%edx\n    4e51:\t39 d0                \tcmp    %edx,%eax\n    4e53:\t7d 1d                \tjge    4e72 <mjpeg_decode_scan+0xabe>\n    4e55:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4e5a:\t48 83 c0 10          \tadd    $0x10,%rax\n    4e5e:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    4e63:\t48 89 c7             \tmov    %rax,%rdi\n    4e66:\te8 79 b6 ff ff       \tcallq  4e4 <show_bits>\n    4e6b:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n    4e70:\t74 b0                \tje     4e22 <mjpeg_decode_scan+0xa6e>\n    4e72:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4e77:\t48 83 c0 10          \tadd    $0x10,%rax\n    4e7b:\t48 89 c7             \tmov    %rax,%rdi\n    4e7e:\te8 15 b5 ff ff       \tcallq  398 <get_bits_count>\n    4e83:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    4e88:\t8b 52 24             \tmov    0x24(%rdx),%edx\n    4e8b:\t39 d0                \tcmp    %edx,%eax\n    4e8d:\t7d 64                \tjge    4ef3 <mjpeg_decode_scan+0xb3f>\n    4e8f:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4e94:\t48 83 c0 10          \tadd    $0x10,%rax\n    4e98:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    4e9d:\t48 89 c7             \tmov    %rax,%rdi\n    4ea0:\te8 ba b5 ff ff       \tcallq  45f <get_bits>\n    4ea5:\t25 f8 00 00 00       \tand    $0xf8,%eax\n    4eaa:\t3d d0 00 00 00       \tcmp    $0xd0,%eax\n    4eaf:\t75 42                \tjne    4ef3 <mjpeg_decode_scan+0xb3f>\n    4eb1:\tc7 84 24 0c 01 00 00 \tmovl   $0x0,0x10c(%rsp)\n    4eb8:\t00 00 00 00 \n    4ebc:\teb 26                \tjmp    4ee4 <mjpeg_decode_scan+0xb30>\n    4ebe:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4ec3:\t8b 94 24 0c 01 00 00 \tmov    0x10c(%rsp),%edx\n    4eca:\t48 63 d2             \tmovslq %edx,%rdx\n    4ecd:\t48 81 c2 1c 01 00 00 \tadd    $0x11c,%rdx\n    4ed4:\tc7 44 90 08 00 04 00 \tmovl   $0x400,0x8(%rax,%rdx,4)\n    4edb:\t00 \n    4edc:\t83 84 24 0c 01 00 00 \taddl   $0x1,0x10c(%rsp)\n    4ee3:\t01 \n    4ee4:\t8b 84 24 0c 01 00 00 \tmov    0x10c(%rsp),%eax\n    4eeb:\t3b 44 24 24          \tcmp    0x24(%rsp),%eax\n    4eef:\t7c cd                \tjl     4ebe <mjpeg_decode_scan+0xb0a>\n    4ef1:\teb 2d                \tjmp    4f20 <mjpeg_decode_scan+0xb6c>\n    4ef3:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4ef8:\t48 83 c0 10          \tadd    $0x10,%rax\n    4efc:\t48 89 c7             \tmov    %rax,%rdi\n    4eff:\te8 94 b4 ff ff       \tcallq  398 <get_bits_count>\n    4f04:\t8b 94 24 ec 00 00 00 \tmov    0xec(%rsp),%edx\n    4f0b:\t29 c2                \tsub    %eax,%edx\n    4f0d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4f12:\t48 83 c0 10          \tadd    $0x10,%rax\n    4f16:\t89 d6                \tmov    %edx,%esi\n    4f18:\t48 89 c7             \tmov    %rax,%rdi\n    4f1b:\te8 86 b4 ff ff       \tcallq  3a6 <skip_bits_long>\n    4f20:\t83 84 24 08 01 00 00 \taddl   $0x1,0x108(%rsp)\n    4f27:\t01 \n    4f28:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4f2d:\t8b 80 b4 03 00 00    \tmov    0x3b4(%rax),%eax\n    4f33:\t39 84 24 08 01 00 00 \tcmp    %eax,0x108(%rsp)\n    4f3a:\t0f 8c 37 f7 ff ff    \tjl     4677 <mjpeg_decode_scan+0x2c3>\n    4f40:\t83 84 24 04 01 00 00 \taddl   $0x1,0x104(%rsp)\n    4f47:\t01 \n    4f48:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    4f4d:\t8b 80 b8 03 00 00    \tmov    0x3b8(%rax),%eax\n    4f53:\t39 84 24 04 01 00 00 \tcmp    %eax,0x104(%rsp)\n    4f5a:\t0f 8c 07 f7 ff ff    \tjl     4667 <mjpeg_decode_scan+0x2b3>\n    4f60:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4f65:\t48 81 c4 18 01 00 00 \tadd    $0x118,%rsp\n    4f6c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mjpeg_decode_scan(__int64 a1, int a2, int a3, char a4,\n                                     __int64 a5, __int64 a6) {\n  __int64 v6;\n  _BOOL4 v7;\n  int v8;\n  int v10;\n  int v11;\n  _WORD *v12;\n  int v13;\n  int v14;\n  int v15;\n  char v21[Number];\n  int v22;\n  int v23;\n  _WORD *v24;\n  _WORD *v25;\n  int v26;\n  int v27;\n  _WORD *v28;\n  unsigned int v29;\n  _WORD *v30;\n  int v31;\n  int v32;\n  int v33;\n  int v34;\n  int v35;\n  _BOOL4 v36;\n  int v37;\n  int l;\n  int v39;\n  int v40;\n  unsigned int j;\n  unsigned int k;\n  int i;\n  if (a5)\n    init_get_bits((__int64)v21, a5,\n                  *(_DWORD *)(a1 + Number) * *(_DWORD *)(a1 + Number));\n  if (*(_DWORD *)(a1 + Number) &&\n      (*(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L) & Number) != Number) {\n    av_log(*(_QWORD *)(a1 + Number), Number L, String);\n    *(_DWORD *)(a1 + Number) = Number;\n  }\n  for (i = Number; i < a2; ++i) {\n    v27 = *(_DWORD *)(a1 + Number * (i + Number L));\n    *(_QWORD *)&v21[Number * v27 + Number] =\n        *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L * v27);\n    if (a6)\n      v6 = *(_QWORD *)(a6 + Number L * v27);\n    else\n      v6 = Number L;\n    *(_QWORD *)&v21[Number * v27 + Number] = v6;\n    *(_DWORD *)&v21[Number * v27 + Number] =\n        *(_DWORD *)(a1 + Number * (v27 + Number L) + Number);\n    *(_QWORD *)(a1 + Number * (v27 + Number L)) |= Number;\n    if (*(_DWORD *)(a1 + Number)) {\n      v26 = *(_DWORD *)&v21[Number * v27 + Number] *\n            (*(_DWORD *)(a1 + Number * (i + Number L)) *\n                 (Number * *(_DWORD *)(a1 + Number) -\n                  ((*(_DWORD *)(a1 + Number) / *(_DWORD *)(a1 + Number)) &\n                   Number)) -\n             Number);\n      *(_QWORD *)&v21[Number * v27 + Number] += v26;\n      *(_QWORD *)&v21[Number * v27 + Number] += v26;\n      *(_DWORD *)&v21[Number * v27 + Number] =\n          -*(_DWORD *)&v21[Number * v27 + Number];\n    }\n  }\n  for (j = Number; (signed int)j < *(_DWORD *)(a1 + Number); ++j) {\n    for (k = Number; (signed int)k < *(_DWORD *)(a1 + Number); ++k) {\n      v7 = a5 && !(unsigned int)get_bits1((__int64)v21);\n      v36 = v7;\n      if (*(_DWORD *)(a1 + Number) && !*(_DWORD *)(a1 + Number))\n        *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number);\n      if ((int)get_bits_count(a1 + Number) > *(_DWORD *)(a1 + Number)) {\n        v8 = get_bits_count(a1 + Number);\n        av_log(*(_QWORD *)(a1 + Number), Number L, String,\n               (unsigned int)(v8 - *(_DWORD *)(a1 + Number)));\n        return Number;\n      }\n      for (i = Number; i < a2; ++i) {\n        v34 = *(_DWORD *)(a1 + Number * (i + Number L));\n        v33 = *(_DWORD *)(a1 + Number * (i + Number L));\n        v32 = *(_DWORD *)(a1 + Number * (i + Number L));\n        v31 = *(_DWORD *)(a1 + Number * (i + Number L));\n        v40 = Number;\n        v39 = Number;\n        for (l = Number; l < v34; ++l) {\n          v37 = (int)(Number * ((j * v31 + v39) *\n                                    *(_DWORD *)&v21[Number * v33 + Number] +\n                                k * v32 + v40)) >>\n                *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n          if (*(_DWORD *)(a1 + Number) && *(_DWORD *)(a1 + Number))\n            v37 += *(int *)&v21[Number * v33 + Number] >> Number;\n          v30 = (_WORD *)(*(_QWORD *)&v21[Number * v33 + Number] + v37);\n          if (*(_DWORD *)(a1 + Number)) {\n            v29 =\n                (j * v31 + v39) * *(_DWORD *)(a1 + Number * (v33 + Number L)) +\n                k * v32 + v40;\n            v28 = (_WORD *)(((__int64)(int)v29 << Number) +\n                            *(_QWORD *)(a1 + Number * (v33 + Number L)));\n            if (a3) {\n              v13 = get_bits1(a1 + Number);\n              *v28 += (v13 *\n                       *(__int16 *)(((__int64)*(\n                                         int *)(a1 + Number * (v33 + Number L) +\n                                                Number)\n                                     << Number) +\n                                    a1 + Number))\n                      << a4;\n            } else if ((int)decode_dc_progressive(\n                           a1, v28, i,\n                           *(_DWORD *)(a1 + Number * (i + Number L)),\n                           (__int16 *)(((__int64)*(int *)(a1 +\n                                                          Number *\n                                                              (v33 + Number L) +\n                                                          Number)\n                                        << Number) +\n                                       Number + a1 + Number),\n                           a4) < Number) {\n            LABEL_44:\n              av_log(*(_QWORD *)(a1 + Number), Number L, String, j, k);\n              return Number;\n            }\n          } else if (v36) {\n            v10 = *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n            v11 = *(_DWORD *)&v21[Number * v33 + Number];\n            v12 = (_WORD *)(v37 + *(_QWORD *)&v21[Number * v33 + Number]);\n            v25 = v30;\n            v24 = v12;\n            v23 = v11;\n            v22 = v10;\n            if (v10 == Number) {\n              *(_BYTE *)v25 = *(_BYTE *)v24;\n            } else if (v22 <= Number) {\n              if (v22 == Number) {\n                copy_block2(v25, v24, v23, v23, Number);\n              } else if (v22 <= Number) {\n                if (v22) {\n                  if (v22 == Number)\n                    copy_block4(v25, v24, v23, v23, Number);\n                } else {\n                  copy_block8(v25, v24, v23, v23, Number);\n                }\n              }\n            }\n          } else {\n            (*(void(__fastcall **)(__int64))(a1 + Number))(a1 + Number);\n            if ((int)decode_block(\n                    a1, (_WORD *)(a1 + Number), i,\n                    *(_DWORD *)(a1 + Number * (i + Number L)),\n                    *(_DWORD *)(a1 + Number * (i + Number L)),\n                    (__int16 *)(((__int64)*(int *)(a1 +\n                                                   Number * (v33 + Number L) +\n                                                   Number)\n                                 << Number) +\n                                Number + a1 + Number)) < Number)\n              goto LABEL_44;\n            (*(void(__fastcall **)(_WORD *, _QWORD, __int64))(a1 + Number))(\n                v30, *(unsigned int *)&v21[Number * v33 + Number], a1 + Number);\n          }\n          if (++v40 == v32) {\n            v40 = Number;\n            ++v39;\n          }\n        }\n      }\n      if (*(_DWORD *)(a1 + Number))\n        --*(_DWORD *)(a1 + Number);\n      i = (-(int)get_bits_count(a1 + Number) & Number) + Number;\n      if (*(_DWORD *)(a1 + Number)) {\n        v14 = show_bits(a1 + Number, i);\n        if (v14 == (Number << i) - Number) {\n          v35 = get_bits_count(a1 + Number);\n          align_get_bits(a1 + Number);\n          while ((int)get_bits_count(a1 + Number) < *(_DWORD *)(a1 + Number) &&\n                 (unsigned int)show_bits(a1 + Number, Number) == Number)\n            skip_bits(a1 + Number, Number);\n          if ((int)get_bits_count(a1 + Number) < *(_DWORD *)(a1 + Number) &&\n              (get_bits(a1 + Number, Number) & Number) == Number) {\n            for (i = Number; i < a2; ++i)\n              *(_DWORD *)(a1 + Number * (i + Number L) + Number) = Number;\n          } else {\n            v15 = get_bits_count(a1 + Number);\n            skip_bits_long(a1 + Number, v35 - v15);\n          }\n        }\n      }\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl mjpeg_decode_scan(MJpegDecodeContext_0 *s, int nb_components,\n                              int Ah_0, int Al_0, const uint8_t *mb_bitmask,\n                              const AVFrame_0 *reference) {\n  const uint8_t *v6;\n  int v7;\n  int v8;\n  int v10;\n  int v11;\n  uint8_t *v12;\n  unsigned int v13;\n  unsigned int v14;\n  int v15;\n  GetBitContext_0 <span class=\"supfact\">mb_bitmask_gb</span>;\n  int linesize[Number];\n  const uint8_t *reference_data[Number];\n  uint8_t *data[Number];\n  int v25;\n  int dstStride;\n  uint8_t *src;\n  uint8_t *dst;\n  int offset;\n  int c;\n  DCTELEM *block;\n  int block_idx;\n  uint8_t *ptr;\n  int v;\n  int h;\n  int c_0;\n  int n;\n  int pos;\n  int copy_mb;\n  int block_offset;\n  int j;\n  int y;\n  int x;\n  int mb_y;\n  int mb_x;\n  int i;\n  if (mb_bitmask)\n    init_get_bits(&<span class=\"supfact\">mb_bitmask_gb</span>, mb_bitmask,\n                  s->mb_height * s->mb_width);\n  if (s->flipped && (s->avctx->flags & Number) != Number) {\n    av_log(s->avctx, Number L, String);\n    s->flipped = Number;\n  }\n  for (i = Number; i < nb_components; ++i) {\n    c = s->comp_index[i];\n    data[c] = s->picture_ptr->data[c];\n    if (reference)\n      v6 = reference->data[c];\n    else\n      v6 = Number L;\n    reference_data[c] = v6;\n    linesize[c] = s->linesize[c];\n    s->coefs_finished[c] |= Number;\n    if (s->flipped) {\n      offset =\n          linesize[c] * (s->v_scount[i] * (Number * s->mb_height -\n                                           ((s->height / s->v_max) & Number)) -\n                         Number);\n      data[c] += offset;\n      reference_data[c] += offset;\n      linesize[c] = -linesize[c];\n    }\n  }\n  for (mb_y = Number; mb_y < s->mb_height; ++mb_y) {\n    for (mb_x = Number; mb_x < s->mb_width; ++mb_x) {\n      v7 = mb_bitmask && !get_bits1(&<span class=\"supfact\">mb_bitmask_gb</span>);\n      copy_mb = v7;\n      if (s->restart_interval && !s->restart_count)\n        s->restart_count = s->restart_interval;\n      if (get_bits_count(&s->gb) > s->gb.size_in_bits) {\n        v8 = get_bits_count(&s->gb);\n        av_log(s->avctx, Number L, String,\n               (unsigned int)(v8 - s->gb.size_in_bits));\n        return Number;\n      }\n      for (i = Number; i < nb_components; ++i) {\n        n = s->nb_blocks[i];\n        c_0 = s->comp_index[i];\n        h = s->h_scount[i];\n        v = s->v_scount[i];\n        x = Number;\n        y = Number;\n        for (j = Number; j < n; ++j) {\n          block_offset =\n              (Number * ((mb_y * v + y) * linesize[c_0] + mb_x * h + x)) >>\n              s->avctx->lowres;\n          if (s->interlaced && s->bottom_field)\n            block_offset += linesize[c_0] >> Number;\n          ptr = &data[c_0][block_offset];\n          if (s->progressive) {\n            block_idx = (mb_y * v + y) * s->block_stride[c_0] + mb_x * h + x;\n            block = s->blocks[c_0][(__int64)block_idx];\n            if (Ah_0) {\n              v13 = get_bits1(&s->gb);\n              *block +=\n                  (v13 *\n                   s->quant_matrixes[(__int64)s->quant_index[c_0]][Number])\n                  << Al_0;\n            } else if (decode_dc_progressive(\n                           s, block, i, s->dc_index[i],\n                           s->quant_matrixes[(__int64)s->quant_index[c_0]],\n                           Al_0) < Number) {\n            LABEL_44:\n              av_log(s->avctx, Number L, String, (unsigned int)mb_y,\n                     (unsigned int)mb_x);\n              return Number;\n            }\n          } else if (copy_mb) {\n            v10 = s->avctx->lowres;\n            v11 = linesize[c_0];\n            v12 = (uint8_t *)&reference_data[c_0][block_offset];\n            dst = ptr;\n            src = v12;\n            dstStride = v11;\n            v25 = v10;\n            if (v10 == Number) {\n              *dst = *src;\n            } else if (v25 <= Number) {\n              if (v25 == Number) {\n                copy_block2(dst, src, dstStride, dstStride, Number);\n              } else if (v25 <= Number) {\n                if (v25) {\n                  if (v25 == Number)\n                    copy_block4(dst, src, dstStride, dstStride, Number);\n                } else {\n                  copy_block8(dst, src, dstStride, dstStride, Number);\n                }\n              }\n            }\n          } else {\n            s->dsp.clear_block(s->block);\n            if (decode_block(s, s->block, i, s->dc_index[i], s->ac_index[i],\n                             s->quant_matrixes[(__int64)s->quant_index[c_0]]) <\n                Number)\n              goto LABEL_44;\n            s->dsp.idct_put(ptr, linesize[c_0], s->block);\n          }\n          if (++x == h) {\n            x = Number;\n            ++y;\n          }\n        }\n      }\n      if (s->restart_interval)\n        --s->restart_count;\n      i = (-get_bits_count(&s->gb) & Number) + Number;\n      if (s->restart_interval) {\n        v14 = show_bits(&s->gb, i);\n        if (v14 == (Number << i) - Number) {\n          pos = get_bits_count(&s->gb);\n          align_get_bits(&s->gb);\n          while (get_bits_count(&s->gb) < s->gb.size_in_bits &&\n                 show_bits(&s->gb, Number) == Number)\n            skip_bits(&s->gb, Number);\n          if (get_bits_count(&s->gb) < s->gb.size_in_bits &&\n              (get_bits(&s->gb, Number) & Number) == Number) {\n            for (i = Number; i < nb_components; ++i)\n              s->last_dc[i] = Number;\n          } else {\n            v15 = get_bits_count(&s->gb);\n            skip_bits_long(&s->gb, pos - v15);\n          }\n        }\n      }\n    }\n  }\n  return Number;\n}", "var": [{"name": "v21", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }", "pred_name": "mb_bitmask_gb", "ref_name": "mb_bitmask_gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; }"}], "body_in_train": false}, {"repo_owner": "stargieg", "repo_name": "bacnet-stack", "path": "stargieg/bacnet-stack/9b20c47508fceed501d724cf86491f5554e3f82a8c645f88cd5d2b8dc0616f3c", "path_in_repo": "stargieg/bacnet-stack/demo/handler/h_rr_a.o", "objdump": "0000000000000000 <PrintReadRangeData>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec 20 06 00 00 \tsub    $0x620,%rsp\n   b:\t48 89 bd e8 f9 ff ff \tmov    %rdi,-0x618(%rbp)\n  12:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  19:\tc6 45 f3 01          \tmovb   $0x1,-0xd(%rbp)\n  1d:\tc6 45 eb 00          \tmovb   $0x0,-0x15(%rbp)\n  21:\t48 83 bd e8 f9 ff ff \tcmpq   $0x0,-0x618(%rbp)\n  28:\t00 \n  29:\t0f 84 b4 00 00 00    \tje     e3 <PrintReadRangeData+0xe3>\n  2f:\t48 8b 85 e8 f9 ff ff \tmov    -0x618(%rbp),%rax\n  36:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  3a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  3e:\t48 8b 85 e8 f9 ff ff \tmov    -0x618(%rbp),%rax\n  45:\t8b 40 18             \tmov    0x18(%rax),%eax\n  48:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4b:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  4e:\t0f b6 c8             \tmovzbl %al,%ecx\n  51:\t48 8d 95 f0 f9 ff ff \tlea    -0x610(%rbp),%rdx\n  58:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  5c:\t89 ce                \tmov    %ecx,%esi\n  5e:\t48 89 c7             \tmov    %rax,%rdi\n  61:\te8 00 00 00 00       \tcallq  66 <PrintReadRangeData+0x66>\n  66:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  69:\t80 7d f3 00          \tcmpb   $0x0,-0xd(%rbp)\n  6d:\t74 10                \tje     7f <PrintReadRangeData+0x7f>\n  6f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  72:\t3b 45 f4             \tcmp    -0xc(%rbp),%eax\n  75:\t7d 08                \tjge    7f <PrintReadRangeData+0x7f>\n  77:\tc6 45 f3 00          \tmovb   $0x0,-0xd(%rbp)\n  7b:\tc6 45 eb 01          \tmovb   $0x1,-0x15(%rbp)\n  7f:\t48 8b 85 e8 f9 ff ff \tmov    -0x618(%rbp),%rax\n  86:\t8b 00                \tmov    (%rax),%eax\n  88:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  8b:\t48 8b 85 e8 f9 ff ff \tmov    -0x618(%rbp),%rax\n  92:\t8b 40 04             \tmov    0x4(%rax),%eax\n  95:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  98:\t48 8b 85 e8 f9 ff ff \tmov    -0x618(%rbp),%rax\n  9f:\t8b 40 08             \tmov    0x8(%rax),%eax\n  a2:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  a5:\t48 8b 85 e8 f9 ff ff \tmov    -0x618(%rbp),%rax\n  ac:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  af:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  b2:\t48 8d 85 f0 f9 ff ff \tlea    -0x610(%rbp),%rax\n  b9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  bd:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  c1:\t7e 1c                \tjle    df <PrintReadRangeData+0xdf>\n  c3:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  c6:\t3b 45 f4             \tcmp    -0xc(%rbp),%eax\n  c9:\t7d 17                \tjge    e2 <PrintReadRangeData+0xe2>\n  cb:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  ce:\t48 98                \tcltq   \n  d0:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n  d4:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  d7:\t29 45 f4             \tsub    %eax,-0xc(%rbp)\n  da:\te9 6c ff ff ff       \tjmpq   4b <PrintReadRangeData+0x4b>\n  df:\t90                   \tnop\n  e0:\teb 01                \tjmp    e3 <PrintReadRangeData+0xe3>\n  e2:\t90                   \tnop\n  e3:\t90                   \tnop\n  e4:\tc9                   \tleaveq \n  e5:\tc3                   \tretq   ", "code_s": "void __fastcall PrintReadRangeData(__int64 a1) {\n  char v1[Number];\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  char *v6;\n  char v7;\n  int v8;\n  char v9;\n  int i;\n  __int64 v11;\n  v8 = Number;\n  v9 = Number;\n  v7 = Number;\n  if (a1) {\n    v11 = *(_QWORD *)(a1 + Number);\n    for (i = *(_DWORD *)(a1 + Number);; i -= v8) {\n      v8 = bacapp_decode_application_data(v11, (unsigned __int8)i, v1);\n      if (v9 && v8 < i) {\n        v9 = Number;\n        v7 = Number;\n      }\n      v2 = *(_DWORD *)a1;\n      v3 = *(_DWORD *)(a1 + Number);\n      v4 = *(_DWORD *)(a1 + Number);\n      v5 = *(_DWORD *)(a1 + Number);\n      v6 = v1;\n      if (v8 <= Number || v8 >= i)\n        break;\n      v11 += v8;\n    }\n  }\n}", "code_t": "void __cdecl PrintReadRangeData(BACNET_READ_RANGE_DATA *data) {\n  BACNET_APPLICATION_DATA_VALUE <span class=\"supfact\">value</span>;\n  BACNET_OBJECT_PROPERTY_VALUE <span class=\"supfact\">object_value</span>;\n  bool print_brace;\n  int len;\n  bool first_value;\n  int application_data_len;\n  uint8_t *application_data;\n  len = Number;\n  first_value = Number;\n  print_brace = Number;\n  if (data) {\n    application_data = data->application_data;\n    for (application_data_len = data->application_data_len;;\n         application_data_len -= len) {\n      len = bacapp_decode_application_data(\n          application_data, (unsigned __int8)application_data_len,\n          &<span class=\"supfact\">value</span>);\n      if (first_value && len < application_data_len) {\n        first_value = Number;\n        print_brace = Number;\n      }\n      <span class=\"supfact\">object_value</span>.object_type = data->object_type;\n      <span class=\"supfact\">object_value</span>.object_instance = data->object_instance;\n      <span class=\"supfact\">object_value</span>.object_property = data->object_property;\n      <span class=\"supfact\">object_value</span>.array_index = data->array_index;\n      <span class=\"supfact\">object_value</span>.<span class=\"supfact\">value</span> =\n          &<span class=\"supfact\">value</span>;\n      if (len <= Number || len >= application_data_len)\n        break;\n      application_data += len;\n    }\n  }\n}", "var": [{"name": "v1", "type": "struct BACNET_APPLICATION_DATA_VALUE { bool context_specific; uint8_t context_tag; uint8_t tag; PADDING (5); $83043410B6003A17880EB60ADAB80C27 type; BACnet_Application_Data_Value * next; }", "pred_name": "value", "ref_name": "value", "ref_type": "struct BACNET_APPLICATION_DATA_VALUE { bool context_specific; uint8_t context_tag; uint8_t tag; PADDING (5); $83043410B6003A17880EB60ADAB80C27 type; BACnet_Application_Data_Value * next; }"}, {"name": "v2", "type": "disappear", "pred_name": "", "ref_name": "object_value", "ref_type": "struct BACNET_OBJECT_PROPERTY_VALUE { BACNET_OBJECT_TYPE object_type; uint32_t object_instance; BACNET_PROPERTY_ID object_property; uint32_t array_index; BACNET_APPLICATION_DATA_VALUE * value; }"}], "body_in_train": false}, {"repo_owner": "malczuuu", "repo_name": "battleships", "path": "malczuuu/battleships/e45ca0e0831d3a7422425629bf98a71c0c68710b50d13b369fa5e96ca5c4953e", "path_in_repo": "malczuuu/battleships//build/battleships", "objdump": "000000000040177c <main>:\n  40177c:\t55                   \tpush   %rbp\n  40177d:\t48 89 e5             \tmov    %rsp,%rbp\n  401780:\t48 81 ec 40 01 00 00 \tsub    $0x140,%rsp\n  401787:\t89 bd cc fe ff ff    \tmov    %edi,-0x134(%rbp)\n  40178d:\t48 89 b5 c0 fe ff ff \tmov    %rsi,-0x140(%rbp)\n  401794:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401799:\te8 22 f9 ff ff       \tcallq  4010c0 <time@plt>\n  40179e:\t89 c7                \tmov    %eax,%edi\n  4017a0:\te8 fb f8 ff ff       \tcallq  4010a0 <srand@plt>\n  4017a5:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4017a9:\t48 89 c7             \tmov    %rax,%rdi\n  4017ac:\te8 b0 02 00 00       \tcallq  401a61 <board_init>\n  4017b1:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  4017b5:\t48 89 c7             \tmov    %rax,%rdi\n  4017b8:\te8 a4 02 00 00       \tcallq  401a61 <board_init>\n  4017bd:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4017c1:\t48 89 c7             \tmov    %rax,%rdi\n  4017c4:\te8 2c 07 00 00       \tcallq  401ef5 <board_randomize>\n  4017c9:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  4017cd:\t48 89 c7             \tmov    %rax,%rdi\n  4017d0:\te8 20 07 00 00       \tcallq  401ef5 <board_randomize>\n  4017d5:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  4017dc:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4017e3:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  4017ea:\tc7 45 f0 ff ff ff ff \tmovl   $0xffffffff,-0x10(%rbp)\n  4017f1:\tc7 45 ec ff ff ff ff \tmovl   $0xffffffff,-0x14(%rbp)\n  4017f8:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  4017fb:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4017fe:\t89 c6                \tmov    %eax,%esi\n  401800:\tbf e8 30 40 00       \tmov    $0x4030e8,%edi\n  401805:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40180a:\te8 71 f8 ff ff       \tcallq  401080 <printf@plt>\n  40180f:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  401813:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401817:\t48 89 d6             \tmov    %rdx,%rsi\n  40181a:\t48 89 c7             \tmov    %rax,%rdi\n  40181d:\te8 0a fd ff ff       \tcallq  40152c <print_boards>\n  401822:\te9 c5 01 00 00       \tjmpq   4019ec <main+0x270>\n  401827:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40182c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401831:\te8 df 01 00 00       \tcallq  401a15 <coords_create>\n  401836:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  40183a:\tbf 10 31 40 00       \tmov    $0x403110,%edi\n  40183f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401844:\te8 37 f8 ff ff       \tcallq  401080 <printf@plt>\n  401849:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n  401850:\t48 89 c6             \tmov    %rax,%rsi\n  401853:\tbf 32 31 40 00       \tmov    $0x403132,%edi\n  401858:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40185d:\te8 9e f8 ff ff       \tcallq  401100 <__isoc99_scanf@plt>\n  401862:\t48 8d 8d d0 fe ff ff \tlea    -0x130(%rbp),%rcx\n  401869:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  40186d:\tba 38 31 40 00       \tmov    $0x403138,%edx\n  401872:\t48 89 ce             \tmov    %rcx,%rsi\n  401875:\t48 89 c7             \tmov    %rax,%rdi\n  401878:\te8 b5 f9 ff ff       \tcallq  401232 <match>\n  40187d:\t85 c0                \ttest   %eax,%eax\n  40187f:\t74 1d                \tje     40189e <main+0x122>\n  401881:\tbf 6a 31 40 00       \tmov    $0x40316a,%edi\n  401886:\te8 c5 f7 ff ff       \tcallq  401050 <puts@plt>\n  40188b:\tc7 45 f0 ff ff ff ff \tmovl   $0xffffffff,-0x10(%rbp)\n  401892:\tc7 45 ec ff ff ff ff \tmovl   $0xffffffff,-0x14(%rbp)\n  401899:\te9 4e 01 00 00       \tjmpq   4019ec <main+0x270>\n  40189e:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  4018a2:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  4018a6:\t48 89 d6             \tmov    %rdx,%rsi\n  4018a9:\t48 89 c7             \tmov    %rax,%rdi\n  4018ac:\te8 6d 07 00 00       \tcallq  40201e <board_fire>\n  4018b1:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  4018b4:\t83 7d f0 67          \tcmpl   $0x67,-0x10(%rbp)\n  4018b8:\t75 0f                \tjne    4018c9 <main+0x14d>\n  4018ba:\tbf 80 31 40 00       \tmov    $0x403180,%edi\n  4018bf:\te8 8c f7 ff ff       \tcallq  401050 <puts@plt>\n  4018c4:\te9 23 01 00 00       \tjmpq   4019ec <main+0x270>\n  4018c9:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  4018cd:\t48 89 c7             \tmov    %rax,%rdi\n  4018d0:\te8 9e 08 00 00       \tcallq  402173 <board_alive>\n  4018d5:\t85 c0                \ttest   %eax,%eax\n  4018d7:\t75 11                \tjne    4018ea <main+0x16e>\n  4018d9:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4018e0:\tbf a9 31 40 00       \tmov    $0x4031a9,%edi\n  4018e5:\te8 66 f7 ff ff       \tcallq  401050 <puts@plt>\n  4018ea:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4018ee:\t48 89 c7             \tmov    %rax,%rdi\n  4018f1:\te8 1a 09 00 00       \tcallq  402210 <board_random_hit>\n  4018f6:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4018fa:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  4018fe:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  401902:\t48 89 d6             \tmov    %rdx,%rsi\n  401905:\t48 89 c7             \tmov    %rax,%rdi\n  401908:\te8 11 07 00 00       \tcallq  40201e <board_fire>\n  40190d:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  401910:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  401914:\t48 89 c7             \tmov    %rax,%rdi\n  401917:\te8 57 08 00 00       \tcallq  402173 <board_alive>\n  40191c:\t85 c0                \ttest   %eax,%eax\n  40191e:\t75 11                \tjne    401931 <main+0x1b5>\n  401920:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  401927:\tbf b2 31 40 00       \tmov    $0x4031b2,%edi\n  40192c:\te8 1f f7 ff ff       \tcallq  401050 <puts@plt>\n  401931:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401936:\te8 eb fa ff ff       \tcallq  401426 <clearconsole>\n  40193b:\t83 7d f0 65          \tcmpl   $0x65,-0x10(%rbp)\n  40193f:\t75 10                \tjne    401951 <main+0x1d5>\n  401941:\tbf c1 31 40 00       \tmov    $0x4031c1,%edi\n  401946:\te8 05 f7 ff ff       \tcallq  401050 <puts@plt>\n  40194b:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  40194f:\teb 30                \tjmp    401981 <main+0x205>\n  401951:\t83 7d f0 66          \tcmpl   $0x66,-0x10(%rbp)\n  401955:\t75 1a                \tjne    401971 <main+0x1f5>\n  401957:\tbf ce 31 40 00       \tmov    $0x4031ce,%edi\n  40195c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401961:\te8 1a f7 ff ff       \tcallq  401080 <printf@plt>\n  401966:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  401969:\t83 c0 05             \tadd    $0x5,%eax\n  40196c:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40196f:\teb 10                \tjmp    401981 <main+0x205>\n  401971:\t83 7d f0 68          \tcmpl   $0x68,-0x10(%rbp)\n  401975:\t75 0a                \tjne    401981 <main+0x205>\n  401977:\tbf e4 31 40 00       \tmov    $0x4031e4,%edi\n  40197c:\te8 cf f6 ff ff       \tcallq  401050 <puts@plt>\n  401981:\t83 7d ec 65          \tcmpl   $0x65,-0x14(%rbp)\n  401985:\t75 10                \tjne    401997 <main+0x21b>\n  401987:\tbf f2 31 40 00       \tmov    $0x4031f2,%edi\n  40198c:\te8 bf f6 ff ff       \tcallq  401050 <puts@plt>\n  401991:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  401995:\teb 2b                \tjmp    4019c2 <main+0x246>\n  401997:\t83 7d ec 66          \tcmpl   $0x66,-0x14(%rbp)\n  40199b:\t75 15                \tjne    4019b2 <main+0x236>\n  40199d:\tbf 01 32 40 00       \tmov    $0x403201,%edi\n  4019a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4019a7:\te8 d4 f6 ff ff       \tcallq  401080 <printf@plt>\n  4019ac:\t83 45 f4 05          \taddl   $0x5,-0xc(%rbp)\n  4019b0:\teb 10                \tjmp    4019c2 <main+0x246>\n  4019b2:\t83 7d ec 68          \tcmpl   $0x68,-0x14(%rbp)\n  4019b6:\t75 0a                \tjne    4019c2 <main+0x246>\n  4019b8:\tbf 19 32 40 00       \tmov    $0x403219,%edi\n  4019bd:\te8 8e f6 ff ff       \tcallq  401050 <puts@plt>\n  4019c2:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  4019c5:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4019c8:\t89 c6                \tmov    %eax,%esi\n  4019ca:\tbf e8 30 40 00       \tmov    $0x4030e8,%edi\n  4019cf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4019d4:\te8 a7 f6 ff ff       \tcallq  401080 <printf@plt>\n  4019d9:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4019dd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4019e1:\t48 89 d6             \tmov    %rdx,%rsi\n  4019e4:\t48 89 c7             \tmov    %rax,%rdi\n  4019e7:\te8 40 fb ff ff       \tcallq  40152c <print_boards>\n  4019ec:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4019f0:\t0f 85 31 fe ff ff    \tjne    401827 <main+0xab>\n  4019f6:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4019fa:\t48 89 c7             \tmov    %rax,%rdi\n  4019fd:\te8 fb 00 00 00       \tcallq  401afd <board_destroy>\n  401a02:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  401a06:\t48 89 c7             \tmov    %rax,%rdi\n  401a09:\te8 ef 00 00 00       \tcallq  401afd <board_destroy>\n  401a0e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401a13:\tc9                   \tleaveq \n  401a14:\tc3                   \tretq   ", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  unsigned int v3;\n  char v5[Number];\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  int v9;\n  int v10;\n  unsigned int v11;\n  unsigned int v12;\n  int v13;\n  v3 = time(Number L);\n  srand(v3);\n  board_init(&v8);\n  board_init(&v7);\n  board_randomize(&v8);\n  board_randomize(&v7);\n  v13 = Number;\n  v12 = Number;\n  v11 = Number;\n  v10 = Number;\n  v9 = Number;\n  printf(String, Number L, Number L);\n  print_boards(v8, v7);\n  while (v13) {\n    v6 = coords_create(Number L, Number L);\n    printf(String);\n    __isoc99_scanf();\n    if ((unsigned int)match((int *)&v6, v5, String)) {\n      puts(String);\n      v10 = Number;\n      v9 = Number;\n    } else {\n      v10 = board_fire(&v7, v6);\n      if (v10 == Number) {\n        puts(String);\n      } else {\n        if (!(unsigned int)board_alive(&v7)) {\n          v13 = Number;\n          puts(String);\n        }\n        v6 = board_random_hit(&v8);\n        v9 = board_fire(&v8, v6);\n        if (!(unsigned int)board_alive(&v8)) {\n          v13 = Number;\n          puts(String);\n        }\n        clearconsole();\n        switch (v10) {\n        case String:\n          puts(String);\n          ++v12;\n          break;\n        case String:\n          printf(String);\n          v12 = v11 + Number;\n          break;\n        case String:\n          puts(String);\n          break;\n        }\n        switch (v9) {\n        case String:\n          puts(String);\n          ++v11;\n          break;\n        case String:\n          printf(String);\n          v11 += Number;\n          break;\n        case String:\n          puts(String);\n          break;\n        }\n        printf(String, v12, v11);\n        print_boards(v8, v7);\n      }\n    }\n  }\n  board_destroy(&v8);\n  board_destroy(&v7);\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  unsigned int v3;\n  char target[Number];\n  coords_t <span class=\"supfact\">coords</span>;\n  board_t <span class=\"supfact\">computer</span>;\n  board_t <span class=\"supfact\">player</span>;\n  int computer_status;\n  int player_status;\n  int computer_score;\n  int player_score;\n  bool play;\n  coords_t v14;\n  coords_t v15;\n  v3 = time(Number L);\n  srand(v3);\n  board_init(&<span class=\"supfact\">player</span>);\n  board_init(&<span class=\"supfact\">computer</span>);\n  board_randomize(&<span class=\"supfact\">player</span>);\n  board_randomize(&<span class=\"supfact\">computer</span>);\n  play = Number;\n  player_score = Number;\n  computer_score = Number;\n  player_status = Number;\n  computer_status = Number;\n  printf(String, Number L, Number L);\n  print_boards(<span class=\"supfact\">player</span>, <span class=\"supfact\">computer</span>);\n  while (play) {\n    <span class=\"supfact\">coords</span> = coords_create(Number, Number);\n    printf(String);\n    __isoc99_scanf();\n    if (match(&<span class=\"supfact\">coords</span>, target, String)) {\n      puts(String);\n      player_status = Number;\n      computer_status = Number;\n    } else {\n      v14 = <span class=\"supfact\">coords</span>;\n      player_status = board_fire(&<span class=\"supfact\">computer</span>, v14);\n      if (player_status == Number) {\n        puts(String);\n      } else {\n        if (!board_alive(&<span class=\"supfact\">computer</span>)) {\n          play = Number;\n          puts(String);\n        }\n        <span class=\"supfact\">coords</span> = board_random_hit(&<span class=\"supfact\">player</span>);\n        v15 = <span class=\"supfact\">coords</span>;\n        computer_status = board_fire(&<span class=\"supfact\">player</span>, v15);\n        if (!board_alive(&<span class=\"supfact\">player</span>)) {\n          play = Number;\n          puts(String);\n        }\n        clearconsole();\n        switch (player_status) {\n        case String:\n          puts(String);\n          ++player_score;\n          break;\n        case String:\n          printf(String);\n          player_score = computer_score + Number;\n          break;\n        case String:\n          puts(String);\n          break;\n        }\n        switch (computer_status) {\n        case String:\n          puts(String);\n          ++computer_score;\n          break;\n        case String:\n          printf(String);\n          computer_score += Number;\n          break;\n        case String:\n          puts(String);\n          break;\n        }\n        printf(String, (unsigned int)player_score,\n               (unsigned int)computer_score);\n        print_boards(<span class=\"supfact\">player</span>, <span class=\"supfact\">computer</span>);\n      }\n    }\n  }\n  board_destroy(&<span class=\"supfact\">player</span>);\n  board_destroy(&<span class=\"supfact\">computer</span>);\n  return Number;\n}", "var": [{"name": "v6", "type": "__unk__", "pred_name": "__unk__", "ref_name": "coords", "ref_type": "struct coords_t { int x; int y; }"}, {"name": "v7", "type": "__unk__", "pred_name": "__unk__", "ref_name": "computer", "ref_type": "struct board_t { int ** fields; }"}, {"name": "v8", "type": "__unk__", "pred_name": "__unk__", "ref_name": "player", "ref_type": "struct board_t { int ** fields; }"}], "body_in_train": false}, {"repo_owner": "caelin99", "repo_name": "klte_tree", "path": "caelin99/klte_tree/2a354142d57d5629efd517e6eccc128afb31f64e0e81f86574ca6405819e3286", "path_in_repo": "caelin99/klte_tree/kernel/samsung/klte/tools/perf/util/pager.o", "objdump": "0000000000000000 <pager_preexec>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n   b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  12:\t00 00 \n  14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  18:\t31 c0                \txor    %eax,%eax\n  1a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  1f:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  24:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  2b:\t48 89 d7             \tmov    %rdx,%rdi\n  2e:\tfc                   \tcld    \n  2f:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  32:\t89 f8                \tmov    %edi,%eax\n  34:\t89 ca                \tmov    %ecx,%edx\n  36:\t89 95 68 ff ff ff    \tmov    %edx,-0x98(%rbp)\n  3c:\t89 85 6c ff ff ff    \tmov    %eax,-0x94(%rbp)\n  42:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n  49:\t48 83 c8 01          \tor     $0x1,%rax\n  4d:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n  54:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  5b:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  62:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  68:\t48 89 d1             \tmov    %rdx,%rcx\n  6b:\tba 00 00 00 00       \tmov    $0x0,%edx\n  70:\t48 89 c6             \tmov    %rax,%rsi\n  73:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  78:\te8 00 00 00 00       \tcallq  7d <pager_preexec+0x7d>\n  7d:\tba 00 00 00 00       \tmov    $0x0,%edx\n  82:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  87:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  8c:\te8 00 00 00 00       \tcallq  91 <pager_preexec+0x91>\n  91:\t90                   \tnop\n  92:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  96:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n  9d:\t00 00 \n  9f:\t74 05                \tje     a6 <pager_preexec+0xa6>\n  a1:\te8 00 00 00 00       \tcallq  a6 <pager_preexec+0xa6>\n  a6:\tc9                   \tleaveq \n  a7:\tc3                   \tretq   ", "code_s": "unsigned __int64 pager_preexec() {\n  fd_set readfds;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  memset(&readfds, Number, sizeof(readfds));\n  readfds.fds_bits[Number] |= Number;\n  select(Number, &readfds, Number L, &readfds, Number L);\n  setenv(String, String, Number);\n  return __readfsqword(Number) ^ v2;\n}", "code_t": "void __cdecl pager_preexec() {\n  fd_set <span class=\"supfact\">in</span>;\n  unsigned __int64 v1;\n  v1 = __readfsqword(Number);\n  memset(&<span class=\"supfact\">in</span>, Number, sizeof(<span class=\"supfact\">in</span>));\n  <span class=\"supfact\">in</span>.fds_bits[Number] |= Number;\n  select(Number, &<span class=\"supfact\">in</span>, Number L, &<span class=\"supfact\">in</span>, Number L);\n  setenv(String, String, Number);\n}", "var": [{"name": "readfds", "type": "struct fd_set { __fd_mask[16] fds_bits; }", "pred_name": "in", "ref_name": "in", "ref_type": "struct fd_set { __fd_mask[16] fds_bits; }"}], "body_in_train": true}, {"repo_owner": "kuwanger", "repo_name": "kobodl_gcw0", "path": "kuwanger/kobodl_gcw0/f7d24b31d46f139bb4d10072b65603ae4599f447cf126908097f6af1e98d91e4", "path_in_repo": "kuwanger/kobodl_gcw0//graphics/sofont.o", "objdump": "0000000000000c60 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb>:\n     c60:\t41 57                \tpush   %r15\n     c62:\t41 56                \tpush   %r14\n     c64:\t41 55                \tpush   %r13\n     c66:\t41 54                \tpush   %r12\n     c68:\t55                   \tpush   %rbp\n     c69:\t48 89 fd             \tmov    %rdi,%rbp\n     c6c:\t48 83 ec 20          \tsub    $0x20,%rsp\n     c70:\t48 8b 7f 08          \tmov    0x8(%rdi),%rdi\n     c74:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n     c78:\t48 85 ff             \ttest   %rdi,%rdi\n     c7b:\t74 37                \tje     cb4 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x54>\n     c7d:\t49 89 f4             \tmov    %rsi,%r12\n     c80:\t48 85 f6             \ttest   %rsi,%rsi\n     c83:\t74 2f                \tje     cb4 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x54>\n     c85:\t4d 85 c0             \ttest   %r8,%r8\n     c88:\t74 2a                \tje     cb4 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x54>\n     c8a:\t44 8b 55 2c          \tmov    0x2c(%rbp),%r10d\n     c8e:\t41 89 d6             \tmov    %edx,%r14d\n     c91:\t41 89 cd             \tmov    %ecx,%r13d\n     c94:\t41 83 fa 7b          \tcmp    $0x7b,%r10d\n     c98:\t7e 04                \tjle    c9e <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x3e>\n     c9a:\t84 c0                \ttest   %al,%al\n     c9c:\t75 2a                \tjne    cc8 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x68>\n     c9e:\t4c 8b 4c 24 50       \tmov    0x50(%rsp),%r9\n     ca3:\t44 89 e9             \tmov    %r13d,%ecx\n     ca6:\t44 89 f2             \tmov    %r14d,%edx\n     ca9:\t4c 89 e6             \tmov    %r12,%rsi\n     cac:\t48 89 ef             \tmov    %rbp,%rdi\n     caf:\te8 00 00 00 00       \tcallq  cb4 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x54>\n     cb4:\t48 83 c4 20          \tadd    $0x20,%rsp\n     cb8:\t5d                   \tpop    %rbp\n     cb9:\t41 5c                \tpop    %r12\n     cbb:\t41 5d                \tpop    %r13\n     cbd:\t41 5e                \tpop    %r14\n     cbf:\t41 5f                \tpop    %r15\n     cc1:\tc3                   \tretq   \n     cc2:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n     cc8:\t41 0f be 00          \tmovsbl (%r8),%eax\n     ccc:\t89 d6                \tmov    %edx,%esi\n     cce:\t84 c0                \ttest   %al,%al\n     cd0:\t74 4e                \tje     d20 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0xc0>\n     cd2:\t45 85 c9             \ttest   %r9d,%r9d\n     cd5:\t74 49                \tje     d20 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0xc0>\n     cd7:\tba 01 00 00 00       \tmov    $0x1,%edx\n     cdc:\teb 34                \tjmp    d12 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0xb2>\n     cde:\t66 90                \txchg   %ax,%ax\n     ce0:\t7e 16                \tjle    cf8 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x98>\n     ce2:\t41 39 c2             \tcmp    %eax,%r10d\n     ce5:\t7c 11                \tjl     cf8 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x98>\n     ce7:\t48 8b 4d 20          \tmov    0x20(%rbp),%rcx\n     ceb:\t83 e8 21             \tsub    $0x21,%eax\n     cee:\t48 98                \tcltq   \n     cf0:\t03 34 81             \tadd    (%rcx,%rax,4),%esi\n     cf3:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n     cf8:\t41 0f be 04 10       \tmovsbl (%r8,%rdx,1),%eax\n     cfd:\t41 39 d1             \tcmp    %edx,%r9d\n     d00:\t41 0f 94 c3          \tsete   %r11b\n     d04:\t84 c0                \ttest   %al,%al\n     d06:\t0f 94 c1             \tsete   %cl\n     d09:\t48 83 c2 01          \tadd    $0x1,%rdx\n     d0d:\t41 08 cb             \tor     %cl,%r11b\n     d10:\t75 0e                \tjne    d20 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0xc0>\n     d12:\t3c 20                \tcmp    $0x20,%al\n     d14:\t75 ca                \tjne    ce0 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x80>\n     d16:\t03 75 30             \tadd    0x30(%rbp),%esi\n     d19:\teb dd                \tjmp    cf8 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x98>\n     d1b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n     d20:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n     d24:\t66 2b 75 34          \tsub    0x34(%rbp),%si\n     d28:\t66 44 89 6c 24 1a    \tmov    %r13w,0x1a(%rsp)\n     d2e:\t66 89 74 24 18       \tmov    %si,0x18(%rsp)\n     d33:\t8b 90 6c 01 00 00    \tmov    0x16c(%rax),%edx\n     d39:\t8b 80 70 01 00 00    \tmov    0x170(%rax),%eax\n     d3f:\t29 d0                \tsub    %edx,%eax\n     d41:\t48 83 7c 24 50 00    \tcmpq   $0x0,0x50(%rsp)\n     d47:\t66 89 54 24 10       \tmov    %dx,0x10(%rsp)\n     d4c:\t66 89 44 24 1c       \tmov    %ax,0x1c(%rsp)\n     d51:\t66 89 44 24 14       \tmov    %ax,0x14(%rsp)\n     d56:\t8b 45 00             \tmov    0x0(%rbp),%eax\n     d59:\t66 89 44 24 1e       \tmov    %ax,0x1e(%rsp)\n     d5e:\t66 89 44 24 16       \tmov    %ax,0x16(%rsp)\n     d63:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     d68:\t66 89 44 24 12       \tmov    %ax,0x12(%rsp)\n     d6d:\t74 49                \tje     db8 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x158>\n     d6f:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n     d74:\t4c 8d 7c 24 10       \tlea    0x10(%rsp),%r15\n     d79:\t48 8d 74 24 18       \tlea    0x18(%rsp),%rsi\n     d7e:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n     d83:\t4c 89 ff             \tmov    %r15,%rdi\n     d86:\t48 8b 10             \tmov    (%rax),%rdx\n     d89:\te8 00 00 00 00       \tcallq  d8e <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x12e>\n     d8e:\t48 8b 7d 08          \tmov    0x8(%rbp),%rdi\n     d92:\t4c 8b 44 24 08       \tmov    0x8(%rsp),%r8\n     d97:\t48 89 f1             \tmov    %rsi,%rcx\n     d9a:\t4c 89 e2             \tmov    %r12,%rdx\n     d9d:\t4c 89 fe             \tmov    %r15,%rsi\n     da0:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n     da5:\te8 00 00 00 00       \tcallq  daa <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x14a>\n     daa:\t4c 8b 44 24 08       \tmov    0x8(%rsp),%r8\n     daf:\te9 ea fe ff ff       \tjmpq   c9e <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x3e>\n     db4:\t0f 1f 40 00          \tnopl   0x0(%rax)\n     db8:\t48 8d 74 24 18       \tlea    0x18(%rsp),%rsi\n     dbd:\t4c 8d 7c 24 10       \tlea    0x10(%rsp),%r15\n     dc2:\teb d3                \tjmp    d97 <_ZN6SoFont19PutStringWithCursorEP11SDL_SurfaceiiPKciP8SDL_Rectb+0x137>\n     dc4:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n     dcb:\t00 00 00 00 \n     dcf:\t90                   \tnop", "code_s": "void __fastcall SoFont PutStringWithCursor(__int64 a1, __int64 a2, int a3,\n                                           __int16 a4, char *a5, int a6,\n                                           unsigned __int64 *a7, char a8) {\n  __int64 v9;\n  int v11;\n  int v12;\n  int v14;\n  int v15;\n  __int64 v16;\n  bool v17;\n  bool v18;\n  __int64 v19;\n  __int16 v20;\n  int v21;\n  char *v22;\n  char *v23;\n  __int16 v24[Number];\n  __int16 v25[Number];\n  __int16 v26;\n  v9 = *(_QWORD *)(a1 + Number);\n  if (v9 && a2 && a5) {\n    v11 = *(_DWORD *)(a1 + Number);\n    v12 = a3;\n    if (v11 > Number && a8) {\n      v14 = *a5;\n      v15 = a3;\n      if (*a5 && a6) {\n        v16 = Number L;\n        do {\n          if ((_BYTE)v14 == Number) {\n            v15 += *(_DWORD *)(a1 + Number);\n          } else if ((char)v14 > Number && v11 >= v14) {\n            v15 += *(_DWORD *)(*(_QWORD *)(a1 + Number) +\n                               Number L * (v14 - Number));\n          }\n          v14 = a5[v16];\n          v17 = a6 == (_DWORD)v16;\n          v18 = a5[v16++] == Number;\n        } while (!v18 && !v17);\n      }\n      v19 = *(_QWORD *)(a1 + Number);\n      v20 = v15 - *(_WORD *)(a1 + Number);\n      v25[Number] = a4;\n      v25[Number] = v20;\n      v21 = *(_DWORD *)(v19 + Number);\n      LOWORD(v19) = *(_DWORD *)(v19 + Number) - v21;\n      v24[Number] = v21;\n      v25[Number] = v19;\n      v24[Number] = v19;\n      v26 = *(_DWORD *)a1;\n      v24[Number] = v26;\n      v24[Number] = Number;\n      if (a7) {\n        v22 = a5;\n        SoFontUtilities sdcRects(v24, v25, *a7);\n        v9 = *(_QWORD *)(a1 + Number);\n        a5 = v22;\n      }\n      v23 = a5;\n      glSDL_BlitSurface(v9, v24, a2, v25);\n      a5 = v23;\n    }\n    SoFont PutString(a1, a2, v12, a4, a5, (__int16 *)a7);\n  }\n}", "code_t": "void __fastcall SoFont PutStringWithCursor(SoFont *const this,\n                                           SDL_Surface_0 *Surface, int xs,\n                                           int y, const char *text, int cursPos,\n                                           SDL_Rect_0 *clip, bool showCurs) {\n  SDL_Surface_0 *v9;\n  int v11;\n  int v12;\n  int v14;\n  int v15;\n  __int64 v16;\n  bool v17;\n  bool v18;\n  int *v19;\n  Sint16 v20;\n  int v21;\n  const char *texta;\n  const char *textb;\n  SDL_Rect_0 <span class=\"supfact\">source</span>;\n  SDL_Rect_0 destination;\n  SDL_Rect_0 v26;\n  v9 = this->picture;\n  if (v9 && Surface && text) {\n    v11 = this->max_i;\n    v12 = xs;\n    if (v11 > Number && showCurs) {\n      v14 = *text;\n      v15 = xs;\n      if (*text && cursPos) {\n        v16 = Number L;\n        do {\n          if ((_BYTE)v14 == Number) {\n            v15 += this->spacew;\n          } else if ((char)v14 > Number && v11 >= v14) {\n            v15 += this->Spacing[v14 - Number];\n          }\n          v14 = text[v16];\n          v17 = cursPos == (_DWORD)v16;\n          v18 = text[v16++] == Number;\n        } while (!v18 && !v17);\n      }\n      v19 = this->CharPos;\n      v20 = v15 - LOWORD(this->cursShift);\n      destination.y = y;\n      destination.x = v20;\n      v21 = v19[Number];\n      LOWORD(v19) = v19[Number] - v21;\n      <span class=\"supfact\">source</span>.x = v21;\n      destination.w = (unsigned __int16)v19;\n      <span class=\"supfact\">source</span>.w = (unsigned __int16)v19;\n      destination.h = this->height;\n      <span class=\"supfact\">source</span>.h = destination.h;\n      <span class=\"supfact\">source</span>.y = Number;\n      if (clip) {\n        texta = text;\n        v26 = *clip;\n        SoFontUtilities sdcRects(&<span class=\"supfact\">source</span>, &destination, v26);\n        v9 = this->picture;\n        text = texta;\n      }\n      textb = text;\n      glSDL_BlitSurface(v9, &<span class=\"supfact\">source</span>, Surface, &destination);\n      text = textb;\n    }\n    SoFont PutString(this, Surface, v12, y, text, clip);\n  }\n}", "var": [{"name": "v24", "type": "__int16[4]", "pred_name": "v24", "ref_name": "source", "ref_type": "struct SDL_Rect_0 { Sint16 x; Sint16 y; Uint16 w; Uint16 h; }"}], "body_in_train": false}, {"repo_owner": "mr-sven", "repo_name": "ipc-25hdc", "path": "mr-sven/ipc-25hdc/a73029e954781c9a6b4e539fdb93f6a760c9834e23b3adbc223a9967c05a078c", "path_in_repo": "mr-sven/ipc-25hdc/source/user/bonnie++/bon_time.o", "objdump": "0000000000000080 <_ZN8BonTimer11get_cpu_useEv>:\n  80:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n  87:\t31 ff                \txor    %edi,%edi\n  89:\t48 89 e6             \tmov    %rsp,%rsi\n  8c:\te8 00 00 00 00       \tcallq  91 <_ZN8BonTimer11get_cpu_useEv+0x11>\n  91:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  95:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n  99:\tf2 0f 10 15 00 00 00 \tmovsd  0x0(%rip),%xmm2        # a1 <_ZN8BonTimer11get_cpu_useEv+0x21>\n  a0:\t00 \n  a1:\tf2 48 0f 2a 44 24 08 \tcvtsi2sdq 0x8(%rsp),%xmm0\n  a8:\tf2 48 0f 2a 0c 24    \tcvtsi2sdq (%rsp),%xmm1\n  ae:\tf2 0f 5e c2          \tdivsd  %xmm2,%xmm0\n  b2:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n  b6:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n  ba:\tf2 48 0f 2a 4c 24 18 \tcvtsi2sdq 0x18(%rsp),%xmm1\n  c1:\tf2 0f 5e ca          \tdivsd  %xmm2,%xmm1\n  c5:\t66 0f ef d2          \tpxor   %xmm2,%xmm2\n  c9:\tf2 48 0f 2a 54 24 10 \tcvtsi2sdq 0x10(%rsp),%xmm2\n  d0:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n  d7:\tf2 0f 58 ca          \taddsd  %xmm2,%xmm1\n  db:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n  df:\tc3                   \tretq   ", "code_s": "double __fastcall BonTimer get_cpu_use(BonTimer *this) {\n  struct rusage v2;\n  getrusage(RUSAGE_SELF, &v2);\n  return (double)SLODWORD(v2.ru_utime.tv_usec) / Number +\n         (double)SLODWORD(v2.ru_utime.tv_sec) +\n         (double)SLODWORD(v2.ru_stime.tv_usec) / Number +\n         (double)SLODWORD(v2.ru_stime.tv_sec);\n}", "code_t": "double __fastcall BonTimer get_cpu_use(BonTimer *this) {\n  struct rusage <span class=\"supfact\">v2</span>;\n  getrusage(RUSAGE_SELF, &<span class=\"supfact\">v2</span>);\n  return (double)SLODWORD(<span class=\"supfact\">v2</span>.ru_utime.tv_usec) / Number +\n         (double)SLODWORD(<span class=\"supfact\">v2</span>.ru_utime.tv_sec) +\n         (double)SLODWORD(<span class=\"supfact\">v2</span>.ru_stime.tv_usec) / Number +\n         (double)SLODWORD(<span class=\"supfact\">v2</span>.ru_stime.tv_sec);\n}", "var": [{"name": "v2", "type": "struct rusage { timeval ru_utime; timeval ru_stime; $AFD12F2780B43E6FE38B6B9706ACAC3D _anon_0; $532CEF825D94AC2AB94F49F6475E130E _anon_1; $66A2DE23866A271B95BDDB0CFC621200 _anon_2; $D7B0DA7033B4A064E9B9FDDBD7C23927 _anon_3; $0724066DBCB20967A007E1922F93DD8D _anon_4; $E3ED6156413D9EFF7392FCF5D4C88B92 _anon_5; $CD16977EFB50B4747411BF78CDAEB1F3 _anon_6; $929FFA9E3E540B14A77DC71BC7A41B8C _anon_7; $FE38B77A86D08DEC2C74D6373E0C6416 _anon_8; $8CFCFFE5543F8A2FB5604D0E42418403 _anon_9; $3B84F6F9EECC4FA8F586A2BAC354D043 _anon_10; $229726AEB3C3CA3CA87656F9B9828FB0 _anon_11; $BFE386E9477C7E9875A5D4C107075383 _anon_12; $FA0D2E48EE8615A3C4A68D7252C48DF0 _anon_13; }", "pred_name": "v2", "ref_name": "v2", "ref_type": "struct struct rusage { struct timeval ru_utime; struct timeval ru_stime; union rusage::$C8E0368DFE215138D5FE989391EDF66A ; union rusage::$432FF46A9027D949EED7182447443219 ; union rusage::$E7EE59A34ECBA4FFAE4E24E03E23B031 ; union rusage::$D61F8409E13EA6E11D92C6D9757A1531 ; union rusage::$1358501C97B7AC417CB67978351D7ED8 ; union rusage::$BE0BA0CA85EE8DDDB4C2D45E2D812E33 ; union rusage::$C0F0170E03C25EB818136FFBEB1A4400 ; union rusage::$053CCAE027B5BFCB43679F38B0BBAFFB ; union rusage::$9F5E3C17DD7C53B5A698FB11C246C70B ; union rusage::$5B25822D21B23C62AAC800B59197C0E9 ; union rusage::$C564AC21F6E5BE8C627FEDECB4652ACF ; union rusage::$C83E8E9C9ADD361154E0D8EBED847957 ; union rusage::$2C815BBF04E92D15CDB4A45E8AD3A3E5 ; union rusage::$3B4947AE73BD84433438D8F38CADF7D5 ; }"}], "body_in_train": true}, {"repo_owner": "irl", "repo_name": "direwolf", "path": "irl/direwolf/da69ed739db6f4577641a740c1f46041fa4bc6cf338af527129769e8d8443b12", "path_in_repo": "irl/direwolf//decode_aprs", "objdump": "", "code_s": "int cfsetispeed(struct termios *termios_p, speed_t speed) {\n  return cfsetispeed(termios_p, speed);\n}", "code_t": "int cfsetispeed(struct termios *<span class=\"supfact\">termios_p</span>, speed_t speed) {\n  return cfsetispeed(<span class=\"supfact\">termios_p</span>, speed);\n}", "var": [{"name": "termios_p", "type": "struct termios *", "pred_name": "termios_p", "ref_name": "termios_p", "ref_type": "struct termios *"}], "body_in_train": true}, {"repo_owner": "AndersTrier", "repo_name": "QEMU-bitflip", "path": "AndersTrier/QEMU-bitflip/c34f35a1106ddcaca4ca4f421478cc6ebdc6681fbc51ffefdfce2779c51c088f", "path_in_repo": "AndersTrier/QEMU-bitflip//block/io.o", "objdump": "0000000000002bcf <bdrv_co_preadv>:\n    2bcf:\t55                   \tpush   %rbp\n    2bd0:\t48 89 e5             \tmov    %rsp,%rbp\n    2bd3:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n    2bda:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n    2be1:\t48 89 b5 30 ff ff ff \tmov    %rsi,-0xd0(%rbp)\n    2be8:\t89 95 2c ff ff ff    \tmov    %edx,-0xd4(%rbp)\n    2bee:\t48 89 8d 20 ff ff ff \tmov    %rcx,-0xe0(%rbp)\n    2bf5:\t44 89 85 28 ff ff ff \tmov    %r8d,-0xd8(%rbp)\n    2bfc:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2c03:\t00 00 \n    2c05:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2c09:\t31 c0                \txor    %eax,%eax\n    2c0b:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    2c12:\t48 8b 00             \tmov    (%rax),%rax\n    2c15:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n    2c1c:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    2c23:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    2c27:\t48 89 85 60 ff ff ff \tmov    %rax,-0xa0(%rbp)\n    2c2e:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    2c35:\t8b 80 a8 30 00 00    \tmov    0x30a8(%rax),%eax\n    2c3b:\t89 c0                \tmov    %eax,%eax\n    2c3d:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n    2c44:\t48 c7 85 48 ff ff ff \tmovq   $0x0,-0xb8(%rbp)\n    2c4b:\t00 00 00 00 \n    2c4f:\t48 c7 85 50 ff ff ff \tmovq   $0x0,-0xb0(%rbp)\n    2c56:\t00 00 00 00 \n    2c5a:\tc6 85 43 ff ff ff 00 \tmovb   $0x0,-0xbd(%rbp)\n    2c61:\t48 83 bd 60 ff ff ff \tcmpq   $0x0,-0xa0(%rbp)\n    2c68:\t00 \n    2c69:\t75 0a                \tjne    2c75 <bdrv_co_preadv+0xa6>\n    2c6b:\tb8 85 ff ff ff       \tmov    $0xffffff85,%eax\n    2c70:\te9 44 03 00 00       \tjmpq   2fb9 <bdrv_co_preadv+0x3ea>\n    2c75:\t8b 95 2c ff ff ff    \tmov    -0xd4(%rbp),%edx\n    2c7b:\t48 8b 8d 30 ff ff ff \tmov    -0xd0(%rbp),%rcx\n    2c82:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    2c89:\t48 89 ce             \tmov    %rcx,%rsi\n    2c8c:\t48 89 c7             \tmov    %rax,%rdi\n    2c8f:\te8 be eb ff ff       \tcallq  1852 <bdrv_check_byte_request>\n    2c94:\t89 85 44 ff ff ff    \tmov    %eax,-0xbc(%rbp)\n    2c9a:\t83 bd 44 ff ff ff 00 \tcmpl   $0x0,-0xbc(%rbp)\n    2ca1:\t79 0b                \tjns    2cae <bdrv_co_preadv+0xdf>\n    2ca3:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n    2ca9:\te9 0b 03 00 00       \tjmpq   2fb9 <bdrv_co_preadv+0x3ea>\n    2cae:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    2cb5:\t48 89 c7             \tmov    %rax,%rdi\n    2cb8:\te8 00 00 00 00       \tcallq  2cbd <bdrv_co_preadv+0xee>\n    2cbd:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    2cc4:\t8b 40 14             \tmov    0x14(%rax),%eax\n    2cc7:\t85 c0                \ttest   %eax,%eax\n    2cc9:\t74 14                \tje     2cdf <bdrv_co_preadv+0x110>\n    2ccb:\t8b 85 28 ff ff ff    \tmov    -0xd8(%rbp),%eax\n    2cd1:\t83 e0 08             \tand    $0x8,%eax\n    2cd4:\t85 c0                \ttest   %eax,%eax\n    2cd6:\t75 07                \tjne    2cdf <bdrv_co_preadv+0x110>\n    2cd8:\t83 8d 28 ff ff ff 01 \torl    $0x1,-0xd8(%rbp)\n    2cdf:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    2ce6:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n    2cea:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n    2cf1:\t48 21 d0             \tand    %rdx,%rax\n    2cf4:\t48 85 c0             \ttest   %rax,%rax\n    2cf7:\t0f 84 d3 00 00 00    \tje     2dd0 <bdrv_co_preadv+0x201>\n    2cfd:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n    2d04:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    2d0b:\t48 89 d6             \tmov    %rdx,%rsi\n    2d0e:\t48 89 c7             \tmov    %rax,%rdi\n    2d11:\te8 00 00 00 00       \tcallq  2d16 <bdrv_co_preadv+0x147>\n    2d16:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n    2d1d:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    2d24:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2d27:\t8d 50 02             \tlea    0x2(%rax),%edx\n    2d2a:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    2d31:\t89 d6                \tmov    %edx,%esi\n    2d33:\t48 89 c7             \tmov    %rax,%rdi\n    2d36:\te8 00 00 00 00       \tcallq  2d3b <bdrv_co_preadv+0x16c>\n    2d3b:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    2d42:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n    2d46:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n    2d4d:\t48 21 c2             \tand    %rax,%rdx\n    2d50:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n    2d57:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    2d5e:\t48 89 ce             \tmov    %rcx,%rsi\n    2d61:\t48 89 c7             \tmov    %rax,%rdi\n    2d64:\te8 00 00 00 00       \tcallq  2d69 <bdrv_co_preadv+0x19a>\n    2d69:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    2d70:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    2d74:\t48 8b b5 20 ff ff ff \tmov    -0xe0(%rbp),%rsi\n    2d7b:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    2d82:\t48 89 d1             \tmov    %rdx,%rcx\n    2d85:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2d8a:\t48 89 c7             \tmov    %rax,%rdi\n    2d8d:\te8 00 00 00 00       \tcallq  2d92 <bdrv_co_preadv+0x1c3>\n    2d92:\tc6 85 43 ff ff ff 01 \tmovb   $0x1,-0xbd(%rbp)\n    2d99:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    2da0:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    2da3:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n    2daa:\t21 d0                \tand    %edx,%eax\n    2dac:\t01 85 2c ff ff ff    \tadd    %eax,-0xd4(%rbp)\n    2db2:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    2db9:\t48 f7 d8             \tneg    %rax\n    2dbc:\t48 89 c2             \tmov    %rax,%rdx\n    2dbf:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n    2dc6:\t48 21 d0             \tand    %rdx,%rax\n    2dc9:\t48 89 85 30 ff ff ff \tmov    %rax,-0xd0(%rbp)\n    2dd0:\t8b 95 2c ff ff ff    \tmov    -0xd4(%rbp),%edx\n    2dd6:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n    2ddd:\t48 01 d0             \tadd    %rdx,%rax\n    2de0:\t48 89 c2             \tmov    %rax,%rdx\n    2de3:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    2dea:\t48 83 e8 01          \tsub    $0x1,%rax\n    2dee:\t48 21 d0             \tand    %rdx,%rax\n    2df1:\t48 85 c0             \ttest   %rax,%rax\n    2df4:\t0f 84 e8 00 00 00    \tje     2ee2 <bdrv_co_preadv+0x313>\n    2dfa:\t0f b6 85 43 ff ff ff \tmovzbl -0xbd(%rbp),%eax\n    2e01:\t83 f0 01             \txor    $0x1,%eax\n    2e04:\t84 c0                \ttest   %al,%al\n    2e06:\t74 4e                \tje     2e56 <bdrv_co_preadv+0x287>\n    2e08:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    2e0f:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2e12:\t8d 50 01             \tlea    0x1(%rax),%edx\n    2e15:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    2e1c:\t89 d6                \tmov    %edx,%esi\n    2e1e:\t48 89 c7             \tmov    %rax,%rdi\n    2e21:\te8 00 00 00 00       \tcallq  2e26 <bdrv_co_preadv+0x257>\n    2e26:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    2e2d:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    2e31:\t48 8b b5 20 ff ff ff \tmov    -0xe0(%rbp),%rsi\n    2e38:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    2e3f:\t48 89 d1             \tmov    %rdx,%rcx\n    2e42:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2e47:\t48 89 c7             \tmov    %rax,%rdi\n    2e4a:\te8 00 00 00 00       \tcallq  2e4f <bdrv_co_preadv+0x280>\n    2e4f:\tc6 85 43 ff ff ff 01 \tmovb   $0x1,-0xbd(%rbp)\n    2e56:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n    2e5d:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    2e64:\t48 89 d6             \tmov    %rdx,%rsi\n    2e67:\t48 89 c7             \tmov    %rax,%rdi\n    2e6a:\te8 00 00 00 00       \tcallq  2e6f <bdrv_co_preadv+0x2a0>\n    2e6f:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n    2e76:\t8b 95 2c ff ff ff    \tmov    -0xd4(%rbp),%edx\n    2e7c:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n    2e83:\t48 01 d0             \tadd    %rdx,%rax\n    2e86:\t48 89 c2             \tmov    %rax,%rdx\n    2e89:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    2e90:\t48 83 e8 01          \tsub    $0x1,%rax\n    2e94:\t48 21 c2             \tand    %rax,%rdx\n    2e97:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    2e9e:\t48 29 d0             \tsub    %rdx,%rax\n    2ea1:\t48 89 c2             \tmov    %rax,%rdx\n    2ea4:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n    2eab:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    2eb2:\t48 89 ce             \tmov    %rcx,%rsi\n    2eb5:\t48 89 c7             \tmov    %rax,%rdi\n    2eb8:\te8 00 00 00 00       \tcallq  2ebd <bdrv_co_preadv+0x2ee>\n    2ebd:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    2ec4:\t89 c2                \tmov    %eax,%edx\n    2ec6:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n    2ecc:\t01 d0                \tadd    %edx,%eax\n    2ece:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    2ed1:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    2ed8:\tf7 d8                \tneg    %eax\n    2eda:\t21 d0                \tand    %edx,%eax\n    2edc:\t89 85 2c ff ff ff    \tmov    %eax,-0xd4(%rbp)\n    2ee2:\t8b 8d 2c ff ff ff    \tmov    -0xd4(%rbp),%ecx\n    2ee8:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n    2eef:\t48 8b b5 58 ff ff ff \tmov    -0xa8(%rbp),%rsi\n    2ef6:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    2efa:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    2f00:\t48 89 c7             \tmov    %rax,%rdi\n    2f03:\te8 92 e3 ff ff       \tcallq  129a <tracked_request_begin>\n    2f08:\t44 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%r8d\n    2f0f:\t80 bd 43 ff ff ff 00 \tcmpb   $0x0,-0xbd(%rbp)\n    2f16:\t74 09                \tje     2f21 <bdrv_co_preadv+0x352>\n    2f18:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    2f1f:\teb 07                \tjmp    2f28 <bdrv_co_preadv+0x359>\n    2f21:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    2f28:\t4c 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%r10\n    2f2f:\t8b 8d 2c ff ff ff    \tmov    -0xd4(%rbp),%ecx\n    2f35:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n    2f3c:\t48 8d 75 90          \tlea    -0x70(%rbp),%rsi\n    2f40:\t48 8b bd 58 ff ff ff \tmov    -0xa8(%rbp),%rdi\n    2f47:\t48 83 ec 08          \tsub    $0x8,%rsp\n    2f4b:\t41 50                \tpush   %r8\n    2f4d:\t49 89 c1             \tmov    %rax,%r9\n    2f50:\t4d 89 d0             \tmov    %r10,%r8\n    2f53:\te8 fb f7 ff ff       \tcallq  2753 <bdrv_aligned_preadv>\n    2f58:\t48 83 c4 10          \tadd    $0x10,%rsp\n    2f5c:\t89 85 44 ff ff ff    \tmov    %eax,-0xbc(%rbp)\n    2f62:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    2f66:\t48 89 c7             \tmov    %rax,%rdi\n    2f69:\te8 b7 e2 ff ff       \tcallq  1225 <tracked_request_end>\n    2f6e:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    2f75:\t48 89 c7             \tmov    %rax,%rdi\n    2f78:\te8 00 00 00 00       \tcallq  2f7d <bdrv_co_preadv+0x3ae>\n    2f7d:\t80 bd 43 ff ff ff 00 \tcmpb   $0x0,-0xbd(%rbp)\n    2f84:\t74 2d                \tje     2fb3 <bdrv_co_preadv+0x3e4>\n    2f86:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    2f8d:\t48 89 c7             \tmov    %rax,%rdi\n    2f90:\te8 00 00 00 00       \tcallq  2f95 <bdrv_co_preadv+0x3c6>\n    2f95:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    2f9c:\t48 89 c7             \tmov    %rax,%rdi\n    2f9f:\te8 00 00 00 00       \tcallq  2fa4 <bdrv_co_preadv+0x3d5>\n    2fa4:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    2fab:\t48 89 c7             \tmov    %rax,%rdi\n    2fae:\te8 00 00 00 00       \tcallq  2fb3 <bdrv_co_preadv+0x3e4>\n    2fb3:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n    2fb9:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    2fbd:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    2fc4:\t00 00 \n    2fc6:\t74 05                \tje     2fcd <bdrv_co_preadv+0x3fe>\n    2fc8:\te8 00 00 00 00       \tcallq  2fcd <bdrv_co_preadv+0x3fe>\n    2fcd:\tc9                   \tleaveq \n    2fce:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bdrv_co_preadv(__int64 *a1, __int64 a2, unsigned int a3,\n                                  __int64 a4, int a5) {\n  char *v6;\n  unsigned int v9;\n  __int64 v10;\n  char v11;\n  int v12;\n  unsigned int v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  char v18[Number];\n  __int64 v19[Number];\n  v10 = a2;\n  v9 = a3;\n  v19[Number] = __readfsqword(Number);\n  v16 = *a1;\n  v17 = *(unsigned int *)(*a1 + Number);\n  v14 = Number L;\n  v15 = Number L;\n  v11 = Number;\n  if (!*(_QWORD *)(*a1 + Number))\n    return Number L;\n  v12 = bdrv_check_byte_request(v16, a2, a3);\n  if (v12 < Number)\n    return (unsigned int)v12;\n  bdrv_inc_in_flight(v16);\n  if (*(_DWORD *)(v16 + Number) && (a5 & Number) == Number)\n    a5 |= Number;\n  if (((v17 - Number) & a2) != Number) {\n    v14 = qemu_blockalign(v16, v17);\n    qemu_iovec_init(v18, (unsigned int)(*(_DWORD *)(a4 + Number) + Number));\n    qemu_iovec_add(v18, v14, a2 & (v17 - Number));\n    qemu_iovec_concat(v18, a4, Number L, *(_QWORD *)(a4 + Number));\n    v11 = Number;\n    v9 += (v17 - Number) & a2;\n    v10 = -v17 & a2;\n  }\n  if (((v9 + v10) & (v17 - Number)) != Number) {\n    if (v11 != Number) {\n      qemu_iovec_init(v18, (unsigned int)(*(_DWORD *)(a4 + Number) + Number));\n      qemu_iovec_concat(v18, a4, Number L, *(_QWORD *)(a4 + Number));\n      v11 = Number;\n    }\n    v15 = qemu_blockalign(v16, v17);\n    qemu_iovec_add(v18, v15, v17 - ((v17 - Number) & (v9 + v10)));\n    v9 = (v17 + v9 - Number) & -(int)v17;\n  }\n  tracked_request_begin(v19, v16, v10, v9, Number);\n  if (v11)\n    v6 = v18;\n  else\n    v6 = (char *)a4;\n  v13 = bdrv_aligned_preadv(v16, v19, v10, v9, v17, (__int64)v6, a5);\n  tracked_request_end((__int64)v19);\n  bdrv_dec_in_flight(v16);\n  if (v11) {\n    qemu_iovec_destroy(v18);\n    qemu_vfree(v14);\n    qemu_vfree(v15);\n  }\n  return v13;\n}", "code_t": "int __cdecl bdrv_co_preadv(BdrvChild_0 *child, int64_t offset,\n                           unsigned int bytes, QEMUIOVector_0 *qiov,\n                           BdrvRequestFlags flags) {\n  QEMUIOVector_0 *v6;\n  unsigned int bytesa;\n  int64_t offseta;\n  bool use_local_qiov;\n  int ret;\n  int reta;\n  uint8_t *head_buf;\n  uint8_t *tail_buf;\n  BlockDriverState_0 *bs;\n  uint64_t align;\n  QEMUIOVector_0 <span class=\"supfact\">local_qiov</span>;\n  BdrvTrackedRequest_0 <span class=\"supfact\">req</span>;\n  unsigned __int64 v20;\n  offseta = offset;\n  bytesa = bytes;\n  v20 = __readfsqword(Number);\n  bs = child->bs;\n  align = child->bs->bl.request_alignment;\n  head_buf = Number L;\n  tail_buf = Number L;\n  use_local_qiov = Number;\n  if (!child->bs->drv)\n    return Number;\n  ret = bdrv_check_byte_request(bs, offset, bytes);\n  if (ret < Number)\n    return ret;\n  bdrv_inc_in_flight(bs);\n  if (bs->copy_on_read && (flags & Number) == Number)\n    flags |= Number;\n  if (((align - Number) & offset) != Number) {\n    head_buf = (uint8_t *)qemu_blockalign(bs, align);\n    qemu_iovec_init(&<span class=\"supfact\">local_qiov</span>,\n                    (unsigned int)(qiov->niov + Number));\n    qemu_iovec_add(&<span class=\"supfact\">local_qiov</span>, head_buf,\n                   offset & (align - Number));\n    qemu_iovec_concat(&<span class=\"supfact\">local_qiov</span>, qiov, Number L, qiov->size);\n    use_local_qiov = Number;\n    bytesa += (align - Number) & offset;\n    offseta = -(__int64)align & offset;\n  }\n  if (((bytesa + offseta) & (align - Number)) != Number) {\n    if (!use_local_qiov) {\n      qemu_iovec_init(&<span class=\"supfact\">local_qiov</span>,\n                      (unsigned int)(qiov->niov + Number));\n      qemu_iovec_concat(&<span class=\"supfact\">local_qiov</span>, qiov, Number L,\n                        qiov->size);\n      use_local_qiov = Number;\n    }\n    tail_buf = (uint8_t *)qemu_blockalign(bs, align);\n    qemu_iovec_add(&<span class=\"supfact\">local_qiov</span>, tail_buf,\n                   align - ((align - Number) & (bytesa + offseta)));\n    bytesa = (align + bytesa - Number) & -(int)align;\n  }\n  tracked_request_begin(&<span class=\"supfact\">req</span>, bs, offseta, bytesa,\n                        BDRV_TRACKED_READ);\n  if (use_local_qiov)\n    v6 = &<span class=\"supfact\">local_qiov</span>;\n  else\n    v6 = qiov;\n  reta = bdrv_aligned_preadv(bs, &<span class=\"supfact\">req</span>, offseta, bytesa, align,\n                             v6, flags);\n  tracked_request_end(&<span class=\"supfact\">req</span>);\n  bdrv_dec_in_flight(bs);\n  if (use_local_qiov) {\n    qemu_iovec_destroy(&<span class=\"supfact\">local_qiov</span>);\n    qemu_vfree(head_buf);\n    qemu_vfree(tail_buf);\n  }\n  return reta;\n}", "var": [{"name": "v18", "type": "struct QEMUIOVector_0 { iovec * iov; int niov; int nalloc; size_t size; }", "pred_name": "local_qiov", "ref_name": "local_qiov", "ref_type": "struct QEMUIOVector_0 { iovec * iov; int niov; int nalloc; size_t size; }"}, {"name": "v19", "type": "__unk__", "pred_name": "__unk__", "ref_name": "req", "ref_type": "struct BdrvTrackedRequest_0 { BlockDriverState_0 * bs; int64_t offset; unsigned int bytes; BdrvTrackedRequestType type; bool serialising; PADDING (7); int64_t overlap_offset; unsigned int overlap_bytes; PADDING (4); $A1DD046473B87550DE2FE81AA3A9AE68 list; Coroutine_0 * co; CoQueue_0 wait_queue; BdrvTrackedRequest * waiting_for; }"}], "body_in_train": false}, {"repo_owner": "kylothow", "repo_name": "android_kernel_oneplus_msm8998-1", "path": "kylothow/android_kernel_oneplus_msm8998-1/5cd1cc484bcebf1e838196709c1675cb8eb928dd1b238b91667e98b22724f549", "path_in_repo": "kylothow/android_kernel_oneplus_msm8998-1/tools/perf/ui/browsers/hists.o", "objdump": "000000000000305a <hists_browser__scnprintf_headers>:\n    305a:\t55                   \tpush   %rbp\n    305b:\t48 89 e5             \tmov    %rsp,%rbp\n    305e:\t53                   \tpush   %rbx\n    305f:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    3066:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    306a:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n    306e:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    3075:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    307c:\t00 00 \n    307e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    3082:\t31 c0                \txor    %eax,%eax\n    3084:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    3088:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    308f:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    3093:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n    309a:\t00 \n    309b:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n    30a2:\t00 \n    30a3:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n    30aa:\t00 \n    30ab:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    30b2:\t00 \n    30b3:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    30b7:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    30bb:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    30c2:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    30c6:\t48 c7 45 a0 00 00 00 \tmovq   $0x0,-0x60(%rbp)\n    30cd:\t00 \n    30ce:\tc7 45 94 00 00 00 00 \tmovl   $0x0,-0x6c(%rbp)\n    30d5:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 30dc <hists_browser__scnprintf_headers+0x82>\n    30dc:\t84 c0                \ttest   %al,%al\n    30de:\t74 47                \tje     3127 <hists_browser__scnprintf_headers+0xcd>\n    30e0:\t48 8b 8d 78 ff ff ff \tmov    -0x88(%rbp),%rcx\n    30e7:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    30eb:\tba 00 00 00 00       \tmov    $0x0,%edx\n    30f0:\t48 89 ce             \tmov    %rcx,%rsi\n    30f3:\t48 89 c7             \tmov    %rax,%rdi\n    30f6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    30fb:\te8 00 cf ff ff       \tcallq  0 <scnprintf>\n    3100:\t48 98                \tcltq   \n    3102:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n    3106:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    310a:\t89 c2                \tmov    %eax,%edx\n    310c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    3110:\t89 d6                \tmov    %edx,%esi\n    3112:\t48 89 c7             \tmov    %rax,%rdi\n    3115:\te8 ea fe ff ff       \tcallq  3004 <advance_hpp_check>\n    311a:\t85 c0                \ttest   %eax,%eax\n    311c:\t74 09                \tje     3127 <hists_browser__scnprintf_headers+0xcd>\n    311e:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    3122:\te9 05 01 00 00       \tjmpq   322c <hists_browser__scnprintf_headers+0x1d2>\n    3127:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 312e <hists_browser__scnprintf_headers+0xd4>\n    312e:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    3132:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    3136:\t48 83 e8 40          \tsub    $0x40,%rax\n    313a:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n    313e:\te9 cb 00 00 00       \tjmpq   320e <hists_browser__scnprintf_headers+0x1b4>\n    3143:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    3147:\t48 89 c7             \tmov    %rax,%rdi\n    314a:\te8 8d d3 ff ff       \tcallq  4dc <perf_hpp__should_skip>\n    314f:\t84 c0                \ttest   %al,%al\n    3151:\t0f 85 9e 00 00 00    \tjne    31f5 <hists_browser__scnprintf_headers+0x19b>\n    3157:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n    315a:\t8d 50 01             \tlea    0x1(%rax),%edx\n    315d:\t89 55 94             \tmov    %edx,-0x6c(%rbp)\n    3160:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    3164:\t0f b7 52 2c          \tmovzwl 0x2c(%rdx),%edx\n    3168:\t0f b7 d2             \tmovzwl %dx,%edx\n    316b:\t39 d0                \tcmp    %edx,%eax\n    316d:\t0f 8c 82 00 00 00    \tjl     31f5 <hists_browser__scnprintf_headers+0x19b>\n    3173:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    3177:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n    317b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    317f:\t48 89 c7             \tmov    %rax,%rdi\n    3182:\te8 c7 d2 ff ff       \tcallq  44e <hists_to_evsel>\n    3187:\t48 89 c2             \tmov    %rax,%rdx\n    318a:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n    318e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    3192:\t48 89 ce             \tmov    %rcx,%rsi\n    3195:\t48 89 c7             \tmov    %rax,%rdi\n    3198:\tff d3                \tcallq  *%rbx\n    319a:\t48 98                \tcltq   \n    319c:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n    31a0:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    31a4:\t89 c2                \tmov    %eax,%edx\n    31a6:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    31aa:\t89 d6                \tmov    %edx,%esi\n    31ac:\t48 89 c7             \tmov    %rax,%rdi\n    31af:\te8 50 fe ff ff       \tcallq  3004 <advance_hpp_check>\n    31b4:\t85 c0                \ttest   %eax,%eax\n    31b6:\t75 6c                \tjne    3224 <hists_browser__scnprintf_headers+0x1ca>\n    31b8:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n    31bc:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    31c0:\tba 00 00 00 00       \tmov    $0x0,%edx\n    31c5:\t48 89 ce             \tmov    %rcx,%rsi\n    31c8:\t48 89 c7             \tmov    %rax,%rdi\n    31cb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    31d0:\te8 2b ce ff ff       \tcallq  0 <scnprintf>\n    31d5:\t48 98                \tcltq   \n    31d7:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n    31db:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    31df:\t89 c2                \tmov    %eax,%edx\n    31e1:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    31e5:\t89 d6                \tmov    %edx,%esi\n    31e7:\t48 89 c7             \tmov    %rax,%rdi\n    31ea:\te8 15 fe ff ff       \tcallq  3004 <advance_hpp_check>\n    31ef:\t85 c0                \ttest   %eax,%eax\n    31f1:\t75 34                \tjne    3227 <hists_browser__scnprintf_headers+0x1cd>\n    31f3:\teb 01                \tjmp    31f6 <hists_browser__scnprintf_headers+0x19c>\n    31f5:\t90                   \tnop\n    31f6:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    31fa:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    31fe:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    3202:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    3206:\t48 83 e8 40          \tsub    $0x40,%rax\n    320a:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n    320e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    3212:\t48 83 c0 40          \tadd    $0x40,%rax\n    3216:\t48 3d 00 00 00 00    \tcmp    $0x0,%rax\n    321c:\t0f 85 21 ff ff ff    \tjne    3143 <hists_browser__scnprintf_headers+0xe9>\n    3222:\teb 04                \tjmp    3228 <hists_browser__scnprintf_headers+0x1ce>\n    3224:\t90                   \tnop\n    3225:\teb 01                \tjmp    3228 <hists_browser__scnprintf_headers+0x1ce>\n    3227:\t90                   \tnop\n    3228:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    322c:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    3230:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n    3237:\t00 00 \n    3239:\t74 05                \tje     3240 <hists_browser__scnprintf_headers+0x1e6>\n    323b:\te8 00 00 00 00       \tcallq  3240 <hists_browser__scnprintf_headers+0x1e6>\n    3240:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    3247:\t5b                   \tpop    %rbx\n    3248:\t5d                   \tpop    %rbp\n    3249:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hists_browser__scnprintf_headers(__int64 a1, char *a2,\n                                                    signed __int64 a3,\n                                                    __int64 a4, __int64 a5,\n                                                    __int64 a6) {\n  int v6;\n  int v8;\n  __int64(__fastcall * v9)(__int64, char **, __int64);\n  __int64 v10;\n  int v11;\n  __int64 v12;\n  __int64 v13;\n  int v14;\n  int v15;\n  __int64 i;\n  __int64 v17;\n  __int64 v18;\n  char *v19;\n  __int64 v20;\n  __int64 v21;\n  __int64 v22;\n  unsigned __int64 v23;\n  v23 = __readfsqword(Number);\n  v18 = *(_QWORD *)(a1 + Number);\n  v21 = Number L;\n  v22 = Number L;\n  v19 = a2;\n  v20 = a3;\n  v17 = Number L;\n  v15 = Number;\n  if (symbol_conf[Number]) {\n    v6 = scnprintf(a2, a3, String, a3, a5, a6);\n    v17 = v6;\n    if (advance_hpp_check(&v19, v6))\n      return v17;\n  }\n  for (i = perf_hpp__list - Number L;\n       (_UNKNOWN *)(i + Number) != &perf_hpp__list;\n       i = *(_QWORD *)(i + Number) - Number L) {\n    if (!(unsigned __int8)perf_hpp__should_skip(i)) {\n      v8 = v15++;\n      if (v8 >= *(unsigned __int16 *)(a1 + Number)) {\n        v9 = *(__int64(__fastcall **)(__int64, char **, __int64))(i + Number);\n        v10 = hists_to_evsel(v18);\n        v11 = v9(i, &v19, v10);\n        v17 = v11;\n        if (advance_hpp_check(&v19, v11))\n          break;\n        v14 = scnprintf(v19, v20, String, v20, v12, v13);\n        v17 = v14;\n        if (advance_hpp_check(&v19, v14))\n          break;\n      }\n    }\n  }\n  return v17;\n}", "code_t": "int __cdecl hists_browser__scnprintf_headers(hist_browser *browser, char *buf,\n                                             size_t size) {\n  int v4;\n  int (*v5)(perf_hpp_fmt *, perf_hpp *, perf_evsel *);\n  perf_evsel *v6;\n  int column;\n  perf_hpp_fmt *fmt;\n  int ret;\n  hists *hists;\n  perf_hpp <span class=\"supfact\">dummy_hpp</span>;\n  unsigned __int64 v12;\n  v12 = __readfsqword(Number);\n  hists = browser->hists;\n  <span class=\"supfact\">dummy_hpp</span>.sep = Number L;\n  <span class=\"supfact\">dummy_hpp</span>.ptr = Number L;\n  <span class=\"supfact\">dummy_hpp</span>.buf = buf;\n  <span class=\"supfact\">dummy_hpp</span>.size = size;\n  ret = Number;\n  column = Number;\n  if (symbol_conf_0[Number]) {\n    ret = scnprintf(buf, size, String);\n    if (advance_hpp_check(&<span class=\"supfact\">dummy_hpp</span>, ret))\n      return ret;\n  }\n  for (fmt = (perf_hpp_fmt *)(perf_hpp__list - Number L);\n       &fmt->list != (list_head *)&perf_hpp__list;\n       fmt = (perf_hpp_fmt *)&fmt->list.next[Number]) {\n    if (!perf_hpp__should_skip(fmt)) {\n      v4 = column++;\n      if (v4 >= browser->b.horiz_scroll) {\n        v5 = fmt->header;\n        v6 = hists_to_evsel(hists);\n        ret = v5(fmt, &<span class=\"supfact\">dummy_hpp</span>, v6);\n        if (advance_hpp_check(&<span class=\"supfact\">dummy_hpp</span>, ret))\n          break;\n        ret = scnprintf(<span class=\"supfact\">dummy_hpp</span>.buf,\n                        <span class=\"supfact\">dummy_hpp</span>.size, String);\n        if (advance_hpp_check(&<span class=\"supfact\">dummy_hpp</span>, ret))\n          break;\n      }\n    }\n  }\n  return ret;\n}", "var": [{"name": "v19", "type": "disappear", "pred_name": "", "ref_name": "dummy_hpp", "ref_type": "struct perf_hpp { char * buf; size_t size; const char * sep; void * ptr; }"}], "body_in_train": true}, {"repo_owner": "michg", "repo_name": "riscv32_lcc", "path": "michg/riscv32_lcc/646b13186c8300e709b4f565d1dba665681fff4e86c21776a92d87e85bd0e1f9", "path_in_repo": "michg/riscv32_lcc/binutils/as/as.o", "objdump": "0000000000003fce <formatIm>:\n    3fce:\t55                   \tpush   %rbp\n    3fcf:\t48 89 e5             \tmov    %rsp,%rbp\n    3fd2:\t48 83 ec 40          \tsub    $0x40,%rsp\n    3fd6:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    3fd9:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    3fdc:\t83 e0 08             \tand    $0x8,%eax\n    3fdf:\t85 c0                \ttest   %eax,%eax\n    3fe1:\t75 69                \tjne    404c <formatIm+0x7e>\n    3fe3:\tbf 05 00 00 00       \tmov    $0x5,%edi\n    3fe8:\te8 00 00 00 00       \tcallq  3fed <formatIm+0x1f>\n    3fed:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3ff3 <formatIm+0x25>\n    3ff3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    3ff6:\te8 00 00 00 00       \tcallq  3ffb <formatIm+0x2d>\n    3ffb:\tbf 0f 00 00 00       \tmov    $0xf,%edi\n    4000:\te8 00 00 00 00       \tcallq  4005 <formatIm+0x37>\n    4005:\te8 00 00 00 00       \tcallq  400a <formatIm+0x3c>\n    400a:\tbf 05 00 00 00       \tmov    $0x5,%edi\n    400f:\te8 00 00 00 00       \tcallq  4014 <formatIm+0x46>\n    4014:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 401a <formatIm+0x4c>\n    401a:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    401d:\te8 00 00 00 00       \tcallq  4022 <formatIm+0x54>\n    4022:\tbf 0f 00 00 00       \tmov    $0xf,%edi\n    4027:\te8 00 00 00 00       \tcallq  402c <formatIm+0x5e>\n    402c:\te8 00 00 00 00       \tcallq  4031 <formatIm+0x63>\n    4031:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    4035:\t48 89 c7             \tmov    %rax,%rdi\n    4038:\te8 00 00 00 00       \tcallq  403d <formatIm+0x6f>\n    403d:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    4040:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    4043:\t81 65 f4 ff 0f 00 00 \tandl   $0xfff,-0xc(%rbp)\n    404a:\teb 1c                \tjmp    4068 <formatIm+0x9a>\n    404c:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n    4053:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    405a:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    4061:\tc7 45 d0 00 00 00 00 \tmovl   $0x0,-0x30(%rbp)\n    4068:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 406e <formatIm+0xa0>\n    406e:\t83 f8 01             \tcmp    $0x1,%eax\n    4071:\t75 55                \tjne    40c8 <formatIm+0xfa>\n    4073:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    4076:\t89 c6                \tmov    %eax,%esi\n    4078:\tbf 06 00 00 00       \tmov    $0x6,%edi\n    407d:\te8 00 00 00 00       \tcallq  4082 <formatIm+0xb4>\n    4082:\t85 c0                \ttest   %eax,%eax\n    4084:\t74 42                \tje     40c8 <formatIm+0xfa>\n    4086:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    4089:\t3b 45 fc             \tcmp    -0x4(%rbp),%eax\n    408c:\t75 3a                \tjne    40c8 <formatIm+0xfa>\n    408e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4091:\tc1 e8 05             \tshr    $0x5,%eax\n    4094:\tc1 e0 0c             \tshl    $0xc,%eax\n    4097:\t25 00 10 00 00       \tand    $0x1000,%eax\n    409c:\t89 c2                \tmov    %eax,%edx\n    409e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    40a1:\tc1 e0 07             \tshl    $0x7,%eax\n    40a4:\t09 c2                \tor     %eax,%edx\n    40a6:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    40a9:\tc1 e0 02             \tshl    $0x2,%eax\n    40ac:\t83 e0 7c             \tand    $0x7c,%eax\n    40af:\t09 c2                \tor     %eax,%edx\n    40b1:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    40b4:\t83 e0 07             \tand    $0x7,%eax\n    40b7:\t83 c0 01             \tadd    $0x1,%eax\n    40ba:\t09 d0                \tor     %edx,%eax\n    40bc:\t89 c7                \tmov    %eax,%edi\n    40be:\te8 00 00 00 00       \tcallq  40c3 <formatIm+0xf5>\n    40c3:\te9 61 01 00 00       \tjmpq   4229 <formatIm+0x25b>\n    40c8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 40ce <formatIm+0x100>\n    40ce:\t83 f8 01             \tcmp    $0x1,%eax\n    40d1:\t0f 85 89 00 00 00    \tjne    4160 <formatIm+0x192>\n    40d7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    40da:\t89 c7                \tmov    %eax,%edi\n    40dc:\te8 00 00 00 00       \tcallq  40e1 <formatIm+0x113>\n    40e1:\t83 f8 01             \tcmp    $0x1,%eax\n    40e4:\t75 7a                \tjne    4160 <formatIm+0x192>\n    40e6:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    40e9:\t85 c0                \ttest   %eax,%eax\n    40eb:\t7e 73                \tjle    4160 <formatIm+0x192>\n    40ed:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    40f0:\t3d ff 03 00 00       \tcmp    $0x3ff,%eax\n    40f5:\t7f 69                \tjg     4160 <formatIm+0x192>\n    40f7:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    40fa:\t83 e0 03             \tand    $0x3,%eax\n    40fd:\t85 c0                \ttest   %eax,%eax\n    40ff:\t75 5f                \tjne    4160 <formatIm+0x192>\n    4101:\t83 7d f8 02          \tcmpl   $0x2,-0x8(%rbp)\n    4105:\t75 59                \tjne    4160 <formatIm+0x192>\n    4107:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    410b:\t75 53                \tjne    4160 <formatIm+0x192>\n    410d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4110:\tc1 e8 04             \tshr    $0x4,%eax\n    4113:\tc1 e0 0b             \tshl    $0xb,%eax\n    4116:\t25 00 18 00 00       \tand    $0x1800,%eax\n    411b:\t89 c2                \tmov    %eax,%edx\n    411d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4120:\tc1 e8 06             \tshr    $0x6,%eax\n    4123:\tc1 e0 07             \tshl    $0x7,%eax\n    4126:\t25 80 07 00 00       \tand    $0x780,%eax\n    412b:\t09 c2                \tor     %eax,%edx\n    412d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4130:\tc1 e8 02             \tshr    $0x2,%eax\n    4133:\tc1 e0 06             \tshl    $0x6,%eax\n    4136:\t83 e0 40             \tand    $0x40,%eax\n    4139:\t09 c2                \tor     %eax,%edx\n    413b:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    413e:\tc1 e8 03             \tshr    $0x3,%eax\n    4141:\tc1 e0 05             \tshl    $0x5,%eax\n    4144:\t83 e0 20             \tand    $0x20,%eax\n    4147:\t09 c2                \tor     %eax,%edx\n    4149:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    414c:\t83 e8 08             \tsub    $0x8,%eax\n    414f:\tc1 e0 02             \tshl    $0x2,%eax\n    4152:\t09 d0                \tor     %edx,%eax\n    4154:\t89 c7                \tmov    %eax,%edi\n    4156:\te8 00 00 00 00       \tcallq  415b <formatIm+0x18d>\n    415b:\te9 c9 00 00 00       \tjmpq   4229 <formatIm+0x25b>\n    4160:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4166 <formatIm+0x198>\n    4166:\t83 f8 01             \tcmp    $0x1,%eax\n    4169:\t0f 85 8a 00 00 00    \tjne    41f9 <formatIm+0x22b>\n    416f:\t83 7d fc 02          \tcmpl   $0x2,-0x4(%rbp)\n    4173:\t0f 85 80 00 00 00    \tjne    41f9 <formatIm+0x22b>\n    4179:\t83 7d f8 02          \tcmpl   $0x2,-0x8(%rbp)\n    417d:\t75 7a                \tjne    41f9 <formatIm+0x22b>\n    417f:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    4182:\t89 c6                \tmov    %eax,%esi\n    4184:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n    4189:\te8 00 00 00 00       \tcallq  418e <formatIm+0x1c0>\n    418e:\t83 f8 01             \tcmp    $0x1,%eax\n    4191:\t75 66                \tjne    41f9 <formatIm+0x22b>\n    4193:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4196:\t83 e0 0f             \tand    $0xf,%eax\n    4199:\t85 c0                \ttest   %eax,%eax\n    419b:\t75 5c                \tjne    41f9 <formatIm+0x22b>\n    419d:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    41a1:\t75 56                \tjne    41f9 <formatIm+0x22b>\n    41a3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    41a6:\tc1 e8 09             \tshr    $0x9,%eax\n    41a9:\tc1 e0 0c             \tshl    $0xc,%eax\n    41ac:\t25 00 10 00 00       \tand    $0x1000,%eax\n    41b1:\t89 c2                \tmov    %eax,%edx\n    41b3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    41b6:\tc1 e8 04             \tshr    $0x4,%eax\n    41b9:\tc1 e0 06             \tshl    $0x6,%eax\n    41bc:\t83 e0 40             \tand    $0x40,%eax\n    41bf:\t09 c2                \tor     %eax,%edx\n    41c1:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    41c4:\tc1 e8 06             \tshr    $0x6,%eax\n    41c7:\tc1 e0 05             \tshl    $0x5,%eax\n    41ca:\t83 e0 20             \tand    $0x20,%eax\n    41cd:\t09 c2                \tor     %eax,%edx\n    41cf:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    41d2:\tc1 e8 07             \tshr    $0x7,%eax\n    41d5:\tc1 e0 03             \tshl    $0x3,%eax\n    41d8:\t83 e0 18             \tand    $0x18,%eax\n    41db:\t09 c2                \tor     %eax,%edx\n    41dd:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    41e0:\tc1 e8 05             \tshr    $0x5,%eax\n    41e3:\tc1 e0 02             \tshl    $0x2,%eax\n    41e6:\t83 e0 04             \tand    $0x4,%eax\n    41e9:\t09 d0                \tor     %edx,%eax\n    41eb:\t0d 01 61 00 00       \tor     $0x6101,%eax\n    41f0:\t89 c7                \tmov    %eax,%edi\n    41f2:\te8 00 00 00 00       \tcallq  41f7 <formatIm+0x229>\n    41f7:\teb 30                \tjmp    4229 <formatIm+0x25b>\n    41f9:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    41fc:\tc1 e0 14             \tshl    $0x14,%eax\n    41ff:\t89 c2                \tmov    %eax,%edx\n    4201:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    4204:\tc1 e0 0f             \tshl    $0xf,%eax\n    4207:\t09 c2                \tor     %eax,%edx\n    4209:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    420c:\tc1 e0 0c             \tshl    $0xc,%eax\n    420f:\t25 00 70 00 00       \tand    $0x7000,%eax\n    4214:\t09 c2                \tor     %eax,%edx\n    4216:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    4219:\tc1 e0 07             \tshl    $0x7,%eax\n    421c:\t09 d0                \tor     %edx,%eax\n    421e:\t83 c8 13             \tor     $0x13,%eax\n    4221:\t89 c7                \tmov    %eax,%edi\n    4223:\te8 00 00 00 00       \tcallq  4228 <formatIm+0x25a>\n    4228:\t90                   \tnop\n    4229:\t90                   \tnop\n    422a:\tc9                   \tleaveq \n    422b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall formatIm(int a1, __int64 a2, __int64 a3, __int64 a4,\n                            __int64 a5, __int64 a6) {\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  __int64 v21;\n  __int64 v22;\n  __int64 result;\n  __int64 v24;\n  __int64 v25;\n  __int64 v26;\n  __int64 v27[Number];\n  unsigned int v28;\n  int v29;\n  int v30;\n  if ((a1 & Number) != Number) {\n    v28 = Number;\n    v29 = Number;\n    v30 = Number;\n    LODWORD(v27[Number]) = Number;\n  } else {\n    expect(Number, a2, a3, a4, a5, a6);\n    v30 = tokenvalNumber;\n    getToken();\n    expect(Number, a2, v6, v7, v8, v9);\n    getToken();\n    expect(Number, a2, v10, v11, v12, v13);\n    v29 = tokenvalNumber;\n    getToken();\n    expect(Number, a2, v14, v15, v16, v17);\n    getToken();\n    parseExpression(v27, a2, v18, v19, v20, v21);\n    v28 = v27[Number] & Number;\n  }\n  if (rvc == Number &&\n      (a2 = LODWORD(v27[Number]), insrange(Number, v27[Number])) &&\n      v29 == v30) {\n    v22 = (Number * (_BYTE)v28) & Number | (v30 << Number) |\n          ((unsigned __int16)(v28 >> Number) << Number) & Number;\n    result = emitHalf((unsigned __int16)v22 |\n                          (unsigned __int16)((a1 & Number) + Number),\n                      a2, v22, a4, a5, a6);\n  } else if (rvc == Number && rvcreg(v30) && SLODWORD(v27[Number]) > Number &&\n             SLODWORD(v27[Number]) <= Number && (v28 & Number) == Number &&\n             v29 == Number && !a1) {\n    v24 = (Number * (unsigned __int8)(v28 >> Number)) & Number |\n          ((unsigned __int8)(v28 >> Number) << Number) & Number |\n          ((unsigned __int16)(v28 >> Number) << Number) & Number |\n          ((unsigned __int16)(v28 >> Number) << Number) & Number;\n    result = emitHalf((unsigned __int16)v24 |\n                          (unsigned __int16)(Number * (v30 - Number)),\n                      a2, v24, a4, a5, a6);\n  } else if (rvc == Number && v30 == Number && v29 == Number &&\n             (a2 = LODWORD(v27[Number]), insrange(Number, v27[Number])) &&\n             (v28 & Number) == Number && !a1) {\n    v25 = (Number * (unsigned __int8)(v28 >> Number)) & Number |\n          (Number * (unsigned __int8)(v28 >> Number)) & Number |\n          ((unsigned __int8)(v28 >> Number) << Number) & Number |\n          ((unsigned __int16)(v28 >> Number) << Number) & Number;\n    result = emitHalf(\n        v25 | (Number * (unsigned __int8)(v28 >> Number)) & Number | Number, a2,\n        v25, a4, a5, a6);\n  } else {\n    v26 = ((_WORD)a1 << Number) & Number | (v29 << Number) | (v28 << Number);\n    result = emitWord(v26 | (v30 << Number) | Number, a2, v26, a4, a5, a6);\n  }\n  return result;\n}", "code_t": "void __cdecl formatIm(unsigned int code) {\n  Value <span class=\"supfact\">v</span>;\n  unsigned int immed;\n  int src1;\n  int dst;\n  if ((code & Number) != Number) {\n    immed = Number;\n    src1 = Number;\n    dst = Number;\n    <span class=\"supfact\">v</span>.con = Number;\n  } else {\n    expect(Number);\n    dst = tokenvalNumber;\n    getToken();\n    expect(Number);\n    getToken();\n    expect(Number);\n    src1 = tokenvalNumber;\n    getToken();\n    expect(Number);\n    getToken();\n    parseExpression(&<span class=\"supfact\">v</span>);\n    immed = <span class=\"supfact\">v</span>.con & Number;\n  }\n  if (rvc == Number && insrange(Number, <span class=\"supfact\">v</span>.con) && src1 == dst) {\n    emitHalf((Number * (_BYTE)immed) & Number | (dst << Number) |\n             ((unsigned __int16)(immed >> Number) << Number) & Number |\n             ((code & Number) + Number));\n  } else if (rvc == Number && rvcreg(dst) == Number &&\n             <span class=\"supfact\">v</span>.con > Number &&\n             <span class=\"supfact\">v</span>.con <= Number && (immed & Number) == Number &&\n             src1 == Number && !code) {\n    emitHalf((Number * (unsigned __int8)(immed >> Number)) & Number |\n             ((unsigned __int8)(immed >> Number) << Number) & Number |\n             ((unsigned __int16)(immed >> Number) << Number) & Number |\n             ((unsigned __int16)(immed >> Number) << Number) & Number |\n             (Number * (dst - Number)));\n  } else if (rvc == Number && dst == Number && src1 == Number &&\n             insrange(Number, <span class=\"supfact\">v</span>.con) == Number &&\n             (immed & Number) == Number && !code) {\n    emitHalf((Number * (unsigned __int8)(immed >> Number)) & Number |\n             (Number * (unsigned __int8)(immed >> Number)) & Number |\n             ((unsigned __int8)(immed >> Number) << Number) & Number |\n             ((unsigned __int16)(immed >> Number) << Number) & Number |\n             (Number * (unsigned __int8)(immed >> Number)) & Number | Number);\n  } else {\n    emitWord(((_WORD)code << Number) & Number | (src1 << Number) |\n             (immed << Number) | (dst << Number) | Number);\n  }\n}", "var": [{"name": "v27", "type": "__int64[4]", "pred_name": "v7", "ref_name": "v", "ref_type": "struct Value { int con; PADDING (4); __int64 lcon; Symbol * sym; }"}], "body_in_train": false}, {"repo_owner": "franziskuskiefer", "repo_name": "nss-benchmark", "path": "franziskuskiefer/nss-benchmark/0cd9bc721c370efa169a79962c2449acc48f375d6d576e87190b3ee5a1a4a906", "path_in_repo": "franziskuskiefer/nss-benchmark/supercop-20171218/ntl-10.5.0/src/GF2EX.o", "objdump": "0000000000009e10 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_>:\n    9e10:\t41 54                \tpush   %r12\n    9e12:\t49 89 f1             \tmov    %rsi,%r9\n    9e15:\t49 89 d2             \tmov    %rdx,%r10\n    9e18:\t49 89 cc             \tmov    %rcx,%r12\n    9e1b:\t55                   \tpush   %rbp\n    9e1c:\t4c 89 c6             \tmov    %r8,%rsi\n    9e1f:\t48 89 fd             \tmov    %rdi,%rbp\n    9e22:\t48 8d 14 09          \tlea    (%rcx,%rcx,1),%rdx\n    9e26:\t4d 89 d0             \tmov    %r10,%r8\n    9e29:\t4c 89 c9             \tmov    %r9,%rcx\n    9e2c:\t48 83 ec 18          \tsub    $0x18,%rsp\n    9e30:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n    9e37:\t00 00 \n    9e39:\t48 8d 7c 24 08       \tlea    0x8(%rsp),%rdi\n    9e3e:\te8 dd fd ff ff       \tcallq  9c20 <_ZN3NTLL13ProjectPowersERNS_3VecINS_4GF2EEEERKNS_5GF2EXElS6_RKNS_12GF2EXModulusE>\n    9e43:\t4c 89 e2             \tmov    %r12,%rdx\n    9e46:\t48 8d 74 24 08       \tlea    0x8(%rsp),%rsi\n    9e4b:\t48 89 ef             \tmov    %rbp,%rdi\n    9e4e:\te8 00 00 00 00       \tcallq  9e53 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x43>\n    9e53:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n    9e58:\t48 85 ff             \ttest   %rdi,%rdi\n    9e5b:\t74 1c                \tje     9e79 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x69>\n    9e5d:\t48 8b 77 f0          \tmov    -0x10(%rdi),%rsi\n    9e61:\te8 00 00 00 00       \tcallq  9e66 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x56>\n    9e66:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n    9e6b:\t48 85 ff             \ttest   %rdi,%rdi\n    9e6e:\t74 09                \tje     9e79 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x69>\n    9e70:\t48 83 ef 20          \tsub    $0x20,%rdi\n    9e74:\te8 00 00 00 00       \tcallq  9e79 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x69>\n    9e79:\t48 83 c4 18          \tadd    $0x18,%rsp\n    9e7d:\t5d                   \tpop    %rbp\n    9e7e:\t41 5c                \tpop    %r12\n    9e80:\tc3                   \tretq   \n    9e81:\t48 89 c5             \tmov    %rax,%rbp\n    9e84:\te9 00 00 00 00       \tjmpq   9e89 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x79>\n    9e89:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)", "code_s": "void __fastcall NTL DoMinPolyMod(NTL *this, NTL GF2EX *a2, const NTL GF2EX *a3,\n                                 const NTL GF2EXModulus *a4, const char *a5,\n                                 const NTL GF2EX *a6, __m128 a7) {\n  __int64 v8;\n  NTL *v9[Number];\n  v9[Number] = Number L;\n  NTL ProjectPowers((__int64 *)v9, a5, Number L * (_QWORD)a4, (char *)a2, a3,\n                    a7);\n  NTL MinPolySeq(this, (char *)v9, (unsigned __int64)a4);\n  if (v9[Number]) {\n    NTL BlockDestroy(v9[Number], *((NTL GF2E **)v9[Number] - Number), v8);\n    if (v9[Number])\n      free((char *)v9[Number] - Number);\n  }\n}", "code_t": "void __fastcall NTL DoMinPolyMod(NTL GF2EX *h, NTL GF2EX *a2,\n                                 const NTL GF2EX *F, const NTL GF2EXModulus *m,\n                                 NTL Vec<NTL GF2E> *a, const NTL GF2EX *a6) {\n  __int64 v7;\n  NTL vec_GF2E <span class=\"supfact\">aa</span>;\n  <span class=\"supfact\">aa</span>._vec__rep.rep = Number L;\n  NTL ProjectPowers(&<span class=\"supfact\">aa</span>, a, Number L * (_QWORD)m, a2,\n                    (NTL GF2EXModulus *)F);\n  NTL MinPolySeq(h, &<span class=\"supfact\">aa</span>, (__int64)m);\n  if (<span class=\"supfact\">aa</span>._vec__rep.rep) {\n    NTL BlockDestroy((NTL *)<span class=\"supfact\">aa</span>._vec__rep.rep,\n                     (NTL GF2E *)<span class=\"supfact\">aa</span>._vec__rep.rep[Number]\n                         ._GF2E__rep.xrep.rep,\n                     v7);\n    if (<span class=\"supfact\">aa</span>._vec__rep.rep)\n      free(&<span class=\"supfact\">aa</span>._vec__rep.rep[Number]);\n  }\n}", "var": [{"name": "v9", "type": "__int64[4]", "pred_name": "v9", "ref_name": "aa", "ref_type": "struct NTL::vec_GF2E { NTL::WrappedPtr<NTL::GF2E,NTL::Vec<NTL::GF2E>::_vec_deleter> _vec__rep; }"}], "body_in_train": false}, {"repo_owner": "franziskuskiefer", "repo_name": "nss-benchmark", "path": "franziskuskiefer/nss-benchmark/0cd9bc721c370efa169a79962c2449acc48f375d6d576e87190b3ee5a1a4a906", "path_in_repo": "franziskuskiefer/nss-benchmark/supercop-20171218/ntl-10.5.0/src/GF2EX.o", "objdump": "0000000000009e10 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_>:\n    9e10:\t41 54                \tpush   %r12\n    9e12:\t49 89 f1             \tmov    %rsi,%r9\n    9e15:\t49 89 d2             \tmov    %rdx,%r10\n    9e18:\t49 89 cc             \tmov    %rcx,%r12\n    9e1b:\t55                   \tpush   %rbp\n    9e1c:\t4c 89 c6             \tmov    %r8,%rsi\n    9e1f:\t48 89 fd             \tmov    %rdi,%rbp\n    9e22:\t48 8d 14 09          \tlea    (%rcx,%rcx,1),%rdx\n    9e26:\t4d 89 d0             \tmov    %r10,%r8\n    9e29:\t4c 89 c9             \tmov    %r9,%rcx\n    9e2c:\t48 83 ec 18          \tsub    $0x18,%rsp\n    9e30:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n    9e37:\t00 00 \n    9e39:\t48 8d 7c 24 08       \tlea    0x8(%rsp),%rdi\n    9e3e:\te8 dd fd ff ff       \tcallq  9c20 <_ZN3NTLL13ProjectPowersERNS_3VecINS_4GF2EEEERKNS_5GF2EXElS6_RKNS_12GF2EXModulusE>\n    9e43:\t4c 89 e2             \tmov    %r12,%rdx\n    9e46:\t48 8d 74 24 08       \tlea    0x8(%rsp),%rsi\n    9e4b:\t48 89 ef             \tmov    %rbp,%rdi\n    9e4e:\te8 00 00 00 00       \tcallq  9e53 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x43>\n    9e53:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n    9e58:\t48 85 ff             \ttest   %rdi,%rdi\n    9e5b:\t74 1c                \tje     9e79 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x69>\n    9e5d:\t48 8b 77 f0          \tmov    -0x10(%rdi),%rsi\n    9e61:\te8 00 00 00 00       \tcallq  9e66 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x56>\n    9e66:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n    9e6b:\t48 85 ff             \ttest   %rdi,%rdi\n    9e6e:\t74 09                \tje     9e79 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x69>\n    9e70:\t48 83 ef 20          \tsub    $0x20,%rdi\n    9e74:\te8 00 00 00 00       \tcallq  9e79 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x69>\n    9e79:\t48 83 c4 18          \tadd    $0x18,%rsp\n    9e7d:\t5d                   \tpop    %rbp\n    9e7e:\t41 5c                \tpop    %r12\n    9e80:\tc3                   \tretq   \n    9e81:\t48 89 c5             \tmov    %rax,%rbp\n    9e84:\te9 00 00 00 00       \tjmpq   9e89 <_ZN3NTL12DoMinPolyModERNS_5GF2EXERKS0_RKNS_12GF2EXModulusElS3_+0x79>\n    9e89:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)", "code_s": "void __fastcall NTL DoMinPolyMod(NTL *this, NTL GF2EX *a2, const NTL GF2EX *a3,\n                                 const NTL GF2EXModulus *a4, const char *a5,\n                                 const NTL GF2EX *a6, __m128 a7) {\n  __int64 v8;\n  NTL *v9[Number];\n  v9[Number] = Number L;\n  NTL ProjectPowers((__int64 *)v9, a5, Number L * (_QWORD)a4, (char *)a2, a3,\n                    a7);\n  NTL MinPolySeq(this, (char *)v9, (unsigned __int64)a4);\n  if (v9[Number]) {\n    NTL BlockDestroy(v9[Number], *((NTL GF2E **)v9[Number] - Number), v8);\n    if (v9[Number])\n      free((char *)v9[Number] - Number);\n  }\n}", "code_t": "void __fastcall NTL DoMinPolyMod(NTL GF2EX *h, NTL GF2EX *a2,\n                                 const NTL GF2EX *F, const NTL GF2EXModulus *m,\n                                 NTL Vec<NTL GF2E> *a, const NTL GF2EX *a6) {\n  __int64 v7;\n  NTL vec_GF2E <span class=\"supfact\">aa</span>;\n  <span class=\"supfact\">aa</span>._vec__rep.rep = Number L;\n  NTL ProjectPowers(&<span class=\"supfact\">aa</span>, a, Number L * (_QWORD)m, a2,\n                    (NTL GF2EXModulus *)F);\n  NTL MinPolySeq(h, &<span class=\"supfact\">aa</span>, (__int64)m);\n  if (<span class=\"supfact\">aa</span>._vec__rep.rep) {\n    NTL BlockDestroy((NTL *)<span class=\"supfact\">aa</span>._vec__rep.rep,\n                     (NTL GF2E *)<span class=\"supfact\">aa</span>._vec__rep.rep[Number]\n                         ._GF2E__rep.xrep.rep,\n                     v7);\n    if (<span class=\"supfact\">aa</span>._vec__rep.rep)\n      free(&<span class=\"supfact\">aa</span>._vec__rep.rep[Number]);\n  }\n}", "var": [{"name": "v9", "type": "__int64[4]", "pred_name": "v9", "ref_name": "aa", "ref_type": "struct NTL::vec_GF2E { NTL::WrappedPtr<NTL::GF2E,NTL::Vec<NTL::GF2E>::_vec_deleter> _vec__rep; }"}], "body_in_train": false}, {"repo_owner": "webosose", "repo_name": "gst-libav", "path": "webosose/gst-libav/81c31a02fa5d6de9addf31e44afb885658996ec0941902cbe58c9854eff800e0", "path_in_repo": "webosose/gst-libav/gst-libs/ext/libav/libavfilter/vf_curves.o", "objdump": "0000000000002817 <filter_frame>:\n    2817:\t55                   \tpush   %rbp\n    2818:\t53                   \tpush   %rbx\n    2819:\t48 83 ec 48          \tsub    $0x48,%rsp\n    281d:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    2822:\t48 89 34 24          \tmov    %rsi,(%rsp)\n    2826:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    282b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    282f:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n    2834:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    2839:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    283d:\t48 8b 00             \tmov    (%rax),%rax\n    2840:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n    2845:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2849:\t48 89 c7             \tmov    %rax,%rdi\n    284c:\te8 00 00 00 00       \tcallq  2851 <filter_frame+0x3a>\n    2851:\t85 c0                \ttest   %eax,%eax\n    2853:\t74 0b                \tje     2860 <filter_frame+0x49>\n    2855:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2859:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    285e:\teb 55                \tjmp    28b5 <filter_frame+0x9e>\n    2860:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    2865:\t8b 50 28             \tmov    0x28(%rax),%edx\n    2868:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    286d:\t8b 48 24             \tmov    0x24(%rax),%ecx\n    2870:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    2875:\t89 ce                \tmov    %ecx,%esi\n    2877:\t48 89 c7             \tmov    %rax,%rdi\n    287a:\te8 00 00 00 00       \tcallq  287f <filter_frame+0x68>\n    287f:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    2884:\t48 83 7c 24 38 00    \tcmpq   $0x0,0x38(%rsp)\n    288a:\t75 15                \tjne    28a1 <filter_frame+0x8a>\n    288c:\t48 89 e0             \tmov    %rsp,%rax\n    288f:\t48 89 c7             \tmov    %rax,%rdi\n    2892:\te8 00 00 00 00       \tcallq  2897 <filter_frame+0x80>\n    2897:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    289c:\te9 a7 00 00 00       \tjmpq   2948 <filter_frame+0x131>\n    28a1:\t48 8b 14 24          \tmov    (%rsp),%rdx\n    28a5:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    28aa:\t48 89 d6             \tmov    %rdx,%rsi\n    28ad:\t48 89 c7             \tmov    %rax,%rdi\n    28b0:\te8 00 00 00 00       \tcallq  28b5 <filter_frame+0x9e>\n    28b5:\t48 8b 04 24          \tmov    (%rsp),%rax\n    28b9:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n    28be:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    28c3:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n    28c8:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    28cd:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n    28d1:\t48 8b 18             \tmov    (%rax),%rbx\n    28d4:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    28d9:\t8b 68 28             \tmov    0x28(%rax),%ebp\n    28dc:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    28e1:\t48 89 c7             \tmov    %rax,%rdi\n    28e4:\te8 00 00 00 00       \tcallq  28e9 <filter_frame+0xd2>\n    28e9:\t39 c5                \tcmp    %eax,%ebp\n    28eb:\t7e 0f                \tjle    28fc <filter_frame+0xe5>\n    28ed:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    28f2:\t48 89 c7             \tmov    %rax,%rdi\n    28f5:\te8 00 00 00 00       \tcallq  28fa <filter_frame+0xe3>\n    28fa:\teb 08                \tjmp    2904 <filter_frame+0xed>\n    28fc:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    2901:\t8b 40 28             \tmov    0x28(%rax),%eax\n    2904:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n    2909:\t48 8b 7c 24 30       \tmov    0x30(%rsp),%rdi\n    290e:\t41 89 c0             \tmov    %eax,%r8d\n    2911:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    2916:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    291b:\tff d3                \tcallq  *%rbx\n    291d:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2921:\t48 39 44 24 38       \tcmp    %rax,0x38(%rsp)\n    2926:\t74 0b                \tje     2933 <filter_frame+0x11c>\n    2928:\t48 89 e0             \tmov    %rsp,%rax\n    292b:\t48 89 c7             \tmov    %rax,%rdi\n    292e:\te8 00 00 00 00       \tcallq  2933 <filter_frame+0x11c>\n    2933:\t48 8b 54 24 38       \tmov    0x38(%rsp),%rdx\n    2938:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    293d:\t48 89 d6             \tmov    %rdx,%rsi\n    2940:\t48 89 c7             \tmov    %rax,%rdi\n    2943:\te8 00 00 00 00       \tcallq  2948 <filter_frame+0x131>\n    2948:\t48 83 c4 48          \tadd    $0x48,%rsp\n    294c:\t5b                   \tpop    %rbx\n    294d:\t5d                   \tpop    %rbp\n    294e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall filter_frame(__int64 a1, __int64 a2) {\n  void(__fastcall * v3)(__int64,\n                        __int64(__fastcall *)(__int64, _QWORD *, int, int),\n                        __int64 *, _QWORD, _QWORD);\n  int v4;\n  unsigned int v5;\n  __int64 v6[Number];\n  __int64 v7[Number];\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  v6[Number] = a1;\n  v6[Number] = a2;\n  v9 = *(_QWORD *)(a1 + Number);\n  v8 = **(_QWORD **)(v9 + Number);\n  if ((unsigned int)av_frame_is_writable(a2)) {\n    v10 = v6[Number];\n  } else {\n    v10 = ff_get_video_buffer(v8, *(unsigned int *)(v8 + Number),\n                              *(unsigned int *)(v8 + Number));\n    if (!v10) {\n      av_frame_free(v6);\n      return Number L;\n    }\n    av_frame_copy_props(v10, v6[Number]);\n  }\n  v7[Number] = v6[Number];\n  v7[Number] = v10;\n  v3 = **(void(__fastcall ***)(\n      __int64, __int64(__fastcall *)(__int64, _QWORD *, int, int), __int64 *,\n      _QWORD, _QWORD))(v9 + Number);\n  v4 = *(_DWORD *)(v8 + Number);\n  if (v4 <= (int)ff_filter_get_nb_threads(v9))\n    v5 = *(_DWORD *)(v8 + Number);\n  else\n    v5 = ff_filter_get_nb_threads(v9);\n  v3(v9, filter_slice, v7, Number L, v5);\n  if (v10 != v6[Number])\n    av_frame_free(v6);\n  return ff_filter_frame(v8, v10);\n}", "code_t": "int __cdecl filter_frame(AVFilterLink_0 *inlink, AVFrame_0 *in) {\n  avfilter_execute_func *v3;\n  int v4;\n  unsigned int v5;\n  AVFrame_0 *ina;\n  AVFilterLink_0 *inlinka;\n  ThreadData_0 <span class=\"supfact\">td</span>;\n  AVFilterLink_0 *outlink;\n  AVFilterContext_0 *ctx;\n  AVFrame_0 *out;\n  inlinka = inlink;\n  ina = in;\n  ctx = inlink->dst;\n  outlink = *ctx->outputs;\n  if ((unsigned int)av_frame_is_writable(in)) {\n    out = ina;\n  } else {\n    out = (AVFrame_0 *)ff_get_video_buffer(outlink, (unsigned int)outlink->w,\n                                           (unsigned int)outlink->h);\n    if (!out) {\n      av_frame_free(&ina);\n      return Number;\n    }\n    av_frame_copy_props(out, ina);\n  }\n  <span class=\"supfact\">td</span>.in = ina;\n  <span class=\"supfact\">td</span>.out = out;\n  v3 = ctx->internal->execute;\n  v4 = outlink->h;\n  if (v4 <= (int)ff_filter_get_nb_threads(ctx))\n    v5 = outlink->h;\n  else\n    v5 = ff_filter_get_nb_threads(ctx);\n  v3(ctx, (avfilter_action_func *)filter_slice, &<span class=\"supfact\">td</span>, Number L,\n     v5);\n  if (out != ina)\n    av_frame_free(&ina);\n  return ff_filter_frame(outlink, out);\n}", "var": [{"name": "v7", "type": "struct ThreadData_0 { AVFrame_0 * in; AVFrame_0 * out; }", "pred_name": "td", "ref_name": "td", "ref_type": "struct ThreadData_0 { AVFrame_0 * in; AVFrame_0 * out; }"}], "body_in_train": true}, {"repo_owner": "maxux", "repo_name": "inpres-2eme", "path": "maxux/inpres-2eme/b7c8270983a7a752bf37d8341d06a9b9cbbc0a41651efa42635d648e09b7b4f4", "path_in_repo": "maxux/inpres-2eme/poo/carte-main4/main4.o", "objdump": "0000000000000000 <main.cold>:\n   0:\t48 8d bd 30 ff ff ff \tlea    -0xd0(%rbp),%rdi\n   7:\te8 00 00 00 00       \tcallq  c <main.cold+0xc>\n   c:\t48 8d bd 70 fe ff ff \tlea    -0x190(%rbp),%rdi\n  13:\te8 00 00 00 00       \tcallq  18 <main.cold+0x18>\n  18:\t48 8d bd b0 fd ff ff \tlea    -0x250(%rbp),%rdi\n  1f:\te8 00 00 00 00       \tcallq  24 <main.cold+0x24>\n  24:\t48 8d bd f0 fc ff ff \tlea    -0x310(%rbp),%rdi\n  2b:\te8 00 00 00 00       \tcallq  30 <main.cold+0x30>\n  30:\t48 8d bd 30 fc ff ff \tlea    -0x3d0(%rbp),%rdi\n  37:\te8 00 00 00 00       \tcallq  3c <main.cold+0x3c>\n  3c:\t48 8d bd 70 fb ff ff \tlea    -0x490(%rbp),%rdi\n  43:\te8 00 00 00 00       \tcallq  48 <main.cold+0x48>\n  48:\t48 8d bd b0 fa ff ff \tlea    -0x550(%rbp),%rdi\n  4f:\te8 00 00 00 00       \tcallq  54 <main.cold+0x54>\n  54:\t48 8d bd f0 f9 ff ff \tlea    -0x610(%rbp),%rdi\n  5b:\te8 00 00 00 00       \tcallq  60 <main.cold+0x60>\n  60:\t48 89 df             \tmov    %rbx,%rdi\n  63:\te8 00 00 00 00       \tcallq  68 <main.cold+0x68>\n  68:\tbe 78 00 00 00       \tmov    $0x78,%esi\n  6d:\t4c 89 f7             \tmov    %r14,%rdi\n  70:\te8 00 00 00 00       \tcallq  75 <main.cold+0x75>\n  75:\teb b9                \tjmp    30 <main.cold+0x30>\n  77:\tbe c0 00 00 00       \tmov    $0xc0,%esi\n  7c:\t4c 89 f7             \tmov    %r14,%rdi\n  7f:\te8 00 00 00 00       \tcallq  84 <main.cold+0x84>\n  84:\teb aa                \tjmp    30 <main.cold+0x30>\n  86:\tbe c0 00 00 00       \tmov    $0xc0,%esi\n  8b:\t4c 89 f7             \tmov    %r14,%rdi\n  8e:\te8 00 00 00 00       \tcallq  93 <main.cold+0x93>\n  93:\teb 9b                \tjmp    30 <main.cold+0x30>\n", "code_s": "void __fastcall __noreturn main_cold() {\n  struct _Unwind_Exception *v0;\n  __int64 v1;\n  ConcepteurAlbum ~ConcepteurAlbum((ConcepteurAlbum *)(v1 - Number));\n  ConcepteurAlbum ~ConcepteurAlbum((ConcepteurAlbum *)(v1 - Number));\n  ConcepteurAlbum ~ConcepteurAlbum((ConcepteurAlbum *)(v1 - Number));\n  ConcepteurAlbum ~ConcepteurAlbum((ConcepteurAlbum *)(v1 - Number));\n  Collectionneur ~Collectionneur((Collectionneur *)(v1 - Number));\n  Collectionneur ~Collectionneur((Collectionneur *)(v1 - Number));\n  Collectionneur ~Collectionneur((Collectionneur *)(v1 - Number));\n  Collectionneur ~Collectionneur((Collectionneur *)(v1 - Number));\n  Unwind_Resume(v0);\n}", "code_t": "void __fastcall __noreturn main_cold() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  __int64 v1;\n  ConcepteurAlbum ~ConcepteurAlbum((ConcepteurAlbum *)(v1 - Number));\n  ConcepteurAlbum ~ConcepteurAlbum((ConcepteurAlbum *)(v1 - Number));\n  ConcepteurAlbum ~ConcepteurAlbum((ConcepteurAlbum *)(v1 - Number));\n  ConcepteurAlbum ~ConcepteurAlbum((ConcepteurAlbum *)(v1 - Number));\n  Collectionneur ~Collectionneur((Collectionneur *)(v1 - Number));\n  Collectionneur ~Collectionneur((Collectionneur *)(v1 - Number));\n  Collectionneur ~Collectionneur((Collectionneur *)(v1 - Number));\n  Collectionneur ~Collectionneur((Collectionneur *)(v1 - Number));\n  Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "var": [{"name": "v0", "type": "ConcepteurAlbum *", "pred_name": "v0", "ref_name": "v0", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "v4o6", "repo_name": "cpsc314", "path": "v4o6/cpsc314/a25c6f651200c99b5d3b2a5b5317b70c75a4cab6d83283e756e97ad31a5762e2", "path_in_repo": "v4o6/cpsc314/template_clean/a3", "objdump": "0000000000408fb4 <_Z7myScaleddd>:\n  408fb4:\t55                   \tpush   %rbp\n  408fb5:\t48 89 e5             \tmov    %rsp,%rbp\n  408fb8:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  408fbf:\tf2 0f 11 85 78 ff ff \tmovsd  %xmm0,-0x88(%rbp)\n  408fc6:\tff \n  408fc7:\tf2 0f 11 8d 70 ff ff \tmovsd  %xmm1,-0x90(%rbp)\n  408fce:\tff \n  408fcf:\tf2 0f 11 95 68 ff ff \tmovsd  %xmm2,-0x98(%rbp)\n  408fd6:\tff \n  408fd7:\tf2 0f 10 8d 70 ff ff \tmovsd  -0x90(%rbp),%xmm1\n  408fde:\tff \n  408fdf:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n  408fe6:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  408fea:\tf2 0f 10 05 8e 13 01 \tmovsd  0x1138e(%rip),%xmm0        # 41a380 <_ZStL6ignore+0x1de>\n  408ff1:\t00 \n  408ff2:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  408ff7:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  408ffc:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  409000:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  409005:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  40900a:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40900e:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  409013:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  409018:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40901c:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  409021:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  409026:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40902a:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  40902f:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  409034:\tff b5 68 ff ff ff    \tpushq  -0x98(%rbp)\n  40903a:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40903e:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  409043:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  409048:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40904c:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  409051:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  409056:\t66 0f ef ff          \tpxor   %xmm7,%xmm7\n  40905a:\t66 0f ef f6          \tpxor   %xmm6,%xmm6\n  40905e:\t66 0f 28 e9          \tmovapd %xmm1,%xmm5\n  409062:\t66 0f ef e4          \tpxor   %xmm4,%xmm4\n  409066:\t66 0f ef db          \tpxor   %xmm3,%xmm3\n  40906a:\t66 0f ef d2          \tpxor   %xmm2,%xmm2\n  40906e:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n  409072:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  409077:\t48 89 c7             \tmov    %rax,%rdi\n  40907a:\te8 83 73 00 00       \tcallq  410402 <_ZN6MatrixC1Edddddddddddddddd>\n  40907f:\t48 83 c4 40          \tadd    $0x40,%rsp\n  409083:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  409087:\t48 89 c6             \tmov    %rax,%rsi\n  40908a:\tbf 80 46 42 00       \tmov    $0x424680,%edi\n  40908f:\te8 f8 85 00 00       \tcallq  41168c <_ZN6MatrixmLERKS_>\n  409094:\t90                   \tnop\n  409095:\tc9                   \tleaveq \n  409096:\tc3                   \tretq   ", "code_s": "__int64 __fastcall myScale(double a1, double a2, double a3) {\n  char v4[Number];\n  Matrix Matrix((Matrix *)v4, a1, Number, Number, Number, Number, a2, Number,\n                Number, Number, Number, a3, Number, Number, Number, Number,\n                Number);\n  return Matrix operator*=(&modelViewMatrix, v4);\n}", "code_t": "void __cdecl myScale(double sx, double sy, double sz) {\n  Matrix <span class=\"supfact\">other</span>;\n  Matrix Matrix(&<span class=\"supfact\">other</span>, sx, Number, Number, Number, Number, sy,\n                Number, Number, Number, Number, sz, Number, Number, Number,\n                Number, Number);\n  Matrix operator*=(&modelViewMatrix, &<span class=\"supfact\">other</span>);\n}", "var": [{"name": "v4", "type": "__unk__", "pred_name": "v4", "ref_name": "other", "ref_type": "struct Matrix { Vector[4] data_; }"}], "body_in_train": false}, {"repo_owner": "Dar13", "repo_name": "OpenMemDB", "path": "Dar13/OpenMemDB/f652a8e8913d63a93adbb5f4dc5a286f4a54baeb0912de7926f3f2c06b1e4428", "path_in_repo": "Dar13/OpenMemDB/database/libomdb/ConsoleDemo/omdb_console", "objdump": "0000000000403e60 <main>:\n  403e60:\t55                   \tpush   %rbp\n  403e61:\t48 89 e5             \tmov    %rsp,%rbp\n  403e64:\t53                   \tpush   %rbx\n  403e65:\t48 81 ec f8 01 00 00 \tsub    $0x1f8,%rsp\n  403e6c:\t48 8d 85 20 fe ff ff \tlea    -0x1e0(%rbp),%rax\n  403e73:\t48 89 c7             \tmov    %rax,%rdi\n  403e76:\te8 2d 05 00 00       \tcallq  4043a8 <_ZN7libomdb10Connection15errorConnectionEv>\n  403e7b:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  403e82:\t48 89 c7             \tmov    %rax,%rdi\n  403e85:\te8 86 f4 ff ff       \tcallq  403310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@plt>\n  403e8a:\tbe e8 b1 40 00       \tmov    $0x40b1e8,%esi\n  403e8f:\tbf 80 12 41 00       \tmov    $0x411280,%edi\n  403e94:\te8 97 f3 ff ff       \tcallq  403230 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  403e99:\tbe 00 31 40 00       \tmov    $0x403100,%esi\n  403e9e:\t48 89 c7             \tmov    %rax,%rdi\n  403ea1:\te8 aa f3 ff ff       \tcallq  403250 <_ZNSolsEPFRSoS_E@plt>\n  403ea6:\tbe 00 b2 40 00       \tmov    $0x40b200,%esi\n  403eab:\tbf 80 12 41 00       \tmov    $0x411280,%edi\n  403eb0:\te8 7b f3 ff ff       \tcallq  403230 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  403eb5:\tbe 00 31 40 00       \tmov    $0x403100,%esi\n  403eba:\t48 89 c7             \tmov    %rax,%rdi\n  403ebd:\te8 8e f3 ff ff       \tcallq  403250 <_ZNSolsEPFRSoS_E@plt>\n  403ec2:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n  403ec9:\t48 89 c7             \tmov    %rax,%rdi\n  403ecc:\te8 23 f7 ff ff       \tcallq  4035f4 <_Z8getInputB5cxx11v>\n  403ed1:\t48 8d 95 50 fe ff ff \tlea    -0x1b0(%rbp),%rdx\n  403ed8:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  403edf:\t48 89 d6             \tmov    %rdx,%rsi\n  403ee2:\t48 89 c7             \tmov    %rax,%rdi\n  403ee5:\te8 c6 f3 ff ff       \tcallq  4032b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@plt>\n  403eea:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n  403ef1:\t48 89 c7             \tmov    %rax,%rdi\n  403ef4:\te8 77 f2 ff ff       \tcallq  403170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  403ef9:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  403f00:\tbe 26 b2 40 00       \tmov    $0x40b226,%esi\n  403f05:\t48 89 c7             \tmov    %rax,%rdi\n  403f08:\te8 83 f1 ff ff       \tcallq  403090 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt>\n  403f0d:\t85 c0                \ttest   %eax,%eax\n  403f0f:\t0f 95 c0             \tsetne  %al\n  403f12:\t84 c0                \ttest   %al,%al\n  403f14:\t0f 84 51 02 00 00    \tje     40416b <main+0x30b>\n  403f1a:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  403f21:\t48 89 c7             \tmov    %rax,%rdi\n  403f24:\te8 e7 f4 ff ff       \tcallq  403410 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv@plt>\n  403f29:\t83 f0 01             \txor    $0x1,%eax\n  403f2c:\t84 c0                \ttest   %al,%al\n  403f2e:\t0f 84 04 02 00 00    \tje     404138 <main+0x2d8>\n  403f34:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  403f3b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  403f40:\t48 89 c7             \tmov    %rax,%rdi\n  403f43:\te8 38 f5 ff ff       \tcallq  403480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEm@plt>\n  403f48:\t0f b6 00             \tmovzbl (%rax),%eax\n  403f4b:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n  403f4e:\t80 7d ef 73          \tcmpb   $0x73,-0x11(%rbp)\n  403f52:\t74 0a                \tje     403f5e <main+0xfe>\n  403f54:\t80 7d ef 53          \tcmpb   $0x53,-0x11(%rbp)\n  403f58:\t0f 85 cf 00 00 00    \tjne    40402d <main+0x1cd>\n  403f5e:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  403f65:\t48 8d 95 20 fe ff ff \tlea    -0x1e0(%rbp),%rdx\n  403f6c:\t48 89 d6             \tmov    %rdx,%rsi\n  403f6f:\t48 89 c7             \tmov    %rax,%rdi\n  403f72:\te8 bd 1b 00 00       \tcallq  405b34 <_ZN7libomdb10Connection11getMetaDataEv>\n  403f77:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  403f7e:\t48 89 c7             \tmov    %rax,%rdi\n  403f81:\te8 36 15 00 00       \tcallq  4054bc <_ZN7libomdb18ConnectionMetaData7isValidEv>\n  403f86:\t83 f0 01             \txor    $0x1,%eax\n  403f89:\t89 c3                \tmov    %eax,%ebx\n  403f8b:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  403f92:\t48 89 c7             \tmov    %rax,%rdi\n  403f95:\te8 6a 03 00 00       \tcallq  404304 <_ZN7libomdb18ConnectionMetaDataD1Ev>\n  403f9a:\t84 db                \ttest   %bl,%bl\n  403f9c:\t74 21                \tje     403fbf <main+0x15f>\n  403f9e:\tbe 30 b2 40 00       \tmov    $0x40b230,%esi\n  403fa3:\tbf 80 12 41 00       \tmov    $0x411280,%edi\n  403fa8:\te8 83 f2 ff ff       \tcallq  403230 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  403fad:\tbe 00 31 40 00       \tmov    $0x403100,%esi\n  403fb2:\t48 89 c7             \tmov    %rax,%rdi\n  403fb5:\te8 96 f2 ff ff       \tcallq  403250 <_ZNSolsEPFRSoS_E@plt>\n  403fba:\te9 79 01 00 00       \tjmpq   404138 <main+0x2d8>\n  403fbf:\t48 8d 95 00 fe ff ff \tlea    -0x200(%rbp),%rdx\n  403fc6:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  403fcd:\t48 89 d6             \tmov    %rdx,%rsi\n  403fd0:\t48 89 c7             \tmov    %rax,%rdi\n  403fd3:\te8 18 f1 ff ff       \tcallq  4030f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@plt>\n  403fd8:\t48 8d 95 20 fe ff ff \tlea    -0x1e0(%rbp),%rdx\n  403fdf:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  403fe6:\t48 89 d6             \tmov    %rdx,%rsi\n  403fe9:\t48 89 c7             \tmov    %rax,%rdi\n  403fec:\te8 3b 05 00 00       \tcallq  40452c <_ZN7libomdb10ConnectionC1ERKS0_>\n  403ff1:\t48 8d 95 a0 fe ff ff \tlea    -0x160(%rbp),%rdx\n  403ff8:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  403fff:\t48 89 d6             \tmov    %rdx,%rsi\n  404002:\t48 89 c7             \tmov    %rax,%rdi\n  404005:\te8 e5 fa ff ff       \tcallq  403aef <_Z7doQueryN7libomdb10ConnectionENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>\n  40400a:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  404011:\t48 89 c7             \tmov    %rax,%rdi\n  404014:\te8 3d 03 00 00       \tcallq  404356 <_ZN7libomdb10ConnectionD1Ev>\n  404019:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  404020:\t48 89 c7             \tmov    %rax,%rdi\n  404023:\te8 48 f1 ff ff       \tcallq  403170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  404028:\te9 0b 01 00 00       \tjmpq   404138 <main+0x2d8>\n  40402d:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  404034:\t48 8d 95 20 fe ff ff \tlea    -0x1e0(%rbp),%rdx\n  40403b:\t48 89 d6             \tmov    %rdx,%rsi\n  40403e:\t48 89 c7             \tmov    %rax,%rdi\n  404041:\te8 ee 1a 00 00       \tcallq  405b34 <_ZN7libomdb10Connection11getMetaDataEv>\n  404046:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  40404d:\t48 89 c7             \tmov    %rax,%rdi\n  404050:\te8 67 14 00 00       \tcallq  4054bc <_ZN7libomdb18ConnectionMetaData7isValidEv>\n  404055:\t83 f0 01             \txor    $0x1,%eax\n  404058:\t89 c3                \tmov    %eax,%ebx\n  40405a:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  404061:\t48 89 c7             \tmov    %rax,%rdi\n  404064:\te8 9b 02 00 00       \tcallq  404304 <_ZN7libomdb18ConnectionMetaDataD1Ev>\n  404069:\t84 db                \ttest   %bl,%bl\n  40406b:\t74 6b                \tje     4040d8 <main+0x278>\n  40406d:\t48 8d 95 00 fe ff ff \tlea    -0x200(%rbp),%rdx\n  404074:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  40407b:\t48 89 d6             \tmov    %rdx,%rsi\n  40407e:\t48 89 c7             \tmov    %rax,%rdi\n  404081:\te8 6a f0 ff ff       \tcallq  4030f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@plt>\n  404086:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n  40408d:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n  404094:\t48 89 d6             \tmov    %rdx,%rsi\n  404097:\t48 89 c7             \tmov    %rax,%rdi\n  40409a:\te8 60 f6 ff ff       \tcallq  4036ff <_Z9doConnectNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>\n  40409f:\t48 8d 95 20 ff ff ff \tlea    -0xe0(%rbp),%rdx\n  4040a6:\t48 8d 85 20 fe ff ff \tlea    -0x1e0(%rbp),%rax\n  4040ad:\t48 89 d6             \tmov    %rdx,%rsi\n  4040b0:\t48 89 c7             \tmov    %rax,%rdi\n  4040b3:\te8 e2 04 00 00       \tcallq  40459a <_ZN7libomdb10ConnectionaSEOS0_>\n  4040b8:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n  4040bf:\t48 89 c7             \tmov    %rax,%rdi\n  4040c2:\te8 8f 02 00 00       \tcallq  404356 <_ZN7libomdb10ConnectionD1Ev>\n  4040c7:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  4040ce:\t48 89 c7             \tmov    %rax,%rdi\n  4040d1:\te8 9a f0 ff ff       \tcallq  403170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  4040d6:\teb 60                \tjmp    404138 <main+0x2d8>\n  4040d8:\t48 8d 95 00 fe ff ff \tlea    -0x200(%rbp),%rdx\n  4040df:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4040e6:\t48 89 d6             \tmov    %rdx,%rsi\n  4040e9:\t48 89 c7             \tmov    %rax,%rdi\n  4040ec:\te8 ff ef ff ff       \tcallq  4030f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@plt>\n  4040f1:\t48 8d 95 20 fe ff ff \tlea    -0x1e0(%rbp),%rdx\n  4040f8:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  4040fc:\t48 89 d6             \tmov    %rdx,%rsi\n  4040ff:\t48 89 c7             \tmov    %rax,%rdi\n  404102:\te8 25 04 00 00       \tcallq  40452c <_ZN7libomdb10ConnectionC1ERKS0_>\n  404107:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  40410e:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  404112:\t48 89 d6             \tmov    %rdx,%rsi\n  404115:\t48 89 c7             \tmov    %rax,%rdi\n  404118:\te8 6b fc ff ff       \tcallq  403d88 <_Z9doCommandN7libomdb10ConnectionENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>\n  40411d:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  404121:\t48 89 c7             \tmov    %rax,%rdi\n  404124:\te8 2d 02 00 00       \tcallq  404356 <_ZN7libomdb10ConnectionD1Ev>\n  404129:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  404130:\t48 89 c7             \tmov    %rax,%rdi\n  404133:\te8 38 f0 ff ff       \tcallq  403170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  404138:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40413c:\t48 89 c7             \tmov    %rax,%rdi\n  40413f:\te8 b0 f4 ff ff       \tcallq  4035f4 <_Z8getInputB5cxx11v>\n  404144:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  404148:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40414f:\t48 89 d6             \tmov    %rdx,%rsi\n  404152:\t48 89 c7             \tmov    %rax,%rdi\n  404155:\te8 56 f1 ff ff       \tcallq  4032b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@plt>\n  40415a:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40415e:\t48 89 c7             \tmov    %rax,%rdi\n  404161:\te8 0a f0 ff ff       \tcallq  403170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  404166:\te9 8e fd ff ff       \tjmpq   403ef9 <main+0x99>\n  40416b:\tbe 55 b2 40 00       \tmov    $0x40b255,%esi\n  404170:\tbf 80 12 41 00       \tmov    $0x411280,%edi\n  404175:\te8 b6 f0 ff ff       \tcallq  403230 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  40417a:\tbe 00 31 40 00       \tmov    $0x403100,%esi\n  40417f:\t48 89 c7             \tmov    %rax,%rdi\n  404182:\te8 c9 f0 ff ff       \tcallq  403250 <_ZNSolsEPFRSoS_E@plt>\n  404187:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n  40418c:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  404193:\t48 89 c7             \tmov    %rax,%rdi\n  404196:\te8 d5 ef ff ff       \tcallq  403170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  40419b:\t48 8d 85 20 fe ff ff \tlea    -0x1e0(%rbp),%rax\n  4041a2:\t48 89 c7             \tmov    %rax,%rdi\n  4041a5:\te8 ac 01 00 00       \tcallq  404356 <_ZN7libomdb10ConnectionD1Ev>\n  4041aa:\t89 d8                \tmov    %ebx,%eax\n  4041ac:\te9 b5 00 00 00       \tjmpq   404266 <main+0x406>\n  4041b1:\t48 89 c3             \tmov    %rax,%rbx\n  4041b4:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  4041bb:\t48 89 c7             \tmov    %rax,%rdi\n  4041be:\te8 41 01 00 00       \tcallq  404304 <_ZN7libomdb18ConnectionMetaDataD1Ev>\n  4041c3:\teb 78                \tjmp    40423d <main+0x3dd>\n  4041c5:\t48 89 c3             \tmov    %rax,%rbx\n  4041c8:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  4041cf:\t48 89 c7             \tmov    %rax,%rdi\n  4041d2:\te8 7f 01 00 00       \tcallq  404356 <_ZN7libomdb10ConnectionD1Ev>\n  4041d7:\teb 03                \tjmp    4041dc <main+0x37c>\n  4041d9:\t48 89 c3             \tmov    %rax,%rbx\n  4041dc:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  4041e3:\t48 89 c7             \tmov    %rax,%rdi\n  4041e6:\te8 85 ef ff ff       \tcallq  403170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  4041eb:\teb 50                \tjmp    40423d <main+0x3dd>\n  4041ed:\t48 89 c3             \tmov    %rax,%rbx\n  4041f0:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4041f7:\t48 89 c7             \tmov    %rax,%rdi\n  4041fa:\te8 05 01 00 00       \tcallq  404304 <_ZN7libomdb18ConnectionMetaDataD1Ev>\n  4041ff:\teb 3c                \tjmp    40423d <main+0x3dd>\n  404201:\t48 89 c3             \tmov    %rax,%rbx\n  404204:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  40420b:\t48 89 c7             \tmov    %rax,%rdi\n  40420e:\te8 5d ef ff ff       \tcallq  403170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  404213:\teb 28                \tjmp    40423d <main+0x3dd>\n  404215:\t48 89 c3             \tmov    %rax,%rbx\n  404218:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  40421c:\t48 89 c7             \tmov    %rax,%rdi\n  40421f:\te8 32 01 00 00       \tcallq  404356 <_ZN7libomdb10ConnectionD1Ev>\n  404224:\teb 03                \tjmp    404229 <main+0x3c9>\n  404226:\t48 89 c3             \tmov    %rax,%rbx\n  404229:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  404230:\t48 89 c7             \tmov    %rax,%rdi\n  404233:\te8 38 ef ff ff       \tcallq  403170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  404238:\teb 03                \tjmp    40423d <main+0x3dd>\n  40423a:\t48 89 c3             \tmov    %rax,%rbx\n  40423d:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  404244:\t48 89 c7             \tmov    %rax,%rdi\n  404247:\te8 24 ef ff ff       \tcallq  403170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  40424c:\t48 8d 85 20 fe ff ff \tlea    -0x1e0(%rbp),%rax\n  404253:\t48 89 c7             \tmov    %rax,%rdi\n  404256:\te8 fb 00 00 00       \tcallq  404356 <_ZN7libomdb10ConnectionD1Ev>\n  40425b:\t48 89 d8             \tmov    %rbx,%rax\n  40425e:\t48 89 c7             \tmov    %rax,%rdi\n  404261:\te8 ca f1 ff ff       \tcallq  403430 <_Unwind_Resume@plt>\n  404266:\t48 81 c4 f8 01 00 00 \tadd    $0x1f8,%rsp\n  40426d:\t5b                   \tpop    %rbx\n  40426e:\t5d                   \tpop    %rbp\n  40426f:\tc3                   \tretq   ", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  char v3;\n  int v4;\n  char v6[Number];\n  char v7[Number];\n  char v8[Number];\n  char v9[Number];\n  char v10[Number];\n  char v11[Number];\n  char v12[Number];\n  char v13[Number];\n  char v14;\n  libomdb Connection errorConnection((libomdb Connection *)v6);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  std operator<<<std char_traits<char>>();\n  std ostream operator<<();\n  std operator<<<std char_traits<char>>();\n  std ostream operator<<();\n  getInput[abi:cxx11]((__int64)v7);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  operator=();\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  while ((unsigned int)std __cxx11\n             basic_string<char, std char_traits<char>, std allocator<char>>\n                 compare()) {\n    if ((unsigned __int8)std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>>\n                empty() != Number) {\n      v14 = *(_BYTE *)std __cxx11\n                basic_string<char, std char_traits<char>, std allocator<char>>\n                at();\n      if (v14 == Number || v14 == Number) {\n        libomdb Connection getMetaData((libomdb Connection *)v8);\n        v3 = libomdb ConnectionMetaData isValid(\n                 (libomdb ConnectionMetaData *)v8) ^\n             Number;\n        libomdb ConnectionMetaData ~ConnectionMetaData(\n            (libomdb ConnectionMetaData *)v8);\n        if (v3) {\n          std operator<<<std char_traits<char>>();\n          std ostream operator<<();\n        } else {\n          std __cxx11\n              basic_string<char, std char_traits<char>, std allocator<char>>\n              basic_string();\n          libomdb Connection Connection((libomdb Connection *)v9,\n                                        (const libomdb Connection *)v6);\n          doQuery((__int64)v9);\n          libomdb Connection ~Connection((libomdb Connection *)v9);\n          std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> ~basic_string();\n        }\n      } else {\n        libomdb Connection getMetaData((libomdb Connection *)v10);\n        v4 = libomdb ConnectionMetaData isValid(\n                 (libomdb ConnectionMetaData *)v10) ^\n             Number;\n        libomdb ConnectionMetaData ~ConnectionMetaData(\n            (libomdb ConnectionMetaData *)v10);\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>>\n            basic_string();\n        if ((_BYTE)v4) {\n          doConnect((libomdb Connection *)v11);\n          libomdb Connection operator=(v6, v11);\n          libomdb Connection ~Connection((libomdb Connection *)v11);\n        } else {\n          libomdb Connection Connection((libomdb Connection *)v12,\n                                        (const libomdb Connection *)v6);\n          doCommand((__int64)v12);\n          libomdb Connection ~Connection((libomdb Connection *)v12);\n        }\n        std __cxx11 basic_string<char, std char_traits<char>,\n                                 std allocator<char>> ~basic_string();\n      }\n    }\n    getInput[abi:cxx11]((__int64)v13);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator=();\n    std __cxx11 basic_string<char, std char_traits<char>,\n                             std allocator<char>> ~basic_string();\n  }\n  std operator<<<std char_traits<char>>();\n  std ostream operator<<();\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  libomdb Connection ~Connection((libomdb Connection *)v6);\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  bool v3;\n  bool v4;\n  libomdb Connection <span class=\"supfact\">connection</span>;\n  std string <span class=\"supfact\">v7</span>;\n  libomdb ConnectionMetaData <span class=\"supfact\">v8</span>;\n  std string p_command;\n  libomdb Connection <span class=\"supfact\">p_connection</span>;\n  libomdb ConnectionMetaData <span class=\"supfact\">v11</span>;\n  libomdb Connection <span class=\"supfact\">v12</span>;\n  std string v13;\n  std string v14;\n  libomdb Connection <span class=\"supfact\">v15</span>;\n  std string <span class=\"supfact\">v16</span>;\n  char firstLetter;\n  libomdb Connection errorConnection(&<span class=\"supfact\">connection</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  std operator<<<std char_traits<char>>();\n  std ostream operator<<();\n  std operator<<<std char_traits<char>>();\n  std ostream operator<<();\n  getInput[abi:cxx11](&<span class=\"supfact\">v7</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  operator=();\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  while ((unsigned int)std __cxx11\n             basic_string<char, std char_traits<char>, std allocator<char>>\n                 compare()) {\n    if ((unsigned __int8)std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>>\n                empty() != Number) {\n      firstLetter =\n          *(_BYTE *)std __cxx11\n              basic_string<char, std char_traits<char>, std allocator<char>>\n              at();\n      if (firstLetter == Number || firstLetter == Number) {\n        libomdb Connection getMetaData(&<span class=\"supfact\">v8</span>,\n                                       &<span class=\"supfact\">connection</span>);\n        v3 = !libomdb ConnectionMetaData isValid(&<span class=\"supfact\">v8</span>);\n        libomdb ConnectionMetaData ~ConnectionMetaData(&<span class=\"supfact\">v8</span>);\n        if (v3) {\n          std operator<<<std char_traits<char>>();\n          std ostream operator<<();\n        } else {\n          std __cxx11\n              basic_string<char, std char_traits<char>, std allocator<char>>\n              basic_string();\n          libomdb Connection Connection(&<span class=\"supfact\">p_connection</span>,\n                                        &<span class=\"supfact\">connection</span>);\n          doQuery(&<span class=\"supfact\">p_connection</span>, &p_command);\n          libomdb Connection ~Connection(&<span class=\"supfact\">p_connection</span>);\n          std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> ~basic_string();\n        }\n      } else {\n        libomdb Connection getMetaData(&<span class=\"supfact\">v11</span>,\n                                       &<span class=\"supfact\">connection</span>);\n        v4 = !libomdb ConnectionMetaData isValid(&<span class=\"supfact\">v11</span>);\n        libomdb ConnectionMetaData ~ConnectionMetaData(&<span class=\"supfact\">v11</span>);\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>>\n            basic_string();\n        if (v4) {\n          doConnect(&<span class=\"supfact\">v12</span>, &v13);\n          libomdb Connection operator=(&<span class=\"supfact\">connection</span>,\n                                       &<span class=\"supfact\">v12</span>);\n          libomdb Connection ~Connection(&<span class=\"supfact\">v12</span>);\n        } else {\n          libomdb Connection Connection(&<span class=\"supfact\">v15</span>,\n                                        &<span class=\"supfact\">connection</span>);\n          doCommand(&<span class=\"supfact\">v15</span>, &v14);\n          libomdb Connection ~Connection(&<span class=\"supfact\">v15</span>);\n        }\n        std __cxx11 basic_string<char, std char_traits<char>,\n                                 std allocator<char>> ~basic_string();\n      }\n    }\n    getInput[abi:cxx11](&<span class=\"supfact\">v16</span>);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator=();\n    std __cxx11 basic_string<char, std char_traits<char>,\n                             std allocator<char>> ~basic_string();\n  }\n  std operator<<<std char_traits<char>>();\n  std ostream operator<<();\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  libomdb Connection ~Connection(&<span class=\"supfact\">connection</span>);\n  return Number;\n}", "var": [{"name": "v6", "type": "char[48]", "pred_name": "v6", "ref_name": "connection", "ref_type": "struct libomdb::Connection { libomdb::ConnectionMetaData m_metaData; uint16_t m_socket_fd; PADDING (6); }"}, {"name": "v7", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v7", "ref_name": "v7", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v8", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v8", "ref_name": "v8", "ref_type": "struct libomdb::ConnectionMetaData { std::string m_databaseName; bool m_isValid; PADDING (7); }"}, {"name": "v9", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v9", "ref_name": "p_connection", "ref_type": "struct libomdb::Connection { libomdb::ConnectionMetaData m_metaData; uint16_t m_socket_fd; PADDING (6); }"}, {"name": "v10", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v10", "ref_name": "v11", "ref_type": "struct libomdb::ConnectionMetaData { std::string m_databaseName; bool m_isValid; PADDING (7); }"}, {"name": "v11", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v11", "ref_name": "v12", "ref_type": "struct libomdb::Connection { libomdb::ConnectionMetaData m_metaData; uint16_t m_socket_fd; PADDING (6); }"}, {"name": "v12", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v12", "ref_name": "v15", "ref_type": "struct libomdb::Connection { libomdb::ConnectionMetaData m_metaData; uint16_t m_socket_fd; PADDING (6); }"}, {"name": "v13", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v13", "ref_name": "v16", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/33f35455b1fe115d969df859e721f3bb13452262aeb089bceae760dda224d47b", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Net/testsuite/obj/Linux/x86_64/debug_shared/HTTPRequestTest.o", "objdump": "0000000000003cf2 <_ZN15HTTPRequestTest12testInvalid3Ev>:\n    3cf2:\t55                   \tpush   %rbp\n    3cf3:\t48 89 e5             \tmov    %rsp,%rbp\n    3cf6:\t41 54                \tpush   %r12\n    3cf8:\t53                   \tpush   %rbx\n    3cf9:\t48 81 ec 90 02 00 00 \tsub    $0x290,%rsp\n    3d00:\t48 89 bd 68 fd ff ff \tmov    %rdi,-0x298(%rbp)\n    3d07:\t48 8d 45 bf          \tlea    -0x41(%rbp),%rax\n    3d0b:\t48 89 c7             \tmov    %rax,%rdi\n    3d0e:\te8 00 00 00 00       \tcallq  3d13 <_ZN15HTTPRequestTest12testInvalid3Ev+0x21>\n    3d13:\t48 8d 55 bf          \tlea    -0x41(%rbp),%rdx\n    3d17:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    3d1b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 3d22 <_ZN15HTTPRequestTest12testInvalid3Ev+0x30>\n    3d22:\t48 89 c7             \tmov    %rax,%rdi\n    3d25:\te8 00 00 00 00       \tcallq  3d2a <_ZN15HTTPRequestTest12testInvalid3Ev+0x38>\n    3d2a:\t48 8d 45 bf          \tlea    -0x41(%rbp),%rax\n    3d2e:\t48 89 c7             \tmov    %rax,%rdi\n    3d31:\te8 00 00 00 00       \tcallq  3d36 <_ZN15HTTPRequestTest12testInvalid3Ev+0x44>\n    3d36:\t48 8d 4d 90          \tlea    -0x70(%rbp),%rcx\n    3d3a:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n    3d41:\tba 08 00 00 00       \tmov    $0x8,%edx\n    3d46:\t48 89 ce             \tmov    %rcx,%rsi\n    3d49:\t48 89 c7             \tmov    %rax,%rdi\n    3d4c:\te8 00 00 00 00       \tcallq  3d51 <_ZN15HTTPRequestTest12testInvalid3Ev+0x5f>\n    3d51:\t48 8d 85 70 fd ff ff \tlea    -0x290(%rbp),%rax\n    3d58:\t48 89 c7             \tmov    %rax,%rdi\n    3d5b:\te8 00 00 00 00       \tcallq  3d60 <_ZN15HTTPRequestTest12testInvalid3Ev+0x6e>\n    3d60:\t48 8d 95 10 fe ff ff \tlea    -0x1f0(%rbp),%rdx\n    3d67:\t48 8d 85 70 fd ff ff \tlea    -0x290(%rbp),%rax\n    3d6e:\t48 89 d6             \tmov    %rdx,%rsi\n    3d71:\t48 89 c7             \tmov    %rax,%rdi\n    3d74:\te8 00 00 00 00       \tcallq  3d79 <_ZN15HTTPRequestTest12testInvalid3Ev+0x87>\n    3d79:\t48 8b 9d 68 fd ff ff \tmov    -0x298(%rbp),%rbx\n    3d80:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3d87 <_ZN15HTTPRequestTest12testInvalid3Ev+0x95>\n    3d87:\t8b 00                \tmov    (%rax),%eax\n    3d89:\t4c 63 e0             \tmovslq %eax,%r12\n    3d8c:\t48 8d 45 e7          \tlea    -0x19(%rbp),%rax\n    3d90:\t48 89 c7             \tmov    %rax,%rdi\n    3d93:\te8 00 00 00 00       \tcallq  3d98 <_ZN15HTTPRequestTest12testInvalid3Ev+0xa6>\n    3d98:\t48 8d 55 e7          \tlea    -0x19(%rbp),%rdx\n    3d9c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    3da0:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 3da7 <_ZN15HTTPRequestTest12testInvalid3Ev+0xb5>\n    3da7:\t48 89 c7             \tmov    %rax,%rdi\n    3daa:\te8 00 00 00 00       \tcallq  3daf <_ZN15HTTPRequestTest12testInvalid3Ev+0xbd>\n    3daf:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    3db3:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 3dba <_ZN15HTTPRequestTest12testInvalid3Ev+0xc8>\n    3dba:\t48 89 d1             \tmov    %rdx,%rcx\n    3dbd:\t4c 89 e2             \tmov    %r12,%rdx\n    3dc0:\t48 89 c6             \tmov    %rax,%rsi\n    3dc3:\t48 89 df             \tmov    %rbx,%rdi\n    3dc6:\te8 00 00 00 00       \tcallq  3dcb <_ZN15HTTPRequestTest12testInvalid3Ev+0xd9>\n    3dcb:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    3dcf:\t48 89 c7             \tmov    %rax,%rdi\n    3dd2:\te8 00 00 00 00       \tcallq  3dd7 <_ZN15HTTPRequestTest12testInvalid3Ev+0xe5>\n    3dd7:\t48 8d 45 e7          \tlea    -0x19(%rbp),%rax\n    3ddb:\t48 89 c7             \tmov    %rax,%rdi\n    3dde:\te8 00 00 00 00       \tcallq  3de3 <_ZN15HTTPRequestTest12testInvalid3Ev+0xf1>\n    3de3:\t48 8d 85 70 fd ff ff \tlea    -0x290(%rbp),%rax\n    3dea:\t48 89 c7             \tmov    %rax,%rdi\n    3ded:\te8 00 00 00 00       \tcallq  3df2 <_ZN15HTTPRequestTest12testInvalid3Ev+0x100>\n    3df2:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n    3df9:\t48 89 c7             \tmov    %rax,%rdi\n    3dfc:\te8 00 00 00 00       \tcallq  3e01 <_ZN15HTTPRequestTest12testInvalid3Ev+0x10f>\n    3e01:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    3e05:\t48 89 c7             \tmov    %rax,%rdi\n    3e08:\te8 00 00 00 00       \tcallq  3e0d <_ZN15HTTPRequestTest12testInvalid3Ev+0x11b>\n    3e0d:\te9 a6 00 00 00       \tjmpq   3eb8 <_ZN15HTTPRequestTest12testInvalid3Ev+0x1c6>\n    3e12:\t48 89 c3             \tmov    %rax,%rbx\n    3e15:\t48 8d 45 bf          \tlea    -0x41(%rbp),%rax\n    3e19:\t48 89 c7             \tmov    %rax,%rdi\n    3e1c:\te8 00 00 00 00       \tcallq  3e21 <_ZN15HTTPRequestTest12testInvalid3Ev+0x12f>\n    3e21:\t48 89 d8             \tmov    %rbx,%rax\n    3e24:\t48 89 c7             \tmov    %rax,%rdi\n    3e27:\te8 00 00 00 00       \tcallq  3e2c <_ZN15HTTPRequestTest12testInvalid3Ev+0x13a>\n    3e2c:\t49 89 c4             \tmov    %rax,%r12\n    3e2f:\t48 89 d3             \tmov    %rdx,%rbx\n    3e32:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    3e36:\t48 89 c7             \tmov    %rax,%rdi\n    3e39:\te8 00 00 00 00       \tcallq  3e3e <_ZN15HTTPRequestTest12testInvalid3Ev+0x14c>\n    3e3e:\teb 06                \tjmp    3e46 <_ZN15HTTPRequestTest12testInvalid3Ev+0x154>\n    3e40:\t49 89 c4             \tmov    %rax,%r12\n    3e43:\t48 89 d3             \tmov    %rdx,%rbx\n    3e46:\t48 8d 45 e7          \tlea    -0x19(%rbp),%rax\n    3e4a:\t48 89 c7             \tmov    %rax,%rdi\n    3e4d:\te8 00 00 00 00       \tcallq  3e52 <_ZN15HTTPRequestTest12testInvalid3Ev+0x160>\n    3e52:\t4c 89 e0             \tmov    %r12,%rax\n    3e55:\t48 89 da             \tmov    %rbx,%rdx\n    3e58:\teb 00                \tjmp    3e5a <_ZN15HTTPRequestTest12testInvalid3Ev+0x168>\n    3e5a:\t48 83 fa 01          \tcmp    $0x1,%rdx\n    3e5e:\t74 14                \tje     3e74 <_ZN15HTTPRequestTest12testInvalid3Ev+0x182>\n    3e60:\t48 89 c3             \tmov    %rax,%rbx\n    3e63:\t48 8d 85 70 fd ff ff \tlea    -0x290(%rbp),%rax\n    3e6a:\t48 89 c7             \tmov    %rax,%rdi\n    3e6d:\te8 00 00 00 00       \tcallq  3e72 <_ZN15HTTPRequestTest12testInvalid3Ev+0x180>\n    3e72:\teb 19                \tjmp    3e8d <_ZN15HTTPRequestTest12testInvalid3Ev+0x19b>\n    3e74:\t48 89 c7             \tmov    %rax,%rdi\n    3e77:\te8 00 00 00 00       \tcallq  3e7c <_ZN15HTTPRequestTest12testInvalid3Ev+0x18a>\n    3e7c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    3e80:\te8 00 00 00 00       \tcallq  3e85 <_ZN15HTTPRequestTest12testInvalid3Ev+0x193>\n    3e85:\te9 59 ff ff ff       \tjmpq   3de3 <_ZN15HTTPRequestTest12testInvalid3Ev+0xf1>\n    3e8a:\t48 89 c3             \tmov    %rax,%rbx\n    3e8d:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n    3e94:\t48 89 c7             \tmov    %rax,%rdi\n    3e97:\te8 00 00 00 00       \tcallq  3e9c <_ZN15HTTPRequestTest12testInvalid3Ev+0x1aa>\n    3e9c:\teb 03                \tjmp    3ea1 <_ZN15HTTPRequestTest12testInvalid3Ev+0x1af>\n    3e9e:\t48 89 c3             \tmov    %rax,%rbx\n    3ea1:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    3ea5:\t48 89 c7             \tmov    %rax,%rdi\n    3ea8:\te8 00 00 00 00       \tcallq  3ead <_ZN15HTTPRequestTest12testInvalid3Ev+0x1bb>\n    3ead:\t48 89 d8             \tmov    %rbx,%rax\n    3eb0:\t48 89 c7             \tmov    %rax,%rdi\n    3eb3:\te8 00 00 00 00       \tcallq  3eb8 <_ZN15HTTPRequestTest12testInvalid3Ev+0x1c6>\n    3eb8:\t48 81 c4 90 02 00 00 \tadd    $0x290,%rsp\n    3ebf:\t5b                   \tpop    %rbx\n    3ec0:\t41 5c                \tpop    %r12\n    3ec2:\t5d                   \tpop    %rbp\n    3ec3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall HTTPRequestTest testInvalid3(HTTPRequestTest *this) {\n  __int64 v1;\n  char v3[Number];\n  char v4[Number];\n  char v5[Number];\n  char v6;\n  char v7[Number];\n  char v8;\n  std allocator<char> allocator(&v6);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(v5, String, &v6);\n  std allocator<char> ~allocator(&v6);\n  std __cxx11\n      basic_istringstream<char, std char_traits<char>, std allocator<char>>\n      basic_istringstream(v4, v5, Number L);\n  Poco Net HTTPRequest HTTPRequest((Poco Net HTTPRequest *)v3);\n  Poco Net HTTPRequest read((Poco Net HTTPRequest *)v3, (std istream *)v4);\n  v1 = CppUnit CppUnitException CPPUNIT_UNKNOWNLINENUMBER;\n  std allocator<char> allocator(&v8);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(v7, String, &v8);\n  CppUnit TestCase fail(this, v7, v1,\n                        &CppUnit CppUnitException CPPUNIT_UNKNOWNFILENAME\n                        [abi:cxx11]);\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string(v7);\n  std allocator<char> ~allocator(&v8);\n  Poco Net HTTPRequest ~HTTPRequest((Poco Net HTTPRequest *)v3);\n  std __cxx11 basic_istringstream<char, std char_traits<char>,\n                                  std allocator<char>> ~basic_istringstream(v4);\n  return std __cxx11 basic_string<char, std char_traits<char>,\n                                  std allocator<char>> ~basic_string(v5);\n}", "code_t": "void __cdecl HTTPRequestTest testInvalid3(HTTPRequestTest *const this) {\n  __int64 v1;\n  char v2[Number];\n  char v3[Number];\n  std string <span class=\"supfact\">s</span>;\n  char v5;\n  char v6[Number];\n  char v7;\n  std allocator<char> allocator(&v5);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(&<span class=\"supfact\">s</span>, String, &v5);\n  std allocator<char> ~allocator(&v5);\n  std __cxx11\n      basic_istringstream<char, std char_traits<char>, std allocator<char>>\n      basic_istringstream(v3, &<span class=\"supfact\">s</span>, Number L);\n  Poco Net HTTPRequest HTTPRequest((Poco Net HTTPRequest *)v2);\n  Poco Net HTTPRequest read((Poco Net HTTPRequest *)v2, (std istream *)v3);\n  v1 = CppUnit CppUnitException CPPUNIT_UNKNOWNLINENUMBER;\n  std allocator<char> allocator(&v7);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(v6, String, &v7);\n  CppUnit TestCase fail(this, v6, v1,\n                        &CppUnit CppUnitException CPPUNIT_UNKNOWNFILENAME\n                        [abi:cxx11]);\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string(v6);\n  std allocator<char> ~allocator(&v7);\n  Poco Net HTTPRequest ~HTTPRequest((Poco Net HTTPRequest *)v2);\n  std __cxx11 basic_istringstream<char, std char_traits<char>,\n                                  std allocator<char>> ~basic_istringstream(v3);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">s</span>);\n}", "var": [{"name": "v5", "type": "char[47]", "pred_name": "v5", "ref_name": "s", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "islanderz", "repo_name": "ARDRoneSDK", "path": "islanderz/ARDRoneSDK/c12b797bb589749b507ffe6a0ed9932d2ae6edf3466c202b4fd379f6f7c13aab", "path_in_repo": "islanderz/ARDRoneSDK/ARDroneLib/Soft/Build/targets_versions/ardrone_lib_PROD_MODE_vlib_Linux_4.4.0-164-generic_GNU_Linux_usrcustomscriptsmock_pathgcc_9.2.0/ardrone_tool/Video/video_stage_latency_estimation.o", "objdump": "0000000000000084 <average>:\n  84:\t55                   \tpush   %rbp\n  85:\t48 89 e5             \tmov    %rsp,%rbp\n  88:\tf3 0f 11 45 dc       \tmovss  %xmm0,-0x24(%rbp)\n  8d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 93 <average+0xf>\n  93:\t48 98                \tcltq   \n  95:\tf3 0f 10 45 dc       \tmovss  -0x24(%rbp),%xmm0\n  9a:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n  a1:\t00 00 \n  a3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a9 <average+0x25>\n  a9:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  ac:\t48 63 c1             \tmovslq %ecx,%rax\n  af:\t48 69 c0 67 66 66 66 \timul   $0x66666667,%rax,%rax\n  b6:\t48 c1 e8 20          \tshr    $0x20,%rax\n  ba:\t89 c2                \tmov    %eax,%edx\n  bc:\tc1 fa 02             \tsar    $0x2,%edx\n  bf:\t89 c8                \tmov    %ecx,%eax\n  c1:\tc1 f8 1f             \tsar    $0x1f,%eax\n  c4:\t29 c2                \tsub    %eax,%edx\n  c6:\t89 d0                \tmov    %edx,%eax\n  c8:\tc1 e0 02             \tshl    $0x2,%eax\n  cb:\t01 d0                \tadd    %edx,%eax\n  cd:\t01 c0                \tadd    %eax,%eax\n  cf:\t29 c1                \tsub    %eax,%ecx\n  d1:\t89 ca                \tmov    %ecx,%edx\n  d3:\t89 15 00 00 00 00    \tmov    %edx,0x0(%rip)        # d9 <average+0x55>\n  d9:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  dd:\tf3 0f 11 45 f8       \tmovss  %xmm0,-0x8(%rbp)\n  e2:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # ea <average+0x66>\n  e9:\t00 \n  ea:\tf3 0f 11 45 f4       \tmovss  %xmm0,-0xc(%rbp)\n  ef:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  f6:\teb 52                \tjmp    14a <average+0xc6>\n  f8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  fb:\t48 98                \tcltq   \n  fd:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n 104:\t00 00 \n 106:\tf3 0f 10 4d f8       \tmovss  -0x8(%rbp),%xmm1\n 10b:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n 10f:\tf3 0f 11 45 f8       \tmovss  %xmm0,-0x8(%rbp)\n 114:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 117:\t48 98                \tcltq   \n 119:\tf3 0f 10 0c 85 00 00 \tmovss  0x0(,%rax,4),%xmm1\n 120:\t00 00 \n 122:\tf3 0f 10 45 f4       \tmovss  -0xc(%rbp),%xmm0\n 127:\t0f 2f c1             \tcomiss %xmm1,%xmm0\n 12a:\t76 10                \tjbe    13c <average+0xb8>\n 12c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 12f:\t48 98                \tcltq   \n 131:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n 138:\t00 00 \n 13a:\teb 05                \tjmp    141 <average+0xbd>\n 13c:\tf3 0f 10 45 f4       \tmovss  -0xc(%rbp),%xmm0\n 141:\tf3 0f 11 45 f4       \tmovss  %xmm0,-0xc(%rbp)\n 146:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 14a:\t83 7d fc 09          \tcmpl   $0x9,-0x4(%rbp)\n 14e:\t7e a8                \tjle    f8 <average+0x74>\n 150:\tf3 0f 10 45 f8       \tmovss  -0x8(%rbp),%xmm0\n 155:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # 15d <average+0xd9>\n 15c:\t00 \n 15d:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n 161:\tf3 0f 11 45 f8       \tmovss  %xmm0,-0x8(%rbp)\n 166:\tf3 0f 10 45 f4       \tmovss  -0xc(%rbp),%xmm0\n 16b:\tf3 0f 11 45 ec       \tmovss  %xmm0,-0x14(%rbp)\n 170:\tf3 0f 10 45 f8       \tmovss  -0x8(%rbp),%xmm0\n 175:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n 17a:\t48 8b 45 ec          \tmov    -0x14(%rbp),%rax\n 17e:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n 183:\t5d                   \tpop    %rbp\n 184:\tc3                   \tretq   ", "code_s": "double __fastcall average(float a1) {\n  int v1;\n  double v3;\n  int i;\n  *(float *)&p_11096[idx_11097] = a1;\n  idx_11097 = (idx_11097 + Number) % Number;\n  *(_QWORD *)&v3 = p_11096[Number];\n  for (i = Number; i <= Number; ++i) {\n    *((float *)&v3 + Number) = *(float *)&p_11096[i] + *((float *)&v3 + Number);\n    if (*(float *)&v3 <= *(float *)&p_11096[i])\n      v1 = LODWORD(v3);\n    else\n      v1 = p_11096[i];\n    LODWORD(v3) = v1;\n  }\n  *((float *)&v3 + Number) = *((float *)&v3 + Number) / Number;\n  return v3;\n}", "code_t": "stat_t __cdecl average(float f) {\n  float v1;\n  stat_t <span class=\"supfact\">fmin</span>;\n  int i;\n  p_11096[idx_11097] = f;\n  idx_11097 = (idx_11097 + Number) % Number;\n  <span class=\"supfact\">fmin</span> = (stat_t)LODWORD(p_11096[Number]);\n  for (i = Number; i <= Number; ++i) {\n    <span class=\"supfact\">fmin</span>.avg = p_11096[i] + <span class=\"supfact\">fmin</span>.avg;\n    if (<span class=\"supfact\">fmin</span>.min <= p_11096[i])\n      v1 = <span class=\"supfact\">fmin</span>.min;\n    else\n      v1 = p_11096[i];\n    <span class=\"supfact\">fmin</span>.min = v1;\n  }\n  <span class=\"supfact\">fmin</span>.avg = <span class=\"supfact\">fmin</span>.avg / Number;\n  return <span class=\"supfact\">fmin</span>;\n}", "var": [{"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "fmin", "ref_type": "struct stat_t { float min; float avg; }"}], "body_in_train": false}, {"repo_owner": "tcdog001", "repo_name": "lsdk_ar9531", "path": "tcdog001/lsdk_ar9531/757b6cf2fc94d0f558218cef36a99f239ba3f7265e4b813643a6f0337f91862f", "path_in_repo": "tcdog001/lsdk_ar9531/apps/athr-hostap/wpa_supplicant/dbus/dbus_new_helpers.o", "objdump": "0000000000000000 <fill_dict_with_properties>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n       8:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n       c:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n      10:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n      14:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n      18:\t4c 89 45 88          \tmov    %r8,-0x78(%rbp)\n      1c:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n      20:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      24:\te9 f2 00 00 00       \tjmpq   11b <fill_dict_with_properties+0x11b>\n      29:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      2d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n      31:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n      35:\tba 96 00 00 00       \tmov    $0x96,%edx\n      3a:\t48 89 ce             \tmov    %rcx,%rsi\n      3d:\t48 89 c7             \tmov    %rax,%rdi\n      40:\te8 00 00 00 00       \tcallq  45 <fill_dict_with_properties+0x45>\n      45:\t85 c0                \ttest   %eax,%eax\n      47:\t0f 85 c5 00 00 00    \tjne    112 <fill_dict_with_properties+0x112>\n      4d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      51:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n      55:\t48 85 c0             \ttest   %rax,%rax\n      58:\t0f 84 b7 00 00 00    \tje     115 <fill_dict_with_properties+0x115>\n      5e:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n      62:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n      66:\t48 89 d1             \tmov    %rdx,%rcx\n      69:\tba 00 00 00 00       \tmov    $0x0,%edx\n      6e:\tbe 65 00 00 00       \tmov    $0x65,%esi\n      73:\t48 89 c7             \tmov    %rax,%rdi\n      76:\te8 00 00 00 00       \tcallq  7b <fill_dict_with_properties+0x7b>\n      7b:\t85 c0                \ttest   %eax,%eax\n      7d:\t75 20                \tjne    9f <fill_dict_with_properties+0x9f>\n      7f:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n      83:\tba 00 00 00 00       \tmov    $0x0,%edx\n      88:\tbe 00 00 00 00       \tmov    $0x0,%esi\n      8d:\t48 89 c7             \tmov    %rax,%rdi\n      90:\te8 00 00 00 00       \tcallq  95 <fill_dict_with_properties+0x95>\n      95:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      9a:\te9 98 00 00 00       \tjmpq   137 <fill_dict_with_properties+0x137>\n      9f:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n      a3:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n      a7:\tbe 73 00 00 00       \tmov    $0x73,%esi\n      ac:\t48 89 c7             \tmov    %rax,%rdi\n      af:\te8 00 00 00 00       \tcallq  b4 <fill_dict_with_properties+0xb4>\n      b4:\t85 c0                \ttest   %eax,%eax\n      b6:\t75 1d                \tjne    d5 <fill_dict_with_properties+0xd5>\n      b8:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n      bc:\tba 00 00 00 00       \tmov    $0x0,%edx\n      c1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n      c6:\t48 89 c7             \tmov    %rax,%rdi\n      c9:\te8 00 00 00 00       \tcallq  ce <fill_dict_with_properties+0xce>\n      ce:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      d3:\teb 62                \tjmp    137 <fill_dict_with_properties+0x137>\n      d5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      d9:\t4c 8b 40 18          \tmov    0x18(%rax),%r8\n      dd:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n      e1:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n      e5:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n      e9:\t48 89 ce             \tmov    %rcx,%rsi\n      ec:\t48 89 c7             \tmov    %rax,%rdi\n      ef:\t41 ff d0             \tcallq  *%r8\n      f2:\t85 c0                \ttest   %eax,%eax\n      f4:\t75 07                \tjne    fd <fill_dict_with_properties+0xfd>\n      f6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      fb:\teb 3a                \tjmp    137 <fill_dict_with_properties+0x137>\n      fd:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n     101:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     105:\t48 89 d6             \tmov    %rdx,%rsi\n     108:\t48 89 c7             \tmov    %rax,%rdi\n     10b:\te8 00 00 00 00       \tcallq  110 <fill_dict_with_properties+0x110>\n     110:\teb 04                \tjmp    116 <fill_dict_with_properties+0x116>\n     112:\t90                   \tnop\n     113:\teb 01                \tjmp    116 <fill_dict_with_properties+0x116>\n     115:\t90                   \tnop\n     116:\t48 83 45 f8 28       \taddq   $0x28,-0x8(%rbp)\n     11b:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     120:\t74 10                \tje     132 <fill_dict_with_properties+0x132>\n     122:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     126:\t48 8b 00             \tmov    (%rax),%rax\n     129:\t48 85 c0             \ttest   %rax,%rax\n     12c:\t0f 85 f7 fe ff ff    \tjne    29 <fill_dict_with_properties+0x29>\n     132:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     137:\tc9                   \tleaveq \n     138:\tc3                   \tretq   ", "code_s": "__int64 __fastcall fill_dict_with_properties(__int64 a1, __int64 a2,\n                                             const char *a3, __int64 a4,\n                                             __int64 a5) {\n  char v9[Number];\n  __int64 i;\n  for (i = a2; i && *(_QWORD *)i; i += Number L) {\n    if (!strncmp(*(const char **)(i + Number), a3, Number) &&\n        *(_QWORD *)(i + Number)) {\n      if (!(unsigned int)dbus_message_iter_open_container(a1, Number L,\n                                                          Number L, v9) ||\n          !(unsigned int)dbus_message_iter_append_basic(v9, Number L, i)) {\n        dbus_set_error_const(a5, String, String);\n        return Number L;\n      }\n      if (!(*(unsigned int(__fastcall **)(char *, __int64, __int64))(\n              i + Number))(v9, a5, a4))\n        return Number L;\n      dbus_message_iter_close_container(a1, v9);\n    }\n  }\n  return Number L;\n}", "code_t": "dbus_bool_t __cdecl fill_dict_with_properties(\n    DBusMessageIter_0 *dict_iter, const wpa_dbus_property_desc *props,\n    const char *interface, void *user_data, DBusError_0 *error) {\n  DBusMessageIter_0 <span class=\"supfact\">entry_iter</span>;\n  const wpa_dbus_property_desc *dsc;\n  for (dsc = props; dsc && dsc->dbus_property; ++dsc) {\n    if (!strncmp(dsc->dbus_interface, interface, Number) && dsc->getter) {\n      if (!(unsigned int)dbus_message_iter_open_container(\n              dict_iter, Number L, Number L, &<span class=\"supfact\">entry_iter</span>) ||\n          !(unsigned int)dbus_message_iter_append_basic(\n              &<span class=\"supfact\">entry_iter</span>, Number L, dsc)) {\n        dbus_set_error_const(error, String, String);\n        return Number;\n      }\n      if (!dsc->getter(&<span class=\"supfact\">entry_iter</span>, error, user_data))\n        return Number;\n      dbus_message_iter_close_container(dict_iter, &<span class=\"supfact\">entry_iter</span>);\n    }\n  }\n  return Number;\n}", "var": [{"name": "v9", "type": "struct DBusMessageIter_0 { void * dummy1; void * dummy2; dbus_uint32_t dummy3; int dummy4; int dummy5; int dummy6; int dummy7; int dummy8; int dummy9; int dummy10; int dummy11; int pad1; void * pad2; void * pad3; }", "pred_name": "entry_iter", "ref_name": "entry_iter", "ref_type": "struct DBusMessageIter_0 { void * dummy1; void * dummy2; dbus_uint32_t dummy3; int dummy4; int dummy5; int dummy6; int dummy7; int dummy8; int dummy9; int dummy10; int dummy11; int pad1; void * pad2; void * pad3; }"}], "body_in_train": true}, {"repo_owner": "Elite-Project", "repo_name": "external_selinux", "path": "Elite-Project/external_selinux/e5408e38d76c76b2afea533c32681ebb510162d3baa655b7562638d79cdb3db1", "path_in_repo": "Elite-Project/external_selinux//libselinux/src/matchpathcon.o", "objdump": "0000000000001262 <selinux_lsetfilecon_default>:\n    1262:\t55                   \tpush   %rbp\n    1263:\t48 89 e5             \tmov    %rsp,%rbp\n    1266:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    126d:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n    1274:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n    127b:\t48 c7 85 58 ff ff ff \tmovq   $0x0,-0xa8(%rbp)\n    1282:\t00 00 00 00 \n    1286:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n    128d:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1294:\t48 89 d6             \tmov    %rdx,%rsi\n    1297:\t48 89 c7             \tmov    %rax,%rdi\n    129a:\te8 00 00 00 00       \tcallq  129f <selinux_lsetfilecon_default+0x3d>\n    129f:\t85 c0                \ttest   %eax,%eax\n    12a1:\t74 08                \tje     12ab <selinux_lsetfilecon_default+0x49>\n    12a3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    12a6:\te9 96 00 00 00       \tjmpq   1341 <selinux_lsetfilecon_default+0xdf>\n    12ab:\t64 48 8b 04 25 00 00 \tmov    %fs:0x0,%rax\n    12b2:\t00 00 \n    12b4:\t48 85 c0             \ttest   %rax,%rax\n    12b7:\t75 1a                \tjne    12d3 <selinux_lsetfilecon_default+0x71>\n    12b9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    12be:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    12c3:\te8 00 00 00 00       \tcallq  12c8 <selinux_lsetfilecon_default+0x66>\n    12c8:\t85 c0                \ttest   %eax,%eax\n    12ca:\t79 07                \tjns    12d3 <selinux_lsetfilecon_default+0x71>\n    12cc:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    12d1:\teb 6e                \tjmp    1341 <selinux_lsetfilecon_default+0xdf>\n    12d3:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n    12d9:\t89 c1                \tmov    %eax,%ecx\n    12db:\t64 48 8b 04 25 00 00 \tmov    %fs:0x0,%rax\n    12e2:\t00 00 \n    12e4:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    12eb:\t48 8d b5 58 ff ff ff \tlea    -0xa8(%rbp),%rsi\n    12f2:\t48 89 c7             \tmov    %rax,%rdi\n    12f5:\te8 00 00 00 00       \tcallq  12fa <selinux_lsetfilecon_default+0x98>\n    12fa:\t85 c0                \ttest   %eax,%eax\n    12fc:\t74 15                \tje     1313 <selinux_lsetfilecon_default+0xb1>\n    12fe:\te8 00 00 00 00       \tcallq  1303 <selinux_lsetfilecon_default+0xa1>\n    1303:\t8b 00                \tmov    (%rax),%eax\n    1305:\t83 f8 02             \tcmp    $0x2,%eax\n    1308:\t75 34                \tjne    133e <selinux_lsetfilecon_default+0xdc>\n    130a:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    1311:\teb 2b                \tjmp    133e <selinux_lsetfilecon_default+0xdc>\n    1313:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n    131a:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1321:\t48 89 d6             \tmov    %rdx,%rsi\n    1324:\t48 89 c7             \tmov    %rax,%rdi\n    1327:\te8 00 00 00 00       \tcallq  132c <selinux_lsetfilecon_default+0xca>\n    132c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    132f:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    1336:\t48 89 c7             \tmov    %rax,%rdi\n    1339:\te8 00 00 00 00       \tcallq  133e <selinux_lsetfilecon_default+0xdc>\n    133e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1341:\tc9                   \tleaveq \n    1342:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall selinux_lsetfilecon_default(const char *a1) {\n  __int64 v2;\n  struct stat buf;\n  unsigned int v4;\n  v4 = Number;\n  v2 = Number L;\n  if (lstat(a1, &buf))\n    return v4;\n  if (!hnd && (int)matchpathcon_init_prefix(Number L, Number L) < Number)\n    return Number;\n  if ((unsigned int)selabel_lookup_raw(hnd, &v2, a1, buf.st_mode)) {\n    if (*_errno_location() == Number)\n      v4 = Number;\n  } else {\n    v4 = lsetfilecon_raw(a1, v2);\n    freecon(v2);\n  }\n  return v4;\n}", "code_t": "int __cdecl selinux_lsetfilecon_default(const char *path) {\n  char *scontext;\n  stat <span class=\"supfact\">st</span>;\n  int rc;\n  rc = Number;\n  scontext = Number L;\n  if (lstat(path, &<span class=\"supfact\">st</span>))\n    return rc;\n  if (!hnd && matchpathcon_init_prefix(Number L, Number L) < Number)\n    return Number;\n  if ((unsigned int)selabel_lookup_raw(hnd, &scontext, path,\n                                       <span class=\"supfact\">st</span>.st_mode)) {\n    if (*_errno_location() == Number)\n      rc = Number;\n  } else {\n    rc = lsetfilecon_raw(path, scontext);\n    freecon(scontext);\n  }\n  return rc;\n}", "var": [{"name": "buf", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "st", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "davidgfnet", "repo_name": "micro-web-server", "path": "davidgfnet/micro-web-server/0f53e61d589ecff3c581020e4df8c45d9e02d5f5af8c96713775b9f06bcdd6a6", "path_in_repo": "davidgfnet/micro-web-server//mhttpsrvp", "objdump": "", "code_s": "ssize_t recvfrom(int fd, void *buf, size_t n, int flags, struct sockaddr *addr,\n                 socklen_t *addr_len) {\n  return recvfrom(fd, buf, n, flags, addr, addr_len);\n}", "code_t": "ssize_t recvfrom(int fd, void *buf, size_t n, int flags,\n                 struct sockaddr *<span class=\"supfact\">addr</span>, socklen_t *addr_len) {\n  return recvfrom(fd, buf, n, flags, <span class=\"supfact\">addr</span>, addr_len);\n}", "var": [{"name": "addr", "type": "struct sockaddr *", "pred_name": "addr", "ref_name": "addr", "ref_type": "struct sockaddr *"}], "body_in_train": true}, {"repo_owner": "autumn-wind", "repo_name": "stide_for_docker", "path": "autumn-wind/stide_for_docker/03bb4d9ae3061f4ccc85f4875047b519368d2b8111e815eb52b1f550049ac8f4", "path_in_repo": "autumn-wind/stide_for_docker//src/stream.o", "objdump": "0000000000000000 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  10:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  14:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  18:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  1c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  20:\t48 89 ce             \tmov    %rcx,%rsi\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_+0x2b>\n  2b:\tc9                   \tleaveq \n  2c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __uninitialized_copy<true>\n__uninit_copy<std move_iterator<int *>, int *>(__int64 a1, __int64 a2,\n                                               __int64 a3) {\n  return std copy<std move_iterator<int *>, int *>(a1, a2, a3);\n}", "code_t": "int *__cdecl std __uninitialized_copy<true>\n__uninit_copy<std move_iterator<int *>, int *>(\n    std move_iterator<int *> <span class=\"supfact\">__first</span>,\n    std move_iterator<int *> <span class=\"supfact\">__last</span>, int *__result) {\n  return std copy<std move_iterator<int *>, int *>(\n      <span class=\"supfact\">__first</span>, <span class=\"supfact\">__last</span>, __result);\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "__first", "ref_type": "struct std::move_iterator<int*> { int * _M_current; }"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "__last", "ref_type": "struct std::move_iterator<int*> { int * _M_current; }"}], "body_in_train": true}, {"repo_owner": "shenjianbing", "repo_name": "supermatch", "path": "shenjianbing/supermatch/22a2303f45630e9ed4fd65742aa51d219c3453b404963a117fdd6cad3eb2d448", "path_in_repo": "shenjianbing/supermatch/vlfeat-0.9.16/bin/glnxa64/objs/dsift.o", "objdump": "0000000000000af1 <vl_dsift_new_basic>:\n     af1:\t55                   \tpush   %rbp\n     af2:\t48 89 e5             \tmov    %rsp,%rbp\n     af5:\t48 83 ec 30          \tsub    $0x30,%rsp\n     af9:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n     afc:\t89 75 d8             \tmov    %esi,-0x28(%rbp)\n     aff:\t89 55 d4             \tmov    %edx,-0x2c(%rbp)\n     b02:\t89 4d d0             \tmov    %ecx,-0x30(%rbp)\n     b05:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n     b08:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     b0b:\t89 d6                \tmov    %edx,%esi\n     b0d:\t89 c7                \tmov    %eax,%edi\n     b0f:\te8 00 00 00 00       \tcallq  b14 <vl_dsift_new_basic+0x23>\n     b14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     b18:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     b1c:\t48 89 c7             \tmov    %rax,%rdi\n     b1f:\te8 59 f5 ff ff       \tcallq  7d <vl_dsift_get_geometry>\n     b24:\t48 89 c1             \tmov    %rax,%rcx\n     b27:\t48 8b 01             \tmov    (%rcx),%rax\n     b2a:\t48 8b 51 08          \tmov    0x8(%rcx),%rdx\n     b2e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     b32:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n     b36:\t8b 41 10             \tmov    0x10(%rcx),%eax\n     b39:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n     b3c:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     b3f:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     b42:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     b45:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n     b48:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     b4c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     b50:\t48 89 d6             \tmov    %rdx,%rsi\n     b53:\t48 89 c7             \tmov    %rax,%rdi\n     b56:\te8 69 f5 ff ff       \tcallq  c4 <vl_dsift_set_geometry>\n     b5b:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n     b5e:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n     b61:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     b65:\t89 ce                \tmov    %ecx,%esi\n     b67:\t48 89 c7             \tmov    %rax,%rdi\n     b6a:\te8 20 f5 ff ff       \tcallq  8f <vl_dsift_set_steps>\n     b6f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     b73:\tc9                   \tleaveq \n     b74:\tc3                   \tretq   ", "code_s": "int *__fastcall vl_dsift_new_basic(int a1, int a2, int a3, int a4) {\n  __int64 *v4;\n  __int64 v5;\n  __int64 v9[Number];\n  int v10;\n  int *v11;\n  v11 = vl_dsift_new(a1, a2);\n  v4 = (__int64 *)vl_dsift_get_geometry((__int64)v11);\n  v5 = v4[Number];\n  v9[Number] = *v4;\n  v9[Number] = __PAIR64__(a4, v5);\n  v10 = a4;\n  vl_dsift_set_geometry((__int64)v11, (__int64)v9);\n  vl_dsift_set_steps((__int64)v11, a3, a3);\n  return v11;\n}", "code_t": "VlDsiftFilter *__cdecl vl_dsift_new_basic(int imWidth, int imHeight, int step,\n                                          int binSize) {\n  const VlDsiftDescriptorGeometry *v4;\n  __int64 v5;\n  VlDsiftDescriptorGeometry <span class=\"supfact\">geom</span>;\n  VlDsiftFilter *self;\n  self = vl_dsift_new(imWidth, imHeight);\n  v4 = vl_dsift_get_geometry(self);\n  v5 = *(_QWORD *)&v4->numBinY;\n  *(_QWORD *)&<span class=\"supfact\">geom</span>.numBinT = *(_QWORD *)&v4->numBinT;\n  <span class=\"supfact\">geom</span>.numBinY = v5;\n  <span class=\"supfact\">geom</span>.binSizeX = binSize;\n  <span class=\"supfact\">geom</span>.binSizeY = binSize;\n  vl_dsift_set_geometry(self, &<span class=\"supfact\">geom</span>);\n  vl_dsift_set_steps(self, step, step);\n  return self;\n}", "var": [{"name": "v9", "type": "__unk__", "pred_name": "geom", "ref_name": "geom", "ref_type": "struct VlDsiftDescriptorGeometry { int numBinT; int numBinX; int numBinY; int binSizeX; int binSizeY; }"}], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/1ccdc7a16e0460c308f33b23061c7204da58cf8e87ec9292898ab638c5302fd0", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_l.o", "objdump": "0000000000011c6b <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring>:\n   11c6b:\t55                   \tpush   %rbp\n   11c6c:\t48 89 e5             \tmov    %rsp,%rbp\n   11c6f:\t53                   \tpush   %rbx\n   11c70:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n   11c77:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n   11c7b:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n   11c7f:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n   11c86:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   11c8a:\t48 89 c7             \tmov    %rax,%rdi\n   11c8d:\te8 00 00 00 00       \tcallq  11c92 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n   11c92:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11c99:\t00 \n   11c9a:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   11ca1:\t00 \n   11ca2:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n   11ca9:\t00 \n   11caa:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   11cb1:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n   11cb5:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n   11cb9:\tba 00 00 00 00       \tmov    $0x0,%edx\n   11cbe:\t48 89 ce             \tmov    %rcx,%rsi\n   11cc1:\t48 89 c7             \tmov    %rax,%rdi\n   11cc4:\te8 00 00 00 00       \tcallq  11cc9 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x5e>\n   11cc9:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   11ccd:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   11cd4:\t00 \n   11cd5:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11cdc:\t00 \n   11cdd:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   11ce4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   11ce8:\t41 b8 2f 00 00 00    \tmov    $0x2f,%r8d\n   11cee:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n   11cf3:\tba 00 00 00 00       \tmov    $0x0,%edx\n   11cf8:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   11cfd:\t48 89 c7             \tmov    %rax,%rdi\n   11d00:\te8 00 00 00 00       \tcallq  11d05 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x9a>\n   11d05:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   11d09:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11d10:\t00 \n   11d11:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11d15:\tba 30 00 00 00       \tmov    $0x30,%edx\n   11d1a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   11d1f:\t48 89 c7             \tmov    %rax,%rdi\n   11d22:\te8 00 00 00 00       \tcallq  11d27 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0xbc>\n   11d27:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11d2b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11d2f:\t8b 00                \tmov    (%rax),%eax\n   11d31:\t83 e0 01             \tand    $0x1,%eax\n   11d34:\t89 c1                \tmov    %eax,%ecx\n   11d36:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11d3a:\tba 31 00 00 00       \tmov    $0x31,%edx\n   11d3f:\t89 ce                \tmov    %ecx,%esi\n   11d41:\t48 89 c7             \tmov    %rax,%rdi\n   11d44:\te8 00 00 00 00       \tcallq  11d49 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0xde>\n   11d49:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11d4d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   11d51:\t41 b8 32 00 00 00    \tmov    $0x32,%r8d\n   11d57:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n   11d5c:\tba 02 00 00 00       \tmov    $0x2,%edx\n   11d61:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   11d66:\t48 89 c7             \tmov    %rax,%rdi\n   11d69:\te8 00 00 00 00       \tcallq  11d6e <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x103>\n   11d6e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   11d72:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11d79:\t00 \n   11d7a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11d7e:\t8b 00                \tmov    (%rax),%eax\n   11d80:\t83 e0 02             \tand    $0x2,%eax\n   11d83:\t89 c1                \tmov    %eax,%ecx\n   11d85:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11d89:\tba 01 00 00 00       \tmov    $0x1,%edx\n   11d8e:\t89 ce                \tmov    %ecx,%esi\n   11d90:\t48 89 c7             \tmov    %rax,%rdi\n   11d93:\te8 00 00 00 00       \tcallq  11d98 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x12d>\n   11d98:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11d9c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11da0:\tba 02 00 00 00       \tmov    $0x2,%edx\n   11da5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   11daa:\t48 89 c7             \tmov    %rax,%rdi\n   11dad:\te8 00 00 00 00       \tcallq  11db2 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x147>\n   11db2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11db6:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n   11dbd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   11dc1:\t49 89 d1             \tmov    %rdx,%r9\n   11dc4:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   11dca:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n   11dcf:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   11dd4:\tbe 33 00 00 00       \tmov    $0x33,%esi\n   11dd9:\t48 89 c7             \tmov    %rax,%rdi\n   11ddc:\te8 00 00 00 00       \tcallq  11de1 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x176>\n   11de1:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   11de5:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11dec:\t00 \n   11ded:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   11df1:\t41 b8 08 00 00 00    \tmov    $0x8,%r8d\n   11df7:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   11dfc:\tba 08 00 00 00       \tmov    $0x8,%edx\n   11e01:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   11e06:\t48 89 c7             \tmov    %rax,%rdi\n   11e09:\te8 00 00 00 00       \tcallq  11e0e <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x1a3>\n   11e0e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   11e12:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11e19:\t00 \n   11e1a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11e1e:\tba 01 00 00 00       \tmov    $0x1,%edx\n   11e23:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   11e28:\t48 89 c7             \tmov    %rax,%rdi\n   11e2b:\te8 00 00 00 00       \tcallq  11e30 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x1c5>\n   11e30:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11e34:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11e38:\t8b 00                \tmov    (%rax),%eax\n   11e3a:\t83 e0 08             \tand    $0x8,%eax\n   11e3d:\t89 c1                \tmov    %eax,%ecx\n   11e3f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11e43:\tba 02 00 00 00       \tmov    $0x2,%edx\n   11e48:\t89 ce                \tmov    %ecx,%esi\n   11e4a:\t48 89 c7             \tmov    %rax,%rdi\n   11e4d:\te8 00 00 00 00       \tcallq  11e52 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x1e7>\n   11e52:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11e56:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   11e5a:\t41 b8 0a 00 00 00    \tmov    $0xa,%r8d\n   11e60:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n   11e65:\tba 30 00 00 00       \tmov    $0x30,%edx\n   11e6a:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   11e6f:\t48 89 c7             \tmov    %rax,%rdi\n   11e72:\te8 00 00 00 00       \tcallq  11e77 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x20c>\n   11e77:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   11e7b:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11e82:\t00 \n   11e83:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11e87:\tba 11 00 00 00       \tmov    $0x11,%edx\n   11e8c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   11e91:\t48 89 c7             \tmov    %rax,%rdi\n   11e94:\te8 00 00 00 00       \tcallq  11e99 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x22e>\n   11e99:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11e9d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11ea1:\t8b 00                \tmov    (%rax),%eax\n   11ea3:\t83 e0 10             \tand    $0x10,%eax\n   11ea6:\t89 c1                \tmov    %eax,%ecx\n   11ea8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11eac:\tba 12 00 00 00       \tmov    $0x12,%edx\n   11eb1:\t89 ce                \tmov    %ecx,%esi\n   11eb3:\t48 89 c7             \tmov    %rax,%rdi\n   11eb6:\te8 00 00 00 00       \tcallq  11ebb <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x250>\n   11ebb:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11ebf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11ec3:\t8b 00                \tmov    (%rax),%eax\n   11ec5:\t83 e0 20             \tand    $0x20,%eax\n   11ec8:\t89 c1                \tmov    %eax,%ecx\n   11eca:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11ece:\tba 15 00 00 00       \tmov    $0x15,%edx\n   11ed3:\t89 ce                \tmov    %ecx,%esi\n   11ed5:\t48 89 c7             \tmov    %rax,%rdi\n   11ed8:\te8 00 00 00 00       \tcallq  11edd <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x272>\n   11edd:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11ee1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11ee5:\t8b 00                \tmov    (%rax),%eax\n   11ee7:\t83 e0 30             \tand    $0x30,%eax\n   11eea:\t89 c1                \tmov    %eax,%ecx\n   11eec:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11ef0:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n   11ef5:\t89 ce                \tmov    %ecx,%esi\n   11ef7:\t48 89 c7             \tmov    %rax,%rdi\n   11efa:\te8 00 00 00 00       \tcallq  11eff <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x294>\n   11eff:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11f03:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   11f07:\t41 b8 0b 00 00 00    \tmov    $0xb,%r8d\n   11f0d:\tb9 c0 00 00 00       \tmov    $0xc0,%ecx\n   11f12:\tba c0 00 00 00       \tmov    $0xc0,%edx\n   11f17:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   11f1c:\t48 89 c7             \tmov    %rax,%rdi\n   11f1f:\te8 00 00 00 00       \tcallq  11f24 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x2b9>\n   11f24:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   11f28:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11f2f:\t00 \n   11f30:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11f34:\t8b 00                \tmov    (%rax),%eax\n   11f36:\t25 c0 00 00 00       \tand    $0xc0,%eax\n   11f3b:\t89 c1                \tmov    %eax,%ecx\n   11f3d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11f41:\tba 22 00 00 00       \tmov    $0x22,%edx\n   11f46:\t89 ce                \tmov    %ecx,%esi\n   11f48:\t48 89 c7             \tmov    %rax,%rdi\n   11f4b:\te8 00 00 00 00       \tcallq  11f50 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x2e5>\n   11f50:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11f54:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11f58:\t8b 00                \tmov    (%rax),%eax\n   11f5a:\t25 80 00 00 00       \tand    $0x80,%eax\n   11f5f:\t89 c1                \tmov    %eax,%ecx\n   11f61:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11f65:\tba 25 00 00 00       \tmov    $0x25,%edx\n   11f6a:\t89 ce                \tmov    %ecx,%esi\n   11f6c:\t48 89 c7             \tmov    %rax,%rdi\n   11f6f:\te8 00 00 00 00       \tcallq  11f74 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x309>\n   11f74:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11f78:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11f7c:\t8b 00                \tmov    (%rax),%eax\n   11f7e:\t83 e0 40             \tand    $0x40,%eax\n   11f81:\t89 c1                \tmov    %eax,%ecx\n   11f83:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11f87:\tba 28 00 00 00       \tmov    $0x28,%edx\n   11f8c:\t89 ce                \tmov    %ecx,%esi\n   11f8e:\t48 89 c7             \tmov    %rax,%rdi\n   11f91:\te8 00 00 00 00       \tcallq  11f96 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x32b>\n   11f96:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11f9a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11f9e:\tba 2a 00 00 00       \tmov    $0x2a,%edx\n   11fa3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   11fa8:\t48 89 c7             \tmov    %rax,%rdi\n   11fab:\te8 00 00 00 00       \tcallq  11fb0 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x345>\n   11fb0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11fb4:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n   11fb8:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n   11fbc:\tba 00 00 00 00       \tmov    $0x0,%edx\n   11fc1:\t48 89 ce             \tmov    %rcx,%rsi\n   11fc4:\t48 89 c7             \tmov    %rax,%rdi\n   11fc7:\te8 00 00 00 00       \tcallq  11fcc <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x361>\n   11fcc:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   11fd0:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   11fd7:\t00 \n   11fd8:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11fdf:\t00 \n   11fe0:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   11fe7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   11feb:\t41 b8 07 00 00 00    \tmov    $0x7,%r8d\n   11ff1:\tb9 03 00 00 00       \tmov    $0x3,%ecx\n   11ff6:\tba 03 00 00 00       \tmov    $0x3,%edx\n   11ffb:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   12000:\t48 89 c7             \tmov    %rax,%rdi\n   12003:\te8 00 00 00 00       \tcallq  12008 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x39d>\n   12008:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   1200c:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12013:\t00 \n   12014:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12018:\t8b 00                \tmov    (%rax),%eax\n   1201a:\t83 e0 02             \tand    $0x2,%eax\n   1201d:\t89 c1                \tmov    %eax,%ecx\n   1201f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12023:\tba 4a 00 00 00       \tmov    $0x4a,%edx\n   12028:\t89 ce                \tmov    %ecx,%esi\n   1202a:\t48 89 c7             \tmov    %rax,%rdi\n   1202d:\te8 00 00 00 00       \tcallq  12032 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x3c7>\n   12032:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   12036:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1203a:\t8b 00                \tmov    (%rax),%eax\n   1203c:\t83 e0 03             \tand    $0x3,%eax\n   1203f:\t89 c1                \tmov    %eax,%ecx\n   12041:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12045:\tba 4d 00 00 00       \tmov    $0x4d,%edx\n   1204a:\t89 ce                \tmov    %ecx,%esi\n   1204c:\t48 89 c7             \tmov    %rax,%rdi\n   1204f:\te8 00 00 00 00       \tcallq  12054 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x3e9>\n   12054:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   12058:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1205c:\t8b 00                \tmov    (%rax),%eax\n   1205e:\t83 e0 01             \tand    $0x1,%eax\n   12061:\t89 c1                \tmov    %eax,%ecx\n   12063:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12067:\tba 4f 00 00 00       \tmov    $0x4f,%edx\n   1206c:\t89 ce                \tmov    %ecx,%esi\n   1206e:\t48 89 c7             \tmov    %rax,%rdi\n   12071:\te8 00 00 00 00       \tcallq  12076 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x40b>\n   12076:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   1207a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1207e:\tba 51 00 00 00       \tmov    $0x51,%edx\n   12083:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   12088:\t48 89 c7             \tmov    %rax,%rdi\n   1208b:\te8 00 00 00 00       \tcallq  12090 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x425>\n   12090:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   12094:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12098:\t41 b8 6e 00 00 00    \tmov    $0x6e,%r8d\n   1209e:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n   120a3:\tba 04 00 00 00       \tmov    $0x4,%edx\n   120a8:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   120ad:\t48 89 c7             \tmov    %rax,%rdi\n   120b0:\te8 00 00 00 00       \tcallq  120b5 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x44a>\n   120b5:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   120b9:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   120c0:\t00 \n   120c1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   120c5:\t8b 00                \tmov    (%rax),%eax\n   120c7:\t83 e0 04             \tand    $0x4,%eax\n   120ca:\t89 c1                \tmov    %eax,%ecx\n   120cc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   120d0:\tba 01 00 00 00       \tmov    $0x1,%edx\n   120d5:\t89 ce                \tmov    %ecx,%esi\n   120d7:\t48 89 c7             \tmov    %rax,%rdi\n   120da:\te8 00 00 00 00       \tcallq  120df <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x474>\n   120df:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   120e3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   120e7:\tba 02 00 00 00       \tmov    $0x2,%edx\n   120ec:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   120f1:\t48 89 c7             \tmov    %rax,%rdi\n   120f4:\te8 00 00 00 00       \tcallq  120f9 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x48e>\n   120f9:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   120fd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12101:\t41 b8 6e 00 00 00    \tmov    $0x6e,%r8d\n   12107:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   1210c:\tba 08 00 00 00       \tmov    $0x8,%edx\n   12111:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   12116:\t48 89 c7             \tmov    %rax,%rdi\n   12119:\te8 00 00 00 00       \tcallq  1211e <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x4b3>\n   1211e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   12122:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12129:\t00 \n   1212a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1212e:\t8b 00                \tmov    (%rax),%eax\n   12130:\t83 e0 08             \tand    $0x8,%eax\n   12133:\t89 c1                \tmov    %eax,%ecx\n   12135:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12139:\tba 01 00 00 00       \tmov    $0x1,%edx\n   1213e:\t89 ce                \tmov    %ecx,%esi\n   12140:\t48 89 c7             \tmov    %rax,%rdi\n   12143:\te8 00 00 00 00       \tcallq  12148 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x4dd>\n   12148:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   1214c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12150:\tba 02 00 00 00       \tmov    $0x2,%edx\n   12155:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   1215a:\t48 89 c7             \tmov    %rax,%rdi\n   1215d:\te8 00 00 00 00       \tcallq  12162 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x4f7>\n   12162:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   12166:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1216a:\t41 b8 05 00 00 00    \tmov    $0x5,%r8d\n   12170:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n   12175:\tba 30 00 00 00       \tmov    $0x30,%edx\n   1217a:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   1217f:\t48 89 c7             \tmov    %rax,%rdi\n   12182:\te8 00 00 00 00       \tcallq  12187 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x51c>\n   12187:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   1218b:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12192:\t00 \n   12193:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12197:\t8b 00                \tmov    (%rax),%eax\n   12199:\t83 e0 30             \tand    $0x30,%eax\n   1219c:\t89 c1                \tmov    %eax,%ecx\n   1219e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   121a2:\tba 00 00 00 00       \tmov    $0x0,%edx\n   121a7:\t89 ce                \tmov    %ecx,%esi\n   121a9:\t48 89 c7             \tmov    %rax,%rdi\n   121ac:\te8 00 00 00 00       \tcallq  121b1 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x546>\n   121b1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   121b5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   121b9:\t8b 00                \tmov    (%rax),%eax\n   121bb:\t83 e0 20             \tand    $0x20,%eax\n   121be:\t89 c1                \tmov    %eax,%ecx\n   121c0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   121c4:\tba 00 00 00 00       \tmov    $0x0,%edx\n   121c9:\t89 ce                \tmov    %ecx,%esi\n   121cb:\t48 89 c7             \tmov    %rax,%rdi\n   121ce:\te8 00 00 00 00       \tcallq  121d3 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x568>\n   121d3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   121d7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   121db:\t8b 00                \tmov    (%rax),%eax\n   121dd:\t83 e0 10             \tand    $0x10,%eax\n   121e0:\t89 c1                \tmov    %eax,%ecx\n   121e2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   121e6:\tba 00 00 00 00       \tmov    $0x0,%edx\n   121eb:\t89 ce                \tmov    %ecx,%esi\n   121ed:\t48 89 c7             \tmov    %rax,%rdi\n   121f0:\te8 00 00 00 00       \tcallq  121f5 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x58a>\n   121f5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   121f9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   121fd:\tba 00 00 00 00       \tmov    $0x0,%edx\n   12202:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   12207:\t48 89 c7             \tmov    %rax,%rdi\n   1220a:\te8 00 00 00 00       \tcallq  1220f <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x5a4>\n   1220f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   12213:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12217:\t41 b8 40 00 00 00    \tmov    $0x40,%r8d\n   1221d:\tb9 c0 00 00 00       \tmov    $0xc0,%ecx\n   12222:\tba 00 00 00 00       \tmov    $0x0,%edx\n   12227:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   1222c:\t48 89 c7             \tmov    %rax,%rdi\n   1222f:\te8 00 00 00 00       \tcallq  12234 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x5c9>\n   12234:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   12238:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   1223f:\t00 \n   12240:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12244:\tba 41 00 00 00       \tmov    $0x41,%edx\n   12249:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   1224e:\t48 89 c7             \tmov    %rax,%rdi\n   12251:\te8 00 00 00 00       \tcallq  12256 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x5eb>\n   12256:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   1225a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1225e:\t8b 00                \tmov    (%rax),%eax\n   12260:\t25 80 00 00 00       \tand    $0x80,%eax\n   12265:\t89 c1                \tmov    %eax,%ecx\n   12267:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1226b:\tba 41 00 00 00       \tmov    $0x41,%edx\n   12270:\t89 ce                \tmov    %ecx,%esi\n   12272:\t48 89 c7             \tmov    %rax,%rdi\n   12275:\te8 00 00 00 00       \tcallq  1227a <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x60f>\n   1227a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   1227e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12282:\t8b 00                \tmov    (%rax),%eax\n   12284:\t83 e0 40             \tand    $0x40,%eax\n   12287:\t89 c1                \tmov    %eax,%ecx\n   12289:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1228d:\tba 41 00 00 00       \tmov    $0x41,%edx\n   12292:\t89 ce                \tmov    %ecx,%esi\n   12294:\t48 89 c7             \tmov    %rax,%rdi\n   12297:\te8 00 00 00 00       \tcallq  1229c <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x631>\n   1229c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   122a0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   122a4:\t8b 00                \tmov    (%rax),%eax\n   122a6:\t25 c0 00 00 00       \tand    $0xc0,%eax\n   122ab:\t89 c1                \tmov    %eax,%ecx\n   122ad:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   122b1:\tba 42 00 00 00       \tmov    $0x42,%edx\n   122b6:\t89 ce                \tmov    %ecx,%esi\n   122b8:\t48 89 c7             \tmov    %rax,%rdi\n   122bb:\te8 00 00 00 00       \tcallq  122c0 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x655>\n   122c0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   122c4:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n   122c8:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n   122cc:\tba 00 00 00 00       \tmov    $0x0,%edx\n   122d1:\t48 89 ce             \tmov    %rcx,%rsi\n   122d4:\t48 89 c7             \tmov    %rax,%rdi\n   122d7:\te8 00 00 00 00       \tcallq  122dc <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x671>\n   122dc:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   122e0:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   122e7:\t00 \n   122e8:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   122ef:\t00 \n   122f0:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   122f7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   122fb:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   12301:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n   12306:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   1230b:\tbe 3b 00 00 00       \tmov    $0x3b,%esi\n   12310:\t48 89 c7             \tmov    %rax,%rdi\n   12313:\te8 00 00 00 00       \tcallq  12318 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x6ad>\n   12318:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   1231c:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12323:\t00 \n   12324:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12328:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   1232e:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n   12333:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   12338:\tbe 3c 00 00 00       \tmov    $0x3c,%esi\n   1233d:\t48 89 c7             \tmov    %rax,%rdi\n   12340:\te8 00 00 00 00       \tcallq  12345 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x6da>\n   12345:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   12349:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12350:\t00 \n   12351:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12355:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   1235b:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   12360:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   12365:\tbe 09 00 00 00       \tmov    $0x9,%esi\n   1236a:\t48 89 c7             \tmov    %rax,%rdi\n   1236d:\te8 00 00 00 00       \tcallq  12372 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x707>\n   12372:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   12376:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   1237d:\t00 \n   1237e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12382:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   12388:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n   1238d:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   12392:\tbe 3b 00 00 00       \tmov    $0x3b,%esi\n   12397:\t48 89 c7             \tmov    %rax,%rdi\n   1239a:\te8 00 00 00 00       \tcallq  1239f <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x734>\n   1239f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   123a3:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   123aa:\t00 \n   123ab:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   123af:\t8b 40 28             \tmov    0x28(%rax),%eax\n   123b2:\t83 c8 02             \tor     $0x2,%eax\n   123b5:\t89 c2                \tmov    %eax,%edx\n   123b7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   123bb:\t89 50 28             \tmov    %edx,0x28(%rax)\n   123be:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   123c2:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n   123c6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   123ca:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   123d0:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n   123d5:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   123da:\tbe 3c 00 00 00       \tmov    $0x3c,%esi\n   123df:\t48 89 c7             \tmov    %rax,%rdi\n   123e2:\te8 00 00 00 00       \tcallq  123e7 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x77c>\n   123e7:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   123eb:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   123f2:\t00 \n   123f3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   123f7:\t8b 40 28             \tmov    0x28(%rax),%eax\n   123fa:\t83 c8 02             \tor     $0x2,%eax\n   123fd:\t89 c2                \tmov    %eax,%edx\n   123ff:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12403:\t89 50 28             \tmov    %edx,0x28(%rax)\n   12406:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1240a:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n   1240e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12412:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   12418:\tb9 80 00 00 00       \tmov    $0x80,%ecx\n   1241d:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   12422:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n   12427:\t48 89 c7             \tmov    %rax,%rdi\n   1242a:\te8 00 00 00 00       \tcallq  1242f <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x7c4>\n   1242f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   12433:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   1243a:\t00 \n   1243b:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n   1243f:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n   12443:\tba 00 00 00 00       \tmov    $0x0,%edx\n   12448:\t48 89 ce             \tmov    %rcx,%rsi\n   1244b:\t48 89 c7             \tmov    %rax,%rdi\n   1244e:\te8 00 00 00 00       \tcallq  12453 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x7e8>\n   12453:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   12457:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   1245e:\t00 \n   1245f:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12466:\t00 \n   12467:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   1246e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12472:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   12478:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n   1247d:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   12482:\tbe 27 00 00 00       \tmov    $0x27,%esi\n   12487:\t48 89 c7             \tmov    %rax,%rdi\n   1248a:\te8 00 00 00 00       \tcallq  1248f <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x824>\n   1248f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   12493:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   1249a:\t00 \n   1249b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1249f:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   124a5:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n   124aa:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   124af:\tbe 1e 00 00 00       \tmov    $0x1e,%esi\n   124b4:\t48 89 c7             \tmov    %rax,%rdi\n   124b7:\te8 00 00 00 00       \tcallq  124bc <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x851>\n   124bc:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   124c0:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   124c7:\t00 \n   124c8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   124cc:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   124d2:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n   124d7:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   124dc:\tbe 11 00 00 00       \tmov    $0x11,%esi\n   124e1:\t48 89 c7             \tmov    %rax,%rdi\n   124e4:\te8 00 00 00 00       \tcallq  124e9 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x87e>\n   124e9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   124ed:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   124f4:\t00 \n   124f5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   124f9:\tc6 40 2c 04          \tmovb   $0x4,0x2c(%rax)\n   124fd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12501:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   12507:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   1250c:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   12511:\tbe 12 00 00 00       \tmov    $0x12,%esi\n   12516:\t48 89 c7             \tmov    %rax,%rdi\n   12519:\te8 00 00 00 00       \tcallq  1251e <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x8b3>\n   1251e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   12522:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12529:\t00 \n   1252a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1252e:\tc6 40 2c 04          \tmovb   $0x4,0x2c(%rax)\n   12532:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n   12536:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n   1253a:\tba 00 00 00 00       \tmov    $0x0,%edx\n   1253f:\t48 89 ce             \tmov    %rcx,%rsi\n   12542:\t48 89 c7             \tmov    %rax,%rdi\n   12545:\te8 00 00 00 00       \tcallq  1254a <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x8df>\n   1254a:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   1254e:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   12555:\t00 \n   12556:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   1255d:\t00 \n   1255e:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   12565:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12569:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   1256f:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n   12574:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   12579:\tbe 2f 00 00 00       \tmov    $0x2f,%esi\n   1257e:\t48 89 c7             \tmov    %rax,%rdi\n   12581:\te8 00 00 00 00       \tcallq  12586 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x91b>\n   12586:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   1258a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12591:\t00 \n   12592:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12596:\tc6 80 f0 01 00 00 04 \tmovb   $0x4,0x1f0(%rax)\n   1259d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   125a1:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   125a7:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n   125ac:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   125b1:\tbe 30 00 00 00       \tmov    $0x30,%esi\n   125b6:\t48 89 c7             \tmov    %rax,%rdi\n   125b9:\te8 00 00 00 00       \tcallq  125be <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x953>\n   125be:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   125c2:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   125c9:\t00 \n   125ca:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   125ce:\tc6 80 f0 01 00 00 04 \tmovb   $0x4,0x1f0(%rax)\n   125d5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   125d9:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   125df:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n   125e4:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   125e9:\tbe 31 00 00 00       \tmov    $0x31,%esi\n   125ee:\t48 89 c7             \tmov    %rax,%rdi\n   125f1:\te8 00 00 00 00       \tcallq  125f6 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x98b>\n   125f6:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   125fa:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12601:\t00 \n   12602:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12606:\tc6 80 f0 01 00 00 04 \tmovb   $0x4,0x1f0(%rax)\n   1260d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12611:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   12617:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   1261c:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   12621:\tbe 32 00 00 00       \tmov    $0x32,%esi\n   12626:\t48 89 c7             \tmov    %rax,%rdi\n   12629:\te8 00 00 00 00       \tcallq  1262e <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x9c3>\n   1262e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   12632:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12639:\t00 \n   1263a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1263e:\tc6 80 f0 01 00 00 04 \tmovb   $0x4,0x1f0(%rax)\n   12645:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12649:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   1264f:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n   12654:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   12659:\tbe 2f 00 00 00       \tmov    $0x2f,%esi\n   1265e:\t48 89 c7             \tmov    %rax,%rdi\n   12661:\te8 00 00 00 00       \tcallq  12666 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0x9fb>\n   12666:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   1266a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12671:\t00 \n   12672:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12676:\tc6 80 f0 01 00 00 04 \tmovb   $0x4,0x1f0(%rax)\n   1267d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12681:\t8b 40 28             \tmov    0x28(%rax),%eax\n   12684:\t83 c8 02             \tor     $0x2,%eax\n   12687:\t89 c2                \tmov    %eax,%edx\n   12689:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1268d:\t89 50 28             \tmov    %edx,0x28(%rax)\n   12690:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12694:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n   12698:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1269c:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   126a2:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n   126a7:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   126ac:\tbe 30 00 00 00       \tmov    $0x30,%esi\n   126b1:\t48 89 c7             \tmov    %rax,%rdi\n   126b4:\te8 00 00 00 00       \tcallq  126b9 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0xa4e>\n   126b9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   126bd:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   126c4:\t00 \n   126c5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   126c9:\tc6 80 f0 01 00 00 04 \tmovb   $0x4,0x1f0(%rax)\n   126d0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   126d4:\t8b 40 28             \tmov    0x28(%rax),%eax\n   126d7:\t83 c8 02             \tor     $0x2,%eax\n   126da:\t89 c2                \tmov    %eax,%edx\n   126dc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   126e0:\t89 50 28             \tmov    %edx,0x28(%rax)\n   126e3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   126e7:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n   126eb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   126ef:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   126f5:\tb9 40 00 00 00       \tmov    $0x40,%ecx\n   126fa:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   126ff:\tbe 31 00 00 00       \tmov    $0x31,%esi\n   12704:\t48 89 c7             \tmov    %rax,%rdi\n   12707:\te8 00 00 00 00       \tcallq  1270c <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0xaa1>\n   1270c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   12710:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   12717:\t00 \n   12718:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1271c:\tc6 80 f0 01 00 00 04 \tmovb   $0x4,0x1f0(%rax)\n   12723:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12727:\t8b 40 28             \tmov    0x28(%rax),%eax\n   1272a:\t83 c8 02             \tor     $0x2,%eax\n   1272d:\t89 c2                \tmov    %eax,%edx\n   1272f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12733:\t89 50 28             \tmov    %edx,0x28(%rax)\n   12736:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1273a:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n   1273e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12742:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   12748:\tb9 80 00 00 00       \tmov    $0x80,%ecx\n   1274d:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n   12752:\tbe 32 00 00 00       \tmov    $0x32,%esi\n   12757:\t48 89 c7             \tmov    %rax,%rdi\n   1275a:\te8 00 00 00 00       \tcallq  1275f <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0xaf4>\n   1275f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   12763:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   1276a:\t00 \n   1276b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1276f:\tc6 80 f0 01 00 00 04 \tmovb   $0x4,0x1f0(%rax)\n   12776:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1277a:\t8b 40 28             \tmov    0x28(%rax),%eax\n   1277d:\t83 c8 02             \tor     $0x2,%eax\n   12780:\t89 c2                \tmov    %eax,%edx\n   12782:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   12786:\t89 50 28             \tmov    %edx,0x28(%rax)\n   12789:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1278d:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n   12791:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   12795:\t48 89 c7             \tmov    %rax,%rdi\n   12798:\te8 00 00 00 00       \tcallq  1279d <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0xb32>\n   1279d:\teb 1a                \tjmp    127b9 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0xb4e>\n   1279f:\t48 89 c3             \tmov    %rax,%rbx\n   127a2:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   127a6:\t48 89 c7             \tmov    %rax,%rdi\n   127a9:\te8 00 00 00 00       \tcallq  127ae <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0xb43>\n   127ae:\t48 89 d8             \tmov    %rbx,%rax\n   127b1:\t48 89 c7             \tmov    %rax,%rdi\n   127b4:\te8 00 00 00 00       \tcallq  127b9 <_ZL25construct_ioport_evilstonR8device_tR11tagged_listI17input_port_configER7astring+0xb4e>\n   127b9:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n   127c0:\t5b                   \tpop    %rbx\n   127c1:\t5d                   \tpop    %rbp\n   127c2:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_evilston(__int64 a1, __int64 a2, __int64 a3) {\n  char v4[Number];\n  int v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  astring astring((astring *)v4);\n  v8 = Number L;\n  v7 = Number L;\n  v6 = Number L;\n  v5 = Number;\n  v6 = ioconfig_alloc_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v7 = ioconfig_alloc_onoff(v6, Number L, Number, Number L, Number L, a3);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v6 = ioconfig_alloc_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, String);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, String);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, String);\n  v8 = ioconfig_alloc_setting(v7, Number L, String);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v6 = ioconfig_alloc_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v6 = ioconfig_alloc_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  v6 = ioconfig_alloc_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  astring ~astring((astring *)v4);\n}", "code_t": "void __cdecl construct_ioport_evilston(device_t *owner, ioport_list *portlist,\n                                       astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value maskbits;\n  input_port_config *curport;\n  input_field_config *curfield;\n  input_setting_config *cursetting;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  cursetting = Number L;\n  curfield = Number L;\n  curport = Number L;\n  maskbits = Number;\n  curport = (input_port_config *)ioconfig_alloc_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_2E + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_2E + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_2E + Number);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_32);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_1 + Number);\n  curfield = (input_field_config *)ioconfig_alloc_onoff(\n      curport, (const char *)&loc_32 + Number, Number, Number, Number L,\n      errorbuf);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_6 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_1);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1 + Number);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_9 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_11);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_11 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_14 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1C);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_9 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_22);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_22 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_26 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_2A);\n  curport = (input_port_config *)ioconfig_alloc_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_6 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_4A);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_4D);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_4D + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_51);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_6E);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_1 + Number);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_6E);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_1 + Number);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_4 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, String);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, String);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, String);\n  cursetting =\n      (input_setting_config *)ioconfig_alloc_setting(curfield, Number, String);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_3F + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_3F + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_3F + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_3F + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_3F + Number);\n  curport = (input_port_config *)ioconfig_alloc_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curport = (input_port_config *)ioconfig_alloc_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->impulse = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->impulse = Number;\n  curport = (input_port_config *)ioconfig_alloc_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "pred_name": "fulltag", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "shackijj", "repo_name": "lcthw", "path": "shackijj/lcthw/18af56387328eb0cab30f26f1582d6ddddc21005b9425fd19784647b6f21e876", "path_in_repo": "shackijj/lcthw/ex36/liblcthw/src/lcthw/bstrlib.o", "objdump": "00000000000030fb <bninchrr>:\n    30fb:\t55                   \tpush   %rbp\n    30fc:\t48 89 e5             \tmov    %rsp,%rbp\n    30ff:\t48 83 ec 40          \tsub    $0x40,%rsp\n    3103:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    3107:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n    310a:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    310e:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    3112:\t78 20                \tjs     3134 <bninchrr+0x39>\n    3114:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    3119:\t74 19                \tje     3134 <bninchrr+0x39>\n    311b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    311f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3123:\t48 85 c0             \ttest   %rax,%rax\n    3126:\t74 0c                \tje     3134 <bninchrr+0x39>\n    3128:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    312c:\t8b 40 04             \tmov    0x4(%rax),%eax\n    312f:\t39 45 d4             \tcmp    %eax,-0x2c(%rbp)\n    3132:\t7e 07                \tjle    313b <bninchrr+0x40>\n    3134:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    3139:\teb 53                \tjmp    318e <bninchrr+0x93>\n    313b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    313f:\t8b 40 04             \tmov    0x4(%rax),%eax\n    3142:\t39 45 d4             \tcmp    %eax,-0x2c(%rbp)\n    3145:\t75 04                \tjne    314b <bninchrr+0x50>\n    3147:\t83 6d d4 01          \tsubl   $0x1,-0x2c(%rbp)\n    314b:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    314f:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    3153:\t48 89 d6             \tmov    %rdx,%rsi\n    3156:\t48 89 c7             \tmov    %rax,%rdi\n    3159:\te8 cc fb ff ff       \tcallq  2d2a <buildCharField>\n    315e:\t85 c0                \ttest   %eax,%eax\n    3160:\t79 07                \tjns    3169 <bninchrr+0x6e>\n    3162:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    3167:\teb 25                \tjmp    318e <bninchrr+0x93>\n    3169:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    316d:\t48 89 c7             \tmov    %rax,%rdi\n    3170:\te8 77 fc ff ff       \tcallq  2dec <invertCharField>\n    3175:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3179:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    317d:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    3181:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n    3184:\t89 ce                \tmov    %ecx,%esi\n    3186:\t48 89 c7             \tmov    %rax,%rdi\n    3189:\te8 b8 fd ff ff       \tcallq  2f46 <binchrrCF>\n    318e:\tc9                   \tleaveq \n    318f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bninchrr(__int64 a1, int a2, __int64 a3) {\n  int v4;\n  char v5[Number];\n  v4 = a2;\n  if (a2 < Number || !a1 || !*(_QWORD *)(a1 + Number) ||\n      a2 > *(_DWORD *)(a1 + Number))\n    return Number;\n  if (a2 == *(_DWORD *)(a1 + Number))\n    v4 = a2 - Number;\n  if ((int)buildCharField(v5, a3) < Number)\n    return Number;\n  invertCharField((__int64)v5);\n  return binchrrCF(*(_QWORD *)(a1 + Number), v4, (__int64)v5);\n}", "code_t": "int __cdecl bninchrr(const_bstring b0, int pos, const_bstring b1) {\n  int posa;\n  charField <span class=\"supfact\">chrs</span>;\n  posa = pos;\n  if (pos < Number || !b0 || !b0->data || pos > b0->slen)\n    return Number;\n  if (pos == b0->slen)\n    posa = pos - Number;\n  if (buildCharField(&<span class=\"supfact\">chrs</span>, b1) < Number)\n    return Number;\n  invertCharField(&<span class=\"supfact\">chrs</span>);\n  return binchrrCF(b0->data, posa, &<span class=\"supfact\">chrs</span>);\n}", "var": [{"name": "v5", "type": "struct charField { unsigned __int8[32] content; }", "pred_name": "chrs", "ref_name": "chrs", "ref_type": "struct charField { unsigned __int8[32] content; }"}], "body_in_train": true}, {"repo_owner": "gloomykeel", "repo_name": "mt7688", "path": "gloomykeel/mt7688/11a9e0dfe4c7d7d12f2b0c4c852f2898d8eb511ba3516522bb2ef28e1db8c285", "path_in_repo": "gloomykeel/mt7688//scripts/config/conf", "objdump": "00000000004110d9 <sym_check_deps>:\n  4110d9:\t55                   \tpush   %rbp\n  4110da:\t48 89 e5             \tmov    %rsp,%rbp\n  4110dd:\t48 83 ec 50          \tsub    $0x50,%rsp\n  4110e1:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  4110e5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4110e9:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  4110ec:\t83 e0 08             \tand    $0x8,%eax\n  4110ef:\t85 c0                \ttest   %eax,%eax\n  4110f1:\t74 15                \tje     411108 <sym_check_deps+0x2f>\n  4110f3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4110f7:\t48 89 c7             \tmov    %rax,%rdi\n  4110fa:\te8 b6 f7 ff ff       \tcallq  4108b5 <sym_check_print_recursive>\n  4110ff:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  411103:\te9 e3 00 00 00       \tjmpq   4111eb <sym_check_deps+0x112>\n  411108:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  41110c:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  41110f:\t25 00 20 00 00       \tand    $0x2000,%eax\n  411114:\t85 c0                \ttest   %eax,%eax\n  411116:\t74 0a                \tje     411122 <sym_check_deps+0x49>\n  411118:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41111d:\te9 c9 00 00 00       \tjmpq   4111eb <sym_check_deps+0x112>\n  411122:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  411126:\t48 89 c7             \tmov    %rax,%rdi\n  411129:\te8 d7 2c ff ff       \tcallq  403e05 <sym_is_choice_value>\n  41112e:\t84 c0                \ttest   %al,%al\n  411130:\t74 42                \tje     411174 <sym_check_deps+0x9b>\n  411132:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  411136:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  41113a:\t48 89 d6             \tmov    %rdx,%rsi\n  41113d:\t48 89 c7             \tmov    %rax,%rdi\n  411140:\te8 d4 f6 ff ff       \tcallq  410819 <dep_stack_insert>\n  411145:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  411149:\t48 89 c7             \tmov    %rax,%rdi\n  41114c:\te8 27 d5 ff ff       \tcallq  40e678 <sym_get_choice_prop>\n  411151:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  411155:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  411159:\t48 89 c7             \tmov    %rax,%rdi\n  41115c:\te8 2d 01 00 00       \tcallq  41128e <prop_get_symbol>\n  411161:\t48 89 c7             \tmov    %rax,%rdi\n  411164:\te8 70 ff ff ff       \tcallq  4110d9 <sym_check_deps>\n  411169:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  41116d:\te8 10 f7 ff ff       \tcallq  410882 <dep_stack_remove>\n  411172:\teb 5a                \tjmp    4111ce <sym_check_deps+0xf5>\n  411174:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  411178:\t48 89 c7             \tmov    %rax,%rdi\n  41117b:\te8 69 2c ff ff       \tcallq  403de9 <sym_is_choice>\n  411180:\t84 c0                \ttest   %al,%al\n  411182:\t74 12                \tje     411196 <sym_check_deps+0xbd>\n  411184:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  411188:\t48 89 c7             \tmov    %rax,%rdi\n  41118b:\te8 b3 fd ff ff       \tcallq  410f43 <sym_check_choice_deps>\n  411190:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  411194:\teb 38                \tjmp    4111ce <sym_check_deps+0xf5>\n  411196:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  41119a:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  41119d:\t0d 08 20 00 00       \tor     $0x2008,%eax\n  4111a2:\t89 c2                \tmov    %eax,%edx\n  4111a4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4111a8:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  4111ab:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4111af:\t48 89 c7             \tmov    %rax,%rdi\n  4111b2:\te8 84 fc ff ff       \tcallq  410e3b <sym_check_sym_deps>\n  4111b7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4111bb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4111bf:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  4111c2:\t83 e0 f7             \tand    $0xfffffff7,%eax\n  4111c5:\t89 c2                \tmov    %eax,%edx\n  4111c7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4111cb:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  4111ce:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4111d3:\t74 12                \tje     4111e7 <sym_check_deps+0x10e>\n  4111d5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4111d9:\t48 3b 45 b8          \tcmp    -0x48(%rbp),%rax\n  4111dd:\t75 08                \tjne    4111e7 <sym_check_deps+0x10e>\n  4111df:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  4111e6:\t00 \n  4111e7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4111eb:\tc9                   \tleaveq \n  4111ec:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sym_check_deps(__int64 a1) {\n  __int64 result;\n  __int64 v2;\n  __int64 v4[Number];\n  __int64 *v5;\n  __int64 v6;\n  if ((*(_DWORD *)(a1 + Number) & Number) != Number) {\n    sym_check_print_recursive(a1);\n    result = a1;\n  } else if ((*(_DWORD *)(a1 + Number) & Number) != Number) {\n    result = Number L;\n  } else {\n    if (sym_is_choice_value_0(a1)) {\n      dep_stack_insert(v4, a1);\n      v5 = sym_get_choice_prop(a1);\n      v2 = prop_get_symbol(v5);\n      v6 = sym_check_deps(v2);\n      dep_stack_remove();\n    } else if (sym_is_choice_0(a1)) {\n      v6 = sym_check_choice_deps(a1);\n    } else {\n      *(_DWORD *)(a1 + Number) |= Number;\n      v6 = sym_check_sym_deps(a1);\n      *(_DWORD *)(a1 + Number) &= Number;\n    }\n    if (v6) {\n      if (v6 == a1)\n        v6 = Number L;\n    }\n    result = v6;\n  }\n  return result;\n}", "code_t": "symbol *__cdecl sym_check_deps(symbol *sym) {\n  symbol *result;\n  symbol *v2;\n  dep_stack <span class=\"supfact\">stack</span>;\n  property *prop;\n  symbol *sym2;\n  if ((sym->flags & Number) != Number) {\n    sym_check_print_recursive(sym);\n    result = sym;\n  } else if ((sym->flags & Number) != Number) {\n    result = Number L;\n  } else {\n    if (sym_is_choice_value_0(sym)) {\n      dep_stack_insert(&<span class=\"supfact\">stack</span>, sym);\n      prop = sym_get_choice_prop(sym);\n      v2 = prop_get_symbol(prop);\n      sym2 = sym_check_deps(v2);\n      dep_stack_remove();\n    } else if (sym_is_choice_0(sym)) {\n      sym2 = sym_check_choice_deps(sym);\n    } else {\n      sym->flags |= Number;\n      sym2 = sym_check_sym_deps(sym);\n      sym->flags &= Number;\n    }\n    if (sym2) {\n      if (sym2 == sym)\n        sym2 = Number L;\n    }\n    result = sym2;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct dep_stack { dep_stack * prev; dep_stack * next; symbol * sym; property * prop; expr * expr; }", "pred_name": "stack", "ref_name": "stack", "ref_type": "struct dep_stack { dep_stack * prev; dep_stack * next; symbol * sym; property * prop; expr * expr; }"}], "body_in_train": true}, {"repo_owner": "miguelfrde", "repo_name": "operatingsystems-iteso", "path": "miguelfrde/operatingsystems-iteso/5e248c33508acb03f329c25e2d8067018c617e1b300de94091ad13a31a861dac", "path_in_repo": "miguelfrde/operatingsystems-iteso/src/practica4/mfq", "objdump": "0000000000401282 <scheduler>:\n  401282:\t55                   \tpush   %rbp\n  401283:\t48 89 e5             \tmov    %rsp,%rbp\n  401286:\t53                   \tpush   %rbx\n  401287:\t48 83 ec 28          \tsub    $0x28,%rsp\n  40128b:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n  40128e:\tc6 45 ef 00          \tmovb   $0x0,-0x11(%rbp)\n  401292:\t8b 05 44 41 00 00    \tmov    0x4144(%rip),%eax        # 4053dc <pars+0x4>\n  401298:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  40129b:\t0f b6 05 3e 3e 00 00 \tmovzbl 0x3e3e(%rip),%eax        # 4050e0 <initialize_feedback_queues>\n  4012a2:\t84 c0                \ttest   %al,%al\n  4012a4:\t74 44                \tje     4012ea <scheduler+0x68>\n  4012a6:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  4012ad:\teb 2e                \tjmp    4012dd <scheduler+0x5b>\n  4012af:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4012b2:\t48 98                \tcltq   \n  4012b4:\t48 6b c0 5c          \timul   $0x5c,%rax,%rax\n  4012b8:\t48 05 70 51 40 00    \tadd    $0x405170,%rax\n  4012be:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  4012c4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4012c7:\t48 98                \tcltq   \n  4012c9:\t48 6b c0 5c          \timul   $0x5c,%rax,%rax\n  4012cd:\t48 05 74 51 40 00    \tadd    $0x405174,%rax\n  4012d3:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  4012d9:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n  4012dd:\t83 7d e4 04          \tcmpl   $0x4,-0x1c(%rbp)\n  4012e1:\t7e cc                \tjle    4012af <scheduler+0x2d>\n  4012e3:\tc6 05 f6 3d 00 00 00 \tmovb   $0x0,0x3df6(%rip)        # 4050e0 <initialize_feedback_queues>\n  4012ea:\t83 7d dc 03          \tcmpl   $0x3,-0x24(%rbp)\n  4012ee:\t75 55                \tjne    401345 <scheduler+0xc3>\n  4012f0:\t8b 05 e2 40 00 00    \tmov    0x40e2(%rip),%eax        # 4053d8 <pars>\n  4012f6:\t89 c6                \tmov    %eax,%esi\n  4012f8:\tbf 08 30 40 00       \tmov    $0x403008,%edi\n  4012fd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401302:\te8 79 fd ff ff       \tcallq  401080 <printf@plt>\n  401307:\t8b 05 cb 40 00 00    \tmov    0x40cb(%rip),%eax        # 4053d8 <pars>\n  40130d:\t48 63 d0             \tmovslq %eax,%rdx\n  401310:\t48 89 d0             \tmov    %rdx,%rax\n  401313:\t48 c1 e0 03          \tshl    $0x3,%rax\n  401317:\t48 29 d0             \tsub    %rdx,%rax\n  40131a:\t48 c1 e0 02          \tshl    $0x2,%rax\n  40131e:\t48 05 98 53 40 00    \tadd    $0x405398,%rax\n  401324:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n  40132a:\t8b 05 a8 40 00 00    \tmov    0x40a8(%rip),%eax        # 4053d8 <pars>\n  401330:\t89 c7                \tmov    %eax,%edi\n  401332:\te8 38 03 00 00       \tcallq  40166f <put_in_feedback_queue>\n  401337:\t8b 05 ab 3d 00 00    \tmov    0x3dab(%rip),%eax        # 4050e8 <tiempo>\n  40133d:\t85 c0                \ttest   %eax,%eax\n  40133f:\t0f 94 c0             \tsete   %al\n  401342:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n  401345:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n  401349:\t0f 85 23 01 00 00    \tjne    401472 <scheduler+0x1f0>\n  40134f:\t8b 05 87 40 00 00    \tmov    0x4087(%rip),%eax        # 4053dc <pars+0x4>\n  401355:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  401358:\t75 09                \tjne    401363 <scheduler+0xe1>\n  40135a:\tc6 45 ef 01          \tmovb   $0x1,-0x11(%rbp)\n  40135e:\te9 0f 01 00 00       \tjmpq   401472 <scheduler+0x1f0>\n  401363:\t8b 05 73 40 00 00    \tmov    0x4073(%rip),%eax        # 4053dc <pars+0x4>\n  401369:\t48 63 d0             \tmovslq %eax,%rdx\n  40136c:\t48 89 d0             \tmov    %rdx,%rax\n  40136f:\t48 c1 e0 03          \tshl    $0x3,%rax\n  401373:\t48 29 d0             \tsub    %rdx,%rax\n  401376:\t48 c1 e0 02          \tshl    $0x2,%rax\n  40137a:\t48 05 90 53 40 00    \tadd    $0x405390,%rax\n  401380:\t8b 00                \tmov    (%rax),%eax\n  401382:\t85 c0                \ttest   %eax,%eax\n  401384:\t75 7b                \tjne    401401 <scheduler+0x17f>\n  401386:\tbf 20 30 40 00       \tmov    $0x403020,%edi\n  40138b:\te8 b0 fc ff ff       \tcallq  401040 <puts@plt>\n  401390:\t8b 15 46 40 00 00    \tmov    0x4046(%rip),%edx        # 4053dc <pars+0x4>\n  401396:\t48 63 ca             \tmovslq %edx,%rcx\n  401399:\t48 89 c8             \tmov    %rcx,%rax\n  40139c:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4013a0:\t48 29 c8             \tsub    %rcx,%rax\n  4013a3:\t48 c1 e0 02          \tshl    $0x2,%rax\n  4013a7:\t48 05 94 53 40 00    \tadd    $0x405394,%rax\n  4013ad:\t8b 00                \tmov    (%rax),%eax\n  4013af:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  4013b2:\t48 63 d2             \tmovslq %edx,%rdx\n  4013b5:\t48 89 d0             \tmov    %rdx,%rax\n  4013b8:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4013bc:\t48 29 d0             \tsub    %rdx,%rax\n  4013bf:\t48 c1 e0 02          \tshl    $0x2,%rax\n  4013c3:\t48 05 94 53 40 00    \tadd    $0x405394,%rax\n  4013c9:\t89 08                \tmov    %ecx,(%rax)\n  4013cb:\t8b 05 0b 40 00 00    \tmov    0x400b(%rip),%eax        # 4053dc <pars+0x4>\n  4013d1:\t48 63 d0             \tmovslq %eax,%rdx\n  4013d4:\t48 89 d0             \tmov    %rdx,%rax\n  4013d7:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4013db:\t48 29 d0             \tsub    %rdx,%rax\n  4013de:\t48 c1 e0 02          \tshl    $0x2,%rax\n  4013e2:\t48 05 98 53 40 00    \tadd    $0x405398,%rax\n  4013e8:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n  4013ee:\t8b 05 e8 3f 00 00    \tmov    0x3fe8(%rip),%eax        # 4053dc <pars+0x4>\n  4013f4:\t89 c7                \tmov    %eax,%edi\n  4013f6:\te8 74 02 00 00       \tcallq  40166f <put_in_feedback_queue>\n  4013fb:\tc6 45 ef 01          \tmovb   $0x1,-0x11(%rbp)\n  4013ff:\teb 71                \tjmp    401472 <scheduler+0x1f0>\n  401401:\t8b 15 d5 3f 00 00    \tmov    0x3fd5(%rip),%edx        # 4053dc <pars+0x4>\n  401407:\t48 63 ca             \tmovslq %edx,%rcx\n  40140a:\t48 89 c8             \tmov    %rcx,%rax\n  40140d:\t48 c1 e0 03          \tshl    $0x3,%rax\n  401411:\t48 29 c8             \tsub    %rcx,%rax\n  401414:\t48 c1 e0 02          \tshl    $0x2,%rax\n  401418:\t48 05 90 53 40 00    \tadd    $0x405390,%rax\n  40141e:\t8b 00                \tmov    (%rax),%eax\n  401420:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n  401423:\t48 63 d2             \tmovslq %edx,%rdx\n  401426:\t48 89 d0             \tmov    %rdx,%rax\n  401429:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40142d:\t48 29 d0             \tsub    %rdx,%rax\n  401430:\t48 c1 e0 02          \tshl    $0x2,%rax\n  401434:\t48 05 90 53 40 00    \tadd    $0x405390,%rax\n  40143a:\t89 08                \tmov    %ecx,(%rax)\n  40143c:\t8b 05 9a 3f 00 00    \tmov    0x3f9a(%rip),%eax        # 4053dc <pars+0x4>\n  401442:\t48 63 d0             \tmovslq %eax,%rdx\n  401445:\t48 89 d0             \tmov    %rdx,%rax\n  401448:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40144c:\t48 29 d0             \tsub    %rdx,%rax\n  40144f:\t48 c1 e0 02          \tshl    $0x2,%rax\n  401453:\t48 05 90 53 40 00    \tadd    $0x405390,%rax\n  401459:\t8b 10                \tmov    (%rax),%edx\n  40145b:\t8b 05 7b 3f 00 00    \tmov    0x3f7b(%rip),%eax        # 4053dc <pars+0x4>\n  401461:\t89 c6                \tmov    %eax,%esi\n  401463:\tbf 45 30 40 00       \tmov    $0x403045,%edi\n  401468:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40146d:\te8 0e fc ff ff       \tcallq  401080 <printf@plt>\n  401472:\t83 7d dc 01          \tcmpl   $0x1,-0x24(%rbp)\n  401476:\t75 3e                \tjne    4014b6 <scheduler+0x234>\n  401478:\t8b 05 5e 3f 00 00    \tmov    0x3f5e(%rip),%eax        # 4053dc <pars+0x4>\n  40147e:\t89 c6                \tmov    %eax,%esi\n  401480:\tbf 63 30 40 00       \tmov    $0x403063,%edi\n  401485:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40148a:\te8 f1 fb ff ff       \tcallq  401080 <printf@plt>\n  40148f:\t8b 05 47 3f 00 00    \tmov    0x3f47(%rip),%eax        # 4053dc <pars+0x4>\n  401495:\t48 63 d0             \tmovslq %eax,%rdx\n  401498:\t48 89 d0             \tmov    %rdx,%rax\n  40149b:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40149f:\t48 29 d0             \tsub    %rdx,%rax\n  4014a2:\t48 c1 e0 02          \tshl    $0x2,%rax\n  4014a6:\t48 05 98 53 40 00    \tadd    $0x405398,%rax\n  4014ac:\tc7 00 03 00 00 00    \tmovl   $0x3,(%rax)\n  4014b2:\tc6 45 ef 01          \tmovb   $0x1,-0x11(%rbp)\n  4014b6:\t83 7d dc 02          \tcmpl   $0x2,-0x24(%rbp)\n  4014ba:\t75 47                \tjne    401503 <scheduler+0x281>\n  4014bc:\t8b 05 16 3f 00 00    \tmov    0x3f16(%rip),%eax        # 4053d8 <pars>\n  4014c2:\t89 c6                \tmov    %eax,%esi\n  4014c4:\tbf 80 30 40 00       \tmov    $0x403080,%edi\n  4014c9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4014ce:\te8 ad fb ff ff       \tcallq  401080 <printf@plt>\n  4014d3:\t8b 05 ff 3e 00 00    \tmov    0x3eff(%rip),%eax        # 4053d8 <pars>\n  4014d9:\t48 63 d0             \tmovslq %eax,%rdx\n  4014dc:\t48 89 d0             \tmov    %rdx,%rax\n  4014df:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4014e3:\t48 29 d0             \tsub    %rdx,%rax\n  4014e6:\t48 c1 e0 02          \tshl    $0x2,%rax\n  4014ea:\t48 05 98 53 40 00    \tadd    $0x405398,%rax\n  4014f0:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n  4014f6:\t8b 05 dc 3e 00 00    \tmov    0x3edc(%rip),%eax        # 4053d8 <pars>\n  4014fc:\t89 c7                \tmov    %eax,%edi\n  4014fe:\te8 6c 01 00 00       \tcallq  40166f <put_in_feedback_queue>\n  401503:\t83 7d dc 04          \tcmpl   $0x4,-0x24(%rbp)\n  401507:\t75 3a                \tjne    401543 <scheduler+0x2c1>\n  401509:\t8b 05 c9 3e 00 00    \tmov    0x3ec9(%rip),%eax        # 4053d8 <pars>\n  40150f:\t89 c6                \tmov    %eax,%esi\n  401511:\tbf a5 30 40 00       \tmov    $0x4030a5,%edi\n  401516:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40151b:\te8 60 fb ff ff       \tcallq  401080 <printf@plt>\n  401520:\t8b 05 b2 3e 00 00    \tmov    0x3eb2(%rip),%eax        # 4053d8 <pars>\n  401526:\t48 63 d0             \tmovslq %eax,%rdx\n  401529:\t48 89 d0             \tmov    %rdx,%rax\n  40152c:\t48 c1 e0 03          \tshl    $0x3,%rax\n  401530:\t48 29 d0             \tsub    %rdx,%rax\n  401533:\t48 c1 e0 02          \tshl    $0x2,%rax\n  401537:\t48 05 98 53 40 00    \tadd    $0x405398,%rax\n  40153d:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n  401543:\t80 7d ef 00          \tcmpb   $0x0,-0x11(%rbp)\n  401547:\t0f 84 19 01 00 00    \tje     401666 <scheduler+0x3e4>\n  40154d:\tc7 45 e8 ff ff ff ff \tmovl   $0xffffffff,-0x18(%rbp)\n  401554:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n  40155b:\te9 fc 00 00 00       \tjmpq   40165c <scheduler+0x3da>\n  401560:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  401563:\t48 98                \tcltq   \n  401565:\t48 6b c0 5c          \timul   $0x5c,%rax,%rax\n  401569:\t48 05 20 51 40 00    \tadd    $0x405120,%rax\n  40156f:\t48 83 ec 60          \tsub    $0x60,%rsp\n  401573:\t48 89 e2             \tmov    %rsp,%rdx\n  401576:\t48 8b 08             \tmov    (%rax),%rcx\n  401579:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n  40157d:\t48 89 0a             \tmov    %rcx,(%rdx)\n  401580:\t48 89 5a 08          \tmov    %rbx,0x8(%rdx)\n  401584:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n  401588:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  40158c:\t48 89 4a 10          \tmov    %rcx,0x10(%rdx)\n  401590:\t48 89 5a 18          \tmov    %rbx,0x18(%rdx)\n  401594:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  401598:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n  40159c:\t48 89 4a 20          \tmov    %rcx,0x20(%rdx)\n  4015a0:\t48 89 5a 28          \tmov    %rbx,0x28(%rdx)\n  4015a4:\t48 8b 48 30          \tmov    0x30(%rax),%rcx\n  4015a8:\t48 8b 58 38          \tmov    0x38(%rax),%rbx\n  4015ac:\t48 89 4a 30          \tmov    %rcx,0x30(%rdx)\n  4015b0:\t48 89 5a 38          \tmov    %rbx,0x38(%rdx)\n  4015b4:\t48 8b 48 40          \tmov    0x40(%rax),%rcx\n  4015b8:\t48 8b 58 48          \tmov    0x48(%rax),%rbx\n  4015bc:\t48 89 4a 40          \tmov    %rcx,0x40(%rdx)\n  4015c0:\t48 89 5a 48          \tmov    %rbx,0x48(%rdx)\n  4015c4:\t48 8b 48 50          \tmov    0x50(%rax),%rcx\n  4015c8:\t48 89 4a 50          \tmov    %rcx,0x50(%rdx)\n  4015cc:\t8b 40 58             \tmov    0x58(%rax),%eax\n  4015cf:\t89 42 58             \tmov    %eax,0x58(%rdx)\n  4015d2:\te8 b8 0c 00 00       \tcallq  40228f <cola_vacia>\n  4015d7:\t48 83 c4 60          \tadd    $0x60,%rsp\n  4015db:\t85 c0                \ttest   %eax,%eax\n  4015dd:\t75 79                \tjne    401658 <scheduler+0x3d6>\n  4015df:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  4015e2:\t48 98                \tcltq   \n  4015e4:\t48 6b c0 5c          \timul   $0x5c,%rax,%rax\n  4015e8:\t48 05 20 51 40 00    \tadd    $0x405120,%rax\n  4015ee:\t48 89 c7             \tmov    %rax,%rdi\n  4015f1:\te8 b5 0c 00 00       \tcallq  4022ab <sacar_de_cola>\n  4015f6:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  4015f9:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4015fc:\t48 63 d0             \tmovslq %eax,%rdx\n  4015ff:\t48 89 d0             \tmov    %rdx,%rax\n  401602:\t48 c1 e0 03          \tshl    $0x3,%rax\n  401606:\t48 29 d0             \tsub    %rdx,%rax\n  401609:\t48 c1 e0 02          \tshl    $0x2,%rax\n  40160d:\t48 05 98 53 40 00    \tadd    $0x405398,%rax\n  401613:\tc7 00 02 00 00 00    \tmovl   $0x2,(%rax)\n  401619:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40161c:\t48 63 d0             \tmovslq %eax,%rdx\n  40161f:\t48 89 d0             \tmov    %rdx,%rax\n  401622:\t48 c1 e0 03          \tshl    $0x3,%rax\n  401626:\t48 29 d0             \tsub    %rdx,%rax\n  401629:\t48 c1 e0 02          \tshl    $0x2,%rax\n  40162d:\t48 05 90 53 40 00    \tadd    $0x405390,%rax\n  401633:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n  401639:\t8b 0d a5 3a 00 00    \tmov    0x3aa5(%rip),%ecx        # 4050e4 <time_left>\n  40163f:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  401642:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401645:\t89 c6                \tmov    %eax,%esi\n  401647:\tbf c0 30 40 00       \tmov    $0x4030c0,%edi\n  40164c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401651:\te8 2a fa ff ff       \tcallq  401080 <printf@plt>\n  401656:\teb 0e                \tjmp    401666 <scheduler+0x3e4>\n  401658:\t83 45 e0 01          \taddl   $0x1,-0x20(%rbp)\n  40165c:\t83 7d e0 04          \tcmpl   $0x4,-0x20(%rbp)\n  401660:\t0f 8e fa fe ff ff    \tjle    401560 <scheduler+0x2de>\n  401666:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401669:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n  40166d:\tc9                   \tleaveq \n  40166e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall scheduler(const char *a1, int a2, __int64 a3, __int64 a4,\n                             int a5, int a6) {\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  __int64 v21;\n  __int64 v22;\n  int v23;\n  int v24;\n  unsigned int j;\n  int i;\n  unsigned int v27;\n  bool v28;\n  v24 = (int)a1;\n  v28 = Number;\n  v27 = dword_4053DC;\n  if (initialize_feedback_queues) {\n    for (i = Number; i <= Number; ++i) {\n      *((_DWORD *)&unk_405170 + Number * i) = Number;\n      dword_405174[Number * i] = Number;\n    }\n    initialize_feedback_queues = Number;\n  }\n  if (v24 == Number) {\n    a2 = pars;\n    printf(String, (unsigned int)pars);\n    dword_405390[Number * pars + Number] = Number;\n    LODWORD(a1) = pars;\n    put_in_feedback_queue((unsigned int)pars);\n    v28 = tiempo == Number;\n  }\n  if (!v24) {\n    if (dword_4053DC == Number) {\n      v28 = Number;\n    } else if (dword_405390[Number * dword_4053DC]) {\n      --dword_405390[Number * dword_4053DC];\n      a2 = dword_4053DC;\n      a1 = String;\n      printf(String, (unsigned int)dword_4053DC,\n             dword_405390[Number * dword_4053DC]);\n    } else {\n      puts(String);\n      ++dword_405390[Number * dword_4053DC + Number];\n      dword_405390[Number * dword_4053DC + Number] = Number;\n      LODWORD(a1) = dword_4053DC;\n      put_in_feedback_queue((unsigned int)dword_4053DC);\n      v28 = Number;\n    }\n  }\n  if (v24 == Number) {\n    a2 = dword_4053DC;\n    a1 = String;\n    printf(String, (unsigned int)dword_4053DC);\n    dword_405390[Number * dword_4053DC + Number] = Number;\n    v28 = Number;\n  }\n  if (v24 == Number) {\n    a2 = pars;\n    printf(String, (unsigned int)pars);\n    dword_405390[Number * pars + Number] = Number;\n    LODWORD(a1) = pars;\n    put_in_feedback_queue((unsigned int)pars);\n  }\n  if (v24 == Number) {\n    a2 = pars;\n    a1 = String;\n    printf(String, (unsigned int)pars);\n    dword_405390[Number * pars + Number] = Number;\n  }\n  if (v28) {\n    v27 = Number;\n    for (j = Number; (int)j <= Number; ++j) {\n      v6 = *(_QWORD *)((char *)&unk_405128 + Number * (int)j);\n      v12 = *(_QWORD *)((char *)&feedback_queue + Number * (int)j);\n      v13 = v6;\n      v7 = *(_QWORD *)((char *)&unk_405138 + Number * (int)j);\n      v14 = *(_QWORD *)((char *)&unk_405130 + Number * (int)j);\n      v15 = v7;\n      v8 = *(_QWORD *)((char *)&unk_405148 + Number * (int)j);\n      v16 = *(_QWORD *)((char *)&unk_405140 + Number * (int)j);\n      v17 = v8;\n      v9 = *(_QWORD *)((char *)&unk_405158 + Number * (int)j);\n      v18 = *(_QWORD *)((char *)&unk_405150 + Number * (int)j);\n      v19 = v9;\n      v10 = *(_QWORD *)((char *)&unk_405168 + Number * (int)j);\n      v20 = *(_QWORD *)((char *)&unk_405160 + Number * (int)j);\n      v21 = v10;\n      v22 = *(_QWORD *)((char *)&unk_405170 + Number * (int)j);\n      v23 = dword_405174[Number * j + Number];\n      if (!(unsigned int)cola_vacia((_DWORD)a1, a2, (unsigned int)&v12, v22, a5,\n                                    a6, v12, v13, v14, v15, v16, v17, v18, v19,\n                                    v20, v10, v22)) {\n        v27 = sacar_de_cola(Number L * (int)j + Number);\n        dword_405390[Number * v27 + Number] = Number;\n        dword_405390[Number * v27] = Number;\n        printf(String, v27, j, (unsigned int)time_left);\n        return v27;\n      }\n    }\n  }\n  return v27;\n}", "code_t": "int __cdecl scheduler(int evento) {\n  COLAPROC <span class=\"supfact\">v2</span>;\n  int i_0;\n  int i;\n  unsigned int prox_proceso_a_ejecutar;\n  bool cambia_proceso;\n  cambia_proceso = Number;\n  prox_proceso_a_ejecutar = pars[Number];\n  if (initialize_feedback_queues) {\n    for (i = Number; i <= Number; ++i) {\n      feedback_queue[i].ent = Number;\n      feedback_queue[i].sal = Number;\n    }\n    initialize_feedback_queues = Number;\n  }\n  if (evento == Number) {\n    printf(String, (unsigned int)pars[Number]);\n    proceso[pars[Number]].estado = Number;\n    put_in_feedback_queue(pars[Number]);\n    cambia_proceso = tiempo == Number;\n  }\n  if (!evento) {\n    if (pars[Number] == Number) {\n      cambia_proceso = Number;\n    } else if (proceso[pars[Number]].trestante) {\n      printf(String, (unsigned int)pars[Number],\n             (unsigned int)--proceso[pars[Number]].trestante);\n    } else {\n      puts(String);\n      ++proceso[pars[Number]].prioridad;\n      proceso[pars[Number]].estado = Number;\n      put_in_feedback_queue(pars[Number]);\n      cambia_proceso = Number;\n    }\n  }\n  if (evento == Number) {\n    printf(String, (unsigned int)pars[Number]);\n    proceso[pars[Number]].estado = Number;\n    cambia_proceso = Number;\n  }\n  if (evento == Number) {\n    printf(String, (unsigned int)pars[Number]);\n    proceso[pars[Number]].estado = Number;\n    put_in_feedback_queue(pars[Number]);\n  }\n  if (evento == Number) {\n    printf(String, (unsigned int)pars[Number]);\n    proceso[pars[Number]].estado = Number;\n  }\n  if (cambia_proceso) {\n    prox_proceso_a_ejecutar = Number;\n    for (i_0 = Number; i_0 <= Number; ++i_0) {\n      *(_QWORD *)<span class=\"supfact\">v2</span>.cola = *(_QWORD *)feedback_queue[i_0].cola;\n      *(_QWORD *)&<span class=\"supfact\">v2</span>.cola[Number] =\n          *(_QWORD *)&feedback_queue[i_0].cola[Number];\n      *(_QWORD *)&<span class=\"supfact\">v2</span>.cola[Number] =\n          *(_QWORD *)&feedback_queue[i_0].cola[Number];\n      *(_QWORD *)&<span class=\"supfact\">v2</span>.cola[Number] =\n          *(_QWORD *)&feedback_queue[i_0].cola[Number];\n      *(_QWORD *)&<span class=\"supfact\">v2</span>.cola[Number] =\n          *(_QWORD *)&feedback_queue[i_0].cola[Number];\n      *(_QWORD *)&<span class=\"supfact\">v2</span>.cola[Number] =\n          *(_QWORD *)&feedback_queue[i_0].cola[Number];\n      *(_QWORD *)&<span class=\"supfact\">v2</span>.cola[Number] =\n          *(_QWORD *)&feedback_queue[i_0].cola[Number];\n      *(_QWORD *)&<span class=\"supfact\">v2</span>.cola[Number] =\n          *(_QWORD *)&feedback_queue[i_0].cola[Number];\n      *(_QWORD *)&<span class=\"supfact\">v2</span>.cola[Number] =\n          *(_QWORD *)&feedback_queue[i_0].cola[Number];\n      *(_QWORD *)&<span class=\"supfact\">v2</span>.cola[Number] =\n          *(_QWORD *)&feedback_queue[i_0].cola[Number];\n      *(_QWORD *)&<span class=\"supfact\">v2</span>.ent = *(_QWORD *)&feedback_queue[i_0].ent;\n      <span class=\"supfact\">v2</span>.size = feedback_queue[i_0].size;\n      if (!cola_vacia(<span class=\"supfact\">v2</span>)) {\n        prox_proceso_a_ejecutar =\n            sacar_de_cola((COLAPROC *)(Number L * i_0 + Number));\n        proceso[prox_proceso_a_ejecutar].estado = Number;\n        proceso[prox_proceso_a_ejecutar].trestante = Number;\n        printf(String, prox_proceso_a_ejecutar, (unsigned int)i_0,\n               (unsigned int)time_left);\n        return prox_proceso_a_ejecutar;\n      }\n    }\n  }\n  return prox_proceso_a_ejecutar;\n}", "var": [{"name": "v12", "type": "__unk__", "pred_name": "__unk__", "ref_name": "v2", "ref_type": "struct COLAPROC { int[20] cola; int ent; int sal; int size; }"}], "body_in_train": false}, {"repo_owner": "rofl0r", "repo_name": "agsutils", "path": "rofl0r/agsutils/f31a77ae49e423a419e736ca78645b46750de045054c0d2c81e3cdfdfc19d08f", "path_in_repo": "rofl0r/agsutils//agssemble", "objdump": "000000000040ff72 <get_macro_info>:\n  40ff72:\t55                   \tpush   %rbp\n  40ff73:\t48 89 e5             \tmov    %rsp,%rbp\n  40ff76:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  40ff7d:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n  40ff81:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n  40ff85:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n  40ff8c:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n  40ff93:\t44 89 85 6c ff ff ff \tmov    %r8d,-0x94(%rbp)\n  40ff9a:\t44 89 8d 68 ff ff ff \tmov    %r9d,-0x98(%rbp)\n  40ffa1:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40ffa8:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  40ffac:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  40ffb0:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40ffb5:\t48 89 ce             \tmov    %rcx,%rsi\n  40ffb8:\t48 89 c7             \tmov    %rax,%rdi\n  40ffbb:\te8 fc f0 ff ff       \tcallq  40f0bc <x_tokenizer_next_of>\n  40ffc0:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40ffc3:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  40ffc7:\t0f 84 19 02 00 00    \tje     4101e6 <get_macro_info+0x274>\n  40ffcd:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  40ffd0:\t83 f8 0e             \tcmp    $0xe,%eax\n  40ffd3:\t0f 84 0d 02 00 00    \tje     4101e6 <get_macro_info+0x274>\n  40ffd9:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  40ffe0:\t00 \n  40ffe1:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  40ffe4:\t83 f8 01             \tcmp    $0x1,%eax\n  40ffe7:\t0f 85 a6 01 00 00    \tjne    410193 <get_macro_info+0x221>\n  40ffed:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  40fff1:\t48 8d 90 20 01 00 00 \tlea    0x120(%rax),%rdx\n  40fff8:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  40fffc:\t48 89 d6             \tmov    %rdx,%rsi\n  40ffff:\t48 89 c7             \tmov    %rax,%rdi\n  410002:\te8 f1 e0 ff ff       \tcallq  40e0f8 <get_macro>\n  410007:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  41000b:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  410010:\t0f 84 7d 01 00 00    \tje     410193 <get_macro_info+0x221>\n  410016:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  41001a:\t48 8d 88 20 01 00 00 \tlea    0x120(%rax),%rcx\n  410021:\t8b 55 20             \tmov    0x20(%rbp),%edx\n  410024:\t48 8b 45 18          \tmov    0x18(%rbp),%rax\n  410028:\t48 89 c6             \tmov    %rax,%rsi\n  41002b:\t48 89 cf             \tmov    %rcx,%rdi\n  41002e:\te8 e2 fe ff ff       \tcallq  40ff15 <was_visited>\n  410033:\t85 c0                \ttest   %eax,%eax\n  410035:\t0f 85 58 01 00 00    \tjne    410193 <get_macro_info+0x221>\n  41003b:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  41003f:\t48 05 20 01 00 00    \tadd    $0x120,%rax\n  410045:\t48 89 c7             \tmov    %rax,%rdi\n  410048:\te8 f3 22 ff ff       \tcallq  402340 <strdup@plt>\n  41004d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  410051:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  410055:\t8b 00                \tmov    (%rax),%eax\n  410057:\t85 c0                \ttest   %eax,%eax\n  410059:\t0f 88 ce 00 00 00    \tjs     41012d <get_macro_info+0x1bb>\n  41005f:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  410063:\t48 89 c7             \tmov    %rax,%rdi\n  410066:\te8 21 34 00 00       \tcallq  41348c <tokenizer_peek>\n  41006b:\t83 f8 28             \tcmp    $0x28,%eax\n  41006e:\t0f 85 64 01 00 00    \tjne    4101d8 <get_macro_info+0x266>\n  410074:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n  41007a:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  41007d:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n  410083:\t44 8d 48 01          \tlea    0x1(%rax),%r9d\n  410087:\t8b 85 6c ff ff ff    \tmov    -0x94(%rbp),%eax\n  41008d:\t44 8d 40 01          \tlea    0x1(%rax),%r8d\n  410091:\t48 8b 8d 70 ff ff ff \tmov    -0x90(%rbp),%rcx\n  410098:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n  41009f:\t48 8b 75 80          \tmov    -0x80(%rbp),%rsi\n  4100a3:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4100a7:\t48 83 ec 08          \tsub    $0x8,%rsp\n  4100ab:\t8b 7d 20             \tmov    0x20(%rbp),%edi\n  4100ae:\t57                   \tpush   %rdi\n  4100af:\tff 75 18             \tpushq  0x18(%rbp)\n  4100b2:\tff 75 e8             \tpushq  -0x18(%rbp)\n  4100b5:\t48 89 c7             \tmov    %rax,%rdi\n  4100b8:\te8 b5 fe ff ff       \tcallq  40ff72 <get_macro_info>\n  4100bd:\t48 83 c4 20          \tadd    $0x20,%rsp\n  4100c1:\t89 85 68 ff ff ff    \tmov    %eax,-0x98(%rbp)\n  4100c7:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n  4100ce:\t48 8b 10             \tmov    (%rax),%rdx\n  4100d1:\t48 89 d0             \tmov    %rdx,%rax\n  4100d4:\t48 01 c0             \tadd    %rax,%rax\n  4100d7:\t48 01 d0             \tadd    %rdx,%rax\n  4100da:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4100de:\t48 89 c2             \tmov    %rax,%rdx\n  4100e1:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  4100e8:\t48 01 d0             \tadd    %rdx,%rax\n  4100eb:\t8b 95 6c ff ff ff    \tmov    -0x94(%rbp),%edx\n  4100f1:\t8d 72 01             \tlea    0x1(%rdx),%esi\n  4100f4:\t8b 95 68 ff ff ff    \tmov    -0x98(%rbp),%edx\n  4100fa:\t8d 4a 01             \tlea    0x1(%rdx),%ecx\n  4100fd:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  410101:\t48 89 10             \tmov    %rdx,(%rax)\n  410104:\t89 70 08             \tmov    %esi,0x8(%rax)\n  410107:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  41010a:\t89 50 0c             \tmov    %edx,0xc(%rax)\n  41010d:\t89 48 10             \tmov    %ecx,0x10(%rax)\n  410110:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n  410117:\t48 8b 00             \tmov    (%rax),%rax\n  41011a:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  41011e:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n  410125:\t48 89 10             \tmov    %rdx,(%rax)\n  410128:\te9 ab 00 00 00       \tjmpq   4101d8 <get_macro_info+0x266>\n  41012d:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n  410134:\t48 8b 10             \tmov    (%rax),%rdx\n  410137:\t48 89 d0             \tmov    %rdx,%rax\n  41013a:\t48 01 c0             \tadd    %rax,%rax\n  41013d:\t48 01 d0             \tadd    %rdx,%rax\n  410140:\t48 c1 e0 03          \tshl    $0x3,%rax\n  410144:\t48 89 c2             \tmov    %rax,%rdx\n  410147:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41014e:\t48 01 d0             \tadd    %rdx,%rax\n  410151:\t8b 95 6c ff ff ff    \tmov    -0x94(%rbp),%edx\n  410157:\t8d 72 01             \tlea    0x1(%rdx),%esi\n  41015a:\t8b 95 68 ff ff ff    \tmov    -0x98(%rbp),%edx\n  410160:\t8d 4a 01             \tlea    0x1(%rdx),%ecx\n  410163:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  410167:\t48 89 10             \tmov    %rdx,(%rax)\n  41016a:\t89 70 08             \tmov    %esi,0x8(%rax)\n  41016d:\t8b 95 68 ff ff ff    \tmov    -0x98(%rbp),%edx\n  410173:\t89 50 0c             \tmov    %edx,0xc(%rax)\n  410176:\t89 48 10             \tmov    %ecx,0x10(%rax)\n  410179:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n  410180:\t48 8b 00             \tmov    (%rax),%rax\n  410183:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  410187:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n  41018e:\t48 89 10             \tmov    %rdx,(%rax)\n  410191:\teb 45                \tjmp    4101d8 <get_macro_info+0x266>\n  410193:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  410197:\tbe 28 00 00 00       \tmov    $0x28,%esi\n  41019c:\t48 89 c7             \tmov    %rax,%rdi\n  41019f:\te8 d5 f0 ff ff       \tcallq  40f279 <is_char>\n  4101a4:\t85 c0                \ttest   %eax,%eax\n  4101a6:\t74 06                \tje     4101ae <get_macro_info+0x23c>\n  4101a8:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4101ac:\teb 2b                \tjmp    4101d9 <get_macro_info+0x267>\n  4101ae:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4101b2:\tbe 29 00 00 00       \tmov    $0x29,%esi\n  4101b7:\t48 89 c7             \tmov    %rax,%rdi\n  4101ba:\te8 ba f0 ff ff       \tcallq  40f279 <is_char>\n  4101bf:\t85 c0                \ttest   %eax,%eax\n  4101c1:\t74 16                \tje     4101d9 <get_macro_info+0x267>\n  4101c3:\t83 6d fc 01          \tsubl   $0x1,-0x4(%rbp)\n  4101c7:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4101cb:\t75 0c                \tjne    4101d9 <get_macro_info+0x267>\n  4101cd:\t83 bd 6c ff ff ff 00 \tcmpl   $0x0,-0x94(%rbp)\n  4101d4:\t75 0f                \tjne    4101e5 <get_macro_info+0x273>\n  4101d6:\teb 01                \tjmp    4101d9 <get_macro_info+0x267>\n  4101d8:\t90                   \tnop\n  4101d9:\t83 85 68 ff ff ff 01 \taddl   $0x1,-0x98(%rbp)\n  4101e0:\te9 c3 fd ff ff       \tjmpq   40ffa8 <get_macro_info+0x36>\n  4101e5:\t90                   \tnop\n  4101e6:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n  4101ec:\tc9                   \tleaveq \n  4101ed:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_macro_info(__int64 a1, __int64 a2, __int64 a3,\n                                  _QWORD *a4, int a5, unsigned int a6, int a7,\n                                  __int64 a8, int a9) {\n  __int64 v9;\n  __int64 v10;\n  int v16[Number];\n  unsigned int v17;\n  char *v18;\n  int *v19;\n  int v20;\n  int v21;\n  v21 = Number;\n  while (Number) {\n    v20 = x_tokenizer_next_of(a2, v16, Number);\n    if (!v20 || v16[Number] == Number)\n      break;\n    v19 = Number L;\n    if (v16[Number] == Number &&\n        (v19 = (int *)get_macro(a1, a2 + Number)) != Number L &&\n        !(unsigned int)was_visited((const char *)(a2 + Number), a8, a9)) {\n      v18 = strdup((const char *)(a2 + Number));\n      if (*v19 < Number) {\n        v10 = Number L * *a4 + a3;\n        *(_QWORD *)v10 = v18;\n        *(_DWORD *)(v10 + Number) = a5 + Number;\n        *(_DWORD *)(v10 + Number) = a6;\n        *(_DWORD *)(v10 + Number) = a6 + Number;\n        ++*a4;\n      } else if ((unsigned int)tokenizer_peek(a2) == Number) {\n        v17 = a6;\n        a6 = get_macro_info(a1, a2, a3, (_DWORD)a4, a5 + Number, a6 + Number,\n                            (_DWORD)v18, a8, a9);\n        v9 = Number L * *a4 + a3;\n        *(_QWORD *)v9 = v18;\n        *(_DWORD *)(v9 + Number) = a5 + Number;\n        *(_DWORD *)(v9 + Number) = v17;\n        *(_DWORD *)(v9 + Number) = a6 + Number;\n        ++*a4;\n      }\n    } else if (is_char(v16, Number)) {\n      ++v21;\n    } else if (is_char(v16, Number) && !--v21) {\n      if (a5)\n        return a6;\n    }\n    ++a6;\n  }\n  return a6;\n}", "code_t": "unsigned int __cdecl get_macro_info(cpp *cpp, tokenizer *t, macro_info *mi_list,\n                                    size_t *mi_cnt, unsigned int nest,\n                                    unsigned int tpos, const char *name,\n                                    char **visited, unsigned int rec_level) {\n  macro_info *v9;\n  macro_info *v10;\n  token <span class=\"supfact\">tok</span>;\n  unsigned int tpos_save;\n  const char *newname;\n  macro *m;\n  int ret;\n  int brace_lvl;\n  brace_lvl = Number;\n  while (Number) {\n    ret = x_tokenizer_next_of(t, &<span class=\"supfact\">tok</span>, Number);\n    if (!ret || <span class=\"supfact\">tok</span>.type == TT_EOF)\n      break;\n    m = Number L;\n    if (<span class=\"supfact\">tok</span>.type == TT_IDENTIFIER &&\n        (m = get_macro(cpp, t->buf)) != Number L &&\n        !was_visited(t->buf, visited, rec_level)) {\n      newname = strdup(t->buf);\n      if ((m->num_args & Number) != Number) {\n        v10 = &mi_list[*mi_cnt];\n        v10->name = newname;\n        v10->nest = nest + Number;\n        v10->first = tpos;\n        v10->last = tpos + Number;\n        ++*mi_cnt;\n      } else if (tokenizer_peek(t) == Number) {\n        tpos_save = tpos;\n        tpos = get_macro_info(cpp, t, mi_list, mi_cnt, nest + Number,\n                              tpos + Number, newname, visited, rec_level);\n        v9 = &mi_list[*mi_cnt];\n        v9->name = newname;\n        v9->nest = nest + Number;\n        v9->first = tpos_save;\n        v9->last = tpos + Number;\n        ++*mi_cnt;\n      }\n    } else if (is_char(&<span class=\"supfact\">tok</span>, Number)) {\n      ++brace_lvl;\n    } else if (is_char(&<span class=\"supfact\">tok</span>, Number)) {\n      if (!--brace_lvl) {\n        if (nest)\n          return tpos;\n      }\n    }\n    ++tpos;\n  }\n  return tpos;\n}", "var": [{"name": "v16", "type": "int[5]", "pred_name": "newa", "ref_name": "tok", "ref_type": "struct token { tokentype type; uint32_t line; uint32_t column; int value; }"}], "body_in_train": false}]