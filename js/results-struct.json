[{"repo_owner": "Kristoffer", "repo_name": "Xen-4.1.2", "path": "Kristoffer/Xen-4.1.2/33cad91c0dd86247487bf7455fc7960116c96568e29c0377a8dccb4b537a07b0", "path_in_repo": "Kristoffer/Xen-4.1.2/tools/ioemu-qemu-xen/qemu-img", "objdump": "00000000004078d8 <decompress_buffer>:\n  4078d8:\t55                   \tpush   %rbp\n  4078d9:\t48 89 e5             \tmov    %rsp,%rbp\n  4078dc:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  4078e3:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n  4078ea:\t89 b5 74 ff ff ff    \tmov    %esi,-0x8c(%rbp)\n  4078f0:\t48 89 95 68 ff ff ff \tmov    %rdx,-0x98(%rbp)\n  4078f7:\t89 8d 70 ff ff ff    \tmov    %ecx,-0x90(%rbp)\n  4078fd:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  407901:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  407905:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  407909:\tba 70 00 00 00       \tmov    $0x70,%edx\n  40790e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  407913:\t48 89 c7             \tmov    %rax,%rdi\n  407916:\te8 15 b9 ff ff       \tcallq  403230 <memset@plt>\n  40791b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40791f:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n  407926:\t48 89 10             \tmov    %rdx,(%rax)\n  407929:\t8b 95 70 ff ff ff    \tmov    -0x90(%rbp),%edx\n  40792f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  407933:\t89 50 08             \tmov    %edx,0x8(%rax)\n  407936:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40793a:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n  407941:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n  407945:\t8b 95 74 ff ff ff    \tmov    -0x8c(%rbp),%edx\n  40794b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40794f:\t89 50 20             \tmov    %edx,0x20(%rax)\n  407952:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  407956:\tb9 70 00 00 00       \tmov    $0x70,%ecx\n  40795b:\tba 97 3f 42 00       \tmov    $0x423f97,%edx\n  407960:\tbe f4 ff ff ff       \tmov    $0xfffffff4,%esi\n  407965:\t48 89 c7             \tmov    %rax,%rdi\n  407968:\te8 23 bc ff ff       \tcallq  403590 <inflateInit2_@plt>\n  40796d:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  407970:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  407974:\t74 07                \tje     40797d <decompress_buffer+0xa5>\n  407976:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40797b:\teb 61                \tjmp    4079de <decompress_buffer+0x106>\n  40797d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  407981:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  407986:\t48 89 c7             \tmov    %rax,%rdi\n  407989:\te8 52 b7 ff ff       \tcallq  4030e0 <inflate@plt>\n  40798e:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  407991:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  407995:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  407999:\t48 2b 85 78 ff ff ff \tsub    -0x88(%rbp),%rax\n  4079a0:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  4079a3:\t83 7d f4 01          \tcmpl   $0x1,-0xc(%rbp)\n  4079a7:\t74 06                \tje     4079af <decompress_buffer+0xd7>\n  4079a9:\t83 7d f4 fb          \tcmpl   $0xfffffffb,-0xc(%rbp)\n  4079ad:\t75 0b                \tjne    4079ba <decompress_buffer+0xe2>\n  4079af:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  4079b2:\t3b 85 74 ff ff ff    \tcmp    -0x8c(%rbp),%eax\n  4079b8:\t74 13                \tje     4079cd <decompress_buffer+0xf5>\n  4079ba:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4079be:\t48 89 c7             \tmov    %rax,%rdi\n  4079c1:\te8 da b9 ff ff       \tcallq  4033a0 <inflateEnd@plt>\n  4079c6:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4079cb:\teb 11                \tjmp    4079de <decompress_buffer+0x106>\n  4079cd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4079d1:\t48 89 c7             \tmov    %rax,%rdi\n  4079d4:\te8 c7 b9 ff ff       \tcallq  4033a0 <inflateEnd@plt>\n  4079d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4079de:\tc9                   \tleaveq \n  4079df:\tc3                   \tretq   ", "code_s": "__int64 __fastcall decompress_buffer(__int64 a1, int a2, __int64 a3, int a4) {\n  __int64 result;\n  char <span class=\"supfact\">v7</span>[Number];\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  void *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = <span class=\"supfact\">v7</span>;\n  memset(<span class=\"supfact\">v7</span>, Number, sizeof(<span class=\"supfact\">v7</span>));\n  *(_QWORD *)<span class=\"supfact\">s</span> = a3;\n  *((_DWORD *)<span class=\"supfact\">s</span> + Number) = a4;\n  *((_QWORD *)<span class=\"supfact\">s</span> + Number) = a1;\n  *((_DWORD *)<span class=\"supfact\">s</span> + Number) = a2;\n  <span class=\"supfact\">v9</span> = inflateInit2_();\n  if (<span class=\"supfact\">v9</span>)\n    return Number;\n  <span class=\"supfact\">v9</span> = inflate();\n  <span class=\"supfact\">v8</span> = *((_DWORD *)<span class=\"supfact\">s</span> + Number) - a1;\n  if ((<span class=\"supfact\">v9</span> == Number || <span class=\"supfact\">v9</span> == Number) &&\n      <span class=\"supfact\">v8</span> == a2) {\n    inflateEnd();\n    result = Number L;\n  } else {\n    inflateEnd();\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl decompress_buffer(uint8_t *out_buf, int out_buf_size,\n                              const uint8_t *buf, int buf_size) {\n  int result;\n  z_stream <span class=\"supfact\">strm1</span>;\n  int <span class=\"supfact\">out_len</span>;\n  int <span class=\"supfact\">ret</span>;\n  z_stream *<span class=\"supfact\">strm</span>;\n  <span class=\"supfact\">strm</span> = &<span class=\"supfact\">strm1</span>;\n  memset(&<span class=\"supfact\">strm1</span>, Number, sizeof(<span class=\"supfact\">strm1</span>));\n  <span class=\"supfact\">strm</span>->next_in = (Bytef *)buf;\n  <span class=\"supfact\">strm</span>->avail_in = buf_size;\n  <span class=\"supfact\">strm</span>->next_out = out_buf;\n  <span class=\"supfact\">strm</span>->avail_out = out_buf_size;\n  <span class=\"supfact\">ret</span> = inflateInit2_();\n  if (<span class=\"supfact\">ret</span>)\n    return Number;\n  <span class=\"supfact\">ret</span> = inflate();\n  <span class=\"supfact\">out_len</span> =\n      LODWORD(<span class=\"supfact\">strm</span>->next_out) - (_DWORD)out_buf;\n  if ((<span class=\"supfact\">ret</span> == Number || <span class=\"supfact\">ret</span> == Number) &&\n      <span class=\"supfact\">out_len</span> == out_buf_size) {\n    inflateEnd();\n    result = Number;\n  } else {\n    inflateEnd();\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v7", "type": "struct z_stream { Bytef * next_in; uInt avail_in; PADDING (4); uLong total_in; Bytef * next_out; uInt avail_out; PADDING (4); uLong total_out; char * msg; internal_state * state; alloc_func zalloc; free_func zfree; voidpf opaque; int data_type; PADDING (4); uLong adler; uLong reserved; }", "ref_name": "strm1", "ref_type": "struct z_stream { Bytef * next_in; uInt avail_in; PADDING (4); uLong total_in; Bytef * next_out; uInt avail_out; PADDING (4); uLong total_out; char * msg; internal_state * state; alloc_func zalloc; free_func zfree; voidpf opaque; int data_type; PADDING (4); uLong adler; uLong reserved; }"}], "body_in_train": true}, {"repo_owner": "plume-design", "repo_name": "plume-pml", "path": "plume-design/plume-pml/84c2ebddb8bb7434a82d4fc342293a1b72d26e311079fb4e9dda4d55d3584161", "path_in_repo": "plume-design/plume-pml//work/native-debian10-x86_64/bin/utest/test_wm2/unit", "objdump": "0000000000431d99 <pjs_string_from_json>:\n  431d99:\t55                   \tpush   %rbp\n  431d9a:\t48 89 e5             \tmov    %rsp,%rbp\n  431d9d:\t48 83 ec 40          \tsub    $0x40,%rsp\n  431da1:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  431da5:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  431da9:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  431dad:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n  431db1:\t44 89 c0             \tmov    %r8d,%eax\n  431db4:\t4c 89 4d c0          \tmov    %r9,-0x40(%rbp)\n  431db8:\t88 45 cc             \tmov    %al,-0x34(%rbp)\n  431dbb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  431dbf:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  431dc3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  431dc7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  431dcb:\t0f b6 75 cc          \tmovzbl -0x34(%rbp),%esi\n  431dcf:\t48 8b 7d c0          \tmov    -0x40(%rbp),%rdi\n  431dd3:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  431dd7:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  431ddb:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  431ddf:\t49 89 f9             \tmov    %rdi,%r9\n  431de2:\t41 89 f0             \tmov    %esi,%r8d\n  431de5:\t48 89 c6             \tmov    %rax,%rsi\n  431de8:\t48 c7 c0 6a 30 43 00 \tmov    $0x43306a,%rax\n  431def:\t48 89 c7             \tmov    %rax,%rdi\n  431df2:\te8 ae f9 ff ff       \tcallq  4317a5 <pjs_basic_from_json>\n  431df7:\tc9                   \tleaveq \n  431df8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pjs_string_from_json(__int64 a1, __int64 a2, int a3,\n                                        const char *a4, char a5, char *a6) {\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  <span class=\"supfact\">v7</span>[Number] = a1;\n  <span class=\"supfact\">v7</span>[Number] = a2;\n  return pjs_basic_from_json(\n      (unsigned __int8(__fastcall *)(__int64, _QWORD,\n                                     _DWORD *))pjs_string_t_from_json,\n      (__int64)<span class=\"supfact\">v7</span>, a3, a4, a5, a6);\n}", "code_t": "bool __cdecl pjs_string_from_json(char *out, size_t outsz, json_t_0 *js,\n                                  const char *name, bool update, char *err) {\n  pjs_string_args <span class=\"supfact\">args</span>;\n  <span class=\"supfact\">args</span>.data = out;\n  <span class=\"supfact\">args</span>.sz = outsz;\n  return pjs_basic_from_json((pjs_type_from_json_t *)pjs_string_t_from_json,\n                             &<span class=\"supfact\">args</span>, js, name, update, err);\n}", "var": [{"name": "v7", "type": "struct pjs_string_args { char * data; size_t sz; }", "ref_name": "args", "ref_type": "struct pjs_string_args { char * data; size_t sz; }"}], "body_in_train": true}, {"repo_owner": "liushengxi13689209566", "repo_name": "SourceReading", "path": "liushengxi13689209566/SourceReading/cc9e5ecce6635c056cda931a24c4fcf085ac2cd62a037441996d366c55a42a0f", "path_in_repo": "liushengxi13689209566/SourceReading/redis-3.0-annotated/deps/lua/src/lua", "objdump": "000000000040f9d1 <exp1>:\n  40f9d1:\t55                   \tpush   %rbp\n  40f9d2:\t48 89 e5             \tmov    %rsp,%rbp\n  40f9d5:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40f9d9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  40f9dd:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  40f9e1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40f9e5:\t48 89 d6             \tmov    %rdx,%rsi\n  40f9e8:\t48 89 c7             \tmov    %rax,%rdi\n  40f9eb:\te8 5b f9 ff ff       \tcallq  40f34b <expr>\n  40f9f0:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  40f9f3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40f9f6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40f9fa:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40f9fe:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  40fa02:\t48 89 d6             \tmov    %rdx,%rsi\n  40fa05:\t48 89 c7             \tmov    %rax,%rdi\n  40fa08:\te8 04 a4 00 00       \tcallq  419e11 <luaK_exp2nextreg>\n  40fa0d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40fa10:\tc9                   \tleaveq \n  40fa11:\tc3                   \tretq   ", "code_s": "__int64 __fastcall exp1(__int64 a1) {\n  int <span class=\"supfact\">v2</span>[Number];\n  unsigned int <span class=\"supfact\">v3</span>;\n  expr(a1, (__int64)<span class=\"supfact\">v2</span>);\n  <span class=\"supfact\">v3</span> = <span class=\"supfact\">v2</span>[Number];\n  luaK_exp2nextreg(*(_QWORD *)(a1 + Number), <span class=\"supfact\">v2</span>);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "int __cdecl exp1(LexState_0 *ls) {\n  expdesc_0 <span class=\"supfact\">e</span>;\n  int <span class=\"supfact\">k</span>;\n  expr(ls, &<span class=\"supfact\">e</span>);\n  <span class=\"supfact\">k</span> = <span class=\"supfact\">e</span>.<span class=\"supfact\">k</span>;\n  luaK_exp2nextreg(ls->fs, &<span class=\"supfact\">e</span>);\n  return <span class=\"supfact\">k</span>;\n}", "var": [{"name": "v2", "type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }", "ref_name": "e", "ref_type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }"}], "body_in_train": true}, {"repo_owner": "AndersTrier", "repo_name": "QEMU-bitflip", "path": "AndersTrier/QEMU-bitflip/726e3118cec61ab13c01fd4f99e6155cde0bd0e9e241fef8a0c99b804a31ee00", "path_in_repo": "AndersTrier/QEMU-bitflip//migration/tls.o", "objdump": "0000000000000179 <trace_migration_tls_outgoing_handshake_complete>:\n 179:\t55                   \tpush   %rbp\n 17a:\t48 89 e5             \tmov    %rsp,%rbp\n 17d:\t41 54                \tpush   %r12\n 17f:\t53                   \tpush   %rbx\n 180:\t48 83 ec 20          \tsub    $0x20,%rsp\n 184:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 18b:\t00 00 \n 18d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 191:\t31 c0                \txor    %eax,%eax\n 193:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 199 <trace_migration_tls_outgoing_handshake_complete+0x20>\n 199:\t85 c0                \ttest   %eax,%eax\n 19b:\t0f 95 c0             \tsetne  %al\n 19e:\t0f b6 c0             \tmovzbl %al,%eax\n 1a1:\t48 85 c0             \ttest   %rax,%rax\n 1a4:\t74 5b                \tje     201 <trace_migration_tls_outgoing_handshake_complete+0x88>\n 1a6:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 1ad <trace_migration_tls_outgoing_handshake_complete+0x34>\n 1ad:\t66 85 c0             \ttest   %ax,%ax\n 1b0:\t74 4f                \tje     201 <trace_migration_tls_outgoing_handshake_complete+0x88>\n 1b2:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 1b6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1bb:\t48 89 c7             \tmov    %rax,%rdi\n 1be:\te8 00 00 00 00       \tcallq  1c3 <trace_migration_tls_outgoing_handshake_complete+0x4a>\n 1c3:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n 1c8:\te8 33 fe ff ff       \tcallq  0 <qemu_loglevel_mask>\n 1cd:\t0f b6 c0             \tmovzbl %al,%eax\n 1d0:\t48 85 c0             \ttest   %rax,%rax\n 1d3:\t74 2c                \tje     201 <trace_migration_tls_outgoing_handshake_complete+0x88>\n 1d5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1d9:\t49 89 c4             \tmov    %rax,%r12\n 1dc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 1e0:\t48 89 c3             \tmov    %rax,%rbx\n 1e3:\te8 00 00 00 00       \tcallq  1e8 <trace_migration_tls_outgoing_handshake_complete+0x6f>\n 1e8:\t4c 89 e1             \tmov    %r12,%rcx\n 1eb:\t48 89 da             \tmov    %rbx,%rdx\n 1ee:\t89 c6                \tmov    %eax,%esi\n 1f0:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1f7 <trace_migration_tls_outgoing_handshake_complete+0x7e>\n 1f7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1fc:\te8 00 00 00 00       \tcallq  201 <trace_migration_tls_outgoing_handshake_complete+0x88>\n 201:\t90                   \tnop\n 202:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 206:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 20d:\t00 00 \n 20f:\t74 05                \tje     216 <trace_migration_tls_outgoing_handshake_complete+0x9d>\n 211:\te8 00 00 00 00       \tcallq  216 <trace_migration_tls_outgoing_handshake_complete+0x9d>\n 216:\t48 83 c4 20          \tadd    $0x20,%rsp\n 21a:\t5b                   \tpop    %rbx\n 21b:\t41 5c                \tpop    %r12\n 21d:\t5d                   \tpop    %rbp\n 21e:\tc3                   \tretq   ", "code_s": "unsigned __int64 trace_migration_tls_outgoing_handshake_complete() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v0 = <span class=\"supfact\">tv</span>.tv_usec;\n        v1 = <span class=\"supfact\">tv</span>.tv_sec;\n        v2 = getpid();\n        qemu_log(String, v2, v1, v0);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v5</span>;\n}", "code_t": "void __cdecl trace_migration_tls_outgoing_handshake_complete() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v0 = <span class=\"supfact\">_now</span>.tv_usec;\n      v1 = <span class=\"supfact\">_now</span>.tv_sec;\n      v2 = getpid();\n      qemu_log(String, v2, v1, v0);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "trakons", "repo_name": "QEMU-s5l89xx-test", "path": "trakons/QEMU-s5l89xx-test/2d53edb2434ec64b313381a8520f55f785991cf5b2474d10030c414f3da403e7", "path_in_repo": "trakons/QEMU-s5l89xx-test//qemu-io", "objdump": "000000000041ae9c <spawn_thread>:\n  41ae9c:\t55                   \tpush   %rbp\n  41ae9d:\t48 89 e5             \tmov    %rsp,%rbp\n  41aea0:\t48 81 ec 10 01 00 00 \tsub    $0x110,%rsp\n  41aea7:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  41aeae:\t00 00 \n  41aeb0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  41aeb4:\t31 c0                \txor    %eax,%eax\n  41aeb6:\t8b 05 dc 56 05 00    \tmov    0x556dc(%rip),%eax        # 470598 <cur_threads>\n  41aebc:\t83 c0 01             \tadd    $0x1,%eax\n  41aebf:\t89 05 d3 56 05 00    \tmov    %eax,0x556d3(%rip)        # 470598 <cur_threads>\n  41aec5:\t8b 05 d1 56 05 00    \tmov    0x556d1(%rip),%eax        # 47059c <idle_threads>\n  41aecb:\t83 c0 01             \tadd    $0x1,%eax\n  41aece:\t89 05 c8 56 05 00    \tmov    %eax,0x556c8(%rip)        # 47059c <idle_threads>\n  41aed4:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  41aedb:\t48 89 c7             \tmov    %rax,%rdi\n  41aede:\te8 4d 82 fe ff       \tcallq  403130 <sigfillset@plt>\n  41aee3:\t85 c0                \ttest   %eax,%eax\n  41aee5:\t74 0a                \tje     41aef1 <spawn_thread+0x55>\n  41aee7:\tbf 61 5f 45 00       \tmov    $0x455f61,%edi\n  41aeec:\te8 76 f5 ff ff       \tcallq  41a467 <die>\n  41aef1:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  41aef8:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  41aeff:\t48 89 c6             \tmov    %rax,%rsi\n  41af02:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  41af07:\te8 24 83 fe ff       \tcallq  403230 <sigprocmask@plt>\n  41af0c:\t85 c0                \ttest   %eax,%eax\n  41af0e:\t74 0a                \tje     41af1a <spawn_thread+0x7e>\n  41af10:\tbf 6c 5f 45 00       \tmov    $0x455f6c,%edi\n  41af15:\te8 4d f5 ff ff       \tcallq  41a467 <die>\n  41af1a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  41af1f:\tba 67 ac 41 00       \tmov    $0x41ac67,%edx\n  41af24:\tbe 60 05 47 00       \tmov    $0x470560,%esi\n  41af29:\tbf 50 05 47 00       \tmov    $0x470550,%edi\n  41af2e:\te8 ee f6 ff ff       \tcallq  41a621 <thread_create>\n  41af33:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  41af3a:\tba 00 00 00 00       \tmov    $0x0,%edx\n  41af3f:\t48 89 c6             \tmov    %rax,%rsi\n  41af42:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  41af47:\te8 e4 82 fe ff       \tcallq  403230 <sigprocmask@plt>\n  41af4c:\t85 c0                \ttest   %eax,%eax\n  41af4e:\t74 0a                \tje     41af5a <spawn_thread+0xbe>\n  41af50:\tbf 78 5f 45 00       \tmov    $0x455f78,%edi\n  41af55:\te8 0d f5 ff ff       \tcallq  41a467 <die>\n  41af5a:\t90                   \tnop\n  41af5b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41af5f:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n  41af66:\t00 00 \n  41af68:\t74 05                \tje     41af6f <spawn_thread+0xd3>\n  41af6a:\te8 f1 85 fe ff       \tcallq  403560 <__stack_chk_fail@plt>\n  41af6f:\tc9                   \tleaveq \n  41af70:\tc3                   \tretq   ", "code_s": "unsigned __int64 spawn_thread() {\n  sigset_t <span class=\"supfact\">set</span>;\n  sigset_t <span class=\"supfact\">oset</span>;\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = __readfsqword(Number);\n  ++cur_threads;\n  ++idle_threads;\n  if (sigfillset(&<span class=\"supfact\">set</span>))\n    die(String);\n  if (sigprocmask(Number, &<span class=\"supfact\">set</span>, &<span class=\"supfact\">oset</span>))\n    die(String);\n  thread_create(thread_id, &attr, (void *(*)(void *))aio_thread, Number L);\n  if (sigprocmask(Number, &<span class=\"supfact\">oset</span>, Number L))\n    die(String);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v3</span>;\n}", "code_t": "void __cdecl spawn_thread() {\n  sigset_t <span class=\"supfact\">set</span>;\n  sigset_t <span class=\"supfact\">oldset</span>;\n  unsigned __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = __readfsqword(Number);\n  ++cur_threads;\n  ++idle_threads;\n  if (sigfillset(&<span class=\"supfact\">set</span>))\n    die(String);\n  if (sigprocmask(Number, &<span class=\"supfact\">set</span>, &<span class=\"supfact\">oldset</span>))\n    die(String);\n  thread_create(&thread_id, &attr, (void *(*)(void *))aio_thread, Number L);\n  if (sigprocmask(Number, &<span class=\"supfact\">oldset</span>, Number L))\n    die(String);\n}", "var": [{"name": "oset", "type": "struct sigset_t { unsigned __int64[16] __val; }", "ref_name": "oldset", "ref_type": "struct sigset_t { unsigned __int64[16] __val; }"}, {"name": "set", "type": "struct sigset_t { unsigned __int64[16] __val; }", "ref_name": "set", "ref_type": "struct sigset_t { unsigned __int64[16] __val; }"}], "body_in_train": true}, {"repo_owner": "dpryan79", "repo_name": "SE-MEI", "path": "dpryan79/SE-MEI/447bac0e3a81153386b7ce74913d28bb2ca799707ffd436a352fa95e1a93d6b4", "path_in_repo": "dpryan79/SE-MEI/htslib/htsfile", "objdump": "0000000000456243 <file_exists>:\n  456243:\t55                   \tpush   %rbp\n  456244:\t48 89 e5             \tmov    %rsp,%rbp\n  456247:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  45624e:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n  456255:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  45625c:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  456263:\t48 89 d6             \tmov    %rdx,%rsi\n  456266:\t48 89 c7             \tmov    %rax,%rdi\n  456269:\te8 62 f1 01 00       \tcallq  4753d0 <__stat>\n  45626e:\t85 c0                \ttest   %eax,%eax\n  456270:\t0f 94 c0             \tsete   %al\n  456273:\t0f b6 c0             \tmovzbl %al,%eax\n  456276:\tc9                   \tleaveq \n  456277:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall file_exists(char *a1) {\n  struct stat <span class=\"supfact\">v2</span>;\n  return (unsigned int)stat(a1, &<span class=\"supfact\">v2</span>) == Number;\n}", "code_t": "int __cdecl file_exists(char *fn) {\n  stat <span class=\"supfact\">buf</span>;\n  return stat_0(fn, &<span class=\"supfact\">buf</span>) == Number;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "buf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "bigbluesky123", "repo_name": "decaf-platform", "path": "bigbluesky123/decaf-platform/8cc14b367eac5ac6e50a063c8e49a6bd121d69bcfdc7e39e5444ba60a3907380", "path_in_repo": "bigbluesky123/decaf-platform/shared/sleuthkit/src/afflib/lib/aftest", "objdump": "00000000004056e6 <_ZL17afd_identify_filePKc>:\n  4056e6:\t55                   \tpush   %rbp\n  4056e7:\t48 89 e5             \tmov    %rsp,%rbp\n  4056ea:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  4056f1:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  4056f8:\t48 83 bd 58 ff ff ff \tcmpq   $0x0,-0xa8(%rbp)\n  4056ff:\t00 \n  405700:\t74 0e                \tje     405710 <_ZL17afd_identify_filePKc+0x2a>\n  405702:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  405709:\t0f b6 00             \tmovzbl (%rax),%eax\n  40570c:\t84 c0                \ttest   %al,%al\n  40570e:\t75 0a                \tjne    40571a <_ZL17afd_identify_filePKc+0x34>\n  405710:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405715:\te9 f8 00 00 00       \tjmpq   405812 <_ZL17afd_identify_filePKc+0x12c>\n  40571a:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  405721:\t48 89 c7             \tmov    %rax,%rdi\n  405724:\te8 b7 c9 ff ff       \tcallq  4020e0 <strlen@plt>\n  405729:\t48 83 c0 01          \tadd    $0x1,%rax\n  40572d:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  405731:\tb8 10 00 00 00       \tmov    $0x10,%eax\n  405736:\t48 83 e8 01          \tsub    $0x1,%rax\n  40573a:\t48 01 d0             \tadd    %rdx,%rax\n  40573d:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  405742:\tba 00 00 00 00       \tmov    $0x0,%edx\n  405747:\t48 f7 f1             \tdiv    %rcx\n  40574a:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n  40574e:\t48 29 c4             \tsub    %rax,%rsp\n  405751:\t48 89 e0             \tmov    %rsp,%rax\n  405754:\t48 83 c0 0f          \tadd    $0xf,%rax\n  405758:\t48 c1 e8 04          \tshr    $0x4,%rax\n  40575c:\t48 c1 e0 04          \tshl    $0x4,%rax\n  405760:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  405764:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  40576b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40576f:\t48 89 d6             \tmov    %rdx,%rsi\n  405772:\t48 89 c7             \tmov    %rax,%rdi\n  405775:\te8 b6 ca ff ff       \tcallq  402230 <strcpy@plt>\n  40577a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40577e:\t48 89 c7             \tmov    %rax,%rdi\n  405781:\te8 5a c9 ff ff       \tcallq  4020e0 <strlen@plt>\n  405786:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n  40578a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40578e:\t48 01 d0             \tadd    %rdx,%rax\n  405791:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  405795:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  405799:\t0f b6 00             \tmovzbl (%rax),%eax\n  40579c:\t3c 2f                \tcmp    $0x2f,%al\n  40579e:\t75 07                \tjne    4057a7 <_ZL17afd_identify_filePKc+0xc1>\n  4057a0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4057a4:\tc6 00 00             \tmovb   $0x0,(%rax)\n  4057a7:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  4057ae:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4057b2:\t48 89 d6             \tmov    %rdx,%rsi\n  4057b5:\t48 89 c7             \tmov    %rax,%rdi\n  4057b8:\te8 d3 9f 00 00       \tcallq  40f790 <stat64>\n  4057bd:\t85 c0                \ttest   %eax,%eax\n  4057bf:\t0f 94 c0             \tsete   %al\n  4057c2:\t84 c0                \ttest   %al,%al\n  4057c4:\t74 30                \tje     4057f6 <_ZL17afd_identify_filePKc+0x110>\n  4057c6:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n  4057cc:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  4057d1:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n  4057d6:\t75 17                \tjne    4057ef <_ZL17afd_identify_filePKc+0x109>\n  4057d8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4057dc:\t48 89 c7             \tmov    %rax,%rdi\n  4057df:\te8 ce fd ff ff       \tcallq  4055b2 <_ZL12last4_is_afdPKc>\n  4057e4:\t84 c0                \ttest   %al,%al\n  4057e6:\t74 07                \tje     4057ef <_ZL17afd_identify_filePKc+0x109>\n  4057e8:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4057ed:\teb 23                \tjmp    405812 <_ZL17afd_identify_filePKc+0x12c>\n  4057ef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4057f4:\teb 1c                \tjmp    405812 <_ZL17afd_identify_filePKc+0x12c>\n  4057f6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4057fa:\t48 89 c7             \tmov    %rax,%rdi\n  4057fd:\te8 b0 fd ff ff       \tcallq  4055b2 <_ZL12last4_is_afdPKc>\n  405802:\t84 c0                \ttest   %al,%al\n  405804:\t74 07                \tje     40580d <_ZL17afd_identify_filePKc+0x127>\n  405806:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40580b:\teb 05                \tjmp    405812 <_ZL17afd_identify_filePKc+0x12c>\n  40580d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405812:\tc9                   \tleaveq \n  405813:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall afd_identify_file(const char *a1) {\n  void *v2;\n  size_t v3;\n  char *<span class=\"supfact\">s</span>;\n  struct stat64 <span class=\"supfact\">v5</span>;\n  char *<span class=\"supfact\">v6</span>;\n  char *<span class=\"supfact\">dest</span>;\n  <span class=\"supfact\">s</span> = (char *)a1;\n  if (!a1 || !*<span class=\"supfact\">s</span>)\n    return Number L;\n  v2 = alloca(Number * ((strlen(<span class=\"supfact\">s</span>) + Number) / Number));\n  <span class=\"supfact\">dest</span> =\n      (char *)(Number *\n               (((unsigned __int64)&<span class=\"supfact\">s</span> + Number) >> Number));\n  strcpy(<span class=\"supfact\">dest</span>, <span class=\"supfact\">s</span>);\n  v3 = strlen(<span class=\"supfact\">dest</span>);\n  <span class=\"supfact\">v6</span> = &<span class=\"supfact\">dest</span>[v3 - Number];\n  if (*<span class=\"supfact\">v6</span> == Number)\n    *<span class=\"supfact\">v6</span> = Number;\n  if ((unsigned int)stat64(<span class=\"supfact\">dest</span>, &<span class=\"supfact\">v5</span>))\n    return last4_is_afd(<span class=\"supfact\">dest</span>);\n  return (<span class=\"supfact\">v5</span>.st_mode & Number) == Number &&\n         last4_is_afd(<span class=\"supfact\">dest</span>);\n}", "code_t": "int __cdecl afd_identify_file(const char *fn_) {\n  void *v2;\n  size_t v3;\n  const char *<span class=\"supfact\">fn_a</span>;\n  stat <span class=\"supfact\">sb</span>;\n  char *<span class=\"supfact\">lastc</span>;\n  char *<span class=\"supfact\">fn</span>;\n  <span class=\"supfact\">fn_a</span> = fn_;\n  if (!fn_ || !*<span class=\"supfact\">fn_a</span>)\n    return Number;\n  v2 = alloca(Number * ((strlen(<span class=\"supfact\">fn_a</span>) + Number) / Number));\n  <span class=\"supfact\">fn</span> =\n      (char *)(Number *\n               (((unsigned __int64)&<span class=\"supfact\">fn_a</span> + Number) >> Number));\n  strcpy(<span class=\"supfact\">fn</span>, <span class=\"supfact\">fn_a</span>);\n  v3 = strlen(<span class=\"supfact\">fn</span>);\n  <span class=\"supfact\">lastc</span> = &<span class=\"supfact\">fn</span>[v3 - Number];\n  if (*<span class=\"supfact\">lastc</span> == Number)\n    *<span class=\"supfact\">lastc</span> = Number;\n  if ((unsigned int)stat64(<span class=\"supfact\">fn</span>,\n                           (struct stat64 *)&<span class=\"supfact\">sb</span>))\n    return last4_is_afd(<span class=\"supfact\">fn</span>);\n  return (<span class=\"supfact\">sb</span>.st_mode & Number) == Number &&\n         last4_is_afd(<span class=\"supfact\">fn</span>);\n}", "var": [{"name": "v5", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "sb", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/560880a0d78a16c1d09b1d26c617d93994fcc3deea10e346cbe2cb3ba3e3c537", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/royalmah.o", "objdump": "0000000000016cb6 <_ZL32construct_machine_config_ippatsuR14machine_configP8device_t>:\n   16cb6:\t55                   \tpush   %rbp\n   16cb7:\t48 89 e5             \tmov    %rsp,%rbp\n   16cba:\t53                   \tpush   %rbx\n   16cbb:\t48 83 ec 68          \tsub    $0x68,%rsp\n   16cbf:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   16cc3:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n   16cc7:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   16cce:\t00 \n   16ccf:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   16cd3:\t48 89 c7             \tmov    %rax,%rdi\n   16cd6:\te8 00 00 00 00       \tcallq  16cdb <_ZL32construct_machine_config_ippatsuR14machine_configP8device_t+0x25>\n   16cdb:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n   16cdf:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   16ce3:\t48 89 d6             \tmov    %rdx,%rsi\n   16ce6:\t48 89 c7             \tmov    %rax,%rdi\n   16ce9:\te8 f4 fc ff ff       \tcallq  169e2 <_ZL33construct_machine_config_dondenmjR14machine_configP8device_t>\n   16cee:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n   16cf2:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n   16cf6:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   16cfa:\tba 00 00 00 00       \tmov    $0x0,%edx\n   16cff:\t48 89 ce             \tmov    %rcx,%rsi\n   16d02:\t48 89 c7             \tmov    %rax,%rdi\n   16d05:\te8 00 00 00 00       \tcallq  16d0a <_ZL32construct_machine_config_ippatsuR14machine_configP8device_t+0x54>\n   16d0a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   16d0e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   16d12:\tba 00 00 00 00       \tmov    $0x0,%edx\n   16d17:\tbe 02 00 00 00       \tmov    $0x2,%esi\n   16d1c:\t48 89 c7             \tmov    %rax,%rdi\n   16d1f:\te8 00 00 00 00       \tcallq  16d24 <_ZL32construct_machine_config_ippatsuR14machine_configP8device_t+0x6e>\n   16d24:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n   16d28:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   16d2c:\t48 89 c7             \tmov    %rax,%rdi\n   16d2f:\te8 00 00 00 00       \tcallq  16d34 <_ZL32construct_machine_config_ippatsuR14machine_configP8device_t+0x7e>\n   16d34:\t48 89 d8             \tmov    %rbx,%rax\n   16d37:\teb 1a                \tjmp    16d53 <_ZL32construct_machine_config_ippatsuR14machine_configP8device_t+0x9d>\n   16d39:\t48 89 c3             \tmov    %rax,%rbx\n   16d3c:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   16d40:\t48 89 c7             \tmov    %rax,%rdi\n   16d43:\te8 00 00 00 00       \tcallq  16d48 <_ZL32construct_machine_config_ippatsuR14machine_configP8device_t+0x92>\n   16d48:\t48 89 d8             \tmov    %rbx,%rax\n   16d4b:\t48 89 c7             \tmov    %rax,%rdi\n   16d4e:\te8 00 00 00 00       \tcallq  16d53 <_ZL32construct_machine_config_ippatsuR14machine_configP8device_t+0x9d>\n   16d53:\t48 83 c4 68          \tadd    $0x68,%rsp\n   16d57:\t5b                   \tpop    %rbx\n   16d58:\t5d                   \tpop    %rbp\n   16d59:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_ippatsu(machine_config *a1,\n                                                      device_t *a2) {\n  device_t *<span class=\"supfact\">v3</span>;\n  char <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = Number L;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">v3</span> = construct_machine_config_dondenmj(a1, a2);\n  <span class=\"supfact\">v5</span> =\n      machine_config device_find(a1, <span class=\"supfact\">v3</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">v5</span>, Number L, construct_address_map_ippatsu_iomap);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "device_t *__cdecl construct_machine_config_ippatsu(machine_config *config,\n                                                   device_t *owner) {\n  void(__fastcall * v2)(address_map *, const device_t *);\n  device_t *<span class=\"supfact\">ownera</span>;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *<span class=\"supfact\">device</span>;\n  <span class=\"supfact\">device</span> = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  <span class=\"supfact\">ownera</span> = construct_machine_config_dondenmj(config, owner);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, (device_t *)((char *)&loc_1 + Number),\n      (address_spacenum)construct_address_map_ippatsu_iomap, v2);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return <span class=\"supfact\">ownera</span>;\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/a6c0476d37fab0a2016b706bb595a9db57bad22bae2083133c2d1eeb6cb12f1c", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_events_584896b4.o", "objdump": "", "code_s": "void __fastcall juce\n    LeakedObjectDetector<juce InterprocessConnection ConnectionThread>\n        LeakCounter ~LeakCounter(void *a1) {\n  __int64 v1;\n  juce InterprocessConnection ConnectionThread *v2;\n  __int64 v3;\n  const char *v4;\n  int v5;\n  char <span class=\"supfact\">v6</span>[Number];\n  if (*(int *)a1 > Number) {\n    juce String String((juce String *)<span class=\"supfact\">v6</span>);\n    v1 = juce operator<<(<span class=\"supfact\">v6</span>, String);\n    v2 = (juce InterprocessConnection ConnectionThread *)juce operator<<(\n        v1, *(unsigned int *)a1);\n    v3 = juce operator<<(v2, String);\n    v4 = juce LeakedObjectDetector<juce InterprocessConnection ConnectionThread>\n        getLeakedObjectClassName(v2);\n    juce operator<<(v3, v4);\n    juce Logger outputDebugString((juce Logger *)<span class=\"supfact\">v6</span>,\n                                  (const juce String *)v4);\n    juce String ~String((juce String *)<span class=\"supfact\">v6</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_5B + Number, v5);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  juce Atomic<int> ~Atomic();\n}", "code_t": "void __cdecl juce\n    LeakedObjectDetector<juce InterprocessConnection ConnectionThread>\n        LeakCounter ~LeakCounter(juce LeakedObjectDetector<\n                                 juce InterprocessConnection ConnectionThread>\n                                     LeakCounter *const this) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  const char *v4;\n  int v5;\n  juce String <span class=\"supfact\">tempDbgBuf</span>;\n  if (this->numObjects.value > Number) {\n    juce String String(&<span class=\"supfact\">tempDbgBuf</span>);\n    v1 = juce operator<<(&<span class=\"supfact\">tempDbgBuf</span>, String);\n    v2 = juce operator<<(v1, (unsigned int)this->numObjects.value);\n    v3 = juce operator<<(v2, String);\n    v4 = juce LeakedObjectDetector<juce InterprocessConnection ConnectionThread>\n    getLeakedObjectClassName();\n    juce operator<<(v3, v4);\n    juce Logger outputDebugString((juce Logger *)&<span class=\"supfact\">tempDbgBuf</span>,\n                                  (const juce String *)v4);\n    juce String ~String(&<span class=\"supfact\">tempDbgBuf</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_5B + Number, v5);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  juce Atomic<int> ~Atomic(&this->numObjects);\n}", "var": [{"name": "v6", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "tempDbgBuf", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}], "body_in_train": false}, {"repo_owner": "LomoX-Offical", "repo_name": "nginx-openresty-windows", "path": "LomoX-Offical/nginx-openresty-windows/97ab5d7a74094a62a3e36e68ed64113990b62bd14f9788633ff97d8cd8161316", "path_in_repo": "LomoX-Offical/nginx-openresty-windows/src/nginx/objs/lib/openssl/demos/tunala/ip.o", "objdump": "000000000000012e <ip_create_connection_split>:\n 12e:\t55                   \tpush   %rbp\n 12f:\t48 89 e5             \tmov    %rsp,%rbp\n 132:\t48 83 ec 30          \tsub    $0x30,%rsp\n 136:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 13a:\t89 f0                \tmov    %esi,%eax\n 13c:\t66 89 45 d4          \tmov    %ax,-0x2c(%rbp)\n 140:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n 147:\tba 00 00 00 00       \tmov    $0x0,%edx\n 14c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 151:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 156:\te8 00 00 00 00       \tcallq  15b <ip_create_connection_split+0x2d>\n 15b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 15e:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n 162:\t0f 84 8b 00 00 00    \tje     1f3 <ip_create_connection_split+0xc5>\n 168:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 16b:\tba 00 00 00 00       \tmov    $0x0,%edx\n 170:\tbe 03 00 00 00       \tmov    $0x3,%esi\n 175:\t89 c7                \tmov    %eax,%edi\n 177:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 17c:\te8 00 00 00 00       \tcallq  181 <ip_create_connection_split+0x53>\n 181:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 184:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n 188:\t78 6c                \tjs     1f6 <ip_create_connection_split+0xc8>\n 18a:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 18d:\t80 cc 08             \tor     $0x8,%ah\n 190:\t89 c2                \tmov    %eax,%edx\n 192:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 195:\tbe 04 00 00 00       \tmov    $0x4,%esi\n 19a:\t89 c7                \tmov    %eax,%edi\n 19c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1a1:\te8 00 00 00 00       \tcallq  1a6 <ip_create_connection_split+0x78>\n 1a6:\t85 c0                \ttest   %eax,%eax\n 1a8:\t78 4c                \tjs     1f6 <ip_create_connection_split+0xc8>\n 1aa:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n 1b0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1b4:\t8b 00                \tmov    (%rax),%eax\n 1b6:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 1b9:\t0f b7 45 d4          \tmovzwl -0x2c(%rbp),%eax\n 1bd:\t89 c7                \tmov    %eax,%edi\n 1bf:\te8 00 00 00 00       \tcallq  1c4 <ip_create_connection_split+0x96>\n 1c4:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n 1c8:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n 1cc:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 1cf:\tba 10 00 00 00       \tmov    $0x10,%edx\n 1d4:\t48 89 ce             \tmov    %rcx,%rsi\n 1d7:\t89 c7                \tmov    %eax,%edi\n 1d9:\te8 00 00 00 00       \tcallq  1de <ip_create_connection_split+0xb0>\n 1de:\t85 c0                \ttest   %eax,%eax\n 1e0:\t74 0c                \tje     1ee <ip_create_connection_split+0xc0>\n 1e2:\te8 00 00 00 00       \tcallq  1e7 <ip_create_connection_split+0xb9>\n 1e7:\t8b 00                \tmov    (%rax),%eax\n 1e9:\t83 f8 73             \tcmp    $0x73,%eax\n 1ec:\t75 0b                \tjne    1f9 <ip_create_connection_split+0xcb>\n 1ee:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 1f1:\teb 1c                \tjmp    20f <ip_create_connection_split+0xe1>\n 1f3:\t90                   \tnop\n 1f4:\teb 04                \tjmp    1fa <ip_create_connection_split+0xcc>\n 1f6:\t90                   \tnop\n 1f7:\teb 01                \tjmp    1fa <ip_create_connection_split+0xcc>\n 1f9:\t90                   \tnop\n 1fa:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n 1fe:\t74 0a                \tje     20a <ip_create_connection_split+0xdc>\n 200:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 203:\t89 c7                \tmov    %eax,%edi\n 205:\te8 00 00 00 00       \tcallq  20a <ip_create_connection_split+0xdc>\n 20a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 20f:\tc9                   \tleaveq \n 210:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ip_create_connection_split(_DWORD *a1, uint16_t a2) {\n  unsigned int v2;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n  if (<span class=\"supfact\">fd</span> != Number) {\n    <span class=\"supfact\">v5</span> = fcntl(<span class=\"supfact\">fd</span>, Number, Number L);\n    if (<span class=\"supfact\">v5</span> >= Number) {\n      v2 = <span class=\"supfact\">v5</span>;\n      BYTE1(v2) = BYTE1(<span class=\"supfact\">v5</span>) | Number;\n      if (fcntl(<span class=\"supfact\">fd</span>, Number, v2) >= Number) {\n        <span class=\"supfact\">addr</span>.sa_family = Number;\n        *(_DWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = *a1;\n        *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(a2);\n        if (!connect(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">addr</span>, Number) ||\n            *_errno_location() == Number)\n          return (unsigned int)<span class=\"supfact\">fd</span>;\n      }\n    }\n  }\n  if (<span class=\"supfact\">fd</span> != Number)\n    close(<span class=\"supfact\">fd</span>);\n  return Number;\n}", "code_t": "int __cdecl ip_create_connection_split(const char *ip_0,\n                                       unsigned __int16 port) {\n  unsigned int v2;\n  sockaddr_in <span class=\"supfact\">in_addr</span>;\n  int <span class=\"supfact\">flags</span>;\n  int <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n  if (<span class=\"supfact\">fd</span> != Number) {\n    <span class=\"supfact\">flags</span> = fcntl(<span class=\"supfact\">fd</span>, Number, Number L);\n    if (<span class=\"supfact\">flags</span> >= Number) {\n      v2 = <span class=\"supfact\">flags</span>;\n      BYTE1(v2) = BYTE1(<span class=\"supfact\">flags</span>) | Number;\n      if (fcntl(<span class=\"supfact\">fd</span>, Number, v2) >= Number) {\n        <span class=\"supfact\">in_addr</span>.sin_family = Number;\n        <span class=\"supfact\">in_addr</span>.sin_addr.s_addr = *(_DWORD *)ip_0;\n        <span class=\"supfact\">in_addr</span>.sin_port = htons(port);\n        if (!connect(<span class=\"supfact\">fd</span>,\n                     (const struct sockaddr *)&<span class=\"supfact\">in_addr</span>,\n                     Number) ||\n            *_errno_location() == Number)\n          return <span class=\"supfact\">fd</span>;\n      }\n    }\n  }\n  if (<span class=\"supfact\">fd</span> != Number)\n    close(<span class=\"supfact\">fd</span>);\n  return Number;\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "in_addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": true}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/edda25612abaaa41114c5e822c726229fc3f10906699dae6fea2b33a38aa24a5", "path_in_repo": "eerimoq/pumbaa/simba/tst/filesystems/fat16/build/linux/obj/usr/src/repo/simba/src/kernel/sys.o", "objdump": "0000000000000000 <sys_port_ticker>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <sys_port_ticker+0xd>\n   d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  11:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18 <sys_port_ticker+0x18>\n  18:\t48 83 c0 01          \tadd    $0x1,%rax\n  1c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 23 <sys_port_ticker+0x23>\n  23:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  28:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  2d:\te8 00 00 00 00       \tcallq  32 <sys_port_ticker+0x32>\n  32:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 39 <sys_port_ticker+0x39>\n  39:\t48 83 c0 01          \tadd    $0x1,%rax\n  3d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 44 <sys_port_ticker+0x44>\n  44:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  49:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4e:\te8 00 00 00 00       \tcallq  53 <sys_port_ticker+0x53>\n  53:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a <sys_port_ticker+0x5a>\n  5a:\t48 83 c0 01          \tadd    $0x1,%rax\n  5e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 65 <sys_port_ticker+0x65>\n  65:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  6a:\te8 00 00 00 00       \tcallq  6f <sys_port_ticker+0x6f>\n  6f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 76 <sys_port_ticker+0x76>\n  76:\t48 83 c0 01          \tadd    $0x1,%rax\n  7a:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 81 <sys_port_ticker+0x81>\n  81:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  85:\t48 89 c6             \tmov    %rax,%rsi\n  88:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  8d:\te8 00 00 00 00       \tcallq  92 <sys_port_ticker+0x92>\n  92:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 99 <sys_port_ticker+0x99>\n  99:\t48 83 c0 01          \tadd    $0x1,%rax\n  9d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # a4 <sys_port_ticker+0xa4>\n  a4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  a8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  ac:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  b0:\t48 3d 80 33 02 3b    \tcmp    $0x3b023380,%rax\n  b6:\t7e 1e                \tjle    d6 <sys_port_ticker+0xd6>\n  b8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  bc:\t48 83 c0 01          \tadd    $0x1,%rax\n  c0:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  c4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cb <sys_port_ticker+0xcb>\n  cb:\t48 83 c0 01          \tadd    $0x1,%rax\n  cf:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # d6 <sys_port_ticker+0xd6>\n  d6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  da:\t48 8d 88 80 96 98 00 \tlea    0x989680(%rax),%rcx\n  e1:\t48 ba b3 94 d6 26 e8 \tmovabs $0x112e0be826d694b3,%rdx\n  e8:\t0b 2e 11 \n  eb:\t48 89 c8             \tmov    %rcx,%rax\n  ee:\t48 f7 ea             \timul   %rdx\n  f1:\t48 c1 fa 1a          \tsar    $0x1a,%rdx\n  f5:\t48 89 c8             \tmov    %rcx,%rax\n  f8:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  fc:\t48 29 c2             \tsub    %rax,%rdx\n  ff:\t48 89 d0             \tmov    %rdx,%rax\n 102:\t48 69 c0 00 ca 9a 3b \timul   $0x3b9aca00,%rax,%rax\n 109:\t48 29 c1             \tsub    %rax,%rcx\n 10c:\t48 89 c8             \tmov    %rcx,%rax\n 10f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 113:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n 117:\t48 89 c2             \tmov    %rax,%rdx\n 11a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 11f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 124:\te8 00 00 00 00       \tcallq  129 <sys_port_ticker+0x129>\n 129:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 130 <sys_port_ticker+0x130>\n 130:\t48 83 c0 01          \tadd    $0x1,%rax\n 134:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 13b <sys_port_ticker+0x13b>\n 13b:\te8 00 00 00 00       \tcallq  140 <sys_port_ticker+0x140>\n 140:\t90                   \tnop\n 141:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 148 <sys_port_ticker+0x148>\n 148:\t48 83 c0 01          \tadd    $0x1,%rax\n 14c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 153 <sys_port_ticker+0x153>\n 153:\te9 29 ff ff ff       \tjmpq   81 <sys_port_ticker+0x81>", "code_s": "void __fastcall __noreturn sys_port_ticker(void *a1) {\n  struct timespec <span class=\"supfact\">tp</span>;\n  struct timespec <span class=\"supfact\">abstime</span>;\n  ++_gcov0_sys_port_ticker;\n  pthread_mutex_init(&stru_308, Number L);\n  ++qword_1708;\n  pthread_cond_init(&cond, Number L);\n  ++qword_1710;\n  pthread_mutex_lock(&stru_308);\n  ++qword_1718;\n  while (Number) {\n    clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n    ++qword_1720;\n    <span class=\"supfact\">abstime</span>.tv_sec = <span class=\"supfact\">tp</span>.tv_sec;\n    if (<span class=\"supfact\">tp</span>.tv_nsec > Number) {\n      ++<span class=\"supfact\">abstime</span>.tv_sec;\n      ++qword_1728;\n    }\n    <span class=\"supfact\">abstime</span>.tv_nsec =\n        (<span class=\"supfact\">tp</span>.tv_nsec + Number) % Number;\n    pthread_cond_timedwait(&cond, &stru_308, &<span class=\"supfact\">abstime</span>);\n    ++qword_1730;\n    sys_tick_isr();\n    ++qword_1738;\n  }\n}", "code_t": "void *__cdecl __noreturn sys_port_ticker(void *arg) {\n  timespec <span class=\"supfact\">now</span>;\n  timespec <span class=\"supfact\">abstimeout</span>;\n  ++_gcov0_sys_port_ticker;\n  pthread_mutex_init(&sys_port.mutex, Number L);\n  ++qword_1708;\n  pthread_cond_init(&sys_port.cond, Number L);\n  ++qword_1710;\n  pthread_mutex_lock(&sys_port.mutex);\n  ++qword_1718;\n  while (Number) {\n    clock_gettime(Number, &<span class=\"supfact\">now</span>);\n    ++qword_1720;\n    <span class=\"supfact\">abstimeout</span>.tv_sec = <span class=\"supfact\">now</span>.tv_sec;\n    if (<span class=\"supfact\">now</span>.tv_nsec > Number) {\n      ++<span class=\"supfact\">abstimeout</span>.tv_sec;\n      ++qword_1728;\n    }\n    <span class=\"supfact\">abstimeout</span>.tv_nsec =\n        (<span class=\"supfact\">now</span>.tv_nsec + Number) % Number;\n    pthread_cond_timedwait(&sys_port.cond, &sys_port.mutex,\n                           &<span class=\"supfact\">abstimeout</span>);\n    ++qword_1730;\n    sys_tick_isr();\n    ++qword_1738;\n  }\n}", "var": [{"name": "abstime", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "abstimeout", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}, {"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "now", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "7u83", "repo_name": "actube", "path": "7u83/actube/2c0ba9b3e51251014994ccebca0dcdb891f0c7725351340efc8d1772513fafc1", "path_in_repo": "7u83/actube//obj/cw/x86_64/cw_clock_lap.o", "objdump": "0000000000000000 <cw_clock_lap>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  10:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  15:\t48 89 c7             \tmov    %rax,%rdi\n  18:\te8 00 00 00 00       \tcallq  1d <cw_clock_lap+0x1d>\n  1d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  21:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n  26:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 2e <cw_clock_lap+0x2e>\n  2d:\t00 \n  2e:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n  32:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  36:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  3b:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n  3f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43:\t48 8b 00             \tmov    (%rax),%rax\n  46:\tf2 48 0f 2a d0       \tcvtsi2sd %rax,%xmm2\n  4b:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 53 <cw_clock_lap+0x53>\n  52:\t00 \n  53:\tf2 0f 59 d1          \tmulsd  %xmm1,%xmm2\n  57:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  5b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  5f:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n  64:\tf2 0f 58 ca          \taddsd  %xmm2,%xmm1\n  68:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n  6c:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 74 <cw_clock_lap+0x74>\n  73:\t00 \n  74:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n  78:\tc9                   \tleaveq \n  79:\tc3                   \tretq   \n", "code_s": "double __fastcall cw_clock_lap(_QWORD *a1) {\n  struct timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  return ((double)SLODWORD(<span class=\"supfact\">tv</span>.tv_usec) +\n          (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_sec) * Number -\n          ((double)(int)a1[Number] + (double)(int)*a1 * Number)) /\n         Number;\n}", "code_t": "double __cdecl cw_clock_lap(timeval *tv) {\n  timeval <span class=\"supfact\">lap</span>;\n  gettimeofday(&<span class=\"supfact\">lap</span>, Number L);\n  return ((double)SLODWORD(<span class=\"supfact\">lap</span>.tv_usec) +\n          (double)SLODWORD(<span class=\"supfact\">lap</span>.tv_sec) * Number -\n          ((double)(int)tv->tv_usec + (double)(int)tv->tv_sec * Number)) /\n         Number;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "lap", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "nicephil", "repo_name": "kernel_repos", "path": "nicephil/kernel_repos/a9591110a7b7560a15bb03a3790d071a2057f0c9594ea81b7eea2efe17625bc8", "path_in_repo": "nicephil/kernel_repos/tools/perf/util/dwarf-aux.o", "objdump": "0000000000000561 <die_get_attr_sdata>:\n     561:\t55                   \tpush   %rbp\n     562:\t48 89 e5             \tmov    %rsp,%rbp\n     565:\t48 83 ec 40          \tsub    $0x40,%rsp\n     569:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     56d:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n     570:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     574:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     57b:\t00 00 \n     57d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     581:\t31 c0                \txor    %eax,%eax\n     583:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     587:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n     58a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     58e:\t89 ce                \tmov    %ecx,%esi\n     590:\t48 89 c7             \tmov    %rax,%rdi\n     593:\te8 00 00 00 00       \tcallq  598 <die_get_attr_sdata+0x37>\n     598:\t48 85 c0             \ttest   %rax,%rax\n     59b:\t74 17                \tje     5b4 <die_get_attr_sdata+0x53>\n     59d:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     5a1:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     5a5:\t48 89 d6             \tmov    %rdx,%rsi\n     5a8:\t48 89 c7             \tmov    %rax,%rdi\n     5ab:\te8 00 00 00 00       \tcallq  5b0 <die_get_attr_sdata+0x4f>\n     5b0:\t85 c0                \ttest   %eax,%eax\n     5b2:\t74 07                \tje     5bb <die_get_attr_sdata+0x5a>\n     5b4:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n     5b9:\teb 05                \tjmp    5c0 <die_get_attr_sdata+0x5f>\n     5bb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5c0:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     5c4:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     5cb:\t00 00 \n     5cd:\t74 05                \tje     5d4 <die_get_attr_sdata+0x73>\n     5cf:\te8 00 00 00 00       \tcallq  5d4 <die_get_attr_sdata+0x73>\n     5d4:\tc9                   \tleaveq \n     5d5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall die_get_attr_sdata(struct Dwarf_Die_s *a1, unsigned int a2,\n                                      Dwarf_Signed *a3) {\n  __int64 v3;\n  __int64 result;\n  Dwarf_Attribute <span class=\"supfact\">v6</span>[Number];\n  <span class=\"supfact\">v6</span>[Number] = (Dwarf_Attribute)__readfsqword(Number);\n  LODWORD(v3) = dwarf_attr(a1, a2, <span class=\"supfact\">v6</span>, (Dwarf_Error *)a2);\n  if (v3 && !dwarf_formsdata((Dwarf_Attribute)<span class=\"supfact\">v6</span>, a3,\n                             (Dwarf_Error *)a3))\n    result = Number L;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl die_get_attr_sdata(Dwarf_Die *tp_die, unsigned int attr_name,\n                               Dwarf_Sword *result) {\n  __int64 v3;\n  int v4;\n  Dwarf_Die v5;\n  Dwarf_Attribute v6;\n  Dwarf_Attribute <span class=\"supfact\">attr</span>;\n  unsigned __int64 v8;\n  v5.padding__ = (__int64)tp_die;\n  HIDWORD(v5.abbrev) = attr_name;\n  v5.cu = (Dwarf_CU *)result;\n  v8 = __readfsqword(Number);\n  LODWORD(v3) = dwarf_attr(v5, (Dwarf_Half)tp_die, (Dwarf_Attribute *)attr_name,\n                           (Dwarf_Error *)&<span class=\"supfact\">attr</span>);\n  if (v3 && !dwarf_formsdata(v6, (Dwarf_Signed *)&<span class=\"supfact\">attr</span>,\n                             (Dwarf_Error *)v6.valp))\n    v4 = Number;\n  else\n    v4 = Number;\n  return v4;\n}", "var": [{"name": "v6", "type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }", "ref_name": "attr", "ref_type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }"}], "body_in_train": true}, {"repo_owner": "romankap", "repo_name": "Using-dlib", "path": "romankap/Using-dlib/3a2246d1f9dcfe4bd2b2510d725749a069338bfe3e7e84cdb6bbee13e1278bba", "path_in_repo": "romankap/Using-dlib/Lot_w_dlib/dlib-18.10/dlib/test/queue.o", "objdump": "000000000000b314 <_ZN4dlib12queue_sort_1INS_14queue_kernel_cINS_14queue_kernel_1IiNS_30memory_manager_global_kernel_1IcN12_GLOBAL__N_17factoryEEEEEEEE4sortEv>:\n    b314:\t55                   \tpush   %rbp\n    b315:\t48 89 e5             \tmov    %rsp,%rbp\n    b318:\t48 83 ec 20          \tsub    $0x20,%rsp\n    b31c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    b320:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b324:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    b328:\t48 8b 12             \tmov    (%rdx),%rdx\n    b32b:\t48 83 c2 40          \tadd    $0x40,%rdx\n    b32f:\t48 8b 12             \tmov    (%rdx),%rdx\n    b332:\t48 89 c7             \tmov    %rax,%rdi\n    b335:\tff d2                \tcallq  *%rdx\n    b337:\t48 83 f8 01          \tcmp    $0x1,%rax\n    b33b:\t0f 97 c0             \tseta   %al\n    b33e:\t84 c0                \ttest   %al,%al\n    b340:\t74 1c                \tje     b35e <_ZN4dlib12queue_sort_1INS_14queue_kernel_cINS_14queue_kernel_1IiNS_30memory_manager_global_kernel_1IcN12_GLOBAL__N_17factoryEEEEEEEE4sortEv+0x4a>\n    b342:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    b346:\t48 8d 55 ff          \tlea    -0x1(%rbp),%rdx\n    b34a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b34e:\t48 89 d1             \tmov    %rdx,%rcx\n    b351:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b356:\t48 89 c7             \tmov    %rax,%rdi\n    b359:\te8 54 2e 00 00       \tcallq  e1b2 <_ZN4dlib12queue_sort_1INS_14queue_kernel_cINS_14queue_kernel_1IiNS_30memory_manager_global_kernel_1IcN12_GLOBAL__N_17factoryEEEEEEEE15sort_this_queueISt4lessIiEEEvRS8_lRKT_>\n    b35e:\t90                   \tnop\n    b35f:\tc9                   \tleaveq \n    b360:\tc3                   \tretq   \n    b361:\t90                   \tnop", "code_s": "char __fastcall dlib queue_sort_1<dlib queue_kernel_c<dlib queue_kernel_1<\n    int,\n    dlib memory_manager_global_kernel_1<\n        char, ` anonymous namespace ' factory >> >> sort ( __int64 a1 ) { char result ; char <span class=\"supfact\">v2</span> ; result = ( unsigned __int64 ) ( * ( __int64 ( __fastcall * * ) ( __int64 ) ) ( * ( _QWORD * ) a1 + Number L ) ) ( a1 ) > Number ; if ( result ) result = dlib queue_sort_1 < dlib queue_kernel_c < dlib queue_kernel_1 < int , dlib memory_manager_global_kernel_1 < char , ` anonymous namespace ' factory>>>>\nsort_this_queue<std less<int>>(a1, a1, Number L, &<span class=\"supfact\">v2</span>);\nreturn result;\n}", "code_t": "void __cdecl dlib queue_sort_1<dlib queue_kernel_c<dlib queue_kernel_1<int,\n                                                                       dlib\n                                                                           memory_manager_global_kernel_1<\n                                                                               char, ` anonymous namespace ' factory >> >> sort ( dlib queue_sort_1 < dlib queue_kernel_c < dlib queue_kernel_1 < int , dlib memory_manager_global_kernel_1 < char , ( anonymous namespace ) factory > > > > * const this ) { std less < int > <span class=\"supfact\">compare</span> ; if ( ( unsigned __int64 ) ( * ( ( __int64 ( __fastcall * * ) ( dlib queue_sort_1 < dlib queue_kernel_c < dlib queue_kernel_1 < int , dlib memory_manager_global_kernel_1 < char , ( anonymous namespace ) factory > > > > * const ) ) this -> _vptr_enumerable + Number ) ) ( this ) > Number ) dlib queue_sort_1 < dlib queue_kernel_c < dlib queue_kernel_1 < int , dlib memory_manager_global_kernel_1 < char , ` anonymous namespace ' factory>>>>\nsort_this_queue<std less<int>>(this, this, Number L, &<span class=\"supfact\">compare</span>);\n}", "var": [{"name": "v2", "type": "char", "ref_name": "compare", "ref_type": "struct std::less<int> { std::binary_function<int,int,bool> baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "dpryan79", "repo_name": "SE-MEI", "path": "dpryan79/SE-MEI/f9fe8e8c842648c123c5db7ec0d218f4983d7daf8aa1554a7db80bd0bc5530a3", "path_in_repo": "dpryan79/SE-MEI//compactRepeats", "objdump": "0000000000444148 <is_directory>:\n  444148:\t55                   \tpush   %rbp\n  444149:\t48 89 e5             \tmov    %rsp,%rbp\n  44414c:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  444153:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n  44415a:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  444161:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  444168:\t48 89 d6             \tmov    %rdx,%rsi\n  44416b:\t48 89 c7             \tmov    %rax,%rdi\n  44416e:\te8 1d f3 01 00       \tcallq  463490 <__stat>\n  444173:\t85 c0                \ttest   %eax,%eax\n  444175:\t74 07                \tje     44417e <is_directory+0x36>\n  444177:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  44417c:\teb 13                \tjmp    444191 <is_directory+0x49>\n  44417e:\t8b 45 88             \tmov    -0x78(%rbp),%eax\n  444181:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  444186:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n  44418b:\t0f 94 c0             \tsete   %al\n  44418e:\t0f b6 c0             \tmovzbl %al,%eax\n  444191:\tc9                   \tleaveq \n  444192:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall is_directory(char *a1) {\n  _BOOL8 result;\n  struct stat <span class=\"supfact\">v2</span>;\n  if ((unsigned int)stat(a1, &<span class=\"supfact\">v2</span>))\n    result = Number L;\n  else\n    result = (<span class=\"supfact\">v2</span>.st_mode & Number) == Number;\n  return result;\n}", "code_t": "int __cdecl is_directory(char *fn) {\n  int result;\n  stat <span class=\"supfact\">buf</span>;\n  if ((unsigned int)stat_0(fn, &<span class=\"supfact\">buf</span>))\n    result = Number;\n  else\n    result = (<span class=\"supfact\">buf</span>.st_mode & Number) == Number;\n  return result;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "buf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "MisterPeModder", "repo_name": "RT", "path": "MisterPeModder/RT/83f0e56f82271593904c755fa251768873dfe439f2c0dabd0d8d3d1e3b65b030", "path_in_repo": "MisterPeModder/RT//libs/sdl2/src/render/SDL_render.o", "objdump": "0000000000005762 <SDL_RenderDrawRect_REAL>:\n    5762:\t55                   \tpush   %rbp\n    5763:\t48 89 e5             \tmov    %rsp,%rbp\n    5766:\t48 83 ec 60          \tsub    $0x60,%rsp\n    576a:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    576e:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n    5772:\teb 2d                \tjmp    57a1 <SDL_RenderDrawRect_REAL+0x3f>\n    5774:\tb9 d8 06 00 00       \tmov    $0x6d8,%ecx\n    5779:\tba 00 00 00 00       \tmov    $0x0,%edx\n    577e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5783:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5788:\te8 00 00 00 00       \tcallq  578d <SDL_RenderDrawRect_REAL+0x2b>\n    578d:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    5790:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    5794:\t75 02                \tjne    5798 <SDL_RenderDrawRect_REAL+0x36>\n    5796:\teb 09                \tjmp    57a1 <SDL_RenderDrawRect_REAL+0x3f>\n    5798:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n    579c:\t75 1b                \tjne    57b9 <SDL_RenderDrawRect_REAL+0x57>\n    579e:\tcc                   \tint3   \n    579f:\teb 18                \tjmp    57b9 <SDL_RenderDrawRect_REAL+0x57>\n    57a1:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n    57a6:\t74 cc                \tje     5774 <SDL_RenderDrawRect_REAL+0x12>\n    57a8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    57ac:\t48 8b 00             \tmov    (%rax),%rax\n    57af:\t48 3d 00 00 00 00    \tcmp    $0x0,%rax\n    57b5:\t75 bd                \tjne    5774 <SDL_RenderDrawRect_REAL+0x12>\n    57b7:\teb 01                \tjmp    57ba <SDL_RenderDrawRect_REAL+0x58>\n    57b9:\t90                   \tnop\n    57ba:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n    57bf:\t74 0f                \tje     57d0 <SDL_RenderDrawRect_REAL+0x6e>\n    57c1:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    57c5:\t48 8b 00             \tmov    (%rax),%rax\n    57c8:\t48 3d 00 00 00 00    \tcmp    $0x0,%rax\n    57ce:\t74 19                \tje     57e9 <SDL_RenderDrawRect_REAL+0x87>\n    57d0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    57d5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    57da:\te8 00 00 00 00       \tcallq  57df <SDL_RenderDrawRect_REAL+0x7d>\n    57df:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    57e4:\te9 d7 00 00 00       \tjmpq   58c0 <SDL_RenderDrawRect_REAL+0x15e>\n    57e9:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n    57ee:\t75 29                \tjne    5819 <SDL_RenderDrawRect_REAL+0xb7>\n    57f0:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    57f4:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    57f8:\t48 89 d6             \tmov    %rdx,%rsi\n    57fb:\t48 89 c7             \tmov    %rax,%rdi\n    57fe:\te8 00 00 00 00       \tcallq  5803 <SDL_RenderDrawRect_REAL+0xa1>\n    5803:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n    580a:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n    5811:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    5815:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n    5819:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    581d:\t8b 00                \tmov    (%rax),%eax\n    581f:\t89 45 b0             \tmov    %eax,-0x50(%rbp)\n    5822:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    5826:\t8b 40 04             \tmov    0x4(%rax),%eax\n    5829:\t89 45 b4             \tmov    %eax,-0x4c(%rbp)\n    582c:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    5830:\t8b 10                \tmov    (%rax),%edx\n    5832:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    5836:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5839:\t01 d0                \tadd    %edx,%eax\n    583b:\t83 e8 01             \tsub    $0x1,%eax\n    583e:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n    5841:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    5845:\t8b 40 04             \tmov    0x4(%rax),%eax\n    5848:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n    584b:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    584f:\t8b 10                \tmov    (%rax),%edx\n    5851:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    5855:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5858:\t01 d0                \tadd    %edx,%eax\n    585a:\t83 e8 01             \tsub    $0x1,%eax\n    585d:\t89 45 c0             \tmov    %eax,-0x40(%rbp)\n    5860:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    5864:\t8b 50 04             \tmov    0x4(%rax),%edx\n    5867:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    586b:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    586e:\t01 d0                \tadd    %edx,%eax\n    5870:\t83 e8 01             \tsub    $0x1,%eax\n    5873:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n    5876:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    587a:\t8b 00                \tmov    (%rax),%eax\n    587c:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n    587f:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    5883:\t8b 50 04             \tmov    0x4(%rax),%edx\n    5886:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    588a:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    588d:\t01 d0                \tadd    %edx,%eax\n    588f:\t83 e8 01             \tsub    $0x1,%eax\n    5892:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    5895:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    5899:\t8b 00                \tmov    (%rax),%eax\n    589b:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    589e:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    58a2:\t8b 40 04             \tmov    0x4(%rax),%eax\n    58a5:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    58a8:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n    58ac:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    58b0:\tba 05 00 00 00       \tmov    $0x5,%edx\n    58b5:\t48 89 ce             \tmov    %rcx,%rsi\n    58b8:\t48 89 c7             \tmov    %rax,%rdi\n    58bb:\te8 00 00 00 00       \tcallq  58c0 <SDL_RenderDrawRect_REAL+0x15e>\n    58c0:\tc9                   \tleaveq \n    58c1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall SDL_RenderDrawRect_REAL(void **a1, int *a2) {\n  __int64 result;\n  int *<span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">v5</span>[Number];\n  int <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v3</span> = a2;\n  while (!a1 || *a1 != &renderer_magic) {\n    <span class=\"supfact\">v6</span> = SDL_ReportAssertion_REAL(&sdl_assert_data_10944,\n                                                  String, String, Number L);\n    if (<span class=\"supfact\">v6</span>) {\n      if (<span class=\"supfact\">v6</span> == Number)\n        __debugbreak();\n      break;\n    }\n  }\n  if (a1 && *a1 == &renderer_magic) {\n    if (!a2) {\n      SDL_RenderGetViewport_REAL((__int64)a1, <span class=\"supfact\">v5</span>);\n      <span class=\"supfact\">v5</span>[Number] = Number;\n      <span class=\"supfact\">v5</span>[Number] = Number;\n      <span class=\"supfact\">v3</span> = <span class=\"supfact\">v5</span>;\n    }\n    <span class=\"supfact\">v4</span>[Number] = *<span class=\"supfact\">v3</span>;\n    <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">v3</span>[Number];\n    <span class=\"supfact\">v4</span>[Number] =\n        *<span class=\"supfact\">v3</span> + <span class=\"supfact\">v3</span>[Number] - Number;\n    <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">v3</span>[Number];\n    <span class=\"supfact\">v4</span>[Number] =\n        *<span class=\"supfact\">v3</span> + <span class=\"supfact\">v3</span>[Number] - Number;\n    <span class=\"supfact\">v4</span>[Number] =\n        <span class=\"supfact\">v3</span>[Number] + <span class=\"supfact\">v3</span>[Number] - Number;\n    <span class=\"supfact\">v4</span>[Number] = *<span class=\"supfact\">v3</span>;\n    <span class=\"supfact\">v4</span>[Number] =\n        <span class=\"supfact\">v3</span>[Number] + <span class=\"supfact\">v3</span>[Number] - Number;\n    <span class=\"supfact\">v4</span>[Number] = *<span class=\"supfact\">v3</span>;\n    <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">v3</span>[Number];\n    result = SDL_RenderDrawLines_REAL((__int64)a1, (__int64)<span class=\"supfact\">v4</span>,\n                                      Number);\n  } else {\n    SDL_SetError_REAL(String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl SDL_RenderDrawRect_REAL(SDL_Renderer_0 *renderer,\n                                    const SDL_Rect_0 *rect) {\n  int result;\n  const SDL_Rect_0 *<span class=\"supfact\">recta</span>;\n  SDL_Point_0 <span class=\"supfact\">points</span>[Number];\n  SDL_Rect_0 <span class=\"supfact\">full_rect</span>;\n  SDL_AssertState <span class=\"supfact\">sdl_assert_state</span>;\n  <span class=\"supfact\">recta</span> = rect;\n  while (!renderer || renderer->magic != &renderer_magic) {\n    <span class=\"supfact\">sdl_assert_state</span> = (unsigned int)SDL_ReportAssertion_REAL(\n        &sdl_assert_data_10944, String, String, Number L);\n    if (<span class=\"supfact\">sdl_assert_state</span>) {\n      if (<span class=\"supfact\">sdl_assert_state</span> == SDL_ASSERTION_BREAK)\n        __debugbreak();\n      break;\n    }\n  }\n  if (renderer && renderer->magic == &renderer_magic) {\n    if (!rect) {\n      SDL_RenderGetViewport_REAL(renderer, &<span class=\"supfact\">full_rect</span>);\n      <span class=\"supfact\">full_rect</span>.x = Number;\n      <span class=\"supfact\">full_rect</span>.y = Number;\n      <span class=\"supfact\">recta</span> = &<span class=\"supfact\">full_rect</span>;\n    }\n    <span class=\"supfact\">points</span>[Number] = *(SDL_Point_0 *)&<span class=\"supfact\">recta</span>->x;\n    <span class=\"supfact\">points</span>[Number].x =\n        <span class=\"supfact\">recta</span>->x + <span class=\"supfact\">recta</span>->w - Number;\n    <span class=\"supfact\">points</span>[Number].y = <span class=\"supfact\">recta</span>->y;\n    <span class=\"supfact\">points</span>[Number].x =\n        <span class=\"supfact\">recta</span>->x + <span class=\"supfact\">recta</span>->w - Number;\n    <span class=\"supfact\">points</span>[Number].y =\n        <span class=\"supfact\">recta</span>->y + <span class=\"supfact\">recta</span>->h - Number;\n    <span class=\"supfact\">points</span>[Number].x = <span class=\"supfact\">recta</span>->x;\n    <span class=\"supfact\">points</span>[Number].y =\n        <span class=\"supfact\">recta</span>->y + <span class=\"supfact\">recta</span>->h - Number;\n    <span class=\"supfact\">points</span>[Number].x = <span class=\"supfact\">recta</span>->x;\n    <span class=\"supfact\">points</span>[Number].y = <span class=\"supfact\">recta</span>->y;\n    result = SDL_RenderDrawLines_REAL(renderer, <span class=\"supfact\">points</span>, Number);\n  } else {\n    SDL_SetError_REAL(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "struct SDL_Rect_0 { int x; int y; int w; int h; }", "ref_name": "full_rect", "ref_type": "struct SDL_Rect_0 { int x; int y; int w; int h; }"}], "body_in_train": false}, {"repo_owner": "UgoLi", "repo_name": "freeswitch_1.9", "path": "UgoLi/freeswitch_1.9/93ecdf45b2f3bb22850a8825a2150b3b49d4e21470303f4147f471caff5f7450", "path_in_repo": "UgoLi/freeswitch_1.9/freeswitch_src/libs/xmlrpc-c/tools/xmlrpc_pstream/xmlrpc_pstream.o", "objdump": "0000000000000000 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8b 00             \tmov    (%rax),%rax\n  13:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  17:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  1b:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  1f:\t48 89 d6             \tmov    %rdx,%rsi\n  22:\t48 89 c7             \tmov    %rax,%rdi\n  25:\te8 00 00 00 00       \tcallq  2a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv+0x2a>\n  2a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  2e:\tc9                   \tleaveq \n  2f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>\nbegin(__int64 *a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *a1;\n  __gnu_cxx\n      __normal_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>> const *,\n                        std vector<std __cxx11 basic_string<\n                            char, std char_traits<char>, std allocator<char>>>>\n          __normal_iterator(&<span class=\"supfact\">v2</span>, &<span class=\"supfact\">v3</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std vector<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>\n    const_iterator __cdecl std vector<std __cxx11 basic_string<\n        char, std char_traits<char>, std allocator<char>>>\n    begin(const std vector<std __cxx11 basic_string<\n              char, std char_traits<char>, std allocator<char>>> *const this) {\n  __gnu_cxx __normal_iterator<\n      const std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      <span class=\"supfact\">v2</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      *<span class=\"supfact\">__i</span>;\n  <span class=\"supfact\">__i</span> = this->_M_impl._M_start;\n  __gnu_cxx __normal_iterator<\n      std __cxx11 basic_string<char, std char_traits<char>,\n                               std allocator<char>> const *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      __normal_iterator(\n          &<span class=\"supfact\">v2</span>,\n          (const std __cxx11\n               basic_string<char, std char_traits<char>, std allocator<char>>\n                   *const *)&<span class=\"supfact\">__i</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*,std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >> > { const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}], "body_in_train": true}, {"repo_owner": "trakons", "repo_name": "QEMU-s5l89xx-test", "path": "trakons/QEMU-s5l89xx-test/2d53edb2434ec64b313381a8520f55f785991cf5b2474d10030c414f3da403e7", "path_in_repo": "trakons/QEMU-s5l89xx-test//qemu-io", "objdump": "0000000000446d8e <hdev_create>:\n  446d8e:\t55                   \tpush   %rbp\n  446d8f:\t48 89 e5             \tmov    %rsp,%rbp\n  446d92:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n  446d99:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n  446da0:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n  446da7:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  446dae:\t00 00 \n  446db0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  446db4:\t31 c0                \txor    %eax,%eax\n  446db6:\tc7 85 50 ff ff ff 00 \tmovl   $0x0,-0xb0(%rbp)\n  446dbd:\t00 00 00 \n  446dc0:\t48 c7 85 58 ff ff ff \tmovq   $0x0,-0xa8(%rbp)\n  446dc7:\t00 00 00 00 \n  446dcb:\teb 39                \tjmp    446e06 <hdev_create+0x78>\n  446dcd:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n  446dd4:\t48 8b 00             \tmov    (%rax),%rax\n  446dd7:\tbe bc 89 45 00       \tmov    $0x4589bc,%esi\n  446ddc:\t48 89 c7             \tmov    %rax,%rdi\n  446ddf:\te8 dc c8 fb ff       \tcallq  4036c0 <strcmp@plt>\n  446de4:\t85 c0                \ttest   %eax,%eax\n  446de6:\t75 16                \tjne    446dfe <hdev_create+0x70>\n  446de8:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n  446def:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  446df3:\t48 c1 e8 09          \tshr    $0x9,%rax\n  446df7:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n  446dfe:\t48 83 85 40 ff ff ff \taddq   $0x20,-0xc0(%rbp)\n  446e05:\t20 \n  446e06:\t48 83 bd 40 ff ff ff \tcmpq   $0x0,-0xc0(%rbp)\n  446e0d:\t00 \n  446e0e:\t74 0f                \tje     446e1f <hdev_create+0x91>\n  446e10:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n  446e17:\t48 8b 00             \tmov    (%rax),%rax\n  446e1a:\t48 85 c0             \ttest   %rax,%rax\n  446e1d:\t75 ae                \tjne    446dcd <hdev_create+0x3f>\n  446e1f:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  446e26:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  446e2b:\t48 89 c7             \tmov    %rax,%rdi\n  446e2e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  446e33:\te8 58 ca fb ff       \tcallq  403890 <open64@plt>\n  446e38:\t89 85 54 ff ff ff    \tmov    %eax,-0xac(%rbp)\n  446e3e:\t83 bd 54 ff ff ff 00 \tcmpl   $0x0,-0xac(%rbp)\n  446e45:\t79 0e                \tjns    446e55 <hdev_create+0xc7>\n  446e47:\te8 f4 c1 fb ff       \tcallq  403040 <__errno_location@plt>\n  446e4c:\t8b 00                \tmov    (%rax),%eax\n  446e4e:\tf7 d8                \tneg    %eax\n  446e50:\te9 a3 00 00 00       \tjmpq   446ef8 <hdev_create+0x16a>\n  446e55:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  446e5c:\t8b 85 54 ff ff ff    \tmov    -0xac(%rbp),%eax\n  446e62:\t48 89 d6             \tmov    %rdx,%rsi\n  446e65:\t89 c7                \tmov    %eax,%edi\n  446e67:\te8 74 76 00 00       \tcallq  44e4e0 <fstat64>\n  446e6c:\t85 c0                \ttest   %eax,%eax\n  446e6e:\t79 11                \tjns    446e81 <hdev_create+0xf3>\n  446e70:\te8 cb c1 fb ff       \tcallq  403040 <__errno_location@plt>\n  446e75:\t8b 00                \tmov    (%rax),%eax\n  446e77:\tf7 d8                \tneg    %eax\n  446e79:\t89 85 50 ff ff ff    \tmov    %eax,-0xb0(%rbp)\n  446e7f:\teb 64                \tjmp    446ee5 <hdev_create+0x157>\n  446e81:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n  446e87:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  446e8c:\t3d 00 60 00 00       \tcmp    $0x6000,%eax\n  446e91:\t74 1e                \tje     446eb1 <hdev_create+0x123>\n  446e93:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n  446e99:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  446e9e:\t3d 00 20 00 00       \tcmp    $0x2000,%eax\n  446ea3:\t74 0c                \tje     446eb1 <hdev_create+0x123>\n  446ea5:\tc7 85 50 ff ff ff ed \tmovl   $0xffffffed,-0xb0(%rbp)\n  446eac:\tff ff ff \n  446eaf:\teb 34                \tjmp    446ee5 <hdev_create+0x157>\n  446eb1:\t8b 85 54 ff ff ff    \tmov    -0xac(%rbp),%eax\n  446eb7:\tba 02 00 00 00       \tmov    $0x2,%edx\n  446ebc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  446ec1:\t89 c7                \tmov    %eax,%edi\n  446ec3:\te8 a8 c5 fb ff       \tcallq  403470 <lseek64@plt>\n  446ec8:\t48 89 c2             \tmov    %rax,%rdx\n  446ecb:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  446ed2:\t48 c1 e0 09          \tshl    $0x9,%rax\n  446ed6:\t48 39 c2             \tcmp    %rax,%rdx\n  446ed9:\t73 0a                \tjae    446ee5 <hdev_create+0x157>\n  446edb:\tc7 85 50 ff ff ff e4 \tmovl   $0xffffffe4,-0xb0(%rbp)\n  446ee2:\tff ff ff \n  446ee5:\t8b 85 54 ff ff ff    \tmov    -0xac(%rbp),%eax\n  446eeb:\t89 c7                \tmov    %eax,%edi\n  446eed:\te8 7e ca fb ff       \tcallq  403970 <close@plt>\n  446ef2:\t8b 85 50 ff ff ff    \tmov    -0xb0(%rbp),%eax\n  446ef8:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  446efc:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n  446f03:\t00 00 \n  446f05:\t74 05                \tje     446f0c <hdev_create+0x17e>\n  446f07:\te8 54 c6 fb ff       \tcallq  403560 <__stack_chk_fail@plt>\n  446f0c:\tc9                   \tleaveq \n  446f0d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hdev_create(const char *a1, __int64 a2) {\n  unsigned int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">fd</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  struct stat64 <span class=\"supfact\">v7</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  <span class=\"supfact\">v4</span> = Number;\n  <span class=\"supfact\">v6</span> = Number L;\n  while (a2 && *(_QWORD *)a2) {\n    if (!strcmp(*(const char **)a2, String))\n      <span class=\"supfact\">v6</span> = *(_QWORD *)(a2 + Number) >> Number;\n    a2 += Number L;\n  }\n  <span class=\"supfact\">fd</span> = open64(a1, Number);\n  if (<span class=\"supfact\">fd</span> < Number)\n    return (unsigned int)-*__errno_location();\n  if ((int)fstat64(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">v7</span>) >= Number) {\n    if ((<span class=\"supfact\">v7</span>.st_mode & Number) == Number ||\n        (<span class=\"supfact\">v7</span>.st_mode & Number) == Number) {\n      if (lseek64(<span class=\"supfact\">fd</span>, Number L, Number) <\n          (unsigned __int64)(<span class=\"supfact\">v6</span> << Number))\n        <span class=\"supfact\">v4</span> = Number;\n    } else {\n      <span class=\"supfact\">v4</span> = Number;\n    }\n  } else {\n    <span class=\"supfact\">v4</span> = -*__errno_location();\n  }\n  close(<span class=\"supfact\">fd</span>);\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "int __cdecl hdev_create(const char *filename, QEMUOptionParameter_0 *options) {\n  int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">fd</span>;\n  int64_t <span class=\"supfact\">total_size</span>;\n  stat <span class=\"supfact\">stat_buf</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  <span class=\"supfact\">ret</span> = Number;\n  <span class=\"supfact\">total_size</span> = Number L;\n  while (options && options->name) {\n    if (!strcmp(options->name, String))\n      <span class=\"supfact\">total_size</span> = options->value.n >> Number;\n    ++options;\n  }\n  <span class=\"supfact\">fd</span> = open64(filename, Number);\n  if (<span class=\"supfact\">fd</span> < Number)\n    return -*__errno_location();\n  if ((int)fstat64(<span class=\"supfact\">fd</span>,\n                   (struct stat64 *)&<span class=\"supfact\">stat_buf</span>) >= Number) {\n    if ((<span class=\"supfact\">stat_buf</span>.st_mode & Number) == Number ||\n        (<span class=\"supfact\">stat_buf</span>.st_mode & Number) == Number) {\n      if (lseek64(<span class=\"supfact\">fd</span>, Number L, Number) <\n          (unsigned __int64)(<span class=\"supfact\">total_size</span> << Number))\n        <span class=\"supfact\">ret</span> = Number;\n    } else {\n      <span class=\"supfact\">ret</span> = Number;\n    }\n  } else {\n    <span class=\"supfact\">ret</span> = -*__errno_location();\n  }\n  close(<span class=\"supfact\">fd</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v7", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "stat_buf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "piyawad", "repo_name": "test1", "path": "piyawad/test1/ed00a990ebd0678e6e3829d60a55757c0fadcff986a7e3bf78a98759e2dea13a", "path_in_repo": "piyawad/test1/branches/11/res/pjproject/pjlib-util/bin/pjlib-util-test-x86_64-unknown-linux-gnu", "objdump": "0000000000405be3 <init>:\n  405be3:\t55                   \tpush   %rbp\n  405be4:\t48 89 e5             \tmov    %rsp,%rbp\n  405be7:\t48 83 ec 50          \tsub    $0x50,%rsp\n  405beb:\tbf aa e1 42 00       \tmov    $0x42e1aa,%edi\n  405bf0:\te8 59 41 02 00       \tcallq  429d4e <pj_str>\n  405bf5:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  405bf9:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  405bfd:\t66 c7 45 cc b1 15    \tmovw   $0x15b1,-0x34(%rbp)\n  405c03:\tbf aa e1 42 00       \tmov    $0x42e1aa,%edi\n  405c08:\te8 41 41 02 00       \tcallq  429d4e <pj_str>\n  405c0d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  405c11:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  405c15:\t66 c7 45 ce b2 15    \tmovw   $0x15b2,-0x32(%rbp)\n  405c1b:\t0f b7 45 cc          \tmovzwl -0x34(%rbp),%eax\n  405c1f:\t66 89 05 22 8e 03 00 \tmov    %ax,0x38e22(%rip)        # 43ea48 <g_server+0x8>\n  405c26:\t0f b7 45 ce          \tmovzwl -0x32(%rbp),%eax\n  405c2a:\t66 89 05 77 8e 03 00 \tmov    %ax,0x38e77(%rip)        # 43eaa8 <g_server+0x68>\n  405c31:\t48 8b 05 d8 93 03 00 \tmov    0x393d8(%rip),%rax        # 43f010 <mem>\n  405c38:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  405c3e:\tb9 d0 07 00 00       \tmov    $0x7d0,%ecx\n  405c43:\tba d0 07 00 00       \tmov    $0x7d0,%edx\n  405c48:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  405c4d:\t48 89 c7             \tmov    %rax,%rdi\n  405c50:\te8 56 0f 02 00       \tcallq  426bab <pj_pool_create>\n  405c55:\t48 89 05 a4 8e 03 00 \tmov    %rax,0x38ea4(%rip)        # 43eb00 <pool>\n  405c5c:\t48 8b 05 9d 8e 03 00 \tmov    0x38e9d(%rip),%rax        # 43eb00 <pool>\n  405c63:\t41 b8 30 eb 43 00    \tmov    $0x43eb30,%r8d\n  405c69:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n  405c6e:\tba 00 00 00 00       \tmov    $0x0,%edx\n  405c73:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  405c78:\t48 89 c7             \tmov    %rax,%rdi\n  405c7b:\te8 c3 a5 01 00       \tcallq  420243 <pj_sem_create>\n  405c80:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405c83:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  405c87:\t74 19                \tje     405ca2 <init+0xbf>\n  405c89:\tb9 ce ed 42 00       \tmov    $0x42edce,%ecx\n  405c8e:\tba aa 01 00 00       \tmov    $0x1aa,%edx\n  405c93:\tbe b0 e0 42 00       \tmov    $0x42e0b0,%esi\n  405c98:\tbf b4 e1 42 00       \tmov    $0x42e1b4,%edi\n  405c9d:\te8 ee d3 ff ff       \tcallq  403090 <__assert_fail@plt>\n  405ca2:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  405ca9:\te9 43 01 00 00       \tjmpq   405df1 <init+0x20e>\n  405cae:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405cb1:\t48 63 d0             \tmovslq %eax,%rdx\n  405cb4:\t48 89 d0             \tmov    %rdx,%rax\n  405cb7:\t48 01 c0             \tadd    %rax,%rax\n  405cba:\t48 01 d0             \tadd    %rdx,%rax\n  405cbd:\t48 c1 e0 05          \tshl    $0x5,%rax\n  405cc1:\t48 8d 90 40 ea 43 00 \tlea    0x43ea40(%rax),%rdx\n  405cc8:\t0f b7 05 2f d5 02 00 \tmovzwl 0x2d52f(%rip),%eax        # 4331fe <PJ_SOCK_DGRAM>\n  405ccf:\t0f b7 f0             \tmovzwl %ax,%esi\n  405cd2:\t0f b7 05 1b d5 02 00 \tmovzwl 0x2d51b(%rip),%eax        # 4331f4 <PJ_AF_INET>\n  405cd9:\t0f b7 c0             \tmovzwl %ax,%eax\n  405cdc:\t48 89 d1             \tmov    %rdx,%rcx\n  405cdf:\tba 00 00 00 00       \tmov    $0x0,%edx\n  405ce4:\t89 c7                \tmov    %eax,%edi\n  405ce6:\te8 ab b8 01 00       \tcallq  421596 <pj_sock_socket>\n  405ceb:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405cee:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  405cf2:\t74 0a                \tje     405cfe <init+0x11b>\n  405cf4:\tb8 f6 ff ff ff       \tmov    $0xfffffff6,%eax\n  405cf9:\te9 91 02 00 00       \tjmpq   405f8f <init+0x3ac>\n  405cfe:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405d01:\t48 63 d0             \tmovslq %eax,%rdx\n  405d04:\t48 89 d0             \tmov    %rdx,%rax\n  405d07:\t48 01 c0             \tadd    %rax,%rax\n  405d0a:\t48 01 d0             \tadd    %rdx,%rax\n  405d0d:\t48 c1 e0 05          \tshl    $0x5,%rax\n  405d11:\t48 05 48 ea 43 00    \tadd    $0x43ea48,%rax\n  405d17:\t0f b7 00             \tmovzwl (%rax),%eax\n  405d1a:\t0f b7 d0             \tmovzwl %ax,%edx\n  405d1d:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  405d21:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  405d26:\t48 89 c7             \tmov    %rax,%rdi\n  405d29:\te8 eb 24 02 00       \tcallq  428219 <pj_sockaddr_in_init>\n  405d2e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405d31:\t48 63 d0             \tmovslq %eax,%rdx\n  405d34:\t48 89 d0             \tmov    %rdx,%rax\n  405d37:\t48 01 c0             \tadd    %rax,%rax\n  405d3a:\t48 01 d0             \tadd    %rdx,%rax\n  405d3d:\t48 c1 e0 05          \tshl    $0x5,%rax\n  405d41:\t48 05 40 ea 43 00    \tadd    $0x43ea40,%rax\n  405d47:\t48 8b 00             \tmov    (%rax),%rax\n  405d4a:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n  405d4e:\tba 10 00 00 00       \tmov    $0x10,%edx\n  405d53:\t48 89 ce             \tmov    %rcx,%rsi\n  405d56:\t48 89 c7             \tmov    %rax,%rdi\n  405d59:\te8 0b b9 01 00       \tcallq  421669 <pj_sock_bind>\n  405d5e:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405d61:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  405d65:\t74 0a                \tje     405d71 <init+0x18e>\n  405d67:\tb8 ec ff ff ff       \tmov    $0xffffffec,%eax\n  405d6c:\te9 1e 02 00 00       \tjmpq   405f8f <init+0x3ac>\n  405d71:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405d74:\t48 63 d0             \tmovslq %eax,%rdx\n  405d77:\t48 89 d0             \tmov    %rdx,%rax\n  405d7a:\t48 01 c0             \tadd    %rax,%rax\n  405d7d:\t48 01 d0             \tadd    %rdx,%rax\n  405d80:\t48 c1 e0 05          \tshl    $0x5,%rax\n  405d84:\t48 83 c0 10          \tadd    $0x10,%rax\n  405d88:\t48 8d 88 40 ea 43 00 \tlea    0x43ea40(%rax),%rcx\n  405d8f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405d92:\t48 63 d0             \tmovslq %eax,%rdx\n  405d95:\t48 89 d0             \tmov    %rdx,%rax\n  405d98:\t48 01 c0             \tadd    %rax,%rax\n  405d9b:\t48 01 d0             \tadd    %rdx,%rax\n  405d9e:\t48 c1 e0 05          \tshl    $0x5,%rax\n  405da2:\t48 8d 90 40 ea 43 00 \tlea    0x43ea40(%rax),%rdx\n  405da9:\t48 8b 05 50 8d 03 00 \tmov    0x38d50(%rip),%rax        # 43eb00 <pool>\n  405db0:\t48 83 ec 08          \tsub    $0x8,%rsp\n  405db4:\t51                   \tpush   %rcx\n  405db5:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  405dbb:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  405dc1:\t48 89 d1             \tmov    %rdx,%rcx\n  405dc4:\tba 1d 58 40 00       \tmov    $0x40581d,%edx\n  405dc9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  405dce:\t48 89 c7             \tmov    %rax,%rdi\n  405dd1:\te8 2f 95 01 00       \tcallq  41f305 <pj_thread_create>\n  405dd6:\t48 83 c4 10          \tadd    $0x10,%rsp\n  405dda:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405ddd:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  405de1:\t74 0a                \tje     405ded <init+0x20a>\n  405de3:\tb8 e2 ff ff ff       \tmov    $0xffffffe2,%eax\n  405de8:\te9 a2 01 00 00       \tjmpq   405f8f <init+0x3ac>\n  405ded:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  405df1:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n  405df5:\t0f 8e b3 fe ff ff    \tjle    405cae <init+0xcb>\n  405dfb:\t48 8b 05 fe 8c 03 00 \tmov    0x38cfe(%rip),%rax        # 43eb00 <pool>\n  405e02:\tba 18 eb 43 00       \tmov    $0x43eb18,%edx\n  405e07:\tbe 10 00 00 00       \tmov    $0x10,%esi\n  405e0c:\t48 89 c7             \tmov    %rax,%rdi\n  405e0f:\te8 f9 58 02 00       \tcallq  42b70d <pj_timer_heap_create>\n  405e14:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405e17:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  405e1b:\t74 19                \tje     405e36 <init+0x253>\n  405e1d:\tb9 ce ed 42 00       \tmov    $0x42edce,%ecx\n  405e22:\tba c0 01 00 00       \tmov    $0x1c0,%edx\n  405e27:\tbe b0 e0 42 00       \tmov    $0x42e0b0,%esi\n  405e2c:\tbf b4 e1 42 00       \tmov    $0x42e1b4,%edi\n  405e31:\te8 5a d2 ff ff       \tcallq  403090 <__assert_fail@plt>\n  405e36:\t48 8b 05 c3 8c 03 00 \tmov    0x38cc3(%rip),%rax        # 43eb00 <pool>\n  405e3d:\tba 20 eb 43 00       \tmov    $0x43eb20,%edx\n  405e42:\tbe 10 00 00 00       \tmov    $0x10,%esi\n  405e47:\t48 89 c7             \tmov    %rax,%rdi\n  405e4a:\te8 8e 7d 01 00       \tcallq  41dbdd <pj_ioqueue_create>\n  405e4f:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405e52:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  405e56:\t74 19                \tje     405e71 <init+0x28e>\n  405e58:\tb9 ce ed 42 00       \tmov    $0x42edce,%ecx\n  405e5d:\tba c3 01 00 00       \tmov    $0x1c3,%edx\n  405e62:\tbe b0 e0 42 00       \tmov    $0x42e0b0,%esi\n  405e67:\tbf b4 e1 42 00       \tmov    $0x42e1b4,%edi\n  405e6c:\te8 1f d2 ff ff       \tcallq  403090 <__assert_fail@plt>\n  405e71:\t48 8b 0d a8 8c 03 00 \tmov    0x38ca8(%rip),%rcx        # 43eb20 <ioqueue>\n  405e78:\t48 8b 15 99 8c 03 00 \tmov    0x38c99(%rip),%rdx        # 43eb18 <timer_heap>\n  405e7f:\t48 8b 05 8a 91 03 00 \tmov    0x3918a(%rip),%rax        # 43f010 <mem>\n  405e86:\t41 b9 08 eb 43 00    \tmov    $0x43eb08,%r9d\n  405e8c:\t49 89 c8             \tmov    %rcx,%r8\n  405e8f:\t48 89 d1             \tmov    %rdx,%rcx\n  405e92:\tba 00 00 00 00       \tmov    $0x0,%edx\n  405e97:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  405e9c:\t48 89 c7             \tmov    %rax,%rdi\n  405e9f:\te8 25 c6 00 00       \tcallq  4124c9 <pj_dns_resolver_create>\n  405ea4:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405ea7:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  405eab:\t74 0a                \tje     405eb7 <init+0x2d4>\n  405ead:\tb8 d8 ff ff ff       \tmov    $0xffffffd8,%eax\n  405eb2:\te9 d8 00 00 00       \tjmpq   405f8f <init+0x3ac>\n  405eb7:\t48 8b 05 4a 8c 03 00 \tmov    0x38c4a(%rip),%rax        # 43eb08 <resolver>\n  405ebe:\tbe 40 eb 43 00       \tmov    $0x43eb40,%esi\n  405ec3:\t48 89 c7             \tmov    %rax,%rdi\n  405ec6:\te8 50 cf 00 00       \tcallq  412e1b <pj_dns_resolver_get_settings>\n  405ecb:\tc7 05 7b 8c 03 00 14 \tmovl   $0x14,0x38c7b(%rip)        # 43eb50 <set+0x10>\n  405ed2:\t00 00 00 \n  405ed5:\tc7 05 75 8c 03 00 14 \tmovl   $0x14,0x38c75(%rip)        # 43eb54 <set+0x14>\n  405edc:\t00 00 00 \n  405edf:\t48 8b 05 22 8c 03 00 \tmov    0x38c22(%rip),%rax        # 43eb08 <resolver>\n  405ee6:\tbe 40 eb 43 00       \tmov    $0x43eb40,%esi\n  405eeb:\t48 89 c7             \tmov    %rax,%rdi\n  405eee:\te8 96 ce 00 00       \tcallq  412d89 <pj_dns_resolver_set_settings>\n  405ef3:\t48 8b 05 0e 8c 03 00 \tmov    0x38c0e(%rip),%rax        # 43eb08 <resolver>\n  405efa:\t48 8d 4d cc          \tlea    -0x34(%rbp),%rcx\n  405efe:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  405f02:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  405f07:\t48 89 c7             \tmov    %rax,%rdi\n  405f0a:\te8 a7 cc 00 00       \tcallq  412bb6 <pj_dns_resolver_set_ns>\n  405f0f:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405f12:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  405f16:\t74 19                \tje     405f31 <init+0x34e>\n  405f18:\tb9 ce ed 42 00       \tmov    $0x42edce,%ecx\n  405f1d:\tba cf 01 00 00       \tmov    $0x1cf,%edx\n  405f22:\tbe b0 e0 42 00       \tmov    $0x42e0b0,%esi\n  405f27:\tbf b4 e1 42 00       \tmov    $0x42e1b4,%edi\n  405f2c:\te8 5f d1 ff ff       \tcallq  403090 <__assert_fail@plt>\n  405f31:\t48 8b 05 c8 8b 03 00 \tmov    0x38bc8(%rip),%rax        # 43eb00 <pool>\n  405f38:\t48 83 ec 08          \tsub    $0x8,%rsp\n  405f3c:\t68 28 eb 43 00       \tpushq  $0x43eb28\n  405f41:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  405f47:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  405f4d:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  405f52:\tba 8a 5b 40 00       \tmov    $0x405b8a,%edx\n  405f57:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  405f5c:\t48 89 c7             \tmov    %rax,%rdi\n  405f5f:\te8 a1 93 01 00       \tcallq  41f305 <pj_thread_create>\n  405f64:\t48 83 c4 10          \tadd    $0x10,%rsp\n  405f68:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405f6b:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  405f6f:\t74 19                \tje     405f8a <init+0x3a7>\n  405f71:\tb9 ce ed 42 00       \tmov    $0x42edce,%ecx\n  405f76:\tba d2 01 00 00       \tmov    $0x1d2,%edx\n  405f7b:\tbe b0 e0 42 00       \tmov    $0x42e0b0,%esi\n  405f80:\tbf b4 e1 42 00       \tmov    $0x42e1b4,%edi\n  405f85:\te8 06 d1 ff ff       \tcallq  403090 <__assert_fail@plt>\n  405f8a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405f8f:\tc9                   \tleaveq \n  405f90:\tc3                   \tretq   ", "code_s": "__int64 init() {\n  __int64 v0;\n  __int64 v1;\n  char <span class=\"supfact\">v3</span>[Number];\n  __int16 <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v5</span>[Number] = pj_str(String);\n  <span class=\"supfact\">v5</span>[Number] = v0;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v5</span>[Number] = pj_str(String);\n  <span class=\"supfact\">v5</span>[Number] = v1;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  word_43EA48[Number] = Number;\n  word_43EAA8 = Number;\n  pool = pj_pool_create(mem, Number L, Number L, Number L, Number L);\n  <span class=\"supfact\">v6</span> = pj_sem_create(pool, Number L, Number L, Number L, &sem);\n  if (<span class=\"supfact\">v6</span>)\n    __assert_fail(String, String, Number, String);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v6</span> = pj_sock_socket(\n        (unsigned __int16)PJ_AF_INET, (unsigned __int16)PJ_SOCK_DGRAM, Number L,\n        (char *)&g_server + Number * <span class=\"supfact\">i</span>);\n    if (<span class=\"supfact\">v6</span>)\n      return Number L;\n    pj_sockaddr_in_init(\n        <span class=\"supfact\">v3</span>, Number L,\n        (unsigned __int16)word_43EA48[Number * <span class=\"supfact\">i</span>]);\n    <span class=\"supfact\">v6</span> =\n        pj_sock_bind(*((_QWORD *)&g_server + Number * <span class=\"supfact\">i</span>),\n                     <span class=\"supfact\">v3</span>, Number L);\n    if (<span class=\"supfact\">v6</span>)\n      return Number L;\n    <span class=\"supfact\">v6</span> = pj_thread_create(\n        pool, Number, (unsigned int)server_thread,\n        (unsigned int)&g_server + Number * <span class=\"supfact\">i</span>, Number, Number,\n        (__int64)&g_server + Number * <span class=\"supfact\">i</span> + Number);\n    if (<span class=\"supfact\">v6</span>)\n      return Number L;\n  }\n  <span class=\"supfact\">v6</span> = pj_timer_heap_create(pool, Number L, &timer_heap);\n  if (<span class=\"supfact\">v6</span>)\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v6</span> = pj_ioqueue_create(pool, Number L, &ioqueue);\n  if (<span class=\"supfact\">v6</span>)\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v6</span> = pj_dns_resolver_create(mem, Number L, Number L,\n                                              timer_heap, ioqueue, &resolver);\n  if (<span class=\"supfact\">v6</span>)\n    return Number L;\n  pj_dns_resolver_get_settings(resolver, &set);\n  dword_43EB50 = Number;\n  dword_43EB54 = Number;\n  pj_dns_resolver_set_settings(resolver, &set);\n  <span class=\"supfact\">v6</span> = pj_dns_resolver_set_ns(\n      resolver, Number L, <span class=\"supfact\">v5</span>, <span class=\"supfact\">v4</span>);\n  if (<span class=\"supfact\">v6</span>)\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v6</span> =\n      pj_thread_create(pool, Number, (unsigned int)poll_worker_thread, Number,\n                       Number, Number, (__int64)&poll_thread);\n  if (<span class=\"supfact\">v6</span>)\n    __assert_fail(String, String, Number, String);\n  return Number L;\n}", "code_t": "int __cdecl init() {\n  pj_sockaddr_in_0 <span class=\"supfact\">addr</span>;\n  pj_uint16_t <span class=\"supfact\">ports</span>[Number];\n  pj_str_t_0 <span class=\"supfact\">nameservers</span>[Number];\n  pj_status_t <span class=\"supfact\">status</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">nameservers</span>[Number] = pj_str(String);\n  <span class=\"supfact\">ports</span>[Number] = Number;\n  <span class=\"supfact\">nameservers</span>[Number] = pj_str(String);\n  <span class=\"supfact\">ports</span>[Number] = Number;\n  g_server[Number].port = Number;\n  g_server[Number].port = Number;\n  pool = pj_pool_create(mem, Number L, Number, Number, Number L);\n  <span class=\"supfact\">status</span> = pj_sem_create(pool, Number L, Number, Number, &sem);\n  if (<span class=\"supfact\">status</span>)\n    __assert_fail(String, String, Number, String);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">status</span> = pj_sock_socket(PJ_AF_INET, PJ_SOCK_DGRAM, Number,\n                                            &g_server[<span class=\"supfact\">i</span>].sock);\n    if (<span class=\"supfact\">status</span>)\n      return Number;\n    pj_sockaddr_in_init(&<span class=\"supfact\">addr</span>, Number L,\n                        g_server[<span class=\"supfact\">i</span>].port);\n    <span class=\"supfact\">status</span> = pj_sock_bind(g_server[<span class=\"supfact\">i</span>].sock,\n                                          &<span class=\"supfact\">addr</span>, Number);\n    if (<span class=\"supfact\">status</span>)\n      return Number;\n    <span class=\"supfact\">status</span> =\n        pj_thread_create(pool, Number L, (pj_thread_proc *)server_thread,\n                         &g_server[<span class=\"supfact\">i</span>], Number L, Number,\n                         &g_server[<span class=\"supfact\">i</span>].thread);\n    if (<span class=\"supfact\">status</span>)\n      return Number;\n  }\n  <span class=\"supfact\">status</span> = pj_timer_heap_create(pool, Number, &timer_heap);\n  if (<span class=\"supfact\">status</span>)\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">status</span> = pj_ioqueue_create(pool, Number, &ioqueue);\n  if (<span class=\"supfact\">status</span>)\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">status</span> = pj_dns_resolver_create(\n      mem, Number L, Number, timer_heap, ioqueue, &resolver);\n  if (<span class=\"supfact\">status</span>)\n    return Number;\n  pj_dns_resolver_get_settings(resolver, &set);\n  set.good_ns_ttl = Number;\n  set.bad_ns_ttl = Number;\n  pj_dns_resolver_set_settings(resolver, &set);\n  <span class=\"supfact\">status</span> = pj_dns_resolver_set_ns(\n      resolver, Number, <span class=\"supfact\">nameservers</span>, <span class=\"supfact\">ports</span>);\n  if (<span class=\"supfact\">status</span>)\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">status</span> =\n      pj_thread_create(pool, Number L, (pj_thread_proc *)poll_worker_thread,\n                       Number L, Number L, Number, &poll_thread);\n  if (<span class=\"supfact\">status</span>)\n    __assert_fail(String, String, Number, String);\n  return Number;\n}", "var": [{"name": "v3", "type": "struct pj_sockaddr_in_0 { pj_uint16_t sin_family; pj_uint16_t sin_port; pj_in_addr_0 sin_addr; char[8] sin_zero; }", "ref_name": "addr", "ref_type": "struct pj_sockaddr_in_0 { pj_uint16_t sin_family; pj_uint16_t sin_port; pj_in_addr_0 sin_addr; char[8] sin_zero; }"}], "body_in_train": true}, {"repo_owner": "UgoLi", "repo_name": "freeswitch_1.9", "path": "UgoLi/freeswitch_1.9/d1ccf4232326e8c626197357773aea34fe047302d38f466697723e4799059afa", "path_in_repo": "UgoLi/freeswitch_1.9/freeswitch_src/libs/xmlrpc-c/src/cpp/client.osh", "objdump": "0000000000002c3e <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE>:\n    2c3e:\t55                   \tpush   %rbp\n    2c3f:\t48 89 e5             \tmov    %rsp,%rbp\n    2c42:\t53                   \tpush   %rbx\n    2c43:\t48 81 ec e8 00 00 00 \tsub    $0xe8,%rsp\n    2c4a:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n    2c51:\t48 89 b5 30 ff ff ff \tmov    %rsi,-0xd0(%rbp)\n    2c58:\t48 89 95 28 ff ff ff \tmov    %rdx,-0xd8(%rbp)\n    2c5f:\t48 89 8d 20 ff ff ff \tmov    %rcx,-0xe0(%rbp)\n    2c66:\t4c 89 85 18 ff ff ff \tmov    %r8,-0xe8(%rbp)\n    2c6d:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    2c74:\t48 89 c7             \tmov    %rax,%rdi\n    2c77:\te8 00 00 00 00       \tcallq  2c7c <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x3e>\n    2c7c:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    2c83:\t48 89 c7             \tmov    %rax,%rdi\n    2c86:\te8 00 00 00 00       \tcallq  2c8b <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x4d>\n    2c8b:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    2c92:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    2c96:\t8b 50 10             \tmov    0x10(%rax),%edx\n    2c99:\t48 8d 8d 60 ff ff ff \tlea    -0xa0(%rbp),%rcx\n    2ca0:\t48 8b b5 20 ff ff ff \tmov    -0xe0(%rbp),%rsi\n    2ca7:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    2cae:\t48 89 c7             \tmov    %rax,%rdi\n    2cb1:\te8 00 00 00 00       \tcallq  2cb6 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x78>\n    2cb6:\t48 8d 45 af          \tlea    -0x51(%rbp),%rax\n    2cba:\t48 89 c7             \tmov    %rax,%rdi\n    2cbd:\te8 00 00 00 00       \tcallq  2cc2 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x84>\n    2cc2:\t48 8d 55 af          \tlea    -0x51(%rbp),%rdx\n    2cc6:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    2cca:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2cd1 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x93>\n    2cd1:\t48 89 c7             \tmov    %rax,%rdi\n    2cd4:\te8 00 00 00 00       \tcallq  2cd9 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x9b>\n    2cd9:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n    2ce0:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    2ce4:\t48 89 d6             \tmov    %rdx,%rsi\n    2ce7:\t48 89 c7             \tmov    %rax,%rdi\n    2cea:\te8 00 00 00 00       \tcallq  2cef <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0xb1>\n    2cef:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    2cf3:\t48 89 c7             \tmov    %rax,%rdi\n    2cf6:\te8 00 00 00 00       \tcallq  2cfb <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0xbd>\n    2cfb:\t48 8d 45 af          \tlea    -0x51(%rbp),%rax\n    2cff:\t48 89 c7             \tmov    %rax,%rdi\n    2d02:\te8 00 00 00 00       \tcallq  2d07 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0xc9>\n    2d07:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    2d0e:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    2d12:\t48 8b 00             \tmov    (%rax),%rax\n    2d15:\t48 8b 95 38 ff ff ff \tmov    -0xc8(%rbp),%rdx\n    2d1c:\t48 8b 52 38          \tmov    0x38(%rdx),%rdx\n    2d20:\t48 8b 12             \tmov    (%rdx),%rdx\n    2d23:\t48 8b 12             \tmov    (%rdx),%rdx\n    2d26:\t48 83 c2 10          \tadd    $0x10,%rdx\n    2d2a:\t4c 8b 02             \tmov    (%rdx),%r8\n    2d2d:\t48 8d 8d 40 ff ff ff \tlea    -0xc0(%rbp),%rcx\n    2d34:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n    2d3b:\t48 8b b5 30 ff ff ff \tmov    -0xd0(%rbp),%rsi\n    2d42:\t48 89 c7             \tmov    %rax,%rdi\n    2d45:\t41 ff d0             \tcallq  *%r8\n    2d48:\t48 8d 45 df          \tlea    -0x21(%rbp),%rax\n    2d4c:\t48 89 c7             \tmov    %rax,%rdi\n    2d4f:\te8 00 00 00 00       \tcallq  2d54 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x116>\n    2d54:\t48 8d 55 df          \tlea    -0x21(%rbp),%rdx\n    2d58:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2d5c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2d63 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x125>\n    2d63:\t48 89 c7             \tmov    %rax,%rdi\n    2d66:\te8 00 00 00 00       \tcallq  2d6b <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x12d>\n    2d6b:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n    2d72:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2d76:\t48 89 d6             \tmov    %rdx,%rsi\n    2d79:\t48 89 c7             \tmov    %rax,%rdi\n    2d7c:\te8 00 00 00 00       \tcallq  2d81 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x143>\n    2d81:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2d85:\t48 89 c7             \tmov    %rax,%rdi\n    2d88:\te8 00 00 00 00       \tcallq  2d8d <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x14f>\n    2d8d:\t48 8d 45 df          \tlea    -0x21(%rbp),%rax\n    2d91:\t48 89 c7             \tmov    %rax,%rdi\n    2d94:\te8 00 00 00 00       \tcallq  2d99 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x15b>\n    2d99:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n    2da0:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    2da7:\t48 89 d6             \tmov    %rdx,%rsi\n    2daa:\t48 89 c7             \tmov    %rax,%rdi\n    2dad:\te8 00 00 00 00       \tcallq  2db2 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x174>\n    2db2:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    2db9:\t48 89 c7             \tmov    %rax,%rdi\n    2dbc:\te8 00 00 00 00       \tcallq  2dc1 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x183>\n    2dc1:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    2dc8:\t48 89 c7             \tmov    %rax,%rdi\n    2dcb:\te8 00 00 00 00       \tcallq  2dd0 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x192>\n    2dd0:\te9 0e 01 00 00       \tjmpq   2ee3 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x2a5>\n    2dd5:\t48 89 c3             \tmov    %rax,%rbx\n    2dd8:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    2ddc:\t48 89 c7             \tmov    %rax,%rdi\n    2ddf:\te8 00 00 00 00       \tcallq  2de4 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x1a6>\n    2de4:\teb 03                \tjmp    2de9 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x1ab>\n    2de6:\t48 89 c3             \tmov    %rax,%rbx\n    2de9:\t48 8d 45 af          \tlea    -0x51(%rbp),%rax\n    2ded:\t48 89 c7             \tmov    %rax,%rdi\n    2df0:\te8 00 00 00 00       \tcallq  2df5 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x1b7>\n    2df5:\te9 c0 00 00 00       \tjmpq   2eba <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x27c>\n    2dfa:\t48 83 fa 01          \tcmp    $0x1,%rdx\n    2dfe:\t74 08                \tje     2e08 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x1ca>\n    2e00:\t48 89 c3             \tmov    %rax,%rbx\n    2e03:\te9 b2 00 00 00       \tjmpq   2eba <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x27c>\n    2e08:\t48 89 c7             \tmov    %rax,%rdi\n    2e0b:\te8 00 00 00 00       \tcallq  2e10 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x1d2>\n    2e10:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    2e14:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2e18:\t48 8b 00             \tmov    (%rax),%rax\n    2e1b:\t48 83 c0 10          \tadd    $0x10,%rax\n    2e1f:\t48 8b 10             \tmov    (%rax),%rdx\n    2e22:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2e26:\t48 89 c7             \tmov    %rax,%rdi\n    2e29:\tff d2                \tcallq  *%rdx\n    2e2b:\t48 89 c6             \tmov    %rax,%rsi\n    2e2e:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2e35 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x1f7>\n    2e35:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2e3a:\te8 00 00 00 00       \tcallq  2e3f <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x201>\n    2e3f:\t48 89 c3             \tmov    %rax,%rbx\n    2e42:\te8 00 00 00 00       \tcallq  2e47 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x209>\n    2e47:\teb 71                \tjmp    2eba <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x27c>\n    2e49:\t48 89 c3             \tmov    %rax,%rbx\n    2e4c:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2e50:\t48 89 c7             \tmov    %rax,%rdi\n    2e53:\te8 00 00 00 00       \tcallq  2e58 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x21a>\n    2e58:\teb 03                \tjmp    2e5d <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x21f>\n    2e5a:\t48 89 c3             \tmov    %rax,%rbx\n    2e5d:\t48 8d 45 df          \tlea    -0x21(%rbp),%rax\n    2e61:\t48 89 c7             \tmov    %rax,%rdi\n    2e64:\te8 00 00 00 00       \tcallq  2e69 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x22b>\n    2e69:\teb 4f                \tjmp    2eba <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x27c>\n    2e6b:\t48 83 fa 01          \tcmp    $0x1,%rdx\n    2e6f:\t74 05                \tje     2e76 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x238>\n    2e71:\t48 89 c3             \tmov    %rax,%rbx\n    2e74:\teb 44                \tjmp    2eba <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x27c>\n    2e76:\t48 89 c7             \tmov    %rax,%rdi\n    2e79:\te8 00 00 00 00       \tcallq  2e7e <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x240>\n    2e7e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2e82:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2e86:\t48 8b 00             \tmov    (%rax),%rax\n    2e89:\t48 83 c0 10          \tadd    $0x10,%rax\n    2e8d:\t48 8b 10             \tmov    (%rax),%rdx\n    2e90:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2e94:\t48 89 c7             \tmov    %rax,%rdi\n    2e97:\tff d2                \tcallq  *%rdx\n    2e99:\t48 89 c6             \tmov    %rax,%rsi\n    2e9c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2ea3 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x265>\n    2ea3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2ea8:\te8 00 00 00 00       \tcallq  2ead <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x26f>\n    2ead:\t48 89 c3             \tmov    %rax,%rbx\n    2eb0:\te8 00 00 00 00       \tcallq  2eb5 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x277>\n    2eb5:\teb 03                \tjmp    2eba <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x27c>\n    2eb7:\t48 89 c3             \tmov    %rax,%rbx\n    2eba:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    2ec1:\t48 89 c7             \tmov    %rax,%rdi\n    2ec4:\te8 00 00 00 00       \tcallq  2ec9 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x28b>\n    2ec9:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    2ed0:\t48 89 c7             \tmov    %rax,%rdi\n    2ed3:\te8 00 00 00 00       \tcallq  2ed8 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x29a>\n    2ed8:\t48 89 d8             \tmov    %rbx,%rax\n    2edb:\t48 89 c7             \tmov    %rax,%rdi\n    2ede:\te8 00 00 00 00       \tcallq  2ee3 <_ZN8xmlrpc_c10client_xml4callEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListEPNS_10rpcOutcomeE+0x2a5>\n    2ee3:\t48 81 c4 e8 00 00 00 \tadd    $0xe8,%rsp\n    2eea:\t5b                   \tpop    %rbx\n    2eeb:\t5d                   \tpop    %rbp\n    2eec:\tc3                   \tretq   \n    2eed:\t90                   \tnop", "code_s": "__int64 __fastcall xmlrpc_c client_xml call(__int64 a1, __int64 a2, __int64 a3,\n                                            __int64 a4, __int64 a5) {\n  char <span class=\"supfact\">v9</span>[Number];\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>[Number];\n  char <span class=\"supfact\">v12</span>;\n  char <span class=\"supfact\">v13</span>[Number];\n  char <span class=\"supfact\">v14</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v10</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v9</span>);\n  xmlrpc_c xml generateCall(\n      a3, a4, *(unsigned int *)(*(_QWORD *)(a1 + Number) + Number L),\n      <span class=\"supfact\">v10</span>);\n  std allocator<char> allocator(&<span class=\"supfact\">v12</span>, a4);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v11</span>, String, &<span class=\"supfact\">v12</span>);\n  xmlrpc_c xml trace(<span class=\"supfact\">v11</span>, <span class=\"supfact\">v10</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v11</span>);\n  std allocator<char> ~allocator(&<span class=\"supfact\">v12</span>);\n  (*(void(__fastcall **)(_QWORD, __int64, char *, char *))(\n      ***(_QWORD ***)(a1 + Number) + Number L))(\n      **(_QWORD **)(a1 + Number), a2, <span class=\"supfact\">v10</span>, <span class=\"supfact\">v9</span>);\n  std allocator<char> allocator(&<span class=\"supfact\">v14</span>, a2);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v13</span>, String, &<span class=\"supfact\">v14</span>);\n  xmlrpc_c xml trace(<span class=\"supfact\">v13</span>, <span class=\"supfact\">v9</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v13</span>);\n  std allocator<char> ~allocator(&<span class=\"supfact\">v14</span>);\n  xmlrpc_c xml parseResponse(<span class=\"supfact\">v9</span>, a5);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v9</span>);\n  return std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v10</span>);\n}", "code_t": "void __cdecl xmlrpc_c client_xml\ncall(xmlrpc_c client_xml *const this,\n     xmlrpc_c carriageParm *const carriageParmP, const std string *methodName,\n     const xmlrpc_c paramList *paramList, xmlrpc_c rpcOutcome *const outcomeP) {\n  std string <span class=\"supfact\">responseXml</span>;\n  std string <span class=\"supfact\">callXml</span>;\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>;\n  char <span class=\"supfact\">v12</span>[Number];\n  char <span class=\"supfact\">v13</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(&<span class=\"supfact\">callXml</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(&<span class=\"supfact\">responseXml</span>);\n  xmlrpc_c xml generateCall(methodName, paramList,\n                            (unsigned int)this->implP->dialect,\n                            &<span class=\"supfact\">callXml</span>);\n  std allocator<char> allocator(&<span class=\"supfact\">v11</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v10</span>, String, &<span class=\"supfact\">v11</span>);\n  xmlrpc_c xml trace(<span class=\"supfact\">v10</span>, &<span class=\"supfact\">callXml</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v10</span>);\n  std allocator<char> ~allocator(&<span class=\"supfact\">v11</span>);\n  (*(void(__fastcall **)(\n      xmlrpc_c clientXmlTransport *, xmlrpc_c carriageParm *const, std string *,\n      std string *))(*(_QWORD *)this->implP->transportP + Number L))(\n      this->implP->transportP, carriageParmP, &<span class=\"supfact\">callXml</span>,\n      &<span class=\"supfact\">responseXml</span>);\n  std allocator<char> allocator(&<span class=\"supfact\">v13</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v12</span>, String, &<span class=\"supfact\">v13</span>);\n  xmlrpc_c xml trace(<span class=\"supfact\">v12</span>, &<span class=\"supfact\">responseXml</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v12</span>);\n  std allocator<char> ~allocator(&<span class=\"supfact\">v13</span>);\n  xmlrpc_c xml parseResponse(&<span class=\"supfact\">responseXml</span>, outcomeP);\n  std __cxx11 basic_string<\n      char, std char_traits<char>,\n      std allocator<char>> ~basic_string(&<span class=\"supfact\">responseXml</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">callXml</span>);\n}", "var": [{"name": "v10", "type": "char[33]", "ref_name": "callXml", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v9", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "responseXml", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": true}, {"repo_owner": "wlanjie", "repo_name": "MacFFPlay", "path": "wlanjie/MacFFPlay/78ae32b340ba07c3cb17e90a50a538387bc0e7c8959109a69b563670698f434a", "path_in_repo": "wlanjie/MacFFPlay/ffmpeg/libavformat/gif.o", "objdump": "0000000000000088 <gif_image_write_header>:\n  88:\t48 83 ec 48          \tsub    $0x48,%rsp\n  8c:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n  91:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n  96:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n  9a:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n  9e:\t48 c7 44 24 30 00 00 \tmovq   $0x0,0x30(%rsp)\n  a5:\t00 00 \n  a7:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n  ac:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  b0:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n  b5:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n  b9:\t85 c0                \ttest   %eax,%eax\n  bb:\t7e 43                \tjle    100 <gif_image_write_header+0x78>\n  bd:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n  c1:\t85 c0                \ttest   %eax,%eax\n  c3:\t7e 3b                \tjle    100 <gif_image_write_header+0x78>\n  c5:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n  c9:\t48 98                \tcltq   \n  cb:\t48 c1 e0 06          \tshl    $0x6,%rax\n  cf:\t8b 54 24 24          \tmov    0x24(%rsp),%edx\n  d3:\t48 63 ca             \tmovslq %edx,%rcx\n  d6:\t48 99                \tcqto   \n  d8:\t48 f7 f9             \tidiv   %rcx\n  db:\t48 83 e8 0f          \tsub    $0xf,%rax\n  df:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n  e4:\t48 83 7c 24 30 00    \tcmpq   $0x0,0x30(%rsp)\n  ea:\t78 0b                \tjs     f7 <gif_image_write_header+0x6f>\n  ec:\t48 81 7c 24 30 ff 00 \tcmpq   $0xff,0x30(%rsp)\n  f3:\t00 00 \n  f5:\t7e 09                \tjle    100 <gif_image_write_header+0x78>\n  f7:\t48 c7 44 24 30 00 00 \tmovq   $0x0,0x30(%rsp)\n  fe:\t00 00 \n 100:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 105:\tba 03 00 00 00       \tmov    $0x3,%edx\n 10a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 10f:\t48 89 c7             \tmov    %rax,%rdi\n 112:\te8 00 00 00 00       \tcallq  117 <gif_image_write_header+0x8f>\n 117:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 11c:\tba 03 00 00 00       \tmov    $0x3,%edx\n 121:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 126:\t48 89 c7             \tmov    %rax,%rdi\n 129:\te8 00 00 00 00       \tcallq  12e <gif_image_write_header+0xa6>\n 12e:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 133:\t48 8b 80 10 03 00 00 \tmov    0x310(%rax),%rax\n 13a:\t8b 40 38             \tmov    0x38(%rax),%eax\n 13d:\t89 c2                \tmov    %eax,%edx\n 13f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 144:\t89 d6                \tmov    %edx,%esi\n 146:\t48 89 c7             \tmov    %rax,%rdi\n 149:\te8 00 00 00 00       \tcallq  14e <gif_image_write_header+0xc6>\n 14e:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 153:\t48 8b 80 10 03 00 00 \tmov    0x310(%rax),%rax\n 15a:\t8b 40 3c             \tmov    0x3c(%rax),%eax\n 15d:\t89 c2                \tmov    %eax,%edx\n 15f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 164:\t89 d6                \tmov    %edx,%esi\n 166:\t48 89 c7             \tmov    %rax,%rdi\n 169:\te8 00 00 00 00       \tcallq  16e <gif_image_write_header+0xe6>\n 16e:\t48 83 3c 24 00       \tcmpq   $0x0,(%rsp)\n 173:\t0f 84 a7 00 00 00    \tje     220 <gif_image_write_header+0x198>\n 179:\t48 8b 04 24          \tmov    (%rsp),%rax\n 17d:\t48 89 c7             \tmov    %rax,%rdi\n 180:\te8 7b fe ff ff       \tcallq  0 <get_palette_transparency_index>\n 185:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n 189:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 18e:\tbe f7 00 00 00       \tmov    $0xf7,%esi\n 193:\t48 89 c7             \tmov    %rax,%rdi\n 196:\te8 00 00 00 00       \tcallq  19b <gif_image_write_header+0x113>\n 19b:\t83 7c 24 2c 00       \tcmpl   $0x0,0x2c(%rsp)\n 1a0:\t78 06                \tjs     1a8 <gif_image_write_header+0x120>\n 1a2:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n 1a6:\teb 05                \tjmp    1ad <gif_image_write_header+0x125>\n 1a8:\tb8 1f 00 00 00       \tmov    $0x1f,%eax\n 1ad:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n 1b2:\t89 c6                \tmov    %eax,%esi\n 1b4:\t48 89 d7             \tmov    %rdx,%rdi\n 1b7:\te8 00 00 00 00       \tcallq  1bc <gif_image_write_header+0x134>\n 1bc:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n 1c1:\t89 c2                \tmov    %eax,%edx\n 1c3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 1c8:\t89 d6                \tmov    %edx,%esi\n 1ca:\t48 89 c7             \tmov    %rax,%rdi\n 1cd:\te8 00 00 00 00       \tcallq  1d2 <gif_image_write_header+0x14a>\n 1d2:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n 1d9:\t00 \n 1da:\teb 38                \tjmp    214 <gif_image_write_header+0x18c>\n 1dc:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n 1e0:\t48 98                \tcltq   \n 1e2:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 1e9:\t00 \n 1ea:\t48 8b 04 24          \tmov    (%rsp),%rax\n 1ee:\t48 01 d0             \tadd    %rdx,%rax\n 1f1:\t8b 00                \tmov    (%rax),%eax\n 1f3:\t25 ff ff ff 00       \tand    $0xffffff,%eax\n 1f8:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n 1fc:\t8b 54 24 28          \tmov    0x28(%rsp),%edx\n 200:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 205:\t89 d6                \tmov    %edx,%esi\n 207:\t48 89 c7             \tmov    %rax,%rdi\n 20a:\te8 00 00 00 00       \tcallq  20f <gif_image_write_header+0x187>\n 20f:\t83 44 24 3c 01       \taddl   $0x1,0x3c(%rsp)\n 214:\t81 7c 24 3c ff 00 00 \tcmpl   $0xff,0x3c(%rsp)\n 21b:\t00 \n 21c:\t7e be                \tjle    1dc <gif_image_write_header+0x154>\n 21e:\teb 3a                \tjmp    25a <gif_image_write_header+0x1d2>\n 220:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 225:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 22a:\t48 89 c7             \tmov    %rax,%rdi\n 22d:\te8 00 00 00 00       \tcallq  232 <gif_image_write_header+0x1aa>\n 232:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 237:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 23c:\t48 89 c7             \tmov    %rax,%rdi\n 23f:\te8 00 00 00 00       \tcallq  244 <gif_image_write_header+0x1bc>\n 244:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n 249:\t89 c2                \tmov    %eax,%edx\n 24b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 250:\t89 d6                \tmov    %edx,%esi\n 252:\t48 89 c7             \tmov    %rax,%rdi\n 255:\te8 00 00 00 00       \tcallq  25a <gif_image_write_header+0x1d2>\n 25a:\t83 7c 24 0c 00       \tcmpl   $0x0,0xc(%rsp)\n 25f:\t0f 88 99 00 00 00    \tjs     2fe <gif_image_write_header+0x276>\n 265:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 26a:\tbe 21 00 00 00       \tmov    $0x21,%esi\n 26f:\t48 89 c7             \tmov    %rax,%rdi\n 272:\te8 00 00 00 00       \tcallq  277 <gif_image_write_header+0x1ef>\n 277:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 27c:\tbe ff 00 00 00       \tmov    $0xff,%esi\n 281:\t48 89 c7             \tmov    %rax,%rdi\n 284:\te8 00 00 00 00       \tcallq  289 <gif_image_write_header+0x201>\n 289:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 28e:\tbe 0b 00 00 00       \tmov    $0xb,%esi\n 293:\t48 89 c7             \tmov    %rax,%rdi\n 296:\te8 00 00 00 00       \tcallq  29b <gif_image_write_header+0x213>\n 29b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 2a0:\tba 0b 00 00 00       \tmov    $0xb,%edx\n 2a5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2aa:\t48 89 c7             \tmov    %rax,%rdi\n 2ad:\te8 00 00 00 00       \tcallq  2b2 <gif_image_write_header+0x22a>\n 2b2:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 2b7:\tbe 03 00 00 00       \tmov    $0x3,%esi\n 2bc:\t48 89 c7             \tmov    %rax,%rdi\n 2bf:\te8 00 00 00 00       \tcallq  2c4 <gif_image_write_header+0x23c>\n 2c4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 2c9:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 2ce:\t48 89 c7             \tmov    %rax,%rdi\n 2d1:\te8 00 00 00 00       \tcallq  2d6 <gif_image_write_header+0x24e>\n 2d6:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n 2da:\t0f b7 d0             \tmovzwl %ax,%edx\n 2dd:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 2e2:\t89 d6                \tmov    %edx,%esi\n 2e4:\t48 89 c7             \tmov    %rax,%rdi\n 2e7:\te8 00 00 00 00       \tcallq  2ec <gif_image_write_header+0x264>\n 2ec:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 2f1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2f6:\t48 89 c7             \tmov    %rax,%rdi\n 2f9:\te8 00 00 00 00       \tcallq  2fe <gif_image_write_header+0x276>\n 2fe:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 303:\t48 89 c7             \tmov    %rax,%rdi\n 306:\te8 00 00 00 00       \tcallq  30b <gif_image_write_header+0x283>\n 30b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 310:\t48 83 c4 48          \tadd    $0x48,%rsp\n 314:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gif_image_write_header(__int64 a1, __int64 a2, int a3,\n                                          __int64 a4) {\n  unsigned int v4;\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">i</span>;\n  LODWORD(<span class=\"supfact\">v10</span>) = Number;\n  <span class=\"supfact\">v8</span> = *(_QWORD *)(a2 + Number);\n  if ((int)<span class=\"supfact\">v8</span> > Number &&\n      SHIDWORD(<span class=\"supfact\">v8</span>) > Number) {\n    <span class=\"supfact\">v10</span> = ((__int64)(int)<span class=\"supfact\">v8</span> << Number) /\n                              SHIDWORD(<span class=\"supfact\">v8</span>) -\n                          Number;\n    if (<span class=\"supfact\">v10</span> < Number || <span class=\"supfact\">v10</span> > Number)\n      LODWORD(<span class=\"supfact\">v10</span>) = Number;\n  }\n  avio_write(a1, &unk_940, Number L);\n  avio_write(a1, &unk_944, Number L);\n  avio_wl16(a1, *(unsigned int *)(*(_QWORD *)(a2 + Number) + Number L));\n  avio_wl16(a1, *(unsigned int *)(*(_QWORD *)(a2 + Number) + Number L));\n  if (a4) {\n    <span class=\"supfact\">v9</span> = get_palette_transparency_index(a4);\n    avio_w8(a1, Number L);\n    if (<span class=\"supfact\">v9</span> < Number)\n      v4 = Number;\n    else\n      v4 = <span class=\"supfact\">v9</span>;\n    avio_w8(a1, v4);\n    avio_w8(a1, (unsigned int)<span class=\"supfact\">v10</span>);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>)\n      avio_wb24(a1, *(_DWORD *)(Number L * <span class=\"supfact\">i</span> + a4) & Number);\n  } else {\n    avio_w8(a1, Number L);\n    avio_w8(a1, Number L);\n    avio_w8(a1, (unsigned int)<span class=\"supfact\">v10</span>);\n  }\n  if (a3 >= Number) {\n    avio_w8(a1, Number L);\n    avio_w8(a1, Number L);\n    avio_w8(a1, Number L);\n    avio_write(a1, String, Number L);\n    avio_w8(a1, Number L);\n    avio_w8(a1, Number L);\n    avio_wl16(a1, (unsigned __int16)a3);\n    avio_w8(a1, Number L);\n  }\n  avio_flush(a1);\n  return Number L;\n}", "code_t": "int __cdecl gif_image_write_header(AVIOContext_0 *pb, AVStream_0 *st,\n                                   int loop_count, uint32_t *palette) {\n  unsigned int v4;\n  AVRational_0 <span class=\"supfact\">sar</span>;\n  int <span class=\"supfact\">bcid</span>;\n  int64_t <span class=\"supfact\">aspect</span>;\n  int <span class=\"supfact\">i</span>;\n  LODWORD(<span class=\"supfact\">aspect</span>) = Number;\n  <span class=\"supfact\">sar</span> = st->sample_aspect_ratio;\n  if (<span class=\"supfact\">sar</span>.num > Number && <span class=\"supfact\">sar</span>.den > Number) {\n    <span class=\"supfact\">aspect</span> =\n        ((__int64)<span class=\"supfact\">sar</span>.num << Number) / <span class=\"supfact\">sar</span>.den -\n        Number;\n    if (<span class=\"supfact\">aspect</span> < Number || <span class=\"supfact\">aspect</span> > Number)\n      LODWORD(<span class=\"supfact\">aspect</span>) = Number;\n  }\n  avio_write(pb, &unk_940, Number L);\n  avio_write(pb, &unk_944, Number L);\n  avio_wl16(pb, (unsigned int)st->codecpar->width);\n  avio_wl16(pb, (unsigned int)st->codecpar->height);\n  if (palette) {\n    <span class=\"supfact\">bcid</span> = get_palette_transparency_index(palette);\n    avio_w8(pb, Number L);\n    if (<span class=\"supfact\">bcid</span> < Number)\n      v4 = Number;\n    else\n      v4 = <span class=\"supfact\">bcid</span>;\n    avio_w8(pb, v4);\n    avio_w8(pb, (unsigned int)<span class=\"supfact\">aspect</span>);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>)\n      avio_wb24(pb, palette[<span class=\"supfact\">i</span>] & Number);\n  } else {\n    avio_w8(pb, Number L);\n    avio_w8(pb, Number L);\n    avio_w8(pb, (unsigned int)<span class=\"supfact\">aspect</span>);\n  }\n  if (loop_count >= Number) {\n    avio_w8(pb, Number L);\n    avio_w8(pb, Number L);\n    avio_w8(pb, Number L);\n    avio_write(pb, String, Number L);\n    avio_w8(pb, Number L);\n    avio_w8(pb, Number L);\n    avio_wl16(pb, (unsigned __int16)loop_count);\n    avio_w8(pb, Number L);\n  }\n  avio_flush(pb);\n  return Number;\n}", "var": [{"name": "v8", "type": "AVIOContext *", "ref_name": "sar", "ref_type": "struct AVRational_0 { int num; int den; }"}], "body_in_train": false}, {"code_s": "__int64 __fastcall std\n__niter_base<Poco NestedDiagnosticContext Context *,\n             std vector<Poco NestedDiagnosticContext Context>>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = a1;\n  return *(_QWORD *)__gnu_cxx\n      __normal_iterator<Poco NestedDiagnosticContext Context *,\n                        std vector<Poco NestedDiagnosticContext Context>>\n          base((__int64)&<span class=\"supfact\">v2</span>);\n}", "code_t": "Poco NestedDiagnosticContext Context *__cdecl std\n__niter_base<Poco NestedDiagnosticContext Context *,\n             std vector<Poco NestedDiagnosticContext Context>>(\n    __gnu_cxx\n        __normal_iterator<Poco NestedDiagnosticContext Context *,\n                          std vector<Poco NestedDiagnosticContext Context>>\n            __it) {\n  __gnu_cxx __normal_iterator<Poco NestedDiagnosticContext Context *,\n                              std vector<Poco NestedDiagnosticContext Context>>\n      <span class=\"supfact\">__ita</span>;\n  <span class=\"supfact\">__ita</span>._M_current = __it._M_current;\n  return *__gnu_cxx\n      __normal_iterator<Poco NestedDiagnosticContext Context *,\n                        std vector<Poco NestedDiagnosticContext Context>>\n          base(&<span class=\"supfact\">__ita</span>);\n}", "var": [{"name": "v2", "type": "Poco::NestedDiagnosticContext::Context *", "ref_name": "__ita", "ref_type": "struct __gnu_cxx::__normal_iterator<Poco::NestedDiagnosticContext::Context*,std::vector<Poco::NestedDiagnosticContext::Context> > { Poco::NestedDiagnosticContext::Context * _M_current; }"}], "body_in_train": true}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/3e29342111618f59e40506c60a32ae183dd8a8410ecb5f373d3fe9bc77a90288", "path_in_repo": "ftnapps/pkg-sbbs/xtrn/tbd/gcc.linux.exe.debug/reroll", "objdump": "00000000004037e0 <os_version>:\n  4037e0:\t55                   \tpush   %rbp\n  4037e1:\t48 89 e5             \tmov    %rsp,%rbp\n  4037e4:\t48 81 ec a0 01 00 00 \tsub    $0x1a0,%rsp\n  4037eb:\t48 89 bd 68 fe ff ff \tmov    %rdi,-0x198(%rbp)\n  4037f2:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  4037f9:\t48 89 c7             \tmov    %rax,%rdi\n  4037fc:\te8 2f d9 ff ff       \tcallq  401130 <uname@plt>\n  403801:\t85 c0                \ttest   %eax,%eax\n  403803:\t79 22                \tjns    403827 <os_version+0x47>\n  403805:\te8 66 d8 ff ff       \tcallq  401070 <__errno_location@plt>\n  40380a:\t8b 10                \tmov    (%rax),%edx\n  40380c:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  403813:\tbe 5f 46 40 00       \tmov    $0x40465f,%esi\n  403818:\t48 89 c7             \tmov    %rax,%rdi\n  40381b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403820:\te8 db d9 ff ff       \tcallq  401200 <sprintf@plt>\n  403825:\teb 3f                \tjmp    403866 <os_version+0x86>\n  403827:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  40382e:\t48 8d b0 04 01 00 00 \tlea    0x104(%rax),%rsi\n  403835:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  40383c:\t48 8d 88 82 00 00 00 \tlea    0x82(%rax),%rcx\n  403843:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  40384a:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  403851:\t49 89 f0             \tmov    %rsi,%r8\n  403854:\tbe 76 46 40 00       \tmov    $0x404676,%esi\n  403859:\t48 89 c7             \tmov    %rax,%rdi\n  40385c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403861:\te8 9a d9 ff ff       \tcallq  401200 <sprintf@plt>\n  403866:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  40386d:\tc9                   \tleaveq \n  40386e:\tc3                   \tretq   ", "code_s": "char *__fastcall os_version(char *a1) {\n  int *v1;\n  struct utsname <span class=\"supfact\">name</span>;\n  if (uname(&<span class=\"supfact\">name</span>) >= Number) {\n    sprintf(a1, String, <span class=\"supfact\">name</span>.sysname,\n            <span class=\"supfact\">name</span>.release, <span class=\"supfact\">name</span>.machine);\n  } else {\n    v1 = __errno_location();\n    sprintf(a1, String, (unsigned int)*v1);\n  }\n  return a1;\n}", "code_t": "char *__cdecl os_version(char *str) {\n  int *v1;\n  utsname <span class=\"supfact\">unixver</span>;\n  if (uname(&<span class=\"supfact\">unixver</span>) >= Number) {\n    sprintf(str, String, <span class=\"supfact\">unixver</span>.sysname,\n            <span class=\"supfact\">unixver</span>.release, <span class=\"supfact\">unixver</span>.machine);\n  } else {\n    v1 = __errno_location();\n    sprintf(str, String, (unsigned int)*v1);\n  }\n  return str;\n}", "var": [{"name": "name", "type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] __domainname; }", "ref_name": "unixver", "ref_type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] __domainname; }"}], "body_in_train": true}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/dcb8cfc19b1d723fd5fad9ae551b9f63adb87e9e6e82c5bbaf0a221013c62501", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/ssl/ssl_mail_client", "objdump": "0000000000404800 <mbedtls_net_recv_timeout>:\n  404800:\t55                   \tpush   %rbp\n  404801:\t48 89 e5             \tmov    %rsp,%rbp\n  404804:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n  40480b:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  404812:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n  404819:\t48 89 95 48 ff ff ff \tmov    %rdx,-0xb8(%rbp)\n  404820:\t89 8d 44 ff ff ff    \tmov    %ecx,-0xbc(%rbp)\n  404826:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40482d:\t8b 00                \tmov    (%rax),%eax\n  40482f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  404832:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  404836:\t79 0a                \tjns    404842 <mbedtls_net_recv_timeout+0x42>\n  404838:\tb8 bb ff ff ff       \tmov    $0xffffffbb,%eax\n  40483d:\te9 37 01 00 00       \tjmpq   404979 <mbedtls_net_recv_timeout+0x179>\n  404842:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404847:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  40484c:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  404853:\t48 89 d7             \tmov    %rdx,%rdi\n  404856:\tfc                   \tcld    \n  404857:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  40485a:\t89 f8                \tmov    %edi,%eax\n  40485c:\t89 ca                \tmov    %ecx,%edx\n  40485e:\t89 55 f8             \tmov    %edx,-0x8(%rbp)\n  404861:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  404864:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404867:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  40486a:\t85 c0                \ttest   %eax,%eax\n  40486c:\t0f 48 c2             \tcmovs  %edx,%eax\n  40486f:\tc1 f8 06             \tsar    $0x6,%eax\n  404872:\t89 c6                \tmov    %eax,%esi\n  404874:\t48 63 c6             \tmovslq %esi,%rax\n  404877:\t48 8b bc c5 60 ff ff \tmov    -0xa0(%rbp,%rax,8),%rdi\n  40487e:\tff \n  40487f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404882:\t99                   \tcltd   \n  404883:\tc1 ea 1a             \tshr    $0x1a,%edx\n  404886:\t01 d0                \tadd    %edx,%eax\n  404888:\t83 e0 3f             \tand    $0x3f,%eax\n  40488b:\t29 d0                \tsub    %edx,%eax\n  40488d:\tba 01 00 00 00       \tmov    $0x1,%edx\n  404892:\t89 c1                \tmov    %eax,%ecx\n  404894:\t48 d3 e2             \tshl    %cl,%rdx\n  404897:\t48 89 d0             \tmov    %rdx,%rax\n  40489a:\t48 09 c7             \tor     %rax,%rdi\n  40489d:\t48 89 fa             \tmov    %rdi,%rdx\n  4048a0:\t48 63 c6             \tmovslq %esi,%rax\n  4048a3:\t48 89 94 c5 60 ff ff \tmov    %rdx,-0xa0(%rbp,%rax,8)\n  4048aa:\tff \n  4048ab:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n  4048b1:\t89 c0                \tmov    %eax,%eax\n  4048b3:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n  4048ba:\t48 c1 e8 20          \tshr    $0x20,%rax\n  4048be:\tc1 e8 06             \tshr    $0x6,%eax\n  4048c1:\t89 c0                \tmov    %eax,%eax\n  4048c3:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4048c7:\t8b 95 44 ff ff ff    \tmov    -0xbc(%rbp),%edx\n  4048cd:\t89 d0                \tmov    %edx,%eax\n  4048cf:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n  4048d6:\t48 c1 e8 20          \tshr    $0x20,%rax\n  4048da:\tc1 e8 06             \tshr    $0x6,%eax\n  4048dd:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n  4048e3:\t29 c2                \tsub    %eax,%edx\n  4048e5:\t89 d0                \tmov    %edx,%eax\n  4048e7:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n  4048ed:\t89 c0                \tmov    %eax,%eax\n  4048ef:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4048f3:\t83 bd 44 ff ff ff 00 \tcmpl   $0x0,-0xbc(%rbp)\n  4048fa:\t74 06                \tje     404902 <mbedtls_net_recv_timeout+0x102>\n  4048fc:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  404900:\teb 05                \tjmp    404907 <mbedtls_net_recv_timeout+0x107>\n  404902:\tba 00 00 00 00       \tmov    $0x0,%edx\n  404907:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40490a:\t8d 78 01             \tlea    0x1(%rax),%edi\n  40490d:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  404914:\t49 89 d0             \tmov    %rdx,%r8\n  404917:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  40491c:\tba 00 00 00 00       \tmov    $0x0,%edx\n  404921:\t48 89 c6             \tmov    %rax,%rsi\n  404924:\te8 57 d9 ff ff       \tcallq  402280 <select@plt>\n  404929:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40492c:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  404930:\t75 07                \tjne    404939 <mbedtls_net_recv_timeout+0x139>\n  404932:\tb8 00 98 ff ff       \tmov    $0xffff9800,%eax\n  404937:\teb 40                \tjmp    404979 <mbedtls_net_recv_timeout+0x179>\n  404939:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  40493d:\t79 1a                \tjns    404959 <mbedtls_net_recv_timeout+0x159>\n  40493f:\te8 0c d7 ff ff       \tcallq  402050 <__errno_location@plt>\n  404944:\t8b 00                \tmov    (%rax),%eax\n  404946:\t83 f8 04             \tcmp    $0x4,%eax\n  404949:\t75 07                \tjne    404952 <mbedtls_net_recv_timeout+0x152>\n  40494b:\tb8 00 97 ff ff       \tmov    $0xffff9700,%eax\n  404950:\teb 27                \tjmp    404979 <mbedtls_net_recv_timeout+0x179>\n  404952:\tb8 b4 ff ff ff       \tmov    $0xffffffb4,%eax\n  404957:\teb 20                \tjmp    404979 <mbedtls_net_recv_timeout+0x179>\n  404959:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n  404960:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n  404967:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40496e:\t48 89 ce             \tmov    %rcx,%rsi\n  404971:\t48 89 c7             \tmov    %rax,%rdi\n  404974:\te8 ea fd ff ff       \tcallq  404763 <mbedtls_net_recv>\n  404979:\tc9                   \tleaveq \n  40497a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_net_recv_timeout(int *a1, void *a2, size_t a3) {\n  fd_set <span class=\"supfact\">readfds</span>;\n  struct timeval <span class=\"supfact\">timeout</span>;\n  int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = *a1;\n  if (<span class=\"supfact\">v10</span> < Number)\n    return Number L;\n  memset(&<span class=\"supfact\">readfds</span>, Number, sizeof(<span class=\"supfact\">readfds</span>));\n  <span class=\"supfact\">v9</span> = Number;\n  <span class=\"supfact\">v8</span> = (unsigned int)&<span class=\"supfact\">timeout</span>;\n  <span class=\"supfact\">readfds</span>.fds_bits[<span class=\"supfact\">v10</span> >> Number] |=\n      Number L << (<span class=\"supfact\">v10</span> % Number);\n  <span class=\"supfact\">timeout</span>.tv_sec = Number L;\n  <span class=\"supfact\">timeout</span>.tv_usec = Number L;\n  <span class=\"supfact\">v7</span> =\n      select(<span class=\"supfact\">v10</span> + Number, &<span class=\"supfact\">readfds</span>, Number L,\n             Number L, Number L);\n  if (!<span class=\"supfact\">v7</span>)\n    return Number L;\n  if (<span class=\"supfact\">v7</span> >= Number)\n    return mbedtls_net_recv(a1, a2, a3);\n  if (*__errno_location() == Number)\n    return Number L;\n  return Number L;\n}", "code_t": "int __cdecl mbedtls_net_recv_timeout(void *ctx, unsigned __int8 *buf,\n                                     size_t len, uint32_t timeout) {\n  fd_set <span class=\"supfact\">read_fds</span>;\n  timeval <span class=\"supfact\">tv</span>;\n  int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">__d1</span>;\n  int <span class=\"supfact\">__d0</span>;\n  int <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">fd</span> = *(_DWORD *)ctx;\n  if (<span class=\"supfact\">fd</span> < Number)\n    return Number;\n  memset(&<span class=\"supfact\">read_fds</span>, Number, sizeof(<span class=\"supfact\">read_fds</span>));\n  <span class=\"supfact\">__d0</span> = Number;\n  <span class=\"supfact\">__d1</span> = (unsigned int)&<span class=\"supfact\">tv</span>;\n  <span class=\"supfact\">read_fds</span>.__fds_bits[<span class=\"supfact\">fd</span> >> Number] |=\n      Number L << (<span class=\"supfact\">fd</span> % Number);\n  <span class=\"supfact\">tv</span>.tv_sec = Number L;\n  <span class=\"supfact\">tv</span>.tv_usec = Number L;\n  <span class=\"supfact\">ret</span> =\n      select(<span class=\"supfact\">fd</span> + Number, &<span class=\"supfact\">read_fds</span>, Number L,\n             Number L, Number L);\n  if (!<span class=\"supfact\">ret</span>)\n    return Number;\n  if (<span class=\"supfact\">ret</span> >= Number)\n    return mbedtls_net_recv(ctx, buf, len);\n  if (*__errno_location() == Number)\n    return Number;\n  return Number;\n}", "var": [{"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "readfds", "type": "struct fd_set { __fd_mask[16] __fds_bits; }", "ref_name": "read_fds", "ref_type": "struct fd_set { __fd_mask[16] __fds_bits; }"}], "body_in_train": true}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/dcb8cfc19b1d723fd5fad9ae551b9f63adb87e9e6e82c5bbaf0a221013c62501", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/ssl/ssl_mail_client", "objdump": "000000000044c42d <mbedtls_md_hmac>:\n  44c42d:\t55                   \tpush   %rbp\n  44c42e:\t48 89 e5             \tmov    %rsp,%rbp\n  44c431:\t48 83 ec 50          \tsub    $0x50,%rsp\n  44c435:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  44c439:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  44c43d:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  44c441:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  44c445:\t4c 89 45 b8          \tmov    %r8,-0x48(%rbp)\n  44c449:\t4c 89 4d b0          \tmov    %r9,-0x50(%rbp)\n  44c44d:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  44c452:\t75 0a                \tjne    44c45e <mbedtls_md_hmac+0x31>\n  44c454:\tb8 00 af ff ff       \tmov    $0xffffaf00,%eax\n  44c459:\te9 9f 00 00 00       \tjmpq   44c4fd <mbedtls_md_hmac+0xd0>\n  44c45e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  44c462:\t48 89 c7             \tmov    %rax,%rdi\n  44c465:\te8 dc f1 ff ff       \tcallq  44b646 <mbedtls_md_init>\n  44c46a:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  44c46e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  44c472:\tba 01 00 00 00       \tmov    $0x1,%edx\n  44c477:\t48 89 ce             \tmov    %rcx,%rsi\n  44c47a:\t48 89 c7             \tmov    %rax,%rdi\n  44c47d:\te8 41 f4 ff ff       \tcallq  44b8c3 <mbedtls_md_setup>\n  44c482:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  44c485:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  44c489:\t75 5c                \tjne    44c4e7 <mbedtls_md_hmac+0xba>\n  44c48b:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  44c48f:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  44c493:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  44c497:\t48 89 ce             \tmov    %rcx,%rsi\n  44c49a:\t48 89 c7             \tmov    %rax,%rdi\n  44c49d:\te8 b1 fb ff ff       \tcallq  44c053 <mbedtls_md_hmac_starts>\n  44c4a2:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  44c4a5:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  44c4a9:\t75 3f                \tjne    44c4ea <mbedtls_md_hmac+0xbd>\n  44c4ab:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  44c4af:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  44c4b3:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  44c4b7:\t48 89 ce             \tmov    %rcx,%rsi\n  44c4ba:\t48 89 c7             \tmov    %rax,%rdi\n  44c4bd:\te8 93 fd ff ff       \tcallq  44c255 <mbedtls_md_hmac_update>\n  44c4c2:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  44c4c5:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  44c4c9:\t75 22                \tjne    44c4ed <mbedtls_md_hmac+0xc0>\n  44c4cb:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  44c4cf:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  44c4d3:\t48 89 d6             \tmov    %rdx,%rsi\n  44c4d6:\t48 89 c7             \tmov    %rax,%rdi\n  44c4d9:\te8 cb fd ff ff       \tcallq  44c2a9 <mbedtls_md_hmac_finish>\n  44c4de:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  44c4e1:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  44c4e5:\teb 07                \tjmp    44c4ee <mbedtls_md_hmac+0xc1>\n  44c4e7:\t90                   \tnop\n  44c4e8:\teb 04                \tjmp    44c4ee <mbedtls_md_hmac+0xc1>\n  44c4ea:\t90                   \tnop\n  44c4eb:\teb 01                \tjmp    44c4ee <mbedtls_md_hmac+0xc1>\n  44c4ed:\t90                   \tnop\n  44c4ee:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  44c4f2:\t48 89 c7             \tmov    %rax,%rdi\n  44c4f5:\te8 71 f1 ff ff       \tcallq  44b66b <mbedtls_md_free>\n  44c4fa:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  44c4fd:\tc9                   \tleaveq \n  44c4fe:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_md_hmac(__int64 a1, __int64 a2, unsigned __int64 a3,\n                                   __int64 a4, __int64 a5, __int64 a6) {\n  void *<span class=\"supfact\">v11</span>[Number];\n  unsigned int <span class=\"supfact\">v12</span>;\n  if (!a1)\n    return Number L;\n  mbedtls_md_init(<span class=\"supfact\">v11</span>);\n  <span class=\"supfact\">v12</span> =\n      mbedtls_md_setup((__int64)<span class=\"supfact\">v11</span>, a1, Number);\n  if (!<span class=\"supfact\">v12</span>) {\n    <span class=\"supfact\">v12</span> =\n        mbedtls_md_hmac_starts((__int64)<span class=\"supfact\">v11</span>, a2, a3);\n    if (!<span class=\"supfact\">v12</span>) {\n      <span class=\"supfact\">v12</span> = mbedtls_md_hmac_update(<span class=\"supfact\">v11</span>, a4, a5);\n      if (!<span class=\"supfact\">v12</span>)\n        <span class=\"supfact\">v12</span> = mbedtls_md_hmac_finish(<span class=\"supfact\">v11</span>, a6);\n    }\n  }\n  mbedtls_md_free(<span class=\"supfact\">v11</span>);\n  return <span class=\"supfact\">v12</span>;\n}", "code_t": "int __cdecl mbedtls_md_hmac(const mbedtls_md_info_t_0 *md_info,\n                            const unsigned __int8 *key, size_t keylen,\n                            const unsigned __int8 *input, size_t ilen,\n                            unsigned __int8 *output) {\n  mbedtls_md_context_t_0 <span class=\"supfact\">ctx</span>;\n  int <span class=\"supfact\">ret</span>;\n  if (!md_info)\n    return Number;\n  mbedtls_md_init(&<span class=\"supfact\">ctx</span>);\n  <span class=\"supfact\">ret</span> = mbedtls_md_setup(&<span class=\"supfact\">ctx</span>, md_info, Number);\n  if (!<span class=\"supfact\">ret</span>) {\n    <span class=\"supfact\">ret</span> =\n        mbedtls_md_hmac_starts(&<span class=\"supfact\">ctx</span>, key, keylen);\n    if (!<span class=\"supfact\">ret</span>) {\n      <span class=\"supfact\">ret</span> =\n          mbedtls_md_hmac_update(&<span class=\"supfact\">ctx</span>, input, ilen);\n      if (!<span class=\"supfact\">ret</span>)\n        <span class=\"supfact\">ret</span> =\n            mbedtls_md_hmac_finish(&<span class=\"supfact\">ctx</span>, output);\n    }\n  }\n  mbedtls_md_free(&<span class=\"supfact\">ctx</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v11", "type": "struct mbedtls_md_context_t_0 { const mbedtls_md_info_t_0 * md_info; void * md_ctx; void * hmac_ctx; }", "ref_name": "ctx", "ref_type": "struct mbedtls_md_context_t_0 { const mbedtls_md_info_t_0 * md_info; void * md_ctx; void * hmac_ctx; }"}], "body_in_train": true}, {"repo_owner": "FireLord", "repo_name": "android_kernel_lenovo_passion", "path": "FireLord/android_kernel_lenovo_passion/7fd8626c52e0eee9c79dcdb16541bd73c34e850588f3cafda3c987310c2c9658", "path_in_repo": "FireLord/android_kernel_lenovo_passion/tools/perf/util/trace-event-parse.o", "objdump": "000000000000055a <event_format__print>:\n 55a:\t55                   \tpush   %rbp\n 55b:\t48 89 e5             \tmov    %rsp,%rbp\n 55e:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n 565:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n 569:\t89 75 84             \tmov    %esi,-0x7c(%rbp)\n 56c:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n 573:\t89 4d 80             \tmov    %ecx,-0x80(%rbp)\n 576:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 57d:\t00 00 \n 57f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 583:\t31 c0                \txor    %eax,%eax\n 585:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n 589:\tba 40 00 00 00       \tmov    $0x40,%edx\n 58e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 593:\t48 89 c7             \tmov    %rax,%rdi\n 596:\te8 00 00 00 00       \tcallq  59b <event_format__print+0x41>\n 59b:\t8b 45 84             \tmov    -0x7c(%rbp),%eax\n 59e:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n 5a1:\t8b 45 80             \tmov    -0x80(%rbp),%eax\n 5a4:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n 5a7:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 5ae:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 5b2:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 5b6:\t48 89 c7             \tmov    %rax,%rdi\n 5b9:\te8 00 00 00 00       \tcallq  5be <event_format__print+0x64>\n 5be:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n 5c2:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n 5c6:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 5ca:\t48 89 ce             \tmov    %rcx,%rsi\n 5cd:\t48 89 c7             \tmov    %rax,%rdi\n 5d0:\te8 00 00 00 00       \tcallq  5d5 <event_format__print+0x7b>\n 5d5:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 5d9:\t48 89 c7             \tmov    %rax,%rdi\n 5dc:\te8 00 00 00 00       \tcallq  5e1 <event_format__print+0x87>\n 5e1:\t90                   \tnop\n 5e2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 5e6:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 5ed:\t00 00 \n 5ef:\t74 05                \tje     5f6 <event_format__print+0x9c>\n 5f1:\te8 00 00 00 00       \tcallq  5f6 <event_format__print+0x9c>\n 5f6:\tc9                   \tleaveq \n 5f7:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall event_format__print(__int64 a1, int a2, __int64 a3,\n                                                int a4) {\n  char <span class=\"supfact\">v7</span>[Number];\n  __int64 <span class=\"supfact\">s</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  LODWORD(<span class=\"supfact\">s</span>[Number]) = a2;\n  HIDWORD(<span class=\"supfact\">s</span>[Number]) = a4;\n  <span class=\"supfact\">s</span>[Number] = a3;\n  trace_seq_init(<span class=\"supfact\">v7</span>);\n  pevent_event_info(<span class=\"supfact\">v7</span>, a1, <span class=\"supfact\">s</span>);\n  trace_seq_do_printf(<span class=\"supfact\">v7</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl event_format__print(event_format *event, int cpu, void *data,\n                                 int size) {\n  trace_seq <span class=\"supfact\">s</span>;\n  pevent_record <span class=\"supfact\">record</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  memset(&<span class=\"supfact\">record</span>, Number, sizeof(<span class=\"supfact\">record</span>));\n  <span class=\"supfact\">record</span>.cpu = cpu;\n  <span class=\"supfact\">record</span>.size = size;\n  <span class=\"supfact\">record</span>.data = data;\n  trace_seq_init(&<span class=\"supfact\">s</span>);\n  pevent_event_info(&<span class=\"supfact\">s</span>, event, &<span class=\"supfact\">record</span>);\n  trace_seq_do_printf(&<span class=\"supfact\">s</span>);\n}", "var": [{"name": "s", "type": "struct pevent_record { unsigned __int64 ts; unsigned __int64 offset; __int64 missed_events; int record_size; int size; void * data; int cpu; int ref_count; int locked; PADDING (4); void * priv; }", "ref_name": "record", "ref_type": "struct pevent_record { unsigned __int64 ts; unsigned __int64 offset; __int64 missed_events; int record_size; int size; void * data; int cpu; int ref_count; int locked; PADDING (4); void * priv; }"}, {"name": "v7", "type": "struct trace_seq { char * buffer; unsigned int buffer_size; unsigned int len; unsigned int readpos; PADDING (4); }", "ref_name": "s", "ref_type": "struct trace_seq { char * buffer; unsigned int buffer_size; unsigned int len; unsigned int readpos; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/ea0ceb3bc77ef5a916f30c00686629290c3c9cfecfd1bf3ca35a1b27dd548b47", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/NSM_Server.o", "objdump": "0000000000000000 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 38          \tsub    $0x38,%rsp\n   9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  11:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  15:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  19:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  1d:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  21:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  25:\t48 89 d6             \tmov    %rdx,%rsi\n  28:\t48 89 c7             \tmov    %rax,%rdi\n  2b:\te8 00 00 00 00       \tcallq  30 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x30>\n  30:\t84 c0                \ttest   %al,%al\n  32:\t74 39                \tje     6d <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x6d>\n  34:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  38:\t48 89 c7             \tmov    %rax,%rdi\n  3b:\te8 00 00 00 00       \tcallq  40 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x40>\n  40:\t48 89 c3             \tmov    %rax,%rbx\n  43:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  47:\t48 89 c7             \tmov    %rax,%rdi\n  4a:\te8 00 00 00 00       \tcallq  4f <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x4f>\n  4f:\t48 89 de             \tmov    %rbx,%rsi\n  52:\t48 89 c7             \tmov    %rax,%rdi\n  55:\te8 00 00 00 00       \tcallq  5a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x5a>\n  5a:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  5e:\t48 89 c7             \tmov    %rax,%rdi\n  61:\te8 00 00 00 00       \tcallq  66 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x66>\n  66:\t48 83 45 e8 20       \taddq   $0x20,-0x18(%rbp)\n  6b:\teb b0                \tjmp    1d <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x1d>\n  6d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  71:\teb 33                \tjmp    a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0xa6>\n  73:\t48 89 c7             \tmov    %rax,%rdi\n  76:\te8 00 00 00 00       \tcallq  7b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x7b>\n  7b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  7f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  83:\t48 89 d6             \tmov    %rdx,%rsi\n  86:\t48 89 c7             \tmov    %rax,%rdi\n  89:\te8 00 00 00 00       \tcallq  8e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x8e>\n  8e:\te8 00 00 00 00       \tcallq  93 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x93>\n  93:\t48 89 c3             \tmov    %rax,%rbx\n  96:\te8 00 00 00 00       \tcallq  9b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x9b>\n  9b:\t48 89 d8             \tmov    %rbx,%rax\n  9e:\t48 89 c7             \tmov    %rax,%rdi\n  a1:\te8 00 00 00 00       \tcallq  a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0xa6>\n  a6:\t48 83 c4 38          \tadd    $0x38,%rsp\n  aa:\t5b                   \tpop    %rbx\n  ab:\t5d                   \tpop    %rbp\n  ac:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __uninitialized_copy<false>\n__uninit_copy<__gnu_cxx __normal_iterator<\n                  std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>> const *,\n                  std vector<std __cxx11 basic_string<\n                      char, std char_traits<char>, std allocator<char>>>>,\n              std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>> *>(__int64 a1,\n                                                               __int64 a2,\n                                                               __int64 a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v7</span>[Number] = a1;\n  <span class=\"supfact\">v6</span> = a2;\n  <span class=\"supfact\">v8</span> = a3;\n  while ((unsigned __int8)__gnu_cxx operator!=\n         <std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> const *,\n          std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>>>(\n             <span class=\"supfact\">v7</span>, &<span class=\"supfact\">v6</span>)) {\n    v3 = __gnu_cxx __normal_iterator<\n        std __cxx11 basic_string<char, std char_traits<char>,\n                                 std allocator<char>> const *,\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>>\n    operator*(<span class=\"supfact\">v7</span>);\n    v4 = std __addressof<std __cxx11 basic_string<char, std char_traits<char>,\n                                                  std allocator<char>>>(\n        <span class=\"supfact\">v8</span>);\n    std _Construct<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>,\n                   std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>(v4, v3);\n    __gnu_cxx __normal_iterator<\n        std __cxx11 basic_string<char, std char_traits<char>,\n                                 std allocator<char>> const *,\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>>\n    operator++(<span class=\"supfact\">v7</span>);\n    <span class=\"supfact\">v8</span> += Number L;\n  }\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    *__cdecl std __uninitialized_copy<false>\n    __uninit_copy<__gnu_cxx __normal_iterator<\n                      std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>> const *,\n                      std vector<std __cxx11 basic_string<\n                          char, std char_traits<char>, std allocator<char>>>>,\n                  std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>> *>(\n        __gnu_cxx __normal_iterator<\n            const std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>> *,\n            std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                                std allocator<char>>>>\n            __first,\n        __gnu_cxx __normal_iterator<\n            const std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>> *,\n            std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                                std allocator<char>>>>\n            __last,\n        std __cxx11 basic_string<char, std char_traits<char>,\n                                 std allocator<char>> *__result) {\n  const std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *v3;\n  std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *v4;\n  __gnu_cxx __normal_iterator<\n      const std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      <span class=\"supfact\">__lasta</span>;\n  __gnu_cxx __normal_iterator<\n      const std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      <span class=\"supfact\">__firsta</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      *<span class=\"supfact\">__cur</span>;\n  <span class=\"supfact\">__firsta</span>._M_current = __first._M_current;\n  <span class=\"supfact\">__lasta</span>._M_current = __last._M_current;\n  <span class=\"supfact\">__cur</span> = __result;\n  while (__gnu_cxx operator!=\n         <std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> const *,\n          std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>>>(\n             &<span class=\"supfact\">__firsta</span>, &<span class=\"supfact\">__lasta</span>)) {\n    v3 = __gnu_cxx __normal_iterator<\n        std __cxx11 basic_string<char, std char_traits<char>,\n                                 std allocator<char>> const *,\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>>\n    operator*(&<span class=\"supfact\">__firsta</span>);\n    v4 = std __addressof<std __cxx11 basic_string<char, std char_traits<char>,\n                                                  std allocator<char>>>(\n        <span class=\"supfact\">__cur</span>);\n    std _Construct<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>,\n                   std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>(v4, v3);\n    __gnu_cxx __normal_iterator<\n        std __cxx11 basic_string<char, std char_traits<char>,\n                                 std allocator<char>> const *,\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>>\n    operator++(&<span class=\"supfact\">__firsta</span>);\n    ++<span class=\"supfact\">__cur</span>;\n  }\n  return <span class=\"supfact\">__cur</span>;\n}", "var": [{"name": "v7", "type": "__int64[2]", "ref_name": "__firsta", "ref_type": "struct __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*,std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >> > { const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}, {"name": "v6", "type": "__int64", "ref_name": "__lasta", "ref_type": "struct __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*,std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >> > { const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}], "body_in_train": true}, {"repo_owner": "mrliemitvn", "repo_name": "PDFFramework", "path": "mrliemitvn/PDFFramework/cb061fb010443ff896723df32bc19bdb54661509cd6c8c620028632a45d3668e", "path_in_repo": "mrliemitvn/PDFFramework/mupdf/build/debug/pdf/pdf-run.o", "objdump": "0000000000000000 <pdf_run_annot_with_usage>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 60          \tsub    $0x60,%rsp\n   8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   c:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  10:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  14:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n  18:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n  1c:\t4c 89 4d a0          \tmov    %r9,-0x60(%rbp)\n  20:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  24:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  28:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  2c:\t48 89 ce             \tmov    %rcx,%rsi\n  2f:\t48 89 c7             \tmov    %rax,%rdi\n  32:\te8 00 00 00 00       \tcallq  37 <pdf_run_annot_with_usage+0x37>\n  37:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n  3b:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  3f:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n  43:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  47:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  4d:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  53:\t48 89 c7             \tmov    %rax,%rdi\n  56:\te8 00 00 00 00       \tcallq  5b <pdf_run_annot_with_usage+0x5b>\n  5b:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  5f:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  63:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n  67:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  6b:\t4c 8b 45 10          \tmov    0x10(%rbp),%r8\n  6f:\t48 89 c7             \tmov    %rax,%rdi\n  72:\te8 00 00 00 00       \tcallq  77 <pdf_run_annot_with_usage+0x77>\n  77:\t90                   \tnop\n  78:\tc9                   \tleaveq \n  79:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pdf_run_annot_with_usage(__int64 a1, __int64 a2, __int64 a3,\n                                            __int64 a4, __int64 a5, __int64 a6,\n                                            __int64 <span class=\"supfact\">a7</span>) {\n  char <span class=\"supfact\">v11</span>[Number];\n  char <span class=\"supfact\">v12</span>[Number];\n  fz_concat(<span class=\"supfact\">v12</span>, a2, a5);\n  pdf_process_run(<span class=\"supfact\">v11</span>, a4, <span class=\"supfact\">v12</span>, a6, Number L,\n                  Number L);\n  return pdf_process_annot(a1, a2, a3, <span class=\"supfact\">v11</span>, <span class=\"supfact\">a7</span>);\n}", "code_t": "void __cdecl pdf_run_annot_with_usage(pdf_document *doc, pdf_page *page,\n                                      pdf_annot *annot, fz_device *dev,\n                                      const fz_matrix *ctm, char *event,\n                                      fz_cookie *cookie) {\n  pdf_process <span class=\"supfact\">process</span>;\n  fz_matrix <span class=\"supfact\">local_ctm</span>;\n  fz_concat(&<span class=\"supfact\">local_ctm</span>, page, ctm);\n  pdf_process_run(&<span class=\"supfact\">process</span>, dev, &<span class=\"supfact\">local_ctm</span>,\n                  event, Number L, Number L);\n  pdf_process_annot(doc, page, annot, &<span class=\"supfact\">process</span>, cookie);\n}", "var": [{"name": "v12", "type": "struct fz_matrix { float a; float b; float c; float d; float e; float f; }", "ref_name": "local_ctm", "ref_type": "struct fz_matrix { float a; float b; float c; float d; float e; float f; }"}, {"name": "v11", "type": "struct pdf_process { const pdf_processor * processor; void * state; }", "ref_name": "process", "ref_type": "struct pdf_process { const pdf_processor * processor; void * state; }"}], "body_in_train": true}, {"repo_owner": "vganapathi", "repo_name": "librdkafka", "path": "vganapathi/librdkafka/ee28e7fb44801a7d8a8727131105a11d3c6570ec2e58de2d43f6a5a9ab44b4cd", "path_in_repo": "vganapathi/librdkafka/examples/rdkafka_performance", "objdump": "0000000000403865 <rd_clock>:\n  403865:\t55                   \tpush   %rbp\n  403866:\t48 89 e5             \tmov    %rsp,%rbp\n  403869:\t48 83 ec 10          \tsub    $0x10,%rsp\n  40386d:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  403871:\t48 89 c6             \tmov    %rax,%rsi\n  403874:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  403879:\te8 52 fc ff ff       \tcallq  4034d0 <clock_gettime@plt>\n  40387e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  403882:\t48 69 c8 40 42 0f 00 \timul   $0xf4240,%rax,%rcx\n  403889:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40388d:\t48 c1 e8 03          \tshr    $0x3,%rax\n  403891:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n  403898:\t9b c4 20 \n  40389b:\t48 f7 e2             \tmul    %rdx\n  40389e:\t48 89 d0             \tmov    %rdx,%rax\n  4038a1:\t48 c1 e8 04          \tshr    $0x4,%rax\n  4038a5:\t48 01 c8             \tadd    %rcx,%rax\n  4038a8:\tc9                   \tleaveq \n  4038a9:\tc3                   \tretq   ", "code_s": "unsigned __int64 rd_clock() {\n  struct timespec <span class=\"supfact\">tp</span>;\n  clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n  return Number * <span class=\"supfact\">tp</span>.tv_sec +\n         <span class=\"supfact\">tp</span>.tv_nsec / Number;\n}", "code_t": "rd_ts_t __cdecl rd_clock() {\n  timespec <span class=\"supfact\">ts</span>;\n  clock_gettime(Number, &<span class=\"supfact\">ts</span>);\n  return Number * <span class=\"supfact\">ts</span>.tv_sec +\n         <span class=\"supfact\">ts</span>.tv_nsec / Number;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "simonyang81", "repo_name": "CSipSimple-2470", "path": "simonyang81/CSipSimple-2470/5a175e95cb1e00737fc05208f3b125e846b4997b269ba2b00bf7b41ffa651a38", "path_in_repo": "simonyang81/CSipSimple-2470/CSipSimple/jni/pjsip/sources/pjsip/build/output/pjsua-lib-x86_64-unknown-linux-gnu/pjsua_acc.o", "objdump": "0000000000005426 <update_rfc5626_status>:\n    5426:\t55                   \tpush   %rbp\n    5427:\t48 89 e5             \tmov    %rsp,%rbp\n    542a:\t48 83 ec 30          \tsub    $0x30,%rsp\n    542e:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    5432:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    5436:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    543d:\t00 \n    543e:\t48 c7 45 e8 08 00 00 \tmovq   $0x8,-0x18(%rbp)\n    5445:\t00 \n    5446:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    544a:\t8b 80 c0 0a 00 00    \tmov    0xac0(%rax),%eax\n    5450:\t85 c0                \ttest   %eax,%eax\n    5452:\t0f 84 8b 00 00 00    \tje     54e3 <update_rfc5626_status+0xbd>\n    5458:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    545c:\t48 8b 80 b8 11 00 00 \tmov    0x11b8(%rax),%rax\n    5463:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    5467:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    546c:\t75 10                \tjne    547e <update_rfc5626_status+0x58>\n    546e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5472:\tc7 80 c0 0a 00 00 03 \tmovl   $0x3,0xac0(%rax)\n    5479:\t00 00 00 \n    547c:\teb 66                \tjmp    54e4 <update_rfc5626_status+0xbe>\n    547e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    5485:\teb 40                \tjmp    54c7 <update_rfc5626_status+0xa1>\n    5487:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    548a:\t48 83 c0 04          \tadd    $0x4,%rax\n    548e:\t48 c1 e0 04          \tshl    $0x4,%rax\n    5492:\t48 89 c2             \tmov    %rax,%rdx\n    5495:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    5499:\t48 01 d0             \tadd    %rdx,%rax\n    549c:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n    54a0:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    54a4:\t48 89 c6             \tmov    %rax,%rsi\n    54a7:\t48 89 d7             \tmov    %rdx,%rdi\n    54aa:\te8 00 00 00 00       \tcallq  54af <update_rfc5626_status+0x89>\n    54af:\t85 c0                \ttest   %eax,%eax\n    54b1:\t75 10                \tjne    54c3 <update_rfc5626_status+0x9d>\n    54b3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    54b7:\tc7 80 c0 0a 00 00 02 \tmovl   $0x2,0xac0(%rax)\n    54be:\t00 00 00 \n    54c1:\teb 21                \tjmp    54e4 <update_rfc5626_status+0xbe>\n    54c3:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    54c7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    54cb:\t8b 40 40             \tmov    0x40(%rax),%eax\n    54ce:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    54d1:\t72 b4                \tjb     5487 <update_rfc5626_status+0x61>\n    54d3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    54d7:\tc7 80 c0 0a 00 00 03 \tmovl   $0x3,0xac0(%rax)\n    54de:\t00 00 00 \n    54e1:\teb 01                \tjmp    54e4 <update_rfc5626_status+0xbe>\n    54e3:\t90                   \tnop\n    54e4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    54e8:\t8b 80 c0 0a 00 00    \tmov    0xac0(%rax),%eax\n    54ee:\t83 f8 02             \tcmp    $0x2,%eax\n    54f1:\t74 24                \tje     5517 <update_rfc5626_status+0xf1>\n    54f3:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n    54f7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    54fb:\t48 8b 90 00 09 00 00 \tmov    0x900(%rax),%rdx\n    5502:\t48 8b 80 f8 08 00 00 \tmov    0x8f8(%rax),%rax\n    5509:\t48 89 81 08 09 00 00 \tmov    %rax,0x908(%rcx)\n    5510:\t48 89 91 10 09 00 00 \tmov    %rdx,0x910(%rcx)\n    5517:\te8 00 00 00 00       \tcallq  551c <update_rfc5626_status+0xf6>\n    551c:\t83 f8 03             \tcmp    $0x3,%eax\n    551f:\t7e 3e                \tjle    555f <update_rfc5626_status+0x139>\n    5521:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5525:\t8b 80 c0 0a 00 00    \tmov    0xac0(%rax),%eax\n    552b:\t83 f8 02             \tcmp    $0x2,%eax\n    552e:\t75 07                \tjne    5537 <update_rfc5626_status+0x111>\n    5530:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5535:\teb 05                \tjmp    553c <update_rfc5626_status+0x116>\n    5537:\tba 00 00 00 00       \tmov    $0x0,%edx\n    553c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5540:\t8b 80 cc 08 00 00    \tmov    0x8cc(%rax),%eax\n    5546:\t48 89 d1             \tmov    %rdx,%rcx\n    5549:\t89 c2                \tmov    %eax,%edx\n    554b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5550:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5555:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    555a:\te8 00 00 00 00       \tcallq  555f <update_rfc5626_status+0x139>\n    555f:\t90                   \tnop\n    5560:\tc9                   \tleaveq \n    5561:\tc3                   \tretq   ", "code_s": "__int64 __fastcall update_rfc5626_status(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 result;\n  const char *v4;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v5</span>[Number] = (__int64)String;\n  <span class=\"supfact\">v5</span>[Number] = Number L;\n  if (*(_DWORD *)(a1 + Number)) {\n    <span class=\"supfact\">v6</span> = *(_QWORD *)(a2 + Number);\n    if (<span class=\"supfact\">v6</span>) {\n      for (<span class=\"supfact\">i</span> = Number;\n           <span class=\"supfact\">i</span> < *(_DWORD *)(<span class=\"supfact\">v6</span> + Number);\n           ++<span class=\"supfact\">i</span>) {\n        if (!(unsigned int)pj_stricmp(Number * (<span class=\"supfact\">i</span> + Number L) +\n                                          <span class=\"supfact\">v6</span> + Number,\n                                      <span class=\"supfact\">v5</span>)) {\n          *(_DWORD *)(a1 + Number) = Number;\n          goto LABEL_10;\n        }\n      }\n      *(_DWORD *)(a1 + Number) = Number;\n    } else {\n      *(_DWORD *)(a1 + Number) = Number;\n    }\n  }\nLABEL_10:\n  if (*(_DWORD *)(a1 + Number) != Number) {\n    v2 = *(_QWORD *)(a1 + Number);\n    *(_QWORD *)(a1 + Number) = *(_QWORD *)(a1 + Number);\n    *(_QWORD *)(a1 + Number) = v2;\n  }\n  result = pj_log_get_level();\n  if ((int)result > Number) {\n    if (*(_DWORD *)(a1 + Number) == Number)\n      v4 = String;\n    else\n      v4 = String;\n    result = pj_log_4(String, String, *(unsigned int *)(a1 + Number), v4);\n  }\n  return result;\n}", "code_t": "void __cdecl update_rfc5626_status(pjsua_acc_0 *acc, pjsip_rx_data_0 *rdata) {\n  pj_ssize_t v2;\n  const char *v3;\n  pj_str_t_0 <span class=\"supfact\">STR_OUTBOUND</span>;\n  pjsip_require_hdr *<span class=\"supfact\">hreq</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">STR_OUTBOUND</span>.ptr = String;\n  <span class=\"supfact\">STR_OUTBOUND</span>.slen = Number L;\n  if (acc->rfc5626_status) {\n    <span class=\"supfact\">hreq</span> = rdata->msg_info.require;\n    if (<span class=\"supfact\">hreq</span>) {\n      for (<span class=\"supfact\">i</span> = Number;\n           <span class=\"supfact\">i</span> < <span class=\"supfact\">hreq</span>->count;\n           ++<span class=\"supfact\">i</span>) {\n        if (!(unsigned int)pj_stricmp(\n                &<span class=\"supfact\">hreq</span>->values[<span class=\"supfact\">i</span>],\n                &<span class=\"supfact\">STR_OUTBOUND</span>)) {\n          acc->rfc5626_status = Number;\n          goto on_return;\n        }\n      }\n      acc->rfc5626_status = Number;\n    } else {\n      acc->rfc5626_status = Number;\n    }\n  }\non_return:\n  if (acc->rfc5626_status != Number) {\n    v2 = acc->contact.slen;\n    acc->reg_contact.ptr = acc->contact.ptr;\n    acc->reg_contact.slen = v2;\n  }\n  if ((int)pj_log_get_level() > Number) {\n    if (acc->rfc5626_status == Number)\n      v3 = String;\n    else\n      v3 = String;\n    pj_log_4(String, String, (unsigned int)acc->index, v3);\n  }\n}", "var": [{"name": "v5", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "STR_OUTBOUND", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "msloth", "repo_name": "contiki-launchpad", "path": "msloth/contiki-launchpad/791564a68988f889b7fce1f02cd4eed9594d0a68bc798e5bc478602cf106a5dd", "path_in_repo": "msloth/contiki-launchpad/examples/mb851/coffee-test/obj_native/neighbor-discovery.o", "objdump": "0000000000000073 <adv_packet_received>:\n  73:\t55                   \tpush   %rbp\n  74:\t48 89 e5             \tmov    %rsp,%rbp\n  77:\t48 83 ec 20          \tsub    $0x20,%rsp\n  7b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  7f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  83:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  87:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  8b:\te8 00 00 00 00       \tcallq  90 <adv_packet_received+0x1d>\n  90:\t0f b7 00             \tmovzwl (%rax),%eax\n  93:\t66 89 45 f6          \tmov    %ax,-0xa(%rbp)\n  97:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  9b:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  9f:\t48 8b 00             \tmov    (%rax),%rax\n  a2:\t48 85 c0             \ttest   %rax,%rax\n  a5:\t74 23                \tje     ca <adv_packet_received+0x57>\n  a7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  ab:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  af:\t4c 8b 00             \tmov    (%rax),%r8\n  b2:\t0f b7 45 f6          \tmovzwl -0xa(%rbp),%eax\n  b6:\t0f b7 d0             \tmovzwl %ax,%edx\n  b9:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  bd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  c1:\t48 89 ce             \tmov    %rcx,%rsi\n  c4:\t48 89 c7             \tmov    %rax,%rdi\n  c7:\t41 ff d0             \tcallq  *%r8\n  ca:\t90                   \tnop\n  cb:\tc9                   \tleaveq \n  cc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall adv_packet_received(__int64 a1, __int64 a2) {\n  __int64 result;\n  unsigned __int16 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_WORD *)packetbuf_dataptr();\n  result = **(_QWORD **)(a1 + Number);\n  if (result)\n    result = (**(__int64(__fastcall ***)(__int64, __int64, _QWORD))(\n        a1 + Number))(a1, a2, <span class=\"supfact\">v3</span>);\n  return result;\n}", "code_t": "void __cdecl adv_packet_received(broadcast_conn *ibc, const rimeaddr_t *from) {\n  adv_msg <span class=\"supfact\">msg</span>;\n  <span class=\"supfact\">msg</span>.val = *(_WORD *)packetbuf_dataptr();\n  if (ibc[Number].c.channel.next->next)\n    ((void(__fastcall *)(broadcast_conn *, const rimeaddr_t *,\n                         _QWORD))ibc[Number]\n         .c.channel.next->next)(ibc, from, <span class=\"supfact\">msg</span>.val);\n}", "var": [{"name": "v3", "type": "struct adv_msg { uint16_t val; }", "ref_name": "msg", "ref_type": "struct adv_msg { uint16_t val; }"}], "body_in_train": true}, {"repo_owner": "tmshlvck", "repo_name": "linux", "path": "tmshlvck/linux/35911d7a293fdc320e949b26d7e90662d6f9995727e04d75c0dc19f26130612d", "path_in_repo": "tmshlvck/linux/tools/testing/selftests/bpf/get_cgroup_id_user", "objdump": "0000000000404705 <section_have_execinstr>:\n  404705:\t55                   \tpush   %rbp\n  404706:\t48 89 e5             \tmov    %rsp,%rbp\n  404709:\t48 83 ec 60          \tsub    $0x60,%rsp\n  40470d:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  404711:\t89 75 a4             \tmov    %esi,-0x5c(%rbp)\n  404714:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  404717:\t48 63 d0             \tmovslq %eax,%rdx\n  40471a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40471e:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n  404725:\t48 89 d6             \tmov    %rdx,%rsi\n  404728:\t48 89 c7             \tmov    %rax,%rdi\n  40472b:\te8 80 dc ff ff       \tcallq  4023b0 <elf_getscn@plt>\n  404730:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  404734:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  404739:\t75 07                \tjne    404742 <section_have_execinstr+0x3d>\n  40473b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404740:\teb 3b                \tjmp    40477d <section_have_execinstr+0x78>\n  404742:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  404746:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40474a:\t48 89 d6             \tmov    %rdx,%rsi\n  40474d:\t48 89 c7             \tmov    %rax,%rdi\n  404750:\te8 2b d9 ff ff       \tcallq  402080 <gelf_getshdr@plt>\n  404755:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  404759:\t48 39 d0             \tcmp    %rdx,%rax\n  40475c:\t74 07                \tje     404765 <section_have_execinstr+0x60>\n  40475e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404763:\teb 18                \tjmp    40477d <section_have_execinstr+0x78>\n  404765:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  404769:\t83 e0 04             \tand    $0x4,%eax\n  40476c:\t48 85 c0             \ttest   %rax,%rax\n  40476f:\t74 07                \tje     404778 <section_have_execinstr+0x73>\n  404771:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  404776:\teb 05                \tjmp    40477d <section_have_execinstr+0x78>\n  404778:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40477d:\tc9                   \tleaveq \n  40477e:\tc3                   \tretq   ", "code_s": "_BOOL8 section_have_execinstr() {\n  char <span class=\"supfact\">v1</span>[Number];\n  if (!elf_getscn())\n    return Number L;\n  if ((char *)gelf_getshdr() == <span class=\"supfact\">v1</span>)\n    return (<span class=\"supfact\">v1</span>[Number] & Number) != Number;\n  return Number L;\n}", "code_t": "bool __cdecl section_have_execinstr(bpf_object *obj, int idx) {\n  GElf_Shdr <span class=\"supfact\">sh</span>;\n  if (!elf_getscn())\n    return Number;\n  if ((GElf_Shdr *)gelf_getshdr() == &<span class=\"supfact\">sh</span>)\n    return (<span class=\"supfact\">sh</span>.sh_flags & Number) != Number;\n  return Number;\n}", "var": [{"name": "v1", "type": "struct GElf_Shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; }", "ref_name": "sh", "ref_type": "struct GElf_Shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; }"}], "body_in_train": true}, {"repo_owner": "wjfsanhe", "repo_name": "newPlayer", "path": "wjfsanhe/newPlayer/da9e0c2c412c0d218364b92d4b4fd19f4046fc0e4f256e33e36cde421267137e", "path_in_repo": "wjfsanhe/newPlayer/amffmpeg/src/libavcodec/faxcompr.o", "objdump": "0000000000001491 <ff_ccitt_unpack>:\n    1491:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    1498:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n    149d:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n    14a2:\t89 54 24 1c          \tmov    %edx,0x1c(%rsp)\n    14a6:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n    14ab:\t44 89 44 24 18       \tmov    %r8d,0x18(%rsp)\n    14b0:\t44 89 4c 24 0c       \tmov    %r9d,0xc(%rsp)\n    14b5:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    14ba:\t8b 40 34             \tmov    0x34(%rax),%eax\n    14bd:\t83 c0 02             \tadd    $0x2,%eax\n    14c0:\t89 44 24 60          \tmov    %eax,0x60(%rsp)\n    14c4:\t8b 44 24 60          \tmov    0x60(%rsp),%eax\n    14c8:\t48 98                \tcltq   \n    14ca:\tc1 e0 02             \tshl    $0x2,%eax\n    14cd:\t89 c7                \tmov    %eax,%edi\n    14cf:\te8 00 00 00 00       \tcallq  14d4 <ff_ccitt_unpack+0x43>\n    14d4:\t48 89 44 24 70       \tmov    %rax,0x70(%rsp)\n    14d9:\t8b 44 24 60          \tmov    0x60(%rsp),%eax\n    14dd:\t48 98                \tcltq   \n    14df:\tc1 e0 02             \tshl    $0x2,%eax\n    14e2:\t89 c7                \tmov    %eax,%edi\n    14e4:\te8 00 00 00 00       \tcallq  14e9 <ff_ccitt_unpack+0x58>\n    14e9:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n    14ee:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    14f3:\t8b 50 34             \tmov    0x34(%rax),%edx\n    14f6:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    14fb:\t89 10                \tmov    %edx,(%rax)\n    14fd:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1502:\t48 83 c0 04          \tadd    $0x4,%rax\n    1506:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    150c:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1511:\t48 83 c0 08          \tadd    $0x8,%rax\n    1515:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    151b:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    151f:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n    1526:\t48 8b 4c 24 20       \tmov    0x20(%rsp),%rcx\n    152b:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    1530:\t48 89 ce             \tmov    %rcx,%rsi\n    1533:\t48 89 c7             \tmov    %rax,%rdi\n    1536:\te8 c1 eb ff ff       \tcallq  fc <init_get_bits>\n    153b:\tc7 44 24 7c 00 00 00 \tmovl   $0x0,0x7c(%rsp)\n    1542:\t00 \n    1543:\te9 00 02 00 00       \tjmpq   1748 <ff_ccitt_unpack+0x2b7>\n    1548:\t8b 44 24 60          \tmov    0x60(%rsp),%eax\n    154c:\t48 98                \tcltq   \n    154e:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1555:\t00 \n    1556:\t48 8b 44 24 70       \tmov    0x70(%rsp),%rax\n    155b:\t48 01 d0             \tadd    %rdx,%rax\n    155e:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n    1563:\t83 bc 24 90 00 00 00 \tcmpl   $0x4,0x90(%rsp)\n    156a:\t04 \n    156b:\t75 6b                \tjne    15d8 <ff_ccitt_unpack+0x147>\n    156d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1572:\t8b 40 34             \tmov    0x34(%rax),%eax\n    1575:\t41 89 c2             \tmov    %eax,%r10d\n    1578:\t48 8b 7c 24 68       \tmov    0x68(%rsp),%rdi\n    157d:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1582:\t48 8b 54 24 70       \tmov    0x70(%rsp),%rdx\n    1587:\t48 8d 74 24 30       \tlea    0x30(%rsp),%rsi\n    158c:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1591:\t49 89 f9             \tmov    %rdi,%r9\n    1594:\t49 89 c8             \tmov    %rcx,%r8\n    1597:\t48 89 d1             \tmov    %rdx,%rcx\n    159a:\t44 89 d2             \tmov    %r10d,%edx\n    159d:\t48 89 c7             \tmov    %rax,%rdi\n    15a0:\te8 a0 f3 ff ff       \tcallq  945 <decode_group3_2d_line>\n    15a5:\t89 44 24 64          \tmov    %eax,0x64(%rsp)\n    15a9:\t83 7c 24 64 00       \tcmpl   $0x0,0x64(%rsp)\n    15ae:\t0f 89 21 01 00 00    \tjns    16d5 <ff_ccitt_unpack+0x244>\n    15b4:\t48 8b 44 24 70       \tmov    0x70(%rsp),%rax\n    15b9:\t48 89 c7             \tmov    %rax,%rdi\n    15bc:\te8 00 00 00 00       \tcallq  15c1 <ff_ccitt_unpack+0x130>\n    15c1:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    15c6:\t48 89 c7             \tmov    %rax,%rdi\n    15c9:\te8 00 00 00 00       \tcallq  15ce <ff_ccitt_unpack+0x13d>\n    15ce:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    15d3:\te9 a0 01 00 00       \tjmpq   1778 <ff_ccitt_unpack+0x2e7>\n    15d8:\t83 bc 24 90 00 00 00 \tcmpl   $0x3,0x90(%rsp)\n    15df:\t03 \n    15e0:\t75 15                \tjne    15f7 <ff_ccitt_unpack+0x166>\n    15e2:\t8b 84 24 98 00 00 00 \tmov    0x98(%rsp),%eax\n    15e9:\t83 e0 01             \tand    $0x1,%eax\n    15ec:\t85 c0                \ttest   %eax,%eax\n    15ee:\t75 07                \tjne    15f7 <ff_ccitt_unpack+0x166>\n    15f0:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    15f5:\teb 05                \tjmp    15fc <ff_ccitt_unpack+0x16b>\n    15f7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    15fc:\t89 44 24 54          \tmov    %eax,0x54(%rsp)\n    1600:\t83 bc 24 90 00 00 00 \tcmpl   $0x2,0x90(%rsp)\n    1607:\t02 \n    1608:\t74 22                \tje     162c <ff_ccitt_unpack+0x19b>\n    160a:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    160e:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n    1615:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    161a:\t89 d6                \tmov    %edx,%esi\n    161c:\t48 89 c7             \tmov    %rax,%rdi\n    161f:\te8 00 fe ff ff       \tcallq  1424 <find_group3_syncmarker>\n    1624:\t85 c0                \ttest   %eax,%eax\n    1626:\t0f 88 2c 01 00 00    \tjs     1758 <ff_ccitt_unpack+0x2c7>\n    162c:\t83 bc 24 90 00 00 00 \tcmpl   $0x2,0x90(%rsp)\n    1633:\t02 \n    1634:\t74 18                \tje     164e <ff_ccitt_unpack+0x1bd>\n    1636:\t83 7c 24 54 00       \tcmpl   $0x0,0x54(%rsp)\n    163b:\t75 11                \tjne    164e <ff_ccitt_unpack+0x1bd>\n    163d:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    1642:\t48 89 c7             \tmov    %rax,%rdi\n    1645:\te8 54 ea ff ff       \tcallq  9e <get_bits1>\n    164a:\t85 c0                \ttest   %eax,%eax\n    164c:\t74 34                \tje     1682 <ff_ccitt_unpack+0x1f1>\n    164e:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1653:\t8b 40 34             \tmov    0x34(%rax),%eax\n    1656:\t89 c7                \tmov    %eax,%edi\n    1658:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    165d:\t48 8b 54 24 70       \tmov    0x70(%rsp),%rdx\n    1662:\t48 8d 74 24 30       \tlea    0x30(%rsp),%rsi\n    1667:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    166c:\t49 89 c8             \tmov    %rcx,%r8\n    166f:\t48 89 d1             \tmov    %rdx,%rcx\n    1672:\t89 fa                \tmov    %edi,%edx\n    1674:\t48 89 c7             \tmov    %rax,%rdi\n    1677:\te8 1a ef ff ff       \tcallq  596 <decode_group3_1d_line>\n    167c:\t89 44 24 64          \tmov    %eax,0x64(%rsp)\n    1680:\teb 3c                \tjmp    16be <ff_ccitt_unpack+0x22d>\n    1682:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1687:\t8b 40 34             \tmov    0x34(%rax),%eax\n    168a:\t41 89 c2             \tmov    %eax,%r10d\n    168d:\t48 8b 7c 24 68       \tmov    0x68(%rsp),%rdi\n    1692:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n    1697:\t48 8b 54 24 70       \tmov    0x70(%rsp),%rdx\n    169c:\t48 8d 74 24 30       \tlea    0x30(%rsp),%rsi\n    16a1:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    16a6:\t49 89 f9             \tmov    %rdi,%r9\n    16a9:\t49 89 c8             \tmov    %rcx,%r8\n    16ac:\t48 89 d1             \tmov    %rdx,%rcx\n    16af:\t44 89 d2             \tmov    %r10d,%edx\n    16b2:\t48 89 c7             \tmov    %rax,%rdi\n    16b5:\te8 8b f2 ff ff       \tcallq  945 <decode_group3_2d_line>\n    16ba:\t89 44 24 64          \tmov    %eax,0x64(%rsp)\n    16be:\t83 bc 24 90 00 00 00 \tcmpl   $0x2,0x90(%rsp)\n    16c5:\t02 \n    16c6:\t75 0d                \tjne    16d5 <ff_ccitt_unpack+0x244>\n    16c8:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    16cd:\t48 89 c7             \tmov    %rax,%rdi\n    16d0:\te8 a9 ea ff ff       \tcallq  17e <align_get_bits>\n    16d5:\t83 7c 24 64 00       \tcmpl   $0x0,0x64(%rsp)\n    16da:\t79 20                \tjns    16fc <ff_ccitt_unpack+0x26b>\n    16dc:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    16e1:\t8b 50 34             \tmov    0x34(%rax),%edx\n    16e4:\t48 8b 4c 24 68       \tmov    0x68(%rsp),%rcx\n    16e9:\t8b 74 24 0c          \tmov    0xc(%rsp),%esi\n    16ed:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    16f2:\t48 89 c7             \tmov    %rax,%rdi\n    16f5:\te8 51 fc ff ff       \tcallq  134b <put_line>\n    16fa:\teb 3c                \tjmp    1738 <ff_ccitt_unpack+0x2a7>\n    16fc:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1701:\t8b 50 34             \tmov    0x34(%rax),%edx\n    1704:\t48 8b 4c 24 70       \tmov    0x70(%rsp),%rcx\n    1709:\t8b 74 24 0c          \tmov    0xc(%rsp),%esi\n    170d:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1712:\t48 89 c7             \tmov    %rax,%rdi\n    1715:\te8 31 fc ff ff       \tcallq  134b <put_line>\n    171a:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    171f:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n    1724:\t48 8b 44 24 70       \tmov    0x70(%rsp),%rax\n    1729:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n    172e:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n    1733:\t48 89 44 24 70       \tmov    %rax,0x70(%rsp)\n    1738:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    173c:\t48 98                \tcltq   \n    173e:\t48 01 44 24 10       \tadd    %rax,0x10(%rsp)\n    1743:\t83 44 24 7c 01       \taddl   $0x1,0x7c(%rsp)\n    1748:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    174c:\t3b 44 24 18          \tcmp    0x18(%rsp),%eax\n    1750:\t0f 8c f2 fd ff ff    \tjl     1548 <ff_ccitt_unpack+0xb7>\n    1756:\teb 01                \tjmp    1759 <ff_ccitt_unpack+0x2c8>\n    1758:\t90                   \tnop\n    1759:\t48 8b 44 24 70       \tmov    0x70(%rsp),%rax\n    175e:\t48 89 c7             \tmov    %rax,%rdi\n    1761:\te8 00 00 00 00       \tcallq  1766 <ff_ccitt_unpack+0x2d5>\n    1766:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    176b:\t48 89 c7             \tmov    %rax,%rdi\n    176e:\te8 00 00 00 00       \tcallq  1773 <ff_ccitt_unpack+0x2e2>\n    1773:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1778:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    177f:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall ff_ccitt_unpack(__int64 a1, __int64 a2, int a3, __int64 a4,\n                                   int a5, int a6, int <span class=\"supfact\">a7</span>,\n                                   char <span class=\"supfact\">a8</span>) {\n  _BOOL4 v9;\n  char <span class=\"supfact\">v14</span>[Number];\n  unsigned int *<span class=\"supfact\">v15</span>;\n  _BOOL4 <span class=\"supfact\">v16</span>;\n  unsigned int *<span class=\"supfact\">v17</span>;\n  int <span class=\"supfact\">v18</span>;\n  int <span class=\"supfact\">v19</span>;\n  unsigned int *<span class=\"supfact\">v20</span>;\n  unsigned int *<span class=\"supfact\">v21</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v18</span> = *(_DWORD *)(a1 + Number) + Number;\n  <span class=\"supfact\">v21</span> =\n      (unsigned int *)av_malloc((unsigned int)(Number * <span class=\"supfact\">v18</span>));\n  <span class=\"supfact\">v20</span> =\n      (unsigned int *)av_malloc((unsigned int)(Number * <span class=\"supfact\">v18</span>));\n  *<span class=\"supfact\">v20</span> = *(_DWORD *)(a1 + Number);\n  <span class=\"supfact\">v20</span>[Number] = Number;\n  <span class=\"supfact\">v20</span>[Number] = Number;\n  init_get_bits((__int64)<span class=\"supfact\">v14</span>, a2, Number * a3);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < a5;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v17</span> = &<span class=\"supfact\">v21</span>[<span class=\"supfact\">v18</span>];\n    if (<span class=\"supfact\">a7</span> == Number) {\n      <span class=\"supfact\">v19</span> = decode_group3_2d_line(\n          a1, (__int64)<span class=\"supfact\">v14</span>, *(_DWORD *)(a1 + Number),\n          <span class=\"supfact\">v21</span>, (__int64)<span class=\"supfact\">v17</span>,\n          <span class=\"supfact\">v20</span>);\n      if (<span class=\"supfact\">v19</span> < Number) {\n        av_free(<span class=\"supfact\">v21</span>);\n        av_free(<span class=\"supfact\">v20</span>);\n        return Number;\n      }\n    } else {\n      v9 = <span class=\"supfact\">a7</span> == Number &&\n           (<span class=\"supfact\">a8</span> & Number) == Number;\n      <span class=\"supfact\">v16</span> = v9;\n      if (<span class=\"supfact\">a7</span> != Number &&\n          (int)find_group3_syncmarker((__int64)<span class=\"supfact\">v14</span>,\n                                      Number * a3) < Number)\n        break;\n      if (<span class=\"supfact\">a7</span> == Number || <span class=\"supfact\">v16</span> ||\n          (unsigned int)get_bits1((__int64)<span class=\"supfact\">v14</span>))\n        <span class=\"supfact\">v19</span> = decode_group3_1d_line(\n            a1, (__int64)<span class=\"supfact\">v14</span>, *(_DWORD *)(a1 + Number),\n            <span class=\"supfact\">v21</span>, (unsigned __int64)<span class=\"supfact\">v17</span>);\n      else\n        <span class=\"supfact\">v19</span> = decode_group3_2d_line(\n            a1, (__int64)<span class=\"supfact\">v14</span>, *(_DWORD *)(a1 + Number),\n            <span class=\"supfact\">v21</span>, (__int64)<span class=\"supfact\">v17</span>,\n            <span class=\"supfact\">v20</span>);\n      if (<span class=\"supfact\">a7</span> == Number)\n        align_get_bits((__int64)<span class=\"supfact\">v14</span>);\n    }\n    if (<span class=\"supfact\">v19</span> >= Number) {\n      put_line(a4, a6, *(_DWORD *)(a1 + Number), (__int64)<span class=\"supfact\">v21</span>);\n      <span class=\"supfact\">v15</span> = <span class=\"supfact\">v20</span>;\n      <span class=\"supfact\">v20</span> = <span class=\"supfact\">v21</span>;\n      <span class=\"supfact\">v21</span> = <span class=\"supfact\">v15</span>;\n    } else {\n      put_line(a4, a6, *(_DWORD *)(a1 + Number), (__int64)<span class=\"supfact\">v20</span>);\n    }\n    a4 += a6;\n  }\n  av_free(<span class=\"supfact\">v21</span>);\n  av_free(<span class=\"supfact\">v20</span>);\n  return Number L;\n}", "code_t": "int __cdecl ff_ccitt_unpack(AVCodecContext_0 *avctx, const uint8_t *src,\n                            int srcsize, uint8_t *dst, int height, int stride,\n                            TiffCompr compr, int opts) {\n  int v9;\n  GetBitContext_0 <span class=\"supfact\">gb</span>;\n  int *<span class=\"supfact\">SWAP_tmp</span>;\n  int <span class=\"supfact\">g3d1</span>;\n  int *<span class=\"supfact\">runend</span>;\n  int <span class=\"supfact\">runsize</span>;\n  int <span class=\"supfact\">ret</span>;\n  int *<span class=\"supfact\">ref</span>;\n  int *<span class=\"supfact\">runs</span>;\n  int <span class=\"supfact\">j</span>;\n  <span class=\"supfact\">runsize</span> = avctx->width + Number;\n  <span class=\"supfact\">runs</span> =\n      (int *)av_malloc((unsigned int)(Number * <span class=\"supfact\">runsize</span>));\n  <span class=\"supfact\">ref</span> =\n      (int *)av_malloc((unsigned int)(Number * <span class=\"supfact\">runsize</span>));\n  *<span class=\"supfact\">ref</span> = avctx->width;\n  <span class=\"supfact\">ref</span>[Number] = Number;\n  <span class=\"supfact\">ref</span>[Number] = Number;\n  init_get_bits(&<span class=\"supfact\">gb</span>, src, Number * srcsize);\n  for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < height;\n       ++<span class=\"supfact\">j</span>) {\n    <span class=\"supfact\">runend</span> = &<span class=\"supfact\">runs</span>[<span class=\"supfact\">runsize</span>];\n    if (compr == TIFF_G4) {\n      <span class=\"supfact\">ret</span> = decode_group3_2d_line(\n          avctx, &<span class=\"supfact\">gb</span>, avctx->width, <span class=\"supfact\">runs</span>,\n          <span class=\"supfact\">runend</span>, <span class=\"supfact\">ref</span>);\n      if (<span class=\"supfact\">ret</span> < Number) {\n        av_free(<span class=\"supfact\">runs</span>);\n        av_free(<span class=\"supfact\">ref</span>);\n        return Number;\n      }\n    } else {\n      v9 = compr == TIFF_G3 && (opts & Number) == Number;\n      <span class=\"supfact\">g3d1</span> = v9;\n      if (compr != TIFF_CCITT_RLE &&\n          find_group3_syncmarker(&<span class=\"supfact\">gb</span>, Number * srcsize) <\n              Number)\n        break;\n      if (compr == TIFF_CCITT_RLE || <span class=\"supfact\">g3d1</span> ||\n          get_bits1(&<span class=\"supfact\">gb</span>))\n        <span class=\"supfact\">ret</span> =\n            decode_group3_1d_line(avctx, &<span class=\"supfact\">gb</span>, avctx->width,\n                                  <span class=\"supfact\">runs</span>, <span class=\"supfact\">runend</span>);\n      else\n        <span class=\"supfact\">ret</span> = decode_group3_2d_line(\n            avctx, &<span class=\"supfact\">gb</span>, avctx->width, <span class=\"supfact\">runs</span>,\n            <span class=\"supfact\">runend</span>, <span class=\"supfact\">ref</span>);\n      if (compr == TIFF_CCITT_RLE)\n        align_get_bits(&<span class=\"supfact\">gb</span>);\n    }\n    if (<span class=\"supfact\">ret</span> >= Number) {\n      put_line(dst, stride, avctx->width, <span class=\"supfact\">runs</span>);\n      <span class=\"supfact\">SWAP_tmp</span> = <span class=\"supfact\">ref</span>;\n      <span class=\"supfact\">ref</span> = <span class=\"supfact\">runs</span>;\n      <span class=\"supfact\">runs</span> = <span class=\"supfact\">SWAP_tmp</span>;\n    } else {\n      put_line(dst, stride, avctx->width, <span class=\"supfact\">ref</span>);\n    }\n    dst += stride;\n  }\n  av_free(<span class=\"supfact\">runs</span>);\n  av_free(<span class=\"supfact\">ref</span>);\n  return Number;\n}", "var": [{"name": "v14", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; }", "ref_name": "gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; }"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/7844ca6eeae2559ea06735c2fd2821beca5cc9c22c5157a5fbcdc5419f11e539", "path_in_repo": "AlexanderVangelov/pjsip//pjlib/build/output/pjlib-x86_64-unknown-linux-gnu/os_timestamp_posix.o", "objdump": "0000000000000000 <pj_get_timestamp>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  10:\t48 89 c6             \tmov    %rax,%rsi\n  13:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  18:\te8 00 00 00 00       \tcallq  1d <pj_get_timestamp+0x1d>\n  1d:\t85 c0                \ttest   %eax,%eax\n  1f:\t74 20                \tje     41 <pj_get_timestamp+0x41>\n  21:\te8 00 00 00 00       \tcallq  26 <pj_get_timestamp+0x26>\n  26:\t8b 00                \tmov    (%rax),%eax\n  28:\t85 c0                \ttest   %eax,%eax\n  2a:\t74 0e                \tje     3a <pj_get_timestamp+0x3a>\n  2c:\te8 00 00 00 00       \tcallq  31 <pj_get_timestamp+0x31>\n  31:\t8b 00                \tmov    (%rax),%eax\n  33:\t05 c0 d4 01 00       \tadd    $0x1d4c0,%eax\n  38:\teb 44                \tjmp    7e <pj_get_timestamp+0x7e>\n  3a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  3f:\teb 3d                \tjmp    7e <pj_get_timestamp+0x7e>\n  41:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  45:\t48 89 c2             \tmov    %rax,%rdx\n  48:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4c:\t48 89 10             \tmov    %rdx,(%rax)\n  4f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  53:\t48 8b 00             \tmov    (%rax),%rax\n  56:\t48 69 d0 00 ca 9a 3b \timul   $0x3b9aca00,%rax,%rdx\n  5d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  61:\t48 89 10             \tmov    %rdx,(%rax)\n  64:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  68:\t48 8b 00             \tmov    (%rax),%rax\n  6b:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  6f:\t48 01 c2             \tadd    %rax,%rdx\n  72:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  76:\t48 89 10             \tmov    %rdx,(%rax)\n  79:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  7e:\tc9                   \tleaveq \n  7f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_get_timestamp(__time_t *a1) {\n  __int64 result;\n  struct timespec <span class=\"supfact\">tp</span>;\n  if (clock_gettime(Number, &<span class=\"supfact\">tp</span>)) {\n    if (*_errno_location())\n      result = (unsigned int)(*_errno_location() + Number);\n    else\n      result = Number;\n  } else {\n    *a1 = <span class=\"supfact\">tp</span>.tv_sec;\n    *a1 *= Number L;\n    *a1 += <span class=\"supfact\">tp</span>.tv_nsec;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl pj_get_timestamp(pj_timestamp_0 *ts) {\n  pj_status_t result;\n  timespec <span class=\"supfact\">tp</span>;\n  if (clock_gettime(Number, &<span class=\"supfact\">tp</span>)) {\n    if (*_errno_location())\n      result = *_errno_location() + Number;\n    else\n      result = Number;\n  } else {\n    *ts = (pj_timestamp_0)<span class=\"supfact\">tp</span>.tv_sec;\n    ts->u64 *= Number L;\n    ts->u64 += <span class=\"supfact\">tp</span>.tv_nsec;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "tp", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "pakohan", "repo_name": "syso-kernel", "path": "pakohan/syso-kernel/81d3739e2bbd78650240ef12938d5a93e7fcf0aa98e88360e5febb29ac194e26", "path_in_repo": "pakohan/syso-kernel/linux-3.4.68/tools/perf/util/symbol.o", "objdump": "0000000000001d34 <dso__load_all_kallsyms>:\n    1d34:\t55                   \tpush   %rbp\n    1d35:\t48 89 e5             \tmov    %rsp,%rbp\n    1d38:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1d3c:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1d40:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    1d44:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    1d48:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1d4f:\t00 00 \n    1d51:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1d55:\t31 c0                \txor    %eax,%eax\n    1d57:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1d5b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1d5f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1d63:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1d67:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n    1d6b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1d6f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1d74:\t48 89 ce             \tmov    %rcx,%rsi\n    1d77:\t48 89 c7             \tmov    %rax,%rdi\n    1d7a:\te8 00 00 00 00       \tcallq  1d7f <dso__load_all_kallsyms+0x4b>\n    1d7f:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    1d83:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n    1d8a:\t00 00 \n    1d8c:\t74 05                \tje     1d93 <dso__load_all_kallsyms+0x5f>\n    1d8e:\te8 00 00 00 00       \tcallq  1d93 <dso__load_all_kallsyms+0x5f>\n    1d93:\tc9                   \tleaveq \n    1d94:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dso__load_all_kallsyms(__int64 a1, const char *a2,\n                                          __int64 a3) {\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  <span class=\"supfact\">v4</span>[Number] = __readfsqword(Number);\n  <span class=\"supfact\">v4</span>[Number] = a3;\n  <span class=\"supfact\">v4</span>[Number] = a1;\n  return kallsyms__parse(\n      a2, (__int64)<span class=\"supfact\">v4</span>,\n      (__int64(__fastcall *)(__int64, char *, _QWORD, __int64,\n                             __int64))map__process_kallsym_symbol);\n}", "code_t": "int __cdecl dso__load_all_kallsyms(dso *dso, const char *filename, map *map) {\n  process_kallsyms_args <span class=\"supfact\">args</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  <span class=\"supfact\">args</span>.map = map;\n  <span class=\"supfact\">args</span>.dso = dso;\n  return kallsyms__parse(filename, &<span class=\"supfact\">args</span>,\n                         (int (*)(void *, const char *, char, u64,\n                                  u64))map__process_kallsym_symbol);\n}", "var": [{"name": "v4", "type": "struct process_kallsyms_args { map * map; dso * dso; }", "ref_name": "args", "ref_type": "struct process_kallsyms_args { map * map; dso * dso; }"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/1e1e7cb97ebb80eac8dbb33680b64d176ff61b4eaa68df0fca22659194da5490", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/stateful_proxy", "objdump": "000000000042155d <pjsip_tsx_layer_dump>:\n  42155d:\t55                   \tpush   %rbp\n  42155e:\t48 89 e5             \tmov    %rsp,%rbp\n  421561:\t41 54                \tpush   %r12\n  421563:\t53                   \tpush   %rbx\n  421564:\t48 83 ec 30          \tsub    $0x30,%rsp\n  421568:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n  42156b:\t48 8b 05 4e 8a 06 00 \tmov    0x68a4e(%rip),%rax        # 489fc0 <mod_tsx_layer+0x80>\n  421572:\t48 89 c7             \tmov    %rax,%rdi\n  421575:\te8 f5 8c 03 00       \tcallq  45a26f <pj_mutex_lock>\n  42157a:\te8 9c f1 03 00       \tcallq  46071b <pj_log_get_level>\n  42157f:\t83 f8 02             \tcmp    $0x2,%eax\n  421582:\t7e 14                \tjle    421598 <pjsip_tsx_layer_dump+0x3b>\n  421584:\tbe 3d d0 46 00       \tmov    $0x46d03d,%esi\n  421589:\tbf 79 cf 46 00       \tmov    $0x46cf79,%edi\n  42158e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  421593:\te8 53 fa 03 00       \tcallq  460feb <pj_log_3>\n  421598:\te8 7e f1 03 00       \tcallq  46071b <pj_log_get_level>\n  42159d:\t83 f8 02             \tcmp    $0x2,%eax\n  4215a0:\t7e 25                \tjle    4215c7 <pjsip_tsx_layer_dump+0x6a>\n  4215a2:\t48 8b 05 1f 8a 06 00 \tmov    0x68a1f(%rip),%rax        # 489fc8 <mod_tsx_layer+0x88>\n  4215a9:\t48 89 c7             \tmov    %rax,%rdi\n  4215ac:\te8 ed d5 03 00       \tcallq  45eb9e <pj_hash_count>\n  4215b1:\t89 c2                \tmov    %eax,%edx\n  4215b3:\tbe 58 d0 46 00       \tmov    $0x46d058,%esi\n  4215b8:\tbf 79 cf 46 00       \tmov    $0x46cf79,%edi\n  4215bd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4215c2:\te8 24 fa 03 00       \tcallq  460feb <pj_log_3>\n  4215c7:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n  4215cb:\t0f 84 09 01 00 00    \tje     4216da <pjsip_tsx_layer_dump+0x17d>\n  4215d1:\t48 8b 05 f0 89 06 00 \tmov    0x689f0(%rip),%rax        # 489fc8 <mod_tsx_layer+0x88>\n  4215d8:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  4215dc:\t48 89 d6             \tmov    %rdx,%rsi\n  4215df:\t48 89 c7             \tmov    %rax,%rdi\n  4215e2:\te8 c8 d5 03 00       \tcallq  45ebaf <pj_hash_first>\n  4215e7:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4215eb:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  4215f0:\t0f 85 d9 00 00 00    \tjne    4216cf <pjsip_tsx_layer_dump+0x172>\n  4215f6:\te8 20 f1 03 00       \tcallq  46071b <pj_log_get_level>\n  4215fb:\t83 f8 02             \tcmp    $0x2,%eax\n  4215fe:\t0f 8e d6 00 00 00    \tjle    4216da <pjsip_tsx_layer_dump+0x17d>\n  421604:\tbe 6f d0 46 00       \tmov    $0x46d06f,%esi\n  421609:\tbf 79 cf 46 00       \tmov    $0x46cf79,%edi\n  42160e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  421613:\te8 d3 f9 03 00       \tcallq  460feb <pj_log_3>\n  421618:\te9 bd 00 00 00       \tjmpq   4216da <pjsip_tsx_layer_dump+0x17d>\n  42161d:\t48 8b 05 a4 89 06 00 \tmov    0x689a4(%rip),%rax        # 489fc8 <mod_tsx_layer+0x88>\n  421624:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  421628:\t48 89 d6             \tmov    %rdx,%rsi\n  42162b:\t48 89 c7             \tmov    %rax,%rdi\n  42162e:\te8 b9 d6 03 00       \tcallq  45ecec <pj_hash_this>\n  421633:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  421637:\te8 df f0 03 00       \tcallq  46071b <pj_log_get_level>\n  42163c:\t83 f8 02             \tcmp    $0x2,%eax\n  42163f:\t7e 74                \tjle    4216b5 <pjsip_tsx_layer_dump+0x158>\n  421641:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  421645:\t8b 80 b8 00 00 00    \tmov    0xb8(%rax),%eax\n  42164b:\t89 c7                \tmov    %eax,%edi\n  42164d:\te8 b2 ee ff ff       \tcallq  420504 <pjsip_tsx_state_str>\n  421652:\t48 89 c3             \tmov    %rax,%rbx\n  421655:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  421659:\t44 8b a0 a0 00 00 00 \tmov    0xa0(%rax),%r12d\n  421660:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  421664:\t48 8b 80 70 01 00 00 \tmov    0x170(%rax),%rax\n  42166b:\t48 85 c0             \ttest   %rax,%rax\n  42166e:\t74 18                \tje     421688 <pjsip_tsx_layer_dump+0x12b>\n  421670:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  421674:\t48 8b 80 70 01 00 00 \tmov    0x170(%rax),%rax\n  42167b:\t48 89 c7             \tmov    %rax,%rdi\n  42167e:\te8 bb 8e ff ff       \tcallq  41a53e <pjsip_tx_data_get_info>\n  421683:\t48 89 c2             \tmov    %rax,%rdx\n  421686:\teb 05                \tjmp    42168d <pjsip_tsx_layer_dump+0x130>\n  421688:\tba 7a d0 46 00       \tmov    $0x46d07a,%edx\n  42168d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  421691:\t48 83 c0 30          \tadd    $0x30,%rax\n  421695:\t49 89 d9             \tmov    %rbx,%r9\n  421698:\t45 89 e0             \tmov    %r12d,%r8d\n  42169b:\t48 89 d1             \tmov    %rdx,%rcx\n  42169e:\t48 89 c2             \tmov    %rax,%rdx\n  4216a1:\tbe 7f d0 46 00       \tmov    $0x46d07f,%esi\n  4216a6:\tbf 79 cf 46 00       \tmov    $0x46cf79,%edi\n  4216ab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4216b0:\te8 36 f9 03 00       \tcallq  460feb <pj_log_3>\n  4216b5:\t48 8b 05 0c 89 06 00 \tmov    0x6890c(%rip),%rax        # 489fc8 <mod_tsx_layer+0x88>\n  4216bc:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4216c0:\t48 89 d6             \tmov    %rdx,%rsi\n  4216c3:\t48 89 c7             \tmov    %rax,%rdi\n  4216c6:\te8 73 d5 03 00       \tcallq  45ec3e <pj_hash_next>\n  4216cb:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4216cf:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  4216d4:\t0f 85 43 ff ff ff    \tjne    42161d <pjsip_tsx_layer_dump+0xc0>\n  4216da:\t48 8b 05 df 88 06 00 \tmov    0x688df(%rip),%rax        # 489fc0 <mod_tsx_layer+0x80>\n  4216e1:\t48 89 c7             \tmov    %rax,%rdi\n  4216e4:\te8 3f 8c 03 00       \tcallq  45a328 <pj_mutex_unlock>\n  4216e9:\t90                   \tnop\n  4216ea:\t48 83 c4 30          \tadd    $0x30,%rsp\n  4216ee:\t5b                   \tpop    %rbx\n  4216ef:\t41 5c                \tpop    %r12\n  4216f1:\t5d                   \tpop    %rbp\n  4216f2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pjsip_tsx_layer_dump(int a1) {\n  int v1;\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  int v10;\n  int v11;\n  int v12;\n  unsigned int v13;\n  int v14;\n  const char *v15;\n  char <span class=\"supfact\">v17</span>[Number];\n  __int64 <span class=\"supfact\">v18</span>;\n  __int64 <span class=\"supfact\">v19</span>;\n  pj_mutex_lock(qword_489FC0);\n  if ((int)pj_log_get_level() > Number)\n    pj_log_3((unsigned int)String, (unsigned int)String, v1, v2, v3, v4);\n  if ((int)pj_log_get_level() > Number) {\n    v5 = pj_hash_count(qword_489FC8);\n    pj_log_3((unsigned int)String, (unsigned int)String, v5, v6, v7, v8);\n  }\n  if (a1) {\n    <span class=\"supfact\">v19</span> = pj_hash_first(qword_489FC8, <span class=\"supfact\">v17</span>);\n    if (<span class=\"supfact\">v19</span>) {\n      while (<span class=\"supfact\">v19</span>) {\n        <span class=\"supfact\">v18</span> = pj_hash_this(qword_489FC8, <span class=\"supfact\">v19</span>);\n        if ((int)pj_log_get_level() > Number) {\n          v13 = (unsigned int)pjsip_tsx_state_str(\n              *(_DWORD *)(<span class=\"supfact\">v18</span> + Number));\n          v14 = *(_DWORD *)(<span class=\"supfact\">v18</span> + Number);\n          if (*(_QWORD *)(<span class=\"supfact\">v18</span> + Number))\n            LODWORD(v15) = (unsigned int)pjsip_tx_data_get_info(\n                *(_QWORD *)(<span class=\"supfact\">v18</span> + Number));\n          else\n            v15 = String;\n          pj_log_3((unsigned int)String, (unsigned int)String,\n                   <span class=\"supfact\">v18</span> + Number, (_DWORD)v15, v14, v13);\n        }\n        <span class=\"supfact\">v19</span> = pj_hash_next(qword_489FC8, <span class=\"supfact\">v19</span>);\n      }\n    } else if ((int)pj_log_get_level() > Number) {\n      pj_log_3((unsigned int)String, (unsigned int)String, v9, v10, v11, v12);\n    }\n  }\n  return pj_mutex_unlock(qword_489FC0);\n}", "code_t": "void __cdecl pjsip_tsx_layer_dump(pj_bool_t detail) {\n  unsigned int v1;\n  const char *v2;\n  unsigned int v3;\n  char *v4;\n  pj_hash_iterator_t_0 <span class=\"supfact\">itbuf</span>;\n  pjsip_transaction_0 *<span class=\"supfact\">tsx</span>;\n  pj_hash_iterator_t_0 *<span class=\"supfact\">it</span>;\n  pj_mutex_lock(mod_tsx_layer_0.mutex);\n  if (pj_log_get_level() > Number)\n    pj_log_3(String, String);\n  if (pj_log_get_level() > Number) {\n    v1 = pj_hash_count(mod_tsx_layer_0.htable);\n    pj_log_3(String, String, v1);\n  }\n  if (detail) {\n    <span class=\"supfact\">it</span> =\n        pj_hash_first(mod_tsx_layer_0.htable, &<span class=\"supfact\">itbuf</span>);\n    if (<span class=\"supfact\">it</span>) {\n      while (<span class=\"supfact\">it</span>) {\n        <span class=\"supfact\">tsx</span> = (pjsip_transaction_0 *)pj_hash_this(\n            mod_tsx_layer_0.htable, <span class=\"supfact\">it</span>);\n        if (pj_log_get_level() > Number) {\n          v2 = pjsip_tsx_state_str(<span class=\"supfact\">tsx</span>->state);\n          v3 = <span class=\"supfact\">tsx</span>->status_code;\n          if (<span class=\"supfact\">tsx</span>->last_tx)\n            v4 = pjsip_tx_data_get_info(<span class=\"supfact\">tsx</span>->last_tx);\n          else\n            v4 = String;\n          pj_log_3(String, String, <span class=\"supfact\">tsx</span>->obj_name, v4, v3, v2);\n        }\n        <span class=\"supfact\">it</span> =\n            pj_hash_next(mod_tsx_layer_0.htable, <span class=\"supfact\">it</span>);\n      }\n    } else if (pj_log_get_level() > Number) {\n      pj_log_3(String, String);\n    }\n  }\n  pj_mutex_unlock(mod_tsx_layer_0.mutex);\n}", "var": [{"name": "v17", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "itbuf", "ref_type": "struct pj_hash_iterator_t_0 { pj_uint32_t index; PADDING (4); pj_hash_entry_0 * entry; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d4a3e7148b67bff6fe668513f6b0b311eb206e1822da210277eb341beb1dc43d", "path_in_repo": "XanClic/qemu//arm-softmmu/hw/arm/smmuv3.o", "objdump": "0000000000000c37 <_nocheck__trace_smmuv3_record_event>:\n     c37:\t55                   \tpush   %rbp\n     c38:\t48 89 e5             \tmov    %rsp,%rbp\n     c3b:\t41 54                \tpush   %r12\n     c3d:\t53                   \tpush   %rbx\n     c3e:\t48 83 ec 30          \tsub    $0x30,%rsp\n     c42:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     c46:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n     c49:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     c50:\t00 00 \n     c52:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     c56:\t31 c0                \txor    %eax,%eax\n     c58:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # c5e <_nocheck__trace_smmuv3_record_event+0x27>\n     c5e:\t85 c0                \ttest   %eax,%eax\n     c60:\t0f 95 c0             \tsetne  %al\n     c63:\t0f b6 c0             \tmovzbl %al,%eax\n     c66:\t48 85 c0             \ttest   %rax,%rax\n     c69:\t74 64                \tje     ccf <_nocheck__trace_smmuv3_record_event+0x98>\n     c6b:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # c72 <_nocheck__trace_smmuv3_record_event+0x3b>\n     c72:\t66 85 c0             \ttest   %ax,%ax\n     c75:\t74 58                \tje     ccf <_nocheck__trace_smmuv3_record_event+0x98>\n     c77:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     c7c:\te8 d0 f6 ff ff       \tcallq  351 <qemu_loglevel_mask>\n     c81:\t84 c0                \ttest   %al,%al\n     c83:\t74 4a                \tje     ccf <_nocheck__trace_smmuv3_record_event+0x98>\n     c85:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     c89:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c8e:\t48 89 c7             \tmov    %rax,%rdi\n     c91:\te8 00 00 00 00       \tcallq  c96 <_nocheck__trace_smmuv3_record_event+0x5f>\n     c96:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c9a:\t49 89 c4             \tmov    %rax,%r12\n     c9d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     ca1:\t48 89 c3             \tmov    %rax,%rbx\n     ca4:\te8 00 00 00 00       \tcallq  ca9 <_nocheck__trace_smmuv3_record_event+0x72>\n     ca9:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n     cac:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     cb0:\t41 89 c9             \tmov    %ecx,%r9d\n     cb3:\t49 89 d0             \tmov    %rdx,%r8\n     cb6:\t4c 89 e1             \tmov    %r12,%rcx\n     cb9:\t48 89 da             \tmov    %rbx,%rdx\n     cbc:\t89 c6                \tmov    %eax,%esi\n     cbe:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # cc5 <_nocheck__trace_smmuv3_record_event+0x8e>\n     cc5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     cca:\te8 00 00 00 00       \tcallq  ccf <_nocheck__trace_smmuv3_record_event+0x98>\n     ccf:\t90                   \tnop\n     cd0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     cd4:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     cdb:\t00 00 \n     cdd:\t74 05                \tje     ce4 <_nocheck__trace_smmuv3_record_event+0xad>\n     cdf:\te8 00 00 00 00       \tcallq  ce4 <_nocheck__trace_smmuv3_record_event+0xad>\n     ce4:\t48 83 c4 30          \tadd    $0x30,%rsp\n     ce8:\t5b                   \tpop    %rbx\n     ce9:\t41 5c                \tpop    %r12\n     ceb:\t5d                   \tpop    %rbp\n     cec:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_smmuv3_record_event(\n    const char *a1, unsigned int a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_RECORD_EVENT_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v2 = <span class=\"supfact\">tv</span>.tv_usec;\n    v3 = <span class=\"supfact\">tv</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, a1, a2);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v7</span>;\n}", "code_t": "void __cdecl nocheck__trace_smmuv3_record_event(const char *type,\n                                                uint32_t sid) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_RECORD_EVENT_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v2 = <span class=\"supfact\">_now</span>.tv_usec;\n    v3 = <span class=\"supfact\">_now</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, type, sid);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "mitchty", "repo_name": "ellcc-mirror", "path": "mitchty/ellcc-mirror/953c7c8a57b7898e292bbab34fe15b37ef2f1df9164b501e32cfd14371c43380", "path_in_repo": "mitchty/ellcc-mirror/gnu/src/qemu/migration/fd.o", "objdump": "0000000000000000 <fd_is_socket>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n   b:\t89 bd 4c ff ff ff    \tmov    %edi,-0xb4(%rbp)\n  11:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  18:\t00 00 \n  1a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  1e:\t31 c0                \txor    %eax,%eax\n  20:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  27:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n  2d:\t48 89 d6             \tmov    %rdx,%rsi\n  30:\t89 c7                \tmov    %eax,%edi\n  32:\te8 00 00 00 00       \tcallq  37 <fd_is_socket+0x37>\n  37:\t89 85 5c ff ff ff    \tmov    %eax,-0xa4(%rbp)\n  3d:\t83 bd 5c ff ff ff ff \tcmpl   $0xffffffff,-0xa4(%rbp)\n  44:\t75 07                \tjne    4d <fd_is_socket+0x4d>\n  46:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4b:\teb 13                \tjmp    60 <fd_is_socket+0x60>\n  4d:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n  53:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  58:\t3d 00 c0 00 00       \tcmp    $0xc000,%eax\n  5d:\t0f 94 c0             \tsete   %al\n  60:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  64:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n  6b:\t00 00 \n  6d:\t74 05                \tje     74 <fd_is_socket+0x74>\n  6f:\te8 00 00 00 00       \tcallq  74 <fd_is_socket+0x74>\n  74:\tc9                   \tleaveq \n  75:\tc3                   \tretq   ", "code_s": "bool __fastcall fd_is_socket(int a1) {\n  bool result;\n  struct stat64 <span class=\"supfact\">buf</span>;\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = __readfsqword(Number);\n  if (fstat64(a1, &<span class=\"supfact\">buf</span>) == Number)\n    result = Number;\n  else\n    result = (<span class=\"supfact\">buf</span>.st_mode & Number) == Number;\n  return result;\n}", "code_t": "bool __cdecl fd_is_socket(int fd) {\n  bool result;\n  <span class=\"supfact\">stat</span> <span class=\"supfact\">stat</span>;\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = __readfsqword(Number);\n  if (fstat64(fd, (struct stat64 *)&<span class=\"supfact\">stat</span>) == Number)\n    result = Number;\n  else\n    result = (<span class=\"supfact\">stat</span>.st_mode & Number) == Number;\n  return result;\n}", "var": [{"name": "buf", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "stat", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "Gentoli", "repo_name": "chromeos-surface-kernel", "path": "Gentoli/chromeos-surface-kernel/19750839703110b40e854301f7608eb78d69342f6e5523271916f5461b8662ef", "path_in_repo": "Gentoli/chromeos-surface-kernel/tools/testing/selftests/seccomp/seccomp_bpf", "objdump": "0000000000417210 <wrapper_TRACE_syscall_syscall_faked>:\n  417210:\t55                   \tpush   %rbp\n  417211:\t48 89 e5             \tmov    %rsp,%rbp\n  417214:\t48 83 ec 30          \tsub    $0x30,%rsp\n  417218:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  41721c:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  417220:\tba 20 00 00 00       \tmov    $0x20,%edx\n  417225:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  41722a:\t48 89 c7             \tmov    %rax,%rdi\n  41722d:\te8 1e af fe ff       \tcallq  402150 <memset@plt>\n  417232:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  417236:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41723a:\t48 89 d6             \tmov    %rdx,%rsi\n  41723d:\t48 89 c7             \tmov    %rax,%rdi\n  417240:\te8 57 e1 ff ff       \tcallq  41539c <TRACE_syscall_setup>\n  417245:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  417249:\t8b 40 14             \tmov    0x14(%rax),%eax\n  41724c:\t85 c0                \ttest   %eax,%eax\n  41724e:\t74 28                \tje     417278 <wrapper_TRACE_syscall_syscall_faked+0x68>\n  417250:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  417254:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  417258:\t48 89 d6             \tmov    %rdx,%rsi\n  41725b:\t48 89 c7             \tmov    %rax,%rdi\n  41725e:\te8 29 00 00 00       \tcallq  41728c <TRACE_syscall_syscall_faked>\n  417263:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  417267:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41726b:\t48 89 d6             \tmov    %rdx,%rsi\n  41726e:\t48 89 c7             \tmov    %rax,%rdi\n  417271:\te8 30 eb ff ff       \tcallq  415da6 <TRACE_syscall_teardown>\n  417276:\teb 01                \tjmp    417279 <wrapper_TRACE_syscall_syscall_faked+0x69>\n  417278:\t90                   \tnop\n  417279:\tc9                   \tleaveq \n  41727a:\tc3                   \tretq   ", "code_s": "void __fastcall wrapper_TRACE_syscall_syscall_faked(__int64 a1) {\n  _WORD <span class=\"supfact\">s</span>[Number];\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  TRACE_syscall_setup((const char **)a1, <span class=\"supfact\">s</span>);\n  if (*(_DWORD *)(a1 + Number)) {\n    TRACE_syscall_syscall_faked(a1, <span class=\"supfact\">s</span>);\n    TRACE_syscall_teardown((const char **)a1, (__int64)<span class=\"supfact\">s</span>);\n  }\n}", "code_t": "void __cdecl wrapper_TRACE_syscall_syscall_faked(__test_metadata *_metadata) {\n  _test_data_TRACE_syscall <span class=\"supfact\">self</span>;\n  memset(&<span class=\"supfact\">self</span>, Number, sizeof(<span class=\"supfact\">self</span>));\n  TRACE_syscall_setup(_metadata, &<span class=\"supfact\">self</span>);\n  if (_metadata->passed) {\n    TRACE_syscall_syscall_faked(_metadata, &<span class=\"supfact\">self</span>);\n    TRACE_syscall_teardown(_metadata, &<span class=\"supfact\">self</span>);\n  }\n}", "var": [{"name": "s", "type": "struct _test_data_TRACE_syscall { sock_fprog prog; pid_t tracer; pid_t mytid; pid_t mypid; pid_t parent; }", "ref_name": "self", "ref_type": "struct _test_data_TRACE_syscall { sock_fprog prog; pid_t tracer; pid_t mytid; pid_t mypid; pid_t parent; }"}], "body_in_train": false}, {"repo_owner": "Maxul", "repo_name": "sgx_vmx_protocol", "path": "Maxul/sgx_vmx_protocol/0311a154c0d30335f1929161cac25d84ba866078b35adc60bf2d478e6030c953", "path_in_repo": "Maxul/sgx_vmx_protocol/Sandbox/qemu-sgx-master/hw/net/opencores_eth.o", "objdump": "00000000000003a8 <trace_open_eth_receive_mcast>:\n     3a8:\t55                   \tpush   %rbp\n     3a9:\t48 89 e5             \tmov    %rsp,%rbp\n     3ac:\t41 54                \tpush   %r12\n     3ae:\t53                   \tpush   %rbx\n     3af:\t48 83 ec 30          \tsub    $0x30,%rsp\n     3b3:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n     3b6:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n     3b9:\t89 55 c4             \tmov    %edx,-0x3c(%rbp)\n     3bc:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     3c3:\t00 00 \n     3c5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     3c9:\t31 c0                \txor    %eax,%eax\n     3cb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3d1 <trace_open_eth_receive_mcast+0x29>\n     3d1:\t85 c0                \ttest   %eax,%eax\n     3d3:\t0f 95 c0             \tsetne  %al\n     3d6:\t0f b6 c0             \tmovzbl %al,%eax\n     3d9:\t48 85 c0             \ttest   %rax,%rax\n     3dc:\t74 73                \tje     451 <trace_open_eth_receive_mcast+0xa9>\n     3de:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 3e5 <trace_open_eth_receive_mcast+0x3d>\n     3e5:\t66 85 c0             \ttest   %ax,%ax\n     3e8:\t74 67                \tje     451 <trace_open_eth_receive_mcast+0xa9>\n     3ea:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     3ee:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     3f3:\t48 89 c7             \tmov    %rax,%rdi\n     3f6:\te8 00 00 00 00       \tcallq  3fb <trace_open_eth_receive_mcast+0x53>\n     3fb:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     400:\te8 ae fc ff ff       \tcallq  b3 <qemu_loglevel_mask>\n     405:\t0f b6 c0             \tmovzbl %al,%eax\n     408:\t48 85 c0             \ttest   %rax,%rax\n     40b:\t74 44                \tje     451 <trace_open_eth_receive_mcast+0xa9>\n     40d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     411:\t49 89 c4             \tmov    %rax,%r12\n     414:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     418:\t48 89 c3             \tmov    %rax,%rbx\n     41b:\te8 00 00 00 00       \tcallq  420 <trace_open_eth_receive_mcast+0x78>\n     420:\t89 c6                \tmov    %eax,%esi\n     422:\t8b 4d c8             \tmov    -0x38(%rbp),%ecx\n     425:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     428:\t48 83 ec 08          \tsub    $0x8,%rsp\n     42c:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     42f:\t50                   \tpush   %rax\n     430:\t41 89 c9             \tmov    %ecx,%r9d\n     433:\t41 89 d0             \tmov    %edx,%r8d\n     436:\t4c 89 e1             \tmov    %r12,%rcx\n     439:\t48 89 da             \tmov    %rbx,%rdx\n     43c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 443 <trace_open_eth_receive_mcast+0x9b>\n     443:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     448:\te8 00 00 00 00       \tcallq  44d <trace_open_eth_receive_mcast+0xa5>\n     44d:\t48 83 c4 10          \tadd    $0x10,%rsp\n     451:\t90                   \tnop\n     452:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     456:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     45d:\t00 00 \n     45f:\t74 05                \tje     466 <trace_open_eth_receive_mcast+0xbe>\n     461:\te8 00 00 00 00       \tcallq  466 <trace_open_eth_receive_mcast+0xbe>\n     466:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     46a:\t5b                   \tpop    %rbx\n     46b:\t41 5c                \tpop    %r12\n     46d:\t5d                   \tpop    %rbp\n     46e:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_open_eth_receive_mcast(unsigned int a1,\n                                                         unsigned int a2,\n                                                         unsigned int a3) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_OPEN_ETH_RECEIVE_MCAST_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v3 = <span class=\"supfact\">tv</span>.tv_usec;\n        v4 = <span class=\"supfact\">tv</span>.tv_sec;\n        v5 = getpid();\n        qemu_log(String, v5, v4, v3, a1, a2, a3);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl trace_open_eth_receive_mcast(unsigned int idx, uint32_t h0,\n                                          uint32_t h1) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_OPEN_ETH_RECEIVE_MCAST_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v3 = <span class=\"supfact\">_now</span>.tv_usec;\n      v4 = <span class=\"supfact\">_now</span>.tv_sec;\n      v5 = getpid();\n      qemu_log(String, v5, v4, v3, idx, h0, h1);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "lalithsuresh", "repo_name": "QEMU-Device-State-Visualisations", "path": "lalithsuresh/QEMU-Device-State-Visualisations/052e0622095011042ef41ba0cc3df030484ec649332695346b111abbd89ec73e", "path_in_repo": "lalithsuresh/QEMU-Device-State-Visualisations//sparc64-linux-user/signal.o", "objdump": "00000000000032be <process_pending_signals>:\n    32be:\t55                   \tpush   %rbp\n    32bf:\t48 89 e5             \tmov    %rsp,%rbp\n    32c2:\t48 81 ec 60 01 00 00 \tsub    $0x160,%rsp\n    32c9:\t48 89 bd a8 fe ff ff \tmov    %rdi,-0x158(%rbp)\n    32d0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    32d7:\t00 00 \n    32d9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    32dd:\t31 c0                \txor    %eax,%eax\n    32df:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    32e6:\t48 8b 80 70 97 00 00 \tmov    0x9770(%rax),%rax\n    32ed:\t48 89 85 d8 fe ff ff \tmov    %rax,-0x128(%rbp)\n    32f4:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    32fb:\t8b 80 20 68 02 00    \tmov    0x26820(%rax),%eax\n    3301:\t85 c0                \ttest   %eax,%eax\n    3303:\t0f 84 f0 02 00 00    \tje     35f9 <process_pending_signals+0x33b>\n    3309:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    3310:\t48 83 c0 18          \tadd    $0x18,%rax\n    3314:\t48 89 85 c8 fe ff ff \tmov    %rax,-0x138(%rbp)\n    331b:\tc7 85 bc fe ff ff 01 \tmovl   $0x1,-0x144(%rbp)\n    3322:\t00 00 00 \n    3325:\teb 1f                \tjmp    3346 <process_pending_signals+0x88>\n    3327:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    332e:\t8b 00                \tmov    (%rax),%eax\n    3330:\t85 c0                \ttest   %eax,%eax\n    3332:\t75 31                \tjne    3365 <process_pending_signals+0xa7>\n    3334:\t48 81 85 c8 fe ff ff \taddq   $0xa0,-0x138(%rbp)\n    333b:\ta0 00 00 00 \n    333f:\t83 85 bc fe ff ff 01 \taddl   $0x1,-0x144(%rbp)\n    3346:\t83 bd bc fe ff ff 40 \tcmpl   $0x40,-0x144(%rbp)\n    334d:\t7e d8                \tjle    3327 <process_pending_signals+0x69>\n    334f:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    3356:\tc7 80 20 68 02 00 00 \tmovl   $0x0,0x26820(%rax)\n    335d:\t00 00 00 \n    3360:\te9 95 02 00 00       \tjmpq   35fa <process_pending_signals+0x33c>\n    3365:\t90                   \tnop\n    3366:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    336d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3371:\t48 89 85 e0 fe ff ff \tmov    %rax,-0x120(%rbp)\n    3378:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    337f:\t48 8b 10             \tmov    (%rax),%rdx\n    3382:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    3389:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    338d:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    3394:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3398:\t48 85 c0             \ttest   %rax,%rax\n    339b:\t75 0d                \tjne    33aa <process_pending_signals+0xec>\n    339d:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    33a4:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    33aa:\t8b 95 bc fe ff ff    \tmov    -0x144(%rbp),%edx\n    33b0:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    33b7:\t89 d6                \tmov    %edx,%esi\n    33b9:\t48 89 c7             \tmov    %rax,%rdi\n    33bc:\te8 00 00 00 00       \tcallq  33c1 <process_pending_signals+0x103>\n    33c1:\t89 85 bc fe ff ff    \tmov    %eax,-0x144(%rbp)\n    33c7:\t83 bd bc fe ff ff 00 \tcmpl   $0x0,-0x144(%rbp)\n    33ce:\t75 18                \tjne    33e8 <process_pending_signals+0x12a>\n    33d0:\t48 c7 85 d0 fe ff ff \tmovq   $0x0,-0x130(%rbp)\n    33d7:\t00 00 00 00 \n    33db:\t48 c7 85 c0 fe ff ff \tmovq   $0x1,-0x140(%rbp)\n    33e2:\t01 00 00 00 \n    33e6:\teb 2d                \tjmp    3415 <process_pending_signals+0x157>\n    33e8:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n    33ee:\t83 e8 01             \tsub    $0x1,%eax\n    33f1:\t48 98                \tcltq   \n    33f3:\t48 c1 e0 05          \tshl    $0x5,%rax\n    33f7:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    33fd:\t48 89 85 d0 fe ff ff \tmov    %rax,-0x130(%rbp)\n    3404:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n    340b:\t48 8b 00             \tmov    (%rax),%rax\n    340e:\t48 89 85 c0 fe ff ff \tmov    %rax,-0x140(%rbp)\n    3415:\t48 83 bd c0 fe ff ff \tcmpq   $0x0,-0x140(%rbp)\n    341c:\t00 \n    341d:\t75 72                \tjne    3491 <process_pending_signals+0x1d3>\n    341f:\t83 bd bc fe ff ff 12 \tcmpl   $0x12,-0x144(%rbp)\n    3426:\t74 12                \tje     343a <process_pending_signals+0x17c>\n    3428:\t83 bd bc fe ff ff 15 \tcmpl   $0x15,-0x144(%rbp)\n    342f:\t74 09                \tje     343a <process_pending_signals+0x17c>\n    3431:\t83 bd bc fe ff ff 16 \tcmpl   $0x16,-0x144(%rbp)\n    3438:\t75 16                \tjne    3450 <process_pending_signals+0x192>\n    343a:\te8 00 00 00 00       \tcallq  343f <process_pending_signals+0x181>\n    343f:\tbe 13 00 00 00       \tmov    $0x13,%esi\n    3444:\t89 c7                \tmov    %eax,%edi\n    3446:\te8 00 00 00 00       \tcallq  344b <process_pending_signals+0x18d>\n    344b:\te9 7a 01 00 00       \tjmpq   35ca <process_pending_signals+0x30c>\n    3450:\t83 bd bc fe ff ff 14 \tcmpl   $0x14,-0x144(%rbp)\n    3457:\t0f 84 6d 01 00 00    \tje     35ca <process_pending_signals+0x30c>\n    345d:\t83 bd bc fe ff ff 10 \tcmpl   $0x10,-0x144(%rbp)\n    3464:\t0f 84 60 01 00 00    \tje     35ca <process_pending_signals+0x30c>\n    346a:\t83 bd bc fe ff ff 1c \tcmpl   $0x1c,-0x144(%rbp)\n    3471:\t0f 84 53 01 00 00    \tje     35ca <process_pending_signals+0x30c>\n    3477:\t83 bd bc fe ff ff 13 \tcmpl   $0x13,-0x144(%rbp)\n    347e:\t0f 84 46 01 00 00    \tje     35ca <process_pending_signals+0x30c>\n    3484:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n    348a:\t89 c7                \tmov    %eax,%edi\n    348c:\te8 a1 d9 ff ff       \tcallq  e32 <force_sig>\n    3491:\t48 83 bd c0 fe ff ff \tcmpq   $0x1,-0x140(%rbp)\n    3498:\t01 \n    3499:\t0f 84 2b 01 00 00    \tje     35ca <process_pending_signals+0x30c>\n    349f:\t48 83 bd c0 fe ff ff \tcmpq   $0xffffffffffffffff,-0x140(%rbp)\n    34a6:\tff \n    34a7:\t75 0d                \tjne    34b6 <process_pending_signals+0x1f8>\n    34a9:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n    34af:\t89 c7                \tmov    %eax,%edi\n    34b1:\te8 7c d9 ff ff       \tcallq  e32 <force_sig>\n    34b6:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n    34bd:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n    34c1:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    34c8:\t48 89 d6             \tmov    %rdx,%rsi\n    34cb:\t48 89 c7             \tmov    %rax,%rdi\n    34ce:\te8 00 00 00 00       \tcallq  34d3 <process_pending_signals+0x215>\n    34d3:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n    34da:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    34de:\t83 e0 20             \tand    $0x20,%eax\n    34e1:\t48 85 c0             \ttest   %rax,%rax\n    34e4:\t75 20                \tjne    3506 <process_pending_signals+0x248>\n    34e6:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n    34ec:\t89 c7                \tmov    %eax,%edi\n    34ee:\te8 00 00 00 00       \tcallq  34f3 <process_pending_signals+0x235>\n    34f3:\t89 c2                \tmov    %eax,%edx\n    34f5:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    34fc:\t89 d6                \tmov    %edx,%esi\n    34fe:\t48 89 c7             \tmov    %rax,%rdi\n    3501:\te8 00 00 00 00       \tcallq  3506 <process_pending_signals+0x248>\n    3506:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n    350d:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    3514:\t48 89 c6             \tmov    %rax,%rsi\n    3517:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    351c:\te8 00 00 00 00       \tcallq  3521 <process_pending_signals+0x263>\n    3521:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n    3528:\t48 8d 85 e8 fe ff ff \tlea    -0x118(%rbp),%rax\n    352f:\t48 89 d6             \tmov    %rdx,%rsi\n    3532:\t48 89 c7             \tmov    %rax,%rdi\n    3535:\te8 b0 cf ff ff       \tcallq  4ea <host_to_target_sigset_internal>\n    353a:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n    3541:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3545:\t25 00 02 00 00       \tand    $0x200,%eax\n    354a:\t48 85 c0             \ttest   %rax,%rax\n    354d:\t74 38                \tje     3587 <process_pending_signals+0x2c9>\n    354f:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    3556:\t48 8d 78 08          \tlea    0x8(%rax),%rdi\n    355a:\t48 8b 8d a8 fe ff ff \tmov    -0x158(%rbp),%rcx\n    3561:\t48 8d 95 e8 fe ff ff \tlea    -0x118(%rbp),%rdx\n    3568:\t48 8b b5 d0 fe ff ff \tmov    -0x130(%rbp),%rsi\n    356f:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n    3575:\t49 89 c8             \tmov    %rcx,%r8\n    3578:\t48 89 d1             \tmov    %rdx,%rcx\n    357b:\t48 89 fa             \tmov    %rdi,%rdx\n    357e:\t89 c7                \tmov    %eax,%edi\n    3580:\te8 26 e8 ff ff       \tcallq  1dab <setup_rt_frame>\n    3585:\teb 22                \tjmp    35a9 <process_pending_signals+0x2eb>\n    3587:\t48 8b 8d a8 fe ff ff \tmov    -0x158(%rbp),%rcx\n    358e:\t48 8d 95 e8 fe ff ff \tlea    -0x118(%rbp),%rdx\n    3595:\t48 8b b5 d0 fe ff ff \tmov    -0x130(%rbp),%rsi\n    359c:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n    35a2:\t89 c7                \tmov    %eax,%edi\n    35a4:\te8 a2 e4 ff ff       \tcallq  1a4b <setup_frame>\n    35a9:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n    35b0:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    35b4:\t83 e0 04             \tand    $0x4,%eax\n    35b7:\t48 85 c0             \ttest   %rax,%rax\n    35ba:\t74 0e                \tje     35ca <process_pending_signals+0x30c>\n    35bc:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n    35c3:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    35ca:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    35d1:\t48 83 c0 10          \tadd    $0x10,%rax\n    35d5:\t48 39 85 e0 fe ff ff \tcmp    %rax,-0x120(%rbp)\n    35dc:\t74 1c                \tje     35fa <process_pending_signals+0x33c>\n    35de:\t48 8b 95 e0 fe ff ff \tmov    -0x120(%rbp),%rdx\n    35e5:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    35ec:\t48 89 d6             \tmov    %rdx,%rsi\n    35ef:\t48 89 c7             \tmov    %rax,%rdi\n    35f2:\te8 d5 d7 ff ff       \tcallq  dcc <free_sigqueue>\n    35f7:\teb 01                \tjmp    35fa <process_pending_signals+0x33c>\n    35f9:\t90                   \tnop\n    35fa:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    35fe:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    3605:\t00 00 \n    3607:\t74 05                \tje     360e <process_pending_signals+0x350>\n    3609:\te8 00 00 00 00       \tcallq  360e <process_pending_signals+0x350>\n    360e:\tc9                   \tleaveq \n    360f:\tc3                   \tretq   \n", "code_s": "unsigned __int64 __fastcall process_pending_signals(_QWORD *a1) {\n  __pid_t v1;\n  int v2;\n  int i;\n  unsigned int v5;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 *<span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  _QWORD *<span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  sigset_t <span class=\"supfact\">set</span>;\n  sigset_t <span class=\"supfact\">oset</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v14</span> = __readfsqword(Number);\n  <span class=\"supfact\">v9</span> = a1[Number];\n  if (*(_DWORD *)(<span class=\"supfact\">v9</span> + Number)) {\n    <span class=\"supfact\">v7</span> = <span class=\"supfact\">v9</span> + Number;\n    for (i = Number;; ++i) {\n      if (i > Number) {\n        *(_DWORD *)(<span class=\"supfact\">v9</span> + Number) = Number;\n        return __readfsqword(Number) ^ <span class=\"supfact\">v14</span>;\n      }\n      if (*(_DWORD *)<span class=\"supfact\">v7</span>)\n        break;\n      <span class=\"supfact\">v7</span> += Number L;\n    }\n    <span class=\"supfact\">v10</span> = *(_QWORD **)(<span class=\"supfact\">v7</span> + Number);\n    *(_QWORD *)(<span class=\"supfact\">v7</span> + Number) = *<span class=\"supfact\">v10</span>;\n    if (!*(_QWORD *)(<span class=\"supfact\">v7</span> + Number))\n      *(_DWORD *)<span class=\"supfact\">v7</span> = Number;\n    v5 = gdb_handlesig(a1, (unsigned int)i);\n    if (v5) {\n      <span class=\"supfact\">v8</span> = &sigact_table[Number * (int)(v5 - Number)];\n      <span class=\"supfact\">v6</span> = *<span class=\"supfact\">v8</span>;\n    } else {\n      <span class=\"supfact\">v8</span> = Number L;\n      <span class=\"supfact\">v6</span> = Number L;\n    }\n    if (<span class=\"supfact\">v6</span>) {\n      if (<span class=\"supfact\">v6</span> != Number) {\n        if (<span class=\"supfact\">v6</span> == Number)\n          force_sig(v5);\n        target_to_host_sigset(&<span class=\"supfact\">set</span>,\n                              (__int64)(<span class=\"supfact\">v8</span> + Number));\n        if ((<span class=\"supfact\">v8</span>[Number] & Number) == Number) {\n          v2 = target_to_host_signal(v5);\n          sigaddset(&<span class=\"supfact\">set</span>, v2);\n        }\n        sigprocmask(Number, &<span class=\"supfact\">set</span>, &<span class=\"supfact\">oset</span>);\n        host_to_target_sigset_internal(&<span class=\"supfact\">v11</span>,\n                                       &<span class=\"supfact\">oset</span>);\n        if ((<span class=\"supfact\">v8</span>[Number] & Number) != Number)\n          setup_rt_frame();\n        else\n          setup_frame(v5, <span class=\"supfact\">v8</span>, &<span class=\"supfact\">v11</span>, a1);\n        if ((<span class=\"supfact\">v8</span>[Number] & Number) != Number)\n          *<span class=\"supfact\">v8</span> = Number L;\n      }\n    } else if (v5 == Number || v5 == Number || v5 == Number) {\n      v1 = getpid();\n      kill(v1, Number);\n    } else if (v5 != Number && v5 != Number && v5 != Number && v5 != Number) {\n      force_sig(v5);\n    }\n    if (<span class=\"supfact\">v10</span> != (_QWORD *)(<span class=\"supfact\">v7</span> + Number))\n      free_sigqueue((__int64)a1, <span class=\"supfact\">v10</span>);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v14</span>;\n}", "code_t": "void __cdecl process_pending_signals(CPUSPARCState *cpu_env) {\n  __pid_t v1;\n  int v2;\n  int sig;\n  int siga;\n  abi_ulong <span class=\"supfact\">handler</span>;\n  emulated_sigtable *<span class=\"supfact\">k</span>;\n  target_sigaction *<span class=\"supfact\">sa</span>;\n  TaskState_0 *<span class=\"supfact\">ts</span>;\n  sigqueue *<span class=\"supfact\">q</span>;\n  target_sigset_t <span class=\"supfact\">target_old_set</span>;\n  sigset_t <span class=\"supfact\">set</span>;\n  sigset_t <span class=\"supfact\">old_set</span>;\n  unsigned __int64 <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v13</span> = __readfsqword(Number);\n  <span class=\"supfact\">ts</span> = (TaskState_0 *)cpu_env->opaque;\n  if (<span class=\"supfact\">ts</span>->signal_pending) {\n    <span class=\"supfact\">k</span> = <span class=\"supfact\">ts</span>->sigtab;\n    for (sig = Number;; ++sig) {\n      if (sig > Number) {\n        <span class=\"supfact\">ts</span>->signal_pending = Number;\n        return;\n      }\n      if (<span class=\"supfact\">k</span>->pending)\n        break;\n      ++<span class=\"supfact\">k</span>;\n    }\n    <span class=\"supfact\">q</span> = <span class=\"supfact\">k</span>->first;\n    <span class=\"supfact\">k</span>->first = <span class=\"supfact\">q</span>->next;\n    if (!<span class=\"supfact\">k</span>->first)\n      <span class=\"supfact\">k</span>->pending = Number;\n    siga = gdb_handlesig(cpu_env, (unsigned int)sig);\n    if (siga) {\n      <span class=\"supfact\">sa</span> = &sigact_table[siga - Number];\n      <span class=\"supfact\">handler</span> = <span class=\"supfact\">sa</span>->_sa_handler;\n    } else {\n      <span class=\"supfact\">sa</span> = Number L;\n      <span class=\"supfact\">handler</span> = Number L;\n    }\n    if (<span class=\"supfact\">handler</span>) {\n      if (<span class=\"supfact\">handler</span> != Number) {\n        if (<span class=\"supfact\">handler</span> == Number)\n          force_sig(siga);\n        target_to_host_sigset(&<span class=\"supfact\">set</span>,\n                              &<span class=\"supfact\">sa</span>->sa_mask);\n        if ((<span class=\"supfact\">sa</span>->sa_flags & Number) == Number) {\n          v2 = target_to_host_signal(siga);\n          sigaddset(&<span class=\"supfact\">set</span>, v2);\n        }\n        sigprocmask(Number, &<span class=\"supfact\">set</span>, &<span class=\"supfact\">old_set</span>);\n        host_to_target_sigset_internal(&<span class=\"supfact\">target_old_set</span>,\n                                       &<span class=\"supfact\">old_set</span>);\n        if ((<span class=\"supfact\">sa</span>->sa_flags & Number) != Number)\n          setup_rt_frame(siga, <span class=\"supfact\">sa</span>, &<span class=\"supfact\">q</span>->info,\n                         &<span class=\"supfact\">target_old_set</span>, cpu_env);\n        else\n          setup_frame(siga, <span class=\"supfact\">sa</span>, &<span class=\"supfact\">target_old_set</span>,\n                      cpu_env);\n        if ((<span class=\"supfact\">sa</span>->sa_flags & Number) != Number)\n          <span class=\"supfact\">sa</span>->_sa_handler = Number L;\n      }\n    } else if (siga == Number || siga == Number || siga == Number) {\n      v1 = getpid();\n      kill(v1, Number);\n    } else if (siga != Number && siga != Number && siga != Number &&\n               siga != Number) {\n      force_sig(siga);\n    }\n    if (<span class=\"supfact\">q</span> != &<span class=\"supfact\">k</span>->info)\n      free_sigqueue(cpu_env, <span class=\"supfact\">q</span>);\n  }\n}", "var": [{"name": "oset", "type": "struct sigset_t { unsigned __int64[16] __val; }", "ref_name": "old_set", "ref_type": "struct sigset_t { unsigned __int64[16] __val; }"}, {"name": "set", "type": "struct sigset_t { unsigned __int64[16] __val; }", "ref_name": "set", "ref_type": "struct sigset_t { unsigned __int64[16] __val; }"}, {"name": "v11", "type": "struct target_sigset_t { abi_ulong[2] sig; }", "ref_name": "target_old_set", "ref_type": "struct target_sigset_t { abi_ulong[1] sig; }"}], "body_in_train": false}, {"repo_owner": "tzanussi", "repo_name": "linux-yocto-micro-3.14", "path": "tzanussi/linux-yocto-micro-3.14/161109f092e497a94a828b66cbda63a02c31d6f2b8065f31d315da24f4a8bb9c", "path_in_repo": "tzanussi/linux-yocto-micro-3.14/tools/perf/builtin-sched.o", "objdump": "0000000000000e00 <get_cpu_usage_nsec_parent>:\n     e00:\t55                   \tpush   %rbp\n     e01:\t48 89 e5             \tmov    %rsp,%rbp\n     e04:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n     e0b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     e12:\t00 00 \n     e14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     e18:\t31 c0                \txor    %eax,%eax\n     e1a:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n     e21:\t48 89 c6             \tmov    %rax,%rsi\n     e24:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     e29:\te8 00 00 00 00       \tcallq  e2e <get_cpu_usage_nsec_parent+0x2e>\n     e2e:\t89 85 54 ff ff ff    \tmov    %eax,-0xac(%rbp)\n     e34:\t83 bd 54 ff ff ff 00 \tcmpl   $0x0,-0xac(%rbp)\n     e3b:\t74 19                \tje     e56 <get_cpu_usage_nsec_parent+0x56>\n     e3d:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     e42:\tba a4 01 00 00       \tmov    $0x1a4,%edx\n     e47:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     e4c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     e51:\te8 00 00 00 00       \tcallq  e56 <get_cpu_usage_nsec_parent+0x56>\n     e56:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n     e5d:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n     e62:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # e6a <get_cpu_usage_nsec_parent+0x6a>\n     e69:\t00 \n     e6a:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n     e6e:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     e75:\tf2 48 0f 2a d0       \tcvtsi2sd %rax,%xmm2\n     e7a:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # e82 <get_cpu_usage_nsec_parent+0x82>\n     e81:\t00 \n     e82:\tf2 0f 59 c2          \tmulsd  %xmm2,%xmm0\n     e86:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     e8a:\t66 0f 2f 05 00 00 00 \tcomisd 0x0(%rip),%xmm0        # e92 <get_cpu_usage_nsec_parent+0x92>\n     e91:\t00 \n     e92:\t73 0e                \tjae    ea2 <get_cpu_usage_nsec_parent+0xa2>\n     e94:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n     e99:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     ea0:\teb 29                \tjmp    ecb <get_cpu_usage_nsec_parent+0xcb>\n     ea2:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # eaa <get_cpu_usage_nsec_parent+0xaa>\n     ea9:\t00 \n     eaa:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n     eae:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n     eb3:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     eba:\t48 b8 00 00 00 00 00 \tmovabs $0x8000000000000000,%rax\n     ec1:\t00 00 80 \n     ec4:\t48 31 85 58 ff ff ff \txor    %rax,-0xa8(%rbp)\n     ecb:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     ed2:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     ed9:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     ee0:\t48 85 c0             \ttest   %rax,%rax\n     ee3:\t78 07                \tjs     eec <get_cpu_usage_nsec_parent+0xec>\n     ee5:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n     eea:\teb 15                \tjmp    f01 <get_cpu_usage_nsec_parent+0x101>\n     eec:\t48 89 c2             \tmov    %rax,%rdx\n     eef:\t48 d1 ea             \tshr    %rdx\n     ef2:\t83 e0 01             \tand    $0x1,%eax\n     ef5:\t48 09 c2             \tor     %rax,%rdx\n     ef8:\tf2 48 0f 2a c2       \tcvtsi2sd %rdx,%xmm0\n     efd:\tf2 0f 58 c0          \taddsd  %xmm0,%xmm0\n     f01:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n     f08:\tf2 48 0f 2a d0       \tcvtsi2sd %rax,%xmm2\n     f0d:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # f15 <get_cpu_usage_nsec_parent+0x115>\n     f14:\t00 \n     f15:\tf2 0f 59 d1          \tmulsd  %xmm1,%xmm2\n     f19:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     f20:\tf2 48 0f 2a d8       \tcvtsi2sd %rax,%xmm3\n     f25:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # f2d <get_cpu_usage_nsec_parent+0x12d>\n     f2c:\t00 \n     f2d:\tf2 0f 59 cb          \tmulsd  %xmm3,%xmm1\n     f31:\tf2 0f 58 ca          \taddsd  %xmm2,%xmm1\n     f35:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     f39:\t66 0f 2f 05 00 00 00 \tcomisd 0x0(%rip),%xmm0        # f41 <get_cpu_usage_nsec_parent+0x141>\n     f40:\t00 \n     f41:\t73 0e                \tjae    f51 <get_cpu_usage_nsec_parent+0x151>\n     f43:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n     f48:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     f4f:\teb 29                \tjmp    f7a <get_cpu_usage_nsec_parent+0x17a>\n     f51:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # f59 <get_cpu_usage_nsec_parent+0x159>\n     f58:\t00 \n     f59:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n     f5d:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n     f62:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     f69:\t48 b8 00 00 00 00 00 \tmovabs $0x8000000000000000,%rax\n     f70:\t00 00 80 \n     f73:\t48 31 85 58 ff ff ff \txor    %rax,-0xa8(%rbp)\n     f7a:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     f81:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     f88:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     f8f:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     f93:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     f9a:\t00 00 \n     f9c:\t74 05                \tje     fa3 <get_cpu_usage_nsec_parent+0x1a3>\n     f9e:\te8 00 00 00 00       \tcallq  fa3 <get_cpu_usage_nsec_parent+0x1a3>\n     fa3:\tc9                   \tleaveq \n     fa4:\tc3                   \tretq   ", "code_s": "unsigned __int64 get_cpu_usage_nsec_parent() {\n  double v0;\n  double v1;\n  double v2;\n  unsigned __int64 v4;\n  unsigned __int64 v5;\n  struct rusage <span class=\"supfact\">usage</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (getrusage(RUSAGE_SELF, &<span class=\"supfact\">usage</span>))\n    _assert_fail(String, String, Number, String);\n  v0 = Number * (double)SLODWORD(<span class=\"supfact\">usage</span>.ru_utime.tv_usec) +\n       (double)SLODWORD(<span class=\"supfact\">usage</span>.ru_utime.tv_sec) * Number;\n  if (v0 >= Number)\n    v4 = (unsigned int)(int)(v0 - Number) ^ Number;\n  else\n    v4 = (unsigned int)(int)v0;\n  if ((v4 & Number) != Number L)\n    v1 = (double)(int)(v4 & Number | (v4 >> Number)) +\n         (double)(int)(v4 & Number | (v4 >> Number));\n  else\n    v1 = (double)(int)v4;\n  v2 = v1 + Number * (double)SLODWORD(<span class=\"supfact\">usage</span>.ru_stime.tv_usec) +\n       (double)SLODWORD(<span class=\"supfact\">usage</span>.ru_stime.tv_sec) * Number;\n  if (v2 >= Number)\n    v5 = (unsigned int)(int)(v2 - Number) ^ Number;\n  else\n    v5 = (unsigned int)(int)v2;\n  return v5;\n}", "code_t": "u64 __cdecl get_cpu_usage_nsec_parent() {\n  double v0;\n  double v1;\n  double v2;\n  unsigned __int64 sum;\n  unsigned __int64 suma;\n  rusage <span class=\"supfact\">ru</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (getrusage(RUSAGE_SELF, &<span class=\"supfact\">ru</span>))\n    _assert_fail(String, String, Number, String);\n  v0 = Number * (double)SLODWORD(<span class=\"supfact\">ru</span>.ru_utime.tv_usec) +\n       (double)SLODWORD(<span class=\"supfact\">ru</span>.ru_utime.tv_sec) * Number;\n  if (v0 >= Number)\n    sum = (unsigned int)(int)(v0 - Number) ^ Number;\n  else\n    sum = (unsigned int)(int)v0;\n  if ((sum & Number) != Number L)\n    v1 = (double)(int)(sum & Number | (sum >> Number)) +\n         (double)(int)(sum & Number | (sum >> Number));\n  else\n    v1 = (double)(int)sum;\n  v2 = v1 + Number * (double)SLODWORD(<span class=\"supfact\">ru</span>.ru_stime.tv_usec) +\n       (double)SLODWORD(<span class=\"supfact\">ru</span>.ru_stime.tv_sec) * Number;\n  if (v2 >= Number)\n    suma = (unsigned int)(int)(v2 - Number) ^ Number;\n  else\n    suma = (unsigned int)(int)v2;\n  return suma;\n}", "var": [{"name": "usage", "type": "struct rusage { timeval ru_utime; timeval ru_stime; $AFD12F2780B43E6FE38B6B9706ACAC3D _anon_0; $532CEF825D94AC2AB94F49F6475E130E _anon_1; $66A2DE23866A271B95BDDB0CFC621200 _anon_2; $D7B0DA7033B4A064E9B9FDDBD7C23927 _anon_3; $0724066DBCB20967A007E1922F93DD8D _anon_4; $E3ED6156413D9EFF7392FCF5D4C88B92 _anon_5; $CD16977EFB50B4747411BF78CDAEB1F3 _anon_6; $929FFA9E3E540B14A77DC71BC7A41B8C _anon_7; $FE38B77A86D08DEC2C74D6373E0C6416 _anon_8; $8CFCFFE5543F8A2FB5604D0E42418403 _anon_9; $3B84F6F9EECC4FA8F586A2BAC354D043 _anon_10; $229726AEB3C3CA3CA87656F9B9828FB0 _anon_11; $BFE386E9477C7E9875A5D4C107075383 _anon_12; $FA0D2E48EE8615A3C4A68D7252C48DF0 _anon_13; }", "ref_name": "ru", "ref_type": "struct rusage { timeval ru_utime; timeval ru_stime; $AFD12F2780B43E6FE38B6B9706ACAC3D _anon_0; $532CEF825D94AC2AB94F49F6475E130E _anon_1; $66A2DE23866A271B95BDDB0CFC621200 _anon_2; $D7B0DA7033B4A064E9B9FDDBD7C23927 _anon_3; $0724066DBCB20967A007E1922F93DD8D _anon_4; $E3ED6156413D9EFF7392FCF5D4C88B92 _anon_5; $CD16977EFB50B4747411BF78CDAEB1F3 _anon_6; $929FFA9E3E540B14A77DC71BC7A41B8C _anon_7; $FE38B77A86D08DEC2C74D6373E0C6416 _anon_8; $8CFCFFE5543F8A2FB5604D0E42418403 _anon_9; $3B84F6F9EECC4FA8F586A2BAC354D043 _anon_10; $229726AEB3C3CA3CA87656F9B9828FB0 _anon_11; $BFE386E9477C7E9875A5D4C107075383 _anon_12; $FA0D2E48EE8615A3C4A68D7252C48DF0 _anon_13; }"}], "body_in_train": true}, {"repo_owner": "bpillon", "repo_name": "android-ffmpeg-wrapper", "path": "bpillon/android-ffmpeg-wrapper/5098de8d23af4c1e067a1f88f120eeb9479c0bd4b977a5ac054e29dbe4644444", "path_in_repo": "bpillon/android-ffmpeg-wrapper/jni/ffmpeg/libavformat/wvdec.o", "objdump": "0000000000000bef <wv_read_seek>:\n bef:\t48 81 ec c8 00 00 00 \tsub    $0xc8,%rsp\n bf6:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n bfb:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n bff:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n c04:\t89 4c 24 10          \tmov    %ecx,0x10(%rsp)\n c08:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n c0d:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n c11:\t8b 54 24 14          \tmov    0x14(%rsp),%edx\n c15:\t48 63 d2             \tmovslq %edx,%rdx\n c18:\t48 c1 e2 03          \tshl    $0x3,%rdx\n c1c:\t48 01 d0             \tadd    %rdx,%rax\n c1f:\t48 8b 00             \tmov    (%rax),%rax\n c22:\t48 89 84 24 b8 00 00 \tmov    %rax,0xb8(%rsp)\n c29:\t00 \n c2a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n c2f:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n c33:\t48 89 84 24 b0 00 00 \tmov    %rax,0xb0(%rsp)\n c3a:\t00 \n c3b:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n c40:\t48 89 84 24 a8 00 00 \tmov    %rax,0xa8(%rsp)\n c47:\t00 \n c48:\t8b 54 24 10          \tmov    0x10(%rsp),%edx\n c4c:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n c51:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n c58:\t00 \n c59:\t48 89 ce             \tmov    %rcx,%rsi\n c5c:\t48 89 c7             \tmov    %rax,%rdi\n c5f:\te8 00 00 00 00       \tcallq  c64 <wv_read_seek+0x75>\n c64:\t89 84 24 a4 00 00 00 \tmov    %eax,0xa4(%rsp)\n c6b:\t83 bc 24 a4 00 00 00 \tcmpl   $0x0,0xa4(%rsp)\n c72:\t00 \n c73:\t0f 88 9d 00 00 00    \tjs     d16 <wv_read_seek+0x127>\n c79:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n c80:\t00 \n c81:\t48 8b 88 d0 01 00 00 \tmov    0x1d0(%rax),%rcx\n c88:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n c8f:\t00 \n c90:\t8b 80 d8 01 00 00    \tmov    0x1d8(%rax),%eax\n c96:\t48 63 d0             \tmovslq %eax,%rdx\n c99:\t48 89 d0             \tmov    %rdx,%rax\n c9c:\t48 01 c0             \tadd    %rax,%rax\n c9f:\t48 01 d0             \tadd    %rdx,%rax\n ca2:\t48 c1 e0 03          \tshl    $0x3,%rax\n ca6:\t48 83 e8 18          \tsub    $0x18,%rax\n caa:\t48 01 c8             \tadd    %rcx,%rax\n cad:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n cb1:\t48 39 44 24 08       \tcmp    %rax,0x8(%rsp)\n cb6:\t7f 5e                \tjg     d16 <wv_read_seek+0x127>\n cb8:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n cbf:\t00 \n cc0:\tc7 40 58 01 00 00 00 \tmovl   $0x1,0x58(%rax)\n cc7:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n cce:\t00 \n ccf:\t48 8b 88 d0 01 00 00 \tmov    0x1d0(%rax),%rcx\n cd6:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n cdd:\t48 63 d0             \tmovslq %eax,%rdx\n ce0:\t48 89 d0             \tmov    %rdx,%rax\n ce3:\t48 01 c0             \tadd    %rax,%rax\n ce6:\t48 01 d0             \tadd    %rdx,%rax\n ce9:\t48 c1 e0 03          \tshl    $0x3,%rax\n ced:\t48 01 c8             \tadd    %rcx,%rax\n cf0:\t48 8b 08             \tmov    (%rax),%rcx\n cf3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n cf8:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n cfc:\tba 00 00 00 00       \tmov    $0x0,%edx\n d01:\t48 89 ce             \tmov    %rcx,%rsi\n d04:\t48 89 c7             \tmov    %rax,%rdi\n d07:\te8 00 00 00 00       \tcallq  d0c <wv_read_seek+0x11d>\n d0c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n d11:\te9 e7 00 00 00       \tjmpq   dfd <wv_read_seek+0x20e>\n d16:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n d1c:\t78 13                \tjs     d31 <wv_read_seek+0x142>\n d1e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n d23:\t48 8b 80 40 04 00 00 \tmov    0x440(%rax),%rax\n d2a:\t48 39 44 24 08       \tcmp    %rax,0x8(%rsp)\n d2f:\t7c 0a                \tjl     d3b <wv_read_seek+0x14c>\n d31:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n d36:\te9 c2 00 00 00       \tjmpq   dfd <wv_read_seek+0x20e>\n d3b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n d40:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n d44:\t48 89 84 24 80 00 00 \tmov    %rax,0x80(%rsp)\n d4b:\t00 \n d4c:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n d53:\t00 \n d54:\tba 01 00 00 00       \tmov    $0x1,%edx\n d59:\tbe 00 00 00 00       \tmov    $0x0,%esi\n d5e:\t48 89 c7             \tmov    %rax,%rdi\n d61:\te8 00 00 00 00       \tcallq  d66 <wv_read_seek+0x177>\n d66:\t48 89 84 24 98 00 00 \tmov    %rax,0x98(%rsp)\n d6d:\t00 \n d6e:\t48 8b 94 24 a8 00 00 \tmov    0xa8(%rsp),%rdx\n d75:\t00 \n d76:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n d7b:\t48 89 d6             \tmov    %rdx,%rsi\n d7e:\t48 89 c7             \tmov    %rax,%rdi\n d81:\te8 00 00 00 00       \tcallq  d86 <wv_read_seek+0x197>\n d86:\t89 84 24 94 00 00 00 \tmov    %eax,0x94(%rsp)\n d8d:\t83 bc 24 94 00 00 00 \tcmpl   $0x0,0x94(%rsp)\n d94:\t00 \n d95:\t79 2a                \tjns    dc1 <wv_read_seek+0x1d2>\n d97:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n d9c:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n da0:\t48 8b 8c 24 98 00 00 \tmov    0x98(%rsp),%rcx\n da7:\t00 \n da8:\tba 00 00 00 00       \tmov    $0x0,%edx\n dad:\t48 89 ce             \tmov    %rcx,%rsi\n db0:\t48 89 c7             \tmov    %rax,%rdi\n db3:\te8 00 00 00 00       \tcallq  db8 <wv_read_seek+0x1c9>\n db8:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n dbf:\teb 3c                \tjmp    dfd <wv_read_seek+0x20e>\n dc1:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n dc8:\t00 \n dc9:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n dcd:\t48 89 84 24 88 00 00 \tmov    %rax,0x88(%rsp)\n dd4:\t00 \n dd5:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n ddc:\t00 \n ddd:\t48 89 c7             \tmov    %rax,%rdi\n de0:\te8 00 00 00 00       \tcallq  de5 <wv_read_seek+0x1f6>\n de5:\t48 8b 84 24 88 00 00 \tmov    0x88(%rsp),%rax\n dec:\t00 \n ded:\t48 3b 44 24 08       \tcmp    0x8(%rsp),%rax\n df2:\t0f 8c 76 ff ff ff    \tjl     d6e <wv_read_seek+0x17f>\n df8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n dfd:\t48 81 c4 c8 00 00 00 \tadd    $0xc8,%rsp\n e04:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall wv_read_seek(_QWORD *a1, int a2, __int64 a3,\n                                unsigned int a4) {\n  __int64 result;\n  char <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  char *<span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v14</span> = *(_QWORD *)(Number L * a2 + a1[Number]);\n  <span class=\"supfact\">v13</span> = a1[Number];\n  <span class=\"supfact\">v12</span> = &<span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v11</span> = av_index_search_timestamp(<span class=\"supfact\">v14</span>, a3, a4);\n  if (<span class=\"supfact\">v11</span> < Number ||\n      a3 > *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v14</span> + Number) +\n                       Number L * *(int *)(<span class=\"supfact\">v14</span> + Number) -\n                       Number + Number)) {\n    if (a3 >= Number && a3 < a1[Number]) {\n      <span class=\"supfact\">v7</span> = a1[Number];\n      <span class=\"supfact\">v10</span> = avio_seek(<span class=\"supfact\">v7</span>, Number L, Number L);\n      do {\n        <span class=\"supfact\">v9</span> = av_read_frame(a1, <span class=\"supfact\">v12</span>);\n        if ((<span class=\"supfact\">v9</span> & Number) != Number) {\n          avio_seek(a1[Number], <span class=\"supfact\">v10</span>, Number L);\n          return <span class=\"supfact\">v9</span>;\n        }\n        <span class=\"supfact\">v8</span> = *((_QWORD *)<span class=\"supfact\">v12</span> + Number);\n        av_free_packet(<span class=\"supfact\">v12</span>);\n      } while (<span class=\"supfact\">v8</span> < a3);\n      result = Number L;\n    } else {\n      result = Number L;\n    }\n  } else {\n    *(_DWORD *)(<span class=\"supfact\">v13</span> + Number) = Number;\n    avio_seek(a1[Number],\n              *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v14</span> + Number) +\n                          Number L * <span class=\"supfact\">v11</span>),\n              Number L);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl wv_read_seek(AVFormatContext_0 *s, int stream_index,\n                         int64_t timestamp, int flags) {\n  int result;\n  AVPacket_0 <span class=\"supfact\">pkt1</span>;\n  AVIOContext_0 *<span class=\"supfact\">v7</span>;\n  int64_t <span class=\"supfact\">pts</span>;\n  int <span class=\"supfact\">ret</span>;\n  int64_t <span class=\"supfact\">pos</span>;\n  int <span class=\"supfact\">index</span>;\n  AVPacket_0 *<span class=\"supfact\">pkt</span>;\n  WVContext *<span class=\"supfact\">wc</span>;\n  AVStream_0 *<span class=\"supfact\">st</span>;\n  <span class=\"supfact\">st</span> = s->streams[stream_index];\n  <span class=\"supfact\">wc</span> = (WVContext *)s->priv_data;\n  <span class=\"supfact\">pkt</span> = &<span class=\"supfact\">pkt1</span>;\n  <span class=\"supfact\">index</span> = av_index_search_timestamp(\n      <span class=\"supfact\">st</span>, timestamp, (unsigned int)flags);\n  if (<span class=\"supfact\">index</span> < Number ||\n      timestamp >\n          <span class=\"supfact\">st</span>\n              ->index_entries[<span class=\"supfact\">st</span>->nb_index_entries - Number]\n              .timestamp) {\n    if (timestamp >= Number && timestamp < s->duration) {\n      <span class=\"supfact\">v7</span> = s->pb;\n      <span class=\"supfact\">pos</span> = avio_seek(<span class=\"supfact\">v7</span>, Number L, Number L);\n      do {\n        <span class=\"supfact\">ret</span> = av_read_frame(s, <span class=\"supfact\">pkt</span>);\n        if (<span class=\"supfact\">ret</span> < Number) {\n          avio_seek(s->pb, <span class=\"supfact\">pos</span>, Number L);\n          return <span class=\"supfact\">ret</span>;\n        }\n        <span class=\"supfact\">pts</span> = <span class=\"supfact\">pkt</span>-><span class=\"supfact\">pts</span>;\n        av_free_packet(<span class=\"supfact\">pkt</span>);\n      } while (<span class=\"supfact\">pts</span> < timestamp);\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else {\n    <span class=\"supfact\">wc</span>->block_parsed = Number;\n    avio_seek(s->pb,\n              <span class=\"supfact\">st</span>->index_entries[<span class=\"supfact\">index</span>]\n                  .<span class=\"supfact\">pos</span>,\n              Number L);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "struct AVPacket_0 { int64_t pts; int64_t dts; uint8_t * data; int size; int stream_index; int flags; int duration; void (*)(AVPacket *) destruct; void * priv; int64_t pos; int64_t convergence_duration; }", "ref_name": "pkt1", "ref_type": "struct AVPacket_0 { AVBufferRef_0 * buf; int64_t pts; int64_t dts; uint8_t * data; int size; int stream_index; int flags; PADDING (4); AVPacketSideData_0 * side_data; int side_data_elems; int duration; void (*)(AVPacket *) destruct; void * priv; int64_t pos; int64_t convergence_duration; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d961f6bc761fa8fe561f8484f009dcf34d6d3887c0086cfd39f3f61b8516b5ee", "path_in_repo": "XanClic/qemu//xtensa-softmmu/hw/vfio/common.o", "objdump": "000000000000062e <_nocheck__trace_vfio_region_read>:\n     62e:\t55                   \tpush   %rbp\n     62f:\t48 89 e5             \tmov    %rsp,%rbp\n     632:\t41 54                \tpush   %r12\n     634:\t53                   \tpush   %rbx\n     635:\t48 83 ec 40          \tsub    $0x40,%rsp\n     639:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     63d:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n     640:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     644:\t89 4d c0             \tmov    %ecx,-0x40(%rbp)\n     647:\t4c 89 45 b0          \tmov    %r8,-0x50(%rbp)\n     64b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     652:\t00 00 \n     654:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     658:\t31 c0                \txor    %eax,%eax\n     65a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 660 <_nocheck__trace_vfio_region_read+0x32>\n     660:\t85 c0                \ttest   %eax,%eax\n     662:\t0f 95 c0             \tsetne  %al\n     665:\t0f b6 c0             \tmovzbl %al,%eax\n     668:\t48 85 c0             \ttest   %rax,%rax\n     66b:\t74 76                \tje     6e3 <_nocheck__trace_vfio_region_read+0xb5>\n     66d:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 674 <_nocheck__trace_vfio_region_read+0x46>\n     674:\t66 85 c0             \ttest   %ax,%ax\n     677:\t74 6a                \tje     6e3 <_nocheck__trace_vfio_region_read+0xb5>\n     679:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     67e:\te8 85 fe ff ff       \tcallq  508 <qemu_loglevel_mask>\n     683:\t84 c0                \ttest   %al,%al\n     685:\t74 5c                \tje     6e3 <_nocheck__trace_vfio_region_read+0xb5>\n     687:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     68b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     690:\t48 89 c7             \tmov    %rax,%rdi\n     693:\te8 00 00 00 00       \tcallq  698 <_nocheck__trace_vfio_region_read+0x6a>\n     698:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     69c:\t49 89 c4             \tmov    %rax,%r12\n     69f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     6a3:\t48 89 c3             \tmov    %rax,%rbx\n     6a6:\te8 00 00 00 00       \tcallq  6ab <_nocheck__trace_vfio_region_read+0x7d>\n     6ab:\t89 c6                \tmov    %eax,%esi\n     6ad:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n     6b0:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     6b4:\t48 83 ec 08          \tsub    $0x8,%rsp\n     6b8:\tff 75 b0             \tpushq  -0x50(%rbp)\n     6bb:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     6be:\t50                   \tpush   %rax\n     6bf:\tff 75 b8             \tpushq  -0x48(%rbp)\n     6c2:\t41 89 c9             \tmov    %ecx,%r9d\n     6c5:\t49 89 d0             \tmov    %rdx,%r8\n     6c8:\t4c 89 e1             \tmov    %r12,%rcx\n     6cb:\t48 89 da             \tmov    %rbx,%rdx\n     6ce:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6d5 <_nocheck__trace_vfio_region_read+0xa7>\n     6d5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6da:\te8 00 00 00 00       \tcallq  6df <_nocheck__trace_vfio_region_read+0xb1>\n     6df:\t48 83 c4 20          \tadd    $0x20,%rsp\n     6e3:\t90                   \tnop\n     6e4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     6e8:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     6ef:\t00 00 \n     6f1:\t74 05                \tje     6f8 <_nocheck__trace_vfio_region_read+0xca>\n     6f3:\te8 00 00 00 00       \tcallq  6f8 <_nocheck__trace_vfio_region_read+0xca>\n     6f8:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     6fc:\t5b                   \tpop    %rbx\n     6fd:\t41 5c                \tpop    %r12\n     6ff:\t5d                   \tpop    %rbp\n     700:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_vfio_region_read(\n    const char *a1, unsigned int a2, __int64 a3, unsigned int a4, __int64 a5) {\n  __suseconds_t v5;\n  __time_t v6;\n  unsigned int v7;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v13</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VFIO_REGION_READ_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v5 = <span class=\"supfact\">tv</span>.tv_usec;\n    v6 = <span class=\"supfact\">tv</span>.tv_sec;\n    v7 = qemu_get_thread_id();\n    qemu_log(String, v7, v6, v5, a1, a2, a3, a4, a5);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v13</span>;\n}", "code_t": "void __cdecl nocheck__trace_vfio_region_read(char *name, int index,\n                                             uint64_t addr, unsigned int size,\n                                             uint64_t data) {\n  __suseconds_t v5;\n  __time_t v6;\n  unsigned int v7;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VFIO_REGION_READ_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v5 = <span class=\"supfact\">_now</span>.tv_usec;\n    v6 = <span class=\"supfact\">_now</span>.tv_sec;\n    v7 = qemu_get_thread_id();\n    qemu_log(String, v7, v6, v5, name, (unsigned int)index, addr, size, data);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "hach-que", "repo_name": "roket3d", "path": "hach-que/roket3d/0e501c8c04a9fcae4d5cd4a98e25d9216e2d00a27716ac7834a526d078998f7f", "path_in_repo": "hach-que/roket3d/IDE.NET/Dependencies/Irrlicht.NET CP/Irrlicht SDK/source/Irrlicht/CSphereSceneNode.o", "objdump": "0000000000000000 <_ZN3irr4core4listIPNS_5scene10ISceneNodeEE5beginEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  14:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  18:\t48 89 d6             \tmov    %rdx,%rsi\n  1b:\t48 89 c7             \tmov    %rax,%rdi\n  1e:\te8 00 00 00 00       \tcallq  23 <_ZN3irr4core4listIPNS_5scene10ISceneNodeEE5beginEv+0x23>\n  23:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  27:\tc9                   \tleaveq \n  28:\tc3                   \tretq   ", "code_s": "__int64 __fastcall irr core list<irr scene ISceneNode *> begin(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  irr core list<irr scene ISceneNode *> Iterator Iterator(\n      &<span class=\"supfact\">v2</span>, *(_QWORD *)(a1 + Number));\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "irr core list<irr scene ISceneNode *> Iterator __cdecl irr\n    core list<irr scene ISceneNode *>\n    begin(irr core list<irr scene ISceneNode *> *const this) {\n  irr core list<irr scene ISceneNode *> Iterator <span class=\"supfact\">v2</span>;\n  irr core list<irr scene ISceneNode *> Iterator Iterator(&<span class=\"supfact\">v2</span>,\n                                                          this->First);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "struct irr::core::list<irr::scene::ISceneNode*>::Iterator { irr::core::list<irr::scene::ISceneNode*>::SKListNode * Current; }", "ref_name": "v2", "ref_type": "struct irr::core::list<irr::scene::ISceneNode*>::Iterator { irr::core::list<irr::scene::ISceneNode*>::SKListNode * Current; }"}], "body_in_train": true}, {"repo_owner": "DIYBookScanner", "repo_name": "chdk", "path": "DIYBookScanner/chdk/57034d64aae7ab741f85de20f66efe71fb4a18a6f256a7039364fc73ce0a0af1", "path_in_repo": "DIYBookScanner/chdk/chdk/tools/hostlua/luac", "objdump": "000000000040e66e <exp1>:\n  40e66e:\t55                   \tpush   %rbp\n  40e66f:\t48 89 e5             \tmov    %rsp,%rbp\n  40e672:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40e676:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  40e67a:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  40e67e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40e682:\t48 89 d6             \tmov    %rdx,%rsi\n  40e685:\t48 89 c7             \tmov    %rax,%rdi\n  40e688:\te8 5b f9 ff ff       \tcallq  40dfe8 <expr>\n  40e68d:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  40e690:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40e693:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40e697:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40e69b:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  40e69f:\t48 89 d6             \tmov    %rdx,%rsi\n  40e6a2:\t48 89 c7             \tmov    %rax,%rdi\n  40e6a5:\te8 25 a0 00 00       \tcallq  4186cf <luaK_exp2nextreg>\n  40e6aa:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40e6ad:\tc9                   \tleaveq \n  40e6ae:\tc3                   \tretq   ", "code_s": "__int64 __fastcall exp1(__int64 a1) {\n  int <span class=\"supfact\">v2</span>[Number];\n  unsigned int <span class=\"supfact\">v3</span>;\n  expr(a1, <span class=\"supfact\">v2</span>);\n  <span class=\"supfact\">v3</span> = <span class=\"supfact\">v2</span>[Number];\n  luaK_exp2nextreg(*(_QWORD *)(a1 + Number), <span class=\"supfact\">v2</span>);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "int __cdecl exp1(LexState_0 *ls) {\n  expdesc_0 <span class=\"supfact\">e</span>;\n  int <span class=\"supfact\">k</span>;\n  expr(ls, &<span class=\"supfact\">e</span>);\n  <span class=\"supfact\">k</span> = <span class=\"supfact\">e</span>.<span class=\"supfact\">k</span>;\n  luaK_exp2nextreg(ls->fs, &<span class=\"supfact\">e</span>);\n  return <span class=\"supfact\">k</span>;\n}", "var": [{"name": "v2", "type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }", "ref_name": "e", "ref_type": "struct expdesc_0 { expkind k; $5BA6F72E8A9EEF47E0D1075AC140BF3A u; int t; int f; }"}], "body_in_train": true}, {"repo_owner": "UgoLi", "repo_name": "freeswitch_1.9", "path": "UgoLi/freeswitch_1.9/d1ccf4232326e8c626197357773aea34fe047302d38f466697723e4799059afa", "path_in_repo": "UgoLi/freeswitch_1.9/freeswitch_src/libs/xmlrpc-c/src/cpp/client.osh", "objdump": "0000000000002eee <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE>:\n    2eee:\t55                   \tpush   %rbp\n    2eef:\t48 89 e5             \tmov    %rsp,%rbp\n    2ef2:\t53                   \tpush   %rbx\n    2ef3:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n    2efa:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    2efe:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n    2f02:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    2f09:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n    2f10:\t4c 89 85 68 ff ff ff \tmov    %r8,-0x98(%rbp)\n    2f17:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    2f1b:\t48 89 c7             \tmov    %rax,%rdi\n    2f1e:\te8 00 00 00 00       \tcallq  2f23 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x35>\n    2f23:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    2f27:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    2f2b:\t8b 50 10             \tmov    0x10(%rax),%edx\n    2f2e:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    2f32:\t48 8b b5 70 ff ff ff \tmov    -0x90(%rbp),%rsi\n    2f39:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    2f40:\t48 89 c7             \tmov    %rax,%rdi\n    2f43:\te8 00 00 00 00       \tcallq  2f48 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x5a>\n    2f48:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n    2f4c:\t48 89 c7             \tmov    %rax,%rdi\n    2f4f:\te8 00 00 00 00       \tcallq  2f54 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x66>\n    2f54:\t48 8d 55 ef          \tlea    -0x11(%rbp),%rdx\n    2f58:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    2f5c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2f63 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x75>\n    2f63:\t48 89 c7             \tmov    %rax,%rdi\n    2f66:\te8 00 00 00 00       \tcallq  2f6b <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x7d>\n    2f6b:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n    2f6f:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    2f73:\t48 89 d6             \tmov    %rdx,%rsi\n    2f76:\t48 89 c7             \tmov    %rax,%rdi\n    2f79:\te8 00 00 00 00       \tcallq  2f7e <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x90>\n    2f7e:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    2f82:\t48 89 c7             \tmov    %rax,%rdi\n    2f85:\te8 00 00 00 00       \tcallq  2f8a <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x9c>\n    2f8a:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n    2f8e:\t48 89 c7             \tmov    %rax,%rdi\n    2f91:\te8 00 00 00 00       \tcallq  2f96 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0xa8>\n    2f96:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n    2f9d:\t48 8d 45 98          \tlea    -0x68(%rbp),%rax\n    2fa1:\t48 89 d6             \tmov    %rdx,%rsi\n    2fa4:\t48 89 c7             \tmov    %rax,%rdi\n    2fa7:\te8 00 00 00 00       \tcallq  2fac <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0xbe>\n    2fac:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    2fb0:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    2fb4:\t48 8b 00             \tmov    (%rax),%rax\n    2fb7:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    2fbb:\t48 8b 52 38          \tmov    0x38(%rdx),%rdx\n    2fbf:\t48 8b 12             \tmov    (%rdx),%rdx\n    2fc2:\t48 8b 12             \tmov    (%rdx),%rdx\n    2fc5:\t48 83 c2 18          \tadd    $0x18,%rdx\n    2fc9:\t4c 8b 02             \tmov    (%rdx),%r8\n    2fcc:\t48 8d 4d 98          \tlea    -0x68(%rbp),%rcx\n    2fd0:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n    2fd4:\t48 8b 75 80          \tmov    -0x80(%rbp),%rsi\n    2fd8:\t48 89 c7             \tmov    %rax,%rdi\n    2fdb:\t41 ff d0             \tcallq  *%r8\n    2fde:\t48 8d 45 98          \tlea    -0x68(%rbp),%rax\n    2fe2:\t48 89 c7             \tmov    %rax,%rdi\n    2fe5:\te8 00 00 00 00       \tcallq  2fea <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0xfc>\n    2fea:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    2fee:\t48 89 c7             \tmov    %rax,%rdi\n    2ff1:\te8 00 00 00 00       \tcallq  2ff6 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x108>\n    2ff6:\teb 4d                \tjmp    3045 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x157>\n    2ff8:\t48 89 c3             \tmov    %rax,%rbx\n    2ffb:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    2fff:\t48 89 c7             \tmov    %rax,%rdi\n    3002:\te8 00 00 00 00       \tcallq  3007 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x119>\n    3007:\teb 03                \tjmp    300c <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x11e>\n    3009:\t48 89 c3             \tmov    %rax,%rbx\n    300c:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n    3010:\t48 89 c7             \tmov    %rax,%rdi\n    3013:\te8 00 00 00 00       \tcallq  3018 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x12a>\n    3018:\teb 14                \tjmp    302e <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x140>\n    301a:\t48 89 c3             \tmov    %rax,%rbx\n    301d:\t48 8d 45 98          \tlea    -0x68(%rbp),%rax\n    3021:\t48 89 c7             \tmov    %rax,%rdi\n    3024:\te8 00 00 00 00       \tcallq  3029 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x13b>\n    3029:\teb 03                \tjmp    302e <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x140>\n    302b:\t48 89 c3             \tmov    %rax,%rbx\n    302e:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    3032:\t48 89 c7             \tmov    %rax,%rdi\n    3035:\te8 00 00 00 00       \tcallq  303a <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x14c>\n    303a:\t48 89 d8             \tmov    %rbx,%rax\n    303d:\t48 89 c7             \tmov    %rax,%rdi\n    3040:\te8 00 00 00 00       \tcallq  3045 <_ZN8xmlrpc_c10client_xml5startEPNS_12carriageParmERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9paramListERKNS_20clientTransactionPtrE+0x157>\n    3045:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n    304c:\t5b                   \tpop    %rbx\n    304d:\t5d                   \tpop    %rbp\n    304e:\tc3                   \tretq   \n    304f:\t90                   \tnop", "code_s": "__int64 __fastcall xmlrpc_c client_xml\nstart(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n      const xmlrpc_c clientTransactionPtr *a5) {\n  char <span class=\"supfact\">v9</span>[Number];\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>[Number];\n  char <span class=\"supfact\">v12</span>[Number];\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v10</span>);\n  xmlrpc_c xml generateCall(\n      a3, a4, *(unsigned int *)(*(_QWORD *)(a1 + Number) + Number L),\n      <span class=\"supfact\">v10</span>);\n  std allocator<char> allocator(<span class=\"supfact\">v12</span>, a4);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v11</span>, String, <span class=\"supfact\">v12</span>);\n  xmlrpc_c xml trace(<span class=\"supfact\">v11</span>, <span class=\"supfact\">v10</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v11</span>);\n  std allocator<char> ~allocator(<span class=\"supfact\">v12</span>);\n  xmlrpc_c xmlTransaction_clientPtr xmlTransaction_clientPtr(\n      (xmlrpc_c xmlTransaction_clientPtr *)<span class=\"supfact\">v9</span>, a5);\n  (*(void(__fastcall **)(_QWORD, __int64, char *, char *))(\n      ***(_QWORD ***)(a1 + Number) + Number L))(\n      **(_QWORD **)(a1 + Number), a2, <span class=\"supfact\">v10</span>, <span class=\"supfact\">v9</span>);\n  xmlrpc_c xmlTransaction_clientPtr ~xmlTransaction_clientPtr(\n      (xmlrpc_c xmlTransaction_clientPtr *)<span class=\"supfact\">v9</span>);\n  return std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v10</span>);\n}", "code_t": "void __cdecl xmlrpc_c client_xml start(\n    xmlrpc_c client_xml *const this, xmlrpc_c carriageParm *const carriageParmP,\n    const std string *methodName, const xmlrpc_c paramList *paramList,\n    const xmlrpc_c clientTransactionPtr *tranP) {\n  xmlrpc_c xmlTransaction_clientPtr <span class=\"supfact\">xmlTranP</span>;\n  std string <span class=\"supfact\">callXml</span>;\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>[Number];\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(&<span class=\"supfact\">callXml</span>);\n  xmlrpc_c xml generateCall(methodName, paramList,\n                            (unsigned int)this->implP->dialect,\n                            &<span class=\"supfact\">callXml</span>);\n  std allocator<char> allocator(<span class=\"supfact\">v11</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v10</span>, String, <span class=\"supfact\">v11</span>);\n  xmlrpc_c xml trace(<span class=\"supfact\">v10</span>, &<span class=\"supfact\">callXml</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v10</span>);\n  std allocator<char> ~allocator(<span class=\"supfact\">v11</span>);\n  xmlrpc_c xmlTransaction_clientPtr xmlTransaction_clientPtr(\n      &<span class=\"supfact\">xmlTranP</span>, tranP);\n  (*(void(__fastcall **)(xmlrpc_c clientXmlTransport *,\n                         xmlrpc_c carriageParm *const, std string *,\n                         xmlrpc_c xmlTransaction_clientPtr *))(\n      *(_QWORD *)this->implP->transportP + Number L))(\n      this->implP->transportP, carriageParmP, &<span class=\"supfact\">callXml</span>,\n      &<span class=\"supfact\">xmlTranP</span>);\n  xmlrpc_c xmlTransaction_clientPtr ~xmlTransaction_clientPtr(\n      &<span class=\"supfact\">xmlTranP</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">callXml</span>);\n}", "var": [{"name": "v10", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "callXml", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/4a0bdc8f003682ab5c7a3c0a5c9b700f487b7028dbd0c77ebe0fbc2d78f678f9", "path_in_repo": "XanClic/qemu//aarch64-softmmu/gdbstub.o", "objdump": "0000000000006a71 <gdbserver_start>:\n    6a71:\t55                   \tpush   %rbp\n    6a72:\t48 89 e5             \tmov    %rsp,%rbp\n    6a75:\t48 81 ec 60 01 00 00 \tsub    $0x160,%rsp\n    6a7c:\t48 89 bd a8 fe ff ff \tmov    %rdi,-0x158(%rbp)\n    6a83:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    6a8a:\t00 00 \n    6a8c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    6a90:\t31 c0                \txor    %eax,%eax\n    6a92:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    6a99:\t48 89 c7             \tmov    %rax,%rdi\n    6a9c:\te8 83 96 ff ff       \tcallq  124 <trace_gdbstub_op_start>\n    6aa1:\t48 c7 85 c0 fe ff ff \tmovq   $0x0,-0x140(%rbp)\n    6aa8:\t00 00 00 00 \n    6aac:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6ab3 <gdbserver_start+0x42>\n    6ab3:\t48 89 85 b0 fe ff ff \tmov    %rax,-0x150(%rbp)\n    6aba:\t48 8b 85 b0 fe ff ff \tmov    -0x150(%rbp),%rax\n    6ac1:\t48 85 c0             \ttest   %rax,%rax\n    6ac4:\t75 1b                \tjne    6ae1 <gdbserver_start+0x70>\n    6ac6:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6acd <gdbserver_start+0x5c>\n    6acd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6ad2:\te8 00 00 00 00       \tcallq  6ad7 <gdbserver_start+0x66>\n    6ad7:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    6adc:\te9 d9 02 00 00       \tjmpq   6dba <gdbserver_start+0x349>\n    6ae1:\t48 83 bd a8 fe ff ff \tcmpq   $0x0,-0x158(%rbp)\n    6ae8:\t00 \n    6ae9:\t75 0a                \tjne    6af5 <gdbserver_start+0x84>\n    6aeb:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    6af0:\te9 c5 02 00 00       \tjmpq   6dba <gdbserver_start+0x349>\n    6af5:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    6afc:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6b03 <gdbserver_start+0x92>\n    6b03:\t48 89 c7             \tmov    %rax,%rdi\n    6b06:\te8 00 00 00 00       \tcallq  6b0b <gdbserver_start+0x9a>\n    6b0b:\t85 c0                \ttest   %eax,%eax\n    6b0d:\t0f 84 ee 00 00 00    \tje     6c01 <gdbserver_start+0x190>\n    6b13:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    6b1a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    6b1f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6b26 <gdbserver_start+0xb5>\n    6b26:\t48 89 c7             \tmov    %rax,%rdi\n    6b29:\te8 00 00 00 00       \tcallq  6b2e <gdbserver_start+0xbd>\n    6b2e:\t85 c0                \ttest   %eax,%eax\n    6b30:\t74 3a                \tje     6b6c <gdbserver_start+0xfb>\n    6b32:\t48 8b 95 a8 fe ff ff \tmov    -0x158(%rbp),%rdx\n    6b39:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    6b40:\t48 89 d1             \tmov    %rdx,%rcx\n    6b43:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 6b4a <gdbserver_start+0xd9>\n    6b4a:\tbe 80 00 00 00       \tmov    $0x80,%esi\n    6b4f:\t48 89 c7             \tmov    %rax,%rdi\n    6b52:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6b57:\te8 00 00 00 00       \tcallq  6b5c <gdbserver_start+0xeb>\n    6b5c:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    6b63:\t48 89 85 a8 fe ff ff \tmov    %rax,-0x158(%rbp)\n    6b6a:\teb 5a                \tjmp    6bc6 <gdbserver_start+0x155>\n    6b6c:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    6b73:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6b7a <gdbserver_start+0x109>\n    6b7a:\t48 89 c7             \tmov    %rax,%rdi\n    6b7d:\te8 00 00 00 00       \tcallq  6b82 <gdbserver_start+0x111>\n    6b82:\t85 c0                \ttest   %eax,%eax\n    6b84:\t75 40                \tjne    6bc6 <gdbserver_start+0x155>\n    6b86:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n    6b8d:\tba 98 00 00 00       \tmov    $0x98,%edx\n    6b92:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6b97:\t48 89 c7             \tmov    %rax,%rdi\n    6b9a:\te8 00 00 00 00       \tcallq  6b9f <gdbserver_start+0x12e>\n    6b9f:\t48 8d 05 de fb ff ff \tlea    -0x422(%rip),%rax        # 6784 <gdb_sigterm_handler>\n    6ba6:\t48 89 85 d0 fe ff ff \tmov    %rax,-0x130(%rbp)\n    6bad:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n    6bb4:\tba 00 00 00 00       \tmov    $0x0,%edx\n    6bb9:\t48 89 c6             \tmov    %rax,%rsi\n    6bbc:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    6bc1:\te8 00 00 00 00       \tcallq  6bc6 <gdbserver_start+0x155>\n    6bc6:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    6bcd:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    6bd2:\tba 01 00 00 00       \tmov    $0x1,%edx\n    6bd7:\t48 89 c6             \tmov    %rax,%rsi\n    6bda:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6be1 <gdbserver_start+0x170>\n    6be1:\te8 00 00 00 00       \tcallq  6be6 <gdbserver_start+0x175>\n    6be6:\t48 89 85 c0 fe ff ff \tmov    %rax,-0x140(%rbp)\n    6bed:\t48 83 bd c0 fe ff ff \tcmpq   $0x0,-0x140(%rbp)\n    6bf4:\t00 \n    6bf5:\t75 0a                \tjne    6c01 <gdbserver_start+0x190>\n    6bf7:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    6bfc:\te9 b9 01 00 00       \tjmpq   6dba <gdbserver_start+0x349>\n    6c01:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6c08 <gdbserver_start+0x197>\n    6c08:\t48 89 85 b8 fe ff ff \tmov    %rax,-0x148(%rbp)\n    6c0f:\t48 83 bd b8 fe ff ff \tcmpq   $0x0,-0x148(%rbp)\n    6c16:\t00 \n    6c17:\t75 6f                \tjne    6c88 <gdbserver_start+0x217>\n    6c19:\tbf 98 21 00 00       \tmov    $0x2198,%edi\n    6c1e:\te8 00 00 00 00       \tcallq  6c23 <gdbserver_start+0x1b2>\n    6c23:\t48 89 85 b8 fe ff ff \tmov    %rax,-0x148(%rbp)\n    6c2a:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6c31:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 6c38 <gdbserver_start+0x1c7>\n    6c38:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6c3d:\t48 8d 3d 2a eb ff ff \tlea    -0x14d6(%rip),%rdi        # 576e <gdb_vm_state_change>\n    6c44:\te8 00 00 00 00       \tcallq  6c49 <gdbserver_start+0x1d8>\n    6c49:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 6c50 <gdbserver_start+0x1df>\n    6c50:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    6c55:\tba 00 00 00 00       \tmov    $0x0,%edx\n    6c5a:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6c61 <gdbserver_start+0x1f0>\n    6c61:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    6c66:\te8 00 00 00 00       \tcallq  6c6b <gdbserver_start+0x1fa>\n    6c6b:\t48 89 85 c8 fe ff ff \tmov    %rax,-0x138(%rbp)\n    6c72:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    6c79:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6c7e:\t48 89 c7             \tmov    %rax,%rdi\n    6c81:\te8 00 00 00 00       \tcallq  6c86 <gdbserver_start+0x215>\n    6c86:\teb 6c                \tjmp    6cf4 <gdbserver_start+0x283>\n    6c88:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6c8f:\t48 05 38 20 00 00    \tadd    $0x2038,%rax\n    6c95:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    6c9a:\t48 89 c7             \tmov    %rax,%rdi\n    6c9d:\te8 00 00 00 00       \tcallq  6ca2 <gdbserver_start+0x231>\n    6ca2:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6ca9:\t48 8b 80 70 20 00 00 \tmov    0x2070(%rax),%rax\n    6cb0:\t48 89 85 c8 fe ff ff \tmov    %rax,-0x138(%rbp)\n    6cb7:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6cbe:\t48 89 c7             \tmov    %rax,%rdi\n    6cc1:\te8 6c fd ff ff       \tcallq  6a32 <cleanup_processes>\n    6cc6:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6ccd:\tba 98 21 00 00       \tmov    $0x2198,%edx\n    6cd2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6cd7:\t48 89 c7             \tmov    %rax,%rdi\n    6cda:\te8 00 00 00 00       \tcallq  6cdf <gdbserver_start+0x26e>\n    6cdf:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6ce6:\t48 8b 95 c8 fe ff ff \tmov    -0x138(%rbp),%rdx\n    6ced:\t48 89 90 70 20 00 00 \tmov    %rdx,0x2070(%rax)\n    6cf4:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6cfb:\t48 89 c7             \tmov    %rax,%rdi\n    6cfe:\te8 ba fc ff ff       \tcallq  69bd <create_processes>\n    6d03:\t48 83 bd c0 fe ff ff \tcmpq   $0x0,-0x140(%rbp)\n    6d0a:\t00 \n    6d0b:\t74 69                \tje     6d76 <gdbserver_start+0x305>\n    6d0d:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6d14:\t48 8d 88 38 20 00 00 \tlea    0x2038(%rax),%rcx\n    6d1b:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    6d22:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 6d29 <gdbserver_start+0x2b8>\n    6d29:\t48 89 c6             \tmov    %rax,%rsi\n    6d2c:\t48 89 cf             \tmov    %rcx,%rdi\n    6d2f:\te8 00 00 00 00       \tcallq  6d34 <gdbserver_start+0x2c3>\n    6d34:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6d3b:\t48 05 38 20 00 00    \tadd    $0x2038,%rax\n    6d41:\t48 8b 95 b8 fe ff ff \tmov    -0x148(%rbp),%rdx\n    6d48:\t6a 01                \tpushq  $0x1\n    6d4a:\t6a 00                \tpushq  $0x0\n    6d4c:\t49 89 d1             \tmov    %rdx,%r9\n    6d4f:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    6d55:\t48 8d 0d 78 f8 ff ff \tlea    -0x788(%rip),%rcx        # 65d4 <gdb_chr_event>\n    6d5c:\t48 8d 15 21 f8 ff ff \tlea    -0x7df(%rip),%rdx        # 6584 <gdb_chr_receive>\n    6d63:\t48 8d 35 0b f8 ff ff \tlea    -0x7f5(%rip),%rsi        # 6575 <gdb_chr_can_receive>\n    6d6a:\t48 89 c7             \tmov    %rax,%rdi\n    6d6d:\te8 00 00 00 00       \tcallq  6d72 <gdbserver_start+0x301>\n    6d72:\t48 83 c4 10          \tadd    $0x10,%rsp\n    6d76:\t48 83 bd c0 fe ff ff \tcmpq   $0x0,-0x140(%rbp)\n    6d7d:\t00 \n    6d7e:\t0f 95 c0             \tsetne  %al\n    6d81:\t0f b6 d0             \tmovzbl %al,%edx\n    6d84:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6d8b:\t89 50 18             \tmov    %edx,0x18(%rax)\n    6d8e:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6d95:\t48 8b 95 c8 fe ff ff \tmov    -0x138(%rbp),%rdx\n    6d9c:\t48 89 90 70 20 00 00 \tmov    %rdx,0x2070(%rax)\n    6da3:\t48 8b 85 b8 fe ff ff \tmov    -0x148(%rbp),%rax\n    6daa:\t48 c7 80 90 21 00 00 \tmovq   $0x0,0x2190(%rax)\n    6db1:\t00 00 00 00 \n    6db5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6dba:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    6dbe:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    6dc5:\t00 00 \n    6dc7:\t74 05                \tje     6dce <gdbserver_start+0x35d>\n    6dc9:\te8 00 00 00 00       \tcallq  6dce <gdbserver_start+0x35d>\n    6dce:\tc9                   \tleaveq \n    6dcf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gdbserver_start(const char *a1) {\n  __int64 result;\n  __int64 v2;\n  _QWORD *<span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  struct sigaction <span class=\"supfact\">v6</span>;\n  char <span class=\"supfact\">s</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  trace_gdbstub_op_start(a1);\n  <span class=\"supfact\">v4</span> = Number L;\n  if (cpus) {\n    if (a1) {\n      if (!strcmp(a1, String))\n        goto LABEL_13;\n      if ((unsigned int)strstart(a1, String, Number L)) {\n        snprintf(<span class=\"supfact\">s</span>, Number, String, a1);\n        v2 = qemu_chr_new_noreplay(String, <span class=\"supfact\">s</span>, Number L,\n                                   Number L);\n      } else {\n        if (!strcmp(a1, String)) {\n          memset(&<span class=\"supfact\">v6</span>, Number, sizeof(<span class=\"supfact\">v6</span>));\n          <span class=\"supfact\">v6</span>.sa_handler = (__sighandler_t)gdb_sigterm_handler;\n          sigaction(Number, &<span class=\"supfact\">v6</span>, Number L);\n        }\n        v2 = qemu_chr_new_noreplay(String, a1, Number L, Number L);\n      }\n      <span class=\"supfact\">v4</span> = v2;\n      if (v2) {\n      LABEL_13:\n        <span class=\"supfact\">v3</span> = (_QWORD *)gdbserver_state;\n        if (gdbserver_state) {\n          qemu_chr_fe_deinit(gdbserver_state + Number, Number L);\n          <span class=\"supfact\">v5</span> = <span class=\"supfact\">v3</span>[Number];\n          cleanup_processes((__int64)<span class=\"supfact\">v3</span>);\n          memset(<span class=\"supfact\">v3</span>, Number, Number);\n          <span class=\"supfact\">v3</span>[Number] = <span class=\"supfact\">v5</span>;\n        } else {\n          <span class=\"supfact\">v3</span> = (_QWORD *)g_malloc0(Number L);\n          gdbserver_state = (__int64)<span class=\"supfact\">v3</span>;\n          qemu_add_vm_change_state_handler(gdb_vm_state_change, Number L);\n          <span class=\"supfact\">v5</span> = qemu_chardev_new(Number L, String, Number L,\n                                                Number L, &error_abort);\n          monitor_init_hmp(<span class=\"supfact\">v5</span>, Number L);\n        }\n        create_processes((__int64)<span class=\"supfact\">v3</span>);\n        if (<span class=\"supfact\">v4</span>) {\n          qemu_chr_fe_init(<span class=\"supfact\">v3</span> + Number, <span class=\"supfact\">v4</span>,\n                           &error_abort);\n          qemu_chr_fe_set_handlers(\n              <span class=\"supfact\">v3</span> + Number, gdb_chr_can_receive, gdb_chr_receive,\n              gdb_chr_event, Number L, <span class=\"supfact\">v3</span>, Number L, Number L);\n        }\n        *((_DWORD *)<span class=\"supfact\">v3</span> + Number) = <span class=\"supfact\">v4</span> != Number;\n        <span class=\"supfact\">v3</span>[Number] = <span class=\"supfact\">v5</span>;\n        <span class=\"supfact\">v3</span>[Number] = Number L;\n        result = Number L;\n      } else {\n        result = Number;\n      }\n    } else {\n      result = Number;\n    }\n  } else {\n    error_report(String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl gdbserver_start(const char *device) {\n  int result;\n  const char *devicea;\n  GDBState_0 *<span class=\"supfact\">s</span>;\n  Chardev_0 *<span class=\"supfact\">chr</span>;\n  Chardev_0 *<span class=\"supfact\">mon_chr</span>;\n  sigaction <span class=\"supfact\">act</span>;\n  char <span class=\"supfact\">gdbstub_device_name</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  devicea = device;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  trace_gdbstub_op_start(device);\n  <span class=\"supfact\">chr</span> = Number L;\n  if (cpus) {\n    if (device) {\n      if (!strcmp(device, String))\n        goto LABEL_12;\n      if ((unsigned int)strstart(device, String, Number L)) {\n        snprintf(<span class=\"supfact\">gdbstub_device_name</span>, Number, String, device);\n        devicea = <span class=\"supfact\">gdbstub_device_name</span>;\n      } else if (!strcmp(device, String)) {\n        memset(&<span class=\"supfact\">act</span>, Number, sizeof(<span class=\"supfact\">act</span>));\n        <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)gdb_sigterm_handler;\n        sigaction_0(Number, &<span class=\"supfact\">act</span>, Number L);\n      }\n      <span class=\"supfact\">chr</span> = (Chardev_0 *)qemu_chr_new_noreplay(\n          String, devicea, Number L, Number L);\n      if (<span class=\"supfact\">chr</span>) {\n      LABEL_12:\n        <span class=\"supfact\">s</span> = gdbserver_state;\n        if (gdbserver_state) {\n          qemu_chr_fe_deinit(&gdbserver_state-><span class=\"supfact\">chr</span>, Number L);\n          <span class=\"supfact\">mon_chr</span> = <span class=\"supfact\">s</span>-><span class=\"supfact\">mon_chr</span>;\n          cleanup_processes(<span class=\"supfact\">s</span>);\n          memset(<span class=\"supfact\">s</span>, Number, sizeof(GDBState_0));\n          <span class=\"supfact\">s</span>-><span class=\"supfact\">mon_chr</span> = <span class=\"supfact\">mon_chr</span>;\n        } else {\n          <span class=\"supfact\">s</span> = (GDBState_0 *)g_malloc0(Number L);\n          gdbserver_state = <span class=\"supfact\">s</span>;\n          qemu_add_vm_change_state_handler(gdb_vm_state_change, Number L);\n          <span class=\"supfact\">mon_chr</span> = (Chardev_0 *)qemu_chardev_new(\n              Number L, String, Number L, Number L, &error_abort);\n          monitor_init_hmp(<span class=\"supfact\">mon_chr</span>, Number L);\n        }\n        create_processes(<span class=\"supfact\">s</span>);\n        if (<span class=\"supfact\">chr</span>) {\n          qemu_chr_fe_init(&<span class=\"supfact\">s</span>-><span class=\"supfact\">chr</span>,\n                           <span class=\"supfact\">chr</span>, &error_abort);\n          qemu_chr_fe_set_handlers(&<span class=\"supfact\">s</span>-><span class=\"supfact\">chr</span>,\n                                   gdb_chr_can_receive, gdb_chr_receive,\n                                   gdb_chr_event, Number L, <span class=\"supfact\">s</span>,\n                                   Number L, Number L);\n        }\n        <span class=\"supfact\">s</span>->state = <span class=\"supfact\">chr</span> != Number L;\n        <span class=\"supfact\">s</span>-><span class=\"supfact\">mon_chr</span> = <span class=\"supfact\">mon_chr</span>;\n        <span class=\"supfact\">s</span>->current_syscall_cb = Number L;\n        result = Number;\n      } else {\n        result = Number;\n      }\n    } else {\n      result = Number;\n    }\n  } else {\n    error_report(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": true}, {"repo_owner": "jordansissel", "repo_name": "tmux", "path": "jordansissel/tmux/8c54c58ec5c6c45af38e829f1a79d944af77d1a77275700b93d321f9e256a16e", "path_in_repo": "jordansissel/tmux/tags/TMUX_1_0/tmux", "objdump": "000000000043671b <window_copy_resize>:\n  43671b:\t55                   \tpush   %rbp\n  43671c:\t48 89 e5             \tmov    %rsp,%rbp\n  43671f:\t48 83 ec 30          \tsub    $0x30,%rsp\n  436723:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  436727:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  43672a:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n  43672d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  436731:\t48 8b 80 90 01 00 00 \tmov    0x190(%rax),%rax\n  436738:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  43673c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  436740:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  436744:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n  436747:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n  43674a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  43674e:\t89 ce                \tmov    %ecx,%esi\n  436750:\t48 89 c7             \tmov    %rax,%rdi\n  436753:\te8 87 e1 fe ff       \tcallq  4248df <screen_resize>\n  436758:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  43675c:\t8b 40 70             \tmov    0x70(%rax),%eax\n  43675f:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n  436762:\t83 ea 01             \tsub    $0x1,%edx\n  436765:\t39 d0                \tcmp    %edx,%eax\n  436767:\t76 0d                \tjbe    436776 <window_copy_resize+0x5b>\n  436769:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  43676c:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  43676f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  436773:\t89 50 70             \tmov    %edx,0x70(%rax)\n  436776:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  43677a:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n  43677d:\t39 45 d4             \tcmp    %eax,-0x2c(%rbp)\n  436780:\t73 0a                \tjae    43678c <window_copy_resize+0x71>\n  436782:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  436786:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  436789:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n  43678c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  436790:\t48 89 c7             \tmov    %rax,%rdi\n  436793:\te8 19 e5 fe ff       \tcallq  424cb1 <screen_clear_selection>\n  436798:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  43679c:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4367a0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4367a5:\t48 89 c7             \tmov    %rax,%rdi\n  4367a8:\te8 75 b6 fe ff       \tcallq  421e22 <screen_write_start>\n  4367ad:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4367b1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4367b5:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4367b8:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  4367bb:\t48 8d 75 e0          \tlea    -0x20(%rbp),%rsi\n  4367bf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4367c3:\t89 d1                \tmov    %edx,%ecx\n  4367c5:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4367ca:\t48 89 c7             \tmov    %rax,%rdi\n  4367cd:\te8 a0 13 00 00       \tcallq  437b72 <window_copy_write_lines>\n  4367d2:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4367d6:\t48 89 c7             \tmov    %rax,%rdi\n  4367d9:\te8 92 b6 fe ff       \tcallq  421e70 <screen_write_stop>\n  4367de:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4367e2:\t48 89 c7             \tmov    %rax,%rdi\n  4367e5:\te8 64 14 00 00       \tcallq  437c4e <window_copy_redraw_screen>\n  4367ea:\t90                   \tnop\n  4367eb:\tc9                   \tleaveq \n  4367ec:\tc3                   \tretq   ", "code_s": "__int64 __fastcall window_copy_resize(__int64 a1, unsigned int a2,\n                                      unsigned int a3) {\n  _QWORD <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v6</span> = <span class=\"supfact\">v7</span>;\n  screen_resize(<span class=\"supfact\">v7</span>, a2, a3);\n  if (*(_DWORD *)(<span class=\"supfact\">v7</span> + Number) > a3 - Number)\n    *(_DWORD *)(<span class=\"supfact\">v7</span> + Number) = a3 - Number;\n  if (a2 < *(_DWORD *)(<span class=\"supfact\">v7</span> + Number))\n    *(_DWORD *)(<span class=\"supfact\">v7</span> + Number) = a2;\n  screen_clear_selection(<span class=\"supfact\">v7</span>);\n  screen_write_start(<span class=\"supfact\">v5</span>, Number L, <span class=\"supfact\">v6</span>);\n  window_copy_write_lines(\n      a1, <span class=\"supfact\">v5</span>, Number L,\n      (unsigned int)(*(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number) +\n                                 Number L) -\n                     Number));\n  screen_write_stop();\n  return window_copy_redraw_screen(a1);\n}", "code_t": "void __cdecl window_copy_resize(window_pane *wp, u_int sx, u_int sy) {\n  screen_write_ctx <span class=\"supfact\">ctx</span>;\n  screen *<span class=\"supfact\">s</span>;\n  window_copy_mode_data *<span class=\"supfact\">data</span>;\n  <span class=\"supfact\">data</span> = (window_copy_mode_data *)wp->modedata;\n  <span class=\"supfact\">s</span> = &<span class=\"supfact\">data</span>->screen;\n  screen_resize(&<span class=\"supfact\">data</span>->screen, sx, sy);\n  if (<span class=\"supfact\">data</span>->cy > sy - Number)\n    <span class=\"supfact\">data</span>->cy = sy - Number;\n  if (sx < <span class=\"supfact\">data</span>->cx)\n    <span class=\"supfact\">data</span>->cx = sx;\n  screen_clear_selection(&<span class=\"supfact\">data</span>->screen);\n  screen_write_start(&<span class=\"supfact\">ctx</span>, Number L, <span class=\"supfact\">s</span>);\n  window_copy_write_lines(wp, &<span class=\"supfact\">ctx</span>, Number,\n                          <span class=\"supfact\">s</span>->grid->sy - Number);\n  screen_write_stop(&<span class=\"supfact\">ctx</span>);\n  window_copy_redraw_screen(wp);\n}", "var": [{"name": "v5", "type": "struct screen_write_ctx { window_pane * wp; screen * s; }", "ref_name": "ctx", "ref_type": "struct screen_write_ctx { window_pane * wp; screen * s; }"}], "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/a6c0476d37fab0a2016b706bb595a9db57bad22bae2083133c2d1eeb6cb12f1c", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_events_584896b4.o", "objdump": "0000000000000000 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n   f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  13:\t48 89 c7             \tmov    %rax,%rdi\n  16:\te8 00 00 00 00       \tcallq  1b <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x1b>\n  1b:\t48 89 c2             \tmov    %rax,%rdx\n  1e:\t48 8d 45 ff          \tlea    -0x1(%rbp),%rax\n  22:\t48 89 d6             \tmov    %rdx,%rsi\n  25:\t48 89 c7             \tmov    %rax,%rdi\n  28:\te8 00 00 00 00       \tcallq  2d <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x2d>\n  2d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  31:\t8b 50 10             \tmov    0x10(%rax),%edx\n  34:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  37:\t89 d6                \tmov    %edx,%esi\n  39:\t89 c7                \tmov    %eax,%edi\n  3b:\te8 00 00 00 00       \tcallq  40 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x40>\n  40:\t83 f0 01             \txor    $0x1,%eax\n  43:\t84 c0                \ttest   %al,%al\n  45:\t75 18                \tjne    5f <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x5f>\n  47:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  50:\t48 89 c7             \tmov    %rax,%rdi\n  53:\te8 00 00 00 00       \tcallq  58 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x58>\n  58:\t83 f0 01             \txor    $0x1,%eax\n  5b:\t84 c0                \ttest   %al,%al\n  5d:\t74 07                \tje     66 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x66>\n  5f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  64:\teb 05                \tjmp    6b <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x6b>\n  66:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  6b:\t84 c0                \ttest   %al,%al\n  6d:\t74 27                \tje     96 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x96>\n  6f:\tbe 00 01 00 00       \tmov    $0x100,%esi\n  74:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  79:\te8 00 00 00 00       \tcallq  7e <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x7e>\n  7e:\te8 00 00 00 00       \tcallq  83 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x83>\n  83:\t84 c0                \ttest   %al,%al\n  85:\t74 0f                \tje     96 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x96>\n  87:\tbe 05 00 00 00       \tmov    $0x5,%esi\n  8c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  91:\te8 00 00 00 00       \tcallq  96 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x96>\n  96:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  9a:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  9d:\t89 d6                \tmov    %edx,%esi\n  9f:\t48 89 c7             \tmov    %rax,%rdi\n  a2:\te8 00 00 00 00       \tcallq  a7 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0xa7>\n  a7:\t48 8b 00             \tmov    (%rax),%rax\n  aa:\tc9                   \tleaveq \n  ab:\tc3                   \tretq   ", "code_s": "__int64 __fastcall juce\n    Array<juce ActionListener *, juce DummyCriticalSection, Number>\n    getUnchecked(__int64 a1, unsigned int a2) {\n  const juce DummyCriticalSection *v2;\n  int v3;\n  char <span class=\"supfact\">v6</span>;\n  v2 = (const juce DummyCriticalSection *)\n      juce Array<juce ActionListener *, juce DummyCriticalSection, Number>\n          getLock(a1);\n  juce DummyCriticalSection ScopedLockType ScopedLockType(\n      (juce DummyCriticalSection ScopedLockType *)&<span class=\"supfact\">v6</span>, v2);\n  if (!juce isPositiveAndBelow<int>(a2, *(_DWORD *)(a1 + Number),\n                                    *(_DWORD *)(a1 + Number)) ||\n      (unsigned __int8)juce HeapBlock<juce ActionListener *, false> operator!=(\n          a1, Number L) != Number) {\n    juce logAssertion((juce *)String, (const char *)&loc_100, v3);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  return *(_QWORD *)juce HeapBlock<juce ActionListener *, false>\n  operator[]<int>(a1, a2);\n}", "code_t": "juce ActionListener *__cdecl juce\n    Array<juce ActionListener *, juce DummyCriticalSection, Number>\n    getUnchecked(\n        const juce Array<juce ActionListener *, juce DummyCriticalSection,\n                         Number> *const this,\n        const int index) {\n  const juce DummyCriticalSection *v2;\n  int v3;\n  juce Array<juce ActionListener *, juce DummyCriticalSection, Number>\n      ScopedLockType <span class=\"supfact\">lock</span>;\n  v2 = juce Array<juce ActionListener *, juce DummyCriticalSection, Number>\n      getLock(this);\n  juce DummyCriticalSection ScopedLockType ScopedLockType(&<span class=\"supfact\">lock</span>,\n                                                          v2);\n  if (!juce isPositiveAndBelow<int>(index, this->numUsed) ||\n      !juce HeapBlock<juce ActionListener *, false> operator!=(\n          &this->data.elements, Number L)) {\n    juce logAssertion((juce *)String, (const char *)&loc_100, v3);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  return *juce HeapBlock<juce ActionListener *, false> operator[]<int>(\n      &this->data.elements, index);\n}", "var": [{"name": "v6", "type": "struct juce::Array<juce::ActionListener*,juce::DummyCriticalSection,0>::ScopedLockType { __int8[1] gap0; }", "ref_name": "lock", "ref_type": "struct juce::Array<juce::ActionListener*,juce::DummyCriticalSection,0>::ScopedLockType { __int8[1] gap0; }"}], "body_in_train": false}, {"repo_owner": "jongwonk", "repo_name": "linux_samsung", "path": "jongwonk/linux_samsung/bcb4360bb4f5f9e9f98ffe8763db17d268adaedc1b337a678820ff1e09a42dc8", "path_in_repo": "jongwonk/linux_samsung/tools/perf/builtin-report.o", "objdump": "000000000000125b <report__collapse_hists>:\n    125b:\t55                   \tpush   %rbp\n    125c:\t48 89 e5             \tmov    %rsp,%rbp\n    125f:\t48 83 ec 70          \tsub    $0x70,%rsp\n    1263:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    1267:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    126e:\t00 00 \n    1270:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1274:\t31 c0                \txor    %eax,%eax\n    1276:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    127a:\t48 8b 88 f0 00 00 00 \tmov    0xf0(%rax),%rcx\n    1281:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1285:\tba 00 00 00 00       \tmov    $0x0,%edx\n    128a:\t48 89 ce             \tmov    %rcx,%rsi\n    128d:\t48 89 c7             \tmov    %rax,%rdi\n    1290:\te8 00 00 00 00       \tcallq  1295 <report__collapse_hists+0x3a>\n    1295:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1299:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    12a0:\t48 8b 80 c0 01 00 00 \tmov    0x1c0(%rax),%rax\n    12a7:\t48 8b 00             \tmov    (%rax),%rax\n    12aa:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    12ae:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    12b2:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    12b6:\te9 b2 00 00 00       \tjmpq   136d <report__collapse_hists+0x112>\n    12bb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    12bf:\t48 89 c7             \tmov    %rax,%rdi\n    12c2:\te8 74 ee ff ff       \tcallq  13b <evsel__hists>\n    12c7:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    12cb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    12cf:\t8b 80 a8 00 00 00    \tmov    0xa8(%rax),%eax\n    12d5:\t85 c0                \ttest   %eax,%eax\n    12d7:\t75 13                \tjne    12ec <report__collapse_hists+0x91>\n    12d9:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    12dd:\t48 8b 90 e0 00 00 00 \tmov    0xe0(%rax),%rdx\n    12e4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    12e8:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n    12ec:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    12f0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    12f4:\t48 89 d6             \tmov    %rdx,%rsi\n    12f7:\t48 89 c7             \tmov    %rax,%rdi\n    12fa:\te8 00 00 00 00       \tcallq  12ff <report__collapse_hists+0xa4>\n    12ff:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 1306 <report__collapse_hists+0xab>\n    1306:\t84 c0                \ttest   %al,%al\n    1308:\t74 50                \tje     135a <report__collapse_hists+0xff>\n    130a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    130e:\t48 89 c7             \tmov    %rax,%rdi\n    1311:\te8 23 ed ff ff       \tcallq  39 <perf_evsel__is_group_leader>\n    1316:\t83 f0 01             \txor    $0x1,%eax\n    1319:\t84 c0                \ttest   %al,%al\n    131b:\t74 3d                \tje     135a <report__collapse_hists+0xff>\n    131d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1321:\t48 8b 80 28 01 00 00 \tmov    0x128(%rax),%rax\n    1328:\t48 89 c7             \tmov    %rax,%rdi\n    132b:\te8 0b ee ff ff       \tcallq  13b <evsel__hists>\n    1330:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    1334:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    1338:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    133c:\t48 89 d6             \tmov    %rdx,%rsi\n    133f:\t48 89 c7             \tmov    %rax,%rdi\n    1342:\te8 00 00 00 00       \tcallq  1347 <report__collapse_hists+0xec>\n    1347:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    134b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    134f:\t48 89 d6             \tmov    %rdx,%rsi\n    1352:\t48 89 c7             \tmov    %rax,%rdi\n    1355:\te8 00 00 00 00       \tcallq  135a <report__collapse_hists+0xff>\n    135a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    135e:\t48 8b 00             \tmov    (%rax),%rax\n    1361:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    1365:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1369:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    136d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1371:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    1378:\t48 8b 80 c0 01 00 00 \tmov    0x1c0(%rax),%rax\n    137f:\t48 39 45 a8          \tcmp    %rax,-0x58(%rbp)\n    1383:\t0f 85 32 ff ff ff    \tjne    12bb <report__collapse_hists+0x60>\n    1389:\te8 00 00 00 00       \tcallq  138e <report__collapse_hists+0x133>\n    138e:\t90                   \tnop\n    138f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1393:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    139a:\t00 00 \n    139c:\t74 05                \tje     13a3 <report__collapse_hists+0x148>\n    139e:\te8 00 00 00 00       \tcallq  13a3 <report__collapse_hists+0x148>\n    13a3:\tc9                   \tleaveq \n    13a4:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall report__collapse_hists(_QWORD *a1) {\n  __int64 <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  ui_progress__init(<span class=\"supfact\">v5</span>, a1[Number], String);\n  for (<span class=\"supfact\">i</span> = **(_QWORD **)(a1[Number] + Number L);\n       <span class=\"supfact\">i</span> != *(_QWORD *)(a1[Number] + Number L);\n       <span class=\"supfact\">i</span> = *(_QWORD *)<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v3</span> = evsel__hists(<span class=\"supfact\">i</span>);\n    if (!*(_DWORD *)(<span class=\"supfact\">i</span> + Number))\n      *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) = a1[Number];\n    hists__collapse_resort(<span class=\"supfact\">v3</span>, <span class=\"supfact\">v5</span>);\n    if (symbol_conf[Number] &&\n        !perf_evsel__is_group_leader(<span class=\"supfact\">i</span>)) {\n      <span class=\"supfact\">v4</span> =\n          evsel__hists(*(_QWORD *)(<span class=\"supfact\">i</span> + Number));\n      hists__match(<span class=\"supfact\">v4</span>, <span class=\"supfact\">v3</span>);\n      hists__link(<span class=\"supfact\">v4</span>, <span class=\"supfact\">v3</span>);\n    }\n  }\n  ui_progress__finish();\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl report__collapse_hists(report *rep) {\n  perf_evsel *<span class=\"supfact\">pos</span>;\n  <span class=\"supfact\">hists</span> *<span class=\"supfact\">hists</span>;\n  <span class=\"supfact\">hists</span> *<span class=\"supfact\">leader_hists</span>;\n  ui_progress <span class=\"supfact\">prog</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  ui_progress__init(&<span class=\"supfact\">prog</span>, rep->nr_entries, String);\n  for (<span class=\"supfact\">pos</span> = (perf_evsel *)rep->session->evlist->entries.next;\n       <span class=\"supfact\">pos</span> != (perf_evsel *)rep->session->evlist;\n       <span class=\"supfact\">pos</span> = (perf_evsel *)<span class=\"supfact\">pos</span>->node.next) {\n    <span class=\"supfact\">hists</span> = evsel__hists(<span class=\"supfact\">pos</span>);\n    if (!<span class=\"supfact\">pos</span>->idx)\n      <span class=\"supfact\">hists</span>->symbol_filter_str = rep->symbol_filter_str;\n    hists__collapse_resort(<span class=\"supfact\">hists</span>, &<span class=\"supfact\">prog</span>);\n    if (symbol_conf_0[Number] &&\n        !perf_evsel__is_group_leader(<span class=\"supfact\">pos</span>)) {\n      <span class=\"supfact\">leader_hists</span> = evsel__hists(<span class=\"supfact\">pos</span>->leader);\n      hists__match(<span class=\"supfact\">leader_hists</span>, <span class=\"supfact\">hists</span>);\n      hists__link(<span class=\"supfact\">leader_hists</span>, <span class=\"supfact\">hists</span>);\n    }\n  }\n  ui_progress__finish();\n}", "var": [{"name": "v5", "type": "struct ui_progress { const char * title; u64 curr; u64 next; u64 step; u64 total; }", "ref_name": "prog", "ref_type": "struct ui_progress { const char * title; u64 curr; u64 next; u64 step; u64 total; }"}], "body_in_train": false}, {"repo_owner": "kamontat", "repo_name": "PAPI-Matrix", "path": "kamontat/PAPI-Matrix/3e9405886724c3aac3fdfd4caa104eb86cac8b00f31fa88c1230fbf74e54d0a7", "path_in_repo": "kamontat/PAPI-Matrix/papi-5.5.1/src/libpfm-3.y/examples_v3.x/showevtinfo", "objdump": "000000000041037b <pfm_nhm_get_event_code>:\n  41037b:\t55                   \tpush   %rbp\n  41037c:\t48 89 e5             \tmov    %rsp,%rbp\n  41037f:\t48 83 ec 50          \tsub    $0x50,%rsp\n  410383:\t89 7d bc             \tmov    %edi,-0x44(%rbp)\n  410386:\t89 75 b8             \tmov    %esi,-0x48(%rbp)\n  410389:\t48 89 55 b0          \tmov    %rdx,-0x50(%rbp)\n  41038d:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  410391:\t48 89 c7             \tmov    %rax,%rdi\n  410394:\te8 ba 28 ff ff       \tcallq  402c53 <pfm_get_impl_counters>\n  410399:\t83 7d b8 ff          \tcmpl   $0xffffffff,-0x48(%rbp)\n  41039d:\t74 22                \tje     4103c1 <pfm_nhm_get_event_code+0x46>\n  41039f:\t83 7d b8 1c          \tcmpl   $0x1c,-0x48(%rbp)\n  4103a3:\t77 15                \tja     4103ba <pfm_nhm_get_event_code+0x3f>\n  4103a5:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n  4103a8:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4103ac:\t89 d6                \tmov    %edx,%esi\n  4103ae:\t48 89 c7             \tmov    %rax,%rdi\n  4103b1:\te8 10 cb ff ff       \tcallq  40cec6 <pfm_regmask_isset>\n  4103b6:\t85 c0                \ttest   %eax,%eax\n  4103b8:\t75 07                \tjne    4103c1 <pfm_nhm_get_event_code+0x46>\n  4103ba:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n  4103bf:\teb 1a                \tjmp    4103db <pfm_nhm_get_event_code+0x60>\n  4103c1:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  4103c4:\t89 c7                \tmov    %eax,%edi\n  4103c6:\te8 a7 cc ff ff       \tcallq  40d072 <get_nhm_entry>\n  4103cb:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4103ce:\t89 c2                \tmov    %eax,%edx\n  4103d0:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  4103d4:\t89 10                \tmov    %edx,(%rax)\n  4103d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4103db:\tc9                   \tleaveq \n  4103dc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pfm_nhm_get_event_code(unsigned int a1, unsigned int a2,\n                                          _DWORD *a3) {\n  char <span class=\"supfact\">v5</span>[Number];\n  pfm_get_impl_counters(<span class=\"supfact\">v5</span>);\n  if (a2 != Number &&\n      (a2 > Number || !pfm_regmask_isset_6((__int64)<span class=\"supfact\">v5</span>, a2)))\n    return Number L;\n  *a3 = *(_DWORD *)(get_nhm_entry(a1) + Number);\n  return Number L;\n}", "code_t": "int __cdecl pfm_nhm_get_event_code(unsigned int i, unsigned int cnt,\n                                   int *code) {\n  pfmlib_regmask_t <span class=\"supfact\">cnts</span>;\n  pfm_get_impl_counters(&<span class=\"supfact\">cnts</span>);\n  if (cnt != Number &&\n      (cnt > Number || !pfm_regmask_isset_6(&<span class=\"supfact\">cnts</span>, cnt)))\n    return Number;\n  *code = get_nhm_entry(i)->pme_code;\n  return Number;\n}", "var": [{"name": "v5", "type": "struct pfmlib_regmask_t { pfmlib_regmask_bits_t[8] bits; }", "ref_name": "cnts", "ref_type": "struct pfmlib_regmask_t { pfmlib_regmask_bits_t[8] bits; }"}], "body_in_train": true}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/dcb8cfc19b1d723fd5fad9ae551b9f63adb87e9e6e82c5bbaf0a221013c62501", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/ssl/ssl_mail_client", "objdump": "000000000042a352 <mbedtls_x509_crt_parse_path>:\n  42a352:\t55                   \tpush   %rbp\n  42a353:\t48 89 e5             \tmov    %rsp,%rbp\n  42a356:\t48 81 ec c0 02 00 00 \tsub    $0x2c0,%rsp\n  42a35d:\t48 89 bd 48 fd ff ff \tmov    %rdi,-0x2b8(%rbp)\n  42a364:\t48 89 b5 40 fd ff ff \tmov    %rsi,-0x2c0(%rbp)\n  42a36b:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  42a372:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n  42a379:\t48 89 c7             \tmov    %rax,%rdi\n  42a37c:\te8 5f 7d fd ff       \tcallq  4020e0 <opendir@plt>\n  42a381:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  42a385:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  42a38a:\t0f 85 c5 00 00 00    \tjne    42a455 <mbedtls_x509_crt_parse_path+0x103>\n  42a390:\tb8 00 d7 ff ff       \tmov    $0xffffd700,%eax\n  42a395:\te9 e6 00 00 00       \tjmpq   42a480 <mbedtls_x509_crt_parse_path+0x12e>\n  42a39a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42a39e:\t48 8d 48 13          \tlea    0x13(%rax),%rcx\n  42a3a2:\t48 8b 95 40 fd ff ff \tmov    -0x2c0(%rbp),%rdx\n  42a3a9:\t48 8d 85 50 fd ff ff \tlea    -0x2b0(%rbp),%rax\n  42a3b0:\t49 89 c8             \tmov    %rcx,%r8\n  42a3b3:\t48 89 d1             \tmov    %rdx,%rcx\n  42a3b6:\tba ab 9d 48 00       \tmov    $0x489dab,%edx\n  42a3bb:\tbe 00 02 00 00       \tmov    $0x200,%esi\n  42a3c0:\t48 89 c7             \tmov    %rax,%rdi\n  42a3c3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42a3c8:\te8 63 7d fd ff       \tcallq  402130 <snprintf@plt>\n  42a3cd:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  42a3d0:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  42a3d4:\t78 0a                \tjs     42a3e0 <mbedtls_x509_crt_parse_path+0x8e>\n  42a3d6:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  42a3d9:\t3d ff 01 00 00       \tcmp    $0x1ff,%eax\n  42a3de:\t76 0c                \tjbe    42a3ec <mbedtls_x509_crt_parse_path+0x9a>\n  42a3e0:\tc7 45 fc 80 d6 ff ff \tmovl   $0xffffd680,-0x4(%rbp)\n  42a3e7:\te9 85 00 00 00       \tjmpq   42a471 <mbedtls_x509_crt_parse_path+0x11f>\n  42a3ec:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n  42a3f3:\t48 8d 85 50 fd ff ff \tlea    -0x2b0(%rbp),%rax\n  42a3fa:\t48 89 d6             \tmov    %rdx,%rsi\n  42a3fd:\t48 89 c7             \tmov    %rax,%rdi\n  42a400:\te8 2b 88 04 00       \tcallq  472c30 <stat64>\n  42a405:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  42a408:\t75 09                \tjne    42a413 <mbedtls_x509_crt_parse_path+0xc1>\n  42a40a:\tc7 45 fc 00 d7 ff ff \tmovl   $0xffffd700,-0x4(%rbp)\n  42a411:\teb 5e                \tjmp    42a471 <mbedtls_x509_crt_parse_path+0x11f>\n  42a413:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n  42a419:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  42a41e:\t3d 00 80 00 00       \tcmp    $0x8000,%eax\n  42a423:\t74 02                \tje     42a427 <mbedtls_x509_crt_parse_path+0xd5>\n  42a425:\teb 2e                \tjmp    42a455 <mbedtls_x509_crt_parse_path+0x103>\n  42a427:\t48 8d 95 50 fd ff ff \tlea    -0x2b0(%rbp),%rdx\n  42a42e:\t48 8b 85 48 fd ff ff \tmov    -0x2b8(%rbp),%rax\n  42a435:\t48 89 d6             \tmov    %rdx,%rsi\n  42a438:\t48 89 c7             \tmov    %rax,%rdi\n  42a43b:\te8 9f fe ff ff       \tcallq  42a2df <mbedtls_x509_crt_parse_file>\n  42a440:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  42a443:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n  42a447:\t79 06                \tjns    42a44f <mbedtls_x509_crt_parse_path+0xfd>\n  42a449:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  42a44d:\teb 06                \tjmp    42a455 <mbedtls_x509_crt_parse_path+0x103>\n  42a44f:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  42a452:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  42a455:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  42a459:\t48 89 c7             \tmov    %rax,%rdi\n  42a45c:\te8 9f 7e fd ff       \tcallq  402300 <readdir64@plt>\n  42a461:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  42a465:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  42a46a:\t0f 85 2a ff ff ff    \tjne    42a39a <mbedtls_x509_crt_parse_path+0x48>\n  42a470:\t90                   \tnop\n  42a471:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  42a475:\t48 89 c7             \tmov    %rax,%rdi\n  42a478:\te8 13 7d fd ff       \tcallq  402190 <closedir@plt>\n  42a47d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42a480:\tc9                   \tleaveq \n  42a481:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_x509_crt_parse_path(_QWORD *a1, const char *a2) {\n  char <span class=\"supfact\">s</span>[Number];\n  struct stat64 <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  struct dirent64 *<span class=\"supfact\">v7</span>;\n  DIR *<span class=\"supfact\">dirp</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = Number;\n  <span class=\"supfact\">dirp</span> = opendir(a2);\n  if (!<span class=\"supfact\">dirp</span>)\n    return Number L;\n  while (Number) {\n    <span class=\"supfact\">v7</span> = readdir64(<span class=\"supfact\">dirp</span>);\n    if (!<span class=\"supfact\">v7</span>)\n      break;\n    <span class=\"supfact\">v6</span> = snprintf(<span class=\"supfact\">s</span>, Number, String, a2,\n                                  <span class=\"supfact\">v7</span>->d_name);\n    if ((<span class=\"supfact\">v6</span> & Number) != Number ||\n        <span class=\"supfact\">v6</span> > Number) {\n      <span class=\"supfact\">v9</span> = Number;\n      break;\n    }\n    if ((unsigned int)stat64(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v4</span>) ==\n        Number) {\n      <span class=\"supfact\">v9</span> = Number;\n      break;\n    }\n    if ((<span class=\"supfact\">v4</span>.st_mode & Number) == Number) {\n      <span class=\"supfact\">v5</span> =\n          mbedtls_x509_crt_parse_file(a1, (__int64)<span class=\"supfact\">s</span>);\n      if (<span class=\"supfact\">v5</span> >= Number)\n        <span class=\"supfact\">v9</span> += <span class=\"supfact\">v5</span>;\n      else\n        ++<span class=\"supfact\">v9</span>;\n    }\n  }\n  closedir(<span class=\"supfact\">dirp</span>);\n  return <span class=\"supfact\">v9</span>;\n}", "code_t": "int __cdecl mbedtls_x509_crt_parse_path(mbedtls_x509_crt_0 *chain,\n                                        const char *path) {\n  char <span class=\"supfact\">entry_name</span>[Number];\n  stat <span class=\"supfact\">sb</span>;\n  int <span class=\"supfact\">t_ret</span>;\n  int <span class=\"supfact\">snp_ret</span>;\n  dirent *<span class=\"supfact\">entry</span>;\n  DIR *<span class=\"supfact\">dir</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = Number;\n  <span class=\"supfact\">dir</span> = opendir(path);\n  if (!<span class=\"supfact\">dir</span>)\n    return Number;\n  while (Number) {\n    <span class=\"supfact\">entry</span> = (dirent *)readdir64(<span class=\"supfact\">dir</span>);\n    if (!<span class=\"supfact\">entry</span>)\n      break;\n    <span class=\"supfact\">snp_ret</span> =\n        snprintf(<span class=\"supfact\">entry_name</span>, Number, String, path,\n                 <span class=\"supfact\">entry</span>->d_name);\n    if (<span class=\"supfact\">snp_ret</span> < Number ||\n        (unsigned int)<span class=\"supfact\">snp_ret</span> > Number) {\n      <span class=\"supfact\">ret</span> = Number;\n      break;\n    }\n    if ((unsigned int)stat64(<span class=\"supfact\">entry_name</span>,\n                             (struct stat64 *)&<span class=\"supfact\">sb</span>) == Number) {\n      <span class=\"supfact\">ret</span> = Number;\n      break;\n    }\n    if ((<span class=\"supfact\">sb</span>.st_mode & Number) == Number) {\n      <span class=\"supfact\">t_ret</span> =\n          mbedtls_x509_crt_parse_file(chain, <span class=\"supfact\">entry_name</span>);\n      if (<span class=\"supfact\">t_ret</span> >= Number)\n        <span class=\"supfact\">ret</span> += <span class=\"supfact\">t_ret</span>;\n      else\n        ++<span class=\"supfact\">ret</span>;\n    }\n  }\n  closedir(<span class=\"supfact\">dir</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v4", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "sb", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "pfohjo", "repo_name": "nitro-qemu", "path": "pfohjo/nitro-qemu/51c19469e40ab9d6e7abb6f4803d78cc15e3451e9aca68b0da52a742aacd16e8", "path_in_repo": "pfohjo/nitro-qemu//util/qemu-thread-posix.o", "objdump": "00000000000009c2 <qemu_thread_create>:\n 9c2:\t55                   \tpush   %rbp\n 9c3:\t48 89 e5             \tmov    %rsp,%rbp\n 9c6:\t48 81 ec 80 01 00 00 \tsub    $0x180,%rsp\n 9cd:\t48 89 bd 98 fe ff ff \tmov    %rdi,-0x168(%rbp)\n 9d4:\t48 89 b5 90 fe ff ff \tmov    %rsi,-0x170(%rbp)\n 9db:\t48 89 95 88 fe ff ff \tmov    %rdx,-0x178(%rbp)\n 9e2:\t89 8d 84 fe ff ff    \tmov    %ecx,-0x17c(%rbp)\n 9e8:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 9ef:\t00 00 \n 9f1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 9f5:\t31 c0                \txor    %eax,%eax\n 9f7:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n 9fe:\t48 89 c7             \tmov    %rax,%rdi\n a01:\te8 00 00 00 00       \tcallq  a06 <qemu_thread_create+0x44>\n a06:\t89 85 ac fe ff ff    \tmov    %eax,-0x154(%rbp)\n a0c:\t83 bd ac fe ff ff 00 \tcmpl   $0x0,-0x154(%rbp)\n a13:\t74 14                \tje     a29 <qemu_thread_create+0x67>\n a15:\t8b 85 ac fe ff ff    \tmov    -0x154(%rbp),%eax\n a1b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # a22 <qemu_thread_create+0x60>\n a22:\t89 c7                \tmov    %eax,%edi\n a24:\te8 d7 f5 ff ff       \tcallq  0 <error_exit>\n a29:\t83 bd 84 fe ff ff 01 \tcmpl   $0x1,-0x17c(%rbp)\n a30:\t75 37                \tjne    a69 <qemu_thread_create+0xa7>\n a32:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n a39:\tbe 01 00 00 00       \tmov    $0x1,%esi\n a3e:\t48 89 c7             \tmov    %rax,%rdi\n a41:\te8 00 00 00 00       \tcallq  a46 <qemu_thread_create+0x84>\n a46:\t89 85 ac fe ff ff    \tmov    %eax,-0x154(%rbp)\n a4c:\t83 bd ac fe ff ff 00 \tcmpl   $0x0,-0x154(%rbp)\n a53:\t74 14                \tje     a69 <qemu_thread_create+0xa7>\n a55:\t8b 85 ac fe ff ff    \tmov    -0x154(%rbp),%eax\n a5b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # a62 <qemu_thread_create+0xa0>\n a62:\t89 c7                \tmov    %eax,%edi\n a64:\te8 97 f5 ff ff       \tcallq  0 <error_exit>\n a69:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n a70:\t48 89 c7             \tmov    %rax,%rdi\n a73:\te8 00 00 00 00       \tcallq  a78 <qemu_thread_create+0xb6>\n a78:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n a7f:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n a86:\t48 89 c6             \tmov    %rax,%rsi\n a89:\tbf 02 00 00 00       \tmov    $0x2,%edi\n a8e:\te8 00 00 00 00       \tcallq  a93 <qemu_thread_create+0xd1>\n a93:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n a9a:\t48 8b 8d 88 fe ff ff \tmov    -0x178(%rbp),%rcx\n aa1:\t48 8b 95 90 fe ff ff \tmov    -0x170(%rbp),%rdx\n aa8:\t48 8d b5 b0 fe ff ff \tlea    -0x150(%rbp),%rsi\n aaf:\t48 89 c7             \tmov    %rax,%rdi\n ab2:\te8 00 00 00 00       \tcallq  ab7 <qemu_thread_create+0xf5>\n ab7:\t89 85 ac fe ff ff    \tmov    %eax,-0x154(%rbp)\n abd:\t83 bd ac fe ff ff 00 \tcmpl   $0x0,-0x154(%rbp)\n ac4:\t74 14                \tje     ada <qemu_thread_create+0x118>\n ac6:\t8b 85 ac fe ff ff    \tmov    -0x154(%rbp),%eax\n acc:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # ad3 <qemu_thread_create+0x111>\n ad3:\t89 c7                \tmov    %eax,%edi\n ad5:\te8 26 f5 ff ff       \tcallq  0 <error_exit>\n ada:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n ae1:\tba 00 00 00 00       \tmov    $0x0,%edx\n ae6:\t48 89 c6             \tmov    %rax,%rsi\n ae9:\tbf 02 00 00 00       \tmov    $0x2,%edi\n aee:\te8 00 00 00 00       \tcallq  af3 <qemu_thread_create+0x131>\n af3:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n afa:\t48 89 c7             \tmov    %rax,%rdi\n afd:\te8 00 00 00 00       \tcallq  b02 <qemu_thread_create+0x140>\n b02:\t90                   \tnop\n b03:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n b07:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n b0e:\t00 00 \n b10:\t74 05                \tje     b17 <qemu_thread_create+0x155>\n b12:\te8 00 00 00 00       \tcallq  b17 <qemu_thread_create+0x155>\n b17:\tc9                   \tleaveq \n b18:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall qemu_thread_create(pthread_t *a1,\n                                               void *(*a2)(void *), void *a3,\n                                               int a4) {\n  int v7;\n  int v8;\n  int v9;\n  pthread_attr_t <span class=\"supfact\">attr</span>;\n  sigset_t <span class=\"supfact\">set</span>;\n  __sigset_t <span class=\"supfact\">oldmask</span>;\n  unsigned __int64 <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v13</span> = __readfsqword(Number);\n  v7 = pthread_attr_init(&<span class=\"supfact\">attr</span>);\n  if (v7)\n    error_exit(v7, String);\n  if (a4 == Number) {\n    v8 = pthread_attr_setdetachstate(&<span class=\"supfact\">attr</span>, Number);\n    if (v8)\n      error_exit(v8, String);\n  }\n  sigfillset(&<span class=\"supfact\">set</span>);\n  pthread_sigmask(Number, &<span class=\"supfact\">set</span>, &<span class=\"supfact\">oldmask</span>);\n  v9 = pthread_create(a1, &<span class=\"supfact\">attr</span>, a2, a3);\n  if (v9)\n    error_exit(v9, String);\n  pthread_sigmask(Number, &<span class=\"supfact\">oldmask</span>, Number L);\n  pthread_attr_destroy(&<span class=\"supfact\">attr</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v13</span>;\n}", "code_t": "void __cdecl qemu_thread_create(QemuThread_0 *thread,\n                                void *(*start_routine)(void *), void *arg,\n                                int mode) {\n  int err;\n  int erra;\n  int errb;\n  pthread_attr_t_0 <span class=\"supfact\">attr</span>;\n  sigset_t <span class=\"supfact\">set</span>;\n  sigset_t <span class=\"supfact\">oldset</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  err = pthread_attr_init(&<span class=\"supfact\">attr</span>);\n  if (err)\n    error_exit(err, String);\n  if (mode == Number) {\n    erra = pthread_attr_setdetachstate(&<span class=\"supfact\">attr</span>, Number);\n    if (erra)\n      error_exit(erra, String);\n  }\n  sigfillset(&<span class=\"supfact\">set</span>);\n  pthread_sigmask(Number, &<span class=\"supfact\">set</span>, &<span class=\"supfact\">oldset</span>);\n  errb = pthread_create(&thread->thread, &<span class=\"supfact\">attr</span>, start_routine,\n                        arg);\n  if (errb)\n    error_exit(errb, String);\n  pthread_sigmask(Number, &<span class=\"supfact\">oldset</span>, Number L);\n  pthread_attr_destroy(&<span class=\"supfact\">attr</span>);\n}", "var": [{"name": "oldmask", "type": "struct sigset_t { unsigned __int64[16] __val; }", "ref_name": "oldset", "ref_type": "struct sigset_t { unsigned __int64[16] __val; }"}, {"name": "set", "type": "struct sigset_t { unsigned __int64[16] __val; }", "ref_name": "set", "ref_type": "struct sigset_t { unsigned __int64[16] __val; }"}], "body_in_train": true}, {"repo_owner": "leecolleton", "repo_name": "gfiber-gflt100", "path": "leecolleton/gfiber-gflt100/e84162b2cbbaca8096ff3593f35a7ca3f9d6a11ae28681e782a6b3028cf587e9", "path_in_repo": "leecolleton/gfiber-gflt100/kernel/linux/Documentation/lguest/lguest", "objdump": "00000000004036fe <handle_console_input>:\n  4036fe:\t55                   \tpush   %rbp\n  4036ff:\t48 89 e5             \tmov    %rsp,%rbp\n  403702:\t53                   \tpush   %rbx\n  403703:\t48 83 ec 68          \tsub    $0x68,%rsp\n  403707:\t89 7d 9c             \tmov    %edi,-0x64(%rbp)\n  40370a:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n  40370e:\t48 89 e0             \tmov    %rsp,%rax\n  403711:\t48 89 c3             \tmov    %rax,%rbx\n  403714:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  403718:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  40371c:\t8b 40 18             \tmov    0x18(%rax),%eax\n  40371f:\t89 c2                \tmov    %eax,%edx\n  403721:\t48 83 ea 01          \tsub    $0x1,%rdx\n  403725:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  403729:\t89 c2                \tmov    %eax,%edx\n  40372b:\t49 89 d2             \tmov    %rdx,%r10\n  40372e:\t41 bb 00 00 00 00    \tmov    $0x0,%r11d\n  403734:\t89 c2                \tmov    %eax,%edx\n  403736:\t49 89 d0             \tmov    %rdx,%r8\n  403739:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  40373f:\t89 c0                \tmov    %eax,%eax\n  403741:\t48 c1 e0 04          \tshl    $0x4,%rax\n  403745:\t48 89 c2             \tmov    %rax,%rdx\n  403748:\tb8 10 00 00 00       \tmov    $0x10,%eax\n  40374d:\t48 83 e8 01          \tsub    $0x1,%rax\n  403751:\t48 01 d0             \tadd    %rdx,%rax\n  403754:\tbf 10 00 00 00       \tmov    $0x10,%edi\n  403759:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40375e:\t48 f7 f7             \tdiv    %rdi\n  403761:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n  403765:\t48 29 c4             \tsub    %rax,%rsp\n  403768:\t48 89 e0             \tmov    %rsp,%rax\n  40376b:\t48 83 c0 07          \tadd    $0x7,%rax\n  40376f:\t48 c1 e8 03          \tshr    $0x3,%rax\n  403773:\t48 c1 e0 03          \tshl    $0x3,%rax\n  403777:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40377b:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  40377f:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  403783:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  403787:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n  40378b:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  40378f:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  403793:\t48 8d 4d cc          \tlea    -0x34(%rbp),%rcx\n  403797:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n  40379b:\t48 89 c7             \tmov    %rax,%rdi\n  40379e:\te8 97 fb ff ff       \tcallq  40333a <get_vq_desc>\n  4037a3:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  4037a6:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  4037aa:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  4037ae:\t8b 40 18             \tmov    0x18(%rax),%eax\n  4037b1:\t39 45 d4             \tcmp    %eax,-0x2c(%rbp)\n  4037b4:\t75 0a                \tjne    4037c0 <handle_console_input+0xc2>\n  4037b6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4037bb:\te9 59 01 00 00       \tjmpq   403919 <handle_console_input+0x21b>\n  4037c0:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  4037c3:\t85 c0                \ttest   %eax,%eax\n  4037c5:\t74 14                \tje     4037db <handle_console_input+0xdd>\n  4037c7:\tbe d0 72 40 00       \tmov    $0x4072d0,%esi\n  4037cc:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4037d1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4037d6:\te8 25 e9 ff ff       \tcallq  402100 <errx@plt>\n  4037db:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  4037de:\t89 c2                \tmov    %eax,%edx\n  4037e0:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  4037e4:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  4037e8:\t8b 40 18             \tmov    0x18(%rax),%eax\n  4037eb:\t48 89 ce             \tmov    %rcx,%rsi\n  4037ee:\t89 c7                \tmov    %eax,%edi\n  4037f0:\te8 bb ea ff ff       \tcallq  4022b0 <readv@plt>\n  4037f5:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  4037f8:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n  4037fc:\t7f 2e                \tjg     40382c <handle_console_input+0x12e>\n  4037fe:\tbf f8 72 40 00       \tmov    $0x4072f8,%edi\n  403803:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403808:\te8 23 e9 ff ff       \tcallq  402130 <warnx@plt>\n  40380d:\te8 d1 fe ff ff       \tcallq  4036e3 <restore_term>\n  403812:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  403816:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  40381a:\t48 c7 40 40 00 00 00 \tmovq   $0x0,0x40(%rax)\n  403821:\t00 \n  403822:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403827:\te9 ed 00 00 00       \tjmpq   403919 <handle_console_input+0x21b>\n  40382c:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  403830:\t48 8b 70 28          \tmov    0x28(%rax),%rsi\n  403834:\t8b 4d d0             \tmov    -0x30(%rbp),%ecx\n  403837:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  40383a:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  40383d:\t89 c7                \tmov    %eax,%edi\n  40383f:\te8 62 fe ff ff       \tcallq  4036a6 <add_used_and_trigger>\n  403844:\t83 7d d0 01          \tcmpl   $0x1,-0x30(%rbp)\n  403848:\t0f 85 b9 00 00 00    \tjne    403907 <handle_console_input+0x209>\n  40384e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  403852:\t48 8b 00             \tmov    (%rax),%rax\n  403855:\t0f b6 00             \tmovzbl (%rax),%eax\n  403858:\t3c 03                \tcmp    $0x3,%al\n  40385a:\t0f 85 a7 00 00 00    \tjne    403907 <handle_console_input+0x209>\n  403860:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403864:\t8b 00                \tmov    (%rax),%eax\n  403866:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  403869:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  40386d:\t89 0a                \tmov    %ecx,(%rdx)\n  40386f:\t85 c0                \ttest   %eax,%eax\n  403871:\t75 1a                \tjne    40388d <handle_console_input+0x18f>\n  403873:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403877:\t48 83 c0 08          \tadd    $0x8,%rax\n  40387b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  403880:\t48 89 c7             \tmov    %rax,%rdi\n  403883:\te8 c8 e8 ff ff       \tcallq  402150 <gettimeofday@plt>\n  403888:\te9 86 00 00 00       \tjmpq   403913 <handle_console_input+0x215>\n  40388d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403891:\t8b 00                \tmov    (%rax),%eax\n  403893:\t83 f8 03             \tcmp    $0x3,%eax\n  403896:\t75 7b                \tjne    403913 <handle_console_input+0x215>\n  403898:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  40389c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4038a1:\t48 89 c7             \tmov    %rax,%rdi\n  4038a4:\te8 a7 e8 ff ff       \tcallq  402150 <gettimeofday@plt>\n  4038a9:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  4038ad:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4038b1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4038b5:\t48 83 c0 01          \tadd    $0x1,%rax\n  4038b9:\t48 39 c2             \tcmp    %rax,%rdx\n  4038bc:\t7f 3d                \tjg     4038fb <handle_console_input+0x1fd>\n  4038be:\t48 c7 45 a0 03 00 00 \tmovq   $0x3,-0x60(%rbp)\n  4038c5:\t00 \n  4038c6:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n  4038cd:\t00 \n  4038ce:\t8b 05 70 6b 00 00    \tmov    0x6b70(%rip),%eax        # 40a444 <waker_fds+0x4>\n  4038d4:\t89 c7                \tmov    %eax,%edi\n  4038d6:\te8 d5 e8 ff ff       \tcallq  4021b0 <close@plt>\n  4038db:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n  4038df:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  4038e2:\tba 10 00 00 00       \tmov    $0x10,%edx\n  4038e7:\t48 89 ce             \tmov    %rcx,%rsi\n  4038ea:\t89 c7                \tmov    %eax,%edi\n  4038ec:\te8 cf e7 ff ff       \tcallq  4020c0 <write@plt>\n  4038f1:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  4038f6:\te8 35 ea ff ff       \tcallq  402330 <exit@plt>\n  4038fb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4038ff:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  403905:\teb 0c                \tjmp    403913 <handle_console_input+0x215>\n  403907:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40390b:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  403911:\teb 01                \tjmp    403914 <handle_console_input+0x216>\n  403913:\t90                   \tnop\n  403914:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  403919:\t48 89 dc             \tmov    %rbx,%rsp\n  40391c:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n  403920:\tc9                   \tleaveq \n  403921:\tc3                   \tretq   ", "code_s": "__int64 __fastcall handle_console_input(int a1, __int64 a2) {\n  unsigned int v2;\n  void *v3;\n  __int64 result;\n  __int64 <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">fd</span>;\n  __int64 <span class=\"supfact\">buf</span>[Number];\n  struct timeval <span class=\"supfact\">tv</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">count</span>;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  struct <span class=\"supfact\">iovec</span> *<span class=\"supfact\">iovec</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  <span class=\"supfact\">fd</span> = a1;\n  <span class=\"supfact\">v6</span> = a2;\n  v2 = *(_DWORD *)(*(_QWORD *)(a2 + Number) + Number L);\n  <span class=\"supfact\">v16</span> = v2 - Number L;\n  v3 = alloca(Number * ((Number * (unsigned __int64)v2 + Number) / Number));\n  <span class=\"supfact\">iovec</span> =\n      (struct <span class=\"supfact\">iovec</span> *)(Number *\n                                       (((unsigned __int64)&<span class=\"supfact\">v6</span> +\n                                         Number) >>\n                                        Number));\n  <span class=\"supfact\">v14</span> = *(_QWORD *)(a2 + Number);\n  <span class=\"supfact\">v13</span> =\n      get_vq_desc(*(_QWORD *)(a2 + Number), (__int64)<span class=\"supfact\">iovec</span>,\n                  &<span class=\"supfact\">v10</span>, &<span class=\"supfact\">count</span>);\n  if (<span class=\"supfact\">v13</span> ==\n      *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number) + Number L))\n    return Number L;\n  if (<span class=\"supfact\">v10</span>)\n    errx(Number, String);\n  <span class=\"supfact\">v12</span> = readv(*(_DWORD *)(<span class=\"supfact\">v6</span> + Number),\n                              <span class=\"supfact\">iovec</span>, <span class=\"supfact\">count</span>);\n  if (<span class=\"supfact\">v12</span> > Number) {\n    add_used_and_trigger(<span class=\"supfact\">fd</span>,\n                         *(_QWORD *)(<span class=\"supfact\">v6</span> + Number),\n                         <span class=\"supfact\">v13</span>, <span class=\"supfact\">v12</span>);\n    if (<span class=\"supfact\">v12</span> == Number &&\n        *(_BYTE *)<span class=\"supfact\">iovec</span>->iov_base == Number) {\n      if ((*(_DWORD *)<span class=\"supfact\">v14</span>)++) {\n        if (*(_DWORD *)<span class=\"supfact\">v14</span> == Number) {\n          gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n          if (<span class=\"supfact\">tv</span>.tv_sec <=\n              *(_QWORD *)(<span class=\"supfact\">v14</span> + Number) + Number L) {\n            <span class=\"supfact\">buf</span>[Number] = Number L;\n            <span class=\"supfact\">buf</span>[Number] = Number L;\n            close(<span class=\"supfact\">fd</span>);\n            write(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, Number);\n            exit(Number);\n          }\n          *(_DWORD *)<span class=\"supfact\">v14</span> = Number;\n        }\n      } else {\n        gettimeofday((struct timeval *)(<span class=\"supfact\">v14</span> + Number),\n                     Number L);\n      }\n    } else {\n      *(_DWORD *)<span class=\"supfact\">v14</span> = Number;\n    }\n    result = Number L;\n  } else {\n    warnx(String);\n    restore_term();\n    *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number) + Number L) = Number L;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "bool __cdecl handle_console_input(int fd, device *dev) {\n  unsigned int v2;\n  void *v3;\n  bool result;\n  device *<span class=\"supfact\">deva</span>;\n  int <span class=\"supfact\">fda</span>;\n  unsigned __int64 <span class=\"supfact\">args</span>[Number];\n  timeval <span class=\"supfact\">now</span>;\n  unsigned int <span class=\"supfact\">out_num</span>;\n  unsigned int <span class=\"supfact\">in_num</span>;\n  int <span class=\"supfact\">len</span>;\n  unsigned int <span class=\"supfact\">head</span>;\n  console_abort *<span class=\"supfact\">abort</span>;\n  iovec(*<span class=\"supfact\">p_iov</span>)[];\n  __int64 <span class=\"supfact\">v16</span>;\n  <span class=\"supfact\">fda</span> = fd;\n  <span class=\"supfact\">deva</span> = dev;\n  v2 = dev->vq->vring.num;\n  <span class=\"supfact\">v16</span> = v2 - Number L;\n  v3 = alloca(Number * ((Number * (unsigned __int64)v2 + Number) / Number));\n  <span class=\"supfact\">p_iov</span> = (iovec(*)[])(\n      Number * (((unsigned __int64)&<span class=\"supfact\">deva</span> + Number) >> Number));\n  <span class=\"supfact\">abort</span> = (console_abort *)dev->priv;\n  <span class=\"supfact\">head</span> =\n      get_vq_desc(dev->vq, (iovec *)<span class=\"supfact\">p_iov</span>,\n                  &<span class=\"supfact\">out_num</span>, &<span class=\"supfact\">in_num</span>);\n  if (<span class=\"supfact\">head</span> == <span class=\"supfact\">deva</span>->vq->vring.num)\n    return Number;\n  if (<span class=\"supfact\">out_num</span>)\n    errx(Number, String);\n  <span class=\"supfact\">len</span> = readv(<span class=\"supfact\">deva</span>->fd,\n                              (const struct iovec *)<span class=\"supfact\">p_iov</span>,\n                              <span class=\"supfact\">in_num</span>);\n  if (<span class=\"supfact\">len</span> > Number) {\n    add_used_and_trigger(<span class=\"supfact\">fda</span>, <span class=\"supfact\">deva</span>->vq,\n                         <span class=\"supfact\">head</span>, <span class=\"supfact\">len</span>);\n    if (<span class=\"supfact\">len</span> == Number &&\n        **(_BYTE **)<span class=\"supfact\">p_iov</span> == Number) {\n      if (<span class=\"supfact\">abort</span>->count++) {\n        if (<span class=\"supfact\">abort</span>->count == Number) {\n          gettimeofday(&<span class=\"supfact\">now</span>, Number L);\n          if (<span class=\"supfact\">now</span>.tv_sec <=\n              <span class=\"supfact\">abort</span>->start.tv_sec + Number) {\n            <span class=\"supfact\">args</span>[Number] = Number L;\n            <span class=\"supfact\">args</span>[Number] = Number L;\n            close(waker_fds.pipe[Number]);\n            write(<span class=\"supfact\">fda</span>, <span class=\"supfact\">args</span>, Number);\n            exit(Number);\n          }\n          <span class=\"supfact\">abort</span>->count = Number;\n        }\n      } else {\n        gettimeofday(&<span class=\"supfact\">abort</span>->start, Number L);\n      }\n    } else {\n      <span class=\"supfact\">abort</span>->count = Number;\n    }\n    result = Number;\n  } else {\n    warnx(String);\n    restore_term();\n    <span class=\"supfact\">deva</span>->vq->handle_output = Number L;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "axbaretto", "repo_name": "torch", "path": "axbaretto/torch/ccd3b3108ab02956fcf5f1d14c863baa19c4e9dc4bbd0ade6143e963a6af6a09", "path_in_repo": "axbaretto/torch/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  14:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  18:\t48 89 d6             \tmov    %rdx,%rsi\n  1b:\t48 89 c7             \tmov    %rax,%rdi\n  1e:\te8 00 00 00 00       \tcallq  23 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing8internal12CallReactionEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv+0x23>\n  23:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  27:\tc9                   \tleaveq \n  28:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std _Rb_tree<\n    void const *, std pair<void const *const, testing internal CallReaction>,\n    std _Select1st<std pair<void const *const, testing internal CallReaction>>,\n    std less<void const *>,\n    std allocator<std pair<void const *const, testing internal CallReaction>>>\nend(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  std _Rb_tree_iterator<\n      std pair<void const *const, testing internal CallReaction>>\n      _Rb_tree_iterator(&<span class=\"supfact\">v2</span>, a1 + Number);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std _Rb_tree<\n    void const *, std pair<void const *const, testing internal CallReaction>,\n    std _Select1st<std pair<void const *const, testing internal CallReaction>>,\n    std less<void const *>,\n    std allocator<std pair<void const *const, testing internal CallReaction>>>\n    iterator __cdecl std _Rb_tree<\n        void const *,\n        std pair<void const *const, testing internal CallReaction>,\n        std _Select1st<\n            std pair<void const *const, testing internal CallReaction>>,\n        std less<void const *>,\n        std allocator<\n            std pair<void const *const, testing internal CallReaction>>>\n    end(std _Rb_tree<void const *,\n                     std pair<void const *const, testing internal CallReaction>,\n                     std _Select1st<std pair<void const *const,\n                                             testing internal CallReaction>>,\n                     std less<void const *>,\n                     std allocator<std pair<void const *const,\n                                            testing internal CallReaction>>>\n            *const this) {\n  std _Rb_tree_iterator<\n      std pair<void const *const, testing internal CallReaction>>\n      <span class=\"supfact\">v2</span>;\n  std _Rb_tree_iterator<\n      std pair<void const *const, testing internal CallReaction>>\n      _Rb_tree_iterator(&<span class=\"supfact\">v2</span>, &this->_M_impl._M_header);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "struct std::_Rb_tree_const_iterator<std::pair<void const* const,testing::internal::CallReaction> > { std::_Rb_tree_const_iterator<std::pair<void const* const,testing::internal::CallReaction> >::_Base_ptr _M_node; }", "ref_name": "v2", "ref_type": "struct std::_Rb_tree_iterator<std::pair<void const* const,testing::internal::CallReaction> > { std::_Rb_tree_iterator<std::pair<void const* const,testing::internal::CallReaction> >::_Base_ptr _M_node; }"}], "body_in_train": true}, {"repo_owner": "buf1024", "repo_name": "redis-annotate", "path": "buf1024/redis-annotate/6aebec2e4c235bf7561d12fa3304bbb46c400f7f4d1bc9102c75e6ab872129da", "path_in_repo": "buf1024/redis-annotate/src/debug.o", "objdump": "00000000000027b7 <disableWatchdog>:\n    27b7:\t55                   \tpush   %rbp\n    27b8:\t48 89 e5             \tmov    %rsp,%rbp\n    27bb:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n    27c2:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 27c8 <disableWatchdog+0x11>\n    27c8:\t85 c0                \ttest   %eax,%eax\n    27ca:\t74 54                \tje     2820 <disableWatchdog+0x69>\n    27cc:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    27d1:\te8 00 00 00 00       \tcallq  27d6 <disableWatchdog+0x1f>\n    27d6:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    27dd:\t48 83 c0 08          \tadd    $0x8,%rax\n    27e1:\t48 89 c7             \tmov    %rax,%rdi\n    27e4:\te8 00 00 00 00       \tcallq  27e9 <disableWatchdog+0x32>\n    27e9:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n    27f0:\t48 c7 85 60 ff ff ff \tmovq   $0x1,-0xa0(%rbp)\n    27f7:\t01 00 00 00 \n    27fb:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    2802:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2807:\t48 89 c6             \tmov    %rax,%rsi\n    280a:\tbf 0e 00 00 00       \tmov    $0xe,%edi\n    280f:\te8 00 00 00 00       \tcallq  2814 <disableWatchdog+0x5d>\n    2814:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 281e <disableWatchdog+0x67>\n    281b:\t00 00 00 \n    281e:\teb 01                \tjmp    2821 <disableWatchdog+0x6a>\n    2820:\t90                   \tnop\n    2821:\tc9                   \tleaveq \n    2822:\tc3                   \tretq   \n", "code_s": "int disableWatchdog() {\n  int result;\n  struct sigaction <span class=\"supfact\">v1</span>;\n  result = server[Number];\n  if (result) {\n    watchdogScheduleSignal(Number);\n    sigemptyset(&<span class=\"supfact\">v1</span>.sa_mask);\n    <span class=\"supfact\">v1</span>.sa_flags = Number;\n    <span class=\"supfact\">v1</span>.sa_handler = (__sighandler_t)&loc_1;\n    result = sigaction(Number, &<span class=\"supfact\">v1</span>, Number L);\n    server[Number] = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl disableWatchdog() {\n  sigaction <span class=\"supfact\">act</span>;\n  if (LODWORD(server[Number])) {\n    watchdogScheduleSignal(Number);\n    sigemptyset(&<span class=\"supfact\">act</span>.sa_mask);\n    <span class=\"supfact\">act</span>.sa_flags = Number;\n    <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)&loc_1;\n    sigaction_0(Number, &<span class=\"supfact\">act</span>, Number L);\n    LODWORD(server[Number]) = Number;\n  }\n}", "var": [{"name": "v1", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": false}, {"repo_owner": "pamtabak", "repo_name": "CAD", "path": "pamtabak/CAD/ac3874a765a79d0c89c46522df8540b55c80d83494a4942f2a2362b50eb59dcb", "path_in_repo": "pamtabak/CAD/Trabalho1/Perfiladores/papi-5.3.0/src/libpfm4/perf_examples/x86/bts_smpl", "objdump": "00000000004047a6 <display_exit>:\n  4047a6:\t55                   \tpush   %rbp\n  4047a7:\t48 89 e5             \tmov    %rsp,%rbp\n  4047aa:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4047ae:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4047b2:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  4047b6:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  4047ba:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4047be:\tba 10 00 00 00       \tmov    $0x10,%edx\n  4047c3:\t48 89 ce             \tmov    %rcx,%rsi\n  4047c6:\t48 89 c7             \tmov    %rax,%rdi\n  4047c9:\te8 ab ee ff ff       \tcallq  403679 <perf_read_buffer>\n  4047ce:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4047d1:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4047d5:\t74 11                \tje     4047e8 <display_exit+0x42>\n  4047d7:\tbf dd 76 41 00       \tmov    $0x4176dd,%edi\n  4047dc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4047e1:\te8 8a d9 ff ff       \tcallq  402170 <warnx@plt>\n  4047e6:\teb 19                \tjmp    404801 <display_exit+0x5b>\n  4047e8:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  4047eb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4047ef:\tbe f3 76 41 00       \tmov    $0x4176f3,%esi\n  4047f4:\t48 89 c7             \tmov    %rax,%rdi\n  4047f7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4047fc:\te8 4f da ff ff       \tcallq  402250 <fprintf@plt>\n  404801:\tc9                   \tleaveq \n  404802:\tc3                   \tretq   ", "code_s": "void __fastcall display_exit(__int64 a1, FILE *a2) {\n  unsigned int <span class=\"supfact\">v2</span>[Number];\n  if ((unsigned int)perf_read_buffer(a1, (char *)<span class=\"supfact\">v2</span>, Number))\n    warnx(String);\n  else\n    fprintf(a2, String, <span class=\"supfact\">v2</span>[Number]);\n}", "code_t": "void __cdecl display_exit(perf_event_desc_t *hw, FILE *fp) {\n  display_exit $65EC0E300FDD1DD6C35CB92DAD3340B2 <span class=\"supfact\">grp</span>;\n  if (perf_read_buffer(hw, &<span class=\"supfact\">grp</span>, Number))\n    warnx(String);\n  else\n    fprintf(fp, String, (unsigned int)<span class=\"supfact\">grp</span>.pid);\n}", "var": [{"name": "v2", "type": "struct display_exit::$65EC0E300FDD1DD6C35CB92DAD3340B2 { pid_t pid; pid_t ppid; pid_t tid; pid_t ptid; }", "ref_name": "grp", "ref_type": "struct display_exit::$65EC0E300FDD1DD6C35CB92DAD3340B2 { pid_t pid; pid_t ppid; pid_t tid; pid_t ptid; }"}], "body_in_train": true}, {"repo_owner": "kamontat", "repo_name": "PAPI-Matrix", "path": "kamontat/PAPI-Matrix/deb390af6adc7095191e3bf11f258a39ad6a7a0f705d29592fa160ce30193633", "path_in_repo": "kamontat/PAPI-Matrix/papi-5.5.1/src/libpfm-3.y/examples_v2.x/check_events", "objdump": "0000000000410148 <pfm_nhm_get_event_code>:\n  410148:\t55                   \tpush   %rbp\n  410149:\t48 89 e5             \tmov    %rsp,%rbp\n  41014c:\t48 83 ec 50          \tsub    $0x50,%rsp\n  410150:\t89 7d bc             \tmov    %edi,-0x44(%rbp)\n  410153:\t89 75 b8             \tmov    %esi,-0x48(%rbp)\n  410156:\t48 89 55 b0          \tmov    %rdx,-0x50(%rbp)\n  41015a:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  41015e:\t48 89 c7             \tmov    %rax,%rdi\n  410161:\te8 ba 28 ff ff       \tcallq  402a20 <pfm_get_impl_counters>\n  410166:\t83 7d b8 ff          \tcmpl   $0xffffffff,-0x48(%rbp)\n  41016a:\t74 22                \tje     41018e <pfm_nhm_get_event_code+0x46>\n  41016c:\t83 7d b8 1c          \tcmpl   $0x1c,-0x48(%rbp)\n  410170:\t77 15                \tja     410187 <pfm_nhm_get_event_code+0x3f>\n  410172:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n  410175:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  410179:\t89 d6                \tmov    %edx,%esi\n  41017b:\t48 89 c7             \tmov    %rax,%rdi\n  41017e:\te8 10 cb ff ff       \tcallq  40cc93 <pfm_regmask_isset>\n  410183:\t85 c0                \ttest   %eax,%eax\n  410185:\t75 07                \tjne    41018e <pfm_nhm_get_event_code+0x46>\n  410187:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n  41018c:\teb 1a                \tjmp    4101a8 <pfm_nhm_get_event_code+0x60>\n  41018e:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  410191:\t89 c7                \tmov    %eax,%edi\n  410193:\te8 a7 cc ff ff       \tcallq  40ce3f <get_nhm_entry>\n  410198:\t8b 40 10             \tmov    0x10(%rax),%eax\n  41019b:\t89 c2                \tmov    %eax,%edx\n  41019d:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  4101a1:\t89 10                \tmov    %edx,(%rax)\n  4101a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4101a8:\tc9                   \tleaveq \n  4101a9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pfm_nhm_get_event_code(unsigned int a1, unsigned int a2,\n                                          _DWORD *a3) {\n  char <span class=\"supfact\">v5</span>[Number];\n  pfm_get_impl_counters(<span class=\"supfact\">v5</span>);\n  if (a2 != Number &&\n      (a2 > Number || !pfm_regmask_isset_5((__int64)<span class=\"supfact\">v5</span>, a2)))\n    return Number L;\n  *a3 = *(_DWORD *)(get_nhm_entry(a1) + Number);\n  return Number L;\n}", "code_t": "int __cdecl pfm_nhm_get_event_code(unsigned int i, unsigned int cnt,\n                                   int *code) {\n  pfmlib_regmask_t <span class=\"supfact\">cnts</span>;\n  pfm_get_impl_counters(&<span class=\"supfact\">cnts</span>);\n  if (cnt != Number &&\n      (cnt > Number || !pfm_regmask_isset_5(&<span class=\"supfact\">cnts</span>, cnt)))\n    return Number;\n  *code = get_nhm_entry(i)->pme_code;\n  return Number;\n}", "var": [{"name": "v5", "type": "struct pfmlib_regmask_t { pfmlib_regmask_bits_t[8] bits; }", "ref_name": "cnts", "ref_type": "struct pfmlib_regmask_t { pfmlib_regmask_bits_t[8] bits; }"}], "body_in_train": true}, {"repo_owner": "a110605", "repo_name": "optimized_qemu", "path": "a110605/optimized_qemu/8f96972ace4ca96b91ac886c6caff4b57bd0271777efd1bcee047994438e5b31", "path_in_repo": "a110605/optimized_qemu//qemu-io", "objdump": "0000000000438c74 <do_send_recv>:\n  438c74:\t55                   \tpush   %rbp\n  438c75:\t48 89 e5             \tmov    %rsp,%rbp\n  438c78:\t48 83 ec 70          \tsub    $0x70,%rsp\n  438c7c:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n  438c7f:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  438c83:\t89 55 a8             \tmov    %edx,-0x58(%rbp)\n  438c86:\t89 4d 9c             \tmov    %ecx,-0x64(%rbp)\n  438c89:\t44 89 45 98          \tmov    %r8d,-0x68(%rbp)\n  438c8d:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  438c94:\t00 00 \n  438c96:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  438c9a:\t31 c0                \txor    %eax,%eax\n  438c9c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  438ca0:\tba 38 00 00 00       \tmov    $0x38,%edx\n  438ca5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  438caa:\t48 89 c7             \tmov    %rax,%rdi\n  438cad:\te8 be a3 fc ff       \tcallq  403070 <memset@plt>\n  438cb2:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  438cb6:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  438cba:\t48 c7 45 d8 01 00 00 \tmovq   $0x1,-0x28(%rbp)\n  438cc1:\t00 \n  438cc2:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  438cc5:\t01 45 a8             \tadd    %eax,-0x58(%rbp)\n  438cc8:\teb 23                \tjmp    438ced <do_send_recv+0x79>\n  438cca:\t8b 55 a8             \tmov    -0x58(%rbp),%edx\n  438ccd:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  438cd1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  438cd5:\t29 c2                \tsub    %eax,%edx\n  438cd7:\t89 d0                \tmov    %edx,%eax\n  438cd9:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n  438cdc:\t48 83 45 a0 10       \taddq   $0x10,-0x60(%rbp)\n  438ce1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  438ce5:\t48 83 c0 01          \tadd    $0x1,%rax\n  438ce9:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  438ced:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  438cf1:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  438cf5:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n  438cf8:\t48 98                \tcltq   \n  438cfa:\t48 39 c2             \tcmp    %rax,%rdx\n  438cfd:\t72 cb                \tjb     438cca <do_send_recv+0x56>\n  438cff:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  438d03:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  438d07:\t89 c2                \tmov    %eax,%edx\n  438d09:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n  438d0c:\t29 c2                \tsub    %eax,%edx\n  438d0e:\t89 d0                \tmov    %edx,%eax\n  438d10:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n  438d13:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  438d17:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  438d1b:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  438d1e:\t48 98                \tcltq   \n  438d20:\t48 29 c2             \tsub    %rax,%rdx\n  438d23:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  438d27:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  438d2b:\teb 2a                \tjmp    438d57 <do_send_recv+0xe3>\n  438d2d:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n  438d30:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438d34:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  438d38:\t29 c2                \tsub    %eax,%edx\n  438d3a:\t89 d0                \tmov    %edx,%eax\n  438d3c:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n  438d3f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438d43:\t48 83 c0 10          \tadd    $0x10,%rax\n  438d47:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  438d4b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  438d4f:\t48 83 e8 01          \tsub    $0x1,%rax\n  438d53:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  438d57:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438d5b:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  438d5f:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  438d62:\t48 98                \tcltq   \n  438d64:\t48 39 c2             \tcmp    %rax,%rdx\n  438d67:\t76 c4                \tjbe    438d2d <do_send_recv+0xb9>\n  438d69:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438d6d:\t48 8b 08             \tmov    (%rax),%rcx\n  438d70:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  438d73:\t48 63 d0             \tmovslq %eax,%rdx\n  438d76:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438d7a:\t48 01 ca             \tadd    %rcx,%rdx\n  438d7d:\t48 89 10             \tmov    %rdx,(%rax)\n  438d80:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438d84:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  438d88:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  438d8b:\t48 63 d0             \tmovslq %eax,%rdx\n  438d8e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438d92:\t48 29 d1             \tsub    %rdx,%rcx\n  438d95:\t48 89 ca             \tmov    %rcx,%rdx\n  438d98:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  438d9c:\t83 7d 98 00          \tcmpl   $0x0,-0x68(%rbp)\n  438da0:\t74 1b                \tje     438dbd <do_send_recv+0x149>\n  438da2:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n  438da6:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  438da9:\tba 00 00 00 00       \tmov    $0x0,%edx\n  438dae:\t48 89 ce             \tmov    %rcx,%rsi\n  438db1:\t89 c7                \tmov    %eax,%edi\n  438db3:\te8 c8 a6 fc ff       \tcallq  403480 <sendmsg@plt>\n  438db8:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n  438dbb:\teb 19                \tjmp    438dd6 <do_send_recv+0x162>\n  438dbd:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n  438dc1:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  438dc4:\tba 00 00 00 00       \tmov    $0x0,%edx\n  438dc9:\t48 89 ce             \tmov    %rcx,%rsi\n  438dcc:\t89 c7                \tmov    %eax,%edi\n  438dce:\te8 4d a3 fc ff       \tcallq  403120 <recvmsg@plt>\n  438dd3:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n  438dd6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438dda:\t48 8b 10             \tmov    (%rax),%rdx\n  438ddd:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  438de0:\t48 98                \tcltq   \n  438de2:\t48 f7 d8             \tneg    %rax\n  438de5:\t48 89 c1             \tmov    %rax,%rcx\n  438de8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438dec:\t48 01 ca             \tadd    %rcx,%rdx\n  438def:\t48 89 10             \tmov    %rdx,(%rax)\n  438df2:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438df6:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  438dfa:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  438dfd:\t48 63 d0             \tmovslq %eax,%rdx\n  438e00:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  438e04:\t48 01 ca             \tadd    %rcx,%rdx\n  438e07:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  438e0b:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  438e0f:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  438e13:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  438e16:\t48 98                \tcltq   \n  438e18:\t48 01 c2             \tadd    %rax,%rdx\n  438e1b:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  438e1f:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  438e23:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n  438e26:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n  438e2a:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n  438e31:\t00 00 \n  438e33:\t74 05                \tje     438e3a <do_send_recv+0x1c6>\n  438e35:\te8 36 a8 fc ff       \tcallq  403670 <__stack_chk_fail@plt>\n  438e3a:\tc9                   \tleaveq \n  438e3b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_send_recv(int a1, struct iovec *a2, int a3, int a4,\n                                int a5) {\n  struct iovec *<span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  struct msghdr <span class=\"supfact\">s</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v8</span> = a2;\n  <span class=\"supfact\">v14</span> = __readfsqword(Number);\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.msg_iov = a2;\n  <span class=\"supfact\">s</span>.msg_iovlen = Number L;\n  <span class=\"supfact\">v10</span> = a4 + a3;\n  while (<span class=\"supfact\">v8</span>->iov_len < <span class=\"supfact\">v10</span>) {\n    <span class=\"supfact\">v10</span> -= <span class=\"supfact\">v8</span>->iov_len;\n    ++<span class=\"supfact\">v8</span>;\n    ++<span class=\"supfact\">s</span>.msg_iovlen;\n  }\n  <span class=\"supfact\">v12</span> = <span class=\"supfact\">v8</span>->iov_len - <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v8</span>->iov_len -= <span class=\"supfact\">v12</span>;\n  while (<span class=\"supfact\">s</span>.msg_iov->iov_len <= a4) {\n    a4 -= <span class=\"supfact\">s</span>.msg_iov->iov_len;\n    ++<span class=\"supfact\">s</span>.msg_iov;\n    --<span class=\"supfact\">s</span>.msg_iovlen;\n  }\n  <span class=\"supfact\">s</span>.msg_iov->iov_base =\n      (char *)<span class=\"supfact\">s</span>.msg_iov->iov_base + a4;\n  <span class=\"supfact\">s</span>.msg_iov->iov_len -= a4;\n  if (a5)\n    <span class=\"supfact\">v11</span> = sendmsg(a1, &<span class=\"supfact\">s</span>, Number);\n  else\n    <span class=\"supfact\">v11</span> = recvmsg(a1, &<span class=\"supfact\">s</span>, Number);\n  <span class=\"supfact\">s</span>.msg_iov->iov_base =\n      (char *)<span class=\"supfact\">s</span>.msg_iov->iov_base - a4;\n  <span class=\"supfact\">s</span>.msg_iov->iov_len += a4;\n  <span class=\"supfact\">v8</span>->iov_len += <span class=\"supfact\">v12</span>;\n  return <span class=\"supfact\">v11</span>;\n}", "code_t": "int __cdecl do_send_recv(int sockfd, iovec *iov, int len, int offset,\n                         int write) {\n  iovec *<span class=\"supfact\">iova</span>;\n  int <span class=\"supfact\">lena</span>;\n  int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">diff</span>;\n  msghdr <span class=\"supfact\">msg</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">iova</span> = iov;\n  <span class=\"supfact\">v14</span> = __readfsqword(Number);\n  memset(&<span class=\"supfact\">msg</span>, Number, sizeof(<span class=\"supfact\">msg</span>));\n  <span class=\"supfact\">msg</span>.msg_iov = iov;\n  <span class=\"supfact\">msg</span>.msg_iovlen = Number L;\n  <span class=\"supfact\">lena</span> = offset + len;\n  while (<span class=\"supfact\">iova</span>->iov_len < <span class=\"supfact\">lena</span>) {\n    <span class=\"supfact\">lena</span> -= <span class=\"supfact\">iova</span>->iov_len;\n    ++<span class=\"supfact\">iova</span>;\n    ++<span class=\"supfact\">msg</span>.msg_iovlen;\n  }\n  <span class=\"supfact\">diff</span> = <span class=\"supfact\">iova</span>->iov_len - <span class=\"supfact\">lena</span>;\n  <span class=\"supfact\">iova</span>->iov_len -= <span class=\"supfact\">diff</span>;\n  while (<span class=\"supfact\">msg</span>.msg_iov->iov_len <= offset) {\n    offset -= <span class=\"supfact\">msg</span>.msg_iov->iov_len;\n    ++<span class=\"supfact\">msg</span>.msg_iov;\n    --<span class=\"supfact\">msg</span>.msg_iovlen;\n  }\n  <span class=\"supfact\">msg</span>.msg_iov->iov_base =\n      (char *)<span class=\"supfact\">msg</span>.msg_iov->iov_base + offset;\n  <span class=\"supfact\">msg</span>.msg_iov->iov_len -= offset;\n  if (write)\n    <span class=\"supfact\">ret</span> = sendmsg(sockfd, &<span class=\"supfact\">msg</span>, Number);\n  else\n    <span class=\"supfact\">ret</span> = recvmsg(sockfd, &<span class=\"supfact\">msg</span>, Number);\n  <span class=\"supfact\">msg</span>.msg_iov->iov_base =\n      (char *)<span class=\"supfact\">msg</span>.msg_iov->iov_base - offset;\n  <span class=\"supfact\">msg</span>.msg_iov->iov_len += offset;\n  <span class=\"supfact\">iova</span>->iov_len += <span class=\"supfact\">diff</span>;\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "s", "type": "struct msghdr { void * msg_name; socklen_t msg_namelen; PADDING (4); iovec * msg_iov; size_t msg_iovlen; void * msg_control; size_t msg_controllen; int msg_flags; PADDING (4); }", "ref_name": "msg", "ref_type": "struct msghdr { void * msg_name; socklen_t msg_namelen; PADDING (4); iovec * msg_iov; size_t msg_iovlen; void * msg_control; size_t msg_controllen; int msg_flags; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/34b7f187500561c3f6803653c55dfcd86fa3fb0dd7c795cf9dc12c3a9f075d5c", "path_in_repo": "eerimoq/pumbaa/simba/tst/oam/soam/build/linux/obj/usr/src/repo/simba/src/kernel/time.o", "objdump": "0000000000000000 <time_set>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <time_set+0xd>\n   d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  11:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18 <time_set+0x18>\n  18:\t48 83 c0 01          \tadd    $0x1,%rax\n  1c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 23 <time_set+0x23>\n  23:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  28:\t75 41                \tjne    6b <time_set+0x6b>\n  2a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 31 <time_set+0x31>\n  31:\t48 83 c0 01          \tadd    $0x1,%rax\n  35:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 3c <time_set+0x3c>\n  3c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  41:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  46:\te8 00 00 00 00       \tcallq  4b <time_set+0x4b>\n  4b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 52 <time_set+0x52>\n  52:\t48 83 c0 01          \tadd    $0x1,%rax\n  56:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 5d <time_set+0x5d>\n  5d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 64 <time_set+0x64>\n  64:\tbf 16 00 00 00       \tmov    $0x16,%edi\n  69:\tff d0                \tcallq  *%rax\n  6b:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  6f:\t48 89 c7             \tmov    %rax,%rdi\n  72:\te8 00 00 00 00       \tcallq  77 <time_set+0x77>\n  77:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 7e <time_set+0x7e>\n  7e:\t48 83 c2 01          \tadd    $0x1,%rdx\n  82:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 89 <time_set+0x89>\n  89:\t85 c0                \ttest   %eax,%eax\n  8b:\t74 19                \tje     a6 <time_set+0xa6>\n  8d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  92:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 99 <time_set+0x99>\n  99:\t48 83 c2 01          \tadd    $0x1,%rdx\n  9d:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # a4 <time_set+0xa4>\n  a4:\teb 15                \tjmp    bb <time_set+0xbb>\n  a6:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  aa:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  ae:\t48 89 c6             \tmov    %rax,%rsi\n  b1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  b6:\te8 00 00 00 00       \tcallq  bb <time_set+0xbb>\n  bb:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # c2 <time_set+0xc2>\n  c2:\t48 83 c2 01          \tadd    $0x1,%rdx\n  c6:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # cd <time_set+0xcd>\n  cd:\tc9                   \tleaveq \n  ce:\tc3                   \tretq   ", "code_s": "__int64 __fastcall time_set(__int64 a1) {\n  int v1;\n  __int64 result;\n  char <span class=\"supfact\">v3</span>[Number];\n  ++_gcov0_time_set;\n  if (!a1) {\n    ++qword_CE8;\n    std_printf(\n        &_fmt_eixc4lzofyxs4lrponzggl3lmvzg4zlmf52gs3lffzrtunzvhiqecu2tivjfiorafbxgk527oaqccpjafauhm33jmqqcukjqfewcamrsfeqfy4s4nyra____);\n    ++qword_CF0;\n    sys(Number L);\n  }\n  v1 = sys_uptime(<span class=\"supfact\">v3</span>);\n  ++qword_CF8;\n  if (v1) {\n    result = Number;\n    ++qword_D00;\n  } else {\n    result = time_subtract(&module, a1, <span class=\"supfact\">v3</span>);\n  }\n  ++qword_D08;\n  return result;\n}", "code_t": "int __cdecl time_set(time_t *new_p) {\n  int v1;\n  int result;\n  time_t <span class=\"supfact\">uptime</span>;\n  ++_gcov0_time_set;\n  if (!new_p) {\n    ++qword_CE8;\n    std_printf(\n        &_fmt_eixc4lzofyxs4lrponzggl3lmvzg4zlmf52gs3lffzrtunzvhiqecu2tivjfiorafbxgk527oaqccpjafauhm33jmqqcukjqfewcamrsfeqfy4s4nyra____);\n    ++qword_CF0;\n    sys(Number L);\n  }\n  v1 = sys_uptime(&<span class=\"supfact\">uptime</span>);\n  ++qword_CF8;\n  if (v1) {\n    result = Number;\n    ++qword_D00;\n  } else {\n    result =\n        time_subtract(&module.uptime_offset, new_p, &<span class=\"supfact\">uptime</span>);\n  }\n  ++qword_D08;\n  return result;\n}", "var": [{"name": "v3", "type": "__unk__", "ref_name": "uptime", "ref_type": "struct time_t { int32_t seconds; int32_t nanoseconds; }"}], "body_in_train": false}, {"repo_owner": "daveti", "repo_name": "GoodUSB", "path": "daveti/GoodUSB/d8184f82b7c117db85d4fd094d6626e13d62586e53cd4394dbcf1f72ab1c4b85", "path_in_repo": "daveti/GoodUSB/kernel/linux-3.13.0/tools/perf/util/probe-finder.o", "objdump": "00000000000017a4 <convert_variable>:\n    17a4:\t55                   \tpush   %rbp\n    17a5:\t48 89 e5             \tmov    %rsp,%rbp\n    17a8:\t48 83 ec 50          \tsub    $0x50,%rsp\n    17ac:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    17b0:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    17b4:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    17bb:\t00 00 \n    17bd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    17c1:\t31 c0                \txor    %eax,%eax\n    17c3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    17c7:\t48 89 c7             \tmov    %rax,%rdi\n    17ca:\te8 00 00 00 00       \tcallq  17cf <convert_variable+0x2b>\n    17cf:\t48 89 c2             \tmov    %rax,%rdx\n    17d2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    17d7:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    17dc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    17e1:\te8 00 00 00 00       \tcallq  17e6 <convert_variable+0x42>\n    17e6:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    17ea:\t48 8b b8 90 00 00 00 \tmov    0x90(%rax),%rdi\n    17f1:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    17f5:\t48 8d 48 48          \tlea    0x48(%rax),%rcx\n    17f9:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    17fd:\t48 8b 90 80 00 00 00 \tmov    0x80(%rax),%rdx\n    1804:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1808:\t48 8b 70 18          \tmov    0x18(%rax),%rsi\n    180c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1810:\t49 89 f8             \tmov    %rdi,%r8\n    1813:\t48 89 c7             \tmov    %rax,%rdi\n    1816:\te8 dd f1 ff ff       \tcallq  9f8 <convert_variable_location>\n    181b:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    181e:\t83 7d cc fe          \tcmpl   $0xfffffffe,-0x34(%rbp)\n    1822:\t75 28                \tjne    184c <convert_variable+0xa8>\n    1824:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1828:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    182f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1833:\t48 89 c2             \tmov    %rax,%rdx\n    1836:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    183b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1840:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1845:\te8 00 00 00 00       \tcallq  184a <convert_variable+0xa6>\n    184a:\teb 7b                \tjmp    18c7 <convert_variable+0x123>\n    184c:\t83 7d cc a1          \tcmpl   $0xffffffa1,-0x34(%rbp)\n    1850:\t75 16                \tjne    1868 <convert_variable+0xc4>\n    1852:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1857:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    185c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1861:\te8 00 00 00 00       \tcallq  1866 <convert_variable+0xc2>\n    1866:\teb 5f                \tjmp    18c7 <convert_variable+0x123>\n    1868:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    186c:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    1873:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1877:\t48 85 c0             \ttest   %rax,%rax\n    187a:\t74 4b                \tje     18c7 <convert_variable+0x123>\n    187c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1880:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n    1887:\t48 8d 48 18          \tlea    0x18(%rax),%rcx\n    188b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    188f:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    1896:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    189a:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    189e:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    18a5:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n    18a9:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n    18ad:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    18b1:\t49 89 f8             \tmov    %rdi,%r8\n    18b4:\t48 89 c7             \tmov    %rax,%rdi\n    18b7:\te8 bd f9 ff ff       \tcallq  1279 <convert_variable_fields>\n    18bc:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    18bf:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    18c3:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    18c7:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    18cb:\t75 2c                \tjne    18f9 <convert_variable+0x155>\n    18cd:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    18d1:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    18d8:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    18dc:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    18e0:\t48 8b 88 90 00 00 00 \tmov    0x90(%rax),%rcx\n    18e7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    18eb:\t48 89 ce             \tmov    %rcx,%rsi\n    18ee:\t48 89 c7             \tmov    %rax,%rdi\n    18f1:\te8 0f f5 ff ff       \tcallq  e05 <convert_variable_type>\n    18f6:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    18f9:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    18fc:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1900:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    1907:\t00 00 \n    1909:\t74 05                \tje     1910 <convert_variable+0x16c>\n    190b:\te8 00 00 00 00       \tcallq  1910 <convert_variable+0x16c>\n    1910:\tc9                   \tleaveq \n    1911:\tc3                   \tretq   ", "code_s": "__int64 __fastcall convert_variable(struct Dwarf_Die_s *a1, __int64 a2,\n                                    Dwarf_Error *a3) {\n  const char *v3;\n  struct Dwarf_Die_s *<span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  char <span class=\"supfact\">v7</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v5</span> = a1;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  LODWORD(v3) = dwarf_diename(a1, (char **)a2, a3);\n  eprintf(Number L, String, v3);\n  <span class=\"supfact\">v6</span> = convert_variable_location(\n      a1, *(char ***)(a2 + Number), *(unsigned __int8 **)(a2 + Number),\n      (Dwarf_Error *)(a2 + Number), *(_QWORD *)(a2 + Number));\n  switch (<span class=\"supfact\">v6</span>) {\n  case Number:\n    eprintf(Number L, String,\n            *(const char **)(*(_QWORD *)(a2 + Number) + Number L));\n    break;\n  case Number:\n    eprintf(Number L, String);\n    break;\n  case Number:\n    <span class=\"supfact\">v6</span> = convert_variable_type(\n        <span class=\"supfact\">v5</span>, *(Dwarf_Unsigned **)(a2 + Number),\n        *(char **)(*(_QWORD *)(a2 + Number) + Number L));\n    break;\n  default:\n    if (*(_QWORD *)(*(_QWORD *)(a2 + Number) + Number L)) {\n      <span class=\"supfact\">v6</span> = convert_variable_fields(\n          a1, *(const char **)(*(_QWORD *)(a2 + Number) + Number L),\n          *(_QWORD *)(*(_QWORD *)(a2 + Number) + Number L),\n          (Dwarf_Error **)(*(_QWORD *)(a2 + Number) + Number L),\n          <span class=\"supfact\">v7</span>);\n      <span class=\"supfact\">v5</span> = (struct Dwarf_Die_s *)<span class=\"supfact\">v7</span>;\n    }\n    break;\n  }\n  return <span class=\"supfact\">v6</span>;\n}", "code_t": "int __cdecl convert_variable(Dwarf_Die *vr_die, probe_finder *pf_0) {\n  const char *v2;\n  Dwarf_Die pf_0a;\n  probe_finder *pf_0b;\n  Dwarf_Die *<span class=\"supfact\">vr_diea</span>;\n  int <span class=\"supfact\">ret</span>;\n  Dwarf_Die <span class=\"supfact\">die_mem</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  pf_0a.cu = (Dwarf_CU *)vr_die;\n  pf_0a.addr = pf_0;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  LODWORD(v2) = dwarf_diename(pf_0a, (char **)vr_die, (Dwarf_Error *)pf_0);\n  eprintf(Number L, String, v2);\n  <span class=\"supfact\">ret</span> =\n      convert_variable_location(<span class=\"supfact\">vr_diea</span>, pf_0b->addr,\n                                pf_0b->fb_ops, &pf_0b->sp_die, pf_0b->tvar);\n  switch (<span class=\"supfact\">ret</span>) {\n  case Number:\n    eprintf(Number L, String, pf_0b->pvar->var);\n    break;\n  case Number:\n    eprintf(Number L, String);\n    break;\n  case Number:\n    <span class=\"supfact\">ret</span> = convert_variable_type(<span class=\"supfact\">vr_diea</span>,\n                                                pf_0b->tvar, pf_0b->pvar->type);\n    break;\n  default:\n    if (pf_0b->pvar->field) {\n      <span class=\"supfact\">ret</span> = convert_variable_fields(\n          <span class=\"supfact\">vr_diea</span>, pf_0b->pvar->var, pf_0b->pvar->field,\n          &pf_0b->tvar->ref, &<span class=\"supfact\">die_mem</span>);\n      <span class=\"supfact\">vr_diea</span> = &<span class=\"supfact\">die_mem</span>;\n    }\n    break;\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v7", "type": "struct Dwarf_Die { void * addr; Dwarf_CU * cu; Dwarf_Abbrev_0 * abbrev; __int64 padding__; }", "ref_name": "die_mem", "ref_type": "struct Dwarf_Die { void * addr; Dwarf_CU * cu; Dwarf_Abbrev_0 * abbrev; __int64 padding__; }"}], "body_in_train": true}, {"repo_owner": "davidmueller13", "repo_name": "AK-Flo", "path": "davidmueller13/AK-Flo/c3cc3df3b51f39ca73d94ff010b023aab395351024072eeb17004c07fc3db799", "path_in_repo": "davidmueller13/AK-Flo/tools/perf/util/trace-event-parse.o", "objdump": "00000000000009e6 <find_printk>:\n     9e6:\t55                   \tpush   %rbp\n     9e7:\t48 89 e5             \tmov    %rsp,%rbp\n     9ea:\t48 83 ec 40          \tsub    $0x40,%rsp\n     9ee:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     9f2:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     9f9:\t00 00 \n     9fb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     9ff:\t31 c0                \txor    %eax,%eax\n     a01:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     a05:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     a09:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a0f <find_printk+0x29>\n     a0f:\t89 c2                \tmov    %eax,%edx\n     a11:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # a18 <find_printk+0x32>\n     a18:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     a1c:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     a22:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n     a27:\t48 89 c7             \tmov    %rax,%rdi\n     a2a:\te8 00 00 00 00       \tcallq  a2f <find_printk+0x49>\n     a2f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     a33:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a37:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     a3b:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     a42:\t00 00 \n     a44:\t74 05                \tje     a4b <find_printk+0x65>\n     a46:\te8 00 00 00 00       \tcallq  a4b <find_printk+0x65>\n     a4b:\tc9                   \tleaveq \n     a4c:\tc3                   \tretq   ", "code_s": "void *__fastcall find_printk(__int64 a1) {\n  __int64 <span class=\"supfact\">key</span>[Number];\n  <span class=\"supfact\">key</span>[Number] = __readfsqword(Number);\n  <span class=\"supfact\">key</span>[Number] = a1;\n  return bsearch(<span class=\"supfact\">key</span>, printk_list, (unsigned int)printk_count,\n                 Number, (__compar_fn_t)printk_cmp);\n}", "code_t": "printk_map *__cdecl find_printk(unsigned __int64 addr) {\n  printk_map <span class=\"supfact\">key</span>;\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  <span class=\"supfact\">key</span>.addr = addr;\n  return (printk_map *)bsearch(&<span class=\"supfact\">key</span>, printk_list,\n                               (unsigned int)printk_count, Number,\n                               (__compar_fn_t)printk_cmp);\n}", "var": [{"name": "key", "type": "struct printk_map { unsigned __int64 addr; char * printk; }", "ref_name": "key", "ref_type": "struct printk_map { unsigned __int64 addr; char * printk; }"}], "body_in_train": true}, {"repo_owner": "stulluk", "repo_name": "FFmpeg-Cedrus-2-sunxi", "path": "stulluk/FFmpeg-Cedrus-2-sunxi/10dd42f4e54d113bce14e2e10990e0357bd583a263499a4e0d50f71c5b22af51", "path_in_repo": "stulluk/FFmpeg-Cedrus-2-sunxi//libavcodec/tiertexseqv.o", "objdump": "0000000000000876 <seqvideo_decode>:\n 876:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n 87d:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n 882:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n 887:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n 88b:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n 88f:\t48 63 d0             \tmovslq %eax,%rdx\n 892:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 897:\t48 01 d0             \tadd    %rdx,%rax\n 89a:\t48 89 44 24 78       \tmov    %rax,0x78(%rsp)\n 89f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 8a4:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 8a8:\t48 89 54 24 10       \tmov    %rdx,0x10(%rsp)\n 8ad:\t0f b6 00             \tmovzbl (%rax),%eax\n 8b0:\t0f b6 c0             \tmovzbl %al,%eax\n 8b3:\t89 44 24 74          \tmov    %eax,0x74(%rsp)\n 8b7:\t8b 44 24 74          \tmov    0x74(%rsp),%eax\n 8bb:\t83 e0 01             \tand    $0x1,%eax\n 8be:\t85 c0                \ttest   %eax,%eax\n 8c0:\t0f 84 15 01 00 00    \tje     9db <seqvideo_decode+0x165>\n 8c6:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 8cb:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 8cf:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 8d3:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n 8d8:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n 8dd:\t48 2b 44 24 10       \tsub    0x10(%rsp),%rax\n 8e2:\t48 3d ff 02 00 00    \tcmp    $0x2ff,%rax\n 8e8:\t7f 0a                \tjg     8f4 <seqvideo_decode+0x7e>\n 8ea:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n 8ef:\te9 64 02 00 00       \tjmpq   b58 <seqvideo_decode+0x2e2>\n 8f4:\tc7 84 24 8c 00 00 00 \tmovl   $0x0,0x8c(%rsp)\n 8fb:\t00 00 00 00 \n 8ff:\te9 b3 00 00 00       \tjmpq   9b7 <seqvideo_decode+0x141>\n 904:\tc7 84 24 88 00 00 00 \tmovl   $0x0,0x88(%rsp)\n 90b:\t00 00 00 00 \n 90f:\teb 3a                \tjmp    94b <seqvideo_decode+0xd5>\n 911:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 916:\t0f b6 00             \tmovzbl (%rax),%eax\n 919:\t0f b6 c0             \tmovzbl %al,%eax\n 91c:\tc1 e0 02             \tshl    $0x2,%eax\n 91f:\t89 c2                \tmov    %eax,%edx\n 921:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 926:\t0f b6 00             \tmovzbl (%rax),%eax\n 929:\tc0 e8 04             \tshr    $0x4,%al\n 92c:\t09 d0                \tor     %edx,%eax\n 92e:\t89 c2                \tmov    %eax,%edx\n 930:\t8b 84 24 88 00 00 00 \tmov    0x88(%rsp),%eax\n 937:\t48 98                \tcltq   \n 939:\t88 54 04 2d          \tmov    %dl,0x2d(%rsp,%rax,1)\n 93d:\t83 84 24 88 00 00 00 \taddl   $0x1,0x88(%rsp)\n 944:\t01 \n 945:\t48 83 44 24 10 01    \taddq   $0x1,0x10(%rsp)\n 94b:\t83 bc 24 88 00 00 00 \tcmpl   $0x2,0x88(%rsp)\n 952:\t02 \n 953:\t7e bc                \tjle    911 <seqvideo_decode+0x9b>\n 955:\t48 8d 44 24 2d       \tlea    0x2d(%rsp),%rax\n 95a:\t0f b6 00             \tmovzbl (%rax),%eax\n 95d:\t0f b6 c0             \tmovzbl %al,%eax\n 960:\tc1 e0 10             \tshl    $0x10,%eax\n 963:\t89 c2                \tmov    %eax,%edx\n 965:\t48 8d 44 24 2d       \tlea    0x2d(%rsp),%rax\n 96a:\t48 83 c0 01          \tadd    $0x1,%rax\n 96e:\t0f b6 00             \tmovzbl (%rax),%eax\n 971:\t0f b6 c0             \tmovzbl %al,%eax\n 974:\tc1 e0 08             \tshl    $0x8,%eax\n 977:\t09 c2                \tor     %eax,%edx\n 979:\t48 8d 44 24 2d       \tlea    0x2d(%rsp),%rax\n 97e:\t48 83 c0 02          \tadd    $0x2,%rax\n 982:\t0f b6 00             \tmovzbl (%rax),%eax\n 985:\t0f b6 c0             \tmovzbl %al,%eax\n 988:\t09 d0                \tor     %edx,%eax\n 98a:\t89 c1                \tmov    %eax,%ecx\n 98c:\t8b 84 24 8c 00 00 00 \tmov    0x8c(%rsp),%eax\n 993:\t48 98                \tcltq   \n 995:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 99c:\t00 \n 99d:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n 9a2:\t48 01 d0             \tadd    %rdx,%rax\n 9a5:\t81 c9 00 00 00 ff    \tor     $0xff000000,%ecx\n 9ab:\t89 ca                \tmov    %ecx,%edx\n 9ad:\t89 10                \tmov    %edx,(%rax)\n 9af:\t83 84 24 8c 00 00 00 \taddl   $0x1,0x8c(%rsp)\n 9b6:\t01 \n 9b7:\t81 bc 24 8c 00 00 00 \tcmpl   $0xff,0x8c(%rsp)\n 9be:\tff 00 00 00 \n 9c2:\t0f 8e 3c ff ff ff    \tjle    904 <seqvideo_decode+0x8e>\n 9c8:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 9cd:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 9d1:\tc7 80 90 01 00 00 01 \tmovl   $0x1,0x190(%rax)\n 9d8:\t00 00 00 \n 9db:\t8b 44 24 74          \tmov    0x74(%rsp),%eax\n 9df:\t83 e0 02             \tand    $0x2,%eax\n 9e2:\t85 c0                \ttest   %eax,%eax\n 9e4:\t0f 84 69 01 00 00    \tje     b53 <seqvideo_decode+0x2dd>\n 9ea:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n 9ef:\t48 2b 44 24 10       \tsub    0x10(%rsp),%rax\n 9f4:\t48 83 f8 7f          \tcmp    $0x7f,%rax\n 9f8:\t7f 0a                \tjg     a04 <seqvideo_decode+0x18e>\n 9fa:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n 9ff:\te9 54 01 00 00       \tjmpq   b58 <seqvideo_decode+0x2e2>\n a04:\t48 8b 4c 24 10       \tmov    0x10(%rsp),%rcx\n a09:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n a0e:\tba 00 04 00 00       \tmov    $0x400,%edx\n a13:\t48 89 ce             \tmov    %rcx,%rsi\n a16:\t48 89 c7             \tmov    %rax,%rdi\n a19:\te8 75 f7 ff ff       \tcallq  193 <init_get_bits>\n a1e:\t48 83 6c 24 10 80    \tsubq   $0xffffffffffffff80,0x10(%rsp)\n a24:\tc7 84 24 80 00 00 00 \tmovl   $0x0,0x80(%rsp)\n a2b:\t00 00 00 00 \n a2f:\te9 11 01 00 00       \tjmpq   b45 <seqvideo_decode+0x2cf>\n a34:\tc7 84 24 84 00 00 00 \tmovl   $0x0,0x84(%rsp)\n a3b:\t00 00 00 00 \n a3f:\te9 e8 00 00 00       \tjmpq   b2c <seqvideo_decode+0x2b6>\n a44:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n a49:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n a4d:\t48 8b 10             \tmov    (%rax),%rdx\n a50:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n a55:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n a59:\t8b 40 40             \tmov    0x40(%rax),%eax\n a5c:\t0f af 84 24 80 00 00 \timul   0x80(%rsp),%eax\n a63:\t00 \n a64:\t89 c1                \tmov    %eax,%ecx\n a66:\t8b 84 24 84 00 00 00 \tmov    0x84(%rsp),%eax\n a6d:\t01 c8                \tadd    %ecx,%eax\n a6f:\t48 98                \tcltq   \n a71:\t48 01 d0             \tadd    %rdx,%rax\n a74:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n a79:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n a7e:\tbe 02 00 00 00       \tmov    $0x2,%esi\n a83:\t48 89 c7             \tmov    %rax,%rdi\n a86:\te8 75 f6 ff ff       \tcallq  100 <get_bits>\n a8b:\t89 44 24 5c          \tmov    %eax,0x5c(%rsp)\n a8f:\t83 7c 24 5c 03       \tcmpl   $0x3,0x5c(%rsp)\n a94:\t74 5d                \tje     af3 <seqvideo_decode+0x27d>\n a96:\t83 7c 24 5c 03       \tcmpl   $0x3,0x5c(%rsp)\n a9b:\t7f 78                \tjg     b15 <seqvideo_decode+0x29f>\n a9d:\t83 7c 24 5c 01       \tcmpl   $0x1,0x5c(%rsp)\n aa2:\t74 09                \tje     aad <seqvideo_decode+0x237>\n aa4:\t83 7c 24 5c 02       \tcmpl   $0x2,0x5c(%rsp)\n aa9:\t74 25                \tje     ad0 <seqvideo_decode+0x25a>\n aab:\teb 68                \tjmp    b15 <seqvideo_decode+0x29f>\n aad:\t48 8b 4c 24 60       \tmov    0x60(%rsp),%rcx\n ab2:\t48 8b 54 24 78       \tmov    0x78(%rsp),%rdx\n ab7:\t48 8b 74 24 10       \tmov    0x10(%rsp),%rsi\n abc:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n ac1:\t48 89 c7             \tmov    %rax,%rdi\n ac4:\te8 b6 f9 ff ff       \tcallq  47f <seq_decode_op1>\n ac9:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n ace:\teb 45                \tjmp    b15 <seqvideo_decode+0x29f>\n ad0:\t48 8b 4c 24 60       \tmov    0x60(%rsp),%rcx\n ad5:\t48 8b 54 24 78       \tmov    0x78(%rsp),%rdx\n ada:\t48 8b 74 24 10       \tmov    0x10(%rsp),%rsi\n adf:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n ae4:\t48 89 c7             \tmov    %rax,%rdi\n ae7:\te8 78 fc ff ff       \tcallq  764 <seq_decode_op2>\n aec:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n af1:\teb 22                \tjmp    b15 <seqvideo_decode+0x29f>\n af3:\t48 8b 4c 24 60       \tmov    0x60(%rsp),%rcx\n af8:\t48 8b 54 24 78       \tmov    0x78(%rsp),%rdx\n afd:\t48 8b 74 24 10       \tmov    0x10(%rsp),%rsi\n b02:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n b07:\t48 89 c7             \tmov    %rax,%rdi\n b0a:\te8 c4 fc ff ff       \tcallq  7d3 <seq_decode_op3>\n b0f:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n b14:\t90                   \tnop\n b15:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n b1b:\t75 07                \tjne    b24 <seqvideo_decode+0x2ae>\n b1d:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n b22:\teb 34                \tjmp    b58 <seqvideo_decode+0x2e2>\n b24:\t83 84 24 84 00 00 00 \taddl   $0x8,0x84(%rsp)\n b2b:\t08 \n b2c:\t81 bc 24 84 00 00 00 \tcmpl   $0xff,0x84(%rsp)\n b33:\tff 00 00 00 \n b37:\t0f 8e 07 ff ff ff    \tjle    a44 <seqvideo_decode+0x1ce>\n b3d:\t83 84 24 80 00 00 00 \taddl   $0x8,0x80(%rsp)\n b44:\t08 \n b45:\t83 bc 24 80 00 00 00 \tcmpl   $0x7f,0x80(%rsp)\n b4c:\t7f \n b4d:\t0f 8e e1 fe ff ff    \tjle    a34 <seqvideo_decode+0x1be>\n b53:\tb8 00 00 00 00       \tmov    $0x0,%eax\n b58:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n b5f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall seqvideo_decode(__int64 a1, unsigned __int8 *a2, int a3) {\n  _BYTE *v4;\n  unsigned __int8 *v5;\n  unsigned __int8 <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  int <span class=\"supfact\">v8</span>;\n  _QWORD *<span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  unsigned __int8 *<span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">k</span>;\n  int <span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v12</span> = &a2[a3];\n  v4 = a2 + Number;\n  <span class=\"supfact\">v11</span> = *a2;\n  if ((<span class=\"supfact\">v11</span> & Number) != Number) {\n    <span class=\"supfact\">v10</span> = *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n    if (<span class=\"supfact\">v12</span> - v4 <= Number)\n      return Number L;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">v15</span> = Number;\n      while (<span class=\"supfact\">v15</span> <= Number) {\n        <span class=\"supfact\">v6</span>[<span class=\"supfact\">v15</span>++] =\n            (Number * *v4) | (*v4 >> Number);\n        ++v4;\n      }\n      *(_DWORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">v10</span>) =\n          (<span class=\"supfact\">v6</span>[Number] << Number) |\n          (<span class=\"supfact\">v6</span>[Number] << Number) | <span class=\"supfact\">v6</span>[Number] |\n          Number;\n    }\n    *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L) = Number;\n  }\n  if ((<span class=\"supfact\">v11</span> & Number) != Number) {\n    if (<span class=\"supfact\">v12</span> - v4 <= Number)\n      return Number L;\n    init_get_bits((__int64)<span class=\"supfact\">v7</span>, (__int64)v4, Number);\n    v5 = v4 + Number;\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         <span class=\"supfact\">j</span> += Number) {\n      for (<span class=\"supfact\">k</span> = Number; <span class=\"supfact\">k</span> <= Number;\n           <span class=\"supfact\">k</span> += Number) {\n        <span class=\"supfact\">v9</span> =\n            (_QWORD *)(**(_QWORD **)(a1 + Number) +\n                       <span class=\"supfact\">j</span> *\n                           *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L) +\n                       <span class=\"supfact\">k</span>);\n        <span class=\"supfact\">v8</span> = get_bits((__int64)<span class=\"supfact\">v7</span>, Number);\n        if (<span class=\"supfact\">v8</span> == Number) {\n          v5 = seq_decode_op3(a1, v5, (__int64)<span class=\"supfact\">v12</span>,\n                              (__int64)<span class=\"supfact\">v9</span>);\n        } else if (<span class=\"supfact\">v8</span> <= Number) {\n          if (<span class=\"supfact\">v8</span> == Number) {\n            v5 = (unsigned __int8 *)seq_decode_op1(\n                a1, v5, (__int64)<span class=\"supfact\">v12</span>, <span class=\"supfact\">v9</span>);\n          } else if (<span class=\"supfact\">v8</span> == Number) {\n            v5 = (unsigned __int8 *)seq_decode_op2(\n                a1, v5, (__int64)<span class=\"supfact\">v12</span>, <span class=\"supfact\">v9</span>);\n          }\n        }\n        if (!v5)\n          return Number L;\n      }\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl seqvideo_decode(SeqVideoContext_0 *seq, const unsigned __int8 *data,\n                            int data_size) {\n  const unsigned __int8 *dataa;\n  const unsigned __int8 *datab;\n  unsigned __int8 <span class=\"supfact\">c</span>[Number];\n  GetBitContext_0 <span class=\"supfact\">gb</span>;\n  int <span class=\"supfact\">op</span>;\n  unsigned __int8 *<span class=\"supfact\">dst</span>;\n  uint32_t *<span class=\"supfact\">palette</span>;\n  int <span class=\"supfact\">flags</span>;\n  const unsigned __int8 *<span class=\"supfact\">data_end</span>;\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">x</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">data_end</span> = &data[data_size];\n  dataa = data + Number;\n  <span class=\"supfact\">flags</span> = *data;\n  if ((<span class=\"supfact\">flags</span> & Number) != Number) {\n    <span class=\"supfact\">palette</span> = (uint32_t *)seq->frame->data[Number];\n    if (<span class=\"supfact\">data_end</span> - dataa <= Number)\n      return Number;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">j</span> = Number;\n      while (<span class=\"supfact\">j</span> <= Number) {\n        <span class=\"supfact\">c</span>[<span class=\"supfact\">j</span>++] =\n            (Number * *dataa) | (*dataa >> Number);\n        ++dataa;\n      }\n      <span class=\"supfact\">palette</span>[<span class=\"supfact\">i</span>] =\n          (<span class=\"supfact\">c</span>[Number] << Number) |\n          (<span class=\"supfact\">c</span>[Number] << Number) | <span class=\"supfact\">c</span>[Number] |\n          Number;\n    }\n    seq->frame->palette_has_changed = Number;\n  }\n  if ((<span class=\"supfact\">flags</span> & Number) != Number) {\n    if (<span class=\"supfact\">data_end</span> - dataa <= Number)\n      return Number;\n    init_get_bits(&<span class=\"supfact\">gb</span>, dataa, Number);\n    datab = dataa + Number;\n    for (<span class=\"supfact\">y</span> = Number; <span class=\"supfact\">y</span> <= Number;\n         <span class=\"supfact\">y</span> += Number) {\n      for (<span class=\"supfact\">x</span> = Number; <span class=\"supfact\">x</span> <= Number;\n           <span class=\"supfact\">x</span> += Number) {\n        <span class=\"supfact\">dst</span> =\n            &seq->frame->data[Number]\n                             [<span class=\"supfact\">y</span> * seq->frame->linesize[Number] +\n                              <span class=\"supfact\">x</span>];\n        <span class=\"supfact\">op</span> = get_bits(&<span class=\"supfact\">gb</span>, Number);\n        if (<span class=\"supfact\">op</span> == Number) {\n          datab = seq_decode_op3(seq, datab, <span class=\"supfact\">data_end</span>,\n                                 <span class=\"supfact\">dst</span>);\n        } else if (<span class=\"supfact\">op</span> <= Number) {\n          if (<span class=\"supfact\">op</span> == Number) {\n            datab = seq_decode_op1(seq, datab, <span class=\"supfact\">data_end</span>,\n                                   <span class=\"supfact\">dst</span>);\n          } else if (<span class=\"supfact\">op</span> == Number) {\n            datab = seq_decode_op2(seq, datab, <span class=\"supfact\">data_end</span>,\n                                   <span class=\"supfact\">dst</span>);\n          }\n        }\n        if (!datab)\n          return Number;\n      }\n    }\n  }\n  return Number;\n}", "var": [{"name": "v7", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }", "ref_name": "gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "CPFL", "repo_name": "xen", "path": "CPFL/xen/b2249775998a10176c2bce29b26882d15c14acec92becc85f149a9d5ab555802", "path_in_repo": "CPFL/xen/xen/arch/x86/mm/shadow/guest_4.o", "objdump": "0000000000001ce3 <get_shadow_status>:\n    1ce3:\t55                   \tpush   %rbp\n    1ce4:\t48 89 e5             \tmov    %rsp,%rbp\n    1ce7:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1ceb:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1cef:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    1cf3:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n    1cf6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1cfa:\t48 89 c7             \tmov    %rax,%rdi\n    1cfd:\te8 a4 e4 ff ff       \tcallq  1a6 <mfn_x>\n    1d02:\t48 89 c1             \tmov    %rax,%rcx\n    1d05:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    1d08:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1d0c:\t48 89 ce             \tmov    %rcx,%rsi\n    1d0f:\t48 89 c7             \tmov    %rax,%rdi\n    1d12:\te8 00 00 00 00       \tcallq  1d17 <get_shadow_status+0x34>\n    1d17:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1d1b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1d1f:\t48 89 c7             \tmov    %rax,%rdi\n    1d22:\te8 7f e4 ff ff       \tcallq  1a6 <mfn_x>\n    1d27:\t48 89 c7             \tmov    %rax,%rdi\n    1d2a:\te8 00 00 00 00       \tcallq  1d2f <get_shadow_status+0x4c>\n    1d2f:\t85 c0                \ttest   %eax,%eax\n    1d31:\t0f 95 c0             \tsetne  %al\n    1d34:\t0f b6 c0             \tmovzbl %al,%eax\n    1d37:\t48 85 c0             \ttest   %rax,%rax\n    1d3a:\t74 3e                \tje     1d7a <get_shadow_status+0x97>\n    1d3c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1d40:\t48 89 c7             \tmov    %rax,%rdi\n    1d43:\te8 5e e4 ff ff       \tcallq  1a6 <mfn_x>\n    1d48:\t48 89 c7             \tmov    %rax,%rdi\n    1d4b:\te8 f1 e2 ff ff       \tcallq  41 <pfn_to_pdx>\n    1d50:\t48 c1 e0 05          \tshl    $0x5,%rax\n    1d54:\t48 89 c2             \tmov    %rax,%rdx\n    1d57:\t48 b8 00 00 00 00 e0 \tmovabs $0xffff82e000000000,%rax\n    1d5e:\t82 ff ff \n    1d61:\t48 01 d0             \tadd    %rdx,%rax\n    1d64:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n    1d68:\t83 e0 40             \tand    $0x40,%eax\n    1d6b:\t84 c0                \ttest   %al,%al\n    1d6d:\t0f 94 c0             \tsete   %al\n    1d70:\t0f b6 c0             \tmovzbl %al,%eax\n    1d73:\t48 85 c0             \ttest   %rax,%rax\n    1d76:\t74 02                \tje     1d7a <get_shadow_status+0x97>\n    1d78:\t0f 0b                \tud2    \n    1d7a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1d7e:\tc9                   \tleaveq \n    1d7f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_shadow_status(__int64 a1, __int64 a2, unsigned int a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 <span class=\"supfact\">v8</span>;\n  v3 = mfn_x(a2);\n  <span class=\"supfact\">v8</span> = shadow_hash_lookup(a1, v3, a3);\n  v4 = mfn_x(<span class=\"supfact\">v8</span>);\n  if ((unsigned int)_mfn_valid(v4)) {\n    v5 = mfn_x(<span class=\"supfact\">v8</span>);\n    if ((*(_BYTE *)(Number * pfn_to_pdx(v5) - Number + Number) & Number) ==\n        Number)\n      BUG();\n  }\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "mfn_t __cdecl get_shadow_status(domain *d, mfn_t gmfn, u32 shadow_type) {\n  unsigned __int64 v3;\n  unsigned __int64 v4;\n  unsigned __int64 v5;\n  mfn_t <span class=\"supfact\">smfn</span>;\n  v3 = mfn_x(gmfn);\n  <span class=\"supfact\">smfn</span>.mfn = shadow_hash_lookup(d, v3, shadow_type);\n  v4 = mfn_x(<span class=\"supfact\">smfn</span>);\n  if ((unsigned int)_mfn_valid(v4)) {\n    v5 = mfn_x(<span class=\"supfact\">smfn</span>);\n    if ((*(_BYTE *)(Number * pfn_to_pdx(v5) - Number + Number) & Number) ==\n        Number)\n      BUG();\n  }\n  return <span class=\"supfact\">smfn</span>;\n}", "var": [{"name": "v8", "type": "page_info *", "ref_name": "smfn", "ref_type": "struct mfn_t { unsigned __int64 mfn; }"}], "body_in_train": true}, {"repo_owner": "szehl", "repo_name": "contiki-zigbit-rpl-border-router", "path": "szehl/contiki-zigbit-rpl-border-router/1001a0d13fd71d346632f032a186dec28520a8680fe1f8e02457f2c65caa5d1f", "path_in_repo": "szehl/contiki-zigbit-rpl-border-router/examples/mb851/telnet-server/obj_native/tapdev6.o", "objdump": "0000000000000000 <tapdev_poll>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n   b:\t48 c7 85 60 ff ff ff \tmovq   $0x0,-0xa0(%rbp)\n  12:\t00 00 00 00 \n  16:\t48 c7 85 68 ff ff ff \tmovq   $0x0,-0x98(%rbp)\n  1d:\t00 00 00 00 \n  21:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  26:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  2b:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  32:\t48 89 d7             \tmov    %rdx,%rdi\n  35:\tfc                   \tcld    \n  36:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  39:\t89 f8                \tmov    %edi,%eax\n  3b:\t89 ca                \tmov    %ecx,%edx\n  3d:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  43:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 49 <tapdev_poll+0x49>\n  49:\t85 c0                \ttest   %eax,%eax\n  4b:\t7e 4d                \tjle    9a <tapdev_poll+0x9a>\n  4d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 53 <tapdev_poll+0x53>\n  53:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  56:\t85 c0                \ttest   %eax,%eax\n  58:\t0f 48 c2             \tcmovs  %edx,%eax\n  5b:\tc1 f8 06             \tsar    $0x6,%eax\n  5e:\t89 c6                \tmov    %eax,%esi\n  60:\t48 63 c6             \tmovslq %esi,%rax\n  63:\t48 8b bc c5 70 ff ff \tmov    -0x90(%rbp,%rax,8),%rdi\n  6a:\tff \n  6b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 71 <tapdev_poll+0x71>\n  71:\t99                   \tcltd   \n  72:\tc1 ea 1a             \tshr    $0x1a,%edx\n  75:\t01 d0                \tadd    %edx,%eax\n  77:\t83 e0 3f             \tand    $0x3f,%eax\n  7a:\t29 d0                \tsub    %edx,%eax\n  7c:\tba 01 00 00 00       \tmov    $0x1,%edx\n  81:\t89 c1                \tmov    %eax,%ecx\n  83:\t48 d3 e2             \tshl    %cl,%rdx\n  86:\t48 89 d0             \tmov    %rdx,%rax\n  89:\t48 09 c7             \tor     %rax,%rdi\n  8c:\t48 89 fa             \tmov    %rdi,%rdx\n  8f:\t48 63 c6             \tmovslq %esi,%rax\n  92:\t48 89 94 c5 70 ff ff \tmov    %rdx,-0x90(%rbp,%rax,8)\n  99:\tff \n  9a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a0 <tapdev_poll+0xa0>\n  a0:\t8d 78 01             \tlea    0x1(%rax),%edi\n  a3:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  aa:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  b1:\t49 89 d0             \tmov    %rdx,%r8\n  b4:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  b9:\tba 00 00 00 00       \tmov    $0x0,%edx\n  be:\t48 89 c6             \tmov    %rax,%rsi\n  c1:\te8 00 00 00 00       \tcallq  c6 <tapdev_poll+0xc6>\n  c6:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  c9:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  cd:\t75 07                \tjne    d6 <tapdev_poll+0xd6>\n  cf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  d4:\teb 2d                \tjmp    103 <tapdev_poll+0x103>\n  d6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # dc <tapdev_poll+0xdc>\n  dc:\tba a4 01 00 00       \tmov    $0x1a4,%edx\n  e1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  e6:\t89 c7                \tmov    %eax,%edi\n  e8:\te8 00 00 00 00       \tcallq  ed <tapdev_poll+0xed>\n  ed:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  f0:\t83 7d f4 ff          \tcmpl   $0xffffffff,-0xc(%rbp)\n  f4:\t75 0a                \tjne    100 <tapdev_poll+0x100>\n  f6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  fb:\te8 00 00 00 00       \tcallq  100 <tapdev_poll+0x100>\n 100:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 103:\tc9                   \tleaveq \n 104:\tc3                   \tretq   ", "code_s": "__int64 tapdev_poll() {\n  struct timeval <span class=\"supfact\">timeout</span>;\n  fd_set <span class=\"supfact\">readfds</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">timeout</span>.tv_sec = Number L;\n  <span class=\"supfact\">timeout</span>.tv_usec = Number L;\n  memset(&<span class=\"supfact\">readfds</span>, Number, sizeof(<span class=\"supfact\">readfds</span>));\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">v4</span> = (unsigned int)&<span class=\"supfact\">v3</span>;\n  if (fd > Number)\n    <span class=\"supfact\">readfds</span>.fds_bits[fd / Number] |= Number L << (fd % Number);\n  HIDWORD(<span class=\"supfact\">v3</span>) =\n      select(fd + Number, &<span class=\"supfact\">readfds</span>, Number L, Number L,\n             &<span class=\"supfact\">timeout</span>);\n  if (!HIDWORD(<span class=\"supfact\">v3</span>))\n    return Number L;\n  HIDWORD(<span class=\"supfact\">v3</span>) = read(fd, &uip_aligned_buf, Number);\n  if (HIDWORD(<span class=\"supfact\">v3</span>) == Number)\n    perror(String);\n  return HIDWORD(<span class=\"supfact\">v3</span>);\n}", "code_t": "uint16_t __cdecl tapdev_poll() {\n  timeval <span class=\"supfact\">tv</span>;\n  fd_set <span class=\"supfact\">fdset</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">__d1</span>;\n  int <span class=\"supfact\">__d0</span>;\n  <span class=\"supfact\">tv</span>.tv_sec = Number L;\n  <span class=\"supfact\">tv</span>.tv_usec = Number L;\n  memset(&<span class=\"supfact\">fdset</span>, Number, sizeof(<span class=\"supfact\">fdset</span>));\n  <span class=\"supfact\">__d0</span> = Number;\n  <span class=\"supfact\">__d1</span> = (unsigned int)&<span class=\"supfact\">v3</span>;\n  if (fd > Number)\n    <span class=\"supfact\">fdset</span>.__fds_bits[fd / Number] |= Number L << (fd % Number);\n  HIDWORD(<span class=\"supfact\">v3</span>) = select(fd + Number, &<span class=\"supfact\">fdset</span>,\n                                       Number L, Number L, &<span class=\"supfact\">tv</span>);\n  if (!HIDWORD(<span class=\"supfact\">v3</span>))\n    return Number;\n  HIDWORD(<span class=\"supfact\">v3</span>) = read(fd, &uip_aligned_buf, Number);\n  if (HIDWORD(<span class=\"supfact\">v3</span>) == Number)\n    perror(String);\n  return WORD2(<span class=\"supfact\">v3</span>);\n}", "var": [{"name": "readfds", "type": "struct fd_set { __fd_mask[16] __fds_bits; }", "ref_name": "fdset", "ref_type": "struct fd_set { __fd_mask[16] __fds_bits; }"}, {"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "intel", "repo_name": "KVMGT-kernel", "path": "intel/KVMGT-kernel/eeeb6185190c0bd3f1f5c9b0049a70b4f818672a458f114f082854f1c6444c1d", "path_in_repo": "intel/KVMGT-kernel/tools/perf/builtin-diff.o", "objdump": "0000000000000bc7 <diff__process_sample_event>:\n     bc7:\t55                   \tpush   %rbp\n     bc8:\t48 89 e5             \tmov    %rsp,%rbp\n     bcb:\t48 83 ec 70          \tsub    $0x70,%rsp\n     bcf:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     bd3:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     bd7:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n     bdb:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n     bdf:\t4c 89 45 98          \tmov    %r8,-0x68(%rbp)\n     be3:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     bea:\t00 00 \n     bec:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     bf0:\t31 c0                \txor    %eax,%eax\n     bf2:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n     bf6:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n     bfa:\t48 8b 75 98          \tmov    -0x68(%rbp),%rsi\n     bfe:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     c02:\t48 89 c7             \tmov    %rax,%rdi\n     c05:\te8 00 00 00 00       \tcallq  c0a <diff__process_sample_event+0x43>\n     c0a:\t85 c0                \ttest   %eax,%eax\n     c0c:\t79 26                \tjns    c34 <diff__process_sample_event+0x6d>\n     c0e:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     c12:\t8b 00                \tmov    (%rax),%eax\n     c14:\t89 c2                \tmov    %eax,%edx\n     c16:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c1b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c20:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c25:\te8 00 00 00 00       \tcallq  c2a <diff__process_sample_event+0x63>\n     c2a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     c2f:\te9 86 00 00 00       \tjmpq   cba <diff__process_sample_event+0xf3>\n     c34:\t0f b6 45 e9          \tmovzbl -0x17(%rbp),%eax\n     c38:\t84 c0                \ttest   %al,%al\n     c3a:\t74 07                \tje     c43 <diff__process_sample_event+0x7c>\n     c3c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c41:\teb 77                \tjmp    cba <diff__process_sample_event+0xf3>\n     c43:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     c47:\t48 8b 70 40          \tmov    0x40(%rax),%rsi\n     c4b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     c4f:\t48 8b 48 38          \tmov    0x38(%rax),%rcx\n     c53:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     c57:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n     c5b:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     c5f:\t48 8d b8 a8 00 00 00 \tlea    0xa8(%rax),%rdi\n     c66:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     c6a:\t49 89 f0             \tmov    %rsi,%r8\n     c6d:\t48 89 c6             \tmov    %rax,%rsi\n     c70:\te8 cf fe ff ff       \tcallq  b44 <hists__add_entry>\n     c75:\t85 c0                \ttest   %eax,%eax\n     c77:\t74 1b                \tje     c94 <diff__process_sample_event+0xcd>\n     c79:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c7e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c83:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c88:\te8 00 00 00 00       \tcallq  c8d <diff__process_sample_event+0xc6>\n     c8d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     c92:\teb 26                \tjmp    cba <diff__process_sample_event+0xf3>\n     c94:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     c98:\t48 8b 90 20 01 00 00 \tmov    0x120(%rax),%rdx\n     c9f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     ca3:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     ca7:\t48 01 c2             \tadd    %rax,%rdx\n     caa:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     cae:\t48 89 90 20 01 00 00 \tmov    %rdx,0x120(%rax)\n     cb5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     cba:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     cbe:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     cc5:\t00 00 \n     cc7:\t74 05                \tje     cce <diff__process_sample_event+0x107>\n     cc9:\te8 00 00 00 00       \tcallq  cce <diff__process_sample_event+0x107>\n     cce:\tc9                   \tleaveq \n     ccf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall diff__process_sample_event(__int64 a1, unsigned int *a2,\n                                              __int64 *a3, __int64 a4,\n                                              __int64 a5) {\n  __int64 result;\n  char <span class=\"supfact\">v8</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if ((int)perf_event__preprocess_sample(a2, a5, <span class=\"supfact\">v8</span>, a3) >=\n      Number) {\n    if (<span class=\"supfact\">v8</span>[Number]) {\n      result = Number L;\n    } else if ((unsigned int)hists__add_entry(\n                   a4 + Number, (__int64)<span class=\"supfact\">v8</span>, a3[Number],\n                   a3[Number], a3[Number])) {\n      eprintf(Number L, String);\n      result = Number;\n    } else {\n      *(_QWORD *)(a4 + Number) += a3[Number];\n      result = Number L;\n    }\n  } else {\n    eprintf(Number L, String, *a2);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl diff__process_sample_event(perf_tool *tool, perf_event *event,\n                                       perf_sample *sample, perf_evsel *evsel,\n                                       machine *machine) {\n  int result;\n  addr_location <span class=\"supfact\">al_0</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if ((int)perf_event__preprocess_sample(event, machine, &<span class=\"supfact\">al_0</span>,\n                                         sample) >= Number) {\n    if (<span class=\"supfact\">al_0</span>.filtered) {\n      result = Number;\n    } else if (hists__add_entry(&evsel->hists, &<span class=\"supfact\">al_0</span>,\n                                sample->period, sample->weight,\n                                sample->transaction)) {\n      eprintf(Number L, String);\n      result = Number;\n    } else {\n      evsel->hists.stats.total_period += sample->period;\n      result = Number;\n    }\n  } else {\n    eprintf(Number L, String, event->header.type);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v8", "type": "struct addr_location { machine * machine; thread * thread; map * map; symbol * sym; u64 addr; char level; u8 filtered; u8 cpumode; PADDING (1); s32 cpu; s32 socket; PADDING (4); }", "ref_name": "al_0", "ref_type": "struct addr_location { machine * machine; thread * thread; map * map; symbol * sym; u64 addr; char level; bool filtered; u8 cpumode; PADDING (1); s32 cpu; }"}], "body_in_train": true}, {"repo_owner": "popo55668", "repo_name": "DAG-Aware-MIG-Rewriting", "path": "popo55668/DAG-Aware-MIG-Rewriting/9de1dab9cd2594432fe9f30a2e5a2ded3975a4f6b47657222470d4feea64a3a3", "path_in_repo": "popo55668/DAG-Aware-MIG-Rewriting//src/opt/ret/retLvalue.o", "objdump": "0000000000000000 <Abc_Clock>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 83 ec 20          \tsub    $0x20,%rsp\n       8:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n       c:\t48 89 c6             \tmov    %rax,%rsi\n       f:\tbf 03 00 00 00       \tmov    $0x3,%edi\n      14:\te8 00 00 00 00       \tcallq  19 <Abc_Clock+0x19>\n      19:\t85 c0                \ttest   %eax,%eax\n      1b:\t79 09                \tjns    26 <Abc_Clock+0x26>\n      1d:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n      24:\teb 3c                \tjmp    62 <Abc_Clock+0x62>\n      26:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n      2a:\t48 69 c0 40 42 0f 00 \timul   $0xf4240,%rax,%rax\n      31:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      35:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n      39:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n      40:\t9b c4 20 \n      43:\t48 89 c8             \tmov    %rcx,%rax\n      46:\t48 f7 ea             \timul   %rdx\n      49:\t48 c1 fa 07          \tsar    $0x7,%rdx\n      4d:\t48 89 c8             \tmov    %rcx,%rax\n      50:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n      54:\t48 29 c2             \tsub    %rax,%rdx\n      57:\t48 89 d0             \tmov    %rdx,%rax\n      5a:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n      5e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      62:\tc9                   \tleaveq \n      63:\tc3                   \tretq   ", "code_s": "__syscall_slong_t Abc_Clock() {\n  __syscall_slong_t result;\n  struct timespec <span class=\"supfact\">tp</span>;\n  if (clock_gettime(Number, &<span class=\"supfact\">tp</span>) >= Number)\n    result = <span class=\"supfact\">tp</span>.tv_nsec / Number +\n             Number * <span class=\"supfact\">tp</span>.tv_sec;\n  else\n    result = Number;\n  return result;\n}", "code_t": "abctime __cdecl Abc_Clock() {\n  abctime result;\n  timespec <span class=\"supfact\">ts</span>;\n  if (clock_gettime(Number, &<span class=\"supfact\">ts</span>) >= Number)\n    result = <span class=\"supfact\">ts</span>.tv_nsec / Number +\n             Number * <span class=\"supfact\">ts</span>.tv_sec;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "dksslq", "repo_name": "debian-opiwin", "path": "dksslq/debian-opiwin/58a08bafbbbf4e2452a0cf61b7305617ca20c8fd0362c6a1a3c60a0860eac2df", "path_in_repo": "dksslq/debian-opiwin/linux/tools/power/cpupower/cpupower", "objdump": "00000000004056ca <amd_fam14h_stop>:\n  4056ca:\t55                   \tpush   %rbp\n  4056cb:\t48 89 e5             \tmov    %rsp,%rbp\n  4056ce:\t53                   \tpush   %rbx\n  4056cf:\t48 83 ec 28          \tsub    $0x28,%rsp\n  4056d3:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4056d7:\t48 89 c6             \tmov    %rax,%rsi\n  4056da:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4056df:\te8 bc cc ff ff       \tcallq  4023a0 <clock_gettime@plt>\n  4056e4:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  4056eb:\teb 42                \tjmp    40572f <amd_fam14h_stop+0x65>\n  4056ed:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  4056f4:\teb 2a                \tjmp    405720 <amd_fam14h_stop+0x56>\n  4056f6:\t8b 4d e8             \tmov    -0x18(%rbp),%ecx\n  4056f9:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4056fc:\t48 63 d0             \tmovslq %eax,%rdx\n  4056ff:\t48 89 d0             \tmov    %rdx,%rax\n  405702:\t48 01 c0             \tadd    %rax,%rax\n  405705:\t48 01 d0             \tadd    %rdx,%rax\n  405708:\t48 c1 e0 05          \tshl    $0x5,%rax\n  40570c:\t48 05 00 17 41 00    \tadd    $0x411700,%rax\n  405712:\t89 ce                \tmov    %ecx,%esi\n  405714:\t48 89 c7             \tmov    %rax,%rdi\n  405717:\te8 03 fb ff ff       \tcallq  40521f <amd_fam14h_disable>\n  40571c:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  405720:\t8b 05 36 cf 00 00    \tmov    0xcf36(%rip),%eax        # 41265c <cpu_count>\n  405726:\t39 45 e8             \tcmp    %eax,-0x18(%rbp)\n  405729:\t7c cb                \tjl     4056f6 <amd_fam14h_stop+0x2c>\n  40572b:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  40572f:\t83 7d ec 03          \tcmpl   $0x3,-0x14(%rbp)\n  405733:\t7e b8                \tjle    4056ed <amd_fam14h_stop+0x23>\n  405735:\tbe 60 26 41 00       \tmov    $0x412660,%esi\n  40573a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40573f:\te8 5c cc ff ff       \tcallq  4023a0 <clock_gettime@plt>\n  405744:\t48 8b 05 15 cf 00 00 \tmov    0xcf15(%rip),%rax        # 412660 <dbg_time>\n  40574b:\t48 8b 15 16 cf 00 00 \tmov    0xcf16(%rip),%rdx        # 412668 <dbg_time+0x8>\n  405752:\t48 8b 7d d0          \tmov    -0x30(%rbp),%rdi\n  405756:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n  40575a:\t48 89 d1             \tmov    %rdx,%rcx\n  40575d:\t48 89 c2             \tmov    %rax,%rdx\n  405760:\te8 96 16 00 00       \tcallq  406dfb <timespec_diff_us>\n  405765:\t48 89 05 14 cf 00 00 \tmov    %rax,0xcf14(%rip)        # 412680 <dbg_timediff>\n  40576c:\t8b 05 2a cf 00 00    \tmov    0xcf2a(%rip),%eax        # 41269c <be_verbose>\n  405772:\t85 c0                \ttest   %eax,%eax\n  405774:\t74 28                \tje     40579e <amd_fam14h_stop+0xd4>\n  405776:\t48 8b 15 03 cf 00 00 \tmov    0xcf03(%rip),%rdx        # 412680 <dbg_timediff>\n  40577d:\t48 8b 05 5c c8 00 00 \tmov    0xc85c(%rip),%rax        # 411fe0 <stderr@@GLIBC_2.2.5>\n  405784:\t48 89 d1             \tmov    %rdx,%rcx\n  405787:\tba d0 c7 40 00       \tmov    $0x40c7d0,%edx\n  40578c:\tbe b8 c6 40 00       \tmov    $0x40c6b8,%esi\n  405791:\t48 89 c7             \tmov    %rax,%rdi\n  405794:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405799:\te8 02 cb ff ff       \tcallq  4022a0 <fprintf@plt>\n  40579e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4057a2:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4057a6:\t48 8b 3d c3 ce 00 00 \tmov    0xcec3(%rip),%rdi        # 412670 <start_time>\n  4057ad:\t48 8b 35 c4 ce 00 00 \tmov    0xcec4(%rip),%rsi        # 412678 <start_time+0x8>\n  4057b4:\t48 89 d1             \tmov    %rdx,%rcx\n  4057b7:\t48 89 c2             \tmov    %rax,%rdx\n  4057ba:\te8 3c 16 00 00       \tcallq  406dfb <timespec_diff_us>\n  4057bf:\t48 89 05 12 c9 00 00 \tmov    %rax,0xc912(%rip)        # 4120d8 <timediff>\n  4057c6:\t48 8b 05 0b c9 00 00 \tmov    0xc90b(%rip),%rax        # 4120d8 <timediff>\n  4057cd:\t48 3d af e3 7a 14    \tcmp    $0x147ae3af,%rax\n  4057d3:\t76 41                \tjbe    405816 <amd_fam14h_stop+0x14c>\n  4057d5:\t48 8b 05 fc c8 00 00 \tmov    0xc8fc(%rip),%rax        # 4120d8 <timediff>\n  4057dc:\t89 c0                \tmov    %eax,%eax\n  4057de:\t48 69 c0 83 de 1b 43 \timul   $0x431bde83,%rax,%rax\n  4057e5:\t48 c1 e8 20          \tshr    $0x20,%rax\n  4057e9:\t89 c3                \tmov    %eax,%ebx\n  4057eb:\tc1 eb 12             \tshr    $0x12,%ebx\n  4057ee:\tbf e0 c6 40 00       \tmov    $0x40c6e0,%edi\n  4057f3:\te8 98 c9 ff ff       \tcallq  402190 <gettext@plt>\n  4057f8:\t48 89 c6             \tmov    %rax,%rsi\n  4057fb:\t48 8b 05 de c7 00 00 \tmov    0xc7de(%rip),%rax        # 411fe0 <stderr@@GLIBC_2.2.5>\n  405802:\tb9 57 01 00 00       \tmov    $0x157,%ecx\n  405807:\t89 da                \tmov    %ebx,%edx\n  405809:\t48 89 c7             \tmov    %rax,%rdi\n  40580c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405811:\te8 8a ca ff ff       \tcallq  4022a0 <fprintf@plt>\n  405816:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40581b:\t48 83 c4 28          \tadd    $0x28,%rsp\n  40581f:\t5b                   \tpop    %rbx\n  405820:\t5d                   \tpop    %rbp\n  405821:\tc3                   \tretq   ", "code_s": "__int64 amd_fam14h_stop() {\n  unsigned int v0;\n  char *v1;\n  struct timespec <span class=\"supfact\">tp</span>;\n  signed int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < cpu_count;\n         ++<span class=\"supfact\">j</span>)\n      amd_fam14h_disable((int *)(Number L * <span class=\"supfact\">i</span> + Number),\n                         <span class=\"supfact\">j</span>);\n  }\n  clock_gettime(Number, &dbg_time);\n  dbg_timediff =\n      timespec_diff_us(<span class=\"supfact\">tp</span>.tv_sec, <span class=\"supfact\">tp</span>.tv_nsec,\n                       dbg_time.tv_sec, dbg_time.tv_nsec);\n  if (be_verbose)\n    fprintf(stderr, String, String, dbg_timediff);\n  timediff =\n      timespec_diff_us(start_time.tv_sec, start_time.tv_nsec,\n                       <span class=\"supfact\">tp</span>.tv_sec, <span class=\"supfact\">tp</span>.tv_nsec);\n  if ((unsigned __int64)timediff > Number) {\n    v0 = (unsigned int)timediff / Number;\n    v1 = gettext(String);\n    fprintf(stderr, v1, v0, Number L);\n  }\n  return Number L;\n}", "code_t": "int __cdecl amd_fam14h_stop() {\n  unsigned int v0;\n  char *v1;\n  timespec <span class=\"supfact\">end_time</span>;\n  int <span class=\"supfact\">cpu</span>;\n  int <span class=\"supfact\">num</span>;\n  clock_gettime(Number, &<span class=\"supfact\">end_time</span>);\n  for (<span class=\"supfact\">num</span> = Number; <span class=\"supfact\">num</span> <= Number;\n       ++<span class=\"supfact\">num</span>) {\n    for (<span class=\"supfact\">cpu</span> = Number; <span class=\"supfact\">cpu</span> < cpu_count;\n         ++<span class=\"supfact\">cpu</span>)\n      amd_fam14h_disable((cstate_t *)(Number L * <span class=\"supfact\">num</span> + Number),\n                         <span class=\"supfact\">cpu</span>);\n  }\n  clock_gettime(Number, &dbg_time);\n  dbg_timediff = timespec_diff_us(<span class=\"supfact\">end_time</span>, dbg_time);\n  if (be_verbose)\n    fprintf(stderr, String, String, dbg_timediff);\n  timediff = timespec_diff_us(start_time, <span class=\"supfact\">end_time</span>);\n  if (timediff > Number) {\n    v0 = (unsigned int)timediff / Number;\n    v1 = gettext(String);\n    fprintf(stderr, v1, v0, Number L);\n  }\n  return Number;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "end_time", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "abeyt", "repo_name": "asus-zenfone2-android", "path": "abeyt/asus-zenfone2-android/c22a9bd265ce09c79974e8182532e2d2107e6f5547c274cc45f0e1b18990433f", "path_in_repo": "abeyt/asus-zenfone2-android/linux/kernel/scripts/kconfig/conf", "objdump": "000000000040261a <print_help>:\n  40261a:\t48 83 ec 38          \tsub    $0x38,%rsp\n  40261e:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n  402623:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  402628:\t48 89 c7             \tmov    %rax,%rdi\n  40262b:\te8 e1 6b 00 00       \tcallq  409211 <str_new>\n  402630:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n  402635:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  40263a:\t48 89 d6             \tmov    %rdx,%rsi\n  40263d:\t48 89 c7             \tmov    %rax,%rdi\n  402640:\te8 30 21 01 00       \tcallq  414775 <menu_get_ext_help>\n  402645:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  40264a:\t48 89 c7             \tmov    %rax,%rdi\n  40264d:\te8 4c 6e 00 00       \tcallq  40949e <str_get>\n  402652:\t48 89 c6             \tmov    %rax,%rsi\n  402655:\tbf 10 50 41 00       \tmov    $0x415010,%edi\n  40265a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40265f:\te8 1c fb ff ff       \tcallq  402180 <printf@plt>\n  402664:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  402669:\t48 89 c7             \tmov    %rax,%rdi\n  40266c:\te8 5e 6c 00 00       \tcallq  4092cf <str_free>\n  402671:\t90                   \tnop\n  402672:\t48 83 c4 38          \tadd    $0x38,%rsp\n  402676:\tc3                   \tretq   ", "code_s": "__int64 __fastcall print_help(__int64 a1) {\n  const char *v1;\n  char <span class=\"supfact\">v3</span>[Number];\n  str_new(<span class=\"supfact\">v3</span>);\n  menu_get_ext_help(a1, <span class=\"supfact\">v3</span>);\n  v1 = (const char *)str_get(<span class=\"supfact\">v3</span>);\n  printf(String, v1);\n  return str_free(<span class=\"supfact\">v3</span>);\n}", "code_t": "void __cdecl print_help(menu *menu) {\n  const char *v1;\n  gstr <span class=\"supfact\">help</span>;\n  str_new(&<span class=\"supfact\">help</span>);\n  menu_get_ext_help(menu, &<span class=\"supfact\">help</span>);\n  v1 = str_get(&<span class=\"supfact\">help</span>);\n  printf(String, v1);\n  str_free(&<span class=\"supfact\">help</span>);\n}", "var": [{"name": "v3", "type": "struct gstr { size_t len; char * s; int max_width; PADDING (4); }", "ref_name": "help", "ref_type": "struct gstr { size_t len; char * s; int max_width; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/95e2976d4dbab75a04d3663dbd6d625147c011b33b8fb7696190981a0e7d946e", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_data_structures_84790dfc.o", "objdump": "00000000000049ba <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE>:\n    49ba:\t55                   \tpush   %rbp\n    49bb:\t48 89 e5             \tmov    %rsp,%rbp\n    49be:\t53                   \tpush   %rbx\n    49bf:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    49c6:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n    49cd:\t48 89 b5 70 ff ff ff \tmov    %rsi,-0x90(%rbp)\n    49d4:\t48 8b 8d 70 ff ff ff \tmov    -0x90(%rbp),%rcx\n    49db:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    49df:\tba 00 08 00 00       \tmov    $0x800,%edx\n    49e4:\t48 89 ce             \tmov    %rcx,%rsi\n    49e7:\t48 89 c7             \tmov    %rax,%rdi\n    49ea:\te8 00 00 00 00       \tcallq  49ef <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x35>\n    49ef:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    49f3:\t48 89 c7             \tmov    %rax,%rdi\n    49f6:\te8 00 00 00 00       \tcallq  49fb <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x41>\n    49fb:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    49fe:\tff 4d ec             \tdecl   -0x14(%rbp)\n    4a01:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    4a05:\t78 1a                \tjs     4a21 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x67>\n    4a07:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    4a0b:\t48 89 c7             \tmov    %rax,%rdi\n    4a0e:\te8 00 00 00 00       \tcallq  4a13 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x59>\n    4a13:\t83 f0 01             \txor    $0x1,%eax\n    4a16:\t84 c0                \ttest   %al,%al\n    4a18:\t74 07                \tje     4a21 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x67>\n    4a1a:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    4a1f:\teb 05                \tjmp    4a26 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x6c>\n    4a21:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4a26:\t84 c0                \ttest   %al,%al\n    4a28:\t0f 84 b2 00 00 00    \tje     4ae0 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x126>\n    4a2e:\t48 8d 45 88          \tlea    -0x78(%rbp),%rax\n    4a32:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n    4a36:\t48 89 d6             \tmov    %rdx,%rsi\n    4a39:\t48 89 c7             \tmov    %rax,%rdi\n    4a3c:\te8 00 00 00 00       \tcallq  4a41 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x87>\n    4a41:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    4a45:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n    4a49:\t48 89 d6             \tmov    %rdx,%rsi\n    4a4c:\t48 89 c7             \tmov    %rax,%rdi\n    4a4f:\te8 00 00 00 00       \tcallq  4a54 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x9a>\n    4a54:\t48 8d 45 88          \tlea    -0x78(%rbp),%rax\n    4a58:\t48 89 c7             \tmov    %rax,%rdi\n    4a5b:\te8 00 00 00 00       \tcallq  4a60 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0xa6>\n    4a60:\t83 f0 01             \txor    $0x1,%eax\n    4a63:\t84 c0                \ttest   %al,%al\n    4a65:\t74 27                \tje     4a8e <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0xd4>\n    4a67:\tbe 18 01 00 00       \tmov    $0x118,%esi\n    4a6c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4a71:\te8 00 00 00 00       \tcallq  4a76 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0xbc>\n    4a76:\te8 00 00 00 00       \tcallq  4a7b <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0xc1>\n    4a7b:\t84 c0                \ttest   %al,%al\n    4a7d:\t74 0f                \tje     4a8e <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0xd4>\n    4a7f:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    4a84:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4a89:\te8 00 00 00 00       \tcallq  4a8e <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0xd4>\n    4a8e:\t48 8d 45 88          \tlea    -0x78(%rbp),%rax\n    4a92:\t48 89 c7             \tmov    %rax,%rdi\n    4a95:\te8 00 00 00 00       \tcallq  4a9a <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0xe0>\n    4a9a:\t84 c0                \ttest   %al,%al\n    4a9c:\t74 25                \tje     4ac3 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x109>\n    4a9e:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    4aa5:\t48 89 c7             \tmov    %rax,%rdi\n    4aa8:\te8 00 00 00 00       \tcallq  4aad <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0xf3>\n    4aad:\t48 89 c1             \tmov    %rax,%rcx\n    4ab0:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    4ab4:\t48 8d 45 88          \tlea    -0x78(%rbp),%rax\n    4ab8:\t48 89 c6             \tmov    %rax,%rsi\n    4abb:\t48 89 cf             \tmov    %rcx,%rdi\n    4abe:\te8 00 00 00 00       \tcallq  4ac3 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x109>\n    4ac3:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    4ac7:\t48 89 c7             \tmov    %rax,%rdi\n    4aca:\te8 00 00 00 00       \tcallq  4acf <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x115>\n    4acf:\t48 8d 45 88          \tlea    -0x78(%rbp),%rax\n    4ad3:\t48 89 c7             \tmov    %rax,%rdi\n    4ad6:\te8 00 00 00 00       \tcallq  4adb <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x121>\n    4adb:\te9 1e ff ff ff       \tjmpq   49fe <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x44>\n    4ae0:\tbb 01 00 00 00       \tmov    $0x1,%ebx\n    4ae5:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    4ae9:\t48 89 c7             \tmov    %rax,%rdi\n    4aec:\te8 00 00 00 00       \tcallq  4af1 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x137>\n    4af1:\t89 d8                \tmov    %ebx,%eax\n    4af3:\teb 3c                \tjmp    4b31 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x177>\n    4af5:\t48 89 c3             \tmov    %rax,%rbx\n    4af8:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    4afc:\t48 89 c7             \tmov    %rax,%rdi\n    4aff:\te8 00 00 00 00       \tcallq  4b04 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x14a>\n    4b04:\teb 03                \tjmp    4b09 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x14f>\n    4b06:\t48 89 c3             \tmov    %rax,%rbx\n    4b09:\t48 8d 45 88          \tlea    -0x78(%rbp),%rax\n    4b0d:\t48 89 c7             \tmov    %rax,%rdi\n    4b10:\te8 00 00 00 00       \tcallq  4b15 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x15b>\n    4b15:\teb 03                \tjmp    4b1a <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x160>\n    4b17:\t48 89 c3             \tmov    %rax,%rbx\n    4b1a:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    4b1e:\t48 89 c7             \tmov    %rax,%rdi\n    4b21:\te8 00 00 00 00       \tcallq  4b26 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x16c>\n    4b26:\t48 89 d8             \tmov    %rbx,%rax\n    4b29:\t48 89 c7             \tmov    %rax,%rdi\n    4b2c:\te8 00 00 00 00       \tcallq  4b31 <_ZN4juce14PropertiesFile12loadAsBinaryERNS_11InputStreamE+0x177>\n    4b31:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    4b38:\t5b                   \tpop    %rbx\n    4b39:\t5d                   \tpop    %rbp\n    4b3a:\tc3                   \tretq   \n    4b3b:\t90                   \tnop", "code_s": "__int64 __fastcall juce PropertiesFile loadAsBinary(juce PropertiesFile *this,\n                                                    juce InputStream *a2) {\n  int v3;\n  juce StringPairArray *v4;\n  char <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  char <span class=\"supfact\">v8</span>[Number];\n  int <span class=\"supfact\">v9</span>;\n  juce BufferedInputStream BufferedInputStream(\n      (juce BufferedInputStream *)<span class=\"supfact\">v8</span>, a2, Number);\n  <span class=\"supfact\">v9</span> =\n      juce InputStream readInt((juce InputStream *)<span class=\"supfact\">v8</span>);\n  while (--<span class=\"supfact\">v9</span> >= Number &&\n         (unsigned __int8)juce BufferedInputStream isExhausted(\n             (juce BufferedInputStream *)<span class=\"supfact\">v8</span>) != Number) {\n    juce BufferedInputStream readString(\n        (juce BufferedInputStream *)<span class=\"supfact\">v7</span>);\n    juce BufferedInputStream readString(\n        (juce BufferedInputStream *)<span class=\"supfact\">v6</span>);\n    if ((unsigned __int8)juce String isNotEmpty(\n            (juce String *)<span class=\"supfact\">v7</span>) != Number) {\n      juce logAssertion((juce *)String, (const char *)&loc_118, v3);\n      if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n              (juce *)String String))\n        kill(Number, Number);\n    }\n    if ((unsigned __int8)juce String isNotEmpty(\n            (juce String *)<span class=\"supfact\">v7</span>)) {\n      v4 = (juce StringPairArray *)juce PropertySet getAllProperties(this);\n      juce StringPairArray set(v4, (const juce String *)<span class=\"supfact\">v7</span>,\n                               (const juce String *)<span class=\"supfact\">v6</span>);\n    }\n    juce String ~String((juce String *)<span class=\"supfact\">v6</span>);\n    juce String ~String((juce String *)<span class=\"supfact\">v7</span>);\n  }\n  juce BufferedInputStream ~BufferedInputStream(\n      (juce BufferedInputStream *)<span class=\"supfact\">v8</span>);\n  return Number L;\n}", "code_t": "bool __cdecl juce PropertiesFile loadAsBinary(juce PropertiesFile *const this,\n                                              juce InputStream *input) {\n  int v3;\n  juce StringPairArray *v4;\n  juce String <span class=\"supfact\">value</span>;\n  juce String <span class=\"supfact\">key</span>;\n  char <span class=\"supfact\">v8</span>[Number];\n  int <span class=\"supfact\">numValues</span>;\n  juce BufferedInputStream BufferedInputStream(\n      (juce BufferedInputStream *)<span class=\"supfact\">v8</span>, input, Number);\n  <span class=\"supfact\">numValues</span> =\n      juce InputStream readInt((juce InputStream *)<span class=\"supfact\">v8</span>);\n  while (--<span class=\"supfact\">numValues</span> >= Number &&\n         (unsigned __int8)juce BufferedInputStream isExhausted(\n             (juce BufferedInputStream *)<span class=\"supfact\">v8</span>) != Number) {\n    juce BufferedInputStream readString(\n        (juce BufferedInputStream *)&<span class=\"supfact\">key</span>);\n    juce BufferedInputStream readString(\n        (juce BufferedInputStream *)&<span class=\"supfact\">value</span>);\n    if (!juce String isNotEmpty(&<span class=\"supfact\">key</span>)) {\n      juce logAssertion((juce *)String, (const char *)&loc_118, v3);\n      if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n              (juce *)String String))\n        kill(Number, Number);\n    }\n    if (juce String isNotEmpty(&<span class=\"supfact\">key</span>)) {\n      v4 = juce PropertySet getAllProperties((juce PropertySet *const)this);\n      juce StringPairArray set(v4, &<span class=\"supfact\">key</span>,\n                               &<span class=\"supfact\">value</span>);\n    }\n    juce String ~String(&<span class=\"supfact\">value</span>);\n    juce String ~String(&<span class=\"supfact\">key</span>);\n  }\n  juce BufferedInputStream ~BufferedInputStream(\n      (juce BufferedInputStream *)<span class=\"supfact\">v8</span>);\n  return Number;\n}", "var": [{"name": "v7", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "key", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}, {"name": "v6", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "value", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}], "body_in_train": false}, {"repo_owner": "pdumais", "repo_name": "dhas", "path": "pdumais/dhas/2767837c4ccf9f35596b1b353a311c2ad5c69d2d9836389591f6aa0d6c11e485", "path_in_repo": "pdumais/dhas/src/libs/dumaislib/json/Object.o", "objdump": "000000000000119c <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:\n    119c:\t55                   \tpush   %rbp\n    119d:\t48 89 e5             \tmov    %rsp,%rbp\n    11a0:\t41 54                \tpush   %r12\n    11a2:\t53                   \tpush   %rbx\n    11a3:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n    11a7:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    11ab:\t89 75 84             \tmov    %esi,-0x7c(%rbp)\n    11ae:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    11b5:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    11bc:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    11c0:\t48 89 d6             \tmov    %rdx,%rsi\n    11c3:\t48 89 c7             \tmov    %rax,%rdi\n    11c6:\te8 00 00 00 00       \tcallq  11cb <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f>\n    11cb:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    11d2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11d7:\t48 89 c7             \tmov    %rax,%rdi\n    11da:\te8 00 00 00 00       \tcallq  11df <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x43>\n    11df:\t84 c0                \ttest   %al,%al\n    11e1:\t74 32                \tje     1215 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x79>\n    11e3:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    11e7:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    11eb:\t48 89 d6             \tmov    %rdx,%rsi\n    11ee:\t48 89 c7             \tmov    %rax,%rdi\n    11f1:\te8 00 00 00 00       \tcallq  11f6 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>\n    11f6:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    11fa:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    11fe:\t48 89 d6             \tmov    %rdx,%rsi\n    1201:\t48 89 c7             \tmov    %rax,%rdi\n    1204:\te8 00 00 00 00       \tcallq  1209 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6d>\n    1209:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    120d:\t48 89 c7             \tmov    %rax,%rdi\n    1210:\te8 00 00 00 00       \tcallq  1215 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x79>\n    1215:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    1219:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n    121d:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1221:\t48 89 c6             \tmov    %rax,%rsi\n    1224:\t48 89 d7             \tmov    %rdx,%rdi\n    1227:\te8 00 00 00 00       \tcallq  122c <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>\n    122c:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n    1230:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    1234:\t48 83 c0 18          \tadd    $0x18,%rax\n    1238:\t48 89 c7             \tmov    %rax,%rdi\n    123b:\te8 00 00 00 00       \tcallq  1240 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>\n    1240:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1244:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    1248:\t48 8d 45 98          \tlea    -0x68(%rbp),%rax\n    124c:\t48 89 d6             \tmov    %rdx,%rsi\n    124f:\t48 89 c7             \tmov    %rax,%rdi\n    1252:\te8 00 00 00 00       \tcallq  1257 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbb>\n    1257:\t84 c0                \ttest   %al,%al\n    1259:\t74 27                \tje     1282 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe6>\n    125b:\t48 8d 45 98          \tlea    -0x68(%rbp),%rax\n    125f:\t48 89 c7             \tmov    %rax,%rdi\n    1262:\te8 00 00 00 00       \tcallq  1267 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcb>\n    1267:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    126b:\t48 85 c0             \ttest   %rax,%rax\n    126e:\t74 12                \tje     1282 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe6>\n    1270:\t48 8b 10             \tmov    (%rax),%rdx\n    1273:\t48 81 c2 90 00 00 00 \tadd    $0x90,%rdx\n    127a:\t48 8b 12             \tmov    (%rdx),%rdx\n    127d:\t48 89 c7             \tmov    %rax,%rdi\n    1280:\tff d2                \tcallq  *%rdx\n    1282:\tbf 40 00 00 00       \tmov    $0x40,%edi\n    1287:\te8 00 00 00 00       \tcallq  128c <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>\n    128c:\t48 89 c3             \tmov    %rax,%rbx\n    128f:\t8b 45 84             \tmov    -0x7c(%rbp),%eax\n    1292:\t89 c6                \tmov    %eax,%esi\n    1294:\t48 89 df             \tmov    %rbx,%rdi\n    1297:\te8 00 00 00 00       \tcallq  129c <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x100>\n    129c:\t48 89 5d e8          \tmov    %rbx,-0x18(%rbp)\n    12a0:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    12a4:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n    12a8:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    12ac:\t48 89 c6             \tmov    %rax,%rsi\n    12af:\t48 89 d7             \tmov    %rdx,%rdi\n    12b2:\te8 00 00 00 00       \tcallq  12b7 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b>\n    12b7:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    12bb:\t48 89 10             \tmov    %rdx,(%rax)\n    12be:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    12c2:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    12c6:\t48 89 c7             \tmov    %rax,%rdi\n    12c9:\te8 00 00 00 00       \tcallq  12ce <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x132>\n    12ce:\t48 89 d8             \tmov    %rbx,%rax\n    12d1:\teb 2a                \tjmp    12fd <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x161>\n    12d3:\t49 89 c4             \tmov    %rax,%r12\n    12d6:\t48 89 df             \tmov    %rbx,%rdi\n    12d9:\te8 00 00 00 00       \tcallq  12de <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x142>\n    12de:\t4c 89 e3             \tmov    %r12,%rbx\n    12e1:\teb 03                \tjmp    12e6 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14a>\n    12e3:\t48 89 c3             \tmov    %rax,%rbx\n    12e6:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    12ea:\t48 89 c7             \tmov    %rax,%rdi\n    12ed:\te8 00 00 00 00       \tcallq  12f2 <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x156>\n    12f2:\t48 89 d8             \tmov    %rbx,%rax\n    12f5:\t48 89 c7             \tmov    %rax,%rdi\n    12f8:\te8 00 00 00 00       \tcallq  12fd <_ZN6Dumais4JSON6Object8addValueEjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x161>\n    12fd:\t48 83 ec 80          \tsub    $0xffffffffffffff80,%rsp\n    1301:\t5b                   \tpop    %rbx\n    1302:\t41 5c                \tpop    %r12\n    1304:\t5d                   \tpop    %rbp\n    1305:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Dumais JSON Object addValue(__int64 a1, unsigned int a2,\n                                               __int64 a3) {\n  __int64 v3;\n  Dumais JSON Value *v4;\n  Dumais JSON Value **v5;\n  __int64 v6;\n  __int64 <span class=\"supfact\">v9</span>;\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>[Number];\n  __int64 <span class=\"supfact\">v12</span>;\n  Dumais JSON Value *<span class=\"supfact\">v13</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v10</span>, a3);\n  if ((unsigned __int8)std operator==<char>(a3, &unk_17AD)) {\n    Dumais JSON Object generateKey[abi:cxx11]((__int64)<span class=\"supfact\">v11</span>, a1);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator=(<span class=\"supfact\">v10</span>, <span class=\"supfact\">v11</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v11</span>);\n  }\n  <span class=\"supfact\">v9</span> =\n      std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>,\n                        Dumais JSON JSON *>\n          find(a1 + Number, <span class=\"supfact\">v10</span>);\n  <span class=\"supfact\">v12</span> =\n      std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>,\n                        Dumais JSON JSON *>\n          end(a1 + Number);\n  if ((unsigned __int8)std __detail operator!=\n      <std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                         std allocator<char>> const,\n                Dumais JSON JSON *>,\n       true>(&<span class=\"supfact\">v9</span>, &<span class=\"supfact\">v12</span>)) {\n    v3 = *(_QWORD *)(std __detail _Node_iterator<\n                         std pair<std __cxx11\n                                      basic_string<char, std char_traits<char>,\n                                                   std allocator<char>> const,\n                                  Dumais JSON JSON *>,\n                         false, true>\n                     operator->(&<span class=\"supfact\">v9</span>) +\n                     Number);\n    if (v3)\n      (*(void(__fastcall **)(__int64))(*(_QWORD *)v3 + Number L))(v3);\n  }\n  v4 = (Dumais JSON Value *)operator new(Number);\n  Dumais JSON Value Value(v4, a2);\n  <span class=\"supfact\">v13</span> = v4;\n  v5 = (Dumais JSON Value **)\n      std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>,\n                        Dumais JSON JSON *>\n      operator[](a1 + Number, <span class=\"supfact\">v10</span>);\n  *v5 = <span class=\"supfact\">v13</span>;\n  v6 = (__int64)<span class=\"supfact\">v13</span>;\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v10</span>);\n  return v6;\n}", "code_t": "Dumais JSON JSON *__cdecl Dumais JSON Object addValue(\n    Dumais JSON Object *const this, unsigned int val, const std string *name) {\n  Dumais JSON JSON *v3;\n  Dumais JSON Value *v4;\n  std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>>,\n                    Dumais JSON JSON *>\n      mapped_type *v5;\n  Dumais JSON JSON *v6;\n  std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>>,\n                    Dumais JSON JSON *>\n      iterator <span class=\"supfact\">it</span>;\n  std string <span class=\"supfact\">key</span>;\n  std string <span class=\"supfact\">v11</span>;\n  std __detail _Node_iterator_base<\n      std pair<const std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>,\n               Dumais JSON JSON *>,\n      true>\n      <span class=\"supfact\">__y</span>;\n  Dumais JSON Value *<span class=\"supfact\">item</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(&<span class=\"supfact\">key</span>, name);\n  if (std operator==<char>(name, &_rhs)) {\n    Dumais JSON Object generateKey[abi:cxx11](&<span class=\"supfact\">v11</span>, this);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator=(&<span class=\"supfact\">key</span>, &<span class=\"supfact\">v11</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">v11</span>);\n  }\n  <span class=\"supfact\">it</span>._M_cur =\n      std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>,\n                        Dumais JSON JSON *>\n          find(&this->mMembers, &<span class=\"supfact\">key</span>)._M_cur;\n  <span class=\"supfact\">__y</span>._M_cur =\n      std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>,\n                        Dumais JSON JSON *>\n          end(&this->mMembers)._M_cur;\n  if (std __detail operator!=\n      <std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                         std allocator<char>> const,\n                Dumais JSON JSON *>,\n       true>(&<span class=\"supfact\">it</span>, &<span class=\"supfact\">__y</span>)) {\n    v3 = std __detail _Node_iterator<\n             std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>> const,\n                      Dumais JSON JSON *>,\n             false, true>\n         operator->(&<span class=\"supfact\">it</span>)->second;\n    if (v3)\n      (*(void(__fastcall **)(Dumais JSON JSON *))(*(_QWORD *)v3 + Number L))(\n          v3);\n  }\n  v4 = (Dumais JSON Value *)operator new(Number);\n  Dumais JSON Value Value(v4, val);\n  <span class=\"supfact\">item</span> = v4;\n  v5 = std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                  std allocator<char>>,\n                         Dumais JSON JSON *>\n  operator[](&this->mMembers, &<span class=\"supfact\">key</span>);\n  *v5 = <span class=\"supfact\">item</span>;\n  v6 = <span class=\"supfact\">item</span>;\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">key</span>);\n  return v6;\n}", "var": [{"name": "v11", "type": "char[32]", "ref_name": "v11", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v10", "type": "char[32]", "ref_name": "key", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "mend0za", "repo_name": "QEMU-dt-config", "path": "mend0za/QEMU-dt-config/a8b0bd9f99393ab6adafcd4e555a4d06b7e13b0434dc2ed484a0bbda1f14553c", "path_in_repo": "mend0za/QEMU-dt-config//hw/net/e1000e_core.o", "objdump": "0000000000001ead <trace_e1000e_rx_flt_vlan_mismatch>:\n    1ead:\t55                   \tpush   %rbp\n    1eae:\t48 89 e5             \tmov    %rsp,%rbp\n    1eb1:\t41 55                \tpush   %r13\n    1eb3:\t41 54                \tpush   %r12\n    1eb5:\t53                   \tpush   %rbx\n    1eb6:\t48 83 ec 38          \tsub    $0x38,%rsp\n    1eba:\t89 f8                \tmov    %edi,%eax\n    1ebc:\t66 89 45 bc          \tmov    %ax,-0x44(%rbp)\n    1ec0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1ec7:\t00 00 \n    1ec9:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1ecd:\t31 c0                \txor    %eax,%eax\n    1ecf:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1ed5 <trace_e1000e_rx_flt_vlan_mismatch+0x28>\n    1ed5:\t85 c0                \ttest   %eax,%eax\n    1ed7:\t0f 95 c0             \tsetne  %al\n    1eda:\t0f b6 c0             \tmovzbl %al,%eax\n    1edd:\t48 85 c0             \ttest   %rax,%rax\n    1ee0:\t74 62                \tje     1f44 <trace_e1000e_rx_flt_vlan_mismatch+0x97>\n    1ee2:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 1ee9 <trace_e1000e_rx_flt_vlan_mismatch+0x3c>\n    1ee9:\t66 85 c0             \ttest   %ax,%ax\n    1eec:\t74 56                \tje     1f44 <trace_e1000e_rx_flt_vlan_mismatch+0x97>\n    1eee:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1ef2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ef7:\t48 89 c7             \tmov    %rax,%rdi\n    1efa:\te8 00 00 00 00       \tcallq  1eff <trace_e1000e_rx_flt_vlan_mismatch+0x52>\n    1eff:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    1f04:\te8 ea e7 ff ff       \tcallq  6f3 <qemu_loglevel_mask>\n    1f09:\t0f b6 c0             \tmovzbl %al,%eax\n    1f0c:\t48 85 c0             \ttest   %rax,%rax\n    1f0f:\t74 33                \tje     1f44 <trace_e1000e_rx_flt_vlan_mismatch+0x97>\n    1f11:\t0f b7 5d bc          \tmovzwl -0x44(%rbp),%ebx\n    1f15:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1f19:\t49 89 c5             \tmov    %rax,%r13\n    1f1c:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1f20:\t49 89 c4             \tmov    %rax,%r12\n    1f23:\te8 00 00 00 00       \tcallq  1f28 <trace_e1000e_rx_flt_vlan_mismatch+0x7b>\n    1f28:\t41 89 d8             \tmov    %ebx,%r8d\n    1f2b:\t4c 89 e9             \tmov    %r13,%rcx\n    1f2e:\t4c 89 e2             \tmov    %r12,%rdx\n    1f31:\t89 c6                \tmov    %eax,%esi\n    1f33:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1f3a <trace_e1000e_rx_flt_vlan_mismatch+0x8d>\n    1f3a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f3f:\te8 00 00 00 00       \tcallq  1f44 <trace_e1000e_rx_flt_vlan_mismatch+0x97>\n    1f44:\t90                   \tnop\n    1f45:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1f49:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1f50:\t00 00 \n    1f52:\t74 05                \tje     1f59 <trace_e1000e_rx_flt_vlan_mismatch+0xac>\n    1f54:\te8 00 00 00 00       \tcallq  1f59 <trace_e1000e_rx_flt_vlan_mismatch+0xac>\n    1f59:\t48 83 c4 38          \tadd    $0x38,%rsp\n    1f5d:\t5b                   \tpop    %rbx\n    1f5e:\t41 5c                \tpop    %r12\n    1f60:\t41 5d                \tpop    %r13\n    1f62:\t5d                   \tpop    %rbp\n    1f63:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_e1000e_rx_flt_vlan_mismatch(\n    unsigned __int16 a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_E1000E_RX_FLT_VLAN_MISMATCH_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v1 = <span class=\"supfact\">tv</span>.tv_usec;\n        v2 = <span class=\"supfact\">tv</span>.tv_sec;\n        v3 = getpid();\n        qemu_log(String, v3, v2, v1, a1);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl trace_e1000e_rx_flt_vlan_mismatch(uint16_t vid) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_E1000E_RX_FLT_VLAN_MISMATCH_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v1 = <span class=\"supfact\">_now</span>.tv_usec;\n      v2 = <span class=\"supfact\">_now</span>.tv_sec;\n      v3 = getpid();\n      qemu_log(String, v3, v2, v1, vid);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "DarkLord1731", "repo_name": "linux-stable", "path": "DarkLord1731/linux-stable/ae002a7797e45c975313a2da66b635d4700cd79c945b91f3d3612c488a2e7706", "path_in_repo": "DarkLord1731/linux-stable/tools/testing/selftests/bpf/test_progs", "objdump": "00000000004041d2 <bpf_object_search_section_size>:\n  4041d2:\t55                   \tpush   %rbp\n  4041d3:\t48 89 e5             \tmov    %rsp,%rbp\n  4041d6:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n  4041dd:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n  4041e1:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n  4041e5:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n  4041ec:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4041f0:\t48 05 b0 00 00 00    \tadd    $0xb0,%rax\n  4041f6:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4041fa:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4041fe:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n  404205:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  404209:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  404210:\t00 \n  404211:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  404218:\te9 35 01 00 00       \tjmpq   404352 <bpf_object_search_section_size+0x180>\n  40421d:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  404221:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n  404225:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404229:\t48 89 d6             \tmov    %rdx,%rsi\n  40422c:\t48 89 c7             \tmov    %rax,%rdi\n  40422f:\te8 4c de ff ff       \tcallq  402080 <gelf_getshdr@plt>\n  404234:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n  404238:\t48 39 d0             \tcmp    %rdx,%rax\n  40423b:\t74 33                \tje     404270 <bpf_object_search_section_size+0x9e>\n  40423d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  404241:\t48 8d 90 6c 01 00 00 \tlea    0x16c(%rax),%rdx\n  404248:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40424b:\t48 89 d1             \tmov    %rdx,%rcx\n  40424e:\t89 c2                \tmov    %eax,%edx\n  404250:\t48 8d 35 89 f2 01 00 \tlea    0x1f289(%rip),%rsi        # 4234e0 <__func__.7554+0x3c0>\n  404257:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40425c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404261:\te8 f2 ee ff ff       \tcallq  403158 <libbpf_print>\n  404266:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n  40426b:\te9 09 01 00 00       \tjmpq   404379 <bpf_object_search_section_size+0x1a7>\n  404270:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n  404273:\t89 c2                \tmov    %eax,%edx\n  404275:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  404279:\t0f b7 40 3e          \tmovzwl 0x3e(%rax),%eax\n  40427d:\t0f b7 c8             \tmovzwl %ax,%ecx\n  404280:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  404284:\t48 89 ce             \tmov    %rcx,%rsi\n  404287:\t48 89 c7             \tmov    %rax,%rdi\n  40428a:\te8 c1 df ff ff       \tcallq  402250 <elf_strptr@plt>\n  40428f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  404293:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  404298:\t75 33                \tjne    4042cd <bpf_object_search_section_size+0xfb>\n  40429a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  40429e:\t48 8d 90 6c 01 00 00 \tlea    0x16c(%rax),%rdx\n  4042a5:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  4042a8:\t48 89 d1             \tmov    %rdx,%rcx\n  4042ab:\t89 c2                \tmov    %eax,%edx\n  4042ad:\t48 8d 35 64 f2 01 00 \tlea    0x1f264(%rip),%rsi        # 423518 <__func__.7554+0x3f8>\n  4042b4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4042b9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4042be:\te8 95 ee ff ff       \tcallq  403158 <libbpf_print>\n  4042c3:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n  4042c8:\te9 ac 00 00 00       \tjmpq   404379 <bpf_object_search_section_size+0x1a7>\n  4042cd:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4042d1:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  4042d5:\t48 89 d6             \tmov    %rdx,%rsi\n  4042d8:\t48 89 c7             \tmov    %rax,%rdi\n  4042db:\te8 60 e0 ff ff       \tcallq  402340 <strcmp@plt>\n  4042e0:\t85 c0                \ttest   %eax,%eax\n  4042e2:\t74 02                \tje     4042e6 <bpf_object_search_section_size+0x114>\n  4042e4:\teb 6c                \tjmp    404352 <bpf_object_search_section_size+0x180>\n  4042e6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4042ea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4042ef:\t48 89 c7             \tmov    %rax,%rdi\n  4042f2:\te8 d9 df ff ff       \tcallq  4022d0 <elf_getdata@plt>\n  4042f7:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4042fb:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  404300:\t75 37                \tjne    404339 <bpf_object_search_section_size+0x167>\n  404302:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  404306:\t48 8d 88 6c 01 00 00 \tlea    0x16c(%rax),%rcx\n  40430d:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n  404311:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  404314:\t49 89 c8             \tmov    %rcx,%r8\n  404317:\t48 89 d1             \tmov    %rdx,%rcx\n  40431a:\t89 c2                \tmov    %eax,%edx\n  40431c:\t48 8d 35 25 f2 01 00 \tlea    0x1f225(%rip),%rsi        # 423548 <__func__.7554+0x428>\n  404323:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  404328:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40432d:\te8 26 ee ff ff       \tcallq  403158 <libbpf_print>\n  404332:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n  404337:\teb 40                \tjmp    404379 <bpf_object_search_section_size+0x1a7>\n  404339:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40433d:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  404341:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  404348:\t48 89 10             \tmov    %rdx,(%rax)\n  40434b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404350:\teb 27                \tjmp    404379 <bpf_object_search_section_size+0x1a7>\n  404352:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  404356:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40435a:\t48 89 d6             \tmov    %rdx,%rsi\n  40435d:\t48 89 c7             \tmov    %rax,%rdi\n  404360:\te8 8b e1 ff ff       \tcallq  4024f0 <elf_nextscn@plt>\n  404365:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  404369:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40436e:\t0f 85 a9 fe ff ff    \tjne    40421d <bpf_object_search_section_size+0x4b>\n  404374:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n  404379:\tc9                   \tleaveq \n  40437a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bpf_object_search_section_size(__int64 a1, const char *a2,\n                                                  _QWORD *a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 result;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  int <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  char *<span class=\"supfact\">s2</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  unsigned int <span class=\"supfact\">v15</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  <span class=\"supfact\">v14</span> = a1 + Number;\n  <span class=\"supfact\">v13</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v16</span> = Number L;\n  <span class=\"supfact\">v15</span> = Number;\n  do {\n    <span class=\"supfact\">v16</span> = elf_nextscn();\n    if (!<span class=\"supfact\">v16</span>)\n      return Number L;\n    ++<span class=\"supfact\">v15</span>;\n    if ((int *)gelf_getshdr() != &<span class=\"supfact\">v10</span>) {\n      libbpf_print(Number, (__int64)String, <span class=\"supfact\">v15</span>, a1 + Number,\n                   v3, v4);\n      return Number L;\n    }\n    <span class=\"supfact\">s2</span> = (char *)elf_strptr();\n    if (!<span class=\"supfact\">s2</span>) {\n      libbpf_print(Number, (__int64)String, <span class=\"supfact\">v15</span>, a1 + Number,\n                   v6, v7);\n      return Number L;\n    }\n  } while (strcmp(a2, <span class=\"supfact\">s2</span>));\n  <span class=\"supfact\">v11</span> = elf_getdata();\n  if (<span class=\"supfact\">v11</span>) {\n    *a3 = *(_QWORD *)(<span class=\"supfact\">v11</span> + Number);\n    result = Number L;\n  } else {\n    libbpf_print(Number, (__int64)String, <span class=\"supfact\">v15</span>, (__int64)a2,\n                 a1 + Number, v8);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl bpf_object_search_section_size(const bpf_object *obj,\n                                           const char *name, size_t *d_size) {\n  int result;\n  GElf_Shdr <span class=\"supfact\">sh</span>;\n  Elf_Data *<span class=\"supfact\">data</span>;\n  const char *<span class=\"supfact\">sec_name</span>;\n  Elf_0 *<span class=\"supfact\">elf</span>;\n  const GElf_Ehdr *<span class=\"supfact\">ep</span>;\n  int <span class=\"supfact\">idx</span>;\n  Elf_Scn_0 *<span class=\"supfact\">scn</span>;\n  <span class=\"supfact\">ep</span> = &obj->efile.ehdr;\n  <span class=\"supfact\">elf</span> = obj->efile.<span class=\"supfact\">elf</span>;\n  <span class=\"supfact\">scn</span> = Number L;\n  <span class=\"supfact\">idx</span> = Number;\n  do {\n    <span class=\"supfact\">scn</span> = (Elf_Scn_0 *)elf_nextscn();\n    if (!<span class=\"supfact\">scn</span>)\n      return Number;\n    ++<span class=\"supfact\">idx</span>;\n    if ((GElf_Shdr *)gelf_getshdr() != &<span class=\"supfact\">sh</span>) {\n      libbpf_print(LIBBPF_WARN, String, (unsigned int)<span class=\"supfact\">idx</span>,\n                   obj->path);\n      return Number;\n    }\n    <span class=\"supfact\">sec_name</span> = (const char *)elf_strptr();\n    if (!<span class=\"supfact\">sec_name</span>) {\n      libbpf_print(LIBBPF_WARN, String, (unsigned int)<span class=\"supfact\">idx</span>,\n                   obj->path);\n      return Number;\n    }\n  } while (strcmp(name, <span class=\"supfact\">sec_name</span>));\n  <span class=\"supfact\">data</span> = (Elf_Data *)elf_getdata();\n  if (<span class=\"supfact\">data</span>) {\n    *d_size = <span class=\"supfact\">data</span>->d_size;\n    result = Number;\n  } else {\n    libbpf_print(LIBBPF_WARN, String, (unsigned int)<span class=\"supfact\">idx</span>, name,\n                 obj->path);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v10", "type": "struct GElf_Shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; }", "ref_name": "sh", "ref_type": "struct GElf_Shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; }"}], "body_in_train": true}, {"repo_owner": "romankap", "repo_name": "Using-dlib", "path": "romankap/Using-dlib/27b8fa23c29e86eb66ee5138478791235279a4ffd6f65a685ba18d4db10da91b", "path_in_repo": "romankap/Using-dlib/Lot_w_dlib/dlib-18.10/dlib/test/cca.o", "objdump": "0000000000000000 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS2_33memory_manager_stateless_kernel_1IcEENS2_16row_major_layoutEEEESt6vectorIS8_NS2_13std_allocatorIS8_S5_EEEEmiEl>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  14:\t48 8b 00             \tmov    (%rax),%rax\n  17:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  1b:\t48 c1 e2 05          \tshl    $0x5,%rdx\n  1f:\t48 f7 da             \tneg    %rdx\n  22:\t48 01 d0             \tadd    %rdx,%rax\n  25:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  29:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  2d:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  31:\t48 89 d6             \tmov    %rdx,%rsi\n  34:\t48 89 c7             \tmov    %rax,%rdi\n  37:\te8 00 00 00 00       \tcallq  3c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdN4dlib6matrixIdLl0ELl1ENS2_33memory_manager_stateless_kernel_1IcEENS2_16row_major_layoutEEEESt6vectorIS8_NS2_13std_allocatorIS8_S5_EEEEmiEl+0x3c>\n  3c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40:\tc9                   \tleaveq \n  41:\tc3                   \tretq   ", "code_s": "__int64 __fastcall __gnu_cxx __normal_iterator<\n    std pair<double, dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>> *,\n    std vector<\n        std pair<double,\n                 dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>>,\n        dlib std_allocator<\n            std pair<double,\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>>,\n            dlib memory_manager_stateless_kernel_1<char>>>>\noperator-(_QWORD *a1, __int64 a2) {\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Number * a2 + *a1;\n  __gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>\n      __normal_iterator(&<span class=\"supfact\">v3</span>, &<span class=\"supfact\">v4</span>);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "__gnu_cxx __normal_iterator<\n    std pair<double, dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>> *,\n    std vector<\n        std pair<double,\n                 dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>>,\n        dlib std_allocator<\n            std pair<double,\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>>,\n            dlib memory_manager_stateless_kernel_1<char>>>> __cdecl __gnu_cxx\n    __normal_iterator<\n        std pair<double,\n                 dlib matrix<double, Number, Number,\n                             dlib memory_manager_stateless_kernel_1<char>,\n                             dlib row_major_layout>> *,\n        std vector<\n            std pair<double,\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>>,\n            dlib std_allocator<\n                std pair<\n                    double,\n                    dlib matrix<double, Number, Number,\n                                dlib memory_manager_stateless_kernel_1<char>,\n                                dlib row_major_layout>>,\n                dlib memory_manager_stateless_kernel_1<char>>>>\n    operator-(\n        const __gnu_cxx __normal_iterator<\n            std pair<double,\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>> *,\n            std vector<\n                std pair<\n                    double,\n                    dlib matrix<double, Number, Number,\n                                dlib memory_manager_stateless_kernel_1<char>,\n                                dlib row_major_layout>>,\n                dlib std_allocator<\n                    std pair<double,\n                             dlib matrix<double, Number, Number,\n                                         dlib memory_manager_stateless_kernel_1<\n                                             char>,\n                                         dlib row_major_layout>>,\n                    dlib memory_manager_stateless_kernel_1<char>>>> *const this,\n        __gnu_cxx __normal_iterator<\n            std pair<double,\n                     dlib matrix<double, Number, Number,\n                                 dlib memory_manager_stateless_kernel_1<char>,\n                                 dlib row_major_layout>> *,\n            std vector<\n                std pair<\n                    double,\n                    dlib matrix<double, Number, Number,\n                                dlib memory_manager_stateless_kernel_1<char>,\n                                dlib row_major_layout>>,\n                dlib std_allocator<\n                    std pair<double,\n                             dlib matrix<double, Number, Number,\n                                         dlib memory_manager_stateless_kernel_1<\n                                             char>,\n                                         dlib row_major_layout>>,\n                    dlib memory_manager_stateless_kernel_1<char>>>>\n            difference_type __n) {\n  __gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>\n      <span class=\"supfact\">v3</span>;\n  std pair<double, dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>> *<span class=\"supfact\">__i</span>;\n  <span class=\"supfact\">__i</span> = &this->_M_current[-__n];\n  __gnu_cxx __normal_iterator<\n      std pair<double, dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>> *,\n      std vector<\n          std pair<double,\n                   dlib matrix<double, Number, Number,\n                               dlib memory_manager_stateless_kernel_1<char>,\n                               dlib row_major_layout>>,\n          dlib std_allocator<\n              std pair<double,\n                       dlib matrix<double, Number, Number,\n                                   dlib memory_manager_stateless_kernel_1<char>,\n                                   dlib row_major_layout>>,\n              dlib memory_manager_stateless_kernel_1<char>>>>\n      __normal_iterator(&<span class=\"supfact\">v3</span>, &<span class=\"supfact\">__i</span>);\n  return <span class=\"supfact\">v3</span>;\n}", "var": [{"name": "v3", "type": "struct __gnu_cxx::__normal_iterator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >*,std::vector<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::std_allocator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::memory_manager_stateless_kernel_1<char> > > > { std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> > * _M_current; }", "ref_name": "v3", "ref_type": "struct __gnu_cxx::__normal_iterator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >*,std::vector<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::std_allocator<std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> >,dlib::memory_manager_stateless_kernel_1<char> > > > { std::pair<double,dlib::matrix<double,0,1,dlib::memory_manager_stateless_kernel_1<char>,dlib::row_major_layout> > * _M_current; }"}], "body_in_train": true}, {"repo_owner": "jplozi", "repo_name": "linux-4.19", "path": "jplozi/linux-4.19/fd4d8ba662795d45a02314bd0a5d1923cf874a6c07523e495da950e860f7caca", "path_in_repo": "jplozi/linux-4.19/tools/testing/selftests/bpf/libbpf-in.o", "objdump": "0000000000006154 <bpf_create_map_name>:\n    6154:\t55                   \tpush   %rbp\n    6155:\t48 89 e5             \tmov    %rsp,%rbp\n    6158:\t48 83 ec 60          \tsub    $0x60,%rsp\n    615c:\t89 7d bc             \tmov    %edi,-0x44(%rbp)\n    615f:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    6163:\t89 55 b8             \tmov    %edx,-0x48(%rbp)\n    6166:\t89 4d ac             \tmov    %ecx,-0x54(%rbp)\n    6169:\t44 89 45 a8          \tmov    %r8d,-0x58(%rbp)\n    616d:\t44 89 4d a4          \tmov    %r9d,-0x5c(%rbp)\n    6171:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n    6178:\t00 \n    6179:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n    6180:\t00 \n    6181:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n    6188:\t00 \n    6189:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    6190:\t00 \n    6191:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    6198:\t00 \n    6199:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    61a0:\t00 \n    61a1:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    61a8:\t00 \n    61a9:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    61ad:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    61b1:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    61b4:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n    61b7:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n    61ba:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    61bd:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n    61c0:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    61c3:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n    61c6:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    61c9:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    61cc:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    61cf:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    61d3:\t48 89 c7             \tmov    %rax,%rdi\n    61d6:\te8 00 00 00 00       \tcallq  61db <bpf_create_map_name+0x87>\n    61db:\tc9                   \tleaveq \n    61dc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bpf_create_map_name(unsigned int a1, __int64 a2,\n                                       unsigned int a3, unsigned int a4,\n                                       unsigned int a5, unsigned int a6) {\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  <span class=\"supfact\">v7</span>[Number] = a2;\n  <span class=\"supfact\">v7</span>[Number] = __PAIR64__(a6, a1);\n  <span class=\"supfact\">v7</span>[Number] = __PAIR64__(a4, a3);\n  <span class=\"supfact\">v7</span>[Number] = a5;\n  return bpf_create_map_xattr((__int64)<span class=\"supfact\">v7</span>);\n}", "code_t": "int __cdecl bpf_create_map_name(bpf_map_type map_type, const char *name,\n                                int key_size, int value_size, int max_entries,\n                                __u32 map_flags) {\n  bpf_create_map_attr <span class=\"supfact\">map_attr</span>;\n  <span class=\"supfact\">map_attr</span>.numa_node = Number;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.btf_fd = Number L;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.btf_value_type_id = Number L;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.inner_map_fd = Number L;\n  <span class=\"supfact\">map_attr</span>.name = name;\n  <span class=\"supfact\">map_attr</span>.map_type = map_type;\n  <span class=\"supfact\">map_attr</span>.map_flags = map_flags;\n  <span class=\"supfact\">map_attr</span>.key_size = key_size;\n  <span class=\"supfact\">map_attr</span>.value_size = value_size;\n  <span class=\"supfact\">map_attr</span>.max_entries = max_entries;\n  return bpf_create_map_xattr(&<span class=\"supfact\">map_attr</span>);\n}", "var": [{"name": "v7", "type": "struct bpf_create_map_attr { const char * name; bpf_map_type map_type; __u32 map_flags; __u32 key_size; __u32 value_size; __u32 max_entries; __u32 numa_node; __u32 btf_fd; __u32 btf_key_type_id; __u32 btf_value_type_id; __u32 map_ifindex; __u32 inner_map_fd; PADDING (4); }", "ref_name": "map_attr", "ref_type": "struct bpf_create_map_attr { const char * name; bpf_map_type map_type; __u32 map_flags; __u32 key_size; __u32 value_size; __u32 max_entries; __u32 numa_node; __u32 btf_fd; __u32 btf_key_type_id; __u32 btf_value_type_id; __u32 map_ifindex; __u32 inner_map_fd; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "nicephil", "repo_name": "kernel_repos", "path": "nicephil/kernel_repos/a9591110a7b7560a15bb03a3790d071a2057f0c9594ea81b7eea2efe17625bc8", "path_in_repo": "nicephil/kernel_repos/tools/perf/util/dwarf-aux.o", "objdump": "00000000000004ec <die_get_attr_udata>:\n     4ec:\t55                   \tpush   %rbp\n     4ed:\t48 89 e5             \tmov    %rsp,%rbp\n     4f0:\t48 83 ec 40          \tsub    $0x40,%rsp\n     4f4:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     4f8:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n     4fb:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     4ff:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     506:\t00 00 \n     508:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     50c:\t31 c0                \txor    %eax,%eax\n     50e:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     512:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n     515:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     519:\t89 ce                \tmov    %ecx,%esi\n     51b:\t48 89 c7             \tmov    %rax,%rdi\n     51e:\te8 00 00 00 00       \tcallq  523 <die_get_attr_udata+0x37>\n     523:\t48 85 c0             \ttest   %rax,%rax\n     526:\t74 17                \tje     53f <die_get_attr_udata+0x53>\n     528:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     52c:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     530:\t48 89 d6             \tmov    %rdx,%rsi\n     533:\t48 89 c7             \tmov    %rax,%rdi\n     536:\te8 00 00 00 00       \tcallq  53b <die_get_attr_udata+0x4f>\n     53b:\t85 c0                \ttest   %eax,%eax\n     53d:\t74 07                \tje     546 <die_get_attr_udata+0x5a>\n     53f:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n     544:\teb 05                \tjmp    54b <die_get_attr_udata+0x5f>\n     546:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     54b:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     54f:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     556:\t00 00 \n     558:\t74 05                \tje     55f <die_get_attr_udata+0x73>\n     55a:\te8 00 00 00 00       \tcallq  55f <die_get_attr_udata+0x73>\n     55f:\tc9                   \tleaveq \n     560:\tc3                   \tretq   ", "code_s": "__int64 __fastcall die_get_attr_udata(struct Dwarf_Die_s *a1, unsigned int a2,\n                                      Dwarf_Unsigned *a3) {\n  __int64 v3;\n  __int64 result;\n  Dwarf_Attribute <span class=\"supfact\">v6</span>[Number];\n  <span class=\"supfact\">v6</span>[Number] = (Dwarf_Attribute)__readfsqword(Number);\n  LODWORD(v3) = dwarf_attr(a1, a2, <span class=\"supfact\">v6</span>, (Dwarf_Error *)a2);\n  if (v3 && !dwarf_formudata((Dwarf_Attribute)<span class=\"supfact\">v6</span>, a3,\n                             (Dwarf_Error *)a3))\n    result = Number L;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl die_get_attr_udata(Dwarf_Die *tp_die, unsigned int attr_name,\n                               Dwarf_Word *result) {\n  __int64 v3;\n  int v4;\n  Dwarf_Die v5;\n  Dwarf_Attribute v6;\n  Dwarf_Attribute <span class=\"supfact\">attr</span>;\n  unsigned __int64 v8;\n  v5.padding__ = (__int64)tp_die;\n  HIDWORD(v5.abbrev) = attr_name;\n  v5.cu = (Dwarf_CU *)result;\n  v8 = __readfsqword(Number);\n  LODWORD(v3) = dwarf_attr(v5, (Dwarf_Half)tp_die, (Dwarf_Attribute *)attr_name,\n                           (Dwarf_Error *)&<span class=\"supfact\">attr</span>);\n  if (v3 && !dwarf_formudata(v6, (Dwarf_Unsigned *)&<span class=\"supfact\">attr</span>.code,\n                             (Dwarf_Error *)v6.valp))\n    v4 = Number;\n  else\n    v4 = Number;\n  return v4;\n}", "var": [{"name": "v6", "type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }", "ref_name": "attr", "ref_type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }"}], "body_in_train": true}, {"repo_owner": "grpascal", "repo_name": "GEO", "path": "grpascal/GEO/1af20c332f82f04ccf6e2d64e3d7c49a92c84a50891969e2c0a3827114aa768e", "path_in_repo": "grpascal/GEO/host/Linux/mxview/src/lua/src/lua", "objdump": "000000000041186f <whilestat>:\n  41186f:\t55                   \tpush   %rbp\n  411870:\t48 89 e5             \tmov    %rsp,%rbp\n  411873:\t48 83 ec 30          \tsub    $0x30,%rsp\n  411877:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  41187b:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  41187e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  411882:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  411886:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  41188a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41188e:\t48 89 c7             \tmov    %rax,%rdi\n  411891:\te8 ff d3 00 00       \tcallq  41ec95 <luaX_next>\n  411896:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41189a:\t48 89 c7             \tmov    %rax,%rdi\n  41189d:\te8 a2 97 00 00       \tcallq  41b044 <luaK_getlabel>\n  4118a2:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4118a5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4118a9:\t48 89 c7             \tmov    %rax,%rdi\n  4118ac:\te8 ae fe ff ff       \tcallq  41175f <cond>\n  4118b1:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  4118b4:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  4118b8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4118bc:\tba 01 00 00 00       \tmov    $0x1,%edx\n  4118c1:\t48 89 ce             \tmov    %rcx,%rsi\n  4118c4:\t48 89 c7             \tmov    %rax,%rdi\n  4118c7:\te8 aa e1 ff ff       \tcallq  40fa76 <enterblock>\n  4118cc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4118d0:\tbe 03 01 00 00       \tmov    $0x103,%esi\n  4118d5:\t48 89 c7             \tmov    %rax,%rdi\n  4118d8:\te8 2a d8 ff ff       \tcallq  40f107 <checknext>\n  4118dd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4118e1:\t48 89 c7             \tmov    %rax,%rdi\n  4118e4:\te8 6b fb ff ff       \tcallq  411454 <block>\n  4118e9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4118ed:\t48 89 c7             \tmov    %rax,%rdi\n  4118f0:\te8 f8 95 00 00       \tcallq  41aeed <luaK_jump>\n  4118f5:\t89 c1                \tmov    %eax,%ecx\n  4118f7:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  4118fa:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4118fe:\t89 ce                \tmov    %ecx,%esi\n  411900:\t48 89 c7             \tmov    %rax,%rdi\n  411903:\te8 07 9a 00 00       \tcallq  41b30f <luaK_patchlist>\n  411908:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  41190b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41190f:\t89 d1                \tmov    %edx,%ecx\n  411911:\tba 15 01 00 00       \tmov    $0x115,%edx\n  411916:\tbe 06 01 00 00       \tmov    $0x106,%esi\n  41191b:\t48 89 c7             \tmov    %rax,%rdi\n  41191e:\te8 13 d8 ff ff       \tcallq  40f136 <check_match>\n  411923:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  411927:\t48 89 c7             \tmov    %rax,%rdi\n  41192a:\te8 a3 e1 ff ff       \tcallq  40fad2 <leaveblock>\n  41192f:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  411932:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  411936:\t89 d6                \tmov    %edx,%esi\n  411938:\t48 89 c7             \tmov    %rax,%rdi\n  41193b:\te8 20 9a 00 00       \tcallq  41b360 <luaK_patchtohere>\n  411940:\t90                   \tnop\n  411941:\tc9                   \tleaveq \n  411942:\tc3                   \tretq   ", "code_s": "__int64 __fastcall whilestat(__int64 a1, unsigned int a2) {\n  unsigned int v2;\n  char <span class=\"supfact\">v4</span>[Number];\n  unsigned int <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = *(_QWORD *)(a1 + Number);\n  luaX_next(a1);\n  <span class=\"supfact\">v6</span> = luaK_getlabel(<span class=\"supfact\">v7</span>);\n  <span class=\"supfact\">v5</span> = cond(a1);\n  enterblock(<span class=\"supfact\">v7</span>, (__int64)<span class=\"supfact\">v4</span>, Number);\n  checknext(a1, Number);\n  block(a1);\n  v2 = luaK_jump(<span class=\"supfact\">v7</span>);\n  luaK_patchlist(<span class=\"supfact\">v7</span>, v2, <span class=\"supfact\">v6</span>);\n  check_match(a1, Number, Number, a2);\n  leaveblock(<span class=\"supfact\">v7</span>);\n  return luaK_patchtohere(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v5</span>);\n}", "code_t": "void __cdecl whilestat(LexState_0 *ls, int line) {\n  int v2;\n  BlockCnt_0 <span class=\"supfact\">bl_0</span>;\n  int <span class=\"supfact\">condexit</span>;\n  int <span class=\"supfact\">whileinit</span>;\n  FuncState_0 *<span class=\"supfact\">fs_0</span>;\n  <span class=\"supfact\">fs_0</span> = ls->fs;\n  luaX_next(ls);\n  <span class=\"supfact\">whileinit</span> = luaK_getlabel(<span class=\"supfact\">fs_0</span>);\n  <span class=\"supfact\">condexit</span> = cond(ls);\n  enterblock(<span class=\"supfact\">fs_0</span>, &<span class=\"supfact\">bl_0</span>, Number);\n  checknext(ls, Number);\n  block(ls);\n  v2 = luaK_jump(<span class=\"supfact\">fs_0</span>);\n  luaK_patchlist(<span class=\"supfact\">fs_0</span>, v2, <span class=\"supfact\">whileinit</span>);\n  check_match(ls, Number, Number, line);\n  leaveblock(<span class=\"supfact\">fs_0</span>);\n  luaK_patchtohere(<span class=\"supfact\">fs_0</span>, <span class=\"supfact\">condexit</span>);\n}", "var": [{"name": "v4", "type": "struct BlockCnt_0 { BlockCnt * previous; int breaklist; lu_byte nactvar; lu_byte upval; lu_byte isbreakable; PADDING (1); }", "ref_name": "bl_0", "ref_type": "struct BlockCnt_0 { BlockCnt * previous; int breaklist; lu_byte nactvar; lu_byte upval; lu_byte isbreakable; PADDING (1); }"}], "body_in_train": true}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/eddf4c128d81974d0a44cef786539de6088e3397414c265ffb89dc1463abb496", "path_in_repo": "ftnapps/pkg-sbbs/src/sbbs3/syncview/gcc.linux.exe.debug/syncview", "objdump": "0000000000409528 <ciomouse_gotevent>:\n  409528:\t55                   \tpush   %rbp\n  409529:\t48 89 e5             \tmov    %rsp,%rbp\n  40952c:\t48 83 ec 30          \tsub    $0x30,%rsp\n  409530:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n  409533:\t89 75 d8             \tmov    %esi,-0x28(%rbp)\n  409536:\t89 55 d4             \tmov    %edx,-0x2c(%rbp)\n  409539:\teb 79                \tjmp    4095b4 <ciomouse_gotevent+0x8c>\n  40953b:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n  409542:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  409545:\t48 63 d0             \tmovslq %eax,%rdx\n  409548:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  40954f:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  409553:\tc1 fa 06             \tsar    $0x6,%edx\n  409556:\tc1 f8 1f             \tsar    $0x1f,%eax\n  409559:\t29 c2                \tsub    %eax,%edx\n  40955b:\t89 d0                \tmov    %edx,%eax\n  40955d:\t48 98                \tcltq   \n  40955f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  409563:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  409566:\t48 63 d0             \tmovslq %eax,%rdx\n  409569:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  409570:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  409574:\t89 d1                \tmov    %edx,%ecx\n  409576:\tc1 f9 06             \tsar    $0x6,%ecx\n  409579:\t99                   \tcltd   \n  40957a:\t29 d1                \tsub    %edx,%ecx\n  40957c:\t89 ca                \tmov    %ecx,%edx\n  40957e:\t69 d2 e8 03 00 00    \timul   $0x3e8,%edx,%edx\n  409584:\t29 d0                \tsub    %edx,%eax\n  409586:\t89 c2                \tmov    %eax,%edx\n  409588:\t69 c2 e8 03 00 00    \timul   $0x3e8,%edx,%eax\n  40958e:\t48 98                \tcltq   \n  409590:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  409594:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  409598:\t49 89 c0             \tmov    %rax,%r8\n  40959b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  4095a0:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4095a5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4095aa:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4095af:\te8 7c 9b ff ff       \tcallq  403130 <select@plt>\n  4095b4:\t8b 05 ea 4d 05 00    \tmov    0x54dea(%rip),%eax        # 45e3a4 <ciolib_mouse_initialized>\n  4095ba:\t85 c0                \ttest   %eax,%eax\n  4095bc:\t0f 84 79 ff ff ff    \tje     40953b <ciomouse_gotevent+0x13>\n  4095c2:\tbf 20 00 00 00       \tmov    $0x20,%edi\n  4095c7:\te8 d4 9b ff ff       \tcallq  4031a0 <malloc@plt>\n  4095cc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4095d0:\te8 cd ac 00 00       \tcallq  4142a2 <msclock>\n  4095d5:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  4095d9:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n  4095dd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4095e1:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  4095e4:\t89 10                \tmov    %edx,(%rax)\n  4095e6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4095ea:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n  4095ed:\t89 50 04             \tmov    %edx,0x4(%rax)\n  4095f0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4095f4:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  4095f7:\t89 50 08             \tmov    %edx,0x8(%rax)\n  4095fa:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4095fe:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n  409605:\t00 \n  409606:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40960a:\t48 c7 c2 ff ff ff ff \tmov    $0xffffffffffffffff,%rdx\n  409611:\t48 89 c6             \tmov    %rax,%rsi\n  409614:\tbf c0 15 46 00       \tmov    $0x4615c0,%edi\n  409619:\te8 e4 bd 00 00       \tcallq  415402 <listAddNode>\n  40961e:\t90                   \tnop\n  40961f:\tc9                   \tleaveq \n  409620:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ciomouse_gotevent(int a1, int a2, int a3) {\n  struct timeval <span class=\"supfact\">timeout</span>;\n  int <span class=\"supfact\">v6</span>;\n  _QWORD *<span class=\"supfact\">v7</span>;\n  while (!ciolib_mouse_initialized) {\n    <span class=\"supfact\">v6</span> = Number;\n    <span class=\"supfact\">timeout</span>.tv_sec = Number L;\n    <span class=\"supfact\">timeout</span>.tv_usec = Number L;\n    select(Number, Number L, Number L, Number L, &<span class=\"supfact\">timeout</span>);\n  }\n  <span class=\"supfact\">v7</span> = malloc(Number);\n  <span class=\"supfact\">v7</span>[Number] = msclock();\n  *(_DWORD *)<span class=\"supfact\">v7</span> = a1;\n  *((_DWORD *)<span class=\"supfact\">v7</span> + Number) = a2;\n  *((_DWORD *)<span class=\"supfact\">v7</span> + Number) = a3;\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  return listAddNode(&unk_4615C0, <span class=\"supfact\">v7</span>, Number);\n}", "code_t": "void __cdecl ciomouse_gotevent(int event, int x, int y) {\n  timeval <span class=\"supfact\">tv</span>;\n  int <span class=\"supfact\">sleep_msecs</span>;\n  in_mouse_event *<span class=\"supfact\">ime</span>;\n  while (!ciolib_mouse_initialized) {\n    <span class=\"supfact\">sleep_msecs</span> = Number;\n    <span class=\"supfact\">tv</span>.tv_sec = Number L;\n    <span class=\"supfact\">tv</span>.tv_usec = Number L;\n    select(Number, Number L, Number L, Number L, &<span class=\"supfact\">tv</span>);\n  }\n  <span class=\"supfact\">ime</span> = (in_mouse_event *)malloc(Number);\n  <span class=\"supfact\">ime</span>->ts = msclock();\n  <span class=\"supfact\">ime</span>->event = event;\n  <span class=\"supfact\">ime</span>->x = x;\n  <span class=\"supfact\">ime</span>->y = y;\n  <span class=\"supfact\">ime</span>->nextevent = Number L;\n  listAddNode(&state.input, <span class=\"supfact\">ime</span>, (list_node_t *)Number);\n}", "var": [{"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "andrey-utkin", "repo_name": "ffmpeg", "path": "andrey-utkin/ffmpeg/76f099dabe120b2af320e298afeed9df357ba19000a94363638ed44843632bce", "path_in_repo": "andrey-utkin/ffmpeg//libavformat/samidec.o", "objdump": "0000000000000000 <sami_probe>:\n   0:\t48 81 ec 08 01 00 00 \tsub    $0x108,%rsp\n   7:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n   c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  11:\t8b 40 10             \tmov    0x10(%rax),%eax\n  14:\t48 63 d0             \tmovslq %eax,%rdx\n  17:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  1c:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  20:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  25:\t48 89 ce             \tmov    %rcx,%rsi\n  28:\t48 89 c7             \tmov    %rax,%rdi\n  2b:\te8 00 00 00 00       \tcallq  30 <sami_probe+0x30>\n  30:\t48 8d 8c 24 fa 00 00 \tlea    0xfa(%rsp),%rcx\n  37:\t00 \n  38:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  3d:\tba 06 00 00 00       \tmov    $0x6,%edx\n  42:\t48 89 ce             \tmov    %rcx,%rsi\n  45:\t48 89 c7             \tmov    %rax,%rdi\n  48:\te8 00 00 00 00       \tcallq  4d <sami_probe+0x4d>\n  4d:\t48 8d 84 24 fa 00 00 \tlea    0xfa(%rsp),%rax\n  54:\t00 \n  55:\tba 06 00 00 00       \tmov    $0x6,%edx\n  5a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  5f:\t48 89 c7             \tmov    %rax,%rdi\n  62:\te8 00 00 00 00       \tcallq  67 <sami_probe+0x67>\n  67:\t85 c0                \ttest   %eax,%eax\n  69:\t75 07                \tjne    72 <sami_probe+0x72>\n  6b:\tb8 64 00 00 00       \tmov    $0x64,%eax\n  70:\teb 05                \tjmp    77 <sami_probe+0x77>\n  72:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  77:\t48 81 c4 08 01 00 00 \tadd    $0x108,%rsp\n  7e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sami_probe(__int64 a1) {\n  __int64 result;\n  char <span class=\"supfact\">v2</span>[Number];\n  char <span class=\"supfact\">s1</span>[Number];\n  ff_text_init_buf(<span class=\"supfact\">v2</span>, *(_QWORD *)(a1 + Number),\n                   *(int *)(a1 + Number));\n  ff_text_read(<span class=\"supfact\">v2</span>, <span class=\"supfact\">s1</span>, Number L);\n  if (!strncmp(<span class=\"supfact\">s1</span>, String, Number))\n    result = Number L;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl sami_probe(AVProbeData_0 *p) {\n  int result;\n  FFTextReader <span class=\"supfact\">tr</span>;\n  char <span class=\"supfact\">buf</span>[Number];\n  ff_text_init_buf(&<span class=\"supfact\">tr</span>, p-><span class=\"supfact\">buf</span>, p->buf_size);\n  ff_text_read(&<span class=\"supfact\">tr</span>, <span class=\"supfact\">buf</span>, Number L);\n  if (!strncmp(<span class=\"supfact\">buf</span>, String, Number))\n    result = Number;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v2", "type": "struct FFTextReader { int type; PADDING (4); AVIOContext_0 * pb; unsigned __int8[8] buf; int buf_pos; int buf_len; AVIOContext_0 buf_pb; }", "ref_name": "tr", "ref_type": "struct FFTextReader { int type; PADDING (4); AVIOContext_0 * pb; unsigned __int8[8] buf; int buf_pos; int buf_len; AVIOContext_0 buf_pb; }"}], "body_in_train": true}, {"repo_owner": "CPFL", "repo_name": "xen", "path": "CPFL/xen/bf7ded588946945d1153eacf57c6228d878082f2fae1060e1c2e695ce80936ea", "path_in_repo": "CPFL/xen/xen/arch/x86/mm/built_in.o", "objdump": "00000000000068a5 <p2m_mem_paging_nominate>:\n    68a5:\t55                   \tpush   %rbp\n    68a6:\t48 89 e5             \tmov    %rsp,%rbp\n    68a9:\t48 83 ec 40          \tsub    $0x40,%rsp\n    68ad:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    68b1:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    68b5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    68b9:\t48 8b 80 f0 0a 00 00 \tmov    0xaf0(%rax),%rax\n    68c0:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    68c4:\tc7 45 fc f0 ff ff ff \tmovl   $0xfffffff0,-0x4(%rbp)\n    68cb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    68cf:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 68d6 <p2m_mem_paging_nominate+0x31>\n    68d6:\t48 89 c7             \tmov    %rax,%rdi\n    68d9:\te8 cf d3 ff ff       \tcallq  3cad <mm_write_lock_p2m>\n    68de:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    68e2:\t4c 8b 90 80 00 00 00 \tmov    0x80(%rax),%r10\n    68e9:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n    68ed:\t48 8d 55 e4          \tlea    -0x1c(%rbp),%rdx\n    68f1:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n    68f5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    68f9:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    68ff:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    6905:\t48 89 c7             \tmov    %rax,%rdi\n    6908:\t41 ff d2             \tcallq  *%r10\n    690b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    690f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    6913:\t48 89 c7             \tmov    %rax,%rdi\n    6916:\te8 cd c7 ff ff       \tcallq  30e8 <mfn_x>\n    691b:\t48 89 c7             \tmov    %rax,%rdi\n    691e:\te8 00 00 00 00       \tcallq  6923 <p2m_mem_paging_nominate+0x7e>\n    6923:\t85 c0                \ttest   %eax,%eax\n    6925:\t0f 84 cc 00 00 00    \tje     69f7 <p2m_mem_paging_nominate+0x152>\n    692b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    692e:\tba 05 00 00 00       \tmov    $0x5,%edx\n    6933:\t89 c1                \tmov    %eax,%ecx\n    6935:\t48 d3 ea             \tshr    %cl,%rdx\n    6938:\t48 89 d0             \tmov    %rdx,%rax\n    693b:\t83 e0 01             \tand    $0x1,%eax\n    693e:\t48 85 c0             \ttest   %rax,%rax\n    6941:\t0f 84 b3 00 00 00    \tje     69fa <p2m_mem_paging_nominate+0x155>\n    6947:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    694b:\t48 89 c7             \tmov    %rax,%rdi\n    694e:\te8 95 c7 ff ff       \tcallq  30e8 <mfn_x>\n    6953:\t48 89 c7             \tmov    %rax,%rdi\n    6956:\te8 00 00 00 00       \tcallq  695b <p2m_mem_paging_nominate+0xb6>\n    695b:\t85 c0                \ttest   %eax,%eax\n    695d:\t0f 85 9a 00 00 00    \tjne    69fd <p2m_mem_paging_nominate+0x158>\n    6963:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    6967:\t48 89 c7             \tmov    %rax,%rdi\n    696a:\te8 79 c7 ff ff       \tcallq  30e8 <mfn_x>\n    696f:\t48 89 c7             \tmov    %rax,%rdi\n    6972:\te8 8d c4 ff ff       \tcallq  2e04 <pfn_to_pdx>\n    6977:\t48 c1 e0 05          \tshl    $0x5,%rax\n    697b:\t48 89 c2             \tmov    %rax,%rdx\n    697e:\t48 b8 00 00 00 00 e0 \tmovabs $0xffff82e000000000,%rax\n    6985:\t82 ff ff \n    6988:\t48 01 d0             \tadd    %rdx,%rax\n    698b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    698f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6993:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    6997:\t48 ba ff ff ff ff ff \tmovabs $0x807fffffffffffff,%rdx\n    699e:\tff 7f 80 \n    69a1:\t48 21 c2             \tand    %rax,%rdx\n    69a4:\t48 b8 01 00 00 00 00 \tmovabs $0x8000000000000001,%rax\n    69ab:\t00 00 80 \n    69ae:\t48 39 c2             \tcmp    %rax,%rdx\n    69b1:\t75 4d                \tjne    6a00 <p2m_mem_paging_nominate+0x15b>\n    69b3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    69b7:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    69bb:\t48 ba ff ff ff ff ff \tmovabs $0x7fffffffffffff,%rdx\n    69c2:\tff 7f 00 \n    69c5:\t48 21 d0             \tand    %rdx,%rax\n    69c8:\t48 85 c0             \ttest   %rax,%rax\n    69cb:\t75 36                \tjne    6a03 <p2m_mem_paging_nominate+0x15e>\n    69cd:\t8b 4d e0             \tmov    -0x20(%rbp),%ecx\n    69d0:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    69d4:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n    69d8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    69dc:\t41 89 c9             \tmov    %ecx,%r9d\n    69df:\t41 b8 09 00 00 00    \tmov    $0x9,%r8d\n    69e5:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    69ea:\t48 89 c7             \tmov    %rax,%rdi\n    69ed:\te8 00 00 00 00       \tcallq  69f2 <p2m_mem_paging_nominate+0x14d>\n    69f2:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    69f5:\teb 0d                \tjmp    6a04 <p2m_mem_paging_nominate+0x15f>\n    69f7:\t90                   \tnop\n    69f8:\teb 0a                \tjmp    6a04 <p2m_mem_paging_nominate+0x15f>\n    69fa:\t90                   \tnop\n    69fb:\teb 07                \tjmp    6a04 <p2m_mem_paging_nominate+0x15f>\n    69fd:\t90                   \tnop\n    69fe:\teb 04                \tjmp    6a04 <p2m_mem_paging_nominate+0x15f>\n    6a00:\t90                   \tnop\n    6a01:\teb 01                \tjmp    6a04 <p2m_mem_paging_nominate+0x15f>\n    6a03:\t90                   \tnop\n    6a04:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    6a08:\t48 89 c7             \tmov    %rax,%rdi\n    6a0b:\te8 ee d0 ff ff       \tcallq  3afe <mm_write_unlock>\n    6a10:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    6a13:\tc9                   \tleaveq \n    6a14:\tc3                   \tretq   ", "code_s": "__int64 __fastcall p2m_mem_paging_nominate(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v10</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v11</span> = Number;\n  mm_write_lock_p2m_0(<span class=\"supfact\">v10</span>, (__int64)String);\n  <span class=\"supfact\">v6</span> =\n      (*(__int64(__fastcall **)(__int64, __int64, int *, unsigned int *, _QWORD,\n                                _QWORD))(<span class=\"supfact\">v10</span> + Number))(\n          <span class=\"supfact\">v10</span>, a2, &<span class=\"supfact\">v8</span>, &<span class=\"supfact\">v7</span>,\n          Number L, Number L);\n  v2 = mfn_x_0(<span class=\"supfact\">v6</span>);\n  if ((unsigned int)_mfn_valid(v2)) {\n    if (((Number >> <span class=\"supfact\">v8</span>) & Number) != Number) {\n      v3 = mfn_x_0(<span class=\"supfact\">v6</span>);\n      if (!(unsigned int)is_iomem_page(v3)) {\n        v4 = mfn_x_0(<span class=\"supfact\">v6</span>);\n        <span class=\"supfact\">v9</span> = Number * pfn_to_pdx_0(v4) - Number;\n        if ((*(_QWORD *)(<span class=\"supfact\">v9</span> + Number) & Number) == Number &&\n            (*(_QWORD *)(<span class=\"supfact\">v9</span> + Number) & Number) == Number) {\n          <span class=\"supfact\">v11</span> =\n              p2m_set_entry(<span class=\"supfact\">v10</span>, a2, <span class=\"supfact\">v6</span>, Number,\n                            Number, <span class=\"supfact\">v7</span>);\n        }\n      }\n    }\n  }\n  mm_write_unlock_0(<span class=\"supfact\">v10</span>);\n  return <span class=\"supfact\">v11</span>;\n}", "code_t": "int __cdecl p2m_mem_paging_nominate(domain *d, unsigned __int64 gfn) {\n  unsigned __int64 v2;\n  unsigned __int64 v3;\n  unsigned __int64 v4;\n  mfn_t <span class=\"supfact\">mfn</span>;\n  p2m_access_t <span class=\"supfact\">a</span>;\n  p2m_type_t <span class=\"supfact\">p2mt</span>;\n  page_info *<span class=\"supfact\">page</span>;\n  p2m_domain *<span class=\"supfact\">p2m</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">p2m</span> = d->arch.<span class=\"supfact\">p2m</span>;\n  <span class=\"supfact\">ret</span> = Number;\n  mm_write_lock_p2m_0(&<span class=\"supfact\">p2m</span>->lock, String);\n  <span class=\"supfact\">mfn</span>.<span class=\"supfact\">mfn</span> = ((__int64(__fastcall *)(\n      p2m_domain *, unsigned __int64, p2m_type_t *, p2m_access_t *, _QWORD,\n      _QWORD))<span class=\"supfact\">p2m</span>->get_entry)(\n      <span class=\"supfact\">p2m</span>, gfn, &<span class=\"supfact\">p2mt</span>, &<span class=\"supfact\">a</span>,\n      Number L, Number L);\n  v2 = mfn_x_0(<span class=\"supfact\">mfn</span>);\n  if ((unsigned int)_mfn_valid(v2)) {\n    if (((Number >> <span class=\"supfact\">p2mt</span>) & Number) != Number) {\n      v3 = mfn_x_0(<span class=\"supfact\">mfn</span>);\n      if (!(unsigned int)is_iomem_page(v3)) {\n        v4 = mfn_x_0(<span class=\"supfact\">mfn</span>);\n        <span class=\"supfact\">page</span> =\n            (page_info *)(Number * pfn_to_pdx_0(v4) - Number);\n        if ((<span class=\"supfact\">page</span>->count_info & Number) == Number &&\n            (<span class=\"supfact\">page</span>->u.inuse.type_info & Number) == Number) {\n          <span class=\"supfact\">ret</span> =\n              p2m_set_entry(<span class=\"supfact\">p2m</span>, gfn, <span class=\"supfact\">mfn</span>,\n                            Number, p2m_ram_paging_out, <span class=\"supfact\">a</span>);\n        }\n      }\n    }\n  }\n  mm_write_unlock_0(&<span class=\"supfact\">p2m</span>->lock);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v6", "type": "struct mfn_t { unsigned __int64 mfn; }", "ref_name": "mfn", "ref_type": "struct mfn_t { unsigned __int64 mfn; }"}], "body_in_train": false}, {"repo_owner": "mend0za", "repo_name": "QEMU-dt-config", "path": "mend0za/QEMU-dt-config/a8b0bd9f99393ab6adafcd4e555a4d06b7e13b0434dc2ed484a0bbda1f14553c", "path_in_repo": "mend0za/QEMU-dt-config//hw/net/e1000e_core.o", "objdump": "00000000000021d3 <trace_e1000e_rx_desc_buff_sizes>:\n    21d3:\t55                   \tpush   %rbp\n    21d4:\t48 89 e5             \tmov    %rsp,%rbp\n    21d7:\t41 54                \tpush   %r12\n    21d9:\t53                   \tpush   %rbx\n    21da:\t48 83 ec 30          \tsub    $0x30,%rsp\n    21de:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    21e1:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    21e4:\t89 55 c4             \tmov    %edx,-0x3c(%rbp)\n    21e7:\t89 4d c0             \tmov    %ecx,-0x40(%rbp)\n    21ea:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    21f1:\t00 00 \n    21f3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    21f7:\t31 c0                \txor    %eax,%eax\n    21f9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 21ff <trace_e1000e_rx_desc_buff_sizes+0x2c>\n    21ff:\t85 c0                \ttest   %eax,%eax\n    2201:\t0f 95 c0             \tsetne  %al\n    2204:\t0f b6 c0             \tmovzbl %al,%eax\n    2207:\t48 85 c0             \ttest   %rax,%rax\n    220a:\t74 73                \tje     227f <trace_e1000e_rx_desc_buff_sizes+0xac>\n    220c:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 2213 <trace_e1000e_rx_desc_buff_sizes+0x40>\n    2213:\t66 85 c0             \ttest   %ax,%ax\n    2216:\t74 67                \tje     227f <trace_e1000e_rx_desc_buff_sizes+0xac>\n    2218:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    221c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2221:\t48 89 c7             \tmov    %rax,%rdi\n    2224:\te8 00 00 00 00       \tcallq  2229 <trace_e1000e_rx_desc_buff_sizes+0x56>\n    2229:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    222e:\te8 c0 e4 ff ff       \tcallq  6f3 <qemu_loglevel_mask>\n    2233:\t0f b6 c0             \tmovzbl %al,%eax\n    2236:\t48 85 c0             \ttest   %rax,%rax\n    2239:\t74 44                \tje     227f <trace_e1000e_rx_desc_buff_sizes+0xac>\n    223b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    223f:\t49 89 c4             \tmov    %rax,%r12\n    2242:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2246:\t48 89 c3             \tmov    %rax,%rbx\n    2249:\te8 00 00 00 00       \tcallq  224e <trace_e1000e_rx_desc_buff_sizes+0x7b>\n    224e:\t89 c6                \tmov    %eax,%esi\n    2250:\t8b 4d c8             \tmov    -0x38(%rbp),%ecx\n    2253:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    2256:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    2259:\t50                   \tpush   %rax\n    225a:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    225d:\t50                   \tpush   %rax\n    225e:\t41 89 c9             \tmov    %ecx,%r9d\n    2261:\t41 89 d0             \tmov    %edx,%r8d\n    2264:\t4c 89 e1             \tmov    %r12,%rcx\n    2267:\t48 89 da             \tmov    %rbx,%rdx\n    226a:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2271 <trace_e1000e_rx_desc_buff_sizes+0x9e>\n    2271:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2276:\te8 00 00 00 00       \tcallq  227b <trace_e1000e_rx_desc_buff_sizes+0xa8>\n    227b:\t48 83 c4 10          \tadd    $0x10,%rsp\n    227f:\t90                   \tnop\n    2280:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2284:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    228b:\t00 00 \n    228d:\t74 05                \tje     2294 <trace_e1000e_rx_desc_buff_sizes+0xc1>\n    228f:\te8 00 00 00 00       \tcallq  2294 <trace_e1000e_rx_desc_buff_sizes+0xc1>\n    2294:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n    2298:\t5b                   \tpop    %rbx\n    2299:\t41 5c                \tpop    %r12\n    229b:\t5d                   \tpop    %rbp\n    229c:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_e1000e_rx_desc_buff_sizes(unsigned int a1,\n                                                            unsigned int a2,\n                                                            unsigned int a3,\n                                                            unsigned int a4) {\n  __suseconds_t v4;\n  __time_t v5;\n  unsigned int v6;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_E1000E_RX_DESC_BUFF_SIZES_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v4 = <span class=\"supfact\">tv</span>.tv_usec;\n        v5 = <span class=\"supfact\">tv</span>.tv_sec;\n        v6 = getpid();\n        qemu_log(String, v6, v5, v4, a1, a2, a3, a4);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v11</span>;\n}", "code_t": "void __cdecl trace_e1000e_rx_desc_buff_sizes(uint32_t b0, uint32_t b1,\n                                             uint32_t b2, uint32_t b3) {\n  __suseconds_t v4;\n  __time_t v5;\n  unsigned int v6;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_E1000E_RX_DESC_BUFF_SIZES_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v4 = <span class=\"supfact\">_now</span>.tv_usec;\n      v5 = <span class=\"supfact\">_now</span>.tv_sec;\n      v6 = getpid();\n      qemu_log(String, v6, v5, v4, b0, b1, b2, b3);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/1e1e7cb97ebb80eac8dbb33680b64d176ff61b4eaa68df0fca22659194da5490", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/stateful_proxy", "objdump": "000000000040526e <worker_thread>:\n  40526e:\t55                   \tpush   %rbp\n  40526f:\t48 89 e5             \tmov    %rsp,%rbp\n  405272:\t48 83 ec 20          \tsub    $0x20,%rsp\n  405276:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40527a:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  405281:\t00 \n  405282:\t48 c7 45 f8 0a 00 00 \tmovq   $0xa,-0x8(%rbp)\n  405289:\t00 \n  40528a:\teb 16                \tjmp    4052a2 <worker_thread+0x34>\n  40528c:\t48 8b 05 f5 56 08 00 \tmov    0x856f5(%rip),%rax        # 48a988 <global+0x388>\n  405293:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  405297:\t48 89 d6             \tmov    %rdx,%rsi\n  40529a:\t48 89 c7             \tmov    %rax,%rdi\n  40529d:\te8 55 db 00 00       \tcallq  412df7 <pjsip_endpt_handle_events>\n  4052a2:\t8b 05 00 57 08 00    \tmov    0x85700(%rip),%eax        # 48a9a8 <global+0x3a8>\n  4052a8:\t85 c0                \ttest   %eax,%eax\n  4052aa:\t74 e0                \tje     40528c <worker_thread+0x1e>\n  4052ac:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4052b1:\tc9                   \tleaveq \n  4052b2:\tc3                   \tretq   ", "code_s": "__int64 worker_thread() {\n  __int64 <span class=\"supfact\">v1</span>[Number];\n  <span class=\"supfact\">v1</span>[Number] = Number L;\n  <span class=\"supfact\">v1</span>[Number] = Number L;\n  while (!dword_48A9A8)\n    pjsip_endpt_handle_events(qword_48A988, <span class=\"supfact\">v1</span>);\n  return Number L;\n}", "code_t": "int __cdecl worker_thread(void *p) {\n  pj_time_val_0 <span class=\"supfact\">delay</span>;\n  <span class=\"supfact\">delay</span>.sec = Number L;\n  <span class=\"supfact\">delay</span>.msec = Number L;\n  while (!global.quit_flag)\n    pjsip_endpt_handle_events(global.endpt, &<span class=\"supfact\">delay</span>);\n  return Number;\n}", "var": [{"name": "v1", "type": "struct pj_time_val_0 { __int64 sec; __int64 msec; }", "ref_name": "delay", "ref_type": "struct pj_time_val_0 { __int64 sec; __int64 msec; }"}], "body_in_train": false}, {"repo_owner": "poftwaresatent", "repo_name": "da4002", "path": "poftwaresatent/da4002/360f0e8c9aa17748d25b82099fe2725cddf8211394250dc11b4df232d0c5355c", "path_in_repo": "poftwaresatent/da4002/2012-ht/pr1/main-merge-sort", "objdump": "0000000000401f41 <clockms>:\n  401f41:\t55                   \tpush   %rbp\n  401f42:\t48 89 e5             \tmov    %rsp,%rbp\n  401f45:\t48 83 ec 10          \tsub    $0x10,%rsp\n  401f49:\t48 8b 05 50 31 00 00 \tmov    0x3150(%rip),%rax        # 4050a0 <t0.2727>\n  401f50:\t48 85 c0             \ttest   %rax,%rax\n  401f53:\t75 2c                \tjne    401f81 <clockms+0x40>\n  401f55:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401f5a:\tbf a0 50 40 00       \tmov    $0x4050a0,%edi\n  401f5f:\te8 0c f1 ff ff       \tcallq  401070 <gettimeofday@plt>\n  401f64:\t85 c0                \ttest   %eax,%eax\n  401f66:\t74 19                \tje     401f81 <clockms+0x40>\n  401f68:\tba 58 32 40 00       \tmov    $0x403258,%edx\n  401f6d:\tbe 28 32 40 00       \tmov    $0x403228,%esi\n  401f72:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401f77:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401f7c:\te8 1f f1 ff ff       \tcallq  4010a0 <err@plt>\n  401f81:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  401f85:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401f8a:\t48 89 c7             \tmov    %rax,%rdi\n  401f8d:\te8 de f0 ff ff       \tcallq  401070 <gettimeofday@plt>\n  401f92:\t85 c0                \ttest   %eax,%eax\n  401f94:\t74 19                \tje     401faf <clockms+0x6e>\n  401f96:\tba 58 32 40 00       \tmov    $0x403258,%edx\n  401f9b:\tbe 28 32 40 00       \tmov    $0x403228,%esi\n  401fa0:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401fa5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401faa:\te8 f1 f0 ff ff       \tcallq  4010a0 <err@plt>\n  401faf:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  401fb3:\t48 8b 05 e6 30 00 00 \tmov    0x30e6(%rip),%rax        # 4050a0 <t0.2727>\n  401fba:\t48 29 c2             \tsub    %rax,%rdx\n  401fbd:\t48 89 d0             \tmov    %rdx,%rax\n  401fc0:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n  401fc5:\tf2 0f 10 05 a3 12 00 \tmovsd  0x12a3(%rip),%xmm0        # 403270 <__func__.2735+0x10>\n  401fcc:\t00 \n  401fcd:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n  401fd1:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  401fd5:\t48 8b 05 cc 30 00 00 \tmov    0x30cc(%rip),%rax        # 4050a8 <t0.2727+0x8>\n  401fdc:\t48 29 c2             \tsub    %rax,%rdx\n  401fdf:\t48 89 d0             \tmov    %rdx,%rax\n  401fe2:\tf2 48 0f 2a d0       \tcvtsi2sd %rax,%xmm2\n  401fe7:\tf2 0f 10 05 89 12 00 \tmovsd  0x1289(%rip),%xmm0        # 403278 <__func__.2735+0x18>\n  401fee:\t00 \n  401fef:\tf2 0f 59 c2          \tmulsd  %xmm2,%xmm0\n  401ff3:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n  401ff7:\tc9                   \tleaveq \n  401ff8:\tc3                   \tretq   ", "code_s": "double clockms() {\n  struct timeval <span class=\"supfact\">tv</span>;\n  if (!t0_2727.tv_sec && gettimeofday(&t0_2727, Number L))\n    err(Number, String, String);\n  if (gettimeofday(&<span class=\"supfact\">tv</span>, Number L))\n    err(Number, String, String);\n  return Number * (double)(LODWORD(<span class=\"supfact\">tv</span>.tv_usec) -\n                           LODWORD(t0_2727.tv_usec)) +\n         (double)(LODWORD(<span class=\"supfact\">tv</span>.tv_sec) -\n                  LODWORD(t0_2727.tv_sec)) *\n             Number;\n}", "code_t": "double __cdecl clockms() {\n  timeval <span class=\"supfact\">t1</span>;\n  if (!t0_2727.tv_sec && gettimeofday(&t0_2727, Number L))\n    err(Number, String, String);\n  if (gettimeofday(&<span class=\"supfact\">t1</span>, Number L))\n    err(Number, String, String);\n  return Number * (double)(LODWORD(<span class=\"supfact\">t1</span>.tv_usec) -\n                           LODWORD(t0_2727.tv_usec)) +\n         (double)(LODWORD(<span class=\"supfact\">t1</span>.tv_sec) -\n                  LODWORD(t0_2727.tv_sec)) *\n             Number;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "t1", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "vaibhavpandeyvpz", "repo_name": "kernel-a7xelte", "path": "vaibhavpandeyvpz/kernel-a7xelte/d5c1468201d984510066e5c51b6a42936a661dd86fd5ce44bd803082a8d414d2", "path_in_repo": "vaibhavpandeyvpz/kernel-a7xelte/tools/perf/builtin-top.o", "objdump": "0000000000001beb <display_thread>:\n    1beb:\t55                   \tpush   %rbp\n    1bec:\t48 89 e5             \tmov    %rsp,%rbp\n    1bef:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    1bf6:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n    1bfd:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1c04:\t00 00 \n    1c06:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1c0a:\t31 c0                \txor    %eax,%eax\n    1c0c:\t48 c7 85 68 ff ff ff \tmovq   $0x0,-0x98(%rbp)\n    1c13:\t00 00 00 00 \n    1c17:\t66 c7 85 6c ff ff ff \tmovw   $0x1,-0x94(%rbp)\n    1c1e:\t01 00 \n    1c20:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1c27:\t48 89 85 60 ff ff ff \tmov    %rax,-0xa0(%rbp)\n    1c2e:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    1c32:\t48 89 c6             \tmov    %rax,%rsi\n    1c35:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1c3a:\te8 00 00 00 00       \tcallq  1c3f <display_thread+0x54>\n    1c3f:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1c43:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    1c47:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n    1c4e:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    1c55:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1c59:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    1c5d:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n    1c61:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n    1c65:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1c69:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1c6d:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n    1c71:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n    1c75:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c79:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n    1c7d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    1c80:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n    1c83:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n    1c89:\t83 e0 f5             \tand    $0xfffffff5,%eax\n    1c8c:\t89 85 7c ff ff ff    \tmov    %eax,-0x84(%rbp)\n    1c92:\tc6 45 87 00          \tmovb   $0x0,-0x79(%rbp)\n    1c96:\tc6 45 86 00          \tmovb   $0x0,-0x7a(%rbp)\n    1c9a:\te8 00 00 00 00       \tcallq  1c9f <display_thread+0xb4>\n    1c9f:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    1ca6:\t8b 80 20 01 00 00    \tmov    0x120(%rax),%eax\n    1cac:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n    1cb2:\t89 85 58 ff ff ff    \tmov    %eax,-0xa8(%rbp)\n    1cb8:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    1cbf:\t48 89 c2             \tmov    %rax,%rdx\n    1cc2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1cc7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1ccc:\te8 00 00 00 00       \tcallq  1cd1 <display_thread+0xe6>\n    1cd1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1cd8 <display_thread+0xed>\n    1cd8:\t48 89 c7             \tmov    %rax,%rdi\n    1cdb:\te8 00 00 00 00       \tcallq  1ce0 <display_thread+0xf5>\n    1ce0:\te9 97 00 00 00       \tjmpq   1d7c <display_thread+0x191>\n    1ce5:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    1cec:\t48 89 c7             \tmov    %rax,%rdi\n    1cef:\te8 de ed ff ff       \tcallq  ad2 <perf_top__print_sym_table>\n    1cf4:\t8b 95 58 ff ff ff    \tmov    -0xa8(%rbp),%edx\n    1cfa:\t48 8d 85 68 ff ff ff \tlea    -0x98(%rbp),%rax\n    1d01:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1d06:\t48 89 c7             \tmov    %rax,%rdi\n    1d09:\te8 00 00 00 00       \tcallq  1d0e <display_thread+0x123>\n    1d0e:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    1d11:\t74 06                \tje     1d19 <display_thread+0x12e>\n    1d13:\t85 c0                \ttest   %eax,%eax\n    1d15:\t75 10                \tjne    1d27 <display_thread+0x13c>\n    1d17:\teb 63                \tjmp    1d7c <display_thread+0x191>\n    1d19:\te8 00 00 00 00       \tcallq  1d1e <display_thread+0x133>\n    1d1e:\t8b 00                \tmov    (%rax),%eax\n    1d20:\t83 f8 04             \tcmp    $0x4,%eax\n    1d23:\t75 02                \tjne    1d27 <display_thread+0x13c>\n    1d25:\teb 55                \tjmp    1d7c <display_thread+0x191>\n    1d27:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d2e <display_thread+0x143>\n    1d2e:\t48 89 c7             \tmov    %rax,%rdi\n    1d31:\te8 00 00 00 00       \tcallq  1d36 <display_thread+0x14b>\n    1d36:\t89 85 5c ff ff ff    \tmov    %eax,-0xa4(%rbp)\n    1d3c:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    1d40:\t48 89 c2             \tmov    %rax,%rdx\n    1d43:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    1d48:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1d4d:\te8 00 00 00 00       \tcallq  1d52 <display_thread+0x167>\n    1d52:\t8b 95 5c ff ff ff    \tmov    -0xa4(%rbp),%edx\n    1d58:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    1d5f:\t89 d6                \tmov    %edx,%esi\n    1d61:\t48 89 c7             \tmov    %rax,%rdi\n    1d64:\te8 e9 f5 ff ff       \tcallq  1352 <perf_top__handle_keypress>\n    1d69:\t84 c0                \ttest   %al,%al\n    1d6b:\t74 05                \tje     1d72 <display_thread+0x187>\n    1d6d:\te9 2d ff ff ff       \tjmpq   1c9f <display_thread+0xb4>\n    1d72:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 1d7c <display_thread+0x191>\n    1d79:\t00 00 00 \n    1d7c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1d82 <display_thread+0x197>\n    1d82:\t85 c0                \ttest   %eax,%eax\n    1d84:\t0f 84 5b ff ff ff    \tje     1ce5 <display_thread+0xfa>\n    1d8a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d8f:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1d93:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    1d9a:\t00 00 \n    1d9c:\t74 05                \tje     1da3 <display_thread+0x1b8>\n    1d9e:\te8 00 00 00 00       \tcallq  1da3 <display_thread+0x1b8>\n    1da3:\tc9                   \tleaveq \n    1da4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall display_thread(__int64 a1) {\n  int v1;\n  int <span class=\"supfact\">timeout</span>;\n  int <span class=\"supfact\">v4</span>;\n  struct pollfd <span class=\"supfact\">fds</span>;\n  struct termios <span class=\"supfact\">v6</span>;\n  struct termios <span class=\"supfact\">termios_p</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  <span class=\"supfact\">fds</span> = (struct pollfd)Number;\n  tcgetattr(Number, &<span class=\"supfact\">termios_p</span>);\n  *(_QWORD *)&<span class=\"supfact\">v6</span>.c_iflag =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_iflag;\n  <span class=\"supfact\">v6</span>.c_cflag = <span class=\"supfact\">termios_p</span>.c_cflag;\n  *(_QWORD *)&<span class=\"supfact\">v6</span>.c_line =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_line;\n  *(_QWORD *)&<span class=\"supfact\">v6</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">v6</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">v6</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">v6</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">termios_p</span>.c_cc[Number];\n  <span class=\"supfact\">v6</span>.c_ospeed = <span class=\"supfact\">termios_p</span>.c_ospeed;\n  <span class=\"supfact\">v6</span>.c_lflag = <span class=\"supfact\">termios_p</span>.c_lflag & Number;\n  <span class=\"supfact\">v6</span>.c_cc[Number] = Number;\n  <span class=\"supfact\">v6</span>.c_cc[Number] = Number;\n  pthread__unblock_sigwinch();\nLABEL_2:\n  <span class=\"supfact\">timeout</span> = Number * *(_DWORD *)(a1 + Number);\n  tcsetattr(Number, Number, &<span class=\"supfact\">v6</span>);\n  getc(stdin);\n  while (!done) {\n    perf_top__print_sym_table(a1);\n    v1 = poll(&<span class=\"supfact\">fds</span>, Number, <span class=\"supfact\">timeout</span>);\n    if (v1 == Number) {\n      if (*_errno_location() != Number) {\n      LABEL_7:\n        <span class=\"supfact\">v4</span> = getc(stdin);\n        tcsetattr(Number, Number, &<span class=\"supfact\">termios_p</span>);\n        if ((unsigned __int8)perf_top__handle_keypress(a1, <span class=\"supfact\">v4</span>))\n          goto LABEL_2;\n        done = Number;\n      }\n    } else if (v1) {\n      goto LABEL_7;\n    }\n  }\n  return Number L;\n}", "code_t": "void *__cdecl display_thread(void *arg) {\n  int v1;\n  int <span class=\"supfact\">delay_msecs</span>;\n  int <span class=\"supfact\">c</span>;\n  pollfd <span class=\"supfact\">stdin_poll</span>;\n  termios <span class=\"supfact\">tc</span>;\n  termios <span class=\"supfact\">save</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  <span class=\"supfact\">stdin_poll</span> = (pollfd)Number;\n  tcgetattr(Number, &<span class=\"supfact\">save</span>);\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_iflag =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_iflag;\n  <span class=\"supfact\">tc</span>.c_cflag = <span class=\"supfact\">save</span>.c_cflag;\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_line =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_line;\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_cc[Number];\n  *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n      *(_QWORD *)&<span class=\"supfact\">save</span>.c_cc[Number];\n  <span class=\"supfact\">tc</span>.c_ospeed = <span class=\"supfact\">save</span>.c_ospeed;\n  <span class=\"supfact\">tc</span>.c_lflag = <span class=\"supfact\">save</span>.c_lflag & Number;\n  <span class=\"supfact\">tc</span>.c_cc[Number] = Number;\n  <span class=\"supfact\">tc</span>.c_cc[Number] = Number;\n  pthread__unblock_sigwinch();\nrepeat:\n  <span class=\"supfact\">delay_msecs</span> = Number * *((_DWORD *)arg + Number);\n  tcsetattr(Number, Number, &<span class=\"supfact\">tc</span>);\n  getc(stdin);\n  while (!done) {\n    perf_top__print_sym_table((perf_top *)arg);\n    v1 = poll(&<span class=\"supfact\">stdin_poll</span>, Number, <span class=\"supfact\">delay_msecs</span>);\n    if (v1 == Number) {\n      if (*_errno_location() != Number) {\n      LABEL_7:\n        <span class=\"supfact\">c</span> = getc(stdin);\n        tcsetattr(Number, Number, &<span class=\"supfact\">save</span>);\n        if (perf_top__handle_keypress((perf_top *)arg, <span class=\"supfact\">c</span>))\n          goto repeat;\n        done = Number;\n      }\n    } else if (v1) {\n      goto LABEL_7;\n    }\n  }\n  return Number L;\n}", "var": [{"name": "termios_p", "type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }", "ref_name": "save", "ref_type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }"}, {"name": "v6", "type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }", "ref_name": "tc", "ref_type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }"}, {"name": "fds", "type": "struct pollfd { int fd; __int16 events; __int16 revents; }", "ref_name": "stdin_poll", "ref_type": "struct pollfd { int fd; __int16 events; __int16 revents; }"}], "body_in_train": true}, {"repo_owner": "sunlzx", "repo_name": "cpp-coding", "path": "sunlzx/cpp-coding/c676267546507002ec16a611c080cb6b84afa279195efa4981fcb7de59fa7139", "path_in_repo": "sunlzx/cpp-coding/monitor/main.o", "objdump": "000000000000020a <main>:\n 20a:\t55                   \tpush   %rbp\n 20b:\t48 89 e5             \tmov    %rsp,%rbp\n 20e:\t48 83 ec 60          \tsub    $0x60,%rsp\n 212:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n 215:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n 219:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 21e:\te8 00 00 00 00       \tcallq  223 <main+0x19>\n 223:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n 226:\t89 c6                \tmov    %eax,%esi\n 228:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 22d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 232:\te8 00 00 00 00       \tcallq  237 <main+0x2d>\n 237:\t83 7d ac 05          \tcmpl   $0x5,-0x54(%rbp)\n 23b:\t7f 0a                \tjg     247 <main+0x3d>\n 23d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 242:\te9 dd 01 00 00       \tjmpq   424 <main+0x21a>\n 247:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 24b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 24f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 253:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n 25a:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n 261:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n 268:\tc7 45 f4 02 00 00 00 \tmovl   $0x2,-0xc(%rbp)\n 26f:\te9 a0 00 00 00       \tjmpq   314 <main+0x10a>\n 274:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 277:\t48 98                \tcltq   \n 279:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 280:\t00 \n 281:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 285:\t48 01 d0             \tadd    %rdx,%rax\n 288:\t48 8b 00             \tmov    (%rax),%rax\n 28b:\t48 89 c6             \tmov    %rax,%rsi\n 28e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 293:\te8 00 00 00 00       \tcallq  298 <main+0x8e>\n 298:\t85 c0                \ttest   %eax,%eax\n 29a:\t74 26                \tje     2c2 <main+0xb8>\n 29c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 29f:\t48 98                \tcltq   \n 2a1:\t48 83 c0 01          \tadd    $0x1,%rax\n 2a5:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 2ac:\t00 \n 2ad:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 2b1:\t48 01 d0             \tadd    %rdx,%rax\n 2b4:\t48 8b 00             \tmov    (%rax),%rax\n 2b7:\t48 89 c7             \tmov    %rax,%rdi\n 2ba:\te8 00 00 00 00       \tcallq  2bf <main+0xb5>\n 2bf:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 2c2:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 2c5:\t48 98                \tcltq   \n 2c7:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 2ce:\t00 \n 2cf:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 2d3:\t48 01 d0             \tadd    %rdx,%rax\n 2d6:\t48 8b 00             \tmov    (%rax),%rax\n 2d9:\t48 89 c6             \tmov    %rax,%rsi\n 2dc:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2e1:\te8 00 00 00 00       \tcallq  2e6 <main+0xdc>\n 2e6:\t85 c0                \ttest   %eax,%eax\n 2e8:\t74 26                \tje     310 <main+0x106>\n 2ea:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 2ed:\t48 98                \tcltq   \n 2ef:\t48 83 c0 01          \tadd    $0x1,%rax\n 2f3:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 2fa:\t00 \n 2fb:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 2ff:\t48 01 d0             \tadd    %rdx,%rax\n 302:\t48 8b 00             \tmov    (%rax),%rax\n 305:\t48 89 c7             \tmov    %rax,%rdi\n 308:\te8 00 00 00 00       \tcallq  30d <main+0x103>\n 30d:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 310:\t83 45 f4 02          \taddl   $0x2,-0xc(%rbp)\n 314:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 317:\t3b 45 ac             \tcmp    -0x54(%rbp),%eax\n 31a:\t0f 8c 54 ff ff ff    \tjl     274 <main+0x6a>\n 320:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n 323:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 326:\t89 c6                \tmov    %eax,%esi\n 328:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 32d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 332:\te8 00 00 00 00       \tcallq  337 <main+0x12d>\n 337:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n 33b:\t7e 17                \tjle    354 <main+0x14a>\n 33d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 340:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n 343:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n 346:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n 34a:\t89 ce                \tmov    %ecx,%esi\n 34c:\t48 89 c7             \tmov    %rax,%rdi\n 34f:\te8 00 00 00 00       \tcallq  354 <main+0x14a>\n 354:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 358:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 35d:\t48 89 c7             \tmov    %rax,%rdi\n 360:\te8 00 00 00 00       \tcallq  365 <main+0x15b>\n 365:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n 36c:\teb 2d                \tjmp    39b <main+0x191>\n 36e:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n 372:\t7f 0e                \tjg     382 <main+0x178>\n 374:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 378:\t48 89 c7             \tmov    %rax,%rdi\n 37b:\te8 00 00 00 00       \tcallq  380 <main+0x176>\n 380:\teb 15                \tjmp    397 <main+0x18d>\n 382:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 386:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 38a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 38f:\t48 89 c7             \tmov    %rax,%rdi\n 392:\te8 00 00 00 00       \tcallq  397 <main+0x18d>\n 397:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n 39b:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 39e:\t3b 45 fc             \tcmp    -0x4(%rbp),%eax\n 3a1:\t7c cb                \tjl     36e <main+0x164>\n 3a3:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n 3a7:\t7e 11                \tjle    3ba <main+0x1b0>\n 3a9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3ad:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 3b2:\t48 89 c7             \tmov    %rax,%rdi\n 3b5:\te8 00 00 00 00       \tcallq  3ba <main+0x1b0>\n 3ba:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n 3be:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3c3:\t48 89 c7             \tmov    %rax,%rdi\n 3c6:\te8 00 00 00 00       \tcallq  3cb <main+0x1c1>\n 3cb:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n 3cf:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 3d3:\t48 29 c2             \tsub    %rax,%rdx\n 3d6:\t48 89 d0             \tmov    %rdx,%rax\n 3d9:\t48 69 d0 40 42 0f 00 \timul   $0xf4240,%rax,%rdx\n 3e0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 3e4:\t48 01 c2             \tadd    %rax,%rdx\n 3e7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 3eb:\t48 29 c2             \tsub    %rax,%rdx\n 3ee:\t48 89 d0             \tmov    %rdx,%rax\n 3f1:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n 3f6:\tf3 0f 11 45 e4       \tmovss  %xmm0,-0x1c(%rbp)\n 3fb:\tf3 0f 10 45 e4       \tmovss  -0x1c(%rbp),%xmm0\n 400:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # 408 <main+0x1fe>\n 407:\t00 \n 408:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n 40c:\tf3 0f 5a c0          \tcvtss2sd %xmm0,%xmm0\n 410:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 415:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 41a:\te8 00 00 00 00       \tcallq  41f <main+0x215>\n 41f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 424:\tc9                   \tleaveq \n 425:\tc3                   \tretq   \n", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  struct timeval <span class=\"supfact\">v4</span>;\n  struct timeval <span class=\"supfact\">tv</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  const char *<span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  puts(String);\n  printf(String, (unsigned int)argc);\n  if (argc <= Number)\n    return Number;\n  <span class=\"supfact\">v7</span> = argv[Number];\n  <span class=\"supfact\">v10</span> = Number;\n  <span class=\"supfact\">v9</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < argc;\n       <span class=\"supfact\">i</span> += Number) {\n    if (strcmp(String, argv[<span class=\"supfact\">i</span>]))\n      <span class=\"supfact\">v10</span> = atoi(argv[<span class=\"supfact\">i</span> + Number]);\n    if (strcmp(String, argv[<span class=\"supfact\">i</span>]))\n      <span class=\"supfact\">v9</span> = atoi(argv[<span class=\"supfact\">i</span> + Number]);\n  }\n  printf(String, (unsigned int)<span class=\"supfact\">v10</span>,\n         (unsigned int)<span class=\"supfact\">v9</span>);\n  if (<span class=\"supfact\">v9</span> > Number)\n    tpool_init(&<span class=\"supfact\">v6</span>, (unsigned int)<span class=\"supfact\">v9</span>,\n               (unsigned int)(Number * <span class=\"supfact\">v9</span>));\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v10</span>;\n       ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">v9</span> > Number)\n      tpool_add_work(<span class=\"supfact\">v6</span>, pool_execute, <span class=\"supfact\">v7</span>);\n    else\n      pool_execute(<span class=\"supfact\">v7</span>);\n  }\n  if (<span class=\"supfact\">v9</span> > Number)\n    tpool_destroy(<span class=\"supfact\">v6</span>, Number L);\n  gettimeofday(&<span class=\"supfact\">v4</span>, Number L);\n  printf(String, (float)((float)(LODWORD(<span class=\"supfact\">v4</span>.tv_usec) +\n                                 Number * (LODWORD(<span class=\"supfact\">v4</span>.tv_sec) -\n                                           LODWORD(<span class=\"supfact\">tv</span>.tv_sec)) -\n                                 LODWORD(<span class=\"supfact\">tv</span>.tv_usec)) /\n                         Number));\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  timeval <span class=\"supfact\">tpend</span>;\n  timeval <span class=\"supfact\">tpstart</span>;\n  tpool_t <span class=\"supfact\">thread_pool</span>;\n  char *<span class=\"supfact\">cmd</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">max_concurrent</span>;\n  int <span class=\"supfact\">exec_times</span>;\n  puts(String);\n  printf(String, (unsigned int)argc);\n  if (argc <= Number)\n    return Number;\n  <span class=\"supfact\">cmd</span> = (char *)argv[Number];\n  <span class=\"supfact\">exec_times</span> = Number;\n  <span class=\"supfact\">max_concurrent</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < argc;\n       <span class=\"supfact\">i</span> += Number) {\n    if (strcmp(String, argv[<span class=\"supfact\">i</span>]))\n      <span class=\"supfact\">exec_times</span> = atoi(argv[<span class=\"supfact\">i</span> + Number]);\n    if (strcmp(String, argv[<span class=\"supfact\">i</span>]))\n      <span class=\"supfact\">max_concurrent</span> = atoi(argv[<span class=\"supfact\">i</span> + Number]);\n  }\n  printf(String, (unsigned int)<span class=\"supfact\">exec_times</span>,\n         (unsigned int)<span class=\"supfact\">max_concurrent</span>);\n  if (<span class=\"supfact\">max_concurrent</span> > Number)\n    tpool_init(&<span class=\"supfact\">thread_pool</span>,\n               (unsigned int)<span class=\"supfact\">max_concurrent</span>,\n               (unsigned int)(Number * <span class=\"supfact\">max_concurrent</span>));\n  gettimeofday(&<span class=\"supfact\">tpstart</span>, Number L);\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">exec_times</span>; ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">max_concurrent</span> > Number)\n      tpool_add_work(<span class=\"supfact\">thread_pool</span>, pool_execute,\n                     <span class=\"supfact\">cmd</span>);\n    else\n      pool_execute(<span class=\"supfact\">cmd</span>);\n  }\n  if (<span class=\"supfact\">max_concurrent</span> > Number)\n    tpool_destroy(<span class=\"supfact\">thread_pool</span>, Number L);\n  gettimeofday(&<span class=\"supfact\">tpend</span>, Number L);\n  printf(String,\n         (float)((float)(LODWORD(<span class=\"supfact\">tpend</span>.tv_usec) +\n                         Number * (LODWORD(<span class=\"supfact\">tpend</span>.tv_sec) -\n                                   LODWORD(<span class=\"supfact\">tpstart</span>.tv_sec)) -\n                         LODWORD(<span class=\"supfact\">tpstart</span>.tv_usec)) /\n                 Number));\n  return Number;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tpstart", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v4", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tpend", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "ywang-git", "repo_name": "XBeeProject", "path": "ywang-git/XBeeProject/7b5bf86fb6ef537100bfa5ee7e488dec9d7a14287780fed0c93db74c1ac577d8", "path_in_repo": "ywang-git/XBeeProject/lib/zlog/test/test_hex", "objdump": "000000000040a513 <zlog_rotater_add_archive_files>:\n  40a513:\t55                   \tpush   %rbp\n  40a514:\t48 89 e5             \tmov    %rsp,%rbp\n  40a517:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n  40a51b:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n  40a51f:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  40a526:\t48 8d 3d 9e fd ff ff \tlea    -0x262(%rip),%rdi        # 40a2cb <zlog_file_del>\n  40a52d:\te8 5a 65 00 00       \tcallq  410a8c <zc_arraylist_new>\n  40a532:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n  40a536:\t48 89 82 70 04 00 00 \tmov    %rax,0x470(%rdx)\n  40a53d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  40a541:\t48 8b 80 70 04 00 00 \tmov    0x470(%rax),%rax\n  40a548:\t48 85 c0             \ttest   %rax,%rax\n  40a54b:\t75 2c                \tjne    40a579 <zlog_rotater_add_archive_files+0x66>\n  40a54d:\t48 8d 0d 53 c4 00 00 \tlea    0xc453(%rip),%rcx        # 4169a7 <__func__.4047+0x1920>\n  40a554:\tba ca 00 00 00       \tmov    $0xca,%edx\n  40a559:\t48 8d 35 a7 c2 00 00 \tlea    0xc2a7(%rip),%rsi        # 416807 <__func__.4047+0x1780>\n  40a560:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40a565:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40a56a:\te8 87 76 00 00       \tcallq  411bf6 <zc_profile_inner>\n  40a56f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40a574:\te9 52 01 00 00       \tjmpq   40a6cb <zlog_rotater_add_archive_files+0x1b8>\n  40a579:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  40a57d:\t48 8d 78 48          \tlea    0x48(%rax),%rdi\n  40a581:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  40a585:\t48 89 c1             \tmov    %rax,%rcx\n  40a588:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40a58d:\tbe 07 00 00 00       \tmov    $0x7,%esi\n  40a592:\te8 d9 7e ff ff       \tcallq  402470 <glob@plt>\n  40a597:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  40a59a:\t83 7d ec 03          \tcmpl   $0x3,-0x14(%rbp)\n  40a59e:\t0f 84 15 01 00 00    \tje     40a6b9 <zlog_rotater_add_archive_files+0x1a6>\n  40a5a4:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  40a5a8:\t74 3c                \tje     40a5e6 <zlog_rotater_add_archive_files+0xd3>\n  40a5aa:\te8 c1 7a ff ff       \tcallq  402070 <__errno_location@plt>\n  40a5af:\t8b 10                \tmov    (%rax),%edx\n  40a5b1:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40a5b4:\t41 89 d1             \tmov    %edx,%r9d\n  40a5b7:\t41 89 c0             \tmov    %eax,%r8d\n  40a5ba:\t48 8d 0d fc c3 00 00 \tlea    0xc3fc(%rip),%rcx        # 4169bd <__func__.4047+0x1936>\n  40a5c1:\tba d3 00 00 00       \tmov    $0xd3,%edx\n  40a5c6:\t48 8d 35 3a c2 00 00 \tlea    0xc23a(%rip),%rsi        # 416807 <__func__.4047+0x1780>\n  40a5cd:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40a5d2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40a5d7:\te8 1a 76 00 00       \tcallq  411bf6 <zc_profile_inner>\n  40a5dc:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40a5e1:\te9 e5 00 00 00       \tjmpq   40a6cb <zlog_rotater_add_archive_files+0x1b8>\n  40a5e6:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  40a5ea:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40a5ee:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  40a5f2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40a5f6:\te9 a7 00 00 00       \tjmpq   40a6a2 <zlog_rotater_add_archive_files+0x18f>\n  40a5fb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40a5ff:\t48 8b 10             \tmov    (%rax),%rdx\n  40a602:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  40a606:\t48 89 d6             \tmov    %rdx,%rsi\n  40a609:\t48 89 c7             \tmov    %rax,%rdi\n  40a60c:\te8 2b fd ff ff       \tcallq  40a33c <zlog_file_check_new>\n  40a611:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40a615:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  40a61a:\t75 24                \tjne    40a640 <zlog_rotater_add_archive_files+0x12d>\n  40a61c:\t48 8d 0d b7 c3 00 00 \tlea    0xc3b7(%rip),%rcx        # 4169da <__func__.4047+0x1953>\n  40a623:\tba de 00 00 00       \tmov    $0xde,%edx\n  40a628:\t48 8d 35 d8 c1 00 00 \tlea    0xc1d8(%rip),%rsi        # 416807 <__func__.4047+0x1780>\n  40a62f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40a634:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40a639:\te8 b8 75 00 00       \tcallq  411bf6 <zc_profile_inner>\n  40a63e:\teb 5d                \tjmp    40a69d <zlog_rotater_add_archive_files+0x18a>\n  40a640:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  40a644:\t48 8b 80 70 04 00 00 \tmov    0x470(%rax),%rax\n  40a64b:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40a64f:\t48 8d 35 9b fe ff ff \tlea    -0x165(%rip),%rsi        # 40a4f1 <zlog_file_cmp>\n  40a656:\t48 89 c7             \tmov    %rax,%rdi\n  40a659:\te8 f3 68 00 00       \tcallq  410f51 <zc_arraylist_sortadd>\n  40a65e:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  40a661:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  40a665:\t74 36                \tje     40a69d <zlog_rotater_add_archive_files+0x18a>\n  40a667:\t48 8d 0d 88 c3 00 00 \tlea    0xc388(%rip),%rcx        # 4169f6 <__func__.4047+0x196f>\n  40a66e:\tba e6 00 00 00       \tmov    $0xe6,%edx\n  40a673:\t48 8d 35 8d c1 00 00 \tlea    0xc18d(%rip),%rsi        # 416807 <__func__.4047+0x1780>\n  40a67a:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40a67f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40a684:\te8 6d 75 00 00       \tcallq  411bf6 <zc_profile_inner>\n  40a689:\t90                   \tnop\n  40a68a:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  40a68e:\t48 89 c7             \tmov    %rax,%rdi\n  40a691:\te8 aa 79 ff ff       \tcallq  402040 <globfree@plt>\n  40a696:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40a69b:\teb 2e                \tjmp    40a6cb <zlog_rotater_add_archive_files+0x1b8>\n  40a69d:\t48 83 45 f0 08       \taddq   $0x8,-0x10(%rbp)\n  40a6a2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40a6a6:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n  40a6aa:\t48 89 55 f8          \tmov    %rdx,-0x8(%rbp)\n  40a6ae:\t48 85 c0             \ttest   %rax,%rax\n  40a6b1:\t0f 85 44 ff ff ff    \tjne    40a5fb <zlog_rotater_add_archive_files+0xe8>\n  40a6b7:\teb 01                \tjmp    40a6ba <zlog_rotater_add_archive_files+0x1a7>\n  40a6b9:\t90                   \tnop\n  40a6ba:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  40a6be:\t48 89 c7             \tmov    %rax,%rdi\n  40a6c1:\te8 7a 79 ff ff       \tcallq  402040 <globfree@plt>\n  40a6c6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40a6cb:\tc9                   \tleaveq \n  40a6cc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall zlog_rotater_add_archive_files(__int64 a1) {\n  int v1;\n  int v2;\n  int *v4;\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  glob_t <span class=\"supfact\">pglob</span>;\n  char *<span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  char **<span class=\"supfact\">v13</span>;\n  size_t <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v12</span> = Number;\n  *(_QWORD *)(a1 + Number) = zc_arraylist_new(zlog_file_del);\n  if (!*(_QWORD *)(a1 + Number)) {\n    zc_profile_inner(Number, (unsigned int)String, Number, (unsigned int)String,\n                     v1, v2);\n    return Number;\n  }\n  <span class=\"supfact\">v12</span> = glob((const char *)(a1 + Number), Number, Number L,\n                             &<span class=\"supfact\">pglob</span>);\n  if (<span class=\"supfact\">v12</span> != Number) {\n    if (<span class=\"supfact\">v12</span>) {\n      v4 = __errno_location();\n      zc_profile_inner(Number, (unsigned int)String, Number,\n                       (unsigned int)String, <span class=\"supfact\">v12</span>, *v4);\n      return Number;\n    }\n    <span class=\"supfact\">v13</span> = <span class=\"supfact\">pglob</span>.gl_pathv;\n    <span class=\"supfact\">v14</span> = <span class=\"supfact\">pglob</span>.gl_pathc;\n    while (<span class=\"supfact\">v14</span>--) {\n      <span class=\"supfact\">v11</span> = zlog_file_check_new(a1, *<span class=\"supfact\">v13</span>);\n      if (<span class=\"supfact\">v11</span>) {\n        <span class=\"supfact\">v12</span> = zc_arraylist_sortadd(\n            *(_QWORD *)(a1 + Number), zlog_file_cmp, <span class=\"supfact\">v11</span>);\n        if (<span class=\"supfact\">v12</span>) {\n          zc_profile_inner(Number, (unsigned int)String, Number,\n                           (unsigned int)String, v7, v8);\n          globfree(&<span class=\"supfact\">pglob</span>);\n          return Number;\n        }\n      } else {\n        zc_profile_inner(Number, (unsigned int)String, Number,\n                         (unsigned int)String, v5, v6);\n      }\n      ++<span class=\"supfact\">v13</span>;\n    }\n  }\n  globfree(&<span class=\"supfact\">pglob</span>);\n  return Number L;\n}", "code_t": "int __cdecl zlog_rotater_add_archive_files(zlog_rotater_t *a_rotater) {\n  int *v2;\n  glob_t <span class=\"supfact\">glob_buf</span>;\n  zlog_file_t *<span class=\"supfact\">a_file</span>;\n  int <span class=\"supfact\">rc</span>;\n  char **<span class=\"supfact\">pathv</span>;\n  size_t <span class=\"supfact\">pathc</span>;\n  <span class=\"supfact\">rc</span> = Number;\n  a_rotater->files = zc_arraylist_new((zc_arraylist_del_fn)zlog_file_del);\n  if (!a_rotater->files) {\n    zc_profile_inner(Number, String, Number L, String);\n    return Number;\n  }\n  <span class=\"supfact\">rc</span> =\n      glob(a_rotater->glob_path, Number, Number L, &<span class=\"supfact\">glob_buf</span>);\n  if (<span class=\"supfact\">rc</span> != Number) {\n    if (<span class=\"supfact\">rc</span>) {\n      v2 = __errno_location();\n      zc_profile_inner(Number, String, Number L, String,\n                       (unsigned int)<span class=\"supfact\">rc</span>, (unsigned int)*v2);\n      return Number;\n    }\n    <span class=\"supfact\">pathv</span> = <span class=\"supfact\">glob_buf</span>.gl_pathv;\n    <span class=\"supfact\">pathc</span> = <span class=\"supfact\">glob_buf</span>.gl_pathc;\n    while (<span class=\"supfact\">pathc</span>--) {\n      <span class=\"supfact\">a_file</span> =\n          zlog_file_check_new(a_rotater, *<span class=\"supfact\">pathv</span>);\n      if (<span class=\"supfact\">a_file</span>) {\n        <span class=\"supfact\">rc</span> = zc_arraylist_sortadd(\n            a_rotater->files, (zc_arraylist_cmp_fn)zlog_file_cmp,\n            <span class=\"supfact\">a_file</span>);\n        if (<span class=\"supfact\">rc</span>) {\n          zc_profile_inner(Number, String, Number L, String);\n          globfree(&<span class=\"supfact\">glob_buf</span>);\n          return Number;\n        }\n      } else {\n        zc_profile_inner(Number, String, Number L, String);\n      }\n      ++<span class=\"supfact\">pathv</span>;\n    }\n  }\n  globfree(&<span class=\"supfact\">glob_buf</span>);\n  return Number;\n}", "var": [{"name": "pglob", "type": "struct glob_t { size_t gl_pathc; char ** gl_pathv; size_t gl_offs; int gl_flags; PADDING (4); void (*)(void *) gl_closedir; void *(*)(void *) gl_readdir; void *(*)(const char *) gl_opendir; int (*)(const char *, void *) gl_lstat; int (*)(const char *, void *) gl_stat; }", "ref_name": "glob_buf", "ref_type": "struct glob_t { size_t gl_pathc; char ** gl_pathv; size_t gl_offs; int gl_flags; PADDING (4); void (*)(void *) gl_closedir; void *(*)(void *) gl_readdir; void *(*)(const char *) gl_opendir; int (*)(const char *, void *) gl_lstat; int (*)(const char *, void *) gl_stat; }"}], "body_in_train": true}, {"repo_owner": "shishuo365", "repo_name": "ffmpeg-h265", "path": "shishuo365/ffmpeg-h265/fb0745c1d9d9bdabd51f8c78fbd1bf9941442645a8413132b17da8e8bc7ef9ca", "path_in_repo": "shishuo365/ffmpeg-h265//libavcodec/rv34.o", "objdump": "000000000000af84 <update_sar>:\n    af84:\t48 83 ec 28          \tsub    $0x28,%rsp\n    af88:\t89 7c 24 1c          \tmov    %edi,0x1c(%rsp)\n    af8c:\t89 74 24 18          \tmov    %esi,0x18(%rsp)\n    af90:\t48 89 54 24 10       \tmov    %rdx,0x10(%rsp)\n    af95:\t89 4c 24 0c          \tmov    %ecx,0xc(%rsp)\n    af99:\t44 89 44 24 08       \tmov    %r8d,0x8(%rsp)\n    af9e:\t8b 54 24 10          \tmov    0x10(%rsp),%edx\n    afa2:\t85 d2                \ttest   %edx,%edx\n    afa4:\t75 10                \tjne    afb6 <update_sar+0x32>\n    afa6:\tc7 44 24 10 01 00 00 \tmovl   $0x1,0x10(%rsp)\n    afad:\t00 \n    afae:\tc7 44 24 14 01 00 00 \tmovl   $0x1,0x14(%rsp)\n    afb5:\t00 \n    afb6:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n    afba:\t48 b9 00 00 00 00 ff \tmovabs $0xffffffff00000000,%rcx\n    afc1:\tff ff ff \n    afc4:\t4c 21 c9             \tand    %r9,%rcx\n    afc7:\t48 09 ca             \tor     %rcx,%rdx\n    afca:\t49 89 d1             \tmov    %rdx,%r9\n    afcd:\t8b 54 24 18          \tmov    0x18(%rsp),%edx\n    afd1:\t48 c1 e2 20          \tshl    $0x20,%rdx\n    afd5:\t44 89 c9             \tmov    %r9d,%ecx\n    afd8:\t48 09 ca             \tor     %rcx,%rdx\n    afdb:\t49 89 d1             \tmov    %rdx,%r9\n    afde:\t8b 54 24 08          \tmov    0x8(%rsp),%edx\n    afe2:\t48 b9 00 00 00 00 ff \tmovabs $0xffffffff00000000,%rcx\n    afe9:\tff ff ff \n    afec:\t48 21 c8             \tand    %rcx,%rax\n    afef:\t48 09 d0             \tor     %rdx,%rax\n    aff2:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n    aff6:\t48 c1 e2 20          \tshl    $0x20,%rdx\n    affa:\t89 c0                \tmov    %eax,%eax\n    affc:\t48 09 d0             \tor     %rdx,%rax\n    afff:\t4c 89 ce             \tmov    %r9,%rsi\n    b002:\t48 89 c7             \tmov    %rax,%rdi\n    b005:\te8 00 00 00 00       \tcallq  b00a <update_sar+0x86>\n    b00a:\t48 89 c2             \tmov    %rax,%rdx\n    b00d:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    b012:\t48 89 d6             \tmov    %rdx,%rsi\n    b015:\t48 89 c7             \tmov    %rax,%rdi\n    b018:\te8 00 00 00 00       \tcallq  b01d <update_sar+0x99>\n    b01d:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n    b022:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    b027:\t48 83 c4 28          \tadd    $0x28,%rsp\n    b02b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall update_sar(unsigned int a1, unsigned int a2, __int64 a3,\n                              unsigned int a4, unsigned int a5) {\n  __int64 v5;\n  __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = a3;\n  if (!(_DWORD)a3)\n    <span class=\"supfact\">v7</span> = Number;\n  v5 = av_mul_q(__PAIR64__(a4, a5), a1 | ((unsigned __int64)a2 << Number));\n  return av_mul_q(<span class=\"supfact\">v7</span>, v5);\n}", "code_t": "AVRational_0 __cdecl update_sar(int old_w, int old_h, AVRational_0 sar,\n                                int new_w, int new_h) {\n  __int64 v5;\n  AVRational_0 <span class=\"supfact\">sara</span>;\n  <span class=\"supfact\">sara</span> = sar;\n  if (!sar.num)\n    <span class=\"supfact\">sara</span> = (AVRational_0)Number;\n  v5 = av_mul_q(__PAIR64__(new_w, new_h),\n                (unsigned int)old_w |\n                    ((unsigned __int64)(unsigned int)old_h << Number));\n  return (AVRational_0)((__int64(__fastcall *)(_QWORD, _QWORD))av_mul_q)(\n      <span class=\"supfact\">sara</span>, v5);\n}", "var": [{"name": "v7", "type": "unsigned __int64", "ref_name": "sara", "ref_type": "struct AVRational_0 { int num; int den; }"}], "body_in_train": true}, {"repo_owner": "darkspr1te", "repo_name": "uClinux-dist", "path": "darkspr1te/uClinux-dist/f071216eec260ac8e74157a6d81a620d92f7a5dec799b51e8e2294a39c82800c", "path_in_repo": "darkspr1te/uClinux-dist/user/e2fsprogs/e2fsck/util.o", "objdump": "000000000000100b <print_resource_track>:\n    100b:\t55                   \tpush   %rbp\n    100c:\t48 89 e5             \tmov    %rsp,%rbp\n    100f:\t48 81 ec f0 00 00 00 \tsub    $0xf0,%rsp\n    1016:\t48 89 bd 28 ff ff ff \tmov    %rdi,-0xd8(%rbp)\n    101d:\t48 89 b5 20 ff ff ff \tmov    %rsi,-0xe0(%rbp)\n    1024:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n    102b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1030:\t48 89 c7             \tmov    %rax,%rdi\n    1033:\te8 00 00 00 00       \tcallq  1038 <print_resource_track+0x2d>\n    1038:\t48 83 bd 28 ff ff ff \tcmpq   $0x0,-0xd8(%rbp)\n    103f:\t00 \n    1040:\t74 19                \tje     105b <print_resource_track+0x50>\n    1042:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    1049:\t48 89 c6             \tmov    %rax,%rsi\n    104c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1051:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1056:\te8 00 00 00 00       \tcallq  105b <print_resource_track+0x50>\n    105b:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1062:\t48 89 c7             \tmov    %rax,%rdi\n    1065:\te8 00 00 00 00       \tcallq  106a <print_resource_track+0x5f>\n    106a:\t8b 85 60 ff ff ff    \tmov    -0xa0(%rbp),%eax\n    1070:\t05 ff 03 00 00       \tadd    $0x3ff,%eax\n    1075:\t8d 90 ff 03 00 00    \tlea    0x3ff(%rax),%edx\n    107b:\t85 c0                \ttest   %eax,%eax\n    107d:\t0f 48 c2             \tcmovs  %edx,%eax\n    1080:\tc1 f8 0a             \tsar    $0xa,%eax\n    1083:\t89 c7                \tmov    %eax,%edi\n    1085:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    108b:\t05 ff 03 00 00       \tadd    $0x3ff,%eax\n    1090:\t8d 90 ff 03 00 00    \tlea    0x3ff(%rax),%edx\n    1096:\t85 c0                \ttest   %eax,%eax\n    1098:\t0f 48 c2             \tcmovs  %edx,%eax\n    109b:\tc1 f8 0a             \tsar    $0xa,%eax\n    109e:\t89 c1                \tmov    %eax,%ecx\n    10a0:\t8b 85 50 ff ff ff    \tmov    -0xb0(%rbp),%eax\n    10a6:\t05 ff 03 00 00       \tadd    $0x3ff,%eax\n    10ab:\t8d 90 ff 03 00 00    \tlea    0x3ff(%rax),%edx\n    10b1:\t85 c0                \ttest   %eax,%eax\n    10b3:\t0f 48 c2             \tcmovs  %edx,%eax\n    10b6:\tc1 f8 0a             \tsar    $0xa,%eax\n    10b9:\t89 c6                \tmov    %eax,%esi\n    10bb:\t8b 85 40 ff ff ff    \tmov    -0xc0(%rbp),%eax\n    10c1:\t05 ff 03 00 00       \tadd    $0x3ff,%eax\n    10c6:\t8d 90 ff 03 00 00    \tlea    0x3ff(%rax),%edx\n    10cc:\t85 c0                \ttest   %eax,%eax\n    10ce:\t0f 48 c2             \tcmovs  %edx,%eax\n    10d1:\tc1 f8 0a             \tsar    $0xa,%eax\n    10d4:\t41 89 f8             \tmov    %edi,%r8d\n    10d7:\t89 f2                \tmov    %esi,%edx\n    10d9:\t89 c6                \tmov    %eax,%esi\n    10db:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    10e0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    10e5:\te8 00 00 00 00       \tcallq  10ea <print_resource_track+0xdf>\n    10ea:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    10f1:\t48 89 c6             \tmov    %rax,%rsi\n    10f4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    10f9:\te8 00 00 00 00       \tcallq  10fe <print_resource_track+0xf3>\n    10fe:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    1105:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n    1109:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    1110:\t48 83 c0 10          \tadd    $0x10,%rax\n    1114:\t48 89 d6             \tmov    %rdx,%rsi\n    1117:\t48 89 c7             \tmov    %rax,%rdi\n    111a:\te8 9a fe ff ff       \tcallq  fb9 <timeval_subtract>\n    111f:\tf3 0f 5a d8          \tcvtss2sd %xmm0,%xmm3\n    1123:\tf2 0f 11 9d 18 ff ff \tmovsd  %xmm3,-0xe8(%rbp)\n    112a:\tff \n    112b:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    1132:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n    1136:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    113d:\t48 89 d6             \tmov    %rdx,%rsi\n    1140:\t48 89 c7             \tmov    %rax,%rdi\n    1143:\te8 71 fe ff ff       \tcallq  fb9 <timeval_subtract>\n    1148:\tf3 0f 5a e0          \tcvtss2sd %xmm0,%xmm4\n    114c:\tf2 0f 11 a5 10 ff ff \tmovsd  %xmm4,-0xf0(%rbp)\n    1153:\tff \n    1154:\t48 8b 95 20 ff ff ff \tmov    -0xe0(%rbp),%rdx\n    115b:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n    1162:\t48 89 d6             \tmov    %rdx,%rsi\n    1165:\t48 89 c7             \tmov    %rax,%rdi\n    1168:\te8 4c fe ff ff       \tcallq  fb9 <timeval_subtract>\n    116d:\tf3 0f 5a c0          \tcvtss2sd %xmm0,%xmm0\n    1171:\tf2 0f 10 95 18 ff ff \tmovsd  -0xe8(%rbp),%xmm2\n    1178:\tff \n    1179:\tf2 0f 10 8d 10 ff ff \tmovsd  -0xf0(%rbp),%xmm1\n    1180:\tff \n    1181:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1186:\tb8 03 00 00 00       \tmov    $0x3,%eax\n    118b:\te8 00 00 00 00       \tcallq  1190 <print_resource_track+0x185>\n    1190:\t90                   \tnop\n    1191:\tc9                   \tleaveq \n    1192:\tc3                   \tretq   ", "code_s": "int __fastcall print_resource_track(const char *a1, __int64 a2) {\n  int v2;\n  unsigned int v3;\n  int v4;\n  __int64 v5;\n  int v6;\n  unsigned int v7;\n  int v8;\n  float v9;\n  double <span class=\"supfact\">v11</span>;\n  double <span class=\"supfact\">v12</span>;\n  struct timeval <span class=\"supfact\">tv</span>;\n  struct mallinfo <span class=\"supfact\">v15</span>;\n  struct rusage <span class=\"supfact\">usage</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  if (a1)\n    printf(String, a1);\n  mallinfo(&<span class=\"supfact\">v15</span>);\n  v2 = <span class=\"supfact\">v15</span>.fordblks + Number;\n  if (<span class=\"supfact\">v15</span>.fordblks + Number < Number)\n    v2 = <span class=\"supfact\">v15</span>.fordblks + Number;\n  v3 = v2 >> Number;\n  v4 = <span class=\"supfact\">v15</span>.uordblks + Number;\n  if (<span class=\"supfact\">v15</span>.uordblks + Number < Number)\n    v4 = <span class=\"supfact\">v15</span>.uordblks + Number;\n  v5 = (unsigned int)(v4 >> Number);\n  v6 = <span class=\"supfact\">v15</span>.hblkhd + Number;\n  if (<span class=\"supfact\">v15</span>.hblkhd + Number < Number)\n    v6 = <span class=\"supfact\">v15</span>.hblkhd + Number;\n  v7 = v6 >> Number;\n  v8 = <span class=\"supfact\">v15</span>.arena + Number;\n  if (<span class=\"supfact\">v15</span>.arena + Number < Number)\n    v8 = <span class=\"supfact\">v15</span>.arena + Number;\n  printf(String, (unsigned int)(v8 >> Number), v7, v5, v3);\n  getrusage(RUSAGE_SELF, &<span class=\"supfact\">usage</span>);\n  <span class=\"supfact\">v12</span> =\n      timeval_subtract((__int64)&<span class=\"supfact\">usage</span>.ru_stime, a2 + Number);\n  <span class=\"supfact\">v11</span> =\n      timeval_subtract((__int64)&<span class=\"supfact\">usage</span>, a2 + Number);\n  v9 = timeval_subtract((__int64)&<span class=\"supfact\">tv</span>, a2);\n  return printf(String, v9, <span class=\"supfact\">v11</span>, <span class=\"supfact\">v12</span>);\n}", "code_t": "void __cdecl print_resource_track(const char *desc, resource_track *track) {\n  int v2;\n  unsigned int v3;\n  int v4;\n  __int64 v5;\n  int v6;\n  unsigned int v7;\n  int v8;\n  float v9;\n  double <span class=\"supfact\">v10</span>;\n  double <span class=\"supfact\">v11</span>;\n  timeval <span class=\"supfact\">time_end</span>;\n  mallinfo <span class=\"supfact\">malloc_info</span>;\n  rusage <span class=\"supfact\">r</span>;\n  gettimeofday(&<span class=\"supfact\">time_end</span>, Number L);\n  if (desc)\n    printf(String, desc);\n  mallinfo_0(&<span class=\"supfact\">malloc_info</span>);\n  v2 = <span class=\"supfact\">malloc_info</span>.fordblks + Number;\n  if (<span class=\"supfact\">malloc_info</span>.fordblks + Number < Number)\n    v2 = <span class=\"supfact\">malloc_info</span>.fordblks + Number;\n  v3 = v2 >> Number;\n  v4 = <span class=\"supfact\">malloc_info</span>.uordblks + Number;\n  if (<span class=\"supfact\">malloc_info</span>.uordblks + Number < Number)\n    v4 = <span class=\"supfact\">malloc_info</span>.uordblks + Number;\n  v5 = (unsigned int)(v4 >> Number);\n  v6 = <span class=\"supfact\">malloc_info</span>.hblkhd + Number;\n  if (<span class=\"supfact\">malloc_info</span>.hblkhd + Number < Number)\n    v6 = <span class=\"supfact\">malloc_info</span>.hblkhd + Number;\n  v7 = v6 >> Number;\n  v8 = <span class=\"supfact\">malloc_info</span>.arena + Number;\n  if (<span class=\"supfact\">malloc_info</span>.arena + Number < Number)\n    v8 = <span class=\"supfact\">malloc_info</span>.arena + Number;\n  printf(String, (unsigned int)(v8 >> Number), v7, v5, v3);\n  getrusage(RUSAGE_SELF, &<span class=\"supfact\">r</span>);\n  <span class=\"supfact\">v11</span> =\n      timeval_subtract(&<span class=\"supfact\">r</span>.ru_stime, &track->system_start);\n  <span class=\"supfact\">v10</span> =\n      timeval_subtract(&<span class=\"supfact\">r</span>.ru_utime, &track->user_start);\n  v9 = timeval_subtract(&<span class=\"supfact\">time_end</span>, &track->time_start);\n  printf(String, v9, <span class=\"supfact\">v10</span>, <span class=\"supfact\">v11</span>);\n}", "var": [{"name": "usage", "type": "struct rusage { timeval ru_utime; timeval ru_stime; $AFD12F2780B43E6FE38B6B9706ACAC3D _anon_0; $532CEF825D94AC2AB94F49F6475E130E _anon_1; $66A2DE23866A271B95BDDB0CFC621200 _anon_2; $D7B0DA7033B4A064E9B9FDDBD7C23927 _anon_3; $0724066DBCB20967A007E1922F93DD8D _anon_4; $E3ED6156413D9EFF7392FCF5D4C88B92 _anon_5; $CD16977EFB50B4747411BF78CDAEB1F3 _anon_6; $929FFA9E3E540B14A77DC71BC7A41B8C _anon_7; $FE38B77A86D08DEC2C74D6373E0C6416 _anon_8; $8CFCFFE5543F8A2FB5604D0E42418403 _anon_9; $3B84F6F9EECC4FA8F586A2BAC354D043 _anon_10; $229726AEB3C3CA3CA87656F9B9828FB0 _anon_11; $BFE386E9477C7E9875A5D4C107075383 _anon_12; $FA0D2E48EE8615A3C4A68D7252C48DF0 _anon_13; }", "ref_name": "r", "ref_type": "struct rusage { timeval ru_utime; timeval ru_stime; $AFD12F2780B43E6FE38B6B9706ACAC3D _anon_0; $532CEF825D94AC2AB94F49F6475E130E _anon_1; $66A2DE23866A271B95BDDB0CFC621200 _anon_2; $D7B0DA7033B4A064E9B9FDDBD7C23927 _anon_3; $0724066DBCB20967A007E1922F93DD8D _anon_4; $E3ED6156413D9EFF7392FCF5D4C88B92 _anon_5; $CD16977EFB50B4747411BF78CDAEB1F3 _anon_6; $929FFA9E3E540B14A77DC71BC7A41B8C _anon_7; $FE38B77A86D08DEC2C74D6373E0C6416 _anon_8; $8CFCFFE5543F8A2FB5604D0E42418403 _anon_9; $3B84F6F9EECC4FA8F586A2BAC354D043 _anon_10; $229726AEB3C3CA3CA87656F9B9828FB0 _anon_11; $BFE386E9477C7E9875A5D4C107075383 _anon_12; $FA0D2E48EE8615A3C4A68D7252C48DF0 _anon_13; }"}, {"name": "v15", "type": "__unk__", "ref_name": "malloc_info", "ref_type": "struct mallinfo { int arena; int ordblks; int smblks; int hblks; int hblkhd; int usmblks; int fsmblks; int uordblks; int fordblks; int keepcost; }"}, {"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "time_end", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "daydaygit", "repo_name": "smdk6410-v1.6", "path": "daydaygit/smdk6410-v1.6/6467cb3fefd2e358bc7eb0d1e4f6d0f1a31a8e41b9f4590a41d2c28e8b2c82bf", "path_in_repo": "daydaygit/smdk6410-v1.6/rootfs/yaffs2/yaffs2-20110815/direct/tests/yaffs_yaffs2.o", "objdump": "0000000000000662 <yaffs2_rd_checkpt_validity_marker>:\n     662:\t55                   \tpush   %rbp\n     663:\t48 89 e5             \tmov    %rsp,%rbp\n     666:\t48 83 ec 30          \tsub    $0x30,%rsp\n     66a:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     66e:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n     671:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n     675:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     679:\tba 10 00 00 00       \tmov    $0x10,%edx\n     67e:\t48 89 ce             \tmov    %rcx,%rsi\n     681:\t48 89 c7             \tmov    %rax,%rdi\n     684:\te8 00 00 00 00       \tcallq  689 <yaffs2_rd_checkpt_validity_marker+0x27>\n     689:\t83 f8 10             \tcmp    $0x10,%eax\n     68c:\t0f 94 c0             \tsete   %al\n     68f:\t0f b6 c0             \tmovzbl %al,%eax\n     692:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     695:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     699:\t74 42                \tje     6dd <yaffs2_rd_checkpt_validity_marker+0x7b>\n     69b:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n     69e:\t83 f8 10             \tcmp    $0x10,%eax\n     6a1:\t75 32                \tjne    6d5 <yaffs2_rd_checkpt_validity_marker+0x73>\n     6a3:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     6a6:\t3d 53 ff 41 59       \tcmp    $0x5941ff53,%eax\n     6ab:\t75 28                \tjne    6d5 <yaffs2_rd_checkpt_validity_marker+0x73>\n     6ad:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     6b0:\t83 f8 04             \tcmp    $0x4,%eax\n     6b3:\t75 20                \tjne    6d5 <yaffs2_rd_checkpt_validity_marker+0x73>\n     6b5:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     6b8:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n     6bc:\t74 07                \tje     6c5 <yaffs2_rd_checkpt_validity_marker+0x63>\n     6be:\tba 01 00 00 00       \tmov    $0x1,%edx\n     6c3:\teb 05                \tjmp    6ca <yaffs2_rd_checkpt_validity_marker+0x68>\n     6c5:\tba 00 00 00 00       \tmov    $0x0,%edx\n     6ca:\t39 c2                \tcmp    %eax,%edx\n     6cc:\t75 07                \tjne    6d5 <yaffs2_rd_checkpt_validity_marker+0x73>\n     6ce:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     6d3:\teb 05                \tjmp    6da <yaffs2_rd_checkpt_validity_marker+0x78>\n     6d5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6da:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     6dd:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     6e1:\t0f 95 c0             \tsetne  %al\n     6e4:\t0f b6 c0             \tmovzbl %al,%eax\n     6e7:\tc9                   \tleaveq \n     6e8:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall yaffs2_rd_checkpt_validity_marker(__int64 a1, int a2) {\n  int v2;\n  _BOOL4 v3;\n  int <span class=\"supfact\">v5</span>[Number];\n  _BOOL4 <span class=\"supfact\">v6</span>;\n  v2 = yaffs2_checkpt_rd(a1, <span class=\"supfact\">v5</span>, Number L);\n  <span class=\"supfact\">v6</span> = v2 == Number;\n  if (v2 == Number) {\n    v3 = <span class=\"supfact\">v5</span>[Number] == Number &&\n         <span class=\"supfact\">v5</span>[Number] == Number &&\n         <span class=\"supfact\">v5</span>[Number] == Number &&\n         (a2 != Number) == <span class=\"supfact\">v5</span>[Number];\n    <span class=\"supfact\">v6</span> = v3;\n  }\n  return <span class=\"supfact\">v6</span>;\n}", "code_t": "int __cdecl yaffs2_rd_checkpt_validity_marker(yaffs_dev *dev, int head) {\n  int v2;\n  int v3;\n  yaffs_checkpt_validity <span class=\"supfact\">cp</span>;\n  int <span class=\"supfact\">ok</span>;\n  v2 = yaffs2_checkpt_rd(dev, &<span class=\"supfact\">cp</span>, Number L);\n  <span class=\"supfact\">ok</span> = v2 == Number;\n  if (v2 == Number) {\n    v3 = <span class=\"supfact\">cp</span>.struct_type == Number &&\n         <span class=\"supfact\">cp</span>.magic == Number &&\n         <span class=\"supfact\">cp</span>.version == Number &&\n         (head != Number) == <span class=\"supfact\">cp</span>.head;\n    <span class=\"supfact\">ok</span> = v3;\n  }\n  return <span class=\"supfact\">ok</span> != Number;\n}", "var": [{"name": "v5", "type": "struct yaffs_checkpt_validity { int struct_type; u32 magic; u32 version; u32 head; }", "ref_name": "cp", "ref_type": "struct yaffs_checkpt_validity { int struct_type; u32 magic; u32 version; u32 head; }"}], "body_in_train": true}, {"repo_owner": "caioketo", "repo_name": "journeymanmod", "path": "caioketo/journeymanmod/29e7125c5acd1c8bfe36c881bc1969c85543d7e9020c2303712d6dccca7ceb8e", "path_in_repo": "caioketo/journeymanmod/4.1.2/tools/perf/util/trace-event-info.o", "objdump": "0000000000000d1e <read_event_files>:\n     d1e:\t55                   \tpush   %rbp\n     d1f:\t48 89 e5             \tmov    %rsp,%rbp\n     d22:\t53                   \tpush   %rbx\n     d23:\t48 81 ec e8 00 00 00 \tsub    $0xe8,%rsp\n     d2a:\t48 89 bd 18 ff ff ff \tmov    %rdi,-0xe8(%rbp)\n     d31:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     d38:\t00 00 \n     d3a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     d3e:\t31 c0                \txor    %eax,%eax\n     d40:\tc7 85 28 ff ff ff 00 \tmovl   $0x0,-0xd8(%rbp)\n     d47:\t00 00 00 \n     d4a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     d4f:\te8 13 f5 ff ff       \tcallq  267 <get_tracing_file>\n     d54:\t48 89 85 30 ff ff ff \tmov    %rax,-0xd0(%rbp)\n     d5b:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     d62:\t48 89 c7             \tmov    %rax,%rdi\n     d65:\te8 00 00 00 00       \tcallq  d6a <read_event_files+0x4c>\n     d6a:\t48 89 85 38 ff ff ff \tmov    %rax,-0xc8(%rbp)\n     d71:\t48 83 bd 38 ff ff ff \tcmpq   $0x0,-0xc8(%rbp)\n     d78:\t00 \n     d79:\t0f 85 ba 00 00 00    \tjne    e39 <read_event_files+0x11b>\n     d7f:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     d86:\t48 89 c6             \tmov    %rax,%rsi\n     d89:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     d8e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d93:\te8 68 f2 ff ff       \tcallq  0 <die>\n     d98:\te9 9c 00 00 00       \tjmpq   e39 <read_event_files+0x11b>\n     d9d:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     da4:\t0f b6 40 12          \tmovzbl 0x12(%rax),%eax\n     da8:\t3c 04                \tcmp    $0x4,%al\n     daa:\t0f 85 89 00 00 00    \tjne    e39 <read_event_files+0x11b>\n     db0:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     db7:\t48 83 c0 13          \tadd    $0x13,%rax\n     dbb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     dc0:\t48 89 c7             \tmov    %rax,%rdi\n     dc3:\te8 00 00 00 00       \tcallq  dc8 <read_event_files+0xaa>\n     dc8:\t85 c0                \ttest   %eax,%eax\n     dca:\t74 6d                \tje     e39 <read_event_files+0x11b>\n     dcc:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     dd3:\t48 83 c0 13          \tadd    $0x13,%rax\n     dd7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     ddc:\t48 89 c7             \tmov    %rax,%rdi\n     ddf:\te8 00 00 00 00       \tcallq  de4 <read_event_files+0xc6>\n     de4:\t85 c0                \ttest   %eax,%eax\n     de6:\t74 51                \tje     e39 <read_event_files+0x11b>\n     de8:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     def:\t48 83 c0 13          \tadd    $0x13,%rax\n     df3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     df8:\t48 89 c7             \tmov    %rax,%rdi\n     dfb:\te8 00 00 00 00       \tcallq  e00 <read_event_files+0xe2>\n     e00:\t85 c0                \ttest   %eax,%eax\n     e02:\t74 35                \tje     e39 <read_event_files+0x11b>\n     e04:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     e0b:\t48 8d 50 13          \tlea    0x13(%rax),%rdx\n     e0f:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     e16:\t48 89 c6             \tmov    %rax,%rsi\n     e19:\t48 89 d7             \tmov    %rdx,%rdi\n     e1c:\te8 8d fe ff ff       \tcallq  cae <system_in_tp_list>\n     e21:\t83 f0 01             \txor    $0x1,%eax\n     e24:\t84 c0                \ttest   %al,%al\n     e26:\t74 02                \tje     e2a <read_event_files+0x10c>\n     e28:\teb 0f                \tjmp    e39 <read_event_files+0x11b>\n     e2a:\t8b 85 28 ff ff ff    \tmov    -0xd8(%rbp),%eax\n     e30:\t83 c0 01             \tadd    $0x1,%eax\n     e33:\t89 85 28 ff ff ff    \tmov    %eax,-0xd8(%rbp)\n     e39:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     e40:\t48 89 c7             \tmov    %rax,%rdi\n     e43:\te8 00 00 00 00       \tcallq  e48 <read_event_files+0x12a>\n     e48:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n     e4f:\t48 83 bd 40 ff ff ff \tcmpq   $0x0,-0xc0(%rbp)\n     e56:\t00 \n     e57:\t0f 85 40 ff ff ff    \tjne    d9d <read_event_files+0x7f>\n     e5d:\t48 8d 85 28 ff ff ff \tlea    -0xd8(%rbp),%rax\n     e64:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     e69:\t48 89 c7             \tmov    %rax,%rdi\n     e6c:\te8 ce f4 ff ff       \tcallq  33f <write_or_die>\n     e71:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     e78:\t48 89 c7             \tmov    %rax,%rdi\n     e7b:\te8 00 00 00 00       \tcallq  e80 <read_event_files+0x162>\n     e80:\te9 7b 01 00 00       \tjmpq   1000 <read_event_files+0x2e2>\n     e85:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     e8c:\t0f b6 40 12          \tmovzbl 0x12(%rax),%eax\n     e90:\t3c 04                \tcmp    $0x4,%al\n     e92:\t0f 85 68 01 00 00    \tjne    1000 <read_event_files+0x2e2>\n     e98:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     e9f:\t48 83 c0 13          \tadd    $0x13,%rax\n     ea3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     ea8:\t48 89 c7             \tmov    %rax,%rdi\n     eab:\te8 00 00 00 00       \tcallq  eb0 <read_event_files+0x192>\n     eb0:\t85 c0                \ttest   %eax,%eax\n     eb2:\t0f 84 48 01 00 00    \tje     1000 <read_event_files+0x2e2>\n     eb8:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     ebf:\t48 83 c0 13          \tadd    $0x13,%rax\n     ec3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     ec8:\t48 89 c7             \tmov    %rax,%rdi\n     ecb:\te8 00 00 00 00       \tcallq  ed0 <read_event_files+0x1b2>\n     ed0:\t85 c0                \ttest   %eax,%eax\n     ed2:\t0f 84 28 01 00 00    \tje     1000 <read_event_files+0x2e2>\n     ed8:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     edf:\t48 83 c0 13          \tadd    $0x13,%rax\n     ee3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     ee8:\t48 89 c7             \tmov    %rax,%rdi\n     eeb:\te8 00 00 00 00       \tcallq  ef0 <read_event_files+0x1d2>\n     ef0:\t85 c0                \ttest   %eax,%eax\n     ef2:\t0f 84 08 01 00 00    \tje     1000 <read_event_files+0x2e2>\n     ef8:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     eff:\t48 8d 50 13          \tlea    0x13(%rax),%rdx\n     f03:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     f0a:\t48 89 c6             \tmov    %rax,%rsi\n     f0d:\t48 89 d7             \tmov    %rdx,%rdi\n     f10:\te8 99 fd ff ff       \tcallq  cae <system_in_tp_list>\n     f15:\t83 f0 01             \txor    $0x1,%eax\n     f18:\t84 c0                \ttest   %al,%al\n     f1a:\t74 05                \tje     f21 <read_event_files+0x203>\n     f1c:\te9 df 00 00 00       \tjmpq   1000 <read_event_files+0x2e2>\n     f21:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     f28:\t48 89 c7             \tmov    %rax,%rdi\n     f2b:\te8 00 00 00 00       \tcallq  f30 <read_event_files+0x212>\n     f30:\t89 c3                \tmov    %eax,%ebx\n     f32:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     f39:\t48 83 c0 13          \tadd    $0x13,%rax\n     f3d:\t48 89 c7             \tmov    %rax,%rdi\n     f40:\te8 00 00 00 00       \tcallq  f45 <read_event_files+0x227>\n     f45:\t01 d8                \tadd    %ebx,%eax\n     f47:\t83 c0 02             \tadd    $0x2,%eax\n     f4a:\t89 c7                \tmov    %eax,%edi\n     f4c:\te8 00 00 00 00       \tcallq  f51 <read_event_files+0x233>\n     f51:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n     f58:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     f5f:\t48 8d 48 13          \tlea    0x13(%rax),%rcx\n     f63:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n     f6a:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     f71:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f76:\t48 89 c7             \tmov    %rax,%rdi\n     f79:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f7e:\te8 00 00 00 00       \tcallq  f83 <read_event_files+0x265>\n     f83:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n     f8a:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     f91:\t48 89 d6             \tmov    %rdx,%rsi\n     f94:\t48 89 c7             \tmov    %rax,%rdi\n     f97:\te8 00 00 00 00       \tcallq  f9c <read_event_files+0x27e>\n     f9c:\t89 85 2c ff ff ff    \tmov    %eax,-0xd4(%rbp)\n     fa2:\t83 bd 2c ff ff ff 00 \tcmpl   $0x0,-0xd4(%rbp)\n     fa9:\t78 46                \tjs     ff1 <read_event_files+0x2d3>\n     fab:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     fb2:\t48 83 c0 13          \tadd    $0x13,%rax\n     fb6:\t48 89 c7             \tmov    %rax,%rdi\n     fb9:\te8 00 00 00 00       \tcallq  fbe <read_event_files+0x2a0>\n     fbe:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     fc2:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     fc9:\t48 83 c0 13          \tadd    $0x13,%rax\n     fcd:\t48 89 d6             \tmov    %rdx,%rsi\n     fd0:\t48 89 c7             \tmov    %rax,%rdi\n     fd3:\te8 67 f3 ff ff       \tcallq  33f <write_or_die>\n     fd8:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n     fdf:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     fe6:\t48 89 d6             \tmov    %rdx,%rsi\n     fe9:\t48 89 c7             \tmov    %rax,%rdi\n     fec:\te8 a7 f8 ff ff       \tcallq  898 <copy_event_system>\n     ff1:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     ff8:\t48 89 c7             \tmov    %rax,%rdi\n     ffb:\te8 00 00 00 00       \tcallq  1000 <read_event_files+0x2e2>\n    1000:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    1007:\t48 89 c7             \tmov    %rax,%rdi\n    100a:\te8 00 00 00 00       \tcallq  100f <read_event_files+0x2f1>\n    100f:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n    1016:\t48 83 bd 40 ff ff ff \tcmpq   $0x0,-0xc0(%rbp)\n    101d:\t00 \n    101e:\t0f 85 61 fe ff ff    \tjne    e85 <read_event_files+0x167>\n    1024:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n    102b:\t48 89 c7             \tmov    %rax,%rdi\n    102e:\te8 00 00 00 00       \tcallq  1033 <read_event_files+0x315>\n    1033:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n    103a:\t48 89 c7             \tmov    %rax,%rdi\n    103d:\te8 bf f2 ff ff       \tcallq  301 <put_tracing_file>\n    1042:\t90                   \tnop\n    1043:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1047:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    104e:\t00 00 \n    1050:\t74 05                \tje     1057 <read_event_files+0x339>\n    1052:\te8 00 00 00 00       \tcallq  1057 <read_event_files+0x339>\n    1057:\t48 81 c4 e8 00 00 00 \tadd    $0xe8,%rsp\n    105e:\t5b                   \tpop    %rbx\n    105f:\t5d                   \tpop    %rbp\n    1060:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall read_event_files(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  int v6;\n  int v7;\n  size_t v8;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  char *<span class=\"supfact\">name</span>;\n  DIR *<span class=\"supfact\">dirp</span>;\n  struct dirent64 *<span class=\"supfact\">v14</span>;\n  char *<span class=\"supfact\">s</span>;\n  struct stat64 <span class=\"supfact\">v16</span>;\n  unsigned __int64 <span class=\"supfact\">v17</span>;\n  <span class=\"supfact\">v17</span> = __readfsqword(Number);\n  <span class=\"supfact\">v10</span> = Number;\n  <span class=\"supfact\">name</span> = get_tracing_file(String, a2);\n  <span class=\"supfact\">dirp</span> = opendir(<span class=\"supfact\">name</span>);\n  if (!<span class=\"supfact\">dirp</span>)\n    die(String, (__int64)<span class=\"supfact\">name</span>, v2, v3, v4, v5);\n  while (Number) {\n    <span class=\"supfact\">v14</span> = readdir64(<span class=\"supfact\">dirp</span>);\n    if (!<span class=\"supfact\">v14</span>)\n      break;\n    if (<span class=\"supfact\">v14</span>->d_type == Number &&\n        strcmp(<span class=\"supfact\">v14</span>->d_name, String) &&\n        strcmp(<span class=\"supfact\">v14</span>->d_name, String) &&\n        strcmp(<span class=\"supfact\">v14</span>->d_name, String) &&\n        (unsigned __int8)system_in_tp_list(<span class=\"supfact\">v14</span>->d_name, a1) ==\n            Number) {\n      ++<span class=\"supfact\">v10</span>;\n    }\n  }\n  write_or_die(&<span class=\"supfact\">v10</span>, Number);\n  rewinddir(<span class=\"supfact\">dirp</span>);\n  while (Number) {\n    <span class=\"supfact\">v14</span> = readdir64(<span class=\"supfact\">dirp</span>);\n    if (!<span class=\"supfact\">v14</span>)\n      break;\n    if (<span class=\"supfact\">v14</span>->d_type == Number &&\n        strcmp(<span class=\"supfact\">v14</span>->d_name, String) &&\n        strcmp(<span class=\"supfact\">v14</span>->d_name, String) &&\n        strcmp(<span class=\"supfact\">v14</span>->d_name, String) &&\n        (unsigned __int8)system_in_tp_list(<span class=\"supfact\">v14</span>->d_name, a1) ==\n            Number) {\n      v6 = strlen(<span class=\"supfact\">name</span>);\n      v7 = strlen(<span class=\"supfact\">v14</span>->d_name);\n      <span class=\"supfact\">s</span> = (char *)malloc_or_die(v6 + v7 + Number, a1);\n      sprintf(<span class=\"supfact\">s</span>, String, <span class=\"supfact\">name</span>,\n              <span class=\"supfact\">v14</span>->d_name);\n      <span class=\"supfact\">v11</span> = stat64(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v16</span>);\n      if (<span class=\"supfact\">v11</span> >= Number) {\n        v8 = strlen(<span class=\"supfact\">v14</span>->d_name);\n        write_or_die(<span class=\"supfact\">v14</span>->d_name, v8 + Number);\n        copy_event_system(<span class=\"supfact\">s</span>, a1);\n      }\n      free(<span class=\"supfact\">s</span>);\n    }\n  }\n  closedir(<span class=\"supfact\">dirp</span>);\n  put_tracing_file(<span class=\"supfact\">name</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v17</span>;\n}", "code_t": "void __cdecl read_event_files(tracepoint_path *tps) {\n  int v1;\n  int v2;\n  size_t v3;\n  int <span class=\"supfact\">count</span>;\n  int <span class=\"supfact\">ret</span>;\n  char *<span class=\"supfact\">path</span>;\n  DIR *<span class=\"supfact\">dir</span>;\n  dirent *<span class=\"supfact\">dent</span>;\n  char *<span class=\"supfact\">sys</span>;\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = __readfsqword(Number);\n  <span class=\"supfact\">count</span> = Number;\n  <span class=\"supfact\">path</span> = get_tracing_file(String);\n  <span class=\"supfact\">dir</span> = opendir(<span class=\"supfact\">path</span>);\n  if (!<span class=\"supfact\">dir</span>)\n    die(String, <span class=\"supfact\">path</span>);\n  while (Number) {\n    <span class=\"supfact\">dent</span> = (dirent *)readdir64(<span class=\"supfact\">dir</span>);\n    if (!<span class=\"supfact\">dent</span>)\n      break;\n    if (<span class=\"supfact\">dent</span>->d_type == Number &&\n        strcmp(<span class=\"supfact\">dent</span>->d_name, String) &&\n        strcmp(<span class=\"supfact\">dent</span>->d_name, String) &&\n        strcmp(<span class=\"supfact\">dent</span>->d_name, String) &&\n        system_in_tp_list(<span class=\"supfact\">dent</span>->d_name, tps)) {\n      ++<span class=\"supfact\">count</span>;\n    }\n  }\n  write_or_die(&<span class=\"supfact\">count</span>, Number);\n  rewinddir(<span class=\"supfact\">dir</span>);\n  while (Number) {\n    <span class=\"supfact\">dent</span> = (dirent *)readdir64(<span class=\"supfact\">dir</span>);\n    if (!<span class=\"supfact\">dent</span>)\n      break;\n    if (<span class=\"supfact\">dent</span>->d_type == Number &&\n        strcmp(<span class=\"supfact\">dent</span>->d_name, String) &&\n        strcmp(<span class=\"supfact\">dent</span>->d_name, String) &&\n        strcmp(<span class=\"supfact\">dent</span>->d_name, String) &&\n        system_in_tp_list(<span class=\"supfact\">dent</span>->d_name, tps)) {\n      v1 = strlen(<span class=\"supfact\">path</span>);\n      v2 = strlen(<span class=\"supfact\">dent</span>->d_name);\n      <span class=\"supfact\">sys</span> = (char *)malloc_or_die(v1 + v2 + Number);\n      sprintf(<span class=\"supfact\">sys</span>, String, <span class=\"supfact\">path</span>,\n              <span class=\"supfact\">dent</span>->d_name);\n      <span class=\"supfact\">ret</span> =\n          stat64(<span class=\"supfact\">sys</span>, (struct stat64 *)&<span class=\"supfact\">st</span>);\n      if (<span class=\"supfact\">ret</span> >= Number) {\n        v3 = strlen(<span class=\"supfact\">dent</span>->d_name);\n        write_or_die(<span class=\"supfact\">dent</span>->d_name, v3 + Number);\n        copy_event_system(<span class=\"supfact\">sys</span>, tps);\n      }\n      free(<span class=\"supfact\">sys</span>);\n    }\n  }\n  closedir(<span class=\"supfact\">dir</span>);\n  put_tracing_file(<span class=\"supfact\">path</span>);\n}", "var": [{"name": "v16", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "0000000000000ade <_nocheck__trace_megasas_initq_mapped>:\n     ade:\t55                   \tpush   %rbp\n     adf:\t48 89 e5             \tmov    %rsp,%rbp\n     ae2:\t41 54                \tpush   %r12\n     ae4:\t53                   \tpush   %rbx\n     ae5:\t48 83 ec 30          \tsub    $0x30,%rsp\n     ae9:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     aed:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     af4:\t00 00 \n     af6:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     afa:\t31 c0                \txor    %eax,%eax\n     afc:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # b02 <_nocheck__trace_megasas_initq_mapped+0x24>\n     b02:\t85 c0                \ttest   %eax,%eax\n     b04:\t0f 95 c0             \tsetne  %al\n     b07:\t0f b6 c0             \tmovzbl %al,%eax\n     b0a:\t48 85 c0             \ttest   %rax,%rax\n     b0d:\t74 5e                \tje     b6d <_nocheck__trace_megasas_initq_mapped+0x8f>\n     b0f:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # b16 <_nocheck__trace_megasas_initq_mapped+0x38>\n     b16:\t66 85 c0             \ttest   %ax,%ax\n     b19:\t74 52                \tje     b6d <_nocheck__trace_megasas_initq_mapped+0x8f>\n     b1b:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     b20:\te8 08 fd ff ff       \tcallq  82d <qemu_loglevel_mask>\n     b25:\t84 c0                \ttest   %al,%al\n     b27:\t74 44                \tje     b6d <_nocheck__trace_megasas_initq_mapped+0x8f>\n     b29:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     b2d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b32:\t48 89 c7             \tmov    %rax,%rdi\n     b35:\te8 00 00 00 00       \tcallq  b3a <_nocheck__trace_megasas_initq_mapped+0x5c>\n     b3a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b3e:\t49 89 c4             \tmov    %rax,%r12\n     b41:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b45:\t48 89 c3             \tmov    %rax,%rbx\n     b48:\te8 00 00 00 00       \tcallq  b4d <_nocheck__trace_megasas_initq_mapped+0x6f>\n     b4d:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     b51:\t49 89 d0             \tmov    %rdx,%r8\n     b54:\t4c 89 e1             \tmov    %r12,%rcx\n     b57:\t48 89 da             \tmov    %rbx,%rdx\n     b5a:\t89 c6                \tmov    %eax,%esi\n     b5c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # b63 <_nocheck__trace_megasas_initq_mapped+0x85>\n     b63:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b68:\te8 00 00 00 00       \tcallq  b6d <_nocheck__trace_megasas_initq_mapped+0x8f>\n     b6d:\t90                   \tnop\n     b6e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b72:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     b79:\t00 00 \n     b7b:\t74 05                \tje     b82 <_nocheck__trace_megasas_initq_mapped+0xa4>\n     b7d:\te8 00 00 00 00       \tcallq  b82 <_nocheck__trace_megasas_initq_mapped+0xa4>\n     b82:\t48 83 c4 30          \tadd    $0x30,%rsp\n     b86:\t5b                   \tpop    %rbx\n     b87:\t41 5c                \tpop    %r12\n     b89:\t5d                   \tpop    %rbp\n     b8a:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_initq_mapped(__int64 a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_INITQ_MAPPED_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl nocheck__trace_megasas_initq_mapped(uint64_t pa) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_INITQ_MAPPED_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, pa);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "vSlipenchuk", "repo_name": "linux-aufs", "path": "vSlipenchuk/linux-aufs/43334414e4644a33869969c01e1d32cf44b8a8074fc860c8edfd2afe63660434", "path_in_repo": "vSlipenchuk/linux-aufs/tools/perf/util/abspath.o", "objdump": "0000000000000040 <get_pwd_cwd>:\n  40:\t55                   \tpush   %rbp\n  41:\t48 89 e5             \tmov    %rsp,%rbp\n  44:\t48 81 ec 40 01 00 00 \tsub    $0x140,%rsp\n  4b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  52:\t00 00 \n  54:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  58:\t31 c0                \txor    %eax,%eax\n  5a:\tbe 00 10 00 00       \tmov    $0x1000,%esi\n  5f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  64:\te8 00 00 00 00       \tcallq  69 <get_pwd_cwd+0x29>\n  69:\t48 85 c0             \ttest   %rax,%rax\n  6c:\t75 0a                \tjne    78 <get_pwd_cwd+0x38>\n  6e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  73:\te9 ac 00 00 00       \tjmpq   124 <get_pwd_cwd+0xe4>\n  78:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  7d:\te8 00 00 00 00       \tcallq  82 <get_pwd_cwd+0x42>\n  82:\t48 89 85 c8 fe ff ff \tmov    %rax,-0x138(%rbp)\n  89:\t48 83 bd c8 fe ff ff \tcmpq   $0x0,-0x138(%rbp)\n  90:\t00 \n  91:\t0f 84 88 00 00 00    \tje     11f <get_pwd_cwd+0xdf>\n  97:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n  9e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  a3:\t48 89 c7             \tmov    %rax,%rdi\n  a6:\te8 00 00 00 00       \tcallq  ab <get_pwd_cwd+0x6b>\n  ab:\t85 c0                \ttest   %eax,%eax\n  ad:\t74 70                \tje     11f <get_pwd_cwd+0xdf>\n  af:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n  b6:\t48 89 c6             \tmov    %rax,%rsi\n  b9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  be:\te8 00 00 00 00       \tcallq  c3 <get_pwd_cwd+0x83>\n  c3:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  ca:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n  d1:\t48 89 d6             \tmov    %rdx,%rsi\n  d4:\t48 89 c7             \tmov    %rax,%rdi\n  d7:\te8 00 00 00 00       \tcallq  dc <get_pwd_cwd+0x9c>\n  dc:\t85 c0                \ttest   %eax,%eax\n  de:\t75 3f                \tjne    11f <get_pwd_cwd+0xdf>\n  e0:\t48 8b 95 60 ff ff ff \tmov    -0xa0(%rbp),%rdx\n  e7:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n  ee:\t48 39 c2             \tcmp    %rax,%rdx\n  f1:\t75 2c                \tjne    11f <get_pwd_cwd+0xdf>\n  f3:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n  fa:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n 101:\t48 39 c2             \tcmp    %rax,%rdx\n 104:\t75 19                \tjne    11f <get_pwd_cwd+0xdf>\n 106:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 10d:\tba 00 10 00 00       \tmov    $0x1000,%edx\n 112:\t48 89 c6             \tmov    %rax,%rsi\n 115:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 11a:\te8 00 00 00 00       \tcallq  11f <get_pwd_cwd+0xdf>\n 11f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 124:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 128:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 12f:\t00 00 \n 131:\t74 05                \tje     138 <get_pwd_cwd+0xf8>\n 133:\te8 00 00 00 00       \tcallq  138 <get_pwd_cwd+0xf8>\n 138:\tc9                   \tleaveq \n 139:\tc3                   \tretq   ", "code_s": "char *get_pwd_cwd() {\n  const char *<span class=\"supfact\">s1</span>;\n  struct stat64 <span class=\"supfact\">v2</span>;\n  struct stat64 <span class=\"supfact\">v3</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (!getcwd(cwd_6743, Number))\n    return Number L;\n  <span class=\"supfact\">s1</span> = getenv(String);\n  if (<span class=\"supfact\">s1</span>) {\n    if (strcmp(<span class=\"supfact\">s1</span>, cwd_6743)) {\n      stat64(cwd_6743, &<span class=\"supfact\">v2</span>);\n      if (!stat64(<span class=\"supfact\">s1</span>, &<span class=\"supfact\">v3</span>) &&\n          <span class=\"supfact\">v3</span>.st_dev == <span class=\"supfact\">v2</span>.st_dev &&\n          <span class=\"supfact\">v3</span>.st_ino == <span class=\"supfact\">v2</span>.st_ino)\n        strlcpy(cwd_6743, <span class=\"supfact\">s1</span>, Number L);\n    }\n  }\n  return cwd_6743;\n}", "code_t": "const char *__cdecl get_pwd_cwd() {\n  const char *<span class=\"supfact\">pwd</span>;\n  stat <span class=\"supfact\">cwd_stat</span>;\n  stat <span class=\"supfact\">pwd_stat</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (!getcwd(cwd_6743, Number))\n    return Number L;\n  <span class=\"supfact\">pwd</span> = getenv(String);\n  if (<span class=\"supfact\">pwd</span>) {\n    if (strcmp(<span class=\"supfact\">pwd</span>, cwd_6743)) {\n      stat64(cwd_6743, (struct stat64 *)&<span class=\"supfact\">cwd_stat</span>);\n      if (!stat64(<span class=\"supfact\">pwd</span>,\n                  (struct stat64 *)&<span class=\"supfact\">pwd_stat</span>) &&\n          <span class=\"supfact\">pwd_stat</span>.st_dev == <span class=\"supfact\">cwd_stat</span>.st_dev &&\n          <span class=\"supfact\">pwd_stat</span>.st_ino == <span class=\"supfact\">cwd_stat</span>.st_ino) {\n        strlcpy(cwd_6743, <span class=\"supfact\">pwd</span>, Number L);\n      }\n    }\n  }\n  return cwd_6743;\n}", "var": [{"name": "v3", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "pwd_stat", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}, {"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "cwd_stat", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "mDibyo", "repo_name": "py-dlib", "path": "mDibyo/py-dlib/56f6e076c71f8a305193935cefe2644ae75ac6ddd049cf08be7bbfa5a954a64b", "path_in_repo": "mDibyo/py-dlib/dlib/test/type_safe_union.o", "objdump": "0000000000000000 <_ZN4dlib11deserializeERsRSi>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 60          \tsub    $0x60,%rsp\n   b:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   f:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n  13:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n  17:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  1b:\t48 89 d6             \tmov    %rdx,%rsi\n  1e:\t48 89 c7             \tmov    %rax,%rdi\n  21:\te8 00 00 00 00       \tcallq  26 <_ZN4dlib11deserializeERsRSi+0x26>\n  26:\t84 c0                \ttest   %al,%al\n  28:\t0f 84 cc 00 00 00    \tje     fa <_ZN4dlib11deserializeERsRSi+0xfa>\n  2e:\tbf 30 00 00 00       \tmov    $0x30,%edi\n  33:\te8 00 00 00 00       \tcallq  38 <_ZN4dlib11deserializeERsRSi+0x38>\n  38:\t48 89 c3             \tmov    %rax,%rbx\n  3b:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  3f:\t48 89 c7             \tmov    %rax,%rdi\n  42:\te8 00 00 00 00       \tcallq  47 <_ZN4dlib11deserializeERsRSi+0x47>\n  47:\t48 8d 55 ef          \tlea    -0x11(%rbp),%rdx\n  4b:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  54:\t48 89 c7             \tmov    %rax,%rdi\n  57:\te8 00 00 00 00       \tcallq  5c <_ZN4dlib11deserializeERsRSi+0x5c>\n  5c:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  60:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  64:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  69:\t48 89 c7             \tmov    %rax,%rdi\n  6c:\te8 00 00 00 00       \tcallq  71 <_ZN4dlib11deserializeERsRSi+0x71>\n  71:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  75:\t48 89 c6             \tmov    %rax,%rsi\n  78:\t48 89 df             \tmov    %rbx,%rdi\n  7b:\te8 00 00 00 00       \tcallq  80 <_ZN4dlib11deserializeERsRSi+0x80>\n  80:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  84:\t48 89 c7             \tmov    %rax,%rdi\n  87:\te8 00 00 00 00       \tcallq  8c <_ZN4dlib11deserializeERsRSi+0x8c>\n  8c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  90:\t48 89 c7             \tmov    %rax,%rdi\n  93:\te8 00 00 00 00       \tcallq  98 <_ZN4dlib11deserializeERsRSi+0x98>\n  98:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  9c:\t48 89 c7             \tmov    %rax,%rdi\n  9f:\te8 00 00 00 00       \tcallq  a4 <_ZN4dlib11deserializeERsRSi+0xa4>\n  a4:\tba 00 00 00 00       \tmov    $0x0,%edx\n  a9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  ae:\t48 89 df             \tmov    %rbx,%rdi\n  b1:\te8 00 00 00 00       \tcallq  b6 <_ZN4dlib11deserializeERsRSi+0xb6>\n  b6:\t49 89 c4             \tmov    %rax,%r12\n  b9:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  bd:\t48 89 c7             \tmov    %rax,%rdi\n  c0:\te8 00 00 00 00       \tcallq  c5 <_ZN4dlib11deserializeERsRSi+0xc5>\n  c5:\teb 03                \tjmp    ca <_ZN4dlib11deserializeERsRSi+0xca>\n  c7:\t49 89 c4             \tmov    %rax,%r12\n  ca:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  ce:\t48 89 c7             \tmov    %rax,%rdi\n  d1:\te8 00 00 00 00       \tcallq  d6 <_ZN4dlib11deserializeERsRSi+0xd6>\n  d6:\teb 03                \tjmp    db <_ZN4dlib11deserializeERsRSi+0xdb>\n  d8:\t49 89 c4             \tmov    %rax,%r12\n  db:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  df:\t48 89 c7             \tmov    %rax,%rdi\n  e2:\te8 00 00 00 00       \tcallq  e7 <_ZN4dlib11deserializeERsRSi+0xe7>\n  e7:\t48 89 df             \tmov    %rbx,%rdi\n  ea:\te8 00 00 00 00       \tcallq  ef <_ZN4dlib11deserializeERsRSi+0xef>\n  ef:\t4c 89 e0             \tmov    %r12,%rax\n  f2:\t48 89 c7             \tmov    %rax,%rdi\n  f5:\te8 00 00 00 00       \tcallq  fa <_ZN4dlib11deserializeERsRSi+0xfa>\n  fa:\t90                   \tnop\n  fb:\t48 83 c4 60          \tadd    $0x60,%rsp\n  ff:\t5b                   \tpop    %rbx\n 100:\t41 5c                \tpop    %r12\n 102:\t5d                   \tpop    %rbp\n 103:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dlib deserialize(dlib *this, __int16 *a2, std istream *a3) {\n  __int64 result;\n  std exception *v4;\n  char <span class=\"supfact\">v5</span>[Number];\n  char <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  result = dlib ser_helper unpack_int<short>(this, a2);\n  if ((_BYTE)result) {\n    v4 = (std exception *)_cxa_allocate_exception(Number);\n    std allocator<char> allocator(<span class=\"supfact\">v7</span>);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(<span class=\"supfact\">v6</span>, String, <span class=\"supfact\">v7</span>);\n    std operator+<char>(<span class=\"supfact\">v5</span>, String, <span class=\"supfact\">v6</span>);\n    dlib serialization_error serialization_error(v4,\n                                                 (__int64)<span class=\"supfact\">v5</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v5</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v6</span>);\n    std allocator<char> ~allocator(<span class=\"supfact\">v7</span>); _cxa_throw ( v4 , ( struct type_info * ) & ` typeinfo for ' dlib serialization_error , dlib serialization_error ~ serialization_error ) ; } return result ; }", "code_t": "void __cdecl dlib deserialize(__int16 *item, std istream *in) {\n  dlib serialization_error *v2;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">e</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">__rhs</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  if (dlib ser_helper unpack_int<short>(item, in)) {\n    v2 = (dlib serialization_error *)_cxa_allocate_exception(Number);\n    std allocator<char> allocator(<span class=\"supfact\">v5</span>);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(&<span class=\"supfact\">__rhs</span>, String, <span class=\"supfact\">v5</span>);\n    std operator+<char>(&<span class=\"supfact\">e</span>, String, &<span class=\"supfact\">__rhs</span>);\n    dlib serialization_error serialization_error(v2, &<span class=\"supfact\">e</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">e</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">__rhs</span>);\n    std allocator<char> ~allocator(<span class=\"supfact\">v5</span>); _cxa_throw ( v2 , ( struct type_info * ) & ` typeinfo for ' dlib serialization_error , ( void ( __fastcall * ) ( void * ) ) dlib serialization_error ~ serialization_error ) ; } }", "var": [{"name": "v6", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "__rhs", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v5", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "e", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": true}, {"repo_owner": "silverweed", "repo_name": "pkpterm", "path": "silverweed/pkpterm/fb808120c89a5bcb64b6cf3f1d262a674afae7f6a790587e2067e61e9babf589", "path_in_repo": "silverweed/pkpterm/src/utils.o", "objdump": "0000000000000000 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 38          \tsub    $0x38,%rsp\n   9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  11:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  15:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  19:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  1d:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  21:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  25:\t48 89 d6             \tmov    %rdx,%rsi\n  28:\t48 89 c7             \tmov    %rax,%rdi\n  2b:\te8 00 00 00 00       \tcallq  30 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x30>\n  30:\t84 c0                \ttest   %al,%al\n  32:\t74 39                \tje     6d <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x6d>\n  34:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  38:\t48 89 c7             \tmov    %rax,%rdi\n  3b:\te8 00 00 00 00       \tcallq  40 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x40>\n  40:\t48 89 c3             \tmov    %rax,%rbx\n  43:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  47:\t48 89 c7             \tmov    %rax,%rdi\n  4a:\te8 00 00 00 00       \tcallq  4f <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x4f>\n  4f:\t48 89 de             \tmov    %rbx,%rsi\n  52:\t48 89 c7             \tmov    %rax,%rdi\n  55:\te8 00 00 00 00       \tcallq  5a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x5a>\n  5a:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  5e:\t48 89 c7             \tmov    %rax,%rdi\n  61:\te8 00 00 00 00       \tcallq  66 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x66>\n  66:\t48 83 45 e8 20       \taddq   $0x20,-0x18(%rbp)\n  6b:\teb b0                \tjmp    1d <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x1d>\n  6d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  71:\teb 33                \tjmp    a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0xa6>\n  73:\t48 89 c7             \tmov    %rax,%rdi\n  76:\te8 00 00 00 00       \tcallq  7b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x7b>\n  7b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  7f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  83:\t48 89 d6             \tmov    %rdx,%rsi\n  86:\t48 89 c7             \tmov    %rax,%rdi\n  89:\te8 00 00 00 00       \tcallq  8e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x8e>\n  8e:\te8 00 00 00 00       \tcallq  93 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x93>\n  93:\t48 89 c3             \tmov    %rax,%rbx\n  96:\te8 00 00 00 00       \tcallq  9b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x9b>\n  9b:\t48 89 d8             \tmov    %rbx,%rax\n  9e:\t48 89 c7             \tmov    %rax,%rdi\n  a1:\te8 00 00 00 00       \tcallq  a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0xa6>\n  a6:\t48 83 c4 38          \tadd    $0x38,%rsp\n  aa:\t5b                   \tpop    %rbx\n  ab:\t5d                   \tpop    %rbp\n  ac:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __uninitialized_copy<false>\n__uninit_copy<std move_iterator<std __cxx11 basic_string<\n                  char, std char_traits<char>, std allocator<char>> *>,\n              std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>> *>(__int64 a1,\n                                                               __int64 a2,\n                                                               __int64 a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v7</span>[Number] = a1;\n  <span class=\"supfact\">v6</span> = a2;\n  <span class=\"supfact\">v8</span> = a3;\n  while ((unsigned __int8)std operator!=\n         <std __cxx11\n              basic_string<char, std char_traits<char>, std allocator<char>> *>(\n             <span class=\"supfact\">v7</span>, &<span class=\"supfact\">v6</span>)) {\n    v3 = std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                                    std allocator<char>> *>\n    operator*(<span class=\"supfact\">v7</span>);\n    v4 = std __addressof<std __cxx11 basic_string<char, std char_traits<char>,\n                                                  std allocator<char>>>(\n        <span class=\"supfact\">v8</span>);\n    std _Construct<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>,\n                   std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>(v4, v3);\n    std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>> *>\n    operator++(<span class=\"supfact\">v7</span>);\n    <span class=\"supfact\">v8</span> += Number L;\n  }\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    *__cdecl std __uninitialized_copy<false>\n    __uninit_copy<std move_iterator<std __cxx11 basic_string<\n                      char, std char_traits<char>, std allocator<char>> *>,\n                  std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>> *>(\n        std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>> *>\n            __first,\n        std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>> *>\n            __last,\n        std __cxx11 basic_string<char, std char_traits<char>,\n                                 std allocator<char>> *__result) {\n  std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *v3;\n  std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *v4;\n  std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *v5;\n  std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>> *>\n      <span class=\"supfact\">__lasta</span>;\n  std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>> *>\n      <span class=\"supfact\">__firsta</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      *<span class=\"supfact\">__cur</span>;\n  <span class=\"supfact\">__firsta</span>._M_current = __first._M_current;\n  <span class=\"supfact\">__lasta</span>._M_current = __last._M_current;\n  <span class=\"supfact\">__cur</span> = __result;\n  while (std operator!=\n         <std __cxx11\n              basic_string<char, std char_traits<char>, std allocator<char>> *>(\n             &<span class=\"supfact\">__firsta</span>, &<span class=\"supfact\">__lasta</span>)) {\n    v3 = std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                                    std allocator<char>> *>\n    operator*(&<span class=\"supfact\">__firsta</span>);\n    v4 = std __addressof<std __cxx11 basic_string<char, std char_traits<char>,\n                                                  std allocator<char>>>(\n        <span class=\"supfact\">__cur</span>);\n    std _Construct<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>,\n                   std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>(v4, v3, v5);\n    std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>> *>\n    operator++(&<span class=\"supfact\">__firsta</span>);\n    ++<span class=\"supfact\">__cur</span>;\n  }\n  return <span class=\"supfact\">__cur</span>;\n}", "var": [{"name": "v7", "type": "struct std::move_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*> { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }", "ref_name": "__firsta", "ref_type": "struct std::move_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*> { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}, {"name": "v6", "type": "struct std::move_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*> { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }", "ref_name": "__lasta", "ref_type": "struct std::move_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*> { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}], "body_in_train": true}, {"repo_owner": "antmicro", "repo_name": "litex-linux-riscv", "path": "antmicro/litex-linux-riscv/2863f7c7c3574f706e37ef81180e22fd583b73094ffc99779131650a6a25933a", "path_in_repo": "antmicro/litex-linux-riscv/tools/power/cpupower/cpupower", "objdump": "0000000000403d41 <sysfs_is_cpu_online>:\n  403d41:\t55                   \tpush   %rbp\n  403d42:\t48 89 e5             \tmov    %rsp,%rbp\n  403d45:\t48 81 ec d0 02 00 00 \tsub    $0x2d0,%rsp\n  403d4c:\t89 bd 3c fd ff ff    \tmov    %edi,-0x2c4(%rbp)\n  403d52:\t8b 95 3c fd ff ff    \tmov    -0x2c4(%rbp),%edx\n  403d58:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n  403d5f:\t89 d1                \tmov    %edx,%ecx\n  403d61:\tba 40 e0 40 00       \tmov    $0x40e040,%edx\n  403d66:\tbe ff 00 00 00       \tmov    $0xff,%esi\n  403d6b:\t48 89 c7             \tmov    %rax,%rdi\n  403d6e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403d73:\te8 98 f4 ff ff       \tcallq  403210 <snprintf@plt>\n  403d78:\t48 8d 95 40 fd ff ff \tlea    -0x2c0(%rbp),%rdx\n  403d7f:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n  403d86:\t48 89 d6             \tmov    %rdx,%rsi\n  403d89:\t48 89 c7             \tmov    %rax,%rdi\n  403d8c:\te8 2f 95 00 00       \tcallq  40d2c0 <__stat>\n  403d91:\t85 c0                \ttest   %eax,%eax\n  403d93:\t74 0a                \tje     403d9f <sysfs_is_cpu_online+0x5e>\n  403d95:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403d9a:\te9 01 01 00 00       \tjmpq   403ea0 <sysfs_is_cpu_online+0x15f>\n  403d9f:\t8b 95 3c fd ff ff    \tmov    -0x2c4(%rbp),%edx\n  403da5:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n  403dac:\t89 d1                \tmov    %edx,%ecx\n  403dae:\tba 60 e0 40 00       \tmov    $0x40e060,%edx\n  403db3:\tbe ff 00 00 00       \tmov    $0xff,%esi\n  403db8:\t48 89 c7             \tmov    %rax,%rdi\n  403dbb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403dc0:\te8 4b f4 ff ff       \tcallq  403210 <snprintf@plt>\n  403dc5:\t48 8d 95 40 fd ff ff \tlea    -0x2c0(%rbp),%rdx\n  403dcc:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n  403dd3:\t48 89 d6             \tmov    %rdx,%rsi\n  403dd6:\t48 89 c7             \tmov    %rax,%rdi\n  403dd9:\te8 e2 94 00 00       \tcallq  40d2c0 <__stat>\n  403dde:\t85 c0                \ttest   %eax,%eax\n  403de0:\t74 0a                \tje     403dec <sysfs_is_cpu_online+0xab>\n  403de2:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  403de7:\te9 b4 00 00 00       \tjmpq   403ea0 <sysfs_is_cpu_online+0x15f>\n  403dec:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n  403df3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  403df8:\t48 89 c7             \tmov    %rax,%rdi\n  403dfb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403e00:\te8 5b f6 ff ff       \tcallq  403460 <open@plt>\n  403e05:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  403e08:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n  403e0c:\t75 0e                \tjne    403e1c <sysfs_is_cpu_online+0xdb>\n  403e0e:\te8 7d f2 ff ff       \tcallq  403090 <__errno_location@plt>\n  403e13:\t8b 00                \tmov    (%rax),%eax\n  403e15:\tf7 d8                \tneg    %eax\n  403e17:\te9 84 00 00 00       \tjmpq   403ea0 <sysfs_is_cpu_online+0x15f>\n  403e1c:\t48 8d 8d e0 fd ff ff \tlea    -0x220(%rbp),%rcx\n  403e23:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  403e26:\tba fe 00 00 00       \tmov    $0xfe,%edx\n  403e2b:\t48 89 ce             \tmov    %rcx,%rsi\n  403e2e:\t89 c7                \tmov    %eax,%edi\n  403e30:\te8 5b f4 ff ff       \tcallq  403290 <read@plt>\n  403e35:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  403e39:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  403e3e:\t7f 11                \tjg     403e51 <sysfs_is_cpu_online+0x110>\n  403e40:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  403e43:\t89 c7                \tmov    %eax,%edi\n  403e45:\te8 26 f4 ff ff       \tcallq  403270 <close@plt>\n  403e4a:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n  403e4f:\teb 4f                \tjmp    403ea0 <sysfs_is_cpu_online+0x15f>\n  403e51:\t48 8d 95 e0 fd ff ff \tlea    -0x220(%rbp),%rdx\n  403e58:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  403e5c:\t48 01 d0             \tadd    %rdx,%rax\n  403e5f:\tc6 00 00             \tmovb   $0x0,(%rax)\n  403e62:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  403e65:\t89 c7                \tmov    %eax,%edi\n  403e67:\te8 04 f4 ff ff       \tcallq  403270 <close@plt>\n  403e6c:\t48 8d 8d d8 fd ff ff \tlea    -0x228(%rbp),%rcx\n  403e73:\t48 8d 85 e0 fd ff ff \tlea    -0x220(%rbp),%rax\n  403e7a:\tba 00 00 00 00       \tmov    $0x0,%edx\n  403e7f:\t48 89 ce             \tmov    %rcx,%rsi\n  403e82:\t48 89 c7             \tmov    %rax,%rdi\n  403e85:\te8 36 f4 ff ff       \tcallq  4032c0 <strtoull@plt>\n  403e8a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  403e8e:\t48 83 7d e8 01       \tcmpq   $0x1,-0x18(%rbp)\n  403e93:\t76 07                \tjbe    403e9c <sysfs_is_cpu_online+0x15b>\n  403e95:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n  403e9a:\teb 04                \tjmp    403ea0 <sysfs_is_cpu_online+0x15f>\n  403e9c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  403ea0:\tc9                   \tleaveq \n  403ea1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sysfs_is_cpu_online(unsigned int a1) {\n  __int64 result;\n  struct stat <span class=\"supfact\">v2</span>;\n  char *<span class=\"supfact\">endptr</span>;\n  char <span class=\"supfact\">buf</span>[Number];\n  char <span class=\"supfact\">s</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  ssize_t <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">fd</span>;\n  snprintf(<span class=\"supfact\">s</span>, Number, String, a1);\n  if ((unsigned int)stat(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v2</span>))\n    return Number L;\n  snprintf(<span class=\"supfact\">s</span>, Number, String, a1);\n  if ((unsigned int)stat(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v2</span>))\n    return Number L;\n  <span class=\"supfact\">fd</span> = open(<span class=\"supfact\">s</span>, Number);\n  if (<span class=\"supfact\">fd</span> == Number)\n    return (unsigned int)-*__errno_location();\n  <span class=\"supfact\">v7</span> = read(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, Number);\n  if (<span class=\"supfact\">v7</span> > Number) {\n    <span class=\"supfact\">buf</span>[<span class=\"supfact\">v7</span>] = Number;\n    close(<span class=\"supfact\">fd</span>);\n    <span class=\"supfact\">v6</span> =\n        strtoull(<span class=\"supfact\">buf</span>, &<span class=\"supfact\">endptr</span>, Number);\n    if (<span class=\"supfact\">v6</span> <= Number)\n      result = <span class=\"supfact\">v6</span>;\n    else\n      result = Number L;\n  } else {\n    close(<span class=\"supfact\">fd</span>);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl sysfs_is_cpu_online(unsigned int cpu) {\n  int result;\n  stat <span class=\"supfact\">statbuf</span>;\n  char *<span class=\"supfact\">endp</span>;\n  char <span class=\"supfact\">linebuf</span>[Number];\n  char <span class=\"supfact\">path</span>[Number];\n  unsigned __int64 <span class=\"supfact\">value</span>;\n  ssize_t <span class=\"supfact\">numread</span>;\n  int <span class=\"supfact\">fd</span>;\n  snprintf(<span class=\"supfact\">path</span>, Number, String, cpu);\n  if ((unsigned int)stat_0(<span class=\"supfact\">path</span>, &<span class=\"supfact\">statbuf</span>))\n    return Number;\n  snprintf(<span class=\"supfact\">path</span>, Number, String, cpu);\n  if ((unsigned int)stat_0(<span class=\"supfact\">path</span>, &<span class=\"supfact\">statbuf</span>))\n    return Number;\n  <span class=\"supfact\">fd</span> = open(<span class=\"supfact\">path</span>, Number);\n  if (<span class=\"supfact\">fd</span> == Number)\n    return -*__errno_location();\n  <span class=\"supfact\">numread</span> =\n      read(<span class=\"supfact\">fd</span>, <span class=\"supfact\">linebuf</span>, Number);\n  if (<span class=\"supfact\">numread</span> > Number) {\n    <span class=\"supfact\">linebuf</span>[<span class=\"supfact\">numread</span>] = Number;\n    close(<span class=\"supfact\">fd</span>);\n    <span class=\"supfact\">value</span> =\n        strtoull(<span class=\"supfact\">linebuf</span>, &<span class=\"supfact\">endp</span>, Number);\n    if (<span class=\"supfact\">value</span> <= Number)\n      result = <span class=\"supfact\">value</span>;\n    else\n      result = Number;\n  } else {\n    close(<span class=\"supfact\">fd</span>);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "statbuf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "sslab-gatech", "repo_name": "opensgx", "path": "sslab-gatech/opensgx/4bba33bc59acd5e1f82566d47ba0618219f2a00ebf53f3b76f8b4a03ca3a8e43", "path_in_repo": "sslab-gatech/opensgx/libsgx/openssl/crypto/cms/cms_ess.o", "objdump": "000000000000096c <cms_encode_Receipt>:\n 96c:\t55                   \tpush   %rbp\n 96d:\t48 89 e5             \tmov    %rsp,%rbp\n 970:\t48 83 ec 50          \tsub    $0x50,%rsp\n 974:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n 978:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n 97f:\t00 \n 980:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 987:\t00 \n 988:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n 98c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 990:\t48 89 d6             \tmov    %rdx,%rsi\n 993:\t48 89 c7             \tmov    %rax,%rdi\n 996:\te8 00 00 00 00       \tcallq  99b <cms_encode_Receipt+0x2f>\n 99b:\t85 c0                \ttest   %eax,%eax\n 99d:\t7f 24                \tjg     9c3 <cms_encode_Receipt+0x57>\n 99f:\t41 b8 70 01 00 00    \tmov    $0x170,%r8d\n 9a5:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 9aa:\tba a8 00 00 00       \tmov    $0xa8,%edx\n 9af:\tbe a1 00 00 00       \tmov    $0xa1,%esi\n 9b4:\tbf 2e 00 00 00       \tmov    $0x2e,%edi\n 9b9:\te8 00 00 00 00       \tcallq  9be <cms_encode_Receipt+0x52>\n 9be:\te9 90 00 00 00       \tjmpq   a53 <cms_encode_Receipt+0xe7>\n 9c3:\tbf 32 00 00 00       \tmov    $0x32,%edi\n 9c8:\te8 00 00 00 00       \tcallq  9cd <cms_encode_Receipt+0x61>\n 9cd:\t48 89 c6             \tmov    %rax,%rsi\n 9d0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 9d4:\tb9 06 00 00 00       \tmov    $0x6,%ecx\n 9d9:\tba fd ff ff ff       \tmov    $0xfffffffd,%edx\n 9de:\t48 89 c7             \tmov    %rax,%rdi\n 9e1:\te8 00 00 00 00       \tcallq  9e6 <cms_encode_Receipt+0x7a>\n 9e6:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 9ea:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 9ef:\t75 21                \tjne    a12 <cms_encode_Receipt+0xa6>\n 9f1:\t41 b8 7a 01 00 00    \tmov    $0x17a,%r8d\n 9f7:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 9fc:\tba ad 00 00 00       \tmov    $0xad,%edx\n a01:\tbe a1 00 00 00       \tmov    $0xa1,%esi\n a06:\tbf 2e 00 00 00       \tmov    $0x2e,%edi\n a0b:\te8 00 00 00 00       \tcallq  a10 <cms_encode_Receipt+0xa4>\n a10:\teb 41                \tjmp    a53 <cms_encode_Receipt+0xe7>\n a12:\t48 c7 45 d0 01 00 00 \tmovq   $0x1,-0x30(%rbp)\n a19:\t00 \n a1a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n a1e:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n a22:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n a26:\t48 8b 00             \tmov    (%rax),%rax\n a29:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n a2d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a31:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n a35:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n a39:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n a3d:\tba 00 00 00 00       \tmov    $0x0,%edx\n a42:\tbe 00 00 00 00       \tmov    $0x0,%esi\n a47:\t48 89 c7             \tmov    %rax,%rdi\n a4a:\te8 00 00 00 00       \tcallq  a4f <cms_encode_Receipt+0xe3>\n a4f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n a53:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n a57:\t48 85 c0             \ttest   %rax,%rax\n a5a:\t74 0c                \tje     a68 <cms_encode_Receipt+0xfc>\n a5c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n a60:\t48 89 c7             \tmov    %rax,%rdi\n a63:\te8 00 00 00 00       \tcallq  a68 <cms_encode_Receipt+0xfc>\n a68:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n a6c:\tc9                   \tleaveq \n a6d:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall cms_encode_Receipt(__int64 a1) {\n  __int64 v1;\n  __int64 *<span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v3</span> = Number L;\n  <span class=\"supfact\">v6</span> = Number L;\n  if ((int)CMS_get1_ReceiptRequest(a1, (__int64 *)&<span class=\"supfact\">v3</span>) >\n      Number) {\n    v1 = OBJ_nid2obj(Number L);\n    <span class=\"supfact\">v5</span> =\n        CMS_signed_get0_data_by_OBJ(a1, v1, Number L, Number L);\n    if (<span class=\"supfact\">v5</span>) {\n      <span class=\"supfact\">v4</span>[Number] = Number L;\n      <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">v5</span>;\n      <span class=\"supfact\">v4</span>[Number] = *<span class=\"supfact\">v3</span>;\n      <span class=\"supfact\">v4</span>[Number] = *(_QWORD *)(a1 + Number);\n      <span class=\"supfact\">v6</span> =\n          ASN1_item_pack(<span class=\"supfact\">v4</span>, &CMS_Receipt_it, Number L);\n    } else {\n      ERR_put_error(Number L, Number L, Number L, String, Number L);\n    }\n  } else {\n    ERR_put_error(Number L, Number L, Number L, String, Number L);\n  }\n  if (<span class=\"supfact\">v3</span>)\n    CMS_ReceiptRequest_free((__int64)<span class=\"supfact\">v3</span>);\n  return <span class=\"supfact\">v6</span>;\n}", "code_t": "ASN1_OCTET_STRING *__cdecl cms_encode_Receipt(CMS_SignerInfo *si_0) {\n  __int64 v1;\n  CMS_ReceiptRequest *<span class=\"supfact\">rr</span>;\n  CMS_Receipt <span class=\"supfact\">rct</span>;\n  ASN1_OBJECT *<span class=\"supfact\">ctype</span>;\n  ASN1_OCTET_STRING *<span class=\"supfact\">os</span>;\n  <span class=\"supfact\">rr</span> = Number L;\n  <span class=\"supfact\">os</span> = Number L;\n  if (CMS_get1_ReceiptRequest(si_0, &<span class=\"supfact\">rr</span>) > Number) {\n    v1 = OBJ_nid2obj(Number L);\n    <span class=\"supfact\">ctype</span> = (ASN1_OBJECT *)CMS_signed_get0_data_by_OBJ(\n        si_0, v1, Number L, Number L);\n    if (<span class=\"supfact\">ctype</span>) {\n      <span class=\"supfact\">rct</span>.version = Number L;\n      <span class=\"supfact\">rct</span>.contentType = <span class=\"supfact\">ctype</span>;\n      <span class=\"supfact\">rct</span>.signedContentIdentifier =\n          <span class=\"supfact\">rr</span>->signedContentIdentifier;\n      <span class=\"supfact\">rct</span>.originatorSignatureValue = si_0->signature;\n      <span class=\"supfact\">os</span> = (ASN1_OCTET_STRING *)ASN1_item_pack(\n          &<span class=\"supfact\">rct</span>, &CMS_Receipt_it, Number L);\n    } else {\n      ERR_put_error(Number L, Number L, Number L, String, Number L);\n    }\n  } else {\n    ERR_put_error(Number L, Number L, Number L, String, Number L);\n  }\n  if (<span class=\"supfact\">rr</span>)\n    CMS_ReceiptRequest_free(<span class=\"supfact\">rr</span>);\n  return <span class=\"supfact\">os</span>;\n}", "var": [{"name": "v4", "type": "struct CMS_Receipt { __int64 version; ASN1_OBJECT * contentType; ASN1_OCTET_STRING * signedContentIdentifier; ASN1_OCTET_STRING * originatorSignatureValue; }", "ref_name": "rct", "ref_type": "struct CMS_Receipt { __int64 version; ASN1_OBJECT * contentType; ASN1_OCTET_STRING * signedContentIdentifier; ASN1_OCTET_STRING * originatorSignatureValue; }"}], "body_in_train": true}, {"repo_owner": "moddingg33k", "repo_name": "android_kernel_synopsis_backup", "path": "moddingg33k/android_kernel_synopsis_backup/65d2464b06ae17e969cbf183705b1ee042f84dfa9f3ec0434a9d6e1b939c1a75", "path_in_repo": "moddingg33k/android_kernel_synopsis_backup/tools/perf/util/exec_cmd.o", "objdump": "0000000000000118 <system_path>:\n 118:\t55                   \tpush   %rbp\n 119:\t48 89 e5             \tmov    %rsp,%rbp\n 11c:\t48 83 ec 30          \tsub    $0x30,%rsp\n 120:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 124:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 12b:\t00 00 \n 12d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 131:\t31 c0                \txor    %eax,%eax\n 133:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n 13a:\t00 \n 13b:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n 142:\t00 \n 143:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n 14a:\t00 \n 14b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 14f:\t48 89 c7             \tmov    %rax,%rdi\n 152:\te8 81 ff ff ff       \tcallq  d8 <is_absolute_path>\n 157:\t85 c0                \ttest   %eax,%eax\n 159:\t74 06                \tje     161 <system_path+0x49>\n 15b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 15f:\teb 3a                \tjmp    19b <system_path+0x83>\n 161:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 168 <system_path+0x50>\n 168:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n 16c:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 170:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 175:\t48 89 c7             \tmov    %rax,%rdi\n 178:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 17d:\te8 00 00 00 00       \tcallq  182 <system_path+0x6a>\n 182:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 186:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 18b:\t48 89 c7             \tmov    %rax,%rdi\n 18e:\te8 00 00 00 00       \tcallq  193 <system_path+0x7b>\n 193:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 197:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 19b:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n 19f:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n 1a6:\t00 00 \n 1a8:\t74 05                \tje     1af <system_path+0x97>\n 1aa:\te8 00 00 00 00       \tcallq  1af <system_path+0x97>\n 1af:\tc9                   \tleaveq \n 1b0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall system_path(_BYTE *a1) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  <span class=\"supfact\">v2</span>[Number] = __readfsqword(Number);\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  <span class=\"supfact\">v2</span>[Number] = (__int64)&strbuf_slopbuf;\n  if (is_absolute_path(a1))\n    return (__int64)a1;\n  strbuf_addf(<span class=\"supfact\">v2</span>, String, (const char *)prefix_6790, a1);\n  return strbuf_detach(<span class=\"supfact\">v2</span>, Number L);\n}", "code_t": "const char *__cdecl system_path(const char *path) {\n  strbuf <span class=\"supfact\">d</span>;\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  <span class=\"supfact\">d</span>.alloc = Number L;\n  <span class=\"supfact\">d</span>.len = Number L;\n  <span class=\"supfact\">d</span>.buf = (char *)&strbuf_slopbuf;\n  if (is_absolute_path(path))\n    return path;\n  strbuf_addf(&<span class=\"supfact\">d</span>, String, prefix_6790, path);\n  return (const char *)strbuf_detach(&<span class=\"supfact\">d</span>, Number L);\n}", "var": [{"name": "v2", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "ref_name": "d", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": true}, {"repo_owner": "nstroustrup", "repo_name": "lifespan", "path": "nstroustrup/lifespan/79fc827494d9fc5fbc2996e5e37a2edf638ae382966ea1c75ae3eede0ed34781", "path_in_repo": "nstroustrup/lifespan/external_compile_libraries/fltk/test/device", "objdump": "00000000004290d0 <_ZN18Fl_Graphics_Driver6xylineEiiiii>:\n  4290d0:\t48 83 ec 18          \tsub    $0x18,%rsp\n  4290d4:\t89 f7                \tmov    %esi,%edi\n  4290d6:\t41 89 d3             \tmov    %edx,%r11d\n  4290d9:\te8 c4 fd ff ff       \tcallq  428ea2 <_ZL6clip_xi>\n  4290de:\t44 89 df             \tmov    %r11d,%edi\n  4290e1:\t66 89 04 24          \tmov    %ax,(%rsp)\n  4290e5:\te8 b8 fd ff ff       \tcallq  428ea2 <_ZL6clip_xi>\n  4290ea:\t89 cf                \tmov    %ecx,%edi\n  4290ec:\t66 89 44 24 06       \tmov    %ax,0x6(%rsp)\n  4290f1:\t66 89 44 24 02       \tmov    %ax,0x2(%rsp)\n  4290f6:\te8 a7 fd ff ff       \tcallq  428ea2 <_ZL6clip_xi>\n  4290fb:\t44 89 c7             \tmov    %r8d,%edi\n  4290fe:\t66 89 44 24 08       \tmov    %ax,0x8(%rsp)\n  429103:\t66 89 44 24 04       \tmov    %ax,0x4(%rsp)\n  429108:\te8 95 fd ff ff       \tcallq  428ea2 <_ZL6clip_xi>\n  42910d:\t44 89 cf             \tmov    %r9d,%edi\n  429110:\t66 89 44 24 0e       \tmov    %ax,0xe(%rsp)\n  429115:\t66 89 44 24 0a       \tmov    %ax,0xa(%rsp)\n  42911a:\te8 83 fd ff ff       \tcallq  428ea2 <_ZL6clip_xi>\n  42911f:\t48 8b 15 ba 7e 07 00 \tmov    0x77eba(%rip),%rdx        # 4a0fe0 <fl_gc>\n  429126:\t48 89 e1             \tmov    %rsp,%rcx\n  429129:\t45 31 c9             \txor    %r9d,%r9d\n  42912c:\t48 8b 35 bd 7e 07 00 \tmov    0x77ebd(%rip),%rsi        # 4a0ff0 <fl_window>\n  429133:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n  429139:\t66 89 44 24 0c       \tmov    %ax,0xc(%rsp)\n  42913e:\t48 8b 3d 2b 80 07 00 \tmov    0x7802b(%rip),%rdi        # 4a1170 <fl_display>\n  429145:\te8 46 c2 fd ff       \tcallq  405390 <XDrawLines@plt>\n  42914a:\t48 83 c4 18          \tadd    $0x18,%rsp\n  42914e:\tc3                   \tretq   \n  42914f:\t90                   \tnop", "code_s": "int __fastcall Fl_Graphics_Driver xyline(Fl_Graphics_Driver *this, int a2) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  XPoint <span class=\"supfact\">v7</span>;\n  __int16 <span class=\"supfact\">v8</span>;\n  __int16 <span class=\"supfact\">v9</span>;\n  __int16 <span class=\"supfact\">v10</span>;\n  __int16 <span class=\"supfact\">v11</span>;\n  __int16 <span class=\"supfact\">v12</span>;\n  __int16 <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v7</span>.x = clip_x(a2);\n  <span class=\"supfact\">v9</span> = clip_x(v2);\n  <span class=\"supfact\">v7</span>.y = <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v10</span> = clip_x(v3);\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v13</span> = clip_x(v4);\n  <span class=\"supfact\">v11</span> = <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v12</span> = clip_x(v5);\n  return XDrawLines(fl_display, fl_window, fl_gc, &<span class=\"supfact\">v7</span>, Number,\n                    Number);\n}", "code_t": "int __fastcall Fl_Graphics_Driver xyline(Fl_Graphics_Driver *this, int a2) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  XPoint <span class=\"supfact\">v7</span>;\n  __int16 <span class=\"supfact\">v8</span>;\n  __int16 <span class=\"supfact\">v9</span>;\n  __int16 <span class=\"supfact\">v10</span>;\n  __int16 <span class=\"supfact\">v11</span>;\n  __int16 <span class=\"supfact\">v12</span>;\n  __int16 <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v7</span>.x = clip_x(a2);\n  <span class=\"supfact\">v9</span> = clip_x(v2);\n  <span class=\"supfact\">v7</span>.y = <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v10</span> = clip_x(v3);\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v13</span> = clip_x(v4);\n  <span class=\"supfact\">v11</span> = <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v12</span> = clip_x(v5);\n  return XDrawLines(fl_display, fl_window, fl_gc, &<span class=\"supfact\">v7</span>, Number,\n                    Number);\n}", "var": [{"name": "v7", "type": "struct XPoint { __int16 x; __int16 y; }", "ref_name": "v7", "ref_type": "struct XPoint { __int16 x; __int16 y; }"}], "body_in_train": true}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/d013e894aa3761392793944f11adf0fb1441a9620d94e81e690380afbadc963a", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Foundation/testsuite/obj/Linux/x86_64/debug_shared/StringTokenizerTest.o", "objdump": "0000000000000000 <_ZSt32__make_move_if_noexcept_iteratorIPN7CppUnit4TestESt13move_iteratorIPS2_EET0_PT_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  10:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  14:\t48 89 d6             \tmov    %rdx,%rsi\n  17:\t48 89 c7             \tmov    %rax,%rdi\n  1a:\te8 00 00 00 00       \tcallq  1f <_ZSt32__make_move_if_noexcept_iteratorIPN7CppUnit4TestESt13move_iteratorIPS2_EET0_PT_+0x1f>\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\tc9                   \tleaveq \n  24:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __make_move_if_noexcept_iterator<\n    CppUnit Test *, std move_iterator<CppUnit Test **>>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  std move_iterator<CppUnit Test **> move_iterator(&<span class=\"supfact\">v2</span>, a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std move_iterator<CppUnit Test **> __cdecl std __make_move_if_noexcept_iterator<\n    CppUnit Test *, std move_iterator<CppUnit Test **>>(CppUnit Test **__i) {\n  std move_iterator<CppUnit Test **> <span class=\"supfact\">v2</span>;\n  std move_iterator<CppUnit Test **> move_iterator(&<span class=\"supfact\">v2</span>, __i);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "struct std::move_iterator<CppUnit::Test**> { CppUnit::Test ** _M_current; }", "ref_name": "v2", "ref_type": "struct std::move_iterator<CppUnit::Test**> { CppUnit::Test ** _M_current; }"}], "body_in_train": true}, {"repo_owner": "gshanr", "repo_name": "smartmeship", "path": "gshanr/smartmeship/3e2b12cce83280523071a0c40e2e4509b7752198685b00e7f1d8a50dc55a7807", "path_in_repo": "gshanr/smartmeship/looci-contiki-os/contiki-2.6/examples/telnet-server/obj_native/elfloader.o", "objdump": "0000000000000420 <find_program_processes>:\n 420:\t55                   \tpush   %rbp\n 421:\t48 89 e5             \tmov    %rsp,%rbp\n 424:\t48 83 ec 60          \tsub    $0x60,%rsp\n 428:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n 42b:\t89 75 a8             \tmov    %esi,-0x58(%rbp)\n 42e:\t89 d0                \tmov    %edx,%eax\n 430:\t89 4d a0             \tmov    %ecx,-0x60(%rbp)\n 433:\t66 89 45 a4          \tmov    %ax,-0x5c(%rbp)\n 437:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n 43a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 43d:\teb 67                \tjmp    4a6 <find_program_processes+0x86>\n 43f:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n 443:\t8b 75 fc             \tmov    -0x4(%rbp),%esi\n 446:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n 449:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n 44e:\t89 c7                \tmov    %eax,%edi\n 450:\te8 ab fb ff ff       \tcallq  0 <seek_read>\n 455:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 459:\t48 85 c0             \ttest   %rax,%rax\n 45c:\t74 44                \tje     4a2 <find_program_processes+0x82>\n 45e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 462:\t89 c2                \tmov    %eax,%edx\n 464:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n 467:\t8d 34 02             \tlea    (%rdx,%rax,1),%esi\n 46a:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n 46e:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n 471:\tb9 1e 00 00 00       \tmov    $0x1e,%ecx\n 476:\t89 c7                \tmov    %eax,%edi\n 478:\te8 83 fb ff ff       \tcallq  0 <seek_read>\n 47d:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n 481:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 486:\t48 89 c7             \tmov    %rax,%rdi\n 489:\te8 00 00 00 00       \tcallq  48e <find_program_processes+0x6e>\n 48e:\t85 c0                \ttest   %eax,%eax\n 490:\t75 10                \tjne    4a2 <find_program_processes+0x82>\n 492:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 499 <find_program_processes+0x79>\n 499:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 49d:\t48 01 d0             \tadd    %rdx,%rax\n 4a0:\teb 17                \tjmp    4b9 <find_program_processes+0x99>\n 4a2:\t83 45 fc 20          \taddl   $0x20,-0x4(%rbp)\n 4a6:\t0f b7 55 a4          \tmovzwl -0x5c(%rbp),%edx\n 4aa:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n 4ad:\t01 d0                \tadd    %edx,%eax\n 4af:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 4b2:\t72 8b                \tjb     43f <find_program_processes+0x1f>\n 4b4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4b9:\tc9                   \tleaveq \n 4ba:\tc3                   \tretq   ", "code_s": "__int64 __fastcall find_program_processes(unsigned int a1, unsigned int a2,\n                                          unsigned __int16 a3, int a4) {\n  char <span class=\"supfact\">s1</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>[Number];\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = a2; <span class=\"supfact\">i</span> < a3 + a2;\n       <span class=\"supfact\">i</span> += Number) {\n    seek_read(a1, <span class=\"supfact\">i</span>, (__int64)<span class=\"supfact\">v8</span>, Number);\n    if (<span class=\"supfact\">v8</span>[Number]) {\n      seek_read(a1, LODWORD(<span class=\"supfact\">v8</span>[Number]) + a4,\n                (__int64)<span class=\"supfact\">s1</span>, Number);\n      if (!strcmp(<span class=\"supfact\">s1</span>, String))\n        return qword_C18 + <span class=\"supfact\">v8</span>[Number];\n    }\n  }\n  return Number L;\n}", "code_t": "void *__cdecl find_program_processes(int fd, unsigned int symtab,\n                                     unsigned __int16 size,\n                                     unsigned int strtab) {\n  char <span class=\"supfact\">name</span>[Number];\n  elf32_sym <span class=\"supfact\">s</span>;\n  unsigned int <span class=\"supfact\">a</span>;\n  for (<span class=\"supfact\">a</span> = symtab; <span class=\"supfact\">a</span> < size + symtab;\n       <span class=\"supfact\">a</span> += Number) {\n    seek_read(fd, <span class=\"supfact\">a</span>, (char *)&<span class=\"supfact\">s</span>, Number);\n    if (<span class=\"supfact\">s</span>.st_name) {\n      seek_read(fd, LODWORD(<span class=\"supfact\">s</span>.st_name) + strtab,\n                <span class=\"supfact\">name</span>, Number);\n      if (!strcmp(<span class=\"supfact\">name</span>, String))\n        return &data.address[<span class=\"supfact\">s</span>.st_value];\n    }\n  }\n  return Number L;\n}", "var": [{"name": "v8", "type": "struct elf32_sym { elf32_word st_name; elf32_addr st_value; elf32_word st_size; unsigned __int8 st_info; unsigned __int8 st_other; elf32_half st_shndx; PADDING (4); }", "ref_name": "s", "ref_type": "struct elf32_sym { elf32_word st_name; elf32_addr st_value; elf32_word st_size; unsigned __int8 st_info; unsigned __int8 st_other; elf32_half st_shndx; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "XYZjenus", "repo_name": "linux-satcom", "path": "XYZjenus/linux-satcom/9ba7e7c276eb3c71421eee914afb8dcd52ff4895b7a416dba85911a59aa42ac2", "path_in_repo": "XYZjenus/linux-satcom/tools/power/cpupower/cpupower", "objdump": "0000000000403427 <sysfs_get_idlestate_count>:\n  403427:\t55                   \tpush   %rbp\n  403428:\t48 89 e5             \tmov    %rsp,%rbp\n  40342b:\t48 81 ec b0 01 00 00 \tsub    $0x1b0,%rsp\n  403432:\t89 bd 5c fe ff ff    \tmov    %edi,-0x1a4(%rbp)\n  403438:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  40343f:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  403446:\tba 28 c1 40 00       \tmov    $0x40c128,%edx\n  40344b:\tbe ff 00 00 00       \tmov    $0xff,%esi\n  403450:\t48 89 c7             \tmov    %rax,%rdi\n  403453:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403458:\te8 63 ed ff ff       \tcallq  4021c0 <snprintf@plt>\n  40345d:\t48 8d 95 60 fe ff ff \tlea    -0x1a0(%rbp),%rdx\n  403464:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  40346b:\t48 89 d6             \tmov    %rdx,%rsi\n  40346e:\t48 89 c7             \tmov    %rax,%rdi\n  403471:\te8 aa 83 00 00       \tcallq  40b820 <__stat>\n  403476:\t85 c0                \ttest   %eax,%eax\n  403478:\t75 12                \tjne    40348c <sysfs_get_idlestate_count+0x65>\n  40347a:\t8b 85 78 fe ff ff    \tmov    -0x188(%rbp),%eax\n  403480:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  403485:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n  40348a:\t74 0a                \tje     403496 <sysfs_get_idlestate_count+0x6f>\n  40348c:\tb8 ed ff ff ff       \tmov    $0xffffffed,%eax\n  403491:\te9 c2 00 00 00       \tjmpq   403558 <sysfs_get_idlestate_count+0x131>\n  403496:\t8b 95 5c fe ff ff    \tmov    -0x1a4(%rbp),%edx\n  40349c:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4034a3:\t89 d1                \tmov    %edx,%ecx\n  4034a5:\tba 48 c1 40 00       \tmov    $0x40c148,%edx\n  4034aa:\tbe ff 00 00 00       \tmov    $0xff,%esi\n  4034af:\t48 89 c7             \tmov    %rax,%rdi\n  4034b2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4034b7:\te8 04 ed ff ff       \tcallq  4021c0 <snprintf@plt>\n  4034bc:\t48 8d 95 60 fe ff ff \tlea    -0x1a0(%rbp),%rdx\n  4034c3:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4034ca:\t48 89 d6             \tmov    %rdx,%rsi\n  4034cd:\t48 89 c7             \tmov    %rax,%rdi\n  4034d0:\te8 4b 83 00 00       \tcallq  40b820 <__stat>\n  4034d5:\t85 c0                \ttest   %eax,%eax\n  4034d7:\t75 12                \tjne    4034eb <sysfs_get_idlestate_count+0xc4>\n  4034d9:\t8b 85 78 fe ff ff    \tmov    -0x188(%rbp),%eax\n  4034df:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  4034e4:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n  4034e9:\t74 37                \tje     403522 <sysfs_get_idlestate_count+0xfb>\n  4034eb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4034f0:\teb 66                \tjmp    403558 <sysfs_get_idlestate_count+0x131>\n  4034f2:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n  4034f5:\t8b 95 5c fe ff ff    \tmov    -0x1a4(%rbp),%edx\n  4034fb:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  403502:\t41 89 c8             \tmov    %ecx,%r8d\n  403505:\t89 d1                \tmov    %edx,%ecx\n  403507:\tba 78 c1 40 00       \tmov    $0x40c178,%edx\n  40350c:\tbe ff 00 00 00       \tmov    $0xff,%esi\n  403511:\t48 89 c7             \tmov    %rax,%rdi\n  403514:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403519:\te8 a2 ec ff ff       \tcallq  4021c0 <snprintf@plt>\n  40351e:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  403522:\t48 8d 95 60 fe ff ff \tlea    -0x1a0(%rbp),%rdx\n  403529:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  403530:\t48 89 d6             \tmov    %rdx,%rsi\n  403533:\t48 89 c7             \tmov    %rax,%rdi\n  403536:\te8 e5 82 00 00       \tcallq  40b820 <__stat>\n  40353b:\t85 c0                \ttest   %eax,%eax\n  40353d:\t75 12                \tjne    403551 <sysfs_get_idlestate_count+0x12a>\n  40353f:\t8b 85 78 fe ff ff    \tmov    -0x188(%rbp),%eax\n  403545:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  40354a:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n  40354f:\t74 a1                \tje     4034f2 <sysfs_get_idlestate_count+0xcb>\n  403551:\t83 6d fc 01          \tsubl   $0x1,-0x4(%rbp)\n  403555:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  403558:\tc9                   \tleaveq \n  403559:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sysfs_get_idlestate_count(unsigned int a1) {\n  struct stat <span class=\"supfact\">v2</span>;\n  char <span class=\"supfact\">s</span>[Number];\n  unsigned int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Number;\n  snprintf(<span class=\"supfact\">s</span>, Number, String);\n  if ((unsigned int)stat(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v2</span>) ||\n      (<span class=\"supfact\">v2</span>.st_mode & Number) != Number)\n    return Number L;\n  snprintf(<span class=\"supfact\">s</span>, Number, String, a1);\n  if ((unsigned int)stat(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v2</span>) ||\n      (<span class=\"supfact\">v2</span>.st_mode & Number) != Number)\n    return Number L;\n  while (!(unsigned int)stat(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v2</span>) &&\n         (<span class=\"supfact\">v2</span>.st_mode & Number) == Number)\n    snprintf(<span class=\"supfact\">s</span>, Number, String, a1, <span class=\"supfact\">v4</span>++);\n  return <span class=\"supfact\">v4</span> - Number;\n}", "code_t": "int __cdecl sysfs_get_idlestate_count(unsigned int cpu) {\n  stat <span class=\"supfact\">statbuf</span>;\n  char <span class=\"supfact\">file</span>[Number];\n  int <span class=\"supfact\">idlestates</span>;\n  <span class=\"supfact\">idlestates</span> = Number;\n  snprintf(<span class=\"supfact\">file</span>, Number, String);\n  if ((unsigned int)stat_0(<span class=\"supfact\">file</span>, &<span class=\"supfact\">statbuf</span>) ||\n      (<span class=\"supfact\">statbuf</span>.st_mode & Number) != Number)\n    return Number;\n  snprintf(<span class=\"supfact\">file</span>, Number, String, cpu);\n  if ((unsigned int)stat_0(<span class=\"supfact\">file</span>, &<span class=\"supfact\">statbuf</span>) ||\n      (<span class=\"supfact\">statbuf</span>.st_mode & Number) != Number)\n    return Number;\n  while (\n      !(unsigned int)stat_0(<span class=\"supfact\">file</span>, &<span class=\"supfact\">statbuf</span>) &&\n      (<span class=\"supfact\">statbuf</span>.st_mode & Number) == Number)\n    snprintf(<span class=\"supfact\">file</span>, Number, String, cpu,\n             (unsigned int)<span class=\"supfact\">idlestates</span>++);\n  return <span class=\"supfact\">idlestates</span> - Number;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "statbuf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "mohancm", "repo_name": "android_kernel_coolpad_c103", "path": "mohancm/android_kernel_coolpad_c103/f5d195c88a2207b6922eac57d0eb8294592a27fc5f06b5cdde9dab06e269bb59", "path_in_repo": "mohancm/android_kernel_coolpad_c103/tools/perf/util/probe-finder.o", "objdump": "0000000000002612 <probe_point_search_cb>:\n    2612:\t55                   \tpush   %rbp\n    2613:\t48 89 e5             \tmov    %rsp,%rbp\n    2616:\t48 83 ec 50          \tsub    $0x50,%rsp\n    261a:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    261e:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    2622:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2629:\t00 00 \n    262b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    262f:\t31 c0                \txor    %eax,%eax\n    2631:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    2635:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    2639:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    263d:\t48 8b 00             \tmov    (%rax),%rax\n    2640:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    2644:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2648:\t48 8b 00             \tmov    (%rax),%rax\n    264b:\t48 83 c0 10          \tadd    $0x10,%rax\n    264f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    2653:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2657:\t48 89 c7             \tmov    %rax,%rdi\n    265a:\te8 00 00 00 00       \tcallq  265f <probe_point_search_cb+0x4d>\n    265f:\t83 f8 2e             \tcmp    $0x2e,%eax\n    2662:\t75 38                \tjne    269c <probe_point_search_cb+0x8a>\n    2664:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2668:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    266c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2670:\t48 89 d6             \tmov    %rdx,%rsi\n    2673:\t48 89 c7             \tmov    %rax,%rdi\n    2676:\te8 00 00 00 00       \tcallq  267b <probe_point_search_cb+0x69>\n    267b:\t83 f0 01             \txor    $0x1,%eax\n    267e:\t84 c0                \ttest   %al,%al\n    2680:\t75 1a                \tjne    269c <probe_point_search_cb+0x8a>\n    2682:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    2686:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    268a:\tbe 3c 00 00 00       \tmov    $0x3c,%esi\n    268f:\t48 89 c7             \tmov    %rax,%rdi\n    2692:\te8 00 00 00 00       \tcallq  2697 <probe_point_search_cb+0x85>\n    2697:\t48 85 c0             \ttest   %rax,%rax\n    269a:\t74 0a                \tje     26a6 <probe_point_search_cb+0x94>\n    269c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    26a1:\te9 88 01 00 00       \tjmpq   282e <probe_point_search_cb+0x21c>\n    26a6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    26aa:\t48 8b 00             \tmov    (%rax),%rax\n    26ad:\t48 85 c0             \ttest   %rax,%rax\n    26b0:\t74 2f                \tje     26e1 <probe_point_search_cb+0xcf>\n    26b2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    26b6:\t48 89 c7             \tmov    %rax,%rdi\n    26b9:\te8 00 00 00 00       \tcallq  26be <probe_point_search_cb+0xac>\n    26be:\t48 89 c2             \tmov    %rax,%rdx\n    26c1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    26c5:\t48 8b 00             \tmov    (%rax),%rax\n    26c8:\t48 89 d6             \tmov    %rdx,%rsi\n    26cb:\t48 89 c7             \tmov    %rax,%rdi\n    26ce:\te8 00 00 00 00       \tcallq  26d3 <probe_point_search_cb+0xc1>\n    26d3:\t85 c0                \ttest   %eax,%eax\n    26d5:\t74 0a                \tje     26e1 <probe_point_search_cb+0xcf>\n    26d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    26dc:\te9 4d 01 00 00       \tjmpq   282e <probe_point_search_cb+0x21c>\n    26e1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    26e5:\t48 89 c7             \tmov    %rax,%rdi\n    26e8:\te8 00 00 00 00       \tcallq  26ed <probe_point_search_cb+0xdb>\n    26ed:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    26f1:\t48 89 42 20          \tmov    %rax,0x20(%rdx)\n    26f5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    26f9:\t8b 40 10             \tmov    0x10(%rax),%eax\n    26fc:\t85 c0                \ttest   %eax,%eax\n    26fe:\t74 46                \tje     2746 <probe_point_search_cb+0x134>\n    2700:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2704:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n    2708:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    270c:\t48 89 d6             \tmov    %rdx,%rsi\n    270f:\t48 89 c7             \tmov    %rax,%rdi\n    2712:\te8 00 00 00 00       \tcallq  2717 <probe_point_search_cb+0x105>\n    2717:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    271b:\t8b 50 10             \tmov    0x10(%rax),%edx\n    271e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2722:\t8b 40 10             \tmov    0x10(%rax),%eax\n    2725:\t01 c2                \tadd    %eax,%edx\n    2727:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    272b:\t89 50 10             \tmov    %edx,0x10(%rax)\n    272e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2732:\t48 89 c7             \tmov    %rax,%rdi\n    2735:\te8 4c fa ff ff       \tcallq  2186 <find_probe_point_by_line>\n    273a:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    273e:\t89 42 08             \tmov    %eax,0x8(%rdx)\n    2741:\te9 e3 00 00 00       \tjmpq   2829 <probe_point_search_cb+0x217>\n    2746:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    274a:\t48 89 c7             \tmov    %rax,%rdi\n    274d:\te8 00 00 00 00       \tcallq  2752 <probe_point_search_cb+0x140>\n    2752:\t85 c0                \ttest   %eax,%eax\n    2754:\t0f 85 b3 00 00 00    \tjne    280d <probe_point_search_cb+0x1fb>\n    275a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    275e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    2762:\t48 85 c0             \ttest   %rax,%rax\n    2765:\t74 1f                \tje     2786 <probe_point_search_cb+0x174>\n    2767:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    276b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    276f:\t48 89 d6             \tmov    %rdx,%rsi\n    2772:\t48 89 c7             \tmov    %rax,%rdi\n    2775:\te8 eb fc ff ff       \tcallq  2465 <find_probe_point_lazy>\n    277a:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    277e:\t89 42 08             \tmov    %eax,0x8(%rdx)\n    2781:\te9 a3 00 00 00       \tjmpq   2829 <probe_point_search_cb+0x217>\n    2786:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    278a:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n    278e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2792:\t48 89 d6             \tmov    %rdx,%rsi\n    2795:\t48 89 c7             \tmov    %rax,%rdi\n    2798:\te8 00 00 00 00       \tcallq  279d <probe_point_search_cb+0x18b>\n    279d:\t85 c0                \ttest   %eax,%eax\n    279f:\t74 35                \tje     27d6 <probe_point_search_cb+0x1c4>\n    27a1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    27a5:\t48 89 c7             \tmov    %rax,%rdi\n    27a8:\te8 00 00 00 00       \tcallq  27ad <probe_point_search_cb+0x19b>\n    27ad:\t48 89 c2             \tmov    %rax,%rdx\n    27b0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    27b5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    27ba:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    27bf:\te8 00 00 00 00       \tcallq  27c4 <probe_point_search_cb+0x1b2>\n    27c4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    27c8:\tc7 40 08 fe ff ff ff \tmovl   $0xfffffffe,0x8(%rax)\n    27cf:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    27d4:\teb 58                \tjmp    282e <probe_point_search_cb+0x21c>\n    27d6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    27da:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    27de:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    27e2:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    27e6:\t48 01 c2             \tadd    %rax,%rdx\n    27e9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    27ed:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    27f1:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    27f5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    27f9:\t48 89 d6             \tmov    %rdx,%rsi\n    27fc:\t48 89 c7             \tmov    %rax,%rdi\n    27ff:\te8 b0 f4 ff ff       \tcallq  1cb4 <call_probe_finder>\n    2804:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    2808:\t89 42 08             \tmov    %eax,0x8(%rdx)\n    280b:\teb 1c                \tjmp    2829 <probe_point_search_cb+0x217>\n    280d:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    2811:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2815:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    281a:\t48 89 c7             \tmov    %rax,%rdi\n    281d:\te8 00 00 00 00       \tcallq  2822 <probe_point_search_cb+0x210>\n    2822:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    2826:\t89 42 08             \tmov    %eax,0x8(%rdx)\n    2829:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    282e:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    2832:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    2839:\t00 00 \n    283b:\t74 05                \tje     2842 <probe_point_search_cb+0x230>\n    283d:\te8 00 00 00 00       \tcallq  2842 <probe_point_search_cb+0x230>\n    2842:\tc9                   \tleaveq \n    2843:\tc3                   \tretq   ", "code_s": "__int64 __fastcall probe_point_search_cb(struct Dwarf_Die_s *a1, __int64 a2,\n                                         Dwarf_Error *a3) {\n  Dwarf_Error *v3;\n  __int64 v4;\n  __int64 v6;\n  Dwarf_Error *v7;\n  const char *v8;\n  _QWORD *<span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  Dwarf_Attribute <span class=\"supfact\">v12</span>[Number];\n  <span class=\"supfact\">v12</span>[Number] = (Dwarf_Attribute)__readfsqword(Number);\n  <span class=\"supfact\">v10</span> = *(_QWORD **)a2;\n  <span class=\"supfact\">v11</span> = **(_QWORD **)a2 + Number L;\n  if (dwarf_tag(a1, (Dwarf_Half *)a2, a3) != Number)\n    return Number L;\n  if ((unsigned __int8)die_compare_name(\n          a1, *(_QWORD *)(<span class=\"supfact\">v11</span> + Number)) != Number)\n    return Number L;\n  LODWORD(v4) = dwarf_attr(a1, Number, <span class=\"supfact\">v12</span>, v3);\n  if (v4)\n    return Number L;\n  if (*(_QWORD *)<span class=\"supfact\">v11</span>) {\n    v6 = dwarf_decl_file(a1);\n    if ((unsigned int)strtailcmp(*(_QWORD *)<span class=\"supfact\">v11</span>, v6))\n      return Number L;\n  }\n  <span class=\"supfact\">v10</span>[Number] = dwarf_decl_file(a1);\n  if (*(_DWORD *)(<span class=\"supfact\">v11</span> + Number)) {\n    dwarf_decl_line(a1, <span class=\"supfact\">v10</span> + Number);\n    *((_DWORD *)<span class=\"supfact\">v10</span> + Number) +=\n        *(_DWORD *)(<span class=\"supfact\">v11</span> + Number);\n    *(_DWORD *)(a2 + Number) =\n        find_probe_point_by_line((__int64)<span class=\"supfact\">v10</span>);\n  } else if ((unsigned int)dwarf_func_inline(a1)) {\n    *(_DWORD *)(a2 + Number) =\n        die_walk_instances(a1, probe_point_inline_cb, <span class=\"supfact\">v10</span>);\n  } else if (*(_QWORD *)(<span class=\"supfact\">v11</span> + Number)) {\n    *(_DWORD *)(a2 + Number) =\n        find_probe_point_lazy((__int64)a1, (__int64)<span class=\"supfact\">v10</span>);\n  } else {\n    if ((unsigned int)dwarf_entrypc(a1, <span class=\"supfact\">v10</span> + Number)) {\n      LODWORD(v8) =\n          dwarf_diename(a1, (char **)<span class=\"supfact\">v10</span> + Number, v7);\n      eprintf(Number L, String, v8);\n      *(_DWORD *)(a2 + Number) = Number;\n      return Number L;\n    }\n    <span class=\"supfact\">v10</span>[Number] += *(_QWORD *)(<span class=\"supfact\">v11</span> + Number);\n    *(_DWORD *)(a2 + Number) = call_probe_finder(\n        a1, (__int64)<span class=\"supfact\">v10</span>, (Dwarf_Error *)<span class=\"supfact\">v10</span>);\n  }\n  return Number L;\n}", "code_t": "int __cdecl probe_point_search_cb(Dwarf_Die *sp_die, void *data) {\n  __int64 v2;\n  __int64 v4;\n  const char *v5;\n  Dwarf_Die dataa;\n  Dwarf_Die datab;\n  Dwarf_Die datac;\n  dwarf_callback_param *param;\n  probe_finder *<span class=\"supfact\">pf_0</span>;\n  perf_probe_point *<span class=\"supfact\">pp</span>;\n  Dwarf_Attribute <span class=\"supfact\">attr</span>;\n  unsigned __int64 v13;\n  dataa.cu = (Dwarf_CU *)sp_die;\n  dataa.addr = data;\n  v13 = __readfsqword(Number);\n  dataa.padding__ = (__int64)data;\n  <span class=\"supfact\">pf_0</span> = *(probe_finder **)data;\n  <span class=\"supfact\">pp</span> = (perf_probe_point *)(**(_QWORD **)data + Number L);\n  if (dwarf_tag(dataa, (Dwarf_Half *)sp_die, (Dwarf_Error *)data) != Number)\n    return Number;\n  if ((unsigned __int8)die_compare_name(datab.cu,\n                                        <span class=\"supfact\">pp</span>->function) != Number)\n    return Number;\n  LODWORD(v2) = dwarf_attr(datab, (Dwarf_Half)datab.cu,\n                           (Dwarf_Attribute *)((char *)&loc_37 + Number),\n                           (Dwarf_Error *)&<span class=\"supfact\">attr</span>);\n  if (v2)\n    return Number;\n  if (<span class=\"supfact\">pp</span>->file) {\n    v4 = dwarf_decl_file(datac.cu);\n    if ((unsigned int)strtailcmp(<span class=\"supfact\">pp</span>->file, v4))\n      return Number;\n  }\n  <span class=\"supfact\">pf_0</span>->fname = (const char *)dwarf_decl_file(datac.cu);\n  if (<span class=\"supfact\">pp</span>->line) {\n    dwarf_decl_line(datac.cu, &<span class=\"supfact\">pf_0</span>->lno);\n    <span class=\"supfact\">pf_0</span>->lno += <span class=\"supfact\">pp</span>->line;\n    *(_DWORD *)(datac.padding__ + Number) =\n        find_probe_point_by_line(<span class=\"supfact\">pf_0</span>);\n  } else if ((unsigned int)dwarf_func_inline(datac.cu)) {\n    *(_DWORD *)(datac.padding__ + Number) = die_walk_instances(\n        datac.cu, probe_point_inline_cb, <span class=\"supfact\">pf_0</span>);\n  } else if (<span class=\"supfact\">pp</span>->lazy_line) {\n    *(_DWORD *)(datac.padding__ + Number) =\n        find_probe_point_lazy((Dwarf_Die *)datac.cu, <span class=\"supfact\">pf_0</span>);\n  } else {\n    if ((unsigned int)dwarf_entrypc(datac.cu, &<span class=\"supfact\">pf_0</span>->addr)) {\n      LODWORD(v5) = dwarf_diename(datac, (char **)datac.cu,\n                                  (Dwarf_Error *)&<span class=\"supfact\">pf_0</span>->addr);\n      eprintf(Number L, String, v5);\n      param->retval = Number;\n      return Number;\n    }\n    <span class=\"supfact\">pf_0</span>->addr += <span class=\"supfact\">pp</span>->offset;\n    *(_DWORD *)(datac.padding__ + Number) =\n        call_probe_finder((Dwarf_Die *)datac.cu, <span class=\"supfact\">pf_0</span>);\n  }\n  return Number;\n}", "var": [{"name": "v12", "type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }", "ref_name": "attr", "ref_type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }"}], "body_in_train": true}, {"repo_owner": "splashkit", "repo_name": "splashkit-external", "path": "splashkit/splashkit-external/31bae5c13f83b36652ea728a0e5cec902cab4fcbd2b7407476287e3b6b86069c", "path_in_repo": "splashkit/splashkit-external/civetweb/out/src/civetweb.o", "objdump": "00000000000111b5 <check_acl>:\n   111b5:\t55                   \tpush   %rbp\n   111b6:\t48 89 e5             \tmov    %rsp,%rbp\n   111b9:\t48 83 ec 40          \tsub    $0x40,%rsp\n   111bd:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   111c1:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n   111c4:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n   111c9:\t0f 84 d1 00 00 00    \tje     112a0 <check_acl+0xeb>\n   111cf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   111d3:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n   111da:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   111de:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n   111e3:\t75 07                \tjne    111ec <check_acl+0x37>\n   111e5:\tb8 2b 00 00 00       \tmov    $0x2b,%eax\n   111ea:\teb 05                \tjmp    111f1 <check_acl+0x3c>\n   111ec:\tb8 2d 00 00 00       \tmov    $0x2d,%eax\n   111f1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n   111f4:\teb 77                \tjmp    1126d <check_acl+0xb8>\n   111f6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   111fa:\t0f b6 00             \tmovzbl (%rax),%eax\n   111fd:\t0f be c0             \tmovsbl %al,%eax\n   11200:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n   11203:\t83 7d ec 2b          \tcmpl   $0x2b,-0x14(%rbp)\n   11207:\t74 06                \tje     1120f <check_acl+0x5a>\n   11209:\t83 7d ec 2d          \tcmpl   $0x2d,-0x14(%rbp)\n   1120d:\t75 1f                \tjne    1122e <check_acl+0x79>\n   1120f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   11213:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n   11217:\t48 8d 55 e4          \tlea    -0x1c(%rbp),%rdx\n   1121b:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n   1121f:\t48 89 c6             \tmov    %rax,%rsi\n   11222:\t48 89 cf             \tmov    %rcx,%rdi\n   11225:\te8 14 c3 ff ff       \tcallq  d53e <parse_net>\n   1122a:\t85 c0                \ttest   %eax,%eax\n   1122c:\t75 2a                \tjne    11258 <check_acl+0xa3>\n   1122e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   11232:\t48 89 c7             \tmov    %rax,%rdi\n   11235:\te8 dd 0e ff ff       \tcallq  2117 <fc>\n   1123a:\tba 00 00 00 00       \tmov    $0x0,%edx\n   1123f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   11244:\t48 89 c7             \tmov    %rax,%rdi\n   11247:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   1124c:\te8 00 00 00 00       \tcallq  11251 <check_acl+0x9c>\n   11251:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   11256:\teb 4d                \tjmp    112a5 <check_acl+0xf0>\n   11258:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   1125b:\t23 45 c4             \tand    -0x3c(%rbp),%eax\n   1125e:\t89 c2                \tmov    %eax,%edx\n   11260:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   11263:\t39 c2                \tcmp    %eax,%edx\n   11265:\t75 06                \tjne    1126d <check_acl+0xb8>\n   11267:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   1126a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n   1126d:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n   11271:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   11275:\tba 00 00 00 00       \tmov    $0x0,%edx\n   1127a:\t48 89 ce             \tmov    %rcx,%rsi\n   1127d:\t48 89 c7             \tmov    %rax,%rdi\n   11280:\te8 0b 11 ff ff       \tcallq  2390 <next_option>\n   11285:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   11289:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n   1128e:\t0f 85 62 ff ff ff    \tjne    111f6 <check_acl+0x41>\n   11294:\t83 7d fc 2b          \tcmpl   $0x2b,-0x4(%rbp)\n   11298:\t0f 94 c0             \tsete   %al\n   1129b:\t0f b6 c0             \tmovzbl %al,%eax\n   1129e:\teb 05                \tjmp    112a5 <check_acl+0xf0>\n   112a0:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   112a5:\tc9                   \tleaveq \n   112a6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall check_acl(__int64 a1, int a2) {\n  int v2;\n  void *v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  char *<span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  const char *<span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  if (!a1)\n    return Number;\n  <span class=\"supfact\">v12</span> = *(const char **)(a1 + Number);\n  if (<span class=\"supfact\">v12</span>)\n    v2 = Number;\n  else\n    v2 = Number;\n  <span class=\"supfact\">v13</span> = v2;\n  while (Number) {\n    <span class=\"supfact\">v12</span> = next_option(<span class=\"supfact\">v12</span>,\n                                      (__int64)&<span class=\"supfact\">v8</span>, Number L);\n    if (!<span class=\"supfact\">v12</span>)\n      break;\n    <span class=\"supfact\">v11</span> = *<span class=\"supfact\">v8</span>;\n    if (<span class=\"supfact\">v11</span> != Number && <span class=\"supfact\">v11</span> != Number ||\n        !(unsigned int)parse_net(<span class=\"supfact\">v8</span> + Number,\n                                 &<span class=\"supfact\">v10</span>, &<span class=\"supfact\">v9</span>)) {\n      v3 = fc(a1);\n      mg_cry((__int64)v3, String, (__int64)String, v4, v5, v6);\n      return Number;\n    }\n    if ((a2 & <span class=\"supfact\">v9</span>) == <span class=\"supfact\">v10</span>)\n      <span class=\"supfact\">v13</span> = <span class=\"supfact\">v11</span>;\n  }\n  return <span class=\"supfact\">v13</span> == Number;\n}", "code_t": "int __cdecl check_acl(mg_context *ctx, uint32_t remote_ip) {\n  int v2;\n  mg_connection *v3;\n  <span class=\"supfact\">vec</span> <span class=\"supfact\">vec</span>;\n  uint32_t <span class=\"supfact\">mask</span>;\n  uint32_t <span class=\"supfact\">net</span>;\n  int <span class=\"supfact\">flag</span>;\n  const char *<span class=\"supfact\">list</span>;\n  int <span class=\"supfact\">allowed</span>;\n  if (!ctx)\n    return Number;\n  <span class=\"supfact\">list</span> = ctx->config[Number];\n  if (<span class=\"supfact\">list</span>)\n    v2 = Number;\n  else\n    v2 = Number;\n  <span class=\"supfact\">allowed</span> = v2;\n  while (Number) {\n    <span class=\"supfact\">list</span> =\n        next_option(<span class=\"supfact\">list</span>, &<span class=\"supfact\">vec</span>, Number L);\n    if (!<span class=\"supfact\">list</span>)\n      break;\n    <span class=\"supfact\">flag</span> = *<span class=\"supfact\">vec</span>.ptr;\n    if (<span class=\"supfact\">flag</span> != Number && <span class=\"supfact\">flag</span> != Number ||\n        !parse_net(<span class=\"supfact\">vec</span>.ptr + Number, &<span class=\"supfact\">net</span>,\n                   &<span class=\"supfact\">mask</span>)) {\n      v3 = fc(ctx);\n      mg_cry(v3, String, String);\n      return Number;\n    }\n    if ((remote_ip & <span class=\"supfact\">mask</span>) == <span class=\"supfact\">net</span>)\n      <span class=\"supfact\">allowed</span> = <span class=\"supfact\">flag</span>;\n  }\n  return <span class=\"supfact\">allowed</span> == Number;\n}", "var": [{"name": "v8", "type": "const char *", "ref_name": "vec", "ref_type": "struct vec { const char * ptr; size_t len; }"}], "body_in_train": true}, {"repo_owner": "crissmoldovan", "repo_name": "tisip", "path": "crissmoldovan/tisip/d2efb3c7564ae3cbdab9a6615d7c1d00b517c3df3224f51ebb5e8c6d7fb1ef72", "path_in_repo": "crissmoldovan/tisip/iphone/pjsip/src/pjnath/bin/pjturn-client-x86_64-unknown-linux-gnu", "objdump": "0000000000406e1f <decode_errcode_attr>:\n  406e1f:\t55                   \tpush   %rbp\n  406e20:\t48 89 e5             \tmov    %rsp,%rbp\n  406e23:\t48 83 ec 40          \tsub    $0x40,%rsp\n  406e27:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  406e2b:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  406e2f:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  406e33:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  406e37:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406e3b:\tbe 18 00 00 00       \tmov    $0x18,%esi\n  406e40:\t48 89 c7             \tmov    %rax,%rdi\n  406e43:\te8 c8 e3 ff ff       \tcallq  405210 <pj_pool_zalloc>\n  406e48:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  406e4c:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  406e50:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  406e54:\t48 89 d6             \tmov    %rdx,%rsi\n  406e57:\t48 89 c7             \tmov    %rax,%rdi\n  406e5a:\te8 85 e8 ff ff       \tcallq  4056e4 <GETATTRHDR>\n  406e5f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  406e63:\t48 83 c0 06          \tadd    $0x6,%rax\n  406e67:\t0f b6 00             \tmovzbl (%rax),%eax\n  406e6a:\t0f b6 c0             \tmovzbl %al,%eax\n  406e6d:\t6b d0 64             \timul   $0x64,%eax,%edx\n  406e70:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  406e74:\t48 83 c0 07          \tadd    $0x7,%rax\n  406e78:\t0f b6 00             \tmovzbl (%rax),%eax\n  406e7b:\t0f b6 c0             \tmovzbl %al,%eax\n  406e7e:\t01 c2                \tadd    %eax,%edx\n  406e80:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406e84:\t89 50 04             \tmov    %edx,0x4(%rax)\n  406e87:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  406e8b:\t48 83 c0 08          \tadd    $0x8,%rax\n  406e8f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  406e93:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406e97:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n  406e9b:\t0f b7 c0             \tmovzwl %ax,%eax\n  406e9e:\t83 e8 04             \tsub    $0x4,%eax\n  406ea1:\t48 98                \tcltq   \n  406ea3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  406ea7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406eab:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n  406eaf:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  406eb3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406eb7:\t48 89 ce             \tmov    %rcx,%rsi\n  406eba:\t48 89 c7             \tmov    %rax,%rdi\n  406ebd:\te8 64 a3 02 00       \tcallq  431226 <pj_strdup>\n  406ec2:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  406ec6:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  406eca:\t48 89 10             \tmov    %rdx,(%rax)\n  406ecd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406ed2:\tc9                   \tleaveq \n  406ed3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall decode_errcode_attr(__int64 a1, __int64 a2, __int64 a3,\n                                       _QWORD *a4) {\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  _WORD *<span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = (_WORD *)pj_pool_zalloc(a1, Number L);\n  GETATTRHDR(a2, <span class=\"supfact\">v7</span>);\n  *((_DWORD *)<span class=\"supfact\">v7</span> + Number) =\n      *(unsigned __int8 *)(a2 + Number) +\n      Number * *(unsigned __int8 *)(a2 + Number);\n  <span class=\"supfact\">v6</span>[Number] = a2 + Number;\n  <span class=\"supfact\">v6</span>[Number] =\n      (unsigned __int16)<span class=\"supfact\">v7</span>[Number] - Number;\n  pj_strdup(a1, <span class=\"supfact\">v7</span> + Number, <span class=\"supfact\">v6</span>);\n  *a4 = <span class=\"supfact\">v7</span>;\n  return Number L;\n}", "code_t": "pj_status_t __cdecl decode_errcode_attr(pj_pool_t_0 *pool,\n                                        const pj_uint8_t *buf,\n                                        const pj_stun_msg_hdr_0 *msghdr,\n                                        void **p_attr) {\n  pj_str_t_0 <span class=\"supfact\">value</span>;\n  pj_stun_errcode_attr_0 *<span class=\"supfact\">attr</span>;\n  <span class=\"supfact\">attr</span> = (pj_stun_errcode_attr_0 *)pj_pool_zalloc(pool, Number);\n  GETATTRHDR(buf, &<span class=\"supfact\">attr</span>->hdr);\n  <span class=\"supfact\">attr</span>->err_code = buf[Number] + Number * buf[Number];\n  <span class=\"supfact\">value</span>.ptr = (char *)(buf + Number);\n  <span class=\"supfact\">value</span>.slen = <span class=\"supfact\">attr</span>->hdr.length - Number;\n  pj_strdup(pool, &<span class=\"supfact\">attr</span>->reason, &<span class=\"supfact\">value</span>);\n  *p_attr = <span class=\"supfact\">attr</span>;\n  return Number;\n}", "var": [{"name": "v6", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "value", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "0000000000003917 <_nocheck__trace_megasas_dcmd_pd_get_info>:\n    3917:\t55                   \tpush   %rbp\n    3918:\t48 89 e5             \tmov    %rsp,%rbp\n    391b:\t41 54                \tpush   %r12\n    391d:\t53                   \tpush   %rbx\n    391e:\t48 83 ec 30          \tsub    $0x30,%rsp\n    3922:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    3925:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    3928:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    392f:\t00 00 \n    3931:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    3935:\t31 c0                \txor    %eax,%eax\n    3937:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 393d <_nocheck__trace_megasas_dcmd_pd_get_info+0x26>\n    393d:\t85 c0                \ttest   %eax,%eax\n    393f:\t0f 95 c0             \tsetne  %al\n    3942:\t0f b6 c0             \tmovzbl %al,%eax\n    3945:\t48 85 c0             \ttest   %rax,%rax\n    3948:\t74 63                \tje     39ad <_nocheck__trace_megasas_dcmd_pd_get_info+0x96>\n    394a:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 3951 <_nocheck__trace_megasas_dcmd_pd_get_info+0x3a>\n    3951:\t66 85 c0             \ttest   %ax,%ax\n    3954:\t74 57                \tje     39ad <_nocheck__trace_megasas_dcmd_pd_get_info+0x96>\n    3956:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    395b:\te8 cd ce ff ff       \tcallq  82d <qemu_loglevel_mask>\n    3960:\t84 c0                \ttest   %al,%al\n    3962:\t74 49                \tje     39ad <_nocheck__trace_megasas_dcmd_pd_get_info+0x96>\n    3964:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    3968:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    396d:\t48 89 c7             \tmov    %rax,%rdi\n    3970:\te8 00 00 00 00       \tcallq  3975 <_nocheck__trace_megasas_dcmd_pd_get_info+0x5e>\n    3975:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3979:\t49 89 c4             \tmov    %rax,%r12\n    397c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3980:\t48 89 c3             \tmov    %rax,%rbx\n    3983:\te8 00 00 00 00       \tcallq  3988 <_nocheck__trace_megasas_dcmd_pd_get_info+0x71>\n    3988:\t8b 4d c8             \tmov    -0x38(%rbp),%ecx\n    398b:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    398e:\t41 89 c9             \tmov    %ecx,%r9d\n    3991:\t41 89 d0             \tmov    %edx,%r8d\n    3994:\t4c 89 e1             \tmov    %r12,%rcx\n    3997:\t48 89 da             \tmov    %rbx,%rdx\n    399a:\t89 c6                \tmov    %eax,%esi\n    399c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 39a3 <_nocheck__trace_megasas_dcmd_pd_get_info+0x8c>\n    39a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    39a8:\te8 00 00 00 00       \tcallq  39ad <_nocheck__trace_megasas_dcmd_pd_get_info+0x96>\n    39ad:\t90                   \tnop\n    39ae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    39b2:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    39b9:\t00 00 \n    39bb:\t74 05                \tje     39c2 <_nocheck__trace_megasas_dcmd_pd_get_info+0xab>\n    39bd:\te8 00 00 00 00       \tcallq  39c2 <_nocheck__trace_megasas_dcmd_pd_get_info+0xab>\n    39c2:\t48 83 c4 30          \tadd    $0x30,%rsp\n    39c6:\t5b                   \tpop    %rbx\n    39c7:\t41 5c                \tpop    %r12\n    39c9:\t5d                   \tpop    %rbp\n    39ca:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_dcmd_pd_get_info(\n    unsigned int a1, unsigned int a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_DCMD_PD_GET_INFO_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v2 = <span class=\"supfact\">tv</span>.tv_usec;\n    v3 = <span class=\"supfact\">tv</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, a1, a2);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v7</span>;\n}", "code_t": "void __cdecl nocheck__trace_megasas_dcmd_pd_get_info(int cmd, int pd_id) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_DCMD_PD_GET_INFO_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v2 = <span class=\"supfact\">_now</span>.tv_usec;\n    v3 = <span class=\"supfact\">_now</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, (unsigned int)cmd, (unsigned int)pd_id);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "loopunit", "repo_name": "OpenFrameworks-ng", "path": "loopunit/OpenFrameworks-ng/136e6a0412a4b865c357dd9335358dbdc4bbeeb38316cd841651815caf9512f6", "path_in_repo": "loopunit/OpenFrameworks-ng/extern/trees/FreeImage/Source/LibOpenJPEG/jp2.o", "objdump": "00000000000000fe <jp2_read_ihdr>:\n      fe:\t55                   \tpush   %rbp\n      ff:\t48 89 e5             \tmov    %rsp,%rbp\n     102:\t48 83 ec 30          \tsub    $0x30,%rsp\n     106:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     10a:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     10e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     112:\t48 8b 00             \tmov    (%rax),%rax\n     115:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     119:\t48 8d 55 ec          \tlea    -0x14(%rbp),%rdx\n     11d:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     121:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     125:\t48 89 ce             \tmov    %rcx,%rsi\n     128:\t48 89 c7             \tmov    %rax,%rdi\n     12b:\te8 d0 fe ff ff       \tcallq  0 <jp2_read_boxhdr>\n     130:\t85 c0                \ttest   %eax,%eax\n     132:\t75 27                \tjne    15b <jp2_read_ihdr+0x5d>\n     134:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     138:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 13f <jp2_read_ihdr+0x41>\n     13f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     144:\t48 89 c7             \tmov    %rax,%rdi\n     147:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     14c:\te8 00 00 00 00       \tcallq  151 <jp2_read_ihdr+0x53>\n     151:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     156:\te9 45 01 00 00       \tjmpq   2a0 <jp2_read_ihdr+0x1a2>\n     15b:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n     15e:\t3d 72 64 68 69       \tcmp    $0x69686472,%eax\n     163:\t74 27                \tje     18c <jp2_read_ihdr+0x8e>\n     165:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     169:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 170 <jp2_read_ihdr+0x72>\n     170:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     175:\t48 89 c7             \tmov    %rax,%rdi\n     178:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     17d:\te8 00 00 00 00       \tcallq  182 <jp2_read_ihdr+0x84>\n     182:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     187:\te9 14 01 00 00       \tjmpq   2a0 <jp2_read_ihdr+0x1a2>\n     18c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     190:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     195:\t48 89 c7             \tmov    %rax,%rdi\n     198:\te8 00 00 00 00       \tcallq  19d <jp2_read_ihdr+0x9f>\n     19d:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     1a1:\t89 42 14             \tmov    %eax,0x14(%rdx)\n     1a4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     1a8:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     1ad:\t48 89 c7             \tmov    %rax,%rdi\n     1b0:\te8 00 00 00 00       \tcallq  1b5 <jp2_read_ihdr+0xb7>\n     1b5:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     1b9:\t89 42 10             \tmov    %eax,0x10(%rdx)\n     1bc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     1c0:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     1c5:\t48 89 c7             \tmov    %rax,%rdi\n     1c8:\te8 00 00 00 00       \tcallq  1cd <jp2_read_ihdr+0xcf>\n     1cd:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     1d1:\t89 42 18             \tmov    %eax,0x18(%rdx)\n     1d4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     1d8:\t8b 40 18             \tmov    0x18(%rax),%eax\n     1db:\t89 c2                \tmov    %eax,%edx\n     1dd:\t48 89 d0             \tmov    %rdx,%rax\n     1e0:\t48 01 c0             \tadd    %rax,%rax\n     1e3:\t48 01 d0             \tadd    %rdx,%rax\n     1e6:\t48 c1 e0 02          \tshl    $0x2,%rax\n     1ea:\t48 89 c7             \tmov    %rax,%rdi\n     1ed:\te8 00 00 00 00       \tcallq  1f2 <jp2_read_ihdr+0xf4>\n     1f2:\t48 89 c2             \tmov    %rax,%rdx\n     1f5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     1f9:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n     1fd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     201:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     206:\t48 89 c7             \tmov    %rax,%rdi\n     209:\te8 00 00 00 00       \tcallq  20e <jp2_read_ihdr+0x110>\n     20e:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     212:\t89 42 1c             \tmov    %eax,0x1c(%rdx)\n     215:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     219:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     21e:\t48 89 c7             \tmov    %rax,%rdi\n     221:\te8 00 00 00 00       \tcallq  226 <jp2_read_ihdr+0x128>\n     226:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     22a:\t89 42 20             \tmov    %eax,0x20(%rdx)\n     22d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     231:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     236:\t48 89 c7             \tmov    %rax,%rdi\n     239:\te8 00 00 00 00       \tcallq  23e <jp2_read_ihdr+0x140>\n     23e:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     242:\t89 42 24             \tmov    %eax,0x24(%rdx)\n     245:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     249:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     24e:\t48 89 c7             \tmov    %rax,%rdi\n     251:\te8 00 00 00 00       \tcallq  256 <jp2_read_ihdr+0x158>\n     256:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     25a:\t89 42 28             \tmov    %eax,0x28(%rdx)\n     25d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     261:\t48 89 c7             \tmov    %rax,%rdi\n     264:\te8 00 00 00 00       \tcallq  269 <jp2_read_ihdr+0x16b>\n     269:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n     26c:\t29 d0                \tsub    %edx,%eax\n     26e:\t89 c2                \tmov    %eax,%edx\n     270:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     273:\t39 c2                \tcmp    %eax,%edx\n     275:\t74 24                \tje     29b <jp2_read_ihdr+0x19d>\n     277:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     27b:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 282 <jp2_read_ihdr+0x184>\n     282:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     287:\t48 89 c7             \tmov    %rax,%rdi\n     28a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     28f:\te8 00 00 00 00       \tcallq  294 <jp2_read_ihdr+0x196>\n     294:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     299:\teb 05                \tjmp    2a0 <jp2_read_ihdr+0x1a2>\n     29b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     2a0:\tc9                   \tleaveq \n     2a1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall jp2_read_ihdr(__int64 a1, __int64 a2) {\n  __int64 result;\n  int v3;\n  int <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = *(_QWORD *)a1;\n  if ((unsigned int)jp2_read_boxhdr(<span class=\"supfact\">v5</span>, a2,\n                                    <span class=\"supfact\">v4</span>)) {\n    if (<span class=\"supfact\">v4</span>[Number] == Number) {\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_QWORD *)(a1 + Number) =\n          malloc(Number L * *(unsigned int *)(a1 + Number));\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      v3 = cio_tell(a2);\n      if (v3 - <span class=\"supfact\">v4</span>[Number] == <span class=\"supfact\">v4</span>[Number]) {\n        result = Number L;\n      } else {\n        opj_event_msg(<span class=\"supfact\">v5</span>, Number L, String);\n        result = Number L;\n      }\n    } else {\n      opj_event_msg(<span class=\"supfact\">v5</span>, Number L, String);\n      result = Number L;\n    }\n  } else {\n    opj_event_msg(<span class=\"supfact\">v5</span>, Number L, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "opj_bool __cdecl jp2_read_ihdr(opj_jp2_t *jp2, opj_cio_t *cio) {\n  opj_bool result;\n  int v3;\n  opj_jp2_box_t <span class=\"supfact\">box</span>;\n  opj_common_ptr <span class=\"supfact\">cinfo</span>;\n  <span class=\"supfact\">cinfo</span> = jp2-><span class=\"supfact\">cinfo</span>;\n  if (jp2_read_boxhdr(<span class=\"supfact\">cinfo</span>, cio, &<span class=\"supfact\">box</span>)) {\n    if (<span class=\"supfact\">box</span>.type == Number) {\n      jp2->h = cio_read(cio, Number L);\n      jp2->w = cio_read(cio, Number L);\n      jp2->numcomps = cio_read(cio, Number L);\n      jp2->comps = (opj_jp2_comps_t *)malloc(Number L * jp2->numcomps);\n      jp2->bpc = cio_read(cio, Number L);\n      jp2->C = cio_read(cio, Number L);\n      jp2->UnkC = cio_read(cio, Number L);\n      jp2->IPR = cio_read(cio, Number L);\n      v3 = cio_tell(cio);\n      if (v3 - <span class=\"supfact\">box</span>.init_pos == <span class=\"supfact\">box</span>.length) {\n        result = Number;\n      } else {\n        opj_event_msg(<span class=\"supfact\">cinfo</span>, Number L, String);\n        result = Number;\n      }\n    } else {\n      opj_event_msg(<span class=\"supfact\">cinfo</span>, Number L, String);\n      result = Number;\n    }\n  } else {\n    opj_event_msg(<span class=\"supfact\">cinfo</span>, Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct opj_jp2_box_t { int length; int type; int init_pos; }", "ref_name": "box", "ref_type": "struct opj_jp2_box_t { int length; int type; int init_pos; }"}], "body_in_train": false}, {"repo_owner": "mkem114", "repo_name": "COMPSYS-304-Assignment-3", "path": "mkem114/COMPSYS-304-Assignment-3/d17466d4c20c57fc6298066c69eae9574b0c9f88b620864106dc688db54dcdd2", "path_in_repo": "mkem114/COMPSYS-304-Assignment-3/CS304-A3-mkem114-6273632/task_2/matrix1", "objdump": "0000000000401192 <getTime>:\n  401192:\t55                   \tpush   %rbp\n  401193:\t48 89 e5             \tmov    %rsp,%rbp\n  401196:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40119a:\t90                   \tnop\n  40119b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40119f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4011a4:\t48 89 c7             \tmov    %rax,%rdi\n  4011a7:\te8 a4 fe ff ff       \tcallq  401050 <gettimeofday@plt>\n  4011ac:\t85 c0                \ttest   %eax,%eax\n  4011ae:\t75 eb                \tjne    40119b <getTime+0x9>\n  4011b0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4011b4:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  4011b9:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n  4011be:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4011c2:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  4011c7:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n  4011cc:\tf2 0f 10 45 f0       \tmovsd  -0x10(%rbp),%xmm0\n  4011d1:\tf2 0f 10 0d c7 0e 00 \tmovsd  0xec7(%rip),%xmm1        # 4020a0 <_IO_stdin_used+0xa0>\n  4011d8:\t00 \n  4011d9:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n  4011dd:\tf2 0f 10 4d f8       \tmovsd  -0x8(%rbp),%xmm1\n  4011e2:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n  4011e6:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n  4011eb:\tf2 0f 10 45 f8       \tmovsd  -0x8(%rbp),%xmm0\n  4011f0:\tc9                   \tleaveq \n  4011f1:\tc3                   \tretq   ", "code_s": "double getTime() {\n  struct timeval <span class=\"supfact\">tv</span>;\n  while (gettimeofday(&<span class=\"supfact\">tv</span>, Number L))\n    ;\n  return (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_usec) / Number +\n         (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_sec);\n}", "code_t": "double __cdecl getTime() {\n  timeval <span class=\"supfact\">t</span>;\n  while (gettimeofday(&<span class=\"supfact\">t</span>, Number L))\n    ;\n  return (double)SLODWORD(<span class=\"supfact\">t</span>.tv_usec) / Number +\n         (double)SLODWORD(<span class=\"supfact\">t</span>.tv_sec);\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "t", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "ananas-project", "repo_name": "ffmpeg", "path": "ananas-project/ffmpeg/4809b56d66777345ad3a44e6c3915d267480d64d1154bc6ee19b1635ebc9c73b", "path_in_repo": "ananas-project/ffmpeg//libavformat/omadec.o", "objdump": "00000000000003c8 <nprobe>:\n     3c8:\t48 81 ec d8 01 00 00 \tsub    $0x1d8,%rsp\n     3cf:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n     3d4:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n     3d9:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n     3dd:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n     3e1:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     3e6:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     3ea:\t48 89 84 24 b8 01 00 \tmov    %rax,0x1b8(%rsp)\n     3f1:\t00 \n     3f2:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n     3f8:\t74 1f                \tje     419 <nprobe+0x51>\n     3fa:\t48 83 3c 24 00       \tcmpq   $0x0,(%rsp)\n     3ff:\t74 18                \tje     419 <nprobe+0x51>\n     401:\t48 8b 84 24 b8 01 00 \tmov    0x1b8(%rsp),%rax\n     408:\t00 \n     409:\t0f b7 40 0c          \tmovzwl 0xc(%rax),%eax\n     40d:\t0f b7 c0             \tmovzwl %ax,%eax\n     410:\t83 c0 14             \tadd    $0x14,%eax\n     413:\t39 44 24 0c          \tcmp    %eax,0xc(%rsp)\n     417:\t73 0a                \tjae    423 <nprobe+0x5b>\n     419:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     41e:\te9 d3 02 00 00       \tjmpq   6f6 <nprobe+0x32e>\n     423:\t48 8b 84 24 b8 01 00 \tmov    0x1b8(%rsp),%rax\n     42a:\t00 \n     42b:\t0f b7 40 0c          \tmovzwl 0xc(%rax),%eax\n     42f:\t0f b7 c0             \tmovzwl %ax,%eax\n     432:\t83 c0 10             \tadd    $0x10,%eax\n     435:\t48 98                \tcltq   \n     437:\t48 89 84 24 c8 01 00 \tmov    %rax,0x1c8(%rsp)\n     43e:\t00 \n     43f:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n     444:\t48 8b 84 24 c8 01 00 \tmov    0x1c8(%rsp),%rax\n     44b:\t00 \n     44c:\t48 01 d0             \tadd    %rdx,%rax\n     44f:\tba 04 00 00 00       \tmov    $0x4,%edx\n     454:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     459:\t48 89 c7             \tmov    %rax,%rdi\n     45c:\te8 00 00 00 00       \tcallq  461 <nprobe+0x99>\n     461:\t85 c0                \ttest   %eax,%eax\n     463:\t75 09                \tjne    46e <nprobe+0xa6>\n     465:\t48 83 84 24 c8 01 00 \taddq   $0x20,0x1c8(%rsp)\n     46c:\t00 20 \n     46e:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n     472:\t48 8b 94 24 c8 01 00 \tmov    0x1c8(%rsp),%rdx\n     479:\t00 \n     47a:\t48 83 c2 2c          \tadd    $0x2c,%rdx\n     47e:\t48 39 d0             \tcmp    %rdx,%rax\n     481:\t73 0a                \tjae    48d <nprobe+0xc5>\n     483:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     488:\te9 69 02 00 00       \tjmpq   6f6 <nprobe+0x32e>\n     48d:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n     492:\t48 8b 84 24 c8 01 00 \tmov    0x1c8(%rsp),%rax\n     499:\t00 \n     49a:\t48 01 d0             \tadd    %rdx,%rax\n     49d:\t8b 00                \tmov    (%rax),%eax\n     49f:\t89 84 24 b0 01 00 00 \tmov    %eax,0x1b0(%rsp)\n     4a6:\t8b 84 24 b0 01 00 00 \tmov    0x1b0(%rsp),%eax\n     4ad:\tc1 e0 08             \tshl    $0x8,%eax\n     4b0:\t0f b7 d0             \tmovzwl %ax,%edx\n     4b3:\t8b 84 24 b0 01 00 00 \tmov    0x1b0(%rsp),%eax\n     4ba:\tc1 e8 08             \tshr    $0x8,%eax\n     4bd:\t0f b6 c0             \tmovzbl %al,%eax\n     4c0:\t09 d0                \tor     %edx,%eax\n     4c2:\tc1 e0 10             \tshl    $0x10,%eax\n     4c5:\t89 c1                \tmov    %eax,%ecx\n     4c7:\t8b 84 24 b0 01 00 00 \tmov    0x1b0(%rsp),%eax\n     4ce:\tc1 e8 10             \tshr    $0x10,%eax\n     4d1:\tc1 e0 08             \tshl    $0x8,%eax\n     4d4:\t0f b7 c0             \tmovzwl %ax,%eax\n     4d7:\t8b 94 24 b0 01 00 00 \tmov    0x1b0(%rsp),%edx\n     4de:\tc1 ea 18             \tshr    $0x18,%edx\n     4e1:\t09 d0                \tor     %edx,%eax\n     4e3:\t09 c1                \tor     %eax,%ecx\n     4e5:\t89 ca                \tmov    %ecx,%edx\n     4e7:\t48 8b 84 24 b8 01 00 \tmov    0x1b8(%rsp),%rax\n     4ee:\t00 \n     4ef:\t8b 40 14             \tmov    0x14(%rax),%eax\n     4f2:\t39 c2                \tcmp    %eax,%edx\n     4f4:\t74 1c                \tje     512 <nprobe+0x14a>\n     4f6:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     4fb:\tba 00 00 00 00       \tmov    $0x0,%edx\n     500:\tbe 30 00 00 00       \tmov    $0x30,%esi\n     505:\t48 89 c7             \tmov    %rax,%rdi\n     508:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     50d:\te8 00 00 00 00       \tcallq  512 <nprobe+0x14a>\n     512:\t48 8b 84 24 c8 01 00 \tmov    0x1c8(%rsp),%rax\n     519:\t00 \n     51a:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n     51e:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     523:\t48 01 d0             \tadd    %rdx,%rax\n     526:\t8b 00                \tmov    (%rax),%eax\n     528:\t89 84 24 a8 01 00 00 \tmov    %eax,0x1a8(%rsp)\n     52f:\t8b 84 24 a8 01 00 00 \tmov    0x1a8(%rsp),%eax\n     536:\tc1 e0 08             \tshl    $0x8,%eax\n     539:\t0f b7 d0             \tmovzwl %ax,%edx\n     53c:\t8b 84 24 a8 01 00 00 \tmov    0x1a8(%rsp),%eax\n     543:\tc1 e8 08             \tshr    $0x8,%eax\n     546:\t0f b6 c0             \tmovzbl %al,%eax\n     549:\t09 d0                \tor     %edx,%eax\n     54b:\tc1 e0 10             \tshl    $0x10,%eax\n     54e:\t89 c1                \tmov    %eax,%ecx\n     550:\t8b 84 24 a8 01 00 00 \tmov    0x1a8(%rsp),%eax\n     557:\tc1 e8 10             \tshr    $0x10,%eax\n     55a:\tc1 e0 08             \tshl    $0x8,%eax\n     55d:\t0f b7 c0             \tmovzwl %ax,%eax\n     560:\t8b 94 24 a8 01 00 00 \tmov    0x1a8(%rsp),%edx\n     567:\tc1 ea 18             \tshr    $0x18,%edx\n     56a:\t09 d0                \tor     %edx,%eax\n     56c:\t09 c8                \tor     %ecx,%eax\n     56e:\t89 84 24 b4 01 00 00 \tmov    %eax,0x1b4(%rsp)\n     575:\t48 8b 84 24 c8 01 00 \tmov    0x1c8(%rsp),%rax\n     57c:\t00 \n     57d:\t48 8d 50 24          \tlea    0x24(%rax),%rdx\n     581:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     586:\t48 01 d0             \tadd    %rdx,%rax\n     589:\t8b 00                \tmov    (%rax),%eax\n     58b:\t89 84 24 ac 01 00 00 \tmov    %eax,0x1ac(%rsp)\n     592:\t8b 84 24 ac 01 00 00 \tmov    0x1ac(%rsp),%eax\n     599:\tc1 e0 08             \tshl    $0x8,%eax\n     59c:\t0f b7 d0             \tmovzwl %ax,%edx\n     59f:\t8b 84 24 ac 01 00 00 \tmov    0x1ac(%rsp),%eax\n     5a6:\tc1 e8 08             \tshr    $0x8,%eax\n     5a9:\t0f b6 c0             \tmovzbl %al,%eax\n     5ac:\t09 d0                \tor     %edx,%eax\n     5ae:\tc1 e0 10             \tshl    $0x10,%eax\n     5b1:\t89 c1                \tmov    %eax,%ecx\n     5b3:\t8b 84 24 ac 01 00 00 \tmov    0x1ac(%rsp),%eax\n     5ba:\tc1 e8 10             \tshr    $0x10,%eax\n     5bd:\tc1 e0 08             \tshl    $0x8,%eax\n     5c0:\t0f b7 c0             \tmovzwl %ax,%eax\n     5c3:\t8b 94 24 ac 01 00 00 \tmov    0x1ac(%rsp),%edx\n     5ca:\tc1 ea 18             \tshr    $0x18,%edx\n     5cd:\t09 d0                \tor     %edx,%eax\n     5cf:\t09 c8                \tor     %ecx,%eax\n     5d1:\tc1 e8 04             \tshr    $0x4,%eax\n     5d4:\t89 84 24 c4 01 00 00 \tmov    %eax,0x1c4(%rsp)\n     5db:\t8b 94 24 b4 01 00 00 \tmov    0x1b4(%rsp),%edx\n     5e2:\t48 8b 84 24 c8 01 00 \tmov    0x1c8(%rsp),%rax\n     5e9:\t00 \n     5ea:\t48 01 d0             \tadd    %rdx,%rax\n     5ed:\t48 83 c0 2c          \tadd    $0x2c,%rax\n     5f1:\t48 89 84 24 c8 01 00 \tmov    %rax,0x1c8(%rsp)\n     5f8:\t00 \n     5f9:\t8b 84 24 c4 01 00 00 \tmov    0x1c4(%rsp),%eax\n     600:\t48 c1 e0 04          \tshl    $0x4,%rax\n     604:\t48 89 c2             \tmov    %rax,%rdx\n     607:\t48 8b 84 24 c8 01 00 \tmov    0x1c8(%rsp),%rax\n     60e:\t00 \n     60f:\t48 01 c2             \tadd    %rax,%rdx\n     612:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n     616:\t48 39 c2             \tcmp    %rax,%rdx\n     619:\t76 0a                \tjbe    625 <nprobe+0x25d>\n     61b:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     620:\te9 d1 00 00 00       \tjmpq   6f6 <nprobe+0x32e>\n     625:\t48 8b 34 24          \tmov    (%rsp),%rsi\n     629:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n     62e:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n     633:\tba c0 00 00 00       \tmov    $0xc0,%edx\n     638:\t48 89 c7             \tmov    %rax,%rdi\n     63b:\te8 00 00 00 00       \tcallq  640 <nprobe+0x278>\n     640:\te9 93 00 00 00       \tjmpq   6d8 <nprobe+0x310>\n     645:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n     64a:\t48 8b 84 24 c8 01 00 \tmov    0x1c8(%rsp),%rax\n     651:\t00 \n     652:\t48 01 c2             \tadd    %rax,%rdx\n     655:\t48 8b 84 24 b8 01 00 \tmov    0x1b8(%rsp),%rax\n     65c:\t00 \n     65d:\t48 8d 70 18          \tlea    0x18(%rax),%rsi\n     661:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n     666:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n     66c:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     672:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n     677:\t48 89 c7             \tmov    %rax,%rdi\n     67a:\te8 00 00 00 00       \tcallq  67f <nprobe+0x2b7>\n     67f:\t48 8b 84 24 b8 01 00 \tmov    0x1b8(%rsp),%rax\n     686:\t00 \n     687:\t48 8d 70 18          \tlea    0x18(%rax),%rsi\n     68b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     690:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n     695:\tba 00 00 00 00       \tmov    $0x0,%edx\n     69a:\t48 89 c7             \tmov    %rax,%rdi\n     69d:\te8 f1 f9 ff ff       \tcallq  93 <kset>\n     6a2:\t48 8b 84 24 b8 01 00 \tmov    0x1b8(%rsp),%rax\n     6a9:\t00 \n     6aa:\t48 8d 48 18          \tlea    0x18(%rax),%rcx\n     6ae:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n     6b2:\t48 8b 74 24 10       \tmov    0x10(%rsp),%rsi\n     6b7:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     6bc:\t48 89 c7             \tmov    %rax,%rdi\n     6bf:\te8 f9 fa ff ff       \tcallq  1bd <rprobe>\n     6c4:\t85 c0                \ttest   %eax,%eax\n     6c6:\t75 07                \tjne    6cf <nprobe+0x307>\n     6c8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6cd:\teb 27                \tjmp    6f6 <nprobe+0x32e>\n     6cf:\t48 83 84 24 c8 01 00 \taddq   $0x10,0x1c8(%rsp)\n     6d6:\t00 10 \n     6d8:\t8b 84 24 c4 01 00 00 \tmov    0x1c4(%rsp),%eax\n     6df:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     6e2:\t89 94 24 c4 01 00 00 \tmov    %edx,0x1c4(%rsp)\n     6e9:\t85 c0                \ttest   %eax,%eax\n     6eb:\t0f 85 54 ff ff ff    \tjne    645 <nprobe+0x27d>\n     6f1:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     6f6:\t48 81 c4 d8 01 00 00 \tadd    $0x1d8,%rsp\n     6fd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall nprobe(__int64 a1, __int64 a2, unsigned int a3, __int64 a4) {\n  char <span class=\"supfact\">v8</span>[Number];\n  unsigned int <span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">v11</span>;\n  unsigned int <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  unsigned int <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v13</span> = *(_QWORD *)(a1 + Number);\n  if (!a2 || !a4 ||\n      a3 < (unsigned int)*(unsigned __int16 *)(<span class=\"supfact\">v13</span> + Number) +\n               Number)\n    return Number;\n  <span class=\"supfact\">v15</span> =\n      *(unsigned __int16 *)(<span class=\"supfact\">v13</span> + Number) + Number;\n  if (!memcmp((const void *)(a2 + <span class=\"supfact\">v15</span>), String, Number))\n    <span class=\"supfact\">v15</span> += Number L;\n  if (a3 < (unsigned __int64)(<span class=\"supfact\">v15</span> + Number))\n    return Number;\n  <span class=\"supfact\">v11</span> = *(_DWORD *)(a2 + <span class=\"supfact\">v15</span>);\n  if ((HIBYTE(<span class=\"supfact\">v11</span>) |\n       (unsigned __int16)(HIWORD(<span class=\"supfact\">v11</span>) << Number) |\n       (((unsigned __int16)((_WORD)<span class=\"supfact\">v11</span> << Number) |\n         BYTE1(<span class=\"supfact\">v11</span>))\n        << Number)) != *(_DWORD *)(<span class=\"supfact\">v13</span> + Number))\n    av_log(a1, Number L, String);\n  <span class=\"supfact\">v9</span> = *(_DWORD *)(<span class=\"supfact\">v15</span> + Number + a2);\n  <span class=\"supfact\">v12</span> =\n      (((unsigned __int16)((_WORD)<span class=\"supfact\">v9</span> << Number) |\n        BYTE1(<span class=\"supfact\">v9</span>))\n       << Number) |\n      HIBYTE(<span class=\"supfact\">v9</span>) |\n      (unsigned __int16)(HIWORD(<span class=\"supfact\">v9</span>) << Number);\n  <span class=\"supfact\">v10</span> = *(_DWORD *)(<span class=\"supfact\">v15</span> + Number + a2);\n  <span class=\"supfact\">v14</span> =\n      (unsigned int)((((unsigned __int16)((_WORD)<span class=\"supfact\">v10</span>\n                                          << Number) |\n                       BYTE1(<span class=\"supfact\">v10</span>))\n                      << Number) |\n                     HIBYTE(<span class=\"supfact\">v10</span>) |\n                     (unsigned __int16)(HIWORD(<span class=\"supfact\">v10</span>)\n                                        << Number)) >>\n      Number;\n  <span class=\"supfact\">v15</span> += <span class=\"supfact\">v12</span> + Number L;\n  if (<span class=\"supfact\">v15</span> + Number * (unsigned __int64)<span class=\"supfact\">v14</span> > a3)\n    return Number;\n  av_des_init(<span class=\"supfact\">v8</span>, a4, Number L, Number L);\n  while (<span class=\"supfact\">v14</span>--) {\n    av_des_crypt(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v13</span> + Number,\n                 <span class=\"supfact\">v15</span> + a2, Number L, Number L, Number L);\n    kset(a1, (_QWORD *)(<span class=\"supfact\">v13</span> + Number), Number L, Number);\n    if (!(unsigned int)rprobe(a1, a2, a3, <span class=\"supfact\">v13</span> + Number))\n      return Number L;\n    <span class=\"supfact\">v15</span> += Number L;\n  }\n  return Number;\n}", "code_t": "int __cdecl nprobe(AVFormatContext_0 *s, uint8_t *enc_header, unsigned int size,\n                   const uint8_t *n_val) {\n  AVDES <span class=\"supfact\">av_des</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">v11</span>;\n  uint32_t <span class=\"supfact\">taglen</span>;\n  OMAContext_0 *<span class=\"supfact\">oc</span>;\n  uint32_t <span class=\"supfact\">datalen</span>;\n  uint64_t <span class=\"supfact\">pos</span>;\n  <span class=\"supfact\">oc</span> = (OMAContext_0 *)s->priv_data;\n  if (!enc_header || !n_val ||\n      size < (unsigned int)<span class=\"supfact\">oc</span>->k_size + Number)\n    return Number;\n  <span class=\"supfact\">pos</span> = <span class=\"supfact\">oc</span>->k_size + Number;\n  if (!memcmp(&enc_header[<span class=\"supfact\">pos</span>], String, Number))\n    <span class=\"supfact\">pos</span> += Number L;\n  if (size < <span class=\"supfact\">pos</span> + Number)\n    return Number;\n  <span class=\"supfact\">v11</span> = *(_DWORD *)&enc_header[<span class=\"supfact\">pos</span>];\n  if ((HIBYTE(<span class=\"supfact\">v11</span>) |\n       (unsigned __int16)(HIWORD(<span class=\"supfact\">v11</span>) << Number) |\n       (((unsigned __int16)((_WORD)<span class=\"supfact\">v11</span> << Number) |\n         BYTE1(<span class=\"supfact\">v11</span>))\n        << Number)) != <span class=\"supfact\">oc</span>->rid)\n    av_log(s, Number L, String);\n  <span class=\"supfact\">v9</span> = *(_DWORD *)&enc_header[<span class=\"supfact\">pos</span> + Number];\n  <span class=\"supfact\">taglen</span> =\n      (((unsigned __int16)((_WORD)<span class=\"supfact\">v9</span> << Number) |\n        BYTE1(<span class=\"supfact\">v9</span>))\n       << Number) |\n      HIBYTE(<span class=\"supfact\">v9</span>) |\n      (unsigned __int16)(HIWORD(<span class=\"supfact\">v9</span>) << Number);\n  <span class=\"supfact\">v10</span> = *(_DWORD *)&enc_header[<span class=\"supfact\">pos</span> + Number];\n  <span class=\"supfact\">datalen</span> =\n      (unsigned int)((((unsigned __int16)((_WORD)<span class=\"supfact\">v10</span>\n                                          << Number) |\n                       BYTE1(<span class=\"supfact\">v10</span>))\n                      << Number) |\n                     HIBYTE(<span class=\"supfact\">v10</span>) |\n                     (unsigned __int16)(HIWORD(<span class=\"supfact\">v10</span>)\n                                        << Number)) >>\n      Number;\n  <span class=\"supfact\">pos</span> += <span class=\"supfact\">taglen</span> + Number L;\n  if (<span class=\"supfact\">pos</span> + Number L * <span class=\"supfact\">datalen</span> > size)\n    return Number;\n  av_des_init(&<span class=\"supfact\">av_des</span>, n_val, Number L, Number L);\n  while (<span class=\"supfact\">datalen</span>--) {\n    av_des_crypt(&<span class=\"supfact\">av_des</span>, <span class=\"supfact\">oc</span>->r_val,\n                 &enc_header[<span class=\"supfact\">pos</span>], Number L, Number L,\n                 Number L);\n    kset(s, <span class=\"supfact\">oc</span>->r_val, Number L, Number);\n    if (!rprobe(s, enc_header, size, <span class=\"supfact\">oc</span>->r_val))\n      return Number;\n    <span class=\"supfact\">pos</span> += Number L;\n  }\n  return Number;\n}", "var": [{"name": "v8", "type": "int16_t[208]", "ref_name": "av_des", "ref_type": "struct AVDES { uint64_t[3][16] round_keys; int triple_des; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "caioketo", "repo_name": "journeymanmod", "path": "caioketo/journeymanmod/29e7125c5acd1c8bfe36c881bc1969c85543d7e9020c2303712d6dccca7ceb8e", "path_in_repo": "caioketo/journeymanmod/4.1.2/tools/perf/util/trace-event-info.o", "objdump": "0000000000001061 <read_proc_kallsyms>:\n    1061:\t55                   \tpush   %rbp\n    1062:\t48 89 e5             \tmov    %rsp,%rbp\n    1065:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    106c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1073:\t00 00 \n    1075:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1079:\t31 c0                \txor    %eax,%eax\n    107b:\t48 c7 85 58 ff ff ff \tmovq   $0x0,-0xa8(%rbp)\n    1082:\t00 00 00 00 \n    1086:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n    108d:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    1094:\t48 89 d6             \tmov    %rdx,%rsi\n    1097:\t48 89 c7             \tmov    %rax,%rdi\n    109a:\te8 00 00 00 00       \tcallq  109f <read_proc_kallsyms+0x3e>\n    109f:\t89 85 50 ff ff ff    \tmov    %eax,-0xb0(%rbp)\n    10a5:\t83 bd 50 ff ff ff 00 \tcmpl   $0x0,-0xb0(%rbp)\n    10ac:\t79 20                \tjns    10ce <read_proc_kallsyms+0x6d>\n    10ae:\tc7 85 4c ff ff ff 00 \tmovl   $0x0,-0xb4(%rbp)\n    10b5:\t00 00 00 \n    10b8:\t48 8d 85 4c ff ff ff \tlea    -0xb4(%rbp),%rax\n    10bf:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    10c4:\t48 89 c7             \tmov    %rax,%rdi\n    10c7:\te8 73 f2 ff ff       \tcallq  33f <write_or_die>\n    10cc:\teb 65                \tjmp    1133 <read_proc_kallsyms+0xd2>\n    10ce:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    10d5:\t48 89 c7             \tmov    %rax,%rdi\n    10d8:\te8 20 f5 ff ff       \tcallq  5fd <get_size>\n    10dd:\t89 85 4c ff ff ff    \tmov    %eax,-0xb4(%rbp)\n    10e3:\t48 8d 85 4c ff ff ff \tlea    -0xb4(%rbp),%rax\n    10ea:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    10ef:\t48 89 c7             \tmov    %rax,%rdi\n    10f2:\te8 48 f2 ff ff       \tcallq  33f <write_or_die>\n    10f7:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    10fe:\t48 89 c7             \tmov    %rax,%rdi\n    1101:\te8 cb f3 ff ff       \tcallq  4d1 <copy_file>\n    1106:\t89 85 54 ff ff ff    \tmov    %eax,-0xac(%rbp)\n    110c:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n    1112:\t39 85 54 ff ff ff    \tcmp    %eax,-0xac(%rbp)\n    1118:\t74 19                \tje     1133 <read_proc_kallsyms+0xd2>\n    111a:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    1121:\t48 89 c6             \tmov    %rax,%rsi\n    1124:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1129:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    112e:\te8 cd ee ff ff       \tcallq  0 <die>\n    1133:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1137:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    113e:\t00 00 \n    1140:\t74 05                \tje     1147 <read_proc_kallsyms+0xe6>\n    1142:\te8 00 00 00 00       \tcallq  1147 <read_proc_kallsyms+0xe6>\n    1147:\tc9                   \tleaveq \n    1148:\tc3                   \tretq   ", "code_s": "unsigned __int64 read_proc_kallsyms() {\n  __int64 v0;\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  char *<span class=\"supfact\">file</span>;\n  struct stat64 <span class=\"supfact\">v9</span>;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  <span class=\"supfact\">file</span> = String;\n  <span class=\"supfact\">v6</span> = stat64(String, &<span class=\"supfact\">v9</span>);\n  if (<span class=\"supfact\">v6</span> >= Number) {\n    <span class=\"supfact\">v5</span> = get_size(<span class=\"supfact\">file</span>);\n    write_or_die(&<span class=\"supfact\">v5</span>, Number);\n    <span class=\"supfact\">v7</span> = copy_file(<span class=\"supfact\">file</span>);\n    if (<span class=\"supfact\">v7</span> != <span class=\"supfact\">v5</span>)\n      die(String, (__int64)<span class=\"supfact\">file</span>, v0, v1, v2, v3);\n  } else {\n    <span class=\"supfact\">v5</span> = Number;\n    write_or_die(&<span class=\"supfact\">v5</span>, Number);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v10</span>;\n}", "code_t": "void __cdecl read_proc_kallsyms() {\n  unsigned int <span class=\"supfact\">size</span>;\n  int <span class=\"supfact\">ret</span>;\n  unsigned int <span class=\"supfact\">check_size</span>;\n  const char *<span class=\"supfact\">path</span>;\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  <span class=\"supfact\">path</span> = String;\n  <span class=\"supfact\">ret</span> = stat64(String, (struct stat64 *)&<span class=\"supfact\">st</span>);\n  if (<span class=\"supfact\">ret</span> >= Number) {\n    <span class=\"supfact\">size</span> = get_size(<span class=\"supfact\">path</span>);\n    write_or_die(&<span class=\"supfact\">size</span>, Number);\n    <span class=\"supfact\">check_size</span> = copy_file(<span class=\"supfact\">path</span>);\n    if (<span class=\"supfact\">check_size</span> != <span class=\"supfact\">size</span>)\n      die(String, <span class=\"supfact\">path</span>);\n  } else {\n    <span class=\"supfact\">size</span> = Number;\n    write_or_die(&<span class=\"supfact\">size</span>, Number);\n  }\n}", "var": [{"name": "v9", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "bdh1011", "repo_name": "realmapia_server", "path": "bdh1011/realmapia_server/0c00aee89daec2c8bc89cc559df2e5079d4040206a3b7bdf4991f7338dcbf135", "path_in_repo": "bdh1011/realmapia_server/redis/redis-3.0.4/deps/lua/src/luac", "objdump": "0000000000403367 <lua_tonumber>:\n  403367:\t55                   \tpush   %rbp\n  403368:\t48 89 e5             \tmov    %rsp,%rbp\n  40336b:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40336f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  403373:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  403376:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  403379:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40337d:\t89 d6                \tmov    %edx,%esi\n  40337f:\t48 89 c7             \tmov    %rax,%rdi\n  403382:\te8 82 f4 ff ff       \tcallq  402809 <index2adr>\n  403387:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40338b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40338f:\t8b 40 08             \tmov    0x8(%rax),%eax\n  403392:\t83 f8 03             \tcmp    $0x3,%eax\n  403395:\t74 1e                \tje     4033b5 <lua_tonumber+0x4e>\n  403397:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  40339b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40339f:\t48 89 d6             \tmov    %rdx,%rsi\n  4033a2:\t48 89 c7             \tmov    %rax,%rdi\n  4033a5:\te8 50 f4 00 00       \tcallq  4127fa <luaV_tonumber>\n  4033aa:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4033ae:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4033b3:\t74 0a                \tje     4033bf <lua_tonumber+0x58>\n  4033b5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4033b9:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n  4033bd:\teb 04                \tjmp    4033c3 <lua_tonumber+0x5c>\n  4033bf:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  4033c3:\tc9                   \tleaveq \n  4033c4:\tc3                   \tretq   ", "code_s": "double __fastcall lua_tonumber(__int64 a1, int a2) {\n  double result;\n  char <span class=\"supfact\">v3</span>[Number];\n  double *<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = (double *)index2adr(a1, a2);\n  if (*((_DWORD *)<span class=\"supfact\">v4</span> + Number) == Number ||\n      (<span class=\"supfact\">v4</span> = (double *)luaV_tonumber(\n           <span class=\"supfact\">v4</span>, <span class=\"supfact\">v3</span>)) != Number L)\n    result = *<span class=\"supfact\">v4</span>;\n  else\n    result = Number;\n  return result;\n}", "code_t": "lua_Number __cdecl lua_tonumber(lua_State_0 *L, int idx) {\n  lua_Number result;\n  TValue <span class=\"supfact\">n</span>;\n  const TValue *<span class=\"supfact\">o</span>;\n  <span class=\"supfact\">o</span> = index2adr(L, idx);\n  if (<span class=\"supfact\">o</span>->tt == Number ||\n      (<span class=\"supfact\">o</span> =\n           luaV_tonumber(<span class=\"supfact\">o</span>, &<span class=\"supfact\">n</span>)) != Number L)\n    result = <span class=\"supfact\">o</span>->value.<span class=\"supfact\">n</span>;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v3", "type": "struct TValue { Value value; int tt; PADDING (4); }", "ref_name": "n", "ref_type": "struct TValue { Value value; int tt; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "ycui1984", "repo_name": "eos", "path": "ycui1984/eos/6101a4c8e6d8ab621e8681c4d74c0bc1d6d2c0cbddb07830ae31855eb3933947", "path_in_repo": "ycui1984/eos/code/clean/linux-3.8.8/tools/virtio/virtio-trace/trace-agent-ctl.o", "objdump": "000000000000006c <wait_order>:\n  6c:\t55                   \tpush   %rbp\n  6d:\t48 89 e5             \tmov    %rsp,%rbp\n  70:\t48 83 ec 20          \tsub    $0x20,%rsp\n  74:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  77:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  7e:\te9 ab 00 00 00       \tjmpq   12e <wait_order+0xc2>\n  83:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  86:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  89:\t66 c7 45 f8 01 00    \tmovw   $0x1,-0x8(%rbp)\n  8f:\t48 8d 45 f4          \tlea    -0xc(%rbp),%rax\n  93:\tba 64 00 00 00       \tmov    $0x64,%edx\n  98:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  9d:\t48 89 c7             \tmov    %rax,%rdi\n  a0:\te8 00 00 00 00       \tcallq  a5 <wait_order+0x39>\n  a5:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  a8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # ae <wait_order+0x42>\n  ae:\t85 c0                \ttest   %eax,%eax\n  b0:\t74 47                \tje     f9 <wait_order+0x8d>\n  b2:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # b9 <wait_order+0x4d>\n  b9:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # bf <wait_order+0x53>\n  bf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c6 <wait_order+0x5a>\n  c6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  cb:\t48 89 c7             \tmov    %rax,%rdi\n  ce:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  d3:\te8 00 00 00 00       \tcallq  d8 <wait_order+0x6c>\n  d8:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # df <wait_order+0x73>\n  df:\t83 f0 01             \txor    $0x1,%eax\n  e2:\t84 c0                \ttest   %al,%al\n  e4:\t74 0a                \tje     f0 <wait_order+0x84>\n  e6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  eb:\te8 00 00 00 00       \tcallq  f0 <wait_order+0x84>\n  f0:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n  f7:\teb 4a                \tjmp    143 <wait_order+0xd7>\n  f9:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  fd:\t79 29                \tjns    128 <wait_order+0xbc>\n  ff:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 106 <wait_order+0x9a>\n 106:\t48 89 c1             \tmov    %rax,%rcx\n 109:\tba 0e 00 00 00       \tmov    $0xe,%edx\n 10e:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 113:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 118:\te8 00 00 00 00       \tcallq  11d <wait_order+0xb1>\n 11d:\t90                   \tnop\n 11e:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 123:\te8 00 00 00 00       \tcallq  128 <wait_order+0xbc>\n 128:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 12c:\t75 14                \tjne    142 <wait_order+0xd6>\n 12e:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 135 <wait_order+0xc9>\n 135:\t83 f0 01             \txor    $0x1,%eax\n 138:\t84 c0                \ttest   %al,%al\n 13a:\t0f 85 43 ff ff ff    \tjne    83 <wait_order+0x17>\n 140:\teb 01                \tjmp    143 <wait_order+0xd7>\n 142:\t90                   \tnop\n 143:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 146:\tc9                   \tleaveq \n 147:\tc3                   \tretq   ", "code_s": "__int64 __fastcall wait_order(int a1) {\n  struct pollfd <span class=\"supfact\">fds</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  while (global_sig_receive != Number) {\n    <span class=\"supfact\">fds</span>.fd = a1;\n    <span class=\"supfact\">fds</span>.events = Number;\n    <span class=\"supfact\">v3</span> = poll(&<span class=\"supfact\">fds</span>, Number, Number);\n    if (global_signal_val) {\n      global_sig_receive = Number;\n      fprintf(stdout, String, (unsigned int)global_signal_val);\n      if (global_run_operation != Number)\n        pthread_cond_broadcast(&cond_wakeup);\n      return (unsigned int)Number;\n    }\n    if ((<span class=\"supfact\">v3</span> & Number) != Number) {\n      fwrite(String, Number, Number, stderr);\n      exit(Number);\n    }\n    if (<span class=\"supfact\">v3</span>)\n      return <span class=\"supfact\">v3</span>;\n  }\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "int __cdecl wait_order(int ctl_fd) {\n  pollfd <span class=\"supfact\">poll_fd</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = Number;\n  while (global_sig_receive != Number) {\n    <span class=\"supfact\">poll_fd</span>.fd = ctl_fd;\n    <span class=\"supfact\">poll_fd</span>.events = Number;\n    <span class=\"supfact\">ret</span> = poll(&<span class=\"supfact\">poll_fd</span>, Number, Number);\n    if (global_signal_val) {\n      global_sig_receive = Number;\n      fprintf(stdout, String, (unsigned int)global_signal_val);\n      if (global_run_operation != Number)\n        pthread_cond_broadcast(&cond_wakeup);\n      return Number;\n    }\n    if (<span class=\"supfact\">ret</span> < Number) {\n      fwrite(String, Number, Number, stderr);\n      exit(Number);\n    }\n    if (<span class=\"supfact\">ret</span>)\n      return <span class=\"supfact\">ret</span>;\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "fds", "type": "struct pollfd { int fd; __int16 events; __int16 revents; }", "ref_name": "poll_fd", "ref_type": "struct pollfd { int fd; __int16 events; __int16 revents; }"}], "body_in_train": true}, {"repo_owner": "loopunit", "repo_name": "OpenFrameworks-ng", "path": "loopunit/OpenFrameworks-ng/136e6a0412a4b865c357dd9335358dbdc4bbeeb38316cd841651815caf9512f6", "path_in_repo": "loopunit/OpenFrameworks-ng/extern/trees/FreeImage/Source/LibOpenJPEG/jp2.o", "objdump": "00000000000021bc <jp2_read_jp>:\n    21bc:\t55                   \tpush   %rbp\n    21bd:\t48 89 e5             \tmov    %rsp,%rbp\n    21c0:\t48 83 ec 30          \tsub    $0x30,%rsp\n    21c4:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    21c8:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    21cc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    21d0:\t48 8b 00             \tmov    (%rax),%rax\n    21d3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    21d7:\t48 8d 55 ec          \tlea    -0x14(%rbp),%rdx\n    21db:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n    21df:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    21e3:\t48 89 ce             \tmov    %rcx,%rsi\n    21e6:\t48 89 c7             \tmov    %rax,%rdi\n    21e9:\te8 12 de ff ff       \tcallq  0 <jp2_read_boxhdr>\n    21ee:\t85 c0                \ttest   %eax,%eax\n    21f0:\t75 27                \tjne    2219 <jp2_read_jp+0x5d>\n    21f2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    21f6:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 21fd <jp2_read_jp+0x41>\n    21fd:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2202:\t48 89 c7             \tmov    %rax,%rdi\n    2205:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    220a:\te8 00 00 00 00       \tcallq  220f <jp2_read_jp+0x53>\n    220f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2214:\te9 ad 00 00 00       \tjmpq   22c6 <jp2_read_jp+0x10a>\n    2219:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    221c:\t3d 20 20 50 6a       \tcmp    $0x6a502020,%eax\n    2221:\t74 24                \tje     2247 <jp2_read_jp+0x8b>\n    2223:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2227:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 222e <jp2_read_jp+0x72>\n    222e:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2233:\t48 89 c7             \tmov    %rax,%rdi\n    2236:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    223b:\te8 00 00 00 00       \tcallq  2240 <jp2_read_jp+0x84>\n    2240:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2245:\teb 7f                \tjmp    22c6 <jp2_read_jp+0x10a>\n    2247:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    224b:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    2250:\t48 89 c7             \tmov    %rax,%rdi\n    2253:\te8 00 00 00 00       \tcallq  2258 <jp2_read_jp+0x9c>\n    2258:\t3d 0a 87 0a 0d       \tcmp    $0xd0a870a,%eax\n    225d:\t74 24                \tje     2283 <jp2_read_jp+0xc7>\n    225f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2263:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 226a <jp2_read_jp+0xae>\n    226a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    226f:\t48 89 c7             \tmov    %rax,%rdi\n    2272:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2277:\te8 00 00 00 00       \tcallq  227c <jp2_read_jp+0xc0>\n    227c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2281:\teb 43                \tjmp    22c6 <jp2_read_jp+0x10a>\n    2283:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2287:\t48 89 c7             \tmov    %rax,%rdi\n    228a:\te8 00 00 00 00       \tcallq  228f <jp2_read_jp+0xd3>\n    228f:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    2292:\t29 d0                \tsub    %edx,%eax\n    2294:\t89 c2                \tmov    %eax,%edx\n    2296:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    2299:\t39 c2                \tcmp    %eax,%edx\n    229b:\t74 24                \tje     22c1 <jp2_read_jp+0x105>\n    229d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    22a1:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 22a8 <jp2_read_jp+0xec>\n    22a8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    22ad:\t48 89 c7             \tmov    %rax,%rdi\n    22b0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22b5:\te8 00 00 00 00       \tcallq  22ba <jp2_read_jp+0xfe>\n    22ba:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22bf:\teb 05                \tjmp    22c6 <jp2_read_jp+0x10a>\n    22c1:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    22c6:\tc9                   \tleaveq \n    22c7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall jp2_read_jp(__int64 *a1, __int64 a2) {\n  __int64 result;\n  int v3;\n  int <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = *a1;\n  if ((unsigned int)jp2_read_boxhdr(<span class=\"supfact\">v5</span>, a2,\n                                    <span class=\"supfact\">v4</span>)) {\n    if (<span class=\"supfact\">v4</span>[Number] == Number) {\n      if ((unsigned int)cio_read(a2, Number L) == Number) {\n        v3 = cio_tell(a2);\n        if (v3 - <span class=\"supfact\">v4</span>[Number] == <span class=\"supfact\">v4</span>[Number]) {\n          result = Number L;\n        } else {\n          opj_event_msg(<span class=\"supfact\">v5</span>, Number L, String);\n          result = Number L;\n        }\n      } else {\n        opj_event_msg(<span class=\"supfact\">v5</span>, Number L, String);\n        result = Number L;\n      }\n    } else {\n      opj_event_msg(<span class=\"supfact\">v5</span>, Number L, String);\n      result = Number L;\n    }\n  } else {\n    opj_event_msg(<span class=\"supfact\">v5</span>, Number L, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "opj_bool __cdecl jp2_read_jp(opj_jp2_t *jp2, opj_cio_t *cio) {\n  opj_bool result;\n  int v3;\n  opj_jp2_box_t <span class=\"supfact\">box</span>;\n  opj_common_ptr <span class=\"supfact\">cinfo</span>;\n  <span class=\"supfact\">cinfo</span> = jp2-><span class=\"supfact\">cinfo</span>;\n  if (jp2_read_boxhdr(<span class=\"supfact\">cinfo</span>, cio, &<span class=\"supfact\">box</span>)) {\n    if (<span class=\"supfact\">box</span>.type == Number) {\n      if ((unsigned int)cio_read(cio, Number L) == Number) {\n        v3 = cio_tell(cio);\n        if (v3 - <span class=\"supfact\">box</span>.init_pos == <span class=\"supfact\">box</span>.length) {\n          result = Number;\n        } else {\n          opj_event_msg(<span class=\"supfact\">cinfo</span>, Number L, String);\n          result = Number;\n        }\n      } else {\n        opj_event_msg(<span class=\"supfact\">cinfo</span>, Number L, String);\n        result = Number;\n      }\n    } else {\n      opj_event_msg(<span class=\"supfact\">cinfo</span>, Number L, String);\n      result = Number;\n    }\n  } else {\n    opj_event_msg(<span class=\"supfact\">cinfo</span>, Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct opj_jp2_box_t { int length; int type; int init_pos; }", "ref_name": "box", "ref_type": "struct opj_jp2_box_t { int length; int type; int init_pos; }"}], "body_in_train": false}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/eddf4c128d81974d0a44cef786539de6088e3397414c265ffb89dc1463abb496", "path_in_repo": "ftnapps/pkg-sbbs/src/sbbs3/syncview/gcc.linux.exe.debug/syncview", "objdump": "0000000000411c21 <ansi_keythread>:\n  411c21:\t55                   \tpush   %rbp\n  411c22:\t48 89 e5             \tmov    %rsp,%rbp\n  411c25:\t48 83 ec 30          \tsub    $0x30,%rsp\n  411c29:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  411c2d:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  411c34:\tba 00 00 00 00       \tmov    $0x0,%edx\n  411c39:\tbe 00 04 00 00       \tmov    $0x400,%esi\n  411c3e:\tbf 2b 19 41 00       \tmov    $0x41192b,%edi\n  411c43:\te8 04 52 00 00       \tcallq  416e4c <_beginthread>\n  411c48:\tbf d0 2a 46 00       \tmov    $0x462ad0,%edi\n  411c4d:\te8 5d 61 00 00       \tcallq  417daf <xp_sem_wait>\n  411c52:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  411c56:\t48 89 c6             \tmov    %rax,%rsi\n  411c59:\tbf c0 2a 46 00       \tmov    $0x462ac0,%edi\n  411c5e:\te8 4e 63 00 00       \tcallq  417fb1 <xp_sem_getvalue>\n  411c63:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  411c66:\t85 c0                \ttest   %eax,%eax\n  411c68:\t75 30                \tjne    411c9a <ansi_keythread+0x79>\n  411c6a:\t48 8b 05 2f c4 04 00 \tmov    0x4c42f(%rip),%rax        # 45e0a0 <stdin@@GLIBC_2.2.5>\n  411c71:\t48 89 c1             \tmov    %rax,%rcx\n  411c74:\tba 01 00 00 00       \tmov    $0x1,%edx\n  411c79:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  411c7e:\tbf 16 f7 45 00       \tmov    $0x45f716,%edi\n  411c83:\te8 b8 17 ff ff       \tcallq  403440 <fread@plt>\n  411c88:\t48 83 f8 01          \tcmp    $0x1,%rax\n  411c8c:\t75 0c                \tjne    411c9a <ansi_keythread+0x79>\n  411c8e:\tbf c0 2a 46 00       \tmov    $0x462ac0,%edi\n  411c93:\te8 7f 62 00 00       \tcallq  417f17 <xp_sem_post>\n  411c98:\teb 79                \tjmp    411d13 <ansi_keythread+0xf2>\n  411c9a:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  411ca1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  411ca4:\t48 63 d0             \tmovslq %eax,%rdx\n  411ca7:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  411cae:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  411cb2:\tc1 fa 06             \tsar    $0x6,%edx\n  411cb5:\tc1 f8 1f             \tsar    $0x1f,%eax\n  411cb8:\t29 c2                \tsub    %eax,%edx\n  411cba:\t89 d0                \tmov    %edx,%eax\n  411cbc:\t48 98                \tcltq   \n  411cbe:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  411cc2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  411cc5:\t48 63 d0             \tmovslq %eax,%rdx\n  411cc8:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  411ccf:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  411cd3:\t89 d1                \tmov    %edx,%ecx\n  411cd5:\tc1 f9 06             \tsar    $0x6,%ecx\n  411cd8:\t99                   \tcltd   \n  411cd9:\t29 d1                \tsub    %edx,%ecx\n  411cdb:\t89 ca                \tmov    %ecx,%edx\n  411cdd:\t69 d2 e8 03 00 00    \timul   $0x3e8,%edx,%edx\n  411ce3:\t29 d0                \tsub    %edx,%eax\n  411ce5:\t89 c2                \tmov    %eax,%edx\n  411ce7:\t69 c2 e8 03 00 00    \timul   $0x3e8,%edx,%eax\n  411ced:\t48 98                \tcltq   \n  411cef:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  411cf3:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  411cf7:\t49 89 c0             \tmov    %rax,%r8\n  411cfa:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  411cff:\tba 00 00 00 00       \tmov    $0x0,%edx\n  411d04:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  411d09:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  411d0e:\te8 1d 14 ff ff       \tcallq  403130 <select@plt>\n  411d13:\te9 30 ff ff ff       \tjmpq   411c48 <ansi_keythread+0x27>", "code_s": "void __noreturn ansi_keythread() {\n  struct timeval <span class=\"supfact\">timeout</span>;\n  int <span class=\"supfact\">v1</span>[Number];\n  <span class=\"supfact\">v1</span>[Number] = Number;\n  beginthread(ansi_keyparse, Number L, Number L);\n  while (Number) {\n    xp_sem_wait(&need_key);\n    xp_sem_getvalue(&got_key, <span class=\"supfact\">v1</span>);\n    if (<span class=\"supfact\">v1</span>[Number] ||\n        fread(&ansi_raw_inch, Number, Number, stdin) != Number) {\n      <span class=\"supfact\">v1</span>[Number] = Number;\n      <span class=\"supfact\">timeout</span>.tv_sec = Number L;\n      <span class=\"supfact\">timeout</span>.tv_usec = Number L;\n      select(Number, Number L, Number L, Number L, &<span class=\"supfact\">timeout</span>);\n    } else {\n      xp_sem_post(&got_key);\n    }\n  }\n}", "code_t": "void __cdecl __noreturn ansi_keythread(void *params) {\n  timeval <span class=\"supfact\">tv</span>;\n  int <span class=\"supfact\">sval</span>;\n  int sleep_msecs;\n  <span class=\"supfact\">sval</span> = Number;\n  beginthread((void (*)(void *))ansi_keyparse, Number, Number L);\n  while (Number) {\n    xp_sem_wait(&need_key);\n    xp_sem_getvalue(&got_key, &<span class=\"supfact\">sval</span>);\n    if (<span class=\"supfact\">sval</span> ||\n        fread(&ansi_raw_inch, Number, Number, stdin) != Number) {\n      sleep_msecs = Number;\n      <span class=\"supfact\">tv</span>.tv_sec = Number L;\n      <span class=\"supfact\">tv</span>.tv_usec = Number L;\n      select(Number, Number L, Number L, Number L, &<span class=\"supfact\">tv</span>);\n    } else {\n      xp_sem_post(&got_key);\n    }\n  }\n}", "var": [{"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "dpryan79", "repo_name": "Misc", "path": "dpryan79/Misc/638c5dfb1858643212b5708d77055d022dd0e8172c3adb1f62aeaa98e094727e", "path_in_repo": "dpryan79/Misc/htslib/test/test_view", "objdump": "00000000004520c5 <t_pool_next_result_wait>:\n  4520c5:\t55                   \tpush   %rbp\n  4520c6:\t48 89 e5             \tmov    %rsp,%rbp\n  4520c9:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4520cd:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  4520d1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4520d5:\t48 83 c0 20          \tadd    $0x20,%rax\n  4520d9:\t48 89 c7             \tmov    %rax,%rdi\n  4520dc:\te8 6f 16 fb ff       \tcallq  403750 <pthread_mutex_lock@plt>\n  4520e1:\teb 4b                \tjmp    45212e <t_pool_next_result_wait+0x69>\n  4520e3:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4520e7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4520ec:\t48 89 c7             \tmov    %rax,%rdi\n  4520ef:\te8 ec 11 fb ff       \tcallq  4032e0 <gettimeofday@plt>\n  4520f4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4520f8:\t48 83 c0 0a          \tadd    $0xa,%rax\n  4520fc:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  452100:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  452104:\t48 69 c0 e8 03 00 00 \timul   $0x3e8,%rax,%rax\n  45210b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  45210f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  452113:\t48 8d 70 20          \tlea    0x20(%rax),%rsi\n  452117:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  45211b:\t48 8d 48 48          \tlea    0x48(%rax),%rcx\n  45211f:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  452123:\t48 89 c2             \tmov    %rax,%rdx\n  452126:\t48 89 cf             \tmov    %rcx,%rdi\n  452129:\te8 a2 14 fb ff       \tcallq  4035d0 <pthread_cond_timedwait@plt>\n  45212e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  452132:\t48 89 c7             \tmov    %rax,%rdi\n  452135:\te8 71 fe ff ff       \tcallq  451fab <t_pool_next_result_locked>\n  45213a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  45213e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  452143:\t74 9e                \tje     4520e3 <t_pool_next_result_wait+0x1e>\n  452145:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  452149:\t48 83 c0 20          \tadd    $0x20,%rax\n  45214d:\t48 89 c7             \tmov    %rax,%rdi\n  452150:\te8 5b 13 fb ff       \tcallq  4034b0 <pthread_mutex_unlock@plt>\n  452155:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  452159:\tc9                   \tleaveq \n  45215a:\tc3                   \tretq   ", "code_s": "__int64 *__fastcall t_pool_next_result_wait(__int64 a1) {\n  struct timespec <span class=\"supfact\">abstime</span>;\n  struct timeval <span class=\"supfact\">tv</span>;\n  __int64 *<span class=\"supfact\">v4</span>;\n  pthread_mutex_lock((pthread_mutex_t *)(a1 + Number));\n  while (Number) {\n    <span class=\"supfact\">v4</span> = t_pool_next_result_locked((__int64 **)a1);\n    if (<span class=\"supfact\">v4</span>)\n      break;\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    <span class=\"supfact\">abstime</span>.tv_sec = <span class=\"supfact\">tv</span>.tv_sec + Number;\n    <span class=\"supfact\">abstime</span>.tv_nsec = Number * <span class=\"supfact\">tv</span>.tv_usec;\n    pthread_cond_timedwait((pthread_cond_t *)(a1 + Number),\n                           (pthread_mutex_t *)(a1 + Number),\n                           &<span class=\"supfact\">abstime</span>);\n  }\n  pthread_mutex_unlock((pthread_mutex_t *)(a1 + Number));\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "t_pool_result *__cdecl t_pool_next_result_wait(t_results_queue_0 *q) {\n  timespec <span class=\"supfact\">timeout</span>;\n  timeval <span class=\"supfact\">now</span>;\n  t_pool_result *<span class=\"supfact\">r</span>;\n  pthread_mutex_lock(&q->result_m);\n  while (Number) {\n    <span class=\"supfact\">r</span> = t_pool_next_result_locked(q);\n    if (<span class=\"supfact\">r</span>)\n      break;\n    gettimeofday(&<span class=\"supfact\">now</span>, Number L);\n    <span class=\"supfact\">timeout</span>.tv_sec = <span class=\"supfact\">now</span>.tv_sec + Number;\n    <span class=\"supfact\">timeout</span>.tv_nsec = Number * <span class=\"supfact\">now</span>.tv_usec;\n    pthread_cond_timedwait(&q->result_avail_c, &q->result_m,\n                           &<span class=\"supfact\">timeout</span>);\n  }\n  pthread_mutex_unlock(&q->result_m);\n  return <span class=\"supfact\">r</span>;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "abstime", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "timeout", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "rusalexd", "repo_name": "ostis", "path": "rusalexd/ostis/55695343149e74496691883caeb3661940d7f4a942209cfb4cc5befe116582df", "path_in_repo": "rusalexd/ostis/sc-machine/scripts/redis-2.8.4/src/anet.o", "objdump": "0000000000000982 <anetUnixGenericConnect>:\n     982:\t55                   \tpush   %rbp\n     983:\t48 89 e5             \tmov    %rsp,%rbp\n     986:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n     98d:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n     994:\t48 89 b5 70 ff ff ff \tmov    %rsi,-0x90(%rbp)\n     99b:\t89 95 6c ff ff ff    \tmov    %edx,-0x94(%rbp)\n     9a1:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     9a8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     9ad:\t48 89 c7             \tmov    %rax,%rdi\n     9b0:\te8 f8 fc ff ff       \tcallq  6ad <anetCreateSocket>\n     9b5:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     9b8:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n     9bc:\t75 0a                \tjne    9c8 <anetUnixGenericConnect+0x46>\n     9be:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     9c3:\te9 cb 00 00 00       \tjmpq   a93 <anetUnixGenericConnect+0x111>\n     9c8:\t66 c7 45 80 01 00    \tmovw   $0x1,-0x80(%rbp)\n     9ce:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n     9d5:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n     9d9:\t48 8d 4a 02          \tlea    0x2(%rdx),%rcx\n     9dd:\tba 6b 00 00 00       \tmov    $0x6b,%edx\n     9e2:\t48 89 c6             \tmov    %rax,%rsi\n     9e5:\t48 89 cf             \tmov    %rcx,%rdi\n     9e8:\te8 00 00 00 00       \tcallq  9ed <anetUnixGenericConnect+0x6b>\n     9ed:\t8b 85 6c ff ff ff    \tmov    -0x94(%rbp),%eax\n     9f3:\t83 e0 01             \tand    $0x1,%eax\n     9f6:\t85 c0                \ttest   %eax,%eax\n     9f8:\t74 1f                \tje     a19 <anetUnixGenericConnect+0x97>\n     9fa:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     9fd:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     a04:\t89 d6                \tmov    %edx,%esi\n     a06:\t48 89 c7             \tmov    %rax,%rdi\n     a09:\te8 00 00 00 00       \tcallq  a0e <anetUnixGenericConnect+0x8c>\n     a0e:\t85 c0                \ttest   %eax,%eax\n     a10:\t74 07                \tje     a19 <anetUnixGenericConnect+0x97>\n     a12:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     a17:\teb 7a                \tjmp    a93 <anetUnixGenericConnect+0x111>\n     a19:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n     a1d:\t48 89 c1             \tmov    %rax,%rcx\n     a20:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     a23:\tba 6e 00 00 00       \tmov    $0x6e,%edx\n     a28:\t48 89 ce             \tmov    %rcx,%rsi\n     a2b:\t89 c7                \tmov    %eax,%edi\n     a2d:\te8 00 00 00 00       \tcallq  a32 <anetUnixGenericConnect+0xb0>\n     a32:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     a35:\t75 59                \tjne    a90 <anetUnixGenericConnect+0x10e>\n     a37:\te8 00 00 00 00       \tcallq  a3c <anetUnixGenericConnect+0xba>\n     a3c:\t8b 00                \tmov    (%rax),%eax\n     a3e:\t83 f8 73             \tcmp    $0x73,%eax\n     a41:\t75 12                \tjne    a55 <anetUnixGenericConnect+0xd3>\n     a43:\t8b 85 6c ff ff ff    \tmov    -0x94(%rbp),%eax\n     a49:\t83 e0 01             \tand    $0x1,%eax\n     a4c:\t85 c0                \ttest   %eax,%eax\n     a4e:\t74 05                \tje     a55 <anetUnixGenericConnect+0xd3>\n     a50:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     a53:\teb 3e                \tjmp    a93 <anetUnixGenericConnect+0x111>\n     a55:\te8 00 00 00 00       \tcallq  a5a <anetUnixGenericConnect+0xd8>\n     a5a:\t8b 00                \tmov    (%rax),%eax\n     a5c:\t89 c7                \tmov    %eax,%edi\n     a5e:\te8 00 00 00 00       \tcallq  a63 <anetUnixGenericConnect+0xe1>\n     a63:\t48 89 c2             \tmov    %rax,%rdx\n     a66:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     a6d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a72:\t48 89 c7             \tmov    %rax,%rdi\n     a75:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a7a:\te8 81 f5 ff ff       \tcallq  0 <anetSetError>\n     a7f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     a82:\t89 c7                \tmov    %eax,%edi\n     a84:\te8 00 00 00 00       \tcallq  a89 <anetUnixGenericConnect+0x107>\n     a89:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     a8e:\teb 03                \tjmp    a93 <anetUnixGenericConnect+0x111>\n     a90:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     a93:\tc9                   \tleaveq \n     a94:\tc3                   \tretq   ", "code_s": "__int64 __fastcall anetUnixGenericConnect(char *a1, const char *a2, char a3) {\n  int *v4;\n  char *v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  int <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">fd</span> = anetCreateSocket(a1, Number);\n  if (<span class=\"supfact\">fd</span> == Number)\n    return Number;\n  <span class=\"supfact\">addr</span>.sa_family = Number;\n  strncpy(<span class=\"supfact\">addr</span>.sa_data, a2, Number);\n  if ((a3 & Number) != Number &&\n      (unsigned int)anetNonBlock(a1, <span class=\"supfact\">fd</span>))\n    return Number;\n  if (connect(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">addr</span>, Number) != Number)\n    return (unsigned int)<span class=\"supfact\">fd</span>;\n  if (*_errno_location() == Number && (a3 & Number) != Number)\n    return (unsigned int)<span class=\"supfact\">fd</span>;\n  v4 = _errno_location();\n  v5 = strerror(*v4);\n  anetSetError(a1, String, (__int64)v5, v6, v7, v8);\n  close(<span class=\"supfact\">fd</span>);\n  return Number;\n}", "code_t": "int __cdecl anetUnixGenericConnect(char *err, char *path, int flags) {\n  int *v4;\n  char *v5;\n  char flagsa;\n  sockaddr_un <span class=\"supfact\">sa</span>;\n  int <span class=\"supfact\">s</span>;\n  flagsa = flags;\n  <span class=\"supfact\">s</span> = anetCreateSocket(err, Number);\n  if (<span class=\"supfact\">s</span> == Number)\n    return Number;\n  <span class=\"supfact\">sa</span>.sun_family = Number;\n  strncpy(<span class=\"supfact\">sa</span>.sun_path, path, Number);\n  if ((flagsa & Number) != Number && anetNonBlock(err, <span class=\"supfact\">s</span>))\n    return Number;\n  if (connect(<span class=\"supfact\">s</span>, (const struct sockaddr *)&<span class=\"supfact\">sa</span>,\n              Number) != Number)\n    return <span class=\"supfact\">s</span>;\n  if (*_errno_location() == Number && (flagsa & Number) != Number)\n    return <span class=\"supfact\">s</span>;\n  v4 = _errno_location();\n  v5 = strerror(*v4);\n  anetSetError(err, String, v5);\n  close(<span class=\"supfact\">s</span>);\n  return Number;\n}", "var": [{"name": "addr", "type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }", "ref_name": "sa", "ref_type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }"}], "body_in_train": true}, {"repo_owner": "szehl", "repo_name": "contiki-zigbit-rpl-border-router", "path": "szehl/contiki-zigbit-rpl-border-router/1afa3432a9ff6c286efe44418666f91922d89b1029cb6b78e65bba324842497d", "path_in_repo": "szehl/contiki-zigbit-rpl-border-router/examples/test-ipv6/obj_native/sicslowmac.o", "objdump": "0000000000000053 <send_packet>:\n  53:\t55                   \tpush   %rbp\n  54:\t48 89 e5             \tmov    %rsp,%rbp\n  57:\t41 54                \tpush   %r12\n  59:\t53                   \tpush   %rbx\n  5a:\t48 83 ec 60          \tsub    $0x60,%rsp\n  5e:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n  62:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n  66:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  6a:\tba 48 00 00 00       \tmov    $0x48,%edx\n  6f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  74:\t48 89 c7             \tmov    %rax,%rdi\n  77:\te8 00 00 00 00       \tcallq  7c <send_packet+0x29>\n  7c:\tc6 45 a0 01          \tmovb   $0x1,-0x60(%rbp)\n  80:\tc6 45 a1 00          \tmovb   $0x0,-0x5f(%rbp)\n  84:\tc6 45 a2 00          \tmovb   $0x0,-0x5e(%rbp)\n  88:\tbf 0c 00 00 00       \tmov    $0xc,%edi\n  8d:\te8 00 00 00 00       \tcallq  92 <send_packet+0x3f>\n  92:\t88 45 a3             \tmov    %al,-0x5d(%rbp)\n  95:\tc6 45 a4 00          \tmovb   $0x0,-0x5c(%rbp)\n  99:\tc6 45 a6 00          \tmovb   $0x0,-0x5a(%rbp)\n  9d:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # a4 <send_packet+0x51>\n  a4:\t8d 50 01             \tlea    0x1(%rax),%edx\n  a7:\t88 15 00 00 00 00    \tmov    %dl,0x0(%rip)        # ad <send_packet+0x5a>\n  ad:\t88 45 a8             \tmov    %al,-0x58(%rbp)\n  b0:\tc6 45 a7 03          \tmovb   $0x3,-0x59(%rbp)\n  b4:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # bb <send_packet+0x68>\n  bb:\t66 89 45 aa          \tmov    %ax,-0x56(%rbp)\n  bf:\tbf 19 00 00 00       \tmov    $0x19,%edi\n  c4:\te8 00 00 00 00       \tcallq  c9 <send_packet+0x76>\n  c9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  ce:\t48 89 c7             \tmov    %rax,%rdi\n  d1:\te8 00 00 00 00       \tcallq  d6 <send_packet+0x83>\n  d6:\t85 c0                \ttest   %eax,%eax\n  d8:\t74 0e                \tje     e8 <send_packet+0x95>\n  da:\tc6 45 a5 02          \tmovb   $0x2,-0x5b(%rbp)\n  de:\tc6 45 ac ff          \tmovb   $0xff,-0x54(%rbp)\n  e2:\tc6 45 ad ff          \tmovb   $0xff,-0x53(%rbp)\n  e6:\teb 24                \tjmp    10c <send_packet+0xb9>\n  e8:\tbf 19 00 00 00       \tmov    $0x19,%edi\n  ed:\te8 00 00 00 00       \tcallq  f2 <send_packet+0x9f>\n  f2:\t48 89 c2             \tmov    %rax,%rdx\n  f5:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  f9:\t48 83 c0 0c          \tadd    $0xc,%rax\n  fd:\t48 89 d6             \tmov    %rdx,%rsi\n 100:\t48 89 c7             \tmov    %rax,%rdi\n 103:\te8 00 00 00 00       \tcallq  108 <send_packet+0xb5>\n 108:\tc6 45 a5 03          \tmovb   $0x3,-0x5b(%rbp)\n 10c:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 113 <send_packet+0xc0>\n 113:\t66 89 45 b4          \tmov    %ax,-0x4c(%rbp)\n 117:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 11b:\t48 83 c0 16          \tadd    $0x16,%rax\n 11f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 124:\t48 89 c7             \tmov    %rax,%rdi\n 127:\te8 00 00 00 00       \tcallq  12c <send_packet+0xd9>\n 12c:\te8 00 00 00 00       \tcallq  131 <send_packet+0xde>\n 131:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 135:\te8 00 00 00 00       \tcallq  13a <send_packet+0xe7>\n 13a:\t88 45 e0             \tmov    %al,-0x20(%rbp)\n 13d:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 141:\t48 89 c7             \tmov    %rax,%rdi\n 144:\te8 00 00 00 00       \tcallq  149 <send_packet+0xf6>\n 149:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n 14c:\t0f b6 45 ef          \tmovzbl -0x11(%rbp),%eax\n 150:\t89 c7                \tmov    %eax,%edi\n 152:\te8 00 00 00 00       \tcallq  157 <send_packet+0x104>\n 157:\t85 c0                \ttest   %eax,%eax\n 159:\t0f 84 c2 00 00 00    \tje     221 <send_packet+0x1ce>\n 15f:\t0f b6 5d ef          \tmovzbl -0x11(%rbp),%ebx\n 163:\te8 00 00 00 00       \tcallq  168 <send_packet+0x115>\n 168:\t48 89 c1             \tmov    %rax,%rcx\n 16b:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 16f:\t89 da                \tmov    %ebx,%edx\n 171:\t48 89 ce             \tmov    %rcx,%rsi\n 174:\t48 89 c7             \tmov    %rax,%rdi\n 177:\te8 00 00 00 00       \tcallq  17c <send_packet+0x129>\n 17c:\t0f b6 45 a0          \tmovzbl -0x60(%rbp),%eax\n 180:\t0f b6 c0             \tmovzbl %al,%eax\n 183:\t89 c6                \tmov    %eax,%esi\n 185:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 18a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 18f:\te8 00 00 00 00       \tcallq  194 <send_packet+0x141>\n 194:\te8 00 00 00 00       \tcallq  199 <send_packet+0x146>\n 199:\t0f b7 d8             \tmovzwl %ax,%ebx\n 19c:\te8 00 00 00 00       \tcallq  1a1 <send_packet+0x14e>\n 1a1:\t0f b7 d0             \tmovzwl %ax,%edx\n 1a4:\t0f b6 45 ef          \tmovzbl -0x11(%rbp),%eax\n 1a8:\t89 d9                \tmov    %ebx,%ecx\n 1aa:\t89 c6                \tmov    %eax,%esi\n 1ac:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1b1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1b6:\te8 00 00 00 00       \tcallq  1bb <send_packet+0x168>\n 1bb:\t4c 8b 25 00 00 00 00 \tmov    0x0(%rip),%r12        # 1c2 <send_packet+0x16f>\n 1c2:\te8 00 00 00 00       \tcallq  1c7 <send_packet+0x174>\n 1c7:\t0f b7 d8             \tmovzwl %ax,%ebx\n 1ca:\te8 00 00 00 00       \tcallq  1cf <send_packet+0x17c>\n 1cf:\t89 de                \tmov    %ebx,%esi\n 1d1:\t48 89 c7             \tmov    %rax,%rdi\n 1d4:\t41 ff d4             \tcallq  *%r12\n 1d7:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n 1da:\t48 83 7d 98 00       \tcmpq   $0x0,-0x68(%rbp)\n 1df:\t74 57                \tje     238 <send_packet+0x1e5>\n 1e1:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n 1e5:\t74 08                \tje     1ef <send_packet+0x19c>\n 1e7:\t83 7d e8 01          \tcmpl   $0x1,-0x18(%rbp)\n 1eb:\t74 1b                \tje     208 <send_packet+0x1b5>\n 1ed:\teb 4a                \tjmp    239 <send_packet+0x1e6>\n 1ef:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1f3:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n 1f7:\tba 01 00 00 00       \tmov    $0x1,%edx\n 1fc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 201:\t48 89 c7             \tmov    %rax,%rdi\n 204:\tff d1                \tcallq  *%rcx\n 206:\teb 31                \tjmp    239 <send_packet+0x1e6>\n 208:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 20c:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n 210:\tba 01 00 00 00       \tmov    $0x1,%edx\n 215:\tbe 04 00 00 00       \tmov    $0x4,%esi\n 21a:\t48 89 c7             \tmov    %rax,%rdi\n 21d:\tff d1                \tcallq  *%rcx\n 21f:\teb 18                \tjmp    239 <send_packet+0x1e6>\n 221:\t0f b6 45 ef          \tmovzbl -0x11(%rbp),%eax\n 225:\t89 c6                \tmov    %eax,%esi\n 227:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 22c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 231:\te8 00 00 00 00       \tcallq  236 <send_packet+0x1e3>\n 236:\teb 01                \tjmp    239 <send_packet+0x1e6>\n 238:\t90                   \tnop\n 239:\t90                   \tnop\n 23a:\t48 83 c4 60          \tadd    $0x60,%rsp\n 23e:\t5b                   \tpop    %rbx\n 23f:\t41 5c                \tpop    %r12\n 241:\t5d                   \tpop    %rbp\n 242:\tc3                   \tretq   ", "code_s": "int __fastcall send_packet(__int64(__fastcall *a1)(__int64, __int64, __int64),\n                           __int64 a2) {\n  char v2;\n  __int64 v3;\n  __int64 v4;\n  unsigned int v5;\n  __int64 v6;\n  unsigned int v7;\n  unsigned __int16 v8;\n  __int64(__fastcall * v9)(__int64, _QWORD);\n  unsigned int v10;\n  __int64 v11;\n  int result;\n  __int64 <span class=\"supfact\">s</span>[Number];\n  int <span class=\"supfact\">v14</span>;\n  unsigned __int8 <span class=\"supfact\">v15</span>;\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  LOWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n  BYTE2(<span class=\"supfact\">s</span>[Number]) = Number;\n  *(_WORD *)((char *)<span class=\"supfact\">s</span> + Number) =\n      (unsigned __int8)packetbuf_attr(Number L);\n  HIWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n  v2 = mac_dsn++;\n  LOBYTE(<span class=\"supfact\">s</span>[Number]) = v2;\n  WORD1(<span class=\"supfact\">s</span>[Number]) = mac_dst_pan_id;\n  v3 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v3, &rimeaddr_null)) {\n    BYTE5(<span class=\"supfact\">s</span>[Number]) = Number;\n    WORD2(<span class=\"supfact\">s</span>[Number]) = Number;\n  } else {\n    v4 = packetbuf_addr(Number L);\n    rimeaddr_copy((char *)&<span class=\"supfact\">s</span>[Number] + Number, v4);\n    BYTE5(<span class=\"supfact\">s</span>[Number]) = Number;\n  }\n  WORD2(<span class=\"supfact\">s</span>[Number]) = mac_src_pan_id;\n  rimeaddr_copy((char *)&<span class=\"supfact\">s</span>[Number] + Number,\n                &rimeaddr_node_addr);\n  <span class=\"supfact\">s</span>[Number] = packetbuf_dataptr();\n  LOBYTE(<span class=\"supfact\">s</span>[Number]) = packetbuf_datalen();\n  <span class=\"supfact\">v15</span> = frame802154_hdrlen(<span class=\"supfact\">s</span>);\n  if (!(unsigned int)packetbuf_hdralloc(<span class=\"supfact\">v15</span>))\n    return printf(String, <span class=\"supfact\">v15</span>);\n  v5 = <span class=\"supfact\">v15</span>;\n  v6 = packetbuf_hdrptr();\n  frame802154_create(<span class=\"supfact\">s</span>, v6, v5);\n  printf(String, LOBYTE(<span class=\"supfact\">s</span>[Number]));\n  v7 = (unsigned __int16)packetbuf_totlen();\n  v8 = packetbuf_datalen();\n  printf(String, <span class=\"supfact\">v15</span>, v8, v7);\n  v9 = (__int64(__fastcall *)(__int64, _QWORD))nullradio_driver[Number];\n  v10 = (unsigned __int16)packetbuf_totlen();\n  v11 = packetbuf_hdrptr();\n  result = v9(v11, v10);\n  <span class=\"supfact\">v14</span> = result;\n  if (a1) {\n    if (<span class=\"supfact\">v14</span>) {\n      if (<span class=\"supfact\">v14</span> == Number)\n        result = a1(a2, Number L, Number L);\n    } else {\n      result = a1(a2, Number L, Number L);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl send_packet(mac_callback_t sent, void *ptr) {\n  uint8_t v2;\n  __int64 v3;\n  __int64 v4;\n  unsigned int v5;\n  __int64 v6;\n  unsigned int v7;\n  unsigned __int16 v8;\n  __int64(__fastcall * v9)(__int64, _QWORD);\n  unsigned int v10;\n  __int64 v11;\n  frame802154_t <span class=\"supfact\">params</span>;\n  int <span class=\"supfact\">ret</span>;\n  uint8_t <span class=\"supfact\">len</span>;\n  memset(&<span class=\"supfact\">params</span>, Number, sizeof(<span class=\"supfact\">params</span>));\n  <span class=\"supfact\">params</span>.fcf.frame_type = Number;\n  <span class=\"supfact\">params</span>.fcf.security_enabled = Number;\n  <span class=\"supfact\">params</span>.fcf.frame_pending = Number;\n  <span class=\"supfact\">params</span>.fcf.ack_required = packetbuf_attr(Number L);\n  <span class=\"supfact\">params</span>.fcf.panid_compression = Number;\n  <span class=\"supfact\">params</span>.fcf.frame_version = Number;\n  v2 = mac_dsn++;\n  <span class=\"supfact\">params</span>.seq = v2;\n  <span class=\"supfact\">params</span>.fcf.src_addr_mode = Number;\n  <span class=\"supfact\">params</span>.dest_pid = mac_dst_pan_id;\n  v3 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v3, &rimeaddr_null)) {\n    <span class=\"supfact\">params</span>.fcf.dest_addr_mode = Number;\n    <span class=\"supfact\">params</span>.dest_addr[Number] = Number;\n    <span class=\"supfact\">params</span>.dest_addr[Number] = Number;\n  } else {\n    v4 = packetbuf_addr(Number L);\n    rimeaddr_copy(<span class=\"supfact\">params</span>.dest_addr, v4);\n    <span class=\"supfact\">params</span>.fcf.dest_addr_mode = Number;\n  }\n  <span class=\"supfact\">params</span>.src_pid = mac_src_pan_id;\n  rimeaddr_copy(<span class=\"supfact\">params</span>.src_addr, &rimeaddr_node_addr);\n  <span class=\"supfact\">params</span>.payload = (uint8_t *)packetbuf_dataptr();\n  <span class=\"supfact\">params</span>.payload_len = packetbuf_datalen();\n  <span class=\"supfact\">len</span> = frame802154_hdrlen(&<span class=\"supfact\">params</span>);\n  if ((unsigned int)packetbuf_hdralloc(<span class=\"supfact\">len</span>)) {\n    v5 = <span class=\"supfact\">len</span>;\n    v6 = packetbuf_hdrptr();\n    frame802154_create(&<span class=\"supfact\">params</span>, v6, v5);\n    printf(String, <span class=\"supfact\">params</span>.fcf.frame_type);\n    v7 = (unsigned __int16)packetbuf_totlen();\n    v8 = packetbuf_datalen();\n    printf(String, <span class=\"supfact\">len</span>, v8, v7);\n    v9 = (__int64(__fastcall *)(__int64, _QWORD))nullradio_driver[Number];\n    v10 = (unsigned __int16)packetbuf_totlen();\n    v11 = packetbuf_hdrptr();\n    <span class=\"supfact\">ret</span> = v9(v11, v10);\n    if (sent) {\n      if (<span class=\"supfact\">ret</span>) {\n        if (<span class=\"supfact\">ret</span> == Number)\n          sent(ptr, Number, Number);\n      } else {\n        sent(ptr, Number, Number);\n      }\n    }\n  } else {\n    printf(String, <span class=\"supfact\">len</span>);\n  }\n}", "var": [{"name": "s", "type": "struct frame802154_t { frame802154_fcf_t fcf; uint8_t seq; PADDING (1); uint16_t dest_pid; uint8_t[8] dest_addr; uint16_t src_pid; uint8_t[8] src_addr; PADDING (2); frame802154_aux_hdr_t aux_hdr; PADDING (4); uint8_t * payload; uint8_t payload_len; PADDING (7); }", "ref_name": "params", "ref_type": "struct frame802154_t { frame802154_fcf_t fcf; uint8_t seq; PADDING (1); uint16_t dest_pid; uint8_t[8] dest_addr; uint16_t src_pid; uint8_t[8] src_addr; PADDING (2); frame802154_aux_hdr_t aux_hdr; PADDING (4); uint8_t * payload; uint8_t payload_len; PADDING (7); }"}], "body_in_train": true}, {"repo_owner": "lagopus", "repo_name": "virtio-net-ipc-qemu-1.0", "path": "lagopus/virtio-net-ipc-qemu-1.0/b82c15a61c57dee951459c580950788b11f6f34c261ef7df5d17e8b5bb214659", "path_in_repo": "lagopus/virtio-net-ipc-qemu-1.0//sh4eb-linux-user/exec.o", "objdump": "00000000000024b4 <cpu_abort>:\n    24b4:\t55                   \tpush   %rbp\n    24b5:\t48 89 e5             \tmov    %rsp,%rbp\n    24b8:\t48 81 ec 90 01 00 00 \tsub    $0x190,%rsp\n    24bf:\t48 89 bd 78 fe ff ff \tmov    %rdi,-0x188(%rbp)\n    24c6:\t48 89 b5 70 fe ff ff \tmov    %rsi,-0x190(%rbp)\n    24cd:\t48 89 95 60 ff ff ff \tmov    %rdx,-0xa0(%rbp)\n    24d4:\t48 89 8d 68 ff ff ff \tmov    %rcx,-0x98(%rbp)\n    24db:\t4c 89 85 70 ff ff ff \tmov    %r8,-0x90(%rbp)\n    24e2:\t4c 89 8d 78 ff ff ff \tmov    %r9,-0x88(%rbp)\n    24e9:\t84 c0                \ttest   %al,%al\n    24eb:\t74 20                \tje     250d <cpu_abort+0x59>\n    24ed:\t0f 29 45 80          \tmovaps %xmm0,-0x80(%rbp)\n    24f1:\t0f 29 4d 90          \tmovaps %xmm1,-0x70(%rbp)\n    24f5:\t0f 29 55 a0          \tmovaps %xmm2,-0x60(%rbp)\n    24f9:\t0f 29 5d b0          \tmovaps %xmm3,-0x50(%rbp)\n    24fd:\t0f 29 65 c0          \tmovaps %xmm4,-0x40(%rbp)\n    2501:\t0f 29 6d d0          \tmovaps %xmm5,-0x30(%rbp)\n    2505:\t0f 29 75 e0          \tmovaps %xmm6,-0x20(%rbp)\n    2509:\t0f 29 7d f0          \tmovaps %xmm7,-0x10(%rbp)\n    250d:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2514:\t00 00 \n    2516:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n    251d:\t31 c0                \txor    %eax,%eax\n    251f:\tc7 85 80 fe ff ff 10 \tmovl   $0x10,-0x180(%rbp)\n    2526:\t00 00 00 \n    2529:\tc7 85 84 fe ff ff 30 \tmovl   $0x30,-0x17c(%rbp)\n    2530:\t00 00 00 \n    2533:\t48 8d 45 10          \tlea    0x10(%rbp),%rax\n    2537:\t48 89 85 88 fe ff ff \tmov    %rax,-0x178(%rbp)\n    253e:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    2545:\t48 89 85 90 fe ff ff \tmov    %rax,-0x170(%rbp)\n    254c:\t48 8d 8d 98 fe ff ff \tlea    -0x168(%rbp),%rcx\n    2553:\t48 8d b5 80 fe ff ff \tlea    -0x180(%rbp),%rsi\n    255a:\t48 8b 06             \tmov    (%rsi),%rax\n    255d:\t48 8b 56 08          \tmov    0x8(%rsi),%rdx\n    2561:\t48 89 01             \tmov    %rax,(%rcx)\n    2564:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n    2568:\t48 8b 46 10          \tmov    0x10(%rsi),%rax\n    256c:\t48 89 41 10          \tmov    %rax,0x10(%rcx)\n    2570:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2577 <cpu_abort+0xc3>\n    2577:\t48 89 c1             \tmov    %rax,%rcx\n    257a:\tba 0d 00 00 00       \tmov    $0xd,%edx\n    257f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2584:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 258b <cpu_abort+0xd7>\n    258b:\te8 00 00 00 00       \tcallq  2590 <cpu_abort+0xdc>\n    2590:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2597 <cpu_abort+0xe3>\n    2597:\t48 8d 95 80 fe ff ff \tlea    -0x180(%rbp),%rdx\n    259e:\t48 8b 8d 70 fe ff ff \tmov    -0x190(%rbp),%rcx\n    25a5:\t48 89 ce             \tmov    %rcx,%rsi\n    25a8:\t48 89 c7             \tmov    %rax,%rdi\n    25ab:\te8 00 00 00 00       \tcallq  25b0 <cpu_abort+0xfc>\n    25b0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 25b7 <cpu_abort+0x103>\n    25b7:\t48 89 c6             \tmov    %rax,%rsi\n    25ba:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n    25bf:\te8 00 00 00 00       \tcallq  25c4 <cpu_abort+0x110>\n    25c4:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 25cb <cpu_abort+0x117>\n    25cb:\t48 8b 85 78 fe ff ff \tmov    -0x188(%rbp),%rax\n    25d2:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    25d7:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 25de <cpu_abort+0x12a>\n    25de:\t48 89 c7             \tmov    %rax,%rdi\n    25e1:\te8 00 00 00 00       \tcallq  25e6 <cpu_abort+0x132>\n    25e6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 25ed <cpu_abort+0x139>\n    25ed:\t48 85 c0             \ttest   %rax,%rax\n    25f0:\t0f 84 c3 00 00 00    \tje     26b9 <cpu_abort+0x205>\n    25f6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 25fd <cpu_abort+0x149>\n    25fd:\t48 85 c0             \ttest   %rax,%rax\n    2600:\t74 20                \tje     2622 <cpu_abort+0x16e>\n    2602:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2609 <cpu_abort+0x155>\n    2609:\t48 89 c1             \tmov    %rax,%rcx\n    260c:\tba 0d 00 00 00       \tmov    $0xd,%edx\n    2611:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2616:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 261d <cpu_abort+0x169>\n    261d:\te8 00 00 00 00       \tcallq  2622 <cpu_abort+0x16e>\n    2622:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2629 <cpu_abort+0x175>\n    2629:\t48 85 c0             \ttest   %rax,%rax\n    262c:\t74 20                \tje     264e <cpu_abort+0x19a>\n    262e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2635 <cpu_abort+0x181>\n    2635:\t48 8d 95 98 fe ff ff \tlea    -0x168(%rbp),%rdx\n    263c:\t48 8b 8d 70 fe ff ff \tmov    -0x190(%rbp),%rcx\n    2643:\t48 89 ce             \tmov    %rcx,%rsi\n    2646:\t48 89 c7             \tmov    %rax,%rdi\n    2649:\te8 00 00 00 00       \tcallq  264e <cpu_abort+0x19a>\n    264e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2655 <cpu_abort+0x1a1>\n    2655:\t48 85 c0             \ttest   %rax,%rax\n    2658:\t74 14                \tje     266e <cpu_abort+0x1ba>\n    265a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2661 <cpu_abort+0x1ad>\n    2661:\t48 89 c6             \tmov    %rax,%rsi\n    2664:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n    2669:\te8 00 00 00 00       \tcallq  266e <cpu_abort+0x1ba>\n    266e:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 2675 <cpu_abort+0x1c1>\n    2675:\t48 8b 85 78 fe ff ff \tmov    -0x188(%rbp),%rax\n    267c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    2681:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2688 <cpu_abort+0x1d4>\n    2688:\t48 89 c7             \tmov    %rax,%rdi\n    268b:\te8 00 00 00 00       \tcallq  2690 <cpu_abort+0x1dc>\n    2690:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2697 <cpu_abort+0x1e3>\n    2697:\t48 89 c7             \tmov    %rax,%rdi\n    269a:\te8 00 00 00 00       \tcallq  269f <cpu_abort+0x1eb>\n    269f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 26a6 <cpu_abort+0x1f2>\n    26a6:\t48 89 c7             \tmov    %rax,%rdi\n    26a9:\te8 00 00 00 00       \tcallq  26ae <cpu_abort+0x1fa>\n    26ae:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 26b9 <cpu_abort+0x205>\n    26b5:\t00 00 00 00 \n    26b9:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n    26c0:\t48 83 c0 08          \tadd    $0x8,%rax\n    26c4:\t48 89 c7             \tmov    %rax,%rdi\n    26c7:\te8 00 00 00 00       \tcallq  26cc <cpu_abort+0x218>\n    26cc:\t48 c7 85 b0 fe ff ff \tmovq   $0x0,-0x150(%rbp)\n    26d3:\t00 00 00 00 \n    26d7:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n    26de:\tba 00 00 00 00       \tmov    $0x0,%edx\n    26e3:\t48 89 c6             \tmov    %rax,%rsi\n    26e6:\tbf 06 00 00 00       \tmov    $0x6,%edi\n    26eb:\te8 00 00 00 00       \tcallq  26f0 <cpu_abort+0x23c>\n    26f0:\te8 00 00 00 00       \tcallq  26f5 <cpu_copy>", "code_s": "void __fastcall __noreturn\ncpu_abort(__int64 a1, const char *a2, __int64 a3, __int64 a4, __int64 a5,\n          __int64 a6, __m128 a7, __m128 a8, __m128 a9, __m128 a10, __m128 a11,\n          __m128 a12, __m128 a13, __m128 a14, char <span class=\"supfact\">a15</span>) {\n  __int64 <span class=\"supfact\">arg</span>[Number];\n  _QWORD <span class=\"supfact\">v16</span>[Number];\n  struct sigaction <span class=\"supfact\">v17</span>;\n  unsigned __int64 <span class=\"supfact\">v18</span>;\n  char <span class=\"supfact\">v19</span>[Number];\n  __int64 <span class=\"supfact\">v20</span>;\n  __int64 <span class=\"supfact\">v21</span>;\n  __int64 <span class=\"supfact\">v22</span>;\n  __int64 <span class=\"supfact\">v23</span>;\n  __m128 <span class=\"supfact\">v24</span>;\n  __m128 <span class=\"supfact\">v25</span>;\n  __m128 <span class=\"supfact\">v26</span>;\n  __m128 <span class=\"supfact\">v27</span>;\n  __m128 <span class=\"supfact\">v28</span>;\n  __m128 <span class=\"supfact\">v29</span>;\n  __m128 <span class=\"supfact\">v30</span>;\n  __m128 <span class=\"supfact\">v31</span>;\n  <span class=\"supfact\">v24</span> = a7;\n  <span class=\"supfact\">v25</span> = a8;\n  <span class=\"supfact\">v26</span> = a9;\n  <span class=\"supfact\">v27</span> = a10;\n  <span class=\"supfact\">v28</span> = a11;\n  <span class=\"supfact\">v29</span> = a12;\n  <span class=\"supfact\">v30</span> = a13;\n  <span class=\"supfact\">v31</span> = a14;\n  <span class=\"supfact\">v20</span> = a3;\n  <span class=\"supfact\">v21</span> = a4;\n  <span class=\"supfact\">v22</span> = a5;\n  <span class=\"supfact\">v23</span> = a6;\n  <span class=\"supfact\">v18</span> = __readfsqword(Number);\n  <span class=\"supfact\">arg</span>[Number] = Number;\n  <span class=\"supfact\">arg</span>[Number] = (__int64)&<span class=\"supfact\">a15</span>;\n  <span class=\"supfact\">arg</span>[Number] = (__int64)<span class=\"supfact\">v19</span>;\n  <span class=\"supfact\">v16</span>[Number] = Number;\n  <span class=\"supfact\">v16</span>[Number] = &<span class=\"supfact\">a15</span>;\n  <span class=\"supfact\">v16</span>[Number] = <span class=\"supfact\">v19</span>;\n  fwrite((char *)&off_2006678 + Number, Number, Number, stderr);\n  vfprintf(stderr, a2, <span class=\"supfact\">arg</span>);\n  fputc(Number, stderr);\n  cpu_dump_state(a1, stderr, &fprintf, Number L);\n  if (logfile) {\n    fwrite((char *)&off_2006678 + Number, Number, Number, logfile);\n    if (logfile)\n      vfprintf(logfile, a2, <span class=\"supfact\">v16</span>);\n    if (logfile)\n      fputc(Number, logfile);\n    cpu_dump_state(a1, logfile, &fprintf, Number L);\n    fflush(logfile);\n    fclose(logfile);\n    logfile = Number L;\n  }\n  sigfillset(&<span class=\"supfact\">v17</span>.sa_mask);\n  <span class=\"supfact\">v17</span>.sa_handler = Number L;\n  sigaction(Number, &<span class=\"supfact\">v17</span>, Number L);\n  abort();\n}", "code_t": "void __noreturn cpu_abort(CPUSH4State *env, const char *fmt, ...) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int128 v6;\n  __int128 v7;\n  __int128 v8;\n  __int128 v9;\n  __int128 v10;\n  __int128 v11;\n  __int128 v12;\n  __int128 v13;\n  va_list <span class=\"supfact\">ap</span>;\n  va_list <span class=\"supfact\">ap2</span>;\n  sigaction <span class=\"supfact\">act</span>;\n  unsigned __int64 <span class=\"supfact\">v17</span>;\n  char <span class=\"supfact\">v18</span>[Number];\n  __int64 <span class=\"supfact\">v19</span>;\n  __int64 <span class=\"supfact\">v20</span>;\n  __int64 <span class=\"supfact\">v21</span>;\n  __int64 <span class=\"supfact\">v22</span>;\n  __int128 <span class=\"supfact\">v23</span>;\n  __int128 <span class=\"supfact\">v24</span>;\n  __int128 <span class=\"supfact\">v25</span>;\n  __int128 <span class=\"supfact\">v26</span>;\n  __int128 <span class=\"supfact\">v27</span>;\n  __int128 <span class=\"supfact\">v28</span>;\n  __int128 <span class=\"supfact\">v29</span>;\n  __int128 <span class=\"supfact\">v30</span>;\n  char v31;\n  <span class=\"supfact\">v23</span> = v6;\n  <span class=\"supfact\">v24</span> = v7;\n  <span class=\"supfact\">v25</span> = v8;\n  <span class=\"supfact\">v26</span> = v9;\n  <span class=\"supfact\">v27</span> = v10;\n  <span class=\"supfact\">v28</span> = v11;\n  <span class=\"supfact\">v29</span> = v12;\n  <span class=\"supfact\">v30</span> = v13;\n  <span class=\"supfact\">v19</span> = v2;\n  <span class=\"supfact\">v20</span> = v3;\n  <span class=\"supfact\">v21</span> = v4;\n  <span class=\"supfact\">v22</span> = v5;\n  <span class=\"supfact\">v17</span> = __readfsqword(Number);\n  *(_QWORD *)&<span class=\"supfact\">ap</span>[Number].gp_offset = Number;\n  <span class=\"supfact\">ap</span>[Number].overflow_arg_area = &v31;\n  <span class=\"supfact\">ap</span>[Number].reg_save_area = <span class=\"supfact\">v18</span>;\n  *(_QWORD *)&<span class=\"supfact\">ap2</span>[Number].gp_offset = Number;\n  <span class=\"supfact\">ap2</span>[Number].overflow_arg_area = &v31;\n  <span class=\"supfact\">ap2</span>[Number].reg_save_area = <span class=\"supfact\">v18</span>;\n  fwrite(String, Number, Number, stderr);\n  vfprintf(stderr, fmt, <span class=\"supfact\">ap</span>);\n  fputc(Number, stderr);\n  cpu_dump_state(env, stderr, &fprintf, Number L);\n  if (logfile) {\n    fwrite(String, Number, Number, logfile);\n    if (logfile)\n      vfprintf(logfile, fmt, <span class=\"supfact\">ap2</span>);\n    if (logfile)\n      fputc(Number, logfile);\n    cpu_dump_state(env, logfile, &fprintf, Number L);\n    fflush(logfile);\n    fclose(logfile);\n    logfile = Number L;\n  }\n  sigfillset(&<span class=\"supfact\">act</span>.sa_mask);\n  <span class=\"supfact\">act</span>.sa_handler = Number L;\n  sigaction_0(Number, &<span class=\"supfact\">act</span>, Number L);\n  abort();\n}", "var": [{"name": "v17", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": true}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/7e67eaaf1ff93dafca86e30947798094d94998e892cfbb7a9369cfcc26db7090", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/pkey/rsa_decrypt", "objdump": "0000000000408723 <mbedtls_ctr_drbg_self_test>:\n  408723:\t55                   \tpush   %rbp\n  408724:\t48 89 e5             \tmov    %rsp,%rbp\n  408727:\t48 81 ec 80 01 00 00 \tsub    $0x180,%rsp\n  40872e:\t89 bd 8c fe ff ff    \tmov    %edi,-0x174(%rbp)\n  408734:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  40873b:\t48 89 c7             \tmov    %rax,%rdi\n  40873e:\te8 f0 f1 ff ff       \tcallq  407933 <mbedtls_ctr_drbg_init>\n  408743:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  40874a:\t74 0f                \tje     40875b <mbedtls_ctr_drbg_self_test+0x38>\n  40874c:\tbf 00 0b 42 00       \tmov    $0x420b00,%edi\n  408751:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  408756:\te8 65 89 ff ff       \tcallq  4010c0 <printf@plt>\n  40875b:\t48 c7 05 ca 09 02 00 \tmovq   $0x0,0x209ca(%rip)        # 429130 <test_offset>\n  408762:\t00 00 00 00 \n  408766:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  40876d:\t41 b9 20 00 00 00    \tmov    $0x20,%r9d\n  408773:\t41 b8 10 00 00 00    \tmov    $0x10,%r8d\n  408779:\tb9 c0 0a 42 00       \tmov    $0x420ac0,%ecx\n  40877e:\tba 20 0a 42 00       \tmov    $0x420a20,%edx\n  408783:\tbe c9 86 40 00       \tmov    $0x4086c9,%esi\n  408788:\t48 89 c7             \tmov    %rax,%rdi\n  40878b:\te8 c8 f1 ff ff       \tcallq  407958 <mbedtls_ctr_drbg_seed_entropy_len>\n  408790:\t85 c0                \ttest   %eax,%eax\n  408792:\t74 1d                \tje     4087b1 <mbedtls_ctr_drbg_self_test+0x8e>\n  408794:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  40879b:\t74 0a                \tje     4087a7 <mbedtls_ctr_drbg_self_test+0x84>\n  40879d:\tbf 1a 0b 42 00       \tmov    $0x420b1a,%edi\n  4087a2:\te8 c9 88 ff ff       \tcallq  401070 <puts@plt>\n  4087a7:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4087ac:\te9 91 02 00 00       \tjmpq   408a42 <mbedtls_ctr_drbg_self_test+0x31f>\n  4087b1:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  4087b8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4087bd:\t48 89 c7             \tmov    %rax,%rdi\n  4087c0:\te8 e0 f2 ff ff       \tcallq  407aa5 <mbedtls_ctr_drbg_set_prediction_resistance>\n  4087c5:\t48 8d 8d 90 fe ff ff \tlea    -0x170(%rbp),%rcx\n  4087cc:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  4087d3:\tba 10 00 00 00       \tmov    $0x10,%edx\n  4087d8:\t48 89 ce             \tmov    %rcx,%rsi\n  4087db:\t48 89 c7             \tmov    %rax,%rdi\n  4087de:\te8 8f fc ff ff       \tcallq  408472 <mbedtls_ctr_drbg_random>\n  4087e3:\t85 c0                \ttest   %eax,%eax\n  4087e5:\t74 1d                \tje     408804 <mbedtls_ctr_drbg_self_test+0xe1>\n  4087e7:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  4087ee:\t74 0a                \tje     4087fa <mbedtls_ctr_drbg_self_test+0xd7>\n  4087f0:\tbf 1a 0b 42 00       \tmov    $0x420b1a,%edi\n  4087f5:\te8 76 88 ff ff       \tcallq  401070 <puts@plt>\n  4087fa:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4087ff:\te9 3e 02 00 00       \tjmpq   408a42 <mbedtls_ctr_drbg_self_test+0x31f>\n  408804:\t48 8d 8d 90 fe ff ff \tlea    -0x170(%rbp),%rcx\n  40880b:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  408812:\tba 10 00 00 00       \tmov    $0x10,%edx\n  408817:\t48 89 ce             \tmov    %rcx,%rsi\n  40881a:\t48 89 c7             \tmov    %rax,%rdi\n  40881d:\te8 50 fc ff ff       \tcallq  408472 <mbedtls_ctr_drbg_random>\n  408822:\t85 c0                \ttest   %eax,%eax\n  408824:\t74 1d                \tje     408843 <mbedtls_ctr_drbg_self_test+0x120>\n  408826:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  40882d:\t74 0a                \tje     408839 <mbedtls_ctr_drbg_self_test+0x116>\n  40882f:\tbf 1a 0b 42 00       \tmov    $0x420b1a,%edi\n  408834:\te8 37 88 ff ff       \tcallq  401070 <puts@plt>\n  408839:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40883e:\te9 ff 01 00 00       \tjmpq   408a42 <mbedtls_ctr_drbg_self_test+0x31f>\n  408843:\t48 8d 85 90 fe ff ff \tlea    -0x170(%rbp),%rax\n  40884a:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40884f:\tbe e0 0a 42 00       \tmov    $0x420ae0,%esi\n  408854:\t48 89 c7             \tmov    %rax,%rdi\n  408857:\te8 c4 88 ff ff       \tcallq  401120 <memcmp@plt>\n  40885c:\t85 c0                \ttest   %eax,%eax\n  40885e:\t74 1d                \tje     40887d <mbedtls_ctr_drbg_self_test+0x15a>\n  408860:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  408867:\t74 0a                \tje     408873 <mbedtls_ctr_drbg_self_test+0x150>\n  408869:\tbf 1a 0b 42 00       \tmov    $0x420b1a,%edi\n  40886e:\te8 fd 87 ff ff       \tcallq  401070 <puts@plt>\n  408873:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  408878:\te9 c5 01 00 00       \tjmpq   408a42 <mbedtls_ctr_drbg_self_test+0x31f>\n  40887d:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  408884:\t48 89 c7             \tmov    %rax,%rdi\n  408887:\te8 e0 f1 ff ff       \tcallq  407a6c <mbedtls_ctr_drbg_free>\n  40888c:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  408893:\t74 0a                \tje     40889f <mbedtls_ctr_drbg_self_test+0x17c>\n  408895:\tbf 21 0b 42 00       \tmov    $0x420b21,%edi\n  40889a:\te8 d1 87 ff ff       \tcallq  401070 <puts@plt>\n  40889f:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  4088a6:\t74 0f                \tje     4088b7 <mbedtls_ctr_drbg_self_test+0x194>\n  4088a8:\tbf 28 0b 42 00       \tmov    $0x420b28,%edi\n  4088ad:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4088b2:\te8 09 88 ff ff       \tcallq  4010c0 <printf@plt>\n  4088b7:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  4088be:\t48 89 c7             \tmov    %rax,%rdi\n  4088c1:\te8 6d f0 ff ff       \tcallq  407933 <mbedtls_ctr_drbg_init>\n  4088c6:\t48 c7 05 5f 08 02 00 \tmovq   $0x0,0x2085f(%rip)        # 429130 <test_offset>\n  4088cd:\t00 00 00 00 \n  4088d1:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  4088d8:\t41 b9 20 00 00 00    \tmov    $0x20,%r9d\n  4088de:\t41 b8 10 00 00 00    \tmov    $0x10,%r8d\n  4088e4:\tb9 d0 0a 42 00       \tmov    $0x420ad0,%ecx\n  4088e9:\tba 80 0a 42 00       \tmov    $0x420a80,%edx\n  4088ee:\tbe c9 86 40 00       \tmov    $0x4086c9,%esi\n  4088f3:\t48 89 c7             \tmov    %rax,%rdi\n  4088f6:\te8 5d f0 ff ff       \tcallq  407958 <mbedtls_ctr_drbg_seed_entropy_len>\n  4088fb:\t85 c0                \ttest   %eax,%eax\n  4088fd:\t74 1d                \tje     40891c <mbedtls_ctr_drbg_self_test+0x1f9>\n  4088ff:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  408906:\t74 0a                \tje     408912 <mbedtls_ctr_drbg_self_test+0x1ef>\n  408908:\tbf 1a 0b 42 00       \tmov    $0x420b1a,%edi\n  40890d:\te8 5e 87 ff ff       \tcallq  401070 <puts@plt>\n  408912:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  408917:\te9 26 01 00 00       \tjmpq   408a42 <mbedtls_ctr_drbg_self_test+0x31f>\n  40891c:\t48 8d 8d 90 fe ff ff \tlea    -0x170(%rbp),%rcx\n  408923:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  40892a:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40892f:\t48 89 ce             \tmov    %rcx,%rsi\n  408932:\t48 89 c7             \tmov    %rax,%rdi\n  408935:\te8 38 fb ff ff       \tcallq  408472 <mbedtls_ctr_drbg_random>\n  40893a:\t85 c0                \ttest   %eax,%eax\n  40893c:\t74 1d                \tje     40895b <mbedtls_ctr_drbg_self_test+0x238>\n  40893e:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  408945:\t74 0a                \tje     408951 <mbedtls_ctr_drbg_self_test+0x22e>\n  408947:\tbf 1a 0b 42 00       \tmov    $0x420b1a,%edi\n  40894c:\te8 1f 87 ff ff       \tcallq  401070 <puts@plt>\n  408951:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  408956:\te9 e7 00 00 00       \tjmpq   408a42 <mbedtls_ctr_drbg_self_test+0x31f>\n  40895b:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  408962:\tba 00 00 00 00       \tmov    $0x0,%edx\n  408967:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40896c:\t48 89 c7             \tmov    %rax,%rdi\n  40896f:\te8 37 f7 ff ff       \tcallq  4080ab <mbedtls_ctr_drbg_reseed>\n  408974:\t85 c0                \ttest   %eax,%eax\n  408976:\t74 1d                \tje     408995 <mbedtls_ctr_drbg_self_test+0x272>\n  408978:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  40897f:\t74 0a                \tje     40898b <mbedtls_ctr_drbg_self_test+0x268>\n  408981:\tbf 1a 0b 42 00       \tmov    $0x420b1a,%edi\n  408986:\te8 e5 86 ff ff       \tcallq  401070 <puts@plt>\n  40898b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  408990:\te9 ad 00 00 00       \tjmpq   408a42 <mbedtls_ctr_drbg_self_test+0x31f>\n  408995:\t48 8d 8d 90 fe ff ff \tlea    -0x170(%rbp),%rcx\n  40899c:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  4089a3:\tba 10 00 00 00       \tmov    $0x10,%edx\n  4089a8:\t48 89 ce             \tmov    %rcx,%rsi\n  4089ab:\t48 89 c7             \tmov    %rax,%rdi\n  4089ae:\te8 bf fa ff ff       \tcallq  408472 <mbedtls_ctr_drbg_random>\n  4089b3:\t85 c0                \ttest   %eax,%eax\n  4089b5:\t74 1a                \tje     4089d1 <mbedtls_ctr_drbg_self_test+0x2ae>\n  4089b7:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  4089be:\t74 0a                \tje     4089ca <mbedtls_ctr_drbg_self_test+0x2a7>\n  4089c0:\tbf 1a 0b 42 00       \tmov    $0x420b1a,%edi\n  4089c5:\te8 a6 86 ff ff       \tcallq  401070 <puts@plt>\n  4089ca:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4089cf:\teb 71                \tjmp    408a42 <mbedtls_ctr_drbg_self_test+0x31f>\n  4089d1:\t48 8d 85 90 fe ff ff \tlea    -0x170(%rbp),%rax\n  4089d8:\tba 10 00 00 00       \tmov    $0x10,%edx\n  4089dd:\tbe f0 0a 42 00       \tmov    $0x420af0,%esi\n  4089e2:\t48 89 c7             \tmov    %rax,%rdi\n  4089e5:\te8 36 87 ff ff       \tcallq  401120 <memcmp@plt>\n  4089ea:\t85 c0                \ttest   %eax,%eax\n  4089ec:\t74 1a                \tje     408a08 <mbedtls_ctr_drbg_self_test+0x2e5>\n  4089ee:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  4089f5:\t74 0a                \tje     408a01 <mbedtls_ctr_drbg_self_test+0x2de>\n  4089f7:\tbf 1a 0b 42 00       \tmov    $0x420b1a,%edi\n  4089fc:\te8 6f 86 ff ff       \tcallq  401070 <puts@plt>\n  408a01:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  408a06:\teb 3a                \tjmp    408a42 <mbedtls_ctr_drbg_self_test+0x31f>\n  408a08:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  408a0f:\t48 89 c7             \tmov    %rax,%rdi\n  408a12:\te8 55 f0 ff ff       \tcallq  407a6c <mbedtls_ctr_drbg_free>\n  408a17:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  408a1e:\t74 0a                \tje     408a2a <mbedtls_ctr_drbg_self_test+0x307>\n  408a20:\tbf 21 0b 42 00       \tmov    $0x420b21,%edi\n  408a25:\te8 46 86 ff ff       \tcallq  401070 <puts@plt>\n  408a2a:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n  408a31:\t74 0a                \tje     408a3d <mbedtls_ctr_drbg_self_test+0x31a>\n  408a33:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  408a38:\te8 03 86 ff ff       \tcallq  401040 <putchar@plt>\n  408a3d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  408a42:\tc9                   \tleaveq \n  408a43:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_ctr_drbg_self_test(int a1) {\n  __int64 result;\n  char <span class=\"supfact\">s1</span>[Number];\n  _QWORD <span class=\"supfact\">v3</span>[Number];\n  mbedtls_ctr_drbg_init(<span class=\"supfact\">v3</span>);\n  if (a1)\n    printf(String);\n  test_offset = Number L;\n  if ((unsigned int)mbedtls_ctr_drbg_seed_entropy_len(\n          (__int64)<span class=\"supfact\">v3</span>, (__int64)ctr_drbg_self_test_entropy,\n          (__int64)&entropy_source_pr, (__int64)&nonce_pers_pr, Number L,\n          Number L)) {\n    if (a1)\n      puts(String);\n    result = Number L;\n  } else {\n    mbedtls_ctr_drbg_set_prediction_resistance((__int64)<span class=\"supfact\">v3</span>,\n                                               Number);\n    if ((unsigned int)mbedtls_ctr_drbg_random(<span class=\"supfact\">v3</span>,\n                                              <span class=\"supfact\">s1</span>, Number)) {\n      if (a1)\n        puts(String);\n      result = Number L;\n    } else if ((unsigned int)mbedtls_ctr_drbg_random(\n                   <span class=\"supfact\">v3</span>, <span class=\"supfact\">s1</span>, Number)) {\n      if (a1)\n        puts(String);\n      result = Number L;\n    } else if (!memcmp(<span class=\"supfact\">s1</span>, &result_pr, Number)) {\n      mbedtls_ctr_drbg_free((__int64)<span class=\"supfact\">v3</span>);\n      if (a1)\n        puts(String);\n      if (a1)\n        printf(String);\n      mbedtls_ctr_drbg_init(<span class=\"supfact\">v3</span>);\n      test_offset = Number L;\n      if ((unsigned int)mbedtls_ctr_drbg_seed_entropy_len(\n              (__int64)<span class=\"supfact\">v3</span>, (__int64)ctr_drbg_self_test_entropy,\n              (__int64)&entropy_source_nopr, (__int64)&nonce_pers_nopr,\n              Number L, Number L)) {\n        if (a1)\n          puts(String);\n        result = Number L;\n      } else if ((unsigned int)mbedtls_ctr_drbg_random(\n                     <span class=\"supfact\">v3</span>, <span class=\"supfact\">s1</span>, Number)) {\n        if (a1)\n          puts(String);\n        result = Number L;\n      } else if ((unsigned int)mbedtls_ctr_drbg_reseed(\n                     (__int64)<span class=\"supfact\">v3</span>, Number L, Number L)) {\n        if (a1)\n          puts(String);\n        result = Number L;\n      } else if ((unsigned int)mbedtls_ctr_drbg_random(\n                     <span class=\"supfact\">v3</span>, <span class=\"supfact\">s1</span>, Number)) {\n        if (a1)\n          puts(String);\n        result = Number L;\n      } else if (!memcmp(<span class=\"supfact\">s1</span>, &result_nopr, Number)) {\n        mbedtls_ctr_drbg_free((__int64)<span class=\"supfact\">v3</span>);\n        if (a1)\n          puts(String);\n        if (a1)\n          putchar(Number);\n        result = Number L;\n      } else {\n        if (a1)\n          puts(String);\n        result = Number L;\n      }\n    } else {\n      if (a1)\n        puts(String);\n      result = Number L;\n    }\n  }\n  return result;\n}", "code_t": "int __cdecl mbedtls_ctr_drbg_self_test(int verbose) {\n  int result;\n  unsigned __int8 <span class=\"supfact\">buf</span>[Number];\n  mbedtls_ctr_drbg_context_0 <span class=\"supfact\">ctx</span>;\n  mbedtls_ctr_drbg_init(&<span class=\"supfact\">ctx</span>);\n  if (verbose)\n    printf(String);\n  test_offset = Number L;\n  if (mbedtls_ctr_drbg_seed_entropy_len(\n          &<span class=\"supfact\">ctx</span>,\n          (int (*)(void *, unsigned __int8 *,\n                   size_t))ctr_drbg_self_test_entropy,\n          (void *)entropy_source_pr, nonce_pers_pr, Number, Number)) {\n    if (verbose)\n      puts(String);\n    result = Number;\n  } else {\n    mbedtls_ctr_drbg_set_prediction_resistance(&<span class=\"supfact\">ctx</span>, Number);\n    if (mbedtls_ctr_drbg_random(&<span class=\"supfact\">ctx</span>, <span class=\"supfact\">buf</span>,\n                                Number)) {\n      if (verbose)\n        puts(String);\n      result = Number;\n    } else if (mbedtls_ctr_drbg_random(&<span class=\"supfact\">ctx</span>,\n                                       <span class=\"supfact\">buf</span>, Number)) {\n      if (verbose)\n        puts(String);\n      result = Number;\n    } else if (!memcmp(<span class=\"supfact\">buf</span>, result_pr, Number)) {\n      mbedtls_ctr_drbg_free(&<span class=\"supfact\">ctx</span>);\n      if (verbose)\n        puts(String);\n      if (verbose)\n        printf(String);\n      mbedtls_ctr_drbg_init(&<span class=\"supfact\">ctx</span>);\n      test_offset = Number L;\n      if (mbedtls_ctr_drbg_seed_entropy_len(\n              &<span class=\"supfact\">ctx</span>,\n              (int (*)(void *, unsigned __int8 *,\n                       size_t))ctr_drbg_self_test_entropy,\n              (void *)entropy_source_nopr, nonce_pers_nopr, Number, Number)) {\n        if (verbose)\n          puts(String);\n        result = Number;\n      } else if (mbedtls_ctr_drbg_random(&<span class=\"supfact\">ctx</span>,\n                                         <span class=\"supfact\">buf</span>, Number)) {\n        if (verbose)\n          puts(String);\n        result = Number;\n      } else if (mbedtls_ctr_drbg_reseed(&<span class=\"supfact\">ctx</span>, Number L,\n                                         Number L)) {\n        if (verbose)\n          puts(String);\n        result = Number;\n      } else if (mbedtls_ctr_drbg_random(&<span class=\"supfact\">ctx</span>,\n                                         <span class=\"supfact\">buf</span>, Number)) {\n        if (verbose)\n          puts(String);\n        result = Number;\n      } else if (!memcmp(<span class=\"supfact\">buf</span>, result_nopr, Number)) {\n        mbedtls_ctr_drbg_free(&<span class=\"supfact\">ctx</span>);\n        if (verbose)\n          puts(String);\n        if (verbose)\n          putchar(Number);\n        result = Number;\n      } else {\n        if (verbose)\n          puts(String);\n        result = Number;\n      }\n    } else {\n      if (verbose)\n        puts(String);\n      result = Number;\n    }\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "struct mbedtls_ctr_drbg_context_0 { unsigned __int8[16] counter; int reseed_counter; int prediction_resistance; size_t entropy_len; int reseed_interval; PADDING (4); mbedtls_aes_context_0 aes_ctx; int (*)(void *, unsigned __int8 *, size_t) f_entropy; void * p_entropy; }", "ref_name": "ctx", "ref_type": "struct mbedtls_ctr_drbg_context_0 { unsigned __int8[16] counter; int reseed_counter; int prediction_resistance; size_t entropy_len; int reseed_interval; PADDING (4); mbedtls_aes_context_0 aes_ctx; int (*)(void *, unsigned __int8 *, size_t) f_entropy; void * p_entropy; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/4a0bdc8f003682ab5c7a3c0a5c9b700f487b7028dbd0c77ebe0fbc2d78f678f9", "path_in_repo": "XanClic/qemu//aarch64-softmmu/gdbstub.o", "objdump": "00000000000005f8 <_nocheck__trace_gdbstub_hit_internal_error>:\n     5f8:\t55                   \tpush   %rbp\n     5f9:\t48 89 e5             \tmov    %rsp,%rbp\n     5fc:\t41 54                \tpush   %r12\n     5fe:\t53                   \tpush   %rbx\n     5ff:\t48 83 ec 20          \tsub    $0x20,%rsp\n     603:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     60a:\t00 00 \n     60c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     610:\t31 c0                \txor    %eax,%eax\n     612:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 618 <_nocheck__trace_gdbstub_hit_internal_error+0x20>\n     618:\t85 c0                \ttest   %eax,%eax\n     61a:\t0f 95 c0             \tsetne  %al\n     61d:\t0f b6 c0             \tmovzbl %al,%eax\n     620:\t48 85 c0             \ttest   %rax,%rax\n     623:\t74 57                \tje     67c <_nocheck__trace_gdbstub_hit_internal_error+0x84>\n     625:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 62c <_nocheck__trace_gdbstub_hit_internal_error+0x34>\n     62c:\t66 85 c0             \ttest   %ax,%ax\n     62f:\t74 4b                \tje     67c <_nocheck__trace_gdbstub_hit_internal_error+0x84>\n     631:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     636:\te8 25 fa ff ff       \tcallq  60 <qemu_loglevel_mask>\n     63b:\t84 c0                \ttest   %al,%al\n     63d:\t74 3d                \tje     67c <_nocheck__trace_gdbstub_hit_internal_error+0x84>\n     63f:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     643:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     648:\t48 89 c7             \tmov    %rax,%rdi\n     64b:\te8 00 00 00 00       \tcallq  650 <_nocheck__trace_gdbstub_hit_internal_error+0x58>\n     650:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     654:\t49 89 c4             \tmov    %rax,%r12\n     657:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     65b:\t48 89 c3             \tmov    %rax,%rbx\n     65e:\te8 00 00 00 00       \tcallq  663 <_nocheck__trace_gdbstub_hit_internal_error+0x6b>\n     663:\t4c 89 e1             \tmov    %r12,%rcx\n     666:\t48 89 da             \tmov    %rbx,%rdx\n     669:\t89 c6                \tmov    %eax,%esi\n     66b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 672 <_nocheck__trace_gdbstub_hit_internal_error+0x7a>\n     672:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     677:\te8 00 00 00 00       \tcallq  67c <_nocheck__trace_gdbstub_hit_internal_error+0x84>\n     67c:\t90                   \tnop\n     67d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     681:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     688:\t00 00 \n     68a:\t74 05                \tje     691 <_nocheck__trace_gdbstub_hit_internal_error+0x99>\n     68c:\te8 00 00 00 00       \tcallq  691 <_nocheck__trace_gdbstub_hit_internal_error+0x99>\n     691:\t48 83 c4 20          \tadd    $0x20,%rsp\n     695:\t5b                   \tpop    %rbx\n     696:\t41 5c                \tpop    %r12\n     698:\t5d                   \tpop    %rbp\n     699:\tc3                   \tretq   ", "code_s": "unsigned __int64 nocheck__trace_gdbstub_hit_internal_error() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_HIT_INTERNAL_ERROR_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v0 = <span class=\"supfact\">tv</span>.tv_usec;\n    v1 = <span class=\"supfact\">tv</span>.tv_sec;\n    v2 = qemu_get_thread_id();\n    qemu_log(String, v2, v1, v0);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v5</span>;\n}", "code_t": "void __cdecl nocheck__trace_gdbstub_hit_internal_error() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_HIT_INTERNAL_ERROR_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v0 = <span class=\"supfact\">_now</span>.tv_usec;\n    v1 = <span class=\"supfact\">_now</span>.tv_sec;\n    v2 = qemu_get_thread_id();\n    qemu_log(String, v2, v1, v0);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "nstroustrup", "repo_name": "lifespan", "path": "nstroustrup/lifespan/79fc827494d9fc5fbc2996e5e37a2edf638ae382966ea1c75ae3eede0ed34781", "path_in_repo": "nstroustrup/lifespan/external_compile_libraries/fltk/test/device", "objdump": "000000000041c0a1 <_ZL18decorated_win_sizeP9Fl_WindowRiS1_>:\n  41c0a1:\t8b 47 28             \tmov    0x28(%rdi),%eax\n  41c0a4:\t89 06                \tmov    %eax,(%rsi)\n  41c0a6:\t8b 47 2c             \tmov    0x2c(%rdi),%eax\n  41c0a9:\t89 02                \tmov    %eax,(%rdx)\n  41c0ab:\t48 8b 87 a0 00 00 00 \tmov    0xa0(%rdi),%rax\n  41c0b2:\t48 85 c0             \ttest   %rax,%rax\n  41c0b5:\t0f 84 98 00 00 00    \tje     41c153 <_ZL18decorated_win_sizeP9Fl_WindowRiS1_+0xb2>\n  41c0bb:\t48 83 7f 08 00       \tcmpq   $0x0,0x8(%rdi)\n  41c0c0:\t0f 85 8d 00 00 00    \tjne    41c153 <_ZL18decorated_win_sizeP9Fl_WindowRiS1_+0xb2>\n  41c0c6:\tf6 47 60 0a          \ttestb  $0xa,0x60(%rdi)\n  41c0ca:\t0f 85 83 00 00 00    \tjne    41c153 <_ZL18decorated_win_sizeP9Fl_WindowRiS1_+0xb2>\n  41c0d0:\t55                   \tpush   %rbp\n  41c0d1:\t48 89 d5             \tmov    %rdx,%rbp\n  41c0d4:\t53                   \tpush   %rbx\n  41c0d5:\t48 89 f3             \tmov    %rsi,%rbx\n  41c0d8:\t48 81 ec b8 00 00 00 \tsub    $0xb8,%rsp\n  41c0df:\t48 8b 3d 8a 50 08 00 \tmov    0x8508a(%rip),%rdi        # 4a1170 <fl_display>\n  41c0e6:\tc7 44 24 0c 00 00 00 \tmovl   $0x0,0xc(%rsp)\n  41c0ed:\t00 \n  41c0ee:\t48 8b 30             \tmov    (%rax),%rsi\n  41c0f1:\t4c 8d 4c 24 0c       \tlea    0xc(%rsp),%r9\n  41c0f6:\t4c 8d 44 24 20       \tlea    0x20(%rsp),%r8\n  41c0fb:\t48 8d 4c 24 18       \tlea    0x18(%rsp),%rcx\n  41c100:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n  41c105:\te8 86 91 fe ff       \tcallq  405290 <XQueryTree@plt>\n  41c10a:\t85 c0                \ttest   %eax,%eax\n  41c10c:\t74 3b                \tje     41c149 <_ZL18decorated_win_sizeP9Fl_WindowRiS1_+0xa8>\n  41c10e:\t83 7c 24 0c 00       \tcmpl   $0x0,0xc(%rsp)\n  41c113:\t74 0a                \tje     41c11f <_ZL18decorated_win_sizeP9Fl_WindowRiS1_+0x7e>\n  41c115:\t48 8b 7c 24 20       \tmov    0x20(%rsp),%rdi\n  41c11a:\te8 31 98 fe ff       \tcallq  405950 <XFree@plt>\n  41c11f:\t48 8b 74 24 18       \tmov    0x18(%rsp),%rsi\n  41c124:\t48 39 74 24 10       \tcmp    %rsi,0x10(%rsp)\n  41c129:\t74 1e                \tje     41c149 <_ZL18decorated_win_sizeP9Fl_WindowRiS1_+0xa8>\n  41c12b:\t48 8b 3d 3e 50 08 00 \tmov    0x8503e(%rip),%rdi        # 4a1170 <fl_display>\n  41c132:\t48 8d 54 24 28       \tlea    0x28(%rsp),%rdx\n  41c137:\te8 94 9b fe ff       \tcallq  405cd0 <XGetWindowAttributes@plt>\n  41c13c:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n  41c140:\t89 03                \tmov    %eax,(%rbx)\n  41c142:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n  41c146:\t89 45 00             \tmov    %eax,0x0(%rbp)\n  41c149:\t48 81 c4 b8 00 00 00 \tadd    $0xb8,%rsp\n  41c150:\t5b                   \tpop    %rbx\n  41c151:\t5d                   \tpop    %rbp\n  41c152:\tc3                   \tretq   \n  41c153:\tc3                   \tretq   ", "code_s": "int __fastcall decorated_win_size(Fl_Window *a1, int *a2, int *a3) {\n  Window *v3;\n  unsigned int <span class=\"supfact\">v6</span>;\n  Window <span class=\"supfact\">v7</span>;\n  Window <span class=\"supfact\">v8</span>;\n  Window *<span class=\"supfact\">v9</span>;\n  XWindowAttributes <span class=\"supfact\">v10</span>;\n  *a2 = *((_DWORD *)a1 + Number);\n  *a3 = *((_DWORD *)a1 + Number);\n  v3 = (Window *)*((_QWORD *)a1 + Number);\n  if (v3) {\n    if (!*((_QWORD *)a1 + Number) &&\n        (*((_BYTE *)a1 + Number) & Number) == Number) {\n      <span class=\"supfact\">v6</span> = Number;\n      LODWORD(v3) =\n          XQueryTree(fl_display, *v3, &<span class=\"supfact\">v7</span>, &<span class=\"supfact\">v8</span>,\n                     &<span class=\"supfact\">v9</span>, &<span class=\"supfact\">v6</span>);\n      if ((_DWORD)v3) {\n        if (<span class=\"supfact\">v6</span>)\n          LODWORD(v3) = XFree(<span class=\"supfact\">v9</span>);\n        if (<span class=\"supfact\">v7</span> != <span class=\"supfact\">v8</span>) {\n          XGetWindowAttributes(fl_display, <span class=\"supfact\">v8</span>,\n                               &<span class=\"supfact\">v10</span>);\n          *a2 = <span class=\"supfact\">v10</span>.width;\n          LODWORD(v3) = <span class=\"supfact\">v10</span>.height;\n          *a3 = <span class=\"supfact\">v10</span>.height;\n        }\n      }\n    }\n  }\n  return (int)v3;\n}", "code_t": "int __fastcall decorated_win_size(Fl_Window *a1, int *a2, int *a3) {\n  Window *v3;\n  unsigned int <span class=\"supfact\">v6</span>;\n  Window <span class=\"supfact\">v7</span>;\n  Window <span class=\"supfact\">v8</span>;\n  Window *<span class=\"supfact\">v9</span>;\n  XWindowAttributes <span class=\"supfact\">v10</span>;\n  *a2 = *((_DWORD *)a1 + Number);\n  *a3 = *((_DWORD *)a1 + Number);\n  v3 = (Window *)*((_QWORD *)a1 + Number);\n  if (v3) {\n    if (!*((_QWORD *)a1 + Number) &&\n        (*((_BYTE *)a1 + Number) & Number) == Number) {\n      <span class=\"supfact\">v6</span> = Number;\n      LODWORD(v3) =\n          XQueryTree(fl_display, *v3, &<span class=\"supfact\">v7</span>, &<span class=\"supfact\">v8</span>,\n                     &<span class=\"supfact\">v9</span>, &<span class=\"supfact\">v6</span>);\n      if ((_DWORD)v3) {\n        if (<span class=\"supfact\">v6</span>)\n          LODWORD(v3) = XFree(<span class=\"supfact\">v9</span>);\n        if (<span class=\"supfact\">v7</span> != <span class=\"supfact\">v8</span>) {\n          XGetWindowAttributes(fl_display, <span class=\"supfact\">v8</span>,\n                               &<span class=\"supfact\">v10</span>);\n          *a2 = <span class=\"supfact\">v10</span>.width;\n          LODWORD(v3) = <span class=\"supfact\">v10</span>.height;\n          *a3 = <span class=\"supfact\">v10</span>.height;\n        }\n      }\n    }\n  }\n  return (int)v3;\n}", "var": [{"name": "v10", "type": "struct XWindowAttributes { int x; int y; int width; int height; int border_width; int depth; Visual * visual; Window root; int c_class; int bit_gravity; int win_gravity; int backing_store; unsigned __int64 backing_planes; unsigned __int64 backing_pixel; int save_under; PADDING (4); Colormap colormap; int map_installed; int map_state; __int64 all_event_masks; __int64 your_event_mask; __int64 do_not_propagate_mask; int override_redirect; PADDING (4); Screen * screen; }", "ref_name": "v10", "ref_type": "struct XWindowAttributes { int x; int y; int width; int height; int border_width; int depth; Visual * visual; Window root; int c_class; int bit_gravity; int win_gravity; int backing_store; unsigned __int64 backing_planes; unsigned __int64 backing_pixel; int save_under; PADDING (4); Colormap colormap; int map_installed; int map_state; __int64 all_event_masks; __int64 your_event_mask; __int64 do_not_propagate_mask; int override_redirect; PADDING (4); Screen * screen; }"}], "body_in_train": true}, {"repo_owner": "Maxul", "repo_name": "sgx_vmx_protocol", "path": "Maxul/sgx_vmx_protocol/a96df6cdeee09fe88076f7d6baef2e61b97161c65b693921b604d83b4da16744", "path_in_repo": "Maxul/sgx_vmx_protocol/Sandbox/qemu-sgx-master/migration/socket.o", "objdump": "00000000000000bd <trace_migration_socket_outgoing_connected>:\n  bd:\t55                   \tpush   %rbp\n  be:\t48 89 e5             \tmov    %rsp,%rbp\n  c1:\t41 54                \tpush   %r12\n  c3:\t53                   \tpush   %rbx\n  c4:\t48 83 ec 30          \tsub    $0x30,%rsp\n  c8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  cc:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  d3:\t00 00 \n  d5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  d9:\t31 c0                \txor    %eax,%eax\n  db:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # e1 <trace_migration_socket_outgoing_connected+0x24>\n  e1:\t85 c0                \ttest   %eax,%eax\n  e3:\t0f 95 c0             \tsetne  %al\n  e6:\t0f b6 c0             \tmovzbl %al,%eax\n  e9:\t48 85 c0             \ttest   %rax,%rax\n  ec:\t74 62                \tje     150 <trace_migration_socket_outgoing_connected+0x93>\n  ee:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # f5 <trace_migration_socket_outgoing_connected+0x38>\n  f5:\t66 85 c0             \ttest   %ax,%ax\n  f8:\t74 56                \tje     150 <trace_migration_socket_outgoing_connected+0x93>\n  fa:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  fe:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 103:\t48 89 c7             \tmov    %rax,%rdi\n 106:\te8 00 00 00 00       \tcallq  10b <trace_migration_socket_outgoing_connected+0x4e>\n 10b:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n 110:\te8 eb fe ff ff       \tcallq  0 <qemu_loglevel_mask>\n 115:\t0f b6 c0             \tmovzbl %al,%eax\n 118:\t48 85 c0             \ttest   %rax,%rax\n 11b:\t74 33                \tje     150 <trace_migration_socket_outgoing_connected+0x93>\n 11d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 121:\t49 89 c4             \tmov    %rax,%r12\n 124:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 128:\t48 89 c3             \tmov    %rax,%rbx\n 12b:\te8 00 00 00 00       \tcallq  130 <trace_migration_socket_outgoing_connected+0x73>\n 130:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 134:\t49 89 d0             \tmov    %rdx,%r8\n 137:\t4c 89 e1             \tmov    %r12,%rcx\n 13a:\t48 89 da             \tmov    %rbx,%rdx\n 13d:\t89 c6                \tmov    %eax,%esi\n 13f:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 146 <trace_migration_socket_outgoing_connected+0x89>\n 146:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 14b:\te8 00 00 00 00       \tcallq  150 <trace_migration_socket_outgoing_connected+0x93>\n 150:\t90                   \tnop\n 151:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 155:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 15c:\t00 00 \n 15e:\t74 05                \tje     165 <trace_migration_socket_outgoing_connected+0xa8>\n 160:\te8 00 00 00 00       \tcallq  165 <trace_migration_socket_outgoing_connected+0xa8>\n 165:\t48 83 c4 30          \tadd    $0x30,%rsp\n 169:\t5b                   \tpop    %rbx\n 16a:\t41 5c                \tpop    %r12\n 16c:\t5d                   \tpop    %rbp\n 16d:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_migration_socket_outgoing_connected(\n    const char *a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v1 = <span class=\"supfact\">tv</span>.tv_usec;\n        v2 = <span class=\"supfact\">tv</span>.tv_sec;\n        v3 = getpid();\n        qemu_log(String, v3, v2, v1, a1);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl trace_migration_socket_outgoing_connected(const char *hostname) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v1 = <span class=\"supfact\">_now</span>.tv_usec;\n      v2 = <span class=\"supfact\">_now</span>.tv_sec;\n      v3 = getpid();\n      qemu_log(String, v3, v2, v1, hostname);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/142fa26381d3e9037cb76726690b7a6dd5d4e684dd3fe35f4cc25077ea0c4e96", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Foundation/testsuite/obj/Linux/x86_64/debug_shared/LineEndingConverterTest.o", "objdump": "0000000000000f56 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv>:\n     f56:\t55                   \tpush   %rbp\n     f57:\t48 89 e5             \tmov    %rsp,%rbp\n     f5a:\t53                   \tpush   %rbx\n     f5b:\t48 81 ec b8 03 00 00 \tsub    $0x3b8,%rsp\n     f62:\t48 89 bd 48 fc ff ff \tmov    %rdi,-0x3b8(%rbp)\n     f69:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     f70:\t48 89 c7             \tmov    %rax,%rdi\n     f73:\te8 00 00 00 00       \tcallq  f78 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x22>\n     f78:\t48 8d 8d 10 fe ff ff \tlea    -0x1f0(%rbp),%rcx\n     f7f:\t48 8d 85 70 fc ff ff \tlea    -0x390(%rbp),%rax\n     f86:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # f8d <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x37>\n     f8d:\t48 89 ce             \tmov    %rcx,%rsi\n     f90:\t48 89 c7             \tmov    %rax,%rdi\n     f93:\te8 00 00 00 00       \tcallq  f98 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x42>\n     f98:\t48 8d 85 70 fc ff ff \tlea    -0x390(%rbp),%rax\n     f9f:\t48 05 90 00 00 00    \tadd    $0x90,%rax\n     fa5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # fac <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x56>\n     fac:\t48 89 c7             \tmov    %rax,%rdi\n     faf:\te8 00 00 00 00       \tcallq  fb4 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x5e>\n     fb4:\t48 89 c2             \tmov    %rax,%rdx\n     fb7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # fbe <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x68>\n     fbe:\t48 89 c6             \tmov    %rax,%rsi\n     fc1:\t48 89 d7             \tmov    %rdx,%rdi\n     fc4:\te8 00 00 00 00       \tcallq  fc9 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x73>\n     fc9:\t48 8d 85 50 fc ff ff \tlea    -0x3b0(%rbp),%rax\n     fd0:\t48 8d 95 10 fe ff ff \tlea    -0x1f0(%rbp),%rdx\n     fd7:\t48 89 d6             \tmov    %rdx,%rsi\n     fda:\t48 89 c7             \tmov    %rax,%rdi\n     fdd:\te8 00 00 00 00       \tcallq  fe2 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x8c>\n     fe2:\t48 8b 9d 48 fc ff ff \tmov    -0x3b8(%rbp),%rbx\n     fe9:\t48 8d 45 bf          \tlea    -0x41(%rbp),%rax\n     fed:\t48 89 c7             \tmov    %rax,%rdi\n     ff0:\te8 00 00 00 00       \tcallq  ff5 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x9f>\n     ff5:\t48 8d 55 bf          \tlea    -0x41(%rbp),%rdx\n     ff9:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n     ffd:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1004 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0xae>\n    1004:\t48 89 c7             \tmov    %rax,%rdi\n    1007:\te8 00 00 00 00       \tcallq  100c <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0xb6>\n    100c:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n    1010:\t48 89 c7             \tmov    %rax,%rdi\n    1013:\te8 00 00 00 00       \tcallq  1018 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0xc2>\n    1018:\t48 8d 55 ef          \tlea    -0x11(%rbp),%rdx\n    101c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1020:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1027 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0xd1>\n    1027:\t48 89 c7             \tmov    %rax,%rdi\n    102a:\te8 00 00 00 00       \tcallq  102f <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0xd9>\n    102f:\t48 8d 85 50 fc ff ff \tlea    -0x3b0(%rbp),%rax\n    1036:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 103d <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0xe7>\n    103d:\t48 89 c7             \tmov    %rax,%rdi\n    1040:\te8 00 00 00 00       \tcallq  1045 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0xef>\n    1045:\t0f b6 c0             \tmovzbl %al,%eax\n    1048:\t48 8d 4d 90          \tlea    -0x70(%rbp),%rcx\n    104c:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    1050:\t49 89 c8             \tmov    %rcx,%r8\n    1053:\tb9 7f 00 00 00       \tmov    $0x7f,%ecx\n    1058:\t89 c6                \tmov    %eax,%esi\n    105a:\t48 89 df             \tmov    %rbx,%rdi\n    105d:\te8 00 00 00 00       \tcallq  1062 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x10c>\n    1062:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1066:\t48 89 c7             \tmov    %rax,%rdi\n    1069:\te8 00 00 00 00       \tcallq  106e <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x118>\n    106e:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n    1072:\t48 89 c7             \tmov    %rax,%rdi\n    1075:\te8 00 00 00 00       \tcallq  107a <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x124>\n    107a:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    107e:\t48 89 c7             \tmov    %rax,%rdi\n    1081:\te8 00 00 00 00       \tcallq  1086 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x130>\n    1086:\t48 8d 45 bf          \tlea    -0x41(%rbp),%rax\n    108a:\t48 89 c7             \tmov    %rax,%rdi\n    108d:\te8 00 00 00 00       \tcallq  1092 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x13c>\n    1092:\t48 8d 85 50 fc ff ff \tlea    -0x3b0(%rbp),%rax\n    1099:\t48 89 c7             \tmov    %rax,%rdi\n    109c:\te8 00 00 00 00       \tcallq  10a1 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x14b>\n    10a1:\t48 8d 85 70 fc ff ff \tlea    -0x390(%rbp),%rax\n    10a8:\t48 89 c7             \tmov    %rax,%rdi\n    10ab:\te8 00 00 00 00       \tcallq  10b0 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x15a>\n    10b0:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n    10b7:\t48 89 c7             \tmov    %rax,%rdi\n    10ba:\te8 00 00 00 00       \tcallq  10bf <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x169>\n    10bf:\teb 7f                \tjmp    1140 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x1ea>\n    10c1:\t48 89 c3             \tmov    %rax,%rbx\n    10c4:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    10c8:\t48 89 c7             \tmov    %rax,%rdi\n    10cb:\te8 00 00 00 00       \tcallq  10d0 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x17a>\n    10d0:\teb 03                \tjmp    10d5 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x17f>\n    10d2:\t48 89 c3             \tmov    %rax,%rbx\n    10d5:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n    10d9:\t48 89 c7             \tmov    %rax,%rdi\n    10dc:\te8 00 00 00 00       \tcallq  10e1 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x18b>\n    10e1:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    10e5:\t48 89 c7             \tmov    %rax,%rdi\n    10e8:\te8 00 00 00 00       \tcallq  10ed <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x197>\n    10ed:\teb 03                \tjmp    10f2 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x19c>\n    10ef:\t48 89 c3             \tmov    %rax,%rbx\n    10f2:\t48 8d 45 bf          \tlea    -0x41(%rbp),%rax\n    10f6:\t48 89 c7             \tmov    %rax,%rdi\n    10f9:\te8 00 00 00 00       \tcallq  10fe <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x1a8>\n    10fe:\t48 8d 85 50 fc ff ff \tlea    -0x3b0(%rbp),%rax\n    1105:\t48 89 c7             \tmov    %rax,%rdi\n    1108:\te8 00 00 00 00       \tcallq  110d <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x1b7>\n    110d:\teb 03                \tjmp    1112 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x1bc>\n    110f:\t48 89 c3             \tmov    %rax,%rbx\n    1112:\t48 8d 85 70 fc ff ff \tlea    -0x390(%rbp),%rax\n    1119:\t48 89 c7             \tmov    %rax,%rdi\n    111c:\te8 00 00 00 00       \tcallq  1121 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x1cb>\n    1121:\teb 03                \tjmp    1126 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x1d0>\n    1123:\t48 89 c3             \tmov    %rax,%rbx\n    1126:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n    112d:\t48 89 c7             \tmov    %rax,%rdi\n    1130:\te8 00 00 00 00       \tcallq  1135 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x1df>\n    1135:\t48 89 d8             \tmov    %rbx,%rax\n    1138:\t48 89 c7             \tmov    %rax,%rdi\n    113b:\te8 00 00 00 00       \tcallq  1140 <_ZN23LineEndingConverterTest19testOutputMacToUnixEv+0x1ea>\n    1140:\t48 81 c4 b8 03 00 00 \tadd    $0x3b8,%rsp\n    1147:\t5b                   \tpop    %rbx\n    1148:\t5d                   \tpop    %rbp\n    1149:\tc3                   \tretq   ", "code_s": "__int64 __fastcall LineEndingConverterTest\ntestOutputMacToUnix(LineEndingConverterTest *this) {\n  __int64 v1;\n  unsigned __int8 v2;\n  char <span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  char <span class=\"supfact\">v7</span>[Number];\n  char <span class=\"supfact\">v8</span>[Number];\n  char <span class=\"supfact\">v9</span>;\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>[Number];\n  std __cxx11\n      basic_ostringstream<char, std char_traits<char>, std allocator<char>>\n          basic_ostringstream(<span class=\"supfact\">v7</span>);\n  Poco OutputLineEndingConverter OutputLineEndingConverter(\n      <span class=\"supfact\">v5</span>, <span class=\"supfact\">v7</span>,\n      &Poco LineEnding NEWLINE_LF [abi:cxx11]);\n  v1 = std operator<<<std char_traits<char>>(&<span class=\"supfact\">v6</span>, String);\n  std ostream operator<<(v1, &std flush<char, std char_traits<char>>);\n  std __cxx11\n      basic_ostringstream<char, std char_traits<char>, std allocator<char>>\n          str(<span class=\"supfact\">v4</span>, <span class=\"supfact\">v7</span>);\n  std allocator<char> allocator(&<span class=\"supfact\">v9</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v8</span>, String, &<span class=\"supfact\">v9</span>);\n  std allocator<char> allocator(<span class=\"supfact\">v11</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v10</span>, String, <span class=\"supfact\">v11</span>);\n  v2 = std operator==<char>(<span class=\"supfact\">v4</span>, String);\n  CppUnit TestCase assertImplementation(this, v2, <span class=\"supfact\">v10</span>, Number L,\n                                        <span class=\"supfact\">v8</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v10</span>);\n  std allocator<char> ~allocator(<span class=\"supfact\">v11</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v8</span>);\n  std allocator<char> ~allocator(&<span class=\"supfact\">v9</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v4</span>);\n  Poco OutputLineEndingConverter ~OutputLineEndingConverter(\n      (Poco OutputLineEndingConverter *)<span class=\"supfact\">v5</span>);\n  return std __cxx11 basic_ostringstream<\n      char, std char_traits<char>,\n      std allocator<char>> ~basic_ostringstream(<span class=\"supfact\">v7</span>);\n}", "code_t": "void __cdecl LineEndingConverterTest\ntestOutputMacToUnix(LineEndingConverterTest *const this) {\n  __int64 v1;\n  bool v2;\n  std string <span class=\"supfact\">result</span>;\n  char <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>;\n  char <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  char <span class=\"supfact\">v8</span>;\n  char <span class=\"supfact\">v9</span>[Number];\n  char <span class=\"supfact\">v10</span>[Number];\n  std __cxx11\n      basic_ostringstream<char, std char_traits<char>, std allocator<char>>\n          basic_ostringstream(<span class=\"supfact\">v6</span>);\n  Poco OutputLineEndingConverter OutputLineEndingConverter(\n      <span class=\"supfact\">v4</span>, <span class=\"supfact\">v6</span>,\n      &Poco LineEnding NEWLINE_LF [abi:cxx11]);\n  v1 = std operator<<<std char_traits<char>>(&<span class=\"supfact\">v5</span>, String);\n  std ostream operator<<(v1, &std flush<char, std char_traits<char>>);\n  std __cxx11\n      basic_ostringstream<char, std char_traits<char>, std allocator<char>>\n          str(&<span class=\"supfact\">result</span>, <span class=\"supfact\">v6</span>);\n  std allocator<char> allocator(&<span class=\"supfact\">v8</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v7</span>, String, &<span class=\"supfact\">v8</span>);\n  std allocator<char> allocator(<span class=\"supfact\">v10</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v9</span>, String, <span class=\"supfact\">v10</span>);\n  v2 = std operator==<char>(&<span class=\"supfact\">result</span>, String);\n  CppUnit TestCase assertImplementation(this, v2, <span class=\"supfact\">v9</span>, Number L,\n                                        <span class=\"supfact\">v7</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v9</span>);\n  std allocator<char> ~allocator(<span class=\"supfact\">v10</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v7</span>);\n  std allocator<char> ~allocator(&<span class=\"supfact\">v8</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">result</span>);\n  Poco OutputLineEndingConverter ~OutputLineEndingConverter(\n      (Poco OutputLineEndingConverter *)<span class=\"supfact\">v4</span>);\n  std __cxx11 basic_ostringstream<\n      char, std char_traits<char>,\n      std allocator<char>> ~basic_ostringstream(<span class=\"supfact\">v6</span>);\n}", "var": [{"name": "v4", "type": "char[32]", "ref_name": "result", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "victordp86", "repo_name": "Frontend2-Europa", "path": "victordp86/Frontend2-Europa/52ec71b05b09596a30d9178f3e05e68fb67625c4a2d2a35bab00edea2d1f2d7f", "path_in_repo": "victordp86/Frontend2-Europa/node-v0.10.25/deps/openssl/openssl/test/dummytest", "objdump": "000000000040531d <CRYPTO_dbg_malloc>:\n  40531d:\t55                   \tpush   %rbp\n  40531e:\t48 89 e5             \tmov    %rsp,%rbp\n  405321:\t48 83 ec 70          \tsub    $0x70,%rsp\n  405325:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  405329:\t89 75 a4             \tmov    %esi,-0x5c(%rbp)\n  40532c:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  405330:\t89 4d a0             \tmov    %ecx,-0x60(%rbp)\n  405333:\t44 89 45 94          \tmov    %r8d,-0x6c(%rbp)\n  405337:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n  40533a:\t83 e0 7f             \tand    $0x7f,%eax\n  40533d:\t85 c0                \ttest   %eax,%eax\n  40533f:\t0f 84 46 02 00 00    \tje     40558b <CRYPTO_dbg_malloc+0x26e>\n  405345:\t83 f8 01             \tcmp    $0x1,%eax\n  405348:\t74 05                \tje     40534f <CRYPTO_dbg_malloc+0x32>\n  40534a:\te9 43 02 00 00       \tjmpq   405592 <CRYPTO_dbg_malloc+0x275>\n  40534f:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n  405354:\t0f 84 34 02 00 00    \tje     40558e <CRYPTO_dbg_malloc+0x271>\n  40535a:\te8 e4 fa ff ff       \tcallq  404e43 <CRYPTO_is_mem_check_on>\n  40535f:\t85 c0                \ttest   %eax,%eax\n  405361:\t0f 84 2a 02 00 00    \tje     405591 <CRYPTO_dbg_malloc+0x274>\n  405367:\tbf 03 00 00 00       \tmov    $0x3,%edi\n  40536c:\te8 08 f9 ff ff       \tcallq  404c79 <CRYPTO_mem_ctrl>\n  405371:\tba f2 01 00 00       \tmov    $0x1f2,%edx\n  405376:\tbe 78 88 41 00       \tmov    $0x418878,%esi\n  40537b:\tbf 48 00 00 00       \tmov    $0x48,%edi\n  405380:\te8 98 c7 ff ff       \tcallq  401b1d <CRYPTO_malloc>\n  405385:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  405389:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40538e:\t75 1b                \tjne    4053ab <CRYPTO_dbg_malloc+0x8e>\n  405390:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  405394:\t48 89 c7             \tmov    %rax,%rdi\n  405397:\te8 c5 ca ff ff       \tcallq  401e61 <CRYPTO_free>\n  40539c:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  4053a1:\te8 d3 f8 ff ff       \tcallq  404c79 <CRYPTO_mem_ctrl>\n  4053a6:\te9 e8 01 00 00       \tjmpq   405593 <CRYPTO_dbg_malloc+0x276>\n  4053ab:\t48 8b 05 8e df 02 00 \tmov    0x2df8e(%rip),%rax        # 433340 <mh>\n  4053b2:\t48 85 c0             \ttest   %rax,%rax\n  4053b5:\t75 47                \tjne    4053fe <CRYPTO_dbg_malloc+0xe1>\n  4053b7:\tbe 18 4f 40 00       \tmov    $0x404f18,%esi\n  4053bc:\tbf a0 4f 40 00       \tmov    $0x404fa0,%edi\n  4053c1:\te8 cc 48 00 00       \tcallq  409c92 <lh_new>\n  4053c6:\t48 89 05 73 df 02 00 \tmov    %rax,0x2df73(%rip)        # 433340 <mh>\n  4053cd:\t48 8b 05 6c df 02 00 \tmov    0x2df6c(%rip),%rax        # 433340 <mh>\n  4053d4:\t48 85 c0             \ttest   %rax,%rax\n  4053d7:\t75 25                \tjne    4053fe <CRYPTO_dbg_malloc+0xe1>\n  4053d9:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4053dd:\t48 89 c7             \tmov    %rax,%rdi\n  4053e0:\te8 7c ca ff ff       \tcallq  401e61 <CRYPTO_free>\n  4053e5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4053e9:\t48 89 c7             \tmov    %rax,%rdi\n  4053ec:\te8 70 ca ff ff       \tcallq  401e61 <CRYPTO_free>\n  4053f1:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n  4053f8:\t00 \n  4053f9:\te9 81 01 00 00       \tjmpq   40557f <CRYPTO_dbg_malloc+0x262>\n  4053fe:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405402:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  405406:\t48 89 10             \tmov    %rdx,(%rax)\n  405409:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40540d:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  405411:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  405415:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405419:\t8b 55 a0             \tmov    -0x60(%rbp),%edx\n  40541c:\t89 50 18             \tmov    %edx,0x18(%rax)\n  40541f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405423:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n  405426:\t89 50 08             \tmov    %edx,0x8(%rax)\n  405429:\t48 8b 05 20 df 02 00 \tmov    0x2df20(%rip),%rax        # 433350 <options>\n  405430:\t83 e0 02             \tand    $0x2,%eax\n  405433:\t48 85 c0             \ttest   %rax,%rax\n  405436:\t74 12                \tje     40544a <CRYPTO_dbg_malloc+0x12d>\n  405438:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40543c:\t48 83 c0 20          \tadd    $0x20,%rax\n  405440:\t48 89 c7             \tmov    %rax,%rdi\n  405443:\te8 9f f3 ff ff       \tcallq  4047e7 <CRYPTO_THREADID_current>\n  405448:\teb 1a                \tjmp    405464 <CRYPTO_dbg_malloc+0x147>\n  40544a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40544e:\t48 83 c0 20          \tadd    $0x20,%rax\n  405452:\tba 10 00 00 00       \tmov    $0x10,%edx\n  405457:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40545c:\t48 89 c7             \tmov    %rax,%rdi\n  40545f:\te8 bc bc ff ff       \tcallq  401120 <memset@plt>\n  405464:\t48 8b 15 cd de 02 00 \tmov    0x2decd(%rip),%rdx        # 433338 <order>\n  40546b:\t48 8b 05 fe de 02 00 \tmov    0x2defe(%rip),%rax        # 433370 <break_order_num>\n  405472:\t48 39 c2             \tcmp    %rax,%rdx\n  405475:\t75 0f                \tjne    405486 <CRYPTO_dbg_malloc+0x169>\n  405477:\t48 8b 15 ba de 02 00 \tmov    0x2deba(%rip),%rdx        # 433338 <order>\n  40547e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405482:\t48 89 50 30          \tmov    %rdx,0x30(%rax)\n  405486:\t48 8b 05 ab de 02 00 \tmov    0x2deab(%rip),%rax        # 433338 <order>\n  40548d:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  405491:\t48 89 15 a0 de 02 00 \tmov    %rdx,0x2dea0(%rip)        # 433338 <order>\n  405498:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  40549c:\t48 89 42 30          \tmov    %rax,0x30(%rdx)\n  4054a0:\t48 8b 05 a9 de 02 00 \tmov    0x2dea9(%rip),%rax        # 433350 <options>\n  4054a7:\t83 e0 01             \tand    $0x1,%eax\n  4054aa:\t48 85 c0             \ttest   %rax,%rax\n  4054ad:\t74 14                \tje     4054c3 <CRYPTO_dbg_malloc+0x1a6>\n  4054af:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4054b4:\te8 f7 bc ff ff       \tcallq  4011b0 <time@plt>\n  4054b9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  4054bd:\t48 89 42 38          \tmov    %rax,0x38(%rdx)\n  4054c1:\teb 0c                \tjmp    4054cf <CRYPTO_dbg_malloc+0x1b2>\n  4054c3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4054c7:\t48 c7 40 38 00 00 00 \tmovq   $0x0,0x38(%rax)\n  4054ce:\t00 \n  4054cf:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  4054d3:\t48 89 c7             \tmov    %rax,%rdi\n  4054d6:\te8 0c f3 ff ff       \tcallq  4047e7 <CRYPTO_THREADID_current>\n  4054db:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4054df:\t48 c7 40 40 00 00 00 \tmovq   $0x0,0x40(%rax)\n  4054e6:\t00 \n  4054e7:\t48 8b 05 5a de 02 00 \tmov    0x2de5a(%rip),%rax        # 433348 <amih>\n  4054ee:\t48 85 c0             \ttest   %rax,%rax\n  4054f1:\t74 3e                \tje     405531 <CRYPTO_dbg_malloc+0x214>\n  4054f3:\t48 8b 05 4e de 02 00 \tmov    0x2de4e(%rip),%rax        # 433348 <amih>\n  4054fa:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  4054fe:\t48 89 d6             \tmov    %rdx,%rsi\n  405501:\t48 89 c7             \tmov    %rax,%rdi\n  405504:\te8 6d 4c 00 00       \tcallq  40a176 <lh_retrieve>\n  405509:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40550d:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  405512:\t74 1d                \tje     405531 <CRYPTO_dbg_malloc+0x214>\n  405514:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405518:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  40551c:\t48 89 50 40          \tmov    %rdx,0x40(%rax)\n  405520:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  405524:\t8b 40 30             \tmov    0x30(%rax),%eax\n  405527:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40552a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40552e:\t89 50 30             \tmov    %edx,0x30(%rax)\n  405531:\t48 8b 05 08 de 02 00 \tmov    0x2de08(%rip),%rax        # 433340 <mh>\n  405538:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  40553c:\t48 89 d6             \tmov    %rdx,%rsi\n  40553f:\t48 89 c7             \tmov    %rax,%rdi\n  405542:\te8 be 49 00 00       \tcallq  409f05 <lh_insert>\n  405547:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40554b:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  405550:\t74 2c                \tje     40557e <CRYPTO_dbg_malloc+0x261>\n  405552:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405556:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  40555a:\t48 85 c0             \ttest   %rax,%rax\n  40555d:\t74 11                \tje     405570 <CRYPTO_dbg_malloc+0x253>\n  40555f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405563:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  405567:\t8b 50 30             \tmov    0x30(%rax),%edx\n  40556a:\t83 ea 01             \tsub    $0x1,%edx\n  40556d:\t89 50 30             \tmov    %edx,0x30(%rax)\n  405570:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405574:\t48 89 c7             \tmov    %rax,%rdi\n  405577:\te8 e5 c8 ff ff       \tcallq  401e61 <CRYPTO_free>\n  40557c:\teb 01                \tjmp    40557f <CRYPTO_dbg_malloc+0x262>\n  40557e:\t90                   \tnop\n  40557f:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  405584:\te8 f0 f6 ff ff       \tcallq  404c79 <CRYPTO_mem_ctrl>\n  405589:\teb 06                \tjmp    405591 <CRYPTO_dbg_malloc+0x274>\n  40558b:\t90                   \tnop\n  40558c:\teb 04                \tjmp    405592 <CRYPTO_dbg_malloc+0x275>\n  40558e:\t90                   \tnop\n  40558f:\teb 01                \tjmp    405592 <CRYPTO_dbg_malloc+0x275>\n  405591:\t90                   \tnop\n  405592:\t90                   \tnop\n  405593:\tc9                   \tleaveq \n  405594:\tc3                   \tretq   ", "code_s": "__int64 __fastcall CRYPTO_dbg_malloc(__int64 a1, int a2, __int64 a3, int a4,\n                                     char a5) {\n  __int64 result;\n  __int64 v6;\n  _QWORD <span class=\"supfact\">v9</span>[Number];\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  _BYTE *<span class=\"supfact\">v12</span>;\n  result = a5 & Number;\n  if ((a5 & Number) != Number && (_DWORD)result == Number) {\n    if (a1) {\n      result = CRYPTO_is_mem_check_on();\n      if ((_DWORD)result) {\n        CRYPTO_mem_ctrl(Number);\n        <span class=\"supfact\">v12</span> = CRYPTO_malloc(Number, (__int64)String, Number);\n        if (<span class=\"supfact\">v12</span>) {\n          if (mh || (mh = lh_new(mem_LHASH_HASH, mem_LHASH_COMP)) != Number) {\n            *(_QWORD *)<span class=\"supfact\">v12</span> = a1;\n            *((_QWORD *)<span class=\"supfact\">v12</span> + Number) = a3;\n            *((_DWORD *)<span class=\"supfact\">v12</span> + Number) = a4;\n            *((_DWORD *)<span class=\"supfact\">v12</span> + Number) = a2;\n            if ((options & Number) != Number)\n              CRYPTO_THREADID_current((_QWORD *)<span class=\"supfact\">v12</span> + Number);\n            else\n              memset(<span class=\"supfact\">v12</span> + Number, Number, Number);\n            if (order == break_order_num)\n              *((_QWORD *)<span class=\"supfact\">v12</span> + Number) = order;\n            v6 = order++;\n            *((_QWORD *)<span class=\"supfact\">v12</span> + Number) = v6;\n            if ((options & Number) != Number)\n              *((_QWORD *)<span class=\"supfact\">v12</span> + Number) = time(Number L);\n            else\n              *((_QWORD *)<span class=\"supfact\">v12</span> + Number) = Number L;\n            CRYPTO_THREADID_current(<span class=\"supfact\">v9</span>);\n            *((_QWORD *)<span class=\"supfact\">v12</span> + Number) = Number L;\n            if (amih) {\n              <span class=\"supfact\">v11</span> = lh_retrieve(amih, <span class=\"supfact\">v9</span>);\n              if (<span class=\"supfact\">v11</span>) {\n                *((_QWORD *)<span class=\"supfact\">v12</span> + Number) = <span class=\"supfact\">v11</span>;\n                ++*(_DWORD *)(<span class=\"supfact\">v11</span> + Number);\n              }\n            }\n            <span class=\"supfact\">v10</span> = lh_insert(mh, <span class=\"supfact\">v12</span>);\n            if (<span class=\"supfact\">v10</span>) {\n              if (*(_QWORD *)(<span class=\"supfact\">v10</span> + Number))\n                --*(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v10</span> + Number) +\n                              Number L);\n              CRYPTO_free(<span class=\"supfact\">v10</span>);\n            }\n          } else {\n            CRYPTO_free(a1);\n            CRYPTO_free((__int64)<span class=\"supfact\">v12</span>);\n          }\n          result = CRYPTO_mem_ctrl(Number);\n        } else {\n          CRYPTO_free(a1);\n          result = CRYPTO_mem_ctrl(Number);\n        }\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl CRYPTO_dbg_malloc(void *addr, int num, const char *file, int line,\n                               int before_p) {\n  unsigned __int64 v5;\n  APP_INFO <span class=\"supfact\">tmp</span>;\n  MEM *<span class=\"supfact\">mm</span>;\n  APP_INFO *<span class=\"supfact\">amim</span>;\n  MEM *<span class=\"supfact\">m</span>;\n  if ((before_p & Number) != Number && (before_p & Number) == Number && addr &&\n      CRYPTO_is_mem_check_on()) {\n    CRYPTO_mem_ctrl(Number);\n    <span class=\"supfact\">m</span> = (MEM *)CRYPTO_malloc(Number, String, Number);\n    if (<span class=\"supfact\">m</span>) {\n      if (mh || (mh = (lhash_st_MEM *)lh_new(\n                     (LHASH_HASH_FN_TYPE)mem_LHASH_HASH,\n                     (LHASH_COMP_FN_TYPE)mem_LHASH_COMP)) != Number L) {\n        <span class=\"supfact\">m</span>->addr = addr;\n        <span class=\"supfact\">m</span>->file = file;\n        <span class=\"supfact\">m</span>->line = line;\n        <span class=\"supfact\">m</span>->num = num;\n        if ((options & Number) != Number)\n          CRYPTO_THREADID_current(&<span class=\"supfact\">m</span>->threadid);\n        else\n          memset(&<span class=\"supfact\">m</span>->threadid, Number,\n                 sizeof(<span class=\"supfact\">m</span>->threadid));\n        if (order == break_order_num)\n          <span class=\"supfact\">m</span>->order = order;\n        v5 = order++;\n        <span class=\"supfact\">m</span>->order = v5;\n        if ((options & Number) != Number)\n          <span class=\"supfact\">m</span>->time = time(Number L);\n        else\n          <span class=\"supfact\">m</span>->time = Number L;\n        CRYPTO_THREADID_current(&<span class=\"supfact\">tmp</span>.threadid);\n        <span class=\"supfact\">m</span>->app_info = Number L;\n        if (amih) {\n          <span class=\"supfact\">amim</span> =\n              (APP_INFO *)lh_retrieve((_LHASH *)amih, &<span class=\"supfact\">tmp</span>);\n          if (<span class=\"supfact\">amim</span>) {\n            <span class=\"supfact\">m</span>->app_info = <span class=\"supfact\">amim</span>;\n            ++<span class=\"supfact\">amim</span>->references;\n          }\n        }\n        <span class=\"supfact\">mm</span> = (MEM *)lh_insert((_LHASH *)mh, <span class=\"supfact\">m</span>);\n        if (<span class=\"supfact\">mm</span>) {\n          if (<span class=\"supfact\">mm</span>->app_info)\n            --<span class=\"supfact\">mm</span>->app_info->references;\n          CRYPTO_free(<span class=\"supfact\">mm</span>);\n        }\n      } else {\n        CRYPTO_free(addr);\n        CRYPTO_free(<span class=\"supfact\">m</span>);\n      }\n      CRYPTO_mem_ctrl(Number);\n    } else {\n      CRYPTO_free(addr);\n      CRYPTO_mem_ctrl(Number);\n    }\n  }\n}", "var": [{"name": "v9", "type": "struct APP_INFO { unsigned __int64 thread; const char * file; int line; PADDING (4); const char * info; app_mem_info_st * next; int references; PADDING (4); }", "ref_name": "tmp", "ref_type": "struct APP_INFO { CRYPTO_THREADID threadid; const char * file; int line; PADDING (4); const char * info; app_mem_info_st * next; int references; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "uyjulian", "repo_name": "krkr2_extra_plugin", "path": "uyjulian/krkr2_extra_plugin/b72fb10fd3a0d45fe3cfde00840b81d46714687d7187ec74c80d18c6f797ed66", "path_in_repo": "uyjulian/krkr2_extra_plugin/drawdeviceIrrlicht/irrlicht/source/Irrlicht/CGUIMenu.o", "objdump": "0000000000000000 <_ZNK3irr4core4rectIiEplERKNS0_10position2dIiEE>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  14:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  18:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  1c:\t48 89 d6             \tmov    %rdx,%rsi\n  1f:\t48 89 c7             \tmov    %rax,%rdi\n  22:\te8 00 00 00 00       \tcallq  27 <_ZNK3irr4core4rectIiEplERKNS0_10position2dIiEE+0x27>\n  27:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  2b:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  2f:\t48 89 d6             \tmov    %rdx,%rsi\n  32:\t48 89 c7             \tmov    %rax,%rdi\n  35:\te8 00 00 00 00       \tcallq  3a <_ZNK3irr4core4rectIiEplERKNS0_10position2dIiEE+0x3a>\n  3a:\t48 89 c2             \tmov    %rax,%rdx\n  3d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41:\t48 89 d6             \tmov    %rdx,%rsi\n  44:\t48 89 c7             \tmov    %rax,%rdi\n  47:\te8 00 00 00 00       \tcallq  4c <_ZNK3irr4core4rectIiEplERKNS0_10position2dIiEE+0x4c>\n  4c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  50:\tc9                   \tleaveq \n  51:\tc3                   \tretq   ", "code_s": "__int64 __fastcall irr core rect<int> operator+(__int64 a1, __int64 a2,\n                                                __int64 a3) {\n  __int64 v3;\n  char <span class=\"supfact\">v6</span>[Number];\n  irr core rect<int> rect((__int64)<span class=\"supfact\">v6</span>, a2);\n  v3 = irr core rect<int> operator+=((__int64)<span class=\"supfact\">v6</span>, a3);\n  irr core rect<int> rect(a1, v3);\n  return a1;\n}", "code_t": "irr core rect<int> __cdecl irr core rect<int>\noperator+(const irr core rect<int> *const this,\n          const irr core position2d<int> *pos) {\n  const irr core position2d<int> *v2;\n  irr core rect<int> *v3;\n  irr core rect<int> v4;\n  const irr core position2d<int> *posa;\n  irr core rect<int> <span class=\"supfact\">ret</span>;\n  posa = v2;\n  irr core rect<int> rect(&<span class=\"supfact\">ret</span>,\n                          (const irr core rect<int> *)pos);\n  v3 = irr core rect<int> operator+=(&<span class=\"supfact\">ret</span>, posa);\n  irr core rect<int> rect((irr core rect<int> *const)this, v3);\n  v4.UpperLeftCorner = (irr core position2d<int>)this;\n  return v4;\n}", "var": [{"name": "v6", "type": "struct irr::core::rect<int> { irr::core::position2d<int> UpperLeftCorner; irr::core::position2d<int> LowerRightCorner; }", "ref_name": "ret", "ref_type": "struct irr::core::rect<int> { irr::core::position2d<int> UpperLeftCorner; irr::core::position2d<int> LowerRightCorner; }"}], "body_in_train": true}, {"repo_owner": "pathscale", "repo_name": "absoft", "path": "pathscale/absoft/531a10eb4d5aa1a648ef1c7a616da9dd6cb32060571b10304ed757a05d3ef111", "path_in_repo": "pathscale/absoft/svn/trunk/kpro64/targx8664_builtonia32/libu/sysfcntl.pg.o", "objdump": "0000000000000302 <_make_scratch>:\n 302:\t55                   \tpush   %rbp\n 303:\t48 89 e5             \tmov    %rsp,%rbp\n 306:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n 30d:\te8 00 00 00 00       \tcallq  312 <_make_scratch+0x10>\n 312:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n 319:\t89 b5 44 ff ff ff    \tmov    %esi,-0xbc(%rbp)\n 31f:\t48 89 95 38 ff ff ff \tmov    %rdx,-0xc8(%rbp)\n 326:\t48 89 8d 30 ff ff ff \tmov    %rcx,-0xd0(%rbp)\n 32d:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 334:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n 33a:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n 341:\t48 83 bd 48 ff ff ff \tcmpq   $0x0,-0xb8(%rbp)\n 348:\t00 \n 349:\t75 49                \tjne    394 <_make_scratch+0x92>\n 34b:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 352:\t0f b6 10             \tmovzbl (%rax),%edx\n 355:\t83 ca 01             \tor     $0x1,%edx\n 358:\t88 10                \tmov    %dl,(%rax)\n 35a:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 361:\t8b 10                \tmov    (%rax),%edx\n 363:\t83 e2 01             \tand    $0x1,%edx\n 366:\t81 ca 7e 27 00 00    \tor     $0x277e,%edx\n 36c:\t89 10                \tmov    %edx,(%rax)\n 36e:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 375:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n 37c:\t00 \n 37d:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 384:\t66 c7 40 10 06 00    \tmovw   $0x6,0x10(%rax)\n 38a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 38f:\te9 d9 01 00 00       \tjmpq   56d <_make_scratch+0x26b>\n 394:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n 39b:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n 3a2:\t48 89 d6             \tmov    %rdx,%rsi\n 3a5:\t48 89 c7             \tmov    %rax,%rdi\n 3a8:\te8 00 00 00 00       \tcallq  3ad <_make_scratch+0xab>\n 3ad:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 3b0:\t83 7d f8 ff          \tcmpl   $0xffffffff,-0x8(%rbp)\n 3b4:\t75 0a                \tjne    3c0 <_make_scratch+0xbe>\n 3b6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3bb:\te9 ad 01 00 00       \tjmpq   56d <_make_scratch+0x26b>\n 3c0:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n 3c6:\t25 00 f0 00 00       \tand    $0xf000,%eax\n 3cb:\t3d 00 a0 00 00       \tcmp    $0xa000,%eax\n 3d0:\t75 33                \tjne    405 <_make_scratch+0x103>\n 3d2:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 3d9:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n 3e0:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n 3e7:\t48 89 d6             \tmov    %rdx,%rsi\n 3ea:\t48 89 c7             \tmov    %rax,%rdi\n 3ed:\te8 00 00 00 00       \tcallq  3f2 <_make_scratch+0xf0>\n 3f2:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 3f5:\t83 7d f8 ff          \tcmpl   $0xffffffff,-0x8(%rbp)\n 3f9:\t75 0a                \tjne    405 <_make_scratch+0x103>\n 3fb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 400:\te9 68 01 00 00       \tjmpq   56d <_make_scratch+0x26b>\n 405:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 40c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 410:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n 417:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 41b:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n 422:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n 428:\t48 89 d6             \tmov    %rdx,%rsi\n 42b:\t89 c7                \tmov    %eax,%edi\n 42d:\te8 00 00 00 00       \tcallq  432 <_make_scratch+0x130>\n 432:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 435:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n 439:\t74 56                \tje     491 <_make_scratch+0x18f>\n 43b:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 442:\t0f b6 10             \tmovzbl (%rax),%edx\n 445:\t83 ca 01             \tor     $0x1,%edx\n 448:\t88 10                \tmov    %dl,(%rax)\n 44a:\te8 00 00 00 00       \tcallq  44f <_make_scratch+0x14d>\n 44f:\t8b 00                \tmov    (%rax),%eax\n 451:\t25 ff ff ff 7f       \tand    $0x7fffffff,%eax\n 456:\t89 c2                \tmov    %eax,%edx\n 458:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 45f:\t8d 0c 12             \tlea    (%rdx,%rdx,1),%ecx\n 462:\t8b 10                \tmov    (%rax),%edx\n 464:\t83 e2 01             \tand    $0x1,%edx\n 467:\t09 ca                \tor     %ecx,%edx\n 469:\t89 10                \tmov    %edx,(%rax)\n 46b:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 472:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n 479:\t00 \n 47a:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 481:\t66 c7 40 10 06 00    \tmovw   $0x6,0x10(%rax)\n 487:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 48c:\te9 dc 00 00 00       \tjmpq   56d <_make_scratch+0x26b>\n 491:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 498:\t48 39 45 f0          \tcmp    %rax,-0x10(%rbp)\n 49c:\t75 0d                \tjne    4ab <_make_scratch+0x1a9>\n 49e:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n 4a5:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n 4a9:\t74 0a                \tje     4b5 <_make_scratch+0x1b3>\n 4ab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4b0:\te9 b8 00 00 00       \tjmpq   56d <_make_scratch+0x26b>\n 4b5:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n 4bc:\t48 83 f8 01          \tcmp    $0x1,%rax\n 4c0:\t74 07                \tje     4c9 <_make_scratch+0x1c7>\n 4c2:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 4c9:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n 4d0:\t48 89 c7             \tmov    %rax,%rdi\n 4d3:\te8 00 00 00 00       \tcallq  4d8 <_make_scratch+0x1d6>\n 4d8:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 4db:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n 4df:\t74 53                \tje     534 <_make_scratch+0x232>\n 4e1:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 4e8:\t0f b6 10             \tmovzbl (%rax),%edx\n 4eb:\t83 ca 01             \tor     $0x1,%edx\n 4ee:\t88 10                \tmov    %dl,(%rax)\n 4f0:\te8 00 00 00 00       \tcallq  4f5 <_make_scratch+0x1f3>\n 4f5:\t8b 00                \tmov    (%rax),%eax\n 4f7:\t25 ff ff ff 7f       \tand    $0x7fffffff,%eax\n 4fc:\t89 c2                \tmov    %eax,%edx\n 4fe:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 505:\t8d 0c 12             \tlea    (%rdx,%rdx,1),%ecx\n 508:\t8b 10                \tmov    (%rax),%edx\n 50a:\t83 e2 01             \tand    $0x1,%edx\n 50d:\t09 ca                \tor     %ecx,%edx\n 50f:\t89 10                \tmov    %edx,(%rax)\n 511:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 518:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n 51f:\t00 \n 520:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 527:\t66 c7 40 10 06 00    \tmovw   $0x6,0x10(%rax)\n 52d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 532:\teb 39                \tjmp    56d <_make_scratch+0x26b>\n 534:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 53b:\t8b 00                \tmov    (%rax),%eax\n 53d:\t83 c8 02             \tor     $0x2,%eax\n 540:\t89 c2                \tmov    %eax,%edx\n 542:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 549:\t89 10                \tmov    %edx,(%rax)\n 54b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 54f:\t74 17                \tje     568 <_make_scratch+0x266>\n 551:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 558:\t8b 00                \tmov    (%rax),%eax\n 55a:\t83 c8 01             \tor     $0x1,%eax\n 55d:\t89 c2                \tmov    %eax,%edx\n 55f:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 566:\t89 10                \tmov    %edx,(%rax)\n 568:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 56d:\tc9                   \tleaveq \n 56e:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall make_scratch(const char *a1, int a2, _DWORD *a3,\n                                __int64 a4) {\n  struct stat <span class=\"supfact\">v7</span>;\n  __dev_t <span class=\"supfact\">v8</span>;\n  __ino_t <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  *a3 = Number;\n  <span class=\"supfact\">v11</span> = Number;\n  if (!a1) {\n    *(_BYTE *)a4 |= Number;\n    *(_DWORD *)a4 = *(_DWORD *)a4 & Number | Number;\n    *(_QWORD *)(a4 + Number) = Number L;\n    *(_WORD *)(a4 + Number) = Number;\n    return Number;\n  }\n  <span class=\"supfact\">v10</span> = lstat(a1, &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v10</span> == Number)\n    return Number L;\n  if ((<span class=\"supfact\">v7</span>.st_mode & Number) == Number) {\n    <span class=\"supfact\">v11</span> = Number;\n    <span class=\"supfact\">v10</span> = stat(a1, &<span class=\"supfact\">v7</span>);\n    if (<span class=\"supfact\">v10</span> == Number)\n      return Number L;\n  }\n  <span class=\"supfact\">v9</span> = <span class=\"supfact\">v7</span>.st_ino;\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">v7</span>.st_dev;\n  <span class=\"supfact\">v10</span> = fstat(a2, &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v10</span>)\n    goto LABEL_9;\n  if (<span class=\"supfact\">v9</span> != <span class=\"supfact\">v7</span>.st_ino ||\n      <span class=\"supfact\">v8</span> != <span class=\"supfact\">v7</span>.st_dev)\n    return Number L;\n  if (<span class=\"supfact\">v7</span>.st_nlink != Number)\n    <span class=\"supfact\">v11</span> = Number;\n  <span class=\"supfact\">v10</span> = unlink(a1);\n  if (<span class=\"supfact\">v10</span>) {\n  LABEL_9:\n    *(_BYTE *)a4 |= Number;\n    *(_DWORD *)a4 = (Number * *_errno_location()) | *(_DWORD *)a4 & Number;\n    *(_QWORD *)(a4 + Number) = Number L;\n    *(_WORD *)(a4 + Number) = Number;\n    return Number;\n  }\n  *a3 |= Number;\n  if (<span class=\"supfact\">v11</span>)\n    *a3 |= Number;\n  return Number L;\n}", "code_t": "int __cdecl make_scratch(const unsigned __int8 *name, int realfd, int *retflags,\n                         ffsw *iostat) {\n  stat <span class=\"supfact\">statbuf</span>;\n  dev_t <span class=\"supfact\">name_dev</span>;\n  ino_t <span class=\"supfact\">name_ino</span>;\n  int <span class=\"supfact\">ss_0</span>;\n  int <span class=\"supfact\">is_single_linked</span>;\n  *retflags = Number;\n  <span class=\"supfact\">is_single_linked</span> = Number;\n  if (!name) {\n    *(_BYTE *)iostat |= Number;\n    *(_DWORD *)iostat = *(_DWORD *)iostat & Number | Number;\n    iostat->sw_count = Number L;\n    *((_WORD *)iostat + Number) = Number;\n    return Number;\n  }\n  <span class=\"supfact\">ss_0</span> = lstat((const char *)name, &<span class=\"supfact\">statbuf</span>);\n  if (<span class=\"supfact\">ss_0</span> == Number)\n    return Number;\n  if ((<span class=\"supfact\">statbuf</span>.st_mode & Number) == Number) {\n    <span class=\"supfact\">is_single_linked</span> = Number;\n    <span class=\"supfact\">ss_0</span> = stat_0((const char *)name, &<span class=\"supfact\">statbuf</span>);\n    if (<span class=\"supfact\">ss_0</span> == Number)\n      return Number;\n  }\n  <span class=\"supfact\">name_ino</span> = <span class=\"supfact\">statbuf</span>.st_ino;\n  <span class=\"supfact\">name_dev</span> = <span class=\"supfact\">statbuf</span>.st_dev;\n  <span class=\"supfact\">ss_0</span> = fstat(realfd, &<span class=\"supfact\">statbuf</span>);\n  if (<span class=\"supfact\">ss_0</span>)\n    goto LABEL_9;\n  if (<span class=\"supfact\">name_ino</span> != <span class=\"supfact\">statbuf</span>.st_ino ||\n      <span class=\"supfact\">name_dev</span> != <span class=\"supfact\">statbuf</span>.st_dev)\n    return Number;\n  if (<span class=\"supfact\">statbuf</span>.st_nlink != Number)\n    <span class=\"supfact\">is_single_linked</span> = Number;\n  <span class=\"supfact\">ss_0</span> = unlink((const char *)name);\n  if (<span class=\"supfact\">ss_0</span>) {\n  LABEL_9:\n    *(_BYTE *)iostat |= Number;\n    *(_DWORD *)iostat =\n        (Number * *_errno_location()) | *(_DWORD *)iostat & Number;\n    iostat->sw_count = Number L;\n    *((_WORD *)iostat + Number) = Number;\n    return Number;\n  }\n  *retflags |= Number;\n  if (<span class=\"supfact\">is_single_linked</span>)\n    *retflags |= Number;\n  return Number;\n}", "var": [{"name": "v7", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "statbuf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; __time_t st_atime; __syscall_ulong_t st_atimensec; __time_t st_mtime; __syscall_ulong_t st_mtimensec; __time_t st_ctime; __syscall_ulong_t st_ctimensec; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "jplozi", "repo_name": "linux-4.19", "path": "jplozi/linux-4.19/b44af83f65d48f8f85d2caadb400c16dbe4f823405958c22156c16d2a37ca236", "path_in_repo": "jplozi/linux-4.19/tools/perf/util/evlist.o", "objdump": "0000000000001850 <perf_evlist__add_attrs>:\n    1850:\t55                   \tpush   %rbp\n    1851:\t48 89 e5             \tmov    %rsp,%rbp\n    1854:\t48 83 ec 70          \tsub    $0x70,%rsp\n    1858:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    185c:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n    1860:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n    1864:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    186b:\t00 00 \n    186d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1871:\t31 c0                \txor    %eax,%eax\n    1873:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    1877:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    187b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    187f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1883:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n    188a:\t00 \n    188b:\teb 5d                \tjmp    18ea <perf_evlist__add_attrs+0x9a>\n    188d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1891:\t8b 80 10 08 00 00    \tmov    0x810(%rax),%eax\n    1897:\t89 c2                \tmov    %eax,%edx\n    1899:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    189d:\t01 d0                \tadd    %edx,%eax\n    189f:\t89 c1                \tmov    %eax,%ecx\n    18a1:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    18a5:\t48 89 d0             \tmov    %rdx,%rax\n    18a8:\t48 c1 e0 03          \tshl    $0x3,%rax\n    18ac:\t48 29 d0             \tsub    %rdx,%rax\n    18af:\t48 c1 e0 04          \tshl    $0x4,%rax\n    18b3:\t48 89 c2             \tmov    %rax,%rdx\n    18b6:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    18ba:\t48 01 d0             \tadd    %rdx,%rax\n    18bd:\t89 ce                \tmov    %ecx,%esi\n    18bf:\t48 89 c7             \tmov    %rax,%rdi\n    18c2:\te8 00 00 00 00       \tcallq  18c7 <perf_evlist__add_attrs+0x77>\n    18c7:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    18cb:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n    18d0:\t74 3c                \tje     190e <perf_evlist__add_attrs+0xbe>\n    18d2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    18d6:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    18da:\t48 89 d6             \tmov    %rdx,%rsi\n    18dd:\t48 89 c7             \tmov    %rax,%rdi\n    18e0:\te8 c7 ec ff ff       \tcallq  5ac <list_add_tail>\n    18e5:\t48 83 45 c0 01       \taddq   $0x1,-0x40(%rbp)\n    18ea:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    18ee:\t48 3b 45 98          \tcmp    -0x68(%rbp),%rax\n    18f2:\t72 99                \tjb     188d <perf_evlist__add_attrs+0x3d>\n    18f4:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    18f8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    18fc:\t48 89 d6             \tmov    %rdx,%rsi\n    18ff:\t48 89 c7             \tmov    %rax,%rdi\n    1902:\te8 00 00 00 00       \tcallq  1907 <perf_evlist__add_attrs+0xb7>\n    1907:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    190c:\teb 5f                \tjmp    196d <perf_evlist__add_attrs+0x11d>\n    190e:\t90                   \tnop\n    190f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1913:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    1917:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    191b:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    191f:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1923:\t48 8b 00             \tmov    (%rax),%rax\n    1926:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    192a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    192e:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    1932:\teb 27                \tjmp    195b <perf_evlist__add_attrs+0x10b>\n    1934:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1938:\t48 89 c7             \tmov    %rax,%rdi\n    193b:\te8 00 00 00 00       \tcallq  1940 <perf_evlist__add_attrs+0xf0>\n    1940:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1944:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    1948:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    194c:\t48 8b 00             \tmov    (%rax),%rax\n    194f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1953:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1957:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    195b:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n    195f:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    1963:\t48 39 c2             \tcmp    %rax,%rdx\n    1966:\t75 cc                \tjne    1934 <perf_evlist__add_attrs+0xe4>\n    1968:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    196d:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1971:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    1978:\t00 00 \n    197a:\t74 05                \tje     1981 <perf_evlist__add_attrs+0x131>\n    197c:\te8 00 00 00 00       \tcallq  1981 <perf_evlist__add_attrs+0x131>\n    1981:\tc9                   \tleaveq \n    1982:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_evlist__add_attrs(__int64 a1, __int64 a2,\n                                          unsigned __int64 a3) {\n  _QWORD *v5;\n  _QWORD **v6;\n  _QWORD *<span class=\"supfact\">v7</span>;\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  _QWORD *<span class=\"supfact\">v9</span>[Number];\n  <span class=\"supfact\">v9</span>[Number] = (_QWORD *)__readfsqword(Number);\n  <span class=\"supfact\">v9</span>[Number] = <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span>[Number] = <span class=\"supfact\">v9</span>;\n  for (<span class=\"supfact\">i</span> = Number L;; ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">i</span> >= a3) {\n      perf_evlist__splice_list_tail(a1, <span class=\"supfact\">v9</span>);\n      return Number L;\n    }\n    v5 = (_QWORD *)perf_evsel__new_idx(\n        Number * <span class=\"supfact\">i</span> + a2,\n        (unsigned int)(*(_DWORD *)(a1 + Number) + <span class=\"supfact\">i</span>));\n    if (!v5)\n      break;\n    list_add_tail(v5, (__int64)<span class=\"supfact\">v9</span>);\n  }\n  v6 = (_QWORD **)<span class=\"supfact\">v9</span>[Number];\n  <span class=\"supfact\">v7</span> = (_QWORD *)*<span class=\"supfact\">v9</span>[Number];\n  while (v6 != <span class=\"supfact\">v9</span>) {\n    perf_evsel__delete(v6);\n    v6 = (_QWORD **)<span class=\"supfact\">v7</span>;\n    <span class=\"supfact\">v7</span> = (_QWORD *)*<span class=\"supfact\">v7</span>;\n  }\n  return Number;\n}", "code_t": "int __cdecl perf_evlist__add_attrs(perf_evlist *evlist, perf_event_attr *attrs,\n                                   size_t nr_attrs) {\n  perf_evsel *evsel;\n  perf_evsel *evsela;\n  perf_evsel *<span class=\"supfact\">n</span>;\n  size_t <span class=\"supfact\">i</span>;\n  list_head <span class=\"supfact\">head</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  <span class=\"supfact\">head</span>.next = &<span class=\"supfact\">head</span>;\n  <span class=\"supfact\">head</span>.prev = &<span class=\"supfact\">head</span>;\n  for (<span class=\"supfact\">i</span> = Number L;; ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">i</span> >= nr_attrs) {\n      perf_evlist__splice_list_tail(evlist, &<span class=\"supfact\">head</span>);\n      return Number;\n    }\n    evsel = (perf_evsel *)perf_evsel__new_idx(\n        &attrs[<span class=\"supfact\">i</span>],\n        (unsigned int)(evlist->nr_entries + <span class=\"supfact\">i</span>));\n    if (!evsel)\n      break;\n    list_add_tail(&evsel->node, &<span class=\"supfact\">head</span>);\n  }\n  evsela = (perf_evsel *)<span class=\"supfact\">head</span>.next;\n  <span class=\"supfact\">n</span> = (perf_evsel *)<span class=\"supfact\">head</span>.next->next;\n  while (evsela != (perf_evsel *)&<span class=\"supfact\">head</span>) {\n    perf_evsel__delete(evsela);\n    evsela = <span class=\"supfact\">n</span>;\n    <span class=\"supfact\">n</span> = (perf_evsel *)<span class=\"supfact\">n</span>->node.next;\n  }\n  return Number;\n}", "var": [{"name": "v9", "type": "struct list_head { list_head * next; list_head * prev; }", "ref_name": "head", "ref_type": "struct list_head { list_head * next; list_head * prev; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/eaaa0b4e14f2f20b532fd618b7c52e44e30242f6e745ad8409aacff677d3b088", "path_in_repo": "XanClic/qemu//sparc64-softmmu/hw/virtio/virtio-balloon.o", "objdump": "000000000000059f <_nocheck__trace_virtio_balloon_handle_output>:\n     59f:\t55                   \tpush   %rbp\n     5a0:\t48 89 e5             \tmov    %rsp,%rbp\n     5a3:\t41 54                \tpush   %r12\n     5a5:\t53                   \tpush   %rbx\n     5a6:\t48 83 ec 30          \tsub    $0x30,%rsp\n     5aa:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     5ae:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     5b2:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     5b9:\t00 00 \n     5bb:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     5bf:\t31 c0                \txor    %eax,%eax\n     5c1:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 5c7 <_nocheck__trace_virtio_balloon_handle_output+0x28>\n     5c7:\t85 c0                \ttest   %eax,%eax\n     5c9:\t0f 95 c0             \tsetne  %al\n     5cc:\t0f b6 c0             \tmovzbl %al,%eax\n     5cf:\t48 85 c0             \ttest   %rax,%rax\n     5d2:\t74 65                \tje     639 <_nocheck__trace_virtio_balloon_handle_output+0x9a>\n     5d4:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 5db <_nocheck__trace_virtio_balloon_handle_output+0x3c>\n     5db:\t66 85 c0             \ttest   %ax,%ax\n     5de:\t74 59                \tje     639 <_nocheck__trace_virtio_balloon_handle_output+0x9a>\n     5e0:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     5e5:\te8 d6 fe ff ff       \tcallq  4c0 <qemu_loglevel_mask>\n     5ea:\t84 c0                \ttest   %al,%al\n     5ec:\t74 4b                \tje     639 <_nocheck__trace_virtio_balloon_handle_output+0x9a>\n     5ee:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     5f2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     5f7:\t48 89 c7             \tmov    %rax,%rdi\n     5fa:\te8 00 00 00 00       \tcallq  5ff <_nocheck__trace_virtio_balloon_handle_output+0x60>\n     5ff:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     603:\t49 89 c4             \tmov    %rax,%r12\n     606:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     60a:\t48 89 c3             \tmov    %rax,%rbx\n     60d:\te8 00 00 00 00       \tcallq  612 <_nocheck__trace_virtio_balloon_handle_output+0x73>\n     612:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     616:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     61a:\t49 89 c9             \tmov    %rcx,%r9\n     61d:\t49 89 d0             \tmov    %rdx,%r8\n     620:\t4c 89 e1             \tmov    %r12,%rcx\n     623:\t48 89 da             \tmov    %rbx,%rdx\n     626:\t89 c6                \tmov    %eax,%esi\n     628:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 62f <_nocheck__trace_virtio_balloon_handle_output+0x90>\n     62f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     634:\te8 00 00 00 00       \tcallq  639 <_nocheck__trace_virtio_balloon_handle_output+0x9a>\n     639:\t90                   \tnop\n     63a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     63e:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     645:\t00 00 \n     647:\t74 05                \tje     64e <_nocheck__trace_virtio_balloon_handle_output+0xaf>\n     649:\te8 00 00 00 00       \tcallq  64e <_nocheck__trace_virtio_balloon_handle_output+0xaf>\n     64e:\t48 83 c4 30          \tadd    $0x30,%rsp\n     652:\t5b                   \tpop    %rbx\n     653:\t41 5c                \tpop    %r12\n     655:\t5d                   \tpop    %rbp\n     656:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_virtio_balloon_handle_output(\n    const char *a1, __int64 a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VIRTIO_BALLOON_HANDLE_OUTPUT_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v2 = <span class=\"supfact\">tv</span>.tv_usec;\n    v3 = <span class=\"supfact\">tv</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, a1, a2);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v7</span>;\n}", "code_t": "void __cdecl nocheck__trace_virtio_balloon_handle_output(const char *name,\n                                                         uint64_t gpa) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VIRTIO_BALLOON_HANDLE_OUTPUT_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v2 = <span class=\"supfact\">_now</span>.tv_usec;\n    v3 = <span class=\"supfact\">_now</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, name, gpa);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "aidanjohnson", "repo_name": "dt7816", "path": "aidanjohnson/dt7816/02bc3fc2e84177e5c27f3b7c784f07dd9962660984e29acb4afcba3a6287a30a", "path_in_repo": "aidanjohnson/dt7816/board-support/linux-3.12.10-ti2013.12.01/tools/perf/util/dwarf-aux.o", "objdump": "0000000000000391 <die_get_type>:\n     391:\t55                   \tpush   %rbp\n     392:\t48 89 e5             \tmov    %rsp,%rbp\n     395:\t48 83 ec 30          \tsub    $0x30,%rsp\n     399:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     39d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     3a1:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     3a8:\t00 00 \n     3aa:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     3ae:\t31 c0                \txor    %eax,%eax\n     3b0:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     3b4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     3b8:\tbe 49 00 00 00       \tmov    $0x49,%esi\n     3bd:\t48 89 c7             \tmov    %rax,%rdi\n     3c0:\te8 00 00 00 00       \tcallq  3c5 <die_get_type+0x34>\n     3c5:\t48 85 c0             \ttest   %rax,%rax\n     3c8:\t74 1e                \tje     3e8 <die_get_type+0x57>\n     3ca:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     3ce:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     3d2:\t48 89 d6             \tmov    %rdx,%rsi\n     3d5:\t48 89 c7             \tmov    %rax,%rdi\n     3d8:\te8 00 00 00 00       \tcallq  3dd <die_get_type+0x4c>\n     3dd:\t48 85 c0             \ttest   %rax,%rax\n     3e0:\t74 06                \tje     3e8 <die_get_type+0x57>\n     3e2:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     3e6:\teb 05                \tjmp    3ed <die_get_type+0x5c>\n     3e8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     3ed:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     3f1:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     3f8:\t00 00 \n     3fa:\t74 05                \tje     401 <die_get_type+0x70>\n     3fc:\te8 00 00 00 00       \tcallq  401 <die_get_type+0x70>\n     401:\tc9                   \tleaveq \n     402:\tc3                   \tretq   ", "code_s": "__int64 __fastcall die_get_type(__int64 a1, __int64 a2) {\n  __int64 result;\n  char <span class=\"supfact\">v3</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (dwarf_attr_integrate(a1, Number L, <span class=\"supfact\">v3</span>) &&\n      dwarf_formref_die(<span class=\"supfact\">v3</span>, a2))\n    result = a2;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "Dwarf_Die *__cdecl die_get_type(Dwarf_Die *vr_die, Dwarf_Die *die_mem) {\n  Dwarf_Die *result;\n  Dwarf_Attribute <span class=\"supfact\">attr</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (dwarf_attr_integrate(vr_die, Number L, &<span class=\"supfact\">attr</span>) &&\n      dwarf_formref_die(&<span class=\"supfact\">attr</span>, die_mem))\n    result = die_mem;\n  else\n    result = Number L;\n  return result;\n}", "var": [{"name": "v3", "type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }", "ref_name": "attr", "ref_type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/4a0bdc8f003682ab5c7a3c0a5c9b700f487b7028dbd0c77ebe0fbc2d78f678f9", "path_in_repo": "XanClic/qemu//aarch64-softmmu/gdbstub.o", "objdump": "0000000000000a0c <_nocheck__trace_gdbstub_hit_unknown>:\n     a0c:\t55                   \tpush   %rbp\n     a0d:\t48 89 e5             \tmov    %rsp,%rbp\n     a10:\t41 54                \tpush   %r12\n     a12:\t53                   \tpush   %rbx\n     a13:\t48 83 ec 30          \tsub    $0x30,%rsp\n     a17:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n     a1a:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     a21:\t00 00 \n     a23:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     a27:\t31 c0                \txor    %eax,%eax\n     a29:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a2f <_nocheck__trace_gdbstub_hit_unknown+0x23>\n     a2f:\t85 c0                \ttest   %eax,%eax\n     a31:\t0f 95 c0             \tsetne  %al\n     a34:\t0f b6 c0             \tmovzbl %al,%eax\n     a37:\t48 85 c0             \ttest   %rax,%rax\n     a3a:\t74 5d                \tje     a99 <_nocheck__trace_gdbstub_hit_unknown+0x8d>\n     a3c:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # a43 <_nocheck__trace_gdbstub_hit_unknown+0x37>\n     a43:\t66 85 c0             \ttest   %ax,%ax\n     a46:\t74 51                \tje     a99 <_nocheck__trace_gdbstub_hit_unknown+0x8d>\n     a48:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     a4d:\te8 0e f6 ff ff       \tcallq  60 <qemu_loglevel_mask>\n     a52:\t84 c0                \ttest   %al,%al\n     a54:\t74 43                \tje     a99 <_nocheck__trace_gdbstub_hit_unknown+0x8d>\n     a56:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     a5a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a5f:\t48 89 c7             \tmov    %rax,%rdi\n     a62:\te8 00 00 00 00       \tcallq  a67 <_nocheck__trace_gdbstub_hit_unknown+0x5b>\n     a67:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a6b:\t49 89 c4             \tmov    %rax,%r12\n     a6e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     a72:\t48 89 c3             \tmov    %rax,%rbx\n     a75:\te8 00 00 00 00       \tcallq  a7a <_nocheck__trace_gdbstub_hit_unknown+0x6e>\n     a7a:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     a7d:\t41 89 d0             \tmov    %edx,%r8d\n     a80:\t4c 89 e1             \tmov    %r12,%rcx\n     a83:\t48 89 da             \tmov    %rbx,%rdx\n     a86:\t89 c6                \tmov    %eax,%esi\n     a88:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # a8f <_nocheck__trace_gdbstub_hit_unknown+0x83>\n     a8f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a94:\te8 00 00 00 00       \tcallq  a99 <_nocheck__trace_gdbstub_hit_unknown+0x8d>\n     a99:\t90                   \tnop\n     a9a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a9e:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     aa5:\t00 00 \n     aa7:\t74 05                \tje     aae <_nocheck__trace_gdbstub_hit_unknown+0xa2>\n     aa9:\te8 00 00 00 00       \tcallq  aae <_nocheck__trace_gdbstub_hit_unknown+0xa2>\n     aae:\t48 83 c4 30          \tadd    $0x30,%rsp\n     ab2:\t5b                   \tpop    %rbx\n     ab3:\t41 5c                \tpop    %r12\n     ab5:\t5d                   \tpop    %rbp\n     ab6:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_gdbstub_hit_unknown(\n    unsigned int a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_HIT_UNKNOWN_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl nocheck__trace_gdbstub_hit_unknown(int state) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_HIT_UNKNOWN_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, (unsigned int)state);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "ystk", "repo_name": "debian-qemu", "path": "ystk/debian-qemu/b9cd859a7df7a688400f05bfe8b8f4bec2cb8609c9fa27f2b43f05cfbc4f13c3", "path_in_repo": "ystk/debian-qemu//mips-softmmu/virtio-balloon.o", "objdump": "00000000000002d6 <virtio_balloon_get_config>:\n 2d6:\t55                   \tpush   %rbp\n 2d7:\t48 89 e5             \tmov    %rsp,%rbp\n 2da:\t48 83 ec 20          \tsub    $0x20,%rsp\n 2de:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 2e2:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 2e6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2ea:\t48 89 c7             \tmov    %rax,%rdi\n 2ed:\te8 32 fd ff ff       \tcallq  24 <to_virtio_balloon>\n 2f2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 2f6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2fa:\t8b 80 88 00 00 00    \tmov    0x88(%rax),%eax\n 300:\t89 c7                \tmov    %eax,%edi\n 302:\te8 f9 fc ff ff       \tcallq  0 <cpu_to_le32>\n 307:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 30a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 30e:\t8b 80 8c 00 00 00    \tmov    0x8c(%rax),%eax\n 314:\t89 c7                \tmov    %eax,%edi\n 316:\te8 e5 fc ff ff       \tcallq  0 <cpu_to_le32>\n 31b:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 31e:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 322:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 326:\t48 89 10             \tmov    %rdx,(%rax)\n 329:\t90                   \tnop\n 32a:\tc9                   \tleaveq \n 32b:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall virtio_balloon_get_config(__int64 a1, _QWORD *a2) {\n  _QWORD *result;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = to_virtio_balloon(a1);\n  LODWORD(<span class=\"supfact\">v3</span>) =\n      cpu_to_le32(*(_DWORD *)(<span class=\"supfact\">v4</span> + Number));\n  HIDWORD(<span class=\"supfact\">v3</span>) =\n      cpu_to_le32(*(_DWORD *)(<span class=\"supfact\">v4</span> + Number));\n  result = a2;\n  *a2 = <span class=\"supfact\">v3</span>;\n  return result;\n}", "code_t": "void __cdecl virtio_balloon_get_config(VirtIODevice_0 *vdev,\n                                       uint8_t *config_data) {\n  virtio_balloon_config <span class=\"supfact\">config</span>;\n  VirtIOBalloon_0 *<span class=\"supfact\">dev</span>;\n  <span class=\"supfact\">dev</span> = to_virtio_balloon(vdev);\n  <span class=\"supfact\">config</span>.num_pages =\n      cpu_to_le32(<span class=\"supfact\">dev</span>->num_pages);\n  <span class=\"supfact\">config</span>.actual = cpu_to_le32(<span class=\"supfact\">dev</span>->actual);\n  *(virtio_balloon_config *)config_data = <span class=\"supfact\">config</span>;\n}", "var": [{"name": "v3", "type": "struct virtio_balloon_config { uint32_t num_pages; uint32_t actual; }", "ref_name": "config", "ref_type": "struct virtio_balloon_config { uint32_t num_pages; uint32_t actual; }"}], "body_in_train": true}, {"repo_owner": "sisoputnfrba", "repo_name": "koopa-2c2013", "path": "sisoputnfrba/koopa-2c2013/3c16d8e69e5e6b3c7e8e004e95387d83fe0405832095bc3d9f238729355ad730", "path_in_repo": "sisoputnfrba/koopa-2c2013/Release/src/anim/screen.o", "objdump": "000000000000063a <_screen_getTermSize>:\n 63a:\t55                   \tpush   %rbp\n 63b:\t48 89 e5             \tmov    %rsp,%rbp\n 63e:\t48 83 ec 20          \tsub    $0x20,%rsp\n 642:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 646:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 64a:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n 64e:\t48 89 c2             \tmov    %rax,%rdx\n 651:\tbe 13 54 00 00       \tmov    $0x5413,%esi\n 656:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 65b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 660:\te8 00 00 00 00       \tcallq  665 <_screen_getTermSize+0x2b>\n 665:\t0f b7 45 f8          \tmovzwl -0x8(%rbp),%eax\n 669:\t0f b7 d0             \tmovzwl %ax,%edx\n 66c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 670:\t89 10                \tmov    %edx,(%rax)\n 672:\t0f b7 45 fa          \tmovzwl -0x6(%rbp),%eax\n 676:\t0f b7 d0             \tmovzwl %ax,%edx\n 679:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 67d:\t89 10                \tmov    %edx,(%rax)\n 67f:\t90                   \tnop\n 680:\tc9                   \tleaveq \n 681:\tc3                   \tretq   \n", "code_s": "_DWORD *__fastcall screen_getTermSize(_DWORD *a1, _DWORD *a2) {\n  _DWORD *result;\n  __int16 <span class=\"supfact\">v3</span>[Number];\n  ioctl(Number, Number, <span class=\"supfact\">v3</span>);\n  *a2 = (unsigned __int16)<span class=\"supfact\">v3</span>[Number];\n  result = a1;\n  *a1 = (unsigned __int16)<span class=\"supfact\">v3</span>[Number];\n  return result;\n}", "code_t": "void __cdecl screen_getTermSize(int *cols, int *rows) {\n  winsize <span class=\"supfact\">ws</span>;\n  ioctl(Number, Number, &<span class=\"supfact\">ws</span>);\n  *rows = <span class=\"supfact\">ws</span>.ws_row;\n  *cols = <span class=\"supfact\">ws</span>.ws_col;\n}", "var": [{"name": "v3", "type": "struct winsize { unsigned __int16 ws_row; unsigned __int16 ws_col; unsigned __int16 ws_xpixel; unsigned __int16 ws_ypixel; }", "ref_name": "ws", "ref_type": "struct winsize { unsigned __int16 ws_row; unsigned __int16 ws_col; unsigned __int16 ws_xpixel; unsigned __int16 ws_ypixel; }"}], "body_in_train": false}, {"repo_owner": "popo55668", "repo_name": "DAG-Aware-MIG-Rewriting", "path": "popo55668/DAG-Aware-MIG-Rewriting/96c8a49dd474a5e884cfa7ccc9e1d726e13d609166b3116415d6e27c495efce6", "path_in_repo": "popo55668/DAG-Aware-MIG-Rewriting//src/base/io/ioReadBblif.o", "objdump": "0000000000000000 <Abc_Clock>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 83 ec 20          \tsub    $0x20,%rsp\n       8:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n       c:\t48 89 c6             \tmov    %rax,%rsi\n       f:\tbf 03 00 00 00       \tmov    $0x3,%edi\n      14:\te8 00 00 00 00       \tcallq  19 <Abc_Clock+0x19>\n      19:\t85 c0                \ttest   %eax,%eax\n      1b:\t79 09                \tjns    26 <Abc_Clock+0x26>\n      1d:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n      24:\teb 3c                \tjmp    62 <Abc_Clock+0x62>\n      26:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n      2a:\t48 69 c0 40 42 0f 00 \timul   $0xf4240,%rax,%rax\n      31:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      35:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n      39:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n      40:\t9b c4 20 \n      43:\t48 89 c8             \tmov    %rcx,%rax\n      46:\t48 f7 ea             \timul   %rdx\n      49:\t48 c1 fa 07          \tsar    $0x7,%rdx\n      4d:\t48 89 c8             \tmov    %rcx,%rax\n      50:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n      54:\t48 29 c2             \tsub    %rax,%rdx\n      57:\t48 89 d0             \tmov    %rdx,%rax\n      5a:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n      5e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      62:\tc9                   \tleaveq \n      63:\tc3                   \tretq   ", "code_s": "__syscall_slong_t Abc_Clock() {\n  __syscall_slong_t result;\n  struct timespec <span class=\"supfact\">tp</span>;\n  if (clock_gettime(Number, &<span class=\"supfact\">tp</span>) >= Number)\n    result = <span class=\"supfact\">tp</span>.tv_nsec / Number +\n             Number * <span class=\"supfact\">tp</span>.tv_sec;\n  else\n    result = Number;\n  return result;\n}", "code_t": "abctime __cdecl Abc_Clock() {\n  abctime result;\n  timespec <span class=\"supfact\">ts</span>;\n  if (clock_gettime(Number, &<span class=\"supfact\">ts</span>) >= Number)\n    result = <span class=\"supfact\">ts</span>.tv_nsec / Number +\n             Number * <span class=\"supfact\">ts</span>.tv_sec;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "danielgelbart", "repo_name": "bets", "path": "danielgelbart/bets/6dbd861a8160298bb6c8aa514bec7655efa034bc200b7abcab0fb753c1b20cea", "path_in_repo": "danielgelbart/bets/cpp/src/RunInfo.o", "objdump": "0000000000000160 <_ZNK7RunInfo11sitemapsDirB5cxx11Ev>:\n 160:\t55                   \tpush   %rbp\n 161:\t48 89 e5             \tmov    %rsp,%rbp\n 164:\t53                   \tpush   %rbx\n 165:\t48 83 ec 38          \tsub    $0x38,%rsp\n 169:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 16d:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n 171:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 175:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n 179:\t48 89 d6             \tmov    %rdx,%rsi\n 17c:\t48 89 c7             \tmov    %rax,%rdi\n 17f:\te8 00 00 00 00       \tcallq  184 <_ZNK7RunInfo11sitemapsDirB5cxx11Ev+0x24>\n 184:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 188:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n 18c:\tba 00 00 00 00       \tmov    $0x0,%edx\n 191:\t48 89 ce             \tmov    %rcx,%rsi\n 194:\t48 89 c7             \tmov    %rax,%rdi\n 197:\te8 00 00 00 00       \tcallq  19c <_ZNK7RunInfo11sitemapsDirB5cxx11Ev+0x3c>\n 19c:\t90                   \tnop\n 19d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 1a1:\t48 89 c7             \tmov    %rax,%rdi\n 1a4:\te8 00 00 00 00       \tcallq  1a9 <_ZNK7RunInfo11sitemapsDirB5cxx11Ev+0x49>\n 1a9:\teb 1a                \tjmp    1c5 <_ZNK7RunInfo11sitemapsDirB5cxx11Ev+0x65>\n 1ab:\t48 89 c3             \tmov    %rax,%rbx\n 1ae:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 1b2:\t48 89 c7             \tmov    %rax,%rdi\n 1b5:\te8 00 00 00 00       \tcallq  1ba <_ZNK7RunInfo11sitemapsDirB5cxx11Ev+0x5a>\n 1ba:\t48 89 d8             \tmov    %rbx,%rax\n 1bd:\t48 89 c7             \tmov    %rax,%rdi\n 1c0:\te8 00 00 00 00       \tcallq  1c5 <_ZNK7RunInfo11sitemapsDirB5cxx11Ev+0x65>\n 1c5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1c9:\t48 83 c4 38          \tadd    $0x38,%rsp\n 1cd:\t5b                   \tpop    %rbx\n 1ce:\t5d                   \tpop    %rbp\n 1cf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall RunInfo sitemapsDir[abi:cxx11](__int64 a1, __int64 a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  RunInfo mirrorsDir[abi:cxx11]((__int64)<span class=\"supfact\">v3</span>, a2);\n  std operator+<char>(a1, <span class=\"supfact\">v3</span>, String);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v3</span>);\n  return a1;\n}", "code_t": "std string *__cdecl RunInfo sitemapsDir[abi:cxx11](std string *retstr,\n                                                   const RunInfo *const this) {\n  std string <span class=\"supfact\">__lhs</span>;\n  RunInfo mirrorsDir[abi:cxx11](&<span class=\"supfact\">__lhs</span>, this);\n  std operator+<char>(retstr, &<span class=\"supfact\">__lhs</span>, String);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">__lhs</span>);\n  return retstr;\n}", "var": [{"name": "v3", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "__lhs", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "bpillon", "repo_name": "android-ffmpeg-wrapper", "path": "bpillon/android-ffmpeg-wrapper/987d1c0906e16aee139dbe85b67e4fa35d84781792e59607201f2246867562d8", "path_in_repo": "bpillon/android-ffmpeg-wrapper/jni/ffmpeg/libavformat/bit.o", "objdump": "00000000000004de <read_packet>:\n 4de:\t48 81 ec 28 01 00 00 \tsub    $0x128,%rsp\n 4e5:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n 4ea:\t48 89 34 24          \tmov    %rsi,(%rsp)\n 4ee:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 4f3:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n 4f7:\t48 89 84 24 08 01 00 \tmov    %rax,0x108(%rsp)\n 4fe:\t00 \n 4ff:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n 504:\t48 89 84 24 18 01 00 \tmov    %rax,0x118(%rsp)\n 50b:\t00 \n 50c:\t48 8b 84 24 08 01 00 \tmov    0x108(%rsp),%rax\n 513:\t00 \n 514:\t48 89 84 24 f0 00 00 \tmov    %rax,0xf0(%rsp)\n 51b:\t00 \n 51c:\t48 8b 84 24 f0 00 00 \tmov    0xf0(%rsp),%rax\n 523:\t00 \n 524:\tba 01 00 00 00       \tmov    $0x1,%edx\n 529:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 52e:\t48 89 c7             \tmov    %rax,%rdi\n 531:\te8 00 00 00 00       \tcallq  536 <read_packet+0x58>\n 536:\t48 89 84 24 00 01 00 \tmov    %rax,0x100(%rsp)\n 53d:\t00 \n 53e:\t48 8b 84 24 08 01 00 \tmov    0x108(%rsp),%rax\n 545:\t00 \n 546:\t48 89 c7             \tmov    %rax,%rdi\n 549:\te8 00 00 00 00       \tcallq  54e <read_packet+0x70>\n 54e:\t85 c0                \ttest   %eax,%eax\n 550:\t74 0a                \tje     55c <read_packet+0x7e>\n 552:\tb8 bb b0 b9 df       \tmov    $0xdfb9b0bb,%eax\n 557:\te9 9a 01 00 00       \tjmpq   6f6 <read_packet+0x218>\n 55c:\t48 8b 84 24 08 01 00 \tmov    0x108(%rsp),%rax\n 563:\t00 \n 564:\t48 89 c7             \tmov    %rax,%rdi\n 567:\te8 00 00 00 00       \tcallq  56c <read_packet+0x8e>\n 56c:\t48 8b 84 24 08 01 00 \tmov    0x108(%rsp),%rax\n 573:\t00 \n 574:\t48 89 c7             \tmov    %rax,%rdi\n 577:\te8 00 00 00 00       \tcallq  57c <read_packet+0x9e>\n 57c:\tc1 e8 03             \tshr    $0x3,%eax\n 57f:\t89 84 24 fc 00 00 00 \tmov    %eax,0xfc(%rsp)\n 586:\t83 bc 24 fc 00 00 00 \tcmpl   $0xa,0xfc(%rsp)\n 58d:\t0a \n 58e:\t7e 0a                \tjle    59a <read_packet+0xbc>\n 590:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n 595:\te9 5c 01 00 00       \tjmpq   6f6 <read_packet+0x218>\n 59a:\t8b 84 24 fc 00 00 00 \tmov    0xfc(%rsp),%eax\n 5a1:\tc1 e0 03             \tshl    $0x3,%eax\n 5a4:\t48 98                \tcltq   \n 5a6:\t01 c0                \tadd    %eax,%eax\n 5a8:\t89 c2                \tmov    %eax,%edx\n 5aa:\t48 8d 4c 24 10       \tlea    0x10(%rsp),%rcx\n 5af:\t48 8b 84 24 08 01 00 \tmov    0x108(%rsp),%rax\n 5b6:\t00 \n 5b7:\t48 89 ce             \tmov    %rcx,%rsi\n 5ba:\t48 89 c7             \tmov    %rax,%rdi\n 5bd:\te8 00 00 00 00       \tcallq  5c2 <read_packet+0xe4>\n 5c2:\t89 84 24 f8 00 00 00 \tmov    %eax,0xf8(%rsp)\n 5c9:\t83 bc 24 f8 00 00 00 \tcmpl   $0x0,0xf8(%rsp)\n 5d0:\t00 \n 5d1:\t79 0c                \tjns    5df <read_packet+0x101>\n 5d3:\t8b 84 24 f8 00 00 00 \tmov    0xf8(%rsp),%eax\n 5da:\te9 17 01 00 00       \tjmpq   6f6 <read_packet+0x218>\n 5df:\t8b 84 24 f8 00 00 00 \tmov    0xf8(%rsp),%eax\n 5e6:\t48 98                \tcltq   \n 5e8:\t8b 94 24 fc 00 00 00 \tmov    0xfc(%rsp),%edx\n 5ef:\tc1 e2 03             \tshl    $0x3,%edx\n 5f2:\t48 63 d2             \tmovslq %edx,%rdx\n 5f5:\t48 01 d2             \tadd    %rdx,%rdx\n 5f8:\t48 39 d0             \tcmp    %rdx,%rax\n 5fb:\t74 0a                \tje     607 <read_packet+0x129>\n 5fd:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n 602:\te9 ef 00 00 00       \tjmpq   6f6 <read_packet+0x218>\n 607:\t8b 94 24 fc 00 00 00 \tmov    0xfc(%rsp),%edx\n 60e:\t48 8b 04 24          \tmov    (%rsp),%rax\n 612:\t89 d6                \tmov    %edx,%esi\n 614:\t48 89 c7             \tmov    %rax,%rdi\n 617:\te8 00 00 00 00       \tcallq  61c <read_packet+0x13e>\n 61c:\t85 c0                \ttest   %eax,%eax\n 61e:\t79 0a                \tjns    62a <read_packet+0x14c>\n 620:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n 625:\te9 cc 00 00 00       \tjmpq   6f6 <read_packet+0x218>\n 62a:\t48 8b 04 24          \tmov    (%rsp),%rax\n 62e:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n 632:\t8b 94 24 fc 00 00 00 \tmov    0xfc(%rsp),%edx\n 639:\t48 8d 84 24 c0 00 00 \tlea    0xc0(%rsp),%rax\n 640:\t00 \n 641:\t48 89 ce             \tmov    %rcx,%rsi\n 644:\t48 89 c7             \tmov    %rax,%rdi\n 647:\te8 d5 fa ff ff       \tcallq  121 <init_put_bits>\n 64c:\tc7 84 24 10 01 00 00 \tmovl   $0x0,0x110(%rsp)\n 653:\t00 00 00 00 \n 657:\teb 5d                \tjmp    6b6 <read_packet+0x1d8>\n 659:\tc7 84 24 14 01 00 00 \tmovl   $0x0,0x114(%rsp)\n 660:\t00 00 00 00 \n 664:\teb 3e                \tjmp    6a4 <read_packet+0x1c6>\n 666:\t48 8b 84 24 18 01 00 \tmov    0x118(%rsp),%rax\n 66d:\t00 \n 66e:\t48 8d 50 02          \tlea    0x2(%rax),%rdx\n 672:\t48 89 94 24 18 01 00 \tmov    %rdx,0x118(%rsp)\n 679:\t00 \n 67a:\t0f b7 00             \tmovzwl (%rax),%eax\n 67d:\t66 3d 81 00          \tcmp    $0x81,%ax\n 681:\t0f 94 c0             \tsete   %al\n 684:\t0f b6 d0             \tmovzbl %al,%edx\n 687:\t48 8d 84 24 c0 00 00 \tlea    0xc0(%rsp),%rax\n 68e:\t00 \n 68f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 694:\t48 89 c7             \tmov    %rax,%rdi\n 697:\te8 b2 fb ff ff       \tcallq  24e <put_bits>\n 69c:\t83 84 24 14 01 00 00 \taddl   $0x1,0x114(%rsp)\n 6a3:\t01 \n 6a4:\t83 bc 24 14 01 00 00 \tcmpl   $0x7,0x114(%rsp)\n 6ab:\t07 \n 6ac:\t7e b8                \tjle    666 <read_packet+0x188>\n 6ae:\t83 84 24 10 01 00 00 \taddl   $0x1,0x110(%rsp)\n 6b5:\t01 \n 6b6:\t8b 84 24 10 01 00 00 \tmov    0x110(%rsp),%eax\n 6bd:\t3b 84 24 fc 00 00 00 \tcmp    0xfc(%rsp),%eax\n 6c4:\t7c 93                \tjl     659 <read_packet+0x17b>\n 6c6:\t48 8d 84 24 c0 00 00 \tlea    0xc0(%rsp),%rax\n 6cd:\t00 \n 6ce:\t48 89 c7             \tmov    %rax,%rdi\n 6d1:\te8 d8 fa ff ff       \tcallq  1ae <flush_put_bits>\n 6d6:\t48 8b 04 24          \tmov    (%rsp),%rax\n 6da:\tc7 40 3c 01 00 00 00 \tmovl   $0x1,0x3c(%rax)\n 6e1:\t48 8b 04 24          \tmov    (%rsp),%rax\n 6e5:\t48 8b 94 24 00 01 00 \tmov    0x100(%rsp),%rdx\n 6ec:\t00 \n 6ed:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n 6f1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 6f6:\t48 81 c4 28 01 00 00 \tadd    $0x128,%rsp\n 6fd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_packet(__int64 a1, __int64 a2) {\n  char *v3;\n  char <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">j</span>;\n  char *<span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v10</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v13</span> = <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v6</span> = <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v9</span> = avio_seek(<span class=\"supfact\">v10</span>, Number L, Number L);\n  if ((unsigned int)url_feof(<span class=\"supfact\">v10</span>))\n    return Number L;\n  avio_rl16(<span class=\"supfact\">v10</span>);\n  <span class=\"supfact\">v8</span> = (unsigned int)avio_rl16(<span class=\"supfact\">v10</span>) >> Number;\n  if (<span class=\"supfact\">v8</span> > Number)\n    return Number L;\n  <span class=\"supfact\">v7</span> = avio_read(<span class=\"supfact\">v10</span>, <span class=\"supfact\">v4</span>,\n                                 Number * <span class=\"supfact\">v8</span>);\n  if ((<span class=\"supfact\">v7</span> & Number) != Number)\n    return <span class=\"supfact\">v7</span>;\n  if (<span class=\"supfact\">v7</span> != Number L * (int)(Number * <span class=\"supfact\">v8</span>))\n    return Number L;\n  if ((int)av_new_packet(a2, <span class=\"supfact\">v8</span>) < Number)\n    return Number L;\n  init_put_bits((__int64)<span class=\"supfact\">v5</span>, *(_QWORD *)(a2 + Number),\n                <span class=\"supfact\">v8</span>);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < (int)<span class=\"supfact\">v8</span>;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      v3 = <span class=\"supfact\">v13</span>;\n      <span class=\"supfact\">v13</span> += Number;\n      put_bits(<span class=\"supfact\">v5</span>, Number, *(_WORD *)v3 == Number);\n    }\n  }\n  flush_put_bits((__int64)<span class=\"supfact\">v5</span>);\n  *(_DWORD *)(a2 + Number) = Number;\n  *(_QWORD *)(a2 + Number) = <span class=\"supfact\">v9</span>;\n  return Number L;\n}", "code_t": "int __cdecl read_packet(AVFormatContext_0 *s, AVPacket_0 *pkt) {\n  uint16_t *v3;\n  uint16_t <span class=\"supfact\">buf</span>[Number];\n  PutBitContext_0 <span class=\"supfact\">pbo</span>;\n  AVIOContext_0 *<span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">packet_size</span>;\n  int64_t <span class=\"supfact\">pos</span>;\n  AVIOContext_0 *<span class=\"supfact\">pb</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  uint16_t *<span class=\"supfact\">src</span>;\n  <span class=\"supfact\">pb</span> = s-><span class=\"supfact\">pb</span>;\n  <span class=\"supfact\">src</span> = <span class=\"supfact\">buf</span>;\n  <span class=\"supfact\">v6</span> = <span class=\"supfact\">pb</span>;\n  <span class=\"supfact\">pos</span> = avio_seek(<span class=\"supfact\">pb</span>, Number L, Number L);\n  if ((unsigned int)url_feof(<span class=\"supfact\">pb</span>))\n    return Number;\n  avio_rl16(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">packet_size</span> =\n      (unsigned int)avio_rl16(<span class=\"supfact\">pb</span>) >> Number;\n  if ((unsigned int)<span class=\"supfact\">packet_size</span> > Number)\n    return Number;\n  <span class=\"supfact\">ret</span> =\n      avio_read(<span class=\"supfact\">pb</span>, <span class=\"supfact\">buf</span>,\n                (unsigned int)(Number * <span class=\"supfact\">packet_size</span>));\n  if (<span class=\"supfact\">ret</span> < Number)\n    return <span class=\"supfact\">ret</span>;\n  if (<span class=\"supfact\">ret</span> != Number L * <span class=\"supfact\">packet_size</span>)\n    return Number;\n  if ((int)av_new_packet(pkt, (unsigned int)<span class=\"supfact\">packet_size</span>) <\n      Number)\n    return Number;\n  init_put_bits(&<span class=\"supfact\">pbo</span>, pkt->data, <span class=\"supfact\">packet_size</span>);\n  for (<span class=\"supfact\">j</span> = Number;\n       <span class=\"supfact\">j</span> < <span class=\"supfact\">packet_size</span>; ++<span class=\"supfact\">j</span>) {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>) {\n      v3 = <span class=\"supfact\">src</span>++;\n      put_bits(&<span class=\"supfact\">pbo</span>, Number, *v3 == Number);\n    }\n  }\n  flush_put_bits(&<span class=\"supfact\">pbo</span>);\n  pkt->duration = Number;\n  pkt-><span class=\"supfact\">pos</span> = <span class=\"supfact\">pos</span>;\n  return Number;\n}", "var": [{"name": "v5", "type": "struct PutBitContext_0 { uint32_t bit_buf; int bit_left; uint8_t * buf; uint8_t * buf_ptr; uint8_t * buf_end; int size_in_bits; PADDING (4); }", "ref_name": "pbo", "ref_type": "struct PutBitContext_0 { uint32_t bit_buf; int bit_left; uint8_t * buf; uint8_t * buf_ptr; uint8_t * buf_end; int size_in_bits; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "piyawad", "repo_name": "test1", "path": "piyawad/test1/ed00a990ebd0678e6e3829d60a55757c0fadcff986a7e3bf78a98759e2dea13a", "path_in_repo": "piyawad/test1/branches/11/res/pjproject/pjlib-util/bin/pjlib-util-test-x86_64-unknown-linux-gnu", "objdump": "0000000000429fed <pj_strdup3>:\n  429fed:\t55                   \tpush   %rbp\n  429fee:\t48 89 e5             \tmov    %rsp,%rbp\n  429ff1:\t48 83 ec 20          \tsub    $0x20,%rsp\n  429ff5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  429ff9:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  429ffd:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  42a001:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n  42a005:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42a009:\t48 89 ce             \tmov    %rcx,%rsi\n  42a00c:\t48 89 c7             \tmov    %rax,%rdi\n  42a00f:\te8 97 fe ff ff       \tcallq  429eab <pj_strdup2>\n  42a014:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  42a018:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  42a01c:\tc9                   \tleaveq \n  42a01d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_strdup3(__int64 a1, const char *a2) {\n  __int64 <span class=\"supfact\">v3</span>;\n  pj_strdup2(a1, (__int64)&<span class=\"supfact\">v3</span>, a2);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "pj_str_t_0 __cdecl pj_strdup3(pj_pool_t_0 *pool, const char *src) {\n  pj_str_t_0 <span class=\"supfact\">temp</span>;\n  pj_strdup2(pool, &<span class=\"supfact\">temp</span>, src);\n  return <span class=\"supfact\">temp</span>;\n}", "var": [{"name": "v3", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "temp", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "converse2006", "repo_name": "ArduinoUno-QEMU", "path": "converse2006/ArduinoUno-QEMU/04b178bc73a9bb3c5ff4b29fac5d73a50aa9ec570c30e721f95f65bd08d7da86", "path_in_repo": "converse2006/ArduinoUno-QEMU//i386-softmmu/virtio-9p.o", "objdump": "0000000000000db7 <v9fs_do_chown>:\n     db7:\t55                   \tpush   %rbp\n     db8:\t48 89 e5             \tmov    %rsp,%rbp\n     dbb:\t48 83 ec 40          \tsub    $0x40,%rsp\n     dbf:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     dc3:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     dc7:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n     dca:\t89 4d c8             \tmov    %ecx,-0x38(%rbp)\n     dcd:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     dd4:\t00 00 \n     dd6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     dda:\t31 c0                \txor    %eax,%eax\n     ddc:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     de0:\t48 89 c7             \tmov    %rax,%rdi\n     de3:\te8 00 00 00 00       \tcallq  de8 <v9fs_do_chown+0x31>\n     de8:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     deb:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     dee:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     df1:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     df4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     df8:\t48 8b 80 98 14 50 00 \tmov    0x501498(%rax),%rax\n     dff:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n     e03:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e07:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     e0b:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     e0f:\t48 8d ba a0 14 50 00 \tlea    0x5014a0(%rdx),%rdi\n     e16:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     e1a:\t48 89 c6             \tmov    %rax,%rsi\n     e1d:\tff d1                \tcallq  *%rcx\n     e1f:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n     e23:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n     e2a:\t00 00 \n     e2c:\t74 05                \tje     e33 <v9fs_do_chown+0x7c>\n     e2e:\te8 00 00 00 00       \tcallq  e33 <v9fs_do_chown+0x7c>\n     e33:\tc9                   \tleaveq \n     e34:\tc3                   \tretq   ", "code_s": "__int64 __fastcall v9fs_do_chown(__int64 a1, __int64 a2, int a3, int a4) {\n  int <span class=\"supfact\">v7</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  cred_init((__int64)<span class=\"supfact\">v7</span>);\n  <span class=\"supfact\">v7</span>[Number] = a3;\n  <span class=\"supfact\">v7</span>[Number] = a4;\n  return (*(__int64(__fastcall **)(__int64, _QWORD, int *))(\n      *(_QWORD *)(a1 + Number) + Number L))(\n      a1 + Number, *(_QWORD *)(a2 + Number), <span class=\"supfact\">v7</span>);\n}", "code_t": "int __cdecl v9fs_do_chown(V9fsState_0 *s, V9fsString_0 *path, uid_t uid,\n                          gid_t gid) {\n  FsCred_0 <span class=\"supfact\">cred</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  cred_init(&<span class=\"supfact\">cred</span>);\n  <span class=\"supfact\">cred</span>.fc_uid = uid;\n  <span class=\"supfact\">cred</span>.fc_gid = gid;\n  return s->ops->chown(&s->ctx, path->data, &<span class=\"supfact\">cred</span>);\n}", "var": [{"name": "v7", "type": "struct FsCred_0 { uid_t fc_uid; gid_t fc_gid; mode_t fc_mode; PADDING (4); dev_t fc_rdev; }", "ref_name": "cred", "ref_type": "struct FsCred_0 { uid_t fc_uid; gid_t fc_gid; mode_t fc_mode; PADDING (4); dev_t fc_rdev; }"}], "body_in_train": true}, {"repo_owner": "mconf", "repo_name": "ffmpeg", "path": "mconf/ffmpeg/626467bebd94348d13ea7aaa1093fce991d54729cdaf22b35fd1afdeb9c0b701", "path_in_repo": "mconf/ffmpeg/libavformat/assdec.o", "objdump": "00000000000006e4 <read_seek2>:\n 6e4:\t48 83 ec 68          \tsub    $0x68,%rsp\n 6e8:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n 6ed:\t89 74 24 24          \tmov    %esi,0x24(%rsp)\n 6f1:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n 6f6:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n 6fb:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n 700:\t44 89 4c 24 20       \tmov    %r9d,0x20(%rsp)\n 705:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n 70a:\t48 8b 52 18          \tmov    0x18(%rdx),%rdx\n 70e:\t48 89 54 24 48       \tmov    %rdx,0x48(%rsp)\n 713:\t8b 54 24 20          \tmov    0x20(%rsp),%edx\n 717:\t83 e2 02             \tand    $0x2,%edx\n 71a:\t85 d2                \ttest   %edx,%edx\n 71c:\t74 0a                \tje     728 <read_seek2+0x44>\n 71e:\tb8 da ff ff ff       \tmov    $0xffffffda,%eax\n 723:\te9 cc 01 00 00       \tjmpq   8f4 <read_seek2+0x210>\n 728:\t8b 54 24 20          \tmov    0x20(%rsp),%edx\n 72c:\t83 e2 08             \tand    $0x8,%edx\n 72f:\t85 d2                \ttest   %edx,%edx\n 731:\t74 37                \tje     76a <read_seek2+0x86>\n 733:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n 739:\t78 11                \tjs     74c <read_seek2+0x68>\n 73b:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 740:\t8b 40 10             \tmov    0x10(%rax),%eax\n 743:\t89 c0                \tmov    %eax,%eax\n 745:\t48 39 44 24 10       \tcmp    %rax,0x10(%rsp)\n 74a:\t7c 0a                \tjl     756 <read_seek2+0x72>\n 74c:\tb8 de ff ff ff       \tmov    $0xffffffde,%eax\n 751:\te9 9e 01 00 00       \tjmpq   8f4 <read_seek2+0x210>\n 756:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 75b:\t89 c2                \tmov    %eax,%edx\n 75d:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 762:\t89 50 14             \tmov    %edx,0x14(%rax)\n 765:\te9 85 01 00 00       \tjmpq   8ef <read_seek2+0x20b>\n 76a:\tc7 44 24 58 ff ff ff \tmovl   $0xffffffff,0x58(%rsp)\n 771:\tff \n 772:\t48 b9 ff ff ff ff ff \tmovabs $0x7fffffffffffffff,%rcx\n 779:\tff ff 7f \n 77c:\t48 89 4c 24 50       \tmov    %rcx,0x50(%rsp)\n 781:\t83 7c 24 24 ff       \tcmpl   $0xffffffff,0x24(%rsp)\n 786:\t0f 85 a5 00 00 00    \tjne    831 <read_seek2+0x14d>\n 78c:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n 791:\t48 8b 52 30          \tmov    0x30(%rdx),%rdx\n 795:\t48 8b 12             \tmov    (%rdx),%rdx\n 798:\t48 8b 52 40          \tmov    0x40(%rdx),%rdx\n 79c:\t48 89 54 24 30       \tmov    %rdx,0x30(%rsp)\n 7a1:\t48 ba 00 00 00 00 ff \tmovabs $0xffffffff00000000,%rdx\n 7a8:\tff ff ff \n 7ab:\t48 21 d0             \tand    %rdx,%rax\n 7ae:\t48 83 c8 01          \tor     $0x1,%rax\n 7b2:\t89 c2                \tmov    %eax,%edx\n 7b4:\t48 b8 00 00 00 00 40 \tmovabs $0xf424000000000,%rax\n 7bb:\t42 0f 00 \n 7be:\t48 09 d0             \tor     %rdx,%rax\n 7c1:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n 7c6:\t48 8b 4c 24 10       \tmov    0x10(%rsp),%rcx\n 7cb:\t48 89 c6             \tmov    %rax,%rsi\n 7ce:\t48 89 cf             \tmov    %rcx,%rdi\n 7d1:\te8 00 00 00 00       \tcallq  7d6 <read_seek2+0xf2>\n 7d6:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n 7db:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n 7df:\t48 98                \tcltq   \n 7e1:\t48 69 d0 40 42 0f 00 \timul   $0xf4240,%rax,%rdx\n 7e8:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n 7ec:\t48 63 f0             \tmovslq %eax,%rsi\n 7ef:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 7f4:\tb9 03 00 00 00       \tmov    $0x3,%ecx\n 7f9:\t48 89 c7             \tmov    %rax,%rdi\n 7fc:\te8 00 00 00 00       \tcallq  801 <read_seek2+0x11d>\n 801:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n 806:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n 80a:\t48 98                \tcltq   \n 80c:\t48 69 d0 40 42 0f 00 \timul   $0xf4240,%rax,%rdx\n 813:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n 817:\t48 63 f0             \tmovslq %eax,%rsi\n 81a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 81f:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n 824:\t48 89 c7             \tmov    %rax,%rdi\n 827:\te8 00 00 00 00       \tcallq  82c <read_seek2+0x148>\n 82c:\t48 89 44 24 08       \tmov    %rax,0x8(%rsp)\n 831:\tc7 44 24 5c 00 00 00 \tmovl   $0x0,0x5c(%rsp)\n 838:\t00 \n 839:\te9 83 00 00 00       \tjmpq   8c1 <read_seek2+0x1dd>\n 83e:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 843:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 847:\t8b 54 24 5c          \tmov    0x5c(%rsp),%edx\n 84b:\t48 63 d2             \tmovslq %edx,%rdx\n 84e:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 852:\t48 01 d0             \tadd    %rdx,%rax\n 855:\t48 8b 00             \tmov    (%rax),%rax\n 858:\t48 89 c7             \tmov    %rax,%rdi\n 85b:\te8 60 f8 ff ff       \tcallq  c0 <get_pts>\n 860:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n 865:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n 86a:\t48 2b 44 24 10       \tsub    0x10(%rsp),%rax\n 86f:\t48 89 c2             \tmov    %rax,%rdx\n 872:\t48 89 d0             \tmov    %rdx,%rax\n 875:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n 879:\t48 31 c2             \txor    %rax,%rdx\n 87c:\t48 89 54 24 38       \tmov    %rdx,0x38(%rsp)\n 881:\t48 29 44 24 38       \tsub    %rax,0x38(%rsp)\n 886:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n 88b:\t48 3b 44 24 18       \tcmp    0x18(%rsp),%rax\n 890:\t7c 2a                \tjl     8bc <read_seek2+0x1d8>\n 892:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n 897:\t48 3b 44 24 08       \tcmp    0x8(%rsp),%rax\n 89c:\t7f 1e                \tjg     8bc <read_seek2+0x1d8>\n 89e:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 8a3:\t48 3b 44 24 50       \tcmp    0x50(%rsp),%rax\n 8a8:\t7d 12                \tjge    8bc <read_seek2+0x1d8>\n 8aa:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 8af:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n 8b4:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 8b8:\t89 44 24 58          \tmov    %eax,0x58(%rsp)\n 8bc:\t83 44 24 5c 01       \taddl   $0x1,0x5c(%rsp)\n 8c1:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 8c6:\t8b 50 10             \tmov    0x10(%rax),%edx\n 8c9:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 8cd:\t39 c2                \tcmp    %eax,%edx\n 8cf:\t0f 87 69 ff ff ff    \tja     83e <read_seek2+0x15a>\n 8d5:\t83 7c 24 58 00       \tcmpl   $0x0,0x58(%rsp)\n 8da:\t79 07                \tjns    8e3 <read_seek2+0x1ff>\n 8dc:\tb8 de ff ff ff       \tmov    $0xffffffde,%eax\n 8e1:\teb 11                \tjmp    8f4 <read_seek2+0x210>\n 8e3:\t8b 54 24 58          \tmov    0x58(%rsp),%edx\n 8e7:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 8ec:\t89 50 14             \tmov    %edx,0x14(%rax)\n 8ef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 8f4:\t48 83 c4 68          \tadd    $0x68,%rsp\n 8f8:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall read_seek2(__int64 a1, int a2, __int64 a3, __int64 a4,\n                              __int64 a5, char a6) {\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  signed __int64 <span class=\"supfact\">v11</span>;\n  signed __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v8</span> = a4;\n  <span class=\"supfact\">v13</span> = *(_QWORD *)(a1 + Number);\n  if ((a6 & Number) != Number)\n    return Number L;\n  if ((a6 & Number) != Number) {\n    if (a4 < Number || a4 >= *(unsigned int *)(<span class=\"supfact\">v13</span> + Number))\n      return Number L;\n    *(_DWORD *)(<span class=\"supfact\">v13</span> + Number) = a4;\n  } else {\n    <span class=\"supfact\">v15</span> = Number;\n    <span class=\"supfact\">v14</span> = Number;\n    if (a2 == Number) {\n      <span class=\"supfact\">v10</span> = *(_QWORD *)(**(_QWORD **)(a1 + Number) + Number L);\n      <span class=\"supfact\">v8</span> = av_rescale_q(a4, Number, <span class=\"supfact\">v10</span>);\n      a3 = av_rescale_rnd(a3, SHIDWORD(<span class=\"supfact\">v10</span>),\n                          Number L * (int)<span class=\"supfact\">v10</span>, Number L);\n      a5 = av_rescale_rnd(a5, SHIDWORD(<span class=\"supfact\">v10</span>),\n                          Number L * (int)<span class=\"supfact\">v10</span>, Number L);\n    }\n    for (<span class=\"supfact\">i</span> = Number; *(_DWORD *)(<span class=\"supfact\">v13</span> + Number) >\n                                     (unsigned int)<span class=\"supfact\">i</span>;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">v12</span> =\n          get_pts(*(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                              *(_QWORD *)(<span class=\"supfact\">v13</span> + Number)));\n      <span class=\"supfact\">v11</span> = abs64(<span class=\"supfact\">v12</span> - <span class=\"supfact\">v8</span>);\n      if (<span class=\"supfact\">v12</span> >= a3 && <span class=\"supfact\">v12</span> <= a5 &&\n          <span class=\"supfact\">v11</span> < <span class=\"supfact\">v14</span>) {\n        <span class=\"supfact\">v14</span> = <span class=\"supfact\">v11</span>;\n        <span class=\"supfact\">v15</span> = <span class=\"supfact\">i</span>;\n      }\n    }\n    if (<span class=\"supfact\">v15</span> < Number)\n      return Number L;\n    *(_DWORD *)(<span class=\"supfact\">v13</span> + Number) = <span class=\"supfact\">v15</span>;\n  }\n  return Number L;\n}", "code_t": "int __cdecl read_seek2(AVFormatContext_0 *s, int stream_index, int64_t min_ts,\n                       int64_t ts, int64_t max_ts, int flags) {\n  __int64 <span class=\"supfact\">tsa</span>;\n  AVRational_0 <span class=\"supfact\">time_base</span>;\n  int64_t <span class=\"supfact\">ts_diff</span>;\n  int64_t <span class=\"supfact\">pts</span>;\n  ASSContext_0 *<span class=\"supfact\">ass</span>;\n  int64_t <span class=\"supfact\">min_ts_diff</span>;\n  int <span class=\"supfact\">idx</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">tsa</span> = ts;\n  <span class=\"supfact\">ass</span> = (ASSContext_0 *)s->priv_data;\n  if ((flags & Number) != Number)\n    return Number;\n  if ((flags & Number) != Number) {\n    if (ts < Number || ts >= <span class=\"supfact\">ass</span>->event_count)\n      return Number;\n    <span class=\"supfact\">ass</span>->event_index = ts;\n  } else {\n    <span class=\"supfact\">idx</span> = Number;\n    <span class=\"supfact\">min_ts_diff</span> = Number;\n    if (stream_index == Number) {\n      <span class=\"supfact\">time_base</span> = (*s->streams)-><span class=\"supfact\">time_base</span>;\n      <span class=\"supfact\">tsa</span> =\n          ((__int64(__fastcall *)(_QWORD, _QWORD, _QWORD))av_rescale_q)(\n              ts, Number, <span class=\"supfact\">time_base</span>);\n      min_ts =\n          av_rescale_rnd(min_ts, <span class=\"supfact\">time_base</span>.den,\n                         Number L * <span class=\"supfact\">time_base</span>.num, Number L);\n      max_ts =\n          av_rescale_rnd(max_ts, <span class=\"supfact\">time_base</span>.den,\n                         Number L * <span class=\"supfact\">time_base</span>.num, Number L);\n    }\n    for (<span class=\"supfact\">i</span> = Number;\n         <span class=\"supfact\">ass</span>->event_count > <span class=\"supfact\">i</span>;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">pts</span> =\n          get_pts(<span class=\"supfact\">ass</span>->event[<span class=\"supfact\">i</span>]);\n      <span class=\"supfact\">ts_diff</span> =\n          abs64(<span class=\"supfact\">pts</span> - <span class=\"supfact\">tsa</span>);\n      if (<span class=\"supfact\">pts</span> >= min_ts && <span class=\"supfact\">pts</span> <= max_ts &&\n          <span class=\"supfact\">ts_diff</span> < <span class=\"supfact\">min_ts_diff</span>) {\n        <span class=\"supfact\">min_ts_diff</span> = <span class=\"supfact\">ts_diff</span>;\n        <span class=\"supfact\">idx</span> = <span class=\"supfact\">i</span>;\n      }\n    }\n    if (<span class=\"supfact\">idx</span> < Number)\n      return Number;\n    <span class=\"supfact\">ass</span>->event_index = <span class=\"supfact\">idx</span>;\n  }\n  return Number;\n}", "var": [{"name": "v10", "type": "int64_t", "ref_name": "time_base", "ref_type": "struct AVRational_0 { int num; int den; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7fc6defa16bc99f7600b943ce03c36e881a2bee185a0642a27c64ad0b2c25858", "path_in_repo": "XanClic/qemu//i386-softmmu/gdbstub.o", "objdump": "0000000000000754 <_nocheck__trace_gdbstub_hit_paused>:\n     754:\t55                   \tpush   %rbp\n     755:\t48 89 e5             \tmov    %rsp,%rbp\n     758:\t41 54                \tpush   %r12\n     75a:\t53                   \tpush   %rbx\n     75b:\t48 83 ec 20          \tsub    $0x20,%rsp\n     75f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     766:\t00 00 \n     768:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     76c:\t31 c0                \txor    %eax,%eax\n     76e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 774 <_nocheck__trace_gdbstub_hit_paused+0x20>\n     774:\t85 c0                \ttest   %eax,%eax\n     776:\t0f 95 c0             \tsetne  %al\n     779:\t0f b6 c0             \tmovzbl %al,%eax\n     77c:\t48 85 c0             \ttest   %rax,%rax\n     77f:\t74 57                \tje     7d8 <_nocheck__trace_gdbstub_hit_paused+0x84>\n     781:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 788 <_nocheck__trace_gdbstub_hit_paused+0x34>\n     788:\t66 85 c0             \ttest   %ax,%ax\n     78b:\t74 4b                \tje     7d8 <_nocheck__trace_gdbstub_hit_paused+0x84>\n     78d:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     792:\te8 c9 f8 ff ff       \tcallq  60 <qemu_loglevel_mask>\n     797:\t84 c0                \ttest   %al,%al\n     799:\t74 3d                \tje     7d8 <_nocheck__trace_gdbstub_hit_paused+0x84>\n     79b:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     79f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     7a4:\t48 89 c7             \tmov    %rax,%rdi\n     7a7:\te8 00 00 00 00       \tcallq  7ac <_nocheck__trace_gdbstub_hit_paused+0x58>\n     7ac:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7b0:\t49 89 c4             \tmov    %rax,%r12\n     7b3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     7b7:\t48 89 c3             \tmov    %rax,%rbx\n     7ba:\te8 00 00 00 00       \tcallq  7bf <_nocheck__trace_gdbstub_hit_paused+0x6b>\n     7bf:\t4c 89 e1             \tmov    %r12,%rcx\n     7c2:\t48 89 da             \tmov    %rbx,%rdx\n     7c5:\t89 c6                \tmov    %eax,%esi\n     7c7:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 7ce <_nocheck__trace_gdbstub_hit_paused+0x7a>\n     7ce:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     7d3:\te8 00 00 00 00       \tcallq  7d8 <_nocheck__trace_gdbstub_hit_paused+0x84>\n     7d8:\t90                   \tnop\n     7d9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7dd:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     7e4:\t00 00 \n     7e6:\t74 05                \tje     7ed <_nocheck__trace_gdbstub_hit_paused+0x99>\n     7e8:\te8 00 00 00 00       \tcallq  7ed <_nocheck__trace_gdbstub_hit_paused+0x99>\n     7ed:\t48 83 c4 20          \tadd    $0x20,%rsp\n     7f1:\t5b                   \tpop    %rbx\n     7f2:\t41 5c                \tpop    %r12\n     7f4:\t5d                   \tpop    %rbp\n     7f5:\tc3                   \tretq   ", "code_s": "unsigned __int64 nocheck__trace_gdbstub_hit_paused() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_HIT_PAUSED_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v0 = <span class=\"supfact\">tv</span>.tv_usec;\n    v1 = <span class=\"supfact\">tv</span>.tv_sec;\n    v2 = qemu_get_thread_id();\n    qemu_log(String, v2, v1, v0);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v5</span>;\n}", "code_t": "void __cdecl nocheck__trace_gdbstub_hit_paused() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_HIT_PAUSED_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v0 = <span class=\"supfact\">_now</span>.tv_usec;\n    v1 = <span class=\"supfact\">_now</span>.tv_sec;\n    v2 = qemu_get_thread_id();\n    qemu_log(String, v2, v1, v0);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "cqxcool88", "repo_name": "linux-30.81", "path": "cqxcool88/linux-30.81/11ab517146dd90ced6fd5ef94469014cf65d1d6579fef87934ea323b4859a1a3", "path_in_repo": "cqxcool88/linux-30.81/tools/perf/builtin-diff.o", "objdump": "0000000000000c63 <diff__process_sample_event>:\n     c63:\t55                   \tpush   %rbp\n     c64:\t48 89 e5             \tmov    %rsp,%rbp\n     c67:\t48 83 ec 60          \tsub    $0x60,%rsp\n     c6b:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     c6f:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     c73:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     c77:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n     c7b:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n     c7f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     c86:\t00 00 \n     c88:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     c8c:\t31 c0                \txor    %eax,%eax\n     c8e:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n     c92:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n     c96:\t48 8b 75 a8          \tmov    -0x58(%rbp),%rsi\n     c9a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     c9e:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     ca4:\t48 89 c7             \tmov    %rax,%rdi\n     ca7:\te8 00 00 00 00       \tcallq  cac <diff__process_sample_event+0x49>\n     cac:\t85 c0                \ttest   %eax,%eax\n     cae:\t79 23                \tjns    cd3 <diff__process_sample_event+0x70>\n     cb0:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     cb4:\t8b 00                \tmov    (%rax),%eax\n     cb6:\t89 c2                \tmov    %eax,%edx\n     cb8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     cbd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     cc2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     cc7:\te8 00 00 00 00       \tcallq  ccc <diff__process_sample_event+0x69>\n     ccc:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     cd1:\teb 76                \tjmp    d49 <diff__process_sample_event+0xe6>\n     cd3:\t0f b6 45 f1          \tmovzbl -0xf(%rbp),%eax\n     cd7:\t84 c0                \ttest   %al,%al\n     cd9:\t74 07                \tje     ce2 <diff__process_sample_event+0x7f>\n     cdb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ce0:\teb 67                \tjmp    d49 <diff__process_sample_event+0xe6>\n     ce2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     ce6:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n     cea:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     cee:\t48 8d 88 a0 00 00 00 \tlea    0xa0(%rax),%rcx\n     cf5:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     cf9:\t48 89 c6             \tmov    %rax,%rsi\n     cfc:\t48 89 cf             \tmov    %rcx,%rdi\n     cff:\te8 f9 fe ff ff       \tcallq  bfd <hists__add_entry>\n     d04:\t85 c0                \ttest   %eax,%eax\n     d06:\t74 1b                \tje     d23 <diff__process_sample_event+0xc0>\n     d08:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d0d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     d12:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d17:\te8 00 00 00 00       \tcallq  d1c <diff__process_sample_event+0xb9>\n     d1c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     d21:\teb 26                \tjmp    d49 <diff__process_sample_event+0xe6>\n     d23:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     d27:\t48 8b 90 18 01 00 00 \tmov    0x118(%rax),%rdx\n     d2e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     d32:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     d36:\t48 01 c2             \tadd    %rax,%rdx\n     d39:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     d3d:\t48 89 90 18 01 00 00 \tmov    %rdx,0x118(%rax)\n     d44:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d49:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n     d4d:\t64 48 33 3c 25 28 00 \txor    %fs:0x28,%rdi\n     d54:\t00 00 \n     d56:\t74 05                \tje     d5d <diff__process_sample_event+0xfa>\n     d58:\te8 00 00 00 00       \tcallq  d5d <diff__process_sample_event+0xfa>\n     d5d:\tc9                   \tleaveq \n     d5e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall diff__process_sample_event(__int64 a1, unsigned int *a2,\n                                              __int64 a3, __int64 a4,\n                                              __int64 a5) {\n  __int64 result;\n  char <span class=\"supfact\">v8</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if ((int)perf_event__preprocess_sample(a2, a5, <span class=\"supfact\">v8</span>, a3,\n                                         Number L) >= Number) {\n    if (<span class=\"supfact\">v8</span>[Number]) {\n      result = Number L;\n    } else if ((unsigned int)hists__add_entry(a4 + Number,\n                                              (__int64)<span class=\"supfact\">v8</span>,\n                                              *(_QWORD *)(a3 + Number))) {\n      eprintf(Number L, String);\n      result = Number;\n    } else {\n      *(_QWORD *)(a4 + Number) += *(_QWORD *)(a3 + Number);\n      result = Number L;\n    }\n  } else {\n    eprintf(Number L, String, *a2);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl diff__process_sample_event(perf_tool *tool, perf_event *event,\n                                       perf_sample *sample, perf_evsel *evsel,\n                                       machine *machine) {\n  int result;\n  addr_location <span class=\"supfact\">al_0</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if ((int)perf_event__preprocess_sample(event, machine, &<span class=\"supfact\">al_0</span>,\n                                         sample, Number L) >= Number) {\n    if (<span class=\"supfact\">al_0</span>.filtered) {\n      result = Number;\n    } else if (hists__add_entry(&evsel->hists, &<span class=\"supfact\">al_0</span>,\n                                sample->period)) {\n      eprintf(Number L, String);\n      result = Number;\n    } else {\n      evsel->hists.stats.total_period += sample->period;\n      result = Number;\n    }\n  } else {\n    eprintf(Number L, String, event->header.type);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v8", "type": "struct addr_location { thread * thread; map * map; symbol * sym; u64 addr; char level; bool filtered; u8 cpumode; PADDING (1); s32 cpu; }", "ref_name": "al_0", "ref_type": "struct addr_location { thread * thread; map * map; symbol * sym; u64 addr; char level; bool filtered; u8 cpumode; PADDING (1); s32 cpu; }"}], "body_in_train": false}, {"repo_owner": "moepda", "repo_name": "android_kernel_moto_shamu-oreo-moe", "path": "moepda/android_kernel_moto_shamu-oreo-moe/07932c273cf55e29111eb5ccfc3b3eb843a6313b00341dc2477b1b39626399ed", "path_in_repo": "moepda/android_kernel_moto_shamu-oreo-moe/tools/perf/util/trace-event-info.o", "objdump": "000000000000045d <read_header_files>:\n     45d:\t55                   \tpush   %rbp\n     45e:\t48 89 e5             \tmov    %rsp,%rbp\n     461:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n     468:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     46f:\t00 00 \n     471:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     475:\t31 c0                \txor    %eax,%eax\n     477:\tc7 85 54 ff ff ff fb \tmovl   $0xfffffffb,-0xac(%rbp)\n     47e:\tff ff ff \n     481:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     486:\te8 86 fc ff ff       \tcallq  111 <get_tracing_file>\n     48b:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     492:\t48 83 bd 58 ff ff ff \tcmpq   $0x0,-0xa8(%rbp)\n     499:\t00 \n     49a:\t75 1e                \tjne    4ba <read_header_files+0x5d>\n     49c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     4a1:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     4a6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     4ab:\te8 00 00 00 00       \tcallq  4b0 <read_header_files+0x53>\n     4b0:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     4b5:\te9 b1 01 00 00       \tjmpq   66b <read_header_files+0x20e>\n     4ba:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n     4c1:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     4c8:\t48 89 d6             \tmov    %rdx,%rsi\n     4cb:\t48 89 c7             \tmov    %rax,%rdi\n     4ce:\te8 00 00 00 00       \tcallq  4d3 <read_header_files+0x76>\n     4d3:\t85 c0                \ttest   %eax,%eax\n     4d5:\t79 23                \tjns    4fa <read_header_files+0x9d>\n     4d7:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     4de:\t48 89 c2             \tmov    %rax,%rdx\n     4e1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     4e6:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     4eb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     4f0:\te8 00 00 00 00       \tcallq  4f5 <read_header_files+0x98>\n     4f5:\te9 5c 01 00 00       \tjmpq   656 <read_header_files+0x1f9>\n     4fa:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 500 <read_header_files+0xa3>\n     500:\tba 0c 00 00 00       \tmov    $0xc,%edx\n     505:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     50a:\t89 c7                \tmov    %eax,%edi\n     50c:\te8 00 00 00 00       \tcallq  511 <read_header_files+0xb4>\n     511:\t48 83 f8 0c          \tcmp    $0xc,%rax\n     515:\t74 19                \tje     530 <read_header_files+0xd3>\n     517:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     51c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     521:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     526:\te8 00 00 00 00       \tcallq  52b <read_header_files+0xce>\n     52b:\te9 26 01 00 00       \tjmpq   656 <read_header_files+0x1f9>\n     530:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     537:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     53c:\t48 89 c7             \tmov    %rax,%rdi\n     53f:\te8 05 fd ff ff       \tcallq  249 <record_file>\n     544:\t85 c0                \ttest   %eax,%eax\n     546:\t79 19                \tjns    561 <read_header_files+0x104>\n     548:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     54d:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     552:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     557:\te8 00 00 00 00       \tcallq  55c <read_header_files+0xff>\n     55c:\te9 f5 00 00 00       \tjmpq   656 <read_header_files+0x1f9>\n     561:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     568:\t48 89 c7             \tmov    %rax,%rdi\n     56b:\te8 4d fc ff ff       \tcallq  1bd <put_tracing_file>\n     570:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     575:\te8 97 fb ff ff       \tcallq  111 <get_tracing_file>\n     57a:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     581:\t48 83 bd 58 ff ff ff \tcmpq   $0x0,-0xa8(%rbp)\n     588:\t00 \n     589:\t75 23                \tjne    5ae <read_header_files+0x151>\n     58b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     590:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     595:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     59a:\te8 00 00 00 00       \tcallq  59f <read_header_files+0x142>\n     59f:\tc7 85 54 ff ff ff f4 \tmovl   $0xfffffff4,-0xac(%rbp)\n     5a6:\tff ff ff \n     5a9:\te9 a8 00 00 00       \tjmpq   656 <read_header_files+0x1f9>\n     5ae:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n     5b5:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     5bc:\t48 89 d6             \tmov    %rdx,%rsi\n     5bf:\t48 89 c7             \tmov    %rax,%rdi\n     5c2:\te8 00 00 00 00       \tcallq  5c7 <read_header_files+0x16a>\n     5c7:\t85 c0                \ttest   %eax,%eax\n     5c9:\t79 20                \tjns    5eb <read_header_files+0x18e>\n     5cb:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     5d2:\t48 89 c2             \tmov    %rax,%rdx\n     5d5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     5da:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     5df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5e4:\te8 00 00 00 00       \tcallq  5e9 <read_header_files+0x18c>\n     5e9:\teb 6b                \tjmp    656 <read_header_files+0x1f9>\n     5eb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 5f1 <read_header_files+0x194>\n     5f1:\tba 0d 00 00 00       \tmov    $0xd,%edx\n     5f6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     5fb:\t89 c7                \tmov    %eax,%edi\n     5fd:\te8 00 00 00 00       \tcallq  602 <read_header_files+0x1a5>\n     602:\t48 83 f8 0d          \tcmp    $0xd,%rax\n     606:\t74 16                \tje     61e <read_header_files+0x1c1>\n     608:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     60d:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     612:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     617:\te8 00 00 00 00       \tcallq  61c <read_header_files+0x1bf>\n     61c:\teb 38                \tjmp    656 <read_header_files+0x1f9>\n     61e:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     625:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     62a:\t48 89 c7             \tmov    %rax,%rdi\n     62d:\te8 17 fc ff ff       \tcallq  249 <record_file>\n     632:\t85 c0                \ttest   %eax,%eax\n     634:\t79 16                \tjns    64c <read_header_files+0x1ef>\n     636:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     63b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     640:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     645:\te8 00 00 00 00       \tcallq  64a <read_header_files+0x1ed>\n     64a:\teb 0a                \tjmp    656 <read_header_files+0x1f9>\n     64c:\tc7 85 54 ff ff ff 00 \tmovl   $0x0,-0xac(%rbp)\n     653:\t00 00 00 \n     656:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     65d:\t48 89 c7             \tmov    %rax,%rdi\n     660:\te8 58 fb ff ff       \tcallq  1bd <put_tracing_file>\n     665:\t8b 85 54 ff ff ff    \tmov    -0xac(%rbp),%eax\n     66b:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     66f:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     676:\t00 00 \n     678:\t74 05                \tje     67f <read_header_files+0x222>\n     67a:\te8 00 00 00 00       \tcallq  67f <read_header_files+0x222>\n     67f:\tc9                   \tleaveq \n     680:\tc3                   \tretq   ", "code_s": "__int64 read_header_files() {\n  unsigned int <span class=\"supfact\">v1</span>;\n  char *<span class=\"supfact\">file</span>;\n  struct stat64 <span class=\"supfact\">v3</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  <span class=\"supfact\">v1</span> = Number;\n  <span class=\"supfact\">file</span> = get_tracing_file(String);\n  if (!<span class=\"supfact\">file</span>) {\n    eprintf(Number L, String);\n    return Number L;\n  }\n  if (stat64(<span class=\"supfact\">file</span>, &<span class=\"supfact\">v3</span>) >= Number) {\n    if (write(output_fd, String, Number) != Number) {\n      eprintf(Number L, String);\n      goto LABEL_17;\n    }\n    if ((int)record_file(<span class=\"supfact\">file</span>, Number) < Number) {\n      eprintf(Number L, String);\n      goto LABEL_17;\n    }\n    put_tracing_file(<span class=\"supfact\">file</span>);\n    <span class=\"supfact\">file</span> = get_tracing_file(String);\n    if (!<span class=\"supfact\">file</span>) {\n      eprintf(Number L, String);\n      <span class=\"supfact\">v1</span> = Number;\n      goto LABEL_17;\n    }\n    if (stat64(<span class=\"supfact\">file</span>, &<span class=\"supfact\">v3</span>) >= Number) {\n      if (write(output_fd, String, Number) == Number) {\n        if ((int)record_file(<span class=\"supfact\">file</span>, Number) >= Number)\n          <span class=\"supfact\">v1</span> = Number;\n        else\n          eprintf(Number L, String);\n      } else {\n        eprintf(Number L, String);\n      }\n      goto LABEL_17;\n    }\n  }\n  eprintf(Number L, String, <span class=\"supfact\">file</span>);\nLABEL_17:\n  put_tracing_file(<span class=\"supfact\">file</span>);\n  return <span class=\"supfact\">v1</span>;\n}", "code_t": "int __cdecl read_header_files() {\n  int <span class=\"supfact\">err</span>;\n  char *<span class=\"supfact\">path</span>;\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  <span class=\"supfact\">err</span> = Number;\n  <span class=\"supfact\">path</span> = get_tracing_file(String);\n  if (!<span class=\"supfact\">path</span>) {\n    eprintf(Number L, String);\n    return Number;\n  }\n  if (stat64(<span class=\"supfact\">path</span>, (struct stat64 *)&<span class=\"supfact\">st</span>) >=\n      Number) {\n    if (write(output_fd, String, Number) != Number) {\n      eprintf(Number L, String);\n      goto out;\n    }\n    if (record_file(<span class=\"supfact\">path</span>, Number L) < Number) {\n      eprintf(Number L, String);\n      goto out;\n    }\n    put_tracing_file(<span class=\"supfact\">path</span>);\n    <span class=\"supfact\">path</span> = get_tracing_file(String);\n    if (!<span class=\"supfact\">path</span>) {\n      eprintf(Number L, String);\n      <span class=\"supfact\">err</span> = Number;\n      goto out;\n    }\n    if (stat64(<span class=\"supfact\">path</span>, (struct stat64 *)&<span class=\"supfact\">st</span>) >=\n        Number) {\n      if (write(output_fd, String, Number) == Number) {\n        if (record_file(<span class=\"supfact\">path</span>, Number L) >= Number)\n          <span class=\"supfact\">err</span> = Number;\n        else\n          eprintf(Number L, String);\n      } else {\n        eprintf(Number L, String);\n      }\n      goto out;\n    }\n  }\n  eprintf(Number L, String, <span class=\"supfact\">path</span>);\nout:\n  put_tracing_file(<span class=\"supfact\">path</span>);\n  return <span class=\"supfact\">err</span>;\n}", "var": [{"name": "v3", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/eddf4c128d81974d0a44cef786539de6088e3397414c265ffb89dc1463abb496", "path_in_repo": "ftnapps/pkg-sbbs/src/sbbs3/syncview/gcc.linux.exe.debug/syncview", "objdump": "000000000040abe3 <ciolib_getmouse>:\n  40abe3:\t55                   \tpush   %rbp\n  40abe4:\t48 89 e5             \tmov    %rsp,%rbp\n  40abe7:\t48 83 ec 40          \tsub    $0x40,%rsp\n  40abeb:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  40abef:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40abf6:\teb 79                \tjmp    40ac71 <ciolib_getmouse+0x8e>\n  40abf8:\tc7 45 ec 01 00 00 00 \tmovl   $0x1,-0x14(%rbp)\n  40abff:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40ac02:\t48 63 d0             \tmovslq %eax,%rdx\n  40ac05:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  40ac0c:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  40ac10:\tc1 fa 06             \tsar    $0x6,%edx\n  40ac13:\tc1 f8 1f             \tsar    $0x1f,%eax\n  40ac16:\t29 c2                \tsub    %eax,%edx\n  40ac18:\t89 d0                \tmov    %edx,%eax\n  40ac1a:\t48 98                \tcltq   \n  40ac1c:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  40ac20:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40ac23:\t48 63 d0             \tmovslq %eax,%rdx\n  40ac26:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  40ac2d:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  40ac31:\t89 d1                \tmov    %edx,%ecx\n  40ac33:\tc1 f9 06             \tsar    $0x6,%ecx\n  40ac36:\t99                   \tcltd   \n  40ac37:\t29 d1                \tsub    %edx,%ecx\n  40ac39:\t89 ca                \tmov    %ecx,%edx\n  40ac3b:\t69 d2 e8 03 00 00    \timul   $0x3e8,%edx,%edx\n  40ac41:\t29 d0                \tsub    %edx,%eax\n  40ac43:\t89 c2                \tmov    %eax,%edx\n  40ac45:\t69 c2 e8 03 00 00    \timul   $0x3e8,%edx,%eax\n  40ac4b:\t48 98                \tcltq   \n  40ac4d:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  40ac51:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  40ac55:\t49 89 c0             \tmov    %rax,%r8\n  40ac58:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  40ac5d:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40ac62:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40ac67:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40ac6c:\te8 bf 84 ff ff       \tcallq  403130 <select@plt>\n  40ac71:\t8b 05 2d 37 05 00    \tmov    0x5372d(%rip),%eax        # 45e3a4 <ciolib_mouse_initialized>\n  40ac77:\t85 c0                \ttest   %eax,%eax\n  40ac79:\t0f 84 79 ff ff ff    \tje     40abf8 <ciolib_getmouse+0x15>\n  40ac7f:\tbf 20 16 46 00       \tmov    $0x461620,%edi\n  40ac84:\te8 a1 9f 00 00       \tcallq  414c2a <listCountNodes>\n  40ac89:\t48 85 c0             \ttest   %rax,%rax\n  40ac8c:\t0f 84 97 00 00 00    \tje     40ad29 <ciolib_getmouse+0x146>\n  40ac92:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40ac97:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40ac9c:\tbf 20 16 46 00       \tmov    $0x461620,%edi\n  40aca1:\te8 6d ad 00 00       \tcallq  415a13 <listRemoveNode>\n  40aca6:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40acaa:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  40acaf:\t75 0a                \tjne    40acbb <ciolib_getmouse+0xd8>\n  40acb1:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40acb6:\te9 8e 00 00 00       \tjmpq   40ad49 <ciolib_getmouse+0x166>\n  40acbb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40acbf:\t8b 10                \tmov    (%rax),%edx\n  40acc1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40acc5:\t89 10                \tmov    %edx,(%rax)\n  40acc7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40accb:\t8b 50 04             \tmov    0x4(%rax),%edx\n  40acce:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40acd2:\t89 50 04             \tmov    %edx,0x4(%rax)\n  40acd5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40acd9:\t8b 50 08             \tmov    0x8(%rax),%edx\n  40acdc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40ace0:\t89 50 08             \tmov    %edx,0x8(%rax)\n  40ace3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ace7:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  40acea:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40acee:\t89 50 0c             \tmov    %edx,0xc(%rax)\n  40acf1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40acf5:\t8b 50 10             \tmov    0x10(%rax),%edx\n  40acf8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40acfc:\t89 50 10             \tmov    %edx,0x10(%rax)\n  40acff:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ad03:\t8b 50 14             \tmov    0x14(%rax),%edx\n  40ad06:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40ad0a:\t89 50 14             \tmov    %edx,0x14(%rax)\n  40ad0d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ad11:\t8b 50 18             \tmov    0x18(%rax),%edx\n  40ad14:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40ad18:\t89 50 18             \tmov    %edx,0x18(%rax)\n  40ad1b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ad1f:\t48 89 c7             \tmov    %rax,%rdi\n  40ad22:\te8 49 85 ff ff       \tcallq  403270 <free@plt>\n  40ad27:\teb 1d                \tjmp    40ad46 <ciolib_getmouse+0x163>\n  40ad29:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40ad2d:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n  40ad32:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40ad37:\t48 89 c7             \tmov    %rax,%rdi\n  40ad3a:\te8 41 83 ff ff       \tcallq  403080 <memset@plt>\n  40ad3f:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n  40ad46:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40ad49:\tc9                   \tleaveq \n  40ad4a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ciolib_getmouse(_DWORD *a1) {\n  struct timeval <span class=\"supfact\">timeout</span>;\n  int <span class=\"supfact\">v3</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  unsigned int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = Number;\n  while (!ciolib_mouse_initialized) {\n    <span class=\"supfact\">v3</span> = Number;\n    <span class=\"supfact\">timeout</span>.tv_sec = Number L;\n    <span class=\"supfact\">timeout</span>.tv_usec = Number L;\n    select(Number, Number L, Number L, Number L, &<span class=\"supfact\">timeout</span>);\n  }\n  if (listCountNodes(&unk_461620)) {\n    <span class=\"supfact\">ptr</span> =\n        (void *)listRemoveNode(&unk_461620, Number L, Number L);\n    if (!<span class=\"supfact\">ptr</span>)\n      return Number;\n    *a1 = *(_DWORD *)<span class=\"supfact\">ptr</span>;\n    a1[Number] = *((_DWORD *)<span class=\"supfact\">ptr</span> + Number);\n    a1[Number] = *((_DWORD *)<span class=\"supfact\">ptr</span> + Number);\n    a1[Number] = *((_DWORD *)<span class=\"supfact\">ptr</span> + Number);\n    a1[Number] = *((_DWORD *)<span class=\"supfact\">ptr</span> + Number);\n    a1[Number] = *((_DWORD *)<span class=\"supfact\">ptr</span> + Number);\n    a1[Number] = *((_DWORD *)<span class=\"supfact\">ptr</span> + Number);\n    free(<span class=\"supfact\">ptr</span>);\n  } else {\n    memset(a1, Number, Number);\n    <span class=\"supfact\">v5</span> = Number;\n  }\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "int __cdecl ciolib_getmouse(mouse_event *mevent) {\n  timeval <span class=\"supfact\">tv</span>;\n  int <span class=\"supfact\">sleep_msecs</span>;\n  out_mouse_event *<span class=\"supfact\">out</span>;\n  int <span class=\"supfact\">retval</span>;\n  <span class=\"supfact\">retval</span> = Number;\n  while (!ciolib_mouse_initialized) {\n    <span class=\"supfact\">sleep_msecs</span> = Number;\n    <span class=\"supfact\">tv</span>.tv_sec = Number L;\n    <span class=\"supfact\">tv</span>.tv_usec = Number L;\n    select(Number, Number L, Number L, Number L, &<span class=\"supfact\">tv</span>);\n  }\n  if (listCountNodes(&state.output)) {\n    <span class=\"supfact\">out</span> =\n        (out_mouse_event *)listRemoveNode(&state.output, Number L, Number);\n    if (!<span class=\"supfact\">out</span>)\n      return Number;\n    mevent->event = <span class=\"supfact\">out</span>->event;\n    mevent->bstate = <span class=\"supfact\">out</span>->bstate;\n    mevent->kbsm = <span class=\"supfact\">out</span>->kbsm;\n    mevent->startx = <span class=\"supfact\">out</span>->startx;\n    mevent->starty = <span class=\"supfact\">out</span>->starty;\n    mevent->endx = <span class=\"supfact\">out</span>->endx;\n    mevent->endy = <span class=\"supfact\">out</span>->endy;\n    free(<span class=\"supfact\">out</span>);\n  } else {\n    memset(mevent, Number, sizeof(mouse_event));\n    <span class=\"supfact\">retval</span> = Number;\n  }\n  return <span class=\"supfact\">retval</span>;\n}", "var": [{"name": "timeout", "type": "__int64[2]", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "BillZPage", "repo_name": "linux-2.6.29", "path": "BillZPage/linux-2.6.29/1b93d1288b987f3530407e824fd2c5b2c11a0fc6fd67a2fa19a44fbd9593f822", "path_in_repo": "BillZPage/linux-2.6.29//scripts/kconfig/conf", "objdump": "0000000000408b13 <conf_get_default_confname>:\n  408b13:\t48 81 ec a8 00 00 00 \tsub    $0xa8,%rsp\n  408b1a:\tbf d0 4a 41 00       \tmov    $0x414ad0,%edi\n  408b1f:\te8 83 fe ff ff       \tcallq  4089a7 <conf_expand_value>\n  408b24:\t48 89 84 24 98 00 00 \tmov    %rax,0x98(%rsp)\n  408b2b:\t00 \n  408b2c:\tbf 6f 49 41 00       \tmov    $0x41496f,%edi\n  408b31:\te8 fa 94 ff ff       \tcallq  402030 <getenv@plt>\n  408b36:\t48 89 84 24 90 00 00 \tmov    %rax,0x90(%rsp)\n  408b3d:\t00 \n  408b3e:\t48 83 bc 24 90 00 00 \tcmpq   $0x0,0x90(%rsp)\n  408b45:\t00 00 \n  408b47:\t74 45                \tje     408b8e <conf_get_default_confname+0x7b>\n  408b49:\t48 8b 94 24 98 00 00 \tmov    0x98(%rsp),%rdx\n  408b50:\t00 \n  408b51:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n  408b58:\t00 \n  408b59:\t48 89 d1             \tmov    %rdx,%rcx\n  408b5c:\t48 89 c2             \tmov    %rax,%rdx\n  408b5f:\tbe 77 49 41 00       \tmov    $0x414977,%esi\n  408b64:\tbf 20 9d 41 00       \tmov    $0x419d20,%edi\n  408b69:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  408b6e:\te8 6d 98 ff ff       \tcallq  4023e0 <sprintf@plt>\n  408b73:\t48 89 e0             \tmov    %rsp,%rax\n  408b76:\t48 89 c6             \tmov    %rax,%rsi\n  408b79:\tbf 20 9d 41 00       \tmov    $0x419d20,%edi\n  408b7e:\te8 9d 90 00 00       \tcallq  411c20 <__stat>\n  408b83:\t85 c0                \ttest   %eax,%eax\n  408b85:\t75 07                \tjne    408b8e <conf_get_default_confname+0x7b>\n  408b87:\tb8 20 9d 41 00       \tmov    $0x419d20,%eax\n  408b8c:\teb 08                \tjmp    408b96 <conf_get_default_confname+0x83>\n  408b8e:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n  408b95:\t00 \n  408b96:\t48 81 c4 a8 00 00 00 \tadd    $0xa8,%rsp\n  408b9d:\tc3                   \tretq   ", "code_s": "char *conf_get_default_confname() {\n  char *result;\n  struct stat <span class=\"supfact\">v1</span>;\n  char *<span class=\"supfact\">v2</span>;\n  char *<span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = conf_expand_value(String);\n  <span class=\"supfact\">v2</span> = getenv(String);\n  if (!<span class=\"supfact\">v2</span> ||\n      (sprintf(fullname_5263, String, <span class=\"supfact\">v2</span>, <span class=\"supfact\">v3</span>),\n       (unsigned int)stat(fullname_5263, &<span class=\"supfact\">v1</span>)))\n    result = <span class=\"supfact\">v3</span>;\n  else\n    result = fullname_5263;\n  return result;\n}", "code_t": "char *__cdecl conf_get_default_confname() {\n  char *result;\n  stat <span class=\"supfact\">buf</span>;\n  char *<span class=\"supfact\">env</span>;\n  char *<span class=\"supfact\">name</span>;\n  <span class=\"supfact\">name</span> = conf_expand_value(String);\n  <span class=\"supfact\">env</span> = getenv(String);\n  if (!<span class=\"supfact\">env</span> ||\n      (sprintf(fullname_5263, String, <span class=\"supfact\">env</span>,\n               <span class=\"supfact\">name</span>),\n       (unsigned int)stat_0(fullname_5263, &<span class=\"supfact\">buf</span>)))\n    result = <span class=\"supfact\">name</span>;\n  else\n    result = fullname_5263;\n  return result;\n}", "var": [{"name": "v1", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "buf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "maxpmaxp", "repo_name": "ssvpn-macos", "path": "maxpmaxp/ssvpn-macos/75fad0c6c3a6d0443b89d8528e8ae4a9eff5d286a5513b078f7c2f19a20a9eee", "path_in_repo": "maxpmaxp/ssvpn-macos/tunnelblick/third_party/openssl-1.0.1c/demos/maurice/example4", "objdump": "0000000000406190 <CRYPTO_is_mem_check_on>:\n  406190:\t55                   \tpush   %rbp\n  406191:\t48 89 e5             \tmov    %rsp,%rbp\n  406194:\t48 83 ec 20          \tsub    $0x20,%rsp\n  406198:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40619f:\t8b 05 9b 31 03 00    \tmov    0x3319b(%rip),%eax        # 439340 <mh_mode>\n  4061a5:\t83 e0 01             \tand    $0x1,%eax\n  4061a8:\t85 c0                \ttest   %eax,%eax\n  4061aa:\t74 6f                \tje     40621b <CRYPTO_is_mem_check_on+0x8b>\n  4061ac:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4061b0:\t48 89 c7             \tmov    %rax,%rdi\n  4061b3:\te8 76 c4 ff ff       \tcallq  40262e <CRYPTO_THREADID_current>\n  4061b8:\tb9 26 01 00 00       \tmov    $0x126,%ecx\n  4061bd:\tba 10 ea 41 00       \tmov    $0x41ea10,%edx\n  4061c2:\tbe 14 00 00 00       \tmov    $0x14,%esi\n  4061c7:\tbf 05 00 00 00       \tmov    $0x5,%edi\n  4061cc:\te8 89 c5 ff ff       \tcallq  40275a <CRYPTO_lock>\n  4061d1:\t8b 05 69 31 03 00    \tmov    0x33169(%rip),%eax        # 439340 <mh_mode>\n  4061d7:\t83 e0 02             \tand    $0x2,%eax\n  4061da:\t85 c0                \ttest   %eax,%eax\n  4061dc:\t75 15                \tjne    4061f3 <CRYPTO_is_mem_check_on+0x63>\n  4061de:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4061e2:\t48 89 c6             \tmov    %rax,%rsi\n  4061e5:\tbf 70 93 43 00       \tmov    $0x439370,%edi\n  4061ea:\te8 ab c4 ff ff       \tcallq  40269a <CRYPTO_THREADID_cmp>\n  4061ef:\t85 c0                \ttest   %eax,%eax\n  4061f1:\t74 07                \tje     4061fa <CRYPTO_is_mem_check_on+0x6a>\n  4061f3:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4061f8:\teb 05                \tjmp    4061ff <CRYPTO_is_mem_check_on+0x6f>\n  4061fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4061ff:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  406202:\tb9 2b 01 00 00       \tmov    $0x12b,%ecx\n  406207:\tba 10 ea 41 00       \tmov    $0x41ea10,%edx\n  40620c:\tbe 14 00 00 00       \tmov    $0x14,%esi\n  406211:\tbf 06 00 00 00       \tmov    $0x6,%edi\n  406216:\te8 3f c5 ff ff       \tcallq  40275a <CRYPTO_lock>\n  40621b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40621e:\tc9                   \tleaveq \n  40621f:\tc3                   \tretq   ", "code_s": "__int64 CRYPTO_is_mem_check_on() {\n  _BOOL4 v0;\n  _QWORD <span class=\"supfact\">v2</span>[Number];\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  if ((mh_mode & Number) != Number) {\n    CRYPTO_THREADID_current(<span class=\"supfact\">v2</span>);\n    CRYPTO_lock(Number, Number, (__int64)String, Number);\n    v0 = (mh_mode & Number) != Number ||\n         CRYPTO_THREADID_cmp(&disabling_threadid, <span class=\"supfact\">v2</span>);\n    <span class=\"supfact\">v3</span> = v0;\n    CRYPTO_lock(Number, Number, (__int64)String, Number);\n  }\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "int __cdecl CRYPTO_is_mem_check_on() {\n  int v0;\n  CRYPTO_THREADID <span class=\"supfact\">cur</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = Number;\n  if ((mh_mode & Number) != Number) {\n    CRYPTO_THREADID_current(&<span class=\"supfact\">cur</span>);\n    CRYPTO_lock(Number, Number, String, Number);\n    v0 = (mh_mode & Number) != Number ||\n         CRYPTO_THREADID_cmp(&disabling_threadid, &<span class=\"supfact\">cur</span>);\n    <span class=\"supfact\">ret</span> = v0;\n    CRYPTO_lock(Number, Number, String, Number);\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v2", "type": "struct CRYPTO_THREADID { void * ptr; unsigned __int64 val; }", "ref_name": "cur", "ref_type": "struct CRYPTO_THREADID { void * ptr; unsigned __int64 val; }"}], "body_in_train": true}, {"repo_owner": "romankap", "repo_name": "Using-dlib", "path": "romankap/Using-dlib/27b8fa23c29e86eb66ee5138478791235279a4ffd6f65a685ba18d4db10da91b", "path_in_repo": "romankap/Using-dlib/Lot_w_dlib/dlib-18.10/dlib/test/cca.o", "objdump": "0000000000000000 <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   c:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  13:\t00 \n  14:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  1b:\t00 \n  1c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  20:\t48 89 c7             \tmov    %rax,%rdi\n  23:\te8 00 00 00 00       \tcallq  28 <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0x28>\n  28:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  2c:\t0f 9c c0             \tsetl   %al\n  2f:\t84 c0                \ttest   %al,%al\n  31:\t0f 84 87 00 00 00    \tje     be <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0xbe>\n  37:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  3b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  3f:\t48 89 d6             \tmov    %rdx,%rsi\n  42:\t48 89 c7             \tmov    %rax,%rdi\n  45:\te8 00 00 00 00       \tcallq  4a <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0x4a>\n  4a:\t48 89 c7             \tmov    %rax,%rdi\n  4d:\te8 00 00 00 00       \tcallq  52 <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0x52>\n  52:\t48 85 c0             \ttest   %rax,%rax\n  55:\t0f 95 c0             \tsetne  %al\n  58:\t84 c0                \ttest   %al,%al\n  5a:\t74 58                \tje     b4 <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0xb4>\n  5c:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  60:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  64:\t48 89 d6             \tmov    %rdx,%rsi\n  67:\t48 89 c7             \tmov    %rax,%rdi\n  6a:\te8 00 00 00 00       \tcallq  6f <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0x6f>\n  6f:\t48 89 c7             \tmov    %rax,%rdi\n  72:\te8 00 00 00 00       \tcallq  77 <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0x77>\n  77:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  7b:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  7f:\t48 89 c7             \tmov    %rax,%rdi\n  82:\te8 00 00 00 00       \tcallq  87 <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0x87>\n  87:\t48 89 c7             \tmov    %rax,%rdi\n  8a:\te8 00 00 00 00       \tcallq  8f <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0x8f>\n  8f:\t48 8b 00             \tmov    (%rax),%rax\n  92:\t48 83 c0 01          \tadd    $0x1,%rax\n  96:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  9a:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n  9e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  a2:\t48 89 d6             \tmov    %rdx,%rsi\n  a5:\t48 89 c7             \tmov    %rax,%rdi\n  a8:\te8 00 00 00 00       \tcallq  ad <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0xad>\n  ad:\t48 8b 00             \tmov    (%rax),%rax\n  b0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  b4:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  b9:\te9 5e ff ff ff       \tjmpq   1c <_ZN4dlib4impl18max_index_plus_oneINS_9matrix_opINS_18op_std_vect_to_matISt6vectorISt3mapImdSt4lessImESaISt4pairIKmdEEESaISC_EEEEEEEEN5boost11enable_if_cIXaantsrNS_23is_built_in_scalar_typeINT_4typeEEE5valuesrNS_7is_pairINSL_10value_typeEEE5valueEmE4typeERKSK_+0x1c>\n  be:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  c2:\tc9                   \tleaveq \n  c3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dlib impl max_index_plus_one<dlib matrix_op<\n    dlib op_std_vect_to_mat<std vector<std map<unsigned long, double>>>>>(\n    __int64 a1) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  _QWORD *v4;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v6</span> = Number L;\n  for (<span class=\"supfact\">i</span> = Number L;; ++<span class=\"supfact\">i</span>) {\n    v1 = dlib matrix_exp<dlib matrix_op<\n        dlib op_std_vect_to_mat<std vector<std map<unsigned long, double>>>>>\n        size(a1);\n    if (<span class=\"supfact\">i</span> >= v1)\n      break;\n    v2 = dlib matrix_op<\n        dlib op_std_vect_to_mat<std vector<std map<unsigned long, double>>>>\n    operator()(a1, <span class=\"supfact\">i</span>);\n    if (std map<unsigned long, double> size(v2)) {\n      v3 = dlib matrix_op<\n          dlib op_std_vect_to_mat<std vector<std map<unsigned long, double>>>>\n      operator()(a1, <span class=\"supfact\">i</span>);\n      <span class=\"supfact\">v8</span> = std map<unsigned long, double> end(v3);\n      v4 = (_QWORD *)\n          std _Rb_tree_const_iterator<std pair<unsigned long const, double>>\n          operator--(&<span class=\"supfact\">v8</span>);\n      <span class=\"supfact\">v7</span> =\n          *(_QWORD *)std\n               _Rb_tree_const_iterator<std pair<unsigned long const, double>>\n               operator->(v4) +\n          Number L;\n      <span class=\"supfact\">v6</span> =\n          *std max<unsigned long>(&<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v7</span>);\n    }\n  }\n  return <span class=\"supfact\">v6</span>;\n}", "code_t": "boost enable_if_c<true, long unsigned int>\n    type __cdecl dlib impl max_index_plus_one<dlib matrix_op<\n        dlib op_std_vect_to_mat<std vector<std map<unsigned long, double>>>>>(\n        const dlib matrix_op<dlib op_std_vect_to_mat<\n            std vector<std map<long unsigned int, double>>>> *samples) {\n  __int64 v1;\n  const std map<long unsigned int, double> *v2;\n  const std map<long unsigned int, double> *v3;\n  std _Rb_tree_const_iterator<std pair<long unsigned int const, double>> _Self\n      *v4;\n  unsigned __int64 <span class=\"supfact\">max_dim</span>;\n  unsigned __int64 <span class=\"supfact\">__b</span>;\n  std _Rb_tree_const_iterator<std pair<long unsigned int const, double>>\n      <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">max_dim</span> = Number L;\n  for (<span class=\"supfact\">i</span> = Number L;; ++<span class=\"supfact\">i</span>) {\n    v1 = dlib matrix_exp<dlib matrix_op<\n        dlib op_std_vect_to_mat<std vector<std map<unsigned long, double>>>>>\n        size((const dlib matrix_exp<dlib matrix_op<dlib op_std_vect_to_mat<\n                  std vector<std map<long unsigned int, double>>>>> *const)\n                 samples);\n    if (<span class=\"supfact\">i</span> >= v1)\n      break;\n    v2 = dlib matrix_op<\n        dlib op_std_vect_to_mat<std vector<std map<unsigned long, double>>>>\n    operator()(samples, <span class=\"supfact\">i</span>);\n    if (std map<unsigned long, double> size(v2)) {\n      v3 = dlib matrix_op<\n          dlib op_std_vect_to_mat<std vector<std map<unsigned long, double>>>>\n      operator()(samples, <span class=\"supfact\">i</span>);\n      <span class=\"supfact\">v8</span>._M_node =\n          std map<unsigned long, double> end(v3)._M_node;\n      v4 = std _Rb_tree_const_iterator<std pair<unsigned long const, double>>\n      operator--(&<span class=\"supfact\">v8</span>);\n      <span class=\"supfact\">__b</span> =\n          std _Rb_tree_const_iterator<std pair<unsigned long const, double>>\n          operator->(v4)->first +\n          Number;\n      <span class=\"supfact\">max_dim</span> = *std max<unsigned long>(\n          &<span class=\"supfact\">max_dim</span>, &<span class=\"supfact\">__b</span>);\n    }\n  }\n  return <span class=\"supfact\">max_dim</span>;\n}", "var": [{"name": "v8", "type": "__int64", "ref_name": "v8", "ref_type": "struct std::_Rb_tree_const_iterator<std::pair<long unsigned int const,double> > { std::_Rb_tree_const_iterator<std::pair<long unsigned int const,double> >::_Base_ptr _M_node; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "0000000000003e19 <_nocheck__trace_megasas_abort_invalid_context>:\n    3e19:\t55                   \tpush   %rbp\n    3e1a:\t48 89 e5             \tmov    %rsp,%rbp\n    3e1d:\t41 54                \tpush   %r12\n    3e1f:\t53                   \tpush   %rbx\n    3e20:\t48 83 ec 30          \tsub    $0x30,%rsp\n    3e24:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    3e27:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    3e2b:\t89 55 c8             \tmov    %edx,-0x38(%rbp)\n    3e2e:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    3e35:\t00 00 \n    3e37:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    3e3b:\t31 c0                \txor    %eax,%eax\n    3e3d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3e43 <_nocheck__trace_megasas_abort_invalid_context+0x2a>\n    3e43:\t85 c0                \ttest   %eax,%eax\n    3e45:\t0f 95 c0             \tsetne  %al\n    3e48:\t0f b6 c0             \tmovzbl %al,%eax\n    3e4b:\t48 85 c0             \ttest   %rax,%rax\n    3e4e:\t74 70                \tje     3ec0 <_nocheck__trace_megasas_abort_invalid_context+0xa7>\n    3e50:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 3e57 <_nocheck__trace_megasas_abort_invalid_context+0x3e>\n    3e57:\t66 85 c0             \ttest   %ax,%ax\n    3e5a:\t74 64                \tje     3ec0 <_nocheck__trace_megasas_abort_invalid_context+0xa7>\n    3e5c:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    3e61:\te8 c7 c9 ff ff       \tcallq  82d <qemu_loglevel_mask>\n    3e66:\t84 c0                \ttest   %al,%al\n    3e68:\t74 56                \tje     3ec0 <_nocheck__trace_megasas_abort_invalid_context+0xa7>\n    3e6a:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    3e6e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3e73:\t48 89 c7             \tmov    %rax,%rdi\n    3e76:\te8 00 00 00 00       \tcallq  3e7b <_nocheck__trace_megasas_abort_invalid_context+0x62>\n    3e7b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3e7f:\t49 89 c4             \tmov    %rax,%r12\n    3e82:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3e86:\t48 89 c3             \tmov    %rax,%rbx\n    3e89:\te8 00 00 00 00       \tcallq  3e8e <_nocheck__trace_megasas_abort_invalid_context+0x75>\n    3e8e:\t89 c6                \tmov    %eax,%esi\n    3e90:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n    3e94:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    3e97:\t48 83 ec 08          \tsub    $0x8,%rsp\n    3e9b:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    3e9e:\t50                   \tpush   %rax\n    3e9f:\t49 89 c9             \tmov    %rcx,%r9\n    3ea2:\t41 89 d0             \tmov    %edx,%r8d\n    3ea5:\t4c 89 e1             \tmov    %r12,%rcx\n    3ea8:\t48 89 da             \tmov    %rbx,%rdx\n    3eab:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 3eb2 <_nocheck__trace_megasas_abort_invalid_context+0x99>\n    3eb2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3eb7:\te8 00 00 00 00       \tcallq  3ebc <_nocheck__trace_megasas_abort_invalid_context+0xa3>\n    3ebc:\t48 83 c4 10          \tadd    $0x10,%rsp\n    3ec0:\t90                   \tnop\n    3ec1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3ec5:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    3ecc:\t00 00 \n    3ece:\t74 05                \tje     3ed5 <_nocheck__trace_megasas_abort_invalid_context+0xbc>\n    3ed0:\te8 00 00 00 00       \tcallq  3ed5 <_nocheck__trace_megasas_abort_invalid_context+0xbc>\n    3ed5:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n    3ed9:\t5b                   \tpop    %rbx\n    3eda:\t41 5c                \tpop    %r12\n    3edc:\t5d                   \tpop    %rbp\n    3edd:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_abort_invalid_context(\n    unsigned int a1, __int64 a2, unsigned int a3) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MEGASAS_ABORT_INVALID_CONTEXT_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v3 = <span class=\"supfact\">tv</span>.tv_usec;\n    v4 = <span class=\"supfact\">tv</span>.tv_sec;\n    v5 = qemu_get_thread_id();\n    qemu_log(String, v5, v4, v3, a1, a2, a3);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl nocheck__trace_megasas_abort_invalid_context(int cmd,\n                                                          uint64_t context,\n                                                          int abort_cmd) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MEGASAS_ABORT_INVALID_CONTEXT_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v3 = <span class=\"supfact\">_now</span>.tv_usec;\n    v4 = <span class=\"supfact\">_now</span>.tv_sec;\n    v5 = qemu_get_thread_id();\n    qemu_log(String, v5, v4, v3, (unsigned int)cmd, context,\n             (unsigned int)abort_cmd);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "UgoLi", "repo_name": "freeswitch_1.9", "path": "UgoLi/freeswitch_1.9/58c1ad34005cf8d52454c9f1b4a77f41637f40b8f008da58558eb24cfcc7821f", "path_in_repo": "UgoLi/freeswitch_1.9/freeswitch_src/libs/xmlrpc-c/tools/xmlrpc_cpp_proxy/xmlrpcMethod.o", "objdump": "0000000000000208 <_ZNK12xmlrpcMethod14parameterCountEm>:\n     208:\t55                   \tpush   %rbp\n     209:\t48 89 e5             \tmov    %rsp,%rbp\n     20c:\t41 54                \tpush   %r12\n     20e:\t53                   \tpush   %rbx\n     20f:\t48 83 ec 40          \tsub    $0x40,%rsp\n     213:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     217:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     21b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     21f:\t48 8d 50 60          \tlea    0x60(%rax),%rdx\n     223:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     227:\t48 89 d6             \tmov    %rdx,%rsi\n     22a:\t48 89 c7             \tmov    %rax,%rdi\n     22d:\te8 00 00 00 00       \tcallq  232 <_ZNK12xmlrpcMethod14parameterCountEm+0x2a>\n     232:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n     236:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     23a:\t48 89 d6             \tmov    %rdx,%rsi\n     23d:\t48 89 c7             \tmov    %rax,%rdi\n     240:\te8 00 00 00 00       \tcallq  245 <_ZNK12xmlrpcMethod14parameterCountEm+0x3d>\n     245:\t48 89 c2             \tmov    %rax,%rdx\n     248:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n     24c:\t48 89 d6             \tmov    %rdx,%rsi\n     24f:\t48 89 c7             \tmov    %rax,%rdi\n     252:\te8 00 00 00 00       \tcallq  257 <_ZNK12xmlrpcMethod14parameterCountEm+0x4f>\n     257:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n     25b:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     25f:\t48 89 d6             \tmov    %rdx,%rsi\n     262:\t48 89 c7             \tmov    %rax,%rdi\n     265:\te8 00 00 00 00       \tcallq  26a <_ZNK12xmlrpcMethod14parameterCountEm+0x62>\n     26a:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n     26e:\t48 89 c7             \tmov    %rax,%rdi\n     271:\te8 00 00 00 00       \tcallq  276 <_ZNK12xmlrpcMethod14parameterCountEm+0x6e>\n     276:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     27a:\t48 89 c7             \tmov    %rax,%rdi\n     27d:\te8 00 00 00 00       \tcallq  282 <_ZNK12xmlrpcMethod14parameterCountEm+0x7a>\n     282:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     286:\t48 89 c7             \tmov    %rax,%rdi\n     289:\te8 00 00 00 00       \tcallq  28e <_ZNK12xmlrpcMethod14parameterCountEm+0x86>\n     28e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     292:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     297:\t75 2c                \tjne    2c5 <_ZNK12xmlrpcMethod14parameterCountEm+0xbd>\n     299:\tbf 10 00 00 00       \tmov    $0x10,%edi\n     29e:\te8 00 00 00 00       \tcallq  2a3 <_ZNK12xmlrpcMethod14parameterCountEm+0x9b>\n     2a3:\t48 89 c3             \tmov    %rax,%rbx\n     2a6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     2ab:\t48 89 df             \tmov    %rbx,%rdi\n     2ae:\te8 00 00 00 00       \tcallq  2b3 <_ZNK12xmlrpcMethod14parameterCountEm+0xab>\n     2b3:\tba 00 00 00 00       \tmov    $0x0,%edx\n     2b8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     2bd:\t48 89 df             \tmov    %rbx,%rdi\n     2c0:\te8 00 00 00 00       \tcallq  2c5 <_ZNK12xmlrpcMethod14parameterCountEm+0xbd>\n     2c5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     2c9:\t48 8d 58 ff          \tlea    -0x1(%rax),%rbx\n     2cd:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     2d1:\t48 89 c7             \tmov    %rax,%rdi\n     2d4:\te8 00 00 00 00       \tcallq  2d9 <_ZNK12xmlrpcMethod14parameterCountEm+0xd1>\n     2d9:\t48 89 d8             \tmov    %rbx,%rax\n     2dc:\teb 55                \tjmp    333 <_ZNK12xmlrpcMethod14parameterCountEm+0x12b>\n     2de:\t48 89 c3             \tmov    %rax,%rbx\n     2e1:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n     2e5:\t48 89 c7             \tmov    %rax,%rdi\n     2e8:\te8 00 00 00 00       \tcallq  2ed <_ZNK12xmlrpcMethod14parameterCountEm+0xe5>\n     2ed:\teb 03                \tjmp    2f2 <_ZNK12xmlrpcMethod14parameterCountEm+0xea>\n     2ef:\t48 89 c3             \tmov    %rax,%rbx\n     2f2:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     2f6:\t48 89 c7             \tmov    %rax,%rdi\n     2f9:\te8 00 00 00 00       \tcallq  2fe <_ZNK12xmlrpcMethod14parameterCountEm+0xf6>\n     2fe:\t48 89 d8             \tmov    %rbx,%rax\n     301:\t48 89 c7             \tmov    %rax,%rdi\n     304:\te8 00 00 00 00       \tcallq  309 <_ZNK12xmlrpcMethod14parameterCountEm+0x101>\n     309:\t49 89 c4             \tmov    %rax,%r12\n     30c:\t48 89 df             \tmov    %rbx,%rdi\n     30f:\te8 00 00 00 00       \tcallq  314 <_ZNK12xmlrpcMethod14parameterCountEm+0x10c>\n     314:\t4c 89 e3             \tmov    %r12,%rbx\n     317:\teb 03                \tjmp    31c <_ZNK12xmlrpcMethod14parameterCountEm+0x114>\n     319:\t48 89 c3             \tmov    %rax,%rbx\n     31c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     320:\t48 89 c7             \tmov    %rax,%rdi\n     323:\te8 00 00 00 00       \tcallq  328 <_ZNK12xmlrpcMethod14parameterCountEm+0x120>\n     328:\t48 89 d8             \tmov    %rbx,%rax\n     32b:\t48 89 c7             \tmov    %rax,%rdi\n     32e:\te8 00 00 00 00       \tcallq  333 <_ZNK12xmlrpcMethod14parameterCountEm+0x12b>\n     333:\t48 83 c4 40          \tadd    $0x40,%rsp\n     337:\t5b                   \tpop    %rbx\n     338:\t41 5c                \tpop    %r12\n     33a:\t5d                   \tpop    %rbp\n     33b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall xmlrpcMethod parameterCount(xmlrpcMethod *this, __int64 a2) {\n  const xmlrpc_c value *v2;\n  std domain_error *v3;\n  __int64 v4;\n  char <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  char <span class=\"supfact\">v8</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>;\n  xmlrpc_c value_array vectorValueValue(\n      (xmlrpc_c value_array *)<span class=\"supfact\">v8</span>);\n  v2 = (const xmlrpc_c value *)std vector<xmlrpc_c value> operator[](\n      <span class=\"supfact\">v8</span>, a2);\n  xmlrpc_c value value((xmlrpc_c value *)<span class=\"supfact\">v7</span>, v2);\n  xmlrpc_c value_array value_array(<span class=\"supfact\">v6</span>, <span class=\"supfact\">v7</span>);\n  xmlrpc_c value ~value((xmlrpc_c value *)<span class=\"supfact\">v7</span>);\n  std vector<xmlrpc_c value> ~vector(<span class=\"supfact\">v8</span>);\n  <span class=\"supfact\">v9</span> =\n      xmlrpc_c value_array size((xmlrpc_c value_array *)<span class=\"supfact\">v6</span>);\n  if (!<span class=\"supfact\">v9</span>) {\n    v3 = (std domain_error *)_cxa_allocate_exception(Number);\n    std domain_error domain_error(v3, String); _cxa_throw ( v3 , ( struct type_info * ) & ` typeinfo for ' std domain_error , ( void ( __fastcall * ) ( void * ) ) & std domain_error ~ domain_error ) ; } v4 = <span class=\"supfact\">v9</span> - Number ; xmlrpc_c value_array ~ value_array ( ( xmlrpc_c value_array * ) <span class=\"supfact\">v6</span> ) ; return v4 ; }", "code_t": "size_t __cdecl xmlrpcMethod parameterCount(const xmlrpcMethod *const this,\n                                           const size_t synopsisIndex) {\n  const xmlrpc_c value *v2;\n  std domain_error *v3;\n  size_t v4;\n  xmlrpc_c value_array <span class=\"supfact\">funcSynop</span>;\n  xmlrpc_c value <span class=\"supfact\">v7</span>;\n  std vector<xmlrpc_c value> <span class=\"supfact\">v8</span>;\n  size_t <span class=\"supfact\">size</span>;\n  xmlrpc_c value_array vectorValueValue(\n      (xmlrpc_c value_array *)&<span class=\"supfact\">v8</span>);\n  v2 =\n      std vector<xmlrpc_c value> operator[](&<span class=\"supfact\">v8</span>, synopsisIndex);\n  xmlrpc_c value value(&<span class=\"supfact\">v7</span>, v2);\n  xmlrpc_c value_array value_array(&<span class=\"supfact\">funcSynop</span>,\n                                   (xmlrpc_c value)&<span class=\"supfact\">v7</span>);\n  xmlrpc_c value ~value(&<span class=\"supfact\">v7</span>);\n  std vector<xmlrpc_c value> ~vector(&<span class=\"supfact\">v8</span>);\n  <span class=\"supfact\">size</span> =\n      xmlrpc_c value_array <span class=\"supfact\">size</span>(&<span class=\"supfact\">funcSynop</span>);\n  if (!<span class=\"supfact\">size</span>) {\n    v3 = (std domain_error *)_cxa_allocate_exception(Number);\n    std domain_error domain_error(v3, String); _cxa_throw ( v3 , ( struct type_info * ) & ` typeinfo for ' std domain_error , ( void ( __fastcall * ) ( void * ) ) & std domain_error ~ domain_error ) ; } v4 = <span class=\"supfact\">size</span> - Number ; xmlrpc_c value_array ~ value_array ( & <span class=\"supfact\">funcSynop</span> ) ; return v4 ; }", "var": [{"name": "v8", "type": "struct __gnu_cxx::__normal_iterator<xmlrpc_c::value*,std::vector<xmlrpc_c::value> > { xmlrpc_c::value * _M_current; }", "ref_name": "v8", "ref_type": "struct std::vector<xmlrpc_c::value> { std::_Vector_base<xmlrpc_c::value> baseclass_0; }"}, {"name": "v7", "type": "struct __gnu_cxx::__normal_iterator<xmlrpc_c::value*,std::vector<xmlrpc_c::value> > { xmlrpc_c::value * _M_current; }", "ref_name": "v7", "ref_type": "struct xmlrpc_c::value { xmlrpc_value * cValueP; }"}], "body_in_train": true}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/7f376b31a8dadcaa039cd03852ec1c5680abfab0d79eacb522da02490596e4ad", "path_in_repo": "madeye/GRACE/qemu-0.12.5/ppc-softmmu/virtio-balloon.o", "objdump": "00000000000002d6 <virtio_balloon_get_config>:\n 2d6:\t55                   \tpush   %rbp\n 2d7:\t48 89 e5             \tmov    %rsp,%rbp\n 2da:\t48 83 ec 20          \tsub    $0x20,%rsp\n 2de:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 2e2:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 2e6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2ea:\t48 89 c7             \tmov    %rax,%rdi\n 2ed:\te8 32 fd ff ff       \tcallq  24 <to_virtio_balloon>\n 2f2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 2f6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2fa:\t8b 80 88 00 00 00    \tmov    0x88(%rax),%eax\n 300:\t89 c7                \tmov    %eax,%edi\n 302:\te8 f9 fc ff ff       \tcallq  0 <cpu_to_le32>\n 307:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 30a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 30e:\t8b 80 8c 00 00 00    \tmov    0x8c(%rax),%eax\n 314:\t89 c7                \tmov    %eax,%edi\n 316:\te8 e5 fc ff ff       \tcallq  0 <cpu_to_le32>\n 31b:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 31e:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 322:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 326:\t48 89 10             \tmov    %rdx,(%rax)\n 329:\t90                   \tnop\n 32a:\tc9                   \tleaveq \n 32b:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall virtio_balloon_get_config(__int64 a1, _QWORD *a2) {\n  _QWORD *result;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = to_virtio_balloon(a1);\n  LODWORD(<span class=\"supfact\">v3</span>) =\n      cpu_to_le32(*(_DWORD *)(<span class=\"supfact\">v4</span> + Number));\n  HIDWORD(<span class=\"supfact\">v3</span>) =\n      cpu_to_le32(*(_DWORD *)(<span class=\"supfact\">v4</span> + Number));\n  result = a2;\n  *a2 = <span class=\"supfact\">v3</span>;\n  return result;\n}", "code_t": "void __cdecl virtio_balloon_get_config(VirtIODevice_0 *vdev,\n                                       uint8_t *config_data) {\n  virtio_balloon_config <span class=\"supfact\">config</span>;\n  VirtIOBalloon_0 *<span class=\"supfact\">dev</span>;\n  <span class=\"supfact\">dev</span> = to_virtio_balloon(vdev);\n  <span class=\"supfact\">config</span>.num_pages =\n      cpu_to_le32(<span class=\"supfact\">dev</span>->num_pages);\n  <span class=\"supfact\">config</span>.actual = cpu_to_le32(<span class=\"supfact\">dev</span>->actual);\n  *(virtio_balloon_config *)config_data = <span class=\"supfact\">config</span>;\n}", "var": [{"name": "v3", "type": "struct virtio_balloon_config { uint32_t num_pages; uint32_t actual; }", "ref_name": "config", "ref_type": "struct virtio_balloon_config { uint32_t num_pages; uint32_t actual; }"}], "body_in_train": true}, {"repo_owner": "mend0za", "repo_name": "QEMU-dt-config", "path": "mend0za/QEMU-dt-config/a96935397868697343de5347880f4a87a7a0f8fcdcafb00801a3767ab2373054", "path_in_repo": "mend0za/QEMU-dt-config//block/crypto.o", "objdump": "0000000000000ce5 <block_crypto_get_info_luks>:\n ce5:\t55                   \tpush   %rbp\n ce6:\t48 89 e5             \tmov    %rsp,%rbp\n ce9:\t48 83 ec 40          \tsub    $0x40,%rsp\n ced:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n cf1:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n cf5:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n cfc:\t00 00 \n cfe:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n d02:\t31 c0                \txor    %eax,%eax\n d04:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n d08:\t48 8b 80 80 30 00 00 \tmov    0x3080(%rax),%rax\n d0f:\t48 8b 00             \tmov    (%rax),%rax\n d12:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n d16:\t48 89 d6             \tmov    %rdx,%rsi\n d19:\t48 89 c7             \tmov    %rax,%rdi\n d1c:\te8 00 00 00 00       \tcallq  d21 <block_crypto_get_info_luks+0x3c>\n d21:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n d24:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n d28:\t74 05                \tje     d2f <block_crypto_get_info_luks+0x4a>\n d2a:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n d2d:\teb 1e                \tjmp    d4d <block_crypto_get_info_luks+0x68>\n d2f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n d33:\tc6 40 11 00          \tmovb   $0x0,0x11(%rax)\n d37:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n d3b:\tc6 40 12 00          \tmovb   $0x0,0x12(%rax)\n d3f:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n d42:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n d46:\t89 10                \tmov    %edx,(%rax)\n d48:\tb8 00 00 00 00       \tmov    $0x0,%eax\n d4d:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n d51:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n d58:\t00 00 \n d5a:\t74 05                \tje     d61 <block_crypto_get_info_luks+0x7c>\n d5c:\te8 00 00 00 00       \tcallq  d61 <block_crypto_get_info_luks+0x7c>\n d61:\tc9                   \tleaveq \n d62:\tc3                   \tretq   ", "code_s": "__int64 __fastcall block_crypto_get_info_luks(__int64 a1, __int64 a2) {\n  unsigned int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  <span class=\"supfact\">v3</span> =\n      bdrv_get_info(**(_QWORD **)(a1 + Number), <span class=\"supfact\">v4</span>);\n  if (<span class=\"supfact\">v3</span>)\n    return <span class=\"supfact\">v3</span>;\n  *(_BYTE *)(a2 + Number) = Number;\n  *(_BYTE *)(a2 + Number) = Number;\n  *(_DWORD *)a2 = <span class=\"supfact\">v4</span>[Number];\n  return Number L;\n}", "code_t": "int __cdecl block_crypto_get_info_luks(BlockDriverState_0 *bs,\n                                       BlockDriverInfo_0 *bdi) {\n  int <span class=\"supfact\">ret</span>;\n  BlockDriverInfo_0 <span class=\"supfact\">subbdi</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  <span class=\"supfact\">ret</span> = bdrv_get_info(bs->file->bs, &<span class=\"supfact\">subbdi</span>);\n  if (<span class=\"supfact\">ret</span>)\n    return <span class=\"supfact\">ret</span>;\n  bdi->unallocated_blocks_are_zero = Number;\n  bdi->can_write_zeroes_with_unmap = Number;\n  bdi->cluster_size = <span class=\"supfact\">subbdi</span>.cluster_size;\n  return Number;\n}", "var": [{"name": "v4", "type": "struct audsettings { int freq; int nchannels; audfmt_e fmt; int endianness; }", "ref_name": "subbdi", "ref_type": "struct BlockDriverInfo_0 { int cluster_size; PADDING (4); int64_t vm_state_offset; bool is_dirty; bool unallocated_blocks_are_zero; bool can_write_zeroes_with_unmap; bool needs_compressed_writes; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7fc6defa16bc99f7600b943ce03c36e881a2bee185a0642a27c64ad0b2c25858", "path_in_repo": "XanClic/qemu//i386-softmmu/gdbstub.o", "objdump": "00000000000008b0 <_nocheck__trace_gdbstub_hit_io_error>:\n     8b0:\t55                   \tpush   %rbp\n     8b1:\t48 89 e5             \tmov    %rsp,%rbp\n     8b4:\t41 54                \tpush   %r12\n     8b6:\t53                   \tpush   %rbx\n     8b7:\t48 83 ec 20          \tsub    $0x20,%rsp\n     8bb:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     8c2:\t00 00 \n     8c4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     8c8:\t31 c0                \txor    %eax,%eax\n     8ca:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8d0 <_nocheck__trace_gdbstub_hit_io_error+0x20>\n     8d0:\t85 c0                \ttest   %eax,%eax\n     8d2:\t0f 95 c0             \tsetne  %al\n     8d5:\t0f b6 c0             \tmovzbl %al,%eax\n     8d8:\t48 85 c0             \ttest   %rax,%rax\n     8db:\t74 57                \tje     934 <_nocheck__trace_gdbstub_hit_io_error+0x84>\n     8dd:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 8e4 <_nocheck__trace_gdbstub_hit_io_error+0x34>\n     8e4:\t66 85 c0             \ttest   %ax,%ax\n     8e7:\t74 4b                \tje     934 <_nocheck__trace_gdbstub_hit_io_error+0x84>\n     8e9:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     8ee:\te8 6d f7 ff ff       \tcallq  60 <qemu_loglevel_mask>\n     8f3:\t84 c0                \ttest   %al,%al\n     8f5:\t74 3d                \tje     934 <_nocheck__trace_gdbstub_hit_io_error+0x84>\n     8f7:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     8fb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     900:\t48 89 c7             \tmov    %rax,%rdi\n     903:\te8 00 00 00 00       \tcallq  908 <_nocheck__trace_gdbstub_hit_io_error+0x58>\n     908:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     90c:\t49 89 c4             \tmov    %rax,%r12\n     90f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     913:\t48 89 c3             \tmov    %rax,%rbx\n     916:\te8 00 00 00 00       \tcallq  91b <_nocheck__trace_gdbstub_hit_io_error+0x6b>\n     91b:\t4c 89 e1             \tmov    %r12,%rcx\n     91e:\t48 89 da             \tmov    %rbx,%rdx\n     921:\t89 c6                \tmov    %eax,%esi\n     923:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 92a <_nocheck__trace_gdbstub_hit_io_error+0x7a>\n     92a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     92f:\te8 00 00 00 00       \tcallq  934 <_nocheck__trace_gdbstub_hit_io_error+0x84>\n     934:\t90                   \tnop\n     935:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     939:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     940:\t00 00 \n     942:\t74 05                \tje     949 <_nocheck__trace_gdbstub_hit_io_error+0x99>\n     944:\te8 00 00 00 00       \tcallq  949 <_nocheck__trace_gdbstub_hit_io_error+0x99>\n     949:\t48 83 c4 20          \tadd    $0x20,%rsp\n     94d:\t5b                   \tpop    %rbx\n     94e:\t41 5c                \tpop    %r12\n     950:\t5d                   \tpop    %rbp\n     951:\tc3                   \tretq   ", "code_s": "unsigned __int64 nocheck__trace_gdbstub_hit_io_error() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_HIT_IO_ERROR_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v0 = <span class=\"supfact\">tv</span>.tv_usec;\n    v1 = <span class=\"supfact\">tv</span>.tv_sec;\n    v2 = qemu_get_thread_id();\n    qemu_log(String, v2, v1, v0);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v5</span>;\n}", "code_t": "void __cdecl nocheck__trace_gdbstub_hit_io_error() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_HIT_IO_ERROR_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v0 = <span class=\"supfact\">_now</span>.tv_usec;\n    v1 = <span class=\"supfact\">_now</span>.tv_sec;\n    v2 = qemu_get_thread_id();\n    qemu_log(String, v2, v1, v0);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "pixeldustproject-o", "repo_name": "android_kernel_qcom_msm8960", "path": "pixeldustproject-o/android_kernel_qcom_msm8960/592420c892b313f9d4b2f595dba027e825973bd319e17b31fb4936260d369ec0", "path_in_repo": "pixeldustproject-o/android_kernel_qcom_msm8960/tools/perf/util/probe-finder.o", "objdump": "0000000000002051 <probe_point_line_walker>:\n    2051:\t55                   \tpush   %rbp\n    2052:\t48 89 e5             \tmov    %rsp,%rbp\n    2055:\t48 83 ec 70          \tsub    $0x70,%rsp\n    2059:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    205d:\t89 75 a4             \tmov    %esi,-0x5c(%rbp)\n    2060:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n    2064:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n    2068:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    206f:\t00 00 \n    2071:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2075:\t31 c0                \txor    %eax,%eax\n    2077:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    207b:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    207f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2083:\t8b 40 10             \tmov    0x10(%rax),%eax\n    2086:\t39 45 a4             \tcmp    %eax,-0x5c(%rbp)\n    2089:\t75 1b                \tjne    20a6 <probe_point_line_walker+0x55>\n    208b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    208f:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n    2093:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2097:\t48 89 d6             \tmov    %rdx,%rsi\n    209a:\t48 89 c7             \tmov    %rax,%rdi\n    209d:\te8 00 00 00 00       \tcallq  20a2 <probe_point_line_walker+0x51>\n    20a2:\t85 c0                \ttest   %eax,%eax\n    20a4:\t74 07                \tje     20ad <probe_point_line_walker+0x5c>\n    20a6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    20ab:\teb 68                \tjmp    2115 <probe_point_line_walker+0xc4>\n    20ad:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    20b1:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n    20b5:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    20b9:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    20bd:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    20c1:\t48 89 d6             \tmov    %rdx,%rsi\n    20c4:\t48 89 c7             \tmov    %rax,%rdi\n    20c7:\te8 e1 fe ff ff       \tcallq  1fad <find_best_scope>\n    20cc:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    20d0:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    20d5:\t75 1b                \tjne    20f2 <probe_point_line_walker+0xa1>\n    20d7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    20dc:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    20e1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    20e6:\te8 00 00 00 00       \tcallq  20eb <probe_point_line_walker+0x9a>\n    20eb:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n    20f0:\teb 23                \tjmp    2115 <probe_point_line_walker+0xc4>\n    20f2:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    20f6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    20fa:\t48 89 d6             \tmov    %rdx,%rsi\n    20fd:\t48 89 c7             \tmov    %rax,%rdi\n    2100:\te8 54 fb ff ff       \tcallq  1c59 <call_probe_finder>\n    2105:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n    2108:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    210d:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n    2111:\t0f 4e 45 bc          \tcmovle -0x44(%rbp),%eax\n    2115:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    2119:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    2120:\t00 00 \n    2122:\t74 05                \tje     2129 <probe_point_line_walker+0xd8>\n    2124:\te8 00 00 00 00       \tcallq  2129 <probe_point_line_walker+0xd8>\n    2129:\tc9                   \tleaveq \n    212a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall probe_point_line_walker(__int64 a1, int a2, __int64 a3,\n                                           __int64 a4) {\n  __int64 result;\n  int <span class=\"supfact\">v6</span>;\n  void *<span class=\"supfact\">v8</span>;\n  char <span class=\"supfact\">v9</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  if (a2 != *(_DWORD *)(a4 + Number) ||\n      (unsigned int)strtailcmp(a1, *(_QWORD *)(a4 + Number)))\n    return Number L;\n  *(_QWORD *)(a4 + Number) = a3;\n  <span class=\"supfact\">v8</span> = (void *)find_best_scope(a4, (__int64)<span class=\"supfact\">v9</span>);\n  if (<span class=\"supfact\">v8</span>) {\n    <span class=\"supfact\">v6</span> =\n        call_probe_finder(<span class=\"supfact\">v8</span>, a4, (Dwarf_Error *)a4);\n    result = Number L;\n    if (<span class=\"supfact\">v6</span> <= Number)\n      result = (unsigned int)<span class=\"supfact\">v6</span>;\n  } else {\n    eprintf(Number L, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl probe_point_line_walker(const char *fname, int lineno,\n                                    Dwarf_Addr addr, void *data) {\n  int result;\n  int <span class=\"supfact\">ret</span>;\n  Dwarf_Die *<span class=\"supfact\">sc_die</span>;\n  Dwarf_Die <span class=\"supfact\">die_mem</span>;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  if (lineno != *((_DWORD *)data + Number) ||\n      (unsigned int)strtailcmp(fname, *((_QWORD *)data + Number)))\n    return Number;\n  *((_QWORD *)data + Number) = addr;\n  <span class=\"supfact\">sc_die</span> =\n      find_best_scope((probe_finder *)data, &<span class=\"supfact\">die_mem</span>);\n  if (<span class=\"supfact\">sc_die</span>) {\n    <span class=\"supfact\">ret</span> =\n        call_probe_finder(<span class=\"supfact\">sc_die</span>, (probe_finder *)data);\n    result = Number;\n    if (<span class=\"supfact\">ret</span> <= Number)\n      result = <span class=\"supfact\">ret</span>;\n  } else {\n    eprintf(Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v9", "type": "struct Dwarf_Die { void * addr; Dwarf_CU * cu; Dwarf_Abbrev_0 * abbrev; __int64 padding__; }", "ref_name": "die_mem", "ref_type": "struct Dwarf_Die { void * addr; Dwarf_CU * cu; Dwarf_Abbrev_0 * abbrev; __int64 padding__; }"}], "body_in_train": true}, {"repo_owner": "Vutlan", "repo_name": "linux-sunxi", "path": "Vutlan/linux-sunxi/04592af7318ee50a3b79b459b7efe997c4891f77300cb6f01b5dfbb3ac83587e", "path_in_repo": "Vutlan/linux-sunxi/tools/perf/util/trace-event-info.o", "objdump": "00000000000004bc <read_header_files>:\n     4bc:\t55                   \tpush   %rbp\n     4bd:\t48 89 e5             \tmov    %rsp,%rbp\n     4c0:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n     4c7:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     4ce:\t00 00 \n     4d0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     4d4:\t31 c0                \txor    %eax,%eax\n     4d6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     4db:\te8 62 fc ff ff       \tcallq  142 <get_tracing_file>\n     4e0:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     4e7:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n     4ee:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     4f5:\t48 89 d6             \tmov    %rdx,%rsi\n     4f8:\t48 89 c7             \tmov    %rax,%rdi\n     4fb:\te8 00 00 00 00       \tcallq  500 <read_header_files+0x44>\n     500:\t85 c0                \ttest   %eax,%eax\n     502:\t79 19                \tjns    51d <read_header_files+0x61>\n     504:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     50b:\t48 89 c6             \tmov    %rax,%rsi\n     50e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     513:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     518:\te8 00 00 00 00       \tcallq  51d <read_header_files+0x61>\n     51d:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n     522:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     527:\te8 ee fc ff ff       \tcallq  21a <write_or_die>\n     52c:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     533:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     538:\t48 89 c7             \tmov    %rax,%rdi\n     53b:\te8 c6 fd ff ff       \tcallq  306 <record_file>\n     540:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     547:\t48 89 c7             \tmov    %rax,%rdi\n     54a:\te8 8d fc ff ff       \tcallq  1dc <put_tracing_file>\n     54f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     554:\te8 e9 fb ff ff       \tcallq  142 <get_tracing_file>\n     559:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     560:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n     567:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     56e:\t48 89 d6             \tmov    %rdx,%rsi\n     571:\t48 89 c7             \tmov    %rax,%rdi\n     574:\te8 00 00 00 00       \tcallq  579 <read_header_files+0xbd>\n     579:\t85 c0                \ttest   %eax,%eax\n     57b:\t79 19                \tjns    596 <read_header_files+0xda>\n     57d:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     584:\t48 89 c6             \tmov    %rax,%rsi\n     587:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     58c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     591:\te8 00 00 00 00       \tcallq  596 <read_header_files+0xda>\n     596:\tbe 0d 00 00 00       \tmov    $0xd,%esi\n     59b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     5a0:\te8 75 fc ff ff       \tcallq  21a <write_or_die>\n     5a5:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     5ac:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     5b1:\t48 89 c7             \tmov    %rax,%rdi\n     5b4:\te8 4d fd ff ff       \tcallq  306 <record_file>\n     5b9:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     5c0:\t48 89 c7             \tmov    %rax,%rdi\n     5c3:\te8 14 fc ff ff       \tcallq  1dc <put_tracing_file>\n     5c8:\t90                   \tnop\n     5c9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     5cd:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     5d4:\t00 00 \n     5d6:\t74 05                \tje     5dd <read_header_files+0x121>\n     5d8:\te8 00 00 00 00       \tcallq  5dd <read_header_files+0x121>\n     5dd:\tc9                   \tleaveq \n     5de:\tc3                   \tretq   ", "code_s": "unsigned __int64 read_header_files() {\n  char *file;\n  char *filea;\n  struct stat64 <span class=\"supfact\">v3</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  file = get_tracing_file(String);\n  if (stat64(file, &<span class=\"supfact\">v3</span>) < Number)\n    die(String, file);\n  write_or_die(String, Number);\n  record_file(file, Number);\n  put_tracing_file(file);\n  filea = get_tracing_file(String);\n  if (stat64(filea, &<span class=\"supfact\">v3</span>) < Number)\n    die(String, filea);\n  write_or_die(String, Number);\n  record_file(filea, Number);\n  put_tracing_file(filea);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n}", "code_t": "void __cdecl read_header_files() {\n  char *path;\n  char *patha;\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = __readfsqword(Number);\n  path = get_tracing_file(String);\n  if (stat64(path, (struct stat64 *)&<span class=\"supfact\">st</span>) < Number)\n    die(String, path);\n  write_or_die(String, Number);\n  record_file(path, Number);\n  put_tracing_file(path);\n  patha = get_tracing_file(String);\n  if (stat64(patha, (struct stat64 *)&<span class=\"supfact\">st</span>) < Number)\n    die(String, patha);\n  write_or_die(String, Number);\n  record_file(patha, Number);\n  put_tracing_file(patha);\n}", "var": [{"name": "v3", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/1e1e7cb97ebb80eac8dbb33680b64d176ff61b4eaa68df0fca22659194da5490", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/stateful_proxy", "objdump": "000000000040cf26 <parse_sip_version>:\n  40cf26:\t55                   \tpush   %rbp\n  40cf27:\t48 89 e5             \tmov    %rsp,%rbp\n  40cf2a:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40cf2e:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  40cf32:\t48 c7 45 f0 e4 a5 46 \tmovq   $0x46a5e4,-0x10(%rbp)\n  40cf39:\t00 \n  40cf3a:\t48 c7 45 f8 03 00 00 \tmovq   $0x3,-0x8(%rbp)\n  40cf41:\t00 \n  40cf42:\t48 c7 45 e0 e8 a5 46 \tmovq   $0x46a5e8,-0x20(%rbp)\n  40cf49:\t00 \n  40cf4a:\t48 c7 45 e8 03 00 00 \tmovq   $0x3,-0x18(%rbp)\n  40cf51:\t00 \n  40cf52:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  40cf56:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40cf5a:\tbe 50 98 48 00       \tmov    $0x489850,%esi\n  40cf5f:\t48 89 c7             \tmov    %rax,%rdi\n  40cf62:\te8 fe 59 02 00       \tcallq  432965 <pj_scan_get>\n  40cf67:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40cf6b:\t48 89 c7             \tmov    %rax,%rdi\n  40cf6e:\te8 6f 5f 02 00       \tcallq  432ee2 <pj_scan_get_char>\n  40cf73:\t83 f8 2f             \tcmp    $0x2f,%eax\n  40cf76:\t74 0c                \tje     40cf84 <parse_sip_version+0x5e>\n  40cf78:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40cf7c:\t48 89 c7             \tmov    %rax,%rdi\n  40cf7f:\te8 d3 e2 ff ff       \tcallq  40b257 <on_syntax_error>\n  40cf84:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  40cf88:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40cf8c:\tbe 03 00 00 00       \tmov    $0x3,%esi\n  40cf91:\t48 89 c7             \tmov    %rax,%rdi\n  40cf94:\te8 b5 5e 02 00       \tcallq  432e4e <pj_scan_get_n>\n  40cf99:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  40cf9d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  40cfa1:\t48 89 d6             \tmov    %rdx,%rsi\n  40cfa4:\t48 89 c7             \tmov    %rax,%rdi\n  40cfa7:\te8 a8 86 05 00       \tcallq  465654 <pj_stricmp>\n  40cfac:\t85 c0                \ttest   %eax,%eax\n  40cfae:\t75 17                \tjne    40cfc7 <parse_sip_version+0xa1>\n  40cfb0:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  40cfb4:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40cfb8:\t48 89 d6             \tmov    %rdx,%rsi\n  40cfbb:\t48 89 c7             \tmov    %rax,%rdi\n  40cfbe:\te8 91 86 05 00       \tcallq  465654 <pj_stricmp>\n  40cfc3:\t85 c0                \ttest   %eax,%eax\n  40cfc5:\t74 0c                \tje     40cfd3 <parse_sip_version+0xad>\n  40cfc7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40cfcb:\t48 89 c7             \tmov    %rax,%rdi\n  40cfce:\te8 84 e2 ff ff       \tcallq  40b257 <on_syntax_error>\n  40cfd3:\t90                   \tnop\n  40cfd4:\tc9                   \tleaveq \n  40cfd5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall parse_sip_version(__int64 a1) {\n  __int64 result;\n  char <span class=\"supfact\">v2</span>[Number];\n  char <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  <span class=\"supfact\">v5</span>[Number] = (__int64)String;\n  <span class=\"supfact\">v5</span>[Number] = Number L;\n  <span class=\"supfact\">v4</span>[Number] = (__int64)String;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  pj_scan_get(a1, &unk_489850, <span class=\"supfact\">v3</span>);\n  if ((unsigned int)pj_scan_get_char(a1) != Number)\n    on_syntax_error(a1);\n  pj_scan_get_n(a1, Number L, <span class=\"supfact\">v2</span>);\n  if ((unsigned int)pj_stricmp(<span class=\"supfact\">v3</span>, <span class=\"supfact\">v5</span>) ||\n      (result = pj_stricmp(<span class=\"supfact\">v2</span>, <span class=\"supfact\">v4</span>),\n       (_DWORD)result))\n    on_syntax_error(a1);\n  return result;\n}", "code_t": "void __cdecl parse_sip_version(pj_scanner_0 *scanner) {\n  pj_str_t_0 <span class=\"supfact\">version</span>;\n  pj_str_t_0 <span class=\"supfact\">sip</span>;\n  pj_str_t_0 <span class=\"supfact\">V2</span>;\n  pj_str_t_0 <span class=\"supfact\">SIP</span>;\n  <span class=\"supfact\">SIP</span>.ptr = String;\n  <span class=\"supfact\">SIP</span>.slen = Number L;\n  <span class=\"supfact\">V2</span>.ptr = String;\n  <span class=\"supfact\">V2</span>.slen = Number L;\n  pj_scan_get(scanner, &pconst.pjsip_ALPHA_SPEC, &<span class=\"supfact\">sip</span>);\n  if (pj_scan_get_char(scanner) != Number)\n    on_syntax_error(scanner);\n  pj_scan_get_n(scanner, Number, &<span class=\"supfact\">version</span>);\n  if (pj_stricmp(&<span class=\"supfact\">sip</span>, &<span class=\"supfact\">SIP</span>) ||\n      pj_stricmp(&<span class=\"supfact\">version</span>, &<span class=\"supfact\">V2</span>))\n    on_syntax_error(scanner);\n}", "var": [{"name": "v5", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "SIP", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}, {"name": "v4", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "V2", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}, {"name": "v3", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "sip", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}, {"name": "v2", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "version", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": false}, {"repo_owner": "spokoynj", "repo_name": "OSU-Projects", "path": "spokoynj/OSU-Projects/a3c7eabdbdffa94aa1646344bb52bc645b3f688c2cc059bb875ee225ebf3b95a", "path_in_repo": "spokoynj/OSU-Projects/CS 467 - Online Capstone Project/Object.o", "objdump": "0000000000000000 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEES8_ET_SD_T0_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  10:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  14:\t48 89 c7             \tmov    %rax,%rdi\n  17:\te8 00 00 00 00       \tcallq  1c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEES8_ET_SD_T0_+0x1c>\n  1c:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  20:\t48 29 c2             \tsub    %rax,%rdx\n  23:\t48 89 d0             \tmov    %rdx,%rax\n  26:\t48 c1 f8 05          \tsar    $0x5,%rax\n  2a:\t48 89 c2             \tmov    %rax,%rdx\n  2d:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  31:\t48 89 d6             \tmov    %rdx,%rsi\n  34:\t48 89 c7             \tmov    %rax,%rdi\n  37:\te8 00 00 00 00       \tcallq  3c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEES8_ET_SD_T0_+0x3c>\n  3c:\tc9                   \tleaveq \n  3d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __niter_wrap<\n    __gnu_cxx __normal_iterator<\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>> *,\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>>,\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        *>(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = a1;\n  v2 = std __niter_base<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>> *,\n                        std vector<std __cxx11 basic_string<\n                            char, std char_traits<char>, std allocator<char>>>>(\n      a1);\n  return __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n  operator+(&<span class=\"supfact\">v4</span>, (a2 - v2) >> Number);\n}", "code_t": "__gnu_cxx __normal_iterator<\n    std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>> *,\n    std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>> __cdecl std\n__niter_wrap<\n    __gnu_cxx __normal_iterator<\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>> *,\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>>,\n    std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>> *>(\n    __gnu_cxx __normal_iterator<\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>> *,\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>>\n        __from,\n    std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>> *__res) {\n  std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *v2;\n  __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      <span class=\"supfact\">__froma</span>;\n  <span class=\"supfact\">__froma</span>._M_current = __from._M_current;\n  v2 = std __niter_base<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>> *,\n                        std vector<std __cxx11 basic_string<\n                            char, std char_traits<char>, std allocator<char>>>>(\n      __from);\n  return __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n  operator+(&<span class=\"supfact\">__froma</span>, __res - v2);\n}", "var": [{"name": "v4", "type": "__int64", "ref_name": "__froma", "ref_type": "struct __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*,std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}], "body_in_train": true}, {"repo_owner": "ace2883", "repo_name": "android_kernel_samsung_exynos5410", "path": "ace2883/android_kernel_samsung_exynos5410/fa7501d4cb9a5917f1d0166db92410b59df0ca2e96059ca679bdfb276a92310c", "path_in_repo": "ace2883/android_kernel_samsung_exynos5410/tools/perf/util/trace-event-parse.o", "objdump": "00000000000009e6 <find_printk>:\n     9e6:\t55                   \tpush   %rbp\n     9e7:\t48 89 e5             \tmov    %rsp,%rbp\n     9ea:\t48 83 ec 40          \tsub    $0x40,%rsp\n     9ee:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     9f2:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     9f9:\t00 00 \n     9fb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     9ff:\t31 c0                \txor    %eax,%eax\n     a01:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     a05:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     a09:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a0f <find_printk+0x29>\n     a0f:\t89 c2                \tmov    %eax,%edx\n     a11:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # a18 <find_printk+0x32>\n     a18:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     a1c:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     a22:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n     a27:\t48 89 c7             \tmov    %rax,%rdi\n     a2a:\te8 00 00 00 00       \tcallq  a2f <find_printk+0x49>\n     a2f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     a33:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a37:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     a3b:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     a42:\t00 00 \n     a44:\t74 05                \tje     a4b <find_printk+0x65>\n     a46:\te8 00 00 00 00       \tcallq  a4b <find_printk+0x65>\n     a4b:\tc9                   \tleaveq \n     a4c:\tc3                   \tretq   ", "code_s": "void *__fastcall find_printk(__int64 a1) {\n  __int64 <span class=\"supfact\">key</span>[Number];\n  <span class=\"supfact\">key</span>[Number] = __readfsqword(Number);\n  <span class=\"supfact\">key</span>[Number] = a1;\n  return bsearch(<span class=\"supfact\">key</span>, printk_list, (unsigned int)printk_count,\n                 Number, (__compar_fn_t)printk_cmp);\n}", "code_t": "printk_map *__cdecl find_printk(unsigned __int64 addr) {\n  printk_map <span class=\"supfact\">key</span>;\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  <span class=\"supfact\">key</span>.addr = addr;\n  return (printk_map *)bsearch(&<span class=\"supfact\">key</span>, printk_list,\n                               (unsigned int)printk_count, Number,\n                               (__compar_fn_t)printk_cmp);\n}", "var": [{"name": "key", "type": "struct printk_map { unsigned __int64 addr; char * printk; }", "ref_name": "key", "ref_type": "struct printk_map { unsigned __int64 addr; char * printk; }"}], "body_in_train": true}, {"repo_owner": "flybird119", "repo_name": "mediastream-plus", "path": "flybird119/mediastream-plus/8848862a04add1e77f2ebfa9ae30b5c5ed13c16d402b1c1f81a83ed207c035da", "path_in_repo": "flybird119/mediastream-plus/3rdparty/udt4/src/libudt.so", "objdump": "0000000000025950 <_ZN10CUDTUnited9getStatusEi>:\n   25950:\t41 55                \tpush   %r13\n   25952:\t41 54                \tpush   %r12\n   25954:\t55                   \tpush   %rbp\n   25955:\t48 89 fd             \tmov    %rdi,%rbp\n   25958:\t53                   \tpush   %rbx\n   25959:\t89 f3                \tmov    %esi,%ebx\n   2595b:\t48 8d 77 30          \tlea    0x30(%rdi),%rsi\n   2595f:\t48 83 ec 18          \tsub    $0x18,%rsp\n   25963:\t49 89 e5             \tmov    %rsp,%r13\n   25966:\t4c 89 ef             \tmov    %r13,%rdi\n   25969:\te8 52 98 fe ff       \tcallq  f1c0 <_ZN6CGuardC1ER15pthread_mutex_t@plt>\n   2596e:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n   25972:\t48 85 c0             \ttest   %rax,%rax\n   25975:\t74 69                \tje     259e0 <_ZN10CUDTUnited9getStatusEi+0x90>\n   25977:\t48 8d 4d 08          \tlea    0x8(%rbp),%rcx\n   2597b:\t48 89 ca             \tmov    %rcx,%rdx\n   2597e:\teb 0c                \tjmp    2598c <_ZN10CUDTUnited9getStatusEi+0x3c>\n   25980:\t48 89 c2             \tmov    %rax,%rdx\n   25983:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   25987:\t48 85 c0             \ttest   %rax,%rax\n   2598a:\t74 0e                \tje     2599a <_ZN10CUDTUnited9getStatusEi+0x4a>\n   2598c:\t39 58 20             \tcmp    %ebx,0x20(%rax)\n   2598f:\t7d ef                \tjge    25980 <_ZN10CUDTUnited9getStatusEi+0x30>\n   25991:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n   25995:\t48 85 c0             \ttest   %rax,%rax\n   25998:\t75 f2                \tjne    2598c <_ZN10CUDTUnited9getStatusEi+0x3c>\n   2599a:\t41 bc 01 00 00 00    \tmov    $0x1,%r12d\n   259a0:\t48 39 d1             \tcmp    %rdx,%rcx\n   259a3:\t74 1e                \tje     259c3 <_ZN10CUDTUnited9getStatusEi+0x73>\n   259a5:\t39 5a 20             \tcmp    %ebx,0x20(%rdx)\n   259a8:\t7f 19                \tjg     259c3 <_ZN10CUDTUnited9getStatusEi+0x73>\n   259aa:\t48 8b 42 28          \tmov    0x28(%rdx),%rax\n   259ae:\t41 bc 05 00 00 00    \tmov    $0x5,%r12d\n   259b4:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n   259b8:\t0f b6 52 74          \tmovzbl 0x74(%rdx),%edx\n   259bc:\t84 d2                \ttest   %dl,%dl\n   259be:\t75 03                \tjne    259c3 <_ZN10CUDTUnited9getStatusEi+0x73>\n   259c0:\t44 8b 20             \tmov    (%rax),%r12d\n   259c3:\t4c 89 ef             \tmov    %r13,%rdi\n   259c6:\te8 15 8e fe ff       \tcallq  e7e0 <_ZN6CGuardD1Ev@plt>\n   259cb:\t48 83 c4 18          \tadd    $0x18,%rsp\n   259cf:\t44 89 e0             \tmov    %r12d,%eax\n   259d2:\t5b                   \tpop    %rbx\n   259d3:\t5d                   \tpop    %rbp\n   259d4:\t41 5c                \tpop    %r12\n   259d6:\t41 5d                \tpop    %r13\n   259d8:\tc3                   \tretq   \n   259d9:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n   259e0:\t41 bc 01 00 00 00    \tmov    $0x1,%r12d\n   259e6:\teb db                \tjmp    259c3 <_ZN10CUDTUnited9getStatusEi+0x73>\n   259e8:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n   259ef:\t00 ", "code_s": "__int64 __fastcall CUDTUnited getStatus(CUDTUnited *this, int a2) {\n  char *v2;\n  char *v3;\n  unsigned int v4;\n  __int64 v5;\n  _BYTE <span class=\"supfact\">v7</span>[Number];\n  CGuard CGuard((CGuard *)<span class=\"supfact\">v7</span>,\n                (pthread_mutex_t *)((char *)this + Number));\n  v2 = (char *)*((_QWORD *)this + Number);\n  if (v2) {\n    v3 = (char *)this + Number;\n    do {\n      while (*((_DWORD *)v2 + Number) >= a2) {\n        v3 = v2;\n        v2 = (char *)*((_QWORD *)v2 + Number);\n        if (!v2)\n          goto LABEL_6;\n      }\n      v2 = (char *)*((_QWORD *)v2 + Number);\n    } while (v2);\n  LABEL_6:\n    v4 = Number;\n    if ((char *)this + Number != v3 && *((_DWORD *)v3 + Number) <= a2) {\n      v5 = *((_QWORD *)v3 + Number);\n      v4 = Number;\n      if (!*(_BYTE *)(*(_QWORD *)(v5 + Number) + Number L))\n        v4 = *(_DWORD *)v5;\n    }\n  } else {\n    v4 = Number;\n  }\n  CGuard ~CGuard((CGuard *)<span class=\"supfact\">v7</span>);\n  return v4;\n}", "code_t": "CUDTSocket UDTSTATUS __fastcall CUDTUnited getStatus(CUDTUnited *const this,\n                                                     const UDTSOCKET u) {\n  std _Rb_tree_node_base _Base_ptr v2;\n  std _Rb_tree_header *v3;\n  CUDTSocket UDTSTATUS v4;\n  __int64 v5;\n  CGuard <span class=\"supfact\">cg</span>;\n  CGuard CGuard(&<span class=\"supfact\">cg</span>, &this->m_ControlLock);\n  v2 = this->m_Sockets._M_t._M_impl._M_header._M_parent;\n  if (v2) {\n    v3 = &this->m_Sockets._M_t._M_impl.std _Rb_tree_header;\n    do {\n      while (v2[Number]._M_color >= u) {\n        v3 = (std _Rb_tree_header *)v2;\n        v2 = v2->_M_left;\n        if (!v2)\n          goto LABEL_6;\n      }\n      v2 = v2->_M_right;\n    } while (v2);\n  LABEL_6:\n    v4 = INIT;\n    if (&this->m_Sockets._M_t._M_impl.std _Rb_tree_header != v3 &&\n        SLODWORD(v3->_M_node_count) <= u) {\n      v5 = *(_QWORD *)&v3[Number]._M_header._M_color;\n      v4 = BROKEN;\n      if (!*(_BYTE *)(*(_QWORD *)(v5 + Number) + Number L))\n        v4 = *(_DWORD *)v5;\n    }\n  } else {\n    v4 = INIT;\n  }\n  CGuard ~CGuard(&<span class=\"supfact\">cg</span>);\n  return v4;\n}", "var": [{"name": "v7", "type": "_BYTE[56]", "ref_name": "cg", "ref_type": "struct CGuard { pthread_mutex_t * m_Mutex; int m_iLocked; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "splashkit", "repo_name": "splashkit-external", "path": "splashkit/splashkit-external/31bae5c13f83b36652ea728a0e5cec902cab4fcbd2b7407476287e3b6b86069c", "path_in_repo": "splashkit/splashkit-external/civetweb/out/src/civetweb.o", "objdump": "0000000000009dc3 <read_request>:\n    9dc3:\t55                   \tpush   %rbp\n    9dc4:\t48 89 e5             \tmov    %rsp,%rbp\n    9dc7:\t48 83 ec 50          \tsub    $0x50,%rsp\n    9dcb:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    9dcf:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    9dd3:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    9dd7:\t89 4d c4             \tmov    %ecx,-0x3c(%rbp)\n    9dda:\t4c 89 45 b8          \tmov    %r8,-0x48(%rbp)\n    9dde:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    9de5:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n    9dea:\t75 0a                \tjne    9df6 <read_request+0x33>\n    9dec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9df1:\te9 a3 01 00 00       \tjmpq   9f99 <read_request+0x1d6>\n    9df6:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    9dfa:\tba 10 00 00 00       \tmov    $0x10,%edx\n    9dff:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    9e04:\t48 89 c7             \tmov    %rax,%rdi\n    9e07:\te8 00 00 00 00       \tcallq  9e0c <read_request+0x49>\n    9e0c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    9e10:\t48 8b 80 98 04 00 00 \tmov    0x498(%rax),%rax\n    9e17:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    9e1e:\t48 85 c0             \ttest   %rax,%rax\n    9e21:\t74 2d                \tje     9e50 <read_request+0x8d>\n    9e23:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    9e27:\t48 8b 80 98 04 00 00 \tmov    0x498(%rax),%rax\n    9e2e:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    9e35:\t48 89 c7             \tmov    %rax,%rdi\n    9e38:\te8 00 00 00 00       \tcallq  9e3d <read_request+0x7a>\n    9e3d:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 9e45 <read_request+0x82>\n    9e44:\t00 \n    9e45:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    9e49:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n    9e4e:\teb 0d                \tjmp    9e5d <read_request+0x9a>\n    9e50:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 9e58 <read_request+0x95>\n    9e57:\t00 \n    9e58:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n    9e5d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9e61:\t8b 10                \tmov    (%rax),%edx\n    9e63:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    9e67:\t89 d6                \tmov    %edx,%esi\n    9e69:\t48 89 c7             \tmov    %rax,%rdi\n    9e6c:\te8 89 b9 ff ff       \tcallq  57fa <get_request_len>\n    9e71:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    9e74:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    9e78:\t48 89 c6             \tmov    %rax,%rsi\n    9e7b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    9e80:\te8 00 00 00 00       \tcallq  9e85 <read_request+0xc2>\n    9e85:\teb 5f                \tjmp    9ee6 <read_request+0x123>\n    9e87:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9e8b:\t8b 10                \tmov    (%rax),%edx\n    9e8d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    9e90:\t01 c2                \tadd    %eax,%edx\n    9e92:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9e96:\t89 10                \tmov    %edx,(%rax)\n    9e98:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9e9c:\t8b 00                \tmov    (%rax),%eax\n    9e9e:\t39 45 c4             \tcmp    %eax,-0x3c(%rbp)\n    9ea1:\t7d 0a                \tjge    9ead <read_request+0xea>\n    9ea3:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n    9ea8:\te9 ec 00 00 00       \tjmpq   9f99 <read_request+0x1d6>\n    9ead:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9eb1:\t8b 10                \tmov    (%rax),%edx\n    9eb3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    9eb7:\t89 d6                \tmov    %edx,%esi\n    9eb9:\t48 89 c7             \tmov    %rax,%rdi\n    9ebc:\te8 39 b9 ff ff       \tcallq  57fa <get_request_len>\n    9ec1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    9ec4:\tf2 0f 10 45 f0       \tmovsd  -0x10(%rbp),%xmm0\n    9ec9:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    9ecd:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    9ed1:\t77 02                \tja     9ed5 <read_request+0x112>\n    9ed3:\teb 11                \tjmp    9ee6 <read_request+0x123>\n    9ed5:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    9ed9:\t48 89 c6             \tmov    %rax,%rsi\n    9edc:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    9ee1:\te8 00 00 00 00       \tcallq  9ee6 <read_request+0x123>\n    9ee6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    9eea:\t48 8b 80 98 04 00 00 \tmov    0x498(%rax),%rax\n    9ef1:\t8b 00                \tmov    (%rax),%eax\n    9ef3:\t85 c0                \ttest   %eax,%eax\n    9ef5:\t0f 85 88 00 00 00    \tjne    9f83 <read_request+0x1c0>\n    9efb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9eff:\t8b 00                \tmov    (%rax),%eax\n    9f01:\t39 45 c4             \tcmp    %eax,-0x3c(%rbp)\n    9f04:\t7e 7d                \tjle    9f83 <read_request+0x1c0>\n    9f06:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    9f0a:\t75 77                \tjne    9f83 <read_request+0x1c0>\n    9f0c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    9f10:\t48 8d 90 e0 04 00 00 \tlea    0x4e0(%rax),%rdx\n    9f17:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    9f1b:\t48 89 d6             \tmov    %rdx,%rsi\n    9f1e:\t48 89 c7             \tmov    %rax,%rdi\n    9f21:\te8 0e 7f ff ff       \tcallq  1e34 <mg_difftimespec>\n    9f26:\tf2 0f 10 4d f0       \tmovsd  -0x10(%rbp),%xmm1\n    9f2b:\t66 0f 2f c8          \tcomisd %xmm0,%xmm1\n    9f2f:\t73 0b                \tjae    9f3c <read_request+0x179>\n    9f31:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    9f35:\t66 0f 2f 45 f0       \tcomisd -0x10(%rbp),%xmm0\n    9f3a:\t76 47                \tjbe    9f83 <read_request+0x1c0>\n    9f3c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9f40:\t8b 00                \tmov    (%rax),%eax\n    9f42:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    9f45:\t89 d1                \tmov    %edx,%ecx\n    9f47:\t29 c1                \tsub    %eax,%ecx\n    9f49:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9f4d:\t8b 00                \tmov    (%rax),%eax\n    9f4f:\t48 63 d0             \tmovslq %eax,%rdx\n    9f52:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    9f56:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n    9f5a:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    9f5e:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n    9f62:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9f66:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n    9f6b:\t48 89 fa             \tmov    %rdi,%rdx\n    9f6e:\t48 89 c7             \tmov    %rax,%rdi\n    9f71:\te8 02 9e ff ff       \tcallq  3d78 <pull>\n    9f76:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    9f79:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n    9f7d:\t0f 8f 04 ff ff ff    \tjg     9e87 <read_request+0xc4>\n    9f83:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    9f87:\t7f 06                \tjg     9f8f <read_request+0x1cc>\n    9f89:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n    9f8d:\t7e 05                \tjle    9f94 <read_request+0x1d1>\n    9f8f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    9f92:\teb 05                \tjmp    9f99 <read_request+0x1d6>\n    9f94:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    9f99:\tc9                   \tleaveq \n    9f9a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_request(FILE *a1, __int64 a2, char *a3, int a4,\n                                int *a5) {\n  __int64 result;\n  double v6;\n  struct timespec <span class=\"supfact\">s</span>;\n  double <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  unsigned int <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v12</span> = Number;\n  if (!a2)\n    return Number L;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  if (*(_QWORD *)(*(_QWORD *)(a2 + Number) + Number L))\n    <span class=\"supfact\">v11</span> =\n        atof(*(const char **)(*(_QWORD *)(a2 + Number) + Number L)) / Number;\n  else\n    <span class=\"supfact\">v11</span> = Number;\n  <span class=\"supfact\">v13</span> = get_request_len(a3, *a5);\n  clock_gettime(Number, &<span class=\"supfact\">s</span>);\n  while (!**(_DWORD **)(a2 + Number)) {\n    if (a4 <= *a5)\n      break;\n    if (<span class=\"supfact\">v13</span>)\n      break;\n    v6 = mg_difftimespec((__int64)&<span class=\"supfact\">s</span>, a2 + Number);\n    if (<span class=\"supfact\">v11</span> < v6 && <span class=\"supfact\">v11</span> >= Number)\n      break;\n    <span class=\"supfact\">v12</span> = pull(a1, a2, &a3[*a5], a4 - *a5, <span class=\"supfact\">v11</span>);\n    if (<span class=\"supfact\">v12</span> <= Number)\n      break;\n    *a5 += <span class=\"supfact\">v12</span>;\n    if (a4 < *a5)\n      return Number L;\n    <span class=\"supfact\">v13</span> = get_request_len(a3, *a5);\n    if (<span class=\"supfact\">v11</span> > Number)\n      clock_gettime(Number, &<span class=\"supfact\">s</span>);\n  }\n  if ((int)<span class=\"supfact\">v13</span> <= Number && <span class=\"supfact\">v12</span> <= Number)\n    result = Number;\n  else\n    result = <span class=\"supfact\">v13</span>;\n  return result;\n}", "code_t": "int __cdecl read_request(FILE *fp, mg_connection *conn, char *buf, int bufsiz,\n                         int *nread) {\n  int result;\n  double v6;\n  timespec <span class=\"supfact\">last_action_time</span>;\n  double <span class=\"supfact\">request_timeout</span>;\n  int <span class=\"supfact\">n</span>;\n  int <span class=\"supfact\">request_len</span>;\n  <span class=\"supfact\">n</span> = Number;\n  if (!conn)\n    return Number;\n  memset(&<span class=\"supfact\">last_action_time</span>, Number,\n         sizeof(<span class=\"supfact\">last_action_time</span>));\n  if (conn->ctx->config[Number])\n    <span class=\"supfact\">request_timeout</span> = atof(conn->ctx->config[Number]) / Number;\n  else\n    <span class=\"supfact\">request_timeout</span> = Number;\n  <span class=\"supfact\">request_len</span> = get_request_len(buf, *nread);\n  clock_gettime(Number, &<span class=\"supfact\">last_action_time</span>);\n  while (!conn->ctx->stop_flag) {\n    if (bufsiz <= *nread)\n      break;\n    if (<span class=\"supfact\">request_len</span>)\n      break;\n    v6 = mg_difftimespec(&<span class=\"supfact\">last_action_time</span>, &conn->req_time);\n    if (<span class=\"supfact\">request_timeout</span> < v6 &&\n        <span class=\"supfact\">request_timeout</span> >= Number)\n      break;\n    <span class=\"supfact\">n</span> = pull(fp, conn, &buf[*nread], bufsiz - *nread,\n                             <span class=\"supfact\">request_timeout</span>);\n    if (<span class=\"supfact\">n</span> <= Number)\n      break;\n    *nread += <span class=\"supfact\">n</span>;\n    if (bufsiz < *nread)\n      return Number;\n    <span class=\"supfact\">request_len</span> = get_request_len(buf, *nread);\n    if (<span class=\"supfact\">request_timeout</span> > Number)\n      clock_gettime(Number, &<span class=\"supfact\">last_action_time</span>);\n  }\n  if (<span class=\"supfact\">request_len</span> <= Number && <span class=\"supfact\">n</span> <= Number)\n    result = Number;\n  else\n    result = <span class=\"supfact\">request_len</span>;\n  return result;\n}", "var": [{"name": "s", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "last_action_time", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "CEYeYuan", "repo_name": "operating-systems", "path": "CEYeYuan/operating-systems/a44e2aac57f2fdb59ddce418c2d41f697cf8e3db9de955f0089a8b3d7977f686", "path_in_repo": "CEYeYuan/operating-systems/threads/show_ucontext", "objdump": "0000000000404415 <register_interrupt_handler>:\n  404415:\t55                   \tpush   %rbp\n  404416:\t48 89 e5             \tmov    %rsp,%rbp\n  404419:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  404420:\t89 bd 5c ff ff ff    \tmov    %edi,-0xa4(%rbp)\n  404426:\t8b 05 54 49 00 00    \tmov    0x4954(%rip),%eax        # 408d80 <init.4283>\n  40442c:\t85 c0                \ttest   %eax,%eax\n  40442e:\t74 19                \tje     404449 <register_interrupt_handler+0x34>\n  404430:\tb9 d0 5d 40 00       \tmov    $0x405dd0,%ecx\n  404435:\tba 1b 00 00 00       \tmov    $0x1b,%edx\n  40443a:\tbe 50 5d 40 00       \tmov    $0x405d50,%esi\n  40443f:\tbf 5c 5d 40 00       \tmov    $0x405d5c,%edi\n  404444:\te8 57 cc ff ff       \tcallq  4010a0 <__assert_fail@plt>\n  404449:\tc7 05 2d 49 00 00 01 \tmovl   $0x1,0x492d(%rip)        # 408d80 <init.4283>\n  404450:\t00 00 00 \n  404453:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n  404459:\t89 05 e1 48 00 00    \tmov    %eax,0x48e1(%rip)        # 408d40 <loud>\n  40445f:\t48 c7 85 60 ff ff ff \tmovq   $0x0,-0xa0(%rbp)\n  404466:\t00 00 00 00 \n  40446a:\t48 c7 85 60 ff ff ff \tmovq   $0x404827,-0xa0(%rbp)\n  404471:\t27 48 40 00 \n  404475:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  40447c:\t48 83 c0 08          \tadd    $0x8,%rax\n  404480:\t48 89 c7             \tmov    %rax,%rdi\n  404483:\te8 38 cc ff ff       \tcallq  4010c0 <sigemptyset@plt>\n  404488:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40448b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40448f:\t74 19                \tje     4044aa <register_interrupt_handler+0x95>\n  404491:\tb9 d0 5d 40 00       \tmov    $0x405dd0,%ecx\n  404496:\tba 22 00 00 00       \tmov    $0x22,%edx\n  40449b:\tbe 50 5d 40 00       \tmov    $0x405d50,%esi\n  4044a0:\tbf 62 5d 40 00       \tmov    $0x405d62,%edi\n  4044a5:\te8 f6 cb ff ff       \tcallq  4010a0 <__assert_fail@plt>\n  4044aa:\tc7 45 e8 04 00 00 00 \tmovl   $0x4,-0x18(%rbp)\n  4044b1:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  4044b8:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4044bd:\t48 89 c6             \tmov    %rax,%rsi\n  4044c0:\tbf 0e 00 00 00       \tmov    $0xe,%edi\n  4044c5:\te8 96 cb ff ff       \tcallq  401060 <sigaction@plt>\n  4044ca:\t85 c0                \ttest   %eax,%eax\n  4044cc:\t74 23                \tje     4044f1 <register_interrupt_handler+0xdc>\n  4044ce:\tbf 69 5d 40 00       \tmov    $0x405d69,%edi\n  4044d3:\te8 28 cc ff ff       \tcallq  401100 <perror@plt>\n  4044d8:\tb9 d0 5d 40 00       \tmov    $0x405dd0,%ecx\n  4044dd:\tba 28 00 00 00       \tmov    $0x28,%edx\n  4044e2:\tbe 50 5d 40 00       \tmov    $0x405d50,%esi\n  4044e7:\tbf 83 5d 40 00       \tmov    $0x405d83,%edi\n  4044ec:\te8 af cb ff ff       \tcallq  4010a0 <__assert_fail@plt>\n  4044f1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4044f6:\te8 94 04 00 00       \tcallq  40498f <set_interrupt>\n  4044fb:\t90                   \tnop\n  4044fc:\tc9                   \tleaveq \n  4044fd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall register_interrupt_handler(int a1) {\n  struct sigaction <span class=\"supfact\">v2</span>;\n  if (init_4283)\n    __assert_fail(String, String, Number, String);\n  init_4283 = Number;\n  loud = a1;\n  <span class=\"supfact\">v2</span>.sa_handler = (__sighandler_t)interrupt_handler;\n  if (sigemptyset(&<span class=\"supfact\">v2</span>.sa_mask))\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v2</span>.sa_flags = Number;\n  if (sigaction(Number, &<span class=\"supfact\">v2</span>, Number L)) {\n    perror(String);\n    __assert_fail(String, String, Number, String);\n  }\n  return set_interrupt();\n}", "code_t": "void __cdecl register_interrupt_handler(int verbose) {\n  sigaction <span class=\"supfact\">action</span>;\n  if (init_4283)\n    __assert_fail(String, String, Number, String);\n  init_4283 = Number;\n  loud = verbose;\n  <span class=\"supfact\">action</span>.sa_handler = (__sighandler_t)interrupt_handler;\n  if (sigemptyset(&<span class=\"supfact\">action</span>.sa_mask))\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">action</span>.sa_flags = Number;\n  if (sigaction(Number, &<span class=\"supfact\">action</span>, Number L)) {\n    perror(String);\n    __assert_fail(String, String, Number, String);\n  }\n  set_interrupt();\n}", "var": [{"name": "v2", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "action", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": true}, {"repo_owner": "anhquang", "repo_name": "contiki", "path": "anhquang/contiki/b362ec38d47bc2f6352817a4c96834fc5cd4ddf1a42cd1de454a4cca8c9c6651", "path_in_repo": "anhquang/contiki/examples/antelope/netdb/obj_native/uip-over-mesh.o", "objdump": "00000000000001da <uip_over_mesh_make_announced_gateway>:\n 1da:\t55                   \tpush   %rbp\n 1db:\t48 89 e5             \tmov    %rsp,%rbp\n 1de:\t48 83 ec 10          \tsub    $0x10,%rsp\n 1e2:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 1e9 <uip_over_mesh_make_announced_gateway+0xf>\n 1e9:\t84 c0                \ttest   %al,%al\n 1eb:\t75 3d                \tjne    22a <uip_over_mesh_make_announced_gateway+0x50>\n 1ed:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1f2:\te8 00 00 00 00       \tcallq  1f7 <uip_over_mesh_make_announced_gateway+0x1d>\n 1f7:\t48 8d 45 fe          \tlea    -0x2(%rbp),%rax\n 1fb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 200:\t48 89 c7             \tmov    %rax,%rdi\n 203:\te8 00 00 00 00       \tcallq  208 <uip_over_mesh_make_announced_gateway+0x2e>\n 208:\t48 8d 45 fe          \tlea    -0x2(%rbp),%rax\n 20c:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 211:\t48 89 c7             \tmov    %rax,%rdi\n 214:\te8 00 00 00 00       \tcallq  219 <uip_over_mesh_make_announced_gateway+0x3f>\n 219:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 21e:\te8 00 00 00 00       \tcallq  223 <uip_over_mesh_make_announced_gateway+0x49>\n 223:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 22a <uip_over_mesh_make_announced_gateway+0x50>\n 22a:\t90                   \tnop\n 22b:\tc9                   \tleaveq \n 22c:\tc3                   \tretq   ", "code_s": "__int64 uip_over_mesh_make_announced_gateway() {\n  __int64 result;\n  char <span class=\"supfact\">v1</span>[Number];\n  result = (unsigned __int8)is_gateway;\n  if (!is_gateway) {\n    uip_over_mesh_set_gateway(&rimeaddr_node_addr);\n    rimeaddr_copy(<span class=\"supfact\">v1</span>, &rimeaddr_node_addr);\n    packetbuf_copyfrom(<span class=\"supfact\">v1</span>, Number L);\n    result = trickle_send(&gateway_announce_conn);\n    is_gateway = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl uip_over_mesh_make_announced_gateway() {\n  gateway_msg <span class=\"supfact\">msg</span>;\n  if (!is_gateway) {\n    uip_over_mesh_set_gateway(&rimeaddr_node_addr);\n    rimeaddr_copy(&<span class=\"supfact\">msg</span>, &rimeaddr_node_addr);\n    packetbuf_copyfrom(&<span class=\"supfact\">msg</span>, Number L);\n    trickle_send(&gateway_announce_conn);\n    is_gateway = Number;\n  }\n}", "var": [{"name": "v1", "type": "struct gateway_msg { rimeaddr_t gateway; }", "ref_name": "msg", "ref_type": "struct gateway_msg { rimeaddr_t gateway; }"}], "body_in_train": true}, {"code_s": "void __fastcall Poco Logger log(__int64 a1, __int64 a2, unsigned int a3,\n                                __int64 a4, unsigned int a5) {\n  __int64 v5;\n  void(__fastcall * v6)(__int64, char *);\n  char <span class=\"supfact\">v7</span>[Number];\n  if (*(_DWORD *)(a1 + Number) >= (signed int)a3) {\n    if (*(_QWORD *)(a1 + Number)) {\n      v5 = *(_QWORD *)(a1 + Number);\n      v6 = *(void(__fastcall **)(__int64, char *))(*(_QWORD *)v5 + Number L);\n      Poco Message Message(<span class=\"supfact\">v7</span>, a1 + Number, a2, a3, a4, a5);\n      v6(v5, <span class=\"supfact\">v7</span>);\n      Poco Message ~Message((Poco Message *)<span class=\"supfact\">v7</span>);\n    }\n  }\n}", "code_t": "void __cdecl Poco Logger log(Poco Logger *const this, const std string *text,\n                             Poco Message Priority prio, const char *file,\n                             int line) {\n  Poco Channel *v5;\n  void(__fastcall * v6)(Poco Channel *, Poco Message *);\n  Poco Message <span class=\"supfact\">v7</span>;\n  if (this->_level >= prio) {\n    if (this->_pChannel) {\n      v5 = this->_pChannel;\n      v6 = *(void(__fastcall **)(Poco Channel *, Poco Message *))(\n          *(_QWORD *)v5 + Number L);\n      Poco Message Message(&<span class=\"supfact\">v7</span>, &this->_name, text,\n                           (unsigned int)prio, file, (unsigned int)line);\n      v6(v5, &<span class=\"supfact\">v7</span>);\n      Poco Message ~Message(&<span class=\"supfact\">v7</span>);\n    }\n  }\n}", "var": [{"name": "v7", "type": "struct Poco::Message { std::string _source; std::string _text; Poco::Message::Priority _prio; PADDING (4); Poco::Timestamp _time; int _tid; PADDING (4); std::string _thread; __int64 _pid; const char * _file; int _line; PADDING (4); Poco::Message::StringMap * _pMap; }", "ref_name": "v7", "ref_type": "struct Poco::Message { std::string _source; std::string _text; Poco::Message::Priority _prio; PADDING (4); Poco::Timestamp _time; int _tid; PADDING (4); std::string _thread; __int64 _pid; const char * _file; int _line; PADDING (4); Poco::Message::StringMap * _pMap; }"}], "body_in_train": true}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/193ee31744bf94432d70b3c672eda529a3974a56c4540d5df4e50349387210b1", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/pkey/rsa_verify_pss", "objdump": "0000000000406609 <pk_parse_key_sec1_der>:\n  406609:\t55                   \tpush   %rbp\n  40660a:\t48 89 e5             \tmov    %rsp,%rbp\n  40660d:\t48 83 ec 70          \tsub    $0x70,%rsp\n  406611:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  406615:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  406619:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  40661d:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  406621:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  406625:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  406629:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  40662d:\t48 01 d0             \tadd    %rdx,%rax\n  406630:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  406634:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  406638:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n  40663c:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  406640:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n  406645:\t48 89 c7             \tmov    %rax,%rdi\n  406648:\te8 c8 e5 00 00       \tcallq  414c15 <mbedtls_asn1_get_tag>\n  40664d:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  406650:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  406654:\t74 0d                \tje     406663 <pk_parse_key_sec1_der+0x5a>\n  406656:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  406659:\t2d 00 3d 00 00       \tsub    $0x3d00,%eax\n  40665e:\te9 f4 02 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  406663:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  406667:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40666b:\t48 01 d0             \tadd    %rdx,%rax\n  40666e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  406672:\t48 8d 55 e4          \tlea    -0x1c(%rbp),%rdx\n  406676:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  40667a:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  40667e:\t48 89 ce             \tmov    %rcx,%rsi\n  406681:\t48 89 c7             \tmov    %rax,%rdi\n  406684:\te8 81 e6 00 00       \tcallq  414d0a <mbedtls_asn1_get_int>\n  406689:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40668c:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  406690:\t74 0d                \tje     40669f <pk_parse_key_sec1_der+0x96>\n  406692:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  406695:\t2d 00 3d 00 00       \tsub    $0x3d00,%eax\n  40669a:\te9 b8 02 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  40669f:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4066a2:\t83 f8 01             \tcmp    $0x1,%eax\n  4066a5:\t74 0a                \tje     4066b1 <pk_parse_key_sec1_der+0xa8>\n  4066a7:\tb8 80 c2 ff ff       \tmov    $0xffffc280,%eax\n  4066ac:\te9 a6 02 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  4066b1:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  4066b5:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n  4066b9:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  4066bd:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n  4066c2:\t48 89 c7             \tmov    %rax,%rdi\n  4066c5:\te8 4b e5 00 00       \tcallq  414c15 <mbedtls_asn1_get_tag>\n  4066ca:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4066cd:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4066d1:\t74 0d                \tje     4066e0 <pk_parse_key_sec1_der+0xd7>\n  4066d3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4066d6:\t2d 00 3d 00 00       \tsub    $0x3d00,%eax\n  4066db:\te9 77 02 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  4066e0:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4066e4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4066e8:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n  4066ec:\t48 81 c1 f8 00 00 00 \tadd    $0xf8,%rcx\n  4066f3:\t48 89 c6             \tmov    %rax,%rsi\n  4066f6:\t48 89 cf             \tmov    %rcx,%rdi\n  4066f9:\te8 a2 03 01 00       \tcallq  416aa0 <mbedtls_mpi_read_binary>\n  4066fe:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  406701:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  406705:\t74 19                \tje     406720 <pk_parse_key_sec1_der+0x117>\n  406707:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40670b:\t48 89 c7             \tmov    %rax,%rdi\n  40670e:\te8 f6 63 01 00       \tcallq  41cb09 <mbedtls_ecp_keypair_free>\n  406713:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  406716:\t2d 00 3d 00 00       \tsub    $0x3d00,%eax\n  40671b:\te9 37 02 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  406720:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  406724:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406728:\t48 01 d0             \tadd    %rdx,%rax\n  40672b:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  40672f:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  406736:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40673a:\t48 39 45 f0          \tcmp    %rax,-0x10(%rbp)\n  40673e:\t0f 84 99 00 00 00    \tje     4067dd <pk_parse_key_sec1_der+0x1d4>\n  406744:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  406748:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n  40674c:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  406750:\tb9 a0 00 00 00       \tmov    $0xa0,%ecx\n  406755:\t48 89 c7             \tmov    %rax,%rdi\n  406758:\te8 b8 e4 00 00       \tcallq  414c15 <mbedtls_asn1_get_tag>\n  40675d:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  406760:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  406764:\t75 58                \tjne    4067be <pk_parse_key_sec1_der+0x1b5>\n  406766:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  40676a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40676e:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n  406772:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  406776:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  40677a:\t48 89 ce             \tmov    %rcx,%rsi\n  40677d:\t48 89 c7             \tmov    %rax,%rdi\n  406780:\te8 40 ed ff ff       \tcallq  4054c5 <pk_get_ecparams>\n  406785:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  406788:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40678c:\t75 1c                \tjne    4067aa <pk_parse_key_sec1_der+0x1a1>\n  40678e:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  406792:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  406796:\t48 89 d6             \tmov    %rdx,%rsi\n  406799:\t48 89 c7             \tmov    %rax,%rdi\n  40679c:\te8 d0 f4 ff ff       \tcallq  405c71 <pk_use_ecparams>\n  4067a1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4067a4:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4067a8:\t74 33                \tje     4067dd <pk_parse_key_sec1_der+0x1d4>\n  4067aa:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4067ae:\t48 89 c7             \tmov    %rax,%rdi\n  4067b1:\te8 53 63 01 00       \tcallq  41cb09 <mbedtls_ecp_keypair_free>\n  4067b6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4067b9:\te9 99 01 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  4067be:\t83 7d fc 9e          \tcmpl   $0xffffff9e,-0x4(%rbp)\n  4067c2:\t74 19                \tje     4067dd <pk_parse_key_sec1_der+0x1d4>\n  4067c4:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4067c8:\t48 89 c7             \tmov    %rax,%rdi\n  4067cb:\te8 39 63 01 00       \tcallq  41cb09 <mbedtls_ecp_keypair_free>\n  4067d0:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4067d3:\t2d 00 3d 00 00       \tsub    $0x3d00,%eax\n  4067d8:\te9 7a 01 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  4067dd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4067e1:\t48 39 45 f0          \tcmp    %rax,-0x10(%rbp)\n  4067e5:\t0f 84 d8 00 00 00    \tje     4068c3 <pk_parse_key_sec1_der+0x2ba>\n  4067eb:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  4067ef:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n  4067f3:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  4067f7:\tb9 a1 00 00 00       \tmov    $0xa1,%ecx\n  4067fc:\t48 89 c7             \tmov    %rax,%rdi\n  4067ff:\te8 11 e4 00 00       \tcallq  414c15 <mbedtls_asn1_get_tag>\n  406804:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  406807:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40680b:\t0f 85 93 00 00 00    \tjne    4068a4 <pk_parse_key_sec1_der+0x29b>\n  406811:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  406815:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406819:\t48 01 d0             \tadd    %rdx,%rax\n  40681c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  406820:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  406824:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  406828:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  40682c:\t48 89 ce             \tmov    %rcx,%rsi\n  40682f:\t48 89 c7             \tmov    %rax,%rdi\n  406832:\te8 dc e6 00 00       \tcallq  414f13 <mbedtls_asn1_get_bitstring_null>\n  406837:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40683a:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40683e:\t74 0d                \tje     40684d <pk_parse_key_sec1_der+0x244>\n  406840:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  406843:\t2d 00 3d 00 00       \tsub    $0x3d00,%eax\n  406848:\te9 0a 01 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  40684d:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  406851:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406855:\t48 01 d0             \tadd    %rdx,%rax\n  406858:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n  40685c:\t74 0a                \tje     406868 <pk_parse_key_sec1_der+0x25f>\n  40685e:\tb8 9a c2 ff ff       \tmov    $0xffffc29a,%eax\n  406863:\te9 ef 00 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  406868:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  40686c:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  406870:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  406874:\t48 89 ce             \tmov    %rcx,%rsi\n  406877:\t48 89 c7             \tmov    %rax,%rdi\n  40687a:\te8 90 f4 ff ff       \tcallq  405d0f <pk_get_ecpubkey>\n  40687f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  406882:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  406886:\t75 09                \tjne    406891 <pk_parse_key_sec1_der+0x288>\n  406888:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  40688f:\teb 32                \tjmp    4068c3 <pk_parse_key_sec1_der+0x2ba>\n  406891:\t81 7d fc 80 b1 ff ff \tcmpl   $0xffffb180,-0x4(%rbp)\n  406898:\t74 29                \tje     4068c3 <pk_parse_key_sec1_der+0x2ba>\n  40689a:\tb8 00 c3 ff ff       \tmov    $0xffffc300,%eax\n  40689f:\te9 b3 00 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  4068a4:\t83 7d fc 9e          \tcmpl   $0xffffff9e,-0x4(%rbp)\n  4068a8:\t74 19                \tje     4068c3 <pk_parse_key_sec1_der+0x2ba>\n  4068aa:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4068ae:\t48 89 c7             \tmov    %rax,%rdi\n  4068b1:\te8 53 62 01 00       \tcallq  41cb09 <mbedtls_ecp_keypair_free>\n  4068b6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4068b9:\t2d 00 3d 00 00       \tsub    $0x3d00,%eax\n  4068be:\te9 94 00 00 00       \tjmpq   406957 <pk_parse_key_sec1_der+0x34e>\n  4068c3:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  4068c7:\t75 55                \tjne    40691e <pk_parse_key_sec1_der+0x315>\n  4068c9:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4068cd:\t48 8d 48 50          \tlea    0x50(%rax),%rcx\n  4068d1:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4068d5:\t48 8d 90 f8 00 00 00 \tlea    0xf8(%rax),%rdx\n  4068dc:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4068e0:\t48 8d b0 10 01 00 00 \tlea    0x110(%rax),%rsi\n  4068e7:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4068eb:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  4068f1:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  4068f7:\t48 89 c7             \tmov    %rax,%rdi\n  4068fa:\te8 c4 9a 01 00       \tcallq  4203c3 <mbedtls_ecp_mul>\n  4068ff:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  406902:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  406906:\t74 16                \tje     40691e <pk_parse_key_sec1_der+0x315>\n  406908:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40690c:\t48 89 c7             \tmov    %rax,%rdi\n  40690f:\te8 f5 61 01 00       \tcallq  41cb09 <mbedtls_ecp_keypair_free>\n  406914:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  406917:\t2d 00 3d 00 00       \tsub    $0x3d00,%eax\n  40691c:\teb 39                \tjmp    406957 <pk_parse_key_sec1_der+0x34e>\n  40691e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  406922:\t48 8d 90 f8 00 00 00 \tlea    0xf8(%rax),%rdx\n  406929:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40692d:\t48 89 d6             \tmov    %rdx,%rsi\n  406930:\t48 89 c7             \tmov    %rax,%rdi\n  406933:\te8 23 a0 01 00       \tcallq  42095b <mbedtls_ecp_check_privkey>\n  406938:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40693b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40693f:\t74 11                \tje     406952 <pk_parse_key_sec1_der+0x349>\n  406941:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  406945:\t48 89 c7             \tmov    %rax,%rdi\n  406948:\te8 bc 61 01 00       \tcallq  41cb09 <mbedtls_ecp_keypair_free>\n  40694d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  406950:\teb 05                \tjmp    406957 <pk_parse_key_sec1_der+0x34e>\n  406952:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406957:\tc9                   \tleaveq \n  406958:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pk_parse_key_sec1_der(_DWORD *a1, __int64 a2, __int64 a3) {\n  __int64 <span class=\"supfact\">v4</span>;\n  unsigned int <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v4</span> = a2;\n  <span class=\"supfact\">v9</span> = a2 + a3;\n  <span class=\"supfact\">v11</span> = mbedtls_asn1_get_tag(&<span class=\"supfact\">v4</span>, a2 + a3,\n                                             &<span class=\"supfact\">v6</span>, Number L);\n  if (<span class=\"supfact\">v11</span>)\n    return <span class=\"supfact\">v11</span> - Number;\n  <span class=\"supfact\">v9</span> = <span class=\"supfact\">v4</span> + <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v11</span> = mbedtls_asn1_get_int(\n      &<span class=\"supfact\">v4</span>, <span class=\"supfact\">v4</span> + <span class=\"supfact\">v6</span>,\n      &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v11</span>)\n    return <span class=\"supfact\">v11</span> - Number;\n  if (<span class=\"supfact\">v7</span> != Number)\n    return Number L;\n  <span class=\"supfact\">v11</span> = mbedtls_asn1_get_tag(\n      &<span class=\"supfact\">v4</span>, <span class=\"supfact\">v9</span>, &<span class=\"supfact\">v6</span>, Number L);\n  if (<span class=\"supfact\">v11</span>)\n    return <span class=\"supfact\">v11</span> - Number;\n  <span class=\"supfact\">v11</span> = mbedtls_mpi_read_binary(a1 + Number, <span class=\"supfact\">v4</span>,\n                                                <span class=\"supfact\">v6</span>);\n  if (<span class=\"supfact\">v11</span>)\n    goto LABEL_30;\n  <span class=\"supfact\">v4</span> += <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v10</span> = Number;\n  if (<span class=\"supfact\">v9</span> != <span class=\"supfact\">v4</span>) {\n    <span class=\"supfact\">v11</span> = mbedtls_asn1_get_tag(\n        &<span class=\"supfact\">v4</span>, <span class=\"supfact\">v9</span>, &<span class=\"supfact\">v6</span>, Number L);\n    if (<span class=\"supfact\">v11</span>) {\n      if (<span class=\"supfact\">v11</span> != Number)\n        goto LABEL_30;\n    } else {\n      <span class=\"supfact\">v11</span> = pk_get_ecparams(\n          &<span class=\"supfact\">v4</span>, <span class=\"supfact\">v4</span> + <span class=\"supfact\">v6</span>,\n          <span class=\"supfact\">v5</span>);\n      if (<span class=\"supfact\">v11</span>)\n        goto LABEL_32;\n      <span class=\"supfact\">v11</span> = pk_use_ecparams(<span class=\"supfact\">v5</span>, a1);\n      if (<span class=\"supfact\">v11</span>)\n        goto LABEL_32;\n    }\n  }\n  if (<span class=\"supfact\">v9</span> == <span class=\"supfact\">v4</span>)\n    goto LABEL_28;\n  <span class=\"supfact\">v11</span> = mbedtls_asn1_get_tag(\n      &<span class=\"supfact\">v4</span>, <span class=\"supfact\">v9</span>, &<span class=\"supfact\">v6</span>, Number L);\n  if (<span class=\"supfact\">v11</span>) {\n    if (<span class=\"supfact\">v11</span> == Number)\n      goto LABEL_28;\n  LABEL_30:\n    mbedtls_ecp_keypair_free(a1);\n    return <span class=\"supfact\">v11</span> - Number;\n  }\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">v4</span> + <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v11</span> = mbedtls_asn1_get_bitstring_null(\n      &<span class=\"supfact\">v4</span>, <span class=\"supfact\">v4</span> + <span class=\"supfact\">v6</span>,\n      &<span class=\"supfact\">v6</span>);\n  if (<span class=\"supfact\">v11</span>)\n    return <span class=\"supfact\">v11</span> - Number;\n  if (<span class=\"supfact\">v8</span> != <span class=\"supfact\">v4</span> + <span class=\"supfact\">v6</span>)\n    return Number L;\n  <span class=\"supfact\">v11</span> =\n      pk_get_ecpubkey(&<span class=\"supfact\">v4</span>, <span class=\"supfact\">v8</span>, (__int64)a1);\n  if (<span class=\"supfact\">v11</span>) {\n    if (<span class=\"supfact\">v11</span> != Number)\n      return Number L;\n  } else {\n    <span class=\"supfact\">v10</span> = Number;\n  }\nLABEL_28:\n  if (!<span class=\"supfact\">v10</span>) {\n    <span class=\"supfact\">v11</span> = mbedtls_ecp_mul(a1, a1 + Number, a1 + Number,\n                                          a1 + Number, Number L, Number L);\n    if (<span class=\"supfact\">v11</span>)\n      goto LABEL_30;\n  }\n  <span class=\"supfact\">v11</span> = mbedtls_ecp_check_privkey(a1, a1 + Number);\n  if (<span class=\"supfact\">v11</span>) {\n  LABEL_32:\n    mbedtls_ecp_keypair_free(a1);\n    return <span class=\"supfact\">v11</span>;\n  }\n  return Number L;\n}", "code_t": "int __cdecl pk_parse_key_sec1_der(mbedtls_ecp_keypair_0 *eck,\n                                  const unsigned __int8 *key, size_t keylen) {\n  unsigned __int8 *<span class=\"supfact\">p</span>;\n  mbedtls_asn1_buf_0 <span class=\"supfact\">params</span>;\n  size_t <span class=\"supfact\">len</span>;\n  int <span class=\"supfact\">version</span>;\n  unsigned __int8 *<span class=\"supfact\">end2</span>;\n  unsigned __int8 *<span class=\"supfact\">end</span>;\n  int <span class=\"supfact\">pubkey_done</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">p</span> = (unsigned __int8 *)key;\n  <span class=\"supfact\">end</span> = (unsigned __int8 *)&key[keylen];\n  <span class=\"supfact\">ret</span> = mbedtls_asn1_get_tag(&<span class=\"supfact\">p</span>, &key[keylen],\n                                             &<span class=\"supfact\">len</span>, Number);\n  if (<span class=\"supfact\">ret</span>)\n    return <span class=\"supfact\">ret</span> - Number;\n  <span class=\"supfact\">end</span> = &<span class=\"supfact\">p</span>[<span class=\"supfact\">len</span>];\n  <span class=\"supfact\">ret</span> = mbedtls_asn1_get_int(\n      &<span class=\"supfact\">p</span>, &<span class=\"supfact\">p</span>[<span class=\"supfact\">len</span>],\n      &<span class=\"supfact\">version</span>);\n  if (<span class=\"supfact\">ret</span>)\n    return <span class=\"supfact\">ret</span> - Number;\n  if (<span class=\"supfact\">version</span> != Number)\n    return Number;\n  <span class=\"supfact\">ret</span> = mbedtls_asn1_get_tag(\n      &<span class=\"supfact\">p</span>, <span class=\"supfact\">end</span>, &<span class=\"supfact\">len</span>, Number);\n  if (<span class=\"supfact\">ret</span>)\n    return <span class=\"supfact\">ret</span> - Number;\n  <span class=\"supfact\">ret</span> =\n      mbedtls_mpi_read_binary(&eck->d, <span class=\"supfact\">p</span>, <span class=\"supfact\">len</span>);\n  if (<span class=\"supfact\">ret</span>)\n    goto LABEL_30;\n  <span class=\"supfact\">p</span> += <span class=\"supfact\">len</span>;\n  <span class=\"supfact\">pubkey_done</span> = Number;\n  if (<span class=\"supfact\">end</span> != <span class=\"supfact\">p</span>) {\n    <span class=\"supfact\">ret</span> = mbedtls_asn1_get_tag(\n        &<span class=\"supfact\">p</span>, <span class=\"supfact\">end</span>, &<span class=\"supfact\">len</span>, Number);\n    if (<span class=\"supfact\">ret</span>) {\n      if (<span class=\"supfact\">ret</span> != Number)\n        goto LABEL_30;\n    } else {\n      <span class=\"supfact\">ret</span> = pk_get_ecparams(\n          &<span class=\"supfact\">p</span>, &<span class=\"supfact\">p</span>[<span class=\"supfact\">len</span>],\n          &<span class=\"supfact\">params</span>);\n      if (<span class=\"supfact\">ret</span>)\n        goto LABEL_32;\n      <span class=\"supfact\">ret</span> = pk_use_ecparams(&<span class=\"supfact\">params</span>, &eck->grp);\n      if (<span class=\"supfact\">ret</span>)\n        goto LABEL_32;\n    }\n  }\n  if (<span class=\"supfact\">end</span> == <span class=\"supfact\">p</span>)\n    goto LABEL_28;\n  <span class=\"supfact\">ret</span> = mbedtls_asn1_get_tag(\n      &<span class=\"supfact\">p</span>, <span class=\"supfact\">end</span>, &<span class=\"supfact\">len</span>, Number);\n  if (<span class=\"supfact\">ret</span>) {\n    if (<span class=\"supfact\">ret</span> == Number)\n      goto LABEL_28;\n  LABEL_30:\n    mbedtls_ecp_keypair_free(eck);\n    return <span class=\"supfact\">ret</span> - Number;\n  }\n  <span class=\"supfact\">end2</span> = &<span class=\"supfact\">p</span>[<span class=\"supfact\">len</span>];\n  <span class=\"supfact\">ret</span> = mbedtls_asn1_get_bitstring_null(\n      &<span class=\"supfact\">p</span>, &<span class=\"supfact\">p</span>[<span class=\"supfact\">len</span>],\n      &<span class=\"supfact\">len</span>);\n  if (<span class=\"supfact\">ret</span>)\n    return <span class=\"supfact\">ret</span> - Number;\n  if (<span class=\"supfact\">end2</span> != &<span class=\"supfact\">p</span>[<span class=\"supfact\">len</span>])\n    return Number;\n  <span class=\"supfact\">ret</span> =\n      pk_get_ecpubkey(&<span class=\"supfact\">p</span>, <span class=\"supfact\">end2</span>, eck);\n  if (<span class=\"supfact\">ret</span>) {\n    if (<span class=\"supfact\">ret</span> != Number)\n      return Number;\n  } else {\n    <span class=\"supfact\">pubkey_done</span> = Number;\n  }\nLABEL_28:\n  if (!<span class=\"supfact\">pubkey_done</span>) {\n    <span class=\"supfact\">ret</span> = mbedtls_ecp_mul(&eck->grp, &eck->Q, &eck->d,\n                                          &eck->grp.G, Number L, Number L);\n    if (<span class=\"supfact\">ret</span>)\n      goto LABEL_30;\n  }\n  <span class=\"supfact\">ret</span> = mbedtls_ecp_check_privkey(&eck->grp, &eck->d);\n  if (<span class=\"supfact\">ret</span>) {\n  LABEL_32:\n    mbedtls_ecp_keypair_free(eck);\n    return <span class=\"supfact\">ret</span>;\n  }\n  return Number;\n}", "var": [{"name": "v5", "type": "int", "ref_name": "params", "ref_type": "struct mbedtls_asn1_buf_0 { int tag; PADDING (4); size_t len; unsigned __int8 * p; }"}], "body_in_train": true}, {"repo_owner": "Maxul", "repo_name": "sgx_vmx_protocol", "path": "Maxul/sgx_vmx_protocol/ed228d8461f93450c4c33d38c60817fedc0ab70898a8a07cd9054bc476aa0a1e", "path_in_repo": "Maxul/sgx_vmx_protocol/Sandbox/qemu-sgx-master/migration/vmstate.o", "objdump": "00000000000003fb <trace_vmstate_load_state_end>:\n     3fb:\t55                   \tpush   %rbp\n     3fc:\t48 89 e5             \tmov    %rsp,%rbp\n     3ff:\t41 54                \tpush   %r12\n     401:\t53                   \tpush   %rbx\n     402:\t48 83 ec 40          \tsub    $0x40,%rsp\n     406:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     40a:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     40e:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n     411:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     418:\t00 00 \n     41a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     41e:\t31 c0                \txor    %eax,%eax\n     420:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 426 <trace_vmstate_load_state_end+0x2b>\n     426:\t85 c0                \ttest   %eax,%eax\n     428:\t0f 95 c0             \tsetne  %al\n     42b:\t0f b6 c0             \tmovzbl %al,%eax\n     42e:\t48 85 c0             \ttest   %rax,%rax\n     431:\t74 75                \tje     4a8 <trace_vmstate_load_state_end+0xad>\n     433:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 43a <trace_vmstate_load_state_end+0x3f>\n     43a:\t66 85 c0             \ttest   %ax,%ax\n     43d:\t74 69                \tje     4a8 <trace_vmstate_load_state_end+0xad>\n     43f:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     443:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     448:\t48 89 c7             \tmov    %rax,%rdi\n     44b:\te8 00 00 00 00       \tcallq  450 <trace_vmstate_load_state_end+0x55>\n     450:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     455:\te8 16 fe ff ff       \tcallq  270 <qemu_loglevel_mask>\n     45a:\t0f b6 c0             \tmovzbl %al,%eax\n     45d:\t48 85 c0             \ttest   %rax,%rax\n     460:\t74 46                \tje     4a8 <trace_vmstate_load_state_end+0xad>\n     462:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     466:\t49 89 c4             \tmov    %rax,%r12\n     469:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     46d:\t48 89 c3             \tmov    %rax,%rbx\n     470:\te8 00 00 00 00       \tcallq  475 <trace_vmstate_load_state_end+0x7a>\n     475:\t89 c6                \tmov    %eax,%esi\n     477:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     47b:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     47f:\t48 83 ec 08          \tsub    $0x8,%rsp\n     483:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     486:\t50                   \tpush   %rax\n     487:\t49 89 c9             \tmov    %rcx,%r9\n     48a:\t49 89 d0             \tmov    %rdx,%r8\n     48d:\t4c 89 e1             \tmov    %r12,%rcx\n     490:\t48 89 da             \tmov    %rbx,%rdx\n     493:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 49a <trace_vmstate_load_state_end+0x9f>\n     49a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     49f:\te8 00 00 00 00       \tcallq  4a4 <trace_vmstate_load_state_end+0xa9>\n     4a4:\t48 83 c4 10          \tadd    $0x10,%rsp\n     4a8:\t90                   \tnop\n     4a9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4ad:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     4b4:\t00 00 \n     4b6:\t74 05                \tje     4bd <trace_vmstate_load_state_end+0xc2>\n     4b8:\te8 00 00 00 00       \tcallq  4bd <trace_vmstate_load_state_end+0xc2>\n     4bd:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     4c1:\t5b                   \tpop    %rbx\n     4c2:\t41 5c                \tpop    %r12\n     4c4:\t5d                   \tpop    %rbp\n     4c5:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_vmstate_load_state_end(const char *a1,\n                                                         const char *a2,\n                                                         unsigned int a3) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_VMSTATE_LOAD_STATE_END_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v3 = <span class=\"supfact\">tv</span>.tv_usec;\n        v4 = <span class=\"supfact\">tv</span>.tv_sec;\n        v5 = getpid();\n        qemu_log(String, v5, v4, v3, a1, a2, a3);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl trace_vmstate_load_state_end(const char *name, const char *reason,\n                                          int val) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VMSTATE_LOAD_STATE_END_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v3 = <span class=\"supfact\">_now</span>.tv_usec;\n      v4 = <span class=\"supfact\">_now</span>.tv_sec;\n      v5 = getpid();\n      qemu_log(String, v5, v4, v3, name, reason, (unsigned int)val);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "liqingqiya", "repo_name": "i", "path": "liqingqiya/i/21647b87e575fe2250d57697dfb9b298b3d3b07459efd2d201b48a31cab437c8", "path_in_repo": "liqingqiya/i/tgt/usr/tgtd.o", "objdump": "00000000000004b9 <tgt_event_add>:\n     4b9:\t55                   \tpush   %rbp\n     4ba:\t48 89 e5             \tmov    %rsp,%rbp\n     4bd:\t48 83 ec 40          \tsub    $0x40,%rsp\n     4c1:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n     4c4:\t89 75 d8             \tmov    %esi,-0x28(%rbp)\n     4c7:\t48 89 55 d0          \tmov    %rdx,-0x30(%rbp)\n     4cb:\t48 89 4d c8          \tmov    %rcx,-0x38(%rbp)\n     4cf:\tbf 28 00 00 00       \tmov    $0x28,%edi\n     4d4:\te8 00 00 00 00       \tcallq  4d9 <tgt_event_add+0x20>\n     4d9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     4dd:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     4e2:\t74 18                \tje     4fc <tgt_event_add+0x43>\n     4e4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     4e8:\tba 28 00 00 00       \tmov    $0x28,%edx\n     4ed:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     4f2:\t48 89 c7             \tmov    %rax,%rdi\n     4f5:\te8 00 00 00 00       \tcallq  4fa <tgt_event_add+0x41>\n     4fa:\teb 1d                \tjmp    519 <tgt_event_add+0x60>\n     4fc:\tba b7 00 00 00       \tmov    $0xb7,%edx\n     501:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 508 <tgt_event_add+0x4f>\n     508:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 50f <tgt_event_add+0x56>\n     50f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     514:\te8 00 00 00 00       \tcallq  519 <tgt_event_add+0x60>\n     519:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     51d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     521:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     526:\t75 0a                \tjne    532 <tgt_event_add+0x79>\n     528:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     52d:\te9 ac 00 00 00       \tjmpq   5de <tgt_event_add+0x125>\n     532:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     536:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     53a:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     53e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     542:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     546:\t48 89 10             \tmov    %rdx,(%rax)\n     549:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     54d:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n     550:\t89 50 08             \tmov    %edx,0x8(%rax)\n     553:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     557:\tba 0c 00 00 00       \tmov    $0xc,%edx\n     55c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     561:\t48 89 c7             \tmov    %rax,%rdi\n     564:\te8 00 00 00 00       \tcallq  569 <tgt_event_add+0xb0>\n     569:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     56c:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     56f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     573:\t48 89 45 e4          \tmov    %rax,-0x1c(%rbp)\n     577:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 57d <tgt_event_add+0xc4>\n     57d:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n     581:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n     584:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     589:\t89 c7                \tmov    %eax,%edi\n     58b:\te8 00 00 00 00       \tcallq  590 <tgt_event_add+0xd7>\n     590:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     593:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     597:\t74 2b                \tje     5c4 <tgt_event_add+0x10b>\n     599:\tba c4 00 00 00       \tmov    $0xc4,%edx\n     59e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5a5 <tgt_event_add+0xec>\n     5a5:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5ac <tgt_event_add+0xf3>\n     5ac:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5b1:\te8 00 00 00 00       \tcallq  5b6 <tgt_event_add+0xfd>\n     5b6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     5ba:\t48 89 c7             \tmov    %rax,%rdi\n     5bd:\te8 00 00 00 00       \tcallq  5c2 <tgt_event_add+0x109>\n     5c2:\teb 17                \tjmp    5db <tgt_event_add+0x122>\n     5c4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     5c8:\t48 83 c0 18          \tadd    $0x18,%rax\n     5cc:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5d3 <tgt_event_add+0x11a>\n     5d3:\t48 89 c7             \tmov    %rax,%rdi\n     5d6:\te8 a3 fa ff ff       \tcallq  7e <list_add>\n     5db:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     5de:\tc9                   \tleaveq \n     5df:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tgt_event_add(int a1, uint32_t a2, __int64 a3, __int64 a4) {\n  struct epoll_event <span class=\"supfact\">event</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  void *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = malloc(Number);\n  if (<span class=\"supfact\">s</span>)\n    memset(<span class=\"supfact\">s</span>, Number, Number);\n  else log_error ( String % m \\ n String tgt_event_add String ; <span class=\"supfact\">ptr</span> = <span class=\"supfact\">s</span> ; if ( ! <span class=\"supfact\">s</span> ) return Number L ; * ( ( _QWORD * ) <span class=\"supfact\">ptr</span> + Number ) = a4 ; * ( _QWORD * ) <span class=\"supfact\">ptr</span> = a3 ; * ( ( _DWORD * ) <span class=\"supfact\">ptr</span> + Number ) = a1 ; <span class=\"supfact\">event</span> . events = a2 ; <span class=\"supfact\">event</span> . data . u64 = ( uint64_t ) <span class=\"supfact\">ptr</span> ; <span class=\"supfact\">v8</span> = epoll_ctl ( ep_fd , Number , a1 , & <span class=\"supfact\">event</span> ) ; if ( <span class=\"supfact\">v8</span> ) {\n      log_error(String, String, Number L);\n      free(<span class=\"supfact\">ptr</span>); } else {\n      list_add((_QWORD *)<span class=\"supfact\">ptr</span> + Number,\n               (__int64 *)&tgt_events_list); } return <span class=\"supfact\">v8</span> ;\n}", "code_t": "int __cdecl tgt_event_add(int fd, int events, event_handler_t handler,\n                          void *data) {\n  epoll_event <span class=\"supfact\">ev</span>;\n  int <span class=\"supfact\">err</span>;\n  event_data *<span class=\"supfact\">tev</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  <span class=\"supfact\">ptr</span> = malloc(Number);\n  if (<span class=\"supfact\">ptr</span>)\n    memset(<span class=\"supfact\">ptr</span>, Number, Number);\n  else log_error ( String % m \\ n String tgt_event_add String ; <span class=\"supfact\">tev</span> = ( event_data * ) <span class=\"supfact\">ptr</span> ; if ( ! <span class=\"supfact\">ptr</span> ) return Number ; <span class=\"supfact\">tev</span> -> data = data ; <span class=\"supfact\">tev</span> -> _anon_0 . handler = handler ; <span class=\"supfact\">tev</span> -> _anon_1 . fd = fd ; <span class=\"supfact\">ev</span> . events = events ; <span class=\"supfact\">ev</span> . data . u64 = ( uint64_t ) <span class=\"supfact\">tev</span> ; <span class=\"supfact\">err</span> = epoll_ctl ( ep_fd , Number , fd , & <span class=\"supfact\">ev</span> ) ; if ( <span class=\"supfact\">err</span> ) {\n      log_error(String, String, Number L);\n      free(<span class=\"supfact\">tev</span>); } else {\n      list_add(&<span class=\"supfact\">tev</span>->e_list, &tgt_events_list); } return <span class=\"supfact\">err</span> ;\n}", "var": [{"name": "event", "type": "struct epoll_event { uint32_t events; epoll_data_t data; }", "ref_name": "ev", "ref_type": "struct epoll_event { uint32_t events; epoll_data_t data; }"}], "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/95e2976d4dbab75a04d3663dbd6d625147c011b33b8fb7696190981a0e7d946e", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_data_structures_84790dfc.o", "objdump": "0000000000003fba <_ZN4juce14PropertiesFile17setNeedsToBeSavedEb>:\n    3fba:\t55                   \tpush   %rbp\n    3fbb:\t48 89 e5             \tmov    %rsp,%rbp\n    3fbe:\t48 83 ec 20          \tsub    $0x20,%rsp\n    3fc2:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    3fc6:\t89 f0                \tmov    %esi,%eax\n    3fc8:\t88 45 e4             \tmov    %al,-0x1c(%rbp)\n    3fcb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3fcf:\t48 89 c7             \tmov    %rax,%rdi\n    3fd2:\te8 00 00 00 00       \tcallq  3fd7 <_ZN4juce14PropertiesFile17setNeedsToBeSavedEb+0x1d>\n    3fd7:\t48 89 c2             \tmov    %rax,%rdx\n    3fda:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n    3fde:\t48 89 d6             \tmov    %rdx,%rsi\n    3fe1:\t48 89 c7             \tmov    %rax,%rdi\n    3fe4:\te8 00 00 00 00       \tcallq  3fe9 <_ZN4juce14PropertiesFile17setNeedsToBeSavedEb+0x2f>\n    3fe9:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    3fed:\t0f b6 45 e4          \tmovzbl -0x1c(%rbp),%eax\n    3ff1:\t88 82 29 01 00 00    \tmov    %al,0x129(%rdx)\n    3ff7:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n    3ffb:\t48 89 c7             \tmov    %rax,%rdi\n    3ffe:\te8 00 00 00 00       \tcallq  4003 <_ZN4juce14PropertiesFile17setNeedsToBeSavedEb+0x49>\n    4003:\t90                   \tnop\n    4004:\tc9                   \tleaveq \n    4005:\tc3                   \tretq   ", "code_s": "__int64 __fastcall juce PropertiesFile\nsetNeedsToBeSaved(juce PropertiesFile *this, char a2) {\n  __int64 v2;\n  char <span class=\"supfact\">v4</span>[Number];\n  v2 = juce PropertySet getLock(this);\n  juce GenericScopedLock<juce CriticalSection> GenericScopedLock(\n      <span class=\"supfact\">v4</span>, v2);\n  *((_BYTE *)this + Number) = a2;\n  return juce GenericScopedLock<juce CriticalSection> ~GenericScopedLock(\n      <span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl juce PropertiesFile\nsetNeedsToBeSaved(juce PropertiesFile *const this, const bool needsToBeSaved_) {\n  const juce CriticalSection *v2;\n  juce ScopedLock <span class=\"supfact\">sl</span>;\n  v2 = juce PropertySet getLock((const juce PropertySet *const)this);\n  juce GenericScopedLock<juce CriticalSection> GenericScopedLock(\n      &<span class=\"supfact\">sl</span>, v2);\n  this->needsWriting = needsToBeSaved_;\n  juce GenericScopedLock<juce CriticalSection> ~GenericScopedLock(\n      &<span class=\"supfact\">sl</span>);\n}", "var": [{"name": "v4", "type": "struct juce::ScopedLock { const juce::CriticalSection * lock_; }", "ref_name": "sl", "ref_type": "struct juce::ScopedLock { const juce::CriticalSection * lock_; }"}], "body_in_train": false}, {"repo_owner": "wtlin2015", "repo_name": "git-test", "path": "wtlin2015/git-test/0dc72fa34cc2c26953bfd18c68dee40e0943dcce063d1f0d45192dd62bc364bb", "path_in_repo": "wtlin2015/git-test/YahooKeyKey-Source-1.1.2528/ExternalLibraries/UnitTest++/src/tests/TestTest.o", "objdump": "00000000000005aa <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE>:\n     5aa:\t55                   \tpush   %rbp\n     5ab:\t48 89 e5             \tmov    %rsp,%rbp\n     5ae:\t53                   \tpush   %rbx\n     5af:\t48 81 ec c8 00 00 00 \tsub    $0xc8,%rsp\n     5b6:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n     5bd:\t48 89 b5 30 ff ff ff \tmov    %rsi,-0xd0(%rbp)\n     5c4:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n     5cb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     5d0:\t48 89 c7             \tmov    %rax,%rdi\n     5d3:\te8 00 00 00 00       \tcallq  5d8 <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0x2e>\n     5d8:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n     5df:\t48 89 c7             \tmov    %rax,%rdi\n     5e2:\te8 53 ff ff ff       \tcallq  53a <_ZZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsEEN12CrashingTestC1Ev>\n     5e7:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n     5ee:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n     5f5:\t48 89 d6             \tmov    %rdx,%rsi\n     5f8:\t48 89 c7             \tmov    %rax,%rdi\n     5fb:\te8 00 00 00 00       \tcallq  600 <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0x56>\n     600:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n     607:\t48 89 c7             \tmov    %rax,%rdi\n     60a:\te8 f3 08 00 00       \tcallq  f02 <_ZZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsEEN12CrashingTestD1Ev>\n     60f:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     616:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n     61a:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     61e:\tba 3b 00 00 00       \tmov    $0x3b,%edx\n     623:\t48 89 ce             \tmov    %rcx,%rsi\n     626:\t48 89 c7             \tmov    %rax,%rdi\n     629:\te8 00 00 00 00       \tcallq  62e <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0x84>\n     62e:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n     635:\t48 89 c7             \tmov    %rax,%rdi\n     638:\te8 00 00 00 00       \tcallq  63d <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0x93>\n     63d:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n     640:\tc7 45 cc 01 00 00 00 \tmovl   $0x1,-0x34(%rbp)\n     647:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n     64b:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n     64f:\t48 8d 75 cc          \tlea    -0x34(%rbp),%rsi\n     653:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     65a:\t48 89 c7             \tmov    %rax,%rdi\n     65d:\te8 00 00 00 00       \tcallq  662 <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0xb8>\n     662:\teb 79                \tjmp    6dd <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0x133>\n     664:\t48 89 c3             \tmov    %rax,%rbx\n     667:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n     66e:\t48 89 c7             \tmov    %rax,%rdi\n     671:\te8 8c 08 00 00       \tcallq  f02 <_ZZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsEEN12CrashingTestD1Ev>\n     676:\t48 89 d8             \tmov    %rbx,%rax\n     679:\t48 89 c7             \tmov    %rax,%rdi\n     67c:\te8 00 00 00 00       \tcallq  681 <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0xd7>\n     681:\t48 89 c7             \tmov    %rax,%rdi\n     684:\te8 00 00 00 00       \tcallq  689 <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0xdf>\n     689:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     690:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n     694:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     698:\tba 3b 00 00 00       \tmov    $0x3b,%edx\n     69d:\t48 89 ce             \tmov    %rcx,%rsi\n     6a0:\t48 89 c7             \tmov    %rax,%rdi\n     6a3:\te8 00 00 00 00       \tcallq  6a8 <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0xfe>\n     6a8:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n     6ac:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n     6b3:\tba 00 00 00 00       \tmov    $0x0,%edx\n     6b8:\t48 89 ce             \tmov    %rcx,%rsi\n     6bb:\t48 89 c7             \tmov    %rax,%rdi\n     6be:\te8 00 00 00 00       \tcallq  6c3 <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0x119>\n     6c3:\te8 00 00 00 00       \tcallq  6c8 <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0x11e>\n     6c8:\teb 13                \tjmp    6dd <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0x133>\n     6ca:\t48 89 c3             \tmov    %rax,%rbx\n     6cd:\te8 00 00 00 00       \tcallq  6d2 <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0x128>\n     6d2:\t48 89 d8             \tmov    %rbx,%rax\n     6d5:\t48 89 c7             \tmov    %rax,%rdi\n     6d8:\te8 00 00 00 00       \tcallq  6dd <_ZNK12_GLOBAL__N_138TestThrowingTestsAreReportedAsFailures7RunImplERN8UnitTest11TestResultsE+0x133>\n     6dd:\t48 81 c4 c8 00 00 00 \tadd    $0xc8,%rsp\n     6e4:\t5b                   \tpop    %rbx\n     6e5:\t5d                   \tpop    %rbp\n     6e6:\tc3                   \tretq   \n     6e7:\t90                   \tnop", "code_s": "__int64 __fastcall ` anonymous namespace ' TestThrowingTestsAreReportedAsFailures RunImpl ( _anonymous_namespace_ TestThrowingTestsAreReportedAsFailures * this , UnitTest TestResults * a2 ) { char <span class=\"supfact\">v3</span> [ Number ] ; char <span class=\"supfact\">v4</span> [ Number ] ; char <span class=\"supfact\">v5</span> [ Number ] ; int <span class=\"supfact\">v6</span> ; int <span class=\"supfact\">v7</span> ; UnitTest TestResults TestResults ( <span class=\"supfact\">v3</span> , Number L ) ; ` anonymous namespace ' TestThrowingTestsAreReportedAsFailures\nRunImpl(UnitTest TestResults &) const CrashingTest\n    CrashingTest((UnitTest Test *)<span class=\"supfact\">v4</span>);\nUnitTest Test Run((UnitTest Test *)<span class=\"supfact\">v4</span>,\n                  (UnitTest TestResults *)<span class=\"supfact\">v3</span>);\n` anonymous namespace ' TestThrowingTestsAreReportedAsFailures RunImpl ( UnitTest TestResults & ) const CrashingTest ~ CrashingTest ( <span class=\"supfact\">v4</span> ) ; UnitTest TestDetails TestDetails ( <span class=\"supfact\">v5</span> , ( char * ) this + Number , Number L ) ; <span class=\"supfact\">v6</span> = UnitTest TestResults GetFailureCount ( ( UnitTest TestResults * ) <span class=\"supfact\">v3</span> ) ; <span class=\"supfact\">v7</span> = Number ; return UnitTest CheckEqual < int , int > ( a2 , & <span class=\"supfact\">v7</span> , & <span class=\"supfact\">v6</span> , <span class=\"supfact\">v5</span> ) ; }", "code_t": "void __cdecl ` anonymous namespace ' TestThrowingTestsAreReportedAsFailures RunImpl ( const ` anonymous namespace ' TestThrowingTestsAreReportedAsFailures * const this , UnitTest TestResults * testResults_ ) {\n  UnitTest TestResults <span class=\"supfact\">results</span>;\n  ` anonymous namespace ' TestThrowingTestsAreReportedAsFailures RunImpl CrashingTest <span class=\"supfact\">v3</span> ; UnitTest TestDetails <span class=\"supfact\">details</span> ; int <span class=\"supfact\">actual</span> ; int <span class=\"supfact\">expected</span> ; UnitTest TestResults TestResults ( & <span class=\"supfact\">results</span> , Number L ) ; ` anonymous namespace ' TestThrowingTestsAreReportedAsFailures\n  RunImpl(UnitTest TestResults &)\n      const CrashingTest CrashingTest(&<span class=\"supfact\">v3</span>);\n  UnitTest Test Run((UnitTest Test *)&<span class=\"supfact\">v3</span>,\n                    &<span class=\"supfact\">results</span>);\n  ` anonymous namespace ' TestThrowingTestsAreReportedAsFailures RunImpl ( UnitTest TestResults & ) const CrashingTest ~ CrashingTest ( & <span class=\"supfact\">v3</span> ) ; UnitTest TestDetails TestDetails ( & <span class=\"supfact\">details</span> , ( const UnitTest TestDetails * ) & this -> baseclass_0 [ Number ] , Number ) ; <span class=\"supfact\">actual</span> = UnitTest TestResults GetFailureCount ( & <span class=\"supfact\">results</span> ) ; <span class=\"supfact\">expected</span> = Number ; UnitTest CheckEqual < int , int > ( testResults_ , & <span class=\"supfact\">expected</span> , & <span class=\"supfact\">actual</span> , & <span class=\"supfact\">details</span> ) ; }", "var": [{"name": "v5", "type": "struct UnitTest::TestDetails { const char *const suiteName; const char *const testName; const char *const filename; const int lineNumber; PADDING (4); }", "ref_name": "details", "ref_type": "struct UnitTest::TestDetails { const char *const suiteName; const char *const testName; const char *const filename; const int lineNumber; PADDING (4); }"}, {"name": "v3", "type": "struct UnitTest::TestResults { UnitTest::TestReporter * m_testReporter; int m_totalTestCount; int m_failedTestCount; int m_failureCount; bool m_currentTestFailed; PADDING (3); }", "ref_name": "results", "ref_type": "struct UnitTest::TestResults { UnitTest::TestReporter * m_testReporter; int m_totalTestCount; int m_failedTestCount; int m_failureCount; bool m_currentTestFailed; PADDING (3); }"}], "body_in_train": false}, {"repo_owner": "axbaretto", "repo_name": "torch", "path": "axbaretto/torch/ccd3b3108ab02956fcf5f1d14c863baa19c4e9dc4bbd0ade6143e963a6af6a09", "path_in_repo": "axbaretto/torch/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "0000000000003000 <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv>:\n    3000:\t55                   \tpush   %rbp\n    3001:\t48 89 e5             \tmov    %rsp,%rbp\n    3004:\t53                   \tpush   %rbx\n    3005:\t48 83 ec 58          \tsub    $0x58,%rsp\n    3009:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    300d:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n    3011:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3016:\t48 89 c7             \tmov    %rax,%rdi\n    3019:\te8 00 00 00 00       \tcallq  301e <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0x1e>\n    301e:\t48 8d 45 e7          \tlea    -0x19(%rbp),%rax\n    3022:\t48 89 c7             \tmov    %rax,%rdi\n    3025:\te8 00 00 00 00       \tcallq  302a <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0x2a>\n    302a:\t48 8d 55 e7          \tlea    -0x19(%rbp),%rdx\n    302e:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    3032:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3037:\t48 89 c7             \tmov    %rax,%rdi\n    303a:\te8 00 00 00 00       \tcallq  303f <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0x3f>\n    303f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    3043:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3047:\t48 85 c0             \ttest   %rax,%rax\n    304a:\t0f 95 c0             \tsetne  %al\n    304d:\t0f b6 c0             \tmovzbl %al,%eax\n    3050:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    3054:\t48 89 d1             \tmov    %rdx,%rcx\n    3057:\tba 35 01 00 00       \tmov    $0x135,%edx\n    305c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3061:\t89 c7                \tmov    %eax,%edi\n    3063:\te8 00 00 00 00       \tcallq  3068 <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0x68>\n    3068:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    306c:\t48 89 c7             \tmov    %rax,%rdi\n    306f:\te8 00 00 00 00       \tcallq  3074 <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0x74>\n    3074:\t48 8d 45 e7          \tlea    -0x19(%rbp),%rax\n    3078:\t48 89 c7             \tmov    %rax,%rdi\n    307b:\te8 00 00 00 00       \tcallq  3080 <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0x80>\n    3080:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    3084:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3088:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    308c:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n    3090:\t48 89 c7             \tmov    %rax,%rdi\n    3093:\te8 00 00 00 00       \tcallq  3098 <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0x98>\n    3098:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    309c:\teb 37                \tjmp    30d5 <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0xd5>\n    309e:\t48 89 c3             \tmov    %rax,%rbx\n    30a1:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    30a5:\t48 89 c7             \tmov    %rax,%rdi\n    30a8:\te8 00 00 00 00       \tcallq  30ad <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0xad>\n    30ad:\teb 03                \tjmp    30b2 <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0xb2>\n    30af:\t48 89 c3             \tmov    %rax,%rbx\n    30b2:\t48 8d 45 e7          \tlea    -0x19(%rbp),%rax\n    30b6:\t48 89 c7             \tmov    %rax,%rdi\n    30b9:\te8 00 00 00 00       \tcallq  30be <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0xbe>\n    30be:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n    30c2:\t48 89 c7             \tmov    %rax,%rdi\n    30c5:\te8 00 00 00 00       \tcallq  30ca <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0xca>\n    30ca:\t48 89 d8             \tmov    %rbx,%rax\n    30cd:\t48 89 c7             \tmov    %rax,%rdi\n    30d0:\te8 00 00 00 00       \tcallq  30d5 <_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv+0xd5>\n    30d5:\t48 83 c4 58          \tadd    $0x58,%rsp\n    30d9:\t5b                   \tpop    %rbx\n    30da:\t5d                   \tpop    %rbp\n    30db:\tc3                   \tretq   ", "code_s": "__int64 __fastcall testing internal UntypedFunctionMockerBase\nMockObject(testing internal UntypedFunctionMockerBase *this) {\n  char <span class=\"supfact\">v2</span>[Number];\n  char <span class=\"supfact\">v3</span>[Number];\n  char <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  testing internal GTestMutexLock GTestMutexLock(\n      (testing internal GTestMutexLock *)<span class=\"supfact\">v2</span>,\n      (testing internal MutexBase *)&testing internal g_gmock_mutex);\n  std allocator<char> allocator(&<span class=\"supfact\">v4</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v3</span>, String, &<span class=\"supfact\">v4</span>);\n  testing internal Assert(*((_QWORD *)this + Number) != Number L, String,\n                          Number L, <span class=\"supfact\">v3</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v3</span>);\n  std allocator<char> ~allocator(&<span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">v5</span> = *((_QWORD *)this + Number);\n  testing internal GTestMutexLock ~GTestMutexLock(\n      (testing internal GTestMutexLock *)<span class=\"supfact\">v2</span>);\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "const void *__cdecl testing internal UntypedFunctionMockerBase\nMockObject(const testing internal UntypedFunctionMockerBase *const this) {\n  testing internal MutexLock <span class=\"supfact\">l</span>;\n  std string <span class=\"supfact\">msg</span>;\n  char <span class=\"supfact\">v4</span>;\n  const void *<span class=\"supfact\">mock_obj</span>;\n  testing internal GTestMutexLock GTestMutexLock(\n      &<span class=\"supfact\">l</span>, &testing internal g_gmock_mutex);\n  std allocator<char> allocator(&<span class=\"supfact\">v4</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(&<span class=\"supfact\">msg</span>, String, &<span class=\"supfact\">v4</span>);\n  testing internal Assert(this->mock_obj_ != Number L, String, Number,\n                          &<span class=\"supfact\">msg</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">msg</span>);\n  std allocator<char> ~allocator(&<span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">mock_obj</span> = this->mock_obj_;\n  testing internal GTestMutexLock ~GTestMutexLock(&<span class=\"supfact\">l</span>);\n  return <span class=\"supfact\">mock_obj</span>;\n}", "var": [{"name": "v3", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "msg", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v2", "type": "struct testing::internal::MutexLock { testing::internal::MutexBase *const mutex_; }", "ref_name": "l", "ref_type": "struct testing::internal::MutexLock { testing::internal::MutexBase *const mutex_; }"}], "body_in_train": true}, {"repo_owner": "hundeboll", "repo_name": "mtd-utils", "path": "hundeboll/mtd-utils/0d15f490436814af64323725f5291c5d09c6c6fdaf069cfd8a8885a402e1bafe", "path_in_repo": "hundeboll/mtd-utils//mtd_debug", "objdump": "000000000040134a <erase_flash>:\n  40134a:\t55                   \tpush   %rbp\n  40134b:\t48 89 e5             \tmov    %rsp,%rbp\n  40134e:\t48 83 ec 20          \tsub    $0x20,%rsp\n  401352:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  401355:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n  401358:\t89 55 e4             \tmov    %edx,-0x1c(%rbp)\n  40135b:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40135e:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  401361:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  401364:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  401367:\t48 8d 55 f4          \tlea    -0xc(%rbp),%rdx\n  40136b:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40136e:\t48 89 d6             \tmov    %rdx,%rsi\n  401371:\t89 c7                \tmov    %eax,%edi\n  401373:\te8 03 ff ff ff       \tcallq  40127b <memerase>\n  401378:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40137b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40137f:\t79 11                \tjns    401392 <erase_flash+0x48>\n  401381:\tbf 38 30 40 00       \tmov    $0x403038,%edi\n  401386:\te8 a5 fd ff ff       \tcallq  401130 <perror@plt>\n  40138b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401390:\teb 24                \tjmp    4013b6 <erase_flash+0x6c>\n  401392:\t48 8b 05 a7 3d 00 00 \tmov    0x3da7(%rip),%rax        # 405140 <stderr@@GLIBC_2.2.5>\n  401399:\t8b 4d e8             \tmov    -0x18(%rbp),%ecx\n  40139c:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  40139f:\tbe 48 30 40 00       \tmov    $0x403048,%esi\n  4013a4:\t48 89 c7             \tmov    %rax,%rdi\n  4013a7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013ac:\te8 2f fd ff ff       \tcallq  4010e0 <fprintf@plt>\n  4013b1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013b6:\tc9                   \tleaveq \n  4013b7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall erase_flash(int a1, unsigned int a2, unsigned int a3) {\n  __int64 result;\n  int <span class=\"supfact\">v5</span>[Number];\n  int <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v5</span>[Number] = a2;\n  <span class=\"supfact\">v5</span>[Number] = a3;\n  <span class=\"supfact\">v6</span> = memerase(a1, (__int64)<span class=\"supfact\">v5</span>);\n  if (<span class=\"supfact\">v6</span> >= Number) {\n    fprintf(stderr, String, a3, a2);\n    result = Number L;\n  } else {\n    perror(String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl erase_flash(int fd, u_int32_t offset, u_int32_t bytes) {\n  int result;\n  erase_info_user <span class=\"supfact\">erase</span>;\n  int <span class=\"supfact\">err</span>;\n  <span class=\"supfact\">erase</span>.start = offset;\n  <span class=\"supfact\">erase</span>.length = bytes;\n  <span class=\"supfact\">err</span> = memerase(fd, &<span class=\"supfact\">erase</span>);\n  if (<span class=\"supfact\">err</span> >= Number) {\n    fprintf(stderr, String, bytes, offset);\n    result = Number;\n  } else {\n    perror(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "int[2]", "ref_name": "erase", "ref_type": "struct erase_info_user { __u32 start; __u32 length; }"}], "body_in_train": false}, {"repo_owner": "hach-que", "repo_name": "roket3d", "path": "hach-que/roket3d/0e501c8c04a9fcae4d5cd4a98e25d9216e2d00a27716ac7834a526d078998f7f", "path_in_repo": "hach-que/roket3d/IDE.NET/Dependencies/Irrlicht.NET CP/Irrlicht SDK/source/Irrlicht/CSphereSceneNode.o", "objdump": "0000000000000000 <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  14:\t48 05 b8 00 00 00    \tadd    $0xb8,%rax\n  1a:\t48 89 c7             \tmov    %rax,%rdi\n  1d:\te8 00 00 00 00       \tcallq  22 <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0x22>\n  22:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  26:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  2a:\t48 05 b8 00 00 00    \tadd    $0xb8,%rax\n  30:\t48 89 c7             \tmov    %rax,%rdi\n  33:\te8 00 00 00 00       \tcallq  38 <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0x38>\n  38:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  3c:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  40:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  44:\t48 89 d6             \tmov    %rdx,%rsi\n  47:\t48 89 c7             \tmov    %rax,%rdi\n  4a:\te8 00 00 00 00       \tcallq  4f <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0x4f>\n  4f:\t84 c0                \ttest   %al,%al\n  51:\t74 6b                \tje     be <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0xbe>\n  53:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  57:\t48 89 c7             \tmov    %rax,%rdi\n  5a:\te8 00 00 00 00       \tcallq  5f <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0x5f>\n  5f:\t48 8b 00             \tmov    (%rax),%rax\n  62:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n  66:\t0f 94 c0             \tsete   %al\n  69:\t84 c0                \ttest   %al,%al\n  6b:\t74 40                \tje     ad <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0xad>\n  6d:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  71:\t48 89 c7             \tmov    %rax,%rdi\n  74:\te8 00 00 00 00       \tcallq  79 <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0x79>\n  79:\t48 8b 00             \tmov    (%rax),%rax\n  7c:\t48 8b 10             \tmov    (%rax),%rdx\n  7f:\t48 83 ea 18          \tsub    $0x18,%rdx\n  83:\t48 8b 12             \tmov    (%rdx),%rdx\n  86:\t48 01 d0             \tadd    %rdx,%rax\n  89:\t48 89 c7             \tmov    %rax,%rdi\n  8c:\te8 00 00 00 00       \tcallq  91 <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0x91>\n  91:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  95:\t48 8d 90 b8 00 00 00 \tlea    0xb8(%rax),%rdx\n  9c:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  a0:\t48 89 c6             \tmov    %rax,%rsi\n  a3:\t48 89 d7             \tmov    %rdx,%rdi\n  a6:\te8 00 00 00 00       \tcallq  ab <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0xab>\n  ab:\teb 11                \tjmp    be <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0xbe>\n  ad:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  b1:\t48 89 c7             \tmov    %rax,%rdi\n  b4:\te8 00 00 00 00       \tcallq  b9 <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0xb9>\n  b9:\te9 68 ff ff ff       \tjmpq   26 <_ZN3irr5scene10ISceneNode14removeAnimatorEPNS0_18ISceneNodeAnimatorE+0x26>\n  be:\tc9                   \tleaveq \n  bf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall irr scene ISceneNode removeAnimator(__int64 a1, __int64 a2) {\n  __int64 result;\n  _QWORD **v3;\n  __int64 <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  for (<span class=\"supfact\">i</span> =\n           irr core list<irr scene ISceneNodeAnimator *> begin(a1 + Number);\n       ; irr core list<irr scene ISceneNodeAnimator *> Iterator operator++(\n           &<span class=\"supfact\">i</span>)) {\n    <span class=\"supfact\">v5</span> =\n        irr core list<irr scene ISceneNodeAnimator *> end(a1 + Number);\n    result = irr core list<irr scene ISceneNodeAnimator *> Iterator operator!=(\n        &<span class=\"supfact\">i</span>, &<span class=\"supfact\">v5</span>);\n    if (!(_BYTE)result)\n      break;\n    if (a2 == *(_QWORD *)irr core list<irr scene ISceneNodeAnimator *> Iterator\n              operator*(&<span class=\"supfact\">i</span>)) {\n      v3 = (_QWORD **)irr core list<irr scene ISceneNodeAnimator *> Iterator\n      operator*(&<span class=\"supfact\">i</span>);\n      irr IReferenceCounted drop((\n          irr IReferenceCounted *)((char *)*v3 + *(_QWORD *)(**v3 - Number L)));\n      return irr core list<irr scene ISceneNodeAnimator *> erase(\n          a1 + Number, &<span class=\"supfact\">i</span>);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl irr scene ISceneNode removeAnimator(\n    irr scene ISceneNode *const this, irr scene ISceneNodeAnimator *animator) {\n  irr scene ISceneNodeAnimator **v2;\n  irr core list<irr scene ISceneNodeAnimator *> Iterator <span class=\"supfact\">it</span>;\n  irr core list<irr scene ISceneNodeAnimator *> Iterator <span class=\"supfact\">other</span>;\n  for (<span class=\"supfact\">it</span>.Current =\n           irr core list<irr scene ISceneNodeAnimator *> begin(&this->Animators)\n               .Current;\n       ; irr core list<irr scene ISceneNodeAnimator *> Iterator operator++(\n           &<span class=\"supfact\">it</span>)) {\n    <span class=\"supfact\">other</span>.Current =\n        irr core list<irr scene ISceneNodeAnimator *> end(&this->Animators)\n            .Current;\n    if (!irr core list<irr scene ISceneNodeAnimator *> Iterator operator!=(\n            &<span class=\"supfact\">it</span>, &<span class=\"supfact\">other</span>))\n      break;\n    if (animator ==\n        *irr core list<irr scene ISceneNodeAnimator *> Iterator operator*(\n            &<span class=\"supfact\">it</span>)) {\n      v2 = irr core list<irr scene ISceneNodeAnimator *> Iterator operator*(\n          &<span class=\"supfact\">it</span>);\n      irr IReferenceCounted drop((const irr IReferenceCounted *const)(\n          (char *)*v2 + *(_QWORD *)(*(_QWORD *)*v2 - Number L)));\n      irr core list<irr scene ISceneNodeAnimator *> erase(&this->Animators,\n                                                          &<span class=\"supfact\">it</span>);\n      return;\n    }\n  }\n}", "var": [{"name": "v5", "type": "struct irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator { irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode * Current; }", "ref_name": "other", "ref_type": "struct irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator { irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode * Current; }"}, {"name": "i", "type": "struct irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator { irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode * Current; }", "ref_name": "it", "ref_type": "struct irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator { irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode * Current; }"}], "body_in_train": true}, {"repo_owner": "victordp86", "repo_name": "Frontend2-Europa", "path": "victordp86/Frontend2-Europa/fe87ed34f86788ea5df0fb5b0290c8645bd5b1309271edc231e7bcac6d8e1f69", "path_in_repo": "victordp86/Frontend2-Europa/node-v0.10.25/deps/uv/src/unix/fs.pic.o", "objdump": "0000000000000aa1 <uv__fs_utime>:\n     aa1:\t55                   \tpush   %rbp\n     aa2:\t48 89 e5             \tmov    %rsp,%rbp\n     aa5:\t48 83 ec 20          \tsub    $0x20,%rsp\n     aa9:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     aad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ab1:\tf2 0f 10 80 20 01 00 \tmovsd  0x120(%rax),%xmm0\n     ab8:\t00 \n     ab9:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n     abe:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     ac2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ac6:\tf2 0f 10 80 28 01 00 \tmovsd  0x128(%rax),%xmm0\n     acd:\t00 \n     ace:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n     ad3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     ad7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     adb:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n     adf:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n     ae3:\t48 89 d6             \tmov    %rdx,%rsi\n     ae6:\t48 89 c7             \tmov    %rax,%rdi\n     ae9:\te8 00 00 00 00       \tcallq  aee <uv__fs_utime+0x4d>\n     aee:\t48 98                \tcltq   \n     af0:\tc9                   \tleaveq \n     af1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall uv__fs_utime(__int64 a1) {\n  struct utimbuf <span class=\"supfact\">file_times</span>;\n  <span class=\"supfact\">file_times</span>.actime =\n      (unsigned int)(int)*(double *)(a1 + Number);\n  <span class=\"supfact\">file_times</span>.modtime =\n      (unsigned int)(int)*(double *)(a1 + Number);\n  return utime(*(const char **)(a1 + Number), &<span class=\"supfact\">file_times</span>);\n}", "code_t": "ssize_t __cdecl uv__fs_utime(uv_fs_t *req) {\n  utimbuf <span class=\"supfact\">buf</span>;\n  <span class=\"supfact\">buf</span>.actime = (unsigned int)(int)req->atime;\n  <span class=\"supfact\">buf</span>.modtime = (unsigned int)(int)req->mtime;\n  return utime(req->path, &<span class=\"supfact\">buf</span>);\n}", "var": [{"name": "file_times", "type": "struct utimbuf { __time_t actime; __time_t modtime; }", "ref_name": "buf", "ref_type": "struct utimbuf { __time_t actime; __time_t modtime; }"}], "body_in_train": false}, {"repo_owner": "hustustor", "repo_name": "simplecfs", "path": "hustustor/simplecfs/6c5ab0dd6945359d509bb39dd892f6e9585bd63c429d2d0586134a818ccbbd9f", "path_in_repo": "hustustor/simplecfs/ext/redis/deps/lua/src/luac", "objdump": "0000000000403111 <lua_isnumber>:\n  403111:\t55                   \tpush   %rbp\n  403112:\t48 89 e5             \tmov    %rsp,%rbp\n  403115:\t48 83 ec 30          \tsub    $0x30,%rsp\n  403119:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  40311d:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  403120:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  403123:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403127:\t89 d6                \tmov    %edx,%esi\n  403129:\t48 89 c7             \tmov    %rax,%rdi\n  40312c:\te8 d8 f6 ff ff       \tcallq  402809 <index2adr>\n  403131:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  403135:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  403139:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40313c:\t83 f8 03             \tcmp    $0x3,%eax\n  40313f:\t74 1e                \tje     40315f <lua_isnumber+0x4e>\n  403141:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  403145:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  403149:\t48 89 d6             \tmov    %rdx,%rsi\n  40314c:\t48 89 c7             \tmov    %rax,%rdi\n  40314f:\te8 bf f6 00 00       \tcallq  412813 <luaV_tonumber>\n  403154:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  403158:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40315d:\t74 07                \tje     403166 <lua_isnumber+0x55>\n  40315f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  403164:\teb 05                \tjmp    40316b <lua_isnumber+0x5a>\n  403166:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40316b:\tc9                   \tleaveq \n  40316c:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall lua_isnumber(__int64 a1, int a2) {\n  _BOOL8 result;\n  char <span class=\"supfact\">v3</span>[Number];\n  _DWORD *<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = index2adr(a1, a2);\n  result = Number;\n  if (<span class=\"supfact\">v4</span>[Number] != Number) {\n    <span class=\"supfact\">v4</span> =\n        (_DWORD *)luaV_tonumber(<span class=\"supfact\">v4</span>, <span class=\"supfact\">v3</span>);\n    if (!<span class=\"supfact\">v4</span>)\n      result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl lua_isnumber(lua_State_0 *L, int idx) {\n  int result;\n  TValue <span class=\"supfact\">n</span>;\n  const TValue *<span class=\"supfact\">o</span>;\n  <span class=\"supfact\">o</span> = index2adr(L, idx);\n  result = Number;\n  if (<span class=\"supfact\">o</span>->tt != Number) {\n    <span class=\"supfact\">o</span> = luaV_tonumber(<span class=\"supfact\">o</span>, &<span class=\"supfact\">n</span>);\n    if (!<span class=\"supfact\">o</span>)\n      result = Number;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "struct TValue { Value value; int tt; PADDING (4); }", "ref_name": "n", "ref_type": "struct TValue { Value value; int tt; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "liqingqiya", "repo_name": "i", "path": "liqingqiya/i/21647b87e575fe2250d57697dfb9b298b3d3b07459efd2d201b48a31cab437c8", "path_in_repo": "liqingqiya/i/tgt/usr/tgtd.o", "objdump": "00000000000004b9 <tgt_event_add>:\n     4b9:\t55                   \tpush   %rbp\n     4ba:\t48 89 e5             \tmov    %rsp,%rbp\n     4bd:\t48 83 ec 40          \tsub    $0x40,%rsp\n     4c1:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n     4c4:\t89 75 d8             \tmov    %esi,-0x28(%rbp)\n     4c7:\t48 89 55 d0          \tmov    %rdx,-0x30(%rbp)\n     4cb:\t48 89 4d c8          \tmov    %rcx,-0x38(%rbp)\n     4cf:\tbf 28 00 00 00       \tmov    $0x28,%edi\n     4d4:\te8 00 00 00 00       \tcallq  4d9 <tgt_event_add+0x20>\n     4d9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     4dd:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     4e2:\t74 18                \tje     4fc <tgt_event_add+0x43>\n     4e4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     4e8:\tba 28 00 00 00       \tmov    $0x28,%edx\n     4ed:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     4f2:\t48 89 c7             \tmov    %rax,%rdi\n     4f5:\te8 00 00 00 00       \tcallq  4fa <tgt_event_add+0x41>\n     4fa:\teb 1d                \tjmp    519 <tgt_event_add+0x60>\n     4fc:\tba b7 00 00 00       \tmov    $0xb7,%edx\n     501:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 508 <tgt_event_add+0x4f>\n     508:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 50f <tgt_event_add+0x56>\n     50f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     514:\te8 00 00 00 00       \tcallq  519 <tgt_event_add+0x60>\n     519:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     51d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     521:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     526:\t75 0a                \tjne    532 <tgt_event_add+0x79>\n     528:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     52d:\te9 ac 00 00 00       \tjmpq   5de <tgt_event_add+0x125>\n     532:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     536:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     53a:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     53e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     542:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     546:\t48 89 10             \tmov    %rdx,(%rax)\n     549:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     54d:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n     550:\t89 50 08             \tmov    %edx,0x8(%rax)\n     553:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     557:\tba 0c 00 00 00       \tmov    $0xc,%edx\n     55c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     561:\t48 89 c7             \tmov    %rax,%rdi\n     564:\te8 00 00 00 00       \tcallq  569 <tgt_event_add+0xb0>\n     569:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     56c:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     56f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     573:\t48 89 45 e4          \tmov    %rax,-0x1c(%rbp)\n     577:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 57d <tgt_event_add+0xc4>\n     57d:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n     581:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n     584:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     589:\t89 c7                \tmov    %eax,%edi\n     58b:\te8 00 00 00 00       \tcallq  590 <tgt_event_add+0xd7>\n     590:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     593:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     597:\t74 2b                \tje     5c4 <tgt_event_add+0x10b>\n     599:\tba c4 00 00 00       \tmov    $0xc4,%edx\n     59e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5a5 <tgt_event_add+0xec>\n     5a5:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5ac <tgt_event_add+0xf3>\n     5ac:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5b1:\te8 00 00 00 00       \tcallq  5b6 <tgt_event_add+0xfd>\n     5b6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     5ba:\t48 89 c7             \tmov    %rax,%rdi\n     5bd:\te8 00 00 00 00       \tcallq  5c2 <tgt_event_add+0x109>\n     5c2:\teb 17                \tjmp    5db <tgt_event_add+0x122>\n     5c4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     5c8:\t48 83 c0 18          \tadd    $0x18,%rax\n     5cc:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5d3 <tgt_event_add+0x11a>\n     5d3:\t48 89 c7             \tmov    %rax,%rdi\n     5d6:\te8 a3 fa ff ff       \tcallq  7e <list_add>\n     5db:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     5de:\tc9                   \tleaveq \n     5df:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tgt_event_add(int a1, uint32_t a2, __int64 a3, __int64 a4) {\n  struct epoll_event <span class=\"supfact\">event</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  void *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = malloc(Number);\n  if (<span class=\"supfact\">s</span>)\n    memset(<span class=\"supfact\">s</span>, Number, Number);\n  else log_error ( String % m \\ n String tgt_event_add String ; <span class=\"supfact\">ptr</span> = <span class=\"supfact\">s</span> ; if ( ! <span class=\"supfact\">s</span> ) return Number L ; * ( ( _QWORD * ) <span class=\"supfact\">ptr</span> + Number ) = a4 ; * ( _QWORD * ) <span class=\"supfact\">ptr</span> = a3 ; * ( ( _DWORD * ) <span class=\"supfact\">ptr</span> + Number ) = a1 ; <span class=\"supfact\">event</span> . events = a2 ; <span class=\"supfact\">event</span> . data . u64 = ( uint64_t ) <span class=\"supfact\">ptr</span> ; <span class=\"supfact\">v8</span> = epoll_ctl ( ep_fd , Number , a1 , & <span class=\"supfact\">event</span> ) ; if ( <span class=\"supfact\">v8</span> ) {\n      log_error(String, String, Number L);\n      free(<span class=\"supfact\">ptr</span>); } else {\n      list_add((_QWORD *)<span class=\"supfact\">ptr</span> + Number,\n               (__int64 *)&tgt_events_list); } return <span class=\"supfact\">v8</span> ;\n}", "code_t": "int __cdecl tgt_event_add(int fd, int events, event_handler_t handler,\n                          void *data) {\n  epoll_event <span class=\"supfact\">ev</span>;\n  int <span class=\"supfact\">err</span>;\n  event_data *<span class=\"supfact\">tev</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  <span class=\"supfact\">ptr</span> = malloc(Number);\n  if (<span class=\"supfact\">ptr</span>)\n    memset(<span class=\"supfact\">ptr</span>, Number, Number);\n  else log_error ( String % m \\ n String tgt_event_add String ; <span class=\"supfact\">tev</span> = ( event_data * ) <span class=\"supfact\">ptr</span> ; if ( ! <span class=\"supfact\">ptr</span> ) return Number ; <span class=\"supfact\">tev</span> -> data = data ; <span class=\"supfact\">tev</span> -> _anon_0 . handler = handler ; <span class=\"supfact\">tev</span> -> _anon_1 . fd = fd ; <span class=\"supfact\">ev</span> . events = events ; <span class=\"supfact\">ev</span> . data . u64 = ( uint64_t ) <span class=\"supfact\">tev</span> ; <span class=\"supfact\">err</span> = epoll_ctl ( ep_fd , Number , fd , & <span class=\"supfact\">ev</span> ) ; if ( <span class=\"supfact\">err</span> ) {\n      log_error(String, String, Number L);\n      free(<span class=\"supfact\">tev</span>); } else {\n      list_add(&<span class=\"supfact\">tev</span>->e_list, &tgt_events_list); } return <span class=\"supfact\">err</span> ;\n}", "var": [{"name": "event", "type": "struct epoll_event { uint32_t events; epoll_data_t data; }", "ref_name": "ev", "ref_type": "struct epoll_event { uint32_t events; epoll_data_t data; }"}], "body_in_train": false}, {"repo_owner": "lolo32", "repo_name": "mupdf-mirror", "path": "lolo32/mupdf-mirror/28a42b0b2eb9b2e4094d561b34d1554cad28a9b19560ae9aaa0ba9348a73310b", "path_in_repo": "lolo32/mupdf-mirror//build/debug/platform/x11/curl/pdfapp.o", "objdump": "0000000000002454 <pdfapp_updatepage>:\n    2454:\t55                   \tpush   %rbp\n    2455:\t48 89 e5             \tmov    %rsp,%rbp\n    2458:\t48 83 ec 60          \tsub    $0x60,%rsp\n    245c:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    2460:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2464:\t48 8b 00             \tmov    (%rax),%rax\n    2467:\t48 89 c7             \tmov    %rax,%rdi\n    246a:\te8 00 00 00 00       \tcallq  246f <pdfapp_updatepage+0x1b>\n    246f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2473:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    2477:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    247b:\t48 89 d6             \tmov    %rdx,%rsi\n    247e:\t48 89 c7             \tmov    %rax,%rdi\n    2481:\te8 27 f1 ff ff       \tcallq  15ad <pdfapp_viewctm>\n    2486:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    248a:\t48 8b 90 a8 00 00 00 \tmov    0xa8(%rax),%rdx\n    2491:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2495:\t48 89 d6             \tmov    %rdx,%rsi\n    2498:\t48 89 c7             \tmov    %rax,%rdi\n    249b:\te8 00 00 00 00       \tcallq  24a0 <pdfapp_updatepage+0x4c>\n    24a0:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    24a4:\t48 89 c7             \tmov    %rax,%rdi\n    24a7:\te8 8d fb ff ff       \tcallq  2039 <pdfapp_recreate_annotationslist>\n    24ac:\te9 c8 00 00 00       \tjmpq   2579 <pdfapp_updatepage+0x125>\n    24b1:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    24b5:\t48 8b 00             \tmov    (%rax),%rax\n    24b8:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    24bc:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    24c0:\t48 89 ce             \tmov    %rcx,%rsi\n    24c3:\t48 89 c7             \tmov    %rax,%rdi\n    24c6:\te8 00 00 00 00       \tcallq  24cb <pdfapp_updatepage+0x77>\n    24cb:\t48 89 c2             \tmov    %rax,%rdx\n    24ce:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    24d2:\t48 89 c6             \tmov    %rax,%rsi\n    24d5:\t48 89 d7             \tmov    %rdx,%rdi\n    24d8:\te8 00 00 00 00       \tcallq  24dd <pdfapp_updatepage+0x89>\n    24dd:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    24e1:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    24e5:\t48 89 d6             \tmov    %rdx,%rsi\n    24e8:\t48 89 c7             \tmov    %rax,%rdi\n    24eb:\te8 00 00 00 00       \tcallq  24f0 <pdfapp_updatepage+0x9c>\n    24f0:\t48 89 c2             \tmov    %rax,%rdx\n    24f3:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    24f7:\t48 89 d6             \tmov    %rdx,%rsi\n    24fa:\t48 89 c7             \tmov    %rax,%rdi\n    24fd:\te8 00 00 00 00       \tcallq  2502 <pdfapp_updatepage+0xae>\n    2502:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2506:\t48 8b 70 30          \tmov    0x30(%rax),%rsi\n    250a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    250e:\t48 8b 80 80 28 00 00 \tmov    0x2880(%rax),%rax\n    2515:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    2519:\t48 89 d1             \tmov    %rdx,%rcx\n    251c:\tba ff 00 00 00       \tmov    $0xff,%edx\n    2521:\t48 89 c7             \tmov    %rax,%rdi\n    2524:\te8 00 00 00 00       \tcallq  2529 <pdfapp_updatepage+0xd5>\n    2529:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    252d:\t48 8b 48 30          \tmov    0x30(%rax),%rcx\n    2531:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2535:\t48 8b 80 80 28 00 00 \tmov    0x2880(%rax),%rax\n    253c:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    2540:\t48 89 ce             \tmov    %rcx,%rsi\n    2543:\t48 89 c7             \tmov    %rax,%rdi\n    2546:\te8 00 00 00 00       \tcallq  254b <pdfapp_updatepage+0xf7>\n    254b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    254f:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n    2553:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    2557:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    255b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    255f:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    2565:\t48 89 c7             \tmov    %rax,%rdi\n    2568:\te8 39 fe ff ff       \tcallq  23a6 <pdfapp_runpage>\n    256d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2571:\t48 89 c7             \tmov    %rax,%rdi\n    2574:\te8 00 00 00 00       \tcallq  2579 <pdfapp_updatepage+0x125>\n    2579:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    257d:\t48 8b 90 a8 00 00 00 \tmov    0xa8(%rax),%rdx\n    2584:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2588:\t48 89 d6             \tmov    %rdx,%rsi\n    258b:\t48 89 c7             \tmov    %rax,%rdi\n    258e:\te8 00 00 00 00       \tcallq  2593 <pdfapp_updatepage+0x13f>\n    2593:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2597:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    259c:\t0f 85 0f ff ff ff    \tjne    24b1 <pdfapp_updatepage+0x5d>\n    25a2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    25a6:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    25ac:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    25b2:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    25b7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    25bc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    25c1:\t48 89 c7             \tmov    %rax,%rdi\n    25c4:\te8 76 01 00 00       \tcallq  273f <pdfapp_showpage>\n    25c9:\t90                   \tnop\n    25ca:\tc9                   \tleaveq \n    25cb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pdfapp_updatepage(_QWORD *a1, double a2) {\n  __int64 v2;\n  __int64 v3;\n  char <span class=\"supfact\">v5</span>[Number];\n  char <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = pdf_specifics(*a1);\n  pdfapp_viewctm((__int64)<span class=\"supfact\">v7</span>, (__int64)a1, a2);\n  pdf_update_page(<span class=\"supfact\">v10</span>, a1[Number]);\n  pdfapp_recreate_annotationslist(a1);\n  while (Number) {\n    <span class=\"supfact\">v9</span> =\n        pdf_poll_changed_annot(<span class=\"supfact\">v10</span>, a1[Number]);\n    if (!<span class=\"supfact\">v9</span>)\n      break;\n    v2 = fz_bound_annot(*a1, <span class=\"supfact\">v9</span>, <span class=\"supfact\">v6</span>);\n    fz_transform_rect(v2, <span class=\"supfact\">v7</span>);\n    v3 = fz_round_rect(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>);\n    fz_rect_from_irect(<span class=\"supfact\">v6</span>, v3);\n    fz_clear_pixmap_rect_with_value(a1[Number], a1[Number], Number L,\n                                    <span class=\"supfact\">v5</span>);\n    <span class=\"supfact\">v8</span> = fz_new_draw_device_with_bbox(a1[Number], a1[Number],\n                                                      <span class=\"supfact\">v5</span>);\n    pdfapp_runpage((__int64)a1, <span class=\"supfact\">v8</span>, (__int64)<span class=\"supfact\">v7</span>,\n                   (__int64)<span class=\"supfact\">v6</span>, Number L);\n    fz_free_device(<span class=\"supfact\">v8</span>);\n  }\n  return pdfapp_showpage(a1, Number L, Number L, Number L, Number L, Number L);\n}", "code_t": "void __cdecl pdfapp_updatepage(pdfapp_t *app) {\n  __int64 v1;\n  __int64 v2;\n  fz_irect <span class=\"supfact\">ibounds</span>;\n  fz_rect <span class=\"supfact\">bounds</span>;\n  fz_matrix <span class=\"supfact\">ctm</span>;\n  fz_device *<span class=\"supfact\">idev</span>;\n  fz_annot *<span class=\"supfact\">annot</span>;\n  pdf_document *<span class=\"supfact\">idoc</span>;\n  <span class=\"supfact\">idoc</span> = (pdf_document *)pdf_specifics(app->doc);\n  pdfapp_viewctm(&<span class=\"supfact\">ctm</span>, app);\n  pdf_update_page(<span class=\"supfact\">idoc</span>, app->page);\n  pdfapp_recreate_annotationslist(app);\n  while (Number) {\n    <span class=\"supfact\">annot</span> =\n        (fz_annot *)pdf_poll_changed_annot(<span class=\"supfact\">idoc</span>, app->page);\n    if (!<span class=\"supfact\">annot</span>)\n      break;\n    v1 = fz_bound_annot(app->doc, <span class=\"supfact\">annot</span>,\n                        &<span class=\"supfact\">bounds</span>);\n    fz_transform_rect(v1, &<span class=\"supfact\">ctm</span>);\n    v2 = fz_round_rect(&<span class=\"supfact\">ibounds</span>, &<span class=\"supfact\">bounds</span>);\n    fz_rect_from_irect(&<span class=\"supfact\">bounds</span>, v2);\n    fz_clear_pixmap_rect_with_value(app->ctx, app->image, Number L,\n                                    &<span class=\"supfact\">ibounds</span>);\n    <span class=\"supfact\">idev</span> = (fz_device *)fz_new_draw_device_with_bbox(\n        app->ctx, app->image, &<span class=\"supfact\">ibounds</span>);\n    pdfapp_runpage(app, <span class=\"supfact\">idev</span>, &<span class=\"supfact\">ctm</span>,\n                   &<span class=\"supfact\">bounds</span>, Number L);\n    fz_free_device(<span class=\"supfact\">idev</span>);\n  }\n  pdfapp_showpage(app, Number, Number, Number, Number, Number);\n}", "var": [{"name": "v7", "type": "struct fz_matrix { float a; float b; float c; float d; float e; float f; }", "ref_name": "ctm", "ref_type": "struct fz_matrix { float a; float b; float c; float d; float e; float f; }"}, {"name": "v6", "type": "struct fz_rect { float x0; float y0; float x1; float y1; }", "ref_name": "bounds", "ref_type": "struct fz_rect { float x0; float y0; float x1; float y1; }"}, {"name": "v5", "type": "struct fz_irect { int x0; int y0; int x1; int y1; }", "ref_name": "ibounds", "ref_type": "struct fz_irect { int x0; int y0; int x1; int y1; }"}], "body_in_train": true}, {"repo_owner": "kamontat", "repo_name": "PAPI-Matrix", "path": "kamontat/PAPI-Matrix/deb390af6adc7095191e3bf11f258a39ad6a7a0f705d29592fa160ce30193633", "path_in_repo": "kamontat/PAPI-Matrix/papi-5.5.1/src/libpfm-3.y/examples_v2.x/check_events", "objdump": "0000000000410148 <pfm_nhm_get_event_code>:\n  410148:\t55                   \tpush   %rbp\n  410149:\t48 89 e5             \tmov    %rsp,%rbp\n  41014c:\t48 83 ec 50          \tsub    $0x50,%rsp\n  410150:\t89 7d bc             \tmov    %edi,-0x44(%rbp)\n  410153:\t89 75 b8             \tmov    %esi,-0x48(%rbp)\n  410156:\t48 89 55 b0          \tmov    %rdx,-0x50(%rbp)\n  41015a:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  41015e:\t48 89 c7             \tmov    %rax,%rdi\n  410161:\te8 ba 28 ff ff       \tcallq  402a20 <pfm_get_impl_counters>\n  410166:\t83 7d b8 ff          \tcmpl   $0xffffffff,-0x48(%rbp)\n  41016a:\t74 22                \tje     41018e <pfm_nhm_get_event_code+0x46>\n  41016c:\t83 7d b8 1c          \tcmpl   $0x1c,-0x48(%rbp)\n  410170:\t77 15                \tja     410187 <pfm_nhm_get_event_code+0x3f>\n  410172:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n  410175:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  410179:\t89 d6                \tmov    %edx,%esi\n  41017b:\t48 89 c7             \tmov    %rax,%rdi\n  41017e:\te8 10 cb ff ff       \tcallq  40cc93 <pfm_regmask_isset>\n  410183:\t85 c0                \ttest   %eax,%eax\n  410185:\t75 07                \tjne    41018e <pfm_nhm_get_event_code+0x46>\n  410187:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n  41018c:\teb 1a                \tjmp    4101a8 <pfm_nhm_get_event_code+0x60>\n  41018e:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  410191:\t89 c7                \tmov    %eax,%edi\n  410193:\te8 a7 cc ff ff       \tcallq  40ce3f <get_nhm_entry>\n  410198:\t8b 40 10             \tmov    0x10(%rax),%eax\n  41019b:\t89 c2                \tmov    %eax,%edx\n  41019d:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  4101a1:\t89 10                \tmov    %edx,(%rax)\n  4101a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4101a8:\tc9                   \tleaveq \n  4101a9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pfm_nhm_get_event_code(unsigned int a1, unsigned int a2,\n                                          _DWORD *a3) {\n  char <span class=\"supfact\">v5</span>[Number];\n  pfm_get_impl_counters(<span class=\"supfact\">v5</span>);\n  if (a2 != Number &&\n      (a2 > Number || !pfm_regmask_isset_5((__int64)<span class=\"supfact\">v5</span>, a2)))\n    return Number L;\n  *a3 = *(_DWORD *)(get_nhm_entry(a1) + Number);\n  return Number L;\n}", "code_t": "int __cdecl pfm_nhm_get_event_code(unsigned int i, unsigned int cnt,\n                                   int *code) {\n  pfmlib_regmask_t <span class=\"supfact\">cnts</span>;\n  pfm_get_impl_counters(&<span class=\"supfact\">cnts</span>);\n  if (cnt != Number &&\n      (cnt > Number || !pfm_regmask_isset_5(&<span class=\"supfact\">cnts</span>, cnt)))\n    return Number;\n  *code = get_nhm_entry(i)->pme_code;\n  return Number;\n}", "var": [{"name": "v5", "type": "struct pfmlib_regmask_t { pfmlib_regmask_bits_t[8] bits; }", "ref_name": "cnts", "ref_type": "struct pfmlib_regmask_t { pfmlib_regmask_bits_t[8] bits; }"}], "body_in_train": true}, {"repo_owner": "jerryos", "repo_name": "ffmpeg", "path": "jerryos/ffmpeg/ec7c7ec631f866d0ab506cfb44b6c696ce698e60287359bfbbf1364522acdceb", "path_in_repo": "jerryos/ffmpeg//libavformat/id3v2enc.o", "objdump": "0000000000001138 <ff_id3v2_write_simple>:\n    1138:\t48 83 ec 48          \tsub    $0x48,%rsp\n    113c:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    1141:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n    1145:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    114a:\t48 c7 44 24 20 00 00 \tmovq   $0x0,0x20(%rsp)\n    1151:\t00 00 \n    1153:\t48 c7 44 24 28 00 00 \tmovq   $0x0,0x28(%rsp)\n    115a:\t00 00 \n    115c:\t48 c7 44 24 30 00 00 \tmovq   $0x0,0x30(%rsp)\n    1163:\t00 00 \n    1165:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    116a:\t48 8b 70 20          \tmov    0x20(%rax),%rsi\n    116e:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    1173:\t8b 54 24 14          \tmov    0x14(%rsp),%edx\n    1177:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    117c:\t48 89 c7             \tmov    %rax,%rdi\n    117f:\te8 00 00 00 00       \tcallq  1184 <ff_id3v2_write_simple+0x4c>\n    1184:\t48 8d 54 24 20       \tlea    0x20(%rsp),%rdx\n    1189:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    118e:\t48 89 d6             \tmov    %rdx,%rsi\n    1191:\t48 89 c7             \tmov    %rax,%rdi\n    1194:\te8 00 00 00 00       \tcallq  1199 <ff_id3v2_write_simple+0x61>\n    1199:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n    119d:\t83 7c 24 3c 00       \tcmpl   $0x0,0x3c(%rsp)\n    11a2:\t79 06                \tjns    11aa <ff_id3v2_write_simple+0x72>\n    11a4:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n    11a8:\teb 29                \tjmp    11d3 <ff_id3v2_write_simple+0x9b>\n    11aa:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    11af:\t8b 90 60 05 00 00    \tmov    0x560(%rax),%edx\n    11b5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    11ba:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n    11be:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    11c3:\t48 89 ce             \tmov    %rcx,%rsi\n    11c6:\t48 89 c7             \tmov    %rax,%rdi\n    11c9:\te8 00 00 00 00       \tcallq  11ce <ff_id3v2_write_simple+0x96>\n    11ce:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    11d3:\t48 83 c4 48          \tadd    $0x48,%rsp\n    11d7:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall ff_id3v2_write_simple(__int64 a1, int a2, char *a3) {\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  unsigned int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  ff_id3v2_start((__int64)<span class=\"supfact\">v4</span>, *(_QWORD *)(a1 + Number), a2, a3);\n  <span class=\"supfact\">v5</span> = ff_id3v2_write_metadata(a1, <span class=\"supfact\">v4</span>);\n  if ((<span class=\"supfact\">v5</span> & Number) != Number)\n    return <span class=\"supfact\">v5</span>;\n  ff_id3v2_finish((__int64)<span class=\"supfact\">v4</span>, *(_QWORD *)(a1 + Number),\n                  *(_DWORD *)(a1 + Number));\n  return Number L;\n}", "code_t": "int __cdecl ff_id3v2_write_simple(AVFormatContext *s, int id3v2_version,\n                                  const char *magic) {\n  ID3v2EncContext_0 <span class=\"supfact\">id3</span>;\n  int <span class=\"supfact\">ret</span>;\n  *(_QWORD *)&<span class=\"supfact\">id3</span>.version = Number L;\n  <span class=\"supfact\">id3</span>.size_pos = Number L;\n  *(_QWORD *)&<span class=\"supfact\">id3</span>.len = Number L;\n  ff_id3v2_start(&<span class=\"supfact\">id3</span>, s->pb, id3v2_version, magic);\n  <span class=\"supfact\">ret</span> = ff_id3v2_write_metadata(s, &<span class=\"supfact\">id3</span>);\n  if (<span class=\"supfact\">ret</span> < Number)\n    return <span class=\"supfact\">ret</span>;\n  ff_id3v2_finish(&<span class=\"supfact\">id3</span>, s->pb, s->metadata_header_padding);\n  return Number;\n}", "var": [{"name": "v4", "type": "struct ID3v2EncContext_0 { int version; PADDING (4); int64_t size_pos; int len; PADDING (4); }", "ref_name": "id3", "ref_type": "struct ID3v2EncContext_0 { int version; PADDING (4); int64_t size_pos; int len; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "OptiPop", "repo_name": "kernel_asus_grouper", "path": "OptiPop/kernel_asus_grouper/ba82af2728feab452516683d5ca142d28af9820f3bc67a716e1bcd612169202c", "path_in_repo": "OptiPop/kernel_asus_grouper//scripts/kconfig/conf", "objdump": "0000000000413e39 <get_relations_str>:\n  413e39:\t48 83 ec 48          \tsub    $0x48,%rsp\n  413e3d:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n  413e42:\t48 89 34 24          \tmov    %rsi,(%rsp)\n  413e46:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  413e4b:\t48 89 c7             \tmov    %rax,%rdi\n  413e4e:\te8 ac 51 ff ff       \tcallq  408fff <str_new>\n  413e53:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n  413e5a:\t00 \n  413e5b:\teb 1a                \tjmp    413e77 <get_relations_str+0x3e>\n  413e5d:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n  413e62:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  413e67:\t48 89 d6             \tmov    %rdx,%rsi\n  413e6a:\t48 89 c7             \tmov    %rax,%rdi\n  413e6d:\te8 78 fd ff ff       \tcallq  413bea <get_symbol_str>\n  413e72:\t83 44 24 3c 01       \taddl   $0x1,0x3c(%rsp)\n  413e77:\t48 83 3c 24 00       \tcmpq   $0x0,(%rsp)\n  413e7c:\t74 25                \tje     413ea3 <get_relations_str+0x6a>\n  413e7e:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n  413e82:\t48 98                \tcltq   \n  413e84:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  413e8b:\t00 \n  413e8c:\t48 8b 04 24          \tmov    (%rsp),%rax\n  413e90:\t48 01 d0             \tadd    %rdx,%rax\n  413e93:\t48 8b 00             \tmov    (%rax),%rax\n  413e96:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n  413e9b:\t48 83 7c 24 30 00    \tcmpq   $0x0,0x30(%rsp)\n  413ea1:\t75 ba                \tjne    413e5d <get_relations_str+0x24>\n  413ea3:\t83 7c 24 3c 00       \tcmpl   $0x0,0x3c(%rsp)\n  413ea8:\t75 1d                \tjne    413ec7 <get_relations_str+0x8e>\n  413eaa:\tbf 4c 9c 41 00       \tmov    $0x419c4c,%edi\n  413eaf:\te8 ac e2 fe ff       \tcallq  402160 <gettext@plt>\n  413eb4:\t48 89 c2             \tmov    %rax,%rdx\n  413eb7:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  413ebc:\t48 89 d6             \tmov    %rdx,%rsi\n  413ebf:\t48 89 c7             \tmov    %rax,%rdi\n  413ec2:\te8 3d 52 ff ff       \tcallq  409104 <str_append>\n  413ec7:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n  413ecc:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n  413ed1:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n  413ed6:\t48 89 01             \tmov    %rax,(%rcx)\n  413ed9:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n  413edd:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n  413ee2:\t48 89 41 10          \tmov    %rax,0x10(%rcx)\n  413ee6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  413eeb:\t48 83 c4 48          \tadd    $0x48,%rsp\n  413eef:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall get_relations_str(_QWORD *a1, __int64 a2) {\n  char *v2;\n  __int64 v3;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">i</span>;\n  str_new(<span class=\"supfact\">v5</span>);\n  for (<span class=\"supfact\">i</span> = Number; a2; ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v6</span> = *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + a2);\n    if (!<span class=\"supfact\">v6</span>)\n      break;\n    get_symbol_str((__int64)<span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>);\n  }\n  if (!<span class=\"supfact\">i</span>) {\n    v2 = gettext(String);\n    str_append((__int64)<span class=\"supfact\">v5</span>, v2);\n  }\n  v3 = <span class=\"supfact\">v5</span>[Number];\n  *a1 = <span class=\"supfact\">v5</span>[Number];\n  a1[Number] = v3;\n  a1[Number] = <span class=\"supfact\">v5</span>[Number];\n  return a1;\n}", "code_t": "gstr *__cdecl get_relations_str(gstr *retstr, symbol **sym_arr) {\n  char *v2;\n  char *v3;\n  gstr <span class=\"supfact\">res</span>;\n  symbol *<span class=\"supfact\">sym</span>;\n  int <span class=\"supfact\">i</span>;\n  str_new(&<span class=\"supfact\">res</span>);\n  for (<span class=\"supfact\">i</span> = Number; sym_arr; ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">sym</span> = sym_arr[<span class=\"supfact\">i</span>];\n    if (!<span class=\"supfact\">sym</span>)\n      break;\n    get_symbol_str(&<span class=\"supfact\">res</span>, <span class=\"supfact\">sym</span>);\n  }\n  if (!<span class=\"supfact\">i</span>) {\n    v2 = gettext(String);\n    str_append(&<span class=\"supfact\">res</span>, v2);\n  }\n  v3 = <span class=\"supfact\">res</span>.s;\n  retstr->len = <span class=\"supfact\">res</span>.len;\n  retstr->s = v3;\n  *(_QWORD *)&retstr->max_width = *(_QWORD *)&<span class=\"supfact\">res</span>.max_width;\n  return retstr;\n}", "var": [{"name": "v5", "type": "struct gstr { size_t len; char * s; int max_width; PADDING (4); }", "ref_name": "res", "ref_type": "struct gstr { size_t len; char * s; int max_width; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "voravit", "repo_name": "contiki_CSD_before_HT13", "path": "voravit/contiki_CSD_before_HT13/c7d63ef22c4ac087dd8419439542dea09172f4e534153ea39e806b499f4fe979", "path_in_repo": "voravit/contiki_CSD_before_HT13/examples/example-shell/obj_native/frame802154.o", "objdump": "0000000000000115 <frame802154_hdrlen>:\n 115:\t55                   \tpush   %rbp\n 116:\t48 89 e5             \tmov    %rsp,%rbp\n 119:\t48 83 ec 20          \tsub    $0x20,%rsp\n 11d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 121:\t48 8d 55 fb          \tlea    -0x5(%rbp),%rdx\n 125:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 129:\t48 89 d6             \tmov    %rdx,%rsi\n 12c:\t48 89 c7             \tmov    %rax,%rdi\n 12f:\te8 fa fe ff ff       \tcallq  2e <field_len>\n 134:\t0f b6 55 fb          \tmovzbl -0x5(%rbp),%edx\n 138:\t0f b6 45 fc          \tmovzbl -0x4(%rbp),%eax\n 13c:\t01 c2                \tadd    %eax,%edx\n 13e:\t0f b6 45 fd          \tmovzbl -0x3(%rbp),%eax\n 142:\t01 c2                \tadd    %eax,%edx\n 144:\t0f b6 45 fe          \tmovzbl -0x2(%rbp),%eax\n 148:\t01 c2                \tadd    %eax,%edx\n 14a:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n 14e:\t01 d0                \tadd    %edx,%eax\n 150:\t83 c0 03             \tadd    $0x3,%eax\n 153:\tc9                   \tleaveq \n 154:\tc3                   \tretq   ", "code_s": "__int64 __fastcall frame802154_hdrlen(__int64 a1) {\n  char <span class=\"supfact\">v2</span>[Number];\n  field_len(a1, <span class=\"supfact\">v2</span>);\n  return (unsigned __int8)<span class=\"supfact\">v2</span>[Number] +\n         (unsigned __int8)<span class=\"supfact\">v2</span>[Number] +\n         (unsigned __int8)<span class=\"supfact\">v2</span>[Number] +\n         (unsigned __int8)<span class=\"supfact\">v2</span>[Number] +\n         (unsigned int)(unsigned __int8)<span class=\"supfact\">v2</span>[Number] + Number;\n}", "code_t": "uint8_t __cdecl frame802154_hdrlen(frame802154_t *p) {\n  field_length_t <span class=\"supfact\">flen</span>;\n  field_len(p, &<span class=\"supfact\">flen</span>);\n  return <span class=\"supfact\">flen</span>.src_addr_len + <span class=\"supfact\">flen</span>.src_pid_len +\n         <span class=\"supfact\">flen</span>.dest_addr_len +\n         <span class=\"supfact\">flen</span>.dest_pid_len + <span class=\"supfact\">flen</span>.aux_sec_len +\n         Number;\n}", "var": [{"name": "v2", "type": "struct field_length_t { uint8_t dest_pid_len; uint8_t dest_addr_len; uint8_t src_pid_len; uint8_t src_addr_len; uint8_t aux_sec_len; }", "ref_name": "flen", "ref_type": "struct field_length_t { uint8_t dest_pid_len; uint8_t dest_addr_len; uint8_t src_pid_len; uint8_t src_addr_len; uint8_t aux_sec_len; }"}], "body_in_train": true}, {"repo_owner": "daydaygit", "repo_name": "smdk6410_sameVsnAsFL", "path": "daydaygit/smdk6410_sameVsnAsFL/05abb90b6591d6cbbddf48124105efb000aac2c40f3597f3d6a917f76724d9be", "path_in_repo": "daydaygit/smdk6410_sameVsnAsFL/rootfs/yaffs2/direct/timothy_tests/threading/yaffs_ramem2k.o", "objdump": "0000000000000629 <nandemul2k_QueryNANDBlock>:\n 629:\t55                   \tpush   %rbp\n 62a:\t48 89 e5             \tmov    %rsp,%rbp\n 62d:\t48 83 ec 70          \tsub    $0x70,%rsp\n 631:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n 635:\t89 75 a4             \tmov    %esi,-0x5c(%rbp)\n 638:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n 63c:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n 640:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 644:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n 64a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 64e:\t8b 40 10             \tmov    0x10(%rax),%eax\n 651:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n 654:\t0f af c2             \timul   %edx,%eax\n 657:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 65a:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n 65e:\t8b 75 fc             \tmov    -0x4(%rbp),%esi\n 661:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 665:\t48 89 d1             \tmov    %rdx,%rcx\n 668:\tba 00 00 00 00       \tmov    $0x0,%edx\n 66d:\t48 89 c7             \tmov    %rax,%rdi\n 670:\te8 00 00 00 00       \tcallq  675 <nandemul2k_QueryNANDBlock+0x4c>\n 675:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 678:\t85 c0                \ttest   %eax,%eax\n 67a:\t74 0c                \tje     688 <nandemul2k_QueryNANDBlock+0x5f>\n 67c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 680:\tc7 00 09 00 00 00    \tmovl   $0x9,(%rax)\n 686:\teb 2d                \tjmp    6b5 <nandemul2k_QueryNANDBlock+0x8c>\n 688:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n 68b:\t85 c0                \ttest   %eax,%eax\n 68d:\t75 0c                \tjne    69b <nandemul2k_QueryNANDBlock+0x72>\n 68f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 693:\tc7 00 03 00 00 00    \tmovl   $0x3,(%rax)\n 699:\teb 1a                \tjmp    6b5 <nandemul2k_QueryNANDBlock+0x8c>\n 69b:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n 69e:\t85 c0                \ttest   %eax,%eax\n 6a0:\t74 13                \tje     6b5 <nandemul2k_QueryNANDBlock+0x8c>\n 6a2:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 6a6:\tc7 00 02 00 00 00    \tmovl   $0x2,(%rax)\n 6ac:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n 6af:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 6b3:\t89 10                \tmov    %edx,(%rax)\n 6b5:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 6ba:\tc9                   \tleaveq \n 6bb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall nandemul2k_QueryNANDBlock(__int64 a1, int a2, _DWORD *a3,\n                                             _DWORD *a4) {\n  int <span class=\"supfact\">v7</span>[Number];\n  int <span class=\"supfact\">v8</span>;\n  *a4 = Number;\n  <span class=\"supfact\">v8</span> = a2 * *(_DWORD *)(a1 + Number);\n  nandemul2k_ReadChunkWithTagsFromNAND(a1, <span class=\"supfact\">v8</span>, Number L,\n                                       (__int64)<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v7</span>[Number]) {\n    *a3 = Number;\n  } else if (<span class=\"supfact\">v7</span>[Number]) {\n    *a3 = Number;\n    *a4 = <span class=\"supfact\">v7</span>[Number];\n  } else {\n    *a3 = Number;\n  }\n  return Number L;\n}", "code_t": "int __cdecl nandemul2k_QueryNANDBlock(yaffs_dev *dev, int block_no,\n                                      yaffs_block_state *state,\n                                      u32 *seq_number) {\n  yaffs_ext_tags <span class=\"supfact\">tags</span>;\n  int <span class=\"supfact\">chunkNo</span>;\n  *seq_number = Number;\n  <span class=\"supfact\">chunkNo</span> = block_no * dev->param.chunks_per_block;\n  nandemul2k_ReadChunkWithTagsFromNAND(dev, <span class=\"supfact\">chunkNo</span>, Number L,\n                                       &<span class=\"supfact\">tags</span>);\n  if (<span class=\"supfact\">tags</span>.block_bad) {\n    *state = YAFFS_BLOCK_STATE_DEAD;\n  } else if (<span class=\"supfact\">tags</span>.chunk_used) {\n    *state = YAFFS_BLOCK_STATE_NEEDS_SCAN;\n    *seq_number = <span class=\"supfact\">tags</span>.seq_number;\n  } else {\n    *state = YAFFS_BLOCK_STATE_EMPTY;\n  }\n  return Number;\n}", "var": [{"name": "v7", "type": "struct yaffs_ext_tags { unsigned int chunk_used; unsigned int obj_id; unsigned int chunk_id; unsigned int n_bytes; yaffs_ecc_result ecc_result; unsigned int block_bad; unsigned int is_deleted; unsigned int serial_number; unsigned int seq_number; unsigned int extra_available; unsigned int extra_parent_id; unsigned int extra_is_shrink; unsigned int extra_shadows; yaffs_obj_type extra_obj_type; unsigned int extra_length; unsigned int extra_equiv_id; }", "ref_name": "tags", "ref_type": "struct yaffs_ext_tags { unsigned int chunk_used; unsigned int obj_id; unsigned int chunk_id; unsigned int n_bytes; yaffs_ecc_result ecc_result; unsigned int block_bad; unsigned int is_deleted; unsigned int serial_number; unsigned int seq_number; unsigned int extra_available; unsigned int extra_parent_id; unsigned int extra_is_shrink; unsigned int extra_shadows; yaffs_obj_type extra_obj_type; unsigned int extra_length; unsigned int extra_equiv_id; }"}], "body_in_train": true}, {"repo_owner": "mohamed-foly", "repo_name": "python-for-android", "path": "mohamed-foly/python-for-android/89f6220665140a190cb3a72286553039e64162e354ccd31507f01e4d0a392b05", "path_in_repo": "mohamed-foly/python-for-android/python3-alpha/zlib-1.2.6/contrib/minizip/zip.o", "objdump": "0000000000001a15 <zipOpen2>:\n    1a15:\t55                   \tpush   %rbp\n    1a16:\t48 89 e5             \tmov    %rsp,%rbp\n    1a19:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n    1a1d:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    1a21:\t89 75 94             \tmov    %esi,-0x6c(%rbp)\n    1a24:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n    1a28:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n    1a2c:\t48 83 7d 80 00       \tcmpq   $0x0,-0x80(%rbp)\n    1a31:\t74 2c                \tje     1a5f <zipOpen2+0x4a>\n    1a33:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n    1a37:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1a3b:\t48 89 d6             \tmov    %rdx,%rsi\n    1a3e:\t48 89 c7             \tmov    %rax,%rdi\n    1a41:\te8 00 00 00 00       \tcallq  1a46 <zipOpen2+0x31>\n    1a46:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    1a4a:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    1a4e:\t8b 75 94             \tmov    -0x6c(%rbp),%esi\n    1a51:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1a55:\t48 89 c7             \tmov    %rax,%rdi\n    1a58:\te8 00 00 00 00       \tcallq  1a5d <zipOpen2+0x48>\n    1a5d:\teb 18                \tjmp    1a77 <zipOpen2+0x62>\n    1a5f:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    1a63:\t8b 75 94             \tmov    -0x6c(%rbp),%esi\n    1a66:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1a6a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1a6f:\t48 89 c7             \tmov    %rax,%rdi\n    1a72:\te8 00 00 00 00       \tcallq  1a77 <zipOpen2+0x62>\n    1a77:\tc9                   \tleaveq \n    1a78:\tc3                   \tretq   ", "code_s": "void *__fastcall zipOpen2(__int64 a1, int a2, _QWORD *a3, __int64 a4) {\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  if (!a4)\n    return zipOpen3(a1, a2, a3, Number L);\n  fill_zlib_filefunc64_32_def_from_filefunc32(<span class=\"supfact\">v6</span>, a4);\n  return zipOpen3(a1, a2, a3, <span class=\"supfact\">v6</span>);\n}", "code_t": "zipFile __cdecl zipOpen2(const char *pathname, int append,\n                         zipcharpc *globalcomment,\n                         zlib_filefunc_def *pzlib_filefunc32_def) {\n  zlib_filefunc64_32_def <span class=\"supfact\">zlib_filefunc64_32_def_fill</span>;\n  if (!pzlib_filefunc32_def)\n    return zipOpen3(pathname, append, globalcomment, Number L);\n  fill_zlib_filefunc64_32_def_from_filefunc32(\n      &<span class=\"supfact\">zlib_filefunc64_32_def_fill</span>, pzlib_filefunc32_def);\n  return zipOpen3(pathname, append, globalcomment,\n                  &<span class=\"supfact\">zlib_filefunc64_32_def_fill</span>);\n}", "var": [{"name": "v6", "type": "struct zlib_filefunc64_32_def { zlib_filefunc64_def zfile_func64; open_file_func zopen32_file; tell_file_func ztell32_file; seek_file_func zseek32_file; }", "ref_name": "zlib_filefunc64_32_def_fill", "ref_type": "struct zlib_filefunc64_32_def { zlib_filefunc64_def zfile_func64; open_file_func zopen32_file; tell_file_func ztell32_file; seek_file_func zseek32_file; }"}], "body_in_train": true}, {"repo_owner": "maxpmaxp", "repo_name": "ssvpn-macos", "path": "maxpmaxp/ssvpn-macos/75fad0c6c3a6d0443b89d8528e8ae4a9eff5d286a5513b078f7c2f19a20a9eee", "path_in_repo": "maxpmaxp/ssvpn-macos/tunnelblick/third_party/openssl-1.0.1c/demos/maurice/example4", "objdump": "0000000000405868 <ERR_remove_thread_state>:\n  405868:\t55                   \tpush   %rbp\n  405869:\t48 89 e5             \tmov    %rsp,%rbp\n  40586c:\t48 81 ec 70 02 00 00 \tsub    $0x270,%rsp\n  405873:\t48 89 bd 98 fd ff ff \tmov    %rdi,-0x268(%rbp)\n  40587a:\t48 83 bd 98 fd ff ff \tcmpq   $0x0,-0x268(%rbp)\n  405881:\t00 \n  405882:\t74 1b                \tje     40589f <ERR_remove_thread_state+0x37>\n  405884:\t48 8b 95 98 fd ff ff \tmov    -0x268(%rbp),%rdx\n  40588b:\t48 8d 85 a0 fd ff ff \tlea    -0x260(%rbp),%rax\n  405892:\t48 89 d6             \tmov    %rdx,%rsi\n  405895:\t48 89 c7             \tmov    %rax,%rdi\n  405898:\te8 27 ce ff ff       \tcallq  4026c4 <CRYPTO_THREADID_cpy>\n  40589d:\teb 0f                \tjmp    4058ae <ERR_remove_thread_state+0x46>\n  40589f:\t48 8d 85 a0 fd ff ff \tlea    -0x260(%rbp),%rax\n  4058a6:\t48 89 c7             \tmov    %rax,%rdi\n  4058a9:\te8 80 cd ff ff       \tcallq  40262e <CRYPTO_THREADID_current>\n  4058ae:\te8 9f e7 ff ff       \tcallq  404052 <err_fns_check>\n  4058b3:\t48 8b 05 26 1f 03 00 \tmov    0x31f26(%rip),%rax        # 4377e0 <err_fns>\n  4058ba:\t48 8b 50 48          \tmov    0x48(%rax),%rdx\n  4058be:\t48 8d 85 a0 fd ff ff \tlea    -0x260(%rbp),%rax\n  4058c5:\t48 89 c7             \tmov    %rax,%rdi\n  4058c8:\tff d2                \tcallq  *%rdx\n  4058ca:\t90                   \tnop\n  4058cb:\tc9                   \tleaveq \n  4058cc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ERR_remove_thread_state(__int64 *a1) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  if (a1)\n    CRYPTO_THREADID_cpy(<span class=\"supfact\">v2</span>, a1);\n  else\n    CRYPTO_THREADID_current(<span class=\"supfact\">v2</span>);\n  err_fns_check();\n  return (*(__int64(__fastcall **)(__int64 *))(err_fns + Number))(\n      <span class=\"supfact\">v2</span>);\n}", "code_t": "void __cdecl ERR_remove_thread_state(const CRYPTO_THREADID *id) {\n  ERR_STATE <span class=\"supfact\">tmp</span>;\n  if (id)\n    CRYPTO_THREADID_cpy(&<span class=\"supfact\">tmp</span>.tid, id);\n  else\n    CRYPTO_THREADID_current(&<span class=\"supfact\">tmp</span>.tid);\n  err_fns_check();\n  err_fns->cb_thread_del_item(&<span class=\"supfact\">tmp</span>);\n}", "var": [{"name": "v2", "type": "struct ERR_STATE { CRYPTO_THREADID tid; int[16] err_flags; unsigned __int64[16] err_buffer; char *[16] err_data; int[16] err_data_flags; const char *[16] err_file; int[16] err_line; int top; int bottom; }", "ref_name": "tmp", "ref_type": "struct ERR_STATE { CRYPTO_THREADID tid; int[16] err_flags; unsigned __int64[16] err_buffer; char *[16] err_data; int[16] err_data_flags; const char *[16] err_file; int[16] err_line; int top; int bottom; }"}], "body_in_train": true}, {"repo_owner": "grpascal", "repo_name": "GEO", "path": "grpascal/GEO/1af20c332f82f04ccf6e2d64e3d7c49a92c84a50891969e2c0a3827114aa768e", "path_in_repo": "grpascal/GEO/host/Linux/mxview/src/lua/src/lua", "objdump": "000000000041f15c <getfunc>:\n  41f15c:\t55                   \tpush   %rbp\n  41f15d:\t48 89 e5             \tmov    %rsp,%rbp\n  41f160:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n  41f167:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n  41f16e:\t89 b5 74 ff ff ff    \tmov    %esi,-0x8c(%rbp)\n  41f174:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41f17b:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  41f180:\t48 89 c7             \tmov    %rax,%rdi\n  41f183:\te8 a6 6f fe ff       \tcallq  40612e <lua_type>\n  41f188:\t83 f8 06             \tcmp    $0x6,%eax\n  41f18b:\t75 19                \tjne    41f1a6 <getfunc+0x4a>\n  41f18d:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41f194:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  41f199:\t48 89 c7             \tmov    %rax,%rdi\n  41f19c:\te8 2a 6f fe ff       \tcallq  4060cb <lua_pushvalue>\n  41f1a1:\te9 de 00 00 00       \tjmpq   41f284 <getfunc+0x128>\n  41f1a6:\t83 bd 74 ff ff ff 00 \tcmpl   $0x0,-0x8c(%rbp)\n  41f1ad:\t74 1b                \tje     41f1ca <getfunc+0x6e>\n  41f1af:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41f1b6:\tba 01 00 00 00       \tmov    $0x1,%edx\n  41f1bb:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  41f1c0:\t48 89 c7             \tmov    %rax,%rdi\n  41f1c3:\te8 4f ab ff ff       \tcallq  419d17 <luaL_optinteger>\n  41f1c8:\teb 14                \tjmp    41f1de <getfunc+0x82>\n  41f1ca:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41f1d1:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  41f1d6:\t48 89 c7             \tmov    %rax,%rdi\n  41f1d9:\te8 dd aa ff ff       \tcallq  419cbb <luaL_checkinteger>\n  41f1de:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41f1e1:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  41f1e5:\t79 1b                \tjns    41f202 <getfunc+0xa6>\n  41f1e7:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41f1ee:\tba 14 b4 42 00       \tmov    $0x42b414,%edx\n  41f1f3:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  41f1f8:\t48 89 c7             \tmov    %rax,%rdi\n  41f1fb:\te8 3d a3 ff ff       \tcallq  41953d <luaL_argerror>\n  41f200:\t85 c0                \ttest   %eax,%eax\n  41f202:\t90                   \tnop\n  41f203:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n  41f207:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n  41f20a:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41f211:\t89 ce                \tmov    %ecx,%esi\n  41f213:\t48 89 c7             \tmov    %rax,%rdi\n  41f216:\te8 4b 90 fe ff       \tcallq  408266 <lua_getstack>\n  41f21b:\t85 c0                \ttest   %eax,%eax\n  41f21d:\t75 19                \tjne    41f238 <getfunc+0xdc>\n  41f21f:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41f226:\tba 2f b4 42 00       \tmov    $0x42b42f,%edx\n  41f22b:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  41f230:\t48 89 c7             \tmov    %rax,%rdi\n  41f233:\te8 05 a3 ff ff       \tcallq  41953d <luaL_argerror>\n  41f238:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n  41f23c:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41f243:\tbe 3d b4 42 00       \tmov    $0x42b43d,%esi\n  41f248:\t48 89 c7             \tmov    %rax,%rdi\n  41f24b:\te8 e4 96 fe ff       \tcallq  408934 <lua_getinfo>\n  41f250:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41f257:\tbe ff ff ff ff       \tmov    $0xffffffff,%esi\n  41f25c:\t48 89 c7             \tmov    %rax,%rdi\n  41f25f:\te8 ca 6e fe ff       \tcallq  40612e <lua_type>\n  41f264:\t85 c0                \ttest   %eax,%eax\n  41f266:\t75 1c                \tjne    41f284 <getfunc+0x128>\n  41f268:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  41f26b:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  41f272:\tbe 40 b4 42 00       \tmov    $0x42b440,%esi\n  41f277:\t48 89 c7             \tmov    %rax,%rdi\n  41f27a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41f27f:\te8 04 a5 ff ff       \tcallq  419788 <luaL_error>\n  41f284:\t90                   \tnop\n  41f285:\tc9                   \tleaveq \n  41f286:\tc3                   \tretq   ", "code_s": "__int64 __fastcall getfunc(_QWORD *a1, int a2) {\n  __int64 result;\n  int v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  char <span class=\"supfact\">v7</span>[Number];\n  unsigned int <span class=\"supfact\">v8</span>;\n  if ((unsigned int)lua_type((__int64)a1, Number) == Number)\n    return lua_pushvalue((__int64)a1, Number);\n  if (a2)\n    v3 = luaL_optinteger(a1, Number, Number L);\n  else\n    v3 = luaL_checkinteger(a1, Number);\n  <span class=\"supfact\">v8</span> = v3;\n  if (v3 < Number)\n    luaL_argerror(a1, Number, (int)String);\n  if (!(unsigned int)lua_getstack((__int64)a1, <span class=\"supfact\">v8</span>,\n                                  (__int64)<span class=\"supfact\">v7</span>))\n    luaL_argerror(a1, Number, (int)String);\n  lua_getinfo(a1, String, (__int64)<span class=\"supfact\">v7</span>);\n  result = lua_type((__int64)a1, Number);\n  if (!(_DWORD)result)\n    luaL_error(a1, (__int64)String, <span class=\"supfact\">v8</span>, v4, v5, v6);\n  return result;\n}", "code_t": "void __cdecl getfunc(lua_State_0 *L, int opt) {\n  int v2;\n  lua_Debug_0 <span class=\"supfact\">ar</span>;\n  int <span class=\"supfact\">level</span>;\n  if (lua_type(L, Number) == Number) {\n    lua_pushvalue(L, Number);\n  } else {\n    if (opt)\n      v2 = luaL_optinteger(L, Number, Number L);\n    else\n      v2 = luaL_checkinteger(L, Number);\n    <span class=\"supfact\">level</span> = v2;\n    if (v2 < Number)\n      luaL_argerror(L, Number, String);\n    if (!lua_getstack(L, <span class=\"supfact\">level</span>, &<span class=\"supfact\">ar</span>))\n      luaL_argerror(L, Number, String);\n    lua_getinfo(L, String, &<span class=\"supfact\">ar</span>);\n    if (!lua_type(L, Number))\n      luaL_error(L, String, (unsigned int)<span class=\"supfact\">level</span>);\n  }\n}", "var": [{"name": "v7", "type": "struct lua_Debug_0 { int event; PADDING (4); const char * name; const char * namewhat; const char * what; const char * source; int currentline; int nups; int linedefined; int lastlinedefined; char[60] short_src; int i_ci; }", "ref_name": "ar", "ref_type": "struct lua_Debug_0 { int event; PADDING (4); const char * name; const char * namewhat; const char * what; const char * source; int currentline; int nups; int linedefined; int lastlinedefined; char[60] short_src; int i_ci; }"}], "body_in_train": true}, {"repo_owner": "urmsori", "repo_name": "contiki", "path": "urmsori/contiki/440d1388190024e9328a39f85e8b9d8e9e697bae23c7665d79a4a1af3c2fc539", "path_in_repo": "urmsori/contiki/examples/settings-example/obj_native/uip-over-mesh.o", "objdump": "00000000000001da <uip_over_mesh_make_announced_gateway>:\n 1da:\t55                   \tpush   %rbp\n 1db:\t48 89 e5             \tmov    %rsp,%rbp\n 1de:\t48 83 ec 10          \tsub    $0x10,%rsp\n 1e2:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 1e9 <uip_over_mesh_make_announced_gateway+0xf>\n 1e9:\t84 c0                \ttest   %al,%al\n 1eb:\t75 3d                \tjne    22a <uip_over_mesh_make_announced_gateway+0x50>\n 1ed:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1f2:\te8 00 00 00 00       \tcallq  1f7 <uip_over_mesh_make_announced_gateway+0x1d>\n 1f7:\t48 8d 45 fe          \tlea    -0x2(%rbp),%rax\n 1fb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 200:\t48 89 c7             \tmov    %rax,%rdi\n 203:\te8 00 00 00 00       \tcallq  208 <uip_over_mesh_make_announced_gateway+0x2e>\n 208:\t48 8d 45 fe          \tlea    -0x2(%rbp),%rax\n 20c:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 211:\t48 89 c7             \tmov    %rax,%rdi\n 214:\te8 00 00 00 00       \tcallq  219 <uip_over_mesh_make_announced_gateway+0x3f>\n 219:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 21e:\te8 00 00 00 00       \tcallq  223 <uip_over_mesh_make_announced_gateway+0x49>\n 223:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 22a <uip_over_mesh_make_announced_gateway+0x50>\n 22a:\t90                   \tnop\n 22b:\tc9                   \tleaveq \n 22c:\tc3                   \tretq   ", "code_s": "__int64 uip_over_mesh_make_announced_gateway() {\n  __int64 result;\n  char <span class=\"supfact\">v1</span>[Number];\n  result = (unsigned __int8)is_gateway;\n  if (!is_gateway) {\n    uip_over_mesh_set_gateway(&rimeaddr_node_addr);\n    rimeaddr_copy(<span class=\"supfact\">v1</span>, &rimeaddr_node_addr);\n    packetbuf_copyfrom(<span class=\"supfact\">v1</span>, Number L);\n    result = trickle_send(&gateway_announce_conn);\n    is_gateway = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl uip_over_mesh_make_announced_gateway() {\n  gateway_msg <span class=\"supfact\">msg</span>;\n  if (!is_gateway) {\n    uip_over_mesh_set_gateway(&rimeaddr_node_addr);\n    rimeaddr_copy(&<span class=\"supfact\">msg</span>, &rimeaddr_node_addr);\n    packetbuf_copyfrom(&<span class=\"supfact\">msg</span>, Number L);\n    trickle_send(&gateway_announce_conn);\n    is_gateway = Number;\n  }\n}", "var": [{"name": "v1", "type": "struct gateway_msg { rimeaddr_t gateway; }", "ref_name": "msg", "ref_type": "struct gateway_msg { rimeaddr_t gateway; }"}], "body_in_train": true}, {"repo_owner": "GuaiYiHu", "repo_name": "android_kernel_xiaomi_sm6150", "path": "GuaiYiHu/android_kernel_xiaomi_sm6150/d63ea2363f656fd15d02a8b065e50349af9ce0dd1c3a0db1e70aad4c9b4d16b9", "path_in_repo": "GuaiYiHu/android_kernel_xiaomi_sm6150/tools/perf/util/data.o", "objdump": "000000000000003e <check_pipe>:\n  3e:\t55                   \tpush   %rbp\n  3f:\t48 89 e5             \tmov    %rsp,%rbp\n  42:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n  49:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n  50:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  57:\t00 00 \n  59:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  5d:\t31 c0                \txor    %eax,%eax\n  5f:\tc6 85 5b ff ff ff 00 \tmovb   $0x0,-0xa5(%rbp)\n  66:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  6d:\t48 89 c7             \tmov    %rax,%rdi\n  70:\te8 8b ff ff ff       \tcallq  0 <perf_data_file__is_read>\n  75:\t83 f0 01             \txor    $0x1,%eax\n  78:\t0f b6 c0             \tmovzbl %al,%eax\n  7b:\t89 85 5c ff ff ff    \tmov    %eax,-0xa4(%rbp)\n  81:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  88:\t48 8b 00             \tmov    (%rax),%rax\n  8b:\t48 85 c0             \ttest   %rax,%rax\n  8e:\t75 36                \tjne    c6 <check_pipe+0x88>\n  90:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  97:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n  9d:\t48 89 d6             \tmov    %rdx,%rsi\n  a0:\t89 c7                \tmov    %eax,%edi\n  a2:\te8 00 00 00 00       \tcallq  a7 <check_pipe+0x69>\n  a7:\t85 c0                \ttest   %eax,%eax\n  a9:\t75 3d                \tjne    e8 <check_pipe+0xaa>\n  ab:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n  b1:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  b6:\t3d 00 10 00 00       \tcmp    $0x1000,%eax\n  bb:\t75 2b                \tjne    e8 <check_pipe+0xaa>\n  bd:\tc6 85 5b ff ff ff 01 \tmovb   $0x1,-0xa5(%rbp)\n  c4:\teb 22                \tjmp    e8 <check_pipe+0xaa>\n  c6:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  cd:\t48 8b 00             \tmov    (%rax),%rax\n  d0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  d5:\t48 89 c7             \tmov    %rax,%rdi\n  d8:\te8 00 00 00 00       \tcallq  dd <check_pipe+0x9f>\n  dd:\t85 c0                \ttest   %eax,%eax\n  df:\t75 07                \tjne    e8 <check_pipe+0xaa>\n  e1:\tc6 85 5b ff ff ff 01 \tmovb   $0x1,-0xa5(%rbp)\n  e8:\t80 bd 5b ff ff ff 00 \tcmpb   $0x0,-0xa5(%rbp)\n  ef:\t74 10                \tje     101 <check_pipe+0xc3>\n  f1:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  f8:\t8b 95 5c ff ff ff    \tmov    -0xa4(%rbp),%edx\n  fe:\t89 50 08             \tmov    %edx,0x8(%rax)\n 101:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n 108:\t0f b6 95 5b ff ff ff \tmovzbl -0xa5(%rbp),%edx\n 10f:\t88 50 0c             \tmov    %dl,0xc(%rax)\n 112:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n 119:\t0f b6 40 0c          \tmovzbl 0xc(%rax),%eax\n 11d:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 121:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 128:\t00 00 \n 12a:\t74 05                \tje     131 <check_pipe+0xf3>\n 12c:\te8 00 00 00 00       \tcallq  131 <check_pipe+0xf3>\n 131:\tc9                   \tleaveq \n 132:\tc3                   \tretq   ", "code_s": "__int64 __fastcall check_pipe(__int64 a1) {\n  char <span class=\"supfact\">v2</span>;\n  _BOOL4 <span class=\"supfact\">fd</span>;\n  struct stat64 <span class=\"supfact\">v4</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  <span class=\"supfact\">v2</span> = Number;\n  <span class=\"supfact\">fd</span> = !perf_data_file__is_read(a1);\n  if (*(_QWORD *)a1) {\n    if (!strcmp(*(const char **)a1, String))\n      <span class=\"supfact\">v2</span> = Number;\n  } else if (!fstat64(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">v4</span>) &&\n             (<span class=\"supfact\">v4</span>.st_mode & Number) == Number) {\n    <span class=\"supfact\">v2</span> = Number;\n  }\n  if (<span class=\"supfact\">v2</span>)\n    *(_DWORD *)(a1 + Number) = <span class=\"supfact\">fd</span>;\n  *(_BYTE *)(a1 + Number) = <span class=\"supfact\">v2</span>;\n  return *(unsigned __int8 *)(a1 + Number);\n}", "code_t": "bool __cdecl check_pipe(perf_data_file *file) {\n  char <span class=\"supfact\">is_pipe</span>;\n  _BOOL4 <span class=\"supfact\">fd</span>;\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  <span class=\"supfact\">is_pipe</span> = Number;\n  <span class=\"supfact\">fd</span> = !perf_data_file__is_read(file);\n  if (file->path) {\n    if (!strcmp(file->path, String))\n      <span class=\"supfact\">is_pipe</span> = Number;\n  } else if (!fstat64(<span class=\"supfact\">fd</span>,\n                      (struct stat64 *)&<span class=\"supfact\">st</span>) &&\n             (<span class=\"supfact\">st</span>.st_mode & Number) == Number) {\n    <span class=\"supfact\">is_pipe</span> = Number;\n  }\n  if (<span class=\"supfact\">is_pipe</span>)\n    file-><span class=\"supfact\">fd</span> = <span class=\"supfact\">fd</span>;\n  file-><span class=\"supfact\">is_pipe</span> = <span class=\"supfact\">is_pipe</span>;\n  return file-><span class=\"supfact\">is_pipe</span>;\n}", "var": [{"name": "v4", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/a6c0476d37fab0a2016b706bb595a9db57bad22bae2083133c2d1eeb6cb12f1c", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_events_584896b4.o", "objdump": "", "code_s": "__int64 __fastcall juce InterprocessConnection ConnectionThread\nConnectionThread(juce InterprocessConnection ConnectionThread *this,\n                 juce InterprocessConnection *a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  juce String String((juce String *)<span class=\"supfact\">v3</span>, String);\n  juce Thread Thread(this, (const juce String *)<span class=\"supfact\">v3</span>);\n  juce String ~String((juce String *)<span class=\"supfact\">v3</span>); * ( _QWORD * ) this = ( unsigned int ) ( ( _DWORD ) & ` vtable for ' juce InterprocessConnection ConnectionThread + Number ) ; * ( ( _QWORD * ) this + Number ) = a2 ; return juce LeakedObjectDetector < juce InterprocessConnection ConnectionThread > LeakedObjectDetector ( ( char * ) this + Number ) ; }", "code_t": "void __cdecl juce InterprocessConnection ConnectionThread\nConnectionThread(juce InterprocessConnection ConnectionThread *const this,\n                 juce InterprocessConnection *c) {\n  juce String <span class=\"supfact\">v2</span>;\n  juce String String(&<span class=\"supfact\">v2</span>, String);\n  juce Thread Thread((juce Thread *)this, &<span class=\"supfact\">v2</span>);\n  juce String ~String(&<span class=\"supfact\">v2</span>); * ( _QWORD * ) this -> baseclass_0 = ( unsigned int ) ( ( _DWORD ) & ` vtable for ' juce InterprocessConnection ConnectionThread + Number ) ; this -> owner = c ; juce LeakedObjectDetector < juce InterprocessConnection ConnectionThread > LeakedObjectDetector ( & this -> leakDetector34 ) ; }", "var": [{"name": "v3", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "v2", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}], "body_in_train": false}, {"repo_owner": "jack71728", "repo_name": "qemuVmHw1", "path": "jack71728/qemuVmHw1/9e58e586d43ba8633f28d6a35a3fe770f698c8298bd29cbc237d83b10ce7cd7e", "path_in_repo": "jack71728/qemuVmHw1/qemu-0.13.0/ppc-softmmu/virtio-9p.o", "objdump": "0000000000000bfc <v9fs_do_symlink>:\n     bfc:\t55                   \tpush   %rbp\n     bfd:\t48 89 e5             \tmov    %rsp,%rbp\n     c00:\t48 83 ec 30          \tsub    $0x30,%rsp\n     c04:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     c08:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     c0c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     c13:\t00 00 \n     c15:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     c19:\t31 c0                \txor    %eax,%eax\n     c1b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     c1f:\t48 89 c7             \tmov    %rax,%rdi\n     c22:\te8 00 00 00 00       \tcallq  c27 <v9fs_do_symlink+0x2b>\n     c27:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     c2b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     c2f:\t8b 40 28             \tmov    0x28(%rax),%eax\n     c32:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     c35:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     c39:\t8b 40 28             \tmov    0x28(%rax),%eax\n     c3c:\t0d ff 01 00 00       \tor     $0x1ff,%eax\n     c41:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n     c44:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c48:\t48 8b 80 98 14 50 00 \tmov    0x501498(%rax),%rax\n     c4f:\t4c 8b 40 38          \tmov    0x38(%rax),%r8\n     c53:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     c57:\t48 8b 90 e8 00 00 00 \tmov    0xe8(%rax),%rdx\n     c5e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     c62:\t48 8b 80 d8 00 00 00 \tmov    0xd8(%rax),%rax\n     c69:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n     c6d:\t48 8d b9 a0 14 50 00 \tlea    0x5014a0(%rcx),%rdi\n     c74:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n     c78:\t48 89 c6             \tmov    %rax,%rsi\n     c7b:\t41 ff d0             \tcallq  *%r8\n     c7e:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n     c82:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n     c89:\t00 00 \n     c8b:\t74 05                \tje     c92 <v9fs_do_symlink+0x96>\n     c8d:\te8 00 00 00 00       \tcallq  c92 <v9fs_do_symlink+0x96>\n     c92:\tc9                   \tleaveq \n     c93:\tc3                   \tretq   ", "code_s": "__int64 __fastcall v9fs_do_symlink(__int64 a1, __int64 a2) {\n  int <span class=\"supfact\">v3</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  cred_init((__int64)<span class=\"supfact\">v3</span>);\n  <span class=\"supfact\">v3</span>[Number] = *(_DWORD *)(*(_QWORD *)(a2 + Number) + Number L);\n  <span class=\"supfact\">v3</span>[Number] = *(_DWORD *)(a2 + Number) | Number;\n  return (*(__int64(__fastcall **)(__int64, _QWORD, _QWORD, int *))(\n      *(_QWORD *)(a1 + Number) + Number L))(\n      a1 + Number, *(_QWORD *)(a2 + Number), *(_QWORD *)(a2 + Number),\n      <span class=\"supfact\">v3</span>);\n}", "code_t": "int __cdecl v9fs_do_symlink(V9fsState_0 *s, V9fsCreateState_0 *vs) {\n  FsCred_0 <span class=\"supfact\">cred</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  cred_init(&<span class=\"supfact\">cred</span>);\n  <span class=\"supfact\">cred</span>.fc_uid = vs->fidp->uid;\n  <span class=\"supfact\">cred</span>.fc_mode = vs->perm | Number;\n  return s->ops->symlink(&s->ctx, vs->extension.data, vs->fullname.data,\n                         &<span class=\"supfact\">cred</span>);\n}", "var": [{"name": "v3", "type": "struct FsCred_0 { uid_t fc_uid; gid_t fc_gid; mode_t fc_mode; PADDING (4); dev_t fc_rdev; }", "ref_name": "cred", "ref_type": "struct FsCred_0 { uid_t fc_uid; gid_t fc_gid; mode_t fc_mode; PADDING (4); dev_t fc_rdev; }"}], "body_in_train": true}, {"repo_owner": "LibXenonProject", "repo_name": "xmplayer", "path": "LibXenonProject/xmplayer/0e928d9508efaeeed877c4c6c48c486eead00e07d3d26697c7081a3d36a70fc0", "path_in_repo": "LibXenonProject/xmplayer/mplayer/ffmpeg/libavcodec/xan.o", "objdump": "0000000000000284 <xan_huffman_decode>:\n     284:\t53                   \tpush   %rbx\n     285:\t48 83 ec 68          \tsub    $0x68,%rsp\n     289:\t48 89 7c 24 10       \tmov    %rdi,0x10(%rsp)\n     28e:\t89 74 24 0c          \tmov    %esi,0xc(%rsp)\n     292:\t48 89 14 24          \tmov    %rdx,(%rsp)\n     296:\t89 4c 24 08          \tmov    %ecx,0x8(%rsp)\n     29a:\t48 8b 04 24          \tmov    (%rsp),%rax\n     29e:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     2a2:\t48 89 14 24          \tmov    %rdx,(%rsp)\n     2a6:\t0f b6 00             \tmovzbl (%rax),%eax\n     2a9:\t88 44 24 66          \tmov    %al,0x66(%rsp)\n     2ad:\t0f b6 44 24 66       \tmovzbl 0x66(%rsp),%eax\n     2b2:\t83 c0 16             \tadd    $0x16,%eax\n     2b5:\t88 44 24 65          \tmov    %al,0x65(%rsp)\n     2b9:\t0f b6 44 24 66       \tmovzbl 0x66(%rsp),%eax\n     2be:\t01 c0                \tadd    %eax,%eax\n     2c0:\t48 63 d0             \tmovslq %eax,%rdx\n     2c3:\t48 8b 04 24          \tmov    (%rsp),%rax\n     2c7:\t48 01 d0             \tadd    %rdx,%rax\n     2ca:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n     2cf:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n     2d3:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     2d6:\t0f b6 44 24 66       \tmovzbl 0x66(%rsp),%eax\n     2db:\t01 c0                \tadd    %eax,%eax\n     2dd:\t29 c2                \tsub    %eax,%edx\n     2df:\t89 d0                \tmov    %edx,%eax\n     2e1:\t89 44 24 54          \tmov    %eax,0x54(%rsp)\n     2e5:\t0f b6 44 24 65       \tmovzbl 0x65(%rsp),%eax\n     2ea:\t88 44 24 67          \tmov    %al,0x67(%rsp)\n     2ee:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n     2f2:\t48 63 d0             \tmovslq %eax,%rdx\n     2f5:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     2fa:\t48 01 d0             \tadd    %rdx,%rax\n     2fd:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n     302:\t83 7c 24 54 00       \tcmpl   $0x0,0x54(%rsp)\n     307:\t79 0a                \tjns    313 <xan_huffman_decode+0x8f>\n     309:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n     30e:\te9 b6 00 00 00       \tjmpq   3c9 <xan_huffman_decode+0x145>\n     313:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n     317:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n     31e:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n     323:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n     328:\t48 89 ce             \tmov    %rcx,%rsi\n     32b:\t48 89 c7             \tmov    %rax,%rdi\n     32e:\te8 75 fd ff ff       \tcallq  a8 <init_get_bits>\n     333:\te9 81 00 00 00       \tjmpq   3b9 <xan_huffman_decode+0x135>\n     338:\t0f b6 5c 24 67       \tmovzbl 0x67(%rsp),%ebx\n     33d:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n     342:\t48 89 c7             \tmov    %rax,%rdi\n     345:\te8 ec fc ff ff       \tcallq  36 <get_bits1>\n     34a:\t0f b6 54 24 66       \tmovzbl 0x66(%rsp),%edx\n     34f:\t0f af c2             \timul   %edx,%eax\n     352:\t01 d8                \tadd    %ebx,%eax\n     354:\t83 e8 17             \tsub    $0x17,%eax\n     357:\t89 44 24 44          \tmov    %eax,0x44(%rsp)\n     35b:\t0f b6 44 24 66       \tmovzbl 0x66(%rsp),%eax\n     360:\t01 c0                \tadd    %eax,%eax\n     362:\t39 44 24 44          \tcmp    %eax,0x44(%rsp)\n     366:\t72 07                \tjb     36f <xan_huffman_decode+0xeb>\n     368:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     36d:\teb 5a                \tjmp    3c9 <xan_huffman_decode+0x145>\n     36f:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n     373:\t48 8b 04 24          \tmov    (%rsp),%rax\n     377:\t48 01 d0             \tadd    %rdx,%rax\n     37a:\t0f b6 00             \tmovzbl (%rax),%eax\n     37d:\t88 44 24 67          \tmov    %al,0x67(%rsp)\n     381:\t80 7c 24 67 15       \tcmpb   $0x15,0x67(%rsp)\n     386:\t77 31                \tja     3b9 <xan_huffman_decode+0x135>\n     388:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     38d:\t48 3b 44 24 48       \tcmp    0x48(%rsp),%rax\n     392:\t72 07                \tjb     39b <xan_huffman_decode+0x117>\n     394:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     399:\teb 2e                \tjmp    3c9 <xan_huffman_decode+0x145>\n     39b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     3a0:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     3a4:\t48 89 54 24 10       \tmov    %rdx,0x10(%rsp)\n     3a9:\t0f b6 54 24 67       \tmovzbl 0x67(%rsp),%edx\n     3ae:\t88 10                \tmov    %dl,(%rax)\n     3b0:\t0f b6 44 24 65       \tmovzbl 0x65(%rsp),%eax\n     3b5:\t88 44 24 67          \tmov    %al,0x67(%rsp)\n     3b9:\t80 7c 24 67 16       \tcmpb   $0x16,0x67(%rsp)\n     3be:\t0f 85 74 ff ff ff    \tjne    338 <xan_huffman_decode+0xb4>\n     3c4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     3c9:\t48 83 c4 68          \tadd    $0x68,%rsp\n     3cd:\t5b                   \tpop    %rbx\n     3ce:\tc3                   \tretq   ", "code_s": "__int64 __fastcall xan_huffman_decode(unsigned __int64 a1, int a2, char *a3,\n                                      int a4) {\n  int v5;\n  int v6;\n  unsigned __int8 *v7;\n  char *<span class=\"supfact\">v8</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  char <span class=\"supfact\">v10</span>[Number];\n  unsigned int <span class=\"supfact\">v11</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  char *<span class=\"supfact\">v14</span>;\n  unsigned __int8 <span class=\"supfact\">v15</span>;\n  unsigned __int8 <span class=\"supfact\">v16</span>;\n  unsigned __int8 <span class=\"supfact\">v17</span>;\n  <span class=\"supfact\">v9</span> = a1;\n  <span class=\"supfact\">v8</span> = a3 + Number;\n  <span class=\"supfact\">v16</span> = *a3;\n  <span class=\"supfact\">v15</span> = <span class=\"supfact\">v16</span> + Number;\n  <span class=\"supfact\">v14</span> = &a3[Number * <span class=\"supfact\">v16</span> + Number];\n  <span class=\"supfact\">v13</span> = a4 - Number - Number * <span class=\"supfact\">v16</span>;\n  <span class=\"supfact\">v17</span> = <span class=\"supfact\">v16</span> + Number;\n  <span class=\"supfact\">v12</span> = a2 + a1;\n  if (<span class=\"supfact\">v13</span> < Number)\n    return Number L;\n  init_get_bits((__int64)<span class=\"supfact\">v10</span>, (__int64)<span class=\"supfact\">v14</span>,\n                Number * <span class=\"supfact\">v13</span>);\n  while (<span class=\"supfact\">v17</span> != Number) {\n    v5 = <span class=\"supfact\">v17</span>;\n    v6 = get_bits1((__int64)<span class=\"supfact\">v10</span>);\n    <span class=\"supfact\">v11</span> = v5 + <span class=\"supfact\">v16</span> * v6 - Number;\n    if (<span class=\"supfact\">v11</span> >= Number * (unsigned int)<span class=\"supfact\">v16</span>)\n      return Number;\n    <span class=\"supfact\">v17</span> = <span class=\"supfact\">v8</span>[<span class=\"supfact\">v11</span>];\n    if (<span class=\"supfact\">v17</span> <= Number) {\n      if (<span class=\"supfact\">v9</span> >= <span class=\"supfact\">v12</span>)\n        return Number L;\n      v7 = (unsigned __int8 *)<span class=\"supfact\">v9</span>++;\n      *v7 = <span class=\"supfact\">v17</span>;\n      <span class=\"supfact\">v17</span> = <span class=\"supfact\">v15</span>;\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl xan_huffman_decode(unsigned __int8 *dest, int dest_len,\n                               const unsigned __int8 *src, int src_len) {\n  int v5;\n  unsigned int v6;\n  unsigned __int8 *v7;\n  const unsigned __int8 *<span class=\"supfact\">srca</span>;\n  unsigned __int8 *<span class=\"supfact\">desta</span>;\n  GetBitContext_0 <span class=\"supfact\">gb</span>;\n  unsigned int <span class=\"supfact\">idx</span>;\n  unsigned __int8 *<span class=\"supfact\">dest_end</span>;\n  int <span class=\"supfact\">ptr_len</span>;\n  const unsigned __int8 *<span class=\"supfact\">ptr</span>;\n  unsigned __int8 <span class=\"supfact\">ival</span>;\n  unsigned __int8 <span class=\"supfact\">byte</span>;\n  unsigned __int8 <span class=\"supfact\">val</span>;\n  <span class=\"supfact\">desta</span> = dest;\n  <span class=\"supfact\">srca</span> = src + Number;\n  <span class=\"supfact\">byte</span> = *src;\n  <span class=\"supfact\">ival</span> = <span class=\"supfact\">byte</span> + Number;\n  <span class=\"supfact\">ptr</span> = &src[Number * <span class=\"supfact\">byte</span> + Number];\n  <span class=\"supfact\">ptr_len</span> = src_len - Number - Number * <span class=\"supfact\">byte</span>;\n  <span class=\"supfact\">val</span> = <span class=\"supfact\">byte</span> + Number;\n  <span class=\"supfact\">dest_end</span> = &dest[dest_len];\n  if (<span class=\"supfact\">ptr_len</span> < Number)\n    return Number;\n  init_get_bits(&<span class=\"supfact\">gb</span>, <span class=\"supfact\">ptr</span>,\n                Number * <span class=\"supfact\">ptr_len</span>);\n  while (<span class=\"supfact\">val</span> != Number) {\n    v5 = <span class=\"supfact\">val</span>;\n    v6 = get_bits1(&<span class=\"supfact\">gb</span>);\n    <span class=\"supfact\">idx</span> = v5 + <span class=\"supfact\">byte</span> * v6 - Number;\n    if (<span class=\"supfact\">idx</span> >= Number * (unsigned int)<span class=\"supfact\">byte</span>)\n      return Number;\n    <span class=\"supfact\">val</span> = <span class=\"supfact\">srca</span>[<span class=\"supfact\">idx</span>];\n    if (<span class=\"supfact\">val</span> <= Number) {\n      if (<span class=\"supfact\">desta</span> >= <span class=\"supfact\">dest_end</span>)\n        return Number;\n      v7 = <span class=\"supfact\">desta</span>++;\n      *v7 = <span class=\"supfact\">val</span>;\n      <span class=\"supfact\">val</span> = <span class=\"supfact\">ival</span>;\n    }\n  }\n  return Number;\n}", "var": [{"name": "v10", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }", "ref_name": "gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "rajatgupta1998", "repo_name": "kernel_x86-64", "path": "rajatgupta1998/kernel_x86-64/8195c8f2feff4987ae8f0c2a1bedeed2b03361425b47a99fcdcea2292b30d25f", "path_in_repo": "rajatgupta1998/kernel_x86-64/tools/testing/selftests/bpf/get_cgroup_id_user", "objdump": "0000000000408ff5 <bpf_create_map_name>:\n  408ff5:\t55                   \tpush   %rbp\n  408ff6:\t48 89 e5             \tmov    %rsp,%rbp\n  408ff9:\t48 83 ec 60          \tsub    $0x60,%rsp\n  408ffd:\t89 7d bc             \tmov    %edi,-0x44(%rbp)\n  409000:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  409004:\t89 55 b8             \tmov    %edx,-0x48(%rbp)\n  409007:\t89 4d ac             \tmov    %ecx,-0x54(%rbp)\n  40900a:\t44 89 45 a8          \tmov    %r8d,-0x58(%rbp)\n  40900e:\t44 89 4d a4          \tmov    %r9d,-0x5c(%rbp)\n  409012:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n  409019:\t00 \n  40901a:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n  409021:\t00 \n  409022:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  409029:\t00 \n  40902a:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  409031:\t00 \n  409032:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  409039:\t00 \n  40903a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  409041:\t00 \n  409042:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  409049:\t00 \n  40904a:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  40904e:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  409052:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  409055:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n  409058:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  40905b:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  40905e:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n  409061:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  409064:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  409067:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  40906a:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n  40906d:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  409070:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  409074:\t48 89 c7             \tmov    %rax,%rdi\n  409077:\te8 05 fd ff ff       \tcallq  408d81 <bpf_create_map_xattr>\n  40907c:\tc9                   \tleaveq \n  40907d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bpf_create_map_name(unsigned int a1, __int64 a2,\n                                       unsigned int a3, unsigned int a4,\n                                       unsigned int a5, unsigned int a6) {\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  <span class=\"supfact\">v7</span>[Number] = a2;\n  <span class=\"supfact\">v7</span>[Number] = __PAIR64__(a6, a1);\n  <span class=\"supfact\">v7</span>[Number] = __PAIR64__(a4, a3);\n  <span class=\"supfact\">v7</span>[Number] = a5;\n  return bpf_create_map_xattr((__int64)<span class=\"supfact\">v7</span>);\n}", "code_t": "int __cdecl bpf_create_map_name(bpf_map_type map_type, const char *name,\n                                int key_size, int value_size, int max_entries,\n                                __u32 map_flags) {\n  bpf_create_map_attr <span class=\"supfact\">map_attr</span>;\n  <span class=\"supfact\">map_attr</span>.numa_node = Number;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.btf_fd = Number L;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.btf_value_type_id = Number L;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.inner_map_fd = Number L;\n  <span class=\"supfact\">map_attr</span>.name = name;\n  <span class=\"supfact\">map_attr</span>.map_type = map_type;\n  <span class=\"supfact\">map_attr</span>.map_flags = map_flags;\n  <span class=\"supfact\">map_attr</span>.key_size = key_size;\n  <span class=\"supfact\">map_attr</span>.value_size = value_size;\n  <span class=\"supfact\">map_attr</span>.max_entries = max_entries;\n  return bpf_create_map_xattr(&<span class=\"supfact\">map_attr</span>);\n}", "var": [{"name": "v7", "type": "struct bpf_create_map_attr { const char * name; bpf_map_type map_type; __u32 map_flags; __u32 key_size; __u32 value_size; __u32 max_entries; __u32 numa_node; __u32 btf_fd; __u32 btf_key_type_id; __u32 btf_value_type_id; __u32 map_ifindex; __u32 inner_map_fd; PADDING (4); }", "ref_name": "map_attr", "ref_type": "struct bpf_create_map_attr { const char * name; bpf_map_type map_type; __u32 map_flags; __u32 key_size; __u32 value_size; __u32 max_entries; __u32 numa_node; __u32 btf_fd; __u32 btf_key_type_id; __u32 btf_value_type_id; __u32 map_ifindex; __u32 inner_map_fd; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "voravit", "repo_name": "contiki_CSD_before_HT13", "path": "voravit/contiki_CSD_before_HT13/7c60150ff7e46950f1805763bcef9b9f19ac43a605bac3b013ed8160cdc67bbf", "path_in_repo": "voravit/contiki_CSD_before_HT13/tools/release-tools/compile-platforms/native/obj_native/framer-802154.o", "objdump": "0000000000000053 <create>:\n  53:\t55                   \tpush   %rbp\n  54:\t48 89 e5             \tmov    %rsp,%rbp\n  57:\t53                   \tpush   %rbx\n  58:\t48 83 ec 58          \tsub    $0x58,%rsp\n  5c:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  60:\tba 48 00 00 00       \tmov    $0x48,%edx\n  65:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  6a:\t48 89 c7             \tmov    %rax,%rdi\n  6d:\te8 00 00 00 00       \tcallq  72 <create+0x1f>\n  72:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 79 <create+0x26>\n  79:\t84 c0                \ttest   %al,%al\n  7b:\t75 12                \tjne    8f <create+0x3c>\n  7d:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 84 <create+0x31>\n  84:\te8 00 00 00 00       \tcallq  89 <create+0x36>\n  89:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 8f <create+0x3c>\n  8f:\tc6 45 a0 01          \tmovb   $0x1,-0x60(%rbp)\n  93:\tc6 45 a1 00          \tmovb   $0x0,-0x5f(%rbp)\n  97:\tbf 12 00 00 00       \tmov    $0x12,%edi\n  9c:\te8 00 00 00 00       \tcallq  a1 <create+0x4e>\n  a1:\t88 45 a2             \tmov    %al,-0x5e(%rbp)\n  a4:\tbf 19 00 00 00       \tmov    $0x19,%edi\n  a9:\te8 00 00 00 00       \tcallq  ae <create+0x5b>\n  ae:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  b3:\t48 89 c7             \tmov    %rax,%rdi\n  b6:\te8 00 00 00 00       \tcallq  bb <create+0x68>\n  bb:\t85 c0                \ttest   %eax,%eax\n  bd:\t74 06                \tje     c5 <create+0x72>\n  bf:\tc6 45 a3 00          \tmovb   $0x0,-0x5d(%rbp)\n  c3:\teb 0d                \tjmp    d2 <create+0x7f>\n  c5:\tbf 0b 00 00 00       \tmov    $0xb,%edi\n  ca:\te8 00 00 00 00       \tcallq  cf <create+0x7c>\n  cf:\t88 45 a3             \tmov    %al,-0x5d(%rbp)\n  d2:\tc6 45 a4 00          \tmovb   $0x0,-0x5c(%rbp)\n  d6:\tc6 45 a6 00          \tmovb   $0x0,-0x5a(%rbp)\n  da:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  df:\te8 00 00 00 00       \tcallq  e4 <create+0x91>\n  e4:\t66 85 c0             \ttest   %ax,%ax\n  e7:\t74 0f                \tje     f8 <create+0xa5>\n  e9:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  ee:\te8 00 00 00 00       \tcallq  f3 <create+0xa0>\n  f3:\t88 45 a8             \tmov    %al,-0x58(%rbp)\n  f6:\teb 26                \tjmp    11e <create+0xcb>\n  f8:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # ff <create+0xac>\n  ff:\t8d 50 01             \tlea    0x1(%rax),%edx\n 102:\t88 15 00 00 00 00    \tmov    %dl,0x0(%rip)        # 108 <create+0xb5>\n 108:\t88 45 a8             \tmov    %al,-0x58(%rbp)\n 10b:\t0f b6 45 a8          \tmovzbl -0x58(%rbp),%eax\n 10f:\t0f b6 c0             \tmovzbl %al,%eax\n 112:\t89 c6                \tmov    %eax,%esi\n 114:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n 119:\te8 00 00 00 00       \tcallq  11e <create+0xcb>\n 11e:\tc6 45 a7 02          \tmovb   $0x2,-0x59(%rbp)\n 122:\tb8 cd ab ff ff       \tmov    $0xffffabcd,%eax\n 127:\t66 89 45 aa          \tmov    %ax,-0x56(%rbp)\n 12b:\tbf 19 00 00 00       \tmov    $0x19,%edi\n 130:\te8 00 00 00 00       \tcallq  135 <create+0xe2>\n 135:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 13a:\t48 89 c7             \tmov    %rax,%rdi\n 13d:\te8 00 00 00 00       \tcallq  142 <create+0xef>\n 142:\t85 c0                \ttest   %eax,%eax\n 144:\t74 0e                \tje     154 <create+0x101>\n 146:\tc6 45 a5 02          \tmovb   $0x2,-0x5b(%rbp)\n 14a:\tc6 45 ac ff          \tmovb   $0xff,-0x54(%rbp)\n 14e:\tc6 45 ad ff          \tmovb   $0xff,-0x53(%rbp)\n 152:\teb 24                \tjmp    178 <create+0x125>\n 154:\tbf 19 00 00 00       \tmov    $0x19,%edi\n 159:\te8 00 00 00 00       \tcallq  15e <create+0x10b>\n 15e:\t48 89 c2             \tmov    %rax,%rdx\n 161:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 165:\t48 83 c0 0c          \tadd    $0xc,%rax\n 169:\t48 89 d6             \tmov    %rdx,%rsi\n 16c:\t48 89 c7             \tmov    %rax,%rdi\n 16f:\te8 00 00 00 00       \tcallq  174 <create+0x121>\n 174:\tc6 45 a5 02          \tmovb   $0x2,-0x5b(%rbp)\n 178:\tb8 cd ab ff ff       \tmov    $0xffffabcd,%eax\n 17d:\t66 89 45 b4          \tmov    %ax,-0x4c(%rbp)\n 181:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 185:\t48 83 c0 16          \tadd    $0x16,%rax\n 189:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 18e:\t48 89 c7             \tmov    %rax,%rdi\n 191:\te8 00 00 00 00       \tcallq  196 <create+0x143>\n 196:\te8 00 00 00 00       \tcallq  19b <create+0x148>\n 19b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 19f:\te8 00 00 00 00       \tcallq  1a4 <create+0x151>\n 1a4:\t88 45 e0             \tmov    %al,-0x20(%rbp)\n 1a7:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 1ab:\t48 89 c7             \tmov    %rax,%rdi\n 1ae:\te8 00 00 00 00       \tcallq  1b3 <create+0x160>\n 1b3:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n 1b6:\t0f b6 45 ef          \tmovzbl -0x11(%rbp),%eax\n 1ba:\t89 c7                \tmov    %eax,%edi\n 1bc:\te8 00 00 00 00       \tcallq  1c1 <create+0x16e>\n 1c1:\t85 c0                \ttest   %eax,%eax\n 1c3:\t74 23                \tje     1e8 <create+0x195>\n 1c5:\t0f b6 5d ef          \tmovzbl -0x11(%rbp),%ebx\n 1c9:\te8 00 00 00 00       \tcallq  1ce <create+0x17b>\n 1ce:\t48 89 c1             \tmov    %rax,%rcx\n 1d1:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 1d5:\t89 da                \tmov    %ebx,%edx\n 1d7:\t48 89 ce             \tmov    %rcx,%rsi\n 1da:\t48 89 c7             \tmov    %rax,%rdi\n 1dd:\te8 00 00 00 00       \tcallq  1e2 <create+0x18f>\n 1e2:\t0f b6 45 ef          \tmovzbl -0x11(%rbp),%eax\n 1e6:\teb 05                \tjmp    1ed <create+0x19a>\n 1e8:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 1ed:\t48 83 c4 58          \tadd    $0x58,%rsp\n 1f1:\t5b                   \tpop    %rbx\n 1f2:\t5d                   \tpop    %rbp\n 1f3:\tc3                   \tretq   ", "code_s": "__int64 create() {\n  __int64 v0;\n  unsigned __int8 v1;\n  __int64 v2;\n  __int64 v3;\n  unsigned int v4;\n  __int64 v5;\n  __int64 <span class=\"supfact\">s</span>[Number];\n  unsigned __int8 <span class=\"supfact\">v8</span>;\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  if (!initialized) {\n    initialized = Number;\n    mac_dsn = random_rand();\n  }\n  LOWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n  BYTE2(<span class=\"supfact\">s</span>[Number]) = packetbuf_attr(Number L);\n  v0 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v0, &rimeaddr_null))\n    BYTE3(<span class=\"supfact\">s</span>[Number]) = Number;\n  else\n    BYTE3(<span class=\"supfact\">s</span>[Number]) = packetbuf_attr(Number L);\n  BYTE4(<span class=\"supfact\">s</span>[Number]) = Number;\n  BYTE6(<span class=\"supfact\">s</span>[Number]) = Number;\n  if ((unsigned __int16)packetbuf_attr(Number L)) {\n    LOBYTE(<span class=\"supfact\">s</span>[Number]) = packetbuf_attr(Number L);\n  } else {\n    v1 = mac_dsn++;\n    LOBYTE(<span class=\"supfact\">s</span>[Number]) = v1;\n    packetbuf_set_attr(Number L, v1);\n  }\n  HIBYTE(<span class=\"supfact\">s</span>[Number]) = Number;\n  WORD1(<span class=\"supfact\">s</span>[Number]) = Number;\n  v2 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v2, &rimeaddr_null)) {\n    BYTE5(<span class=\"supfact\">s</span>[Number]) = Number;\n    WORD2(<span class=\"supfact\">s</span>[Number]) = Number;\n  } else {\n    v3 = packetbuf_addr(Number L);\n    rimeaddr_copy((char *)&<span class=\"supfact\">s</span>[Number] + Number, v3);\n    BYTE5(<span class=\"supfact\">s</span>[Number]) = Number;\n  }\n  WORD2(<span class=\"supfact\">s</span>[Number]) = Number;\n  rimeaddr_copy((char *)&<span class=\"supfact\">s</span>[Number] + Number,\n                &rimeaddr_node_addr);\n  <span class=\"supfact\">s</span>[Number] = packetbuf_dataptr();\n  LOBYTE(<span class=\"supfact\">s</span>[Number]) = packetbuf_datalen();\n  <span class=\"supfact\">v8</span> = frame802154_hdrlen(<span class=\"supfact\">s</span>);\n  if (!(unsigned int)packetbuf_hdralloc(<span class=\"supfact\">v8</span>))\n    return Number;\n  v4 = <span class=\"supfact\">v8</span>;\n  v5 = packetbuf_hdrptr();\n  frame802154_create(<span class=\"supfact\">s</span>, v5, v4);\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "int __cdecl create() {\n  __int64 v0;\n  uint8_t v1;\n  __int64 v2;\n  __int64 v3;\n  unsigned int v4;\n  __int64 v5;\n  frame802154_t <span class=\"supfact\">params</span>;\n  uint8_t <span class=\"supfact\">len</span>;\n  memset(&<span class=\"supfact\">params</span>, Number, sizeof(<span class=\"supfact\">params</span>));\n  if (!initialized) {\n    initialized = Number;\n    mac_dsn = random_rand();\n  }\n  <span class=\"supfact\">params</span>.fcf.frame_type = Number;\n  <span class=\"supfact\">params</span>.fcf.security_enabled = Number;\n  <span class=\"supfact\">params</span>.fcf.frame_pending = packetbuf_attr(Number L);\n  v0 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v0, &rimeaddr_null))\n    <span class=\"supfact\">params</span>.fcf.ack_required = Number;\n  else\n    <span class=\"supfact\">params</span>.fcf.ack_required = packetbuf_attr(Number L);\n  <span class=\"supfact\">params</span>.fcf.panid_compression = Number;\n  <span class=\"supfact\">params</span>.fcf.frame_version = Number;\n  if ((unsigned __int16)packetbuf_attr(Number L)) {\n    <span class=\"supfact\">params</span>.seq = packetbuf_attr(Number L);\n  } else {\n    v1 = mac_dsn++;\n    <span class=\"supfact\">params</span>.seq = v1;\n    packetbuf_set_attr(Number L, v1);\n  }\n  <span class=\"supfact\">params</span>.fcf.src_addr_mode = Number;\n  <span class=\"supfact\">params</span>.dest_pid = Number;\n  v2 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v2, &rimeaddr_null)) {\n    <span class=\"supfact\">params</span>.fcf.dest_addr_mode = Number;\n    <span class=\"supfact\">params</span>.dest_addr[Number] = Number;\n    <span class=\"supfact\">params</span>.dest_addr[Number] = Number;\n  } else {\n    v3 = packetbuf_addr(Number L);\n    rimeaddr_copy(<span class=\"supfact\">params</span>.dest_addr, v3);\n    <span class=\"supfact\">params</span>.fcf.dest_addr_mode = Number;\n  }\n  <span class=\"supfact\">params</span>.src_pid = Number;\n  rimeaddr_copy(<span class=\"supfact\">params</span>.src_addr, &rimeaddr_node_addr);\n  <span class=\"supfact\">params</span>.payload = (uint8_t *)packetbuf_dataptr();\n  <span class=\"supfact\">params</span>.payload_len = packetbuf_datalen();\n  <span class=\"supfact\">len</span> = frame802154_hdrlen(&<span class=\"supfact\">params</span>);\n  if (!(unsigned int)packetbuf_hdralloc(<span class=\"supfact\">len</span>))\n    return Number;\n  v4 = <span class=\"supfact\">len</span>;\n  v5 = packetbuf_hdrptr();\n  frame802154_create(&<span class=\"supfact\">params</span>, v5, v4);\n  return <span class=\"supfact\">len</span>;\n}", "var": [{"name": "s", "type": "struct frame802154_t { frame802154_fcf_t fcf; uint8_t seq; PADDING (1); uint16_t dest_pid; uint8_t[8] dest_addr; uint16_t src_pid; uint8_t[8] src_addr; PADDING (2); frame802154_aux_hdr_t aux_hdr; PADDING (4); uint8_t * payload; uint8_t payload_len; PADDING (7); }", "ref_name": "params", "ref_type": "struct frame802154_t { frame802154_fcf_t fcf; uint8_t seq; PADDING (1); uint16_t dest_pid; uint8_t[8] dest_addr; uint16_t src_pid; uint8_t[8] src_addr; PADDING (2); frame802154_aux_hdr_t aux_hdr; PADDING (4); uint8_t * payload; uint8_t payload_len; PADDING (7); }"}], "body_in_train": true}, {"repo_owner": "johankj", "repo_name": "ShillBSD", "path": "johankj/ShillBSD/c20e2363f2d6cb974cb163c0611e038d0bff096fe72cc6b7129e21d4af3e31ca", "path_in_repo": "johankj/ShillBSD/usr.bin/csup/mux.o", "objdump": "00000000000000c0 <sock_write>:\n      c0:\t55                   \tpush   %rbp\n      c1:\t48 89 e5             \tmov    %rsp,%rbp\n      c4:\t48 83 ec 40          \tsub    $0x40,%rsp\n      c8:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n      cb:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n      cf:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n      d3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n      d7:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n      db:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n      df:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n      e3:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n      e7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n      ea:\tba 01 00 00 00       \tmov    $0x1,%edx\n      ef:\t48 89 ce             \tmov    %rcx,%rsi\n      f2:\t89 c7                \tmov    %eax,%edi\n      f4:\te8 07 ff ff ff       \tcallq  0 <sock_writev>\n      f9:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n      fc:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n      ff:\tc9                   \tleaveq \n     100:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sock_write(int a1, void *a2, size_t a3) {\n  struct iovec <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span>.iov_base = a2;\n  <span class=\"supfact\">v4</span>.iov_len = a3;\n  return (unsigned int)sock_writev(a1, &<span class=\"supfact\">v4</span>, Number);\n}", "code_t": "int __cdecl sock_write(int s, void *buf, size_t size) {\n  iovec <span class=\"supfact\">iov</span>;\n  <span class=\"supfact\">iov</span>.iov_base = buf;\n  <span class=\"supfact\">iov</span>.iov_len = size;\n  return sock_writev(s, &<span class=\"supfact\">iov</span>, Number);\n}", "var": [{"name": "v4", "type": "struct iovec { void * iov_base; size_t iov_len; }", "ref_name": "iov", "ref_type": "struct iovec { void * iov_base; size_t iov_len; }"}], "body_in_train": false}, {"repo_owner": "piyawad", "repo_name": "test1", "path": "piyawad/test1/ed00a990ebd0678e6e3829d60a55757c0fadcff986a7e3bf78a98759e2dea13a", "path_in_repo": "piyawad/test1/branches/11/res/pjproject/pjlib-util/bin/pjlib-util-test-x86_64-unknown-linux-gnu", "objdump": "00000000004216f8 <pj_sock_bind_in>:\n  4216f8:\t55                   \tpush   %rbp\n  4216f9:\t48 89 e5             \tmov    %rsp,%rbp\n  4216fc:\t48 83 ec 20          \tsub    $0x20,%rsp\n  421700:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  421704:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  421707:\t89 d0                \tmov    %edx,%eax\n  421709:\t66 89 45 e0          \tmov    %ax,-0x20(%rbp)\n  42170d:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  421712:\t66 89 45 f0          \tmov    %ax,-0x10(%rbp)\n  421716:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  42171a:\t48 83 c0 08          \tadd    $0x8,%rax\n  42171e:\tbe 08 00 00 00       \tmov    $0x8,%esi\n  421723:\t48 89 c7             \tmov    %rax,%rdi\n  421726:\te8 21 fa ff ff       \tcallq  42114c <pj_bzero>\n  42172b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  42172e:\t89 c7                \tmov    %eax,%edi\n  421730:\te8 b9 fa ff ff       \tcallq  4211ee <pj_htonl>\n  421735:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  421738:\t0f b7 45 e0          \tmovzwl -0x20(%rbp),%eax\n  42173c:\t89 c7                \tmov    %eax,%edi\n  42173e:\te8 79 fa ff ff       \tcallq  4211bc <pj_htons>\n  421743:\t66 89 45 f2          \tmov    %ax,-0xe(%rbp)\n  421747:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n  42174b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42174f:\tba 10 00 00 00       \tmov    $0x10,%edx\n  421754:\t48 89 ce             \tmov    %rcx,%rsi\n  421757:\t48 89 c7             \tmov    %rax,%rdi\n  42175a:\te8 0a ff ff ff       \tcallq  421669 <pj_sock_bind>\n  42175f:\tc9                   \tleaveq \n  421760:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_sock_bind_in(int a1, uint32_t a2, uint16_t a3) {\n  struct sockaddr <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span>.sa_family = Number;\n  pj_bzero_10(&<span class=\"supfact\">v5</span>.sa_data[Number], Number);\n  *(_DWORD *)&<span class=\"supfact\">v5</span>.sa_data[Number] = pj_htonl(a2);\n  *(_WORD *)<span class=\"supfact\">v5</span>.sa_data = pj_htons(a3);\n  return pj_sock_bind(a1, &<span class=\"supfact\">v5</span>, Number);\n}", "code_t": "pj_status_t __cdecl pj_sock_bind_in(pj_sock_t sock, pj_uint32_t addr32,\n                                    pj_uint16_t port) {\n  pj_sockaddr_in_0 <span class=\"supfact\">addr</span>;\n  <span class=\"supfact\">addr</span>.sin_family = Number;\n  pj_bzero_10(<span class=\"supfact\">addr</span>.sin_zero, Number);\n  <span class=\"supfact\">addr</span>.sin_addr.s_addr = pj_htonl(addr32);\n  <span class=\"supfact\">addr</span>.sin_port = pj_htons(port);\n  return pj_sock_bind(sock, &<span class=\"supfact\">addr</span>, Number);\n}", "var": [{"name": "v5", "type": "struct pj_sockaddr_in_0 { pj_uint16_t sin_family; pj_uint16_t sin_port; pj_in_addr_0 sin_addr; char[8] sin_zero; }", "ref_name": "addr", "ref_type": "struct pj_sockaddr_in_0 { pj_uint16_t sin_family; pj_uint16_t sin_port; pj_in_addr_0 sin_addr; char[8] sin_zero; }"}], "body_in_train": true}, {"repo_owner": "levex", "repo_name": "qemu", "path": "levex/qemu/59d88465b6c0ba57e496b07a32d1e99adcecfcdc702bdf10ba0151354bce9ca5", "path_in_repo": "levex/qemu//hw/usb/ccid-card-passthru.o", "objdump": "0000000000000057 <ccid_card_vscard_send_msg>:\n  57:\t55                   \tpush   %rbp\n  58:\t48 89 e5             \tmov    %rsp,%rbp\n  5b:\t48 83 ec 40          \tsub    $0x40,%rsp\n  5f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  63:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  66:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n  69:\t48 89 4d c8          \tmov    %rcx,-0x38(%rbp)\n  6d:\t44 89 45 c4          \tmov    %r8d,-0x3c(%rbp)\n  71:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  78:\t00 00 \n  7a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  7e:\t31 c0                \txor    %eax,%eax\n  80:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  83:\t89 c7                \tmov    %eax,%edi\n  85:\te8 00 00 00 00       \tcallq  8a <ccid_card_vscard_send_msg+0x33>\n  8a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  8d:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  90:\t89 c7                \tmov    %eax,%edi\n  92:\te8 00 00 00 00       \tcallq  97 <ccid_card_vscard_send_msg+0x40>\n  97:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  9a:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  9d:\t89 c7                \tmov    %eax,%edi\n  9f:\te8 00 00 00 00       \tcallq  a4 <ccid_card_vscard_send_msg+0x4d>\n  a4:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  a7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  ab:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n  b2:\t48 8d 4d ec          \tlea    -0x14(%rbp),%rcx\n  b6:\tba 0c 00 00 00       \tmov    $0xc,%edx\n  bb:\t48 89 ce             \tmov    %rcx,%rsi\n  be:\t48 89 c7             \tmov    %rax,%rdi\n  c1:\te8 00 00 00 00       \tcallq  c6 <ccid_card_vscard_send_msg+0x6f>\n  c6:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  c9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  cd:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n  d4:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  d8:\t48 89 ce             \tmov    %rcx,%rsi\n  db:\t48 89 c7             \tmov    %rax,%rdi\n  de:\te8 00 00 00 00       \tcallq  e3 <ccid_card_vscard_send_msg+0x8c>\n  e3:\t90                   \tnop\n  e4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  e8:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n  ef:\t00 00 \n  f1:\t74 05                \tje     f8 <ccid_card_vscard_send_msg+0xa1>\n  f3:\te8 00 00 00 00       \tcallq  f8 <ccid_card_vscard_send_msg+0xa1>\n  f8:\tc9                   \tleaveq \n  f9:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall ccid_card_vscard_send_msg(__int64 a1, uint32_t a2,\n                                                      uint32_t a3, __int64 a4,\n                                                      uint32_t a5) {\n  int <span class=\"supfact\">v9</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  <span class=\"supfact\">v9</span>[Number] = htonl(a2);\n  <span class=\"supfact\">v9</span>[Number] = htonl(a3);\n  <span class=\"supfact\">v9</span>[Number] = htonl(a5);\n  qemu_chr_fe_write(*(_QWORD *)(a1 + Number), <span class=\"supfact\">v9</span>, Number L);\n  qemu_chr_fe_write(*(_QWORD *)(a1 + Number), a4, a5);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v10</span>;\n}", "code_t": "void __cdecl ccid_card_vscard_send_msg(PassthruState_0 *s, VSCMsgType_0 type,\n                                       uint32_t reader_id,\n                                       const uint8_t *payload,\n                                       uint32_t length) {\n  VSCMsgHeader_0 <span class=\"supfact\">scr_msg_header</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  <span class=\"supfact\">scr_msg_header</span>.type = htonl(type);\n  <span class=\"supfact\">scr_msg_header</span>.reader_id = htonl(reader_id);\n  <span class=\"supfact\">scr_msg_header</span>.length = htonl(length);\n  qemu_chr_fe_write(s->cs, &<span class=\"supfact\">scr_msg_header</span>, Number L);\n  qemu_chr_fe_write(s->cs, payload, length);\n}", "var": [{"name": "v9", "type": "struct VSCMsgHeader_0 { uint32_t type; uint32_t reader_id; uint32_t length; uint8_t[] data; }", "ref_name": "scr_msg_header", "ref_type": "struct VSCMsgHeader_0 { uint32_t type; uint32_t reader_id; uint32_t length; uint8_t[] data; }"}], "body_in_train": true}, {"repo_owner": "sekcheong", "repo_name": "tgrep2", "path": "sekcheong/tgrep2/c3c0148e6eda0ba194943c5c6d7d67ff9e34261f2c4b28a3de0963ab70b38733", "path_in_repo": "sekcheong/tgrep2//tgrep2", "objdump": "000000000040bc6b <readFile>:\n  40bc6b:\t55                   \tpush   %rbp\n  40bc6c:\t48 89 e5             \tmov    %rsp,%rbp\n  40bc6f:\t48 81 ec a0 02 00 00 \tsub    $0x2a0,%rsp\n  40bc76:\t48 89 bd 68 fd ff ff \tmov    %rdi,-0x298(%rbp)\n  40bc7d:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bc84:\tbe db 04 41 00       \tmov    $0x4104db,%esi\n  40bc89:\t48 89 c7             \tmov    %rax,%rdi\n  40bc8c:\te8 5f 65 ff ff       \tcallq  4021f0 <strcmp@plt>\n  40bc91:\t85 c0                \ttest   %eax,%eax\n  40bc93:\t75 0c                \tjne    40bca1 <readFile+0x36>\n  40bc95:\t48 8b 05 74 85 00 00 \tmov    0x8574(%rip),%rax        # 414210 <stdin@@GLIBC_2.2.5>\n  40bc9c:\te9 98 02 00 00       \tjmpq   40bf39 <readFile+0x2ce>\n  40bca1:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bca8:\t0f b6 00             \tmovzbl (%rax),%eax\n  40bcab:\t3c 7c                \tcmp    $0x7c,%al\n  40bcad:\t75 1d                \tjne    40bccc <readFile+0x61>\n  40bcaf:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bcb6:\t48 83 c0 01          \tadd    $0x1,%rax\n  40bcba:\tbe a4 04 41 00       \tmov    $0x4104a4,%esi\n  40bcbf:\t48 89 c7             \tmov    %rax,%rdi\n  40bcc2:\te8 79 fe ff ff       \tcallq  40bb40 <openPipe>\n  40bcc7:\te9 6d 02 00 00       \tjmpq   40bf39 <readFile+0x2ce>\n  40bccc:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bcd3:\tbe dd 04 41 00       \tmov    $0x4104dd,%esi\n  40bcd8:\t48 89 c7             \tmov    %rax,%rdi\n  40bcdb:\te8 f5 fd ff ff       \tcallq  40bad5 <stringEndsIn>\n  40bce0:\t85 c0                \ttest   %eax,%eax\n  40bce2:\t75 18                \tjne    40bcfc <readFile+0x91>\n  40bce4:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bceb:\tbe e1 04 41 00       \tmov    $0x4104e1,%esi\n  40bcf0:\t48 89 c7             \tmov    %rax,%rdi\n  40bcf3:\te8 dd fd ff ff       \tcallq  40bad5 <stringEndsIn>\n  40bcf8:\t85 c0                \ttest   %eax,%eax\n  40bcfa:\t74 40                \tje     40bd3c <readFile+0xd1>\n  40bcfc:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  40bd03:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bd0a:\t48 89 d6             \tmov    %rdx,%rsi\n  40bd0d:\t48 89 c7             \tmov    %rax,%rdi\n  40bd10:\te8 1b 22 00 00       \tcallq  40df30 <__stat>\n  40bd15:\t85 c0                \ttest   %eax,%eax\n  40bd17:\t75 19                \tjne    40bd32 <readFile+0xc7>\n  40bd19:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bd20:\t48 89 c6             \tmov    %rax,%rsi\n  40bd23:\tbf e4 04 41 00       \tmov    $0x4104e4,%edi\n  40bd28:\te8 62 fe ff ff       \tcallq  40bb8f <readZippedFile>\n  40bd2d:\te9 07 02 00 00       \tjmpq   40bf39 <readFile+0x2ce>\n  40bd32:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40bd37:\te9 fd 01 00 00       \tjmpq   40bf39 <readFile+0x2ce>\n  40bd3c:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bd43:\tbe ec 04 41 00       \tmov    $0x4104ec,%esi\n  40bd48:\t48 89 c7             \tmov    %rax,%rdi\n  40bd4b:\te8 85 fd ff ff       \tcallq  40bad5 <stringEndsIn>\n  40bd50:\t85 c0                \ttest   %eax,%eax\n  40bd52:\t75 18                \tjne    40bd6c <readFile+0x101>\n  40bd54:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bd5b:\tbe f0 04 41 00       \tmov    $0x4104f0,%esi\n  40bd60:\t48 89 c7             \tmov    %rax,%rdi\n  40bd63:\te8 6d fd ff ff       \tcallq  40bad5 <stringEndsIn>\n  40bd68:\t85 c0                \ttest   %eax,%eax\n  40bd6a:\t74 40                \tje     40bdac <readFile+0x141>\n  40bd6c:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  40bd73:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bd7a:\t48 89 d6             \tmov    %rdx,%rsi\n  40bd7d:\t48 89 c7             \tmov    %rax,%rdi\n  40bd80:\te8 ab 21 00 00       \tcallq  40df30 <__stat>\n  40bd85:\t85 c0                \ttest   %eax,%eax\n  40bd87:\t75 19                \tjne    40bda2 <readFile+0x137>\n  40bd89:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bd90:\t48 89 c6             \tmov    %rax,%rsi\n  40bd93:\tbf f5 04 41 00       \tmov    $0x4104f5,%edi\n  40bd98:\te8 f2 fd ff ff       \tcallq  40bb8f <readZippedFile>\n  40bd9d:\te9 97 01 00 00       \tjmpq   40bf39 <readFile+0x2ce>\n  40bda2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40bda7:\te9 8d 01 00 00       \tjmpq   40bf39 <readFile+0x2ce>\n  40bdac:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  40bdb3:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bdba:\t48 89 d6             \tmov    %rdx,%rsi\n  40bdbd:\t48 89 c7             \tmov    %rax,%rdi\n  40bdc0:\te8 6b 21 00 00       \tcallq  40df30 <__stat>\n  40bdc5:\t85 c0                \ttest   %eax,%eax\n  40bdc7:\t75 19                \tjne    40bde2 <readFile+0x177>\n  40bdc9:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  40bdd0:\tbe a4 04 41 00       \tmov    $0x4104a4,%esi\n  40bdd5:\t48 89 c7             \tmov    %rax,%rdi\n  40bdd8:\te8 e3 64 ff ff       \tcallq  4022c0 <fopen@plt>\n  40bddd:\te9 57 01 00 00       \tjmpq   40bf39 <readFile+0x2ce>\n  40bde2:\t48 8b 95 68 fd ff ff \tmov    -0x298(%rbp),%rdx\n  40bde9:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40bdf0:\tbe fe 04 41 00       \tmov    $0x4104fe,%esi\n  40bdf5:\t48 89 c7             \tmov    %rax,%rdi\n  40bdf8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40bdfd:\te8 fe 64 ff ff       \tcallq  402300 <sprintf@plt>\n  40be02:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  40be09:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40be10:\t48 89 d6             \tmov    %rdx,%rsi\n  40be13:\t48 89 c7             \tmov    %rax,%rdi\n  40be16:\te8 15 21 00 00       \tcallq  40df30 <__stat>\n  40be1b:\t85 c0                \ttest   %eax,%eax\n  40be1d:\t75 19                \tjne    40be38 <readFile+0x1cd>\n  40be1f:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40be26:\t48 89 c6             \tmov    %rax,%rsi\n  40be29:\tbf e4 04 41 00       \tmov    $0x4104e4,%edi\n  40be2e:\te8 5c fd ff ff       \tcallq  40bb8f <readZippedFile>\n  40be33:\te9 01 01 00 00       \tjmpq   40bf39 <readFile+0x2ce>\n  40be38:\t48 8b 95 68 fd ff ff \tmov    -0x298(%rbp),%rdx\n  40be3f:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40be46:\tbe 04 05 41 00       \tmov    $0x410504,%esi\n  40be4b:\t48 89 c7             \tmov    %rax,%rdi\n  40be4e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40be53:\te8 a8 64 ff ff       \tcallq  402300 <sprintf@plt>\n  40be58:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  40be5f:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40be66:\t48 89 d6             \tmov    %rdx,%rsi\n  40be69:\t48 89 c7             \tmov    %rax,%rdi\n  40be6c:\te8 bf 20 00 00       \tcallq  40df30 <__stat>\n  40be71:\t85 c0                \ttest   %eax,%eax\n  40be73:\t75 19                \tjne    40be8e <readFile+0x223>\n  40be75:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40be7c:\t48 89 c6             \tmov    %rax,%rsi\n  40be7f:\tbf e4 04 41 00       \tmov    $0x4104e4,%edi\n  40be84:\te8 06 fd ff ff       \tcallq  40bb8f <readZippedFile>\n  40be89:\te9 ab 00 00 00       \tjmpq   40bf39 <readFile+0x2ce>\n  40be8e:\t48 8b 95 68 fd ff ff \tmov    -0x298(%rbp),%rdx\n  40be95:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40be9c:\tbe 09 05 41 00       \tmov    $0x410509,%esi\n  40bea1:\t48 89 c7             \tmov    %rax,%rdi\n  40bea4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40bea9:\te8 52 64 ff ff       \tcallq  402300 <sprintf@plt>\n  40beae:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  40beb5:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40bebc:\t48 89 d6             \tmov    %rdx,%rsi\n  40bebf:\t48 89 c7             \tmov    %rax,%rdi\n  40bec2:\te8 69 20 00 00       \tcallq  40df30 <__stat>\n  40bec7:\t85 c0                \ttest   %eax,%eax\n  40bec9:\t75 16                \tjne    40bee1 <readFile+0x276>\n  40becb:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40bed2:\t48 89 c6             \tmov    %rax,%rsi\n  40bed5:\tbf f5 04 41 00       \tmov    $0x4104f5,%edi\n  40beda:\te8 b0 fc ff ff       \tcallq  40bb8f <readZippedFile>\n  40bedf:\teb 58                \tjmp    40bf39 <readFile+0x2ce>\n  40bee1:\t48 8b 95 68 fd ff ff \tmov    -0x298(%rbp),%rdx\n  40bee8:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40beef:\tbe 10 05 41 00       \tmov    $0x410510,%esi\n  40bef4:\t48 89 c7             \tmov    %rax,%rdi\n  40bef7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40befc:\te8 ff 63 ff ff       \tcallq  402300 <sprintf@plt>\n  40bf01:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  40bf08:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40bf0f:\t48 89 d6             \tmov    %rdx,%rsi\n  40bf12:\t48 89 c7             \tmov    %rax,%rdi\n  40bf15:\te8 16 20 00 00       \tcallq  40df30 <__stat>\n  40bf1a:\t85 c0                \ttest   %eax,%eax\n  40bf1c:\t75 16                \tjne    40bf34 <readFile+0x2c9>\n  40bf1e:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n  40bf25:\t48 89 c6             \tmov    %rax,%rsi\n  40bf28:\tbf f5 04 41 00       \tmov    $0x4104f5,%edi\n  40bf2d:\te8 5d fc ff ff       \tcallq  40bb8f <readZippedFile>\n  40bf32:\teb 05                \tjmp    40bf39 <readFile+0x2ce>\n  40bf34:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40bf39:\tc9                   \tleaveq \n  40bf3a:\tc3                   \tretq   ", "code_s": "FILE *__fastcall readFile(char *a1) {\n  FILE *result;\n  struct stat <span class=\"supfact\">v2</span>;\n  char <span class=\"supfact\">s</span>[Number];\n  if (!strcmp(a1, String))\n    return (FILE *)stdin;\n  if (*a1 == Number)\n    return openPipe(a1 + Number, String);\n  if (stringEndsIn(a1, String) || stringEndsIn(a1, String)) {\n    if ((unsigned int)stat(a1, &<span class=\"supfact\">v2</span>))\n      result = Number L;\n    else\n      result = readZippedFile(String, a1);\n  } else if (stringEndsIn(a1, String) || stringEndsIn(a1, String)) {\n    if ((unsigned int)stat(a1, &<span class=\"supfact\">v2</span>))\n      result = Number L;\n    else\n      result = readZippedFile(String, a1);\n  } else if ((unsigned int)stat(a1, &<span class=\"supfact\">v2</span>)) {\n    sprintf(<span class=\"supfact\">s</span>, String, a1);\n    if ((unsigned int)stat(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v2</span>) &&\n        (sprintf(<span class=\"supfact\">s</span>, String, a1),\n         (unsigned int)stat(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v2</span>))) {\n      sprintf(<span class=\"supfact\">s</span>, String, a1);\n      if ((unsigned int)stat(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v2</span>) &&\n          (sprintf(<span class=\"supfact\">s</span>, String, a1),\n           (unsigned int)stat(<span class=\"supfact\">s</span>, &<span class=\"supfact\">v2</span>)))\n        result = Number L;\n      else\n        result = readZippedFile(String, <span class=\"supfact\">s</span>);\n    } else {\n      result = readZippedFile(String, <span class=\"supfact\">s</span>);\n    }\n  } else {\n    result = fopen(a1, String);\n  }\n  return result;\n}", "code_t": "FILE *__cdecl readFile(char *fileName) {\n  FILE *result;\n  stat <span class=\"supfact\">statbuf</span>;\n  char <span class=\"supfact\">fileBuf</span>[Number];\n  if (!strcmp(fileName, String))\n    return (FILE *)stdin;\n  if (*fileName == Number)\n    return openPipe(fileName + Number, String);\n  if (stringEndsIn(fileName, String) || stringEndsIn(fileName, String)) {\n    if ((unsigned int)stat_0(fileName, &<span class=\"supfact\">statbuf</span>))\n      result = Number L;\n    else\n      result = readZippedFile(String, fileName);\n  } else if (stringEndsIn(fileName, String) || stringEndsIn(fileName, String)) {\n    if ((unsigned int)stat_0(fileName, &<span class=\"supfact\">statbuf</span>))\n      result = Number L;\n    else\n      result = readZippedFile(String, fileName);\n  } else if ((unsigned int)stat_0(fileName, &<span class=\"supfact\">statbuf</span>)) {\n    sprintf(<span class=\"supfact\">fileBuf</span>, String, fileName);\n    if ((unsigned int)stat_0(<span class=\"supfact\">fileBuf</span>,\n                             &<span class=\"supfact\">statbuf</span>) &&\n        (sprintf(<span class=\"supfact\">fileBuf</span>, String, fileName),\n         (unsigned int)stat_0(<span class=\"supfact\">fileBuf</span>,\n                              &<span class=\"supfact\">statbuf</span>))) {\n      sprintf(<span class=\"supfact\">fileBuf</span>, String, fileName);\n      if ((unsigned int)stat_0(<span class=\"supfact\">fileBuf</span>,\n                               &<span class=\"supfact\">statbuf</span>) &&\n          (sprintf(<span class=\"supfact\">fileBuf</span>, String, fileName),\n           (unsigned int)stat_0(<span class=\"supfact\">fileBuf</span>,\n                                &<span class=\"supfact\">statbuf</span>))) {\n        result = Number L;\n      } else {\n        result = readZippedFile(String, <span class=\"supfact\">fileBuf</span>);\n      }\n    } else {\n      result = readZippedFile(String, <span class=\"supfact\">fileBuf</span>);\n    }\n  } else {\n    result = fopen(fileName, String);\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "statbuf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "SlimRoms-Extended", "repo_name": "external_wpa_supplicant_8", "path": "SlimRoms-Extended/external_wpa_supplicant_8/c7272d4b0405b21365dd8fc45cc69ec847385f3b24587c114cf381e5c3c831e2", "path_in_repo": "SlimRoms-Extended/external_wpa_supplicant_8/src/p2p/p2p.o", "objdump": "00000000000072bc <p2p_assoc_req_ie_wlan_ap>:\n    72bc:\t55                   \tpush   %rbp\n    72bd:\t48 89 e5             \tmov    %rsp,%rbp\n    72c0:\t48 81 ec 20 03 00 00 \tsub    $0x320,%rsp\n    72c7:\t48 89 bd 08 fd ff ff \tmov    %rdi,-0x2f8(%rbp)\n    72ce:\t48 89 b5 00 fd ff ff \tmov    %rsi,-0x300(%rbp)\n    72d5:\t48 89 95 f8 fc ff ff \tmov    %rdx,-0x308(%rbp)\n    72dc:\t48 89 8d f0 fc ff ff \tmov    %rcx,-0x310(%rbp)\n    72e3:\t4c 89 85 e8 fc ff ff \tmov    %r8,-0x318(%rbp)\n    72ea:\t48 83 bd e8 fc ff ff \tcmpq   $0x0,-0x318(%rbp)\n    72f1:\t00 \n    72f2:\t75 0a                \tjne    72fe <p2p_assoc_req_ie_wlan_ap+0x42>\n    72f4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    72f9:\te9 f3 01 00 00       \tjmpq   74f1 <p2p_assoc_req_ie_wlan_ap+0x235>\n    72fe:\t48 8d 85 10 fd ff ff \tlea    -0x2f0(%rbp),%rax\n    7305:\tba c8 02 00 00       \tmov    $0x2c8,%edx\n    730a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    730f:\t48 89 c7             \tmov    %rax,%rdi\n    7312:\te8 00 00 00 00       \tcallq  7317 <p2p_assoc_req_ie_wlan_ap+0x5b>\n    7317:\t48 8d 95 10 fd ff ff \tlea    -0x2f0(%rbp),%rdx\n    731e:\t48 8b 85 e8 fc ff ff \tmov    -0x318(%rbp),%rax\n    7325:\t48 89 d6             \tmov    %rdx,%rsi\n    7328:\t48 89 c7             \tmov    %rax,%rdi\n    732b:\te8 00 00 00 00       \tcallq  7330 <p2p_assoc_req_ie_wlan_ap+0x74>\n    7330:\t85 c0                \ttest   %eax,%eax\n    7332:\t79 0a                \tjns    733e <p2p_assoc_req_ie_wlan_ap+0x82>\n    7334:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7339:\te9 b3 01 00 00       \tjmpq   74f1 <p2p_assoc_req_ie_wlan_ap+0x235>\n    733e:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n    7345:\t48 85 c0             \ttest   %rax,%rax\n    7348:\t74 07                \tje     7351 <p2p_assoc_req_ie_wlan_ap+0x95>\n    734a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    734f:\teb 05                \tjmp    7356 <p2p_assoc_req_ie_wlan_ap+0x9a>\n    7351:\tba 00 00 00 00       \tmov    $0x0,%edx\n    7356:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n    735d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    7362:\t48 89 c7             \tmov    %rax,%rdi\n    7365:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    736a:\te8 00 00 00 00       \tcallq  736f <p2p_assoc_req_ie_wlan_ap+0xb3>\n    736f:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n    7376:\t48 85 c0             \ttest   %rax,%rax\n    7379:\t75 0a                \tjne    7385 <p2p_assoc_req_ie_wlan_ap+0xc9>\n    737b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7380:\te9 6c 01 00 00       \tjmpq   74f1 <p2p_assoc_req_ie_wlan_ap+0x235>\n    7385:\tbf c8 00 00 00       \tmov    $0xc8,%edi\n    738a:\te8 00 00 00 00       \tcallq  738f <p2p_assoc_req_ie_wlan_ap+0xd3>\n    738f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    7393:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    7398:\t75 0a                \tjne    73a4 <p2p_assoc_req_ie_wlan_ap+0xe8>\n    739a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    739f:\te9 4d 01 00 00       \tjmpq   74f1 <p2p_assoc_req_ie_wlan_ap+0x235>\n    73a4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    73a8:\t48 89 c7             \tmov    %rax,%rdi\n    73ab:\te8 00 00 00 00       \tcallq  73b0 <p2p_assoc_req_ie_wlan_ap+0xf4>\n    73b0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    73b4:\tc6 45 fb 00          \tmovb   $0x0,-0x5(%rbp)\n    73b8:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n    73bf:\t48 8b 80 c8 03 00 00 \tmov    0x3c8(%rax),%rax\n    73c6:\t48 85 c0             \ttest   %rax,%rax\n    73c9:\t74 49                \tje     7414 <p2p_assoc_req_ie_wlan_ap+0x158>\n    73cb:\t80 4d fb 01          \torb    $0x1,-0x5(%rbp)\n    73cf:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n    73d6:\t0f b6 80 b8 02 00 00 \tmovzbl 0x2b8(%rax),%eax\n    73dd:\t0f b6 c0             \tmovzbl %al,%eax\n    73e0:\t83 e0 04             \tand    $0x4,%eax\n    73e3:\t85 c0                \ttest   %eax,%eax\n    73e5:\t74 2d                \tje     7414 <p2p_assoc_req_ie_wlan_ap+0x158>\n    73e7:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n    73ee:\t0f b6 80 b8 02 00 00 \tmovzbl 0x2b8(%rax),%eax\n    73f5:\t0f b6 c0             \tmovzbl %al,%eax\n    73f8:\t83 e0 08             \tand    $0x8,%eax\n    73fb:\t85 c0                \ttest   %eax,%eax\n    73fd:\t74 15                \tje     7414 <p2p_assoc_req_ie_wlan_ap+0x158>\n    73ff:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n    7406:\t8b 80 0c 04 00 00    \tmov    0x40c(%rax),%eax\n    740c:\t85 c0                \ttest   %eax,%eax\n    740e:\t74 04                \tje     7414 <p2p_assoc_req_ie_wlan_ap+0x158>\n    7410:\t80 4d fb 10          \torb    $0x10,-0x5(%rbp)\n    7414:\t0f b6 55 fb          \tmovzbl -0x5(%rbp),%edx\n    7418:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n    741f:\t0f b6 80 b8 02 00 00 \tmovzbl 0x2b8(%rax),%eax\n    7426:\t0f b6 c8             \tmovzbl %al,%ecx\n    7429:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    742d:\t89 ce                \tmov    %ecx,%esi\n    742f:\t48 89 c7             \tmov    %rax,%rdi\n    7432:\te8 00 00 00 00       \tcallq  7437 <p2p_assoc_req_ie_wlan_ap+0x17b>\n    7437:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n    743e:\t0f b6 80 b8 02 00 00 \tmovzbl 0x2b8(%rax),%eax\n    7445:\t0f b6 c0             \tmovzbl %al,%eax\n    7448:\t83 e0 04             \tand    $0x4,%eax\n    744b:\t85 c0                \ttest   %eax,%eax\n    744d:\t74 2e                \tje     747d <p2p_assoc_req_ie_wlan_ap+0x1c1>\n    744f:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n    7456:\t0f b6 80 b8 02 00 00 \tmovzbl 0x2b8(%rax),%eax\n    745d:\t0f b6 c0             \tmovzbl %al,%eax\n    7460:\t83 e0 08             \tand    $0x8,%eax\n    7463:\t85 c0                \ttest   %eax,%eax\n    7465:\t74 16                \tje     747d <p2p_assoc_req_ie_wlan_ap+0x1c1>\n    7467:\t48 8b 95 08 fd ff ff \tmov    -0x2f8(%rbp),%rdx\n    746e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    7472:\t48 89 d6             \tmov    %rdx,%rsi\n    7475:\t48 89 c7             \tmov    %rax,%rdi\n    7478:\te8 00 00 00 00       \tcallq  747d <p2p_assoc_req_ie_wlan_ap+0x1c1>\n    747d:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    7481:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    7485:\t48 89 d6             \tmov    %rdx,%rsi\n    7488:\t48 89 c7             \tmov    %rax,%rdi\n    748b:\te8 00 00 00 00       \tcallq  7490 <p2p_assoc_req_ie_wlan_ap+0x1d4>\n    7490:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    7494:\t48 89 c7             \tmov    %rax,%rdi\n    7497:\te8 88 8e ff ff       \tcallq  324 <wpabuf_len>\n    749c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    74a0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    74a4:\t48 3b 85 f0 fc ff ff \tcmp    -0x310(%rbp),%rax\n    74ab:\t76 09                \tjbe    74b6 <p2p_assoc_req_ie_wlan_ap+0x1fa>\n    74ad:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n    74b4:\teb 2c                \tjmp    74e2 <p2p_assoc_req_ie_wlan_ap+0x226>\n    74b6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    74ba:\t48 89 c7             \tmov    %rax,%rdi\n    74bd:\te8 74 8e ff ff       \tcallq  336 <wpabuf_head>\n    74c2:\t48 89 c1             \tmov    %rax,%rcx\n    74c5:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    74c9:\t48 8b 85 f8 fc ff ff \tmov    -0x308(%rbp),%rax\n    74d0:\t48 89 ce             \tmov    %rcx,%rsi\n    74d3:\t48 89 c7             \tmov    %rax,%rdi\n    74d6:\te8 00 00 00 00       \tcallq  74db <p2p_assoc_req_ie_wlan_ap+0x21f>\n    74db:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    74df:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    74e2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    74e6:\t48 89 c7             \tmov    %rax,%rdi\n    74e9:\te8 00 00 00 00       \tcallq  74ee <p2p_assoc_req_ie_wlan_ap+0x232>\n    74ee:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    74f1:\tc9                   \tleaveq \n    74f2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall p2p_assoc_req_ie_wlan_ap(__int64 a1, __int64 a2, void *a3,\n                                            size_t a4, __int64 a5) {\n  int v6;\n  int v7;\n  int v8;\n  const char *v9;\n  const void *v10;\n  __int64 <span class=\"supfact\">s</span>[Number];\n  size_t <span class=\"supfact\">n</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  __int64 <span class=\"supfact\">v17</span>;\n  unsigned __int8 <span class=\"supfact\">v18</span>;\n  unsigned int <span class=\"supfact\">v19</span>;\n  if (!a5)\n    return Number L;\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  if ((int)p2p_parse_p2p_ie(a5, <span class=\"supfact\">s</span>) < Number)\n    return Number L;\n  if (<span class=\"supfact\">s</span>[Number])\n    v9 = String;\n  else\n    v9 = String;\n  p2p_dbg(a1, (unsigned int)String, (_DWORD)v9, v6, v7, v8);\n  if (!<span class=\"supfact\">s</span>[Number])\n    return Number L;\n  <span class=\"supfact\">v17</span> = wpabuf_alloc(Number L);\n  if (!<span class=\"supfact\">v17</span>)\n    return Number;\n  <span class=\"supfact\">v16</span> = p2p_buf_add_ie_hdr(<span class=\"supfact\">v17</span>);\n  <span class=\"supfact\">v18</span> = Number;\n  if (*(_QWORD *)(a1 + Number)) {\n    <span class=\"supfact\">v18</span> |= Number;\n    if ((*(_BYTE *)(a1 + Number) & Number) != Number &&\n        (*(_BYTE *)(a1 + Number) & Number) != Number &&\n        *(_DWORD *)(a1 + Number))\n      <span class=\"supfact\">v18</span> |= Number;\n  }\n  p2p_buf_add_capability(<span class=\"supfact\">v17</span>, *(unsigned __int8 *)(a1 + Number),\n                         <span class=\"supfact\">v18</span>);\n  if ((*(_BYTE *)(a1 + Number) & Number) != Number &&\n      (*(_BYTE *)(a1 + Number) & Number) != Number)\n    p2p_buf_add_p2p_interface(<span class=\"supfact\">v17</span>, a1);\n  p2p_buf_update_ie_hdr(<span class=\"supfact\">v17</span>, <span class=\"supfact\">v16</span>);\n  <span class=\"supfact\">n</span> = wpabuf_len(<span class=\"supfact\">v17</span>);\n  if (<span class=\"supfact\">n</span> <= a4) {\n    v10 = (const void *)wpabuf_head(<span class=\"supfact\">v17</span>);\n    memcpy(a3, v10, <span class=\"supfact\">n</span>);\n    <span class=\"supfact\">v19</span> = <span class=\"supfact\">n</span>;\n  } else {\n    <span class=\"supfact\">v19</span> = Number;\n  }\n  wpabuf_free(<span class=\"supfact\">v17</span>);\n  return <span class=\"supfact\">v19</span>;\n}", "code_t": "int __cdecl p2p_assoc_req_ie_wlan_ap(p2p_data *p2p, const u8 *bssid, u8 *buf,\n                                     size_t len, wpabuf *p2p_ie) {\n  const char *v6;\n  const void *v7;\n  p2p_message <span class=\"supfact\">msg</span>;\n  size_t <span class=\"supfact\">tmplen</span>;\n  u8 *<span class=\"supfact\">lpos</span>;\n  wpabuf *<span class=\"supfact\">tmp</span>;\n  u8 <span class=\"supfact\">group_capab</span>;\n  int <span class=\"supfact\">res</span>;\n  if (!p2p_ie)\n    return Number;\n  memset(&<span class=\"supfact\">msg</span>, Number, sizeof(<span class=\"supfact\">msg</span>));\n  if ((int)p2p_parse_p2p_ie(p2p_ie, &<span class=\"supfact\">msg</span>) < Number)\n    return Number;\n  if (<span class=\"supfact\">msg</span>.manageability)\n    v6 = String;\n  else\n    v6 = String;\n  p2p_dbg(p2p, String, v6);\n  if (!<span class=\"supfact\">msg</span>.manageability)\n    return Number;\n  <span class=\"supfact\">tmp</span> = (wpabuf *)wpabuf_alloc(Number L);\n  if (!<span class=\"supfact\">tmp</span>)\n    return Number;\n  <span class=\"supfact\">lpos</span> = (u8 *)p2p_buf_add_ie_hdr(<span class=\"supfact\">tmp</span>);\n  <span class=\"supfact\">group_capab</span> = Number;\n  if (p2p->num_groups) {\n    <span class=\"supfact\">group_capab</span> |= Number;\n    if ((p2p->dev_capab & Number) != Number &&\n        (p2p->dev_capab & Number) != Number && p2p->cross_connect)\n      <span class=\"supfact\">group_capab</span> |= Number;\n  }\n  p2p_buf_add_capability(<span class=\"supfact\">tmp</span>, p2p->dev_capab,\n                         <span class=\"supfact\">group_capab</span>);\n  if ((p2p->dev_capab & Number) != Number &&\n      (p2p->dev_capab & Number) != Number)\n    p2p_buf_add_p2p_interface(<span class=\"supfact\">tmp</span>, p2p);\n  p2p_buf_update_ie_hdr(<span class=\"supfact\">tmp</span>, <span class=\"supfact\">lpos</span>);\n  <span class=\"supfact\">tmplen</span> = wpabuf_len(<span class=\"supfact\">tmp</span>);\n  if (<span class=\"supfact\">tmplen</span> <= len) {\n    v7 = wpabuf_head(<span class=\"supfact\">tmp</span>);\n    memcpy(buf, v7, <span class=\"supfact\">tmplen</span>);\n    <span class=\"supfact\">res</span> = <span class=\"supfact\">tmplen</span>;\n  } else {\n    <span class=\"supfact\">res</span> = Number;\n  }\n  wpabuf_free(<span class=\"supfact\">tmp</span>);\n  return <span class=\"supfact\">res</span>;\n}", "var": [{"name": "s", "type": "__unk__", "ref_name": "msg", "ref_type": "struct p2p_message { wpabuf * p2p_attributes; wpabuf * wps_attributes; wpabuf * wfd_subelems; u8 dialog_token; PADDING (7); const u8 * capability; const u8 * go_intent; const u8 * status; const u8 * listen_channel; const u8 * operating_channel; const u8 * channel_list; u8 channel_list_len; PADDING (7); const u8 * config_timeout; const u8 * intended_addr; const u8 * group_bssid; const u8 * invitation_flags; const u8 * group_info; size_t group_info_len; const u8 * group_id; size_t group_id_len; const u8 * device_id; const u8 * manageability; const u8 * noa; size_t noa_len; const u8 * ext_listen_timing; const u8 * minor_reason_code; const u8 * oob_go_neg_channel; const u8 * p2p_device_info; size_t p2p_device_info_len; const u8 * p2p_device_addr; const u8 * pri_dev_type; u8 num_sec_dev_types; char[33] device_name; u16 config_methods; u16 dev_password_id; PADDING (2); int dev_password_id_present; u16 wps_config_methods; PADDING (2); const u8 * wps_pri_dev_type; const u8 * wps_sec_dev_type_list; size_t wps_sec_dev_type_list_len; const u8 *[10] wps_vendor_ext; size_t[10] wps_vendor_ext_len; const u8 * manufacturer; size_t manufacturer_len; const u8 * model_name; size_t model_name_len; const u8 * model_number; size_t model_number_len; const u8 * serial_number; size_t serial_number_len; const u8 * oob_dev_password; size_t oob_dev_password_len; const u8 * ds_params; const u8 * ssid; u8 service_hash_count; PADDING (7); const u8 * service_hash; const u8 * session_info; size_t session_info_len; const u8 * conn_cap; const u8 * adv_id; const u8 * adv_mac; const u8 * adv_service_instance; size_t adv_service_instance_len; const u8 * session_id; const u8 * session_mac; const u8 * feature_cap; size_t feature_cap_len; const u8 * persistent_dev; const u8 * persistent_ssid; size_t persistent_ssid_len; const u8 * pref_freq_list; size_t pref_freq_list_len; }"}], "body_in_train": true}, {"repo_owner": "happymiki", "repo_name": "STM32-Contiki_Sensor_Smart_Agricultural", "path": "happymiki/STM32-Contiki_Sensor_Smart_Agricultural/e9bbe4bf6a1e6aba97d68828b32f9b34bd5a7d99f177d53e1b823eeaecc44fa7", "path_in_repo": "happymiki/STM32-Contiki_Sensor_Smart_Agricultural/User/contiki-code/examples/antelope/shell/obj_native/framer-802154.o", "objdump": "0000000000000053 <create>:\n  53:\t55                   \tpush   %rbp\n  54:\t48 89 e5             \tmov    %rsp,%rbp\n  57:\t53                   \tpush   %rbx\n  58:\t48 83 ec 58          \tsub    $0x58,%rsp\n  5c:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  60:\tba 48 00 00 00       \tmov    $0x48,%edx\n  65:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  6a:\t48 89 c7             \tmov    %rax,%rdi\n  6d:\te8 00 00 00 00       \tcallq  72 <create+0x1f>\n  72:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 79 <create+0x26>\n  79:\t84 c0                \ttest   %al,%al\n  7b:\t75 12                \tjne    8f <create+0x3c>\n  7d:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 84 <create+0x31>\n  84:\te8 00 00 00 00       \tcallq  89 <create+0x36>\n  89:\t88 05 00 00 00 00    \tmov    %al,0x0(%rip)        # 8f <create+0x3c>\n  8f:\tc6 45 a0 01          \tmovb   $0x1,-0x60(%rbp)\n  93:\tc6 45 a1 00          \tmovb   $0x0,-0x5f(%rbp)\n  97:\tbf 12 00 00 00       \tmov    $0x12,%edi\n  9c:\te8 00 00 00 00       \tcallq  a1 <create+0x4e>\n  a1:\t88 45 a2             \tmov    %al,-0x5e(%rbp)\n  a4:\tbf 19 00 00 00       \tmov    $0x19,%edi\n  a9:\te8 00 00 00 00       \tcallq  ae <create+0x5b>\n  ae:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  b3:\t48 89 c7             \tmov    %rax,%rdi\n  b6:\te8 00 00 00 00       \tcallq  bb <create+0x68>\n  bb:\t85 c0                \ttest   %eax,%eax\n  bd:\t74 06                \tje     c5 <create+0x72>\n  bf:\tc6 45 a3 00          \tmovb   $0x0,-0x5d(%rbp)\n  c3:\teb 0d                \tjmp    d2 <create+0x7f>\n  c5:\tbf 0b 00 00 00       \tmov    $0xb,%edi\n  ca:\te8 00 00 00 00       \tcallq  cf <create+0x7c>\n  cf:\t88 45 a3             \tmov    %al,-0x5d(%rbp)\n  d2:\tc6 45 a4 00          \tmovb   $0x0,-0x5c(%rbp)\n  d6:\tc6 45 a6 00          \tmovb   $0x0,-0x5a(%rbp)\n  da:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  df:\te8 00 00 00 00       \tcallq  e4 <create+0x91>\n  e4:\t66 85 c0             \ttest   %ax,%ax\n  e7:\t74 0f                \tje     f8 <create+0xa5>\n  e9:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  ee:\te8 00 00 00 00       \tcallq  f3 <create+0xa0>\n  f3:\t88 45 a8             \tmov    %al,-0x58(%rbp)\n  f6:\teb 26                \tjmp    11e <create+0xcb>\n  f8:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # ff <create+0xac>\n  ff:\t8d 50 01             \tlea    0x1(%rax),%edx\n 102:\t88 15 00 00 00 00    \tmov    %dl,0x0(%rip)        # 108 <create+0xb5>\n 108:\t88 45 a8             \tmov    %al,-0x58(%rbp)\n 10b:\t0f b6 45 a8          \tmovzbl -0x58(%rbp),%eax\n 10f:\t0f b6 c0             \tmovzbl %al,%eax\n 112:\t89 c6                \tmov    %eax,%esi\n 114:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n 119:\te8 00 00 00 00       \tcallq  11e <create+0xcb>\n 11e:\tc6 45 a7 02          \tmovb   $0x2,-0x59(%rbp)\n 122:\tb8 cd ab ff ff       \tmov    $0xffffabcd,%eax\n 127:\t66 89 45 aa          \tmov    %ax,-0x56(%rbp)\n 12b:\tbf 19 00 00 00       \tmov    $0x19,%edi\n 130:\te8 00 00 00 00       \tcallq  135 <create+0xe2>\n 135:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 13a:\t48 89 c7             \tmov    %rax,%rdi\n 13d:\te8 00 00 00 00       \tcallq  142 <create+0xef>\n 142:\t85 c0                \ttest   %eax,%eax\n 144:\t74 0e                \tje     154 <create+0x101>\n 146:\tc6 45 a5 02          \tmovb   $0x2,-0x5b(%rbp)\n 14a:\tc6 45 ac ff          \tmovb   $0xff,-0x54(%rbp)\n 14e:\tc6 45 ad ff          \tmovb   $0xff,-0x53(%rbp)\n 152:\teb 24                \tjmp    178 <create+0x125>\n 154:\tbf 19 00 00 00       \tmov    $0x19,%edi\n 159:\te8 00 00 00 00       \tcallq  15e <create+0x10b>\n 15e:\t48 89 c2             \tmov    %rax,%rdx\n 161:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 165:\t48 83 c0 0c          \tadd    $0xc,%rax\n 169:\t48 89 d6             \tmov    %rdx,%rsi\n 16c:\t48 89 c7             \tmov    %rax,%rdi\n 16f:\te8 00 00 00 00       \tcallq  174 <create+0x121>\n 174:\tc6 45 a5 02          \tmovb   $0x2,-0x5b(%rbp)\n 178:\tb8 cd ab ff ff       \tmov    $0xffffabcd,%eax\n 17d:\t66 89 45 b4          \tmov    %ax,-0x4c(%rbp)\n 181:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 185:\t48 83 c0 16          \tadd    $0x16,%rax\n 189:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 18e:\t48 89 c7             \tmov    %rax,%rdi\n 191:\te8 00 00 00 00       \tcallq  196 <create+0x143>\n 196:\te8 00 00 00 00       \tcallq  19b <create+0x148>\n 19b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 19f:\te8 00 00 00 00       \tcallq  1a4 <create+0x151>\n 1a4:\t88 45 e0             \tmov    %al,-0x20(%rbp)\n 1a7:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 1ab:\t48 89 c7             \tmov    %rax,%rdi\n 1ae:\te8 00 00 00 00       \tcallq  1b3 <create+0x160>\n 1b3:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n 1b6:\t0f b6 45 ef          \tmovzbl -0x11(%rbp),%eax\n 1ba:\t89 c7                \tmov    %eax,%edi\n 1bc:\te8 00 00 00 00       \tcallq  1c1 <create+0x16e>\n 1c1:\t85 c0                \ttest   %eax,%eax\n 1c3:\t74 23                \tje     1e8 <create+0x195>\n 1c5:\t0f b6 5d ef          \tmovzbl -0x11(%rbp),%ebx\n 1c9:\te8 00 00 00 00       \tcallq  1ce <create+0x17b>\n 1ce:\t48 89 c1             \tmov    %rax,%rcx\n 1d1:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 1d5:\t89 da                \tmov    %ebx,%edx\n 1d7:\t48 89 ce             \tmov    %rcx,%rsi\n 1da:\t48 89 c7             \tmov    %rax,%rdi\n 1dd:\te8 00 00 00 00       \tcallq  1e2 <create+0x18f>\n 1e2:\t0f b6 45 ef          \tmovzbl -0x11(%rbp),%eax\n 1e6:\teb 05                \tjmp    1ed <create+0x19a>\n 1e8:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 1ed:\t48 83 c4 58          \tadd    $0x58,%rsp\n 1f1:\t5b                   \tpop    %rbx\n 1f2:\t5d                   \tpop    %rbp\n 1f3:\tc3                   \tretq   ", "code_s": "__int64 create() {\n  __int64 v0;\n  unsigned __int8 v1;\n  __int64 v2;\n  __int64 v3;\n  unsigned int v4;\n  __int64 v5;\n  __int64 <span class=\"supfact\">s</span>[Number];\n  unsigned __int8 <span class=\"supfact\">v8</span>;\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  if (!initialized) {\n    initialized = Number;\n    mac_dsn = random_rand();\n  }\n  LOWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n  BYTE2(<span class=\"supfact\">s</span>[Number]) = packetbuf_attr(Number L);\n  v0 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v0, &rimeaddr_null))\n    BYTE3(<span class=\"supfact\">s</span>[Number]) = Number;\n  else\n    BYTE3(<span class=\"supfact\">s</span>[Number]) = packetbuf_attr(Number L);\n  BYTE4(<span class=\"supfact\">s</span>[Number]) = Number;\n  BYTE6(<span class=\"supfact\">s</span>[Number]) = Number;\n  if ((unsigned __int16)packetbuf_attr(Number L)) {\n    LOBYTE(<span class=\"supfact\">s</span>[Number]) = packetbuf_attr(Number L);\n  } else {\n    v1 = mac_dsn++;\n    LOBYTE(<span class=\"supfact\">s</span>[Number]) = v1;\n    packetbuf_set_attr(Number L, v1);\n  }\n  HIBYTE(<span class=\"supfact\">s</span>[Number]) = Number;\n  WORD1(<span class=\"supfact\">s</span>[Number]) = Number;\n  v2 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v2, &rimeaddr_null)) {\n    BYTE5(<span class=\"supfact\">s</span>[Number]) = Number;\n    WORD2(<span class=\"supfact\">s</span>[Number]) = Number;\n  } else {\n    v3 = packetbuf_addr(Number L);\n    rimeaddr_copy((char *)&<span class=\"supfact\">s</span>[Number] + Number, v3);\n    BYTE5(<span class=\"supfact\">s</span>[Number]) = Number;\n  }\n  WORD2(<span class=\"supfact\">s</span>[Number]) = Number;\n  rimeaddr_copy((char *)&<span class=\"supfact\">s</span>[Number] + Number,\n                &rimeaddr_node_addr);\n  <span class=\"supfact\">s</span>[Number] = packetbuf_dataptr();\n  LOBYTE(<span class=\"supfact\">s</span>[Number]) = packetbuf_datalen();\n  <span class=\"supfact\">v8</span> = frame802154_hdrlen(<span class=\"supfact\">s</span>);\n  if (!(unsigned int)packetbuf_hdralloc(<span class=\"supfact\">v8</span>))\n    return Number;\n  v4 = <span class=\"supfact\">v8</span>;\n  v5 = packetbuf_hdrptr();\n  frame802154_create(<span class=\"supfact\">s</span>, v5, v4);\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "int __cdecl create() {\n  __int64 v0;\n  uint8_t v1;\n  __int64 v2;\n  __int64 v3;\n  unsigned int v4;\n  __int64 v5;\n  frame802154_t <span class=\"supfact\">params</span>;\n  uint8_t <span class=\"supfact\">len</span>;\n  memset(&<span class=\"supfact\">params</span>, Number, sizeof(<span class=\"supfact\">params</span>));\n  if (!initialized) {\n    initialized = Number;\n    mac_dsn = random_rand();\n  }\n  <span class=\"supfact\">params</span>.fcf.frame_type = Number;\n  <span class=\"supfact\">params</span>.fcf.security_enabled = Number;\n  <span class=\"supfact\">params</span>.fcf.frame_pending = packetbuf_attr(Number L);\n  v0 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v0, &rimeaddr_null))\n    <span class=\"supfact\">params</span>.fcf.ack_required = Number;\n  else\n    <span class=\"supfact\">params</span>.fcf.ack_required = packetbuf_attr(Number L);\n  <span class=\"supfact\">params</span>.fcf.panid_compression = Number;\n  <span class=\"supfact\">params</span>.fcf.frame_version = Number;\n  if ((unsigned __int16)packetbuf_attr(Number L)) {\n    <span class=\"supfact\">params</span>.seq = packetbuf_attr(Number L);\n  } else {\n    v1 = mac_dsn++;\n    <span class=\"supfact\">params</span>.seq = v1;\n    packetbuf_set_attr(Number L, v1);\n  }\n  <span class=\"supfact\">params</span>.fcf.src_addr_mode = Number;\n  <span class=\"supfact\">params</span>.dest_pid = Number;\n  v2 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v2, &rimeaddr_null)) {\n    <span class=\"supfact\">params</span>.fcf.dest_addr_mode = Number;\n    <span class=\"supfact\">params</span>.dest_addr[Number] = Number;\n    <span class=\"supfact\">params</span>.dest_addr[Number] = Number;\n  } else {\n    v3 = packetbuf_addr(Number L);\n    rimeaddr_copy(<span class=\"supfact\">params</span>.dest_addr, v3);\n    <span class=\"supfact\">params</span>.fcf.dest_addr_mode = Number;\n  }\n  <span class=\"supfact\">params</span>.src_pid = Number;\n  rimeaddr_copy(<span class=\"supfact\">params</span>.src_addr, &rimeaddr_node_addr);\n  <span class=\"supfact\">params</span>.payload = (uint8_t *)packetbuf_dataptr();\n  <span class=\"supfact\">params</span>.payload_len = packetbuf_datalen();\n  <span class=\"supfact\">len</span> = frame802154_hdrlen(&<span class=\"supfact\">params</span>);\n  if (!(unsigned int)packetbuf_hdralloc(<span class=\"supfact\">len</span>))\n    return Number;\n  v4 = <span class=\"supfact\">len</span>;\n  v5 = packetbuf_hdrptr();\n  frame802154_create(&<span class=\"supfact\">params</span>, v5, v4);\n  return <span class=\"supfact\">len</span>;\n}", "var": [{"name": "s", "type": "struct frame802154_t { frame802154_fcf_t fcf; uint8_t seq; PADDING (1); uint16_t dest_pid; uint8_t[8] dest_addr; uint16_t src_pid; uint8_t[8] src_addr; PADDING (2); frame802154_aux_hdr_t aux_hdr; PADDING (4); uint8_t * payload; uint8_t payload_len; PADDING (7); }", "ref_name": "params", "ref_type": "struct frame802154_t { frame802154_fcf_t fcf; uint8_t seq; PADDING (1); uint16_t dest_pid; uint8_t[8] dest_addr; uint16_t src_pid; uint8_t[8] src_addr; PADDING (2); frame802154_aux_hdr_t aux_hdr; PADDING (4); uint8_t * payload; uint8_t payload_len; PADDING (7); }"}], "body_in_train": true}, {"repo_owner": "zhenghuijie", "repo_name": "learngit", "path": "zhenghuijie/learngit/cafa4e0cb4c5683b4b15c7cfb77fc461376b977053d5cdc9264688096613d8f8", "path_in_repo": "zhenghuijie/learngit/third_party/open_newpppoe/pppd/main.o", "objdump": "0000000000001a48 <update_link_stats>:\n    1a48:\t55                   \tpush   %rbp\n    1a49:\t48 89 e5             \tmov    %rsp,%rbp\n    1a4c:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1a50:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    1a53:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    1a56:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1a5b:\t89 c7                \tmov    %eax,%edi\n    1a5d:\te8 00 00 00 00       \tcallq  1a62 <update_link_stats+0x1a>\n    1a62:\t85 c0                \ttest   %eax,%eax\n    1a64:\t0f 84 3f 01 00 00    \tje     1ba9 <update_link_stats+0x161>\n    1a6a:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n    1a6e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1a73:\t48 89 c7             \tmov    %rax,%rdi\n    1a76:\te8 00 00 00 00       \tcallq  1a7b <update_link_stats+0x33>\n    1a7b:\t85 c0                \ttest   %eax,%eax\n    1a7d:\t0f 88 26 01 00 00    \tjs     1ba9 <update_link_stats+0x161>\n    1a83:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1a87:\t89 c2                \tmov    %eax,%edx\n    1a89:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a90 <update_link_stats+0x48>\n    1a90:\t29 c2                \tsub    %eax,%edx\n    1a92:\t89 d0                \tmov    %edx,%eax\n    1a94:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1a9a <update_link_stats+0x52>\n    1a9a:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 1aa4 <update_link_stats+0x5c>\n    1aa1:\t00 00 00 \n    1aa4:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1aaa <update_link_stats+0x62>\n    1aaa:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1ab0 <update_link_stats+0x68>\n    1ab0:\t29 c2                \tsub    %eax,%edx\n    1ab2:\t89 d0                \tmov    %edx,%eax\n    1ab4:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1aba <update_link_stats+0x72>\n    1aba:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1ac0 <update_link_stats+0x78>\n    1ac0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1ac6 <update_link_stats+0x7e>\n    1ac6:\t29 c2                \tsub    %eax,%edx\n    1ac8:\t89 d0                \tmov    %edx,%eax\n    1aca:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1ad0 <update_link_stats+0x88>\n    1ad0:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1ad6 <update_link_stats+0x8e>\n    1ad6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1adc <update_link_stats+0x94>\n    1adc:\t29 c2                \tsub    %eax,%edx\n    1ade:\t89 d0                \tmov    %edx,%eax\n    1ae0:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1ae6 <update_link_stats+0x9e>\n    1ae6:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1aec <update_link_stats+0xa4>\n    1aec:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1af2 <update_link_stats+0xaa>\n    1af2:\t29 c2                \tsub    %eax,%edx\n    1af4:\t89 d0                \tmov    %edx,%eax\n    1af6:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1afc <update_link_stats+0xb4>\n    1afc:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1b02 <update_link_stats+0xba>\n    1b02:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b06:\t89 d1                \tmov    %edx,%ecx\n    1b08:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b0d:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    1b12:\t48 89 c7             \tmov    %rax,%rdi\n    1b15:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b1a:\te8 00 00 00 00       \tcallq  1b1f <update_link_stats+0xd7>\n    1b1f:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b23:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b28:\t48 89 c6             \tmov    %rax,%rsi\n    1b2b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1b30:\te8 00 00 00 00       \tcallq  1b35 <update_link_stats+0xed>\n    1b35:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1b3b <update_link_stats+0xf3>\n    1b3b:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b3f:\t89 d1                \tmov    %edx,%ecx\n    1b41:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b46:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    1b4b:\t48 89 c7             \tmov    %rax,%rdi\n    1b4e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b53:\te8 00 00 00 00       \tcallq  1b58 <update_link_stats+0x110>\n    1b58:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b5c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b61:\t48 89 c6             \tmov    %rax,%rsi\n    1b64:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1b69:\te8 00 00 00 00       \tcallq  1b6e <update_link_stats+0x126>\n    1b6e:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1b74 <update_link_stats+0x12c>\n    1b74:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b78:\t89 d1                \tmov    %edx,%ecx\n    1b7a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b7f:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    1b84:\t48 89 c7             \tmov    %rax,%rdi\n    1b87:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b8c:\te8 00 00 00 00       \tcallq  1b91 <update_link_stats+0x149>\n    1b91:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b95:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b9a:\t48 89 c6             \tmov    %rax,%rsi\n    1b9d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1ba2:\te8 00 00 00 00       \tcallq  1ba7 <update_link_stats+0x15f>\n    1ba7:\teb 01                \tjmp    1baa <update_link_stats+0x162>\n    1ba9:\t90                   \tnop\n    1baa:\tc9                   \tleaveq \n    1bab:\tc3                   \tretq   ", "code_s": "int __fastcall update_link_stats(unsigned int a1) {\n  int result;\n  char <span class=\"supfact\">v2</span>[Number];\n  struct timeval <span class=\"supfact\">tv</span>;\n  result = get_ppp_stats(a1, link_stats);\n  if (result) {\n    result = gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    if (result >= Number) {\n      link_connect_time =\n          LODWORD(<span class=\"supfact\">tv</span>.tv_sec) - LODWORD(start_time.tv_sec);\n      link_stats_valid = Number;\n      link_stats[Number] -= old_link_stats;\n      link_stats[Number] -= dword_5D44;\n      link_stats[Number] -= dword_5D48;\n      link_stats[Number] -= dword_5D4C;\n      slprintf(<span class=\"supfact\">v2</span>, Number L, String,\n               (unsigned int)link_connect_time);\n      script_setenv(String, <span class=\"supfact\">v2</span>, Number L);\n      slprintf(<span class=\"supfact\">v2</span>, Number L, String, link_stats[Number]);\n      script_setenv(String, <span class=\"supfact\">v2</span>, Number L);\n      slprintf(<span class=\"supfact\">v2</span>, Number L, String, link_stats[Number]);\n      result = script_setenv(String, <span class=\"supfact\">v2</span>, Number L);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl update_link_stats(int u) {\n  char <span class=\"supfact\">numbuf</span>[Number];\n  timeval <span class=\"supfact\">now</span>;\n  if ((unsigned int)get_ppp_stats((unsigned int)u, link_stats)) {\n    if (gettimeofday(&<span class=\"supfact\">now</span>, Number L) >= Number) {\n      link_connect_time =\n          LODWORD(<span class=\"supfact\">now</span>.tv_sec) - LODWORD(start_time.tv_sec);\n      link_stats_valid = Number;\n      link_stats[Number] -= old_link_stats.bytes_in;\n      link_stats[Number] -= old_link_stats.bytes_out;\n      link_stats[Number] -= old_link_stats.pkts_in;\n      link_stats[Number] -= old_link_stats.pkts_out;\n      slprintf(<span class=\"supfact\">numbuf</span>, Number L, String,\n               (unsigned int)link_connect_time);\n      script_setenv(String, <span class=\"supfact\">numbuf</span>, Number);\n      slprintf(<span class=\"supfact\">numbuf</span>, Number L, String, link_stats[Number]);\n      script_setenv(String, <span class=\"supfact\">numbuf</span>, Number);\n      slprintf(<span class=\"supfact\">numbuf</span>, Number L, String, link_stats[Number]);\n      script_setenv(String, <span class=\"supfact\">numbuf</span>, Number);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "IMPULsE13", "repo_name": "android_reaver-wps", "path": "IMPULsE13/android_reaver-wps/a149526e04fa55036f353d769657defe1141f07afdbb612532f6cfc51de8d91f", "path_in_repo": "IMPULsE13/android_reaver-wps/tls/bignum.o", "objdump": "0000000000002715 <mp_reduce_2k_setup_l>:\n    2715:\t55                   \tpush   %rbp\n    2716:\t48 89 e5             \tmov    %rsp,%rbp\n    2719:\t48 83 ec 30          \tsub    $0x30,%rsp\n    271d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    2721:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    2725:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    2729:\t48 89 c7             \tmov    %rax,%rdi\n    272c:\te8 45 dc ff ff       \tcallq  376 <mp_init>\n    2731:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    2734:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    2738:\t74 05                \tje     273f <mp_reduce_2k_setup_l+0x2a>\n    273a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    273d:\teb 55                \tjmp    2794 <mp_reduce_2k_setup_l+0x7f>\n    273f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2743:\t48 89 c7             \tmov    %rax,%rdi\n    2746:\te8 b4 f0 ff ff       \tcallq  17ff <mp_count_bits>\n    274b:\t89 c2                \tmov    %eax,%edx\n    274d:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    2751:\t89 d6                \tmov    %edx,%esi\n    2753:\t48 89 c7             \tmov    %rax,%rdi\n    2756:\te8 3b 00 00 00       \tcallq  2796 <mp_2expt>\n    275b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    275e:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    2762:\t75 20                \tjne    2784 <mp_reduce_2k_setup_l+0x6f>\n    2764:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    2768:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n    276c:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    2770:\t48 89 ce             \tmov    %rcx,%rsi\n    2773:\t48 89 c7             \tmov    %rax,%rdi\n    2776:\te8 a5 da ff ff       \tcallq  220 <s_mp_sub>\n    277b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    277e:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    2782:\teb 01                \tjmp    2785 <mp_reduce_2k_setup_l+0x70>\n    2784:\t90                   \tnop\n    2785:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    2789:\t48 89 c7             \tmov    %rax,%rdi\n    278c:\te8 70 dc ff ff       \tcallq  401 <mp_clear>\n    2791:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    2794:\tc9                   \tleaveq \n    2795:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mp_reduce_2k_setup_l(int *a1, unsigned int *a2) {\n  unsigned int v3;\n  unsigned int <span class=\"supfact\">v4</span>[Number];\n  unsigned int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = mp_init((__int64)<span class=\"supfact\">v4</span>);\n  if (<span class=\"supfact\">v5</span>)\n    return <span class=\"supfact\">v5</span>;\n  v3 = mp_count_bits(a1);\n  <span class=\"supfact\">v5</span> = mp_2expt(<span class=\"supfact\">v4</span>, v3);\n  if (!<span class=\"supfact\">v5</span>)\n    <span class=\"supfact\">v5</span> = s_mp_sub(<span class=\"supfact\">v4</span>, a1, a2);\n  mp_clear((__int64)<span class=\"supfact\">v4</span>);\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "int __cdecl mp_reduce_2k_setup_l(mp_int *a, mp_int *d) {\n  int v3;\n  mp_int <span class=\"supfact\">tmp</span>;\n  int <span class=\"supfact\">res</span>;\n  <span class=\"supfact\">res</span> = mp_init(&<span class=\"supfact\">tmp</span>);\n  if (<span class=\"supfact\">res</span>)\n    return <span class=\"supfact\">res</span>;\n  v3 = mp_count_bits(a);\n  <span class=\"supfact\">res</span> = mp_2expt(&<span class=\"supfact\">tmp</span>, v3);\n  if (!<span class=\"supfact\">res</span>)\n    <span class=\"supfact\">res</span> = s_mp_sub(&<span class=\"supfact\">tmp</span>, a, d);\n  mp_clear(&<span class=\"supfact\">tmp</span>);\n  return <span class=\"supfact\">res</span>;\n}", "var": [{"name": "v4", "type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }", "ref_name": "tmp", "ref_type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }"}], "body_in_train": true}, {"repo_owner": "JerryCheng1", "repo_name": "android_kernel_sharp_sh-02h", "path": "JerryCheng1/android_kernel_sharp_sh-02h/4b2d98060e69a227f2e9c8040bea9d9cef411e924bb967aa71bd66c2675bdffd", "path_in_repo": "JerryCheng1/android_kernel_sharp_sh-02h/tools/perf/util/trace-event-info.o", "objdump": "000000000000100d <read_proc_kallsyms>:\n    100d:\t55                   \tpush   %rbp\n    100e:\t48 89 e5             \tmov    %rsp,%rbp\n    1011:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    1018:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    101f:\t00 00 \n    1021:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1025:\t31 c0                \txor    %eax,%eax\n    1027:\t48 c7 85 58 ff ff ff \tmovq   $0x0,-0xa8(%rbp)\n    102e:\t00 00 00 00 \n    1032:\tc7 85 50 ff ff ff 00 \tmovl   $0x0,-0xb0(%rbp)\n    1039:\t00 00 00 \n    103c:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n    1043:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    104a:\t48 89 d6             \tmov    %rdx,%rsi\n    104d:\t48 89 c7             \tmov    %rax,%rdi\n    1050:\te8 00 00 00 00       \tcallq  1055 <read_proc_kallsyms+0x48>\n    1055:\t89 85 54 ff ff ff    \tmov    %eax,-0xac(%rbp)\n    105b:\t83 bd 54 ff ff ff 00 \tcmpl   $0x0,-0xac(%rbp)\n    1062:\t79 3e                \tjns    10a2 <read_proc_kallsyms+0x95>\n    1064:\tc7 85 4c ff ff ff 00 \tmovl   $0x0,-0xb4(%rbp)\n    106b:\t00 00 00 \n    106e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1074 <read_proc_kallsyms+0x67>\n    1074:\t48 8d 8d 4c ff ff ff \tlea    -0xb4(%rbp),%rcx\n    107b:\tba 04 00 00 00       \tmov    $0x4,%edx\n    1080:\t48 89 ce             \tmov    %rcx,%rsi\n    1083:\t89 c7                \tmov    %eax,%edi\n    1085:\te8 00 00 00 00       \tcallq  108a <read_proc_kallsyms+0x7d>\n    108a:\t48 83 f8 04          \tcmp    $0x4,%rax\n    108e:\t74 0a                \tje     109a <read_proc_kallsyms+0x8d>\n    1090:\tc7 85 50 ff ff ff fb \tmovl   $0xfffffffb,-0xb0(%rbp)\n    1097:\tff ff ff \n    109a:\t8b 85 50 ff ff ff    \tmov    -0xb0(%rbp),%eax\n    10a0:\teb 14                \tjmp    10b6 <read_proc_kallsyms+0xa9>\n    10a2:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    10a9:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    10ae:\t48 89 c7             \tmov    %rax,%rdi\n    10b1:\te8 93 f1 ff ff       \tcallq  249 <record_file>\n    10b6:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    10ba:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    10c1:\t00 00 \n    10c3:\t74 05                \tje     10ca <read_proc_kallsyms+0xbd>\n    10c5:\te8 00 00 00 00       \tcallq  10ca <read_proc_kallsyms+0xbd>\n    10ca:\tc9                   \tleaveq \n    10cb:\tc3                   \tretq   ", "code_s": "__int64 read_proc_kallsyms() {\n  int <span class=\"supfact\">buf</span>;\n  unsigned int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  char *<span class=\"supfact\">file</span>;\n  struct stat64 <span class=\"supfact\">v5</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  <span class=\"supfact\">file</span> = String;\n  <span class=\"supfact\">v2</span> = Number;\n  <span class=\"supfact\">v3</span> = stat64(String, &<span class=\"supfact\">v5</span>);\n  if (<span class=\"supfact\">v3</span> >= Number)\n    return record_file(<span class=\"supfact\">file</span>, Number);\n  <span class=\"supfact\">buf</span> = Number;\n  if (write(output_fd, &<span class=\"supfact\">buf</span>, Number) != Number)\n    <span class=\"supfact\">v2</span> = Number;\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "int __cdecl read_proc_kallsyms() {\n  unsigned int <span class=\"supfact\">size</span>;\n  int <span class=\"supfact\">err</span>;\n  int <span class=\"supfact\">ret</span>;\n  const char *<span class=\"supfact\">path</span>;\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  <span class=\"supfact\">path</span> = String;\n  <span class=\"supfact\">err</span> = Number;\n  <span class=\"supfact\">ret</span> = stat64(String, (struct stat64 *)&<span class=\"supfact\">st</span>);\n  if (<span class=\"supfact\">ret</span> >= Number)\n    return record_file(<span class=\"supfact\">path</span>, Number L);\n  <span class=\"supfact\">size</span> = Number;\n  if (write(output_fd, &<span class=\"supfact\">size</span>, Number) != Number)\n    <span class=\"supfact\">err</span> = Number;\n  return <span class=\"supfact\">err</span>;\n}", "var": [{"name": "v5", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "eus", "repo_name": "cbs_inheritance", "path": "eus/cbs_inheritance/c232a134c07744ae461a6146a74f04d5533d71d42a401312dbb27ba4062aa06c", "path_in_repo": "eus/cbs_inheritance/tools/perf/util/ui/util.o", "objdump": "00000000000000e3 <ui__popup_menu>:\n  e3:\t55                   \tpush   %rbp\n  e4:\t48 89 e5             \tmov    %rsp,%rbp\n  e7:\t48 83 ec 50          \tsub    $0x50,%rsp\n  eb:\t89 7d bc             \tmov    %edi,-0x44(%rbp)\n  ee:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  f2:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  f9:\t00 00 \n  fb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  ff:\t31 c0                \txor    %eax,%eax\n 101:\tc7 45 c4 ff ff ff ff \tmovl   $0xffffffff,-0x3c(%rbp)\n 108:\tc7 45 c8 05 00 00 00 \tmovl   $0x5,-0x38(%rbp)\n 10f:\te8 00 00 00 00       \tcallq  114 <ui__popup_menu+0x31>\n 114:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 118:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n 11d:\t75 0a                \tjne    129 <ui__popup_menu+0x46>\n 11f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 124:\te9 13 01 00 00       \tjmpq   23c <ui__popup_menu+0x159>\n 129:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n 12c:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n 131:\t89 c2                \tmov    %eax,%edx\n 133:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 138:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 13d:\te8 00 00 00 00       \tcallq  142 <ui__popup_menu+0x5f>\n 142:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 146:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n 14b:\t0f 84 d8 00 00 00    \tje     229 <ui__popup_menu+0x146>\n 151:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 155:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 159:\t48 89 d6             \tmov    %rdx,%rsi\n 15c:\t48 89 c7             \tmov    %rax,%rdi\n 15f:\te8 00 00 00 00       \tcallq  164 <ui__popup_menu+0x81>\n 164:\tc7 45 c0 00 00 00 00 \tmovl   $0x0,-0x40(%rbp)\n 16b:\teb 69                \tjmp    1d6 <ui__popup_menu+0xf3>\n 16d:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n 170:\t48 98                \tcltq   \n 172:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 179:\t00 \n 17a:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 17e:\t48 01 d0             \tadd    %rdx,%rax\n 181:\t48 8b 00             \tmov    (%rax),%rax\n 184:\t48 89 c7             \tmov    %rax,%rdi\n 187:\te8 00 00 00 00       \tcallq  18c <ui__popup_menu+0xa9>\n 18c:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n 18f:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n 192:\t3b 45 c8             \tcmp    -0x38(%rbp),%eax\n 195:\t7e 06                \tjle    19d <ui__popup_menu+0xba>\n 197:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n 19a:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n 19d:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n 1a0:\t48 98                \tcltq   \n 1a2:\t48 89 c6             \tmov    %rax,%rsi\n 1a5:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n 1a8:\t48 98                \tcltq   \n 1aa:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 1b1:\t00 \n 1b2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 1b6:\t48 01 d0             \tadd    %rdx,%rax\n 1b9:\t48 8b 08             \tmov    (%rax),%rcx\n 1bc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1c0:\t48 89 f2             \tmov    %rsi,%rdx\n 1c3:\t48 89 ce             \tmov    %rcx,%rsi\n 1c6:\t48 89 c7             \tmov    %rax,%rdi\n 1c9:\te8 00 00 00 00       \tcallq  1ce <ui__popup_menu+0xeb>\n 1ce:\t85 c0                \ttest   %eax,%eax\n 1d0:\t75 5a                \tjne    22c <ui__popup_menu+0x149>\n 1d2:\t83 45 c0 01          \taddl   $0x1,-0x40(%rbp)\n 1d6:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n 1d9:\t3b 45 bc             \tcmp    -0x44(%rbp),%eax\n 1dc:\t7c 8f                \tjl     16d <ui__popup_menu+0x8a>\n 1de:\t8b 4d bc             \tmov    -0x44(%rbp),%ecx\n 1e1:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 1e4:\tba 00 00 00 00       \tmov    $0x0,%edx\n 1e9:\t89 ce                \tmov    %ecx,%esi\n 1eb:\t89 c7                \tmov    %eax,%edi\n 1ed:\te8 00 00 00 00       \tcallq  1f2 <ui__popup_menu+0x10f>\n 1f2:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 1f6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 1fa:\t48 89 d6             \tmov    %rdx,%rsi\n 1fd:\t48 89 c7             \tmov    %rax,%rdi\n 200:\te8 00 00 00 00       \tcallq  205 <ui__popup_menu+0x122>\n 205:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 209:\t48 89 c7             \tmov    %rax,%rdi\n 20c:\te8 00 00 00 00       \tcallq  211 <ui__popup_menu+0x12e>\n 211:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n 214:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n 217:\t85 c0                \ttest   %eax,%eax\n 219:\t75 07                \tjne    222 <ui__popup_menu+0x13f>\n 21b:\tc7 45 c4 ff ff ff ff \tmovl   $0xffffffff,-0x3c(%rbp)\n 222:\te8 00 00 00 00       \tcallq  227 <ui__popup_menu+0x144>\n 227:\teb 04                \tjmp    22d <ui__popup_menu+0x14a>\n 229:\t90                   \tnop\n 22a:\teb 01                \tjmp    22d <ui__popup_menu+0x14a>\n 22c:\t90                   \tnop\n 22d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 231:\t48 89 c7             \tmov    %rax,%rdi\n 234:\te8 00 00 00 00       \tcallq  239 <ui__popup_menu+0x156>\n 239:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 23c:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 240:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 247:\t00 00 \n 249:\t74 05                \tje     250 <ui__popup_menu+0x16d>\n 24b:\te8 00 00 00 00       \tcallq  250 <ui__popup_menu+0x16d>\n 250:\tc9                   \tleaveq \n 251:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ui__popup_menu(unsigned int a1, __int64 a2) {\n  int <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  <span class=\"supfact\">v4</span> = Number;\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">v7</span> = newt_form__new();\n  if (!<span class=\"supfact\">v7</span>)\n    return Number;\n  <span class=\"supfact\">v8</span> = newtListbox(Number L, Number L, a1, Number L);\n  if (<span class=\"supfact\">v8</span>) {\n    newtFormAddComponent(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v8</span>);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < (int)a1;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">v6</span> =\n          strlen(*(const char **)(Number L * <span class=\"supfact\">i</span> + a2));\n      if (<span class=\"supfact\">v6</span> > <span class=\"supfact\">v5</span>)\n        <span class=\"supfact\">v5</span> = <span class=\"supfact\">v6</span>;\n      if ((unsigned int)newtListboxAppendEntry(\n              <span class=\"supfact\">v8</span>,\n              *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + a2),\n              <span class=\"supfact\">i</span>))\n        goto LABEL_13;\n    }\n    newtCenteredWindow((unsigned int)<span class=\"supfact\">v5</span>, a1, Number L);\n    newtFormRun(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v9</span>);\n    <span class=\"supfact\">v4</span> = newtListboxGetCurrent(<span class=\"supfact\">v8</span>);\n    if (!<span class=\"supfact\">v9</span>[Number])\n      <span class=\"supfact\">v4</span> = Number;\n    newtPopWindow();\n  }\nLABEL_13:\n  newtFormDestroy(<span class=\"supfact\">v7</span>);\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "int __cdecl ui__popup_menu(int argc, char *const *argv) {\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">rc</span>;\n  int <span class=\"supfact\">max_len</span>;\n  int <span class=\"supfact\">len</span>;\n  newtComponent <span class=\"supfact\">form</span>;\n  newtComponent <span class=\"supfact\">listbox</span>;\n  newtExitStruct <span class=\"supfact\">es_0</span>;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  <span class=\"supfact\">rc</span> = Number;\n  <span class=\"supfact\">max_len</span> = Number;\n  <span class=\"supfact\">form</span> = newt_form__new();\n  if (!<span class=\"supfact\">form</span>)\n    return Number;\n  <span class=\"supfact\">listbox</span> = (newtComponent)newtListbox(\n      Number L, Number L, (unsigned int)argc, Number L);\n  if (<span class=\"supfact\">listbox</span>) {\n    newtFormAddComponent(<span class=\"supfact\">form</span>, <span class=\"supfact\">listbox</span>);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < argc;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">len</span> = strlen(argv[<span class=\"supfact\">i</span>]);\n      if (<span class=\"supfact\">len</span> > <span class=\"supfact\">max_len</span>)\n        <span class=\"supfact\">max_len</span> = <span class=\"supfact\">len</span>;\n      if ((unsigned int)newtListboxAppendEntry(<span class=\"supfact\">listbox</span>,\n                                               argv[<span class=\"supfact\">i</span>],\n                                               <span class=\"supfact\">i</span>))\n        goto out_destroy_form;\n    }\n    newtCenteredWindow((unsigned int)<span class=\"supfact\">max_len</span>,\n                       (unsigned int)argc, Number L);\n    newtFormRun(<span class=\"supfact\">form</span>, &<span class=\"supfact\">es_0</span>);\n    <span class=\"supfact\">rc</span> = newtListboxGetCurrent(<span class=\"supfact\">listbox</span>);\n    if (<span class=\"supfact\">es_0</span>.reason == NEWT_EXIT_HOTKEY)\n      <span class=\"supfact\">rc</span> = Number;\n    newtPopWindow();\n  }\nout_destroy_form:\n  newtFormDestroy(<span class=\"supfact\">form</span>);\n  return <span class=\"supfact\">rc</span>;\n}", "var": [{"name": "v9", "type": "struct newtExitStruct { $8A0E841316367F8F3FAE0EA4CFA4FFA0 reason; PADDING (4); $5BBE92B3EB33F61DB9613085C5A5938E u; }", "ref_name": "es_0", "ref_type": "struct newtExitStruct { $8A0E841316367F8F3FAE0EA4CFA4FFA0 reason; PADDING (4); $5BBE92B3EB33F61DB9613085C5A5938E u; }"}], "body_in_train": true}, {"repo_owner": "mend0za", "repo_name": "QEMU-dt-config", "path": "mend0za/QEMU-dt-config/a8b0bd9f99393ab6adafcd4e555a4d06b7e13b0434dc2ed484a0bbda1f14553c", "path_in_repo": "mend0za/QEMU-dt-config//hw/net/e1000e_core.o", "objdump": "0000000000002a7a <trace_e1000e_rx_set_rdt>:\n    2a7a:\t55                   \tpush   %rbp\n    2a7b:\t48 89 e5             \tmov    %rsp,%rbp\n    2a7e:\t41 54                \tpush   %r12\n    2a80:\t53                   \tpush   %rbx\n    2a81:\t48 83 ec 30          \tsub    $0x30,%rsp\n    2a85:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    2a88:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    2a8b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2a92:\t00 00 \n    2a94:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2a98:\t31 c0                \txor    %eax,%eax\n    2a9a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2aa0 <trace_e1000e_rx_set_rdt+0x26>\n    2aa0:\t85 c0                \ttest   %eax,%eax\n    2aa2:\t0f 95 c0             \tsetne  %al\n    2aa5:\t0f b6 c0             \tmovzbl %al,%eax\n    2aa8:\t48 85 c0             \ttest   %rax,%rax\n    2aab:\t74 67                \tje     2b14 <trace_e1000e_rx_set_rdt+0x9a>\n    2aad:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 2ab4 <trace_e1000e_rx_set_rdt+0x3a>\n    2ab4:\t66 85 c0             \ttest   %ax,%ax\n    2ab7:\t74 5b                \tje     2b14 <trace_e1000e_rx_set_rdt+0x9a>\n    2ab9:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    2abd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2ac2:\t48 89 c7             \tmov    %rax,%rdi\n    2ac5:\te8 00 00 00 00       \tcallq  2aca <trace_e1000e_rx_set_rdt+0x50>\n    2aca:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    2acf:\te8 1f dc ff ff       \tcallq  6f3 <qemu_loglevel_mask>\n    2ad4:\t0f b6 c0             \tmovzbl %al,%eax\n    2ad7:\t48 85 c0             \ttest   %rax,%rax\n    2ada:\t74 38                \tje     2b14 <trace_e1000e_rx_set_rdt+0x9a>\n    2adc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2ae0:\t49 89 c4             \tmov    %rax,%r12\n    2ae3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2ae7:\t48 89 c3             \tmov    %rax,%rbx\n    2aea:\te8 00 00 00 00       \tcallq  2aef <trace_e1000e_rx_set_rdt+0x75>\n    2aef:\t8b 4d c8             \tmov    -0x38(%rbp),%ecx\n    2af2:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    2af5:\t41 89 c9             \tmov    %ecx,%r9d\n    2af8:\t41 89 d0             \tmov    %edx,%r8d\n    2afb:\t4c 89 e1             \tmov    %r12,%rcx\n    2afe:\t48 89 da             \tmov    %rbx,%rdx\n    2b01:\t89 c6                \tmov    %eax,%esi\n    2b03:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2b0a <trace_e1000e_rx_set_rdt+0x90>\n    2b0a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2b0f:\te8 00 00 00 00       \tcallq  2b14 <trace_e1000e_rx_set_rdt+0x9a>\n    2b14:\t90                   \tnop\n    2b15:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2b19:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    2b20:\t00 00 \n    2b22:\t74 05                \tje     2b29 <trace_e1000e_rx_set_rdt+0xaf>\n    2b24:\te8 00 00 00 00       \tcallq  2b29 <trace_e1000e_rx_set_rdt+0xaf>\n    2b29:\t48 83 c4 30          \tadd    $0x30,%rsp\n    2b2d:\t5b                   \tpop    %rbx\n    2b2e:\t41 5c                \tpop    %r12\n    2b30:\t5d                   \tpop    %rbp\n    2b31:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_e1000e_rx_set_rdt(unsigned int a1,\n                                                    unsigned int a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_E1000E_RX_SET_RDT_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v2 = <span class=\"supfact\">tv</span>.tv_usec;\n        v3 = <span class=\"supfact\">tv</span>.tv_sec;\n        v4 = getpid();\n        qemu_log(String, v4, v3, v2, a1, a2);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v7</span>;\n}", "code_t": "void __cdecl trace_e1000e_rx_set_rdt(int queue_idx, uint32_t val) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_E1000E_RX_SET_RDT_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v2 = <span class=\"supfact\">_now</span>.tv_usec;\n      v3 = <span class=\"supfact\">_now</span>.tv_sec;\n      v4 = getpid();\n      qemu_log(String, v4, v3, v2, (unsigned int)queue_idx, val);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "hall-lab", "repo_name": "speedseq", "path": "hall-lab/speedseq/fa5a52a60f7e71089639f2ace10245e83c2055700b46d2d1f9eccad159fa8496", "path_in_repo": "hall-lab/speedseq/src/lumpy-sv/src/utils/BamTools/src/api/internal/io/ByteArray_p.o", "objdump": "0000000000000000 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  10:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  14:\t48 89 d6             \tmov    %rdx,%rsi\n  17:\t48 89 c7             \tmov    %rax,%rdi\n  1a:\te8 00 00 00 00       \tcallq  1f <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_+0x1f>\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\tc9                   \tleaveq \n  24:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n__make_move_if_noexcept_iterator<char, std move_iterator<char *>>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  std move_iterator<char *> move_iterator(&<span class=\"supfact\">v2</span>, a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std move_iterator<char *> __cdecl std\n__make_move_if_noexcept_iterator<char, std move_iterator<char *>>(char *__i) {\n  std move_iterator<char *> <span class=\"supfact\">v2</span>;\n  std move_iterator<char *> move_iterator(&<span class=\"supfact\">v2</span>, __i);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "struct std::move_iterator<char*> { char * _M_current; }"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/5d15db5cfdd0435028e89cabc391501c339aff349d801fe840bc3614804958dc", "path_in_repo": "AlexanderVangelov/pjsip//pjlib/build/output/pjlib-test-x86_64-unknown-linux-gnu/udp_echo_srv_sync.o", "objdump": "0000000000000000 <worker_thread>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec 60 02 00 00 \tsub    $0x260,%rsp\n   b:\t48 89 bd a8 fd ff ff \tmov    %rdi,-0x258(%rbp)\n  12:\t48 8b 85 a8 fd ff ff \tmov    -0x258(%rbp),%rax\n  19:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  1d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  24:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  2b:\te9 eb 00 00 00       \tjmpq   11b <worker_thread+0x11b>\n  30:\t48 c7 85 d8 fd ff ff \tmovq   $0x200,-0x228(%rbp)\n  37:\t00 02 00 00 \n  3b:\tc7 85 bc fd ff ff 10 \tmovl   $0x10,-0x244(%rbp)\n  42:\t00 00 00 \n  45:\t48 8d bd bc fd ff ff \tlea    -0x244(%rbp),%rdi\n  4c:\t48 8d 8d c0 fd ff ff \tlea    -0x240(%rbp),%rcx\n  53:\t48 8d 95 d8 fd ff ff \tlea    -0x228(%rbp),%rdx\n  5a:\t48 8d b5 e0 fd ff ff \tlea    -0x220(%rbp),%rsi\n  61:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  65:\t49 89 f9             \tmov    %rdi,%r9\n  68:\t49 89 c8             \tmov    %rcx,%r8\n  6b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  70:\t48 89 c7             \tmov    %rax,%rdi\n  73:\te8 00 00 00 00       \tcallq  78 <worker_thread+0x78>\n  78:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  7b:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  7f:\t74 23                \tje     a4 <worker_thread+0xa4>\n  81:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  84:\t3b 45 fc             \tcmp    -0x4(%rbp),%eax\n  87:\t0f 84 8a 00 00 00    \tje     117 <worker_thread+0x117>\n  8d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  90:\t89 c6                \tmov    %eax,%esi\n  92:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  97:\te8 00 00 00 00       \tcallq  9c <worker_thread+0x9c>\n  9c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  9f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  a2:\teb 73                \tjmp    117 <worker_thread+0x117>\n  a4:\t48 8b 95 d8 fd ff ff \tmov    -0x228(%rbp),%rdx\n  ab:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b2 <worker_thread+0xb2>\n  b2:\t48 89 d6             \tmov    %rdx,%rsi\n  b5:\t48 89 c7             \tmov    %rax,%rdi\n  b8:\te8 00 00 00 00       \tcallq  bd <worker_thread+0xbd>\n  bd:\t8b bd bc fd ff ff    \tmov    -0x244(%rbp),%edi\n  c3:\t48 8d 8d c0 fd ff ff \tlea    -0x240(%rbp),%rcx\n  ca:\t48 8d 95 d8 fd ff ff \tlea    -0x228(%rbp),%rdx\n  d1:\t48 8d b5 e0 fd ff ff \tlea    -0x220(%rbp),%rsi\n  d8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  dc:\t41 89 f9             \tmov    %edi,%r9d\n  df:\t49 89 c8             \tmov    %rcx,%r8\n  e2:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  e7:\t48 89 c7             \tmov    %rax,%rdi\n  ea:\te8 00 00 00 00       \tcallq  ef <worker_thread+0xef>\n  ef:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  f2:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  f6:\t74 23                \tje     11b <worker_thread+0x11b>\n  f8:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  fb:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n  fe:\t74 1a                \tje     11a <worker_thread+0x11a>\n 100:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 103:\t89 c6                \tmov    %eax,%esi\n 105:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 10a:\te8 00 00 00 00       \tcallq  10f <worker_thread+0x10f>\n 10f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 112:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 115:\teb 03                \tjmp    11a <worker_thread+0x11a>\n 117:\t90                   \tnop\n 118:\teb 01                \tjmp    11b <worker_thread+0x11b>\n 11a:\t90                   \tnop\n 11b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 121 <worker_thread+0x121>\n 121:\t85 c0                \ttest   %eax,%eax\n 123:\t0f 84 07 ff ff ff    \tje     30 <worker_thread+0x30>\n 129:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 12e:\tc9                   \tleaveq \n 12f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall worker_thread(__int64 a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  char <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  unsigned int <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v7</span> = a1;\n  <span class=\"supfact\">v9</span> = Number;\n  <span class=\"supfact\">v8</span> = Number;\n  while (!thread_quit_flag) {\n    <span class=\"supfact\">v4</span> = Number L;\n    <span class=\"supfact\">v2</span> = Number;\n    <span class=\"supfact\">v6</span> = pj_sock_recvfrom(\n        <span class=\"supfact\">v7</span>, <span class=\"supfact\">v5</span>, &<span class=\"supfact\">v4</span>, Number L,\n        <span class=\"supfact\">v3</span>, &<span class=\"supfact\">v2</span>);\n    if (<span class=\"supfact\">v6</span>) {\n      if (<span class=\"supfact\">v6</span> != <span class=\"supfact\">v9</span>) {\n        app_perror(String, <span class=\"supfact\">v6</span>);\n        <span class=\"supfact\">v9</span> = <span class=\"supfact\">v6</span>;\n      }\n    } else {\n      pj_atomic_add(total_bytes, <span class=\"supfact\">v4</span>);\n      <span class=\"supfact\">v6</span> = pj_sock_sendto(\n          <span class=\"supfact\">v7</span>, <span class=\"supfact\">v5</span>, &<span class=\"supfact\">v4</span>, Number L,\n          <span class=\"supfact\">v3</span>, <span class=\"supfact\">v2</span>);\n      if (<span class=\"supfact\">v6</span> && <span class=\"supfact\">v6</span> != <span class=\"supfact\">v8</span>) {\n        app_perror(String, <span class=\"supfact\">v6</span>);\n        <span class=\"supfact\">v8</span> = <span class=\"supfact\">v6</span>;\n      }\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl worker_thread(void *arg) {\n  int <span class=\"supfact\">addrlen</span>;\n  pj_sockaddr_in_0 <span class=\"supfact\">addr</span>;\n  pj_ssize_t <span class=\"supfact\">len</span>;\n  char <span class=\"supfact\">buf</span>[Number];\n  pj_status_t <span class=\"supfact\">rc</span>;\n  pj_sock_t <span class=\"supfact\">sock</span>;\n  pj_status_t <span class=\"supfact\">last_write_err</span>;\n  pj_status_t <span class=\"supfact\">last_recv_err</span>;\n  <span class=\"supfact\">sock</span> = (pj_sock_t)arg;\n  <span class=\"supfact\">last_recv_err</span> = Number;\n  <span class=\"supfact\">last_write_err</span> = Number;\n  while (!thread_quit_flag) {\n    <span class=\"supfact\">len</span> = Number L;\n    <span class=\"supfact\">addrlen</span> = Number;\n    <span class=\"supfact\">rc</span> = pj_sock_recvfrom(\n        <span class=\"supfact\">sock</span>, <span class=\"supfact\">buf</span>, &<span class=\"supfact\">len</span>,\n        Number L, &<span class=\"supfact\">addr</span>, &<span class=\"supfact\">addrlen</span>);\n    if (<span class=\"supfact\">rc</span>) {\n      if (<span class=\"supfact\">rc</span> != <span class=\"supfact\">last_recv_err</span>) {\n        app_perror(String, (unsigned int)<span class=\"supfact\">rc</span>);\n        <span class=\"supfact\">last_recv_err</span> = <span class=\"supfact\">rc</span>;\n      }\n    } else {\n      pj_atomic_add(total_bytes, <span class=\"supfact\">len</span>);\n      <span class=\"supfact\">rc</span> =\n          pj_sock_sendto(<span class=\"supfact\">sock</span>, <span class=\"supfact\">buf</span>,\n                         &<span class=\"supfact\">len</span>, Number L, &<span class=\"supfact\">addr</span>,\n                         (unsigned int)<span class=\"supfact\">addrlen</span>);\n      if (<span class=\"supfact\">rc</span> &&\n          <span class=\"supfact\">rc</span> != <span class=\"supfact\">last_write_err</span>) {\n        app_perror(String, (unsigned int)<span class=\"supfact\">rc</span>);\n        <span class=\"supfact\">last_write_err</span> = <span class=\"supfact\">rc</span>;\n      }\n    }\n  }\n  return Number;\n}", "var": [{"name": "v3", "type": "struct pj_sockaddr_in_0 { pj_uint16_t sin_family; pj_uint16_t sin_port; pj_in_addr_0 sin_addr; char[8] sin_zero; }", "ref_name": "addr", "ref_type": "struct pj_sockaddr_in_0 { pj_uint16_t sin_family; pj_uint16_t sin_port; pj_in_addr_0 sin_addr; char[8] sin_zero; }"}], "body_in_train": true}]