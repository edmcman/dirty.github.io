[{"repo_owner": "serhatkiyak", "repo_name": "Kernel_TFO", "path": "serhatkiyak/Kernel_TFO/b649c1c3ef959d26781a13536ea8e56021b88b78a393aa5b234c473ffc7fda1b", "path_in_repo": "serhatkiyak/Kernel_TFO/linux-3.18.1/tools/perf/builtin-report.o", "objdump": "000000000000124f <report__collapse_hists>:\n    124f:\t55                   \tpush   %rbp\n    1250:\t48 89 e5             \tmov    %rsp,%rbp\n    1253:\t48 83 ec 70          \tsub    $0x70,%rsp\n    1257:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    125b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1262:\t00 00 \n    1264:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1268:\t31 c0                \txor    %eax,%eax\n    126a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    126e:\t48 8b 88 e8 00 00 00 \tmov    0xe8(%rax),%rcx\n    1275:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1279:\tba 00 00 00 00       \tmov    $0x0,%edx\n    127e:\t48 89 ce             \tmov    %rcx,%rsi\n    1281:\t48 89 c7             \tmov    %rax,%rdi\n    1284:\te8 00 00 00 00       \tcallq  1289 <report__collapse_hists+0x3a>\n    1289:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    128d:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1291:\t48 8b 80 b8 01 00 00 \tmov    0x1b8(%rax),%rax\n    1298:\t48 8b 00             \tmov    (%rax),%rax\n    129b:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    129f:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    12a3:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    12a7:\te9 b2 00 00 00       \tjmpq   135e <report__collapse_hists+0x10f>\n    12ac:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    12b0:\t48 89 c7             \tmov    %rax,%rdi\n    12b3:\te8 83 ee ff ff       \tcallq  13b <evsel__hists>\n    12b8:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    12bc:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    12c0:\t8b 80 a0 00 00 00    \tmov    0xa0(%rax),%eax\n    12c6:\t85 c0                \ttest   %eax,%eax\n    12c8:\t75 13                \tjne    12dd <report__collapse_hists+0x8e>\n    12ca:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    12ce:\t48 8b 90 d8 00 00 00 \tmov    0xd8(%rax),%rdx\n    12d5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    12d9:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n    12dd:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    12e1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    12e5:\t48 89 d6             \tmov    %rdx,%rsi\n    12e8:\t48 89 c7             \tmov    %rax,%rdi\n    12eb:\te8 00 00 00 00       \tcallq  12f0 <report__collapse_hists+0xa1>\n    12f0:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 12f7 <report__collapse_hists+0xa8>\n    12f7:\t84 c0                \ttest   %al,%al\n    12f9:\t74 50                \tje     134b <report__collapse_hists+0xfc>\n    12fb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    12ff:\t48 89 c7             \tmov    %rax,%rdi\n    1302:\te8 32 ed ff ff       \tcallq  39 <perf_evsel__is_group_leader>\n    1307:\t83 f0 01             \txor    $0x1,%eax\n    130a:\t84 c0                \ttest   %al,%al\n    130c:\t74 3d                \tje     134b <report__collapse_hists+0xfc>\n    130e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1312:\t48 8b 80 08 01 00 00 \tmov    0x108(%rax),%rax\n    1319:\t48 89 c7             \tmov    %rax,%rdi\n    131c:\te8 1a ee ff ff       \tcallq  13b <evsel__hists>\n    1321:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    1325:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    1329:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    132d:\t48 89 d6             \tmov    %rdx,%rsi\n    1330:\t48 89 c7             \tmov    %rax,%rdi\n    1333:\te8 00 00 00 00       \tcallq  1338 <report__collapse_hists+0xe9>\n    1338:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    133c:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1340:\t48 89 d6             \tmov    %rdx,%rsi\n    1343:\t48 89 c7             \tmov    %rax,%rdi\n    1346:\te8 00 00 00 00       \tcallq  134b <report__collapse_hists+0xfc>\n    134b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    134f:\t48 8b 00             \tmov    (%rax),%rax\n    1352:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    1356:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    135a:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    135e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1362:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1366:\t48 8b 80 b8 01 00 00 \tmov    0x1b8(%rax),%rax\n    136d:\t48 39 45 a8          \tcmp    %rax,-0x58(%rbp)\n    1371:\t0f 85 35 ff ff ff    \tjne    12ac <report__collapse_hists+0x5d>\n    1377:\te8 00 00 00 00       \tcallq  137c <report__collapse_hists+0x12d>\n    137c:\t90                   \tnop\n    137d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1381:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1388:\t00 00 \n    138a:\t74 05                \tje     1391 <report__collapse_hists+0x142>\n    138c:\te8 00 00 00 00       \tcallq  1391 <report__collapse_hists+0x142>\n    1391:\tc9                   \tleaveq \n    1392:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall report__collapse_hists(_QWORD *a1) {\n  __int64 i;\n  __int64 v3;\n  __int64 v4;\n  char <span class=\"supfact\">v5</span>[Number];\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  ui_progress__init(<span class=\"supfact\">v5</span>, a1[Number], String);\n  for (i = **(_QWORD **)(a1[Number] + Number L);\n       i != *(_QWORD *)(a1[Number] + Number L); i = *(_QWORD *)i) {\n    v3 = evsel__hists(i);\n    if (!*(_DWORD *)(i + Number))\n      *(_QWORD *)(v3 + Number) = a1[Number];\n    hists__collapse_resort(v3, <span class=\"supfact\">v5</span>);\n    if (symbol_conf[Number] && !perf_evsel__is_group_leader(i)) {\n      v4 = evsel__hists(*(_QWORD *)(i + Number));\n      hists__match(v4, v3);\n      hists__link(v4, v3);\n    }\n  }\n  ui_progress__finish();\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl report__collapse_hists(report *rep) {\n  perf_evsel *pos;\n  hists *hists;\n  hists *leader_hists;\n  ui_progress <span class=\"supfact\">prog</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  ui_progress__init(&<span class=\"supfact\">prog</span>, rep->nr_entries, String);\n  for (pos = (perf_evsel *)rep->session->evlist->entries.next;\n       pos != (perf_evsel *)rep->session->evlist;\n       pos = (perf_evsel *)pos->node.next) {\n    hists = evsel__hists(pos);\n    if (!pos->idx)\n      hists->symbol_filter_str = rep->symbol_filter_str;\n    hists__collapse_resort(hists, &<span class=\"supfact\">prog</span>);\n    if (symbol_conf_0[Number] && !perf_evsel__is_group_leader(pos)) {\n      leader_hists = evsel__hists(pos->leader);\n      hists__match(leader_hists, hists);\n      hists__link(leader_hists, hists);\n    }\n  }\n  ui_progress__finish();\n}", "var": [{"name": "v5", "type": "struct ui_progress { const char * title; u64 curr; u64 next; u64 step; u64 total; }", "ref_name": "prog", "ref_type": "struct ui_progress { const char * title; u64 curr; u64 next; u64 step; u64 total; }"}], "body_in_train": true}, {"repo_owner": "Nemirtingas9", "repo_name": "android_kernel_samsung_ms01lte", "path": "Nemirtingas9/android_kernel_samsung_ms01lte/d6cc226f9d1045a24fa9e190070c05cc090da174b6b7aaf9a8152d53d69ed09d", "path_in_repo": "Nemirtingas9/android_kernel_samsung_ms01lte/tools/perf/util/header.o", "objdump": "000000000000579a <perf_header__read_pipe>:\n    579a:\t55                   \tpush   %rbp\n    579b:\t48 89 e5             \tmov    %rsp,%rbp\n    579e:\t48 83 ec 40          \tsub    $0x40,%rsp\n    57a2:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    57a6:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    57a9:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    57b0:\t00 00 \n    57b2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    57b6:\t31 c0                \txor    %eax,%eax\n    57b8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    57bc:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    57c0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    57c4:\t0f b6 80 31 03 00 00 \tmovzbl 0x331(%rax),%eax\n    57cb:\t0f b6 c8             \tmovzbl %al,%ecx\n    57ce:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    57d1:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    57d5:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    57d9:\t48 89 c7             \tmov    %rax,%rdi\n    57dc:\te8 c1 fe ff ff       \tcallq  56a2 <perf_file_header__read_pipe>\n    57e1:\t85 c0                \ttest   %eax,%eax\n    57e3:\t79 1b                \tjns    5800 <perf_header__read_pipe+0x66>\n    57e5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    57ea:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    57ef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    57f4:\te8 00 00 00 00       \tcallq  57f9 <perf_header__read_pipe+0x5f>\n    57f9:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    57fe:\teb 12                \tjmp    5812 <perf_header__read_pipe+0x78>\n    5800:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    5804:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    5807:\t89 90 2c 03 00 00    \tmov    %edx,0x32c(%rax)\n    580d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5812:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    5816:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    581d:\t00 00 \n    581f:\t74 05                \tje     5826 <perf_header__read_pipe+0x8c>\n    5821:\te8 00 00 00 00       \tcallq  5826 <perf_header__read_pipe+0x8c>\n    5826:\tc9                   \tleaveq \n    5827:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_header__read_pipe(__int64 a1, unsigned int a2) {\n  __int64 result;\n  char <span class=\"supfact\">v3</span>[Number];\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if ((int)perf_file_header__read_pipe((__int64)<span class=\"supfact\">v3</span>, a1, a2,\n                                       *(_BYTE *)(a1 + Number)) >= Number) {\n    *(_DWORD *)(a1 + Number) = a2;\n    result = Number L;\n  } else {\n    eprintf(Number L, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl perf_header__read_pipe(perf_session *session, int fd) {\n  int result;\n  perf_pipe_file_header <span class=\"supfact\">f_header</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (perf_file_header__read_pipe(&<span class=\"supfact\">f_header</span>, &session->header,\n                                  fd, session->repipe) >= Number) {\n    session->fd = fd;\n    result = Number;\n  } else {\n    eprintf(Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "struct perf_pipe_file_header { u64 magic; u64 size; }", "ref_name": "f_header", "ref_type": "struct perf_pipe_file_header { u64 magic; u64 size; }"}], "body_in_train": true}, {"repo_owner": "axbaretto", "repo_name": "torch", "path": "axbaretto/torch/ccd3b3108ab02956fcf5f1d14c863baa19c4e9dc4bbd0ade6143e963a6af6a09", "path_in_repo": "axbaretto/torch/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "0000000000000000 <_ZNSt6vectorIcSaIcEE3endEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  14:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  18:\t48 89 d6             \tmov    %rdx,%rsi\n  1b:\t48 89 c7             \tmov    %rax,%rdi\n  1e:\te8 00 00 00 00       \tcallq  23 <_ZNSt6vectorIcSaIcEE3endEv+0x23>\n  23:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  27:\tc9                   \tleaveq \n  28:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<char> end(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __gnu_cxx __normal_iterator<char *, std vector<char>> __normal_iterator(\n      &<span class=\"supfact\">v2</span>, a1 + Number);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std vector<char> iterator __cdecl std vector<char>\nend(std vector<char> *const this) {\n  __gnu_cxx __normal_iterator<char *, std vector<char>> <span class=\"supfact\">v2</span>;\n  __gnu_cxx __normal_iterator<char *, std vector<char>> __normal_iterator(\n      &<span class=\"supfact\">v2</span>, &this->_M_impl._M_finish);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "struct __gnu_cxx::__normal_iterator<char*,std::vector<char> > { char * _M_current; }", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<char*,std::vector<char> > { char * _M_current; }"}], "body_in_train": true}, {"repo_owner": "yoshii", "repo_name": "qemu", "path": "yoshii/qemu/fed4d997f9053bf72bceef7e1a62efe7bd16de9708104a05df02ac0549fb09bf", "path_in_repo": "yoshii/qemu//ppc64abi32-linux-user/syscall.o", "objdump": "000000000000e54d <do_shmat>:\n    e54d:\t55                   \tpush   %rbp\n    e54e:\t48 89 e5             \tmov    %rsp,%rbp\n    e551:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    e558:\t89 bd 4c ff ff ff    \tmov    %edi,-0xb4(%rbp)\n    e55e:\t89 b5 48 ff ff ff    \tmov    %esi,-0xb8(%rbp)\n    e564:\t89 95 44 ff ff ff    \tmov    %edx,-0xbc(%rbp)\n    e56a:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    e571:\t00 00 \n    e573:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    e577:\t31 c0                \txor    %eax,%eax\n    e579:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    e57d:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n    e583:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    e588:\t89 c7                \tmov    %eax,%edi\n    e58a:\te8 00 00 00 00       \tcallq  e58f <do_shmat+0x42>\n    e58f:\t89 c7                \tmov    %eax,%edi\n    e591:\te8 bf 2c ff ff       \tcallq  1255 <get_errno>\n    e596:\t89 85 5c ff ff ff    \tmov    %eax,-0xa4(%rbp)\n    e59c:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    e5a2:\t89 c7                \tmov    %eax,%edi\n    e5a4:\te8 f7 2c ff ff       \tcallq  12a0 <is_error>\n    e5a9:\t85 c0                \ttest   %eax,%eax\n    e5ab:\t74 0b                \tje     e5b8 <do_shmat+0x6b>\n    e5ad:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    e5b3:\te9 e7 01 00 00       \tjmpq   e79f <do_shmat+0x252>\n    e5b8:\te8 00 00 00 00       \tcallq  e5bd <do_shmat+0x70>\n    e5bd:\t83 bd 48 ff ff ff 00 \tcmpl   $0x0,-0xb8(%rbp)\n    e5c4:\t74 32                \tje     e5f8 <do_shmat+0xab>\n    e5c6:\t8b 95 48 ff ff ff    \tmov    -0xb8(%rbp),%edx\n    e5cc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e5d3 <do_shmat+0x86>\n    e5d3:\t48 01 d0             \tadd    %rdx,%rax\n    e5d6:\t48 89 c1             \tmov    %rax,%rcx\n    e5d9:\t8b 95 44 ff ff ff    \tmov    -0xbc(%rbp),%edx\n    e5df:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n    e5e5:\t48 89 ce             \tmov    %rcx,%rsi\n    e5e8:\t89 c7                \tmov    %eax,%edi\n    e5ea:\te8 00 00 00 00       \tcallq  e5ef <do_shmat+0xa2>\n    e5ef:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n    e5f6:\teb 6c                \tjmp    e664 <do_shmat+0x117>\n    e5f8:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e5fc:\t89 c6                \tmov    %eax,%esi\n    e5fe:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    e603:\te8 00 00 00 00       \tcallq  e608 <do_shmat+0xbb>\n    e608:\t89 85 60 ff ff ff    \tmov    %eax,-0xa0(%rbp)\n    e60e:\t83 bd 60 ff ff ff ff \tcmpl   $0xffffffff,-0xa0(%rbp)\n    e615:\t75 18                \tjne    e62f <do_shmat+0xe2>\n    e617:\te8 00 00 00 00       \tcallq  e61c <do_shmat+0xcf>\n    e61c:\tc7 00 0c 00 00 00    \tmovl   $0xc,(%rax)\n    e622:\t48 c7 85 68 ff ff ff \tmovq   $0xffffffffffffffff,-0x98(%rbp)\n    e629:\tff ff ff ff \n    e62d:\teb 35                \tjmp    e664 <do_shmat+0x117>\n    e62f:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n    e635:\t80 cc 40             \tor     $0x40,%ah\n    e638:\t89 c2                \tmov    %eax,%edx\n    e63a:\t8b 8d 60 ff ff ff    \tmov    -0xa0(%rbp),%ecx\n    e640:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e647 <do_shmat+0xfa>\n    e647:\t48 01 c8             \tadd    %rcx,%rax\n    e64a:\t48 89 c1             \tmov    %rax,%rcx\n    e64d:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n    e653:\t48 89 ce             \tmov    %rcx,%rsi\n    e656:\t89 c7                \tmov    %eax,%edi\n    e658:\te8 00 00 00 00       \tcallq  e65d <do_shmat+0x110>\n    e65d:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n    e664:\t48 83 bd 68 ff ff ff \tcmpq   $0xffffffffffffffff,-0x98(%rbp)\n    e66b:\tff \n    e66c:\t75 18                \tjne    e686 <do_shmat+0x139>\n    e66e:\te8 00 00 00 00       \tcallq  e673 <do_shmat+0x126>\n    e673:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    e67a:\t89 c7                \tmov    %eax,%edi\n    e67c:\te8 d4 2b ff ff       \tcallq  1255 <get_errno>\n    e681:\te9 19 01 00 00       \tjmpq   e79f <do_shmat+0x252>\n    e686:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n    e68d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e694 <do_shmat+0x147>\n    e694:\t48 29 c2             \tsub    %rax,%rdx\n    e697:\t48 89 d0             \tmov    %rdx,%rax\n    e69a:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n    e6a1:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n    e6a8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e6af <do_shmat+0x162>\n    e6af:\t48 29 c2             \tsub    %rax,%rdx\n    e6b2:\t48 89 d0             \tmov    %rdx,%rax\n    e6b5:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n    e6bc:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    e6c1:\t48 39 85 78 ff ff ff \tcmp    %rax,-0x88(%rbp)\n    e6c8:\t0f 96 c0             \tsetbe  %al\n    e6cb:\t0f b6 c0             \tmovzbl %al,%eax\n    e6ce:\t85 c0                \ttest   %eax,%eax\n    e6d0:\t75 19                \tjne    e6eb <do_shmat+0x19e>\n    e6d2:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    e6d7:\tba c9 0a 00 00       \tmov    $0xac9,%edx\n    e6dc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    e6e1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    e6e6:\te8 00 00 00 00       \tcallq  e6eb <do_shmat+0x19e>\n    e6eb:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n    e6f2:\t89 85 64 ff ff ff    \tmov    %eax,-0x9c(%rbp)\n    e6f8:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n    e6fe:\t25 00 10 00 00       \tand    $0x1000,%eax\n    e703:\t85 c0                \ttest   %eax,%eax\n    e705:\t74 07                \tje     e70e <do_shmat+0x1c1>\n    e707:\tbe 09 00 00 00       \tmov    $0x9,%esi\n    e70c:\teb 05                \tjmp    e713 <do_shmat+0x1c6>\n    e70e:\tbe 0b 00 00 00       \tmov    $0xb,%esi\n    e713:\t8b 85 64 ff ff ff    \tmov    -0x9c(%rbp),%eax\n    e719:\t48 63 d0             \tmovslq %eax,%rdx\n    e71c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e720:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n    e724:\t8b 85 64 ff ff ff    \tmov    -0x9c(%rbp),%eax\n    e72a:\t48 98                \tcltq   \n    e72c:\t89 f2                \tmov    %esi,%edx\n    e72e:\t48 89 ce             \tmov    %rcx,%rsi\n    e731:\t48 89 c7             \tmov    %rax,%rdi\n    e734:\te8 00 00 00 00       \tcallq  e739 <do_shmat+0x1ec>\n    e739:\tc7 85 58 ff ff ff 00 \tmovl   $0x0,-0xa8(%rbp)\n    e740:\t00 00 00 \n    e743:\teb 46                \tjmp    e78b <do_shmat+0x23e>\n    e745:\t8b 85 58 ff ff ff    \tmov    -0xa8(%rbp),%eax\n    e74b:\t48 98                \tcltq   \n    e74d:\t8b 04 c5 00 00 00 00 \tmov    0x0(,%rax,8),%eax\n    e754:\t85 c0                \ttest   %eax,%eax\n    e756:\t75 2c                \tjne    e784 <do_shmat+0x237>\n    e758:\t8b 95 64 ff ff ff    \tmov    -0x9c(%rbp),%edx\n    e75e:\t8b 85 58 ff ff ff    \tmov    -0xa8(%rbp),%eax\n    e764:\t48 98                \tcltq   \n    e766:\t89 14 c5 00 00 00 00 \tmov    %edx,0x0(,%rax,8)\n    e76d:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e771:\t89 c2                \tmov    %eax,%edx\n    e773:\t8b 85 58 ff ff ff    \tmov    -0xa8(%rbp),%eax\n    e779:\t48 98                \tcltq   \n    e77b:\t89 14 c5 00 00 00 00 \tmov    %edx,0x0(,%rax,8)\n    e782:\teb 10                \tjmp    e794 <do_shmat+0x247>\n    e784:\t83 85 58 ff ff ff 01 \taddl   $0x1,-0xa8(%rbp)\n    e78b:\t83 bd 58 ff ff ff 1f \tcmpl   $0x1f,-0xa8(%rbp)\n    e792:\t7e b1                \tjle    e745 <do_shmat+0x1f8>\n    e794:\te8 00 00 00 00       \tcallq  e799 <do_shmat+0x24c>\n    e799:\t8b 85 64 ff ff ff    \tmov    -0x9c(%rbp),%eax\n    e79f:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    e7a3:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    e7aa:\t00 00 \n    e7ac:\t74 05                \tje     e7b3 <do_shmat+0x266>\n    e7ae:\te8 00 00 00 00       \tcallq  e7b3 <do_shmat+0x266>\n    e7b3:\tc9                   \tleaveq \n    e7b4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_shmat(int a1, unsigned int a2, int a3) {\n  int v3;\n  __int64 result;\n  int v5;\n  unsigned int v6;\n  int i;\n  unsigned int v9;\n  unsigned int v10;\n  __int64 v11;\n  int v12;\n  struct shmid_ds <span class=\"supfact\">buf</span>;\n  unsigned __int64 v14;\n  v14 = __readfsqword(Number);\n  v3 = shmctl(a1, Number, &<span class=\"supfact\">buf</span>);\n  v9 = get_errno(v3);\n  if (is_error(v9))\n    return v9;\n  mmap_lock();\n  if (a2) {\n    v11 = (__int64)shmat(a1, (const void *)(a2 + guest_base), a3);\n  } else {\n    v10 = mmap_find_vma(Number L, LODWORD(<span class=\"supfact\">buf</span>.shm_segsz));\n    if (v10 == Number) {\n      *_errno_location() = Number;\n      v11 = Number;\n    } else {\n      v5 = a3;\n      BYTE1(v5) = BYTE1(a3) | Number;\n      v11 = (__int64)shmat(a1, (const void *)(v10 + guest_base), v5);\n    }\n  }\n  if (v11 == Number) {\n    mmap_unlock();\n    result = get_errno(Number);\n  } else {\n    v12 = v11 - guest_base;\n    if ((unsigned __int64)(v11 - guest_base) > Number)\n      _assert_fail(String, String, Number, String);\n    if ((a3 & Number) != Number)\n      v6 = Number;\n    else\n      v6 = Number;\n    page_set_flags(v12, v12 + <span class=\"supfact\">buf</span>.shm_segsz, v6);\n    for (i = Number; i <= Number; ++i) {\n      if (!shm_regions[Number * i]) {\n        shm_regions[Number * i] = v12;\n        dword_1EAE4[Number * i] = <span class=\"supfact\">buf</span>.shm_segsz;\n        break;\n      }\n    }\n    mmap_unlock();\n    result = (unsigned int)v12;\n  }\n  return result;\n}", "code_t": "abi_ulong __cdecl do_shmat(int shmid, abi_ulong shmaddr, int shmflg) {\n  int v3;\n  abi_ulong result;\n  int v5;\n  unsigned int v6;\n  int i;\n  int ret;\n  abi_ulong mmap_start;\n  __int64 host_raddr;\n  signed int __ret;\n  shmid_ds <span class=\"supfact\">shm_info</span>;\n  unsigned __int64 v14;\n  v14 = __readfsqword(Number);\n  v3 = shmctl(shmid, Number, &<span class=\"supfact\">shm_info</span>);\n  ret = get_errno(v3);\n  if (is_error(ret))\n    return ret;\n  mmap_lock();\n  if (shmaddr) {\n    host_raddr =\n        (__int64)shmat(shmid, (const void *)(shmaddr + guest_base), shmflg);\n  } else {\n    mmap_start =\n        mmap_find_vma(Number L, LODWORD(<span class=\"supfact\">shm_info</span>.shm_segsz));\n    if (mmap_start == Number) {\n      *_errno_location() = Number;\n      host_raddr = Number;\n    } else {\n      v5 = shmflg;\n      BYTE1(v5) = BYTE1(shmflg) | Number;\n      host_raddr =\n          (__int64)shmat(shmid, (const void *)(mmap_start + guest_base), v5);\n    }\n  }\n  if (host_raddr == Number) {\n    mmap_unlock();\n    result = get_errno(Number);\n  } else {\n    __ret = host_raddr - guest_base;\n    if ((unsigned __int64)(host_raddr - guest_base) > Number)\n      _assert_fail(String, String, Number, String);\n    if ((shmflg & Number) != Number)\n      v6 = Number;\n    else\n      v6 = Number;\n    page_set_flags(__ret, __ret + <span class=\"supfact\">shm_info</span>.shm_segsz, v6);\n    for (i = Number; i <= Number; ++i) {\n      if (!shm_regions[i].start) {\n        shm_regions[i].start = __ret;\n        shm_regions[i].size = <span class=\"supfact\">shm_info</span>.shm_segsz;\n        break;\n      }\n    }\n    mmap_unlock();\n    result = __ret;\n  }\n  return result;\n}", "var": [{"name": "buf", "type": "struct shmid_ds { ipc_perm shm_perm; size_t shm_segsz; __time_t shm_atime; __time_t shm_dtime; __time_t shm_ctime; __pid_t shm_cpid; __pid_t shm_lpid; shmatt_t shm_nattch; __syscall_ulong_t __glibc_reserved4; __syscall_ulong_t __glibc_reserved5; }", "ref_name": "shm_info", "ref_type": "struct shmid_ds { ipc_perm shm_perm; size_t shm_segsz; __time_t shm_atime; __time_t shm_dtime; __time_t shm_ctime; __pid_t shm_cpid; __pid_t shm_lpid; shmatt_t shm_nattch; __syscall_ulong_t __glibc_reserved4; __syscall_ulong_t __glibc_reserved5; }"}], "body_in_train": false}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/3293f3fa1500fc475b58ea71a7a4f764094df8d29ae1d1395456a10e2de135b9", "path_in_repo": "eerimoq/pumbaa/simba/tst/collections/hash_map/build/linux/obj/usr/src/repo/simba/src/sync/rwlock.o", "objdump": "0000000000000000 <rwlock_reader_take>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <rwlock_reader_take+0xd>\n   d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  11:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18 <rwlock_reader_take+0x18>\n  18:\t48 83 c0 01          \tadd    $0x1,%rax\n  1c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 23 <rwlock_reader_take+0x23>\n  23:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  28:\t75 41                \tjne    6b <rwlock_reader_take+0x6b>\n  2a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 31 <rwlock_reader_take+0x31>\n  31:\t48 83 c0 01          \tadd    $0x1,%rax\n  35:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 3c <rwlock_reader_take+0x3c>\n  3c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  41:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  46:\te8 00 00 00 00       \tcallq  4b <rwlock_reader_take+0x4b>\n  4b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 52 <rwlock_reader_take+0x52>\n  52:\t48 83 c0 01          \tadd    $0x1,%rax\n  56:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 5d <rwlock_reader_take+0x5d>\n  5d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 64 <rwlock_reader_take+0x64>\n  64:\tbf 16 00 00 00       \tmov    $0x16,%edi\n  69:\tff d0                \tcallq  *%rax\n  6b:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  72:\te8 00 00 00 00       \tcallq  77 <rwlock_reader_take+0x77>\n  77:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7e <rwlock_reader_take+0x7e>\n  7e:\t48 83 c0 01          \tadd    $0x1,%rax\n  82:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 89 <rwlock_reader_take+0x89>\n  89:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  8d:\t8b 00                \tmov    (%rax),%eax\n  8f:\t8d 50 01             \tlea    0x1(%rax),%edx\n  92:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  96:\t89 10                \tmov    %edx,(%rax)\n  98:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  9c:\t8b 40 04             \tmov    0x4(%rax),%eax\n  9f:\t85 c0                \ttest   %eax,%eax\n  a1:\t7e 69                \tjle    10c <rwlock_reader_take+0x10c>\n  a3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # aa <rwlock_reader_take+0xaa>\n  aa:\t48 83 c0 01          \tadd    $0x1,%rax\n  ae:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # b5 <rwlock_reader_take+0xb5>\n  b5:\te8 00 00 00 00       \tcallq  ba <rwlock_reader_take+0xba>\n  ba:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # c1 <rwlock_reader_take+0xc1>\n  c1:\t48 83 c2 01          \tadd    $0x1,%rdx\n  c5:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # cc <rwlock_reader_take+0xcc>\n  cc:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  d0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  d4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  d8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  dc:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  e3:\t00 \n  e4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  e8:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  ec:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  f0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  f5:\te8 00 00 00 00       \tcallq  fa <rwlock_reader_take+0xfa>\n  fa:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 101 <rwlock_reader_take+0x101>\n 101:\t48 83 c0 01          \tadd    $0x1,%rax\n 105:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 10c <rwlock_reader_take+0x10c>\n 10c:\te8 00 00 00 00       \tcallq  111 <rwlock_reader_take+0x111>\n 111:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 118 <rwlock_reader_take+0x118>\n 118:\t48 83 c0 01          \tadd    $0x1,%rax\n 11c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 123 <rwlock_reader_take+0x123>\n 123:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 126:\tc9                   \tleaveq \n 127:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rwlock_reader_take(__int64 a1) {\n  __int64 v1;\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  unsigned int v4;\n  ++_gcov0_rwlock_reader_take;\n  if (!a1) {\n    ++qword_B08;\n    std_printf(String);\n    ++qword_B10;\n    sys(Number L);\n  }\n  v4 = Number;\n  sys_lock();\n  ++qword_B18;\n  ++*(_DWORD *)a1;\n  if (*(int *)(a1 + Number) > Number) {\n    ++qword_B20;\n    v1 = thrd_self();\n    ++qword_B28;\n    <span class=\"supfact\">v3</span>[Number] = v1;\n    <span class=\"supfact\">v3</span>[Number] = *(_QWORD *)(a1 + Number);\n    <span class=\"supfact\">v3</span>[Number] = Number L;\n    *(_QWORD *)(a1 + Number) = <span class=\"supfact\">v3</span>;\n    thrd_suspend_isr(Number L);\n    ++qword_B30;\n  }\n  sys_unlock();\n  ++qword_B38;\n  return v4;\n}", "code_t": "int __cdecl rwlock_reader_take(rwlock_t *self_p) {\n  thrd_t *v1;\n  rwlock_elem_t <span class=\"supfact\">elem</span>;\n  int res;\n  ++_gcov0_rwlock_reader_take;\n  if (!self_p) {\n    ++qword_B08;\n    std_printf(String);\n    ++qword_B10;\n    sys(Number L);\n  }\n  res = Number;\n  sys_lock();\n  ++qword_B18;\n  ++self_p->number_of_readers;\n  if (self_p->number_of_writers > Number) {\n    ++qword_B20;\n    v1 = (thrd_t *)thrd_self();\n    ++qword_B28;\n    <span class=\"supfact\">elem</span>.thrd_p = v1;\n    <span class=\"supfact\">elem</span>.next_p = self_p->readers_p;\n    <span class=\"supfact\">elem</span>.prev_p = Number L;\n    self_p->readers_p = &<span class=\"supfact\">elem</span>;\n    thrd_suspend_isr(Number L);\n    ++qword_B30;\n  }\n  sys_unlock();\n  ++qword_B38;\n  return res;\n}", "var": [{"name": "v3", "type": "struct rwlock_elem_t { thrd_t * thrd_p; volatile rwlock_elem_t * next_p; volatile rwlock_elem_t * prev_p; }", "ref_name": "elem", "ref_type": "struct rwlock_elem_t { thrd_t * thrd_p; volatile rwlock_elem_t * next_p; volatile rwlock_elem_t * prev_p; }"}], "body_in_train": true}, {"repo_owner": "dpryan79", "repo_name": "libGTF", "path": "dpryan79/libGTF/dd99092919d86b9ad652b6274d9300562551fa88133cd2a67c7733287eafddf4", "path_in_repo": "dpryan79/libGTF/htslib/bgzip", "objdump": "00000000004563bd <cram_add_deletion>:\n  4563bd:\t55                   \tpush   %rbp\n  4563be:\t48 89 e5             \tmov    %rsp,%rbp\n  4563c1:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4563c5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4563c9:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  4563cd:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  4563d1:\t89 4d d4             \tmov    %ecx,-0x2c(%rbp)\n  4563d4:\t44 89 45 d0          \tmov    %r8d,-0x30(%rbp)\n  4563d8:\t4c 89 4d c8          \tmov    %r9,-0x38(%rbp)\n  4563dc:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  4563df:\t83 c0 01             \tadd    $0x1,%eax\n  4563e2:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  4563e5:\tc7 45 f4 44 00 00 00 \tmovl   $0x44,-0xc(%rbp)\n  4563ec:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  4563ef:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4563f2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4563f6:\t48 8b 80 a8 01 00 00 \tmov    0x1a8(%rax),%rax\n  4563fd:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n  456400:\t89 d6                \tmov    %edx,%esi\n  456402:\t48 89 c7             \tmov    %rax,%rdi\n  456405:\te8 0f cc fc ff       \tcallq  423019 <cram_stats_add>\n  45640a:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n  45640e:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  456412:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n  456416:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  45641a:\t48 89 c7             \tmov    %rax,%rdi\n  45641d:\te8 4d f8 ff ff       \tcallq  455c6f <cram_add_feature>\n  456422:\tc9                   \tleaveq \n  456423:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cram_add_deletion(__int64 a1, __int64 a2, __int64 a3, int a4,\n                                     signed int a5) {\n  int <span class=\"supfact\">v7</span>[Number];\n  <span class=\"supfact\">v7</span>[Number] = a4 + Number;\n  <span class=\"supfact\">v7</span>[Number] = Number;\n  <span class=\"supfact\">v7</span>[Number] = a5;\n  cram_stats_add(*(_QWORD *)(a1 + Number), a5);\n  return cram_add_feature(a1, a2, a3, (__int64)<span class=\"supfact\">v7</span>);\n}", "code_t": "int __cdecl cram_add_deletion(cram_container *c, cram_slice_0 *s,\n                              cram_record *r, int pos, int len, char *base) {\n  cram_feature <span class=\"supfact\">f</span>;\n  <span class=\"supfact\">f</span>._anon_0.X.pos = pos + Number;\n  <span class=\"supfact\">f</span>._anon_0.X.code = Number;\n  <span class=\"supfact\">f</span>._anon_0.X.base = len;\n  cram_stats_add(c->stats[Number], len);\n  return cram_add_feature(c, s, r, &<span class=\"supfact\">f</span>);\n}", "var": [{"name": "v7", "type": "struct cram_feature { $3D26F883D758A3EEA605D3EFFEDCDF84 _anon_0; }", "ref_name": "f", "ref_type": "struct cram_feature { $3D26F883D758A3EEA605D3EFFEDCDF84 _anon_0; }"}], "body_in_train": true}, {"repo_owner": "lantw44", "repo_name": "sonybbs", "path": "lantw44/sonybbs/ddc2282f52da76df06e2aafc6bf1357d5ed2065397df48f31766f572cdd62f6c", "path_in_repo": "lantw44/sonybbs/lib/f_img.o", "objdump": "0000000000000000 <f_img>:\n   0:\t48 81 ec b8 00 00 00 \tsub    $0xb8,%rsp\n   7:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n   c:\t48 89 34 24          \tmov    %rsi,(%rsp)\n  10:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  15:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  1a:\t48 89 c7             \tmov    %rax,%rdi\n  1d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  22:\te8 00 00 00 00       \tcallq  27 <f_img+0x27>\n  27:\t89 84 24 ac 00 00 00 \tmov    %eax,0xac(%rsp)\n  2e:\t83 bc 24 ac 00 00 00 \tcmpl   $0x0,0xac(%rsp)\n  35:\t00 \n  36:\t79 0a                \tjns    42 <f_img+0x42>\n  38:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  3d:\te9 d5 00 00 00       \tjmpq   117 <f_img+0x117>\n  42:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n  49:\t00 00 \n  4b:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n  50:\t8b 84 24 ac 00 00 00 \tmov    0xac(%rsp),%eax\n  57:\t48 89 d6             \tmov    %rdx,%rsi\n  5a:\t89 c7                \tmov    %eax,%edi\n  5c:\te8 00 00 00 00       \tcallq  61 <f_img+0x61>\n  61:\t85 c0                \ttest   %eax,%eax\n  63:\t0f 85 96 00 00 00    \tjne    ff <f_img+0xff>\n  69:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n  6d:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  72:\t3d 00 80 00 00       \tcmp    $0x8000,%eax\n  77:\t0f 85 82 00 00 00    \tjne    ff <f_img+0xff>\n  7d:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n  82:\t89 84 24 a8 00 00 00 \tmov    %eax,0xa8(%rsp)\n  89:\t83 bc 24 a8 00 00 00 \tcmpl   $0x0,0xa8(%rsp)\n  90:\t00 \n  91:\t7e 6c                \tjle    ff <f_img+0xff>\n  93:\t8b 84 24 a8 00 00 00 \tmov    0xa8(%rsp),%eax\n  9a:\t48 98                \tcltq   \n  9c:\t48 89 c7             \tmov    %rax,%rdi\n  9f:\te8 00 00 00 00       \tcallq  a4 <f_img+0xa4>\n  a4:\t48 89 44 24 08       \tmov    %rax,0x8(%rsp)\n  a9:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n  af:\t74 4e                \tje     ff <f_img+0xff>\n  b1:\t48 8b 04 24          \tmov    (%rsp),%rax\n  b5:\t8b 94 24 a8 00 00 00 \tmov    0xa8(%rsp),%edx\n  bc:\t89 10                \tmov    %edx,(%rax)\n  be:\t8b 94 24 a8 00 00 00 \tmov    0xa8(%rsp),%edx\n  c5:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n  ca:\t8b 84 24 ac 00 00 00 \tmov    0xac(%rsp),%eax\n  d1:\t48 89 ce             \tmov    %rcx,%rsi\n  d4:\t89 c7                \tmov    %eax,%edi\n  d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  db:\te8 00 00 00 00       \tcallq  e0 <f_img+0xe0>\n  e0:\t39 84 24 a8 00 00 00 \tcmp    %eax,0xa8(%rsp)\n  e7:\t74 16                \tje     ff <f_img+0xff>\n  e9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  ee:\t48 89 c7             \tmov    %rax,%rdi\n  f1:\te8 00 00 00 00       \tcallq  f6 <f_img+0xf6>\n  f6:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n  fd:\t00 00 \n  ff:\t8b 84 24 ac 00 00 00 \tmov    0xac(%rsp),%eax\n 106:\t89 c7                \tmov    %eax,%edi\n 108:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 10d:\te8 00 00 00 00       \tcallq  112 <f_img+0x112>\n 112:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 117:\t48 81 c4 b8 00 00 00 \tadd    $0xb8,%rsp\n 11e:\tc3                   \tretq   \n", "code_s": "char *__fastcall f_img(const char *a1, _DWORD *a2) {\n  int v3;\n  char *file;\n  struct stat <span class=\"supfact\">buf</span>;\n  size_t nbytes;\n  HIDWORD(nbytes) = open(a1, Number);\n  if ((nbytes & Number) != Number L)\n    return Number L;\n  file = Number L;\n  if (!fstat(SHIDWORD(nbytes), &<span class=\"supfact\">buf</span>) &&\n      (<span class=\"supfact\">buf</span>.st_mode & Number) == Number) {\n    LODWORD(nbytes) = <span class=\"supfact\">buf</span>.st_size;\n    if (SLODWORD(<span class=\"supfact\">buf</span>.st_size) > Number) {\n      file = (char *)malloc((int)nbytes);\n      if (file) {\n        *a2 = nbytes;\n        v3 = read(SHIDWORD(nbytes), file, (unsigned int)nbytes);\n        if ((_DWORD)nbytes != v3) {\n          free(file);\n          file = Number L;\n        }\n      }\n    }\n  }\n  close(SHIDWORD(nbytes));\n  return file;\n}", "code_t": "char *__cdecl f_img(char *fpath, int *fsize) {\n  int v3;\n  char *fpatha;\n  stat <span class=\"supfact\">st</span>;\n  int size;\n  int fd;\n  fd = open(fpath, Number);\n  if (fd < Number)\n    return Number L;\n  fpatha = Number L;\n  if (!fstat(fd, &<span class=\"supfact\">st</span>) &&\n      (<span class=\"supfact\">st</span>.st_mode & Number) == Number) {\n    size = <span class=\"supfact\">st</span>.st_size;\n    if (SLODWORD(<span class=\"supfact\">st</span>.st_size) > Number) {\n      fpatha = (char *)malloc(size);\n      if (fpatha) {\n        *fsize = size;\n        v3 = read(fd, fpatha, (unsigned int)size);\n        if (size != v3) {\n          free(fpatha);\n          fpatha = Number L;\n        }\n      }\n    }\n  }\n  close(fd);\n  return fpatha;\n}", "var": [{"name": "buf", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/193ee31744bf94432d70b3c672eda529a3974a56c4540d5df4e50349387210b1", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/pkey/rsa_verify_pss", "objdump": "000000000042a3c6 <mbedtls_pkcs12_pbe>:\n  42a3c6:\t55                   \tpush   %rbp\n  42a3c7:\t48 89 e5             \tmov    %rsp,%rbp\n  42a3ca:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n  42a3d1:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n  42a3d8:\t89 b5 44 ff ff ff    \tmov    %esi,-0xbc(%rbp)\n  42a3de:\t89 95 40 ff ff ff    \tmov    %edx,-0xc0(%rbp)\n  42a3e4:\t89 8d 3c ff ff ff    \tmov    %ecx,-0xc4(%rbp)\n  42a3ea:\t4c 89 85 30 ff ff ff \tmov    %r8,-0xd0(%rbp)\n  42a3f1:\t4c 89 8d 28 ff ff ff \tmov    %r9,-0xd8(%rbp)\n  42a3f8:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  42a3ff:\t48 c7 85 58 ff ff ff \tmovq   $0x0,-0xa8(%rbp)\n  42a406:\t00 00 00 00 \n  42a40a:\t8b 85 40 ff ff ff    \tmov    -0xc0(%rbp),%eax\n  42a410:\t89 c7                \tmov    %eax,%edi\n  42a412:\te8 69 7a 00 00       \tcallq  431e80 <mbedtls_cipher_info_from_type>\n  42a417:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  42a41b:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  42a420:\t75 0a                \tjne    42a42c <mbedtls_pkcs12_pbe+0x66>\n  42a422:\tb8 00 e1 ff ff       \tmov    $0xffffe100,%eax\n  42a427:\te9 b4 01 00 00       \tjmpq   42a5e0 <mbedtls_pkcs12_pbe+0x21a>\n  42a42c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  42a430:\t8b 40 08             \tmov    0x8(%rax),%eax\n  42a433:\tc1 e8 03             \tshr    $0x3,%eax\n  42a436:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  42a439:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  42a43d:\t8b 40 18             \tmov    0x18(%rax),%eax\n  42a440:\t89 c7                \tmov    %eax,%edi\n  42a442:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42a445:\t4c 63 c8             \tmovslq %eax,%r9\n  42a448:\t4c 8d 45 d0          \tlea    -0x30(%rbp),%r8\n  42a44c:\t48 8b 8d 28 ff ff ff \tmov    -0xd8(%rbp),%rcx\n  42a453:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n  42a45a:\t8b b5 3c ff ff ff    \tmov    -0xc4(%rbp),%esi\n  42a460:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  42a467:\t57                   \tpush   %rdi\n  42a468:\t48 8d 7d c0          \tlea    -0x40(%rbp),%rdi\n  42a46c:\t57                   \tpush   %rdi\n  42a46d:\t48 89 c7             \tmov    %rax,%rdi\n  42a470:\te8 ab fc ff ff       \tcallq  42a120 <pkcs12_pbe_derive_key_iv>\n  42a475:\t48 83 c4 10          \tadd    $0x10,%rsp\n  42a479:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42a47c:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  42a480:\t74 08                \tje     42a48a <mbedtls_pkcs12_pbe+0xc4>\n  42a482:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42a485:\te9 56 01 00 00       \tjmpq   42a5e0 <mbedtls_pkcs12_pbe+0x21a>\n  42a48a:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42a491:\t48 89 c7             \tmov    %rax,%rdi\n  42a494:\te8 fb 7a 00 00       \tcallq  431f94 <mbedtls_cipher_init>\n  42a499:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  42a49d:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42a4a4:\t48 89 d6             \tmov    %rdx,%rsi\n  42a4a7:\t48 89 c7             \tmov    %rax,%rdi\n  42a4aa:\te8 5c 7b 00 00       \tcallq  43200b <mbedtls_cipher_setup>\n  42a4af:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42a4b2:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  42a4b6:\t0f 85 e0 00 00 00    \tjne    42a59c <mbedtls_pkcs12_pbe+0x1d6>\n  42a4bc:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42a4bf:\t8d 3c c5 00 00 00 00 \tlea    0x0(,%rax,8),%edi\n  42a4c6:\t8b 95 44 ff ff ff    \tmov    -0xbc(%rbp),%edx\n  42a4cc:\t48 8d 75 d0          \tlea    -0x30(%rbp),%rsi\n  42a4d0:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42a4d7:\t89 d1                \tmov    %edx,%ecx\n  42a4d9:\t89 fa                \tmov    %edi,%edx\n  42a4db:\t48 89 c7             \tmov    %rax,%rdi\n  42a4de:\te8 a9 7b 00 00       \tcallq  43208c <mbedtls_cipher_setkey>\n  42a4e3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42a4e6:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  42a4ea:\t0f 85 af 00 00 00    \tjne    42a59f <mbedtls_pkcs12_pbe+0x1d9>\n  42a4f0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  42a4f4:\t8b 40 18             \tmov    0x18(%rax),%eax\n  42a4f7:\t89 c2                \tmov    %eax,%edx\n  42a4f9:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n  42a4fd:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42a504:\t48 89 ce             \tmov    %rcx,%rsi\n  42a507:\t48 89 c7             \tmov    %rax,%rdi\n  42a50a:\te8 85 7c 00 00       \tcallq  432194 <mbedtls_cipher_set_iv>\n  42a50f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42a512:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  42a516:\t0f 85 86 00 00 00    \tjne    42a5a2 <mbedtls_pkcs12_pbe+0x1dc>\n  42a51c:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42a523:\t48 89 c7             \tmov    %rax,%rdi\n  42a526:\te8 4a 7d 00 00       \tcallq  432275 <mbedtls_cipher_reset>\n  42a52b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42a52e:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  42a532:\t75 71                \tjne    42a5a5 <mbedtls_pkcs12_pbe+0x1df>\n  42a534:\t48 8d b5 58 ff ff ff \tlea    -0xa8(%rbp),%rsi\n  42a53b:\t48 8b 4d 20          \tmov    0x20(%rbp),%rcx\n  42a53f:\t48 8b 55 18          \tmov    0x18(%rbp),%rdx\n  42a543:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42a54a:\t49 89 f0             \tmov    %rsi,%r8\n  42a54d:\t48 8b 75 10          \tmov    0x10(%rbp),%rsi\n  42a551:\t48 89 c7             \tmov    %rax,%rdi\n  42a554:\te8 31 7e 00 00       \tcallq  43238a <mbedtls_cipher_update>\n  42a559:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42a55c:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  42a560:\t75 46                \tjne    42a5a8 <mbedtls_pkcs12_pbe+0x1e2>\n  42a562:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  42a569:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n  42a56d:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n  42a571:\t48 8d 95 58 ff ff ff \tlea    -0xa8(%rbp),%rdx\n  42a578:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42a57f:\t48 89 ce             \tmov    %rcx,%rsi\n  42a582:\t48 89 c7             \tmov    %rax,%rdi\n  42a585:\te8 9c 89 00 00       \tcallq  432f26 <mbedtls_cipher_finish>\n  42a58a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42a58d:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  42a591:\t74 18                \tje     42a5ab <mbedtls_pkcs12_pbe+0x1e5>\n  42a593:\tc7 45 fc 00 e2 ff ff \tmovl   $0xffffe200,-0x4(%rbp)\n  42a59a:\teb 10                \tjmp    42a5ac <mbedtls_pkcs12_pbe+0x1e6>\n  42a59c:\t90                   \tnop\n  42a59d:\teb 0d                \tjmp    42a5ac <mbedtls_pkcs12_pbe+0x1e6>\n  42a59f:\t90                   \tnop\n  42a5a0:\teb 0a                \tjmp    42a5ac <mbedtls_pkcs12_pbe+0x1e6>\n  42a5a2:\t90                   \tnop\n  42a5a3:\teb 07                \tjmp    42a5ac <mbedtls_pkcs12_pbe+0x1e6>\n  42a5a5:\t90                   \tnop\n  42a5a6:\teb 04                \tjmp    42a5ac <mbedtls_pkcs12_pbe+0x1e6>\n  42a5a8:\t90                   \tnop\n  42a5a9:\teb 01                \tjmp    42a5ac <mbedtls_pkcs12_pbe+0x1e6>\n  42a5ab:\t90                   \tnop\n  42a5ac:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  42a5b0:\tbe 20 00 00 00       \tmov    $0x20,%esi\n  42a5b5:\t48 89 c7             \tmov    %rax,%rdi\n  42a5b8:\te8 7e d1 fd ff       \tcallq  40773b <mbedtls_platform_zeroize>\n  42a5bd:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  42a5c1:\tbe 10 00 00 00       \tmov    $0x10,%esi\n  42a5c6:\t48 89 c7             \tmov    %rax,%rdi\n  42a5c9:\te8 6d d1 fd ff       \tcallq  40773b <mbedtls_platform_zeroize>\n  42a5ce:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42a5d5:\t48 89 c7             \tmov    %rax,%rdi\n  42a5d8:\te8 dc 79 00 00       \tcallq  431fb9 <mbedtls_cipher_free>\n  42a5dd:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42a5e0:\tc9                   \tleaveq \n  42a5e1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_pkcs12_pbe(__int64 a1, unsigned int a2,\n                                      unsigned int a3, int a4, __int64 a5,\n                                      unsigned __int64 a6, __int64 a7,\n                                      __int64 a8, __int64 a9) {\n  __int64 v13;\n  char <span class=\"supfact\">v14</span>[Number];\n  char v15[Number];\n  char v16[Number];\n  __int64 v17;\n  int v18;\n  unsigned int v19;\n  v18 = Number;\n  v13 = Number L;\n  v17 = mbedtls_cipher_info_from_type(a3);\n  if (!v17)\n    return Number L;\n  v18 = *(_DWORD *)(v17 + Number) >> Number;\n  v19 = pkcs12_pbe_derive_key_iv(a1, a4, a5, a6, (int)v16, v18, (__int64)v15,\n                                 *(unsigned int *)(v17 + Number));\n  if (v19)\n    return v19;\n  mbedtls_cipher_init(<span class=\"supfact\">v14</span>);\n  v19 = mbedtls_cipher_setup(<span class=\"supfact\">v14</span>, v17);\n  if (!v19) {\n    v19 = mbedtls_cipher_setkey(<span class=\"supfact\">v14</span>, v16,\n                                (unsigned int)(Number * v18), a2);\n    if (!v19) {\n      v19 = mbedtls_cipher_set_iv(<span class=\"supfact\">v14</span>, v15,\n                                  *(unsigned int *)(v17 + Number));\n      if (!v19) {\n        v19 = mbedtls_cipher_reset(<span class=\"supfact\">v14</span>);\n        if (!v19) {\n          v19 = mbedtls_cipher_update(<span class=\"supfact\">v14</span>, a7, a8, a9, &v13);\n          if (!v19) {\n            v19 = mbedtls_cipher_finish(<span class=\"supfact\">v14</span>, v13 + a9, &v13);\n            if (v19)\n              v19 = Number;\n          }\n        }\n      }\n    }\n  }\n  mbedtls_platform_zeroize((__int64)v16, Number L);\n  mbedtls_platform_zeroize((__int64)v15, Number L);\n  mbedtls_cipher_free(<span class=\"supfact\">v14</span>);\n  return v19;\n}", "code_t": "int __cdecl mbedtls_pkcs12_pbe(mbedtls_asn1_buf_0 *pbe_params, int mode,\n                               mbedtls_cipher_type_t cipher_type,\n                               mbedtls_md_type_t md_type,\n                               const unsigned __int8 *pwd, size_t pwdlen,\n                               const unsigned __int8 *data, size_t len,\n                               unsigned __int8 *output) {\n  size_t olen;\n  mbedtls_cipher_context_t_0 <span class=\"supfact\">cipher_ctx</span>;\n  unsigned __int8 iv[Number];\n  unsigned __int8 key[Number];\n  const mbedtls_cipher_info_t_0 *cipher_info;\n  int keylen;\n  int ret;\n  keylen = Number;\n  olen = Number L;\n  cipher_info = mbedtls_cipher_info_from_type(cipher_type);\n  if (!cipher_info)\n    return Number;\n  keylen = cipher_info->key_bitlen >> Number;\n  ret = pkcs12_pbe_derive_key_iv(pbe_params, md_type, pwd, pwdlen, key, keylen,\n                                 iv, cipher_info->iv_size);\n  if (ret)\n    return ret;\n  mbedtls_cipher_init(&<span class=\"supfact\">cipher_ctx</span>);\n  ret = mbedtls_cipher_setup(&<span class=\"supfact\">cipher_ctx</span>, cipher_info);\n  if (!ret) {\n    ret =\n        mbedtls_cipher_setkey(&<span class=\"supfact\">cipher_ctx</span>, key, Number * keylen,\n                              (const mbedtls_operation_t)mode);\n    if (!ret) {\n      ret = mbedtls_cipher_set_iv(&<span class=\"supfact\">cipher_ctx</span>, iv,\n                                  cipher_info->iv_size);\n      if (!ret) {\n        ret = mbedtls_cipher_reset(&<span class=\"supfact\">cipher_ctx</span>);\n        if (!ret) {\n          ret = mbedtls_cipher_update(&<span class=\"supfact\">cipher_ctx</span>, data, len,\n                                      output, &olen);\n          if (!ret) {\n            ret = mbedtls_cipher_finish(&<span class=\"supfact\">cipher_ctx</span>,\n                                        &output[olen], &olen);\n            if (ret)\n              ret = Number;\n          }\n        }\n      }\n    }\n  }\n  mbedtls_platform_zeroize(key, Number);\n  mbedtls_platform_zeroize(iv, Number);\n  mbedtls_cipher_free(&<span class=\"supfact\">cipher_ctx</span>);\n  return ret;\n}", "var": [{"name": "v14", "type": "struct mbedtls_cipher_context_t_0 { const mbedtls_cipher_info_t_0 * cipher_info; int key_bitlen; mbedtls_operation_t operation; void (*)(unsigned __int8 *, size_t, size_t) add_padding; int (*)(unsigned __int8 *, size_t, size_t *) get_padding; unsigned __int8[16] unprocessed_data; size_t unprocessed_len; unsigned __int8[16] iv; size_t iv_size; void * cipher_ctx; }", "ref_name": "cipher_ctx", "ref_type": "struct mbedtls_cipher_context_t_0 { const mbedtls_cipher_info_t_0 * cipher_info; int key_bitlen; mbedtls_operation_t operation; void (*)(unsigned __int8 *, size_t, size_t) add_padding; int (*)(unsigned __int8 *, size_t, size_t *) get_padding; unsigned __int8[16] unprocessed_data; size_t unprocessed_len; unsigned __int8[16] iv; size_t iv_size; void * cipher_ctx; }"}], "body_in_train": true}, {"repo_owner": "ChengyuSong", "repo_name": "lll-50", "path": "ChengyuSong/lll-50/aa0ebcf63f0128ace6cd0c3bef495994e7166942bc872f4b929aff82a44a9808", "path_in_repo": "ChengyuSong/lll-50/tools/testing/selftests/bpf/test_netcnt", "objdump": "000000000040d3c8 <libbpf_nl_get_link>:\n  40d3c8:\t55                   \tpush   %rbp\n  40d3c9:\t48 89 e5             \tmov    %rsp,%rbp\n  40d3cc:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40d3d0:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n  40d3d3:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n  40d3d6:\t48 89 55 c0          \tmov    %rdx,-0x40(%rbp)\n  40d3da:\t48 89 4d b8          \tmov    %rcx,-0x48(%rbp)\n  40d3de:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  40d3e5:\t00 \n  40d3e6:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  40d3ed:\t00 \n  40d3ee:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  40d3f5:\t00 \n  40d3f6:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  40d3fd:\t00 \n  40d3fe:\tc7 45 d0 20 00 00 00 \tmovl   $0x20,-0x30(%rbp)\n  40d405:\t66 c7 45 d4 12 00    \tmovw   $0x12,-0x2c(%rbp)\n  40d40b:\t66 c7 45 d6 01 03    \tmovw   $0x301,-0x2a(%rbp)\n  40d411:\tc6 45 e0 11          \tmovb   $0x11,-0x20(%rbp)\n  40d415:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40d41a:\te8 c1 4e ff ff       \tcallq  4022e0 <time@plt>\n  40d41f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40d422:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40d425:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  40d428:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  40d42b:\t89 c2                \tmov    %eax,%edx\n  40d42d:\t48 8d 75 d0          \tlea    -0x30(%rbp),%rsi\n  40d431:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  40d434:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  40d439:\t89 c7                \tmov    %eax,%edi\n  40d43b:\te8 80 4d ff ff       \tcallq  4021c0 <send@plt>\n  40d440:\t48 85 c0             \ttest   %rax,%rax\n  40d443:\t79 0b                \tjns    40d450 <libbpf_nl_get_link+0x88>\n  40d445:\te8 46 4c ff ff       \tcallq  402090 <__errno_location@plt>\n  40d44a:\t8b 00                \tmov    (%rax),%eax\n  40d44c:\tf7 d8                \tneg    %eax\n  40d44e:\teb 25                \tjmp    40d475 <libbpf_nl_get_link+0xad>\n  40d450:\t48 8b 7d b8          \tmov    -0x48(%rbp),%rdi\n  40d454:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  40d458:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40d45b:\t8b 75 c8             \tmov    -0x38(%rbp),%esi\n  40d45e:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  40d461:\t49 89 f9             \tmov    %rdi,%r9\n  40d464:\t49 89 c8             \tmov    %rcx,%r8\n  40d467:\t48 8d 0d c0 fe ff ff \tlea    -0x140(%rip),%rcx        # 40d32e <__dump_link_nlmsg>\n  40d46e:\t89 c7                \tmov    %eax,%edi\n  40d470:\te8 15 fb ff ff       \tcallq  40cf8a <bpf_netlink_recv>\n  40d475:\tc9                   \tleaveq \n  40d476:\tc3                   \tretq   ", "code_s": "__int64 __fastcall libbpf_nl_get_link(int a1, int a2, __int64 a3, __int64 a4) {\n  __int64 result;\n  __int64 <span class=\"supfact\">buf</span>[Number];\n  unsigned int v8;\n  <span class=\"supfact\">buf</span>[Number] = Number;\n  <span class=\"supfact\">buf</span>[Number] = Number L;\n  <span class=\"supfact\">buf</span>[Number] = Number L;\n  v8 = time(Number L);\n  <span class=\"supfact\">buf</span>[Number] = v8;\n  if (send(a1, <span class=\"supfact\">buf</span>, Number, Number) >= Number)\n    result = bpf_netlink_recv(\n        a1, a2, v8,\n        (__int64(__fastcall *)(char *, __int64, __int64))_dump_link_nlmsg, a3,\n        a4);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}", "code_t": "int __cdecl libbpf_nl_get_link(int sock, unsigned int nl_pid,\n                               libbpf_dump_nlmsg_t dump_link_nlmsg,\n                               void *cookie) {\n  int result;\n  libbpf_nl_get_link $3A706A7DA44F1B941E986340A5B6318B <span class=\"supfact\">req</span>;\n  int seq;\n  *(_QWORD *)&<span class=\"supfact\">req</span>.nlh.nlmsg_len = Number;\n  <span class=\"supfact\">req</span>.nlh.nlmsg_pid = Number;\n  *(_QWORD *)&<span class=\"supfact\">req</span>.ifm.ifi_family = Number L;\n  *(_QWORD *)&<span class=\"supfact\">req</span>.ifm.ifi_flags = Number L;\n  seq = time(Number L);\n  <span class=\"supfact\">req</span>.nlh.nlmsg_seq = seq;\n  if (send(sock, &<span class=\"supfact\">req</span>, Number, Number) >= Number)\n    result =\n        bpf_netlink_recv(sock, nl_pid, seq, (__dump_nlmsg_t)_dump_link_nlmsg,\n                         dump_link_nlmsg, cookie);\n  else\n    result = -*__errno_location();\n  return result;\n}", "var": [{"name": "buf", "type": "struct libbpf_nl_get_link::$3A706A7DA44F1B941E986340A5B6318B { nlmsghdr nlh; ifinfomsg ifm; }", "ref_name": "req", "ref_type": "struct libbpf_nl_get_link::$3A706A7DA44F1B941E986340A5B6318B { nlmsghdr nlh; ifinfomsg ifm; }"}], "body_in_train": true}, {"repo_owner": "crissmoldovan", "repo_name": "tisip", "path": "crissmoldovan/tisip/d2efb3c7564ae3cbdab9a6615d7c1d00b517c3df3224f51ebb5e8c6d7fb1ef72", "path_in_repo": "crissmoldovan/tisip/iphone/pjsip/src/pjnath/bin/pjturn-client-x86_64-unknown-linux-gnu", "objdump": "0000000000406156 <decode_string_attr>:\n  406156:\t55                   \tpush   %rbp\n  406157:\t48 89 e5             \tmov    %rsp,%rbp\n  40615a:\t48 83 ec 40          \tsub    $0x40,%rsp\n  40615e:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  406162:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  406166:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  40616a:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  40616e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406172:\tbe 18 00 00 00       \tmov    $0x18,%esi\n  406177:\t48 89 c7             \tmov    %rax,%rdi\n  40617a:\te8 91 f0 ff ff       \tcallq  405210 <pj_pool_zalloc>\n  40617f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  406183:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  406187:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40618b:\t48 89 d6             \tmov    %rdx,%rsi\n  40618e:\t48 89 c7             \tmov    %rax,%rdi\n  406191:\te8 4e f5 ff ff       \tcallq  4056e4 <GETATTRHDR>\n  406196:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40619a:\t48 83 c0 04          \tadd    $0x4,%rax\n  40619e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4061a2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4061a6:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n  4061aa:\t0f b7 c0             \tmovzwl %ax,%eax\n  4061ad:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4061b1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4061b5:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n  4061b9:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  4061bd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4061c1:\t48 89 ce             \tmov    %rcx,%rsi\n  4061c4:\t48 89 c7             \tmov    %rax,%rdi\n  4061c7:\te8 5a b0 02 00       \tcallq  431226 <pj_strdup>\n  4061cc:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  4061d0:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  4061d4:\t48 89 10             \tmov    %rdx,(%rax)\n  4061d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4061dc:\tc9                   \tleaveq \n  4061dd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall decode_string_attr(__int64 a1, __int64 a2, __int64 a3,\n                                      _QWORD *a4) {\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  _WORD *v7;\n  v7 = (_WORD *)pj_pool_zalloc(a1, Number L);\n  GETATTRHDR(a2, v7);\n  <span class=\"supfact\">v6</span>[Number] = a2 + Number;\n  <span class=\"supfact\">v6</span>[Number] = (unsigned __int16)v7[Number];\n  pj_strdup(a1, v7 + Number, <span class=\"supfact\">v6</span>);\n  *a4 = v7;\n  return Number L;\n}", "code_t": "pj_status_t __cdecl decode_string_attr(pj_pool_t_0 *pool, const pj_uint8_t *buf,\n                                       const pj_stun_msg_hdr_0 *msghdr,\n                                       void **p_attr) {\n  pj_str_t_0 <span class=\"supfact\">value</span>;\n  pj_stun_string_attr_0 *attr;\n  attr = (pj_stun_string_attr_0 *)pj_pool_zalloc(pool, Number);\n  GETATTRHDR(buf, &attr->hdr);\n  <span class=\"supfact\">value</span>.ptr = (char *)(buf + Number);\n  <span class=\"supfact\">value</span>.slen = attr->hdr.length;\n  pj_strdup(pool, &attr-><span class=\"supfact\">value</span>, &<span class=\"supfact\">value</span>);\n  *p_attr = attr;\n  return Number;\n}", "var": [{"name": "v6", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "value", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "hchunhui", "repo_name": "myos-ports", "path": "hchunhui/myos-ports/d3748c62aaa47c9f359604dc70c3b1915a176ee74709e5be1d8cfcc51a5471b2", "path_in_repo": "hchunhui/myos-ports//dash/src/miscbltin.o", "objdump": "00000000000008b8 <ulimitcmd>:\n 8b8:\t55                   \tpush   %rbp\n 8b9:\t48 89 e5             \tmov    %rsp,%rbp\n 8bc:\t48 83 ec 60          \tsub    $0x60,%rsp\n 8c0:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n 8c3:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n 8c7:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 8ce:\t00 \n 8cf:\tc7 45 f4 03 00 00 00 \tmovl   $0x3,-0xc(%rbp)\n 8d6:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n 8dd:\tc7 45 e0 66 00 00 00 \tmovl   $0x66,-0x20(%rbp)\n 8e4:\teb 3b                \tjmp    921 <ulimitcmd+0x69>\n 8e6:\t83 7d d4 61          \tcmpl   $0x61,-0x2c(%rbp)\n 8ea:\t74 26                \tje     912 <ulimitcmd+0x5a>\n 8ec:\t83 7d d4 61          \tcmpl   $0x61,-0x2c(%rbp)\n 8f0:\t7f 29                \tjg     91b <ulimitcmd+0x63>\n 8f2:\t83 7d d4 48          \tcmpl   $0x48,-0x2c(%rbp)\n 8f6:\t74 08                \tje     900 <ulimitcmd+0x48>\n 8f8:\t83 7d d4 53          \tcmpl   $0x53,-0x2c(%rbp)\n 8fc:\t74 0b                \tje     909 <ulimitcmd+0x51>\n 8fe:\teb 1b                \tjmp    91b <ulimitcmd+0x63>\n 900:\tc7 45 f4 02 00 00 00 \tmovl   $0x2,-0xc(%rbp)\n 907:\teb 18                \tjmp    921 <ulimitcmd+0x69>\n 909:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n 910:\teb 0f                \tjmp    921 <ulimitcmd+0x69>\n 912:\tc7 45 e4 01 00 00 00 \tmovl   $0x1,-0x1c(%rbp)\n 919:\teb 06                \tjmp    921 <ulimitcmd+0x69>\n 91b:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 91e:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n 921:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 926:\te8 00 00 00 00       \tcallq  92b <ulimitcmd+0x73>\n 92b:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n 92e:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n 932:\t75 b2                \tjne    8e6 <ulimitcmd+0x2e>\n 934:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n 93b:\t00 \n 93c:\teb 05                \tjmp    943 <ulimitcmd+0x8b>\n 93e:\t48 83 45 e8 18       \taddq   $0x18,-0x18(%rbp)\n 943:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 947:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n 94b:\t0f be c0             \tmovsbl %al,%eax\n 94e:\t39 45 e0             \tcmp    %eax,-0x20(%rbp)\n 951:\t75 eb                \tjne    93e <ulimitcmd+0x86>\n 953:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 95a <ulimitcmd+0xa2>\n 95a:\t48 8b 00             \tmov    (%rax),%rax\n 95d:\t48 85 c0             \ttest   %rax,%rax\n 960:\t0f 95 c0             \tsetne  %al\n 963:\t0f b6 c0             \tmovzbl %al,%eax\n 966:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n 969:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n 96d:\t0f 84 cd 00 00 00    \tje     a40 <ulimitcmd+0x188>\n 973:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 97a <ulimitcmd+0xc2>\n 97a:\t48 8b 00             \tmov    (%rax),%rax\n 97d:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 981:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n 985:\t75 13                \tjne    99a <ulimitcmd+0xe2>\n 987:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 98e <ulimitcmd+0xd6>\n 98e:\t48 83 c0 08          \tadd    $0x8,%rax\n 992:\t48 8b 00             \tmov    (%rax),%rax\n 995:\t48 85 c0             \ttest   %rax,%rax\n 998:\t74 0f                \tje     9a9 <ulimitcmd+0xf1>\n 99a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 99f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 9a4:\te8 00 00 00 00       \tcallq  9a9 <ulimitcmd+0xf1>\n 9a9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 9ad:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 9b2:\t48 89 c7             \tmov    %rax,%rdi\n 9b5:\te8 00 00 00 00       \tcallq  9ba <ulimitcmd+0x102>\n 9ba:\t85 c0                \ttest   %eax,%eax\n 9bc:\t75 0a                \tjne    9c8 <ulimitcmd+0x110>\n 9be:\t48 c7 45 f8 ff ff ff \tmovq   $0xffffffffffffffff,-0x8(%rbp)\n 9c5:\tff \n 9c6:\teb 78                \tjmp    a40 <ulimitcmd+0x188>\n 9c8:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 9cf:\t00 \n 9d0:\teb 23                \tjmp    9f5 <ulimitcmd+0x13d>\n 9d2:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 9d6:\t48 89 d0             \tmov    %rdx,%rax\n 9d9:\t48 c1 e0 02          \tshl    $0x2,%rax\n 9dd:\t48 01 d0             \tadd    %rdx,%rax\n 9e0:\t48 01 c0             \tadd    %rax,%rax\n 9e3:\t48 89 c2             \tmov    %rax,%rdx\n 9e6:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n 9e9:\t83 e8 30             \tsub    $0x30,%eax\n 9ec:\t48 98                \tcltq   \n 9ee:\t48 01 d0             \tadd    %rdx,%rax\n 9f1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 9f5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 9f9:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 9fd:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n a01:\t0f b6 00             \tmovzbl (%rax),%eax\n a04:\t0f be c0             \tmovsbl %al,%eax\n a07:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n a0a:\t83 7d cc 2f          \tcmpl   $0x2f,-0x34(%rbp)\n a0e:\t7e 06                \tjle    a16 <ulimitcmd+0x15e>\n a10:\t83 7d cc 39          \tcmpl   $0x39,-0x34(%rbp)\n a14:\t7e bc                \tjle    9d2 <ulimitcmd+0x11a>\n a16:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n a1a:\t74 0f                \tje     a2b <ulimitcmd+0x173>\n a1c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n a21:\tb8 00 00 00 00       \tmov    $0x0,%eax\n a26:\te8 00 00 00 00       \tcallq  a2b <ulimitcmd+0x173>\n a2b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n a2f:\t8b 40 0c             \tmov    0xc(%rax),%eax\n a32:\t48 98                \tcltq   \n a34:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n a38:\t48 0f af c2          \timul   %rdx,%rax\n a3c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n a40:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n a44:\t74 6a                \tje     ab0 <ulimitcmd+0x1f8>\n a46:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n a4d:\t00 \n a4e:\teb 4a                \tjmp    a9a <ulimitcmd+0x1e2>\n a50:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n a54:\t8b 40 08             \tmov    0x8(%rax),%eax\n a57:\t89 c2                \tmov    %eax,%edx\n a59:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n a5d:\t48 89 c6             \tmov    %rax,%rsi\n a60:\t89 d7                \tmov    %edx,%edi\n a62:\te8 00 00 00 00       \tcallq  a67 <ulimitcmd+0x1af>\n a67:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n a6b:\t48 8b 00             \tmov    (%rax),%rax\n a6e:\t48 89 c6             \tmov    %rax,%rsi\n a71:\tbf 00 00 00 00       \tmov    $0x0,%edi\n a76:\tb8 00 00 00 00       \tmov    $0x0,%eax\n a7b:\te8 00 00 00 00       \tcallq  a80 <ulimitcmd+0x1c8>\n a80:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n a84:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n a88:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n a8b:\t48 89 ce             \tmov    %rcx,%rsi\n a8e:\t89 c7                \tmov    %eax,%edi\n a90:\te8 a4 fd ff ff       \tcallq  839 <printlim>\n a95:\t48 83 45 e8 18       \taddq   $0x18,-0x18(%rbp)\n a9a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n a9e:\t48 8b 00             \tmov    (%rax),%rax\n aa1:\t48 85 c0             \ttest   %rax,%rax\n aa4:\t75 aa                \tjne    a50 <ulimitcmd+0x198>\n aa6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n aab:\te9 98 00 00 00       \tjmpq   b48 <ulimitcmd+0x290>\n ab0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n ab4:\t8b 40 08             \tmov    0x8(%rax),%eax\n ab7:\t89 c2                \tmov    %eax,%edx\n ab9:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n abd:\t48 89 c6             \tmov    %rax,%rsi\n ac0:\t89 d7                \tmov    %edx,%edi\n ac2:\te8 00 00 00 00       \tcallq  ac7 <ulimitcmd+0x20f>\n ac7:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n acb:\t74 61                \tje     b2e <ulimitcmd+0x276>\n acd:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n ad0:\t83 e0 02             \tand    $0x2,%eax\n ad3:\t85 c0                \ttest   %eax,%eax\n ad5:\t74 08                \tje     adf <ulimitcmd+0x227>\n ad7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n adb:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n adf:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n ae2:\t83 e0 01             \tand    $0x1,%eax\n ae5:\t85 c0                \ttest   %eax,%eax\n ae7:\t74 08                \tje     af1 <ulimitcmd+0x239>\n ae9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n aed:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n af1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n af5:\t8b 40 08             \tmov    0x8(%rax),%eax\n af8:\t89 c2                \tmov    %eax,%edx\n afa:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n afe:\t48 89 c6             \tmov    %rax,%rsi\n b01:\t89 d7                \tmov    %edx,%edi\n b03:\te8 00 00 00 00       \tcallq  b08 <ulimitcmd+0x250>\n b08:\t85 c0                \ttest   %eax,%eax\n b0a:\t79 37                \tjns    b43 <ulimitcmd+0x28b>\n b0c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b13 <ulimitcmd+0x25b>\n b13:\t8b 00                \tmov    (%rax),%eax\n b15:\t89 c7                \tmov    %eax,%edi\n b17:\te8 00 00 00 00       \tcallq  b1c <ulimitcmd+0x264>\n b1c:\t48 89 c6             \tmov    %rax,%rsi\n b1f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n b24:\tb8 00 00 00 00       \tmov    $0x0,%eax\n b29:\te8 00 00 00 00       \tcallq  b2e <ulimitcmd+0x276>\n b2e:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n b32:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n b36:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n b39:\t48 89 ce             \tmov    %rcx,%rsi\n b3c:\t89 c7                \tmov    %eax,%edi\n b3e:\te8 f6 fc ff ff       \tcallq  839 <printlim>\n b43:\tb8 00 00 00 00       \tmov    $0x0,%eax\n b48:\tc9                   \tleaveq \n b49:\tc3                   \tretq   \n", "code_s": "__int64 ulimitcmd() {\n  char *v0;\n  char *v2;\n  struct rlimit <span class=\"supfact\">rlimits</span>;\n  int v4;\n  _BOOL4 v5;\n  int v6;\n  char *s1;\n  int v8;\n  int v9;\n  char **i;\n  int v11;\n  rlim_t j;\n  j = Number L;\n  v11 = Number;\n  v9 = Number;\n  v8 = Number;\n  while (Number) {\n    v6 = nextopt(String);\n    if (!v6)\n      break;\n    if (v6 == Number) {\n      v9 = Number;\n    } else {\n      if (v6 > Number)\n        goto LABEL_10;\n      if (v6 == Number) {\n        v11 = Number;\n      } else if (v6 == Number) {\n        v11 = Number;\n      } else {\n      LABEL_10:\n        v8 = v6;\n      }\n    }\n  }\n  for (i = &limits; v8 != *((char *)i + Number); i += Number)\n    ;\n  v5 = *argptr != Number L;\n  if (v5) {\n    s1 = (char *)*argptr;\n    if (v9 || *(_QWORD *)(argptr + Number L))\n      sh_error(String);\n    if (!strcmp(s1, String)) {\n      j = Number;\n    } else {\n      for (j = Number L;; j = Number * j + v4 - Number) {\n        v0 = s1++;\n        v4 = *v0;\n        if (v4 <= Number || v4 > Number)\n          break;\n      }\n      if (v4)\n        sh_error(String);\n      j *= *((int *)i + Number);\n    }\n  }\n  if (!v9) {\n    getrlimit(*((__rlimit_resource_t *)i + Number), &<span class=\"supfact\">rlimits</span>);\n    if (v5) {\n      if ((v11 & Number) != Number)\n        <span class=\"supfact\">rlimits</span>.rlim_max = j;\n      if ((v11 & Number) != Number)\n        <span class=\"supfact\">rlimits</span>.rlim_cur = j;\n      if (setrlimit(*((__rlimit_resource_t *)i + Number),\n                    &<span class=\"supfact\">rlimits</span>) >= Number)\n        return Number L;\n      v2 = strerror(*dash_errno);\n      sh_error(String, v2);\n    }\n    printlim(v11, &<span class=\"supfact\">rlimits</span>.rlim_cur, (__int64)i);\n    return Number L;\n  }\n  for (i = &limits; *i; i += Number) {\n    getrlimit(*((__rlimit_resource_t *)i + Number), &<span class=\"supfact\">rlimits</span>);\n    out1fmt(String, *i);\n    printlim(v11, &<span class=\"supfact\">rlimits</span>.rlim_cur, (__int64)i);\n  }\n  return Number L;\n}", "code_t": "int __cdecl ulimitcmd(int argc, char **argv) {\n  char *v2;\n  char *v4;\n  rlimit <span class=\"supfact\">limit</span>;\n  int c;\n  int set;\n  int optc;\n  char *p;\n  int what;\n  int all;\n  const limits *l;\n  limtype how;\n  rlim_t val;\n  val = Number L;\n  how = HARD | SOFT;\n  all = Number;\n  what = Number;\n  while (Number) {\n    optc = nextopt(String);\n    if (!optc)\n      break;\n    if (optc == Number) {\n      all = Number;\n    } else {\n      if (optc > Number)\n        goto LABEL_10;\n      if (optc == Number) {\n        how = HARD;\n      } else if (optc == Number) {\n        how = SOFT;\n      } else {\n      LABEL_10:\n        what = optc;\n      }\n    }\n  }\n  for (l = limits_0; what != l->option; ++l)\n    ;\n  set = *argptr != Number L;\n  if (set) {\n    p = (char *)*argptr;\n    if (all || *(_QWORD *)(argptr + Number L))\n      sh_error(String);\n    if (!strcmp(p, String)) {\n      val = Number;\n    } else {\n      for (val = Number L;; val = Number * val + c - Number) {\n        v2 = p++;\n        c = *v2;\n        if (c <= Number || c > Number)\n          break;\n      }\n      if (c)\n        sh_error(String);\n      val *= l->factor;\n    }\n  }\n  if (!all) {\n    getrlimit((__rlimit_resource_t)l->cmd, &<span class=\"supfact\">limit</span>);\n    if (set) {\n      if ((how & Number) != Number)\n        <span class=\"supfact\">limit</span>.rlim_max = val;\n      if ((how & Number) != Number)\n        <span class=\"supfact\">limit</span>.rlim_cur = val;\n      if (setrlimit((__rlimit_resource_t)l->cmd, &<span class=\"supfact\">limit</span>) >=\n          Number)\n        return Number;\n      v4 = strerror(*dash_errno);\n      sh_error(String, v4);\n    }\n    printlim(how, &<span class=\"supfact\">limit</span>, l);\n    return Number;\n  }\n  for (l = limits_0; l->name; ++l) {\n    getrlimit((__rlimit_resource_t)l->cmd, &<span class=\"supfact\">limit</span>);\n    out1fmt(String, l->name);\n    printlim(how, &<span class=\"supfact\">limit</span>, l);\n  }\n  return Number;\n}", "var": [{"name": "rlimits", "type": "struct rlimit { rlim_t rlim_cur; rlim_t rlim_max; }", "ref_name": "limit", "ref_type": "struct rlimit { rlim_t rlim_cur; rlim_t rlim_max; }"}], "body_in_train": false}, {"repo_owner": "yosh1k104", "repo_name": "D-Switch", "path": "yosh1k104/D-Switch/b1abbb2183690bd6ed3afed0e15f26542b60cb1cefd54e7a55008bf7ce70b48b", "path_in_repo": "yosh1k104/D-Switch/contiki-2.6/examples/mb851/mb851-shell/obj_native/shell-time.o", "objdump": "0000000000000000 <process_thread_shell_time_process>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 50          \tsub    $0x50,%rsp\n   8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   c:\t89 f0                \tmov    %esi,%eax\n   e:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  12:\t88 45 c4             \tmov    %al,-0x3c(%rbp)\n  15:\tc6 45 ff 01          \tmovb   $0x1,-0x1(%rbp)\n  19:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  1d:\t0f b7 00             \tmovzwl (%rax),%eax\n  20:\t0f b7 c0             \tmovzwl %ax,%eax\n  23:\t85 c0                \ttest   %eax,%eax\n  25:\t0f 85 8f 00 00 00    \tjne    ba <process_thread_shell_time_process+0xba>\n  2b:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n  30:\t74 2d                \tje     5f <process_thread_shell_time_process+0x5f>\n  32:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  36:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  3a:\t48 89 d6             \tmov    %rdx,%rsi\n  3d:\t48 89 c7             \tmov    %rax,%rdi\n  40:\te8 00 00 00 00       \tcallq  45 <process_thread_shell_time_process+0x45>\n  45:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  49:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4d:\t48 39 45 b8          \tcmp    %rax,-0x48(%rbp)\n  51:\t74 0c                \tje     5f <process_thread_shell_time_process+0x5f>\n  53:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  57:\t48 89 c7             \tmov    %rax,%rdi\n  5a:\te8 00 00 00 00       \tcallq  5f <process_thread_shell_time_process+0x5f>\n  5f:\te8 00 00 00 00       \tcallq  64 <process_thread_shell_time_process+0x64>\n  64:\t66 89 45 e4          \tmov    %ax,-0x1c(%rbp)\n  68:\te8 00 00 00 00       \tcallq  6d <process_thread_shell_time_process+0x6d>\n  6d:\t66 89 45 e6          \tmov    %ax,-0x1a(%rbp)\n  71:\t66 c7 45 e8 00 00    \tmovw   $0x0,-0x18(%rbp)\n  77:\t66 c7 45 ea ff ff    \tmovw   $0xffff,-0x16(%rbp)\n  7d:\te8 00 00 00 00       \tcallq  82 <process_thread_shell_time_process+0x82>\n  82:\t48 c1 e8 10          \tshr    $0x10,%rax\n  86:\t66 89 45 ec          \tmov    %ax,-0x14(%rbp)\n  8a:\te8 00 00 00 00       \tcallq  8f <process_thread_shell_time_process+0x8f>\n  8f:\t66 89 45 ee          \tmov    %ax,-0x12(%rbp)\n  93:\t66 c7 45 e2 06 00    \tmovw   $0x6,-0x1e(%rbp)\n  99:\t48 8d 45 e2          \tlea    -0x1e(%rbp),%rax\n  9d:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  a3:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  a8:\tba 0e 00 00 00       \tmov    $0xe,%edx\n  ad:\t48 89 c6             \tmov    %rax,%rsi\n  b0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  b5:\te8 00 00 00 00       \tcallq  ba <process_thread_shell_time_process+0xba>\n  ba:\tc6 45 ff 00          \tmovb   $0x0,-0x1(%rbp)\n  be:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  c2:\t66 c7 00 00 00       \tmovw   $0x0,(%rax)\n  c7:\tb8 03 00 00 00       \tmov    $0x3,%eax\n  cc:\tc9                   \tleaveq \n  cd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall process_thread_shell_time_process(_WORD *a1, __int64 a2,\n                                                     __int64 a3) {\n  __int64 v5;\n  __int16 <span class=\"supfact\">v6</span>[Number];\n  __int64 v7;\n  char v8;\n  v8 = Number;\n  if (!*a1) {\n    if (a3) {\n      v7 = shell_strtolong(a3, &v5);\n      if (a3 != v5)\n        shell_set_time(v7);\n    }\n    <span class=\"supfact\">v6</span>[Number] = clock_time();\n    <span class=\"supfact\">v6</span>[Number] = clock_time();\n    <span class=\"supfact\">v6</span>[Number] = Number;\n    <span class=\"supfact\">v6</span>[Number] = Number;\n    <span class=\"supfact\">v6</span>[Number] = (unsigned int)shell_time() >> Number;\n    <span class=\"supfact\">v6</span>[Number] = shell_time();\n    <span class=\"supfact\">v6</span>[Number] = Number;\n    shell_output(&time_command, <span class=\"supfact\">v6</span>, Number L, &unk_CEE,\n                 Number L);\n  }\n  *a1 = Number;\n  return Number L;\n}", "code_t": "char __cdecl process_thread_shell_time_process(pt *process_pt,\n                                               process_event_t ev,\n                                               process_data_t data) {\n  const char *nextptr;\n  process_thread_shell_time_process $5E3B906875F7C9DDD551E1EA2D2ECEBB\n      <span class=\"supfact\">msg</span>;\n  unsigned __int64 newtime;\n  char PT_YIELD_FLAG;\n  PT_YIELD_FLAG = Number;\n  if (!process_pt->lc) {\n    if (data) {\n      newtime = shell_strtolong(data, &nextptr);\n      if (data != nextptr)\n        shell_set_time(newtime);\n    }\n    <span class=\"supfact\">msg</span>.clock = clock_time();\n    <span class=\"supfact\">msg</span>.rtimer = clock_time();\n    <span class=\"supfact\">msg</span>.timesynch = Number;\n    <span class=\"supfact\">msg</span>.timesynch_authority = Number;\n    <span class=\"supfact\">msg</span>.time[Number] = (unsigned int)shell_time() >> Number;\n    <span class=\"supfact\">msg</span>.time[Number] = shell_time();\n    <span class=\"supfact\">msg</span>.len = Number;\n    shell_output(&time_command, &<span class=\"supfact\">msg</span>, Number L, &unk_CEE,\n                 Number L);\n  }\n  process_pt->lc = Number;\n  return Number;\n}", "var": [{"name": "v6", "type": "struct process_thread_shell_time_process::$5E3B906875F7C9DDD551E1EA2D2ECEBB { uint16_t len; uint16_t clock; uint16_t rtimer; uint16_t timesynch; uint16_t timesynch_authority; uint16_t[2] time; }", "ref_name": "msg", "ref_type": "struct process_thread_shell_time_process::$5E3B906875F7C9DDD551E1EA2D2ECEBB { uint16_t len; uint16_t clock; uint16_t rtimer; uint16_t timesynch; uint16_t timesynch_authority; uint16_t[2] time; }"}], "body_in_train": true}, {"repo_owner": "axbaretto", "repo_name": "torch", "path": "axbaretto/torch/ccd3b3108ab02956fcf5f1d14c863baa19c4e9dc4bbd0ade6143e963a6af6a09", "path_in_repo": "axbaretto/torch/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "0000000000000000 <_ZNK7testing8internal14ComparisonBaseINS0_9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_NS0_5AnyEqEE4ImplIRKS8_E15MatchAndExplainESE_PNS_19MatchResultListenerE>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  14:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  18:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  1c:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  20:\t48 8d 45 ff          \tlea    -0x1(%rbp),%rax\n  24:\t48 89 ce             \tmov    %rcx,%rsi\n  27:\t48 89 c7             \tmov    %rax,%rdi\n  2a:\te8 00 00 00 00       \tcallq  2f <_ZNK7testing8internal14ComparisonBaseINS0_9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_NS0_5AnyEqEE4ImplIRKS8_E15MatchAndExplainESE_PNS_19MatchResultListenerE+0x2f>\n  2f:\tc9                   \tleaveq \n  30:\tc3                   \tretq   ", "code_s": "__int64 __fastcall testing internal ComparisonBase<\n    testing internal EqMatcher<std __cxx11 basic_string<\n        char, std char_traits<char>, std allocator<char>>>,\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>,\n    testing internal AnyEq>\n    Impl<std __cxx11 basic_string<char, std char_traits<char>,\n                                  std allocator<char>> const &>\n    MatchAndExplain(__int64 a1, __int64 a2) {\n  char <span class=\"supfact\">v3</span>;\n  return testing internal AnyEq\n  operator()<std __cxx11\n                 basic_string<char, std char_traits<char>, std allocator<char>>,\n             std __cxx11 basic_string<char, std char_traits<char>,\n                                      std allocator<char>>>(&<span class=\"supfact\">v3</span>,\n                                                            a2, a1 + Number);\n}", "code_t": "bool __cdecl testing internal ComparisonBase<\n    testing internal EqMatcher<std __cxx11 basic_string<\n        char, std char_traits<char>, std allocator<char>>>,\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>,\n    testing internal AnyEq>\n    Impl<std __cxx11 basic_string<char, std char_traits<char>,\n                                  std allocator<char>> const &>\n    MatchAndExplain(\n        const testing internal ComparisonBase<\n            testing internal EqMatcher<std __cxx11 basic_string<\n                char, std char_traits<char>, std allocator<char>>>,\n            std __cxx11\n                basic_string<char, std char_traits<char>, std allocator<char>>,\n            testing internal AnyEq>\n            Impl<const std __cxx11 basic_string<char, std char_traits<char>,\n                                                std allocator<char>> &>\n                *const this,\n        const std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>> *lhs,\n        testing MatchResultListener *a3) {\n  testing internal AnyEq <span class=\"supfact\">v4</span>;\n  return testing internal AnyEq\n  operator()<std __cxx11\n                 basic_string<char, std char_traits<char>, std allocator<char>>,\n             std __cxx11 basic_string<char, std char_traits<char>,\n                                      std allocator<char>>>(&<span class=\"supfact\">v4</span>,\n                                                            lhs, &this->rhs_);\n}", "var": [{"name": "v3", "type": "struct testing::internal::AnyEq { __int8[1] gap0; }", "ref_name": "v4", "ref_type": "struct testing::internal::AnyEq { __int8[1] gap0; }"}], "body_in_train": true}, {"repo_owner": "antmicro", "repo_name": "tx2-deep-learning-kit-bsp", "path": "antmicro/tx2-deep-learning-kit-bsp/af4862be4f2cc387c7b739c0819f453081d7ab1422155320df2be996e5858b28", "path_in_repo": "antmicro/tx2-deep-learning-kit-bsp/tx2-baseboard-module-install/resources/linux-headers-4.4.38-antmicro/scripts/basic/fixdep", "objdump": "0000000000401b84 <print_deps>:\n  401b84:\t48 81 ec a8 00 00 00 \tsub    $0xa8,%rsp\n  401b8b:\t48 8b 05 6e 2d 00 00 \tmov    0x2d6e(%rip),%rax        # 404900 <depfile>\n  401b92:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401b97:\t48 89 c7             \tmov    %rax,%rdi\n  401b9a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401b9f:\te8 5c f5 ff ff       \tcallq  401100 <open@plt>\n  401ba4:\t89 84 24 9c 00 00 00 \tmov    %eax,0x9c(%rsp)\n  401bab:\t83 bc 24 9c 00 00 00 \tcmpl   $0x0,0x9c(%rsp)\n  401bb2:\t00 \n  401bb3:\t79 37                \tjns    401bec <print_deps+0x68>\n  401bb5:\t48 8b 05 24 25 00 00 \tmov    0x2524(%rip),%rax        # 4040e0 <stderr@@GLIBC_2.2.5>\n  401bbc:\t48 89 c1             \tmov    %rax,%rcx\n  401bbf:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n  401bc4:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401bc9:\tbf 88 21 40 00       \tmov    $0x402188,%edi\n  401bce:\te8 5d f5 ff ff       \tcallq  401130 <fwrite@plt>\n  401bd3:\t48 8b 05 26 2d 00 00 \tmov    0x2d26(%rip),%rax        # 404900 <depfile>\n  401bda:\t48 89 c7             \tmov    %rax,%rdi\n  401bdd:\te8 2e f5 ff ff       \tcallq  401110 <perror@plt>\n  401be2:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  401be7:\te8 34 f5 ff ff       \tcallq  401120 <exit@plt>\n  401bec:\t48 89 e2             \tmov    %rsp,%rdx\n  401bef:\t8b 84 24 9c 00 00 00 \tmov    0x9c(%rsp),%eax\n  401bf6:\t48 89 d6             \tmov    %rdx,%rsi\n  401bf9:\t89 c7                \tmov    %eax,%edi\n  401bfb:\te8 50 02 00 00       \tcallq  401e50 <__fstat>\n  401c00:\t85 c0                \ttest   %eax,%eax\n  401c02:\t79 37                \tjns    401c3b <print_deps+0xb7>\n  401c04:\t48 8b 05 d5 24 00 00 \tmov    0x24d5(%rip),%rax        # 4040e0 <stderr@@GLIBC_2.2.5>\n  401c0b:\t48 89 c1             \tmov    %rax,%rcx\n  401c0e:\tba 21 00 00 00       \tmov    $0x21,%edx\n  401c13:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401c18:\tbf a8 21 40 00       \tmov    $0x4021a8,%edi\n  401c1d:\te8 0e f5 ff ff       \tcallq  401130 <fwrite@plt>\n  401c22:\t48 8b 05 d7 2c 00 00 \tmov    0x2cd7(%rip),%rax        # 404900 <depfile>\n  401c29:\t48 89 c7             \tmov    %rax,%rdi\n  401c2c:\te8 df f4 ff ff       \tcallq  401110 <perror@plt>\n  401c31:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  401c36:\te8 e5 f4 ff ff       \tcallq  401120 <exit@plt>\n  401c3b:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n  401c40:\t48 85 c0             \ttest   %rax,%rax\n  401c43:\t75 33                \tjne    401c78 <print_deps+0xf4>\n  401c45:\t48 8b 15 b4 2c 00 00 \tmov    0x2cb4(%rip),%rdx        # 404900 <depfile>\n  401c4c:\t48 8b 05 8d 24 00 00 \tmov    0x248d(%rip),%rax        # 4040e0 <stderr@@GLIBC_2.2.5>\n  401c53:\tbe ca 21 40 00       \tmov    $0x4021ca,%esi\n  401c58:\t48 89 c7             \tmov    %rax,%rdi\n  401c5b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401c60:\te8 3b f4 ff ff       \tcallq  4010a0 <fprintf@plt>\n  401c65:\t8b 84 24 9c 00 00 00 \tmov    0x9c(%rsp),%eax\n  401c6c:\t89 c7                \tmov    %eax,%edi\n  401c6e:\te8 0d f4 ff ff       \tcallq  401080 <close@plt>\n  401c73:\te9 9d 00 00 00       \tjmpq   401d15 <print_deps+0x191>\n  401c78:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n  401c7d:\t48 89 c6             \tmov    %rax,%rsi\n  401c80:\t8b 84 24 9c 00 00 00 \tmov    0x9c(%rsp),%eax\n  401c87:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  401c8d:\t41 89 c0             \tmov    %eax,%r8d\n  401c90:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n  401c95:\tba 01 00 00 00       \tmov    $0x1,%edx\n  401c9a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401c9f:\te8 bc f3 ff ff       \tcallq  401060 <mmap@plt>\n  401ca4:\t48 89 84 24 90 00 00 \tmov    %rax,0x90(%rsp)\n  401cab:\t00 \n  401cac:\t48 83 bc 24 90 00 00 \tcmpq   $0xffffffffffffffff,0x90(%rsp)\n  401cb3:\t00 ff \n  401cb5:\t75 1a                \tjne    401cd1 <print_deps+0x14d>\n  401cb7:\tbf b4 20 40 00       \tmov    $0x4020b4,%edi\n  401cbc:\te8 4f f4 ff ff       \tcallq  401110 <perror@plt>\n  401cc1:\t8b 84 24 9c 00 00 00 \tmov    0x9c(%rsp),%eax\n  401cc8:\t89 c7                \tmov    %eax,%edi\n  401cca:\te8 b1 f3 ff ff       \tcallq  401080 <close@plt>\n  401ccf:\teb 44                \tjmp    401d15 <print_deps+0x191>\n  401cd1:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n  401cd6:\t48 89 c2             \tmov    %rax,%rdx\n  401cd9:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n  401ce0:\t00 \n  401ce1:\t48 89 d6             \tmov    %rdx,%rsi\n  401ce4:\t48 89 c7             \tmov    %rax,%rdi\n  401ce7:\te8 a2 fb ff ff       \tcallq  40188e <parse_dep_file>\n  401cec:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n  401cf1:\t48 89 c2             \tmov    %rax,%rdx\n  401cf4:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n  401cfb:\t00 \n  401cfc:\t48 89 d6             \tmov    %rdx,%rsi\n  401cff:\t48 89 c7             \tmov    %rax,%rdi\n  401d02:\te8 e9 f3 ff ff       \tcallq  4010f0 <munmap@plt>\n  401d07:\t8b 84 24 9c 00 00 00 \tmov    0x9c(%rsp),%eax\n  401d0e:\t89 c7                \tmov    %eax,%edi\n  401d10:\te8 6b f3 ff ff       \tcallq  401080 <close@plt>\n  401d15:\t48 81 c4 a8 00 00 00 \tadd    $0xa8,%rsp\n  401d1c:\tc3                   \tretq   ", "code_s": "int print_deps() {\n  int result;\n  struct stat <span class=\"supfact\">v1</span>;\n  void *addr;\n  int fd;\n  fd = open(depfile, Number);\n  if (fd < Number) {\n    fwrite(String, Number, Number, stderr);\n    perror(depfile);\n    exit(Number);\n  }\n  if ((int)fstat(fd, &<span class=\"supfact\">v1</span>) < Number) {\n    fwrite(String, Number, Number, stderr);\n    perror(depfile);\n    exit(Number);\n  }\n  if (<span class=\"supfact\">v1</span>.st_size) {\n    addr = mmap(Number L, <span class=\"supfact\">v1</span>.st_size, Number, Number, fd,\n                Number L);\n    if (addr == (void *)Number) {\n      perror(String);\n    } else {\n      parse_dep_file(addr, <span class=\"supfact\">v1</span>.st_size);\n      munmap(addr, <span class=\"supfact\">v1</span>.st_size);\n    }\n    result = close(fd);\n  } else {\n    fprintf(stderr, String, depfile);\n    result = close(fd);\n  }\n  return result;\n}", "code_t": "void __cdecl print_deps() {\n  stat <span class=\"supfact\">st</span>;\n  void *map;\n  int fd;\n  fd = open(depfile, Number);\n  if (fd < Number) {\n    fwrite(String, Number, Number, stderr);\n    perror(depfile);\n    exit(Number);\n  }\n  if ((int)fstat(fd, &<span class=\"supfact\">st</span>) < Number) {\n    fwrite(String, Number, Number, stderr);\n    perror(depfile);\n    exit(Number);\n  }\n  if (<span class=\"supfact\">st</span>.st_size) {\n    map = mmap(Number L, <span class=\"supfact\">st</span>.st_size, Number, Number, fd,\n               Number L);\n    if (map == (void *)Number) {\n      perror(String);\n    } else {\n      parse_dep_file(map, <span class=\"supfact\">st</span>.st_size);\n      munmap(map, <span class=\"supfact\">st</span>.st_size);\n    }\n    close(fd);\n  } else {\n    fprintf(stderr, String, depfile);\n    close(fd);\n  }\n}", "var": [{"name": "v1", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/393407c84c882115e9d8ea8e0e9a3f4e4c67d57e0e3512eb36a33581c47e510e", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_h.o", "objdump": "0000000000002603 <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring>:\n    2603:\t55                   \tpush   %rbp\n    2604:\t48 89 e5             \tmov    %rsp,%rbp\n    2607:\t53                   \tpush   %rbx\n    2608:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    260f:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    2613:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n    2617:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    261e:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    2622:\t48 89 c7             \tmov    %rax,%rdi\n    2625:\te8 00 00 00 00       \tcallq  262a <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n    262a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    2631:\t00 \n    2632:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    2639:\t00 \n    263a:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    2641:\t00 \n    2642:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    2649:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    2650:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n    2654:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    2658:\t48 89 ce             \tmov    %rcx,%rsi\n    265b:\t48 89 c7             \tmov    %rax,%rdi\n    265e:\te8 2c f5 ff ff       \tcallq  1b8f <_ZL25construct_ioport_recordbrR8device_tR11tagged_listI17input_port_configER7astring>\n    2663:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    2667:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    266b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2670:\t48 89 ce             \tmov    %rcx,%rsi\n    2673:\t48 89 c7             \tmov    %rax,%rdi\n    2676:\te8 00 00 00 00       \tcallq  267b <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x78>\n    267b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    267f:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    2686:\t00 \n    2687:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    268e:\t00 \n    268f:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    2696:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    269a:\t41 b8 0a 00 00 00    \tmov    $0xa,%r8d\n    26a0:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n    26a5:\tba 30 00 00 00       \tmov    $0x30,%edx\n    26aa:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    26af:\t48 89 c7             \tmov    %rax,%rdi\n    26b2:\te8 00 00 00 00       \tcallq  26b7 <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0xb4>\n    26b7:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    26bb:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    26c2:\t00 \n    26c3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    26c7:\t8b 00                \tmov    (%rax),%eax\n    26c9:\t83 e0 10             \tand    $0x10,%eax\n    26cc:\t89 c1                \tmov    %eax,%ecx\n    26ce:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    26d2:\tba 15 00 00 00       \tmov    $0x15,%edx\n    26d7:\t89 ce                \tmov    %ecx,%esi\n    26d9:\t48 89 c7             \tmov    %rax,%rdi\n    26dc:\te8 00 00 00 00       \tcallq  26e1 <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0xde>\n    26e1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    26e5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    26e9:\t8b 00                \tmov    (%rax),%eax\n    26eb:\t83 e0 30             \tand    $0x30,%eax\n    26ee:\t89 c1                \tmov    %eax,%ecx\n    26f0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    26f4:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    26f9:\t89 ce                \tmov    %ecx,%esi\n    26fb:\t48 89 c7             \tmov    %rax,%rdi\n    26fe:\te8 00 00 00 00       \tcallq  2703 <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x100>\n    2703:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2707:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    270b:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n    2710:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2715:\t48 89 c7             \tmov    %rax,%rdi\n    2718:\te8 00 00 00 00       \tcallq  271d <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x11a>\n    271d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2721:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2725:\t8b 00                \tmov    (%rax),%eax\n    2727:\t83 e0 20             \tand    $0x20,%eax\n    272a:\t89 c1                \tmov    %eax,%ecx\n    272c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2730:\tba 22 00 00 00       \tmov    $0x22,%edx\n    2735:\t89 ce                \tmov    %ecx,%esi\n    2737:\t48 89 c7             \tmov    %rax,%rdi\n    273a:\te8 00 00 00 00       \tcallq  273f <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x13c>\n    273f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2743:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2747:\t41 b8 0b 00 00 00    \tmov    $0xb,%r8d\n    274d:\tb9 c0 00 00 00       \tmov    $0xc0,%ecx\n    2752:\tba c0 00 00 00       \tmov    $0xc0,%edx\n    2757:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    275c:\t48 89 c7             \tmov    %rax,%rdi\n    275f:\te8 00 00 00 00       \tcallq  2764 <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x161>\n    2764:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    2768:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    276f:\t00 \n    2770:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2774:\t8b 00                \tmov    (%rax),%eax\n    2776:\t83 e0 40             \tand    $0x40,%eax\n    2779:\t89 c1                \tmov    %eax,%ecx\n    277b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    277f:\tba 15 00 00 00       \tmov    $0x15,%edx\n    2784:\t89 ce                \tmov    %ecx,%esi\n    2786:\t48 89 c7             \tmov    %rax,%rdi\n    2789:\te8 00 00 00 00       \tcallq  278e <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x18b>\n    278e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2792:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2796:\t8b 00                \tmov    (%rax),%eax\n    2798:\t25 c0 00 00 00       \tand    $0xc0,%eax\n    279d:\t89 c1                \tmov    %eax,%ecx\n    279f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    27a3:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    27a8:\t89 ce                \tmov    %ecx,%esi\n    27aa:\t48 89 c7             \tmov    %rax,%rdi\n    27ad:\te8 00 00 00 00       \tcallq  27b2 <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x1af>\n    27b2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    27b6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    27ba:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n    27bf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    27c4:\t48 89 c7             \tmov    %rax,%rdi\n    27c7:\te8 00 00 00 00       \tcallq  27cc <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x1c9>\n    27cc:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    27d0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    27d4:\t8b 00                \tmov    (%rax),%eax\n    27d6:\t25 80 00 00 00       \tand    $0x80,%eax\n    27db:\t89 c1                \tmov    %eax,%ecx\n    27dd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    27e1:\tba 22 00 00 00       \tmov    $0x22,%edx\n    27e6:\t89 ce                \tmov    %ecx,%esi\n    27e8:\t48 89 c7             \tmov    %rax,%rdi\n    27eb:\te8 00 00 00 00       \tcallq  27f0 <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x1ed>\n    27f0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    27f4:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    27f8:\t48 89 c7             \tmov    %rax,%rdi\n    27fb:\te8 00 00 00 00       \tcallq  2800 <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x1fd>\n    2800:\teb 1a                \tjmp    281c <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n    2802:\t48 89 c3             \tmov    %rax,%rbx\n    2805:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    2809:\t48 89 c7             \tmov    %rax,%rdi\n    280c:\te8 00 00 00 00       \tcallq  2811 <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x20e>\n    2811:\t48 89 d8             \tmov    %rbx,%rax\n    2814:\t48 89 c7             \tmov    %rax,%rdi\n    2817:\te8 00 00 00 00       \tcallq  281c <_ZL23construct_ioport_gogoldR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n    281c:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    2823:\t5b                   \tpop    %rbx\n    2824:\t5d                   \tpop    %rbp\n    2825:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_gogold(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  int v5;\n  __int64 v6;\n  _DWORD *v7;\n  __int64 v8;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  v8 = Number L;\n  v7 = Number L;\n  v6 = Number L;\n  v5 = Number;\n  construct_ioport_recordbr(a1, a2, a3);\n  v6 = ioconfig_modify_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = (_DWORD *)ioconfig_alloc_field(v6, Number L, Number L, Number L,\n                                      Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v7 = (_DWORD *)ioconfig_alloc_field(v6, Number L, Number L, Number L,\n                                      Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl construct_ioport_gogold(device_t *owner, ioport_list *portlist,\n                                     astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value maskbits;\n  input_port_config *curport;\n  input_field_config *curfield;\n  input_setting_config *cursetting;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  cursetting = Number L;\n  curfield = Number L;\n  curport = Number L;\n  maskbits = Number;\n  construct_ioport_recordbr(owner, portlist, errorbuf);\n  curport = (input_port_config *)ioconfig_modify_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_8 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_14 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1A + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_1D + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_21 + Number);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_8 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_14 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1A + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_1D + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_21 + Number);\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/0c220081571b31109458ad0af80da996db681a85a2e92ce9cf7314108079ece6", "path_in_repo": "AlexanderVangelov/pjsip//pjlib-util/bin/pjlib-util-test-x86_64-unknown-linux-gnu", "objdump": "000000000042df3c <pj_inet_addr>:\n  42df3c:\t55                   \tpush   %rbp\n  42df3d:\t48 89 e5             \tmov    %rsp,%rbp\n  42df40:\t48 83 ec 20          \tsub    $0x20,%rsp\n  42df44:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  42df48:\t48 8d 55 fc          \tlea    -0x4(%rbp),%rdx\n  42df4c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42df50:\t48 89 d6             \tmov    %rdx,%rsi\n  42df53:\t48 89 c7             \tmov    %rax,%rdi\n  42df56:\te8 3c 84 ff ff       \tcallq  426397 <pj_inet_aton>\n  42df5b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42df5e:\tc9                   \tleaveq \n  42df5f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_inet_addr(__int64 a1) {\n  struct in_addr <span class=\"supfact\">v2</span>;\n  pj_inet_aton(a1, &<span class=\"supfact\">v2</span>);\n  return <span class=\"supfact\">v2</span>.s_addr;\n}", "code_t": "pj_in_addr_0 __cdecl pj_inet_addr(const pj_str_t_0 *cp) {\n  pj_in_addr_0 <span class=\"supfact\">addr</span>;\n  pj_inet_aton(cp, &<span class=\"supfact\">addr</span>);\n  return <span class=\"supfact\">addr</span>;\n}", "var": [{"name": "v2", "type": "struct pj_in_addr_0 { pj_uint32_t s_addr; }", "ref_name": "addr", "ref_type": "struct pj_in_addr_0 { pj_uint32_t s_addr; }"}], "body_in_train": true}, {"repo_owner": "paulcbetts", "repo_name": "yikes", "path": "paulcbetts/yikes/b37de7233bfa92466a44389427af1d3cbd93d36d7d4dcb02625b648f360469d9", "path_in_repo": "paulcbetts/yikes/ext/ffmpeg/libavcodec/dvdsubdec.o", "objdump": "0000000000000532 <decode_rle>:\n     532:\t48 83 ec 78          \tsub    $0x78,%rsp\n     536:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n     53b:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n     53f:\t89 54 24 10          \tmov    %edx,0x10(%rsp)\n     543:\t89 4c 24 0c          \tmov    %ecx,0xc(%rsp)\n     547:\t4c 89 04 24          \tmov    %r8,(%rsp)\n     54b:\t44 89 4c 24 08       \tmov    %r9d,0x8(%rsp)\n     550:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n     557:\t2b 44 24 08          \tsub    0x8(%rsp),%eax\n     55b:\tc1 e0 03             \tshl    $0x3,%eax\n     55e:\t89 44 24 54          \tmov    %eax,0x54(%rsp)\n     562:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n     566:\t48 63 d0             \tmovslq %eax,%rdx\n     569:\t48 8b 04 24          \tmov    (%rsp),%rax\n     56d:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n     571:\t8b 54 24 54          \tmov    0x54(%rsp),%edx\n     575:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n     57a:\t48 89 ce             \tmov    %rcx,%rsi\n     57d:\t48 89 c7             \tmov    %rax,%rdi\n     580:\te8 0e fc ff ff       \tcallq  193 <init_get_bits>\n     585:\tc7 44 24 6c 00 00 00 \tmovl   $0x0,0x6c(%rsp)\n     58c:\t00 \n     58d:\tc7 44 24 68 00 00 00 \tmovl   $0x0,0x68(%rsp)\n     594:\t00 \n     595:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     59a:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n     59f:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n     5a4:\t48 89 c7             \tmov    %rax,%rdi\n     5a7:\te8 94 fa ff ff       \tcallq  40 <get_bits_count>\n     5ac:\t39 44 24 54          \tcmp    %eax,0x54(%rsp)\n     5b0:\t7d 0a                \tjge    5bc <decode_rle+0x8a>\n     5b2:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     5b7:\te9 c7 00 00 00       \tjmpq   683 <decode_rle+0x151>\n     5bc:\t83 bc 24 88 00 00 00 \tcmpl   $0x0,0x88(%rsp)\n     5c3:\t00 \n     5c4:\t74 1b                \tje     5e1 <decode_rle+0xaf>\n     5c6:\t48 8d 54 24 2c       \tlea    0x2c(%rsp),%rdx\n     5cb:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n     5d0:\t48 89 d6             \tmov    %rdx,%rsi\n     5d3:\t48 89 c7             \tmov    %rax,%rdi\n     5d6:\te8 80 fe ff ff       \tcallq  45b <decode_run_8bit>\n     5db:\t89 44 24 64          \tmov    %eax,0x64(%rsp)\n     5df:\teb 19                \tjmp    5fa <decode_rle+0xc8>\n     5e1:\t48 8d 54 24 2c       \tlea    0x2c(%rsp),%rdx\n     5e6:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n     5eb:\t48 89 d6             \tmov    %rdx,%rsi\n     5ee:\t48 89 c7             \tmov    %rax,%rdi\n     5f1:\te8 e4 fd ff ff       \tcallq  3da <decode_run_2bit>\n     5f6:\t89 44 24 64          \tmov    %eax,0x64(%rsp)\n     5fa:\t8b 44 24 10          \tmov    0x10(%rsp),%eax\n     5fe:\t2b 44 24 6c          \tsub    0x6c(%rsp),%eax\n     602:\t39 44 24 64          \tcmp    %eax,0x64(%rsp)\n     606:\t0f 4e 44 24 64       \tcmovle 0x64(%rsp),%eax\n     60b:\t89 44 24 64          \tmov    %eax,0x64(%rsp)\n     60f:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n     613:\t48 63 d0             \tmovslq %eax,%rdx\n     616:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n     61a:\t8b 4c 24 6c          \tmov    0x6c(%rsp),%ecx\n     61e:\t48 63 f1             \tmovslq %ecx,%rsi\n     621:\t48 8b 4c 24 58       \tmov    0x58(%rsp),%rcx\n     626:\t48 01 f1             \tadd    %rsi,%rcx\n     629:\t89 c6                \tmov    %eax,%esi\n     62b:\t48 89 cf             \tmov    %rcx,%rdi\n     62e:\te8 00 00 00 00       \tcallq  633 <decode_rle+0x101>\n     633:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n     637:\t01 44 24 6c          \tadd    %eax,0x6c(%rsp)\n     63b:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n     63f:\t3b 44 24 10          \tcmp    0x10(%rsp),%eax\n     643:\t0f 8c 56 ff ff ff    \tjl     59f <decode_rle+0x6d>\n     649:\t83 44 24 68 01       \taddl   $0x1,0x68(%rsp)\n     64e:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n     652:\t3b 44 24 0c          \tcmp    0xc(%rsp),%eax\n     656:\t7d 25                \tjge    67d <decode_rle+0x14b>\n     658:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n     65c:\t48 98                \tcltq   \n     65e:\t48 01 44 24 58       \tadd    %rax,0x58(%rsp)\n     663:\tc7 44 24 6c 00 00 00 \tmovl   $0x0,0x6c(%rsp)\n     66a:\t00 \n     66b:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n     670:\t48 89 c7             \tmov    %rax,%rdi\n     673:\te8 9d fb ff ff       \tcallq  215 <align_get_bits>\n     678:\te9 22 ff ff ff       \tjmpq   59f <decode_rle+0x6d>\n     67d:\t90                   \tnop\n     67e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     683:\t48 83 c4 78          \tadd    $0x78,%rsp\n     687:\tc3                   \tretq   ", "code_s": "__int64 __fastcall decode_rle(__int64 a1, int a2, int a3, int a4, __int64 a5,\n                              int a6, int a7, int a8) {\n  int v8;\n  int v10;\n  int c;\n  char <span class=\"supfact\">v14</span>[Number];\n  int v15;\n  __int64 v16;\n  int v17;\n  int v18;\n  int v19;\n  v15 = Number * (a7 - a6);\n  init_get_bits((__int64)<span class=\"supfact\">v14</span>, a6 + a5, v15);\n  v19 = Number;\n  v18 = Number;\n  v16 = a1;\n  while (Number) {\n    do {\n      v8 = get_bits_count((__int64)<span class=\"supfact\">v14</span>);\n      if (v15 < v8)\n        return Number;\n      if (a8)\n        v17 = decode_run_8bit((__int64)<span class=\"supfact\">v14</span>, &c);\n      else\n        v17 = decode_run_2bit((__int64)<span class=\"supfact\">v14</span>, (unsigned int *)&c);\n      v10 = a3 - v19;\n      if (v17 <= a3 - v19)\n        v10 = v17;\n      v17 = v10;\n      memset((void *)(v19 + v16), c, v10);\n      v19 += v17;\n    } while (v19 < a3);\n    if (++v18 >= a4)\n      break;\n    v16 += a2;\n    v19 = Number;\n    align_get_bits((__int64)<span class=\"supfact\">v14</span>);\n  }\n  return Number L;\n}", "code_t": "int __cdecl decode_rle(uint8_t *bitmap, int linesize, int w, int h,\n                       const uint8_t *buf, int start, int buf_size,\n                       int is_8bit) {\n  int v8;\n  int v10;\n  int color;\n  GetBitContext_0 <span class=\"supfact\">gb</span>;\n  int bit_len;\n  uint8_t *d;\n  int len;\n  int y;\n  int x;\n  bit_len = Number * (buf_size - start);\n  init_get_bits(&<span class=\"supfact\">gb</span>, &buf[start], bit_len);\n  x = Number;\n  y = Number;\n  d = bitmap;\n  while (Number) {\n    do {\n      v8 = get_bits_count(&<span class=\"supfact\">gb</span>);\n      if (bit_len < v8)\n        return Number;\n      if (is_8bit)\n        len = decode_run_8bit(&<span class=\"supfact\">gb</span>, &color);\n      else\n        len = decode_run_2bit(&<span class=\"supfact\">gb</span>, &color);\n      v10 = w - x;\n      if (len <= w - x)\n        v10 = len;\n      len = v10;\n      memset(&d[x], color, v10);\n      x += len;\n    } while (x < w);\n    if (++y >= h)\n      break;\n    d += linesize;\n    x = Number;\n    align_get_bits(&<span class=\"supfact\">gb</span>);\n  }\n  return Number;\n}", "var": [{"name": "v14", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }", "ref_name": "gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; }"}], "body_in_train": true}, {"repo_owner": "dpryan79", "repo_name": "libGTF", "path": "dpryan79/libGTF/dd99092919d86b9ad652b6274d9300562551fa88133cd2a67c7733287eafddf4", "path_in_repo": "dpryan79/libGTF/htslib/bgzip", "objdump": "000000000045623d <cram_add_quality>:\n  45623d:\t55                   \tpush   %rbp\n  45623e:\t48 89 e5             \tmov    %rsp,%rbp\n  456241:\t53                   \tpush   %rbx\n  456242:\t48 83 ec 48          \tsub    $0x48,%rsp\n  456246:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  45624a:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  45624e:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  456252:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  456256:\t44 89 45 bc          \tmov    %r8d,-0x44(%rbp)\n  45625a:\t44 89 c8             \tmov    %r9d,%eax\n  45625d:\t88 45 b8             \tmov    %al,-0x48(%rbp)\n  456260:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  456263:\t83 c0 01             \tadd    $0x1,%eax\n  456266:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  456269:\tc7 45 e4 51 00 00 00 \tmovl   $0x51,-0x1c(%rbp)\n  456270:\t0f be 45 b8          \tmovsbl -0x48(%rbp),%eax\n  456274:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  456277:\t0f be 55 b8          \tmovsbl -0x48(%rbp),%edx\n  45627b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  45627f:\t48 8b 80 20 01 00 00 \tmov    0x120(%rax),%rax\n  456286:\t89 d6                \tmov    %edx,%esi\n  456288:\t48 89 c7             \tmov    %rax,%rdi\n  45628b:\te8 89 cd fc ff       \tcallq  423019 <cram_stats_add>\n  456290:\te9 bb 00 00 00       \tjmpq   456350 <cram_add_quality+0x113>\n  456295:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  456299:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n  45629d:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  4562a1:\t48 85 c0             \ttest   %rax,%rax\n  4562a4:\t74 6a                \tje     456310 <cram_add_quality+0xd3>\n  4562a6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4562aa:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n  4562ae:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  4562b2:\t48 85 c0             \ttest   %rax,%rax\n  4562b5:\t78 07                \tjs     4562be <cram_add_quality+0x81>\n  4562b7:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  4562bc:\teb 15                \tjmp    4562d3 <cram_add_quality+0x96>\n  4562be:\t48 89 c2             \tmov    %rax,%rdx\n  4562c1:\t48 d1 ea             \tshr    %rdx\n  4562c4:\t83 e0 01             \tand    $0x1,%eax\n  4562c7:\t48 09 c2             \tor     %rax,%rdx\n  4562ca:\tf2 48 0f 2a c2       \tcvtsi2sd %rdx,%xmm0\n  4562cf:\tf2 0f 58 c0          \taddsd  %xmm0,%xmm0\n  4562d3:\tf2 0f 10 0d 15 58 01 \tmovsd  0x15815(%rip),%xmm1        # 46baf0 <code2base.8659+0x210>\n  4562da:\t00 \n  4562db:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n  4562df:\t66 0f 2f 05 11 58 01 \tcomisd 0x15811(%rip),%xmm0        # 46baf8 <code2base.8659+0x218>\n  4562e6:\t00 \n  4562e7:\t73 07                \tjae    4562f0 <cram_add_quality+0xb3>\n  4562e9:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n  4562ee:\teb 25                \tjmp    456315 <cram_add_quality+0xd8>\n  4562f0:\tf2 0f 10 0d 00 58 01 \tmovsd  0x15800(%rip),%xmm1        # 46baf8 <code2base.8659+0x218>\n  4562f7:\t00 \n  4562f8:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n  4562fc:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n  456301:\t48 ba 00 00 00 00 00 \tmovabs $0x8000000000000000,%rdx\n  456308:\t00 00 80 \n  45630b:\t48 31 d0             \txor    %rdx,%rax\n  45630e:\teb 05                \tjmp    456315 <cram_add_quality+0xd8>\n  456310:\tb8 00 04 00 00       \tmov    $0x400,%eax\n  456315:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  456319:\t48 8b 52 70          \tmov    0x70(%rdx),%rdx\n  45631d:\t48 89 42 28          \tmov    %rax,0x28(%rdx)\n  456321:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  456325:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n  456329:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  45632d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  456331:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n  456335:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  456339:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  45633d:\t48 8b 59 70          \tmov    0x70(%rcx),%rbx\n  456341:\t48 89 d6             \tmov    %rdx,%rsi\n  456344:\t48 89 c7             \tmov    %rax,%rdi\n  456347:\te8 34 d2 fa ff       \tcallq  403580 <realloc@plt>\n  45634c:\t48 89 43 20          \tmov    %rax,0x20(%rbx)\n  456350:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  456354:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n  456358:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  45635c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  456360:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n  456364:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  456368:\t48 83 c0 01          \tadd    $0x1,%rax\n  45636c:\t48 39 c2             \tcmp    %rax,%rdx\n  45636f:\t0f 86 20 ff ff ff    \tjbe    456295 <cram_add_quality+0x58>\n  456375:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  456379:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n  45637d:\t48 8b 70 20          \tmov    0x20(%rax),%rsi\n  456381:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  456385:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n  456389:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n  45638d:\t48 8d 4a 01          \tlea    0x1(%rdx),%rcx\n  456391:\t48 89 48 30          \tmov    %rcx,0x30(%rax)\n  456395:\t48 01 f2             \tadd    %rsi,%rdx\n  456398:\t0f b6 45 b8          \tmovzbl -0x48(%rbp),%eax\n  45639c:\t88 02                \tmov    %al,(%rdx)\n  45639e:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  4563a2:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  4563a6:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n  4563aa:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4563ae:\t48 89 c7             \tmov    %rax,%rdi\n  4563b1:\te8 b9 f8 ff ff       \tcallq  455c6f <cram_add_feature>\n  4563b6:\t48 83 c4 48          \tadd    $0x48,%rsp\n  4563ba:\t5b                   \tpop    %rbx\n  4563bb:\t5d                   \tpop    %rbp\n  4563bc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cram_add_quality(__int64 a1, __int64 a2, __int64 a3,\n                                    __int64 a4, int a5, char a6) {\n  __int64 v6;\n  double v7;\n  __int64 v8;\n  double v9;\n  unsigned __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  int <span class=\"supfact\">v20</span>[Number];\n  <span class=\"supfact\">v20</span>[Number] = a5 + Number;\n  <span class=\"supfact\">v20</span>[Number] = Number;\n  <span class=\"supfact\">v20</span>[Number] = a6;\n  cram_stats_add(*(_QWORD *)(a2 + Number), a6);\n  while (*(_QWORD *)(*(_QWORD *)(a3 + Number) + Number L) <=\n         (unsigned __int64)(*(_QWORD *)(*(_QWORD *)(a3 + Number) + Number L) +\n                            Number L)) {\n    if (*(_QWORD *)(*(_QWORD *)(a3 + Number) + Number L)) {\n      v6 = *(_QWORD *)(*(_QWORD *)(a3 + Number) + Number L);\n      if (v6 < Number) {\n        v8 = *(_QWORD *)(*(_QWORD *)(a3 + Number) + Number L) & Number L |\n             ((unsigned __int64)v6 >> Number);\n        v7 = (double)(int)v8 + (double)(int)v8;\n      } else {\n        v7 = (double)(int)v6;\n      }\n      v9 = v7 * Number;\n      if (v9 >= Number)\n        v10 = (unsigned int)(int)(v9 - Number) ^ Number;\n      else\n        v10 = (unsigned int)(int)v9;\n    } else {\n      v10 = Number L;\n    }\n    *(_QWORD *)(*(_QWORD *)(a3 + Number) + Number L) = v10;\n    v11 = *(_QWORD *)(a3 + Number);\n    *(_QWORD *)(v11 + Number) =\n        realloc(*(void **)(v11 + Number), *(_QWORD *)(v11 + Number));\n  }\n  v12 = *(_QWORD *)(*(_QWORD *)(a3 + Number) + Number L);\n  v13 = *(_QWORD *)(a3 + Number);\n  v14 = *(_QWORD *)(v13 + Number);\n  *(_QWORD *)(v13 + Number) = v14 + Number;\n  *(_BYTE *)(v12 + v14) = a6;\n  return cram_add_feature(a2, a3, a4, (__int64)<span class=\"supfact\">v20</span>);\n}", "code_t": "int __cdecl cram_add_quality(cram_fd_0 *fd, cram_container *c, cram_slice_0 *s,\n                             cram_record *r, int pos, char qual) {\n  signed __int64 v6;\n  double v7;\n  size_t v8;\n  double v9;\n  unsigned __int64 v10;\n  cram_block *v11;\n  unsigned __int8 *v12;\n  cram_block *v13;\n  size_t v14;\n  cram_feature <span class=\"supfact\">f</span>;\n  <span class=\"supfact\">f</span>._anon_0.X.pos = pos + Number;\n  <span class=\"supfact\">f</span>._anon_0.X.code = Number;\n  <span class=\"supfact\">f</span>._anon_0.X.base = qual;\n  cram_stats_add(c->stats[Number], qual);\n  while (s->qual_blk->alloc <= s->qual_blk->byte + Number) {\n    if (s->qual_blk->alloc) {\n      v6 = s->qual_blk->alloc;\n      if (v6 < Number) {\n        v8 = s->qual_blk->alloc & Number | ((unsigned __int64)v6 >> Number);\n        v7 = (double)(int)v8 + (double)(int)v8;\n      } else {\n        v7 = (double)(int)v6;\n      }\n      v9 = v7 * Number;\n      if (v9 >= Number)\n        v10 = (unsigned int)(int)(v9 - Number) ^ Number;\n      else\n        v10 = (unsigned int)(int)v9;\n    } else {\n      v10 = Number L;\n    }\n    s->qual_blk->alloc = v10;\n    v11 = s->qual_blk;\n    v11->data = (unsigned __int8 *)realloc(v11->data, v11->alloc);\n  }\n  v12 = s->qual_blk->data;\n  v13 = s->qual_blk;\n  v14 = v13->byte;\n  v13->byte = v14 + Number;\n  v12[v14] = qual;\n  return cram_add_feature(c, s, r, &<span class=\"supfact\">f</span>);\n}", "var": [{"name": "v20", "type": "struct cram_feature { $3D26F883D758A3EEA605D3EFFEDCDF84 _anon_0; }", "ref_name": "f", "ref_type": "struct cram_feature { $3D26F883D758A3EEA605D3EFFEDCDF84 _anon_0; }"}], "body_in_train": true}, {"repo_owner": "nstroustrup", "repo_name": "lifespan", "path": "nstroustrup/lifespan/79fc827494d9fc5fbc2996e5e37a2edf638ae382966ea1c75ae3eede0ed34781", "path_in_repo": "nstroustrup/lifespan/external_compile_libraries/fltk/test/device", "objdump": "00000000004291c0 <_ZN18Fl_Graphics_Driver6yxlineEiiiii>:\n  4291c0:\t48 83 ec 18          \tsub    $0x18,%rsp\n  4291c4:\t89 f7                \tmov    %esi,%edi\n  4291c6:\t41 89 d3             \tmov    %edx,%r11d\n  4291c9:\te8 d4 fc ff ff       \tcallq  428ea2 <_ZL6clip_xi>\n  4291ce:\t44 89 df             \tmov    %r11d,%edi\n  4291d1:\t66 89 44 24 04       \tmov    %ax,0x4(%rsp)\n  4291d6:\t66 89 04 24          \tmov    %ax,(%rsp)\n  4291da:\te8 c3 fc ff ff       \tcallq  428ea2 <_ZL6clip_xi>\n  4291df:\t89 cf                \tmov    %ecx,%edi\n  4291e1:\t66 89 44 24 02       \tmov    %ax,0x2(%rsp)\n  4291e6:\te8 b7 fc ff ff       \tcallq  428ea2 <_ZL6clip_xi>\n  4291eb:\t44 89 c7             \tmov    %r8d,%edi\n  4291ee:\t66 89 44 24 0a       \tmov    %ax,0xa(%rsp)\n  4291f3:\t66 89 44 24 06       \tmov    %ax,0x6(%rsp)\n  4291f8:\te8 a5 fc ff ff       \tcallq  428ea2 <_ZL6clip_xi>\n  4291fd:\t44 89 cf             \tmov    %r9d,%edi\n  429200:\t66 89 44 24 0c       \tmov    %ax,0xc(%rsp)\n  429205:\t66 89 44 24 08       \tmov    %ax,0x8(%rsp)\n  42920a:\te8 93 fc ff ff       \tcallq  428ea2 <_ZL6clip_xi>\n  42920f:\t48 8b 15 ca 7d 07 00 \tmov    0x77dca(%rip),%rdx        # 4a0fe0 <fl_gc>\n  429216:\t48 89 e1             \tmov    %rsp,%rcx\n  429219:\t45 31 c9             \txor    %r9d,%r9d\n  42921c:\t48 8b 35 cd 7d 07 00 \tmov    0x77dcd(%rip),%rsi        # 4a0ff0 <fl_window>\n  429223:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n  429229:\t66 89 44 24 0e       \tmov    %ax,0xe(%rsp)\n  42922e:\t48 8b 3d 3b 7f 07 00 \tmov    0x77f3b(%rip),%rdi        # 4a1170 <fl_display>\n  429235:\te8 56 c1 fd ff       \tcallq  405390 <XDrawLines@plt>\n  42923a:\t48 83 c4 18          \tadd    $0x18,%rsp\n  42923e:\tc3                   \tretq   \n  42923f:\t90                   \tnop", "code_s": "int __fastcall Fl_Graphics_Driver yxline(Fl_Graphics_Driver *this, int a2) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  XPoint <span class=\"supfact\">v7</span>;\n  __int16 v8;\n  __int16 v9;\n  __int16 v10;\n  __int16 v11;\n  __int16 v12;\n  __int16 v13;\n  v8 = clip_x(a2);\n  <span class=\"supfact\">v7</span>.x = v8;\n  <span class=\"supfact\">v7</span>.y = clip_x(v2);\n  v11 = clip_x(v3);\n  v9 = v11;\n  v12 = clip_x(v4);\n  v10 = v12;\n  v13 = clip_x(v5);\n  return XDrawLines(fl_display, fl_window, fl_gc, &<span class=\"supfact\">v7</span>, Number,\n                    Number);\n}", "code_t": "int __fastcall Fl_Graphics_Driver yxline(Fl_Graphics_Driver *this, int a2) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  XPoint <span class=\"supfact\">v7</span>;\n  __int16 v8;\n  __int16 v9;\n  __int16 v10;\n  __int16 v11;\n  __int16 v12;\n  __int16 v13;\n  v8 = clip_x(a2);\n  <span class=\"supfact\">v7</span>.x = v8;\n  <span class=\"supfact\">v7</span>.y = clip_x(v2);\n  v11 = clip_x(v3);\n  v9 = v11;\n  v12 = clip_x(v4);\n  v10 = v12;\n  v13 = clip_x(v5);\n  return XDrawLines(fl_display, fl_window, fl_gc, &<span class=\"supfact\">v7</span>, Number,\n                    Number);\n}", "var": [{"name": "v7", "type": "struct XPoint { __int16 x; __int16 y; }", "ref_name": "v7", "ref_type": "struct XPoint { __int16 x; __int16 y; }"}], "body_in_train": true}, {"repo_owner": "grpascal", "repo_name": "GEO", "path": "grpascal/GEO/1af20c332f82f04ccf6e2d64e3d7c49a92c84a50891969e2c0a3827114aa768e", "path_in_repo": "grpascal/GEO/host/Linux/mxview/src/lua/src/lua", "objdump": "00000000004071a4 <lua_setfield>:\n  4071a4:\t55                   \tpush   %rbp\n  4071a5:\t48 89 e5             \tmov    %rsp,%rbp\n  4071a8:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4071ac:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4071b0:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  4071b3:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  4071b7:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  4071ba:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4071be:\t89 d6                \tmov    %edx,%esi\n  4071c0:\t48 89 c7             \tmov    %rax,%rdi\n  4071c3:\te8 10 e7 ff ff       \tcallq  4058d8 <index2adr>\n  4071c8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4071cc:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4071d0:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4071d4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4071d8:\t48 89 c7             \tmov    %rax,%rdi\n  4071db:\te8 60 d0 ff ff       \tcallq  404240 <strlen@plt>\n  4071e0:\t48 89 c2             \tmov    %rax,%rdx\n  4071e3:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  4071e7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4071eb:\t48 89 ce             \tmov    %rcx,%rsi\n  4071ee:\t48 89 c7             \tmov    %rax,%rdi\n  4071f1:\te8 fc c1 00 00       \tcallq  4133f2 <luaS_newlstr>\n  4071f6:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  4071fa:\t48 89 02             \tmov    %rax,(%rdx)\n  4071fd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  407201:\tc7 40 08 04 00 00 00 \tmovl   $0x4,0x8(%rax)\n  407208:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40720c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  407210:\t48 8d 48 f0          \tlea    -0x10(%rax),%rcx\n  407214:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  407218:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n  40721c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  407220:\t48 89 c7             \tmov    %rax,%rdi\n  407223:\te8 2b ed 00 00       \tcallq  415f53 <luaV_settable>\n  407228:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40722c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  407230:\t48 8d 50 f0          \tlea    -0x10(%rax),%rdx\n  407234:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  407238:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  40723c:\t90                   \tnop\n  40723d:\tc9                   \tleaveq \n  40723e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall lua_setfield(__int64 a1, int a2, const char *a3) {\n  size_t v3;\n  __int64 v4;\n  __int64 result;\n  char <span class=\"supfact\">v7</span>[Number];\n  char *v8;\n  void *v9;\n  v9 = index2adr(a1, a2);\n  v8 = <span class=\"supfact\">v7</span>;\n  v3 = strlen(a3);\n  v4 = luaS_newlstr(a1, a3, v3);\n  *(_QWORD *)v8 = v4;\n  *((_DWORD *)v8 + Number) = Number;\n  luaV_settable(a1, v9, <span class=\"supfact\">v7</span>,\n                *(_QWORD *)(a1 + Number) - Number L);\n  result = a1;\n  *(_QWORD *)(a1 + Number) -= Number L;\n  return result;\n}", "code_t": "void __cdecl lua_setfield(lua_State_0 *L, int idx, const char *k) {\n  size_t v3;\n  TString_0 *v4;\n  TValue <span class=\"supfact\">key</span>;\n  TValue *i_o;\n  StkId t;\n  t = index2adr(L, idx);\n  i_o = &<span class=\"supfact\">key</span>;\n  v3 = strlen(k);\n  v4 = luaS_newlstr(L, k, v3);\n  i_o->value.gc = (GCObject_0 *)v4;\n  i_o->tt = Number;\n  luaV_settable(L, t, &<span class=\"supfact\">key</span>, L->top - Number);\n  --L->top;\n}", "var": [{"name": "v7", "type": "struct TValue { Value value; int tt; PADDING (4); }", "ref_name": "key", "ref_type": "struct TValue { Value value; int tt; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "juliadeneva", "repo_name": "SPclean", "path": "juliadeneva/SPclean/897d44175a63939e5a97f85b905b24d048da6da03575976295c7e1dc75a4cd02", "path_in_repo": "juliadeneva/SPclean//spclean", "objdump": "000000000040446e <get_file_size>:\n  40446e:\t55                   \tpush   %rbp\n  40446f:\t48 89 e5             \tmov    %rsp,%rbp\n  404472:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  404479:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n  404480:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n  404487:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  40448e:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  404495:\t48 89 d6             \tmov    %rdx,%rsi\n  404498:\t48 89 c7             \tmov    %rax,%rdi\n  40449b:\te8 e0 05 00 00       \tcallq  404a80 <stat64>\n  4044a0:\t85 c0                \ttest   %eax,%eax\n  4044a2:\t74 07                \tje     4044ab <get_file_size+0x3d>\n  4044a4:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4044a9:\teb 13                \tjmp    4044be <get_file_size+0x50>\n  4044ab:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n  4044af:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4044b6:\t48 89 10             \tmov    %rdx,(%rax)\n  4044b9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4044be:\tc9                   \tleaveq \n  4044bf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_file_size(char *a1, __off_t *a2) {\n  struct stat64 <span class=\"supfact\">v3</span>;\n  if ((unsigned int)stat64(a1, &<span class=\"supfact\">v3</span>))\n    return Number;\n  *a2 = <span class=\"supfact\">v3</span>.st_size;\n  return Number L;\n}", "code_t": "int __cdecl get_file_size(char *path, off_t *size) {\n  stat <span class=\"supfact\">file_stats</span>;\n  if ((unsigned int)stat64(path, (struct stat64 *)&<span class=\"supfact\">file_stats</span>))\n    return Number;\n  *size = <span class=\"supfact\">file_stats</span>.st_size;\n  return Number;\n}", "var": [{"name": "v3", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "file_stats", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/1e1e7cb97ebb80eac8dbb33680b64d176ff61b4eaa68df0fca22659194da5490", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/stateful_proxy", "objdump": "000000000040cfd6 <is_next_sip_version>:\n  40cfd6:\t55                   \tpush   %rbp\n  40cfd7:\t48 89 e5             \tmov    %rsp,%rbp\n  40cfda:\t48 83 ec 40          \tsub    $0x40,%rsp\n  40cfde:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  40cfe2:\t48 c7 45 e0 e4 a5 46 \tmovq   $0x46a5e4,-0x20(%rbp)\n  40cfe9:\t00 \n  40cfea:\t48 c7 45 e8 03 00 00 \tmovq   $0x3,-0x18(%rbp)\n  40cff1:\t00 \n  40cff2:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  40cff6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40cffa:\tbe 50 98 48 00       \tmov    $0x489850,%esi\n  40cfff:\t48 89 c7             \tmov    %rax,%rdi\n  40d002:\te8 e2 57 02 00       \tcallq  4327e9 <pj_scan_peek>\n  40d007:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40d00a:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40d00e:\t74 30                \tje     40d040 <is_next_sip_version+0x6a>\n  40d010:\t83 7d fc 2f          \tcmpl   $0x2f,-0x4(%rbp)\n  40d014:\t74 0c                \tje     40d022 <is_next_sip_version+0x4c>\n  40d016:\t83 7d fc 20          \tcmpl   $0x20,-0x4(%rbp)\n  40d01a:\t74 06                \tje     40d022 <is_next_sip_version+0x4c>\n  40d01c:\t83 7d fc 09          \tcmpl   $0x9,-0x4(%rbp)\n  40d020:\t75 1e                \tjne    40d040 <is_next_sip_version+0x6a>\n  40d022:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  40d026:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  40d02a:\t48 89 d6             \tmov    %rdx,%rsi\n  40d02d:\t48 89 c7             \tmov    %rax,%rdi\n  40d030:\te8 1f 86 05 00       \tcallq  465654 <pj_stricmp>\n  40d035:\t85 c0                \ttest   %eax,%eax\n  40d037:\t75 07                \tjne    40d040 <is_next_sip_version+0x6a>\n  40d039:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40d03e:\teb 05                \tjmp    40d045 <is_next_sip_version+0x6f>\n  40d040:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40d045:\tc9                   \tleaveq \n  40d046:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall is_next_sip_version(__int64 a1) {\n  char <span class=\"supfact\">v2</span>[Number];\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  int v4;\n  <span class=\"supfact\">v3</span>[Number] = (__int64)String;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  v4 = pj_scan_peek(a1, &unk_489850, <span class=\"supfact\">v2</span>);\n  return v4 && (v4 == Number || v4 == Number || v4 == Number) &&\n         !(unsigned int)pj_stricmp(<span class=\"supfact\">v2</span>, <span class=\"supfact\">v3</span>);\n}", "code_t": "pj_bool_t __cdecl is_next_sip_version(pj_scanner_0 *scanner) {\n  pj_str_t_0 <span class=\"supfact\">sip</span>;\n  pj_str_t_0 <span class=\"supfact\">SIP</span>;\n  int c;\n  <span class=\"supfact\">SIP</span>.ptr = String;\n  <span class=\"supfact\">SIP</span>.slen = Number L;\n  c = pj_scan_peek(scanner, &pconst.pjsip_ALPHA_SPEC, &<span class=\"supfact\">sip</span>);\n  return c && (c == Number || c == Number || c == Number) &&\n         !pj_stricmp(&<span class=\"supfact\">sip</span>, &<span class=\"supfact\">SIP</span>);\n}", "var": [{"name": "v3", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "SIP", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}, {"name": "v2", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "sip", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": false}, {"repo_owner": "vganapathi", "repo_name": "librdkafka", "path": "vganapathi/librdkafka/ee28e7fb44801a7d8a8727131105a11d3c6570ec2e58de2d43f6a5a9ab44b4cd", "path_in_repo": "vganapathi/librdkafka/examples/rdkafka_performance", "objdump": "", "code_s": "unsigned __int64 rd_clock_5() {\n  struct timespec <span class=\"supfact\">tp</span>;\n  clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n  return Number * <span class=\"supfact\">tp</span>.tv_sec +\n         <span class=\"supfact\">tp</span>.tv_nsec / Number;\n}", "code_t": "rd_ts_t __cdecl rd_clock_5() {\n  timespec <span class=\"supfact\">ts</span>;\n  clock_gettime(Number, &<span class=\"supfact\">ts</span>);\n  return Number * <span class=\"supfact\">ts</span>.tv_sec +\n         <span class=\"supfact\">ts</span>.tv_nsec / Number;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "darkspr1te", "repo_name": "uClinux-dist", "path": "darkspr1te/uClinux-dist/b059680439a42903becbe07472ef14dfbe08463fa7e88680d00e4937d05e497e", "path_in_repo": "darkspr1te/uClinux-dist/user/zebra/ospfd/ospf_main.o", "objdump": "00000000000000d5 <signal_set>:\n  d5:\t55                   \tpush   %rbp\n  d6:\t48 89 e5             \tmov    %rsp,%rbp\n  d9:\t48 81 ec 50 01 00 00 \tsub    $0x150,%rsp\n  e0:\t89 bd bc fe ff ff    \tmov    %edi,-0x144(%rbp)\n  e6:\t48 89 b5 b0 fe ff ff \tmov    %rsi,-0x150(%rbp)\n  ed:\t48 8b 85 b0 fe ff ff \tmov    -0x150(%rbp),%rax\n  f4:\t48 89 85 60 ff ff ff \tmov    %rax,-0xa0(%rbp)\n  fb:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 102:\t48 83 c0 08          \tadd    $0x8,%rax\n 106:\t48 89 c7             \tmov    %rax,%rdi\n 109:\te8 00 00 00 00       \tcallq  10e <signal_set+0x39>\n 10e:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n 115:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 118:\t0d 00 00 00 10       \tor     $0x10000000,%eax\n 11d:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n 120:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n 127:\t48 8d 8d 60 ff ff ff \tlea    -0xa0(%rbp),%rcx\n 12e:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n 134:\t48 89 ce             \tmov    %rcx,%rsi\n 137:\t89 c7                \tmov    %eax,%edi\n 139:\te8 00 00 00 00       \tcallq  13e <signal_set+0x69>\n 13e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 141:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 145:\t79 09                \tjns    150 <signal_set+0x7b>\n 147:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n 14e:\teb 07                \tjmp    157 <signal_set+0x82>\n 150:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n 157:\tc9                   \tleaveq \n 158:\tc3                   \tretq   ", "code_s": "__int64 __fastcall signal_set(int a1, void (*a2)(int)) {\n  __int64 result;\n  struct sigaction <span class=\"supfact\">v3</span>;\n  struct sigaction <span class=\"supfact\">v4</span>;\n  int v5;\n  <span class=\"supfact\">v4</span>.sa_handler = a2;\n  sigemptyset(&<span class=\"supfact\">v4</span>.sa_mask);\n  <span class=\"supfact\">v4</span>.sa_flags = Number;\n  v5 = sigaction(a1, &<span class=\"supfact\">v4</span>, &<span class=\"supfact\">v3</span>);\n  if (v5 >= Number)\n    result = (__int64)<span class=\"supfact\">v3</span>.sa_handler;\n  else\n    result = Number;\n  return result;\n}", "code_t": "void *__cdecl signal_set(int signo, void (*func)(int)) {\n  void *result;\n  sigaction <span class=\"supfact\">osig</span>;\n  sigaction <span class=\"supfact\">sig</span>;\n  int ret;\n  <span class=\"supfact\">sig</span>.sa_handler = func;\n  sigemptyset(&<span class=\"supfact\">sig</span>.sa_mask);\n  <span class=\"supfact\">sig</span>.sa_flags = Number;\n  ret = sigaction_0(signo, &<span class=\"supfact\">sig</span>, &<span class=\"supfact\">osig</span>);\n  if (ret >= Number)\n    result = <span class=\"supfact\">osig</span>.sa_handler;\n  else\n    result = (void *)Number;\n  return result;\n}", "var": [{"name": "v4", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "sig", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}, {"name": "v3", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "osig", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": true}, {"code_s": "Poco Logger *__fastcall Poco Logger create(Poco Logger *a1, __int64 a2,\n                                           int a3) {\n  Poco ExistsException *v3;\n  Poco Logger *v4;\n  Poco Logger *v5;\n  char <span class=\"supfact\">v8</span>[Number];\n  Poco Logger *v9;\n  Poco ScopedLock<Poco Mutex> ScopedLock(<span class=\"supfact\">v8</span>,\n                                         &Poco Logger _mapMtx);\n  if (Poco Logger find(a1)) {\n    v3 = (Poco ExistsException *)_cxa_allocate_exception(Number);\n    Poco ExistsException ExistsException(v3, Number); _cxa_throw ( v3 , ( struct type_info * ) & ` typeinfo for ' Poco ExistsException , ( void ( __fastcall * ) ( void * ) ) & Poco ExistsException ~ ExistsException ) ; } v4 = ( Poco Logger * ) operator new ( Number ) ; Poco Logger Logger ( ( __int64 ) v4 , ( __int64 ) a1 , a2 , a3 ) ; v9 = v4 ; Poco Logger add ( v4 , a1 ) ; v5 = v9 ; Poco ScopedLock < Poco Mutex > ~ ScopedLock ( <span class=\"supfact\">v8</span> ) ; return v5 ; }", "code_t": "Poco Logger *__cdecl Poco Logger create(const std string *name,\n                                        Poco Channel *pChannel, int level) {\n  Poco ExistsException *v3;\n  Poco Logger *v4;\n  Poco Logger *v5;\n  Poco Mutex ScopedLock <span class=\"supfact\">lock</span>;\n  Poco Logger *pLogger;\n  Poco ScopedLock<Poco Mutex> ScopedLock(&<span class=\"supfact\">lock</span>,\n                                         &Poco Logger _mapMtx);\n  if (Poco Logger find(name)) {\n    v3 = (Poco ExistsException *)_cxa_allocate_exception(Number);\n    Poco ExistsException ExistsException(v3, Number); _cxa_throw ( v3 , ( struct type_info * ) & ` typeinfo for ' Poco ExistsException , ( void ( __fastcall * ) ( void * ) ) & Poco ExistsException ~ ExistsException ) ; } v4 = ( Poco Logger * ) operator new ( Number ) ; Poco Logger Logger ( v4 , name , pChannel , level ) ; pLogger = v4 ; Poco Logger add ( v4 ) ; v5 = pLogger ; Poco ScopedLock < Poco Mutex > ~ ScopedLock ( & <span class=\"supfact\">lock</span> ) ; return v5 ; }", "var": [{"name": "v8", "type": "struct Poco::Mutex::ScopedLock { Poco::Mutex * _mutex; }", "ref_name": "lock", "ref_type": "struct Poco::Mutex::ScopedLock { Poco::Mutex * _mutex; }"}], "body_in_train": false}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/eddf4c128d81974d0a44cef786539de6088e3397414c265ffb89dc1463abb496", "path_in_repo": "ftnapps/pkg-sbbs/src/sbbs3/syncview/gcc.linux.exe.debug/syncview", "objdump": "0000000000405765 <playnote_thread>:\n  405765:\t55                   \tpush   %rbp\n  405766:\t48 89 e5             \tmov    %rsp,%rbp\n  405769:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40576d:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  405771:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  405778:\tc7 05 9e 8b 05 00 01 \tmovl   $0x1,0x58b9e(%rip)        # 45e320 <playnote_thread_running>\n  40577f:\t00 00 00 \n  405782:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  405786:\t74 2b                \tje     4057b3 <playnote_thread+0x4e>\n  405788:\tbe 88 13 00 00       \tmov    $0x1388,%esi\n  40578d:\tbf 40 e3 45 00       \tmov    $0x45e340,%edi\n  405792:\te8 e6 f3 00 00       \tcallq  414b7d <listSemTryWaitBlock>\n  405797:\t85 c0                \ttest   %eax,%eax\n  405799:\t75 22                \tjne    4057bd <playnote_thread+0x58>\n  40579b:\te8 b6 1e 01 00       \tcallq  417656 <xptone_close>\n  4057a0:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  4057a7:\tbf 40 e3 45 00       \tmov    $0x45e340,%edi\n  4057ac:\te8 44 f3 00 00       \tcallq  414af5 <listSemWait>\n  4057b1:\teb 0a                \tjmp    4057bd <playnote_thread+0x58>\n  4057b3:\tbf 40 e3 45 00       \tmov    $0x45e340,%edi\n  4057b8:\te8 38 f3 00 00       \tcallq  414af5 <listSemWait>\n  4057bd:\te8 02 1d 01 00       \tcallq  4174c4 <xptone_open>\n  4057c2:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n  4057c9:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4057ce:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4057d3:\tbf 40 e3 45 00       \tmov    $0x45e340,%edi\n  4057d8:\te8 36 02 01 00       \tcallq  415a13 <listRemoveNode>\n  4057dd:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4057e1:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  4057e6:\t0f 84 04 02 00 00    \tje     4059f0 <playnote_thread+0x28b>\n  4057ec:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4057f0:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4057f3:\t85 c0                \ttest   %eax,%eax\n  4057f5:\t74 14                \tje     40580b <playnote_thread+0xa6>\n  4057f7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4057fb:\t8b 70 0c             \tmov    0xc(%rax),%esi\n  4057fe:\tb8 40 7e 05 00       \tmov    $0x57e40,%eax\n  405803:\t99                   \tcltd   \n  405804:\tf7 fe                \tidiv   %esi\n  405806:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  405809:\teb 12                \tjmp    40581d <playnote_thread+0xb8>\n  40580b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40580f:\t8b 70 0c             \tmov    0xc(%rax),%esi\n  405812:\tb8 80 a9 03 00       \tmov    $0x3a980,%eax\n  405817:\t99                   \tcltd   \n  405818:\tf7 fe                \tidiv   %esi\n  40581a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40581d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405821:\t8b 70 04             \tmov    0x4(%rax),%esi\n  405824:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405827:\t99                   \tcltd   \n  405828:\tf7 fe                \tidiv   %esi\n  40582a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40582d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405831:\t8b 40 10             \tmov    0x10(%rax),%eax\n  405834:\t83 f8 01             \tcmp    $0x1,%eax\n  405837:\t74 18                \tje     405851 <playnote_thread+0xec>\n  405839:\t83 f8 02             \tcmp    $0x2,%eax\n  40583c:\t75 1c                \tjne    40585a <playnote_thread+0xf5>\n  40583e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405841:\t8d 50 03             \tlea    0x3(%rax),%edx\n  405844:\t85 c0                \ttest   %eax,%eax\n  405846:\t0f 48 c2             \tcmovs  %edx,%eax\n  405849:\tc1 f8 02             \tsar    $0x2,%eax\n  40584c:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40584f:\teb 1b                \tjmp    40586c <playnote_thread+0x107>\n  405851:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  405858:\teb 12                \tjmp    40586c <playnote_thread+0x107>\n  40585a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40585d:\t8d 50 07             \tlea    0x7(%rax),%edx\n  405860:\t85 c0                \ttest   %eax,%eax\n  405862:\t0f 48 c2             \tcmovs  %edx,%eax\n  405865:\tc1 f8 03             \tsar    $0x3,%eax\n  405868:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40586b:\t90                   \tnop\n  40586c:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40586f:\t29 45 fc             \tsub    %eax,-0x4(%rbp)\n  405872:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405876:\t8b 00                \tmov    (%rax),%eax\n  405878:\t83 f8 47             \tcmp    $0x47,%eax\n  40587b:\t7f 5d                \tjg     4058da <playnote_thread+0x175>\n  40587d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405881:\t8b 00                \tmov    (%rax),%eax\n  405883:\t85 c0                \ttest   %eax,%eax\n  405885:\t78 53                \tjs     4058da <playnote_thread+0x175>\n  405887:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40588a:\t48 63 c8             \tmovslq %eax,%rcx\n  40588d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405891:\t8b 00                \tmov    (%rax),%eax\n  405893:\t48 98                \tcltq   \n  405895:\t8b 04 85 00 93 41 00 \tmov    0x419300(,%rax,4),%eax\n  40589c:\t89 c0                \tmov    %eax,%eax\n  40589e:\t48 85 c0             \ttest   %rax,%rax\n  4058a1:\t78 07                \tjs     4058aa <playnote_thread+0x145>\n  4058a3:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  4058a8:\teb 15                \tjmp    4058bf <playnote_thread+0x15a>\n  4058aa:\t48 89 c2             \tmov    %rax,%rdx\n  4058ad:\t48 d1 ea             \tshr    %rdx\n  4058b0:\t83 e0 01             \tand    $0x1,%eax\n  4058b3:\t48 09 c2             \tor     %rax,%rdx\n  4058b6:\tf2 48 0f 2a c2       \tcvtsi2sd %rdx,%xmm0\n  4058bb:\tf2 0f 58 c0          \taddsd  %xmm0,%xmm0\n  4058bf:\tf2 0f 10 0d a9 42 01 \tmovsd  0x142a9(%rip),%xmm1        # 419b70 <note_frequency+0x870>\n  4058c6:\t00 \n  4058c7:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n  4058cb:\tbe 06 00 00 00       \tmov    $0x6,%esi\n  4058d0:\t48 89 cf             \tmov    %rcx,%rdi\n  4058d3:\te8 c9 1d 01 00       \tcallq  4176a1 <xptone>\n  4058d8:\teb 78                \tjmp    405952 <playnote_thread+0x1ed>\n  4058da:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4058dd:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  4058e0:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4058e3:\t48 63 d0             \tmovslq %eax,%rdx\n  4058e6:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  4058ed:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  4058f1:\tc1 fa 06             \tsar    $0x6,%edx\n  4058f4:\tc1 f8 1f             \tsar    $0x1f,%eax\n  4058f7:\t29 c2                \tsub    %eax,%edx\n  4058f9:\t89 d0                \tmov    %edx,%eax\n  4058fb:\t48 98                \tcltq   \n  4058fd:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  405901:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  405904:\t48 63 d0             \tmovslq %eax,%rdx\n  405907:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  40590e:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  405912:\t89 d1                \tmov    %edx,%ecx\n  405914:\tc1 f9 06             \tsar    $0x6,%ecx\n  405917:\t99                   \tcltd   \n  405918:\t29 d1                \tsub    %edx,%ecx\n  40591a:\t89 ca                \tmov    %ecx,%edx\n  40591c:\t69 d2 e8 03 00 00    \timul   $0x3e8,%edx,%edx\n  405922:\t29 d0                \tsub    %edx,%eax\n  405924:\t89 c2                \tmov    %eax,%edx\n  405926:\t69 c2 e8 03 00 00    \timul   $0x3e8,%edx,%eax\n  40592c:\t48 98                \tcltq   \n  40592e:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  405932:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  405936:\t49 89 c0             \tmov    %rax,%r8\n  405939:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  40593e:\tba 00 00 00 00       \tmov    $0x0,%edx\n  405943:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  405948:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40594d:\te8 de d7 ff ff       \tcallq  403130 <select@plt>\n  405952:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  405955:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  405958:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  40595b:\t48 63 d0             \tmovslq %eax,%rdx\n  40595e:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  405965:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  405969:\tc1 fa 06             \tsar    $0x6,%edx\n  40596c:\tc1 f8 1f             \tsar    $0x1f,%eax\n  40596f:\t29 c2                \tsub    %eax,%edx\n  405971:\t89 d0                \tmov    %edx,%eax\n  405973:\t48 98                \tcltq   \n  405975:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  405979:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  40597c:\t48 63 d0             \tmovslq %eax,%rdx\n  40597f:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  405986:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  40598a:\t89 d1                \tmov    %edx,%ecx\n  40598c:\tc1 f9 06             \tsar    $0x6,%ecx\n  40598f:\t99                   \tcltd   \n  405990:\t29 d1                \tsub    %edx,%ecx\n  405992:\t89 ca                \tmov    %ecx,%edx\n  405994:\t69 d2 e8 03 00 00    \timul   $0x3e8,%edx,%edx\n  40599a:\t29 d0                \tsub    %edx,%eax\n  40599c:\t89 c2                \tmov    %eax,%edx\n  40599e:\t69 c2 e8 03 00 00    \timul   $0x3e8,%edx,%eax\n  4059a4:\t48 98                \tcltq   \n  4059a6:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  4059aa:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4059ae:\t49 89 c0             \tmov    %rax,%r8\n  4059b1:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  4059b6:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4059bb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4059c0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4059c5:\te8 66 d7 ff ff       \tcallq  403130 <select@plt>\n  4059ca:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4059ce:\t8b 40 14             \tmov    0x14(%rax),%eax\n  4059d1:\t85 c0                \ttest   %eax,%eax\n  4059d3:\t74 0a                \tje     4059df <playnote_thread+0x27a>\n  4059d5:\tbf c8 f8 45 00       \tmov    $0x45f8c8,%edi\n  4059da:\te8 38 25 01 00       \tcallq  417f17 <xp_sem_post>\n  4059df:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4059e3:\t48 89 c7             \tmov    %rax,%rdi\n  4059e6:\te8 85 d8 ff ff       \tcallq  403270 <free@plt>\n  4059eb:\te9 92 fd ff ff       \tjmpq   405782 <playnote_thread+0x1d>\n  4059f0:\t90                   \tnop\n  4059f1:\tc7 05 25 89 05 00 00 \tmovl   $0x0,0x58925(%rip)        # 45e320 <playnote_thread_running>\n  4059f8:\t00 00 00 \n  4059fb:\tbf c0 f8 45 00       \tmov    $0x45f8c0,%edi\n  405a00:\te8 12 25 01 00       \tcallq  417f17 <xp_sem_post>\n  405a05:\t90                   \tnop\n  405a06:\tc9                   \tleaveq \n  405a07:\tc3                   \tretq   ", "code_s": "__int64 playnote_thread() {\n  int v0;\n  struct timeval <span class=\"supfact\">v2</span>;\n  struct timeval <span class=\"supfact\">timeout</span>;\n  int v4;\n  int v5;\n  void *ptr;\n  int v7;\n  int v8;\n  int v9;\n  v7 = Number;\n  playnote_thread_running = Number;\n  while (Number) {\n    if (v7) {\n      if (!(unsigned int)listSemTryWaitBlock(&notes, Number L)) {\n        xptone_close();\n        v7 = Number;\n        listSemWait(&notes);\n      }\n    } else {\n      listSemWait(&notes);\n    }\n    xptone_open();\n    v7 = Number;\n    ptr = (void *)listRemoveNode(&notes, Number L, Number L);\n    if (!ptr)\n      break;\n    if (*((_DWORD *)ptr + Number))\n      v9 = Number / *((_DWORD *)ptr + Number);\n    else\n      v9 = Number / *((_DWORD *)ptr + Number);\n    v9 /= *((int *)ptr + Number);\n    v0 = *((_DWORD *)ptr + Number);\n    if (v0 == Number) {\n      v8 = Number;\n    } else if (v0 == Number) {\n      v8 = v9 / Number;\n    } else {\n      v8 = v9 / Number;\n    }\n    v9 -= v8;\n    if (*(int *)ptr > Number || *(int *)ptr < Number) {\n      v5 = v9;\n      <span class=\"supfact\">timeout</span>.tv_sec = v9 / Number;\n      <span class=\"supfact\">timeout</span>.tv_usec = Number * (v9 % Number);\n      select(Number, Number L, Number L, Number L, &<span class=\"supfact\">timeout</span>);\n    } else {\n      xptone(v9, Number L, (double)note_frequency[*(int *)ptr] / Number);\n    }\n    v4 = v8;\n    <span class=\"supfact\">v2</span>.tv_sec = v8 / Number;\n    <span class=\"supfact\">v2</span>.tv_usec = Number * (v8 % Number);\n    select(Number, Number L, Number L, Number L, &<span class=\"supfact\">v2</span>);\n    if (*((_DWORD *)ptr + Number))\n      xp_sem_post(&note_completed_sem);\n    free(ptr);\n  }\n  playnote_thread_running = Number;\n  return xp_sem_post(&playnote_thread_terminated);\n}", "code_t": "void __cdecl playnote_thread(void *args) {\n  int v1;\n  timeval <span class=\"supfact\">tv_0</span>;\n  timeval <span class=\"supfact\">tv</span>;\n  int sleep_msecs_0;\n  int sleep_msecs;\n  note_params *note;\n  int device_open;\n  int pauselen;\n  int duration;\n  device_open = Number;\n  playnote_thread_running = Number;\n  while (Number) {\n    if (device_open) {\n      if (!listSemTryWaitBlock(&notes, Number)) {\n        xptone_close();\n        device_open = Number;\n        listSemWait(&notes);\n      }\n    } else {\n      listSemWait(&notes);\n    }\n    xptone_open();\n    device_open = Number;\n    note = (note_params *)listRemoveNode(&notes, Number L, Number);\n    if (!note)\n      break;\n    if (note->dotted)\n      duration = Number / note->tempo;\n    else\n      duration = Number / note->tempo;\n    duration /= note->notelen;\n    v1 = note->noteshape;\n    if (v1 == Number) {\n      pauselen = Number;\n    } else if (v1 == Number) {\n      pauselen = duration / Number;\n    } else {\n      pauselen = duration / Number;\n    }\n    duration -= pauselen;\n    if (note->notenum > Number || note->notenum < Number) {\n      sleep_msecs = duration;\n      <span class=\"supfact\">tv</span>.tv_sec = duration / Number;\n      <span class=\"supfact\">tv</span>.tv_usec = Number * (duration % Number);\n      select(Number, Number L, Number L, Number L, &<span class=\"supfact\">tv</span>);\n    } else {\n      xptone((double)(int)note_frequency[note->notenum] / Number, duration,\n             WAVE_SHAPE_SINE_SAW_HARM);\n    }\n    sleep_msecs_0 = pauselen;\n    <span class=\"supfact\">tv_0</span>.tv_sec = pauselen / Number;\n    <span class=\"supfact\">tv_0</span>.tv_usec = Number * (pauselen % Number);\n    select(Number, Number L, Number L, Number L, &<span class=\"supfact\">tv_0</span>);\n    if (note->foreground)\n      xp_sem_post(&note_completed_sem);\n    free(note);\n  }\n  playnote_thread_running = Number;\n  xp_sem_post(&playnote_thread_terminated);\n}", "var": [{"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v2", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv_0", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/a6c0476d37fab0a2016b706bb595a9db57bad22bae2083133c2d1eeb6cb12f1c", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_events_584896b4.o", "objdump": "", "code_s": "void __fastcall juce LeakedObjectDetector<juce MultiTimerCallback>\n    LeakCounter ~LeakCounter(void *a1) {\n  __int64 v1;\n  juce MultiTimerCallback *v2;\n  __int64 v3;\n  const char *v4;\n  int v5;\n  char <span class=\"supfact\">v6</span>[Number];\n  if (*(int *)a1 > Number) {\n    juce String String((juce String *)<span class=\"supfact\">v6</span>);\n    v1 = juce operator<<(<span class=\"supfact\">v6</span>, String);\n    v2 = (juce MultiTimerCallback *)juce operator<<(v1, *(unsigned int *)a1);\n    v3 = juce operator<<(v2, String);\n    v4 = juce LeakedObjectDetector<juce MultiTimerCallback>\n        getLeakedObjectClassName(v2);\n    juce operator<<(v3, v4);\n    juce Logger outputDebugString((juce Logger *)<span class=\"supfact\">v6</span>,\n                                  (const juce String *)v4);\n    juce String ~String((juce String *)<span class=\"supfact\">v6</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_5B + Number, v5);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  juce Atomic<int> ~Atomic();\n}", "code_t": "void __cdecl juce LeakedObjectDetector<juce MultiTimerCallback>\n    LeakCounter ~LeakCounter(juce LeakedObjectDetector<juce MultiTimerCallback>\n                                 LeakCounter *const this) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  const char *v4;\n  int v5;\n  juce String <span class=\"supfact\">tempDbgBuf</span>;\n  if (this->numObjects.value > Number) {\n    juce String String(&<span class=\"supfact\">tempDbgBuf</span>);\n    v1 = juce operator<<(&<span class=\"supfact\">tempDbgBuf</span>, String);\n    v2 = juce operator<<(v1, (unsigned int)this->numObjects.value);\n    v3 = juce operator<<(v2, String);\n    v4 = juce LeakedObjectDetector<juce MultiTimerCallback>\n    getLeakedObjectClassName();\n    juce operator<<(v3, v4);\n    juce Logger outputDebugString((juce Logger *)&<span class=\"supfact\">tempDbgBuf</span>,\n                                  (const juce String *)v4);\n    juce String ~String(&<span class=\"supfact\">tempDbgBuf</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_5B + Number, v5);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  juce Atomic<int> ~Atomic(&this->numObjects);\n}", "var": [{"name": "v6", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "tempDbgBuf", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}], "body_in_train": false}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/202a445d8e651d81d31c756aa9045ecff7a8f2f37851348495106510a18f79dd", "path_in_repo": "madeye/GRACE/coremu-0.1.1/qemu/bt-hci.o", "objdump": "00000000000024ee <bt_hci_read_bd_addr_rp>:\n    24ee:\t55                   \tpush   %rbp\n    24ef:\t48 89 e5             \tmov    %rsp,%rbp\n    24f2:\t48 83 ec 20          \tsub    $0x20,%rsp\n    24f6:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    24fa:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2501:\t00 00 \n    2503:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2507:\t31 c0                \txor    %eax,%eax\n    2509:\tc6 45 f1 00          \tmovb   $0x0,-0xf(%rbp)\n    250d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2511:\t0f b6 80 a4 13 00 00 \tmovzbl 0x13a4(%rax),%eax\n    2518:\t88 45 f2             \tmov    %al,-0xe(%rbp)\n    251b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    251f:\t0f b6 80 a5 13 00 00 \tmovzbl 0x13a5(%rax),%eax\n    2526:\t88 45 f3             \tmov    %al,-0xd(%rbp)\n    2529:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    252d:\t0f b6 80 a6 13 00 00 \tmovzbl 0x13a6(%rax),%eax\n    2534:\t88 45 f4             \tmov    %al,-0xc(%rbp)\n    2537:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    253b:\t0f b6 80 a7 13 00 00 \tmovzbl 0x13a7(%rax),%eax\n    2542:\t88 45 f5             \tmov    %al,-0xb(%rbp)\n    2545:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2549:\t0f b6 80 a8 13 00 00 \tmovzbl 0x13a8(%rax),%eax\n    2550:\t88 45 f6             \tmov    %al,-0xa(%rbp)\n    2553:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2557:\t0f b6 80 a9 13 00 00 \tmovzbl 0x13a9(%rax),%eax\n    255e:\t88 45 f7             \tmov    %al,-0x9(%rbp)\n    2561:\t48 8d 4d f1          \tlea    -0xf(%rbp),%rcx\n    2565:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2569:\tba 07 00 00 00       \tmov    $0x7,%edx\n    256e:\t48 89 ce             \tmov    %rcx,%rsi\n    2571:\t48 89 c7             \tmov    %rax,%rdi\n    2574:\te8 01 de ff ff       \tcallq  37a <bt_hci_event_complete>\n    2579:\t90                   \tnop\n    257a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    257e:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    2585:\t00 00 \n    2587:\t74 05                \tje     258e <bt_hci_read_bd_addr_rp+0xa0>\n    2589:\te8 00 00 00 00       \tcallq  258e <bt_hci_read_bd_addr_rp+0xa0>\n    258e:\tc9                   \tleaveq \n    258f:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall bt_hci_read_bd_addr_rp(_BYTE *a1) {\n  char <span class=\"supfact\">v2</span>[Number];\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  <span class=\"supfact\">v2</span>[Number] = Number;\n  <span class=\"supfact\">v2</span>[Number] = a1[Number];\n  <span class=\"supfact\">v2</span>[Number] = a1[Number];\n  <span class=\"supfact\">v2</span>[Number] = a1[Number];\n  <span class=\"supfact\">v2</span>[Number] = a1[Number];\n  <span class=\"supfact\">v2</span>[Number] = a1[Number];\n  <span class=\"supfact\">v2</span>[Number] = a1[Number];\n  bt_hci_event_complete((__int64)a1, <span class=\"supfact\">v2</span>, Number);\n  return __readfsqword(Number) ^ v3;\n}", "code_t": "void __cdecl bt_hci_read_bd_addr_rp(bt_hci_s *hci) {\n  read_bd_addr_rp <span class=\"supfact\">ba</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  <span class=\"supfact\">ba</span>.status = Number;\n  <span class=\"supfact\">ba</span>.bdaddr = hci->device.bd_addr;\n  bt_hci_event_complete(hci, &<span class=\"supfact\">ba</span>, Number);\n}", "var": [{"name": "v2", "type": "struct read_bd_addr_rp { uint8_t status; bdaddr_t bdaddr; }", "ref_name": "ba", "ref_type": "struct read_bd_addr_rp { uint8_t status; bdaddr_t bdaddr; }"}], "body_in_train": true}, {"repo_owner": "CarltonSemple", "repo_name": "seniordesign", "path": "CarltonSemple/seniordesign/dfa03bc57d1786da31ff7e2f8d59c1dfab726b85871cb864a67fd242a92722b0", "path_in_repo": "CarltonSemple/seniordesign/parrot/out/Unix-base/build/libressl/libressl-2.2.1/ssl/bs_cbs.o", "objdump": "0000000000000000 <CBS_get_asn1_uint64>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 50          \tsub    $0x50,%rsp\n   8:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n   c:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  10:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  17:\t00 00 \n  19:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  1d:\t31 c0                \txor    %eax,%eax\n  1f:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  23:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  27:\tba 02 00 00 00       \tmov    $0x2,%edx\n  2c:\t48 89 ce             \tmov    %rcx,%rsi\n  2f:\t48 89 c7             \tmov    %rax,%rdi\n  32:\te8 00 00 00 00       \tcallq  37 <CBS_get_asn1_uint64+0x37>\n  37:\t85 c0                \ttest   %eax,%eax\n  39:\t75 0a                \tjne    45 <CBS_get_asn1_uint64+0x45>\n  3b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40:\te9 e5 00 00 00       \tjmpq   12a <CBS_get_asn1_uint64+0x12a>\n  45:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  49:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  50:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  54:\t48 89 c7             \tmov    %rax,%rdi\n  57:\te8 00 00 00 00       \tcallq  5c <CBS_get_asn1_uint64+0x5c>\n  5c:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  60:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  64:\t48 89 c7             \tmov    %rax,%rdi\n  67:\te8 00 00 00 00       \tcallq  6c <CBS_get_asn1_uint64+0x6c>\n  6c:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  70:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  75:\t75 0a                \tjne    81 <CBS_get_asn1_uint64+0x81>\n  77:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  7c:\te9 a9 00 00 00       \tjmpq   12a <CBS_get_asn1_uint64+0x12a>\n  81:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  85:\t0f b6 00             \tmovzbl (%rax),%eax\n  88:\t84 c0                \ttest   %al,%al\n  8a:\t79 0a                \tjns    96 <CBS_get_asn1_uint64+0x96>\n  8c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  91:\te9 94 00 00 00       \tjmpq   12a <CBS_get_asn1_uint64+0x12a>\n  96:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  9a:\t0f b6 00             \tmovzbl (%rax),%eax\n  9d:\t84 c0                \ttest   %al,%al\n  9f:\t75 1d                \tjne    be <CBS_get_asn1_uint64+0xbe>\n  a1:\t48 83 7d d8 01       \tcmpq   $0x1,-0x28(%rbp)\n  a6:\t76 16                \tjbe    be <CBS_get_asn1_uint64+0xbe>\n  a8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  ac:\t48 83 c0 01          \tadd    $0x1,%rax\n  b0:\t0f b6 00             \tmovzbl (%rax),%eax\n  b3:\t84 c0                \ttest   %al,%al\n  b5:\t78 07                \tjs     be <CBS_get_asn1_uint64+0xbe>\n  b7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  bc:\teb 6c                \tjmp    12a <CBS_get_asn1_uint64+0x12a>\n  be:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n  c5:\t00 \n  c6:\teb 53                \tjmp    11b <CBS_get_asn1_uint64+0x11b>\n  c8:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  cc:\t48 8b 00             \tmov    (%rax),%rax\n  cf:\t48 c1 e8 38          \tshr    $0x38,%rax\n  d3:\t48 85 c0             \ttest   %rax,%rax\n  d6:\t74 07                \tje     df <CBS_get_asn1_uint64+0xdf>\n  d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  dd:\teb 4b                \tjmp    12a <CBS_get_asn1_uint64+0x12a>\n  df:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  e3:\t48 8b 00             \tmov    (%rax),%rax\n  e6:\t48 c1 e0 08          \tshl    $0x8,%rax\n  ea:\t48 89 c2             \tmov    %rax,%rdx\n  ed:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  f1:\t48 89 10             \tmov    %rdx,(%rax)\n  f4:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  f8:\t48 8b 10             \tmov    (%rax),%rdx\n  fb:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  ff:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 103:\t48 01 c8             \tadd    %rcx,%rax\n 106:\t0f b6 00             \tmovzbl (%rax),%eax\n 109:\t0f b6 c0             \tmovzbl %al,%eax\n 10c:\t48 09 c2             \tor     %rax,%rdx\n 10f:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 113:\t48 89 10             \tmov    %rdx,(%rax)\n 116:\t48 83 45 c8 01       \taddq   $0x1,-0x38(%rbp)\n 11b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 11f:\t48 3b 45 d8          \tcmp    -0x28(%rbp),%rax\n 123:\t72 a3                \tjb     c8 <CBS_get_asn1_uint64+0xc8>\n 125:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 12a:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n 12e:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n 135:\t00 00 \n 137:\t74 05                \tje     13e <CBS_get_asn1_uint64+0x13e>\n 139:\te8 00 00 00 00       \tcallq  13e <CBS_get_asn1_uint64+0x13e>\n 13e:\tc9                   \tleaveq \n 13f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall CBS_get_asn1_uint64(__int64 a1, _QWORD *a2) {\n  unsigned __int64 i;\n  char *v4;\n  unsigned __int64 v5;\n  char <span class=\"supfact\">v6</span>[Number];\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  if (!(unsigned int)CBS_get_asn1(a1, <span class=\"supfact\">v6</span>, Number))\n    return Number L;\n  *a2 = Number L;\n  v4 = (char *)CBS_data((__int64)<span class=\"supfact\">v6</span>);\n  v5 = CBS_len((__int64)<span class=\"supfact\">v6</span>);\n  if (!v5)\n    return Number L;\n  if (*v4 < Number)\n    return Number L;\n  if (!*v4 && v5 > Number && v4[Number] >= Number)\n    return Number L;\n  for (i = Number L; i < v5; ++i) {\n    if (HIBYTE(*a2))\n      return Number L;\n    *a2 <<= Number;\n    *a2 |= (unsigned __int8)v4[i];\n  }\n  return Number L;\n}", "code_t": "int __cdecl CBS_get_asn1_uint64(CBS *cbs, uint64_t *out) {\n  size_t i;\n  const uint8_t *data;\n  size_t len;\n  CBS <span class=\"supfact\">bytes</span>;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  if (!CBS_get_asn1(cbs, &<span class=\"supfact\">bytes</span>, Number))\n    return Number;\n  *out = Number L;\n  data = CBS_data(&<span class=\"supfact\">bytes</span>);\n  len = CBS_len(&<span class=\"supfact\">bytes</span>);\n  if (!len)\n    return Number;\n  if (*(char *)data < Number)\n    return Number;\n  if (!*data && len > Number && *((char *)data + Number) >= Number)\n    return Number;\n  for (i = Number L; i < len; ++i) {\n    if (HIBYTE(*out))\n      return Number;\n    *out <<= Number;\n    *out |= data[i];\n  }\n  return Number;\n}", "var": [{"name": "v6", "type": "struct CBS { const uint8_t * data; size_t initial_len; size_t len; }", "ref_name": "bytes", "ref_type": "struct CBS { const uint8_t * data; size_t initial_len; size_t len; }"}], "body_in_train": true}, {"repo_owner": "piyawad", "repo_name": "test1", "path": "piyawad/test1/f4b64a7e433ad86f3e406cab9c7ae2158d2885014fd131ea0bdb501cfdf3af18", "path_in_repo": "piyawad/test1/branches/11/res/pjproject/pjsip/build/output/pjsua-lib-x86_64-unknown-linux-gnu/pjsua_acc.o", "objdump": "0000000000004895 <update_rfc5626_status>:\n    4895:\t55                   \tpush   %rbp\n    4896:\t48 89 e5             \tmov    %rsp,%rbp\n    4899:\t48 83 ec 30          \tsub    $0x30,%rsp\n    489d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    48a1:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    48a5:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    48ac:\t00 \n    48ad:\t48 c7 45 e8 08 00 00 \tmovq   $0x8,-0x18(%rbp)\n    48b4:\t00 \n    48b5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    48b9:\t8b 80 b8 08 00 00    \tmov    0x8b8(%rax),%eax\n    48bf:\t85 c0                \ttest   %eax,%eax\n    48c1:\t0f 84 8b 00 00 00    \tje     4952 <update_rfc5626_status+0xbd>\n    48c7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    48cb:\t48 8b 80 b8 11 00 00 \tmov    0x11b8(%rax),%rax\n    48d2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    48d6:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    48db:\t75 10                \tjne    48ed <update_rfc5626_status+0x58>\n    48dd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    48e1:\tc7 80 b8 08 00 00 03 \tmovl   $0x3,0x8b8(%rax)\n    48e8:\t00 00 00 \n    48eb:\teb 66                \tjmp    4953 <update_rfc5626_status+0xbe>\n    48ed:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    48f4:\teb 40                \tjmp    4936 <update_rfc5626_status+0xa1>\n    48f6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    48f9:\t48 83 c0 04          \tadd    $0x4,%rax\n    48fd:\t48 c1 e0 04          \tshl    $0x4,%rax\n    4901:\t48 89 c2             \tmov    %rax,%rdx\n    4904:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4908:\t48 01 d0             \tadd    %rdx,%rax\n    490b:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n    490f:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    4913:\t48 89 c6             \tmov    %rax,%rsi\n    4916:\t48 89 d7             \tmov    %rdx,%rdi\n    4919:\te8 00 00 00 00       \tcallq  491e <update_rfc5626_status+0x89>\n    491e:\t85 c0                \ttest   %eax,%eax\n    4920:\t75 10                \tjne    4932 <update_rfc5626_status+0x9d>\n    4922:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4926:\tc7 80 b8 08 00 00 02 \tmovl   $0x2,0x8b8(%rax)\n    492d:\t00 00 00 \n    4930:\teb 21                \tjmp    4953 <update_rfc5626_status+0xbe>\n    4932:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    4936:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    493a:\t8b 40 40             \tmov    0x40(%rax),%eax\n    493d:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    4940:\t72 b4                \tjb     48f6 <update_rfc5626_status+0x61>\n    4942:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4946:\tc7 80 b8 08 00 00 03 \tmovl   $0x3,0x8b8(%rax)\n    494d:\t00 00 00 \n    4950:\teb 01                \tjmp    4953 <update_rfc5626_status+0xbe>\n    4952:\t90                   \tnop\n    4953:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4957:\t8b 80 b8 08 00 00    \tmov    0x8b8(%rax),%eax\n    495d:\t83 f8 02             \tcmp    $0x2,%eax\n    4960:\t74 24                \tje     4986 <update_rfc5626_status+0xf1>\n    4962:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n    4966:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    496a:\t48 8b 90 40 07 00 00 \tmov    0x740(%rax),%rdx\n    4971:\t48 8b 80 38 07 00 00 \tmov    0x738(%rax),%rax\n    4978:\t48 89 81 48 07 00 00 \tmov    %rax,0x748(%rcx)\n    497f:\t48 89 91 50 07 00 00 \tmov    %rdx,0x750(%rcx)\n    4986:\te8 00 00 00 00       \tcallq  498b <update_rfc5626_status+0xf6>\n    498b:\t83 f8 03             \tcmp    $0x3,%eax\n    498e:\t7e 3e                \tjle    49ce <update_rfc5626_status+0x139>\n    4990:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4994:\t8b 80 b8 08 00 00    \tmov    0x8b8(%rax),%eax\n    499a:\t83 f8 02             \tcmp    $0x2,%eax\n    499d:\t75 07                \tjne    49a6 <update_rfc5626_status+0x111>\n    499f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    49a4:\teb 05                \tjmp    49ab <update_rfc5626_status+0x116>\n    49a6:\tba 00 00 00 00       \tmov    $0x0,%edx\n    49ab:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    49af:\t8b 80 14 07 00 00    \tmov    0x714(%rax),%eax\n    49b5:\t48 89 d1             \tmov    %rdx,%rcx\n    49b8:\t89 c2                \tmov    %eax,%edx\n    49ba:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    49bf:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    49c4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    49c9:\te8 00 00 00 00       \tcallq  49ce <update_rfc5626_status+0x139>\n    49ce:\t90                   \tnop\n    49cf:\tc9                   \tleaveq \n    49d0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall update_rfc5626_status(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 result;\n  const char *v4;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 v6;\n  unsigned int i;\n  <span class=\"supfact\">v5</span>[Number] = (__int64)String;\n  <span class=\"supfact\">v5</span>[Number] = Number L;\n  if (*(_DWORD *)(a1 + Number)) {\n    v6 = *(_QWORD *)(a2 + Number);\n    if (v6) {\n      for (i = Number; i < *(_DWORD *)(v6 + Number); ++i) {\n        if (!(unsigned int)pj_stricmp(Number * (i + Number L) + v6 + Number,\n                                      <span class=\"supfact\">v5</span>)) {\n          *(_DWORD *)(a1 + Number) = Number;\n          goto LABEL_10;\n        }\n      }\n      *(_DWORD *)(a1 + Number) = Number;\n    } else {\n      *(_DWORD *)(a1 + Number) = Number;\n    }\n  }\nLABEL_10:\n  if (*(_DWORD *)(a1 + Number) != Number) {\n    v2 = *(_QWORD *)(a1 + Number);\n    *(_QWORD *)(a1 + Number) = *(_QWORD *)(a1 + Number);\n    *(_QWORD *)(a1 + Number) = v2;\n  }\n  result = pj_log_get_level();\n  if ((int)result > Number) {\n    if (*(_DWORD *)(a1 + Number) == Number)\n      v4 = String;\n    else\n      v4 = String;\n    result = pj_log_4(String, String, *(unsigned int *)(a1 + Number), v4);\n  }\n  return result;\n}", "code_t": "void __cdecl update_rfc5626_status(pjsua_acc_0 *acc, pjsip_rx_data_0 *rdata) {\n  pj_ssize_t v2;\n  const char *v3;\n  pj_str_t_0 <span class=\"supfact\">STR_OUTBOUND</span>;\n  pjsip_require_hdr *hreq;\n  unsigned int i;\n  <span class=\"supfact\">STR_OUTBOUND</span>.ptr = String;\n  <span class=\"supfact\">STR_OUTBOUND</span>.slen = Number L;\n  if (acc->rfc5626_status) {\n    hreq = rdata->msg_info.require;\n    if (hreq) {\n      for (i = Number; i < hreq->count; ++i) {\n        if (!(unsigned int)pj_stricmp(&hreq->values[i],\n                                      &<span class=\"supfact\">STR_OUTBOUND</span>)) {\n          acc->rfc5626_status = Number;\n          goto on_return;\n        }\n      }\n      acc->rfc5626_status = Number;\n    } else {\n      acc->rfc5626_status = Number;\n    }\n  }\non_return:\n  if (acc->rfc5626_status != Number) {\n    v2 = acc->contact.slen;\n    acc->reg_contact.ptr = acc->contact.ptr;\n    acc->reg_contact.slen = v2;\n  }\n  if ((int)pj_log_get_level() > Number) {\n    if (acc->rfc5626_status == Number)\n      v3 = String;\n    else\n      v3 = String;\n    pj_log_4(String, String, (unsigned int)acc->index, v3);\n  }\n}", "var": [{"name": "v5", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "STR_OUTBOUND", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "ardax", "repo_name": "Pellet", "path": "ardax/Pellet/09647a44e76be3cea0c2f9a7241b9e63370114795cc5f1de0c47077caeb8eb9e", "path_in_repo": "ardax/Pellet//CompletionStrategy.o", "objdump": "0000000000004d6e <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv>:\n    4d6e:\t55                   \tpush   %rbp\n    4d6f:\t48 89 e5             \tmov    %rsp,%rbp\n    4d72:\t48 83 ec 40          \tsub    $0x40,%rsp\n    4d76:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    4d7a:\te8 00 00 00 00       \tcallq  4d7f <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x11>\n    4d7f:\t84 c0                \ttest   %al,%al\n    4d81:\t74 4a                \tje     4dcd <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x5f>\n    4d83:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4d89 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x1b>\n    4d89:\t83 c0 01             \tadd    $0x1,%eax\n    4d8c:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 4d92 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x24>\n    4d92:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    4d99:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4d9f <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x31>\n    4d9f:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    4da2:\t7d 15                \tjge    4db9 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x4b>\n    4da4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4da9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4dae:\te8 00 00 00 00       \tcallq  4db3 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x45>\n    4db3:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    4db7:\teb e0                \tjmp    4d99 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x2b>\n    4db9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4dbe:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4dc3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4dc8:\te8 00 00 00 00       \tcallq  4dcd <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x5f>\n    4dcd:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4dd1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4dd5:\t48 05 a0 00 00 00    \tadd    $0xa0,%rax\n    4ddb:\t48 89 c7             \tmov    %rax,%rdi\n    4dde:\te8 00 00 00 00       \tcallq  4de3 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x75>\n    4de3:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    4de7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4deb:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4def:\t48 05 a0 00 00 00    \tadd    $0xa0,%rax\n    4df5:\t48 89 c7             \tmov    %rax,%rdi\n    4df8:\te8 00 00 00 00       \tcallq  4dfd <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x8f>\n    4dfd:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4e01:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    4e05:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    4e09:\t48 89 d6             \tmov    %rdx,%rsi\n    4e0c:\t48 89 c7             \tmov    %rax,%rdi\n    4e0f:\te8 00 00 00 00       \tcallq  4e14 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0xa6>\n    4e14:\t84 c0                \ttest   %al,%al\n    4e16:\t0f 84 88 00 00 00    \tje     4ea4 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x136>\n    4e1c:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    4e20:\t48 89 c7             \tmov    %rax,%rdi\n    4e23:\te8 00 00 00 00       \tcallq  4e28 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0xba>\n    4e28:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4e2c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    4e30:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4e34:\t48 8b 00             \tmov    (%rax),%rax\n    4e37:\t48 83 c0 60          \tadd    $0x60,%rax\n    4e3b:\t48 8b 10             \tmov    (%rax),%rdx\n    4e3e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4e42:\t48 89 c7             \tmov    %rax,%rdi\n    4e45:\tff d2                \tcallq  *%rdx\n    4e47:\t83 f0 01             \txor    $0x1,%eax\n    4e4a:\t84 c0                \ttest   %al,%al\n    4e4c:\t75 3e                \tjne    4e8c <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x11e>\n    4e4e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4e52:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    4e56:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4e5a:\t48 8b 00             \tmov    (%rax),%rax\n    4e5d:\t48 05 00 01 00 00    \tadd    $0x100,%rax\n    4e63:\t48 8b 08             \tmov    (%rax),%rcx\n    4e66:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    4e6a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4e6e:\t48 89 d6             \tmov    %rdx,%rsi\n    4e71:\t48 89 c7             \tmov    %rax,%rdi\n    4e74:\tff d1                \tcallq  *%rcx\n    4e76:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4e7a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4e7e:\t48 89 c7             \tmov    %rax,%rdi\n    4e81:\te8 00 00 00 00       \tcallq  4e86 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x118>\n    4e86:\t84 c0                \ttest   %al,%al\n    4e88:\t75 19                \tjne    4ea3 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x135>\n    4e8a:\teb 01                \tjmp    4e8d <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x11f>\n    4e8c:\t90                   \tnop\n    4e8d:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    4e91:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4e96:\t48 89 c7             \tmov    %rax,%rdi\n    4e99:\te8 00 00 00 00       \tcallq  4e9e <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x130>\n    4e9e:\te9 44 ff ff ff       \tjmpq   4de7 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x79>\n    4ea3:\t90                   \tnop\n    4ea4:\te8 00 00 00 00       \tcallq  4ea9 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x13b>\n    4ea9:\t84 c0                \ttest   %al,%al\n    4eab:\t74 4a                \tje     4ef7 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x189>\n    4ead:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    4eb4:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4eba <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x14c>\n    4eba:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n    4ebd:\t7d 15                \tjge    4ed4 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x166>\n    4ebf:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4ec4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4ec9:\te8 00 00 00 00       \tcallq  4ece <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x160>\n    4ece:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n    4ed2:\teb e0                \tjmp    4eb4 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x146>\n    4ed4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4ed9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4ede:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4ee3:\te8 00 00 00 00       \tcallq  4ee8 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x17a>\n    4ee8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4eee <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x180>\n    4eee:\t83 e8 01             \tsub    $0x1,%eax\n    4ef1:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 4ef7 <_ZN18CompletionStrategy28applyChooseRuleOnIndividualsEv+0x189>\n    4ef7:\t90                   \tnop\n    4ef8:\tc9                   \tleaveq \n    4ef9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall CompletionStrategy\napplyChooseRuleOnIndividuals(CompletionStrategy *this) {\n  __int64 result;\n  __int64 <span class=\"supfact\">j</span>;\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  __int64 v4;\n  int k;\n  int i;\n  if ((unsigned __int8)PARAMS_PRINT_DEBUGINFO_INHTML()) {\n    ++g_iCommentIndent;\n    for (i = Number; i < g_iCommentIndent; ++i)\n      printf(String);\n    printf(String, String);\n  }\n  for (<span class=\"supfact\">j</span> =\n           std map<_ExpressionNode_ *, Node *, strCmpExprNode,\n                   std allocator<std pair<_ExpressionNode_ *const, Node *>>>\n               begin(*((_QWORD *)this + Number) + Number L);\n       ; std _Rb_tree_iterator<std pair<_ExpressionNode_ *const, Node *>>\n       operator++(&<span class=\"supfact\">j</span>, Number L)) {\n    <span class=\"supfact\">v3</span>[Number] =\n        std map<_ExpressionNode_ *, Node *, strCmpExprNode,\n                std allocator<std pair<_ExpressionNode_ *const, Node *>>>\n        end(*((_QWORD *)this + Number) + Number L);\n    if (!(unsigned __int8)std operator!=(&<span class=\"supfact\">j</span>,\n                                         <span class=\"supfact\">v3</span>))\n      break;\n    v4 = *(\n        _QWORD\n            *)(std _Rb_tree_iterator<std pair<_ExpressionNode_ *const, Node *>>\n               operator->(&<span class=\"supfact\">j</span>) +\n               Number);\n    if ((*(unsigned __int8(__fastcall **)(__int64))(*(_QWORD *)v4 + Number L))(\n            v4) == Number) {\n      <span class=\"supfact\">v3</span>[Number] = v4;\n      (*(void(__fastcall **)(CompletionStrategy *, __int64))(\n          *(_QWORD *)this + Number L))(this, v4);\n      if ((unsigned __int8)ABox isClosed(*((ABox **)this + Number)))\n        break;\n    }\n  }\n  result = PARAMS_PRINT_DEBUGINFO_INHTML();\n  if ((_BYTE)result) {\n    for (k = Number; k < g_iCommentIndent; ++k)\n      printf(String);\n    printf(String);\n    result = (unsigned int)--g_iCommentIndent;\n  }\n  return result;\n}", "code_t": "void __cdecl CompletionStrategy\napplyChooseRuleOnIndividuals(CompletionStrategy *const this) {\n  std map<_ExpressionNode_ *, Node *, strCmpExprNode,\n          std allocator<std pair<_ExpressionNode_ *const, Node *>>>\n      iterator <span class=\"supfact\">i_0</span>;\n  std _Rb_tree_iterator<std pair<_ExpressionNode_ *const, Node *>> _Self\n      <span class=\"supfact\">__y</span>;\n  Individual *pNode;\n  Node *pN;\n  int i_1;\n  int i;\n  if ((unsigned __int8)PARAMS_PRINT_DEBUGINFO_INHTML()) {\n    ++g_iCommentIndent;\n    for (i = Number; i < g_iCommentIndent; ++i)\n      printf(String);\n    printf(String, String);\n  }\n  for (<span class=\"supfact\">i_0</span>._M_node =\n           std map<_ExpressionNode_ *, Node *, strCmpExprNode,\n                   std allocator<std pair<_ExpressionNode_ *const, Node *>>>\n               begin(&this->m_pABox->m_mNodes)\n                   ._M_node;\n       ; std _Rb_tree_iterator<std pair<_ExpressionNode_ *const, Node *>>\n       operator++(&<span class=\"supfact\">i_0</span>, Number)) {\n    <span class=\"supfact\">__y</span>._M_node =\n        std map<_ExpressionNode_ *, Node *, strCmpExprNode,\n                std allocator<std pair<_ExpressionNode_ *const, Node *>>>\n            end(&this->m_pABox->m_mNodes)._M_node;\n    if (!std operator!=(&<span class=\"supfact\">i_0</span>, &<span class=\"supfact\">__y</span>))\n      break;\n    pN = std _Rb_tree_iterator<std pair<_ExpressionNode_ *const, Node *>>\n         operator->(&<span class=\"supfact\">i_0</span>)->second;\n    if ((*(unsigned __int8(__fastcall **)(Node *))(*(_QWORD *)pN + Number L))(\n            pN) == Number) {\n      pNode = pN;\n      (*((void(__fastcall **)(CompletionStrategy *const,\n                              Node *))this->_vptr_CompletionStrategy +\n         Number))(this, pN);\n      if ((unsigned __int8)ABox isClosed(this->m_pABox))\n        break;\n    }\n  }\n  if ((unsigned __int8)PARAMS_PRINT_DEBUGINFO_INHTML()) {\n    for (i_1 = Number; i_1 < g_iCommentIndent; ++i_1)\n      printf(String);\n    printf(String);\n    --g_iCommentIndent;\n  }\n}", "var": [{"name": "v3", "type": "__unk__", "ref_name": "__y", "ref_type": "struct std::_Rb_tree_iterator<std::pair<_ExpressionNode_* const,Node*> >::_Self { std::_Rb_tree_iterator<std::pair<_ExpressionNode_* const,Node*> >::_Base_ptr _M_node; }"}, {"name": "j", "type": "__unk__", "ref_name": "i_0", "ref_type": "struct std::map<_ExpressionNode_*,Node*,strCmpExprNode,std::allocator<std::pair<_ExpressionNode_* const,Node*> > >::iterator { std::_Rb_tree_iterator<std::pair<_ExpressionNode_* const,Node*> >::_Base_ptr _M_node; }"}], "body_in_train": false}, {"repo_owner": "sconklin", "repo_name": "ltp-tools", "path": "sconklin/ltp-tools/c368c9d5b6721dcb982f6e770501eb1135677bc1c874154a7d489251e5223c5d", "path_in_repo": "sconklin/ltp-tools/ltp-full-20110915/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-4.run-test", "objdump": "0000000000401549 <thread_fn>:\n  401549:\t55                   \tpush   %rbp\n  40154a:\t48 89 e5             \tmov    %rsp,%rbp\n  40154d:\t53                   \tpush   %rbx\n  40154e:\t48 83 ec 48          \tsub    $0x48,%rsp\n  401552:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  401556:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40155a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40155e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401562:\t8b 40 20             \tmov    0x20(%rax),%eax\n  401565:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40156a:\t89 c1                \tmov    %eax,%ecx\n  40156c:\td3 e2                \tshl    %cl,%edx\n  40156e:\t89 d0                \tmov    %edx,%eax\n  401570:\t48 98                \tcltq   \n  401572:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  401576:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  40157a:\t48 89 c2             \tmov    %rax,%rdx\n  40157d:\tbe 08 00 00 00       \tmov    $0x8,%esi\n  401582:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401587:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40158c:\te8 1f fb ff ff       \tcallq  4010b0 <sched_setaffinity@plt>\n  401591:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  401594:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  401598:\t79 57                \tjns    4015f1 <thread_fn+0xa8>\n  40159a:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40159d:\t89 c7                \tmov    %eax,%edi\n  40159f:\te8 bc fb ff ff       \tcallq  401160 <strerror@plt>\n  4015a4:\t48 89 c2             \tmov    %rax,%rdx\n  4015a7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4015ab:\t8b 30                \tmov    (%rax),%esi\n  4015ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4015b1:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n  4015b5:\t48 8b 05 e4 3c 00 00 \tmov    0x3ce4(%rip),%rax        # 4052a0 <stderr@@GLIBC_2.2.5>\n  4015bc:\t52                   \tpush   %rdx\n  4015bd:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  4015c0:\t52                   \tpush   %rdx\n  4015c1:\t41 89 f1             \tmov    %esi,%r9d\n  4015c4:\t49 89 c8             \tmov    %rcx,%r8\n  4015c7:\tb9 6c 00 00 00       \tmov    $0x6c,%ecx\n  4015cc:\tba 60 31 40 00       \tmov    $0x403160,%edx\n  4015d1:\tbe 90 31 40 00       \tmov    $0x403190,%esi\n  4015d6:\t48 89 c7             \tmov    %rax,%rdi\n  4015d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4015de:\te8 fd fa ff ff       \tcallq  4010e0 <fprintf@plt>\n  4015e3:\t48 83 c4 10          \tadd    $0x10,%rsp\n  4015e7:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  4015ec:\te8 4f fb ff ff       \tcallq  401140 <exit@plt>\n  4015f1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4015f5:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  4015f8:\t89 c3                \tmov    %eax,%ebx\n  4015fa:\te8 11 fb ff ff       \tcallq  401110 <pthread_self@plt>\n  4015ff:\t89 da                \tmov    %ebx,%edx\n  401601:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401606:\t48 89 c7             \tmov    %rax,%rdi\n  401609:\te8 b1 fc ff ff       \tcallq  4012bf <test_set_priority>\n  40160e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401612:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  401616:\te8 67 fc ff ff       \tcallq  401282 <seconds_read>\n  40161b:\tf2 0f 10 0d 05 3d 00 \tmovsd  0x3d05(%rip),%xmm1        # 405328 <base_time>\n  401622:\t00 \n  401623:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n  401627:\t48 8b 05 52 3c 00 00 \tmov    0x3c52(%rip),%rax        # 405280 <__TMC_END__>\n  40162e:\t48 89 da             \tmov    %rbx,%rdx\n  401631:\tbe d3 31 40 00       \tmov    $0x4031d3,%esi\n  401636:\t48 89 c7             \tmov    %rax,%rdi\n  401639:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40163e:\te8 9d fa ff ff       \tcallq  4010e0 <fprintf@plt>\n  401643:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401647:\t8b 08                \tmov    (%rax),%ecx\n  401649:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40164d:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n  401651:\t48 8b 05 48 3c 00 00 \tmov    0x3c48(%rip),%rax        # 4052a0 <stderr@@GLIBC_2.2.5>\n  401658:\tbe f0 31 40 00       \tmov    $0x4031f0,%esi\n  40165d:\t48 89 c7             \tmov    %rax,%rdi\n  401660:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401665:\te8 76 fa ff ff       \tcallq  4010e0 <fprintf@plt>\n  40166a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40166e:\tc7 40 2c 00 00 00 00 \tmovl   $0x0,0x2c(%rax)\n  401675:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  40167c:\t00 \n  40167d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401681:\t8b 40 08             \tmov    0x8(%rax),%eax\n  401684:\t69 c0 40 42 0f 00    \timul   $0xf4240,%eax,%eax\n  40168a:\t48 98                \tcltq   \n  40168c:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  401690:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401694:\t8b 00                \tmov    (%rax),%eax\n  401696:\t85 c0                \ttest   %eax,%eax\n  401698:\t0f 85 a2 00 00 00    \tjne    401740 <thread_fn+0x1f7>\n  40169e:\tbf 00 53 40 00       \tmov    $0x405300,%edi\n  4016a3:\te8 e8 fa ff ff       \tcallq  401190 <pthread_mutex_lock@plt>\n  4016a8:\te9 93 00 00 00       \tjmpq   401740 <thread_fn+0x1f7>\n  4016ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4016b1:\t48 83 c0 2c          \tadd    $0x2c,%rax\n  4016b5:\t48 89 c6             \tmov    %rax,%rsi\n  4016b8:\tbf 05 00 00 00       \tmov    $0x5,%edi\n  4016bd:\te8 2a fe ff ff       \tcallq  4014ec <do_work>\n  4016c2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4016c6:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4016c9:\t85 c0                \ttest   %eax,%eax\n  4016cb:\t75 02                \tjne    4016cf <thread_fn+0x186>\n  4016cd:\teb 71                \tjmp    401740 <thread_fn+0x1f7>\n  4016cf:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4016d3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4016d8:\t48 89 c7             \tmov    %rax,%rdi\n  4016db:\te8 90 f9 ff ff       \tcallq  401070 <nanosleep@plt>\n  4016e0:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  4016e3:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  4016e7:\t79 57                \tjns    401740 <thread_fn+0x1f7>\n  4016e9:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4016ec:\t89 c7                \tmov    %eax,%edi\n  4016ee:\te8 6d fa ff ff       \tcallq  401160 <strerror@plt>\n  4016f3:\t48 89 c2             \tmov    %rax,%rdx\n  4016f6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4016fa:\t8b 30                \tmov    (%rax),%esi\n  4016fc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401700:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n  401704:\t48 8b 05 95 3b 00 00 \tmov    0x3b95(%rip),%rax        # 4052a0 <stderr@@GLIBC_2.2.5>\n  40170b:\t52                   \tpush   %rdx\n  40170c:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  40170f:\t52                   \tpush   %rdx\n  401710:\t41 89 f1             \tmov    %esi,%r9d\n  401713:\t49 89 c8             \tmov    %rcx,%r8\n  401716:\tb9 83 00 00 00       \tmov    $0x83,%ecx\n  40171b:\tba 60 31 40 00       \tmov    $0x403160,%edx\n  401720:\tbe 10 32 40 00       \tmov    $0x403210,%esi\n  401725:\t48 89 c7             \tmov    %rax,%rdi\n  401728:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40172d:\te8 ae f9 ff ff       \tcallq  4010e0 <fprintf@plt>\n  401732:\t48 83 c4 10          \tadd    $0x10,%rsp\n  401736:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40173b:\te8 00 fa ff ff       \tcallq  401140 <exit@plt>\n  401740:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401744:\t8b 40 04             \tmov    0x4(%rax),%eax\n  401747:\t85 c0                \ttest   %eax,%eax\n  401749:\t0f 84 5e ff ff ff    \tje     4016ad <thread_fn+0x164>\n  40174f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401753:\t8b 00                \tmov    (%rax),%eax\n  401755:\t85 c0                \ttest   %eax,%eax\n  401757:\t75 0a                \tjne    401763 <thread_fn+0x21a>\n  401759:\tbf 00 53 40 00       \tmov    $0x405300,%edi\n  40175e:\te8 9d f9 ff ff       \tcallq  401100 <pthread_mutex_unlock@plt>\n  401763:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401767:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  40176b:\te8 12 fb ff ff       \tcallq  401282 <seconds_read>\n  401770:\tf2 0f 10 0d b0 3b 00 \tmovsd  0x3bb0(%rip),%xmm1        # 405328 <base_time>\n  401777:\t00 \n  401778:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n  40177c:\t48 8b 05 fd 3a 00 00 \tmov    0x3afd(%rip),%rax        # 405280 <__TMC_END__>\n  401783:\t48 89 da             \tmov    %rbx,%rdx\n  401786:\tbe 4c 32 40 00       \tmov    $0x40324c,%esi\n  40178b:\t48 89 c7             \tmov    %rax,%rdi\n  40178e:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401793:\te8 48 f9 ff ff       \tcallq  4010e0 <fprintf@plt>\n  401798:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40179d:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n  4017a1:\tc9                   \tleaveq \n  4017a2:\tc3                   \tretq   ", "code_s": "void *__fastcall thread_fn(void *a1) {\n  char *v1;\n  unsigned int v2;\n  pthread_t v3;\n  const char *v4;\n  double v5;\n  char *v6;\n  const char *v7;\n  double v8;\n  __int64 v10;\n  struct timespec <span class=\"supfact\">requested_time</span>;\n  int errnum;\n  unsigned int *v13;\n  v13 = (unsigned int *)a1;\n  v10 = Number << *((_DWORD *)a1 + Number);\n  errnum = sched_setaffinity(Number, Number, (const cpu_set_t *)&v10);\n  if (errnum < Number) {\n    v1 = strerror(errnum);\n    fprintf(stderr, String, String, Number L, *((const char **)v13 + Number),\n            *v13, (unsigned int)errnum, v1);\n    exit(Number);\n  }\n  v2 = v13[Number];\n  v3 = pthread_self();\n  test_set_priority(v3, Number, v2);\n  v4 = (const char *)*((_QWORD *)v13 + Number);\n  v5 = seconds_read();\n  fprintf(_bss_start, String, v5 - *(double *)&base_time, v4);\n  fprintf(stderr, String, *((const char **)v13 + Number), *v13);\n  v13[Number] = Number;\n  <span class=\"supfact\">requested_time</span>.tv_sec = Number L;\n  <span class=\"supfact\">requested_time</span>.tv_nsec = (int)(Number * v13[Number]);\n  if (!*v13)\n    pthread_mutex_lock(&mutex1);\n  while (!v13[Number]) {\n    do_work(Number, v13 + Number);\n    if (v13[Number]) {\n      errnum = nanosleep(&<span class=\"supfact\">requested_time</span>, Number L);\n      if (errnum < Number) {\n        v6 = strerror(errnum);\n        fprintf(stderr, String, String, Number L,\n                *((const char **)v13 + Number), *v13, (unsigned int)errnum, v6);\n        exit(Number);\n      }\n    }\n  }\n  if (!*v13)\n    pthread_mutex_unlock(&mutex1);\n  v7 = (const char *)*((_QWORD *)v13 + Number);\n  v8 = seconds_read();\n  fprintf(_bss_start, String, v8 - *(double *)&base_time, v7);\n  return Number L;\n}", "code_t": "void *__cdecl thread_fn(void *param) {\n  char *v1;\n  int v2;\n  pthread_t v3;\n  const char *v4;\n  double v5;\n  char *v6;\n  const char *v7;\n  double v8;\n  unsigned __int64 mask;\n  timespec <span class=\"supfact\">ts</span>;\n  int rc;\n  thread_param *tp;\n  tp = (thread_param *)param;\n  mask = Number << *((_DWORD *)param + Number);\n  rc = sched_setaffinity(Number, Number, (const cpu_set_t *)&mask);\n  if (rc < Number) {\n    v1 = strerror(rc);\n    fprintf(stderr, String, String, Number L, tp->name, (unsigned int)tp->index,\n            (unsigned int)rc, v1);\n    exit(Number);\n  }\n  v2 = tp->priority;\n  v3 = pthread_self();\n  test_set_priority(v3, Number, v2);\n  v4 = tp->name;\n  v5 = seconds_read();\n  fprintf(_bss_start, String, v5 - base_time, v4);\n  fprintf(stderr, String, tp->name, (unsigned int)tp->index);\n  tp->progress = Number;\n  <span class=\"supfact\">ts</span>.tv_sec = Number L;\n  <span class=\"supfact\">ts</span>.tv_nsec = Number * tp->sleep_ms;\n  if (!tp->index)\n    pthread_mutex_lock(&mutex1);\n  while (!tp->stop) {\n    do_work(Number, &tp->progress);\n    if (tp->sleep_ms) {\n      rc = nanosleep(&<span class=\"supfact\">ts</span>, Number L);\n      if (rc < Number) {\n        v6 = strerror(rc);\n        fprintf(stderr, String, String, Number L, tp->name,\n                (unsigned int)tp->index, (unsigned int)rc, v6);\n        exit(Number);\n      }\n    }\n  }\n  if (!tp->index)\n    pthread_mutex_unlock(&mutex1);\n  v7 = tp->name;\n  v8 = seconds_read();\n  fprintf(_bss_start, String, v8 - base_time, v7);\n  return Number L;\n}", "var": [{"name": "requested_time", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "lawnn", "repo_name": "android_kernel_sharp_msm8996", "path": "lawnn/android_kernel_sharp_msm8996/dd85a5a2182283790ebb2cc01abfb3defb7568c78ea41ed18bb875532849abe6", "path_in_repo": "lawnn/android_kernel_sharp_msm8996/tools/perf/builtin-kvm.o", "objdump": "0000000000001ef4 <show_timeofday>:\n    1ef4:\t55                   \tpush   %rbp\n    1ef5:\t48 89 e5             \tmov    %rsp,%rbp\n    1ef8:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n    1eff:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1f06:\t00 00 \n    1f08:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1f0c:\t31 c0                \txor    %eax,%eax\n    1f0e:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    1f15:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f1a:\t48 89 c7             \tmov    %rax,%rdi\n    1f1d:\te8 00 00 00 00       \tcallq  1f22 <show_timeofday+0x2e>\n    1f22:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n    1f29:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    1f30:\t48 89 d6             \tmov    %rdx,%rsi\n    1f33:\t48 89 c7             \tmov    %rax,%rdi\n    1f36:\te8 00 00 00 00       \tcallq  1f3b <show_timeofday+0x47>\n    1f3b:\t48 85 c0             \ttest   %rax,%rax\n    1f3e:\t74 4f                \tje     1f8f <show_timeofday+0x9b>\n    1f40:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n    1f47:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    1f4b:\t48 89 d1             \tmov    %rdx,%rcx\n    1f4e:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1f53:\tbe 40 00 00 00       \tmov    $0x40,%esi\n    1f58:\t48 89 c7             \tmov    %rax,%rdi\n    1f5b:\te8 00 00 00 00       \tcallq  1f60 <show_timeofday+0x6c>\n    1f60:\t48 8b 8d 68 ff ff ff \tmov    -0x98(%rbp),%rcx\n    1f67:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1f6d <show_timeofday+0x79>\n    1f6d:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    1f71:\t49 89 c8             \tmov    %rcx,%r8\n    1f74:\t48 89 d1             \tmov    %rdx,%rcx\n    1f77:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1f7c:\t89 c6                \tmov    %eax,%esi\n    1f7e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1f83:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f88:\te8 00 00 00 00       \tcallq  1f8d <show_timeofday+0x99>\n    1f8d:\teb 1d                \tjmp    1fac <show_timeofday+0xb8>\n    1f8f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1f95 <show_timeofday+0xa1>\n    1f95:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1f9a:\t89 c6                \tmov    %eax,%esi\n    1f9c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1fa1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1fa6:\te8 00 00 00 00       \tcallq  1fab <show_timeofday+0xb7>\n    1fab:\t90                   \tnop\n    1fac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1fb0:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1fb7:\t00 00 \n    1fb9:\t74 05                \tje     1fc0 <show_timeofday+0xcc>\n    1fbb:\te8 00 00 00 00       \tcallq  1fc0 <show_timeofday+0xcc>\n    1fc0:\tc9                   \tleaveq \n    1fc1:\tc3                   \tretq   ", "code_s": "unsigned __int64 show_timeofday() {\n  struct timeval <span class=\"supfact\">tv</span>;\n  struct tm <span class=\"supfact\">tp</span>;\n  char s[Number];\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  if (localtime_r(&<span class=\"supfact\">tv</span>.tv_sec, &<span class=\"supfact\">tp</span>)) {\n    strftime(s, Number, String, &<span class=\"supfact\">tp</span>);\n    eprintf(Number L, verbose, String, s, <span class=\"supfact\">tv</span>.tv_usec);\n  } else {\n    eprintf(Number L, verbose, String);\n  }\n  return __readfsqword(Number) ^ v4;\n}", "code_t": "void __cdecl show_timeofday() {\n  timeval <span class=\"supfact\">tv</span>;\n  tm <span class=\"supfact\">ltime</span>;\n  char date[Number];\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  if (localtime_r(&<span class=\"supfact\">tv</span>.tv_sec, &<span class=\"supfact\">ltime</span>)) {\n    strftime(date, Number, String, &<span class=\"supfact\">ltime</span>);\n    eprintf(Number L, verbose, String, date, <span class=\"supfact\">tv</span>.tv_usec);\n  } else {\n    eprintf(Number L, verbose, String);\n  }\n}", "var": [{"name": "tp", "type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }", "ref_name": "ltime", "ref_type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}, {"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "moseymosey", "repo_name": "netpbm", "path": "moseymosey/netpbm/254687ad17578a4411e50c1a71c61d5d452f16288f64038833f1555086c2769a", "path_in_repo": "moseymosey/netpbm/other/pampick", "objdump": "0000000000408c40 <optStructTblToEntryTbl>:\n  408c40:\t55                   \tpush   %rbp\n  408c41:\t48 89 e5             \tmov    %rsp,%rbp\n  408c44:\t53                   \tpush   %rbx\n  408c45:\t48 83 ec 68          \tsub    $0x68,%rsp\n  408c49:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  408c4d:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  408c54:\teb 04                \tjmp    408c5a <optStructTblToEntryTbl+0x1a>\n  408c56:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  408c5a:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  408c5d:\t48 63 d0             \tmovslq %eax,%rdx\n  408c60:\t48 89 d0             \tmov    %rdx,%rax\n  408c63:\t48 c1 e0 02          \tshl    $0x2,%rax\n  408c67:\t48 01 d0             \tadd    %rdx,%rax\n  408c6a:\t48 c1 e0 03          \tshl    $0x3,%rax\n  408c6e:\t48 89 c2             \tmov    %rax,%rdx\n  408c71:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  408c75:\t48 01 d0             \tadd    %rdx,%rax\n  408c78:\t8b 40 10             \tmov    0x10(%rax),%eax\n  408c7b:\t85 c0                \ttest   %eax,%eax\n  408c7d:\t74 09                \tje     408c88 <optStructTblToEntryTbl+0x48>\n  408c7f:\t81 7d ec f3 01 00 00 \tcmpl   $0x1f3,-0x14(%rbp)\n  408c86:\t7e ce                \tjle    408c56 <optStructTblToEntryTbl+0x16>\n  408c88:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  408c8b:\t83 c0 01             \tadd    $0x1,%eax\n  408c8e:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  408c91:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  408c94:\t48 63 d0             \tmovslq %eax,%rdx\n  408c97:\t48 89 d0             \tmov    %rdx,%rax\n  408c9a:\t48 01 c0             \tadd    %rax,%rax\n  408c9d:\t48 01 d0             \tadd    %rdx,%rax\n  408ca0:\t48 c1 e0 04          \tshl    $0x4,%rax\n  408ca4:\t48 89 c7             \tmov    %rax,%rdi\n  408ca7:\te8 84 95 ff ff       \tcallq  402230 <malloc@plt>\n  408cac:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  408cb0:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  408cb5:\t0f 84 a9 00 00 00    \tje     408d64 <optStructTblToEntryTbl+0x124>\n  408cbb:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  408cc2:\te9 91 00 00 00       \tjmpq   408d58 <optStructTblToEntryTbl+0x118>\n  408cc7:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  408cca:\t48 63 d0             \tmovslq %eax,%rdx\n  408ccd:\t48 89 d0             \tmov    %rdx,%rax\n  408cd0:\t48 c1 e0 02          \tshl    $0x2,%rax\n  408cd4:\t48 01 d0             \tadd    %rdx,%rax\n  408cd7:\t48 c1 e0 03          \tshl    $0x3,%rax\n  408cdb:\t48 89 c2             \tmov    %rax,%rdx\n  408cde:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  408ce2:\t48 01 c2             \tadd    %rax,%rdx\n  408ce5:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  408ce8:\t48 63 c8             \tmovslq %eax,%rcx\n  408ceb:\t48 89 c8             \tmov    %rcx,%rax\n  408cee:\t48 01 c0             \tadd    %rax,%rax\n  408cf1:\t48 01 c8             \tadd    %rcx,%rax\n  408cf4:\t48 c1 e0 04          \tshl    $0x4,%rax\n  408cf8:\t48 89 c1             \tmov    %rax,%rcx\n  408cfb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408cff:\t48 8d 1c 01          \tlea    (%rcx,%rax,1),%rbx\n  408d03:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  408d07:\t48 83 ec 08          \tsub    $0x8,%rsp\n  408d0b:\tff 72 20             \tpushq  0x20(%rdx)\n  408d0e:\tff 72 18             \tpushq  0x18(%rdx)\n  408d11:\tff 72 10             \tpushq  0x10(%rdx)\n  408d14:\tff 72 08             \tpushq  0x8(%rdx)\n  408d17:\tff 32                \tpushq  (%rdx)\n  408d19:\t48 89 c7             \tmov    %rax,%rdi\n  408d1c:\te8 b1 fe ff ff       \tcallq  408bd2 <optStructToEntry>\n  408d21:\t48 83 c4 30          \tadd    $0x30,%rsp\n  408d25:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  408d29:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  408d2d:\t48 89 03             \tmov    %rax,(%rbx)\n  408d30:\t48 89 53 08          \tmov    %rdx,0x8(%rbx)\n  408d34:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  408d38:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  408d3c:\t48 89 43 10          \tmov    %rax,0x10(%rbx)\n  408d40:\t48 89 53 18          \tmov    %rdx,0x18(%rbx)\n  408d44:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  408d48:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  408d4c:\t48 89 43 20          \tmov    %rax,0x20(%rbx)\n  408d50:\t48 89 53 28          \tmov    %rdx,0x28(%rbx)\n  408d54:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  408d58:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  408d5b:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n  408d5e:\t0f 8c 63 ff ff ff    \tjl     408cc7 <optStructTblToEntryTbl+0x87>\n  408d64:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408d68:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n  408d6c:\tc9                   \tleaveq \n  408d6d:\tc3                   \tretq   ", "code_s": "char *__fastcall optStructTblToEntryTbl(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  _QWORD *v4;\n  __int64 v5;\n  char *v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 <span class=\"supfact\">v11</span>[Number];\n  __int64 v12;\n  char *v13;\n  int v14;\n  int j;\n  int i;\n  v12 = a1;\n  for (i = Number; *(_DWORD *)(Number L * i + v12 + Number) && i <= Number; ++i)\n    ;\n  v14 = i + Number;\n  v13 = (char *)malloc(Number L * (i + Number));\n  if (v13) {\n    for (j = Number; j < v14; ++j) {\n      v4 = (_QWORD *)(v12 + Number L * j);\n      v5 = Number L * j;\n      v6 = &v13[v5];\n      optStructToEntry(<span class=\"supfact\">v11</span>, a2, (__int64)v4, v5, v2, v3, *v4,\n                       v4[Number], v4[Number], v4[Number], v4[Number]);\n      v7 = <span class=\"supfact\">v11</span>[Number];\n      *(_QWORD *)v6 = <span class=\"supfact\">v11</span>[Number];\n      *((_QWORD *)v6 + Number) = v7;\n      v8 = <span class=\"supfact\">v11</span>[Number];\n      *((_QWORD *)v6 + Number) = <span class=\"supfact\">v11</span>[Number];\n      *((_QWORD *)v6 + Number) = v8;\n      v9 = <span class=\"supfact\">v11</span>[Number];\n      *((_QWORD *)v6 + Number) = <span class=\"supfact\">v11</span>[Number];\n      *((_QWORD *)v6 + Number) = v9;\n    }\n  }\n  return v13;\n}", "code_t": "optEntry *__cdecl optStructTblToEntryTbl(const optStruct *optStructTable) {\n  optEntry *v1;\n  const char *v2;\n  void *v3;\n  __int64 v4;\n  optEntry <span class=\"supfact\">v6</span>;\n  const optStruct *optStructTablea;\n  optEntry *optEntryTable;\n  int count;\n  int i_0;\n  int i;\n  optStructTablea = optStructTable;\n  for (i = Number; optStructTablea[i].type && i <= Number; ++i)\n    ;\n  count = i + Number;\n  optEntryTable = (optEntry *)malloc(Number L * (i + Number));\n  if (optEntryTable) {\n    for (i_0 = Number; i_0 < count; ++i_0) {\n      v1 = &optEntryTable[i_0];\n      optStructToEntry(&<span class=\"supfact\">v6</span>, optStructTablea[i_0]);\n      v2 = <span class=\"supfact\">v6</span>.longName;\n      *(_QWORD *)&v1->shortName = *(_QWORD *)&<span class=\"supfact\">v6</span>.shortName;\n      v1->longName = v2;\n      v3 = <span class=\"supfact\">v6</span>.arg;\n      *(_QWORD *)&v1->type = *(_QWORD *)&<span class=\"supfact\">v6</span>.type;\n      v1->arg = v3;\n      v4 = *(_QWORD *)&<span class=\"supfact\">v6</span>.flags;\n      v1->specified = <span class=\"supfact\">v6</span>.specified;\n      *(_QWORD *)&v1->flags = v4;\n    }\n  }\n  return optEntryTable;\n}", "var": [{"name": "v11", "type": "struct optEntry { char shortName; PADDING (7); const char * longName; optArgType type; PADDING (4); void * arg; unsigned int * specified; int flags; PADDING (4); }", "ref_name": "v6", "ref_type": "struct optEntry { char shortName; PADDING (7); const char * longName; optArgType type; PADDING (4); void * arg; unsigned int * specified; int flags; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "000000000000306f <_nocheck__trace_megasas_dcmd_zero_sge>:\n    306f:\t55                   \tpush   %rbp\n    3070:\t48 89 e5             \tmov    %rsp,%rbp\n    3073:\t41 54                \tpush   %r12\n    3075:\t53                   \tpush   %rbx\n    3076:\t48 83 ec 30          \tsub    $0x30,%rsp\n    307a:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    307d:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    3084:\t00 00 \n    3086:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    308a:\t31 c0                \txor    %eax,%eax\n    308c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3092 <_nocheck__trace_megasas_dcmd_zero_sge+0x23>\n    3092:\t85 c0                \ttest   %eax,%eax\n    3094:\t0f 95 c0             \tsetne  %al\n    3097:\t0f b6 c0             \tmovzbl %al,%eax\n    309a:\t48 85 c0             \ttest   %rax,%rax\n    309d:\t74 5d                \tje     30fc <_nocheck__trace_megasas_dcmd_zero_sge+0x8d>\n    309f:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 30a6 <_nocheck__trace_megasas_dcmd_zero_sge+0x37>\n    30a6:\t66 85 c0             \ttest   %ax,%ax\n    30a9:\t74 51                \tje     30fc <_nocheck__trace_megasas_dcmd_zero_sge+0x8d>\n    30ab:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    30b0:\te8 78 d7 ff ff       \tcallq  82d <qemu_loglevel_mask>\n    30b5:\t84 c0                \ttest   %al,%al\n    30b7:\t74 43                \tje     30fc <_nocheck__trace_megasas_dcmd_zero_sge+0x8d>\n    30b9:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    30bd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    30c2:\t48 89 c7             \tmov    %rax,%rdi\n    30c5:\te8 00 00 00 00       \tcallq  30ca <_nocheck__trace_megasas_dcmd_zero_sge+0x5b>\n    30ca:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    30ce:\t49 89 c4             \tmov    %rax,%r12\n    30d1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    30d5:\t48 89 c3             \tmov    %rax,%rbx\n    30d8:\te8 00 00 00 00       \tcallq  30dd <_nocheck__trace_megasas_dcmd_zero_sge+0x6e>\n    30dd:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    30e0:\t41 89 d0             \tmov    %edx,%r8d\n    30e3:\t4c 89 e1             \tmov    %r12,%rcx\n    30e6:\t48 89 da             \tmov    %rbx,%rdx\n    30e9:\t89 c6                \tmov    %eax,%esi\n    30eb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 30f2 <_nocheck__trace_megasas_dcmd_zero_sge+0x83>\n    30f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    30f7:\te8 00 00 00 00       \tcallq  30fc <_nocheck__trace_megasas_dcmd_zero_sge+0x8d>\n    30fc:\t90                   \tnop\n    30fd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3101:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    3108:\t00 00 \n    310a:\t74 05                \tje     3111 <_nocheck__trace_megasas_dcmd_zero_sge+0xa2>\n    310c:\te8 00 00 00 00       \tcallq  3111 <_nocheck__trace_megasas_dcmd_zero_sge+0xa2>\n    3111:\t48 83 c4 30          \tadd    $0x30,%rsp\n    3115:\t5b                   \tpop    %rbx\n    3116:\t41 5c                \tpop    %r12\n    3118:\t5d                   \tpop    %rbp\n    3119:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_dcmd_zero_sge(\n    unsigned int a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_DCMD_ZERO_SGE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl nocheck__trace_megasas_dcmd_zero_sge(int cmd) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_DCMD_ZERO_SGE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, (unsigned int)cmd);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "ChengyuSong", "repo_name": "lll-50", "path": "ChengyuSong/lll-50/2edc41ecb265e6b9e3fa8ea3de7d35d5494c654a5745e9b835adbaecbcd82261", "path_in_repo": "ChengyuSong/lll-50/tools/testing/selftests/kvm/x86_64/state_test", "objdump": "000000000040d570 <get_idt_base>:\n  40d570:\t55                   \tpush   %rbp\n  40d571:\t48 89 e5             \tmov    %rsp,%rbp\n  40d574:\t0f 01 4d f6          \tsidt   -0xa(%rbp)\n  40d578:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d57c:\t5d                   \tpop    %rbp\n  40d57d:\tc3                   \tretq   ", "code_s": "__int64 get_idt_base() {\n  _BYTE <span class=\"supfact\">v1</span>[Number];\n  __sidt(<span class=\"supfact\">v1</span>);\n  return *(_QWORD *)&<span class=\"supfact\">v1</span>[Number];\n}", "code_t": "uint64_t __cdecl get_idt_base() {\n  desc_ptr <span class=\"supfact\">idt</span>;\n  __sidt(&<span class=\"supfact\">idt</span>);\n  return <span class=\"supfact\">idt</span>.address;\n}", "var": [{"name": "v1", "type": "struct desc_ptr { uint16_t size; uint64_t address; }", "ref_name": "idt", "ref_type": "struct desc_ptr { uint16_t size; uint64_t address; }"}], "body_in_train": true}, {"repo_owner": "tzanussi", "repo_name": "linux-yocto-micro-3.14", "path": "tzanussi/linux-yocto-micro-3.14/161109f092e497a94a828b66cbda63a02c31d6f2b8065f31d315da24f4a8bb9c", "path_in_repo": "tzanussi/linux-yocto-micro-3.14/tools/perf/builtin-sched.o", "objdump": "00000000000002e0 <get_nsecs>:\n     2e0:\t55                   \tpush   %rbp\n     2e1:\t48 89 e5             \tmov    %rsp,%rbp\n     2e4:\t48 83 ec 20          \tsub    $0x20,%rsp\n     2e8:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     2ef:\t00 00 \n     2f1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     2f5:\t31 c0                \txor    %eax,%eax\n     2f7:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     2fb:\t48 89 c6             \tmov    %rax,%rsi\n     2fe:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     303:\te8 00 00 00 00       \tcallq  308 <get_nsecs+0x28>\n     308:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     30c:\t48 69 c0 00 ca 9a 3b \timul   $0x3b9aca00,%rax,%rax\n     313:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     317:\t48 01 d0             \tadd    %rdx,%rax\n     31a:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     31e:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     325:\t00 00 \n     327:\t74 05                \tje     32e <get_nsecs+0x4e>\n     329:\te8 00 00 00 00       \tcallq  32e <get_nsecs+0x4e>\n     32e:\tc9                   \tleaveq \n     32f:\tc3                   \tretq   ", "code_s": "__syscall_slong_t get_nsecs() {\n  struct timespec <span class=\"supfact\">tp</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n  return <span class=\"supfact\">tp</span>.tv_nsec + Number * <span class=\"supfact\">tp</span>.tv_sec;\n}", "code_t": "u64 __cdecl get_nsecs() {\n  timespec <span class=\"supfact\">ts</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  clock_gettime(Number, &<span class=\"supfact\">ts</span>);\n  return <span class=\"supfact\">ts</span>.tv_nsec + Number * <span class=\"supfact\">ts</span>.tv_sec;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "alpinelinux", "repo_name": "apk-tools", "path": "alpinelinux/apk-tools/4015c88e268e797a26c025c7167c1011e19e48f1e72d41f81259c59c7411f91b", "path_in_repo": "alpinelinux/apk-tools//src/manifest.o", "objdump": "000000000000027f <read_file_entry>:\n 27f:\t55                   \tpush   %rbp\n 280:\t48 89 e5             \tmov    %rsp,%rbp\n 283:\t41 55                \tpush   %r13\n 285:\t41 54                \tpush   %r12\n 287:\t53                   \tpush   %rbx\n 288:\t48 83 ec 78          \tsub    $0x78,%rsp\n 28c:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n 290:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n 294:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n 29b:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 29f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 2a3:\t48 c7 45 90 29 00 00 \tmovq   $0x29,-0x70(%rbp)\n 2aa:\t00 \n 2ab:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 2af:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n 2b3:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 2b7:\t48 8b 00             \tmov    (%rax),%rax\n 2ba:\t0f b6 00             \tmovzbl (%rax),%eax\n 2bd:\t3c 2e                \tcmp    $0x2e,%al\n 2bf:\t75 48                \tjne    309 <read_file_entry+0x8a>\n 2c1:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 2c5:\t48 8b 00             \tmov    (%rax),%rax\n 2c8:\tba 08 00 00 00       \tmov    $0x8,%edx\n 2cd:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2d4 <read_file_entry+0x55>\n 2d4:\t48 89 c7             \tmov    %rax,%rdi\n 2d7:\te8 00 00 00 00       \tcallq  2dc <read_file_entry+0x5d>\n 2dc:\t85 c0                \ttest   %eax,%eax\n 2de:\t74 1f                \tje     2ff <read_file_entry+0x80>\n 2e0:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 2e4:\t48 8b 00             \tmov    (%rax),%rax\n 2e7:\tba 06 00 00 00       \tmov    $0x6,%edx\n 2ec:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2f3 <read_file_entry+0x74>\n 2f3:\t48 89 c7             \tmov    %rax,%rdi\n 2f6:\te8 00 00 00 00       \tcallq  2fb <read_file_entry+0x7c>\n 2fb:\t85 c0                \ttest   %eax,%eax\n 2fd:\t75 0a                \tjne    309 <read_file_entry+0x8a>\n 2ff:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 304:\te9 d4 00 00 00       \tjmpq   3dd <read_file_entry+0x15e>\n 309:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 30d:\t8b 40 30             \tmov    0x30(%rax),%eax\n 310:\t25 00 f0 00 00       \tand    $0xf000,%eax\n 315:\t3d 00 80 00 00       \tcmp    $0x8000,%eax\n 31a:\t74 0a                \tje     326 <read_file_entry+0xa7>\n 31c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 321:\te9 b7 00 00 00       \tjmpq   3dd <read_file_entry+0x15e>\n 326:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 32a:\tba 29 00 00 00       \tmov    $0x29,%edx\n 32f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 334:\t48 89 c7             \tmov    %rax,%rdi\n 337:\te8 00 00 00 00       \tcallq  33c <read_file_entry+0xbd>\n 33c:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 340:\t0f b6 40 5c          \tmovzbl 0x5c(%rax),%eax\n 344:\t0f b6 c0             \tmovzbl %al,%eax\n 347:\t49 89 c4             \tmov    %rax,%r12\n 34a:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 34e:\t48 83 c0 48          \tadd    $0x48,%rax\n 352:\t49 89 c5             \tmov    %rax,%r13\n 355:\t4c 89 e1             \tmov    %r12,%rcx\n 358:\t4c 89 eb             \tmov    %r13,%rbx\n 35b:\t4c 89 e0             \tmov    %r12,%rax\n 35e:\t4c 89 ea             \tmov    %r13,%rdx\n 361:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 365:\t48 89 ce             \tmov    %rcx,%rsi\n 368:\t48 89 c7             \tmov    %rax,%rdi\n 36b:\te8 00 00 00 00       \tcallq  370 <read_file_entry+0xf1>\n 370:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 377 <read_file_entry+0xf8>\n 377:\t8b 00                \tmov    (%rax),%eax\n 379:\t83 f8 01             \tcmp    $0x1,%eax\n 37c:\t7e 1b                \tjle    399 <read_file_entry+0x11a>\n 37e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 382:\t48 8b 00             \tmov    (%rax),%rax\n 385:\t48 89 c6             \tmov    %rax,%rsi\n 388:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 38f <read_file_entry+0x110>\n 38f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 394:\te8 00 00 00 00       \tcallq  399 <read_file_entry+0x11a>\n 399:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 39d:\t48 8b 08             \tmov    (%rax),%rcx\n 3a0:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 3a4:\t0f b6 40 5c          \tmovzbl 0x5c(%rax),%eax\n 3a8:\t0f b6 c0             \tmovzbl %al,%eax\n 3ab:\t48 98                \tcltq   \n 3ad:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 3b4:\t00 \n 3b5:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 3bc <read_file_entry+0x13d>\n 3bc:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n 3c0:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n 3c4:\t48 89 c6             \tmov    %rax,%rsi\n 3c7:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 3ce <read_file_entry+0x14f>\n 3ce:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3d3:\te8 00 00 00 00       \tcallq  3d8 <read_file_entry+0x159>\n 3d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3dd:\t48 83 c4 78          \tadd    $0x78,%rsp\n 3e1:\t5b                   \tpop    %rbx\n 3e2:\t41 5c                \tpop    %r12\n 3e4:\t41 5d                \tpop    %r13\n 3e6:\t5d                   \tpop    %rbp\n 3e7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_file_entry(const char **a1, const char **a2) {\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  char s[Number];\n  const char **v5;\n  v5 = a1;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  <span class=\"supfact\">v3</span>[Number] = (__int64)s;\n  if (**a2 == Number &&\n      (!strncmp(*a2, String, Number) || !strncmp(*a2, String, Number)))\n    return Number L;\n  if (((_DWORD)a2[Number] & Number) != Number)\n    return Number L;\n  memset(s, Number, Number);\n  apk_blob_push_hexdump(<span class=\"supfact\">v3</span>, *((unsigned __int8 *)a2 + Number),\n                        a2 + Number);\n  if (apk_verbosity > Number)\n    printf(String, *v5);\n  printf(String,\n         *((const char **)&csum_types + *((unsigned __int8 *)a2 + Number)), s,\n         *a2);\n  return Number L;\n}", "code_t": "int __cdecl read_file_entry(void *ctx, const apk_file_info *ae,\n                            apk_istream *is) {\n  apk_blob_t <span class=\"supfact\">csum_blob</span>;\n  char csum_buf[Number];\n  manifest_file_ctx *mctx;\n  mctx = (manifest_file_ctx *)ctx;\n  <span class=\"supfact\">csum_blob</span>.len = Number L;\n  <span class=\"supfact\">csum_blob</span>.ptr = csum_buf;\n  if (*ae->name == Number && (!strncmp(ae->name, String, Number) ||\n                              !strncmp(ae->name, String, Number)))\n    return Number;\n  if ((ae->mode & Number) != Number)\n    return Number;\n  memset(csum_buf, Number, sizeof(csum_buf));\n  apk_blob_push_hexdump(&<span class=\"supfact\">csum_blob</span>, ae->csum.type, &ae->csum);\n  if (apk_verbosity > Number)\n    printf(String, mctx->file);\n  printf(String, csum_types[ae->csum.type], csum_buf, ae->name);\n  return Number;\n}", "var": [{"name": "v3", "type": "struct instr_time { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "csum_blob", "ref_type": "struct apk_blob_t { __int64 len; char * ptr; }"}], "body_in_train": true}, {"repo_owner": "andrey-utkin", "repo_name": "ffmpeg", "path": "andrey-utkin/ffmpeg/f3bb449394d56c51e136b40a6f2bff389dda379c066ee30f190eacd093efe91a", "path_in_repo": "andrey-utkin/ffmpeg//libavcodec/proresdec_lgpl.o", "objdump": "0000000000001a8b <decode_alpha_plane>:\n    1a8b:\t48 83 ec 68          \tsub    $0x68,%rsp\n    1a8f:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n    1a94:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n    1a99:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n    1a9e:\t89 4c 24 14          \tmov    %ecx,0x14(%rsp)\n    1aa2:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n    1aa7:\t44 89 4c 24 10       \tmov    %r9d,0x10(%rsp)\n    1aac:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    1ab1:\t48 83 c0 20          \tadd    $0x20,%rax\n    1ab5:\tba 00 10 00 00       \tmov    $0x1000,%edx\n    1aba:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1abf:\t48 89 c7             \tmov    %rax,%rdi\n    1ac2:\te8 00 00 00 00       \tcallq  1ac7 <decode_alpha_plane+0x3c>\n    1ac7:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    1acb:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n    1ad2:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n    1ad7:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    1adc:\t48 89 ce             \tmov    %rcx,%rsi\n    1adf:\t48 89 c7             \tmov    %rax,%rdi\n    1ae2:\te8 66 e8 ff ff       \tcallq  34d <init_get_bits>\n    1ae7:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1aec:\t8b 80 a8 01 00 00    \tmov    0x1a8(%rax),%eax\n    1af2:\t83 f8 02             \tcmp    $0x2,%eax\n    1af5:\t75 26                \tjne    1b1d <decode_alpha_plane+0x92>\n    1af7:\t8b 44 24 70          \tmov    0x70(%rsp),%eax\n    1afb:\tc1 e0 08             \tshl    $0x8,%eax\n    1afe:\t89 c2                \tmov    %eax,%edx\n    1b00:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    1b05:\t48 8d 70 20          \tlea    0x20(%rax),%rsi\n    1b09:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    1b0e:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    1b13:\t48 89 c7             \tmov    %rax,%rdi\n    1b16:\te8 39 fd ff ff       \tcallq  1854 <unpack_alpha>\n    1b1b:\teb 24                \tjmp    1b41 <decode_alpha_plane+0xb6>\n    1b1d:\t8b 44 24 70          \tmov    0x70(%rsp),%eax\n    1b21:\tc1 e0 08             \tshl    $0x8,%eax\n    1b24:\t89 c2                \tmov    %eax,%edx\n    1b26:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    1b2b:\t48 8d 70 20          \tlea    0x20(%rax),%rsi\n    1b2f:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    1b34:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n    1b39:\t48 89 c7             \tmov    %rax,%rdi\n    1b3c:\te8 13 fd ff ff       \tcallq  1854 <unpack_alpha>\n    1b41:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    1b46:\t48 83 c0 20          \tadd    $0x20,%rax\n    1b4a:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n    1b4f:\tc7 44 24 5c 00 00 00 \tmovl   $0x0,0x5c(%rsp)\n    1b56:\t00 \n    1b57:\teb 48                \tjmp    1ba1 <decode_alpha_plane+0x116>\n    1b59:\t8b 44 24 70          \tmov    0x70(%rsp),%eax\n    1b5d:\tc1 e0 04             \tshl    $0x4,%eax\n    1b60:\t48 98                \tcltq   \n    1b62:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    1b66:\t48 8b 4c 24 50       \tmov    0x50(%rsp),%rcx\n    1b6b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1b70:\t48 89 ce             \tmov    %rcx,%rsi\n    1b73:\t48 89 c7             \tmov    %rax,%rdi\n    1b76:\te8 00 00 00 00       \tcallq  1b7b <decode_alpha_plane+0xf0>\n    1b7b:\t8b 44 24 10          \tmov    0x10(%rsp),%eax\n    1b7f:\td1 f8                \tsar    %eax\n    1b81:\t48 98                \tcltq   \n    1b83:\t48 01 c0             \tadd    %rax,%rax\n    1b86:\t48 01 44 24 08       \tadd    %rax,0x8(%rsp)\n    1b8b:\t8b 44 24 70          \tmov    0x70(%rsp),%eax\n    1b8f:\tc1 e0 04             \tshl    $0x4,%eax\n    1b92:\t48 98                \tcltq   \n    1b94:\t48 01 c0             \tadd    %rax,%rax\n    1b97:\t48 01 44 24 50       \tadd    %rax,0x50(%rsp)\n    1b9c:\t83 44 24 5c 01       \taddl   $0x1,0x5c(%rsp)\n    1ba1:\t83 7c 24 5c 0f       \tcmpl   $0xf,0x5c(%rsp)\n    1ba6:\t7e b1                \tjle    1b59 <decode_alpha_plane+0xce>\n    1ba8:\t90                   \tnop\n    1ba9:\t90                   \tnop\n    1baa:\t48 83 c4 68          \tadd    $0x68,%rsp\n    1bae:\tc3                   \tretq   ", "code_s": "__int64 __fastcall decode_alpha_plane(__int64 a1, __int64 a2, __int64 a3,\n                                      int a4, char *a5, int a6, int a7) {\n  __int64 result;\n  char <span class=\"supfact\">v12</span>[Number];\n  void *src;\n  int i;\n  memset((void *)(a2 + Number), Number, Number);\n  init_get_bits((__int64)<span class=\"supfact\">v12</span>, a3, Number * a4);\n  if (*(_DWORD *)(a1 + Number) == Number)\n    unpack_alpha((__int64)<span class=\"supfact\">v12</span>, a2 + Number, a7 << Number,\n                 Number);\n  else\n    unpack_alpha((__int64)<span class=\"supfact\">v12</span>, a2 + Number, a7 << Number,\n                 Number);\n  result = a2 + Number;\n  src = (void *)(a2 + Number);\n  for (i = Number; i <= Number; ++i) {\n    memcpy(a5, src, Number L * a7);\n    a5 += Number * (a6 >> Number);\n    result = Number L * a7;\n    src = (char *)src + result;\n  }\n  return result;\n}", "code_t": "void __cdecl decode_alpha_plane(ProresContext_0 *ctx, ProresThreadData_0 *td,\n                                const uint8_t *buf, int data_size,\n                                uint16_t *out_ptr, int linesize,\n                                int mbs_per_slice) {\n  GetBitContext_0 <span class=\"supfact\">gb</span>;\n  uint16_t *block_ptr;\n  int i;\n  memset(td->blocks, Number, sizeof(td->blocks));\n  init_get_bits(&<span class=\"supfact\">gb</span>, buf, Number * data_size);\n  if (ctx->alpha_info == Number)\n    unpack_alpha(&<span class=\"supfact\">gb</span>, (uint16_t *)td->blocks,\n                 mbs_per_slice << Number, Number);\n  else\n    unpack_alpha(&<span class=\"supfact\">gb</span>, (uint16_t *)td->blocks,\n                 mbs_per_slice << Number, Number);\n  block_ptr = (uint16_t *)td->blocks;\n  for (i = Number; i <= Number; ++i) {\n    memcpy(out_ptr, block_ptr, Number L * mbs_per_slice);\n    out_ptr += linesize >> Number;\n    block_ptr += Number * mbs_per_slice;\n  }\n}", "var": [{"name": "v12", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }", "ref_name": "gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "juliadeneva", "repo_name": "SPclean", "path": "juliadeneva/SPclean/897d44175a63939e5a97f85b905b24d048da6da03575976295c7e1dc75a4cd02", "path_in_repo": "juliadeneva/SPclean//spclean", "objdump": "000000000040446e <get_file_size>:\n  40446e:\t55                   \tpush   %rbp\n  40446f:\t48 89 e5             \tmov    %rsp,%rbp\n  404472:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  404479:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n  404480:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n  404487:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  40448e:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  404495:\t48 89 d6             \tmov    %rdx,%rsi\n  404498:\t48 89 c7             \tmov    %rax,%rdi\n  40449b:\te8 e0 05 00 00       \tcallq  404a80 <stat64>\n  4044a0:\t85 c0                \ttest   %eax,%eax\n  4044a2:\t74 07                \tje     4044ab <get_file_size+0x3d>\n  4044a4:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4044a9:\teb 13                \tjmp    4044be <get_file_size+0x50>\n  4044ab:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n  4044af:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4044b6:\t48 89 10             \tmov    %rdx,(%rax)\n  4044b9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4044be:\tc9                   \tleaveq \n  4044bf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_file_size(char *a1, __off_t *a2) {\n  struct stat64 <span class=\"supfact\">v3</span>;\n  if ((unsigned int)stat64(a1, &<span class=\"supfact\">v3</span>))\n    return Number;\n  *a2 = <span class=\"supfact\">v3</span>.st_size;\n  return Number L;\n}", "code_t": "int __cdecl get_file_size(char *path, off_t *size) {\n  stat <span class=\"supfact\">file_stats</span>;\n  if ((unsigned int)stat64(path, (struct stat64 *)&<span class=\"supfact\">file_stats</span>))\n    return Number;\n  *size = <span class=\"supfact\">file_stats</span>.st_size;\n  return Number;\n}", "var": [{"name": "v3", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "file_stats", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7c8b7a7781f1cadd00b86bd331a6acad366142cb3db9ab2fde20cee244c5ff14", "path_in_repo": "XanClic/qemu//qemu-ga", "objdump": "000000000003cdde <vsock_listen_saddr>:\n   3cdde:\t55                   \tpush   %rbp\n   3cddf:\t48 89 e5             \tmov    %rsp,%rbp\n   3cde2:\t48 83 ec 50          \tsub    $0x50,%rsp\n   3cde6:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   3cdea:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n   3cded:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n   3cdf1:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n   3cdf8:\t00 00 \n   3cdfa:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   3cdfe:\t31 c0                \txor    %eax,%eax\n   3ce00:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n   3ce04:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n   3ce08:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   3ce0c:\t48 89 ce             \tmov    %rcx,%rsi\n   3ce0f:\t48 89 c7             \tmov    %rax,%rdi\n   3ce12:\te8 0f fd ff ff       \tcallq  3cb26 <vsock_parse_vaddr_to_sockaddr>\n   3ce17:\t83 f0 01             \txor    $0x1,%eax\n   3ce1a:\t84 c0                \ttest   %al,%al\n   3ce1c:\t74 0a                \tje     3ce28 <vsock_listen_saddr+0x4a>\n   3ce1e:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   3ce23:\te9 1b 01 00 00       \tjmpq   3cf43 <vsock_listen_saddr+0x165>\n   3ce28:\tba 00 00 00 00       \tmov    $0x0,%edx\n   3ce2d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   3ce32:\tbf 28 00 00 00       \tmov    $0x28,%edi\n   3ce37:\te8 22 6a ff ff       \tcallq  3385e <qemu_socket>\n   3ce3c:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n   3ce3f:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n   3ce43:\t79 3f                \tjns    3ce84 <vsock_listen_saddr+0xa6>\n   3ce45:\te8 26 e2 fc ff       \tcallq  b070 <__errno_location@plt>\n   3ce4a:\t8b 10                \tmov    (%rax),%edx\n   3ce4c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   3ce50:\t4c 8d 0d ac 8b 01 00 \tlea    0x18bac(%rip),%r9        # 55a03 <__PRETTY_FUNCTION__.14486+0x1e3>\n   3ce57:\t41 89 d0             \tmov    %edx,%r8d\n   3ce5a:\t48 8d 0d 8f 91 01 00 \tlea    0x1918f(%rip),%rcx        # 55ff0 <__func__.22467>\n   3ce61:\tba 18 03 00 00       \tmov    $0x318,%edx\n   3ce66:\t48 8d 35 25 8a 01 00 \tlea    0x18a25(%rip),%rsi        # 55892 <__PRETTY_FUNCTION__.14486+0x72>\n   3ce6d:\t48 89 c7             \tmov    %rax,%rdi\n   3ce70:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3ce75:\te8 76 b4 ff ff       \tcallq  382f0 <error_setg_errno_internal>\n   3ce7a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   3ce7f:\te9 bf 00 00 00       \tjmpq   3cf43 <vsock_listen_saddr+0x165>\n   3ce84:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n   3ce88:\t48 89 c1             \tmov    %rax,%rcx\n   3ce8b:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   3ce8e:\tba 10 00 00 00       \tmov    $0x10,%edx\n   3ce93:\t48 89 ce             \tmov    %rcx,%rsi\n   3ce96:\t89 c7                \tmov    %eax,%edi\n   3ce98:\te8 a3 e2 fc ff       \tcallq  b140 <bind@plt>\n   3ce9d:\t85 c0                \ttest   %eax,%eax\n   3ce9f:\t74 46                \tje     3cee7 <vsock_listen_saddr+0x109>\n   3cea1:\te8 ca e1 fc ff       \tcallq  b070 <__errno_location@plt>\n   3cea6:\t8b 10                \tmov    (%rax),%edx\n   3cea8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   3ceac:\t4c 8d 0d e0 8a 01 00 \tlea    0x18ae0(%rip),%r9        # 55993 <__PRETTY_FUNCTION__.14486+0x173>\n   3ceb3:\t41 89 d0             \tmov    %edx,%r8d\n   3ceb6:\t48 8d 0d 33 91 01 00 \tlea    0x19133(%rip),%rcx        # 55ff0 <__func__.22467>\n   3cebd:\tba 1d 03 00 00       \tmov    $0x31d,%edx\n   3cec2:\t48 8d 35 c9 89 01 00 \tlea    0x189c9(%rip),%rsi        # 55892 <__PRETTY_FUNCTION__.14486+0x72>\n   3cec9:\t48 89 c7             \tmov    %rax,%rdi\n   3cecc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3ced1:\te8 1a b4 ff ff       \tcallq  382f0 <error_setg_errno_internal>\n   3ced6:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   3ced9:\t89 c7                \tmov    %eax,%edi\n   3cedb:\te8 c0 f4 fc ff       \tcallq  c3a0 <close@plt>\n   3cee0:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   3cee5:\teb 5c                \tjmp    3cf43 <vsock_listen_saddr+0x165>\n   3cee7:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n   3ceea:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   3ceed:\t89 d6                \tmov    %edx,%esi\n   3ceef:\t89 c7                \tmov    %eax,%edi\n   3cef1:\te8 ba ea fc ff       \tcallq  b9b0 <listen@plt>\n   3cef6:\t85 c0                \ttest   %eax,%eax\n   3cef8:\t74 46                \tje     3cf40 <vsock_listen_saddr+0x162>\n   3cefa:\te8 71 e1 fc ff       \tcallq  b070 <__errno_location@plt>\n   3ceff:\t8b 10                \tmov    (%rax),%edx\n   3cf01:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   3cf05:\t4c 8d 0d 9d 8a 01 00 \tlea    0x18a9d(%rip),%r9        # 559a9 <__PRETTY_FUNCTION__.14486+0x189>\n   3cf0c:\t41 89 d0             \tmov    %edx,%r8d\n   3cf0f:\t48 8d 0d da 90 01 00 \tlea    0x190da(%rip),%rcx        # 55ff0 <__func__.22467>\n   3cf16:\tba 23 03 00 00       \tmov    $0x323,%edx\n   3cf1b:\t48 8d 35 70 89 01 00 \tlea    0x18970(%rip),%rsi        # 55892 <__PRETTY_FUNCTION__.14486+0x72>\n   3cf22:\t48 89 c7             \tmov    %rax,%rdi\n   3cf25:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3cf2a:\te8 c1 b3 ff ff       \tcallq  382f0 <error_setg_errno_internal>\n   3cf2f:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   3cf32:\t89 c7                \tmov    %eax,%edi\n   3cf34:\te8 67 f4 fc ff       \tcallq  c3a0 <close@plt>\n   3cf39:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   3cf3e:\teb 03                \tjmp    3cf43 <vsock_listen_saddr+0x165>\n   3cf40:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   3cf43:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n   3cf47:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n   3cf4e:\t00 00 \n   3cf50:\t74 05                \tje     3cf57 <vsock_listen_saddr+0x179>\n   3cf52:\te8 19 ea fc ff       \tcallq  b970 <__stack_chk_fail@plt>\n   3cf57:\tc9                   \tleaveq \n   3cf58:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vsock_listen_saddr(__int64 *a1, int a2, __int64 *a3) {\n  __int64 result;\n  int *v4;\n  int *v5;\n  int *v6;\n  int fd;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  if ((unsigned __int8)vsock_parse_vaddr_to_sockaddr(a1, &<span class=\"supfact\">addr</span>,\n                                                     a3) != Number)\n    return Number;\n  fd = qemu_socket(Number, Number, Number);\n  if (fd >= Number) {\n    if (bind(fd, &<span class=\"supfact\">addr</span>, Number)) {\n      v5 = __errno_location();\n      error_setg_errno_internal(a3, (__int64)String, Number, (__int64)String,\n                                *v5, (__int64)String);\n      close(fd);\n      result = Number;\n    } else if (listen(fd, a2)) {\n      v6 = __errno_location();\n      error_setg_errno_internal(a3, (__int64)String, Number, (__int64)String,\n                                *v6, (__int64)String);\n      close(fd);\n      result = Number;\n    } else {\n      result = (unsigned int)fd;\n    }\n  } else {\n    v4 = __errno_location();\n    error_setg_errno_internal(a3, (__int64)String, Number, (__int64)String, *v4,\n                              (__int64)String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl vsock_listen_saddr(VsockSocketAddress_0 *vaddr, int num,\n                               Error_0 **errp) {\n  int result;\n  int *v4;\n  int *v5;\n  int *v6;\n  int slisten;\n  sockaddr_vm <span class=\"supfact\">svm</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  if (!vsock_parse_vaddr_to_sockaddr(vaddr, &<span class=\"supfact\">svm</span>, errp))\n    return Number;\n  slisten = qemu_socket(Number, Number, Number);\n  if (slisten >= Number) {\n    if (bind(slisten, (const struct sockaddr *)&<span class=\"supfact\">svm</span>, Number)) {\n      v5 = __errno_location();\n      error_setg_errno_internal(errp, String, Number, String, *v5, String);\n      close(slisten);\n      result = Number;\n    } else if (listen(slisten, num)) {\n      v6 = __errno_location();\n      error_setg_errno_internal(errp, String, Number, String, *v6, String);\n      close(slisten);\n      result = Number;\n    } else {\n      result = slisten;\n    }\n  } else {\n    v4 = __errno_location();\n    error_setg_errno_internal(errp, String, Number, String, *v4, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "addr", "type": "struct sockaddr_vm { __kernel_sa_family_t svm_family; unsigned __int16 svm_reserved1; unsigned int svm_port; unsigned int svm_cid; unsigned __int8[4] svm_zero; }", "ref_name": "svm", "ref_type": "struct sockaddr_vm { __kernel_sa_family_t svm_family; unsigned __int16 svm_reserved1; unsigned int svm_port; unsigned int svm_cid; unsigned __int8[4] svm_zero; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "0000000000001374 <_nocheck__trace_megasas_frame_busy>:\n    1374:\t55                   \tpush   %rbp\n    1375:\t48 89 e5             \tmov    %rsp,%rbp\n    1378:\t41 54                \tpush   %r12\n    137a:\t53                   \tpush   %rbx\n    137b:\t48 83 ec 30          \tsub    $0x30,%rsp\n    137f:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1383:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    138a:\t00 00 \n    138c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1390:\t31 c0                \txor    %eax,%eax\n    1392:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1398 <_nocheck__trace_megasas_frame_busy+0x24>\n    1398:\t85 c0                \ttest   %eax,%eax\n    139a:\t0f 95 c0             \tsetne  %al\n    139d:\t0f b6 c0             \tmovzbl %al,%eax\n    13a0:\t48 85 c0             \ttest   %rax,%rax\n    13a3:\t74 5e                \tje     1403 <_nocheck__trace_megasas_frame_busy+0x8f>\n    13a5:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 13ac <_nocheck__trace_megasas_frame_busy+0x38>\n    13ac:\t66 85 c0             \ttest   %ax,%ax\n    13af:\t74 52                \tje     1403 <_nocheck__trace_megasas_frame_busy+0x8f>\n    13b1:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    13b6:\te8 72 f4 ff ff       \tcallq  82d <qemu_loglevel_mask>\n    13bb:\t84 c0                \ttest   %al,%al\n    13bd:\t74 44                \tje     1403 <_nocheck__trace_megasas_frame_busy+0x8f>\n    13bf:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    13c3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    13c8:\t48 89 c7             \tmov    %rax,%rdi\n    13cb:\te8 00 00 00 00       \tcallq  13d0 <_nocheck__trace_megasas_frame_busy+0x5c>\n    13d0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    13d4:\t49 89 c4             \tmov    %rax,%r12\n    13d7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    13db:\t48 89 c3             \tmov    %rax,%rbx\n    13de:\te8 00 00 00 00       \tcallq  13e3 <_nocheck__trace_megasas_frame_busy+0x6f>\n    13e3:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    13e7:\t49 89 d0             \tmov    %rdx,%r8\n    13ea:\t4c 89 e1             \tmov    %r12,%rcx\n    13ed:\t48 89 da             \tmov    %rbx,%rdx\n    13f0:\t89 c6                \tmov    %eax,%esi\n    13f2:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 13f9 <_nocheck__trace_megasas_frame_busy+0x85>\n    13f9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    13fe:\te8 00 00 00 00       \tcallq  1403 <_nocheck__trace_megasas_frame_busy+0x8f>\n    1403:\t90                   \tnop\n    1404:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1408:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    140f:\t00 00 \n    1411:\t74 05                \tje     1418 <_nocheck__trace_megasas_frame_busy+0xa4>\n    1413:\te8 00 00 00 00       \tcallq  1418 <_nocheck__trace_megasas_frame_busy+0xa4>\n    1418:\t48 83 c4 30          \tadd    $0x30,%rsp\n    141c:\t5b                   \tpop    %rbx\n    141d:\t41 5c                \tpop    %r12\n    141f:\t5d                   \tpop    %rbp\n    1420:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_frame_busy(__int64 a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_FRAME_BUSY_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl nocheck__trace_megasas_frame_busy(uint64_t addr) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_FRAME_BUSY_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, addr);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "UgoLi", "repo_name": "freeswitch_1.9", "path": "UgoLi/freeswitch_1.9/93ecdf45b2f3bb22850a8825a2150b3b49d4e21470303f4147f471caff5f7450", "path_in_repo": "UgoLi/freeswitch_1.9/freeswitch_src/libs/xmlrpc-c/tools/xmlrpc_pstream/xmlrpc_pstream.o", "objdump": "0000000000001ade <_ZL13doInteractivePN8xmlrpc_c10client_xmlE>:\n    1ade:\t55                   \tpush   %rbp\n    1adf:\t48 89 e5             \tmov    %rsp,%rbp\n    1ae2:\t41 54                \tpush   %r12\n    1ae4:\t53                   \tpush   %rbx\n    1ae5:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n    1ae9:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n    1af0:\tc6 45 ef 00          \tmovb   $0x0,-0x11(%rbp)\n    1af4:\t80 7d ef 00          \tcmpb   $0x0,-0x11(%rbp)\n    1af8:\t0f 85 58 01 00 00    \tjne    1c56 <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x178>\n    1afe:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    1b02:\t48 89 c7             \tmov    %rax,%rdi\n    1b05:\te8 00 00 00 00       \tcallq  1b0a <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x2c>\n    1b0a:\t48 8d 55 df          \tlea    -0x21(%rbp),%rdx\n    1b0e:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    1b12:\t48 89 d6             \tmov    %rdx,%rsi\n    1b15:\t48 89 c7             \tmov    %rax,%rdi\n    1b18:\te8 0f ff ff ff       \tcallq  1a2c <_ZL10getCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPb>\n    1b1d:\t0f b6 45 df          \tmovzbl -0x21(%rbp),%eax\n    1b21:\t84 c0                \ttest   %al,%al\n    1b23:\t74 15                \tje     1b3a <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x5c>\n    1b25:\tc6 45 ef 01          \tmovb   $0x1,-0x11(%rbp)\n    1b29:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b2e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1b33:\te8 00 00 00 00       \tcallq  1b38 <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x5a>\n    1b38:\teb 61                \tjmp    1b9b <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0xbd>\n    1b3a:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1b3e:\t48 89 c7             \tmov    %rax,%rdi\n    1b41:\te8 00 00 00 00       \tcallq  1b46 <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x68>\n    1b46:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1b4a:\t48 89 c7             \tmov    %rax,%rdi\n    1b4d:\te8 00 00 00 00       \tcallq  1b52 <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x74>\n    1b52:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    1b56:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    1b5a:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    1b5e:\t48 89 ce             \tmov    %rcx,%rsi\n    1b61:\t48 89 c7             \tmov    %rax,%rdi\n    1b64:\te8 2d fc ff ff       \tcallq  1796 <_ZL12parseCommandRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS4_PSt6vectorIS4_SaIS4_EE>\n    1b69:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    1b6d:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    1b71:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    1b78:\t48 89 ce             \tmov    %rcx,%rsi\n    1b7b:\t48 89 c7             \tmov    %rax,%rdi\n    1b7e:\te8 bb fd ff ff       \tcallq  193e <_ZL9doCommandPN8xmlrpc_c10client_xmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS7_SaIS7_EE>\n    1b83:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1b87:\t48 89 c7             \tmov    %rax,%rdi\n    1b8a:\te8 00 00 00 00       \tcallq  1b8f <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0xb1>\n    1b8f:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1b93:\t48 89 c7             \tmov    %rax,%rdi\n    1b96:\te8 00 00 00 00       \tcallq  1b9b <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0xbd>\n    1b9b:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    1b9f:\t48 89 c7             \tmov    %rax,%rdi\n    1ba2:\te8 00 00 00 00       \tcallq  1ba7 <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0xc9>\n    1ba7:\te9 48 ff ff ff       \tjmpq   1af4 <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x16>\n    1bac:\t49 89 c4             \tmov    %rax,%r12\n    1baf:\t48 89 d3             \tmov    %rdx,%rbx\n    1bb2:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1bb6:\t48 89 c7             \tmov    %rax,%rdi\n    1bb9:\te8 00 00 00 00       \tcallq  1bbe <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0xe0>\n    1bbe:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1bc2:\t48 89 c7             \tmov    %rax,%rdi\n    1bc5:\te8 00 00 00 00       \tcallq  1bca <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0xec>\n    1bca:\t4c 89 e0             \tmov    %r12,%rax\n    1bcd:\t48 89 da             \tmov    %rbx,%rdx\n    1bd0:\t48 83 fa 01          \tcmp    $0x1,%rdx\n    1bd4:\t74 05                \tje     1bdb <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0xfd>\n    1bd6:\t48 89 c3             \tmov    %rax,%rbx\n    1bd9:\teb 64                \tjmp    1c3f <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x161>\n    1bdb:\t48 89 c7             \tmov    %rax,%rdi\n    1bde:\te8 00 00 00 00       \tcallq  1be3 <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x105>\n    1be3:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1be7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1bec:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1bf1:\te8 00 00 00 00       \tcallq  1bf6 <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x118>\n    1bf6:\t48 89 c3             \tmov    %rax,%rbx\n    1bf9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1bfd:\t48 8b 00             \tmov    (%rax),%rax\n    1c00:\t48 83 c0 10          \tadd    $0x10,%rax\n    1c04:\t48 8b 10             \tmov    (%rax),%rdx\n    1c07:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c0b:\t48 89 c7             \tmov    %rax,%rdi\n    1c0e:\tff d2                \tcallq  *%rdx\n    1c10:\t48 89 c6             \tmov    %rax,%rsi\n    1c13:\t48 89 df             \tmov    %rbx,%rdi\n    1c16:\te8 00 00 00 00       \tcallq  1c1b <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x13d>\n    1c1b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c20:\t48 89 c7             \tmov    %rax,%rdi\n    1c23:\te8 00 00 00 00       \tcallq  1c28 <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x14a>\n    1c28:\te8 00 00 00 00       \tcallq  1c2d <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x14f>\n    1c2d:\te9 69 ff ff ff       \tjmpq   1b9b <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0xbd>\n    1c32:\t48 89 c3             \tmov    %rax,%rbx\n    1c35:\te8 00 00 00 00       \tcallq  1c3a <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x15c>\n    1c3a:\teb 03                \tjmp    1c3f <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x161>\n    1c3c:\t48 89 c3             \tmov    %rax,%rbx\n    1c3f:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    1c43:\t48 89 c7             \tmov    %rax,%rdi\n    1c46:\te8 00 00 00 00       \tcallq  1c4b <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x16d>\n    1c4b:\t48 89 d8             \tmov    %rbx,%rax\n    1c4e:\t48 89 c7             \tmov    %rax,%rdi\n    1c51:\te8 00 00 00 00       \tcallq  1c56 <_ZL13doInteractivePN8xmlrpc_c10client_xmlE+0x178>\n    1c56:\t90                   \tnop\n    1c57:\t48 83 ec 80          \tsub    $0xffffffffffffff80,%rsp\n    1c5b:\t5b                   \tpop    %rbx\n    1c5c:\t41 5c                \tpop    %r12\n    1c5e:\t5d                   \tpop    %rbp\n    1c5f:\tc3                   \tretq   ", "code_s": "void __fastcall doInteractive(xmlrpc_c client_xml *a1) {\n  char <span class=\"supfact\">v1</span>[Number];\n  char <span class=\"supfact\">v2</span>[Number];\n  char <span class=\"supfact\">v3</span>[Number];\n  bool v4;\n  char v5;\n  v5 = Number;\n  while (!v5) {\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(<span class=\"supfact\">v1</span>);\n    getCommand((__int64)<span class=\"supfact\">v1</span>, &v4);\n    if (v4) {\n      v5 = Number;\n      std ostream operator<<(&std cout, &std endl<char, std char_traits<char>>);\n    } else {\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          basic_string(<span class=\"supfact\">v2</span>);\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>\n          vector(<span class=\"supfact\">v3</span>);\n      parseCommand((__int64)<span class=\"supfact\">v1</span>, (__int64)<span class=\"supfact\">v2</span>,\n                   (__int64)<span class=\"supfact\">v3</span>);\n      doCommand((__int64)a1, (__int64)<span class=\"supfact\">v2</span>,\n                (__int64)<span class=\"supfact\">v3</span>);\n      std vector<std __cxx11 basic_string<\n          char, std char_traits<char>,\n          std allocator<char>>> ~vector(<span class=\"supfact\">v3</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(<span class=\"supfact\">v2</span>);\n    }\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v1</span>);\n  }\n}", "code_t": "void __cdecl doInteractive(xmlrpc_c client_xml *const clientP) {\n  std string <span class=\"supfact\">cmd</span>;\n  std string <span class=\"supfact\">methodName</span>;\n  std vector<std __cxx11\n                 basic_string<char, std char_traits<char>, std allocator<char>>>\n      <span class=\"supfact\">paramArgs</span>;\n  bool eof;\n  bool quitRequested;\n  quitRequested = Number;\n  while (!quitRequested) {\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(&<span class=\"supfact\">cmd</span>);\n    getCommand(&<span class=\"supfact\">cmd</span>, &eof);\n    if (eof) {\n      quitRequested = Number;\n      std ostream operator<<(&std cout, &std endl<char, std char_traits<char>>);\n    } else {\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          basic_string(&<span class=\"supfact\">methodName</span>);\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>\n          vector(&<span class=\"supfact\">paramArgs</span>);\n      parseCommand(&<span class=\"supfact\">cmd</span>, &<span class=\"supfact\">methodName</span>,\n                   &<span class=\"supfact\">paramArgs</span>);\n      doCommand(clientP, &<span class=\"supfact\">methodName</span>,\n                &<span class=\"supfact\">paramArgs</span>);\n      std vector<std __cxx11 basic_string<\n          char, std char_traits<char>,\n          std allocator<char>>> ~vector(&<span class=\"supfact\">paramArgs</span>);\n      std __cxx11 basic_string<\n          char, std char_traits<char>,\n          std allocator<char>> ~basic_string(&<span class=\"supfact\">methodName</span>);\n    }\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">cmd</span>);\n  }\n}", "var": [{"name": "v3", "type": "char[39]", "ref_name": "paramArgs", "ref_type": "struct std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >> { std::_Vector_base<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >> baseclass_0; }"}, {"name": "v2", "type": "char[32]", "ref_name": "methodName", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v1", "type": "char[32]", "ref_name": "cmd", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": true}, {"repo_owner": "cust1105", "repo_name": "ffmpeg-4.0.2", "path": "cust1105/ffmpeg-4.0.2/7b50880ed2423c9dd6b9fe3e469b819cd0989540d7c7097949e7a5550038d114", "path_in_repo": "cust1105/ffmpeg-4.0.2/FFmpeg-4.0.2/FFmpeg-n4.0.2/libavcodec/wavpackenc.o", "objdump": "00000000000074cd <decorr_stereo_buffer>:\n    74cd:\t48 81 ec a8 00 00 00 \tsub    $0xa8,%rsp\n    74d4:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n    74d9:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n    74de:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n    74e3:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n    74e8:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n    74ed:\t44 89 4c 24 04       \tmov    %r9d,0x4(%rsp)\n    74f2:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n    74f7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    74fc:\tb9 0b 00 00 00       \tmov    $0xb,%ecx\n    7501:\t48 89 d7             \tmov    %rdx,%rdi\n    7504:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    7507:\t48 8b 4c 24 28       \tmov    0x28(%rsp),%rcx\n    750c:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n    7513:\t48 63 d0             \tmovslq %eax,%rdx\n    7516:\t48 89 d0             \tmov    %rdx,%rax\n    7519:\t48 c1 e0 02          \tshl    $0x2,%rax\n    751d:\t48 01 d0             \tadd    %rdx,%rax\n    7520:\t48 01 c0             \tadd    %rax,%rax\n    7523:\t48 01 d0             \tadd    %rdx,%rax\n    7526:\t48 c1 e0 03          \tshl    $0x3,%rax\n    752a:\t48 01 c8             \tadd    %rcx,%rax\n    752d:\t48 89 84 24 90 00 00 \tmov    %rax,0x90(%rsp)\n    7534:\t00 \n    7535:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    753c:\t00 \n    753d:\t8b 00                \tmov    (%rax),%eax\n    753f:\t89 84 24 8c 00 00 00 \tmov    %eax,0x8c(%rsp)\n    7546:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    754d:\t00 \n    754e:\t8b 40 04             \tmov    0x4(%rax),%eax\n    7551:\t89 84 24 88 00 00 00 \tmov    %eax,0x88(%rsp)\n    7558:\t83 bc 24 8c 00 00 00 \tcmpl   $0x7,0x8c(%rsp)\n    755f:\t07 \n    7560:\t75 0d                \tjne    756f <decorr_stereo_buffer+0xa2>\n    7562:\tc7 84 24 9c 00 00 00 \tmovl   $0x7,0x9c(%rsp)\n    7569:\t07 00 00 00 \n    756d:\teb 28                \tjmp    7597 <decorr_stereo_buffer+0xca>\n    756f:\t83 bc 24 8c 00 00 00 \tcmpl   $0x1,0x8c(%rsp)\n    7576:\t01 \n    7577:\t7f 0d                \tjg     7586 <decorr_stereo_buffer+0xb9>\n    7579:\tc7 84 24 9c 00 00 00 \tmovl   $0x3,0x9c(%rsp)\n    7580:\t03 00 00 00 \n    7584:\teb 11                \tjmp    7597 <decorr_stereo_buffer+0xca>\n    7586:\t8b 84 24 8c 00 00 00 \tmov    0x8c(%rsp),%eax\n    758d:\t83 c0 01             \tadd    $0x1,%eax\n    7590:\t89 84 24 9c 00 00 00 \tmov    %eax,0x9c(%rsp)\n    7597:\t8b 84 24 88 00 00 00 \tmov    0x88(%rsp),%eax\n    759e:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n    75a2:\t8b 84 24 9c 00 00 00 \tmov    0x9c(%rsp),%eax\n    75a9:\t89 44 24 30          \tmov    %eax,0x30(%rsp)\n    75ad:\tb8 00 08 00 00       \tmov    $0x800,%eax\n    75b2:\t81 7c 24 04 00 08 00 \tcmpl   $0x800,0x4(%rsp)\n    75b9:\t00 \n    75ba:\t0f 4e 44 24 04       \tcmovle 0x4(%rsp),%eax\n    75bf:\t89 c7                \tmov    %eax,%edi\n    75c1:\t4c 8d 44 24 30       \tlea    0x30(%rsp),%r8\n    75c6:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    75cb:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    75d0:\t48 8b 74 24 18       \tmov    0x18(%rsp),%rsi\n    75d5:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    75da:\t48 83 ec 08          \tsub    $0x8,%rsp\n    75de:\t6a ff                \tpushq  $0xffffffffffffffff\n    75e0:\t4d 89 c1             \tmov    %r8,%r9\n    75e3:\t41 89 f8             \tmov    %edi,%r8d\n    75e6:\t48 89 c7             \tmov    %rax,%rdi\n    75e9:\te8 35 d2 ff ff       \tcallq  4823 <decorr_stereo>\n    75ee:\t48 83 c4 10          \tadd    $0x10,%rsp\n    75f2:\t8b 84 24 8c 00 00 00 \tmov    0x8c(%rsp),%eax\n    75f9:\t89 44 24 30          \tmov    %eax,0x30(%rsp)\n    75fd:\t83 bc 24 b0 00 00 00 \tcmpl   $0x0,0xb0(%rsp)\n    7604:\t00 \n    7605:\t75 0f                \tjne    7616 <decorr_stereo_buffer+0x149>\n    7607:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    760c:\t48 89 c7             \tmov    %rax,%rdi\n    760f:\te8 41 e9 ff ff       \tcallq  5f55 <reverse_decorr>\n    7614:\teb 36                \tjmp    764c <decorr_stereo_buffer+0x17f>\n    7616:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    761b:\t48 83 c0 10          \tadd    $0x10,%rax\n    761f:\tba 20 00 00 00       \tmov    $0x20,%edx\n    7624:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    7629:\t48 89 c7             \tmov    %rax,%rdi\n    762c:\te8 00 00 00 00       \tcallq  7631 <decorr_stereo_buffer+0x164>\n    7631:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    7636:\t48 83 c0 30          \tadd    $0x30,%rax\n    763a:\tba 20 00 00 00       \tmov    $0x20,%edx\n    763f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    7644:\t48 89 c7             \tmov    %rax,%rdi\n    7647:\te8 00 00 00 00       \tcallq  764c <decorr_stereo_buffer+0x17f>\n    764c:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    7653:\t00 \n    7654:\t48 83 c0 10          \tadd    $0x10,%rax\n    7658:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n    765d:\t48 8d 4a 10          \tlea    0x10(%rdx),%rcx\n    7661:\tba 20 00 00 00       \tmov    $0x20,%edx\n    7666:\t48 89 ce             \tmov    %rcx,%rsi\n    7669:\t48 89 c7             \tmov    %rax,%rdi\n    766c:\te8 00 00 00 00       \tcallq  7671 <decorr_stereo_buffer+0x1a4>\n    7671:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    7678:\t00 \n    7679:\t48 83 c0 30          \tadd    $0x30,%rax\n    767d:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n    7682:\t48 8d 4a 30          \tlea    0x30(%rdx),%rcx\n    7686:\tba 20 00 00 00       \tmov    $0x20,%edx\n    768b:\t48 89 ce             \tmov    %rcx,%rsi\n    768e:\t48 89 c7             \tmov    %rax,%rdi\n    7691:\te8 00 00 00 00       \tcallq  7696 <decorr_stereo_buffer+0x1c9>\n    7696:\t8b 54 24 38          \tmov    0x38(%rsp),%edx\n    769a:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    76a1:\t00 \n    76a2:\t89 50 08             \tmov    %edx,0x8(%rax)\n    76a5:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    76a9:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    76b0:\t00 \n    76b1:\t89 50 0c             \tmov    %edx,0xc(%rax)\n    76b4:\t83 bc 24 8c 00 00 00 \tcmpl   $0x0,0x8c(%rsp)\n    76bb:\t00 \n    76bc:\t0f 85 cd 00 00 00    \tjne    778f <decorr_stereo_buffer+0x2c2>\n    76c2:\tc7 44 24 30 01 00 00 \tmovl   $0x1,0x30(%rsp)\n    76c9:\t00 \n    76ca:\t4c 8d 44 24 30       \tlea    0x30(%rsp),%r8\n    76cf:\t8b 7c 24 04          \tmov    0x4(%rsp),%edi\n    76d3:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    76d8:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    76dd:\t48 8b 74 24 18       \tmov    0x18(%rsp),%rsi\n    76e2:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    76e7:\t48 83 ec 08          \tsub    $0x8,%rsp\n    76eb:\t6a 01                \tpushq  $0x1\n    76ed:\t4d 89 c1             \tmov    %r8,%r9\n    76f0:\t41 89 f8             \tmov    %edi,%r8d\n    76f3:\t48 89 c7             \tmov    %rax,%rdi\n    76f6:\te8 28 d1 ff ff       \tcallq  4823 <decorr_stereo>\n    76fb:\t48 83 c4 10          \tadd    $0x10,%rsp\n    76ff:\tc7 44 24 30 00 00 00 \tmovl   $0x0,0x30(%rsp)\n    7706:\t00 \n    7707:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    770e:\t00 \n    770f:\t48 8d 48 10          \tlea    0x10(%rax),%rcx\n    7713:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    7718:\t48 83 c0 10          \tadd    $0x10,%rax\n    771c:\tba 20 00 00 00       \tmov    $0x20,%edx\n    7721:\t48 89 ce             \tmov    %rcx,%rsi\n    7724:\t48 89 c7             \tmov    %rax,%rdi\n    7727:\te8 00 00 00 00       \tcallq  772c <decorr_stereo_buffer+0x25f>\n    772c:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    7733:\t00 \n    7734:\t48 8d 48 30          \tlea    0x30(%rax),%rcx\n    7738:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    773d:\t48 83 c0 30          \tadd    $0x30,%rax\n    7741:\tba 20 00 00 00       \tmov    $0x20,%edx\n    7746:\t48 89 ce             \tmov    %rcx,%rsi\n    7749:\t48 89 c7             \tmov    %rax,%rdi\n    774c:\te8 00 00 00 00       \tcallq  7751 <decorr_stereo_buffer+0x284>\n    7751:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n    7758:\t99                   \tcltd   \n    7759:\tf7 7c 24 04          \tidivl  0x4(%rsp)\n    775d:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n    7761:\t8b 54 24 38          \tmov    0x38(%rsp),%edx\n    7765:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    776c:\t00 \n    776d:\t89 50 08             \tmov    %edx,0x8(%rax)\n    7770:\t8b 84 24 84 00 00 00 \tmov    0x84(%rsp),%eax\n    7777:\t99                   \tcltd   \n    7778:\tf7 7c 24 04          \tidivl  0x4(%rsp)\n    777c:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n    7780:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    7784:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    778b:\t00 \n    778c:\t89 50 0c             \tmov    %edx,0xc(%rax)\n    778f:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    7794:\t8b 80 88 05 00 00    \tmov    0x588(%rax),%eax\n    779a:\t85 c0                \ttest   %eax,%eax\n    779c:\t74 37                \tje     77d5 <decorr_stereo_buffer+0x308>\n    779e:\t4c 8d 44 24 30       \tlea    0x30(%rsp),%r8\n    77a3:\t8b 7c 24 04          \tmov    0x4(%rsp),%edi\n    77a7:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    77ac:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    77b1:\t48 8b 74 24 18       \tmov    0x18(%rsp),%rsi\n    77b6:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    77bb:\t48 83 ec 08          \tsub    $0x8,%rsp\n    77bf:\t6a 01                \tpushq  $0x1\n    77c1:\t4d 89 c1             \tmov    %r8,%r9\n    77c4:\t41 89 f8             \tmov    %edi,%r8d\n    77c7:\t48 89 c7             \tmov    %rax,%rdi\n    77ca:\te8 54 d0 ff ff       \tcallq  4823 <decorr_stereo>\n    77cf:\t48 83 c4 10          \tadd    $0x10,%rsp\n    77d3:\teb 2b                \tjmp    7800 <decorr_stereo_buffer+0x333>\n    77d5:\t4c 8d 44 24 30       \tlea    0x30(%rsp),%r8\n    77da:\t8b 7c 24 04          \tmov    0x4(%rsp),%edi\n    77de:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    77e3:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    77e8:\t48 8b 74 24 18       \tmov    0x18(%rsp),%rsi\n    77ed:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    77f2:\t4d 89 c1             \tmov    %r8,%r9\n    77f5:\t41 89 f8             \tmov    %edi,%r8d\n    77f8:\t48 89 c7             \tmov    %rax,%rdi\n    77fb:\te8 a7 ea ff ff       \tcallq  62a7 <decorr_stereo_quick>\n    7800:\t90                   \tnop\n    7801:\t48 81 c4 a8 00 00 00 \tadd    $0xa8,%rsp\n    7808:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall decorr_stereo_buffer(__int64 a1, int *a2, int *a3,\n                                                 _DWORD *a4, _DWORD *a5, int a6,\n                                                 int a7) {\n  unsigned int v7;\n  unsigned __int64 result;\n  unsigned int <span class=\"supfact\">v13</span>[Number];\n  unsigned int v14;\n  int v15;\n  int *v16;\n  unsigned int v17;\n  memset(<span class=\"supfact\">v13</span>, Number, sizeof(<span class=\"supfact\">v13</span>));\n  v16 = (int *)(a1 + Number L * a7);\n  v15 = *v16;\n  v14 = v16[Number];\n  if (v15 == Number) {\n    v17 = Number;\n  } else if (v15 > Number) {\n    v17 = v15 + Number;\n  } else {\n    v17 = Number;\n  }\n  <span class=\"supfact\">v13</span>[Number] = v14;\n  <span class=\"supfact\">v13</span>[Number] = v17;\n  v7 = Number;\n  if (a6 <= Number)\n    v7 = a6;\n  decorr_stereo(a2, a3, a4, a5, v7, <span class=\"supfact\">v13</span>, Number);\n  <span class=\"supfact\">v13</span>[Number] = v15;\n  if (a7) {\n    memset(&<span class=\"supfact\">v13</span>[Number], Number, Number);\n    memset(&<span class=\"supfact\">v13</span>[Number], Number, Number);\n  } else {\n    reverse_decorr(<span class=\"supfact\">v13</span>);\n  }\n  memcpy(v16 + Number, &<span class=\"supfact\">v13</span>[Number], Number);\n  memcpy(v16 + Number, &<span class=\"supfact\">v13</span>[Number], Number);\n  v16[Number] = <span class=\"supfact\">v13</span>[Number];\n  v16[Number] = <span class=\"supfact\">v13</span>[Number];\n  if (!v15) {\n    <span class=\"supfact\">v13</span>[Number] = Number;\n    decorr_stereo(a2, a3, a4, a5, a6, <span class=\"supfact\">v13</span>, Number);\n    <span class=\"supfact\">v13</span>[Number] = Number;\n    memcpy(&<span class=\"supfact\">v13</span>[Number], v16 + Number, Number);\n    memcpy(&<span class=\"supfact\">v13</span>[Number], v16 + Number, Number);\n    <span class=\"supfact\">v13</span>[Number] = (signed int)<span class=\"supfact\">v13</span>[Number] / a6;\n    v16[Number] = (signed int)<span class=\"supfact\">v13</span>[Number] / a6;\n    <span class=\"supfact\">v13</span>[Number] = (signed int)<span class=\"supfact\">v13</span>[Number] / a6;\n    v16[Number] = (signed int)<span class=\"supfact\">v13</span>[Number] / a6;\n  }\n  if (*(_DWORD *)(a1 + Number))\n    result = decorr_stereo(a2, a3, a4, a5, a6, <span class=\"supfact\">v13</span>, Number);\n  else\n    result = decorr_stereo_quick((__int64)a2, (__int64)a3, (__int64)a4,\n                                 (__int64)a5, a6, <span class=\"supfact\">v13</span>);\n  return result;\n}", "code_t": "void __cdecl decorr_stereo_buffer(WavPackExtraInfo_0 *info, int32_t *in_left,\n                                  int32_t *in_right, int32_t *out_left,\n                                  int32_t *out_right, int nb_samples,\n                                  int tindex) {\n  int v7;\n  Decorr <span class=\"supfact\">dp</span>;\n  int term;\n  int delta;\n  Decorr *dppi;\n  int pre_delta;\n  memset(&<span class=\"supfact\">dp</span>, Number, sizeof(<span class=\"supfact\">dp</span>));\n  dppi = &info->dps[tindex];\n  delta = dppi->delta;\n  term = dppi->value;\n  if (delta == Number) {\n    pre_delta = Number;\n  } else if (delta > Number) {\n    pre_delta = delta + Number;\n  } else {\n    pre_delta = Number;\n  }\n  <span class=\"supfact\">dp</span>.value = term;\n  <span class=\"supfact\">dp</span>.delta = pre_delta;\n  v7 = Number;\n  if (nb_samples <= Number)\n    v7 = nb_samples;\n  decorr_stereo(in_left, in_right, out_left, out_right, v7, &<span class=\"supfact\">dp</span>,\n                Number);\n  <span class=\"supfact\">dp</span>.delta = delta;\n  if (tindex) {\n    memset(<span class=\"supfact\">dp</span>.samplesA, Number,\n           sizeof(<span class=\"supfact\">dp</span>.samplesA));\n    memset(<span class=\"supfact\">dp</span>.samplesB, Number,\n           sizeof(<span class=\"supfact\">dp</span>.samplesB));\n  } else {\n    reverse_decorr(&<span class=\"supfact\">dp</span>);\n  }\n  memcpy(dppi->samplesA, <span class=\"supfact\">dp</span>.samplesA, sizeof(dppi->samplesA));\n  memcpy(dppi->samplesB, <span class=\"supfact\">dp</span>.samplesB, sizeof(dppi->samplesB));\n  dppi->weightA = <span class=\"supfact\">dp</span>.weightA;\n  dppi->weightB = <span class=\"supfact\">dp</span>.weightB;\n  if (!delta) {\n    <span class=\"supfact\">dp</span>.delta = Number;\n    decorr_stereo(in_left, in_right, out_left, out_right, nb_samples,\n                  &<span class=\"supfact\">dp</span>, Number);\n    <span class=\"supfact\">dp</span>.delta = Number;\n    memcpy(<span class=\"supfact\">dp</span>.samplesA, dppi->samplesA,\n           sizeof(<span class=\"supfact\">dp</span>.samplesA));\n    memcpy(<span class=\"supfact\">dp</span>.samplesB, dppi->samplesB,\n           sizeof(<span class=\"supfact\">dp</span>.samplesB));\n    <span class=\"supfact\">dp</span>.weightA = <span class=\"supfact\">dp</span>.sumA / nb_samples;\n    dppi->weightA = <span class=\"supfact\">dp</span>.sumA / nb_samples;\n    <span class=\"supfact\">dp</span>.weightB = <span class=\"supfact\">dp</span>.sumB / nb_samples;\n    dppi->weightB = <span class=\"supfact\">dp</span>.sumB / nb_samples;\n  }\n  if (info->gt16bit)\n    decorr_stereo(in_left, in_right, out_left, out_right, nb_samples,\n                  &<span class=\"supfact\">dp</span>, Number);\n  else\n    decorr_stereo_quick(in_left, in_right, out_left, out_right, nb_samples,\n                        &<span class=\"supfact\">dp</span>);\n}", "var": [{"name": "v13", "type": "struct Decorr { int delta; int value; int weightA; int weightB; int[8] samplesA; int[8] samplesB; int sumA; int sumB; }", "ref_name": "dp", "ref_type": "struct Decorr { int delta; int value; int weightA; int weightB; int[8] samplesA; int[8] samplesB; int sumA; int sumB; }"}], "body_in_train": true}, {"repo_owner": "leecolleton", "repo_name": "gfiber-gflt100", "path": "leecolleton/gfiber-gflt100/bd618c9a16360ab6aa3eca12a3ea556027e4e8c3250464326bdad73cced09db5", "path_in_repo": "leecolleton/gfiber-gflt100/userspace/gpl/apps/zebra/bgpd/bgp_vty.o", "objdump": "000000000000083d <bgp_router_id>:\n     83d:\t55                   \tpush   %rbp\n     83e:\t48 89 e5             \tmov    %rsp,%rbp\n     841:\t48 83 ec 30          \tsub    $0x30,%rsp\n     845:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     849:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     84d:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n     850:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n     854:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     858:\t48 8b 80 e8 00 00 00 \tmov    0xe8(%rax),%rax\n     85f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     863:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     867:\t48 8b 00             \tmov    (%rax),%rax\n     86a:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n     86e:\t48 89 d6             \tmov    %rdx,%rsi\n     871:\t48 89 c7             \tmov    %rax,%rdi\n     874:\te8 00 00 00 00       \tcallq  879 <bgp_router_id+0x3c>\n     879:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     87c:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     880:\t75 34                \tjne    8b6 <bgp_router_id+0x79>\n     882:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     886:\t8b 40 04             \tmov    0x4(%rax),%eax\n     889:\t85 c0                \ttest   %eax,%eax\n     88b:\t75 07                \tjne    894 <bgp_router_id+0x57>\n     88d:\tba 00 00 00 00       \tmov    $0x0,%edx\n     892:\teb 05                \tjmp    899 <bgp_router_id+0x5c>\n     894:\tba 00 00 00 00       \tmov    $0x0,%edx\n     899:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     89d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     8a2:\t48 89 c7             \tmov    %rax,%rdi\n     8a5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     8aa:\te8 00 00 00 00       \tcallq  8af <bgp_router_id+0x72>\n     8af:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     8b4:\teb 18                \tjmp    8ce <bgp_router_id+0x91>\n     8b6:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n     8ba:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     8be:\t48 89 d6             \tmov    %rdx,%rsi\n     8c1:\t48 89 c7             \tmov    %rax,%rdi\n     8c4:\te8 00 00 00 00       \tcallq  8c9 <bgp_router_id+0x8c>\n     8c9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     8ce:\tc9                   \tleaveq \n     8cf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bgp_router_id(__int64 a1, __int64 a2, __int64 a3,\n                                 const char **a4) {\n  const char *v4;\n  __int64 result;\n  struct in_addr <span class=\"supfact\">inp</span>;\n  __int64 v8;\n  v8 = *(_QWORD *)(a2 + Number);\n  if (inet_aton(*a4, &<span class=\"supfact\">inp</span>)) {\n    bgp_router_id_set(v8, &<span class=\"supfact\">inp</span>);\n    result = Number L;\n  } else {\n    if (*(_DWORD *)(a2 + Number))\n      v4 = (const char *)&unk_17B1B;\n    else\n      v4 = (const char *)&unk_17B18;\n    vty_out(a2, String, v4);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl bgp_router_id(cmd_element *self, vty *vty, int argc, char **argv) {\n  const char *v4;\n  int result;\n  in_addr <span class=\"supfact\">id</span>;\n  bgp *bgp;\n  bgp = (bgp *)vty->index;\n  if (inet_aton(*argv, &<span class=\"supfact\">id</span>)) {\n    bgp_router_id_set(bgp, &<span class=\"supfact\">id</span>);\n    result = Number;\n  } else {\n    if (vty->type)\n      v4 = (const char *)&unk_17B1B;\n    else\n      v4 = (const char *)&unk_17B18;\n    vty_out(vty, String, v4);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "inp", "type": "struct in_addr { in_addr_t s_addr; }", "ref_name": "id", "ref_type": "struct in_addr { in_addr_t s_addr; }"}], "body_in_train": true}, {"repo_owner": "sconklin", "repo_name": "ltp-tools", "path": "sconklin/ltp-tools/f2f9260ff27b53830307c0bc2ebdbdc6b199e1008726850c555fb0b444145f0f", "path_in_repo": "sconklin/ltp-tools/ltp-full-20110915/tools/netpipe-2.4/NPtcp.o", "objdump": "0000000000000fe3 <When>:\n     fe3:\t55                   \tpush   %rbp\n     fe4:\t48 89 e5             \tmov    %rsp,%rbp\n     fe7:\t48 83 ec 10          \tsub    $0x10,%rsp\n     feb:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n     fef:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     ff4:\t48 89 c7             \tmov    %rax,%rdi\n     ff7:\te8 00 00 00 00       \tcallq  ffc <When+0x19>\n     ffc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1000:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n    1005:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1009:\tf2 48 0f 2a d0       \tcvtsi2sd %rax,%xmm2\n    100e:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 1016 <When+0x33>\n    1015:\t00 \n    1016:\tf2 0f 59 c2          \tmulsd  %xmm2,%xmm0\n    101a:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n    101e:\tc9                   \tleaveq \n    101f:\tc3                   \tretq   ", "code_s": "double When() {\n  struct timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  return Number * (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_usec) +\n         (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_sec);\n}", "code_t": "double __cdecl When() {\n  timeval <span class=\"supfact\">tp</span>;\n  gettimeofday(&<span class=\"supfact\">tp</span>, Number L);\n  return Number * (double)SLODWORD(<span class=\"supfact\">tp</span>.tv_usec) +\n         (double)SLODWORD(<span class=\"supfact\">tp</span>.tv_sec);\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tp", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/193ee31744bf94432d70b3c672eda529a3974a56c4540d5df4e50349387210b1", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/pkey/rsa_verify_pss", "objdump": "000000000043c870 <mbedtls_chacha20_crypt>:\n  43c870:\t55                   \tpush   %rbp\n  43c871:\t48 89 e5             \tmov    %rsp,%rbp\n  43c874:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n  43c87b:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n  43c882:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n  43c889:\t89 95 5c ff ff ff    \tmov    %edx,-0xa4(%rbp)\n  43c88f:\t48 89 8d 50 ff ff ff \tmov    %rcx,-0xb0(%rbp)\n  43c896:\t4c 89 85 48 ff ff ff \tmov    %r8,-0xb8(%rbp)\n  43c89d:\t4c 89 8d 40 ff ff ff \tmov    %r9,-0xc0(%rbp)\n  43c8a4:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  43c8ab:\t48 89 c7             \tmov    %rax,%rdi\n  43c8ae:\te8 bc f7 ff ff       \tcallq  43c06f <mbedtls_chacha20_init>\n  43c8b3:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n  43c8ba:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  43c8c1:\t48 89 d6             \tmov    %rdx,%rsi\n  43c8c4:\t48 89 c7             \tmov    %rax,%rdi\n  43c8c7:\te8 0e f8 ff ff       \tcallq  43c0da <mbedtls_chacha20_setkey>\n  43c8cc:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  43c8cf:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  43c8d3:\t75 51                \tjne    43c926 <mbedtls_chacha20_crypt+0xb6>\n  43c8d5:\t8b 95 5c ff ff ff    \tmov    -0xa4(%rbp),%edx\n  43c8db:\t48 8b 8d 60 ff ff ff \tmov    -0xa0(%rbp),%rcx\n  43c8e2:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  43c8e9:\t48 89 ce             \tmov    %rcx,%rsi\n  43c8ec:\t48 89 c7             \tmov    %rax,%rdi\n  43c8ef:\te8 90 fa ff ff       \tcallq  43c384 <mbedtls_chacha20_starts>\n  43c8f4:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  43c8f7:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  43c8fb:\t75 2c                \tjne    43c929 <mbedtls_chacha20_crypt+0xb9>\n  43c8fd:\t48 8b 8d 40 ff ff ff \tmov    -0xc0(%rbp),%rcx\n  43c904:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n  43c90b:\t48 8b b5 50 ff ff ff \tmov    -0xb0(%rbp),%rsi\n  43c912:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  43c919:\t48 89 c7             \tmov    %rax,%rdi\n  43c91c:\te8 91 fb ff ff       \tcallq  43c4b2 <mbedtls_chacha20_update>\n  43c921:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  43c924:\teb 04                \tjmp    43c92a <mbedtls_chacha20_crypt+0xba>\n  43c926:\t90                   \tnop\n  43c927:\teb 01                \tjmp    43c92a <mbedtls_chacha20_crypt+0xba>\n  43c929:\t90                   \tnop\n  43c92a:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  43c931:\t48 89 c7             \tmov    %rax,%rdi\n  43c934:\te8 7a f7 ff ff       \tcallq  43c0b3 <mbedtls_chacha20_free>\n  43c939:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  43c93c:\tc9                   \tleaveq \n  43c93d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_chacha20_crypt(unsigned __int16 *a1,\n                                          unsigned __int16 *a2, int a3,\n                                          unsigned __int64 a4, __int64 a5,\n                                          __int64 a6) {\n  _DWORD <span class=\"supfact\">v11</span>[Number];\n  unsigned int v12;\n  mbedtls_chacha20_init((__int64)<span class=\"supfact\">v11</span>);\n  v12 = mbedtls_chacha20_setkey(<span class=\"supfact\">v11</span>, a1);\n  if (!v12) {\n    v12 = mbedtls_chacha20_starts((__int64)<span class=\"supfact\">v11</span>, a2, a3);\n    if (!v12)\n      v12 = mbedtls_chacha20_update((__int64)<span class=\"supfact\">v11</span>, a4, a5, a6);\n  }\n  mbedtls_chacha20_free((__int64)<span class=\"supfact\">v11</span>);\n  return v12;\n}", "code_t": "int __cdecl mbedtls_chacha20_crypt(const unsigned __int8 *key,\n                                   const unsigned __int8 *nonce,\n                                   uint32_t counter, size_t data_len,\n                                   const unsigned __int8 *input,\n                                   unsigned __int8 *output) {\n  mbedtls_chacha20_context_0 <span class=\"supfact\">ctx</span>;\n  int ret;\n  mbedtls_chacha20_init(&<span class=\"supfact\">ctx</span>);\n  ret = mbedtls_chacha20_setkey(&<span class=\"supfact\">ctx</span>, key);\n  if (!ret) {\n    ret = mbedtls_chacha20_starts(&<span class=\"supfact\">ctx</span>, nonce, counter);\n    if (!ret)\n      ret = mbedtls_chacha20_update(&<span class=\"supfact\">ctx</span>, data_len, input,\n                                    output);\n  }\n  mbedtls_chacha20_free(&<span class=\"supfact\">ctx</span>);\n  return ret;\n}", "var": [{"name": "v11", "type": "struct mbedtls_chacha20_context_0 { uint32_t[16] state; uint8_t[64] keystream8; size_t keystream_bytes_used; }", "ref_name": "ctx", "ref_type": "struct mbedtls_chacha20_context_0 { uint32_t[16] state; uint8_t[64] keystream8; size_t keystream_bytes_used; }"}], "body_in_train": true}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/ccd54de96f65076d5d5e2ecad97ff365b9174565be63883063ec7f85a00797c0", "path_in_repo": "eerimoq/pumbaa/simba/tst/filesystems/fs/build/linux/obj/usr/src/repo/simba/src/filesystems/fs.o", "objdump": "0000000000000000 <cmd_write_cb>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <cmd_write_cb+0xd>\n   d:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n  10:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  14:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  18:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n  1c:\t4c 89 45 88          \tmov    %r8,-0x78(%rbp)\n  20:\t4c 89 4d 80          \tmov    %r9,-0x80(%rbp)\n  24:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b <cmd_write_cb+0x2b>\n  2b:\t48 83 c0 01          \tadd    $0x1,%rax\n  2f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 36 <cmd_write_cb+0x36>\n  36:\t83 7d ac 01          \tcmpl   $0x1,-0x54(%rbp)\n  3a:\t7f 44                \tjg     80 <cmd_write_cb+0x80>\n  3c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 43 <cmd_write_cb+0x43>\n  43:\t48 83 c0 01          \tadd    $0x1,%rax\n  47:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 4e <cmd_write_cb+0x4e>\n  4e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  52:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  57:\t48 89 c7             \tmov    %rax,%rdi\n  5a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  5f:\te8 00 00 00 00       \tcallq  64 <cmd_write_cb+0x64>\n  64:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6b <cmd_write_cb+0x6b>\n  6b:\t48 83 c0 01          \tadd    $0x1,%rax\n  6f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 76 <cmd_write_cb+0x76>\n  76:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  7b:\te9 af 02 00 00       \tjmpq   32f <cmd_write_cb+0x32f>\n  80:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  84:\t48 83 c0 08          \tadd    $0x8,%rax\n  88:\t48 8b 08             \tmov    (%rax),%rcx\n  8b:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  8f:\tba 53 00 00 00       \tmov    $0x53,%edx\n  94:\t48 89 ce             \tmov    %rcx,%rsi\n  97:\t48 89 c7             \tmov    %rax,%rdi\n  9a:\te8 00 00 00 00       \tcallq  9f <cmd_write_cb+0x9f>\n  9f:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # a6 <cmd_write_cb+0xa6>\n  a6:\t48 83 c2 01          \tadd    $0x1,%rdx\n  aa:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # b1 <cmd_write_cb+0xb1>\n  b1:\t85 c0                \ttest   %eax,%eax\n  b3:\t74 3d                \tje     f2 <cmd_write_cb+0xf2>\n  b5:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  b9:\t48 83 c0 08          \tadd    $0x8,%rax\n  bd:\t48 8b 10             \tmov    (%rax),%rdx\n  c0:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  c4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  c9:\t48 89 c7             \tmov    %rax,%rdi\n  cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  d1:\te8 00 00 00 00       \tcallq  d6 <cmd_write_cb+0xd6>\n  d6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # dd <cmd_write_cb+0xdd>\n  dd:\t48 83 c0 01          \tadd    $0x1,%rax\n  e1:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # e8 <cmd_write_cb+0xe8>\n  e8:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  ed:\te9 3d 02 00 00       \tjmpq   32f <cmd_write_cb+0x32f>\n  f2:\t83 7d ac 03          \tcmpl   $0x3,-0x54(%rbp)\n  f6:\t0f 85 b0 00 00 00    \tjne    1ac <cmd_write_cb+0x1ac>\n  fc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 103 <cmd_write_cb+0x103>\n 103:\t48 83 c0 01          \tadd    $0x1,%rax\n 107:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 10e <cmd_write_cb+0x10e>\n 10e:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 112:\t48 83 c0 10          \tadd    $0x10,%rax\n 116:\t48 8b 00             \tmov    (%rax),%rax\n 119:\t48 89 c7             \tmov    %rax,%rdi\n 11c:\te8 00 00 00 00       \tcallq  121 <cmd_write_cb+0x121>\n 121:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 125:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 129:\t48 83 c0 10          \tadd    $0x10,%rax\n 12d:\t48 8b 08             \tmov    (%rax),%rcx\n 130:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 134:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 138:\t48 89 ce             \tmov    %rcx,%rsi\n 13b:\t48 89 c7             \tmov    %rax,%rdi\n 13e:\te8 00 00 00 00       \tcallq  143 <cmd_write_cb+0x143>\n 143:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 14a <cmd_write_cb+0x14a>\n 14a:\t48 83 c2 01          \tadd    $0x1,%rdx\n 14e:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 155 <cmd_write_cb+0x155>\n 155:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 159:\t48 39 d0             \tcmp    %rdx,%rax\n 15c:\t0f 84 aa 01 00 00    \tje     30c <cmd_write_cb+0x30c>\n 162:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 169 <cmd_write_cb+0x169>\n 169:\t48 83 c0 01          \tadd    $0x1,%rax\n 16d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 174 <cmd_write_cb+0x174>\n 174:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 178:\t48 83 c0 08          \tadd    $0x8,%rax\n 17c:\t48 8b 10             \tmov    (%rax),%rdx\n 17f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 183:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 188:\t48 89 c7             \tmov    %rax,%rdi\n 18b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 190:\te8 00 00 00 00       \tcallq  195 <cmd_write_cb+0x195>\n 195:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 19c <cmd_write_cb+0x19c>\n 19c:\t48 83 c0 01          \tadd    $0x1,%rax\n 1a0:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1a7 <cmd_write_cb+0x1a7>\n 1a7:\te9 60 01 00 00       \tjmpq   30c <cmd_write_cb+0x30c>\n 1ac:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1b3 <cmd_write_cb+0x1b3>\n 1b3:\t48 83 c0 01          \tadd    $0x1,%rax\n 1b7:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1be <cmd_write_cb+0x1be>\n 1be:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 1c2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1c7:\t48 89 c7             \tmov    %rax,%rdi\n 1ca:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1cf:\te8 00 00 00 00       \tcallq  1d4 <cmd_write_cb+0x1d4>\n 1d4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1db <cmd_write_cb+0x1db>\n 1db:\t48 83 c0 01          \tadd    $0x1,%rax\n 1df:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1e6 <cmd_write_cb+0x1e6>\n 1e6:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 1ed:\t00 \n 1ee:\t48 8d 4d bf          \tlea    -0x41(%rbp),%rcx\n 1f2:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1f6:\tba 01 00 00 00       \tmov    $0x1,%edx\n 1fb:\t48 89 ce             \tmov    %rcx,%rsi\n 1fe:\t48 89 c7             \tmov    %rax,%rdi\n 201:\te8 00 00 00 00       \tcallq  206 <cmd_write_cb+0x206>\n 206:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 20d <cmd_write_cb+0x20d>\n 20d:\t48 83 c2 01          \tadd    $0x1,%rdx\n 211:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 218 <cmd_write_cb+0x218>\n 218:\t48 83 f8 01          \tcmp    $0x1,%rax\n 21c:\t74 17                \tje     235 <cmd_write_cb+0x235>\n 21e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 225 <cmd_write_cb+0x225>\n 225:\t48 83 c0 01          \tadd    $0x1,%rax\n 229:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 230 <cmd_write_cb+0x230>\n 230:\te9 a0 00 00 00       \tjmpq   2d5 <cmd_write_cb+0x2d5>\n 235:\t0f b6 45 bf          \tmovzbl -0x41(%rbp),%eax\n 239:\t3c 04                \tcmp    $0x4,%al\n 23b:\t75 17                \tjne    254 <cmd_write_cb+0x254>\n 23d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 244 <cmd_write_cb+0x244>\n 244:\t48 83 c0 01          \tadd    $0x1,%rax\n 248:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 24f <cmd_write_cb+0x24f>\n 24f:\te9 81 00 00 00       \tjmpq   2d5 <cmd_write_cb+0x2d5>\n 254:\t48 8d 4d bf          \tlea    -0x41(%rbp),%rcx\n 258:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 25c:\tba 01 00 00 00       \tmov    $0x1,%edx\n 261:\t48 89 ce             \tmov    %rcx,%rsi\n 264:\t48 89 c7             \tmov    %rax,%rdi\n 267:\te8 00 00 00 00       \tcallq  26c <cmd_write_cb+0x26c>\n 26c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 273 <cmd_write_cb+0x273>\n 273:\t48 83 c2 01          \tadd    $0x1,%rdx\n 277:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 27e <cmd_write_cb+0x27e>\n 27e:\t48 83 f8 01          \tcmp    $0x1,%rax\n 282:\t74 35                \tje     2b9 <cmd_write_cb+0x2b9>\n 284:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 288:\t48 83 c0 08          \tadd    $0x8,%rax\n 28c:\t48 8b 10             \tmov    (%rax),%rdx\n 28f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 293:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 298:\t48 89 c7             \tmov    %rax,%rdi\n 29b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2a0:\te8 00 00 00 00       \tcallq  2a5 <cmd_write_cb+0x2a5>\n 2a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2ac <cmd_write_cb+0x2ac>\n 2ac:\t48 83 c0 01          \tadd    $0x1,%rax\n 2b0:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2b7 <cmd_write_cb+0x2b7>\n 2b7:\teb 53                \tjmp    30c <cmd_write_cb+0x30c>\n 2b9:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n 2be:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2c5 <cmd_write_cb+0x2c5>\n 2c5:\t48 83 c0 01          \tadd    $0x1,%rax\n 2c9:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2d0 <cmd_write_cb+0x2d0>\n 2d0:\te9 19 ff ff ff       \tjmpq   1ee <cmd_write_cb+0x1ee>\n 2d5:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 2d9:\t48 83 c0 08          \tadd    $0x8,%rax\n 2dd:\t48 8b 08             \tmov    (%rax),%rcx\n 2e0:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 2e4:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 2e8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2ed:\t48 89 c7             \tmov    %rax,%rdi\n 2f0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2f5:\te8 00 00 00 00       \tcallq  2fa <cmd_write_cb+0x2fa>\n 2fa:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 301 <cmd_write_cb+0x301>\n 301:\t48 83 c0 01          \tadd    $0x1,%rax\n 305:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 30c <cmd_write_cb+0x30c>\n 30c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 310:\t48 89 c7             \tmov    %rax,%rdi\n 313:\te8 00 00 00 00       \tcallq  318 <cmd_write_cb+0x318>\n 318:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 31f <cmd_write_cb+0x31f>\n 31f:\t48 83 c0 01          \tadd    $0x1,%rax\n 323:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 32a <cmd_write_cb+0x32a>\n 32a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 32f:\tc9                   \tleaveq \n 330:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cmd_write_cb(int a1, __int64 a2, __int64 a3, __int64 a4) {\n  __int64 result;\n  int v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  char v11;\n  char <span class=\"supfact\">v12</span>[Number];\n  size_t v13;\n  ++_gcov0_cmd_write_cb;\n  if (a1 > Number) {\n    v5 = fs_open(<span class=\"supfact\">v12</span>, *(_QWORD *)(a2 + Number), Number L);\n    ++qword_7E98;\n    if (v5) {\n      std_fprintf(a3, String, *(const char **)(a2 + Number));\n      ++qword_7EA0;\n      result = Number;\n    } else {\n      if (a1 == Number) {\n        ++qword_7EA8;\n        v13 = strlen(*(const char **)(a2 + Number));\n        v6 = fs_write(<span class=\"supfact\">v12</span>, *(_QWORD *)(a2 + Number), v13);\n        ++qword_7EB8;\n        if (v6 != v13) {\n          ++qword_7EC0;\n          std_fprintf(a3, String, *(const char **)(a2 + Number));\n          ++qword_7EC8;\n        }\n      } else {\n        ++qword_7EB0;\n        std_fprintf(a3, String);\n        ++qword_7ED0;\n        v13 = Number L;\n        while (Number) {\n          v7 = chan_read(a4, &v11, Number L);\n          ++qword_7ED8;\n          if (v7 != Number) {\n            ++qword_7EE0;\n            goto LABEL_16;\n          }\n          if (v11 == Number)\n            break;\n          v8 = fs_write(<span class=\"supfact\">v12</span>, &v11, Number L);\n          ++qword_7EF0;\n          if (v8 != Number) {\n            std_fprintf(a3, String, *(const char **)(a2 + Number));\n            ++qword_7EF8;\n            goto LABEL_17;\n          }\n          ++v13;\n          ++qword_7F00;\n        }\n        ++qword_7EE8;\n      LABEL_16:\n        std_fprintf(a3, String, v13, *(const char **)(a2 + Number));\n        ++qword_7F08;\n      }\n    LABEL_17:\n      fs_close(<span class=\"supfact\">v12</span>);\n      ++qword_7F10;\n      result = Number L;\n    }\n  } else {\n    ++qword_7E88;\n    std_fprintf(a3, String);\n    ++qword_7E90;\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl cmd_write_cb(int argc, const char **argv, void *chout_p,\n                         void *chin_p, void *arg_p, void *call_arg_p) {\n  int result;\n  int v7;\n  ssize_t v8;\n  __int64 v9;\n  ssize_t v10;\n  char data;\n  fs_file_t <span class=\"supfact\">file</span>;\n  size_t size;\n  ++_gcov0_cmd_write_cb;\n  if (argc > Number) {\n    v7 = fs_open(&<span class=\"supfact\">file</span>, argv[Number], Number);\n    ++qword_7E98;\n    if (v7) {\n      std_fprintf(chout_p, String, argv[Number]);\n      ++qword_7EA0;\n      result = Number;\n    } else {\n      if (argc == Number) {\n        ++qword_7EA8;\n        size = strlen(argv[Number]);\n        v8 = fs_write(&<span class=\"supfact\">file</span>, argv[Number], size);\n        ++qword_7EB8;\n        if (v8 != size) {\n          ++qword_7EC0;\n          std_fprintf(chout_p, String, argv[Number]);\n          ++qword_7EC8;\n        }\n      } else {\n        ++qword_7EB0;\n        std_fprintf(chout_p, String);\n        ++qword_7ED0;\n        size = Number L;\n        while (Number) {\n          v9 = chan_read(chin_p, &data, Number L);\n          ++qword_7ED8;\n          if (v9 != Number) {\n            ++qword_7EE0;\n            goto LABEL_16;\n          }\n          if (data == Number)\n            break;\n          v10 = fs_write(&<span class=\"supfact\">file</span>, &data, Number);\n          ++qword_7EF0;\n          if (v10 != Number) {\n            std_fprintf(chout_p, String, argv[Number]);\n            ++qword_7EF8;\n            goto err;\n          }\n          ++size;\n          ++qword_7F00;\n        }\n        ++qword_7EE8;\n      LABEL_16:\n        std_fprintf(chout_p, String, size, argv[Number]);\n        ++qword_7F08;\n      }\n    err:\n      fs_close(&<span class=\"supfact\">file</span>);\n      ++qword_7F10;\n      result = Number;\n    }\n  } else {\n    ++qword_7E88;\n    std_fprintf(chout_p, String);\n    ++qword_7E90;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v12", "type": "struct fs_file_t { fs_filesystem_t * filesystem_p; $2C6130CE942FA32A6DEA1C528BBF456E u; }", "ref_name": "file", "ref_type": "struct fs_file_t { fs_filesystem_t * filesystem_p; $2C6130CE942FA32A6DEA1C528BBF456E u; }"}], "body_in_train": true}, {"repo_owner": "crissmoldovan", "repo_name": "tisip", "path": "crissmoldovan/tisip/01c53da339cf1aa2ff8a59387f3801e3ceb7794e04b2fc847f132be4ef8705eb", "path_in_repo": "crissmoldovan/tisip/iphone/pjsip/src/pjlib-util/build/output/pjlib-util-x86_64-unknown-linux-gnu/cli.o", "objdump": "00000000000003bd <pj_cli_create>:\n     3bd:\t55                   \tpush   %rbp\n     3be:\t48 89 e5             \tmov    %rsp,%rbp\n     3c1:\t48 83 ec 50          \tsub    $0x50,%rsp\n     3c5:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     3c9:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     3cd:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n     3d4:\t00 \n     3d5:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n     3dc:\t00 \n     3dd:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n     3e2:\t74 14                \tje     3f8 <pj_cli_create+0x3b>\n     3e4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     3e8:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     3ec:\t48 85 c0             \ttest   %rax,%rax\n     3ef:\t74 07                \tje     3f8 <pj_cli_create+0x3b>\n     3f1:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n     3f6:\t75 3e                \tjne    436 <pj_cli_create+0x79>\n     3f8:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n     3fd:\t74 14                \tje     413 <pj_cli_create+0x56>\n     3ff:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     403:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     407:\t48 85 c0             \ttest   %rax,%rax\n     40a:\t74 07                \tje     413 <pj_cli_create+0x56>\n     40c:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n     411:\t75 19                \tjne    42c <pj_cli_create+0x6f>\n     413:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     418:\tba 76 01 00 00       \tmov    $0x176,%edx\n     41d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     422:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     427:\te8 00 00 00 00       \tcallq  42c <pj_cli_create+0x6f>\n     42c:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n     431:\te9 77 01 00 00       \tjmpq   5ad <pj_cli_create+0x1f0>\n     436:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     43a:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     43e:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     444:\tb9 00 02 00 00       \tmov    $0x200,%ecx\n     449:\tba 00 04 00 00       \tmov    $0x400,%edx\n     44e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     453:\t48 89 c7             \tmov    %rax,%rdi\n     456:\te8 00 00 00 00       \tcallq  45b <pj_cli_create+0x9e>\n     45b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     45f:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     464:\t75 0a                \tjne    470 <pj_cli_create+0xb3>\n     466:\tb8 77 11 01 00       \tmov    $0x11177,%eax\n     46b:\te9 3d 01 00 00       \tjmpq   5ad <pj_cli_create+0x1f0>\n     470:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     474:\tbe d8 00 00 00       \tmov    $0xd8,%esi\n     479:\t48 89 c7             \tmov    %rax,%rdi\n     47c:\te8 ca fb ff ff       \tcallq  4b <pj_pool_zalloc>\n     481:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     485:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     489:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n     48d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     491:\tba 28 00 00 00       \tmov    $0x28,%edx\n     496:\t48 89 c6             \tmov    %rax,%rsi\n     499:\t48 89 cf             \tmov    %rcx,%rdi\n     49c:\te8 3f fc ff ff       \tcallq  e0 <pj_memcpy>\n     4a1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4a5:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     4a9:\t48 89 10             \tmov    %rdx,(%rax)\n     4ac:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4b0:\t48 05 98 00 00 00    \tadd    $0x98,%rax\n     4b6:\t48 89 c7             \tmov    %rax,%rdi\n     4b9:\te8 42 fb ff ff       \tcallq  0 <pj_list_init>\n     4be:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     4c2:\tbe 3f 00 00 00       \tmov    $0x3f,%esi\n     4c7:\t48 89 c7             \tmov    %rax,%rdi\n     4ca:\te8 00 00 00 00       \tcallq  4cf <pj_cli_create+0x112>\n     4cf:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     4d3:\t48 89 82 c0 00 00 00 \tmov    %rax,0xc0(%rdx)\n     4da:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     4de:\tbe 3f 00 00 00       \tmov    $0x3f,%esi\n     4e3:\t48 89 c7             \tmov    %rax,%rdi\n     4e6:\te8 00 00 00 00       \tcallq  4eb <pj_cli_create+0x12e>\n     4eb:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     4ef:\t48 89 82 c8 00 00 00 \tmov    %rax,0xc8(%rdx)\n     4f6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     4fa:\tbe 68 00 00 00       \tmov    $0x68,%esi\n     4ff:\t48 89 c7             \tmov    %rax,%rdi\n     502:\te8 44 fb ff ff       \tcallq  4b <pj_pool_zalloc>\n     507:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     50b:\t48 89 82 90 00 00 00 \tmov    %rax,0x90(%rdx)\n     512:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     516:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n     51d:\t48 89 c7             \tmov    %rax,%rdi\n     520:\te8 db fa ff ff       \tcallq  0 <pj_list_init>\n     525:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     52c:\teb 69                \tjmp    597 <pj_cli_create+0x1da>\n     52e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     531:\t48 8b 44 c5 d0       \tmov    -0x30(%rbp,%rax,8),%rax\n     536:\t48 89 c7             \tmov    %rax,%rdi\n     539:\te8 00 00 00 00       \tcallq  53e <pj_cli_create+0x181>\n     53e:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     542:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     546:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n     54a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     54e:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n     554:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     55a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     55f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     564:\t48 89 c7             \tmov    %rax,%rdi\n     567:\te8 00 00 00 00       \tcallq  56c <pj_cli_create+0x1af>\n     56c:\t85 c0                \ttest   %eax,%eax\n     56e:\t74 23                \tje     593 <pj_cli_create+0x1d6>\n     570:\te8 00 00 00 00       \tcallq  575 <pj_cli_create+0x1b8>\n     575:\t83 f8 02             \tcmp    $0x2,%eax\n     578:\t7e 19                \tjle    593 <pj_cli_create+0x1d6>\n     57a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     57d:\t89 c2                \tmov    %eax,%edx\n     57f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     584:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     589:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     58e:\te8 00 00 00 00       \tcallq  593 <pj_cli_create+0x1d6>\n     593:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     597:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n     59b:\t76 91                \tjbe    52e <pj_cli_create+0x171>\n     59d:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     5a1:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     5a5:\t48 89 10             \tmov    %rdx,(%rax)\n     5a8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5ad:\tc9                   \tleaveq \n     5ae:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_cli_create(_QWORD *a1, _QWORD *a2) {\n  __int64 result;\n  __int64 v3;\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  __int64 v5[Number];\n  _QWORD *v6;\n  __int64 v7;\n  unsigned int i;\n  v5[Number] = (__int64)String String;\n  v5[Number] = (__int64)String;\n  if (a1 && a1[Number] && a2) {\n    v7 = pj_pool_create(a1[Number], String, Number L, Number L, Number L);\n    if (v7) {\n      v6 = (_QWORD *)pj_pool_zalloc(v7, Number L);\n      pj_memcpy(v6 + Number, a1, Number);\n      *v6 = v7;\n      pj_list_init(v6 + Number);\n      v6[Number] = pj_hash_create(v7, Number L);\n      v6[Number] = pj_hash_create(v7, Number L);\n      v6[Number] = pj_pool_zalloc(v7, Number L);\n      pj_list_init((_QWORD *)v6[Number]);\n      for (i = Number; i <= Number; ++i) {\n        <span class=\"supfact\">v4</span>[Number] = pj_str(v5[i]);\n        <span class=\"supfact\">v4</span>[Number] = v3;\n        if ((unsigned int)pj_cli_add_cmd_from_xml(\n                v6, Number L, <span class=\"supfact\">v4</span>, cmd_handler, Number L,\n                Number L) &&\n            (int)pj_log_get_level() > Number)\n          pj_log_3(String, String, i);\n      }\n      *a2 = v6;\n      result = Number L;\n    } else {\n      result = Number L;\n    }\n  } else {\n    if (!a1 || !a1[Number] || !a2)\n      _assert_fail(String, String, Number, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl pj_cli_create(pj_cli_cfg_0 *cfg, pj_cli_t_0 **p_cli) {\n  pj_status_t result;\n  pj_ssize_t v3;\n  pj_str_t_0 <span class=\"supfact\">xml</span>;\n  char *cmd_xmls[Number];\n  pj_cli_t_0 *cli;\n  pj_pool_t_0 *pool;\n  unsigned int i;\n  cmd_xmls[Number] = String String;\n  cmd_xmls[Number] = String;\n  if (cfg && cfg->pf && p_cli) {\n    pool = (pj_pool_t_0 *)pj_pool_create(cfg->pf, String, Number L, Number L,\n                                         Number L);\n    if (pool) {\n      cli = (pj_cli_t_0 *)pj_pool_zalloc(pool, Number);\n      pj_memcpy(&cli->cfg, cfg, Number);\n      cli->pool = pool;\n      pj_list_init(&cli->fe_head);\n      cli->cmd_name_hash = (pj_hash_table_t_0 *)pj_hash_create(pool, Number L);\n      cli->cmd_id_hash = (pj_hash_table_t_0 *)pj_hash_create(pool, Number L);\n      cli->root.sub_cmd = (pj_cli_cmd_spec_0 *)pj_pool_zalloc(pool, Number);\n      pj_list_init(cli->root.sub_cmd);\n      for (i = Number; i <= Number; ++i) {\n        <span class=\"supfact\">xml</span>.ptr = (char *)pj_str(cmd_xmls[i]);\n        <span class=\"supfact\">xml</span>.slen = v3;\n        if (pj_cli_add_cmd_from_xml(cli, Number L, &<span class=\"supfact\">xml</span>,\n                                    (pj_cli_cmd_handler)cmd_handler, Number L,\n                                    Number L) &&\n            (int)pj_log_get_level() > Number) {\n          pj_log_3(String, String, i);\n        }\n      }\n      *p_cli = cli;\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else {\n    if (!cfg || !cfg->pf || !p_cli)\n      _assert_fail(String, String, Number, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "char *[2]", "ref_name": "xml", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "mr-sven", "repo_name": "ipc-25hdc", "path": "mr-sven/ipc-25hdc/43af1b634e384742e4bf812d425a3ea8f383c66c5e30e4f9d74807e90e5c85a4", "path_in_repo": "mr-sven/ipc-25hdc/source/user/samba-3.0.2/source/nmbd/nmbd_become_lmb.o", "objdump": "000000000000011c <reset_workgroup_state>:\n     11c:\t55                   \tpush   %rbp\n     11d:\t48 89 e5             \tmov    %rsp,%rbp\n     120:\t41 54                \tpush   %r12\n     122:\t53                   \tpush   %rbx\n     123:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n     12a:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n     131:\t48 89 b5 70 ff ff ff \tmov    %rsi,-0x90(%rbp)\n     138:\t89 95 6c ff ff ff    \tmov    %edx,-0x94(%rbp)\n     13e:\t48 8b 95 70 ff ff ff \tmov    -0x90(%rbp),%rdx\n     145:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     14c:\t48 89 d6             \tmov    %rdx,%rsi\n     14f:\t48 89 c7             \tmov    %rax,%rdi\n     152:\te8 00 00 00 00       \tcallq  157 <reset_workgroup_state+0x3b>\n     157:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     15b:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     160:\t75 7b                \tjne    1dd <reset_workgroup_state+0xc1>\n     162:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 169 <reset_workgroup_state+0x4d>\n     169:\t8b 00                \tmov    (%rax),%eax\n     16b:\t85 c0                \ttest   %eax,%eax\n     16d:\t79 22                \tjns    191 <reset_workgroup_state+0x75>\n     16f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 176 <reset_workgroup_state+0x5a>\n     176:\t8b 00                \tmov    (%rax),%eax\n     178:\t85 c0                \ttest   %eax,%eax\n     17a:\t0f 85 f0 01 00 00    \tjne    370 <reset_workgroup_state+0x254>\n     180:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 187 <reset_workgroup_state+0x6b>\n     187:\t8b 00                \tmov    (%rax),%eax\n     189:\t85 c0                \ttest   %eax,%eax\n     18b:\t0f 88 df 01 00 00    \tjs     370 <reset_workgroup_state+0x254>\n     191:\tb9 52 00 00 00       \tmov    $0x52,%ecx\n     196:\tba 00 00 00 00       \tmov    $0x0,%edx\n     19b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     1a0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     1a5:\te8 00 00 00 00       \tcallq  1aa <reset_workgroup_state+0x8e>\n     1aa:\t85 c0                \ttest   %eax,%eax\n     1ac:\t0f 84 be 01 00 00    \tje     370 <reset_workgroup_state+0x254>\n     1b2:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     1b9:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n     1bd:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n     1c4:\t48 89 c6             \tmov    %rax,%rsi\n     1c7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     1cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     1d1:\te8 00 00 00 00       \tcallq  1d6 <reset_workgroup_state+0xba>\n     1d6:\t85 c0                \ttest   %eax,%eax\n     1d8:\te9 93 01 00 00       \tjmpq   370 <reset_workgroup_state+0x254>\n     1dd:\te8 00 00 00 00       \tcallq  1e2 <reset_workgroup_state+0xc6>\n     1e2:\t48 89 c2             \tmov    %rax,%rdx\n     1e5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     1e9:\t48 89 d6             \tmov    %rdx,%rsi\n     1ec:\t48 89 c7             \tmov    %rax,%rdi\n     1ef:\te8 00 00 00 00       \tcallq  1f4 <reset_workgroup_state+0xd8>\n     1f4:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     1f8:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n     1fd:\t0f 85 90 00 00 00    \tjne    293 <reset_workgroup_state+0x177>\n     203:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 20a <reset_workgroup_state+0xee>\n     20a:\t8b 00                \tmov    (%rax),%eax\n     20c:\t85 c0                \ttest   %eax,%eax\n     20e:\t79 1a                \tjns    22a <reset_workgroup_state+0x10e>\n     210:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 217 <reset_workgroup_state+0xfb>\n     217:\t8b 00                \tmov    (%rax),%eax\n     219:\t85 c0                \ttest   %eax,%eax\n     21b:\t75 5d                \tjne    27a <reset_workgroup_state+0x15e>\n     21d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 224 <reset_workgroup_state+0x108>\n     224:\t8b 00                \tmov    (%rax),%eax\n     226:\t85 c0                \ttest   %eax,%eax\n     228:\t78 50                \tjs     27a <reset_workgroup_state+0x15e>\n     22a:\tb9 58 00 00 00       \tmov    $0x58,%ecx\n     22f:\tba 00 00 00 00       \tmov    $0x0,%edx\n     234:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     239:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     23e:\te8 00 00 00 00       \tcallq  243 <reset_workgroup_state+0x127>\n     243:\t85 c0                \ttest   %eax,%eax\n     245:\t74 33                \tje     27a <reset_workgroup_state+0x15e>\n     247:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     24e:\t48 8b 58 10          \tmov    0x10(%rax),%rbx\n     252:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     256:\t4c 8d 60 2c          \tlea    0x2c(%rax),%r12\n     25a:\te8 00 00 00 00       \tcallq  25f <reset_workgroup_state+0x143>\n     25f:\t48 89 d9             \tmov    %rbx,%rcx\n     262:\t4c 89 e2             \tmov    %r12,%rdx\n     265:\t48 89 c6             \tmov    %rax,%rsi\n     268:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     26d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     272:\te8 00 00 00 00       \tcallq  277 <reset_workgroup_state+0x15b>\n     277:\t85 c0                \ttest   %eax,%eax\n     279:\t90                   \tnop\n     27a:\te8 00 00 00 00       \tcallq  27f <reset_workgroup_state+0x163>\n     27f:\t85 c0                \ttest   %eax,%eax\n     281:\t0f 95 c0             \tsetne  %al\n     284:\t0f b6 d0             \tmovzbl %al,%edx\n     287:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     28b:\t89 50 20             \tmov    %edx,0x20(%rax)\n     28e:\te9 de 00 00 00       \tjmpq   371 <reset_workgroup_state+0x255>\n     293:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     297:\t8b 80 18 01 00 00    \tmov    0x118(%rax),%eax\n     29d:\t25 ff ff fb ff       \tand    $0xfffbffff,%eax\n     2a2:\t89 c2                \tmov    %eax,%edx\n     2a4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     2a8:\t89 90 18 01 00 00    \tmov    %edx,0x118(%rax)\n     2ae:\te8 00 00 00 00       \tcallq  2b3 <reset_workgroup_state+0x197>\n     2b3:\t85 c0                \ttest   %eax,%eax\n     2b5:\t74 07                \tje     2be <reset_workgroup_state+0x1a2>\n     2b7:\tba 00 00 01 00       \tmov    $0x10000,%edx\n     2bc:\teb 05                \tjmp    2c3 <reset_workgroup_state+0x1a7>\n     2be:\tba 00 00 00 00       \tmov    $0x0,%edx\n     2c3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     2c7:\t8b 80 18 01 00 00    \tmov    0x118(%rax),%eax\n     2cd:\t09 c2                \tor     %eax,%edx\n     2cf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     2d3:\t89 90 18 01 00 00    \tmov    %edx,0x118(%rax)\n     2d9:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     2e0:\tc7 40 54 01 00 00 00 \tmovl   $0x1,0x54(%rax)\n     2e7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     2eb:\t8b 80 d4 00 00 00    \tmov    0xd4(%rax),%eax\n     2f1:\t83 e0 fb             \tand    $0xfffffffb,%eax\n     2f4:\t89 c2                \tmov    %eax,%edx\n     2f6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     2fa:\t89 90 d4 00 00 00    \tmov    %edx,0xd4(%rax)\n     300:\te8 00 00 00 00       \tcallq  305 <reset_workgroup_state+0x1e9>\n     305:\t85 c0                \ttest   %eax,%eax\n     307:\t0f 95 c0             \tsetne  %al\n     30a:\t0f b6 d0             \tmovzbl %al,%edx\n     30d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     311:\t89 50 20             \tmov    %edx,0x20(%rax)\n     314:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     318:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     31d:\t48 89 c7             \tmov    %rax,%rdi\n     320:\te8 00 00 00 00       \tcallq  325 <reset_workgroup_state+0x209>\n     325:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     329:\t48 8d 48 2c          \tlea    0x2c(%rax),%rcx\n     32d:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n     331:\tba 1d 00 00 00       \tmov    $0x1d,%edx\n     336:\t48 89 ce             \tmov    %rcx,%rsi\n     339:\t48 89 c7             \tmov    %rax,%rdi\n     33c:\te8 00 00 00 00       \tcallq  341 <reset_workgroup_state+0x225>\n     341:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n     345:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     34c:\t48 89 d6             \tmov    %rdx,%rsi\n     34f:\t48 89 c7             \tmov    %rax,%rdi\n     352:\te8 53 fd ff ff       \tcallq  aa <remove_permanent_name_from_unicast>\n     357:\t83 bd 6c ff ff ff 00 \tcmpl   $0x0,-0x94(%rbp)\n     35e:\t74 11                \tje     371 <reset_workgroup_state+0x255>\n     360:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     364:\tc7 80 cc 00 00 00 01 \tmovl   $0x1,0xcc(%rax)\n     36b:\t00 00 00 \n     36e:\teb 01                \tjmp    371 <reset_workgroup_state+0x255>\n     370:\t90                   \tnop\n     371:\t48 81 c4 90 00 00 00 \tadd    $0x90,%rsp\n     378:\t5b                   \tpop    %rbx\n     379:\t41 5c                \tpop    %r12\n     37b:\t5d                   \tpop    %rbp\n     37c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall reset_workgroup_state(__int64 a1, const char *a2, int a3) {\n  __int64 result;\n  __int64 v4;\n  const char *v5;\n  const char *v6;\n  _BOOL4 v7;\n  int v8;\n  char <span class=\"supfact\">v10</span>[Number];\n  __int64 v11;\n  __int64 v12;\n  v12 = find_workgroup_on_subnet(a1, a2);\n  if (v12) {\n    v4 = global_myname();\n    v11 = find_server_in_workgroup(v12, v4);\n    if (v11) {\n      *(_DWORD *)(v11 + Number) &= Number;\n      if ((unsigned int)lp_local_master())\n        v8 = Number;\n      else\n        v8 = Number;\n      *(_DWORD *)(v11 + Number) |= v8;\n      *(_DWORD *)(a1 + Number) = Number;\n      *(_DWORD *)(v12 + Number) &= Number;\n      *(_DWORD *)(v12 + Number) = lp_local_master() != Number;\n      set_workgroup_local_master_browser_name(v12, &unk_18B3);\n      make_nmb_name(<span class=\"supfact\">v10</span>, v12 + Number, Number L);\n      result =\n          remove_permanent_name_from_unicast(a1, (__int64)<span class=\"supfact\">v10</span>);\n      if (a3) {\n        result = v12;\n        *(_DWORD *)(v12 + Number) = Number;\n      }\n    } else {\n      if (((int)*DEBUGLEVEL_CLASS >= Number ||\n           !*DEBUGLEVEL_CLASS_ISSET && (int)*DEBUGLEVEL_CLASS >= Number) &&\n          (unsigned int)dbghdr(Number L, String, String, Number L)) {\n        v5 = *(const char **)(a1 + Number);\n        v6 = (const char *)global_myname();\n        dbgtext(String, v6, (const char *)(v12 + Number), v5);\n      }\n      v7 = lp_local_master() != Number;\n      result = v12;\n      *(_DWORD *)(v12 + Number) = v7;\n    }\n  } else if ((int)*DEBUGLEVEL_CLASS >= Number ||\n             (result = (unsigned int)*DEBUGLEVEL_CLASS_ISSET,\n              !(_DWORD)result) &&\n                 (result = (unsigned int)*DEBUGLEVEL_CLASS,\n                  (int)result >= Number)) {\n    result = dbghdr(Number L, String, String, Number L);\n    if ((_DWORD)result)\n      result = dbgtext(String, a2, *(const char **)(a1 + Number));\n  }\n  return result;\n}", "code_t": "void __cdecl reset_workgroup_state(subnet_record *subrec,\n                                   const char *workgroup_name,\n                                   BOOL force_new_election) {\n  __int64 v3;\n  char *v4;\n  const char *v5;\n  int v6;\n  nmb_name <span class=\"supfact\">nmbname</span>;\n  server_record *servrec;\n  work_record *work;\n  work = (work_record *)find_workgroup_on_subnet(subrec, workgroup_name);\n  if (work) {\n    v3 = global_myname();\n    servrec = (server_record *)find_server_in_workgroup(work, v3);\n    if (servrec) {\n      servrec->serv.type &= Number;\n      if ((unsigned int)lp_local_master())\n        v6 = Number;\n      else\n        v6 = Number;\n      servrec->serv.type |= v6;\n      subrec->work_changed = Number;\n      work->ElectionCriterion &= Number;\n      work->mst_state = lp_local_master() != Number;\n      set_workgroup_local_master_browser_name(work, newname);\n      make_nmb_name(&<span class=\"supfact\">nmbname</span>, work->work_group, Number L);\n      remove_permanent_name_from_unicast(subrec, &<span class=\"supfact\">nmbname</span>);\n      if (force_new_election)\n        work->needelection = Number;\n    } else {\n      if (((int)*DEBUGLEVEL_CLASS >= Number ||\n           !*DEBUGLEVEL_CLASS_ISSET && (int)*DEBUGLEVEL_CLASS >= Number) &&\n          (unsigned int)dbghdr(Number L, String, String, Number L)) {\n        v4 = subrec->subnet_name;\n        v5 = (const char *)global_myname();\n        dbgtext(String, v5, work->work_group, v4);\n      }\n      work->mst_state = lp_local_master() != Number;\n    }\n  } else if ((int)*DEBUGLEVEL_CLASS >= Number ||\n             !*DEBUGLEVEL_CLASS_ISSET && (int)*DEBUGLEVEL_CLASS >= Number) {\n    if ((unsigned int)dbghdr(Number L, String, String, Number L))\n      dbgtext(String, workgroup_name, subrec->subnet_name);\n  }\n}", "var": [{"name": "v10", "type": "char[64]", "ref_name": "nmbname", "ref_type": "struct nmb_name { nstring name; char[64] scope; unsigned int name_type; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/cfd8ca825abdd48ca5369e8984436bbbf56c63b5e0f43608d790284ea8df3edf", "path_in_repo": "XanClic/qemu//riscv32-softmmu/hw/virtio/virtio.o", "objdump": "0000000000000b1b <_nocheck__trace_virtqueue_pop>:\n     b1b:\t55                   \tpush   %rbp\n     b1c:\t48 89 e5             \tmov    %rsp,%rbp\n     b1f:\t41 54                \tpush   %r12\n     b21:\t53                   \tpush   %rbx\n     b22:\t48 83 ec 40          \tsub    $0x40,%rsp\n     b26:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     b2a:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     b2e:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n     b31:\t89 4d b8             \tmov    %ecx,-0x48(%rbp)\n     b34:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     b3b:\t00 00 \n     b3d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     b41:\t31 c0                \txor    %eax,%eax\n     b43:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # b49 <_nocheck__trace_virtqueue_pop+0x2e>\n     b49:\t85 c0                \ttest   %eax,%eax\n     b4b:\t0f 95 c0             \tsetne  %al\n     b4e:\t0f b6 c0             \tmovzbl %al,%eax\n     b51:\t48 85 c0             \ttest   %rax,%rax\n     b54:\t74 71                \tje     bc7 <_nocheck__trace_virtqueue_pop+0xac>\n     b56:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # b5d <_nocheck__trace_virtqueue_pop+0x42>\n     b5d:\t66 85 c0             \ttest   %ax,%ax\n     b60:\t74 65                \tje     bc7 <_nocheck__trace_virtqueue_pop+0xac>\n     b62:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     b67:\te8 cd fc ff ff       \tcallq  839 <qemu_loglevel_mask>\n     b6c:\t84 c0                \ttest   %al,%al\n     b6e:\t74 57                \tje     bc7 <_nocheck__trace_virtqueue_pop+0xac>\n     b70:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     b74:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b79:\t48 89 c7             \tmov    %rax,%rdi\n     b7c:\te8 00 00 00 00       \tcallq  b81 <_nocheck__trace_virtqueue_pop+0x66>\n     b81:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b85:\t49 89 c4             \tmov    %rax,%r12\n     b88:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b8c:\t48 89 c3             \tmov    %rax,%rbx\n     b8f:\te8 00 00 00 00       \tcallq  b94 <_nocheck__trace_virtqueue_pop+0x79>\n     b94:\t89 c6                \tmov    %eax,%esi\n     b96:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     b9a:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     b9e:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n     ba1:\t50                   \tpush   %rax\n     ba2:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     ba5:\t50                   \tpush   %rax\n     ba6:\t49 89 c9             \tmov    %rcx,%r9\n     ba9:\t49 89 d0             \tmov    %rdx,%r8\n     bac:\t4c 89 e1             \tmov    %r12,%rcx\n     baf:\t48 89 da             \tmov    %rbx,%rdx\n     bb2:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # bb9 <_nocheck__trace_virtqueue_pop+0x9e>\n     bb9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     bbe:\te8 00 00 00 00       \tcallq  bc3 <_nocheck__trace_virtqueue_pop+0xa8>\n     bc3:\t48 83 c4 10          \tadd    $0x10,%rsp\n     bc7:\t90                   \tnop\n     bc8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bcc:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     bd3:\t00 00 \n     bd5:\t74 05                \tje     bdc <_nocheck__trace_virtqueue_pop+0xc1>\n     bd7:\te8 00 00 00 00       \tcallq  bdc <_nocheck__trace_virtqueue_pop+0xc1>\n     bdc:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     be0:\t5b                   \tpop    %rbx\n     be1:\t41 5c                \tpop    %r12\n     be3:\t5d                   \tpop    %rbp\n     be4:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_virtqueue_pop(const void *a1,\n                                                         const void *a2,\n                                                         unsigned int a3,\n                                                         unsigned int a4) {\n  __suseconds_t v4;\n  __time_t v5;\n  unsigned int v6;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v11;\n  v11 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VIRTQUEUE_POP_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v4 = <span class=\"supfact\">tv</span>.tv_usec;\n    v5 = <span class=\"supfact\">tv</span>.tv_sec;\n    v6 = qemu_get_thread_id();\n    qemu_log(String, v6, v5, v4, a1, a2, a3, a4);\n  }\n  return __readfsqword(Number) ^ v11;\n}", "code_t": "void __cdecl nocheck__trace_virtqueue_pop(void *vq, void *elem,\n                                          unsigned int in_num,\n                                          unsigned int out_num) {\n  __suseconds_t v4;\n  __time_t v5;\n  unsigned int v6;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VIRTQUEUE_POP_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v4 = <span class=\"supfact\">_now</span>.tv_usec;\n    v5 = <span class=\"supfact\">_now</span>.tv_sec;\n    v6 = qemu_get_thread_id();\n    qemu_log(String, v6, v5, v4, vq, elem, in_num, out_num);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/0c220081571b31109458ad0af80da996db681a85a2e92ce9cf7314108079ece6", "path_in_repo": "AlexanderVangelov/pjsip//pjlib-util/bin/pjlib-util-test-x86_64-unknown-linux-gnu", "objdump": "0000000000423e80 <pj_thread_register>:\n  423e80:\t55                   \tpush   %rbp\n  423e81:\t48 89 e5             \tmov    %rsp,%rbp\n  423e84:\t53                   \tpush   %rbx\n  423e85:\t48 83 ec 48          \tsub    $0x48,%rsp\n  423e89:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  423e8d:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  423e91:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  423e95:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  423e99:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  423e9d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  423ea1:\t48 89 c7             \tmov    %rax,%rdi\n  423ea4:\te8 9e c4 00 00       \tcallq  430347 <pj_str>\n  423ea9:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  423ead:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  423eb1:\t48 8b 05 b0 2f 02 00 \tmov    0x22fb0(%rip),%rax        # 446e68 <thread_tls_id>\n  423eb8:\t48 89 c7             \tmov    %rax,%rdi\n  423ebb:\te8 93 09 00 00       \tcallq  424853 <pj_thread_local_get>\n  423ec0:\t48 85 c0             \ttest   %rax,%rax\n  423ec3:\t74 1e                \tje     423ee3 <pj_thread_register+0x63>\n  423ec5:\te8 a4 7f 00 00       \tcallq  42be6e <pj_log_get_level>\n  423eca:\t83 f8 03             \tcmp    $0x3,%eax\n  423ecd:\t7e 14                \tjle    423ee3 <pj_thread_register+0x63>\n  423ecf:\tbe d0 a5 43 00       \tmov    $0x43a5d0,%esi\n  423ed4:\tbf a7 a5 43 00       \tmov    $0x43a5a7,%edi\n  423ed9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  423ede:\te8 06 89 00 00       \tcallq  42c7e9 <pj_log_4>\n  423ee3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  423ee7:\t8b 40 38             \tmov    0x38(%rax),%eax\n  423eea:\t3d ef be af de       \tcmp    $0xdeafbeef,%eax\n  423eef:\t75 39                \tjne    423f2a <pj_thread_register+0xaa>\n  423ef1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  423ef5:\t8b 40 3c             \tmov    0x3c(%rax),%eax\n  423ef8:\t3d de c0 ad de       \tcmp    $0xdeadc0de,%eax\n  423efd:\t75 2b                \tjne    423f2a <pj_thread_register+0xaa>\n  423eff:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  423f03:\t48 8b 58 20          \tmov    0x20(%rax),%rbx\n  423f07:\te8 a4 f2 fd ff       \tcallq  4031b0 <pthread_self@plt>\n  423f0c:\t48 39 c3             \tcmp    %rax,%rbx\n  423f0f:\t74 19                \tje     423f2a <pj_thread_register+0xaa>\n  423f11:\tb9 b0 a8 43 00       \tmov    $0x43a8b0,%ecx\n  423f16:\tba c2 01 00 00       \tmov    $0x1c2,%edx\n  423f1b:\tbe 58 a5 43 00       \tmov    $0x43a558,%esi\n  423f20:\tbf 00 a6 43 00       \tmov    $0x43a600,%edi\n  423f25:\te8 76 f1 fd ff       \tcallq  4030a0 <__assert_fail@plt>\n  423f2a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  423f2e:\tbe 48 00 00 00       \tmov    $0x48,%esi\n  423f33:\t48 89 c7             \tmov    %rax,%rdi\n  423f36:\te8 20 fb ff ff       \tcallq  423a5b <pj_bzero>\n  423f3b:\te8 70 f2 fd ff       \tcallq  4031b0 <pthread_self@plt>\n  423f40:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  423f44:\t48 89 42 20          \tmov    %rax,0x20(%rdx)\n  423f48:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  423f4c:\tc7 40 38 ef be af de \tmovl   $0xdeafbeef,0x38(%rax)\n  423f53:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  423f57:\tc7 40 3c de c0 ad de \tmovl   $0xdeadc0de,0x3c(%rax)\n  423f5e:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  423f63:\t74 36                \tje     423f9b <pj_thread_register+0x11b>\n  423f65:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  423f69:\t48 89 c7             \tmov    %rax,%rdi\n  423f6c:\te8 d8 fa ff ff       \tcallq  423a49 <pj_strlen>\n  423f71:\t48 83 f8 1e          \tcmp    $0x1e,%rax\n  423f75:\t77 24                \tja     423f9b <pj_thread_register+0x11b>\n  423f77:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  423f7b:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  423f7f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  423f83:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  423f87:\tbe 20 00 00 00       \tmov    $0x20,%esi\n  423f8c:\t48 89 c7             \tmov    %rax,%rdi\n  423f8f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  423f94:\te8 f7 f4 fd ff       \tcallq  403490 <snprintf@plt>\n  423f99:\teb 29                \tjmp    423fc4 <pj_thread_register+0x144>\n  423f9b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  423f9f:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  423fa3:\t48 89 c2             \tmov    %rax,%rdx\n  423fa6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  423faa:\t48 89 d1             \tmov    %rdx,%rcx\n  423fad:\tba 6b a6 43 00       \tmov    $0x43a66b,%edx\n  423fb2:\tbe 20 00 00 00       \tmov    $0x20,%esi\n  423fb7:\t48 89 c7             \tmov    %rax,%rdi\n  423fba:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  423fbf:\te8 cc f4 fd ff       \tcallq  403490 <snprintf@plt>\n  423fc4:\t48 8b 05 9d 2e 02 00 \tmov    0x22e9d(%rip),%rax        # 446e68 <thread_tls_id>\n  423fcb:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  423fcf:\t48 89 d6             \tmov    %rdx,%rsi\n  423fd2:\t48 89 c7             \tmov    %rax,%rdi\n  423fd5:\te8 3b 08 00 00       \tcallq  424815 <pj_thread_local_set>\n  423fda:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  423fdd:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  423fe1:\t74 16                \tje     423ff9 <pj_thread_register+0x179>\n  423fe3:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  423fe7:\tbe 48 00 00 00       \tmov    $0x48,%esi\n  423fec:\t48 89 c7             \tmov    %rax,%rdi\n  423fef:\te8 67 fa ff ff       \tcallq  423a5b <pj_bzero>\n  423ff4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  423ff7:\teb 10                \tjmp    424009 <pj_thread_register+0x189>\n  423ff9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  423ffd:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  424001:\t48 89 10             \tmov    %rdx,(%rax)\n  424004:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  424009:\t48 83 c4 48          \tadd    $0x48,%rsp\n  42400d:\t5b                   \tpop    %rbx\n  42400e:\t5d                   \tpop    %rbp\n  42400f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_thread_register(const char *a1, char *a2, char **a3) {\n  __int64 v3;\n  __int64 v4;\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  __int64 v9;\n  __int64 result;\n  __int64 <span class=\"supfact\">v13</span>[Number];\n  unsigned int v14;\n  char *s;\n  s = a2;\n  <span class=\"supfact\">v13</span>[Number] = pj_str(a1);\n  <span class=\"supfact\">v13</span>[Number] = v3;\n  v4 = thread_tls_id;\n  if (pj_thread_local_get(thread_tls_id) &&\n      (int)pj_log_get_level(v4, a2) > Number)\n    pj_log_4((unsigned int)String, (unsigned int)String, v5, v6, v7, v8);\n  if (*((_DWORD *)s + Number) == Number && *((_DWORD *)s + Number) == Number) {\n    v9 = *((_QWORD *)s + Number);\n    if (v9 != pthread_self())\n      __assert_fail(String, String, Number, String);\n  }\n  pj_bzero_10(a2, Number);\n  *((_QWORD *)s + Number) = pthread_self();\n  *((_DWORD *)s + Number) = Number;\n  *((_DWORD *)s + Number) = Number;\n  if (a1 &&\n      (unsigned __int64)pj_strlen_0((__int64)<span class=\"supfact\">v13</span>) <= Number)\n    snprintf(s, Number, a1, *((_QWORD *)s + Number));\n  else\n    snprintf(s, Number, String, *((const void **)s + Number));\n  v14 = pj_thread_local_set(thread_tls_id, s);\n  if (v14) {\n    pj_bzero_10(a2, Number);\n    result = v14;\n  } else {\n    *a3 = s;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl pj_thread_register(const char *cstr_thread_name,\n                                       __int64 *desc,\n                                       pj_thread_t_0 **ptr_thread) {\n  pthread_t v3;\n  pj_status_t result;\n  pj_str_t_0 <span class=\"supfact\">thread_name</span>;\n  pj_status_t rc;\n  pj_thread_t_0 *thread;\n  thread = (pj_thread_t_0 *)desc;\n  <span class=\"supfact\">thread_name</span> = pj_str((char *)cstr_thread_name);\n  if (pj_thread_local_get(thread_tls_id) && pj_log_get_level() > Number)\n    pj_log_4(String, String);\n  if (thread->signature1 == Number && thread->signature2 == Number) {\n    v3 = thread->thread;\n    if (v3 != pthread_self())\n      __assert_fail(String, String, Number, String);\n  }\n  pj_bzero_10(desc, Number);\n  thread->thread = pthread_self();\n  thread->signature1 = Number;\n  thread->signature2 = Number;\n  if (cstr_thread_name && pj_strlen_0(&<span class=\"supfact\">thread_name</span>) <= Number)\n    snprintf(thread->obj_name, Number, cstr_thread_name, thread->thread);\n  else\n    snprintf(thread->obj_name, Number, String, (const void *)thread->thread);\n  rc = pj_thread_local_set(thread_tls_id, thread);\n  if (rc) {\n    pj_bzero_10(desc, Number);\n    result = rc;\n  } else {\n    *ptr_thread = thread;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v13", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "thread_name", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": true}, {"repo_owner": "caninos-loucos", "repo_name": "CaninosSDK", "path": "caninos-loucos/CaninosSDK/caa3ea50938ed07fcd55dd69a3dac7780d46a414a87409e13415c7121364acb4", "path_in_repo": "caninos-loucos/CaninosSDK/owl/out/labrador_debian_coreV2/u-boot/scripts/kconfig/conf", "objdump": "000000000040263a <print_help>:\n  40263a:\t48 83 ec 38          \tsub    $0x38,%rsp\n  40263e:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n  402643:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  402648:\t48 89 c7             \tmov    %rax,%rdi\n  40264b:\te8 ec 6b 00 00       \tcallq  40923c <str_new>\n  402650:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n  402655:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  40265a:\t48 89 d6             \tmov    %rdx,%rsi\n  40265d:\t48 89 c7             \tmov    %rax,%rdi\n  402660:\te8 c0 24 01 00       \tcallq  414b25 <menu_get_ext_help>\n  402665:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  40266a:\t48 89 c7             \tmov    %rax,%rdi\n  40266d:\te8 57 6e 00 00       \tcallq  4094c9 <str_get>\n  402672:\t48 89 c6             \tmov    %rax,%rsi\n  402675:\tbf 10 50 41 00       \tmov    $0x415010,%edi\n  40267a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40267f:\te8 0c fb ff ff       \tcallq  402190 <printf@plt>\n  402684:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  402689:\t48 89 c7             \tmov    %rax,%rdi\n  40268c:\te8 69 6c 00 00       \tcallq  4092fa <str_free>\n  402691:\t90                   \tnop\n  402692:\t48 83 c4 38          \tadd    $0x38,%rsp\n  402696:\tc3                   \tretq   ", "code_s": "__int64 __fastcall print_help(__int64 a1) {\n  const char *v1;\n  char <span class=\"supfact\">v3</span>[Number];\n  str_new(<span class=\"supfact\">v3</span>);\n  menu_get_ext_help(a1, <span class=\"supfact\">v3</span>);\n  v1 = (const char *)str_get(<span class=\"supfact\">v3</span>);\n  printf(String, v1);\n  return str_free(<span class=\"supfact\">v3</span>);\n}", "code_t": "void __cdecl print_help(menu *menu) {\n  const char *v1;\n  gstr <span class=\"supfact\">help</span>;\n  str_new(&<span class=\"supfact\">help</span>);\n  menu_get_ext_help(menu, &<span class=\"supfact\">help</span>);\n  v1 = str_get(&<span class=\"supfact\">help</span>);\n  printf(String, v1);\n  str_free(&<span class=\"supfact\">help</span>);\n}", "var": [{"name": "v3", "type": "struct gstr { size_t len; char * s; int max_width; PADDING (4); }", "ref_name": "help", "ref_type": "struct gstr { size_t len; char * s; int max_width; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "dpryan79", "repo_name": "Misc", "path": "dpryan79/Misc/638c5dfb1858643212b5708d77055d022dd0e8172c3adb1f62aeaa98e094727e", "path_in_repo": "dpryan79/Misc/htslib/test/test_view", "objdump": "000000000042e593 <cram_add_bases>:\n  42e593:\t55                   \tpush   %rbp\n  42e594:\t48 89 e5             \tmov    %rsp,%rbp\n  42e597:\t48 83 ec 40          \tsub    $0x40,%rsp\n  42e59b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  42e59f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  42e5a3:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  42e5a7:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n  42e5ab:\t44 89 45 cc          \tmov    %r8d,-0x34(%rbp)\n  42e5af:\t44 89 4d c8          \tmov    %r9d,-0x38(%rbp)\n  42e5b3:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  42e5b6:\t83 c0 01             \tadd    $0x1,%eax\n  42e5b9:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  42e5bc:\tc7 45 f4 62 00 00 00 \tmovl   $0x62,-0xc(%rbp)\n  42e5c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42e5c7:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n  42e5cb:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  42e5cf:\t48 8b 55 10          \tmov    0x10(%rbp),%rdx\n  42e5d3:\t48 29 c2             \tsub    %rax,%rdx\n  42e5d6:\t48 89 d0             \tmov    %rdx,%rax\n  42e5d9:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  42e5dc:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  42e5df:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42e5e2:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n  42e5e6:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  42e5ea:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n  42e5ee:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  42e5f2:\t48 89 c7             \tmov    %rax,%rdi\n  42e5f5:\te8 da fb ff ff       \tcallq  42e1d4 <cram_add_feature>\n  42e5fa:\tc9                   \tleaveq \n  42e5fb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cram_add_bases(__int64 a1, __int64 a2, __int64 a3,\n                                  __int64 a4, int a5, unsigned int a6,\n                                  __int64 a7) {\n  unsigned int <span class=\"supfact\">v8</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = a5 + Number;\n  <span class=\"supfact\">v8</span>[Number] = Number;\n  <span class=\"supfact\">v8</span>[Number] =\n      a7 - *(_QWORD *)(*(_QWORD *)(a3 + Number) + Number L);\n  <span class=\"supfact\">v8</span>[Number] = a6;\n  return cram_add_feature(a2, a3, a4, <span class=\"supfact\">v8</span>);\n}", "code_t": "int __cdecl cram_add_bases(cram_fd_0 *fd, cram_container *c, cram_slice_0 *s,\n                           cram_record *r, int pos, int len, char *base) {\n  cram_feature <span class=\"supfact\">f</span>;\n  <span class=\"supfact\">f</span>._anon_0.X.pos = pos + Number;\n  <span class=\"supfact\">f</span>._anon_0.X.code = Number;\n  <span class=\"supfact\">f</span>._anon_0.X.base =\n      (_DWORD)base - (unsigned __int64)s->seqs_blk->data;\n  <span class=\"supfact\">f</span>._anon_0.B.qual = len;\n  return cram_add_feature(c, s, r, &<span class=\"supfact\">f</span>);\n}", "var": [{"name": "v8", "type": "struct cram_feature { $3D26F883D758A3EEA605D3EFFEDCDF84 _anon_0; }", "ref_name": "f", "ref_type": "struct cram_feature { $3D26F883D758A3EEA605D3EFFEDCDF84 _anon_0; }"}], "body_in_train": true}, {"repo_owner": "get-set", "repo_name": "book-csapp", "path": "get-set/book-csapp/58564615880c859ac0e80361a3e445e1fc91c3f56fc4ed686103fe222bbd7a8e", "path_in_repo": "get-set/book-csapp/code/netp/tiny/tiny", "objdump": "00000000004040e4 <Gethostbyaddr>:\n  4040e4:\t55                   \tpush   %rbp\n  4040e5:\t48 89 e5             \tmov    %rsp,%rbp\n  4040e8:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4040ec:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4040f0:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  4040f3:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n  4040f6:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n  4040f9:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  4040fc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  404100:\t89 ce                \tmov    %ecx,%esi\n  404102:\t48 89 c7             \tmov    %rax,%rdi\n  404105:\te8 a6 e3 ff ff       \tcallq  4024b0 <gethostbyaddr@plt>\n  40410a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40410e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  404113:\t75 0a                \tjne    40411f <Gethostbyaddr+0x3b>\n  404115:\tbf 9c 55 40 00       \tmov    $0x40559c,%edi\n  40411a:\te8 7a f0 ff ff       \tcallq  403199 <dns_error>\n  40411f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404123:\tc9                   \tleaveq \n  404124:\tc3                   \tretq   ", "code_s": "struct hostent *__fastcall Gethostbyaddr(const void *a1, __socklen_t a2,\n                                         int a3) {\n  struct hostent *<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = gethostbyaddr(a1, a2, a3);\n  if (!<span class=\"supfact\">v4</span>)\n    dns_error(String);\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "hostent *__cdecl Gethostbyaddr(const char *addr, int len, int type) {\n  struct hostent *<span class=\"supfact\">p</span>;\n  <span class=\"supfact\">p</span> = gethostbyaddr(addr, len, type);\n  if (!<span class=\"supfact\">p</span>)\n    dns_error(String);\n  return <span class=\"supfact\">p</span>;\n}", "var": [{"name": "v4", "type": "struct hostent *", "ref_name": "p", "ref_type": "struct hostent *"}], "body_in_train": true}, {"repo_owner": "Khadgar1006", "repo_name": "FORLINX-Linux3.14-I.MX6UL", "path": "Khadgar1006/FORLINX-Linux3.14-I.MX6UL/a4ecb432de897a5cd22d67b8ee18da948e7655206142468217e4303ad30f5cde", "path_in_repo": "Khadgar1006/FORLINX-Linux3.14-I.MX6UL/linux-3.14.38/drivers/scsi/aic7xxx/aicasm/aicasm", "objdump": "0000000000402a93 <symtable_get>:\n  402a93:\t55                   \tpush   %rbp\n  402a94:\t48 89 e5             \tmov    %rsp,%rbp\n  402a97:\t48 83 ec 50          \tsub    $0x50,%rsp\n  402a9b:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  402a9f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  402aa3:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  402aa7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  402aab:\t48 89 c7             \tmov    %rax,%rdi\n  402aae:\te8 7d e6 ff ff       \tcallq  401130 <strlen@plt>\n  402ab3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  402ab7:\t48 8b 05 12 37 01 00 \tmov    0x13712(%rip),%rax        # 4161d0 <symtable>\n  402abe:\t4c 8b 40 18          \tmov    0x18(%rax),%r8\n  402ac2:\t48 8b 05 07 37 01 00 \tmov    0x13707(%rip),%rax        # 4161d0 <symtable>\n  402ac9:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  402acd:\t48 8d 75 e0          \tlea    -0x20(%rbp),%rsi\n  402ad1:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  402ad6:\t48 89 c7             \tmov    %rax,%rdi\n  402ad9:\t41 ff d0             \tcallq  *%r8\n  402adc:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  402adf:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  402ae3:\t0f 84 97 00 00 00    \tje     402b80 <symtable_get+0xed>\n  402ae9:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n  402aed:\t75 14                \tjne    402b03 <symtable_get+0x70>\n  402aef:\tbf a8 d8 40 00       \tmov    $0x40d8a8,%edi\n  402af4:\te8 37 e7 ff ff       \tcallq  401230 <perror@plt>\n  402af9:\tbf 46 00 00 00       \tmov    $0x46,%edi\n  402afe:\te8 8d e5 ff ff       \tcallq  401090 <exit@plt>\n  402b03:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n  402b07:\t75 63                \tjne    402b6c <symtable_get+0xd9>\n  402b09:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  402b0d:\t48 89 c7             \tmov    %rax,%rdi\n  402b10:\te8 cf fc ff ff       \tcallq  4027e4 <symbol_create>\n  402b15:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  402b19:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  402b1d:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  402b21:\t48 c7 45 d8 08 00 00 \tmovq   $0x8,-0x28(%rbp)\n  402b28:\t00 \n  402b29:\t48 8b 05 a0 36 01 00 \tmov    0x136a0(%rip),%rax        # 4161d0 <symtable>\n  402b30:\t4c 8b 40 20          \tmov    0x20(%rax),%r8\n  402b34:\t48 8b 05 95 36 01 00 \tmov    0x13695(%rip),%rax        # 4161d0 <symtable>\n  402b3b:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  402b3f:\t48 8d 75 e0          \tlea    -0x20(%rbp),%rsi\n  402b43:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  402b48:\t48 89 c7             \tmov    %rax,%rdi\n  402b4b:\t41 ff d0             \tcallq  *%r8\n  402b4e:\t85 c0                \ttest   %eax,%eax\n  402b50:\t74 14                \tje     402b66 <symtable_get+0xd3>\n  402b52:\tbf ca d8 40 00       \tmov    $0x40d8ca,%edi\n  402b57:\te8 d4 e6 ff ff       \tcallq  401230 <perror@plt>\n  402b5c:\tbf 46 00 00 00       \tmov    $0x46,%edi\n  402b61:\te8 2a e5 ff ff       \tcallq  401090 <exit@plt>\n  402b66:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402b6a:\teb 75                \tjmp    402be1 <symtable_get+0x14e>\n  402b6c:\tbf e0 d8 40 00       \tmov    $0x40d8e0,%edi\n  402b71:\te8 ba e6 ff ff       \tcallq  401230 <perror@plt>\n  402b76:\tbf 46 00 00 00       \tmov    $0x46,%edi\n  402b7b:\te8 10 e5 ff ff       \tcallq  401090 <exit@plt>\n  402b80:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  402b84:\t48 8b 00             \tmov    (%rax),%rax\n  402b87:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  402b8b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402b8f:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  402b92:\t83 c2 01             \tadd    $0x1,%edx\n  402b95:\t89 50 0c             \tmov    %edx,0xc(%rax)\n  402b98:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  402b9c:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  402ba0:\t48 8b 05 29 36 01 00 \tmov    0x13629(%rip),%rax        # 4161d0 <symtable>\n  402ba7:\t4c 8b 40 20          \tmov    0x20(%rax),%r8\n  402bab:\t48 8b 05 1e 36 01 00 \tmov    0x1361e(%rip),%rax        # 4161d0 <symtable>\n  402bb2:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  402bb6:\t48 8d 75 e0          \tlea    -0x20(%rbp),%rsi\n  402bba:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  402bbf:\t48 89 c7             \tmov    %rax,%rdi\n  402bc2:\t41 ff d0             \tcallq  *%r8\n  402bc5:\t85 c0                \ttest   %eax,%eax\n  402bc7:\t74 14                \tje     402bdd <symtable_get+0x14a>\n  402bc9:\tbf ca d8 40 00       \tmov    $0x40d8ca,%edi\n  402bce:\te8 5d e6 ff ff       \tcallq  401230 <perror@plt>\n  402bd3:\tbf 46 00 00 00       \tmov    $0x46,%edi\n  402bd8:\te8 b3 e4 ff ff       \tcallq  401090 <exit@plt>\n  402bdd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402be1:\tc9                   \tleaveq \n  402be2:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall symtable_get(const char *a1) {\n  _DWORD *result;\n  _DWORD *v2;\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  _DWORD *v5;\n  int v6;\n  <span class=\"supfact\">v4</span>[Number] = (__int64)a1;\n  <span class=\"supfact\">v4</span>[Number] = strlen(a1);\n  v6 = (*(__int64(__fastcall **)(__int64, __int64 *, __int64 *, _QWORD))(\n      symtable + Number))(symtable, <span class=\"supfact\">v4</span>, <span class=\"supfact\">v3</span>,\n                          Number L);\n  if (v6) {\n    if (v6 == Number) {\n      perror(String);\n      exit(Number);\n    }\n    if (v6 != Number) {\n      perror(String);\n      exit(Number);\n    }\n    v2 = symbol_create(a1);\n    <span class=\"supfact\">v3</span>[Number] = (__int64)&v2;\n    <span class=\"supfact\">v3</span>[Number] = Number L;\n    if ((*(unsigned int(__fastcall **)(__int64, __int64 *, __int64 *, _QWORD))(\n            symtable + Number))(symtable, <span class=\"supfact\">v4</span>,\n                                <span class=\"supfact\">v3</span>, Number L)) {\n      perror(String);\n      exit(Number);\n    }\n    result = v2;\n  } else {\n    v5 = *(_DWORD **)<span class=\"supfact\">v3</span>[Number];\n    ++v5[Number];\n    <span class=\"supfact\">v3</span>[Number] = (__int64)&v5;\n    if ((*(unsigned int(__fastcall **)(__int64, __int64 *, __int64 *, _QWORD))(\n            symtable + Number))(symtable, <span class=\"supfact\">v4</span>,\n                                <span class=\"supfact\">v3</span>, Number L)) {\n      perror(String);\n      exit(Number);\n    }\n    result = v5;\n  }\n  return result;\n}", "code_t": "symbol_t *__cdecl symtable_get(char *name) {\n  symbol_t *result;\n  symbol_t *new_symbol;\n  DBT <span class=\"supfact\">data</span>;\n  DBT <span class=\"supfact\">key</span>;\n  symbol_t *stored_ptr;\n  int retval;\n  <span class=\"supfact\">key</span>.<span class=\"supfact\">data</span> = name;\n  <span class=\"supfact\">key</span>.size = strlen(name);\n  retval = symtable->get(symtable, &<span class=\"supfact\">key</span>, &<span class=\"supfact\">data</span>,\n                         Number L);\n  if (retval) {\n    if (retval == Number) {\n      perror(String);\n      exit(Number);\n    }\n    if (retval != Number) {\n      perror(String);\n      exit(Number);\n    }\n    new_symbol = symbol_create(name);\n    <span class=\"supfact\">data</span>.<span class=\"supfact\">data</span> = &new_symbol;\n    <span class=\"supfact\">data</span>.size = Number L;\n    if (symtable->put(symtable, &<span class=\"supfact\">key</span>, &<span class=\"supfact\">data</span>,\n                      Number L)) {\n      perror(String);\n      exit(Number);\n    }\n    result = new_symbol;\n  } else {\n    stored_ptr = *(symbol_t **)<span class=\"supfact\">data</span>.<span class=\"supfact\">data</span>;\n    ++stored_ptr->count;\n    <span class=\"supfact\">data</span>.<span class=\"supfact\">data</span> = &stored_ptr;\n    if (symtable->put(symtable, &<span class=\"supfact\">key</span>, &<span class=\"supfact\">data</span>,\n                      Number L)) {\n      perror(String);\n      exit(Number);\n    }\n    result = stored_ptr;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct DBT { void * data; size_t size; }", "ref_name": "key", "ref_type": "struct DBT { void * data; size_t size; }"}, {"name": "v3", "type": "struct DBT { void * data; size_t size; }", "ref_name": "data", "ref_type": "struct DBT { void * data; size_t size; }"}], "body_in_train": true}, {"repo_owner": "christophrico", "repo_name": "OSU_CS372", "path": "christophrico/OSU_CS372/53ec4907d3247fe20a55422477a12e9aa51ca1a23530ce9e1466e8301fce0cc2", "path_in_repo": "christophrico/OSU_CS372/p2/ftserve", "objdump": "000000000040197a <fileValid>:\n  40197a:\t55                   \tpush   %rbp\n  40197b:\t48 89 e5             \tmov    %rsp,%rbp\n  40197e:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  401985:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  40198c:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  401993:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40199a:\t48 89 d6             \tmov    %rdx,%rsi\n  40199d:\t48 89 c7             \tmov    %rax,%rdi\n  4019a0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4019a5:\te8 96 05 00 00       \tcallq  401f40 <__stat>\n  4019aa:\t85 c0                \ttest   %eax,%eax\n  4019ac:\t74 09                \tje     4019b7 <fileValid+0x3d>\n  4019ae:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4019b5:\teb 07                \tjmp    4019be <fileValid+0x44>\n  4019b7:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  4019be:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4019c1:\tc9                   \tleaveq \n  4019c2:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall fileValid(char *a1) {\n  struct stat <span class=\"supfact\">v2</span>;\n  return (unsigned int)stat(a1, &<span class=\"supfact\">v2</span>) == Number;\n}", "code_t": "int __cdecl fileValid(char *fileName) {\n  stat <span class=\"supfact\">sb</span>;\n  return stat_0(fileName, &<span class=\"supfact\">sb</span>) == Number;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "sb", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/c54b8f11ecb2104b5fed8ba3cbb386cdc57e653895015763d450f4f7757e485a", "path_in_repo": "eerimoq/pumbaa/simba/tst/debug/log/build/linux/obj/usr/src/repo/simba/src/kernel/sys.o", "objdump": "0000000000000000 <sys_uptime>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <sys_uptime+0xd>\n   d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  11:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18 <sys_uptime+0x18>\n  18:\t48 83 c0 01          \tadd    $0x1,%rax\n  1c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 23 <sys_uptime+0x23>\n  23:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  28:\t75 41                \tjne    6b <sys_uptime+0x6b>\n  2a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 31 <sys_uptime+0x31>\n  31:\t48 83 c0 01          \tadd    $0x1,%rax\n  35:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 3c <sys_uptime+0x3c>\n  3c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  41:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  46:\te8 00 00 00 00       \tcallq  4b <sys_uptime+0x4b>\n  4b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 52 <sys_uptime+0x52>\n  52:\t48 83 c0 01          \tadd    $0x1,%rax\n  56:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 5d <sys_uptime+0x5d>\n  5d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 64 <sys_uptime+0x64>\n  64:\tbf 16 00 00 00       \tmov    $0x16,%edi\n  69:\tff d0                \tcallq  *%rax\n  6b:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n  72:\te8 00 00 00 00       \tcallq  77 <sys_uptime+0x77>\n  77:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7e <sys_uptime+0x7e>\n  7e:\t48 83 c0 01          \tadd    $0x1,%rax\n  82:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 89 <sys_uptime+0x89>\n  89:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 90 <sys_uptime+0x90>\n  90:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  94:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  99:\te8 00 00 00 00       \tcallq  9e <sys_uptime+0x9e>\n  9e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # a5 <sys_uptime+0xa5>\n  a5:\t48 83 c2 01          \tadd    $0x1,%rdx\n  a9:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # b0 <sys_uptime+0xb0>\n  b0:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  b3:\te8 00 00 00 00       \tcallq  b8 <sys_uptime+0xb8>\n  b8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # bf <sys_uptime+0xbf>\n  bf:\t48 83 c0 01          \tadd    $0x1,%rax\n  c3:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # ca <sys_uptime+0xca>\n  ca:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  d2:\t48 89 d6             \tmov    %rdx,%rsi\n  d5:\t48 89 c7             \tmov    %rax,%rdi\n  d8:\te8 00 00 00 00       \tcallq  dd <sys_uptime+0xdd>\n  dd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e4 <sys_uptime+0xe4>\n  e4:\t48 83 c0 01          \tadd    $0x1,%rax\n  e8:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # ef <sys_uptime+0xef>\n  ef:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  f3:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  f7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  fb:\t48 89 ce             \tmov    %rcx,%rsi\n  fe:\t48 89 c7             \tmov    %rax,%rdi\n 101:\te8 00 00 00 00       \tcallq  106 <sys_uptime+0x106>\n 106:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 10d <sys_uptime+0x10d>\n 10d:\t48 83 c2 01          \tadd    $0x1,%rdx\n 111:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 118 <sys_uptime+0x118>\n 118:\tc9                   \tleaveq \n 119:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sys_uptime(_DWORD *a1) {\n  int v1;\n  __int64 result;\n  int <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>;\n  ++_gcov0_sys_uptime;\n  if (!a1) {\n    ++qword_13E8;\n    std_printf(String);\n    ++qword_13F0;\n    sys(Number L);\n  }\n  <span class=\"supfact\">v3</span>[Number] = Number;\n  sys_lock();\n  ++qword_13F8;\n  <span class=\"supfact\">v4</span> = qword_14;\n  v1 = sys_port_get_time_into_tick();\n  ++qword_1400;\n  <span class=\"supfact\">v3</span>[Number] = v1;\n  sys_unlock();\n  ++qword_1408;\n  tick_to_time(a1, &<span class=\"supfact\">v4</span>);\n  ++qword_1410;\n  result = time_add(a1, a1, <span class=\"supfact\">v3</span>);\n  ++qword_1418;\n  return result;\n}", "code_t": "int __cdecl sys_uptime(time_t *uptime_p) {\n  int v1;\n  int result;\n  time_t <span class=\"supfact\">offset</span>;\n  tick_t <span class=\"supfact\">tick</span>;\n  ++_gcov0_sys_uptime;\n  if (!uptime_p) {\n    ++qword_13E8;\n    std_printf(String);\n    ++qword_13F0;\n    ((void(__fastcall *)(int))sys.on_fatal_callback)(Number);\n  }\n  <span class=\"supfact\">offset</span>.seconds = Number;\n  sys_lock();\n  ++qword_13F8;\n  <span class=\"supfact\">tick</span> = module.<span class=\"supfact\">tick</span>;\n  v1 = sys_port_get_time_into_tick();\n  ++qword_1400;\n  <span class=\"supfact\">offset</span>.nanoseconds = v1;\n  sys_unlock();\n  ++qword_1408;\n  tick_to_time(uptime_p, &<span class=\"supfact\">tick</span>);\n  ++qword_1410;\n  result = time_add(uptime_p, uptime_p, &<span class=\"supfact\">offset</span>);\n  ++qword_1418;\n  return result;\n}", "var": [{"name": "v4", "type": "struct tick_t { uint32_t msb; uint32_t lsb; }", "ref_name": "tick", "ref_type": "struct tick_t { uint32_t msb; uint32_t lsb; }"}, {"name": "v3", "type": "struct time_t { int32_t seconds; int32_t nanoseconds; }", "ref_name": "offset", "ref_type": "struct time_t { int32_t seconds; int32_t nanoseconds; }"}], "body_in_train": true}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/c54b8f11ecb2104b5fed8ba3cbb386cdc57e653895015763d450f4f7757e485a", "path_in_repo": "eerimoq/pumbaa/simba/tst/debug/log/build/linux/obj/usr/src/repo/simba/src/kernel/sys.o", "objdump": "0000000000000000 <sys_uptime>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <sys_uptime+0xd>\n   d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  11:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18 <sys_uptime+0x18>\n  18:\t48 83 c0 01          \tadd    $0x1,%rax\n  1c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 23 <sys_uptime+0x23>\n  23:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  28:\t75 41                \tjne    6b <sys_uptime+0x6b>\n  2a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 31 <sys_uptime+0x31>\n  31:\t48 83 c0 01          \tadd    $0x1,%rax\n  35:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 3c <sys_uptime+0x3c>\n  3c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  41:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  46:\te8 00 00 00 00       \tcallq  4b <sys_uptime+0x4b>\n  4b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 52 <sys_uptime+0x52>\n  52:\t48 83 c0 01          \tadd    $0x1,%rax\n  56:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 5d <sys_uptime+0x5d>\n  5d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 64 <sys_uptime+0x64>\n  64:\tbf 16 00 00 00       \tmov    $0x16,%edi\n  69:\tff d0                \tcallq  *%rax\n  6b:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n  72:\te8 00 00 00 00       \tcallq  77 <sys_uptime+0x77>\n  77:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7e <sys_uptime+0x7e>\n  7e:\t48 83 c0 01          \tadd    $0x1,%rax\n  82:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 89 <sys_uptime+0x89>\n  89:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 90 <sys_uptime+0x90>\n  90:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  94:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  99:\te8 00 00 00 00       \tcallq  9e <sys_uptime+0x9e>\n  9e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # a5 <sys_uptime+0xa5>\n  a5:\t48 83 c2 01          \tadd    $0x1,%rdx\n  a9:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # b0 <sys_uptime+0xb0>\n  b0:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  b3:\te8 00 00 00 00       \tcallq  b8 <sys_uptime+0xb8>\n  b8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # bf <sys_uptime+0xbf>\n  bf:\t48 83 c0 01          \tadd    $0x1,%rax\n  c3:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # ca <sys_uptime+0xca>\n  ca:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  d2:\t48 89 d6             \tmov    %rdx,%rsi\n  d5:\t48 89 c7             \tmov    %rax,%rdi\n  d8:\te8 00 00 00 00       \tcallq  dd <sys_uptime+0xdd>\n  dd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e4 <sys_uptime+0xe4>\n  e4:\t48 83 c0 01          \tadd    $0x1,%rax\n  e8:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # ef <sys_uptime+0xef>\n  ef:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  f3:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  f7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  fb:\t48 89 ce             \tmov    %rcx,%rsi\n  fe:\t48 89 c7             \tmov    %rax,%rdi\n 101:\te8 00 00 00 00       \tcallq  106 <sys_uptime+0x106>\n 106:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 10d <sys_uptime+0x10d>\n 10d:\t48 83 c2 01          \tadd    $0x1,%rdx\n 111:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 118 <sys_uptime+0x118>\n 118:\tc9                   \tleaveq \n 119:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sys_uptime(_DWORD *a1) {\n  int v1;\n  __int64 result;\n  int <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>;\n  ++_gcov0_sys_uptime;\n  if (!a1) {\n    ++qword_13E8;\n    std_printf(String);\n    ++qword_13F0;\n    sys(Number L);\n  }\n  <span class=\"supfact\">v3</span>[Number] = Number;\n  sys_lock();\n  ++qword_13F8;\n  <span class=\"supfact\">v4</span> = qword_14;\n  v1 = sys_port_get_time_into_tick();\n  ++qword_1400;\n  <span class=\"supfact\">v3</span>[Number] = v1;\n  sys_unlock();\n  ++qword_1408;\n  tick_to_time(a1, &<span class=\"supfact\">v4</span>);\n  ++qword_1410;\n  result = time_add(a1, a1, <span class=\"supfact\">v3</span>);\n  ++qword_1418;\n  return result;\n}", "code_t": "int __cdecl sys_uptime(time_t *uptime_p) {\n  int v1;\n  int result;\n  time_t <span class=\"supfact\">offset</span>;\n  tick_t <span class=\"supfact\">tick</span>;\n  ++_gcov0_sys_uptime;\n  if (!uptime_p) {\n    ++qword_13E8;\n    std_printf(String);\n    ++qword_13F0;\n    ((void(__fastcall *)(int))sys.on_fatal_callback)(Number);\n  }\n  <span class=\"supfact\">offset</span>.seconds = Number;\n  sys_lock();\n  ++qword_13F8;\n  <span class=\"supfact\">tick</span> = module.<span class=\"supfact\">tick</span>;\n  v1 = sys_port_get_time_into_tick();\n  ++qword_1400;\n  <span class=\"supfact\">offset</span>.nanoseconds = v1;\n  sys_unlock();\n  ++qword_1408;\n  tick_to_time(uptime_p, &<span class=\"supfact\">tick</span>);\n  ++qword_1410;\n  result = time_add(uptime_p, uptime_p, &<span class=\"supfact\">offset</span>);\n  ++qword_1418;\n  return result;\n}", "var": [{"name": "v4", "type": "struct tick_t { uint32_t msb; uint32_t lsb; }", "ref_name": "tick", "ref_type": "struct tick_t { uint32_t msb; uint32_t lsb; }"}, {"name": "v3", "type": "struct time_t { int32_t seconds; int32_t nanoseconds; }", "ref_name": "offset", "ref_type": "struct time_t { int32_t seconds; int32_t nanoseconds; }"}], "body_in_train": true}, {"repo_owner": "JamesLinus", "repo_name": "freebsd-base-graphics", "path": "JamesLinus/freebsd-base-graphics/b511185bf60fbe55b576b33c963913ea72dfaba89f1477c1c470140fa7ecf8b5", "path_in_repo": "JamesLinus/freebsd-base-graphics/lib/libunbound/iter_delegpt.so", "objdump": "0000000000000fe4 <delegpt_add_rrset_A>:\n     fe4:\t55                   \tpush   %rbp\n     fe5:\t48 89 e5             \tmov    %rsp,%rbp\n     fe8:\t48 83 ec 50          \tsub    $0x50,%rsp\n     fec:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     ff0:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     ff4:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     ff8:\t89 c8                \tmov    %ecx,%eax\n     ffa:\t88 45 b4             \tmov    %al,-0x4c(%rbp)\n     ffd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1001:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n    1005:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1009:\tc7 45 ec 10 00 00 00 \tmovl   $0x10,-0x14(%rbp)\n    1010:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    1013:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1017:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    101c:\t48 89 c7             \tmov    %rax,%rdi\n    101f:\te8 00 00 00 00       \tcallq  1024 <delegpt_add_rrset_A+0x40>\n    1024:\t66 c7 45 d0 02 00    \tmovw   $0x2,-0x30(%rbp)\n    102a:\tbf 35 00 00 00       \tmov    $0x35,%edi\n    102f:\te8 00 00 00 00       \tcallq  1034 <delegpt_add_rrset_A+0x50>\n    1034:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n    1038:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    103f:\t00 \n    1040:\te9 93 00 00 00       \tjmpq   10d8 <delegpt_add_rrset_A+0xf4>\n    1045:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1049:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    104d:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    1051:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    1055:\t48 01 d0             \tadd    %rdx,%rax\n    1058:\t48 8b 00             \tmov    (%rax),%rax\n    105b:\t48 83 f8 06          \tcmp    $0x6,%rax\n    105f:\t75 71                \tjne    10d2 <delegpt_add_rrset_A+0xee>\n    1061:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1065:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1069:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    106d:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    1071:\t48 01 d0             \tadd    %rdx,%rax\n    1074:\t48 8b 00             \tmov    (%rax),%rax\n    1077:\t48 83 c0 02          \tadd    $0x2,%rax\n    107b:\t8b 00                \tmov    (%rax),%eax\n    107d:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    1080:\t44 0f b6 45 b4       \tmovzbl -0x4c(%rbp),%r8d\n    1085:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1089:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    108c:\t83 f8 01             \tcmp    $0x1,%eax\n    108f:\t0f 94 c0             \tsete   %al\n    1092:\t0f b6 f8             \tmovzbl %al,%edi\n    1095:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1099:\t48 8b 48 78          \tmov    0x78(%rax),%rcx\n    109d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    10a1:\t48 8b 50 70          \tmov    0x70(%rax),%rdx\n    10a5:\t44 8b 4d ec          \tmov    -0x14(%rbp),%r9d\n    10a9:\t4c 8d 55 d0          \tlea    -0x30(%rbp),%r10\n    10ad:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n    10b1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    10b5:\t41 50                \tpush   %r8\n    10b7:\t57                   \tpush   %rdi\n    10b8:\t4d 89 d0             \tmov    %r10,%r8\n    10bb:\t48 89 c7             \tmov    %rax,%rdi\n    10be:\te8 00 00 00 00       \tcallq  10c3 <delegpt_add_rrset_A+0xdf>\n    10c3:\t48 83 c4 10          \tadd    $0x10,%rsp\n    10c7:\t85 c0                \ttest   %eax,%eax\n    10c9:\t75 08                \tjne    10d3 <delegpt_add_rrset_A+0xef>\n    10cb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    10d0:\teb 1d                \tjmp    10ef <delegpt_add_rrset_A+0x10b>\n    10d2:\t90                   \tnop\n    10d3:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    10d8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    10dc:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    10e0:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n    10e4:\t0f 82 5b ff ff ff    \tjb     1045 <delegpt_add_rrset_A+0x61>\n    10ea:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    10ef:\tc9                   \tleaveq \n    10f0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall delegpt_add_rrset_A(__int64 a1, __int64 a2, _QWORD *a3,\n                                       unsigned __int8 a4) {\n  int <span class=\"supfact\">s</span>[Number];\n  unsigned int n[Number];\n  unsigned __int64 i;\n  *(_QWORD *)&n[Number] = a3[Number];\n  n[Number] = Number;\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  LOWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n  HIWORD(<span class=\"supfact\">s</span>[Number]) = htons(Number);\n  for (i = Number L; i < *(_QWORD *)(*(_QWORD *)&n[Number] + Number L); ++i) {\n    if (*(_QWORD *)(Number * i + *(_QWORD *)(*(_QWORD *)&n[Number] +\n                                             Number L)) == Number L) {\n      <span class=\"supfact\">s</span>[Number] = *(\n          _DWORD *)(*(_QWORD *)(Number * i +\n                                *(_QWORD *)(*(_QWORD *)&n[Number] + Number L)) +\n                    Number L);\n      if (!(unsigned int)delegpt_add_target(\n              a1, a2, a3[Number], a3[Number], (__int64)<span class=\"supfact\">s</span>,\n              n[Number],\n              *(_DWORD *)(*(_QWORD *)&n[Number] + Number L) == Number, a4))\n        return Number L;\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl delegpt_add_rrset_A(delegpt *dp, regional *region,\n                                ub_packed_rrset_key *ak, uint8_t lame) {\n  sockaddr_in <span class=\"supfact\">sa</span>;\n  socklen_t len;\n  packed_rrset_data *d;\n  size_t i;\n  d = (packed_rrset_data *)ak->entry.data;\n  len = Number;\n  memset(&<span class=\"supfact\">sa</span>, Number, sizeof(<span class=\"supfact\">sa</span>));\n  <span class=\"supfact\">sa</span>.sin_family = Number;\n  <span class=\"supfact\">sa</span>.sin_port = htons(Number);\n  for (i = Number L; i < d->count; ++i) {\n    if (d->rr_len[i] == Number) {\n      <span class=\"supfact\">sa</span>.sin_addr.s_addr = *(_DWORD *)(d->rr_data[i] + Number);\n      if (!delegpt_add_target(dp, region, ak->rk.dname, ak->rk.dname_len,\n                              (sockaddr_storage *)&<span class=\"supfact\">sa</span>, len,\n                              d->security == sec_status_bogus, lame))\n        return Number;\n    }\n  }\n  return Number;\n}", "var": [{"name": "s", "type": "int[5]", "ref_name": "sa", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "Hadden", "repo_name": "wrt_system", "path": "Hadden/wrt_system/f9dd1f311a95f1db689a419e7fe9f8ea4a536e4ccb54374f2afcca865c7ac3d2", "path_in_repo": "Hadden/wrt_system/zlog-latest-stable/test/test_init", "objdump": "0000000000411db5 <zc_time>:\n  411db5:\t55                   \tpush   %rbp\n  411db6:\t48 89 e5             \tmov    %rsp,%rbp\n  411db9:\t48 83 ec 50          \tsub    $0x50,%rsp\n  411dbd:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  411dc1:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  411dc5:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  411dc9:\t48 89 c7             \tmov    %rax,%rdi\n  411dcc:\te8 cf 04 ff ff       \tcallq  4022a0 <time@plt>\n  411dd1:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  411dd5:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  411dd9:\t48 89 d6             \tmov    %rdx,%rsi\n  411ddc:\t48 89 c7             \tmov    %rax,%rdi\n  411ddf:\te8 bc 02 ff ff       \tcallq  4020a0 <localtime_r@plt>\n  411de4:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  411de8:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n  411dec:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  411df0:\t48 89 d1             \tmov    %rdx,%rcx\n  411df3:\t48 8d 15 16 5c 00 00 \tlea    0x5c16(%rip),%rdx        # 417a10 <__func__.4035+0x2986>\n  411dfa:\t48 89 c7             \tmov    %rax,%rdi\n  411dfd:\te8 5e 05 ff ff       \tcallq  402360 <strftime@plt>\n  411e02:\t90                   \tnop\n  411e03:\tc9                   \tleaveq \n  411e04:\tc3                   \tretq   ", "code_s": "size_t __fastcall zc_time(char *a1, size_t a2) {\n  struct tm <span class=\"supfact\">tp</span>;\n  time_t timer;\n  time(&timer);\n  localtime_r(&timer, &<span class=\"supfact\">tp</span>);\n  return strftime(a1, a2, String, &<span class=\"supfact\">tp</span>);\n}", "code_t": "void __cdecl zc_time(char *time_str, size_t time_str_size) {\n  tm <span class=\"supfact\">local_time</span>;\n  time_t tt;\n  time(&tt);\n  localtime_r(&tt, &<span class=\"supfact\">local_time</span>);\n  strftime(time_str, time_str_size, String, &<span class=\"supfact\">local_time</span>);\n}", "var": [{"name": "tp", "type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }", "ref_name": "local_time", "ref_type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}], "body_in_train": true}, {"repo_owner": "bvdberg", "repo_name": "code", "path": "bvdberg/code/c835cf22343b9e3582a102c0fece522d5672687c721eff4bfd27d3f9c7cba1b8", "path_in_repo": "bvdberg/code/linux/time-sync/server", "objdump": "00000000004011d2 <main>:\n  4011d2:\t55                   \tpush   %rbp\n  4011d3:\t48 89 e5             \tmov    %rsp,%rbp\n  4011d6:\t48 83 ec 60          \tsub    $0x60,%rsp\n  4011da:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n  4011dd:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  4011e1:\tc7 45 fc 0f 27 00 00 \tmovl   $0x270f,-0x4(%rbp)\n  4011e8:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4011ed:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4011f2:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  4011f7:\te8 e4 fe ff ff       \tcallq  4010e0 <socket@plt>\n  4011fc:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4011ff:\t83 7d f8 ff          \tcmpl   $0xffffffff,-0x8(%rbp)\n  401203:\t75 14                \tjne    401219 <main+0x47>\n  401205:\tbf 08 20 40 00       \tmov    $0x402008,%edi\n  40120a:\te8 21 fe ff ff       \tcallq  401030 <puts@plt>\n  40120f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  401214:\te9 37 01 00 00       \tjmpq   401350 <main+0x17e>\n  401219:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n  40121f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401222:\t0f b7 c0             \tmovzwl %ax,%eax\n  401225:\t89 c7                \tmov    %eax,%edi\n  401227:\te8 24 fe ff ff       \tcallq  401050 <htons@plt>\n  40122c:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n  401230:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  401237:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40123b:\t48 83 c0 08          \tadd    $0x8,%rax\n  40123f:\tba 08 00 00 00       \tmov    $0x8,%edx\n  401244:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401249:\t48 89 c7             \tmov    %rax,%rdi\n  40124c:\te8 2f fe ff ff       \tcallq  401080 <memset@plt>\n  401251:\tc7 45 dc 01 00 00 00 \tmovl   $0x1,-0x24(%rbp)\n  401258:\t48 8d 55 dc          \tlea    -0x24(%rbp),%rdx\n  40125c:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40125f:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n  401265:\t48 89 d1             \tmov    %rdx,%rcx\n  401268:\tba 02 00 00 00       \tmov    $0x2,%edx\n  40126d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401272:\t89 c7                \tmov    %eax,%edi\n  401274:\te8 c7 fd ff ff       \tcallq  401040 <setsockopt@plt>\n  401279:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  40127d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  401280:\tba 10 00 00 00       \tmov    $0x10,%edx\n  401285:\t48 89 ce             \tmov    %rcx,%rsi\n  401288:\t89 c7                \tmov    %eax,%edi\n  40128a:\te8 31 fe ff ff       \tcallq  4010c0 <bind@plt>\n  40128f:\t85 c0                \ttest   %eax,%eax\n  401291:\t74 14                \tje     4012a7 <main+0xd5>\n  401293:\tbf 1d 20 40 00       \tmov    $0x40201d,%edi\n  401298:\te8 93 fd ff ff       \tcallq  401030 <puts@plt>\n  40129d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4012a2:\te9 a9 00 00 00       \tjmpq   401350 <main+0x17e>\n  4012a7:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4012aa:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  4012af:\t89 c7                \tmov    %eax,%edi\n  4012b1:\te8 fa fd ff ff       \tcallq  4010b0 <listen@plt>\n  4012b6:\t85 c0                \ttest   %eax,%eax\n  4012b8:\t74 14                \tje     4012ce <main+0xfc>\n  4012ba:\tbf 28 20 40 00       \tmov    $0x402028,%edi\n  4012bf:\te8 6c fd ff ff       \tcallq  401030 <puts@plt>\n  4012c4:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4012c9:\te9 82 00 00 00       \tjmpq   401350 <main+0x17e>\n  4012ce:\tc7 45 d8 10 00 00 00 \tmovl   $0x10,-0x28(%rbp)\n  4012d5:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  4012d9:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n  4012dd:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4012e0:\t48 89 ce             \tmov    %rcx,%rsi\n  4012e3:\t89 c7                \tmov    %eax,%edi\n  4012e5:\te8 e6 fd ff ff       \tcallq  4010d0 <accept@plt>\n  4012ea:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4012ed:\t83 7d f4 ff          \tcmpl   $0xffffffff,-0xc(%rbp)\n  4012f1:\t75 11                \tjne    401304 <main+0x132>\n  4012f3:\tbf 38 20 40 00       \tmov    $0x402038,%edi\n  4012f8:\te8 33 fd ff ff       \tcallq  401030 <puts@plt>\n  4012fd:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  401302:\teb 4c                \tjmp    401350 <main+0x17e>\n  401304:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401309:\te8 92 fd ff ff       \tcallq  4010a0 <time@plt>\n  40130e:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  401312:\t48 8d 75 b8          \tlea    -0x48(%rbp),%rsi\n  401316:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  401319:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  40131e:\tba 08 00 00 00       \tmov    $0x8,%edx\n  401323:\t89 c7                \tmov    %eax,%edi\n  401325:\te8 36 fd ff ff       \tcallq  401060 <send@plt>\n  40132a:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40132d:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  401330:\t89 c6                \tmov    %eax,%esi\n  401332:\tbf 57 20 40 00       \tmov    $0x402057,%edi\n  401337:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40133c:\te8 2f fd ff ff       \tcallq  401070 <printf@plt>\n  401341:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  401344:\t89 c7                \tmov    %eax,%edi\n  401346:\te8 45 fd ff ff       \tcallq  401090 <close@plt>\n  40134b:\te9 57 ff ff ff       \tjmpq   4012a7 <main+0xd5>\n  401350:\tc9                   \tleaveq \n  401351:\tc3                   \tretq   \n  401352:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  401359:\t00 00 00 \n  40135c:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  time_t buf;\n  struct sockaddr <span class=\"supfact\">v5</span>;\n  socklen_t addr_len;\n  int optval;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  unsigned int v9;\n  int v10;\n  int fd;\n  int v12;\n  v12 = Number;\n  fd = socket(Number, Number, Number);\n  if (fd == Number) {\n    puts(String);\n    result = Number;\n  } else {\n    <span class=\"supfact\">addr</span>.sa_family = Number;\n    *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(v12);\n    *(_DWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = Number;\n    memset(&<span class=\"supfact\">addr</span>.sa_data[Number], Number, Number);\n    optval = Number;\n    setsockopt(fd, Number, Number, &optval, Number);\n    if (bind(fd, &<span class=\"supfact\">addr</span>, Number)) {\n      puts(String);\n      result = Number;\n    } else {\n      while (Number) {\n        if (listen(fd, Number)) {\n          puts(String);\n          return Number;\n        }\n        addr_len = Number;\n        v10 = accept(fd, &<span class=\"supfact\">v5</span>, &addr_len);\n        if (v10 == Number)\n          break;\n        buf = time(Number L);\n        v9 = send(v10, &buf, Number, Number);\n        printf(String, v9);\n        close(v10);\n      }\n      puts(String);\n      result = Number;\n    }\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  time_t now;\n  sockaddr_in <span class=\"supfact\">hun_addr</span>;\n  unsigned int sin_size;\n  int reuse;\n  sockaddr_in <span class=\"supfact\">mijn_addr</span>;\n  int nrSent;\n  int new_fd;\n  int sockfd;\n  int SERVER_PORT;\n  SERVER_PORT = Number;\n  sockfd = socket(Number, Number, Number);\n  if (sockfd == Number) {\n    puts(String);\n    result = Number;\n  } else {\n    <span class=\"supfact\">mijn_addr</span>.sin_family = Number;\n    <span class=\"supfact\">mijn_addr</span>.sin_port = htons(SERVER_PORT);\n    <span class=\"supfact\">mijn_addr</span>.sin_addr.s_addr = Number;\n    memset(<span class=\"supfact\">mijn_addr</span>.sin_zero, Number,\n           sizeof(<span class=\"supfact\">mijn_addr</span>.sin_zero));\n    reuse = Number;\n    setsockopt(sockfd, Number, Number, &reuse, Number);\n    if (bind(sockfd, (const struct sockaddr *)&<span class=\"supfact\">mijn_addr</span>,\n             Number)) {\n      puts(String);\n      result = Number;\n    } else {\n      while (Number) {\n        if (listen(sockfd, Number)) {\n          puts(String);\n          return Number;\n        }\n        sin_size = Number;\n        new_fd = accept(sockfd, (struct sockaddr *)&<span class=\"supfact\">hun_addr</span>,\n                        &sin_size);\n        if (new_fd == Number)\n          break;\n        now = time(Number L);\n        nrSent = send(new_fd, &now, Number, Number);\n        printf(String, (unsigned int)nrSent);\n        close(new_fd);\n      }\n      puts(String);\n      result = Number;\n    }\n  }\n  return result;\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "mijn_addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}, {"name": "v5", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "hun_addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "axbaretto", "repo_name": "torch", "path": "axbaretto/torch/ccd3b3108ab02956fcf5f1d14c863baa19c4e9dc4bbd0ade6143e963a6af6a09", "path_in_repo": "axbaretto/torch/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "0000000000005010 <_ZNSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEEixEOS1_>:\n    5010:\t55                   \tpush   %rbp\n    5011:\t48 89 e5             \tmov    %rsp,%rbp\n    5014:\t53                   \tpush   %rbx\n    5015:\t48 83 ec 48          \tsub    $0x48,%rsp\n    5019:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    501d:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    5021:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n    5025:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5029:\t48 89 d6             \tmov    %rdx,%rsi\n    502c:\t48 89 c7             \tmov    %rax,%rdi\n    502f:\te8 82 02 00 00       \tcallq  52b6 <_ZNSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEE11lower_boundERS8_>\n    5034:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    5038:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    503c:\t48 89 c7             \tmov    %rax,%rdi\n    503f:\te8 9e fd ff ff       \tcallq  4de2 <_ZNSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEE3endEv>\n    5044:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    5048:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    504c:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n    5050:\t48 89 d6             \tmov    %rdx,%rsi\n    5053:\t48 89 c7             \tmov    %rax,%rdi\n    5056:\te8 80 02 00 00       \tcallq  52db <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKPKvN7testing12_GLOBAL__N_115MockObjectStateEEESA_>\n    505b:\t84 c0                \ttest   %al,%al\n    505d:\t75 35                \tjne    5094 <_ZNSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEEixEOS1_+0x84>\n    505f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5063:\t48 89 c7             \tmov    %rax,%rdi\n    5066:\te8 93 02 00 00       \tcallq  52fe <_ZNKSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEE8key_compEv>\n    506b:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n    506f:\t48 89 c7             \tmov    %rax,%rdi\n    5072:\te8 a9 02 00 00       \tcallq  5320 <_ZNKSt17_Rb_tree_iteratorISt4pairIKPKvN7testing12_GLOBAL__N_115MockObjectStateEEEdeEv>\n    5077:\t48 8b 10             \tmov    (%rax),%rdx\n    507a:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    507e:\t48 8b 08             \tmov    (%rax),%rcx\n    5081:\t48 8d 45 de          \tlea    -0x22(%rbp),%rax\n    5085:\t48 89 ce             \tmov    %rcx,%rsi\n    5088:\t48 89 c7             \tmov    %rax,%rdi\n    508b:\te8 00 00 00 00       \tcallq  5090 <_ZNSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEEixEOS1_+0x80>\n    5090:\t84 c0                \ttest   %al,%al\n    5092:\t74 07                \tje     509b <_ZNSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEEixEOS1_+0x8b>\n    5094:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    5099:\teb 05                \tjmp    50a0 <_ZNSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEEixEOS1_+0x90>\n    509b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    50a0:\t84 c0                \ttest   %al,%al\n    50a2:\t74 5b                \tje     50ff <_ZNSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEEixEOS1_+0xef>\n    50a4:\t48 8b 5d b8          \tmov    -0x48(%rbp),%rbx\n    50a8:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    50ac:\t48 89 c7             \tmov    %rax,%rdi\n    50af:\te8 00 00 00 00       \tcallq  50b4 <_ZNSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEEixEOS1_+0xa4>\n    50b4:\t48 89 c2             \tmov    %rax,%rdx\n    50b7:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    50bb:\t48 89 d6             \tmov    %rdx,%rsi\n    50be:\t48 89 c7             \tmov    %rax,%rdi\n    50c1:\te8 00 00 00 00       \tcallq  50c6 <_ZNSt3mapIPKvN7testing12_GLOBAL__N_115MockObjectStateESt4lessIS1_ESaISt4pairIKS1_S4_EEEixEOS1_+0xb6>\n    50c6:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n    50ca:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n    50ce:\t48 89 d6             \tmov    %rdx,%rsi\n    50d1:\t48 89 c7             \tmov    %rax,%rdi\n    50d4:\te8 eb fc ff ff       \tcallq  4dc4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKPKvN7testing12_GLOBAL__N_115MockObjectStateEEEC1ERKSt17_Rb_tree_iteratorIS7_E>\n    50d9:\t48 8d 4d df          \tlea    -0x21(%rbp),%rcx\n    50dd:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    50e1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    50e5:\t49 89 c8             \tmov    %rcx,%r8\n    50e8:\t48 89 d1             \tmov    %rdx,%rcx\n    50eb:\tba 00 00 00 00       \tmov    $0x0,%edx\n    50f0:\t48 89 c6             \tmov    %rax,%rsi\n    50f3:\t48 89 df             \tmov    %rbx,%rdi\n    50f6:\te8 59 04 00 00       \tcallq  5554 <_ZNSt8_Rb_treeIPKvSt4pairIKS1_N7testing12_GLOBAL__N_115MockObjectStateEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_>\n    50fb:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    50ff:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n    5103:\t48 89 c7             \tmov    %rax,%rdi\n    5106:\te8 15 02 00 00       \tcallq  5320 <_ZNKSt17_Rb_tree_iteratorISt4pairIKPKvN7testing12_GLOBAL__N_115MockObjectStateEEEdeEv>\n    510b:\t48 83 c0 08          \tadd    $0x8,%rax\n    510f:\t48 83 c4 48          \tadd    $0x48,%rsp\n    5113:\t5b                   \tpop    %rbx\n    5114:\t5d                   \tpop    %rbp\n    5115:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std map<\n    void const *,\n    testing ` anonymous namespace ' MockObjectState > operator [ ] ( __int64 a1 , _QWORD * a2 ) { _QWORD * v2 ; __int64 v4 ; __int64 v6 ; __int64 v7 ; char <span class=\"supfact\">v8</span> ; char <span class=\"supfact\">v9</span> ; char <span class=\"supfact\">v10</span> [ Number ] ; __int64 v11 [ Number ] ; v6 = std map < void const * , testing ` anonymous namespace ' MockObjectState>\n    lower_bound(a1, a2);\nv7 = std map<\n    void const *,\n    testing ` anonymous namespace ' MockObjectState > end ( a1 ) ; if ( ( unsigned __int8 ) std operator == ( & v6 , & v7 ) || ( std map < void const * , testing ` anonymous namespace ' MockObjectState>\n    key_comp(a1),\n    v2 = (_QWORD *)std _Rb_tree_iterator<std pair<\n        void const *const,\n        testing ` anonymous namespace ' MockObjectState >> operator * ( & v6 ) , ( unsigned __int8 ) std less < void const * > operator ( ) ( & <span class=\"supfact\">v8</span> , * a2 , * v2 ) ) ) { v4 = std move < void const * & > ( a2 ) ; std forward_as_tuple < void const * > ( <span class=\"supfact\">v10</span> , v4 ) ; std _Rb_tree_const_iterator < std pair < void const * const , testing ` anonymous namespace ' MockObjectState>>\n        _Rb_tree_const_iterator(v11, &v6);\nv6 = std _Rb_tree<\n    void const *,\n    std pair<\n        void const *const,\n        testing ` anonymous namespace ' MockObjectState > , std _Select1st < std pair < void const * const , testing ` anonymous namespace ' MockObjectState>>,\n    std less<void const *>,\n    std allocator<std pair<\n        void const *const,\n        testing ` anonymous namespace ' MockObjectState >> > _M_emplace_hint_unique < std piecewise_construct_t const & , std tuple < void const * && > , std tuple < >> ( a1 , v11 [ Number ] , & std piecewise_construct , <span class=\"supfact\">v10</span> , & <span class=\"supfact\">v9</span> ) ; } return std _Rb_tree_iterator < std pair < void const * const , testing ` anonymous namespace ' MockObjectState>>\n        operator*(&v6) + Number;\n}", "code_t": "std map<void const *, testing(anonymous namespace) MockObjectState, std less<void const *>, std allocator<std pair<void const *const, testing(anonymous namespace) MockObjectState>>> mapped_type *__cdecl std map<void const\n                                                                                                                                                                                                                       *,\n                                                                                                                                                                                                                   testing ` anonymous namespace ' MockObjectState > operator [ ] ( std map < void const * , testing ( anonymous namespace ) MockObjectState , std less < void const * > , std allocator < std pair < void const * const , testing ( anonymous namespace ) MockObjectState > > > * const this , std map < void const * , testing ( anonymous namespace ) MockObjectState , std less < void const * > , std allocator < std pair < void const * const , testing ( anonymous namespace ) MockObjectState > > > key_type * __k ) { std _Rb_tree_iterator < std pair < void const * const , testing ( anonymous namespace ) MockObjectState > > reference v2 ; const void * * v4 ; const std piecewise_construct_t * v5 ; std map < void const * , testing ( anonymous namespace ) MockObjectState , std less < void const * > , std allocator < std pair < void const * const , testing ( anonymous namespace ) MockObjectState > > > iterator __i ; std _Rb_tree_iterator < std pair < void const * const , testing ( anonymous namespace ) MockObjectState > > _Self __y ; std less < void const * > <span class=\"supfact\">v9</span> ; std tuple < > <span class=\"supfact\">v10</span> ; std tuple < void const * && > <span class=\"supfact\">v11</span> ; std _Rb_tree_const_iterator < std pair < void const * const , testing ( anonymous namespace ) MockObjectState > > __pos ; __i . _M_node = std map < void const * , testing ` anonymous namespace ' MockObjectState>\n    lower_bound(this, __k)._M_node;\n__y\n    ._M_node = std map<\n    void const *,\n    testing ` anonymous namespace ' MockObjectState > end ( this ) . _M_node ; if ( std operator == ( & __i , & __y ) || ( std map < void const * , testing ` anonymous namespace ' MockObjectState>\n    key_comp(this),\n v2 = std _Rb_tree_iterator<std pair<\n     void const *const,\n     testing ` anonymous namespace ' MockObjectState >> operator * ( & __i ) , std less < void const * > operator ( ) ( & <span class=\"supfact\">v9</span> , * __k , v2 -> first ) ) ) { v4 = std move < void const * & > ( __k ) ; std forward_as_tuple < void const * > ( ( const void * * ) & <span class=\"supfact\">v11</span> . _M_head_impl , v4 ) ; std _Rb_tree_const_iterator < std pair < void const * const , testing ` anonymous namespace ' MockObjectState>>\n     _Rb_tree_const_iterator(&__pos, &__i);\n__i\n    ._M_node = std _Rb_tree<\n    void const *,\n    std pair<\n        void const *const,\n        testing ` anonymous namespace ' MockObjectState > , std _Select1st < std pair < void const * const , testing ` anonymous namespace ' MockObjectState>>,\n std less<void const *>,\n std allocator<std pair<\n     void const *const,\n     testing ` anonymous namespace ' MockObjectState >> > _M_emplace_hint_unique < std piecewise_construct_t const & , std tuple < void const * && > , std tuple < >> ( & this -> _M_t , __pos , & std piecewise_construct , & <span class=\"supfact\">v11</span> , & <span class=\"supfact\">v10</span> , v5 , ( std tuple < void const * && > * ) __k , ( std tuple < > * ) this ) . _M_node ; } return & std _Rb_tree_iterator < std pair < void const * const , testing ` anonymous namespace ' MockObjectState>>\n operator*(&__i)->second;\n}", "var": [{"name": "v10", "type": "struct std::tuple<void const*&&> { std::_Tuple_impl<0,void const*&&> baseclass_0; }", "ref_name": "v11", "ref_type": "struct std::tuple<void const*&&> { std::_Tuple_impl<0,void const*&&> baseclass_0; }"}, {"name": "v9", "type": "struct std::tuple<> { __int8[1] gap0; }", "ref_name": "v10", "ref_type": "struct std::tuple<> { __int8[1] gap0; }"}, {"name": "v8", "type": "struct std::less<void const*> { std::binary_function<void const*,void const*,bool> baseclass_0; }", "ref_name": "v9", "ref_type": "struct std::less<void const*> { std::binary_function<void const*,void const*,bool> baseclass_0; }"}], "body_in_train": true}, {"repo_owner": "trevor-vincent", "repo_name": "d4est", "path": "trevor-vincent/d4est/b6779afd142bf91f10cc071f729a747c03307f3b2a56b790debbb74149d9cd99", "path_in_repo": "trevor-vincent/d4est/third_party/OpenBLAS/lapack-netlib/LAPACKE/src/lapacke_chpgvd.o", "objdump": "0000000000000000 <LAPACKE_chpgvd>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 60          \tsub    $0x60,%rsp\n   8:\t89 7d bc             \tmov    %edi,-0x44(%rbp)\n   b:\t89 75 b8             \tmov    %esi,-0x48(%rbp)\n   e:\t89 c8                \tmov    %ecx,%eax\n  10:\t44 89 45 ac          \tmov    %r8d,-0x54(%rbp)\n  14:\t4c 89 4d a0          \tmov    %r9,-0x60(%rbp)\n  18:\t88 55 b4             \tmov    %dl,-0x4c(%rbp)\n  1b:\t88 45 b0             \tmov    %al,-0x50(%rbp)\n  1e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  25:\tc7 45 f8 ff ff ff ff \tmovl   $0xffffffff,-0x8(%rbp)\n  2c:\tc7 45 f4 ff ff ff ff \tmovl   $0xffffffff,-0xc(%rbp)\n  33:\tc7 45 f0 ff ff ff ff \tmovl   $0xffffffff,-0x10(%rbp)\n  3a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  41:\t00 \n  42:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  49:\t00 \n  4a:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  51:\t00 \n  52:\t83 7d bc 66          \tcmpl   $0x66,-0x44(%rbp)\n  56:\t74 1f                \tje     77 <LAPACKE_chpgvd+0x77>\n  58:\t83 7d bc 65          \tcmpl   $0x65,-0x44(%rbp)\n  5c:\t74 19                \tje     77 <LAPACKE_chpgvd+0x77>\n  5e:\tbe ff ff ff ff       \tmov    $0xffffffff,%esi\n  63:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  68:\te8 00 00 00 00       \tcallq  6d <LAPACKE_chpgvd+0x6d>\n  6d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  72:\te9 ac 01 00 00       \tjmpq   223 <LAPACKE_chpgvd+0x223>\n  77:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n  7b:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  7e:\t48 89 d6             \tmov    %rdx,%rsi\n  81:\t89 c7                \tmov    %eax,%edi\n  83:\te8 00 00 00 00       \tcallq  88 <LAPACKE_chpgvd+0x88>\n  88:\t85 c0                \ttest   %eax,%eax\n  8a:\t74 0a                \tje     96 <LAPACKE_chpgvd+0x96>\n  8c:\tb8 fa ff ff ff       \tmov    $0xfffffffa,%eax\n  91:\te9 8d 01 00 00       \tjmpq   223 <LAPACKE_chpgvd+0x223>\n  96:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  99:\t48 8b 75 10          \tmov    0x10(%rbp),%rsi\n  9d:\t89 c7                \tmov    %eax,%edi\n  9f:\te8 00 00 00 00       \tcallq  a4 <LAPACKE_chpgvd+0xa4>\n  a4:\t85 c0                \ttest   %eax,%eax\n  a6:\t74 0a                \tje     b2 <LAPACKE_chpgvd+0xb2>\n  a8:\tb8 f9 ff ff ff       \tmov    $0xfffffff9,%eax\n  ad:\te9 71 01 00 00       \tjmpq   223 <LAPACKE_chpgvd+0x223>\n  b2:\t0f be 4d b0          \tmovsbl -0x50(%rbp),%ecx\n  b6:\t0f be 55 b4          \tmovsbl -0x4c(%rbp),%edx\n  ba:\t4c 8b 4d a0          \tmov    -0x60(%rbp),%r9\n  be:\t44 8b 45 ac          \tmov    -0x54(%rbp),%r8d\n  c2:\t8b 75 b8             \tmov    -0x48(%rbp),%esi\n  c5:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  c8:\t8b 7d f8             \tmov    -0x8(%rbp),%edi\n  cb:\t57                   \tpush   %rdi\n  cc:\t48 8d 7d d4          \tlea    -0x2c(%rbp),%rdi\n  d0:\t57                   \tpush   %rdi\n  d1:\t8b 7d f4             \tmov    -0xc(%rbp),%edi\n  d4:\t57                   \tpush   %rdi\n  d5:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n  d9:\t57                   \tpush   %rdi\n  da:\t8b 7d f0             \tmov    -0x10(%rbp),%edi\n  dd:\t57                   \tpush   %rdi\n  de:\t48 8d 7d c8          \tlea    -0x38(%rbp),%rdi\n  e2:\t57                   \tpush   %rdi\n  e3:\t8b 7d 28             \tmov    0x28(%rbp),%edi\n  e6:\t57                   \tpush   %rdi\n  e7:\tff 75 20             \tpushq  0x20(%rbp)\n  ea:\tff 75 18             \tpushq  0x18(%rbp)\n  ed:\tff 75 10             \tpushq  0x10(%rbp)\n  f0:\t89 c7                \tmov    %eax,%edi\n  f2:\te8 00 00 00 00       \tcallq  f7 <LAPACKE_chpgvd+0xf7>\n  f7:\t48 83 c4 50          \tadd    $0x50,%rsp\n  fb:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  fe:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 102:\t0f 85 ff 00 00 00    \tjne    207 <LAPACKE_chpgvd+0x207>\n 108:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 10b:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 10e:\tf3 0f 10 45 d0       \tmovss  -0x30(%rbp),%xmm0\n 113:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n 117:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 11a:\tf3 0f 10 45 c8       \tmovss  -0x38(%rbp),%xmm0\n 11f:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n 123:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 126:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 129:\t48 98                \tcltq   \n 12b:\t48 c1 e0 02          \tshl    $0x2,%rax\n 12f:\t48 89 c7             \tmov    %rax,%rdi\n 132:\te8 00 00 00 00       \tcallq  137 <LAPACKE_chpgvd+0x137>\n 137:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 13b:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 140:\t75 0c                \tjne    14e <LAPACKE_chpgvd+0x14e>\n 142:\tc7 45 fc 0e fc ff ff \tmovl   $0xfffffc0e,-0x4(%rbp)\n 149:\te9 ba 00 00 00       \tjmpq   208 <LAPACKE_chpgvd+0x208>\n 14e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 151:\t48 98                \tcltq   \n 153:\t48 c1 e0 02          \tshl    $0x2,%rax\n 157:\t48 89 c7             \tmov    %rax,%rdi\n 15a:\te8 00 00 00 00       \tcallq  15f <LAPACKE_chpgvd+0x15f>\n 15f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 163:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n 168:\t75 0c                \tjne    176 <LAPACKE_chpgvd+0x176>\n 16a:\tc7 45 fc 0e fc ff ff \tmovl   $0xfffffc0e,-0x4(%rbp)\n 171:\te9 83 00 00 00       \tjmpq   1f9 <LAPACKE_chpgvd+0x1f9>\n 176:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 179:\t48 98                \tcltq   \n 17b:\t48 c1 e0 03          \tshl    $0x3,%rax\n 17f:\t48 89 c7             \tmov    %rax,%rdi\n 182:\te8 00 00 00 00       \tcallq  187 <LAPACKE_chpgvd+0x187>\n 187:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 18b:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n 190:\t75 09                \tjne    19b <LAPACKE_chpgvd+0x19b>\n 192:\tc7 45 fc 0e fc ff ff \tmovl   $0xfffffc0e,-0x4(%rbp)\n 199:\teb 52                \tjmp    1ed <LAPACKE_chpgvd+0x1ed>\n 19b:\t0f be 4d b0          \tmovsbl -0x50(%rbp),%ecx\n 19f:\t0f be 55 b4          \tmovsbl -0x4c(%rbp),%edx\n 1a3:\t4c 8b 4d a0          \tmov    -0x60(%rbp),%r9\n 1a7:\t44 8b 45 ac          \tmov    -0x54(%rbp),%r8d\n 1ab:\t8b 75 b8             \tmov    -0x48(%rbp),%esi\n 1ae:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n 1b1:\t8b 7d f8             \tmov    -0x8(%rbp),%edi\n 1b4:\t57                   \tpush   %rdi\n 1b5:\tff 75 e8             \tpushq  -0x18(%rbp)\n 1b8:\t8b 7d f4             \tmov    -0xc(%rbp),%edi\n 1bb:\t57                   \tpush   %rdi\n 1bc:\tff 75 e0             \tpushq  -0x20(%rbp)\n 1bf:\t8b 7d f0             \tmov    -0x10(%rbp),%edi\n 1c2:\t57                   \tpush   %rdi\n 1c3:\tff 75 d8             \tpushq  -0x28(%rbp)\n 1c6:\t8b 7d 28             \tmov    0x28(%rbp),%edi\n 1c9:\t57                   \tpush   %rdi\n 1ca:\tff 75 20             \tpushq  0x20(%rbp)\n 1cd:\tff 75 18             \tpushq  0x18(%rbp)\n 1d0:\tff 75 10             \tpushq  0x10(%rbp)\n 1d3:\t89 c7                \tmov    %eax,%edi\n 1d5:\te8 00 00 00 00       \tcallq  1da <LAPACKE_chpgvd+0x1da>\n 1da:\t48 83 c4 50          \tadd    $0x50,%rsp\n 1de:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 1e1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1e5:\t48 89 c7             \tmov    %rax,%rdi\n 1e8:\te8 00 00 00 00       \tcallq  1ed <LAPACKE_chpgvd+0x1ed>\n 1ed:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 1f1:\t48 89 c7             \tmov    %rax,%rdi\n 1f4:\te8 00 00 00 00       \tcallq  1f9 <LAPACKE_chpgvd+0x1f9>\n 1f9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1fd:\t48 89 c7             \tmov    %rax,%rdi\n 200:\te8 00 00 00 00       \tcallq  205 <LAPACKE_chpgvd+0x205>\n 205:\teb 01                \tjmp    208 <LAPACKE_chpgvd+0x208>\n 207:\t90                   \tnop\n 208:\t81 7d fc 0e fc ff ff \tcmpl   $0xfffffc0e,-0x4(%rbp)\n 20f:\t75 0f                \tjne    220 <LAPACKE_chpgvd+0x220>\n 211:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 214:\t89 c6                \tmov    %eax,%esi\n 216:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 21b:\te8 00 00 00 00       \tcallq  220 <LAPACKE_chpgvd+0x220>\n 220:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 223:\tc9                   \tleaveq \n 224:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall LAPACKE_chpgvd(unsigned int a1, unsigned int a2, char a3,\n                                  char a4, unsigned int a5, __int64 a6,\n                                  __int64 a7, __int64 a8, __int64 a9,\n                                  unsigned int a10) {\n  __int64 result;\n  float <span class=\"supfact\">v15</span>;\n  float v16;\n  unsigned int v17;\n  void *ptr;\n  void *v19;\n  void *v20;\n  unsigned int v21;\n  unsigned int v22;\n  unsigned int v23;\n  unsigned int v24;\n  v24 = Number;\n  v23 = Number;\n  v22 = Number;\n  v21 = Number;\n  v20 = Number L;\n  v19 = Number L;\n  ptr = Number L;\n  if (a1 == Number || a1 == Number) {\n    if ((unsigned int)LAPACKE_chp_nancheck(a5, a6)) {\n      result = Number L;\n    } else if ((unsigned int)LAPACKE_chp_nancheck(a5, a7)) {\n      result = Number L;\n    } else {\n      v24 = LAPACKE_chpgvd_work(a1, a2, (unsigned int)a3, (unsigned int)a4, a5,\n                                a6, a7, a8, a9, a10, &<span class=\"supfact\">v15</span>, v21,\n                                &v16, v22, &v17, v23);\n      if (!v24) {\n        v23 = v17;\n        v22 = (int)v16;\n        v21 = (int)<span class=\"supfact\">v15</span>;\n        v20 = malloc(Number L * (int)v17);\n        if (v20) {\n          v19 = malloc(Number L * (int)v22);\n          if (v19) {\n            ptr = malloc(Number L * (int)v21);\n            if (ptr) {\n              v24 = LAPACKE_chpgvd_work(a1, a2, (unsigned int)a3,\n                                        (unsigned int)a4, a5, a6, a7, a8, a9,\n                                        a10, ptr, v21, v19, v22, v20, v23);\n              free(ptr);\n            } else {\n              v24 = Number;\n            }\n            free(v19);\n          } else {\n            v24 = Number;\n          }\n          free(v20);\n        } else {\n          v24 = Number;\n        }\n      }\n      if (v24 == Number)\n        LAPACKE_xerbla(String, Number L);\n      result = v24;\n    }\n  } else {\n    LAPACKE_xerbla(String, Number);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl LAPACKE_chpgvd(int matrix_layout, int itype, char jobz, char uplo,\n                           int n, complex_float *ap, complex_float *bp_0,\n                           float *w, complex_float *z, int ldz) {\n  int result;\n  complex_float <span class=\"supfact\">work_query</span>;\n  float rwork_query;\n  int iwork_query;\n  complex_float *work;\n  float *rwork;\n  int *iwork;\n  int lwork;\n  int lrwork;\n  int liwork;\n  int info;\n  info = Number;\n  liwork = Number;\n  lrwork = Number;\n  lwork = Number;\n  iwork = Number L;\n  rwork = Number L;\n  work = Number L;\n  if (matrix_layout == Number || matrix_layout == Number) {\n    if ((unsigned int)LAPACKE_chp_nancheck((unsigned int)n, ap)) {\n      result = Number;\n    } else if ((unsigned int)LAPACKE_chp_nancheck((unsigned int)n, bp_0)) {\n      result = Number;\n    } else {\n      info = LAPACKE_chpgvd_work(\n          (unsigned int)matrix_layout, (unsigned int)itype, (unsigned int)jobz,\n          (unsigned int)uplo, (unsigned int)n, ap, bp_0, w, z,\n          (unsigned int)ldz, &<span class=\"supfact\">work_query</span>, (unsigned int)lwork,\n          &rwork_query, (unsigned int)lrwork, &iwork_query,\n          (unsigned int)liwork);\n      if (!info) {\n        liwork = iwork_query;\n        lrwork = (int)rwork_query;\n        lwork = (int)<span class=\"supfact\">work_query</span>.real;\n        iwork = (int *)malloc(Number L * iwork_query);\n        if (iwork) {\n          rwork = (float *)malloc(Number L * lrwork);\n          if (rwork) {\n            work = (complex_float *)malloc(Number L * lwork);\n            if (work) {\n              info = LAPACKE_chpgvd_work(\n                  (unsigned int)matrix_layout, (unsigned int)itype,\n                  (unsigned int)jobz, (unsigned int)uplo, (unsigned int)n, ap,\n                  bp_0, w, z, (unsigned int)ldz, work, (unsigned int)lwork,\n                  rwork, (unsigned int)lrwork, iwork, (unsigned int)liwork);\n              free(work);\n            } else {\n              info = Number;\n            }\n            free(rwork);\n          } else {\n            info = Number;\n          }\n          free(iwork);\n        } else {\n          info = Number;\n        }\n      }\n      if (info == Number)\n        LAPACKE_xerbla(String, Number L);\n      result = info;\n    }\n  } else {\n    LAPACKE_xerbla(String, Number);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v15", "type": "int", "ref_name": "work_query", "ref_type": "struct complex_float { float real; float imag; }"}], "body_in_train": false}, {"repo_owner": "Feh", "repo_name": "nocache", "path": "Feh/nocache/bea498ab35ccf7e746797b5709b4a0dd4066908df8fd641af952373e0a8c71aa", "path_in_repo": "Feh/nocache//nocache.so", "objdump": "0000000000002355 <init>:\n    2355:\t55                   \tpush   %rbp\n    2356:\t48 89 e5             \tmov    %rsp,%rbp\n    2359:\t48 83 ec 30          \tsub    $0x30,%rsp\n    235d:\t48 8b 05 fc 4d 00 00 \tmov    0x4dfc(%rip),%rax        # 7160 <env_nr_fadvise>\n    2364:\t48 89 c7             \tmov    %rax,%rdi\n    2367:\te8 d4 fc ff ff       \tcallq  2040 <getenv@plt>\n    236c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2370:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    2375:\t74 12                \tje     2389 <init+0x34>\n    2377:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    237b:\t48 89 c7             \tmov    %rax,%rdi\n    237e:\te8 6d fe ff ff       \tcallq  21f0 <atoi@plt>\n    2383:\t89 05 67 4e 00 00    \tmov    %eax,0x4e67(%rip)        # 71f0 <nr_fadvise>\n    2389:\t8b 05 61 4e 00 00    \tmov    0x4e61(%rip),%eax        # 71f0 <nr_fadvise>\n    238f:\t85 c0                \ttest   %eax,%eax\n    2391:\t7f 0a                \tjg     239d <init+0x48>\n    2393:\tc7 05 53 4e 00 00 01 \tmovl   $0x1,0x4e53(%rip)        # 71f0 <nr_fadvise>\n    239a:\t00 00 00 \n    239d:\t48 8b 05 cc 4d 00 00 \tmov    0x4dcc(%rip),%rax        # 7170 <env_flushall>\n    23a4:\t48 89 c7             \tmov    %rax,%rdi\n    23a7:\te8 94 fc ff ff       \tcallq  2040 <getenv@plt>\n    23ac:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    23b0:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    23b5:\t74 12                \tje     23c9 <init+0x74>\n    23b7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    23bb:\t48 89 c7             \tmov    %rax,%rdi\n    23be:\te8 2d fe ff ff       \tcallq  21f0 <atoi@plt>\n    23c3:\t88 05 2b 4e 00 00    \tmov    %al,0x4e2b(%rip)        # 71f4 <flushall>\n    23c9:\t0f b6 05 24 4e 00 00 \tmovzbl 0x4e24(%rip),%eax        # 71f4 <flushall>\n    23d0:\t84 c0                \ttest   %al,%al\n    23d2:\t7f 07                \tjg     23db <init+0x86>\n    23d4:\tc6 05 19 4e 00 00 00 \tmovb   $0x0,0x4e19(%rip)        # 71f4 <flushall>\n    23db:\t48 8b 05 96 4d 00 00 \tmov    0x4d96(%rip),%rax        # 7178 <env_max_fds>\n    23e2:\t48 89 c7             \tmov    %rax,%rdi\n    23e5:\te8 56 fc ff ff       \tcallq  2040 <getenv@plt>\n    23ea:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    23ee:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    23f3:\t74 13                \tje     2408 <init+0xb3>\n    23f5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    23f9:\t48 89 c7             \tmov    %rax,%rdi\n    23fc:\te8 ff fc ff ff       \tcallq  2100 <atoll@plt>\n    2401:\t48 89 05 50 4d 00 00 \tmov    %rax,0x4d50(%rip)        # 7158 <max_fd_limit>\n    2408:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    240c:\t48 89 c6             \tmov    %rax,%rsi\n    240f:\tbf 07 00 00 00       \tmov    $0x7,%edi\n    2414:\te8 17 fe ff ff       \tcallq  2230 <getrlimit@plt>\n    2419:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    241d:\t89 05 7d 4d 00 00    \tmov    %eax,0x4d7d(%rip)        # 71a0 <max_fds>\n    2423:\t8b 05 77 4d 00 00    \tmov    0x4d77(%rip),%eax        # 71a0 <max_fds>\n    2429:\t48 63 d0             \tmovslq %eax,%rdx\n    242c:\t48 8b 05 25 4d 00 00 \tmov    0x4d25(%rip),%rax        # 7158 <max_fd_limit>\n    2433:\t48 39 c2             \tcmp    %rax,%rdx\n    2436:\t76 0d                \tjbe    2445 <init+0xf0>\n    2438:\t48 8b 05 19 4d 00 00 \tmov    0x4d19(%rip),%rax        # 7158 <max_fd_limit>\n    243f:\t89 05 5b 4d 00 00    \tmov    %eax,0x4d5b(%rip)        # 71a0 <max_fds>\n    2445:\t8b 05 55 4d 00 00    \tmov    0x4d55(%rip),%eax        # 71a0 <max_fds>\n    244b:\t85 c0                \ttest   %eax,%eax\n    244d:\t0f 84 e2 02 00 00    \tje     2735 <init+0x3e0>\n    2453:\te8 e0 02 00 00       \tcallq  2738 <init_mutexes>\n    2458:\t48 8d 15 d9 02 00 00 \tlea    0x2d9(%rip),%rdx        # 2738 <init_mutexes>\n    245f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2464:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2469:\te8 12 1d 00 00       \tcallq  4180 <__pthread_atfork>\n    246e:\t8b 05 2c 4d 00 00    \tmov    0x4d2c(%rip),%eax        # 71a0 <max_fds>\n    2474:\t48 63 d0             \tmovslq %eax,%rdx\n    2477:\t48 89 d0             \tmov    %rdx,%rax\n    247a:\t48 c1 e0 02          \tshl    $0x2,%rax\n    247e:\t48 01 d0             \tadd    %rdx,%rax\n    2481:\t48 c1 e0 03          \tshl    $0x3,%rax\n    2485:\t48 89 c7             \tmov    %rax,%rdi\n    2488:\te8 d3 fc ff ff       \tcallq  2160 <malloc@plt>\n    248d:\t48 89 05 14 4d 00 00 \tmov    %rax,0x4d14(%rip)        # 71a8 <fds>\n    2494:\t48 8b 05 0d 4d 00 00 \tmov    0x4d0d(%rip),%rax        # 71a8 <fds>\n    249b:\t48 85 c0             \ttest   %rax,%rax\n    249e:\t75 1f                \tjne    24bf <init+0x16a>\n    24a0:\t48 8d 0d e9 30 00 00 \tlea    0x30e9(%rip),%rcx        # 5590 <__PRETTY_FUNCTION__.5645>\n    24a7:\tba 79 00 00 00       \tmov    $0x79,%edx\n    24ac:\t48 8d 35 91 2b 00 00 \tlea    0x2b91(%rip),%rsi        # 5044 <_fini+0xeb8>\n    24b3:\t48 8d 3d 94 2b 00 00 \tlea    0x2b94(%rip),%rdi        # 504e <_fini+0xec2>\n    24ba:\te8 01 fc ff ff       \tcallq  20c0 <__assert_fail@plt>\n    24bf:\t48 8d 35 94 2b 00 00 \tlea    0x2b94(%rip),%rsi        # 505a <_fini+0xece>\n    24c6:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    24cd:\te8 7e fd ff ff       \tcallq  2250 <dlsym@plt>\n    24d2:\t48 89 c2             \tmov    %rax,%rdx\n    24d5:\t48 8b 05 f4 4a 00 00 \tmov    0x4af4(%rip),%rax        # 6fd0 <_DYNAMIC+0x268>\n    24dc:\t48 89 10             \tmov    %rdx,(%rax)\n    24df:\t48 8d 35 79 2b 00 00 \tlea    0x2b79(%rip),%rsi        # 505f <_fini+0xed3>\n    24e6:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    24ed:\te8 5e fd ff ff       \tcallq  2250 <dlsym@plt>\n    24f2:\t48 89 c2             \tmov    %rax,%rdx\n    24f5:\t48 8b 05 fc 4a 00 00 \tmov    0x4afc(%rip),%rax        # 6ff8 <_DYNAMIC+0x290>\n    24fc:\t48 89 10             \tmov    %rdx,(%rax)\n    24ff:\t48 8d 35 60 2b 00 00 \tlea    0x2b60(%rip),%rsi        # 5066 <_fini+0xeda>\n    2506:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    250d:\te8 3e fd ff ff       \tcallq  2250 <dlsym@plt>\n    2512:\t48 89 c2             \tmov    %rax,%rdx\n    2515:\t48 8b 05 ac 4a 00 00 \tmov    0x4aac(%rip),%rax        # 6fc8 <_DYNAMIC+0x260>\n    251c:\t48 89 10             \tmov    %rdx,(%rax)\n    251f:\t48 8d 35 46 2b 00 00 \tlea    0x2b46(%rip),%rsi        # 506c <_fini+0xee0>\n    2526:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    252d:\te8 1e fd ff ff       \tcallq  2250 <dlsym@plt>\n    2532:\t48 89 c2             \tmov    %rax,%rdx\n    2535:\t48 8b 05 6c 4a 00 00 \tmov    0x4a6c(%rip),%rax        # 6fa8 <_DYNAMIC+0x240>\n    253c:\t48 89 10             \tmov    %rdx,(%rax)\n    253f:\t48 8d 35 2e 2b 00 00 \tlea    0x2b2e(%rip),%rsi        # 5074 <_fini+0xee8>\n    2546:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    254d:\te8 fe fc ff ff       \tcallq  2250 <dlsym@plt>\n    2552:\t48 89 c2             \tmov    %rax,%rdx\n    2555:\t48 8b 05 0c 4a 00 00 \tmov    0x4a0c(%rip),%rax        # 6f68 <_DYNAMIC+0x200>\n    255c:\t48 89 10             \tmov    %rdx,(%rax)\n    255f:\t48 8d 35 15 2b 00 00 \tlea    0x2b15(%rip),%rsi        # 507b <_fini+0xeef>\n    2566:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    256d:\te8 de fc ff ff       \tcallq  2250 <dlsym@plt>\n    2572:\t48 89 c2             \tmov    %rax,%rdx\n    2575:\t48 8b 05 1c 4a 00 00 \tmov    0x4a1c(%rip),%rax        # 6f98 <_DYNAMIC+0x230>\n    257c:\t48 89 10             \tmov    %rdx,(%rax)\n    257f:\t48 8d 35 fe 2a 00 00 \tlea    0x2afe(%rip),%rsi        # 5084 <_fini+0xef8>\n    2586:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    258d:\te8 be fc ff ff       \tcallq  2250 <dlsym@plt>\n    2592:\t48 89 c2             \tmov    %rax,%rdx\n    2595:\t48 8b 05 ec 49 00 00 \tmov    0x49ec(%rip),%rax        # 6f88 <_DYNAMIC+0x220>\n    259c:\t48 89 10             \tmov    %rdx,(%rax)\n    259f:\t48 8d 35 e2 2a 00 00 \tlea    0x2ae2(%rip),%rsi        # 5088 <_fini+0xefc>\n    25a6:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    25ad:\te8 9e fc ff ff       \tcallq  2250 <dlsym@plt>\n    25b2:\t48 89 c2             \tmov    %rax,%rdx\n    25b5:\t48 8b 05 bc 49 00 00 \tmov    0x49bc(%rip),%rax        # 6f78 <_DYNAMIC+0x210>\n    25bc:\t48 89 10             \tmov    %rdx,(%rax)\n    25bf:\t48 8d 35 c7 2a 00 00 \tlea    0x2ac7(%rip),%rsi        # 508d <_fini+0xf01>\n    25c6:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    25cd:\te8 7e fc ff ff       \tcallq  2250 <dlsym@plt>\n    25d2:\t48 89 c2             \tmov    %rax,%rdx\n    25d5:\t48 8b 05 b4 49 00 00 \tmov    0x49b4(%rip),%rax        # 6f90 <_DYNAMIC+0x228>\n    25dc:\t48 89 10             \tmov    %rdx,(%rax)\n    25df:\t48 8d 35 ad 2a 00 00 \tlea    0x2aad(%rip),%rsi        # 5093 <_fini+0xf07>\n    25e6:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    25ed:\te8 5e fc ff ff       \tcallq  2250 <dlsym@plt>\n    25f2:\t48 89 c2             \tmov    %rax,%rdx\n    25f5:\t48 8b 05 dc 49 00 00 \tmov    0x49dc(%rip),%rax        # 6fd8 <_DYNAMIC+0x270>\n    25fc:\t48 89 10             \tmov    %rdx,(%rax)\n    25ff:\t48 8d 35 93 2a 00 00 \tlea    0x2a93(%rip),%rsi        # 5099 <_fini+0xf0d>\n    2606:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    260d:\te8 3e fc ff ff       \tcallq  2250 <dlsym@plt>\n    2612:\t48 89 c2             \tmov    %rax,%rdx\n    2615:\t48 8b 05 9c 49 00 00 \tmov    0x499c(%rip),%rax        # 6fb8 <_DYNAMIC+0x250>\n    261c:\t48 89 10             \tmov    %rdx,(%rax)\n    261f:\t48 8d 35 7b 2a 00 00 \tlea    0x2a7b(%rip),%rsi        # 50a1 <_fini+0xf15>\n    2626:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    262d:\te8 1e fc ff ff       \tcallq  2250 <dlsym@plt>\n    2632:\t48 89 c2             \tmov    %rax,%rdx\n    2635:\t48 8b 05 34 49 00 00 \tmov    0x4934(%rip),%rax        # 6f70 <_DYNAMIC+0x208>\n    263c:\t48 89 10             \tmov    %rdx,(%rax)\n    263f:\te8 3c fc ff ff       \tcallq  2280 <dlerror@plt>\n    2644:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2648:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    264d:\t74 2c                \tje     267b <init+0x326>\n    264f:\t48 8b 05 9a 49 00 00 \tmov    0x499a(%rip),%rax        # 6ff0 <_DYNAMIC+0x288>\n    2656:\t48 8b 00             \tmov    (%rax),%rax\n    2659:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    265d:\t48 8d 35 44 2a 00 00 \tlea    0x2a44(%rip),%rsi        # 50a8 <_fini+0xf1c>\n    2664:\t48 89 c7             \tmov    %rax,%rdi\n    2667:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    266c:\te8 9f fa ff ff       \tcallq  2110 <fprintf@plt>\n    2671:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    2676:\te8 95 fb ff ff       \tcallq  2210 <exit@plt>\n    267b:\te8 80 fb ff ff       \tcallq  2200 <getpagesize@plt>\n    2680:\t48 98                \tcltq   \n    2682:\t48 89 05 5f 4b 00 00 \tmov    %rax,0x4b5f(%rip)        # 71e8 <PAGESIZE>\n    2689:\t48 8d 3d 30 4b 00 00 \tlea    0x4b30(%rip),%rdi        # 71c0 <fds_iter_lock>\n    2690:\te8 db fb ff ff       \tcallq  2270 <pthread_mutex_lock@plt>\n    2695:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    269c:\teb 74                \tjmp    2712 <init+0x3bd>\n    269e:\t48 8b 0d 0b 4b 00 00 \tmov    0x4b0b(%rip),%rcx        # 71b0 <fds_lock>\n    26a5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    26a8:\t48 63 d0             \tmovslq %eax,%rdx\n    26ab:\t48 89 d0             \tmov    %rdx,%rax\n    26ae:\t48 c1 e0 02          \tshl    $0x2,%rax\n    26b2:\t48 01 d0             \tadd    %rdx,%rax\n    26b5:\t48 c1 e0 03          \tshl    $0x3,%rax\n    26b9:\t48 01 c8             \tadd    %rcx,%rax\n    26bc:\t48 89 c7             \tmov    %rax,%rdi\n    26bf:\te8 ac fb ff ff       \tcallq  2270 <pthread_mutex_lock@plt>\n    26c4:\t48 8b 0d dd 4a 00 00 \tmov    0x4add(%rip),%rcx        # 71a8 <fds>\n    26cb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    26ce:\t48 63 d0             \tmovslq %eax,%rdx\n    26d1:\t48 89 d0             \tmov    %rdx,%rax\n    26d4:\t48 c1 e0 02          \tshl    $0x2,%rax\n    26d8:\t48 01 d0             \tadd    %rdx,%rax\n    26db:\t48 c1 e0 03          \tshl    $0x3,%rax\n    26df:\t48 01 c8             \tadd    %rcx,%rax\n    26e2:\tc7 00 ff ff ff ff    \tmovl   $0xffffffff,(%rax)\n    26e8:\t48 8b 0d c1 4a 00 00 \tmov    0x4ac1(%rip),%rcx        # 71b0 <fds_lock>\n    26ef:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    26f2:\t48 63 d0             \tmovslq %eax,%rdx\n    26f5:\t48 89 d0             \tmov    %rdx,%rax\n    26f8:\t48 c1 e0 02          \tshl    $0x2,%rax\n    26fc:\t48 01 d0             \tadd    %rdx,%rax\n    26ff:\t48 c1 e0 03          \tshl    $0x3,%rax\n    2703:\t48 01 c8             \tadd    %rcx,%rax\n    2706:\t48 89 c7             \tmov    %rax,%rdi\n    2709:\te8 42 fa ff ff       \tcallq  2150 <pthread_mutex_unlock@plt>\n    270e:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    2712:\t8b 05 88 4a 00 00    \tmov    0x4a88(%rip),%eax        # 71a0 <max_fds>\n    2718:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    271b:\t7c 81                \tjl     269e <init+0x349>\n    271d:\t48 8d 3d 9c 4a 00 00 \tlea    0x4a9c(%rip),%rdi        # 71c0 <fds_iter_lock>\n    2724:\te8 27 fa ff ff       \tcallq  2150 <pthread_mutex_unlock@plt>\n    2729:\te8 d2 00 00 00       \tcallq  2800 <init_debugging>\n    272e:\te8 2a 01 00 00       \tcallq  285d <handle_stdout>\n    2733:\teb 01                \tjmp    2736 <init+0x3e1>\n    2735:\t90                   \tnop\n    2736:\tc9                   \tleaveq \n    2737:\tc3                   \tretq   ", "code_s": "__int64 init() {\n  __int64 result;\n  struct rlimit <span class=\"supfact\">rlimits</span>;\n  char *v2;\n  char *nptr;\n  int i;\n  nptr = getenv(env_nr_fadvise);\n  if (nptr)\n    nr_fadvise = atoi(nptr);\n  if (nr_fadvise <= Number)\n    nr_fadvise = Number;\n  nptr = getenv(env_flushall);\n  if (nptr)\n    flushall = atoi(nptr);\n  if (flushall <= Number)\n    flushall = Number;\n  nptr = getenv(env_max_fds);\n  if (nptr)\n    max_fd_limit = atoll(nptr);\n  getrlimit(RLIMIT_NOFILE, &<span class=\"supfact\">rlimits</span>);\n  max_fds = <span class=\"supfact\">rlimits</span>.rlim_max;\n  if (SLODWORD(<span class=\"supfact\">rlimits</span>.rlim_max) >\n      (unsigned __int64)max_fd_limit)\n    max_fds = max_fd_limit;\n  result = (unsigned int)max_fds;\n  if (max_fds) {\n    init_mutexes();\n    pthread_atfork(Number L, Number L, init_mutexes);\n    fds = malloc(Number L * max_fds);\n    if (!fds)\n      __assert_fail(String, String, Number, String);\n    original_open = dlsym((void *)Number, String);\n    original_open64 = dlsym((void *)Number, String);\n    original_creat = dlsym((void *)Number, String);\n    original_creat64 = dlsym((void *)Number, String);\n    original_openat = dlsym((void *)Number, String);\n    original_openat64 = dlsym((void *)Number, String);\n    original_dup = dlsym((void *)Number, String);\n    original_dup2 = dlsym((void *)Number, String);\n    original_close = dlsym((void *)Number, String);\n    original_fopen = dlsym((void *)Number, String);\n    original_fopen64 = dlsym((void *)Number, String);\n    original_fclose = dlsym((void *)Number, String);\n    v2 = dlerror();\n    if (v2) {\n      fprintf(stderr, String, v2);\n      exit(Number);\n    }\n    PAGESIZE = getpagesize();\n    pthread_mutex_lock(&fds_iter_lock);\n    for (i = Number; i < max_fds; ++i) {\n      pthread_mutex_lock((pthread_mutex_t *)fds_lock + i);\n      *((_DWORD *)fds + Number * i) = Number;\n      pthread_mutex_unlock((pthread_mutex_t *)fds_lock + i);\n    }\n    pthread_mutex_unlock(&fds_iter_lock);\n    init_debugging();\n    result = handle_stdout();\n  }\n  return result;\n}", "code_t": "void __cdecl init() {\n  rlimit <span class=\"supfact\">rlim</span>;\n  char *error;\n  char *s;\n  int i;\n  s = getenv(env_nr_fadvise);\n  if (s)\n    nr_fadvise = atoi(s);\n  if (nr_fadvise <= Number)\n    nr_fadvise = Number;\n  s = getenv(env_flushall);\n  if (s)\n    flushall[Number] = atoi(s);\n  if (flushall[Number] <= Number)\n    flushall[Number] = Number;\n  s = getenv(env_max_fds);\n  if (s)\n    max_fd_limit = atoll(s);\n  getrlimit(RLIMIT_NOFILE, &<span class=\"supfact\">rlim</span>);\n  max_fds = <span class=\"supfact\">rlim</span>.rlim_max;\n  if (SLODWORD(<span class=\"supfact\">rlim</span>.rlim_max) > max_fd_limit)\n    max_fds = max_fd_limit;\n  if (max_fds) {\n    init_mutexes();\n    pthread_atfork(Number L, Number L, init_mutexes);\n    fds = (file_pageinfo *)malloc(Number L * max_fds);\n    if (!fds)\n      __assert_fail(String, String, Number, String);\n    original_open =\n        (int (*)(const char *, int, mode_t))dlsym((void *)Number, String);\n    original_open64 =\n        (int (*)(const char *, int, mode_t))dlsym((void *)Number, String);\n    original_creat =\n        (int (*)(const char *, int, mode_t))dlsym((void *)Number, String);\n    original_creat64 =\n        (int (*)(const char *, int, mode_t))dlsym((void *)Number, String);\n    original_openat =\n        (int (*)(int, const char *, int, mode_t))dlsym((void *)Number, String);\n    original_openat64 =\n        (int (*)(int, const char *, int, mode_t))dlsym((void *)Number, String);\n    original_dup = (int (*)(int))dlsym((void *)Number, String);\n    original_dup2 = (int (*)(int, int))dlsym((void *)Number, String);\n    original_close = (int (*)(int))dlsym((void *)Number, String);\n    original_fopen =\n        (FILE * (*)(const char *, const char *)) dlsym((void *)Number, String);\n    original_fopen64 =\n        (FILE * (*)(const char *, const char *)) dlsym((void *)Number, String);\n    original_fclose = (int (*)(FILE *))dlsym((void *)Number, String);\n    error = dlerror();\n    if (error) {\n      fprintf(stderr, String, error);\n      exit(Number);\n    }\n    PAGESIZE = getpagesize();\n    pthread_mutex_lock(&fds_iter_lock);\n    for (i = Number; i < max_fds; ++i) {\n      pthread_mutex_lock(&fds_lock[i]);\n      fds[i].fd = Number;\n      pthread_mutex_unlock(&fds_lock[i]);\n    }\n    pthread_mutex_unlock(&fds_iter_lock);\n    init_debugging();\n    handle_stdout();\n  }\n}", "var": [{"name": "rlimits", "type": "struct rlimit { rlim_t rlim_cur; rlim_t rlim_max; }", "ref_name": "rlim", "ref_type": "struct rlimit { rlim_t rlim_cur; rlim_t rlim_max; }"}], "body_in_train": false}, {"repo_owner": "WildfireDEV", "repo_name": "s6", "path": "WildfireDEV/s6/8842ad6e55e8912aca59fb8b107a9124b9c8d2dc52e659cce9581ea4b8078d2a", "path_in_repo": "WildfireDEV/s6/tools/perf/util/header.o", "objdump": "0000000000006fae <perf_header__read_pipe>:\n    6fae:\t55                   \tpush   %rbp\n    6faf:\t48 89 e5             \tmov    %rsp,%rbp\n    6fb2:\t48 83 ec 40          \tsub    $0x40,%rsp\n    6fb6:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    6fba:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    6fbd:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    6fc4:\t00 00 \n    6fc6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    6fca:\t31 c0                \txor    %eax,%eax\n    6fcc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    6fd0:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    6fd4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    6fd8:\t0f b6 80 05 03 00 00 \tmovzbl 0x305(%rax),%eax\n    6fdf:\t0f b6 c8             \tmovzbl %al,%ecx\n    6fe2:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    6fe5:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    6fe9:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    6fed:\t48 89 c7             \tmov    %rax,%rdi\n    6ff0:\te8 c1 fe ff ff       \tcallq  6eb6 <perf_file_header__read_pipe>\n    6ff5:\t85 c0                \ttest   %eax,%eax\n    6ff7:\t79 1b                \tjns    7014 <perf_header__read_pipe+0x66>\n    6ff9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6ffe:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    7003:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7008:\te8 00 00 00 00       \tcallq  700d <perf_header__read_pipe+0x5f>\n    700d:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    7012:\teb 12                \tjmp    7026 <perf_header__read_pipe+0x78>\n    7014:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    7018:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    701b:\t89 90 00 03 00 00    \tmov    %edx,0x300(%rax)\n    7021:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7026:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    702a:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    7031:\t00 00 \n    7033:\t74 05                \tje     703a <perf_header__read_pipe+0x8c>\n    7035:\te8 00 00 00 00       \tcallq  703a <perf_header__read_pipe+0x8c>\n    703a:\tc9                   \tleaveq \n    703b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_header__read_pipe(__int64 a1, unsigned int a2) {\n  __int64 result;\n  char <span class=\"supfact\">v3</span>[Number];\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if ((int)perf_file_header__read_pipe((__int64)<span class=\"supfact\">v3</span>, a1, a2,\n                                       *(_BYTE *)(a1 + Number)) >= Number) {\n    *(_DWORD *)(a1 + Number) = a2;\n    result = Number L;\n  } else {\n    eprintf(Number L, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl perf_header__read_pipe(perf_session *session, int fd) {\n  int result;\n  perf_pipe_file_header <span class=\"supfact\">f_header</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (perf_file_header__read_pipe(&<span class=\"supfact\">f_header</span>, &session->header,\n                                  fd, session->repipe) >= Number) {\n    session->fd = fd;\n    result = Number;\n  } else {\n    eprintf(Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "struct perf_pipe_file_header { u64 magic; u64 size; }", "ref_name": "f_header", "ref_type": "struct perf_pipe_file_header { u64 magic; u64 size; }"}], "body_in_train": true}, {"repo_owner": "TI-LPRF-Software", "repo_name": "RemoTI-Linux", "path": "TI-LPRF-Software/RemoTI-Linux/3fdc93c0572db7d6382aac47de1e09c93eb63c513834efd9536a5543e7c9a920", "path_in_repo": "TI-LPRF-Software/RemoTI-Linux/Projects/tools/LinuxHost/application/mpa/out/MPA_lnx_x86_client", "objdump": "0000000000413586 <timer_set_event>:\n  413586:\t55                   \tpush   %rbp\n  413587:\t48 89 e5             \tmov    %rsp,%rbp\n  41358a:\t53                   \tpush   %rbx\n  41358b:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n  413592:\t89 f8                \tmov    %edi,%eax\n  413594:\t89 b5 78 ff ff ff    \tmov    %esi,-0x88(%rbp)\n  41359a:\t88 85 7c ff ff ff    \tmov    %al,-0x84(%rbp)\n  4135a0:\t8b 05 5a 8d 01 00    \tmov    0x18d5a(%rip),%eax        # 42c300 <__APP_LOG_LEVEL>\n  4135a6:\t83 f8 04             \tcmp    $0x4,%eax\n  4135a9:\t7f 0e                \tjg     4135b9 <timer_set_event+0x33>\n  4135ab:\t8b 05 4f 96 01 00    \tmov    0x1964f(%rip),%eax        # 42cc00 <__BIG_DEBUG_ACTIVE>\n  4135b1:\t85 c0                \ttest   %eax,%eax\n  4135b3:\t0f 84 de 00 00 00    \tje     413697 <timer_set_event+0x111>\n  4135b9:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4135bd:\t48 89 c6             \tmov    %rax,%rsi\n  4135c0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4135c5:\te8 a6 ec fe ff       \tcallq  402270 <clock_gettime@plt>\n  4135ca:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4135ce:\t48 89 c7             \tmov    %rax,%rdi\n  4135d1:\te8 6a ed fe ff       \tcallq  402340 <gmtime@plt>\n  4135d6:\t48 8b 08             \tmov    (%rax),%rcx\n  4135d9:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n  4135dd:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n  4135e1:\t48 89 5d 88          \tmov    %rbx,-0x78(%rbp)\n  4135e5:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n  4135e9:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  4135ed:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n  4135f1:\t48 89 5d 98          \tmov    %rbx,-0x68(%rbp)\n  4135f5:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  4135f9:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n  4135fd:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n  413601:\t48 89 5d a8          \tmov    %rbx,-0x58(%rbp)\n  413605:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  413609:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  41360d:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  413611:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n  413618:\t9b c4 20 \n  41361b:\t48 89 c8             \tmov    %rcx,%rax\n  41361e:\t48 f7 ea             \timul   %rdx\n  413621:\t48 c1 fa 07          \tsar    $0x7,%rdx\n  413625:\t48 89 c8             \tmov    %rcx,%rax\n  413628:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  41362c:\t48 29 c2             \tsub    %rax,%rdx\n  41362f:\t48 89 d0             \tmov    %rdx,%rax\n  413632:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  413636:\t44 0f b6 8d 7c ff ff \tmovzbl -0x84(%rbp),%r9d\n  41363d:\tff \n  41363e:\t4c 8b 05 c3 8c 01 00 \tmov    0x18cc3(%rip),%r8        # 42c308 <processLogPrefix>\n  413645:\t8b 7d 80             \tmov    -0x80(%rbp),%edi\n  413648:\t8b 75 84             \tmov    -0x7c(%rbp),%esi\n  41364b:\t44 8b 5d 88          \tmov    -0x78(%rbp),%r11d\n  41364f:\t44 8b 55 8c          \tmov    -0x74(%rbp),%r10d\n  413653:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n  413656:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  413659:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n  41365c:\t8d 90 6c 07 00 00    \tlea    0x76c(%rax),%edx\n  413662:\t48 8b 05 17 8d 01 00 \tmov    0x18d17(%rip),%rax        # 42c380 <stderr@@GLIBC_2.2.5>\n  413669:\t41 51                \tpush   %r9\n  41366b:\t44 8b 8d 78 ff ff ff \tmov    -0x88(%rbp),%r9d\n  413672:\t41 51                \tpush   %r9\n  413674:\t41 50                \tpush   %r8\n  413676:\tff 75 e8             \tpushq  -0x18(%rbp)\n  413679:\t57                   \tpush   %rdi\n  41367a:\t56                   \tpush   %rsi\n  41367b:\t45 89 d9             \tmov    %r11d,%r9d\n  41367e:\t45 89 d0             \tmov    %r10d,%r8d\n  413681:\tbe 00 5c 42 00       \tmov    $0x425c00,%esi\n  413686:\t48 89 c7             \tmov    %rax,%rdi\n  413689:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41368e:\te8 3d eb fe ff       \tcallq  4021d0 <fprintf@plt>\n  413693:\t48 83 c4 30          \tadd    $0x30,%rsp\n  413697:\tbf 00 c9 42 00       \tmov    $0x42c900,%edi\n  41369c:\te8 5f ed fe ff       \tcallq  402400 <pthread_mutex_lock@plt>\n  4136a1:\t48 8b 15 d8 92 01 00 \tmov    0x192d8(%rip),%rdx        # 42c980 <timerThreadTbl>\n  4136a8:\t0f b6 85 7c ff ff ff \tmovzbl -0x84(%rbp),%eax\n  4136af:\t48 69 c0 0c 01 00 00 \timul   $0x10c,%rax,%rax\n  4136b6:\t48 01 d0             \tadd    %rdx,%rax\n  4136b9:\t8b 00                \tmov    (%rax),%eax\n  4136bb:\t48 8b 0d be 92 01 00 \tmov    0x192be(%rip),%rcx        # 42c980 <timerThreadTbl>\n  4136c2:\t0f b6 95 7c ff ff ff \tmovzbl -0x84(%rbp),%edx\n  4136c9:\t48 69 d2 0c 01 00 00 \timul   $0x10c,%rdx,%rdx\n  4136d0:\t48 01 ca             \tadd    %rcx,%rdx\n  4136d3:\t0b 85 78 ff ff ff    \tor     -0x88(%rbp),%eax\n  4136d9:\t89 02                \tmov    %eax,(%rdx)\n  4136db:\tbf 40 cf 42 00       \tmov    $0x42cf40,%edi\n  4136e0:\te8 ab eb fe ff       \tcallq  402290 <sem_post@plt>\n  4136e5:\t85 c0                \ttest   %eax,%eax\n  4136e7:\t0f 89 fc 00 00 00    \tjns    4137e9 <timer_set_event+0x263>\n  4136ed:\t8b 05 0d 8c 01 00    \tmov    0x18c0d(%rip),%eax        # 42c300 <__APP_LOG_LEVEL>\n  4136f3:\t83 f8 01             \tcmp    $0x1,%eax\n  4136f6:\t7f 0e                \tjg     413706 <timer_set_event+0x180>\n  4136f8:\t8b 05 02 95 01 00    \tmov    0x19502(%rip),%eax        # 42cc00 <__BIG_DEBUG_ACTIVE>\n  4136fe:\t85 c0                \ttest   %eax,%eax\n  413700:\t0f 84 d9 00 00 00    \tje     4137df <timer_set_event+0x259>\n  413706:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  41370a:\t48 89 c6             \tmov    %rax,%rsi\n  41370d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  413712:\te8 59 eb fe ff       \tcallq  402270 <clock_gettime@plt>\n  413717:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  41371b:\t48 89 c7             \tmov    %rax,%rdi\n  41371e:\te8 1d ec fe ff       \tcallq  402340 <gmtime@plt>\n  413723:\t48 8b 08             \tmov    (%rax),%rcx\n  413726:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n  41372a:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n  41372e:\t48 89 5d 88          \tmov    %rbx,-0x78(%rbp)\n  413732:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n  413736:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  41373a:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n  41373e:\t48 89 5d 98          \tmov    %rbx,-0x68(%rbp)\n  413742:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  413746:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n  41374a:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n  41374e:\t48 89 5d a8          \tmov    %rbx,-0x58(%rbp)\n  413752:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  413756:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  41375a:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  41375e:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n  413765:\t9b c4 20 \n  413768:\t48 89 c8             \tmov    %rcx,%rax\n  41376b:\t48 f7 ea             \timul   %rdx\n  41376e:\t48 c1 fa 07          \tsar    $0x7,%rdx\n  413772:\t48 89 c8             \tmov    %rcx,%rax\n  413775:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  413779:\t48 29 c2             \tsub    %rax,%rdx\n  41377c:\t48 89 d0             \tmov    %rdx,%rax\n  41377f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  413783:\t4c 8b 05 7e 8b 01 00 \tmov    0x18b7e(%rip),%r8        # 42c308 <processLogPrefix>\n  41378a:\t8b 7d 80             \tmov    -0x80(%rbp),%edi\n  41378d:\t8b 75 84             \tmov    -0x7c(%rbp),%esi\n  413790:\t44 8b 5d 88          \tmov    -0x78(%rbp),%r11d\n  413794:\t44 8b 55 8c          \tmov    -0x74(%rbp),%r10d\n  413798:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n  41379b:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  41379e:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n  4137a1:\t8d 90 6c 07 00 00    \tlea    0x76c(%rax),%edx\n  4137a7:\t48 8b 05 d2 8b 01 00 \tmov    0x18bd2(%rip),%rax        # 42c380 <stderr@@GLIBC_2.2.5>\n  4137ae:\t68 40 cf 42 00       \tpushq  $0x42cf40\n  4137b3:\t44 8b 8d 78 ff ff ff \tmov    -0x88(%rbp),%r9d\n  4137ba:\t41 51                \tpush   %r9\n  4137bc:\t41 50                \tpush   %r8\n  4137be:\tff 75 e0             \tpushq  -0x20(%rbp)\n  4137c1:\t57                   \tpush   %rdi\n  4137c2:\t56                   \tpush   %rsi\n  4137c3:\t45 89 d9             \tmov    %r11d,%r9d\n  4137c6:\t45 89 d0             \tmov    %r10d,%r8d\n  4137c9:\tbe 60 5c 42 00       \tmov    $0x425c60,%esi\n  4137ce:\t48 89 c7             \tmov    %rax,%rdi\n  4137d1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4137d6:\te8 f5 e9 fe ff       \tcallq  4021d0 <fprintf@plt>\n  4137db:\t48 83 c4 30          \tadd    $0x30,%rsp\n  4137df:\tbf c4 5c 42 00       \tmov    $0x425cc4,%edi\n  4137e4:\te8 27 eb fe ff       \tcallq  402310 <perror@plt>\n  4137e9:\tbf 00 c9 42 00       \tmov    $0x42c900,%edi\n  4137ee:\te8 4d ea fe ff       \tcallq  402240 <pthread_mutex_unlock@plt>\n  4137f3:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4137f8:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n  4137fc:\tc9                   \tleaveq \n  4137fd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall timer_set_event(unsigned __int8 a1, unsigned int a2) {\n  struct tm *v2;\n  struct tm *v3;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  struct timespec <span class=\"supfact\">v11</span>;\n  struct timespec <span class=\"supfact\">tp</span>;\n  __syscall_slong_t v13;\n  __syscall_slong_t v14;\n  if (_APP_LOG_LEVEL > Number || _BIG_DEBUG_ACTIVE) {\n    clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n    v2 = gmtime(&<span class=\"supfact\">tp</span>.tv_sec);\n    v5 = *(_QWORD *)&v2->tm_sec;\n    v7 = *(_QWORD *)&v2->tm_hour;\n    v9 = *(_QWORD *)&v2->tm_mon;\n    v14 = <span class=\"supfact\">tp</span>.tv_nsec / Number;\n    fprintf(stderr, String, (unsigned int)(HIDWORD(v9) + Number),\n            (unsigned int)(v9 + Number), HIDWORD(v7), (unsigned int)v7,\n            HIDWORD(v5), (unsigned int)v5, <span class=\"supfact\">tp</span>.tv_nsec / Number,\n            (const char *)processLogPrefix, a2, a1);\n  }\n  pthread_mutex_lock(&timerEventMutex);\n  *((_DWORD *)timerThreadTbl + Number * a1) |= a2;\n  if (sem_post(&eventSem) < Number) {\n    if (_APP_LOG_LEVEL > Number || _BIG_DEBUG_ACTIVE) {\n      clock_gettime(Number, &<span class=\"supfact\">v11</span>);\n      v3 = gmtime(&<span class=\"supfact\">v11</span>.tv_sec);\n      v6 = *(_QWORD *)&v3->tm_sec;\n      v8 = *(_QWORD *)&v3->tm_hour;\n      v10 = *(_QWORD *)&v3->tm_mon;\n      v13 = <span class=\"supfact\">v11</span>.tv_nsec / Number;\n      fprintf(stderr, String, (unsigned int)(HIDWORD(v10) + Number),\n              (unsigned int)(v10 + Number), HIDWORD(v8), (unsigned int)v8,\n              HIDWORD(v6), (unsigned int)v6,\n              <span class=\"supfact\">v11</span>.tv_nsec / Number,\n              (const char *)processLogPrefix, a2, &eventSem);\n    }\n    perror(String);\n  }\n  pthread_mutex_unlock(&timerEventMutex);\n  return Number L;\n}", "code_t": "uint8 __cdecl timer_set_event(uint8 threadId, uint32 event) {\n  struct tm *v2;\n  struct tm *v3;\n  __int64 _currTm;\n  __int64 _currTma;\n  __int64 _currTm_8;\n  __int64 _currTm_8a;\n  __int64 _currTm_16;\n  __int64 _currTm_16a;\n  timespec <span class=\"supfact\">_currTime_0</span>;\n  timespec <span class=\"supfact\">_currTime</span>;\n  __int64 _uSecs_0;\n  __int64 _uSecs;\n  if (_APP_LOG_LEVEL > Number || _BIG_DEBUG_ACTIVE) {\n    clock_gettime(Number, &<span class=\"supfact\">_currTime</span>);\n    v2 = gmtime(&<span class=\"supfact\">_currTime</span>.tv_sec);\n    _currTm = *(_QWORD *)&v2->tm_sec;\n    _currTm_8 = *(_QWORD *)&v2->tm_hour;\n    _currTm_16 = *(_QWORD *)&v2->tm_mon;\n    _uSecs = <span class=\"supfact\">_currTime</span>.tv_nsec / Number;\n    fprintf(stderr, String, (unsigned int)(HIDWORD(_currTm_16) + Number),\n            (unsigned int)(_currTm_16 + Number), HIDWORD(_currTm_8),\n            (unsigned int)_currTm_8, HIDWORD(_currTm), (unsigned int)_currTm,\n            <span class=\"supfact\">_currTime</span>.tv_nsec / Number, processLogPrefix, event,\n            threadId);\n  }\n  pthread_mutex_lock(&timerEventMutex);\n  timerThreadTbl[threadId].eventFlag |= event;\n  if (sem_post(&eventSem) < Number) {\n    if (_APP_LOG_LEVEL > Number || _BIG_DEBUG_ACTIVE) {\n      clock_gettime(Number, &<span class=\"supfact\">_currTime_0</span>);\n      v3 = gmtime(&<span class=\"supfact\">_currTime_0</span>.tv_sec);\n      _currTma = *(_QWORD *)&v3->tm_sec;\n      _currTm_8a = *(_QWORD *)&v3->tm_hour;\n      _currTm_16a = *(_QWORD *)&v3->tm_mon;\n      _uSecs_0 = <span class=\"supfact\">_currTime_0</span>.tv_nsec / Number;\n      fprintf(stderr, String, (unsigned int)(HIDWORD(_currTm_16a) + Number),\n              (unsigned int)(_currTm_16a + Number), HIDWORD(_currTm_8a),\n              (unsigned int)_currTm_8a, HIDWORD(_currTma),\n              (unsigned int)_currTma,\n              <span class=\"supfact\">_currTime_0</span>.tv_nsec / Number, processLogPrefix,\n              event, &eventSem);\n    }\n    perror(String);\n  }\n  pthread_mutex_unlock(&timerEventMutex);\n  return Number;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "_currTime", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}, {"name": "v11", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "_currTime_0", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/25e56b823485f6818a14c8079709309cf1e1f5e530ca728a07dda587c519fbce", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/gaelco.o", "objdump": "00000000000043ec <_ZL31construct_machine_config_squashR14machine_configP8device_t>:\n    43ec:\t55                   \tpush   %rbp\n    43ed:\t48 89 e5             \tmov    %rsp,%rbp\n    43f0:\t53                   \tpush   %rbx\n    43f1:\t48 83 ec 68          \tsub    $0x68,%rsp\n    43f5:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    43f9:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n    43fd:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    4404:\t00 \n    4405:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    4409:\t48 89 c7             \tmov    %rax,%rdi\n    440c:\te8 00 00 00 00       \tcallq  4411 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x25>\n    4411:\t48 83 7d 90 00       \tcmpq   $0x0,-0x70(%rbp)\n    4416:\t75 25                \tjne    443d <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x51>\n    4418:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    441c:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    4422:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    4427:\tba 00 00 00 00       \tmov    $0x0,%edx\n    442c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4431:\t48 89 c7             \tmov    %rax,%rdi\n    4434:\te8 00 00 00 00       \tcallq  4439 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x4d>\n    4439:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n    443d:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 4444 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x58>\n    4444:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n    4448:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    444c:\t41 b8 00 1b b7 00    \tmov    $0xb71b00,%r8d\n    4452:\t48 89 d1             \tmov    %rdx,%rcx\n    4455:\tba 00 00 00 00       \tmov    $0x0,%edx\n    445a:\t48 89 c7             \tmov    %rax,%rdi\n    445d:\te8 00 00 00 00       \tcallq  4462 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x76>\n    4462:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    4466:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    446a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    446f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4474:\t48 89 c7             \tmov    %rax,%rdi\n    4477:\te8 00 00 00 00       \tcallq  447c <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x90>\n    447c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4480:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    4485:\tba 00 00 00 00       \tmov    $0x0,%edx\n    448a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    448f:\t48 89 c7             \tmov    %rax,%rdi\n    4492:\te8 00 00 00 00       \tcallq  4497 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0xab>\n    4497:\t48 8b 5d 98          \tmov    -0x68(%rbp),%rbx\n    449b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 44a2 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0xb6>\n    44a2:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n    44a7:\te8 00 00 00 00       \tcallq  44ac <_ZL31construct_machine_config_squashR14machine_configP8device_t+0xc0>\n    44ac:\t89 c1                \tmov    %eax,%ecx\n    44ae:\t48 89 d0             \tmov    %rdx,%rax\n    44b1:\t89 0b                \tmov    %ecx,(%rbx)\n    44b3:\t48 89 43 08          \tmov    %rax,0x8(%rbx)\n    44b7:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    44bb:\tba 00 00 00 00       \tmov    $0x0,%edx\n    44c0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    44c5:\t48 89 c7             \tmov    %rax,%rdi\n    44c8:\te8 00 00 00 00       \tcallq  44cd <_ZL31construct_machine_config_squashR14machine_configP8device_t+0xe1>\n    44cd:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 44d4 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0xe8>\n    44d4:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n    44d8:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    44dc:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    44e2:\t48 89 d1             \tmov    %rdx,%rcx\n    44e5:\tba 00 00 00 00       \tmov    $0x0,%edx\n    44ea:\t48 89 c7             \tmov    %rax,%rdi\n    44ed:\te8 00 00 00 00       \tcallq  44f2 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x106>\n    44f2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    44f6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    44fa:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    44ff:\t48 89 c7             \tmov    %rax,%rdi\n    4502:\te8 00 00 00 00       \tcallq  4507 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x11b>\n    4507:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    450b:\t48 be aa aa 41 ba 3e \tmovabs $0x3b363eba41aaaa,%rsi\n    4512:\t36 3b 00 \n    4515:\t48 89 c7             \tmov    %rax,%rdi\n    4518:\te8 00 00 00 00       \tcallq  451d <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x131>\n    451d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4521:\t48 be 00 40 f0 9b bc \tmovabs $0x8e1bc9bf04000,%rsi\n    4528:\te1 08 00 \n    452b:\t48 89 c7             \tmov    %rax,%rdi\n    452e:\te8 00 00 00 00       \tcallq  4533 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x147>\n    4533:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4537:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    453c:\t48 89 c7             \tmov    %rax,%rdi\n    453f:\te8 00 00 00 00       \tcallq  4544 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x158>\n    4544:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4548:\tba 00 02 00 00       \tmov    $0x200,%edx\n    454d:\tbe 00 02 00 00       \tmov    $0x200,%esi\n    4552:\t48 89 c7             \tmov    %rax,%rdi\n    4555:\te8 00 00 00 00       \tcallq  455a <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x16e>\n    455a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    455e:\t41 b8 ff 00 00 00    \tmov    $0xff,%r8d\n    4564:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    4569:\tba 3f 01 00 00       \tmov    $0x13f,%edx\n    456e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4573:\t48 89 c7             \tmov    %rax,%rdi\n    4576:\te8 00 00 00 00       \tcallq  457b <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x18f>\n    457b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    457f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4584:\t48 89 c7             \tmov    %rax,%rdi\n    4587:\te8 00 00 00 00       \tcallq  458c <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x1a0>\n    458c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4590:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n    4597:\t00 \n    4598:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    459c:\tc7 40 50 00 04 00 00 \tmovl   $0x400,0x50(%rax)\n    45a3:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    45a7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    45ac:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    45b1:\t48 89 c7             \tmov    %rax,%rdi\n    45b4:\te8 00 00 00 00       \tcallq  45b9 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x1cd>\n    45b9:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 45c0 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x1d4>\n    45c0:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n    45c4:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    45c8:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    45ce:\t48 89 d1             \tmov    %rdx,%rcx\n    45d1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    45d6:\t48 89 c7             \tmov    %rax,%rdi\n    45d9:\te8 00 00 00 00       \tcallq  45de <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x1f2>\n    45de:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    45e2:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 45ea <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x1fe>\n    45e9:\t00 \n    45ea:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    45ee:\t66 0f 28 d0          \tmovapd %xmm0,%xmm2\n    45f2:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    45f6:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    45fa:\t48 89 c7             \tmov    %rax,%rdi\n    45fd:\te8 00 00 00 00       \tcallq  4602 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x216>\n    4602:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 4609 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x21d>\n    4609:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n    460d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    4611:\t41 b8 00 1d 10 00    \tmov    $0x101d00,%r8d\n    4617:\t48 89 d1             \tmov    %rdx,%rcx\n    461a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    461f:\t48 89 c7             \tmov    %rax,%rdi\n    4622:\te8 00 00 00 00       \tcallq  4627 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x23b>\n    4627:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    462b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    462f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    4634:\t48 89 c7             \tmov    %rax,%rdi\n    4637:\te8 00 00 00 00       \tcallq  463c <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x250>\n    463c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 4643 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x257>\n    4643:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4647:\tb9 ff ff 00 00       \tmov    $0xffff,%ecx\n    464c:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n    4651:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4656:\tbe ff ff 00 00       \tmov    $0xffff,%esi\n    465b:\t48 89 c7             \tmov    %rax,%rdi\n    465e:\te8 00 00 00 00       \tcallq  4663 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x277>\n    4663:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n    4667:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    466b:\t48 89 c7             \tmov    %rax,%rdi\n    466e:\te8 00 00 00 00       \tcallq  4673 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x287>\n    4673:\t48 89 d8             \tmov    %rbx,%rax\n    4676:\teb 1a                \tjmp    4692 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x2a6>\n    4678:\t48 89 c3             \tmov    %rax,%rbx\n    467b:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    467f:\t48 89 c7             \tmov    %rax,%rdi\n    4682:\te8 00 00 00 00       \tcallq  4687 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x29b>\n    4687:\t48 89 d8             \tmov    %rbx,%rax\n    468a:\t48 89 c7             \tmov    %rax,%rdi\n    468d:\te8 00 00 00 00       \tcallq  4692 <_ZL31construct_machine_config_squashR14machine_configP8device_t+0x2a6>\n    4692:\t48 83 c4 68          \tadd    $0x68,%rsp\n    4696:\t5b                   \tpop    %rbx\n    4697:\t5d                   \tpop    %rbp\n    4698:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_squash(machine_config *a1,\n                                                     device_t *a2) {\n  attotime *v2;\n  int v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  unsigned __int16 v7;\n  __int16 v8;\n  int v9;\n  unsigned int v10;\n  device_t *v12;\n  char <span class=\"supfact\">v14</span>[Number];\n  attotime *v15;\n  v12 = a2;\n  v15 = Number L;\n  astring astring((astring *)<span class=\"supfact\">v14</span>);\n  if (!a2)\n    v12 = (device_t *)machine_config device_add(\n        a1, Number L, String, driver_device_creator<gaelco_state>, Number);\n  v15 = (attotime *)machine_config device_add(a1, v12, String, M68000, Number);\n  device_memory_interface static_set_addrmap(v15, Number L,\n                                             construct_address_map_squash_map);\n  v2 = v15;\n  device_execute_interface static_set_vblank_int(\n      v15, (device_t *)&irq6_line_hold, (void(__fastcall *)(device_t *))String,\n      Number L, v3);\n  *(_DWORD *)a1 = attotime from_hz(v2, Number);\n  *((_QWORD *)a1 + Number) = v4;\n  driver_device static_set_callback(v12, Number L, machine_start_gaelco);\n  v15 = (attotime *)machine_config device_add(a1, v12, String, SCREEN, Number);\n  screen_device static_set_type(v15, Number L);\n  screen_device static_set_refresh(v15, (device_t *)Number, v5);\n  screen_device static_set_vblank_time(v15, (device_t *)Number, v6);\n  screen_device static_set_format(v15, Number L);\n  screen_device static_set_size(v15, (device_t *)&loc_200, Number, v7);\n  screen_device static_set_visarea(v15, Number L, Number, Number, Number, v8);\n  screen_device static_set_screen_update(v15, &screen_update_maniacsq);\n  *((_QWORD *)a1 + Number) = &gfxdecodeinfo_0x100000;\n  *((_DWORD *)a1 + Number) = Number;\n  driver_device static_set_callback(v12, Number L, &video_start_maniacsq);\n  v15 = (attotime *)machine_config device_add(a1, v12, String, SPEAKER, Number);\n  speaker_device static_set_position(v15, v12, Number, Number, Number);\n  v15 =\n      (attotime *)machine_config device_add(a1, v12, String, OKIM6295, Number);\n  okim6295_device static_set_pin7(v15, (device_t *)&loc_1, v9);\n  device_sound_interface static_add_route(v15, (device_t *)Number,\n                                          (unsigned int)String,\n                                          (const char *)Number, Number, v10);\n  astring ~astring((astring *)<span class=\"supfact\">v14</span>);\n  return v12;\n}", "code_t": "device_t *__cdecl construct_machine_config_squash(machine_config *config,\n                                                  device_t *owner) {\n  void(__fastcall * v2)(address_map *, const device_t *);\n  int v3;\n  attotime v4;\n  screen_type_enum v5;\n  __int64 v6;\n  __int64 v7;\n  _bitmap_format v8;\n  unsigned __int16 v9;\n  __int16 v10;\n  unsigned int(__fastcall * v11)(screen_device *, bitmap_t *,\n                                 const _rectangle *);\n  void(__fastcall * v12)(running_machine *);\n  int v13;\n  unsigned int v14;\n  device_t *ownera;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *device;\n  ownera = owner;\n  device = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  if (!owner)\n    ownera = (device_t *)machine_config device_add(\n        config, Number L, String,\n        (device_t * (__fastcall *)(const machine_config *, const char *,\n                                   device_t *, unsigned int))\n            driver_device_creator<gaelco_state>,\n        Number);\n  device = (device_t *)machine_config device_add(config, ownera, String, M68000,\n                                                 Number);\n  device_memory_interface static_set_addrmap(\n      device, Number L, (address_spacenum)construct_address_map_squash_map, v2);\n  device_execute_interface static_set_vblank_int(\n      device, (device_t *)&irq6_line_hold,\n      (void(__fastcall *)(device_t *))String, Number L, v3);\n  v4 = attotime from_hz(Number);\n  config->m_minimum_quantum.seconds = v4.seconds;\n  config->m_minimum_quantum.attoseconds = v4.attoseconds;\n  driver_device static_set_callback(\n      ownera, Number L, (driver_device callback_type)machine_start_gaelco,\n      (void(__fastcall *)(running_machine *))(unsigned int)v4.seconds);\n  device = (device_t *)machine_config device_add(config, ownera, String, SCREEN,\n                                                 Number);\n  screen_device static_set_type(device, (device_t *)&loc_1, v5);\n  screen_device static_set_refresh(device, (device_t *)Number, v6);\n  screen_device static_set_vblank_time(device, (device_t *)Number, v7);\n  screen_device static_set_format(device, (device_t *)((char *)&loc_1 + Number),\n                                  v8);\n  screen_device static_set_size(device, (device_t *)&loc_200, Number, v9);\n  screen_device static_set_visarea(device, Number L, Number, Number, Number,\n                                   v10);\n  screen_device static_set_screen_update(\n      device, (device_t *)&screen_update_maniacsq, v11);\n  config->m_gfxdecodeinfo = gfxdecodeinfo_0x100000;\n  config->m_total_colors = Number;\n  driver_device static_set_callback(\n      ownera, (device_t *)&loc_4,\n      (driver_device callback_type)&video_start_maniacsq, v12);\n  device = (device_t *)machine_config device_add(config, ownera, String,\n                                                 SPEAKER, Number);\n  speaker_device static_set_position(device, ownera, Number, Number, Number);\n  device = (device_t *)machine_config device_add(config, ownera, String,\n                                                 OKIM6295, Number);\n  okim6295_device static_set_pin7(device, (device_t *)&loc_1, v13);\n  device_sound_interface static_add_route(device, (device_t *)Number,\n                                          (unsigned int)String,\n                                          (const char *)Number, Number, v14);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return ownera;\n}", "var": [{"name": "v14", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "jcalvinowens", "repo_name": "miscellaneous", "path": "jcalvinowens/miscellaneous/12fac9f19c58e866794a18e9046366a511e377149bce9c1a496defe0102da01d", "path_in_repo": "jcalvinowens/miscellaneous/benchmarks/test-zero", "objdump": "000000000040136f <main>:\n  40136f:\t55                   \tpush   %rbp\n  401370:\t48 89 e5             \tmov    %rsp,%rbp\n  401373:\t48 83 ec 50          \tsub    $0x50,%rsp\n  401377:\tbf 00 10 00 00       \tmov    $0x1000,%edi\n  40137c:\te8 a5 ff ff ff       \tcallq  401326 <alloc_buffer>\n  401381:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401385:\tc7 45 ec 08 00 00 00 \tmovl   $0x8,-0x14(%rbp)\n  40138c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40138f:\t89 c2                \tmov    %eax,%edx\n  401391:\tbe 80 96 98 00       \tmov    $0x989680,%esi\n  401396:\tbf 98 20 40 00       \tmov    $0x402098,%edi\n  40139b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013a0:\te8 bb fc ff ff       \tcallq  401060 <printf@plt>\n  4013a5:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4013ac:\te9 ea 00 00 00       \tjmpq   40149b <main+0x12c>\n  4013b1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4013b4:\t48 98                \tcltq   \n  4013b6:\t48 c1 e0 04          \tshl    $0x4,%rax\n  4013ba:\t48 05 60 40 40 00    \tadd    $0x404060,%rax\n  4013c0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4013c4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4013c8:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4013cc:\t48 89 c6             \tmov    %rax,%rsi\n  4013cf:\tbf b7 20 40 00       \tmov    $0x4020b7,%edi\n  4013d4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013d9:\te8 82 fc ff ff       \tcallq  401060 <printf@plt>\n  4013de:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4013e2:\t48 89 c6             \tmov    %rax,%rsi\n  4013e5:\tbf 04 00 00 00       \tmov    $0x4,%edi\n  4013ea:\te8 51 fc ff ff       \tcallq  401040 <clock_gettime@plt>\n  4013ef:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4013f6:\teb 1c                \tjmp    401414 <main+0xa5>\n  4013f8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4013fc:\t48 8b 10             \tmov    (%rax),%rdx\n  4013ff:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401403:\tbe 00 10 00 00       \tmov    $0x1000,%esi\n  401408:\t48 89 c7             \tmov    %rax,%rdi\n  40140b:\tff d2                \tcallq  *%rdx\n  40140d:\t0f ae f8             \tsfence \n  401410:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  401414:\t81 7d f8 7f 96 98 00 \tcmpl   $0x98967f,-0x8(%rbp)\n  40141b:\t7e db                \tjle    4013f8 <main+0x89>\n  40141d:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  401421:\t48 89 c6             \tmov    %rax,%rsi\n  401424:\tbf 04 00 00 00       \tmov    $0x4,%edi\n  401429:\te8 12 fc ff ff       \tcallq  401040 <clock_gettime@plt>\n  40142e:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  401432:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  401436:\t48 29 c2             \tsub    %rax,%rdx\n  401439:\t48 89 d0             \tmov    %rdx,%rax\n  40143c:\t48 69 c0 00 ca 9a 3b \timul   $0x3b9aca00,%rax,%rax\n  401443:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  401447:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  40144b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40144f:\t48 29 c2             \tsub    %rax,%rdx\n  401452:\t48 89 d0             \tmov    %rdx,%rax\n  401455:\t48 01 45 d8          \tadd    %rax,-0x28(%rbp)\n  401459:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  40145d:\t48 ba bd 42 7a e5 d5 \tmovabs $0xd6bf94d5e57a42bd,%rdx\n  401464:\t94 bf d6 \n  401467:\t48 89 c8             \tmov    %rcx,%rax\n  40146a:\t48 f7 ea             \timul   %rdx\n  40146d:\t48 8d 04 0a          \tlea    (%rdx,%rcx,1),%rax\n  401471:\t48 c1 f8 17          \tsar    $0x17,%rax\n  401475:\t48 89 c2             \tmov    %rax,%rdx\n  401478:\t48 89 c8             \tmov    %rcx,%rax\n  40147b:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  40147f:\t48 29 c2             \tsub    %rax,%rdx\n  401482:\t48 89 d0             \tmov    %rdx,%rax\n  401485:\t48 89 c6             \tmov    %rax,%rsi\n  401488:\tbf bc 20 40 00       \tmov    $0x4020bc,%edi\n  40148d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401492:\te8 c9 fb ff ff       \tcallq  401060 <printf@plt>\n  401497:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40149b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40149e:\t3b 45 ec             \tcmp    -0x14(%rbp),%eax\n  4014a1:\t0f 8c 0a ff ff ff    \tjl     4013b1 <main+0x42>\n  4014a7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4014ac:\tc9                   \tleaveq \n  4014ad:\tc3                   \tretq   \n  4014ae:\t66 90                \txchg   %ax,%ax", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  struct timespec <span class=\"supfact\">v4</span>;\n  struct timespec <span class=\"supfact\">tp</span>;\n  __time_t v6;\n  void(__fastcall * *v7)(void *, __int64);\n  int v8;\n  void *v9;\n  int j;\n  int i;\n  v9 = alloc_buffer(Number);\n  v8 = Number;\n  printf(String, Number L, Number L);\n  for (i = Number; i < v8; ++i) {\n    v7 = (void(__fastcall **)(void *, __int64))(Number L * i + Number);\n    printf(String, (&off_404068)[Number * i]);\n    clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n    for (j = Number; j <= Number; ++j) {\n      (*v7)(v9, Number L);\n      _mm_sfence();\n    }\n    clock_gettime(Number, &<span class=\"supfact\">v4</span>);\n    v6 = Number * (<span class=\"supfact\">v4</span>.tv_sec - <span class=\"supfact\">tp</span>.tv_sec);\n    v6 += <span class=\"supfact\">v4</span>.tv_nsec - <span class=\"supfact\">tp</span>.tv_nsec;\n    printf(String, v6 / Number);\n  }\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  timespec <span class=\"supfact\">now</span>;\n  timespec <span class=\"supfact\">then</span>;\n  __int64 nsec_elapsed;\n  zero_func *cur;\n  int nr_tests;\n  char *dst_buf;\n  int j;\n  int i;\n  dst_buf = (char *)alloc_buffer(Number);\n  nr_tests = Number;\n  printf(String, Number L, Number L);\n  for (i = Number; i < nr_tests; ++i) {\n    cur = (zero_func *)(Number L * i + Number);\n    printf(String, funcs[i].name);\n    clock_gettime(Number, &<span class=\"supfact\">then</span>);\n    for (j = Number; j <= Number; ++j) {\n      cur->func(dst_buf, Number L);\n      _mm_sfence();\n    }\n    clock_gettime(Number, &<span class=\"supfact\">now</span>);\n    nsec_elapsed =\n        Number * (<span class=\"supfact\">now</span>.tv_sec - <span class=\"supfact\">then</span>.tv_sec);\n    nsec_elapsed += <span class=\"supfact\">now</span>.tv_nsec - <span class=\"supfact\">then</span>.tv_nsec;\n    printf(String, nsec_elapsed / Number);\n  }\n  return Number;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "then", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}, {"name": "v4", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "now", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "AlexanderDenkMA", "repo_name": "TypeChef-mplayerAnalysis", "path": "AlexanderDenkMA/TypeChef-mplayerAnalysis/ce28a4fa3bb7859fce66852d54e4b41ab2dcbb5c6f06bd404b2bb5f1ae55e0db", "path_in_repo": "AlexanderDenkMA/TypeChef-mplayerAnalysis/MPlayer-1.1.1/ffmpeg/libavutil/eval.o", "objdump": "000000000000270a <av_expr_parse>:\n    270a:\t53                   \tpush   %rbx\n    270b:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n    2712:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n    2717:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n    271c:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n    2721:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n    2726:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n    272b:\t4c 89 0c 24          \tmov    %r9,(%rsp)\n    272f:\t48 8d 54 24 40       \tlea    0x40(%rsp),%rdx\n    2734:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2739:\tb9 0d 00 00 00       \tmov    $0xd,%ecx\n    273e:\t48 89 d7             \tmov    %rdx,%rdi\n    2741:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    2744:\t48 c7 44 24 38 00 00 \tmovq   $0x0,0x38(%rsp)\n    274b:\t00 00 \n    274d:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    2752:\t48 89 c7             \tmov    %rax,%rdi\n    2755:\te8 00 00 00 00       \tcallq  275a <av_expr_parse+0x50>\n    275a:\t48 83 c0 01          \tadd    $0x1,%rax\n    275e:\t48 89 c7             \tmov    %rax,%rdi\n    2761:\te8 00 00 00 00       \tcallq  2766 <av_expr_parse+0x5c>\n    2766:\t48 89 84 24 b8 00 00 \tmov    %rax,0xb8(%rsp)\n    276d:\t00 \n    276e:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n    2775:\t00 \n    2776:\t48 89 84 24 c8 00 00 \tmov    %rax,0xc8(%rsp)\n    277d:\t00 \n    277e:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    2783:\t48 89 84 24 b0 00 00 \tmov    %rax,0xb0(%rsp)\n    278a:\t00 \n    278b:\tc7 84 24 c4 00 00 00 \tmovl   $0x0,0xc4(%rsp)\n    2792:\t00 00 00 00 \n    2796:\t48 83 bc 24 b8 00 00 \tcmpq   $0x0,0xb8(%rsp)\n    279d:\t00 00 \n    279f:\t75 5b                \tjne    27fc <av_expr_parse+0xf2>\n    27a1:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    27a6:\te9 cb 01 00 00       \tjmpq   2976 <av_expr_parse+0x26c>\n    27ab:\te8 00 00 00 00       \tcallq  27b0 <av_expr_parse+0xa6>\n    27b0:\t48 8b 08             \tmov    (%rax),%rcx\n    27b3:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    27b8:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    27bc:\t48 89 54 24 20       \tmov    %rdx,0x20(%rsp)\n    27c1:\t0f b6 00             \tmovzbl (%rax),%eax\n    27c4:\t48 0f be c0          \tmovsbq %al,%rax\n    27c8:\t48 01 c0             \tadd    %rax,%rax\n    27cb:\t48 01 c8             \tadd    %rcx,%rax\n    27ce:\t0f b7 00             \tmovzwl (%rax),%eax\n    27d1:\t0f b7 c0             \tmovzwl %ax,%eax\n    27d4:\t25 00 20 00 00       \tand    $0x2000,%eax\n    27d9:\t85 c0                \ttest   %eax,%eax\n    27db:\t75 1f                \tjne    27fc <av_expr_parse+0xf2>\n    27dd:\t48 8b 84 24 c8 00 00 \tmov    0xc8(%rsp),%rax\n    27e4:\t00 \n    27e5:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    27e9:\t48 89 94 24 c8 00 00 \tmov    %rdx,0xc8(%rsp)\n    27f0:\t00 \n    27f1:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n    27f6:\t0f b6 52 ff          \tmovzbl -0x1(%rdx),%edx\n    27fa:\t88 10                \tmov    %dl,(%rax)\n    27fc:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    2801:\t0f b6 00             \tmovzbl (%rax),%eax\n    2804:\t84 c0                \ttest   %al,%al\n    2806:\t75 a3                \tjne    27ab <av_expr_parse+0xa1>\n    2808:\t48 8b 84 24 c8 00 00 \tmov    0xc8(%rsp),%rax\n    280f:\t00 \n    2810:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    2814:\t48 89 94 24 c8 00 00 \tmov    %rdx,0xc8(%rsp)\n    281b:\t00 \n    281c:\tc6 00 00             \tmovb   $0x0,(%rax)\n    281f:\t48 c7 44 24 40 00 00 \tmovq   $0x0,0x40(%rsp)\n    2826:\t00 00 \n    2828:\tc7 44 24 48 64 00 00 \tmovl   $0x64,0x48(%rsp)\n    282f:\t00 \n    2830:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n    2837:\t00 \n    2838:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n    283d:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2842:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n    2847:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    284c:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n    2851:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    2856:\t48 89 44 24 70       \tmov    %rax,0x70(%rsp)\n    285b:\t48 8b 84 24 e0 00 00 \tmov    0xe0(%rsp),%rax\n    2862:\t00 \n    2863:\t48 89 44 24 78       \tmov    %rax,0x78(%rsp)\n    2868:\t48 8b 04 24          \tmov    (%rsp),%rax\n    286c:\t48 89 84 24 80 00 00 \tmov    %rax,0x80(%rsp)\n    2873:\t00 \n    2874:\t8b 84 24 e8 00 00 00 \tmov    0xe8(%rsp),%eax\n    287b:\t89 84 24 90 00 00 00 \tmov    %eax,0x90(%rsp)\n    2882:\t48 8b 84 24 f0 00 00 \tmov    0xf0(%rsp),%rax\n    2889:\t00 \n    288a:\t48 89 84 24 98 00 00 \tmov    %rax,0x98(%rsp)\n    2891:\t00 \n    2892:\t48 8d 54 24 40       \tlea    0x40(%rsp),%rdx\n    2897:\t48 8d 44 24 38       \tlea    0x38(%rsp),%rax\n    289c:\t48 89 d6             \tmov    %rdx,%rsi\n    289f:\t48 89 c7             \tmov    %rax,%rdi\n    28a2:\te8 0b fc ff ff       \tcallq  24b2 <parse_expr>\n    28a7:\t89 84 24 c4 00 00 00 \tmov    %eax,0xc4(%rsp)\n    28ae:\t83 bc 24 c4 00 00 00 \tcmpl   $0x0,0xc4(%rsp)\n    28b5:\t00 \n    28b6:\t0f 88 a2 00 00 00    \tjs     295e <av_expr_parse+0x254>\n    28bc:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    28c1:\t0f b6 00             \tmovzbl (%rax),%eax\n    28c4:\t84 c0                \ttest   %al,%al\n    28c6:\t74 49                \tje     2911 <av_expr_parse+0x207>\n    28c8:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    28cd:\t48 89 c7             \tmov    %rax,%rdi\n    28d0:\te8 00 00 00 00       \tcallq  28d5 <av_expr_parse+0x1cb>\n    28d5:\t48 8b 54 24 50       \tmov    0x50(%rsp),%rdx\n    28da:\t48 8b 8c 24 b0 00 00 \tmov    0xb0(%rsp),%rcx\n    28e1:\t00 \n    28e2:\t48 8d 44 24 40       \tlea    0x40(%rsp),%rax\n    28e7:\t49 89 c8             \tmov    %rcx,%r8\n    28ea:\t48 89 d1             \tmov    %rdx,%rcx\n    28ed:\tba 00 00 00 00       \tmov    $0x0,%edx\n    28f2:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    28f7:\t48 89 c7             \tmov    %rax,%rdi\n    28fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    28ff:\te8 00 00 00 00       \tcallq  2904 <av_expr_parse+0x1fa>\n    2904:\tc7 84 24 c4 00 00 00 \tmovl   $0xffffffea,0xc4(%rsp)\n    290b:\tea ff ff ff \n    290f:\teb 4e                \tjmp    295f <av_expr_parse+0x255>\n    2911:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    2916:\t48 89 c7             \tmov    %rax,%rdi\n    2919:\te8 d0 fc ff ff       \tcallq  25ee <verify_expr>\n    291e:\t85 c0                \ttest   %eax,%eax\n    2920:\t75 1a                \tjne    293c <av_expr_parse+0x232>\n    2922:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    2927:\t48 89 c7             \tmov    %rax,%rdi\n    292a:\te8 00 00 00 00       \tcallq  292f <av_expr_parse+0x225>\n    292f:\tc7 84 24 c4 00 00 00 \tmovl   $0xffffffea,0xc4(%rsp)\n    2936:\tea ff ff ff \n    293a:\teb 23                \tjmp    295f <av_expr_parse+0x255>\n    293c:\t48 8b 5c 24 38       \tmov    0x38(%rsp),%rbx\n    2941:\tbf 50 00 00 00       \tmov    $0x50,%edi\n    2946:\te8 00 00 00 00       \tcallq  294b <av_expr_parse+0x241>\n    294b:\t48 89 43 30          \tmov    %rax,0x30(%rbx)\n    294f:\t48 8b 54 24 38       \tmov    0x38(%rsp),%rdx\n    2954:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    2959:\t48 89 10             \tmov    %rdx,(%rax)\n    295c:\teb 01                \tjmp    295f <av_expr_parse+0x255>\n    295e:\t90                   \tnop\n    295f:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n    2966:\t00 \n    2967:\t48 89 c7             \tmov    %rax,%rdi\n    296a:\te8 00 00 00 00       \tcallq  296f <av_expr_parse+0x265>\n    296f:\t8b 84 24 c4 00 00 00 \tmov    0xc4(%rsp),%eax\n    2976:\t48 81 c4 d0 00 00 00 \tadd    $0xd0,%rsp\n    297d:\t5b                   \tpop    %rbx\n    297e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall av_expr_parse(_QWORD *a1, const char *a2, __int64 a3,\n                                 __int64 a4, __int64 a5, __int64 a6, __int64 a7,\n                                 int a8, __int64 a9) {\n  size_t v9;\n  const unsigned __int16 *v11;\n  char *v12;\n  _BYTE *v13;\n  _BYTE *v14;\n  _QWORD *v15;\n  char *s;\n  _QWORD *v21;\n  __int64 <span class=\"supfact\">v22</span>[Number];\n  const char *v23;\n  _BYTE *v24;\n  unsigned int v25;\n  _BYTE *v26;\n  s = (char *)a2;\n  memset(<span class=\"supfact\">v22</span>, Number, Number);\n  v21 = Number L;\n  v9 = strlen(a2);\n  v24 = (_BYTE *)av_malloc(v9 + Number);\n  v26 = v24;\n  v23 = a2;\n  v25 = Number;\n  if (!v24)\n    return Number L;\n  while (*s) {\n    v11 = *_ctype_b_loc();\n    v12 = s++;\n    if ((v11[*v12] & Number) == Number) {\n      v13 = v26++;\n      *v13 = *(s - Number);\n    }\n  }\n  v14 = v26++;\n  *v14 = Number;\n  <span class=\"supfact\">v22</span>[Number] = (__int64)&class;\n  LODWORD(<span class=\"supfact\">v22</span>[Number]) = Number;\n  <span class=\"supfact\">v22</span>[Number] = (__int64)v24;\n  <span class=\"supfact\">v22</span>[Number] = a3;\n  <span class=\"supfact\">v22</span>[Number] = a5;\n  <span class=\"supfact\">v22</span>[Number] = a4;\n  <span class=\"supfact\">v22</span>[Number] = a7;\n  <span class=\"supfact\">v22</span>[Number] = a6;\n  LODWORD(<span class=\"supfact\">v22</span>[Number]) = a8;\n  <span class=\"supfact\">v22</span>[Number] = a9;\n  v25 = parse_expr(&v21, (__int64)<span class=\"supfact\">v22</span>);\n  if ((v25 & Number) == Number) {\n    if (*(_BYTE *)<span class=\"supfact\">v22</span>[Number]) {\n      av_expr_free(v21);\n      av_log(<span class=\"supfact\">v22</span>, Number L, String,\n             (const char *)<span class=\"supfact\">v22</span>[Number], v23);\n      v25 = Number;\n    } else if (verify_expr((__int64)v21)) {\n      v15 = v21;\n      v15[Number] = av_mallocz(Number L);\n      *a1 = v21;\n    } else {\n      av_expr_free(v21);\n      v25 = Number;\n    }\n  }\n  av_free(v24);\n  return v25;\n}", "code_t": "int __cdecl av_expr_parse(AVExpr_0 **expr, const char *s,\n                          const char *const *const_names,\n                          const char *const *func1_names,\n                          double (*const *funcs1)(void *, double),\n                          const char *const *func2_names,\n                          double (*const *funcs2)(void *, double, double),\n                          int log_offset, void *log_ctx) {\n  size_t v9;\n  const unsigned __int16 *v11;\n  const char *v12;\n  char *v13;\n  char *v14;\n  AVExpr_0 *v15;\n  const char *sa;\n  AVExpr_0 *e;\n  Parser_0 <span class=\"supfact\">p</span>;\n  const char *s0;\n  char *w;\n  int ret;\n  char *wp;\n  sa = s;\n  memset(&<span class=\"supfact\">p</span>, Number, sizeof(<span class=\"supfact\">p</span>));\n  e = Number L;\n  v9 = strlen(s);\n  w = (char *)av_malloc(v9 + Number);\n  wp = w;\n  s0 = s;\n  ret = Number;\n  if (!w)\n    return Number;\n  while (*sa) {\n    v11 = *_ctype_b_loc();\n    v12 = sa++;\n    if ((v11[*v12] & Number) == Number) {\n      v13 = wp++;\n      *v13 = *(sa - Number);\n    }\n  }\n  v14 = wp++;\n  *v14 = Number;\n  <span class=\"supfact\">p</span>.class = &class;\n  <span class=\"supfact\">p</span>.stack_index = Number;\n  <span class=\"supfact\">p</span>.s = w;\n  <span class=\"supfact\">p</span>.const_names = const_names;\n  <span class=\"supfact\">p</span>.funcs1 = funcs1;\n  <span class=\"supfact\">p</span>.func1_names = func1_names;\n  <span class=\"supfact\">p</span>.funcs2 = funcs2;\n  <span class=\"supfact\">p</span>.func2_names = func2_names;\n  <span class=\"supfact\">p</span>.log_offset = log_offset;\n  <span class=\"supfact\">p</span>.log_ctx = log_ctx;\n  ret = parse_expr(&e, &<span class=\"supfact\">p</span>);\n  if (ret >= Number) {\n    if (*<span class=\"supfact\">p</span>.s) {\n      av_expr_free(e);\n      av_log(&<span class=\"supfact\">p</span>, Number L, String, <span class=\"supfact\">p</span>.s, s0);\n      ret = Number;\n    } else if (verify_expr(e)) {\n      v15 = e;\n      v15->var = (double *)av_mallocz(Number L);\n      *expr = e;\n    } else {\n      av_expr_free(e);\n      ret = Number;\n    }\n  }\n  av_free(w);\n  return ret;\n}", "var": [{"name": "v22", "type": "struct Parser_0 { const AVClass_0 * class; int stack_index; PADDING (4); char * s; const double * const_values; const char *const * const_names; double (*const *)(void *, double) funcs1; const char *const * func1_names; double (*const *)(void *, double, double) funcs2; const char *const * func2_names; void * opaque; int log_offset; PADDING (4); void * log_ctx; double * var; }", "ref_name": "p", "ref_type": "struct Parser_0 { const AVClass_0 * class; int stack_index; PADDING (4); char * s; const double * const_values; const char *const * const_names; double (*const *)(void *, double) funcs1; const char *const * func1_names; double (*const *)(void *, double, double) funcs2; const char *const * func2_names; void * opaque; int log_offset; PADDING (4); void * log_ctx; double * var; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/167d712463e0992729e10389549ca204bb5a890bb1dd0460101cee04a39115ca", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_f2.o", "objdump": "000000000000ec2c <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring>:\n    ec2c:\t55                   \tpush   %rbp\n    ec2d:\t48 89 e5             \tmov    %rsp,%rbp\n    ec30:\t53                   \tpush   %rbx\n    ec31:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    ec38:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    ec3c:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n    ec40:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    ec47:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    ec4b:\t48 89 c7             \tmov    %rax,%rdi\n    ec4e:\te8 00 00 00 00       \tcallq  ec53 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n    ec53:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    ec5a:\t00 \n    ec5b:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    ec62:\t00 \n    ec63:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    ec6a:\t00 \n    ec6b:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    ec72:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    ec79:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n    ec7d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    ec81:\t48 89 ce             \tmov    %rcx,%rsi\n    ec84:\t48 89 c7             \tmov    %rax,%rdi\n    ec87:\te8 7e f3 ff ff       \tcallq  e00a <_ZL24construct_ioport_liquidkR8device_tR11tagged_listI17input_port_configER7astring>\n    ec8c:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    ec90:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    ec94:\tba 00 00 00 00       \tmov    $0x0,%edx\n    ec99:\t48 89 ce             \tmov    %rcx,%rsi\n    ec9c:\t48 89 c7             \tmov    %rax,%rdi\n    ec9f:\te8 00 00 00 00       \tcallq  eca4 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x78>\n    eca4:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    eca8:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    ecaf:\t00 \n    ecb0:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    ecb7:\t00 \n    ecb8:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    ecbf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    ecc3:\t41 b8 09 00 00 00    \tmov    $0x9,%r8d\n    ecc9:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n    ecce:\tba 30 00 00 00       \tmov    $0x30,%edx\n    ecd3:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    ecd8:\t48 89 c7             \tmov    %rax,%rdi\n    ecdb:\te8 00 00 00 00       \tcallq  ece0 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0xb4>\n    ece0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    ece4:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    eceb:\t00 \n    ecec:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    ecf0:\tba 11 00 00 00       \tmov    $0x11,%edx\n    ecf5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    ecfa:\t48 89 c7             \tmov    %rax,%rdi\n    ecfd:\te8 00 00 00 00       \tcallq  ed02 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0xd6>\n    ed02:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    ed06:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    ed0a:\t8b 00                \tmov    (%rax),%eax\n    ed0c:\t83 e0 10             \tand    $0x10,%eax\n    ed0f:\t89 c1                \tmov    %eax,%ecx\n    ed11:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    ed15:\tba 12 00 00 00       \tmov    $0x12,%edx\n    ed1a:\t89 ce                \tmov    %ecx,%esi\n    ed1c:\t48 89 c7             \tmov    %rax,%rdi\n    ed1f:\te8 00 00 00 00       \tcallq  ed24 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0xf8>\n    ed24:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    ed28:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    ed2c:\t8b 00                \tmov    (%rax),%eax\n    ed2e:\t83 e0 20             \tand    $0x20,%eax\n    ed31:\t89 c1                \tmov    %eax,%ecx\n    ed33:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    ed37:\tba 15 00 00 00       \tmov    $0x15,%edx\n    ed3c:\t89 ce                \tmov    %ecx,%esi\n    ed3e:\t48 89 c7             \tmov    %rax,%rdi\n    ed41:\te8 00 00 00 00       \tcallq  ed46 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x11a>\n    ed46:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    ed4a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    ed4e:\t8b 00                \tmov    (%rax),%eax\n    ed50:\t83 e0 30             \tand    $0x30,%eax\n    ed53:\t89 c1                \tmov    %eax,%ecx\n    ed55:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    ed59:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    ed5e:\t89 ce                \tmov    %ecx,%esi\n    ed60:\t48 89 c7             \tmov    %rax,%rdi\n    ed63:\te8 00 00 00 00       \tcallq  ed68 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x13c>\n    ed68:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    ed6c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    ed70:\t41 b8 63 00 00 00    \tmov    $0x63,%r8d\n    ed76:\tb9 c0 00 00 00       \tmov    $0xc0,%ecx\n    ed7b:\tba c0 00 00 00       \tmov    $0xc0,%edx\n    ed80:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    ed85:\t48 89 c7             \tmov    %rax,%rdi\n    ed88:\te8 00 00 00 00       \tcallq  ed8d <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x161>\n    ed8d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    ed91:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    ed98:\t00 \n    ed99:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    ed9d:\tba 12 00 00 00       \tmov    $0x12,%edx\n    eda2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    eda7:\t48 89 c7             \tmov    %rax,%rdi\n    edaa:\te8 00 00 00 00       \tcallq  edaf <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x183>\n    edaf:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    edb3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    edb7:\t8b 00                \tmov    (%rax),%eax\n    edb9:\t83 e0 40             \tand    $0x40,%eax\n    edbc:\t89 c1                \tmov    %eax,%ecx\n    edbe:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    edc2:\tba 15 00 00 00       \tmov    $0x15,%edx\n    edc7:\t89 ce                \tmov    %ecx,%esi\n    edc9:\t48 89 c7             \tmov    %rax,%rdi\n    edcc:\te8 00 00 00 00       \tcallq  edd1 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x1a5>\n    edd1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    edd5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    edd9:\t8b 00                \tmov    (%rax),%eax\n    eddb:\t25 80 00 00 00       \tand    $0x80,%eax\n    ede0:\t89 c1                \tmov    %eax,%ecx\n    ede2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    ede6:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    edeb:\t89 ce                \tmov    %ecx,%esi\n    eded:\t48 89 c7             \tmov    %rax,%rdi\n    edf0:\te8 00 00 00 00       \tcallq  edf5 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x1c9>\n    edf5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    edf9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    edfd:\t8b 00                \tmov    (%rax),%eax\n    edff:\t25 c0 00 00 00       \tand    $0xc0,%eax\n    ee04:\t89 c1                \tmov    %eax,%ecx\n    ee06:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    ee0a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    ee0f:\t89 ce                \tmov    %ecx,%esi\n    ee11:\t48 89 c7             \tmov    %rax,%rdi\n    ee14:\te8 00 00 00 00       \tcallq  ee19 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x1ed>\n    ee19:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    ee1d:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    ee21:\t48 89 c7             \tmov    %rax,%rdi\n    ee24:\te8 00 00 00 00       \tcallq  ee29 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x1fd>\n    ee29:\teb 1a                \tjmp    ee45 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n    ee2b:\t48 89 c3             \tmov    %rax,%rbx\n    ee2e:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    ee32:\t48 89 c7             \tmov    %rax,%rdi\n    ee35:\te8 00 00 00 00       \tcallq  ee3a <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x20e>\n    ee3a:\t48 89 d8             \tmov    %rbx,%rax\n    ee3d:\t48 89 c7             \tmov    %rax,%rdi\n    ee40:\te8 00 00 00 00       \tcallq  ee45 <_ZL25construct_ioport_liquidkuR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n    ee45:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    ee4c:\t5b                   \tpop    %rbx\n    ee4d:\t5d                   \tpop    %rbp\n    ee4e:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_liquidku(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  int v5;\n  __int64 v6;\n  _DWORD *v7;\n  __int64 v8;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  v8 = Number L;\n  v7 = Number L;\n  v6 = Number L;\n  v5 = Number;\n  construct_ioport_liquidk(a1, a2, a3);\n  v6 = ioconfig_modify_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = (_DWORD *)ioconfig_alloc_field(v6, Number L, Number L, Number L,\n                                      Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v7 = (_DWORD *)ioconfig_alloc_field(v6, Number L, Number L, Number L,\n                                      Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, String);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl construct_ioport_liquidku(device_t *owner, ioport_list *portlist,\n                                       astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value maskbits;\n  input_port_config *curport;\n  input_field_config *curfield;\n  input_setting_config *cursetting;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  cursetting = Number L;\n  curfield = Number L;\n  curport = Number L;\n  maskbits = Number;\n  construct_ioport_liquidk(owner, portlist, errorbuf);\n  curport = (input_port_config *)ioconfig_modify_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_8 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_10 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_10 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_14 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1A + Number);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_62 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_10 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_14 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1A + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, String);\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/4a0bdc8f003682ab5c7a3c0a5c9b700f487b7028dbd0c77ebe0fbc2d78f678f9", "path_in_repo": "XanClic/qemu//aarch64-softmmu/gdbstub.o", "objdump": "000000000000125c <_nocheck__trace_gdbstub_err_checksum_invalid>:\n    125c:\t55                   \tpush   %rbp\n    125d:\t48 89 e5             \tmov    %rsp,%rbp\n    1260:\t41 55                \tpush   %r13\n    1262:\t41 54                \tpush   %r12\n    1264:\t53                   \tpush   %rbx\n    1265:\t48 83 ec 38          \tsub    $0x38,%rsp\n    1269:\t89 f8                \tmov    %edi,%eax\n    126b:\t88 45 bc             \tmov    %al,-0x44(%rbp)\n    126e:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1275:\t00 00 \n    1277:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    127b:\t31 c0                \txor    %eax,%eax\n    127d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1283 <_nocheck__trace_gdbstub_err_checksum_invalid+0x27>\n    1283:\t85 c0                \ttest   %eax,%eax\n    1285:\t0f 95 c0             \tsetne  %al\n    1288:\t0f b6 c0             \tmovzbl %al,%eax\n    128b:\t48 85 c0             \ttest   %rax,%rax\n    128e:\t74 5e                \tje     12ee <_nocheck__trace_gdbstub_err_checksum_invalid+0x92>\n    1290:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 1297 <_nocheck__trace_gdbstub_err_checksum_invalid+0x3b>\n    1297:\t66 85 c0             \ttest   %ax,%ax\n    129a:\t74 52                \tje     12ee <_nocheck__trace_gdbstub_err_checksum_invalid+0x92>\n    129c:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    12a1:\te8 ba ed ff ff       \tcallq  60 <qemu_loglevel_mask>\n    12a6:\t84 c0                \ttest   %al,%al\n    12a8:\t74 44                \tje     12ee <_nocheck__trace_gdbstub_err_checksum_invalid+0x92>\n    12aa:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    12ae:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    12b3:\t48 89 c7             \tmov    %rax,%rdi\n    12b6:\te8 00 00 00 00       \tcallq  12bb <_nocheck__trace_gdbstub_err_checksum_invalid+0x5f>\n    12bb:\t0f b6 5d bc          \tmovzbl -0x44(%rbp),%ebx\n    12bf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    12c3:\t49 89 c5             \tmov    %rax,%r13\n    12c6:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    12ca:\t49 89 c4             \tmov    %rax,%r12\n    12cd:\te8 00 00 00 00       \tcallq  12d2 <_nocheck__trace_gdbstub_err_checksum_invalid+0x76>\n    12d2:\t41 89 d8             \tmov    %ebx,%r8d\n    12d5:\t4c 89 e9             \tmov    %r13,%rcx\n    12d8:\t4c 89 e2             \tmov    %r12,%rdx\n    12db:\t89 c6                \tmov    %eax,%esi\n    12dd:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 12e4 <_nocheck__trace_gdbstub_err_checksum_invalid+0x88>\n    12e4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12e9:\te8 00 00 00 00       \tcallq  12ee <_nocheck__trace_gdbstub_err_checksum_invalid+0x92>\n    12ee:\t90                   \tnop\n    12ef:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    12f3:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    12fa:\t00 00 \n    12fc:\t74 05                \tje     1303 <_nocheck__trace_gdbstub_err_checksum_invalid+0xa7>\n    12fe:\te8 00 00 00 00       \tcallq  1303 <_nocheck__trace_gdbstub_err_checksum_invalid+0xa7>\n    1303:\t48 83 c4 38          \tadd    $0x38,%rsp\n    1307:\t5b                   \tpop    %rbx\n    1308:\t41 5c                \tpop    %r12\n    130a:\t41 5d                \tpop    %r13\n    130c:\t5d                   \tpop    %rbp\n    130d:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_gdbstub_err_checksum_invalid(\n    unsigned __int8 a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_ERR_CHECKSUM_INVALID_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl nocheck__trace_gdbstub_err_checksum_invalid(uint8_t ch_0) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_ERR_CHECKSUM_INVALID_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, ch_0);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "tcdog001", "repo_name": "trunk_project", "path": "tcdog001/trunk_project/c8ce466dd470fc3f9d0c3c42fe3aa3d42e851df248188f8b9ba9ce3d30a16d7a", "path_in_repo": "tcdog001/trunk_project/trunk/package/network/services/ead/src/tinysrp/t_misc.o", "objdump": "0000000000000000 <t_envhash>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec 80 01 00 00 \tsub    $0x180,%rsp\n   b:\t48 89 bd 88 fe ff ff \tmov    %rdi,-0x178(%rbp)\n  12:\t48 8d 85 90 fe ff ff \tlea    -0x170(%rbp),%rax\n  19:\t48 89 c7             \tmov    %rax,%rdi\n  1c:\te8 00 00 00 00       \tcallq  21 <t_envhash+0x21>\n  21:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 28 <t_envhash+0x28>\n  28:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  2c:\teb 51                \tjmp    7f <t_envhash+0x7f>\n  2e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  32:\t48 8b 08             \tmov    (%rax),%rcx\n  35:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  3c:\tba ff 00 00 00       \tmov    $0xff,%edx\n  41:\t48 89 ce             \tmov    %rcx,%rsi\n  44:\t48 89 c7             \tmov    %rax,%rdi\n  47:\te8 00 00 00 00       \tcallq  4c <t_envhash+0x4c>\n  4c:\tc6 45 ef 00          \tmovb   $0x0,-0x11(%rbp)\n  50:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  57:\t48 89 c7             \tmov    %rax,%rdi\n  5a:\te8 00 00 00 00       \tcallq  5f <t_envhash+0x5f>\n  5f:\t89 c2                \tmov    %eax,%edx\n  61:\t48 8d 8d f0 fe ff ff \tlea    -0x110(%rbp),%rcx\n  68:\t48 8d 85 90 fe ff ff \tlea    -0x170(%rbp),%rax\n  6f:\t48 89 ce             \tmov    %rcx,%rsi\n  72:\t48 89 c7             \tmov    %rax,%rdi\n  75:\te8 00 00 00 00       \tcallq  7a <t_envhash+0x7a>\n  7a:\t48 83 45 f8 08       \taddq   $0x8,-0x8(%rbp)\n  7f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  83:\t48 8b 00             \tmov    (%rax),%rax\n  86:\t48 85 c0             \ttest   %rax,%rax\n  89:\t75 a3                \tjne    2e <t_envhash+0x2e>\n  8b:\t48 8d 95 90 fe ff ff \tlea    -0x170(%rbp),%rdx\n  92:\t48 8b 85 88 fe ff ff \tmov    -0x178(%rbp),%rax\n  99:\t48 89 d6             \tmov    %rdx,%rsi\n  9c:\t48 89 c7             \tmov    %rax,%rdi\n  9f:\te8 00 00 00 00       \tcallq  a4 <t_envhash+0xa4>\n  a4:\t90                   \tnop\n  a5:\tc9                   \tleaveq \n  a6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall t_envhash(__int64 a1) {\n  unsigned int v1;\n  char <span class=\"supfact\">v3</span>[Number];\n  char dest[Number];\n  char **i;\n  SHA1Init(<span class=\"supfact\">v3</span>);\n  for (i = environ; *i; ++i) {\n    strncpy(dest, *i, Number);\n    dest[Number] = Number;\n    v1 = strlen(dest);\n    SHA1Update(<span class=\"supfact\">v3</span>, dest, v1);\n  }\n  return SHA1Final(a1, <span class=\"supfact\">v3</span>);\n}", "code_t": "void __cdecl t_envhash(unsigned __int8 *out) {\n  unsigned int v1;\n  SHA1_CTX <span class=\"supfact\">ctxt</span>;\n  char ebuf[Number];\n  char **ptr;\n  SHA1Init(&<span class=\"supfact\">ctxt</span>);\n  for (ptr = environ; *ptr; ++ptr) {\n    strncpy(ebuf, *ptr, Number);\n    ebuf[Number] = Number;\n    v1 = strlen(ebuf);\n    SHA1Update(&<span class=\"supfact\">ctxt</span>, ebuf, v1);\n  }\n  SHA1Final(out, &<span class=\"supfact\">ctxt</span>);\n}", "var": [{"name": "v3", "type": "struct SHA1_CTX { uint32[5] state; uint32[2] count; unsigned __int8[64] buffer; }", "ref_name": "ctxt", "ref_type": "struct SHA1_CTX { uint32[5] state; uint32[2] count; unsigned __int8[64] buffer; }"}], "body_in_train": true}, {"code_s": "__int64 __fastcall CppUnit TestCase toString[abi:cxx11](__int64 a1,\n                                                        _QWORD *a2) {\n  __int64 v2;\n  __int64 v3;\n  char <span class=\"supfact\">v5</span>[Number];\n  char <span class=\"supfact\">v6</span>[Number];\n  char v7;\n  std type_info *v8;\n  v8 = *(std type_info **)(*a2 - Number L);\n  v2 = CppUnit TestCase name[abi:cxx11]((__int64)a2);\n  std allocator<char> allocator(&v7);\n  v3 = std type_info name(v8);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v6</span>, v3, &v7);\n  std operator+<char>(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>, &unk_221D);\n  std operator+<char>(a1, <span class=\"supfact\">v5</span>, v2);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v5</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v6</span>);\n  std allocator<char> ~allocator(&v7);\n  return a1;\n}", "code_t": "std string *__cdecl CppUnit TestCase\n    toString[abi:cxx11](std string *retstr, CppUnit TestCase *const this) {\n  const std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *v2;\n  const char *v3;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">v5</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">__lhs</span>;\n  char v7;\n  const std type_info *thisClass;\n  thisClass = (const std type_info *)*((_QWORD *)this->_vptr_Test - Number);\n  v2 = CppUnit TestCase name[abi:cxx11](this);\n  std allocator<char> allocator(&v7);\n  v3 = std type_info name(thisClass);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(&<span class=\"supfact\">__lhs</span>, v3, &v7);\n  std operator+<char>(&<span class=\"supfact\">v5</span>, &<span class=\"supfact\">__lhs</span>, String);\n  std operator+<char>(retstr, &<span class=\"supfact\">v5</span>, v2);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">v5</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">__lhs</span>);\n  std allocator<char> ~allocator(&v7);\n  return retstr;\n}", "var": [{"name": "v6", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "__lhs", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v5", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "v5", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "waxspin", "repo_name": "FFmpeg", "path": "waxspin/FFmpeg/403b3ecf6af91d898ade5fd8b48b7b3149ae729024aa73a1752164a1cc447aa7", "path_in_repo": "waxspin/FFmpeg//libavformat/network.o", "objdump": "0000000000000428 <ff_accept>:\n     428:\t48 83 ec 28          \tsub    $0x28,%rsp\n     42c:\t89 7c 24 0c          \tmov    %edi,0xc(%rsp)\n     430:\t89 74 24 08          \tmov    %esi,0x8(%rsp)\n     434:\t48 89 14 24          \tmov    %rdx,(%rsp)\n     438:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n     43c:\t89 44 24 14          \tmov    %eax,0x14(%rsp)\n     440:\t66 c7 44 24 18 01 00 \tmovw   $0x1,0x18(%rsp)\n     447:\t66 c7 44 24 1a 00 00 \tmovw   $0x0,0x1a(%rsp)\n     44e:\t48 8b 04 24          \tmov    (%rsp),%rax\n     452:\t48 8d 48 30          \tlea    0x30(%rax),%rcx\n     456:\t8b 54 24 08          \tmov    0x8(%rsp),%edx\n     45a:\t48 8d 44 24 14       \tlea    0x14(%rsp),%rax\n     45f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     464:\t48 89 c7             \tmov    %rax,%rdi\n     467:\te8 9f fd ff ff       \tcallq  20b <ff_poll_interrupt>\n     46c:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n     470:\t83 7c 24 1c 00       \tcmpl   $0x0,0x1c(%rsp)\n     475:\t79 06                \tjns    47d <ff_accept+0x55>\n     477:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     47b:\teb 5c                \tjmp    4d9 <ff_accept+0xb1>\n     47d:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n     481:\tba 00 00 00 00       \tmov    $0x0,%edx\n     486:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     48b:\t89 c7                \tmov    %eax,%edi\n     48d:\te8 00 00 00 00       \tcallq  492 <ff_accept+0x6a>\n     492:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n     496:\t83 7c 24 1c 00       \tcmpl   $0x0,0x1c(%rsp)\n     49b:\t79 0b                \tjns    4a8 <ff_accept+0x80>\n     49d:\te8 00 00 00 00       \tcallq  4a2 <ff_accept+0x7a>\n     4a2:\t8b 00                \tmov    (%rax),%eax\n     4a4:\tf7 d8                \tneg    %eax\n     4a6:\teb 31                \tjmp    4d9 <ff_accept+0xb1>\n     4a8:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     4ac:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     4b1:\t89 c7                \tmov    %eax,%edi\n     4b3:\te8 00 00 00 00       \tcallq  4b8 <ff_accept+0x90>\n     4b8:\t85 c0                \ttest   %eax,%eax\n     4ba:\t79 19                \tjns    4d5 <ff_accept+0xad>\n     4bc:\tba 00 00 00 00       \tmov    $0x0,%edx\n     4c1:\tbe 30 00 00 00       \tmov    $0x30,%esi\n     4c6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     4cb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     4d0:\te8 00 00 00 00       \tcallq  4d5 <ff_accept+0xad>\n     4d5:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     4d9:\t48 83 c4 28          \tadd    $0x28,%rsp\n     4dd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ff_accept(int a1, int a2, __int64 a3) {\n  struct pollfd <span class=\"supfact\">v4</span>;\n  unsigned int v5;\n  <span class=\"supfact\">v4</span>.fd = a1;\n  <span class=\"supfact\">v4</span>.events = Number;\n  <span class=\"supfact\">v4</span>.revents = Number;\n  v5 = ff_poll_interrupt(&<span class=\"supfact\">v4</span>, Number, a2, a3 + Number);\n  if ((v5 & Number) != Number)\n    return v5;\n  v5 = accept(a1, Number L, Number L);\n  if ((v5 & Number) != Number)\n    return (unsigned int)-*_errno_location();\n  if ((int)ff_socket_nonblock(v5, Number L) < Number)\n    av_log(Number L, Number L, String);\n  return v5;\n}", "code_t": "int __cdecl ff_accept(int fd, int timeout, URLContext_0 *h) {\n  pollfd <span class=\"supfact\">lp</span>;\n  int ret;\n  <span class=\"supfact\">lp</span>.fd = fd;\n  <span class=\"supfact\">lp</span>.events = Number;\n  <span class=\"supfact\">lp</span>.revents = Number;\n  ret = ff_poll_interrupt(&<span class=\"supfact\">lp</span>, Number, timeout,\n                          &h->interrupt_callback);\n  if (ret < Number)\n    return ret;\n  ret = accept(fd, Number L, Number L);\n  if (ret < Number)\n    return -*_errno_location();\n  if ((int)ff_socket_nonblock((unsigned int)ret, Number L) < Number)\n    av_log(Number L, Number L, String);\n  return ret;\n}", "var": [{"name": "v4", "type": "struct pollfd { int fd; __int16 events; __int16 revents; }", "ref_name": "lp", "ref_type": "struct pollfd { int fd; __int16 events; __int16 revents; }"}], "body_in_train": true}, {"repo_owner": "greguu", "repo_name": "linux-4.14.18-c3x00", "path": "greguu/linux-4.14.18-c3x00/45ff5563159ea896cdc2e057fad76d8a729406f27ab115d4684886f244d25df6", "path_in_repo": "greguu/linux-4.14.18-c3x00/tools/perf/util/header.o", "objdump": "00000000000054c5 <process_pmu_mappings>:\n    54c5:\t55                   \tpush   %rbp\n    54c6:\t48 89 e5             \tmov    %rsp,%rbp\n    54c9:\t53                   \tpush   %rbx\n    54ca:\t48 83 ec 48          \tsub    $0x48,%rsp\n    54ce:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    54d2:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    54d6:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    54dd:\t00 00 \n    54df:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    54e3:\t31 c0                \txor    %eax,%eax\n    54e5:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    54e9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    54ed:\t48 89 d6             \tmov    %rdx,%rsi\n    54f0:\t48 89 c7             \tmov    %rax,%rdi\n    54f3:\te8 a5 b4 ff ff       \tcallq  99d <do_read_u32>\n    54f8:\t85 c0                \ttest   %eax,%eax\n    54fa:\t74 0a                \tje     5506 <process_pmu_mappings+0x41>\n    54fc:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    5501:\te9 5b 01 00 00       \tjmpq   5661 <process_pmu_mappings+0x19c>\n    5506:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    5509:\t85 c0                \ttest   %eax,%eax\n    550b:\t75 26                \tjne    5533 <process_pmu_mappings+0x6e>\n    550d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 5513 <process_pmu_mappings+0x4e>\n    5513:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5518:\t89 c6                \tmov    %eax,%esi\n    551a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    551f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5524:\te8 00 00 00 00       \tcallq  5529 <process_pmu_mappings+0x64>\n    5529:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    552e:\te9 2e 01 00 00       \tjmpq   5661 <process_pmu_mappings+0x19c>\n    5533:\t8b 55 c0             \tmov    -0x40(%rbp),%edx\n    5536:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    553a:\t48 8b 00             \tmov    (%rax),%rax\n    553d:\t89 90 94 00 00 00    \tmov    %edx,0x94(%rax)\n    5543:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    5547:\tbe 80 00 00 00       \tmov    $0x80,%esi\n    554c:\t48 89 c7             \tmov    %rax,%rdi\n    554f:\te8 00 00 00 00       \tcallq  5554 <process_pmu_mappings+0x8f>\n    5554:\t85 c0                \ttest   %eax,%eax\n    5556:\t0f 89 b9 00 00 00    \tjns    5615 <process_pmu_mappings+0x150>\n    555c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    5561:\te9 fb 00 00 00       \tjmpq   5661 <process_pmu_mappings+0x19c>\n    5566:\t48 8d 55 c4          \tlea    -0x3c(%rbp),%rdx\n    556a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    556e:\t48 89 d6             \tmov    %rdx,%rsi\n    5571:\t48 89 c7             \tmov    %rax,%rdi\n    5574:\te8 24 b4 ff ff       \tcallq  99d <do_read_u32>\n    5579:\t85 c0                \ttest   %eax,%eax\n    557b:\t0f 85 c5 00 00 00    \tjne    5646 <process_pmu_mappings+0x181>\n    5581:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5585:\t48 89 c7             \tmov    %rax,%rdi\n    5588:\te8 17 b5 ff ff       \tcallq  aa4 <do_read_string>\n    558d:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    5591:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    5596:\t0f 84 ad 00 00 00    \tje     5649 <process_pmu_mappings+0x184>\n    559c:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    559f:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n    55a3:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    55a7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    55ac:\t48 89 c7             \tmov    %rax,%rdi\n    55af:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    55b4:\te8 00 00 00 00       \tcallq  55b9 <process_pmu_mappings+0xf4>\n    55b9:\t85 c0                \ttest   %eax,%eax\n    55bb:\t0f 88 8b 00 00 00    \tjs     564c <process_pmu_mappings+0x187>\n    55c1:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    55c5:\tba 01 00 00 00       \tmov    $0x1,%edx\n    55ca:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    55cf:\t48 89 c7             \tmov    %rax,%rdi\n    55d2:\te8 00 00 00 00       \tcallq  55d7 <process_pmu_mappings+0x112>\n    55d7:\t85 c0                \ttest   %eax,%eax\n    55d9:\t78 74                \tjs     564f <process_pmu_mappings+0x18a>\n    55db:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    55df:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    55e4:\t48 89 c7             \tmov    %rax,%rdi\n    55e7:\te8 00 00 00 00       \tcallq  55ec <process_pmu_mappings+0x127>\n    55ec:\t85 c0                \ttest   %eax,%eax\n    55ee:\t75 10                \tjne    5600 <process_pmu_mappings+0x13b>\n    55f0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    55f4:\t48 8b 00             \tmov    (%rax),%rax\n    55f7:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    55fa:\t89 90 80 00 00 00    \tmov    %edx,0x80(%rax)\n    5600:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    5604:\t48 89 c7             \tmov    %rax,%rdi\n    5607:\te8 00 00 00 00       \tcallq  560c <process_pmu_mappings+0x147>\n    560c:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    560f:\t83 e8 01             \tsub    $0x1,%eax\n    5612:\t89 45 c0             \tmov    %eax,-0x40(%rbp)\n    5615:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    5618:\t85 c0                \ttest   %eax,%eax\n    561a:\t0f 85 46 ff ff ff    \tjne    5566 <process_pmu_mappings+0xa1>\n    5620:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5624:\t48 8b 18             \tmov    (%rax),%rbx\n    5627:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    562b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5630:\t48 89 c7             \tmov    %rax,%rdi\n    5633:\te8 00 00 00 00       \tcallq  5638 <process_pmu_mappings+0x173>\n    5638:\t48 89 83 c0 00 00 00 \tmov    %rax,0xc0(%rbx)\n    563f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5644:\teb 1b                \tjmp    5661 <process_pmu_mappings+0x19c>\n    5646:\t90                   \tnop\n    5647:\teb 07                \tjmp    5650 <process_pmu_mappings+0x18b>\n    5649:\t90                   \tnop\n    564a:\teb 04                \tjmp    5650 <process_pmu_mappings+0x18b>\n    564c:\t90                   \tnop\n    564d:\teb 01                \tjmp    5650 <process_pmu_mappings+0x18b>\n    564f:\t90                   \tnop\n    5650:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    5654:\t48 89 c7             \tmov    %rax,%rdi\n    5657:\te8 00 00 00 00       \tcallq  565c <process_pmu_mappings+0x197>\n    565c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    5661:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    5665:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n    566c:\t00 00 \n    566e:\t74 05                \tje     5675 <process_pmu_mappings+0x1b0>\n    5670:\te8 00 00 00 00       \tcallq  5675 <process_pmu_mappings+0x1b0>\n    5675:\t48 83 c4 48          \tadd    $0x48,%rsp\n    5679:\t5b                   \tpop    %rbx\n    567a:\t5d                   \tpop    %rbp\n    567b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall process_pmu_mappings(_QWORD *a1) {\n  __int64 result;\n  __int64 v2;\n  int v3;\n  unsigned int v4;\n  char *s1;\n  char <span class=\"supfact\">v6</span>[Number];\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  if ((unsigned int)do_read_u32(a1, &v3))\n    return Number;\n  if (v3) {\n    *(_DWORD *)(*a1 + Number L) = v3;\n    if ((int)strbuf_init(<span class=\"supfact\">v6</span>, Number L) >= Number) {\n      while (Number) {\n        if (!v3) {\n          v2 = *a1;\n          *(_QWORD *)(v2 + Number) =\n              strbuf_detach(<span class=\"supfact\">v6</span>, Number L);\n          return Number L;\n        }\n        if ((unsigned int)do_read_u32(a1, &v4))\n          break;\n        s1 = (char *)do_read_string(a1);\n        if (!s1 ||\n            (int)strbuf_addf(<span class=\"supfact\">v6</span>, String, v4, s1) < Number ||\n            (int)strbuf_add(<span class=\"supfact\">v6</span>, &unk_99B8, Number L) < Number)\n          break;\n        if (!strcmp(s1, String))\n          *(_DWORD *)(*a1 + Number L) = v4;\n        free(s1);\n        --v3;\n      }\n      strbuf_release(<span class=\"supfact\">v6</span>);\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else {\n    eprintf(Number L, verbose, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl process_pmu_mappings(feat_fd *ff, void *data) {\n  int result;\n  perf_header *v3;\n  u32 pmu_num;\n  u32 type;\n  char *name;\n  strbuf <span class=\"supfact\">sb</span>;\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  if (do_read_u32(ff, &pmu_num))\n    return Number;\n  if (pmu_num) {\n    ff->ph->env.nr_pmu_mappings = pmu_num;\n    if ((int)strbuf_init(&<span class=\"supfact\">sb</span>, Number L) >= Number) {\n      while (Number) {\n        if (!pmu_num) {\n          v3 = ff->ph;\n          v3->env.pmu_mappings =\n              (char *)strbuf_detach(&<span class=\"supfact\">sb</span>, Number L);\n          return Number;\n        }\n        if (do_read_u32(ff, &type))\n          break;\n        name = do_read_string(ff);\n        if (!name ||\n            (int)strbuf_addf(&<span class=\"supfact\">sb</span>, String, type, name) <\n                Number ||\n            (int)strbuf_add(&<span class=\"supfact\">sb</span>, &unk_99B8, Number L) < Number)\n          break;\n        if (!strcmp(name, String))\n          ff->ph->env.msr_pmu_type = type;\n        free(name);\n        --pmu_num;\n      }\n      strbuf_release(&<span class=\"supfact\">sb</span>);\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else {\n    eprintf(Number L, verbose, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "ref_name": "sb", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": true}, {"repo_owner": "rayl", "repo_name": "MLT", "path": "rayl/MLT/f546387a4431b672c46d74f296d0cbba0a73c07fffd7a7845c6832f0c6dc4090", "path_in_repo": "rayl/MLT/src/tests/io.o", "objdump": "0000000000000453 <term_read>:\n 453:\t48 81 ec a8 00 00 00 \tsub    $0xa8,%rsp\n 45a:\tc7 84 24 9c 00 00 00 \tmovl   $0x1,0x9c(%rsp)\n 461:\t01 00 00 00 \n 465:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 46a:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n 46f:\t48 89 e2             \tmov    %rsp,%rdx\n 472:\t48 89 d7             \tmov    %rdx,%rdi\n 475:\tfc                   \tcld    \n 476:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n 479:\t89 f8                \tmov    %edi,%eax\n 47b:\t89 ca                \tmov    %ecx,%edx\n 47d:\t89 94 24 98 00 00 00 \tmov    %edx,0x98(%rsp)\n 484:\t89 84 24 94 00 00 00 \tmov    %eax,0x94(%rsp)\n 48b:\t48 8b 04 24          \tmov    (%rsp),%rax\n 48f:\t48 83 c8 01          \tor     $0x1,%rax\n 493:\t48 89 04 24          \tmov    %rax,(%rsp)\n 497:\t48 c7 84 24 80 00 00 \tmovq   $0x0,0x80(%rsp)\n 49e:\t00 00 00 00 00 \n 4a3:\t48 c7 84 24 88 00 00 \tmovq   $0xfa,0x88(%rsp)\n 4aa:\t00 fa 00 00 00 \n 4af:\t48 8d 94 24 80 00 00 \tlea    0x80(%rsp),%rdx\n 4b6:\t00 \n 4b7:\t48 89 e0             \tmov    %rsp,%rax\n 4ba:\t49 89 d0             \tmov    %rdx,%r8\n 4bd:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 4c2:\tba 00 00 00 00       \tmov    $0x0,%edx\n 4c7:\t48 89 c6             \tmov    %rax,%rsi\n 4ca:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 4cf:\te8 00 00 00 00       \tcallq  4d4 <term_read+0x81>\n 4d4:\t89 84 24 9c 00 00 00 \tmov    %eax,0x9c(%rsp)\n 4db:\t83 bc 24 9c 00 00 00 \tcmpl   $0x0,0x9c(%rsp)\n 4e2:\t00 \n 4e3:\t7e 50                \tjle    535 <term_read+0xe2>\n 4e5:\t48 8d 84 24 93 00 00 \tlea    0x93(%rsp),%rax\n 4ec:\t00 \n 4ed:\tba 01 00 00 00       \tmov    $0x1,%edx\n 4f2:\t48 89 c6             \tmov    %rax,%rsi\n 4f5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 4fa:\te8 00 00 00 00       \tcallq  4ff <term_read+0xac>\n 4ff:\t89 84 24 9c 00 00 00 \tmov    %eax,0x9c(%rsp)\n 506:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 50b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 510:\te8 00 00 00 00       \tcallq  515 <term_read+0xc2>\n 515:\t83 bc 24 9c 00 00 00 \tcmpl   $0x1,0x9c(%rsp)\n 51c:\t01 \n 51d:\t75 0d                \tjne    52c <term_read+0xd9>\n 51f:\t0f b6 84 24 93 00 00 \tmovzbl 0x93(%rsp),%eax\n 526:\t00 \n 527:\t0f b6 c0             \tmovzbl %al,%eax\n 52a:\teb 0e                \tjmp    53a <term_read+0xe7>\n 52c:\t8b 84 24 9c 00 00 00 \tmov    0x9c(%rsp),%eax\n 533:\teb 05                \tjmp    53a <term_read+0xe7>\n 535:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 53a:\t48 81 c4 a8 00 00 00 \tadd    $0xa8,%rsp\n 541:\tc3                   \tretq   ", "code_s": "__int64 term_read() {\n  __int64 result;\n  fd_set <span class=\"supfact\">v1</span>;\n  struct timeval <span class=\"supfact\">timeout</span>;\n  unsigned __int8 buf;\n  unsigned int v4;\n  int v5;\n  unsigned int v6;\n  v6 = Number;\n  memset(&<span class=\"supfact\">v1</span>, Number, sizeof(<span class=\"supfact\">v1</span>));\n  v5 = Number;\n  v4 = (unsigned int)&<span class=\"supfact\">timeout</span>;\n  <span class=\"supfact\">v1</span>.fds_bits[Number] |= Number;\n  <span class=\"supfact\">timeout</span>.tv_sec = Number L;\n  <span class=\"supfact\">timeout</span>.tv_usec = Number L;\n  v6 = select(Number, &<span class=\"supfact\">v1</span>, Number L, Number L,\n              &<span class=\"supfact\">timeout</span>);\n  if ((int)v6 <= Number)\n    return Number;\n  v6 = read(Number, &buf, Number);\n  tcflush(Number, Number);\n  if (v6 == Number)\n    result = buf;\n  else\n    result = v6;\n  return result;\n}", "code_t": "int __cdecl term_read() {\n  int result;\n  fd_set <span class=\"supfact\">rfds</span>;\n  timeval <span class=\"supfact\">tv</span>;\n  unsigned __int8 ch_0;\n  int __d1;\n  int __d0;\n  int n;\n  n = Number;\n  memset(&<span class=\"supfact\">rfds</span>, Number, sizeof(<span class=\"supfact\">rfds</span>));\n  __d0 = Number;\n  __d1 = (unsigned int)&<span class=\"supfact\">tv</span>;\n  <span class=\"supfact\">rfds</span>.__fds_bits[Number] |= Number;\n  <span class=\"supfact\">tv</span>.tv_sec = Number L;\n  <span class=\"supfact\">tv</span>.tv_usec = Number L;\n  n = select(Number, &<span class=\"supfact\">rfds</span>, Number L, Number L,\n             &<span class=\"supfact\">tv</span>);\n  if (n <= Number)\n    return Number;\n  n = read(Number, &ch_0, Number);\n  tcflush(Number, Number);\n  if (n == Number)\n    result = ch_0;\n  else\n    result = n;\n  return result;\n}", "var": [{"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v1", "type": "struct fd_set { __fd_mask[16] fds_bits; }", "ref_name": "rfds", "ref_type": "struct fd_set { __fd_mask[16] __fds_bits; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "0000000000002a5a <_nocheck__trace_megasas_handle_dcmd>:\n    2a5a:\t55                   \tpush   %rbp\n    2a5b:\t48 89 e5             \tmov    %rsp,%rbp\n    2a5e:\t41 54                \tpush   %r12\n    2a60:\t53                   \tpush   %rbx\n    2a61:\t48 83 ec 30          \tsub    $0x30,%rsp\n    2a65:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    2a68:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    2a6b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2a72:\t00 00 \n    2a74:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2a78:\t31 c0                \txor    %eax,%eax\n    2a7a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2a80 <_nocheck__trace_megasas_handle_dcmd+0x26>\n    2a80:\t85 c0                \ttest   %eax,%eax\n    2a82:\t0f 95 c0             \tsetne  %al\n    2a85:\t0f b6 c0             \tmovzbl %al,%eax\n    2a88:\t48 85 c0             \ttest   %rax,%rax\n    2a8b:\t74 63                \tje     2af0 <_nocheck__trace_megasas_handle_dcmd+0x96>\n    2a8d:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 2a94 <_nocheck__trace_megasas_handle_dcmd+0x3a>\n    2a94:\t66 85 c0             \ttest   %ax,%ax\n    2a97:\t74 57                \tje     2af0 <_nocheck__trace_megasas_handle_dcmd+0x96>\n    2a99:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    2a9e:\te8 8a dd ff ff       \tcallq  82d <qemu_loglevel_mask>\n    2aa3:\t84 c0                \ttest   %al,%al\n    2aa5:\t74 49                \tje     2af0 <_nocheck__trace_megasas_handle_dcmd+0x96>\n    2aa7:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    2aab:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2ab0:\t48 89 c7             \tmov    %rax,%rdi\n    2ab3:\te8 00 00 00 00       \tcallq  2ab8 <_nocheck__trace_megasas_handle_dcmd+0x5e>\n    2ab8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2abc:\t49 89 c4             \tmov    %rax,%r12\n    2abf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2ac3:\t48 89 c3             \tmov    %rax,%rbx\n    2ac6:\te8 00 00 00 00       \tcallq  2acb <_nocheck__trace_megasas_handle_dcmd+0x71>\n    2acb:\t8b 4d c8             \tmov    -0x38(%rbp),%ecx\n    2ace:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    2ad1:\t41 89 c9             \tmov    %ecx,%r9d\n    2ad4:\t41 89 d0             \tmov    %edx,%r8d\n    2ad7:\t4c 89 e1             \tmov    %r12,%rcx\n    2ada:\t48 89 da             \tmov    %rbx,%rdx\n    2add:\t89 c6                \tmov    %eax,%esi\n    2adf:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2ae6 <_nocheck__trace_megasas_handle_dcmd+0x8c>\n    2ae6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2aeb:\te8 00 00 00 00       \tcallq  2af0 <_nocheck__trace_megasas_handle_dcmd+0x96>\n    2af0:\t90                   \tnop\n    2af1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2af5:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    2afc:\t00 00 \n    2afe:\t74 05                \tje     2b05 <_nocheck__trace_megasas_handle_dcmd+0xab>\n    2b00:\te8 00 00 00 00       \tcallq  2b05 <_nocheck__trace_megasas_handle_dcmd+0xab>\n    2b05:\t48 83 c4 30          \tadd    $0x30,%rsp\n    2b09:\t5b                   \tpop    %rbx\n    2b0a:\t41 5c                \tpop    %r12\n    2b0c:\t5d                   \tpop    %rbp\n    2b0d:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_handle_dcmd(\n    unsigned int a1, unsigned int a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_HANDLE_DCMD_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v2 = <span class=\"supfact\">tv</span>.tv_usec;\n    v3 = <span class=\"supfact\">tv</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, a1, a2);\n  }\n  return __readfsqword(Number) ^ v7;\n}", "code_t": "void __cdecl nocheck__trace_megasas_handle_dcmd(int cmd, int opcode) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_HANDLE_DCMD_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v2 = <span class=\"supfact\">_now</span>.tv_usec;\n    v3 = <span class=\"supfact\">_now</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, (unsigned int)cmd, (unsigned int)opcode);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "jrc2139", "repo_name": "Ninja-Kernel", "path": "jrc2139/Ninja-Kernel/b9a8c5c80e5a9cfa9fe35ff5a4e290717ccd729241605d1070cd4ae2db775509", "path_in_repo": "jrc2139/Ninja-Kernel/tools/perf/ui/tui/util.o", "objdump": "0000000000000167 <ui__popup_menu>:\n 167:\t55                   \tpush   %rbp\n 168:\t48 89 e5             \tmov    %rsp,%rbp\n 16b:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n 172:\t89 bd 7c ff ff ff    \tmov    %edi,-0x84(%rbp)\n 178:\t48 89 b5 70 ff ff ff \tmov    %rsi,-0x90(%rbp)\n 17f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 186:\t00 00 \n 188:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 18c:\t31 c0                \txor    %eax,%eax\n 18e:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n 192:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 197:\tb9 0e 00 00 00       \tmov    $0xe,%ecx\n 19c:\t48 89 d7             \tmov    %rdx,%rdi\n 19f:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n 1a2:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 1a9:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n 1ad:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n 1b4:\t00 \n 1b5:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n 1bc:\t00 \n 1bd:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n 1c4:\t00 \n 1c5:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n 1cb:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n 1ce:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 1d2:\t48 89 c7             \tmov    %rax,%rdi\n 1d5:\te8 b7 fe ff ff       \tcallq  91 <popup_menu__run>\n 1da:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n 1de:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n 1e5:\t00 00 \n 1e7:\t74 05                \tje     1ee <ui__popup_menu+0x87>\n 1e9:\te8 00 00 00 00       \tcallq  1ee <ui__popup_menu+0x87>\n 1ee:\tc9                   \tleaveq \n 1ef:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ui__popup_menu(int a1, __int64 a2) {\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  <span class=\"supfact\">v3</span>[Number] = __readfsqword(Number);\n  memset(<span class=\"supfact\">v3</span>, Number, Number);\n  <span class=\"supfact\">v3</span>[Number] = a2;\n  <span class=\"supfact\">v3</span>[Number] = (__int64)&ui_browser__argv_refresh;\n  <span class=\"supfact\">v3</span>[Number] = (__int64)ui_browser__argv_write;\n  <span class=\"supfact\">v3</span>[Number] = (__int64)&ui_browser__argv_seek;\n  LODWORD(<span class=\"supfact\">v3</span>[Number]) = a1;\n  return popup_menu__run(<span class=\"supfact\">v3</span>);\n}", "code_t": "int __cdecl ui__popup_menu(int argc, char *const *argv) {\n  ui_browser <span class=\"supfact\">menu</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  memset(&<span class=\"supfact\">menu</span>, Number, sizeof(<span class=\"supfact\">menu</span>));\n  <span class=\"supfact\">menu</span>.entries = (void *)argv;\n  <span class=\"supfact\">menu</span>.refresh =\n      (unsigned int (*)(ui_browser *)) & ui_browser__argv_refresh;\n  <span class=\"supfact\">menu</span>.write =\n      (void (*)(ui_browser *, void *, int))ui_browser__argv_write;\n  <span class=\"supfact\">menu</span>.seek =\n      (void (*)(ui_browser *, off_t, int)) & ui_browser__argv_seek;\n  <span class=\"supfact\">menu</span>.nr_entries = argc;\n  return popup_menu__run(&<span class=\"supfact\">menu</span>);\n}", "var": [{"name": "v3", "type": "struct ui_browser { u64 index; u64 top_idx; void * top; void * entries; u16 y; u16 x; u16 width; u16 height; void * priv; const char * title; char * helpline; unsigned int (*)(ui_browser *) refresh; void (*)(ui_browser *, void *, int) write; void (*)(ui_browser *, off_t, int) seek; bool (*)(ui_browser *, void *) filter; u32 nr_entries; bool navkeypressed; bool use_navkeypressed; PADDING (2); }", "ref_name": "menu", "ref_type": "struct ui_browser { u64 index; u64 top_idx; void * top; void * entries; u16 y; u16 x; u16 width; u16 height; int current_color; PADDING (4); void * priv; const char * title; char * helpline; unsigned int (*)(ui_browser *) refresh; void (*)(ui_browser *, void *, int) write; void (*)(ui_browser *, off_t, int) seek; bool (*)(ui_browser *, void *) filter; u32 nr_entries; bool navkeypressed; bool use_navkeypressed; PADDING (2); }"}], "body_in_train": true}, {"repo_owner": "wgrzelczak", "repo_name": "nyngine", "path": "wgrzelczak/nyngine/3351c7f1f40e579d7374dfb98d3c24b0de0fbd82abb7b1851df72fa073edbf1c", "path_in_repo": "wgrzelczak/nyngine/External/imgui/examples/example_glfw_opengl2/imgui_demo.o", "objdump": "000000000000dea4 <_ZZL31ShowExampleAppConstrainedResizePbEN17CustomConstraints4StepEP21ImGuiSizeCallbackData>:\n    dea4:\t55                   \tpush   %rbp\n    dea5:\t48 89 e5             \tmov    %rsp,%rbp\n    dea8:\t48 83 ec 20          \tsub    $0x20,%rsp\n    deac:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    deb0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    deb4:\t48 8b 00             \tmov    (%rax),%rax\n    deb7:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    debb:\tf3 0f 11 45 fc       \tmovss  %xmm0,-0x4(%rbp)\n    dec0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    dec4:\tf3 0f 10 40 1c       \tmovss  0x1c(%rax),%xmm0\n    dec9:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n    decc:\tf3 0f 5e 4d fc       \tdivss  -0x4(%rbp),%xmm1\n    ded1:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # ded9 <_ZZL31ShowExampleAppConstrainedResizePbEN17CustomConstraints4StepEP21ImGuiSizeCallbackData+0x35>\n    ded8:\t00 \n    ded9:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n    dedd:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n    dee1:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    dee5:\t0f 28 d0             \tmovaps %xmm0,%xmm2\n    dee8:\tf3 0f 59 55 fc       \tmulss  -0x4(%rbp),%xmm2\n    deed:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    def1:\tf3 0f 10 40 18       \tmovss  0x18(%rax),%xmm0\n    def6:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n    def9:\tf3 0f 5e 4d fc       \tdivss  -0x4(%rbp),%xmm1\n    defe:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # df06 <_ZZL31ShowExampleAppConstrainedResizePbEN17CustomConstraints4StepEP21ImGuiSizeCallbackData+0x62>\n    df05:\t00 \n    df06:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n    df0a:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n    df0e:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    df12:\tf3 0f 59 45 fc       \tmulss  -0x4(%rbp),%xmm0\n    df17:\t48 8d 45 f4          \tlea    -0xc(%rbp),%rax\n    df1b:\t0f 28 ca             \tmovaps %xmm2,%xmm1\n    df1e:\t48 89 c7             \tmov    %rax,%rdi\n    df21:\te8 00 00 00 00       \tcallq  df26 <_ZZL31ShowExampleAppConstrainedResizePbEN17CustomConstraints4StepEP21ImGuiSizeCallbackData+0x82>\n    df26:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    df2a:\t48 8b 55 f4          \tmov    -0xc(%rbp),%rdx\n    df2e:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    df32:\t90                   \tnop\n    df33:\tc9                   \tleaveq \n    df34:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ShowExampleAppConstrainedResize(bool *) CustomConstraints\n    Step(__int64 a1) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v2</span>;\n  float v3;\n  v3 = (float)(int)*(_QWORD *)a1;\n  ImVec2 ImVec2(\n      (ImVec2 *)&<span class=\"supfact\">v2</span>,\n      (float)(int)(float)((float)(*(float *)(a1 + Number) / v3) + Number) * v3,\n      (float)(int)(float)((float)(*(float *)(a1 + Number) / v3) + Number) * v3);\n  result = a1;\n  *(_QWORD *)(a1 + Number) = <span class=\"supfact\">v2</span>;\n  return result;\n}", "code_t": "void __cdecl ShowExampleAppConstrainedResize(bool *) CustomConstraints\n    Step(ImGuiSizeCallbackData *data) {\n  ImVec2 <span class=\"supfact\">v1</span>;\n  float step;\n  step = (float)(int)data->UserData;\n  ImVec2 ImVec2(\n      &<span class=\"supfact\">v1</span>,\n      (float)(int)(float)((float)(data->DesiredSize.x / step) + Number) * step,\n      (float)(int)(float)((float)(data->DesiredSize.y / step) + Number) * step);\n  data->DesiredSize = <span class=\"supfact\">v1</span>;\n}", "var": [{"name": "v2", "type": "struct ImVec2 { float x; float y; }", "ref_name": "v1", "ref_type": "struct ImVec2 { float x; float y; }"}], "body_in_train": true}, {"repo_owner": "RinnyBulkin043", "repo_name": "lineageos_kernel_lenovo_a5000_nougat", "path": "RinnyBulkin043/lineageos_kernel_lenovo_a5000_nougat/9d4779239f127aa9d1f3755828af4514b272f6288c377434fab6c3adb57b8f19", "path_in_repo": "RinnyBulkin043/lineageos_kernel_lenovo_a5000_nougat/tools/perf/util/pager.o", "objdump": "0000000000000000 <pager_preexec>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n   b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  12:\t00 00 \n  14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  18:\t31 c0                \txor    %eax,%eax\n  1a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  1f:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  24:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  2b:\t48 89 d7             \tmov    %rdx,%rdi\n  2e:\tfc                   \tcld    \n  2f:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  32:\t89 f8                \tmov    %edi,%eax\n  34:\t89 ca                \tmov    %ecx,%edx\n  36:\t89 95 68 ff ff ff    \tmov    %edx,-0x98(%rbp)\n  3c:\t89 85 6c ff ff ff    \tmov    %eax,-0x94(%rbp)\n  42:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n  49:\t48 83 c8 01          \tor     $0x1,%rax\n  4d:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n  54:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  5b:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  62:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  68:\t48 89 d1             \tmov    %rdx,%rcx\n  6b:\tba 00 00 00 00       \tmov    $0x0,%edx\n  70:\t48 89 c6             \tmov    %rax,%rsi\n  73:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  78:\te8 00 00 00 00       \tcallq  7d <pager_preexec+0x7d>\n  7d:\tba 00 00 00 00       \tmov    $0x0,%edx\n  82:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  87:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  8c:\te8 00 00 00 00       \tcallq  91 <pager_preexec+0x91>\n  91:\t90                   \tnop\n  92:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  96:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n  9d:\t00 00 \n  9f:\t74 05                \tje     a6 <pager_preexec+0xa6>\n  a1:\te8 00 00 00 00       \tcallq  a6 <pager_preexec+0xa6>\n  a6:\tc9                   \tleaveq \n  a7:\tc3                   \tretq   ", "code_s": "unsigned __int64 pager_preexec() {\n  fd_set <span class=\"supfact\">readfds</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  memset(&<span class=\"supfact\">readfds</span>, Number, sizeof(<span class=\"supfact\">readfds</span>));\n  <span class=\"supfact\">readfds</span>.fds_bits[Number] |= Number;\n  select(Number, &<span class=\"supfact\">readfds</span>, Number L, &<span class=\"supfact\">readfds</span>,\n         Number L);\n  setenv(String, String, Number);\n  return __readfsqword(Number) ^ v2;\n}", "code_t": "void __cdecl pager_preexec() {\n  fd_set <span class=\"supfact\">in</span>;\n  unsigned __int64 v1;\n  v1 = __readfsqword(Number);\n  memset(&<span class=\"supfact\">in</span>, Number, sizeof(<span class=\"supfact\">in</span>));\n  <span class=\"supfact\">in</span>.fds_bits[Number] |= Number;\n  select(Number, &<span class=\"supfact\">in</span>, Number L, &<span class=\"supfact\">in</span>, Number L);\n  setenv(String, String, Number);\n}", "var": [{"name": "readfds", "type": "struct fd_set { __fd_mask[16] fds_bits; }", "ref_name": "in", "ref_type": "struct fd_set { __fd_mask[16] fds_bits; }"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/1e1e7cb97ebb80eac8dbb33680b64d176ff61b4eaa68df0fca22659194da5490", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/stateful_proxy", "objdump": "000000000042119c <mod_tsx_layer_stop>:\n  42119c:\t55                   \tpush   %rbp\n  42119d:\t48 89 e5             \tmov    %rsp,%rbp\n  4211a0:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4211a4:\te8 72 f5 03 00       \tcallq  46071b <pj_log_get_level>\n  4211a9:\t83 f8 03             \tcmp    $0x3,%eax\n  4211ac:\t7e 14                \tjle    4211c2 <mod_tsx_layer_stop+0x26>\n  4211ae:\tbe 90 cf 46 00       \tmov    $0x46cf90,%esi\n  4211b3:\tbf 79 cf 46 00       \tmov    $0x46cf79,%edi\n  4211b8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4211bd:\te8 d4 fe 03 00       \tcallq  461096 <pj_log_4>\n  4211c2:\t48 8b 05 f7 8d 06 00 \tmov    0x68df7(%rip),%rax        # 489fc0 <mod_tsx_layer+0x80>\n  4211c9:\t48 89 c7             \tmov    %rax,%rdi\n  4211cc:\te8 9e 90 03 00       \tcallq  45a26f <pj_mutex_lock>\n  4211d1:\t48 8b 05 f0 8d 06 00 \tmov    0x68df0(%rip),%rax        # 489fc8 <mod_tsx_layer+0x88>\n  4211d8:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  4211dc:\t48 89 d6             \tmov    %rdx,%rsi\n  4211df:\t48 89 c7             \tmov    %rax,%rdi\n  4211e2:\te8 c8 d9 03 00       \tcallq  45ebaf <pj_hash_first>\n  4211e7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4211eb:\teb 6c                \tjmp    421259 <mod_tsx_layer_stop+0xbd>\n  4211ed:\t48 8b 05 d4 8d 06 00 \tmov    0x68dd4(%rip),%rax        # 489fc8 <mod_tsx_layer+0x88>\n  4211f4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  4211f8:\t48 89 d6             \tmov    %rdx,%rsi\n  4211fb:\t48 89 c7             \tmov    %rax,%rdi\n  4211fe:\te8 e9 da 03 00       \tcallq  45ecec <pj_hash_this>\n  421203:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  421207:\t48 8b 05 ba 8d 06 00 \tmov    0x68dba(%rip),%rax        # 489fc8 <mod_tsx_layer+0x88>\n  42120e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  421212:\t48 89 d6             \tmov    %rdx,%rsi\n  421215:\t48 89 c7             \tmov    %rax,%rdi\n  421218:\te8 21 da 03 00       \tcallq  45ec3e <pj_hash_next>\n  42121d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  421221:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  421226:\t74 29                \tje     421251 <mod_tsx_layer_stop+0xb5>\n  421228:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  42122c:\tbe f7 01 00 00       \tmov    $0x1f7,%esi\n  421231:\t48 89 c7             \tmov    %rax,%rdi\n  421234:\te8 99 19 00 00       \tcallq  422bd2 <pjsip_tsx_terminate>\n  421239:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  42123d:\t48 89 c7             \tmov    %rax,%rdi\n  421240:\te8 23 fd ff ff       \tcallq  420f68 <mod_tsx_layer_unregister_tsx>\n  421245:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  421249:\t48 89 c7             \tmov    %rax,%rdi\n  42124c:\te8 0b 08 00 00       \tcallq  421a5c <tsx_shutdown>\n  421251:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  421255:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  421259:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  42125e:\t75 8d                \tjne    4211ed <mod_tsx_layer_stop+0x51>\n  421260:\t48 8b 05 59 8d 06 00 \tmov    0x68d59(%rip),%rax        # 489fc0 <mod_tsx_layer+0x80>\n  421267:\t48 89 c7             \tmov    %rax,%rdi\n  42126a:\te8 b9 90 03 00       \tcallq  45a328 <pj_mutex_unlock>\n  42126f:\te8 a7 f4 03 00       \tcallq  46071b <pj_log_get_level>\n  421274:\t83 f8 03             \tcmp    $0x3,%eax\n  421277:\t7e 14                \tjle    42128d <mod_tsx_layer_stop+0xf1>\n  421279:\tbe b8 cf 46 00       \tmov    $0x46cfb8,%esi\n  42127e:\tbf 79 cf 46 00       \tmov    $0x46cf79,%edi\n  421283:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  421288:\te8 09 fe 03 00       \tcallq  461096 <pj_log_4>\n  42128d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  421292:\tc9                   \tleaveq \n  421293:\tc3                   \tretq   ", "code_s": "__int64 mod_tsx_layer_stop() {\n  int v0;\n  int v1;\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  char <span class=\"supfact\">v9</span>[Number];\n  __int64 v10;\n  __int64 v11;\n  __int64 i;\n  if ((int)pj_log_get_level() > Number)\n    pj_log_4((unsigned int)String, (unsigned int)String, v0, v1, v2, v3);\n  pj_mutex_lock(qword_489FC0);\n  for (i = pj_hash_first(qword_489FC8, <span class=\"supfact\">v9</span>); i; i = v10) {\n    v11 = pj_hash_this(qword_489FC8, i);\n    v10 = pj_hash_next(qword_489FC8, i);\n    if (v11) {\n      pjsip_tsx_terminate(v11, Number L);\n      mod_tsx_layer_unregister_tsx(v11);\n      tsx_shutdown(v11);\n    }\n  }\n  pj_mutex_unlock(qword_489FC0);\n  if ((int)pj_log_get_level() > Number)\n    pj_log_4((unsigned int)String, (unsigned int)String, v4, v5, v6, v7);\n  return Number L;\n}", "code_t": "pj_status_t __cdecl mod_tsx_layer_stop() {\n  pj_hash_iterator_t_0 <span class=\"supfact\">it_buf</span>;\n  pj_hash_iterator_t_0 *next;\n  pjsip_transaction_0 *tsx;\n  pj_hash_iterator_t_0 *it;\n  if (pj_log_get_level() > Number)\n    pj_log_4(String, String);\n  pj_mutex_lock(mod_tsx_layer_0.mutex);\n  for (it = pj_hash_first(mod_tsx_layer_0.htable, &<span class=\"supfact\">it_buf</span>); it;\n       it = next) {\n    tsx = (pjsip_transaction_0 *)pj_hash_this(mod_tsx_layer_0.htable, it);\n    next = pj_hash_next(mod_tsx_layer_0.htable, it);\n    if (tsx) {\n      pjsip_tsx_terminate(tsx, Number);\n      mod_tsx_layer_unregister_tsx(tsx);\n      tsx_shutdown(tsx);\n    }\n  }\n  pj_mutex_unlock(mod_tsx_layer_0.mutex);\n  if (pj_log_get_level() > Number)\n    pj_log_4(String, String);\n  return Number;\n}", "var": [{"name": "v9", "type": "struct pj_hash_iterator_t_0 { pj_uint32_t index; PADDING (4); pj_hash_entry_0 * entry; }", "ref_name": "it_buf", "ref_type": "struct pj_hash_iterator_t_0 { pj_uint32_t index; PADDING (4); pj_hash_entry_0 * entry; }"}], "body_in_train": false}, {"repo_owner": "antmicro", "repo_name": "abc-lib", "path": "antmicro/abc-lib/4bf8e0b9641e00d77b7015323f54601e80883c32bec88ff714f1c3c57d54d221", "path_in_repo": "antmicro/abc-lib//src/bool/bdc/bdcDec.o", "objdump": "0000000000000000 <Abc_Clock>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 83 ec 20          \tsub    $0x20,%rsp\n       8:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n       c:\t48 89 c6             \tmov    %rax,%rsi\n       f:\tbf 03 00 00 00       \tmov    $0x3,%edi\n      14:\te8 00 00 00 00       \tcallq  19 <Abc_Clock+0x19>\n      19:\t85 c0                \ttest   %eax,%eax\n      1b:\t79 09                \tjns    26 <Abc_Clock+0x26>\n      1d:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n      24:\teb 3c                \tjmp    62 <Abc_Clock+0x62>\n      26:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n      2a:\t48 69 c0 40 42 0f 00 \timul   $0xf4240,%rax,%rax\n      31:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      35:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n      39:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n      40:\t9b c4 20 \n      43:\t48 89 c8             \tmov    %rcx,%rax\n      46:\t48 f7 ea             \timul   %rdx\n      49:\t48 c1 fa 07          \tsar    $0x7,%rdx\n      4d:\t48 89 c8             \tmov    %rcx,%rax\n      50:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n      54:\t48 29 c2             \tsub    %rax,%rdx\n      57:\t48 89 d0             \tmov    %rdx,%rax\n      5a:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n      5e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      62:\tc9                   \tleaveq \n      63:\tc3                   \tretq   ", "code_s": "__syscall_slong_t Abc_Clock() {\n  __syscall_slong_t result;\n  struct timespec <span class=\"supfact\">tp</span>;\n  if (clock_gettime(Number, &<span class=\"supfact\">tp</span>) >= Number)\n    result = <span class=\"supfact\">tp</span>.tv_nsec / Number +\n             Number * <span class=\"supfact\">tp</span>.tv_sec;\n  else\n    result = Number;\n  return result;\n}", "code_t": "abctime __cdecl Abc_Clock() {\n  abctime result;\n  timespec <span class=\"supfact\">ts</span>;\n  if (clock_gettime(Number, &<span class=\"supfact\">ts</span>) >= Number)\n    result = <span class=\"supfact\">ts</span>.tv_nsec / Number +\n             Number * <span class=\"supfact\">ts</span>.tv_sec;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "iortcw", "repo_name": "iortcw", "path": "iortcw/iortcw/5979dc54a628f0f1fad38c4e5b3c994dbb2505cb39584e5f8bb17cacbdb4c18e", "path_in_repo": "iortcw/iortcw/MP/build/release-linux-x86_64/renderer/truetype.o", "objdump": "0000000000012aaa <Ins_SHZ>:\n   12aaa:\t55                   \tpush   %rbp\n   12aab:\t48 89 e5             \tmov    %rsp,%rbp\n   12aae:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n   12ab2:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n   12ab6:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n   12aba:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n   12abe:\t48 8b 00             \tmov    (%rax),%rax\n   12ac1:\t83 f8 01             \tcmp    $0x1,%eax\n   12ac4:\t76 23                \tjbe    12ae9 <Ins_SHZ+0x3f>\n   12ac6:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12aca:\t0f b6 80 c9 03 00 00 \tmovzbl 0x3c9(%rax),%eax\n   12ad1:\t84 c0                \ttest   %al,%al\n   12ad3:\t0f 84 0a 01 00 00    \tje     12be3 <Ins_SHZ+0x139>\n   12ad9:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12add:\tc7 40 18 86 00 00 00 \tmovl   $0x86,0x18(%rax)\n   12ae4:\te9 fa 00 00 00       \tjmpq   12be3 <Ins_SHZ+0x139>\n   12ae9:\t48 8d 7d ae          \tlea    -0x52(%rbp),%rdi\n   12aed:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n   12af1:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n   12af5:\t48 8d 75 a0          \tlea    -0x60(%rbp),%rsi\n   12af9:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12afd:\t49 89 f8             \tmov    %rdi,%r8\n   12b00:\t48 89 c7             \tmov    %rax,%rdi\n   12b03:\te8 c3 f8 ff ff       \tcallq  123cb <Compute_Point_Displacement>\n   12b08:\t84 c0                \ttest   %al,%al\n   12b0a:\t0f 85 d6 00 00 00    \tjne    12be6 <Ins_SHZ+0x13c>\n   12b10:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12b14:\t0f b7 80 70 02 00 00 \tmovzwl 0x270(%rax),%eax\n   12b1b:\t66 85 c0             \ttest   %ax,%ax\n   12b1e:\t75 11                \tjne    12b31 <Ins_SHZ+0x87>\n   12b20:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12b24:\t0f b7 80 d4 00 00 00 \tmovzwl 0xd4(%rax),%eax\n   12b2b:\t66 89 45 fe          \tmov    %ax,-0x2(%rbp)\n   12b2f:\teb 57                \tjmp    12b88 <Ins_SHZ+0xde>\n   12b31:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12b35:\t0f b7 80 70 02 00 00 \tmovzwl 0x270(%rax),%eax\n   12b3c:\t66 83 f8 01          \tcmp    $0x1,%ax\n   12b40:\t75 40                \tjne    12b82 <Ins_SHZ+0xd8>\n   12b42:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12b46:\t0f b7 80 d6 00 00 00 \tmovzwl 0xd6(%rax),%eax\n   12b4d:\t66 85 c0             \ttest   %ax,%ax\n   12b50:\t7e 30                \tjle    12b82 <Ins_SHZ+0xd8>\n   12b52:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12b56:\t48 8b 90 f8 00 00 00 \tmov    0xf8(%rax),%rdx\n   12b5d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12b61:\t0f b7 80 d6 00 00 00 \tmovzwl 0xd6(%rax),%eax\n   12b68:\t48 0f bf c0          \tmovswq %ax,%rax\n   12b6c:\t48 01 c0             \tadd    %rax,%rax\n   12b6f:\t48 83 e8 02          \tsub    $0x2,%rax\n   12b73:\t48 01 d0             \tadd    %rdx,%rax\n   12b76:\t0f b7 00             \tmovzwl (%rax),%eax\n   12b79:\t83 c0 01             \tadd    $0x1,%eax\n   12b7c:\t66 89 45 fe          \tmov    %ax,-0x2(%rbp)\n   12b80:\teb 06                \tjmp    12b88 <Ins_SHZ+0xde>\n   12b82:\t66 c7 45 fe 00 00    \tmovw   $0x0,-0x2(%rbp)\n   12b88:\t66 c7 45 fc 00 00    \tmovw   $0x0,-0x4(%rbp)\n   12b8e:\teb 47                \tjmp    12bd7 <Ins_SHZ+0x12d>\n   12b90:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n   12b94:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12b98:\t48 8b 80 e0 00 00 00 \tmov    0xe0(%rax),%rax\n   12b9f:\t48 39 c2             \tcmp    %rax,%rdx\n   12ba2:\t75 0a                \tjne    12bae <Ins_SHZ+0x104>\n   12ba4:\t0f b7 45 ae          \tmovzwl -0x52(%rbp),%eax\n   12ba8:\t66 39 45 fc          \tcmp    %ax,-0x4(%rbp)\n   12bac:\t74 1e                \tje     12bcc <Ins_SHZ+0x122>\n   12bae:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n   12bb2:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n   12bb6:\t0f b7 75 fc          \tmovzwl -0x4(%rbp),%esi\n   12bba:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   12bbe:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   12bc4:\t48 89 c7             \tmov    %rax,%rdi\n   12bc7:\te8 71 fa ff ff       \tcallq  1263d <Move_Zp2_Point>\n   12bcc:\t0f b7 45 fc          \tmovzwl -0x4(%rbp),%eax\n   12bd0:\t83 c0 01             \tadd    $0x1,%eax\n   12bd3:\t66 89 45 fc          \tmov    %ax,-0x4(%rbp)\n   12bd7:\t0f b7 45 fc          \tmovzwl -0x4(%rbp),%eax\n   12bdb:\t66 3b 45 fe          \tcmp    -0x2(%rbp),%ax\n   12bdf:\t72 af                \tjb     12b90 <Ins_SHZ+0xe6>\n   12be1:\teb 04                \tjmp    12be7 <Ins_SHZ+0x13d>\n   12be3:\t90                   \tnop\n   12be4:\teb 01                \tjmp    12be7 <Ins_SHZ+0x13d>\n   12be6:\t90                   \tnop\n   12be7:\tc9                   \tleaveq \n   12be8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Ins_SHZ(__int64 a1, _QWORD *a2) {\n  __int64 result;\n  __int64 v3;\n  __int64 v4;\n  unsigned __int16 v5;\n  _QWORD <span class=\"supfact\">v6</span>[Number];\n  unsigned __int16 i;\n  unsigned __int16 v8;\n  if ((unsigned int)*a2 <= Number) {\n    result = Compute_Point_Displacement(a1, &v4, &v3, <span class=\"supfact\">v6</span>, &v5);\n    if (!(_BYTE)result) {\n      if (*(_WORD *)(a1 + Number)) {\n        if (*(_WORD *)(a1 + Number) == Number &&\n            *(__int16 *)(a1 + Number) > Number)\n          v8 = *(_WORD *)(*(_QWORD *)(a1 + Number) +\n                          Number L * *(__int16 *)(a1 + Number) - Number) +\n               Number;\n        else\n          v8 = Number;\n      } else {\n        v8 = *(_WORD *)(a1 + Number);\n      }\n      for (i = Number;; ++i) {\n        result = i;\n        if (i >= v8)\n          break;\n        if (<span class=\"supfact\">v6</span>[Number] != *(_QWORD *)(a1 + Number) || i != v5)\n          Move_Zp2_Point(a1, i, v4, v3, Number);\n      }\n    }\n  } else {\n    result = *(unsigned __int8 *)(a1 + Number);\n    if ((_BYTE)result) {\n      result = a1;\n      *(_DWORD *)(a1 + Number) = Number;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl Ins_SHZ(TT_ExecContext exc, FT_Long *args) {\n  FT_F26Dot6 dy;\n  FT_F26Dot6 dx_0;\n  FT_UShort refp;\n  TT_GlyphZoneRec <span class=\"supfact\">zp</span>;\n  FT_UShort i;\n  FT_UShort limit;\n  if ((unsigned int)*args <= Number) {\n    if (!Compute_Point_Displacement(exc, &dx_0, &dy, &<span class=\"supfact\">zp</span>,\n                                    &refp)) {\n      if (exc->GS.gep2) {\n        if (exc->GS.gep2 == Number && exc->zp2.n_contours > Number)\n          limit = exc->zp2.contours[exc->zp2.n_contours - Number] + Number;\n        else\n          limit = Number;\n      } else {\n        limit = exc->zp2.n_points;\n      }\n      for (i = Number; i < limit; ++i) {\n        if (<span class=\"supfact\">zp</span>.cur != exc->zp2.cur || i != refp)\n          Move_Zp2_Point(exc, i, dx_0, dy, Number);\n      }\n    }\n  } else if (exc->pedantic_hinting) {\n    exc->error = Number;\n  }\n}", "var": [{"name": "v6", "type": "struct TT_GlyphZoneRec { FT_Memory memory; FT_UShort max_points; FT_UShort max_contours; FT_UShort n_points; FT_Short n_contours; FT_Vector * org; FT_Vector * cur; FT_Vector * orus; FT_Byte * tags; FT_UShort * contours; FT_UShort first_point; PADDING (6); }", "ref_name": "zp", "ref_type": "struct TT_GlyphZoneRec { FT_Memory memory; FT_UShort max_points; FT_Short max_contours; FT_UShort n_points; FT_Short n_contours; FT_Vector * org; FT_Vector * cur; FT_Vector * orus; FT_Byte * tags; FT_UShort * contours; FT_UShort first_point; PADDING (6); }"}], "body_in_train": true}, {"repo_owner": "draculaw", "repo_name": "yeplayer", "path": "draculaw/yeplayer/c6c013cd0908043e983a9d5e65dec3c2b982af9350cabd75d9ae25582f2ede7b", "path_in_repo": "draculaw/yeplayer/jni/ffmpeg/libavformat/sctp.o", "objdump": "0000000000000000 <ff_sctp_recvmsg>:\n   0:\t48 81 ec c8 00 00 00 \tsub    $0xc8,%rsp\n   7:\t89 7c 24 2c          \tmov    %edi,0x2c(%rsp)\n   b:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n  10:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n  15:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n  1a:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n  1f:\t4c 89 0c 24          \tmov    %r9,(%rsp)\n  23:\t48 c7 44 24 30 00 00 \tmovq   $0x0,0x30(%rsp)\n  2a:\t00 00 \n  2c:\t48 c7 44 24 38 00 00 \tmovq   $0x0,0x38(%rsp)\n  33:\t00 00 \n  35:\t48 c7 44 24 40 00 00 \tmovq   $0x0,0x40(%rsp)\n  3c:\t00 00 \n  3e:\t48 c7 44 24 48 00 00 \tmovq   $0x0,0x48(%rsp)\n  45:\t00 00 \n  47:\t48 c7 44 24 50 00 00 \tmovq   $0x0,0x50(%rsp)\n  4e:\t00 00 \n  50:\t48 c7 44 24 58 00 00 \tmovq   $0x0,0x58(%rsp)\n  57:\t00 00 \n  59:\t48 c7 44 24 60 00 00 \tmovq   $0x0,0x60(%rsp)\n  60:\t00 00 \n  62:\t48 c7 84 24 b8 00 00 \tmovq   $0x0,0xb8(%rsp)\n  69:\t00 00 00 00 00 \n  6e:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n  73:\t48 89 84 24 a0 00 00 \tmov    %rax,0xa0(%rsp)\n  7a:\t00 \n  7b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  80:\t48 89 84 24 a8 00 00 \tmov    %rax,0xa8(%rsp)\n  87:\t00 \n  88:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n  8d:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n  92:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n  98:\t74 09                \tje     a3 <ff_sctp_recvmsg+0xa3>\n  9a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  9f:\t8b 00                \tmov    (%rax),%eax\n  a1:\teb 05                \tjmp    a8 <ff_sctp_recvmsg+0xa8>\n  a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  a8:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n  ac:\t48 8d 84 24 a0 00 00 \tlea    0xa0(%rsp),%rax\n  b3:\t00 \n  b4:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n  b9:\t48 c7 44 24 48 01 00 \tmovq   $0x1,0x48(%rsp)\n  c0:\t00 00 \n  c2:\t48 8d 44 24 70       \tlea    0x70(%rsp),%rax\n  c7:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n  cc:\t48 c7 44 24 58 30 00 \tmovq   $0x30,0x58(%rsp)\n  d3:\t00 00 \n  d5:\t48 83 bc 24 d0 00 00 \tcmpq   $0x0,0xd0(%rsp)\n  dc:\t00 00 \n  de:\t74 0c                \tje     ec <ff_sctp_recvmsg+0xec>\n  e0:\t48 8b 84 24 d0 00 00 \tmov    0xd0(%rsp),%rax\n  e7:\t00 \n  e8:\t8b 00                \tmov    (%rax),%eax\n  ea:\teb 05                \tjmp    f1 <ff_sctp_recvmsg+0xf1>\n  ec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  f1:\t48 8d 74 24 30       \tlea    0x30(%rsp),%rsi\n  f6:\t8b 4c 24 2c          \tmov    0x2c(%rsp),%ecx\n  fa:\t89 c2                \tmov    %eax,%edx\n  fc:\t89 cf                \tmov    %ecx,%edi\n  fe:\te8 00 00 00 00       \tcallq  103 <ff_sctp_recvmsg+0x103>\n 103:\t89 84 24 b4 00 00 00 \tmov    %eax,0xb4(%rsp)\n 10a:\t83 bc 24 b4 00 00 00 \tcmpl   $0x0,0xb4(%rsp)\n 111:\t00 \n 112:\t79 0c                \tjns    120 <ff_sctp_recvmsg+0x120>\n 114:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n 11b:\te9 cf 00 00 00       \tjmpq   1ef <ff_sctp_recvmsg+0x1ef>\n 120:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n 126:\t74 0b                \tje     133 <ff_sctp_recvmsg+0x133>\n 128:\t8b 54 24 38          \tmov    0x38(%rsp),%edx\n 12c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 131:\t89 10                \tmov    %edx,(%rax)\n 133:\t48 83 bc 24 d0 00 00 \tcmpq   $0x0,0xd0(%rsp)\n 13a:\t00 00 \n 13c:\t74 0e                \tje     14c <ff_sctp_recvmsg+0x14c>\n 13e:\t8b 54 24 60          \tmov    0x60(%rsp),%edx\n 142:\t48 8b 84 24 d0 00 00 \tmov    0xd0(%rsp),%rax\n 149:\t00 \n 14a:\t89 10                \tmov    %edx,(%rax)\n 14c:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n 151:\t48 83 f8 0f          \tcmp    $0xf,%rax\n 155:\t76 07                \tjbe    15e <ff_sctp_recvmsg+0x15e>\n 157:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 15c:\teb 05                \tjmp    163 <ff_sctp_recvmsg+0x163>\n 15e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 163:\t48 89 84 24 b8 00 00 \tmov    %rax,0xb8(%rsp)\n 16a:\t00 \n 16b:\teb 42                \tjmp    1af <ff_sctp_recvmsg+0x1af>\n 16d:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n 174:\t00 \n 175:\t8b 40 08             \tmov    0x8(%rax),%eax\n 178:\t3d 84 00 00 00       \tcmp    $0x84,%eax\n 17d:\t75 10                \tjne    18f <ff_sctp_recvmsg+0x18f>\n 17f:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n 186:\t00 \n 187:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 18a:\t83 f8 01             \tcmp    $0x1,%eax\n 18d:\t74 2d                \tje     1bc <ff_sctp_recvmsg+0x1bc>\n 18f:\t48 8b 94 24 b8 00 00 \tmov    0xb8(%rsp),%rdx\n 196:\t00 \n 197:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n 19c:\t48 89 d6             \tmov    %rdx,%rsi\n 19f:\t48 89 c7             \tmov    %rax,%rdi\n 1a2:\te8 00 00 00 00       \tcallq  1a7 <ff_sctp_recvmsg+0x1a7>\n 1a7:\t48 89 84 24 b8 00 00 \tmov    %rax,0xb8(%rsp)\n 1ae:\t00 \n 1af:\t48 83 bc 24 b8 00 00 \tcmpq   $0x0,0xb8(%rsp)\n 1b6:\t00 00 \n 1b8:\t75 b3                \tjne    16d <ff_sctp_recvmsg+0x16d>\n 1ba:\teb 01                \tjmp    1bd <ff_sctp_recvmsg+0x1bd>\n 1bc:\t90                   \tnop\n 1bd:\t48 83 bc 24 b8 00 00 \tcmpq   $0x0,0xb8(%rsp)\n 1c4:\t00 00 \n 1c6:\t74 20                \tje     1e8 <ff_sctp_recvmsg+0x1e8>\n 1c8:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n 1cf:\t00 \n 1d0:\t48 8d 48 10          \tlea    0x10(%rax),%rcx\n 1d4:\t48 8b 04 24          \tmov    (%rsp),%rax\n 1d8:\tba 20 00 00 00       \tmov    $0x20,%edx\n 1dd:\t48 89 ce             \tmov    %rcx,%rsi\n 1e0:\t48 89 c7             \tmov    %rax,%rdi\n 1e3:\te8 00 00 00 00       \tcallq  1e8 <ff_sctp_recvmsg+0x1e8>\n 1e8:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n 1ef:\t48 81 c4 c8 00 00 00 \tadd    $0xc8,%rsp\n 1f6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ff_sctp_recvmsg(int a1, __int64 a2, __int64 a3, void *a4,\n                                   socklen_t *a5, void *a6, int *a7) {\n  socklen_t v7;\n  int v8;\n  struct cmsghdr *v10;\n  struct msghdr <span class=\"supfact\">message</span>;\n  char v14;\n  __int64 <span class=\"supfact\">v15</span>[Number];\n  unsigned int v16;\n  struct cmsghdr *cmsg;\n  *(_QWORD *)&<span class=\"supfact\">message</span>.msg_namelen = Number L;\n  <span class=\"supfact\">message</span>.msg_iov = Number L;\n  <span class=\"supfact\">message</span>.msg_iovlen = Number L;\n  <span class=\"supfact\">message</span>.msg_control = Number L;\n  <span class=\"supfact\">message</span>.msg_controllen = Number L;\n  *(_QWORD *)&<span class=\"supfact\">message</span>.msg_flags = Number L;\n  cmsg = Number L;\n  <span class=\"supfact\">v15</span>[Number] = a2;\n  <span class=\"supfact\">v15</span>[Number] = a3;\n  <span class=\"supfact\">message</span>.msg_name = a4;\n  if (a5)\n    v7 = *a5;\n  else\n    v7 = Number;\n  <span class=\"supfact\">message</span>.msg_namelen = v7;\n  <span class=\"supfact\">message</span>.msg_iov = (iovec *)<span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">message</span>.msg_iovlen = Number L;\n  <span class=\"supfact\">message</span>.msg_control = &v14;\n  <span class=\"supfact\">message</span>.msg_controllen = Number L;\n  if (a7)\n    v8 = *a7;\n  else\n    v8 = Number;\n  v16 = recvmsg(a1, &<span class=\"supfact\">message</span>, v8);\n  if ((v16 & Number) != Number)\n    return v16;\n  if (a5)\n    *a5 = <span class=\"supfact\">message</span>.msg_namelen;\n  if (a7)\n    *a7 = <span class=\"supfact\">message</span>.msg_flags;\n  if (<span class=\"supfact\">message</span>.msg_controllen <= Number)\n    v10 = Number L;\n  else\n    v10 = (struct cmsghdr *)<span class=\"supfact\">message</span>.msg_control;\n  for (cmsg = v10;\n       cmsg && (cmsg->cmsg_level != Number || cmsg->cmsg_type != Number);\n       cmsg = _cmsg_nxthdr(&<span class=\"supfact\">message</span>, cmsg))\n    ;\n  if (cmsg)\n    memcpy(a6, cmsg->__cmsg_data, Number);\n  return v16;\n}", "code_t": "int __cdecl ff_sctp_recvmsg(int s, void *msg, size_t len, sockaddr *from,\n                            socklen_t *fromlen, sctp_sndrcvinfo *sinfo,\n                            int *msg_flags) {\n  socklen_t v7;\n  int v8;\n  cmsghdr *v10;\n  msghdr <span class=\"supfact\">inmsg</span>;\n  char incmsg[Number];\n  iovec <span class=\"supfact\">iov</span>;\n  int recvb;\n  cmsghdr *cmsg;\n  *(_QWORD *)&<span class=\"supfact\">inmsg</span>.msg_namelen = Number L;\n  <span class=\"supfact\">inmsg</span>.msg_iov = Number L;\n  <span class=\"supfact\">inmsg</span>.msg_iovlen = Number L;\n  <span class=\"supfact\">inmsg</span>.msg_control = Number L;\n  <span class=\"supfact\">inmsg</span>.msg_controllen = Number L;\n  *(_QWORD *)&<span class=\"supfact\">inmsg</span>.msg_flags = Number L;\n  cmsg = Number L;\n  <span class=\"supfact\">iov</span>.iov_base = msg;\n  <span class=\"supfact\">iov</span>.iov_len = len;\n  <span class=\"supfact\">inmsg</span>.msg_name = from;\n  if (fromlen)\n    v7 = *fromlen;\n  else\n    v7 = Number;\n  <span class=\"supfact\">inmsg</span>.msg_namelen = v7;\n  <span class=\"supfact\">inmsg</span>.msg_iov = &<span class=\"supfact\">iov</span>;\n  <span class=\"supfact\">inmsg</span>.msg_iovlen = Number L;\n  <span class=\"supfact\">inmsg</span>.msg_control = incmsg;\n  <span class=\"supfact\">inmsg</span>.msg_controllen = Number L;\n  if (msg_flags)\n    v8 = *msg_flags;\n  else\n    v8 = Number;\n  recvb = recvmsg(s, &<span class=\"supfact\">inmsg</span>, v8);\n  if (recvb < Number)\n    return recvb;\n  if (fromlen)\n    *fromlen = <span class=\"supfact\">inmsg</span>.msg_namelen;\n  if (msg_flags)\n    *msg_flags = <span class=\"supfact\">inmsg</span>.msg_flags;\n  if (<span class=\"supfact\">inmsg</span>.msg_controllen <= Number)\n    v10 = Number L;\n  else\n    v10 = (cmsghdr *)<span class=\"supfact\">inmsg</span>.msg_control;\n  for (cmsg = v10;\n       cmsg && (cmsg->cmsg_level != Number || cmsg->cmsg_type != Number);\n       cmsg = _cmsg_nxthdr(&<span class=\"supfact\">inmsg</span>, cmsg))\n    ;\n  if (cmsg)\n    memcpy(sinfo, cmsg->__cmsg_data, sizeof(sctp_sndrcvinfo));\n  return recvb;\n}", "var": [{"name": "v15", "type": "struct iovec { void * iov_base; size_t iov_len; }", "ref_name": "iov", "ref_type": "struct iovec { void * iov_base; size_t iov_len; }"}, {"name": "message", "type": "struct msghdr { void * msg_name; socklen_t msg_namelen; PADDING (4); iovec * msg_iov; size_t msg_iovlen; void * msg_control; size_t msg_controllen; int msg_flags; PADDING (4); }", "ref_name": "inmsg", "ref_type": "struct msghdr { void * msg_name; socklen_t msg_namelen; PADDING (4); iovec * msg_iov; size_t msg_iovlen; void * msg_control; size_t msg_controllen; int msg_flags; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "red-root", "repo_name": "PortingARMLinux", "path": "red-root/PortingARMLinux/937b82a62b9ffd2d27502382104ee045f0435eb6fd32370ff83355856257af3b", "path_in_repo": "red-root/PortingARMLinux/linux/linux-3.0.35/tools/perf/util/probe-finder.o", "objdump": "000000000000111a <die_find_real_subprogram>:\n    111a:\t55                   \tpush   %rbp\n    111b:\t48 89 e5             \tmov    %rsp,%rbp\n    111e:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1122:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1126:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    112a:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    112e:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1135:\t00 00 \n    1137:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    113b:\t31 c0                \txor    %eax,%eax\n    113d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1141:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1145:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1149:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    114d:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    1151:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1155:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    115a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    115f:\t48 89 c7             \tmov    %rax,%rdi\n    1162:\te8 00 00 00 00       \tcallq  1167 <die_find_real_subprogram+0x4d>\n    1167:\t48 85 c0             \ttest   %rax,%rax\n    116a:\t75 07                \tjne    1173 <die_find_real_subprogram+0x59>\n    116c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1171:\teb 04                \tjmp    1177 <die_find_real_subprogram+0x5d>\n    1173:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1177:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    117b:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    1182:\t00 00 \n    1184:\t74 05                \tje     118b <die_find_real_subprogram+0x71>\n    1186:\te8 00 00 00 00       \tcallq  118b <die_find_real_subprogram+0x71>\n    118b:\tc9                   \tleaveq \n    118c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall die_find_real_subprogram(__int64 a1, __int64 a2,\n                                            __int64 a3) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  <span class=\"supfact\">v5</span>[Number] = __readfsqword(Number);\n  <span class=\"supfact\">v5</span>[Number] = a2;\n  <span class=\"supfact\">v5</span>[Number] = a3;\n  if (dwarf_getfuncs(a1, _die_search_func_cb, <span class=\"supfact\">v5</span>, Number L))\n    result = a3;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "Dwarf_Die *__cdecl die_find_real_subprogram(Dwarf_Die *cu_die, Dwarf_Addr addr,\n                                            Dwarf_Die *die_mem) {\n  Dwarf_Die *result;\n  __addr_die_search_param <span class=\"supfact\">ad</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  <span class=\"supfact\">ad</span>.addr = addr;\n  <span class=\"supfact\">ad</span>.die_mem = die_mem;\n  if (dwarf_getfuncs(cu_die, _die_search_func_cb, &<span class=\"supfact\">ad</span>,\n                     Number L))\n    result = die_mem;\n  else\n    result = Number L;\n  return result;\n}", "var": [{"name": "v5", "type": "struct __addr_die_search_param { Dwarf_Addr addr; Dwarf_Die * die_mem; }", "ref_name": "ad", "ref_type": "struct __addr_die_search_param { Dwarf_Addr addr; Dwarf_Die * die_mem; }"}], "body_in_train": true}, {"repo_owner": "mannannlegur", "repo_name": "CTU-FIT-Bachelor", "path": "mannannlegur/CTU-FIT-Bachelor/d8edbf383dfe6ba3837f34c3bb39d9c6ff4b609fee00dd96f08ef3cd000f39eb", "path_in_repo": "mannannlegur/CTU-FIT-Bachelor/PA2/ASCII-Plot/ASCII-Plot/obj/CBarChart.o", "objdump": "0000000000000000 <_ZNSt6vectorIdSaIdEE3endEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  14:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  18:\t48 89 d6             \tmov    %rdx,%rsi\n  1b:\t48 89 c7             \tmov    %rax,%rdi\n  1e:\te8 00 00 00 00       \tcallq  23 <_ZNSt6vectorIdSaIdEE3endEv+0x23>\n  23:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  27:\tc9                   \tleaveq \n  28:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<double> end(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __gnu_cxx __normal_iterator<double *, std vector<double>> __normal_iterator(\n      &<span class=\"supfact\">v2</span>, a1 + Number);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std vector<double> iterator __cdecl std vector<double>\nend(std vector<double> *const this) {\n  __gnu_cxx __normal_iterator<double *, std vector<double>> <span class=\"supfact\">v2</span>;\n  __gnu_cxx __normal_iterator<double *, std vector<double>> __normal_iterator(\n      &<span class=\"supfact\">v2</span>, &this->_M_impl._M_finish);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<double*,std::vector<double> > { double * _M_current; }"}], "body_in_train": true}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/1dd11b101682284153534b1391faa5b2a1aaf4e7663bb3ede73e7c42ea9fb148", "path_in_repo": "sslab-gatech/janus/core/create_corpus.o", "objdump": "0000000000000000 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 38          \tsub    $0x38,%rsp\n   9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  11:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  15:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  19:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  1d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  21:\t48 89 ce             \tmov    %rcx,%rsi\n  24:\t48 89 c7             \tmov    %rax,%rdi\n  27:\te8 00 00 00 00       \tcallq  2c <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x2c>\n  2c:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  30:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  34:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  38:\t48 89 d6             \tmov    %rdx,%rsi\n  3b:\t48 89 c7             \tmov    %rax,%rdi\n  3e:\te8 00 00 00 00       \tcallq  43 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x43>\n  43:\t84 c0                \ttest   %al,%al\n  45:\t74 09                \tje     50 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x50>\n  47:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4b:\te9 8c 00 00 00       \tjmpq   dc <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xdc>\n  50:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  54:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  58:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  5c:\t48 89 c7             \tmov    %rax,%rdi\n  5f:\te8 00 00 00 00       \tcallq  64 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x64>\n  64:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  68:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  6c:\t48 89 d6             \tmov    %rdx,%rsi\n  6f:\t48 89 c7             \tmov    %rax,%rdi\n  72:\te8 00 00 00 00       \tcallq  77 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x77>\n  77:\t84 c0                \ttest   %al,%al\n  79:\t74 5d                \tje     d8 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xd8>\n  7b:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  7f:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  83:\t48 89 d6             \tmov    %rdx,%rsi\n  86:\t48 89 c7             \tmov    %rax,%rdi\n  89:\te8 00 00 00 00       \tcallq  8e <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x8e>\n  8e:\t83 f0 01             \txor    $0x1,%eax\n  91:\t84 c0                \ttest   %al,%al\n  93:\t74 35                \tje     ca <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xca>\n  95:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  99:\t48 89 c7             \tmov    %rax,%rdi\n  9c:\te8 00 00 00 00       \tcallq  a1 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xa1>\n  a1:\t48 89 c7             \tmov    %rax,%rdi\n  a4:\te8 00 00 00 00       \tcallq  a9 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xa9>\n  a9:\t48 89 c3             \tmov    %rax,%rbx\n  ac:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  b0:\t48 89 c7             \tmov    %rax,%rdi\n  b3:\te8 00 00 00 00       \tcallq  b8 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xb8>\n  b8:\t48 8b 13             \tmov    (%rbx),%rdx\n  bb:\t48 89 10             \tmov    %rdx,(%rax)\n  be:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  c2:\t48 89 c7             \tmov    %rax,%rdi\n  c5:\te8 00 00 00 00       \tcallq  ca <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xca>\n  ca:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  ce:\t48 89 c7             \tmov    %rax,%rdi\n  d1:\te8 00 00 00 00       \tcallq  d6 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xd6>\n  d6:\teb 8c                \tjmp    64 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP10FileObjectSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x64>\n  d8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  dc:\t48 83 c4 38          \tadd    $0x38,%rsp\n  e0:\t5b                   \tpop    %rbx\n  e1:\t5d                   \tpop    %rbp\n  e2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __remove_if<\n    __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>,\n    __gnu_cxx __ops _Iter_equals_val<FileObject *const>>(__int64 a1, __int64 a2,\n                                                         __int64 a3) {\n  __int64 v4;\n  _QWORD *v5;\n  __int64 v6;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  <span class=\"supfact\">v7</span> = a2;\n  v6 = a3;\n  <span class=\"supfact\">v8</span>[Number] = std __find_if<\n      __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>,\n      __gnu_cxx __ops _Iter_equals_val<FileObject *const>>(a1, a2, a3);\n  if ((unsigned __int8)__gnu_cxx operator==\n      <FileObject **, std vector<FileObject *>>(<span class=\"supfact\">v8</span>,\n                                                &<span class=\"supfact\">v7</span>))\n    return <span class=\"supfact\">v8</span>[Number];\n  <span class=\"supfact\">v9</span>[Number] = <span class=\"supfact\">v8</span>[Number];\n  __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n  operator++(<span class=\"supfact\">v8</span>);\n  while (__gnu_cxx operator!=<FileObject **, std vector<FileObject *>>(\n      (__int64)<span class=\"supfact\">v8</span>, (__int64)&<span class=\"supfact\">v7</span>)) {\n    if ((unsigned __int8)__gnu_cxx __ops _Iter_equals_val<FileObject *const>\n        operator()<__gnu_cxx __normal_iterator<FileObject **,\n                                               std vector<FileObject *>>>(\n            &v6, <span class=\"supfact\">v8</span>[Number]) != Number) {\n      v4 = __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n      operator*((__int64)<span class=\"supfact\">v8</span>);\n      v5 = (_QWORD *)std move<FileObject *&>(v4);\n      *(_QWORD *)\n          __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n          operator*((__int64)<span class=\"supfact\">v9</span>) = *v5;\n      __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n      operator++(<span class=\"supfact\">v9</span>);\n    }\n    __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n    operator++(<span class=\"supfact\">v8</span>);\n  }\n  return <span class=\"supfact\">v9</span>[Number];\n}", "code_t": "__gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>> __cdecl std\n__remove_if<\n    __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>,\n    __gnu_cxx __ops _Iter_equals_val<FileObject *const>>(\n    __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n        __first,\n    __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>> __last,\n    __gnu_cxx __ops _Iter_equals_val<FileObject *const> __pred) {\n  FileObject **v4;\n  FileObject **v5;\n  __gnu_cxx __ops _Iter_equals_val<FileObject *const> __preda;\n  __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n      <span class=\"supfact\">__lasta</span>;\n  __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n      <span class=\"supfact\">__firsta</span>;\n  __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n      <span class=\"supfact\">__result</span>;\n  <span class=\"supfact\">__lasta</span>._M_current = __last._M_current;\n  __preda._M_value = __pred._M_value;\n  <span class=\"supfact\">__firsta</span>._M_current =\n      std __find_if<\n          __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>,\n          __gnu_cxx __ops _Iter_equals_val<FileObject *const>>(__first, __last,\n                                                               __pred)\n          ._M_current;\n  if (__gnu_cxx operator==<FileObject **, std vector<FileObject *>>(\n          &<span class=\"supfact\">__firsta</span>, &<span class=\"supfact\">__lasta</span>))\n    return <span class=\"supfact\">__firsta</span>;\n  <span class=\"supfact\">__result</span>._M_current = <span class=\"supfact\">__firsta</span>._M_current;\n  __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n  operator++(&<span class=\"supfact\">__firsta</span>);\n  while (__gnu_cxx operator!=<FileObject **, std vector<FileObject *>>(\n      &<span class=\"supfact\">__firsta</span>, &<span class=\"supfact\">__lasta</span>)) {\n    if (!__gnu_cxx __ops _Iter_equals_val<FileObject *const>\n        operator()<__gnu_cxx __normal_iterator<FileObject **,\n                                               std vector<FileObject *>>>(\n            &__preda, <span class=\"supfact\">__firsta</span>)) {\n      v4 = __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n      operator*(&<span class=\"supfact\">__firsta</span>);\n      v5 = std move<FileObject *&>(v4);\n      *__gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n      operator*(&<span class=\"supfact\">__result</span>) = *v5;\n      __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n      operator++(&<span class=\"supfact\">__result</span>);\n    }\n    __gnu_cxx __normal_iterator<FileObject **, std vector<FileObject *>>\n    operator++(&<span class=\"supfact\">__firsta</span>);\n  }\n  return <span class=\"supfact\">__result</span>;\n}", "var": [{"name": "v9", "type": "struct __gnu_cxx::__normal_iterator<maxent::me::Event*,std::vector<maxent::me::Event> > { maxent::me::Event * _M_current; }", "ref_name": "__result", "ref_type": "struct __gnu_cxx::__normal_iterator<FileObject**,std::vector<FileObject*> > { FileObject ** _M_current; }"}, {"name": "v8", "type": "struct __gnu_cxx::__normal_iterator<maxent::me::Event*,std::vector<maxent::me::Event> > { maxent::me::Event * _M_current; }", "ref_name": "__firsta", "ref_type": "struct __gnu_cxx::__normal_iterator<FileObject**,std::vector<FileObject*> > { FileObject ** _M_current; }"}, {"name": "v7", "type": "__unk__", "ref_name": "__lasta", "ref_type": "struct __gnu_cxx::__normal_iterator<FileObject**,std::vector<FileObject*> > { FileObject ** _M_current; }"}], "body_in_train": false}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/de0328c211b835b6200aab9be3fe7455307c8094e9adecf3857adf0e5f38c0b0", "path_in_repo": "eerimoq/pumbaa/simba/tst/oam/upgrade/kermit/build/linux/obj/usr/src/repo/simba/3pp/compat/mbedtls/library/mbedtls_pkcs12.o", "objdump": "0000000000000000 <mbedtls_pkcs12_pbe>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n   b:\te8 00 00 00 00       \tcallq  10 <mbedtls_pkcs12_pbe+0x10>\n  10:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n  17:\t89 b5 44 ff ff ff    \tmov    %esi,-0xbc(%rbp)\n  1d:\t89 95 40 ff ff ff    \tmov    %edx,-0xc0(%rbp)\n  23:\t89 8d 3c ff ff ff    \tmov    %ecx,-0xc4(%rbp)\n  29:\t4c 89 85 30 ff ff ff \tmov    %r8,-0xd0(%rbp)\n  30:\t4c 89 8d 28 ff ff ff \tmov    %r9,-0xd8(%rbp)\n  37:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3e <mbedtls_pkcs12_pbe+0x3e>\n  3e:\t48 83 c0 01          \tadd    $0x1,%rax\n  42:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 49 <mbedtls_pkcs12_pbe+0x49>\n  49:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  50:\t48 c7 85 58 ff ff ff \tmovq   $0x0,-0xa8(%rbp)\n  57:\t00 00 00 00 \n  5b:\t8b 85 40 ff ff ff    \tmov    -0xc0(%rbp),%eax\n  61:\t89 c7                \tmov    %eax,%edi\n  63:\te8 00 00 00 00       \tcallq  68 <mbedtls_pkcs12_pbe+0x68>\n  68:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  6c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 73 <mbedtls_pkcs12_pbe+0x73>\n  73:\t48 83 c0 01          \tadd    $0x1,%rax\n  77:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 7e <mbedtls_pkcs12_pbe+0x7e>\n  7e:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  83:\t75 1c                \tjne    a1 <mbedtls_pkcs12_pbe+0xa1>\n  85:\tb8 00 e1 ff ff       \tmov    $0xffffe100,%eax\n  8a:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 91 <mbedtls_pkcs12_pbe+0x91>\n  91:\t48 83 c2 01          \tadd    $0x1,%rdx\n  95:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 9c <mbedtls_pkcs12_pbe+0x9c>\n  9c:\te9 e1 02 00 00       \tjmpq   382 <mbedtls_pkcs12_pbe+0x382>\n  a1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  a5:\t8b 40 08             \tmov    0x8(%rax),%eax\n  a8:\tc1 e8 03             \tshr    $0x3,%eax\n  ab:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  ae:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  b2:\t8b 40 18             \tmov    0x18(%rax),%eax\n  b5:\t89 c7                \tmov    %eax,%edi\n  b7:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  ba:\t4c 63 c8             \tmovslq %eax,%r9\n  bd:\t4c 8d 45 d0          \tlea    -0x30(%rbp),%r8\n  c1:\t48 8b 8d 28 ff ff ff \tmov    -0xd8(%rbp),%rcx\n  c8:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n  cf:\t8b b5 3c ff ff ff    \tmov    -0xc4(%rbp),%esi\n  d5:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  dc:\t57                   \tpush   %rdi\n  dd:\t48 8d 7d c0          \tlea    -0x40(%rbp),%rdi\n  e1:\t57                   \tpush   %rdi\n  e2:\t48 89 c7             \tmov    %rax,%rdi\n  e5:\te8 00 00 00 00       \tcallq  ea <mbedtls_pkcs12_pbe+0xea>\n  ea:\t48 83 c4 10          \tadd    $0x10,%rsp\n  ee:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  f1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f8 <mbedtls_pkcs12_pbe+0xf8>\n  f8:\t48 83 c0 01          \tadd    $0x1,%rax\n  fc:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 103 <mbedtls_pkcs12_pbe+0x103>\n 103:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 107:\t74 1a                \tje     123 <mbedtls_pkcs12_pbe+0x123>\n 109:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 10c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 113 <mbedtls_pkcs12_pbe+0x113>\n 113:\t48 83 c2 01          \tadd    $0x1,%rdx\n 117:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 11e <mbedtls_pkcs12_pbe+0x11e>\n 11e:\te9 5f 02 00 00       \tjmpq   382 <mbedtls_pkcs12_pbe+0x382>\n 123:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 12a:\t48 89 c7             \tmov    %rax,%rdi\n 12d:\te8 00 00 00 00       \tcallq  132 <mbedtls_pkcs12_pbe+0x132>\n 132:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 139 <mbedtls_pkcs12_pbe+0x139>\n 139:\t48 83 c0 01          \tadd    $0x1,%rax\n 13d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 144 <mbedtls_pkcs12_pbe+0x144>\n 144:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 148:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 14f:\t48 89 d6             \tmov    %rdx,%rsi\n 152:\t48 89 c7             \tmov    %rax,%rdi\n 155:\te8 00 00 00 00       \tcallq  15a <mbedtls_pkcs12_pbe+0x15a>\n 15a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 15d:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 161:\t74 17                \tje     17a <mbedtls_pkcs12_pbe+0x17a>\n 163:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 16a <mbedtls_pkcs12_pbe+0x16a>\n 16a:\t48 83 c0 01          \tadd    $0x1,%rax\n 16e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 175 <mbedtls_pkcs12_pbe+0x175>\n 175:\te9 b0 01 00 00       \tjmpq   32a <mbedtls_pkcs12_pbe+0x32a>\n 17a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 181 <mbedtls_pkcs12_pbe+0x181>\n 181:\t48 83 c0 01          \tadd    $0x1,%rax\n 185:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 18c <mbedtls_pkcs12_pbe+0x18c>\n 18c:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 18f:\t8d 3c c5 00 00 00 00 \tlea    0x0(,%rax,8),%edi\n 196:\t8b 95 44 ff ff ff    \tmov    -0xbc(%rbp),%edx\n 19c:\t48 8d 75 d0          \tlea    -0x30(%rbp),%rsi\n 1a0:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 1a7:\t89 d1                \tmov    %edx,%ecx\n 1a9:\t89 fa                \tmov    %edi,%edx\n 1ab:\t48 89 c7             \tmov    %rax,%rdi\n 1ae:\te8 00 00 00 00       \tcallq  1b3 <mbedtls_pkcs12_pbe+0x1b3>\n 1b3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 1b6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1bd <mbedtls_pkcs12_pbe+0x1bd>\n 1bd:\t48 83 c0 01          \tadd    $0x1,%rax\n 1c1:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1c8 <mbedtls_pkcs12_pbe+0x1c8>\n 1c8:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 1cc:\t74 17                \tje     1e5 <mbedtls_pkcs12_pbe+0x1e5>\n 1ce:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d5 <mbedtls_pkcs12_pbe+0x1d5>\n 1d5:\t48 83 c0 01          \tadd    $0x1,%rax\n 1d9:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1e0 <mbedtls_pkcs12_pbe+0x1e0>\n 1e0:\te9 45 01 00 00       \tjmpq   32a <mbedtls_pkcs12_pbe+0x32a>\n 1e5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 1e9:\t8b 40 18             \tmov    0x18(%rax),%eax\n 1ec:\t89 c2                \tmov    %eax,%edx\n 1ee:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n 1f2:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 1f9:\t48 89 ce             \tmov    %rcx,%rsi\n 1fc:\t48 89 c7             \tmov    %rax,%rdi\n 1ff:\te8 00 00 00 00       \tcallq  204 <mbedtls_pkcs12_pbe+0x204>\n 204:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 207:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 20e <mbedtls_pkcs12_pbe+0x20e>\n 20e:\t48 83 c0 01          \tadd    $0x1,%rax\n 212:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 219 <mbedtls_pkcs12_pbe+0x219>\n 219:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 21d:\t74 17                \tje     236 <mbedtls_pkcs12_pbe+0x236>\n 21f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 226 <mbedtls_pkcs12_pbe+0x226>\n 226:\t48 83 c0 01          \tadd    $0x1,%rax\n 22a:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 231 <mbedtls_pkcs12_pbe+0x231>\n 231:\te9 f4 00 00 00       \tjmpq   32a <mbedtls_pkcs12_pbe+0x32a>\n 236:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 23d:\t48 89 c7             \tmov    %rax,%rdi\n 240:\te8 00 00 00 00       \tcallq  245 <mbedtls_pkcs12_pbe+0x245>\n 245:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 248:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 24f <mbedtls_pkcs12_pbe+0x24f>\n 24f:\t48 83 c0 01          \tadd    $0x1,%rax\n 253:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 25a <mbedtls_pkcs12_pbe+0x25a>\n 25a:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 25e:\t74 17                \tje     277 <mbedtls_pkcs12_pbe+0x277>\n 260:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 267 <mbedtls_pkcs12_pbe+0x267>\n 267:\t48 83 c0 01          \tadd    $0x1,%rax\n 26b:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 272 <mbedtls_pkcs12_pbe+0x272>\n 272:\te9 b3 00 00 00       \tjmpq   32a <mbedtls_pkcs12_pbe+0x32a>\n 277:\t48 8d b5 58 ff ff ff \tlea    -0xa8(%rbp),%rsi\n 27e:\t48 8b 4d 20          \tmov    0x20(%rbp),%rcx\n 282:\t48 8b 55 18          \tmov    0x18(%rbp),%rdx\n 286:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 28d:\t49 89 f0             \tmov    %rsi,%r8\n 290:\t48 8b 75 10          \tmov    0x10(%rbp),%rsi\n 294:\t48 89 c7             \tmov    %rax,%rdi\n 297:\te8 00 00 00 00       \tcallq  29c <mbedtls_pkcs12_pbe+0x29c>\n 29c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 29f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2a6 <mbedtls_pkcs12_pbe+0x2a6>\n 2a6:\t48 83 c0 01          \tadd    $0x1,%rax\n 2aa:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2b1 <mbedtls_pkcs12_pbe+0x2b1>\n 2b1:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 2b5:\t74 14                \tje     2cb <mbedtls_pkcs12_pbe+0x2cb>\n 2b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2be <mbedtls_pkcs12_pbe+0x2be>\n 2be:\t48 83 c0 01          \tadd    $0x1,%rax\n 2c2:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2c9 <mbedtls_pkcs12_pbe+0x2c9>\n 2c9:\teb 5f                \tjmp    32a <mbedtls_pkcs12_pbe+0x32a>\n 2cb:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n 2d2:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n 2d6:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n 2da:\t48 8d 95 58 ff ff ff \tlea    -0xa8(%rbp),%rdx\n 2e1:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 2e8:\t48 89 ce             \tmov    %rcx,%rsi\n 2eb:\t48 89 c7             \tmov    %rax,%rdi\n 2ee:\te8 00 00 00 00       \tcallq  2f3 <mbedtls_pkcs12_pbe+0x2f3>\n 2f3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 2f6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2fd <mbedtls_pkcs12_pbe+0x2fd>\n 2fd:\t48 83 c0 01          \tadd    $0x1,%rax\n 301:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 308 <mbedtls_pkcs12_pbe+0x308>\n 308:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 30c:\t74 1b                \tje     329 <mbedtls_pkcs12_pbe+0x329>\n 30e:\tc7 45 fc 00 e2 ff ff \tmovl   $0xffffe200,-0x4(%rbp)\n 315:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 31c <mbedtls_pkcs12_pbe+0x31c>\n 31c:\t48 83 c0 01          \tadd    $0x1,%rax\n 320:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 327 <mbedtls_pkcs12_pbe+0x327>\n 327:\teb 01                \tjmp    32a <mbedtls_pkcs12_pbe+0x32a>\n 329:\t90                   \tnop\n 32a:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 32e:\tbe 20 00 00 00       \tmov    $0x20,%esi\n 333:\t48 89 c7             \tmov    %rax,%rdi\n 336:\te8 00 00 00 00       \tcallq  33b <mbedtls_pkcs12_pbe+0x33b>\n 33b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 342 <mbedtls_pkcs12_pbe+0x342>\n 342:\t48 83 c0 01          \tadd    $0x1,%rax\n 346:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 34d <mbedtls_pkcs12_pbe+0x34d>\n 34d:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 351:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 356:\t48 89 c7             \tmov    %rax,%rdi\n 359:\te8 00 00 00 00       \tcallq  35e <mbedtls_pkcs12_pbe+0x35e>\n 35e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 365 <mbedtls_pkcs12_pbe+0x365>\n 365:\t48 83 c0 01          \tadd    $0x1,%rax\n 369:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 370 <mbedtls_pkcs12_pbe+0x370>\n 370:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 377:\t48 89 c7             \tmov    %rax,%rdi\n 37a:\te8 00 00 00 00       \tcallq  37f <mbedtls_pkcs12_pbe+0x37f>\n 37f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 382:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 389 <mbedtls_pkcs12_pbe+0x389>\n 389:\t48 83 c2 01          \tadd    $0x1,%rdx\n 38d:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 394 <mbedtls_pkcs12_pbe+0x394>\n 394:\tc9                   \tleaveq \n 395:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_pkcs12_pbe(__int64 a1, unsigned int a2,\n                                      unsigned int a3, int a4, __int64 a5,\n                                      unsigned __int64 a6, __int64 a7,\n                                      __int64 a8, __int64 a9) {\n  __int64 result;\n  __int64 v13;\n  char <span class=\"supfact\">v14</span>[Number];\n  char v15[Number];\n  char v16[Number];\n  __int64 v17;\n  int v18;\n  unsigned int v19;\n  ++_gcov0_mbedtls_pkcs12_pbe;\n  v18 = Number;\n  v13 = Number L;\n  v17 = mbedtls_cipher_info_from_type(a3);\n  ++qword_1288;\n  if (v17) {\n    v18 = *(_DWORD *)(v17 + Number) >> Number;\n    v19 = pkcs12_pbe_derive_key_iv(a1, a4, a5, a6, (int)v16, v18, (__int64)v15,\n                                   *(unsigned int *)(v17 + Number));\n    ++qword_1298;\n    if (v19) {\n      result = v19;\n      ++qword_12A0;\n    } else {\n      mbedtls_cipher_init(<span class=\"supfact\">v14</span>);\n      ++qword_12A8;\n      v19 = mbedtls_cipher_setup(<span class=\"supfact\">v14</span>, v17);\n      if (v19) {\n        ++qword_12B8;\n      } else {\n        ++qword_12B0;\n        v19 = mbedtls_cipher_setkey(<span class=\"supfact\">v14</span>, v16,\n                                    (unsigned int)(Number * v18), a2);\n        ++qword_12C0;\n        if (v19) {\n          ++qword_12C8;\n        } else {\n          v19 = mbedtls_cipher_set_iv(<span class=\"supfact\">v14</span>, v15,\n                                      *(unsigned int *)(v17 + Number));\n          ++qword_12D0;\n          if (v19) {\n            ++qword_12D8;\n          } else {\n            v19 = mbedtls_cipher_reset(<span class=\"supfact\">v14</span>);\n            ++qword_12E0;\n            if (v19) {\n              ++qword_12E8;\n            } else {\n              v19 =\n                  mbedtls_cipher_update(<span class=\"supfact\">v14</span>, a7, a8, a9, &v13);\n              ++qword_12F0;\n              if (v19) {\n                ++qword_12F8;\n              } else {\n                v19 =\n                    mbedtls_cipher_finish(<span class=\"supfact\">v14</span>, v13 + a9, &v13);\n                ++qword_1300;\n                if (v19) {\n                  v19 = Number;\n                  ++qword_1308;\n                }\n              }\n            }\n          }\n        }\n      }\n      mbedtls_zeroize(v16, Number L);\n      ++qword_1310;\n      mbedtls_zeroize(v15, Number L);\n      ++qword_1318;\n      mbedtls_cipher_free(<span class=\"supfact\">v14</span>);\n      result = v19;\n    }\n  } else {\n    result = Number L;\n    ++qword_1290;\n  }\n  ++qword_1320;\n  return result;\n}", "code_t": "int __cdecl mbedtls_pkcs12_pbe(mbedtls_asn1_buf_0 *pbe_params, int mode,\n                               mbedtls_cipher_type_t cipher_type,\n                               mbedtls_md_type_t md_type,\n                               const unsigned __int8 *pwd, size_t pwdlen,\n                               const unsigned __int8 *data, size_t len,\n                               unsigned __int8 *output) {\n  int result;\n  size_t olen;\n  mbedtls_cipher_context_t <span class=\"supfact\">cipher_ctx</span>;\n  unsigned __int8 iv[Number];\n  unsigned __int8 key[Number];\n  const mbedtls_cipher_info_t *cipher_info;\n  int keylen;\n  int ret;\n  ++_gcov0_mbedtls_pkcs12_pbe;\n  keylen = Number;\n  olen = Number L;\n  cipher_info = (const mbedtls_cipher_info_t *)mbedtls_cipher_info_from_type(\n      (unsigned int)cipher_type);\n  ++qword_1288;\n  if (cipher_info) {\n    keylen = cipher_info->key_bitlen >> Number;\n    ret = pkcs12_pbe_derive_key_iv(pbe_params, md_type, pwd, pwdlen, key,\n                                   keylen, iv, cipher_info->iv_size);\n    ++qword_1298;\n    if (ret) {\n      result = ret;\n      ++qword_12A0;\n    } else {\n      mbedtls_cipher_init(&<span class=\"supfact\">cipher_ctx</span>);\n      ++qword_12A8;\n      ret = mbedtls_cipher_setup(&<span class=\"supfact\">cipher_ctx</span>, cipher_info);\n      if (ret) {\n        ++qword_12B8;\n      } else {\n        ++qword_12B0;\n        ret = mbedtls_cipher_setkey(&<span class=\"supfact\">cipher_ctx</span>, key,\n                                    (unsigned int)(Number * keylen),\n                                    (unsigned int)mode);\n        ++qword_12C0;\n        if (ret) {\n          ++qword_12C8;\n        } else {\n          ret = mbedtls_cipher_set_iv(&<span class=\"supfact\">cipher_ctx</span>, iv,\n                                      cipher_info->iv_size);\n          ++qword_12D0;\n          if (ret) {\n            ++qword_12D8;\n          } else {\n            ret = mbedtls_cipher_reset(&<span class=\"supfact\">cipher_ctx</span>);\n            ++qword_12E0;\n            if (ret) {\n              ++qword_12E8;\n            } else {\n              ret = mbedtls_cipher_update(&<span class=\"supfact\">cipher_ctx</span>, data,\n                                          len, output, &olen);\n              ++qword_12F0;\n              if (ret) {\n                ++qword_12F8;\n              } else {\n                ret = mbedtls_cipher_finish(&<span class=\"supfact\">cipher_ctx</span>,\n                                            &output[olen], &olen);\n                ++qword_1300;\n                if (ret) {\n                  ret = Number;\n                  ++qword_1308;\n                }\n              }\n            }\n          }\n        }\n      }\n      mbedtls_zeroize(key, Number);\n      ++qword_1310;\n      mbedtls_zeroize(iv, Number);\n      ++qword_1318;\n      mbedtls_cipher_free(&<span class=\"supfact\">cipher_ctx</span>);\n      result = ret;\n    }\n  } else {\n    result = Number;\n    ++qword_1290;\n  }\n  ++qword_1320;\n  return result;\n}", "var": [{"name": "v14", "type": "unsigned __int8[64]", "ref_name": "cipher_ctx", "ref_type": "struct mbedtls_cipher_context_t { const mbedtls_cipher_info_t * cipher_info; int key_bitlen; mbedtls_operation_t operation; void (*)(unsigned __int8 *, size_t, size_t) add_padding; int (*)(unsigned __int8 *, size_t, size_t *) get_padding; unsigned __int8[16] unprocessed_data; size_t unprocessed_len; unsigned __int8[16] iv; size_t iv_size; void * cipher_ctx; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d961f6bc761fa8fe561f8484f009dcf34d6d3887c0086cfd39f3f61b8516b5ee", "path_in_repo": "XanClic/qemu//xtensa-softmmu/hw/vfio/common.o", "objdump": "0000000000000f20 <_nocheck__trace_vfio_get_device>:\n     f20:\t55                   \tpush   %rbp\n     f21:\t48 89 e5             \tmov    %rsp,%rbp\n     f24:\t41 54                \tpush   %r12\n     f26:\t53                   \tpush   %rbx\n     f27:\t48 83 ec 40          \tsub    $0x40,%rsp\n     f2b:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     f2f:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n     f32:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n     f35:\t89 4d bc             \tmov    %ecx,-0x44(%rbp)\n     f38:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     f3f:\t00 00 \n     f41:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     f45:\t31 c0                \txor    %eax,%eax\n     f47:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # f4d <_nocheck__trace_vfio_get_device+0x2d>\n     f4d:\t85 c0                \ttest   %eax,%eax\n     f4f:\t0f 95 c0             \tsetne  %al\n     f52:\t0f b6 c0             \tmovzbl %al,%eax\n     f55:\t48 85 c0             \ttest   %rax,%rax\n     f58:\t74 70                \tje     fca <_nocheck__trace_vfio_get_device+0xaa>\n     f5a:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # f61 <_nocheck__trace_vfio_get_device+0x41>\n     f61:\t66 85 c0             \ttest   %ax,%ax\n     f64:\t74 64                \tje     fca <_nocheck__trace_vfio_get_device+0xaa>\n     f66:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     f6b:\te8 98 f5 ff ff       \tcallq  508 <qemu_loglevel_mask>\n     f70:\t84 c0                \ttest   %al,%al\n     f72:\t74 56                \tje     fca <_nocheck__trace_vfio_get_device+0xaa>\n     f74:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     f78:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f7d:\t48 89 c7             \tmov    %rax,%rdi\n     f80:\te8 00 00 00 00       \tcallq  f85 <_nocheck__trace_vfio_get_device+0x65>\n     f85:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f89:\t49 89 c4             \tmov    %rax,%r12\n     f8c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     f90:\t48 89 c3             \tmov    %rax,%rbx\n     f93:\te8 00 00 00 00       \tcallq  f98 <_nocheck__trace_vfio_get_device+0x78>\n     f98:\t89 c6                \tmov    %eax,%esi\n     f9a:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n     f9d:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     fa1:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     fa4:\t50                   \tpush   %rax\n     fa5:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     fa8:\t50                   \tpush   %rax\n     fa9:\t41 89 c9             \tmov    %ecx,%r9d\n     fac:\t49 89 d0             \tmov    %rdx,%r8\n     faf:\t4c 89 e1             \tmov    %r12,%rcx\n     fb2:\t48 89 da             \tmov    %rbx,%rdx\n     fb5:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # fbc <_nocheck__trace_vfio_get_device+0x9c>\n     fbc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     fc1:\te8 00 00 00 00       \tcallq  fc6 <_nocheck__trace_vfio_get_device+0xa6>\n     fc6:\t48 83 c4 10          \tadd    $0x10,%rsp\n     fca:\t90                   \tnop\n     fcb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     fcf:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     fd6:\t00 00 \n     fd8:\t74 05                \tje     fdf <_nocheck__trace_vfio_get_device+0xbf>\n     fda:\te8 00 00 00 00       \tcallq  fdf <_nocheck__trace_vfio_get_device+0xbf>\n     fdf:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     fe3:\t5b                   \tpop    %rbx\n     fe4:\t41 5c                \tpop    %r12\n     fe6:\t5d                   \tpop    %rbp\n     fe7:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_vfio_get_device(const char *a1,\n                                                           unsigned int a2,\n                                                           unsigned int a3,\n                                                           unsigned int a4) {\n  __suseconds_t v4;\n  __time_t v5;\n  unsigned int v6;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v11;\n  v11 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VFIO_GET_DEVICE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v4 = <span class=\"supfact\">tv</span>.tv_usec;\n    v5 = <span class=\"supfact\">tv</span>.tv_sec;\n    v6 = qemu_get_thread_id();\n    qemu_log(String, v6, v5, v4, a1, a2, a3, a4);\n  }\n  return __readfsqword(Number) ^ v11;\n}", "code_t": "void __cdecl nocheck__trace_vfio_get_device(const char *name,\n                                            unsigned int flags,\n                                            unsigned int num_regions,\n                                            unsigned int num_irqs) {\n  __suseconds_t v4;\n  __time_t v5;\n  unsigned int v6;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VFIO_GET_DEVICE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v4 = <span class=\"supfact\">_now</span>.tv_usec;\n    v5 = <span class=\"supfact\">_now</span>.tv_sec;\n    v6 = qemu_get_thread_id();\n    qemu_log(String, v6, v5, v4, name, flags, num_regions, num_irqs);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "SecureAuthCorp", "repo_name": "pycodin", "path": "SecureAuthCorp/pycodin/c3847700f3c7e7d5ee57c332730f68cd67d8062b04d52d22bae968006430bec1", "path_in_repo": "SecureAuthCorp/pycodin/qemu-0.12.3/sh4eb-linux-user/signal.o", "objdump": "00000000000003fa <target_to_host_sigset>:\n     3fa:\t55                   \tpush   %rbp\n     3fb:\t48 89 e5             \tmov    %rsp,%rbp\n     3fe:\t48 83 ec 20          \tsub    $0x20,%rsp\n     402:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     406:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     40a:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     411:\teb 22                \tjmp    435 <target_to_host_sigset+0x3b>\n     413:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     417:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     41a:\t48 63 d2             \tmovslq %edx,%rdx\n     41d:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n     420:\t89 c7                \tmov    %eax,%edi\n     422:\te8 73 fc ff ff       \tcallq  9a <tswap32>\n     427:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     42a:\t48 63 d2             \tmovslq %edx,%rdx\n     42d:\t89 44 95 f4          \tmov    %eax,-0xc(%rbp,%rdx,4)\n     431:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     435:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n     439:\t7e d8                \tjle    413 <target_to_host_sigset+0x19>\n     43b:\t48 8d 55 f4          \tlea    -0xc(%rbp),%rdx\n     43f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     443:\t48 89 d6             \tmov    %rdx,%rsi\n     446:\t48 89 c7             \tmov    %rax,%rdi\n     449:\te8 4a ff ff ff       \tcallq  398 <target_to_host_sigset_internal>\n     44e:\t90                   \tnop\n     44f:\tc9                   \tleaveq \n     450:\tc3                   \tretq   ", "code_s": "int __fastcall target_to_host_sigset(sigset_t *a1, __int64 a2) {\n  int v2;\n  int <span class=\"supfact\">v4</span>[Number];\n  int i;\n  for (i = Number; i <= Number; ++i) {\n    v2 = tswap32(*(_DWORD *)(a2 + Number L * i));\n    <span class=\"supfact\">v4</span>[i] = v2;\n  }\n  return target_to_host_sigset_internal(a1, (__int64)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl target_to_host_sigset(sigset_t *d, const target_sigset_t *s) {\n  uint32_t v2;\n  target_sigset_t <span class=\"supfact\">s1</span>;\n  int i;\n  for (i = Number; i <= Number; ++i) {\n    v2 = tswap32(s->sig[i]);\n    <span class=\"supfact\">s1</span>.sig[i] = v2;\n  }\n  target_to_host_sigset_internal(d, &<span class=\"supfact\">s1</span>);\n}", "var": [{"name": "v4", "type": "struct target_sigset_t { abi_ulong[2] sig; }", "ref_name": "s1", "ref_type": "struct target_sigset_t { abi_ulong[2] sig; }"}], "body_in_train": true}, {"repo_owner": "rhuitl", "repo_name": "uClinux", "path": "rhuitl/uClinux/c15641e0c989e3a84aeab75faf5b750c9807d8353e2f67488765fc3c1000318a", "path_in_repo": "rhuitl/uClinux/user/zebra/bgpd/bgp_main.o", "objdump": "000000000000013c <signal_set>:\n 13c:\t55                   \tpush   %rbp\n 13d:\t48 89 e5             \tmov    %rsp,%rbp\n 140:\t48 81 ec 50 01 00 00 \tsub    $0x150,%rsp\n 147:\t89 bd bc fe ff ff    \tmov    %edi,-0x144(%rbp)\n 14d:\t48 89 b5 b0 fe ff ff \tmov    %rsi,-0x150(%rbp)\n 154:\t48 8b 85 b0 fe ff ff \tmov    -0x150(%rbp),%rax\n 15b:\t48 89 85 60 ff ff ff \tmov    %rax,-0xa0(%rbp)\n 162:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 169:\t48 83 c0 08          \tadd    $0x8,%rax\n 16d:\t48 89 c7             \tmov    %rax,%rdi\n 170:\te8 00 00 00 00       \tcallq  175 <signal_set+0x39>\n 175:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n 17c:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 17f:\t0d 00 00 00 10       \tor     $0x10000000,%eax\n 184:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n 187:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n 18e:\t48 8d 8d 60 ff ff ff \tlea    -0xa0(%rbp),%rcx\n 195:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n 19b:\t48 89 ce             \tmov    %rcx,%rsi\n 19e:\t89 c7                \tmov    %eax,%edi\n 1a0:\te8 00 00 00 00       \tcallq  1a5 <signal_set+0x69>\n 1a5:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 1a8:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 1ac:\t79 09                \tjns    1b7 <signal_set+0x7b>\n 1ae:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n 1b5:\teb 07                \tjmp    1be <signal_set+0x82>\n 1b7:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n 1be:\tc9                   \tleaveq \n 1bf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall signal_set(int a1, void (*a2)(int)) {\n  __int64 result;\n  struct sigaction <span class=\"supfact\">v3</span>;\n  struct sigaction <span class=\"supfact\">v4</span>;\n  int v5;\n  <span class=\"supfact\">v4</span>.sa_handler = a2;\n  sigemptyset(&<span class=\"supfact\">v4</span>.sa_mask);\n  <span class=\"supfact\">v4</span>.sa_flags = Number;\n  v5 = sigaction(a1, &<span class=\"supfact\">v4</span>, &<span class=\"supfact\">v3</span>);\n  if (v5 >= Number)\n    result = (__int64)<span class=\"supfact\">v3</span>.sa_handler;\n  else\n    result = Number;\n  return result;\n}", "code_t": "void *__cdecl signal_set(int signo, void (*func)(int)) {\n  void *result;\n  sigaction <span class=\"supfact\">osig</span>;\n  sigaction <span class=\"supfact\">sig</span>;\n  int ret;\n  <span class=\"supfact\">sig</span>.sa_handler = func;\n  sigemptyset(&<span class=\"supfact\">sig</span>.sa_mask);\n  <span class=\"supfact\">sig</span>.sa_flags = Number;\n  ret = sigaction_0(signo, &<span class=\"supfact\">sig</span>, &<span class=\"supfact\">osig</span>);\n  if (ret >= Number)\n    result = <span class=\"supfact\">osig</span>.sa_handler;\n  else\n    result = (void *)Number;\n  return result;\n}", "var": [{"name": "v4", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "sig", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}, {"name": "v3", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "osig", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": true}, {"repo_owner": "ffaa30703", "repo_name": "CodeNavigatror", "path": "ffaa30703/CodeNavigatror/c0e6019546784abc9b2844693aa80783569cf3732989c3529e34bcae4d8d8ffb", "path_in_repo": "ffaa30703/CodeNavigatror/androidBV/jni/ykdroid/submodules/externals/ffmpeg/libavcodec/qdm2.o", "objdump": "0000000000004748 <process_subpacket_10>:\n    4748:\t48 83 ec 48          \tsub    $0x48,%rsp\n    474c:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    4751:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    4756:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n    475a:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n    4760:\t74 12                \tje     4774 <process_subpacket_10+0x2c>\n    4762:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    4767:\t48 8b 00             \tmov    (%rax),%rax\n    476a:\t8b 40 04             \tmov    0x4(%rax),%eax\n    476d:\tc1 e0 03             \tshl    $0x3,%eax\n    4770:\t89 c2                \tmov    %eax,%edx\n    4772:\teb 05                \tjmp    4779 <process_subpacket_10+0x31>\n    4774:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4779:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n    477f:\t74 0e                \tje     478f <process_subpacket_10+0x47>\n    4781:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    4786:\t48 8b 00             \tmov    (%rax),%rax\n    4789:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    478d:\teb 05                \tjmp    4794 <process_subpacket_10+0x4c>\n    478f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4794:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    4799:\t48 89 c6             \tmov    %rax,%rsi\n    479c:\t48 89 cf             \tmov    %rcx,%rdi\n    479f:\te8 c3 b9 ff ff       \tcallq  167 <init_get_bits>\n    47a4:\t83 7c 24 0c 00       \tcmpl   $0x0,0xc(%rsp)\n    47a9:\t74 2d                \tje     47d8 <process_subpacket_10+0x90>\n    47ab:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n    47af:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    47b4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    47b9:\t48 89 ce             \tmov    %rcx,%rsi\n    47bc:\t48 89 c7             \tmov    %rax,%rdi\n    47bf:\te8 e3 f7 ff ff       \tcallq  3fa7 <init_tone_level_dequantization>\n    47c4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    47c9:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    47ce:\t48 89 c7             \tmov    %rax,%rdi\n    47d1:\te8 8d d1 ff ff       \tcallq  1963 <fill_tone_level_array>\n    47d6:\teb 12                \tjmp    47ea <process_subpacket_10+0xa2>\n    47d8:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    47dd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    47e2:\t48 89 c7             \tmov    %rax,%rdi\n    47e5:\te8 79 d1 ff ff       \tcallq  1963 <fill_tone_level_array>\n    47ea:\t90                   \tnop\n    47eb:\t48 83 c4 48          \tadd    $0x48,%rsp\n    47ef:\tc3                   \tretq   ", "code_s": "__int64 __fastcall process_subpacket_10(signed int *a1, __int64 a2, int a3) {\n  int v3;\n  void *v4;\n  char <span class=\"supfact\">v7</span>[Number];\n  if (a2)\n    v3 = Number * *(_DWORD *)(*(_QWORD *)a2 + Number L);\n  else\n    v3 = Number;\n  if (a2)\n    v4 = *(void **)(*(_QWORD *)a2 + Number L);\n  else\n    v4 = &empty_buffer;\n  init_get_bits((__int64)<span class=\"supfact\">v7</span>, (__int64)v4, v3);\n  if (!a3)\n    return fill_tone_level_array(a1, Number);\n  init_tone_level_dequantization(a1, (__int64)<span class=\"supfact\">v7</span>, a3);\n  return fill_tone_level_array(a1, Number);\n}", "code_t": "void __cdecl process_subpacket_10(QDM2Context *q, QDM2SubPNode_0 *node,\n                                  int length) {\n  int v3;\n  uint8_t *v4;\n  GetBitContext_0 <span class=\"supfact\">gb</span>;\n  if (node)\n    v3 = Number * node->packet->size;\n  else\n    v3 = Number;\n  if (node)\n    v4 = (uint8_t *)node->packet->data;\n  else\n    v4 = empty_buffer;\n  init_get_bits(&<span class=\"supfact\">gb</span>, v4, v3);\n  if (length) {\n    init_tone_level_dequantization(q, &<span class=\"supfact\">gb</span>, length);\n    fill_tone_level_array(q, Number);\n  } else {\n    fill_tone_level_array(q, Number);\n  }\n}", "var": [{"name": "v7", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; }", "ref_name": "gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; }"}], "body_in_train": true}, {"repo_owner": "kanikasaini", "repo_name": "kernel_system_call", "path": "kanikasaini/kernel_system_call/ebc1c98f4b9da81393c6cd6f9c46afdb8abcc692998f6cc2ea60e483fb0e094e", "path_in_repo": "kanikasaini/kernel_system_call/OSassgn1/tools/perf/util/config.o", "objdump": "00000000000011a0 <check_buildid_dir_config>:\n    11a0:\t55                   \tpush   %rbp\n    11a1:\t48 89 e5             \tmov    %rsp,%rbp\n    11a4:\t48 83 ec 10          \tsub    $0x10,%rsp\n    11a8:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    11af:\t00 00 \n    11b1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    11b5:\t31 c0                \txor    %eax,%eax\n    11b7:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    11be:\t00 \n    11bf:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n    11c3:\t48 89 c6             \tmov    %rax,%rsi\n    11c6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    11cb:\te8 00 00 00 00       \tcallq  11d0 <check_buildid_dir_config+0x30>\n    11d0:\t90                   \tnop\n    11d1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11d5:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    11dc:\t00 00 \n    11de:\t74 05                \tje     11e5 <check_buildid_dir_config+0x45>\n    11e0:\te8 00 00 00 00       \tcallq  11e5 <check_buildid_dir_config+0x45>\n    11e5:\tc9                   \tleaveq \n    11e6:\tc3                   \tretq   ", "code_s": "unsigned __int64 check_buildid_dir_config() {\n  char *<span class=\"supfact\">v1</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  <span class=\"supfact\">v1</span> = &buildid_dir;\n  perf_config((__int64(__fastcall *)(__int64, char *,\n                                     __int64))buildid_dir_command_config,\n              (__int64)&<span class=\"supfact\">v1</span>);\n  return __readfsqword(Number) ^ v2;\n}", "code_t": "void __cdecl check_buildid_dir_config() {\n  buildid_dir_config <span class=\"supfact\">c</span>;\n  unsigned __int64 v1;\n  v1 = __readfsqword(Number);\n  <span class=\"supfact\">c</span>.dir = &buildid_dir;\n  perf_config((config_fn_t)buildid_dir_command_config, &<span class=\"supfact\">c</span>);\n}", "var": [{"name": "v1", "type": "struct buildid_dir_config { char * dir; }", "ref_name": "c", "ref_type": "struct buildid_dir_config { char * dir; }"}], "body_in_train": true}, {"repo_owner": "juj", "repo_name": "posixtestsuite", "path": "juj/posixtestsuite/53c057f591d4792e4e3db89b0c47abaf573065ebb4773ce826784620a3693ef8", "path_in_repo": "juj/posixtestsuite//conformance/interfaces/sigaction/12-13.test", "objdump": "0000000000401208 <main>:\n  401208:\t55                   \tpush   %rbp\n  401209:\t48 89 e5             \tmov    %rsp,%rbp\n  40120c:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  401213:\t48 c7 85 60 ff ff ff \tmovq   $0x401192,-0xa0(%rbp)\n  40121a:\t92 11 40 00 \n  40121e:\tc7 45 e8 00 00 00 08 \tmovl   $0x8000000,-0x18(%rbp)\n  401225:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  40122c:\t48 83 c0 08          \tadd    $0x8,%rax\n  401230:\t48 89 c7             \tmov    %rax,%rdi\n  401233:\te8 28 fe ff ff       \tcallq  401060 <sigemptyset@plt>\n  401238:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  40123f:\tba 00 00 00 00       \tmov    $0x0,%edx\n  401244:\t48 89 c6             \tmov    %rax,%rsi\n  401247:\tbf 0f 00 00 00       \tmov    $0xf,%edi\n  40124c:\te8 ff fd ff ff       \tcallq  401050 <sigaction@plt>\n  401251:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  401254:\t75 14                \tjne    40126a <main+0x62>\n  401256:\tbf 18 20 40 00       \tmov    $0x402018,%edi\n  40125b:\te8 20 fe ff ff       \tcallq  401080 <perror@plt>\n  401260:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  401265:\te9 97 00 00 00       \tjmpq   401301 <main+0xf9>\n  40126a:\tbf 00 20 00 00       \tmov    $0x2000,%edi\n  40126f:\te8 fc fd ff ff       \tcallq  401070 <malloc@plt>\n  401274:\t48 89 05 05 2e 00 00 \tmov    %rax,0x2e05(%rip)        # 404080 <alt_ss>\n  40127b:\t48 8b 05 fe 2d 00 00 \tmov    0x2dfe(%rip),%rax        # 404080 <alt_ss>\n  401282:\t48 85 c0             \ttest   %rax,%rax\n  401285:\t75 11                \tjne    401298 <main+0x90>\n  401287:\tbf 18 20 40 00       \tmov    $0x402018,%edi\n  40128c:\te8 ef fd ff ff       \tcallq  401080 <perror@plt>\n  401291:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  401296:\teb 69                \tjmp    401301 <main+0xf9>\n  401298:\t48 c7 05 ed 2d 00 00 \tmovq   $0x2000,0x2ded(%rip)        # 404090 <alt_ss+0x10>\n  40129f:\t00 20 00 00 \n  4012a3:\tc7 05 db 2d 00 00 00 \tmovl   $0x0,0x2ddb(%rip)        # 404088 <alt_ss+0x8>\n  4012aa:\t00 00 00 \n  4012ad:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4012b2:\tbf 80 40 40 00       \tmov    $0x404080,%edi\n  4012b7:\te8 e4 fd ff ff       \tcallq  4010a0 <sigaltstack@plt>\n  4012bc:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4012bf:\t75 11                \tjne    4012d2 <main+0xca>\n  4012c1:\tbf 18 20 40 00       \tmov    $0x402018,%edi\n  4012c6:\te8 b5 fd ff ff       \tcallq  401080 <perror@plt>\n  4012cb:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4012d0:\teb 2f                \tjmp    401301 <main+0xf9>\n  4012d2:\tbf 0f 00 00 00       \tmov    $0xf,%edi\n  4012d7:\te8 54 fd ff ff       \tcallq  401030 <raise@plt>\n  4012dc:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4012df:\t75 11                \tjne    4012f2 <main+0xea>\n  4012e1:\tbf 18 20 40 00       \tmov    $0x402018,%edi\n  4012e6:\te8 95 fd ff ff       \tcallq  401080 <perror@plt>\n  4012eb:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4012f0:\teb 0f                \tjmp    401301 <main+0xf9>\n  4012f2:\tbf 63 20 40 00       \tmov    $0x402063,%edi\n  4012f7:\te8 44 fd ff ff       \tcallq  401040 <puts@plt>\n  4012fc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401301:\tc9                   \tleaveq \n  401302:\tc3                   \tretq   \n  401303:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  40130a:\t00 00 00 \n  40130d:\t0f 1f 00             \tnopl   (%rax)", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  struct sigaction <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span>.sa_handler = (__sighandler_t)handler;\n  <span class=\"supfact\">v4</span>.sa_flags = Number;\n  sigemptyset(&<span class=\"supfact\">v4</span>.sa_mask);\n  if (sigaction(Number, &<span class=\"supfact\">v4</span>, Number L) == Number ||\n      (alt_ss.ss_sp = malloc(Number)) == Number L ||\n      (qword_404090 = Number, dword_404088 = Number,\n       sigaltstack(&alt_ss, Number L) == Number) ||\n      raise(Number) == Number) {\n    perror(String);\n    result = Number;\n  } else {\n    puts(String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  sigaction <span class=\"supfact\">act</span>;\n  <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)handler;\n  <span class=\"supfact\">act</span>.sa_flags = Number;\n  sigemptyset(&<span class=\"supfact\">act</span>.sa_mask);\n  if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L) == Number ||\n      (alt_ss.ss_sp = malloc(Number)) == Number L ||\n      (alt_ss.ss_size = Number, alt_ss.ss_flags = Number,\n       sigaltstack((const struct sigaltstack *)&alt_ss, Number L) == Number) ||\n      raise(Number) == Number) {\n    perror(String);\n    result = Number;\n  } else {\n    puts(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": true}, {"repo_owner": "KorolevaYana", "repo_name": "OS", "path": "KorolevaYana/OS/8bbedd3253fbf649fcd4e5064ab8fff58a83f533e114f4317cd045c6d45d5c9e", "path_in_repo": "KorolevaYana/OS/netsh/netsh", "objdump": "0000000000408244 <_ZNSt3mapIi6clientSt4lessIiESaISt4pairIKiS0_EEEixERS4_>:\n  408244:\t55                   \tpush   %rbp\n  408245:\t48 89 e5             \tmov    %rsp,%rbp\n  408248:\t53                   \tpush   %rbx\n  408249:\t48 83 ec 48          \tsub    $0x48,%rsp\n  40824d:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  408251:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  408255:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  408259:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40825d:\t48 89 d6             \tmov    %rdx,%rsi\n  408260:\t48 89 c7             \tmov    %rax,%rdi\n  408263:\te8 d4 06 00 00       \tcallq  40893c <_ZNSt3mapIi6clientSt4lessIiESaISt4pairIKiS0_EEE11lower_boundERS4_>\n  408268:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  40826c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  408270:\t48 89 c7             \tmov    %rax,%rdi\n  408273:\te8 1a 03 00 00       \tcallq  408592 <_ZNSt3mapIi6clientSt4lessIiESaISt4pairIKiS0_EEE3endEv>\n  408278:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  40827c:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  408280:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  408284:\t48 89 d6             \tmov    %rdx,%rsi\n  408287:\t48 89 c7             \tmov    %rax,%rdi\n  40828a:\te8 d2 06 00 00       \tcallq  408961 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKi6clientEES6_>\n  40828f:\t84 c0                \ttest   %al,%al\n  408291:\t75 32                \tjne    4082c5 <_ZNSt3mapIi6clientSt4lessIiESaISt4pairIKiS0_EEEixERS4_+0x81>\n  408293:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  408297:\t48 89 c7             \tmov    %rax,%rdi\n  40829a:\te8 e5 06 00 00       \tcallq  408984 <_ZNKSt3mapIi6clientSt4lessIiESaISt4pairIKiS0_EEE8key_compEv>\n  40829f:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  4082a3:\t48 89 c7             \tmov    %rax,%rdi\n  4082a6:\te8 59 03 00 00       \tcallq  408604 <_ZNKSt17_Rb_tree_iteratorISt4pairIKi6clientEEdeEv>\n  4082ab:\t48 89 c2             \tmov    %rax,%rdx\n  4082ae:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n  4082b2:\t48 8d 45 de          \tlea    -0x22(%rbp),%rax\n  4082b6:\t48 89 ce             \tmov    %rcx,%rsi\n  4082b9:\t48 89 c7             \tmov    %rax,%rdi\n  4082bc:\te8 e5 06 00 00       \tcallq  4089a6 <_ZNKSt4lessIiEclERKiS2_>\n  4082c1:\t84 c0                \ttest   %al,%al\n  4082c3:\t74 07                \tje     4082cc <_ZNSt3mapIi6clientSt4lessIiESaISt4pairIKiS0_EEEixERS4_+0x88>\n  4082c5:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4082ca:\teb 05                \tjmp    4082d1 <_ZNSt3mapIi6clientSt4lessIiESaISt4pairIKiS0_EEEixERS4_+0x8d>\n  4082cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4082d1:\t84 c0                \ttest   %al,%al\n  4082d3:\t74 50                \tje     408325 <_ZNSt3mapIi6clientSt4lessIiESaISt4pairIKiS0_EEEixERS4_+0xe1>\n  4082d5:\t48 8b 5d b8          \tmov    -0x48(%rbp),%rbx\n  4082d9:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  4082dd:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4082e1:\t48 89 d6             \tmov    %rdx,%rsi\n  4082e4:\t48 89 c7             \tmov    %rax,%rdi\n  4082e7:\te8 de 06 00 00       \tcallq  4089ca <_ZNSt5tupleIJRKiEEC1IvLb1EEES1_>\n  4082ec:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n  4082f0:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  4082f4:\t48 89 d6             \tmov    %rdx,%rsi\n  4082f7:\t48 89 c7             \tmov    %rax,%rdi\n  4082fa:\te8 f1 06 00 00       \tcallq  4089f0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKi6clientEEC1ERKSt17_Rb_tree_iteratorIS3_E>\n  4082ff:\t48 8d 4d df          \tlea    -0x21(%rbp),%rcx\n  408303:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  408307:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40830b:\t49 89 c8             \tmov    %rcx,%r8\n  40830e:\t48 89 d1             \tmov    %rdx,%rcx\n  408311:\tba 38 d2 40 00       \tmov    $0x40d238,%edx\n  408316:\t48 89 c6             \tmov    %rax,%rsi\n  408319:\t48 89 df             \tmov    %rbx,%rdi\n  40831c:\te8 ed 06 00 00       \tcallq  408a0e <_ZNSt8_Rb_treeIiSt4pairIKi6clientESt10_Select1stIS3_ESt4lessIiESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>\n  408321:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  408325:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  408329:\t48 89 c7             \tmov    %rax,%rdi\n  40832c:\te8 d3 02 00 00       \tcallq  408604 <_ZNKSt17_Rb_tree_iteratorISt4pairIKi6clientEEdeEv>\n  408331:\t48 83 c0 08          \tadd    $0x8,%rax\n  408335:\t48 83 c4 48          \tadd    $0x48,%rsp\n  408339:\t5b                   \tpop    %rbx\n  40833a:\t5d                   \tpop    %rbp\n  40833b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std map<int, client> operator[](__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 v5;\n  __int64 v6;\n  char <span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>;\n  char <span class=\"supfact\">v9</span>[Number];\n  __int64 v10[Number];\n  v5 = std map<int, client> lower_bound(a1, a2);\n  v6 = std map<int, client> end(a1);\n  if ((unsigned __int8)std operator==(&v5, &v6) ||\n      (std map<int, client> key_comp(a1),\n       v2 = std _Rb_tree_iterator<std pair<int const, client>> operator*(&v5),\n       (unsigned __int8)std less<int> operator()(&<span class=\"supfact\">v7</span>, a2,\n                                                 v2))) {\n    std tuple<int const &> tuple<void, true>(<span class=\"supfact\">v9</span>, a2);\n    std _Rb_tree_const_iterator<std pair<int const, client>>\n        _Rb_tree_const_iterator(v10, &v5);\n    v5 = std _Rb_tree<int, std pair<int const, client>,\n                      std _Select1st<std pair<int const, client>>,\n                      std less<int>, std allocator<std pair<int const, client>>>\n    _M_emplace_hint_unique<std piecewise_construct_t const &,\n                           std tuple<int const &>, std tuple<>>(\n        a1, v10[Number], &std piecewise_construct, <span class=\"supfact\">v9</span>,\n        &<span class=\"supfact\">v8</span>);\n  }\n  return std _Rb_tree_iterator<std pair<int const, client>> operator*(&v5) +\n         Number;\n}", "code_t": "std map<int, client> mapped_type *__cdecl std map<int, client>\noperator[](std map<int, client> *const this,\n           const std map<int, client> key_type *__k) {\n  std _Rb_tree_iterator<std pair<int const, client>> reference v2;\n  const std piecewise_construct_t *v4;\n  std map<int, client> iterator __i;\n  std _Rb_tree_iterator<std pair<int const, client>> _Self __y;\n  std less<int> <span class=\"supfact\">v8</span>;\n  std tuple<> <span class=\"supfact\">v9</span>;\n  std tuple<int const &> <span class=\"supfact\">v10</span>;\n  std _Rb_tree_const_iterator<std pair<int const, client>> __pos;\n  __i._M_node = std map<int, client> lower_bound(this, __k)._M_node;\n  __y._M_node = std map<int, client> end(this)._M_node;\n  if (std operator==(&__i, &__y) ||\n      (std map<int, client> key_comp(this),\n       v2 = std _Rb_tree_iterator<std pair<int const, client>> operator*(&__i),\n       std less<int> operator()(&<span class=\"supfact\">v8</span>, __k, &v2->first))) {\n    std tuple<int const &> tuple<void, true>(&<span class=\"supfact\">v10</span>, __k);\n    std _Rb_tree_const_iterator<std pair<int const, client>>\n        _Rb_tree_const_iterator(&__pos, &__i);\n    __i._M_node =\n        std _Rb_tree<int, std pair<int const, client>,\n                     std _Select1st<std pair<int const, client>>, std less<int>,\n                     std allocator<std pair<int const, client>>>\n        _M_emplace_hint_unique<std piecewise_construct_t const &,\n                               std tuple<int const &>, std tuple<>>(\n            &this->_M_t, __pos, &std piecewise_construct, &<span class=\"supfact\">v10</span>,\n            &<span class=\"supfact\">v9</span>, v4, (std tuple<int const &> *)__k,\n            (std tuple<> *)this)\n            ._M_node;\n  }\n  return &std _Rb_tree_iterator<std pair<int const, client>> operator*(&__i)\n              ->second;\n}", "var": [{"name": "v9", "type": "char[8]", "ref_name": "v10", "ref_type": "struct std::tuple<int const&> { std::_Tuple_impl<0,int const&> baseclass_0; }"}, {"name": "v8", "type": "char", "ref_name": "v9", "ref_type": "struct std::tuple<> { __int8[1] gap0; }"}, {"name": "v7", "type": "char", "ref_name": "v8", "ref_type": "struct std::less<int> { std::binary_function<int,int,bool> baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "josn-jys", "repo_name": "NEM-Code_Opensource-EMUI5.0", "path": "josn-jys/NEM-Code_Opensource-EMUI5.0/ea4de80d6e2fe235af11e6fa452c0a57bc88d0d58c079316fd6fecd73ff0c3c9", "path_in_repo": "josn-jys/NEM-Code_Opensource-EMUI5.0/kernel/tools/testing/selftests/timers/alarmtimer-suspend", "objdump": "00000000004012c8 <sigalarm>:\n  4012c8:\t55                   \tpush   %rbp\n  4012c9:\t48 89 e5             \tmov    %rsp,%rbp\n  4012cc:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4012d0:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n  4012d3:\t8b 05 f7 2d 00 00    \tmov    0x2df7(%rip),%eax        # 4040d0 <alarm_clock_id>\n  4012d9:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  4012dd:\t48 89 d6             \tmov    %rdx,%rsi\n  4012e0:\t89 c7                \tmov    %eax,%edi\n  4012e2:\te8 a9 fd ff ff       \tcallq  401090 <clock_gettime@plt>\n  4012e7:\t8b 05 03 2e 00 00    \tmov    0x2e03(%rip),%eax        # 4040f0 <alarmcount>\n  4012ed:\t83 c0 01             \tadd    $0x1,%eax\n  4012f0:\t89 05 fa 2d 00 00    \tmov    %eax,0x2dfa(%rip)        # 4040f0 <alarmcount>\n  4012f6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4012fa:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4012fe:\t48 8b 3d db 2d 00 00 \tmov    0x2ddb(%rip),%rdi        # 4040e0 <start_time>\n  401305:\t48 8b 35 dc 2d 00 00 \tmov    0x2ddc(%rip),%rsi        # 4040e8 <start_time+0x8>\n  40130c:\t48 89 d1             \tmov    %rdx,%rcx\n  40130f:\t48 89 c2             \tmov    %rax,%rdx\n  401312:\te8 55 ff ff ff       \tcallq  40126c <timespec_sub>\n  401317:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40131b:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  40131f:\t8b 05 cb 2d 00 00    \tmov    0x2dcb(%rip),%eax        # 4040f0 <alarmcount>\n  401325:\t48 98                \tcltq   \n  401327:\t48 b9 00 d6 11 7e 03 \tmovabs $0x37e11d600,%rcx\n  40132e:\t00 00 00 \n  401331:\t48 0f af c1          \timul   %rcx,%rax\n  401335:\t48 29 c2             \tsub    %rax,%rdx\n  401338:\t48 89 d0             \tmov    %rdx,%rax\n  40133b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40133f:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  401343:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  401347:\t8b 05 a3 2d 00 00    \tmov    0x2da3(%rip),%eax        # 4040f0 <alarmcount>\n  40134d:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n  401351:\t49 89 f0             \tmov    %rsi,%r8\n  401354:\t89 c6                \tmov    %eax,%esi\n  401356:\tbf 50 21 40 00       \tmov    $0x402150,%edi\n  40135b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401360:\te8 fb fc ff ff       \tcallq  401060 <printf@plt>\n  401365:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401369:\tba 00 28 6b ee       \tmov    $0xee6b2800,%edx\n  40136e:\t48 39 d0             \tcmp    %rdx,%rax\n  401371:\t76 16                \tjbe    401389 <sigalarm+0xc1>\n  401373:\tbf 75 21 40 00       \tmov    $0x402175,%edi\n  401378:\te8 b3 fc ff ff       \tcallq  401030 <puts@plt>\n  40137d:\tc7 05 19 2d 00 00 ff \tmovl   $0xffffffff,0x2d19(%rip)        # 4040a0 <final_ret>\n  401384:\tff ff ff \n  401387:\teb 0a                \tjmp    401393 <sigalarm+0xcb>\n  401389:\tbf 7c 21 40 00       \tmov    $0x40217c,%edi\n  40138e:\te8 9d fc ff ff       \tcallq  401030 <puts@plt>\n  401393:\t90                   \tnop\n  401394:\tc9                   \tleaveq \n  401395:\tc3                   \tretq   ", "code_s": "int sigalarm() {\n  int result;\n  struct timespec <span class=\"supfact\">tp</span>;\n  unsigned __int64 v2;\n  clock_gettime(alarm_clock_id, &<span class=\"supfact\">tp</span>);\n  ++alarmcount;\n  v2 = timespec_sub(start_time.tv_sec, start_time.tv_nsec,\n                    <span class=\"supfact\">tp</span>.tv_sec, <span class=\"supfact\">tp</span>.tv_nsec) -\n       Number L * alarmcount;\n  printf(String, (unsigned int)alarmcount, <span class=\"supfact\">tp</span>.tv_sec,\n         <span class=\"supfact\">tp</span>.tv_nsec, v2);\n  if (v2 <= Number)\n    return puts(String);\n  result = puts(String);\n  final_ret = Number;\n  return result;\n}", "code_t": "void __cdecl sigalarm(int signo) {\n  timespec <span class=\"supfact\">ts</span>;\n  __int64 delta_ns;\n  clock_gettime(alarm_clock_id, &<span class=\"supfact\">ts</span>);\n  ++alarmcount;\n  delta_ns =\n      timespec_sub(start_time, <span class=\"supfact\">ts</span>) - Number L * alarmcount;\n  printf(String, (unsigned int)alarmcount, <span class=\"supfact\">ts</span>.tv_sec,\n         <span class=\"supfact\">ts</span>.tv_nsec, delta_ns);\n  if ((unsigned __int64)delta_ns <= Number) {\n    puts(String);\n  } else {\n    puts(String);\n    final_ret = Number;\n  }\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "threeearcat", "repo_name": "repro-guest", "path": "threeearcat/repro-guest/aea8740642b09c40d0a4e6f62417e2d65ee554e88b3fcba3e265142c2d651e8a", "path_in_repo": "threeearcat/repro-guest/tools/testing/selftests/x86/test_vsyscall_64", "objdump": "00000000004017e0 <test_gtod>:\n  4017e0:\t55                   \tpush   %rbp\n  4017e1:\t48 89 e5             \tmov    %rsp,%rbp\n  4017e4:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n  4017e8:\t48 c7 45 f8 ff ff ff \tmovq   $0xffffffffffffffff,-0x8(%rbp)\n  4017ef:\tff \n  4017f0:\t48 c7 45 f0 ff ff ff \tmovq   $0xffffffffffffffff,-0x10(%rbp)\n  4017f7:\tff \n  4017f8:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  4017ff:\tbf fb 32 40 00       \tmov    $0x4032fb,%edi\n  401804:\te8 37 f8 ff ff       \tcallq  401040 <puts@plt>\n  401809:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n  40180d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  401811:\t48 89 d6             \tmov    %rdx,%rsi\n  401814:\t48 89 c7             \tmov    %rax,%rdi\n  401817:\te8 9c fd ff ff       \tcallq  4015b8 <sys_gtod>\n  40181c:\t48 85 c0             \ttest   %rax,%rax\n  40181f:\t74 14                \tje     401835 <test_gtod+0x55>\n  401821:\tbe 15 33 40 00       \tmov    $0x403315,%esi\n  401826:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40182b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401830:\te8 fb f8 ff ff       \tcallq  401130 <err@plt>\n  401835:\t48 8b 05 c4 49 00 00 \tmov    0x49c4(%rip),%rax        # 406200 <vdso_gtod>\n  40183c:\t48 85 c0             \ttest   %rax,%rax\n  40183f:\t74 1b                \tje     40185c <test_gtod+0x7c>\n  401841:\t48 8b 0d b8 49 00 00 \tmov    0x49b8(%rip),%rcx        # 406200 <vdso_gtod>\n  401848:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n  40184c:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  401850:\t48 89 d6             \tmov    %rdx,%rsi\n  401853:\t48 89 c7             \tmov    %rax,%rdi\n  401856:\tff d1                \tcallq  *%rcx\n  401858:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40185c:\t0f b6 05 9e 48 00 00 \tmovzbl 0x489e(%rip),%eax        # 406101 <vsyscall_map_x>\n  401863:\t84 c0                \ttest   %al,%al\n  401865:\t74 1b                \tje     401882 <test_gtod+0xa2>\n  401867:\t48 c7 c1 00 00 60 ff \tmov    $0xffffffffff600000,%rcx\n  40186e:\t48 8d 55 88          \tlea    -0x78(%rbp),%rdx\n  401872:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  401876:\t48 89 d6             \tmov    %rdx,%rsi\n  401879:\t48 89 c7             \tmov    %rax,%rdi\n  40187c:\tff d1                \tcallq  *%rcx\n  40187e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401882:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n  401886:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40188a:\t48 89 d6             \tmov    %rdx,%rsi\n  40188d:\t48 89 c7             \tmov    %rax,%rdi\n  401890:\te8 23 fd ff ff       \tcallq  4015b8 <sys_gtod>\n  401895:\t48 85 c0             \ttest   %rax,%rax\n  401898:\t74 14                \tje     4018ae <test_gtod+0xce>\n  40189a:\tbe 15 33 40 00       \tmov    $0x403315,%esi\n  40189f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4018a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4018a9:\te8 82 f8 ff ff       \tcallq  401130 <err@plt>\n  4018ae:\t48 8b 05 4b 49 00 00 \tmov    0x494b(%rip),%rax        # 406200 <vdso_gtod>\n  4018b5:\t48 85 c0             \ttest   %rax,%rax\n  4018b8:\t74 4d                \tje     401907 <test_gtod+0x127>\n  4018ba:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4018bf:\t75 2c                \tjne    4018ed <test_gtod+0x10d>\n  4018c1:\t48 8d 7d 90          \tlea    -0x70(%rbp),%rdi\n  4018c5:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n  4018c9:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n  4018cd:\t48 8d 75 c0          \tlea    -0x40(%rbp),%rsi\n  4018d1:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4018d5:\t49 89 f9             \tmov    %rdi,%r9\n  4018d8:\t49 89 c8             \tmov    %rcx,%r8\n  4018db:\tb9 2a 33 40 00       \tmov    $0x40332a,%ecx\n  4018e0:\t48 89 c7             \tmov    %rax,%rdi\n  4018e3:\te8 e1 fd ff ff       \tcallq  4016c9 <check_gtod>\n  4018e8:\t01 45 ec             \tadd    %eax,-0x14(%rbp)\n  4018eb:\teb 1a                \tjmp    401907 <test_gtod+0x127>\n  4018ed:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4018f1:\t48 89 c6             \tmov    %rax,%rsi\n  4018f4:\tbf 30 33 40 00       \tmov    $0x403330,%edi\n  4018f9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4018fe:\te8 7d f7 ff ff       \tcallq  401080 <printf@plt>\n  401903:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  401907:\t0f b6 05 f3 47 00 00 \tmovzbl 0x47f3(%rip),%eax        # 406101 <vsyscall_map_x>\n  40190e:\t84 c0                \ttest   %al,%al\n  401910:\t74 4d                \tje     40195f <test_gtod+0x17f>\n  401912:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  401917:\t75 2c                \tjne    401945 <test_gtod+0x165>\n  401919:\t48 8d 7d 88          \tlea    -0x78(%rbp),%rdi\n  40191d:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n  401921:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n  401925:\t48 8d 75 c0          \tlea    -0x40(%rbp),%rsi\n  401929:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  40192d:\t49 89 f9             \tmov    %rdi,%r9\n  401930:\t49 89 c8             \tmov    %rcx,%r8\n  401933:\tb9 58 33 40 00       \tmov    $0x403358,%ecx\n  401938:\t48 89 c7             \tmov    %rax,%rdi\n  40193b:\te8 89 fd ff ff       \tcallq  4016c9 <check_gtod>\n  401940:\t01 45 ec             \tadd    %eax,-0x14(%rbp)\n  401943:\teb 1a                \tjmp    40195f <test_gtod+0x17f>\n  401945:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401949:\t48 89 c6             \tmov    %rax,%rsi\n  40194c:\tbf 68 33 40 00       \tmov    $0x403368,%edi\n  401951:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401956:\te8 25 f7 ff ff       \tcallq  401080 <printf@plt>\n  40195b:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  40195f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  401962:\tc9                   \tleaveq \n  401963:\tc3                   \tretq   ", "code_s": "__int64 test_gtod() {\n  int v0;\n  int v1;\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  _QWORD <span class=\"supfact\">v6</span>[Number];\n  _QWORD <span class=\"supfact\">v7</span>[Number];\n  _QWORD <span class=\"supfact\">v8</span>[Number];\n  _QWORD <span class=\"supfact\">v9</span>[Number];\n  unsigned int v10;\n  __int64 v11;\n  __int64 v12;\n  v12 = Number;\n  v11 = Number;\n  v10 = Number;\n  puts(String);\n  if (sys_gtod((__int64)<span class=\"supfact\">v9</span>, (__int64)&<span class=\"supfact\">v5</span>))\n    err(Number, String);\n  if (vdso_gtod)\n    v12 = vdso_gtod(<span class=\"supfact\">v7</span>, &<span class=\"supfact\">v4</span>);\n  if (vsyscall_map_x)\n    v11 = MEMORY[Number](<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v3</span>);\n  if (sys_gtod((__int64)<span class=\"supfact\">v8</span>, (__int64)&<span class=\"supfact\">v5</span>))\n    err(Number, String);\n  if (vdso_gtod) {\n    if (v12) {\n      printf(String, v12);\n      ++v10;\n    } else {\n      v0 = check_gtod(<span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>,\n                      &<span class=\"supfact\">v5</span>, String, <span class=\"supfact\">v7</span>,\n                      &<span class=\"supfact\">v4</span>);\n      v10 += v0;\n    }\n  }\n  if (vsyscall_map_x) {\n    if (v11) {\n      printf(String, v11);\n      ++v10;\n    } else {\n      v1 = check_gtod(<span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>,\n                      &<span class=\"supfact\">v5</span>, String, <span class=\"supfact\">v6</span>,\n                      &<span class=\"supfact\">v3</span>);\n      v10 += v1;\n    }\n  }\n  return v10;\n}", "code_t": "int __cdecl test_gtod() {\n  int v0;\n  int v1;\n  timezone <span class=\"supfact\">tz_vsys</span>;\n  timezone <span class=\"supfact\">tz_vdso</span>;\n  timezone <span class=\"supfact\">tz_sys</span>;\n  timeval <span class=\"supfact\">tv_vsys</span>;\n  timeval <span class=\"supfact\">tv_vdso</span>;\n  timeval <span class=\"supfact\">tv_sys2</span>;\n  timeval <span class=\"supfact\">tv_sys1</span>;\n  int nerrs;\n  __int64 ret_vsys;\n  __int64 ret_vdso;\n  ret_vdso = Number;\n  ret_vsys = Number;\n  nerrs = Number;\n  puts(String);\n  if (sys_gtod(&<span class=\"supfact\">tv_sys1</span>, &<span class=\"supfact\">tz_sys</span>))\n    err(Number, String);\n  if (vdso_gtod)\n    ret_vdso = vdso_gtod(&<span class=\"supfact\">tv_vdso</span>, &<span class=\"supfact\">tz_vdso</span>);\n  if (vsyscall_map_x)\n    ret_vsys =\n        MEMORY[Number](&<span class=\"supfact\">tv_vsys</span>, &<span class=\"supfact\">tz_vsys</span>);\n  if (sys_gtod(&<span class=\"supfact\">tv_sys2</span>, &<span class=\"supfact\">tz_sys</span>))\n    err(Number, String);\n  if (vdso_gtod) {\n    if (ret_vdso) {\n      printf(String, ret_vdso);\n      ++nerrs;\n    } else {\n      v0 = check_gtod(&<span class=\"supfact\">tv_sys1</span>, &<span class=\"supfact\">tv_sys2</span>,\n                      &<span class=\"supfact\">tz_sys</span>, String, &<span class=\"supfact\">tv_vdso</span>,\n                      &<span class=\"supfact\">tz_vdso</span>);\n      nerrs += v0;\n    }\n  }\n  if (vsyscall_map_x) {\n    if (ret_vsys) {\n      printf(String, ret_vsys);\n      ++nerrs;\n    } else {\n      v1 = check_gtod(&<span class=\"supfact\">tv_sys1</span>, &<span class=\"supfact\">tv_sys2</span>,\n                      &<span class=\"supfact\">tz_sys</span>, String, &<span class=\"supfact\">tv_vsys</span>,\n                      &<span class=\"supfact\">tz_vsys</span>);\n      nerrs += v1;\n    }\n  }\n  return nerrs;\n}", "var": [{"name": "v9", "type": "__va_list_tag[1]", "ref_name": "tv_sys1", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v8", "type": "char[16]", "ref_name": "tv_sys2", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v7", "type": "char[16]", "ref_name": "tv_vdso", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v6", "type": "char[16]", "ref_name": "tv_vsys", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v5", "type": "int", "ref_name": "tz_sys", "ref_type": "struct timezone { int tz_minuteswest; int tz_dsttime; }"}, {"name": "v4", "type": "int", "ref_name": "tz_vdso", "ref_type": "struct timezone { int tz_minuteswest; int tz_dsttime; }"}, {"name": "v3", "type": "int", "ref_name": "tz_vsys", "ref_type": "struct timezone { int tz_minuteswest; int tz_dsttime; }"}], "body_in_train": false}, {"repo_owner": "moseymosey", "repo_name": "netpbm", "path": "moseymosey/netpbm/136429587717dd6209cf00f7d7e63f53ea3b0cf0d18fbab69834964e20d50021", "path_in_repo": "moseymosey/netpbm/other/pamx/pamx", "objdump": "00000000004109b5 <optStructTblToEntryTbl>:\n  4109b5:\t55                   \tpush   %rbp\n  4109b6:\t48 89 e5             \tmov    %rsp,%rbp\n  4109b9:\t53                   \tpush   %rbx\n  4109ba:\t48 83 ec 68          \tsub    $0x68,%rsp\n  4109be:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  4109c2:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  4109c9:\teb 04                \tjmp    4109cf <optStructTblToEntryTbl+0x1a>\n  4109cb:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  4109cf:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4109d2:\t48 63 d0             \tmovslq %eax,%rdx\n  4109d5:\t48 89 d0             \tmov    %rdx,%rax\n  4109d8:\t48 c1 e0 02          \tshl    $0x2,%rax\n  4109dc:\t48 01 d0             \tadd    %rdx,%rax\n  4109df:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4109e3:\t48 89 c2             \tmov    %rax,%rdx\n  4109e6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4109ea:\t48 01 d0             \tadd    %rdx,%rax\n  4109ed:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4109f0:\t85 c0                \ttest   %eax,%eax\n  4109f2:\t74 09                \tje     4109fd <optStructTblToEntryTbl+0x48>\n  4109f4:\t81 7d ec f3 01 00 00 \tcmpl   $0x1f3,-0x14(%rbp)\n  4109fb:\t7e ce                \tjle    4109cb <optStructTblToEntryTbl+0x16>\n  4109fd:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  410a00:\t83 c0 01             \tadd    $0x1,%eax\n  410a03:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  410a06:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  410a09:\t48 63 d0             \tmovslq %eax,%rdx\n  410a0c:\t48 89 d0             \tmov    %rdx,%rax\n  410a0f:\t48 01 c0             \tadd    %rax,%rax\n  410a12:\t48 01 d0             \tadd    %rdx,%rax\n  410a15:\t48 c1 e0 04          \tshl    $0x4,%rax\n  410a19:\t48 89 c7             \tmov    %rax,%rdi\n  410a1c:\te8 5f 27 ff ff       \tcallq  403180 <malloc@plt>\n  410a21:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  410a25:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  410a2a:\t0f 84 a9 00 00 00    \tje     410ad9 <optStructTblToEntryTbl+0x124>\n  410a30:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  410a37:\te9 91 00 00 00       \tjmpq   410acd <optStructTblToEntryTbl+0x118>\n  410a3c:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  410a3f:\t48 63 d0             \tmovslq %eax,%rdx\n  410a42:\t48 89 d0             \tmov    %rdx,%rax\n  410a45:\t48 c1 e0 02          \tshl    $0x2,%rax\n  410a49:\t48 01 d0             \tadd    %rdx,%rax\n  410a4c:\t48 c1 e0 03          \tshl    $0x3,%rax\n  410a50:\t48 89 c2             \tmov    %rax,%rdx\n  410a53:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  410a57:\t48 01 c2             \tadd    %rax,%rdx\n  410a5a:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  410a5d:\t48 63 c8             \tmovslq %eax,%rcx\n  410a60:\t48 89 c8             \tmov    %rcx,%rax\n  410a63:\t48 01 c0             \tadd    %rax,%rax\n  410a66:\t48 01 c8             \tadd    %rcx,%rax\n  410a69:\t48 c1 e0 04          \tshl    $0x4,%rax\n  410a6d:\t48 89 c1             \tmov    %rax,%rcx\n  410a70:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  410a74:\t48 8d 1c 01          \tlea    (%rcx,%rax,1),%rbx\n  410a78:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  410a7c:\t48 83 ec 08          \tsub    $0x8,%rsp\n  410a80:\tff 72 20             \tpushq  0x20(%rdx)\n  410a83:\tff 72 18             \tpushq  0x18(%rdx)\n  410a86:\tff 72 10             \tpushq  0x10(%rdx)\n  410a89:\tff 72 08             \tpushq  0x8(%rdx)\n  410a8c:\tff 32                \tpushq  (%rdx)\n  410a8e:\t48 89 c7             \tmov    %rax,%rdi\n  410a91:\te8 b1 fe ff ff       \tcallq  410947 <optStructToEntry>\n  410a96:\t48 83 c4 30          \tadd    $0x30,%rsp\n  410a9a:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  410a9e:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  410aa2:\t48 89 03             \tmov    %rax,(%rbx)\n  410aa5:\t48 89 53 08          \tmov    %rdx,0x8(%rbx)\n  410aa9:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  410aad:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  410ab1:\t48 89 43 10          \tmov    %rax,0x10(%rbx)\n  410ab5:\t48 89 53 18          \tmov    %rdx,0x18(%rbx)\n  410ab9:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  410abd:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  410ac1:\t48 89 43 20          \tmov    %rax,0x20(%rbx)\n  410ac5:\t48 89 53 28          \tmov    %rdx,0x28(%rbx)\n  410ac9:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  410acd:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  410ad0:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n  410ad3:\t0f 8c 63 ff ff ff    \tjl     410a3c <optStructTblToEntryTbl+0x87>\n  410ad9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  410add:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n  410ae1:\tc9                   \tleaveq \n  410ae2:\tc3                   \tretq   ", "code_s": "char *__fastcall optStructTblToEntryTbl(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  _QWORD *v4;\n  __int64 v5;\n  char *v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 <span class=\"supfact\">v11</span>[Number];\n  __int64 v12;\n  char *v13;\n  int v14;\n  int j;\n  int i;\n  v12 = a1;\n  for (i = Number; *(_DWORD *)(Number L * i + v12 + Number) && i <= Number; ++i)\n    ;\n  v14 = i + Number;\n  v13 = (char *)malloc(Number L * (i + Number));\n  if (v13) {\n    for (j = Number; j < v14; ++j) {\n      v4 = (_QWORD *)(v12 + Number L * j);\n      v5 = Number L * j;\n      v6 = &v13[v5];\n      optStructToEntry(<span class=\"supfact\">v11</span>, a2, (__int64)v4, v5, v2, v3, *v4,\n                       v4[Number], v4[Number], v4[Number], v4[Number]);\n      v7 = <span class=\"supfact\">v11</span>[Number];\n      *(_QWORD *)v6 = <span class=\"supfact\">v11</span>[Number];\n      *((_QWORD *)v6 + Number) = v7;\n      v8 = <span class=\"supfact\">v11</span>[Number];\n      *((_QWORD *)v6 + Number) = <span class=\"supfact\">v11</span>[Number];\n      *((_QWORD *)v6 + Number) = v8;\n      v9 = <span class=\"supfact\">v11</span>[Number];\n      *((_QWORD *)v6 + Number) = <span class=\"supfact\">v11</span>[Number];\n      *((_QWORD *)v6 + Number) = v9;\n    }\n  }\n  return v13;\n}", "code_t": "optEntry *__cdecl optStructTblToEntryTbl(const optStruct *optStructTable) {\n  optEntry *v1;\n  const char *v2;\n  void *v3;\n  __int64 v4;\n  optEntry <span class=\"supfact\">v6</span>;\n  const optStruct *optStructTablea;\n  optEntry *optEntryTable;\n  int count;\n  int i_0;\n  int i;\n  optStructTablea = optStructTable;\n  for (i = Number; optStructTablea[i].type && i <= Number; ++i)\n    ;\n  count = i + Number;\n  optEntryTable = (optEntry *)malloc(Number L * (i + Number));\n  if (optEntryTable) {\n    for (i_0 = Number; i_0 < count; ++i_0) {\n      v1 = &optEntryTable[i_0];\n      optStructToEntry(&<span class=\"supfact\">v6</span>, optStructTablea[i_0]);\n      v2 = <span class=\"supfact\">v6</span>.longName;\n      *(_QWORD *)&v1->shortName = *(_QWORD *)&<span class=\"supfact\">v6</span>.shortName;\n      v1->longName = v2;\n      v3 = <span class=\"supfact\">v6</span>.arg;\n      *(_QWORD *)&v1->type = *(_QWORD *)&<span class=\"supfact\">v6</span>.type;\n      v1->arg = v3;\n      v4 = *(_QWORD *)&<span class=\"supfact\">v6</span>.flags;\n      v1->specified = <span class=\"supfact\">v6</span>.specified;\n      *(_QWORD *)&v1->flags = v4;\n    }\n  }\n  return optEntryTable;\n}", "var": [{"name": "v11", "type": "struct optEntry { char shortName; PADDING (7); const char * longName; optArgType type; PADDING (4); void * arg; unsigned int * specified; int flags; PADDING (4); }", "ref_name": "v6", "ref_type": "struct optEntry { char shortName; PADDING (7); const char * longName; optArgType type; PADDING (4); void * arg; unsigned int * specified; int flags; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "hustustor", "repo_name": "simplecfs", "path": "hustustor/simplecfs/6c5ab0dd6945359d509bb39dd892f6e9585bd63c429d2d0586134a818ccbbd9f", "path_in_repo": "hustustor/simplecfs/ext/redis/deps/lua/src/luac", "objdump": "000000000040eeae <forstat>:\n  40eeae:\t55                   \tpush   %rbp\n  40eeaf:\t48 89 e5             \tmov    %rsp,%rbp\n  40eeb2:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40eeb6:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  40eeba:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  40eebd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40eec1:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40eec5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40eec9:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  40eecd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40eed1:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40eed6:\t48 89 ce             \tmov    %rcx,%rsi\n  40eed9:\t48 89 c7             \tmov    %rax,%rdi\n  40eedc:\te8 07 db ff ff       \tcallq  40c9e8 <enterblock>\n  40eee1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40eee5:\t48 89 c7             \tmov    %rax,%rdi\n  40eee8:\te8 d1 cc 00 00       \tcallq  41bbbe <luaX_next>\n  40eeed:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40eef1:\t48 89 c7             \tmov    %rax,%rdi\n  40eef4:\te8 5e d2 ff ff       \tcallq  40c157 <str_checkname>\n  40eef9:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40eefd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40ef01:\t8b 40 10             \tmov    0x10(%rax),%eax\n  40ef04:\t3d 0b 01 00 00       \tcmp    $0x10b,%eax\n  40ef09:\t74 29                \tje     40ef34 <forstat+0x86>\n  40ef0b:\t3d 0b 01 00 00       \tcmp    $0x10b,%eax\n  40ef10:\t7f 37                \tjg     40ef49 <forstat+0x9b>\n  40ef12:\t83 f8 2c             \tcmp    $0x2c,%eax\n  40ef15:\t74 1d                \tje     40ef34 <forstat+0x86>\n  40ef17:\t83 f8 3d             \tcmp    $0x3d,%eax\n  40ef1a:\t75 2d                \tjne    40ef49 <forstat+0x9b>\n  40ef1c:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  40ef1f:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  40ef23:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40ef27:\t48 89 ce             \tmov    %rcx,%rsi\n  40ef2a:\t48 89 c7             \tmov    %rax,%rdi\n  40ef2d:\te8 51 fc ff ff       \tcallq  40eb83 <fornum>\n  40ef32:\teb 26                \tjmp    40ef5a <forstat+0xac>\n  40ef34:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  40ef38:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40ef3c:\t48 89 d6             \tmov    %rdx,%rsi\n  40ef3f:\t48 89 c7             \tmov    %rax,%rdi\n  40ef42:\te8 c4 fd ff ff       \tcallq  40ed0b <forlist>\n  40ef47:\teb 11                \tjmp    40ef5a <forstat+0xac>\n  40ef49:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40ef4d:\tbe a1 d6 41 00       \tmov    $0x41d6a1,%esi\n  40ef52:\t48 89 c7             \tmov    %rax,%rdi\n  40ef55:\te8 89 b4 00 00       \tcallq  41a3e3 <luaX_syntaxerror>\n  40ef5a:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  40ef5d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40ef61:\t89 d1                \tmov    %edx,%ecx\n  40ef63:\tba 08 01 00 00       \tmov    $0x108,%edx\n  40ef68:\tbe 06 01 00 00       \tmov    $0x106,%esi\n  40ef6d:\t48 89 c7             \tmov    %rax,%rdi\n  40ef70:\te8 33 d1 ff ff       \tcallq  40c0a8 <check_match>\n  40ef75:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40ef79:\t48 89 c7             \tmov    %rax,%rdi\n  40ef7c:\te8 c3 da ff ff       \tcallq  40ca44 <leaveblock>\n  40ef81:\t90                   \tnop\n  40ef82:\tc9                   \tleaveq \n  40ef83:\tc3                   \tretq   ", "code_s": "__int64 __fastcall forstat(__int64 a1, unsigned int a2) {\n  int v2;\n  char <span class=\"supfact\">v4</span>[Number];\n  __int64 v5;\n  __int64 v6;\n  v6 = *(_QWORD *)(a1 + Number);\n  enterblock(v6, (__int64)<span class=\"supfact\">v4</span>, Number);\n  luaX_next(a1);\n  v5 = str_checkname(a1);\n  v2 = *(_DWORD *)(a1 + Number);\n  if (v2 == Number)\n    goto LABEL_6;\n  if (v2 > Number)\n    goto LABEL_7;\n  if (v2 == Number) {\n  LABEL_6:\n    forlist(a1, v5);\n    goto LABEL_8;\n  }\n  if (v2 != Number)\n  LABEL_7:\n    luaX_syntaxerror(a1, String);\n  fornum(a1, v5, a2);\nLABEL_8:\n  check_match(a1, Number, Number, a2);\n  return leaveblock(v6);\n}", "code_t": "void __cdecl forstat(LexState_0 *ls, int line) {\n  int v2;\n  BlockCnt_0 <span class=\"supfact\">bl_0</span>;\n  TString_0 *varname;\n  FuncState_0 *fs_0;\n  fs_0 = ls->fs;\n  enterblock(fs_0, &<span class=\"supfact\">bl_0</span>, Number);\n  luaX_next(ls);\n  varname = str_checkname(ls);\n  v2 = ls->t.token;\n  if (v2 == Number)\n    goto LABEL_6;\n  if (v2 > Number)\n    goto LABEL_7;\n  if (v2 == Number) {\n  LABEL_6:\n    forlist(ls, varname);\n    goto LABEL_8;\n  }\n  if (v2 != Number)\n  LABEL_7:\n    luaX_syntaxerror(ls, String);\n  fornum(ls, varname, line);\nLABEL_8:\n  check_match(ls, Number, Number, line);\n  leaveblock(fs_0);\n}", "var": [{"name": "v4", "type": "struct BlockCnt_0 { BlockCnt * previous; int breaklist; lu_byte nactvar; lu_byte upval; lu_byte isbreakable; PADDING (1); }", "ref_name": "bl_0", "ref_type": "struct BlockCnt_0 { BlockCnt * previous; int breaklist; lu_byte nactvar; lu_byte upval; lu_byte isbreakable; PADDING (1); }"}], "body_in_train": true}, {"repo_owner": "becalmer", "repo_name": "vim", "path": "becalmer/vim/01d3f3d40f3ebe9089b8b4dd40139cd901b9ea46831ff7ff1bfc3c7e857d9390", "path_in_repo": "becalmer/vim/vimaux/ncurses-5.9/test/rain", "objdump": "00000000004125ca <napms>:\n  4125ca:\t55                   \tpush   %rbp\n  4125cb:\t48 89 e5             \tmov    %rsp,%rbp\n  4125ce:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4125d2:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n  4125d5:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4125d8:\t48 63 d0             \tmovslq %eax,%rdx\n  4125db:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  4125e2:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  4125e6:\tc1 fa 06             \tsar    $0x6,%edx\n  4125e9:\tc1 f8 1f             \tsar    $0x1f,%eax\n  4125ec:\t29 c2                \tsub    %eax,%edx\n  4125ee:\t89 d0                \tmov    %edx,%eax\n  4125f0:\t48 98                \tcltq   \n  4125f2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4125f6:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4125f9:\t48 63 d0             \tmovslq %eax,%rdx\n  4125fc:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  412603:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  412607:\t89 d1                \tmov    %edx,%ecx\n  412609:\tc1 f9 06             \tsar    $0x6,%ecx\n  41260c:\t99                   \tcltd   \n  41260d:\t29 d1                \tsub    %edx,%ecx\n  41260f:\t89 ca                \tmov    %ecx,%edx\n  412611:\t69 d2 e8 03 00 00    \timul   $0x3e8,%edx,%edx\n  412617:\t29 d0                \tsub    %edx,%eax\n  412619:\t89 c2                \tmov    %eax,%edx\n  41261b:\t69 c2 40 42 0f 00    \timul   $0xf4240,%edx,%eax\n  412621:\t48 98                \tcltq   \n  412623:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  412627:\teb 10                \tjmp    412639 <napms+0x6f>\n  412629:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41262d:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  412631:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  412635:\t48 89 55 f8          \tmov    %rdx,-0x8(%rbp)\n  412639:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  41263d:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  412641:\t48 89 d6             \tmov    %rdx,%rsi\n  412644:\t48 89 c7             \tmov    %rax,%rdi\n  412647:\te8 f4 fa fe ff       \tcallq  402140 <nanosleep@plt>\n  41264c:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  41264f:\t75 0c                \tjne    41265d <napms+0x93>\n  412651:\te8 0a fa fe ff       \tcallq  402060 <__errno_location@plt>\n  412656:\t8b 00                \tmov    (%rax),%eax\n  412658:\t83 f8 04             \tcmp    $0x4,%eax\n  41265b:\t74 cc                \tje     412629 <napms+0x5f>\n  41265d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  412662:\tc9                   \tleaveq \n  412663:\tc3                   \tretq   ", "code_s": "__int64 __fastcall napms(int a1) {\n  struct timespec <span class=\"supfact\">remaining</span>;\n  struct timespec <span class=\"supfact\">requested_time</span>;\n  <span class=\"supfact\">requested_time</span>.tv_sec = a1 / Number;\n  <span class=\"supfact\">requested_time</span>.tv_nsec = Number * (a1 % Number);\n  while (nanosleep(&<span class=\"supfact\">requested_time</span>,\n                   &<span class=\"supfact\">remaining</span>) == Number &&\n         *__errno_location() == Number)\n    <span class=\"supfact\">requested_time</span> = <span class=\"supfact\">remaining</span>;\n  return Number L;\n}", "code_t": "int __cdecl napms(int ms) {\n  timespec <span class=\"supfact\">remaining</span>;\n  timespec <span class=\"supfact\">request</span>;\n  <span class=\"supfact\">request</span>.tv_sec = ms / Number;\n  <span class=\"supfact\">request</span>.tv_nsec = Number * (ms % Number);\n  while (nanosleep(&<span class=\"supfact\">request</span>, &<span class=\"supfact\">remaining</span>) ==\n             Number &&\n         *__errno_location() == Number)\n    <span class=\"supfact\">request</span> = <span class=\"supfact\">remaining</span>;\n  return Number;\n}", "var": [{"name": "requested_time", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "request", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}, {"name": "remaining", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "remaining", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "Team-Proton", "repo_name": "linux-sunplus-15xx", "path": "Team-Proton/linux-sunplus-15xx/a5f6757bfa73e051327f11bdd63d5d9d65ca1e4156c45e60d8427463c16cb056", "path_in_repo": "Team-Proton/linux-sunplus-15xx/linux-4.4.7/tools/perf/util/event.o", "objdump": "0000000000000000 <rdclock>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 83 ec 20          \tsub    $0x20,%rsp\n       8:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n       f:\t00 00 \n      11:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      15:\t31 c0                \txor    %eax,%eax\n      17:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n      1b:\t48 89 c6             \tmov    %rax,%rsi\n      1e:\tbf 01 00 00 00       \tmov    $0x1,%edi\n      23:\te8 00 00 00 00       \tcallq  28 <rdclock+0x28>\n      28:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n      2c:\t48 69 c0 00 ca 9a 3b \timul   $0x3b9aca00,%rax,%rax\n      33:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n      37:\t48 01 d0             \tadd    %rdx,%rax\n      3a:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n      3e:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n      45:\t00 00 \n      47:\t74 05                \tje     4e <rdclock+0x4e>\n      49:\te8 00 00 00 00       \tcallq  4e <rdclock+0x4e>\n      4e:\tc9                   \tleaveq \n      4f:\tc3                   \tretq   ", "code_s": "__syscall_slong_t rdclock() {\n  struct timespec <span class=\"supfact\">tp</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n  return <span class=\"supfact\">tp</span>.tv_nsec + Number * <span class=\"supfact\">tp</span>.tv_sec;\n}", "code_t": "unsigned __int64 __cdecl rdclock() {\n  timespec <span class=\"supfact\">ts</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  clock_gettime(Number, &<span class=\"supfact\">ts</span>);\n  return <span class=\"supfact\">ts</span>.tv_nsec + Number * <span class=\"supfact\">ts</span>.tv_sec;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "psi46", "repo_name": "HDItest", "path": "psi46/HDItest/6012c1d17fe9bbe2516f421abf679b6ad194bb9547154126f8f9e09060cd6279", "path_in_repo": "psi46/HDItest/FTDI-1.0.4/libftd2xx1.0.4/libusb-1.0.8/libusb/.libs/libusb_1_0_la-io.o", "objdump": "0000000000001821 <libusb_handle_events>:\n    1821:\t55                   \tpush   %rbp\n    1822:\t48 89 e5             \tmov    %rsp,%rbp\n    1825:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1829:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    182d:\t48 c7 45 f0 3c 00 00 \tmovq   $0x3c,-0x10(%rbp)\n    1834:\t00 \n    1835:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    183c:\t00 \n    183d:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n    1841:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1845:\t48 89 d6             \tmov    %rdx,%rsi\n    1848:\t48 89 c7             \tmov    %rax,%rdi\n    184b:\te8 00 00 00 00       \tcallq  1850 <libusb_handle_events+0x2f>\n    1850:\tc9                   \tleaveq \n    1851:\tc3                   \tretq   ", "code_s": "__int64 __fastcall libusb_handle_events(pthread_mutex_t *a1) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  return libusb_handle_events_timeout(a1, <span class=\"supfact\">v2</span>);\n}", "code_t": "int __cdecl libusb_handle_events(libusb_context_0 *ctx) {\n  timeval <span class=\"supfact\">tv</span>;\n  <span class=\"supfact\">tv</span>.tv_sec = Number L;\n  <span class=\"supfact\">tv</span>.tv_usec = Number L;\n  return libusb_handle_events_timeout(ctx, &<span class=\"supfact\">tv</span>);\n}", "var": [{"name": "v2", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/1e1e7cb97ebb80eac8dbb33680b64d176ff61b4eaa68df0fca22659194da5490", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/stateful_proxy", "objdump": "00000000004594ba <pj_thread_get_prio_min>:\n  4594ba:\t55                   \tpush   %rbp\n  4594bb:\t48 89 e5             \tmov    %rsp,%rbp\n  4594be:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4594c2:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4594c6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4594ca:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4594ce:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  4594d2:\t48 8d 4d f4          \tlea    -0xc(%rbp),%rcx\n  4594d6:\t48 89 ce             \tmov    %rcx,%rsi\n  4594d9:\t48 89 c7             \tmov    %rax,%rdi\n  4594dc:\te8 cf b1 fa ff       \tcallq  4046b0 <pthread_getschedparam@plt>\n  4594e1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4594e4:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4594e8:\t74 07                \tje     4594f1 <pj_thread_get_prio_min+0x37>\n  4594ea:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4594ef:\teb 0a                \tjmp    4594fb <pj_thread_get_prio_min+0x41>\n  4594f1:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  4594f4:\t89 c7                \tmov    %eax,%edi\n  4594f6:\te8 95 af fa ff       \tcallq  404490 <sched_get_priority_min@plt>\n  4594fb:\tc9                   \tleaveq \n  4594fc:\tc3                   \tretq   ", "code_s": "int __fastcall pj_thread_get_prio_min(__int64 a1) {\n  int result;\n  int policy;\n  struct sched_param <span class=\"supfact\">param</span>;\n  if (pthread_getschedparam(*(_QWORD *)(a1 + Number), &policy,\n                            &<span class=\"supfact\">param</span>))\n    result = Number;\n  else\n    result = sched_get_priority_min(policy);\n  return result;\n}", "code_t": "int __cdecl pj_thread_get_prio_min(pj_thread_t_0 *thread) {\n  int result;\n  int policy;\n  sched_param <span class=\"supfact\">param</span>;\n  if (pthread_getschedparam(thread->thread, &policy, &<span class=\"supfact\">param</span>))\n    result = Number;\n  else\n    result = sched_get_priority_min(policy);\n  return result;\n}", "var": [{"name": "param", "type": "struct sched_param { int sched_priority; }", "ref_name": "param", "ref_type": "struct sched_param { int sched_priority; }"}], "body_in_train": true}, {"repo_owner": "medicalwei", "repo_name": "hime-debian", "path": "medicalwei/hime-debian/fcb87443a94ead13ef362ff2800c1fa1bbb9c308d574acecebea9e7b66a1a4d1", "path_in_repo": "medicalwei/hime-debian/src/hime-tslearn.o", "objdump": "0000000000000d28 <cb_button_add>:\n     d28:\t55                   \tpush   %rbp\n     d29:\t48 89 e5             \tmov    %rsp,%rbp\n     d2c:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n     d33:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n     d3a:\t48 89 b5 30 ff ff ff \tmov    %rsi,-0xd0(%rbp)\n     d41:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d48 <cb_button_add+0x20>\n     d48:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n     d4f:\t48 8d 4d 90          \tlea    -0x70(%rbp),%rcx\n     d53:\t48 89 ce             \tmov    %rcx,%rsi\n     d56:\t48 89 c7             \tmov    %rax,%rdi\n     d59:\te8 00 00 00 00       \tcallq  d5e <cb_button_add+0x36>\n     d5e:\t85 c0                \ttest   %eax,%eax\n     d60:\t0f 84 4f 01 00 00    \tje     eb5 <cb_button_add+0x18d>\n     d66:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d6d <cb_button_add+0x45>\n     d6d:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n     d74:\t48 8d 75 90          \tlea    -0x70(%rbp),%rsi\n     d78:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     d7d:\t48 89 c7             \tmov    %rax,%rdi\n     d80:\te8 00 00 00 00       \tcallq  d85 <cb_button_add+0x5d>\n     d85:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     d89:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d8d:\t48 89 c6             \tmov    %rax,%rsi\n     d90:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     d95:\te8 00 00 00 00       \tcallq  d9a <cb_button_add+0x72>\n     d9a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d9e:\t48 89 c7             \tmov    %rax,%rdi\n     da1:\te8 00 00 00 00       \tcallq  da6 <cb_button_add+0x7e>\n     da6:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # db0 <cb_button_add+0x88>\n     dad:\t00 00 00 \n     db0:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     db7:\t00 \n     db8:\te9 91 00 00 00       \tjmpq   e4e <cb_button_add+0x126>\n     dbd:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # dc3 <cb_button_add+0x9b>\n     dc3:\t8d 50 01             \tlea    0x1(%rax),%edx\n     dc6:\t89 15 00 00 00 00    \tmov    %edx,0x0(%rip)        # dcc <cb_button_add+0xa4>\n     dcc:\t48 63 d0             \tmovslq %eax,%rdx\n     dcf:\t48 89 d0             \tmov    %rdx,%rax\n     dd2:\t48 c1 e0 03          \tshl    $0x3,%rax\n     dd6:\t48 01 d0             \tadd    %rdx,%rax\n     dd9:\t48 c1 e0 04          \tshl    $0x4,%rax\n     ddd:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     de3:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     de7:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # ded <cb_button_add+0xc5>\n     ded:\t83 f8 02             \tcmp    $0x2,%eax\n     df0:\t75 1f                \tjne    e11 <cb_button_add+0xe9>\n     df2:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     df6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     dfa:\t48 89 d6             \tmov    %rdx,%rsi\n     dfd:\t48 89 c7             \tmov    %rax,%rdi\n     e00:\te8 00 00 00 00       \tcallq  e05 <cb_button_add+0xdd>\n     e05:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     e09:\t89 82 80 00 00 00    \tmov    %eax,0x80(%rdx)\n     e0f:\teb 1d                \tjmp    e2e <cb_button_add+0x106>\n     e11:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     e15:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e19:\t48 89 d6             \tmov    %rdx,%rsi\n     e1c:\t48 89 c7             \tmov    %rax,%rdi\n     e1f:\te8 00 00 00 00       \tcallq  e24 <cb_button_add+0xfc>\n     e24:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     e28:\t89 82 80 00 00 00    \tmov    %eax,0x80(%rdx)\n     e2e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e32:\t48 89 c7             \tmov    %rax,%rdi\n     e35:\te8 00 00 00 00       \tcallq  e3a <cb_button_add+0x112>\n     e3a:\t48 98                \tcltq   \n     e3c:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n     e40:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     e44:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n     e4a:\t85 c0                \ttest   %eax,%eax\n     e4c:\t74 6a                \tje     eb8 <cb_button_add+0x190>\n     e4e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e52:\t0f b6 00             \tmovzbl (%rax),%eax\n     e55:\t84 c0                \ttest   %al,%al\n     e57:\t0f 85 60 ff ff ff    \tjne    dbd <cb_button_add+0x95>\n     e5d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e62:\te8 00 00 00 00       \tcallq  e67 <cb_button_add+0x13f>\n     e67:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     e6b:\te8 00 00 00 00       \tcallq  e70 <cb_button_add+0x148>\n     e70:\t48 89 c2             \tmov    %rax,%rdx\n     e73:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e7a <cb_button_add+0x152>\n     e7a:\t48 89 d6             \tmov    %rdx,%rsi\n     e7d:\t48 89 c7             \tmov    %rax,%rdi\n     e80:\te8 00 00 00 00       \tcallq  e85 <cb_button_add+0x15d>\n     e85:\t48 89 c7             \tmov    %rax,%rdi\n     e88:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e8c:\t41 b8 14 00 00 00    \tmov    $0x14,%r8d\n     e92:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     e97:\tba 00 00 00 00       \tmov    $0x0,%edx\n     e9c:\t48 89 c6             \tmov    %rax,%rsi\n     e9f:\te8 00 00 00 00       \tcallq  ea4 <cb_button_add+0x17c>\n     ea4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # eab <cb_button_add+0x183>\n     eab:\t48 89 c7             \tmov    %rax,%rdi\n     eae:\te8 00 00 00 00       \tcallq  eb3 <cb_button_add+0x18b>\n     eb3:\teb 04                \tjmp    eb9 <cb_button_add+0x191>\n     eb5:\t90                   \tnop\n     eb6:\teb 01                \tjmp    eb9 <cb_button_add+0x191>\n     eb8:\t90                   \tnop\n     eb9:\tc9                   \tleaveq \n     eba:\tc3                   \tretq   ", "code_s": "__int64 cb_button_add() {\n  __int64 result;\n  int v1;\n  int v2;\n  int v3;\n  __int64 v4;\n  __int64 v5;\n  char <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  __int64 v8;\n  __int64 v9;\n  char *src;\n  char *v11;\n  result = gtk_text_buffer_get_selection_bounds(buffer, <span class=\"supfact\">v7</span>,\n                                                <span class=\"supfact\">v6</span>);\n  if ((_DWORD)result) {\n    src = (char *)gtk_text_buffer_get_text(buffer, <span class=\"supfact\">v7</span>,\n                                           <span class=\"supfact\">v6</span>, Number L);\n    strcpy(&current_str, src);\n    g_free(src);\n    bigphoN = Number;\n    v11 = &current_str;\n    while (*v11) {\n      v1 = bigphoN++;\n      v8 = (__int64)&bigpho + Number * v1;\n      if (ph_key_sz == Number)\n        v2 = utf8_pho_keys(v11, v8);\n      else\n        v2 = lookup_gtab_key((__int64)v11, v8);\n      *(_DWORD *)(v8 + Number) = v2;\n      v3 = utf8_sz(v11);\n      v11 += v3;\n      result = *(unsigned int *)(v8 + Number);\n      if (!(_DWORD)result)\n        return result;\n    }\n    v9 = create_pho_sel_area();\n    v4 = gtk_box_get_type();\n    v5 = g_type_check_instance_cast(hbox_buttons, v4);\n    gtk_box_pack_start(v5, v9, Number L, Number L, Number L);\n    result = gtk_widget_show_all(hbox_buttons);\n  }\n  return result;\n}", "code_t": "void __cdecl cb_button_add(GtkButton *button, gpointer user_data) {\n  int v2;\n  int v3;\n  int v4;\n  __int64 v5;\n  __int64 v6;\n  GtkTextIter <span class=\"supfact\">end</span>;\n  GtkTextIter <span class=\"supfact\">start</span>;\n  char_pho *pbigpho;\n  GtkWidget *sel;\n  char *utf8;\n  char *p;\n  if ((unsigned int)gtk_text_buffer_get_selection_bounds(\n          buffer, &<span class=\"supfact\">start</span>, &<span class=\"supfact\">end</span>)) {\n    utf8 = (char *)gtk_text_buffer_get_text(buffer, &<span class=\"supfact\">start</span>,\n                                            &<span class=\"supfact\">end</span>, Number L);\n    strcpy(current_str, utf8);\n    g_free(utf8);\n    bigphoN = Number;\n    p = current_str;\n    while (*p) {\n      v2 = bigphoN++;\n      pbigpho = &bigpho[v2];\n      if (ph_key_sz == Number)\n        v3 = utf8_pho_keys(p, pbigpho);\n      else\n        v3 = lookup_gtab_key(p, pbigpho);\n      pbigpho->phokeysN = v3;\n      v4 = utf8_sz(p);\n      p += v4;\n      if (!pbigpho->phokeysN)\n        return;\n    }\n    sel = create_pho_sel_area();\n    v5 = gtk_box_get_type();\n    v6 = g_type_check_instance_cast(hbox_buttons, v5);\n    gtk_box_pack_start(v6, sel, Number L, Number L, Number L);\n    gtk_widget_show_all(hbox_buttons);\n  }\n}", "var": [{"name": "v7", "type": "struct DBusMessageIter_0 { void * dummy1; void * dummy2; dbus_uint32_t dummy3; int dummy4; int dummy5; int dummy6; int dummy7; int dummy8; int dummy9; int dummy10; int dummy11; int pad1; void * pad2; void * pad3; }", "ref_name": "start", "ref_type": "struct GtkTextIter { gpointer dummy1; gpointer dummy2; gint dummy3; gint dummy4; gint dummy5; gint dummy6; gint dummy7; gint dummy8; gpointer dummy9; gpointer dummy10; gint dummy11; gint dummy12; gint dummy13; PADDING (4); gpointer dummy14; }"}, {"name": "v6", "type": "struct DBusMessageIter_0 { void * dummy1; void * dummy2; dbus_uint32_t dummy3; int dummy4; int dummy5; int dummy6; int dummy7; int dummy8; int dummy9; int dummy10; int dummy11; int pad1; void * pad2; void * pad3; }", "ref_name": "end", "ref_type": "struct GtkTextIter { gpointer dummy1; gpointer dummy2; gint dummy3; gint dummy4; gint dummy5; gint dummy6; gint dummy7; gint dummy8; gpointer dummy9; gpointer dummy10; gint dummy11; gint dummy12; gint dummy13; PADDING (4); gpointer dummy14; }"}], "body_in_train": false}, {"repo_owner": "HarryWei", "repo_name": "qemu", "path": "HarryWei/qemu/b50fcc460b388d1d26b145f13fd0fbd6de9a50c6ca865361dfb49e04cb6ef893", "path_in_repo": "HarryWei/qemu//qga/commands-posix.o", "objdump": "00000000000002e6 <qmp_guest_get_time>:\n     2e6:\t55                   \tpush   %rbp\n     2e7:\t48 89 e5             \tmov    %rsp,%rbp\n     2ea:\t48 83 ec 40          \tsub    $0x40,%rsp\n     2ee:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     2f2:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     2f9:\t00 00 \n     2fb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     2ff:\t31 c0                \txor    %eax,%eax\n     301:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     305:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     30a:\t48 89 c7             \tmov    %rax,%rdi\n     30d:\te8 00 00 00 00       \tcallq  312 <qmp_guest_get_time+0x2c>\n     312:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n     315:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n     319:\t79 2d                \tjns    348 <qmp_guest_get_time+0x62>\n     31b:\te8 00 00 00 00       \tcallq  320 <qmp_guest_get_time+0x3a>\n     320:\t8b 30                \tmov    (%rax),%esi\n     322:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     326:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 32d <qmp_guest_get_time+0x47>\n     32d:\tba 00 00 00 00       \tmov    $0x0,%edx\n     332:\t48 89 c7             \tmov    %rax,%rdi\n     335:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     33a:\te8 00 00 00 00       \tcallq  33f <qmp_guest_get_time+0x59>\n     33f:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n     346:\teb 21                \tjmp    369 <qmp_guest_get_time+0x83>\n     348:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     34c:\t48 69 d0 00 ca 9a 3b \timul   $0x3b9aca00,%rax,%rdx\n     353:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     357:\t48 69 c0 e8 03 00 00 \timul   $0x3e8,%rax,%rax\n     35e:\t48 01 d0             \tadd    %rdx,%rax\n     361:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     365:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     369:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     36d:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     374:\t00 00 \n     376:\t74 05                \tje     37d <qmp_guest_get_time+0x97>\n     378:\te8 00 00 00 00       \tcallq  37d <qmp_guest_get_time+0x97>\n     37d:\tc9                   \tleaveq \n     37e:\tc3                   \tretq   ", "code_s": "__time_t __fastcall qmp_guest_get_time(__int64 a1) {\n  int *v1;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (gettimeofday(&<span class=\"supfact\">tv</span>, Number L) >= Number)\n    return Number * <span class=\"supfact\">tv</span>.tv_sec +\n           Number * <span class=\"supfact\">tv</span>.tv_usec;\n  v1 = _errno_location();\n  error_set_errno(a1, (unsigned int)*v1, Number L, String);\n  return Number;\n}", "code_t": "int64_t __cdecl qmp_guest_get_time(Error_0 **errp) {\n  int *v1;\n  qemu_timeval <span class=\"supfact\">tq</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (gettimeofday(&<span class=\"supfact\">tq</span>, Number L) >= Number)\n    return Number * <span class=\"supfact\">tq</span>.tv_sec +\n           Number * <span class=\"supfact\">tq</span>.tv_usec;\n  v1 = _errno_location();\n  error_set_errno(errp, (unsigned int)*v1, Number L, String);\n  return Number;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tq", "ref_type": "struct qemu_timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "ningwang100", "repo_name": "Chingoal-Web-Application", "path": "ningwang100/Chingoal-Web-Application/d0f8aa4d525e6db0e90a2d27370eaa8cf462ce9826251037aeb3ae3182fadc6a", "path_in_repo": "ningwang100/Chingoal-Web-Application/thirdpart/redis-3.0.5/deps/lua/src/luac", "objdump": "00000000004033c5 <lua_tointeger>:\n  4033c5:\t55                   \tpush   %rbp\n  4033c6:\t48 89 e5             \tmov    %rsp,%rbp\n  4033c9:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4033cd:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  4033d1:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n  4033d4:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  4033d7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4033db:\t89 d6                \tmov    %edx,%esi\n  4033dd:\t48 89 c7             \tmov    %rax,%rdi\n  4033e0:\te8 24 f4 ff ff       \tcallq  402809 <index2adr>\n  4033e5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4033e9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4033ed:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4033f0:\t83 f8 03             \tcmp    $0x3,%eax\n  4033f3:\t74 1e                \tje     403413 <lua_tointeger+0x4e>\n  4033f5:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  4033f9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4033fd:\t48 89 d6             \tmov    %rdx,%rsi\n  403400:\t48 89 c7             \tmov    %rax,%rdi\n  403403:\te8 f2 f3 00 00       \tcallq  4127fa <luaV_tonumber>\n  403408:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40340c:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  403411:\t74 21                \tje     403434 <lua_tointeger+0x6f>\n  403413:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  403417:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n  40341b:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n  403420:\tf2 0f 10 45 f0       \tmovsd  -0x10(%rbp),%xmm0\n  403425:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n  40342a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40342e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  403432:\teb 05                \tjmp    403439 <lua_tointeger+0x74>\n  403434:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403439:\tc9                   \tleaveq \n  40343a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall lua_tointeger(__int64 a1, int a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  double v5;\n  double *v6;\n  v6 = (double *)index2adr(a1, a2);\n  if (*((_DWORD *)v6 + Number) != Number) {\n    v6 = (double *)luaV_tonumber(v6, <span class=\"supfact\">v3</span>);\n    if (!v6)\n      return Number L;\n  }\n  v5 = *v6;\n  return (unsigned int)(int)v5;\n}", "code_t": "lua_Integer __cdecl lua_tointeger(lua_State_0 *L, int idx) {\n  TValue <span class=\"supfact\">n</span>;\n  lua_Number num;\n  const TValue *o;\n  o = index2adr(L, idx);\n  if (o->tt != Number) {\n    o = luaV_tonumber(o, &<span class=\"supfact\">n</span>);\n    if (!o)\n      return Number L;\n  }\n  num = o->value.<span class=\"supfact\">n</span>;\n  return (unsigned int)(int)num;\n}", "var": [{"name": "v3", "type": "struct TValue { Value value; int tt; PADDING (4); }", "ref_name": "n", "ref_type": "struct TValue { Value value; int tt; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "thomhastings", "repo_name": "linux-3.17.1-parrot", "path": "thomhastings/linux-3.17.1-parrot/02fc7bb352f1e7799f230ca685099cce2022efc942c21f44b7eb44e38a88e592", "path_in_repo": "thomhastings/linux-3.17.1-parrot/tools/power/acpi/acpidump", "objdump": "0000000000406b00 <osl_read_table_from_file>:\n  406b00:\t55                   \tpush   %rbp\n  406b01:\t48 89 e5             \tmov    %rsp,%rbp\n  406b04:\t48 83 ec 70          \tsub    $0x70,%rsp\n  406b08:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  406b0c:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  406b10:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  406b14:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n  406b18:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  406b1f:\t00 \n  406b20:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  406b27:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  406b2b:\tbe ed 9c 40 00       \tmov    $0x409ced,%esi\n  406b30:\t48 89 c7             \tmov    %rax,%rdi\n  406b33:\te8 18 a7 ff ff       \tcallq  401250 <fopen@plt>\n  406b38:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  406b3c:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  406b41:\t75 2c                \tjne    406b6f <osl_read_table_from_file+0x6f>\n  406b43:\t48 8b 05 b6 67 00 00 \tmov    0x67b6(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406b4a:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  406b4e:\tbe f0 9c 40 00       \tmov    $0x409cf0,%esi\n  406b53:\t48 89 c7             \tmov    %rax,%rdi\n  406b56:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406b5b:\te8 40 a6 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406b60:\tbf 05 00 00 00       \tmov    $0x5,%edi\n  406b65:\te8 e0 ee ff ff       \tcallq  405a4a <osl_get_last_status>\n  406b6a:\te9 f8 01 00 00       \tjmpq   406d67 <osl_read_table_from_file+0x267>\n  406b6f:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n  406b73:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406b77:\tba 00 00 00 00       \tmov    $0x0,%edx\n  406b7c:\t48 89 ce             \tmov    %rcx,%rsi\n  406b7f:\t48 89 c7             \tmov    %rax,%rdi\n  406b82:\te8 99 a6 ff ff       \tcallq  401220 <fseek@plt>\n  406b87:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  406b8b:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  406b8f:\t48 89 d1             \tmov    %rdx,%rcx\n  406b92:\tba 24 00 00 00       \tmov    $0x24,%edx\n  406b97:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  406b9c:\t48 89 c7             \tmov    %rax,%rdi\n  406b9f:\te8 dc a4 ff ff       \tcallq  401080 <fread@plt>\n  406ba4:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  406ba7:\t83 7d e4 24          \tcmpl   $0x24,-0x1c(%rbp)\n  406bab:\t74 29                \tje     406bd6 <osl_read_table_from_file+0xd6>\n  406bad:\t48 8b 05 4c 67 00 00 \tmov    0x674c(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406bb4:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  406bb8:\tbe 10 9d 40 00       \tmov    $0x409d10,%esi\n  406bbd:\t48 89 c7             \tmov    %rax,%rdi\n  406bc0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406bc5:\te8 d6 a5 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406bca:\tc7 45 f4 02 20 00 00 \tmovl   $0x2002,-0xc(%rbp)\n  406bd1:\te9 77 01 00 00       \tjmpq   406d4d <osl_read_table_from_file+0x24d>\n  406bd6:\t48 83 7d 98 00       \tcmpq   $0x0,-0x68(%rbp)\n  406bdb:\t0f 84 9a 00 00 00    \tje     406c7b <osl_read_table_from_file+0x17b>\n  406be1:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  406be5:\tba 08 00 00 00       \tmov    $0x8,%edx\n  406bea:\tbe 79 9c 40 00       \tmov    $0x409c79,%esi\n  406bef:\t48 89 c7             \tmov    %rax,%rdi\n  406bf2:\te8 59 a4 ff ff       \tcallq  401050 <strncmp@plt>\n  406bf7:\t85 c0                \ttest   %eax,%eax\n  406bf9:\t75 43                \tjne    406c3e <osl_read_table_from_file+0x13e>\n  406bfb:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  406bff:\tba 08 00 00 00       \tmov    $0x8,%edx\n  406c04:\tbe 79 9c 40 00       \tmov    $0x409c79,%esi\n  406c09:\t48 89 c7             \tmov    %rax,%rdi\n  406c0c:\te8 3f a4 ff ff       \tcallq  401050 <strncmp@plt>\n  406c11:\t85 c0                \ttest   %eax,%eax\n  406c13:\t74 66                \tje     406c7b <osl_read_table_from_file+0x17b>\n  406c15:\t48 8b 05 e4 66 00 00 \tmov    0x66e4(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406c1c:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  406c20:\tbe 38 9d 40 00       \tmov    $0x409d38,%esi\n  406c25:\t48 89 c7             \tmov    %rax,%rdi\n  406c28:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406c2d:\te8 6e a5 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406c32:\tc7 45 f4 01 20 00 00 \tmovl   $0x2001,-0xc(%rbp)\n  406c39:\te9 0f 01 00 00       \tjmpq   406d4d <osl_read_table_from_file+0x24d>\n  406c3e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  406c42:\t8b 10                \tmov    (%rax),%edx\n  406c44:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  406c48:\t8b 00                \tmov    (%rax),%eax\n  406c4a:\t39 c2                \tcmp    %eax,%edx\n  406c4c:\t74 2d                \tje     406c7b <osl_read_table_from_file+0x17b>\n  406c4e:\t48 8b 05 ab 66 00 00 \tmov    0x66ab(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406c55:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n  406c59:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  406c5d:\tbe 60 9d 40 00       \tmov    $0x409d60,%esi\n  406c62:\t48 89 c7             \tmov    %rax,%rdi\n  406c65:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406c6a:\te8 31 a5 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406c6f:\tc7 45 f4 01 20 00 00 \tmovl   $0x2001,-0xc(%rbp)\n  406c76:\te9 d2 00 00 00       \tjmpq   406d4d <osl_read_table_from_file+0x24d>\n  406c7b:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  406c7f:\t48 89 c7             \tmov    %rax,%rdi\n  406c82:\te8 4b a8 ff ff       \tcallq  4014d2 <ap_get_table_length>\n  406c87:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  406c8a:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n  406c8e:\t75 0c                \tjne    406c9c <osl_read_table_from_file+0x19c>\n  406c90:\tc7 45 f4 02 20 00 00 \tmovl   $0x2002,-0xc(%rbp)\n  406c97:\te9 b1 00 00 00       \tjmpq   406d4d <osl_read_table_from_file+0x24d>\n  406c9c:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  406c9f:\t48 89 c6             \tmov    %rax,%rsi\n  406ca2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  406ca7:\te8 c4 a4 ff ff       \tcallq  401170 <calloc@plt>\n  406cac:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  406cb0:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  406cb5:\t75 29                \tjne    406ce0 <osl_read_table_from_file+0x1e0>\n  406cb7:\t48 8b 05 42 66 00 00 \tmov    0x6642(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406cbe:\t8b 4d e0             \tmov    -0x20(%rbp),%ecx\n  406cc1:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  406cc5:\tbe 98 9d 40 00       \tmov    $0x409d98,%esi\n  406cca:\t48 89 c7             \tmov    %rax,%rdi\n  406ccd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406cd2:\te8 c9 a4 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406cd7:\tc7 45 f4 04 00 00 00 \tmovl   $0x4,-0xc(%rbp)\n  406cde:\teb 6d                \tjmp    406d4d <osl_read_table_from_file+0x24d>\n  406ce0:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n  406ce4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406ce8:\tba 00 00 00 00       \tmov    $0x0,%edx\n  406ced:\t48 89 ce             \tmov    %rcx,%rsi\n  406cf0:\t48 89 c7             \tmov    %rax,%rdi\n  406cf3:\te8 28 a5 ff ff       \tcallq  401220 <fseek@plt>\n  406cf8:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  406cfb:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  406cff:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406d03:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  406d08:\t48 89 c7             \tmov    %rax,%rdi\n  406d0b:\te8 70 a3 ff ff       \tcallq  401080 <fread@plt>\n  406d10:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  406d13:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  406d16:\t39 45 e0             \tcmp    %eax,-0x20(%rbp)\n  406d19:\t74 26                \tje     406d41 <osl_read_table_from_file+0x241>\n  406d1b:\t48 8b 05 de 65 00 00 \tmov    0x65de(%rip),%rax        # 40d300 <stderr@@GLIBC_2.2.5>\n  406d22:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  406d26:\tbe d8 9d 40 00       \tmov    $0x409dd8,%esi\n  406d2b:\t48 89 c7             \tmov    %rax,%rdi\n  406d2e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406d33:\te8 68 a4 ff ff       \tcallq  4011a0 <fprintf@plt>\n  406d38:\tc7 45 f4 05 20 00 00 \tmovl   $0x2005,-0xc(%rbp)\n  406d3f:\teb 0c                \tjmp    406d4d <osl_read_table_from_file+0x24d>\n  406d41:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406d45:\t48 89 c7             \tmov    %rax,%rdi\n  406d48:\te8 0b a7 ff ff       \tcallq  401458 <ap_is_valid_checksum>\n  406d4d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406d51:\t48 89 c7             \tmov    %rax,%rdi\n  406d54:\te8 47 a3 ff ff       \tcallq  4010a0 <fclose@plt>\n  406d59:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  406d5d:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  406d61:\t48 89 10             \tmov    %rdx,(%rax)\n  406d64:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  406d67:\tc9                   \tleaveq \n  406d68:\tc3                   \tretq   ", "code_s": "__int64 __fastcall osl_read_table_from_file(const char *a1, __int64 a2,\n                                            const char *a3, void **a4) {\n  _DWORD <span class=\"supfact\">ptr</span>[Number];\n  size_t size;\n  FILE *stream;\n  unsigned int v10;\n  void *v11;\n  v11 = Number L;\n  v10 = Number;\n  stream = fopen(a1, String);\n  if (!stream) {\n    fprintf(stderr, String, a1);\n    return osl_get_last_status(Number);\n  }\n  fseek(stream, a2, Number);\n  HIDWORD(size) = fread(<span class=\"supfact\">ptr</span>, Number, Number, stream);\n  if (HIDWORD(size) == Number) {\n    if (a3) {\n      if (!strncmp(a3, String, Number)) {\n        if (strncmp((const char *)<span class=\"supfact\">ptr</span>, String, Number)) {\n          fprintf(stderr, String, (const char *)<span class=\"supfact\">ptr</span>);\n          v10 = Number;\n          goto LABEL_18;\n        }\n      } else if (*(_DWORD *)a3 != <span class=\"supfact\">ptr</span>[Number]) {\n        fprintf(stderr, String, a3, (const char *)<span class=\"supfact\">ptr</span>);\n        v10 = Number;\n        goto LABEL_18;\n      }\n    }\n    LODWORD(size) = ap_get_table_length((__int64)<span class=\"supfact\">ptr</span>);\n    if ((_DWORD)size) {\n      v11 = calloc(Number, (unsigned int)size);\n      if (v11) {\n        fseek(stream, a2, Number);\n        HIDWORD(size) = fread(v11, Number, (unsigned int)size, stream);\n        if ((_DWORD)size == HIDWORD(size)) {\n          ap_is_valid_checksum((__int64)v11);\n        } else {\n          fprintf(stderr, String, (const char *)<span class=\"supfact\">ptr</span>);\n          v10 = Number;\n        }\n      } else {\n        fprintf(stderr, String, (const char *)<span class=\"supfact\">ptr</span>,\n                (unsigned int)size);\n        v10 = Number;\n      }\n    } else {\n      v10 = Number;\n    }\n    goto LABEL_18;\n  }\n  fprintf(stderr, String, a1);\n  v10 = Number;\nLABEL_18:\n  fclose(stream);\n  *a4 = v11;\n  return v10;\n}", "code_t": "acpi_status __cdecl osl_read_table_from_file(char *filename,\n                                             acpi_size file_offset,\n                                             char *signature,\n                                             acpi_table_header **table) {\n  acpi_table_header <span class=\"supfact\">header</span>;\n  u32 table_length;\n  s32 count;\n  FILE *table_file;\n  acpi_status status;\n  acpi_table_header *local_table;\n  local_table = Number L;\n  status = Number;\n  table_file = fopen(filename, String);\n  if (!table_file) {\n    fprintf(stderr, String, filename);\n    return osl_get_last_status(Number);\n  }\n  fseek(table_file, file_offset, Number);\n  count = fread(&<span class=\"supfact\">header</span>, Number, Number, table_file);\n  if (count == Number) {\n    if (signature) {\n      if (!strncmp(signature, String, Number)) {\n        if (strncmp(<span class=\"supfact\">header</span>.signature, String, Number)) {\n          fprintf(stderr, String, <span class=\"supfact\">header</span>.signature);\n          status = Number;\n          goto exit;\n        }\n      } else if (*(_DWORD *)signature !=\n                 *(_DWORD *)<span class=\"supfact\">header</span>.signature) {\n        fprintf(stderr, String, signature, <span class=\"supfact\">header</span>.signature);\n        status = Number;\n        goto exit;\n      }\n    }\n    table_length = ap_get_table_length(&<span class=\"supfact\">header</span>);\n    if (table_length) {\n      local_table = (acpi_table_header *)calloc(Number, table_length);\n      if (local_table) {\n        fseek(table_file, file_offset, Number);\n        count = fread(local_table, Number, table_length, table_file);\n        if (table_length == count) {\n          ap_is_valid_checksum(local_table);\n        } else {\n          fprintf(stderr, String, <span class=\"supfact\">header</span>.signature);\n          status = Number;\n        }\n      } else {\n        fprintf(stderr, String, <span class=\"supfact\">header</span>.signature, table_length);\n        status = Number;\n      }\n    } else {\n      status = Number;\n    }\n    goto exit;\n  }\n  fprintf(stderr, String, filename);\n  status = Number;\nexit:\n  fclose(table_file);\n  *table = local_table;\n  return status;\n}", "var": [{"name": "ptr", "type": "struct acpi_table_header { char[4] signature; u32 length; u8 revision; u8 checksum; char[6] oem_id; char[8] oem_table_id; u32 oem_revision; char[4] asl_compiler_id; u32 asl_compiler_revision; }", "ref_name": "header", "ref_type": "struct acpi_table_header { char[4] signature; u32 length; u8 revision; u8 checksum; char[6] oem_id; char[8] oem_table_id; u32 oem_revision; char[4] asl_compiler_id; u32 asl_compiler_revision; }"}], "body_in_train": true}, {"repo_owner": "giamteckchoon", "repo_name": "qmail-ipv6", "path": "giamteckchoon/qmail-ipv6/9c9a2f407c87de38c07fa4d5fc301ad27bb2f34c70867b73fa85123e00accc18", "path_in_repo": "giamteckchoon/qmail-ipv6//qmail-qread", "objdump": "", "code_s": "__int64 __fastcall sub_401BDD(__int64 a1, __int64 a2) {\n  __int64 result;\n  unsigned int v3;\n  int v4;\n  struct dirent *<span class=\"supfact\">v5</span>;\n  if (*(_QWORD *)a1) {\n    <span class=\"supfact\">v5</span> = readdir(*(DIR **)a1);\n    if (<span class=\"supfact\">v5</span>) {\n      if ((unsigned int)sub_40391D(<span class=\"supfact\">v5</span>->d_name, String)) {\n        if ((unsigned int)sub_40391D(<span class=\"supfact\">v5</span>->d_name, String)) {\n          v4 = sub_403C92(<span class=\"supfact\">v5</span>->d_name, a2);\n          if (v4 && !<span class=\"supfact\">v5</span>->d_name[v4])\n            result = Number L;\n          else\n            result = Number L;\n        } else {\n          result = Number;\n        }\n      } else {\n        result = Number;\n      }\n    } else {\n      closedir(*(DIR **)a1);\n      *(_QWORD *)a1 = Number L;\n      result = Number;\n    }\n  } else if (*(_DWORD *)(a1 + Number) < dword_4081AC) {\n    if ((unsigned int)sub_4038C1(*(_QWORD *)(a1 + Number)) <= Number) {\n      v3 = sub_403B14(Number L, *(_QWORD *)(a1 + Number));\n      *(&name + v3) = Number;\n      *(&name +\n        (unsigned int)sub_403BF9(v3 + Number + Number L,\n                                 *(int *)(a1 + Number)) +\n        v3 + Number) = Number;\n      while (Number) {\n        *(_QWORD *)a1 = opendir(&name);\n        if (*(_QWORD *)a1)\n          break;\n        (*(void(__fastcall **)(char *))(a1 + Number))(&name);\n      }\n      ++*(_DWORD *)(a1 + Number);\n      result = Number;\n    } else {\n      ++*(_DWORD *)(a1 + Number);\n      result = Number;\n    }\n  } else {\n    result = Number L;\n  }\n  return result;\n}", "code_t": "__int64 __fastcall sub_401BDD(__int64 a1, __int64 a2) {\n  __int64 result;\n  unsigned int v3;\n  int v4;\n  struct dirent *<span class=\"supfact\">v5</span>;\n  if (*(_QWORD *)a1) {\n    <span class=\"supfact\">v5</span> = readdir(*(DIR **)a1);\n    if (<span class=\"supfact\">v5</span>) {\n      if ((unsigned int)sub_40391D(<span class=\"supfact\">v5</span>->d_name, String)) {\n        if ((unsigned int)sub_40391D(<span class=\"supfact\">v5</span>->d_name, String)) {\n          v4 = sub_403C92(<span class=\"supfact\">v5</span>->d_name, a2);\n          if (v4 && !<span class=\"supfact\">v5</span>->d_name[v4])\n            result = Number L;\n          else\n            result = Number L;\n        } else {\n          result = Number;\n        }\n      } else {\n        result = Number;\n      }\n    } else {\n      closedir(*(DIR **)a1);\n      *(_QWORD *)a1 = Number L;\n      result = Number;\n    }\n  } else if (*(_DWORD *)(a1 + Number) < dword_4081AC) {\n    if ((unsigned int)sub_4038C1(*(_QWORD *)(a1 + Number)) <= Number) {\n      v3 = sub_403B14(Number L, *(_QWORD *)(a1 + Number));\n      *(&name + v3) = Number;\n      *(&name +\n        (unsigned int)sub_403BF9(v3 + Number + Number L,\n                                 *(int *)(a1 + Number)) +\n        v3 + Number) = Number;\n      while (Number) {\n        *(_QWORD *)a1 = opendir(&name);\n        if (*(_QWORD *)a1)\n          break;\n        (*(void(__fastcall **)(char *))(a1 + Number))(&name);\n      }\n      ++*(_DWORD *)(a1 + Number);\n      result = Number;\n    } else {\n      ++*(_DWORD *)(a1 + Number);\n      result = Number;\n    }\n  } else {\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "__int64", "ref_name": "v5", "ref_type": "struct dirent *"}], "body_in_train": false}, {"repo_owner": "lalithsuresh", "repo_name": "QEMU-Device-State-Visualisations", "path": "lalithsuresh/QEMU-Device-State-Visualisations/052e0622095011042ef41ba0cc3df030484ec649332695346b111abbd89ec73e", "path_in_repo": "lalithsuresh/QEMU-Device-State-Visualisations//sparc64-linux-user/signal.o", "objdump": "0000000000001e0a <do_sigreturn>:\n    1e0a:\t55                   \tpush   %rbp\n    1e0b:\t48 89 e5             \tmov    %rsp,%rbp\n    1e0e:\t53                   \tpush   %rbx\n    1e0f:\t48 81 ec e8 00 00 00 \tsub    $0xe8,%rsp\n    1e16:\t48 89 bd 18 ff ff ff \tmov    %rdi,-0xe8(%rbp)\n    1e1d:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1e24:\t00 00 \n    1e26:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1e2a:\t31 c0                \txor    %eax,%eax\n    1e2c:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    1e33:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    1e37:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1e3b:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n    1e42:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1e49:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    1e4e:\tba 98 03 00 00       \tmov    $0x398,%edx\n    1e53:\t48 89 c6             \tmov    %rax,%rsi\n    1e56:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1e5b:\te8 60 e3 ff ff       \tcallq  1c0 <lock_user>\n    1e60:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n    1e67:\t48 83 bd 50 ff ff ff \tcmpq   $0x0,-0xb0(%rbp)\n    1e6e:\t00 \n    1e6f:\t0f 84 32 03 00 00    \tje     21a7 <do_sigreturn+0x39d>\n    1e75:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1e7c:\t83 e0 03             \tand    $0x3,%eax\n    1e7f:\t48 85 c0             \ttest   %rax,%rax\n    1e82:\t0f 85 22 03 00 00    \tjne    21aa <do_sigreturn+0x3a0>\n    1e88:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1e8f:\t48 05 c8 00 00 00    \tadd    $0xc8,%rax\n    1e95:\t48 8b 00             \tmov    (%rax),%rax\n    1e98:\t48 89 c7             \tmov    %rax,%rdi\n    1e9b:\te8 7e e2 ff ff       \tcallq  11e <tswap64>\n    1ea0:\t89 85 3c ff ff ff    \tmov    %eax,-0xc4(%rbp)\n    1ea6:\t90                   \tnop\n    1ea7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1eac:\t89 85 2c ff ff ff    \tmov    %eax,-0xd4(%rbp)\n    1eb2:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1eb9:\t48 05 d0 00 00 00    \tadd    $0xd0,%rax\n    1ebf:\t48 8b 00             \tmov    (%rax),%rax\n    1ec2:\t48 89 c7             \tmov    %rax,%rdi\n    1ec5:\te8 54 e2 ff ff       \tcallq  11e <tswap64>\n    1eca:\t89 85 38 ff ff ff    \tmov    %eax,-0xc8(%rbp)\n    1ed0:\t90                   \tnop\n    1ed1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ed6:\t09 85 2c ff ff ff    \tor     %eax,-0xd4(%rbp)\n    1edc:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n    1ee2:\t0b 85 38 ff ff ff    \tor     -0xc8(%rbp),%eax\n    1ee8:\t83 e0 03             \tand    $0x3,%eax\n    1eeb:\t85 c0                \ttest   %eax,%eax\n    1eed:\t0f 85 ba 02 00 00    \tjne    21ad <do_sigreturn+0x3a3>\n    1ef3:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1efa:\t48 05 c0 00 00 00    \tadd    $0xc0,%rax\n    1f00:\t48 8b 00             \tmov    (%rax),%rax\n    1f03:\t48 89 c7             \tmov    %rax,%rdi\n    1f06:\te8 13 e2 ff ff       \tcallq  11e <tswap64>\n    1f0b:\t89 85 34 ff ff ff    \tmov    %eax,-0xcc(%rbp)\n    1f11:\t90                   \tnop\n    1f12:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f17:\t09 85 2c ff ff ff    \tor     %eax,-0xd4(%rbp)\n    1f1d:\t8b 85 34 ff ff ff    \tmov    -0xcc(%rbp),%eax\n    1f23:\t25 00 00 f0 00       \tand    $0xf00000,%eax\n    1f28:\t89 c2                \tmov    %eax,%edx\n    1f2a:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    1f31:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n    1f37:\t25 ff ff 0f ff       \tand    $0xff0fffff,%eax\n    1f3c:\t09 c2                \tor     %eax,%edx\n    1f3e:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    1f45:\t89 90 98 00 00 00    \tmov    %edx,0x98(%rax)\n    1f4b:\t8b 95 3c ff ff ff    \tmov    -0xc4(%rbp),%edx\n    1f51:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    1f58:\t48 89 50 48          \tmov    %rdx,0x48(%rax)\n    1f5c:\t8b 95 38 ff ff ff    \tmov    -0xc8(%rbp),%edx\n    1f62:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    1f69:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n    1f6d:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1f74:\t48 05 d8 00 00 00    \tadd    $0xd8,%rax\n    1f7a:\t48 8b 00             \tmov    (%rax),%rax\n    1f7d:\t48 89 c7             \tmov    %rax,%rdi\n    1f80:\te8 99 e1 ff ff       \tcallq  11e <tswap64>\n    1f85:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n    1f8c:\t48 89 42 58          \tmov    %rax,0x58(%rdx)\n    1f90:\t90                   \tnop\n    1f91:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f96:\t09 85 2c ff ff ff    \tor     %eax,-0xd4(%rbp)\n    1f9c:\tc7 85 30 ff ff ff 00 \tmovl   $0x0,-0xd0(%rbp)\n    1fa3:\t00 00 00 \n    1fa6:\teb 50                \tjmp    1ff8 <do_sigreturn+0x1ee>\n    1fa8:\t8b 85 30 ff ff ff    \tmov    -0xd0(%rbp),%eax\n    1fae:\t48 98                \tcltq   \n    1fb0:\t48 83 c0 1c          \tadd    $0x1c,%rax\n    1fb4:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1fbb:\t00 \n    1fbc:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1fc3:\t48 01 d0             \tadd    %rdx,%rax\n    1fc6:\t48 8b 00             \tmov    (%rax),%rax\n    1fc9:\t48 89 c7             \tmov    %rax,%rdi\n    1fcc:\te8 4d e1 ff ff       \tcallq  11e <tswap64>\n    1fd1:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n    1fd8:\t8b 8d 30 ff ff ff    \tmov    -0xd0(%rbp),%ecx\n    1fde:\t48 63 c9             \tmovslq %ecx,%rcx\n    1fe1:\t48 89 04 ca          \tmov    %rax,(%rdx,%rcx,8)\n    1fe5:\t90                   \tnop\n    1fe6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1feb:\t09 85 2c ff ff ff    \tor     %eax,-0xd4(%rbp)\n    1ff1:\t83 85 30 ff ff ff 01 \taddl   $0x1,-0xd0(%rbp)\n    1ff8:\t83 bd 30 ff ff ff 07 \tcmpl   $0x7,-0xd0(%rbp)\n    1fff:\t7e a7                \tjle    1fa8 <do_sigreturn+0x19e>\n    2001:\tc7 85 30 ff ff ff 00 \tmovl   $0x0,-0xd0(%rbp)\n    2008:\t00 00 00 \n    200b:\teb 5e                \tjmp    206b <do_sigreturn+0x261>\n    200d:\t8b 85 30 ff ff ff    \tmov    -0xd0(%rbp),%eax\n    2013:\t83 c0 08             \tadd    $0x8,%eax\n    2016:\t48 98                \tcltq   \n    2018:\t48 83 c0 1c          \tadd    $0x1c,%rax\n    201c:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    2023:\t00 \n    2024:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    202b:\t48 01 d0             \tadd    %rdx,%rax\n    202e:\t48 8b 00             \tmov    (%rax),%rax\n    2031:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n    2038:\t48 8b 52 40          \tmov    0x40(%rdx),%rdx\n    203c:\t8b 8d 30 ff ff ff    \tmov    -0xd0(%rbp),%ecx\n    2042:\t48 63 c9             \tmovslq %ecx,%rcx\n    2045:\t48 c1 e1 03          \tshl    $0x3,%rcx\n    2049:\t48 8d 1c 0a          \tlea    (%rdx,%rcx,1),%rbx\n    204d:\t48 89 c7             \tmov    %rax,%rdi\n    2050:\te8 c9 e0 ff ff       \tcallq  11e <tswap64>\n    2055:\t48 89 03             \tmov    %rax,(%rbx)\n    2058:\t90                   \tnop\n    2059:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    205e:\t09 85 2c ff ff ff    \tor     %eax,-0xd4(%rbp)\n    2064:\t83 85 30 ff ff ff 01 \taddl   $0x1,-0xd0(%rbp)\n    206b:\t83 bd 30 ff ff ff 07 \tcmpl   $0x7,-0xd0(%rbp)\n    2072:\t7e 99                \tjle    200d <do_sigreturn+0x203>\n    2074:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    207b:\t48 05 68 01 00 00    \tadd    $0x168,%rax\n    2081:\t48 8b 00             \tmov    (%rax),%rax\n    2084:\t48 89 c7             \tmov    %rax,%rdi\n    2087:\te8 92 e0 ff ff       \tcallq  11e <tswap64>\n    208c:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n    2093:\t90                   \tnop\n    2094:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2099:\t09 85 2c ff ff ff    \tor     %eax,-0xd4(%rbp)\n    209f:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    20a6:\t48 05 60 01 00 00    \tadd    $0x160,%rax\n    20ac:\t8b 00                \tmov    (%rax),%eax\n    20ae:\t89 c7                \tmov    %eax,%edi\n    20b0:\te8 2f e0 ff ff       \tcallq  e4 <tswap32>\n    20b5:\t48 98                \tcltq   \n    20b7:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n    20be:\t90                   \tnop\n    20bf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    20c4:\t09 85 2c ff ff ff    \tor     %eax,-0xd4(%rbp)\n    20ca:\tc7 85 30 ff ff ff 01 \tmovl   $0x1,-0xd0(%rbp)\n    20d1:\t00 00 00 \n    20d4:\teb 50                \tjmp    2126 <do_sigreturn+0x31c>\n    20d6:\t8b 85 30 ff ff ff    \tmov    -0xd0(%rbp),%eax\n    20dc:\t83 e8 01             \tsub    $0x1,%eax\n    20df:\t48 98                \tcltq   \n    20e1:\t48 83 c0 30          \tadd    $0x30,%rax\n    20e5:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    20ec:\t00 \n    20ed:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    20f4:\t48 01 d0             \tadd    %rdx,%rax\n    20f7:\t48 8b 00             \tmov    (%rax),%rax\n    20fa:\t48 89 c7             \tmov    %rax,%rdi\n    20fd:\te8 1c e0 ff ff       \tcallq  11e <tswap64>\n    2102:\t8b 95 30 ff ff ff    \tmov    -0xd0(%rbp),%edx\n    2108:\t48 63 d2             \tmovslq %edx,%rdx\n    210b:\t48 89 84 d5 58 ff ff \tmov    %rax,-0xa8(%rbp,%rdx,8)\n    2112:\tff \n    2113:\t90                   \tnop\n    2114:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2119:\t09 85 2c ff ff ff    \tor     %eax,-0xd4(%rbp)\n    211f:\t83 85 30 ff ff ff 01 \taddl   $0x1,-0xd0(%rbp)\n    2126:\t83 bd 30 ff ff ff 00 \tcmpl   $0x0,-0xd0(%rbp)\n    212d:\t7e a7                \tjle    20d6 <do_sigreturn+0x2cc>\n    212f:\t48 8d 95 58 ff ff ff \tlea    -0xa8(%rbp),%rdx\n    2136:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    213d:\t48 89 d6             \tmov    %rdx,%rsi\n    2140:\t48 89 c7             \tmov    %rax,%rdi\n    2143:\te8 a2 e4 ff ff       \tcallq  5ea <target_to_host_sigset_internal>\n    2148:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    214f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2154:\t48 89 c6             \tmov    %rax,%rsi\n    2157:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    215c:\te8 00 00 00 00       \tcallq  2161 <do_sigreturn+0x357>\n    2161:\t83 bd 2c ff ff ff 00 \tcmpl   $0x0,-0xd4(%rbp)\n    2168:\t75 46                \tjne    21b0 <do_sigreturn+0x3a6>\n    216a:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n    2171:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    2178:\tba 00 00 00 00       \tmov    $0x0,%edx\n    217d:\t48 89 ce             \tmov    %rcx,%rsi\n    2180:\t48 89 c7             \tmov    %rax,%rdi\n    2183:\te8 a1 e0 ff ff       \tcallq  229 <unlock_user>\n    2188:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    218f:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    2193:\t48 8b 00             \tmov    (%rax),%rax\n    2196:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    219a:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n    21a1:\t00 00 \n    21a3:\t74 39                \tje     21de <do_sigreturn+0x3d4>\n    21a5:\teb 32                \tjmp    21d9 <do_sigreturn+0x3cf>\n    21a7:\t90                   \tnop\n    21a8:\teb 07                \tjmp    21b1 <do_sigreturn+0x3a7>\n    21aa:\t90                   \tnop\n    21ab:\teb 04                \tjmp    21b1 <do_sigreturn+0x3a7>\n    21ad:\t90                   \tnop\n    21ae:\teb 01                \tjmp    21b1 <do_sigreturn+0x3a7>\n    21b0:\t90                   \tnop\n    21b1:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n    21b8:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    21bf:\tba 00 00 00 00       \tmov    $0x0,%edx\n    21c4:\t48 89 ce             \tmov    %rcx,%rsi\n    21c7:\t48 89 c7             \tmov    %rax,%rdi\n    21ca:\te8 5a e0 ff ff       \tcallq  229 <unlock_user>\n    21cf:\tbf 0b 00 00 00       \tmov    $0xb,%edi\n    21d4:\te8 59 ec ff ff       \tcallq  e32 <force_sig>\n    21d9:\te8 00 00 00 00       \tcallq  21de <do_sigreturn+0x3d4>\n    21de:\t48 81 c4 e8 00 00 00 \tadd    $0xe8,%rsp\n    21e5:\t5b                   \tpop    %rbx\n    21e6:\t5d                   \tpop    %rbp\n    21e7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_sigreturn(__int64 a1) {\n  unsigned __int64 *v1;\n  int i;\n  int j;\n  unsigned int v5;\n  unsigned int v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 <span class=\"supfact\">v9</span>;\n  sigset_t <span class=\"supfact\">set</span>;\n  unsigned __int64 v11;\n  v11 = __readfsqword(Number);\n  v7 = *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n  v8 = lock_user(Number, v7, Number L);\n  if (!v8 || (v7 & Number) != Number ||\n      (v6 = tswap64(*(_QWORD *)(v8 + Number)),\n       v5 = tswap64(*(_QWORD *)(v8 + Number)),\n       (((unsigned __int8)v5 | (unsigned __int8)v6) & Number) != Number)) {\n    unlock_user(v8, v7, Number L);\n    force_sig(Number);\n  }\n  *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number) & Number |\n                             tswap64(*(_QWORD *)(v8 + Number)) & Number;\n  *(_QWORD *)(a1 + Number) = v6;\n  *(_QWORD *)(a1 + Number) = v5;\n  *(_QWORD *)(a1 + Number) = tswap64(*(_QWORD *)(v8 + Number));\n  for (i = Number; i <= Number; ++i)\n    *(_QWORD *)(a1 + Number L * i) =\n        tswap64(*(_QWORD *)(Number * (i + Number L) + v8));\n  for (j = Number; j <= Number; ++j) {\n    v1 = (unsigned __int64 *)(*(_QWORD *)(a1 + Number) + Number L * j);\n    *v1 = tswap64(*(_QWORD *)(Number * (j + Number + Number L) + v8));\n  }\n  tswap64(*(_QWORD *)(v8 + Number));\n  <span class=\"supfact\">v9</span> = (int)tswap32(*(_DWORD *)(v8 + Number));\n  target_to_host_sigset_internal(&<span class=\"supfact\">set</span>,\n                                 (__int64)&<span class=\"supfact\">v9</span>);\n  sigprocmask(Number, &<span class=\"supfact\">set</span>, Number L);\n  unlock_user(v8, v7, Number L);\n  return **(_QWORD **)(a1 + Number);\n}", "code_t": "__int64 __cdecl do_sigreturn(CPUSPARCState *env) {\n  target_ulong *v1;\n  int i;\n  int ia;\n  uint32_t npc;\n  uint32_t pc;\n  target_ulong sf_addr;\n  target_signal_frame *sf_0;\n  target_sigset_t <span class=\"supfact\">set</span>;\n  sigset_t <span class=\"supfact\">host_set</span>;\n  unsigned __int64 v11;\n  v11 = __readfsqword(Number);\n  sf_addr = env->regwptr[Number];\n  sf_0 = (target_signal_frame *)lock_user(Number, sf_addr, Number L, Number);\n  if (!sf_0 || (sf_addr & Number) != Number ||\n      (pc = tswap64(sf_0->info.si_regs.pc),\n       npc = tswap64(sf_0->info.si_regs.npc),\n       (((unsigned __int8)npc | (unsigned __int8)pc) & Number) != Number)) {\n    unlock_user(sf_0, sf_addr, Number L);\n    force_sig(Number);\n  }\n  env->psr = env->psr & Number | tswap64(sf_0->info.si_regs.psr) & Number;\n  env->pc = pc;\n  env->npc = npc;\n  env->y = tswap64(sf_0->info.si_regs.y);\n  for (i = Number; i <= Number; ++i)\n    env->gregs[i] = tswap64(sf_0->info.si_regs.u_regs[i]);\n  for (ia = Number; ia <= Number; ++ia) {\n    v1 = &env->regwptr[ia];\n    *v1 = tswap64(sf_0->info.si_regs.u_regs[ia + Number]);\n  }\n  tswap64(sf_0->fpu_save);\n  <span class=\"supfact\">set</span>.sig[Number] = (int)tswap32(sf_0->info.si_mask);\n  target_to_host_sigset_internal(&<span class=\"supfact\">host_set</span>,\n                                 &<span class=\"supfact\">set</span>);\n  sigprocmask(Number, &<span class=\"supfact\">host_set</span>, Number L);\n  unlock_user(sf_0, sf_addr, Number L);\n  return *env->regwptr;\n}", "var": [{"name": "set", "type": "struct sigset_t { unsigned __int64[16] __val; }", "ref_name": "host_set", "ref_type": "struct sigset_t { unsigned __int64[16] __val; }"}, {"name": "v9", "type": "struct target_sigset_t { abi_ulong[2] sig; }", "ref_name": "set", "ref_type": "struct target_sigset_t { abi_ulong[1] sig; }"}], "body_in_train": false}, {"repo_owner": "gooorillax", "repo_name": "hlapack", "path": "gooorillax/hlapack/26508a64b6ffe2d13ff349eb5eeab480308218ba4b000cd81f004eb3b3ed95ce", "path_in_repo": "gooorillax/hlapack/protobuf/jni/src/.libs/zero_copy_stream_impl_lite.o", "objdump": "0000000000000cf0 <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv>:\n     cf0:\t41 54                \tpush   %r12\n     cf2:\t55                   \tpush   %rbp\n     cf3:\t53                   \tpush   %rbx\n     cf4:\t48 89 fb             \tmov    %rdi,%rbx\n     cf7:\t48 83 ec 50          \tsub    $0x50,%rsp\n     cfb:\t8b 47 30             \tmov    0x30(%rdi),%eax\n     cfe:\t85 c0                \ttest   %eax,%eax\n     d00:\t75 2e                \tjne    d30 <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x40>\n     d02:\t48 8b 7b 20          \tmov    0x20(%rbx),%rdi\n     d06:\tc7 43 2c 00 00 00 00 \tmovl   $0x0,0x2c(%rbx)\n     d0d:\t48 85 ff             \ttest   %rdi,%rdi\n     d10:\t74 0d                \tje     d1f <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x2f>\n     d12:\te8 00 00 00 00       \tcallq  d17 <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x27>\n     d17:\t48 c7 43 20 00 00 00 \tmovq   $0x0,0x20(%rbx)\n     d1e:\t00 \n     d1f:\t48 83 c4 50          \tadd    $0x50,%rsp\n     d23:\t5b                   \tpop    %rbx\n     d24:\t5d                   \tpop    %rbp\n     d25:\t41 5c                \tpop    %r12\n     d27:\tc3                   \tretq   \n     d28:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n     d2f:\t00 \n     d30:\t48 8d 6c 24 10       \tlea    0x10(%rsp),%rbp\n     d35:\tb9 2d 01 00 00       \tmov    $0x12d,%ecx\n     d3a:\tbe 03 00 00 00       \tmov    $0x3,%esi\n     d3f:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # d46 <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x56>\n     d46:\t48 89 ef             \tmov    %rbp,%rdi\n     d49:\te8 00 00 00 00       \tcallq  d4e <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x5e>\n     d4e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d55 <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x65>\n     d55:\t48 89 ef             \tmov    %rbp,%rdi\n     d58:\te8 00 00 00 00       \tcallq  d5d <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x6d>\n     d5d:\t48 89 c6             \tmov    %rax,%rsi\n     d60:\t48 8d 7c 24 0f       \tlea    0xf(%rsp),%rdi\n     d65:\te8 00 00 00 00       \tcallq  d6a <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x7a>\n     d6a:\t48 89 ef             \tmov    %rbp,%rdi\n     d6d:\te8 00 00 00 00       \tcallq  d72 <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x82>\n     d72:\teb 8e                \tjmp    d02 <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x12>\n     d74:\t49 89 c4             \tmov    %rax,%r12\n     d77:\te9 00 00 00 00       \tjmpq   d7c <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x8c>\n     d7c:\t49 89 c4             \tmov    %rax,%r12\n     d7f:\te9 00 00 00 00       \tjmpq   d84 <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x94>\n     d84:\t49 89 c4             \tmov    %rax,%r12\n     d87:\te9 00 00 00 00       \tjmpq   d8c <_ZN6google8protobuf2io25CopyingInputStreamAdaptor10FreeBufferEv+0x9c>\n     d8c:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "void __fastcall google protobuf io CopyingInputStreamAdaptor\nFreeBuffer(google protobuf io CopyingInputStreamAdaptor *this) {\n  void *v2;\n  __int64 v3;\n  char v4;\n  char <span class=\"supfact\">v5</span>[Number];\n  if (*((_DWORD *)this + Number)) {\n    google protobuf internal LogMessage LogMessage(<span class=\"supfact\">v5</span>, Number L,\n                                                   String, Number L);\n    v3 = google protobuf internal LogMessage operator<<(<span class=\"supfact\">v5</span>,\n                                                        String);\n    google protobuf internal LogFinisher operator=(&v4, v3);\n    google protobuf internal LogMessage ~LogMessage(\n        (google protobuf internal LogMessage *)<span class=\"supfact\">v5</span>);\n  }\n  v2 = (void *)*((_QWORD *)this + Number);\n  *((_DWORD *)this + Number) = Number;\n  if (v2) {\n    operator delete[](v2);\n    *((_QWORD *)this + Number) = Number L;\n  }\n}", "code_t": "void __fastcall google protobuf io CopyingInputStreamAdaptor\nFreeBuffer(google protobuf io CopyingInputStreamAdaptor *this) {\n  unsigned __int8 *v2;\n  __int64 v3;\n  char v4;\n  google protobuf internal LogMessage <span class=\"supfact\">v5</span>;\n  if (this->backup_bytes_) {\n    google protobuf internal LogMessage LogMessage(\n        &<span class=\"supfact\">v5</span>, LOGLEVEL_FATAL, String, Number);\n    v3 = google protobuf internal LogMessage operator<<(&<span class=\"supfact\">v5</span>,\n                                                        String);\n    google protobuf internal LogFinisher operator=(&v4, v3);\n    google protobuf internal LogMessage ~LogMessage(&<span class=\"supfact\">v5</span>);\n  }\n  v2 = this->buffer_.array_;\n  this->buffer_used_ = Number;\n  if (v2) {\n    operator delete[](v2);\n    this->buffer_.array_ = Number L;\n  }\n}", "var": [{"name": "v5", "type": "struct google::protobuf::internal::LogMessage { google::protobuf::LogLevel level_; PADDING (4); const char * filename_; int line_; PADDING (4); std::string message_; }", "ref_name": "v5", "ref_type": "struct google::protobuf::internal::LogMessage { google::protobuf::LogLevel level_; PADDING (4); const char * filename_; int line_; PADDING (4); std::string message_; }"}], "body_in_train": true}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/dcb8cfc19b1d723fd5fad9ae551b9f63adb87e9e6e82c5bbaf0a221013c62501", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/ssl/ssl_mail_client", "objdump": "0000000000470bf4 <mbedtls_poly1305_mac>:\n  470bf4:\t55                   \tpush   %rbp\n  470bf5:\t48 89 e5             \tmov    %rsp,%rbp\n  470bf8:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n  470bfc:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n  470c00:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n  470c04:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n  470c08:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n  470c0c:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  470c10:\t48 89 c7             \tmov    %rax,%rdi\n  470c13:\te8 5e fa ff ff       \tcallq  470676 <mbedtls_poly1305_init>\n  470c18:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  470c1c:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  470c20:\t48 89 d6             \tmov    %rdx,%rsi\n  470c23:\t48 89 c7             \tmov    %rax,%rdi\n  470c26:\te8 94 fa ff ff       \tcallq  4706bf <mbedtls_poly1305_starts>\n  470c2b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  470c2e:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  470c32:\t75 38                \tjne    470c6c <mbedtls_poly1305_mac+0x78>\n  470c34:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n  470c38:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n  470c3c:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  470c40:\t48 89 ce             \tmov    %rcx,%rsi\n  470c43:\t48 89 c7             \tmov    %rax,%rdi\n  470c46:\te8 6a fd ff ff       \tcallq  4709b5 <mbedtls_poly1305_update>\n  470c4b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  470c4e:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  470c52:\t75 1b                \tjne    470c6f <mbedtls_poly1305_mac+0x7b>\n  470c54:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n  470c58:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  470c5c:\t48 89 d6             \tmov    %rdx,%rsi\n  470c5f:\t48 89 c7             \tmov    %rax,%rdi\n  470c62:\te8 df fe ff ff       \tcallq  470b46 <mbedtls_poly1305_finish>\n  470c67:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  470c6a:\teb 04                \tjmp    470c70 <mbedtls_poly1305_mac+0x7c>\n  470c6c:\t90                   \tnop\n  470c6d:\teb 01                \tjmp    470c70 <mbedtls_poly1305_mac+0x7c>\n  470c6f:\t90                   \tnop\n  470c70:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  470c74:\t48 89 c7             \tmov    %rax,%rdi\n  470c77:\te8 1a fa ff ff       \tcallq  470696 <mbedtls_poly1305_free>\n  470c7c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  470c7f:\tc9                   \tleaveq \n  470c80:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_poly1305_mac(unsigned __int16 *a1, char *a2,\n                                        size_t a3, _DWORD *a4) {\n  char <span class=\"supfact\">v7</span>[Number];\n  unsigned int v8;\n  mbedtls_poly1305_init((__int64)<span class=\"supfact\">v7</span>);\n  v8 = mbedtls_poly1305_starts((__int64)<span class=\"supfact\">v7</span>, a1);\n  if (!v8) {\n    v8 = mbedtls_poly1305_update((__int64)<span class=\"supfact\">v7</span>, a2, a3);\n    if (!v8)\n      v8 = mbedtls_poly1305_finish((__int64)<span class=\"supfact\">v7</span>, a4);\n  }\n  mbedtls_poly1305_free((__int64)<span class=\"supfact\">v7</span>);\n  return v8;\n}", "code_t": "int __cdecl mbedtls_poly1305_mac(const unsigned __int8 *key,\n                                 const unsigned __int8 *input, size_t ilen,\n                                 unsigned __int8 *mac) {\n  mbedtls_poly1305_context_0 <span class=\"supfact\">ctx</span>;\n  int ret;\n  mbedtls_poly1305_init(&<span class=\"supfact\">ctx</span>);\n  ret = mbedtls_poly1305_starts(&<span class=\"supfact\">ctx</span>, key);\n  if (!ret) {\n    ret = mbedtls_poly1305_update(&<span class=\"supfact\">ctx</span>, input, ilen);\n    if (!ret)\n      ret = mbedtls_poly1305_finish(&<span class=\"supfact\">ctx</span>, mac);\n  }\n  mbedtls_poly1305_free(&<span class=\"supfact\">ctx</span>);\n  return ret;\n}", "var": [{"name": "v7", "type": "struct mbedtls_poly1305_context_0 { uint32_t[4] r; uint32_t[4] s; uint32_t[5] acc; uint8_t[16] queue; PADDING (4); size_t queue_len; }", "ref_name": "ctx", "ref_type": "struct mbedtls_poly1305_context_0 { uint32_t[4] r; uint32_t[4] s; uint32_t[5] acc; uint8_t[16] queue; PADDING (4); size_t queue_len; }"}], "body_in_train": true}, {"code_s": "__int64 __fastcall std __make_move_if_noexcept_iterator<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>,\n    std move_iterator<std __cxx11 basic_string<\n        char, std char_traits<char>, std allocator<char>> *>>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>> *>\n      move_iterator(&<span class=\"supfact\">v2</span>, a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>> *> __cdecl std\n__make_move_if_noexcept_iterator<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>,\n    std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>> *>>(\n    std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>> *__i) {\n  std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>> *>\n      <span class=\"supfact\">v2</span>;\n  std move_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>> *>\n      move_iterator(&<span class=\"supfact\">v2</span>, __i);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "struct std::move_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*> { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }", "ref_name": "v2", "ref_type": "struct std::move_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*> { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}], "body_in_train": true}, {"repo_owner": "estonetechnology", "repo_name": "ppc-4510-android-kernel-imx", "path": "estonetechnology/ppc-4510-android-kernel-imx/5ea75df447e8537c0863ae3bbaa57687f599ad38b1a998896963cc64251655bf", "path_in_repo": "estonetechnology/ppc-4510-android-kernel-imx/tools/perf/builtin-diff.o", "objdump": "0000000000000bc7 <diff__process_sample_event>:\n     bc7:\t55                   \tpush   %rbp\n     bc8:\t48 89 e5             \tmov    %rsp,%rbp\n     bcb:\t48 83 ec 70          \tsub    $0x70,%rsp\n     bcf:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     bd3:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     bd7:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n     bdb:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n     bdf:\t4c 89 45 98          \tmov    %r8,-0x68(%rbp)\n     be3:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     bea:\t00 00 \n     bec:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     bf0:\t31 c0                \txor    %eax,%eax\n     bf2:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n     bf6:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n     bfa:\t48 8b 75 98          \tmov    -0x68(%rbp),%rsi\n     bfe:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     c02:\t48 89 c7             \tmov    %rax,%rdi\n     c05:\te8 00 00 00 00       \tcallq  c0a <diff__process_sample_event+0x43>\n     c0a:\t85 c0                \ttest   %eax,%eax\n     c0c:\t79 26                \tjns    c34 <diff__process_sample_event+0x6d>\n     c0e:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     c12:\t8b 00                \tmov    (%rax),%eax\n     c14:\t89 c2                \tmov    %eax,%edx\n     c16:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c1b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c20:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c25:\te8 00 00 00 00       \tcallq  c2a <diff__process_sample_event+0x63>\n     c2a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     c2f:\te9 86 00 00 00       \tjmpq   cba <diff__process_sample_event+0xf3>\n     c34:\t0f b6 45 e9          \tmovzbl -0x17(%rbp),%eax\n     c38:\t84 c0                \ttest   %al,%al\n     c3a:\t74 07                \tje     c43 <diff__process_sample_event+0x7c>\n     c3c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c41:\teb 77                \tjmp    cba <diff__process_sample_event+0xf3>\n     c43:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     c47:\t48 8b 70 40          \tmov    0x40(%rax),%rsi\n     c4b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     c4f:\t48 8b 48 38          \tmov    0x38(%rax),%rcx\n     c53:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     c57:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n     c5b:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     c5f:\t48 8d b8 a8 00 00 00 \tlea    0xa8(%rax),%rdi\n     c66:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     c6a:\t49 89 f0             \tmov    %rsi,%r8\n     c6d:\t48 89 c6             \tmov    %rax,%rsi\n     c70:\te8 cf fe ff ff       \tcallq  b44 <hists__add_entry>\n     c75:\t85 c0                \ttest   %eax,%eax\n     c77:\t74 1b                \tje     c94 <diff__process_sample_event+0xcd>\n     c79:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c7e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c83:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c88:\te8 00 00 00 00       \tcallq  c8d <diff__process_sample_event+0xc6>\n     c8d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     c92:\teb 26                \tjmp    cba <diff__process_sample_event+0xf3>\n     c94:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     c98:\t48 8b 90 20 01 00 00 \tmov    0x120(%rax),%rdx\n     c9f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     ca3:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     ca7:\t48 01 c2             \tadd    %rax,%rdx\n     caa:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     cae:\t48 89 90 20 01 00 00 \tmov    %rdx,0x120(%rax)\n     cb5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     cba:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     cbe:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     cc5:\t00 00 \n     cc7:\t74 05                \tje     cce <diff__process_sample_event+0x107>\n     cc9:\te8 00 00 00 00       \tcallq  cce <diff__process_sample_event+0x107>\n     cce:\tc9                   \tleaveq \n     ccf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall diff__process_sample_event(__int64 a1, unsigned int *a2,\n                                              __int64 *a3, __int64 a4,\n                                              __int64 a5) {\n  __int64 result;\n  char <span class=\"supfact\">v8</span>[Number];\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  if ((int)perf_event__preprocess_sample(a2, a5, <span class=\"supfact\">v8</span>, a3) >=\n      Number) {\n    if (<span class=\"supfact\">v8</span>[Number]) {\n      result = Number L;\n    } else if ((unsigned int)hists__add_entry(\n                   a4 + Number, (__int64)<span class=\"supfact\">v8</span>, a3[Number],\n                   a3[Number], a3[Number])) {\n      eprintf(Number L, String);\n      result = Number;\n    } else {\n      *(_QWORD *)(a4 + Number) += a3[Number];\n      result = Number L;\n    }\n  } else {\n    eprintf(Number L, String, *a2);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl diff__process_sample_event(perf_tool *tool, perf_event *event,\n                                       perf_sample *sample, perf_evsel *evsel,\n                                       machine *machine) {\n  int result;\n  addr_location <span class=\"supfact\">al_0</span>;\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  if ((int)perf_event__preprocess_sample(event, machine, &<span class=\"supfact\">al_0</span>,\n                                         sample) >= Number) {\n    if (<span class=\"supfact\">al_0</span>.filtered) {\n      result = Number;\n    } else if (hists__add_entry(&evsel->hists, &<span class=\"supfact\">al_0</span>,\n                                sample->period, sample->weight,\n                                sample->transaction)) {\n      eprintf(Number L, String);\n      result = Number;\n    } else {\n      evsel->hists.stats.total_period += sample->period;\n      result = Number;\n    }\n  } else {\n    eprintf(Number L, String, event->header.type);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v8", "type": "struct addr_location { machine * machine; thread * thread; map * map; symbol * sym; u64 addr; char level; u8 filtered; u8 cpumode; PADDING (1); s32 cpu; s32 socket; PADDING (4); }", "ref_name": "al_0", "ref_type": "struct addr_location { machine * machine; thread * thread; map * map; symbol * sym; u64 addr; char level; bool filtered; u8 cpumode; PADDING (1); s32 cpu; }"}], "body_in_train": true}, {"repo_owner": "jack71728", "repo_name": "qemuVmHw1", "path": "jack71728/qemuVmHw1/7e88f6eb46959828ce611972ba8dffcb154f4b966571d41ad9ed34447f064721", "path_in_repo": "jack71728/qemuVmHw1/qemu-0.13.0/mips64el-softmmu/virtio-9p.o", "objdump": "0000000000000a4e <v9fs_do_mkdir>:\n     a4e:\t55                   \tpush   %rbp\n     a4f:\t48 89 e5             \tmov    %rsp,%rbp\n     a52:\t48 83 ec 30          \tsub    $0x30,%rsp\n     a56:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     a5a:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     a5e:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     a65:\t00 00 \n     a67:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     a6b:\t31 c0                \txor    %eax,%eax\n     a6d:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     a71:\t48 89 c7             \tmov    %rax,%rdi\n     a74:\te8 00 00 00 00       \tcallq  a79 <v9fs_do_mkdir+0x2b>\n     a79:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     a7d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     a81:\t8b 40 28             \tmov    0x28(%rax),%eax\n     a84:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     a87:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     a8b:\t8b 40 28             \tmov    0x28(%rax),%eax\n     a8e:\t25 ff 01 00 00       \tand    $0x1ff,%eax\n     a93:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n     a96:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a9a:\t48 8b 80 98 14 60 00 \tmov    0x601498(%rax),%rax\n     aa1:\t48 8b 88 b0 00 00 00 \tmov    0xb0(%rax),%rcx\n     aa8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     aac:\t48 8b 80 e8 00 00 00 \tmov    0xe8(%rax),%rax\n     ab3:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     ab7:\t48 8d ba a0 14 60 00 \tlea    0x6014a0(%rdx),%rdi\n     abe:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     ac2:\t48 89 c6             \tmov    %rax,%rsi\n     ac5:\tff d1                \tcallq  *%rcx\n     ac7:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     acb:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     ad2:\t00 00 \n     ad4:\t74 05                \tje     adb <v9fs_do_mkdir+0x8d>\n     ad6:\te8 00 00 00 00       \tcallq  adb <v9fs_do_mkdir+0x8d>\n     adb:\tc9                   \tleaveq \n     adc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall v9fs_do_mkdir(__int64 a1, __int64 a2) {\n  int <span class=\"supfact\">v3</span>[Number];\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  cred_init((__int64)<span class=\"supfact\">v3</span>);\n  <span class=\"supfact\">v3</span>[Number] = *(_DWORD *)(*(_QWORD *)(a2 + Number) + Number L);\n  <span class=\"supfact\">v3</span>[Number] = *(_DWORD *)(a2 + Number) & Number;\n  return (*(__int64(__fastcall **)(__int64, _QWORD, int *))(\n      *(_QWORD *)(a1 + Number) + Number L))(\n      a1 + Number, *(_QWORD *)(a2 + Number), <span class=\"supfact\">v3</span>);\n}", "code_t": "int __cdecl v9fs_do_mkdir(V9fsState_0 *s, V9fsCreateState_0 *vs) {\n  FsCred_0 <span class=\"supfact\">cred</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  cred_init(&<span class=\"supfact\">cred</span>);\n  <span class=\"supfact\">cred</span>.fc_uid = vs->fidp->uid;\n  <span class=\"supfact\">cred</span>.fc_mode = vs->perm & Number;\n  return s->ops->mkdir(&s->ctx, vs->fullname.data, &<span class=\"supfact\">cred</span>);\n}", "var": [{"name": "v3", "type": "struct FsCred_0 { uid_t fc_uid; gid_t fc_gid; mode_t fc_mode; PADDING (4); dev_t fc_rdev; }", "ref_name": "cred", "ref_type": "struct FsCred_0 { uid_t fc_uid; gid_t fc_gid; mode_t fc_mode; PADDING (4); dev_t fc_rdev; }"}], "body_in_train": true}, {"repo_owner": "sailfishos", "repo_name": "kernel-adaptation-pc", "path": "sailfishos/kernel-adaptation-pc/c78f36cf01c1b64de6d1ecae518c072eeeff351bba7a695b85d5c5cf4ec0708d", "path_in_repo": "sailfishos/kernel-adaptation-pc/tools/testing/selftests/kvm/lib/kvm_util.o", "objdump": "00000000000006b1 <kvm_vm_get_dirty_log>:\n     6b1:\t55                   \tpush   %rbp\n     6b2:\t48 89 e5             \tmov    %rsp,%rbp\n     6b5:\t48 83 ec 40          \tsub    $0x40,%rsp\n     6b9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     6bd:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n     6c0:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     6c4:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n     6cb:\t00 \n     6cc:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     6d3:\t00 \n     6d4:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     6d7:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     6da:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     6de:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     6e2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6e6:\t8b 40 14             \tmov    0x14(%rax),%eax\n     6e9:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     6ed:\tbe 42 ae 10 40       \tmov    $0x4010ae42,%esi\n     6f2:\t89 c7                \tmov    %eax,%edi\n     6f4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6f9:\te8 00 00 00 00       \tcallq  6fe <kvm_vm_get_dirty_log+0x4d>\n     6fe:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     701:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     704:\tf7 d8                \tneg    %eax\n     706:\t89 c7                \tmov    %eax,%edi\n     708:\te8 00 00 00 00       \tcallq  70d <kvm_vm_get_dirty_log+0x5c>\n     70d:\t48 89 c2             \tmov    %rax,%rdx\n     710:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     714:\t0f 94 c0             \tsete   %al\n     717:\t0f b6 c0             \tmovzbl %al,%eax\n     71a:\t49 89 d1             \tmov    %rdx,%r9\n     71d:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     723:\tb9 00 01 00 00       \tmov    $0x100,%ecx\n     728:\tba 00 00 00 00       \tmov    $0x0,%edx\n     72d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     732:\t89 c7                \tmov    %eax,%edi\n     734:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     739:\te8 00 00 00 00       \tcallq  73e <kvm_vm_get_dirty_log+0x8d>\n     73e:\t90                   \tnop\n     73f:\tc9                   \tleaveq \n     740:\tc3                   \tretq   ", "code_s": "__int64 __fastcall kvm_vm_get_dirty_log(__int64 a1, unsigned int a2,\n                                        __int64 a3) {\n  char *v3;\n  const char *v5;\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  int v7;\n  <span class=\"supfact\">v6</span>[Number] = a2;\n  <span class=\"supfact\">v6</span>[Number] = a3;\n  v7 = ioctl(*(_DWORD *)(a1 + Number), Number, <span class=\"supfact\">v6</span>);\n  v3 = strerror(-v7);\n  return test_assert(v7 == Number, String, String, Number L, String, v3, v5);\n}", "code_t": "void __cdecl kvm_vm_get_dirty_log(kvm_vm *vm, int slot, void *log) {\n  char *v3;\n  const char *v4;\n  kvm_dirty_log <span class=\"supfact\">args</span>;\n  int ret;\n  <span class=\"supfact\">args</span>.padding1 = Number;\n  <span class=\"supfact\">args</span>.slot = slot;\n  <span class=\"supfact\">args</span>._anon_0.padding2 = (__u64)log;\n  ret = ioctl(vm->fd, Number, &<span class=\"supfact\">args</span>);\n  v3 = strerror(-ret);\n  test_assert(ret == Number, String, String, Number L, String, v3, v4);\n}", "var": [{"name": "v6", "type": "struct kvm_dirty_log { __u32 slot; __u32 padding1; $E60548600F59901E4C02B19E95F06400 _anon_0; }", "ref_name": "args", "ref_type": "struct kvm_dirty_log { __u32 slot; __u32 padding1; $E60548600F59901E4C02B19E95F06400 _anon_0; }"}], "body_in_train": true}, {"repo_owner": "hbowden", "repo_name": "nextgen", "path": "hbowden/nextgen/749cd7274abd7be4b3735b79dc38349403f91a69d36ed4ba6331261be3d2741d", "path_in_repo": "hbowden/nextgen/deps/libressl-2.5.1/ssl/d1_lib.o", "objdump": "0000000000000a3c <dtls1_is_timer_expired>:\n a3c:\t55                   \tpush   %rbp\n a3d:\t48 89 e5             \tmov    %rsp,%rbp\n a40:\t48 83 ec 30          \tsub    $0x30,%rsp\n a44:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n a48:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n a4f:\t00 00 \n a51:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n a55:\t31 c0                \txor    %eax,%eax\n a57:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n a5b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a5f:\t48 89 d6             \tmov    %rdx,%rsi\n a62:\t48 89 c7             \tmov    %rax,%rdi\n a65:\te8 00 00 00 00       \tcallq  a6a <dtls1_is_timer_expired+0x2e>\n a6a:\t48 85 c0             \ttest   %rax,%rax\n a6d:\t75 07                \tjne    a76 <dtls1_is_timer_expired+0x3a>\n a6f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n a74:\teb 1e                \tjmp    a94 <dtls1_is_timer_expired+0x58>\n a76:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n a7a:\t48 85 c0             \ttest   %rax,%rax\n a7d:\t7f 09                \tjg     a88 <dtls1_is_timer_expired+0x4c>\n a7f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n a83:\t48 85 c0             \ttest   %rax,%rax\n a86:\t7e 07                \tjle    a8f <dtls1_is_timer_expired+0x53>\n a88:\tb8 00 00 00 00       \tmov    $0x0,%eax\n a8d:\teb 05                \tjmp    a94 <dtls1_is_timer_expired+0x58>\n a8f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n a94:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n a98:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n a9f:\t00 00 \n aa1:\t74 05                \tje     aa8 <dtls1_is_timer_expired+0x6c>\n aa3:\te8 00 00 00 00       \tcallq  aa8 <dtls1_is_timer_expired+0x6c>\n aa8:\tc9                   \tleaveq \n aa9:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall dtls1_is_timer_expired(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  <span class=\"supfact\">v2</span>[Number] = __readfsqword(Number);\n  if (!dtls1_get_timeout(a1, <span class=\"supfact\">v2</span>))\n    return Number L;\n  return <span class=\"supfact\">v2</span>[Number] <= Number &&\n         <span class=\"supfact\">v2</span>[Number] <= Number;\n}", "code_t": "int __cdecl dtls1_is_timer_expired(SSL *s) {\n  timeval <span class=\"supfact\">timeleft</span>;\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  if (!dtls1_get_timeout(s, &<span class=\"supfact\">timeleft</span>))\n    return Number;\n  return <span class=\"supfact\">timeleft</span>.tv_sec <= Number &&\n         <span class=\"supfact\">timeleft</span>.tv_usec <= Number;\n}", "var": [{"name": "v2", "type": "_QWORD[4]", "ref_name": "timeleft", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "wgrzelczak", "repo_name": "nyngine", "path": "wgrzelczak/nyngine/a2e5ff2a1979e534b1928382b3498c93e8ff70ac8fcb03fc713262a5b1cf79ba", "path_in_repo": "wgrzelczak/nyngine/External/spdlog/tests/main.o", "objdump": "", "code_s": "void __fastcall Catch Section ~Section(Catch Section *this) {\n  Catch SectionInfo *v1;\n  bool v3;\n  char *v4;\n  __int64 v5;\n  void(__fastcall * v6)(__int64, Catch SectionInfo *, char *, double);\n  struct timeval <span class=\"supfact\">v7</span>;\n  v1 = (Catch Section *)((char *)this + Number);\n  v3 = *((_BYTE *)this + Number) == Number; * ( _QWORD * ) this = & ` vtable for ' Catch Section + Number ; if ( ! v3 ) { v5 = Catch getResultCapture ( this ) ; v6 = * ( void ( __fastcall * * ) ( __int64 , Catch SectionInfo * , char * , double ) ) ( * ( _QWORD * ) v5 + Number L ) ; gettimeofday ( & <span class=\"supfact\">v7</span> , Number L ) ; v6 ( v5 , v1 , ( char * ) this + Number , ( double ) ( LODWORD ( <span class=\"supfact\">v7</span> . tv_usec ) + Number * LODWORD ( <span class=\"supfact\">v7</span> . tv_sec ) - * ( ( _DWORD * ) this + Number ) ) / Number ) ; } v4 = ( char * ) * ( ( _QWORD * ) this + Number ) ; if ( v4 != ( char * ) this + Number ) operator delete ( v4 ) ; Catch SectionInfo ~ SectionInfo ( v1 ) ; }", "code_t": "void __fastcall Catch Section ~Section(Catch Section *this) {\n  Catch SectionInfo *v1;\n  bool v3;\n  char *v4;\n  __int64 v5;\n  void(__fastcall * v6)(__int64, Catch SectionInfo *, char *, double);\n  struct timeval <span class=\"supfact\">v7</span>;\n  v1 = (Catch Section *)((char *)this + Number);\n  v3 = *((_BYTE *)this + Number) == Number; * ( _QWORD * ) this = & ` vtable for ' Catch Section + Number ; if ( ! v3 ) { v5 = Catch getResultCapture ( this ) ; v6 = * ( void ( __fastcall * * ) ( __int64 , Catch SectionInfo * , char * , double ) ) ( * ( _QWORD * ) v5 + Number L ) ; gettimeofday ( & <span class=\"supfact\">v7</span> , Number L ) ; v6 ( v5 , v1 , ( char * ) this + Number , ( double ) ( LODWORD ( <span class=\"supfact\">v7</span> . tv_usec ) + Number * LODWORD ( <span class=\"supfact\">v7</span> . tv_sec ) - * ( ( _DWORD * ) this + Number ) ) / Number ) ; } v4 = ( char * ) * ( ( _QWORD * ) this + Number ) ; if ( v4 != ( char * ) this + Number ) operator delete ( v4 ) ; Catch SectionInfo ~ SectionInfo ( v1 ) ; }", "var": [{"name": "v7", "type": "double[2]", "ref_name": "v7", "ref_type": "struct struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/6ef889d2126d4cafe3d3b5b34d9f2bd3ed1239544c50da2f42f4919b0030742f", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Foundation/testsuite/bin/Linux/x86_64/TestLibraryd.so", "objdump": "000000000000cefc <_ZN4Poco15SingletonHolderI7PluginCE3getEv>:\n    cefc:\t55                   \tpush   %rbp\n    cefd:\t48 89 e5             \tmov    %rsp,%rbp\n    cf00:\t41 54                \tpush   %r12\n    cf02:\t53                   \tpush   %rbx\n    cf03:\t48 83 ec 20          \tsub    $0x20,%rsp\n    cf07:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    cf0b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    cf0f:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n    cf13:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n    cf17:\t48 89 d6             \tmov    %rdx,%rsi\n    cf1a:\t48 89 c7             \tmov    %rax,%rdi\n    cf1d:\te8 ce d7 ff ff       \tcallq  a6f0 <_ZN4Poco10ScopedLockINS_9FastMutexEEC1ERS1_@plt>\n    cf22:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    cf26:\t48 8b 00             \tmov    (%rax),%rax\n    cf29:\t48 85 c0             \ttest   %rax,%rax\n    cf2c:\t75 1c                \tjne    cf4a <_ZN4Poco15SingletonHolderI7PluginCE3getEv+0x4e>\n    cf2e:\tbf 08 00 00 00       \tmov    $0x8,%edi\n    cf33:\te8 18 d6 ff ff       \tcallq  a550 <_Znwm@plt>\n    cf38:\t48 89 c3             \tmov    %rax,%rbx\n    cf3b:\t48 89 df             \tmov    %rbx,%rdi\n    cf3e:\te8 1d d8 ff ff       \tcallq  a760 <_ZN7PluginCC1Ev@plt>\n    cf43:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    cf47:\t48 89 18             \tmov    %rbx,(%rax)\n    cf4a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    cf4e:\t48 8b 18             \tmov    (%rax),%rbx\n    cf51:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n    cf55:\t48 89 c7             \tmov    %rax,%rdi\n    cf58:\te8 63 d3 ff ff       \tcallq  a2c0 <_ZN4Poco10ScopedLockINS_9FastMutexEED1Ev@plt>\n    cf5d:\t48 89 d8             \tmov    %rbx,%rax\n    cf60:\teb 2f                \tjmp    cf91 <_ZN4Poco15SingletonHolderI7PluginCE3getEv+0x95>\n    cf62:\t49 89 c4             \tmov    %rax,%r12\n    cf65:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    cf6a:\t48 89 df             \tmov    %rbx,%rdi\n    cf6d:\te8 fe d5 ff ff       \tcallq  a570 <_ZdlPvm@plt>\n    cf72:\t4c 89 e3             \tmov    %r12,%rbx\n    cf75:\teb 03                \tjmp    cf7a <_ZN4Poco15SingletonHolderI7PluginCE3getEv+0x7e>\n    cf77:\t48 89 c3             \tmov    %rax,%rbx\n    cf7a:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n    cf7e:\t48 89 c7             \tmov    %rax,%rdi\n    cf81:\te8 3a d3 ff ff       \tcallq  a2c0 <_ZN4Poco10ScopedLockINS_9FastMutexEED1Ev@plt>\n    cf86:\t48 89 d8             \tmov    %rbx,%rax\n    cf89:\t48 89 c7             \tmov    %rax,%rdi\n    cf8c:\te8 ef da ff ff       \tcallq  aa80 <_Unwind_Resume@plt>\n    cf91:\t48 83 c4 20          \tadd    $0x20,%rsp\n    cf95:\t5b                   \tpop    %rbx\n    cf96:\t41 5c                \tpop    %r12\n    cf98:\t5d                   \tpop    %rbp\n    cf99:\tc3                   \tretq   ", "code_s": "PluginC *__fastcall Poco SingletonHolder<PluginC> get(PluginC **a1) {\n  PluginC *v1;\n  PluginC *v2;\n  char <span class=\"supfact\">v4</span>[Number];\n  Poco ScopedLock<Poco FastMutex> ScopedLock(<span class=\"supfact\">v4</span>, a1 + Number);\n  if (!*a1) {\n    v1 = (PluginC *)operator new(Number);\n    PluginC PluginC(v1);\n    *a1 = v1;\n  }\n  v2 = *a1;\n  Poco ScopedLock<Poco FastMutex> ~ScopedLock(<span class=\"supfact\">v4</span>);\n  return v2;\n}", "code_t": "PluginC *__cdecl Poco SingletonHolder<PluginC>\nget(Poco SingletonHolder<PluginC> *const this) {\n  PluginC *v1;\n  PluginC *v2;\n  Poco FastMutex ScopedLock <span class=\"supfact\">lock</span>;\n  Poco ScopedLock<Poco FastMutex> ScopedLock(&<span class=\"supfact\">lock</span>, &this->_m);\n  if (!this->_pS) {\n    v1 = (PluginC *)operator new(Number);\n    PluginC PluginC(v1);\n    this->_pS = v1;\n  }\n  v2 = this->_pS;\n  Poco ScopedLock<Poco FastMutex> ~ScopedLock(&<span class=\"supfact\">lock</span>);\n  return v2;\n}", "var": [{"name": "v4", "type": "struct Poco::FastMutex::ScopedLock { Poco::FastMutex * _mutex; }", "ref_name": "lock", "ref_type": "struct Poco::FastMutex::ScopedLock { Poco::FastMutex * _mutex; }"}], "body_in_train": false}, {"repo_owner": "truncs", "repo_name": "qemu-jos", "path": "truncs/qemu-jos/207186e73424b18d1cf993e2ba5447f85b9f3a4d92f00e98f98756d0674e04c8", "path_in_repo": "truncs/qemu-jos//m68k-softmmu/eepro100.o", "objdump": "0000000000002423 <eepro100_write_port>:\n    2423:\t55                   \tpush   %rbp\n    2424:\t48 89 e5             \tmov    %rsp,%rbp\n    2427:\t48 83 ec 20          \tsub    $0x20,%rsp\n    242b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    242f:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    2432:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    2435:\t89 c7                \tmov    %eax,%edi\n    2437:\te8 e4 db ff ff       \tcallq  20 <le32_to_cpu>\n    243c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    243f:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    2442:\t83 e0 fc             \tand    $0xfffffffc,%eax\n    2445:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    2448:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    244b:\t83 e0 03             \tand    $0x3,%eax\n    244e:\t88 45 fb             \tmov    %al,-0x5(%rbp)\n    2451:\t0f b6 45 fb          \tmovzbl -0x5(%rbp),%eax\n    2455:\t83 f8 02             \tcmp    $0x2,%eax\n    2458:\t0f 84 96 00 00 00    \tje     24f4 <eepro100_write_port+0xd1>\n    245e:\t83 f8 02             \tcmp    $0x2,%eax\n    2461:\t0f 8f c8 00 00 00    \tjg     252f <eepro100_write_port+0x10c>\n    2467:\t85 c0                \ttest   %eax,%eax\n    2469:\t74 0a                \tje     2475 <eepro100_write_port+0x52>\n    246b:\t83 f8 01             \tcmp    $0x1,%eax\n    246e:\t74 16                \tje     2486 <eepro100_write_port+0x63>\n    2470:\te9 ba 00 00 00       \tjmpq   252f <eepro100_write_port+0x10c>\n    2475:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2479:\t48 89 c7             \tmov    %rax,%rdi\n    247c:\te8 90 e8 ff ff       \tcallq  d11 <nic_reset>\n    2481:\te9 f6 00 00 00       \tjmpq   257c <eepro100_write_port+0x159>\n    2486:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 248c <eepro100_write_port+0x69>\n    248c:\t85 c0                \ttest   %eax,%eax\n    248e:\t74 23                \tje     24b3 <eepro100_write_port+0x90>\n    2490:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2497 <eepro100_write_port+0x74>\n    2497:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    249a:\t89 d1                \tmov    %edx,%ecx\n    249c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    24a1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    24a6:\t48 89 c7             \tmov    %rax,%rdi\n    24a9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24ae:\te8 00 00 00 00       \tcallq  24b3 <eepro100_write_port+0x90>\n    24b3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    24b6:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n    24ba:\tba 08 00 00 00       \tmov    $0x8,%edx\n    24bf:\t48 89 ce             \tmov    %rcx,%rsi\n    24c2:\t48 89 c7             \tmov    %rax,%rdi\n    24c5:\te8 d7 db ff ff       \tcallq  a1 <cpu_physical_memory_read>\n    24ca:\tc7 45 f0 ff ff ff ff \tmovl   $0xffffffff,-0x10(%rbp)\n    24d1:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n    24d8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    24db:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n    24df:\tba 08 00 00 00       \tmov    $0x8,%edx\n    24e4:\t48 89 ce             \tmov    %rcx,%rsi\n    24e7:\t48 89 c7             \tmov    %rax,%rdi\n    24ea:\te8 e0 db ff ff       \tcallq  cf <cpu_physical_memory_write>\n    24ef:\te9 88 00 00 00       \tjmpq   257c <eepro100_write_port+0x159>\n    24f4:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 24fa <eepro100_write_port+0xd7>\n    24fa:\t85 c0                \ttest   %eax,%eax\n    24fc:\t74 23                \tje     2521 <eepro100_write_port+0xfe>\n    24fe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2505 <eepro100_write_port+0xe2>\n    2505:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    2508:\t89 d1                \tmov    %edx,%ecx\n    250a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    250f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2514:\t48 89 c7             \tmov    %rax,%rdi\n    2517:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    251c:\te8 00 00 00 00       \tcallq  2521 <eepro100_write_port+0xfe>\n    2521:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2525:\t48 89 c7             \tmov    %rax,%rdi\n    2528:\te8 96 e6 ff ff       \tcallq  bc3 <nic_selective_reset>\n    252d:\teb 4d                \tjmp    257c <eepro100_write_port+0x159>\n    252f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2535 <eepro100_write_port+0x112>\n    2535:\t85 c0                \ttest   %eax,%eax\n    2537:\t74 23                \tje     255c <eepro100_write_port+0x139>\n    2539:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2540 <eepro100_write_port+0x11d>\n    2540:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    2543:\t89 d1                \tmov    %edx,%ecx\n    2545:\tba 00 00 00 00       \tmov    $0x0,%edx\n    254a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    254f:\t48 89 c7             \tmov    %rax,%rdi\n    2552:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2557:\te8 00 00 00 00       \tcallq  255c <eepro100_write_port+0x139>\n    255c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2563 <eepro100_write_port+0x140>\n    2563:\t48 89 c1             \tmov    %rax,%rcx\n    2566:\tba 47 00 00 00       \tmov    $0x47,%edx\n    256b:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2570:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2575:\te8 00 00 00 00       \tcallq  257a <eepro100_write_port+0x157>\n    257a:\teb 00                \tjmp    257c <eepro100_write_port+0x159>\n    257c:\t90                   \tnop\n    257d:\tc9                   \tleaveq \n    257e:\tc3                   \tretq   ", "code_s": "size_t __fastcall eepro100_write_port(const void *a1, unsigned int a2) {\n  size_t result;\n  unsigned int v3;\n  int <span class=\"supfact\">v4</span>[Number];\n  char v5;\n  unsigned int v6;\n  v3 = le32_to_cpu(a2);\n  v6 = v3 & Number;\n  v5 = v3 & Number;\n  if ((v3 & Number) == Number) {\n    if (e100_debug)\n      fprintf(stderr, String, String, v6);\n    result = (size_t)nic_selective_reset((__int64)a1);\n  } else if ((v3 & Number) > Number) {\n    if (e100_debug)\n      fprintf(stderr, String, String, v3);\n    result = fwrite(String, Number, Number, stderr);\n  } else if ((v3 & Number) != Number) {\n    if (e100_debug)\n      fprintf(stderr, String, String, v6);\n    cpu_physical_memory_read(v6, (__int64)<span class=\"supfact\">v4</span>, Number);\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    result = cpu_physical_memory_write(v6, (__int64)<span class=\"supfact\">v4</span>, Number);\n  } else {\n    result = (size_t)nic_reset(a1);\n  }\n  return result;\n}", "code_t": "void __cdecl eepro100_write_port(EEPRO100State *s, uint32_t val) {\n  uint32_t vala;\n  eepro100_selftest_t <span class=\"supfact\">data</span>;\n  uint8_t selection;\n  uint32_t address;\n  vala = le32_to_cpu(val);\n  address = vala & Number;\n  selection = vala & Number;\n  if ((vala & Number) == Number) {\n    if (e100_debug)\n      fprintf(stderr, String, String, address);\n    nic_selective_reset(s);\n  } else if ((vala & Number) > Number) {\n    if (e100_debug)\n      fprintf(stderr, String, String, vala);\n    fwrite(String, Number, Number, stderr);\n  } else if ((vala & Number) != Number) {\n    if (e100_debug)\n      fprintf(stderr, String, String, address);\n    cpu_physical_memory_read(address, (uint8_t *)&<span class=\"supfact\">data</span>, Number);\n    <span class=\"supfact\">data</span>.st_sign = Number;\n    <span class=\"supfact\">data</span>.st_result = Number;\n    cpu_physical_memory_write(address, (const uint8_t *)&<span class=\"supfact\">data</span>,\n                              Number);\n  } else {\n    nic_reset(s);\n  }\n}", "var": [{"name": "v4", "type": "struct eepro100_selftest_t { uint32_t st_sign; uint32_t st_result; }", "ref_name": "data", "ref_type": "struct eepro100_selftest_t { uint32_t st_sign; uint32_t st_result; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "000000000000306f <_nocheck__trace_megasas_dcmd_zero_sge>:\n    306f:\t55                   \tpush   %rbp\n    3070:\t48 89 e5             \tmov    %rsp,%rbp\n    3073:\t41 54                \tpush   %r12\n    3075:\t53                   \tpush   %rbx\n    3076:\t48 83 ec 30          \tsub    $0x30,%rsp\n    307a:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    307d:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    3084:\t00 00 \n    3086:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    308a:\t31 c0                \txor    %eax,%eax\n    308c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3092 <_nocheck__trace_megasas_dcmd_zero_sge+0x23>\n    3092:\t85 c0                \ttest   %eax,%eax\n    3094:\t0f 95 c0             \tsetne  %al\n    3097:\t0f b6 c0             \tmovzbl %al,%eax\n    309a:\t48 85 c0             \ttest   %rax,%rax\n    309d:\t74 5d                \tje     30fc <_nocheck__trace_megasas_dcmd_zero_sge+0x8d>\n    309f:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 30a6 <_nocheck__trace_megasas_dcmd_zero_sge+0x37>\n    30a6:\t66 85 c0             \ttest   %ax,%ax\n    30a9:\t74 51                \tje     30fc <_nocheck__trace_megasas_dcmd_zero_sge+0x8d>\n    30ab:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    30b0:\te8 78 d7 ff ff       \tcallq  82d <qemu_loglevel_mask>\n    30b5:\t84 c0                \ttest   %al,%al\n    30b7:\t74 43                \tje     30fc <_nocheck__trace_megasas_dcmd_zero_sge+0x8d>\n    30b9:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    30bd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    30c2:\t48 89 c7             \tmov    %rax,%rdi\n    30c5:\te8 00 00 00 00       \tcallq  30ca <_nocheck__trace_megasas_dcmd_zero_sge+0x5b>\n    30ca:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    30ce:\t49 89 c4             \tmov    %rax,%r12\n    30d1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    30d5:\t48 89 c3             \tmov    %rax,%rbx\n    30d8:\te8 00 00 00 00       \tcallq  30dd <_nocheck__trace_megasas_dcmd_zero_sge+0x6e>\n    30dd:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    30e0:\t41 89 d0             \tmov    %edx,%r8d\n    30e3:\t4c 89 e1             \tmov    %r12,%rcx\n    30e6:\t48 89 da             \tmov    %rbx,%rdx\n    30e9:\t89 c6                \tmov    %eax,%esi\n    30eb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 30f2 <_nocheck__trace_megasas_dcmd_zero_sge+0x83>\n    30f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    30f7:\te8 00 00 00 00       \tcallq  30fc <_nocheck__trace_megasas_dcmd_zero_sge+0x8d>\n    30fc:\t90                   \tnop\n    30fd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3101:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    3108:\t00 00 \n    310a:\t74 05                \tje     3111 <_nocheck__trace_megasas_dcmd_zero_sge+0xa2>\n    310c:\te8 00 00 00 00       \tcallq  3111 <_nocheck__trace_megasas_dcmd_zero_sge+0xa2>\n    3111:\t48 83 c4 30          \tadd    $0x30,%rsp\n    3115:\t5b                   \tpop    %rbx\n    3116:\t41 5c                \tpop    %r12\n    3118:\t5d                   \tpop    %rbp\n    3119:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_dcmd_zero_sge(\n    unsigned int a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_DCMD_ZERO_SGE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl nocheck__trace_megasas_dcmd_zero_sge(int cmd) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_DCMD_ZERO_SGE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, (unsigned int)cmd);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "maxpmaxp", "repo_name": "ssvpn-macos", "path": "maxpmaxp/ssvpn-macos/75fad0c6c3a6d0443b89d8528e8ae4a9eff5d286a5513b078f7c2f19a20a9eee", "path_in_repo": "maxpmaxp/ssvpn-macos/tunnelblick/third_party/openssl-1.0.1c/demos/maurice/example4", "objdump": "0000000000405fc6 <CRYPTO_mem_ctrl>:\n  405fc6:\t55                   \tpush   %rbp\n  405fc7:\t48 89 e5             \tmov    %rsp,%rbp\n  405fca:\t48 83 ec 30          \tsub    $0x30,%rsp\n  405fce:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n  405fd1:\t8b 05 69 33 03 00    \tmov    0x33369(%rip),%eax        # 439340 <mh_mode>\n  405fd7:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  405fda:\tb9 dc 00 00 00       \tmov    $0xdc,%ecx\n  405fdf:\tba 10 ea 41 00       \tmov    $0x41ea10,%edx\n  405fe4:\tbe 14 00 00 00       \tmov    $0x14,%esi\n  405fe9:\tbf 09 00 00 00       \tmov    $0x9,%edi\n  405fee:\te8 67 c7 ff ff       \tcallq  40275a <CRYPTO_lock>\n  405ff3:\t83 7d dc 03          \tcmpl   $0x3,-0x24(%rbp)\n  405ff7:\t74 60                \tje     406059 <CRYPTO_mem_ctrl+0x93>\n  405ff9:\t83 7d dc 03          \tcmpl   $0x3,-0x24(%rbp)\n  405ffd:\t0f 8f 68 01 00 00    \tjg     40616b <CRYPTO_mem_ctrl+0x1a5>\n  406003:\t83 7d dc 02          \tcmpl   $0x2,-0x24(%rbp)\n  406007:\t0f 84 04 01 00 00    \tje     406111 <CRYPTO_mem_ctrl+0x14b>\n  40600d:\t83 7d dc 02          \tcmpl   $0x2,-0x24(%rbp)\n  406011:\t0f 8f 54 01 00 00    \tjg     40616b <CRYPTO_mem_ctrl+0x1a5>\n  406017:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n  40601b:\t74 23                \tje     406040 <CRYPTO_mem_ctrl+0x7a>\n  40601d:\t83 7d dc 01          \tcmpl   $0x1,-0x24(%rbp)\n  406021:\t0f 85 44 01 00 00    \tjne    40616b <CRYPTO_mem_ctrl+0x1a5>\n  406027:\tc7 05 0f 33 03 00 03 \tmovl   $0x3,0x3330f(%rip)        # 439340 <mh_mode>\n  40602e:\t00 00 00 \n  406031:\tc7 05 2d 33 03 00 00 \tmovl   $0x0,0x3332d(%rip)        # 439368 <num_disable>\n  406038:\t00 00 00 \n  40603b:\te9 32 01 00 00       \tjmpq   406172 <CRYPTO_mem_ctrl+0x1ac>\n  406040:\tc7 05 f6 32 03 00 00 \tmovl   $0x0,0x332f6(%rip)        # 439340 <mh_mode>\n  406047:\t00 00 00 \n  40604a:\tc7 05 14 33 03 00 00 \tmovl   $0x0,0x33314(%rip)        # 439368 <num_disable>\n  406051:\t00 00 00 \n  406054:\te9 19 01 00 00       \tjmpq   406172 <CRYPTO_mem_ctrl+0x1ac>\n  406059:\t8b 05 e1 32 03 00    \tmov    0x332e1(%rip),%eax        # 439340 <mh_mode>\n  40605f:\t83 e0 01             \tand    $0x1,%eax\n  406062:\t85 c0                \ttest   %eax,%eax\n  406064:\t0f 84 04 01 00 00    \tje     40616e <CRYPTO_mem_ctrl+0x1a8>\n  40606a:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40606e:\t48 89 c7             \tmov    %rax,%rdi\n  406071:\te8 b8 c5 ff ff       \tcallq  40262e <CRYPTO_THREADID_current>\n  406076:\t8b 05 ec 32 03 00    \tmov    0x332ec(%rip),%eax        # 439368 <num_disable>\n  40607c:\t85 c0                \ttest   %eax,%eax\n  40607e:\t74 15                \tje     406095 <CRYPTO_mem_ctrl+0xcf>\n  406080:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  406084:\t48 89 c6             \tmov    %rax,%rsi\n  406087:\tbf 70 93 43 00       \tmov    $0x439370,%edi\n  40608c:\te8 09 c6 ff ff       \tcallq  40269a <CRYPTO_THREADID_cmp>\n  406091:\t85 c0                \ttest   %eax,%eax\n  406093:\t74 6b                \tje     406100 <CRYPTO_mem_ctrl+0x13a>\n  406095:\tb9 fa 00 00 00       \tmov    $0xfa,%ecx\n  40609a:\tba 10 ea 41 00       \tmov    $0x41ea10,%edx\n  40609f:\tbe 14 00 00 00       \tmov    $0x14,%esi\n  4060a4:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  4060a9:\te8 ac c6 ff ff       \tcallq  40275a <CRYPTO_lock>\n  4060ae:\tb9 00 01 00 00       \tmov    $0x100,%ecx\n  4060b3:\tba 10 ea 41 00       \tmov    $0x41ea10,%edx\n  4060b8:\tbe 1b 00 00 00       \tmov    $0x1b,%esi\n  4060bd:\tbf 09 00 00 00       \tmov    $0x9,%edi\n  4060c2:\te8 93 c6 ff ff       \tcallq  40275a <CRYPTO_lock>\n  4060c7:\tb9 01 01 00 00       \tmov    $0x101,%ecx\n  4060cc:\tba 10 ea 41 00       \tmov    $0x41ea10,%edx\n  4060d1:\tbe 14 00 00 00       \tmov    $0x14,%esi\n  4060d6:\tbf 09 00 00 00       \tmov    $0x9,%edi\n  4060db:\te8 7a c6 ff ff       \tcallq  40275a <CRYPTO_lock>\n  4060e0:\t8b 05 5a 32 03 00    \tmov    0x3325a(%rip),%eax        # 439340 <mh_mode>\n  4060e6:\t83 e0 fd             \tand    $0xfffffffd,%eax\n  4060e9:\t89 05 51 32 03 00    \tmov    %eax,0x33251(%rip)        # 439340 <mh_mode>\n  4060ef:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4060f3:\t48 89 c6             \tmov    %rax,%rsi\n  4060f6:\tbf 70 93 43 00       \tmov    $0x439370,%edi\n  4060fb:\te8 c4 c5 ff ff       \tcallq  4026c4 <CRYPTO_THREADID_cpy>\n  406100:\t8b 05 62 32 03 00    \tmov    0x33262(%rip),%eax        # 439368 <num_disable>\n  406106:\t83 c0 01             \tadd    $0x1,%eax\n  406109:\t89 05 59 32 03 00    \tmov    %eax,0x33259(%rip)        # 439368 <num_disable>\n  40610f:\teb 5d                \tjmp    40616e <CRYPTO_mem_ctrl+0x1a8>\n  406111:\t8b 05 29 32 03 00    \tmov    0x33229(%rip),%eax        # 439340 <mh_mode>\n  406117:\t83 e0 01             \tand    $0x1,%eax\n  40611a:\t85 c0                \ttest   %eax,%eax\n  40611c:\t74 53                \tje     406171 <CRYPTO_mem_ctrl+0x1ab>\n  40611e:\t8b 05 44 32 03 00    \tmov    0x33244(%rip),%eax        # 439368 <num_disable>\n  406124:\t85 c0                \ttest   %eax,%eax\n  406126:\t74 49                \tje     406171 <CRYPTO_mem_ctrl+0x1ab>\n  406128:\t8b 05 3a 32 03 00    \tmov    0x3323a(%rip),%eax        # 439368 <num_disable>\n  40612e:\t83 e8 01             \tsub    $0x1,%eax\n  406131:\t89 05 31 32 03 00    \tmov    %eax,0x33231(%rip)        # 439368 <num_disable>\n  406137:\t8b 05 2b 32 03 00    \tmov    0x3322b(%rip),%eax        # 439368 <num_disable>\n  40613d:\t85 c0                \ttest   %eax,%eax\n  40613f:\t75 30                \tjne    406171 <CRYPTO_mem_ctrl+0x1ab>\n  406141:\t8b 05 f9 31 03 00    \tmov    0x331f9(%rip),%eax        # 439340 <mh_mode>\n  406147:\t83 c8 02             \tor     $0x2,%eax\n  40614a:\t89 05 f0 31 03 00    \tmov    %eax,0x331f0(%rip)        # 439340 <mh_mode>\n  406150:\tb9 11 01 00 00       \tmov    $0x111,%ecx\n  406155:\tba 10 ea 41 00       \tmov    $0x41ea10,%edx\n  40615a:\tbe 1b 00 00 00       \tmov    $0x1b,%esi\n  40615f:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  406164:\te8 f1 c5 ff ff       \tcallq  40275a <CRYPTO_lock>\n  406169:\teb 06                \tjmp    406171 <CRYPTO_mem_ctrl+0x1ab>\n  40616b:\t90                   \tnop\n  40616c:\teb 04                \tjmp    406172 <CRYPTO_mem_ctrl+0x1ac>\n  40616e:\t90                   \tnop\n  40616f:\teb 01                \tjmp    406172 <CRYPTO_mem_ctrl+0x1ac>\n  406171:\t90                   \tnop\n  406172:\tb9 1a 01 00 00       \tmov    $0x11a,%ecx\n  406177:\tba 10 ea 41 00       \tmov    $0x41ea10,%edx\n  40617c:\tbe 14 00 00 00       \tmov    $0x14,%esi\n  406181:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  406186:\te8 cf c5 ff ff       \tcallq  40275a <CRYPTO_lock>\n  40618b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40618e:\tc9                   \tleaveq \n  40618f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall CRYPTO_mem_ctrl(int a1) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  unsigned int v3;\n  v3 = mh_mode;\n  CRYPTO_lock(Number, Number, (__int64)String, Number);\n  if (a1 == Number) {\n    if ((mh_mode & Number) != Number) {\n      CRYPTO_THREADID_current(<span class=\"supfact\">v2</span>);\n      if (!num_disable ||\n          CRYPTO_THREADID_cmp(&disabling_threadid, <span class=\"supfact\">v2</span>)) {\n        CRYPTO_lock(Number, Number, (__int64)String, Number);\n        CRYPTO_lock(Number, Number, (__int64)String, Number);\n        CRYPTO_lock(Number, Number, (__int64)String, Number);\n        mh_mode &= Number;\n        CRYPTO_THREADID_cpy((__int64 *)&disabling_threadid, <span class=\"supfact\">v2</span>);\n      }\n      ++num_disable;\n    }\n  } else if (a1 <= Number) {\n    if (a1 == Number) {\n      if ((mh_mode & Number) != Number) {\n        if (num_disable) {\n          if (!--num_disable) {\n            mh_mode |= Number;\n            CRYPTO_lock(Number, Number, (__int64)String, Number);\n          }\n        }\n      }\n    } else if (a1) {\n      if (a1 == Number) {\n        mh_mode = Number;\n        num_disable = Number;\n      }\n    } else {\n      mh_mode = Number;\n      num_disable = Number;\n    }\n  }\n  CRYPTO_lock(Number, Number, (__int64)String, Number);\n  return v3;\n}", "code_t": "int __cdecl CRYPTO_mem_ctrl(int mode) {\n  CRYPTO_THREADID <span class=\"supfact\">cur</span>;\n  int ret;\n  ret = mh_mode;\n  CRYPTO_lock(Number, Number, String, Number);\n  if (mode == Number) {\n    if ((mh_mode & Number) != Number) {\n      CRYPTO_THREADID_current(&<span class=\"supfact\">cur</span>);\n      if (!num_disable ||\n          CRYPTO_THREADID_cmp(&disabling_threadid, &<span class=\"supfact\">cur</span>)) {\n        CRYPTO_lock(Number, Number, String, Number);\n        CRYPTO_lock(Number, Number, String, Number);\n        CRYPTO_lock(Number, Number, String, Number);\n        mh_mode &= Number;\n        CRYPTO_THREADID_cpy(&disabling_threadid, &<span class=\"supfact\">cur</span>);\n      }\n      ++num_disable;\n    }\n  } else if (mode <= Number) {\n    if (mode == Number) {\n      if ((mh_mode & Number) != Number) {\n        if (num_disable) {\n          if (!--num_disable) {\n            mh_mode |= Number;\n            CRYPTO_lock(Number, Number, String, Number);\n          }\n        }\n      }\n    } else if (mode) {\n      if (mode == Number) {\n        mh_mode = Number;\n        num_disable = Number;\n      }\n    } else {\n      mh_mode = Number;\n      num_disable = Number;\n    }\n  }\n  CRYPTO_lock(Number, Number, String, Number);\n  return ret;\n}", "var": [{"name": "v2", "type": "struct CRYPTO_THREADID { void * ptr; unsigned __int64 val; }", "ref_name": "cur", "ref_type": "struct CRYPTO_THREADID { void * ptr; unsigned __int64 val; }"}], "body_in_train": true}, {"repo_owner": "Ardameon", "repo_name": "experiments", "path": "Ardameon/experiments/6dba23878d75d98801d9197027cc8a49d6f56a82e74215d3b380923a4142bdc1", "path_in_repo": "Ardameon/experiments/sockets/netdevice_test.o", "objdump": "0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 60          \tsub    $0x60,%rsp\n   8:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n   b:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n   f:\t83 7d ac 02          \tcmpl   $0x2,-0x54(%rbp)\n  13:\t7f 14                \tjg     29 <main+0x29>\n  15:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  1a:\te8 00 00 00 00       \tcallq  1f <main+0x1f>\n  1f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  24:\te9 68 01 00 00       \tjmpq   191 <main+0x191>\n  29:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  2d:\t48 83 c0 10          \tadd    $0x10,%rax\n  31:\t48 8b 00             \tmov    (%rax),%rax\n  34:\t48 89 c6             \tmov    %rax,%rsi\n  37:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  3c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41:\te8 00 00 00 00       \tcallq  46 <main+0x46>\n  46:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  4a:\t48 83 c0 10          \tadd    $0x10,%rax\n  4e:\t48 8b 00             \tmov    (%rax),%rax\n  51:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  55:\t48 89 c6             \tmov    %rax,%rsi\n  58:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  5d:\te8 00 00 00 00       \tcallq  62 <main+0x62>\n  62:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  67:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  6c:\te8 00 00 00 00       \tcallq  71 <main+0x71>\n  71:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  78:\teb 22                \tjmp    9c <main+0x9c>\n  7a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  7d:\t48 98                \tcltq   \n  7f:\t0f b6 44 05 b0       \tmovzbl -0x50(%rbp,%rax,1),%eax\n  84:\t0f b6 c0             \tmovzbl %al,%eax\n  87:\t89 c6                \tmov    %eax,%esi\n  89:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  8e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  93:\te8 00 00 00 00       \tcallq  98 <main+0x98>\n  98:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  9c:\t83 7d fc 0e          \tcmpl   $0xe,-0x4(%rbp)\n  a0:\t7e d8                \tjle    7a <main+0x7a>\n  a2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  a5:\t48 98                \tcltq   \n  a7:\t0f b6 44 05 b0       \tmovzbl -0x50(%rbp,%rax,1),%eax\n  ac:\t0f b6 c0             \tmovzbl %al,%eax\n  af:\t89 c6                \tmov    %eax,%esi\n  b1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  b6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  bb:\te8 00 00 00 00       \tcallq  c0 <main+0xc0>\n  c0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  c5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  ca:\te8 00 00 00 00       \tcallq  cf <main+0xcf>\n  cf:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  d6:\teb 22                \tjmp    fa <main+0xfa>\n  d8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  db:\t48 98                \tcltq   \n  dd:\t0f b7 44 45 b0       \tmovzwl -0x50(%rbp,%rax,2),%eax\n  e2:\t0f b7 c0             \tmovzwl %ax,%eax\n  e5:\t89 c6                \tmov    %eax,%esi\n  e7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  ec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  f1:\te8 00 00 00 00       \tcallq  f6 <main+0xf6>\n  f6:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  fa:\t83 7d fc 06          \tcmpl   $0x6,-0x4(%rbp)\n  fe:\t7e d8                \tjle    d8 <main+0xd8>\n 100:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 103:\t48 98                \tcltq   \n 105:\t0f b7 44 45 b0       \tmovzwl -0x50(%rbp,%rax,2),%eax\n 10a:\t0f b7 c0             \tmovzwl %ax,%eax\n 10d:\t89 c6                \tmov    %eax,%esi\n 10f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 114:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 119:\te8 00 00 00 00       \tcallq  11e <main+0x11e>\n 11e:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 122:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n 126:\tb9 2e 00 00 00       \tmov    $0x2e,%ecx\n 12b:\t48 89 c6             \tmov    %rax,%rsi\n 12e:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n 133:\te8 00 00 00 00       \tcallq  138 <main+0x138>\n 138:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 13c:\t48 89 c6             \tmov    %rax,%rsi\n 13f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 144:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 149:\te8 00 00 00 00       \tcallq  14e <main+0x14e>\n 14e:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 152:\t48 83 c0 10          \tadd    $0x10,%rax\n 156:\t48 8b 08             \tmov    (%rax),%rcx\n 159:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 15d:\t48 83 c0 08          \tadd    $0x8,%rax\n 161:\t48 8b 00             \tmov    (%rax),%rax\n 164:\tba 20 00 00 00       \tmov    $0x20,%edx\n 169:\t48 89 ce             \tmov    %rcx,%rsi\n 16c:\t48 89 c7             \tmov    %rax,%rdi\n 16f:\te8 00 00 00 00       \tcallq  174 <main+0x174>\n 174:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 178:\t48 83 c0 08          \tadd    $0x8,%rax\n 17c:\t48 8b 00             \tmov    (%rax),%rax\n 17f:\tbe 43 10 00 00       \tmov    $0x1043,%esi\n 184:\t48 89 c7             \tmov    %rax,%rdi\n 187:\te8 00 00 00 00       \tcallq  18c <main+0x18c>\n 18c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 191:\tc9                   \tleaveq \n 192:\tc3                   \tretq   \n", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  __int16 <span class=\"supfact\">buf</span>[Number];\n  char v5[Number];\n  int i;\n  if (argc > Number) {\n    printf(String, argv[Number]);\n    inet_pton(Number, argv[Number], <span class=\"supfact\">buf</span>);\n    printf(String);\n    for (i = Number; i <= Number; ++i)\n      printf(String, *((unsigned __int8 *)<span class=\"supfact\">buf</span> + i));\n    printf(String, *((unsigned __int8 *)<span class=\"supfact\">buf</span> + i));\n    printf(String);\n    for (i = Number; i <= Number; ++i)\n      printf(String, (unsigned __int16)<span class=\"supfact\">buf</span>[i]);\n    printf(String, (unsigned __int16)<span class=\"supfact\">buf</span>[i]);\n    inet_ntop(Number, <span class=\"supfact\">buf</span>, v5, Number);\n    printf(String, v5);\n    if_set_ip6(argv[Number], argv[Number], Number L);\n    if_set_flag(argv[Number], Number L);\n    result = Number;\n  } else {\n    puts(String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  in6_addr <span class=\"supfact\">addr</span>;\n  char buf[Number];\n  int i;\n  if (argc > Number) {\n    printf(String, argv[Number]);\n    inet_pton(Number, argv[Number], &<span class=\"supfact\">addr</span>);\n    printf(String);\n    for (i = Number; i <= Number; ++i)\n      printf(String, <span class=\"supfact\">addr</span>.__u6_addr8[i]);\n    printf(String, <span class=\"supfact\">addr</span>.__u6_addr8[i]);\n    printf(String);\n    for (i = Number; i <= Number; ++i)\n      printf(String, <span class=\"supfact\">addr</span>.__u6_addr16[i]);\n    printf(String, <span class=\"supfact\">addr</span>.__u6_addr16[i]);\n    inet_ntop(Number, &<span class=\"supfact\">addr</span>, buf, Number);\n    printf(String, buf);\n    if_set_ip6(argv[Number], argv[Number], Number L);\n    if_set_flag(argv[Number], Number L);\n    result = Number;\n  } else {\n    puts(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "buf", "type": "struct in6_addr { $FA2BBAF2C6BC03A9E0081A5D902744A5 __in6_u; }", "ref_name": "addr", "ref_type": "struct in6_addr { $FA2BBAF2C6BC03A9E0081A5D902744A5 __in6_u; }"}], "body_in_train": false}, {"repo_owner": "bboozzoo", "repo_name": "qemu-power", "path": "bboozzoo/qemu-power/7ba6ecc290845190f302c44c0532cc6e4f23561265bfc733162e4c1a35e01507", "path_in_repo": "bboozzoo/qemu-power//usb-linux.o", "objdump": "0000000000000c60 <usb_host_set_interface>:\n     c60:\t55                   \tpush   %rbp\n     c61:\t48 89 e5             \tmov    %rsp,%rbp\n     c64:\t48 83 ec 30          \tsub    $0x30,%rsp\n     c68:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     c6c:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n     c6f:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n     c72:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     c79:\t00 00 \n     c7b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     c7f:\t31 c0                \txor    %eax,%eax\n     c81:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     c84:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n     c87:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n     c8a:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     c8d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c91:\t8b 80 d8 04 00 00    \tmov    0x4d8(%rax),%eax\n     c97:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n     c9b:\tbe 04 55 08 80       \tmov    $0x80085504,%esi\n     ca0:\t89 c7                \tmov    %eax,%edi\n     ca2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ca7:\te8 00 00 00 00       \tcallq  cac <usb_host_set_interface+0x4c>\n     cac:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     caf:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     cb3:\t79 07                \tjns    cbc <usb_host_set_interface+0x5c>\n     cb5:\te8 94 fe ff ff       \tcallq  b4e <ctrl_error>\n     cba:\teb 11                \tjmp    ccd <usb_host_set_interface+0x6d>\n     cbc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     cc0:\t48 89 c7             \tmov    %rax,%rdi\n     cc3:\te8 08 08 00 00       \tcallq  14d0 <usb_linux_update_endp_table>\n     cc8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ccd:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     cd1:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     cd8:\t00 00 \n     cda:\t74 05                \tje     ce1 <usb_host_set_interface+0x81>\n     cdc:\te8 00 00 00 00       \tcallq  ce1 <usb_host_set_interface+0x81>\n     ce1:\tc9                   \tleaveq \n     ce2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall usb_host_set_interface(__int64 a1, int a2, int a3) {\n  int <span class=\"supfact\">v4</span>[Number];\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  <span class=\"supfact\">v4</span>[Number] = a2;\n  <span class=\"supfact\">v4</span>[Number] = a3;\n  if (ioctl(*(_DWORD *)(a1 + Number), Number, <span class=\"supfact\">v4</span>) < Number)\n    return ctrl_error();\n  usb_linux_update_endp_table(a1);\n  return Number L;\n}", "code_t": "int __cdecl usb_host_set_interface(USBHostDevice_0 *s, int iface, int alt) {\n  usbdevfs_setinterface <span class=\"supfact\">si_0</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  <span class=\"supfact\">si_0</span>.interface = iface;\n  <span class=\"supfact\">si_0</span>.altsetting = alt;\n  if (ioctl(s->fd, Number, &<span class=\"supfact\">si_0</span>) < Number)\n    return ctrl_error();\n  usb_linux_update_endp_table(s);\n  return Number;\n}", "var": [{"name": "v4", "type": "struct usbdevfs_setinterface { unsigned int interface; unsigned int altsetting; }", "ref_name": "si_0", "ref_type": "struct usbdevfs_setinterface { unsigned int interface; unsigned int altsetting; }"}], "body_in_train": true}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/7e67eaaf1ff93dafca86e30947798094d94998e892cfbb7a9369cfcc26db7090", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/pkey/rsa_decrypt", "objdump": "000000000040ff49 <mbedtls_sha1_ret>:\n  40ff49:\t55                   \tpush   %rbp\n  40ff4a:\t48 89 e5             \tmov    %rsp,%rbp\n  40ff4d:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n  40ff51:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n  40ff55:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n  40ff59:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n  40ff5d:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  40ff61:\t48 89 c7             \tmov    %rax,%rdi\n  40ff64:\te8 63 e0 ff ff       \tcallq  40dfcc <mbedtls_sha1_init>\n  40ff69:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  40ff6d:\t48 89 c7             \tmov    %rax,%rdi\n  40ff70:\te8 1a e1 ff ff       \tcallq  40e08f <mbedtls_sha1_starts_ret>\n  40ff75:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40ff78:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40ff7c:\t75 3c                \tjne    40ffba <mbedtls_sha1_ret+0x71>\n  40ff7e:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n  40ff82:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n  40ff86:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  40ff8a:\t48 89 ce             \tmov    %rcx,%rsi\n  40ff8d:\t48 89 c7             \tmov    %rax,%rdi\n  40ff90:\te8 de fa ff ff       \tcallq  40fa73 <mbedtls_sha1_update_ret>\n  40ff95:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40ff98:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40ff9c:\t75 1f                \tjne    40ffbd <mbedtls_sha1_ret+0x74>\n  40ff9e:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n  40ffa2:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  40ffa6:\t48 89 d6             \tmov    %rdx,%rsi\n  40ffa9:\t48 89 c7             \tmov    %rax,%rdi\n  40ffac:\te8 46 fc ff ff       \tcallq  40fbf7 <mbedtls_sha1_finish_ret>\n  40ffb1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40ffb4:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40ffb8:\teb 04                \tjmp    40ffbe <mbedtls_sha1_ret+0x75>\n  40ffba:\t90                   \tnop\n  40ffbb:\teb 01                \tjmp    40ffbe <mbedtls_sha1_ret+0x75>\n  40ffbd:\t90                   \tnop\n  40ffbe:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  40ffc2:\t48 89 c7             \tmov    %rax,%rdi\n  40ffc5:\te8 27 e0 ff ff       \tcallq  40dff1 <mbedtls_sha1_free>\n  40ffca:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40ffcd:\tc9                   \tleaveq \n  40ffce:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_sha1_ret(unsigned int *a1, size_t a2, _BYTE *a3) {\n  _DWORD <span class=\"supfact\">v5</span>[Number];\n  unsigned int v6;\n  mbedtls_sha1_init(<span class=\"supfact\">v5</span>);\n  v6 = mbedtls_sha1_starts_ret(<span class=\"supfact\">v5</span>);\n  if (!v6) {\n    v6 = mbedtls_sha1_update_ret(<span class=\"supfact\">v5</span>, a1, a2);\n    if (!v6)\n      v6 = mbedtls_sha1_finish_ret((__int64)<span class=\"supfact\">v5</span>, a3);\n  }\n  mbedtls_sha1_free((__int64)<span class=\"supfact\">v5</span>);\n  return v6;\n}", "code_t": "int __cdecl mbedtls_sha1_ret(const unsigned __int8 *input, size_t ilen,\n                             unsigned __int8 *output) {\n  mbedtls_sha1_context_0 <span class=\"supfact\">ctx</span>;\n  int ret;\n  mbedtls_sha1_init(&<span class=\"supfact\">ctx</span>);\n  ret = mbedtls_sha1_starts_ret(&<span class=\"supfact\">ctx</span>);\n  if (!ret) {\n    ret = mbedtls_sha1_update_ret(&<span class=\"supfact\">ctx</span>, input, ilen);\n    if (!ret)\n      ret = mbedtls_sha1_finish_ret(&<span class=\"supfact\">ctx</span>, output);\n  }\n  mbedtls_sha1_free(&<span class=\"supfact\">ctx</span>);\n  return ret;\n}", "var": [{"name": "v5", "type": "struct mbedtls_sha1_context_0 { uint32_t[2] total; uint32_t[5] state; unsigned __int8[64] buffer; }", "ref_name": "ctx", "ref_type": "struct mbedtls_sha1_context_0 { uint32_t[2] total; uint32_t[5] state; unsigned __int8[64] buffer; }"}], "body_in_train": true}, {"repo_owner": "mend0za", "repo_name": "QEMU-dt-config", "path": "mend0za/QEMU-dt-config/a8b0bd9f99393ab6adafcd4e555a4d06b7e13b0434dc2ed484a0bbda1f14553c", "path_in_repo": "mend0za/QEMU-dt-config//hw/net/e1000e_core.o", "objdump": "00000000000052c0 <trace_e1000e_irq_rdtr_fpd_running>:\n    52c0:\t55                   \tpush   %rbp\n    52c1:\t48 89 e5             \tmov    %rsp,%rbp\n    52c4:\t41 54                \tpush   %r12\n    52c6:\t53                   \tpush   %rbx\n    52c7:\t48 83 ec 20          \tsub    $0x20,%rsp\n    52cb:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    52d2:\t00 00 \n    52d4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    52d8:\t31 c0                \txor    %eax,%eax\n    52da:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 52e0 <trace_e1000e_irq_rdtr_fpd_running+0x20>\n    52e0:\t85 c0                \ttest   %eax,%eax\n    52e2:\t0f 95 c0             \tsetne  %al\n    52e5:\t0f b6 c0             \tmovzbl %al,%eax\n    52e8:\t48 85 c0             \ttest   %rax,%rax\n    52eb:\t74 5b                \tje     5348 <trace_e1000e_irq_rdtr_fpd_running+0x88>\n    52ed:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 52f4 <trace_e1000e_irq_rdtr_fpd_running+0x34>\n    52f4:\t66 85 c0             \ttest   %ax,%ax\n    52f7:\t74 4f                \tje     5348 <trace_e1000e_irq_rdtr_fpd_running+0x88>\n    52f9:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    52fd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5302:\t48 89 c7             \tmov    %rax,%rdi\n    5305:\te8 00 00 00 00       \tcallq  530a <trace_e1000e_irq_rdtr_fpd_running+0x4a>\n    530a:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    530f:\te8 df b3 ff ff       \tcallq  6f3 <qemu_loglevel_mask>\n    5314:\t0f b6 c0             \tmovzbl %al,%eax\n    5317:\t48 85 c0             \ttest   %rax,%rax\n    531a:\t74 2c                \tje     5348 <trace_e1000e_irq_rdtr_fpd_running+0x88>\n    531c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5320:\t49 89 c4             \tmov    %rax,%r12\n    5323:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5327:\t48 89 c3             \tmov    %rax,%rbx\n    532a:\te8 00 00 00 00       \tcallq  532f <trace_e1000e_irq_rdtr_fpd_running+0x6f>\n    532f:\t4c 89 e1             \tmov    %r12,%rcx\n    5332:\t48 89 da             \tmov    %rbx,%rdx\n    5335:\t89 c6                \tmov    %eax,%esi\n    5337:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 533e <trace_e1000e_irq_rdtr_fpd_running+0x7e>\n    533e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5343:\te8 00 00 00 00       \tcallq  5348 <trace_e1000e_irq_rdtr_fpd_running+0x88>\n    5348:\t90                   \tnop\n    5349:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    534d:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    5354:\t00 00 \n    5356:\t74 05                \tje     535d <trace_e1000e_irq_rdtr_fpd_running+0x9d>\n    5358:\te8 00 00 00 00       \tcallq  535d <trace_e1000e_irq_rdtr_fpd_running+0x9d>\n    535d:\t48 83 c4 20          \tadd    $0x20,%rsp\n    5361:\t5b                   \tpop    %rbx\n    5362:\t41 5c                \tpop    %r12\n    5364:\t5d                   \tpop    %rbp\n    5365:\tc3                   \tretq   ", "code_s": "unsigned __int64 trace_e1000e_irq_rdtr_fpd_running() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_E1000E_IRQ_RDTR_FPD_RUNNING_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v0 = <span class=\"supfact\">tv</span>.tv_usec;\n        v1 = <span class=\"supfact\">tv</span>.tv_sec;\n        v2 = getpid();\n        qemu_log(String, v2, v1, v0);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ v5;\n}", "code_t": "void __cdecl trace_e1000e_irq_rdtr_fpd_running() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_E1000E_IRQ_RDTR_FPD_RUNNING_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v0 = <span class=\"supfact\">_now</span>.tv_usec;\n      v1 = <span class=\"supfact\">_now</span>.tv_sec;\n      v2 = getpid();\n      qemu_log(String, v2, v1, v0);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/b55f8be734e63bfc4e8491ef3f967559a7f90d7c4b6b0a6e0243735ef87cb41f", "path_in_repo": "madeye/GRACE/qemu-0.12.5/x86_64-linux-user/syscall.o", "objdump": "0000000000001be6 <do_select>:\n    1be6:\t55                   \tpush   %rbp\n    1be7:\t48 89 e5             \tmov    %rsp,%rbp\n    1bea:\t48 81 ec f0 01 00 00 \tsub    $0x1f0,%rsp\n    1bf1:\t89 bd 3c fe ff ff    \tmov    %edi,-0x1c4(%rbp)\n    1bf7:\t48 89 b5 30 fe ff ff \tmov    %rsi,-0x1d0(%rbp)\n    1bfe:\t48 89 95 28 fe ff ff \tmov    %rdx,-0x1d8(%rbp)\n    1c05:\t48 89 8d 20 fe ff ff \tmov    %rcx,-0x1e0(%rbp)\n    1c0c:\t4c 89 85 18 fe ff ff \tmov    %r8,-0x1e8(%rbp)\n    1c13:\t48 83 bd 30 fe ff ff \tcmpq   $0x0,-0x1d0(%rbp)\n    1c1a:\t00 \n    1c1b:\t74 3d                \tje     1c5a <do_select+0x74>\n    1c1d:\t8b 95 3c fe ff ff    \tmov    -0x1c4(%rbp),%edx\n    1c23:\t48 8b 8d 30 fe ff ff \tmov    -0x1d0(%rbp),%rcx\n    1c2a:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    1c31:\t48 89 ce             \tmov    %rcx,%rsi\n    1c34:\t48 89 c7             \tmov    %rax,%rdi\n    1c37:\te8 d5 ef ff ff       \tcallq  c11 <copy_from_user_fdset>\n    1c3c:\t48 85 c0             \ttest   %rax,%rax\n    1c3f:\t74 0c                \tje     1c4d <do_select+0x67>\n    1c41:\t48 c7 c0 f2 ff ff ff \tmov    $0xfffffffffffffff2,%rax\n    1c48:\te9 1b 02 00 00       \tjmpq   1e68 <do_select+0x282>\n    1c4d:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    1c54:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1c58:\teb 08                \tjmp    1c62 <do_select+0x7c>\n    1c5a:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    1c61:\t00 \n    1c62:\t48 83 bd 28 fe ff ff \tcmpq   $0x0,-0x1d8(%rbp)\n    1c69:\t00 \n    1c6a:\t74 3d                \tje     1ca9 <do_select+0xc3>\n    1c6c:\t8b 95 3c fe ff ff    \tmov    -0x1c4(%rbp),%edx\n    1c72:\t48 8b 8d 28 fe ff ff \tmov    -0x1d8(%rbp),%rcx\n    1c79:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n    1c80:\t48 89 ce             \tmov    %rcx,%rsi\n    1c83:\t48 89 c7             \tmov    %rax,%rdi\n    1c86:\te8 86 ef ff ff       \tcallq  c11 <copy_from_user_fdset>\n    1c8b:\t48 85 c0             \ttest   %rax,%rax\n    1c8e:\t74 0c                \tje     1c9c <do_select+0xb6>\n    1c90:\t48 c7 c0 f2 ff ff ff \tmov    $0xfffffffffffffff2,%rax\n    1c97:\te9 cc 01 00 00       \tjmpq   1e68 <do_select+0x282>\n    1c9c:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n    1ca3:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1ca7:\teb 08                \tjmp    1cb1 <do_select+0xcb>\n    1ca9:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    1cb0:\t00 \n    1cb1:\t48 83 bd 20 fe ff ff \tcmpq   $0x0,-0x1e0(%rbp)\n    1cb8:\t00 \n    1cb9:\t74 3d                \tje     1cf8 <do_select+0x112>\n    1cbb:\t8b 95 3c fe ff ff    \tmov    -0x1c4(%rbp),%edx\n    1cc1:\t48 8b 8d 20 fe ff ff \tmov    -0x1e0(%rbp),%rcx\n    1cc8:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n    1ccf:\t48 89 ce             \tmov    %rcx,%rsi\n    1cd2:\t48 89 c7             \tmov    %rax,%rdi\n    1cd5:\te8 37 ef ff ff       \tcallq  c11 <copy_from_user_fdset>\n    1cda:\t48 85 c0             \ttest   %rax,%rax\n    1cdd:\t74 0c                \tje     1ceb <do_select+0x105>\n    1cdf:\t48 c7 c0 f2 ff ff ff \tmov    $0xfffffffffffffff2,%rax\n    1ce6:\te9 7d 01 00 00       \tjmpq   1e68 <do_select+0x282>\n    1ceb:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n    1cf2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1cf6:\teb 08                \tjmp    1d00 <do_select+0x11a>\n    1cf8:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1cff:\t00 \n    1d00:\t48 83 bd 18 fe ff ff \tcmpq   $0x0,-0x1e8(%rbp)\n    1d07:\t00 \n    1d08:\t74 37                \tje     1d41 <do_select+0x15b>\n    1d0a:\t48 8b 95 18 fe ff ff \tmov    -0x1e8(%rbp),%rdx\n    1d11:\t48 8d 85 40 fe ff ff \tlea    -0x1c0(%rbp),%rax\n    1d18:\t48 89 d6             \tmov    %rdx,%rsi\n    1d1b:\t48 89 c7             \tmov    %rax,%rdi\n    1d1e:\te8 55 f5 ff ff       \tcallq  1278 <copy_from_user_timeval>\n    1d23:\t48 85 c0             \ttest   %rax,%rax\n    1d26:\t74 0c                \tje     1d34 <do_select+0x14e>\n    1d28:\t48 c7 c0 f2 ff ff ff \tmov    $0xfffffffffffffff2,%rax\n    1d2f:\te9 34 01 00 00       \tjmpq   1e68 <do_select+0x282>\n    1d34:\t48 8d 85 40 fe ff ff \tlea    -0x1c0(%rbp),%rax\n    1d3b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1d3f:\teb 08                \tjmp    1d49 <do_select+0x163>\n    1d41:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    1d48:\t00 \n    1d49:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    1d4d:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    1d51:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1d55:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n    1d59:\t8b 85 3c fe ff ff    \tmov    -0x1c4(%rbp),%eax\n    1d5f:\t49 89 f8             \tmov    %rdi,%r8\n    1d62:\t89 c7                \tmov    %eax,%edi\n    1d64:\te8 00 00 00 00       \tcallq  1d69 <do_select+0x183>\n    1d69:\t48 98                \tcltq   \n    1d6b:\t48 89 c7             \tmov    %rax,%rdi\n    1d6e:\te8 0b ed ff ff       \tcallq  a7e <get_errno>\n    1d73:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1d77:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1d7b:\t48 89 c7             \tmov    %rax,%rdi\n    1d7e:\te8 28 ed ff ff       \tcallq  aab <is_error>\n    1d83:\t85 c0                \ttest   %eax,%eax\n    1d85:\t0f 85 d9 00 00 00    \tjne    1e64 <do_select+0x27e>\n    1d8b:\t48 83 bd 30 fe ff ff \tcmpq   $0x0,-0x1d0(%rbp)\n    1d92:\t00 \n    1d93:\t74 30                \tje     1dc5 <do_select+0x1df>\n    1d95:\t8b 95 3c fe ff ff    \tmov    -0x1c4(%rbp),%edx\n    1d9b:\t48 8d 8d 50 ff ff ff \tlea    -0xb0(%rbp),%rcx\n    1da2:\t48 8b 85 30 fe ff ff \tmov    -0x1d0(%rbp),%rax\n    1da9:\t48 89 ce             \tmov    %rcx,%rsi\n    1dac:\t48 89 c7             \tmov    %rax,%rdi\n    1daf:\te8 73 f0 ff ff       \tcallq  e27 <copy_to_user_fdset>\n    1db4:\t48 85 c0             \ttest   %rax,%rax\n    1db7:\t74 0c                \tje     1dc5 <do_select+0x1df>\n    1db9:\t48 c7 c0 f2 ff ff ff \tmov    $0xfffffffffffffff2,%rax\n    1dc0:\te9 a3 00 00 00       \tjmpq   1e68 <do_select+0x282>\n    1dc5:\t48 83 bd 28 fe ff ff \tcmpq   $0x0,-0x1d8(%rbp)\n    1dcc:\t00 \n    1dcd:\t74 2d                \tje     1dfc <do_select+0x216>\n    1dcf:\t8b 95 3c fe ff ff    \tmov    -0x1c4(%rbp),%edx\n    1dd5:\t48 8d 8d d0 fe ff ff \tlea    -0x130(%rbp),%rcx\n    1ddc:\t48 8b 85 28 fe ff ff \tmov    -0x1d8(%rbp),%rax\n    1de3:\t48 89 ce             \tmov    %rcx,%rsi\n    1de6:\t48 89 c7             \tmov    %rax,%rdi\n    1de9:\te8 39 f0 ff ff       \tcallq  e27 <copy_to_user_fdset>\n    1dee:\t48 85 c0             \ttest   %rax,%rax\n    1df1:\t74 09                \tje     1dfc <do_select+0x216>\n    1df3:\t48 c7 c0 f2 ff ff ff \tmov    $0xfffffffffffffff2,%rax\n    1dfa:\teb 6c                \tjmp    1e68 <do_select+0x282>\n    1dfc:\t48 83 bd 20 fe ff ff \tcmpq   $0x0,-0x1e0(%rbp)\n    1e03:\t00 \n    1e04:\t74 2d                \tje     1e33 <do_select+0x24d>\n    1e06:\t8b 95 3c fe ff ff    \tmov    -0x1c4(%rbp),%edx\n    1e0c:\t48 8d 8d 50 fe ff ff \tlea    -0x1b0(%rbp),%rcx\n    1e13:\t48 8b 85 20 fe ff ff \tmov    -0x1e0(%rbp),%rax\n    1e1a:\t48 89 ce             \tmov    %rcx,%rsi\n    1e1d:\t48 89 c7             \tmov    %rax,%rdi\n    1e20:\te8 02 f0 ff ff       \tcallq  e27 <copy_to_user_fdset>\n    1e25:\t48 85 c0             \ttest   %rax,%rax\n    1e28:\t74 09                \tje     1e33 <do_select+0x24d>\n    1e2a:\t48 c7 c0 f2 ff ff ff \tmov    $0xfffffffffffffff2,%rax\n    1e31:\teb 35                \tjmp    1e68 <do_select+0x282>\n    1e33:\t48 83 bd 18 fe ff ff \tcmpq   $0x0,-0x1e8(%rbp)\n    1e3a:\t00 \n    1e3b:\t74 27                \tje     1e64 <do_select+0x27e>\n    1e3d:\t48 8d 95 40 fe ff ff \tlea    -0x1c0(%rbp),%rdx\n    1e44:\t48 8b 85 18 fe ff ff \tmov    -0x1e8(%rbp),%rax\n    1e4b:\t48 89 d6             \tmov    %rdx,%rsi\n    1e4e:\t48 89 c7             \tmov    %rax,%rdi\n    1e51:\te8 e0 f5 ff ff       \tcallq  1436 <copy_to_user_timeval>\n    1e56:\t48 85 c0             \ttest   %rax,%rax\n    1e59:\t74 09                \tje     1e64 <do_select+0x27e>\n    1e5b:\t48 c7 c0 f2 ff ff ff \tmov    $0xfffffffffffffff2,%rax\n    1e62:\teb 04                \tjmp    1e68 <do_select+0x282>\n    1e64:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1e68:\tc9                   \tleaveq \n    1e69:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_select(int a1, __int64 a2, __int64 a3, __int64 a4,\n                             __int64 a5) {\n  __int64 result;\n  int v6;\n  __int64 <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>[Number];\n  char <span class=\"supfact\">v12</span>[Number];\n  char <span class=\"supfact\">v13</span>[Number];\n  __int64 v14;\n  struct timeval *timeout;\n  fd_set *exceptfds;\n  fd_set *writefds;\n  fd_set *readfds;\n  if (a2) {\n    if (copy_from_user_fdset(<span class=\"supfact\">v13</span>, a2, a1))\n      return Number;\n    readfds = (fd_set *)<span class=\"supfact\">v13</span>;\n  } else {\n    readfds = Number L;\n  }\n  if (a3) {\n    if (copy_from_user_fdset(<span class=\"supfact\">v12</span>, a3, a1))\n      return Number;\n    writefds = (fd_set *)<span class=\"supfact\">v12</span>;\n  } else {\n    writefds = Number L;\n  }\n  if (a4) {\n    if (copy_from_user_fdset(<span class=\"supfact\">v11</span>, a4, a1))\n      return Number;\n    exceptfds = (fd_set *)<span class=\"supfact\">v11</span>;\n  } else {\n    exceptfds = Number L;\n  }\n  if (a5) {\n    if (copy_from_user_timeval(<span class=\"supfact\">v10</span>, a5))\n      return Number;\n    timeout = (struct timeval *)<span class=\"supfact\">v10</span>;\n  } else {\n    timeout = Number L;\n  }\n  v6 = select(a1, readfds, writefds, exceptfds, timeout);\n  v14 = get_errno(v6);\n  if (is_error(v14))\n    goto LABEL_34;\n  if (a2 && copy_to_user_fdset(a2, (__int64)<span class=\"supfact\">v13</span>, a1))\n    return Number;\n  if (a3 && copy_to_user_fdset(a3, (__int64)<span class=\"supfact\">v12</span>, a1))\n    return Number;\n  if (a4 && copy_to_user_fdset(a4, (__int64)<span class=\"supfact\">v11</span>, a1))\n    return Number;\n  if (a5 && copy_to_user_timeval(a5, <span class=\"supfact\">v10</span>))\n    result = Number;\n  else\n  LABEL_34:\n    result = v14;\n  return result;\n}", "code_t": "abi_long __cdecl do_select(int n, abi_ulong rfd_addr, abi_ulong wfd_addr,\n                           abi_ulong efd_addr, abi_ulong target_tv_addr) {\n  abi_long result;\n  int v6;\n  timeval <span class=\"supfact\">tv</span>;\n  fd_set <span class=\"supfact\">efds</span>;\n  fd_set <span class=\"supfact\">wfds</span>;\n  fd_set <span class=\"supfact\">rfds</span>;\n  abi_long ret;\n  timeval *tv_ptr;\n  fd_set *efds_ptr;\n  fd_set *wfds_ptr;\n  fd_set *rfds_ptr;\n  if (rfd_addr) {\n    if (copy_from_user_fdset(&<span class=\"supfact\">rfds</span>, rfd_addr, n))\n      return Number;\n    rfds_ptr = &<span class=\"supfact\">rfds</span>;\n  } else {\n    rfds_ptr = Number L;\n  }\n  if (wfd_addr) {\n    if (copy_from_user_fdset(&<span class=\"supfact\">wfds</span>, wfd_addr, n))\n      return Number;\n    wfds_ptr = &<span class=\"supfact\">wfds</span>;\n  } else {\n    wfds_ptr = Number L;\n  }\n  if (efd_addr) {\n    if (copy_from_user_fdset(&<span class=\"supfact\">efds</span>, efd_addr, n))\n      return Number;\n    efds_ptr = &<span class=\"supfact\">efds</span>;\n  } else {\n    efds_ptr = Number L;\n  }\n  if (target_tv_addr) {\n    if (copy_from_user_timeval(&<span class=\"supfact\">tv</span>, target_tv_addr))\n      return Number;\n    tv_ptr = &<span class=\"supfact\">tv</span>;\n  } else {\n    tv_ptr = Number L;\n  }\n  v6 = select(n, rfds_ptr, wfds_ptr, efds_ptr, tv_ptr);\n  ret = get_errno(v6);\n  if (is_error(ret))\n    goto LABEL_34;\n  if (rfd_addr && copy_to_user_fdset(rfd_addr, &<span class=\"supfact\">rfds</span>, n))\n    return Number;\n  if (wfd_addr && copy_to_user_fdset(wfd_addr, &<span class=\"supfact\">wfds</span>, n))\n    return Number;\n  if (efd_addr && copy_to_user_fdset(efd_addr, &<span class=\"supfact\">efds</span>, n))\n    return Number;\n  if (target_tv_addr &&\n      copy_to_user_timeval(target_tv_addr, &<span class=\"supfact\">tv</span>))\n    result = Number;\n  else\n  LABEL_34:\n    result = ret;\n  return result;\n}", "var": [{"name": "v13", "type": "struct fd_set { __fd_mask[16] fds_bits; }", "ref_name": "rfds", "ref_type": "struct fd_set { __fd_mask[16] fds_bits; }"}, {"name": "v12", "type": "struct fd_set { __fd_mask[16] fds_bits; }", "ref_name": "wfds", "ref_type": "struct fd_set { __fd_mask[16] fds_bits; }"}, {"name": "v11", "type": "struct fd_set { __fd_mask[16] fds_bits; }", "ref_name": "efds", "ref_type": "struct fd_set { __fd_mask[16] fds_bits; }"}, {"name": "v10", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "wkt", "repo_name": "ypkg2", "path": "wkt/ypkg2/fb968bc84318c318ae98cb92f7c0142aed45654b0f710de834aca0cc4758bedd", "path_in_repo": "wkt/ypkg2//data.o", "objdump": "00000000000000ed <hash_table_add_data>:\n      ed:\t55                   \tpush   %rbp\n      ee:\t48 89 e5             \tmov    %rsp,%rbp\n      f1:\t48 83 ec 50          \tsub    $0x50,%rsp\n      f5:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n      f9:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n      fd:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     101:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n     106:\t74 07                \tje     10f <hash_table_add_data+0x22>\n     108:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n     10d:\t75 0a                \tjne    119 <hash_table_add_data+0x2c>\n     10f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     114:\te9 8f 01 00 00       \tjmpq   2a8 <hash_table_add_data+0x1bb>\n     119:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n     11e:\t0f 84 46 01 00 00    \tje     26a <hash_table_add_data+0x17d>\n     124:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     128:\t48 89 c7             \tmov    %rax,%rdi\n     12b:\te8 00 00 00 00       \tcallq  130 <hash_table_add_data+0x43>\n     130:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     133:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     137:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     13b:\t8b 50 04             \tmov    0x4(%rax),%edx\n     13e:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     141:\t01 c2                \tadd    %eax,%edx\n     143:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     147:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     14b:\t8b 00                \tmov    (%rax),%eax\n     14d:\t39 c2                \tcmp    %eax,%edx\n     14f:\t7c 53                \tjl     1a4 <hash_table_add_data+0xb7>\n     151:\t81 7d f8 00 04 00 00 \tcmpl   $0x400,-0x8(%rbp)\n     158:\t7e 0d                \tjle    167 <hash_table_add_data+0x7a>\n     15a:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     15d:\t05 00 04 00 00       \tadd    $0x400,%eax\n     162:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     165:\teb 07                \tjmp    16e <hash_table_add_data+0x81>\n     167:\tc7 45 fc 00 04 00 00 \tmovl   $0x400,-0x4(%rbp)\n     16e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     172:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     176:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     179:\t89 d6                \tmov    %edx,%esi\n     17b:\t48 89 c7             \tmov    %rax,%rdi\n     17e:\te8 00 00 00 00       \tcallq  183 <hash_table_add_data+0x96>\n     183:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     187:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     18c:\t75 0a                \tjne    198 <hash_table_add_data+0xab>\n     18e:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     193:\te9 10 01 00 00       \tjmpq   2a8 <hash_table_add_data+0x1bb>\n     198:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     19c:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     1a0:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     1a4:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     1a7:\t48 63 d0             \tmovslq %eax,%rdx\n     1aa:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     1ae:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     1b2:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n     1b6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     1ba:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     1be:\t8b 40 04             \tmov    0x4(%rax),%eax\n     1c1:\t48 98                \tcltq   \n     1c3:\t48 01 c1             \tadd    %rax,%rcx\n     1c6:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     1ca:\t48 89 c6             \tmov    %rax,%rsi\n     1cd:\t48 89 cf             \tmov    %rcx,%rdi\n     1d0:\te8 00 00 00 00       \tcallq  1d5 <hash_table_add_data+0xe8>\n     1d5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     1d9:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     1dd:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     1e1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     1e5:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     1e9:\t8b 48 04             \tmov    0x4(%rax),%ecx\n     1ec:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     1ef:\t01 c8                \tadd    %ecx,%eax\n     1f1:\t48 98                \tcltq   \n     1f3:\t48 01 d0             \tadd    %rdx,%rax\n     1f6:\tc6 00 00             \tmovb   $0x0,(%rax)\n     1f9:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     1fd:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     201:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     205:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     209:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     20d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     211:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     215:\t8b 40 04             \tmov    0x4(%rax),%eax\n     218:\t48 98                \tcltq   \n     21a:\t48 01 d0             \tadd    %rdx,%rax\n     21d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     221:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     225:\t48 8b 08             \tmov    (%rax),%rcx\n     228:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n     22c:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n     230:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     234:\t49 89 c8             \tmov    %rcx,%r8\n     237:\t48 89 d1             \tmov    %rdx,%rcx\n     23a:\tba 01 00 00 00       \tmov    $0x1,%edx\n     23f:\t48 89 f7             \tmov    %rsi,%rdi\n     242:\t48 89 c6             \tmov    %rax,%rsi\n     245:\te8 00 00 00 00       \tcallq  24a <hash_table_add_data+0x15d>\n     24a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     24e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     252:\t8b 50 04             \tmov    0x4(%rax),%edx\n     255:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     258:\t8d 48 01             \tlea    0x1(%rax),%ecx\n     25b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     25f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     263:\t01 ca                \tadd    %ecx,%edx\n     265:\t89 50 04             \tmov    %edx,0x4(%rax)\n     268:\teb 39                \tjmp    2a3 <hash_table_add_data+0x1b6>\n     26a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     26e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     272:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     279:\t00 \n     27a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     27e:\t48 8b 08             \tmov    (%rax),%rcx\n     281:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n     285:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n     289:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     28d:\t49 89 c8             \tmov    %rcx,%r8\n     290:\t48 89 d1             \tmov    %rdx,%rcx\n     293:\tba 01 00 00 00       \tmov    $0x1,%edx\n     298:\t48 89 f7             \tmov    %rsi,%rdi\n     29b:\t48 89 c6             \tmov    %rax,%rsi\n     29e:\te8 00 00 00 00       \tcallq  2a3 <hash_table_add_data+0x1b6>\n     2a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     2a8:\tc9                   \tleaveq \n     2a9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hash_table_add_data(__int64 a1, char *a2, const char *a3) {\n  ENTRY *retval;\n  ENTRY <span class=\"supfact\">item</span>;\n  __int64 v7;\n  int v8;\n  unsigned int v9;\n  if (!a1 || !a2)\n    return Number;\n  if (a3) {\n    v8 = strlen(a3);\n    if (v8 + *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L) >=\n        **(_DWORD **)(a1 + Number)) {\n      if (v8 <= Number)\n        v9 = Number;\n      else\n        v9 = v8 + Number;\n      v7 = hash_table_malloc_data(*(_QWORD *)(a1 + Number), v9);\n      if (!v7)\n        return Number;\n      *(_QWORD *)(a1 + Number) = v7;\n    }\n    memcpy((void *)(*(int *)(*(_QWORD *)(a1 + Number) + Number L) +\n                    *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L)),\n           a3, v8);\n    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L) +\n               *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L) + v8) = Number;\n    <span class=\"supfact\">item</span>.key = a2;\n    <span class=\"supfact\">item</span>.data =\n        (void *)(*(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L) +\n                 *(int *)(*(_QWORD *)(a1 + Number) + Number L));\n    hsearch_r((ENTRY)__PAIR128__((unsigned __int64)<span class=\"supfact\">item</span>.data,\n                                 (unsigned __int64)a2),\n              ENTER, &retval, *(struct hsearch_data **)a1);\n    *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L) += v8 + Number;\n  } else {\n    <span class=\"supfact\">item</span>.key = a2;\n    <span class=\"supfact\">item</span>.data = Number L;\n    hsearch_r((ENTRY)(unsigned __int64)a2, ENTER, &retval,\n              *(struct hsearch_data **)a1);\n  }\n  return Number L;\n}", "code_t": "int __cdecl hash_table_add_data(HashTable *ht, char *key, char *value) {\n  ENTRY *itemp;\n  ENTRY <span class=\"supfact\">item</span>;\n  HashData *new_data;\n  int len;\n  int buf_size;\n  if (!ht || !key)\n    return Number;\n  if (value) {\n    len = strlen(value);\n    if (len + ht->cur_data->pos >= ht->cur_data->size) {\n      if (len <= Number)\n        buf_size = Number;\n      else\n        buf_size = len + Number;\n      new_data = hash_table_malloc_data(ht->cur_data, buf_size);\n      if (!new_data)\n        return Number;\n      ht->cur_data = new_data;\n    }\n    memcpy(&ht->cur_data->buf[ht->cur_data->pos], value, len);\n    ht->cur_data->buf[ht->cur_data->pos + len] = Number;\n    <span class=\"supfact\">item</span>.key = key;\n    <span class=\"supfact\">item</span>.data = &ht->cur_data->buf[ht->cur_data->pos];\n    hsearch_r((ENTRY)__PAIR128__((unsigned __int64)<span class=\"supfact\">item</span>.data,\n                                 (unsigned __int64)key),\n              ENTER, &itemp, ht->index);\n    ht->cur_data->pos += len + Number;\n  } else {\n    <span class=\"supfact\">item</span>.key = key;\n    <span class=\"supfact\">item</span>.data = Number L;\n    hsearch_r((ENTRY)(unsigned __int64)key, ENTER, &itemp, ht->index);\n  }\n  return Number;\n}", "var": [{"name": "item", "type": "__int64[2]", "ref_name": "item", "ref_type": "struct ENTRY { char * key; void * data; }"}], "body_in_train": false}, {"repo_owner": "forrest898", "repo_name": "Sample_Interface_HPL_Testing", "path": "forrest898/Sample_Interface_HPL_Testing/ca626bd7f7411303204cc5c6dd42485f2e1cfc571103e0be82348853d6aa7285", "path_in_repo": "forrest898/Sample_Interface_HPL_Testing/papi/src/libpfm-3.y/libpfms/lib/libpfms.o", "objdump": "00000000000000a6 <barrier_wait>:\n      a6:\t55                   \tpush   %rbp\n      a7:\t48 89 e5             \tmov    %rsp,%rbp\n      aa:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n      b1:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n      b8:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n      bf:\t00 \n      c0:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n      c7:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n      cb:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n      d2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n      d7:\t48 89 c7             \tmov    %rax,%rdi\n      da:\te8 00 00 00 00       \tcallq  df <barrier_wait+0x39>\n      df:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n      e2:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n      e5:\t48 98                \tcltq   \n      e7:\t48 85 c0             \ttest   %rax,%rax\n      ea:\t74 1c                \tje     108 <barrier_wait+0x62>\n      ec:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n      f0:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n      f4:\t48 89 c7             \tmov    %rax,%rdi\n      f7:\tff d2                \tcallq  *%rdx\n      f9:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n     100:\t48 89 c7             \tmov    %rax,%rdi\n     103:\te8 00 00 00 00       \tcallq  108 <barrier_wait+0x62>\n     108:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n     10f:\t48 89 c7             \tmov    %rax,%rdi\n     112:\te8 00 00 00 00       \tcallq  117 <barrier_wait+0x71>\n     117:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     11e:\t48 89 c7             \tmov    %rax,%rdi\n     121:\te8 00 00 00 00       \tcallq  126 <barrier_wait+0x80>\n     126:\te8 00 00 00 00       \tcallq  12b <barrier_wait+0x85>\n     12b:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     132:\t8b 40 58             \tmov    0x58(%rax),%eax\n     135:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     138:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     13f:\t89 50 58             \tmov    %edx,0x58(%rax)\n     142:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     149:\t8b 40 58             \tmov    0x58(%rax),%eax\n     14c:\t85 c0                \ttest   %eax,%eax\n     14e:\t75 43                \tjne    193 <barrier_wait+0xed>\n     150:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     157:\t8b 50 5c             \tmov    0x5c(%rax),%edx\n     15a:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     161:\t89 50 58             \tmov    %edx,0x58(%rax)\n     164:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     16b:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n     16f:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     173:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     17a:\t48 89 50 60          \tmov    %rdx,0x60(%rax)\n     17e:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     185:\t48 83 c0 28          \tadd    $0x28,%rax\n     189:\t48 89 c7             \tmov    %rax,%rdi\n     18c:\te8 00 00 00 00       \tcallq  191 <barrier_wait+0xeb>\n     191:\teb 77                \tjmp    20a <barrier_wait+0x164>\n     193:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     19a:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n     19e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     1a2:\t48 8d 45 dc          \tlea    -0x24(%rbp),%rax\n     1a6:\t48 89 c6             \tmov    %rax,%rsi\n     1a9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     1ae:\te8 00 00 00 00       \tcallq  1b3 <barrier_wait+0x10d>\n     1b3:\teb 1d                \tjmp    1d2 <barrier_wait+0x12c>\n     1b5:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     1bc:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n     1c3:\t48 83 c2 28          \tadd    $0x28,%rdx\n     1c7:\t48 89 c6             \tmov    %rax,%rsi\n     1ca:\t48 89 d7             \tmov    %rdx,%rdi\n     1cd:\te8 00 00 00 00       \tcallq  1d2 <barrier_wait+0x12c>\n     1d2:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     1d9:\t8b 50 58             \tmov    0x58(%rax),%edx\n     1dc:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     1e3:\t8b 40 5c             \tmov    0x5c(%rax),%eax\n     1e6:\t39 c2                \tcmp    %eax,%edx\n     1e8:\t74 11                \tje     1fb <barrier_wait+0x155>\n     1ea:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     1f1:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n     1f5:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n     1f9:\t74 ba                \tje     1b5 <barrier_wait+0x10f>\n     1fb:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     1fe:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     203:\t89 c7                \tmov    %eax,%edi\n     205:\te8 00 00 00 00       \tcallq  20a <barrier_wait+0x164>\n     20a:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     211:\t48 89 c7             \tmov    %rax,%rdi\n     214:\te8 00 00 00 00       \tcallq  219 <barrier_wait+0x173>\n     219:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n     220:\t48 89 c7             \tmov    %rax,%rdi\n     223:\te8 00 00 00 00       \tcallq  228 <barrier_wait+0x182>\n     228:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     22d:\tc9                   \tleaveq \n     22e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall barrier_wait(__int64 a1) {\n  __pthread_unwind_buf_t <span class=\"supfact\">buf</span>;\n  __int64 v3;\n  pthread_mutex_t *v5;\n  int(__fastcall * v6)(pthread_mutex_t *);\n  v6 = cleanup_barrier;\n  v5 = (pthread_mutex_t *)a1;\n  if (_sigsetjmp((struct __jmp_buf_tag *)&<span class=\"supfact\">buf</span>, Number)) {\n    v6(v5);\n    _pthread_unwind_next(&<span class=\"supfact\">buf</span>);\n  }\n  _pthread_register_cancel(&<span class=\"supfact\">buf</span>);\n  pthread_mutex_lock((pthread_mutex_t *)a1);\n  pthread_testcancel();\n  if (--*(_DWORD *)(a1 + Number)) {\n    v3 = *(_QWORD *)(a1 + Number);\n    pthread_setcancelstate(Number,\n                           (int *)&<span class=\"supfact\">buf</span>.__pad[Number] + Number);\n    while (*(_DWORD *)(a1 + Number) != *(_DWORD *)(a1 + Number) &&\n           v3 == *(_QWORD *)(a1 + Number))\n      pthread_cond_wait((pthread_cond_t *)(a1 + Number), (pthread_mutex_t *)a1);\n    pthread_setcancelstate(SHIDWORD(<span class=\"supfact\">buf</span>.__pad[Number]),\n                           Number L);\n  } else {\n    *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number);\n    ++*(_QWORD *)(a1 + Number);\n    pthread_cond_broadcast((pthread_cond_t *)(a1 + Number));\n  }\n  pthread_mutex_unlock((pthread_mutex_t *)a1);\n  _pthread_unregister_cancel(&<span class=\"supfact\">buf</span>);\n  return Number L;\n}", "code_t": "int __cdecl barrier_wait(barrier_t *b) {\n  __pthread_unwind_buf_t <span class=\"supfact\">__cancel_buf</span>;\n  int oldstate;\n  uint64_t generation;\n  void *__cancel_arg;\n  void (*__cancel_routine)(void *);\n  __cancel_routine = (void (*)(void *))cleanup_barrier;\n  __cancel_arg = b;\n  if (_sigsetjmp((struct __jmp_buf_tag *)&<span class=\"supfact\">__cancel_buf</span>,\n                 Number)) {\n    __cancel_routine(__cancel_arg);\n    _pthread_unwind_next(&<span class=\"supfact\">__cancel_buf</span>);\n  }\n  _pthread_register_cancel(&<span class=\"supfact\">__cancel_buf</span>);\n  pthread_mutex_lock(&b->mutex);\n  pthread_testcancel();\n  if (--b->counter) {\n    generation = b->generation;\n    pthread_setcancelstate(Number, &oldstate);\n    while (b->counter != b->max && generation == b->generation)\n      pthread_cond_wait(&b->cond, &b->mutex);\n    pthread_setcancelstate(oldstate, Number L);\n  } else {\n    b->counter = b->max;\n    ++b->generation;\n    pthread_cond_broadcast(&b->cond);\n  }\n  pthread_mutex_unlock(&b->mutex);\n  _pthread_unregister_cancel(&<span class=\"supfact\">__cancel_buf</span>);\n  return Number;\n}", "var": [{"name": "buf", "type": "struct __pthread_unwind_buf_t { $F375244F0743F14650A061143CBB9C02[1] __cancel_jmp_buf; void *[4] __pad; }", "ref_name": "__cancel_buf", "ref_type": "struct __pthread_unwind_buf_t { $F375244F0743F14650A061143CBB9C02[1] __cancel_jmp_buf; void *[4] __pad; }"}], "body_in_train": true}, {"repo_owner": "bpillon", "repo_name": "android-ffmpeg-wrapper", "path": "bpillon/android-ffmpeg-wrapper/5098de8d23af4c1e067a1f88f120eeb9479c0bd4b977a5ac054e29dbe4644444", "path_in_repo": "bpillon/android-ffmpeg-wrapper/jni/ffmpeg/libavformat/wvdec.o", "objdump": "0000000000000bef <wv_read_seek>:\n bef:\t48 81 ec c8 00 00 00 \tsub    $0xc8,%rsp\n bf6:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n bfb:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n bff:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n c04:\t89 4c 24 10          \tmov    %ecx,0x10(%rsp)\n c08:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n c0d:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n c11:\t8b 54 24 14          \tmov    0x14(%rsp),%edx\n c15:\t48 63 d2             \tmovslq %edx,%rdx\n c18:\t48 c1 e2 03          \tshl    $0x3,%rdx\n c1c:\t48 01 d0             \tadd    %rdx,%rax\n c1f:\t48 8b 00             \tmov    (%rax),%rax\n c22:\t48 89 84 24 b8 00 00 \tmov    %rax,0xb8(%rsp)\n c29:\t00 \n c2a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n c2f:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n c33:\t48 89 84 24 b0 00 00 \tmov    %rax,0xb0(%rsp)\n c3a:\t00 \n c3b:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n c40:\t48 89 84 24 a8 00 00 \tmov    %rax,0xa8(%rsp)\n c47:\t00 \n c48:\t8b 54 24 10          \tmov    0x10(%rsp),%edx\n c4c:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n c51:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n c58:\t00 \n c59:\t48 89 ce             \tmov    %rcx,%rsi\n c5c:\t48 89 c7             \tmov    %rax,%rdi\n c5f:\te8 00 00 00 00       \tcallq  c64 <wv_read_seek+0x75>\n c64:\t89 84 24 a4 00 00 00 \tmov    %eax,0xa4(%rsp)\n c6b:\t83 bc 24 a4 00 00 00 \tcmpl   $0x0,0xa4(%rsp)\n c72:\t00 \n c73:\t0f 88 9d 00 00 00    \tjs     d16 <wv_read_seek+0x127>\n c79:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n c80:\t00 \n c81:\t48 8b 88 d0 01 00 00 \tmov    0x1d0(%rax),%rcx\n c88:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n c8f:\t00 \n c90:\t8b 80 d8 01 00 00    \tmov    0x1d8(%rax),%eax\n c96:\t48 63 d0             \tmovslq %eax,%rdx\n c99:\t48 89 d0             \tmov    %rdx,%rax\n c9c:\t48 01 c0             \tadd    %rax,%rax\n c9f:\t48 01 d0             \tadd    %rdx,%rax\n ca2:\t48 c1 e0 03          \tshl    $0x3,%rax\n ca6:\t48 83 e8 18          \tsub    $0x18,%rax\n caa:\t48 01 c8             \tadd    %rcx,%rax\n cad:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n cb1:\t48 39 44 24 08       \tcmp    %rax,0x8(%rsp)\n cb6:\t7f 5e                \tjg     d16 <wv_read_seek+0x127>\n cb8:\t48 8b 84 24 b0 00 00 \tmov    0xb0(%rsp),%rax\n cbf:\t00 \n cc0:\tc7 40 58 01 00 00 00 \tmovl   $0x1,0x58(%rax)\n cc7:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n cce:\t00 \n ccf:\t48 8b 88 d0 01 00 00 \tmov    0x1d0(%rax),%rcx\n cd6:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n cdd:\t48 63 d0             \tmovslq %eax,%rdx\n ce0:\t48 89 d0             \tmov    %rdx,%rax\n ce3:\t48 01 c0             \tadd    %rax,%rax\n ce6:\t48 01 d0             \tadd    %rdx,%rax\n ce9:\t48 c1 e0 03          \tshl    $0x3,%rax\n ced:\t48 01 c8             \tadd    %rcx,%rax\n cf0:\t48 8b 08             \tmov    (%rax),%rcx\n cf3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n cf8:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n cfc:\tba 00 00 00 00       \tmov    $0x0,%edx\n d01:\t48 89 ce             \tmov    %rcx,%rsi\n d04:\t48 89 c7             \tmov    %rax,%rdi\n d07:\te8 00 00 00 00       \tcallq  d0c <wv_read_seek+0x11d>\n d0c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n d11:\te9 e7 00 00 00       \tjmpq   dfd <wv_read_seek+0x20e>\n d16:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n d1c:\t78 13                \tjs     d31 <wv_read_seek+0x142>\n d1e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n d23:\t48 8b 80 40 04 00 00 \tmov    0x440(%rax),%rax\n d2a:\t48 39 44 24 08       \tcmp    %rax,0x8(%rsp)\n d2f:\t7c 0a                \tjl     d3b <wv_read_seek+0x14c>\n d31:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n d36:\te9 c2 00 00 00       \tjmpq   dfd <wv_read_seek+0x20e>\n d3b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n d40:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n d44:\t48 89 84 24 80 00 00 \tmov    %rax,0x80(%rsp)\n d4b:\t00 \n d4c:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n d53:\t00 \n d54:\tba 01 00 00 00       \tmov    $0x1,%edx\n d59:\tbe 00 00 00 00       \tmov    $0x0,%esi\n d5e:\t48 89 c7             \tmov    %rax,%rdi\n d61:\te8 00 00 00 00       \tcallq  d66 <wv_read_seek+0x177>\n d66:\t48 89 84 24 98 00 00 \tmov    %rax,0x98(%rsp)\n d6d:\t00 \n d6e:\t48 8b 94 24 a8 00 00 \tmov    0xa8(%rsp),%rdx\n d75:\t00 \n d76:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n d7b:\t48 89 d6             \tmov    %rdx,%rsi\n d7e:\t48 89 c7             \tmov    %rax,%rdi\n d81:\te8 00 00 00 00       \tcallq  d86 <wv_read_seek+0x197>\n d86:\t89 84 24 94 00 00 00 \tmov    %eax,0x94(%rsp)\n d8d:\t83 bc 24 94 00 00 00 \tcmpl   $0x0,0x94(%rsp)\n d94:\t00 \n d95:\t79 2a                \tjns    dc1 <wv_read_seek+0x1d2>\n d97:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n d9c:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n da0:\t48 8b 8c 24 98 00 00 \tmov    0x98(%rsp),%rcx\n da7:\t00 \n da8:\tba 00 00 00 00       \tmov    $0x0,%edx\n dad:\t48 89 ce             \tmov    %rcx,%rsi\n db0:\t48 89 c7             \tmov    %rax,%rdi\n db3:\te8 00 00 00 00       \tcallq  db8 <wv_read_seek+0x1c9>\n db8:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n dbf:\teb 3c                \tjmp    dfd <wv_read_seek+0x20e>\n dc1:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n dc8:\t00 \n dc9:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n dcd:\t48 89 84 24 88 00 00 \tmov    %rax,0x88(%rsp)\n dd4:\t00 \n dd5:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n ddc:\t00 \n ddd:\t48 89 c7             \tmov    %rax,%rdi\n de0:\te8 00 00 00 00       \tcallq  de5 <wv_read_seek+0x1f6>\n de5:\t48 8b 84 24 88 00 00 \tmov    0x88(%rsp),%rax\n dec:\t00 \n ded:\t48 3b 44 24 08       \tcmp    0x8(%rsp),%rax\n df2:\t0f 8c 76 ff ff ff    \tjl     d6e <wv_read_seek+0x17f>\n df8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n dfd:\t48 81 c4 c8 00 00 00 \tadd    $0xc8,%rsp\n e04:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall wv_read_seek(_QWORD *a1, int a2, __int64 a3,\n                                unsigned int a4) {\n  __int64 result;\n  char <span class=\"supfact\">v6</span>;\n  __int64 v7;\n  __int64 v8;\n  unsigned int v9;\n  __int64 v10;\n  int v11;\n  char *v12;\n  __int64 v13;\n  __int64 v14;\n  v14 = *(_QWORD *)(Number L * a2 + a1[Number]);\n  v13 = a1[Number];\n  v12 = &<span class=\"supfact\">v6</span>;\n  v11 = av_index_search_timestamp(v14, a3, a4);\n  if (v11 < Number ||\n      a3 > *(_QWORD *)(*(_QWORD *)(v14 + Number) +\n                       Number L * *(int *)(v14 + Number) - Number + Number)) {\n    if (a3 >= Number && a3 < a1[Number]) {\n      v7 = a1[Number];\n      v10 = avio_seek(v7, Number L, Number L);\n      do {\n        v9 = av_read_frame(a1, v12);\n        if ((v9 & Number) != Number) {\n          avio_seek(a1[Number], v10, Number L);\n          return v9;\n        }\n        v8 = *((_QWORD *)v12 + Number);\n        av_free_packet(v12);\n      } while (v8 < a3);\n      result = Number L;\n    } else {\n      result = Number L;\n    }\n  } else {\n    *(_DWORD *)(v13 + Number) = Number;\n    avio_seek(a1[Number],\n              *(_QWORD *)(*(_QWORD *)(v14 + Number) + Number L * v11),\n              Number L);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl wv_read_seek(AVFormatContext_0 *s, int stream_index,\n                         int64_t timestamp, int flags) {\n  int result;\n  AVPacket_0 <span class=\"supfact\">pkt1</span>;\n  AVIOContext_0 *v7;\n  int64_t pts;\n  int ret;\n  int64_t pos;\n  int index;\n  AVPacket_0 *pkt;\n  WVContext *wc;\n  AVStream_0 *st;\n  st = s->streams[stream_index];\n  wc = (WVContext *)s->priv_data;\n  pkt = &<span class=\"supfact\">pkt1</span>;\n  index = av_index_search_timestamp(st, timestamp, (unsigned int)flags);\n  if (index < Number ||\n      timestamp > st->index_entries[st->nb_index_entries - Number].timestamp) {\n    if (timestamp >= Number && timestamp < s->duration) {\n      v7 = s->pb;\n      pos = avio_seek(v7, Number L, Number L);\n      do {\n        ret = av_read_frame(s, pkt);\n        if (ret < Number) {\n          avio_seek(s->pb, pos, Number L);\n          return ret;\n        }\n        pts = pkt->pts;\n        av_free_packet(pkt);\n      } while (pts < timestamp);\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else {\n    wc->block_parsed = Number;\n    avio_seek(s->pb, st->index_entries[index].pos, Number L);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "struct AVPacket_0 { int64_t pts; int64_t dts; uint8_t * data; int size; int stream_index; int flags; int duration; void (*)(AVPacket *) destruct; void * priv; int64_t pos; int64_t convergence_duration; }", "ref_name": "pkt1", "ref_type": "struct AVPacket_0 { AVBufferRef_0 * buf; int64_t pts; int64_t dts; uint8_t * data; int size; int stream_index; int flags; PADDING (4); AVPacketSideData_0 * side_data; int side_data_elems; int duration; void (*)(AVPacket *) destruct; void * priv; int64_t pos; int64_t convergence_duration; }"}], "body_in_train": true}, {"repo_owner": "MGautier", "repo_name": "Programacion", "path": "MGautier/Programacion/3d5aa6f208aa0f3612df0889c7e8d42724ff024d2e08ed165b68b4ac9f088682", "path_in_repo": "MGautier/Programacion/C++/POO - Asignatura/P4/pedido.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeIP6PedidoSt4pairIKS1_P7UsuarioESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 30          \tsub    $0x30,%rsp\n   b:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   f:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  13:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  17:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  1b:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  20:\t74 5b                \tje     7d <_ZNSt8_Rb_treeIP6PedidoSt4pairIKS1_P7UsuarioESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x7d>\n  22:\t48 8b 5d d8          \tmov    -0x28(%rbp),%rbx\n  26:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  2a:\t4c 8b 20             \tmov    (%rax),%r12\n  2d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  31:\t48 89 c7             \tmov    %rax,%rdi\n  34:\te8 00 00 00 00       \tcallq  39 <_ZNSt8_Rb_treeIP6PedidoSt4pairIKS1_P7UsuarioESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x39>\n  39:\t48 8b 00             \tmov    (%rax),%rax\n  3c:\t4c 89 e2             \tmov    %r12,%rdx\n  3f:\t48 89 c6             \tmov    %rax,%rsi\n  42:\t48 89 df             \tmov    %rbx,%rdi\n  45:\te8 00 00 00 00       \tcallq  4a <_ZNSt8_Rb_treeIP6PedidoSt4pairIKS1_P7UsuarioESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x4a>\n  4a:\t83 f0 01             \txor    $0x1,%eax\n  4d:\t84 c0                \ttest   %al,%al\n  4f:\t74 1a                \tje     6b <_ZNSt8_Rb_treeIP6PedidoSt4pairIKS1_P7UsuarioESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x6b>\n  51:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  55:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  59:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  5d:\t48 89 c7             \tmov    %rax,%rdi\n  60:\te8 00 00 00 00       \tcallq  65 <_ZNSt8_Rb_treeIP6PedidoSt4pairIKS1_P7UsuarioESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x65>\n  65:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  69:\teb b0                \tjmp    1b <_ZNSt8_Rb_treeIP6PedidoSt4pairIKS1_P7UsuarioESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x1b>\n  6b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  6f:\t48 89 c7             \tmov    %rax,%rdi\n  72:\te8 00 00 00 00       \tcallq  77 <_ZNSt8_Rb_treeIP6PedidoSt4pairIKS1_P7UsuarioESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x77>\n  77:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  7b:\teb 9e                \tjmp    1b <_ZNSt8_Rb_treeIP6PedidoSt4pairIKS1_P7UsuarioESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x1b>\n  7d:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  81:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  85:\t48 89 d6             \tmov    %rdx,%rsi\n  88:\t48 89 c7             \tmov    %rax,%rdi\n  8b:\te8 00 00 00 00       \tcallq  90 <_ZNSt8_Rb_treeIP6PedidoSt4pairIKS1_P7UsuarioESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x90>\n  90:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  94:\t48 83 c4 30          \tadd    $0x30,%rsp\n  98:\t5b                   \tpop    %rbx\n  99:\t41 5c                \tpop    %r12\n  9b:\t5d                   \tpop    %rbp\n  9c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n    _Rb_tree<Pedido *, std pair<Pedido *const, Usuario *>,\n             std _Select1st<std pair<Pedido *const, Usuario *>>,\n             std less<Pedido *>,\n             std allocator<std pair<Pedido *const, Usuario *>>>\n    _M_lower_bound(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 *a4) {\n  unsigned __int64 v4;\n  unsigned __int64 v5;\n  __int64 <span class=\"supfact\">v10</span>[Number];\n  while (a2) {\n    v4 = *a4;\n    v5 = *(_QWORD *)std _Rb_tree<\n        Pedido *, std pair<Pedido *const, Usuario *>,\n        std _Select1st<std pair<Pedido *const, Usuario *>>, std less<Pedido *>,\n        std allocator<std pair<Pedido *const, Usuario *>>>\n             _S_key(a2);\n    if (!std less<Pedido *> operator()(a1, v5, v4)) {\n      a3 = a2;\n      a2 = std _Rb_tree<Pedido *, std pair<Pedido *const, Usuario *>,\n                        std _Select1st<std pair<Pedido *const, Usuario *>>,\n                        std less<Pedido *>,\n                        std allocator<std pair<Pedido *const, Usuario *>>>\n          _S_left(a2);\n    } else {\n      a2 = std _Rb_tree<Pedido *, std pair<Pedido *const, Usuario *>,\n                        std _Select1st<std pair<Pedido *const, Usuario *>>,\n                        std less<Pedido *>,\n                        std allocator<std pair<Pedido *const, Usuario *>>>\n          _S_right(a2);\n    }\n  }\n  std _Rb_tree_iterator<std pair<Pedido *const, Usuario *>> _Rb_tree_iterator(\n      <span class=\"supfact\">v10</span>, a3);\n  return <span class=\"supfact\">v10</span>[Number];\n}", "code_t": "std _Rb_tree<Pedido *, std pair<Pedido *const, Usuario *>,\n             std _Select1st<std pair<Pedido *const, Usuario *>>,\n             std less<Pedido *>,\n             std allocator<std pair<Pedido *const, Usuario *>>>\n    iterator __cdecl std\n        _Rb_tree<Pedido *, std pair<Pedido *const, Usuario *>,\n                 std _Select1st<std pair<Pedido *const, Usuario *>>,\n                 std less<Pedido *>,\n                 std allocator<std pair<Pedido *const, Usuario *>>>\n        _M_lower_bound(\n            std _Rb_tree<Pedido *, std pair<Pedido *const, Usuario *>,\n                         std _Select1st<std pair<Pedido *const, Usuario *>>,\n                         std less<Pedido *>,\n                         std allocator<std pair<Pedido *const, Usuario *>>>\n                *const this,\n            std _Rb_tree<Pedido *, std pair<Pedido *const, Usuario *>,\n                         std _Select1st<std pair<Pedido *const, Usuario *>>,\n                         std less<Pedido *>,\n                         std allocator<std pair<Pedido *const, Usuario *>>>\n                _Link_type __x,\n            std _Rb_tree<Pedido *, std pair<Pedido *const, Usuario *>,\n                         std _Select1st<std pair<Pedido *const, Usuario *>>,\n                         std less<Pedido *>,\n                         std allocator<std pair<Pedido *const, Usuario *>>>\n                _Base_ptr __y,\n            Pedido *const *__k) {\n  Pedido *v4;\n  Pedido **v5;\n  std _Rb_tree_iterator<std pair<Pedido *const, Usuario *>> <span class=\"supfact\">v10</span>;\n  while (__x) {\n    v4 = *__k;\n    v5 = (Pedido **)std _Rb_tree<\n        Pedido *, std pair<Pedido *const, Usuario *>,\n        std _Select1st<std pair<Pedido *const, Usuario *>>, std less<Pedido *>,\n        std allocator<std pair<Pedido *const, Usuario *>>>\n        _S_key(__x);\n    if (!std less<Pedido *> operator()((const std less<Pedido *> *const)this,\n                                       *v5, v4)) {\n      __y = __x;\n      __x = std _Rb_tree<Pedido *, std pair<Pedido *const, Usuario *>,\n                         std _Select1st<std pair<Pedido *const, Usuario *>>,\n                         std less<Pedido *>,\n                         std allocator<std pair<Pedido *const, Usuario *>>>\n          _S_left(__x);\n    } else {\n      __x = std _Rb_tree<Pedido *, std pair<Pedido *const, Usuario *>,\n                         std _Select1st<std pair<Pedido *const, Usuario *>>,\n                         std less<Pedido *>,\n                         std allocator<std pair<Pedido *const, Usuario *>>>\n          _S_right(__x);\n    }\n  }\n  std _Rb_tree_iterator<std pair<Pedido *const, Usuario *>> _Rb_tree_iterator(\n      &<span class=\"supfact\">v10</span>, __y);\n  return <span class=\"supfact\">v10</span>;\n}", "var": [{"name": "v10", "type": "struct std::_Rb_tree_iterator<std::pair<Usuario* const,std::set<Pedido*> > > { std::_Rb_tree_iterator<std::pair<Usuario* const,std::set<Pedido*> > >::_Base_ptr _M_node; }", "ref_name": "v10", "ref_type": "struct std::_Rb_tree_iterator<std::pair<Pedido* const,Usuario*> > { std::_Rb_tree_iterator<std::pair<Pedido* const,Usuario*> >::_Base_ptr _M_node; }"}], "body_in_train": true}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/69511703785c4a421d3c91172b723f7411ff14ce7eab0784a82dc175e188f156", "path_in_repo": "sslab-gatech/janus/lkl/tools/testing/selftests/bpf/test_dev_cgroup", "objdump": "0000000000408457 <bpf_create_map_name>:\n  408457:\t55                   \tpush   %rbp\n  408458:\t48 89 e5             \tmov    %rsp,%rbp\n  40845b:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40845f:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n  408462:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  408466:\t89 55 c8             \tmov    %edx,-0x38(%rbp)\n  408469:\t89 4d bc             \tmov    %ecx,-0x44(%rbp)\n  40846c:\t44 89 45 b8          \tmov    %r8d,-0x48(%rbp)\n  408470:\t44 89 4d b4          \tmov    %r9d,-0x4c(%rbp)\n  408474:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  40847b:\t00 \n  40847c:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  408483:\t00 \n  408484:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  40848b:\t00 \n  40848c:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  408493:\t00 \n  408494:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  40849b:\t00 \n  40849c:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  4084a3:\t00 \n  4084a4:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  4084a8:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4084ac:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  4084af:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  4084b2:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n  4084b5:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  4084b8:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  4084bb:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  4084be:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  4084c1:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  4084c4:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n  4084c7:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  4084ca:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4084ce:\t48 89 c7             \tmov    %rax,%rdi\n  4084d1:\te8 7d fd ff ff       \tcallq  408253 <bpf_create_map_xattr>\n  4084d6:\tc9                   \tleaveq \n  4084d7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bpf_create_map_name(unsigned int a1, __int64 a2,\n                                       unsigned int a3, unsigned int a4,\n                                       unsigned int a5, unsigned int a6) {\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  <span class=\"supfact\">v7</span>[Number] = a2;\n  <span class=\"supfact\">v7</span>[Number] = __PAIR64__(a6, a1);\n  <span class=\"supfact\">v7</span>[Number] = __PAIR64__(a4, a3);\n  <span class=\"supfact\">v7</span>[Number] = a5;\n  return bpf_create_map_xattr((__int64)<span class=\"supfact\">v7</span>);\n}", "code_t": "int __cdecl bpf_create_map_name(bpf_map_type map_type, const char *name,\n                                int key_size, int value_size, int max_entries,\n                                __u32 map_flags) {\n  bpf_create_map_attr <span class=\"supfact\">map_attr</span>;\n  <span class=\"supfact\">map_attr</span>.numa_node = Number;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.btf_fd = Number L;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.btf_value_type_id = Number L;\n  <span class=\"supfact\">map_attr</span>.name = name;\n  <span class=\"supfact\">map_attr</span>.map_type = map_type;\n  <span class=\"supfact\">map_attr</span>.map_flags = map_flags;\n  <span class=\"supfact\">map_attr</span>.key_size = key_size;\n  <span class=\"supfact\">map_attr</span>.value_size = value_size;\n  <span class=\"supfact\">map_attr</span>.max_entries = max_entries;\n  return bpf_create_map_xattr(&<span class=\"supfact\">map_attr</span>);\n}", "var": [{"name": "v7", "type": "struct bpf_create_map_attr { const char * name; bpf_map_type map_type; __u32 map_flags; __u32 key_size; __u32 value_size; __u32 max_entries; __u32 numa_node; __u32 btf_fd; __u32 btf_key_type_id; __u32 btf_value_type_id; __u32 map_ifindex; }", "ref_name": "map_attr", "ref_type": "struct bpf_create_map_attr { const char * name; bpf_map_type map_type; __u32 map_flags; __u32 key_size; __u32 value_size; __u32 max_entries; __u32 numa_node; __u32 btf_fd; __u32 btf_key_type_id; __u32 btf_value_type_id; __u32 map_ifindex; }"}], "body_in_train": true}, {"repo_owner": "github", "repo_name": "git-msysgit", "path": "github/git-msysgit/6ae84bed2bea0bdc791463b7d3222148587b6c92f5751dc6aba3318c26f5edc8", "path_in_repo": "github/git-msysgit//url.o", "objdump": "0000000000000493 <url_decode_parameter_value>:\n 493:\t55                   \tpush   %rbp\n 494:\t48 89 e5             \tmov    %rsp,%rbp\n 497:\t48 83 ec 30          \tsub    $0x30,%rsp\n 49b:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 49f:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n 4a6:\t00 \n 4a7:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n 4ae:\t00 \n 4af:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n 4b6:\t00 \n 4b7:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 4bb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 4bf:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n 4c5:\t48 89 d1             \tmov    %rdx,%rcx\n 4c8:\tba 00 00 00 00       \tmov    $0x0,%edx\n 4cd:\tbe ff ff ff ff       \tmov    $0xffffffff,%esi\n 4d2:\t48 89 c7             \tmov    %rax,%rdi\n 4d5:\te8 83 fd ff ff       \tcallq  25d <url_decode_internal>\n 4da:\tc9                   \tleaveq \n 4db:\tc3                   \tretq   ", "code_s": "__int64 __fastcall url_decode_parameter_value(unsigned __int8 **a1) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  <span class=\"supfact\">v2</span>[Number] = (__int64)&strbuf_slopbuf;\n  return url_decode_internal(a1, Number, String, (__int64)<span class=\"supfact\">v2</span>,\n                             Number);\n}", "code_t": "char *__cdecl url_decode_parameter_value(const char **query) {\n  strbuf <span class=\"supfact\">out</span>;\n  <span class=\"supfact\">out</span>.alloc = Number L;\n  <span class=\"supfact\">out</span>.len = Number L;\n  <span class=\"supfact\">out</span>.buf = (char *)&strbuf_slopbuf;\n  return url_decode_internal(query, Number, String, &<span class=\"supfact\">out</span>,\n                             Number);\n}", "var": [{"name": "v2", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "ref_name": "out", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": false}, {"repo_owner": "ChengyuSong", "repo_name": "lll-50", "path": "ChengyuSong/lll-50/32051b564bfe9331ac7c45d081771c9d7c6c9fa875000aef388532feff52af2e", "path_in_repo": "ChengyuSong/lll-50/tools/testing/selftests/bpf/get_cgroup_id_user", "objdump": "000000000040a37f <bpf_create_map>:\n  40a37f:\t55                   \tpush   %rbp\n  40a380:\t48 89 e5             \tmov    %rsp,%rbp\n  40a383:\t48 83 ec 60          \tsub    $0x60,%rsp\n  40a387:\t89 7d bc             \tmov    %edi,-0x44(%rbp)\n  40a38a:\t89 75 b8             \tmov    %esi,-0x48(%rbp)\n  40a38d:\t89 55 b4             \tmov    %edx,-0x4c(%rbp)\n  40a390:\t89 4d b0             \tmov    %ecx,-0x50(%rbp)\n  40a393:\t44 89 45 ac          \tmov    %r8d,-0x54(%rbp)\n  40a397:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n  40a39e:\t00 \n  40a39f:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n  40a3a6:\t00 \n  40a3a7:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  40a3ae:\t00 \n  40a3af:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  40a3b6:\t00 \n  40a3b7:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  40a3be:\t00 \n  40a3bf:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  40a3c6:\t00 \n  40a3c7:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  40a3ce:\t00 \n  40a3cf:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  40a3d2:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n  40a3d5:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  40a3d8:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  40a3db:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n  40a3de:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  40a3e1:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n  40a3e4:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  40a3e7:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n  40a3ea:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  40a3ed:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40a3f1:\t48 89 c7             \tmov    %rax,%rdi\n  40a3f4:\te8 bf fd ff ff       \tcallq  40a1b8 <bpf_create_map_xattr>\n  40a3f9:\tc9                   \tleaveq \n  40a3fa:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bpf_create_map(unsigned int a1, unsigned int a2,\n                                  unsigned int a3, unsigned int a4,\n                                  unsigned int a5) {\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  <span class=\"supfact\">v6</span>[Number] = Number L;\n  <span class=\"supfact\">v6</span>[Number] = Number L;\n  <span class=\"supfact\">v6</span>[Number] = Number L;\n  <span class=\"supfact\">v6</span>[Number] = Number L;\n  <span class=\"supfact\">v6</span>[Number] = __PAIR64__(a5, a1);\n  <span class=\"supfact\">v6</span>[Number] = __PAIR64__(a3, a2);\n  <span class=\"supfact\">v6</span>[Number] = a4;\n  return bpf_create_map_xattr((__int64)<span class=\"supfact\">v6</span>);\n}", "code_t": "int __cdecl bpf_create_map(bpf_map_type map_type, int key_size, int value_size,\n                           int max_entries, __u32 map_flags) {\n  bpf_create_map_attr <span class=\"supfact\">map_attr</span>;\n  <span class=\"supfact\">map_attr</span>.name = Number L;\n  <span class=\"supfact\">map_attr</span>.numa_node = Number;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.btf_fd = Number L;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.btf_value_type_id = Number L;\n  *(_QWORD *)&<span class=\"supfact\">map_attr</span>.inner_map_fd = Number L;\n  <span class=\"supfact\">map_attr</span>.map_type = map_type;\n  <span class=\"supfact\">map_attr</span>.map_flags = map_flags;\n  <span class=\"supfact\">map_attr</span>.key_size = key_size;\n  <span class=\"supfact\">map_attr</span>.value_size = value_size;\n  <span class=\"supfact\">map_attr</span>.max_entries = max_entries;\n  return bpf_create_map_xattr(&<span class=\"supfact\">map_attr</span>);\n}", "var": [{"name": "v6", "type": "struct bpf_create_map_attr { const char * name; bpf_map_type map_type; __u32 map_flags; __u32 key_size; __u32 value_size; __u32 max_entries; __u32 numa_node; __u32 btf_fd; __u32 btf_key_type_id; __u32 btf_value_type_id; __u32 map_ifindex; __u32 inner_map_fd; PADDING (4); }", "ref_name": "map_attr", "ref_type": "struct bpf_create_map_attr { const char * name; bpf_map_type map_type; __u32 map_flags; __u32 key_size; __u32 value_size; __u32 max_entries; __u32 numa_node; __u32 btf_fd; __u32 btf_key_type_id; __u32 btf_value_type_id; __u32 map_ifindex; __u32 inner_map_fd; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "draculaw", "repo_name": "yeplayer", "path": "draculaw/yeplayer/ceaa0e91fa7704a8825a982646a5e9b902446fb2aa60aeb5b521913b461fc0d4", "path_in_repo": "draculaw/yeplayer/jni/ffmpeg/libavformat/wtvdec.o", "objdump": "00000000000010d6 <crazytime_to_iso8601>:\n    10d6:\t48 83 ec 78          \tsub    $0x78,%rsp\n    10da:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    10df:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n    10e3:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    10e8:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    10ed:\t48 ba bd 42 7a e5 d5 \tmovabs $0xd6bf94d5e57a42bd,%rdx\n    10f4:\t94 bf d6 \n    10f7:\t48 89 c8             \tmov    %rcx,%rax\n    10fa:\t48 f7 ea             \timul   %rdx\n    10fd:\t48 8d 04 0a          \tlea    (%rdx,%rcx,1),%rax\n    1101:\t48 c1 f8 17          \tsar    $0x17,%rax\n    1105:\t48 89 c2             \tmov    %rax,%rdx\n    1108:\t48 89 c8             \tmov    %rcx,%rax\n    110b:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n    110f:\t48 29 c2             \tsub    %rax,%rdx\n    1112:\t48 b8 00 09 6e 88 f1 \tmovabs $0xfffffff1886e0900,%rax\n    1119:\tff ff ff \n    111c:\t48 01 d0             \tadd    %rdx,%rax\n    111f:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n    1124:\t48 8d 54 24 20       \tlea    0x20(%rsp),%rdx\n    1129:\t48 8d 44 24 60       \tlea    0x60(%rsp),%rax\n    112e:\t48 89 d6             \tmov    %rdx,%rsi\n    1131:\t48 89 c7             \tmov    %rax,%rdi\n    1134:\te8 00 00 00 00       \tcallq  1139 <crazytime_to_iso8601+0x63>\n    1139:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n    113e:\t48 83 7c 24 68 00    \tcmpq   $0x0,0x68(%rsp)\n    1144:\t75 07                \tjne    114d <crazytime_to_iso8601+0x77>\n    1146:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    114b:\teb 32                \tjmp    117f <crazytime_to_iso8601+0xa9>\n    114d:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    1151:\t48 63 f0             \tmovslq %eax,%rsi\n    1154:\t48 8b 54 24 68       \tmov    0x68(%rsp),%rdx\n    1159:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    115e:\t48 89 d1             \tmov    %rdx,%rcx\n    1161:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1166:\t48 89 c7             \tmov    %rax,%rdi\n    1169:\te8 00 00 00 00       \tcallq  116e <crazytime_to_iso8601+0x98>\n    116e:\t48 85 c0             \ttest   %rax,%rax\n    1171:\t75 07                \tjne    117a <crazytime_to_iso8601+0xa4>\n    1173:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1178:\teb 05                \tjmp    117f <crazytime_to_iso8601+0xa9>\n    117a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    117f:\t48 83 c4 78          \tadd    $0x78,%rsp\n    1183:\tc3                   \tretq   ", "code_s": "__int64 __fastcall crazytime_to_iso8601(char *a1, int a2, __int64 a3) {\n  struct tm <span class=\"supfact\">tp</span>;\n  time_t timer;\n  struct tm *v6;\n  timer = a3 / Number - Number;\n  v6 = gmtime_r(&timer, &<span class=\"supfact\">tp</span>);\n  if (!v6)\n    return Number;\n  if (strftime(a1, a2, String, v6))\n    return Number L;\n  return Number;\n}", "code_t": "int __cdecl crazytime_to_iso8601(char *buf, int buf_size, int64_t value) {\n  tm <span class=\"supfact\">tmbuf</span>;\n  time_t t;\n  tm *tm;\n  t = value / Number - Number;\n  tm = gmtime_r(&t, &<span class=\"supfact\">tmbuf</span>);\n  if (!tm)\n    return Number;\n  if (strftime(buf, buf_size, String, tm))\n    return Number;\n  return Number;\n}", "var": [{"name": "tp", "type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }", "ref_name": "tmbuf", "ref_type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}], "body_in_train": true}, {"repo_owner": "KorolevaYana", "repo_name": "OS", "path": "KorolevaYana/OS/8bbedd3253fbf649fcd4e5064ab8fff58a83f533e114f4317cd045c6d45d5c9e", "path_in_repo": "KorolevaYana/OS/netsh/netsh", "objdump": "0000000000407518 <_ZN8my_epoll6add_fdE5my_fd>:\n  407518:\t55                   \tpush   %rbp\n  407519:\t48 89 e5             \tmov    %rsp,%rbp\n  40751c:\t48 83 ec 20          \tsub    $0x20,%rsp\n  407520:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  407524:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  407528:\tc7 45 f4 11 20 00 00 \tmovl   $0x2011,-0xc(%rbp)\n  40752f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  407533:\t48 89 c7             \tmov    %rax,%rdi\n  407536:\te8 a9 54 00 00       \tcallq  40c9e4 <_ZN5my_fd6get_fdEv>\n  40753b:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40753e:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  407545:\t00 \n  407546:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  407549:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40754c:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  40754f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  407553:\t8b 80 94 00 00 00    \tmov    0x94(%rax),%eax\n  407559:\t48 8d 4d f4          \tlea    -0xc(%rbp),%rcx\n  40755d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  407562:\t89 c7                \tmov    %eax,%edi\n  407564:\te8 b7 ad ff ff       \tcallq  402320 <epoll_ctl@plt>\n  407569:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  40756c:\t0f 94 c0             \tsete   %al\n  40756f:\t84 c0                \ttest   %al,%al\n  407571:\t74 16                \tje     407589 <_ZN8my_epoll6add_fdE5my_fd+0x71>\n  407573:\tbf 99 d2 40 00       \tmov    $0x40d299,%edi\n  407578:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40757d:\te8 ce aa ff ff       \tcallq  402050 <printf@plt>\n  407582:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  407587:\teb 45                \tjmp    4075ce <_ZN8my_epoll6add_fdE5my_fd+0xb6>\n  407589:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40758d:\t48 8d 50 60          \tlea    0x60(%rax),%rdx\n  407591:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  407595:\t48 89 c6             \tmov    %rax,%rsi\n  407598:\t48 89 d7             \tmov    %rdx,%rdi\n  40759b:\te8 94 0e 00 00       \tcallq  408434 <_ZNSt3mapIi5my_fdSt4lessIiESaISt4pairIKiS0_EEEixERS4_>\n  4075a0:\t48 89 c2             \tmov    %rax,%rdx\n  4075a3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4075a7:\t48 89 c6             \tmov    %rax,%rsi\n  4075aa:\t48 89 d7             \tmov    %rdx,%rdi\n  4075ad:\te8 c2 54 00 00       \tcallq  40ca74 <_ZN5my_fdaSERKS_>\n  4075b2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4075b6:\t8b 80 90 00 00 00    \tmov    0x90(%rax),%eax\n  4075bc:\t8d 50 01             \tlea    0x1(%rax),%edx\n  4075bf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4075c3:\t89 90 90 00 00 00    \tmov    %edx,0x90(%rax)\n  4075c9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4075ce:\tc9                   \tleaveq \n  4075cf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall my_epoll add_fd(__int64 a1, my_fd *a2) {\n  __int64 result;\n  __int64 v3;\n  int fd;\n  struct epoll_event <span class=\"supfact\">event</span>;\n  <span class=\"supfact\">event</span>.events = Number;\n  fd = my_fd get_fd(a2);\n  <span class=\"supfact\">event</span>.data.u64 = (unsigned int)fd;\n  if (epoll_ctl(*(_DWORD *)(a1 + Number), Number, fd, &<span class=\"supfact\">event</span>) ==\n      Number) {\n    printf(String);\n    result = Number L;\n  } else {\n    v3 = std map<int, my_fd> operator[](a1 + Number, &fd);\n    my_fd operator=(v3, a2);\n    ++*(_DWORD *)(a1 + Number);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl my_epoll add_fd(my_epoll *const this, my_fd *p_item) {\n  int result;\n  my_fd *v3;\n  int item_fd;\n  epoll_event <span class=\"supfact\">ev</span>;\n  <span class=\"supfact\">ev</span>.events = Number;\n  item_fd = my_fd get_fd(p_item);\n  <span class=\"supfact\">ev</span>.data.u64 = (unsigned int)item_fd;\n  if (epoll_ctl(this->fd, Number, item_fd, &<span class=\"supfact\">ev</span>) == Number) {\n    printf(String);\n    result = Number;\n  } else {\n    v3 = std map<int, my_fd> operator[](&this->fds, &item_fd);\n    my_fd operator=(v3, p_item);\n    ++this->cur_events;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "event", "type": "struct struct epoll_event { uint32_t events; epoll_data_t data; }", "ref_name": "ev", "ref_type": "struct epoll_event { uint32_t events; epoll_data_t data; }"}], "body_in_train": false}, {"repo_owner": "gshanr", "repo_name": "smartmeship", "path": "gshanr/smartmeship/f3a687e03ed278ebb15e8301a92c39d252be22f9db5a69a24e325c9787b2b7cb", "path_in_repo": "gshanr/smartmeship/looci-contiki-os/contiki-2.6/examples/mb851/mb851-shell/obj_native/frame802154.o", "objdump": "0000000000000115 <frame802154_hdrlen>:\n 115:\t55                   \tpush   %rbp\n 116:\t48 89 e5             \tmov    %rsp,%rbp\n 119:\t48 83 ec 20          \tsub    $0x20,%rsp\n 11d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 121:\t48 8d 55 fb          \tlea    -0x5(%rbp),%rdx\n 125:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 129:\t48 89 d6             \tmov    %rdx,%rsi\n 12c:\t48 89 c7             \tmov    %rax,%rdi\n 12f:\te8 fa fe ff ff       \tcallq  2e <field_len>\n 134:\t0f b6 55 fb          \tmovzbl -0x5(%rbp),%edx\n 138:\t0f b6 45 fc          \tmovzbl -0x4(%rbp),%eax\n 13c:\t01 c2                \tadd    %eax,%edx\n 13e:\t0f b6 45 fd          \tmovzbl -0x3(%rbp),%eax\n 142:\t01 c2                \tadd    %eax,%edx\n 144:\t0f b6 45 fe          \tmovzbl -0x2(%rbp),%eax\n 148:\t01 c2                \tadd    %eax,%edx\n 14a:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n 14e:\t01 d0                \tadd    %edx,%eax\n 150:\t83 c0 03             \tadd    $0x3,%eax\n 153:\tc9                   \tleaveq \n 154:\tc3                   \tretq   ", "code_s": "__int64 __fastcall frame802154_hdrlen(__int64 a1) {\n  char <span class=\"supfact\">v2</span>[Number];\n  field_len(a1, <span class=\"supfact\">v2</span>);\n  return (unsigned __int8)<span class=\"supfact\">v2</span>[Number] +\n         (unsigned __int8)<span class=\"supfact\">v2</span>[Number] +\n         (unsigned __int8)<span class=\"supfact\">v2</span>[Number] +\n         (unsigned __int8)<span class=\"supfact\">v2</span>[Number] +\n         (unsigned int)(unsigned __int8)<span class=\"supfact\">v2</span>[Number] + Number;\n}", "code_t": "uint8_t __cdecl frame802154_hdrlen(frame802154_t *p) {\n  field_length_t <span class=\"supfact\">flen</span>;\n  field_len(p, &<span class=\"supfact\">flen</span>);\n  return <span class=\"supfact\">flen</span>.src_addr_len + <span class=\"supfact\">flen</span>.src_pid_len +\n         <span class=\"supfact\">flen</span>.dest_addr_len +\n         <span class=\"supfact\">flen</span>.dest_pid_len + <span class=\"supfact\">flen</span>.aux_sec_len +\n         Number;\n}", "var": [{"name": "v2", "type": "struct field_length_t { uint8_t dest_pid_len; uint8_t dest_addr_len; uint8_t src_pid_len; uint8_t src_addr_len; uint8_t aux_sec_len; }", "ref_name": "flen", "ref_type": "struct field_length_t { uint8_t dest_pid_len; uint8_t dest_addr_len; uint8_t src_pid_len; uint8_t src_addr_len; uint8_t aux_sec_len; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d961f6bc761fa8fe561f8484f009dcf34d6d3887c0086cfd39f3f61b8516b5ee", "path_in_repo": "XanClic/qemu//xtensa-softmmu/hw/vfio/common.o", "objdump": "0000000000001a82 <vfio_unmask_single_irqindex>:\n    1a82:\t55                   \tpush   %rbp\n    1a83:\t48 89 e5             \tmov    %rsp,%rbp\n    1a86:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1a8a:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1a8e:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n    1a91:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1a98:\t00 00 \n    1a9a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1a9e:\t31 c0                \txor    %eax,%eax\n    1aa0:\tc7 45 e0 14 00 00 00 \tmovl   $0x14,-0x20(%rbp)\n    1aa7:\tc7 45 e4 11 00 00 00 \tmovl   $0x11,-0x1c(%rbp)\n    1aae:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    1ab1:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    1ab4:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    1abb:\tc7 45 f0 01 00 00 00 \tmovl   $0x1,-0x10(%rbp)\n    1ac2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1ac6:\t8b 40 30             \tmov    0x30(%rax),%eax\n    1ac9:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    1acd:\tbe 6e 3b 00 00       \tmov    $0x3b6e,%esi\n    1ad2:\t89 c7                \tmov    %eax,%edi\n    1ad4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ad9:\te8 00 00 00 00       \tcallq  1ade <vfio_unmask_single_irqindex+0x5c>\n    1ade:\t90                   \tnop\n    1adf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1ae3:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1aea:\t00 00 \n    1aec:\t74 05                \tje     1af3 <vfio_unmask_single_irqindex+0x71>\n    1aee:\te8 00 00 00 00       \tcallq  1af3 <vfio_unmask_single_irqindex+0x71>\n    1af3:\tc9                   \tleaveq \n    1af4:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall vfio_unmask_single_irqindex(__int64 a1, int a2) {\n  int <span class=\"supfact\">v3</span>[Number];\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  <span class=\"supfact\">v3</span>[Number] = Number;\n  <span class=\"supfact\">v3</span>[Number] = Number;\n  <span class=\"supfact\">v3</span>[Number] = a2;\n  <span class=\"supfact\">v3</span>[Number] = Number;\n  <span class=\"supfact\">v3</span>[Number] = Number;\n  ioctl(*(_DWORD *)(a1 + Number), Number, <span class=\"supfact\">v3</span>);\n  return __readfsqword(Number) ^ v4;\n}", "code_t": "void __cdecl vfio_unmask_single_irqindex(VFIODevice_0 *vbasedev, int index) {\n  vfio_irq_set <span class=\"supfact\">irq_set</span>;\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  <span class=\"supfact\">irq_set</span>.argsz = Number;\n  <span class=\"supfact\">irq_set</span>.flags = Number;\n  <span class=\"supfact\">irq_set</span>.index = index;\n  <span class=\"supfact\">irq_set</span>.start = Number;\n  <span class=\"supfact\">irq_set</span>.count = Number;\n  ioctl(vbasedev->fd, Number, &<span class=\"supfact\">irq_set</span>);\n}", "var": [{"name": "v3", "type": "struct vfio_irq_set { __u32 argsz; __u32 flags; __u32 index; __u32 start; __u32 count; __u8[] data; }", "ref_name": "irq_set", "ref_type": "struct vfio_irq_set { __u32 argsz; __u32 flags; __u32 index; __u32 start; __u32 count; __u8[] data; }"}], "body_in_train": true}, {"repo_owner": "cirocosta", "repo_name": "schedsim", "path": "cirocosta/schedsim/3bea72150043bc162c92f68c5409304e826a73cc6eb6888027d76b1582f3fd5d", "path_in_repo": "cirocosta/schedsim//tests/test-shortest-remaining-time-next.out", "objdump": "00000000004030a4 <sm_core_run>:\n  4030a4:\t55                   \tpush   %rbp\n  4030a5:\t48 89 e5             \tmov    %rsp,%rbp\n  4030a8:\t48 81 ec b0 01 00 00 \tsub    $0x1b0,%rsp\n  4030af:\t48 89 bd 68 fe ff ff \tmov    %rdi,-0x198(%rbp)\n  4030b6:\t48 89 b5 60 fe ff ff \tmov    %rsi,-0x1a0(%rbp)\n  4030bd:\t48 89 95 58 fe ff ff \tmov    %rdx,-0x1a8(%rbp)\n  4030c4:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4030cb:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4030d2:\t48 89 c7             \tmov    %rax,%rdi\n  4030d5:\te8 66 e0 ff ff       \tcallq  401140 <sigemptyset@plt>\n  4030da:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4030dd:\t74 69                \tje     403148 <sm_core_run+0xa4>\n  4030df:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4030e6:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n  4030eb:\t48 89 c7             \tmov    %rax,%rdi\n  4030ee:\te8 8d e1 ff ff       \tcallq  401280 <sigaddset@plt>\n  4030f3:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4030f6:\t74 50                \tje     403148 <sm_core_run+0xa4>\n  4030f8:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4030ff:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n  403104:\t48 89 c7             \tmov    %rax,%rdi\n  403107:\te8 74 e1 ff ff       \tcallq  401280 <sigaddset@plt>\n  40310c:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  40310f:\t74 37                \tje     403148 <sm_core_run+0xa4>\n  403111:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  403118:\tbe 0e 00 00 00       \tmov    $0xe,%esi\n  40311d:\t48 89 c7             \tmov    %rax,%rdi\n  403120:\te8 5b e1 ff ff       \tcallq  401280 <sigaddset@plt>\n  403125:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  403128:\t74 1e                \tje     403148 <sm_core_run+0xa4>\n  40312a:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  403131:\tba 00 00 00 00       \tmov    $0x0,%edx\n  403136:\t48 89 c6             \tmov    %rax,%rsi\n  403139:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40313e:\te8 ed de ff ff       \tcallq  401030 <sigprocmask@plt>\n  403143:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  403146:\t75 52                \tjne    40319a <sm_core_run+0xf6>\n  403148:\t48 8b 05 b1 51 00 00 \tmov    0x51b1(%rip),%rax        # 408300 <stderr@@GLIBC_2.2.5>\n  40314f:\t48 89 c1             \tmov    %rax,%rcx\n  403152:\tba 0a 00 00 00       \tmov    $0xa,%edx\n  403157:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40315c:\tbf 76 53 40 00       \tmov    $0x405376,%edi\n  403161:\te8 ea e0 ff ff       \tcallq  401250 <fwrite@plt>\n  403166:\te8 f5 de ff ff       \tcallq  401060 <__errno_location@plt>\n  40316b:\t8b 00                \tmov    (%rax),%eax\n  40316d:\t89 c7                \tmov    %eax,%edi\n  40316f:\te8 fc e0 ff ff       \tcallq  401270 <strerror@plt>\n  403174:\t48 89 c2             \tmov    %rax,%rdx\n  403177:\t48 8b 05 82 51 00 00 \tmov    0x5182(%rip),%rax        # 408300 <stderr@@GLIBC_2.2.5>\n  40317e:\tbe 88 53 40 00       \tmov    $0x405388,%esi\n  403183:\t48 89 c7             \tmov    %rax,%rdi\n  403186:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40318b:\te8 a0 df ff ff       \tcallq  401130 <fprintf@plt>\n  403190:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  403195:\te8 a6 e0 ff ff       \tcallq  401240 <exit@plt>\n  40319a:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4031a1:\t48 89 c7             \tmov    %rax,%rdi\n  4031a4:\te8 97 df ff ff       \tcallq  401140 <sigemptyset@plt>\n  4031a9:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4031ac:\t74 4a                \tje     4031f8 <sm_core_run+0x154>\n  4031ae:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4031b5:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n  4031ba:\t48 89 c7             \tmov    %rax,%rdi\n  4031bd:\te8 be e0 ff ff       \tcallq  401280 <sigaddset@plt>\n  4031c2:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4031c5:\t74 31                \tje     4031f8 <sm_core_run+0x154>\n  4031c7:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4031ce:\tbe 0e 00 00 00       \tmov    $0xe,%esi\n  4031d3:\t48 89 c7             \tmov    %rax,%rdi\n  4031d6:\te8 a5 e0 ff ff       \tcallq  401280 <sigaddset@plt>\n  4031db:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4031de:\t74 18                \tje     4031f8 <sm_core_run+0x154>\n  4031e0:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4031e7:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n  4031ec:\t48 89 c7             \tmov    %rax,%rdi\n  4031ef:\te8 8c e0 ff ff       \tcallq  401280 <sigaddset@plt>\n  4031f4:\t85 c0                \ttest   %eax,%eax\n  4031f6:\t74 14                \tje     40320c <sm_core_run+0x168>\n  4031f8:\tbf ad 53 40 00       \tmov    $0x4053ad,%edi\n  4031fd:\te8 0e e0 ff ff       \tcallq  401210 <perror@plt>\n  403202:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  403207:\te8 34 e0 ff ff       \tcallq  401240 <exit@plt>\n  40320c:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  403213:\t8b 00                \tmov    (%rax),%eax\n  403215:\t83 f8 04             \tcmp    $0x4,%eax\n  403218:\t74 0e                \tje     403228 <sm_core_run+0x184>\n  40321a:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  403221:\t8b 00                \tmov    (%rax),%eax\n  403223:\t83 f8 05             \tcmp    $0x5,%eax\n  403226:\t75 30                \tjne    403258 <sm_core_run+0x1b4>\n  403228:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40322d:\te8 e0 05 00 00       \tcallq  403812 <sm_core_quantum_create>\n  403232:\teb 24                \tjmp    403258 <sm_core_run+0x1b4>\n  403234:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  403237:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40323e:\t00 \n  40323f:\t48 8b 85 60 fe ff ff \tmov    -0x1a0(%rbp),%rax\n  403246:\t48 01 d0             \tadd    %rdx,%rax\n  403249:\t48 8b 00             \tmov    (%rax),%rax\n  40324c:\t48 89 c7             \tmov    %rax,%rdi\n  40324f:\te8 70 07 00 00       \tcallq  4039c4 <sm_core_dispatcher_create>\n  403254:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  403258:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40325b:\t48 39 85 58 fe ff ff \tcmp    %rax,-0x1a8(%rbp)\n  403262:\t77 d0                \tja     403234 <sm_core_run+0x190>\n  403264:\te9 eb 01 00 00       \tjmpq   403454 <sm_core_run+0x3b0>\n  403269:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  403270:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  403277:\t48 89 d6             \tmov    %rdx,%rsi\n  40327a:\t48 89 c7             \tmov    %rax,%rdi\n  40327d:\te8 de de ff ff       \tcallq  401160 <sigwaitinfo@plt>\n  403282:\t8b 85 70 fe ff ff    \tmov    -0x190(%rbp),%eax\n  403288:\t83 f8 0e             \tcmp    $0xe,%eax\n  40328b:\t0f 84 9f 00 00 00    \tje     403330 <sm_core_run+0x28c>\n  403291:\t83 f8 0e             \tcmp    $0xe,%eax\n  403294:\t0f 8f ba 01 00 00    \tjg     403454 <sm_core_run+0x3b0>\n  40329a:\t83 f8 0a             \tcmp    $0xa,%eax\n  40329d:\t74 0e                \tje     4032ad <sm_core_run+0x209>\n  40329f:\t83 f8 0c             \tcmp    $0xc,%eax\n  4032a2:\t0f 84 24 01 00 00    \tje     4033cc <sm_core_run+0x328>\n  4032a8:\te9 a7 01 00 00       \tjmpq   403454 <sm_core_run+0x3b0>\n  4032ad:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  4032b4:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  4032b8:\t48 8b 10             \tmov    (%rax),%rdx\n  4032bb:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  4032c2:\tff b5 e8 fe ff ff    \tpushq  -0x118(%rbp)\n  4032c8:\tff b5 e0 fe ff ff    \tpushq  -0x120(%rbp)\n  4032ce:\tff b5 d8 fe ff ff    \tpushq  -0x128(%rbp)\n  4032d4:\tff b5 d0 fe ff ff    \tpushq  -0x130(%rbp)\n  4032da:\tff b5 c8 fe ff ff    \tpushq  -0x138(%rbp)\n  4032e0:\tff b5 c0 fe ff ff    \tpushq  -0x140(%rbp)\n  4032e6:\tff b5 b8 fe ff ff    \tpushq  -0x148(%rbp)\n  4032ec:\tff b5 b0 fe ff ff    \tpushq  -0x150(%rbp)\n  4032f2:\tff b5 a8 fe ff ff    \tpushq  -0x158(%rbp)\n  4032f8:\tff b5 a0 fe ff ff    \tpushq  -0x160(%rbp)\n  4032fe:\tff b5 98 fe ff ff    \tpushq  -0x168(%rbp)\n  403304:\tff b5 90 fe ff ff    \tpushq  -0x170(%rbp)\n  40330a:\tff b5 88 fe ff ff    \tpushq  -0x178(%rbp)\n  403310:\tff b5 80 fe ff ff    \tpushq  -0x180(%rbp)\n  403316:\tff b5 78 fe ff ff    \tpushq  -0x188(%rbp)\n  40331c:\tff b5 70 fe ff ff    \tpushq  -0x190(%rbp)\n  403322:\t48 89 c7             \tmov    %rax,%rdi\n  403325:\tff d2                \tcallq  *%rdx\n  403327:\t48 83 ec 80          \tsub    $0xffffffffffffff80,%rsp\n  40332b:\te9 24 01 00 00       \tjmpq   403454 <sm_core_run+0x3b0>\n  403330:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  403337:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40333b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40333f:\t48 85 c0             \ttest   %rax,%rax\n  403342:\t0f 84 0c 01 00 00    \tje     403454 <sm_core_run+0x3b0>\n  403348:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  40334f:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  403353:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  403357:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  40335e:\tff b5 e8 fe ff ff    \tpushq  -0x118(%rbp)\n  403364:\tff b5 e0 fe ff ff    \tpushq  -0x120(%rbp)\n  40336a:\tff b5 d8 fe ff ff    \tpushq  -0x128(%rbp)\n  403370:\tff b5 d0 fe ff ff    \tpushq  -0x130(%rbp)\n  403376:\tff b5 c8 fe ff ff    \tpushq  -0x138(%rbp)\n  40337c:\tff b5 c0 fe ff ff    \tpushq  -0x140(%rbp)\n  403382:\tff b5 b8 fe ff ff    \tpushq  -0x148(%rbp)\n  403388:\tff b5 b0 fe ff ff    \tpushq  -0x150(%rbp)\n  40338e:\tff b5 a8 fe ff ff    \tpushq  -0x158(%rbp)\n  403394:\tff b5 a0 fe ff ff    \tpushq  -0x160(%rbp)\n  40339a:\tff b5 98 fe ff ff    \tpushq  -0x168(%rbp)\n  4033a0:\tff b5 90 fe ff ff    \tpushq  -0x170(%rbp)\n  4033a6:\tff b5 88 fe ff ff    \tpushq  -0x178(%rbp)\n  4033ac:\tff b5 80 fe ff ff    \tpushq  -0x180(%rbp)\n  4033b2:\tff b5 78 fe ff ff    \tpushq  -0x188(%rbp)\n  4033b8:\tff b5 70 fe ff ff    \tpushq  -0x190(%rbp)\n  4033be:\t48 89 c7             \tmov    %rax,%rdi\n  4033c1:\tff d2                \tcallq  *%rdx\n  4033c3:\t48 83 ec 80          \tsub    $0xffffffffffffff80,%rsp\n  4033c7:\te9 88 00 00 00       \tjmpq   403454 <sm_core_run+0x3b0>\n  4033cc:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  4033d3:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  4033d7:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  4033db:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  4033e2:\tff b5 e8 fe ff ff    \tpushq  -0x118(%rbp)\n  4033e8:\tff b5 e0 fe ff ff    \tpushq  -0x120(%rbp)\n  4033ee:\tff b5 d8 fe ff ff    \tpushq  -0x128(%rbp)\n  4033f4:\tff b5 d0 fe ff ff    \tpushq  -0x130(%rbp)\n  4033fa:\tff b5 c8 fe ff ff    \tpushq  -0x138(%rbp)\n  403400:\tff b5 c0 fe ff ff    \tpushq  -0x140(%rbp)\n  403406:\tff b5 b8 fe ff ff    \tpushq  -0x148(%rbp)\n  40340c:\tff b5 b0 fe ff ff    \tpushq  -0x150(%rbp)\n  403412:\tff b5 a8 fe ff ff    \tpushq  -0x158(%rbp)\n  403418:\tff b5 a0 fe ff ff    \tpushq  -0x160(%rbp)\n  40341e:\tff b5 98 fe ff ff    \tpushq  -0x168(%rbp)\n  403424:\tff b5 90 fe ff ff    \tpushq  -0x170(%rbp)\n  40342a:\tff b5 88 fe ff ff    \tpushq  -0x178(%rbp)\n  403430:\tff b5 80 fe ff ff    \tpushq  -0x180(%rbp)\n  403436:\tff b5 78 fe ff ff    \tpushq  -0x188(%rbp)\n  40343c:\tff b5 70 fe ff ff    \tpushq  -0x190(%rbp)\n  403442:\t48 89 c7             \tmov    %rax,%rdi\n  403445:\tff d2                \tcallq  *%rdx\n  403447:\t48 83 ec 80          \tsub    $0xffffffffffffff80,%rsp\n  40344b:\t48 83 ad 58 fe ff ff \tsubq   $0x1,-0x1a8(%rbp)\n  403452:\t01 \n  403453:\t90                   \tnop\n  403454:\t48 83 bd 58 fe ff ff \tcmpq   $0x0,-0x1a8(%rbp)\n  40345b:\t00 \n  40345c:\t0f 85 07 fe ff ff    \tjne    403269 <sm_core_run+0x1c5>\n  403462:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  403469:\tc9                   \tleaveq \n  40346a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sm_core_run(__int64 a1, __int64 a2, unsigned __int64 a3) {\n  int *v3;\n  char *v4;\n  siginfo_t <span class=\"supfact\">info</span>;\n  sigset_t <span class=\"supfact\">set</span>;\n  sigset_t <span class=\"supfact\">v9</span>;\n  unsigned int v10;\n  v10 = Number;\n  if (sigemptyset(&<span class=\"supfact\">set</span>) == Number ||\n      sigaddset(&<span class=\"supfact\">set</span>, Number) == Number ||\n      sigaddset(&<span class=\"supfact\">set</span>, Number) == Number ||\n      sigaddset(&<span class=\"supfact\">set</span>, Number) == Number ||\n      sigprocmask(Number, &<span class=\"supfact\">set</span>, Number L) == Number) {\n    fwrite(String, Number, Number, stderr);\n    v3 = __errno_location();\n    v4 = strerror(*v3);\n    fprintf(stderr, String, v4);\n    exit(Number);\n  }\n  if (sigemptyset(&<span class=\"supfact\">v9</span>) == Number ||\n      sigaddset(&<span class=\"supfact\">v9</span>, Number) == Number ||\n      sigaddset(&<span class=\"supfact\">v9</span>, Number) == Number ||\n      sigaddset(&<span class=\"supfact\">v9</span>, Number)) {\n    perror(String);\n    exit(Number);\n  }\n  if (*(_DWORD *)a1 == Number || *(_DWORD *)a1 == Number)\n    sm_core_quantum_create();\n  while (a3 > v10)\n    sm_core_dispatcher_create(*(_QWORD *)(Number L * v10++ + a2));\n  while (a3) {\n    sigwaitinfo(&<span class=\"supfact\">v9</span>, &<span class=\"supfact\">info</span>);\n    if (<span class=\"supfact\">info</span>.si_signo == Number) {\n      if (*(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L))\n        (*(void(__fastcall **)(__int64))(*(_QWORD *)(a1 + Number) + Number L))(\n            a1);\n    } else if (<span class=\"supfact\">info</span>.si_signo <= Number) {\n      if (<span class=\"supfact\">info</span>.si_signo == Number) {\n        (**(void(__fastcall ***)(__int64))(a1 + Number))(a1);\n      } else if (<span class=\"supfact\">info</span>.si_signo == Number) {\n        (*(void(__fastcall **)(__int64))(*(_QWORD *)(a1 + Number) + Number L))(\n            a1);\n        --a3;\n      }\n    }\n  }\n  return a1;\n}", "code_t": "sm_core_t_0 *__cdecl sm_core_run(sm_core_t_0 *sched, sm_trace_t_0 **traces,\n                                 size_t traces_size) {\n  int *v3;\n  char *v4;\n  siginfo_t <span class=\"supfact\">sig</span>;\n  sigset_t <span class=\"supfact\">block_set</span>;\n  sigset_t <span class=\"supfact\">intmask</span>;\n  unsigned int i;\n  i = Number;\n  if (sigemptyset(&<span class=\"supfact\">block_set</span>) == Number ||\n      sigaddset(&<span class=\"supfact\">block_set</span>, Number) == Number ||\n      sigaddset(&<span class=\"supfact\">block_set</span>, Number) == Number ||\n      sigaddset(&<span class=\"supfact\">block_set</span>, Number) == Number ||\n      sigprocmask(Number, &<span class=\"supfact\">block_set</span>, Number L) == Number) {\n    fwrite(String, Number, Number, stderr);\n    v3 = __errno_location();\n    v4 = strerror(*v3);\n    fprintf(stderr, String, v4);\n    exit(Number);\n  }\n  if (sigemptyset(&<span class=\"supfact\">intmask</span>) == Number ||\n      sigaddset(&<span class=\"supfact\">intmask</span>, Number) == Number ||\n      sigaddset(&<span class=\"supfact\">intmask</span>, Number) == Number ||\n      sigaddset(&<span class=\"supfact\">intmask</span>, Number)) {\n    perror(String);\n    exit(Number);\n  }\n  if (sched->type == SM_ALG_RR || sched->type == SM_ALG_PS)\n    sm_core_quantum_create();\n  while (traces_size > i)\n    sm_core_dispatcher_create(traces[i++]);\n  while (traces_size) {\n    sigwaitinfo(&<span class=\"supfact\">intmask</span>, &<span class=\"supfact\">sig</span>);\n    if (<span class=\"supfact\">sig</span>.si_signo == Number) {\n      if (sched->algorithm->on_process_quantum)\n        ((void(__fastcall *)(\n            sm_core_t_0 *))sched->algorithm->on_process_quantum)(sched);\n    } else if (<span class=\"supfact\">sig</span>.si_signo <= Number) {\n      if (<span class=\"supfact\">sig</span>.si_signo == Number) {\n        ((void(__fastcall *)(sm_core_t_0 *))sched->algorithm->on_process_new)(\n            sched);\n      } else if (<span class=\"supfact\">sig</span>.si_signo == Number) {\n        ((void(__fastcall *)(sm_core_t_0 *))sched->algorithm->on_process_end)(\n            sched);\n        --traces_size;\n      }\n    }\n  }\n  return sched;\n}", "var": [{"name": "v9", "type": "struct sigset_t { unsigned __int64[16] __val; }", "ref_name": "intmask", "ref_type": "struct sigset_t { unsigned __int64[16] __val; }"}, {"name": "set", "type": "struct sigset_t { unsigned __int64[16] __val; }", "ref_name": "block_set", "ref_type": "struct sigset_t { unsigned __int64[16] __val; }"}, {"name": "info", "type": "struct siginfo_t { int si_signo; int si_errno; int si_code; int __pad0; $8CC465D5996C7E9DAA6CAFE01264A7E1 _sifields; }", "ref_name": "sig", "ref_type": "struct siginfo_t { int si_signo; int si_errno; int si_code; int __pad0; $8CC465D5996C7E9DAA6CAFE01264A7E1 _sifields; }"}], "body_in_train": true}, {"repo_owner": "avble", "repo_name": "pjproject-2.4", "path": "avble/pjproject-2.4/ff610105db3ac76b9e729bd641f18075cb8a02664ccf12fd1bbbd174dc83e4cf", "path_in_repo": "avble/pjproject-2.4/pjsip-apps/src/py_pjsua/build/temp.linux-x86_64-2.7/py_pjsua.o", "objdump": "00000000000045b0 <py_pjsua_logging_config_default>:\n    45b0:\t48 83 ec 48          \tsub    $0x48,%rsp\n    45b4:\t48 89 f7             \tmov    %rsi,%rdi\n    45b7:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 45be <py_pjsua_logging_config_default+0xe>\n    45be:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    45c5:\t00 00 \n    45c7:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    45cc:\t31 c0                \txor    %eax,%eax\n    45ce:\te8 00 00 00 00       \tcallq  45d3 <py_pjsua_logging_config_default+0x23>\n    45d3:\t41 89 c0             \tmov    %eax,%r8d\n    45d6:\t31 c0                \txor    %eax,%eax\n    45d8:\t45 85 c0             \ttest   %r8d,%r8d\n    45db:\t74 29                \tje     4606 <py_pjsua_logging_config_default+0x56>\n    45dd:\t48 89 e7             \tmov    %rsp,%rdi\n    45e0:\te8 00 00 00 00       \tcallq  45e5 <py_pjsua_logging_config_default+0x35>\n    45e5:\t31 d2                \txor    %edx,%edx\n    45e7:\t31 f6                \txor    %esi,%esi\n    45e9:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 45f0 <py_pjsua_logging_config_default+0x40>\n    45f0:\te8 3b d4 ff ff       \tcallq  1a30 <PyObj_pjsua_logging_config_new>\n    45f5:\t48 8b 14 24          \tmov    (%rsp),%rdx\n    45f9:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    45fd:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n    4602:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    4606:\t48 8b 4c 24 38       \tmov    0x38(%rsp),%rcx\n    460b:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    4612:\t00 00 \n    4614:\t75 05                \tjne    461b <py_pjsua_logging_config_default+0x6b>\n    4616:\t48 83 c4 48          \tadd    $0x48,%rsp\n    461a:\tc3                   \tretq   \n    461b:\te8 00 00 00 00       \tcallq  4620 <py_pjsua_reconfigure_logging>", "code_s": "_QWORD *__fastcall py_pjsua_logging_config_default(__int64 a1, __int64 a2) {\n  int v2;\n  _QWORD *result;\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  <span class=\"supfact\">v4</span>[Number] = __readfsqword(Number);\n  v2 = PyArg_ParseTuple(a2, &LC0);\n  result = Number L;\n  if (v2) {\n    pjsua_logging_config_default(<span class=\"supfact\">v4</span>);\n    result =\n        PyObj_pjsua_logging_config_new((__int64)&PyTyp_pjsua_logging_config);\n    result[Number] = <span class=\"supfact\">v4</span>[Number];\n    result[Number] = <span class=\"supfact\">v4</span>[Number];\n  }\n  return result;\n}", "code_t": "PyObject *__fastcall py_pjsua_logging_config_default(PyObject *pSelf,\n                                                     PyObject *pArgs) {\n  int v2;\n  PyObject *result;\n  pjsua_logging_config_0 <span class=\"supfact\">cfg</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  v2 = PyArg_ParseTuple(pArgs, &LC0);\n  result = Number L;\n  if (v2) {\n    pjsua_logging_config_default(&<span class=\"supfact\">cfg</span>);\n    result = PyObj_pjsua_logging_config_new(&PyTyp_pjsua_logging_config,\n                                            Number L, Number L);\n    result[Number].ob_refcnt = *(_QWORD *)&<span class=\"supfact\">cfg</span>.msg_logging;\n    result[Number].ob_type =\n        *(_typeobject **)&<span class=\"supfact\">cfg</span>.console_level;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct pjsua_logging_config_0 { pj_bool_t msg_logging; unsigned int level; unsigned int console_level; unsigned int decor; pj_str_t_0 log_filename; unsigned int log_file_flags; PADDING (4); void (*)(int, const char *, int) cb; }", "ref_name": "cfg", "ref_type": "struct pjsua_logging_config_0 { pj_bool_t msg_logging; unsigned int level; unsigned int console_level; unsigned int decor; pj_str_t_0 log_filename; unsigned int log_file_flags; PADDING (4); void (*)(int, const char *, int) cb; }"}], "body_in_train": true}, {"repo_owner": "wenhuizhang", "repo_name": "linux-4.18-i", "path": "wenhuizhang/linux-4.18-i/da821a41d0af2bdea4a12fedb7ec6e43155c88f4fded6d4be660939738876fa5", "path_in_repo": "wenhuizhang/linux-4.18-i/linux-4.18/tools/testing/selftests/bpf/libbpf.so", "objdump": "0000000000007437 <check_path>:\n    7437:\t55                   \tpush   %rbp\n    7438:\t48 89 e5             \tmov    %rsp,%rbp\n    743b:\t53                   \tpush   %rbx\n    743c:\t48 81 ec a8 00 00 00 \tsub    $0xa8,%rsp\n    7443:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n    744a:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    7451:\t48 83 bd 58 ff ff ff \tcmpq   $0x0,-0xa8(%rbp)\n    7458:\t00 \n    7459:\t75 0a                \tjne    7465 <check_path+0x2e>\n    745b:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    7460:\te9 eb 00 00 00       \tjmpq   7550 <check_path+0x119>\n    7465:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    746c:\t48 89 c7             \tmov    %rax,%rdi\n    746f:\te8 bc bf ff ff       \tcallq  3430 <strdup@plt>\n    7474:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    7478:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    747d:\t75 0a                \tjne    7489 <check_path+0x52>\n    747f:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    7484:\te9 c7 00 00 00       \tjmpq   7550 <check_path+0x119>\n    7489:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    748d:\t48 89 c7             \tmov    %rax,%rdi\n    7490:\te8 1b bd ff ff       \tcallq  31b0 <dirname@plt>\n    7495:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    7499:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n    74a0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    74a4:\t48 89 d6             \tmov    %rdx,%rsi\n    74a7:\t48 89 c7             \tmov    %rax,%rdi\n    74aa:\te8 41 be ff ff       \tcallq  32f0 <statfs@plt>\n    74af:\t85 c0                \ttest   %eax,%eax\n    74b1:\t74 45                \tje     74f8 <check_path+0xc1>\n    74b3:\t48 8b 05 e6 9d 00 00 \tmov    0x9de6(%rip),%rax        # 112a0 <__pr_warning>\n    74ba:\t48 85 c0             \ttest   %rax,%rax\n    74bd:\t74 2d                \tje     74ec <check_path+0xb5>\n    74bf:\t48 8b 1d da 9d 00 00 \tmov    0x9dda(%rip),%rbx        # 112a0 <__pr_warning>\n    74c6:\te8 c5 bb ff ff       \tcallq  3090 <__errno_location@plt>\n    74cb:\t8b 00                \tmov    (%rax),%eax\n    74cd:\t89 c7                \tmov    %eax,%edi\n    74cf:\te8 7c bf ff ff       \tcallq  3450 <strerror@plt>\n    74d4:\t48 89 c2             \tmov    %rax,%rdx\n    74d7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    74db:\t48 89 c6             \tmov    %rax,%rsi\n    74de:\t48 8d 3d 1b 5e 00 00 \tlea    0x5e1b(%rip),%rdi        # d300 <_fini+0x1cd8>\n    74e5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    74ea:\tff d3                \tcallq  *%rbx\n    74ec:\te8 9f bb ff ff       \tcallq  3090 <__errno_location@plt>\n    74f1:\t8b 00                \tmov    (%rax),%eax\n    74f3:\tf7 d8                \tneg    %eax\n    74f5:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    74f8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    74fc:\t48 89 c7             \tmov    %rax,%rdi\n    74ff:\te8 4c bb ff ff       \tcallq  3050 <free@plt>\n    7504:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    7508:\t75 43                \tjne    754d <check_path+0x116>\n    750a:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    7511:\tba 11 4a fe ca       \tmov    $0xcafe4a11,%edx\n    7516:\t48 39 d0             \tcmp    %rdx,%rax\n    7519:\t74 32                \tje     754d <check_path+0x116>\n    751b:\t48 8b 05 7e 9d 00 00 \tmov    0x9d7e(%rip),%rax        # 112a0 <__pr_warning>\n    7522:\t48 85 c0             \ttest   %rax,%rax\n    7525:\t74 1f                \tje     7546 <check_path+0x10f>\n    7527:\t48 8b 15 72 9d 00 00 \tmov    0x9d72(%rip),%rdx        # 112a0 <__pr_warning>\n    752e:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    7535:\t48 89 c6             \tmov    %rax,%rsi\n    7538:\t48 8d 3d e9 5d 00 00 \tlea    0x5de9(%rip),%rdi        # d328 <_fini+0x1d00>\n    753f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7544:\tff d2                \tcallq  *%rdx\n    7546:\tc7 45 ec ea ff ff ff \tmovl   $0xffffffea,-0x14(%rbp)\n    754d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    7550:\t48 81 c4 a8 00 00 00 \tadd    $0xa8,%rsp\n    7557:\t5b                   \tpop    %rbx\n    7558:\t5d                   \tpop    %rbp\n    7559:\tc3                   \tretq   ", "code_s": "__int64 __fastcall check_path(const char *a1) {\n  void (*v2)(const char *, __int64, __int64, __int64, __int64, __int64, ...);\n  int *v3;\n  char *v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  struct statfs <span class=\"supfact\">v8</span>;\n  char *file;\n  char *path;\n  unsigned int v11;\n  v11 = Number;\n  if (!a1)\n    return Number L;\n  path = strdup(a1);\n  if (!path)\n    return Number L;\n  file = dirname(path);\n  if (statfs(file, &<span class=\"supfact\">v8</span>)) {\n    if (_pr_warning) {\n      v2 = (void (*)(const char *, __int64, __int64, __int64, __int64, __int64,\n                     ...))_pr_warning;\n      v3 = __errno_location();\n      v4 = strerror(*v3);\n      v2(String, (__int64)file, (__int64)v4, v5, v6, v7);\n    }\n    v11 = -*__errno_location();\n  }\n  free(path);\n  if (!v11 && <span class=\"supfact\">v8</span>.f_type != Number L) {\n    if (_pr_warning)\n      _pr_warning(String, a1);\n    v11 = Number;\n  }\n  return v11;\n}", "code_t": "int __cdecl check_path(const char *path) {\n  void (*v2)(const char *, ...);\n  int *v3;\n  char *v4;\n  statfs <span class=\"supfact\">st_fs</span>;\n  char *dir;\n  char *dname;\n  int err;\n  err = Number;\n  if (!path)\n    return Number;\n  dname = strdup(path);\n  if (!dname)\n    return Number;\n  dir = dirname(dname);\n  if (statfs(dir, &<span class=\"supfact\">st_fs</span>)) {\n    if (_pr_warning) {\n      v2 = (void (*)(const char *, ...))_pr_warning;\n      v3 = __errno_location();\n      v4 = strerror(*v3);\n      v2(String, dir, v4);\n    }\n    err = -*__errno_location();\n  }\n  free(dname);\n  if (!err && <span class=\"supfact\">st_fs</span>.f_type != Number L) {\n    if (_pr_warning)\n      _pr_warning(String, path);\n    err = Number;\n  }\n  return err;\n}", "var": [{"name": "v8", "type": "struct statfs { __fsword_t f_type; __fsword_t f_bsize; __fsblkcnt_t f_blocks; __fsblkcnt_t f_bfree; __fsblkcnt_t f_bavail; __fsfilcnt_t f_files; __fsfilcnt_t f_ffree; __fsid_t f_fsid; __fsword_t f_namelen; __fsword_t f_frsize; __fsword_t f_flags; __fsword_t[4] f_spare; }", "ref_name": "st_fs", "ref_type": "struct statfs { __fsword_t f_type; __fsword_t f_bsize; __fsblkcnt_t f_blocks; __fsblkcnt_t f_bfree; __fsblkcnt_t f_bavail; __fsfilcnt_t f_files; __fsfilcnt_t f_ffree; __fsid_t f_fsid; __fsword_t f_namelen; __fsword_t f_frsize; __fsword_t f_flags; __fsword_t[4] f_spare; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d961f6bc761fa8fe561f8484f009dcf34d6d3887c0086cfd39f3f61b8516b5ee", "path_in_repo": "XanClic/qemu//xtensa-softmmu/hw/vfio/common.o", "objdump": "0000000000000e5d <_nocheck__trace_vfio_put_group>:\n     e5d:\t55                   \tpush   %rbp\n     e5e:\t48 89 e5             \tmov    %rsp,%rbp\n     e61:\t41 54                \tpush   %r12\n     e63:\t53                   \tpush   %rbx\n     e64:\t48 83 ec 30          \tsub    $0x30,%rsp\n     e68:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n     e6b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     e72:\t00 00 \n     e74:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     e78:\t31 c0                \txor    %eax,%eax\n     e7a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # e80 <_nocheck__trace_vfio_put_group+0x23>\n     e80:\t85 c0                \ttest   %eax,%eax\n     e82:\t0f 95 c0             \tsetne  %al\n     e85:\t0f b6 c0             \tmovzbl %al,%eax\n     e88:\t48 85 c0             \ttest   %rax,%rax\n     e8b:\t74 5d                \tje     eea <_nocheck__trace_vfio_put_group+0x8d>\n     e8d:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # e94 <_nocheck__trace_vfio_put_group+0x37>\n     e94:\t66 85 c0             \ttest   %ax,%ax\n     e97:\t74 51                \tje     eea <_nocheck__trace_vfio_put_group+0x8d>\n     e99:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     e9e:\te8 65 f6 ff ff       \tcallq  508 <qemu_loglevel_mask>\n     ea3:\t84 c0                \ttest   %al,%al\n     ea5:\t74 43                \tje     eea <_nocheck__trace_vfio_put_group+0x8d>\n     ea7:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     eab:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     eb0:\t48 89 c7             \tmov    %rax,%rdi\n     eb3:\te8 00 00 00 00       \tcallq  eb8 <_nocheck__trace_vfio_put_group+0x5b>\n     eb8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ebc:\t49 89 c4             \tmov    %rax,%r12\n     ebf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     ec3:\t48 89 c3             \tmov    %rax,%rbx\n     ec6:\te8 00 00 00 00       \tcallq  ecb <_nocheck__trace_vfio_put_group+0x6e>\n     ecb:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     ece:\t41 89 d0             \tmov    %edx,%r8d\n     ed1:\t4c 89 e1             \tmov    %r12,%rcx\n     ed4:\t48 89 da             \tmov    %rbx,%rdx\n     ed7:\t89 c6                \tmov    %eax,%esi\n     ed9:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # ee0 <_nocheck__trace_vfio_put_group+0x83>\n     ee0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ee5:\te8 00 00 00 00       \tcallq  eea <_nocheck__trace_vfio_put_group+0x8d>\n     eea:\t90                   \tnop\n     eeb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     eef:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     ef6:\t00 00 \n     ef8:\t74 05                \tje     eff <_nocheck__trace_vfio_put_group+0xa2>\n     efa:\te8 00 00 00 00       \tcallq  eff <_nocheck__trace_vfio_put_group+0xa2>\n     eff:\t48 83 c4 30          \tadd    $0x30,%rsp\n     f03:\t5b                   \tpop    %rbx\n     f04:\t41 5c                \tpop    %r12\n     f06:\t5d                   \tpop    %rbp\n     f07:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_vfio_put_group(unsigned int a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VFIO_PUT_GROUP_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl nocheck__trace_vfio_put_group(int fd) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VFIO_PUT_GROUP_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, (unsigned int)fd);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "githankH", "repo_name": "chromecast-mirrored-source.kernel", "path": "githankH/chromecast-mirrored-source.kernel/ee79e70e312a8f7662506be1136851096f09ead6e6d373514d3199ec67a3a43d", "path_in_repo": "githankH/chromecast-mirrored-source.kernel/linux-3.8/tools/firewire/nosy-dump", "objdump": "00000000004022f0 <set_input_mode>:\n  4022f0:\t55                   \tpush   %rbp\n  4022f1:\t48 89 e5             \tmov    %rsp,%rbp\n  4022f4:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4022f8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4022fd:\te8 6e ed ff ff       \tcallq  401070 <isatty@plt>\n  402302:\t85 c0                \ttest   %eax,%eax\n  402304:\t75 28                \tjne    40232e <set_input_mode+0x3e>\n  402306:\t48 8b 05 73 0f 01 00 \tmov    0x10f73(%rip),%rax        # 413280 <stderr@@GLIBC_2.2.5>\n  40230d:\t48 89 c1             \tmov    %rax,%rcx\n  402310:\tba 10 00 00 00       \tmov    $0x10,%edx\n  402315:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40231a:\tbf 5b 46 40 00       \tmov    $0x40465b,%edi\n  40231f:\te8 dc ee ff ff       \tcallq  401200 <fwrite@plt>\n  402324:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402329:\te8 c2 ee ff ff       \tcallq  4011f0 <exit@plt>\n  40232e:\tbe e0 32 41 00       \tmov    $0x4132e0,%esi\n  402333:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  402338:\te8 53 ee ff ff       \tcallq  401190 <tcgetattr@plt>\n  40233d:\tbf d5 22 40 00       \tmov    $0x4022d5,%edi\n  402342:\te8 d9 07 00 00       \tcallq  402b20 <atexit>\n  402347:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40234b:\t48 89 c6             \tmov    %rax,%rsi\n  40234e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  402353:\te8 38 ee ff ff       \tcallq  401190 <tcgetattr@plt>\n  402358:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  40235b:\t83 e0 f5             \tand    $0xfffffff5,%eax\n  40235e:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  402361:\tc6 45 d7 01          \tmovb   $0x1,-0x29(%rbp)\n  402365:\tc6 45 d6 00          \tmovb   $0x0,-0x2a(%rbp)\n  402369:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40236d:\t48 89 c2             \tmov    %rax,%rdx\n  402370:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  402375:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40237a:\te8 21 ee ff ff       \tcallq  4011a0 <tcsetattr@plt>\n  40237f:\t90                   \tnop\n  402380:\tc9                   \tleaveq \n  402381:\tc3                   \tretq   ", "code_s": "int set_input_mode() {\n  struct termios <span class=\"supfact\">termios_p</span>;\n  if (!isatty(Number)) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  tcgetattr(Number, &saved_attributes);\n  atexit(reset_input_mode);\n  tcgetattr(Number, &<span class=\"supfact\">termios_p</span>);\n  <span class=\"supfact\">termios_p</span>.c_lflag &= Number;\n  <span class=\"supfact\">termios_p</span>.c_cc[Number] = Number;\n  <span class=\"supfact\">termios_p</span>.c_cc[Number] = Number;\n  return tcsetattr(Number, Number, &<span class=\"supfact\">termios_p</span>);\n}", "code_t": "void __cdecl set_input_mode() {\n  termios <span class=\"supfact\">tattr</span>;\n  if (!isatty(Number)) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  tcgetattr(Number, &saved_attributes);\n  atexit(reset_input_mode);\n  tcgetattr(Number, &<span class=\"supfact\">tattr</span>);\n  <span class=\"supfact\">tattr</span>.c_lflag &= Number;\n  <span class=\"supfact\">tattr</span>.c_cc[Number] = Number;\n  <span class=\"supfact\">tattr</span>.c_cc[Number] = Number;\n  tcsetattr(Number, Number, &<span class=\"supfact\">tattr</span>);\n}", "var": [{"name": "termios_p", "type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }", "ref_name": "tattr", "ref_type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }"}], "body_in_train": true}, {"repo_owner": "jfdsmabalot", "repo_name": "kernel_mako", "path": "jfdsmabalot/kernel_mako/6ff8756e583b0935c49f9a391d93c7a84b0fee155de94ff03f245e87bb5d127f", "path_in_repo": "jfdsmabalot/kernel_mako/tools/power/cpupower/cpupower", "objdump": "000000000040587c <amd_fam14h_stop>:\n  40587c:\t55                   \tpush   %rbp\n  40587d:\t48 89 e5             \tmov    %rsp,%rbp\n  405880:\t53                   \tpush   %rbx\n  405881:\t48 83 ec 28          \tsub    $0x28,%rsp\n  405885:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  405889:\t48 89 c6             \tmov    %rax,%rsi\n  40588c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  405891:\te8 da ca ff ff       \tcallq  402370 <clock_gettime@plt>\n  405896:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  40589d:\teb 42                \tjmp    4058e1 <amd_fam14h_stop+0x65>\n  40589f:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  4058a6:\teb 2a                \tjmp    4058d2 <amd_fam14h_stop+0x56>\n  4058a8:\t8b 4d e8             \tmov    -0x18(%rbp),%ecx\n  4058ab:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4058ae:\t48 63 d0             \tmovslq %eax,%rdx\n  4058b1:\t48 89 d0             \tmov    %rdx,%rax\n  4058b4:\t48 01 c0             \tadd    %rax,%rax\n  4058b7:\t48 01 d0             \tadd    %rdx,%rax\n  4058ba:\t48 c1 e0 05          \tshl    $0x5,%rax\n  4058be:\t48 05 e0 16 41 00    \tadd    $0x4116e0,%rax\n  4058c4:\t89 ce                \tmov    %ecx,%esi\n  4058c6:\t48 89 c7             \tmov    %rax,%rdi\n  4058c9:\te8 03 fb ff ff       \tcallq  4053d1 <amd_fam14h_disable>\n  4058ce:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  4058d2:\t8b 05 60 cd 00 00    \tmov    0xcd60(%rip),%eax        # 412638 <cpu_count>\n  4058d8:\t39 45 e8             \tcmp    %eax,-0x18(%rbp)\n  4058db:\t7c cb                \tjl     4058a8 <amd_fam14h_stop+0x2c>\n  4058dd:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  4058e1:\t83 7d ec 03          \tcmpl   $0x3,-0x14(%rbp)\n  4058e5:\t7e b8                \tjle    40589f <amd_fam14h_stop+0x23>\n  4058e7:\tbe 40 26 41 00       \tmov    $0x412640,%esi\n  4058ec:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4058f1:\te8 7a ca ff ff       \tcallq  402370 <clock_gettime@plt>\n  4058f6:\t48 8b 05 43 cd 00 00 \tmov    0xcd43(%rip),%rax        # 412640 <dbg_time>\n  4058fd:\t48 8b 15 44 cd 00 00 \tmov    0xcd44(%rip),%rdx        # 412648 <dbg_time+0x8>\n  405904:\t48 8b 7d d0          \tmov    -0x30(%rbp),%rdi\n  405908:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n  40590c:\t48 89 d1             \tmov    %rdx,%rcx\n  40590f:\t48 89 c2             \tmov    %rax,%rdx\n  405912:\te8 c0 15 00 00       \tcallq  406ed7 <timespec_diff_us>\n  405917:\t48 89 05 42 cd 00 00 \tmov    %rax,0xcd42(%rip)        # 412660 <dbg_timediff>\n  40591e:\t8b 05 58 cd 00 00    \tmov    0xcd58(%rip),%eax        # 41267c <be_verbose>\n  405924:\t85 c0                \ttest   %eax,%eax\n  405926:\t74 28                \tje     405950 <amd_fam14h_stop+0xd4>\n  405928:\t48 8b 15 31 cd 00 00 \tmov    0xcd31(%rip),%rdx        # 412660 <dbg_timediff>\n  40592f:\t48 8b 05 8a c6 00 00 \tmov    0xc68a(%rip),%rax        # 411fc0 <stderr@@GLIBC_2.2.5>\n  405936:\t48 89 d1             \tmov    %rdx,%rcx\n  405939:\tba 80 c7 40 00       \tmov    $0x40c780,%edx\n  40593e:\tbe 68 c6 40 00       \tmov    $0x40c668,%esi\n  405943:\t48 89 c7             \tmov    %rax,%rdi\n  405946:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40594b:\te8 30 c9 ff ff       \tcallq  402280 <fprintf@plt>\n  405950:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  405954:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  405958:\t48 8b 3d f1 cc 00 00 \tmov    0xccf1(%rip),%rdi        # 412650 <start_time>\n  40595f:\t48 8b 35 f2 cc 00 00 \tmov    0xccf2(%rip),%rsi        # 412658 <start_time+0x8>\n  405966:\t48 89 d1             \tmov    %rdx,%rcx\n  405969:\t48 89 c2             \tmov    %rax,%rdx\n  40596c:\te8 66 15 00 00       \tcallq  406ed7 <timespec_diff_us>\n  405971:\t48 89 05 40 c7 00 00 \tmov    %rax,0xc740(%rip)        # 4120b8 <timediff>\n  405978:\t48 8b 05 39 c7 00 00 \tmov    0xc739(%rip),%rax        # 4120b8 <timediff>\n  40597f:\t48 3d af e3 7a 14    \tcmp    $0x147ae3af,%rax\n  405985:\t76 41                \tjbe    4059c8 <amd_fam14h_stop+0x14c>\n  405987:\t48 8b 05 2a c7 00 00 \tmov    0xc72a(%rip),%rax        # 4120b8 <timediff>\n  40598e:\t89 c0                \tmov    %eax,%eax\n  405990:\t48 69 c0 83 de 1b 43 \timul   $0x431bde83,%rax,%rax\n  405997:\t48 c1 e8 20          \tshr    $0x20,%rax\n  40599b:\t89 c3                \tmov    %eax,%ebx\n  40599d:\tc1 eb 12             \tshr    $0x12,%ebx\n  4059a0:\tbf 90 c6 40 00       \tmov    $0x40c690,%edi\n  4059a5:\te8 d6 c7 ff ff       \tcallq  402180 <gettext@plt>\n  4059aa:\t48 89 c6             \tmov    %rax,%rsi\n  4059ad:\t48 8b 05 0c c6 00 00 \tmov    0xc60c(%rip),%rax        # 411fc0 <stderr@@GLIBC_2.2.5>\n  4059b4:\tb9 57 01 00 00       \tmov    $0x157,%ecx\n  4059b9:\t89 da                \tmov    %ebx,%edx\n  4059bb:\t48 89 c7             \tmov    %rax,%rdi\n  4059be:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4059c3:\te8 b8 c8 ff ff       \tcallq  402280 <fprintf@plt>\n  4059c8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4059cd:\t48 83 c4 28          \tadd    $0x28,%rsp\n  4059d1:\t5b                   \tpop    %rbx\n  4059d2:\t5d                   \tpop    %rbp\n  4059d3:\tc3                   \tretq   ", "code_s": "__int64 amd_fam14h_stop() {\n  unsigned int v0;\n  char *v1;\n  struct timespec <span class=\"supfact\">tp</span>;\n  signed int j;\n  int i;\n  clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n  for (i = Number; i <= Number; ++i) {\n    for (j = Number; j < cpu_count; ++j)\n      amd_fam14h_disable((int *)(Number L * i + Number), j);\n  }\n  clock_gettime(Number, &dbg_time);\n  dbg_timediff =\n      timespec_diff_us(<span class=\"supfact\">tp</span>.tv_sec, <span class=\"supfact\">tp</span>.tv_nsec,\n                       dbg_time.tv_sec, dbg_time.tv_nsec);\n  if (be_verbose)\n    fprintf(stderr, String, String, dbg_timediff);\n  timediff =\n      timespec_diff_us(start_time.tv_sec, start_time.tv_nsec,\n                       <span class=\"supfact\">tp</span>.tv_sec, <span class=\"supfact\">tp</span>.tv_nsec);\n  if ((unsigned __int64)timediff > Number) {\n    v0 = (unsigned int)timediff / Number;\n    v1 = gettext(String);\n    fprintf(stderr, v1, v0, Number L);\n  }\n  return Number L;\n}", "code_t": "int __cdecl amd_fam14h_stop() {\n  unsigned int v0;\n  char *v1;\n  timespec <span class=\"supfact\">end_time</span>;\n  int cpu;\n  int num;\n  clock_gettime(Number, &<span class=\"supfact\">end_time</span>);\n  for (num = Number; num <= Number; ++num) {\n    for (cpu = Number; cpu < cpu_count; ++cpu)\n      amd_fam14h_disable((cstate_t *)(Number L * num + Number), cpu);\n  }\n  clock_gettime(Number, &dbg_time);\n  dbg_timediff = timespec_diff_us(<span class=\"supfact\">end_time</span>, dbg_time);\n  if (be_verbose)\n    fprintf(stderr, String, String, dbg_timediff);\n  timediff = timespec_diff_us(start_time, <span class=\"supfact\">end_time</span>);\n  if (timediff > Number) {\n    v0 = (unsigned int)timediff / Number;\n    v1 = gettext(String);\n    fprintf(stderr, v1, v0, Number L);\n  }\n  return Number;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "end_time", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "neo9ree", "repo_name": "LITMUS_RT_WITH_HMP", "path": "neo9ree/LITMUS_RT_WITH_HMP/740935168eb8bd624bc095bd5f43902ec38afc72c70512e1df4be0407f2ee9f8", "path_in_repo": "neo9ree/LITMUS_RT_WITH_HMP/backports/drivers/realtek/rtl8188eu/hostapd-0.8/src/tls/bignum.o", "objdump": "0000000000000685 <mp_mulmod>:\n     685:\t55                   \tpush   %rbp\n     686:\t48 89 e5             \tmov    %rsp,%rbp\n     689:\t48 83 ec 40          \tsub    $0x40,%rsp\n     68d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     691:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     695:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     699:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n     69d:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     6a1:\t48 89 c7             \tmov    %rax,%rdi\n     6a4:\te8 cd fc ff ff       \tcallq  376 <mp_init>\n     6a9:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     6ac:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     6b0:\t74 05                \tje     6b7 <mp_mulmod+0x32>\n     6b2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     6b5:\teb 5a                \tjmp    711 <mp_mulmod+0x8c>\n     6b7:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     6bb:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     6bf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6c3:\t48 89 ce             \tmov    %rcx,%rsi\n     6c6:\t48 89 c7             \tmov    %rax,%rdi\n     6c9:\te8 42 ff ff ff       \tcallq  610 <mp_mul>\n     6ce:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     6d1:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     6d5:\t74 11                \tje     6e8 <mp_mulmod+0x63>\n     6d7:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     6db:\t48 89 c7             \tmov    %rax,%rdi\n     6de:\te8 1e fd ff ff       \tcallq  401 <mp_clear>\n     6e3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     6e6:\teb 29                \tjmp    711 <mp_mulmod+0x8c>\n     6e8:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n     6ec:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n     6f0:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     6f4:\t48 89 ce             \tmov    %rcx,%rsi\n     6f7:\t48 89 c7             \tmov    %rax,%rdi\n     6fa:\te8 14 00 00 00       \tcallq  713 <mp_mod>\n     6ff:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     702:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     706:\t48 89 c7             \tmov    %rax,%rdi\n     709:\te8 f3 fc ff ff       \tcallq  401 <mp_clear>\n     70e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     711:\tc9                   \tleaveq \n     712:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mp_mulmod(_DWORD *a1, _DWORD *a2, __int64 a3, __int64 a4) {\n  int <span class=\"supfact\">v7</span>[Number];\n  unsigned int v8;\n  v8 = mp_init((__int64)<span class=\"supfact\">v7</span>);\n  if (v8)\n    return v8;\n  v8 = mp_mul(a1, a2, <span class=\"supfact\">v7</span>);\n  if (!v8)\n    v8 = mp_mod(<span class=\"supfact\">v7</span>, a3, a4);\n  mp_clear((__int64)<span class=\"supfact\">v7</span>);\n  return v8;\n}", "code_t": "int __cdecl mp_mulmod(mp_int *a, mp_int *b, mp_int *c, mp_int *d) {\n  mp_int <span class=\"supfact\">t</span>;\n  int res;\n  res = mp_init(&<span class=\"supfact\">t</span>);\n  if (res)\n    return res;\n  res = mp_mul(a, b, &<span class=\"supfact\">t</span>);\n  if (!res)\n    res = mp_mod(&<span class=\"supfact\">t</span>, c, d);\n  mp_clear(&<span class=\"supfact\">t</span>);\n  return res;\n}", "var": [{"name": "v7", "type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }", "ref_name": "t", "ref_type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }"}], "body_in_train": true}, {"repo_owner": "DIYBookScanner", "repo_name": "chdk", "path": "DIYBookScanner/chdk/57034d64aae7ab741f85de20f66efe71fb4a18a6f256a7039364fc73ce0a0af1", "path_in_repo": "DIYBookScanner/chdk/chdk/tools/hostlua/luac", "objdump": "0000000000403bf3 <lua_getfield>:\n  403bf3:\t55                   \tpush   %rbp\n  403bf4:\t48 89 e5             \tmov    %rsp,%rbp\n  403bf7:\t48 83 ec 40          \tsub    $0x40,%rsp\n  403bfb:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  403bff:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  403c02:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  403c06:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  403c09:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403c0d:\t89 d6                \tmov    %edx,%esi\n  403c0f:\t48 89 c7             \tmov    %rax,%rdi\n  403c12:\te8 6e eb ff ff       \tcallq  402785 <index2adr>\n  403c17:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  403c1b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  403c1f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  403c23:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  403c27:\t48 89 c7             \tmov    %rax,%rdi\n  403c2a:\te8 71 d4 ff ff       \tcallq  4010a0 <strlen@plt>\n  403c2f:\t48 89 c2             \tmov    %rax,%rdx\n  403c32:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  403c36:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403c3a:\t48 89 ce             \tmov    %rcx,%rsi\n  403c3d:\t48 89 c7             \tmov    %rax,%rdi\n  403c40:\te8 a8 c3 00 00       \tcallq  40ffed <luaS_newlstr>\n  403c45:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  403c49:\t48 89 02             \tmov    %rax,(%rdx)\n  403c4c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  403c50:\tc7 40 08 04 00 00 00 \tmovl   $0x4,0x8(%rax)\n  403c57:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403c5b:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n  403c5f:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  403c63:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n  403c67:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403c6b:\t48 89 c7             \tmov    %rax,%rdi\n  403c6e:\te8 ec ec 00 00       \tcallq  41295f <luaV_gettable>\n  403c73:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403c77:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  403c7b:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n  403c7f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403c83:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  403c87:\t90                   \tnop\n  403c88:\tc9                   \tleaveq \n  403c89:\tc3                   \tretq   ", "code_s": "__int64 __fastcall lua_getfield(__int64 a1, int a2, const char *a3) {\n  size_t v3;\n  __int64 v4;\n  __int64 result;\n  char <span class=\"supfact\">v7</span>[Number];\n  char *v8;\n  void *v9;\n  v9 = index2adr(a1, a2);\n  v8 = <span class=\"supfact\">v7</span>;\n  v3 = strlen(a3);\n  v4 = luaS_newlstr(a1, a3, v3);\n  *(_QWORD *)v8 = v4;\n  *((_DWORD *)v8 + Number) = Number;\n  luaV_gettable(a1, v9, <span class=\"supfact\">v7</span>, *(_QWORD *)(a1 + Number));\n  result = a1;\n  *(_QWORD *)(a1 + Number) += Number L;\n  return result;\n}", "code_t": "void __cdecl lua_getfield(lua_State_0 *L, int idx, const char *k) {\n  size_t v3;\n  TString_0 *v4;\n  TValue <span class=\"supfact\">key</span>;\n  TValue *i_o;\n  StkId t;\n  t = index2adr(L, idx);\n  i_o = &<span class=\"supfact\">key</span>;\n  v3 = strlen(k);\n  v4 = luaS_newlstr(L, k, v3);\n  i_o->value.gc = (GCObject_0 *)v4;\n  i_o->tt = Number;\n  luaV_gettable(L, t, &<span class=\"supfact\">key</span>, L->top);\n  ++L->top;\n}", "var": [{"name": "v7", "type": "struct TValue { Value value; int tt; PADDING (4); }", "ref_name": "key", "ref_type": "struct TValue { Value value; int tt; PADDING (4); }"}], "body_in_train": true}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/202a445d8e651d81d31c756aa9045ecff7a8f2f37851348495106510a18f79dd", "path_in_repo": "madeye/GRACE/coremu-0.1.1/qemu/bt-hci.o", "objdump": "0000000000002c55 <bt_hci_event_complete_read_inquiry_mode>:\n    2c55:\t55                   \tpush   %rbp\n    2c56:\t48 89 e5             \tmov    %rsp,%rbp\n    2c59:\t48 83 ec 20          \tsub    $0x20,%rsp\n    2c5d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    2c61:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2c68:\t00 00 \n    2c6a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2c6e:\t31 c0                \txor    %eax,%eax\n    2c70:\tc6 45 f6 00          \tmovb   $0x0,-0xa(%rbp)\n    2c74:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c78:\t8b 80 58 11 00 00    \tmov    0x1158(%rax),%eax\n    2c7e:\t88 45 f7             \tmov    %al,-0x9(%rbp)\n    2c81:\t48 8d 4d f6          \tlea    -0xa(%rbp),%rcx\n    2c85:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c89:\tba 02 00 00 00       \tmov    $0x2,%edx\n    2c8e:\t48 89 ce             \tmov    %rcx,%rsi\n    2c91:\t48 89 c7             \tmov    %rax,%rdi\n    2c94:\te8 e1 d6 ff ff       \tcallq  37a <bt_hci_event_complete>\n    2c99:\t90                   \tnop\n    2c9a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2c9e:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    2ca5:\t00 00 \n    2ca7:\t74 05                \tje     2cae <bt_hci_event_complete_read_inquiry_mode+0x59>\n    2ca9:\te8 00 00 00 00       \tcallq  2cae <bt_hci_event_complete_read_inquiry_mode+0x59>\n    2cae:\tc9                   \tleaveq \n    2caf:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall bt_hci_event_complete_read_inquiry_mode(\n    __int64 a1) {\n  char <span class=\"supfact\">v2</span>[Number];\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  <span class=\"supfact\">v2</span>[Number] = Number;\n  <span class=\"supfact\">v2</span>[Number] = *(_DWORD *)(a1 + Number);\n  bt_hci_event_complete(a1, <span class=\"supfact\">v2</span>, Number);\n  return __readfsqword(Number) ^ v3;\n}", "code_t": "void __cdecl bt_hci_event_complete_read_inquiry_mode(bt_hci_s *hci) {\n  read_inquiry_mode_rp <span class=\"supfact\">params</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  <span class=\"supfact\">params</span>.status = Number;\n  <span class=\"supfact\">params</span>.mode = hci->lm.inquiry_mode;\n  bt_hci_event_complete(hci, &<span class=\"supfact\">params</span>, Number);\n}", "var": [{"name": "v2", "type": "struct read_inquiry_mode_rp { uint8_t status; uint8_t mode; }", "ref_name": "params", "ref_type": "struct read_inquiry_mode_rp { uint8_t status; uint8_t mode; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d4a3e7148b67bff6fe668513f6b0b311eb206e1822da210277eb341beb1dc43d", "path_in_repo": "XanClic/qemu//arm-softmmu/hw/arm/smmuv3.o", "objdump": "0000000000002084 <_nocheck__trace_smmuv3_config_cache_inv>:\n    2084:\t55                   \tpush   %rbp\n    2085:\t48 89 e5             \tmov    %rsp,%rbp\n    2088:\t41 54                \tpush   %r12\n    208a:\t53                   \tpush   %rbx\n    208b:\t48 83 ec 30          \tsub    $0x30,%rsp\n    208f:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    2092:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2099:\t00 00 \n    209b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    209f:\t31 c0                \txor    %eax,%eax\n    20a1:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 20a7 <_nocheck__trace_smmuv3_config_cache_inv+0x23>\n    20a7:\t85 c0                \ttest   %eax,%eax\n    20a9:\t0f 95 c0             \tsetne  %al\n    20ac:\t0f b6 c0             \tmovzbl %al,%eax\n    20af:\t48 85 c0             \ttest   %rax,%rax\n    20b2:\t74 5d                \tje     2111 <_nocheck__trace_smmuv3_config_cache_inv+0x8d>\n    20b4:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 20bb <_nocheck__trace_smmuv3_config_cache_inv+0x37>\n    20bb:\t66 85 c0             \ttest   %ax,%ax\n    20be:\t74 51                \tje     2111 <_nocheck__trace_smmuv3_config_cache_inv+0x8d>\n    20c0:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    20c5:\te8 87 e2 ff ff       \tcallq  351 <qemu_loglevel_mask>\n    20ca:\t84 c0                \ttest   %al,%al\n    20cc:\t74 43                \tje     2111 <_nocheck__trace_smmuv3_config_cache_inv+0x8d>\n    20ce:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    20d2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    20d7:\t48 89 c7             \tmov    %rax,%rdi\n    20da:\te8 00 00 00 00       \tcallq  20df <_nocheck__trace_smmuv3_config_cache_inv+0x5b>\n    20df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    20e3:\t49 89 c4             \tmov    %rax,%r12\n    20e6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    20ea:\t48 89 c3             \tmov    %rax,%rbx\n    20ed:\te8 00 00 00 00       \tcallq  20f2 <_nocheck__trace_smmuv3_config_cache_inv+0x6e>\n    20f2:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    20f5:\t41 89 d0             \tmov    %edx,%r8d\n    20f8:\t4c 89 e1             \tmov    %r12,%rcx\n    20fb:\t48 89 da             \tmov    %rbx,%rdx\n    20fe:\t89 c6                \tmov    %eax,%esi\n    2100:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2107 <_nocheck__trace_smmuv3_config_cache_inv+0x83>\n    2107:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    210c:\te8 00 00 00 00       \tcallq  2111 <_nocheck__trace_smmuv3_config_cache_inv+0x8d>\n    2111:\t90                   \tnop\n    2112:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2116:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    211d:\t00 00 \n    211f:\t74 05                \tje     2126 <_nocheck__trace_smmuv3_config_cache_inv+0xa2>\n    2121:\te8 00 00 00 00       \tcallq  2126 <_nocheck__trace_smmuv3_config_cache_inv+0xa2>\n    2126:\t48 83 c4 30          \tadd    $0x30,%rsp\n    212a:\t5b                   \tpop    %rbx\n    212b:\t41 5c                \tpop    %r12\n    212d:\t5d                   \tpop    %rbp\n    212e:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_smmuv3_config_cache_inv(\n    unsigned int a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_CONFIG_CACHE_INV_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl nocheck__trace_smmuv3_config_cache_inv(uint32_t sid) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_CONFIG_CACHE_INV_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, sid);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "mstoilov", "repo_name": "rpatk", "path": "mstoilov/rpatk/37ec2e0abc2a46bb09cdfda162c9811549ab1149b5f4a1b73dc526bed4ef4835", "path_in_repo": "mstoilov/rpatk/rvm/build/unix/arm/out/librvm.so.2.0", "objdump": "000000000000d1a2 <rvm_reg_create_signed>:\n    d1a2:\t55                   \tpush   %rbp\n    d1a3:\t48 89 e5             \tmov    %rsp,%rbp\n    d1a6:\t48 83 ec 20          \tsub    $0x20,%rsp\n    d1aa:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    d1ae:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    d1b2:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n    d1b6:\t48 89 d6             \tmov    %rdx,%rsi\n    d1b9:\t48 89 c7             \tmov    %rax,%rdi\n    d1bc:\te8 0f 71 ff ff       \tcallq  42d0 <rvm_reg_setsigned@plt>\n    d1c1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    d1c5:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    d1c9:\tc9                   \tleaveq \n    d1ca:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rvm_reg_create_signed(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  rvm_reg_setsigned(&<span class=\"supfact\">v2</span>, a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "rvmreg_t __cdecl rvm_reg_create_signed(rword l) {\n  rvmreg_t <span class=\"supfact\">r</span>;\n  rvm_reg_setsigned(&<span class=\"supfact\">r</span>, l);\n  return <span class=\"supfact\">r</span>;\n}", "var": [{"name": "v2", "type": "struct rvmreg_t { $8B83D36BBA2B5A9DA35EC761161D149E v; ruint32 size; rvmreg_type_t type; rvmreg_flags_t flags; }", "ref_name": "r", "ref_type": "struct rvmreg_t { $8B83D36BBA2B5A9DA35EC761161D149E v; ruint32 size; rvmreg_type_t type; rvmreg_flags_t flags; }"}], "body_in_train": false}, {"repo_owner": "cheehongsg", "repo_name": "CPU", "path": "cheehongsg/CPU/f20954972ddb22d64eb4dc7421da2f6bcc8ed328ddab76f1be7b082c1cdbbebc", "path_in_repo": "cheehongsg/CPU/source/kopen.o", "objdump": "0000000000000000 <socket_wait>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n       b:\t89 bd 4c ff ff ff    \tmov    %edi,-0xb4(%rbp)\n      11:\t89 b5 48 ff ff ff    \tmov    %esi,-0xb8(%rbp)\n      17:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n      1e:\t00 \n      1f:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n      26:\t00 \n      27:\t48 c7 85 50 ff ff ff \tmovq   $0x5,-0xb0(%rbp)\n      2e:\t05 00 00 00 \n      32:\t48 c7 85 58 ff ff ff \tmovq   $0x0,-0xa8(%rbp)\n      39:\t00 00 00 00 \n      3d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      42:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n      47:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n      4e:\t48 89 d7             \tmov    %rdx,%rdi\n      51:\tfc                   \tcld    \n      52:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n      55:\t89 f8                \tmov    %edi,%eax\n      57:\t89 ca                \tmov    %ecx,%edx\n      59:\t89 55 ec             \tmov    %edx,-0x14(%rbp)\n      5c:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n      5f:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n      65:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n      68:\t85 c0                \ttest   %eax,%eax\n      6a:\t0f 48 c2             \tcmovs  %edx,%eax\n      6d:\tc1 f8 06             \tsar    $0x6,%eax\n      70:\t89 c6                \tmov    %eax,%esi\n      72:\t48 63 c6             \tmovslq %esi,%rax\n      75:\t48 8b bc c5 60 ff ff \tmov    -0xa0(%rbp,%rax,8),%rdi\n      7c:\tff \n      7d:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n      83:\t99                   \tcltd   \n      84:\tc1 ea 1a             \tshr    $0x1a,%edx\n      87:\t01 d0                \tadd    %edx,%eax\n      89:\t83 e0 3f             \tand    $0x3f,%eax\n      8c:\t29 d0                \tsub    %edx,%eax\n      8e:\tba 01 00 00 00       \tmov    $0x1,%edx\n      93:\t89 c1                \tmov    %eax,%ecx\n      95:\t48 d3 e2             \tshl    %cl,%rdx\n      98:\t48 89 d0             \tmov    %rdx,%rax\n      9b:\t48 09 c7             \tor     %rax,%rdi\n      9e:\t48 89 fa             \tmov    %rdi,%rdx\n      a1:\t48 63 c6             \tmovslq %esi,%rax\n      a4:\t48 89 94 c5 60 ff ff \tmov    %rdx,-0xa0(%rbp,%rax,8)\n      ab:\tff \n      ac:\t83 bd 48 ff ff ff 00 \tcmpl   $0x0,-0xb8(%rbp)\n      b3:\t74 0d                \tje     c2 <socket_wait+0xc2>\n      b5:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n      bc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      c0:\teb 0b                \tjmp    cd <socket_wait+0xcd>\n      c2:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n      c9:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n      cd:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n      d3:\t8d 78 01             \tlea    0x1(%rax),%edi\n      d6:\t48 8d 8d 50 ff ff ff \tlea    -0xb0(%rbp),%rcx\n      dd:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n      e1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      e5:\t49 89 c8             \tmov    %rcx,%r8\n      e8:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n      ed:\t48 89 c6             \tmov    %rax,%rsi\n      f0:\te8 00 00 00 00       \tcallq  f5 <socket_wait+0xf5>\n      f5:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n      f8:\t83 7d e4 ff          \tcmpl   $0xffffffff,-0x1c(%rbp)\n      fc:\t75 0a                \tjne    108 <socket_wait+0x108>\n      fe:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     103:\te8 00 00 00 00       \tcallq  108 <socket_wait+0x108>\n     108:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     10b:\tc9                   \tleaveq \n     10c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall socket_wait(int a1, int a2) {\n  struct timeval <span class=\"supfact\">timeout</span>;\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  __int64 v5;\n  unsigned int v6;\n  int v7;\n  fd_set *writefds;\n  fd_set *readfds;\n  readfds = Number L;\n  writefds = Number L;\n  <span class=\"supfact\">timeout</span>.tv_sec = Number L;\n  <span class=\"supfact\">timeout</span>.tv_usec = Number L;\n  memset(<span class=\"supfact\">v4</span>, Number, sizeof(<span class=\"supfact\">v4</span>));\n  v7 = Number;\n  v6 = (unsigned int)&v5;\n  <span class=\"supfact\">v4</span>[a1 / Number] |= Number L << (a1 % Number);\n  if (a2)\n    readfds = (fd_set *)<span class=\"supfact\">v4</span>;\n  else\n    writefds = (fd_set *)<span class=\"supfact\">v4</span>;\n  HIDWORD(v5) = select(a1 + Number, readfds, writefds, Number L,\n                       &<span class=\"supfact\">timeout</span>);\n  if (HIDWORD(v5) == Number)\n    perror(String);\n  return HIDWORD(v5);\n}", "code_t": "int __cdecl socket_wait(int fd, int is_read) {\n  timeval <span class=\"supfact\">tv</span>;\n  fd_set <span class=\"supfact\">fds</span>;\n  __int64 v5;\n  int __d1;\n  int __d0;\n  fd_set *fdw;\n  fd_set *fdr;\n  fdr = Number L;\n  fdw = Number L;\n  <span class=\"supfact\">tv</span>.tv_sec = Number L;\n  <span class=\"supfact\">tv</span>.tv_usec = Number L;\n  memset(&<span class=\"supfact\">fds</span>, Number, sizeof(<span class=\"supfact\">fds</span>));\n  __d0 = Number;\n  __d1 = (unsigned int)&v5;\n  <span class=\"supfact\">fds</span>.__fds_bits[fd / Number] |= Number L << (fd % Number);\n  if (is_read)\n    fdr = &<span class=\"supfact\">fds</span>;\n  else\n    fdw = &<span class=\"supfact\">fds</span>;\n  HIDWORD(v5) = select(fd + Number, fdr, fdw, Number L, &<span class=\"supfact\">tv</span>);\n  if (HIDWORD(v5) == Number)\n    perror(String);\n  return HIDWORD(v5);\n}", "var": [{"name": "v4", "type": "struct fd_set { __fd_mask[16] __fds_bits; }", "ref_name": "fds", "ref_type": "struct fd_set { __fd_mask[16] __fds_bits; }"}, {"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "tvcutsem", "repo_name": "schemeken", "path": "tvcutsem/schemeken/dec6015a6e4da68fc922aa47cb9fa0ac618c08434148339508aee153a791ac6c", "path_in_repo": "tvcutsem/schemeken//build/kencom.o", "objdump": "00000000000000f4 <i_ken_set_SIGCHLD_handler>:\n      f4:\t55                   \tpush   %rbp\n      f5:\t48 89 e5             \tmov    %rsp,%rbp\n      f8:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n      ff:\t48 c7 85 60 ff ff ff \tmovq   $0x0,-0xa0(%rbp)\n     106:\t00 00 00 00 \n     10a:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n     111:\t48 83 c0 08          \tadd    $0x8,%rax\n     115:\t48 89 c7             \tmov    %rax,%rdi\n     118:\te8 00 00 00 00       \tcallq  11d <i_ken_set_SIGCHLD_handler+0x29>\n     11d:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     120:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     124:\t74 19                \tje     13f <i_ken_set_SIGCHLD_handler+0x4b>\n     126:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     12b:\tba 48 00 00 00       \tmov    $0x48,%edx\n     130:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     135:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     13a:\te8 00 00 00 00       \tcallq  13f <i_ken_set_SIGCHLD_handler+0x4b>\n     13f:\tc7 45 e8 01 00 00 00 \tmovl   $0x1,-0x18(%rbp)\n     146:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n     14d:\tba 00 00 00 00       \tmov    $0x0,%edx\n     152:\t48 89 c6             \tmov    %rax,%rsi\n     155:\tbf 11 00 00 00       \tmov    $0x11,%edi\n     15a:\te8 00 00 00 00       \tcallq  15f <i_ken_set_SIGCHLD_handler+0x6b>\n     15f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     162:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     166:\t74 19                \tje     181 <i_ken_set_SIGCHLD_handler+0x8d>\n     168:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     16d:\tba 4a 00 00 00       \tmov    $0x4a,%edx\n     172:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     177:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     17c:\te8 00 00 00 00       \tcallq  181 <i_ken_set_SIGCHLD_handler+0x8d>\n     181:\t90                   \tnop\n     182:\tc9                   \tleaveq \n     183:\tc3                   \tretq   ", "code_s": "int i_ken_set_SIGCHLD_handler() {\n  int result;\n  struct sigaction <span class=\"supfact\">v1</span>;\n  int v2;\n  <span class=\"supfact\">v1</span>.sa_handler = (__sighandler_t)i_ken_SIGCHLD_handler;\n  v2 = sigemptyset(&<span class=\"supfact\">v1</span>.sa_mask);\n  if (v2)\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v1</span>.sa_flags = Number;\n  result = sigaction(Number, &<span class=\"supfact\">v1</span>, Number L);\n  v2 = result;\n  if (result)\n    _assert_fail(String, String, Number, String);\n  return result;\n}", "code_t": "void __cdecl i_ken_set_SIGCHLD_handler() {\n  sigaction <span class=\"supfact\">sa</span>;\n  int r;\n  <span class=\"supfact\">sa</span>.sa_handler = (__sighandler_t)i_ken_SIGCHLD_handler;\n  r = sigemptyset(&<span class=\"supfact\">sa</span>.sa_mask);\n  if (r)\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">sa</span>.sa_flags = Number;\n  r = sigaction_0(Number, &<span class=\"supfact\">sa</span>, Number L);\n  if (r)\n    _assert_fail(String, String, Number, String);\n}", "var": [{"name": "v1", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "sa", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "00000000000011b7 <_nocheck__trace_megasas_qf_complete_noirq>:\n    11b7:\t55                   \tpush   %rbp\n    11b8:\t48 89 e5             \tmov    %rsp,%rbp\n    11bb:\t41 54                \tpush   %r12\n    11bd:\t53                   \tpush   %rbx\n    11be:\t48 83 ec 30          \tsub    $0x30,%rsp\n    11c2:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    11c6:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    11cd:\t00 00 \n    11cf:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    11d3:\t31 c0                \txor    %eax,%eax\n    11d5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 11db <_nocheck__trace_megasas_qf_complete_noirq+0x24>\n    11db:\t85 c0                \ttest   %eax,%eax\n    11dd:\t0f 95 c0             \tsetne  %al\n    11e0:\t0f b6 c0             \tmovzbl %al,%eax\n    11e3:\t48 85 c0             \ttest   %rax,%rax\n    11e6:\t74 5e                \tje     1246 <_nocheck__trace_megasas_qf_complete_noirq+0x8f>\n    11e8:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 11ef <_nocheck__trace_megasas_qf_complete_noirq+0x38>\n    11ef:\t66 85 c0             \ttest   %ax,%ax\n    11f2:\t74 52                \tje     1246 <_nocheck__trace_megasas_qf_complete_noirq+0x8f>\n    11f4:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    11f9:\te8 2f f6 ff ff       \tcallq  82d <qemu_loglevel_mask>\n    11fe:\t84 c0                \ttest   %al,%al\n    1200:\t74 44                \tje     1246 <_nocheck__trace_megasas_qf_complete_noirq+0x8f>\n    1202:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1206:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    120b:\t48 89 c7             \tmov    %rax,%rdi\n    120e:\te8 00 00 00 00       \tcallq  1213 <_nocheck__trace_megasas_qf_complete_noirq+0x5c>\n    1213:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1217:\t49 89 c4             \tmov    %rax,%r12\n    121a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    121e:\t48 89 c3             \tmov    %rax,%rbx\n    1221:\te8 00 00 00 00       \tcallq  1226 <_nocheck__trace_megasas_qf_complete_noirq+0x6f>\n    1226:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    122a:\t49 89 d0             \tmov    %rdx,%r8\n    122d:\t4c 89 e1             \tmov    %r12,%rcx\n    1230:\t48 89 da             \tmov    %rbx,%rdx\n    1233:\t89 c6                \tmov    %eax,%esi\n    1235:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 123c <_nocheck__trace_megasas_qf_complete_noirq+0x85>\n    123c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1241:\te8 00 00 00 00       \tcallq  1246 <_nocheck__trace_megasas_qf_complete_noirq+0x8f>\n    1246:\t90                   \tnop\n    1247:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    124b:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1252:\t00 00 \n    1254:\t74 05                \tje     125b <_nocheck__trace_megasas_qf_complete_noirq+0xa4>\n    1256:\te8 00 00 00 00       \tcallq  125b <_nocheck__trace_megasas_qf_complete_noirq+0xa4>\n    125b:\t48 83 c4 30          \tadd    $0x30,%rsp\n    125f:\t5b                   \tpop    %rbx\n    1260:\t41 5c                \tpop    %r12\n    1262:\t5d                   \tpop    %rbp\n    1263:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_qf_complete_noirq(\n    __int64 a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_QF_COMPLETE_NOIRQ_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl nocheck__trace_megasas_qf_complete_noirq(uint64_t context) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_QF_COMPLETE_NOIRQ_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, context);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "makinacorpus", "repo_name": "libecw", "path": "makinacorpus/libecw/297838552d1e5420558ee65f63067dcc2967d31df01656a4e022561f8f898391", "path_in_repo": "makinacorpus/libecw//Source/NCSBuildGnu/.libs/NCSJPCMemoryIOStream.o", "objdump": "0000000000000260 <_ZN21CNCSJPCMemoryIOStream4ReadEPvj>:\n 260:\t41 54                \tpush   %r12\n 262:\t55                   \tpush   %rbp\n 263:\t53                   \tpush   %rbx\n 264:\t48 89 fb             \tmov    %rdi,%rbx\n 267:\t48 83 ec 20          \tsub    $0x20,%rsp\n 26b:\t48 8b 47 50          \tmov    0x50(%rdi),%rax\n 26f:\t8b 6f 68             \tmov    0x68(%rdi),%ebp\n 272:\t48 39 e8             \tcmp    %rbp,%rax\n 275:\t0f 8d a5 00 00 00    \tjge    320 <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0xc0>\n 27b:\t48 89 f7             \tmov    %rsi,%rdi\n 27e:\t48 8b 73 60          \tmov    0x60(%rbx),%rsi\n 282:\t41 89 d4             \tmov    %edx,%r12d\n 285:\t48 01 c6             \tadd    %rax,%rsi\n 288:\t83 fa 01             \tcmp    $0x1,%edx\n 28b:\t74 73                \tje     300 <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0xa0>\n 28d:\t48 29 c5             \tsub    %rax,%rbp\n 290:\t89 d0                \tmov    %edx,%eax\n 292:\t48 39 c5             \tcmp    %rax,%rbp\n 295:\t48 0f 4f e8          \tcmovg  %rax,%rbp\n 299:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 29e:\t48 85 ed             \ttest   %rbp,%rbp\n 2a1:\t48 0f 48 e8          \tcmovs  %rax,%rbp\n 2a5:\t48 89 ea             \tmov    %rbp,%rdx\n 2a8:\te8 00 00 00 00       \tcallq  2ad <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0x4d>\n 2ad:\t48 01 6b 50          \tadd    %rbp,0x50(%rbx)\n 2b1:\t41 39 ec             \tcmp    %ebp,%r12d\n 2b4:\t0f 84 96 00 00 00    \tje     350 <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0xf0>\n 2ba:\t48 89 e5             \tmov    %rsp,%rbp\n 2bd:\tbe 2f 00 00 00       \tmov    $0x2f,%esi\n 2c2:\t45 31 c9             \txor    %r9d,%r9d\n 2c5:\t31 c9                \txor    %ecx,%ecx\n 2c7:\t48 89 ef             \tmov    %rbp,%rdi\n 2ca:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n 2d0:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 2d7 <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0x77>\n 2d7:\te8 00 00 00 00       \tcallq  2dc <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0x7c>\n 2dc:\t48 8d 7b 08          \tlea    0x8(%rbx),%rdi\n 2e0:\t48 89 ee             \tmov    %rbp,%rsi\n 2e3:\te8 00 00 00 00       \tcallq  2e8 <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0x88>\n 2e8:\t48 89 ef             \tmov    %rbp,%rdi\n 2eb:\te8 00 00 00 00       \tcallq  2f0 <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0x90>\n 2f0:\t48 83 c4 20          \tadd    $0x20,%rsp\n 2f4:\t31 c0                \txor    %eax,%eax\n 2f6:\t5b                   \tpop    %rbx\n 2f7:\t5d                   \tpop    %rbp\n 2f8:\t41 5c                \tpop    %r12\n 2fa:\tc3                   \tretq   \n 2fb:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n 300:\t0f b6 06             \tmovzbl (%rsi),%eax\n 303:\t88 07                \tmov    %al,(%rdi)\n 305:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 30a:\t48 83 43 50 01       \taddq   $0x1,0x50(%rbx)\n 30f:\t48 83 c4 20          \tadd    $0x20,%rsp\n 313:\t5b                   \tpop    %rbx\n 314:\t5d                   \tpop    %rbp\n 315:\t41 5c                \tpop    %r12\n 317:\tc3                   \tretq   \n 318:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n 31f:\t00 \n 320:\t48 89 e5             \tmov    %rsp,%rbp\n 323:\tbe 2f 00 00 00       \tmov    $0x2f,%esi\n 328:\t45 31 c9             \txor    %r9d,%r9d\n 32b:\t31 c9                \txor    %ecx,%ecx\n 32d:\t48 89 ef             \tmov    %rbp,%rdi\n 330:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n 336:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 33d <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0xdd>\n 33d:\te8 00 00 00 00       \tcallq  342 <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0xe2>\n 342:\t48 8d 7b 08          \tlea    0x8(%rbx),%rdi\n 346:\t48 89 ee             \tmov    %rbp,%rsi\n 349:\te8 00 00 00 00       \tcallq  34e <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0xee>\n 34e:\teb 98                \tjmp    2e8 <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0x88>\n 350:\t48 83 c4 20          \tadd    $0x20,%rsp\n 354:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 359:\t5b                   \tpop    %rbx\n 35a:\t5d                   \tpop    %rbp\n 35b:\t41 5c                \tpop    %r12\n 35d:\tc3                   \tretq   \n 35e:\t49 89 c4             \tmov    %rax,%r12\n 361:\te9 00 00 00 00       \tjmpq   366 <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0x106>\n 366:\t49 89 c4             \tmov    %rax,%r12\n 369:\te9 00 00 00 00       \tjmpq   36e <_ZN21CNCSJPCMemoryIOStream4ReadEPvj+0x10e>\n 36e:\t66 90                \txchg   %ax,%ax", "code_s": "__int64 __fastcall CNCSJPCMemoryIOStream Read(CNCSJPCMemoryIOStream *this,\n                                              void *a2, unsigned int a3) {\n  __int64 v4;\n  __int64 v5;\n  _BYTE *v8;\n  signed __int64 v9;\n  __int64 result;\n  _BYTE <span class=\"supfact\">v11</span>[Number];\n  v4 = *((_QWORD *)this + Number);\n  v5 = *((unsigned int *)this + Number);\n  if (v4 >= v5) {\n  LABEL_8:\n    CNCSError CNCSError(<span class=\"supfact\">v11</span>, Number L, &LC0, Number L, Number L,\n                        Number L);\n    CNCSError operator=((char *)this + Number, <span class=\"supfact\">v11</span>);\n    CNCSError ~CNCSError((CNCSError *)<span class=\"supfact\">v11</span>);\n    return Number L;\n  }\n  v8 = (_BYTE *)(v4 + *((_QWORD *)this + Number));\n  if (a3 == Number) {\n    *(_BYTE *)a2 = *v8;\n    result = Number L;\n    ++*((_QWORD *)this + Number);\n  } else {\n    v9 = v5 - v4;\n    if (v9 > a3)\n      v9 = a3;\n    if (v9 < Number)\n      v9 = Number L;\n    memcpy(a2, v8, v9);\n    *((_QWORD *)this + Number) += v9;\n    if (a3 != (_DWORD)v9)\n      goto LABEL_8;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "__int64 __fastcall CNCSJPCMemoryIOStream Read(CNCSJPCMemoryIOStream *this,\n                                              void *a2, unsigned int a3) {\n  __int64 v4;\n  __int64 v5;\n  _BYTE *v8;\n  signed __int64 v9;\n  __int64 result;\n  CNCSError <span class=\"supfact\">v11</span>;\n  v4 = *(_QWORD *)&this->baseclass_0[Number];\n  v5 = this->m_nMemoryLength;\n  if (v4 >= v5) {\n  LABEL_8:\n    CNCSError CNCSError(&<span class=\"supfact\">v11</span>, NCS_INVALID_PARAMETER,\n                        (char *)&LC0, Number, LOG_LEVEL1, Number L);\n    CNCSError operator=(&this->baseclass_0[Number], &<span class=\"supfact\">v11</span>);\n    CNCSError ~CNCSError(&<span class=\"supfact\">v11</span>);\n    return Number L;\n  }\n  v8 = (char *)this->m_pMemory + v4;\n  if (a3 == Number) {\n    *(_BYTE *)a2 = *v8;\n    result = Number L;\n    ++*(_QWORD *)&this->baseclass_0[Number];\n  } else {\n    v9 = v5 - v4;\n    if (v9 > a3)\n      v9 = a3;\n    if (v9 < Number)\n      v9 = Number L;\n    memcpy(a2, v8, v9);\n    *(_QWORD *)&this->baseclass_0[Number] += v9;\n    if (a3 != (_DWORD)v9)\n      goto LABEL_8;\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v11", "type": "struct CNCSError { NCSError m_eError; PADDING (4); char * m_pText; const char * m_pFile; int m_nLine; PADDING (4); }", "ref_name": "v11", "ref_type": "struct CNCSError { NCSError m_eError; PADDING (4); char * m_pText; const char * m_pFile; int m_nLine; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "mend0za", "repo_name": "QEMU-dt-config", "path": "mend0za/QEMU-dt-config/a8b0bd9f99393ab6adafcd4e555a4d06b7e13b0434dc2ed484a0bbda1f14553c", "path_in_repo": "mend0za/QEMU-dt-config//hw/net/e1000e_core.o", "objdump": "00000000000033de <trace_e1000e_rx_metadata_rss>:\n    33de:\t55                   \tpush   %rbp\n    33df:\t48 89 e5             \tmov    %rsp,%rbp\n    33e2:\t41 54                \tpush   %r12\n    33e4:\t53                   \tpush   %rbx\n    33e5:\t48 83 ec 30          \tsub    $0x30,%rsp\n    33e9:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    33ec:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    33ef:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    33f6:\t00 00 \n    33f8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    33fc:\t31 c0                \txor    %eax,%eax\n    33fe:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3404 <trace_e1000e_rx_metadata_rss+0x26>\n    3404:\t85 c0                \ttest   %eax,%eax\n    3406:\t0f 95 c0             \tsetne  %al\n    3409:\t0f b6 c0             \tmovzbl %al,%eax\n    340c:\t48 85 c0             \ttest   %rax,%rax\n    340f:\t74 67                \tje     3478 <trace_e1000e_rx_metadata_rss+0x9a>\n    3411:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 3418 <trace_e1000e_rx_metadata_rss+0x3a>\n    3418:\t66 85 c0             \ttest   %ax,%ax\n    341b:\t74 5b                \tje     3478 <trace_e1000e_rx_metadata_rss+0x9a>\n    341d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    3421:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3426:\t48 89 c7             \tmov    %rax,%rdi\n    3429:\te8 00 00 00 00       \tcallq  342e <trace_e1000e_rx_metadata_rss+0x50>\n    342e:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    3433:\te8 bb d2 ff ff       \tcallq  6f3 <qemu_loglevel_mask>\n    3438:\t0f b6 c0             \tmovzbl %al,%eax\n    343b:\t48 85 c0             \ttest   %rax,%rax\n    343e:\t74 38                \tje     3478 <trace_e1000e_rx_metadata_rss+0x9a>\n    3440:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3444:\t49 89 c4             \tmov    %rax,%r12\n    3447:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    344b:\t48 89 c3             \tmov    %rax,%rbx\n    344e:\te8 00 00 00 00       \tcallq  3453 <trace_e1000e_rx_metadata_rss+0x75>\n    3453:\t8b 4d c8             \tmov    -0x38(%rbp),%ecx\n    3456:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    3459:\t41 89 c9             \tmov    %ecx,%r9d\n    345c:\t41 89 d0             \tmov    %edx,%r8d\n    345f:\t4c 89 e1             \tmov    %r12,%rcx\n    3462:\t48 89 da             \tmov    %rbx,%rdx\n    3465:\t89 c6                \tmov    %eax,%esi\n    3467:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 346e <trace_e1000e_rx_metadata_rss+0x90>\n    346e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3473:\te8 00 00 00 00       \tcallq  3478 <trace_e1000e_rx_metadata_rss+0x9a>\n    3478:\t90                   \tnop\n    3479:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    347d:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    3484:\t00 00 \n    3486:\t74 05                \tje     348d <trace_e1000e_rx_metadata_rss+0xaf>\n    3488:\te8 00 00 00 00       \tcallq  348d <trace_e1000e_rx_metadata_rss+0xaf>\n    348d:\t48 83 c4 30          \tadd    $0x30,%rsp\n    3491:\t5b                   \tpop    %rbx\n    3492:\t41 5c                \tpop    %r12\n    3494:\t5d                   \tpop    %rbp\n    3495:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_e1000e_rx_metadata_rss(unsigned int a1,\n                                                         unsigned int a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_E1000E_RX_METADATA_RSS_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v2 = <span class=\"supfact\">tv</span>.tv_usec;\n        v3 = <span class=\"supfact\">tv</span>.tv_sec;\n        v4 = getpid();\n        qemu_log(String, v4, v3, v2, a1, a2);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ v7;\n}", "code_t": "void __cdecl trace_e1000e_rx_metadata_rss(uint32_t rss, uint32_t mrq) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_E1000E_RX_METADATA_RSS_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v2 = <span class=\"supfact\">_now</span>.tv_usec;\n      v3 = <span class=\"supfact\">_now</span>.tv_sec;\n      v4 = getpid();\n      qemu_log(String, v4, v3, v2, rss, mrq);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "mthuurne", "repo_name": "qemu-dingoo", "path": "mthuurne/qemu-dingoo/54b1befca550d081af56e78ada11be73983f0f776e0f17dc67503e1d7a69a772", "path_in_repo": "mthuurne/qemu-dingoo//net/socket.o", "objdump": "0000000000000567 <net_socket_mcast_create>:\n     567:\t55                   \tpush   %rbp\n     568:\t48 89 e5             \tmov    %rsp,%rbp\n     56b:\t53                   \tpush   %rbx\n     56c:\t48 83 ec 38          \tsub    $0x38,%rsp\n     570:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     574:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     57b:\t00 00 \n     57d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     581:\t31 c0                \txor    %eax,%eax\n     583:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     587:\t8b 40 04             \tmov    0x4(%rax),%eax\n     58a:\t89 c7                \tmov    %eax,%edi\n     58c:\te8 00 00 00 00       \tcallq  591 <net_socket_mcast_create+0x2a>\n     591:\t25 00 00 00 f0       \tand    $0xf0000000,%eax\n     596:\t3d 00 00 00 e0       \tcmp    $0xe0000000,%eax\n     59b:\t74 46                \tje     5e3 <net_socket_mcast_create+0x7c>\n     59d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     5a1:\t8b 40 04             \tmov    0x4(%rax),%eax\n     5a4:\t89 c7                \tmov    %eax,%edi\n     5a6:\te8 00 00 00 00       \tcallq  5ab <net_socket_mcast_create+0x44>\n     5ab:\t89 c3                \tmov    %eax,%ebx\n     5ad:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     5b1:\t8b 40 04             \tmov    0x4(%rax),%eax\n     5b4:\t89 c7                \tmov    %eax,%edi\n     5b6:\te8 00 00 00 00       \tcallq  5bb <net_socket_mcast_create+0x54>\n     5bb:\t48 89 c2             \tmov    %rax,%rdx\n     5be:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5c5 <net_socket_mcast_create+0x5e>\n     5c5:\t89 d9                \tmov    %ebx,%ecx\n     5c7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     5cc:\t48 89 c7             \tmov    %rax,%rdi\n     5cf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5d4:\te8 00 00 00 00       \tcallq  5d9 <net_socket_mcast_create+0x72>\n     5d9:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     5de:\te9 4d 01 00 00       \tjmpq   730 <net_socket_mcast_create+0x1c9>\n     5e3:\tba 00 00 00 00       \tmov    $0x0,%edx\n     5e8:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     5ed:\tbf 02 00 00 00       \tmov    $0x2,%edi\n     5f2:\te8 00 00 00 00       \tcallq  5f7 <net_socket_mcast_create+0x90>\n     5f7:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n     5fa:\t83 7d d8 00          \tcmpl   $0x0,-0x28(%rbp)\n     5fe:\t79 14                \tjns    614 <net_socket_mcast_create+0xad>\n     600:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     605:\te8 00 00 00 00       \tcallq  60a <net_socket_mcast_create+0xa3>\n     60a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     60f:\te9 1c 01 00 00       \tjmpq   730 <net_socket_mcast_create+0x1c9>\n     614:\tc7 45 d4 01 00 00 00 \tmovl   $0x1,-0x2c(%rbp)\n     61b:\t48 8d 55 d4          \tlea    -0x2c(%rbp),%rdx\n     61f:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     622:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n     628:\t48 89 d1             \tmov    %rdx,%rcx\n     62b:\tba 02 00 00 00       \tmov    $0x2,%edx\n     630:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     635:\t89 c7                \tmov    %eax,%edi\n     637:\te8 00 00 00 00       \tcallq  63c <net_socket_mcast_create+0xd5>\n     63c:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n     63f:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n     643:\t79 0f                \tjns    654 <net_socket_mcast_create+0xed>\n     645:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     64a:\te8 00 00 00 00       \tcallq  64f <net_socket_mcast_create+0xe8>\n     64f:\te9 c7 00 00 00       \tjmpq   71b <net_socket_mcast_create+0x1b4>\n     654:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n     658:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     65b:\tba 10 00 00 00       \tmov    $0x10,%edx\n     660:\t48 89 ce             \tmov    %rcx,%rsi\n     663:\t89 c7                \tmov    %eax,%edi\n     665:\te8 00 00 00 00       \tcallq  66a <net_socket_mcast_create+0x103>\n     66a:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n     66d:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n     671:\t79 0f                \tjns    682 <net_socket_mcast_create+0x11b>\n     673:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     678:\te8 00 00 00 00       \tcallq  67d <net_socket_mcast_create+0x116>\n     67d:\te9 99 00 00 00       \tjmpq   71b <net_socket_mcast_create+0x1b4>\n     682:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     686:\t8b 40 04             \tmov    0x4(%rax),%eax\n     689:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     68c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     691:\te8 00 00 00 00       \tcallq  696 <net_socket_mcast_create+0x12f>\n     696:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     699:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     69d:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     6a0:\t41 b8 08 00 00 00    \tmov    $0x8,%r8d\n     6a6:\t48 89 d1             \tmov    %rdx,%rcx\n     6a9:\tba 23 00 00 00       \tmov    $0x23,%edx\n     6ae:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     6b3:\t89 c7                \tmov    %eax,%edi\n     6b5:\te8 00 00 00 00       \tcallq  6ba <net_socket_mcast_create+0x153>\n     6ba:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n     6bd:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n     6c1:\t79 0c                \tjns    6cf <net_socket_mcast_create+0x168>\n     6c3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     6c8:\te8 00 00 00 00       \tcallq  6cd <net_socket_mcast_create+0x166>\n     6cd:\teb 4c                \tjmp    71b <net_socket_mcast_create+0x1b4>\n     6cf:\tc7 45 d4 01 00 00 00 \tmovl   $0x1,-0x2c(%rbp)\n     6d6:\t48 8d 55 d4          \tlea    -0x2c(%rbp),%rdx\n     6da:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     6dd:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n     6e3:\t48 89 d1             \tmov    %rdx,%rcx\n     6e6:\tba 22 00 00 00       \tmov    $0x22,%edx\n     6eb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     6f0:\t89 c7                \tmov    %eax,%edi\n     6f2:\te8 00 00 00 00       \tcallq  6f7 <net_socket_mcast_create+0x190>\n     6f7:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n     6fa:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n     6fe:\t79 0c                \tjns    70c <net_socket_mcast_create+0x1a5>\n     700:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     705:\te8 00 00 00 00       \tcallq  70a <net_socket_mcast_create+0x1a3>\n     70a:\teb 0f                \tjmp    71b <net_socket_mcast_create+0x1b4>\n     70c:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     70f:\t89 c7                \tmov    %eax,%edi\n     711:\te8 00 00 00 00       \tcallq  716 <net_socket_mcast_create+0x1af>\n     716:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     719:\teb 15                \tjmp    730 <net_socket_mcast_create+0x1c9>\n     71b:\t83 7d d8 00          \tcmpl   $0x0,-0x28(%rbp)\n     71f:\t78 0a                \tjs     72b <net_socket_mcast_create+0x1c4>\n     721:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     724:\t89 c7                \tmov    %eax,%edi\n     726:\te8 00 00 00 00       \tcallq  72b <net_socket_mcast_create+0x1c4>\n     72b:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     730:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n     734:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n     73b:\t00 00 \n     73d:\t74 05                \tje     744 <net_socket_mcast_create+0x1dd>\n     73f:\te8 00 00 00 00       \tcallq  744 <net_socket_mcast_create+0x1dd>\n     744:\t48 83 c4 38          \tadd    $0x38,%rsp\n     748:\t5b                   \tpop    %rbx\n     749:\t5d                   \tpop    %rbp\n     74a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall net_socket_mcast_create(__int64 a1) {\n  uint32_t v1;\n  char *v2;\n  int optval;\n  int fd;\n  int v6;\n  int <span class=\"supfact\">v7</span>[Number];\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  if ((ntohl(*(_DWORD *)(a1 + Number)) & Number) != Number) {\n    v1 = ntohl(*(_DWORD *)(a1 + Number));\n    v2 = inet_ntoa(*(struct in_addr *)(a1 + Number));\n    fprintf(stderr, String, v2, v1);\n    return Number;\n  }\n  fd = qemu_socket(Number L, Number L, Number L);\n  if (fd < Number) {\n    perror(String);\n    return Number;\n  }\n  optval = Number;\n  v6 = setsockopt(fd, Number, Number, &optval, Number);\n  if (v6 >= Number) {\n    v6 = bind(fd, (const struct sockaddr *)a1, Number);\n    if (v6 >= Number) {\n      <span class=\"supfact\">v7</span>[Number] = *(_DWORD *)(a1 + Number);\n      <span class=\"supfact\">v7</span>[Number] = htonl(Number);\n      v6 = setsockopt(fd, Number, Number, <span class=\"supfact\">v7</span>, Number);\n      if (v6 >= Number) {\n        optval = Number;\n        v6 = setsockopt(fd, Number, Number, &optval, Number);\n        if (v6 >= Number) {\n          socket_set_nonblock((unsigned int)fd);\n          return (unsigned int)fd;\n        }\n        perror(String);\n      } else {\n        perror(String);\n      }\n    } else {\n      perror(String);\n    }\n  } else {\n    perror(String);\n  }\n  if (fd >= Number)\n    close(fd);\n  return Number;\n}", "code_t": "int __cdecl net_socket_mcast_create(sockaddr_in *mcastaddr) {\n  uint32_t v1;\n  char *v2;\n  int val;\n  int fd;\n  int ret;\n  ip_mreq <span class=\"supfact\">imr</span>;\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  if ((ntohl(mcastaddr->sin_addr.s_addr) & Number) != Number) {\n    v1 = ntohl(mcastaddr->sin_addr.s_addr);\n    v2 = inet_ntoa(mcastaddr->sin_addr);\n    fprintf(stderr, String, v2, v1);\n    return Number;\n  }\n  fd = qemu_socket(Number L, Number L, Number L);\n  if (fd < Number) {\n    perror(String);\n    return Number;\n  }\n  val = Number;\n  ret = setsockopt(fd, Number, Number, &val, Number);\n  if (ret >= Number) {\n    ret = bind(fd, (const struct sockaddr *)mcastaddr, Number);\n    if (ret >= Number) {\n      <span class=\"supfact\">imr</span>.imr_multiaddr.s_addr = mcastaddr->sin_addr.s_addr;\n      <span class=\"supfact\">imr</span>.imr_interface.s_addr = htonl(Number);\n      ret = setsockopt(fd, Number, Number, &<span class=\"supfact\">imr</span>, Number);\n      if (ret >= Number) {\n        val = Number;\n        ret = setsockopt(fd, Number, Number, &val, Number);\n        if (ret >= Number) {\n          socket_set_nonblock((unsigned int)fd);\n          return fd;\n        }\n        perror(String);\n      } else {\n        perror(String);\n      }\n    } else {\n      perror(String);\n    }\n  } else {\n    perror(String);\n  }\n  if (fd >= Number)\n    close(fd);\n  return Number;\n}", "var": [{"name": "v7", "type": "uint32_t[2]", "ref_name": "imr", "ref_type": "struct ip_mreq { in_addr imr_multiaddr; in_addr imr_interface; }"}], "body_in_train": false}, {"repo_owner": "jessica439", "repo_name": "cs225", "path": "jessica439/cs225/f59715a261b6fff1ed10743195e71bc242a391149135e41f30c32b2c6ce44042", "path_in_repo": "jessica439/cs225/monad/lab_heaps_grade/util.o", "objdump": "0000000000002afe <_ZN4util10is_symlinkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:\n    2afe:\t55                   \tpush   %rbp\n    2aff:\t48 89 e5             \tmov    %rsp,%rbp\n    2b02:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n    2b09:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n    2b10:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    2b17:\t48 89 c7             \tmov    %rax,%rdi\n    2b1a:\te8 00 00 00 00       \tcallq  2b1f <_ZN4util10is_symlinkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x21>\n    2b1f:\t48 89 c2             \tmov    %rax,%rdx\n    2b22:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    2b29:\t48 89 c6             \tmov    %rax,%rsi\n    2b2c:\t48 89 d7             \tmov    %rdx,%rdi\n    2b2f:\te8 00 00 00 00       \tcallq  2b34 <_ZN4util10is_symlinkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>\n    2b34:\t85 c0                \ttest   %eax,%eax\n    2b36:\t0f 95 c0             \tsetne  %al\n    2b39:\t84 c0                \ttest   %al,%al\n    2b3b:\t74 07                \tje     2b44 <_ZN4util10is_symlinkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46>\n    2b3d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    2b42:\teb 2b                \tjmp    2b6f <_ZN4util10is_symlinkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x71>\n    2b44:\t8b 45 88             \tmov    -0x78(%rbp),%eax\n    2b47:\t25 00 01 00 00       \tand    $0x100,%eax\n    2b4c:\t85 c0                \ttest   %eax,%eax\n    2b4e:\t75 07                \tjne    2b57 <_ZN4util10is_symlinkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x59>\n    2b50:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2b55:\teb 18                \tjmp    2b6f <_ZN4util10is_symlinkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x71>\n    2b57:\t8b 45 88             \tmov    -0x78(%rbp),%eax\n    2b5a:\t25 00 f0 00 00       \tand    $0xf000,%eax\n    2b5f:\t3d 00 a0 00 00       \tcmp    $0xa000,%eax\n    2b64:\t0f 94 c0             \tsete   %al\n    2b67:\t0f b6 c0             \tmovzbl %al,%eax\n    2b6a:\t85 c0                \ttest   %eax,%eax\n    2b6c:\t0f 95 c0             \tsetne  %al\n    2b6f:\tc9                   \tleaveq \n    2b70:\tc3                   \tretq   ", "code_s": "bool __fastcall util is_symlink(__int64 a1) {\n  const char *v1;\n  struct stat <span class=\"supfact\">v3</span>;\n  v1 = (const char *)\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          c_str(a1);\n  if (lstat(v1, &<span class=\"supfact\">v3</span>))\n    return Number;\n  if ((<span class=\"supfact\">v3</span>.st_mode & Number) != Number)\n    return (<span class=\"supfact\">v3</span>.st_mode & Number) == Number;\n  return Number;\n}", "code_t": "bool __cdecl util is_symlink(const std string *file) {\n  const char *v1;\n  stat <span class=\"supfact\">st</span>;\n  v1 = (const char *)\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          c_str(file);\n  if (lstat(v1, &<span class=\"supfact\">st</span>))\n    return Number;\n  if ((<span class=\"supfact\">st</span>.st_mode & Number) != Number)\n    return (<span class=\"supfact\">st</span>.st_mode & Number) == Number;\n  return Number;\n}", "var": [{"name": "v3", "type": "struct struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __unused; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "vaibhavpandeyvpz", "repo_name": "kernel-a7xelte", "path": "vaibhavpandeyvpz/kernel-a7xelte/d5c1468201d984510066e5c51b6a42936a661dd86fd5ce44bd803082a8d414d2", "path_in_repo": "vaibhavpandeyvpz/kernel-a7xelte/tools/perf/builtin-top.o", "objdump": "0000000000000539 <ui__warn_map_erange>:\n     539:\t55                   \tpush   %rbp\n     53a:\t48 89 e5             \tmov    %rsp,%rbp\n     53d:\t41 57                \tpush   %r15\n     53f:\t41 56                \tpush   %r14\n     541:\t41 55                \tpush   %r13\n     543:\t41 54                \tpush   %r12\n     545:\t53                   \tpush   %rbx\n     546:\t48 81 ec d8 01 00 00 \tsub    $0x1d8,%rsp\n     54d:\t48 89 bd 28 fe ff ff \tmov    %rdi,-0x1d8(%rbp)\n     554:\t48 89 b5 20 fe ff ff \tmov    %rsi,-0x1e0(%rbp)\n     55b:\t48 89 95 18 fe ff ff \tmov    %rdx,-0x1e8(%rbp)\n     562:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     569:\t00 00 \n     56b:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     56f:\t31 c0                \txor    %eax,%eax\n     571:\t48 8d 85 40 fe ff ff \tlea    -0x1c0(%rbp),%rax\n     578:\t48 89 c7             \tmov    %rax,%rdi\n     57b:\te8 00 00 00 00       \tcallq  580 <ui__warn_map_erange+0x47>\n     580:\t89 85 3c fe ff ff    \tmov    %eax,-0x1c4(%rbp)\n     586:\t83 bd 3c fe ff ff 00 \tcmpl   $0x0,-0x1c4(%rbp)\n     58d:\t75 10                \tjne    59f <ui__warn_map_erange+0x66>\n     58f:\t48 8d 85 40 fe ff ff \tlea    -0x1c0(%rbp),%rax\n     596:\t4c 8d b8 82 00 00 00 \tlea    0x82(%rax),%r15\n     59d:\teb 06                \tjmp    5a5 <ui__warn_map_erange+0x6c>\n     59f:\t41 bf 00 00 00 00    \tmov    $0x0,%r15d\n     5a5:\t83 bd 3c fe ff ff 00 \tcmpl   $0x0,-0x1c4(%rbp)\n     5ac:\t75 10                \tjne    5be <ui__warn_map_erange+0x85>\n     5ae:\t48 8d 85 40 fe ff ff \tlea    -0x1c0(%rbp),%rax\n     5b5:\t4c 8d b0 04 01 00 00 \tlea    0x104(%rax),%r14\n     5bc:\teb 06                \tjmp    5c4 <ui__warn_map_erange+0x8b>\n     5be:\t41 be 00 00 00 00    \tmov    $0x0,%r14d\n     5c4:\t48 8b 85 20 fe ff ff \tmov    -0x1e0(%rbp),%rax\n     5cb:\t48 83 c0 2c          \tadd    $0x2c,%rax\n     5cf:\t48 89 85 10 fe ff ff \tmov    %rax,-0x1f0(%rbp)\n     5d6:\t48 8b 85 20 fe ff ff \tmov    -0x1e0(%rbp),%rax\n     5dd:\t0f b6 40 2a          \tmovzbl 0x2a(%rax),%eax\n     5e1:\t3c 01                \tcmp    $0x1,%al\n     5e3:\t74 1d                \tje     602 <ui__warn_map_erange+0xc9>\n     5e5:\t48 8b 85 20 fe ff ff \tmov    -0x1e0(%rbp),%rax\n     5ec:\t0f b6 40 2a          \tmovzbl 0x2a(%rax),%eax\n     5f0:\t84 c0                \ttest   %al,%al\n     5f2:\t75 07                \tjne    5fb <ui__warn_map_erange+0xc2>\n     5f4:\tbb 6c 00 00 00       \tmov    $0x6c,%ebx\n     5f9:\teb 0c                \tjmp    607 <ui__warn_map_erange+0xce>\n     5fb:\tbb 77 00 00 00       \tmov    $0x77,%ebx\n     600:\teb 05                \tjmp    607 <ui__warn_map_erange+0xce>\n     602:\tbb 67 00 00 00       \tmov    $0x67,%ebx\n     607:\t48 8b 85 20 fe ff ff \tmov    -0x1e0(%rbp),%rax\n     60e:\t4c 8b 68 20          \tmov    0x20(%rax),%r13\n     612:\t48 8b 85 20 fe ff ff \tmov    -0x1e0(%rbp),%rax\n     619:\t4c 8b 60 18          \tmov    0x18(%rax),%r12\n     61d:\t48 8b 85 28 fe ff ff \tmov    -0x1d8(%rbp),%rax\n     624:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     628:\t48 89 85 08 fe ff ff \tmov    %rax,-0x1f8(%rbp)\n     62f:\t48 8b 85 28 fe ff ff \tmov    -0x1d8(%rbp),%rax\n     636:\t48 8b 70 18          \tmov    0x18(%rax),%rsi\n     63a:\t48 89 b5 00 fe ff ff \tmov    %rsi,-0x200(%rbp)\n     641:\t48 8b 85 28 fe ff ff \tmov    -0x1d8(%rbp),%rax\n     648:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n     64c:\t48 89 c7             \tmov    %rax,%rdi\n     64f:\te8 00 00 00 00       \tcallq  654 <ui__warn_map_erange+0x11b>\n     654:\t0f be c8             \tmovsbl %al,%ecx\n     657:\t48 8b 85 28 fe ff ff \tmov    -0x1d8(%rbp),%rax\n     65e:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n     662:\t48 8b 50 68          \tmov    0x68(%rax),%rdx\n     666:\t48 8b 85 18 fe ff ff \tmov    -0x1e8(%rbp),%rax\n     66d:\t48 83 ec 08          \tsub    $0x8,%rsp\n     671:\t68 00 00 00 00       \tpushq  $0x0\n     676:\t41 57                \tpush   %r15\n     678:\t41 56                \tpush   %r14\n     67a:\tff b5 10 fe ff ff    \tpushq  -0x1f0(%rbp)\n     680:\t53                   \tpush   %rbx\n     681:\t41 55                \tpush   %r13\n     683:\t41 54                \tpush   %r12\n     685:\t4c 8b 8d 08 fe ff ff \tmov    -0x1f8(%rbp),%r9\n     68c:\t4c 8b 85 00 fe ff ff \tmov    -0x200(%rbp),%r8\n     693:\t48 89 c6             \tmov    %rax,%rsi\n     696:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     69b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6a0:\te8 00 00 00 00       \tcallq  6a5 <ui__warn_map_erange+0x16c>\n     6a5:\t48 83 c4 40          \tadd    $0x40,%rsp\n     6a9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6af <ui__warn_map_erange+0x176>\n     6af:\t85 c0                \ttest   %eax,%eax\n     6b1:\t7f 0a                \tjg     6bd <ui__warn_map_erange+0x184>\n     6b3:\tbf 05 00 00 00       \tmov    $0x5,%edi\n     6b8:\te8 00 00 00 00       \tcallq  6bd <ui__warn_map_erange+0x184>\n     6bd:\t48 8b 85 28 fe ff ff \tmov    -0x1d8(%rbp),%rax\n     6c4:\tc6 40 2a 01          \tmovb   $0x1,0x2a(%rax)\n     6c8:\t90                   \tnop\n     6c9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     6cd:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     6d4:\t00 00 \n     6d6:\t74 05                \tje     6dd <ui__warn_map_erange+0x1a4>\n     6d8:\te8 00 00 00 00       \tcallq  6dd <ui__warn_map_erange+0x1a4>\n     6dd:\t48 8d 65 d8          \tlea    -0x28(%rbp),%rsp\n     6e1:\t5b                   \tpop    %rbx\n     6e2:\t41 5c                \tpop    %r12\n     6e4:\t41 5d                \tpop    %r13\n     6e6:\t41 5e                \tpop    %r14\n     6e8:\t41 5f                \tpop    %r15\n     6ea:\t5d                   \tpop    %rbp\n     6eb:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall ui__warn_map_erange(__int64 a1, __int64 a2,\n                                                __int64 a3) {\n  char *v3;\n  char *v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  char v8;\n  __int64 v10;\n  __int64 v11;\n  int v13;\n  struct utsname <span class=\"supfact\">name</span>;\n  unsigned __int64 v15;\n  v15 = __readfsqword(Number);\n  v13 = uname(&<span class=\"supfact\">name</span>);\n  if (v13)\n    v3 = String;\n  else\n    v3 = <span class=\"supfact\">name</span>.release;\n  if (v13)\n    v4 = String;\n  else\n    v4 = <span class=\"supfact\">name</span>.machine;\n  if (*(_BYTE *)(a2 + Number) == Number) {\n    v5 = Number L;\n  } else if (*(_BYTE *)(a2 + Number)) {\n    v5 = Number L;\n  } else {\n    v5 = Number L;\n  }\n  v6 = *(_QWORD *)(a2 + Number);\n  v7 = *(_QWORD *)(a2 + Number);\n  v11 = *(_QWORD *)(a1 + Number);\n  v10 = *(_QWORD *)(a1 + Number);\n  v8 = dso__symtab_origin(*(_QWORD *)(a1 + Number));\n  ui__warning(String String String String String String String String String\n                  String String String String,\n              a3, *(const char **)(*(_QWORD *)(a1 + Number) + Number L),\n              (unsigned int)v8, v10, v11, v7, v6, v5,\n              (const char *)(a2 + Number), v4, v3,\n              (const char *)&perf_version_string);\n  if (use_browser <= Number)\n    sleep(Number);\n  *(_BYTE *)(a1 + Number) = Number;\n  return __readfsqword(Number) ^ v15;\n}", "code_t": "void __cdecl ui__warn_map_erange(map *map, symbol *sym, u64 ip_0) {\n  char *v3;\n  char *v4;\n  __int64 v5;\n  u64 v6;\n  u64 v7;\n  char v8;\n  u64 v9;\n  u64 v10;\n  int err;\n  utsname <span class=\"supfact\">uts</span>;\n  unsigned __int64 v14;\n  v14 = __readfsqword(Number);\n  err = uname(&<span class=\"supfact\">uts</span>);\n  if (err)\n    v3 = String;\n  else\n    v3 = <span class=\"supfact\">uts</span>.release;\n  if (err)\n    v4 = String;\n  else\n    v4 = <span class=\"supfact\">uts</span>.machine;\n  if (sym->binding == Number) {\n    v5 = Number L;\n  } else if (sym->binding) {\n    v5 = Number L;\n  } else {\n    v5 = Number L;\n  }\n  v6 = sym->end;\n  v7 = sym->start;\n  v10 = map->end;\n  v9 = map->start;\n  v8 = dso__symtab_origin(map->dso);\n  ui__warning(String String String String String String String String String\n                  String String String String,\n              ip_0, map->dso->long_name, (unsigned int)v8, v9, v10, v7, v6, v5,\n              sym->name, v4, v3, (const char *)&perf_version_string);\n  if (use_browser <= Number)\n    sleep(Number);\n  map->erange_warned = Number;\n}", "var": [{"name": "name", "type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] domainname; }", "ref_name": "uts", "ref_type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] domainname; }"}], "body_in_train": true}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/193ee31744bf94432d70b3c672eda529a3974a56c4540d5df4e50349387210b1", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/pkey/rsa_verify_pss", "objdump": "000000000041f977 <ecp_randomize_mxz>:\n  41f977:\t55                   \tpush   %rbp\n  41f978:\t48 89 e5             \tmov    %rsp,%rbp\n  41f97b:\t48 83 ec 50          \tsub    $0x50,%rsp\n  41f97f:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  41f983:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  41f987:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  41f98b:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n  41f98f:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  41f996:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41f99a:\t48 8b 80 b0 00 00 00 \tmov    0xb0(%rax),%rax\n  41f9a1:\t48 83 c0 07          \tadd    $0x7,%rax\n  41f9a5:\t48 c1 e8 03          \tshr    $0x3,%rax\n  41f9a9:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  41f9ad:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  41f9b1:\t48 89 c7             \tmov    %rax,%rdi\n  41f9b4:\te8 57 5a ff ff       \tcallq  415410 <mbedtls_mpi_init>\n  41f9b9:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n  41f9bd:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  41f9c1:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n  41f9c5:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  41f9c9:\t48 89 c7             \tmov    %rax,%rdi\n  41f9cc:\te8 76 a3 ff ff       \tcallq  419d47 <mbedtls_mpi_fill_random>\n  41f9d1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41f9d4:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  41f9d8:\t0f 85 b9 00 00 00    \tjne    41fa97 <ecp_randomize_mxz+0x120>\n  41f9de:\teb 1e                \tjmp    41f9fe <ecp_randomize_mxz+0x87>\n  41f9e0:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  41f9e4:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  41f9e9:\t48 89 c7             \tmov    %rax,%rdi\n  41f9ec:\te8 e6 75 ff ff       \tcallq  416fd7 <mbedtls_mpi_shift_r>\n  41f9f1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41f9f4:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  41f9f8:\t0f 85 9c 00 00 00    \tjne    41fa9a <ecp_randomize_mxz+0x123>\n  41f9fe:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41fa02:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  41fa06:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  41fa0a:\t48 89 d6             \tmov    %rdx,%rsi\n  41fa0d:\t48 89 c7             \tmov    %rax,%rdi\n  41fa10:\te8 fd 78 ff ff       \tcallq  417312 <mbedtls_mpi_cmp_mpi>\n  41fa15:\t85 c0                \ttest   %eax,%eax\n  41fa17:\t79 c7                \tjns    41f9e0 <ecp_randomize_mxz+0x69>\n  41fa19:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41fa1c:\t8d 50 01             \tlea    0x1(%rax),%edx\n  41fa1f:\t89 55 f8             \tmov    %edx,-0x8(%rbp)\n  41fa22:\t83 f8 0a             \tcmp    $0xa,%eax\n  41fa25:\t7e 07                \tjle    41fa2e <ecp_randomize_mxz+0xb7>\n  41fa27:\tb8 00 b3 ff ff       \tmov    $0xffffb300,%eax\n  41fa2c:\teb 7f                \tjmp    41faad <ecp_randomize_mxz+0x136>\n  41fa2e:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  41fa32:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  41fa37:\t48 89 c7             \tmov    %rax,%rdi\n  41fa3a:\te8 7a 7a ff ff       \tcallq  4174b9 <mbedtls_mpi_cmp_int>\n  41fa3f:\t85 c0                \ttest   %eax,%eax\n  41fa41:\t0f 8e 72 ff ff ff    \tjle    41f9b9 <ecp_randomize_mxz+0x42>\n  41fa47:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  41fa4b:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n  41fa4f:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  41fa53:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41fa57:\t48 89 c7             \tmov    %rax,%rdi\n  41fa5a:\te8 f8 da ff ff       \tcallq  41d557 <mbedtls_mpi_mul_mod>\n  41fa5f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41fa62:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  41fa66:\t75 35                \tjne    41fa9d <ecp_randomize_mxz+0x126>\n  41fa68:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  41fa6c:\t48 8d 78 30          \tlea    0x30(%rax),%rdi\n  41fa70:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  41fa74:\t48 8d 70 30          \tlea    0x30(%rax),%rsi\n  41fa78:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  41fa7c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41fa80:\t48 89 d1             \tmov    %rdx,%rcx\n  41fa83:\t48 89 fa             \tmov    %rdi,%rdx\n  41fa86:\t48 89 c7             \tmov    %rax,%rdi\n  41fa89:\te8 c9 da ff ff       \tcallq  41d557 <mbedtls_mpi_mul_mod>\n  41fa8e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41fa91:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  41fa95:\teb 07                \tjmp    41fa9e <ecp_randomize_mxz+0x127>\n  41fa97:\t90                   \tnop\n  41fa98:\teb 04                \tjmp    41fa9e <ecp_randomize_mxz+0x127>\n  41fa9a:\t90                   \tnop\n  41fa9b:\teb 01                \tjmp    41fa9e <ecp_randomize_mxz+0x127>\n  41fa9d:\t90                   \tnop\n  41fa9e:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  41faa2:\t48 89 c7             \tmov    %rax,%rdi\n  41faa5:\te8 93 59 ff ff       \tcallq  41543d <mbedtls_mpi_free>\n  41faaa:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41faad:\tc9                   \tleaveq \n  41faae:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ecp_randomize_mxz(_QWORD *a1, int *a2,\n                                     void(__fastcall *a3)(__int64,\n                                                          unsigned __int64,\n                                                          unsigned __int64),\n                                     __int64 a4) {\n  int v4;\n  _QWORD <span class=\"supfact\">v8</span>[Number];\n  unsigned __int64 v9;\n  int v10;\n  unsigned int v11;\n  v10 = Number;\n  v9 = (unsigned __int64)(a1[Number] + Number L) >> Number;\n  mbedtls_mpi_init((__int64)<span class=\"supfact\">v8</span>);\n  while (Number) {\n    v11 = mbedtls_mpi_fill_random((__int64)<span class=\"supfact\">v8</span>, v9, a3, a4);\n    if (v11)\n      break;\n    while ((int)mbedtls_mpi_cmp_mpi(<span class=\"supfact\">v8</span>,\n                                    (__int64)(a1 + Number)) >= Number) {\n      v11 = mbedtls_mpi_shift_r((__int64)<span class=\"supfact\">v8</span>, Number);\n      if (v11)\n        goto LABEL_11;\n    }\n    v4 = v10++;\n    if (v4 > Number)\n      return Number L;\n    if ((int)mbedtls_mpi_cmp_int(<span class=\"supfact\">v8</span>, Number L) > Number) {\n      v11 =\n          mbedtls_mpi_mul_mod(a1, a2, (__int64)a2, (char *)<span class=\"supfact\">v8</span>);\n      if (!v11)\n        v11 = mbedtls_mpi_mul_mod(a1, a2 + Number, (__int64)(a2 + Number),\n                                  (char *)<span class=\"supfact\">v8</span>);\n      break;\n    }\n  }\nLABEL_11:\n  mbedtls_mpi_free((__int64)<span class=\"supfact\">v8</span>);\n  return v11;\n}", "code_t": "int __cdecl ecp_randomize_mxz(const mbedtls_ecp_group_0 *grp,\n                              mbedtls_ecp_point_0 *P,\n                              int (*f_rng)(void *, unsigned __int8 *, size_t),\n                              void *p_rng) {\n  int v4;\n  mbedtls_mpi_0 <span class=\"supfact\">l</span>;\n  size_t p_size;\n  int count;\n  int ret;\n  count = Number;\n  p_size = (grp->pbits + Number) >> Number;\n  mbedtls_mpi_init(&<span class=\"supfact\">l</span>);\n  while (Number) {\n    ret = mbedtls_mpi_fill_random(&<span class=\"supfact\">l</span>, p_size, f_rng, p_rng);\n    if (ret)\n      break;\n    while (mbedtls_mpi_cmp_mpi(&<span class=\"supfact\">l</span>, &grp->P) >= Number) {\n      ret = mbedtls_mpi_shift_r(&<span class=\"supfact\">l</span>, Number);\n      if (ret)\n        goto cleanup;\n    }\n    v4 = count++;\n    if (v4 > Number)\n      return Number;\n    if (mbedtls_mpi_cmp_int(&<span class=\"supfact\">l</span>, Number L) > Number) {\n      ret = mbedtls_mpi_mul_mod(grp, &P->X, &P->X, &<span class=\"supfact\">l</span>);\n      if (!ret)\n        ret = mbedtls_mpi_mul_mod(grp, &P->Z, &P->Z, &<span class=\"supfact\">l</span>);\n      break;\n    }\n  }\ncleanup:\n  mbedtls_mpi_free(&<span class=\"supfact\">l</span>);\n  return ret;\n}", "var": [{"name": "v8", "type": "struct mbedtls_mpi_0 { int s; PADDING (4); size_t n; mbedtls_mpi_uint * p; }", "ref_name": "l", "ref_type": "struct mbedtls_mpi_0 { int s; PADDING (4); size_t n; mbedtls_mpi_uint * p; }"}], "body_in_train": true}, {"repo_owner": "loopunit", "repo_name": "OpenFrameworks-ng", "path": "loopunit/OpenFrameworks-ng/136e6a0412a4b865c357dd9335358dbdc4bbeeb38316cd841651815caf9512f6", "path_in_repo": "loopunit/OpenFrameworks-ng/extern/trees/FreeImage/Source/LibOpenJPEG/jp2.o", "objdump": "00000000000000fe <jp2_read_ihdr>:\n      fe:\t55                   \tpush   %rbp\n      ff:\t48 89 e5             \tmov    %rsp,%rbp\n     102:\t48 83 ec 30          \tsub    $0x30,%rsp\n     106:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     10a:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     10e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     112:\t48 8b 00             \tmov    (%rax),%rax\n     115:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     119:\t48 8d 55 ec          \tlea    -0x14(%rbp),%rdx\n     11d:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     121:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     125:\t48 89 ce             \tmov    %rcx,%rsi\n     128:\t48 89 c7             \tmov    %rax,%rdi\n     12b:\te8 d0 fe ff ff       \tcallq  0 <jp2_read_boxhdr>\n     130:\t85 c0                \ttest   %eax,%eax\n     132:\t75 27                \tjne    15b <jp2_read_ihdr+0x5d>\n     134:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     138:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 13f <jp2_read_ihdr+0x41>\n     13f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     144:\t48 89 c7             \tmov    %rax,%rdi\n     147:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     14c:\te8 00 00 00 00       \tcallq  151 <jp2_read_ihdr+0x53>\n     151:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     156:\te9 45 01 00 00       \tjmpq   2a0 <jp2_read_ihdr+0x1a2>\n     15b:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n     15e:\t3d 72 64 68 69       \tcmp    $0x69686472,%eax\n     163:\t74 27                \tje     18c <jp2_read_ihdr+0x8e>\n     165:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     169:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 170 <jp2_read_ihdr+0x72>\n     170:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     175:\t48 89 c7             \tmov    %rax,%rdi\n     178:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     17d:\te8 00 00 00 00       \tcallq  182 <jp2_read_ihdr+0x84>\n     182:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     187:\te9 14 01 00 00       \tjmpq   2a0 <jp2_read_ihdr+0x1a2>\n     18c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     190:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     195:\t48 89 c7             \tmov    %rax,%rdi\n     198:\te8 00 00 00 00       \tcallq  19d <jp2_read_ihdr+0x9f>\n     19d:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     1a1:\t89 42 14             \tmov    %eax,0x14(%rdx)\n     1a4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     1a8:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     1ad:\t48 89 c7             \tmov    %rax,%rdi\n     1b0:\te8 00 00 00 00       \tcallq  1b5 <jp2_read_ihdr+0xb7>\n     1b5:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     1b9:\t89 42 10             \tmov    %eax,0x10(%rdx)\n     1bc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     1c0:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     1c5:\t48 89 c7             \tmov    %rax,%rdi\n     1c8:\te8 00 00 00 00       \tcallq  1cd <jp2_read_ihdr+0xcf>\n     1cd:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     1d1:\t89 42 18             \tmov    %eax,0x18(%rdx)\n     1d4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     1d8:\t8b 40 18             \tmov    0x18(%rax),%eax\n     1db:\t89 c2                \tmov    %eax,%edx\n     1dd:\t48 89 d0             \tmov    %rdx,%rax\n     1e0:\t48 01 c0             \tadd    %rax,%rax\n     1e3:\t48 01 d0             \tadd    %rdx,%rax\n     1e6:\t48 c1 e0 02          \tshl    $0x2,%rax\n     1ea:\t48 89 c7             \tmov    %rax,%rdi\n     1ed:\te8 00 00 00 00       \tcallq  1f2 <jp2_read_ihdr+0xf4>\n     1f2:\t48 89 c2             \tmov    %rax,%rdx\n     1f5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     1f9:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n     1fd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     201:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     206:\t48 89 c7             \tmov    %rax,%rdi\n     209:\te8 00 00 00 00       \tcallq  20e <jp2_read_ihdr+0x110>\n     20e:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     212:\t89 42 1c             \tmov    %eax,0x1c(%rdx)\n     215:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     219:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     21e:\t48 89 c7             \tmov    %rax,%rdi\n     221:\te8 00 00 00 00       \tcallq  226 <jp2_read_ihdr+0x128>\n     226:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     22a:\t89 42 20             \tmov    %eax,0x20(%rdx)\n     22d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     231:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     236:\t48 89 c7             \tmov    %rax,%rdi\n     239:\te8 00 00 00 00       \tcallq  23e <jp2_read_ihdr+0x140>\n     23e:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     242:\t89 42 24             \tmov    %eax,0x24(%rdx)\n     245:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     249:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     24e:\t48 89 c7             \tmov    %rax,%rdi\n     251:\te8 00 00 00 00       \tcallq  256 <jp2_read_ihdr+0x158>\n     256:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     25a:\t89 42 28             \tmov    %eax,0x28(%rdx)\n     25d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     261:\t48 89 c7             \tmov    %rax,%rdi\n     264:\te8 00 00 00 00       \tcallq  269 <jp2_read_ihdr+0x16b>\n     269:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n     26c:\t29 d0                \tsub    %edx,%eax\n     26e:\t89 c2                \tmov    %eax,%edx\n     270:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     273:\t39 c2                \tcmp    %eax,%edx\n     275:\t74 24                \tje     29b <jp2_read_ihdr+0x19d>\n     277:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     27b:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 282 <jp2_read_ihdr+0x184>\n     282:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     287:\t48 89 c7             \tmov    %rax,%rdi\n     28a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     28f:\te8 00 00 00 00       \tcallq  294 <jp2_read_ihdr+0x196>\n     294:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     299:\teb 05                \tjmp    2a0 <jp2_read_ihdr+0x1a2>\n     29b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     2a0:\tc9                   \tleaveq \n     2a1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall jp2_read_ihdr(__int64 a1, __int64 a2) {\n  __int64 result;\n  int v3;\n  int <span class=\"supfact\">v4</span>[Number];\n  __int64 v5;\n  v5 = *(_QWORD *)a1;\n  if ((unsigned int)jp2_read_boxhdr(v5, a2, <span class=\"supfact\">v4</span>)) {\n    if (<span class=\"supfact\">v4</span>[Number] == Number) {\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_QWORD *)(a1 + Number) =\n          malloc(Number L * *(unsigned int *)(a1 + Number));\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      *(_DWORD *)(a1 + Number) = cio_read(a2, Number L);\n      v3 = cio_tell(a2);\n      if (v3 - <span class=\"supfact\">v4</span>[Number] == <span class=\"supfact\">v4</span>[Number]) {\n        result = Number L;\n      } else {\n        opj_event_msg(v5, Number L, String);\n        result = Number L;\n      }\n    } else {\n      opj_event_msg(v5, Number L, String);\n      result = Number L;\n    }\n  } else {\n    opj_event_msg(v5, Number L, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "opj_bool __cdecl jp2_read_ihdr(opj_jp2_t *jp2, opj_cio_t *cio) {\n  opj_bool result;\n  int v3;\n  opj_jp2_box_t <span class=\"supfact\">box</span>;\n  opj_common_ptr cinfo;\n  cinfo = jp2->cinfo;\n  if (jp2_read_boxhdr(cinfo, cio, &<span class=\"supfact\">box</span>)) {\n    if (<span class=\"supfact\">box</span>.type == Number) {\n      jp2->h = cio_read(cio, Number L);\n      jp2->w = cio_read(cio, Number L);\n      jp2->numcomps = cio_read(cio, Number L);\n      jp2->comps = (opj_jp2_comps_t *)malloc(Number L * jp2->numcomps);\n      jp2->bpc = cio_read(cio, Number L);\n      jp2->C = cio_read(cio, Number L);\n      jp2->UnkC = cio_read(cio, Number L);\n      jp2->IPR = cio_read(cio, Number L);\n      v3 = cio_tell(cio);\n      if (v3 - <span class=\"supfact\">box</span>.init_pos == <span class=\"supfact\">box</span>.length) {\n        result = Number;\n      } else {\n        opj_event_msg(cinfo, Number L, String);\n        result = Number;\n      }\n    } else {\n      opj_event_msg(cinfo, Number L, String);\n      result = Number;\n    }\n  } else {\n    opj_event_msg(cinfo, Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct opj_jp2_box_t { int length; int type; int init_pos; }", "ref_name": "box", "ref_type": "struct opj_jp2_box_t { int length; int type; int init_pos; }"}], "body_in_train": false}, {"repo_owner": "oguzbakir", "repo_name": "FTL-KernelN-S3Mini", "path": "oguzbakir/FTL-KernelN-S3Mini/f1dbe1f2f885d90ed9967643771848cbfb0fed0e8ae87c5735a66a5380ed3e71", "path_in_repo": "oguzbakir/FTL-KernelN-S3Mini/tools/perf/util/probe-finder.o", "objdump": "0000000000000e9a <die_get_data_member_location>:\n     e9a:\t55                   \tpush   %rbp\n     e9b:\t48 89 e5             \tmov    %rsp,%rbp\n     e9e:\t48 83 ec 50          \tsub    $0x50,%rsp\n     ea2:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     ea6:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     eaa:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     eb1:\t00 00 \n     eb3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     eb7:\t31 c0                \txor    %eax,%eax\n     eb9:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     ebd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     ec1:\tbe 38 00 00 00       \tmov    $0x38,%esi\n     ec6:\t48 89 c7             \tmov    %rax,%rdi\n     ec9:\te8 00 00 00 00       \tcallq  ece <die_get_data_member_location+0x34>\n     ece:\t48 85 c0             \ttest   %rax,%rax\n     ed1:\t75 0a                \tjne    edd <die_get_data_member_location+0x43>\n     ed3:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n     ed8:\te9 a2 00 00 00       \tjmpq   f7f <die_get_data_member_location+0xe5>\n     edd:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n     ee1:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     ee5:\t48 89 d6             \tmov    %rdx,%rsi\n     ee8:\t48 89 c7             \tmov    %rax,%rdi\n     eeb:\te8 00 00 00 00       \tcallq  ef0 <die_get_data_member_location+0x56>\n     ef0:\t85 c0                \ttest   %eax,%eax\n     ef2:\t0f 84 82 00 00 00    \tje     f7a <die_get_data_member_location+0xe0>\n     ef8:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n     efc:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n     f00:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     f04:\t48 89 ce             \tmov    %rcx,%rsi\n     f07:\t48 89 c7             \tmov    %rax,%rdi\n     f0a:\te8 00 00 00 00       \tcallq  f0f <die_get_data_member_location+0x75>\n     f0f:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n     f12:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n     f16:\t78 09                \tjs     f21 <die_get_data_member_location+0x87>\n     f18:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f1c:\t48 85 c0             \ttest   %rax,%rax\n     f1f:\t75 07                \tjne    f28 <die_get_data_member_location+0x8e>\n     f21:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n     f26:\teb 57                \tjmp    f7f <die_get_data_member_location+0xe5>\n     f28:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     f2c:\t0f b6 00             \tmovzbl (%rax),%eax\n     f2f:\t3c 23                \tcmp    $0x23,%al\n     f31:\t75 0a                \tjne    f3d <die_get_data_member_location+0xa3>\n     f33:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f37:\t48 83 f8 01          \tcmp    $0x1,%rax\n     f3b:\t74 2e                \tje     f6b <die_get_data_member_location+0xd1>\n     f3d:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     f41:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     f45:\t0f b6 00             \tmovzbl (%rax),%eax\n     f48:\t0f b6 c0             \tmovzbl %al,%eax\n     f4b:\t48 89 d1             \tmov    %rdx,%rcx\n     f4e:\t89 c2                \tmov    %eax,%edx\n     f50:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f55:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     f5a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f5f:\te8 00 00 00 00       \tcallq  f64 <die_get_data_member_location+0xca>\n     f64:\tb8 a1 ff ff ff       \tmov    $0xffffffa1,%eax\n     f69:\teb 14                \tjmp    f7f <die_get_data_member_location+0xe5>\n     f6b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     f6f:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     f73:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     f77:\t48 89 10             \tmov    %rdx,(%rax)\n     f7a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f7f:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     f83:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     f8a:\t00 00 \n     f8c:\t74 05                \tje     f93 <die_get_data_member_location+0xf9>\n     f8e:\te8 00 00 00 00       \tcallq  f93 <die_get_data_member_location+0xf9>\n     f93:\tc9                   \tleaveq \n     f94:\tc3                   \tretq   ", "code_s": "__int64 __fastcall die_get_data_member_location(struct Dwarf_Die_s *a1,\n                                                Dwarf_Unsigned *a2, __int64 a3,\n                                                Dwarf_Error *a4) {\n  __int64 v4;\n  unsigned __int8 *v6;\n  size_t v7;\n  Dwarf_Attribute <span class=\"supfact\">v8</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = (Dwarf_Attribute)__readfsqword(Number);\n  LODWORD(v4) = dwarf_attr(a1, Number, <span class=\"supfact\">v8</span>, a4);\n  if (!v4)\n    return Number L;\n  if (dwarf_formudata((Dwarf_Attribute)<span class=\"supfact\">v8</span>, a2,\n                      (Dwarf_Error *)a2)) {\n    if ((int)dwarf_getlocation(<span class=\"supfact\">v8</span>, &v6, &v7) < Number || !v7)\n      return Number L;\n    if (*v6 != Number || v7 != Number) {\n      eprintf(Number L, String, *v6, v7);\n      return Number L;\n    }\n    *a2 = *((_QWORD *)v6 + Number);\n  }\n  return Number L;\n}", "code_t": "int __cdecl die_get_data_member_location(Dwarf_Die *mb_die, Dwarf_Word *offs) {\n  __int64 v2;\n  Dwarf_Die offsa;\n  _BYTE offsb[Number];\n  Dwarf_Word *offsc;\n  Dwarf_Op *expr;\n  size_t nexpr;\n  Dwarf_Attribute <span class=\"supfact\">attr</span>;\n  unsigned __int64 v10;\n  offsa.cu = (Dwarf_CU *)mb_die;\n  offsa.addr = offs;\n  v10 = __readfsqword(Number);\n  LODWORD(v2) = dwarf_attr(offsa, (Dwarf_Half)mb_die,\n                           (Dwarf_Attribute *)((char *)&loc_37 + Number),\n                           (Dwarf_Error *)&<span class=\"supfact\">attr</span>);\n  if (!v2)\n    return Number;\n  if (dwarf_formudata(*(Dwarf_Attribute *)offsb,\n                      (Dwarf_Unsigned *)&<span class=\"supfact\">attr</span>.code,\n                      *(Dwarf_Error **)offsb)) {\n    if ((int)dwarf_getlocation(&<span class=\"supfact\">attr</span>, &expr, &nexpr) < Number ||\n        !nexpr)\n      return Number;\n    if (expr->atom != Number || nexpr != Number) {\n      eprintf(Number L, String, expr->atom, nexpr);\n      return Number;\n    }\n    *offsc = expr->number;\n  }\n  return Number;\n}", "var": [{"name": "v8", "type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }", "ref_name": "attr", "ref_type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }"}], "body_in_train": true}, {"repo_owner": "Aaron0927", "repo_name": "xen-4.2.1", "path": "Aaron0927/xen-4.2.1/1aa0e3001f936baa7bc93f195a94feb7c10f8fd0ca337eec2e4df90a613aee9b", "path_in_repo": "Aaron0927/xen-4.2.1/tools/qemu-xen/ui/vnc.o", "objdump": "0000000000000bd1 <vnc_qdict_remote_addr>:\n     bd1:\t55                   \tpush   %rbp\n     bd2:\t48 89 e5             \tmov    %rsp,%rbp\n     bd5:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n     bdc:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n     be3:\t89 b5 54 ff ff ff    \tmov    %esi,-0xac(%rbp)\n     be9:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     bf0:\t00 00 \n     bf2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     bf6:\t31 c0                \txor    %eax,%eax\n     bf8:\tc7 85 6c ff ff ff 80 \tmovl   $0x80,-0x94(%rbp)\n     bff:\t00 00 00 \n     c02:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n     c09:\t48 89 c1             \tmov    %rax,%rcx\n     c0c:\t48 8d 95 6c ff ff ff \tlea    -0x94(%rbp),%rdx\n     c13:\t8b 85 54 ff ff ff    \tmov    -0xac(%rbp),%eax\n     c19:\t48 89 ce             \tmov    %rcx,%rsi\n     c1c:\t89 c7                \tmov    %eax,%edi\n     c1e:\te8 00 00 00 00       \tcallq  c23 <vnc_qdict_remote_addr+0x52>\n     c23:\t85 c0                \ttest   %eax,%eax\n     c25:\t79 07                \tjns    c2e <vnc_qdict_remote_addr+0x5d>\n     c27:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     c2c:\teb 1f                \tjmp    c4d <vnc_qdict_remote_addr+0x7c>\n     c2e:\t8b 95 6c ff ff ff    \tmov    -0x94(%rbp),%edx\n     c34:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n     c3b:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     c42:\t48 89 ce             \tmov    %rcx,%rsi\n     c45:\t48 89 c7             \tmov    %rax,%rdi\n     c48:\te8 d0 fd ff ff       \tcallq  a1d <put_addr_qdict>\n     c4d:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n     c51:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n     c58:\t00 00 \n     c5a:\t74 05                \tje     c61 <vnc_qdict_remote_addr+0x90>\n     c5c:\te8 00 00 00 00       \tcallq  c61 <vnc_qdict_remote_addr+0x90>\n     c61:\tc9                   \tleaveq \n     c62:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vnc_qdict_remote_addr(__int64 a1, int a2) {\n  __int64 result;\n  socklen_t len;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  len = Number;\n  if (getpeername(a2, &<span class=\"supfact\">addr</span>, &len) >= Number)\n    result = put_addr_qdict(a1, &<span class=\"supfact\">addr</span>, len);\n  else\n    result = Number;\n  return result;\n}", "code_t": "int __cdecl vnc_qdict_remote_addr(QDict_0 *qdict, int fd) {\n  int result;\n  socklen_t salen;\n  sockaddr_storage <span class=\"supfact\">sa</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  salen = Number;\n  if (getpeername(fd, (struct sockaddr *)&<span class=\"supfact\">sa</span>, &salen) >= Number)\n    result = put_addr_qdict(qdict, &<span class=\"supfact\">sa</span>, salen);\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "addr", "type": "struct sockaddr_storage { sa_family_t ss_family; char[118] __ss_padding; unsigned __int64 __ss_align; }", "ref_name": "sa", "ref_type": "struct sockaddr_storage { sa_family_t ss_family; char[118] __ss_padding; unsigned __int64 __ss_align; }"}], "body_in_train": true}, {"repo_owner": "deepakkathayat", "repo_name": "podarch", "path": "deepakkathayat/podarch/b1d30c3df27c7810a8211bdf3c75958a2fedd3c8654af2bf5866b3191558b43e", "path_in_repo": "deepakkathayat/podarch/qemu-2.3.0/iohandler.o", "objdump": "00000000000001a2 <qemu_iohandler_fill>:\n 1a2:\t55                   \tpush   %rbp\n 1a3:\t48 89 e5             \tmov    %rsp,%rbp\n 1a6:\t48 83 ec 30          \tsub    $0x30,%rsp\n 1aa:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 1ae:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 1b5:\t00 00 \n 1b7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 1bb:\t31 c0                \txor    %eax,%eax\n 1bd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c4 <qemu_iohandler_fill+0x22>\n 1c4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 1c8:\te9 c0 00 00 00       \tjmpq   28d <qemu_iohandler_fill+0xeb>\n 1cd:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n 1d4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1d8:\t0f b6 40 38          \tmovzbl 0x38(%rax),%eax\n 1dc:\t84 c0                \ttest   %al,%al\n 1de:\t0f 85 9c 00 00 00    \tjne    280 <qemu_iohandler_fill+0xde>\n 1e4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1e8:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 1ec:\t48 85 c0             \ttest   %rax,%rax\n 1ef:\t74 28                \tje     219 <qemu_iohandler_fill+0x77>\n 1f1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1f5:\t48 8b 00             \tmov    (%rax),%rax\n 1f8:\t48 85 c0             \ttest   %rax,%rax\n 1fb:\t74 18                \tje     215 <qemu_iohandler_fill+0x73>\n 1fd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 201:\t48 8b 10             \tmov    (%rax),%rdx\n 204:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 208:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 20c:\t48 89 c7             \tmov    %rax,%rdi\n 20f:\tff d2                \tcallq  *%rdx\n 211:\t85 c0                \ttest   %eax,%eax\n 213:\t74 04                \tje     219 <qemu_iohandler_fill+0x77>\n 215:\t83 4d e4 19          \torl    $0x19,-0x1c(%rbp)\n 219:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 21d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 221:\t48 85 c0             \ttest   %rax,%rax\n 224:\t74 04                \tje     22a <qemu_iohandler_fill+0x88>\n 226:\t83 4d e4 0c          \torl    $0xc,-0x1c(%rbp)\n 22a:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n 22e:\t74 43                \tje     273 <qemu_iohandler_fill+0xd1>\n 230:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n 237:\t00 \n 238:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 23c:\t8b 40 30             \tmov    0x30(%rax),%eax\n 23f:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 242:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n 245:\t66 89 45 f4          \tmov    %ax,-0xc(%rbp)\n 249:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 24d:\t8b 40 08             \tmov    0x8(%rax),%eax\n 250:\t89 c2                \tmov    %eax,%edx\n 252:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 256:\t89 50 34             \tmov    %edx,0x34(%rax)\n 259:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n 25d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 261:\tba 01 00 00 00       \tmov    $0x1,%edx\n 266:\t48 89 ce             \tmov    %rcx,%rsi\n 269:\t48 89 c7             \tmov    %rax,%rdi\n 26c:\te8 00 00 00 00       \tcallq  271 <qemu_iohandler_fill+0xcf>\n 271:\teb 0e                \tjmp    281 <qemu_iohandler_fill+0xdf>\n 273:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 277:\tc7 40 34 ff ff ff ff \tmovl   $0xffffffff,0x34(%rax)\n 27e:\teb 01                \tjmp    281 <qemu_iohandler_fill+0xdf>\n 280:\t90                   \tnop\n 281:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 285:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n 289:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 28d:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 292:\t0f 85 35 ff ff ff    \tjne    1cd <qemu_iohandler_fill+0x2b>\n 298:\t90                   \tnop\n 299:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 29d:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 2a4:\t00 00 \n 2a6:\t74 05                \tje     2ad <qemu_iohandler_fill+0x10b>\n 2a8:\te8 00 00 00 00       \tcallq  2ad <qemu_iohandler_fill+0x10b>\n 2ad:\tc9                   \tleaveq \n 2ae:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall qemu_iohandler_fill(__int64 a1) {\n  int v2;\n  __int64 i;\n  __int64 <span class=\"supfact\">v4</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  for (i = io_handlers; i; i = *(_QWORD *)(i + Number)) {\n    v2 = Number;\n    if (!*(_BYTE *)(i + Number)) {\n      if (*(_QWORD *)(i + Number) &&\n          (!*(_QWORD *)i ||\n           (*(unsigned int(__fastcall **)(_QWORD))i)(*(_QWORD *)(i + Number))))\n        v2 = Number;\n      if (*(_QWORD *)(i + Number))\n        v2 |= Number;\n      if (v2) {\n        <span class=\"supfact\">v4</span> = Number L;\n        <span class=\"supfact\">v4</span> = *(unsigned int *)(i + Number);\n        WORD2(<span class=\"supfact\">v4</span>) = v2;\n        *(_DWORD *)(i + Number) = *(_DWORD *)(a1 + Number);\n        g_array_append_vals(a1, &<span class=\"supfact\">v4</span>, Number L);\n      } else {\n        *(_DWORD *)(i + Number) = Number;\n      }\n    }\n  }\n  return __readfsqword(Number) ^ v5;\n}", "code_t": "void __cdecl qemu_iohandler_fill(GArray *pollfds) {\n  int events;\n  IOHandlerRecord *ioh;\n  GPollFD <span class=\"supfact\">pfd</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  for (ioh = io_handlers.lh_first; ioh; ioh = ioh->next.le_next) {\n    events = Number;\n    if (!ioh->deleted) {\n      if (ioh->fd_read &&\n          (!ioh->fd_read_poll || ioh->fd_read_poll(ioh->opaque)))\n        events = Number;\n      if (ioh->fd_write)\n        events |= Number;\n      if (events) {\n        <span class=\"supfact\">pfd</span> = Number L;\n        <span class=\"supfact\">pfd</span> = (GPollFD)(unsigned int)ioh->fd;\n        <span class=\"supfact\">pfd</span>.events = events;\n        ioh->pollfds_idx = pollfds->len;\n        g_array_append_vals(pollfds, &<span class=\"supfact\">pfd</span>, Number L);\n      } else {\n        ioh->pollfds_idx = Number;\n      }\n    }\n  }\n}", "var": [{"name": "v4", "type": "struct GPollFD { gint fd; gushort events; gushort revents; }", "ref_name": "pfd", "ref_type": "struct GPollFD { gint fd; gushort events; gushort revents; }"}], "body_in_train": true}, {"repo_owner": "sisoputnfrba", "repo_name": "koopa-2c2013", "path": "sisoputnfrba/koopa-2c2013/34c75c519c5b537a51cc48bc88aa5d84ea6db9a998327113ea4b1c0cad606bbd", "path_in_repo": "sisoputnfrba/koopa-2c2013/Release/koopa", "objdump": "0000000000405d8a <drawable_getTime>:\n  405d8a:\t55                   \tpush   %rbp\n  405d8b:\t48 89 e5             \tmov    %rsp,%rbp\n  405d8e:\t48 83 ec 10          \tsub    $0x10,%rsp\n  405d92:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  405d96:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  405d9b:\t48 89 c7             \tmov    %rax,%rdi\n  405d9e:\te8 ad c3 ff ff       \tcallq  402150 <gettimeofday@plt>\n  405da3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  405da7:\t48 69 f0 e8 03 00 00 \timul   $0x3e8,%rax,%rsi\n  405dae:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  405db2:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n  405db9:\t9b c4 20 \n  405dbc:\t48 89 c8             \tmov    %rcx,%rax\n  405dbf:\t48 f7 ea             \timul   %rdx\n  405dc2:\t48 c1 fa 07          \tsar    $0x7,%rdx\n  405dc6:\t48 89 c8             \tmov    %rcx,%rax\n  405dc9:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  405dcd:\t48 29 c2             \tsub    %rax,%rdx\n  405dd0:\t48 89 d0             \tmov    %rdx,%rax\n  405dd3:\t48 01 f0             \tadd    %rsi,%rax\n  405dd6:\tc9                   \tleaveq \n  405dd7:\tc3                   \tretq   ", "code_s": "__time_t drawable_getTime() {\n  struct timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  return Number * <span class=\"supfact\">tv</span>.tv_sec +\n         <span class=\"supfact\">tv</span>.tv_usec / Number;\n}", "code_t": "__int64 __cdecl drawable_getTime() {\n  timeval <span class=\"supfact\">currentTime</span>;\n  gettimeofday(&<span class=\"supfact\">currentTime</span>, Number L);\n  return Number * <span class=\"supfact\">currentTime</span>.tv_sec +\n         <span class=\"supfact\">currentTime</span>.tv_usec / Number;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "currentTime", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "axbaretto", "repo_name": "torch", "path": "axbaretto/torch/ccd3b3108ab02956fcf5f1d14c863baa19c4e9dc4bbd0ade6143e963a6af6a09", "path_in_repo": "axbaretto/torch/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "0000000000000000 <_ZNKSt6vectorIPKN7testing25MatcherDescriberInterfaceESaIS3_EE3endEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  18:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  1c:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  20:\t48 89 d6             \tmov    %rdx,%rsi\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZNKSt6vectorIPKN7testing25MatcherDescriberInterfaceESaIS3_EE3endEv+0x2b>\n  2b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  2f:\tc9                   \tleaveq \n  30:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<testing MatcherDescriberInterface const *>\nend(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 v3;\n  v3 = *(_QWORD *)(a1 + Number);\n  __gnu_cxx\n      __normal_iterator<testing MatcherDescriberInterface const *const *,\n                        std vector<testing MatcherDescriberInterface const *>>\n          __normal_iterator(&<span class=\"supfact\">v2</span>, &v3);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std vector<const testing MatcherDescriberInterface *> const_iterator __cdecl std\n    vector<testing MatcherDescriberInterface const *>\n    end(const std vector<const testing MatcherDescriberInterface *>\n            *const this) {\n  __gnu_cxx\n      __normal_iterator<const testing MatcherDescriberInterface *const *,\n                        std vector<const testing MatcherDescriberInterface *>>\n          <span class=\"supfact\">v2</span>;\n  testing MatcherDescriberInterface **__i;\n  __i = (testing MatcherDescriberInterface **)this->_M_impl._M_finish;\n  __gnu_cxx\n      __normal_iterator<testing MatcherDescriberInterface const *const *,\n                        std vector<testing MatcherDescriberInterface const *>>\n          __normal_iterator(\n              &<span class=\"supfact\">v2</span>,\n              (const testing MatcherDescriberInterface *const *const *)&__i);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "struct __gnu_cxx::__normal_iterator<const testing::MatcherDescriberInterface* const*,std::vector<const testing::MatcherDescriberInterface*> > { const testing::MatcherDescriberInterface *const * _M_current; }", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<const testing::MatcherDescriberInterface* const*,std::vector<const testing::MatcherDescriberInterface*> > { const testing::MatcherDescriberInterface *const * _M_current; }"}], "body_in_train": true}, {"repo_owner": "cheehongsg", "repo_name": "CPU", "path": "cheehongsg/CPU/f20954972ddb22d64eb4dc7421da2f6bcc8ed328ddab76f1be7b082c1cdbbebc", "path_in_repo": "cheehongsg/CPU/source/kopen.o", "objdump": "000000000000010d <socket_connect>:\n     10d:\t55                   \tpush   %rbp\n     10e:\t48 89 e5             \tmov    %rsp,%rbp\n     111:\t48 83 ec 60          \tsub    $0x60,%rsp\n     115:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n     119:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n     11d:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n     124:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n     12b:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n     132:\t48 c7 45 b8 00 00 00 \tmovq   $0x0,-0x48(%rbp)\n     139:\t00 \n     13a:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     13e:\tba 30 00 00 00       \tmov    $0x30,%edx\n     143:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     148:\t48 89 c7             \tmov    %rax,%rdi\n     14b:\te8 00 00 00 00       \tcallq  150 <socket_connect+0x43>\n     150:\tc7 45 c4 00 00 00 00 \tmovl   $0x0,-0x3c(%rbp)\n     157:\tc7 45 c8 01 00 00 00 \tmovl   $0x1,-0x38(%rbp)\n     15e:\t48 8d 4d b8          \tlea    -0x48(%rbp),%rcx\n     162:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n     166:\t48 8b 75 a0          \tmov    -0x60(%rbp),%rsi\n     16a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     16e:\t48 89 c7             \tmov    %rax,%rdi\n     171:\te8 00 00 00 00       \tcallq  176 <socket_connect+0x69>\n     176:\t85 c0                \ttest   %eax,%eax\n     178:\t74 20                \tje     19a <socket_connect+0x8d>\n     17a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     17f:\te8 00 00 00 00       \tcallq  184 <socket_connect+0x77>\n     184:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     188:\t48 89 c7             \tmov    %rax,%rdi\n     18b:\te8 00 00 00 00       \tcallq  190 <socket_connect+0x83>\n     190:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     195:\te9 1c 01 00 00       \tjmpq   2b6 <socket_connect+0x1a9>\n     19a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     19e:\t8b 50 0c             \tmov    0xc(%rax),%edx\n     1a1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     1a5:\t8b 48 08             \tmov    0x8(%rax),%ecx\n     1a8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     1ac:\t8b 40 04             \tmov    0x4(%rax),%eax\n     1af:\t89 ce                \tmov    %ecx,%esi\n     1b1:\t89 c7                \tmov    %eax,%edi\n     1b3:\te8 00 00 00 00       \tcallq  1b8 <socket_connect+0xab>\n     1b8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     1bb:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n     1bf:\t75 20                \tjne    1e1 <socket_connect+0xd4>\n     1c1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     1c6:\te8 00 00 00 00       \tcallq  1cb <socket_connect+0xbe>\n     1cb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     1cf:\t48 89 c7             \tmov    %rax,%rdi\n     1d2:\te8 00 00 00 00       \tcallq  1d7 <socket_connect+0xca>\n     1d7:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     1dc:\te9 d5 00 00 00       \tjmpq   2b6 <socket_connect+0x1a9>\n     1e1:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n     1e5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     1e8:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n     1ee:\t48 89 d1             \tmov    %rdx,%rcx\n     1f1:\tba 02 00 00 00       \tmov    $0x2,%edx\n     1f6:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     1fb:\t89 c7                \tmov    %eax,%edi\n     1fd:\te8 00 00 00 00       \tcallq  202 <socket_connect+0xf5>\n     202:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     205:\t75 20                \tjne    227 <socket_connect+0x11a>\n     207:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     20c:\te8 00 00 00 00       \tcallq  211 <socket_connect+0x104>\n     211:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     215:\t48 89 c7             \tmov    %rax,%rdi\n     218:\te8 00 00 00 00       \tcallq  21d <socket_connect+0x110>\n     21d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     222:\te9 8f 00 00 00       \tjmpq   2b6 <socket_connect+0x1a9>\n     227:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n     22b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     22e:\t41 b8 08 00 00 00    \tmov    $0x8,%r8d\n     234:\t48 89 d1             \tmov    %rdx,%rcx\n     237:\tba 0d 00 00 00       \tmov    $0xd,%edx\n     23c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     241:\t89 c7                \tmov    %eax,%edi\n     243:\te8 00 00 00 00       \tcallq  248 <socket_connect+0x13b>\n     248:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     24b:\t75 1d                \tjne    26a <socket_connect+0x15d>\n     24d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     252:\te8 00 00 00 00       \tcallq  257 <socket_connect+0x14a>\n     257:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     25b:\t48 89 c7             \tmov    %rax,%rdi\n     25e:\te8 00 00 00 00       \tcallq  263 <socket_connect+0x156>\n     263:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     268:\teb 4c                \tjmp    2b6 <socket_connect+0x1a9>\n     26a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     26e:\t8b 50 10             \tmov    0x10(%rax),%edx\n     271:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     275:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n     279:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     27c:\t48 89 ce             \tmov    %rcx,%rsi\n     27f:\t89 c7                \tmov    %eax,%edi\n     281:\te8 00 00 00 00       \tcallq  286 <socket_connect+0x179>\n     286:\t85 c0                \ttest   %eax,%eax\n     288:\t74 1d                \tje     2a7 <socket_connect+0x19a>\n     28a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     28f:\te8 00 00 00 00       \tcallq  294 <socket_connect+0x187>\n     294:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     298:\t48 89 c7             \tmov    %rax,%rdi\n     29b:\te8 00 00 00 00       \tcallq  2a0 <socket_connect+0x193>\n     2a0:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     2a5:\teb 0f                \tjmp    2b6 <socket_connect+0x1a9>\n     2a7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     2ab:\t48 89 c7             \tmov    %rax,%rdi\n     2ae:\te8 00 00 00 00       \tcallq  2b3 <socket_connect+0x1a6>\n     2b3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     2b6:\tc9                   \tleaveq \n     2b7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall socket_connect(const char *a1, const char *a2) {\n  __int64 result;\n  struct addrinfo *pai;\n  struct addrinfo <span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">v5</span>[Number];\n  int optval;\n  int fd;\n  optval = Number;\n  <span class=\"supfact\">v5</span>[Number] = Number;\n  <span class=\"supfact\">v5</span>[Number] = Number;\n  pai = Number L;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.ai_family = Number;\n  <span class=\"supfact\">s</span>.ai_socktype = Number;\n  if (getaddrinfo(a1, a2, &<span class=\"supfact\">s</span>, &pai)) {\n    perror(String);\n    freeaddrinfo(pai);\n    result = Number;\n  } else {\n    fd = socket(pai->ai_family, pai->ai_socktype, pai->ai_protocol);\n    if (fd == Number) {\n      perror(String);\n      freeaddrinfo(pai);\n      result = Number;\n    } else if (setsockopt(fd, Number, Number, &optval, Number) == Number ||\n               setsockopt(fd, Number, Number, <span class=\"supfact\">v5</span>, Number) ==\n                   Number) {\n      perror(String);\n      freeaddrinfo(pai);\n      result = Number;\n    } else if (connect(fd, pai->ai_addr, pai->ai_addrlen)) {\n      perror(String);\n      freeaddrinfo(pai);\n      result = Number;\n    } else {\n      freeaddrinfo(pai);\n      result = (unsigned int)fd;\n    }\n  }\n  return result;\n}", "code_t": "int __cdecl socket_connect(const char *host, const char *port) {\n  int result;\n  addrinfo *res;\n  addrinfo <span class=\"supfact\">hints</span>;\n  linger <span class=\"supfact\">lng</span>;\n  int on;\n  int fd;\n  on = Number;\n  <span class=\"supfact\">lng</span>.l_onoff = Number;\n  <span class=\"supfact\">lng</span>.l_linger = Number;\n  res = Number L;\n  memset(&<span class=\"supfact\">hints</span>, Number, sizeof(<span class=\"supfact\">hints</span>));\n  <span class=\"supfact\">hints</span>.ai_family = Number;\n  <span class=\"supfact\">hints</span>.ai_socktype = Number;\n  if (getaddrinfo(host, port, &<span class=\"supfact\">hints</span>, &res)) {\n    perror(String);\n    freeaddrinfo(res);\n    result = Number;\n  } else {\n    fd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n    if (fd == Number) {\n      perror(String);\n      freeaddrinfo(res);\n      result = Number;\n    } else if (setsockopt(fd, Number, Number, &on, Number) == Number ||\n               setsockopt(fd, Number, Number, &<span class=\"supfact\">lng</span>, Number) ==\n                   Number) {\n      perror(String);\n      freeaddrinfo(res);\n      result = Number;\n    } else if (connect(fd, res->ai_addr, res->ai_addrlen)) {\n      perror(String);\n      freeaddrinfo(res);\n      result = Number;\n    } else {\n      freeaddrinfo(res);\n      result = fd;\n    }\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "struct linger { int l_onoff; int l_linger; }", "ref_name": "lng", "ref_type": "struct linger { int l_onoff; int l_linger; }"}, {"name": "s", "type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }", "ref_name": "hints", "ref_type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }"}], "body_in_train": true}, {"repo_owner": "yu-chen-surf", "repo_name": "shepherd", "path": "yu-chen-surf/shepherd/157b4bf5206aadc227f1bb6f3eab12ecbd075d2e455dc7211bd52a731a00665d", "path_in_repo": "yu-chen-surf/shepherd/tools/perf/builtin-sched.o", "objdump": "0000000000000bfb <sleep_nsecs>:\n     bfb:\t55                   \tpush   %rbp\n     bfc:\t48 89 e5             \tmov    %rsp,%rbp\n     bff:\t48 83 ec 30          \tsub    $0x30,%rsp\n     c03:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     c07:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     c0e:\t00 00 \n     c10:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     c14:\t31 c0                \txor    %eax,%eax\n     c16:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n     c1a:\t48 ba b7 bf 00 0a 87 \tmovabs $0x12e0be870a00bfb7,%rdx\n     c21:\tbe e0 12 \n     c24:\t48 89 c8             \tmov    %rcx,%rax\n     c27:\t48 f7 e2             \tmul    %rdx\n     c2a:\t48 89 c8             \tmov    %rcx,%rax\n     c2d:\t48 29 d0             \tsub    %rdx,%rax\n     c30:\t48 d1 e8             \tshr    %rax\n     c33:\t48 01 d0             \tadd    %rdx,%rax\n     c36:\t48 c1 e8 1d          \tshr    $0x1d,%rax\n     c3a:\t48 69 c0 ff c9 9a 3b \timul   $0x3b9ac9ff,%rax,%rax\n     c41:\t48 29 c1             \tsub    %rax,%rcx\n     c44:\t48 89 c8             \tmov    %rcx,%rax\n     c47:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     c4b:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n     c4f:\t48 ba b7 bf 00 0a 87 \tmovabs $0x12e0be870a00bfb7,%rdx\n     c56:\tbe e0 12 \n     c59:\t48 89 c8             \tmov    %rcx,%rax\n     c5c:\t48 f7 e2             \tmul    %rdx\n     c5f:\t48 89 c8             \tmov    %rcx,%rax\n     c62:\t48 29 d0             \tsub    %rdx,%rax\n     c65:\t48 d1 e8             \tshr    %rax\n     c68:\t48 01 d0             \tadd    %rdx,%rax\n     c6b:\t48 c1 e8 1d          \tshr    $0x1d,%rax\n     c6f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     c73:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     c77:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c7c:\t48 89 c7             \tmov    %rax,%rdi\n     c7f:\te8 00 00 00 00       \tcallq  c84 <sleep_nsecs+0x89>\n     c84:\t90                   \tnop\n     c85:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     c89:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     c90:\t00 00 \n     c92:\t74 05                \tje     c99 <sleep_nsecs+0x9e>\n     c94:\te8 00 00 00 00       \tcallq  c99 <sleep_nsecs+0x9e>\n     c99:\tc9                   \tleaveq \n     c9a:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall sleep_nsecs(unsigned __int64 a1) {\n  struct timespec <span class=\"supfact\">requested_time</span>;\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  <span class=\"supfact\">requested_time</span>.tv_nsec = a1 % Number;\n  <span class=\"supfact\">requested_time</span>.tv_sec = a1 / Number;\n  nanosleep(&<span class=\"supfact\">requested_time</span>, Number L);\n  return __readfsqword(Number) ^ v3;\n}", "code_t": "void __cdecl sleep_nsecs(u64 nsecs) {\n  timespec <span class=\"supfact\">ts</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  <span class=\"supfact\">ts</span>.tv_nsec = nsecs % Number;\n  <span class=\"supfact\">ts</span>.tv_sec = nsecs / Number;\n  nanosleep(&<span class=\"supfact\">ts</span>, Number L);\n}", "var": [{"name": "requested_time", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": true}, {"repo_owner": "n0izn0iz", "repo_name": "factoria", "path": "n0izn0iz/factoria/12b0124800782588c9ba32315551b8082bbe2d354bc341d5f72540991d7f9187", "path_in_repo": "n0izn0iz/factoria/gnulinux/freetype-2.5.5/src/base/ftbase.o", "objdump": "000000000000c885 <FT_Cos>:\n    c885:\t55                   \tpush   %rbp\n    c886:\t48 89 e5             \tmov    %rsp,%rbp\n    c889:\t48 83 ec 18          \tsub    $0x18,%rsp\n    c88d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    c891:\t48 c7 45 f0 5b d9 db \tmovq   $0xdbd95b,-0x10(%rbp)\n    c898:\t00 \n    c899:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    c8a0:\t00 \n    c8a1:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    c8a5:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n    c8a9:\t48 89 d6             \tmov    %rdx,%rsi\n    c8ac:\t48 89 c7             \tmov    %rax,%rdi\n    c8af:\te8 7d fc ff ff       \tcallq  c531 <ft_trig_pseudo_rotate>\n    c8b4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    c8b8:\t48 83 e8 80          \tsub    $0xffffffffffffff80,%rax\n    c8bc:\t48 c1 f8 08          \tsar    $0x8,%rax\n    c8c0:\tc9                   \tleaveq \n    c8c1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall FT_Cos(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  ft_trig_pseudo_rotate(<span class=\"supfact\">v2</span>, a1);\n  return (<span class=\"supfact\">v2</span>[Number] + Number) >> Number;\n}", "code_t": "FT_Fixed __cdecl FT_Cos(FT_Angle angle) {\n  FT_Vector <span class=\"supfact\">v</span>;\n  <span class=\"supfact\">v</span>.x = Number L;\n  <span class=\"supfact\">v</span>.y = Number L;\n  ft_trig_pseudo_rotate(&<span class=\"supfact\">v</span>, angle);\n  return (<span class=\"supfact\">v</span>.x + Number) >> Number;\n}", "var": [{"name": "v2", "type": "struct FT_Vector { FT_Pos x; FT_Pos y; }", "ref_name": "v", "ref_type": "struct FT_Vector { FT_Pos x; FT_Pos y; }"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/0c220081571b31109458ad0af80da996db681a85a2e92ce9cf7314108079ece6", "path_in_repo": "AlexanderVangelov/pjsip//pjlib-util/bin/pjlib-util-test-x86_64-unknown-linux-gnu", "objdump": "00000000004044cc <crc32_test>:\n  4044cc:\t55                   \tpush   %rbp\n  4044cd:\t48 89 e5             \tmov    %rsp,%rbp\n  4044d0:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4044d4:\te8 95 79 02 00       \tcallq  42be6e <pj_log_get_level>\n  4044d9:\t83 f8 02             \tcmp    $0x2,%eax\n  4044dc:\t7e 14                \tjle    4044f2 <crc32_test+0x26>\n  4044de:\tbe 2b 4f 43 00       \tmov    $0x434f2b,%esi\n  4044e3:\tbf f3 47 43 00       \tmov    $0x4347f3,%edi\n  4044e8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4044ed:\te8 4c 82 02 00       \tcallq  42c73e <pj_log_3>\n  4044f2:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4044f9:\teb 7e                \tjmp    404579 <crc32_test+0xad>\n  4044fb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4044fe:\t48 c1 e0 04          \tshl    $0x4,%rax\n  404502:\t48 05 20 66 44 00    \tadd    $0x446620,%rax\n  404508:\t48 8b 00             \tmov    (%rax),%rax\n  40450b:\t48 89 c7             \tmov    %rax,%rdi\n  40450e:\te8 2d ec ff ff       \tcallq  403140 <strlen@plt>\n  404513:\t48 89 c2             \tmov    %rax,%rdx\n  404516:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404519:\t48 c1 e0 04          \tshl    $0x4,%rax\n  40451d:\t48 05 20 66 44 00    \tadd    $0x446620,%rax\n  404523:\t48 8b 00             \tmov    (%rax),%rax\n  404526:\t48 89 d6             \tmov    %rdx,%rsi\n  404529:\t48 89 c7             \tmov    %rax,%rdi\n  40452c:\te8 3c 8e 00 00       \tcallq  40d36d <pj_crc32_calc>\n  404531:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  404534:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404537:\t48 c1 e0 04          \tshl    $0x4,%rax\n  40453b:\t48 05 28 66 44 00    \tadd    $0x446628,%rax\n  404541:\t8b 00                \tmov    (%rax),%eax\n  404543:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n  404546:\t74 2d                \tje     404575 <crc32_test+0xa9>\n  404548:\te8 21 79 02 00       \tcallq  42be6e <pj_log_get_level>\n  40454d:\t83 f8 02             \tcmp    $0x2,%eax\n  404550:\t7e 19                \tjle    40456b <crc32_test+0x9f>\n  404552:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404555:\t89 c2                \tmov    %eax,%edx\n  404557:\tbe 40 4f 43 00       \tmov    $0x434f40,%esi\n  40455c:\tbf f3 47 43 00       \tmov    $0x4347f3,%edi\n  404561:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404566:\te8 d3 81 02 00       \tcallq  42c73e <pj_log_3>\n  40456b:\tb8 b0 ff ff ff       \tmov    $0xffffffb0,%eax\n  404570:\te9 25 01 00 00       \tjmpq   40469a <crc32_test+0x1ce>\n  404575:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  404579:\t83 7d fc 04          \tcmpl   $0x4,-0x4(%rbp)\n  40457d:\t0f 86 78 ff ff ff    \tjbe    4044fb <crc32_test+0x2f>\n  404583:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40458a:\te9 fc 00 00 00       \tjmpq   40468b <crc32_test+0x1bf>\n  40458f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404592:\t48 c1 e0 04          \tshl    $0x4,%rax\n  404596:\t48 05 20 66 44 00    \tadd    $0x446620,%rax\n  40459c:\t48 8b 00             \tmov    (%rax),%rax\n  40459f:\t48 89 c7             \tmov    %rax,%rdi\n  4045a2:\te8 99 eb ff ff       \tcallq  403140 <strlen@plt>\n  4045a7:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4045ab:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4045ae:\t48 c1 e0 04          \tshl    $0x4,%rax\n  4045b2:\t48 05 20 66 44 00    \tadd    $0x446620,%rax\n  4045b8:\t48 8b 00             \tmov    (%rax),%rax\n  4045bb:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  4045bf:\t48 89 d6             \tmov    %rdx,%rsi\n  4045c2:\t48 89 c7             \tmov    %rax,%rdi\n  4045c5:\te8 a3 8d 00 00       \tcallq  40d36d <pj_crc32_calc>\n  4045ca:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4045cd:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4045d1:\t48 89 c7             \tmov    %rax,%rdi\n  4045d4:\te8 2a 8c 00 00       \tcallq  40d203 <pj_crc32_init>\n  4045d9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4045dd:\t48 d1 e8             \tshr    %rax\n  4045e0:\t48 89 c2             \tmov    %rax,%rdx\n  4045e3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4045e6:\t48 c1 e0 04          \tshl    $0x4,%rax\n  4045ea:\t48 05 20 66 44 00    \tadd    $0x446620,%rax\n  4045f0:\t48 8b 08             \tmov    (%rax),%rcx\n  4045f3:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4045f7:\t48 89 ce             \tmov    %rcx,%rsi\n  4045fa:\t48 89 c7             \tmov    %rax,%rdi\n  4045fd:\te8 16 8c 00 00       \tcallq  40d218 <pj_crc32_update>\n  404602:\t48 83 7d f0 01       \tcmpq   $0x1,-0x10(%rbp)\n  404607:\t76 3d                \tjbe    404646 <crc32_test+0x17a>\n  404609:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40460d:\t48 d1 e8             \tshr    %rax\n  404610:\t48 89 c2             \tmov    %rax,%rdx\n  404613:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  404617:\t48 29 d0             \tsub    %rdx,%rax\n  40461a:\t48 89 c2             \tmov    %rax,%rdx\n  40461d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404620:\t48 c1 e0 04          \tshl    $0x4,%rax\n  404624:\t48 05 20 66 44 00    \tadd    $0x446620,%rax\n  40462a:\t48 8b 00             \tmov    (%rax),%rax\n  40462d:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  404631:\t48 d1 e9             \tshr    %rcx\n  404634:\t48 01 c1             \tadd    %rax,%rcx\n  404637:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40463b:\t48 89 ce             \tmov    %rcx,%rsi\n  40463e:\t48 89 c7             \tmov    %rax,%rdi\n  404641:\te8 d2 8b 00 00       \tcallq  40d218 <pj_crc32_update>\n  404646:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40464a:\t48 89 c7             \tmov    %rax,%rdi\n  40464d:\te8 0b 8d 00 00       \tcallq  40d35d <pj_crc32_final>\n  404652:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  404655:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  404658:\t3b 45 e8             \tcmp    -0x18(%rbp),%eax\n  40465b:\t74 2a                \tje     404687 <crc32_test+0x1bb>\n  40465d:\te8 0c 78 02 00       \tcallq  42be6e <pj_log_get_level>\n  404662:\t83 f8 02             \tcmp    $0x2,%eax\n  404665:\t7e 19                \tjle    404680 <crc32_test+0x1b4>\n  404667:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40466a:\t89 c2                \tmov    %eax,%edx\n  40466c:\tbe 68 4f 43 00       \tmov    $0x434f68,%esi\n  404671:\tbf f3 47 43 00       \tmov    $0x4347f3,%edi\n  404676:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40467b:\te8 be 80 02 00       \tcallq  42c73e <pj_log_3>\n  404680:\tb8 ab ff ff ff       \tmov    $0xffffffab,%eax\n  404685:\teb 13                \tjmp    40469a <crc32_test+0x1ce>\n  404687:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40468b:\t83 7d fc 04          \tcmpl   $0x4,-0x4(%rbp)\n  40468f:\t0f 86 fa fe ff ff    \tjbe    40458f <crc32_test+0xc3>\n  404695:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40469a:\tc9                   \tleaveq \n  40469b:\tc3                   \tretq   ", "code_s": "__int64 crc32_test() {\n  int v0;\n  int v1;\n  int v2;\n  int v3;\n  size_t v4;\n  int v5;\n  int v6;\n  int v7;\n  int v9;\n  int v10;\n  int v11;\n  char <span class=\"supfact\">v12</span>[Number];\n  int v13;\n  int v14;\n  int v15;\n  size_t v16;\n  unsigned int i;\n  if ((int)pj_log_get_level() > Number)\n    pj_log_3((unsigned int)String, (unsigned int)String, v0, v1, v2, v3);\n  for (i = Number; i <= Number; ++i) {\n    v4 = strlen((const char *)*(&crc32_test_data + Number * i));\n    v13 = pj_crc32_calc(*(&crc32_test_data + Number * i), v4);\n    if (v13 != *(_DWORD *)&algn_446628[Number * i]) {\n      if ((int)pj_log_get_level() > Number)\n        pj_log_3((unsigned int)String, (unsigned int)String, i, v5, v6, v7);\n      return Number L;\n    }\n  }\n  for (i = Number;; ++i) {\n    if (i > Number)\n      return Number L;\n    v16 = strlen((const char *)*(&crc32_test_data + Number * i));\n    v15 = pj_crc32_calc(*(&crc32_test_data + Number * i), v16);\n    pj_crc32_init(<span class=\"supfact\">v12</span>);\n    pj_crc32_update(<span class=\"supfact\">v12</span>, *(&crc32_test_data + Number * i),\n                    v16 >> Number);\n    if (v16 > Number)\n      pj_crc32_update(<span class=\"supfact\">v12</span>,\n                      (char *)*(&crc32_test_data + Number * i) +\n                          (v16 >> Number),\n                      v16 - (v16 >> Number));\n    v14 = pj_crc32_final(<span class=\"supfact\">v12</span>);\n    if (v15 != v14)\n      break;\n  }\n  if ((int)pj_log_get_level() > Number)\n    pj_log_3((unsigned int)String, (unsigned int)String, i, v9, v10, v11);\n  return Number L;\n}", "code_t": "int __cdecl crc32_test() {\n  pj_size_t v0;\n  pj_crc32_context_0 <span class=\"supfact\">ctx</span>;\n  pj_uint32_t crc;\n  pj_uint32_t crc1;\n  pj_uint32_t crc0;\n  pj_size_t len;\n  unsigned int i;\n  if (pj_log_get_level() > Number)\n    pj_log_3(String, String);\n  for (i = Number; i <= Number; ++i) {\n    v0 = strlen(crc32_test_data[i].input);\n    crc = pj_crc32_calc((const pj_uint8_t *)crc32_test_data[i].input, v0);\n    if (crc != crc32_test_data[i].crc) {\n      if (pj_log_get_level() > Number)\n        pj_log_3(String, String, i);\n      return Number;\n    }\n  }\n  for (i = Number;; ++i) {\n    if (i > Number)\n      return Number;\n    len = strlen(crc32_test_data[i].input);\n    crc0 = pj_crc32_calc((const pj_uint8_t *)crc32_test_data[i].input, len);\n    pj_crc32_init(&<span class=\"supfact\">ctx</span>);\n    pj_crc32_update(&<span class=\"supfact\">ctx</span>,\n                    (const pj_uint8_t *)crc32_test_data[i].input,\n                    len >> Number);\n    if (len > Number)\n      pj_crc32_update(\n          &<span class=\"supfact\">ctx</span>,\n          (const pj_uint8_t *)&crc32_test_data[i].input[len >> Number],\n          len - (len >> Number));\n    crc1 = pj_crc32_final(&<span class=\"supfact\">ctx</span>);\n    if (crc0 != crc1)\n      break;\n  }\n  if (pj_log_get_level() > Number)\n    pj_log_3(String, String, i);\n  return Number;\n}", "var": [{"name": "v12", "type": "struct pj_crc32_context_0 { pj_uint32_t crc_state; }", "ref_name": "ctx", "ref_type": "struct pj_crc32_context_0 { pj_uint32_t crc_state; }"}], "body_in_train": true}, {"repo_owner": "mthuurne", "repo_name": "qemu-dingoo", "path": "mthuurne/qemu-dingoo/758d6eee7ab087f56f0224cc764da73b1b7c0bb7f92befe9df964d84b7bcf2e2", "path_in_repo": "mthuurne/qemu-dingoo//mips-softmmu/exec.o", "objdump": "0000000000004b61 <gethugepagesize>:\n    4b61:\t55                   \tpush   %rbp\n    4b62:\t48 89 e5             \tmov    %rsp,%rbp\n    4b65:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n    4b6c:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n    4b73:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    4b7a:\t00 00 \n    4b7c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4b80:\t31 c0                \txor    %eax,%eax\n    4b82:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    4b86:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    4b8d:\t48 89 d6             \tmov    %rdx,%rsi\n    4b90:\t48 89 c7             \tmov    %rax,%rdi\n    4b93:\te8 00 00 00 00       \tcallq  4b98 <gethugepagesize+0x37>\n    4b98:\t89 85 7c ff ff ff    \tmov    %eax,-0x84(%rbp)\n    4b9e:\t83 bd 7c ff ff ff 00 \tcmpl   $0x0,-0x84(%rbp)\n    4ba5:\t74 0c                \tje     4bb3 <gethugepagesize+0x52>\n    4ba7:\te8 00 00 00 00       \tcallq  4bac <gethugepagesize+0x4b>\n    4bac:\t8b 00                \tmov    (%rax),%eax\n    4bae:\t83 f8 04             \tcmp    $0x4,%eax\n    4bb1:\t74 cf                \tje     4b82 <gethugepagesize+0x21>\n    4bb3:\t83 bd 7c ff ff ff 00 \tcmpl   $0x0,-0x84(%rbp)\n    4bba:\t74 16                \tje     4bd2 <gethugepagesize+0x71>\n    4bbc:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    4bc3:\t48 89 c7             \tmov    %rax,%rdi\n    4bc6:\te8 00 00 00 00       \tcallq  4bcb <gethugepagesize+0x6a>\n    4bcb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4bd0:\teb 32                \tjmp    4c04 <gethugepagesize+0xa3>\n    4bd2:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    4bd6:\tba f6 58 84 95       \tmov    $0x958458f6,%edx\n    4bdb:\t48 39 d0             \tcmp    %rdx,%rax\n    4bde:\t74 20                \tje     4c00 <gethugepagesize+0x9f>\n    4be0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4be7 <gethugepagesize+0x86>\n    4be7:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n    4bee:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4bf3:\t48 89 c7             \tmov    %rax,%rdi\n    4bf6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4bfb:\te8 00 00 00 00       \tcallq  4c00 <gethugepagesize+0x9f>\n    4c00:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    4c04:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    4c08:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    4c0f:\t00 00 \n    4c11:\t74 05                \tje     4c18 <gethugepagesize+0xb7>\n    4c13:\te8 00 00 00 00       \tcallq  4c18 <gethugepagesize+0xb7>\n    4c18:\tc9                   \tleaveq \n    4c19:\tc3                   \tretq   ", "code_s": "__fsword_t __fastcall gethugepagesize(const char *a1) {\n  __fsword_t result;\n  int v2;\n  struct statfs64 <span class=\"supfact\">v3</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  do\n    v2 = statfs64(a1, &<span class=\"supfact\">v3</span>);\n  while (v2 && *_errno_location() == Number);\n  if (v2) {\n    perror(a1);\n    result = Number L;\n  } else {\n    if (<span class=\"supfact\">v3</span>.f_type != Number L)\n      fprintf(stderr, String, a1);\n    result = <span class=\"supfact\">v3</span>.f_bsize;\n  }\n  return result;\n}", "code_t": "__int64 __cdecl gethugepagesize(const char *path) {\n  __int64 result;\n  int ret;\n  statfs <span class=\"supfact\">fs_0</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  do\n    ret = statfs64(path, (struct statfs64 *)&<span class=\"supfact\">fs_0</span>);\n  while (ret && *_errno_location() == Number);\n  if (ret) {\n    perror(path);\n    result = Number L;\n  } else {\n    if (<span class=\"supfact\">fs_0</span>.f_type != Number L)\n      fprintf(stderr, String, path);\n    result = <span class=\"supfact\">fs_0</span>.f_bsize;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "struct statfs { __fsword_t f_type; __fsword_t f_bsize; __fsblkcnt64_t f_blocks; __fsblkcnt64_t f_bfree; __fsblkcnt64_t f_bavail; __fsfilcnt64_t f_files; __fsfilcnt64_t f_ffree; __fsid_t f_fsid; __fsword_t f_namelen; __fsword_t f_frsize; __fsword_t f_flags; __fsword_t[4] f_spare; }", "ref_name": "fs_0", "ref_type": "struct statfs { __fsword_t f_type; __fsword_t f_bsize; __fsblkcnt64_t f_blocks; __fsblkcnt64_t f_bfree; __fsblkcnt64_t f_bavail; __fsfilcnt64_t f_files; __fsfilcnt64_t f_ffree; __fsid_t f_fsid; __fsword_t f_namelen; __fsword_t f_frsize; __fsword_t f_flags; __fsword_t[4] f_spare; }"}], "body_in_train": true}, {"repo_owner": "chenglueng", "repo_name": "cmping", "path": "chenglueng/cmping/774d8e79ccad16588cfcd6738679b3134d01b3870e9d9a16893db721c0efd1e9", "path_in_repo": "chenglueng/cmping//clisig.o", "objdump": "0000000000000000 <clisig_register_handlers>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n   b:\t48 c7 85 60 ff ff ff \tmovq   $0x0,-0xa0(%rbp)\n  12:\t00 00 00 00 \n  16:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  1d:\t48 83 c0 08          \tadd    $0x8,%rax\n  21:\t48 89 c7             \tmov    %rax,%rdi\n  24:\te8 00 00 00 00       \tcallq  29 <clisig_register_handlers+0x29>\n  29:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  30:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  37:\tba 00 00 00 00       \tmov    $0x0,%edx\n  3c:\t48 89 c6             \tmov    %rax,%rsi\n  3f:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  44:\te8 00 00 00 00       \tcallq  49 <clisig_register_handlers+0x49>\n  49:\t48 c7 85 60 ff ff ff \tmovq   $0x0,-0xa0(%rbp)\n  50:\t00 00 00 00 \n  54:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  5b:\tba 00 00 00 00       \tmov    $0x0,%edx\n  60:\t48 89 c6             \tmov    %rax,%rsi\n  63:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  68:\te8 00 00 00 00       \tcallq  6d <clisig_register_handlers+0x6d>\n  6d:\t90                   \tnop\n  6e:\tc9                   \tleaveq \n  6f:\tc3                   \tretq   ", "code_s": "int clisig_register_handlers() {\n  struct sigaction <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span>.sa_handler = (__sighandler_t)sigint_handler;\n  sigemptyset(&<span class=\"supfact\">v1</span>.sa_mask);\n  <span class=\"supfact\">v1</span>.sa_flags = Number;\n  sigaction(Number, &<span class=\"supfact\">v1</span>, Number L);\n  <span class=\"supfact\">v1</span>.sa_handler = (__sighandler_t)siginfo_handler;\n  return sigaction(Number, &<span class=\"supfact\">v1</span>, Number L);\n}", "code_t": "void __cdecl clisig_register_handlers() {\n  sigaction <span class=\"supfact\">act</span>;\n  <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)sigint_handler;\n  sigemptyset(&<span class=\"supfact\">act</span>.sa_mask);\n  <span class=\"supfact\">act</span>.sa_flags = Number;\n  sigaction_0(Number, &<span class=\"supfact\">act</span>, Number L);\n  <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)siginfo_handler;\n  sigaction_0(Number, &<span class=\"supfact\">act</span>, Number L);\n}", "var": [{"name": "v1", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": false}, {"repo_owner": "mannannlegur", "repo_name": "CTU-FIT-Bachelor", "path": "mannannlegur/CTU-FIT-Bachelor/d8edbf383dfe6ba3837f34c3bb39d9c6ff4b609fee00dd96f08ef3cd000f39eb", "path_in_repo": "mannannlegur/CTU-FIT-Bachelor/PA2/ASCII-Plot/ASCII-Plot/obj/CBarChart.o", "objdump": "0000000000000000 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  10:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  14:\t48 89 d6             \tmov    %rdx,%rsi\n  17:\t48 89 c7             \tmov    %rax,%rdi\n  1a:\te8 00 00 00 00       \tcallq  1f <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv+0x1f>\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\tc9                   \tleaveq \n  24:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>\nbegin(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>, a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std vector<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>\n    iterator __cdecl std vector<std __cxx11 basic_string<\n        char, std char_traits<char>, std allocator<char>>>\n    begin(std vector<std __cxx11 basic_string<\n              char, std char_traits<char>, std allocator<char>>> *const this) {\n  __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      <span class=\"supfact\">v2</span>;\n  __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>, &this->_M_impl._M_start);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*,std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}], "body_in_train": true}, {"repo_owner": "mdsitton", "repo_name": "musicgame", "path": "mdsitton/musicgame/9c82f72c284f32f10ff8090c0c7d5adf80a154bad83e814edeecbfb610fe4c2a", "path_in_repo": "mdsitton/musicgame/extern/spdlog/tests/utils.o", "objdump": "0000000000000000 <_ZN6spdlog17pattern_formatter6formatERNS_7details7log_msgE>:\n   0:\t48 ba b3 94 d6 26 e8 \tmovabs $0x112e0be826d694b3,%rdx\n   7:\t0b 2e 11 \n   a:\t41 54                \tpush   %r12\n   c:\t49 89 fc             \tmov    %rdi,%r12\n   f:\t55                   \tpush   %rbp\n  10:\t48 89 f5             \tmov    %rsi,%rbp\n  13:\t53                   \tpush   %rbx\n  14:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n  1b:\t48 8b 4e 10          \tmov    0x10(%rsi),%rcx\n  1f:\t48 8d 7c 24 50       \tlea    0x50(%rsp),%rdi\n  24:\t48 8d 74 24 10       \tlea    0x10(%rsp),%rsi\n  29:\t48 89 c8             \tmov    %rcx,%rax\n  2c:\t48 c1 f9 3f          \tsar    $0x3f,%rcx\n  30:\t48 f7 ea             \timul   %rdx\n  33:\t48 c1 fa 1a          \tsar    $0x1a,%rdx\n  37:\t48 29 ca             \tsub    %rcx,%rdx\n  3a:\t48 89 54 24 50       \tmov    %rdx,0x50(%rsp)\n  3f:\te8 00 00 00 00       \tcallq  44 <_ZN6spdlog17pattern_formatter6formatERNS_7details7log_msgE+0x44>\n  44:\t49 8b 5c 24 28       \tmov    0x28(%r12),%rbx\n  49:\t4d 8b 64 24 30       \tmov    0x30(%r12),%r12\n  4e:\t4c 39 e3             \tcmp    %r12,%rbx\n  51:\t74 1f                \tje     72 <_ZN6spdlog17pattern_formatter6formatERNS_7details7log_msgE+0x72>\n  53:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n  58:\t48 8b 3b             \tmov    (%rbx),%rdi\n  5b:\t48 83 c3 08          \tadd    $0x8,%rbx\n  5f:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n  64:\t48 89 ee             \tmov    %rbp,%rsi\n  67:\t48 8b 07             \tmov    (%rdi),%rax\n  6a:\tff 50 10             \tcallq  *0x10(%rax)\n  6d:\t49 39 dc             \tcmp    %rbx,%r12\n  70:\t75 e6                \tjne    58 <_ZN6spdlog17pattern_formatter6formatERNS_7details7log_msgE+0x58>\n  72:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  77:\t48 81 c5 48 02 00 00 \tadd    $0x248,%rbp\n  7e:\t48 8d 7c 24 50       \tlea    0x50(%rsp),%rdi\n  83:\tc7 04 24 01 00 00 00 \tmovl   $0x1,(%rsp)\n  8a:\t48 c7 44 24 50 02 00 \tmovq   $0x2,0x50(%rsp)\n  91:\t00 00 \n  93:\t48 89 64 24 58       \tmov    %rsp,0x58(%rsp)\n  98:\tc7 44 24 60 00 00 00 \tmovl   $0x0,0x60(%rsp)\n  9f:\t00 \n  a0:\t48 89 6c 24 68       \tmov    %rbp,0x68(%rsp)\n  a5:\t48 c7 44 24 70 00 00 \tmovq   $0x0,0x70(%rsp)\n  ac:\t00 00 \n  ae:\t48 c7 44 24 78 00 00 \tmovq   $0x0,0x78(%rsp)\n  b5:\t00 00 \n  b7:\t48 c7 84 24 80 00 00 \tmovq   $0x0,0x80(%rsp)\n  be:\t00 00 00 00 00 \n  c3:\te8 00 00 00 00       \tcallq  c8 <_ZN6spdlog17pattern_formatter6formatERNS_7details7log_msgE+0xc8>\n  c8:\t48 8b 7c 24 70       \tmov    0x70(%rsp),%rdi\n  cd:\t48 85 ff             \ttest   %rdi,%rdi\n  d0:\t74 05                \tje     d7 <_ZN6spdlog17pattern_formatter6formatERNS_7details7log_msgE+0xd7>\n  d2:\te8 00 00 00 00       \tcallq  d7 <_ZN6spdlog17pattern_formatter6formatERNS_7details7log_msgE+0xd7>\n  d7:\t48 81 c4 90 00 00 00 \tadd    $0x90,%rsp\n  de:\t5b                   \tpop    %rbx\n  df:\t5d                   \tpop    %rbp\n  e0:\t41 5c                \tpop    %r12\n  e2:\tc3                   \tretq   \n  e3:\t48 89 c5             \tmov    %rax,%rbp\n  e6:\t48 8b 7c 24 70       \tmov    0x70(%rsp),%rdi\n  eb:\t48 85 ff             \ttest   %rdi,%rdi\n  ee:\t74 05                \tje     f5 <_ZN6spdlog17pattern_formatter6formatERNS_7details7log_msgE+0xf5>\n  f0:\te8 00 00 00 00       \tcallq  f5 <_ZN6spdlog17pattern_formatter6formatERNS_7details7log_msgE+0xf5>\n  f5:\t48 89 ef             \tmov    %rbp,%rdi\n  f8:\te8 00 00 00 00       \tcallq  fd <__tcf_0+0x1d>", "code_s": "void __fastcall spdlog pattern_formatter format(spdlog pattern_formatter *this,\n                                                spdlog details log_msg *a2) {\n  __int64 *v2;\n  __int64 *v3;\n  __int64 v4;\n  int v5;\n  struct tm <span class=\"supfact\">tp</span>;\n  time_t timer[Number];\n  int v8;\n  __int64 v9;\n  void *v10;\n  __int64 v11;\n  __int64 v12;\n  timer[Number] = *((_QWORD *)a2 + Number) / Number L;\n  localtime_r(timer, &<span class=\"supfact\">tp</span>);\n  v2 = (__int64 *)*((_QWORD *)this + Number);\n  v3 = (__int64 *)*((_QWORD *)this + Number);\n  while (v3 != v2) {\n    v4 = *v2++;\n    (*(void(__fastcall **)(__int64, spdlog details log_msg *, struct tm *))(\n        *(_QWORD *)v4 + Number L))(v4, a2, &<span class=\"supfact\">tp</span>);\n  }\n  v5 = Number;\n  timer[Number] = Number L;\n  timer[Number] = (time_t)&v5;\n  v8 = Number;\n  v9 = (__int64)a2 + Number;\n  v10 = Number L;\n  v11 = Number L;\n  v12 = Number L;\n  fmt BasicFormatter<char, fmt ArgFormatter<char>> format((__int64)timer,\n                                                          String);\n  if (v10)\n    operator delete(v10);\n}", "code_t": "void __fastcall spdlog pattern_formatter format(spdlog pattern_formatter *this,\n                                                spdlog details log_msg *a2) {\n  __int64 *v2;\n  __int64 *v3;\n  __int64 v4;\n  int v5;\n  struct tm <span class=\"supfact\">tp</span>;\n  time_t timer[Number];\n  int v8;\n  __int64 v9;\n  void *v10;\n  __int64 v11;\n  __int64 v12;\n  timer[Number] = *((_QWORD *)a2 + Number) / Number L;\n  localtime_r(timer, &<span class=\"supfact\">tp</span>);\n  v2 = (__int64 *)*((_QWORD *)this + Number);\n  v3 = (__int64 *)*((_QWORD *)this + Number);\n  while (v3 != v2) {\n    v4 = *v2++;\n    (*(void(__fastcall **)(__int64, spdlog details log_msg *, struct tm *))(\n        *(_QWORD *)v4 + Number L))(v4, a2, &<span class=\"supfact\">tp</span>);\n  }\n  v5 = Number;\n  timer[Number] = Number L;\n  timer[Number] = (time_t)&v5;\n  v8 = Number;\n  v9 = (__int64)a2 + Number;\n  v10 = Number L;\n  v11 = Number L;\n  v12 = Number L;\n  fmt BasicFormatter<char, fmt ArgFormatter<char>> format((__int64)timer,\n                                                          String);\n  if (v10)\n    operator delete(v10);\n}", "var": [{"name": "tp", "type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }", "ref_name": "tp", "ref_type": "struct struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/b603775a2a7796107e2cb83cab2c0f5cd71a7f03123d6be4d6df6d13a492b9eb", "path_in_repo": "XanClic/qemu//xtensa-softmmu/memory.o", "objdump": "000000000000070c <_nocheck__trace_memory_region_ops_read>:\n     70c:\t55                   \tpush   %rbp\n     70d:\t48 89 e5             \tmov    %rsp,%rbp\n     710:\t41 54                \tpush   %r12\n     712:\t53                   \tpush   %rbx\n     713:\t48 83 ec 40          \tsub    $0x40,%rsp\n     717:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n     71a:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     71e:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     722:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n     726:\t44 89 45 c8          \tmov    %r8d,-0x38(%rbp)\n     72a:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     731:\t00 00 \n     733:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     737:\t31 c0                \txor    %eax,%eax\n     739:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 73f <_nocheck__trace_memory_region_ops_read+0x33>\n     73f:\t85 c0                \ttest   %eax,%eax\n     741:\t0f 95 c0             \tsetne  %al\n     744:\t0f b6 c0             \tmovzbl %al,%eax\n     747:\t48 85 c0             \ttest   %rax,%rax\n     74a:\t74 76                \tje     7c2 <_nocheck__trace_memory_region_ops_read+0xb6>\n     74c:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 753 <_nocheck__trace_memory_region_ops_read+0x47>\n     753:\t66 85 c0             \ttest   %ax,%ax\n     756:\t74 6a                \tje     7c2 <_nocheck__trace_memory_region_ops_read+0xb6>\n     758:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     75d:\te8 93 ff ff ff       \tcallq  6f5 <qemu_loglevel_mask>\n     762:\t84 c0                \ttest   %al,%al\n     764:\t74 5c                \tje     7c2 <_nocheck__trace_memory_region_ops_read+0xb6>\n     766:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     76a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     76f:\t48 89 c7             \tmov    %rax,%rdi\n     772:\te8 00 00 00 00       \tcallq  777 <_nocheck__trace_memory_region_ops_read+0x6b>\n     777:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     77b:\t49 89 c4             \tmov    %rax,%r12\n     77e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     782:\t48 89 c3             \tmov    %rax,%rbx\n     785:\te8 00 00 00 00       \tcallq  78a <_nocheck__trace_memory_region_ops_read+0x7e>\n     78a:\t89 c6                \tmov    %eax,%esi\n     78c:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     790:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     793:\t48 83 ec 08          \tsub    $0x8,%rsp\n     797:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     79a:\t50                   \tpush   %rax\n     79b:\tff 75 b0             \tpushq  -0x50(%rbp)\n     79e:\tff 75 b8             \tpushq  -0x48(%rbp)\n     7a1:\t49 89 c9             \tmov    %rcx,%r9\n     7a4:\t41 89 d0             \tmov    %edx,%r8d\n     7a7:\t4c 89 e1             \tmov    %r12,%rcx\n     7aa:\t48 89 da             \tmov    %rbx,%rdx\n     7ad:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 7b4 <_nocheck__trace_memory_region_ops_read+0xa8>\n     7b4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     7b9:\te8 00 00 00 00       \tcallq  7be <_nocheck__trace_memory_region_ops_read+0xb2>\n     7be:\t48 83 c4 20          \tadd    $0x20,%rsp\n     7c2:\t90                   \tnop\n     7c3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7c7:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     7ce:\t00 00 \n     7d0:\t74 05                \tje     7d7 <_nocheck__trace_memory_region_ops_read+0xcb>\n     7d2:\te8 00 00 00 00       \tcallq  7d7 <_nocheck__trace_memory_region_ops_read+0xcb>\n     7d7:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     7db:\t5b                   \tpop    %rbx\n     7dc:\t41 5c                \tpop    %r12\n     7de:\t5d                   \tpop    %rbp\n     7df:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_memory_region_ops_read(\n    unsigned int a1, const void *a2, __int64 a3, __int64 a4, unsigned int a5) {\n  __suseconds_t v5;\n  __time_t v6;\n  unsigned int v7;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v13;\n  v13 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEMORY_REGION_OPS_READ_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v5 = <span class=\"supfact\">tv</span>.tv_usec;\n    v6 = <span class=\"supfact\">tv</span>.tv_sec;\n    v7 = qemu_get_thread_id();\n    qemu_log(String, v7, v6, v5, a1, a2, a3, a4, a5);\n  }\n  return __readfsqword(Number) ^ v13;\n}", "code_t": "void __cdecl nocheck__trace_memory_region_ops_read(int cpu_index, void *mr,\n                                                   uint64_t addr,\n                                                   uint64_t value,\n                                                   unsigned int size) {\n  __suseconds_t v5;\n  __time_t v6;\n  unsigned int v7;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v12;\n  v12 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEMORY_REGION_OPS_READ_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v5 = <span class=\"supfact\">_now</span>.tv_usec;\n    v6 = <span class=\"supfact\">_now</span>.tv_sec;\n    v7 = qemu_get_thread_id();\n    qemu_log(String, v7, v6, v5, (unsigned int)cpu_index, mr, addr, value,\n             size);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "waelchateur", "repo_name": "Alpha_Kernel_Lite-v2.1", "path": "waelchateur/Alpha_Kernel_Lite-v2.1/e2bf6436dcf9b7347663d505dcf20aeba8bd4b15bed06140bb1e748869e04e65", "path_in_repo": "waelchateur/Alpha_Kernel_Lite-v2.1/tools/perf/builtin-lock.o", "objdump": "0000000000001be9 <read_events>:\n    1be9:\t55                   \tpush   %rbp\n    1bea:\t48 89 e5             \tmov    %rsp,%rbp\n    1bed:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n    1bf1:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1bf8:\t00 00 \n    1bfa:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1bfe:\t31 c0                \txor    %eax,%eax\n    1c00:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    1c04:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c09:\tb9 0f 00 00 00       \tmov    $0xf,%ecx\n    1c0e:\t48 89 d7             \tmov    %rdx,%rdi\n    1c11:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    1c14:\t48 c7 45 80 00 00 00 \tmovq   $0x0,-0x80(%rbp)\n    1c1b:\t00 \n    1c1c:\t48 c7 45 98 00 00 00 \tmovq   $0x0,-0x68(%rbp)\n    1c23:\t00 \n    1c24:\tc6 45 f0 01          \tmovb   $0x1,-0x10(%rbp)\n    1c28:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c2f <read_events+0x46>\n    1c2f:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    1c33:\t49 89 d0             \tmov    %rdx,%r8\n    1c36:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1c3b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1c40:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c45:\t48 89 c7             \tmov    %rax,%rdi\n    1c48:\te8 00 00 00 00       \tcallq  1c4d <read_events+0x64>\n    1c4d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1c54 <read_events+0x6b>\n    1c54:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c5b <read_events+0x72>\n    1c5b:\t48 85 c0             \ttest   %rax,%rax\n    1c5e:\t75 1b                \tjne    1c7b <read_events+0x92>\n    1c60:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c65:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1c6a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c6f:\te8 00 00 00 00       \tcallq  1c74 <read_events+0x8b>\n    1c74:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1c79:\teb 4e                \tjmp    1cc9 <read_events+0xe0>\n    1c7b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c82 <read_events+0x99>\n    1c82:\tba 04 00 00 00       \tmov    $0x4,%edx\n    1c87:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c8c:\t48 89 c7             \tmov    %rax,%rdi\n    1c8f:\te8 00 00 00 00       \tcallq  1c94 <read_events+0xab>\n    1c94:\t85 c0                \ttest   %eax,%eax\n    1c96:\t74 1b                \tje     1cb3 <read_events+0xca>\n    1c98:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c9d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1ca2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ca7:\te8 00 00 00 00       \tcallq  1cac <read_events+0xc3>\n    1cac:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1cb1:\teb 16                \tjmp    1cc9 <read_events+0xe0>\n    1cb3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1cba <read_events+0xd1>\n    1cba:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    1cbe:\t48 89 d6             \tmov    %rdx,%rsi\n    1cc1:\t48 89 c7             \tmov    %rax,%rdi\n    1cc4:\te8 00 00 00 00       \tcallq  1cc9 <read_events+0xe0>\n    1cc9:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1ccd:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    1cd4:\t00 00 \n    1cd6:\t74 05                \tje     1cdd <read_events+0xf4>\n    1cd8:\te8 00 00 00 00       \tcallq  1cdd <read_events+0xf4>\n    1cdd:\tc9                   \tleaveq \n    1cde:\tc3                   \tretq   ", "code_s": "__int64 read_events() {\n  __int64 result;\n  __int64 <span class=\"supfact\">v1</span>[Number];\n  <span class=\"supfact\">v1</span>[Number] = __readfsqword(Number);\n  memset(<span class=\"supfact\">v1</span>, Number, Number);\n  <span class=\"supfact\">v1</span>[Number] = (__int64)process_sample_event;\n  <span class=\"supfact\">v1</span>[Number] = (__int64)&perf_event__process_comm;\n  LOBYTE(<span class=\"supfact\">v1</span>[Number]) = Number;\n  session = perf_session__new(input_name, Number L, Number L, Number L,\n                              <span class=\"supfact\">v1</span>);\n  if (session) {\n    if ((unsigned int)_perf_session__set_tracepoints_handlers(\n            session, &lock_tracepoints, Number L)) {\n      eprintf(Number L, String);\n      result = Number;\n    } else {\n      result = perf_session__process_events(session, <span class=\"supfact\">v1</span>);\n    }\n  } else {\n    eprintf(Number L, String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl read_events() {\n  int result;\n  perf_tool <span class=\"supfact\">eops</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  memset(&<span class=\"supfact\">eops</span>, Number, sizeof(<span class=\"supfact\">eops</span>));\n  <span class=\"supfact\">eops</span>.sample = (event_sample)process_sample_event;\n  <span class=\"supfact\">eops</span>.comm = (event_op)&perf_event__process_comm;\n  <span class=\"supfact\">eops</span>.ordered_samples = Number;\n  session = (perf_session *)perf_session__new(input_name, Number L, Number L,\n                                              Number L, &<span class=\"supfact\">eops</span>);\n  if (session) {\n    if ((unsigned int)_perf_session__set_tracepoints_handlers(\n            session, lock_tracepoints, Number L)) {\n      eprintf(Number L, String);\n      result = Number;\n    } else {\n      result = perf_session__process_events(session, &<span class=\"supfact\">eops</span>);\n    }\n  } else {\n    eprintf(Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v1", "type": "struct perf_tool { event_sample sample; event_sample read; event_op mmap; event_op comm; event_op fork; event_op exit; event_op lost; event_op throttle; event_op unthrottle; event_attr_op attr; event_synth_op tracing_data; event_simple_op event_type; event_op2 finished_round; event_op2 build_id; bool ordered_samples; bool ordering_requires_timestamps; PADDING (6); }", "ref_name": "eops", "ref_type": "struct perf_tool { event_sample sample; event_sample read; event_op mmap; event_op comm; event_op fork; event_op exit; event_op lost; event_op throttle; event_op unthrottle; event_attr_op attr; event_synth_op tracing_data; event_simple_op event_type; event_op2 finished_round; event_op2 build_id; bool ordered_samples; bool ordering_requires_timestamps; PADDING (6); }"}], "body_in_train": true}, {"repo_owner": "mohancm", "repo_name": "android_kernel_coolpad_c103", "path": "mohancm/android_kernel_coolpad_c103/f5d195c88a2207b6922eac57d0eb8294592a27fc5f06b5cdde9dab06e269bb59", "path_in_repo": "mohancm/android_kernel_coolpad_c103/tools/perf/util/probe-finder.o", "objdump": "0000000000001cb4 <call_probe_finder>:\n    1cb4:\t55                   \tpush   %rbp\n    1cb5:\t48 89 e5             \tmov    %rsp,%rbp\n    1cb8:\t48 83 ec 50          \tsub    $0x50,%rsp\n    1cbc:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    1cc0:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    1cc4:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1ccb:\t00 00 \n    1ccd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1cd1:\t31 c0                \txor    %eax,%eax\n    1cd3:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n    1cd8:\t75 1e                \tjne    1cf8 <call_probe_finder+0x44>\n    1cda:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1cdf:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1ce4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ce9:\te8 00 00 00 00       \tcallq  1cee <call_probe_finder+0x3a>\n    1cee:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    1cf3:\te9 a9 01 00 00       \tjmpq   1ea1 <call_probe_finder+0x1ed>\n    1cf8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1cfc:\t48 89 c7             \tmov    %rax,%rdi\n    1cff:\te8 00 00 00 00       \tcallq  1d04 <call_probe_finder+0x50>\n    1d04:\t83 f8 2e             \tcmp    $0x2e,%eax\n    1d07:\t74 46                \tje     1d4f <call_probe_finder+0x9b>\n    1d09:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1d0d:\t48 8d 50 48          \tlea    0x48(%rax),%rdx\n    1d11:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1d15:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1d19:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n    1d1d:\t48 83 c1 28          \tadd    $0x28,%rcx\n    1d21:\t48 89 c6             \tmov    %rax,%rsi\n    1d24:\t48 89 cf             \tmov    %rcx,%rdi\n    1d27:\te8 00 00 00 00       \tcallq  1d2c <call_probe_finder+0x78>\n    1d2c:\t48 85 c0             \ttest   %rax,%rax\n    1d2f:\t75 3a                \tjne    1d6b <call_probe_finder+0xb7>\n    1d31:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1d36:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1d3b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d40:\te8 00 00 00 00       \tcallq  1d45 <call_probe_finder+0x91>\n    1d45:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n    1d4a:\te9 52 01 00 00       \tjmpq   1ea1 <call_probe_finder+0x1ed>\n    1d4f:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1d53:\t48 8d 48 48          \tlea    0x48(%rax),%rcx\n    1d57:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1d5b:\tba 20 00 00 00       \tmov    $0x20,%edx\n    1d60:\t48 89 c6             \tmov    %rax,%rsi\n    1d63:\t48 89 cf             \tmov    %rcx,%rdi\n    1d66:\te8 00 00 00 00       \tcallq  1d6b <call_probe_finder+0xb7>\n    1d6b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1d6f:\t48 8d 48 48          \tlea    0x48(%rax),%rcx\n    1d73:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    1d77:\t48 89 c2             \tmov    %rax,%rdx\n    1d7a:\tbe 40 00 00 00       \tmov    $0x40,%esi\n    1d7f:\t48 89 cf             \tmov    %rcx,%rdi\n    1d82:\te8 00 00 00 00       \tcallq  1d87 <call_probe_finder+0xd3>\n    1d87:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1d8b:\t48 8d b8 80 00 00 00 \tlea    0x80(%rax),%rdi\n    1d92:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1d96:\t48 8b 70 18          \tmov    0x18(%rax),%rsi\n    1d9a:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    1d9e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    1da2:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    1da8:\t48 89 d1             \tmov    %rdx,%rcx\n    1dab:\t48 89 fa             \tmov    %rdi,%rdx\n    1dae:\t48 89 c7             \tmov    %rax,%rdi\n    1db1:\te8 00 00 00 00       \tcallq  1db6 <call_probe_finder+0x102>\n    1db6:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    1db9:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    1dbd:\t7e 09                \tjle    1dc8 <call_probe_finder+0x114>\n    1dbf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1dc3:\t48 85 c0             \ttest   %rax,%rax\n    1dc6:\t75 14                \tjne    1ddc <call_probe_finder+0x128>\n    1dc8:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1dcc:\t48 c7 80 80 00 00 00 \tmovq   $0x0,0x80(%rax)\n    1dd3:\t00 00 00 00 \n    1dd7:\te9 98 00 00 00       \tjmpq   1e74 <call_probe_finder+0x1c0>\n    1ddc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1de0:\t48 83 f8 01          \tcmp    $0x1,%rax\n    1de4:\t0f 85 8a 00 00 00    \tjne    1e74 <call_probe_finder+0x1c0>\n    1dea:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1dee:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    1df5:\t0f b6 00             \tmovzbl (%rax),%eax\n    1df8:\t3c 9c                \tcmp    $0x9c,%al\n    1dfa:\t75 78                \tjne    1e74 <call_probe_finder+0x1c0>\n    1dfc:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1e00:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1e04:\t48 85 c0             \ttest   %rax,%rax\n    1e07:\t74 6b                \tje     1e74 <call_probe_finder+0x1c0>\n    1e09:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1e0d:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n    1e11:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1e15:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1e19:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n    1e1d:\t48 89 ce             \tmov    %rcx,%rsi\n    1e20:\t48 89 c7             \tmov    %rax,%rdi\n    1e23:\te8 00 00 00 00       \tcallq  1e28 <call_probe_finder+0x174>\n    1e28:\t85 c0                \ttest   %eax,%eax\n    1e2a:\t75 22                \tjne    1e4e <call_probe_finder+0x19a>\n    1e2c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1e30:\t48 8d 88 80 00 00 00 \tlea    0x80(%rax),%rcx\n    1e37:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1e3b:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    1e3f:\t48 89 ce             \tmov    %rcx,%rsi\n    1e42:\t48 89 c7             \tmov    %rax,%rdi\n    1e45:\te8 00 00 00 00       \tcallq  1e4a <call_probe_finder+0x196>\n    1e4a:\t85 c0                \ttest   %eax,%eax\n    1e4c:\t74 26                \tje     1e74 <call_probe_finder+0x1c0>\n    1e4e:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1e52:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1e56:\t48 89 c2             \tmov    %rax,%rdx\n    1e59:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e5e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1e63:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e68:\te8 00 00 00 00       \tcallq  1e6d <call_probe_finder+0x1b9>\n    1e6d:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n    1e72:\teb 2d                \tjmp    1ea1 <call_probe_finder+0x1ed>\n    1e74:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1e78:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n    1e7c:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n    1e80:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1e84:\t48 89 d6             \tmov    %rdx,%rsi\n    1e87:\t48 89 c7             \tmov    %rax,%rdi\n    1e8a:\tff d1                \tcallq  *%rcx\n    1e8c:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    1e8f:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1e93:\t48 c7 80 80 00 00 00 \tmovq   $0x0,0x80(%rax)\n    1e9a:\t00 00 00 00 \n    1e9e:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    1ea1:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n    1ea5:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n    1eac:\t00 00 \n    1eae:\t74 05                \tje     1eb5 <call_probe_finder+0x201>\n    1eb0:\te8 00 00 00 00       \tcallq  1eb5 <call_probe_finder+0x201>\n    1eb5:\tc9                   \tleaveq \n    1eb6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall call_probe_finder(void *a1, __int64 a2, Dwarf_Error *a3) {\n  __int64 result;\n  __int64 v4;\n  __int64 v5;\n  Dwarf_Attribute <span class=\"supfact\">v6</span>[Number];\n  <span class=\"supfact\">v6</span>[Number] = (Dwarf_Attribute)__readfsqword(Number);\n  if (!a1) {\n    eprintf(Number L, String);\n    return Number L;\n  }\n  if (dwarf_tag((Dwarf_Die)a1, (Dwarf_Half *)a2, a3) == Number) {\n    memcpy((void *)(a2 + Number), a1, Number);\n  } else if (!die_find_realfunc(a2 + Number, *(_QWORD *)(a2 + Number),\n                                a2 + Number)) {\n    eprintf(Number L, String);\n    return Number L;\n  }\n  dwarf_attr((Dwarf_Die)(a2 + Number), Number, <span class=\"supfact\">v6</span>,\n             (Dwarf_Error *)(a2 + Number));\n  if ((int)dwarf_getlocation_addr(<span class=\"supfact\">v6</span>, *(_QWORD *)(a2 + Number),\n                                  a2 + Number, &v4, Number L) > Number &&\n      v4) {\n    if (v4 == Number && **(_BYTE **)(a2 + Number) == Number &&\n        *(_QWORD *)(a2 + Number) &&\n        ((unsigned int)dwarf_cfi_addrframe(*(_QWORD *)(a2 + Number),\n                                           *(_QWORD *)(a2 + Number), &v5) ||\n         (unsigned int)dwarf_frame_cfa(v5, a2 + Number, &v4))) {\n      eprintf(Number L, String, *(_QWORD *)(a2 + Number));\n      return Number L;\n    }\n  } else {\n    *(_QWORD *)(a2 + Number) = Number L;\n  }\n  LODWORD(result) =\n      (*(__int64(__fastcall **)(void *, __int64))(a2 + Number))(a1, a2);\n  *(_QWORD *)(a2 + Number) = Number L;\n  return (unsigned int)result;\n}", "code_t": "int __cdecl call_probe_finder(Dwarf_Die *sc_die, probe_finder *pf_0) {\n  int result;\n  Dwarf_Die pf_0a;\n  Dwarf_Die pf_0b;\n  probe_finder *pf_0c;\n  Dwarf_Die *sc_diea;\n  size_t nops;\n  Dwarf_Frame *frame;\n  Dwarf_Attribute <span class=\"supfact\">fb_attr</span>;\n  unsigned __int64 v10;\n  pf_0a.cu = (Dwarf_CU *)sc_die;\n  pf_0a.addr = pf_0;\n  v10 = __readfsqword(Number);\n  if (!sc_die) {\n    eprintf(Number L, String);\n    return Number;\n  }\n  if (dwarf_tag(pf_0a, (Dwarf_Half *)sc_die, (Dwarf_Error *)pf_0) == Number) {\n    memcpy((char *)pf_0b.addr + Number, pf_0b.cu, Number);\n  } else if (!die_find_realfunc((char *)pf_0b.addr + Number,\n                                *((_QWORD *)pf_0b.addr + Number),\n                                (char *)pf_0b.addr + Number)) {\n    eprintf(Number L, String);\n    return Number;\n  }\n  dwarf_attr(pf_0b, LOWORD(pf_0b.addr) + Number, (Dwarf_Attribute *)&loc_40,\n             (Dwarf_Error *)&<span class=\"supfact\">fb_attr</span>);\n  if ((int)dwarf_getlocation_addr(&<span class=\"supfact\">fb_attr</span>, pf_0c->addr,\n                                  &pf_0c->fb_ops, &nops, Number L) > Number &&\n      nops) {\n    if (nops == Number && pf_0c->fb_ops->atom == Number && pf_0c->cfi &&\n        ((unsigned int)dwarf_cfi_addrframe(pf_0c->cfi, pf_0c->addr, &frame) ||\n         (unsigned int)dwarf_frame_cfa(frame, &pf_0c->fb_ops, &nops))) {\n      eprintf(Number L, String, pf_0c->addr);\n      return Number;\n    }\n  } else {\n    pf_0c->fb_ops = Number L;\n  }\n  result = pf_0c->callback(sc_diea, pf_0c);\n  pf_0c->fb_ops = Number L;\n  return result;\n}", "var": [{"name": "v6", "type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }", "ref_name": "fb_attr", "ref_type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }"}], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/ea0ceb3bc77ef5a916f30c00686629290c3c9cfecfd1bf3ca35a1b27dd548b47", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/NSM_Server.o", "objdump": "0000000000000000 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8b 00             \tmov    (%rax),%rax\n  13:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  17:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  1b:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  1f:\t48 89 d6             \tmov    %rdx,%rsi\n  22:\t48 89 c7             \tmov    %rax,%rdi\n  25:\te8 00 00 00 00       \tcallq  2a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv+0x2a>\n  2a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  2e:\tc9                   \tleaveq \n  2f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>\nbegin(__int64 *a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 v3;\n  v3 = *a1;\n  __gnu_cxx\n      __normal_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>> const *,\n                        std vector<std __cxx11 basic_string<\n                            char, std char_traits<char>, std allocator<char>>>>\n          __normal_iterator(&<span class=\"supfact\">v2</span>, &v3);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std vector<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>\n    const_iterator __cdecl std vector<std __cxx11 basic_string<\n        char, std char_traits<char>, std allocator<char>>>\n    begin(const std vector<std __cxx11 basic_string<\n              char, std char_traits<char>, std allocator<char>>> *const this) {\n  __gnu_cxx __normal_iterator<\n      const std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      <span class=\"supfact\">v2</span>;\n  std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *__i;\n  __i = this->_M_impl._M_start;\n  __gnu_cxx __normal_iterator<\n      std __cxx11 basic_string<char, std char_traits<char>,\n                               std allocator<char>> const *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      __normal_iterator(\n          &<span class=\"supfact\">v2</span>,\n          (const std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>> *const *)&__i);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*,std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >> > { const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}], "body_in_train": true}, {"repo_owner": "niamster", "repo_name": "algorithms", "path": "niamster/algorithms/dbe802820b674f8dfd52986c45bb21ab1759dd9b3f3c86842cb8db27262a3b2f", "path_in_repo": "niamster/algorithms//bitfield", "objdump": "0000000000402181 <generate_array>:\n  402181:\t55                   \tpush   %rbp\n  402182:\t48 89 e5             \tmov    %rsp,%rbp\n  402185:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n  40218c:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  402193:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n  40219a:\t48 89 95 48 ff ff ff \tmov    %rdx,-0xb8(%rbp)\n  4021a1:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  4021a8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4021ad:\t48 89 c7             \tmov    %rax,%rdi\n  4021b0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4021b5:\te8 36 ef ff ff       \tcallq  4010f0 <open@plt>\n  4021ba:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4021bd:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n  4021c1:\t75 3b                \tjne    4021fe <generate_array+0x7d>\n  4021c3:\te8 88 ee ff ff       \tcallq  401050 <__errno_location@plt>\n  4021c8:\t8b 00                \tmov    (%rax),%eax\n  4021ca:\t89 c7                \tmov    %eax,%edi\n  4021cc:\te8 3f ef ff ff       \tcallq  401110 <strerror@plt>\n  4021d1:\t48 89 c1             \tmov    %rax,%rcx\n  4021d4:\t48 8b 05 25 4f 00 00 \tmov    0x4f25(%rip),%rax        # 407100 <__TMC_END__>\n  4021db:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n  4021e2:\tbe e5 49 40 00       \tmov    $0x4049e5,%esi\n  4021e7:\t48 89 c7             \tmov    %rax,%rdi\n  4021ea:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4021ef:\te8 cc ee ff ff       \tcallq  4010c0 <fprintf@plt>\n  4021f4:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4021f9:\te9 0f 02 00 00       \tjmpq   40240d <generate_array+0x28c>\n  4021fe:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  402205:\t8b 00                \tmov    (%rax),%eax\n  402207:\t85 c0                \ttest   %eax,%eax\n  402209:\t75 67                \tjne    402272 <generate_array+0xf1>\n  40220b:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  402212:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402215:\t48 89 d6             \tmov    %rdx,%rsi\n  402218:\t89 c7                \tmov    %eax,%edi\n  40221a:\te8 91 0e 00 00       \tcallq  4030b0 <__fstat>\n  40221f:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  402222:\t75 3b                \tjne    40225f <generate_array+0xde>\n  402224:\te8 27 ee ff ff       \tcallq  401050 <__errno_location@plt>\n  402229:\t8b 00                \tmov    (%rax),%eax\n  40222b:\t89 c7                \tmov    %eax,%edi\n  40222d:\te8 de ee ff ff       \tcallq  401110 <strerror@plt>\n  402232:\t48 89 c1             \tmov    %rax,%rcx\n  402235:\t48 8b 05 c4 4e 00 00 \tmov    0x4ec4(%rip),%rax        # 407100 <__TMC_END__>\n  40223c:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n  402243:\tbe 28 4a 40 00       \tmov    $0x404a28,%esi\n  402248:\t48 89 c7             \tmov    %rax,%rdi\n  40224b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402250:\te8 6b ee ff ff       \tcallq  4010c0 <fprintf@plt>\n  402255:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40225a:\te9 ae 01 00 00       \tjmpq   40240d <generate_array+0x28c>\n  40225f:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  402263:\t48 c1 e8 02          \tshr    $0x2,%rax\n  402267:\t89 c2                \tmov    %eax,%edx\n  402269:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  402270:\t89 10                \tmov    %edx,(%rax)\n  402272:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  402279:\t8b 00                \tmov    (%rax),%eax\n  40227b:\t48 98                \tcltq   \n  40227d:\t48 c1 e0 02          \tshl    $0x2,%rax\n  402281:\t48 89 c7             \tmov    %rax,%rdi\n  402284:\te8 47 ee ff ff       \tcallq  4010d0 <malloc@plt>\n  402289:\t48 89 c2             \tmov    %rax,%rdx\n  40228c:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  402293:\t48 89 10             \tmov    %rdx,(%rax)\n  402296:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40229d:\t48 8b 00             \tmov    (%rax),%rax\n  4022a0:\t48 85 c0             \ttest   %rax,%rax\n  4022a3:\t75 51                \tjne    4022f6 <generate_array+0x175>\n  4022a5:\te8 a6 ed ff ff       \tcallq  401050 <__errno_location@plt>\n  4022aa:\t8b 00                \tmov    (%rax),%eax\n  4022ac:\t89 c7                \tmov    %eax,%edi\n  4022ae:\te8 5d ee ff ff       \tcallq  401110 <strerror@plt>\n  4022b3:\t48 89 c1             \tmov    %rax,%rcx\n  4022b6:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4022bd:\t8b 00                \tmov    (%rax),%eax\n  4022bf:\t48 98                \tcltq   \n  4022c1:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  4022c8:\t00 \n  4022c9:\t48 8b 05 30 4e 00 00 \tmov    0x4e30(%rip),%rax        # 407100 <__TMC_END__>\n  4022d0:\tbe 4f 4a 40 00       \tmov    $0x404a4f,%esi\n  4022d5:\t48 89 c7             \tmov    %rax,%rdi\n  4022d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4022dd:\te8 de ed ff ff       \tcallq  4010c0 <fprintf@plt>\n  4022e2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4022e5:\t89 c7                \tmov    %eax,%edi\n  4022e7:\te8 b4 ed ff ff       \tcallq  4010a0 <close@plt>\n  4022ec:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4022f1:\te9 17 01 00 00       \tjmpq   40240d <generate_array+0x28c>\n  4022f6:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4022fd:\t8b 00                \tmov    (%rax),%eax\n  4022ff:\t48 98                \tcltq   \n  402301:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  402308:\t00 \n  402309:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  402310:\t48 8b 08             \tmov    (%rax),%rcx\n  402313:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402316:\t48 89 ce             \tmov    %rcx,%rsi\n  402319:\t89 c7                \tmov    %eax,%edi\n  40231b:\te8 90 ed ff ff       \tcallq  4010b0 <read@plt>\n  402320:\t48 89 c2             \tmov    %rax,%rdx\n  402323:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  40232a:\t8b 00                \tmov    (%rax),%eax\n  40232c:\t48 98                \tcltq   \n  40232e:\t48 c1 e0 02          \tshl    $0x2,%rax\n  402332:\t48 39 c2             \tcmp    %rax,%rdx\n  402335:\t73 5e                \tjae    402395 <generate_array+0x214>\n  402337:\te8 14 ed ff ff       \tcallq  401050 <__errno_location@plt>\n  40233c:\t8b 00                \tmov    (%rax),%eax\n  40233e:\t89 c7                \tmov    %eax,%edi\n  402340:\te8 cb ed ff ff       \tcallq  401110 <strerror@plt>\n  402345:\t48 89 c1             \tmov    %rax,%rcx\n  402348:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  40234f:\t8b 00                \tmov    (%rax),%eax\n  402351:\t48 98                \tcltq   \n  402353:\t48 8d 34 85 00 00 00 \tlea    0x0(,%rax,4),%rsi\n  40235a:\t00 \n  40235b:\t48 8b 05 9e 4d 00 00 \tmov    0x4d9e(%rip),%rax        # 407100 <__TMC_END__>\n  402362:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n  402369:\t49 89 c8             \tmov    %rcx,%r8\n  40236c:\t48 89 d1             \tmov    %rdx,%rcx\n  40236f:\t48 89 f2             \tmov    %rsi,%rdx\n  402372:\tbe 00 4a 40 00       \tmov    $0x404a00,%esi\n  402377:\t48 89 c7             \tmov    %rax,%rdi\n  40237a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40237f:\te8 3c ed ff ff       \tcallq  4010c0 <fprintf@plt>\n  402384:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402387:\t89 c7                \tmov    %eax,%edi\n  402389:\te8 12 ed ff ff       \tcallq  4010a0 <close@plt>\n  40238e:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  402393:\teb 78                \tjmp    40240d <generate_array+0x28c>\n  402395:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402398:\t89 c7                \tmov    %eax,%edi\n  40239a:\te8 01 ed ff ff       \tcallq  4010a0 <close@plt>\n  40239f:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4023a6:\teb 52                \tjmp    4023fa <generate_array+0x279>\n  4023a8:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4023af:\t48 8b 00             \tmov    (%rax),%rax\n  4023b2:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4023b5:\t48 63 d2             \tmovslq %edx,%rdx\n  4023b8:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  4023bc:\t48 01 d0             \tadd    %rdx,%rax\n  4023bf:\t8b 10                \tmov    (%rax),%edx\n  4023c1:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4023c8:\t48 8b 00             \tmov    (%rax),%rax\n  4023cb:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n  4023ce:\t48 63 c9             \tmovslq %ecx,%rcx\n  4023d1:\t48 c1 e1 02          \tshl    $0x2,%rcx\n  4023d5:\t48 01 c1             \tadd    %rax,%rcx\n  4023d8:\t89 d6                \tmov    %edx,%esi\n  4023da:\tb8 59 17 b7 d1       \tmov    $0xd1b71759,%eax\n  4023df:\t48 0f af c6          \timul   %rsi,%rax\n  4023e3:\t48 c1 e8 20          \tshr    $0x20,%rax\n  4023e7:\tc1 e8 0d             \tshr    $0xd,%eax\n  4023ea:\t69 c0 10 27 00 00    \timul   $0x2710,%eax,%eax\n  4023f0:\t29 c2                \tsub    %eax,%edx\n  4023f2:\t89 d0                \tmov    %edx,%eax\n  4023f4:\t89 01                \tmov    %eax,(%rcx)\n  4023f6:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4023fa:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  402401:\t8b 00                \tmov    (%rax),%eax\n  402403:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  402406:\t7c a0                \tjl     4023a8 <generate_array+0x227>\n  402408:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40240d:\tc9                   \tleaveq \n  40240e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall generate_array(void **a1, int *a2, const char *a3) {\n  int *v3;\n  char *v4;\n  __int64 result;\n  int *v6;\n  char *v7;\n  int *v8;\n  char *v9;\n  int *v10;\n  char *v11;\n  struct stat <span class=\"supfact\">stat_buf</span>;\n  int fd;\n  fd = open(a3, Number);\n  if (fd == Number) {\n    v3 = __errno_location();\n    v4 = strerror(*v3);\n    fprintf(_bss_start, String, a3, v4);\n    return Number;\n  }\n  if (!*a2) {\n    if ((unsigned int)fstat(fd, &<span class=\"supfact\">stat_buf</span>) == Number) {\n      v6 = __errno_location();\n      v7 = strerror(*v6);\n      fprintf(_bss_start, String, a3, v7);\n      return Number;\n    }\n    *a2 = (unsigned __int64)<span class=\"supfact\">stat_buf</span>.st_size >> Number;\n  }\n  *a1 = malloc(Number L * *a2);\n  if (*a1) {\n    if (read(fd, *a1, Number L * *a2) >= (unsigned __int64)(Number L * *a2)) {\n      close(fd);\n      for (fd = Number; fd < *a2; ++fd)\n        *((_DWORD *)*a1 + fd) %= Number;\n      result = Number L;\n    } else {\n      v10 = __errno_location();\n      v11 = strerror(*v10);\n      fprintf(_bss_start, String, Number L * *a2, a3, v11);\n      close(fd);\n      result = Number;\n    }\n  } else {\n    v8 = __errno_location();\n    v9 = strerror(*v8);\n    fprintf(_bss_start, String, Number L * *a2, v9);\n    close(fd);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl generate_array(unsigned int **array, int *count, const char *path) {\n  int *v3;\n  char *v4;\n  int result;\n  int *v6;\n  char *v7;\n  int *v8;\n  char *v9;\n  int *v10;\n  char *v11;\n  stat <span class=\"supfact\">s</span>;\n  int v;\n  v = open(path, Number);\n  if (v == Number) {\n    v3 = __errno_location();\n    v4 = strerror(*v3);\n    fprintf(_bss_start, String, path, v4);\n    return Number;\n  }\n  if (!*count) {\n    if ((unsigned int)fstat(v, &<span class=\"supfact\">s</span>) == Number) {\n      v6 = __errno_location();\n      v7 = strerror(*v6);\n      fprintf(_bss_start, String, path, v7);\n      return Number;\n    }\n    *count = (unsigned __int64)<span class=\"supfact\">s</span>.st_size >> Number;\n  }\n  *array = (unsigned int *)malloc(Number L * *count);\n  if (*array) {\n    if (read(v, *array, Number L * *count) >=\n        (unsigned __int64)(Number L * *count)) {\n      close(v);\n      for (v = Number; v < *count; ++v)\n        (*array)[v] %= Number;\n      result = Number;\n    } else {\n      v10 = __errno_location();\n      v11 = strerror(*v10);\n      fprintf(_bss_start, String, Number L * *count, path, v11);\n      close(v);\n      result = Number;\n    }\n  } else {\n    v8 = __errno_location();\n    v9 = strerror(*v8);\n    fprintf(_bss_start, String, Number L * *count, v9);\n    close(v);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "stat_buf", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "s", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "anhquang", "repo_name": "contiki", "path": "anhquang/contiki/305b238f5190679dc0b8ea362bd1fec7ceb0aecee9e5f39f6d0a0bf525ffc120", "path_in_repo": "anhquang/contiki/examples/telnet-server/obj_minimal-net/collect.o", "objdump": "0000000000000914 <handle_ack>:\n     914:\t55                   \tpush   %rbp\n     915:\t48 89 e5             \tmov    %rsp,%rbp\n     918:\t53                   \tpush   %rbx\n     919:\t48 83 ec 28          \tsub    $0x28,%rsp\n     91d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     921:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     925:\t48 8d 98 da 01 00 00 \tlea    0x1da(%rax),%rbx\n     92c:\tbf 18 00 00 00       \tmov    $0x18,%edi\n     931:\te8 00 00 00 00       \tcallq  936 <handle_ack+0x22>\n     936:\t48 89 de             \tmov    %rbx,%rsi\n     939:\t48 89 c7             \tmov    %rax,%rdi\n     93c:\te8 00 00 00 00       \tcallq  941 <handle_ack+0x2d>\n     941:\t85 c0                \ttest   %eax,%eax\n     943:\t0f 84 df 01 00 00    \tje     b28 <handle_ack+0x214>\n     949:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n     94e:\te8 00 00 00 00       \tcallq  953 <handle_ack+0x3f>\n     953:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     957:\t0f b6 92 de 01 00 00 \tmovzbl 0x1de(%rdx),%edx\n     95e:\t0f b6 d2             \tmovzbl %dl,%edx\n     961:\t66 39 d0             \tcmp    %dx,%ax\n     964:\t0f 85 be 01 00 00    \tjne    b28 <handle_ack+0x214>\n     96a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 970 <handle_ack+0x5c>\n     970:\t83 c0 01             \tadd    $0x1,%eax\n     973:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 979 <handle_ack+0x65>\n     979:\te8 00 00 00 00       \tcallq  97e <handle_ack+0x6a>\n     97e:\t8b 00                \tmov    (%rax),%eax\n     980:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     983:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     987:\t0f b6 80 e0 01 00 00 \tmovzbl 0x1e0(%rax),%eax\n     98e:\t84 c0                \ttest   %al,%al\n     990:\t75 0b                \tjne    99d <handle_ack+0x89>\n     992:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     996:\tc6 80 e0 01 00 00 02 \tmovb   $0x2,0x1e0(%rax)\n     99d:\tbf 18 00 00 00       \tmov    $0x18,%edi\n     9a2:\te8 00 00 00 00       \tcallq  9a7 <handle_ack+0x93>\n     9a7:\t48 89 c2             \tmov    %rax,%rdx\n     9aa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     9ae:\t48 05 00 01 00 00    \tadd    $0x100,%rax\n     9b4:\t48 89 d6             \tmov    %rdx,%rsi\n     9b7:\t48 89 c7             \tmov    %rax,%rdi\n     9ba:\te8 00 00 00 00       \tcallq  9bf <handle_ack+0xab>\n     9bf:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     9c3:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     9c8:\t74 3d                \tje     a07 <handle_ack+0xf3>\n     9ca:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     9ce:\t0f b6 80 e0 01 00 00 \tmovzbl 0x1e0(%rax),%eax\n     9d5:\t0f b6 d0             \tmovzbl %al,%edx\n     9d8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9dc:\t89 d6                \tmov    %edx,%esi\n     9de:\t48 89 c7             \tmov    %rax,%rdi\n     9e1:\te8 00 00 00 00       \tcallq  9e6 <handle_ack+0xd2>\n     9e6:\t0f b7 45 e6          \tmovzwl -0x1a(%rbp),%eax\n     9ea:\t0f b7 d0             \tmovzwl %ax,%edx\n     9ed:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9f1:\t89 d6                \tmov    %edx,%esi\n     9f3:\t48 89 c7             \tmov    %rax,%rdi\n     9f6:\te8 00 00 00 00       \tcallq  9fb <handle_ack+0xe7>\n     9fb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     9ff:\t48 89 c7             \tmov    %rax,%rdi\n     a02:\te8 b1 f7 ff ff       \tcallq  1b8 <update_rtmetric>\n     a07:\t0f b6 45 e4          \tmovzbl -0x1c(%rbp),%eax\n     a0b:\t84 c0                \ttest   %al,%al\n     a0d:\t79 40                \tjns    a4f <handle_ack+0x13b>\n     a0f:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     a14:\t74 2d                \tje     a43 <handle_ack+0x12f>\n     a16:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a1a:\t48 89 c7             \tmov    %rax,%rdi\n     a1d:\te8 00 00 00 00       \tcallq  a22 <handle_ack+0x10e>\n     a22:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a26:\t0f b6 80 e1 01 00 00 \tmovzbl 0x1e1(%rax),%eax\n     a2d:\t0f b6 c0             \tmovzbl %al,%eax\n     a30:\t01 c0                \tadd    %eax,%eax\n     a32:\t0f b7 d0             \tmovzwl %ax,%edx\n     a35:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a39:\t89 d6                \tmov    %edx,%esi\n     a3b:\t48 89 c7             \tmov    %rax,%rdi\n     a3e:\te8 00 00 00 00       \tcallq  a43 <handle_ack+0x12f>\n     a43:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a47:\t48 89 c7             \tmov    %rax,%rdi\n     a4a:\te8 69 f7 ff ff       \tcallq  1b8 <update_rtmetric>\n     a4f:\t0f b6 45 e4          \tmovzbl -0x1c(%rbp),%eax\n     a53:\t0f b6 c0             \tmovzbl %al,%eax\n     a56:\t83 e0 40             \tand    $0x40,%eax\n     a59:\t85 c0                \ttest   %eax,%eax\n     a5b:\t75 11                \tjne    a6e <handle_ack+0x15a>\n     a5d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a61:\t48 89 c7             \tmov    %rax,%rdi\n     a64:\te8 28 fe ff ff       \tcallq  891 <send_next_packet>\n     a69:\te9 92 00 00 00       \tjmpq   b00 <handle_ack+0x1ec>\n     a6e:\t0f b6 45 e4          \tmovzbl -0x1c(%rbp),%eax\n     a72:\t0f b6 c0             \tmovzbl %al,%eax\n     a75:\t83 e0 20             \tand    $0x20,%eax\n     a78:\t85 c0                \ttest   %eax,%eax\n     a7a:\t74 0e                \tje     a8a <handle_ack+0x176>\n     a7c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a80:\t48 89 c7             \tmov    %rax,%rdi\n     a83:\te8 09 fe ff ff       \tcallq  891 <send_next_packet>\n     a88:\teb 76                \tjmp    b00 <handle_ack+0x1ec>\n     a8a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a8e:\t0f b6 80 e1 01 00 00 \tmovzbl 0x1e1(%rax),%eax\n     a95:\t0f b6 d0             \tmovzbl %al,%edx\n     a98:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a9c:\t89 d6                \tmov    %edx,%esi\n     a9e:\t48 89 c7             \tmov    %rax,%rdi\n     aa1:\te8 00 00 00 00       \tcallq  aa6 <handle_ack+0x192>\n     aa6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     aaa:\t48 89 c7             \tmov    %rax,%rdi\n     aad:\te8 06 f7 ff ff       \tcallq  1b8 <update_rtmetric>\n     ab2:\te8 00 00 00 00       \tcallq  ab7 <handle_ack+0x1a3>\n     ab7:\t89 c2                \tmov    %eax,%edx\n     ab9:\t89 d0                \tmov    %edx,%eax\n     abb:\t66 c1 e8 05          \tshr    $0x5,%ax\n     abf:\t0f b7 c0             \tmovzwl %ax,%eax\n     ac2:\t69 c0 19 04 00 00    \timul   $0x419,%eax,%eax\n     ac8:\tc1 e8 10             \tshr    $0x10,%eax\n     acb:\t66 d1 e8             \tshr    %ax\n     ace:\t66 69 c0 a0 0f       \timul   $0xfa0,%ax,%ax\n     ad3:\t29 c2                \tsub    %eax,%edx\n     ad5:\t89 d0                \tmov    %edx,%eax\n     ad7:\t0f b7 c0             \tmovzwl %ax,%eax\n     ada:\t05 a0 0f 00 00       \tadd    $0xfa0,%eax\n     adf:\t48 98                \tcltq   \n     ae1:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     ae5:\t48 8d ba a0 00 00 00 \tlea    0xa0(%rdx),%rdi\n     aec:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     af0:\t48 89 d1             \tmov    %rdx,%rcx\n     af3:\tba 00 00 00 00       \tmov    $0x0,%edx\n     af8:\t48 89 c6             \tmov    %rax,%rsi\n     afb:\te8 00 00 00 00       \tcallq  b00 <handle_ack+0x1ec>\n     b00:\t0f b6 45 e4          \tmovzbl -0x1c(%rbp),%eax\n     b04:\t0f b6 c0             \tmovzbl %al,%eax\n     b07:\t83 e0 10             \tand    $0x10,%eax\n     b0a:\t85 c0                \ttest   %eax,%eax\n     b0c:\t74 0c                \tje     b1a <handle_ack+0x206>\n     b0e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b12:\t48 89 c7             \tmov    %rax,%rdi\n     b15:\te8 41 f5 ff ff       \tcallq  5b <bump_advertisement>\n     b1a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b1e:\t48 89 c7             \tmov    %rax,%rdi\n     b21:\te8 4a 0b 00 00       \tcallq  1670 <set_keepalive_timer>\n     b26:\teb 10                \tjmp    b38 <handle_ack+0x224>\n     b28:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # b2e <handle_ack+0x21a>\n     b2e:\t83 c0 01             \tadd    $0x1,%eax\n     b31:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # b37 <handle_ack+0x223>\n     b37:\t90                   \tnop\n     b38:\t90                   \tnop\n     b39:\t48 83 c4 28          \tadd    $0x28,%rsp\n     b3d:\t5b                   \tpop    %rbx\n     b3e:\t5d                   \tpop    %rbp\n     b3f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall handle_ack(_BYTE *a1) {\n  __int64 v1;\n  __int64 v2;\n  unsigned __int16 v3;\n  __int64 result;\n  int <span class=\"supfact\">v5</span>;\n  __int64 v6;\n  v1 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v1, a1 + Number) &&\n      (unsigned __int16)packetbuf_attr(Number L) ==\n          (unsigned __int8)a1[Number]) {\n    ++stats[Number];\n    <span class=\"supfact\">v5</span> = *(_DWORD *)packetbuf_dataptr();\n    if (!a1[Number])\n      a1[Number] = Number;\n    v2 = packetbuf_addr(Number L);\n    v6 = collect_neighbor_list_find(a1 + Number, v2);\n    if (v6) {\n      collect_neighbor_tx(v6, (unsigned __int8)a1[Number]);\n      collect_neighbor_update_rtmetric(v6, HIWORD(<span class=\"supfact\">v5</span>));\n      update_rtmetric((__int64)a1);\n    }\n    if ((<span class=\"supfact\">v5</span> & Number) != Number) {\n      if (v6) {\n        collect_neighbor_set_congested(v6);\n        collect_neighbor_tx(\n            v6, (unsigned __int16)(Number * (unsigned __int8)a1[Number]));\n      }\n      update_rtmetric((__int64)a1);\n    }\n    if ((<span class=\"supfact\">v5</span> & Number) == Number ||\n        (<span class=\"supfact\">v5</span> & Number) != Number) {\n      send_next_packet(a1);\n    } else {\n      collect_neighbor_tx(v6, (unsigned __int8)a1[Number]);\n      update_rtmetric((__int64)a1);\n      v3 = random_rand();\n      ctimer_set(a1 + Number, (int)(v3 % Number + Number), retransmit_callback,\n                 a1);\n    }\n    if ((<span class=\"supfact\">v5</span> & Number) != Number)\n      bump_advertisement((__int64)a1);\n    result = set_keepalive_timer(a1);\n  } else {\n    result = (unsigned int)(stats[Number] + Number);\n    stats[Number] = result;\n  }\n  return result;\n}", "code_t": "void __cdecl handle_ack(collect_conn *tc) {\n  __int64 v1;\n  __int64 v2;\n  unsigned __int16 v3;\n  ack_msg <span class=\"supfact\">msg</span>;\n  collect_neighbor *n;\n  v1 = packetbuf_addr(Number L);\n  if ((unsigned int)rimeaddr_cmp(v1, &tc->current_parent) &&\n      (unsigned __int16)packetbuf_attr(Number L) == tc->seqno) {\n    ++stats.ackrecv;\n    <span class=\"supfact\">msg</span> = *(ack_msg *)packetbuf_dataptr();\n    if (!tc->transmissions)\n      tc->transmissions = Number;\n    v2 = packetbuf_addr(Number L);\n    n = (collect_neighbor *)collect_neighbor_list_find(&tc->neighbor_list, v2);\n    if (n) {\n      collect_neighbor_tx(n, tc->transmissions);\n      collect_neighbor_update_rtmetric(n, <span class=\"supfact\">msg</span>.rtmetric);\n      update_rtmetric(tc);\n    }\n    if ((<span class=\"supfact\">msg</span>.flags & Number) != Number) {\n      if (n) {\n        collect_neighbor_set_congested(n);\n        collect_neighbor_tx(n, (unsigned __int16)(Number * tc->max_rexmits));\n      }\n      update_rtmetric(tc);\n    }\n    if ((<span class=\"supfact\">msg</span>.flags & Number) == Number ||\n        (<span class=\"supfact\">msg</span>.flags & Number) != Number) {\n      send_next_packet(tc);\n    } else {\n      collect_neighbor_tx(n, tc->max_rexmits);\n      update_rtmetric(tc);\n      v3 = random_rand();\n      ctimer_set(&tc->retransmission_timer, (int)(v3 % Number + Number),\n                 retransmit_callback, tc);\n    }\n    if ((<span class=\"supfact\">msg</span>.flags & Number) != Number)\n      bump_advertisement(tc);\n    set_keepalive_timer(tc);\n  } else {\n    ++stats.badack;\n  }\n}", "var": [{"name": "v5", "type": "struct ack_msg { uint8_t flags; uint8_t dummy; uint16_t rtmetric; }", "ref_name": "msg", "ref_type": "struct ack_msg { uint8_t flags; uint8_t dummy; uint16_t rtmetric; }"}], "body_in_train": true}, {"repo_owner": "thecoracle", "repo_name": "servePi_scripts", "path": "thecoracle/servePi_scripts/295869bfb9fda888a34360b4dd3c0a5232be5f990b5ab4cf8b2a91d5c74f1477", "path_in_repo": "thecoracle/servePi_scripts/To be looked at/crawdad-master/vendor/github.com/go-redis/redis/testdata/redis/deps/lua/src/lparser.o", "objdump": "0000000000001c80 <funcargs>:\n    1c80:\t55                   \tpush   %rbp\n    1c81:\t48 89 e5             \tmov    %rsp,%rbp\n    1c84:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1c88:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1c8c:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    1c90:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1c94:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1c98:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1c9c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1ca0:\t8b 40 04             \tmov    0x4(%rax),%eax\n    1ca3:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    1ca6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1caa:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1cad:\t3d 1e 01 00 00       \tcmp    $0x11e,%eax\n    1cb2:\t0f 84 b9 00 00 00    \tje     1d71 <funcargs+0xf1>\n    1cb8:\t3d 1e 01 00 00       \tcmp    $0x11e,%eax\n    1cbd:\t0f 8f d7 00 00 00    \tjg     1d9a <funcargs+0x11a>\n    1cc3:\t83 f8 28             \tcmp    $0x28,%eax\n    1cc6:\t74 0e                \tje     1cd6 <funcargs+0x56>\n    1cc8:\t83 f8 7b             \tcmp    $0x7b,%eax\n    1ccb:\t0f 84 8b 00 00 00    \tje     1d5c <funcargs+0xdc>\n    1cd1:\te9 c4 00 00 00       \tjmpq   1d9a <funcargs+0x11a>\n    1cd6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1cda:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1cdd:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n    1ce0:\t74 11                \tje     1cf3 <funcargs+0x73>\n    1ce2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1ce6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ceb:\t48 89 c7             \tmov    %rax,%rdi\n    1cee:\te8 00 00 00 00       \tcallq  1cf3 <funcargs+0x73>\n    1cf3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1cf7:\t48 89 c7             \tmov    %rax,%rdi\n    1cfa:\te8 00 00 00 00       \tcallq  1cff <funcargs+0x7f>\n    1cff:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1d03:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1d06:\t83 f8 29             \tcmp    $0x29,%eax\n    1d09:\t75 09                \tjne    1d14 <funcargs+0x94>\n    1d0b:\tc7 45 d0 00 00 00 00 \tmovl   $0x0,-0x30(%rbp)\n    1d12:\teb 2b                \tjmp    1d3f <funcargs+0xbf>\n    1d14:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    1d18:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1d1c:\t48 89 d6             \tmov    %rdx,%rsi\n    1d1f:\t48 89 c7             \tmov    %rax,%rdi\n    1d22:\te8 e5 fe ff ff       \tcallq  1c0c <explist1>\n    1d27:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n    1d2b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1d2f:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1d34:\t48 89 ce             \tmov    %rcx,%rsi\n    1d37:\t48 89 c7             \tmov    %rax,%rdi\n    1d3a:\te8 00 00 00 00       \tcallq  1d3f <funcargs+0xbf>\n    1d3f:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    1d42:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1d46:\t89 d1                \tmov    %edx,%ecx\n    1d48:\tba 28 00 00 00       \tmov    $0x28,%edx\n    1d4d:\tbe 29 00 00 00       \tmov    $0x29,%esi\n    1d52:\t48 89 c7             \tmov    %rax,%rdi\n    1d55:\te8 76 e4 ff ff       \tcallq  1d0 <check_match>\n    1d5a:\teb 54                \tjmp    1db0 <funcargs+0x130>\n    1d5c:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    1d60:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1d64:\t48 89 d6             \tmov    %rdx,%rsi\n    1d67:\t48 89 c7             \tmov    %rax,%rdi\n    1d6a:\te8 85 f9 ff ff       \tcallq  16f4 <constructor>\n    1d6f:\teb 3f                \tjmp    1db0 <funcargs+0x130>\n    1d71:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1d75:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    1d79:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n    1d7d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1d81:\t48 89 ce             \tmov    %rcx,%rsi\n    1d84:\t48 89 c7             \tmov    %rax,%rdi\n    1d87:\te8 6b e5 ff ff       \tcallq  2f7 <codestring>\n    1d8c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1d90:\t48 89 c7             \tmov    %rax,%rdi\n    1d93:\te8 00 00 00 00       \tcallq  1d98 <funcargs+0x118>\n    1d98:\teb 16                \tjmp    1db0 <funcargs+0x130>\n    1d9a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1d9e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1da3:\t48 89 c7             \tmov    %rax,%rdi\n    1da6:\te8 00 00 00 00       \tcallq  1dab <funcargs+0x12b>\n    1dab:\te9 a0 00 00 00       \tjmpq   1e50 <funcargs+0x1d0>\n    1db0:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1db4:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1db7:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    1dba:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    1dbd:\t83 f8 0d             \tcmp    $0xd,%eax\n    1dc0:\t74 08                \tje     1dca <funcargs+0x14a>\n    1dc2:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    1dc5:\t83 f8 0e             \tcmp    $0xe,%eax\n    1dc8:\t75 09                \tjne    1dd3 <funcargs+0x153>\n    1dca:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n    1dd1:\teb 2c                \tjmp    1dff <funcargs+0x17f>\n    1dd3:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    1dd6:\t85 c0                \ttest   %eax,%eax\n    1dd8:\t74 13                \tje     1ded <funcargs+0x16d>\n    1dda:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    1dde:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1de2:\t48 89 d6             \tmov    %rdx,%rsi\n    1de5:\t48 89 c7             \tmov    %rax,%rdi\n    1de8:\te8 00 00 00 00       \tcallq  1ded <funcargs+0x16d>\n    1ded:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1df1:\t8b 40 3c             \tmov    0x3c(%rax),%eax\n    1df4:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n    1df7:\t83 c2 01             \tadd    $0x1,%edx\n    1dfa:\t29 d0                \tsub    %edx,%eax\n    1dfc:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1dff:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1e02:\t8d 48 01             \tlea    0x1(%rax),%ecx\n    1e05:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n    1e08:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1e0c:\t41 b8 02 00 00 00    \tmov    $0x2,%r8d\n    1e12:\tbe 1c 00 00 00       \tmov    $0x1c,%esi\n    1e17:\t48 89 c7             \tmov    %rax,%rdi\n    1e1a:\te8 00 00 00 00       \tcallq  1e1f <funcargs+0x19f>\n    1e1f:\t89 c2                \tmov    %eax,%edx\n    1e21:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1e25:\tbe 0d 00 00 00       \tmov    $0xd,%esi\n    1e2a:\t48 89 c7             \tmov    %rax,%rdi\n    1e2d:\te8 88 e4 ff ff       \tcallq  2ba <init_exp>\n    1e32:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    1e35:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1e39:\t89 d6                \tmov    %edx,%esi\n    1e3b:\t48 89 c7             \tmov    %rax,%rdi\n    1e3e:\te8 00 00 00 00       \tcallq  1e43 <funcargs+0x1c3>\n    1e43:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    1e46:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1e49:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1e4d:\t89 50 3c             \tmov    %edx,0x3c(%rax)\n    1e50:\tc9                   \tleaveq \n    1e51:\tc3                   \tretq   ", "code_s": "__int64 __fastcall funcargs(__int64 a1, _DWORD *a2) {\n  int v2;\n  __int64 result;\n  int v4;\n  int <span class=\"supfact\">v5</span>[Number];\n  unsigned int v6;\n  unsigned int v7;\n  __int64 v8;\n  unsigned int v9;\n  v8 = *(_QWORD *)(a1 + Number);\n  v7 = *(_DWORD *)(a1 + Number);\n  v2 = *(_DWORD *)(a1 + Number);\n  if (v2 == Number) {\n    codestring(a1, <span class=\"supfact\">v5</span>, *(_QWORD *)(a1 + Number));\n    luaX_next(a1);\n  } else {\n    if (v2 > Number)\n      return luaX_syntaxerror(a1, String);\n    if (v2 == Number) {\n      if (v7 != *(_DWORD *)(a1 + Number))\n        luaX_syntaxerror(a1, String);\n      luaX_next(a1);\n      if (*(_DWORD *)(a1 + Number) == Number) {\n        <span class=\"supfact\">v5</span>[Number] = Number;\n      } else {\n        explist1(a1, (__int64)<span class=\"supfact\">v5</span>);\n        luaK_setreturns(v8, <span class=\"supfact\">v5</span>, Number);\n      }\n      check_match(a1, Number, Number, v7);\n    } else {\n      if (v2 != Number)\n        return luaX_syntaxerror(a1, String);\n      constructor(a1, <span class=\"supfact\">v5</span>);\n    }\n  }\n  v6 = a2[Number];\n  if (<span class=\"supfact\">v5</span>[Number] == Number ||\n      <span class=\"supfact\">v5</span>[Number] == Number) {\n    v9 = Number;\n  } else {\n    if (<span class=\"supfact\">v5</span>[Number])\n      luaK_exp2nextreg(v8, <span class=\"supfact\">v5</span>);\n    v9 = *(_DWORD *)(v8 + Number) - (v6 + Number);\n  }\n  v4 = luaK_codeABC(v8, Number L, v6, v9 + Number, Number L);\n  init_exp(a2, Number, v4);\n  luaK_fixline(v8, v7);\n  result = v8;\n  *(_DWORD *)(v8 + Number) = v6 + Number;\n  return result;\n}", "code_t": "void __cdecl funcargs(LexState_0 *ls, expdesc_0 *f) {\n  int v2;\n  int v3;\n  expdesc_0 <span class=\"supfact\">args</span>;\n  int base;\n  int line;\n  FuncState_0 *fs_0;\n  int nparams;\n  fs_0 = ls->fs;\n  line = ls->linenumber;\n  v2 = ls->t.token;\n  if (v2 == Number) {\n    codestring(ls, &<span class=\"supfact\">args</span>, ls->t.seminfo.ts);\n    luaX_next(ls);\n  } else {\n    if (v2 > Number) {\n    LABEL_14:\n      luaX_syntaxerror(ls, String);\n      return;\n    }\n    if (v2 == Number) {\n      if (line != ls->lastline)\n        luaX_syntaxerror(ls, String);\n      luaX_next(ls);\n      if (ls->t.token == Number) {\n        <span class=\"supfact\">args</span>.k = VVOID;\n      } else {\n        explist1(ls, &<span class=\"supfact\">args</span>);\n        luaK_setreturns(fs_0, &<span class=\"supfact\">args</span>, Number);\n      }\n      check_match(ls, Number, Number, line);\n    } else {\n      if (v2 != Number)\n        goto LABEL_14;\n      constructor(ls, &<span class=\"supfact\">args</span>);\n    }\n  }\n  base = f->u.s.info;\n  if (<span class=\"supfact\">args</span>.k == VCALL || <span class=\"supfact\">args</span>.k == VVARARG) {\n    nparams = Number;\n  } else {\n    if (<span class=\"supfact\">args</span>.k)\n      luaK_exp2nextreg(fs_0, &<span class=\"supfact\">args</span>);\n    nparams = fs_0->freereg - (base + Number);\n  }\n  v3 = luaK_codeABC(fs_0, Number L, (unsigned int)base,\n                    (unsigned int)(nparams + Number), Number L);\n  init_exp(f, VCALL, v3);\n  luaK_fixline(fs_0, (unsigned int)line);\n  fs_0->freereg = base + Number;\n}", "var": [{"name": "v5", "type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }", "ref_name": "args", "ref_type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }"}], "body_in_train": true}, {"repo_owner": "sasshka", "repo_name": "libav", "path": "sasshka/libav/2e2d8166bce535db06252575d107af7e0feb14becf993ab3a7c1f1023026ea91", "path_in_repo": "sasshka/libav//libavformat/asfenc.o", "objdump": "000000000000038a <asf_write_markers>:\n     38a:\t48 83 ec 78          \tsub    $0x78,%rsp\n     38e:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     393:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     398:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     39c:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n     3a1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     3a6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     3aa:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n     3af:\tc7 44 24 2c 01 00 00 \tmovl   $0x1,0x2c(%rsp)\n     3b6:\t00 \n     3b7:\tc7 44 24 30 80 96 98 \tmovl   $0x989680,0x30(%rsp)\n     3be:\t00 \n     3bf:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     3c4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     3c9:\t48 89 c7             \tmov    %rax,%rdi\n     3cc:\te8 e7 fc ff ff       \tcallq  b8 <put_header>\n     3d1:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n     3d6:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     3db:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     3e0:\t48 89 c7             \tmov    %rax,%rdi\n     3e3:\te8 18 fc ff ff       \tcallq  0 <put_guid>\n     3e8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     3ed:\t8b 90 8c 04 00 00    \tmov    0x48c(%rax),%edx\n     3f3:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     3f8:\t89 d6                \tmov    %edx,%esi\n     3fa:\t48 89 c7             \tmov    %rax,%rdi\n     3fd:\te8 00 00 00 00       \tcallq  402 <asf_write_markers+0x78>\n     402:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     407:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     40c:\t48 89 c7             \tmov    %rax,%rdi\n     40f:\te8 00 00 00 00       \tcallq  414 <asf_write_markers+0x8a>\n     414:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     419:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     41e:\t48 89 c7             \tmov    %rax,%rdi\n     421:\te8 00 00 00 00       \tcallq  426 <asf_write_markers+0x9c>\n     426:\tc7 44 24 6c 00 00 00 \tmovl   $0x0,0x6c(%rsp)\n     42d:\t00 \n     42e:\te9 aa 01 00 00       \tjmpq   5dd <asf_write_markers+0x253>\n     433:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     438:\t48 8b 80 90 04 00 00 \tmov    0x490(%rax),%rax\n     43f:\t8b 54 24 6c          \tmov    0x6c(%rsp),%edx\n     443:\t48 63 d2             \tmovslq %edx,%rdx\n     446:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     44a:\t48 01 d0             \tadd    %rdx,%rax\n     44d:\t48 8b 00             \tmov    (%rax),%rax\n     450:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n     455:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     45a:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     45e:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     463:\tba 00 00 00 00       \tmov    $0x0,%edx\n     468:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     46d:\t48 89 c7             \tmov    %rax,%rdi\n     470:\te8 00 00 00 00       \tcallq  475 <asf_write_markers+0xeb>\n     475:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n     47a:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     47f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     483:\t48 8b 54 24 2c       \tmov    0x2c(%rsp),%rdx\n     488:\t48 8b 4c 24 48       \tmov    0x48(%rsp),%rcx\n     48d:\t48 8b 49 04          \tmov    0x4(%rcx),%rcx\n     491:\t48 89 ce             \tmov    %rcx,%rsi\n     494:\t48 89 c7             \tmov    %rax,%rdi\n     497:\te8 00 00 00 00       \tcallq  49c <asf_write_markers+0x112>\n     49c:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n     4a1:\t48 8d 54 24 20       \tlea    0x20(%rsp),%rdx\n     4a6:\t48 8b 4c 24 38       \tmov    0x38(%rsp),%rcx\n     4ab:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     4b0:\t48 89 ce             \tmov    %rcx,%rsi\n     4b3:\t48 89 c7             \tmov    %rax,%rdi\n     4b6:\te8 cc fd ff ff       \tcallq  287 <get_send_time>\n     4bb:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n     4bf:\tc7 44 24 68 00 00 00 \tmovl   $0x0,0x68(%rsp)\n     4c6:\t00 \n     4c7:\t48 83 7c 24 40 00    \tcmpq   $0x0,0x40(%rsp)\n     4cd:\t74 4d                \tje     51c <asf_write_markers+0x192>\n     4cf:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n     4d4:\t48 89 c7             \tmov    %rax,%rdi\n     4d7:\te8 00 00 00 00       \tcallq  4dc <asf_write_markers+0x152>\n     4dc:\t85 c0                \ttest   %eax,%eax\n     4de:\t79 0a                \tjns    4ea <asf_write_markers+0x160>\n     4e0:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     4e5:\te9 24 01 00 00       \tjmpq   60e <asf_write_markers+0x284>\n     4ea:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     4ef:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     4f3:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     4f8:\t48 89 d6             \tmov    %rdx,%rsi\n     4fb:\t48 89 c7             \tmov    %rax,%rdi\n     4fe:\te8 00 00 00 00       \tcallq  503 <asf_write_markers+0x179>\n     503:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     508:\t48 8d 54 24 18       \tlea    0x18(%rsp),%rdx\n     50d:\t48 89 d6             \tmov    %rdx,%rsi\n     510:\t48 89 c7             \tmov    %rax,%rdi\n     513:\te8 00 00 00 00       \tcallq  518 <asf_write_markers+0x18e>\n     518:\t89 44 24 68          \tmov    %eax,0x68(%rsp)\n     51c:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n     521:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     526:\t48 89 d6             \tmov    %rdx,%rsi\n     529:\t48 89 c7             \tmov    %rax,%rdi\n     52c:\te8 00 00 00 00       \tcallq  531 <asf_write_markers+0x1a7>\n     531:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n     536:\t48 05 c0 05 d9 01    \tadd    $0x1d905c0,%rax\n     53c:\t48 89 c2             \tmov    %rax,%rdx\n     53f:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     544:\t48 89 d6             \tmov    %rdx,%rsi\n     547:\t48 89 c7             \tmov    %rax,%rdi\n     54a:\te8 00 00 00 00       \tcallq  54f <asf_write_markers+0x1c5>\n     54f:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n     553:\t83 c0 0c             \tadd    $0xc,%eax\n     556:\t89 c2                \tmov    %eax,%edx\n     558:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     55d:\t89 d6                \tmov    %edx,%esi\n     55f:\t48 89 c7             \tmov    %rax,%rdi\n     562:\te8 00 00 00 00       \tcallq  567 <asf_write_markers+0x1dd>\n     567:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n     56b:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     570:\t89 d6                \tmov    %edx,%esi\n     572:\t48 89 c7             \tmov    %rax,%rdi\n     575:\te8 00 00 00 00       \tcallq  57a <asf_write_markers+0x1f0>\n     57a:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     57f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     584:\t48 89 c7             \tmov    %rax,%rdi\n     587:\te8 00 00 00 00       \tcallq  58c <asf_write_markers+0x202>\n     58c:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n     590:\t89 c2                \tmov    %eax,%edx\n     592:\tc1 ea 1f             \tshr    $0x1f,%edx\n     595:\t01 d0                \tadd    %edx,%eax\n     597:\td1 f8                \tsar    %eax\n     599:\t89 c2                \tmov    %eax,%edx\n     59b:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     5a0:\t89 d6                \tmov    %edx,%esi\n     5a2:\t48 89 c7             \tmov    %rax,%rdi\n     5a5:\te8 00 00 00 00       \tcallq  5aa <asf_write_markers+0x220>\n     5aa:\t48 83 7c 24 40 00    \tcmpq   $0x0,0x40(%rsp)\n     5b0:\t74 26                \tje     5d8 <asf_write_markers+0x24e>\n     5b2:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n     5b7:\t8b 54 24 68          \tmov    0x68(%rsp),%edx\n     5bb:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     5c0:\t48 89 ce             \tmov    %rcx,%rsi\n     5c3:\t48 89 c7             \tmov    %rax,%rdi\n     5c6:\te8 00 00 00 00       \tcallq  5cb <asf_write_markers+0x241>\n     5cb:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n     5d0:\t48 89 c7             \tmov    %rax,%rdi\n     5d3:\te8 00 00 00 00       \tcallq  5d8 <asf_write_markers+0x24e>\n     5d8:\t83 44 24 6c 01       \taddl   $0x1,0x6c(%rsp)\n     5dd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     5e2:\t8b 90 8c 04 00 00    \tmov    0x48c(%rax),%edx\n     5e8:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n     5ec:\t39 c2                \tcmp    %eax,%edx\n     5ee:\t0f 87 3f fe ff ff    \tja     433 <asf_write_markers+0xa9>\n     5f4:\t48 8b 54 24 50       \tmov    0x50(%rsp),%rdx\n     5f9:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n     5fe:\t48 89 d6             \tmov    %rdx,%rsi\n     601:\t48 89 c7             \tmov    %rax,%rdi\n     604:\te8 12 fb ff ff       \tcallq  11b <end_header>\n     609:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     60e:\t48 83 c4 78          \tadd    $0x78,%rsp\n     612:\tc3                   \tretq   ", "code_s": "__int64 __fastcall asf_write_markers(__int64 a1) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned int v6;\n  unsigned __int64 v7;\n  __int64 v8;\n  _QWORD *v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  unsigned int v13;\n  unsigned int i;\n  v12 = *(_QWORD *)(a1 + Number);\n  v11 = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v5</span> = Number;\n  v10 = put_header(v11, (__int64)&ff_asf_marker_header);\n  put_guid(v11, (__int64)&ff_asf_reserved_4);\n  avio_wl32(v11, *(unsigned int *)(a1 + Number));\n  avio_wl16(v11, Number L);\n  avio_wl16(v11, Number L);\n  for (i = Number; *(_DWORD *)(a1 + Number) > i; ++i) {\n    v9 = *(_QWORD **)(Number L * (int)i + *(_QWORD *)(a1 + Number));\n    v8 = av_dict_get(v9[Number], String, Number L, Number L);\n    v7 = av_rescale_q(v9[Number], *(_QWORD *)((char *)v9 + Number),\n                      <span class=\"supfact\">v5</span>);\n    v6 = get_send_time(v12, v7, &v4);\n    v13 = Number;\n    if (v8) {\n      if ((int)avio_open_dyn_buf(&v2) < Number)\n        return Number L;\n      avio_put_str16le(v2, *(_QWORD *)(v8 + Number));\n      v13 = avio_close_dyn_buf(v2, &v3);\n    }\n    avio_wl64(v11, v4);\n    avio_wl64(v11, v7 + Number);\n    avio_wl16(v11, v13 + Number);\n    avio_wl32(v11, v6);\n    avio_wl32(v11, Number L);\n    avio_wl32(v11, (unsigned int)((int)v13 / Number));\n    if (v8) {\n      avio_write(v11, v3, v13);\n      av_freep(&v3);\n    }\n  }\n  end_header(v11, v10);\n  return Number L;\n}", "code_t": "int __cdecl asf_write_markers(AVFormatContext_0 *s) {\n  AVIOContext_0 *dyn_buf;\n  uint8_t *buf;\n  uint64_t offset;\n  AVRational_0 <span class=\"supfact\">scale</span>;\n  int32_t send_time;\n  int64_t pres_time;\n  AVDictionaryEntry_0 *t;\n  AVChapter_0 *c;\n  int64_t hpos;\n  AVIOContext_0 *pb;\n  ASFContext_0 *asf;\n  int len;\n  int i;\n  asf = (ASFContext_0 *)s->priv_data;\n  pb = s->pb;\n  <span class=\"supfact\">scale</span>.num = Number;\n  <span class=\"supfact\">scale</span>.den = Number;\n  hpos = put_header(pb, (uint8_t(*)[Number])ff_asf_marker_header);\n  put_guid(pb, (uint8_t(*)[Number])ff_asf_reserved_4);\n  avio_wl32(pb, s->nb_chapters);\n  avio_wl16(pb, Number L);\n  avio_wl16(pb, Number L);\n  for (i = Number; s->nb_chapters > i; ++i) {\n    c = s->chapters[i];\n    t = (AVDictionaryEntry_0 *)av_dict_get(c->metadata, String, Number L,\n                                           Number L);\n    pres_time = ((__int64(__fastcall *)(_QWORD, _QWORD, _QWORD))av_rescale_q)(\n        c->start, *(_QWORD *)&c->time_base, <span class=\"supfact\">scale</span>);\n    send_time = get_send_time(asf, pres_time, &offset);\n    len = Number;\n    if (t) {\n      if ((int)avio_open_dyn_buf(&dyn_buf) < Number)\n        return Number;\n      avio_put_str16le(dyn_buf, t->value);\n      len = avio_close_dyn_buf(dyn_buf, &buf);\n    }\n    avio_wl64(pb, offset);\n    avio_wl64(pb, pres_time + Number);\n    avio_wl16(pb, (unsigned int)(len + Number));\n    avio_wl32(pb, (unsigned int)send_time);\n    avio_wl32(pb, Number L);\n    avio_wl32(pb, (unsigned int)(len / Number));\n    if (t) {\n      avio_write(pb, buf, (unsigned int)len);\n      av_freep(&buf);\n    }\n  }\n  end_header(pb, hpos);\n  return Number;\n}", "var": [{"name": "v5", "type": "AVChapter_0 *", "ref_name": "scale", "ref_type": "struct AVRational_0 { int num; int den; }"}], "body_in_train": true}, {"repo_owner": "mend0za", "repo_name": "QEMU-dt-config", "path": "mend0za/QEMU-dt-config/9c2e6bcd03eae85df9fc29477d831b65d5bde83b49fc6b8aa8e1a2b87ec9002a", "path_in_repo": "mend0za/QEMU-dt-config//migration/tls.o", "objdump": "0000000000000376 <trace_migration_tls_incoming_handshake_complete>:\n 376:\t55                   \tpush   %rbp\n 377:\t48 89 e5             \tmov    %rsp,%rbp\n 37a:\t41 54                \tpush   %r12\n 37c:\t53                   \tpush   %rbx\n 37d:\t48 83 ec 20          \tsub    $0x20,%rsp\n 381:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 388:\t00 00 \n 38a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 38e:\t31 c0                \txor    %eax,%eax\n 390:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 396 <trace_migration_tls_incoming_handshake_complete+0x20>\n 396:\t85 c0                \ttest   %eax,%eax\n 398:\t0f 95 c0             \tsetne  %al\n 39b:\t0f b6 c0             \tmovzbl %al,%eax\n 39e:\t48 85 c0             \ttest   %rax,%rax\n 3a1:\t74 5b                \tje     3fe <trace_migration_tls_incoming_handshake_complete+0x88>\n 3a3:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 3aa <trace_migration_tls_incoming_handshake_complete+0x34>\n 3aa:\t66 85 c0             \ttest   %ax,%ax\n 3ad:\t74 4f                \tje     3fe <trace_migration_tls_incoming_handshake_complete+0x88>\n 3af:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 3b3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3b8:\t48 89 c7             \tmov    %rax,%rdi\n 3bb:\te8 00 00 00 00       \tcallq  3c0 <trace_migration_tls_incoming_handshake_complete+0x4a>\n 3c0:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n 3c5:\te8 36 fc ff ff       \tcallq  0 <qemu_loglevel_mask>\n 3ca:\t0f b6 c0             \tmovzbl %al,%eax\n 3cd:\t48 85 c0             \ttest   %rax,%rax\n 3d0:\t74 2c                \tje     3fe <trace_migration_tls_incoming_handshake_complete+0x88>\n 3d2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3d6:\t49 89 c4             \tmov    %rax,%r12\n 3d9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 3dd:\t48 89 c3             \tmov    %rax,%rbx\n 3e0:\te8 00 00 00 00       \tcallq  3e5 <trace_migration_tls_incoming_handshake_complete+0x6f>\n 3e5:\t4c 89 e1             \tmov    %r12,%rcx\n 3e8:\t48 89 da             \tmov    %rbx,%rdx\n 3eb:\t89 c6                \tmov    %eax,%esi\n 3ed:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 3f4 <trace_migration_tls_incoming_handshake_complete+0x7e>\n 3f4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3f9:\te8 00 00 00 00       \tcallq  3fe <trace_migration_tls_incoming_handshake_complete+0x88>\n 3fe:\t90                   \tnop\n 3ff:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 403:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 40a:\t00 00 \n 40c:\t74 05                \tje     413 <trace_migration_tls_incoming_handshake_complete+0x9d>\n 40e:\te8 00 00 00 00       \tcallq  413 <trace_migration_tls_incoming_handshake_complete+0x9d>\n 413:\t48 83 c4 20          \tadd    $0x20,%rsp\n 417:\t5b                   \tpop    %rbx\n 418:\t41 5c                \tpop    %r12\n 41a:\t5d                   \tpop    %rbp\n 41b:\tc3                   \tretq   ", "code_s": "unsigned __int64 trace_migration_tls_incoming_handshake_complete() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v0 = <span class=\"supfact\">tv</span>.tv_usec;\n        v1 = <span class=\"supfact\">tv</span>.tv_sec;\n        v2 = getpid();\n        qemu_log(String, v2, v1, v0);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ v5;\n}", "code_t": "void __cdecl trace_migration_tls_incoming_handshake_complete() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v0 = <span class=\"supfact\">_now</span>.tv_usec;\n      v1 = <span class=\"supfact\">_now</span>.tv_sec;\n      v2 = getpid();\n      qemu_log(String, v2, v1, v0);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "pixeldustproject-o", "repo_name": "android_kernel_qcom_msm8960", "path": "pixeldustproject-o/android_kernel_qcom_msm8960/592420c892b313f9d4b2f595dba027e825973bd319e17b31fb4936260d369ec0", "path_in_repo": "pixeldustproject-o/android_kernel_qcom_msm8960/tools/perf/util/probe-finder.o", "objdump": "0000000000002051 <probe_point_line_walker>:\n    2051:\t55                   \tpush   %rbp\n    2052:\t48 89 e5             \tmov    %rsp,%rbp\n    2055:\t48 83 ec 70          \tsub    $0x70,%rsp\n    2059:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    205d:\t89 75 a4             \tmov    %esi,-0x5c(%rbp)\n    2060:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n    2064:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n    2068:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    206f:\t00 00 \n    2071:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2075:\t31 c0                \txor    %eax,%eax\n    2077:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    207b:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    207f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2083:\t8b 40 10             \tmov    0x10(%rax),%eax\n    2086:\t39 45 a4             \tcmp    %eax,-0x5c(%rbp)\n    2089:\t75 1b                \tjne    20a6 <probe_point_line_walker+0x55>\n    208b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    208f:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n    2093:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2097:\t48 89 d6             \tmov    %rdx,%rsi\n    209a:\t48 89 c7             \tmov    %rax,%rdi\n    209d:\te8 00 00 00 00       \tcallq  20a2 <probe_point_line_walker+0x51>\n    20a2:\t85 c0                \ttest   %eax,%eax\n    20a4:\t74 07                \tje     20ad <probe_point_line_walker+0x5c>\n    20a6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    20ab:\teb 68                \tjmp    2115 <probe_point_line_walker+0xc4>\n    20ad:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    20b1:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n    20b5:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    20b9:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    20bd:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    20c1:\t48 89 d6             \tmov    %rdx,%rsi\n    20c4:\t48 89 c7             \tmov    %rax,%rdi\n    20c7:\te8 e1 fe ff ff       \tcallq  1fad <find_best_scope>\n    20cc:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    20d0:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    20d5:\t75 1b                \tjne    20f2 <probe_point_line_walker+0xa1>\n    20d7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    20dc:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    20e1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    20e6:\te8 00 00 00 00       \tcallq  20eb <probe_point_line_walker+0x9a>\n    20eb:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n    20f0:\teb 23                \tjmp    2115 <probe_point_line_walker+0xc4>\n    20f2:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    20f6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    20fa:\t48 89 d6             \tmov    %rdx,%rsi\n    20fd:\t48 89 c7             \tmov    %rax,%rdi\n    2100:\te8 54 fb ff ff       \tcallq  1c59 <call_probe_finder>\n    2105:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n    2108:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    210d:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n    2111:\t0f 4e 45 bc          \tcmovle -0x44(%rbp),%eax\n    2115:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    2119:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    2120:\t00 00 \n    2122:\t74 05                \tje     2129 <probe_point_line_walker+0xd8>\n    2124:\te8 00 00 00 00       \tcallq  2129 <probe_point_line_walker+0xd8>\n    2129:\tc9                   \tleaveq \n    212a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall probe_point_line_walker(__int64 a1, int a2, __int64 a3,\n                                           __int64 a4) {\n  __int64 result;\n  int v6;\n  void *v8;\n  char <span class=\"supfact\">v9</span>[Number];\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  if (a2 != *(_DWORD *)(a4 + Number) ||\n      (unsigned int)strtailcmp(a1, *(_QWORD *)(a4 + Number)))\n    return Number L;\n  *(_QWORD *)(a4 + Number) = a3;\n  v8 = (void *)find_best_scope(a4, (__int64)<span class=\"supfact\">v9</span>);\n  if (v8) {\n    v6 = call_probe_finder(v8, a4, (Dwarf_Error *)a4);\n    result = Number L;\n    if (v6 <= Number)\n      result = (unsigned int)v6;\n  } else {\n    eprintf(Number L, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl probe_point_line_walker(const char *fname, int lineno,\n                                    Dwarf_Addr addr, void *data) {\n  int result;\n  int ret;\n  Dwarf_Die *sc_die;\n  Dwarf_Die <span class=\"supfact\">die_mem</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  if (lineno != *((_DWORD *)data + Number) ||\n      (unsigned int)strtailcmp(fname, *((_QWORD *)data + Number)))\n    return Number;\n  *((_QWORD *)data + Number) = addr;\n  sc_die = find_best_scope((probe_finder *)data, &<span class=\"supfact\">die_mem</span>);\n  if (sc_die) {\n    ret = call_probe_finder(sc_die, (probe_finder *)data);\n    result = Number;\n    if (ret <= Number)\n      result = ret;\n  } else {\n    eprintf(Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v9", "type": "struct Dwarf_Die { void * addr; Dwarf_CU * cu; Dwarf_Abbrev_0 * abbrev; __int64 padding__; }", "ref_name": "die_mem", "ref_type": "struct Dwarf_Die { void * addr; Dwarf_CU * cu; Dwarf_Abbrev_0 * abbrev; __int64 padding__; }"}], "body_in_train": true}, {"repo_owner": "ttsiodras", "repo_name": "asn1scc", "path": "ttsiodras/asn1scc/2beb20dcb6d06d546c7b73861c56821da9f0856d96395c33931e97359f0f32c4", "path_in_repo": "ttsiodras/asn1scc/mantis/0000411/p2/a_c_out/mainprogram", "objdump": "000000000040a052 <BerDecodeReal>:\n  40a052:\t55                   \tpush   %rbp\n  40a053:\t48 89 e5             \tmov    %rsp,%rbp\n  40a056:\t48 83 ec 40          \tsub    $0x40,%rsp\n  40a05a:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  40a05e:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  40a062:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  40a066:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  40a06a:\t48 8b 05 4f 4e 01 00 \tmov    0x14e4f(%rip),%rax        # 41eec0 <__gcov0.BerDecodeReal>\n  40a071:\t48 83 c0 01          \tadd    $0x1,%rax\n  40a075:\t48 89 05 44 4e 01 00 \tmov    %rax,0x14e44(%rip)        # 41eec0 <__gcov0.BerDecodeReal>\n  40a07c:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  40a080:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  40a084:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40a088:\t48 89 ce             \tmov    %rcx,%rsi\n  40a08b:\t48 89 c7             \tmov    %rax,%rdi\n  40a08e:\te8 df f0 ff ff       \tcallq  409172 <BerDecodeTag>\n  40a093:\t89 c2                \tmov    %eax,%edx\n  40a095:\t48 8b 05 2c 4e 01 00 \tmov    0x14e2c(%rip),%rax        # 41eec8 <__gcov0.BerDecodeReal+0x8>\n  40a09c:\t48 83 c0 01          \tadd    $0x1,%rax\n  40a0a0:\t48 89 05 21 4e 01 00 \tmov    %rax,0x14e21(%rip)        # 41eec8 <__gcov0.BerDecodeReal+0x8>\n  40a0a7:\t89 d0                \tmov    %edx,%eax\n  40a0a9:\t83 f0 01             \txor    $0x1,%eax\n  40a0ac:\t84 c0                \ttest   %al,%al\n  40a0ae:\t74 1c                \tje     40a0cc <BerDecodeReal+0x7a>\n  40a0b0:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40a0b5:\t48 8b 05 14 4e 01 00 \tmov    0x14e14(%rip),%rax        # 41eed0 <__gcov0.BerDecodeReal+0x10>\n  40a0bc:\t48 83 c0 01          \tadd    $0x1,%rax\n  40a0c0:\t48 89 05 09 4e 01 00 \tmov    %rax,0x14e09(%rip)        # 41eed0 <__gcov0.BerDecodeReal+0x10>\n  40a0c7:\te9 cb 00 00 00       \tjmpq   40a197 <BerDecodeReal+0x145>\n  40a0cc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40a0d0:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  40a0d4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40a0d8:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40a0dc:\t48 29 c2             \tsub    %rax,%rdx\n  40a0df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40a0e3:\t48 8b 08             \tmov    (%rax),%rcx\n  40a0e6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40a0ea:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40a0ee:\t48 01 c1             \tadd    %rax,%rcx\n  40a0f1:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40a0f5:\t48 89 ce             \tmov    %rcx,%rsi\n  40a0f8:\t48 89 c7             \tmov    %rax,%rdi\n  40a0fb:\te8 7c c0 ff ff       \tcallq  40617c <BitStream_AttachBuffer>\n  40a100:\t48 8b 05 d1 4d 01 00 \tmov    0x14dd1(%rip),%rax        # 41eed8 <__gcov0.BerDecodeReal+0x18>\n  40a107:\t48 83 c0 01          \tadd    $0x1,%rax\n  40a10b:\t48 89 05 c6 4d 01 00 \tmov    %rax,0x14dc6(%rip)        # 41eed8 <__gcov0.BerDecodeReal+0x18>\n  40a112:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  40a116:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40a11a:\t48 89 d6             \tmov    %rdx,%rsi\n  40a11d:\t48 89 c7             \tmov    %rax,%rdi\n  40a120:\te8 df e5 ff ff       \tcallq  408704 <BitStream_DecodeReal>\n  40a125:\t83 f0 01             \txor    $0x1,%eax\n  40a128:\t84 c0                \ttest   %al,%al\n  40a12a:\t74 23                \tje     40a14f <BerDecodeReal+0xfd>\n  40a12c:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40a130:\tc7 00 65 00 00 00    \tmovl   $0x65,(%rax)\n  40a136:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40a13b:\t48 8b 05 a6 4d 01 00 \tmov    0x14da6(%rip),%rax        # 41eee8 <__gcov0.BerDecodeReal+0x28>\n  40a142:\t48 83 c0 01          \tadd    $0x1,%rax\n  40a146:\t48 89 05 9b 4d 01 00 \tmov    %rax,0x14d9b(%rip)        # 41eee8 <__gcov0.BerDecodeReal+0x28>\n  40a14d:\teb 48                \tjmp    40a197 <BerDecodeReal+0x145>\n  40a14f:\t48 8b 05 8a 4d 01 00 \tmov    0x14d8a(%rip),%rax        # 41eee0 <__gcov0.BerDecodeReal+0x20>\n  40a156:\t48 83 c0 01          \tadd    $0x1,%rax\n  40a15a:\t48 89 05 7f 4d 01 00 \tmov    %rax,0x14d7f(%rip)        # 41eee0 <__gcov0.BerDecodeReal+0x20>\n  40a161:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40a165:\t48 89 c7             \tmov    %rax,%rdi\n  40a168:\te8 62 c0 ff ff       \tcallq  4061cf <BitStream_GetLength>\n  40a16d:\t48 8b 15 7c 4d 01 00 \tmov    0x14d7c(%rip),%rdx        # 41eef0 <__gcov0.BerDecodeReal+0x30>\n  40a174:\t48 83 c2 01          \tadd    $0x1,%rdx\n  40a178:\t48 89 15 71 4d 01 00 \tmov    %rdx,0x14d71(%rip)        # 41eef0 <__gcov0.BerDecodeReal+0x30>\n  40a17f:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  40a183:\t48 8b 52 10          \tmov    0x10(%rdx),%rdx\n  40a187:\t48 01 c2             \tadd    %rax,%rdx\n  40a18a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40a18e:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  40a192:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40a197:\t89 d0                \tmov    %edx,%eax\n  40a199:\tc9                   \tleaveq \n  40a19a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall BerDecodeReal(_QWORD *a1, unsigned __int64 a2, _QWORD *a3,\n                                 _DWORD *a4) {\n  char v4;\n  unsigned int v5;\n  __int64 v6;\n  __int64 <span class=\"supfact\">v10</span>[Number];\n  ++_gcov0_BerDecodeReal;\n  v4 = BerDecodeTag(a1, a2, a4);\n  ++qword_41EEC8;\n  if (v4 != Number) {\n    v5 = Number;\n    ++qword_41EED0;\n  } else {\n    BitStream_AttachBuffer((__int64)<span class=\"supfact\">v10</span>, a1[Number] + *a1,\n                           a1[Number] - a1[Number]);\n    ++qword_41EED8;\n    if ((unsigned __int8)BitStream_DecodeReal(<span class=\"supfact\">v10</span>, a3) !=\n        Number) {\n      *a4 = Number;\n      v5 = Number;\n      ++qword_41EEE8;\n    } else {\n      ++qword_41EEE0;\n      v6 = BitStream_GetLength((__int64)<span class=\"supfact\">v10</span>);\n      ++qword_41EEF0;\n      a1[Number] += v6;\n      v5 = Number;\n    }\n  }\n  return v5;\n}", "code_t": "flag __cdecl BerDecodeReal(ByteStream *pByteStrm, BerTag tag, double *value,\n                           int *pErrCode) {\n  flag v4;\n  flag v5;\n  asn1SccSint v6;\n  BitStream <span class=\"supfact\">tmp</span>;\n  ++_gcov0_BerDecodeReal;\n  v4 = BerDecodeTag(pByteStrm, tag, pErrCode);\n  ++qword_41EEC8;\n  if (!v4) {\n    v5 = Number;\n    ++qword_41EED0;\n  } else {\n    BitStream_AttachBuffer(&<span class=\"supfact\">tmp</span>,\n                           &pByteStrm->buf[pByteStrm->currentByte],\n                           pByteStrm->count - pByteStrm->currentByte);\n    ++qword_41EED8;\n    if (!BitStream_DecodeReal(&<span class=\"supfact\">tmp</span>, value)) {\n      *pErrCode = Number;\n      v5 = Number;\n      ++qword_41EEE8;\n    } else {\n      ++qword_41EEE0;\n      v6 = BitStream_GetLength(&<span class=\"supfact\">tmp</span>);\n      ++qword_41EEF0;\n      pByteStrm->currentByte += v6;\n      v5 = Number;\n    }\n  }\n  return v5;\n}", "var": [{"name": "v10", "type": "struct BitStream { byte * buf; __int64 count; __int64 currentByte; int currentBit; PADDING (4); }", "ref_name": "tmp", "ref_type": "struct BitStream { byte * buf; __int64 count; __int64 currentByte; int currentBit; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "sphantix", "repo_name": "sphantix-openwrt", "path": "sphantix/sphantix-openwrt/b9a734df0d3d6111762041bd66d0ca9e5a1fec24c643411b473ba7b114efcc5c", "path_in_repo": "sphantix/sphantix-openwrt/customer/packages/luci/libs/nixio/src/poll.o", "objdump": "0000000000000000 <nixio_gettimeofday>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  10:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  15:\t48 89 c7             \tmov    %rax,%rdi\n  18:\te8 00 00 00 00       \tcallq  1d <nixio_gettimeofday+0x1d>\n  1d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  21:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  26:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  2a:\t48 89 c7             \tmov    %rax,%rdi\n  2d:\te8 00 00 00 00       \tcallq  32 <nixio_gettimeofday+0x32>\n  32:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  36:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  3b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  3f:\t48 89 c7             \tmov    %rax,%rdi\n  42:\te8 00 00 00 00       \tcallq  47 <nixio_gettimeofday+0x47>\n  47:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4c:\tc9                   \tleaveq \n  4d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall nixio_gettimeofday(__int64 a1) {\n  struct timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  lua_pushnumber(a1, (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_sec));\n  lua_pushnumber(a1, (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_usec));\n  return Number L;\n}", "code_t": "int __cdecl nixio_gettimeofday(lua_State_0 *L) {\n  timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  lua_pushnumber(L, (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_sec));\n  lua_pushnumber(L, (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_usec));\n  return Number;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/202a445d8e651d81d31c756aa9045ecff7a8f2f37851348495106510a18f79dd", "path_in_repo": "madeye/GRACE/coremu-0.1.1/qemu/bt-hci.o", "objdump": "0000000000002c55 <bt_hci_event_complete_read_inquiry_mode>:\n    2c55:\t55                   \tpush   %rbp\n    2c56:\t48 89 e5             \tmov    %rsp,%rbp\n    2c59:\t48 83 ec 20          \tsub    $0x20,%rsp\n    2c5d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    2c61:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2c68:\t00 00 \n    2c6a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2c6e:\t31 c0                \txor    %eax,%eax\n    2c70:\tc6 45 f6 00          \tmovb   $0x0,-0xa(%rbp)\n    2c74:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c78:\t8b 80 58 11 00 00    \tmov    0x1158(%rax),%eax\n    2c7e:\t88 45 f7             \tmov    %al,-0x9(%rbp)\n    2c81:\t48 8d 4d f6          \tlea    -0xa(%rbp),%rcx\n    2c85:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c89:\tba 02 00 00 00       \tmov    $0x2,%edx\n    2c8e:\t48 89 ce             \tmov    %rcx,%rsi\n    2c91:\t48 89 c7             \tmov    %rax,%rdi\n    2c94:\te8 e1 d6 ff ff       \tcallq  37a <bt_hci_event_complete>\n    2c99:\t90                   \tnop\n    2c9a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2c9e:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    2ca5:\t00 00 \n    2ca7:\t74 05                \tje     2cae <bt_hci_event_complete_read_inquiry_mode+0x59>\n    2ca9:\te8 00 00 00 00       \tcallq  2cae <bt_hci_event_complete_read_inquiry_mode+0x59>\n    2cae:\tc9                   \tleaveq \n    2caf:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall bt_hci_event_complete_read_inquiry_mode(\n    __int64 a1) {\n  char <span class=\"supfact\">v2</span>[Number];\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  <span class=\"supfact\">v2</span>[Number] = Number;\n  <span class=\"supfact\">v2</span>[Number] = *(_DWORD *)(a1 + Number);\n  bt_hci_event_complete(a1, <span class=\"supfact\">v2</span>, Number);\n  return __readfsqword(Number) ^ v3;\n}", "code_t": "void __cdecl bt_hci_event_complete_read_inquiry_mode(bt_hci_s *hci) {\n  read_inquiry_mode_rp <span class=\"supfact\">params</span>;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  <span class=\"supfact\">params</span>.status = Number;\n  <span class=\"supfact\">params</span>.mode = hci->lm.inquiry_mode;\n  bt_hci_event_complete(hci, &<span class=\"supfact\">params</span>, Number);\n}", "var": [{"name": "v2", "type": "struct read_inquiry_mode_rp { uint8_t status; uint8_t mode; }", "ref_name": "params", "ref_type": "struct read_inquiry_mode_rp { uint8_t status; uint8_t mode; }"}], "body_in_train": true}, {"repo_owner": "ningwang100", "repo_name": "Chingoal-Web-Application", "path": "ningwang100/Chingoal-Web-Application/d0f8aa4d525e6db0e90a2d27370eaa8cf462ce9826251037aeb3ae3182fadc6a", "path_in_repo": "ningwang100/Chingoal-Web-Application/thirdpart/redis-3.0.5/deps/lua/src/luac", "objdump": "000000000040d2ee <recfield>:\n  40d2ee:\t55                   \tpush   %rbp\n  40d2ef:\t48 89 e5             \tmov    %rsp,%rbp\n  40d2f2:\t48 83 ec 60          \tsub    $0x60,%rsp\n  40d2f6:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  40d2fa:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  40d2fe:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40d302:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40d306:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40d30a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40d30e:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40d312:\t8b 40 3c             \tmov    0x3c(%rax),%eax\n  40d315:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40d318:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40d31c:\t8b 40 10             \tmov    0x10(%rax),%eax\n  40d31f:\t3d 1d 01 00 00       \tcmp    $0x11d,%eax\n  40d324:\t75 39                \tjne    40d35f <recfield+0x71>\n  40d326:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  40d32a:\t8b 40 20             \tmov    0x20(%rax),%eax\n  40d32d:\t3d fd ff ff 7f       \tcmp    $0x7ffffffd,%eax\n  40d332:\t7e 16                \tjle    40d34a <recfield+0x5c>\n  40d334:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d338:\tba c9 d1 41 00       \tmov    $0x41d1c9,%edx\n  40d33d:\tbe fd ff ff 7f       \tmov    $0x7ffffffd,%esi\n  40d342:\t48 89 c7             \tmov    %rax,%rdi\n  40d345:\te8 1d ec ff ff       \tcallq  40bf67 <errorlimit>\n  40d34a:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  40d34e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40d352:\t48 89 d6             \tmov    %rdx,%rsi\n  40d355:\t48 89 c7             \tmov    %rax,%rdi\n  40d358:\te8 9a ee ff ff       \tcallq  40c1f7 <checkname>\n  40d35d:\teb 13                \tjmp    40d372 <recfield+0x84>\n  40d35f:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  40d363:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40d367:\t48 89 d6             \tmov    %rdx,%rsi\n  40d36a:\t48 89 c7             \tmov    %rax,%rdi\n  40d36d:\te8 22 ff ff ff       \tcallq  40d294 <yindex>\n  40d372:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  40d376:\t8b 40 20             \tmov    0x20(%rax),%eax\n  40d379:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40d37c:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  40d380:\t89 50 20             \tmov    %edx,0x20(%rax)\n  40d383:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40d387:\tbe 3d 00 00 00       \tmov    $0x3d,%esi\n  40d38c:\t48 89 c7             \tmov    %rax,%rdi\n  40d38f:\te8 cc ec ff ff       \tcallq  40c060 <checknext>\n  40d394:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  40d398:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d39c:\t48 89 d6             \tmov    %rdx,%rsi\n  40d39f:\t48 89 c7             \tmov    %rax,%rdi\n  40d3a2:\te8 3c bb 00 00       \tcallq  418ee3 <luaK_exp2RK>\n  40d3a7:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40d3aa:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  40d3ae:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40d3b2:\t48 89 d6             \tmov    %rdx,%rsi\n  40d3b5:\t48 89 c7             \tmov    %rax,%rdi\n  40d3b8:\te8 82 0f 00 00       \tcallq  40e33f <expr>\n  40d3bd:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  40d3c1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d3c5:\t48 89 d6             \tmov    %rdx,%rsi\n  40d3c8:\t48 89 c7             \tmov    %rax,%rdi\n  40d3cb:\te8 13 bb 00 00       \tcallq  418ee3 <luaK_exp2RK>\n  40d3d0:\t89 c6                \tmov    %eax,%esi\n  40d3d2:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  40d3d6:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  40d3da:\t8b 50 08             \tmov    0x8(%rax),%edx\n  40d3dd:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n  40d3e0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d3e4:\t41 89 f0             \tmov    %esi,%r8d\n  40d3e7:\tbe 09 00 00 00       \tmov    $0x9,%esi\n  40d3ec:\t48 89 c7             \tmov    %rax,%rdi\n  40d3ef:\te8 94 cb 00 00       \tcallq  419f88 <luaK_codeABC>\n  40d3f4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d3f8:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  40d3fb:\t89 50 3c             \tmov    %edx,0x3c(%rax)\n  40d3fe:\t90                   \tnop\n  40d3ff:\tc9                   \tleaveq \n  40d400:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall recfield(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n                            __int64 a5, __int64 a6) {\n  unsigned int v6;\n  _QWORD *result;\n  char <span class=\"supfact\">v8</span>[Number];\n  _DWORD <span class=\"supfact\">v9</span>[Number];\n  unsigned int v10;\n  int v11;\n  _QWORD *v12;\n  v12 = *(_QWORD **)(a1 + Number);\n  v11 = *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n  if (*(_DWORD *)(a1 + Number) == Number) {\n    if (*(int *)(a2 + Number) > Number)\n      errorlimit(v12, Number, (__int64)String, a4, a5, a6);\n    checkname(a1, <span class=\"supfact\">v9</span>);\n  } else {\n    yindex(a1, (__int64)<span class=\"supfact\">v9</span>);\n  }\n  ++*(_DWORD *)(a2 + Number);\n  checknext(a1, Number);\n  v10 = luaK_exp2RK(v12, <span class=\"supfact\">v9</span>);\n  expr(a1, <span class=\"supfact\">v8</span>);\n  v6 = luaK_exp2RK(v12, <span class=\"supfact\">v8</span>);\n  luaK_codeABC(v12, Number L,\n               *(unsigned int *)(*(_QWORD *)(a2 + Number) + Number L), v10, v6);\n  result = v12;\n  *((_DWORD *)v12 + Number) = v11;\n  return result;\n}", "code_t": "void __cdecl recfield(LexState_0 *ls, ConsControl *cc) {\n  int v2;\n  expdesc_0 <span class=\"supfact\">val</span>;\n  expdesc_0 <span class=\"supfact\">key</span>;\n  int rkkey;\n  int reg;\n  FuncState_0 *fs_0;\n  fs_0 = ls->fs;\n  reg = ls->fs->freereg;\n  if (ls->t.token == Number) {\n    if (cc->nh > Number)\n      errorlimit(fs_0, Number, String);\n    checkname(ls, &<span class=\"supfact\">key</span>);\n  } else {\n    yindex(ls, &<span class=\"supfact\">key</span>);\n  }\n  ++cc->nh;\n  checknext(ls, Number);\n  rkkey = luaK_exp2RK(fs_0, &<span class=\"supfact\">key</span>);\n  expr(ls, &<span class=\"supfact\">val</span>);\n  v2 = luaK_exp2RK(fs_0, &<span class=\"supfact\">val</span>);\n  luaK_codeABC(fs_0, OP_SETTABLE_0, cc->t->u.s.info, rkkey, v2);\n  fs_0->freereg = reg;\n}", "var": [{"name": "v9", "type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }", "ref_name": "key", "ref_type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }"}, {"name": "v8", "type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }", "ref_name": "val", "ref_type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }"}], "body_in_train": true}, {"repo_owner": "lee-wei", "repo_name": "android_c", "path": "lee-wei/android_c/8faf8eee11b1e743974c1b04d89ecf8b95a45264aae9990fa5c74d485f6c387f", "path_in_repo": "lee-wei/android_c/p2p/jni/app/center", "objdump": "0000000000405bc3 <enet_socket_wait>:\n  405bc3:\t55                   \tpush   %rbp\n  405bc4:\t48 89 e5             \tmov    %rsp,%rbp\n  405bc7:\t48 81 ec 40 01 00 00 \tsub    $0x140,%rsp\n  405bce:\t89 bd cc fe ff ff    \tmov    %edi,-0x134(%rbp)\n  405bd4:\t48 89 b5 c0 fe ff ff \tmov    %rsi,-0x140(%rbp)\n  405bdb:\t89 95 c8 fe ff ff    \tmov    %edx,-0x138(%rbp)\n  405be1:\t8b 85 c8 fe ff ff    \tmov    -0x138(%rbp),%eax\n  405be7:\t89 c0                \tmov    %eax,%eax\n  405be9:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n  405bf0:\t48 c1 e8 20          \tshr    $0x20,%rax\n  405bf4:\tc1 e8 06             \tshr    $0x6,%eax\n  405bf7:\t89 c0                \tmov    %eax,%eax\n  405bf9:\t48 89 85 d0 fe ff ff \tmov    %rax,-0x130(%rbp)\n  405c00:\t8b 95 c8 fe ff ff    \tmov    -0x138(%rbp),%edx\n  405c06:\t89 d0                \tmov    %edx,%eax\n  405c08:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n  405c0f:\t48 c1 e8 20          \tshr    $0x20,%rax\n  405c13:\tc1 e8 06             \tshr    $0x6,%eax\n  405c16:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n  405c1c:\t29 c2                \tsub    %eax,%edx\n  405c1e:\t89 d0                \tmov    %edx,%eax\n  405c20:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n  405c26:\t89 c0                \tmov    %eax,%eax\n  405c28:\t48 89 85 d8 fe ff ff \tmov    %rax,-0x128(%rbp)\n  405c2f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405c34:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  405c39:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  405c40:\t48 89 d7             \tmov    %rdx,%rdi\n  405c43:\tfc                   \tcld    \n  405c44:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  405c47:\t89 f8                \tmov    %edi,%eax\n  405c49:\t89 ca                \tmov    %ecx,%edx\n  405c4b:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  405c4e:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  405c51:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405c56:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  405c5b:\t48 8d 95 e0 fe ff ff \tlea    -0x120(%rbp),%rdx\n  405c62:\t48 89 d7             \tmov    %rdx,%rdi\n  405c65:\tfc                   \tcld    \n  405c66:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  405c69:\t89 f8                \tmov    %edi,%eax\n  405c6b:\t89 ca                \tmov    %ecx,%edx\n  405c6d:\t89 55 f4             \tmov    %edx,-0xc(%rbp)\n  405c70:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  405c73:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n  405c7a:\t8b 00                \tmov    (%rax),%eax\n  405c7c:\t83 e0 01             \tand    $0x1,%eax\n  405c7f:\t85 c0                \ttest   %eax,%eax\n  405c81:\t74 4d                \tje     405cd0 <enet_socket_wait+0x10d>\n  405c83:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  405c89:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  405c8c:\t85 c0                \ttest   %eax,%eax\n  405c8e:\t0f 48 c2             \tcmovs  %edx,%eax\n  405c91:\tc1 f8 06             \tsar    $0x6,%eax\n  405c94:\t89 c6                \tmov    %eax,%esi\n  405c96:\t48 63 c6             \tmovslq %esi,%rax\n  405c99:\t48 8b bc c5 e0 fe ff \tmov    -0x120(%rbp,%rax,8),%rdi\n  405ca0:\tff \n  405ca1:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  405ca7:\t99                   \tcltd   \n  405ca8:\tc1 ea 1a             \tshr    $0x1a,%edx\n  405cab:\t01 d0                \tadd    %edx,%eax\n  405cad:\t83 e0 3f             \tand    $0x3f,%eax\n  405cb0:\t29 d0                \tsub    %edx,%eax\n  405cb2:\tba 01 00 00 00       \tmov    $0x1,%edx\n  405cb7:\t89 c1                \tmov    %eax,%ecx\n  405cb9:\t48 d3 e2             \tshl    %cl,%rdx\n  405cbc:\t48 89 d0             \tmov    %rdx,%rax\n  405cbf:\t48 09 c7             \tor     %rax,%rdi\n  405cc2:\t48 89 fa             \tmov    %rdi,%rdx\n  405cc5:\t48 63 c6             \tmovslq %esi,%rax\n  405cc8:\t48 89 94 c5 e0 fe ff \tmov    %rdx,-0x120(%rbp,%rax,8)\n  405ccf:\tff \n  405cd0:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n  405cd7:\t8b 00                \tmov    (%rax),%eax\n  405cd9:\t83 e0 02             \tand    $0x2,%eax\n  405cdc:\t85 c0                \ttest   %eax,%eax\n  405cde:\t74 4d                \tje     405d2d <enet_socket_wait+0x16a>\n  405ce0:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  405ce6:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  405ce9:\t85 c0                \ttest   %eax,%eax\n  405ceb:\t0f 48 c2             \tcmovs  %edx,%eax\n  405cee:\tc1 f8 06             \tsar    $0x6,%eax\n  405cf1:\t89 c6                \tmov    %eax,%esi\n  405cf3:\t48 63 c6             \tmovslq %esi,%rax\n  405cf6:\t48 8b bc c5 60 ff ff \tmov    -0xa0(%rbp,%rax,8),%rdi\n  405cfd:\tff \n  405cfe:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  405d04:\t99                   \tcltd   \n  405d05:\tc1 ea 1a             \tshr    $0x1a,%edx\n  405d08:\t01 d0                \tadd    %edx,%eax\n  405d0a:\t83 e0 3f             \tand    $0x3f,%eax\n  405d0d:\t29 d0                \tsub    %edx,%eax\n  405d0f:\tba 01 00 00 00       \tmov    $0x1,%edx\n  405d14:\t89 c1                \tmov    %eax,%ecx\n  405d16:\t48 d3 e2             \tshl    %cl,%rdx\n  405d19:\t48 89 d0             \tmov    %rdx,%rax\n  405d1c:\t48 09 c7             \tor     %rax,%rdi\n  405d1f:\t48 89 fa             \tmov    %rdi,%rdx\n  405d22:\t48 63 c6             \tmovslq %esi,%rax\n  405d25:\t48 89 94 c5 60 ff ff \tmov    %rdx,-0xa0(%rbp,%rax,8)\n  405d2c:\tff \n  405d2d:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  405d33:\t8d 78 01             \tlea    0x1(%rax),%edi\n  405d36:\t48 8d 8d d0 fe ff ff \tlea    -0x130(%rbp),%rcx\n  405d3d:\t48 8d 95 e0 fe ff ff \tlea    -0x120(%rbp),%rdx\n  405d44:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  405d4b:\t49 89 c8             \tmov    %rcx,%r8\n  405d4e:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  405d53:\t48 89 c6             \tmov    %rax,%rsi\n  405d56:\te8 d5 b3 ff ff       \tcallq  401130 <select@plt>\n  405d5b:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  405d5e:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  405d62:\t79 0a                \tjns    405d6e <enet_socket_wait+0x1ab>\n  405d64:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  405d69:\te9 d2 00 00 00       \tjmpq   405e40 <enet_socket_wait+0x27d>\n  405d6e:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n  405d75:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  405d7b:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  405d7f:\t75 0a                \tjne    405d8b <enet_socket_wait+0x1c8>\n  405d81:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405d86:\te9 b5 00 00 00       \tjmpq   405e40 <enet_socket_wait+0x27d>\n  405d8b:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  405d91:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  405d94:\t85 c0                \ttest   %eax,%eax\n  405d96:\t0f 48 c2             \tcmovs  %edx,%eax\n  405d99:\tc1 f8 06             \tsar    $0x6,%eax\n  405d9c:\t48 98                \tcltq   \n  405d9e:\t48 8b b4 c5 e0 fe ff \tmov    -0x120(%rbp,%rax,8),%rsi\n  405da5:\tff \n  405da6:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  405dac:\t99                   \tcltd   \n  405dad:\tc1 ea 1a             \tshr    $0x1a,%edx\n  405db0:\t01 d0                \tadd    %edx,%eax\n  405db2:\t83 e0 3f             \tand    $0x3f,%eax\n  405db5:\t29 d0                \tsub    %edx,%eax\n  405db7:\tba 01 00 00 00       \tmov    $0x1,%edx\n  405dbc:\t89 c1                \tmov    %eax,%ecx\n  405dbe:\t48 d3 e2             \tshl    %cl,%rdx\n  405dc1:\t48 89 d0             \tmov    %rdx,%rax\n  405dc4:\t48 21 f0             \tand    %rsi,%rax\n  405dc7:\t48 85 c0             \ttest   %rax,%rax\n  405dca:\t74 17                \tje     405de3 <enet_socket_wait+0x220>\n  405dcc:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n  405dd3:\t8b 00                \tmov    (%rax),%eax\n  405dd5:\t83 c8 01             \tor     $0x1,%eax\n  405dd8:\t89 c2                \tmov    %eax,%edx\n  405dda:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n  405de1:\t89 10                \tmov    %edx,(%rax)\n  405de3:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  405de9:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  405dec:\t85 c0                \ttest   %eax,%eax\n  405dee:\t0f 48 c2             \tcmovs  %edx,%eax\n  405df1:\tc1 f8 06             \tsar    $0x6,%eax\n  405df4:\t48 98                \tcltq   \n  405df6:\t48 8b b4 c5 60 ff ff \tmov    -0xa0(%rbp,%rax,8),%rsi\n  405dfd:\tff \n  405dfe:\t8b 85 cc fe ff ff    \tmov    -0x134(%rbp),%eax\n  405e04:\t99                   \tcltd   \n  405e05:\tc1 ea 1a             \tshr    $0x1a,%edx\n  405e08:\t01 d0                \tadd    %edx,%eax\n  405e0a:\t83 e0 3f             \tand    $0x3f,%eax\n  405e0d:\t29 d0                \tsub    %edx,%eax\n  405e0f:\tba 01 00 00 00       \tmov    $0x1,%edx\n  405e14:\t89 c1                \tmov    %eax,%ecx\n  405e16:\t48 d3 e2             \tshl    %cl,%rdx\n  405e19:\t48 89 d0             \tmov    %rdx,%rax\n  405e1c:\t48 21 f0             \tand    %rsi,%rax\n  405e1f:\t48 85 c0             \ttest   %rax,%rax\n  405e22:\t74 17                \tje     405e3b <enet_socket_wait+0x278>\n  405e24:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n  405e2b:\t8b 00                \tmov    (%rax),%eax\n  405e2d:\t83 c8 02             \tor     $0x2,%eax\n  405e30:\t89 c2                \tmov    %eax,%edx\n  405e32:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n  405e39:\t89 10                \tmov    %edx,(%rax)\n  405e3b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  405e40:\tc9                   \tleaveq \n  405e41:\tc3                   \tretq   ", "code_s": "__int64 __fastcall enet_socket_wait(int a1, _DWORD *a2, unsigned int a3) {\n  struct timeval <span class=\"supfact\">timeout</span>;\n  fd_set <span class=\"supfact\">writefds</span>;\n  fd_set <span class=\"supfact\">readfds</span>;\n  __int64 v7;\n  int v8;\n  unsigned int v9;\n  int v10;\n  unsigned int v11;\n  int v12;\n  <span class=\"supfact\">timeout</span>.tv_sec = a3 / Number;\n  <span class=\"supfact\">timeout</span>.tv_usec = Number * (a3 % Number);\n  memset(&<span class=\"supfact\">readfds</span>, Number, sizeof(<span class=\"supfact\">readfds</span>));\n  v12 = Number;\n  v11 = (unsigned int)&v7;\n  memset(&<span class=\"supfact\">writefds</span>, Number, sizeof(<span class=\"supfact\">writefds</span>));\n  v10 = Number;\n  v9 = (unsigned int)&<span class=\"supfact\">readfds</span>;\n  if ((*a2 & Number) != Number)\n    <span class=\"supfact\">writefds</span>.fds_bits[a1 / Number] |= Number L << (a1 % Number);\n  if ((*a2 & Number) != Number)\n    <span class=\"supfact\">readfds</span>.fds_bits[a1 / Number] |= Number L << (a1 % Number);\n  v8 = select(a1 + Number, &<span class=\"supfact\">readfds</span>, &<span class=\"supfact\">writefds</span>,\n              Number L, &<span class=\"supfact\">timeout</span>);\n  if (v8 < Number)\n    return Number;\n  *a2 = Number;\n  if (!v8)\n    return Number L;\n  if ((<span class=\"supfact\">writefds</span>.fds_bits[a1 / Number] &\n       (Number L << (a1 % Number))) != Number)\n    *a2 |= Number;\n  if ((<span class=\"supfact\">readfds</span>.fds_bits[a1 / Number] &\n       (Number L << (a1 % Number))) != Number)\n    *a2 |= Number;\n  return Number L;\n}", "code_t": "int __cdecl enet_socket_wait(ENetSocket socket, enet_uint32 *condition,\n                             enet_uint32 timeout) {\n  timeval <span class=\"supfact\">timeVal</span>;\n  fd_set <span class=\"supfact\">writeSet</span>;\n  fd_set <span class=\"supfact\">readSet</span>;\n  __int64 v7;\n  int selectCount;\n  int __d1_0;\n  int __d0_0;\n  int __d1;\n  int __d0;\n  <span class=\"supfact\">timeVal</span>.tv_sec = timeout / Number;\n  <span class=\"supfact\">timeVal</span>.tv_usec = Number * (timeout % Number);\n  memset(&<span class=\"supfact\">readSet</span>, Number, sizeof(<span class=\"supfact\">readSet</span>));\n  __d0 = Number;\n  __d1 = (unsigned int)&v7;\n  memset(&<span class=\"supfact\">writeSet</span>, Number, sizeof(<span class=\"supfact\">writeSet</span>));\n  __d0_0 = Number;\n  __d1_0 = (unsigned int)&<span class=\"supfact\">readSet</span>;\n  if ((*condition & Number) != Number)\n    <span class=\"supfact\">writeSet</span>.__fds_bits[socket / Number] |=\n        Number L << (socket % Number);\n  if ((*condition & Number) != Number)\n    <span class=\"supfact\">readSet</span>.__fds_bits[socket / Number] |= Number L\n                                                           << (socket % Number);\n  selectCount =\n      select(socket + Number, &<span class=\"supfact\">readSet</span>,\n             &<span class=\"supfact\">writeSet</span>, Number L, &<span class=\"supfact\">timeVal</span>);\n  if (selectCount < Number)\n    return Number;\n  *condition = Number;\n  if (!selectCount)\n    return Number;\n  if ((<span class=\"supfact\">writeSet</span>.__fds_bits[socket / Number] &\n       (Number L << (socket % Number))) != Number)\n    *condition |= Number;\n  if ((<span class=\"supfact\">readSet</span>.__fds_bits[socket / Number] &\n       (Number L << (socket % Number))) != Number)\n    *condition |= Number;\n  return Number;\n}", "var": [{"name": "readfds", "type": "struct fd_set { __fd_mask[16] __fds_bits; }", "ref_name": "readSet", "ref_type": "struct fd_set { __fd_mask[16] __fds_bits; }"}, {"name": "writefds", "type": "struct fd_set { __fd_mask[16] __fds_bits; }", "ref_name": "writeSet", "ref_type": "struct fd_set { __fd_mask[16] __fds_bits; }"}, {"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "timeVal", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "mDibyo", "repo_name": "py-dlib", "path": "mDibyo/py-dlib/d00a54a73f0a7862888db48f974a0404f85faa9914b1976ae3b066f6b9db7f21", "path_in_repo": "mDibyo/py-dlib/dlib/test/find_max_factor_graph_nmplp.o", "objdump": "0000000000000000 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEplEl>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  14:\t48 8b 00             \tmov    (%rax),%rax\n  17:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  1b:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  1f:\t48 01 d0             \tadd    %rdx,%rax\n  22:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  26:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  2a:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  2e:\t48 89 d6             \tmov    %rdx,%rsi\n  31:\t48 89 c7             \tmov    %rax,%rdi\n  34:\te8 00 00 00 00       \tcallq  39 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEplEl+0x39>\n  39:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  3d:\tc9                   \tleaveq \n  3e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall __gnu_cxx\n    __normal_iterator<unsigned long *, std vector<unsigned long>>\n    operator+(_QWORD *a1, __int64 a2) {\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 v4;\n  v4 = Number * a2 + *a1;\n  __gnu_cxx __normal_iterator<unsigned long *, std vector<unsigned long>>\n      __normal_iterator(&<span class=\"supfact\">v3</span>, &v4);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "__gnu_cxx __normal_iterator<long unsigned int *,\n                            std vector<long unsigned int>> __cdecl __gnu_cxx\n    __normal_iterator<unsigned long *, std vector<unsigned long>>\n    operator+(const __gnu_cxx __normal_iterator<long unsigned int *,\n                                                std vector<long unsigned int>>\n                  *const this,\n              __gnu_cxx __normal_iterator<long unsigned int *,\n                                          std vector<long unsigned int>>\n                  difference_type __n) {\n  __gnu_cxx\n      __normal_iterator<long unsigned int *, std vector<long unsigned int>>\n          <span class=\"supfact\">v3</span>;\n  unsigned __int64 *__i;\n  __i = &this->_M_current[__n];\n  __gnu_cxx __normal_iterator<unsigned long *, std vector<unsigned long>>\n      __normal_iterator(&<span class=\"supfact\">v3</span>, &__i);\n  return <span class=\"supfact\">v3</span>;\n}", "var": [{"name": "v3", "type": "__int64", "ref_name": "v3", "ref_type": "struct __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > { unsigned __int64 * _M_current; }"}], "body_in_train": true}, {"repo_owner": "tuxafgmur", "repo_name": "Espresso-Kernel", "path": "tuxafgmur/Espresso-Kernel/a3ae30878711bdb47a3e23747b03b18d3050437efaf85ed941afe0e007be3134", "path_in_repo": "tuxafgmur/Espresso-Kernel/tools/perf/util/util.o", "objdump": "0000000000000000 <mkdir_p>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n   b:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n  12:\t89 b5 44 ff ff ff    \tmov    %esi,-0xbc(%rbp)\n  18:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  1f:\t00 00 \n  21:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  25:\t31 c0                \txor    %eax,%eax\n  27:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  2e:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n  35:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  3c:\t0f b6 00             \tmovzbl (%rax),%eax\n  3f:\t3c 2f                \tcmp    $0x2f,%al\n  41:\t74 0a                \tje     4d <mkdir_p+0x4d>\n  43:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  48:\te9 41 01 00 00       \tjmpq   18e <mkdir_p+0x18e>\n  4d:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  54:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  5b:\t48 89 d6             \tmov    %rdx,%rsi\n  5e:\t48 89 c7             \tmov    %rax,%rdi\n  61:\te8 00 00 00 00       \tcallq  66 <mkdir_p+0x66>\n  66:\t85 c0                \ttest   %eax,%eax\n  68:\t75 0a                \tjne    74 <mkdir_p+0x74>\n  6a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  6f:\te9 1a 01 00 00       \tjmpq   18e <mkdir_p+0x18e>\n  74:\t48 83 85 58 ff ff ff \taddq   $0x1,-0xa8(%rbp)\n  7b:\t01 \n  7c:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  83:\t0f b6 00             \tmovzbl (%rax),%eax\n  86:\t3c 2f                \tcmp    $0x2f,%al\n  88:\t74 ea                \tje     74 <mkdir_p+0x74>\n  8a:\te9 92 00 00 00       \tjmpq   121 <mkdir_p+0x121>\n  8f:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  96:\tc6 00 00             \tmovb   $0x0,(%rax)\n  99:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  a0:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  a7:\t48 89 d6             \tmov    %rdx,%rsi\n  aa:\t48 89 c7             \tmov    %rax,%rdi\n  ad:\te8 00 00 00 00       \tcallq  b2 <mkdir_p+0xb2>\n  b2:\t85 c0                \ttest   %eax,%eax\n  b4:\t74 22                \tje     d8 <mkdir_p+0xd8>\n  b6:\t8b 95 44 ff ff ff    \tmov    -0xbc(%rbp),%edx\n  bc:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  c3:\t89 d6                \tmov    %edx,%esi\n  c5:\t48 89 c7             \tmov    %rax,%rdi\n  c8:\te8 00 00 00 00       \tcallq  cd <mkdir_p+0xcd>\n  cd:\t85 c0                \ttest   %eax,%eax\n  cf:\t74 07                \tje     d8 <mkdir_p+0xd8>\n  d1:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  d6:\teb 05                \tjmp    dd <mkdir_p+0xdd>\n  d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  dd:\t89 85 54 ff ff ff    \tmov    %eax,-0xac(%rbp)\n  e3:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  ea:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  ee:\t48 89 95 58 ff ff ff \tmov    %rdx,-0xa8(%rbp)\n  f5:\tc6 00 2f             \tmovb   $0x2f,(%rax)\n  f8:\t83 bd 54 ff ff ff 00 \tcmpl   $0x0,-0xac(%rbp)\n  ff:\t74 12                \tje     113 <mkdir_p+0x113>\n 101:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 106:\te9 83 00 00 00       \tjmpq   18e <mkdir_p+0x18e>\n 10b:\t48 83 85 58 ff ff ff \taddq   $0x1,-0xa8(%rbp)\n 112:\t01 \n 113:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 11a:\t0f b6 00             \tmovzbl (%rax),%eax\n 11d:\t3c 2f                \tcmp    $0x2f,%al\n 11f:\t74 ea                \tje     10b <mkdir_p+0x10b>\n 121:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 128:\tbe 2f 00 00 00       \tmov    $0x2f,%esi\n 12d:\t48 89 c7             \tmov    %rax,%rdi\n 130:\te8 00 00 00 00       \tcallq  135 <mkdir_p+0x135>\n 135:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n 13c:\t48 83 bd 58 ff ff ff \tcmpq   $0x0,-0xa8(%rbp)\n 143:\t00 \n 144:\t0f 85 45 ff ff ff    \tjne    8f <mkdir_p+0x8f>\n 14a:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n 151:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n 158:\t48 89 d6             \tmov    %rdx,%rsi\n 15b:\t48 89 c7             \tmov    %rax,%rdi\n 15e:\te8 00 00 00 00       \tcallq  163 <mkdir_p+0x163>\n 163:\t85 c0                \ttest   %eax,%eax\n 165:\t74 22                \tje     189 <mkdir_p+0x189>\n 167:\t8b 95 44 ff ff ff    \tmov    -0xbc(%rbp),%edx\n 16d:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n 174:\t89 d6                \tmov    %edx,%esi\n 176:\t48 89 c7             \tmov    %rax,%rdi\n 179:\te8 00 00 00 00       \tcallq  17e <mkdir_p+0x17e>\n 17e:\t85 c0                \ttest   %eax,%eax\n 180:\t74 07                \tje     189 <mkdir_p+0x189>\n 182:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 187:\teb 05                \tjmp    18e <mkdir_p+0x18e>\n 189:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 18e:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 192:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 199:\t00 00 \n 19b:\t74 05                \tje     1a2 <mkdir_p+0x1a2>\n 19d:\te8 00 00 00 00       \tcallq  1a2 <mkdir_p+0x1a2>\n 1a2:\tc9                   \tleaveq \n 1a3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mkdir_p(const char *a1, __mode_t a2) {\n  __int64 result;\n  _BOOL4 v3;\n  char *v4;\n  _BOOL4 v5;\n  char *s;\n  char *sa;\n  struct stat64 <span class=\"supfact\">v8</span>;\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  s = (char *)a1;\n  if (*a1 != Number)\n    return Number;\n  if (!stat64(a1, &<span class=\"supfact\">v8</span>))\n    return Number L;\n  do\n    ++s;\n  while (*s == Number);\n  while (Number) {\n    sa = strchr(s, Number);\n    if (!sa)\n      break;\n    *sa = Number;\n    v3 = stat64(a1, &<span class=\"supfact\">v8</span>) && mkdir(a1, a2);\n    v5 = v3;\n    v4 = sa;\n    s = sa + Number;\n    *v4 = Number;\n    if (v5)\n      return Number;\n    while (*s == Number)\n      ++s;\n  }\n  if (stat64(a1, &<span class=\"supfact\">v8</span>) && mkdir(a1, a2))\n    result = Number;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl mkdir_p(char *path, mode_t mode) {\n  int result;\n  _BOOL4 v3;\n  char *v4;\n  int err;\n  char *d;\n  char *da;\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  d = path;\n  if (*path != Number)\n    return Number;\n  if (!stat64(path, (struct stat64 *)&<span class=\"supfact\">st</span>))\n    return Number;\n  do\n    ++d;\n  while (*d == Number);\n  while (Number) {\n    da = strchr(d, Number);\n    if (!da)\n      break;\n    *da = Number;\n    v3 =\n        stat64(path, (struct stat64 *)&<span class=\"supfact\">st</span>) && mkdir(path, mode);\n    err = v3;\n    v4 = da;\n    d = da + Number;\n    *v4 = Number;\n    if (err)\n      return Number;\n    while (*d == Number)\n      ++d;\n  }\n  if (stat64(path, (struct stat64 *)&<span class=\"supfact\">st</span>) && mkdir(path, mode))\n    result = Number;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v8", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "mDibyo", "repo_name": "py-dlib", "path": "mDibyo/py-dlib/d74674d396f15835bcc4b40e8f72ef79b96db76341a2e1c0bfb6a82ace3d6dc5", "path_in_repo": "mDibyo/py-dlib/dlib/test/array2d.o", "objdump": "0000000000000000 <_ZN4dlib9serializeERKtRSo>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 60          \tsub    $0x60,%rsp\n   b:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   f:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n  13:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  17:\t0f b7 00             \tmovzwl (%rax),%eax\n  1a:\t0f b7 c0             \tmovzwl %ax,%eax\n  1d:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n  21:\t48 89 d6             \tmov    %rdx,%rsi\n  24:\t89 c7                \tmov    %eax,%edi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZN4dlib9serializeERKtRSo+0x2b>\n  2b:\t84 c0                \ttest   %al,%al\n  2d:\t0f 84 cc 00 00 00    \tje     ff <_ZN4dlib9serializeERKtRSo+0xff>\n  33:\tbf 30 00 00 00       \tmov    $0x30,%edi\n  38:\te8 00 00 00 00       \tcallq  3d <_ZN4dlib9serializeERKtRSo+0x3d>\n  3d:\t48 89 c3             \tmov    %rax,%rbx\n  40:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  44:\t48 89 c7             \tmov    %rax,%rdi\n  47:\te8 00 00 00 00       \tcallq  4c <_ZN4dlib9serializeERKtRSo+0x4c>\n  4c:\t48 8d 55 ef          \tlea    -0x11(%rbp),%rdx\n  50:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  54:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  59:\t48 89 c7             \tmov    %rax,%rdi\n  5c:\te8 00 00 00 00       \tcallq  61 <_ZN4dlib9serializeERKtRSo+0x61>\n  61:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  65:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  69:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  6e:\t48 89 c7             \tmov    %rax,%rdi\n  71:\te8 00 00 00 00       \tcallq  76 <_ZN4dlib9serializeERKtRSo+0x76>\n  76:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  7a:\t48 89 c6             \tmov    %rax,%rsi\n  7d:\t48 89 df             \tmov    %rbx,%rdi\n  80:\te8 00 00 00 00       \tcallq  85 <_ZN4dlib9serializeERKtRSo+0x85>\n  85:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  89:\t48 89 c7             \tmov    %rax,%rdi\n  8c:\te8 00 00 00 00       \tcallq  91 <_ZN4dlib9serializeERKtRSo+0x91>\n  91:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  95:\t48 89 c7             \tmov    %rax,%rdi\n  98:\te8 00 00 00 00       \tcallq  9d <_ZN4dlib9serializeERKtRSo+0x9d>\n  9d:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  a1:\t48 89 c7             \tmov    %rax,%rdi\n  a4:\te8 00 00 00 00       \tcallq  a9 <_ZN4dlib9serializeERKtRSo+0xa9>\n  a9:\tba 00 00 00 00       \tmov    $0x0,%edx\n  ae:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  b3:\t48 89 df             \tmov    %rbx,%rdi\n  b6:\te8 00 00 00 00       \tcallq  bb <_ZN4dlib9serializeERKtRSo+0xbb>\n  bb:\t49 89 c4             \tmov    %rax,%r12\n  be:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  c2:\t48 89 c7             \tmov    %rax,%rdi\n  c5:\te8 00 00 00 00       \tcallq  ca <_ZN4dlib9serializeERKtRSo+0xca>\n  ca:\teb 03                \tjmp    cf <_ZN4dlib9serializeERKtRSo+0xcf>\n  cc:\t49 89 c4             \tmov    %rax,%r12\n  cf:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  d3:\t48 89 c7             \tmov    %rax,%rdi\n  d6:\te8 00 00 00 00       \tcallq  db <_ZN4dlib9serializeERKtRSo+0xdb>\n  db:\teb 03                \tjmp    e0 <_ZN4dlib9serializeERKtRSo+0xe0>\n  dd:\t49 89 c4             \tmov    %rax,%r12\n  e0:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  e4:\t48 89 c7             \tmov    %rax,%rdi\n  e7:\te8 00 00 00 00       \tcallq  ec <_ZN4dlib9serializeERKtRSo+0xec>\n  ec:\t48 89 df             \tmov    %rbx,%rdi\n  ef:\te8 00 00 00 00       \tcallq  f4 <_ZN4dlib9serializeERKtRSo+0xf4>\n  f4:\t4c 89 e0             \tmov    %r12,%rax\n  f7:\t48 89 c7             \tmov    %rax,%rdi\n  fa:\te8 00 00 00 00       \tcallq  ff <_ZN4dlib9serializeERKtRSo+0xff>\n  ff:\t90                   \tnop\n 100:\t48 83 c4 60          \tadd    $0x60,%rsp\n 104:\t5b                   \tpop    %rbx\n 105:\t41 5c                \tpop    %r12\n 107:\t5d                   \tpop    %rbp\n 108:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dlib serialize(dlib *this, const unsigned __int16 *a2,\n                                  std ostream *a3) {\n  __int64 result;\n  std exception *v4;\n  char <span class=\"supfact\">v5</span>[Number];\n  char <span class=\"supfact\">v6</span>[Number];\n  char v7[Number];\n  result =\n      dlib ser_helper pack_int<unsigned short>(*(unsigned __int16 *)this, a2);\n  if ((_BYTE)result) {\n    v4 = (std exception *)_cxa_allocate_exception(Number);\n    std allocator<char> allocator(v7);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(<span class=\"supfact\">v6</span>, String, v7);\n    std operator+<char>(<span class=\"supfact\">v5</span>, String, <span class=\"supfact\">v6</span>);\n    dlib serialization_error serialization_error(v4,\n                                                 (__int64)<span class=\"supfact\">v5</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v5</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v6</span>);\n    std allocator<char> ~allocator(v7); _cxa_throw ( v4 , ( struct type_info * ) & ` typeinfo for ' dlib serialization_error , dlib serialization_error ~ serialization_error ) ; } return result ; }", "code_t": "void __cdecl dlib serialize(const unsigned __int16 *item, std ostream *out) {\n  dlib serialization_error *v2;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">e</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">__rhs</span>;\n  char v5[Number];\n  if (dlib ser_helper pack_int<unsigned short>(*item, out)) {\n    v2 = (dlib serialization_error *)_cxa_allocate_exception(Number);\n    std allocator<char> allocator(v5);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(&<span class=\"supfact\">__rhs</span>, String, v5);\n    std operator+<char>(&<span class=\"supfact\">e</span>, String, &<span class=\"supfact\">__rhs</span>);\n    dlib serialization_error serialization_error(v2, &<span class=\"supfact\">e</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">e</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">__rhs</span>);\n    std allocator<char> ~allocator(v5); _cxa_throw ( v2 , ( struct type_info * ) & ` typeinfo for ' dlib serialization_error , ( void ( __fastcall * ) ( void * ) ) dlib serialization_error ~ serialization_error ) ; } }", "var": [{"name": "v6", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "__rhs", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v5", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "e", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/cfd8ca825abdd48ca5369e8984436bbbf56c63b5e0f43608d790284ea8df3edf", "path_in_repo": "XanClic/qemu//riscv32-softmmu/hw/virtio/virtio.o", "objdump": "0000000000000ec0 <_nocheck__trace_virtio_set_status>:\n     ec0:\t55                   \tpush   %rbp\n     ec1:\t48 89 e5             \tmov    %rsp,%rbp\n     ec4:\t41 55                \tpush   %r13\n     ec6:\t41 54                \tpush   %r12\n     ec8:\t53                   \tpush   %rbx\n     ec9:\t48 83 ec 38          \tsub    $0x38,%rsp\n     ecd:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     ed1:\t89 f0                \tmov    %esi,%eax\n     ed3:\t88 45 b4             \tmov    %al,-0x4c(%rbp)\n     ed6:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     edd:\t00 00 \n     edf:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     ee3:\t31 c0                \txor    %eax,%eax\n     ee5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # eeb <_nocheck__trace_virtio_set_status+0x2b>\n     eeb:\t85 c0                \ttest   %eax,%eax\n     eed:\t0f 95 c0             \tsetne  %al\n     ef0:\t0f b6 c0             \tmovzbl %al,%eax\n     ef3:\t48 85 c0             \ttest   %rax,%rax\n     ef6:\t74 65                \tje     f5d <_nocheck__trace_virtio_set_status+0x9d>\n     ef8:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # eff <_nocheck__trace_virtio_set_status+0x3f>\n     eff:\t66 85 c0             \ttest   %ax,%ax\n     f02:\t74 59                \tje     f5d <_nocheck__trace_virtio_set_status+0x9d>\n     f04:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     f09:\te8 2b f9 ff ff       \tcallq  839 <qemu_loglevel_mask>\n     f0e:\t84 c0                \ttest   %al,%al\n     f10:\t74 4b                \tje     f5d <_nocheck__trace_virtio_set_status+0x9d>\n     f12:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     f16:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f1b:\t48 89 c7             \tmov    %rax,%rdi\n     f1e:\te8 00 00 00 00       \tcallq  f23 <_nocheck__trace_virtio_set_status+0x63>\n     f23:\t0f b6 5d b4          \tmovzbl -0x4c(%rbp),%ebx\n     f27:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     f2b:\t49 89 c5             \tmov    %rax,%r13\n     f2e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f32:\t49 89 c4             \tmov    %rax,%r12\n     f35:\te8 00 00 00 00       \tcallq  f3a <_nocheck__trace_virtio_set_status+0x7a>\n     f3a:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     f3e:\t41 89 d9             \tmov    %ebx,%r9d\n     f41:\t49 89 d0             \tmov    %rdx,%r8\n     f44:\t4c 89 e9             \tmov    %r13,%rcx\n     f47:\t4c 89 e2             \tmov    %r12,%rdx\n     f4a:\t89 c6                \tmov    %eax,%esi\n     f4c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # f53 <_nocheck__trace_virtio_set_status+0x93>\n     f53:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f58:\te8 00 00 00 00       \tcallq  f5d <_nocheck__trace_virtio_set_status+0x9d>\n     f5d:\t90                   \tnop\n     f5e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f62:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     f69:\t00 00 \n     f6b:\t74 05                \tje     f72 <_nocheck__trace_virtio_set_status+0xb2>\n     f6d:\te8 00 00 00 00       \tcallq  f72 <_nocheck__trace_virtio_set_status+0xb2>\n     f72:\t48 83 c4 38          \tadd    $0x38,%rsp\n     f76:\t5b                   \tpop    %rbx\n     f77:\t41 5c                \tpop    %r12\n     f79:\t41 5d                \tpop    %r13\n     f7b:\t5d                   \tpop    %rbp\n     f7c:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_virtio_set_status(\n    const void *a1, unsigned __int8 a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VIRTIO_SET_STATUS_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v2 = <span class=\"supfact\">tv</span>.tv_usec;\n    v3 = <span class=\"supfact\">tv</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, a1, a2);\n  }\n  return __readfsqword(Number) ^ v7;\n}", "code_t": "void __cdecl nocheck__trace_virtio_set_status(void *vdev, uint8_t val) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VIRTIO_SET_STATUS_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v2 = <span class=\"supfact\">_now</span>.tv_usec;\n    v3 = <span class=\"supfact\">_now</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, vdev, val);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "jordansissel", "repo_name": "tmux", "path": "jordansissel/tmux/8c54c58ec5c6c45af38e829f1a79d944af77d1a77275700b93d321f9e256a16e", "path_in_repo": "jordansissel/tmux/tags/TMUX_1_0/tmux", "objdump": "000000000042e255 <siginit>:\n  42e255:\t55                   \tpush   %rbp\n  42e256:\t48 89 e5             \tmov    %rsp,%rbp\n  42e259:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  42e260:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e267:\tba 98 00 00 00       \tmov    $0x98,%edx\n  42e26c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  42e271:\t48 89 c7             \tmov    %rax,%rdi\n  42e274:\te8 67 50 fd ff       \tcallq  4032e0 <memset@plt>\n  42e279:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e280:\t48 83 c0 08          \tadd    $0x8,%rax\n  42e284:\t48 89 c7             \tmov    %rax,%rdi\n  42e287:\te8 64 51 fd ff       \tcallq  4033f0 <sigemptyset@plt>\n  42e28c:\tc7 45 e8 00 00 00 10 \tmovl   $0x10000000,-0x18(%rbp)\n  42e293:\t48 c7 85 60 ff ff ff \tmovq   $0x1,-0xa0(%rbp)\n  42e29a:\t01 00 00 00 \n  42e29e:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e2a5:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42e2aa:\t48 89 c6             \tmov    %rax,%rsi\n  42e2ad:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n  42e2b2:\te8 69 4e fd ff       \tcallq  403120 <sigaction@plt>\n  42e2b7:\t85 c0                \ttest   %eax,%eax\n  42e2b9:\t74 19                \tje     42e2d4 <siginit+0x7f>\n  42e2bb:\tba 28 81 44 00       \tmov    $0x448128,%edx\n  42e2c0:\tbe 28 8a 44 00       \tmov    $0x448a28,%esi\n  42e2c5:\tbf 39 81 44 00       \tmov    $0x448139,%edi\n  42e2ca:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42e2cf:\te8 a2 07 ff ff       \tcallq  41ea76 <log_fatal>\n  42e2d4:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e2db:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42e2e0:\t48 89 c6             \tmov    %rax,%rsi\n  42e2e3:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  42e2e8:\te8 33 4e fd ff       \tcallq  403120 <sigaction@plt>\n  42e2ed:\t85 c0                \ttest   %eax,%eax\n  42e2ef:\t74 19                \tje     42e30a <siginit+0xb5>\n  42e2f1:\tba 28 81 44 00       \tmov    $0x448128,%edx\n  42e2f6:\tbe 28 8a 44 00       \tmov    $0x448a28,%esi\n  42e2fb:\tbf 39 81 44 00       \tmov    $0x448139,%edi\n  42e300:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42e305:\te8 6c 07 ff ff       \tcallq  41ea76 <log_fatal>\n  42e30a:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e311:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42e316:\t48 89 c6             \tmov    %rax,%rsi\n  42e319:\tbf 14 00 00 00       \tmov    $0x14,%edi\n  42e31e:\te8 fd 4d fd ff       \tcallq  403120 <sigaction@plt>\n  42e323:\t85 c0                \ttest   %eax,%eax\n  42e325:\t74 19                \tje     42e340 <siginit+0xeb>\n  42e327:\tba 28 81 44 00       \tmov    $0x448128,%edx\n  42e32c:\tbe 28 8a 44 00       \tmov    $0x448a28,%esi\n  42e331:\tbf 39 81 44 00       \tmov    $0x448139,%edi\n  42e336:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42e33b:\te8 36 07 ff ff       \tcallq  41ea76 <log_fatal>\n  42e340:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e347:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42e34c:\t48 89 c6             \tmov    %rax,%rsi\n  42e34f:\tbf 03 00 00 00       \tmov    $0x3,%edi\n  42e354:\te8 c7 4d fd ff       \tcallq  403120 <sigaction@plt>\n  42e359:\t85 c0                \ttest   %eax,%eax\n  42e35b:\t74 19                \tje     42e376 <siginit+0x121>\n  42e35d:\tba 28 81 44 00       \tmov    $0x448128,%edx\n  42e362:\tbe 28 8a 44 00       \tmov    $0x448a28,%esi\n  42e367:\tbf 39 81 44 00       \tmov    $0x448139,%edi\n  42e36c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42e371:\te8 00 07 ff ff       \tcallq  41ea76 <log_fatal>\n  42e376:\t48 c7 85 60 ff ff ff \tmovq   $0x42e1d5,-0xa0(%rbp)\n  42e37d:\td5 e1 42 00 \n  42e381:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e388:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42e38d:\t48 89 c6             \tmov    %rax,%rsi\n  42e390:\tbf 1c 00 00 00       \tmov    $0x1c,%edi\n  42e395:\te8 86 4d fd ff       \tcallq  403120 <sigaction@plt>\n  42e39a:\t85 c0                \ttest   %eax,%eax\n  42e39c:\t74 19                \tje     42e3b7 <siginit+0x162>\n  42e39e:\tba 28 81 44 00       \tmov    $0x448128,%edx\n  42e3a3:\tbe 28 8a 44 00       \tmov    $0x448a28,%esi\n  42e3a8:\tbf 39 81 44 00       \tmov    $0x448139,%edi\n  42e3ad:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42e3b2:\te8 bf 06 ff ff       \tcallq  41ea76 <log_fatal>\n  42e3b7:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e3be:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42e3c3:\t48 89 c6             \tmov    %rax,%rsi\n  42e3c6:\tbf 0f 00 00 00       \tmov    $0xf,%edi\n  42e3cb:\te8 50 4d fd ff       \tcallq  403120 <sigaction@plt>\n  42e3d0:\t85 c0                \ttest   %eax,%eax\n  42e3d2:\t74 19                \tje     42e3ed <siginit+0x198>\n  42e3d4:\tba 28 81 44 00       \tmov    $0x448128,%edx\n  42e3d9:\tbe 28 8a 44 00       \tmov    $0x448a28,%esi\n  42e3de:\tbf 39 81 44 00       \tmov    $0x448139,%edi\n  42e3e3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42e3e8:\te8 89 06 ff ff       \tcallq  41ea76 <log_fatal>\n  42e3ed:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e3f4:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42e3f9:\t48 89 c6             \tmov    %rax,%rsi\n  42e3fc:\tbf 11 00 00 00       \tmov    $0x11,%edi\n  42e401:\te8 1a 4d fd ff       \tcallq  403120 <sigaction@plt>\n  42e406:\t85 c0                \ttest   %eax,%eax\n  42e408:\t74 19                \tje     42e423 <siginit+0x1ce>\n  42e40a:\tba 28 81 44 00       \tmov    $0x448128,%edx\n  42e40f:\tbe 28 8a 44 00       \tmov    $0x448a28,%esi\n  42e414:\tbf 39 81 44 00       \tmov    $0x448139,%edi\n  42e419:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42e41e:\te8 53 06 ff ff       \tcallq  41ea76 <log_fatal>\n  42e423:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e42a:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42e42f:\t48 89 c6             \tmov    %rax,%rsi\n  42e432:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  42e437:\te8 e4 4c fd ff       \tcallq  403120 <sigaction@plt>\n  42e43c:\t85 c0                \ttest   %eax,%eax\n  42e43e:\t74 19                \tje     42e459 <siginit+0x204>\n  42e440:\tba 28 81 44 00       \tmov    $0x448128,%edx\n  42e445:\tbe 28 8a 44 00       \tmov    $0x448a28,%esi\n  42e44a:\tbf 39 81 44 00       \tmov    $0x448139,%edi\n  42e44f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42e454:\te8 1d 06 ff ff       \tcallq  41ea76 <log_fatal>\n  42e459:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  42e460:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42e465:\t48 89 c6             \tmov    %rax,%rsi\n  42e468:\tbf 0c 00 00 00       \tmov    $0xc,%edi\n  42e46d:\te8 ae 4c fd ff       \tcallq  403120 <sigaction@plt>\n  42e472:\t85 c0                \ttest   %eax,%eax\n  42e474:\t74 19                \tje     42e48f <siginit+0x23a>\n  42e476:\tba 28 81 44 00       \tmov    $0x448128,%edx\n  42e47b:\tbe 28 8a 44 00       \tmov    $0x448a28,%esi\n  42e480:\tbf 39 81 44 00       \tmov    $0x448139,%edi\n  42e485:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42e48a:\te8 e7 05 ff ff       \tcallq  41ea76 <log_fatal>\n  42e48f:\t90                   \tnop\n  42e490:\tc9                   \tleaveq \n  42e491:\tc3                   \tretq   ", "code_s": "int siginit() {\n  __int64 v0;\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  __int64 v21;\n  __int64 v22;\n  __int64 v23;\n  int result;\n  __int64 v25;\n  __int64 v26;\n  __int64 v27;\n  struct sigaction <span class=\"supfact\">s</span>;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  sigemptyset(&<span class=\"supfact\">s</span>.sa_mask);\n  <span class=\"supfact\">s</span>.sa_flags = Number;\n  <span class=\"supfact\">s</span>.sa_handler = (__sighandler_t)Number;\n  if (sigaction(Number, &<span class=\"supfact\">s</span>, Number L))\n    log_fatal(String, (__int64)String, (__int64)String, v0, v1, v2);\n  if (sigaction(Number, &<span class=\"supfact\">s</span>, Number L))\n    log_fatal(String, (__int64)String, (__int64)String, v3, v4, v5);\n  if (sigaction(Number, &<span class=\"supfact\">s</span>, Number L))\n    log_fatal(String, (__int64)String, (__int64)String, v6, v7, v8);\n  if (sigaction(Number, &<span class=\"supfact\">s</span>, Number L))\n    log_fatal(String, (__int64)String, (__int64)String, v9, v10, v11);\n  <span class=\"supfact\">s</span>.sa_handler = (__sighandler_t)sighandler;\n  if (sigaction(Number, &<span class=\"supfact\">s</span>, Number L))\n    log_fatal(String, (__int64)String, (__int64)String, v12, v13, v14);\n  if (sigaction(Number, &<span class=\"supfact\">s</span>, Number L))\n    log_fatal(String, (__int64)String, (__int64)String, v15, v16, v17);\n  if (sigaction(Number, &<span class=\"supfact\">s</span>, Number L))\n    log_fatal(String, (__int64)String, (__int64)String, v18, v19, v20);\n  if (sigaction(Number, &<span class=\"supfact\">s</span>, Number L))\n    log_fatal(String, (__int64)String, (__int64)String, v21, v22, v23);\n  result = sigaction(Number, &<span class=\"supfact\">s</span>, Number L);\n  if (result)\n    log_fatal(String, (__int64)String, (__int64)String, v25, v26, v27);\n  return result;\n}", "code_t": "void __cdecl siginit() {\n  sigaction <span class=\"supfact\">act</span>;\n  memset(&<span class=\"supfact\">act</span>, Number, sizeof(<span class=\"supfact\">act</span>));\n  sigemptyset(&<span class=\"supfact\">act</span>.sa_mask);\n  <span class=\"supfact\">act</span>.sa_flags = Number;\n  <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)Number;\n  if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L))\n    log_fatal(String, String, String);\n  if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L))\n    log_fatal(String, String, String);\n  if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L))\n    log_fatal(String, String, String);\n  if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L))\n    log_fatal(String, String, String);\n  <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)sighandler;\n  if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L))\n    log_fatal(String, String, String);\n  if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L))\n    log_fatal(String, String, String);\n  if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L))\n    log_fatal(String, String, String);\n  if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L))\n    log_fatal(String, String, String);\n  if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L))\n    log_fatal(String, String, String);\n}", "var": [{"name": "s", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7fc6defa16bc99f7600b943ce03c36e881a2bee185a0642a27c64ad0b2c25858", "path_in_repo": "XanClic/qemu//i386-softmmu/gdbstub.o", "objdump": "000000000000095e <_nocheck__trace_gdbstub_hit_watchdog>:\n     95e:\t55                   \tpush   %rbp\n     95f:\t48 89 e5             \tmov    %rsp,%rbp\n     962:\t41 54                \tpush   %r12\n     964:\t53                   \tpush   %rbx\n     965:\t48 83 ec 20          \tsub    $0x20,%rsp\n     969:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     970:\t00 00 \n     972:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     976:\t31 c0                \txor    %eax,%eax\n     978:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 97e <_nocheck__trace_gdbstub_hit_watchdog+0x20>\n     97e:\t85 c0                \ttest   %eax,%eax\n     980:\t0f 95 c0             \tsetne  %al\n     983:\t0f b6 c0             \tmovzbl %al,%eax\n     986:\t48 85 c0             \ttest   %rax,%rax\n     989:\t74 57                \tje     9e2 <_nocheck__trace_gdbstub_hit_watchdog+0x84>\n     98b:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 992 <_nocheck__trace_gdbstub_hit_watchdog+0x34>\n     992:\t66 85 c0             \ttest   %ax,%ax\n     995:\t74 4b                \tje     9e2 <_nocheck__trace_gdbstub_hit_watchdog+0x84>\n     997:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     99c:\te8 bf f6 ff ff       \tcallq  60 <qemu_loglevel_mask>\n     9a1:\t84 c0                \ttest   %al,%al\n     9a3:\t74 3d                \tje     9e2 <_nocheck__trace_gdbstub_hit_watchdog+0x84>\n     9a5:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     9a9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     9ae:\t48 89 c7             \tmov    %rax,%rdi\n     9b1:\te8 00 00 00 00       \tcallq  9b6 <_nocheck__trace_gdbstub_hit_watchdog+0x58>\n     9b6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     9ba:\t49 89 c4             \tmov    %rax,%r12\n     9bd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     9c1:\t48 89 c3             \tmov    %rax,%rbx\n     9c4:\te8 00 00 00 00       \tcallq  9c9 <_nocheck__trace_gdbstub_hit_watchdog+0x6b>\n     9c9:\t4c 89 e1             \tmov    %r12,%rcx\n     9cc:\t48 89 da             \tmov    %rbx,%rdx\n     9cf:\t89 c6                \tmov    %eax,%esi\n     9d1:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 9d8 <_nocheck__trace_gdbstub_hit_watchdog+0x7a>\n     9d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9dd:\te8 00 00 00 00       \tcallq  9e2 <_nocheck__trace_gdbstub_hit_watchdog+0x84>\n     9e2:\t90                   \tnop\n     9e3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9e7:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     9ee:\t00 00 \n     9f0:\t74 05                \tje     9f7 <_nocheck__trace_gdbstub_hit_watchdog+0x99>\n     9f2:\te8 00 00 00 00       \tcallq  9f7 <_nocheck__trace_gdbstub_hit_watchdog+0x99>\n     9f7:\t48 83 c4 20          \tadd    $0x20,%rsp\n     9fb:\t5b                   \tpop    %rbx\n     9fc:\t41 5c                \tpop    %r12\n     9fe:\t5d                   \tpop    %rbp\n     9ff:\tc3                   \tretq   ", "code_s": "unsigned __int64 nocheck__trace_gdbstub_hit_watchdog() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_HIT_WATCHDOG_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v0 = <span class=\"supfact\">tv</span>.tv_usec;\n    v1 = <span class=\"supfact\">tv</span>.tv_sec;\n    v2 = qemu_get_thread_id();\n    qemu_log(String, v2, v1, v0);\n  }\n  return __readfsqword(Number) ^ v5;\n}", "code_t": "void __cdecl nocheck__trace_gdbstub_hit_watchdog() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_GDBSTUB_HIT_WATCHDOG_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v0 = <span class=\"supfact\">_now</span>.tv_usec;\n    v1 = <span class=\"supfact\">_now</span>.tv_sec;\n    v2 = qemu_get_thread_id();\n    qemu_log(String, v2, v1, v0);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "lalithsuresh", "repo_name": "QEMU-Device-State-Visualisations", "path": "lalithsuresh/QEMU-Device-State-Visualisations/cb0b889c73b29dd42cd303d630b3ee50df82ecb11933e051688f2b7feae93d45", "path_in_repo": "lalithsuresh/QEMU-Device-State-Visualisations//sh4-softmmu/virtio-9p.o", "objdump": "0000000000000b74 <v9fs_do_symlink>:\n     b74:\t55                   \tpush   %rbp\n     b75:\t48 89 e5             \tmov    %rsp,%rbp\n     b78:\t48 83 ec 50          \tsub    $0x50,%rsp\n     b7c:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     b80:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     b84:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     b88:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n     b8c:\t44 89 45 bc          \tmov    %r8d,-0x44(%rbp)\n     b90:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     b97:\t00 00 \n     b99:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     b9d:\t31 c0                \txor    %eax,%eax\n     b9f:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     ba3:\t48 89 c7             \tmov    %rax,%rdi\n     ba6:\te8 00 00 00 00       \tcallq  bab <v9fs_do_symlink+0x37>\n     bab:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     baf:\t8b 40 48             \tmov    0x48(%rax),%eax\n     bb2:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     bb5:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     bb8:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     bbb:\tc7 45 e8 ff 01 00 00 \tmovl   $0x1ff,-0x18(%rbp)\n     bc2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     bc6:\t48 8b 80 a0 14 50 00 \tmov    0x5014a0(%rax),%rax\n     bcd:\t4c 8b 40 38          \tmov    0x38(%rax),%r8\n     bd1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     bd5:\t48 8d b8 a8 14 50 00 \tlea    0x5014a8(%rax),%rdi\n     bdc:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n     be0:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n     be4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     be8:\t48 89 c6             \tmov    %rax,%rsi\n     beb:\t41 ff d0             \tcallq  *%r8\n     bee:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n     bf2:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n     bf9:\t00 00 \n     bfb:\t74 05                \tje     c02 <v9fs_do_symlink+0x8e>\n     bfd:\te8 00 00 00 00       \tcallq  c02 <v9fs_do_symlink+0x8e>\n     c02:\tc9                   \tleaveq \n     c03:\tc3                   \tretq   ", "code_s": "__int64 __fastcall v9fs_do_symlink(__int64 a1, __int64 a2, __int64 a3,\n                                   __int64 a4, int a5) {\n  int <span class=\"supfact\">v9</span>[Number];\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  cred_init((__int64)<span class=\"supfact\">v9</span>);\n  <span class=\"supfact\">v9</span>[Number] = *(_DWORD *)(a2 + Number);\n  <span class=\"supfact\">v9</span>[Number] = a5;\n  <span class=\"supfact\">v9</span>[Number] = Number;\n  return (*(__int64(__fastcall **)(__int64, __int64, __int64, int *))(\n      *(_QWORD *)(a1 + Number) + Number L))(a1 + Number, a3, a4,\n                                            <span class=\"supfact\">v9</span>);\n}", "code_t": "int __cdecl v9fs_do_symlink(V9fsState_0 *s, V9fsFidState_0 *fidp,\n                            const char *oldpath, const char *newpath,\n                            gid_t gid) {\n  FsCred_0 <span class=\"supfact\">cred</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  cred_init(&<span class=\"supfact\">cred</span>);\n  <span class=\"supfact\">cred</span>.fc_uid = fidp->uid;\n  <span class=\"supfact\">cred</span>.fc_gid = gid;\n  <span class=\"supfact\">cred</span>.fc_mode = Number;\n  return s->ops->symlink(&s->ctx, oldpath, newpath, &<span class=\"supfact\">cred</span>);\n}", "var": [{"name": "v9", "type": "struct FsCred_0 { uid_t fc_uid; gid_t fc_gid; mode_t fc_mode; PADDING (4); dev_t fc_rdev; }", "ref_name": "cred", "ref_type": "struct FsCred_0 { uid_t fc_uid; gid_t fc_gid; mode_t fc_mode; PADDING (4); dev_t fc_rdev; }"}], "body_in_train": false}, {"repo_owner": "kjkasi", "repo_name": "030005", "path": "kjkasi/030005/0182fbeb07f5b25ca323532ca8dc50746772e05d797b633188dc1b76361bfc75", "path_in_repo": "kjkasi/030005/ngos/JWNR2000_4EMRUS/SW/opensource/wireless/wpa2/wpa_supplicant/driver_wext.o", "objdump": "0000000000001546 <wpa_driver_wext_get_ifflags_ifname>:\n    1546:\t55                   \tpush   %rbp\n    1547:\t48 89 e5             \tmov    %rsp,%rbp\n    154a:\t48 83 ec 50          \tsub    $0x50,%rsp\n    154e:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1552:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    1556:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    155a:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    155e:\tba 28 00 00 00       \tmov    $0x28,%edx\n    1563:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1568:\t48 89 c7             \tmov    %rax,%rdi\n    156b:\te8 00 00 00 00       \tcallq  1570 <wpa_driver_wext_get_ifflags_ifname+0x2a>\n    1570:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n    1574:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1578:\tba 10 00 00 00       \tmov    $0x10,%edx\n    157d:\t48 89 ce             \tmov    %rcx,%rsi\n    1580:\t48 89 c7             \tmov    %rax,%rdi\n    1583:\te8 00 00 00 00       \tcallq  1588 <wpa_driver_wext_get_ifflags_ifname+0x42>\n    1588:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    158c:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    158f:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    1593:\tbe 13 89 00 00       \tmov    $0x8913,%esi\n    1598:\t89 c7                \tmov    %eax,%edi\n    159a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    159f:\te8 00 00 00 00       \tcallq  15a4 <wpa_driver_wext_get_ifflags_ifname+0x5e>\n    15a4:\t85 c0                \ttest   %eax,%eax\n    15a6:\t79 11                \tjns    15b9 <wpa_driver_wext_get_ifflags_ifname+0x73>\n    15a8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    15ad:\te8 00 00 00 00       \tcallq  15b2 <wpa_driver_wext_get_ifflags_ifname+0x6c>\n    15b2:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    15b7:\teb 13                \tjmp    15cc <wpa_driver_wext_get_ifflags_ifname+0x86>\n    15b9:\t0f b7 45 e0          \tmovzwl -0x20(%rbp),%eax\n    15bd:\t98                   \tcwtl   \n    15be:\t0f b7 d0             \tmovzwl %ax,%edx\n    15c1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    15c5:\t89 10                \tmov    %edx,(%rax)\n    15c7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    15cc:\tc9                   \tleaveq \n    15cd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall wpa_driver_wext_get_ifflags_ifname(__int64 a1,\n                                                      const char *a2,\n                                                      _DWORD *a3) {\n  __int64 result;\n  __int16 <span class=\"supfact\">s</span>[Number];\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  strncpy((char *)<span class=\"supfact\">s</span>, a2, Number);\n  if (ioctl(*(_DWORD *)(a1 + Number), Number, <span class=\"supfact\">s</span>) >= Number) {\n    *a3 = (unsigned __int16)<span class=\"supfact\">s</span>[Number];\n    result = Number L;\n  } else {\n    perror(String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl wpa_driver_wext_get_ifflags_ifname(wpa_driver_wext_data *drv,\n                                               const char *ifname, int *flags) {\n  int result;\n  ifreq <span class=\"supfact\">ifr</span>;\n  memset(&<span class=\"supfact\">ifr</span>, Number, sizeof(<span class=\"supfact\">ifr</span>));\n  strncpy(<span class=\"supfact\">ifr</span>.ifr_ifrn.ifrn_name, ifname, Number);\n  if (ioctl(drv->ioctl_sock, Number, &<span class=\"supfact\">ifr</span>) >= Number) {\n    *flags = <span class=\"supfact\">ifr</span>.ifr_ifru.ifru_addr.sa_family;\n    result = Number;\n  } else {\n    perror(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "s", "type": "struct ifreq { $EC3FB77B1F5CBB3C6B6AB4B4CE5B261D ifr_ifrn; $3766CEB1D20AE6FB37CD7F05C4AF9C4E ifr_ifru; }", "ref_name": "ifr", "ref_type": "struct ifreq { $EC3FB77B1F5CBB3C6B6AB4B4CE5B261D ifr_ifrn; $3766CEB1D20AE6FB37CD7F05C4AF9C4E ifr_ifru; }"}], "body_in_train": false}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/254c90ea45174d91c760e7feb3587a03e680251d8c068189b167e16bcc7151dd", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Benchmarks/ASC_Sequoia/CrystalMk/Output/SPEdriver.o", "objdump": "0000000000000000 <SPEdriver>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 57                \tpush   %r15\n   6:\t41 56                \tpush   %r14\n   8:\t41 55                \tpush   %r13\n   a:\t41 54                \tpush   %r12\n   c:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  13:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n  1a:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n  21:\t48 89 95 58 ff ff ff \tmov    %rdx,-0xa8(%rbp)\n  28:\t48 89 8d 50 ff ff ff \tmov    %rcx,-0xb0(%rbp)\n  2f:\t4c 89 85 48 ff ff ff \tmov    %r8,-0xb8(%rbp)\n  36:\t4c 89 8d 40 ff ff ff \tmov    %r9,-0xc0(%rbp)\n  3d:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n  42:\t48 98                \tcltq   \n  44:\t48 83 e8 01          \tsub    $0x1,%rax\n  48:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  4c:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n  51:\t48 98                \tcltq   \n  53:\t49 89 c6             \tmov    %rax,%r14\n  56:\t41 bf 00 00 00 00    \tmov    $0x0,%r15d\n  5c:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n  61:\t48 98                \tcltq   \n  63:\t48 83 e8 01          \tsub    $0x1,%rax\n  67:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  6b:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n  70:\t48 98                \tcltq   \n  72:\t49 89 c4             \tmov    %rax,%r12\n  75:\t41 bd 00 00 00 00    \tmov    $0x0,%r13d\n  7b:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n  80:\t48 98                \tcltq   \n  82:\t48 83 e8 01          \tsub    $0x1,%rax\n  86:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  8a:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n  8f:\t48 98                \tcltq   \n  91:\t49 89 c2             \tmov    %rax,%r10\n  94:\t41 bb 00 00 00 00    \tmov    $0x0,%r11d\n  9a:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n  a1:\t00 \n  a2:\t48 c7 45 a0 00 00 00 \tmovq   $0x0,-0x60(%rbp)\n  a9:\t00 \n  aa:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  ae:\tf2 0f 11 45 98       \tmovsd  %xmm0,-0x68(%rbp)\n  b3:\tc7 45 94 80 84 1e 00 \tmovl   $0x1e8480,-0x6c(%rbp)\n  ba:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n  c1:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  c5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  ca:\t48 89 c7             \tmov    %rax,%rdi\n  cd:\te8 00 00 00 00       \tcallq  d2 <SPEdriver+0xd2>\n  d2:\te8 00 00 00 00       \tcallq  d7 <SPEdriver+0xd7>\n  d7:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n  db:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n  e2:\teb 5b                \tjmp    13f <SPEdriver+0x13f>\n  e4:\t41 ba 0c 00 00 00    \tmov    $0xc,%r10d\n  ea:\t4c 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%r8\n  f1:\t48 8b bd 50 ff ff ff \tmov    -0xb0(%rbp),%rdi\n  f8:\t48 8b 8d 58 ff ff ff \tmov    -0xa8(%rbp),%rcx\n  ff:\t48 8b 95 60 ff ff ff \tmov    -0xa0(%rbp),%rdx\n 106:\t48 8b b5 68 ff ff ff \tmov    -0x98(%rbp),%rsi\n 10d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 114 <SPEdriver+0x114>\n 114:\t48 83 ec 08          \tsub    $0x8,%rsp\n 118:\tff 75 18             \tpushq  0x18(%rbp)\n 11b:\tff 75 10             \tpushq  0x10(%rbp)\n 11e:\tff b5 40 ff ff ff    \tpushq  -0xc0(%rbp)\n 124:\t4d 89 c1             \tmov    %r8,%r9\n 127:\t49 89 f8             \tmov    %rdi,%r8\n 12a:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n 12f:\t44 89 d7             \tmov    %r10d,%edi\n 132:\te8 00 00 00 00       \tcallq  137 <SPEdriver+0x137>\n 137:\t48 83 c4 20          \tadd    $0x20,%rsp\n 13b:\t83 45 d4 01          \taddl   $0x1,-0x2c(%rbp)\n 13f:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 142:\t3b 45 94             \tcmp    -0x6c(%rbp),%eax\n 145:\t7c 9d                \tjl     e4 <SPEdriver+0xe4>\n 147:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n 14e:\teb 23                \tjmp    173 <SPEdriver+0x173>\n 150:\tba 0c 00 00 00       \tmov    $0xc,%edx\n 155:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n 15c:\t48 89 c6             \tmov    %rax,%rsi\n 15f:\t89 d7                \tmov    %edx,%edi\n 161:\te8 00 00 00 00       \tcallq  166 <SPEdriver+0x166>\n 166:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n 16b:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 16f:\t83 45 d4 01          \taddl   $0x1,-0x2c(%rbp)\n 173:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 176:\t3b 45 94             \tcmp    -0x6c(%rbp),%eax\n 179:\t7c d5                \tjl     150 <SPEdriver+0x150>\n 17b:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n 182:\teb 73                \tjmp    1f7 <SPEdriver+0x1f7>\n 184:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n 18b:\teb 5c                \tjmp    1e9 <SPEdriver+0x1e9>\n 18d:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 190:\t48 63 d0             \tmovslq %eax,%rdx\n 193:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n 198:\t48 98                \tcltq   \n 19a:\t48 0f af c2          \timul   %rdx,%rax\n 19e:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 1a5:\t00 \n 1a6:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n 1ad:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n 1b1:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 1b4:\t48 63 d0             \tmovslq %eax,%rdx\n 1b7:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n 1bc:\t48 98                \tcltq   \n 1be:\t48 0f af c2          \timul   %rdx,%rax\n 1c2:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 1c9:\t00 \n 1ca:\t48 8b 45 18          \tmov    0x18(%rbp),%rax\n 1ce:\t48 01 c2             \tadd    %rax,%rdx\n 1d1:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 1d4:\t48 98                \tcltq   \n 1d6:\tf2 0f 10 04 c1       \tmovsd  (%rcx,%rax,8),%xmm0\n 1db:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 1de:\t48 98                \tcltq   \n 1e0:\tf2 0f 11 04 c2       \tmovsd  %xmm0,(%rdx,%rax,8)\n 1e5:\t83 45 d8 01          \taddl   $0x1,-0x28(%rbp)\n 1e9:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n 1ee:\t39 45 d8             \tcmp    %eax,-0x28(%rbp)\n 1f1:\t7c 9a                \tjl     18d <SPEdriver+0x18d>\n 1f3:\t83 45 d4 01          \taddl   $0x1,-0x2c(%rbp)\n 1f7:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n 1fc:\t39 45 d4             \tcmp    %eax,-0x2c(%rbp)\n 1ff:\t7c 83                \tjl     184 <SPEdriver+0x184>\n 201:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n 208:\te9 ac 00 00 00       \tjmpq   2b9 <SPEdriver+0x2b9>\n 20d:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n 214:\teb 73                \tjmp    289 <SPEdriver+0x289>\n 216:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n 21d:\teb 5c                \tjmp    27b <SPEdriver+0x27b>\n 21f:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 222:\t48 63 d0             \tmovslq %eax,%rdx\n 225:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n 22a:\t48 98                \tcltq   \n 22c:\t48 0f af c2          \timul   %rdx,%rax\n 230:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 237:\t00 \n 238:\t48 8b 45 18          \tmov    0x18(%rbp),%rax\n 23c:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n 240:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 243:\t48 63 d0             \tmovslq %eax,%rdx\n 246:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n 24b:\t48 98                \tcltq   \n 24d:\t48 0f af c2          \timul   %rdx,%rax\n 251:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 258:\t00 \n 259:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n 260:\t48 01 c2             \tadd    %rax,%rdx\n 263:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 266:\t48 98                \tcltq   \n 268:\tf2 0f 10 04 c1       \tmovsd  (%rcx,%rax,8),%xmm0\n 26d:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 270:\t48 98                \tcltq   \n 272:\tf2 0f 11 04 c2       \tmovsd  %xmm0,(%rdx,%rax,8)\n 277:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n 27b:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n 280:\t39 45 dc             \tcmp    %eax,-0x24(%rbp)\n 283:\t7c 9a                \tjl     21f <SPEdriver+0x21f>\n 285:\t83 45 d8 01          \taddl   $0x1,-0x28(%rbp)\n 289:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n 28e:\t39 45 d8             \tcmp    %eax,-0x28(%rbp)\n 291:\t7c 83                \tjl     216 <SPEdriver+0x216>\n 293:\tbf 0c 00 00 00       \tmov    $0xc,%edi\n 298:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n 29f:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n 2a6:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n 2ad:\t48 89 c6             \tmov    %rax,%rsi\n 2b0:\te8 00 00 00 00       \tcallq  2b5 <SPEdriver+0x2b5>\n 2b5:\t83 45 d4 01          \taddl   $0x1,-0x2c(%rbp)\n 2b9:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 2bc:\t3b 45 94             \tcmp    -0x6c(%rbp),%eax\n 2bf:\t0f 8c 48 ff ff ff    \tjl     20d <SPEdriver+0x20d>\n 2c5:\tf2 0f 10 45 c8       \tmovsd  -0x38(%rbp),%xmm0\n 2ca:\t48 8d 65 e0          \tlea    -0x20(%rbp),%rsp\n 2ce:\t41 5c                \tpop    %r12\n 2d0:\t41 5d                \tpop    %r13\n 2d2:\t41 5e                \tpop    %r14\n 2d4:\t41 5f                \tpop    %r15\n 2d6:\t5d                   \tpop    %rbp\n 2d7:\tc3                   \tretq   \n", "code_s": "double __fastcall SPEdriver(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n                            __int64 a5, __int64 a6, __int64 a7, __int64 a8) {\n  struct timeval <span class=\"supfact\">tv</span>;\n  int v14;\n  __int64 v15;\n  __int64 v16;\n  clock_t v17;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  double v21;\n  int i;\n  int j;\n  int k;\n  v20 = Number L;\n  v19 = Number L;\n  v18 = Number L;\n  v17 = Number L;\n  v16 = Number L;\n  v15 = Number L;\n  v14 = Number;\n  i = Number;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  v17 = clock();\n  for (i = Number; i < v14; ++i)\n    Crystal_div(Number L, a1, a2, a3, a4, a5, Number, a6, a7, a8);\n  for (i = Number; i < v14; ++i)\n    v21 = Crystal_pow(Number L, a1);\n  for (i = Number; i < Number; ++i) {\n    for (j = Number; j < Number; ++j)\n      *(_QWORD *)(a8 + Number L * i + Number L * j) =\n          *(_QWORD *)(Number L * i + a6 + Number L * j);\n  }\n  for (i = Number; i < v14; ++i) {\n    for (j = Number; j < Number; ++j) {\n      for (k = Number; k < Number; ++k)\n        *(_QWORD *)(a6 + Number L * j + Number L * k) =\n            *(_QWORD *)(Number L * j + a8 + Number L * k);\n    }\n    Crystal_Cholesky(Number L, a6, a3, a5);\n  }\n  return v21;\n}", "code_t": "double __cdecl SPEdriver(double *slipRate, double *dSlipRate, double *tau,\n                         double *tauc, double *rhs, double (*dtcdgd)[],\n                         double (*dtdg)[], double (*matrix)[]) {\n  timeval <span class=\"supfact\">t0</span>;\n  int noIter;\n  double del_wtime;\n  clock_t t1_cpu;\n  clock_t t0_cpu;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  double tmp;\n  int i;\n  int j;\n  int k;\n  v20 = Number L;\n  v19 = Number L;\n  v18 = Number L;\n  t0_cpu = Number L;\n  t1_cpu = Number L;\n  del_wtime = Number;\n  noIter = Number;\n  i = Number;\n  gettimeofday(&<span class=\"supfact\">t0</span>, Number L);\n  t0_cpu = clock();\n  for (i = Number; i < noIter; ++i)\n    Crystal_div(Number L, slipRate, dSlipRate, tau, tauc, rhs, Number, dtcdgd,\n                dtdg, matrix);\n  for (i = Number; i < noIter; ++i)\n    tmp = Crystal_pow(Number L, slipRate);\n  for (i = Number; i < Number; ++i) {\n    for (j = Number; j < Number; ++j)\n      *((_QWORD *)matrix + Number * i + j) =\n          *((_QWORD *)dtcdgd + Number * i + j);\n  }\n  for (i = Number; i < noIter; ++i) {\n    for (j = Number; j < Number; ++j) {\n      for (k = Number; k < Number; ++k)\n        *((_QWORD *)dtcdgd + Number * j + k) =\n            *((_QWORD *)matrix + Number * j + k);\n    }\n    Crystal_Cholesky(Number L, dtcdgd, tau, rhs);\n  }\n  return tmp;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "t0", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "xobs", "repo_name": "fernly", "path": "xobs/fernly/56ba2a0e0c0d3c9fbb2f753f4a01f0fd468479d27f12b1bcb375392c97a5e1a0", "path_in_repo": "xobs/fernly//build/fernly-usb-loader", "objdump": "000000000040332a <fernvale_write_stage3>:\n  40332a:\t55                   \tpush   %rbp\n  40332b:\t48 89 e5             \tmov    %rsp,%rbp\n  40332e:\t41 57                \tpush   %r15\n  403330:\t41 56                \tpush   %r14\n  403332:\t41 54                \tpush   %r12\n  403334:\t53                   \tpush   %rbx\n  403335:\t48 81 ec 60 01 00 00 \tsub    $0x160,%rsp\n  40333c:\t89 bd 9c fe ff ff    \tmov    %edi,-0x164(%rbp)\n  403342:\t89 b5 98 fe ff ff    \tmov    %esi,-0x168(%rbp)\n  403348:\t48 89 e0             \tmov    %rsp,%rax\n  40334b:\t49 89 c4             \tmov    %rax,%r12\n  40334e:\t48 8d 95 20 ff ff ff \tlea    -0xe0(%rbp),%rdx\n  403355:\t8b 85 98 fe ff ff    \tmov    -0x168(%rbp),%eax\n  40335b:\t48 89 d6             \tmov    %rdx,%rsi\n  40335e:\t89 c7                \tmov    %eax,%edi\n  403360:\te8 5b 25 00 00       \tcallq  4058c0 <__fstat>\n  403365:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  403368:\t75 14                \tjne    40337e <fernvale_write_stage3+0x54>\n  40336a:\tbf 85 61 40 00       \tmov    $0x406185,%edi\n  40336f:\te8 2c de ff ff       \tcallq  4011a0 <perror@plt>\n  403374:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  403379:\te8 52 de ff ff       \tcallq  4011d0 <exit@plt>\n  40337e:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  403385:\t89 c2                \tmov    %eax,%edx\n  403387:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  40338e:\t89 d1                \tmov    %edx,%ecx\n  403390:\tba b7 68 40 00       \tmov    $0x4068b7,%edx\n  403395:\tbe 7f 00 00 00       \tmov    $0x7f,%esi\n  40339a:\t48 89 c7             \tmov    %rax,%rdi\n  40339d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4033a2:\te8 f9 dc ff ff       \tcallq  4010a0 <snprintf@plt>\n  4033a7:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  4033aa:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  4033ad:\t48 8d 8d a0 fe ff ff \tlea    -0x160(%rbp),%rcx\n  4033b4:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n  4033ba:\t48 89 ce             \tmov    %rcx,%rsi\n  4033bd:\t89 c7                \tmov    %eax,%edi\n  4033bf:\te8 ac dc ff ff       \tcallq  401070 <write@plt>\n  4033c4:\t48 8d 8d a0 fe ff ff \tlea    -0x160(%rbp),%rcx\n  4033cb:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n  4033d1:\tba 80 00 00 00       \tmov    $0x80,%edx\n  4033d6:\t48 89 ce             \tmov    %rcx,%rsi\n  4033d9:\t89 c7                \tmov    %eax,%edi\n  4033db:\te8 f0 dc ff ff       \tcallq  4010d0 <read@plt>\n  4033e0:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4033e7:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  4033ea:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4033f1:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  4033f4:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n  4033fb:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  4033fe:\t89 c6                \tmov    %eax,%esi\n  403400:\tbf 06 68 40 00       \tmov    $0x406806,%edi\n  403405:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40340a:\te8 81 dc ff ff       \tcallq  401090 <printf@plt>\n  40340f:\t48 8b 05 2a 5d 00 00 \tmov    0x5d2a(%rip),%rax        # 409140 <stdout@@GLIBC_2.2.5>\n  403416:\t48 89 c7             \tmov    %rax,%rdi\n  403419:\te8 02 dd ff ff       \tcallq  401120 <fflush@plt>\n  40341e:\t8b 5d d8             \tmov    -0x28(%rbp),%ebx\n  403421:\t89 d8                \tmov    %ebx,%eax\n  403423:\t48 83 e8 01          \tsub    $0x1,%rax\n  403427:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  40342b:\t89 d8                \tmov    %ebx,%eax\n  40342d:\t48 89 85 80 fe ff ff \tmov    %rax,-0x180(%rbp)\n  403434:\t48 c7 85 88 fe ff ff \tmovq   $0x0,-0x178(%rbp)\n  40343b:\t00 00 00 00 \n  40343f:\t89 d8                \tmov    %ebx,%eax\n  403441:\t49 89 c6             \tmov    %rax,%r14\n  403444:\t41 bf 00 00 00 00    \tmov    $0x0,%r15d\n  40344a:\t89 da                \tmov    %ebx,%edx\n  40344c:\tb8 10 00 00 00       \tmov    $0x10,%eax\n  403451:\t48 83 e8 01          \tsub    $0x1,%rax\n  403455:\t48 01 d0             \tadd    %rdx,%rax\n  403458:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  40345d:\tba 00 00 00 00       \tmov    $0x0,%edx\n  403462:\t48 f7 f1             \tdiv    %rcx\n  403465:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n  403469:\t48 29 c4             \tsub    %rax,%rsp\n  40346c:\t48 89 e0             \tmov    %rsp,%rax\n  40346f:\t48 83 c0 00          \tadd    $0x0,%rax\n  403473:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  403477:\t89 da                \tmov    %ebx,%edx\n  403479:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  40347d:\t8b 85 98 fe ff ff    \tmov    -0x168(%rbp),%eax\n  403483:\t48 89 ce             \tmov    %rcx,%rsi\n  403486:\t89 c7                \tmov    %eax,%edi\n  403488:\te8 43 dc ff ff       \tcallq  4010d0 <read@plt>\n  40348d:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n  403490:\t83 7d bc ff          \tcmpl   $0xffffffff,-0x44(%rbp)\n  403494:\t75 14                \tjne    4034aa <fernvale_write_stage3+0x180>\n  403496:\tbf 18 68 40 00       \tmov    $0x406818,%edi\n  40349b:\te8 00 dd ff ff       \tcallq  4011a0 <perror@plt>\n  4034a0:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4034a5:\te9 c1 00 00 00       \tjmpq   40356b <fernvale_write_stage3+0x241>\n  4034aa:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  4034ad:\t39 45 d8             \tcmp    %eax,-0x28(%rbp)\n  4034b0:\t74 29                \tje     4034db <fernvale_write_stage3+0x1b1>\n  4034b2:\t48 8b 05 a7 5c 00 00 \tmov    0x5ca7(%rip),%rax        # 409160 <stderr@@GLIBC_2.2.5>\n  4034b9:\t8b 4d bc             \tmov    -0x44(%rbp),%ecx\n  4034bc:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n  4034bf:\tbe 40 68 40 00       \tmov    $0x406840,%esi\n  4034c4:\t48 89 c7             \tmov    %rax,%rdi\n  4034c7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4034cc:\te8 1f dc ff ff       \tcallq  4010f0 <fprintf@plt>\n  4034d1:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4034d6:\te9 90 00 00 00       \tjmpq   40356b <fernvale_write_stage3+0x241>\n  4034db:\t89 da                \tmov    %ebx,%edx\n  4034dd:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  4034e1:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n  4034e7:\t48 89 ce             \tmov    %rcx,%rsi\n  4034ea:\t89 c7                \tmov    %eax,%edi\n  4034ec:\te8 7f db ff ff       \tcallq  401070 <write@plt>\n  4034f1:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n  4034f4:\t83 7d bc ff          \tcmpl   $0xffffffff,-0x44(%rbp)\n  4034f8:\t75 11                \tjne    40350b <fernvale_write_stage3+0x1e1>\n  4034fa:\tbf 68 68 40 00       \tmov    $0x406868,%edi\n  4034ff:\te8 9c dc ff ff       \tcallq  4011a0 <perror@plt>\n  403504:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  403509:\teb 60                \tjmp    40356b <fernvale_write_stage3+0x241>\n  40350b:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  40350e:\t39 45 d8             \tcmp    %eax,-0x28(%rbp)\n  403511:\t74 29                \tje     40353c <fernvale_write_stage3+0x212>\n  403513:\t89 de                \tmov    %ebx,%esi\n  403515:\t48 8b 05 44 5c 00 00 \tmov    0x5c44(%rip),%rax        # 409160 <stderr@@GLIBC_2.2.5>\n  40351c:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n  40351f:\t89 d1                \tmov    %edx,%ecx\n  403521:\t89 f2                \tmov    %esi,%edx\n  403523:\tbe 88 68 40 00       \tmov    $0x406888,%esi\n  403528:\t48 89 c7             \tmov    %rax,%rdi\n  40352b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403530:\te8 bb db ff ff       \tcallq  4010f0 <fprintf@plt>\n  403535:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40353a:\teb 2f                \tjmp    40356b <fernvale_write_stage3+0x241>\n  40353c:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  40353f:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  403542:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n  403545:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  403548:\t89 c6                \tmov    %eax,%esi\n  40354a:\tbf ac 68 40 00       \tmov    $0x4068ac,%edi\n  40354f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403554:\te8 37 db ff ff       \tcallq  401090 <printf@plt>\n  403559:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n  40355f:\t89 c7                \tmov    %eax,%edi\n  403561:\te8 fa da ff ff       \tcallq  401060 <tcdrain@plt>\n  403566:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40356b:\t4c 89 e4             \tmov    %r12,%rsp\n  40356e:\t48 8d 65 e0          \tlea    -0x20(%rbp),%rsp\n  403572:\t5b                   \tpop    %rbx\n  403573:\t41 5c                \tpop    %r12\n  403575:\t41 5e                \tpop    %r14\n  403577:\t41 5f                \tpop    %r15\n  403579:\t5d                   \tpop    %rbp\n  40357a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall fernvale_write_stage3(int a1, int a2) {\n  unsigned int v2;\n  void *v3;\n  __int64 result;\n  __int64 v5[Number];\n  int fildes;\n  int fd;\n  char s[Number];\n  struct stat <span class=\"supfact\">stat_buf</span>;\n  unsigned int v10;\n  void *buf;\n  __int64 v12;\n  unsigned int v13;\n  size_t nbytes;\n  fd = a1;\n  fildes = a2;\n  if ((unsigned int)fstat(a2, &<span class=\"supfact\">stat_buf</span>) == Number) {\n    perror(String);\n    exit(Number);\n  }\n  HIDWORD(nbytes) =\n      snprintf(s, Number, String, LODWORD(<span class=\"supfact\">stat_buf</span>.st_size));\n  write(fd, s, HIDWORD(nbytes));\n  read(fd, s, Number);\n  HIDWORD(nbytes) = <span class=\"supfact\">stat_buf</span>.st_size;\n  LODWORD(nbytes) = <span class=\"supfact\">stat_buf</span>.st_size;\n  v13 = Number;\n  printf(String, LODWORD(<span class=\"supfact\">stat_buf</span>.st_size));\n  fflush(stdout);\n  v2 = nbytes;\n  v12 = (unsigned int)nbytes - Number L;\n  v5[Number] = (unsigned int)nbytes;\n  v5[Number] = Number L;\n  v3 = alloca(Number *\n              (((unsigned __int64)(unsigned int)nbytes + Number) / Number));\n  buf = v5;\n  v10 = read(fildes, v5, (unsigned int)nbytes);\n  if (v10 == Number) {\n    perror(String);\n    result = Number;\n  } else if ((_DWORD)nbytes == v10) {\n    v10 = write(fd, buf, v2);\n    if (v10 == Number) {\n      perror(String);\n      result = Number;\n    } else if ((_DWORD)nbytes == v10) {\n      v13 = v10;\n      printf(String, v10, (unsigned int)nbytes);\n      tcdrain(fd);\n      result = Number L;\n    } else {\n      fprintf(stderr, String, v2, v10);\n      result = Number;\n    }\n  } else {\n    fprintf(stderr, String, (unsigned int)nbytes, v10);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl fernvale_write_stage3(int serfd, int binfd) {\n  uint32_t v2;\n  void *v3;\n  int result;\n  __int64 v5[Number];\n  int binfda;\n  int serfda;\n  char cmd[Number];\n  stat <span class=\"supfact\">stats</span>;\n  int ret;\n  char(*p_bfr)[];\n  __int64 v12;\n  uint32_t bytes_written;\n  uint32_t bytes_total;\n  uint32_t bytes_left;\n  serfda = serfd;\n  binfda = binfd;\n  if ((unsigned int)fstat(binfd, &<span class=\"supfact\">stats</span>) == Number) {\n    perror(String);\n    exit(Number);\n  }\n  bytes_left =\n      snprintf(cmd, Number, String, LODWORD(<span class=\"supfact\">stats</span>.st_size));\n  write(serfda, cmd, bytes_left);\n  read(serfda, cmd, Number);\n  bytes_left = <span class=\"supfact\">stats</span>.st_size;\n  bytes_total = <span class=\"supfact\">stats</span>.st_size;\n  bytes_written = Number;\n  printf(String, LODWORD(<span class=\"supfact\">stats</span>.st_size));\n  fflush(stdout);\n  v2 = bytes_total;\n  v12 = bytes_total - Number L;\n  v5[Number] = bytes_total;\n  v5[Number] = Number L;\n  v3 = alloca(Number * (((unsigned __int64)bytes_total + Number) / Number));\n  p_bfr = (char(*)[])v5;\n  ret = read(binfda, v5, bytes_total);\n  if (ret == Number) {\n    perror(String);\n    result = Number;\n  } else if (bytes_total == ret) {\n    ret = write(serfda, p_bfr, v2);\n    if (ret == Number) {\n      perror(String);\n      result = Number;\n    } else if (bytes_total == ret) {\n      bytes_written = ret;\n      printf(String, (unsigned int)ret, bytes_total);\n      tcdrain(serfda);\n      result = Number;\n    } else {\n      fprintf(stderr, String, v2, (unsigned int)ret);\n      result = Number;\n    }\n  } else {\n    fprintf(stderr, String, bytes_total, (unsigned int)ret);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "stat_buf", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "stats", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2abe3c33acf51fb42f142297b073a84856f555f57984ef7d34118d448cf862ba", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/starshp1.o", "objdump": "00000000000010c9 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t>:\n    10c9:\t55                   \tpush   %rbp\n    10ca:\t48 89 e5             \tmov    %rsp,%rbp\n    10cd:\t53                   \tpush   %rbx\n    10ce:\t48 83 ec 68          \tsub    $0x68,%rsp\n    10d2:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    10d6:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n    10da:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    10e1:\t00 \n    10e2:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    10e6:\t48 89 c7             \tmov    %rax,%rdi\n    10e9:\te8 00 00 00 00       \tcallq  10ee <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x25>\n    10ee:\t48 83 7d 90 00       \tcmpq   $0x0,-0x70(%rbp)\n    10f3:\t75 25                \tjne    111a <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x51>\n    10f5:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    10f9:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    10ff:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1104:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1109:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    110e:\t48 89 c7             \tmov    %rax,%rdi\n    1111:\te8 00 00 00 00       \tcallq  1116 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x4d>\n    1116:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n    111a:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1121 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x58>\n    1121:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n    1125:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1129:\t41 b8 20 89 0b 00    \tmov    $0xb8920,%r8d\n    112f:\t48 89 d1             \tmov    %rdx,%rcx\n    1132:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1137:\t48 89 c7             \tmov    %rax,%rdi\n    113a:\te8 00 00 00 00       \tcallq  113f <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x76>\n    113f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1143:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1147:\tba 00 00 00 00       \tmov    $0x0,%edx\n    114c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1151:\t48 89 c7             \tmov    %rax,%rdi\n    1154:\te8 00 00 00 00       \tcallq  1159 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x90>\n    1159:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    115d:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1162:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1167:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    116c:\t48 89 c7             \tmov    %rax,%rdi\n    116f:\te8 00 00 00 00       \tcallq  1174 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0xab>\n    1174:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 117b <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0xb2>\n    117b:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n    117f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1183:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1189:\t48 89 d1             \tmov    %rdx,%rcx\n    118c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1191:\t48 89 c7             \tmov    %rax,%rdi\n    1194:\te8 00 00 00 00       \tcallq  1199 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0xd0>\n    1199:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    119d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11a1:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    11a6:\t48 89 c7             \tmov    %rax,%rdi\n    11a9:\te8 00 00 00 00       \tcallq  11ae <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0xe5>\n    11ae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11b2:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    11b7:\t48 89 c7             \tmov    %rax,%rdi\n    11ba:\te8 00 00 00 00       \tcallq  11bf <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0xf6>\n    11bf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11c3:\t68 f0 00 00 00       \tpushq  $0xf0\n    11c8:\t6a 00                \tpushq  $0x0\n    11ca:\t41 b9 06 01 00 00    \tmov    $0x106,%r9d\n    11d0:\t41 b8 00 02 00 00    \tmov    $0x200,%r8d\n    11d6:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    11db:\tba 00 02 00 00       \tmov    $0x200,%edx\n    11e0:\tbe 00 49 5c 00       \tmov    $0x5c4900,%esi\n    11e5:\t48 89 c7             \tmov    %rax,%rdi\n    11e8:\te8 00 00 00 00       \tcallq  11ed <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x124>\n    11ed:\t48 83 c4 10          \tadd    $0x10,%rsp\n    11f1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11f5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11fa:\t48 89 c7             \tmov    %rax,%rdi\n    11fd:\te8 00 00 00 00       \tcallq  1202 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x139>\n    1202:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1206:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    120b:\t48 89 c7             \tmov    %rax,%rdi\n    120e:\te8 00 00 00 00       \tcallq  1213 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x14a>\n    1213:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1217:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n    121e:\t00 \n    121f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1223:\tc7 40 50 13 00 00 00 \tmovl   $0x13,0x50(%rax)\n    122a:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    122e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1233:\t48 89 c7             \tmov    %rax,%rdi\n    1236:\te8 00 00 00 00       \tcallq  123b <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x172>\n    123b:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    123f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1244:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    1249:\t48 89 c7             \tmov    %rax,%rdi\n    124c:\te8 00 00 00 00       \tcallq  1251 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x188>\n    1251:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1258 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x18f>\n    1258:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n    125c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1260:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1266:\t48 89 d1             \tmov    %rdx,%rcx\n    1269:\tba 00 00 00 00       \tmov    $0x0,%edx\n    126e:\t48 89 c7             \tmov    %rax,%rdi\n    1271:\te8 00 00 00 00       \tcallq  1276 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x1ad>\n    1276:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    127a:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 1282 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x1b9>\n    1281:\t00 \n    1282:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1286:\t66 0f 28 d0          \tmovapd %xmm0,%xmm2\n    128a:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    128e:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    1292:\t48 89 c7             \tmov    %rax,%rdi\n    1295:\te8 00 00 00 00       \tcallq  129a <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x1d1>\n    129a:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 12a1 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x1d8>\n    12a1:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n    12a5:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    12a9:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    12af:\t48 89 d1             \tmov    %rdx,%rcx\n    12b2:\tba 00 00 00 00       \tmov    $0x0,%edx\n    12b7:\t48 89 c7             \tmov    %rax,%rdi\n    12ba:\te8 00 00 00 00       \tcallq  12bf <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x1f6>\n    12bf:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    12c3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12c7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    12cc:\t48 89 c7             \tmov    %rax,%rdi\n    12cf:\te8 00 00 00 00       \tcallq  12d4 <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x20b>\n    12d4:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 12db <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x212>\n    12db:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12df:\tb9 ff ff 00 00       \tmov    $0xffff,%ecx\n    12e4:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n    12e9:\tba 00 00 00 00       \tmov    $0x0,%edx\n    12ee:\tbe ff ff 00 00       \tmov    $0xffff,%esi\n    12f3:\t48 89 c7             \tmov    %rax,%rdi\n    12f6:\te8 00 00 00 00       \tcallq  12fb <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x232>\n    12fb:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n    12ff:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1303:\t48 89 c7             \tmov    %rax,%rdi\n    1306:\te8 00 00 00 00       \tcallq  130b <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x242>\n    130b:\t48 89 d8             \tmov    %rbx,%rax\n    130e:\teb 1a                \tjmp    132a <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x261>\n    1310:\t48 89 c3             \tmov    %rax,%rbx\n    1313:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1317:\t48 89 c7             \tmov    %rax,%rdi\n    131a:\te8 00 00 00 00       \tcallq  131f <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x256>\n    131f:\t48 89 d8             \tmov    %rbx,%rax\n    1322:\t48 89 c7             \tmov    %rax,%rdi\n    1325:\te8 00 00 00 00       \tcallq  132a <_ZL33construct_machine_config_starshp1R14machine_configP8device_t+0x261>\n    132a:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n    132e:\tc9                   \tleaveq \n    132f:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_starshp1(__int64 a1,\n                                                       device_t *a2) {\n  int v2;\n  const void *v3;\n  unsigned int v4;\n  device_t *v6;\n  device_t *v7;\n  char <span class=\"supfact\">v8</span>[Number];\n  device_t *v9;\n  v6 = a2;\n  v9 = Number L;\n  astring astring((astring *)<span class=\"supfact\">v8</span>);\n  if (!a2)\n    v6 = (device_t *)machine_config device_add(\n        a1, Number L, String, driver_device_creator<starshp1_state>, Number L);\n  v9 = (device_t *)machine_config device_add(a1, v6, String, M6502, Number L);\n  device_memory_interface static_set_addrmap(\n      v9, Number L, construct_address_map_starshp1_map);\n  device_execute_interface static_set_vblank_int(\n      v9, (device_t *)starshp1_interrupt,\n      (void(__fastcall *)(device_t *))String, Number L, v2);\n  v9 = (device_t *)machine_config device_add(a1, v6, String, SCREEN, Number L);\n  screen_device static_set_type(v9, Number L);\n  screen_device static_set_format(v9, Number L);\n  screen_device static_set_raw(v9, (device_t *)Number, Number, Number, Number,\n                               Number, Number, Number, (unsigned __int16)v6);\n  screen_device static_set_screen_update(v9, &screen_update_starshp1);\n  screen_device static_set_screen_eof(v9, &screen_eof_starshp1);\n  *(_QWORD *)(a1 + Number) = &gfxdecodeinfo_starshp1;\n  *(_DWORD *)(a1 + Number) = Number;\n  driver_device static_set_palette_init(v7, &palette_init_starshp1);\n  driver_device static_set_callback(v7, Number L, &video_start_starshp1);\n  v9 = (device_t *)machine_config device_add(a1, v7, String, SPEAKER, Number L);\n  speaker_device static_set_position(v9, v7, Number, Number, Number);\n  v9 =\n      (device_t *)machine_config device_add(a1, v7, String, DISCRETE, Number L);\n  device_t static_set_static_config(\n      v9, (device_t *)&starshp1_discrete_interface, v3);\n  device_sound_interface static_add_route(v9, (device_t *)Number,\n                                          (unsigned int)String,\n                                          (const char *)Number, Number, v4);\n  astring ~astring((astring *)<span class=\"supfact\">v8</span>);\n  return v7;\n}", "code_t": "device_t *__cdecl construct_machine_config_starshp1(machine_config *config,\n                                                    device_t *owner) {\n  void(__fastcall * v2)(address_map *, const device_t *);\n  int v3;\n  screen_type_enum v4;\n  _bitmap_format v5;\n  unsigned int(__fastcall * v6)(screen_device *, bitmap_t *,\n                                const _rectangle *);\n  void(__fastcall * v7)(screen_device *, running_machine *);\n  void(__fastcall * v8)(running_machine *, const unsigned __int8 *);\n  void(__fastcall * v9)(running_machine *);\n  unsigned int v10;\n  device_t *ownera;\n  driver_device *ownerb;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *device;\n  ownera = owner;\n  device = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  if (!owner)\n    ownera = (device_t *)machine_config device_add(\n        config, Number L, String,\n        (device_t * (__fastcall *)(const machine_config *, const char *,\n                                   device_t *, unsigned int))\n            driver_device_creator<starshp1_state>,\n        Number);\n  device = (device_t *)machine_config device_add(config, ownera, String, M6502,\n                                                 Number);\n  device_memory_interface static_set_addrmap(\n      device, Number L, (address_spacenum)construct_address_map_starshp1_map,\n      v2);\n  device_execute_interface static_set_vblank_int(\n      device, (device_t *)starshp1_interrupt,\n      (void(__fastcall *)(device_t *))String, Number L, v3);\n  device = (device_t *)machine_config device_add(config, ownera, String, SCREEN,\n                                                 Number);\n  screen_device static_set_type(device, (device_t *)&loc_1, v4);\n  screen_device static_set_format(device, (device_t *)((char *)&loc_1 + Number),\n                                  v5);\n  screen_device static_set_raw(device, (device_t *)Number, Number, Number,\n                               Number, Number, Number, Number,\n                               (unsigned __int16)ownera);\n  screen_device static_set_screen_update(\n      device, (device_t *)&screen_update_starshp1, v6);\n  screen_device static_set_screen_eof(device, (device_t *)&screen_eof_starshp1,\n                                      v7);\n  config->m_gfxdecodeinfo = gfxdecodeinfo_starshp1;\n  config->m_total_colors = Number;\n  driver_device static_set_palette_init(ownerb,\n                                        (device_t *)&palette_init_starshp1, v8);\n  driver_device static_set_callback(\n      ownerb, (device_t *)&loc_4,\n      (driver_device callback_type)&video_start_starshp1, v9);\n  device = (device_t *)machine_config device_add(config, ownerb, String,\n                                                 SPEAKER, Number);\n  speaker_device static_set_position(device, ownerb, Number, Number, Number);\n  device = (device_t *)machine_config device_add(config, ownerb, String,\n                                                 DISCRETE, Number);\n  device_t static_set_static_config(device, &starshp1_discrete_interface);\n  device_sound_interface static_add_route(device, (device_t *)Number,\n                                          (unsigned int)String,\n                                          (const char *)Number, Number, v10);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return ownerb;\n}", "var": [{"name": "v8", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "githankH", "repo_name": "chromecast-mirrored-source.kernel", "path": "githankH/chromecast-mirrored-source.kernel/ffc9e003dec192a56904d3f109fb88784b399735537c2e8b47a0f480596203f6", "path_in_repo": "githankH/chromecast-mirrored-source.kernel/linux-3.8/tools/perf/util/thread_map.o", "objdump": "00000000000002ef <thread_map__new_by_uid>:\n 2ef:\t55                   \tpush   %rbp\n 2f0:\t48 89 e5             \tmov    %rsp,%rbp\n 2f3:\t53                   \tpush   %rbx\n 2f4:\t48 81 ec 28 03 00 00 \tsub    $0x328,%rsp\n 2fb:\t89 bd dc fc ff ff    \tmov    %edi,-0x324(%rbp)\n 301:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 308:\t00 00 \n 30a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 30e:\t31 c0                \txor    %eax,%eax\n 310:\tc7 85 f0 fc ff ff 20 \tmovl   $0x20,-0x310(%rbp)\n 317:\t00 00 00 \n 31a:\t48 c7 85 08 fd ff ff \tmovq   $0x0,-0x2f8(%rbp)\n 321:\t00 00 00 00 \n 325:\t8b 85 f0 fc ff ff    \tmov    -0x310(%rbp),%eax\n 32b:\t48 98                \tcltq   \n 32d:\t48 83 c0 01          \tadd    $0x1,%rax\n 331:\t48 c1 e0 02          \tshl    $0x2,%rax\n 335:\t48 89 c7             \tmov    %rax,%rdi\n 338:\te8 00 00 00 00       \tcallq  33d <thread_map__new_by_uid+0x4e>\n 33d:\t48 89 85 18 fd ff ff \tmov    %rax,-0x2e8(%rbp)\n 344:\t48 83 bd 18 fd ff ff \tcmpq   $0x0,-0x2e8(%rbp)\n 34b:\t00 \n 34c:\t0f 84 c6 02 00 00    \tje     618 <thread_map__new_by_uid+0x329>\n 352:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 357:\te8 00 00 00 00       \tcallq  35c <thread_map__new_by_uid+0x6d>\n 35c:\t48 89 85 20 fd ff ff \tmov    %rax,-0x2e0(%rbp)\n 363:\t48 83 bd 20 fd ff ff \tcmpq   $0x0,-0x2e0(%rbp)\n 36a:\t00 \n 36b:\t0f 84 b4 02 00 00    \tje     625 <thread_map__new_by_uid+0x336>\n 371:\t48 8b 85 18 fd ff ff \tmov    -0x2e8(%rbp),%rax\n 378:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n 37e:\te9 4f 02 00 00       \tjmpq   5d2 <thread_map__new_by_uid+0x2e3>\n 383:\tc6 85 ef fc ff ff 00 \tmovb   $0x0,-0x311(%rbp)\n 38a:\t48 8d 85 10 fd ff ff \tlea    -0x2f0(%rbp),%rax\n 391:\t48 8d 95 c0 fd ff ff \tlea    -0x240(%rbp),%rdx\n 398:\t48 8d 4a 13          \tlea    0x13(%rdx),%rcx\n 39c:\tba 0a 00 00 00       \tmov    $0xa,%edx\n 3a1:\t48 89 c6             \tmov    %rax,%rsi\n 3a4:\t48 89 cf             \tmov    %rcx,%rdi\n 3a7:\te8 00 00 00 00       \tcallq  3ac <thread_map__new_by_uid+0xbd>\n 3ac:\t89 85 f8 fc ff ff    \tmov    %eax,-0x308(%rbp)\n 3b2:\t48 8b 85 10 fd ff ff \tmov    -0x2f0(%rbp),%rax\n 3b9:\t0f b6 00             \tmovzbl (%rax),%eax\n 3bc:\t84 c0                \ttest   %al,%al\n 3be:\t0f 85 07 02 00 00    \tjne    5cb <thread_map__new_by_uid+0x2dc>\n 3c4:\t48 8d 85 c0 fd ff ff \tlea    -0x240(%rbp),%rax\n 3cb:\t48 8d 50 13          \tlea    0x13(%rax),%rdx\n 3cf:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n 3d6:\t48 89 d1             \tmov    %rdx,%rcx\n 3d9:\tba 00 00 00 00       \tmov    $0x0,%edx\n 3de:\tbe 00 01 00 00       \tmov    $0x100,%esi\n 3e3:\t48 89 c7             \tmov    %rax,%rdi\n 3e6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3eb:\te8 00 00 00 00       \tcallq  3f0 <thread_map__new_by_uid+0x101>\n 3f0:\t48 8d 95 30 fd ff ff \tlea    -0x2d0(%rbp),%rdx\n 3f7:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n 3fe:\t48 89 d6             \tmov    %rdx,%rsi\n 401:\t48 89 c7             \tmov    %rax,%rdi\n 404:\te8 00 00 00 00       \tcallq  409 <thread_map__new_by_uid+0x11a>\n 409:\t85 c0                \ttest   %eax,%eax\n 40b:\t0f 85 bd 01 00 00    \tjne    5ce <thread_map__new_by_uid+0x2df>\n 411:\t8b 85 4c fd ff ff    \tmov    -0x2b4(%rbp),%eax\n 417:\t39 85 dc fc ff ff    \tcmp    %eax,-0x324(%rbp)\n 41d:\t0f 85 ae 01 00 00    \tjne    5d1 <thread_map__new_by_uid+0x2e2>\n 423:\t8b 95 f8 fc ff ff    \tmov    -0x308(%rbp),%edx\n 429:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n 430:\t89 d1                \tmov    %edx,%ecx\n 432:\tba 00 00 00 00       \tmov    $0x0,%edx\n 437:\tbe 00 01 00 00       \tmov    $0x100,%esi\n 43c:\t48 89 c7             \tmov    %rax,%rdi\n 43f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 444:\te8 00 00 00 00       \tcallq  449 <thread_map__new_by_uid+0x15a>\n 449:\t48 8d b5 08 fd ff ff \tlea    -0x2f8(%rbp),%rsi\n 450:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n 457:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 45c:\tba 00 00 00 00       \tmov    $0x0,%edx\n 461:\t48 89 c7             \tmov    %rax,%rdi\n 464:\te8 00 00 00 00       \tcallq  469 <thread_map__new_by_uid+0x17a>\n 469:\t89 85 fc fc ff ff    \tmov    %eax,-0x304(%rbp)\n 46f:\t83 bd fc fc ff ff 00 \tcmpl   $0x0,-0x304(%rbp)\n 476:\t0f 8e 15 02 00 00    \tjle    691 <thread_map__new_by_uid+0x3a2>\n 47c:\teb 0d                \tjmp    48b <thread_map__new_by_uid+0x19c>\n 47e:\td1 a5 f0 fc ff ff    \tshll   -0x310(%rbp)\n 484:\tc6 85 ef fc ff ff 01 \tmovb   $0x1,-0x311(%rbp)\n 48b:\t48 8b 85 18 fd ff ff \tmov    -0x2e8(%rbp),%rax\n 492:\t8b 10                \tmov    (%rax),%edx\n 494:\t8b 85 fc fc ff ff    \tmov    -0x304(%rbp),%eax\n 49a:\t01 d0                \tadd    %edx,%eax\n 49c:\t39 85 f0 fc ff ff    \tcmp    %eax,-0x310(%rbp)\n 4a2:\t7e da                \tjle    47e <thread_map__new_by_uid+0x18f>\n 4a4:\t80 bd ef fc ff ff 00 \tcmpb   $0x0,-0x311(%rbp)\n 4ab:\t74 49                \tje     4f6 <thread_map__new_by_uid+0x207>\n 4ad:\t8b 85 f0 fc ff ff    \tmov    -0x310(%rbp),%eax\n 4b3:\t48 98                \tcltq   \n 4b5:\t48 83 c0 01          \tadd    $0x1,%rax\n 4b9:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 4c0:\t00 \n 4c1:\t48 8b 85 18 fd ff ff \tmov    -0x2e8(%rbp),%rax\n 4c8:\t48 89 d6             \tmov    %rdx,%rsi\n 4cb:\t48 89 c7             \tmov    %rax,%rdi\n 4ce:\te8 00 00 00 00       \tcallq  4d3 <thread_map__new_by_uid+0x1e4>\n 4d3:\t48 89 85 28 fd ff ff \tmov    %rax,-0x2d8(%rbp)\n 4da:\t48 83 bd 28 fd ff ff \tcmpq   $0x0,-0x2d8(%rbp)\n 4e1:\t00 \n 4e2:\t0f 84 54 01 00 00    \tje     63c <thread_map__new_by_uid+0x34d>\n 4e8:\t48 8b 85 28 fd ff ff \tmov    -0x2d8(%rbp),%rax\n 4ef:\t48 89 85 18 fd ff ff \tmov    %rax,-0x2e8(%rbp)\n 4f6:\tc7 85 f4 fc ff ff 00 \tmovl   $0x0,-0x30c(%rbp)\n 4fd:\t00 00 00 \n 500:\teb 4d                \tjmp    54f <thread_map__new_by_uid+0x260>\n 502:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n 509:\t8b 95 f4 fc ff ff    \tmov    -0x30c(%rbp),%edx\n 50f:\t48 63 d2             \tmovslq %edx,%rdx\n 512:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 516:\t48 01 d0             \tadd    %rdx,%rax\n 519:\t48 8b 00             \tmov    (%rax),%rax\n 51c:\t48 83 c0 13          \tadd    $0x13,%rax\n 520:\t48 8b 95 18 fd ff ff \tmov    -0x2e8(%rbp),%rdx\n 527:\t8b 0a                \tmov    (%rdx),%ecx\n 529:\t8b 95 f4 fc ff ff    \tmov    -0x30c(%rbp),%edx\n 52f:\t8d 1c 11             \tlea    (%rcx,%rdx,1),%ebx\n 532:\t48 89 c7             \tmov    %rax,%rdi\n 535:\te8 00 00 00 00       \tcallq  53a <thread_map__new_by_uid+0x24b>\n 53a:\t48 8b 95 18 fd ff ff \tmov    -0x2e8(%rbp),%rdx\n 541:\t48 63 cb             \tmovslq %ebx,%rcx\n 544:\t89 44 8a 04          \tmov    %eax,0x4(%rdx,%rcx,4)\n 548:\t83 85 f4 fc ff ff 01 \taddl   $0x1,-0x30c(%rbp)\n 54f:\t8b 85 f4 fc ff ff    \tmov    -0x30c(%rbp),%eax\n 555:\t3b 85 fc fc ff ff    \tcmp    -0x304(%rbp),%eax\n 55b:\t7c a5                \tjl     502 <thread_map__new_by_uid+0x213>\n 55d:\tc7 85 f4 fc ff ff 00 \tmovl   $0x0,-0x30c(%rbp)\n 564:\t00 00 00 \n 567:\teb 29                \tjmp    592 <thread_map__new_by_uid+0x2a3>\n 569:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n 570:\t8b 95 f4 fc ff ff    \tmov    -0x30c(%rbp),%edx\n 576:\t48 63 d2             \tmovslq %edx,%rdx\n 579:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 57d:\t48 01 d0             \tadd    %rdx,%rax\n 580:\t48 8b 00             \tmov    (%rax),%rax\n 583:\t48 89 c7             \tmov    %rax,%rdi\n 586:\te8 00 00 00 00       \tcallq  58b <thread_map__new_by_uid+0x29c>\n 58b:\t83 85 f4 fc ff ff 01 \taddl   $0x1,-0x30c(%rbp)\n 592:\t8b 85 f4 fc ff ff    \tmov    -0x30c(%rbp),%eax\n 598:\t3b 85 fc fc ff ff    \tcmp    -0x304(%rbp),%eax\n 59e:\t7c c9                \tjl     569 <thread_map__new_by_uid+0x27a>\n 5a0:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n 5a7:\t48 89 c7             \tmov    %rax,%rdi\n 5aa:\te8 00 00 00 00       \tcallq  5af <thread_map__new_by_uid+0x2c0>\n 5af:\t48 8b 85 18 fd ff ff \tmov    -0x2e8(%rbp),%rax\n 5b6:\t8b 10                \tmov    (%rax),%edx\n 5b8:\t8b 85 fc fc ff ff    \tmov    -0x304(%rbp),%eax\n 5be:\t01 c2                \tadd    %eax,%edx\n 5c0:\t48 8b 85 18 fd ff ff \tmov    -0x2e8(%rbp),%rax\n 5c7:\t89 10                \tmov    %edx,(%rax)\n 5c9:\teb 07                \tjmp    5d2 <thread_map__new_by_uid+0x2e3>\n 5cb:\t90                   \tnop\n 5cc:\teb 04                \tjmp    5d2 <thread_map__new_by_uid+0x2e3>\n 5ce:\t90                   \tnop\n 5cf:\teb 01                \tjmp    5d2 <thread_map__new_by_uid+0x2e3>\n 5d1:\t90                   \tnop\n 5d2:\t48 8d 95 00 fd ff ff \tlea    -0x300(%rbp),%rdx\n 5d9:\t48 8d 8d c0 fd ff ff \tlea    -0x240(%rbp),%rcx\n 5e0:\t48 8b 85 20 fd ff ff \tmov    -0x2e0(%rbp),%rax\n 5e7:\t48 89 ce             \tmov    %rcx,%rsi\n 5ea:\t48 89 c7             \tmov    %rax,%rdi\n 5ed:\te8 00 00 00 00       \tcallq  5f2 <thread_map__new_by_uid+0x303>\n 5f2:\t85 c0                \ttest   %eax,%eax\n 5f4:\t75 10                \tjne    606 <thread_map__new_by_uid+0x317>\n 5f6:\t48 8b 85 00 fd ff ff \tmov    -0x300(%rbp),%rax\n 5fd:\t48 85 c0             \ttest   %rax,%rax\n 600:\t0f 85 7d fd ff ff    \tjne    383 <thread_map__new_by_uid+0x94>\n 606:\t90                   \tnop\n 607:\t48 8b 85 20 fd ff ff \tmov    -0x2e0(%rbp),%rax\n 60e:\t48 89 c7             \tmov    %rax,%rdi\n 611:\te8 00 00 00 00       \tcallq  616 <thread_map__new_by_uid+0x327>\n 616:\teb 01                \tjmp    619 <thread_map__new_by_uid+0x32a>\n 618:\t90                   \tnop\n 619:\t48 8b 85 18 fd ff ff \tmov    -0x2e8(%rbp),%rax\n 620:\te9 8c 00 00 00       \tjmpq   6b1 <thread_map__new_by_uid+0x3c2>\n 625:\t90                   \tnop\n 626:\t48 8b 85 18 fd ff ff \tmov    -0x2e8(%rbp),%rax\n 62d:\t48 89 c7             \tmov    %rax,%rdi\n 630:\te8 00 00 00 00       \tcallq  635 <thread_map__new_by_uid+0x346>\n 635:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 63a:\teb 75                \tjmp    6b1 <thread_map__new_by_uid+0x3c2>\n 63c:\t90                   \tnop\n 63d:\tc7 85 f4 fc ff ff 00 \tmovl   $0x0,-0x30c(%rbp)\n 644:\t00 00 00 \n 647:\teb 29                \tjmp    672 <thread_map__new_by_uid+0x383>\n 649:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n 650:\t8b 95 f4 fc ff ff    \tmov    -0x30c(%rbp),%edx\n 656:\t48 63 d2             \tmovslq %edx,%rdx\n 659:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 65d:\t48 01 d0             \tadd    %rdx,%rax\n 660:\t48 8b 00             \tmov    (%rax),%rax\n 663:\t48 89 c7             \tmov    %rax,%rdi\n 666:\te8 00 00 00 00       \tcallq  66b <thread_map__new_by_uid+0x37c>\n 66b:\t83 85 f4 fc ff ff 01 \taddl   $0x1,-0x30c(%rbp)\n 672:\t8b 85 f4 fc ff ff    \tmov    -0x30c(%rbp),%eax\n 678:\t3b 85 fc fc ff ff    \tcmp    -0x304(%rbp),%eax\n 67e:\t7c c9                \tjl     649 <thread_map__new_by_uid+0x35a>\n 680:\t48 8b 85 08 fd ff ff \tmov    -0x2f8(%rbp),%rax\n 687:\t48 89 c7             \tmov    %rax,%rdi\n 68a:\te8 00 00 00 00       \tcallq  68f <thread_map__new_by_uid+0x3a0>\n 68f:\teb 01                \tjmp    692 <thread_map__new_by_uid+0x3a3>\n 691:\t90                   \tnop\n 692:\t48 8b 85 18 fd ff ff \tmov    -0x2e8(%rbp),%rax\n 699:\t48 89 c7             \tmov    %rax,%rdi\n 69c:\te8 00 00 00 00       \tcallq  6a1 <thread_map__new_by_uid+0x3b2>\n 6a1:\t48 c7 85 18 fd ff ff \tmovq   $0x0,-0x2e8(%rbp)\n 6a8:\t00 00 00 00 \n 6ac:\te9 56 ff ff ff       \tjmpq   607 <thread_map__new_by_uid+0x318>\n 6b1:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n 6b5:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n 6bc:\t00 00 \n 6be:\t74 05                \tje     6c5 <thread_map__new_by_uid+0x3d6>\n 6c0:\te8 00 00 00 00       \tcallq  6c5 <thread_map__new_by_uid+0x3d6>\n 6c5:\t48 81 c4 28 03 00 00 \tadd    $0x328,%rsp\n 6cc:\t5b                   \tpop    %rbx\n 6cd:\t5d                   \tpop    %rbp\n 6ce:\tc3                   \tretq   ", "code_s": "void *__fastcall thread_map__new_by_uid(int a1) {\n  int v1;\n  int v2;\n  char v4;\n  int v5;\n  int j;\n  int k;\n  int i;\n  unsigned int v9;\n  int v10;\n  struct dirent64 *result;\n  struct dirent64 **namelist;\n  char *endptr;\n  void *ptr;\n  DIR *dirp;\n  void *v16;\n  struct stat64 <span class=\"supfact\">v17</span>;\n  struct dirent64 <span class=\"supfact\">entry</span>;\n  char s[Number];\n  unsigned __int64 v20;\n  v20 = __readfsqword(Number);\n  v5 = Number;\n  namelist = Number L;\n  ptr = malloc(Number);\n  if (!ptr)\n    return ptr;\n  dirp = opendir(String);\n  if (dirp) {\n    *(_DWORD *)ptr = Number;\n    while (!readdir64_r(dirp, &<span class=\"supfact\">entry</span>, &result) && result) {\n      v4 = Number;\n      v9 = strtol(<span class=\"supfact\">entry</span>.d_name, &endptr, Number);\n      if (!*endptr) {\n        snprintf(s, Number, String, <span class=\"supfact\">entry</span>.d_name);\n        if (!stat64(s, &<span class=\"supfact\">v17</span>) &&\n            a1 == <span class=\"supfact\">v17</span>.st_uid) {\n          snprintf(s, Number, String, v9);\n          v10 = scandir64(s, &namelist,\n                          (int (*)(const struct dirent64 *))filter, Number L);\n          if (v10 <= Number)\n            goto LABEL_30;\n          while (v5 <= *(_DWORD *)ptr + v10) {\n            v5 *= Number;\n            v4 = Number;\n          }\n          if (v4) {\n            v16 = realloc(ptr, Number * (v5 + Number L));\n            if (!v16) {\n              for (i = Number; i < v10; ++i)\n                free(namelist[i]);\n              free(namelist);\n            LABEL_30:\n              free(ptr);\n              ptr = Number L;\n              break;\n            }\n            ptr = v16;\n          }\n          for (j = Number; j < v10; ++j) {\n            v1 = *(_DWORD *)ptr + j;\n            v2 = atoi(namelist[j]->d_name);\n            *((_DWORD *)ptr + v1 + Number) = v2;\n          }\n          for (k = Number; k < v10; ++k)\n            free(namelist[k]);\n          free(namelist);\n          *(_DWORD *)ptr += v10;\n        }\n      }\n    }\n    closedir(dirp);\n    return ptr;\n  }\n  free(ptr);\n  return Number L;\n}", "code_t": "thread_map *__cdecl thread_map__new_by_uid(uid_t uid) {\n  int v1;\n  int v2;\n  bool grow;\n  int max_threads;\n  int i;\n  int ia;\n  int ib;\n  unsigned int pid;\n  int items;\n  <span class=\"supfact\">dirent</span> *next;\n  <span class=\"supfact\">dirent</span> **namelist;\n  char *end;\n  thread_map *threads;\n  DIR *proc;\n  thread_map *tmp;\n  stat <span class=\"supfact\">st</span>;\n  <span class=\"supfact\">dirent</span> <span class=\"supfact\">dirent</span>;\n  char path[Number];\n  unsigned __int64 v20;\n  v20 = __readfsqword(Number);\n  max_threads = Number;\n  namelist = Number L;\n  threads = (thread_map *)malloc(Number);\n  if (!threads)\n    return threads;\n  proc = opendir(String);\n  if (proc) {\n    threads->nr = Number;\n    while (!readdir64_r(proc, (struct dirent64 *)&<span class=\"supfact\">dirent</span>,\n                        (struct dirent64 **)&next) &&\n           next) {\n      grow = Number;\n      pid = strtol(<span class=\"supfact\">dirent</span>.d_name, &end, Number);\n      if (!*end) {\n        snprintf(path, Number, String, <span class=\"supfact\">dirent</span>.d_name);\n        if (!stat64(path, (struct stat64 *)&<span class=\"supfact\">st</span>) &&\n            uid == <span class=\"supfact\">st</span>.st_uid) {\n          snprintf(path, Number, String, pid);\n          items = scandir64(path, (struct dirent64 ***)&namelist,\n                            (int (*)(const struct dirent64 *))filter, Number L);\n          if (items <= Number)\n            goto out_free_closedir;\n          while (max_threads <= threads->nr + items) {\n            max_threads *= Number;\n            grow = Number;\n          }\n          if (grow) {\n            tmp = (thread_map *)realloc(threads,\n                                        Number * (max_threads + Number L));\n            if (!tmp) {\n              for (ib = Number; ib < items; ++ib)\n                free(namelist[ib]);\n              free(namelist);\n            out_free_closedir:\n              free(threads);\n              threads = Number L;\n              break;\n            }\n            threads = tmp;\n          }\n          for (i = Number; i < items; ++i) {\n            v1 = threads->nr + i;\n            v2 = atoi(namelist[i]->d_name);\n            threads[v1 + Number].nr = v2;\n          }\n          for (ia = Number; ia < items; ++ia)\n            free(namelist[ia]);\n          free(namelist);\n          threads->nr += items;\n        }\n      }\n    }\n    closedir(proc);\n    return threads;\n  }\n  free(threads);\n  return Number L;\n}", "var": [{"name": "entry", "type": "struct dirent { __ino64_t d_ino; __off64_t d_off; unsigned __int16 d_reclen; unsigned __int8 d_type; char[256] d_name; PADDING (5); }", "ref_name": "dirent", "ref_type": "struct dirent { __ino64_t d_ino; __off64_t d_off; unsigned __int16 d_reclen; unsigned __int8 d_type; char[256] d_name; PADDING (5); }"}, {"name": "v17", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "bdh1011", "repo_name": "realmapia_server", "path": "bdh1011/realmapia_server/0c00aee89daec2c8bc89cc559df2e5079d4040206a3b7bdf4991f7338dcbf135", "path_in_repo": "bdh1011/realmapia_server/redis/redis-3.0.4/deps/lua/src/luac", "objdump": "000000000040ddbc <primaryexp>:\n  40ddbc:\t55                   \tpush   %rbp\n  40ddbd:\t48 89 e5             \tmov    %rsp,%rbp\n  40ddc0:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40ddc4:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  40ddc8:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  40ddcc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40ddd0:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40ddd4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40ddd8:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  40dddc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40dde0:\t48 89 d6             \tmov    %rdx,%rsi\n  40dde3:\t48 89 c7             \tmov    %rax,%rdi\n  40dde6:\te8 26 ff ff ff       \tcallq  40dd11 <prefixexp>\n  40ddeb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40ddef:\t8b 40 10             \tmov    0x10(%rax),%eax\n  40ddf2:\t3d 1e 01 00 00       \tcmp    $0x11e,%eax\n  40ddf7:\t0f 84 ed 00 00 00    \tje     40deea <primaryexp+0x12e>\n  40ddfd:\t3d 1e 01 00 00       \tcmp    $0x11e,%eax\n  40de02:\t0f 8f 0e 01 00 00    \tjg     40df16 <primaryexp+0x15a>\n  40de08:\t83 f8 7b             \tcmp    $0x7b,%eax\n  40de0b:\t0f 84 d9 00 00 00    \tje     40deea <primaryexp+0x12e>\n  40de11:\t83 f8 7b             \tcmp    $0x7b,%eax\n  40de14:\t0f 8f fc 00 00 00    \tjg     40df16 <primaryexp+0x15a>\n  40de1a:\t83 f8 5b             \tcmp    $0x5b,%eax\n  40de1d:\t74 41                \tje     40de60 <primaryexp+0xa4>\n  40de1f:\t83 f8 5b             \tcmp    $0x5b,%eax\n  40de22:\t0f 8f ee 00 00 00    \tjg     40df16 <primaryexp+0x15a>\n  40de28:\t83 f8 3a             \tcmp    $0x3a,%eax\n  40de2b:\t74 72                \tje     40de9f <primaryexp+0xe3>\n  40de2d:\t83 f8 3a             \tcmp    $0x3a,%eax\n  40de30:\t0f 8f e0 00 00 00    \tjg     40df16 <primaryexp+0x15a>\n  40de36:\t83 f8 28             \tcmp    $0x28,%eax\n  40de39:\t0f 84 ab 00 00 00    \tje     40deea <primaryexp+0x12e>\n  40de3f:\t83 f8 2e             \tcmp    $0x2e,%eax\n  40de42:\t0f 85 ce 00 00 00    \tjne    40df16 <primaryexp+0x15a>\n  40de48:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  40de4c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40de50:\t48 89 d6             \tmov    %rdx,%rsi\n  40de53:\t48 89 c7             \tmov    %rax,%rdi\n  40de56:\te8 d1 f3 ff ff       \tcallq  40d22c <field>\n  40de5b:\te9 b1 00 00 00       \tjmpq   40df11 <primaryexp+0x155>\n  40de60:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  40de64:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40de68:\t48 89 d6             \tmov    %rdx,%rsi\n  40de6b:\t48 89 c7             \tmov    %rax,%rdi\n  40de6e:\te8 85 af 00 00       \tcallq  418df8 <luaK_exp2anyreg>\n  40de73:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  40de77:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40de7b:\t48 89 d6             \tmov    %rdx,%rsi\n  40de7e:\t48 89 c7             \tmov    %rax,%rdi\n  40de81:\te8 0e f4 ff ff       \tcallq  40d294 <yindex>\n  40de86:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  40de8a:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n  40de8e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40de92:\t48 89 ce             \tmov    %rcx,%rsi\n  40de95:\t48 89 c7             \tmov    %rax,%rdi\n  40de98:\te8 0c b7 00 00       \tcallq  4195a9 <luaK_indexed>\n  40de9d:\teb 72                \tjmp    40df11 <primaryexp+0x155>\n  40de9f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40dea3:\t48 89 c7             \tmov    %rax,%rdi\n  40dea6:\te8 fa dc 00 00       \tcallq  41bba5 <luaX_next>\n  40deab:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  40deaf:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40deb3:\t48 89 d6             \tmov    %rdx,%rsi\n  40deb6:\t48 89 c7             \tmov    %rax,%rdi\n  40deb9:\te8 39 e3 ff ff       \tcallq  40c1f7 <checkname>\n  40debe:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  40dec2:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n  40dec6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40deca:\t48 89 ce             \tmov    %rcx,%rsi\n  40decd:\t48 89 c7             \tmov    %rax,%rdi\n  40ded0:\te8 62 b2 00 00       \tcallq  419137 <luaK_self>\n  40ded5:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  40ded9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40dedd:\t48 89 d6             \tmov    %rdx,%rsi\n  40dee0:\t48 89 c7             \tmov    %rax,%rdi\n  40dee3:\te8 57 fc ff ff       \tcallq  40db3f <funcargs>\n  40dee8:\teb 27                \tjmp    40df11 <primaryexp+0x155>\n  40deea:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  40deee:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40def2:\t48 89 d6             \tmov    %rdx,%rsi\n  40def5:\t48 89 c7             \tmov    %rax,%rdi\n  40def8:\te8 94 ae 00 00       \tcallq  418d91 <luaK_exp2nextreg>\n  40defd:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  40df01:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40df05:\t48 89 d6             \tmov    %rdx,%rsi\n  40df08:\t48 89 c7             \tmov    %rax,%rdi\n  40df0b:\te8 2f fc ff ff       \tcallq  40db3f <funcargs>\n  40df10:\t90                   \tnop\n  40df11:\te9 d5 fe ff ff       \tjmpq   40ddeb <primaryexp+0x2f>\n  40df16:\t90                   \tnop\n  40df17:\tc9                   \tleaveq \n  40df18:\tc3                   \tretq   ", "code_s": "__int64 __fastcall primaryexp(__int64 a1, _DWORD *a2) {\n  __int64 result;\n  _DWORD <span class=\"supfact\">v3</span>[Number];\n  char <span class=\"supfact\">v4</span>[Number];\n  __int64 v5;\n  v5 = *(_QWORD *)(a1 + Number);\n  prefixexp(a1, a2);\n  while (Number) {\n    while (Number) {\n      while (Number) {\n        while (Number) {\n          result = *(unsigned int *)(a1 + Number);\n          if ((_DWORD)result == Number)\n            goto LABEL_15;\n          if ((int)result > Number)\n            return result;\n          if ((_DWORD)result == Number)\n            goto LABEL_15;\n          if ((int)result > Number)\n            return result;\n          if ((_DWORD)result != Number)\n            break;\n          luaK_exp2anyreg(v5, a2);\n          yindex(a1, (__int64)<span class=\"supfact\">v4</span>);\n          luaK_indexed(v5, a2, <span class=\"supfact\">v4</span>);\n        }\n        if ((int)result > Number)\n          return result;\n        if ((_DWORD)result != Number)\n          break;\n        luaX_next(a1);\n        checkname(a1, <span class=\"supfact\">v3</span>);\n        luaK_self(v5, a2, <span class=\"supfact\">v3</span>);\n        funcargs(a1, a2);\n      }\n      if ((int)result > Number)\n        return result;\n      if ((_DWORD)result != Number)\n        break;\n    LABEL_15:\n      luaK_exp2nextreg(v5, a2);\n      funcargs(a1, a2);\n    }\n    if ((_DWORD)result != Number)\n      return result;\n    field(a1, (__int64)a2);\n  }\n}", "code_t": "void __cdecl primaryexp(LexState_0 *ls, expdesc_0 *v) {\n  int v2;\n  expdesc_0 <span class=\"supfact\">key_0</span>;\n  expdesc_0 <span class=\"supfact\">key</span>;\n  FuncState_0 *fs_0;\n  fs_0 = ls->fs;\n  prefixexp(ls, v);\n  while (Number) {\n    while (Number) {\n      while (Number) {\n        while (Number) {\n          v2 = ls->t.token;\n          if (v2 == Number)\n            goto LABEL_15;\n          if (v2 > Number)\n            return;\n          if (v2 == Number)\n            goto LABEL_15;\n          if (v2 > Number)\n            return;\n          if (v2 != Number)\n            break;\n          luaK_exp2anyreg(fs_0, v);\n          yindex(ls, &<span class=\"supfact\">key</span>);\n          luaK_indexed(fs_0, v, &<span class=\"supfact\">key</span>);\n        }\n        if (v2 > Number)\n          return;\n        if (v2 != Number)\n          break;\n        luaX_next(ls);\n        checkname(ls, &<span class=\"supfact\">key_0</span>);\n        luaK_self(fs_0, v, &<span class=\"supfact\">key_0</span>);\n        funcargs(ls, v);\n      }\n      if (v2 > Number)\n        return;\n      if (v2 != Number)\n        break;\n    LABEL_15:\n      luaK_exp2nextreg(fs_0, v);\n      funcargs(ls, v);\n    }\n    if (v2 != Number)\n      break;\n    field(ls, v);\n  }\n}", "var": [{"name": "v4", "type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }", "ref_name": "key", "ref_type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }"}, {"name": "v3", "type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }", "ref_name": "key_0", "ref_type": "struct expdesc_0 { expkind k; PADDING (4); $2B514767E83602D8DB8699ADDE05F0D3 u; int t; int f; }"}], "body_in_train": true}]