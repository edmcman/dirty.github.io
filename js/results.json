[{"repo_owner": "nstroustrup", "repo_name": "lifespan", "path": "nstroustrup/lifespan/1c3873706149d910697467570f768025da8feb90cbcdee9b0550ab198a8aa9f1", "path_in_repo": "nstroustrup/lifespan/external_compile_libraries/fltk/test/browser", "objdump": "0000000000408994 <_ZN10Fl_Browser12linepositionEiNS_16Fl_Line_PositionE>:\n  408994:\t41 56                \tpush   %r14\n  408996:\t41 55                \tpush   %r13\n  408998:\t41 89 d5             \tmov    %edx,%r13d\n  40899b:\t41 54                \tpush   %r12\n  40899d:\t55                   \tpush   %rbp\n  40899e:\t48 89 fd             \tmov    %rdi,%rbp\n  4089a1:\t53                   \tpush   %rbx\n  4089a2:\tbb 01 00 00 00       \tmov    $0x1,%ebx\n  4089a7:\t48 83 ec 10          \tsub    $0x10,%rsp\n  4089ab:\t85 f6                \ttest   %esi,%esi\n  4089ad:\t4c 8b b7 68 02 00 00 \tmov    0x268(%rdi),%r14\n  4089b4:\t0f 4e f3             \tcmovle %ebx,%esi\n  4089b7:\t39 b7 84 02 00 00    \tcmp    %esi,0x284(%rdi)\n  4089bd:\t89 f3                \tmov    %esi,%ebx\n  4089bf:\t0f 4e 9f 84 02 00 00 \tcmovle 0x284(%rdi),%ebx\n  4089c6:\t45 31 e4             \txor    %r12d,%r12d\n  4089c9:\t4d 85 f6             \ttest   %r14,%r14\n  4089cc:\t74 38                \tje     408a06 <_ZN10Fl_Browser12linepositionEiNS_16Fl_Line_PositionE+0x72>\n  4089ce:\t83 fb 01             \tcmp    $0x1,%ebx\n  4089d1:\t7e 18                \tjle    4089eb <_ZN10Fl_Browser12linepositionEiNS_16Fl_Line_PositionE+0x57>\n  4089d3:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n  4089d7:\t4c 89 f6             \tmov    %r14,%rsi\n  4089da:\t48 89 ef             \tmov    %rbp,%rdi\n  4089dd:\tff cb                \tdec    %ebx\n  4089df:\tff 50 70             \tcallq  *0x70(%rax)\n  4089e2:\t4d 8b 76 08          \tmov    0x8(%r14),%r14\n  4089e6:\t41 01 c4             \tadd    %eax,%r12d\n  4089e9:\teb de                \tjmp    4089c9 <_ZN10Fl_Browser12linepositionEiNS_16Fl_Line_PositionE+0x35>\n  4089eb:\t4d 85 f6             \ttest   %r14,%r14\n  4089ee:\t74 16                \tje     408a06 <_ZN10Fl_Browser12linepositionEiNS_16Fl_Line_PositionE+0x72>\n  4089f0:\t41 83 fd 01          \tcmp    $0x1,%r13d\n  4089f4:\t75 10                \tjne    408a06 <_ZN10Fl_Browser12linepositionEiNS_16Fl_Line_PositionE+0x72>\n  4089f6:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n  4089fa:\t4c 89 f6             \tmov    %r14,%rsi\n  4089fd:\t48 89 ef             \tmov    %rbp,%rdi\n  408a00:\tff 50 70             \tcallq  *0x70(%rax)\n  408a03:\t41 01 c4             \tadd    %eax,%r12d\n  408a06:\t4c 8d 44 24 0c       \tlea    0xc(%rsp),%r8\n  408a0b:\t48 8d 4c 24 08       \tlea    0x8(%rsp),%rcx\n  408a10:\t48 89 e6             \tmov    %rsp,%rsi\n  408a13:\t48 89 ef             \tmov    %rbp,%rdi\n  408a16:\t48 8d 54 24 04       \tlea    0x4(%rsp),%rdx\n  408a1b:\te8 ce 06 00 00       \tcallq  4090ee <_ZNK11Fl_Browser_4bboxERiS0_S0_S0_>\n  408a20:\t41 83 fd 01          \tcmp    $0x1,%r13d\n  408a24:\t74 13                \tje     408a39 <_ZN10Fl_Browser12linepositionEiNS_16Fl_Line_PositionE+0xa5>\n  408a26:\t41 83 fd 02          \tcmp    $0x2,%r13d\n  408a2a:\t75 12                \tjne    408a3e <_ZN10Fl_Browser12linepositionEiNS_16Fl_Line_PositionE+0xaa>\n  408a2c:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n  408a30:\t99                   \tcltd   \n  408a31:\t41 f7 fd             \tidiv   %r13d\n  408a34:\t41 29 c4             \tsub    %eax,%r12d\n  408a37:\teb 05                \tjmp    408a3e <_ZN10Fl_Browser12linepositionEiNS_16Fl_Line_PositionE+0xaa>\n  408a39:\t44 2b 64 24 0c       \tsub    0xc(%rsp),%r12d\n  408a3e:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n  408a42:\t48 89 ef             \tmov    %rbp,%rdi\n  408a45:\tff 90 b0 00 00 00    \tcallq  *0xb0(%rax)\n  408a4b:\t2b 44 24 0c          \tsub    0xc(%rsp),%eax\n  408a4f:\t44 39 e0             \tcmp    %r12d,%eax\n  408a52:\t7d 14                \tjge    408a68 <_ZN10Fl_Browser12linepositionEiNS_16Fl_Line_PositionE+0xd4>\n  408a54:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n  408a58:\t48 89 ef             \tmov    %rbp,%rdi\n  408a5b:\tff 90 b0 00 00 00    \tcallq  *0xb0(%rax)\n  408a61:\t2b 44 24 0c          \tsub    0xc(%rsp),%eax\n  408a65:\t41 89 c4             \tmov    %eax,%r12d\n  408a68:\t44 89 e6             \tmov    %r12d,%esi\n  408a6b:\t48 89 ef             \tmov    %rbp,%rdi\n  408a6e:\te8 75 10 00 00       \tcallq  409ae8 <_ZN11Fl_Browser_8positionEi>\n  408a73:\t48 83 c4 10          \tadd    $0x10,%rsp\n  408a77:\t5b                   \tpop    %rbx\n  408a78:\t5d                   \tpop    %rbp\n  408a79:\t41 5c                \tpop    %r12\n  408a7b:\t41 5d                \tpop    %r13\n  408a7d:\t41 5e                \tpop    %r14\n  408a7f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Fl_Browser lineposition(Fl_Browser_ *this, int a2, int a3) {\n  __int64 v4;\n  int v5;\n  int v6;\n  int v7;\n  __int64 v8;\n  int v9;\n  int v10;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>[Number];\n  v4 = *((_QWORD *)this + Number);\n  if (a2 <= Number)\n    a2 = Number;\n  v5 = a2;\n  if (*((_DWORD *)this + Number) <= a2)\n    v5 = *((_DWORD *)this + Number);\n  v6 = Number;\n  while (v4) {\n    if (v5 <= Number) {\n      if (a3 == Number)\n        v6 += (*(__int64(__fastcall **)(Fl_Browser_ *, __int64))(\n            *(_QWORD *)this + Number L))(this, v4);\n      break;\n    }\n    --v5;\n    v7 = (*(__int64(__fastcall **)(Fl_Browser_ *, __int64))(\n        *(_QWORD *)this + Number L))(this, v4);\n    v4 = *(_QWORD *)(v4 + Number);\n    v6 += v7;\n  }\n  Fl_Browser_ bbox(this, &<span class=\"supfact\">v12</span>, &<span class=\"supfact\">v13</span>,\n                   &<span class=\"supfact\">v14</span>, <span class=\"supfact\">v15</span>);\n  if (a3 == Number) {\n    v6 -= <span class=\"supfact\">v15</span>[Number];\n  } else if (a3 == Number) {\n    v8 = (unsigned int)(<span class=\"supfact\">v15</span>[Number] >> Number);\n    LODWORD(v8) = <span class=\"supfact\">v15</span>[Number] % Number;\n    v6 -= <span class=\"supfact\">v15</span>[Number] / Number;\n  }\n  v9 = (*(__int64(__fastcall **)(Fl_Browser_ *, int *, __int64))(\n      *(_QWORD *)this + Number L))(this, &<span class=\"supfact\">v12</span>, v8);\n  if (v9 - <span class=\"supfact\">v15</span>[Number] < v6) {\n    v10 = (*(__int64(__fastcall **)(Fl_Browser_ *))(*(_QWORD *)this +\n                                                    Number L))(this);\n    v6 = v10 - <span class=\"supfact\">v15</span>[Number];\n  }\n  return Fl_Browser_ position(this, v6);\n}", "code_t": "__int64 __fastcall Fl_Browser lineposition(Fl_Browser_ *this, int a2, int a3) {\n  __int64 v4;\n  int v5;\n  int v6;\n  int v7;\n  __int64 v8;\n  int v9;\n  int v10;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>[Number];\n  v4 = *((_QWORD *)this + Number);\n  if (a2 <= Number)\n    a2 = Number;\n  v5 = a2;\n  if (*((_DWORD *)this + Number) <= a2)\n    v5 = *((_DWORD *)this + Number);\n  v6 = Number;\n  while (v4) {\n    if (v5 <= Number) {\n      if (a3 == Number)\n        v6 += (*(__int64(__fastcall **)(Fl_Browser_ *, __int64))(\n            *(_QWORD *)this + Number L))(this, v4);\n      break;\n    }\n    --v5;\n    v7 = (*(__int64(__fastcall **)(Fl_Browser_ *, __int64))(\n        *(_QWORD *)this + Number L))(this, v4);\n    v4 = *(_QWORD *)(v4 + Number);\n    v6 += v7;\n  }\n  Fl_Browser_ bbox(this, &<span class=\"supfact\">v12</span>, &<span class=\"supfact\">v13</span>,\n                   &<span class=\"supfact\">v14</span>, <span class=\"supfact\">v15</span>);\n  if (a3 == Number) {\n    v6 -= <span class=\"supfact\">v15</span>[Number];\n  } else if (a3 == Number) {\n    v8 = (unsigned int)(<span class=\"supfact\">v15</span>[Number] >> Number);\n    LODWORD(v8) = <span class=\"supfact\">v15</span>[Number] % Number;\n    v6 -= <span class=\"supfact\">v15</span>[Number] / Number;\n  }\n  v9 = (*(__int64(__fastcall **)(Fl_Browser_ *, int *, __int64))(\n      *(_QWORD *)this + Number L))(this, &<span class=\"supfact\">v12</span>, v8);\n  if (v9 - <span class=\"supfact\">v15</span>[Number] < v6) {\n    v10 = (*(__int64(__fastcall **)(Fl_Browser_ *))(*(_QWORD *)this +\n                                                    Number L))(this);\n    v6 = v10 - <span class=\"supfact\">v15</span>[Number];\n  }\n  return Fl_Browser_ position(this, v6);\n}", "var": [{"name": "v15", "type": "int[11]", "ref_name": "v15", "ref_type": "int[11]"}, {"name": "v14", "type": "int", "ref_name": "v14", "ref_type": "int"}, {"name": "v13", "type": "int", "ref_name": "v13", "ref_type": "int"}, {"name": "v12", "type": "int", "ref_name": "v12", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "jordansissel", "repo_name": "tmux", "path": "jordansissel/tmux/8c54c58ec5c6c45af38e829f1a79d944af77d1a77275700b93d321f9e256a16e", "path_in_repo": "jordansissel/tmux/tags/TMUX_1_0/tmux", "objdump": "0000000000418387 <input_add_argument>:\n  418387:\t55                   \tpush   %rbp\n  418388:\t48 89 e5             \tmov    %rsp,%rbp\n  41838b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  41838f:\t89 f0                \tmov    %esi,%eax\n  418391:\t88 45 e4             \tmov    %al,-0x1c(%rbp)\n  418394:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  418398:\t8b 80 90 00 00 00    \tmov    0x90(%rax),%eax\n  41839e:\t85 c0                \ttest   %eax,%eax\n  4183a0:\t75 07                \tjne    4183a9 <input_add_argument+0x22>\n  4183a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4183a7:\teb 68                \tjmp    418411 <input_add_argument+0x8a>\n  4183a9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4183ad:\t48 8b 90 88 00 00 00 \tmov    0x88(%rax),%rdx\n  4183b4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4183b8:\t8b 80 90 00 00 00    \tmov    0x90(%rax),%eax\n  4183be:\t83 e8 01             \tsub    $0x1,%eax\n  4183c1:\t89 c1                \tmov    %eax,%ecx\n  4183c3:\t48 89 c8             \tmov    %rcx,%rax\n  4183c6:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4183ca:\t48 01 c8             \tadd    %rcx,%rax\n  4183cd:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4183d1:\t48 01 d0             \tadd    %rdx,%rax\n  4183d4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4183d8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4183dc:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  4183e0:\t48 83 f8 3f          \tcmp    $0x3f,%rax\n  4183e4:\t76 07                \tjbe    4183ed <input_add_argument+0x66>\n  4183e6:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4183eb:\teb 24                \tjmp    418411 <input_add_argument+0x8a>\n  4183ed:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4183f1:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  4183f5:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n  4183f9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  4183fd:\t48 89 4a 40          \tmov    %rcx,0x40(%rdx)\n  418401:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  418405:\t0f b6 4d e4          \tmovzbl -0x1c(%rbp),%ecx\n  418409:\t88 0c 02             \tmov    %cl,(%rdx,%rax,1)\n  41840c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  418411:\t5d                   \tpop    %rbp\n  418412:\tc3                   \tretq   ", "code_s": "__int64 __fastcall input_add_argument(__int64 a1, char a2) {\n  __int64 v3;\n  __int64 <span class=\"supfact\">v4</span>;\n  if (!*(_DWORD *)(a1 + Number))\n    return Number L;\n  <span class=\"supfact\">v4</span> =\n      *(_QWORD *)(a1 + Number) +\n      Number L * (unsigned int)(*(_DWORD *)(a1 + Number) - Number);\n  if (*(_QWORD *)(<span class=\"supfact\">v4</span> + Number) > Number)\n    return Number;\n  v3 = *(_QWORD *)(<span class=\"supfact\">v4</span> + Number);\n  *(_QWORD *)(<span class=\"supfact\">v4</span> + Number) = v3 + Number;\n  *(_BYTE *)(<span class=\"supfact\">v4</span> + v3) = a2;\n  return Number L;\n}", "code_t": "int __cdecl input_add_argument(input_ctx *ictx, u_char ch_0) {\n  size_t v3;\n  input_arg *<span class=\"supfact\">arg</span>;\n  if (!ictx->args.num)\n    return Number;\n  <span class=\"supfact\">arg</span> = &ictx->args.list[ictx->args.num - Number];\n  if (<span class=\"supfact\">arg</span>->used > Number)\n    return Number;\n  v3 = <span class=\"supfact\">arg</span>->used;\n  <span class=\"supfact\">arg</span>->used = v3 + Number;\n  <span class=\"supfact\">arg</span>->data[v3] = ch_0;\n  return Number;\n}", "var": [{"name": "v4", "type": "input_arg *", "ref_name": "arg", "ref_type": "input_arg *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/c3bfa9c69071010ab81afcb31397b27372f7645183a6bb89971882813eeb0d21", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Applications/SIBsim4/Output/sim4b1.o", "objdump": "0000000000002d8f <msp_compare>:\n    2d8f:\t55                   \tpush   %rbp\n    2d90:\t48 89 e5             \tmov    %rsp,%rbp\n    2d93:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    2d97:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    2d9b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2d9f:\t48 8b 00             \tmov    (%rax),%rax\n    2da2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2da6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2daa:\t48 8b 00             \tmov    (%rax),%rax\n    2dad:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2db1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2db5:\t8b 10                \tmov    (%rax),%edx\n    2db7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2dbb:\t8b 00                \tmov    (%rax),%eax\n    2dbd:\t39 c2                \tcmp    %eax,%edx\n    2dbf:\t76 07                \tjbe    2dc8 <msp_compare+0x39>\n    2dc1:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    2dc6:\teb 4e                \tjmp    2e16 <msp_compare+0x87>\n    2dc8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2dcc:\t8b 10                \tmov    (%rax),%edx\n    2dce:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2dd2:\t8b 00                \tmov    (%rax),%eax\n    2dd4:\t39 c2                \tcmp    %eax,%edx\n    2dd6:\t73 07                \tjae    2ddf <msp_compare+0x50>\n    2dd8:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    2ddd:\teb 37                \tjmp    2e16 <msp_compare+0x87>\n    2ddf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2de3:\t8b 50 04             \tmov    0x4(%rax),%edx\n    2de6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2dea:\t8b 40 04             \tmov    0x4(%rax),%eax\n    2ded:\t39 c2                \tcmp    %eax,%edx\n    2def:\t76 07                \tjbe    2df8 <msp_compare+0x69>\n    2df1:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    2df6:\teb 1e                \tjmp    2e16 <msp_compare+0x87>\n    2df8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2dfc:\t8b 50 04             \tmov    0x4(%rax),%edx\n    2dff:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2e03:\t8b 40 04             \tmov    0x4(%rax),%eax\n    2e06:\t39 c2                \tcmp    %eax,%edx\n    2e08:\t73 07                \tjae    2e11 <msp_compare+0x82>\n    2e0a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    2e0f:\teb 05                \tjmp    2e16 <msp_compare+0x87>\n    2e11:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2e16:\t5d                   \tpop    %rbp\n    2e17:\tc3                   \tretq   ", "code_s": "__int64 __fastcall msp_compare(const void *a1, const void *a2) {\n  _DWORD *<span class=\"supfact\">v3</span>;\n  _DWORD *<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = *(_DWORD **)a1;\n  <span class=\"supfact\">v3</span> = *(_DWORD **)a2;\n  if (**(_DWORD **)a1 > **(_DWORD **)a2)\n    return Number L;\n  if (*<span class=\"supfact\">v4</span> < *<span class=\"supfact\">v3</span>)\n    return Number;\n  if (<span class=\"supfact\">v4</span>[Number] > <span class=\"supfact\">v3</span>[Number])\n    return Number L;\n  if (<span class=\"supfact\">v4</span>[Number] >= <span class=\"supfact\">v3</span>[Number])\n    return Number L;\n  return Number;\n}", "code_t": "int __cdecl msp_compare(const void *a, const void *b) {\n  exon_p_t <span class=\"supfact\">kj</span>;\n  exon_p_t <span class=\"supfact\">ki</span>;\n  <span class=\"supfact\">ki</span> = *(exon_p_t *)a;\n  <span class=\"supfact\">kj</span> = *(exon_p_t *)b;\n  if (**(_DWORD **)a > **(_DWORD **)b)\n    return Number;\n  if (<span class=\"supfact\">ki</span>->from1 < <span class=\"supfact\">kj</span>->from1)\n    return Number;\n  if (<span class=\"supfact\">ki</span>->from2 > <span class=\"supfact\">kj</span>->from2)\n    return Number;\n  if (<span class=\"supfact\">ki</span>->from2 >= <span class=\"supfact\">kj</span>->from2)\n    return Number;\n  return Number;\n}", "var": [{"name": "v4", "type": "const object_entry *", "ref_name": "ki", "ref_type": "__unk__"}, {"name": "v3", "type": "const object_entry *", "ref_name": "kj", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "HexHive", "repo_name": "SMoTherSpectre", "path": "HexHive/SMoTherSpectre/0382331ea27403cf9a88755363232ff4c392672b60c33a1768c12aaef2fe2356", "path_in_repo": "HexHive/SMoTherSpectre/openssl_attack/openssl/crypto/ts/ts_rsp_verify.o", "objdump": "0000000000000987 <ts_find_cert_v2>:\n     987:\t55                   \tpush   %rbp\n     988:\t48 89 e5             \tmov    %rsp,%rbp\n     98b:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n     98f:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n     993:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n     997:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     99e:\te9 e0 00 00 00       \tjmpq   a83 <ts_find_cert_v2+0xfc>\n     9a3:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     9a6:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     9aa:\t89 d6                \tmov    %edx,%esi\n     9ac:\t48 89 c7             \tmov    %rax,%rdi\n     9af:\te8 d3 f7 ff ff       \tcallq  187 <sk_ESS_CERT_ID_V2_value>\n     9b4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     9b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9bc:\t48 8b 00             \tmov    (%rax),%rax\n     9bf:\t48 85 c0             \ttest   %rax,%rax\n     9c2:\t74 27                \tje     9eb <ts_find_cert_v2+0x64>\n     9c4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9c8:\t48 8b 00             \tmov    (%rax),%rax\n     9cb:\t48 8b 00             \tmov    (%rax),%rax\n     9ce:\t48 89 c7             \tmov    %rax,%rdi\n     9d1:\te8 00 00 00 00       \tcallq  9d6 <ts_find_cert_v2+0x4f>\n     9d6:\t89 c7                \tmov    %eax,%edi\n     9d8:\te8 00 00 00 00       \tcallq  9dd <ts_find_cert_v2+0x56>\n     9dd:\t48 89 c7             \tmov    %rax,%rdi\n     9e0:\te8 00 00 00 00       \tcallq  9e5 <ts_find_cert_v2+0x5e>\n     9e5:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     9e9:\teb 09                \tjmp    9f4 <ts_find_cert_v2+0x6d>\n     9eb:\te8 00 00 00 00       \tcallq  9f0 <ts_find_cert_v2+0x69>\n     9f0:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     9f4:\t48 8d 4d 9c          \tlea    -0x64(%rbp),%rcx\n     9f8:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n     9fc:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n     a00:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     a04:\t48 89 c7             \tmov    %rax,%rdi\n     a07:\te8 00 00 00 00       \tcallq  a0c <ts_find_cert_v2+0x85>\n     a0c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a10:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     a14:\t8b 00                \tmov    (%rax),%eax\n     a16:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n     a19:\t39 d0                \tcmp    %edx,%eax\n     a1b:\t74 07                \tje     a24 <ts_find_cert_v2+0x9d>\n     a1d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     a22:\teb 79                \tjmp    a9d <ts_find_cert_v2+0x116>\n     a24:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a28:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     a2c:\t8b 00                \tmov    (%rax),%eax\n     a2e:\t48 63 d0             \tmovslq %eax,%rdx\n     a31:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a35:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     a39:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     a3d:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n     a41:\t48 89 ce             \tmov    %rcx,%rsi\n     a44:\t48 89 c7             \tmov    %rax,%rdi\n     a47:\te8 00 00 00 00       \tcallq  a4c <ts_find_cert_v2+0xc5>\n     a4c:\t85 c0                \ttest   %eax,%eax\n     a4e:\t75 2f                \tjne    a7f <ts_find_cert_v2+0xf8>\n     a50:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a54:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     a58:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     a5c:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n     a61:\t74 17                \tje     a7a <ts_find_cert_v2+0xf3>\n     a63:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n     a67:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     a6b:\t48 89 d6             \tmov    %rdx,%rsi\n     a6e:\t48 89 c7             \tmov    %rax,%rdi\n     a71:\te8 29 00 00 00       \tcallq  a9f <ts_issuer_serial_cmp>\n     a76:\t85 c0                \ttest   %eax,%eax\n     a78:\t75 05                \tjne    a7f <ts_find_cert_v2+0xf8>\n     a7a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     a7d:\teb 1e                \tjmp    a9d <ts_find_cert_v2+0x116>\n     a7f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     a83:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     a87:\t48 89 c7             \tmov    %rax,%rdi\n     a8a:\te8 de f6 ff ff       \tcallq  16d <sk_ESS_CERT_ID_V2_num>\n     a8f:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n     a92:\t0f 8c 0b ff ff ff    \tjl     9a3 <ts_find_cert_v2+0x1c>\n     a98:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     a9d:\tc9                   \tleaveq \n     a9e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ts_find_cert_v2(__int64 a1, __int64 a2) {\n  signed int i;\n  unsigned int v3;\n  __int64 v4;\n  int <span class=\"supfact\">v6</span>;\n  char <span class=\"supfact\">s2</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  signed int <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = Number;\n  for (i = sk_ESS_CERT_ID_V2_num(a1); <span class=\"supfact\">v11</span> < i;\n       i = sk_ESS_CERT_ID_V2_num(a1)) {\n    <span class=\"supfact\">v9</span> = sk_ESS_CERT_ID_V2_value(a1, <span class=\"supfact\">v11</span>);\n    if (*(_QWORD *)<span class=\"supfact\">v9</span>) {\n      v3 = OBJ_obj2nid(**(_QWORD **)<span class=\"supfact\">v9</span>);\n      v4 = OBJ_nid2sn(v3);\n      <span class=\"supfact\">v10</span> = EVP_get_digestbyname(v4);\n    } else {\n      <span class=\"supfact\">v10</span> = EVP_sha256();\n    }\n    X509_digest(a2, <span class=\"supfact\">v10</span>, <span class=\"supfact\">s2</span>,\n                &<span class=\"supfact\">v6</span>);\n    if (**(_DWORD **)(<span class=\"supfact\">v9</span> + Number) != <span class=\"supfact\">v6</span>)\n      return Number;\n    if (!memcmp(*(const void **)(*(_QWORD *)(<span class=\"supfact\">v9</span> + Number) +\n                                 Number L),\n                <span class=\"supfact\">s2</span>, **(int **)(<span class=\"supfact\">v9</span> + Number))) {\n      <span class=\"supfact\">v8</span> = *(_QWORD *)(<span class=\"supfact\">v9</span> + Number);\n      if (!<span class=\"supfact\">v8</span> ||\n          !(unsigned int)ts_issuer_serial_cmp(<span class=\"supfact\">v8</span>, a2))\n        return (unsigned int)<span class=\"supfact\">v11</span>;\n    }\n    ++<span class=\"supfact\">v11</span>;\n  }\n  return Number;\n}", "code_t": "int __cdecl ts_find_cert_v2(stack_st_ESS_CERT_ID_V2 *cert_ids, X509 *cert) {\n  unsigned int v2;\n  __int64 v3;\n  int v5;\n  unsigned int <span class=\"supfact\">len</span>;\n  unsigned __int8 <span class=\"supfact\">cert_digest</span>[Number];\n  ESS_ISSUER_SERIAL *<span class=\"supfact\">is</span>;\n  ESS_CERT_ID_V2 *<span class=\"supfact\">cid</span>;\n  const EVP_MD *<span class=\"supfact\">md</span>;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    v5 = sk_ESS_CERT_ID_V2_num(cert_ids);\n    if (<span class=\"supfact\">i</span> >= v5)\n      break;\n    <span class=\"supfact\">cid</span> = sk_ESS_CERT_ID_V2_value(cert_ids, <span class=\"supfact\">i</span>);\n    if (<span class=\"supfact\">cid</span>->hash_alg) {\n      v2 = OBJ_obj2nid(<span class=\"supfact\">cid</span>->hash_alg->algorithm);\n      v3 = OBJ_nid2sn(v2);\n      <span class=\"supfact\">md</span> = (const EVP_MD *)EVP_get_digestbyname(v3);\n    } else {\n      <span class=\"supfact\">md</span> = (const EVP_MD *)EVP_sha256();\n    }\n    X509_digest(cert, <span class=\"supfact\">md</span>, <span class=\"supfact\">cert_digest</span>,\n                &<span class=\"supfact\">len</span>);\n    if (<span class=\"supfact\">cid</span>->hash->length != <span class=\"supfact\">len</span>)\n      return Number;\n    if (!memcmp(<span class=\"supfact\">cid</span>->hash->data, <span class=\"supfact\">cert_digest</span>,\n                <span class=\"supfact\">cid</span>->hash->length)) {\n      <span class=\"supfact\">is</span> = <span class=\"supfact\">cid</span>->issuer_serial;\n      if (!<span class=\"supfact\">is</span> ||\n          !ts_issuer_serial_cmp(<span class=\"supfact\">is</span>, cert))\n        return <span class=\"supfact\">i</span>;\n    }\n  }\n  return Number;\n}", "var": [{"name": "v11", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v10", "type": "ASN1_OBJECT *", "ref_name": "md", "ref_type": "const EVP_MD *"}, {"name": "v9", "type": "ASN1_OCTET_STRING *", "ref_name": "cid", "ref_type": "__unk__"}, {"name": "v8", "type": "const EVP_MD *", "ref_name": "is", "ref_type": "ESS_ISSUER_SERIAL *"}, {"name": "s2", "type": "unsigned __int8[64]", "ref_name": "cert_digest", "ref_type": "unsigned __int8[64]"}, {"name": "v6", "type": "unsigned int", "ref_name": "len", "ref_type": "unsigned int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "mileswu", "repo_name": "cos426", "path": "mileswu/cos426/f0087602348033a5f45383bc6252ed547e1d68351760e59d4fce74b80e93bb16", "path_in_repo": "mileswu/cos426/assignment4/src/jpeg/jcphuff.o", "objdump": "0000000000001203 <finish_pass_gather_phuff>:\n    1203:\t55                   \tpush   %rbp\n    1204:\t48 89 e5             \tmov    %rsp,%rbp\n    1207:\t48 83 ec 50          \tsub    $0x50,%rsp\n    120b:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    120f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1213:\t48 8b 80 f0 01 00 00 \tmov    0x1f0(%rax),%rax\n    121a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    121e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1222:\t48 89 c7             \tmov    %rax,%rdi\n    1225:\te8 8d f3 ff ff       \tcallq  5b7 <emit_eobrun>\n    122a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    122e:\t8b 80 9c 01 00 00    \tmov    0x19c(%rax),%eax\n    1234:\t85 c0                \ttest   %eax,%eax\n    1236:\t0f 94 c0             \tsete   %al\n    1239:\t0f b6 c0             \tmovzbl %al,%eax\n    123c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    123f:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1243:\tba 10 00 00 00       \tmov    $0x10,%edx\n    1248:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    124d:\t48 89 c7             \tmov    %rax,%rdi\n    1250:\te8 00 00 00 00       \tcallq  1255 <finish_pass_gather_phuff+0x52>\n    1255:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    125c:\te9 f2 00 00 00       \tjmpq   1353 <finish_pass_gather_phuff+0x150>\n    1261:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1265:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    1268:\t48 63 d2             \tmovslq %edx,%rdx\n    126b:\t48 83 c2 28          \tadd    $0x28,%rdx\n    126f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1274:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1278:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n    127c:\t74 1e                \tje     129c <finish_pass_gather_phuff+0x99>\n    127e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1282:\t8b 80 a4 01 00 00    \tmov    0x1a4(%rax),%eax\n    1288:\t85 c0                \ttest   %eax,%eax\n    128a:\t0f 85 be 00 00 00    \tjne    134e <finish_pass_gather_phuff+0x14b>\n    1290:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1294:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1297:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    129a:\teb 0a                \tjmp    12a6 <finish_pass_gather_phuff+0xa3>\n    129c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    12a0:\t8b 40 18             \tmov    0x18(%rax),%eax\n    12a3:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    12a6:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    12a9:\t48 98                \tcltq   \n    12ab:\t8b 44 85 c0          \tmov    -0x40(%rbp,%rax,4),%eax\n    12af:\t85 c0                \ttest   %eax,%eax\n    12b1:\t0f 85 98 00 00 00    \tjne    134f <finish_pass_gather_phuff+0x14c>\n    12b7:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n    12bb:\t74 1e                \tje     12db <finish_pass_gather_phuff+0xd8>\n    12bd:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    12c0:\t48 98                \tcltq   \n    12c2:\t48 83 c0 10          \tadd    $0x10,%rax\n    12c6:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    12cd:\t00 \n    12ce:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    12d2:\t48 01 d0             \tadd    %rdx,%rax\n    12d5:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    12d9:\teb 1c                \tjmp    12f7 <finish_pass_gather_phuff+0xf4>\n    12db:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    12de:\t48 98                \tcltq   \n    12e0:\t48 83 c0 14          \tadd    $0x14,%rax\n    12e4:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    12eb:\t00 \n    12ec:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    12f0:\t48 01 d0             \tadd    %rdx,%rax\n    12f3:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    12f7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    12fb:\t48 8b 00             \tmov    (%rax),%rax\n    12fe:\t48 85 c0             \ttest   %rax,%rax\n    1301:\t75 13                \tjne    1316 <finish_pass_gather_phuff+0x113>\n    1303:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1307:\t48 89 c7             \tmov    %rax,%rdi\n    130a:\te8 00 00 00 00       \tcallq  130f <finish_pass_gather_phuff+0x10c>\n    130f:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1313:\t48 89 02             \tmov    %rax,(%rdx)\n    1316:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    131a:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    131d:\t48 63 d2             \tmovslq %edx,%rdx\n    1320:\t48 83 c2 12          \tadd    $0x12,%rdx\n    1324:\t48 8b 54 d0 08       \tmov    0x8(%rax,%rdx,8),%rdx\n    1329:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    132d:\t48 8b 08             \tmov    (%rax),%rcx\n    1330:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1334:\t48 89 ce             \tmov    %rcx,%rsi\n    1337:\t48 89 c7             \tmov    %rax,%rdi\n    133a:\te8 00 00 00 00       \tcallq  133f <finish_pass_gather_phuff+0x13c>\n    133f:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    1342:\t48 98                \tcltq   \n    1344:\tc7 44 85 c0 01 00 00 \tmovl   $0x1,-0x40(%rbp,%rax,4)\n    134b:\t00 \n    134c:\teb 01                \tjmp    134f <finish_pass_gather_phuff+0x14c>\n    134e:\t90                   \tnop\n    134f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    1353:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1357:\t8b 80 44 01 00 00    \tmov    0x144(%rax),%eax\n    135d:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    1360:\t0f 8c fb fe ff ff    \tjl     1261 <finish_pass_gather_phuff+0x5e>\n    1366:\t90                   \tnop\n    1367:\t90                   \tnop\n    1368:\tc9                   \tleaveq \n    1369:\tc3                   \tretq   ", "code_s": "__int64 __fastcall finish_pass_gather_phuff(__int64 a1) {\n  __int64 v1;\n  __int64 v2;\n  __int64 result;\n  int <span class=\"supfact\">s</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>;\n  _BOOL4 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 *<span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v7</span> = *(_QWORD *)(a1 + Number);\n  emit_eobrun(<span class=\"supfact\">v7</span>);\n  <span class=\"supfact\">v6</span> = *(_DWORD *)(a1 + Number) == Number;\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = *(unsigned int *)(a1 + Number);\n    if (<span class=\"supfact\">i</span> >= (int)result)\n      break;\n    <span class=\"supfact\">v5</span> =\n        *(_QWORD *)(a1 + Number * (<span class=\"supfact\">i</span> + Number L) + Number);\n    if (<span class=\"supfact\">v6</span>) {\n      if (*(_DWORD *)(a1 + Number))\n        continue;\n      <span class=\"supfact\">v9</span> = *(_DWORD *)(<span class=\"supfact\">v5</span> + Number);\n    } else {\n      <span class=\"supfact\">v9</span> = *(_DWORD *)(<span class=\"supfact\">v5</span> + Number);\n    }\n    if (!<span class=\"supfact\">s</span>[<span class=\"supfact\">v9</span>]) {\n      if (<span class=\"supfact\">v6</span>)\n        v1 = Number * (<span class=\"supfact\">v9</span> + Number L);\n      else\n        v1 = Number * (<span class=\"supfact\">v9</span> + Number L);\n      <span class=\"supfact\">v8</span> = (__int64 *)(v1 + a1);\n      if (!*(_QWORD *)(v1 + a1)) {\n        v2 = jpeg_alloc_huff_table(a1);\n        *<span class=\"supfact\">v8</span> = v2;\n      }\n      jpeg_gen_optimal_table(\n          a1, *<span class=\"supfact\">v8</span>,\n          *(_QWORD *)(<span class=\"supfact\">v7</span> +\n                      Number * (<span class=\"supfact\">v9</span> + Number L) + Number));\n      <span class=\"supfact\">s</span>[<span class=\"supfact\">v9</span>] = Number;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl finish_pass_gather_phuff(j_compress_ptr cinfo) {\n  __int64 v1;\n  JHUFF_TBL *v2;\n  jboolean <span class=\"supfact\">did</span>[Number];\n  jpeg_component_info *<span class=\"supfact\">compptr</span>;\n  jboolean <span class=\"supfact\">is_DC_band</span>;\n  phuff_entropy_ptr <span class=\"supfact\">entropy</span>;\n  JHUFF_TBL **<span class=\"supfact\">htblptr</span>;\n  int <span class=\"supfact\">tbl</span>;\n  int <span class=\"supfact\">ci</span>;\n  <span class=\"supfact\">entropy</span> = (phuff_entropy_ptr)cinfo-><span class=\"supfact\">entropy</span>;\n  emit_eobrun(<span class=\"supfact\">entropy</span>);\n  <span class=\"supfact\">is_DC_band</span> = cinfo->Ss == Number;\n  memset(<span class=\"supfact\">did</span>, Number, sizeof(<span class=\"supfact\">did</span>));\n  for (<span class=\"supfact\">ci</span> = Number; <span class=\"supfact\">ci</span> < cinfo->comps_in_scan;\n       ++<span class=\"supfact\">ci</span>) {\n    <span class=\"supfact\">compptr</span> = cinfo->cur_comp_info[<span class=\"supfact\">ci</span>];\n    if (<span class=\"supfact\">is_DC_band</span>) {\n      if (cinfo->Ah)\n        continue;\n      <span class=\"supfact\">tbl</span> = <span class=\"supfact\">compptr</span>->dc_tbl_no;\n    } else {\n      <span class=\"supfact\">tbl</span> = <span class=\"supfact\">compptr</span>->ac_tbl_no;\n    }\n    if (!<span class=\"supfact\">did</span>[<span class=\"supfact\">tbl</span>]) {\n      if (<span class=\"supfact\">is_DC_band</span>)\n        v1 = Number * (<span class=\"supfact\">tbl</span> + Number L);\n      else\n        v1 = Number * (<span class=\"supfact\">tbl</span> + Number L);\n      <span class=\"supfact\">htblptr</span> = (JHUFF_TBL **)((char *)cinfo + v1);\n      if (!*(jpeg_error_mgr **)((char *)&cinfo->err + v1)) {\n        v2 = (JHUFF_TBL *)jpeg_alloc_huff_table(cinfo);\n        *<span class=\"supfact\">htblptr</span> = v2;\n      }\n      jpeg_gen_optimal_table(\n          cinfo, *<span class=\"supfact\">htblptr</span>,\n          <span class=\"supfact\">entropy</span>->count_ptrs[<span class=\"supfact\">tbl</span>]);\n      <span class=\"supfact\">did</span>[<span class=\"supfact\">tbl</span>] = Number;\n    }\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "ci", "ref_type": "int"}, {"name": "v9", "type": "int", "ref_name": "tbl", "ref_type": "int"}, {"name": "v8", "type": "JHUFF_TBL * *", "ref_name": "htblptr", "ref_type": "JHUFF_TBL * *"}, {"name": "v7", "type": "phuff_entropy_ptr", "ref_name": "entropy", "ref_type": "phuff_entropy_ptr"}, {"name": "v6", "type": "boolean", "ref_name": "is_DC_band", "ref_type": "jboolean"}, {"name": "v5", "type": "jpeg_component_info *", "ref_name": "compptr", "ref_type": "jpeg_component_info *"}, {"name": "s", "type": "boolean[4]", "ref_name": "did", "ref_type": "jboolean[4]"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "amoriarty", "repo_name": "ft_sh1", "path": "amoriarty/ft_sh1/a24e35a23802944c82b9bb844953930baaaed0e01f3e960fa1c54f2c2b031f9f", "path_in_repo": "amoriarty/ft_sh1//ft_minishell1", "objdump": "00000000004031c2 <count_words>:\n  4031c2:\t55                   \tpush   %rbp\n  4031c3:\t48 89 e5             \tmov    %rsp,%rbp\n  4031c6:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4031ca:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4031ce:\t89 f0                \tmov    %esi,%eax\n  4031d0:\t88 45 e4             \tmov    %al,-0x1c(%rbp)\n  4031d3:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4031da:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4031e1:\te9 93 00 00 00       \tjmpq   403279 <count_words+0xb7>\n  4031e6:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  4031ea:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4031ed:\t48 63 d0             \tmovslq %eax,%rdx\n  4031f0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4031f4:\t48 01 d0             \tadd    %rdx,%rax\n  4031f7:\t0f b6 00             \tmovzbl (%rax),%eax\n  4031fa:\t38 45 e4             \tcmp    %al,-0x1c(%rbp)\n  4031fd:\t74 e7                \tje     4031e6 <count_words+0x24>\n  4031ff:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  403202:\t48 63 d0             \tmovslq %eax,%rdx\n  403205:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  403209:\t48 01 d0             \tadd    %rdx,%rax\n  40320c:\t0f b6 00             \tmovzbl (%rax),%eax\n  40320f:\t38 45 e4             \tcmp    %al,-0x1c(%rbp)\n  403212:\t74 65                \tje     403279 <count_words+0xb7>\n  403214:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  403217:\t48 63 d0             \tmovslq %eax,%rdx\n  40321a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40321e:\t48 01 d0             \tadd    %rdx,%rax\n  403221:\t0f b6 00             \tmovzbl (%rax),%eax\n  403224:\t84 c0                \ttest   %al,%al\n  403226:\t74 51                \tje     403279 <count_words+0xb7>\n  403228:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40322b:\t48 63 d0             \tmovslq %eax,%rdx\n  40322e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  403232:\t48 01 d0             \tadd    %rdx,%rax\n  403235:\t0f b6 00             \tmovzbl (%rax),%eax\n  403238:\t0f be c0             \tmovsbl %al,%eax\n  40323b:\t89 c7                \tmov    %eax,%edi\n  40323d:\te8 00 f9 ff ff       \tcallq  402b42 <ft_isprint>\n  403242:\t85 c0                \ttest   %eax,%eax\n  403244:\t74 33                \tje     403279 <count_words+0xb7>\n  403246:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40324a:\teb 04                \tjmp    403250 <count_words+0x8e>\n  40324c:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  403250:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  403253:\t48 63 d0             \tmovslq %eax,%rdx\n  403256:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40325a:\t48 01 d0             \tadd    %rdx,%rax\n  40325d:\t0f b6 00             \tmovzbl (%rax),%eax\n  403260:\t38 45 e4             \tcmp    %al,-0x1c(%rbp)\n  403263:\t74 14                \tje     403279 <count_words+0xb7>\n  403265:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  403268:\t48 63 d0             \tmovslq %eax,%rdx\n  40326b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40326f:\t48 01 d0             \tadd    %rdx,%rax\n  403272:\t0f b6 00             \tmovzbl (%rax),%eax\n  403275:\t84 c0                \ttest   %al,%al\n  403277:\t75 d3                \tjne    40324c <count_words+0x8a>\n  403279:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40327c:\t48 63 d0             \tmovslq %eax,%rdx\n  40327f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  403283:\t48 01 d0             \tadd    %rdx,%rax\n  403286:\t0f b6 00             \tmovzbl (%rax),%eax\n  403289:\t84 c0                \ttest   %al,%al\n  40328b:\t0f 85 59 ff ff ff    \tjne    4031ea <count_words+0x28>\n  403291:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  403294:\tc9                   \tleaveq \n  403295:\tc3                   \tretq   ", "code_s": "__int64 __fastcall count_words(__int64 a1, char a2) {\n  int <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Number;\n  <span class=\"supfact\">v3</span> = Number;\n  while (*(_BYTE *)(<span class=\"supfact\">v3</span> + a1)) {\n    while (a2 == *(_BYTE *)(<span class=\"supfact\">v3</span> + a1))\n      ++<span class=\"supfact\">v3</span>;\n    if (*(_BYTE *)(<span class=\"supfact\">v3</span> + a1) &&\n        ft_isprint(*(char *)(<span class=\"supfact\">v3</span> + a1))) {\n      ++<span class=\"supfact\">v4</span>;\n      while (a2 != *(_BYTE *)(<span class=\"supfact\">v3</span> + a1) &&\n             *(_BYTE *)(<span class=\"supfact\">v3</span> + a1))\n        ++<span class=\"supfact\">v3</span>;\n    }\n  }\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "int __cdecl count_words(const char *s, char c) {\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">words</span>;\n  <span class=\"supfact\">words</span> = Number;\n  <span class=\"supfact\">i</span> = Number;\n  while (s[<span class=\"supfact\">i</span>]) {\n    while (c == s[<span class=\"supfact\">i</span>])\n      ++<span class=\"supfact\">i</span>;\n    if (s[<span class=\"supfact\">i</span>] && ft_isprint(s[<span class=\"supfact\">i</span>])) {\n      ++<span class=\"supfact\">words</span>;\n      while (c != s[<span class=\"supfact\">i</span>] && s[<span class=\"supfact\">i</span>])\n        ++<span class=\"supfact\">i</span>;\n    }\n  }\n  return <span class=\"supfact\">words</span>;\n}", "var": [{"name": "v4", "type": "int", "ref_name": "words", "ref_type": "int"}, {"name": "v3", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "Kristoffer", "repo_name": "Xen-4.1.2", "path": "Kristoffer/Xen-4.1.2/33cad91c0dd86247487bf7455fc7960116c96568e29c0377a8dccb4b537a07b0", "path_in_repo": "Kristoffer/Xen-4.1.2/tools/ioemu-qemu-xen/qemu-img", "objdump": "000000000040b82b <vmdk_L2update>:\n  40b82b:\t55                   \tpush   %rbp\n  40b82c:\t48 89 e5             \tmov    %rsp,%rbp\n  40b82f:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40b833:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40b837:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40b83b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40b83f:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  40b843:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40b847:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40b84b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40b84f:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  40b852:\t89 c0                \tmov    %eax,%eax\n  40b854:\t48 c1 e0 09          \tshl    $0x9,%rax\n  40b858:\t48 89 c1             \tmov    %rax,%rcx\n  40b85b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40b85f:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40b862:\t89 c0                \tmov    %eax,%eax\n  40b864:\t48 c1 e0 02          \tshl    $0x2,%rax\n  40b868:\t48 01 c8             \tadd    %rcx,%rax\n  40b86b:\t48 89 c6             \tmov    %rax,%rsi\n  40b86e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40b872:\t48 8b 00             \tmov    (%rax),%rax\n  40b875:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n  40b87a:\t48 89 c7             \tmov    %rax,%rdi\n  40b87d:\te8 b9 2f 01 00       \tcallq  41e83b <bdrv_pwrite>\n  40b882:\t83 f8 04             \tcmp    $0x4,%eax\n  40b885:\t74 07                \tje     40b88e <vmdk_L2update+0x63>\n  40b887:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40b88c:\teb 7a                \tjmp    40b908 <vmdk_L2update+0xdd>\n  40b88e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40b892:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40b896:\t48 85 c0             \ttest   %rax,%rax\n  40b899:\t74 68                \tje     40b903 <vmdk_L2update+0xd8>\n  40b89b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40b89f:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n  40b8a3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40b8a7:\t8b 40 04             \tmov    0x4(%rax),%eax\n  40b8aa:\t89 c0                \tmov    %eax,%eax\n  40b8ac:\t48 c1 e0 02          \tshl    $0x2,%rax\n  40b8b0:\t48 01 d0             \tadd    %rdx,%rax\n  40b8b3:\t8b 10                \tmov    (%rax),%edx\n  40b8b5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40b8b9:\t89 50 0c             \tmov    %edx,0xc(%rax)\n  40b8bc:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40b8c0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40b8c4:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  40b8c7:\t89 c0                \tmov    %eax,%eax\n  40b8c9:\t48 c1 e0 09          \tshl    $0x9,%rax\n  40b8cd:\t48 89 c1             \tmov    %rax,%rcx\n  40b8d0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40b8d4:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40b8d7:\t89 c0                \tmov    %eax,%eax\n  40b8d9:\t48 c1 e0 02          \tshl    $0x2,%rax\n  40b8dd:\t48 01 c8             \tadd    %rcx,%rax\n  40b8e0:\t48 89 c6             \tmov    %rax,%rsi\n  40b8e3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40b8e7:\t48 8b 00             \tmov    (%rax),%rax\n  40b8ea:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n  40b8ef:\t48 89 c7             \tmov    %rax,%rdi\n  40b8f2:\te8 44 2f 01 00       \tcallq  41e83b <bdrv_pwrite>\n  40b8f7:\t83 f8 04             \tcmp    $0x4,%eax\n  40b8fa:\t74 07                \tje     40b903 <vmdk_L2update+0xd8>\n  40b8fc:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40b901:\teb 05                \tjmp    40b908 <vmdk_L2update+0xdd>\n  40b903:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b908:\tc9                   \tleaveq \n  40b909:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vmdk_L2update(__int64 a1, unsigned int *a2) {\n  _QWORD *<span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_QWORD **)(a1 + Number);\n  if ((unsigned int)bdrv_pwrite(*<span class=\"supfact\">v3</span>,\n                                ((unsigned __int64)a2[Number] << Number) +\n                                    Number L * a2[Number],\n                                a2, Number L) != Number)\n    return Number;\n  if (!<span class=\"supfact\">v3</span>[Number])\n    return Number L;\n  a2[Number] = *(_DWORD *)(<span class=\"supfact\">v3</span>[Number] + Number L * a2[Number]);\n  if ((unsigned int)bdrv_pwrite(*<span class=\"supfact\">v3</span>,\n                                ((unsigned __int64)a2[Number] << Number) +\n                                    Number L * a2[Number],\n                                a2, Number L) == Number)\n    return Number L;\n  return Number;\n}", "code_t": "int __cdecl vmdk_L2update(BlockDriverState_0 *bs, VmdkMetaData_0 *m_data) {\n  BDRVVmdkState_0 *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (BDRVVmdkState_0 *)bs->opaque;\n  if (bdrv_pwrite(<span class=\"supfact\">s</span>->hd,\n                  ((unsigned __int64)m_data->l2_offset << Number) +\n                      Number L * m_data->l2_index,\n                  m_data, Number) != Number)\n    return Number;\n  if (!<span class=\"supfact\">s</span>->l1_backup_table_offset)\n    return Number;\n  m_data->l2_offset = <span class=\"supfact\">s</span>->l1_backup_table[m_data->l1_index];\n  if (bdrv_pwrite(<span class=\"supfact\">s</span>->hd,\n                  ((unsigned __int64)m_data->l2_offset << Number) +\n                      Number L * m_data->l2_index,\n                  m_data, Number) == Number)\n    return Number;\n  return Number;\n}", "var": [{"name": "v3", "type": "BDRVVmdkState_0 *", "ref_name": "s", "ref_type": "BDRVVmdkState_0 *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "leon-anavi", "repo_name": "xmame-arm", "path": "leon-anavi/xmame-arm/759f7c4ead39b5510650cb5857a39d02dfa14a376b435291a73771dbd57a0a55", "path_in_repo": "leon-anavi/xmame-arm//xmame.obj/sound/scsp.o", "objdump": "0000000000003379 <SCSP_Update0111>:\n    3379:\t55                   \tpush   %rbp\n    337a:\t48 89 e5             \tmov    %rsp,%rbp\n    337d:\t48 83 ec 40          \tsub    $0x40,%rsp\n    3381:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    3385:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    3389:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n    338c:\t89 4d c8             \tmov    %ecx,-0x38(%rbp)\n    338f:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    3396:\te9 6d 01 00 00       \tjmpq   3508 <SCSP_Update0111+0x18f>\n    339b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    339f:\t8b 40 34             \tmov    0x34(%rax),%eax\n    33a2:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    33a5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    33a9:\t0f b6 40 20          \tmovzbl 0x20(%rax),%eax\n    33ad:\t84 c0                \ttest   %al,%al\n    33af:\t0f 84 61 01 00 00    \tje     3516 <SCSP_Update0111+0x19d>\n    33b5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    33b9:\t48 83 c0 60          \tadd    $0x60,%rax\n    33bd:\t48 89 c7             \tmov    %rax,%rdi\n    33c0:\te8 40 cf ff ff       \tcallq  305 <PLFO_Step>\n    33c5:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    33c8:\t0f af c2             \timul   %edx,%eax\n    33cb:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    33ce:\tc1 7d f4 0c          \tsarl   $0xc,-0xc(%rbp)\n    33d2:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    33d6:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n    33da:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    33de:\t8b 40 30             \tmov    0x30(%rax),%eax\n    33e1:\tc1 e8 0b             \tshr    $0xb,%eax\n    33e4:\t89 c0                \tmov    %eax,%eax\n    33e6:\t83 e0 fe             \tand    $0xfffffffe,%eax\n    33e9:\t48 01 d0             \tadd    %rdx,%rax\n    33ec:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    33f0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    33f4:\t0f b7 00             \tmovzwl (%rax),%eax\n    33f7:\t98                   \tcwtl   \n    33f8:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    33fb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    33ff:\t8b 50 30             \tmov    0x30(%rax),%edx\n    3402:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    3405:\t01 c2                \tadd    %eax,%edx\n    3407:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    340b:\t89 50 30             \tmov    %edx,0x30(%rax)\n    340e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3412:\t8b 40 30             \tmov    0x30(%rax),%eax\n    3415:\tc1 e8 0c             \tshr    $0xc,%eax\n    3418:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    341b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    341f:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n    3423:\t0f b7 c0             \tmovzwl %ax,%eax\n    3426:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n    3429:\t72 17                \tjb     3442 <SCSP_Update0111+0xc9>\n    342b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    342f:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    3433:\t0f b7 c0             \tmovzwl %ax,%eax\n    3436:\tc1 e0 0c             \tshl    $0xc,%eax\n    3439:\t89 c2                \tmov    %eax,%edx\n    343b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    343f:\t89 50 30             \tmov    %edx,0x30(%rax)\n    3442:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3446:\t48 83 c0 78          \tadd    $0x78,%rax\n    344a:\t48 89 c7             \tmov    %rax,%rdi\n    344d:\te8 1a cf ff ff       \tcallq  36c <ALFO_Step>\n    3452:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    3455:\t0f af c2             \timul   %edx,%eax\n    3458:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    345b:\tc1 7d f8 0c          \tsarl   $0xc,-0x8(%rbp)\n    345f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3466 <SCSP_Update0111+0xed>\n    3466:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    3469:\t66 89 10             \tmov    %dx,(%rax)\n    346c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3470:\t48 89 c7             \tmov    %rax,%rdi\n    3473:\te8 d2 d4 ff ff       \tcallq  94a <EG_Update>\n    3478:\t0f af 45 f8          \timul   -0x8(%rbp),%eax\n    347c:\tc1 f8 0c             \tsar    $0xc,%eax\n    347f:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    3482:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3489 <SCSP_Update0111+0x110>\n    3489:\t8b 10                \tmov    (%rax),%edx\n    348b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    348f:\t8b 4d cc             \tmov    -0x34(%rbp),%ecx\n    3492:\t48 81 c1 00 09 00 00 \tadd    $0x900,%rcx\n    3499:\t8b 44 88 08          \tmov    0x8(%rax,%rcx,4),%eax\n    349d:\t0f af 45 f8          \timul   -0x8(%rbp),%eax\n    34a1:\tc1 f8 0c             \tsar    $0xc,%eax\n    34a4:\t89 c1                \tmov    %eax,%ecx\n    34a6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 34ad <SCSP_Update0111+0x134>\n    34ad:\t01 ca                \tadd    %ecx,%edx\n    34af:\t89 10                \tmov    %edx,(%rax)\n    34b1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 34b8 <SCSP_Update0111+0x13f>\n    34b8:\t8b 10                \tmov    (%rax),%edx\n    34ba:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    34be:\t8b 4d cc             \tmov    -0x34(%rbp),%ecx\n    34c1:\t48 81 c1 00 09 01 00 \tadd    $0x10900,%rcx\n    34c8:\t8b 44 88 08          \tmov    0x8(%rax,%rcx,4),%eax\n    34cc:\t0f af 45 f8          \timul   -0x8(%rbp),%eax\n    34d0:\tc1 f8 0c             \tsar    $0xc,%eax\n    34d3:\t89 c1                \tmov    %eax,%ecx\n    34d5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 34dc <SCSP_Update0111+0x163>\n    34dc:\t01 ca                \tadd    %ecx,%edx\n    34de:\t89 10                \tmov    %edx,(%rax)\n    34e0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 34e7 <SCSP_Update0111+0x16e>\n    34e7:\t48 83 c0 04          \tadd    $0x4,%rax\n    34eb:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 34f2 <SCSP_Update0111+0x179>\n    34f2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 34f9 <SCSP_Update0111+0x180>\n    34f9:\t48 83 c0 04          \tadd    $0x4,%rax\n    34fd:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 3504 <SCSP_Update0111+0x18b>\n    3504:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    3508:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    350b:\t3b 45 c8             \tcmp    -0x38(%rbp),%eax\n    350e:\t0f 82 87 fe ff ff    \tjb     339b <SCSP_Update0111+0x22>\n    3514:\teb 01                \tjmp    3517 <SCSP_Update0111+0x19e>\n    3516:\t90                   \tnop\n    3517:\tc9                   \tleaveq \n    3518:\tc3                   \tretq   ", "code_s": "__int64 __fastcall SCSP_Update0111(__int64 a1, __int64 a2, unsigned int a3,\n                                   unsigned int a4) {\n  __int64 result;\n  int v5;\n  int <span class=\"supfact\">v8</span>;\n  int v9;\n  int v10;\n  int v11;\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = <span class=\"supfact\">i</span>;\n    if (<span class=\"supfact\">i</span> >= a4)\n      break;\n    <span class=\"supfact\">v8</span> = *(_DWORD *)(a2 + Number);\n    result = *(unsigned __int8 *)(a2 + Number);\n    if (!(_BYTE)result)\n      break;\n    v5 = PLFO_Step(a2 + Number);\n    v9 = *(__int16 *)(*(_QWORD *)(a2 + Number) +\n                      ((*(_DWORD *)(a2 + Number) >> Number) & Number));\n    *(_DWORD *)(a2 + Number) += (<span class=\"supfact\">v8</span> * v5) >> Number;\n    if (*(_DWORD *)(a2 + Number) >> Number >=\n        (unsigned int)*(unsigned __int16 *)(a2 + Number))\n      *(_DWORD *)(a2 + Number) = *(unsigned __int16 *)(a2 + Number) << Number;\n    v10 = (int)(v9 * ALFO_Step(a2 + Number)) >> Number;\n    *(_WORD *)RBUFDST = v10;\n    v11 = (int)(v10 * EG_Update(a2)) >> Number;\n    *(_DWORD *)bufl1 +=\n        (v11 * *(_DWORD *)(a1 + Number * (a3 + Number L) + Number)) >> Number;\n    *(_DWORD *)bufr1 +=\n        (v11 * *(_DWORD *)(a1 + Number * (a3 + Number L) + Number)) >> Number;\n    bufl1 += Number L;\n    bufr1 += Number L;\n  }\n  return result;\n}", "code_t": "void __cdecl SCSP_Update0111(_SCSP *SCSP, _SLOT *slot, unsigned int Enc,\n                             unsigned int nsamples) {\n  int v4;\n  int <span class=\"supfact\">step</span>;\n  int sample;\n  int samplea;\n  int sampleb;\n  unsigned int <span class=\"supfact\">s</span>;\n  for (<span class=\"supfact\">s</span> = Number; <span class=\"supfact\">s</span> < nsamples;\n       ++<span class=\"supfact\">s</span>) {\n    <span class=\"supfact\">step</span> = slot-><span class=\"supfact\">step</span>;\n    if (!slot->active)\n      break;\n    v4 = PLFO_Step(&slot->PLFO);\n    sample = *(__int16 *)&slot->base[(slot->cur_addr >> Number) & Number];\n    slot->cur_addr += (<span class=\"supfact\">step</span> * v4) >> Number;\n    if (slot->cur_addr >> Number >= slot->udata.data[Number])\n      slot->cur_addr = slot->udata.data[Number] << Number;\n    samplea = (sample * ALFO_Step(&slot->ALFO)) >> Number;\n    *RBUFDST = samplea;\n    sampleb = (samplea * EG_Update(slot)) >> Number;\n    *bufl1 += (sampleb * SCSP->LPANTABLE[Enc]) >> Number;\n    *bufr1 += (sampleb * SCSP->RPANTABLE[Enc]) >> Number;\n    ++bufl1;\n    ++bufr1;\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "s", "ref_type": "unsigned int"}, {"name": "v8", "type": "int", "ref_name": "step", "ref_type": "int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "jerlich", "repo_name": "rt-fsm", "path": "jerlich/rt-fsm/60df64061cfd42fe7c8f3d2633b13e050d54a7a1f46b86639c967bca55a358c8", "path_in_repo": "jerlich/rt-fsm/addons/SoundTrig/SoundServer.o", "objdump": "0000000000000000 <_ZNKSt8_Rb_treeIjSt4pairIKjN14AbstractUserSM9SoundFileEESt10_Select1stIS4_ESt4lessIjESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 38          \tsub    $0x38,%rsp\n   9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  11:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  15:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  19:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  1e:\t74 58                \tje     78 <_ZNKSt8_Rb_treeIjSt4pairIKjN14AbstractUserSM9SoundFileEESt10_Select1stIS4_ESt4lessIjESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x78>\n  20:\t48 8b 5d d8          \tmov    -0x28(%rbp),%rbx\n  24:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  28:\t48 89 c7             \tmov    %rax,%rdi\n  2b:\te8 00 00 00 00       \tcallq  30 <_ZNKSt8_Rb_treeIjSt4pairIKjN14AbstractUserSM9SoundFileEESt10_Select1stIS4_ESt4lessIjESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x30>\n  30:\t48 89 c1             \tmov    %rax,%rcx\n  33:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  37:\t48 89 c2             \tmov    %rax,%rdx\n  3a:\t48 89 ce             \tmov    %rcx,%rsi\n  3d:\t48 89 df             \tmov    %rbx,%rdi\n  40:\te8 00 00 00 00       \tcallq  45 <_ZNKSt8_Rb_treeIjSt4pairIKjN14AbstractUserSM9SoundFileEESt10_Select1stIS4_ESt4lessIjESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x45>\n  45:\t83 f0 01             \txor    $0x1,%eax\n  48:\t84 c0                \ttest   %al,%al\n  4a:\t74 1a                \tje     66 <_ZNKSt8_Rb_treeIjSt4pairIKjN14AbstractUserSM9SoundFileEESt10_Select1stIS4_ESt4lessIjESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x66>\n  4c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  50:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  54:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  58:\t48 89 c7             \tmov    %rax,%rdi\n  5b:\te8 00 00 00 00       \tcallq  60 <_ZNKSt8_Rb_treeIjSt4pairIKjN14AbstractUserSM9SoundFileEESt10_Select1stIS4_ESt4lessIjESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x60>\n  60:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  64:\teb b3                \tjmp    19 <_ZNKSt8_Rb_treeIjSt4pairIKjN14AbstractUserSM9SoundFileEESt10_Select1stIS4_ESt4lessIjESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x19>\n  66:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  6a:\t48 89 c7             \tmov    %rax,%rdi\n  6d:\te8 00 00 00 00       \tcallq  72 <_ZNKSt8_Rb_treeIjSt4pairIKjN14AbstractUserSM9SoundFileEESt10_Select1stIS4_ESt4lessIjESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x72>\n  72:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  76:\teb a1                \tjmp    19 <_ZNKSt8_Rb_treeIjSt4pairIKjN14AbstractUserSM9SoundFileEESt10_Select1stIS4_ESt4lessIjESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x19>\n  78:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  7c:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  80:\t48 89 d6             \tmov    %rdx,%rsi\n  83:\t48 89 c7             \tmov    %rax,%rdi\n  86:\te8 00 00 00 00       \tcallq  8b <_ZNKSt8_Rb_treeIjSt4pairIKjN14AbstractUserSM9SoundFileEESt10_Select1stIS4_ESt4lessIjESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x8b>\n  8b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  8f:\t48 83 c4 38          \tadd    $0x38,%rsp\n  93:\t5b                   \tpop    %rbx\n  94:\t5d                   \tpop    %rbp\n  95:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std _Rb_tree<\n    unsigned int, std pair<unsigned int const, AbstractUserSM SoundFile>,\n    std _Select1st<std pair<unsigned int const, AbstractUserSM SoundFile>>,\n    std less<unsigned int>,\n    std allocator<std pair<unsigned int const, AbstractUserSM SoundFile>>>\n_M_lower_bound(__int64 a1, __int64 a2, __int64 a3, _DWORD *a4) {\n  _DWORD *v4;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  while (a2) {\n    v4 = (_DWORD *)std _Rb_tree<\n        unsigned int, std pair<unsigned int const, AbstractUserSM SoundFile>,\n        std _Select1st<std pair<unsigned int const, AbstractUserSM SoundFile>>,\n        std less<unsigned int>,\n        std allocator<std pair<unsigned int const, AbstractUserSM SoundFile>>>\n        _S_key(a2);\n    if (!std less<unsigned int> operator()(a1, v4, a4)) {\n      a3 = a2;\n      a2 = std _Rb_tree<\n          unsigned int, std pair<unsigned int const, AbstractUserSM SoundFile>,\n          std _Select1st<\n              std pair<unsigned int const, AbstractUserSM SoundFile>>,\n          std less<unsigned int>,\n          std allocator<std pair<unsigned int const, AbstractUserSM SoundFile>>>\n          _S_left(a2);\n    } else {\n      a2 = std _Rb_tree<\n          unsigned int, std pair<unsigned int const, AbstractUserSM SoundFile>,\n          std _Select1st<\n              std pair<unsigned int const, AbstractUserSM SoundFile>>,\n          std less<unsigned int>,\n          std allocator<std pair<unsigned int const, AbstractUserSM SoundFile>>>\n          _S_right(a2);\n    }\n  }\n  std _Rb_tree_const_iterator<\n      std pair<unsigned int const, AbstractUserSM SoundFile>>\n      _Rb_tree_const_iterator(<span class=\"supfact\">v9</span>, a3);\n  return <span class=\"supfact\">v9</span>[Number];\n}", "code_t": "std _Rb_tree<\n    unsigned int, std pair<unsigned int const, AbstractUserSM SoundFile>,\n    std _Select1st<std pair<unsigned int const, AbstractUserSM SoundFile>>,\n    std less<unsigned int>,\n    std allocator<std pair<unsigned int const, AbstractUserSM SoundFile>>>\n    const_iterator __cdecl std _Rb_tree<\n        unsigned int, std pair<unsigned int const, AbstractUserSM SoundFile>,\n        std _Select1st<std pair<unsigned int const, AbstractUserSM SoundFile>>,\n        std less<unsigned int>,\n        std allocator<std pair<unsigned int const, AbstractUserSM SoundFile>>>\n    _M_lower_bound(\n        const std _Rb_tree<\n            unsigned int,\n            std pair<unsigned int const, AbstractUserSM SoundFile>,\n            std _Select1st<\n                std pair<unsigned int const, AbstractUserSM SoundFile>>,\n            std less<unsigned int>,\n            std allocator<std pair<unsigned int const,\n                                   AbstractUserSM SoundFile>>> *const this,\n        std _Rb_tree<unsigned int,\n                     std pair<unsigned int const, AbstractUserSM SoundFile>,\n                     std _Select1st<std pair<unsigned int const,\n                                             AbstractUserSM SoundFile>>,\n                     std less<unsigned int>,\n                     std allocator<std pair<unsigned int const,\n                                            AbstractUserSM SoundFile>>>\n            _Const_Link_type __x,\n        std _Rb_tree<unsigned int,\n                     std pair<unsigned int const, AbstractUserSM SoundFile>,\n                     std _Select1st<std pair<unsigned int const,\n                                             AbstractUserSM SoundFile>>,\n                     std less<unsigned int>,\n                     std allocator<std pair<unsigned int const,\n                                            AbstractUserSM SoundFile>>>\n            _Const_Base_ptr __y,\n        const unsigned int *__k) {\n  const unsigned int *v4;\n  std _Rb_tree_const_iterator<\n      std pair<unsigned int const, AbstractUserSM SoundFile>>\n      <span class=\"supfact\">v9</span>;\n  while (__x) {\n    v4 = std _Rb_tree<\n        unsigned int, std pair<unsigned int const, AbstractUserSM SoundFile>,\n        std _Select1st<std pair<unsigned int const, AbstractUserSM SoundFile>>,\n        std less<unsigned int>,\n        std allocator<std pair<unsigned int const, AbstractUserSM SoundFile>>>\n        _S_key(__x);\n    if (!std less<unsigned int> operator()(\n            (const std less<unsigned int> *const)this, v4, __k)) {\n      __y = __x;\n      __x = std _Rb_tree<\n          unsigned int, std pair<unsigned int const, AbstractUserSM SoundFile>,\n          std _Select1st<\n              std pair<unsigned int const, AbstractUserSM SoundFile>>,\n          std less<unsigned int>,\n          std allocator<std pair<unsigned int const, AbstractUserSM SoundFile>>>\n          _S_left(__x);\n    } else {\n      __x = std _Rb_tree<\n          unsigned int, std pair<unsigned int const, AbstractUserSM SoundFile>,\n          std _Select1st<\n              std pair<unsigned int const, AbstractUserSM SoundFile>>,\n          std less<unsigned int>,\n          std allocator<std pair<unsigned int const, AbstractUserSM SoundFile>>>\n          _S_right(__x);\n    }\n  }\n  std _Rb_tree_const_iterator<\n      std pair<unsigned int const, AbstractUserSM SoundFile>>\n      _Rb_tree_const_iterator(&<span class=\"supfact\">v9</span>, __y);\n  return <span class=\"supfact\">v9</span>;\n}", "var": [{"name": "v9", "type": "__int64[3]", "ref_name": "v9", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/907c02b9cc38dc04ef105bdd56a2885dc88fa872b2715431e6255e043bae9031", "path_in_repo": "madeye/GRACE/qemu-0.12.5/mipsel-softmmu/rtl8139.o", "objdump": "0000000000001cd3 <rtl8139_Cfg9346_read>:\n    1cd3:\t55                   \tpush   %rbp\n    1cd4:\t48 89 e5             \tmov    %rsp,%rbp\n    1cd7:\t48 83 ec 18          \tsub    $0x18,%rsp\n    1cdb:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1cdf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1ce3:\t0f b6 80 aa 02 00 00 \tmovzbl 0x2aa(%rax),%eax\n    1cea:\t0f b6 c0             \tmovzbl %al,%eax\n    1ced:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1cf0:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1cf3:\t25 c0 00 00 00       \tand    $0xc0,%eax\n    1cf8:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    1cfb:\t81 7d f8 80 00 00 00 \tcmpl   $0x80,-0x8(%rbp)\n    1d02:\t75 1f                \tjne    1d23 <rtl8139_Cfg9346_read+0x50>\n    1d04:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1d08:\t48 89 c7             \tmov    %rax,%rdi\n    1d0b:\te8 ce e8 ff ff       \tcallq  5de <prom9346_get_wire>\n    1d10:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    1d13:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    1d17:\t74 06                \tje     1d1f <rtl8139_Cfg9346_read+0x4c>\n    1d19:\t83 4d fc 01          \torl    $0x1,-0x4(%rbp)\n    1d1d:\teb 04                \tjmp    1d23 <rtl8139_Cfg9346_read+0x50>\n    1d1f:\t83 65 fc fe          \tandl   $0xfffffffe,-0x4(%rbp)\n    1d23:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1d26:\tc9                   \tleaveq \n    1d27:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rtl8139_Cfg9346_read(__int64 a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = *(unsigned __int8 *)(a1 + Number);\n  if ((<span class=\"supfact\">v2</span> & Number) == Number) {\n    if ((unsigned int)prom9346_get_wire(a1))\n      <span class=\"supfact\">v2</span> |= Number;\n    else\n      <span class=\"supfact\">v2</span> &= Number;\n  }\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "uint32_t __cdecl rtl8139_Cfg9346_read(RTL8139State_0 *s) {\n  uint32_t <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = s->Cfg9346;\n  if ((<span class=\"supfact\">ret</span> & Number) == Number) {\n    if (prom9346_get_wire(s))\n      <span class=\"supfact\">ret</span> |= Number;\n    else\n      <span class=\"supfact\">ret</span> &= Number;\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v2", "type": "uint32_t", "ref_name": "ret", "ref_type": "uint32_t"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "mthuurne", "repo_name": "qemu-dingoo", "path": "mthuurne/qemu-dingoo/c441749d066ed6c6a35df8c5726712744b718495d46e7274cff684004ba72cdd", "path_in_repo": "mthuurne/qemu-dingoo//sh4eb-linux-user/translate.o", "objdump": "00000000000036a6 <cpu_sh4_find_by_name>:\n    36a6:\t55                   \tpush   %rbp\n    36a7:\t48 89 e5             \tmov    %rsp,%rbp\n    36aa:\t48 83 ec 20          \tsub    $0x20,%rsp\n    36ae:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    36b2:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    36b9:\t00 00 \n    36bb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    36bf:\t31 c0                \txor    %eax,%eax\n    36c1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    36c5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    36ca:\t48 89 c7             \tmov    %rax,%rdi\n    36cd:\te8 00 00 00 00       \tcallq  36d2 <cpu_sh4_find_by_name+0x2c>\n    36d2:\t85 c0                \ttest   %eax,%eax\n    36d4:\t75 07                \tjne    36dd <cpu_sh4_find_by_name+0x37>\n    36d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    36db:\teb 50                \tjmp    372d <cpu_sh4_find_by_name+0x87>\n    36dd:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n    36e4:\teb 3a                \tjmp    3720 <cpu_sh4_find_by_name+0x7a>\n    36e6:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    36e9:\t48 98                \tcltq   \n    36eb:\t48 c1 e0 05          \tshl    $0x5,%rax\n    36ef:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    36f5:\t48 8b 10             \tmov    (%rax),%rdx\n    36f8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    36fc:\t48 89 d6             \tmov    %rdx,%rsi\n    36ff:\t48 89 c7             \tmov    %rax,%rdi\n    3702:\te8 00 00 00 00       \tcallq  3707 <cpu_sh4_find_by_name+0x61>\n    3707:\t85 c0                \ttest   %eax,%eax\n    3709:\t75 11                \tjne    371c <cpu_sh4_find_by_name+0x76>\n    370b:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    370e:\t48 98                \tcltq   \n    3710:\t48 c1 e0 05          \tshl    $0x5,%rax\n    3714:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    371a:\teb 11                \tjmp    372d <cpu_sh4_find_by_name+0x87>\n    371c:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n    3720:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    3723:\t83 f8 02             \tcmp    $0x2,%eax\n    3726:\t76 be                \tjbe    36e6 <cpu_sh4_find_by_name+0x40>\n    3728:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    372d:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    3731:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    3738:\t00 00 \n    373a:\t74 05                \tje     3741 <cpu_sh4_find_by_name+0x9b>\n    373c:\te8 00 00 00 00       \tcallq  3741 <cpu_sh4_find_by_name+0x9b>\n    3741:\tc9                   \tleaveq \n    3742:\tc3                   \tretq   ", "code_s": "char **__fastcall cpu_sh4_find_by_name(const char *a1) {\n  unsigned int <span class=\"supfact\">i</span>;\n  if (!strcasecmp(a1, String))\n    return &sh4_defs;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (!strcasecmp(a1, (&sh4_defs)[Number * (int)<span class=\"supfact\">i</span>]))\n      return &(&sh4_defs)[Number * (int)<span class=\"supfact\">i</span>];\n  }\n  return Number L;\n}", "code_t": "const sh4_def_t *__cdecl cpu_sh4_find_by_name(const char *name) {\n  unsigned int <span class=\"supfact\">i</span>;\n  if (!strcasecmp(name, String))\n    return sh4_defs;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (!strcasecmp(name, sh4_defs[<span class=\"supfact\">i</span>].name))\n      return &sh4_defs[<span class=\"supfact\">i</span>];\n  }\n  return Number L;\n}", "var": [{"name": "i", "type": "unsigned int", "ref_name": "i", "ref_type": "unsigned int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "zhasni", "repo_name": "FT_Select", "path": "zhasni/FT_Select/b2ae351695c87747c07c89c88a06308f9bfb63c5014f829958a0633c2b40120b", "path_in_repo": "zhasni/FT_Select//ft_select", "objdump": "0000000000402088 <ft_putstr_fd>:\n  402088:\t55                   \tpush   %rbp\n  402089:\t48 89 e5             \tmov    %rsp,%rbp\n  40208c:\t48 83 ec 20          \tsub    $0x20,%rsp\n  402090:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  402094:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  402097:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40209e:\teb 23                \tjmp    4020c3 <ft_putstr_fd+0x3b>\n  4020a0:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4020a3:\t48 63 d0             \tmovslq %eax,%rdx\n  4020a6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4020aa:\t48 01 d0             \tadd    %rdx,%rax\n  4020ad:\t0f b6 00             \tmovzbl (%rax),%eax\n  4020b0:\t0f be c0             \tmovsbl %al,%eax\n  4020b3:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  4020b6:\t89 d6                \tmov    %edx,%esi\n  4020b8:\t89 c7                \tmov    %eax,%edi\n  4020ba:\te8 d5 00 00 00       \tcallq  402194 <ft_putchar_fd>\n  4020bf:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4020c3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4020c6:\t48 63 d0             \tmovslq %eax,%rdx\n  4020c9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4020cd:\t48 01 d0             \tadd    %rdx,%rax\n  4020d0:\t0f b6 00             \tmovzbl (%rax),%eax\n  4020d3:\t84 c0                \ttest   %al,%al\n  4020d5:\t75 c9                \tjne    4020a0 <ft_putstr_fd+0x18>\n  4020d7:\t90                   \tnop\n  4020d8:\t90                   \tnop\n  4020d9:\tc9                   \tleaveq \n  4020da:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ft_putstr_fd(__int64 a1, unsigned int a2) {\n  __int64 result;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = *(unsigned __int8 *)(<span class=\"supfact\">i</span> + a1);\n    if (!(_BYTE)result)\n      break;\n    ft_putchar_fd((unsigned int)*(char *)(<span class=\"supfact\">i</span> + a1), a2);\n  }\n  return result;\n}", "code_t": "void __cdecl ft_putstr_fd(const char *s, int fd) {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; s[<span class=\"supfact\">i</span>]; ++<span class=\"supfact\">i</span>)\n    ft_putchar_fd(s[<span class=\"supfact\">i</span>], fd);\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "bboozzoo", "repo_name": "qemu-power", "path": "bboozzoo/qemu-power/c19ec2a8c7e43af3873bcc8fbe911c5c5ed8a0e2c272d4a9f02e6f0f96d78ddf", "path_in_repo": "bboozzoo/qemu-power//sh4-softmmu/monitor.o", "objdump": "000000000000166b <do_info>:\n    166b:\t55                   \tpush   %rbp\n    166c:\t48 89 e5             \tmov    %rsp,%rbp\n    166f:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1673:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1677:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    167b:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    167f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1686:\t00 00 \n    1688:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    168c:\t31 c0                \txor    %eax,%eax\n    168e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1692:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1697:\t48 89 c7             \tmov    %rax,%rdi\n    169a:\te8 00 00 00 00       \tcallq  169f <do_info+0x34>\n    169f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    16a3:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    16a8:\t75 2d                \tjne    16d7 <do_info+0x6c>\n    16aa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    16ae:\t48 89 c7             \tmov    %rax,%rdi\n    16b1:\te8 b9 ec ff ff       \tcallq  36f <monitor_ctrl_mode>\n    16b6:\t85 c0                \ttest   %eax,%eax\n    16b8:\t0f 84 b8 01 00 00    \tje     1876 <do_info+0x20b>\n    16be:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    16c3:\tba 65 02 00 00       \tmov    $0x265,%edx\n    16c8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    16cd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    16d2:\te8 00 00 00 00       \tcallq  16d7 <do_info+0x6c>\n    16d7:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    16de:\t00 \n    16df:\teb 1f                \tjmp    1700 <do_info+0x95>\n    16e1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    16e5:\t48 8b 10             \tmov    (%rax),%rdx\n    16e8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    16ec:\t48 89 d6             \tmov    %rdx,%rsi\n    16ef:\t48 89 c7             \tmov    %rax,%rdi\n    16f2:\te8 df f8 ff ff       \tcallq  fd6 <compare_cmd>\n    16f7:\t85 c0                \ttest   %eax,%eax\n    16f9:\t75 13                \tjne    170e <do_info+0xa3>\n    16fb:\t48 83 45 e8 38       \taddq   $0x38,-0x18(%rbp)\n    1700:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1704:\t48 8b 00             \tmov    (%rax),%rax\n    1707:\t48 85 c0             \ttest   %rax,%rax\n    170a:\t75 d5                \tjne    16e1 <do_info+0x76>\n    170c:\teb 01                \tjmp    170f <do_info+0xa4>\n    170e:\t90                   \tnop\n    170f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1713:\t48 8b 00             \tmov    (%rax),%rax\n    1716:\t48 85 c0             \ttest   %rax,%rax\n    1719:\t75 43                \tjne    175e <do_info+0xf3>\n    171b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    171f:\t48 89 c7             \tmov    %rax,%rdi\n    1722:\te8 48 ec ff ff       \tcallq  36f <monitor_ctrl_mode>\n    1727:\t85 c0                \ttest   %eax,%eax\n    1729:\t0f 84 4a 01 00 00    \tje     1879 <do_info+0x20e>\n    172f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1733:\t49 89 c0             \tmov    %rax,%r8\n    1736:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    173b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1740:\tbe 70 02 00 00       \tmov    $0x270,%esi\n    1745:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    174a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    174f:\te8 00 00 00 00       \tcallq  1754 <do_info+0xe9>\n    1754:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1759:\te9 32 01 00 00       \tjmpq   1890 <do_info+0x225>\n    175e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1762:\t48 89 c7             \tmov    %rax,%rdi\n    1765:\te8 44 f3 ff ff       \tcallq  aae <monitor_handler_is_async>\n    176a:\t84 c0                \ttest   %al,%al\n    176c:\t74 53                \tje     17c1 <do_info+0x156>\n    176e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1772:\t48 89 c7             \tmov    %rax,%rdi\n    1775:\te8 f5 eb ff ff       \tcallq  36f <monitor_ctrl_mode>\n    177a:\t85 c0                \ttest   %eax,%eax\n    177c:\t74 15                \tje     1793 <do_info+0x128>\n    177e:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1782:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1786:\t48 89 d6             \tmov    %rdx,%rsi\n    1789:\t48 89 c7             \tmov    %rax,%rdi\n    178c:\te8 32 fd ff ff       \tcallq  14c3 <qmp_async_info_handler>\n    1791:\teb 13                \tjmp    17a6 <do_info+0x13b>\n    1793:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1797:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    179b:\t48 89 d6             \tmov    %rdx,%rsi\n    179e:\t48 89 c7             \tmov    %rax,%rdi\n    17a1:\te8 1f fe ff ff       \tcallq  15c5 <user_async_info_handler>\n    17a6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    17ab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    17b0:\te8 00 00 00 00       \tcallq  17b5 <do_info+0x14a>\n    17b5:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    17b9:\t48 89 02             \tmov    %rax,(%rdx)\n    17bc:\te9 ae 00 00 00       \tjmpq   186f <do_info+0x204>\n    17c1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    17c5:\t48 89 c7             \tmov    %rax,%rdi\n    17c8:\te8 9f f2 ff ff       \tcallq  a6c <monitor_handler_ported>\n    17cd:\t85 c0                \ttest   %eax,%eax\n    17cf:\t74 51                \tje     1822 <do_info+0x1b7>\n    17d1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    17d5:\t48 8b 48 28          \tmov    0x28(%rax),%rcx\n    17d9:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    17dd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    17e1:\t48 89 d6             \tmov    %rdx,%rsi\n    17e4:\t48 89 c7             \tmov    %rax,%rdi\n    17e7:\tff d1                \tcallq  *%rcx\n    17e9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    17ed:\t48 89 c7             \tmov    %rax,%rdi\n    17f0:\te8 7a eb ff ff       \tcallq  36f <monitor_ctrl_mode>\n    17f5:\t85 c0                \ttest   %eax,%eax\n    17f7:\t75 76                \tjne    186f <do_info+0x204>\n    17f9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    17fd:\t48 8b 00             \tmov    (%rax),%rax\n    1800:\t48 85 c0             \ttest   %rax,%rax\n    1803:\t74 6a                \tje     186f <do_info+0x204>\n    1805:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1809:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n    180d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1811:\t48 8b 10             \tmov    (%rax),%rdx\n    1814:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1818:\t48 89 d6             \tmov    %rdx,%rsi\n    181b:\t48 89 c7             \tmov    %rax,%rdi\n    181e:\tff d1                \tcallq  *%rcx\n    1820:\teb 4d                \tjmp    186f <do_info+0x204>\n    1822:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1826:\t48 89 c7             \tmov    %rax,%rdi\n    1829:\te8 41 eb ff ff       \tcallq  36f <monitor_ctrl_mode>\n    182e:\t85 c0                \ttest   %eax,%eax\n    1830:\t74 2c                \tje     185e <do_info+0x1f3>\n    1832:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1836:\t49 89 c0             \tmov    %rax,%r8\n    1839:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    183e:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1843:\tbe 90 02 00 00       \tmov    $0x290,%esi\n    1848:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    184d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1852:\te8 00 00 00 00       \tcallq  1857 <do_info+0x1ec>\n    1857:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    185c:\teb 32                \tjmp    1890 <do_info+0x225>\n    185e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1862:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n    1866:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    186a:\t48 89 c7             \tmov    %rax,%rdi\n    186d:\tff d2                \tcallq  *%rdx\n    186f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1874:\teb 1a                \tjmp    1890 <do_info+0x225>\n    1876:\t90                   \tnop\n    1877:\teb 01                \tjmp    187a <do_info+0x20f>\n    1879:\t90                   \tnop\n    187a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    187e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1883:\t48 89 c7             \tmov    %rax,%rdi\n    1886:\te8 d7 f8 ff ff       \tcallq  1162 <help_cmd>\n    188b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1890:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1894:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    189b:\t00 00 \n    189d:\t74 05                \tje     18a4 <do_info+0x239>\n    189f:\te8 00 00 00 00       \tcallq  18a4 <do_info+0x239>\n    18a4:\tc9                   \tleaveq \n    18a5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_info(__int64 a1, __int64 a2, _QWORD *a3) {\n  char **<span class=\"supfact\">i</span>;\n  const char *<span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = (const char *)qdict_get_try_str(a2, String);\n  if (!<span class=\"supfact\">v6</span>) {\n    if ((unsigned int)monitor_ctrl_mode(a1))\n      _assert_fail(String, String, Number, String);\n  LABEL_24:\n    help_cmd(a1, String);\n    return Number L;\n  }\n  for (<span class=\"supfact\">i</span> = &info_cmds;\n       *<span class=\"supfact\">i</span> &&\n       !(unsigned int)compare_cmd(<span class=\"supfact\">v6</span>, *<span class=\"supfact\">i</span>);\n       <span class=\"supfact\">i</span> += Number)\n    ;\n  if (!*<span class=\"supfact\">i</span>) {\n    if ((unsigned int)monitor_ctrl_mode(a1)) {\n      qerror_report_internal(String, Number L, String, String,\n                             <span class=\"supfact\">v6</span>);\n      return Number;\n    }\n    goto LABEL_24;\n  }\n  if (monitor_handler_is_async((__int64)<span class=\"supfact\">i</span>)) {\n    if ((unsigned int)monitor_ctrl_mode(a1))\n      qmp_async_info_handler(a1, (__int64)<span class=\"supfact\">i</span>);\n    else\n      user_async_info_handler(a1, (__int64)<span class=\"supfact\">i</span>);\n    *a3 = qobject_from_jsonf(String);\n  } else if (monitor_handler_ported((__int64)<span class=\"supfact\">i</span>)) {\n    ((void(__fastcall *)(__int64, _QWORD *))<span class=\"supfact\">i</span>[Number])(a1, a3);\n    if (!(unsigned int)monitor_ctrl_mode(a1) && *a3)\n      ((void(__fastcall *)(__int64, _QWORD))<span class=\"supfact\">i</span>[Number])(a1, *a3);\n  } else {\n    if ((unsigned int)monitor_ctrl_mode(a1)) {\n      qerror_report_internal(String, Number L, String, String,\n                             <span class=\"supfact\">v6</span>);\n      return Number;\n    }\n    ((void(__fastcall *)(__int64))<span class=\"supfact\">i</span>[Number])(a1);\n  }\n  return Number L;\n}", "code_t": "int __cdecl do_info(Monitor_0 *mon, const QDict_0 *qdict,\n                    QObject_0 **ret_data) {\n  const mon_cmd_t_0 *<span class=\"supfact\">cmd</span>;\n  const char *<span class=\"supfact\">item</span>;\n  <span class=\"supfact\">item</span> = (const char *)qdict_get_try_str(qdict, String);\n  if (!<span class=\"supfact\">item</span>) {\n    if (monitor_ctrl_mode(mon))\n      _assert_fail(String, String, Number, String);\n  help:\n    help_cmd(mon, String);\n    return Number;\n  }\n  for (<span class=\"supfact\">cmd</span> = info_cmds;\n       <span class=\"supfact\">cmd</span>->name &&\n       !compare_cmd(<span class=\"supfact\">item</span>, <span class=\"supfact\">cmd</span>->name);\n       ++<span class=\"supfact\">cmd</span>)\n    ;\n  if (!<span class=\"supfact\">cmd</span>->name) {\n    if (monitor_ctrl_mode(mon)) {\n      qerror_report_internal(String, Number L, String, String,\n                             <span class=\"supfact\">item</span>);\n      return Number;\n    }\n    goto help;\n  }\n  if (monitor_handler_is_async(<span class=\"supfact\">cmd</span>)) {\n    if (monitor_ctrl_mode(mon))\n      qmp_async_info_handler(mon, <span class=\"supfact\">cmd</span>);\n    else\n      user_async_info_handler(mon, <span class=\"supfact\">cmd</span>);\n    *ret_data = (QObject_0 *)qobject_from_jsonf(String);\n  } else if (monitor_handler_ported(<span class=\"supfact\">cmd</span>)) {\n    <span class=\"supfact\">cmd</span>->mhandler.info_new(mon, ret_data);\n    if (!monitor_ctrl_mode(mon) && *ret_data)\n      <span class=\"supfact\">cmd</span>->user_print(mon, *ret_data);\n  } else {\n    if (monitor_ctrl_mode(mon)) {\n      qerror_report_internal(String, Number L, String, String,\n                             <span class=\"supfact\">item</span>);\n      return Number;\n    }\n    <span class=\"supfact\">cmd</span>->mhandler.info(mon);\n  }\n  return Number;\n}", "var": [{"name": "v6", "type": "const char *", "ref_name": "item", "ref_type": "const char *"}, {"name": "i", "type": "const mon_cmd_t_0 *", "ref_name": "cmd", "ref_type": "const mon_cmd_t_0 *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "gabrielleLQX", "repo_name": "SAM3_codeqemu", "path": "gabrielleLQX/SAM3_codeqemu/5249ae719b2746ab2a670ba7fc53cb62aa9bb901ea25d231de1f3f6aade5c00f", "path_in_repo": "gabrielleLQX/SAM3_codeqemu//hw/intc/pl190.o", "objdump": "0000000000000877 <pl190_init>:\n 877:\t55                   \tpush   %rbp\n 878:\t48 89 e5             \tmov    %rsp,%rbp\n 87b:\t48 83 ec 30          \tsub    $0x30,%rsp\n 87f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 883:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 88a:\t00 00 \n 88c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 890:\t31 c0                \txor    %eax,%eax\n 892:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 896:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 89d <pl190_init+0x26>\n 89d:\tb9 f0 00 00 00       \tmov    $0xf0,%ecx\n 8a2:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 8a9 <pl190_init+0x32>\n 8a9:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8b0 <pl190_init+0x39>\n 8b0:\t48 89 c7             \tmov    %rax,%rdi\n 8b3:\te8 00 00 00 00       \tcallq  8b8 <pl190_init+0x41>\n 8b8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 8bc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 8c0:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 8c7 <pl190_init+0x50>\n 8c7:\tb9 f1 00 00 00       \tmov    $0xf1,%ecx\n 8cc:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 8d3 <pl190_init+0x5c>\n 8d3:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8da <pl190_init+0x63>\n 8da:\t48 89 c7             \tmov    %rax,%rdi\n 8dd:\te8 00 00 00 00       \tcallq  8e2 <pl190_init+0x6b>\n 8e2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 8e6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 8ea:\t48 8d b8 28 23 00 00 \tlea    0x2328(%rax),%rdi\n 8f1:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 8f5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 8f9:\t41 b9 00 10 00 00    \tmov    $0x1000,%r9d\n 8ff:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 906 <pl190_init+0x8f>\n 906:\t48 89 d1             \tmov    %rdx,%rcx\n 909:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 910 <pl190_init+0x99>\n 910:\t48 89 c6             \tmov    %rax,%rsi\n 913:\te8 00 00 00 00       \tcallq  918 <pl190_init+0xa1>\n 918:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 91c:\t48 8d 90 28 23 00 00 \tlea    0x2328(%rax),%rdx\n 923:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 927:\t48 89 d6             \tmov    %rdx,%rsi\n 92a:\t48 89 c7             \tmov    %rax,%rdi\n 92d:\te8 00 00 00 00       \tcallq  932 <pl190_init+0xbb>\n 932:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 936:\tba 20 00 00 00       \tmov    $0x20,%edx\n 93b:\t48 8d 35 e7 f7 ff ff \tlea    -0x819(%rip),%rsi        # 129 <pl190_set_irq>\n 942:\t48 89 c7             \tmov    %rax,%rdi\n 945:\te8 00 00 00 00       \tcallq  94a <pl190_init+0xd3>\n 94a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 94e:\t48 8d 90 e8 24 00 00 \tlea    0x24e8(%rax),%rdx\n 955:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 959:\t48 89 d6             \tmov    %rdx,%rsi\n 95c:\t48 89 c7             \tmov    %rax,%rdi\n 95f:\te8 00 00 00 00       \tcallq  964 <pl190_init+0xed>\n 964:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 968:\t48 8d 90 f0 24 00 00 \tlea    0x24f0(%rax),%rdx\n 96f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 973:\t48 89 d6             \tmov    %rdx,%rsi\n 976:\t48 89 c7             \tmov    %rax,%rdi\n 979:\te8 00 00 00 00       \tcallq  97e <pl190_init+0x107>\n 97e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 983:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 987:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 98e:\t00 00 \n 990:\t74 05                \tje     997 <pl190_init+0x120>\n 992:\te8 00 00 00 00       \tcallq  997 <pl190_init+0x120>\n 997:\tc9                   \tleaveq \n 998:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pl190_init(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v2</span> =\n      object_dynamic_cast_assert(a1, String, String, Number L, String);\n  <span class=\"supfact\">v3</span> = object_dynamic_cast_assert(<span class=\"supfact\">v2</span>, String,\n                                                  String, Number L, String);\n  memory_region_init_io(<span class=\"supfact\">v3</span> + Number, <span class=\"supfact\">v3</span>,\n                        pl190_ops, <span class=\"supfact\">v3</span>, String, Number L);\n  sysbus_init_mmio(a1, <span class=\"supfact\">v3</span> + Number);\n  qdev_init_gpio_in(<span class=\"supfact\">v2</span>, pl190_set_irq, Number L);\n  sysbus_init_irq(a1, <span class=\"supfact\">v3</span> + Number);\n  sysbus_init_irq(a1, <span class=\"supfact\">v3</span> + Number);\n  return Number L;\n}", "code_t": "int __cdecl pl190_init(SysBusDevice_0 *sbd) {\n  DeviceState_0 *<span class=\"supfact\">dev</span>;\n  PL190State_0 *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">dev</span> = (DeviceState_0 *)object_dynamic_cast_assert(\n      sbd, String, String, Number L, String);\n  <span class=\"supfact\">s</span> = (PL190State_0 *)object_dynamic_cast_assert(\n      <span class=\"supfact\">dev</span>, String, String, Number L, String);\n  memory_region_init_io(&<span class=\"supfact\">s</span>->iomem, <span class=\"supfact\">s</span>,\n                        &pl190_ops, <span class=\"supfact\">s</span>, String, Number L);\n  sysbus_init_mmio(sbd, &<span class=\"supfact\">s</span>->iomem);\n  qdev_init_gpio_in(<span class=\"supfact\">dev</span>, pl190_set_irq, Number L);\n  sysbus_init_irq(sbd, &<span class=\"supfact\">s</span>->irq);\n  sysbus_init_irq(sbd, &<span class=\"supfact\">s</span>->fiq);\n  return Number;\n}", "var": [{"name": "v3", "type": "PL080State_0 *", "ref_name": "s", "ref_type": "PL190State_0 *"}, {"name": "v2", "type": "SysBusDevice_0 *", "ref_name": "dev", "ref_type": "DeviceState_0 *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "grivon", "repo_name": "yabusame-qemu-dpt", "path": "grivon/yabusame-qemu-dpt/458db2bacf2a2e6cc83bce8332b698052f975b2fa7d9314b11ffb2677e778a06", "path_in_repo": "grivon/yabusame-qemu-dpt//microblazeel-linux-user/cpu-exec.o", "objdump": "000000000000049c <tb_find_slow>:\n 49c:\t55                   \tpush   %rbp\n 49d:\t48 89 e5             \tmov    %rsp,%rbp\n 4a0:\t48 83 ec 50          \tsub    $0x50,%rsp\n 4a4:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 4a8:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n 4ab:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n 4ae:\t48 89 4d b8          \tmov    %rcx,-0x48(%rbp)\n 4b2:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 4b9:\t00 00 \n 4bb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 4bf:\t31 c0                \txor    %eax,%eax\n 4c1:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 4cb <tb_find_slow+0x2f>\n 4c8:\t00 00 00 \n 4cb:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n 4ce:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 4d2:\t89 d6                \tmov    %edx,%esi\n 4d4:\t48 89 c7             \tmov    %rax,%rdi\n 4d7:\te8 d3 fd ff ff       \tcallq  2af <get_page_addr_code>\n 4dc:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n 4df:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 4e2:\t25 00 f0 ff ff       \tand    $0xfffff000,%eax\n 4e7:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n 4ea:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 4ed:\t89 c7                \tmov    %eax,%edi\n 4ef:\te8 24 fc ff ff       \tcallq  118 <tb_phys_hash_func>\n 4f4:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n 4f7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 4fa:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 501:\t00 \n 502:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 509 <tb_find_slow+0x6d>\n 509:\t48 01 d0             \tadd    %rdx,%rax\n 50c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 510:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 514:\t48 8b 00             \tmov    (%rax),%rax\n 517:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 51b:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 520:\t74 7e                \tje     5a0 <tb_find_slow+0x104>\n 522:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 526:\t8b 00                \tmov    (%rax),%eax\n 528:\t39 45 c4             \tcmp    %eax,-0x3c(%rbp)\n 52b:\t75 62                \tjne    58f <tb_find_slow+0xf3>\n 52d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 531:\t8b 40 38             \tmov    0x38(%rax),%eax\n 534:\t39 45 d8             \tcmp    %eax,-0x28(%rbp)\n 537:\t75 56                \tjne    58f <tb_find_slow+0xf3>\n 539:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 53d:\t8b 40 04             \tmov    0x4(%rax),%eax\n 540:\t39 45 c0             \tcmp    %eax,-0x40(%rbp)\n 543:\t75 4a                \tjne    58f <tb_find_slow+0xf3>\n 545:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 549:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 54d:\t48 39 45 b8          \tcmp    %rax,-0x48(%rbp)\n 551:\t75 3c                \tjne    58f <tb_find_slow+0xf3>\n 553:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 557:\t8b 40 3c             \tmov    0x3c(%rax),%eax\n 55a:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 55d:\t74 66                \tje     5c5 <tb_find_slow+0x129>\n 55f:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 562:\t25 00 f0 ff ff       \tand    $0xfffff000,%eax\n 567:\t05 00 10 00 00       \tadd    $0x1000,%eax\n 56c:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n 56f:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n 572:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 576:\t89 d6                \tmov    %edx,%esi\n 578:\t48 89 c7             \tmov    %rax,%rdi\n 57b:\te8 2f fd ff ff       \tcallq  2af <get_page_addr_code>\n 580:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 583:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 587:\t8b 40 3c             \tmov    0x3c(%rax),%eax\n 58a:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n 58d:\t74 39                \tje     5c8 <tb_find_slow+0x12c>\n 58f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 593:\t48 83 c0 20          \tadd    $0x20,%rax\n 597:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 59b:\te9 70 ff ff ff       \tjmpq   510 <tb_find_slow+0x74>\n 5a0:\t90                   \tnop\n 5a1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 5a5:\t89 c1                \tmov    %eax,%ecx\n 5a7:\t8b 55 c0             \tmov    -0x40(%rbp),%edx\n 5aa:\t8b 75 c4             \tmov    -0x3c(%rbp),%esi\n 5ad:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 5b1:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 5b7:\t48 89 c7             \tmov    %rax,%rdi\n 5ba:\te8 00 00 00 00       \tcallq  5bf <tb_find_slow+0x123>\n 5bf:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 5c3:\teb 04                \tjmp    5c9 <tb_find_slow+0x12d>\n 5c5:\t90                   \tnop\n 5c6:\teb 01                \tjmp    5c9 <tb_find_slow+0x12d>\n 5c8:\t90                   \tnop\n 5c9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 5cd:\t48 8b 00             \tmov    (%rax),%rax\n 5d0:\t48 85 c0             \ttest   %rax,%rax\n 5d3:\t0f 95 c0             \tsetne  %al\n 5d6:\t0f b6 c0             \tmovzbl %al,%eax\n 5d9:\t48 85 c0             \ttest   %rax,%rax\n 5dc:\t74 47                \tje     625 <tb_find_slow+0x189>\n 5de:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 5e2:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n 5e6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 5ea:\t48 89 10             \tmov    %rdx,(%rax)\n 5ed:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 5f0:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 5f7:\t00 \n 5f8:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 5ff <tb_find_slow+0x163>\n 5ff:\t48 8b 14 02          \tmov    (%rdx,%rax,1),%rdx\n 603:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 607:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n 60b:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 60e:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n 615:\t00 \n 616:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 61d <tb_find_slow+0x181>\n 61d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 621:\t48 89 04 11          \tmov    %rax,(%rcx,%rdx,1)\n 625:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 628:\t89 c7                \tmov    %eax,%edi\n 62a:\te8 98 fa ff ff       \tcallq  c7 <tb_jmp_cache_hash_func>\n 62f:\t89 c2                \tmov    %eax,%edx\n 631:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 635:\t89 d2                \tmov    %edx,%edx\n 637:\t48 8d 4a 2e          \tlea    0x2e(%rdx),%rcx\n 63b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 63f:\t48 89 14 c8          \tmov    %rdx,(%rax,%rcx,8)\n 643:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 647:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n 64b:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n 652:\t00 00 \n 654:\t74 05                \tje     65b <tb_find_slow+0x1bf>\n 656:\te8 00 00 00 00       \tcallq  65b <tb_find_slow+0x1bf>\n 65b:\tc9                   \tleaveq \n 65c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tb_find_slow(__int64 a1, unsigned int a2, unsigned int a3,\n                                __int64 a4) {\n  unsigned int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 *<span class=\"supfact\">i</span>;\n  tb_invalidated_flag = Number;\n  <span class=\"supfact\">v7</span> = get_page_addr_code(a1, a2);\n  <span class=\"supfact\">v8</span> = tb_phys_hash_func(<span class=\"supfact\">v7</span>);\n  for (<span class=\"supfact\">i</span> = &tb_phys_hash[<span class=\"supfact\">v8</span>];;\n       <span class=\"supfact\">i</span> = (__int64 *)(<span class=\"supfact\">v9</span> + Number)) {\n    <span class=\"supfact\">v9</span> = *<span class=\"supfact\">i</span>;\n    if (!*<span class=\"supfact\">i</span>)\n      break;\n    if (a2 == *(_DWORD *)<span class=\"supfact\">v9</span> &&\n        (<span class=\"supfact\">v7</span> & Number) ==\n            *(_DWORD *)(<span class=\"supfact\">v9</span> + Number) &&\n        a3 == *(_DWORD *)(<span class=\"supfact\">v9</span> + Number) &&\n        a4 == *(_QWORD *)(<span class=\"supfact\">v9</span> + Number) &&\n        (*(_DWORD *)(<span class=\"supfact\">v9</span> + Number) == Number ||\n         (unsigned int)get_page_addr_code(a1, (a2 & Number) + Number) ==\n             *(_DWORD *)(<span class=\"supfact\">v9</span> + Number))) {\n      goto LABEL_11;\n    }\n  }\n  <span class=\"supfact\">v9</span> = tb_gen_code(a1, a2, a3, (unsigned int)a4, Number L);\nLABEL_11:\n  if (*<span class=\"supfact\">i</span>) {\n    *<span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">v9</span> + Number);\n    *(_QWORD *)(<span class=\"supfact\">v9</span> + Number) = tb_phys_hash[<span class=\"supfact\">v8</span>];\n    tb_phys_hash[<span class=\"supfact\">v8</span>] = <span class=\"supfact\">v9</span>;\n  }\n  *(_QWORD *)(a1 + Number * ((unsigned int)tb_jmp_cache_hash_func(a2) +\n                             Number L)) = <span class=\"supfact\">v9</span>;\n  return <span class=\"supfact\">v9</span>;\n}", "code_t": "TranslationBlock_0 *__cdecl tb_find_slow(CPUMBState *env, target_ulong pc,\n                                         target_ulong cs_base, uint64_t flags) {\n  tb_page_addr_t <span class=\"supfact\">phys_pc</span>;\n  unsigned int <span class=\"supfact\">h</span>;\n  TranslationBlock_0 *<span class=\"supfact\">tb</span>;\n  TranslationBlock_0 **<span class=\"supfact\">ptb1</span>;\n  tb_invalidated_flag = Number;\n  <span class=\"supfact\">phys_pc</span> = get_page_addr_code(env, pc);\n  <span class=\"supfact\">h</span> = tb_phys_hash_func(<span class=\"supfact\">phys_pc</span>);\n  for (<span class=\"supfact\">ptb1</span> =\n           (TranslationBlock_0 **)&tb_phys_hash[<span class=\"supfact\">h</span>];\n       ; <span class=\"supfact\">ptb1</span> = &<span class=\"supfact\">tb</span>->phys_hash_next) {\n    <span class=\"supfact\">tb</span> = *<span class=\"supfact\">ptb1</span>;\n    if (!*<span class=\"supfact\">ptb1</span>)\n      break;\n    if (pc == <span class=\"supfact\">tb</span>->pc &&\n        (<span class=\"supfact\">phys_pc</span> & Number) ==\n            <span class=\"supfact\">tb</span>->page_addr[Number] &&\n        cs_base == <span class=\"supfact\">tb</span>->cs_base &&\n        flags == <span class=\"supfact\">tb</span>->flags &&\n        (<span class=\"supfact\">tb</span>->page_addr[Number] == Number ||\n         get_page_addr_code(env, (pc & Number) + Number) ==\n             <span class=\"supfact\">tb</span>->page_addr[Number])) {\n      goto found;\n    }\n  }\n  <span class=\"supfact\">tb</span> = (TranslationBlock_0 *)tb_gen_code(\n      env, pc, cs_base, (unsigned int)flags, Number L);\nfound:\n  if (*<span class=\"supfact\">ptb1</span>) {\n    *<span class=\"supfact\">ptb1</span> = <span class=\"supfact\">tb</span>->phys_hash_next;\n    <span class=\"supfact\">tb</span>->phys_hash_next =\n        (TranslationBlock *)tb_phys_hash[<span class=\"supfact\">h</span>];\n    tb_phys_hash[<span class=\"supfact\">h</span>] = <span class=\"supfact\">tb</span>;\n  }\n  env->tb_jmp_cache[tb_jmp_cache_hash_func(pc)] = <span class=\"supfact\">tb</span>;\n  return <span class=\"supfact\">tb</span>;\n}", "var": [{"name": "i", "type": "TranslationBlock_0 * *", "ref_name": "ptb1", "ref_type": "TranslationBlock_0 * *"}, {"name": "v9", "type": "TranslationBlock_0 *", "ref_name": "tb", "ref_type": "TranslationBlock_0 *"}, {"name": "v8", "type": "unsigned int", "ref_name": "h", "ref_type": "unsigned int"}, {"name": "v7", "type": "tb_page_addr_t", "ref_name": "phys_pc", "ref_type": "tb_page_addr_t"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/1e1e7cb97ebb80eac8dbb33680b64d176ff61b4eaa68df0fca22659194da5490", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/stateful_proxy", "objdump": "000000000045a328 <pj_mutex_unlock>:\n  45a328:\t55                   \tpush   %rbp\n  45a329:\t48 89 e5             \tmov    %rsp,%rbp\n  45a32c:\t53                   \tpush   %rbx\n  45a32d:\t48 83 ec 28          \tsub    $0x28,%rsp\n  45a331:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  45a335:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  45a33a:\t75 2a                \tjne    45a366 <pj_mutex_unlock+0x3e>\n  45a33c:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  45a341:\t75 19                \tjne    45a35c <pj_mutex_unlock+0x34>\n  45a343:\tb9 90 7a 47 00       \tmov    $0x477a90,%ecx\n  45a348:\tba 1a 05 00 00       \tmov    $0x51a,%edx\n  45a34d:\tbe 18 76 47 00       \tmov    $0x477618,%esi\n  45a352:\tbf 86 78 47 00       \tmov    $0x477886,%edi\n  45a357:\te8 64 9d fa ff       \tcallq  4040c0 <__assert_fail@plt>\n  45a35c:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n  45a361:\te9 91 00 00 00       \tjmpq   45a3f7 <pj_mutex_unlock+0xcf>\n  45a366:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  45a36a:\t48 8b 58 50          \tmov    0x50(%rax),%rbx\n  45a36e:\te8 25 f7 ff ff       \tcallq  459a98 <pj_thread_this>\n  45a373:\t48 39 c3             \tcmp    %rax,%rbx\n  45a376:\t74 19                \tje     45a391 <pj_mutex_unlock+0x69>\n  45a378:\tb9 90 7a 47 00       \tmov    $0x477a90,%ecx\n  45a37d:\tba 1d 05 00 00       \tmov    $0x51d,%edx\n  45a382:\tbe 18 76 47 00       \tmov    $0x477618,%esi\n  45a387:\tbf 90 78 47 00       \tmov    $0x477890,%edi\n  45a38c:\te8 2f 9d fa ff       \tcallq  4040c0 <__assert_fail@plt>\n  45a391:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  45a395:\t8b 40 48             \tmov    0x48(%rax),%eax\n  45a398:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  45a39b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  45a39f:\t89 50 48             \tmov    %edx,0x48(%rax)\n  45a3a2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  45a3a6:\t8b 40 48             \tmov    0x48(%rax),%eax\n  45a3a9:\t85 c0                \ttest   %eax,%eax\n  45a3ab:\t75 14                \tjne    45a3c1 <pj_mutex_unlock+0x99>\n  45a3ad:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  45a3b1:\t48 c7 40 50 00 00 00 \tmovq   $0x0,0x50(%rax)\n  45a3b8:\t00 \n  45a3b9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  45a3bd:\tc6 40 58 00          \tmovb   $0x0,0x58(%rax)\n  45a3c1:\te8 55 63 00 00       \tcallq  46071b <pj_log_get_level>\n  45a3c6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  45a3ca:\t48 89 c7             \tmov    %rax,%rdi\n  45a3cd:\te8 3e a0 fa ff       \tcallq  404410 <pthread_mutex_unlock@plt>\n  45a3d2:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  45a3d5:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  45a3d9:\t75 07                \tjne    45a3e2 <pj_mutex_unlock+0xba>\n  45a3db:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  45a3e0:\teb 15                \tjmp    45a3f7 <pj_mutex_unlock+0xcf>\n  45a3e2:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  45a3e6:\t74 0a                \tje     45a3f2 <pj_mutex_unlock+0xca>\n  45a3e8:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  45a3eb:\t05 c0 d4 01 00       \tadd    $0x1d4c0,%eax\n  45a3f0:\teb 05                \tjmp    45a3f7 <pj_mutex_unlock+0xcf>\n  45a3f2:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  45a3f7:\t48 83 c4 28          \tadd    $0x28,%rsp\n  45a3fb:\t5b                   \tpop    %rbx\n  45a3fc:\t5d                   \tpop    %rbp\n  45a3fd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_mutex_unlock(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 result;\n  int <span class=\"supfact\">v4</span>;\n  if (!a1)\n    __assert_fail(String, String, Number, String);\n  v2 = *(_QWORD *)(a1 + Number);\n  if (v2 != pj_thread_this())\n    __assert_fail(String, String, Number, String);\n  if (!--*(_DWORD *)(a1 + Number)) {\n    *(_QWORD *)(a1 + Number) = Number L;\n    *(_BYTE *)(a1 + Number) = Number;\n  }\n  pj_log_get_level(a1, a2);\n  <span class=\"supfact\">v4</span> = pthread_mutex_unlock((pthread_mutex_t *)a1);\n  if (<span class=\"supfact\">v4</span>)\n    result = (unsigned int)(<span class=\"supfact\">v4</span> + Number);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "pj_status_t __cdecl pj_mutex_unlock(pj_mutex_t_0 *mutex) {\n  pj_thread_t_0 *v1;\n  pj_status_t result;\n  int <span class=\"supfact\">status</span>;\n  if (!mutex)\n    __assert_fail(String, String, Number, String);\n  v1 = mutex->owner;\n  if (v1 != pj_thread_this())\n    __assert_fail(String, String, Number, String);\n  if (!--mutex->nesting_level) {\n    mutex->owner = Number L;\n    mutex->owner_name[Number] = Number;\n  }\n  pj_log_get_level();\n  <span class=\"supfact\">status</span> = pthread_mutex_unlock(&mutex->mutex);\n  if (<span class=\"supfact\">status</span>)\n    result = <span class=\"supfact\">status</span> + Number;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v4", "type": "int", "ref_name": "status", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "jqswang", "repo_name": "papi-tx", "path": "jqswang/papi-tx/eac8d16f8d19ccdbeab2489e82871c6e28ff5f15cf34403e285a82aadf23a36e", "path_in_repo": "jqswang/papi-tx/src/libpfm-3.y/examples_v2.x/notify_self", "objdump": "0000000000402a8f <pfm_add_numeric_masks>:\n  402a8f:\t55                   \tpush   %rbp\n  402a90:\t48 89 e5             \tmov    %rsp,%rbp\n  402a93:\t48 83 ec 40          \tsub    $0x40,%rsp\n  402a97:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  402a9b:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  402a9f:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  402aa6:\t48 c7 45 e0 ff ff ff \tmovq   $0xffffffffffffffff,-0x20(%rbp)\n  402aad:\tff \n  402aae:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  402ab5:\t00 \n  402ab6:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  402abd:\t00 \n  402abe:\tc7 45 ec ea ff ff ff \tmovl   $0xffffffea,-0x14(%rbp)\n  402ac5:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  402ac9:\t0f b6 00             \tmovzbl (%rax),%eax\n  402acc:\t84 c0                \ttest   %al,%al\n  402ace:\t75 0a                \tjne    402ada <pfm_add_numeric_masks+0x4b>\n  402ad0:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n  402ad5:\te9 36 01 00 00       \tjmpq   402c10 <pfm_add_numeric_masks+0x181>\n  402ada:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402ade:\t8b 00                \tmov    (%rax),%eax\n  402ae0:\t89 c7                \tmov    %eax,%edi\n  402ae2:\te8 ab f4 ff ff       \tcallq  401f92 <pfm_num_masks>\n  402ae7:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  402aea:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402aee:\t8b 80 d0 00 00 00    \tmov    0xd0(%rax),%eax\n  402af4:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  402af7:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  402afb:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  402aff:\tba 00 00 00 00       \tmov    $0x0,%edx\n  402b04:\t48 89 ce             \tmov    %rcx,%rsi\n  402b07:\t48 89 c7             \tmov    %rax,%rdi\n  402b0a:\te8 01 e7 ff ff       \tcallq  401210 <strtoul@plt>\n  402b0f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  402b13:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  402b17:\t48 85 c0             \ttest   %rax,%rax\n  402b1a:\t74 15                \tje     402b31 <pfm_add_numeric_masks+0xa2>\n  402b1c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  402b20:\t0f b6 00             \tmovzbl (%rax),%eax\n  402b23:\t84 c0                \ttest   %al,%al\n  402b25:\t74 0a                \tje     402b31 <pfm_add_numeric_masks+0xa2>\n  402b27:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n  402b2c:\te9 df 00 00 00       \tjmpq   402c10 <pfm_add_numeric_masks+0x181>\n  402b31:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  402b38:\teb 7c                \tjmp    402bb6 <pfm_add_numeric_masks+0x127>\n  402b3a:\t48 8b 05 77 17 0d 00 \tmov    0xd1777(%rip),%rax        # 4d42b8 <pfm_config+0x8>\n  402b41:\t4c 8b 40 28          \tmov    0x28(%rax),%r8\n  402b45:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402b49:\t8b 00                \tmov    (%rax),%eax\n  402b4b:\t48 8d 55 dc          \tlea    -0x24(%rbp),%rdx\n  402b4f:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n  402b52:\t89 ce                \tmov    %ecx,%esi\n  402b54:\t89 c7                \tmov    %eax,%edi\n  402b56:\t41 ff d0             \tcallq  *%r8\n  402b59:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  402b5c:\t89 c0                \tmov    %eax,%eax\n  402b5e:\t48 23 45 e0          \tand    -0x20(%rbp),%rax\n  402b62:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  402b65:\t89 d2                \tmov    %edx,%edx\n  402b67:\t48 39 d0             \tcmp    %rdx,%rax\n  402b6a:\t75 46                \tjne    402bb2 <pfm_add_numeric_masks+0x123>\n  402b6c:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  402b6f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402b73:\t89 d6                \tmov    %edx,%esi\n  402b75:\t48 89 c7             \tmov    %rax,%rdi\n  402b78:\te8 ca fe ff ff       \tcallq  402a47 <pfm_check_duplicates>\n  402b7d:\t85 c0                \ttest   %eax,%eax\n  402b7f:\t75 28                \tjne    402ba9 <pfm_add_numeric_masks+0x11a>\n  402b81:\t83 7d f8 30          \tcmpl   $0x30,-0x8(%rbp)\n  402b85:\t75 09                \tjne    402b90 <pfm_add_numeric_masks+0x101>\n  402b87:\tc7 45 ec f4 ff ff ff \tmovl   $0xfffffff4,-0x14(%rbp)\n  402b8e:\teb 32                \tjmp    402bc2 <pfm_add_numeric_masks+0x133>\n  402b90:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  402b93:\t8d 50 01             \tlea    0x1(%rax),%edx\n  402b96:\t89 55 f8             \tmov    %edx,-0x8(%rbp)\n  402b99:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  402b9d:\t89 c0                \tmov    %eax,%eax\n  402b9f:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n  402ba3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402ba6:\t89 04 8a             \tmov    %eax,(%rdx,%rcx,4)\n  402ba9:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  402bac:\t89 c0                \tmov    %eax,%eax\n  402bae:\t48 09 45 f0          \tor     %rax,-0x10(%rbp)\n  402bb2:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  402bb6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402bb9:\t3b 45 e8             \tcmp    -0x18(%rbp),%eax\n  402bbc:\t0f 82 78 ff ff ff    \tjb     402b3a <pfm_add_numeric_masks+0xab>\n  402bc2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  402bc6:\t48 3b 45 f0          \tcmp    -0x10(%rbp),%rax\n  402bca:\t75 14                \tjne    402be0 <pfm_add_numeric_masks+0x151>\n  402bcc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402bd0:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  402bd3:\t89 90 d0 00 00 00    \tmov    %edx,0xd0(%rax)\n  402bd9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402bde:\teb 30                \tjmp    402c10 <pfm_add_numeric_masks+0x181>\n  402be0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402be4:\t8b 80 d0 00 00 00    \tmov    0xd0(%rax),%eax\n  402bea:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  402bed:\teb 16                \tjmp    402c05 <pfm_add_numeric_masks+0x176>\n  402bef:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402bf3:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  402bf6:\t48 83 c2 04          \tadd    $0x4,%rdx\n  402bfa:\tc7 04 90 00 00 00 00 \tmovl   $0x0,(%rax,%rdx,4)\n  402c01:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  402c05:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402c08:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n  402c0b:\t72 e2                \tjb     402bef <pfm_add_numeric_masks+0x160>\n  402c0d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  402c10:\tc9                   \tleaveq \n  402c11:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pfm_add_numeric_masks(unsigned int *a1, const char *a2) {\n  __int64 result;\n  unsigned int v3;\n  char *<span class=\"supfact\">endptr</span>;\n  unsigned int <span class=\"supfact\">v5</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v7</span> = Number;\n  <span class=\"supfact\">v6</span> = Number;\n  <span class=\"supfact\">v9</span> = Number L;\n  <span class=\"supfact\">endptr</span> = Number L;\n  <span class=\"supfact\">v8</span> = Number;\n  if (!*a2)\n    return Number L;\n  <span class=\"supfact\">v7</span> = pfm_num_masks(*a1);\n  <span class=\"supfact\">v10</span> = a1[Number];\n  <span class=\"supfact\">v6</span> = strtoul(a2, &<span class=\"supfact\">endptr</span>, Number);\n  if (<span class=\"supfact\">endptr</span> && *<span class=\"supfact\">endptr</span>)\n    return Number L;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v7</span>;\n       ++<span class=\"supfact\">i</span>) {\n    (*(void(__fastcall **)(_QWORD, _QWORD, unsigned int *))(\n        qword_4D42B8 + Number))(*a1, <span class=\"supfact\">i</span>, &<span class=\"supfact\">v5</span>);\n    if (((unsigned int)<span class=\"supfact\">v6</span> & <span class=\"supfact\">v5</span>) ==\n        (unsigned __int64)<span class=\"supfact\">v5</span>) {\n      if (!(unsigned int)pfm_check_duplicates((__int64)a1, <span class=\"supfact\">i</span>)) {\n        if (<span class=\"supfact\">v10</span> == Number) {\n          <span class=\"supfact\">v8</span> = Number;\n          break;\n        }\n        v3 = <span class=\"supfact\">v10</span>++;\n        a1[v3 + Number] = <span class=\"supfact\">i</span>;\n      }\n      <span class=\"supfact\">v9</span> |= <span class=\"supfact\">v5</span>;\n    }\n  }\n  if (<span class=\"supfact\">v6</span> == <span class=\"supfact\">v9</span>) {\n    a1[Number] = <span class=\"supfact\">v10</span>;\n    result = Number L;\n  } else {\n    for (<span class=\"supfact\">i</span> = a1[Number];\n         <span class=\"supfact\">i</span> < <span class=\"supfact\">v10</span>; ++<span class=\"supfact\">i</span>)\n      a1[<span class=\"supfact\">i</span> + Number] = Number;\n    result = <span class=\"supfact\">v8</span>;\n  }\n  return result;\n}", "code_t": "int __cdecl pfm_add_numeric_masks(pfmlib_event_t *e, const char *str) {\n  int result;\n  unsigned int v3;\n  char *<span class=\"supfact\">endptr</span>;\n  unsigned int <span class=\"supfact\">c</span>;\n  unsigned __int64 <span class=\"supfact\">mask_val</span>;\n  unsigned int <span class=\"supfact\">num_masks</span>;\n  int <span class=\"supfact\">ret</span>;\n  unsigned __int64 <span class=\"supfact\">m</span>;\n  unsigned int <span class=\"supfact\">j</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">num_masks</span> = Number;\n  <span class=\"supfact\">mask_val</span> = Number;\n  <span class=\"supfact\">m</span> = Number L;\n  <span class=\"supfact\">endptr</span> = Number L;\n  <span class=\"supfact\">ret</span> = Number;\n  if (!*str)\n    return Number;\n  <span class=\"supfact\">num_masks</span> = pfm_num_masks(e->event);\n  <span class=\"supfact\">j</span> = e-><span class=\"supfact\">num_masks</span>;\n  <span class=\"supfact\">mask_val</span> = strtoul(str, &<span class=\"supfact\">endptr</span>, Number);\n  if (<span class=\"supfact\">endptr</span> && *<span class=\"supfact\">endptr</span>)\n    return Number;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">num_masks</span>; ++<span class=\"supfact\">i</span>) {\n    pfm_config.current->get_event_mask_code(e->event, <span class=\"supfact\">i</span>,\n                                            &<span class=\"supfact\">c</span>);\n    if (((unsigned int)<span class=\"supfact\">mask_val</span> & <span class=\"supfact\">c</span>) ==\n        (unsigned __int64)<span class=\"supfact\">c</span>) {\n      if (!pfm_check_duplicates(e, <span class=\"supfact\">i</span>)) {\n        if (<span class=\"supfact\">j</span> == Number) {\n          <span class=\"supfact\">ret</span> = Number;\n          break;\n        }\n        v3 = <span class=\"supfact\">j</span>++;\n        e->unit_masks[v3] = <span class=\"supfact\">i</span>;\n      }\n      <span class=\"supfact\">m</span> |= <span class=\"supfact\">c</span>;\n    }\n  }\n  if (<span class=\"supfact\">mask_val</span> == <span class=\"supfact\">m</span>) {\n    e-><span class=\"supfact\">num_masks</span> = <span class=\"supfact\">j</span>;\n    result = Number;\n  } else {\n    for (<span class=\"supfact\">i</span> = e-><span class=\"supfact\">num_masks</span>;\n         <span class=\"supfact\">i</span> < <span class=\"supfact\">j</span>; ++<span class=\"supfact\">i</span>)\n      e->unit_masks[<span class=\"supfact\">i</span>] = Number;\n    result = <span class=\"supfact\">ret</span>;\n  }\n  return result;\n}", "var": [{"name": "i", "type": "unsigned int", "ref_name": "i", "ref_type": "unsigned int"}, {"name": "v10", "type": "unsigned int", "ref_name": "j", "ref_type": "unsigned int"}, {"name": "v9", "type": "unsigned __int64", "ref_name": "m", "ref_type": "unsigned __int64"}, {"name": "v8", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "v7", "type": "unsigned int", "ref_name": "num_masks", "ref_type": "unsigned int"}, {"name": "v6", "type": "unsigned __int64", "ref_name": "mask_val", "ref_type": "unsigned __int64"}, {"name": "v5", "type": "unsigned int", "ref_name": "c", "ref_type": "unsigned int"}, {"name": "endptr", "type": "char *", "ref_name": "endptr", "ref_type": "char *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "eager7", "repo_name": "openwrt_chaos_calmer", "path": "eager7/openwrt_chaos_calmer/3c025a746ad69f779dd7525d202a60acc6942894cbabfd008be1dcbd0ae5383b", "path_in_repo": "eager7/openwrt_chaos_calmer/openwrt/scripts/config/conf", "objdump": "00000000004087de <str_assign>:\n  4087de:\t55                   \tpush   %rbp\n  4087df:\t48 89 e5             \tmov    %rsp,%rbp\n  4087e2:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4087e6:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4087ea:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  4087ee:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4087f2:\t48 89 c7             \tmov    %rax,%rdi\n  4087f5:\te8 56 9c ff ff       \tcallq  402450 <strdup@plt>\n  4087fa:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4087fe:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  408802:\t48 89 c7             \tmov    %rax,%rdi\n  408805:\te8 16 99 ff ff       \tcallq  402120 <strlen@plt>\n  40880a:\t48 83 c0 01          \tadd    $0x1,%rax\n  40880e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  408812:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n  408819:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  40881d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  408821:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  408825:\t48 89 01             \tmov    %rax,(%rcx)\n  408828:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n  40882c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  408830:\t48 89 41 10          \tmov    %rax,0x10(%rcx)\n  408834:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408838:\tc9                   \tleaveq \n  408839:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall str_assign(_QWORD *a1, const char *a2) {\n  char *<span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v3</span> = strdup(a2);\n  LODWORD(<span class=\"supfact\">v4</span>) = Number;\n  *a1 = strlen(a2) + Number;\n  a1[Number] = <span class=\"supfact\">v3</span>;\n  a1[Number] = <span class=\"supfact\">v4</span>;\n  return a1;\n}", "code_t": "gstr *__cdecl str_assign(gstr *retstr, const char *s) {\n  char *<span class=\"supfact\">gs_0_8</span>;\n  __int64 <span class=\"supfact\">gs_0_16</span>;\n  <span class=\"supfact\">gs_0_8</span> = strdup(s);\n  LODWORD(<span class=\"supfact\">gs_0_16</span>) = Number;\n  retstr->len = strlen(s) + Number;\n  retstr->s = <span class=\"supfact\">gs_0_8</span>;\n  *(_QWORD *)&retstr->max_width = <span class=\"supfact\">gs_0_16</span>;\n  return retstr;\n}", "var": [{"name": "v4", "type": "__int64", "ref_name": "gs_0_16", "ref_type": "__int64"}, {"name": "v3", "type": "char *", "ref_name": "gs_0_8", "ref_type": "char *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "lizhengxian1991", "repo_name": "HelloFFmpeg", "path": "lizhengxian1991/HelloFFmpeg/72fbf12202f808ff78165b6ea9b4b939fa62db1c82f907b3ecd52e1bafae6688", "path_in_repo": "lizhengxian1991/HelloFFmpeg/ffmpeg-android/libavcodec/h264_cavlc.o", "objdump": "00000000000061b8 <get_ue_golomb_long>:\n    61b8:\t48 83 ec 18          \tsub    $0x18,%rsp\n    61bc:\t48 89 3c 24          \tmov    %rdi,(%rsp)\n    61c0:\t48 8b 04 24          \tmov    (%rsp),%rax\n    61c4:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    61c9:\t48 89 c7             \tmov    %rax,%rdi\n    61cc:\te8 5b a2 ff ff       \tcallq  42c <show_bits_long>\n    61d1:\t89 44 24 14          \tmov    %eax,0x14(%rsp)\n    61d5:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    61d9:\t83 c8 01             \tor     $0x1,%eax\n    61dc:\t0f bd c0             \tbsr    %eax,%eax\n    61df:\t83 f0 1f             \txor    $0x1f,%eax\n    61e2:\t89 44 24 10          \tmov    %eax,0x10(%rsp)\n    61e6:\t8b 54 24 10          \tmov    0x10(%rsp),%edx\n    61ea:\t48 8b 04 24          \tmov    (%rsp),%rax\n    61ee:\t89 d6                \tmov    %edx,%esi\n    61f0:\t48 89 c7             \tmov    %rax,%rdi\n    61f3:\te8 cf 9f ff ff       \tcallq  1c7 <skip_bits_long>\n    61f8:\t8b 44 24 10          \tmov    0x10(%rsp),%eax\n    61fc:\t83 c0 01             \tadd    $0x1,%eax\n    61ff:\t89 c2                \tmov    %eax,%edx\n    6201:\t48 8b 04 24          \tmov    (%rsp),%rax\n    6205:\t89 d6                \tmov    %edx,%esi\n    6207:\t48 89 c7             \tmov    %rax,%rdi\n    620a:\te8 a6 a1 ff ff       \tcallq  3b5 <get_bits_long>\n    620f:\t83 e8 01             \tsub    $0x1,%eax\n    6212:\t48 83 c4 18          \tadd    $0x18,%rsp\n    6216:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_ue_golomb_long(__int64 *a1) {\n  unsigned int v1;\n  unsigned int <span class=\"supfact\">v3</span>;\n  _BitScanReverse(&v1, show_bits_long(a1, Number) | Number);\n  <span class=\"supfact\">v3</span> = v1 ^ Number;\n  skip_bits_long((__int64)a1, v1 ^ Number);\n  return (unsigned int)get_bits_long((__int64)a1, <span class=\"supfact\">v3</span> + Number) -\n         Number;\n}", "code_t": "unsigned int __cdecl get_ue_golomb_long(GetBitContext_0 *gb) {\n  unsigned int v1;\n  unsigned int <span class=\"supfact\">log</span>;\n  _BitScanReverse(&v1, show_bits_long(gb, Number) | Number);\n  <span class=\"supfact\">log</span> = v1 ^ Number;\n  skip_bits_long(gb, v1 ^ Number);\n  return get_bits_long(gb, <span class=\"supfact\">log</span> + Number) - Number;\n}", "var": [{"name": "v3", "type": "unsigned int", "ref_name": "log", "ref_type": "unsigned int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "jakeaherson", "repo_name": "cs4121", "path": "jakeaherson/cs4121/988c78f4649f917fd4f7dba504ba90658e2278b5aece2a653bf983ac7f2ffd99", "path_in_repo": "jakeaherson/cs4121/Project2/CminusProject2/cmc", "objdump": "000000000040991d <initRegisters>:\n  40991d:\t55                   \tpush   %rbp\n  40991e:\t48 89 e5             \tmov    %rsp,%rbp\n  409921:\t48 83 ec 10          \tsub    $0x10,%rsp\n  409925:\tbf 28 00 00 00       \tmov    $0x28,%edi\n  40992a:\te8 51 78 ff ff       \tcallq  401180 <malloc@plt>\n  40992f:\t48 89 05 82 69 00 00 \tmov    %rax,0x6982(%rip)        # 4102b8 <allocatedIntegerRegisters>\n  409936:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40993d:\teb 1e                \tjmp    40995d <initRegisters+0x40>\n  40993f:\t48 8b 05 72 69 00 00 \tmov    0x6972(%rip),%rax        # 4102b8 <allocatedIntegerRegisters>\n  409946:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  409949:\t48 63 d2             \tmovslq %edx,%rdx\n  40994c:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  409950:\t48 01 d0             \tadd    %rdx,%rax\n  409953:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  409959:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40995d:\t83 7d fc 09          \tcmpl   $0x9,-0x4(%rbp)\n  409961:\t7e dc                \tjle    40993f <initRegisters+0x22>\n  409963:\t90                   \tnop\n  409964:\t90                   \tnop\n  409965:\tc9                   \tleaveq \n  409966:\tc3                   \tretq   ", "code_s": "_DWORD *initRegisters() {\n  _DWORD *result;\n  int <span class=\"supfact\">i</span>;\n  result = malloc(Number);\n  allocatedIntegerRegisters = result;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    result = (char *)allocatedIntegerRegisters + Number * <span class=\"supfact\">i</span>;\n    *result = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl initRegisters() {\n  int <span class=\"supfact\">i</span>;\n  allocatedIntegerRegisters = (bool *)malloc(Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    allocatedIntegerRegisters[<span class=\"supfact\">i</span>] = false;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "neversetsun", "repo_name": "yaffs2", "path": "neversetsun/yaffs2/11e5b04c10d4e029b951a2ef3714381cf1ae2680f96667fa484400c76935b36a", "path_in_repo": "neversetsun/yaffs2/direct/timothy_tests/quick_tests/yaffsfs.o", "objdump": "0000000000004425 <yaffs_unmount2>:\n    4425:\t55                   \tpush   %rbp\n    4426:\t48 89 e5             \tmov    %rsp,%rbp\n    4429:\t48 83 ec 30          \tsub    $0x30,%rsp\n    442d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    4431:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n    4434:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n    443b:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    4442:\t00 \n    4443:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    4448:\t75 14                \tjne    445e <yaffs_unmount2+0x39>\n    444a:\tbf f2 ff ff ff       \tmov    $0xfffffff2,%edi\n    444f:\te8 00 00 00 00       \tcallq  4454 <yaffs_unmount2+0x2f>\n    4454:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    4459:\te9 d6 00 00 00       \tjmpq   4534 <yaffs_unmount2+0x10f>\n    445e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4462:\t48 89 c7             \tmov    %rax,%rdi\n    4465:\te8 8a c7 ff ff       \tcallq  bf4 <yaffsfs_CheckPath>\n    446a:\t85 c0                \ttest   %eax,%eax\n    446c:\t79 14                \tjns    4482 <yaffs_unmount2+0x5d>\n    446e:\tbf dc ff ff ff       \tmov    $0xffffffdc,%edi\n    4473:\te8 00 00 00 00       \tcallq  4478 <yaffs_unmount2+0x53>\n    4478:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    447d:\te9 b2 00 00 00       \tjmpq   4534 <yaffs_unmount2+0x10f>\n    4482:\te8 00 00 00 00       \tcallq  4487 <yaffs_unmount2+0x62>\n    4487:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    448b:\t48 89 c7             \tmov    %rax,%rdi\n    448e:\te8 db c7 ff ff       \tcallq  c6e <yaffsfs_FindMountPoint>\n    4493:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    4497:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    449c:\t0f 84 80 00 00 00    \tje     4522 <yaffs_unmount2+0xfd>\n    44a2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    44a6:\t8b 80 08 01 00 00    \tmov    0x108(%rax),%eax\n    44ac:\t85 c0                \ttest   %eax,%eax\n    44ae:\t74 66                \tje     4516 <yaffs_unmount2+0xf1>\n    44b0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    44b4:\t48 89 c7             \tmov    %rax,%rdi\n    44b7:\te8 00 00 00 00       \tcallq  44bc <yaffs_unmount2+0x97>\n    44bc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    44c0:\t48 89 c7             \tmov    %rax,%rdi\n    44c3:\te8 00 00 00 00       \tcallq  44c8 <yaffs_unmount2+0xa3>\n    44c8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    44cc:\t48 89 c7             \tmov    %rax,%rdi\n    44cf:\te8 fa fd ff ff       \tcallq  42ce <yaffsfs_IsDevBusy>\n    44d4:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    44d7:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    44db:\t74 06                \tje     44e3 <yaffs_unmount2+0xbe>\n    44dd:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    44e1:\t74 27                \tje     450a <yaffs_unmount2+0xe5>\n    44e3:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    44e7:\t74 0c                \tje     44f5 <yaffs_unmount2+0xd0>\n    44e9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    44ed:\t48 89 c7             \tmov    %rax,%rdi\n    44f0:\te8 ab c2 ff ff       \tcallq  7a0 <yaffsfs_BreakDeviceHandles>\n    44f5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    44f9:\t48 89 c7             \tmov    %rax,%rdi\n    44fc:\te8 00 00 00 00       \tcallq  4501 <yaffs_unmount2+0xdc>\n    4501:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    4508:\teb 22                \tjmp    452c <yaffs_unmount2+0x107>\n    450a:\tbf f0 ff ff ff       \tmov    $0xfffffff0,%edi\n    450f:\te8 00 00 00 00       \tcallq  4514 <yaffs_unmount2+0xef>\n    4514:\teb 16                \tjmp    452c <yaffs_unmount2+0x107>\n    4516:\tbf ea ff ff ff       \tmov    $0xffffffea,%edi\n    451b:\te8 00 00 00 00       \tcallq  4520 <yaffs_unmount2+0xfb>\n    4520:\teb 0a                \tjmp    452c <yaffs_unmount2+0x107>\n    4522:\tbf ed ff ff ff       \tmov    $0xffffffed,%edi\n    4527:\te8 00 00 00 00       \tcallq  452c <yaffs_unmount2+0x107>\n    452c:\te8 00 00 00 00       \tcallq  4531 <yaffs_unmount2+0x10c>\n    4531:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    4534:\tc9                   \tleaveq \n    4535:\tc3                   \tretq   ", "code_s": "__int64 __fastcall yaffs_unmount2(char *a1, int a2) {\n  __int64 result;\n  int <span class=\"supfact\">v3</span>;\n  void **<span class=\"supfact\">v4</span>;\n  unsigned int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = Number;\n  if (a1) {\n    if ((int)yaffsfs_CheckPath(a1) >= Number) {\n      yaffsfs_Lock();\n      <span class=\"supfact\">v4</span> = yaffsfs_FindMountPoint(a1);\n      if (<span class=\"supfact\">v4</span>) {\n        if (*((_DWORD *)<span class=\"supfact\">v4</span> + Number)) {\n          yaffs_flush_whole_cache(<span class=\"supfact\">v4</span>);\n          yaffs_checkpoint_save(<span class=\"supfact\">v4</span>);\n          <span class=\"supfact\">v3</span> = yaffsfs_IsDevBusy((__int64)<span class=\"supfact\">v4</span>);\n          if (<span class=\"supfact\">v3</span> && !a2) {\n            yaffsfs_SetError(Number L);\n          } else {\n            if (<span class=\"supfact\">v3</span>)\n              yaffsfs_BreakDeviceHandles((__int64)<span class=\"supfact\">v4</span>);\n            yaffs_deinitialise(<span class=\"supfact\">v4</span>);\n            <span class=\"supfact\">v5</span> = Number;\n          }\n        } else {\n          yaffsfs_SetError(Number L);\n        }\n      } else {\n        yaffsfs_SetError(Number L);\n      }\n      yaffsfs_Unlock();\n      result = <span class=\"supfact\">v5</span>;\n    } else {\n      yaffsfs_SetError(Number L);\n      result = Number;\n    }\n  } else {\n    yaffsfs_SetError(Number L);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl yaffs_unmount2(const char *path, int force) {\n  int result;\n  int <span class=\"supfact\">inUse</span>;\n  yaffs_dev *<span class=\"supfact\">dev</span>;\n  int <span class=\"supfact\">retVal</span>;\n  <span class=\"supfact\">retVal</span> = Number;\n  if (path) {\n    if (yaffsfs_CheckPath(path) >= Number) {\n      yaffsfs_Lock();\n      <span class=\"supfact\">dev</span> = yaffsfs_FindMountPoint(path);\n      if (<span class=\"supfact\">dev</span>) {\n        if (<span class=\"supfact\">dev</span>->is_mounted) {\n          yaffs_flush_whole_cache(<span class=\"supfact\">dev</span>);\n          yaffs_checkpoint_save(<span class=\"supfact\">dev</span>);\n          <span class=\"supfact\">inUse</span> = yaffsfs_IsDevBusy(<span class=\"supfact\">dev</span>);\n          if (<span class=\"supfact\">inUse</span> && !force) {\n            yaffsfs_SetError(Number L);\n          } else {\n            if (<span class=\"supfact\">inUse</span>)\n              yaffsfs_BreakDeviceHandles(<span class=\"supfact\">dev</span>);\n            yaffs_deinitialise(<span class=\"supfact\">dev</span>);\n            <span class=\"supfact\">retVal</span> = Number;\n          }\n        } else {\n          yaffsfs_SetError(Number L);\n        }\n      } else {\n        yaffsfs_SetError(Number L);\n      }\n      yaffsfs_Unlock();\n      result = <span class=\"supfact\">retVal</span>;\n    } else {\n      yaffsfs_SetError(Number L);\n      result = Number;\n    }\n  } else {\n    yaffsfs_SetError(Number L);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "int", "ref_name": "retVal", "ref_type": "int"}, {"name": "v4", "type": "yaffs_dev *", "ref_name": "dev", "ref_type": "yaffs_dev *"}, {"name": "v3", "type": "int", "ref_name": "inUse", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "hall-lab", "repo_name": "speedseq", "path": "hall-lab/speedseq/44196aa6c1f1d3272f7909532fccde33c97d109b856db1c6a150b619af7dc4e6", "path_in_repo": "hall-lab/speedseq/src/samtools-1.3.1/htslib-1.3.1/test/test-regidx", "objdump": "", "code_s": "__int64 __fastcall kputw_0(int a1, __int64 a2) {\n  int v2;\n  int v3;\n  __int64 v5;\n  __int64 v6;\n  char <span class=\"supfact\">v8</span>[Number];\n  void *<span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v11</span> = Number;\n  <span class=\"supfact\">v10</span> = a1;\n  if (a1 < Number)\n    <span class=\"supfact\">v10</span> = -<span class=\"supfact\">v10</span>;\n  do {\n    v2 = <span class=\"supfact\">v11</span>++;\n    <span class=\"supfact\">v8</span>[v2] = <span class=\"supfact\">v10</span> % Number + Number;\n    <span class=\"supfact\">v10</span> /= Number;\n  } while (<span class=\"supfact\">v10</span>);\n  if (a1 < Number) {\n    v3 = <span class=\"supfact\">v11</span>++;\n    <span class=\"supfact\">v8</span>[v3] = Number;\n  }\n  if ((unsigned __int64)(*(_QWORD *)a2 + <span class=\"supfact\">v11</span> + Number L) >=\n      *(_QWORD *)(a2 + Number)) {\n    *(_QWORD *)(a2 + Number) = *(_QWORD *)a2 + <span class=\"supfact\">v11</span> + Number L;\n    --*(_QWORD *)(a2 + Number);\n    *(_QWORD *)(a2 + Number) |= *(_QWORD *)(a2 + Number) >> Number;\n    *(_QWORD *)(a2 + Number) |= *(_QWORD *)(a2 + Number) >> Number;\n    *(_QWORD *)(a2 + Number) |= *(_QWORD *)(a2 + Number) >> Number;\n    *(_QWORD *)(a2 + Number) |= *(_QWORD *)(a2 + Number) >> Number;\n    *(_QWORD *)(a2 + Number) |= *(_QWORD *)(a2 + Number) >> Number;\n    <span class=\"supfact\">v9</span> =\n        realloc(*(void **)(a2 + Number), ++*(_QWORD *)(a2 + Number));\n    if (!<span class=\"supfact\">v9</span>)\n      return Number;\n    *(_QWORD *)(a2 + Number) = <span class=\"supfact\">v9</span>;\n  }\n  for (<span class=\"supfact\">i</span> = <span class=\"supfact\">v11</span> - Number;\n       <span class=\"supfact\">i</span> >= Number; --<span class=\"supfact\">i</span>) {\n    v5 = *(_QWORD *)(a2 + Number);\n    v6 = (*(_QWORD *)a2)++;\n    *(_BYTE *)(v5 + v6) = <span class=\"supfact\">v8</span>[<span class=\"supfact\">i</span>];\n  }\n  *(_BYTE *)(*(_QWORD *)(a2 + Number) + *(_QWORD *)a2) = Number;\n  return Number L;\n}", "code_t": "int __cdecl kputw_0(int c, kstring_t *s) {\n  int v2;\n  int v3;\n  char *v5;\n  size_t v6;\n  char <span class=\"supfact\">buf</span>[Number];\n  char *<span class=\"supfact\">tmp</span>;\n  unsigned int <span class=\"supfact\">x</span>;\n  int <span class=\"supfact\">l</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">l</span> = Number;\n  <span class=\"supfact\">x</span> = c;\n  if (c < Number)\n    <span class=\"supfact\">x</span> = -<span class=\"supfact\">x</span>;\n  do {\n    v2 = <span class=\"supfact\">l</span>++;\n    <span class=\"supfact\">buf</span>[v2] = <span class=\"supfact\">x</span> % Number + Number;\n    <span class=\"supfact\">x</span> /= Number;\n  } while (<span class=\"supfact\">x</span>);\n  if (c < Number) {\n    v3 = <span class=\"supfact\">l</span>++;\n    <span class=\"supfact\">buf</span>[v3] = Number;\n  }\n  if (s-><span class=\"supfact\">l</span> + <span class=\"supfact\">l</span> + Number >= s->m) {\n    s->m = s-><span class=\"supfact\">l</span> + <span class=\"supfact\">l</span> + Number;\n    --s->m;\n    s->m |= s->m >> Number;\n    s->m |= s->m >> Number;\n    s->m |= s->m >> Number;\n    s->m |= s->m >> Number;\n    s->m |= s->m >> Number;\n    <span class=\"supfact\">tmp</span> = (char *)realloc(s->s, ++s->m);\n    if (!<span class=\"supfact\">tmp</span>)\n      return Number;\n    s->s = <span class=\"supfact\">tmp</span>;\n  }\n  for (<span class=\"supfact\">i</span> = <span class=\"supfact\">l</span> - Number;\n       <span class=\"supfact\">i</span> >= Number; --<span class=\"supfact\">i</span>) {\n    v5 = s->s;\n    v6 = s-><span class=\"supfact\">l</span>++;\n    v5[v6] = <span class=\"supfact\">buf</span>[<span class=\"supfact\">i</span>];\n  }\n  s->s[s-><span class=\"supfact\">l</span>] = Number;\n  return Number;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v11", "type": "int", "ref_name": "l", "ref_type": "int"}, {"name": "v10", "type": "unsigned int", "ref_name": "x", "ref_type": "unsigned int"}, {"name": "v9", "type": "char *", "ref_name": "tmp", "ref_type": "char *"}, {"name": "v8", "type": "char[16]", "ref_name": "buf", "ref_type": "char[16]"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "yushb0602", "repo_name": "androidTV", "path": "yushb0602/androidTV/6706d6f4ff216fba462c66a86f0525f1a4f8d7b68fa0d6dc85a24cf8dbc0acbb", "path_in_repo": "yushb0602/androidTV/android/ffmpeg-android/ffmpeg/libavcodec/4xm.o", "objdump": "0000000000003b28 <decode_end>:\n    3b28:\t48 83 ec 28          \tsub    $0x28,%rsp\n    3b2c:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    3b31:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    3b36:\t48 8b 80 a0 00 00 00 \tmov    0xa0(%rax),%rax\n    3b3d:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n    3b42:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    3b47:\t48 05 b0 29 00 00    \tadd    $0x29b0,%rax\n    3b4d:\t48 89 c7             \tmov    %rax,%rdi\n    3b50:\te8 00 00 00 00       \tcallq  3b55 <decode_end+0x2d>\n    3b55:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    3b5a:\tc7 80 b8 29 00 00 00 \tmovl   $0x0,0x29b8(%rax)\n    3b61:\t00 00 00 \n    3b64:\tc7 44 24 1c 00 00 00 \tmovl   $0x0,0x1c(%rsp)\n    3b6b:\t00 \n    3b6c:\teb 58                \tjmp    3bc6 <decode_end+0x9e>\n    3b6e:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    3b72:\t48 63 d0             \tmovslq %eax,%rdx\n    3b75:\t48 89 d0             \tmov    %rdx,%rax\n    3b78:\t48 01 c0             \tadd    %rax,%rax\n    3b7b:\t48 01 d0             \tadd    %rdx,%rax\n    3b7e:\t48 c1 e0 03          \tshl    $0x3,%rax\n    3b82:\t48 8d 90 d0 29 00 00 \tlea    0x29d0(%rax),%rdx\n    3b89:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    3b8e:\t48 01 d0             \tadd    %rdx,%rax\n    3b91:\t48 89 c7             \tmov    %rax,%rdi\n    3b94:\te8 00 00 00 00       \tcallq  3b99 <decode_end+0x71>\n    3b99:\t48 8b 4c 24 10       \tmov    0x10(%rsp),%rcx\n    3b9e:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    3ba2:\t48 63 d0             \tmovslq %eax,%rdx\n    3ba5:\t48 89 d0             \tmov    %rdx,%rax\n    3ba8:\t48 01 c0             \tadd    %rax,%rax\n    3bab:\t48 01 d0             \tadd    %rdx,%rax\n    3bae:\t48 c1 e0 03          \tshl    $0x3,%rax\n    3bb2:\t48 01 c8             \tadd    %rcx,%rax\n    3bb5:\t48 05 c0 29 00 00    \tadd    $0x29c0,%rax\n    3bbb:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    3bc1:\t83 44 24 1c 01       \taddl   $0x1,0x1c(%rsp)\n    3bc6:\t83 7c 24 1c 63       \tcmpl   $0x63,0x1c(%rsp)\n    3bcb:\t7e a1                \tjle    3b6e <decode_end+0x46>\n    3bcd:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    3bd2:\t48 05 88 26 00 00    \tadd    $0x2688,%rax\n    3bd8:\t48 89 c7             \tmov    %rax,%rdi\n    3bdb:\te8 00 00 00 00       \tcallq  3be0 <decode_end+0xb8>\n    3be0:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    3be5:\t48 8b 80 f8 1f 00 00 \tmov    0x1ff8(%rax),%rax\n    3bec:\t48 85 c0             \ttest   %rax,%rax\n    3bef:\t74 25                \tje     3c16 <decode_end+0xee>\n    3bf1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    3bf6:\t48 8b 90 38 01 00 00 \tmov    0x138(%rax),%rdx\n    3bfd:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    3c02:\t48 8d 88 f8 1f 00 00 \tlea    0x1ff8(%rax),%rcx\n    3c09:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    3c0e:\t48 89 ce             \tmov    %rcx,%rsi\n    3c11:\t48 89 c7             \tmov    %rax,%rdi\n    3c14:\tff d2                \tcallq  *%rdx\n    3c16:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    3c1b:\t48 8b 80 20 21 00 00 \tmov    0x2120(%rax),%rax\n    3c22:\t48 85 c0             \ttest   %rax,%rax\n    3c25:\t74 25                \tje     3c4c <decode_end+0x124>\n    3c27:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    3c2c:\t48 8b 90 38 01 00 00 \tmov    0x138(%rax),%rdx\n    3c33:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    3c38:\t48 8d 88 20 21 00 00 \tlea    0x2120(%rax),%rcx\n    3c3f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    3c44:\t48 89 ce             \tmov    %rcx,%rsi\n    3c47:\t48 89 c7             \tmov    %rax,%rdi\n    3c4a:\tff d2                \tcallq  *%rdx\n    3c4c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3c51:\t48 83 c4 28          \tadd    $0x28,%rsp\n    3c55:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall decode_end(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)(a1 + Number);\n  av_freep(<span class=\"supfact\">v2</span> + Number);\n  *(_DWORD *)(<span class=\"supfact\">v2</span> + Number) = Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    av_freep(Number L * <span class=\"supfact\">i</span> + Number + <span class=\"supfact\">v2</span>);\n    *(_DWORD *)(<span class=\"supfact\">v2</span> + Number L * <span class=\"supfact\">i</span> + Number) =\n        Number;\n  }\n  free_vlc(<span class=\"supfact\">v2</span> + Number);\n  if (*(_QWORD *)(<span class=\"supfact\">v2</span> + Number))\n    (*(void(__fastcall **)(__int64, __int64))(a1 + Number))(\n        a1, <span class=\"supfact\">v2</span> + Number);\n  if (*(_QWORD *)(<span class=\"supfact\">v2</span> + Number))\n    (*(void(__fastcall **)(__int64, __int64))(a1 + Number))(\n        a1, <span class=\"supfact\">v2</span> + Number);\n  return Number L;\n}", "code_t": "int __cdecl decode_end(AVCodecContext_0 *avctx) {\n  FourXContext_0 *<span class=\"supfact\">f</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">f</span> = (FourXContext_0 *)avctx->priv_data;\n  av_freep(&<span class=\"supfact\">f</span>->bitstream_buffer);\n  <span class=\"supfact\">f</span>->bitstream_buffer_size = Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    av_freep(&<span class=\"supfact\">f</span>->cfrm[<span class=\"supfact\">i</span>].data);\n    <span class=\"supfact\">f</span>->cfrm[<span class=\"supfact\">i</span>].allocated_size = Number;\n  }\n  free_vlc(&<span class=\"supfact\">f</span>->pre_vlc);\n  if (<span class=\"supfact\">f</span>->current_picture.data[Number])\n    avctx->release_buffer(avctx, &<span class=\"supfact\">f</span>->current_picture);\n  if (<span class=\"supfact\">f</span>->last_picture.data[Number])\n    avctx->release_buffer(avctx, &<span class=\"supfact\">f</span>->last_picture);\n  return Number;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v2", "type": "LclEncContext_0 *", "ref_name": "f", "ref_type": "FourXContext_0 *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "postgrespro", "repo_name": "postgres_cluster", "path": "postgrespro/postgres_cluster/0c44c5d5328f38bea28a99f663f30de19e596fa16a8312c9c13e1d5b20773f30", "path_in_repo": "postgrespro/postgres_cluster//src/backend/utils/adt/regproc.o", "objdump": "00000000000026b2 <regroleout>:\n    26b2:\t55                   \tpush   %rbp\n    26b3:\t48 89 e5             \tmov    %rsp,%rbp\n    26b6:\t48 83 ec 20          \tsub    $0x20,%rsp\n    26ba:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    26be:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    26c2:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    26c6:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    26c9:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    26cd:\t75 14                \tjne    26e3 <regroleout+0x31>\n    26cf:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    26d4:\te8 00 00 00 00       \tcallq  26d9 <regroleout+0x27>\n    26d9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    26dd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    26e1:\teb 66                \tjmp    2749 <regroleout+0x97>\n    26e3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    26e6:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    26eb:\t89 c7                \tmov    %eax,%edi\n    26ed:\te8 00 00 00 00       \tcallq  26f2 <regroleout+0x40>\n    26f2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    26f6:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    26fb:\t74 1a                \tje     2717 <regroleout+0x65>\n    26fd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2701:\t48 89 c7             \tmov    %rax,%rdi\n    2704:\te8 00 00 00 00       \tcallq  2709 <regroleout+0x57>\n    2709:\t48 89 c7             \tmov    %rax,%rdi\n    270c:\te8 00 00 00 00       \tcallq  2711 <regroleout+0x5f>\n    2711:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2715:\teb 2e                \tjmp    2745 <regroleout+0x93>\n    2717:\tbf 40 00 00 00       \tmov    $0x40,%edi\n    271c:\te8 00 00 00 00       \tcallq  2721 <regroleout+0x6f>\n    2721:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2725:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    2728:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    272c:\t89 d1                \tmov    %edx,%ecx\n    272e:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2733:\tbe 40 00 00 00       \tmov    $0x40,%esi\n    2738:\t48 89 c7             \tmov    %rax,%rdi\n    273b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2740:\te8 00 00 00 00       \tcallq  2745 <regroleout+0x93>\n    2745:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2749:\tc9                   \tleaveq \n    274a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall regroleout(__int64 a1) {\n  __int64 v2;\n  unsigned int <span class=\"supfact\">v3</span>;\n  char *s;\n  char *sa;\n  <span class=\"supfact\">v3</span> = *(_QWORD *)(a1 + Number);\n  if (!<span class=\"supfact\">v3</span>)\n    return pstrdup(String);\n  s = (char *)GetUserNameFromId(<span class=\"supfact\">v3</span>, Number L);\n  if (s) {\n    v2 = quote_identifier(s);\n    sa = (char *)pstrdup(v2);\n  } else {\n    sa = (char *)palloc(Number L);\n    snprintf(sa, Number, String, <span class=\"supfact\">v3</span>);\n  }\n  return (__int64)sa;\n}", "code_t": "Datum __cdecl regroleout(FunctionCallInfo fcinfo) {\n  __int64 v2;\n  Oid <span class=\"supfact\">roleoid</span>;\n  char *result;\n  char *resulta;\n  <span class=\"supfact\">roleoid</span> = fcinfo->arg[Number];\n  if (!<span class=\"supfact\">roleoid</span>)\n    return pstrdup(String);\n  result = (char *)GetUserNameFromId(<span class=\"supfact\">roleoid</span>, Number L);\n  if (result) {\n    v2 = quote_identifier(result);\n    resulta = (char *)pstrdup(v2);\n  } else {\n    resulta = (char *)palloc(Number L);\n    snprintf(resulta, Number, String, <span class=\"supfact\">roleoid</span>);\n  }\n  return (Datum)resulta;\n}", "var": [{"name": "v3", "type": "Oid", "ref_name": "roleoid", "ref_type": "Oid"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "mrliemitvn", "repo_name": "PDFFramework", "path": "mrliemitvn/PDFFramework/b08b14c189f4c652eb69e7c9f582bfa65411df9b5e83180dd791719c76ec5b79", "path_in_repo": "mrliemitvn/PDFFramework/mupdf/build/debug/platform/x11/x11_image.o", "objdump": "00000000000004e3 <select_mode>:\n     4e3:\t55                   \tpush   %rbp\n     4e4:\t48 89 e5             \tmov    %rsp,%rbp\n     4e7:\t48 83 ec 40          \tsub    $0x40,%rsp\n     4eb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4f2 <select_mode+0xf>\n     4f2:\t8b 40 50             \tmov    0x50(%rax),%eax\n     4f5:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     4f8:\te8 19 fb ff ff       \tcallq  16 <is_big_endian>\n     4fd:\t85 c0                \ttest   %eax,%eax\n     4ff:\t74 0f                \tje     510 <select_mode+0x2d>\n     501:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n     505:\t0f 95 c0             \tsetne  %al\n     508:\t0f b6 c0             \tmovzbl %al,%eax\n     50b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     50e:\teb 0d                \tjmp    51d <select_mode+0x3a>\n     510:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n     514:\t0f 95 c0             \tsetne  %al\n     517:\t0f b6 c0             \tmovzbl %al,%eax\n     51a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     51d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 524 <select_mode+0x41>\n     524:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     528:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 52f <select_mode+0x4c>\n     52f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     533:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 53a <select_mode+0x57>\n     53a:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     53e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     542:\t89 c7                \tmov    %eax,%edi\n     544:\te8 00 00 00 00       \tcallq  549 <select_mode+0x66>\n     549:\t83 e8 01             \tsub    $0x1,%eax\n     54c:\t48 98                \tcltq   \n     54e:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     552:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     556:\t89 c7                \tmov    %eax,%edi\n     558:\te8 00 00 00 00       \tcallq  55d <select_mode+0x7a>\n     55d:\t83 e8 01             \tsub    $0x1,%eax\n     560:\t48 98                \tcltq   \n     562:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     566:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     56a:\t89 c7                \tmov    %eax,%edi\n     56c:\te8 00 00 00 00       \tcallq  571 <select_mode+0x8e>\n     571:\t83 e8 01             \tsub    $0x1,%eax\n     574:\t48 98                \tcltq   \n     576:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     57a:\tc7 05 00 00 00 00 0b \tmovl   $0xb,0x0(%rip)        # 584 <select_mode+0xa1>\n     581:\t00 00 00 \n     584:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 58a <select_mode+0xa7>\n     58a:\t83 f8 08             \tcmp    $0x8,%eax\n     58d:\t75 0f                \tjne    59e <select_mode+0xbb>\n     58f:\tc7 05 00 00 00 00 0a \tmovl   $0xa,0x0(%rip)        # 599 <select_mode+0xb6>\n     596:\t00 00 00 \n     599:\te9 ab 01 00 00       \tjmpq   749 <select_mode+0x266>\n     59e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 5a4 <select_mode+0xc1>\n     5a4:\t83 f8 10             \tcmp    $0x10,%eax\n     5a7:\t75 77                \tjne    620 <select_mode+0x13d>\n     5a9:\t48 81 7d f0 00 f8 00 \tcmpq   $0xf800,-0x10(%rbp)\n     5b0:\t00 \n     5b1:\t75 29                \tjne    5dc <select_mode+0xf9>\n     5b3:\t48 81 7d e8 e0 07 00 \tcmpq   $0x7e0,-0x18(%rbp)\n     5ba:\t00 \n     5bb:\t75 1f                \tjne    5dc <select_mode+0xf9>\n     5bd:\t48 83 7d e0 1f       \tcmpq   $0x1f,-0x20(%rbp)\n     5c2:\t75 18                \tjne    5dc <select_mode+0xf9>\n     5c4:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     5c8:\t75 07                \tjne    5d1 <select_mode+0xee>\n     5ca:\tb8 06 00 00 00       \tmov    $0x6,%eax\n     5cf:\teb 05                \tjmp    5d6 <select_mode+0xf3>\n     5d1:\tb8 07 00 00 00       \tmov    $0x7,%eax\n     5d6:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 5dc <select_mode+0xf9>\n     5dc:\t48 81 7d f0 00 7c 00 \tcmpq   $0x7c00,-0x10(%rbp)\n     5e3:\t00 \n     5e4:\t0f 85 5f 01 00 00    \tjne    749 <select_mode+0x266>\n     5ea:\t48 81 7d e8 e0 03 00 \tcmpq   $0x3e0,-0x18(%rbp)\n     5f1:\t00 \n     5f2:\t0f 85 51 01 00 00    \tjne    749 <select_mode+0x266>\n     5f8:\t48 83 7d e0 1f       \tcmpq   $0x1f,-0x20(%rbp)\n     5fd:\t0f 85 46 01 00 00    \tjne    749 <select_mode+0x266>\n     603:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     607:\t75 07                \tjne    610 <select_mode+0x12d>\n     609:\tb8 08 00 00 00       \tmov    $0x8,%eax\n     60e:\teb 05                \tjmp    615 <select_mode+0x132>\n     610:\tb8 09 00 00 00       \tmov    $0x9,%eax\n     615:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 61b <select_mode+0x138>\n     61b:\te9 29 01 00 00       \tjmpq   749 <select_mode+0x266>\n     620:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 626 <select_mode+0x143>\n     626:\t83 f8 18             \tcmp    $0x18,%eax\n     629:\t75 6b                \tjne    696 <select_mode+0x1b3>\n     62b:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n     630:\t75 26                \tjne    658 <select_mode+0x175>\n     632:\t48 83 7d d0 08       \tcmpq   $0x8,-0x30(%rbp)\n     637:\t75 1f                \tjne    658 <select_mode+0x175>\n     639:\t48 83 7d c8 10       \tcmpq   $0x10,-0x38(%rbp)\n     63e:\t75 18                \tjne    658 <select_mode+0x175>\n     640:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n     644:\t75 07                \tjne    64d <select_mode+0x16a>\n     646:\tb8 04 00 00 00       \tmov    $0x4,%eax\n     64b:\teb 05                \tjmp    652 <select_mode+0x16f>\n     64d:\tb8 05 00 00 00       \tmov    $0x5,%eax\n     652:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 658 <select_mode+0x175>\n     658:\t48 83 7d d8 10       \tcmpq   $0x10,-0x28(%rbp)\n     65d:\t0f 85 e6 00 00 00    \tjne    749 <select_mode+0x266>\n     663:\t48 83 7d d0 08       \tcmpq   $0x8,-0x30(%rbp)\n     668:\t0f 85 db 00 00 00    \tjne    749 <select_mode+0x266>\n     66e:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n     673:\t0f 85 d0 00 00 00    \tjne    749 <select_mode+0x266>\n     679:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n     67d:\t75 07                \tjne    686 <select_mode+0x1a3>\n     67f:\tb8 05 00 00 00       \tmov    $0x5,%eax\n     684:\teb 05                \tjmp    68b <select_mode+0x1a8>\n     686:\tb8 04 00 00 00       \tmov    $0x4,%eax\n     68b:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 691 <select_mode+0x1ae>\n     691:\te9 b3 00 00 00       \tjmpq   749 <select_mode+0x266>\n     696:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 69c <select_mode+0x1b9>\n     69c:\t83 f8 20             \tcmp    $0x20,%eax\n     69f:\t0f 85 a4 00 00 00    \tjne    749 <select_mode+0x266>\n     6a5:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n     6aa:\t75 26                \tjne    6d2 <select_mode+0x1ef>\n     6ac:\t48 83 7d d0 08       \tcmpq   $0x8,-0x30(%rbp)\n     6b1:\t75 1f                \tjne    6d2 <select_mode+0x1ef>\n     6b3:\t48 83 7d c8 10       \tcmpq   $0x10,-0x38(%rbp)\n     6b8:\t75 18                \tjne    6d2 <select_mode+0x1ef>\n     6ba:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n     6be:\t75 07                \tjne    6c7 <select_mode+0x1e4>\n     6c0:\tb8 03 00 00 00       \tmov    $0x3,%eax\n     6c5:\teb 05                \tjmp    6cc <select_mode+0x1e9>\n     6c7:\tb8 02 00 00 00       \tmov    $0x2,%eax\n     6cc:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6d2 <select_mode+0x1ef>\n     6d2:\t48 83 7d d8 08       \tcmpq   $0x8,-0x28(%rbp)\n     6d7:\t75 1e                \tjne    6f7 <select_mode+0x214>\n     6d9:\t48 83 7d d0 10       \tcmpq   $0x10,-0x30(%rbp)\n     6de:\t75 17                \tjne    6f7 <select_mode+0x214>\n     6e0:\t48 83 7d c8 18       \tcmpq   $0x18,-0x38(%rbp)\n     6e5:\t75 10                \tjne    6f7 <select_mode+0x214>\n     6e7:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n     6eb:\t0f 94 c0             \tsete   %al\n     6ee:\t0f b6 c0             \tmovzbl %al,%eax\n     6f1:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6f7 <select_mode+0x214>\n     6f7:\t48 83 7d d8 10       \tcmpq   $0x10,-0x28(%rbp)\n     6fc:\t75 1e                \tjne    71c <select_mode+0x239>\n     6fe:\t48 83 7d d0 08       \tcmpq   $0x8,-0x30(%rbp)\n     703:\t75 17                \tjne    71c <select_mode+0x239>\n     705:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n     70a:\t75 10                \tjne    71c <select_mode+0x239>\n     70c:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n     710:\t0f 95 c0             \tsetne  %al\n     713:\t0f b6 c0             \tmovzbl %al,%eax\n     716:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 71c <select_mode+0x239>\n     71c:\t48 83 7d d8 18       \tcmpq   $0x18,-0x28(%rbp)\n     721:\t75 26                \tjne    749 <select_mode+0x266>\n     723:\t48 83 7d d0 10       \tcmpq   $0x10,-0x30(%rbp)\n     728:\t75 1f                \tjne    749 <select_mode+0x266>\n     72a:\t48 83 7d c8 08       \tcmpq   $0x8,-0x38(%rbp)\n     72f:\t75 18                \tjne    749 <select_mode+0x266>\n     731:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n     735:\t75 07                \tjne    73e <select_mode+0x25b>\n     737:\tb8 02 00 00 00       \tmov    $0x2,%eax\n     73c:\teb 05                \tjmp    743 <select_mode+0x260>\n     73e:\tb8 03 00 00 00       \tmov    $0x3,%eax\n     743:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 749 <select_mode+0x266>\n     749:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 74f <select_mode+0x26c>\n     74f:\t48 98                \tcltq   \n     751:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     758:\t00 \n     759:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 760 <select_mode+0x27d>\n     760:\t90                   \tnop\n     761:\tc9                   \tleaveq \n     762:\tc3                   \tretq   ", "code_s": "__int64 select_mode() {\n  int v0;\n  int v1;\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  __int64 result;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v13</span>;\n  _BOOL4 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v13</span> = info->byte_order;\n  if (is_big_endian())\n    <span class=\"supfact\">v14</span> = <span class=\"supfact\">v13</span> != Number;\n  else\n    <span class=\"supfact\">v14</span> = <span class=\"supfact\">v13</span> != Number;\n  <span class=\"supfact\">i</span> = qword_17D0;\n  <span class=\"supfact\">v11</span> = qword_17D8;\n  <span class=\"supfact\">v10</span> = qword_17E0;\n  <span class=\"supfact\">v9</span> = ffs(qword_17D0) - Number;\n  <span class=\"supfact\">v8</span> = ffs(<span class=\"supfact\">v11</span>) - Number;\n  <span class=\"supfact\">v7</span> = ffs(<span class=\"supfact\">v10</span>) - Number;\n  dword_17FC = Number;\n  switch (dword_17F8) {\n  case Number:\n    dword_17FC = Number;\n    break;\n  case Number:\n    if (<span class=\"supfact\">i</span> == Number && <span class=\"supfact\">v11</span> == Number &&\n        <span class=\"supfact\">v10</span> == Number) {\n      if (<span class=\"supfact\">v14</span>)\n        v0 = Number;\n      else\n        v0 = Number;\n      dword_17FC = v0;\n    }\n    if (<span class=\"supfact\">i</span> == Number && <span class=\"supfact\">v11</span> == Number &&\n        <span class=\"supfact\">v10</span> == Number) {\n      if (<span class=\"supfact\">v14</span>)\n        v1 = Number;\n      else\n        v1 = Number;\n      dword_17FC = v1;\n    }\n    break;\n  case Number:\n    if (!<span class=\"supfact\">v9</span> && <span class=\"supfact\">v8</span> == Number &&\n        <span class=\"supfact\">v7</span> == Number) {\n      if (<span class=\"supfact\">v13</span> == Number)\n        v2 = Number;\n      else\n        v2 = Number;\n      dword_17FC = v2;\n    }\n    if (<span class=\"supfact\">v9</span> == Number && <span class=\"supfact\">v8</span> == Number &&\n        !<span class=\"supfact\">v7</span>) {\n      if (<span class=\"supfact\">v13</span> == Number)\n        v3 = Number;\n      else\n        v3 = Number;\n      dword_17FC = v3;\n    }\n    break;\n  case Number:\n    if (!<span class=\"supfact\">v9</span> && <span class=\"supfact\">v8</span> == Number &&\n        <span class=\"supfact\">v7</span> == Number) {\n      if (<span class=\"supfact\">v13</span> == Number)\n        v4 = Number;\n      else\n        v4 = Number;\n      dword_17FC = v4;\n    }\n    if (<span class=\"supfact\">v9</span> == Number && <span class=\"supfact\">v8</span> == Number &&\n        <span class=\"supfact\">v7</span> == Number)\n      dword_17FC = <span class=\"supfact\">v13</span> == Number;\n    if (<span class=\"supfact\">v9</span> == Number && <span class=\"supfact\">v8</span> == Number &&\n        !<span class=\"supfact\">v7</span>)\n      dword_17FC = <span class=\"supfact\">v13</span> != Number;\n    if (<span class=\"supfact\">v9</span> == Number && <span class=\"supfact\">v8</span> == Number &&\n        <span class=\"supfact\">v7</span> == Number) {\n      if (<span class=\"supfact\">v13</span> == Number)\n        v5 = Number;\n      else\n        v5 = Number;\n      dword_17FC = v5;\n    }\n    break;\n  }\n  result = (__int64)*(&ximage_convert_funcs + dword_17FC);\n  qword_2800 = result;\n  return result;\n}", "code_t": "void __cdecl select_mode() {\n  int v0;\n  int v1;\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  unsigned __int64 <span class=\"supfact\">bs</span>;\n  unsigned __int64 <span class=\"supfact\">gs_0</span>;\n  unsigned __int64 <span class=\"supfact\">rs</span>;\n  unsigned __int64 <span class=\"supfact\">bm</span>;\n  unsigned __int64 <span class=\"supfact\">gm</span>;\n  unsigned __int64 <span class=\"supfact\">rm</span>;\n  int <span class=\"supfact\">byteorder</span>;\n  int <span class=\"supfact\">byterev</span>;\n  <span class=\"supfact\">byteorder</span> = *((_DWORD *)info.display + Number);\n  if (is_big_endian())\n    <span class=\"supfact\">byterev</span> = <span class=\"supfact\">byteorder</span> != Number;\n  else\n    <span class=\"supfact\">byterev</span> = <span class=\"supfact\">byteorder</span> != Number;\n  <span class=\"supfact\">rm</span> = info.visual.red_mask;\n  <span class=\"supfact\">gm</span> = info.visual.green_mask;\n  <span class=\"supfact\">bm</span> = info.visual.blue_mask;\n  <span class=\"supfact\">rs</span> = ffs(info.visual.red_mask) - Number;\n  <span class=\"supfact\">gs_0</span> = ffs(<span class=\"supfact\">gm</span>) - Number;\n  <span class=\"supfact\">bs</span> = ffs(<span class=\"supfact\">bm</span>) - Number;\n  info.mode = Number;\n  switch (info.bitsperpixel) {\n  case Number:\n    info.mode = Number;\n    break;\n  case Number:\n    if (<span class=\"supfact\">rm</span> == Number && <span class=\"supfact\">gm</span> == Number &&\n        <span class=\"supfact\">bm</span> == Number) {\n      if (<span class=\"supfact\">byterev</span>)\n        v0 = Number;\n      else\n        v0 = Number;\n      info.mode = v0;\n    }\n    if (<span class=\"supfact\">rm</span> == Number && <span class=\"supfact\">gm</span> == Number &&\n        <span class=\"supfact\">bm</span> == Number) {\n      if (<span class=\"supfact\">byterev</span>)\n        v1 = Number;\n      else\n        v1 = Number;\n      info.mode = v1;\n    }\n    break;\n  case Number:\n    if (!<span class=\"supfact\">rs</span> && <span class=\"supfact\">gs_0</span> == Number &&\n        <span class=\"supfact\">bs</span> == Number) {\n      if (<span class=\"supfact\">byteorder</span> == Number)\n        v2 = Number;\n      else\n        v2 = Number;\n      info.mode = v2;\n    }\n    if (<span class=\"supfact\">rs</span> == Number && <span class=\"supfact\">gs_0</span> == Number &&\n        !<span class=\"supfact\">bs</span>) {\n      if (<span class=\"supfact\">byteorder</span> == Number)\n        v3 = Number;\n      else\n        v3 = Number;\n      info.mode = v3;\n    }\n    break;\n  case Number:\n    if (!<span class=\"supfact\">rs</span> && <span class=\"supfact\">gs_0</span> == Number &&\n        <span class=\"supfact\">bs</span> == Number) {\n      if (<span class=\"supfact\">byteorder</span> == Number)\n        v4 = Number;\n      else\n        v4 = Number;\n      info.mode = v4;\n    }\n    if (<span class=\"supfact\">rs</span> == Number && <span class=\"supfact\">gs_0</span> == Number &&\n        <span class=\"supfact\">bs</span> == Number)\n      info.mode = <span class=\"supfact\">byteorder</span> == Number;\n    if (<span class=\"supfact\">rs</span> == Number && <span class=\"supfact\">gs_0</span> == Number &&\n        !<span class=\"supfact\">bs</span>)\n      info.mode = <span class=\"supfact\">byteorder</span> != Number;\n    if (<span class=\"supfact\">rs</span> == Number && <span class=\"supfact\">gs_0</span> == Number &&\n        <span class=\"supfact\">bs</span> == Number) {\n      if (<span class=\"supfact\">byteorder</span> == Number)\n        v5 = Number;\n      else\n        v5 = Number;\n      info.mode = v5;\n    }\n    break;\n  }\n  info.convert_func = ximage_convert_funcs[info.mode];\n}", "var": [{"name": "v14", "type": "int", "ref_name": "byterev", "ref_type": "int"}, {"name": "v13", "type": "int", "ref_name": "byteorder", "ref_type": "int"}, {"name": "i", "type": "__unk__", "ref_name": "rm", "ref_type": "unsigned __int64"}, {"name": "v11", "type": "__unk__", "ref_name": "gm", "ref_type": "unsigned __int64"}, {"name": "v10", "type": "__unk__", "ref_name": "bm", "ref_type": "unsigned __int64"}, {"name": "v9", "type": "__unk__", "ref_name": "rs", "ref_type": "unsigned __int64"}, {"name": "v8", "type": "__unk__", "ref_name": "gs_0", "ref_type": "unsigned __int64"}, {"name": "v7", "type": "__unk__", "ref_name": "bs", "ref_type": "unsigned __int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "ywang-git", "repo_name": "XBeeProject", "path": "ywang-git/XBeeProject/7b5bf86fb6ef537100bfa5ee7e488dec9d7a14287780fed0c93db74c1ac577d8", "path_in_repo": "ywang-git/XBeeProject/lib/zlog/test/test_hex", "objdump": "00000000004111e8 <zc_hashtable_clean>:\n  4111e8:\t55                   \tpush   %rbp\n  4111e9:\t48 89 e5             \tmov    %rsp,%rbp\n  4111ec:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4111f0:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4111f4:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  4111fb:\t00 \n  4111fc:\te9 a6 00 00 00       \tjmpq   4112a7 <zc_hashtable_clean+0xbf>\n  411201:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  411205:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  411209:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  41120d:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  411211:\t48 01 d0             \tadd    %rdx,%rax\n  411214:\t48 8b 00             \tmov    (%rax),%rax\n  411217:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  41121b:\teb 64                \tjmp    411281 <zc_hashtable_clean+0x99>\n  41121d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  411221:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  411225:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  411229:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41122d:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  411231:\t48 85 c0             \ttest   %rax,%rax\n  411234:\t74 15                \tje     41124b <zc_hashtable_clean+0x63>\n  411236:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41123a:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  41123e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  411242:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  411246:\t48 89 c7             \tmov    %rax,%rdi\n  411249:\tff d2                \tcallq  *%rdx\n  41124b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41124f:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  411253:\t48 85 c0             \ttest   %rax,%rax\n  411256:\t74 15                \tje     41126d <zc_hashtable_clean+0x85>\n  411258:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41125c:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n  411260:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  411264:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  411268:\t48 89 c7             \tmov    %rax,%rdi\n  41126b:\tff d2                \tcallq  *%rdx\n  41126d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  411271:\t48 89 c7             \tmov    %rax,%rdi\n  411274:\te8 d7 0d ff ff       \tcallq  402050 <free@plt>\n  411279:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41127d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  411281:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  411286:\t75 95                \tjne    41121d <zc_hashtable_clean+0x35>\n  411288:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41128c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  411290:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  411294:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  411298:\t48 01 d0             \tadd    %rdx,%rax\n  41129b:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  4112a2:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  4112a7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4112ab:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4112af:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  4112b3:\t0f 82 48 ff ff ff    \tjb     411201 <zc_hashtable_clean+0x19>\n  4112b9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4112bd:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  4112c4:\t90                   \tnop\n  4112c5:\tc9                   \tleaveq \n  4112c6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall zc_hashtable_clean(__int64 a1) {\n  __int64 result;\n  _QWORD *<span class=\"supfact\">v2</span>;\n  _QWORD *<span class=\"supfact\">ptr</span>;\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number L;\n       <span class=\"supfact\">i</span> < *(_QWORD *)(a1 + Number); ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">ptr</span> = *(_QWORD **)(Number * <span class=\"supfact\">i</span> +\n                                            *(_QWORD *)(a1 + Number));\n         <span class=\"supfact\">ptr</span>; <span class=\"supfact\">ptr</span> = <span class=\"supfact\">v2</span>) {\n      <span class=\"supfact\">v2</span> = (_QWORD *)<span class=\"supfact\">ptr</span>[Number];\n      if (*(_QWORD *)(a1 + Number))\n        (*(void(__fastcall **)(_QWORD))(a1 + Number))(\n            <span class=\"supfact\">ptr</span>[Number]);\n      if (*(_QWORD *)(a1 + Number))\n        (*(void(__fastcall **)(_QWORD))(a1 + Number))(\n            <span class=\"supfact\">ptr</span>[Number]);\n      free(<span class=\"supfact\">ptr</span>);\n    }\n    *(_QWORD *)(Number * <span class=\"supfact\">i</span> + *(_QWORD *)(a1 + Number)) =\n        Number L;\n  }\n  result = a1;\n  *(_QWORD *)a1 = Number L;\n  return result;\n}", "code_t": "void __cdecl zc_hashtable_clean(zc_hashtable_t *a_table) {\n  zc_hashtable_entry_t *<span class=\"supfact\">q</span>;\n  zc_hashtable_entry_t *<span class=\"supfact\">p</span>;\n  size_t <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> < a_table->tab_size;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">p</span> = a_table->tab[<span class=\"supfact\">i</span>]; <span class=\"supfact\">p</span>;\n         <span class=\"supfact\">p</span> = <span class=\"supfact\">q</span>) {\n      <span class=\"supfact\">q</span> = <span class=\"supfact\">p</span>->next;\n      if (a_table->key_del)\n        a_table->key_del(<span class=\"supfact\">p</span>->key);\n      if (a_table->value_del)\n        a_table->value_del(<span class=\"supfact\">p</span>->value);\n      free(<span class=\"supfact\">p</span>);\n    }\n    a_table->tab[<span class=\"supfact\">i</span>] = Number L;\n  }\n  a_table->nelem = Number L;\n}", "var": [{"name": "i", "type": "size_t", "ref_name": "i", "ref_type": "size_t"}, {"name": "ptr", "type": "zc_hashtable_entry_t *", "ref_name": "p", "ref_type": "zc_hashtable_entry_t *"}, {"name": "v2", "type": "zc_hashtable_entry_t *", "ref_name": "q", "ref_type": "zc_hashtable_entry_t *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/a2002ae660175968e0b86e8dc91bf56b26f8865ccb1769d705308d7677d5574f", "path_in_repo": "madeye/GRACE/qemu-0.12.5/ppcemb-softmmu/translate.o", "objdump": "000000000000616a <gen_helper_vmsumshs>:\n    616a:\t55                   \tpush   %rbp\n    616b:\t48 89 e5             \tmov    %rsp,%rbp\n    616e:\t48 83 ec 40          \tsub    $0x40,%rsp\n    6172:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    6175:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    6178:\t89 55 c4             \tmov    %edx,-0x3c(%rbp)\n    617b:\t89 4d c0             \tmov    %ecx,-0x40(%rbp)\n    617e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    6185:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    6188:\t48 98                \tcltq   \n    618a:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    618e:\t83 4d fc 02          \torl    $0x2,-0x4(%rbp)\n    6192:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    6195:\t48 98                \tcltq   \n    6197:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    619b:\t83 4d fc 04          \torl    $0x4,-0x4(%rbp)\n    619f:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    61a2:\t48 98                \tcltq   \n    61a4:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    61a8:\t83 4d fc 08          \torl    $0x8,-0x4(%rbp)\n    61ac:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    61af:\t48 98                \tcltq   \n    61b1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    61b5:\t83 4d fc 10          \torl    $0x10,-0x4(%rbp)\n    61b9:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    61bd:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    61c0:\t49 89 d1             \tmov    %rdx,%r9\n    61c3:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n    61c9:\t48 c7 c1 ff ff ff ff \tmov    $0xffffffffffffffff,%rcx\n    61d0:\t89 c2                \tmov    %eax,%edx\n    61d2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    61d7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    61dc:\te8 8f a7 ff ff       \tcallq  970 <tcg_gen_helperN>\n    61e1:\t90                   \tnop\n    61e2:\tc9                   \tleaveq \n    61e3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gen_helper_vmsumshs(int a1, int a2, int a3, int a4) {\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  int <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v5</span>[Number] = a1;\n  <span class=\"supfact\">v5</span>[Number] = a2;\n  <span class=\"supfact\">v5</span>[Number] = a3;\n  <span class=\"supfact\">v5</span>[Number] = a4;\n  <span class=\"supfact\">v6</span> = Number;\n  return tcg_gen_helperN((__int64)&helper_vmsumshs, Number, Number, Number,\n                         Number, (__int64)<span class=\"supfact\">v5</span>);\n}", "code_t": "void __cdecl gen_helper_vmsumshs(TCGv_i64 arg1, TCGv_i64 arg2, TCGv_i64 arg3,\n                                 TCGv_i64 arg4) {\n  TCGArg <span class=\"supfact\">args</span>[Number];\n  int <span class=\"supfact\">sizemask</span>;\n  <span class=\"supfact\">args</span>[Number] = arg1;\n  <span class=\"supfact\">args</span>[Number] = arg2;\n  <span class=\"supfact\">args</span>[Number] = arg3;\n  <span class=\"supfact\">args</span>[Number] = arg4;\n  <span class=\"supfact\">sizemask</span> = Number;\n  tcg_gen_helperN(&helper_vmsumshs, Number, Number, Number, Number,\n                  <span class=\"supfact\">args</span>);\n}", "var": [{"name": "v6", "type": "int", "ref_name": "sizemask", "ref_type": "int"}, {"name": "v5", "type": "TCGArg[4]", "ref_name": "args", "ref_type": "TCGArg[4]"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "KorolevaYana", "repo_name": "OS", "path": "KorolevaYana/OS/8bbedd3253fbf649fcd4e5064ab8fff58a83f533e114f4317cd045c6d45d5c9e", "path_in_repo": "KorolevaYana/OS/netsh/netsh", "objdump": "0000000000409038 <_ZNSt8_Rb_treeIiSt4pairIKi6serverESt10_Select1stIS3_ESt4lessIiESaIS3_EE5beginEv>:\n  409038:\t55                   \tpush   %rbp\n  409039:\t48 89 e5             \tmov    %rsp,%rbp\n  40903c:\t48 83 ec 20          \tsub    $0x20,%rsp\n  409040:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  409044:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409048:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n  40904c:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  409050:\t48 89 d6             \tmov    %rdx,%rsi\n  409053:\t48 89 c7             \tmov    %rax,%rdi\n  409056:\te8 fb 0f 00 00       \tcallq  40a056 <_ZNSt17_Rb_tree_iteratorISt4pairIKi6serverEEC1EPSt18_Rb_tree_node_base>\n  40905b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40905f:\tc9                   \tleaveq \n  409060:\tc3                   \tretq   \n  409061:\t90                   \tnop", "code_s": "__int64 __fastcall std\n    _Rb_tree<int, std pair<int const, server>,\n             std _Select1st<std pair<int const, server>>, std less<int>,\n             std allocator<std pair<int const, server>>>\n    begin(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  std _Rb_tree_iterator<std pair<int const, server>> _Rb_tree_iterator(\n      &<span class=\"supfact\">v2</span>, *(_QWORD *)(a1 + Number));\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std _Rb_tree<int, std pair<int const, server>,\n             std _Select1st<std pair<int const, server>>, std less<int>,\n             std allocator<std pair<int const, server>>>\n    iterator __cdecl std _Rb_tree<int, std pair<int const, server>,\n                                  std _Select1st<std pair<int const, server>>,\n                                  std less<int>,\n                                  std allocator<std pair<int const, server>>>\n    begin(\n        std _Rb_tree<int, std pair<int const, server>,\n                     std _Select1st<std pair<int const, server>>, std less<int>,\n                     std allocator<std pair<int const, server>>> *const this) {\n  std _Rb_tree_iterator<std pair<int const, server>> <span class=\"supfact\">v2</span>;\n  std _Rb_tree_iterator<std pair<int const, server>> _Rb_tree_iterator(\n      &<span class=\"supfact\">v2</span>, this->_M_impl._M_header._M_left);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/95e2976d4dbab75a04d3663dbd6d625147c011b33b8fb7696190981a0e7d946e", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_data_structures_84790dfc.o", "objdump": "0000000000003794 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv>:\n    3794:\t55                   \tpush   %rbp\n    3795:\t48 89 e5             \tmov    %rsp,%rbp\n    3798:\t53                   \tpush   %rbx\n    3799:\t48 83 ec 68          \tsub    $0x68,%rsp\n    379d:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    37a1:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n    37a5:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    37a9:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    37ad:\t48 89 d6             \tmov    %rdx,%rsi\n    37b0:\t48 89 c7             \tmov    %rax,%rdi\n    37b3:\te8 00 00 00 00       \tcallq  37b8 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x24>\n    37b8:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    37bc:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    37c0:\t48 89 c6             \tmov    %rax,%rsi\n    37c3:\t48 89 d7             \tmov    %rdx,%rdi\n    37c6:\te8 00 00 00 00       \tcallq  37cb <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x37>\n    37cb:\t83 f0 01             \txor    $0x1,%eax\n    37ce:\t89 c3                \tmov    %eax,%ebx\n    37d0:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    37d4:\t48 89 c7             \tmov    %rax,%rdi\n    37d7:\te8 00 00 00 00       \tcallq  37dc <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x48>\n    37dc:\t84 db                \ttest   %bl,%bl\n    37de:\t74 27                \tje     3807 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x73>\n    37e0:\tbe 32 00 00 00       \tmov    $0x32,%esi\n    37e5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    37ea:\te8 00 00 00 00       \tcallq  37ef <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x5b>\n    37ef:\te8 00 00 00 00       \tcallq  37f4 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x60>\n    37f4:\t84 c0                \ttest   %al,%al\n    37f6:\t74 0f                \tje     3807 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x73>\n    37f8:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    37fd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3802:\te8 00 00 00 00       \tcallq  3807 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x73>\n    3807:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    380b:\t0f b6 40 20          \tmovzbl 0x20(%rax),%eax\n    380f:\t84 c0                \ttest   %al,%al\n    3811:\t74 07                \tje     381a <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x86>\n    3813:\tba 00 00 00 00       \tmov    $0x0,%edx\n    3818:\teb 05                \tjmp    381f <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x8b>\n    381a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    381f:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    3823:\t48 89 d6             \tmov    %rdx,%rsi\n    3826:\t48 89 c7             \tmov    %rax,%rdi\n    3829:\te8 00 00 00 00       \tcallq  382e <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x9a>\n    382e:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    3832:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n    3836:\t48 89 d6             \tmov    %rdx,%rsi\n    3839:\t48 89 c7             \tmov    %rax,%rdi\n    383c:\te8 00 00 00 00       \tcallq  3841 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0xad>\n    3841:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    3845:\t48 83 c0 10          \tadd    $0x10,%rax\n    3849:\t48 89 c7             \tmov    %rax,%rdi\n    384c:\te8 00 00 00 00       \tcallq  3851 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0xbd>\n    3851:\t84 c0                \ttest   %al,%al\n    3853:\t74 19                \tje     386e <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0xda>\n    3855:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    3859:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n    385d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    3861:\t48 89 d6             \tmov    %rdx,%rsi\n    3864:\t48 89 c7             \tmov    %rax,%rdi\n    3867:\te8 00 00 00 00       \tcallq  386c <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0xd8>\n    386c:\teb 15                \tjmp    3883 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0xef>\n    386e:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    3872:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    3876:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    387b:\t48 89 c7             \tmov    %rax,%rdi\n    387e:\te8 00 00 00 00       \tcallq  3883 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0xef>\n    3883:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    3887:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n    388b:\t48 89 d6             \tmov    %rdx,%rsi\n    388e:\t48 89 c7             \tmov    %rax,%rdi\n    3891:\te8 00 00 00 00       \tcallq  3896 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x102>\n    3896:\t48 8d 45 a8          \tlea    -0x58(%rbp),%rax\n    389a:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n    389e:\t48 8d 4d b8          \tlea    -0x48(%rbp),%rcx\n    38a2:\t48 89 ce             \tmov    %rcx,%rsi\n    38a5:\t48 89 c7             \tmov    %rax,%rdi\n    38a8:\te8 00 00 00 00       \tcallq  38ad <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x119>\n    38ad:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    38b1:\t48 89 c7             \tmov    %rax,%rdi\n    38b4:\te8 00 00 00 00       \tcallq  38b9 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x125>\n    38b9:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n    38bd:\t48 89 c7             \tmov    %rax,%rdi\n    38c0:\te8 00 00 00 00       \tcallq  38c5 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x131>\n    38c5:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    38c9:\t48 89 c7             \tmov    %rax,%rdi\n    38cc:\te8 00 00 00 00       \tcallq  38d1 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x13d>\n    38d1:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    38d5:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    38d9:\t48 89 d6             \tmov    %rdx,%rsi\n    38dc:\t48 89 c7             \tmov    %rax,%rdi\n    38df:\te8 00 00 00 00       \tcallq  38e4 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x150>\n    38e4:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    38e8:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    38ec:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    38f0:\t48 89 ce             \tmov    %rcx,%rsi\n    38f3:\t48 89 c7             \tmov    %rax,%rdi\n    38f6:\te8 00 00 00 00       \tcallq  38fb <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x167>\n    38fb:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    38ff:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n    3903:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n    3907:\t48 89 d6             \tmov    %rdx,%rsi\n    390a:\t48 89 c7             \tmov    %rax,%rdi\n    390d:\te8 00 00 00 00       \tcallq  3912 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x17e>\n    3912:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n    3916:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    391a:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    391e:\t48 89 c6             \tmov    %rax,%rsi\n    3921:\t48 89 cf             \tmov    %rcx,%rdi\n    3924:\te8 00 00 00 00       \tcallq  3929 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x195>\n    3929:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    392d:\t48 89 c7             \tmov    %rax,%rdi\n    3930:\te8 00 00 00 00       \tcallq  3935 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x1a1>\n    3935:\t48 8d 45 a8          \tlea    -0x58(%rbp),%rax\n    3939:\t48 89 c7             \tmov    %rax,%rdi\n    393c:\te8 00 00 00 00       \tcallq  3941 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x1ad>\n    3941:\teb 67                \tjmp    39aa <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x216>\n    3943:\t48 89 c3             \tmov    %rax,%rbx\n    3946:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    394a:\t48 89 c7             \tmov    %rax,%rdi\n    394d:\te8 00 00 00 00       \tcallq  3952 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x1be>\n    3952:\teb 03                \tjmp    3957 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x1c3>\n    3954:\t48 89 c3             \tmov    %rax,%rbx\n    3957:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n    395b:\t48 89 c7             \tmov    %rax,%rdi\n    395e:\te8 00 00 00 00       \tcallq  3963 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x1cf>\n    3963:\teb 03                \tjmp    3968 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x1d4>\n    3965:\t48 89 c3             \tmov    %rax,%rbx\n    3968:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    396c:\t48 89 c7             \tmov    %rax,%rdi\n    396f:\te8 00 00 00 00       \tcallq  3974 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x1e0>\n    3974:\t48 89 d8             \tmov    %rbx,%rax\n    3977:\t48 89 c7             \tmov    %rax,%rdi\n    397a:\te8 00 00 00 00       \tcallq  397f <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x1eb>\n    397f:\t48 89 c3             \tmov    %rax,%rbx\n    3982:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    3986:\t48 89 c7             \tmov    %rax,%rdi\n    3989:\te8 00 00 00 00       \tcallq  398e <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x1fa>\n    398e:\teb 03                \tjmp    3993 <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x1ff>\n    3990:\t48 89 c3             \tmov    %rax,%rbx\n    3993:\t48 8d 45 a8          \tlea    -0x58(%rbp),%rax\n    3997:\t48 89 c7             \tmov    %rax,%rdi\n    399a:\te8 00 00 00 00       \tcallq  399f <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x20b>\n    399f:\t48 89 d8             \tmov    %rbx,%rax\n    39a2:\t48 89 c7             \tmov    %rax,%rdi\n    39a5:\te8 00 00 00 00       \tcallq  39aa <_ZNK4juce14PropertiesFile7Options14getDefaultFileEv+0x216>\n    39aa:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    39ae:\t48 83 c4 68          \tadd    $0x68,%rsp\n    39b2:\t5b                   \tpop    %rbx\n    39b3:\t5d                   \tpop    %rbp\n    39b4:\tc3                   \tretq   \n    39b5:\t90                   \tnop", "code_s": "juce PropertiesFile Options *__fastcall juce PropertiesFile Options\ngetDefaultFile(juce PropertiesFile Options *this, _BYTE *a2) {\n  int v2;\n  int v3;\n  const char *v4;\n  char <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  char <span class=\"supfact\">v8</span>[Number];\n  char <span class=\"supfact\">v9</span>[Number];\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>[Number];\n  char <span class=\"supfact\">v12</span>[Number];\n  char <span class=\"supfact\">v13</span>[Number];\n  char <span class=\"supfact\">v14</span>[Number];\n  juce File createLegalFileName((juce File *)<span class=\"supfact\">v7</span>,\n                                (const juce String *)a2);\n  v2 = juce operator==(a2, <span class=\"supfact\">v7</span>) ^ Number;\n  juce String ~String((juce String *)<span class=\"supfact\">v7</span>);\n  if ((_BYTE)v2) {\n    juce logAssertion((juce *)String, (const char *)&loc_2F + Number, v3);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  if (a2[Number])\n    v4 = String;\n  else\n    v4 = String;\n  juce String String((juce String *)<span class=\"supfact\">v9</span>, v4);\n  juce File File((juce File *)<span class=\"supfact\">v8</span>,\n                 (const juce String *)<span class=\"supfact\">v9</span>);\n  if ((unsigned __int8)juce String isNotEmpty((juce String *)(a2 + Number)))\n    juce String String((juce String *)<span class=\"supfact\">v11</span>,\n                       (const juce String *)(a2 + Number));\n  else\n    juce operator+(<span class=\"supfact\">v11</span>, String, a2);\n  juce StringRef StringRef((juce StringRef *)<span class=\"supfact\">v10</span>,\n                           (const juce String *)<span class=\"supfact\">v11</span>);\n  juce File getChildFile(<span class=\"supfact\">v6</span>, <span class=\"supfact\">v8</span>,\n                         <span class=\"supfact\">v10</span>);\n  juce String ~String((juce String *)<span class=\"supfact\">v11</span>);\n  juce File ~File((juce File *)<span class=\"supfact\">v8</span>);\n  juce String ~String((juce String *)<span class=\"supfact\">v9</span>);\n  juce StringRef StringRef((juce StringRef *)<span class=\"supfact\">v13</span>,\n                           (const juce String *)a2);\n  juce File getChildFile(<span class=\"supfact\">v12</span>, <span class=\"supfact\">v6</span>,\n                         <span class=\"supfact\">v13</span>);\n  juce StringRef StringRef((juce StringRef *)<span class=\"supfact\">v14</span>,\n                           (const juce String *)(a2 + Number));\n  juce File withFileExtension(this, <span class=\"supfact\">v12</span>, <span class=\"supfact\">v14</span>);\n  juce File ~File((juce File *)<span class=\"supfact\">v12</span>);\n  juce File ~File((juce File *)<span class=\"supfact\">v6</span>);\n  return this;\n}", "code_t": "juce File __cdecl juce PropertiesFile Options\ngetDefaultFile(const juce PropertiesFile Options *const this) {\n  __int64 v1;\n  int v2;\n  int v3;\n  const char *v4;\n  juce File <span class=\"supfact\">dir</span>;\n  juce String <span class=\"supfact\">v7</span>;\n  juce File <span class=\"supfact\">v8</span>;\n  juce String <span class=\"supfact\">v9</span>;\n  juce StringRef <span class=\"supfact\">v10</span>;\n  juce String <span class=\"supfact\">v11</span>;\n  juce File <span class=\"supfact\">v12</span>;\n  juce StringRef <span class=\"supfact\">v13</span>;\n  juce StringRef <span class=\"supfact\">v14</span>;\n  juce File createLegalFileName((juce File *)&<span class=\"supfact\">v7</span>,\n                                (const juce String *)v1);\n  v2 = juce operator==(v1, &<span class=\"supfact\">v7</span>) ^ Number;\n  juce String ~String(&<span class=\"supfact\">v7</span>);\n  if ((_BYTE)v2) {\n    juce logAssertion((juce *)String, (const char *)&loc_2F + Number, v3);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  if (*(_BYTE *)(v1 + Number))\n    v4 = String;\n  else\n    v4 = String;\n  juce String String(&<span class=\"supfact\">v9</span>, v4);\n  juce File File(&<span class=\"supfact\">v8</span>, &<span class=\"supfact\">v9</span>);\n  if (juce String isNotEmpty((const juce String *const)(v1 + Number)))\n    juce String String(&<span class=\"supfact\">v11</span>,\n                       (const juce String *)(v1 + Number));\n  else\n    ((void(__fastcall *)(juce String *, const char *))juce operator+)(\n        &<span class=\"supfact\">v11</span>, String);\n  juce StringRef StringRef(&<span class=\"supfact\">v10</span>, &<span class=\"supfact\">v11</span>);\n  juce File getChildFile(&<span class=\"supfact\">dir</span>,\n                         (juce StringRef)&<span class=\"supfact\">v8</span>);\n  juce String ~String(&<span class=\"supfact\">v11</span>);\n  juce File ~File(&<span class=\"supfact\">v8</span>);\n  juce String ~String(&<span class=\"supfact\">v9</span>);\n  juce StringRef StringRef(&<span class=\"supfact\">v13</span>, (const juce String *)v1);\n  juce File getChildFile(&<span class=\"supfact\">v12</span>,\n                         (juce StringRef)&<span class=\"supfact\">dir</span>);\n  juce StringRef StringRef(&<span class=\"supfact\">v14</span>,\n                           (const juce String *)(v1 + Number));\n  juce File withFileExtension((juce File *)this,\n                              (juce StringRef)&<span class=\"supfact\">v12</span>);\n  juce File ~File(&<span class=\"supfact\">v12</span>);\n  juce File ~File(&<span class=\"supfact\">dir</span>);\n  return (juce File)this;\n}", "var": [{"name": "v14", "type": "struct juce::StringRef { juce::String::CharPointerType text; }", "ref_name": "v14", "ref_type": "struct juce::StringRef { juce::String::CharPointerType text; }"}, {"name": "v13", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "v13", "ref_type": "struct juce::StringRef { juce::String::CharPointerType text; }"}, {"name": "v12", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "v12", "ref_type": "__unk__"}, {"name": "v11", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "v11", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}, {"name": "v10", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "v10", "ref_type": "struct juce::StringRef { juce::String::CharPointerType text; }"}, {"name": "v9", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "v9", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}, {"name": "v8", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "v8", "ref_type": "__unk__"}, {"name": "v7", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "v7", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}, {"name": "v6", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "dir", "ref_type": "__unk__"}], "has_struc": true, "body_in_train": false}, {"repo_owner": "iortcw", "repo_name": "iortcw", "path": "iortcw/iortcw/669f3be6186160c5bac35df60d28d3ae86a1122168429c081ae841d31288ec12", "path_in_repo": "iortcw/iortcw/SP/build/release-linux-x86_64/rend2/tr_vbo.o", "objdump": "00000000000005f6 <R_CreateVao>:\n     5f6:\t55                   \tpush   %rbp\n     5f7:\t48 89 e5             \tmov    %rsp,%rbp\n     5fa:\t53                   \tpush   %rbx\n     5fb:\t48 83 ec 48          \tsub    $0x48,%rsp\n     5ff:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     603:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     607:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n     60a:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n     60e:\t44 89 45 c8          \tmov    %r8d,-0x38(%rbp)\n     612:\t44 89 4d bc          \tmov    %r9d,-0x44(%rbp)\n     616:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n     61a:\t74 08                \tje     624 <R_CreateVao+0x2e>\n     61c:\t83 7d bc 01          \tcmpl   $0x1,-0x44(%rbp)\n     620:\t74 0b                \tje     62d <R_CreateVao+0x37>\n     622:\teb 12                \tjmp    636 <R_CreateVao+0x40>\n     624:\tc7 45 ec e4 88 00 00 \tmovl   $0x88e4,-0x14(%rbp)\n     62b:\teb 2c                \tjmp    659 <R_CreateVao+0x63>\n     62d:\tc7 45 ec e8 88 00 00 \tmovl   $0x88e8,-0x14(%rbp)\n     634:\teb 23                \tjmp    659 <R_CreateVao+0x63>\n     636:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 63d <R_CreateVao+0x47>\n     63d:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n     641:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     644:\t89 c2                \tmov    %eax,%edx\n     646:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 64d <R_CreateVao+0x57>\n     64d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     652:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     657:\tff d1                \tcallq  *%rcx\n     659:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     65d:\t48 89 c7             \tmov    %rax,%rdi\n     660:\te8 00 00 00 00       \tcallq  665 <R_CreateVao+0x6f>\n     665:\t48 83 f8 3f          \tcmp    $0x3f,%rax\n     669:\t76 25                \tjbe    690 <R_CreateVao+0x9a>\n     66b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 672 <R_CreateVao+0x7c>\n     672:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n     676:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     67a:\t48 89 c2             \tmov    %rax,%rdx\n     67d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 684 <R_CreateVao+0x8e>\n     684:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     689:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     68e:\tff d1                \tcallq  *%rcx\n     690:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 697 <R_CreateVao+0xa1>\n     697:\t8b 80 60 f9 03 00    \tmov    0x3f960(%rax),%eax\n     69d:\t3d 00 10 00 00       \tcmp    $0x1000,%eax\n     6a2:\t75 1e                \tjne    6c2 <R_CreateVao+0xcc>\n     6a4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6ab <R_CreateVao+0xb5>\n     6ab:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     6af:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6b6 <R_CreateVao+0xc0>\n     6b6:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     6bb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6c0:\tff d2                \tcallq  *%rdx\n     6c2:\te8 00 00 00 00       \tcallq  6c7 <R_CreateVao+0xd1>\n     6c7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6ce <R_CreateVao+0xd8>\n     6ce:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     6d2:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 6d9 <R_CreateVao+0xe3>\n     6d9:\t8b 9a 60 f9 03 00    \tmov    0x3f960(%rdx),%ebx\n     6df:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     6e4:\tbf d8 01 00 00       \tmov    $0x1d8,%edi\n     6e9:\tff d0                \tcallq  *%rax\n     6eb:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 6f2 <R_CreateVao+0xfc>\n     6f2:\t48 63 cb             \tmovslq %ebx,%rcx\n     6f5:\t48 81 c1 2c 7f 00 00 \tadd    $0x7f2c,%rcx\n     6fc:\t48 89 44 ca 08       \tmov    %rax,0x8(%rdx,%rcx,8)\n     701:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 708 <R_CreateVao+0x112>\n     708:\t48 63 d3             \tmovslq %ebx,%rdx\n     70b:\t48 81 c2 2c 7f 00 00 \tadd    $0x7f2c,%rdx\n     712:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     717:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     71b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 722 <R_CreateVao+0x12c>\n     722:\t8b 80 60 f9 03 00    \tmov    0x3f960(%rax),%eax\n     728:\t8d 50 01             \tlea    0x1(%rax),%edx\n     72b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 732 <R_CreateVao+0x13c>\n     732:\t89 90 60 f9 03 00    \tmov    %edx,0x3f960(%rax)\n     738:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     73c:\tba d8 01 00 00       \tmov    $0x1d8,%edx\n     741:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     746:\t48 89 c7             \tmov    %rax,%rdi\n     749:\te8 00 00 00 00       \tcallq  74e <R_CreateVao+0x158>\n     74e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     752:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n     756:\tba 40 00 00 00       \tmov    $0x40,%edx\n     75b:\t48 89 ce             \tmov    %rcx,%rsi\n     75e:\t48 89 c7             \tmov    %rax,%rdi\n     761:\te8 00 00 00 00       \tcallq  766 <R_CreateVao+0x170>\n     766:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 76d <R_CreateVao+0x177>\n     76d:\t8b 40 40             \tmov    0x40(%rax),%eax\n     770:\t85 c0                \ttest   %eax,%eax\n     772:\t74 31                \tje     7a5 <R_CreateVao+0x1af>\n     774:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 77b <R_CreateVao+0x185>\n     77b:\t48 8b 00             \tmov    (%rax),%rax\n     77e:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     782:\t48 83 c2 40          \tadd    $0x40,%rdx\n     786:\t48 89 d6             \tmov    %rdx,%rsi\n     789:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     78e:\tff d0                \tcallq  *%rax\n     790:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 797 <R_CreateVao+0x1a1>\n     797:\t48 8b 10             \tmov    (%rax),%rdx\n     79a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     79e:\t8b 40 40             \tmov    0x40(%rax),%eax\n     7a1:\t89 c7                \tmov    %eax,%edi\n     7a3:\tff d2                \tcallq  *%rdx\n     7a5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     7a9:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     7ac:\t89 50 48             \tmov    %edx,0x48(%rax)\n     7af:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7b6 <R_CreateVao+0x1c0>\n     7b6:\t48 8b 00             \tmov    (%rax),%rax\n     7b9:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     7bd:\t48 83 c2 44          \tadd    $0x44,%rdx\n     7c1:\t48 89 d6             \tmov    %rdx,%rsi\n     7c4:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     7c9:\tff d0                \tcallq  *%rax\n     7cb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7d2 <R_CreateVao+0x1dc>\n     7d2:\t48 8b 10             \tmov    (%rax),%rdx\n     7d5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     7d9:\t8b 40 44             \tmov    0x44(%rax),%eax\n     7dc:\t89 c6                \tmov    %eax,%esi\n     7de:\tbf 92 88 00 00       \tmov    $0x8892,%edi\n     7e3:\tff d2                \tcallq  *%rdx\n     7e5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7ec <R_CreateVao+0x1f6>\n     7ec:\t4c 8b 00             \tmov    (%rax),%r8\n     7ef:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n     7f2:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     7f5:\t48 98                \tcltq   \n     7f7:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     7fb:\t48 89 c6             \tmov    %rax,%rsi\n     7fe:\tbf 92 88 00 00       \tmov    $0x8892,%edi\n     803:\t41 ff d0             \tcallq  *%r8\n     806:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     80a:\t8b 55 c8             \tmov    -0x38(%rbp),%edx\n     80d:\t89 90 d4 01 00 00    \tmov    %edx,0x1d4(%rax)\n     813:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 81a <R_CreateVao+0x224>\n     81a:\t48 8b 00             \tmov    (%rax),%rax\n     81d:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     821:\t48 81 c2 d0 01 00 00 \tadd    $0x1d0,%rdx\n     828:\t48 89 d6             \tmov    %rdx,%rsi\n     82b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     830:\tff d0                \tcallq  *%rax\n     832:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 839 <R_CreateVao+0x243>\n     839:\t48 8b 10             \tmov    (%rax),%rdx\n     83c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     840:\t8b 80 d0 01 00 00    \tmov    0x1d0(%rax),%eax\n     846:\t89 c6                \tmov    %eax,%esi\n     848:\tbf 93 88 00 00       \tmov    $0x8893,%edi\n     84d:\tff d2                \tcallq  *%rdx\n     84f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 856 <R_CreateVao+0x260>\n     856:\t4c 8b 00             \tmov    (%rax),%r8\n     859:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n     85c:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     85f:\t48 98                \tcltq   \n     861:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n     865:\t48 89 c6             \tmov    %rax,%rsi\n     868:\tbf 93 88 00 00       \tmov    $0x8893,%edi\n     86d:\t41 ff d0             \tcallq  *%r8\n     870:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 877 <R_CreateVao+0x281>\n     877:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     87b:\t48 89 90 38 20 00 00 \tmov    %rdx,0x2038(%rax)\n     882:\tbe a6 00 00 00       \tmov    $0xa6,%esi\n     887:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 88e <R_CreateVao+0x298>\n     88e:\te8 00 00 00 00       \tcallq  893 <R_CreateVao+0x29d>\n     893:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     897:\t48 83 c4 48          \tadd    $0x48,%rsp\n     89b:\t5b                   \tpop    %rbx\n     89c:\t5d                   \tpop    %rbp\n     89d:\tc3                   \tretq   ", "code_s": "unsigned int *__fastcall R_CreateVao(const char *a1, __int64 a2, signed int a3,\n                                     __int64 a4, signed int a5,\n                                     unsigned int a6) {\n  int v6;\n  unsigned int *<span class=\"supfact\">v11</span>;\n  unsigned int <span class=\"supfact\">v12</span>;\n  if (a6) {\n    if (a6 == Number)\n      <span class=\"supfact\">v12</span> = Number;\n    else\n      ((void (*)(_QWORD, const char *, ...))ri[Number])(Number L, String, a6);\n  } else {\n    <span class=\"supfact\">v12</span> = Number;\n  }\n  if (strlen(a1) > Number)\n    ((void (*)(__int64, const char *, ...))ri[Number])(Number L, String, a1);\n  if (*(int *)((char *)&dword_3F960 + (_QWORD)tr) == Number)\n    ri[Number](Number L, String);\n  R_IssuePendingRenderCommands();\n  v6 = *(int *)((char *)&dword_3F960 + (_QWORD)tr);\n  tr[v6 + Number] =\n      ((__int64(__fastcall *)(__int64, __int64))ri[Number])(Number L, Number L);\n  <span class=\"supfact\">v11</span> = (unsigned int *)tr[v6 + Number];\n  ++*(int *)((char *)&dword_3F960 + (_QWORD)tr);\n  memset(<span class=\"supfact\">v11</span>, Number, Number);\n  Q_strncpyz(<span class=\"supfact\">v11</span>, a1, Number L);\n  if (glRefConfig[Number]) {\n    qglGenVertexArrays(Number L, <span class=\"supfact\">v11</span> + Number);\n    qglBindVertexArray(<span class=\"supfact\">v11</span>[Number]);\n  }\n  <span class=\"supfact\">v11</span>[Number] = a3;\n  qglGenBuffers(Number L, <span class=\"supfact\">v11</span> + Number);\n  qglBindBuffer(Number L, <span class=\"supfact\">v11</span>[Number]);\n  qglBufferData(Number L, a3, a2, <span class=\"supfact\">v12</span>);\n  <span class=\"supfact\">v11</span>[Number] = a5;\n  qglGenBuffers(Number L, <span class=\"supfact\">v11</span> + Number);\n  qglBindBuffer(Number L, <span class=\"supfact\">v11</span>[Number]);\n  qglBufferData(Number L, a5, a4, <span class=\"supfact\">v12</span>);\n  glState[Number] = <span class=\"supfact\">v11</span>;\n  GL_CheckErrs(String, Number L);\n  return <span class=\"supfact\">v11</span>;\n}", "code_t": "vao_t *__cdecl R_CreateVao(const char *name, byte *vertexes, int vertexesSize,\n                           byte *indexes, int indexesSize, vaoUsage_t usage) {\n  int v6;\n  vao_t *<span class=\"supfact\">vao</span>;\n  unsigned int <span class=\"supfact\">glUsage</span>;\n  if (usage) {\n    if (usage == VAO_USAGE_DYNAMIC)\n      <span class=\"supfact\">glUsage</span> = Number;\n    else\n      ((void (*)(_QWORD, const char *, ...))ri[Number])(Number L, String,\n                                                        (unsigned int)usage);\n  } else {\n    <span class=\"supfact\">glUsage</span> = Number;\n  }\n  if (strlen(name) > Number)\n    ((void (*)(__int64, const char *, ...))ri[Number])(Number L, String, name);\n  if (*((_DWORD *)&tr + Number) == Number)\n    ri[Number](Number L, String);\n  R_IssuePendingRenderCommands();\n  v6 = *((_DWORD *)&tr + Number);\n  *((_QWORD *)&tr + v6 + Number) =\n      ((__int64(__fastcall *)(__int64, __int64))ri[Number])(Number L, Number L);\n  <span class=\"supfact\">vao</span> = (vao_t *)*((_QWORD *)&tr + v6 + Number);\n  ++*((_DWORD *)&tr + Number);\n  memset(<span class=\"supfact\">vao</span>, Number, sizeof(vao_t));\n  Q_strncpyz(<span class=\"supfact\">vao</span>, name, Number L);\n  if (glRefConfig[Number]) {\n    qglGenVertexArrays(Number L, &<span class=\"supfact\">vao</span>-><span class=\"supfact\">vao</span>);\n    qglBindVertexArray(<span class=\"supfact\">vao</span>-><span class=\"supfact\">vao</span>);\n  }\n  <span class=\"supfact\">vao</span>->vertexesSize = vertexesSize;\n  qglGenBuffers(Number L, &<span class=\"supfact\">vao</span>->vertexesVBO);\n  qglBindBuffer(Number L, <span class=\"supfact\">vao</span>->vertexesVBO);\n  qglBufferData(Number L, vertexesSize, vertexes, <span class=\"supfact\">glUsage</span>);\n  <span class=\"supfact\">vao</span>->indexesSize = indexesSize;\n  qglGenBuffers(Number L, &<span class=\"supfact\">vao</span>->indexesIBO);\n  qglBindBuffer(Number L, <span class=\"supfact\">vao</span>->indexesIBO);\n  qglBufferData(Number L, indexesSize, indexes, <span class=\"supfact\">glUsage</span>);\n  glState[Number] = <span class=\"supfact\">vao</span>;\n  GL_CheckErrs(String, Number L);\n  return <span class=\"supfact\">vao</span>;\n}", "var": [{"name": "v12", "type": "int", "ref_name": "glUsage", "ref_type": "unsigned int"}, {"name": "v11", "type": "sn764xx_state *", "ref_name": "vao", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "grpascal", "repo_name": "GEO", "path": "grpascal/GEO/cc559c50c7934e117fd395ca4281c1a4795f52f2f77e9509c893453752a48a95", "path_in_repo": "grpascal/GEO/host/Linux/mxuvc/src/examples/ipcam/burnin/burnin_test.o", "objdump": "000000000000066b <close_fds>:\n 66b:\t55                   \tpush   %rbp\n 66c:\t48 89 e5             \tmov    %rsp,%rbp\n 66f:\t48 83 ec 10          \tsub    $0x10,%rsp\n 673:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 67a <close_fds+0xf>\n 67a:\t48 89 c7             \tmov    %rax,%rdi\n 67d:\te8 00 00 00 00       \tcallq  682 <close_fds+0x17>\n 682:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 689:\teb 58                \tjmp    6e3 <close_fds+0x78>\n 68b:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n 692:\teb 45                \tjmp    6d9 <close_fds+0x6e>\n 694:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 697:\t48 98                \tcltq   \n 699:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 69c:\t48 63 d2             \tmovslq %edx,%rdx\n 69f:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 6a3:\t48 01 d0             \tadd    %rdx,%rax\n 6a6:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 6ad:\t00 \n 6ae:\t48 85 c0             \ttest   %rax,%rax\n 6b1:\t74 22                \tje     6d5 <close_fds+0x6a>\n 6b3:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 6b6:\t48 98                \tcltq   \n 6b8:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 6bb:\t48 63 d2             \tmovslq %edx,%rdx\n 6be:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 6c2:\t48 01 d0             \tadd    %rdx,%rax\n 6c5:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 6cc:\t00 \n 6cd:\t48 89 c7             \tmov    %rax,%rdi\n 6d0:\te8 00 00 00 00       \tcallq  6d5 <close_fds+0x6a>\n 6d5:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n 6d9:\t83 7d f8 07          \tcmpl   $0x7,-0x8(%rbp)\n 6dd:\t7e b5                \tjle    694 <close_fds+0x29>\n 6df:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 6e3:\t83 7d fc 06          \tcmpl   $0x6,-0x4(%rbp)\n 6e7:\t7e a2                \tjle    68b <close_fds+0x20>\n 6e9:\t90                   \tnop\n 6ea:\t90                   \tnop\n 6eb:\tc9                   \tleaveq \n 6ec:\tc3                   \tretq   ", "code_s": "int close_fds() {\n  __int64 v0;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  LODWORD(v0) = fclose(fd_aud);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      v0 = (__int64)*(&fd + Number * <span class=\"supfact\">i</span> + <span class=\"supfact\">j</span>);\n      if (v0)\n        LODWORD(v0) =\n            fclose(*(&fd + Number * <span class=\"supfact\">i</span> + <span class=\"supfact\">j</span>));\n    }\n  }\n  return v0;\n}", "code_t": "void __cdecl close_fds() {\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  fclose(fd_aud);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      if (fd[<span class=\"supfact\">i</span>][<span class=\"supfact\">j</span>])\n        fclose(fd[<span class=\"supfact\">i</span>][<span class=\"supfact\">j</span>]);\n    }\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "j", "type": "int", "ref_name": "j", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "iamayush", "repo_name": "cpp_primer", "path": "iamayush/cpp_primer/52b70d17a3b0b3bae85b15de9f41d7f5bd35d233cdd5cfeca568046a08c549cb", "path_in_repo": "iamayush/cpp_primer/10/rev-iters.exe", "objdump": "00000000004011e2 <main>:\n  4011e2:\t55                   \tpush   %rbp\n  4011e3:\t48 89 e5             \tmov    %rsp,%rbp\n  4011e6:\t41 55                \tpush   %r13\n  4011e8:\t41 54                \tpush   %r12\n  4011ea:\t53                   \tpush   %rbx\n  4011eb:\t48 83 ec 78          \tsub    $0x78,%rsp\n  4011ef:\tc7 45 a0 00 00 00 00 \tmovl   $0x0,-0x60(%rbp)\n  4011f6:\tc7 45 a4 01 00 00 00 \tmovl   $0x1,-0x5c(%rbp)\n  4011fd:\tc7 45 a8 02 00 00 00 \tmovl   $0x2,-0x58(%rbp)\n  401204:\tc7 45 ac 03 00 00 00 \tmovl   $0x3,-0x54(%rbp)\n  40120b:\tc7 45 b0 04 00 00 00 \tmovl   $0x4,-0x50(%rbp)\n  401212:\tc7 45 b4 05 00 00 00 \tmovl   $0x5,-0x4c(%rbp)\n  401219:\tc7 45 b8 06 00 00 00 \tmovl   $0x6,-0x48(%rbp)\n  401220:\tc7 45 bc 07 00 00 00 \tmovl   $0x7,-0x44(%rbp)\n  401227:\tc7 45 c0 08 00 00 00 \tmovl   $0x8,-0x40(%rbp)\n  40122e:\tc7 45 c4 09 00 00 00 \tmovl   $0x9,-0x3c(%rbp)\n  401235:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  401239:\t49 89 c4             \tmov    %rax,%r12\n  40123c:\t41 bd 0a 00 00 00    \tmov    $0xa,%r13d\n  401242:\t48 8d 45 d7          \tlea    -0x29(%rbp),%rax\n  401246:\t48 89 c7             \tmov    %rax,%rdi\n  401249:\te8 56 01 00 00       \tcallq  4013a4 <_ZNSaIiEC1Ev>\n  40124e:\t48 8d 55 d7          \tlea    -0x29(%rbp),%rdx\n  401252:\t4c 89 e6             \tmov    %r12,%rsi\n  401255:\t4c 89 ef             \tmov    %r13,%rdi\n  401258:\t4c 89 e1             \tmov    %r12,%rcx\n  40125b:\t4c 89 eb             \tmov    %r13,%rbx\n  40125e:\t48 89 df             \tmov    %rbx,%rdi\n  401261:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  401265:\t48 89 d1             \tmov    %rdx,%rcx\n  401268:\t48 89 fa             \tmov    %rdi,%rdx\n  40126b:\t48 89 c7             \tmov    %rax,%rdi\n  40126e:\te8 69 01 00 00       \tcallq  4013dc <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>\n  401273:\t48 8d 45 d7          \tlea    -0x29(%rbp),%rax\n  401277:\t48 89 c7             \tmov    %rax,%rdi\n  40127a:\te8 41 01 00 00       \tcallq  4013c0 <_ZNSaIiED1Ev>\n  40127f:\t48 8d 85 78 ff ff ff \tlea    -0x88(%rbp),%rax\n  401286:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n  40128a:\t48 89 d6             \tmov    %rdx,%rsi\n  40128d:\t48 89 c7             \tmov    %rax,%rdi\n  401290:\te8 13 02 00 00       \tcallq  4014a8 <_ZNKSt6vectorIiSaIiEE7crbeginEv>\n  401295:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  401299:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n  40129d:\t48 89 d6             \tmov    %rdx,%rsi\n  4012a0:\t48 89 c7             \tmov    %rax,%rdi\n  4012a3:\te8 34 02 00 00       \tcallq  4014dc <_ZNKSt6vectorIiSaIiEE5crendEv>\n  4012a8:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  4012ac:\t48 8d 85 78 ff ff ff \tlea    -0x88(%rbp),%rax\n  4012b3:\t48 89 d6             \tmov    %rdx,%rsi\n  4012b6:\t48 89 c7             \tmov    %rax,%rdi\n  4012b9:\te8 52 02 00 00       \tcallq  401510 <_ZStneIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEEbRKSt16reverse_iteratorIT_ESC_>\n  4012be:\t84 c0                \ttest   %al,%al\n  4012c0:\t74 3b                \tje     4012fd <main+0x11b>\n  4012c2:\t48 8d 85 78 ff ff ff \tlea    -0x88(%rbp),%rax\n  4012c9:\t48 89 c7             \tmov    %rax,%rdi\n  4012cc:\te8 85 02 00 00       \tcallq  401556 <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEEdeEv>\n  4012d1:\t8b 00                \tmov    (%rax),%eax\n  4012d3:\t89 c6                \tmov    %eax,%esi\n  4012d5:\tbf a0 40 40 00       \tmov    $0x4040a0,%edi\n  4012da:\te8 f1 fd ff ff       \tcallq  4010d0 <_ZNSolsEi@plt>\n  4012df:\tbe 40 10 40 00       \tmov    $0x401040,%esi\n  4012e4:\t48 89 c7             \tmov    %rax,%rdi\n  4012e7:\te8 a4 fd ff ff       \tcallq  401090 <_ZNSolsEPFRSoS_E@plt>\n  4012ec:\t48 8d 85 78 ff ff ff \tlea    -0x88(%rbp),%rax\n  4012f3:\t48 89 c7             \tmov    %rax,%rdi\n  4012f6:\te8 3d 02 00 00       \tcallq  401538 <_ZNSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEEEppEv>\n  4012fb:\teb 98                \tjmp    401295 <main+0xb3>\n  4012fd:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n  401302:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  401306:\t48 89 c7             \tmov    %rax,%rdi\n  401309:\te8 56 01 00 00       \tcallq  401464 <_ZNSt6vectorIiSaIiEED1Ev>\n  40130e:\t89 d8                \tmov    %ebx,%eax\n  401310:\teb 34                \tjmp    401346 <main+0x164>\n  401312:\t48 89 c3             \tmov    %rax,%rbx\n  401315:\t48 8d 45 d7          \tlea    -0x29(%rbp),%rax\n  401319:\t48 89 c7             \tmov    %rax,%rdi\n  40131c:\te8 9f 00 00 00       \tcallq  4013c0 <_ZNSaIiED1Ev>\n  401321:\t48 89 d8             \tmov    %rbx,%rax\n  401324:\t48 89 c7             \tmov    %rax,%rdi\n  401327:\te8 b4 fd ff ff       \tcallq  4010e0 <_Unwind_Resume@plt>\n  40132c:\t48 89 c3             \tmov    %rax,%rbx\n  40132f:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  401333:\t48 89 c7             \tmov    %rax,%rdi\n  401336:\te8 29 01 00 00       \tcallq  401464 <_ZNSt6vectorIiSaIiEED1Ev>\n  40133b:\t48 89 d8             \tmov    %rbx,%rax\n  40133e:\t48 89 c7             \tmov    %rax,%rdi\n  401341:\te8 9a fd ff ff       \tcallq  4010e0 <_Unwind_Resume@plt>\n  401346:\t48 83 c4 78          \tadd    $0x78,%rsp\n  40134a:\t5b                   \tpop    %rbx\n  40134b:\t41 5c                \tpop    %r12\n  40134d:\t41 5d                \tpop    %r13\n  40134f:\t5d                   \tpop    %rbp\n  401350:\tc3                   \tretq   ", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  char <span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>[Number];\n  int <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>[Number];\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  std allocator<int> allocator(&<span class=\"supfact\">v7</span>, argv, envp);\n  std vector<int> vector(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>, Number L,\n                         &<span class=\"supfact\">v7</span>);\n  std allocator<int> ~allocator(&<span class=\"supfact\">v7</span>);\n  std vector<int> crbegin(<span class=\"supfact\">v4</span>, <span class=\"supfact\">v5</span>);\n  while (Number) {\n    std vector<int> crend(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v5</span>);\n    if (!(unsigned __int8)std operator!=\n        <__gnu_cxx __normal_iterator<int const *, std vector<int>>>(\n            <span class=\"supfact\">v4</span>, <span class=\"supfact\">v8</span>))\n      break;\n    std reverse_iterator<\n        __gnu_cxx __normal_iterator<int const *, std vector<int>>>\n    operator*(<span class=\"supfact\">v4</span>);\n    std ostream operator<<();\n    std ostream operator<<();\n    std reverse_iterator<\n        __gnu_cxx __normal_iterator<int const *, std vector<int>>>\n    operator++(<span class=\"supfact\">v4</span>, std endl<char, std char_traits<char>>);\n  }\n  std vector<int> ~vector(<span class=\"supfact\">v5</span>);\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  char <span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>[Number];\n  int <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>[Number];\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number] = Number;\n  std allocator<int> allocator(&<span class=\"supfact\">v7</span>, argv, envp);\n  std vector<int> vector(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>, Number L,\n                         &<span class=\"supfact\">v7</span>);\n  std allocator<int> ~allocator(&<span class=\"supfact\">v7</span>);\n  std vector<int> crbegin(<span class=\"supfact\">v4</span>, <span class=\"supfact\">v5</span>);\n  while (Number) {\n    std vector<int> crend(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v5</span>);\n    if (!(unsigned __int8)std operator!=\n        <__gnu_cxx __normal_iterator<int const *, std vector<int>>>(\n            <span class=\"supfact\">v4</span>, <span class=\"supfact\">v8</span>))\n      break;\n    std reverse_iterator<\n        __gnu_cxx __normal_iterator<int const *, std vector<int>>>\n    operator*(<span class=\"supfact\">v4</span>);\n    std ostream operator<<();\n    std ostream operator<<();\n    std reverse_iterator<\n        __gnu_cxx __normal_iterator<int const *, std vector<int>>>\n    operator++(<span class=\"supfact\">v4</span>, std endl<char, std char_traits<char>>);\n  }\n  std vector<int> ~vector(<span class=\"supfact\">v5</span>);\n  return Number;\n}", "var": [{"name": "v8", "type": "char[44]", "ref_name": "v8", "ref_type": "char[40]"}, {"name": "v7", "type": "char", "ref_name": "v7", "ref_type": "char"}, {"name": "v6", "type": "struct struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }", "ref_name": "v6", "ref_type": "int[13]"}, {"name": "v5", "type": "char[32]", "ref_name": "v5", "ref_type": "char[32]"}, {"name": "v4", "type": "char[8]", "ref_name": "v4", "ref_type": "char[8]"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "ob-encoder", "repo_name": "libav-obe", "path": "ob-encoder/libav-obe/5587569a7bb22bd4c637e2157f82c35208bd6ffe84d24d2571af5e9624a93249", "path_in_repo": "ob-encoder/libav-obe//libavcodec/aic.o", "objdump": "00000000000000f3 <get_bits1>:\n      f3:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n      f8:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n      fd:\t8b 40 10             \tmov    0x10(%rax),%eax\n     100:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n     104:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     109:\t48 8b 00             \tmov    (%rax),%rax\n     10c:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n     110:\tc1 ea 03             \tshr    $0x3,%edx\n     113:\t89 d2                \tmov    %edx,%edx\n     115:\t48 01 d0             \tadd    %rdx,%rax\n     118:\t0f b6 00             \tmovzbl (%rax),%eax\n     11b:\t88 44 24 fb          \tmov    %al,-0x5(%rsp)\n     11f:\t0f b6 54 24 fb       \tmovzbl -0x5(%rsp),%edx\n     124:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     128:\t83 e0 07             \tand    $0x7,%eax\n     12b:\t89 c1                \tmov    %eax,%ecx\n     12d:\td3 e2                \tshl    %cl,%edx\n     12f:\t89 d0                \tmov    %edx,%eax\n     131:\t88 44 24 fb          \tmov    %al,-0x5(%rsp)\n     135:\tc0 6c 24 fb 07       \tshrb   $0x7,-0x5(%rsp)\n     13a:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     13f:\t8b 50 10             \tmov    0x10(%rax),%edx\n     142:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     147:\t8b 40 18             \tmov    0x18(%rax),%eax\n     14a:\t39 c2                \tcmp    %eax,%edx\n     14c:\t7d 05                \tjge    153 <get_bits1+0x60>\n     14e:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n     153:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n     157:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     15c:\t89 50 10             \tmov    %edx,0x10(%rax)\n     15f:\t0f b6 44 24 fb       \tmovzbl -0x5(%rsp),%eax\n     164:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_bits1(__int64 a1) {\n  unsigned __int8 <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_DWORD *)(a1 + Number);\n  <span class=\"supfact\">v2</span> =\n      (unsigned __int8)(*(unsigned __int8 *)((<span class=\"supfact\">v3</span> >> Number) +\n                                             *(_QWORD *)a1)\n                        << (<span class=\"supfact\">v3</span> & Number)) >>\n      Number;\n  if ((signed int)<span class=\"supfact\">v3</span> < *(_DWORD *)(a1 + Number))\n    ++<span class=\"supfact\">v3</span>;\n  *(_DWORD *)(a1 + Number) = <span class=\"supfact\">v3</span>;\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "unsigned int __cdecl get_bits1(GetBitContext_0 *s) {\n  uint8_t <span class=\"supfact\">result</span>;\n  unsigned int <span class=\"supfact\">index</span>;\n  <span class=\"supfact\">index</span> = s-><span class=\"supfact\">index</span>;\n  <span class=\"supfact\">result</span> =\n      (unsigned __int8)(s->buffer[<span class=\"supfact\">index</span> >> Number]\n                        << (<span class=\"supfact\">index</span> & Number)) >>\n      Number;\n  if ((signed int)<span class=\"supfact\">index</span> < s->size_in_bits_plus8)\n    ++<span class=\"supfact\">index</span>;\n  s-><span class=\"supfact\">index</span> = <span class=\"supfact\">index</span>;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "v3", "type": "unsigned int", "ref_name": "index", "ref_type": "unsigned int"}, {"name": "v2", "type": "uint8_t", "ref_name": "result", "ref_type": "uint8_t"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "Narendra8659", "repo_name": "Test-Lock-Branch", "path": "Narendra8659/Test-Lock-Branch/1bc6726225c9e1c4b87d222e3429b532124fdf7235930df382172949143316dc", "path_in_repo": "Narendra8659/Test-Lock-Branch/testcases/realtime/func/pi-tests/testpi-0", "objdump": "0000000000403fef <stats_avg>:\n  403fef:\t55                   \tpush   %rbp\n  403ff0:\t48 89 e5             \tmov    %rsp,%rbp\n  403ff3:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  403ff7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  403ffb:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  403fff:\t48 83 c0 01          \tadd    $0x1,%rax\n  404003:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  404007:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40400b:\tf3 0f 11 45 f4       \tmovss  %xmm0,-0xc(%rbp)\n  404010:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  404017:\t00 \n  404018:\teb 2f                \tjmp    404049 <stats_avg+0x5a>\n  40401a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40401e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  404022:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  404026:\t48 c1 e2 04          \tshl    $0x4,%rdx\n  40402a:\t48 01 d0             \tadd    %rdx,%rax\n  40402d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  404031:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n  404036:\tf3 0f 10 4d f4       \tmovss  -0xc(%rbp),%xmm1\n  40403b:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n  40403f:\tf3 0f 11 45 f4       \tmovss  %xmm0,-0xc(%rbp)\n  404044:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  404049:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40404d:\t48 3b 45 e8          \tcmp    -0x18(%rbp),%rax\n  404051:\t7c c7                \tjl     40401a <stats_avg+0x2b>\n  404053:\tf3 48 0f 2a 4d e8    \tcvtsi2ssq -0x18(%rbp),%xmm1\n  404059:\tf3 0f 10 45 f4       \tmovss  -0xc(%rbp),%xmm0\n  40405e:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n  404062:\tf3 0f 11 45 e4       \tmovss  %xmm0,-0x1c(%rbp)\n  404067:\tf3 0f 10 45 e4       \tmovss  -0x1c(%rbp),%xmm0\n  40406c:\t5d                   \tpop    %rbp\n  40406d:\tc3                   \tretq   ", "code_s": "float __fastcall stats_avg(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  float <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)(a1 + Number) + Number L;\n  <span class=\"supfact\">v3</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> < <span class=\"supfact\">v2</span>;\n       ++<span class=\"supfact\">i</span>)\n    <span class=\"supfact\">v3</span> =\n        (float)(int)*(_QWORD *)(Number * <span class=\"supfact\">i</span> +\n                                *(_QWORD *)(a1 + Number) + Number) +\n        <span class=\"supfact\">v3</span>;\n  return <span class=\"supfact\">v3</span> / (float)(int)<span class=\"supfact\">v2</span>;\n}", "code_t": "float __cdecl stats_avg(stats_container_t *data) {\n  __int64 <span class=\"supfact\">n</span>;\n  float <span class=\"supfact\">sum</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">n</span> = data->index + Number;\n  <span class=\"supfact\">sum</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> < <span class=\"supfact\">n</span>;\n       ++<span class=\"supfact\">i</span>)\n    <span class=\"supfact\">sum</span> =\n        (float)(int)data->records[<span class=\"supfact\">i</span>].y + <span class=\"supfact\">sum</span>;\n  return <span class=\"supfact\">sum</span> / (float)(int)<span class=\"supfact\">n</span>;\n}", "var": [{"name": "i", "type": "__int64", "ref_name": "i", "ref_type": "__int64"}, {"name": "v3", "type": "float", "ref_name": "sum", "ref_type": "float"}, {"name": "v2", "type": "__int64", "ref_name": "n", "ref_type": "__int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "semihalf-adamczyk-konrad", "repo_name": "driver-sata-fbsd", "path": "semihalf-adamczyk-konrad/driver-sata-fbsd/726c9f2a7b1b1bda7d4439af7267a722a3a98ffb2118780ab6a3f02bb179bb5d", "path_in_repo": "semihalf-adamczyk-konrad/driver-sata-fbsd/gnu/lib/libdialog/textbox.po", "objdump": "00000000000001b1 <xalloc>:\n     1b1:\t55                   \tpush   %rbp\n     1b2:\t48 89 e5             \tmov    %rsp,%rbp\n     1b5:\t48 83 ec 20          \tsub    $0x20,%rsp\n     1b9:\te8 00 00 00 00       \tcallq  1be <xalloc+0xd>\n     1be:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     1c2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     1c6:\t48 89 c7             \tmov    %rax,%rdi\n     1c9:\te8 00 00 00 00       \tcallq  1ce <xalloc+0x1d>\n     1ce:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     1d2:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     1d7:\t75 0f                \tjne    1e8 <xalloc+0x37>\n     1d9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     1de:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     1e3:\te8 00 00 00 00       \tcallq  1e8 <xalloc+0x37>\n     1e8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1ec:\tc9                   \tleaveq \n     1ed:\tc3                   \tretq   ", "code_s": "void *__fastcall xalloc(size_t a1) {\n  void *<span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = malloc(a1);\n  if (!<span class=\"supfact\">v2</span>)\n    dlg_exiterr(String);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "char *__cdecl xalloc(size_t size) {\n  char *<span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = (char *)malloc(size);\n  if (!<span class=\"supfact\">result</span>)\n    dlg_exiterr(String);\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "v2", "type": "char *", "ref_name": "result", "ref_type": "char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "CGrader", "repo_name": "ffmpeg-modif", "path": "CGrader/ffmpeg-modif/d555c9276473619d277a53eb0270f2ca1937f8a5e3f8f179e63bbf30c87a0af9", "path_in_repo": "CGrader/ffmpeg-modif//libavformat/aviobuf.o", "objdump": "0000000000002f40 <avio_close_dyn_buf>:\n    2f40:\t48 83 ec 38          \tsub    $0x38,%rsp\n    2f44:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    2f49:\t48 89 34 24          \tmov    %rsi,(%rsp)\n    2f4d:\tc7 44 24 2c 00 00 00 \tmovl   $0x0,0x2c(%rsp)\n    2f54:\t00 \n    2f55:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n    2f5b:\t75 15                \tjne    2f72 <avio_close_dyn_buf+0x32>\n    2f5d:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2f61:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    2f68:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2f6d:\te9 84 00 00 00       \tjmpq   2ff6 <avio_close_dyn_buf+0xb6>\n    2f72:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2f77:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    2f7b:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n    2f80:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2f85:\t8b 40 5c             \tmov    0x5c(%rax),%eax\n    2f88:\t85 c0                \ttest   %eax,%eax\n    2f8a:\t75 1f                \tjne    2fab <avio_close_dyn_buf+0x6b>\n    2f8c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2f91:\tba 10 00 00 00       \tmov    $0x10,%edx\n    2f96:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2f9b:\t48 89 c7             \tmov    %rax,%rdi\n    2f9e:\te8 00 00 00 00       \tcallq  2fa3 <avio_close_dyn_buf+0x63>\n    2fa3:\tc7 44 24 2c 10 00 00 \tmovl   $0x10,0x2c(%rsp)\n    2faa:\t00 \n    2fab:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2fb0:\t48 89 c7             \tmov    %rax,%rdi\n    2fb3:\te8 00 00 00 00       \tcallq  2fb8 <avio_close_dyn_buf+0x78>\n    2fb8:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    2fbd:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    2fc1:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2fc5:\t48 89 10             \tmov    %rdx,(%rax)\n    2fc8:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    2fcd:\t8b 40 04             \tmov    0x4(%rax),%eax\n    2fd0:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n    2fd4:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    2fd9:\t48 89 c7             \tmov    %rax,%rdi\n    2fdc:\te8 00 00 00 00       \tcallq  2fe1 <avio_close_dyn_buf+0xa1>\n    2fe1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2fe6:\t48 89 c7             \tmov    %rax,%rdi\n    2fe9:\te8 00 00 00 00       \tcallq  2fee <avio_close_dyn_buf+0xae>\n    2fee:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    2ff2:\t2b 44 24 2c          \tsub    0x2c(%rsp),%eax\n    2ff6:\t48 83 c4 38          \tadd    $0x38,%rsp\n    2ffa:\tc3                   \tretq   ", "code_s": "__int64 __fastcall avio_close_dyn_buf(__int64 a1, _QWORD *a2) {\n  __int64 result;\n  int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = Number;\n  if (a1) {\n    <span class=\"supfact\">v4</span> = *(_QWORD *)(a1 + Number);\n    if (!*(_DWORD *)(a1 + Number)) {\n      avio_write(a1, (__int64)&padbuf_11603, Number);\n      <span class=\"supfact\">v5</span> = Number;\n    }\n    avio_flush(a1);\n    *a2 = *(_QWORD *)(<span class=\"supfact\">v4</span> + Number);\n    <span class=\"supfact\">v3</span> = *(_DWORD *)(<span class=\"supfact\">v4</span> + Number);\n    av_free(<span class=\"supfact\">v4</span>);\n    av_free(a1);\n    result = (unsigned int)(<span class=\"supfact\">v3</span> - <span class=\"supfact\">v5</span>);\n  } else {\n    *a2 = Number L;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl avio_close_dyn_buf(AVIOContext_0 *s, uint8_t **pbuffer) {\n  int result;\n  int <span class=\"supfact\">size</span>;\n  DynBuffer_0 *<span class=\"supfact\">d</span>;\n  int <span class=\"supfact\">padding</span>;\n  <span class=\"supfact\">padding</span> = Number;\n  if (s) {\n    <span class=\"supfact\">d</span> = (DynBuffer_0 *)s->opaque;\n    if (!s->max_packet_size) {\n      avio_write(s, (const unsigned __int8 *)padbuf_11603, Number);\n      <span class=\"supfact\">padding</span> = Number;\n    }\n    avio_flush(s);\n    *pbuffer = <span class=\"supfact\">d</span>->buffer;\n    <span class=\"supfact\">size</span> = <span class=\"supfact\">d</span>-><span class=\"supfact\">size</span>;\n    av_free(<span class=\"supfact\">d</span>);\n    av_free(s);\n    result = <span class=\"supfact\">size</span> - <span class=\"supfact\">padding</span>;\n  } else {\n    *pbuffer = Number L;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "int", "ref_name": "padding", "ref_type": "int"}, {"name": "v4", "type": "DynBuffer_0 *", "ref_name": "d", "ref_type": "DynBuffer_0 *"}, {"name": "v3", "type": "int", "ref_name": "size", "ref_type": "int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "mDibyo", "repo_name": "py-dlib", "path": "mDibyo/py-dlib/d00a54a73f0a7862888db48f974a0404f85faa9914b1976ae3b066f6b9db7f21", "path_in_repo": "mDibyo/py-dlib/dlib/test/find_max_factor_graph_nmplp.o", "objdump": "0000000000000000 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  10:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  14:\t48 89 d6             \tmov    %rdx,%rsi\n  17:\t48 89 c7             \tmov    %rax,%rdi\n  1a:\te8 00 00 00 00       \tcallq  1f <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_+0x1f>\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\tc9                   \tleaveq \n  24:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __make_move_if_noexcept_iterator<\n    unsigned long, std move_iterator<unsigned long *>>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  std move_iterator<unsigned long *> move_iterator(&<span class=\"supfact\">v2</span>, a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std move_iterator<long unsigned int *> __cdecl std\n__make_move_if_noexcept_iterator<\n    unsigned long, std move_iterator<unsigned long *>>(unsigned __int64 *__i) {\n  std move_iterator<long unsigned int *> <span class=\"supfact\">v2</span>;\n  std move_iterator<unsigned long *> move_iterator(&<span class=\"supfact\">v2</span>, __i);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "struct std::move_iterator<std::pair<long unsigned int,long unsigned int>*> { std::pair<long unsigned int,long unsigned int> * _M_current; }", "ref_name": "v2", "ref_type": "struct std::move_iterator<long unsigned int*> { unsigned __int64 * _M_current; }"}], "has_struc": true, "body_in_train": true}, {"repo_owner": "euiko", "repo_name": "platchamer", "path": "euiko/platchamer/ea577fe946debe801b598443c28eb46787790db4ca40f371427fc794580a1b3c", "path_in_repo": "euiko/platchamer/3rdparty/bgfx/3rdparty/fcpp/cpp6.o", "objdump": "0000000000000f58 <fpp_outadefine>:\n     f58:\t55                   \tpush   %rbp\n     f59:\t48 89 e5             \tmov    %rsp,%rbp\n     f5c:\t48 83 ec 40          \tsub    $0x40,%rsp\n     f60:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     f64:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     f68:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     f6c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f71:\t48 89 c7             \tmov    %rax,%rdi\n     f74:\te8 00 00 00 00       \tcallq  f79 <fpp_outadefine+0x21>\n     f79:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f7d:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n     f81:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     f85:\t48 89 d6             \tmov    %rdx,%rsi\n     f88:\t48 89 c7             \tmov    %rax,%rdi\n     f8b:\te8 00 00 00 00       \tcallq  f90 <fpp_outadefine+0x38>\n     f90:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f94:\t8b 40 14             \tmov    0x14(%rax),%eax\n     f97:\t85 c0                \ttest   %eax,%eax\n     f99:\t0f 8e 92 00 00 00    \tjle    1031 <fpp_outadefine+0xd9>\n     f9f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     fa3:\tbe 28 00 00 00       \tmov    $0x28,%esi\n     fa8:\t48 89 c7             \tmov    %rax,%rdi\n     fab:\te8 00 00 00 00       \tcallq  fb0 <fpp_outadefine+0x58>\n     fb0:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n     fb7:\teb 37                \tjmp    ff0 <fpp_outadefine+0x98>\n     fb9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     fbd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     fc2:\t48 89 c7             \tmov    %rax,%rdi\n     fc5:\te8 00 00 00 00       \tcallq  fca <fpp_outadefine+0x72>\n     fca:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n     fcd:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     fd1:\t89 d6                \tmov    %edx,%esi\n     fd3:\t48 89 c7             \tmov    %rax,%rdi\n     fd6:\te8 00 00 00 00       \tcallq  fdb <fpp_outadefine+0x83>\n     fdb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     fdf:\tbe 2c 00 00 00       \tmov    $0x2c,%esi\n     fe4:\t48 89 c7             \tmov    %rax,%rdi\n     fe7:\te8 00 00 00 00       \tcallq  fec <fpp_outadefine+0x94>\n     fec:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n     ff0:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     ff4:\t8b 40 14             \tmov    0x14(%rax),%eax\n     ff7:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n     ffa:\t7c bd                \tjl     fb9 <fpp_outadefine+0x61>\n     ffc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1000:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1005:\t48 89 c7             \tmov    %rax,%rdi\n    1008:\te8 00 00 00 00       \tcallq  100d <fpp_outadefine+0xb5>\n    100d:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    1010:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1014:\t89 d6                \tmov    %edx,%esi\n    1016:\t48 89 c7             \tmov    %rax,%rdi\n    1019:\te8 00 00 00 00       \tcallq  101e <fpp_outadefine+0xc6>\n    101e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1022:\tbe 29 00 00 00       \tmov    $0x29,%esi\n    1027:\t48 89 c7             \tmov    %rax,%rdi\n    102a:\te8 00 00 00 00       \tcallq  102f <fpp_outadefine+0xd7>\n    102f:\teb 1c                \tjmp    104d <fpp_outadefine+0xf5>\n    1031:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1035:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1038:\t85 c0                \ttest   %eax,%eax\n    103a:\t75 11                \tjne    104d <fpp_outadefine+0xf5>\n    103c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1040:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1045:\t48 89 c7             \tmov    %rax,%rdi\n    1048:\te8 00 00 00 00       \tcallq  104d <fpp_outadefine+0xf5>\n    104d:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1051:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1055:\t48 85 c0             \ttest   %rax,%rax\n    1058:\t0f 84 65 01 00 00    \tje     11c3 <fpp_outadefine+0x26b>\n    105e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1062:\tbe 09 00 00 00       \tmov    $0x9,%esi\n    1067:\t48 89 c7             \tmov    %rax,%rdi\n    106a:\te8 00 00 00 00       \tcallq  106f <fpp_outadefine+0x117>\n    106f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1073:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1077:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    107b:\te9 1f 01 00 00       \tjmpq   119f <fpp_outadefine+0x247>\n    1080:\t83 7d f0 7e          \tcmpl   $0x7e,-0x10(%rbp)\n    1084:\t7e 33                \tjle    10b9 <fpp_outadefine+0x161>\n    1086:\t81 7d f0 9e 00 00 00 \tcmpl   $0x9e,-0x10(%rbp)\n    108d:\t7f 2a                \tjg     10b9 <fpp_outadefine+0x161>\n    108f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1093:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1098:\t48 89 c7             \tmov    %rax,%rdi\n    109b:\te8 00 00 00 00       \tcallq  10a0 <fpp_outadefine+0x148>\n    10a0:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    10a3:\t8d 50 82             \tlea    -0x7e(%rax),%edx\n    10a6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    10aa:\t89 d6                \tmov    %edx,%esi\n    10ac:\t48 89 c7             \tmov    %rax,%rdi\n    10af:\te8 00 00 00 00       \tcallq  10b4 <fpp_outadefine+0x15c>\n    10b4:\te9 e6 00 00 00       \tjmpq   119f <fpp_outadefine+0x247>\n    10b9:\te8 00 00 00 00       \tcallq  10be <fpp_outadefine+0x166>\n    10be:\t48 8b 00             \tmov    (%rax),%rax\n    10c1:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n    10c4:\t48 63 d2             \tmovslq %edx,%rdx\n    10c7:\t48 01 d2             \tadd    %rdx,%rdx\n    10ca:\t48 01 d0             \tadd    %rdx,%rax\n    10cd:\t0f b7 00             \tmovzwl (%rax),%eax\n    10d0:\t0f b7 c0             \tmovzwl %ax,%eax\n    10d3:\t25 00 40 00 00       \tand    $0x4000,%eax\n    10d8:\t85 c0                \ttest   %eax,%eax\n    10da:\t75 0c                \tjne    10e8 <fpp_outadefine+0x190>\n    10dc:\t83 7d f0 09          \tcmpl   $0x9,-0x10(%rbp)\n    10e0:\t74 06                \tje     10e8 <fpp_outadefine+0x190>\n    10e2:\t83 7d f0 0a          \tcmpl   $0xa,-0x10(%rbp)\n    10e6:\t75 16                \tjne    10fe <fpp_outadefine+0x1a6>\n    10e8:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n    10eb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    10ef:\t89 d6                \tmov    %edx,%esi\n    10f1:\t48 89 c7             \tmov    %rax,%rdi\n    10f4:\te8 00 00 00 00       \tcallq  10f9 <fpp_outadefine+0x1a1>\n    10f9:\te9 a1 00 00 00       \tjmpq   119f <fpp_outadefine+0x247>\n    10fe:\t81 7d f0 9f 00 00 00 \tcmpl   $0x9f,-0x10(%rbp)\n    1105:\t0f 84 94 00 00 00    \tje     119f <fpp_outadefine+0x247>\n    110b:\t81 7d f0 9f 00 00 00 \tcmpl   $0x9f,-0x10(%rbp)\n    1112:\t7f 5f                \tjg     1173 <fpp_outadefine+0x21b>\n    1114:\t83 7d f0 1f          \tcmpl   $0x1f,-0x10(%rbp)\n    1118:\t74 33                \tje     114d <fpp_outadefine+0x1f5>\n    111a:\t83 7d f0 1f          \tcmpl   $0x1f,-0x10(%rbp)\n    111e:\t7f 53                \tjg     1173 <fpp_outadefine+0x21b>\n    1120:\t83 7d f0 1e          \tcmpl   $0x1e,-0x10(%rbp)\n    1124:\t74 3a                \tje     1160 <fpp_outadefine+0x208>\n    1126:\t83 7d f0 1e          \tcmpl   $0x1e,-0x10(%rbp)\n    112a:\t7f 47                \tjg     1173 <fpp_outadefine+0x21b>\n    112c:\t83 7d f0 1c          \tcmpl   $0x1c,-0x10(%rbp)\n    1130:\t74 08                \tje     113a <fpp_outadefine+0x1e2>\n    1132:\t83 7d f0 1d          \tcmpl   $0x1d,-0x10(%rbp)\n    1136:\t74 67                \tje     119f <fpp_outadefine+0x247>\n    1138:\teb 39                \tjmp    1173 <fpp_outadefine+0x21b>\n    113a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    113e:\tbe 23 00 00 00       \tmov    $0x23,%esi\n    1143:\t48 89 c7             \tmov    %rax,%rdi\n    1146:\te8 00 00 00 00       \tcallq  114b <fpp_outadefine+0x1f3>\n    114b:\teb 52                \tjmp    119f <fpp_outadefine+0x247>\n    114d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1151:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    1156:\t48 89 c7             \tmov    %rax,%rdi\n    1159:\te8 00 00 00 00       \tcallq  115e <fpp_outadefine+0x206>\n    115e:\teb 3f                \tjmp    119f <fpp_outadefine+0x247>\n    1160:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1164:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1169:\t48 89 c7             \tmov    %rax,%rdi\n    116c:\te8 00 00 00 00       \tcallq  1171 <fpp_outadefine+0x219>\n    1171:\teb 2c                \tjmp    119f <fpp_outadefine+0x247>\n    1173:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n    1176:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    117a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    117f:\t48 89 c7             \tmov    %rax,%rdi\n    1182:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1187:\te8 00 00 00 00       \tcallq  118c <fpp_outadefine+0x234>\n    118c:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    1190:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1194:\t48 89 d6             \tmov    %rdx,%rsi\n    1197:\t48 89 c7             \tmov    %rax,%rdi\n    119a:\te8 00 00 00 00       \tcallq  119f <fpp_outadefine+0x247>\n    119f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11a3:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    11a7:\t48 89 55 f8          \tmov    %rdx,-0x8(%rbp)\n    11ab:\t0f b6 00             \tmovzbl (%rax),%eax\n    11ae:\t0f be c0             \tmovsbl %al,%eax\n    11b1:\t25 ff 00 00 00       \tand    $0xff,%eax\n    11b6:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    11b9:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n    11bd:\t0f 85 bd fe ff ff    \tjne    1080 <fpp_outadefine+0x128>\n    11c3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    11c7:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n    11cc:\t48 89 c7             \tmov    %rax,%rdi\n    11cf:\te8 00 00 00 00       \tcallq  11d4 <fpp_outadefine+0x27c>\n    11d4:\t90                   \tnop\n    11d5:\tc9                   \tleaveq \n    11d6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall fpp_outadefine(__int64 a1, __int64 a2) {\n  unsigned __int8 *v2;\n  char <span class=\"supfact\">s</span>[Number];\n  int <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  unsigned __int8 *<span class=\"supfact\">v7</span>;\n  fpp_Putstring(a1, String);\n  fpp_Putstring(a1, a2 + Number);\n  if (*(int *)(a2 + Number) <= Number) {\n    if (!*(_DWORD *)(a2 + Number))\n      fpp_Putstring(a1, String);\n  } else {\n    fpp_Putchar(a1, Number L);\n    for (<span class=\"supfact\">i</span> = Number;\n         (signed int)<span class=\"supfact\">i</span> < *(_DWORD *)(a2 + Number);\n         ++<span class=\"supfact\">i</span>) {\n      fpp_Putstring(a1, String);\n      fpp_Putint(a1, <span class=\"supfact\">i</span>);\n      fpp_Putchar(a1, Number L);\n    }\n    fpp_Putstring(a1, String);\n    fpp_Putint(a1, <span class=\"supfact\">i</span>);\n    fpp_Putchar(a1, Number L);\n  }\n  if (*(_QWORD *)(a2 + Number)) {\n    fpp_Putchar(a1, Number L);\n    <span class=\"supfact\">v7</span> = *(unsigned __int8 **)(a2 + Number);\n    while (Number) {\n      do {\n        while (Number) {\n          while (Number) {\n            v2 = <span class=\"supfact\">v7</span>++;\n            <span class=\"supfact\">v5</span> = *v2;\n            if (!<span class=\"supfact\">v5</span>)\n              return fpp_Putchar(a1, Number L);\n            if (<span class=\"supfact\">v5</span> <= Number || <span class=\"supfact\">v5</span> > Number)\n              break;\n            fpp_Putstring(a1, String);\n            fpp_Putint(a1, (unsigned int)(<span class=\"supfact\">v5</span> - Number));\n          }\n          if (((*_ctype_b_loc())[<span class=\"supfact\">v5</span>] & Number) == Number &&\n              <span class=\"supfact\">v5</span> != Number && <span class=\"supfact\">v5</span> != Number)\n            break;\n          fpp_Putchar(a1, (unsigned int)<span class=\"supfact\">v5</span>);\n        }\n      } while (<span class=\"supfact\">v5</span> == Number);\n      if (<span class=\"supfact\">v5</span> > Number) {\n      LABEL_28:\n        sprintf(<span class=\"supfact\">s</span>, String, (unsigned int)<span class=\"supfact\">v5</span>);\n        fpp_Putstring(a1, <span class=\"supfact\">s</span>);\n      } else if (<span class=\"supfact\">v5</span> == Number) {\n        fpp_Putchar(a1, Number L);\n      } else {\n        if (<span class=\"supfact\">v5</span> > Number)\n          goto LABEL_28;\n        switch (<span class=\"supfact\">v5</span>) {\n        case Number:\n          fpp_Putstring(a1, String);\n          break;\n        case Number:\n          fpp_Putchar(a1, Number L);\n          break;\n        case Number:\n          break;\n        default:\n          goto LABEL_28;\n        }\n      }\n    }\n  }\n  return fpp_Putchar(a1, Number L);\n}", "code_t": "void __cdecl fpp_outadefine(Global *global, DEFBUF *dp) {\n  char *v2;\n  char <span class=\"supfact\">buffer</span>[Number];\n  int <span class=\"supfact\">c</span>;\n  int <span class=\"supfact\">i</span>;\n  char *<span class=\"supfact\">cp</span>;\n  fpp_Putstring(global, String);\n  fpp_Putstring(global, dp->name);\n  if (dp->nargs <= Number) {\n    if (!dp->nargs)\n      fpp_Putstring(global, String);\n  } else {\n    fpp_Putchar(global, Number L);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < dp->nargs;\n         ++<span class=\"supfact\">i</span>) {\n      fpp_Putstring(global, String);\n      fpp_Putint(global, (unsigned int)<span class=\"supfact\">i</span>);\n      fpp_Putchar(global, Number L);\n    }\n    fpp_Putstring(global, String);\n    fpp_Putint(global, (unsigned int)<span class=\"supfact\">i</span>);\n    fpp_Putchar(global, Number L);\n  }\n  if (dp->repl) {\n    fpp_Putchar(global, Number L);\n    <span class=\"supfact\">cp</span> = dp->repl;\n    while (Number) {\n      do {\n        while (Number) {\n          while (Number) {\n            v2 = <span class=\"supfact\">cp</span>++;\n            <span class=\"supfact\">c</span> = (unsigned __int8)*v2;\n            if (!<span class=\"supfact\">c</span>)\n              goto LABEL_30;\n            if (<span class=\"supfact\">c</span> <= Number || <span class=\"supfact\">c</span> > Number)\n              break;\n            fpp_Putstring(global, String);\n            fpp_Putint(global, (unsigned int)(<span class=\"supfact\">c</span> - Number));\n          }\n          if (((*_ctype_b_loc())[<span class=\"supfact\">c</span>] & Number) == Number &&\n              <span class=\"supfact\">c</span> != Number && <span class=\"supfact\">c</span> != Number)\n            break;\n          fpp_Putchar(global, (unsigned int)<span class=\"supfact\">c</span>);\n        }\n      } while (<span class=\"supfact\">c</span> == Number);\n      if (<span class=\"supfact\">c</span> > Number) {\n      LABEL_28:\n        sprintf(<span class=\"supfact\">buffer</span>, String,\n                (unsigned int)<span class=\"supfact\">c</span>);\n        fpp_Putstring(global, <span class=\"supfact\">buffer</span>);\n      } else if (<span class=\"supfact\">c</span> == Number) {\n        fpp_Putchar(global, Number L);\n      } else {\n        if (<span class=\"supfact\">c</span> > Number)\n          goto LABEL_28;\n        switch (<span class=\"supfact\">c</span>) {\n        case Number:\n          fpp_Putstring(global, String);\n          break;\n        case Number:\n          fpp_Putchar(global, Number L);\n          break;\n        case Number:\n          break;\n        default:\n          goto LABEL_28;\n        }\n      }\n    }\n  }\nLABEL_30:\n  fpp_Putchar(global, Number L);\n}", "var": [{"name": "v7", "type": "const char *", "ref_name": "cp", "ref_type": "char *"}, {"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v5", "type": "int", "ref_name": "c", "ref_type": "int"}, {"name": "s", "type": "char[32]", "ref_name": "buffer", "ref_type": "char[32]"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "edems96", "repo_name": "ioq3-master", "path": "edems96/ioq3-master/e5c4c4a315e783adad4f2411debfdb325791f1ec1942306abf3816ed2a9f843d", "path_in_repo": "edems96/ioq3-master//build/release-linux-x86_64/client/opusfile.o", "objdump": "0000000000000346 <op_get_next_page>:\n     346:\t48 83 ec 48          \tsub    $0x48,%rsp\n     34a:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n     34f:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n     354:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n     359:\te9 69 01 00 00       \tjmpq   4c7 <op_get_next_page+0x181>\n     35e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     363:\t48 8d 50 58          \tlea    0x58(%rax),%rdx\n     367:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     36c:\t48 89 c6             \tmov    %rax,%rsi\n     36f:\t48 89 d7             \tmov    %rdx,%rdi\n     372:\te8 00 00 00 00       \tcallq  377 <op_get_next_page+0x31>\n     377:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n     37b:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n     37f:\tc1 e8 1f             \tshr    $0x1f,%eax\n     382:\t0f b6 c0             \tmovzbl %al,%eax\n     385:\t48 85 c0             \ttest   %rax,%rax\n     388:\t74 20                \tje     3aa <op_get_next_page+0x64>\n     38a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     38f:\t48 8b 50 48          \tmov    0x48(%rax),%rdx\n     393:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n     397:\t48 98                \tcltq   \n     399:\t48 29 c2             \tsub    %rax,%rdx\n     39c:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     3a1:\t48 89 50 48          \tmov    %rdx,0x48(%rax)\n     3a5:\te9 1d 01 00 00       \tjmpq   4c7 <op_get_next_page+0x181>\n     3aa:\t83 7c 24 38 00       \tcmpl   $0x0,0x38(%rsp)\n     3af:\t0f 85 e2 00 00 00    \tjne    497 <op_get_next_page+0x151>\n     3b5:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n     3bb:\t75 0c                \tjne    3c9 <op_get_next_page+0x83>\n     3bd:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n     3c4:\te9 25 01 00 00       \tjmpq   4ee <op_get_next_page+0x1a8>\n     3c9:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n     3cf:\t79 0a                \tjns    3db <op_get_next_page+0x95>\n     3d1:\tc7 44 24 3c 00 08 00 \tmovl   $0x800,0x3c(%rsp)\n     3d8:\t00 \n     3d9:\teb 57                \tjmp    432 <op_get_next_page+0xec>\n     3db:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     3e0:\t48 89 c7             \tmov    %rax,%rdi\n     3e3:\te8 32 ff ff ff       \tcallq  31a <op_position>\n     3e8:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n     3ed:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     3f2:\t48 3b 44 24 08       \tcmp    0x8(%rsp),%rax\n     3f7:\t7c 0c                \tjl     405 <op_get_next_page+0xbf>\n     3f9:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n     400:\te9 e9 00 00 00       \tjmpq   4ee <op_get_next_page+0x1a8>\n     405:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     40a:\t48 2b 44 24 28       \tsub    0x28(%rsp),%rax\n     40f:\t48 3d ff 07 00 00    \tcmp    $0x7ff,%rax\n     415:\t7f 12                \tjg     429 <op_get_next_page+0xe3>\n     417:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     41c:\t89 c2                \tmov    %eax,%edx\n     41e:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     423:\t29 c2                \tsub    %eax,%edx\n     425:\t89 d0                \tmov    %edx,%eax\n     427:\teb 05                \tjmp    42e <op_get_next_page+0xe8>\n     429:\tb8 00 08 00 00       \tmov    $0x800,%eax\n     42e:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n     432:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n     436:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     43b:\t89 d6                \tmov    %edx,%esi\n     43d:\t48 89 c7             \tmov    %rax,%rdi\n     440:\te8 c7 fd ff ff       \tcallq  20c <op_get_data>\n     445:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n     449:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n     44d:\tc1 e8 1f             \tshr    $0x1f,%eax\n     450:\t0f b6 c0             \tmovzbl %al,%eax\n     453:\t48 85 c0             \ttest   %rax,%rax\n     456:\t74 0c                \tje     464 <op_get_next_page+0x11e>\n     458:\t48 c7 c0 80 ff ff ff \tmov    $0xffffffffffffff80,%rax\n     45f:\te9 8a 00 00 00       \tjmpq   4ee <op_get_next_page+0x1a8>\n     464:\t83 7c 24 24 00       \tcmpl   $0x0,0x24(%rsp)\n     469:\t0f 94 c0             \tsete   %al\n     46c:\t0f b6 c0             \tmovzbl %al,%eax\n     46f:\t48 85 c0             \ttest   %rax,%rax\n     472:\t74 53                \tje     4c7 <op_get_next_page+0x181>\n     474:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     479:\t48 c1 e8 3f          \tshr    $0x3f,%rax\n     47d:\t0f b6 c0             \tmovzbl %al,%eax\n     480:\t48 85 c0             \ttest   %rax,%rax\n     483:\t74 09                \tje     48e <op_get_next_page+0x148>\n     485:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n     48c:\teb 60                \tjmp    4ee <op_get_next_page+0x1a8>\n     48e:\t48 c7 c0 77 ff ff ff \tmov    $0xffffffffffffff77,%rax\n     495:\teb 57                \tjmp    4ee <op_get_next_page+0x1a8>\n     497:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     49c:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n     4a0:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n     4a5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     4aa:\t48 8b 50 48          \tmov    0x48(%rax),%rdx\n     4ae:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n     4b2:\t48 98                \tcltq   \n     4b4:\t48 01 c2             \tadd    %rax,%rdx\n     4b7:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     4bc:\t48 89 50 48          \tmov    %rdx,0x48(%rax)\n     4c0:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n     4c5:\teb 27                \tjmp    4ee <op_get_next_page+0x1a8>\n     4c7:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n     4cd:\t0f 8e 8b fe ff ff    \tjle    35e <op_get_next_page+0x18>\n     4d3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     4d8:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n     4dc:\t48 39 44 24 08       \tcmp    %rax,0x8(%rsp)\n     4e1:\t0f 8f 77 fe ff ff    \tjg     35e <op_get_next_page+0x18>\n     4e7:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n     4ee:\t48 83 c4 48          \tadd    $0x48,%rsp\n     4f2:\tc3                   \tretq   \n     4f3:\t90                   \tnop", "code_s": "__int64 __fastcall op_get_next_page(__int64 a1, __int64 a2, __int64 a3) {\n  __int64 result;\n  int v4;\n  unsigned int v5;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  do {\n    while (Number) {\n      if (a3 > Number && a3 <= *(_QWORD *)(a1 + Number))\n        return Number;\n      <span class=\"supfact\">v9</span> = ogg_sync_pageseek(a1 + Number, a2);\n      if (<span class=\"supfact\">v9</span> >= Number)\n        break;\n      *(_QWORD *)(a1 + Number) -= <span class=\"supfact\">v9</span>;\n    }\n    if (<span class=\"supfact\">v9</span>) {\n      <span class=\"supfact\">v8</span> = *(_QWORD *)(a1 + Number);\n      *(_QWORD *)(a1 + Number) = <span class=\"supfact\">v9</span> + <span class=\"supfact\">v8</span>;\n      return <span class=\"supfact\">v8</span>;\n    }\n    if (!a3)\n      return Number;\n    if (a3 >= Number) {\n      <span class=\"supfact\">v7</span> = op_position(a1);\n      if (<span class=\"supfact\">v7</span> >= a3)\n        return Number;\n      if (a3 - <span class=\"supfact\">v7</span> > Number)\n        v5 = Number;\n      else\n        v5 = a3 - <span class=\"supfact\">v7</span>;\n      v4 = op_get_data(a1, v5);\n    } else {\n      v4 = op_get_data(a1, Number);\n    }\n    if (v4 < Number)\n      return Number;\n  } while (v4);\n  if (a3 >= Number)\n    result = Number;\n  else\n    result = Number;\n  return result;\n}", "code_t": "__int64 __cdecl op_get_next_page(OggOpusFile_0 *_of, ogg_page *_og,\n                                 __int64 _boundary) {\n  __int64 result;\n  int v4;\n  int ret;\n  __int64 <span class=\"supfact\">position</span>;\n  __int64 <span class=\"supfact\">page_offset</span>;\n  int <span class=\"supfact\">more</span>;\n  int read_nbytes;\n  do {\n    while (Number) {\n      if (_boundary > Number && _boundary <= _of->offset)\n        return Number;\n      <span class=\"supfact\">more</span> = ogg_sync_pageseek(&_of->oy, _og);\n      if (<span class=\"supfact\">more</span> >= Number)\n        break;\n      _of->offset -= <span class=\"supfact\">more</span>;\n    }\n    if (<span class=\"supfact\">more</span>) {\n      <span class=\"supfact\">page_offset</span> = _of->offset;\n      _of->offset = <span class=\"supfact\">more</span> + <span class=\"supfact\">page_offset</span>;\n      return <span class=\"supfact\">page_offset</span>;\n    }\n    if (!_boundary)\n      return Number;\n    if (_boundary >= Number) {\n      <span class=\"supfact\">position</span> = op_position(_of);\n      if (<span class=\"supfact\">position</span> >= _boundary)\n        return Number;\n      if (_boundary - <span class=\"supfact\">position</span> > Number)\n        v4 = Number;\n      else\n        v4 = _boundary - <span class=\"supfact\">position</span>;\n      read_nbytes = v4;\n    } else {\n      read_nbytes = Number;\n    }\n    ret = op_get_data(_of, read_nbytes);\n    if (ret < Number)\n      return Number;\n  } while (ret);\n  if (_boundary >= Number)\n    result = Number;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v9", "type": "int", "ref_name": "more", "ref_type": "int"}, {"name": "v8", "type": "__int64", "ref_name": "page_offset", "ref_type": "__int64"}, {"name": "v7", "type": "__int64", "ref_name": "position", "ref_type": "__int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "JongggyuP", "repo_name": "Anti-aging", "path": "JongggyuP/Anti-aging/3baf21d9789f3487209c381a2a854ab524a23f00b583aba4ef307df0c96f0f2f", "path_in_repo": "JongggyuP/Anti-aging/tools/perf/util/auxtrace.o", "objdump": "000000000000273f <auxtrace_queues__process_index>:\n    273f:\t55                   \tpush   %rbp\n    2740:\t48 89 e5             \tmov    %rsp,%rbp\n    2743:\t48 83 ec 50          \tsub    $0x50,%rsp\n    2747:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    274b:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    274f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2756:\t00 00 \n    2758:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    275c:\t31 c0                \txor    %eax,%eax\n    275e:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    2762:\t48 8b 80 48 62 00 00 \tmov    0x6248(%rax),%rax\n    2769:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    276d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2771:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    2775:\teb 73                \tjmp    27ea <auxtrace_queues__process_index+0xab>\n    2777:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    277e:\t00 \n    277f:\teb 48                \tjmp    27c9 <auxtrace_queues__process_index+0x8a>\n    2781:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2785:\t48 83 c0 01          \tadd    $0x1,%rax\n    2789:\t48 c1 e0 04          \tshl    $0x4,%rax\n    278d:\t48 89 c2             \tmov    %rax,%rdx\n    2790:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2794:\t48 01 d0             \tadd    %rdx,%rax\n    2797:\t48 83 c0 08          \tadd    $0x8,%rax\n    279b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    279f:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    27a3:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n    27a7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    27ab:\t48 89 ce             \tmov    %rcx,%rsi\n    27ae:\t48 89 c7             \tmov    %rax,%rdi\n    27b1:\te8 28 ff ff ff       \tcallq  26de <auxtrace_queues__process_index_entry>\n    27b6:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    27b9:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    27bd:\t74 05                \tje     27c4 <auxtrace_queues__process_index+0x85>\n    27bf:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    27c2:\teb 43                \tjmp    2807 <auxtrace_queues__process_index+0xc8>\n    27c4:\t48 83 45 d8 01       \taddq   $0x1,-0x28(%rbp)\n    27c9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    27cd:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    27d1:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n    27d5:\t72 aa                \tjb     2781 <auxtrace_queues__process_index+0x42>\n    27d7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    27db:\t48 8b 00             \tmov    (%rax),%rax\n    27de:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    27e2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    27e6:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    27ea:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    27ee:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n    27f2:\t48 81 c2 48 62 00 00 \tadd    $0x6248,%rdx\n    27f9:\t48 39 d0             \tcmp    %rdx,%rax\n    27fc:\t0f 85 75 ff ff ff    \tjne    2777 <auxtrace_queues__process_index+0x38>\n    2802:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2807:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    280b:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    2812:\t00 00 \n    2814:\t74 05                \tje     281b <auxtrace_queues__process_index+0xdc>\n    2816:\te8 00 00 00 00       \tcallq  281b <auxtrace_queues__process_index+0xdc>\n    281b:\tc9                   \tleaveq \n    281c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall auxtrace_queues__process_index(__int64 a1, __int64 a2,\n                                                  float a3, double a4) {\n  unsigned int <span class=\"supfact\">v5</span>;\n  _QWORD *<span class=\"supfact\">i</span>;\n  unsigned __int64 <span class=\"supfact\">j</span>;\n  for (<span class=\"supfact\">i</span> = *(_QWORD **)(a2 + Number);\n       <span class=\"supfact\">i</span> != (_QWORD *)(a2 + Number);\n       <span class=\"supfact\">i</span> = (_QWORD *)*<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number L;\n         <span class=\"supfact\">j</span> < <span class=\"supfact\">i</span>[Number]; ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">v5</span> = auxtrace_queues__process_index_entry(\n          a1, a2, &<span class=\"supfact\">i</span>[Number * <span class=\"supfact\">j</span> + Number], a3,\n          a4);\n      if (<span class=\"supfact\">v5</span>)\n        return <span class=\"supfact\">v5</span>;\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl auxtrace_queues__process_index(auxtrace_queues *queues,\n                                           perf_session *session) {\n  int <span class=\"supfact\">err</span>;\n  perf_session *<span class=\"supfact\">auxtrace_index</span>;\n  size_t <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">auxtrace_index</span> =\n           (perf_session *)session-><span class=\"supfact\">auxtrace_index</span>.next;\n       <span class=\"supfact\">auxtrace_index</span> !=\n       (perf_session *)&session-><span class=\"supfact\">auxtrace_index</span>;\n       <span class=\"supfact\">auxtrace_index</span> =\n           *(perf_session **)&<span class=\"supfact\">auxtrace_index</span>->header.version) {\n    for (<span class=\"supfact\">i</span> = Number L;\n         <span class=\"supfact\">i</span> < <span class=\"supfact\">auxtrace_index</span>->header.data_size;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">err</span> = auxtrace_queues__process_index_entry(\n          queues, session,\n          (auxtrace_index_entry *)&<span class=\"supfact\">auxtrace_index</span>->header\n                  .feat_offset +\n              <span class=\"supfact\">i</span>);\n      if (<span class=\"supfact\">err</span>)\n        return <span class=\"supfact\">err</span>;\n    }\n  }\n  return Number;\n}", "var": [{"name": "j", "type": "size_t", "ref_name": "i", "ref_type": "size_t"}, {"name": "i", "type": "size_t", "ref_name": "auxtrace_index", "ref_type": "perf_session *"}, {"name": "v5", "type": "int", "ref_name": "err", "ref_type": "int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "ausbin", "repo_name": "astro", "path": "ausbin/astro/5ee04477003d0a4339e43a3fd3f875b2c7076ed951ae5d35c5c9600ae725e841", "path_in_repo": "ausbin/astro/submods/unicorn/qemu/mips-softmmu/target-mips/msa_helper.o", "objdump": "00000000000096e6 <helper_msa_div_s_df_mips>:\n    96e6:\t55                   \tpush   %rbp\n    96e7:\t48 89 e5             \tmov    %rsp,%rbp\n    96ea:\t48 83 ec 40          \tsub    $0x40,%rsp\n    96ee:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    96f2:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n    96f5:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n    96f8:\t89 4d cc             \tmov    %ecx,-0x34(%rbp)\n    96fb:\t44 89 45 c8          \tmov    %r8d,-0x38(%rbp)\n    96ff:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    9702:\t48 83 c0 0e          \tadd    $0xe,%rax\n    9706:\t48 c1 e0 04          \tshl    $0x4,%rax\n    970a:\t48 89 c2             \tmov    %rax,%rdx\n    970d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9711:\t48 01 d0             \tadd    %rdx,%rax\n    9714:\t48 83 c0 08          \tadd    $0x8,%rax\n    9718:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    971c:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    971f:\t48 83 c0 0e          \tadd    $0xe,%rax\n    9723:\t48 c1 e0 04          \tshl    $0x4,%rax\n    9727:\t48 89 c2             \tmov    %rax,%rdx\n    972a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    972e:\t48 01 d0             \tadd    %rdx,%rax\n    9731:\t48 83 c0 08          \tadd    $0x8,%rax\n    9735:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    9739:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    973c:\t48 83 c0 0e          \tadd    $0xe,%rax\n    9740:\t48 c1 e0 04          \tshl    $0x4,%rax\n    9744:\t48 89 c2             \tmov    %rax,%rdx\n    9747:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    974b:\t48 01 d0             \tadd    %rdx,%rax\n    974e:\t48 83 c0 08          \tadd    $0x8,%rax\n    9752:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    9756:\t83 7d d4 03          \tcmpl   $0x3,-0x2c(%rbp)\n    975a:\t0f 84 16 01 00 00    \tje     9876 <helper_msa_div_s_df_mips+0x190>\n    9760:\t83 7d d4 03          \tcmpl   $0x3,-0x2c(%rbp)\n    9764:\t0f 87 4f 01 00 00    \tja     98b9 <helper_msa_div_s_df_mips+0x1d3>\n    976a:\t83 7d d4 02          \tcmpl   $0x2,-0x2c(%rbp)\n    976e:\t0f 84 ba 00 00 00    \tje     982e <helper_msa_div_s_df_mips+0x148>\n    9774:\t83 7d d4 02          \tcmpl   $0x2,-0x2c(%rbp)\n    9778:\t0f 87 3b 01 00 00    \tja     98b9 <helper_msa_div_s_df_mips+0x1d3>\n    977e:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    9782:\t74 0b                \tje     978f <helper_msa_div_s_df_mips+0xa9>\n    9784:\t83 7d d4 01          \tcmpl   $0x1,-0x2c(%rbp)\n    9788:\t74 54                \tje     97de <helper_msa_div_s_df_mips+0xf8>\n    978a:\te9 2a 01 00 00       \tjmpq   98b9 <helper_msa_div_s_df_mips+0x1d3>\n    978f:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n    9796:\teb 3b                \tjmp    97d3 <helper_msa_div_s_df_mips+0xed>\n    9798:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    979c:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    979f:\t0f b6 04 02          \tmovzbl (%rdx,%rax,1),%eax\n    97a3:\t48 0f be d0          \tmovsbq %al,%rdx\n    97a7:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    97ab:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    97ae:\t0f b6 04 01          \tmovzbl (%rcx,%rax,1),%eax\n    97b2:\t48 0f be c8          \tmovsbq %al,%rcx\n    97b6:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    97b9:\t48 89 ce             \tmov    %rcx,%rsi\n    97bc:\t89 c7                \tmov    %eax,%edi\n    97be:\te8 29 b0 ff ff       \tcallq  47ec <msa_div_s_df>\n    97c3:\t89 c1                \tmov    %eax,%ecx\n    97c5:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    97c9:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    97cc:\t88 0c 02             \tmov    %cl,(%rdx,%rax,1)\n    97cf:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n    97d3:\t83 7d e4 0f          \tcmpl   $0xf,-0x1c(%rbp)\n    97d7:\t76 bf                \tjbe    9798 <helper_msa_div_s_df_mips+0xb2>\n    97d9:\te9 fa 00 00 00       \tjmpq   98d8 <helper_msa_div_s_df_mips+0x1f2>\n    97de:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n    97e5:\teb 3c                \tjmp    9823 <helper_msa_div_s_df_mips+0x13d>\n    97e7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    97eb:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    97ee:\t0f b7 04 50          \tmovzwl (%rax,%rdx,2),%eax\n    97f2:\t48 0f bf d0          \tmovswq %ax,%rdx\n    97f6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    97fa:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n    97fd:\t0f b7 04 48          \tmovzwl (%rax,%rcx,2),%eax\n    9801:\t48 0f bf c8          \tmovswq %ax,%rcx\n    9805:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    9808:\t48 89 ce             \tmov    %rcx,%rsi\n    980b:\t89 c7                \tmov    %eax,%edi\n    980d:\te8 da af ff ff       \tcallq  47ec <msa_div_s_df>\n    9812:\t89 c1                \tmov    %eax,%ecx\n    9814:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    9818:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    981b:\t66 89 0c 50          \tmov    %cx,(%rax,%rdx,2)\n    981f:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n    9823:\t83 7d e4 07          \tcmpl   $0x7,-0x1c(%rbp)\n    9827:\t76 be                \tjbe    97e7 <helper_msa_div_s_df_mips+0x101>\n    9829:\te9 aa 00 00 00       \tjmpq   98d8 <helper_msa_div_s_df_mips+0x1f2>\n    982e:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n    9835:\teb 37                \tjmp    986e <helper_msa_div_s_df_mips+0x188>\n    9837:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    983b:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    983e:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    9841:\t48 63 d0             \tmovslq %eax,%rdx\n    9844:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    9848:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n    984b:\t8b 04 88             \tmov    (%rax,%rcx,4),%eax\n    984e:\t48 63 c8             \tmovslq %eax,%rcx\n    9851:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    9854:\t48 89 ce             \tmov    %rcx,%rsi\n    9857:\t89 c7                \tmov    %eax,%edi\n    9859:\te8 8e af ff ff       \tcallq  47ec <msa_div_s_df>\n    985e:\t89 c1                \tmov    %eax,%ecx\n    9860:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    9864:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    9867:\t89 0c 90             \tmov    %ecx,(%rax,%rdx,4)\n    986a:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n    986e:\t83 7d e4 03          \tcmpl   $0x3,-0x1c(%rbp)\n    9872:\t76 c3                \tjbe    9837 <helper_msa_div_s_df_mips+0x151>\n    9874:\teb 62                \tjmp    98d8 <helper_msa_div_s_df_mips+0x1f2>\n    9876:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n    987d:\teb 32                \tjmp    98b1 <helper_msa_div_s_df_mips+0x1cb>\n    987f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    9883:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    9886:\t48 8b 14 d0          \tmov    (%rax,%rdx,8),%rdx\n    988a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    988e:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n    9891:\t48 8b 0c c8          \tmov    (%rax,%rcx,8),%rcx\n    9895:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    9898:\t48 89 ce             \tmov    %rcx,%rsi\n    989b:\t89 c7                \tmov    %eax,%edi\n    989d:\te8 4a af ff ff       \tcallq  47ec <msa_div_s_df>\n    98a2:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    98a6:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n    98a9:\t48 89 04 ca          \tmov    %rax,(%rdx,%rcx,8)\n    98ad:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n    98b1:\t83 7d e4 01          \tcmpl   $0x1,-0x1c(%rbp)\n    98b5:\t76 c8                \tjbe    987f <helper_msa_div_s_df_mips+0x199>\n    98b7:\teb 1f                \tjmp    98d8 <helper_msa_div_s_df_mips+0x1f2>\n    98b9:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 98c0 <helper_msa_div_s_df_mips+0x1da>\n    98c0:\tba 62 03 00 00       \tmov    $0x362,%edx\n    98c5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 98cc <helper_msa_div_s_df_mips+0x1e6>\n    98cc:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 98d3 <helper_msa_div_s_df_mips+0x1ed>\n    98d3:\te8 00 00 00 00       \tcallq  98d8 <helper_msa_div_s_df_mips+0x1f2>\n    98d8:\tc9                   \tleaveq \n    98d9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall helper_msa_div_s_df_mips(__int64 a1, unsigned int a2,\n                                            unsigned int a3, unsigned int a4,\n                                            unsigned int a5) {\n  __int64 result;\n  char v6;\n  __int16 v7;\n  int v8;\n  unsigned int l;\n  unsigned int k;\n  unsigned int j;\n  unsigned int i;\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v13</span> = Number * (a3 + Number L) + a1 + Number;\n  <span class=\"supfact\">v14</span> = Number * (a4 + Number L) + a1 + Number;\n  result = Number * (a5 + Number L) + a1 + Number;\n  <span class=\"supfact\">v15</span> = result;\n  if (a2 == Number) {\n    for (i = Number; i <= Number; ++i) {\n      result =\n          msa_div_s_df(Number, *(_QWORD *)(<span class=\"supfact\">v14</span> + Number L * i),\n                       *(_QWORD *)(<span class=\"supfact\">v15</span> + Number L * i));\n      *(_QWORD *)(<span class=\"supfact\">v13</span> + Number L * i) = result;\n    }\n  } else {\n    if (a2 > Number)\n      _assert_fail(String, String, Number, String);\n    if (a2 == Number) {\n      for (j = Number; j <= Number; ++j) {\n        v8 = msa_div_s_df(Number, *(int *)(<span class=\"supfact\">v14</span> + Number L * j),\n                          *(int *)(<span class=\"supfact\">v15</span> + Number L * j));\n        result = <span class=\"supfact\">v13</span>;\n        *(_DWORD *)(<span class=\"supfact\">v13</span> + Number L * j) = v8;\n      }\n    } else if (a2) {\n      for (k = Number; k <= Number; ++k) {\n        v7 = msa_div_s_df(Number,\n                          *(__int16 *)(<span class=\"supfact\">v14</span> + Number L * k),\n                          *(__int16 *)(<span class=\"supfact\">v15</span> + Number L * k));\n        result = <span class=\"supfact\">v13</span>;\n        *(_WORD *)(<span class=\"supfact\">v13</span> + Number L * k) = v7;\n      }\n    } else {\n      for (l = Number; l <= Number; ++l) {\n        v6 = msa_div_s_df(Number, *(char *)(<span class=\"supfact\">v14</span> + l),\n                          *(char *)(<span class=\"supfact\">v15</span> + l));\n        result = l;\n        *(_BYTE *)(<span class=\"supfact\">v13</span> + l) = v6;\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl helper_msa_div_s_df_mips(CPUMIPSState_0 *env, uint32_t df_0,\n                                      uint32_t wd, uint32_t ws, uint32_t wt) {\n  uint32_t ia;\n  uint32_t i;\n  uint32_t ib;\n  uint32_t ic;\n  wr_t_0 *<span class=\"supfact\">pwd</span>;\n  wr_t_0 *<span class=\"supfact\">pws</span>;\n  wr_t_0 *<span class=\"supfact\">pwt</span>;\n  <span class=\"supfact\">pwd</span> = (wr_t_0 *)&env->active_fpu.fpr[wd];\n  <span class=\"supfact\">pws</span> = (wr_t_0 *)&env->active_fpu.fpr[ws];\n  <span class=\"supfact\">pwt</span> = (wr_t_0 *)&env->active_fpu.fpr[wt];\n  if (df_0 == Number) {\n    for (ic = Number; ic <= Number; ++ic)\n      <span class=\"supfact\">pwd</span>->d[ic] = msa_div_s_df(\n          Number, <span class=\"supfact\">pws</span>->d[ic], <span class=\"supfact\">pwt</span>->d[ic]);\n  } else {\n    if (df_0 > Number)\n      _assert_fail(String, String, Number, String);\n    if (df_0 == Number) {\n      for (ib = Number; ib <= Number; ++ib)\n        <span class=\"supfact\">pwd</span>->w[ib] = msa_div_s_df(\n            Number, <span class=\"supfact\">pws</span>->w[ib], <span class=\"supfact\">pwt</span>->w[ib]);\n    } else if (df_0) {\n      for (i = Number; i <= Number; ++i)\n        <span class=\"supfact\">pwd</span>->h[i] = msa_div_s_df(\n            Number, <span class=\"supfact\">pws</span>->h[i], <span class=\"supfact\">pwt</span>->h[i]);\n    } else {\n      for (ia = Number; ia <= Number; ++ia)\n        <span class=\"supfact\">pwd</span>->b[ia] = msa_div_s_df(\n            Number, <span class=\"supfact\">pws</span>->b[ia], <span class=\"supfact\">pwt</span>->b[ia]);\n    }\n  }\n}", "var": [{"name": "v15", "type": "wr_t_0 *", "ref_name": "pwt", "ref_type": "wr_t_0 *"}, {"name": "v14", "type": "wr_t_0 *", "ref_name": "pws", "ref_type": "wr_t_0 *"}, {"name": "v13", "type": "wr_t_0 *", "ref_name": "pwd", "ref_type": "wr_t_0 *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "kushpatel", "repo_name": "linux", "path": "kushpatel/linux/70349e46d0695bc828e18dfee9e37e9cf0f05dddde0107415f3afd2f349230a1", "path_in_repo": "kushpatel/linux/linux-4.1/tools/perf/util/annotate.o", "objdump": "0000000000000df5 <lock__scnprintf>:\n     df5:\t55                   \tpush   %rbp\n     df6:\t48 89 e5             \tmov    %rsp,%rbp\n     df9:\t48 83 ec 30          \tsub    $0x30,%rsp\n     dfd:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     e01:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     e05:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     e09:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n     e0d:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     e14:\t00 00 \n     e16:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     e1a:\t31 c0                \txor    %eax,%eax\n     e1c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e20:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n     e24:\t48 85 c0             \ttest   %rax,%rax\n     e27:\t75 1a                \tjne    e43 <lock__scnprintf+0x4e>\n     e29:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     e2d:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     e31:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n     e35:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e39:\t48 89 c7             \tmov    %rax,%rdi\n     e3c:\te8 dd f8 ff ff       \tcallq  71e <ins__raw_scnprintf>\n     e41:\teb 67                \tjmp    eaa <lock__scnprintf+0xb5>\n     e43:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e47:\t48 8b 10             \tmov    (%rax),%rdx\n     e4a:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n     e4e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     e52:\t48 89 d1             \tmov    %rdx,%rcx\n     e55:\tba 00 00 00 00       \tmov    $0x0,%edx\n     e5a:\t48 89 c7             \tmov    %rax,%rdi\n     e5d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e62:\te8 99 f1 ff ff       \tcallq  0 <scnprintf>\n     e67:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     e6a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e6e:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n     e72:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     e75:\t48 98                \tcltq   \n     e77:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n     e7b:\t48 89 cf             \tmov    %rcx,%rdi\n     e7e:\t48 29 c7             \tsub    %rax,%rdi\n     e81:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     e84:\t48 63 c8             \tmovslq %eax,%rcx\n     e87:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     e8b:\t48 8d 34 01          \tlea    (%rcx,%rax,1),%rsi\n     e8f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e93:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n     e97:\t48 89 d1             \tmov    %rdx,%rcx\n     e9a:\t48 89 fa             \tmov    %rdi,%rdx\n     e9d:\t48 89 c7             \tmov    %rax,%rdi\n     ea0:\te8 00 00 00 00       \tcallq  ea5 <lock__scnprintf+0xb0>\n     ea5:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n     ea8:\t01 d0                \tadd    %edx,%eax\n     eaa:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n     eae:\t64 48 33 3c 25 28 00 \txor    %fs:0x28,%rdi\n     eb5:\t00 00 \n     eb7:\t74 05                \tje     ebe <lock__scnprintf+0xc9>\n     eb9:\te8 00 00 00 00       \tcallq  ebe <lock__scnprintf+0xc9>\n     ebe:\tc9                   \tleaveq \n     ebf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall lock__scnprintf(__int64 *a1, char *a2, signed __int64 a3,\n                                   __int64 a4, __int64 a5, __int64 a6) {\n  __int64 v7;\n  __int64 v8;\n  int <span class=\"supfact\">v11</span>;\n  if (!*(_QWORD *)(a4 + Number))\n    return ins__raw_scnprintf(a1, a2, a3, (__int64 *)a4, a5, a6);\n  <span class=\"supfact\">v11</span> = scnprintf(a2, a3, String, *a1, a5, a6);\n  return <span class=\"supfact\">v11</span> +\n         (unsigned int)ins__scnprintf(\n             *(__int64 **)(a4 + Number), &a2[<span class=\"supfact\">v11</span>],\n             a3 - <span class=\"supfact\">v11</span>, *(__int64 **)(a4 + Number), v7, v8);\n}", "code_t": "int __cdecl lock__scnprintf(ins *ins, char *bf, size_t size,\n                            ins_operands *ops) {\n  int <span class=\"supfact\">printed</span>;\n  if (!ops->_anon_0.source.raw)\n    return ins__raw_scnprintf(ins, bf, size, ops);\n  <span class=\"supfact\">printed</span> = scnprintf(bf, size, String, ins->name);\n  return <span class=\"supfact\">printed</span> +\n         ins__scnprintf(ops->_anon_0.locked.ins, &bf[<span class=\"supfact\">printed</span>],\n                        size - <span class=\"supfact\">printed</span>,\n                        ops->_anon_0.locked.ops);\n}", "var": [{"name": "v11", "type": "int", "ref_name": "printed", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "converse2006", "repo_name": "ArduinoUno-QEMU", "path": "converse2006/ArduinoUno-QEMU/830926d5d07c05cfe8b5085b5fdda6a254e43269e60a4694bcef351567faa048", "path_in_repo": "converse2006/ArduinoUno-QEMU//sparc64-softmmu/translate.o", "objdump": "0000000000003751 <gen_helper_stqf>:\n    3751:\t55                   \tpush   %rbp\n    3752:\t48 89 e5             \tmov    %rsp,%rbp\n    3755:\t48 83 ec 40          \tsub    $0x40,%rsp\n    3759:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    375c:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    375f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    3766:\t00 00 \n    3768:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    376c:\t31 c0                \txor    %eax,%eax\n    376e:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    3775:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    3778:\t48 98                \tcltq   \n    377a:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    377e:\t83 4d dc 04          \torl    $0x4,-0x24(%rbp)\n    3782:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    3785:\t48 98                \tcltq   \n    3787:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    378b:\t83 4d dc 20          \torl    $0x20,-0x24(%rbp)\n    378f:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    3793:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    3796:\t49 89 d1             \tmov    %rdx,%r9\n    3799:\t41 b8 02 00 00 00    \tmov    $0x2,%r8d\n    379f:\t48 c7 c1 ff ff ff ff \tmov    $0xffffffffffffffff,%rcx\n    37a6:\t89 c2                \tmov    %eax,%edx\n    37a8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    37ad:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    37b2:\te8 a7 d6 ff ff       \tcallq  e5e <tcg_gen_helperN>\n    37b7:\t90                   \tnop\n    37b8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    37bc:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    37c3:\t00 00 \n    37c5:\t74 05                \tje     37cc <gen_helper_stqf+0x7b>\n    37c7:\te8 00 00 00 00       \tcallq  37cc <gen_helper_stqf+0x7b>\n    37cc:\tc9                   \tleaveq \n    37cd:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall gen_helper_stqf(int a1, int a2) {\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  <span class=\"supfact\">v3</span>[Number] = a1;\n  <span class=\"supfact\">v3</span>[Number] = a2;\n  tcg_gen_helperN((__int64)&helper_stqf, Number, Number, Number, Number,\n                  (__int64)<span class=\"supfact\">v3</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n}", "code_t": "void __cdecl gen_helper_stqf(TCGv_i64 arg1, TCGv_i32 arg2) {\n  TCGArg <span class=\"supfact\">args</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = __readfsqword(Number);\n  <span class=\"supfact\">args</span>[Number] = arg1;\n  <span class=\"supfact\">args</span>[Number] = arg2;\n  tcg_gen_helperN(&helper_stqf, Number, Number, Number, Number,\n                  <span class=\"supfact\">args</span>);\n}", "var": [{"name": "v4", "type": "unsigned __int64", "ref_name": "v3", "ref_type": "unsigned __int64"}, {"name": "v3", "type": "TCGArg[2]", "ref_name": "args", "ref_type": "TCGArg[2]"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "aajayssingh", "repo_name": "STM-Linklist-synchrobench", "path": "aajayssingh/STM-Linklist-synchrobench/d6866f1725bcc2540ddb8e3dd80eee6d9522f0dcc04facfa9b48554d88e505fc", "path_in_repo": "aajayssingh/STM-Linklist-synchrobench/synchrobench_code/synchrobench-master/c-cpp/bin/ESTM-linkedlist", "objdump": "0000000000401974 <set_contains>:\n  401974:\t55                   \tpush   %rbp\n  401975:\t48 89 e5             \tmov    %rsp,%rbp\n  401978:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40197c:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  401980:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  401984:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n  401987:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  40198e:\t00 \n  40198f:\t83 7d bc 01          \tcmpl   $0x1,-0x44(%rbp)\n  401993:\t0f 8e ad 00 00 00    \tjle    401a46 <set_contains+0xd2>\n  401999:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40199e:\te8 fd 4f 00 00       \tcallq  4069a0 <stm_get_env>\n  4019a3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4019a7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4019ab:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4019b0:\t48 89 c7             \tmov    %rax,%rdi\n  4019b3:\te8 a8 f8 ff ff       \tcallq  401260 <__sigsetjmp@plt>\n  4019b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4019bc:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4019c1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4019c6:\t48 89 c7             \tmov    %rax,%rdi\n  4019c9:\te8 a2 2a 00 00       \tcallq  404470 <stm_start>\n  4019ce:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4019d2:\t48 8b 00             \tmov    (%rax),%rax\n  4019d5:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4019d9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4019dd:\t48 83 c0 08          \tadd    $0x8,%rax\n  4019e1:\t48 89 c7             \tmov    %rax,%rdi\n  4019e4:\te8 b7 32 00 00       \tcallq  404ca0 <stm_load>\n  4019e9:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4019ed:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4019f1:\t48 89 c7             \tmov    %rax,%rdi\n  4019f4:\te8 a7 32 00 00       \tcallq  404ca0 <stm_load>\n  4019f9:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  4019fd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401a01:\t48 3b 45 c0          \tcmp    -0x40(%rbp),%rax\n  401a05:\t7d 1e                \tjge    401a25 <set_contains+0xb1>\n  401a07:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401a0b:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  401a0f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  401a13:\t48 83 c0 08          \tadd    $0x8,%rax\n  401a17:\t48 89 c7             \tmov    %rax,%rdi\n  401a1a:\te8 81 32 00 00       \tcallq  404ca0 <stm_load>\n  401a1f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401a23:\teb c8                \tjmp    4019ed <set_contains+0x79>\n  401a25:\t90                   \tnop\n  401a26:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401a2b:\te8 f0 2d 00 00       \tcallq  404820 <stm_commit>\n  401a30:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401a34:\t48 3b 45 c0          \tcmp    -0x40(%rbp),%rax\n  401a38:\t0f 94 c0             \tsete   %al\n  401a3b:\t0f b6 c0             \tmovzbl %al,%eax\n  401a3e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  401a41:\te9 a8 00 00 00       \tjmpq   401aee <set_contains+0x17a>\n  401a46:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401a4b:\te8 50 4f 00 00       \tcallq  4069a0 <stm_get_env>\n  401a50:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  401a54:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401a58:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401a5d:\t48 89 c7             \tmov    %rax,%rdi\n  401a60:\te8 fb f7 ff ff       \tcallq  401260 <__sigsetjmp@plt>\n  401a65:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401a69:\tba 01 00 00 00       \tmov    $0x1,%edx\n  401a6e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401a73:\t48 89 c7             \tmov    %rax,%rdi\n  401a76:\te8 f5 29 00 00       \tcallq  404470 <stm_start>\n  401a7b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  401a7f:\t48 8b 00             \tmov    (%rax),%rax\n  401a82:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  401a86:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  401a8a:\t48 83 c0 08          \tadd    $0x8,%rax\n  401a8e:\t48 89 c7             \tmov    %rax,%rdi\n  401a91:\te8 0a 32 00 00       \tcallq  404ca0 <stm_load>\n  401a96:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401a9a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401a9e:\t48 89 c7             \tmov    %rax,%rdi\n  401aa1:\te8 fa 31 00 00       \tcallq  404ca0 <stm_load>\n  401aa6:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  401aaa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401aae:\t48 3b 45 c0          \tcmp    -0x40(%rbp),%rax\n  401ab2:\t7d 1e                \tjge    401ad2 <set_contains+0x15e>\n  401ab4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401ab8:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  401abc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  401ac0:\t48 83 c0 08          \tadd    $0x8,%rax\n  401ac4:\t48 89 c7             \tmov    %rax,%rdi\n  401ac7:\te8 d4 31 00 00       \tcallq  404ca0 <stm_load>\n  401acc:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401ad0:\teb c8                \tjmp    401a9a <set_contains+0x126>\n  401ad2:\t90                   \tnop\n  401ad3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401ad8:\te8 43 2d 00 00       \tcallq  404820 <stm_commit>\n  401add:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401ae1:\t48 3b 45 c0          \tcmp    -0x40(%rbp),%rax\n  401ae5:\t0f 94 c0             \tsete   %al\n  401ae8:\t0f b6 c0             \tmovzbl %al,%eax\n  401aeb:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  401aee:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401af1:\tc9                   \tleaveq \n  401af2:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall set_contains(_QWORD *a1, __int64 a2, int a3) {\n  __int64 j;\n  __int64 i;\n  __int64 <span class=\"supfact\">v6</span>;\n  struct __jmp_buf_tag *<span class=\"supfact\">v7</span>;\n  struct __jmp_buf_tag *<span class=\"supfact\">env</span>;\n  __int64 v9;\n  __int64 v10;\n  if (a3 <= Number) {\n    <span class=\"supfact\">v7</span> = (struct __jmp_buf_tag *)stm_get_env();\n    __sigsetjmp(<span class=\"supfact\">v7</span>, Number);\n    stm_start(<span class=\"supfact\">v7</span>, Number L, Number L);\n    v10 = stm_load(*a1 + Number L);\n    for (i = stm_load(v10);; i = stm_load(v10)) {\n      <span class=\"supfact\">v6</span> = i;\n      if (i >= a2)\n        break;\n      v10 = stm_load(v10 + Number);\n    }\n  } else {\n    <span class=\"supfact\">env</span> = (struct __jmp_buf_tag *)stm_get_env();\n    __sigsetjmp(<span class=\"supfact\">env</span>, Number);\n    stm_start(<span class=\"supfact\">env</span>, Number L, Number L);\n    v9 = stm_load(*a1 + Number L);\n    for (j = stm_load(v9);; j = stm_load(v9)) {\n      <span class=\"supfact\">v6</span> = j;\n      if (j >= a2)\n        break;\n      v9 = stm_load(v9 + Number);\n    }\n  }\n  stm_commit();\n  return <span class=\"supfact\">v6</span> == a2;\n}", "code_t": "int __cdecl set_contains(intset_t *set, val_t val, int transactional) {\n  __int64 <span class=\"supfact\">v</span>;\n  sigjmp_buf *<span class=\"supfact\">_e_0</span>;\n  sigjmp_buf *<span class=\"supfact\">_e</span>;\n  node_t *next;\n  node_t *nexta;\n  if (transactional <= Number) {\n    <span class=\"supfact\">_e_0</span> = (sigjmp_buf *)stm_get_env();\n    __sigsetjmp((struct __jmp_buf_tag *)<span class=\"supfact\">_e_0</span>, Number);\n    stm_start(<span class=\"supfact\">_e_0</span>, Number L, Number L);\n    for (nexta = (node_t *)stm_load(&set->head->next);;\n         nexta = (node_t *)stm_load(&nexta->next)) {\n      <span class=\"supfact\">v</span> = stm_load(nexta);\n      if (<span class=\"supfact\">v</span> >= val)\n        break;\n    }\n  } else {\n    <span class=\"supfact\">_e</span> = (sigjmp_buf *)stm_get_env();\n    __sigsetjmp((struct __jmp_buf_tag *)<span class=\"supfact\">_e</span>, Number);\n    stm_start(<span class=\"supfact\">_e</span>, Number L, Number L);\n    for (next = (node_t *)stm_load(&set->head->next);;\n         next = (node_t *)stm_load(&next->next)) {\n      <span class=\"supfact\">v</span> = stm_load(next);\n      if (<span class=\"supfact\">v</span> >= val)\n        break;\n    }\n  }\n  stm_commit();\n  return <span class=\"supfact\">v</span> == val;\n}", "var": [{"name": "env", "type": "size_t", "ref_name": "_e", "ref_type": "sigjmp_buf *"}, {"name": "v7", "type": "size_t", "ref_name": "_e_0", "ref_type": "sigjmp_buf *"}, {"name": "v6", "type": "size_t", "ref_name": "v", "ref_type": "__int64"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/b534a66dd5f2266c09081201bdebe0d8411d58e1af0a1570751a1779b1566328", "path_in_repo": "madeye/GRACE/qemu-0.12.5/ppc64abi32-linux-user/translate.o", "objdump": "00000000000009a1 <tcg_gen_helperN>:\n     9a1:\t55                   \tpush   %rbp\n     9a2:\t48 89 e5             \tmov    %rsp,%rbp\n     9a5:\t48 83 ec 40          \tsub    $0x40,%rsp\n     9a9:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     9ad:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     9b0:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n     9b3:\t48 89 4d d8          \tmov    %rcx,-0x28(%rbp)\n     9b7:\t44 89 45 d4          \tmov    %r8d,-0x2c(%rbp)\n     9bb:\t4c 89 4d c8          \tmov    %r9,-0x38(%rbp)\n     9bf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9c3:\t48 89 c7             \tmov    %rax,%rdi\n     9c6:\te8 00 00 00 00       \tcallq  9cb <tcg_gen_helperN+0x2a>\n     9cb:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     9ce:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     9d1:\t8b 7d d4             \tmov    -0x2c(%rbp),%edi\n     9d4:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n     9d8:\t8b 4d e0             \tmov    -0x20(%rbp),%ecx\n     9db:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     9de:\t48 83 ec 08          \tsub    $0x8,%rsp\n     9e2:\tff 75 c8             \tpushq  -0x38(%rbp)\n     9e5:\t41 89 f9             \tmov    %edi,%r9d\n     9e8:\t49 89 f0             \tmov    %rsi,%r8\n     9eb:\t89 c6                \tmov    %eax,%esi\n     9ed:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     9f2:\te8 00 00 00 00       \tcallq  9f7 <tcg_gen_helperN+0x56>\n     9f7:\t48 83 c4 10          \tadd    $0x10,%rsp\n     9fb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     9fe:\t89 c7                \tmov    %eax,%edi\n     a00:\te8 00 00 00 00       \tcallq  a05 <tcg_gen_helperN+0x64>\n     a05:\t90                   \tnop\n     a06:\tc9                   \tleaveq \n     a07:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tcg_gen_helperN(__int64 a1, unsigned int a2, unsigned int a3,\n                                   __int64 a4, unsigned int a5, __int64 a6) {\n  unsigned int <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = tcg_const_i64(a1);\n  tcg_gen_callN(&tcg_ctx, <span class=\"supfact\">v11</span>, a2, a3, a4, a5, a6);\n  return tcg_temp_free_i64(<span class=\"supfact\">v11</span>);\n}", "code_t": "void __cdecl tcg_gen_helperN(void *func, int flags, int sizemask, TCGArg ret,\n                             int nargs, TCGArg *args) {\n  unsigned int <span class=\"supfact\">fn</span>;\n  <span class=\"supfact\">fn</span> = tcg_const_i64(func);\n  tcg_gen_callN(&tcg_ctx, <span class=\"supfact\">fn</span>, (unsigned int)flags,\n                (unsigned int)sizemask, ret, (unsigned int)nargs, args);\n  tcg_temp_free_i64(<span class=\"supfact\">fn</span>);\n}", "var": [{"name": "v11", "type": "unsigned int", "ref_name": "fn", "ref_type": "unsigned int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "bloodstalker", "repo_name": "luactest", "path": "bloodstalker/luactest/fe17f1ae11dcb6319b1aa7019ce6f1596c22ee8290a07c17b5d8d95f7fbfebdd", "path_in_repo": "bloodstalker/luactest//lua/src/lua", "objdump": "0000000000411af7 <registerlocalvar>:\n  411af7:\t55                   \tpush   %rbp\n  411af8:\t48 89 e5             \tmov    %rsp,%rbp\n  411afb:\t48 83 ec 30          \tsub    $0x30,%rsp\n  411aff:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  411b03:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  411b07:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  411b0b:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  411b0f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  411b13:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  411b17:\t48 8b 00             \tmov    (%rax),%rax\n  411b1a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  411b1e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  411b22:\t8b 40 24             \tmov    0x24(%rax),%eax\n  411b25:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  411b28:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  411b2c:\t0f b7 40 38          \tmovzwl 0x38(%rax),%eax\n  411b30:\t0f bf d0             \tmovswl %ax,%edx\n  411b33:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  411b37:\t8b 40 24             \tmov    0x24(%rax),%eax\n  411b3a:\t39 c2                \tcmp    %eax,%edx\n  411b3c:\t7c 5c                \tjl     411b9a <registerlocalvar+0xa3>\n  411b3e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  411b42:\t48 8d 50 24          \tlea    0x24(%rax),%rdx\n  411b46:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  411b4a:\t48 8b 70 50          \tmov    0x50(%rax),%rsi\n  411b4e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  411b52:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  411b56:\t41 b9 b5 56 43 00    \tmov    $0x4356b5,%r9d\n  411b5c:\t41 b8 ff 7f 00 00    \tmov    $0x7fff,%r8d\n  411b62:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  411b67:\t48 89 c7             \tmov    %rax,%rdi\n  411b6a:\te8 db e4 ff ff       \tcallq  41004a <luaM_growaux_>\n  411b6f:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  411b73:\t48 89 42 50          \tmov    %rax,0x50(%rdx)\n  411b77:\teb 21                \tjmp    411b9a <registerlocalvar+0xa3>\n  411b79:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  411b7d:\t48 8b 48 50          \tmov    0x50(%rax),%rcx\n  411b81:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  411b84:\t8d 50 01             \tlea    0x1(%rax),%edx\n  411b87:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  411b8a:\t48 98                \tcltq   \n  411b8c:\t48 c1 e0 04          \tshl    $0x4,%rax\n  411b90:\t48 01 c8             \tadd    %rcx,%rax\n  411b93:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  411b9a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  411b9e:\t8b 40 24             \tmov    0x24(%rax),%eax\n  411ba1:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  411ba4:\t7c d3                \tjl     411b79 <registerlocalvar+0x82>\n  411ba6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  411baa:\t48 8b 50 50          \tmov    0x50(%rax),%rdx\n  411bae:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  411bb2:\t0f b7 40 38          \tmovzwl 0x38(%rax),%eax\n  411bb6:\t48 0f bf c0          \tmovswq %ax,%rax\n  411bba:\t48 c1 e0 04          \tshl    $0x4,%rax\n  411bbe:\t48 01 c2             \tadd    %rax,%rdx\n  411bc1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  411bc5:\t48 89 02             \tmov    %rax,(%rdx)\n  411bc8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  411bcc:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n  411bd0:\t0f b6 c0             \tmovzbl %al,%eax\n  411bd3:\t83 e0 04             \tand    $0x4,%eax\n  411bd6:\t85 c0                \ttest   %eax,%eax\n  411bd8:\t74 2d                \tje     411c07 <registerlocalvar+0x110>\n  411bda:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  411bde:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n  411be2:\t0f b6 c0             \tmovzbl %al,%eax\n  411be5:\t83 e0 03             \tand    $0x3,%eax\n  411be8:\t85 c0                \ttest   %eax,%eax\n  411bea:\t74 1b                \tje     411c07 <registerlocalvar+0x110>\n  411bec:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  411bf0:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  411bf4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  411bf8:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  411bfc:\t48 89 ce             \tmov    %rcx,%rsi\n  411bff:\t48 89 c7             \tmov    %rax,%rdi\n  411c02:\te8 96 b9 ff ff       \tcallq  40d59d <luaC_barrier_>\n  411c07:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  411c0b:\t0f b7 40 38          \tmovzwl 0x38(%rax),%eax\n  411c0f:\t89 c2                \tmov    %eax,%edx\n  411c11:\t83 c2 01             \tadd    $0x1,%edx\n  411c14:\t89 d1                \tmov    %edx,%ecx\n  411c16:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  411c1a:\t66 89 4a 38          \tmov    %cx,0x38(%rdx)\n  411c1e:\t98                   \tcwtl   \n  411c1f:\tc9                   \tleaveq \n  411c20:\tc3                   \tretq   ", "code_s": "int __fastcall registerlocalvar(__int64 a1, __int64 a2) {\n  int v2;\n  int result;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int16 *<span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v5</span> = *(__int16 **)(a1 + Number);\n  <span class=\"supfact\">v4</span> = *(_QWORD *)<span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v6</span> = *(_DWORD *)(*(_QWORD *)<span class=\"supfact\">v5</span> + Number L);\n  if (<span class=\"supfact\">v5</span>[Number] >= <span class=\"supfact\">v6</span>)\n    *(_QWORD *)(<span class=\"supfact\">v4</span> + Number) = luaM_growaux_(\n        *(_QWORD **)(a1 + Number), *(_QWORD *)(<span class=\"supfact\">v4</span> + Number),\n        (int *)(<span class=\"supfact\">v4</span> + Number), Number L, Number,\n        (__int64)String);\n  while (<span class=\"supfact\">v6</span> < *(_DWORD *)(<span class=\"supfact\">v4</span> + Number)) {\n    v2 = <span class=\"supfact\">v6</span>++;\n    *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v4</span> + Number) + Number L * v2) =\n        Number L;\n  }\n  *(_QWORD *)(Number L * <span class=\"supfact\">v5</span>[Number] +\n              *(_QWORD *)(<span class=\"supfact\">v4</span> + Number)) = a2;\n  if ((*(_BYTE *)(<span class=\"supfact\">v4</span> + Number) & Number) != Number &&\n      (*(_BYTE *)(a2 + Number) & Number) != Number)\n    luaC_barrier_(*(_QWORD *)(a1 + Number), <span class=\"supfact\">v4</span>, a2);\n  LOWORD(result) = <span class=\"supfact\">v5</span>[Number];\n  <span class=\"supfact\">v5</span>[Number] = result + Number;\n  return (__int16)result;\n}", "code_t": "int __cdecl registerlocalvar(LexState_0 *ls, TString_0 *varname) {\n  int v2;\n  int result;\n  Proto_0 *<span class=\"supfact\">f</span>;\n  FuncState *<span class=\"supfact\">fs_0</span>;\n  int <span class=\"supfact\">oldsize</span>;\n  <span class=\"supfact\">fs_0</span> = ls->fs;\n  <span class=\"supfact\">f</span> = <span class=\"supfact\">fs_0</span>-><span class=\"supfact\">f</span>;\n  <span class=\"supfact\">oldsize</span> =\n      <span class=\"supfact\">fs_0</span>-><span class=\"supfact\">f</span>->sizelocvars;\n  if (<span class=\"supfact\">fs_0</span>->nlocvars >= <span class=\"supfact\">oldsize</span>)\n    <span class=\"supfact\">f</span>->locvars = (LocVar_0 *)luaM_growaux_(\n        ls->L, <span class=\"supfact\">f</span>->locvars, &<span class=\"supfact\">f</span>->sizelocvars,\n        Number, Number, String);\n  while (<span class=\"supfact\">oldsize</span> < <span class=\"supfact\">f</span>->sizelocvars) {\n    v2 = <span class=\"supfact\">oldsize</span>++;\n    <span class=\"supfact\">f</span>->locvars[v2].varname = Number L;\n  }\n  <span class=\"supfact\">f</span>->locvars[<span class=\"supfact\">fs_0</span>->nlocvars].varname = varname;\n  if ((<span class=\"supfact\">f</span>->marked & Number) != Number &&\n      (varname->marked & Number) != Number)\n    luaC_barrier_(ls->L, (GCObject_0 *)<span class=\"supfact\">f</span>,\n                  (GCObject_0 *)varname);\n  LOWORD(result) = <span class=\"supfact\">fs_0</span>->nlocvars;\n  <span class=\"supfact\">fs_0</span>->nlocvars = result + Number;\n  return (__int16)result;\n}", "var": [{"name": "v6", "type": "int", "ref_name": "oldsize", "ref_type": "int"}, {"name": "v5", "type": "FuncState *", "ref_name": "fs_0", "ref_type": "FuncState *"}, {"name": "v4", "type": "GCObject_0 *", "ref_name": "f", "ref_type": "Proto_0 *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "Panopto", "repo_name": "panopto-ffmpeg", "path": "Panopto/panopto-ffmpeg/6f5f1e98190293618d73f0e821bb594bc2de566c24cb1a9acf4d8d9175a00600", "path_in_repo": "Panopto/panopto-ffmpeg//libavformat/tedcaptionsdec.o", "objdump": "00000000000005f0 <parse_int>:\n 5f0:\t48 83 ec 38          \tsub    $0x38,%rsp\n 5f4:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n 5f9:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n 5fe:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n 603:\t48 c7 44 24 28 00 00 \tmovq   $0x0,0x28(%rsp)\n 60a:\t00 00 \n 60c:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n 611:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 616:\t48 89 d6             \tmov    %rdx,%rsi\n 619:\t48 89 c7             \tmov    %rax,%rdi\n 61c:\te8 4d fb ff ff       \tcallq  16e <skip_spaces>\n 621:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 626:\t8b 00                \tmov    (%rax),%eax\n 628:\t83 e8 30             \tsub    $0x30,%eax\n 62b:\t83 f8 09             \tcmp    $0x9,%eax\n 62e:\t76 45                \tjbe    675 <parse_int+0x85>\n 630:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n 635:\teb 5f                \tjmp    696 <parse_int+0xa6>\n 637:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n 63c:\t48 89 d0             \tmov    %rdx,%rax\n 63f:\t48 c1 e0 02          \tshl    $0x2,%rax\n 643:\t48 01 d0             \tadd    %rdx,%rax\n 646:\t48 01 c0             \tadd    %rax,%rax\n 649:\t48 89 c2             \tmov    %rax,%rdx\n 64c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 651:\t8b 00                \tmov    (%rax),%eax\n 653:\t83 e8 30             \tsub    $0x30,%eax\n 656:\t48 98                \tcltq   \n 658:\t48 01 d0             \tadd    %rdx,%rax\n 65b:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n 660:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n 665:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 66a:\t48 89 d6             \tmov    %rdx,%rsi\n 66d:\t48 89 c7             \tmov    %rax,%rdi\n 670:\te8 9f fa ff ff       \tcallq  114 <next_byte>\n 675:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 67a:\t8b 00                \tmov    (%rax),%eax\n 67c:\t83 e8 30             \tsub    $0x30,%eax\n 67f:\t83 f8 09             \tcmp    $0x9,%eax\n 682:\t76 b3                \tjbe    637 <parse_int+0x47>\n 684:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 689:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n 68e:\t48 89 10             \tmov    %rdx,(%rax)\n 691:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 696:\t48 83 c4 38          \tadd    $0x38,%rsp\n 69a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall parse_int(__int64 a1, unsigned int *a2, __int64 *a3) {\n  __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = Number L;\n  skip_spaces(a1, a2);\n  if (*a2 - Number > Number)\n    return Number L;\n  while (*a2 - Number <= Number) {\n    <span class=\"supfact\">v5</span> = Number * <span class=\"supfact\">v5</span> + (int)(*a2 - Number);\n    next_byte(a1, a2);\n  }\n  *a3 = <span class=\"supfact\">v5</span>;\n  return Number L;\n}", "code_t": "int __cdecl parse_int(AVIOContext_0 *pb, int *cur_byte, int64_t *result) {\n  __int64 <span class=\"supfact\">val</span>;\n  <span class=\"supfact\">val</span> = Number L;\n  skip_spaces(pb, cur_byte);\n  if ((unsigned int)(*cur_byte - Number) > Number)\n    return Number;\n  while ((unsigned int)(*cur_byte - Number) <= Number) {\n    <span class=\"supfact\">val</span> = Number * <span class=\"supfact\">val</span> + *cur_byte - Number;\n    next_byte(pb, cur_byte);\n  }\n  *result = <span class=\"supfact\">val</span>;\n  return Number;\n}", "var": [{"name": "v5", "type": "__int64", "ref_name": "val", "ref_type": "__int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "casenh", "repo_name": "buddy-threads", "path": "casenh/buddy-threads/b5891d3ab41ca337cae14b0d1520d2e9e961057e07945acf8d8907c60ea6c991", "path_in_repo": "casenh/buddy-threads/linux-3.19/tools/testing/selftests/net/psock_tpacket", "objdump": "00000000004023ed <__v3_walk_block>:\n  4023ed:\t55                   \tpush   %rbp\n  4023ee:\t48 89 e5             \tmov    %rsp,%rbp\n  4023f1:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4023f5:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  4023f9:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n  4023fc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402400:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  402403:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  402406:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  40240d:\t00 \n  40240e:\t48 c7 45 e8 30 00 00 \tmovq   $0x30,-0x18(%rbp)\n  402415:\t00 \n  402416:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  402419:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40241d:\t89 d6                \tmov    %edx,%esi\n  40241f:\t48 89 c7             \tmov    %rax,%rdi\n  402422:\te8 74 ff ff ff       \tcallq  40239b <__v3_test_block_header>\n  402427:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40242b:\t8b 40 10             \tmov    0x10(%rax),%eax\n  40242e:\t89 c2                \tmov    %eax,%edx\n  402430:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402434:\t48 01 d0             \tadd    %rdx,%rax\n  402437:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40243b:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  402442:\te9 92 00 00 00       \tjmpq   4024d9 <__v3_walk_block+0xec>\n  402447:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40244b:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  40244e:\t89 c0                \tmov    %eax,%eax\n  402450:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n  402454:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  402458:\t8b 00                \tmov    (%rax),%eax\n  40245a:\t85 c0                \ttest   %eax,%eax\n  40245c:\t74 0e                \tje     40246c <__v3_walk_block+0x7f>\n  40245e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  402462:\t8b 00                \tmov    (%rax),%eax\n  402464:\t89 c0                \tmov    %eax,%eax\n  402466:\t48 01 45 e8          \tadd    %rax,-0x18(%rbp)\n  40246a:\teb 20                \tjmp    40248c <__v3_walk_block+0x9f>\n  40246c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  402470:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  402473:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  402477:\t0f b7 40 18          \tmovzwl 0x18(%rax),%eax\n  40247b:\t0f b7 c0             \tmovzwl %ax,%eax\n  40247e:\t01 d0                \tadd    %edx,%eax\n  402480:\t83 c0 07             \tadd    $0x7,%eax\n  402483:\t89 c0                \tmov    %eax,%eax\n  402485:\t83 e0 f8             \tand    $0xfffffff8,%eax\n  402488:\t48 01 45 e8          \tadd    %rax,-0x18(%rbp)\n  40248c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  402490:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  402493:\t89 c1                \tmov    %eax,%ecx\n  402495:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  402499:\t0f b7 40 18          \tmovzwl 0x18(%rax),%eax\n  40249d:\t0f b7 d0             \tmovzwl %ax,%edx\n  4024a0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4024a4:\t48 01 d0             \tadd    %rdx,%rax\n  4024a7:\t48 89 ce             \tmov    %rcx,%rsi\n  4024aa:\t48 89 c7             \tmov    %rax,%rdi\n  4024ad:\te8 4d f3 ff ff       \tcallq  4017ff <test_payload>\n  4024b2:\te8 f3 f2 ff ff       \tcallq  4017aa <status_bar_update>\n  4024b7:\t8b 05 33 2d 00 00    \tmov    0x2d33(%rip),%eax        # 4051f0 <total_packets>\n  4024bd:\t83 c0 01             \tadd    $0x1,%eax\n  4024c0:\t89 05 2a 2d 00 00    \tmov    %eax,0x2d2a(%rip)        # 4051f0 <total_packets>\n  4024c6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4024ca:\t8b 00                \tmov    (%rax),%eax\n  4024cc:\t89 c0                \tmov    %eax,%eax\n  4024ce:\t48 01 45 e0          \tadd    %rax,-0x20(%rbp)\n  4024d2:\t0f ae f0             \tmfence \n  4024d5:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4024d9:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4024dc:\t3b 45 dc             \tcmp    -0x24(%rbp),%eax\n  4024df:\t0f 8c 62 ff ff ff    \tjl     402447 <__v3_walk_block+0x5a>\n  4024e5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4024e9:\t89 c1                \tmov    %eax,%ecx\n  4024eb:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  4024ee:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4024f2:\t89 ce                \tmov    %ecx,%esi\n  4024f4:\t48 89 c7             \tmov    %rax,%rdi\n  4024f7:\te8 36 fe ff ff       \tcallq  402332 <__v3_test_block_len>\n  4024fc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402500:\t89 c2                \tmov    %eax,%edx\n  402502:\t8b 05 ec 2c 00 00    \tmov    0x2cec(%rip),%eax        # 4051f4 <total_bytes>\n  402508:\t01 d0                \tadd    %edx,%eax\n  40250a:\t89 05 e4 2c 00 00    \tmov    %eax,0x2ce4(%rip)        # 4051f4 <total_bytes>\n  402510:\t90                   \tnop\n  402511:\tc9                   \tleaveq \n  402512:\tc3                   \tretq   ", "code_s": "__int64 __fastcall _v3_walk_block(__int64 a1, unsigned int a2) {\n  unsigned int v2;\n  __int64 result;\n  int <span class=\"supfact\">v4</span>;\n  unsigned int *<span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v4</span> = *(_DWORD *)(a1 + Number);\n  <span class=\"supfact\">v7</span> = Number;\n  <span class=\"supfact\">v6</span> = Number;\n  _v3_test_block_header(a1, a2);\n  <span class=\"supfact\">v5</span> = (unsigned int *)(*(unsigned int *)(a1 + Number) + a1);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v4</span>;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v7</span> += <span class=\"supfact\">v5</span>[Number];\n    if (*<span class=\"supfact\">v5</span>)\n      v2 = *<span class=\"supfact\">v5</span>;\n    else\n      v2 = (<span class=\"supfact\">v5</span>[Number] +\n            *((unsigned __int16 *)<span class=\"supfact\">v5</span> + Number) + Number) &\n           Number;\n    <span class=\"supfact\">v6</span> += v2;\n    test_payload((__int64)<span class=\"supfact\">v5</span> +\n                     *((unsigned __int16 *)<span class=\"supfact\">v5</span> + Number),\n                 <span class=\"supfact\">v5</span>[Number]);\n    status_bar_update();\n    ++total_packets;\n    <span class=\"supfact\">v5</span> =\n        (unsigned int *)((char *)<span class=\"supfact\">v5</span> + *<span class=\"supfact\">v5</span>);\n    _mm_mfence();\n  }\n  _v3_test_block_len(a1, <span class=\"supfact\">v6</span>, a2);\n  result = (unsigned int)(<span class=\"supfact\">v7</span> + total_bytes);\n  total_bytes += <span class=\"supfact\">v7</span>;\n  return result;\n}", "code_t": "void __cdecl _v3_walk_block(block_desc *pbd, const int block_num) {\n  unsigned int v2;\n  int <span class=\"supfact\">num_pkts</span>;\n  tpacket3_hdr *<span class=\"supfact\">ppd</span>;\n  uint32_t <span class=\"supfact\">bytes_with_padding</span>;\n  int <span class=\"supfact\">bytes</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">num_pkts</span> = pbd->h1.<span class=\"supfact\">num_pkts</span>;\n  <span class=\"supfact\">bytes</span> = Number;\n  <span class=\"supfact\">bytes_with_padding</span> = Number;\n  _v3_test_block_header(pbd, block_num);\n  <span class=\"supfact\">ppd</span> =\n      (tpacket3_hdr *)((char *)pbd + pbd->h1.offset_to_first_pkt);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">num_pkts</span>;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">bytes</span> += <span class=\"supfact\">ppd</span>->tp_snaplen;\n    if (<span class=\"supfact\">ppd</span>->tp_next_offset)\n      v2 = <span class=\"supfact\">ppd</span>->tp_next_offset;\n    else\n      v2 = (<span class=\"supfact\">ppd</span>->tp_snaplen + <span class=\"supfact\">ppd</span>->tp_mac +\n            Number) &\n           Number;\n    <span class=\"supfact\">bytes_with_padding</span> += v2;\n    test_payload((char *)<span class=\"supfact\">ppd</span> + <span class=\"supfact\">ppd</span>->tp_mac,\n                 <span class=\"supfact\">ppd</span>->tp_snaplen);\n    status_bar_update();\n    ++total_packets;\n    <span class=\"supfact\">ppd</span> = (tpacket3_hdr *)((char *)<span class=\"supfact\">ppd</span> +\n                                           <span class=\"supfact\">ppd</span>->tp_next_offset);\n    _mm_mfence();\n  }\n  _v3_test_block_len(pbd, <span class=\"supfact\">bytes_with_padding</span>, block_num);\n  total_bytes += <span class=\"supfact\">bytes</span>;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v7", "type": "int", "ref_name": "bytes", "ref_type": "int"}, {"name": "v6", "type": "uint32_t", "ref_name": "bytes_with_padding", "ref_type": "uint32_t"}, {"name": "v5", "type": "tpacket3_hdr *", "ref_name": "ppd", "ref_type": "tpacket3_hdr *"}, {"name": "v4", "type": "int", "ref_name": "num_pkts", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "Lancher", "repo_name": "linux-programming-example", "path": "Lancher/linux-programming-example/55118fde1455b33d1d362a26a9ae5edf3ad61f2c8723d3892b570fca783a9fd7", "path_in_repo": "Lancher/linux-programming-example//bin/mmap_pri_f_map", "objdump": "0000000000401192 <main>:\n  401192:\t55                   \tpush   %rbp\n  401193:\t48 89 e5             \tmov    %rsp,%rbp\n  401196:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  40119d:\t89 bd 5c ff ff ff    \tmov    %edi,-0xa4(%rbp)\n  4011a3:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n  4011aa:\t83 bd 5c ff ff ff 02 \tcmpl   $0x2,-0xa4(%rbp)\n  4011b1:\t74 26                \tje     4011d9 <main+0x47>\n  4011b3:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4011ba:\t48 8b 00             \tmov    (%rax),%rax\n  4011bd:\t48 89 c6             \tmov    %rax,%rsi\n  4011c0:\tbf 04 20 40 00       \tmov    $0x402004,%edi\n  4011c5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4011ca:\te8 81 fe ff ff       \tcallq  401050 <printf@plt>\n  4011cf:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4011d4:\te8 c7 fe ff ff       \tcallq  4010a0 <exit@plt>\n  4011d9:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4011e0:\t48 83 c0 08          \tadd    $0x8,%rax\n  4011e4:\t48 8b 00             \tmov    (%rax),%rax\n  4011e7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4011ec:\t48 89 c7             \tmov    %rax,%rdi\n  4011ef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4011f4:\te8 87 fe ff ff       \tcallq  401080 <open@plt>\n  4011f9:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4011fc:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  401200:\t79 14                \tjns    401216 <main+0x84>\n  401202:\tbf 13 20 40 00       \tmov    $0x402013,%edi\n  401207:\te8 84 fe ff ff       \tcallq  401090 <perror@plt>\n  40120c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401211:\te8 8a fe ff ff       \tcallq  4010a0 <exit@plt>\n  401216:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  40121d:\t48 83 c0 08          \tadd    $0x8,%rax\n  401221:\t48 8b 00             \tmov    (%rax),%rax\n  401224:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  40122b:\t48 89 d6             \tmov    %rdx,%rsi\n  40122e:\t48 89 c7             \tmov    %rax,%rdi\n  401231:\te8 4a 01 00 00       \tcallq  401380 <__stat>\n  401236:\t85 c0                \ttest   %eax,%eax\n  401238:\t79 14                \tjns    40124e <main+0xbc>\n  40123a:\tbf 1b 20 40 00       \tmov    $0x40201b,%edi\n  40123f:\te8 4c fe ff ff       \tcallq  401090 <perror@plt>\n  401244:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401249:\te8 52 fe ff ff       \tcallq  4010a0 <exit@plt>\n  40124e:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  401252:\t48 89 c6             \tmov    %rax,%rsi\n  401255:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401258:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  40125e:\t41 89 c0             \tmov    %eax,%r8d\n  401261:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n  401266:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40126b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401270:\te8 cb fd ff ff       \tcallq  401040 <mmap@plt>\n  401275:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401279:\t48 83 7d f0 ff       \tcmpq   $0xffffffffffffffff,-0x10(%rbp)\n  40127e:\t75 14                \tjne    401294 <main+0x102>\n  401280:\tbf 23 20 40 00       \tmov    $0x402023,%edi\n  401285:\te8 06 fe ff ff       \tcallq  401090 <perror@plt>\n  40128a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40128f:\te8 0c fe ff ff       \tcallq  4010a0 <exit@plt>\n  401294:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  401298:\t48 89 c2             \tmov    %rax,%rdx\n  40129b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40129f:\t48 89 c6             \tmov    %rax,%rsi\n  4012a2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4012a7:\te8 84 fd ff ff       \tcallq  401030 <write@plt>\n  4012ac:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n  4012b0:\t48 39 d0             \tcmp    %rdx,%rax\n  4012b3:\t74 14                \tje     4012c9 <main+0x137>\n  4012b5:\tbf 2b 20 40 00       \tmov    $0x40202b,%edi\n  4012ba:\te8 d1 fd ff ff       \tcallq  401090 <perror@plt>\n  4012bf:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4012c4:\te8 d7 fd ff ff       \tcallq  4010a0 <exit@plt>\n  4012c9:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  4012cd:\t48 89 c2             \tmov    %rax,%rdx\n  4012d0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4012d4:\t48 89 d6             \tmov    %rdx,%rsi\n  4012d7:\t48 89 c7             \tmov    %rax,%rdi\n  4012da:\te8 91 fd ff ff       \tcallq  401070 <munmap@plt>\n  4012df:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4012e2:\t75 14                \tjne    4012f8 <main+0x166>\n  4012e4:\tbf 34 20 40 00       \tmov    $0x402034,%edi\n  4012e9:\te8 a2 fd ff ff       \tcallq  401090 <perror@plt>\n  4012ee:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4012f3:\te8 a8 fd ff ff       \tcallq  4010a0 <exit@plt>\n  4012f8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4012fd:\te8 9e fd ff ff       \tcallq  4010a0 <exit@plt>\n  401302:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  401309:\t00 00 00 \n  40130c:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  ssize_t v3;\n  struct stat <span class=\"supfact\">v4</span>;\n  void *<span class=\"supfact\">buf</span>;\n  int <span class=\"supfact\">fd</span>;\n  if (argc != Number) {\n    printf(String, *argv);\n    exit(Number);\n  }\n  <span class=\"supfact\">fd</span> = open(argv[Number], Number, envp);\n  if (<span class=\"supfact\">fd</span> < Number) {\n    perror(String);\n    exit(Number);\n  }\n  if ((int)stat((char *)argv[Number], &<span class=\"supfact\">v4</span>) < Number) {\n    perror(String);\n    exit(Number);\n  }\n  <span class=\"supfact\">buf</span> = mmap(Number L, <span class=\"supfact\">v4</span>.st_size, Number,\n                             Number, <span class=\"supfact\">fd</span>, Number L);\n  if (<span class=\"supfact\">buf</span> == (void *)Number) {\n    perror(String);\n    exit(Number);\n  }\n  v3 = write(Number, <span class=\"supfact\">buf</span>, <span class=\"supfact\">v4</span>.st_size);\n  if (v3 != <span class=\"supfact\">v4</span>.st_size) {\n    perror(String);\n    exit(Number);\n  }\n  if (munmap(<span class=\"supfact\">buf</span>, <span class=\"supfact\">v4</span>.st_size) == Number) {\n    perror(String);\n    exit(Number);\n  }\n  exit(Number);\n}", "code_t": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  ssize_t v3;\n  stat <span class=\"supfact\">st</span>;\n  char *<span class=\"supfact\">addr</span>;\n  int <span class=\"supfact\">fd</span>;\n  if (argc != Number) {\n    printf(String, *argv);\n    exit(Number);\n  }\n  <span class=\"supfact\">fd</span> = open(argv[Number], Number, envp);\n  if (<span class=\"supfact\">fd</span> < Number) {\n    perror(String);\n    exit(Number);\n  }\n  if ((int)stat_0((char *)argv[Number], &<span class=\"supfact\">st</span>) < Number) {\n    perror(String);\n    exit(Number);\n  }\n  <span class=\"supfact\">addr</span> =\n      (char *)mmap(Number L, <span class=\"supfact\">st</span>.st_size, Number, Number,\n                   <span class=\"supfact\">fd</span>, Number L);\n  if (<span class=\"supfact\">addr</span> == (char *)Number) {\n    perror(String);\n    exit(Number);\n  }\n  v3 = write(Number, <span class=\"supfact\">addr</span>, <span class=\"supfact\">st</span>.st_size);\n  if (v3 != <span class=\"supfact\">st</span>.st_size) {\n    perror(String);\n    exit(Number);\n  }\n  if (munmap(<span class=\"supfact\">addr</span>, <span class=\"supfact\">st</span>.st_size) == Number) {\n    perror(String);\n    exit(Number);\n  }\n  exit(Number);\n}", "var": [{"name": "fd", "type": "int", "ref_name": "fd", "ref_type": "int"}, {"name": "buf", "type": "char *", "ref_name": "addr", "ref_type": "char *"}, {"name": "v4", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "has_struc": true, "body_in_train": false}, {"repo_owner": "ariasja", "repo_name": "ReelApi", "path": "ariasja/ReelApi/69d935a560f08e0b68f9851f3dad60a69c8506719b1c5b99a8919682ec51f329", "path_in_repo": "ariasja/ReelApi/ffmpeg/libavcodec/x86/fmtconvert_init.o", "objdump": "000000000000011e <float_to_int16_interleave_misc_sse>:\n 11e:\t48 83 ec 38          \tsub    $0x38,%rsp\n 122:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n 127:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n 12c:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n 131:\t89 4c 24 04          \tmov    %ecx,0x4(%rsp)\n 135:\tc7 44 24 2c 00 00 00 \tmovl   $0x0,0x2c(%rsp)\n 13c:\t00 \n 13d:\teb 46                \tjmp    185 <float_to_int16_interleave_misc_sse+0x67>\n 13f:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n 143:\t48 63 c8             \tmovslq %eax,%rcx\n 146:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n 14a:\t48 98                \tcltq   \n 14c:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 153:\t00 \n 154:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 159:\t48 01 d0             \tadd    %rdx,%rax\n 15c:\t48 8b 00             \tmov    (%rax),%rax\n 15f:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n 163:\t48 63 d2             \tmovslq %edx,%rdx\n 166:\t48 8d 34 12          \tlea    (%rdx,%rdx,1),%rsi\n 16a:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n 16f:\t48 8d 3c 16          \tlea    (%rsi,%rdx,1),%rdi\n 173:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n 178:\t48 89 c6             \tmov    %rax,%rsi\n 17b:\te8 00 00 00 00       \tcallq  180 <float_to_int16_interleave_misc_sse+0x62>\n 180:\t83 44 24 2c 01       \taddl   $0x1,0x2c(%rsp)\n 185:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n 189:\t3b 44 24 04          \tcmp    0x4(%rsp),%eax\n 18d:\t7c b0                \tjl     13f <float_to_int16_interleave_misc_sse+0x21>\n 18f:\t90                   \tnop\n 190:\t90                   \tnop\n 191:\t48 83 c4 38          \tadd    $0x38,%rsp\n 195:\tc3                   \tretq   ", "code_s": "__int64 __fastcall float_to_int16_interleave_misc_sse(__int64 a1, __int64 a2,\n                                                      __int64 a3, int a4) {\n  __int64 result;\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = <span class=\"supfact\">i</span>;\n    if ((int)<span class=\"supfact\">i</span> >= a4)\n      break;\n    ff_float_to_int16_step_sse(\n        Number L * (int)<span class=\"supfact\">i</span> + a1,\n        *(_QWORD *)(Number L * (int)<span class=\"supfact\">i</span> + a2), a3, a4);\n  }\n  return result;\n}", "code_t": "void __cdecl float_to_int16_interleave_misc_sse(int16_t *dst, const float **src,\n                                                __int64 len, int channels) {\n  int <span class=\"supfact\">c</span>;\n  for (<span class=\"supfact\">c</span> = Number; <span class=\"supfact\">c</span> < channels;\n       ++<span class=\"supfact\">c</span>)\n    ff_float_to_int16_step_sse(&dst[<span class=\"supfact\">c</span>], src[<span class=\"supfact\">c</span>],\n                               len, channels);\n}", "var": [{"name": "i", "type": "int", "ref_name": "c", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/1e1e7cb97ebb80eac8dbb33680b64d176ff61b4eaa68df0fca22659194da5490", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/stateful_proxy", "objdump": "000000000045e47d <pj_hash_calc>:\n  45e47d:\t55                   \tpush   %rbp\n  45e47e:\t48 89 e5             \tmov    %rsp,%rbp\n  45e481:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n  45e484:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  45e488:\t89 55 d8             \tmov    %edx,-0x28(%rbp)\n  45e48b:\t83 7d d8 ff          \tcmpl   $0xffffffff,-0x28(%rbp)\n  45e48f:\t75 35                \tjne    45e4c6 <pj_hash_calc+0x49>\n  45e491:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  45e495:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  45e499:\teb 1e                \tjmp    45e4b9 <pj_hash_calc+0x3c>\n  45e49b:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  45e49e:\t89 d0                \tmov    %edx,%eax\n  45e4a0:\tc1 e0 05             \tshl    $0x5,%eax\n  45e4a3:\t01 c2                \tadd    %eax,%edx\n  45e4a5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  45e4a9:\t0f b6 00             \tmovzbl (%rax),%eax\n  45e4ac:\t0f b6 c0             \tmovzbl %al,%eax\n  45e4af:\t01 d0                \tadd    %edx,%eax\n  45e4b1:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  45e4b4:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  45e4b9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  45e4bd:\t0f b6 00             \tmovzbl (%rax),%eax\n  45e4c0:\t84 c0                \ttest   %al,%al\n  45e4c2:\t75 d7                \tjne    45e49b <pj_hash_calc+0x1e>\n  45e4c4:\teb 40                \tjmp    45e506 <pj_hash_calc+0x89>\n  45e4c6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  45e4ca:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  45e4ce:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n  45e4d1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  45e4d5:\t48 01 d0             \tadd    %rdx,%rax\n  45e4d8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  45e4dc:\teb 1e                \tjmp    45e4fc <pj_hash_calc+0x7f>\n  45e4de:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  45e4e1:\t89 d0                \tmov    %edx,%eax\n  45e4e3:\tc1 e0 05             \tshl    $0x5,%eax\n  45e4e6:\t01 c2                \tadd    %eax,%edx\n  45e4e8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  45e4ec:\t0f b6 00             \tmovzbl (%rax),%eax\n  45e4ef:\t0f b6 c0             \tmovzbl %al,%eax\n  45e4f2:\t01 d0                \tadd    %edx,%eax\n  45e4f4:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  45e4f7:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n  45e4fc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  45e500:\t48 3b 45 e8          \tcmp    -0x18(%rbp),%rax\n  45e504:\t75 d8                \tjne    45e4de <pj_hash_calc+0x61>\n  45e506:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  45e509:\t5d                   \tpop    %rbp\n  45e50a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_hash_calc(unsigned int a1, _BYTE *a2, int a3) {\n  unsigned __int8 *<span class=\"supfact\">j</span>;\n  _BYTE *<span class=\"supfact\">i</span>;\n  if (a3 == Number) {\n    for (<span class=\"supfact\">i</span> = a2; *<span class=\"supfact\">i</span>; ++<span class=\"supfact\">i</span>)\n      a1 = Number * a1 + (unsigned __int8)*<span class=\"supfact\">i</span>;\n  } else {\n    for (<span class=\"supfact\">j</span> = a2; <span class=\"supfact\">j</span> != &a2[a3];\n         ++<span class=\"supfact\">j</span>)\n      a1 = Number * a1 + *<span class=\"supfact\">j</span>;\n  }\n  return a1;\n}", "code_t": "pj_uint32_t __cdecl pj_hash_calc(pj_uint32_t hash, const void *key,\n                                 unsigned int keylen) {\n  const pj_uint8_t *<span class=\"supfact\">p_0</span>;\n  const pj_uint8_t *<span class=\"supfact\">p</span>;\n  if (keylen == Number) {\n    for (<span class=\"supfact\">p</span> = (const pj_uint8_t *)key; *<span class=\"supfact\">p</span>;\n         ++<span class=\"supfact\">p</span>)\n      hash = Number * hash + *<span class=\"supfact\">p</span>;\n  } else {\n    for (<span class=\"supfact\">p_0</span> = (const pj_uint8_t *)key;\n         <span class=\"supfact\">p_0</span> != (const pj_uint8_t *)((char *)key + keylen);\n         ++<span class=\"supfact\">p_0</span>)\n      hash = Number * hash + *<span class=\"supfact\">p_0</span>;\n  }\n  return hash;\n}", "var": [{"name": "i", "type": "const pj_uint8_t *", "ref_name": "p", "ref_type": "const pj_uint8_t *"}, {"name": "j", "type": "const pj_uint8_t *", "ref_name": "p_0", "ref_type": "const pj_uint8_t *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "grpascal", "repo_name": "GEO", "path": "grpascal/GEO/1af20c332f82f04ccf6e2d64e3d7c49a92c84a50891969e2c0a3827114aa768e", "path_in_repo": "grpascal/GEO/host/Linux/mxview/src/lua/src/lua", "objdump": "0000000000414eb6 <LoadString>:\n  414eb6:\t55                   \tpush   %rbp\n  414eb7:\t48 89 e5             \tmov    %rsp,%rbp\n  414eba:\t48 83 ec 20          \tsub    $0x20,%rsp\n  414ebe:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  414ec2:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n  414ec6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  414eca:\tba 08 00 00 00       \tmov    $0x8,%edx\n  414ecf:\t48 89 ce             \tmov    %rcx,%rsi\n  414ed2:\t48 89 c7             \tmov    %rax,%rdi\n  414ed5:\te8 f5 fe ff ff       \tcallq  414dcf <LoadBlock>\n  414eda:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  414ede:\t48 85 c0             \ttest   %rax,%rax\n  414ee1:\t75 07                \tjne    414eea <LoadString+0x34>\n  414ee3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  414ee8:\teb 57                \tjmp    414f41 <LoadString+0x8b>\n  414eea:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  414eee:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  414ef2:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n  414ef6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  414efa:\t48 8b 00             \tmov    (%rax),%rax\n  414efd:\t48 89 ce             \tmov    %rcx,%rsi\n  414f00:\t48 89 c7             \tmov    %rax,%rdi\n  414f03:\te8 ad 45 00 00       \tcallq  4194b5 <luaZ_openspace>\n  414f08:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  414f0c:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  414f10:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  414f14:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  414f18:\t48 89 ce             \tmov    %rcx,%rsi\n  414f1b:\t48 89 c7             \tmov    %rax,%rdi\n  414f1e:\te8 ac fe ff ff       \tcallq  414dcf <LoadBlock>\n  414f23:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  414f27:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n  414f2b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  414f2f:\t48 8b 00             \tmov    (%rax),%rax\n  414f32:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  414f36:\t48 89 ce             \tmov    %rcx,%rsi\n  414f39:\t48 89 c7             \tmov    %rax,%rdi\n  414f3c:\te8 b1 e4 ff ff       \tcallq  4133f2 <luaS_newlstr>\n  414f41:\tc9                   \tleaveq \n  414f42:\tc3                   \tretq   ", "code_s": "__int64 __fastcall LoadString(__int64 *a1) {\n  __int64 v2;\n  __int64 v3;\n  __int64 <span class=\"supfact\">v4</span>;\n  unsigned __int8 *<span class=\"supfact\">v5</span>;\n  LoadBlock(a1, (__int64)&<span class=\"supfact\">v4</span>, Number L);\n  if (!<span class=\"supfact\">v4</span>)\n    return Number L;\n  <span class=\"supfact\">v5</span> =\n      (unsigned __int8 *)luaZ_openspace(*a1, a1[Number], <span class=\"supfact\">v4</span>);\n  LoadBlock(a1, (__int64)<span class=\"supfact\">v5</span>, <span class=\"supfact\">v4</span>);\n  return luaS_newlstr(*a1, <span class=\"supfact\">v5</span>, <span class=\"supfact\">v4</span> - Number,\n                      (__int64)<span class=\"supfact\">v5</span>, v2, v3);\n}", "code_t": "TString_0 *__cdecl LoadString(LoadState *S) {\n  size_t <span class=\"supfact\">size</span>;\n  char *<span class=\"supfact\">s</span>;\n  LoadBlock(S, &<span class=\"supfact\">size</span>, Number);\n  if (!<span class=\"supfact\">size</span>)\n    return Number L;\n  <span class=\"supfact\">s</span> = luaZ_openspace(S->L, S->b, <span class=\"supfact\">size</span>);\n  LoadBlock(S, <span class=\"supfact\">s</span>, <span class=\"supfact\">size</span>);\n  return luaS_newlstr(S->L, <span class=\"supfact\">s</span>, <span class=\"supfact\">size</span> - Number);\n}", "var": [{"name": "v5", "type": "size_t", "ref_name": "s", "ref_type": "char *"}, {"name": "v4", "type": "TString_0 *", "ref_name": "size", "ref_type": "size_t"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "vmware", "repo_name": "likewise-open", "path": "vmware/likewise-open/bb255da41fd974ec8429252b9a8a1b5f1748bbff7f4eb5f527b7322cab998ced", "path_in_repo": "vmware/likewise-open/openssl/test/rsa_test", "objdump": "000000000042b218 <ENGINE_get_prev>:\n  42b218:\t55                   \tpush   %rbp\n  42b219:\t48 89 e5             \tmov    %rsp,%rbp\n  42b21c:\t48 83 ec 20          \tsub    $0x20,%rsp\n  42b220:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  42b224:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  42b22b:\t00 \n  42b22c:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  42b231:\t75 26                \tjne    42b259 <ENGINE_get_prev+0x41>\n  42b233:\t41 b8 fb 00 00 00    \tmov    $0xfb,%r8d\n  42b239:\tb9 ef c3 44 00       \tmov    $0x44c3ef,%ecx\n  42b23e:\tba 43 00 00 00       \tmov    $0x43,%edx\n  42b243:\tbe 74 00 00 00       \tmov    $0x74,%esi\n  42b248:\tbf 26 00 00 00       \tmov    $0x26,%edi\n  42b24d:\te8 13 19 fe ff       \tcallq  40cb65 <ERR_put_error>\n  42b252:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42b257:\teb 6f                \tjmp    42b2c8 <ENGINE_get_prev+0xb0>\n  42b259:\tb9 ff 00 00 00       \tmov    $0xff,%ecx\n  42b25e:\tba ef c3 44 00       \tmov    $0x44c3ef,%edx\n  42b263:\tbe 1e 00 00 00       \tmov    $0x1e,%esi\n  42b268:\tbf 09 00 00 00       \tmov    $0x9,%edi\n  42b26d:\te8 04 33 fe ff       \tcallq  40e576 <CRYPTO_lock>\n  42b272:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42b276:\t48 8b 80 b0 00 00 00 \tmov    0xb0(%rax),%rax\n  42b27d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  42b281:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  42b286:\t74 17                \tje     42b29f <ENGINE_get_prev+0x87>\n  42b288:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  42b28c:\t8b 80 94 00 00 00    \tmov    0x94(%rax),%eax\n  42b292:\t8d 50 01             \tlea    0x1(%rax),%edx\n  42b295:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  42b299:\t89 90 94 00 00 00    \tmov    %edx,0x94(%rax)\n  42b29f:\tb9 07 01 00 00       \tmov    $0x107,%ecx\n  42b2a4:\tba ef c3 44 00       \tmov    $0x44c3ef,%edx\n  42b2a9:\tbe 1e 00 00 00       \tmov    $0x1e,%esi\n  42b2ae:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  42b2b3:\te8 be 32 fe ff       \tcallq  40e576 <CRYPTO_lock>\n  42b2b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42b2bc:\t48 89 c7             \tmov    %rax,%rdi\n  42b2bf:\te8 3e f6 ff ff       \tcallq  42a902 <ENGINE_free>\n  42b2c4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  42b2c8:\tc9                   \tleaveq \n  42b2c9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ENGINE_get_prev(__int64 a1) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v2</span>;\n  if (a1) {\n    CRYPTO_lock(Number, Number, (__int64)String, Number);\n    <span class=\"supfact\">v2</span> = *(_QWORD *)(a1 + Number);\n    if (<span class=\"supfact\">v2</span>)\n      ++*(_DWORD *)(<span class=\"supfact\">v2</span> + Number);\n    CRYPTO_lock(Number, Number, (__int64)String, Number);\n    ENGINE_free(a1);\n    result = <span class=\"supfact\">v2</span>;\n  } else {\n    ERR_put_error(Number, Number, Number, (__int64)String, Number);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "ENGINE *__cdecl ENGINE_get_prev(ENGINE *e) {\n  ENGINE *result;\n  ENGINE *<span class=\"supfact\">ret</span>;\n  if (e) {\n    CRYPTO_lock(Number, Number, String, Number);\n    <span class=\"supfact\">ret</span> = e->prev;\n    if (<span class=\"supfact\">ret</span>)\n      ++<span class=\"supfact\">ret</span>->struct_ref;\n    CRYPTO_lock(Number, Number, String, Number);\n    ENGINE_free(e);\n    result = <span class=\"supfact\">ret</span>;\n  } else {\n    ERR_put_error(Number, Number, Number, String, Number);\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "ENGINE *", "ref_name": "ret", "ref_type": "ENGINE *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "tzanussi", "repo_name": "linux-yocto-micro-3.14", "path": "tzanussi/linux-yocto-micro-3.14/161109f092e497a94a828b66cbda63a02c31d6f2b8065f31d315da24f4a8bb9c", "path_in_repo": "tzanussi/linux-yocto-micro-3.14/tools/perf/builtin-sched.o", "objdump": "000000000000460f <perf_sched__replay>:\n    460f:\t55                   \tpush   %rbp\n    4610:\t48 89 e5             \tmov    %rsp,%rbp\n    4613:\t48 83 ec 20          \tsub    $0x20,%rsp\n    4617:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    461b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    4622:\t00 00 \n    4624:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4628:\t31 c0                \txor    %eax,%eax\n    462a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    462e:\t48 89 c7             \tmov    %rax,%rdi\n    4631:\te8 05 be ff ff       \tcallq  43b <calibrate_run_measurement_overhead>\n    4636:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    463a:\t48 89 c7             \tmov    %rax,%rdi\n    463d:\te8 bd be ff ff       \tcallq  4ff <calibrate_sleep_measurement_overhead>\n    4642:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4646:\t48 89 c7             \tmov    %rax,%rdi\n    4649:\te8 77 d5 ff ff       \tcallq  1bc5 <test_calibrations>\n    464e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4652:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4657:\t48 89 c7             \tmov    %rax,%rdi\n    465a:\te8 1b f8 ff ff       \tcallq  3e7a <perf_sched__read_events>\n    465f:\t85 c0                \ttest   %eax,%eax\n    4661:\t74 0a                \tje     466d <perf_sched__replay+0x5e>\n    4663:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    4668:\te9 3e 01 00 00       \tjmpq   47ab <perf_sched__replay+0x19c>\n    466d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4671:\t48 8b 80 f8 c0 08 00 \tmov    0x8c0f8(%rax),%rax\n    4678:\t48 89 c6             \tmov    %rax,%rsi\n    467b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4680:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4685:\te8 00 00 00 00       \tcallq  468a <perf_sched__replay+0x7b>\n    468a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    468e:\t48 8b 80 00 c1 08 00 \tmov    0x8c100(%rax),%rax\n    4695:\t48 89 c6             \tmov    %rax,%rsi\n    4698:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    469d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    46a2:\te8 00 00 00 00       \tcallq  46a7 <perf_sched__replay+0x98>\n    46a7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    46ab:\t48 8b 80 08 c1 08 00 \tmov    0x8c108(%rax),%rax\n    46b2:\t48 89 c6             \tmov    %rax,%rsi\n    46b5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    46ba:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    46bf:\te8 00 00 00 00       \tcallq  46c4 <perf_sched__replay+0xb5>\n    46c4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    46c8:\t48 8b 80 20 c1 08 00 \tmov    0x8c120(%rax),%rax\n    46cf:\t48 85 c0             \ttest   %rax,%rax\n    46d2:\t74 1d                \tje     46f1 <perf_sched__replay+0xe2>\n    46d4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    46d8:\t48 8b 80 20 c1 08 00 \tmov    0x8c120(%rax),%rax\n    46df:\t48 89 c6             \tmov    %rax,%rsi\n    46e2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    46e7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    46ec:\te8 00 00 00 00       \tcallq  46f1 <perf_sched__replay+0xe2>\n    46f1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    46f5:\t48 8b 80 28 c1 08 00 \tmov    0x8c128(%rax),%rax\n    46fc:\t48 85 c0             \ttest   %rax,%rax\n    46ff:\t74 1d                \tje     471e <perf_sched__replay+0x10f>\n    4701:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4705:\t48 8b 80 28 c1 08 00 \tmov    0x8c128(%rax),%rax\n    470c:\t48 89 c6             \tmov    %rax,%rsi\n    470f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4714:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4719:\te8 00 00 00 00       \tcallq  471e <perf_sched__replay+0x10f>\n    471e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4722:\t48 8b 80 18 c1 08 00 \tmov    0x8c118(%rax),%rax\n    4729:\t48 85 c0             \ttest   %rax,%rax\n    472c:\t74 1d                \tje     474b <perf_sched__replay+0x13c>\n    472e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4732:\t48 8b 80 18 c1 08 00 \tmov    0x8c118(%rax),%rax\n    4739:\t48 89 c6             \tmov    %rax,%rsi\n    473c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4741:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4746:\te8 00 00 00 00       \tcallq  474b <perf_sched__replay+0x13c>\n    474b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    474f:\t48 89 c7             \tmov    %rax,%rdi\n    4752:\te8 01 c4 ff ff       \tcallq  b58 <print_task_traces>\n    4757:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    475b:\t48 89 c7             \tmov    %rax,%rdi\n    475e:\te8 9e c4 ff ff       \tcallq  c01 <add_cross_task_wakeups>\n    4763:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4767:\t48 89 c7             \tmov    %rax,%rdi\n    476a:\te8 d5 cb ff ff       \tcallq  1344 <create_tasks>\n    476f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4774:\te8 00 00 00 00       \tcallq  4779 <perf_sched__replay+0x16a>\n    4779:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    4780:\t00 \n    4781:\teb 11                \tjmp    4794 <perf_sched__replay+0x185>\n    4783:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4787:\t48 89 c7             \tmov    %rax,%rdi\n    478a:\te8 87 d1 ff ff       \tcallq  1916 <run_one_test>\n    478f:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n    4794:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4798:\t8b 80 f4 c0 08 00    \tmov    0x8c0f4(%rax),%eax\n    479e:\t89 c0                \tmov    %eax,%eax\n    47a0:\t48 39 45 f0          \tcmp    %rax,-0x10(%rbp)\n    47a4:\t72 dd                \tjb     4783 <perf_sched__replay+0x174>\n    47a6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    47ab:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    47af:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n    47b6:\t00 00 \n    47b8:\t74 05                \tje     47bf <perf_sched__replay+0x1b0>\n    47ba:\te8 00 00 00 00       \tcallq  47bf <perf_sched__replay+0x1b0>\n    47bf:\tc9                   \tleaveq \n    47c0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_sched__replay(__int64 a1) {\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  calibrate_run_measurement_overhead(a1);\n  calibrate_sleep_measurement_overhead(a1);\n  test_calibrations(a1);\n  if ((unsigned int)perf_sched__read_events((_QWORD *)a1, Number L))\n    return Number;\n  printf(String, *(_QWORD *)(a1 + Number));\n  printf(String, *(_QWORD *)(a1 + Number));\n  printf(String, *(_QWORD *)(a1 + Number));\n  if (*(_QWORD *)(a1 + Number))\n    printf(String, *(_QWORD *)(a1 + Number));\n  if (*(_QWORD *)(a1 + Number))\n    printf(String, *(_QWORD *)(a1 + Number));\n  if (*(_QWORD *)(a1 + Number))\n    printf(String, *(_QWORD *)(a1 + Number));\n  print_task_traces(a1);\n  add_cross_task_wakeups((_QWORD *)a1);\n  create_tasks(a1);\n  puts(String);\n  for (<span class=\"supfact\">i</span> = Number L;\n       <span class=\"supfact\">i</span> < *(unsigned int *)(a1 + Number); ++<span class=\"supfact\">i</span>)\n    run_one_test((_QWORD *)a1);\n  return Number L;\n}", "code_t": "int __cdecl perf_sched__replay(perf_sched *sched) {\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  calibrate_run_measurement_overhead(sched);\n  calibrate_sleep_measurement_overhead(sched);\n  test_calibrations(sched);\n  if (perf_sched__read_events(sched, Number L))\n    return Number;\n  printf(String, sched->nr_run_events);\n  printf(String, sched->nr_sleep_events);\n  printf(String, sched->nr_wakeup_events);\n  if (sched->targetless_wakeups)\n    printf(String, sched->targetless_wakeups);\n  if (sched->multitarget_wakeups)\n    printf(String, sched->multitarget_wakeups);\n  if (sched->nr_run_events_optimized)\n    printf(String, sched->nr_run_events_optimized);\n  print_task_traces(sched);\n  add_cross_task_wakeups(sched);\n  create_tasks(sched);\n  puts(String);\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> < sched->replay_repeat;\n       ++<span class=\"supfact\">i</span>)\n    run_one_test(sched);\n  return Number;\n}", "var": [{"name": "i", "type": "unsigned __int64", "ref_name": "i", "ref_type": "unsigned __int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "vmware", "repo_name": "likewise-open", "path": "vmware/likewise-open/bb255da41fd974ec8429252b9a8a1b5f1748bbff7f4eb5f527b7322cab998ced", "path_in_repo": "vmware/likewise-open/openssl/test/rsa_test", "objdump": "000000000042b218 <ENGINE_get_prev>:\n  42b218:\t55                   \tpush   %rbp\n  42b219:\t48 89 e5             \tmov    %rsp,%rbp\n  42b21c:\t48 83 ec 20          \tsub    $0x20,%rsp\n  42b220:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  42b224:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  42b22b:\t00 \n  42b22c:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  42b231:\t75 26                \tjne    42b259 <ENGINE_get_prev+0x41>\n  42b233:\t41 b8 fb 00 00 00    \tmov    $0xfb,%r8d\n  42b239:\tb9 ef c3 44 00       \tmov    $0x44c3ef,%ecx\n  42b23e:\tba 43 00 00 00       \tmov    $0x43,%edx\n  42b243:\tbe 74 00 00 00       \tmov    $0x74,%esi\n  42b248:\tbf 26 00 00 00       \tmov    $0x26,%edi\n  42b24d:\te8 13 19 fe ff       \tcallq  40cb65 <ERR_put_error>\n  42b252:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42b257:\teb 6f                \tjmp    42b2c8 <ENGINE_get_prev+0xb0>\n  42b259:\tb9 ff 00 00 00       \tmov    $0xff,%ecx\n  42b25e:\tba ef c3 44 00       \tmov    $0x44c3ef,%edx\n  42b263:\tbe 1e 00 00 00       \tmov    $0x1e,%esi\n  42b268:\tbf 09 00 00 00       \tmov    $0x9,%edi\n  42b26d:\te8 04 33 fe ff       \tcallq  40e576 <CRYPTO_lock>\n  42b272:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42b276:\t48 8b 80 b0 00 00 00 \tmov    0xb0(%rax),%rax\n  42b27d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  42b281:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  42b286:\t74 17                \tje     42b29f <ENGINE_get_prev+0x87>\n  42b288:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  42b28c:\t8b 80 94 00 00 00    \tmov    0x94(%rax),%eax\n  42b292:\t8d 50 01             \tlea    0x1(%rax),%edx\n  42b295:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  42b299:\t89 90 94 00 00 00    \tmov    %edx,0x94(%rax)\n  42b29f:\tb9 07 01 00 00       \tmov    $0x107,%ecx\n  42b2a4:\tba ef c3 44 00       \tmov    $0x44c3ef,%edx\n  42b2a9:\tbe 1e 00 00 00       \tmov    $0x1e,%esi\n  42b2ae:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  42b2b3:\te8 be 32 fe ff       \tcallq  40e576 <CRYPTO_lock>\n  42b2b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42b2bc:\t48 89 c7             \tmov    %rax,%rdi\n  42b2bf:\te8 3e f6 ff ff       \tcallq  42a902 <ENGINE_free>\n  42b2c4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  42b2c8:\tc9                   \tleaveq \n  42b2c9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ENGINE_get_prev(__int64 a1) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v2</span>;\n  if (a1) {\n    CRYPTO_lock(Number, Number, (__int64)String, Number);\n    <span class=\"supfact\">v2</span> = *(_QWORD *)(a1 + Number);\n    if (<span class=\"supfact\">v2</span>)\n      ++*(_DWORD *)(<span class=\"supfact\">v2</span> + Number);\n    CRYPTO_lock(Number, Number, (__int64)String, Number);\n    ENGINE_free(a1);\n    result = <span class=\"supfact\">v2</span>;\n  } else {\n    ERR_put_error(Number, Number, Number, (__int64)String, Number);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "ENGINE *__cdecl ENGINE_get_prev(ENGINE *e) {\n  ENGINE *result;\n  ENGINE *<span class=\"supfact\">ret</span>;\n  if (e) {\n    CRYPTO_lock(Number, Number, String, Number);\n    <span class=\"supfact\">ret</span> = e->prev;\n    if (<span class=\"supfact\">ret</span>)\n      ++<span class=\"supfact\">ret</span>->struct_ref;\n    CRYPTO_lock(Number, Number, String, Number);\n    ENGINE_free(e);\n    result = <span class=\"supfact\">ret</span>;\n  } else {\n    ERR_put_error(Number, Number, Number, String, Number);\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "ENGINE *", "ref_name": "ret", "ref_type": "ENGINE *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "Bvangoor", "repo_name": "Operating-Systems-506", "path": "Bvangoor/Operating-Systems-506/2d0a6ef8f6f82ed99986d5092be9657efab27b5db36b09ba910da9affa42b104", "path_in_repo": "Bvangoor/Operating-Systems-506/HomeWork2/hw2-bvangoor/tools/lib/traceevent/plugin_sched_switch.o", "objdump": "00000000000002eb <sched_switch_handler>:\n 2eb:\t55                   \tpush   %rbp\n 2ec:\t48 89 e5             \tmov    %rsp,%rbp\n 2ef:\t48 83 ec 30          \tsub    $0x30,%rsp\n 2f3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 2f7:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 2fb:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 2ff:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n 303:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n 307:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 30b:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n 30f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 313:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n 319:\t49 89 c8             \tmov    %rcx,%r8\n 31c:\t48 89 d1             \tmov    %rdx,%rcx\n 31f:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 326 <sched_switch_handler+0x3b>\n 326:\t48 89 c7             \tmov    %rax,%rdi\n 329:\te8 00 00 00 00       \tcallq  32e <sched_switch_handler+0x43>\n 32e:\t85 c0                \ttest   %eax,%eax\n 330:\t74 16                \tje     348 <sched_switch_handler+0x5d>\n 332:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 336:\tbe 21 00 00 00       \tmov    $0x21,%esi\n 33b:\t48 89 c7             \tmov    %rax,%rdi\n 33e:\te8 00 00 00 00       \tcallq  343 <sched_switch_handler+0x58>\n 343:\te9 00 02 00 00       \tjmpq   548 <sched_switch_handler+0x25d>\n 348:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 34c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 353 <sched_switch_handler+0x68>\n 353:\t48 89 c7             \tmov    %rax,%rdi\n 356:\te8 00 00 00 00       \tcallq  35b <sched_switch_handler+0x70>\n 35b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 35f:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 364:\t74 2b                \tje     391 <sched_switch_handler+0xa6>\n 366:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 36a:\t89 c1                \tmov    %eax,%ecx\n 36c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 370:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 374:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 378:\t48 89 c7             \tmov    %rax,%rdi\n 37b:\te8 26 fd ff ff       \tcallq  a6 <write_and_save_comm>\n 380:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 384:\tbe 3a 00 00 00       \tmov    $0x3a,%esi\n 389:\t48 89 c7             \tmov    %rax,%rdi\n 38c:\te8 00 00 00 00       \tcallq  391 <sched_switch_handler+0xa6>\n 391:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 395:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 399:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 3a0 <sched_switch_handler+0xb5>\n 3a0:\t48 89 c7             \tmov    %rax,%rdi\n 3a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3a8:\te8 00 00 00 00       \tcallq  3ad <sched_switch_handler+0xc2>\n 3ad:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n 3b1:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 3b5:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n 3b9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3bd:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 3c3:\t49 89 c8             \tmov    %rcx,%r8\n 3c6:\t48 89 d1             \tmov    %rdx,%rcx\n 3c9:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 3d0 <sched_switch_handler+0xe5>\n 3d0:\t48 89 c7             \tmov    %rax,%rdi\n 3d3:\te8 00 00 00 00       \tcallq  3d8 <sched_switch_handler+0xed>\n 3d8:\t85 c0                \ttest   %eax,%eax\n 3da:\t75 1c                \tjne    3f8 <sched_switch_handler+0x10d>\n 3dc:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 3e0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3e4:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 3eb <sched_switch_handler+0x100>\n 3eb:\t48 89 c7             \tmov    %rax,%rdi\n 3ee:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3f3:\te8 00 00 00 00       \tcallq  3f8 <sched_switch_handler+0x10d>\n 3f8:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n 3fc:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 400:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n 404:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 408:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 40e:\t49 89 c8             \tmov    %rcx,%r8\n 411:\t48 89 d1             \tmov    %rdx,%rcx\n 414:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 41b <sched_switch_handler+0x130>\n 41b:\t48 89 c7             \tmov    %rax,%rdi\n 41e:\te8 00 00 00 00       \tcallq  423 <sched_switch_handler+0x138>\n 423:\t85 c0                \ttest   %eax,%eax\n 425:\t75 14                \tjne    43b <sched_switch_handler+0x150>\n 427:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 42b:\t89 c2                \tmov    %eax,%edx\n 42d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 431:\t89 d6                \tmov    %edx,%esi\n 433:\t48 89 c7             \tmov    %rax,%rdi\n 436:\te8 c5 fb ff ff       \tcallq  0 <write_state>\n 43b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 43f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 446 <sched_switch_handler+0x15b>\n 446:\t48 89 c7             \tmov    %rax,%rdi\n 449:\te8 00 00 00 00       \tcallq  44e <sched_switch_handler+0x163>\n 44e:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n 452:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 456:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n 45a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 45e:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n 464:\t49 89 c8             \tmov    %rcx,%r8\n 467:\t48 89 d1             \tmov    %rdx,%rcx\n 46a:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 471 <sched_switch_handler+0x186>\n 471:\t48 89 c7             \tmov    %rax,%rdi\n 474:\te8 00 00 00 00       \tcallq  479 <sched_switch_handler+0x18e>\n 479:\t85 c0                \ttest   %eax,%eax\n 47b:\t74 16                \tje     493 <sched_switch_handler+0x1a8>\n 47d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 481:\tbe 21 00 00 00       \tmov    $0x21,%esi\n 486:\t48 89 c7             \tmov    %rax,%rdi\n 489:\te8 00 00 00 00       \tcallq  48e <sched_switch_handler+0x1a3>\n 48e:\te9 b5 00 00 00       \tjmpq   548 <sched_switch_handler+0x25d>\n 493:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 497:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 49e <sched_switch_handler+0x1b3>\n 49e:\t48 89 c7             \tmov    %rax,%rdi\n 4a1:\te8 00 00 00 00       \tcallq  4a6 <sched_switch_handler+0x1bb>\n 4a6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 4aa:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 4af:\t74 2b                \tje     4dc <sched_switch_handler+0x1f1>\n 4b1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 4b5:\t89 c1                \tmov    %eax,%ecx\n 4b7:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 4bb:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 4bf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 4c3:\t48 89 c7             \tmov    %rax,%rdi\n 4c6:\te8 db fb ff ff       \tcallq  a6 <write_and_save_comm>\n 4cb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4cf:\tbe 3a 00 00 00       \tmov    $0x3a,%esi\n 4d4:\t48 89 c7             \tmov    %rax,%rdi\n 4d7:\te8 00 00 00 00       \tcallq  4dc <sched_switch_handler+0x1f1>\n 4dc:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 4e0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4e4:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4eb <sched_switch_handler+0x200>\n 4eb:\t48 89 c7             \tmov    %rax,%rdi\n 4ee:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4f3:\te8 00 00 00 00       \tcallq  4f8 <sched_switch_handler+0x20d>\n 4f8:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n 4fc:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 500:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n 504:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 508:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 50e:\t49 89 c8             \tmov    %rcx,%r8\n 511:\t48 89 d1             \tmov    %rdx,%rcx\n 514:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 51b <sched_switch_handler+0x230>\n 51b:\t48 89 c7             \tmov    %rax,%rdi\n 51e:\te8 00 00 00 00       \tcallq  523 <sched_switch_handler+0x238>\n 523:\t85 c0                \ttest   %eax,%eax\n 525:\t75 1c                \tjne    543 <sched_switch_handler+0x258>\n 527:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 52b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 52f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 536 <sched_switch_handler+0x24b>\n 536:\t48 89 c7             \tmov    %rax,%rdi\n 539:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 53e:\te8 00 00 00 00       \tcallq  543 <sched_switch_handler+0x258>\n 543:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 548:\tc9                   \tleaveq \n 549:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sched_switch_handler(__int64 a1, __int64 a2, __int64 a3,\n                                        __int64 a4) {\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  if ((unsigned int)pevent_get_field_val(a1, a3, String, a2,\n                                         &<span class=\"supfact\">v10</span>, Number L, a4))\n    return trace_seq_putc(a1, Number L);\n  <span class=\"supfact\">v11</span> = pevent_find_any_field(a3, String);\n  if (<span class=\"supfact\">v11</span>) {\n    write_and_save_comm(<span class=\"supfact\">v11</span>, a2, a1, <span class=\"supfact\">v10</span>);\n    trace_seq_putc(a1, Number L);\n  }\n  trace_seq_printf(a1, String, <span class=\"supfact\">v10</span>);\n  if (!(unsigned int)pevent_get_field_val(a1, a3, String, a2,\n                                          &<span class=\"supfact\">v10</span>, Number L, v5))\n    trace_seq_printf(a1, String, <span class=\"supfact\">v10</span>);\n  if (!(unsigned int)pevent_get_field_val(a1, a3, String, a2,\n                                          &<span class=\"supfact\">v10</span>, Number L, v6))\n    write_state(a1, <span class=\"supfact\">v10</span>);\n  trace_seq_puts(a1, String);\n  if ((unsigned int)pevent_get_field_val(a1, a3, String, a2,\n                                         &<span class=\"supfact\">v10</span>, Number L, v7))\n    return trace_seq_putc(a1, Number L);\n  <span class=\"supfact\">v11</span> = pevent_find_any_field(a3, String);\n  if (<span class=\"supfact\">v11</span>) {\n    write_and_save_comm(<span class=\"supfact\">v11</span>, a2, a1, <span class=\"supfact\">v10</span>);\n    trace_seq_putc(a1, Number L);\n  }\n  trace_seq_printf(a1, String, <span class=\"supfact\">v10</span>);\n  if (!(unsigned int)pevent_get_field_val(a1, a3, String, a2,\n                                          &<span class=\"supfact\">v10</span>, Number L, v8))\n    trace_seq_printf(a1, String, <span class=\"supfact\">v10</span>);\n  return Number L;\n}", "code_t": "int __cdecl sched_switch_handler(trace_seq *s, pevent_record *record,\n                                 event_format *event, void *context) {\n  void *contexta;\n  void *contextb;\n  void *contextc;\n  void *contextd;\n  unsigned __int64 <span class=\"supfact\">val</span>;\n  format_field *<span class=\"supfact\">field</span>;\n  if ((unsigned int)pevent_get_field_val(\n          s, event, String, record, &<span class=\"supfact\">val</span>, Number L, context))\n    return trace_seq_putc(s, Number L);\n  <span class=\"supfact\">field</span> = (format_field *)pevent_find_any_field(event, String);\n  if (<span class=\"supfact\">field</span>) {\n    write_and_save_comm(<span class=\"supfact\">field</span>, record, s, <span class=\"supfact\">val</span>);\n    trace_seq_putc(s, Number L);\n  }\n  trace_seq_printf(s, String, <span class=\"supfact\">val</span>);\n  if (!(unsigned int)pevent_get_field_val(\n          s, event, String, record, &<span class=\"supfact\">val</span>, Number L, contexta))\n    trace_seq_printf(s, String, <span class=\"supfact\">val</span>);\n  if (!(unsigned int)pevent_get_field_val(\n          s, event, String, record, &<span class=\"supfact\">val</span>, Number L, contextb))\n    write_state(s, <span class=\"supfact\">val</span>);\n  trace_seq_puts(s, String);\n  if ((unsigned int)pevent_get_field_val(\n          s, event, String, record, &<span class=\"supfact\">val</span>, Number L, contextc))\n    return trace_seq_putc(s, Number L);\n  <span class=\"supfact\">field</span> = (format_field *)pevent_find_any_field(event, String);\n  if (<span class=\"supfact\">field</span>) {\n    write_and_save_comm(<span class=\"supfact\">field</span>, record, s, <span class=\"supfact\">val</span>);\n    trace_seq_putc(s, Number L);\n  }\n  trace_seq_printf(s, String, <span class=\"supfact\">val</span>);\n  if (!(unsigned int)pevent_get_field_val(\n          s, event, String, record, &<span class=\"supfact\">val</span>, Number L, contextd))\n    trace_seq_printf(s, String, <span class=\"supfact\">val</span>);\n  return Number;\n}", "var": [{"name": "v11", "type": "format_field *", "ref_name": "field", "ref_type": "format_field *"}, {"name": "v10", "type": "unsigned __int64", "ref_name": "val", "ref_type": "unsigned __int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "mlongob", "repo_name": "Linux-Kernel-Hack", "path": "mlongob/Linux-Kernel-Hack/b3f4d2292800173ae4c18fb7e605617ff493eb5c888c87761db77731b1b9e1d6", "path_in_repo": "mlongob/Linux-Kernel-Hack/tools/perf/util/exec_cmd.o", "objdump": "000000000000060a <execl_perf_cmd>:\n 60a:\t55                   \tpush   %rbp\n 60b:\t48 89 e5             \tmov    %rsp,%rbp\n 60e:\t48 81 ec 00 02 00 00 \tsub    $0x200,%rsp\n 615:\t48 89 bd 08 fe ff ff \tmov    %rdi,-0x1f8(%rbp)\n 61c:\t48 89 b5 58 ff ff ff \tmov    %rsi,-0xa8(%rbp)\n 623:\t48 89 95 60 ff ff ff \tmov    %rdx,-0xa0(%rbp)\n 62a:\t48 89 8d 68 ff ff ff \tmov    %rcx,-0x98(%rbp)\n 631:\t4c 89 85 70 ff ff ff \tmov    %r8,-0x90(%rbp)\n 638:\t4c 89 8d 78 ff ff ff \tmov    %r9,-0x88(%rbp)\n 63f:\t84 c0                \ttest   %al,%al\n 641:\t74 20                \tje     663 <execl_perf_cmd+0x59>\n 643:\t0f 29 45 80          \tmovaps %xmm0,-0x80(%rbp)\n 647:\t0f 29 4d 90          \tmovaps %xmm1,-0x70(%rbp)\n 64b:\t0f 29 55 a0          \tmovaps %xmm2,-0x60(%rbp)\n 64f:\t0f 29 5d b0          \tmovaps %xmm3,-0x50(%rbp)\n 653:\t0f 29 65 c0          \tmovaps %xmm4,-0x40(%rbp)\n 657:\t0f 29 6d d0          \tmovaps %xmm5,-0x30(%rbp)\n 65b:\t0f 29 75 e0          \tmovaps %xmm6,-0x20(%rbp)\n 65f:\t0f 29 7d f0          \tmovaps %xmm7,-0x10(%rbp)\n 663:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 66a:\t00 00 \n 66c:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n 673:\t31 c0                \txor    %eax,%eax\n 675:\tc7 85 28 fe ff ff 08 \tmovl   $0x8,-0x1d8(%rbp)\n 67c:\t00 00 00 \n 67f:\tc7 85 2c fe ff ff 30 \tmovl   $0x30,-0x1d4(%rbp)\n 686:\t00 00 00 \n 689:\t48 8d 45 10          \tlea    0x10(%rbp),%rax\n 68d:\t48 89 85 30 fe ff ff \tmov    %rax,-0x1d0(%rbp)\n 694:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n 69b:\t48 89 85 38 fe ff ff \tmov    %rax,-0x1c8(%rbp)\n 6a2:\t48 8b 85 08 fe ff ff \tmov    -0x1f8(%rbp),%rax\n 6a9:\t48 89 85 40 fe ff ff \tmov    %rax,-0x1c0(%rbp)\n 6b0:\tc7 85 1c fe ff ff 01 \tmovl   $0x1,-0x1e4(%rbp)\n 6b7:\t00 00 00 \n 6ba:\teb 79                \tjmp    735 <execl_perf_cmd+0x12b>\n 6bc:\t8b 95 1c fe ff ff    \tmov    -0x1e4(%rbp),%edx\n 6c2:\t8d 42 01             \tlea    0x1(%rdx),%eax\n 6c5:\t89 85 1c fe ff ff    \tmov    %eax,-0x1e4(%rbp)\n 6cb:\t8b 85 28 fe ff ff    \tmov    -0x1d8(%rbp),%eax\n 6d1:\t83 f8 2f             \tcmp    $0x2f,%eax\n 6d4:\t77 23                \tja     6f9 <execl_perf_cmd+0xef>\n 6d6:\t48 8b 85 38 fe ff ff \tmov    -0x1c8(%rbp),%rax\n 6dd:\t8b 8d 28 fe ff ff    \tmov    -0x1d8(%rbp),%ecx\n 6e3:\t89 c9                \tmov    %ecx,%ecx\n 6e5:\t48 01 c8             \tadd    %rcx,%rax\n 6e8:\t8b 8d 28 fe ff ff    \tmov    -0x1d8(%rbp),%ecx\n 6ee:\t83 c1 08             \tadd    $0x8,%ecx\n 6f1:\t89 8d 28 fe ff ff    \tmov    %ecx,-0x1d8(%rbp)\n 6f7:\teb 12                \tjmp    70b <execl_perf_cmd+0x101>\n 6f9:\t48 8b 85 30 fe ff ff \tmov    -0x1d0(%rbp),%rax\n 700:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n 704:\t48 89 8d 30 fe ff ff \tmov    %rcx,-0x1d0(%rbp)\n 70b:\t48 8b 08             \tmov    (%rax),%rcx\n 70e:\t48 63 c2             \tmovslq %edx,%rax\n 711:\t48 89 8c c5 40 fe ff \tmov    %rcx,-0x1c0(%rbp,%rax,8)\n 718:\tff \n 719:\t48 63 c2             \tmovslq %edx,%rax\n 71c:\t48 8b 84 c5 40 fe ff \tmov    -0x1c0(%rbp,%rax,8),%rax\n 723:\tff \n 724:\t48 89 85 20 fe ff ff \tmov    %rax,-0x1e0(%rbp)\n 72b:\t48 83 bd 20 fe ff ff \tcmpq   $0x0,-0x1e0(%rbp)\n 732:\t00 \n 733:\t74 0f                \tje     744 <execl_perf_cmd+0x13a>\n 735:\t83 bd 1c fe ff ff 1f \tcmpl   $0x1f,-0x1e4(%rbp)\n 73c:\t0f 8e 7a ff ff ff    \tjle    6bc <execl_perf_cmd+0xb2>\n 742:\teb 01                \tjmp    745 <execl_perf_cmd+0x13b>\n 744:\t90                   \tnop\n 745:\t83 bd 1c fe ff ff 1f \tcmpl   $0x1f,-0x1e4(%rbp)\n 74c:\t7e 1b                \tjle    769 <execl_perf_cmd+0x15f>\n 74e:\t48 8b 85 08 fe ff ff \tmov    -0x1f8(%rbp),%rax\n 755:\t48 89 c6             \tmov    %rax,%rsi\n 758:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 75d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 762:\te8 00 00 00 00       \tcallq  767 <execl_perf_cmd+0x15d>\n 767:\teb 23                \tjmp    78c <execl_perf_cmd+0x182>\n 769:\t8b 85 1c fe ff ff    \tmov    -0x1e4(%rbp),%eax\n 76f:\t48 98                \tcltq   \n 771:\t48 c7 84 c5 40 fe ff \tmovq   $0x0,-0x1c0(%rbp,%rax,8)\n 778:\tff 00 00 00 00 \n 77d:\t48 8d 85 40 fe ff ff \tlea    -0x1c0(%rbp),%rax\n 784:\t48 89 c7             \tmov    %rax,%rdi\n 787:\te8 00 00 00 00       \tcallq  78c <execl_perf_cmd+0x182>\n 78c:\t48 8b b5 48 ff ff ff \tmov    -0xb8(%rbp),%rsi\n 793:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n 79a:\t00 00 \n 79c:\t74 05                \tje     7a3 <execl_perf_cmd+0x199>\n 79e:\te8 00 00 00 00       \tcallq  7a3 <execl_perf_cmd+0x199>\n 7a3:\tc9                   \tleaveq \n 7a4:\tc3                   \tretq   \n", "code_s": "void execl_perf_cmd(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4,\n                    __int64 a5, __int64 a6, ...) {\n  __int64 *v6;\n  int <span class=\"supfact\">format</span>;\n  gcc_va_list <span class=\"supfact\">va</span>;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  va_start(<span class=\"supfact\">va</span>, a6);\n  <span class=\"supfact\">v9</span>[Number] = a2;\n  <span class=\"supfact\">v9</span>[Number] = a3;\n  <span class=\"supfact\">v9</span>[Number] = a4;\n  <span class=\"supfact\">v9</span>[Number] = a5;\n  <span class=\"supfact\">v9</span>[Number] = a6;\n  <span class=\"supfact\">v9</span>[Number] = __readfsqword(Number);\n  <span class=\"supfact\">va</span>[Number].gp_offset = Number;\n  <span class=\"supfact\">v9</span>[Number] = a1;\n  <span class=\"supfact\">format</span> = Number;\n  do {\n    if (<span class=\"supfact\">format</span> > Number)\n      break;\n    a3 = (unsigned int)<span class=\"supfact\">format</span>++;\n    if (<span class=\"supfact\">va</span>[Number].gp_offset > Number) {\n      v6 = (__int64 *)<span class=\"supfact\">va</span>[Number].overflow_arg_area;\n      <span class=\"supfact\">va</span>[Number].overflow_arg_area =\n          (char *)<span class=\"supfact\">va</span>[Number].overflow_arg_area + Number;\n    } else {\n      v6 = (__int64 *)((char *)<span class=\"supfact\">va</span>[Number].reg_save_area +\n                       <span class=\"supfact\">va</span>[Number].gp_offset);\n      <span class=\"supfact\">va</span>[Number].gp_offset += Number;\n    }\n    <span class=\"supfact\">v9</span>[(int)a3] = *v6;\n  } while (<span class=\"supfact\">v9</span>[(int)a3]);\n  if (<span class=\"supfact\">format</span> <= Number) {\n    <span class=\"supfact\">v9</span>[<span class=\"supfact\">format</span>] = Number L;\n    execv_perf_cmd((__int64)<span class=\"supfact\">v9</span>);\n  } else {\n    error((int)String, a1, (const char *)a3);\n  }\n}", "code_t": "int execl_perf_cmd(const char *cmd, ...) {\n  unsigned __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  const char **v6;\n  int result;\n  int <span class=\"supfact\">argc</span>;\n  va_list <span class=\"supfact\">param</span>;\n  const char *<span class=\"supfact\">argv</span>[Number];\n  unsigned __int64 v11;\n  __int64 v12;\n  unsigned __int64 v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  va_start(<span class=\"supfact\">param</span>, cmd);\n  v3 = va_arg(<span class=\"supfact\">param</span>, _QWORD);\n  v1 = va_arg(<span class=\"supfact\">param</span>, _QWORD);\n  v2 = va_arg(<span class=\"supfact\">param</span>, _QWORD);\n  v4 = va_arg(<span class=\"supfact\">param</span>, _QWORD);\n  v5 = va_arg(<span class=\"supfact\">param</span>, _QWORD);\n  va_end(<span class=\"supfact\">param</span>);\n  v12 = v3;\n  v13 = v1;\n  v14 = v2;\n  v15 = v4;\n  v16 = v5;\n  v11 = __readfsqword(Number);\n  <span class=\"supfact\">param</span>[Number].gp_offset = Number;\n  va_copy(<span class=\"supfact\">param</span>, <span class=\"supfact\">param</span>);\n  <span class=\"supfact\">argv</span>[Number] = cmd;\n  <span class=\"supfact\">argc</span> = Number;\n  do {\n    if (<span class=\"supfact\">argc</span> > Number)\n      break;\n    v1 = (unsigned int)<span class=\"supfact\">argc</span>++;\n    if (<span class=\"supfact\">param</span>[Number].gp_offset > Number) {\n      v6 = (const char **)<span class=\"supfact\">param</span>[Number].overflow_arg_area;\n      <span class=\"supfact\">param</span>[Number].overflow_arg_area =\n          (char *)<span class=\"supfact\">param</span>[Number].overflow_arg_area + Number;\n    } else {\n      v6 = (const char **)((char *)<span class=\"supfact\">param</span>[Number].reg_save_area +\n                           <span class=\"supfact\">param</span>[Number].gp_offset);\n      <span class=\"supfact\">param</span>[Number].gp_offset += Number;\n    }\n    <span class=\"supfact\">argv</span>[(int)v1] = *v6;\n  } while (<span class=\"supfact\">argv</span>[(int)v1]);\n  if (<span class=\"supfact\">argc</span> <= Number) {\n    <span class=\"supfact\">argv</span>[<span class=\"supfact\">argc</span>] = Number L;\n    result = execv_perf_cmd(<span class=\"supfact\">argv</span>);\n  } else {\n    error((int)String, (int)cmd, (const char *)v1);\n  }\n  return result;\n}", "var": [{"name": "v9", "type": "const char *[33]", "ref_name": "argv", "ref_type": "const char *[33]"}, {"name": "va", "type": "__va_list_tag[1]", "ref_name": "param", "ref_type": "__va_list_tag[1]"}, {"name": "format", "type": "int", "ref_name": "argc", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "DIYBookScanner", "repo_name": "chdk", "path": "DIYBookScanner/chdk/57034d64aae7ab741f85de20f66efe71fb4a18a6f256a7039364fc73ce0a0af1", "path_in_repo": "DIYBookScanner/chdk/chdk/tools/hostlua/luac", "objdump": "0000000000418b80 <jumponcond>:\n  418b80:\t55                   \tpush   %rbp\n  418b81:\t48 89 e5             \tmov    %rsp,%rbp\n  418b84:\t48 83 ec 30          \tsub    $0x30,%rsp\n  418b88:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  418b8c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  418b90:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n  418b93:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  418b97:\t8b 00                \tmov    (%rax),%eax\n  418b99:\t83 f8 0b             \tcmp    $0xb,%eax\n  418b9c:\t75 6b                \tjne    418c09 <jumponcond+0x89>\n  418b9e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  418ba2:\t48 8b 00             \tmov    (%rax),%rax\n  418ba5:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n  418ba9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  418bad:\t8b 40 04             \tmov    0x4(%rax),%eax\n  418bb0:\t48 98                \tcltq   \n  418bb2:\t48 c1 e0 02          \tshl    $0x2,%rax\n  418bb6:\t48 01 d0             \tadd    %rdx,%rax\n  418bb9:\t8b 00                \tmov    (%rax),%eax\n  418bbb:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  418bbe:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  418bc1:\t83 e0 3f             \tand    $0x3f,%eax\n  418bc4:\t83 f8 13             \tcmp    $0x13,%eax\n  418bc7:\t75 40                \tjne    418c09 <jumponcond+0x89>\n  418bc9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  418bcd:\t8b 40 30             \tmov    0x30(%rax),%eax\n  418bd0:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  418bd3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  418bd7:\t89 50 30             \tmov    %edx,0x30(%rax)\n  418bda:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n  418bde:\t0f 94 c0             \tsete   %al\n  418be1:\t0f b6 d0             \tmovzbl %al,%edx\n  418be4:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  418be7:\tc1 e8 17             \tshr    $0x17,%eax\n  418bea:\t89 c6                \tmov    %eax,%esi\n  418bec:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  418bf0:\t41 89 d0             \tmov    %edx,%r8d\n  418bf3:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  418bf8:\t89 f2                \tmov    %esi,%edx\n  418bfa:\tbe 1a 00 00 00       \tmov    $0x1a,%esi\n  418bff:\t48 89 c7             \tmov    %rax,%rdi\n  418c02:\te8 e2 eb ff ff       \tcallq  4177e9 <condjump>\n  418c07:\teb 4b                \tjmp    418c54 <jumponcond+0xd4>\n  418c09:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  418c0d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  418c11:\t48 89 d6             \tmov    %rdx,%rsi\n  418c14:\t48 89 c7             \tmov    %rax,%rdi\n  418c17:\te8 d8 f8 ff ff       \tcallq  4184f4 <discharge2anyreg>\n  418c1c:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  418c20:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  418c24:\t48 89 d6             \tmov    %rdx,%rsi\n  418c27:\t48 89 c7             \tmov    %rax,%rdi\n  418c2a:\te8 19 f1 ff ff       \tcallq  417d48 <freeexp>\n  418c2f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  418c33:\t8b 50 04             \tmov    0x4(%rax),%edx\n  418c36:\t8b 4d dc             \tmov    -0x24(%rbp),%ecx\n  418c39:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  418c3d:\t41 89 c8             \tmov    %ecx,%r8d\n  418c40:\t89 d1                \tmov    %edx,%ecx\n  418c42:\tba ff 00 00 00       \tmov    $0xff,%edx\n  418c47:\tbe 1b 00 00 00       \tmov    $0x1b,%esi\n  418c4c:\t48 89 c7             \tmov    %rax,%rdi\n  418c4f:\te8 95 eb ff ff       \tcallq  4177e9 <condjump>\n  418c54:\tc9                   \tleaveq \n  418c55:\tc3                   \tretq   ", "code_s": "__int64 __fastcall jumponcond(_DWORD *a1, unsigned int *a2, unsigned int a3) {\n  __int64 result;\n  unsigned int <span class=\"supfact\">v5</span>;\n  if (*a2 == Number &&\n      (<span class=\"supfact\">v5</span> = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + Number L) +\n                                        Number L * (int)a2[Number]),\n       (<span class=\"supfact\">v5</span> & Number) == Number)) {\n    --a1[Number];\n    result = condjump((__int64)a1, Number, <span class=\"supfact\">v5</span> >> Number, Number,\n                      a3 == Number);\n  } else {\n    discharge2anyreg((__int64)a1, a2);\n    freeexp((__int64)a1, a2);\n    result = condjump((__int64)a1, Number, Number, a2[Number], a3);\n  }\n  return result;\n}", "code_t": "int __cdecl jumponcond(FuncState_0 *fs_0, expdesc_0 *e, int cond) {\n  int result;\n  Instruction <span class=\"supfact\">ie</span>;\n  if (e->k == VRELOCABLE && (<span class=\"supfact\">ie</span> = fs_0->f->code[e->u.s.info],\n                             (<span class=\"supfact\">ie</span> & Number) == Number)) {\n    --fs_0->pc;\n    result = condjump(fs_0, OP_TEST_0, <span class=\"supfact\">ie</span> >> Number, Number,\n                      cond == Number);\n  } else {\n    discharge2anyreg(fs_0, e);\n    freeexp(fs_0, e);\n    result = condjump(fs_0, OP_TESTSET_0, Number, e->u.s.info, cond);\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "Instruction", "ref_name": "ie", "ref_type": "Instruction"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "konyel", "repo_name": "eolas", "path": "konyel/eolas/f2173b4e6af9869f55a3eda3840619c2915a4d431ea22f6c26f8c794a9461c74", "path_in_repo": "konyel/eolas/3dept/redis-3.0.3/deps/lua/src/lparser.o", "objdump": "000000000000085b <markupval>:\n     85b:\t55                   \tpush   %rbp\n     85c:\t48 89 e5             \tmov    %rsp,%rbp\n     85f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     863:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     866:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     86a:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n     86e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     872:\teb 0b                \tjmp    87f <markupval+0x24>\n     874:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     878:\t48 8b 00             \tmov    (%rax),%rax\n     87b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     87f:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     884:\t74 10                \tje     896 <markupval+0x3b>\n     886:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     88a:\t0f b6 40 0c          \tmovzbl 0xc(%rax),%eax\n     88e:\t0f b6 c0             \tmovzbl %al,%eax\n     891:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n     894:\t7c de                \tjl     874 <markupval+0x19>\n     896:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     89b:\t74 08                \tje     8a5 <markupval+0x4a>\n     89d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     8a1:\tc6 40 0d 01          \tmovb   $0x1,0xd(%rax)\n     8a5:\t90                   \tnop\n     8a6:\t5d                   \tpop    %rbp\n     8a7:\tc3                   \tretq   ", "code_s": "__int64 *__fastcall markupval(__int64 a1, int a2) {\n  __int64 *result;\n  __int64 *<span class=\"supfact\">i</span>;\n  result = *(__int64 **)(a1 + Number);\n  for (<span class=\"supfact\">i</span> = result; <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = (__int64 *)*<span class=\"supfact\">i</span>) {\n    result = (__int64 *)*((unsigned __int8 *)<span class=\"supfact\">i</span> + Number);\n    if (a2 >= (int)result)\n      break;\n    result = (__int64 *)*<span class=\"supfact\">i</span>;\n  }\n  if (<span class=\"supfact\">i</span>) {\n    result = <span class=\"supfact\">i</span>;\n    *((_BYTE *)<span class=\"supfact\">i</span> + Number) = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl markupval(FuncState_0 *fs_0, int level) {\n  BlockCnt *<span class=\"supfact\">bl_0</span>;\n  for (<span class=\"supfact\">bl_0</span> = fs_0->bl;\n       <span class=\"supfact\">bl_0</span> && level < <span class=\"supfact\">bl_0</span>->nactvar;\n       <span class=\"supfact\">bl_0</span> = <span class=\"supfact\">bl_0</span>->previous)\n    ;\n  if (<span class=\"supfact\">bl_0</span>)\n    <span class=\"supfact\">bl_0</span>->upval = Number;\n}", "var": [{"name": "i", "type": "BlockCnt *", "ref_name": "bl_0", "ref_type": "BlockCnt *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "lipeiran", "repo_name": "PR_FFmpeg", "path": "lipeiran/PR_FFmpeg/4ba3f529be3157ddcf56f6c2a121c1ff8a7616528dbdbb2c4f3d47adc69a2d5a", "path_in_repo": "lipeiran/PR_FFmpeg/ffmpeg/libavformat/subtitles.o", "objdump": "000000000000179f <ff_subtitles_read_line>:\n    179f:\t48 83 ec 38          \tsub    $0x38,%rsp\n    17a3:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    17a8:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    17ad:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    17b2:\t48 c7 44 24 28 00 00 \tmovq   $0x0,0x28(%rsp)\n    17b9:\t00 00 \n    17bb:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n    17c1:\t0f 85 84 00 00 00    \tjne    184b <ff_subtitles_read_line+0xac>\n    17c7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    17cc:\te9 d1 00 00 00       \tjmpq   18a2 <ff_subtitles_read_line+0x103>\n    17d1:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    17d6:\t48 89 c7             \tmov    %rax,%rdi\n    17d9:\te8 00 00 00 00       \tcallq  17de <ff_subtitles_read_line+0x3f>\n    17de:\t88 44 24 27          \tmov    %al,0x27(%rsp)\n    17e2:\t80 7c 24 27 00       \tcmpb   $0x0,0x27(%rsp)\n    17e7:\t75 27                \tjne    1810 <ff_subtitles_read_line+0x71>\n    17e9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    17ee:\t48 89 c7             \tmov    %rax,%rdi\n    17f1:\te8 00 00 00 00       \tcallq  17f6 <ff_subtitles_read_line+0x57>\n    17f6:\t85 c0                \ttest   %eax,%eax\n    17f8:\t74 0a                \tje     1804 <ff_subtitles_read_line+0x65>\n    17fa:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    17ff:\te9 9e 00 00 00       \tjmpq   18a2 <ff_subtitles_read_line+0x103>\n    1804:\t48 c7 c0 b7 b1 bb be \tmov    $0xffffffffbebbb1b7,%rax\n    180b:\te9 92 00 00 00       \tjmpq   18a2 <ff_subtitles_read_line+0x103>\n    1810:\t80 7c 24 27 0d       \tcmpb   $0xd,0x27(%rsp)\n    1815:\t74 48                \tje     185f <ff_subtitles_read_line+0xc0>\n    1817:\t80 7c 24 27 0a       \tcmpb   $0xa,0x27(%rsp)\n    181c:\t74 41                \tje     185f <ff_subtitles_read_line+0xc0>\n    181e:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1823:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    1827:\t48 89 54 24 28       \tmov    %rdx,0x28(%rsp)\n    182c:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    1831:\t48 01 c2             \tadd    %rax,%rdx\n    1834:\t0f b6 44 24 27       \tmovzbl 0x27(%rsp),%eax\n    1839:\t88 02                \tmov    %al,(%rdx)\n    183b:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    1840:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1845:\t48 01 d0             \tadd    %rdx,%rax\n    1848:\tc6 00 00             \tmovb   $0x0,(%rax)\n    184b:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1850:\t48 83 c0 01          \tadd    $0x1,%rax\n    1854:\t48 39 44 24 08       \tcmp    %rax,0x8(%rsp)\n    1859:\t0f 87 72 ff ff ff    \tja     17d1 <ff_subtitles_read_line+0x32>\n    185f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1864:\t48 89 c7             \tmov    %rax,%rdi\n    1867:\te8 00 00 00 00       \tcallq  186c <ff_subtitles_read_line+0xcd>\n    186c:\t83 f8 0d             \tcmp    $0xd,%eax\n    186f:\t75 0d                \tjne    187e <ff_subtitles_read_line+0xdf>\n    1871:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1876:\t48 89 c7             \tmov    %rax,%rdi\n    1879:\te8 00 00 00 00       \tcallq  187e <ff_subtitles_read_line+0xdf>\n    187e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1883:\t48 89 c7             \tmov    %rax,%rdi\n    1886:\te8 00 00 00 00       \tcallq  188b <ff_subtitles_read_line+0xec>\n    188b:\t83 f8 0a             \tcmp    $0xa,%eax\n    188e:\t75 0d                \tjne    189d <ff_subtitles_read_line+0xfe>\n    1890:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1895:\t48 89 c7             \tmov    %rax,%rdi\n    1898:\te8 00 00 00 00       \tcallq  189d <ff_subtitles_read_line+0xfe>\n    189d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    18a2:\t48 83 c4 38          \tadd    $0x38,%rsp\n    18a6:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall ff_subtitles_read_line(__int64 a1, __int64 a2,\n                                          unsigned __int64 a3) {\n  __int64 result;\n  __int64 v4;\n  char <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = Number L;\n  if (!a3)\n    return Number L;\n  while (a3 > <span class=\"supfact\">v7</span> + Number) {\n    <span class=\"supfact\">v6</span> = ff_text_r8(a1);\n    if (!<span class=\"supfact\">v6</span>) {\n      if (ff_text_eof(a1))\n        result = <span class=\"supfact\">v7</span>;\n      else\n        result = Number;\n      return result;\n    }\n    if (<span class=\"supfact\">v6</span> == Number || <span class=\"supfact\">v6</span> == Number)\n      break;\n    v4 = <span class=\"supfact\">v7</span>++;\n    *(_BYTE *)(v4 + a2) = <span class=\"supfact\">v6</span>;\n    *(_BYTE *)(a2 + <span class=\"supfact\">v7</span>) = Number;\n  }\n  if ((unsigned int)ff_text_peek_r8(a1) == Number)\n    ff_text_r8(a1);\n  if ((unsigned int)ff_text_peek_r8(a1) == Number)\n    ff_text_r8(a1);\n  return <span class=\"supfact\">v7</span>;\n}", "code_t": "ptrdiff_t __cdecl ff_subtitles_read_line(FFTextReader *tr, char *buf,\n                                         size_t size) {\n  ptrdiff_t result;\n  size_t v4;\n  unsigned __int8 <span class=\"supfact\">c</span>;\n  size_t <span class=\"supfact\">cur</span>;\n  <span class=\"supfact\">cur</span> = Number L;\n  if (!size)\n    return Number L;\n  while (size > <span class=\"supfact\">cur</span> + Number) {\n    <span class=\"supfact\">c</span> = ff_text_r8(tr);\n    if (!<span class=\"supfact\">c</span>) {\n      if (ff_text_eof(tr))\n        result = <span class=\"supfact\">cur</span>;\n      else\n        result = Number;\n      return result;\n    }\n    if (<span class=\"supfact\">c</span> == Number || <span class=\"supfact\">c</span> == Number)\n      break;\n    v4 = <span class=\"supfact\">cur</span>++;\n    buf[v4] = <span class=\"supfact\">c</span>;\n    buf[<span class=\"supfact\">cur</span>] = Number;\n  }\n  if (ff_text_peek_r8(tr) == Number)\n    ff_text_r8(tr);\n  if (ff_text_peek_r8(tr) == Number)\n    ff_text_r8(tr);\n  return <span class=\"supfact\">cur</span>;\n}", "var": [{"name": "v7", "type": "const char *", "ref_name": "cur", "ref_type": "size_t"}, {"name": "v6", "type": "char", "ref_name": "c", "ref_type": "unsigned __int8"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "Maxul", "repo_name": "sgx_vmx_protocol", "path": "Maxul/sgx_vmx_protocol/732a4655b26a04a4d7b37d3d582551fb54a1db2bc06a1c1c9104dfaa1ba94df7", "path_in_repo": "Maxul/sgx_vmx_protocol/Sandbox/qemu-sgx-master/hw/core/null-machine.o", "objdump": "0000000000000045 <machine_none_machine_init_class_init>:\n  45:\t55                   \tpush   %rbp\n  46:\t48 89 e5             \tmov    %rsp,%rbp\n  49:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  51:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  55:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  59:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 60 <machine_none_machine_init_class_init+0x1b>\n  60:\tb9 1e 00 00 00       \tmov    $0x1e,%ecx\n  65:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 6c <machine_none_machine_init_class_init+0x27>\n  6c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 73 <machine_none_machine_init_class_init+0x2e>\n  73:\t48 89 c7             \tmov    %rax,%rdi\n  76:\te8 00 00 00 00       \tcallq  7b <machine_none_machine_init_class_init+0x36>\n  7b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  7f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  83:\t48 89 c7             \tmov    %rax,%rdi\n  86:\te8 80 ff ff ff       \tcallq  b <machine_none_machine_init>\n  8b:\t90                   \tnop\n  8c:\tc9                   \tleaveq \n  8d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall machine_none_machine_init_class_init(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> =\n      object_class_dynamic_cast_assert(a1, String, String, Number L, String);\n  return machine_none_machine_init(<span class=\"supfact\">v2</span>);\n}", "code_t": "void __cdecl machine_none_machine_init_class_init(ObjectClass_0 *oc,\n                                                  void *data) {\n  MachineClass_0 *<span class=\"supfact\">mc</span>;\n  <span class=\"supfact\">mc</span> = (MachineClass_0 *)object_class_dynamic_cast_assert(\n      oc, String, String, Number L, String);\n  machine_none_machine_init(<span class=\"supfact\">mc</span>);\n}", "var": [{"name": "v2", "type": "MachineClass_0 *", "ref_name": "mc", "ref_type": "MachineClass_0 *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "danielfengyu", "repo_name": "MyPlayer", "path": "danielfengyu/MyPlayer/bb023c74b07148a406f2c69c72e53bc378e15499101e373dbae4eafa3b40a867", "path_in_repo": "danielfengyu/MyPlayer/jni/ffmpeg/libavformat/rawdec.o", "objdump": "00000000000004cc <ff_raw_video_read_header>:\n 4cc:\t48 83 ec 38          \tsub    $0x38,%rsp\n 4d0:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n 4d5:\t48 89 34 24          \tmov    %rsi,(%rsp)\n 4d9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 4de:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 4e2:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n 4e7:\tc7 44 24 2c 00 00 00 \tmovl   $0x0,0x2c(%rsp)\n 4ee:\t00 \n 4ef:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 4f4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 4f9:\t48 89 c7             \tmov    %rax,%rdi\n 4fc:\te8 00 00 00 00       \tcallq  501 <ff_raw_video_read_header+0x35>\n 501:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n 506:\t48 83 7c 24 18 00    \tcmpq   $0x0,0x18(%rsp)\n 50c:\t75 0d                \tjne    51b <ff_raw_video_read_header+0x4f>\n 50e:\tc7 44 24 2c f4 ff ff \tmovl   $0xfffffff4,0x2c(%rsp)\n 515:\tff \n 516:\te9 bb 00 00 00       \tjmpq   5d6 <ff_raw_video_read_header+0x10a>\n 51b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 520:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 524:\tc7 80 00 01 00 00 00 \tmovl   $0x0,0x100(%rax)\n 52b:\t00 00 00 \n 52e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 533:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 537:\t8b 50 58             \tmov    0x58(%rax),%edx\n 53a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 53f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 543:\t89 90 04 01 00 00    \tmov    %edx,0x104(%rax)\n 549:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 54e:\tc7 40 68 01 00 00 00 \tmovl   $0x1,0x68(%rax)\n 555:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 55a:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n 55e:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n 563:\t48 89 d6             \tmov    %rdx,%rsi\n 566:\t48 89 c7             \tmov    %rax,%rdi\n 569:\te8 00 00 00 00       \tcallq  56e <ff_raw_video_read_header+0xa2>\n 56e:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n 572:\t83 7c 24 2c 00       \tcmpl   $0x0,0x2c(%rsp)\n 577:\t79 2a                \tjns    5a3 <ff_raw_video_read_header+0xd7>\n 579:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 57e:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n 582:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 587:\t48 89 d1             \tmov    %rdx,%rcx\n 58a:\tba 00 00 00 00       \tmov    $0x0,%edx\n 58f:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 594:\t48 89 c7             \tmov    %rax,%rdi\n 597:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 59c:\te8 00 00 00 00       \tcallq  5a1 <ff_raw_video_read_header+0xd5>\n 5a1:\teb 33                \tjmp    5d6 <ff_raw_video_read_header+0x10a>\n 5a3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 5a8:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 5ac:\t8b 4c 24 14          \tmov    0x14(%rsp),%ecx\n 5b0:\t8b 54 24 10          \tmov    0x10(%rsp),%edx\n 5b4:\t89 48 2c             \tmov    %ecx,0x2c(%rax)\n 5b7:\t89 50 30             \tmov    %edx,0x30(%rax)\n 5ba:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 5bf:\tb9 80 4f 12 00       \tmov    $0x124f80,%ecx\n 5c4:\tba 01 00 00 00       \tmov    $0x1,%edx\n 5c9:\tbe 40 00 00 00       \tmov    $0x40,%esi\n 5ce:\t48 89 c7             \tmov    %rax,%rdi\n 5d1:\te8 00 00 00 00       \tcallq  5d6 <ff_raw_video_read_header+0x10a>\n 5d6:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n 5da:\t48 83 c4 38          \tadd    $0x38,%rsp\n 5de:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall ff_raw_video_read_header(__int64 a1) {\n  __int64 v1;\n  int v2;\n  int <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v6</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v7</span> = Number;\n  <span class=\"supfact\">v5</span> = avformat_new_stream(a1, Number L);\n  if (!<span class=\"supfact\">v5</span>)\n    return (unsigned int)Number;\n  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v5</span> + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v5</span> + Number) + Number L) =\n      *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n  *(_DWORD *)(<span class=\"supfact\">v5</span> + Number) = Number;\n  <span class=\"supfact\">v7</span> = av_parse_video_rate(\n      <span class=\"supfact\">v4</span>, *(_QWORD *)(<span class=\"supfact\">v6</span> + Number));\n  if ((<span class=\"supfact\">v7</span> & Number) == Number) {\n    v1 = *(_QWORD *)(<span class=\"supfact\">v5</span> + Number);\n    v2 = <span class=\"supfact\">v4</span>[Number];\n    *(_DWORD *)(v1 + Number) = <span class=\"supfact\">v4</span>[Number];\n    *(_DWORD *)(v1 + Number) = v2;\n    av_set_pts_info(<span class=\"supfact\">v5</span>, Number L, Number L, Number L);\n  } else {\n    av_log(a1, Number L, String, *(const char **)(<span class=\"supfact\">v6</span> + Number));\n  }\n  return <span class=\"supfact\">v7</span>;\n}", "code_t": "int __cdecl ff_raw_video_read_header(AVFormatContext_0 *s,\n                                     AVFormatParameters_0 *ap) {\n  AVCodecContext_0 *v2;\n  int v3;\n  AVRational_0 <span class=\"supfact\">framerate</span>;\n  AVStream_0 *<span class=\"supfact\">st</span>;\n  FFRawVideoDemuxerContext_0 *<span class=\"supfact\">s1</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">s1</span> = (FFRawVideoDemuxerContext_0 *)s->priv_data;\n  <span class=\"supfact\">ret</span> = Number;\n  <span class=\"supfact\">st</span> = (AVStream_0 *)avformat_new_stream(s, Number L);\n  if (!<span class=\"supfact\">st</span>)\n    return Number;\n  <span class=\"supfact\">st</span>->codec->codec_type = AVMEDIA_TYPE_VIDEO;\n  <span class=\"supfact\">st</span>->codec->codec_id = s->iformat->value;\n  <span class=\"supfact\">st</span>->need_parsing = AVSTREAM_PARSE_FULL;\n  <span class=\"supfact\">ret</span> =\n      av_parse_video_rate(&<span class=\"supfact\">framerate</span>,\n                          <span class=\"supfact\">s1</span>-><span class=\"supfact\">framerate</span>);\n  if (<span class=\"supfact\">ret</span> >= Number) {\n    v2 = <span class=\"supfact\">st</span>->codec;\n    v3 = <span class=\"supfact\">framerate</span>.num;\n    v2->time_base.num = <span class=\"supfact\">framerate</span>.den;\n    v2->time_base.den = v3;\n    av_set_pts_info(<span class=\"supfact\">st</span>, Number L, Number L, Number L);\n  } else {\n    av_log(s, Number L, String, <span class=\"supfact\">s1</span>-><span class=\"supfact\">framerate</span>);\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v7", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "v6", "type": "AVStream_0 *", "ref_name": "s1", "ref_type": "FFRawVideoDemuxerContext_0 *"}, {"name": "v5", "type": "AVCodecContext_0 *", "ref_name": "st", "ref_type": "AVStream_0 *"}, {"name": "v4", "type": "int[2]", "ref_name": "framerate", "ref_type": "struct AVRational_0 { int num; int den; }"}], "has_struc": true, "body_in_train": true}, {"repo_owner": "yosh1k104", "repo_name": "D-Switch", "path": "yosh1k104/D-Switch/060d5f10b94eaf94bb6b7c869aa412945db4f239a10565976ee1035e6108e5ee", "path_in_repo": "yosh1k104/D-Switch/contiki-2.6/examples/esb/obj_native/timetable-aggregate.o", "objdump": "00000000000004d4 <timetable_aggregate_compute_detailed>:\n 4d4:\t55                   \tpush   %rbp\n 4d5:\t48 89 e5             \tmov    %rsp,%rbp\n 4d8:\t48 83 ec 20          \tsub    $0x20,%rsp\n 4dc:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 4e0:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 4e4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 4e8:\t48 8b 00             \tmov    (%rax),%rax\n 4eb:\t0f b7 40 08          \tmovzwl 0x8(%rax),%eax\n 4ef:\t66 89 45 fa          \tmov    %ax,-0x6(%rbp)\n 4f3:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n 4fa:\te9 17 01 00 00       \tjmpq   616 <timetable_aggregate_compute_detailed+0x142>\n 4ff:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 503:\t48 8b 00             \tmov    (%rax),%rax\n 506:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 509:\t83 ea 01             \tsub    $0x1,%edx\n 50c:\t89 d2                \tmov    %edx,%edx\n 50e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n 512:\t48 01 d0             \tadd    %rdx,%rax\n 515:\t48 8b 10             \tmov    (%rax),%rdx\n 518:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 51c:\t48 89 d6             \tmov    %rdx,%rsi\n 51f:\t48 89 c7             \tmov    %rax,%rdi\n 522:\te8 f1 fb ff ff       \tcallq  118 <find_aggregate>\n 527:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 52b:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 530:\t0f 84 c3 00 00 00    \tje     5f9 <timetable_aggregate_compute_detailed+0x125>\n 536:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 53a:\t48 8b 00             \tmov    (%rax),%rax\n 53d:\t48 85 c0             \ttest   %rax,%rax\n 540:\t75 63                \tjne    5a5 <timetable_aggregate_compute_detailed+0xd1>\n 542:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 546:\t48 8b 00             \tmov    (%rax),%rax\n 549:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 54c:\t83 ea 01             \tsub    $0x1,%edx\n 54f:\t89 d2                \tmov    %edx,%edx\n 551:\t48 c1 e2 04          \tshl    $0x4,%rdx\n 555:\t48 01 d0             \tadd    %rdx,%rax\n 558:\t48 8b 10             \tmov    (%rax),%rdx\n 55b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 55f:\t48 89 10             \tmov    %rdx,(%rax)\n 562:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 566:\t48 8b 00             \tmov    (%rax),%rax\n 569:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 56c:\t48 c1 e2 04          \tshl    $0x4,%rdx\n 570:\t48 01 d0             \tadd    %rdx,%rax\n 573:\t0f b7 40 08          \tmovzwl 0x8(%rax),%eax\n 577:\t0f b7 d0             \tmovzwl %ax,%edx\n 57a:\t0f b7 45 fa          \tmovzwl -0x6(%rbp),%eax\n 57e:\t29 c2                \tsub    %eax,%edx\n 580:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 587 <timetable_aggregate_compute_detailed+0xb3>\n 587:\t0f b7 c0             \tmovzwl %ax,%eax\n 58a:\t29 c2                \tsub    %eax,%edx\n 58c:\t89 d0                \tmov    %edx,%eax\n 58e:\t48 63 d0             \tmovslq %eax,%rdx\n 591:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 595:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 599:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 59d:\t66 c7 40 08 01 00    \tmovw   $0x1,0x8(%rax)\n 5a3:\teb 54                \tjmp    5f9 <timetable_aggregate_compute_detailed+0x125>\n 5a5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 5a9:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n 5ad:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 5b1:\t48 8b 00             \tmov    (%rax),%rax\n 5b4:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n 5b7:\t48 c1 e1 04          \tshl    $0x4,%rcx\n 5bb:\t48 01 c8             \tadd    %rcx,%rax\n 5be:\t0f b7 40 08          \tmovzwl 0x8(%rax),%eax\n 5c2:\t0f b7 c8             \tmovzwl %ax,%ecx\n 5c5:\t0f b7 45 fa          \tmovzwl -0x6(%rbp),%eax\n 5c9:\t29 c1                \tsub    %eax,%ecx\n 5cb:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 5d2 <timetable_aggregate_compute_detailed+0xfe>\n 5d2:\t0f b7 c0             \tmovzwl %ax,%eax\n 5d5:\t29 c1                \tsub    %eax,%ecx\n 5d7:\t89 c8                \tmov    %ecx,%eax\n 5d9:\t48 98                \tcltq   \n 5db:\t48 01 c2             \tadd    %rax,%rdx\n 5de:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 5e2:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 5e6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 5ea:\t0f b7 40 08          \tmovzwl 0x8(%rax),%eax\n 5ee:\t8d 50 01             \tlea    0x1(%rax),%edx\n 5f1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 5f5:\t66 89 50 08          \tmov    %dx,0x8(%rax)\n 5f9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 5fd:\t48 8b 00             \tmov    (%rax),%rax\n 600:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 603:\t48 c1 e2 04          \tshl    $0x4,%rdx\n 607:\t48 01 d0             \tadd    %rdx,%rax\n 60a:\t0f b7 40 08          \tmovzwl 0x8(%rax),%eax\n 60e:\t66 89 45 fa          \tmov    %ax,-0x6(%rbp)\n 612:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 616:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 61a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 61e:\t8b 00                \tmov    (%rax),%eax\n 620:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 623:\t0f 82 d6 fe ff ff    \tjb     4ff <timetable_aggregate_compute_detailed+0x2b>\n 629:\t90                   \tnop\n 62a:\t90                   \tnop\n 62b:\tc9                   \tleaveq \n 62c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall timetable_aggregate_compute_detailed(__int64 *a1,\n                                                        unsigned int **a2) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v3</span>;\n  unsigned __int16 <span class=\"supfact\">v4</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v4</span> = *((_WORD *)*a2 + Number);\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = *a2[Number];\n    if (<span class=\"supfact\">i</span> >= (unsigned int)result)\n      break;\n    <span class=\"supfact\">v3</span> = find_aggregate(\n        a1, *(_QWORD *)&(*a2)[Number * <span class=\"supfact\">i</span> - Number]);\n    if (<span class=\"supfact\">v3</span>) {\n      if (*(_QWORD *)<span class=\"supfact\">v3</span>) {\n        *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) +=\n            LOWORD((*a2)[Number * <span class=\"supfact\">i</span> + Number]) -\n            <span class=\"supfact\">v4</span> - timetable_timestamp_time;\n        ++*(_WORD *)(<span class=\"supfact\">v3</span> + Number);\n      } else {\n        *(_QWORD *)<span class=\"supfact\">v3</span> =\n            *(_QWORD *)&(*a2)[Number * <span class=\"supfact\">i</span> - Number];\n        *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) =\n            LOWORD((*a2)[Number * <span class=\"supfact\">i</span> + Number]) -\n            <span class=\"supfact\">v4</span> - timetable_timestamp_time;\n        *(_WORD *)(<span class=\"supfact\">v3</span> + Number) = Number;\n      }\n    }\n    <span class=\"supfact\">v4</span> = (*a2)[Number * <span class=\"supfact\">i</span> + Number];\n  }\n  return result;\n}", "code_t": "void __cdecl timetable_aggregate_compute_detailed(timetable_aggregate *a,\n                                                  timetable *timetable) {\n  timetable_aggregate_entry *<span class=\"supfact\">entry</span>;\n  rtimer_clock_t <span class=\"supfact\">t</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">t</span> = timetable->timestamps->time;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < *timetable->ptr;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">entry</span> =\n        find_aggregate(a, timetable->timestamps[<span class=\"supfact\">i</span> - Number].id);\n    if (<span class=\"supfact\">entry</span>) {\n      if (<span class=\"supfact\">entry</span>->id) {\n        <span class=\"supfact\">entry</span>->time +=\n            timetable->timestamps[<span class=\"supfact\">i</span>].time - <span class=\"supfact\">t</span> -\n            timetable_timestamp_time;\n        ++<span class=\"supfact\">entry</span>->episodes;\n      } else {\n        <span class=\"supfact\">entry</span>->id =\n            timetable->timestamps[<span class=\"supfact\">i</span> - Number].id;\n        <span class=\"supfact\">entry</span>->time =\n            timetable->timestamps[<span class=\"supfact\">i</span>].time - <span class=\"supfact\">t</span> -\n            timetable_timestamp_time;\n        <span class=\"supfact\">entry</span>->episodes = Number;\n      }\n    }\n    <span class=\"supfact\">t</span> = timetable->timestamps[<span class=\"supfact\">i</span>].time;\n  }\n}", "var": [{"name": "i", "type": "unsigned int", "ref_name": "i", "ref_type": "unsigned int"}, {"name": "v4", "type": "rtimer_clock_t", "ref_name": "t", "ref_type": "rtimer_clock_t"}, {"name": "v3", "type": "timetable_aggregate_entry *", "ref_name": "entry", "ref_type": "timetable_aggregate_entry *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "billy482", "repo_name": "mTar", "path": "billy482/mTar/33801a8e4305935c48c186441c08b906371dd7b19e620853a168e0f7b322c612", "path_in_repo": "billy482/mTar//lib/libio-file.so", "objdump": "", "code_s": "_QWORD *__fastcall sub_195B(int a1, __int64 a2) {\n  _QWORD *result;\n  _QWORD *<span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = malloc(Number);\n  *(_DWORD *)<span class=\"supfact\">v3</span> = a1;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  *((_DWORD *)<span class=\"supfact\">v3</span> + Number) = Number;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  if (*(_BYTE *)(a2 + Number)) {\n    if (*(__int64 *)(a2 + Number) <= Number)\n      mtar_verbose_printf();\n    else\n      <span class=\"supfact\">v3</span>[Number] = *(_QWORD *)(a2 + Number) << Number;\n  }\n  result = malloc(Number);\n  *result = &off_4120;\n  result[Number] = <span class=\"supfact\">v3</span>;\n  return result;\n}", "code_t": "_QWORD *__fastcall sub_195B(int a1, __int64 a2) {\n  _QWORD *result;\n  _QWORD *<span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = malloc(Number);\n  *(_DWORD *)<span class=\"supfact\">v3</span> = a1;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  *((_DWORD *)<span class=\"supfact\">v3</span> + Number) = Number;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  if (*(_BYTE *)(a2 + Number)) {\n    if (*(__int64 *)(a2 + Number) <= Number)\n      mtar_verbose_printf();\n    else\n      <span class=\"supfact\">v3</span>[Number] = *(_QWORD *)(a2 + Number) << Number;\n  }\n  result = malloc(Number);\n  *result = &off_4120;\n  result[Number] = <span class=\"supfact\">v3</span>;\n  return result;\n}", "var": [{"name": "v3", "type": "__int64", "ref_name": "v3", "ref_type": "_QWORD *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "Khadgar1006", "repo_name": "FORLINX-Linux3.14-I.MX6UL", "path": "Khadgar1006/FORLINX-Linux3.14-I.MX6UL/cf147244475d949a0b2658300bad56107942f9b75739553e898641a8dbe5b9a4", "path_in_repo": "Khadgar1006/FORLINX-Linux3.14-I.MX6UL/linux-3.14.38/tools/lib/traceevent/event-parse.o", "objdump": "000000000000a36a <pevent_strerror>:\n    a36a:\t55                   \tpush   %rbp\n    a36b:\t48 89 e5             \tmov    %rsp,%rbp\n    a36e:\t48 83 ec 60          \tsub    $0x60,%rsp\n    a372:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    a376:\t89 75 b4             \tmov    %esi,-0x4c(%rbp)\n    a379:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n    a37d:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n    a381:\t83 7d b4 00          \tcmpl   $0x0,-0x4c(%rbp)\n    a385:\t0f 88 9d 00 00 00    \tjs     a428 <pevent_strerror+0xbe>\n    a38b:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n    a38f:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n    a393:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n    a396:\t48 89 ce             \tmov    %rcx,%rsi\n    a399:\t89 c7                \tmov    %eax,%edi\n    a39b:\te8 00 00 00 00       \tcallq  a3a0 <pevent_strerror+0x36>\n    a3a0:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    a3a4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    a3a8:\t48 3b 45 a8          \tcmp    -0x58(%rbp),%rax\n    a3ac:\t74 73                \tje     a421 <pevent_strerror+0xb7>\n    a3ae:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    a3b2:\t48 89 c7             \tmov    %rax,%rdi\n    a3b5:\te8 00 00 00 00       \tcallq  a3ba <pevent_strerror+0x50>\n    a3ba:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    a3be:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    a3c2:\t48 83 e8 01          \tsub    $0x1,%rax\n    a3c6:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    a3ca:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    a3ce:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    a3d2:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    a3d6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a3da:\t48 39 c2             \tcmp    %rax,%rdx\n    a3dd:\t48 0f 47 d0          \tcmova  %rax,%rdx\n    a3e1:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    a3e5:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    a3e9:\t48 89 ce             \tmov    %rcx,%rsi\n    a3ec:\t48 89 c7             \tmov    %rax,%rdi\n    a3ef:\te8 00 00 00 00       \tcallq  a3f4 <pevent_strerror+0x8a>\n    a3f4:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    a3f8:\t48 83 e8 01          \tsub    $0x1,%rax\n    a3fc:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    a400:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    a404:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    a408:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    a40c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    a410:\t48 39 c2             \tcmp    %rax,%rdx\n    a413:\t48 0f 47 d0          \tcmova  %rax,%rdx\n    a417:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    a41b:\t48 01 d0             \tadd    %rdx,%rax\n    a41e:\tc6 00 00             \tmovb   $0x0,(%rax)\n    a421:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    a426:\teb 68                \tjmp    a490 <pevent_strerror+0x126>\n    a428:\t81 7d b4 61 79 fe ff \tcmpl   $0xfffe7961,-0x4c(%rbp)\n    a42f:\t7c 09                \tjl     a43a <pevent_strerror+0xd0>\n    a431:\t81 7d b4 7e 79 fe ff \tcmpl   $0xfffe797e,-0x4c(%rbp)\n    a438:\t7c 07                \tjl     a441 <pevent_strerror+0xd7>\n    a43a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    a43f:\teb 4f                \tjmp    a490 <pevent_strerror+0x126>\n    a441:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n    a444:\t05 9f 86 01 00       \tadd    $0x1869f,%eax\n    a449:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    a44c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    a44f:\t48 98                \tcltq   \n    a451:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    a458:\t00 \n    a459:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # a460 <pevent_strerror+0xf6>\n    a460:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n    a464:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    a468:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    a46c:\t48 8b 75 a0          \tmov    -0x60(%rbp),%rsi\n    a470:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    a474:\t48 89 d1             \tmov    %rdx,%rcx\n    a477:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # a47e <pevent_strerror+0x114>\n    a47e:\t48 89 c7             \tmov    %rax,%rdi\n    a481:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    a486:\te8 00 00 00 00       \tcallq  a48b <pevent_strerror+0x121>\n    a48b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    a490:\tc9                   \tleaveq \n    a491:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pevent_strerror(__int64 a1, int a2, char *a3, size_t a4) {\n  size_t v4;\n  size_t v5;\n  __int64 result;\n  size_t <span class=\"supfact\">v9</span>;\n  const char *<span class=\"supfact\">s</span>;\n  if (a2 < Number) {\n    if (a2 >= Number && a2 < Number) {\n      snprintf(a3, a4, String, (&pevent_error_str)[a2 + Number]);\n      result = Number L;\n    } else {\n      result = Number;\n    }\n  } else {\n    <span class=\"supfact\">s</span> = strerror_r(a2, a3, a4);\n    if (<span class=\"supfact\">s</span> != a3) {\n      <span class=\"supfact\">v9</span> = strlen(<span class=\"supfact\">s</span>);\n      v4 = <span class=\"supfact\">v9</span>;\n      if (<span class=\"supfact\">v9</span> > a4 - Number)\n        v4 = a4 - Number;\n      memcpy(a3, <span class=\"supfact\">s</span>, v4);\n      v5 = <span class=\"supfact\">v9</span>;\n      if (<span class=\"supfact\">v9</span> > a4 - Number)\n        v5 = a4 - Number;\n      a3[v5] = Number;\n    }\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl pevent_strerror(pevent *pevent, pevent_errno errnum, char *buf,\n                            size_t buflen) {\n  size_t v4;\n  size_t v5;\n  int result;\n  size_t <span class=\"supfact\">len</span>;\n  char *<span class=\"supfact\">msg</span>;\n  if (errnum < PEVENT_ERRNO__SUCCESS) {\n    if (errnum >= PEVENT_ERRNO__MEM_ALLOC_FAILED &&\n        errnum < __PEVENT_ERRNO__END) {\n      snprintf(buf, buflen, String, pevent_error_str[errnum + Number]);\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else {\n    <span class=\"supfact\">msg</span> = strerror_r(errnum, buf, buflen);\n    if (<span class=\"supfact\">msg</span> != buf) {\n      <span class=\"supfact\">len</span> = strlen(<span class=\"supfact\">msg</span>);\n      v4 = <span class=\"supfact\">len</span>;\n      if (<span class=\"supfact\">len</span> > buflen - Number)\n        v4 = buflen - Number;\n      memcpy(buf, <span class=\"supfact\">msg</span>, v4);\n      v5 = <span class=\"supfact\">len</span>;\n      if (<span class=\"supfact\">len</span> > buflen - Number)\n        v5 = buflen - Number;\n      buf[v5] = Number;\n    }\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "s", "type": "char *", "ref_name": "msg", "ref_type": "char *"}, {"name": "v9", "type": "size_t", "ref_name": "len", "ref_type": "size_t"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "popo55668", "repo_name": "DAG-Aware-MIG-Rewriting", "path": "popo55668/DAG-Aware-MIG-Rewriting/99110506fa2f554dd0e560ed53c94a1cb10caec060170c7e0ff2fd08d514db46", "path_in_repo": "popo55668/DAG-Aware-MIG-Rewriting//src/aig/ivy/ivyMulti.o", "objdump": "0000000000000767 <Vec_PtrUniqify2>:\n     767:\t55                   \tpush   %rbp\n     768:\t48 89 e5             \tmov    %rsp,%rbp\n     76b:\t53                   \tpush   %rbx\n     76c:\t48 83 ec 38          \tsub    $0x38,%rsp\n     770:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     774:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     778:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     77c:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n     780:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n     785:\t74 16                \tje     79d <Vec_PtrUniqify2+0x36>\n     787:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     78b:\tba 01 00 00 00       \tmov    $0x1,%edx\n     790:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     795:\t48 89 c7             \tmov    %rax,%rdi\n     798:\te8 4f fa ff ff       \tcallq  1ec <Vec_IntFill>\n     79d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7a1:\t8b 40 04             \tmov    0x4(%rax),%eax\n     7a4:\t83 f8 01             \tcmp    $0x1,%eax\n     7a7:\t0f 8e 62 01 00 00    \tjle    90f <Vec_PtrUniqify2+0x1a8>\n     7ad:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     7b1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7b5:\t48 89 d6             \tmov    %rdx,%rsi\n     7b8:\t48 89 c7             \tmov    %rax,%rdi\n     7bb:\te8 62 fe ff ff       \tcallq  622 <Vec_PtrSort>\n     7c0:\tc7 45 e8 01 00 00 00 \tmovl   $0x1,-0x18(%rbp)\n     7c7:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     7ca:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     7cd:\te9 e5 00 00 00       \tjmpq   8b7 <Vec_PtrUniqify2+0x150>\n     7d2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7d6:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     7da:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n     7dd:\t48 63 d2             \tmovslq %edx,%rdx\n     7e0:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     7e4:\t48 83 ea 08          \tsub    $0x8,%rdx\n     7e8:\t48 8d 0c 10          \tlea    (%rax,%rdx,1),%rcx\n     7ec:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7f0:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     7f4:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n     7f7:\t48 63 d2             \tmovslq %edx,%rdx\n     7fa:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     7fe:\t48 01 c2             \tadd    %rax,%rdx\n     801:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     805:\t48 89 ce             \tmov    %rcx,%rsi\n     808:\t48 89 d7             \tmov    %rdx,%rdi\n     80b:\tff d0                \tcallq  *%rax\n     80d:\t85 c0                \ttest   %eax,%eax\n     80f:\t74 51                \tje     862 <Vec_PtrUniqify2+0xfb>\n     811:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     815:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     819:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n     81c:\t48 63 d2             \tmovslq %edx,%rdx\n     81f:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     823:\t48 8d 0c 10          \tlea    (%rax,%rdx,1),%rcx\n     827:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     82b:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n     82f:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     832:\t8d 50 01             \tlea    0x1(%rax),%edx\n     835:\t89 55 e8             \tmov    %edx,-0x18(%rbp)\n     838:\t48 98                \tcltq   \n     83a:\t48 c1 e0 03          \tshl    $0x3,%rax\n     83e:\t48 8d 14 06          \tlea    (%rsi,%rax,1),%rdx\n     842:\t48 8b 01             \tmov    (%rcx),%rax\n     845:\t48 89 02             \tmov    %rax,(%rdx)\n     848:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n     84d:\t74 64                \tje     8b3 <Vec_PtrUniqify2+0x14c>\n     84f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     853:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     858:\t48 89 c7             \tmov    %rax,%rdi\n     85b:\te8 eb f9 ff ff       \tcallq  24b <Vec_IntPush>\n     860:\teb 51                \tjmp    8b3 <Vec_PtrUniqify2+0x14c>\n     862:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n     867:\t74 21                \tje     88a <Vec_PtrUniqify2+0x123>\n     869:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     86d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     871:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n     874:\t48 63 d2             \tmovslq %edx,%rdx\n     877:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     87b:\t48 01 d0             \tadd    %rdx,%rax\n     87e:\t48 8b 00             \tmov    (%rax),%rax\n     881:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     885:\t48 89 c7             \tmov    %rax,%rdi\n     888:\tff d2                \tcallq  *%rdx\n     88a:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n     88f:\t74 22                \tje     8b3 <Vec_PtrUniqify2+0x14c>\n     891:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     895:\t48 89 c7             \tmov    %rax,%rdi\n     898:\te8 e1 f7 ff ff       \tcallq  7e <Vec_IntSize>\n     89d:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n     8a0:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     8a4:\tba 01 00 00 00       \tmov    $0x1,%edx\n     8a9:\t89 ce                \tmov    %ecx,%esi\n     8ab:\t48 89 c7             \tmov    %rax,%rdi\n     8ae:\te8 2f f8 ff ff       \tcallq  e2 <Vec_IntAddToEntry>\n     8b3:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n     8b7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     8bb:\t8b 40 04             \tmov    0x4(%rax),%eax\n     8be:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n     8c1:\t0f 8c 0b ff ff ff    \tjl     7d2 <Vec_PtrUniqify2+0x6b>\n     8c7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     8cb:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n     8ce:\t89 50 04             \tmov    %edx,0x4(%rax)\n     8d1:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n     8d6:\t74 38                \tje     910 <Vec_PtrUniqify2+0x1a9>\n     8d8:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     8dc:\t48 89 c7             \tmov    %rax,%rdi\n     8df:\te8 9a f7 ff ff       \tcallq  7e <Vec_IntSize>\n     8e4:\t89 c3                \tmov    %eax,%ebx\n     8e6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     8ea:\t48 89 c7             \tmov    %rax,%rdi\n     8ed:\te8 7b fb ff ff       \tcallq  46d <Vec_PtrSize>\n     8f2:\t39 c3                \tcmp    %eax,%ebx\n     8f4:\t74 1a                \tje     910 <Vec_PtrUniqify2+0x1a9>\n     8f6:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     8fb:\tba 98 03 00 00       \tmov    $0x398,%edx\n     900:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     905:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     90a:\te8 00 00 00 00       \tcallq  90f <Vec_PtrUniqify2+0x1a8>\n     90f:\t90                   \tnop\n     910:\t48 83 c4 38          \tadd    $0x38,%rsp\n     914:\t5b                   \tpop    %rbx\n     915:\t5d                   \tpop    %rbp\n     916:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Vec_PtrUniqify2(__int64 a1,\n                                   int (*a2)(const void *, const void *),\n                                   void(__fastcall *a3)(_QWORD), __int64 a4) {\n  __int64 result;\n  int v5;\n  int v6;\n  int v7;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">i</span>;\n  if (a4)\n    Vec_IntFill(a4, Number, Number);\n  result = *(unsigned int *)(a1 + Number);\n  if ((int)result > Number) {\n    Vec_PtrSort(a1, a2);\n    <span class=\"supfact\">v10</span> = Number;\n    for (<span class=\"supfact\">i</span> = Number;\n         <span class=\"supfact\">i</span> < *(_DWORD *)(a1 + Number); ++<span class=\"supfact\">i</span>) {\n      if (a2((const void *)(*(_QWORD *)(a1 + Number) +\n                            Number L * <span class=\"supfact\">i</span>),\n             (const void *)(*(_QWORD *)(a1 + Number) +\n                            Number L * <span class=\"supfact\">v10</span> - Number))) {\n        v5 = <span class=\"supfact\">v10</span>++;\n        *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L * v5) = *(\n            _QWORD *)(*(_QWORD *)(a1 + Number) + Number L * <span class=\"supfact\">i</span>);\n        if (a4)\n          Vec_IntPush(a4, Number);\n      } else {\n        if (a3)\n          a3(*(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                         *(_QWORD *)(a1 + Number)));\n        if (a4) {\n          v6 = Vec_IntSize(a4);\n          Vec_IntAddToEntry(a4, v6 - Number, Number);\n        }\n      }\n    }\n    result = a1;\n    *(_DWORD *)(a1 + Number) = <span class=\"supfact\">v10</span>;\n    if (a4) {\n      v7 = Vec_IntSize(a4);\n      result = Vec_PtrSize(a1);\n      if (v7 != (_DWORD)result)\n        _assert_fail(String, String, Number, String);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl Vec_PtrUniqify2(Vec_Ptr_t *p,\n                             int (*Vec_PtrSortCompare)(void **, void **),\n                             void (*Vec_PtrObjFree)(void *),\n                             Vec_Int_t *vCounts) {\n  int v4;\n  int v5;\n  int v6;\n  int <span class=\"supfact\">k</span>;\n  int <span class=\"supfact\">i</span>;\n  if (vCounts)\n    Vec_IntFill(vCounts, Number, Number);\n  if (p->nSize > Number) {\n    Vec_PtrSort(p, (int (*)(...))Vec_PtrSortCompare);\n    <span class=\"supfact\">k</span> = Number;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < p->nSize;\n         ++<span class=\"supfact\">i</span>) {\n      if (Vec_PtrSortCompare(&p->pArray[<span class=\"supfact\">i</span>],\n                             &p->pArray[<span class=\"supfact\">k</span> - Number])) {\n        v4 = <span class=\"supfact\">k</span>++;\n        p->pArray[v4] = p->pArray[<span class=\"supfact\">i</span>];\n        if (vCounts)\n          Vec_IntPush(vCounts, Number);\n      } else {\n        if (Vec_PtrObjFree)\n          Vec_PtrObjFree(p->pArray[<span class=\"supfact\">i</span>]);\n        if (vCounts) {\n          v5 = Vec_IntSize(vCounts) - Number;\n          Vec_IntAddToEntry(vCounts, v5, Number);\n        }\n      }\n    }\n    p->nSize = <span class=\"supfact\">k</span>;\n    if (vCounts) {\n      v6 = Vec_IntSize(vCounts);\n      if (v6 != Vec_PtrSize(p))\n        _assert_fail(String, String, Number, String);\n    }\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v10", "type": "int", "ref_name": "k", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "ausbin", "repo_name": "astro", "path": "ausbin/astro/17fe378942d7f481ad6abdd308f3c120ba9745cab32f5a944cb111eb3138f92c", "path_in_repo": "ausbin/astro/submods/unicorn/qemu/armeb-softmmu/tcg/tcg.o", "objdump": "0000000000006c39 <tcg_la_br_end_armeb>:\n    6c39:\t55                   \tpush   %rbp\n    6c3a:\t48 89 e5             \tmov    %rsp,%rbp\n    6c3d:\t48 83 ec 20          \tsub    $0x20,%rsp\n    6c41:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    6c45:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    6c49:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6c4d:\t8b 40 34             \tmov    0x34(%rax),%eax\n    6c50:\t48 63 d0             \tmovslq %eax,%rdx\n    6c53:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    6c57:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    6c5c:\t48 89 c7             \tmov    %rax,%rdi\n    6c5f:\te8 00 00 00 00       \tcallq  6c64 <tcg_la_br_end_armeb+0x2b>\n    6c64:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6c68:\t8b 40 34             \tmov    0x34(%rax),%eax\n    6c6b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    6c6e:\teb 3e                \tjmp    6cae <tcg_la_br_end_armeb+0x75>\n    6c70:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    6c74:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    6c77:\t48 63 d0             \tmovslq %eax,%rdx\n    6c7a:\t48 89 d0             \tmov    %rdx,%rax\n    6c7d:\t48 c1 e0 03          \tshl    $0x3,%rax\n    6c81:\t48 29 d0             \tsub    %rdx,%rax\n    6c84:\t48 c1 e0 03          \tshl    $0x3,%rax\n    6c88:\t48 01 c8             \tadd    %rcx,%rax\n    6c8b:\t48 05 00 01 00 00    \tadd    $0x100,%rax\n    6c91:\t0f b6 40 08          \tmovzbl 0x8(%rax),%eax\n    6c95:\tc0 e8 03             \tshr    $0x3,%al\n    6c98:\t83 e0 01             \tand    $0x1,%eax\n    6c9b:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    6c9e:\t48 63 ca             \tmovslq %edx,%rcx\n    6ca1:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6ca5:\t48 01 ca             \tadd    %rcx,%rdx\n    6ca8:\t88 02                \tmov    %al,(%rdx)\n    6caa:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    6cae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6cb2:\t8b 40 38             \tmov    0x38(%rax),%eax\n    6cb5:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    6cb8:\t7c b6                \tjl     6c70 <tcg_la_br_end_armeb+0x37>\n    6cba:\t90                   \tnop\n    6cbb:\t90                   \tnop\n    6cbc:\tc9                   \tleaveq \n    6cbd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tcg_la_br_end_armeb(__int64 a1, void *a2) {\n  __int64 result;\n  int <span class=\"supfact\">i</span>;\n  memset(a2, Number, *(int *)(a1 + Number));\n  for (<span class=\"supfact\">i</span> = *(_DWORD *)(a1 + Number);; ++<span class=\"supfact\">i</span>) {\n    result = *(unsigned int *)(a1 + Number);\n    if (<span class=\"supfact\">i</span> >= (int)result)\n      break;\n    *((_BYTE *)a2 + <span class=\"supfact\">i</span>) =\n        (*(_BYTE *)(a1 + Number L * <span class=\"supfact\">i</span> + Number) & Number) !=\n        Number;\n  }\n  return result;\n}", "code_t": "void __cdecl tcg_la_br_end_armeb(TCGContext_0 *s, uint8_t *mem_temps) {\n  int <span class=\"supfact\">i</span>;\n  memset(mem_temps, Number, s->nb_globals);\n  for (<span class=\"supfact\">i</span> = s->nb_globals; <span class=\"supfact\">i</span> < s->nb_temps;\n       ++<span class=\"supfact\">i</span>)\n    mem_temps[<span class=\"supfact\">i</span>] =\n        (*((_BYTE *)&s->temps[<span class=\"supfact\">i</span>] + Number) & Number) != Number;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "fireeye", "repo_name": "rvmi-kvm", "path": "fireeye/rvmi-kvm/a8b9db07a4e6fc377e8d54f779bcd4a748132cdec6b21fb8b1791d5e65aed0b6", "path_in_repo": "fireeye/rvmi-kvm/tools/lib/lockdep/liblockdep.so.4.13.0-rc3", "objdump": "0000000000008736 <__lock_unpin_lock>:\n    8736:\t55                   \tpush   %rbp\n    8737:\t48 89 e5             \tmov    %rsp,%rbp\n    873a:\t48 83 ec 40          \tsub    $0x40,%rsp\n    873e:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    8742:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    8745:\te8 46 a9 ff ff       \tcallq  3090 <__curr@plt>\n    874a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    874e:\t48 8b 05 13 88 00 00 \tmov    0x8813(%rip),%rax        # 10f68 <_DYNAMIC+0x240>\n    8755:\t0f b6 00             \tmovzbl (%rax),%eax\n    8758:\t83 f0 01             \txor    $0x1,%eax\n    875b:\t0f b6 c0             \tmovzbl %al,%eax\n    875e:\t48 85 c0             \ttest   %rax,%rax\n    8761:\t0f 85 65 01 00 00    \tjne    88cc <__lock_unpin_lock+0x196>\n    8767:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    876e:\te9 0a 01 00 00       \tjmpq   887d <__lock_unpin_lock+0x147>\n    8773:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    8777:\t48 8d 48 10          \tlea    0x10(%rax),%rcx\n    877b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    877e:\t48 63 d0             \tmovslq %eax,%rdx\n    8781:\t48 89 d0             \tmov    %rdx,%rax\n    8784:\t48 c1 e0 02          \tshl    $0x2,%rax\n    8788:\t48 01 d0             \tadd    %rdx,%rax\n    878b:\t48 c1 e0 03          \tshl    $0x3,%rax\n    878f:\t48 01 c8             \tadd    %rcx,%rax\n    8792:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    8796:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    879a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    879e:\t48 89 d6             \tmov    %rdx,%rsi\n    87a1:\t48 89 c7             \tmov    %rax,%rdi\n    87a4:\te8 dd f3 ff ff       \tcallq  7b86 <match_held_lock>\n    87a9:\t85 c0                \ttest   %eax,%eax\n    87ab:\t0f 84 c8 00 00 00    \tje     8879 <__lock_unpin_lock+0x143>\n    87b1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    87b5:\t8b 40 24             \tmov    0x24(%rax),%eax\n    87b8:\t85 c0                \ttest   %eax,%eax\n    87ba:\t0f 94 c0             \tsete   %al\n    87bd:\t0f b6 c0             \tmovzbl %al,%eax\n    87c0:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    87c3:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    87c7:\t0f 95 c0             \tsetne  %al\n    87ca:\t0f b6 c0             \tmovzbl %al,%eax\n    87cd:\t48 85 c0             \ttest   %rax,%rax\n    87d0:\t74 23                \tje     87f5 <__lock_unpin_lock+0xbf>\n    87d2:\t48 8b 05 1f 88 00 00 \tmov    0x881f(%rip),%rax        # 10ff8 <_DYNAMIC+0x2d0>\n    87d9:\t48 8b 00             \tmov    (%rax),%rax\n    87dc:\t48 89 c1             \tmov    %rax,%rcx\n    87df:\tba 1b 00 00 00       \tmov    $0x1b,%edx\n    87e4:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    87e9:\t48 8d 3d 72 42 00 00 \tlea    0x4272(%rip),%rdi        # ca62 <_fini+0xec6>\n    87f0:\te8 2b aa ff ff       \tcallq  3220 <fwrite@plt>\n    87f5:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    87f9:\t0f 95 c0             \tsetne  %al\n    87fc:\t0f b6 c0             \tmovzbl %al,%eax\n    87ff:\t48 85 c0             \ttest   %rax,%rax\n    8802:\t0f 85 c7 00 00 00    \tjne    88cf <__lock_unpin_lock+0x199>\n    8808:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    880c:\t8b 50 24             \tmov    0x24(%rax),%edx\n    880f:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    8812:\t29 c2                \tsub    %eax,%edx\n    8814:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8818:\t89 50 24             \tmov    %edx,0x24(%rax)\n    881b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    881f:\t8b 40 24             \tmov    0x24(%rax),%eax\n    8822:\tc1 e8 1f             \tshr    $0x1f,%eax\n    8825:\t0f b6 c0             \tmovzbl %al,%eax\n    8828:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    882b:\t83 7d d8 00          \tcmpl   $0x0,-0x28(%rbp)\n    882f:\t0f 95 c0             \tsetne  %al\n    8832:\t0f b6 c0             \tmovzbl %al,%eax\n    8835:\t48 85 c0             \ttest   %rax,%rax\n    8838:\t74 23                \tje     885d <__lock_unpin_lock+0x127>\n    883a:\t48 8b 05 b7 87 00 00 \tmov    0x87b7(%rip),%rax        # 10ff8 <_DYNAMIC+0x2d0>\n    8841:\t48 8b 00             \tmov    (%rax),%rax\n    8844:\t48 89 c1             \tmov    %rax,%rcx\n    8847:\tba 14 00 00 00       \tmov    $0x14,%edx\n    884c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    8851:\t48 8d 3d 26 42 00 00 \tlea    0x4226(%rip),%rdi        # ca7e <_fini+0xee2>\n    8858:\te8 c3 a9 ff ff       \tcallq  3220 <fwrite@plt>\n    885d:\t83 7d d8 00          \tcmpl   $0x0,-0x28(%rbp)\n    8861:\t0f 95 c0             \tsetne  %al\n    8864:\t0f b6 c0             \tmovzbl %al,%eax\n    8867:\t48 85 c0             \ttest   %rax,%rax\n    886a:\t74 66                \tje     88d2 <__lock_unpin_lock+0x19c>\n    886c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8870:\tc7 40 24 00 00 00 00 \tmovl   $0x0,0x24(%rax)\n    8877:\teb 59                \tjmp    88d2 <__lock_unpin_lock+0x19c>\n    8879:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    887d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    8881:\t8b 40 08             \tmov    0x8(%rax),%eax\n    8884:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    8887:\t0f 8c e6 fe ff ff    \tjl     8773 <__lock_unpin_lock+0x3d>\n    888d:\tc7 45 ec 01 00 00 00 \tmovl   $0x1,-0x14(%rbp)\n    8894:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    8898:\t0f 95 c0             \tsetne  %al\n    889b:\t0f b6 c0             \tmovzbl %al,%eax\n    889e:\t48 85 c0             \ttest   %rax,%rax\n    88a1:\t74 23                \tje     88c6 <__lock_unpin_lock+0x190>\n    88a3:\t48 8b 05 4e 87 00 00 \tmov    0x874e(%rip),%rax        # 10ff8 <_DYNAMIC+0x2d0>\n    88aa:\t48 8b 00             \tmov    (%rax),%rax\n    88ad:\t48 89 c1             \tmov    %rax,%rcx\n    88b0:\tba 19 00 00 00       \tmov    $0x19,%edx\n    88b5:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    88ba:\t48 8d 3d d2 41 00 00 \tlea    0x41d2(%rip),%rdi        # ca93 <_fini+0xef7>\n    88c1:\te8 5a a9 ff ff       \tcallq  3220 <fwrite@plt>\n    88c6:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    88ca:\teb 07                \tjmp    88d3 <__lock_unpin_lock+0x19d>\n    88cc:\t90                   \tnop\n    88cd:\teb 04                \tjmp    88d3 <__lock_unpin_lock+0x19d>\n    88cf:\t90                   \tnop\n    88d0:\teb 01                \tjmp    88d3 <__lock_unpin_lock+0x19d>\n    88d2:\t90                   \tnop\n    88d3:\tc9                   \tleaveq \n    88d4:\tc3                   \tretq   ", "code_s": "size_t __fastcall _lock_unpin_lock(_QWORD *a1, const char *a2) {\n  size_t result;\n  _BOOL4 <span class=\"supfact\">v3</span>;\n  _BOOL4 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v6</span> = __curr(a1, a2);\n  result = debug_locks ^ Number;\n  if (debug_locks == Number) {\n    for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n      if (<span class=\"supfact\">i</span> >= *(_DWORD *)(<span class=\"supfact\">v6</span> + Number))\n        return fwrite(String, Number, Number, stderr);\n      <span class=\"supfact\">v5</span> =\n          <span class=\"supfact\">v6</span> + Number + Number L * <span class=\"supfact\">i</span>;\n      if ((unsigned int)match_held_lock(<span class=\"supfact\">v5</span>, a1))\n        break;\n    }\n    <span class=\"supfact\">v4</span> = *(_DWORD *)(<span class=\"supfact\">v5</span> + Number) == Number;\n    if (!*(_DWORD *)(<span class=\"supfact\">v5</span> + Number))\n      fwrite(String, Number, Number, stderr);\n    result = <span class=\"supfact\">v4</span>;\n    if (!<span class=\"supfact\">v4</span>) {\n      *(_DWORD *)(<span class=\"supfact\">v5</span> + Number) -= (_DWORD)a2;\n      <span class=\"supfact\">v3</span> = *(int *)(<span class=\"supfact\">v5</span> + Number) < Number;\n      if (*(int *)(<span class=\"supfact\">v5</span> + Number) < Number)\n        fwrite(String, Number, Number, stderr);\n      result = <span class=\"supfact\">v3</span>;\n      if (<span class=\"supfact\">v3</span>) {\n        result = <span class=\"supfact\">v6</span> + Number + Number L * <span class=\"supfact\">i</span>;\n        *(_DWORD *)(<span class=\"supfact\">v5</span> + Number) = Number;\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl _lock_unpin_lock(lockdep_map *lock, pin_cookie cookie) {\n  int <span class=\"supfact\">__ret_warn_on_0</span>;\n  int <span class=\"supfact\">__ret_warn_on</span>;\n  held_lock *<span class=\"supfact\">hlock</span>;\n  task_struct *<span class=\"supfact\">curr</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">curr</span> = __curr();\n  if (debug_locks) {\n    for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n      if (<span class=\"supfact\">i</span> >= <span class=\"supfact\">curr</span>->lockdep_depth) {\n        fwrite(String, Number, Number, stderr);\n        return;\n      }\n      <span class=\"supfact\">hlock</span> =\n          &<span class=\"supfact\">curr</span>->held_locks[<span class=\"supfact\">i</span>];\n      if (match_held_lock(<span class=\"supfact\">hlock</span>, lock))\n        break;\n    }\n    <span class=\"supfact\">__ret_warn_on</span> = <span class=\"supfact\">hlock</span>->pin_count == Number;\n    if (!<span class=\"supfact\">hlock</span>->pin_count)\n      fwrite(String, Number, Number, stderr);\n    if (!<span class=\"supfact\">__ret_warn_on</span>) {\n      <span class=\"supfact\">hlock</span>->pin_count -= cookie.val;\n      <span class=\"supfact\">__ret_warn_on_0</span> =\n          (<span class=\"supfact\">hlock</span>->pin_count & Number) != Number;\n      if ((<span class=\"supfact\">hlock</span>->pin_count & Number) != Number)\n        fwrite(String, Number, Number, stderr);\n      if (<span class=\"supfact\">__ret_warn_on_0</span>)\n        <span class=\"supfact\">hlock</span>->pin_count = Number;\n    }\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v6", "type": "task_struct *", "ref_name": "curr", "ref_type": "task_struct *"}, {"name": "v5", "type": "held_lock *", "ref_name": "hlock", "ref_type": "held_lock *"}, {"name": "v4", "type": "int", "ref_name": "__ret_warn_on", "ref_type": "int"}, {"name": "v3", "type": "int", "ref_name": "__ret_warn_on_0", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "lolo32", "repo_name": "mupdf-mirror", "path": "lolo32/mupdf-mirror/163c3030fbb6198664981e97868f72edf9cc8af2ff58fcb3029b02520b9d317b", "path_in_repo": "lolo32/mupdf-mirror//build/debug/pdf/pdf-function.o", "objdump": "0000000000004e0d <pdf_debug_indent>:\n    4e0d:\t55                   \tpush   %rbp\n    4e0e:\t48 89 e5             \tmov    %rsp,%rbp\n    4e11:\t48 83 ec 30          \tsub    $0x30,%rsp\n    4e15:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    4e19:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    4e1c:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    4e20:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4e24:\t48 89 c6             \tmov    %rax,%rsi\n    4e27:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4e2c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4e31:\te8 00 00 00 00       \tcallq  4e36 <pdf_debug_indent+0x29>\n    4e36:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    4e3d:\teb 0e                \tjmp    4e4d <pdf_debug_indent+0x40>\n    4e3f:\tbf 09 00 00 00       \tmov    $0x9,%edi\n    4e44:\te8 00 00 00 00       \tcallq  4e49 <pdf_debug_indent+0x3c>\n    4e49:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    4e4d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    4e50:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n    4e53:\t7c ea                \tjl     4e3f <pdf_debug_indent+0x32>\n    4e55:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4e59:\t48 89 c6             \tmov    %rax,%rsi\n    4e5c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4e61:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4e66:\te8 00 00 00 00       \tcallq  4e6b <pdf_debug_indent+0x5e>\n    4e6b:\t90                   \tnop\n    4e6c:\tc9                   \tleaveq \n    4e6d:\tc3                   \tretq   ", "code_s": "int __fastcall pdf_debug_indent(const char *a1, int a2, const char *a3) {\n  int <span class=\"supfact\">i</span>;\n  printf(String, a1);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < a2; ++<span class=\"supfact\">i</span>)\n    putchar(Number);\n  return printf(String, a3);\n}", "code_t": "void __cdecl pdf_debug_indent(char *prefix, int level, char *suffix) {\n  int <span class=\"supfact\">i</span>;\n  printf(String, prefix);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < level;\n       ++<span class=\"supfact\">i</span>)\n    putchar(Number);\n  printf(String, suffix);\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "khuedoan98", "repo_name": "st", "path": "khuedoan98/st/99f7f1f6ff1706ba581b706c1a991facf8b4d0eab0e198d20f2913ed51bf1601", "path_in_repo": "khuedoan98/st//st", "objdump": "0000000000405fc2 <kscrollup>:\n  405fc2:\t55                   \tpush   %rbp\n  405fc3:\t48 89 e5             \tmov    %rsp,%rbp\n  405fc6:\t48 83 ec 20          \tsub    $0x20,%rsp\n  405fca:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  405fce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405fd2:\t8b 00                \tmov    (%rax),%eax\n  405fd4:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  405fd7:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  405fdb:\t79 09                \tjns    405fe6 <kscrollup+0x24>\n  405fdd:\t8b 05 dd 1d 01 00    \tmov    0x11ddd(%rip),%eax        # 417dc0 <term>\n  405fe3:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  405fe6:\t8b 15 70 5c 01 00    \tmov    0x15c70(%rip),%edx        # 41bc5c <term+0x3e9c>\n  405fec:\tb8 d0 07 00 00       \tmov    $0x7d0,%eax\n  405ff1:\t2b 45 fc             \tsub    -0x4(%rbp),%eax\n  405ff4:\t39 c2                \tcmp    %eax,%edx\n  405ff6:\t7f 25                \tjg     40601d <kscrollup+0x5b>\n  405ff8:\t8b 15 5e 5c 01 00    \tmov    0x15c5e(%rip),%edx        # 41bc5c <term+0x3e9c>\n  405ffe:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  406001:\t01 d0                \tadd    %edx,%eax\n  406003:\t89 05 53 5c 01 00    \tmov    %eax,0x15c53(%rip)        # 41bc5c <term+0x3e9c>\n  406009:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40600c:\t89 c6                \tmov    %eax,%esi\n  40600e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  406013:\te8 96 03 00 00       \tcallq  4063ae <selscroll>\n  406018:\te8 26 fc ff ff       \tcallq  405c43 <tfulldirt>\n  40601d:\t90                   \tnop\n  40601e:\tc9                   \tleaveq \n  40601f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall kscrollup(unsigned int *a1) {\n  __int64 result;\n  unsigned int <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = *a1;\n  if ((*a1 & Number) != Number)\n    <span class=\"supfact\">v2</span> += term;\n  result = Number - <span class=\"supfact\">v2</span>;\n  if (dword_41BC5C <= (int)result) {\n    dword_41BC5C += <span class=\"supfact\">v2</span>;\n    selscroll(Number L, <span class=\"supfact\">v2</span>);\n    result = tfulldirt();\n  }\n  return result;\n}", "code_t": "void __cdecl kscrollup(const Arg *a) {\n  int <span class=\"supfact\">n</span>;\n  <span class=\"supfact\">n</span> = a->i;\n  if (a->i < Number)\n    <span class=\"supfact\">n</span> += term.row;\n  if (term.scr <= Number - <span class=\"supfact\">n</span>) {\n    term.scr += <span class=\"supfact\">n</span>;\n    selscroll(Number, <span class=\"supfact\">n</span>);\n    tfulldirt();\n  }\n}", "var": [{"name": "v2", "type": "int", "ref_name": "n", "ref_type": "int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "FireLord", "repo_name": "android_kernel_lenovo_passion", "path": "FireLord/android_kernel_lenovo_passion/884c8e784a0c83b5694a2bd990e6e2879ffcec28742e86fddaf45b6500338ab4", "path_in_repo": "FireLord/android_kernel_lenovo_passion/tools/power/cpupower/cpupower", "objdump": "00000000004055ec <amd_fam14h_start>:\n  4055ec:\t55                   \tpush   %rbp\n  4055ed:\t48 89 e5             \tmov    %rsp,%rbp\n  4055f0:\t48 83 ec 10          \tsub    $0x10,%rsp\n  4055f4:\tbe 70 26 41 00       \tmov    $0x412670,%esi\n  4055f9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4055fe:\te8 9d cd ff ff       \tcallq  4023a0 <clock_gettime@plt>\n  405603:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40560a:\teb 42                \tjmp    40564e <amd_fam14h_start+0x62>\n  40560c:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  405613:\teb 2a                \tjmp    40563f <amd_fam14h_start+0x53>\n  405615:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n  405618:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40561b:\t48 63 d0             \tmovslq %eax,%rdx\n  40561e:\t48 89 d0             \tmov    %rdx,%rax\n  405621:\t48 01 c0             \tadd    %rax,%rax\n  405624:\t48 01 d0             \tadd    %rdx,%rax\n  405627:\t48 c1 e0 05          \tshl    $0x5,%rax\n  40562b:\t48 05 00 17 41 00    \tadd    $0x411700,%rax\n  405631:\t89 ce                \tmov    %ecx,%esi\n  405633:\t48 89 c7             \tmov    %rax,%rdi\n  405636:\te8 4e fa ff ff       \tcallq  405089 <amd_fam14h_init>\n  40563b:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  40563f:\t8b 05 17 d0 00 00    \tmov    0xd017(%rip),%eax        # 41265c <cpu_count>\n  405645:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n  405648:\t7c cb                \tjl     405615 <amd_fam14h_start+0x29>\n  40564a:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40564e:\t83 7d fc 03          \tcmpl   $0x3,-0x4(%rbp)\n  405652:\t7e b8                \tjle    40560c <amd_fam14h_start+0x20>\n  405654:\tbe 60 26 41 00       \tmov    $0x412660,%esi\n  405659:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40565e:\te8 3d cd ff ff       \tcallq  4023a0 <clock_gettime@plt>\n  405663:\t48 8b 05 f6 cf 00 00 \tmov    0xcff6(%rip),%rax        # 412660 <dbg_time>\n  40566a:\t48 8b 15 f7 cf 00 00 \tmov    0xcff7(%rip),%rdx        # 412668 <dbg_time+0x8>\n  405671:\t48 8b 3d f8 cf 00 00 \tmov    0xcff8(%rip),%rdi        # 412670 <start_time>\n  405678:\t48 8b 35 f9 cf 00 00 \tmov    0xcff9(%rip),%rsi        # 412678 <start_time+0x8>\n  40567f:\t48 89 d1             \tmov    %rdx,%rcx\n  405682:\t48 89 c2             \tmov    %rax,%rdx\n  405685:\te8 71 17 00 00       \tcallq  406dfb <timespec_diff_us>\n  40568a:\t48 89 05 ef cf 00 00 \tmov    %rax,0xcfef(%rip)        # 412680 <dbg_timediff>\n  405691:\t8b 05 05 d0 00 00    \tmov    0xd005(%rip),%eax        # 41269c <be_verbose>\n  405697:\t85 c0                \ttest   %eax,%eax\n  405699:\t74 28                \tje     4056c3 <amd_fam14h_start+0xd7>\n  40569b:\t48 8b 15 de cf 00 00 \tmov    0xcfde(%rip),%rdx        # 412680 <dbg_timediff>\n  4056a2:\t48 8b 05 37 c9 00 00 \tmov    0xc937(%rip),%rax        # 411fe0 <stderr@@GLIBC_2.2.5>\n  4056a9:\t48 89 d1             \tmov    %rdx,%rcx\n  4056ac:\tba b0 c7 40 00       \tmov    $0x40c7b0,%edx\n  4056b1:\tbe 90 c6 40 00       \tmov    $0x40c690,%esi\n  4056b6:\t48 89 c7             \tmov    %rax,%rdi\n  4056b9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4056be:\te8 dd cb ff ff       \tcallq  4022a0 <fprintf@plt>\n  4056c3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4056c8:\tc9                   \tleaveq \n  4056c9:\tc3                   \tretq   ", "code_s": "__int64 amd_fam14h_start() {\n  signed int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  clock_gettime(Number, &start_time);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < cpu_count;\n         ++<span class=\"supfact\">j</span>)\n      amd_fam14h_init((int *)(Number L * <span class=\"supfact\">i</span> + Number),\n                      <span class=\"supfact\">j</span>);\n  }\n  clock_gettime(Number, &dbg_time);\n  dbg_timediff = timespec_diff_us(start_time.tv_sec, start_time.tv_nsec,\n                                  dbg_time.tv_sec, dbg_time.tv_nsec);\n  if (be_verbose)\n    fprintf(stderr, String, String, dbg_timediff);\n  return Number L;\n}", "code_t": "int __cdecl amd_fam14h_start() {\n  int <span class=\"supfact\">cpu</span>;\n  int <span class=\"supfact\">num</span>;\n  clock_gettime(Number, &start_time);\n  for (<span class=\"supfact\">num</span> = Number; <span class=\"supfact\">num</span> <= Number;\n       ++<span class=\"supfact\">num</span>) {\n    for (<span class=\"supfact\">cpu</span> = Number; <span class=\"supfact\">cpu</span> < cpu_count;\n         ++<span class=\"supfact\">cpu</span>)\n      amd_fam14h_init((cstate_t *)(Number L * <span class=\"supfact\">num</span> + Number),\n                      <span class=\"supfact\">cpu</span>);\n  }\n  clock_gettime(Number, &dbg_time);\n  dbg_timediff = timespec_diff_us(start_time, dbg_time);\n  if (be_verbose)\n    fprintf(stderr, String, String, dbg_timediff);\n  return Number;\n}", "var": [{"name": "i", "type": "int", "ref_name": "num", "ref_type": "int"}, {"name": "j", "type": "int", "ref_name": "cpu", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "nstroustrup", "repo_name": "lifespan", "path": "nstroustrup/lifespan/d1ffc5bcb1c669b814b8f93a5fea183f8e14d0b0134ee3bbb70a98b66395aa89", "path_in_repo": "nstroustrup/lifespan/external_libraries/tinyxml/xmltest.o", "objdump": "0000000000000000 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 81 ec b8 01 00 00 \tsub    $0x1b8,%rsp\n   c:\t48 89 bd 58 fe ff ff \tmov    %rdi,-0x1a8(%rbp)\n  13:\t48 89 b5 50 fe ff ff \tmov    %rsi,-0x1b0(%rbp)\n  1a:\t48 89 95 48 fe ff ff \tmov    %rdx,-0x1b8(%rbp)\n  21:\t48 8b 85 58 fe ff ff \tmov    -0x1a8(%rbp),%rax\n  28:\t48 8d 50 68          \tlea    0x68(%rax),%rdx\n  2c:\t48 8b 85 50 fe ff ff \tmov    -0x1b0(%rbp),%rax\n  33:\t48 89 c6             \tmov    %rax,%rsi\n  36:\t48 89 d7             \tmov    %rdx,%rdi\n  39:\te8 00 00 00 00       \tcallq  3e <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0x3e>\n  3e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  42:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  47:\t75 0a                \tjne    53 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0x53>\n  49:\tbb 01 00 00 00       \tmov    $0x1,%ebx\n  4e:\te9 82 00 00 00       \tjmpq   d5 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0xd5>\n  53:\tbe 08 00 00 00       \tmov    $0x8,%esi\n  58:\tbf 10 00 00 00       \tmov    $0x10,%edi\n  5d:\te8 00 00 00 00       \tcallq  62 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0x62>\n  62:\t89 c3                \tmov    %eax,%ebx\n  64:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  68:\t48 89 c7             \tmov    %rax,%rdi\n  6b:\te8 00 00 00 00       \tcallq  70 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0x70>\n  70:\t48 89 c1             \tmov    %rax,%rcx\n  73:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n  7a:\t89 da                \tmov    %ebx,%edx\n  7c:\t48 89 ce             \tmov    %rcx,%rsi\n  7f:\t48 89 c7             \tmov    %rax,%rdi\n  82:\te8 00 00 00 00       \tcallq  87 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0x87>\n  87:\t48 8b 95 48 fe ff ff \tmov    -0x1b8(%rbp),%rdx\n  8e:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n  95:\t48 89 d6             \tmov    %rdx,%rsi\n  98:\t48 89 c7             \tmov    %rax,%rdi\n  9b:\te8 00 00 00 00       \tcallq  a0 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0xa0>\n  a0:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n  a7:\t48 83 e8 80          \tsub    $0xffffffffffffff80,%rax\n  ab:\t48 89 c7             \tmov    %rax,%rdi\n  ae:\te8 00 00 00 00       \tcallq  b3 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0xb3>\n  b3:\t83 f0 01             \txor    $0x1,%eax\n  b6:\t84 c0                \ttest   %al,%al\n  b8:\t74 07                \tje     c1 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0xc1>\n  ba:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n  bf:\teb 05                \tjmp    c6 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0xc6>\n  c1:\tbb 02 00 00 00       \tmov    $0x2,%ebx\n  c6:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n  cd:\t48 89 c7             \tmov    %rax,%rdi\n  d0:\te8 00 00 00 00       \tcallq  d5 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0xd5>\n  d5:\t89 d8                \tmov    %ebx,%eax\n  d7:\teb 1d                \tjmp    f6 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0xf6>\n  d9:\t48 89 c3             \tmov    %rax,%rbx\n  dc:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n  e3:\t48 89 c7             \tmov    %rax,%rdi\n  e6:\te8 00 00 00 00       \tcallq  eb <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0xeb>\n  eb:\t48 89 d8             \tmov    %rbx,%rax\n  ee:\t48 89 c7             \tmov    %rax,%rdi\n  f1:\te8 00 00 00 00       \tcallq  f6 <_ZNK12TiXmlElement19QueryValueAttributeIiEEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_+0xf6>\n  f6:\t48 81 c4 b8 01 00 00 \tadd    $0x1b8,%rsp\n  fd:\t5b                   \tpop    %rbx\n  fe:\t5d                   \tpop    %rbp\n  ff:\tc3                   \tretq   ", "code_s": "__int64 __fastcall TiXmlElement QueryValueAttribute<int>(__int64 a1, __int64 a2,\n                                                         __int64 a3) {\n  unsigned int v3;\n  unsigned int v4;\n  __int64 v5;\n  char <span class=\"supfact\">v8</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = TiXmlAttributeSet Find(a1 + Number, a2);\n  if (!<span class=\"supfact\">v10</span>)\n    return Number;\n  v4 = std operator|(Number, Number);\n  v5 = TiXmlAttribute ValueStr[abi:cxx11](<span class=\"supfact\">v10</span>);\n  std __cxx11\n      basic_stringstream<char, std char_traits<char>, std allocator<char>>\n          basic_stringstream(<span class=\"supfact\">v8</span>, v5, v4);\n  std istream operator>>(<span class=\"supfact\">v8</span>, a3);\n  if ((unsigned __int8)std ios fail(&<span class=\"supfact\">v9</span>) != Number)\n    v3 = Number;\n  else\n    v3 = Number;\n  std __cxx11 basic_stringstream<\n      char, std char_traits<char>,\n      std allocator<char>> ~basic_stringstream(<span class=\"supfact\">v8</span>);\n  return v3;\n}", "code_t": "int __cdecl TiXmlElement\nQueryValueAttribute<int>(const TiXmlElement *const this, const std string *name,\n                         int *outValue) {\n  int v3;\n  std _Ios_Openmode v4;\n  const std string *v5;\n  char <span class=\"supfact\">v8</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>;\n  const TiXmlAttribute *<span class=\"supfact\">node</span>;\n  <span class=\"supfact\">node</span> = (const TiXmlAttribute *)TiXmlAttributeSet Find(\n      (char *)this + Number, name);\n  if (!<span class=\"supfact\">node</span>)\n    return Number;\n  v4 = std operator|(_S_out, _S_in);\n  v5 = TiXmlAttribute ValueStr[abi:cxx11](<span class=\"supfact\">node</span>);\n  std __cxx11\n      basic_stringstream<char, std char_traits<char>, std allocator<char>>\n          basic_stringstream(<span class=\"supfact\">v8</span>, v5, (unsigned int)v4);\n  std istream operator>>(<span class=\"supfact\">v8</span>, outValue);\n  if ((unsigned __int8)std ios fail(&<span class=\"supfact\">v9</span>) != Number)\n    v3 = Number;\n  else\n    v3 = Number;\n  std __cxx11 basic_stringstream<\n      char, std char_traits<char>,\n      std allocator<char>> ~basic_stringstream(<span class=\"supfact\">v8</span>);\n  return v3;\n}", "var": [{"name": "v10", "type": "__int64", "ref_name": "node", "ref_type": "const TiXmlAttribute *"}, {"name": "v9", "type": "__int64", "ref_name": "v9", "ref_type": "__int64"}, {"name": "v8", "type": "char[144]", "ref_name": "v8", "ref_type": "char[128]"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "WildfireDEV", "repo_name": "s6", "path": "WildfireDEV/s6/8842ad6e55e8912aca59fb8b107a9124b9c8d2dc52e659cce9581ea4b8078d2a", "path_in_repo": "WildfireDEV/s6/tools/perf/util/header.o", "objdump": "0000000000007a3c <perf_event__process_attr>:\n    7a3c:\t55                   \tpush   %rbp\n    7a3d:\t48 89 e5             \tmov    %rsp,%rbp\n    7a40:\t48 83 ec 40          \tsub    $0x40,%rsp\n    7a44:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    7a48:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    7a4c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    7a53:\t00 00 \n    7a55:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    7a59:\t31 c0                \txor    %eax,%eax\n    7a5b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    7a5f:\t48 8b 00             \tmov    (%rax),%rax\n    7a62:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    7a66:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    7a6b:\t75 25                \tjne    7a92 <perf_event__process_attr+0x56>\n    7a6d:\te8 00 00 00 00       \tcallq  7a72 <perf_event__process_attr+0x36>\n    7a72:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    7a76:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    7a7a:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    7a7e:\t48 89 10             \tmov    %rdx,(%rax)\n    7a81:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    7a86:\t75 0a                \tjne    7a92 <perf_event__process_attr+0x56>\n    7a88:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    7a8d:\te9 c5 00 00 00       \tjmpq   7b57 <perf_event__process_attr+0x11b>\n    7a92:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7a96:\t8b 80 10 08 00 00    \tmov    0x810(%rax),%eax\n    7a9c:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    7aa0:\t48 83 c2 08          \tadd    $0x8,%rdx\n    7aa4:\t89 c6                \tmov    %eax,%esi\n    7aa6:\t48 89 d7             \tmov    %rdx,%rdi\n    7aa9:\te8 00 00 00 00       \tcallq  7aae <perf_event__process_attr+0x72>\n    7aae:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    7ab2:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    7ab7:\t75 0a                \tjne    7ac3 <perf_event__process_attr+0x87>\n    7ab9:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    7abe:\te9 94 00 00 00       \tjmpq   7b57 <perf_event__process_attr+0x11b>\n    7ac3:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    7ac7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7acb:\t48 89 d6             \tmov    %rdx,%rsi\n    7ace:\t48 89 c7             \tmov    %rax,%rdi\n    7ad1:\te8 00 00 00 00       \tcallq  7ad6 <perf_event__process_attr+0x9a>\n    7ad6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    7ada:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n    7ade:\t0f b7 c0             \tmovzwl %ax,%eax\n    7ae1:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    7ae4:\t83 6d e0 68          \tsubl   $0x68,-0x20(%rbp)\n    7ae8:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n    7aeb:\tc1 e8 03             \tshr    $0x3,%eax\n    7aee:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    7af1:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    7af4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    7af8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    7afd:\t48 89 c7             \tmov    %rax,%rdi\n    7b00:\te8 00 00 00 00       \tcallq  7b05 <perf_event__process_attr+0xc9>\n    7b05:\t85 c0                \ttest   %eax,%eax\n    7b07:\t74 07                \tje     7b10 <perf_event__process_attr+0xd4>\n    7b09:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    7b0e:\teb 47                \tjmp    7b57 <perf_event__process_attr+0x11b>\n    7b10:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    7b17:\teb 31                \tjmp    7b4a <perf_event__process_attr+0x10e>\n    7b19:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    7b1d:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    7b20:\t48 83 c2 0c          \tadd    $0xc,%rdx\n    7b24:\t48 8b 4c d0 08       \tmov    0x8(%rax,%rdx,8),%rcx\n    7b29:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    7b2c:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n    7b30:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7b34:\t49 89 c8             \tmov    %rcx,%r8\n    7b37:\t89 d1                \tmov    %edx,%ecx\n    7b39:\tba 00 00 00 00       \tmov    $0x0,%edx\n    7b3e:\t48 89 c7             \tmov    %rax,%rdi\n    7b41:\te8 00 00 00 00       \tcallq  7b46 <perf_event__process_attr+0x10a>\n    7b46:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n    7b4a:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    7b4d:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n    7b50:\t72 c7                \tjb     7b19 <perf_event__process_attr+0xdd>\n    7b52:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7b57:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    7b5b:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    7b62:\t00 00 \n    7b64:\t74 05                \tje     7b6b <perf_event__process_attr+0x12f>\n    7b66:\te8 00 00 00 00       \tcallq  7b6b <perf_event__process_attr+0x12f>\n    7b6b:\tc9                   \tleaveq \n    7b6c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_event__process_attr(__int64 a1, __int64 *a2) {\n  unsigned int <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v5</span> = *a2;\n  if (!*a2) {\n    <span class=\"supfact\">v5</span> = perf_evlist__new();\n    *a2 = <span class=\"supfact\">v5</span>;\n    if (!<span class=\"supfact\">v5</span>)\n      return Number L;\n  }\n  <span class=\"supfact\">v6</span> = perf_evsel__new(\n      a1 + Number, *(unsigned int *)(<span class=\"supfact\">v5</span> + Number));\n  if (!<span class=\"supfact\">v6</span>)\n    return Number L;\n  perf_evlist__add(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>);\n  <span class=\"supfact\">v4</span> =\n      ((unsigned int)*(unsigned __int16 *)(a1 + Number) - Number) >> Number;\n  if ((unsigned int)perf_evsel__alloc_id(<span class=\"supfact\">v6</span>, Number L,\n                                         <span class=\"supfact\">v4</span>))\n    return Number L;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v4</span>;\n       ++<span class=\"supfact\">i</span>)\n    perf_evlist__id_add(\n        <span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>, Number L, <span class=\"supfact\">i</span>,\n        *(_QWORD *)(a1 + Number * (<span class=\"supfact\">i</span> + Number L) + Number));\n  return Number L;\n}", "code_t": "int __cdecl perf_event__process_attr(perf_event *event, perf_evlist **pevlist) {\n  u32 <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">n_ids</span>;\n  perf_evlist *<span class=\"supfact\">evlist</span>;\n  perf_evsel *<span class=\"supfact\">evsel</span>;\n  <span class=\"supfact\">evlist</span> = *pevlist;\n  if (!*pevlist) {\n    <span class=\"supfact\">evlist</span> = (perf_evlist *)perf_evlist__new();\n    *pevlist = <span class=\"supfact\">evlist</span>;\n    if (!<span class=\"supfact\">evlist</span>)\n      return Number;\n  }\n  <span class=\"supfact\">evsel</span> = (perf_evsel *)perf_evsel__new(\n      event->sample.array, (unsigned int)<span class=\"supfact\">evlist</span>->nr_entries);\n  if (!<span class=\"supfact\">evsel</span>)\n    return Number;\n  perf_evlist__add(<span class=\"supfact\">evlist</span>, <span class=\"supfact\">evsel</span>);\n  <span class=\"supfact\">n_ids</span> = ((unsigned int)event->header.size - Number) >> Number;\n  if ((unsigned int)perf_evsel__alloc_id(<span class=\"supfact\">evsel</span>, Number L,\n                                         <span class=\"supfact\">n_ids</span>))\n    return Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">n_ids</span>;\n       ++<span class=\"supfact\">i</span>)\n    perf_evlist__id_add(<span class=\"supfact\">evlist</span>, <span class=\"supfact\">evsel</span>, Number L,\n                        <span class=\"supfact\">i</span>,\n                        *(_QWORD *)&event->build_id\n                             .filename[Number * <span class=\"supfact\">i</span> + Number]);\n  return Number;\n}", "var": [{"name": "v6", "type": "perf_evsel *", "ref_name": "evsel", "ref_type": "perf_evsel *"}, {"name": "v5", "type": "perf_evlist *", "ref_name": "evlist", "ref_type": "perf_evlist *"}, {"name": "v4", "type": "unsigned int", "ref_name": "n_ids", "ref_type": "unsigned int"}, {"name": "i", "type": "u_int", "ref_name": "i", "ref_type": "u32"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "Sciumo", "repo_name": "arb", "path": "Sciumo/arb/b1365d570c5410c30b17d387a71b0777ca69c5eef3a7dce9465905f9519ff9a8", "path_in_repo": "Sciumo/arb/GDE/MAFFT/mafft-7.055-with-extensions/core/dndpre2", "objdump": "00000000004034af <cutal>:\n  4034af:\t55                   \tpush   %rbp\n  4034b0:\t48 89 e5             \tmov    %rsp,%rbp\n  4034b3:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4034b7:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  4034ba:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n  4034bd:\t89 4d cc             \tmov    %ecx,-0x34(%rbp)\n  4034c0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4034c4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4034c8:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  4034cf:\t00 \n  4034d0:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  4034d3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4034d6:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  4034d9:\t3b 45 fc             \tcmp    -0x4(%rbp),%eax\n  4034dc:\t75 08                \tjne    4034e6 <cutal+0x37>\n  4034de:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4034e2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4034e6:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  4034e9:\t3b 45 fc             \tcmp    -0x4(%rbp),%eax\n  4034ec:\t74 24                \tje     403512 <cutal+0x63>\n  4034ee:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4034f2:\t0f b6 00             \tmovzbl (%rax),%eax\n  4034f5:\t3c 2d                \tcmp    $0x2d,%al\n  4034f7:\t74 04                \tje     4034fd <cutal+0x4e>\n  4034f9:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4034fd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  403501:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  403505:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n  403509:\t0f b6 00             \tmovzbl (%rax),%eax\n  40350c:\t84 c0                \ttest   %al,%al\n  40350e:\t75 c6                \tjne    4034d6 <cutal+0x27>\n  403510:\teb 01                \tjmp    403513 <cutal+0x64>\n  403512:\t90                   \tnop\n  403513:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  403517:\t48 83 c0 01          \tadd    $0x1,%rax\n  40351b:\tc6 00 00             \tmovb   $0x0,(%rax)\n  40351e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  403522:\t5d                   \tpop    %rbp\n  403523:\tc3                   \tretq   ", "code_s": "_BYTE *__fastcall cutal(_BYTE *a1, int a2, int a3, int a4) {\n  _BYTE *v4;\n  _BYTE *<span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = Number L;\n  do {\n    if (a3 == a2)\n      <span class=\"supfact\">v6</span> = a1;\n    if (a4 == a2)\n      break;\n    if (*a1 != Number)\n      ++a2;\n    v4 = a1++;\n  } while (*v4);\n  a1[Number] = Number;\n  return <span class=\"supfact\">v6</span>;\n}", "code_t": "char *__cdecl cutal(char *al_0, int al_display_start, int start, int end) {\n  char *v4;\n  char *<span class=\"supfact\">val</span>;\n  <span class=\"supfact\">val</span> = Number L;\n  do {\n    if (start == al_display_start)\n      <span class=\"supfact\">val</span> = al_0;\n    if (end == al_display_start)\n      break;\n    if (*al_0 != Number)\n      ++al_display_start;\n    v4 = al_0++;\n  } while (*v4);\n  al_0[Number] = Number;\n  return <span class=\"supfact\">val</span>;\n}", "var": [{"name": "v6", "type": "char *", "ref_name": "val", "ref_type": "char *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "FillipeAs", "repo_name": "Linuuux", "path": "FillipeAs/Linuuux/4fc69a7bf2bcd48e7c2b278e50cc57cf6bcbbaf8eeab39d526a7e38823ab1260", "path_in_repo": "FillipeAs/Linuuux/tools/testing/selftests/bpf/test_lpm_map", "objdump": "00000000004068dd <bpf_map__next>:\n  4068dd:\t55                   \tpush   %rbp\n  4068de:\t48 89 e5             \tmov    %rsp,%rbp\n  4068e1:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4068e5:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4068e9:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  4068ed:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  4068f2:\t74 0d                \tje     406901 <bpf_map__next+0x24>\n  4068f4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4068f8:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  4068fc:\t48 85 c0             \ttest   %rax,%rax\n  4068ff:\t75 0a                \tjne    40690b <bpf_map__next+0x2e>\n  406901:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406906:\te9 e5 00 00 00       \tjmpq   4069f0 <bpf_map__next+0x113>\n  40690b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40690f:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  406913:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  406917:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40691b:\t48 8b 48 58          \tmov    0x58(%rax),%rcx\n  40691f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  406923:\t48 8b 50 60          \tmov    0x60(%rax),%rdx\n  406927:\t48 89 d0             \tmov    %rdx,%rax\n  40692a:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40692e:\t48 29 d0             \tsub    %rdx,%rax\n  406931:\t48 c1 e0 03          \tshl    $0x3,%rax\n  406935:\t48 01 c8             \tadd    %rcx,%rax\n  406938:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40693c:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  406941:\t75 09                \tjne    40694c <bpf_map__next+0x6f>\n  406943:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406947:\te9 a4 00 00 00       \tjmpq   4069f0 <bpf_map__next+0x113>\n  40694c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  406950:\t48 3b 45 f8          \tcmp    -0x8(%rbp),%rax\n  406954:\t72 0a                \tjb     406960 <bpf_map__next+0x83>\n  406956:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40695a:\t48 3b 45 f0          \tcmp    -0x10(%rbp),%rax\n  40695e:\t72 2f                \tjb     40698f <bpf_map__next+0xb2>\n  406960:\t48 8b 05 39 58 00 00 \tmov    0x5839(%rip),%rax        # 40c1a0 <__pr_warning>\n  406967:\t48 85 c0             \ttest   %rax,%rax\n  40696a:\t74 1c                \tje     406988 <bpf_map__next+0xab>\n  40696c:\t48 8b 15 2d 58 00 00 \tmov    0x582d(%rip),%rdx        # 40c1a0 <__pr_warning>\n  406973:\t48 8d 35 2e 2d 00 00 \tlea    0x2d2e(%rip),%rsi        # 4096a8 <__func__.5961>\n  40697a:\t48 8d 3d e7 2c 00 00 \tlea    0x2ce7(%rip),%rdi        # 409668 <__PRETTY_FUNCTION__.4842+0x1038>\n  406981:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406986:\tff d2                \tcallq  *%rdx\n  406988:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40698d:\teb 61                \tjmp    4069f0 <bpf_map__next+0x113>\n  40698f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  406993:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  406997:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  40699b:\t48 29 c2             \tsub    %rax,%rdx\n  40699e:\t48 89 d0             \tmov    %rdx,%rax\n  4069a1:\t48 c1 f8 03          \tsar    $0x3,%rax\n  4069a5:\t48 89 c2             \tmov    %rax,%rdx\n  4069a8:\t48 b8 b7 6d db b6 6d \tmovabs $0x6db6db6db6db6db7,%rax\n  4069af:\tdb b6 6d \n  4069b2:\t48 0f af c2          \timul   %rdx,%rax\n  4069b6:\t48 83 c0 01          \tadd    $0x1,%rax\n  4069ba:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4069be:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4069c2:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n  4069c6:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n  4069ca:\t72 07                \tjb     4069d3 <bpf_map__next+0xf6>\n  4069cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4069d1:\teb 1d                \tjmp    4069f0 <bpf_map__next+0x113>\n  4069d3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4069d7:\t48 8b 48 58          \tmov    0x58(%rax),%rcx\n  4069db:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4069df:\t48 89 d0             \tmov    %rdx,%rax\n  4069e2:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4069e6:\t48 29 d0             \tsub    %rdx,%rax\n  4069e9:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4069ed:\t48 01 c8             \tadd    %rcx,%rax\n  4069f0:\tc9                   \tleaveq \n  4069f1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bpf_map__next(unsigned __int64 a1, __int64 a2) {\n  __int64 result;\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  if (!a2 || !*(_QWORD *)(a2 + Number))\n    return Number L;\n  if (!a1)\n    return *(_QWORD *)(a2 + Number);\n  if (a1 >= *(_QWORD *)(a2 + Number) &&\n      a1 < *(_QWORD *)(a2 + Number) + Number L * *(_QWORD *)(a2 + Number)) {\n    <span class=\"supfact\">v3</span> =\n        Number * ((__int64)(a1 - *(_QWORD *)(a2 + Number)) >> Number) + Number;\n    if (<span class=\"supfact\">v3</span> < *(_QWORD *)(a2 + Number))\n      result = *(_QWORD *)(a2 + Number) + Number * <span class=\"supfact\">v3</span>;\n    else\n      result = Number L;\n  } else {\n    if (_pr_warning)\n      _pr_warning(String, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "bpf_map *__cdecl bpf_map__next(bpf_map *prev, bpf_object *obj) {\n  bpf_map *result;\n  unsigned __int64 <span class=\"supfact\">idx</span>;\n  if (!obj || !obj->maps)\n    return Number L;\n  if (!prev)\n    return obj->maps;\n  if (prev >= obj->maps && prev < &obj->maps[obj->nr_maps]) {\n    <span class=\"supfact\">idx</span> =\n        Number * (((char *)prev - (char *)obj->maps) >> Number) + Number;\n    if (<span class=\"supfact\">idx</span> < obj->nr_maps)\n      result = &obj->maps[<span class=\"supfact\">idx</span>];\n    else\n      result = Number L;\n  } else {\n    if (_pr_warning)\n      _pr_warning(String, String);\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "unsigned __int64", "ref_name": "idx", "ref_type": "unsigned __int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "joncampbell123", "repo_name": "sdlwolf3d-improved", "path": "joncampbell123/sdlwolf3d-improved/f512e012e9aaff9da450ab08aa822aaab3b4f888f75a5773e4b7578db1dafd44", "path_in_repo": "joncampbell123/sdlwolf3d-improved/src/sdlwolf3d", "objdump": "000000000042150c <OPLResetChip>:\n  42150c:\t55                   \tpush   %rbp\n  42150d:\t48 89 e5             \tmov    %rsp,%rbp\n  421510:\t48 83 ec 28          \tsub    $0x28,%rsp\n  421514:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  421518:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42151c:\tc7 40 1c 00 00 00 00 \tmovl   $0x0,0x1c(%rax)\n  421523:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421527:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42152c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  421531:\t48 89 c7             \tmov    %rax,%rdi\n  421534:\te8 e8 f4 ff ff       \tcallq  420a21 <OPLWrite>\n  421539:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42153d:\tba 00 00 00 00       \tmov    $0x0,%edx\n  421542:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  421547:\t48 89 c7             \tmov    %rax,%rdi\n  42154a:\te8 d2 f4 ff ff       \tcallq  420a21 <OPLWrite>\n  42154f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421553:\tba 00 00 00 00       \tmov    $0x0,%edx\n  421558:\tbe 03 00 00 00       \tmov    $0x3,%esi\n  42155d:\t48 89 c7             \tmov    %rax,%rdi\n  421560:\te8 bc f4 ff ff       \tcallq  420a21 <OPLWrite>\n  421565:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421569:\tba 00 00 00 00       \tmov    $0x0,%edx\n  42156e:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  421573:\t48 89 c7             \tmov    %rax,%rdi\n  421576:\te8 a6 f4 ff ff       \tcallq  420a21 <OPLWrite>\n  42157b:\tc7 45 f4 ff 00 00 00 \tmovl   $0xff,-0xc(%rbp)\n  421582:\teb 1a                \tjmp    42159e <OPLResetChip+0x92>\n  421584:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n  421587:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42158b:\tba 00 00 00 00       \tmov    $0x0,%edx\n  421590:\t89 ce                \tmov    %ecx,%esi\n  421592:\t48 89 c7             \tmov    %rax,%rdi\n  421595:\te8 87 f4 ff ff       \tcallq  420a21 <OPLWrite>\n  42159a:\t83 6d f4 01          \tsubl   $0x1,-0xc(%rbp)\n  42159e:\t83 7d f4 1f          \tcmpl   $0x1f,-0xc(%rbp)\n  4215a2:\t7f e0                \tjg     421584 <OPLResetChip+0x78>\n  4215a4:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4215ab:\te9 f1 00 00 00       \tjmpq   4216a1 <OPLResetChip+0x195>\n  4215b0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4215b4:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  4215b8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4215bb:\t48 63 d0             \tmovslq %eax,%rdx\n  4215be:\t48 89 d0             \tmov    %rdx,%rax\n  4215c1:\t48 c1 e0 05          \tshl    $0x5,%rax\n  4215c5:\t48 01 d0             \tadd    %rdx,%rax\n  4215c8:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4215cc:\t48 01 c8             \tadd    %rcx,%rax\n  4215cf:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4215d3:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4215da:\te9 b4 00 00 00       \tjmpq   421693 <OPLResetChip+0x187>\n  4215df:\t48 8b 0d 62 9b 01 00 \tmov    0x19b62(%rip),%rcx        # 43b148 <SIN_TABLE>\n  4215e6:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n  4215ea:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4215ed:\t48 63 d0             \tmovslq %eax,%rdx\n  4215f0:\t48 89 d0             \tmov    %rdx,%rax\n  4215f3:\t48 01 c0             \tadd    %rax,%rax\n  4215f6:\t48 01 d0             \tadd    %rdx,%rax\n  4215f9:\t48 c1 e0 02          \tshl    $0x2,%rax\n  4215fd:\t48 01 d0             \tadd    %rdx,%rax\n  421600:\t48 c1 e0 03          \tshl    $0x3,%rax\n  421604:\t48 01 f0             \tadd    %rsi,%rax\n  421607:\t48 83 c0 60          \tadd    $0x60,%rax\n  42160b:\t48 89 08             \tmov    %rcx,(%rax)\n  42160e:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  421612:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  421615:\t48 63 d0             \tmovslq %eax,%rdx\n  421618:\t48 89 d0             \tmov    %rdx,%rax\n  42161b:\t48 01 c0             \tadd    %rax,%rax\n  42161e:\t48 01 d0             \tadd    %rdx,%rax\n  421621:\t48 c1 e0 02          \tshl    $0x2,%rax\n  421625:\t48 01 d0             \tadd    %rdx,%rax\n  421628:\t48 c1 e0 03          \tshl    $0x3,%rax\n  42162c:\t48 01 c8             \tadd    %rcx,%rax\n  42162f:\t48 83 c0 44          \tadd    $0x44,%rax\n  421633:\tc7 00 00 00 00 20    \tmovl   $0x20000000,(%rax)\n  421639:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  42163d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  421640:\t48 63 d0             \tmovslq %eax,%rdx\n  421643:\t48 89 d0             \tmov    %rdx,%rax\n  421646:\t48 01 c0             \tadd    %rax,%rax\n  421649:\t48 01 d0             \tadd    %rdx,%rax\n  42164c:\t48 c1 e0 02          \tshl    $0x2,%rax\n  421650:\t48 01 d0             \tadd    %rdx,%rax\n  421653:\t48 c1 e0 03          \tshl    $0x3,%rax\n  421657:\t48 01 c8             \tadd    %rcx,%rax\n  42165a:\t48 83 c0 48          \tadd    $0x48,%rax\n  42165e:\tc7 00 01 00 00 20    \tmovl   $0x20000001,(%rax)\n  421664:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  421668:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  42166b:\t48 63 d0             \tmovslq %eax,%rdx\n  42166e:\t48 89 d0             \tmov    %rdx,%rax\n  421671:\t48 01 c0             \tadd    %rax,%rax\n  421674:\t48 01 d0             \tadd    %rdx,%rax\n  421677:\t48 c1 e0 02          \tshl    $0x2,%rax\n  42167b:\t48 01 d0             \tadd    %rdx,%rax\n  42167e:\t48 c1 e0 03          \tshl    $0x3,%rax\n  421682:\t48 01 c8             \tadd    %rcx,%rax\n  421685:\t48 83 c0 4c          \tadd    $0x4c,%rax\n  421689:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  42168f:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  421693:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n  421697:\t0f 8e 42 ff ff ff    \tjle    4215df <OPLResetChip+0xd3>\n  42169d:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4216a1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4216a5:\t8b 40 28             \tmov    0x28(%rax),%eax\n  4216a8:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  4216ab:\t0f 8c ff fe ff ff    \tjl     4215b0 <OPLResetChip+0xa4>\n  4216b1:\t90                   \tnop\n  4216b2:\t90                   \tnop\n  4216b3:\tc9                   \tleaveq \n  4216b4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall OPLResetChip(__int64 a1) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">k</span>;\n  int <span class=\"supfact\">j</span>;\n  *(_DWORD *)(a1 + Number) = Number;\n  OPLWrite(a1, Number, Number);\n  OPLWrite(a1, Number, Number);\n  OPLWrite(a1, Number, Number);\n  OPLWrite(a1, Number, Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> > Number;\n       --<span class=\"supfact\">i</span>)\n    OPLWrite(a1, <span class=\"supfact\">i</span>, Number);\n  for (<span class=\"supfact\">j</span> = Number;; ++<span class=\"supfact\">j</span>) {\n    result = *(unsigned int *)(a1 + Number);\n    if (<span class=\"supfact\">j</span> >= (int)result)\n      break;\n    <span class=\"supfact\">v2</span> =\n        *(_QWORD *)(a1 + Number) + Number L * <span class=\"supfact\">j</span>;\n    for (<span class=\"supfact\">k</span> = Number; <span class=\"supfact\">k</span> <= Number;\n         ++<span class=\"supfact\">k</span>) {\n      *(_QWORD *)(<span class=\"supfact\">v2</span> + Number L * <span class=\"supfact\">k</span> + Number) =\n          SIN_TABLE;\n      *(_DWORD *)(<span class=\"supfact\">v2</span> + Number L * <span class=\"supfact\">k</span> + Number) =\n          Number;\n      *(_DWORD *)(<span class=\"supfact\">v2</span> + Number L * <span class=\"supfact\">k</span> + Number) =\n          Number;\n      *(_DWORD *)(<span class=\"supfact\">v2</span> + Number L * <span class=\"supfact\">k</span> + Number) =\n          Number;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl OPLResetChip(FM_OPL *OPL) {\n  OPL_CH *<span class=\"supfact\">CH_0</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">c</span>;\n  OPL->mode = Number;\n  OPLWrite(OPL, Number, Number);\n  OPLWrite(OPL, Number, Number);\n  OPLWrite(OPL, Number, Number);\n  OPLWrite(OPL, Number, Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> > Number;\n       --<span class=\"supfact\">i</span>)\n    OPLWrite(OPL, <span class=\"supfact\">i</span>, Number);\n  for (<span class=\"supfact\">c</span> = Number; <span class=\"supfact\">c</span> < OPL->max_ch;\n       ++<span class=\"supfact\">c</span>) {\n    <span class=\"supfact\">CH_0</span> = &OPL->P_CH[<span class=\"supfact\">c</span>];\n    for (<span class=\"supfact\">s</span> = Number; <span class=\"supfact\">s</span> <= Number;\n         ++<span class=\"supfact\">s</span>) {\n      <span class=\"supfact\">CH_0</span>->SLOT[<span class=\"supfact\">s</span>].wavetable = SIN_TABLE;\n      <span class=\"supfact\">CH_0</span>->SLOT[<span class=\"supfact\">s</span>].evc = Number;\n      <span class=\"supfact\">CH_0</span>->SLOT[<span class=\"supfact\">s</span>].eve = Number;\n      <span class=\"supfact\">CH_0</span>->SLOT[<span class=\"supfact\">s</span>].evs = Number;\n    }\n  }\n}", "var": [{"name": "j", "type": "int", "ref_name": "c", "ref_type": "int"}, {"name": "k", "type": "int", "ref_name": "s", "ref_type": "int"}, {"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v2", "type": "OPL_CH *", "ref_name": "CH_0", "ref_type": "OPL_CH *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "FireLeaf", "repo_name": "XGame", "path": "FireLeaf/XGame/eba57a087ba7e8caca6a8b389986fa7b899992931cf742d0a98bc692f92cf0d5", "path_in_repo": "FireLeaf/XGame/XGame/XSrc/3-Party/openssl/test/destest", "objdump": "0000000000402b3b <pt>:\n  402b3b:\t55                   \tpush   %rbp\n  402b3c:\t48 89 e5             \tmov    %rsp,%rbp\n  402b3f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  402b43:\t8b 05 c7 fc 00 00    \tmov    0xfcc7(%rip),%eax        # 412810 <bnum.4912>\n  402b49:\t8d 50 01             \tlea    0x1(%rax),%edx\n  402b4c:\t89 15 be fc 00 00    \tmov    %edx,0xfcbe(%rip)        # 412810 <bnum.4912>\n  402b52:\t48 63 d0             \tmovslq %eax,%rdx\n  402b55:\t48 89 d0             \tmov    %rdx,%rax\n  402b58:\t48 c1 e0 02          \tshl    $0x2,%rax\n  402b5c:\t48 01 d0             \tadd    %rdx,%rax\n  402b5f:\t48 c1 e0 02          \tshl    $0x2,%rax\n  402b63:\t48 05 20 28 41 00    \tadd    $0x412820,%rax\n  402b69:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  402b6d:\t8b 0d 9d fc 00 00    \tmov    0xfc9d(%rip),%ecx        # 412810 <bnum.4912>\n  402b73:\t48 63 c1             \tmovslq %ecx,%rax\n  402b76:\t48 69 c0 67 66 66 66 \timul   $0x66666667,%rax,%rax\n  402b7d:\t48 c1 e8 20          \tshr    $0x20,%rax\n  402b81:\t89 c2                \tmov    %eax,%edx\n  402b83:\tc1 fa 02             \tsar    $0x2,%edx\n  402b86:\t89 c8                \tmov    %ecx,%eax\n  402b88:\tc1 f8 1f             \tsar    $0x1f,%eax\n  402b8b:\t29 c2                \tsub    %eax,%edx\n  402b8d:\t89 d0                \tmov    %edx,%eax\n  402b8f:\tc1 e0 02             \tshl    $0x2,%eax\n  402b92:\t01 d0                \tadd    %edx,%eax\n  402b94:\t01 c0                \tadd    %eax,%eax\n  402b96:\t29 c1                \tsub    %eax,%ecx\n  402b98:\t89 ca                \tmov    %ecx,%edx\n  402b9a:\t89 15 70 fc 00 00    \tmov    %edx,0xfc70(%rip)        # 412810 <bnum.4912>\n  402ba0:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  402ba7:\teb 73                \tjmp    402c1c <pt+0xe1>\n  402ba9:\t48 8b 05 38 fb 00 00 \tmov    0xfb38(%rip),%rax        # 4126e8 <f.4915>\n  402bb0:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  402bb3:\t48 63 ca             \tmovslq %edx,%rcx\n  402bb6:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  402bba:\t48 01 ca             \tadd    %rcx,%rdx\n  402bbd:\t0f b6 12             \tmovzbl (%rdx),%edx\n  402bc0:\tc0 ea 04             \tshr    $0x4,%dl\n  402bc3:\t0f b6 d2             \tmovzbl %dl,%edx\n  402bc6:\t83 e2 0f             \tand    $0xf,%edx\n  402bc9:\t48 01 d0             \tadd    %rdx,%rax\n  402bcc:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  402bcf:\t01 d2                \tadd    %edx,%edx\n  402bd1:\t48 63 ca             \tmovslq %edx,%rcx\n  402bd4:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  402bd8:\t48 01 ca             \tadd    %rcx,%rdx\n  402bdb:\t0f b6 00             \tmovzbl (%rax),%eax\n  402bde:\t88 02                \tmov    %al,(%rdx)\n  402be0:\t48 8b 05 01 fb 00 00 \tmov    0xfb01(%rip),%rax        # 4126e8 <f.4915>\n  402be7:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  402bea:\t48 63 ca             \tmovslq %edx,%rcx\n  402bed:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  402bf1:\t48 01 ca             \tadd    %rcx,%rdx\n  402bf4:\t0f b6 12             \tmovzbl (%rdx),%edx\n  402bf7:\t0f b6 d2             \tmovzbl %dl,%edx\n  402bfa:\t83 e2 0f             \tand    $0xf,%edx\n  402bfd:\t48 01 d0             \tadd    %rdx,%rax\n  402c00:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  402c03:\t01 d2                \tadd    %edx,%edx\n  402c05:\t48 63 d2             \tmovslq %edx,%rdx\n  402c08:\t48 8d 4a 01          \tlea    0x1(%rdx),%rcx\n  402c0c:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  402c10:\t48 01 ca             \tadd    %rcx,%rdx\n  402c13:\t0f b6 00             \tmovzbl (%rax),%eax\n  402c16:\t88 02                \tmov    %al,(%rdx)\n  402c18:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  402c1c:\t83 7d fc 07          \tcmpl   $0x7,-0x4(%rbp)\n  402c20:\t7e 87                \tjle    402ba9 <pt+0x6e>\n  402c22:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402c26:\t48 83 c0 10          \tadd    $0x10,%rax\n  402c2a:\tc6 00 00             \tmovb   $0x0,(%rax)\n  402c2d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402c31:\t5d                   \tpop    %rbp\n  402c32:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pt(__int64 a1) {\n  int v1;\n  int <span class=\"supfact\">i</span>;\n  v1 = bnum_4912++;\n  bnum_4912 %= Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    bufs_4911[Number * v1 + Number * <span class=\"supfact\">i</span>] =\n        f_4915[(*(_BYTE *)(<span class=\"supfact\">i</span> + a1) >> Number) & Number];\n    bufs_4911[Number * v1 + Number + Number * <span class=\"supfact\">i</span>] =\n        f_4915[*(_BYTE *)(<span class=\"supfact\">i</span> + a1) & Number];\n  }\n  bufs_4911[Number * v1 + Number] = Number;\n  return Number L * v1 + Number;\n}", "code_t": "char *__cdecl pt(unsigned __int8 *p) {\n  int v1;\n  int <span class=\"supfact\">i</span>;\n  v1 = bnum_4912++;\n  bnum_4912 %= Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    bufs_4911[Number * v1 + Number * <span class=\"supfact\">i</span>] =\n        f_4915[(p[<span class=\"supfact\">i</span>] >> Number) & Number];\n    bufs_4911[Number * v1 + Number + Number * <span class=\"supfact\">i</span>] =\n        f_4915[p[<span class=\"supfact\">i</span>] & Number];\n  }\n  bufs_4911[Number * v1 + Number] = Number;\n  return (char *)(Number L * v1 + Number);\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/eddf4c128d81974d0a44cef786539de6088e3397414c265ffb89dc1463abb496", "path_in_repo": "ftnapps/pkg-sbbs/src/sbbs3/syncview/gcc.linux.exe.debug/syncview", "objdump": "000000000041692f <str_list_read_file>:\n  41692f:\t55                   \tpush   %rbp\n  416930:\t48 89 e5             \tmov    %rsp,%rbp\n  416933:\t48 83 ec 40          \tsub    $0x40,%rsp\n  416937:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  41693b:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  41693f:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  416943:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  41694a:\t00 \n  41694b:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  416950:\t75 08                \tjne    41695a <str_list_read_file+0x2b>\n  416952:\t48 c7 45 c8 00 08 00 \tmovq   $0x800,-0x38(%rbp)\n  416959:\t00 \n  41695a:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  41695f:\t75 24                \tjne    416985 <str_list_read_file+0x56>\n  416961:\te8 a8 f4 ff ff       \tcallq  415e0e <strListInit>\n  416966:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  41696a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41696e:\t48 85 c0             \ttest   %rax,%rax\n  416971:\t75 0a                \tjne    41697d <str_list_read_file+0x4e>\n  416973:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  416978:\te9 ce 00 00 00       \tjmpq   416a4b <str_list_read_file+0x11c>\n  41697d:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  416981:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  416985:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  41698a:\t0f 84 b4 00 00 00    \tje     416a44 <str_list_read_file+0x115>\n  416990:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  416994:\t48 8b 00             \tmov    (%rax),%rax\n  416997:\t48 89 c7             \tmov    %rax,%rdi\n  41699a:\te8 a4 f4 ff ff       \tcallq  415e43 <strListCount>\n  41699f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4169a3:\te9 85 00 00 00       \tjmpq   416a2d <str_list_read_file+0xfe>\n  4169a8:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4169ad:\t75 3f                \tjne    4169ee <str_list_read_file+0xbf>\n  4169af:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4169b3:\t48 83 c0 01          \tadd    $0x1,%rax\n  4169b7:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  4169bb:\tb8 10 00 00 00       \tmov    $0x10,%eax\n  4169c0:\t48 83 e8 01          \tsub    $0x1,%rax\n  4169c4:\t48 01 d0             \tadd    %rdx,%rax\n  4169c7:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  4169cc:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4169d1:\t48 f7 f1             \tdiv    %rcx\n  4169d4:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n  4169d8:\t48 29 c4             \tsub    %rax,%rsp\n  4169db:\t48 89 e0             \tmov    %rsp,%rax\n  4169de:\t48 83 c0 0f          \tadd    $0xf,%rax\n  4169e2:\t48 c1 e8 04          \tshr    $0x4,%rax\n  4169e6:\t48 c1 e0 04          \tshl    $0x4,%rax\n  4169ea:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4169ee:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4169f2:\t83 c0 01             \tadd    $0x1,%eax\n  4169f5:\t89 c1                \tmov    %eax,%ecx\n  4169f7:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4169fb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4169ff:\t89 ce                \tmov    %ecx,%esi\n  416a01:\t48 89 c7             \tmov    %rax,%rdi\n  416a04:\te8 27 c8 fe ff       \tcallq  403230 <fgets@plt>\n  416a09:\t48 85 c0             \ttest   %rax,%rax\n  416a0c:\t74 35                \tje     416a43 <str_list_read_file+0x114>\n  416a0e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  416a12:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  416a16:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n  416a1a:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n  416a1e:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  416a22:\t48 89 c2             \tmov    %rax,%rdx\n  416a25:\t48 89 cf             \tmov    %rcx,%rdi\n  416a28:\te8 eb f8 ff ff       \tcallq  416318 <strListAppend>\n  416a2d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  416a31:\t48 89 c7             \tmov    %rax,%rdi\n  416a34:\te8 37 cb fe ff       \tcallq  403570 <feof@plt>\n  416a39:\t85 c0                \ttest   %eax,%eax\n  416a3b:\t0f 84 67 ff ff ff    \tje     4169a8 <str_list_read_file+0x79>\n  416a41:\teb 01                \tjmp    416a44 <str_list_read_file+0x115>\n  416a43:\t90                   \tnop\n  416a44:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  416a48:\t48 8b 00             \tmov    (%rax),%rax\n  416a4b:\tc9                   \tleaveq \n  416a4c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall str_list_read_file(FILE *a1, __int64 *a2, __int64 a3) {\n  void *v4;\n  __int64 v5;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 *<span class=\"supfact\">v7</span>;\n  FILE *<span class=\"supfact\">stream</span>;\n  _QWORD *<span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  char *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">stream</span> = a1;\n  <span class=\"supfact\">v7</span> = a2;\n  <span class=\"supfact\">v6</span> = a3;\n  <span class=\"supfact\">s</span> = Number L;\n  if (!a3)\n    <span class=\"supfact\">v6</span> = Number L;\n  if (!<span class=\"supfact\">v7</span>) {\n    <span class=\"supfact\">v9</span> = strListInit();\n    if (!<span class=\"supfact\">v9</span>)\n      return Number L;\n    <span class=\"supfact\">v7</span> = (__int64 *)&<span class=\"supfact\">v9</span>;\n  }\n  if (<span class=\"supfact\">stream</span>) {\n    <span class=\"supfact\">v10</span> = strListCount(*<span class=\"supfact\">v7</span>);\n    while (!feof(<span class=\"supfact\">stream</span>)) {\n      if (!<span class=\"supfact\">s</span>) {\n        v4 = alloca(Number * ((<span class=\"supfact\">v6</span> + Number) / Number));\n        <span class=\"supfact\">s</span> =\n            (char *)(Number *\n                     (((unsigned __int64)&<span class=\"supfact\">v6</span> + Number) >>\n                      Number));\n      }\n      if (!fgets(<span class=\"supfact\">s</span>, (int)<span class=\"supfact\">v6</span> + Number,\n                 <span class=\"supfact\">stream</span>))\n        break;\n      v5 = <span class=\"supfact\">v10</span>++;\n      strListAppend(<span class=\"supfact\">v7</span>, <span class=\"supfact\">s</span>, v5);\n    }\n  }\n  return *<span class=\"supfact\">v7</span>;\n}", "code_t": "str_list_t __cdecl str_list_read_file(FILE *fp, str_list_t *lp,\n                                      size_t max_line_len) {\n  void *v4;\n  size_t v5;\n  size_t <span class=\"supfact\">max_line_lena</span>;\n  str_list_t *<span class=\"supfact\">lpa</span>;\n  FILE *<span class=\"supfact\">fpa</span>;\n  str_list_t <span class=\"supfact\">list</span>;\n  size_t <span class=\"supfact\">count</span>;\n  char *<span class=\"supfact\">buf</span>;\n  <span class=\"supfact\">fpa</span> = fp;\n  <span class=\"supfact\">lpa</span> = lp;\n  <span class=\"supfact\">max_line_lena</span> = max_line_len;\n  <span class=\"supfact\">buf</span> = Number L;\n  if (!max_line_len)\n    <span class=\"supfact\">max_line_lena</span> = Number L;\n  if (!<span class=\"supfact\">lpa</span>) {\n    <span class=\"supfact\">list</span> = strListInit();\n    if (!<span class=\"supfact\">list</span>)\n      return Number L;\n    <span class=\"supfact\">lpa</span> = &<span class=\"supfact\">list</span>;\n  }\n  if (<span class=\"supfact\">fpa</span>) {\n    <span class=\"supfact\">count</span> = strListCount(*<span class=\"supfact\">lpa</span>);\n    while (!feof(<span class=\"supfact\">fpa</span>)) {\n      if (!<span class=\"supfact\">buf</span>) {\n        v4 = alloca(Number *\n                    ((<span class=\"supfact\">max_line_lena</span> + Number) / Number));\n        <span class=\"supfact\">buf</span> =\n            (char *)(Number *\n                     (((unsigned __int64)&<span class=\"supfact\">max_line_lena</span> +\n                       Number) >>\n                      Number));\n      }\n      if (!fgets(<span class=\"supfact\">buf</span>,\n                 (int)<span class=\"supfact\">max_line_lena</span> + Number,\n                 <span class=\"supfact\">fpa</span>))\n        break;\n      v5 = <span class=\"supfact\">count</span>++;\n      strListAppend(<span class=\"supfact\">lpa</span>, <span class=\"supfact\">buf</span>, v5);\n    }\n  }\n  return *<span class=\"supfact\">lpa</span>;\n}", "var": [{"name": "s", "type": "char *", "ref_name": "buf", "ref_type": "char *"}, {"name": "v10", "type": "GenericList_0 *", "ref_name": "count", "ref_type": "size_t"}, {"name": "v9", "type": "StackObject_0 *", "ref_name": "list", "ref_type": "str_list_t"}, {"name": "stream", "type": "FILE *", "ref_name": "fpa", "ref_type": "FILE *"}, {"name": "v7", "type": "xmlDocPtr", "ref_name": "lpa", "ref_type": "str_list_t *"}, {"name": "v6", "type": "char *", "ref_name": "max_line_lena", "ref_type": "size_t"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "Huanyu-Light", "repo_name": "IMX6_linux-4.1.15", "path": "Huanyu-Light/IMX6_linux-4.1.15/0cc225b9c293fb4837b535aa31a482fce5e4a0deb1acbd1e40a7e7e18ab3cb09", "path_in_repo": "Huanyu-Light/IMX6_linux-4.1.15/tools/perf/ui/browsers/libperf-in.o", "objdump": "00000000000038d6 <hist_browser__get_folding>:\n    38d6:\t55                   \tpush   %rbp\n    38d7:\t48 89 e5             \tmov    %rsp,%rbp\n    38da:\t48 83 ec 40          \tsub    $0x40,%rsp\n    38de:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    38e2:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    38e9:\t00 00 \n    38eb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    38ef:\t31 c0                \txor    %eax,%eax\n    38f1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    38f5:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    38f9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    38fd:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    3904:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    3908:\t48 83 c0 18          \tadd    $0x18,%rax\n    390c:\t48 89 c7             \tmov    %rax,%rdi\n    390f:\te8 00 00 00 00       \tcallq  3914 <hist_browser__get_folding+0x3e>\n    3914:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    3918:\teb 44                \tjmp    395e <hist_browser__get_folding+0x88>\n    391a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    391e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    3922:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3926:\t48 83 e8 18          \tsub    $0x18,%rax\n    392a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    392e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3932:\t0f b6 80 90 00 00 00 \tmovzbl 0x90(%rax),%eax\n    3939:\t84 c0                \ttest   %al,%al\n    393b:\t74 11                \tje     394e <hist_browser__get_folding+0x78>\n    393d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3941:\t0f b7 80 e4 00 00 00 \tmovzwl 0xe4(%rax),%eax\n    3948:\t0f b7 c0             \tmovzwl %ax,%eax\n    394b:\t01 45 d4             \tadd    %eax,-0x2c(%rbp)\n    394e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3952:\t48 89 c7             \tmov    %rax,%rdi\n    3955:\te8 00 00 00 00       \tcallq  395a <hist_browser__get_folding+0x84>\n    395a:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    395e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    3962:\t8b 90 98 00 00 00    \tmov    0x98(%rax),%edx\n    3968:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    396c:\t66 0f 6e c2          \tmovd   %edx,%xmm0\n    3970:\t48 89 c7             \tmov    %rax,%rdi\n    3973:\te8 1c 2b 00 00       \tcallq  6494 <hists__filter_entries>\n    3978:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    397c:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    3981:\t75 97                \tjne    391a <hist_browser__get_folding+0x44>\n    3983:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    3986:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    398a:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    3991:\t00 00 \n    3993:\t74 05                \tje     399a <hist_browser__get_folding+0xc4>\n    3995:\te8 00 00 00 00       \tcallq  399a <hist_browser__get_folding+0xc4>\n    399a:\tc9                   \tleaveq \n    399b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hist_browser__get_folding(__int64 a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  __int64 i;\n  __int64 v4;\n  <span class=\"supfact\">v2</span> = Number;\n  for (i = rb_first(*(_QWORD *)(a1 + Number) + Number L);; i = rb_next(v4)) {\n    v4 = hists__filter_entries(\n        i, *(double *)_mm_cvtsi32_si128(*(_DWORD *)(a1 + Number)).m128i_i64);\n    if (!v4)\n      break;\n    if (*(_BYTE *)(v4 - Number + Number))\n      <span class=\"supfact\">v2</span> += *(unsigned __int16 *)(v4 - Number + Number);\n  }\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "int __cdecl hist_browser__get_folding(hist_browser *browser) {\n  int <span class=\"supfact\">unfolded_rows</span>;\n  rb_node *nd;\n  rb_node *nda;\n  <span class=\"supfact\">unfolded_rows</span> = Number;\n  for (nd = (rb_node *)rb_first(&browser->hists->entries);;\n       nd = (rb_node *)rb_next(nda)) {\n    nda = hists__filter_entries(nd, browser->min_pcnt);\n    if (!nda)\n      break;\n    if (LOBYTE(nda[Number].__rb_parent_color))\n      <span class=\"supfact\">unfolded_rows</span> += WORD2(nda[Number].rb_right);\n  }\n  return <span class=\"supfact\">unfolded_rows</span>;\n}", "var": [{"name": "v2", "type": "int", "ref_name": "unfolded_rows", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "xurubin", "repo_name": "wl530g-mini", "path": "xurubin/wl530g-mini/cbf1f1aaf82fc3d58684c8f62d8ad5cb42060d9d3b81017e222910243ad073f0", "path_in_repo": "xurubin/wl530g-mini/Src/uClinux-dist/user/wget/src/wget", "objdump": "00000000004042db <acceptport>:\n  4042db:\t55                   \tpush   %rbp\n  4042dc:\t48 89 e5             \tmov    %rsp,%rbp\n  4042df:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4042e3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4042e7:\tc7 45 fc 10 00 00 00 \tmovl   $0x10,-0x4(%rbp)\n  4042ee:\t48 8b 05 53 93 02 00 \tmov    0x29353(%rip),%rax        # 42d648 <opt+0x148>\n  4042f5:\t89 c1                \tmov    %eax,%ecx\n  4042f7:\t8b 05 13 30 02 00    \tmov    0x23013(%rip),%eax        # 427310 <msock>\n  4042fd:\tba 00 00 00 00       \tmov    $0x0,%edx\n  404302:\t89 ce                \tmov    %ecx,%esi\n  404304:\t89 c7                \tmov    %eax,%edi\n  404306:\te8 69 fe ff ff       \tcallq  404174 <select_fd>\n  40430b:\t85 c0                \ttest   %eax,%eax\n  40430d:\t7f 07                \tjg     404316 <acceptport+0x3b>\n  40430f:\tb8 0b 00 00 00       \tmov    $0xb,%eax\n  404314:\teb 37                \tjmp    40434d <acceptport+0x72>\n  404316:\t48 8b 0d 33 65 02 00 \tmov    0x26533(%rip),%rcx        # 42a850 <addr>\n  40431d:\t8b 05 ed 2f 02 00    \tmov    0x22fed(%rip),%eax        # 427310 <msock>\n  404323:\t48 8d 55 fc          \tlea    -0x4(%rbp),%rdx\n  404327:\t48 89 ce             \tmov    %rcx,%rsi\n  40432a:\t89 c7                \tmov    %eax,%edi\n  40432c:\te8 df e1 ff ff       \tcallq  402510 <accept@plt>\n  404331:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  404335:\t89 02                \tmov    %eax,(%rdx)\n  404337:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40433b:\t8b 00                \tmov    (%rax),%eax\n  40433d:\t85 c0                \ttest   %eax,%eax\n  40433f:\t79 07                \tjns    404348 <acceptport+0x6d>\n  404341:\tb8 0b 00 00 00       \tmov    $0xb,%eax\n  404346:\teb 05                \tjmp    40434d <acceptport+0x72>\n  404348:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n  40434d:\tc9                   \tleaveq \n  40434e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall acceptport(int *a1) {\n  __int64 result;\n  socklen_t <span class=\"supfact\">addr_len</span>;\n  <span class=\"supfact\">addr_len</span> = Number;\n  if (select_fd(msock, qword_42D648, Number) <= Number)\n    return Number L;\n  *a1 = accept(msock, addr, &<span class=\"supfact\">addr_len</span>);\n  if (*a1 >= Number)\n    result = Number L;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "uerr_t __cdecl acceptport(int *sock) {\n  uerr_t result;\n  int <span class=\"supfact\">addrlen</span>;\n  <span class=\"supfact\">addrlen</span> = Number;\n  if (select_fd(msock, opt.timeout, Number) <= Number)\n    return Number;\n  *sock = accept(msock, addr, (socklen_t *)&<span class=\"supfact\">addrlen</span>);\n  if (*sock >= Number)\n    result = ACCEPTOK;\n  else\n    result = ACCEPTERR;\n  return result;\n}", "var": [{"name": "addr_len", "type": "int", "ref_name": "addrlen", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/a2002ae660175968e0b86e8dc91bf56b26f8865ccb1769d705308d7677d5574f", "path_in_repo": "madeye/GRACE/qemu-0.12.5/ppcemb-softmmu/translate.o", "objdump": "0000000000023929 <gen_vmsumshm_vmsumshs>:\n   23929:\t55                   \tpush   %rbp\n   2392a:\t48 89 e5             \tmov    %rsp,%rbp\n   2392d:\t48 83 ec 20          \tsub    $0x20,%rsp\n   23931:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   23935:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   23939:\t8b 40 24             \tmov    0x24(%rax),%eax\n   2393c:\t85 c0                \ttest   %eax,%eax\n   2393e:\t0f 94 c0             \tsete   %al\n   23941:\t0f b6 c0             \tmovzbl %al,%eax\n   23944:\t48 85 c0             \ttest   %rax,%rax\n   23947:\t74 16                \tje     2395f <gen_vmsumshm_vmsumshs+0x36>\n   23949:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   2394d:\tbe 49 00 00 00       \tmov    $0x49,%esi\n   23952:\t48 89 c7             \tmov    %rax,%rdi\n   23955:\te8 50 74 fe ff       \tcallq  adaa <gen_exception>\n   2395a:\te9 c2 00 00 00       \tjmpq   23a21 <gen_vmsumshm_vmsumshs+0xf8>\n   2395f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   23963:\t8b 40 0c             \tmov    0xc(%rax),%eax\n   23966:\t89 c7                \tmov    %eax,%edi\n   23968:\te8 c3 75 fe ff       \tcallq  af30 <rA>\n   2396d:\t89 c7                \tmov    %eax,%edi\n   2396f:\te8 75 92 ff ff       \tcallq  1cbe9 <gen_avr_ptr>\n   23974:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n   23977:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   2397b:\t8b 40 0c             \tmov    0xc(%rax),%eax\n   2397e:\t89 c7                \tmov    %eax,%edi\n   23980:\te8 bd 75 fe ff       \tcallq  af42 <rB>\n   23985:\t89 c7                \tmov    %eax,%edi\n   23987:\te8 5d 92 ff ff       \tcallq  1cbe9 <gen_avr_ptr>\n   2398c:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n   2398f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   23993:\t8b 40 0c             \tmov    0xc(%rax),%eax\n   23996:\t89 c7                \tmov    %eax,%edi\n   23998:\te8 b7 75 fe ff       \tcallq  af54 <rC>\n   2399d:\t89 c7                \tmov    %eax,%edi\n   2399f:\te8 45 92 ff ff       \tcallq  1cbe9 <gen_avr_ptr>\n   239a4:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n   239a7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   239ab:\t8b 40 0c             \tmov    0xc(%rax),%eax\n   239ae:\t89 c7                \tmov    %eax,%edi\n   239b0:\te8 57 75 fe ff       \tcallq  af0c <rD>\n   239b5:\t89 c7                \tmov    %eax,%edi\n   239b7:\te8 2d 92 ff ff       \tcallq  1cbe9 <gen_avr_ptr>\n   239bc:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n   239bf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   239c3:\t8b 40 0c             \tmov    0xc(%rax),%eax\n   239c6:\t89 c7                \tmov    %eax,%edi\n   239c8:\te8 30 75 fe ff       \tcallq  aefd <Rc>\n   239cd:\t85 c0                \ttest   %eax,%eax\n   239cf:\t74 15                \tje     239e6 <gen_vmsumshm_vmsumshs+0xbd>\n   239d1:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n   239d4:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n   239d7:\t8b 75 fc             \tmov    -0x4(%rbp),%esi\n   239da:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n   239dd:\t89 c7                \tmov    %eax,%edi\n   239df:\te8 86 27 fe ff       \tcallq  616a <gen_helper_vmsumshs>\n   239e4:\teb 13                \tjmp    239f9 <gen_vmsumshm_vmsumshs+0xd0>\n   239e6:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n   239e9:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n   239ec:\t8b 75 fc             \tmov    -0x4(%rbp),%esi\n   239ef:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n   239f2:\t89 c7                \tmov    %eax,%edi\n   239f4:\te8 f7 26 fe ff       \tcallq  60f0 <gen_helper_vmsumshm>\n   239f9:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   239fc:\t89 c7                \tmov    %eax,%edi\n   239fe:\te8 00 00 00 00       \tcallq  23a03 <gen_vmsumshm_vmsumshs+0xda>\n   23a03:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n   23a06:\t89 c7                \tmov    %eax,%edi\n   23a08:\te8 00 00 00 00       \tcallq  23a0d <gen_vmsumshm_vmsumshs+0xe4>\n   23a0d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n   23a10:\t89 c7                \tmov    %eax,%edi\n   23a12:\te8 00 00 00 00       \tcallq  23a17 <gen_vmsumshm_vmsumshs+0xee>\n   23a17:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n   23a1a:\t89 c7                \tmov    %eax,%edi\n   23a1c:\te8 00 00 00 00       \tcallq  23a21 <gen_vmsumshm_vmsumshs+0xf8>\n   23a21:\tc9                   \tleaveq \n   23a22:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gen_vmsumshm_vmsumshs(__int64 a1) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  unsigned int <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  if (!*(_DWORD *)(a1 + Number))\n    return gen_exception(a1, Number);\n  v2 = rA(*(_DWORD *)(a1 + Number));\n  <span class=\"supfact\">v9</span> = gen_avr_ptr(v2);\n  v3 = rB(*(_DWORD *)(a1 + Number));\n  <span class=\"supfact\">v8</span> = gen_avr_ptr(v3);\n  v4 = rC(*(_DWORD *)(a1 + Number));\n  <span class=\"supfact\">v7</span> = gen_avr_ptr(v4);\n  v5 = rD(*(_DWORD *)(a1 + Number));\n  <span class=\"supfact\">v6</span> = gen_avr_ptr(v5);\n  if ((unsigned int)Rc(*(_DWORD *)(a1 + Number)))\n    gen_helper_vmsumshs(<span class=\"supfact\">v6</span>, <span class=\"supfact\">v9</span>,\n                        <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n  else\n    gen_helper_vmsumshm(<span class=\"supfact\">v6</span>, <span class=\"supfact\">v9</span>,\n                        <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n  tcg_temp_free_i64(<span class=\"supfact\">v9</span>);\n  tcg_temp_free_i64(<span class=\"supfact\">v8</span>);\n  tcg_temp_free_i64(<span class=\"supfact\">v7</span>);\n  return tcg_temp_free_i64(<span class=\"supfact\">v6</span>);\n}", "code_t": "void __cdecl gen_vmsumshm_vmsumshs(DisasContext_0 *ctx) {\n  int v1;\n  int v2;\n  int v3;\n  int v4;\n  unsigned int <span class=\"supfact\">rd</span>;\n  unsigned int <span class=\"supfact\">rc</span>;\n  unsigned int <span class=\"supfact\">rb</span>;\n  unsigned int <span class=\"supfact\">ra</span>;\n  if (ctx->altivec_enabled) {\n    v1 = rA(ctx->opcode);\n    <span class=\"supfact\">ra</span> = gen_avr_ptr(v1);\n    v2 = rB(ctx->opcode);\n    <span class=\"supfact\">rb</span> = gen_avr_ptr(v2);\n    v3 = rC(ctx->opcode);\n    <span class=\"supfact\">rc</span> = gen_avr_ptr(v3);\n    v4 = rD(ctx->opcode);\n    <span class=\"supfact\">rd</span> = gen_avr_ptr(v4);\n    if (Rc(ctx->opcode))\n      gen_helper_vmsumshs(<span class=\"supfact\">rd</span>, <span class=\"supfact\">ra</span>,\n                          <span class=\"supfact\">rb</span>, <span class=\"supfact\">rc</span>);\n    else\n      gen_helper_vmsumshm(<span class=\"supfact\">rd</span>, <span class=\"supfact\">ra</span>,\n                          <span class=\"supfact\">rb</span>, <span class=\"supfact\">rc</span>);\n    tcg_temp_free_i64(<span class=\"supfact\">ra</span>);\n    tcg_temp_free_i64(<span class=\"supfact\">rb</span>);\n    tcg_temp_free_i64(<span class=\"supfact\">rc</span>);\n    tcg_temp_free_i64(<span class=\"supfact\">rd</span>);\n  } else {\n    gen_exception(ctx, Number);\n  }\n}", "var": [{"name": "v9", "type": "unsigned int", "ref_name": "ra", "ref_type": "unsigned int"}, {"name": "v8", "type": "unsigned int", "ref_name": "rb", "ref_type": "unsigned int"}, {"name": "v7", "type": "unsigned int", "ref_name": "rc", "ref_type": "unsigned int"}, {"name": "v6", "type": "unsigned int", "ref_name": "rd", "ref_type": "unsigned int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "Toreben", "repo_name": "Portfolio", "path": "Toreben/Portfolio/a37647386377d6f4f623a63846874714b525c1fb1a8afa19c316d0d7682e30aa", "path_in_repo": "Toreben/Portfolio/04 RTv1/libft/obj/ft_atoi.o", "objdump": "0000000000000000 <ft_atoi>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  13:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  1a:\teb 04                \tjmp    20 <ft_atoi+0x20>\n  1c:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  20:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  23:\t48 63 d0             \tmovslq %eax,%rdx\n  26:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  2a:\t48 01 d0             \tadd    %rdx,%rax\n  2d:\t0f b6 00             \tmovzbl (%rax),%eax\n  30:\t3c 08                \tcmp    $0x8,%al\n  32:\t7e 14                \tjle    48 <ft_atoi+0x48>\n  34:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  37:\t48 63 d0             \tmovslq %eax,%rdx\n  3a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  3e:\t48 01 d0             \tadd    %rdx,%rax\n  41:\t0f b6 00             \tmovzbl (%rax),%eax\n  44:\t3c 0d                \tcmp    $0xd,%al\n  46:\t7e d4                \tjle    1c <ft_atoi+0x1c>\n  48:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4b:\t48 63 d0             \tmovslq %eax,%rdx\n  4e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  52:\t48 01 d0             \tadd    %rdx,%rax\n  55:\t0f b6 00             \tmovzbl (%rax),%eax\n  58:\t3c 20                \tcmp    $0x20,%al\n  5a:\t74 c0                \tje     1c <ft_atoi+0x1c>\n  5c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  5f:\t48 63 d0             \tmovslq %eax,%rdx\n  62:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  66:\t48 01 d0             \tadd    %rdx,%rax\n  69:\t0f b6 00             \tmovzbl (%rax),%eax\n  6c:\t3c 2d                \tcmp    $0x2d,%al\n  6e:\t75 07                \tjne    77 <ft_atoi+0x77>\n  70:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  75:\teb 05                \tjmp    7c <ft_atoi+0x7c>\n  77:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  7c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  7f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  82:\t48 63 d0             \tmovslq %eax,%rdx\n  85:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  89:\t48 01 d0             \tadd    %rdx,%rax\n  8c:\t0f b6 00             \tmovzbl (%rax),%eax\n  8f:\t3c 2d                \tcmp    $0x2d,%al\n  91:\t74 14                \tje     a7 <ft_atoi+0xa7>\n  93:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  96:\t48 63 d0             \tmovslq %eax,%rdx\n  99:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  9d:\t48 01 d0             \tadd    %rdx,%rax\n  a0:\t0f b6 00             \tmovzbl (%rax),%eax\n  a3:\t3c 2b                \tcmp    $0x2b,%al\n  a5:\t75 07                \tjne    ae <ft_atoi+0xae>\n  a7:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  ac:\teb 05                \tjmp    b3 <ft_atoi+0xb3>\n  ae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  b3:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  b6:\teb 2f                \tjmp    e7 <ft_atoi+0xe7>\n  b8:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  bb:\t89 d0                \tmov    %edx,%eax\n  bd:\tc1 e0 02             \tshl    $0x2,%eax\n  c0:\t01 d0                \tadd    %edx,%eax\n  c2:\t01 c0                \tadd    %eax,%eax\n  c4:\t89 c1                \tmov    %eax,%ecx\n  c6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  c9:\t8d 50 01             \tlea    0x1(%rax),%edx\n  cc:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  cf:\t48 63 d0             \tmovslq %eax,%rdx\n  d2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  d6:\t48 01 d0             \tadd    %rdx,%rax\n  d9:\t0f b6 00             \tmovzbl (%rax),%eax\n  dc:\t0f be c0             \tmovsbl %al,%eax\n  df:\t01 c8                \tadd    %ecx,%eax\n  e1:\t83 e8 30             \tsub    $0x30,%eax\n  e4:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  e7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  ea:\t48 63 d0             \tmovslq %eax,%rdx\n  ed:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  f1:\t48 01 d0             \tadd    %rdx,%rax\n  f4:\t0f b6 00             \tmovzbl (%rax),%eax\n  f7:\t0f be c0             \tmovsbl %al,%eax\n  fa:\t89 c7                \tmov    %eax,%edi\n  fc:\te8 00 00 00 00       \tcallq  101 <ft_atoi+0x101>\n 101:\t85 c0                \ttest   %eax,%eax\n 103:\t74 14                \tje     119 <ft_atoi+0x119>\n 105:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 108:\t48 63 d0             \tmovslq %eax,%rdx\n 10b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 10f:\t48 01 d0             \tadd    %rdx,%rax\n 112:\t0f b6 00             \tmovzbl (%rax),%eax\n 115:\t84 c0                \ttest   %al,%al\n 117:\t75 9f                \tjne    b8 <ft_atoi+0xb8>\n 119:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 11c:\t0f af 45 f8          \timul   -0x8(%rbp),%eax\n 120:\tc9                   \tleaveq \n 121:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall ft_atoi(__int64 a1) {\n  int v1;\n  _BOOL4 v2;\n  int v3;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  int v7;\n  int i;\n  v7 = Number;\n  <span class=\"supfact\">v6</span> = Number;\n  while (*(char *)(v7 + a1) > Number && *(char *)(v7 + a1) <= Number ||\n         *(_BYTE *)(v7 + a1) == Number)\n    ++v7;\n  if (*(_BYTE *)(v7 + a1) == Number)\n    v1 = Number;\n  else\n    v1 = Number;\n  <span class=\"supfact\">v5</span> = v1;\n  v2 = *(_BYTE *)(v7 + a1) == Number || *(_BYTE *)(v7 + a1) == Number;\n  for (i = v2 + v7; (unsigned int)ft_isdigit((unsigned int)*(char *)(i + a1)) &&\n                    *(_BYTE *)(i + a1);\n       ++i) {\n    v3 = i;\n    <span class=\"supfact\">v6</span> =\n        Number * <span class=\"supfact\">v6</span> + *(char *)(v3 + a1) - Number;\n  }\n  return (unsigned int)(<span class=\"supfact\">v6</span> * <span class=\"supfact\">v5</span>);\n}", "code_t": "int __cdecl ft_atoi(const char *str) {\n  int v1;\n  _BOOL4 v2;\n  int v3;\n  int <span class=\"supfact\">neg</span>;\n  int <span class=\"supfact\">nb</span>;\n  int i;\n  int ia;\n  i = Number;\n  <span class=\"supfact\">nb</span> = Number;\n  while (str[i] > Number && str[i] <= Number || str[i] == Number)\n    ++i;\n  if (str[i] == Number)\n    v1 = Number;\n  else\n    v1 = Number;\n  <span class=\"supfact\">neg</span> = v1;\n  v2 = str[i] == Number || str[i] == Number;\n  for (ia = v2 + i; (unsigned int)ft_isdigit((unsigned int)str[ia]) && str[ia];\n       ++ia) {\n    v3 = ia;\n    <span class=\"supfact\">nb</span> = Number * <span class=\"supfact\">nb</span> + str[v3] - Number;\n  }\n  return <span class=\"supfact\">nb</span> * <span class=\"supfact\">neg</span>;\n}", "var": [{"name": "v6", "type": "int", "ref_name": "nb", "ref_type": "int"}, {"name": "v5", "type": "int", "ref_name": "neg", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "casenh", "repo_name": "covert-channels", "path": "casenh/covert-channels/8530d21b13f35e4000103ac3ac6235e723552a698c009bd043a7a9ffc3113acd", "path_in_repo": "casenh/covert-channels/papi-5.3.0/src/libpfm4/perf_examples/x86/bts_smpl", "objdump": "0000000000410872 <pfm_amd64_k8_revb_detect>:\n  410872:\t55                   \tpush   %rbp\n  410873:\t48 89 e5             \tmov    %rsp,%rbp\n  410876:\t48 83 ec 20          \tsub    $0x20,%rsp\n  41087a:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  41087e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  410882:\t48 89 c7             \tmov    %rax,%rdi\n  410885:\te8 45 1d 00 00       \tcallq  4125cf <pfm_amd64_detect>\n  41088a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41088d:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  410891:\t74 05                \tje     410898 <pfm_amd64_k8_revb_detect+0x26>\n  410893:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  410896:\teb 1b                \tjmp    4108b3 <pfm_amd64_k8_revb_detect+0x41>\n  410898:\t8b 05 a2 23 0c 00    \tmov    0xc23a2(%rip),%eax        # 4d2c40 <pfm_amd64_cfg>\n  41089e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4108a1:\t83 7d fc 38          \tcmpl   $0x38,-0x4(%rbp)\n  4108a5:\t75 07                \tjne    4108ae <pfm_amd64_k8_revb_detect+0x3c>\n  4108a7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4108ac:\teb 05                \tjmp    4108b3 <pfm_amd64_k8_revb_detect+0x41>\n  4108ae:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4108b3:\tc9                   \tleaveq \n  4108b4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pfm_amd64_k8_revb_detect(__int64 a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = pfm_amd64_detect(a1);\n  if (<span class=\"supfact\">v2</span>)\n    return <span class=\"supfact\">v2</span>;\n  if (pfm_amd64_cfg == Number)\n    return Number L;\n  return Number;\n}", "code_t": "int __cdecl pfm_amd64_k8_revb_detect(void *this) {\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = pfm_amd64_detect(this);\n  if (<span class=\"supfact\">ret</span>)\n    return <span class=\"supfact\">ret</span>;\n  if (pfm_amd64_cfg.revision == PFM_PMU_AMD64_K8_REVB)\n    return Number;\n  return Number;\n}", "var": [{"name": "v2", "type": "int", "ref_name": "ret", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "HowWen-CPE", "repo_name": "cpe", "path": "HowWen-CPE/cpe/26406d5c7f8bd4a750a4970dd46615ba7c542b7340c93090e344f3f93893d892", "path_in_repo": "HowWen-CPE/cpe/package/logwrite/src/logwrite", "objdump": "0000000000401b95 <filt_u_message>:\n  401b95:\t55                   \tpush   %rbp\n  401b96:\t48 89 e5             \tmov    %rsp,%rbp\n  401b99:\t48 83 ec 30          \tsub    $0x30,%rsp\n  401b9d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  401ba1:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  401ba5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401ba9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401bad:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401bb1:\tbe 3e 00 00 00       \tmov    $0x3e,%esi\n  401bb6:\t48 89 c7             \tmov    %rax,%rdi\n  401bb9:\te8 f2 f4 ff ff       \tcallq  4010b0 <strchr@plt>\n  401bbe:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401bc2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401bc6:\tbe 94 30 40 00       \tmov    $0x403094,%esi\n  401bcb:\t48 89 c7             \tmov    %rax,%rdi\n  401bce:\te8 1d f6 ff ff       \tcallq  4011f0 <strstr@plt>\n  401bd3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  401bd7:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  401bdc:\t0f 84 82 00 00 00    \tje     401c64 <filt_u_message+0xcf>\n  401be2:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  401be7:\t74 7b                \tje     401c64 <filt_u_message+0xcf>\n  401be9:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n  401bee:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401bf2:\t48 83 c0 10          \tadd    $0x10,%rax\n  401bf6:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  401bfa:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401bfe:\t48 2b 45 f0          \tsub    -0x10(%rbp),%rax\n  401c02:\t48 89 c6             \tmov    %rax,%rsi\n  401c05:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  401c09:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401c0d:\t48 89 d1             \tmov    %rdx,%rcx\n  401c10:\tba 57 30 40 00       \tmov    $0x403057,%edx\n  401c15:\t48 89 c7             \tmov    %rax,%rdi\n  401c18:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401c1d:\te8 ae f4 ff ff       \tcallq  4010d0 <snprintf@plt>\n  401c22:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401c26:\t48 2b 45 f0          \tsub    -0x10(%rbp),%rax\n  401c2a:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n  401c2e:\t48 83 45 e8 08       \taddq   $0x8,-0x18(%rbp)\n  401c33:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401c37:\t48 05 00 01 00 00    \tadd    $0x100,%rax\n  401c3d:\t48 2b 45 f8          \tsub    -0x8(%rbp),%rax\n  401c41:\t48 89 c6             \tmov    %rax,%rsi\n  401c44:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401c48:\t48 8d 78 ff          \tlea    -0x1(%rax),%rdi\n  401c4c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401c50:\t48 89 c1             \tmov    %rax,%rcx\n  401c53:\tba 7f 30 40 00       \tmov    $0x40307f,%edx\n  401c58:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401c5d:\te8 6e f4 ff ff       \tcallq  4010d0 <snprintf@plt>\n  401c62:\teb 01                \tjmp    401c65 <filt_u_message+0xd0>\n  401c64:\t90                   \tnop\n  401c65:\tc9                   \tleaveq \n  401c66:\tc3                   \tretq   ", "code_s": "int __fastcall filt_u_message(__int64 a1) {\n  char *v1;\n  char *<span class=\"supfact\">v3</span>;\n  char *<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = strchr((const char *)a1, Number);\n  v1 = strstr((const char *)a1, String);\n  <span class=\"supfact\">v3</span> = v1;\n  if (<span class=\"supfact\">v4</span> && v1) {\n    snprintf((char *)a1, Number, String, <span class=\"supfact\">v4</span> + Number);\n    LODWORD(v1) = snprintf((char *)(a1 + Number), Number, String,\n                           <span class=\"supfact\">v3</span> + Number);\n  }\n  return (int)v1;\n}", "code_t": "void __cdecl filt_u_message(char *msg, char *keycat) {\n  char *<span class=\"supfact\">p3</span>;\n  char *<span class=\"supfact\">p1</span>;\n  <span class=\"supfact\">p1</span> = strchr(msg, Number);\n  <span class=\"supfact\">p3</span> = strstr(msg, String);\n  if (<span class=\"supfact\">p1</span>) {\n    if (<span class=\"supfact\">p3</span>) {\n      snprintf(msg, Number, String, <span class=\"supfact\">p1</span> + Number);\n      snprintf(msg + Number, Number, String, <span class=\"supfact\">p3</span> + Number);\n    }\n  }\n}", "var": [{"name": "v4", "type": "char *", "ref_name": "p1", "ref_type": "char *"}, {"name": "v3", "type": "char *", "ref_name": "p3", "ref_type": "char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "chenbk85", "repo_name": "Reactor-10", "path": "chenbk85/Reactor-10/cc128333779a7c610e6a3fb53892da937a78bc662b6d92e34ffaf76db7d1cc9e", "path_in_repo": "chenbk85/Reactor-10//S", "objdump": "0000000000401529 <createServer>:\n  401529:\t55                   \tpush   %rbp\n  40152a:\t48 89 e5             \tmov    %rsp,%rbp\n  40152d:\t48 83 ec 20          \tsub    $0x20,%rsp\n  401531:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  401534:\tbf 70 00 00 00       \tmov    $0x70,%edi\n  401539:\te8 72 fb ff ff       \tcallq  4010b0 <malloc@plt>\n  40153e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401542:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  401547:\t74 74                \tje     4015bd <createServer+0x94>\n  401549:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  401550:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  401557:\teb 1a                \tjmp    401573 <createServer+0x4a>\n  401559:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40155d:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  401560:\t48 63 d2             \tmovslq %edx,%rdx\n  401563:\t48 83 c2 04          \tadd    $0x4,%rdx\n  401567:\t48 c7 04 d0 00 00 00 \tmovq   $0x0,(%rax,%rdx,8)\n  40156e:\t00 \n  40156f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401573:\t83 7d fc 09          \tcmpl   $0x9,-0x4(%rbp)\n  401577:\t7e e0                \tjle    401559 <createServer+0x30>\n  401579:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40157c:\t89 c7                \tmov    %eax,%edi\n  40157e:\te8 70 06 00 00       \tcallq  401bf3 <createServerSocket>\n  401583:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  401587:\t89 02                \tmov    %eax,(%rdx)\n  401589:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40158d:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  401591:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  401595:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401599:\t48 c7 40 10 1e 14 40 \tmovq   $0x40141e,0x10(%rax)\n  4015a0:\t00 \n  4015a1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4015a5:\t48 c7 40 18 36 14 40 \tmovq   $0x401436,0x18(%rax)\n  4015ac:\t00 \n  4015ad:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4015b1:\t48 83 c0 08          \tadd    $0x8,%rax\n  4015b5:\t48 89 c7             \tmov    %rax,%rdi\n  4015b8:\te8 ae 01 00 00       \tcallq  40176b <Register>\n  4015bd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4015c1:\tc9                   \tleaveq \n  4015c2:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall createServer(unsigned int a1) {\n  _QWORD *<span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v2</span> = malloc(Number);\n  if (<span class=\"supfact\">v2</span>) {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>)\n      <span class=\"supfact\">v2</span>[<span class=\"supfact\">i</span> + Number] = Number L;\n    *(_DWORD *)<span class=\"supfact\">v2</span> = createServerSocket(a1);\n    <span class=\"supfact\">v2</span>[Number] = <span class=\"supfact\">v2</span>;\n    <span class=\"supfact\">v2</span>[Number] = getServerSocket;\n    <span class=\"supfact\">v2</span>[Number] = handleConnectRequest;\n    Register(<span class=\"supfact\">v2</span> + Number);\n  }\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "DiagnosticsServerPtr __cdecl createServer(unsigned int tcpPort) {\n  DiagnosticsServerPtr <span class=\"supfact\">newServer</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">newServer</span> = (DiagnosticsServerPtr)malloc(Number);\n  if (<span class=\"supfact\">newServer</span>) {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>)\n      <span class=\"supfact\">newServer</span>->clients[<span class=\"supfact\">i</span>] = Number L;\n    <span class=\"supfact\">newServer</span>->listeningSocket = createServerSocket(tcpPort);\n    <span class=\"supfact\">newServer</span>->eventHandler.instance =\n        <span class=\"supfact\">newServer</span>;\n    <span class=\"supfact\">newServer</span>->eventHandler.getHandle =\n        (getHandleFunc)getServerSocket;\n    <span class=\"supfact\">newServer</span>->eventHandler.handleEvent =\n        (handleEventFunc)handleConnectRequest;\n    Register(&<span class=\"supfact\">newServer</span>->eventHandler);\n  }\n  return <span class=\"supfact\">newServer</span>;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v2", "type": "__unk__", "ref_name": "newServer", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "versatica", "repo_name": "mediasoup", "path": "versatica/mediasoup/5f14787735a916d88eb221c25e358d04b726f99097f2151b48779938667693f4", "path_in_repo": "versatica/mediasoup/worker/out/Release/obj.target/libwebrtc/deps/libwebrtc/libwebrtc/modules/congestion_controller/rtp/send_time_history.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeIlSt4pairIKlN6webrtc14PacketFeedbackEESt10_Select1stIS4_ESt4lessIlESaIS4_EE14_M_create_nodeIJS0_IlS3_EEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  14:\t48 89 c7             \tmov    %rax,%rdi\n  17:\te8 00 00 00 00       \tcallq  1c <_ZNSt8_Rb_treeIlSt4pairIKlN6webrtc14PacketFeedbackEESt10_Select1stIS4_ESt4lessIlESaIS4_EE14_M_create_nodeIJS0_IlS3_EEEEPSt13_Rb_tree_nodeIS4_EDpOT_+0x1c>\n  1c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  20:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  24:\t48 89 c7             \tmov    %rax,%rdi\n  27:\te8 00 00 00 00       \tcallq  2c <_ZNSt8_Rb_treeIlSt4pairIKlN6webrtc14PacketFeedbackEESt10_Select1stIS4_ESt4lessIlESaIS4_EE14_M_create_nodeIJS0_IlS3_EEEEPSt13_Rb_tree_nodeIS4_EDpOT_+0x2c>\n  2c:\t48 89 c2             \tmov    %rax,%rdx\n  2f:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  33:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  37:\t48 89 ce             \tmov    %rcx,%rsi\n  3a:\t48 89 c7             \tmov    %rax,%rdi\n  3d:\te8 00 00 00 00       \tcallq  42 <_ZNSt8_Rb_treeIlSt4pairIKlN6webrtc14PacketFeedbackEESt10_Select1stIS4_ESt4lessIlESaIS4_EE14_M_create_nodeIJS0_IlS3_EEEEPSt13_Rb_tree_nodeIS4_EDpOT_+0x42>\n  42:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  46:\tc9                   \tleaveq \n  47:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std _Rb_tree<\n    long, std pair<long const, webrtc PacketFeedback>,\n    std _Select1st<std pair<long const, webrtc PacketFeedback>>, std less<long>,\n    std allocator<std pair<long const, webrtc PacketFeedback>>>\n_M_create_node<std pair<long, webrtc PacketFeedback>>(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> =\n      std _Rb_tree<long, std pair<long const, webrtc PacketFeedback>,\n                   std _Select1st<std pair<long const, webrtc PacketFeedback>>,\n                   std less<long>,\n                   std allocator<std pair<long const, webrtc PacketFeedback>>>\n          _M_get_node(a1);\n  v2 = std forward<std pair<long, webrtc PacketFeedback>>(a2);\n  std _Rb_tree<long, std pair<long const, webrtc PacketFeedback>,\n               std _Select1st<std pair<long const, webrtc PacketFeedback>>,\n               std less<long>,\n               std allocator<std pair<long const, webrtc PacketFeedback>>>\n      _M_construct_node<std pair<long, webrtc PacketFeedback>>(\n          a1, <span class=\"supfact\">v4</span>, v2);\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "std _Rb_tree<long int, std pair<long int const, webrtc PacketFeedback>,\n             std _Select1st<std pair<long int const, webrtc PacketFeedback>>,\n             std less<long int>,\n             std allocator<std pair<long int const, webrtc PacketFeedback>>>\n    _Link_type __fastcall std\n        _Rb_tree<long, std pair<long const, webrtc PacketFeedback>,\n                 std _Select1st<std pair<long const, webrtc PacketFeedback>>,\n                 std less<long>,\n                 std allocator<std pair<long const, webrtc PacketFeedback>>>\n        _M_create_node<std pair<long, webrtc PacketFeedback>>(\n            std _Rb_tree<\n                long int, std pair<long int const, webrtc PacketFeedback>,\n                std _Select1st<std pair<long int const, webrtc PacketFeedback>>,\n                std less<long int>,\n                std allocator<std pair<long int const, webrtc PacketFeedback>>>\n                *const this,\n            std pair<long int, webrtc PacketFeedback> *a2,\n            std pair<long int, webrtc PacketFeedback> *__args_0) {\n  std pair<long int, webrtc PacketFeedback> *v3;\n  std _Rb_tree_node<std pair<long int const, webrtc PacketFeedback>>\n      *<span class=\"supfact\">__tmp</span>;\n  <span class=\"supfact\">__tmp</span> =\n      std _Rb_tree<long, std pair<long const, webrtc PacketFeedback>,\n                   std _Select1st<std pair<long const, webrtc PacketFeedback>>,\n                   std less<long>,\n                   std allocator<std pair<long const, webrtc PacketFeedback>>>\n          _M_get_node(this);\n  v3 = std forward<std pair<long, webrtc PacketFeedback>>(a2);\n  std _Rb_tree<long, std pair<long const, webrtc PacketFeedback>,\n               std _Select1st<std pair<long const, webrtc PacketFeedback>>,\n               std less<long>,\n               std allocator<std pair<long const, webrtc PacketFeedback>>>\n      _M_construct_node<std pair<long, webrtc PacketFeedback>>(\n          this, <span class=\"supfact\">__tmp</span>, v3,\n          (std pair<long int, webrtc PacketFeedback> *)<span class=\"supfact\">__tmp</span>);\n  return <span class=\"supfact\">__tmp</span>;\n}", "var": [{"name": "v4", "type": "struct __gnu_cxx::__normal_iterator<webrtc::PacketResult*,std::vector<webrtc::PacketResult> > { webrtc::PacketResult * _M_current; }", "ref_name": "__tmp", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "JulienBalestra", "repo_name": "21sh", "path": "JulienBalestra/21sh/ce782d505e57fa50eb8c742e69d0e0544a38651e7df95b9bfe6c849bf00db75d", "path_in_repo": "JulienBalestra/21sh//.objects/chdir_var.o", "objdump": "00000000000000e4 <create_chdir_path>:\n  e4:\t55                   \tpush   %rbp\n  e5:\t48 89 e5             \tmov    %rsp,%rbp\n  e8:\t48 83 ec 20          \tsub    $0x20,%rsp\n  ec:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  f0:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  f4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  f8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  fd:\t48 89 c7             \tmov    %rax,%rdi\n 100:\te8 00 00 00 00       \tcallq  105 <create_chdir_path+0x21>\n 105:\t85 c0                \ttest   %eax,%eax\n 107:\t75 0e                \tjne    117 <create_chdir_path+0x33>\n 109:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 10d:\t48 89 c7             \tmov    %rax,%rdi\n 110:\te8 00 00 00 00       \tcallq  115 <create_chdir_path+0x31>\n 115:\teb 30                \tjmp    147 <create_chdir_path+0x63>\n 117:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 11b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 11f:\t48 89 d6             \tmov    %rdx,%rsi\n 122:\t48 89 c7             \tmov    %rax,%rdi\n 125:\te8 00 00 00 00       \tcallq  12a <create_chdir_path+0x46>\n 12a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 12e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 133:\t74 06                \tje     13b <create_chdir_path+0x57>\n 135:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 139:\teb 0c                \tjmp    147 <create_chdir_path+0x63>\n 13b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 13f:\t48 89 c7             \tmov    %rax,%rdi\n 142:\te8 00 00 00 00       \tcallq  147 <create_chdir_path+0x63>\n 147:\tc9                   \tleaveq \n 148:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall create_chdir_path(const char *a1, __int64 a2) {\n  __int64 result;\n  char *<span class=\"supfact\">v3</span>;\n  if (access(a1, Number) &&\n      (<span class=\"supfact\">v3</span> = concat_chdir((__int64)a1, a2)) != Number L)\n    result = (__int64)<span class=\"supfact\">v3</span>;\n  else\n    result = ft_strdup(a1);\n  return result;\n}", "code_t": "char *__cdecl create_chdir_path(char *path, t_sh *shell) {\n  char *result;\n  char *<span class=\"supfact\">good</span>;\n  if (access(path, Number) &&\n      (<span class=\"supfact\">good</span> = concat_chdir(path, shell)) != Number L)\n    result = <span class=\"supfact\">good</span>;\n  else\n    result = (char *)ft_strdup(path);\n  return result;\n}", "var": [{"name": "v3", "type": "char *", "ref_name": "good", "ref_type": "char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "moseymosey", "repo_name": "netpbm", "path": "moseymosey/netpbm/95ac57affebac8df4da2ddd6b43b1ec8eeaa79654cf7a1e9cc9ff1cdab08af36", "path_in_repo": "moseymosey/netpbm/analyzer/pamslice", "objdump": "0000000000406057 <pnm_freepamarray>:\n  406057:\t55                   \tpush   %rbp\n  406058:\t48 89 e5             \tmov    %rsp,%rbp\n  40605b:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40605f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  406063:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  406067:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40606e:\teb 23                \tjmp    406093 <pnm_freepamarray+0x3c>\n  406070:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  406073:\t48 98                \tcltq   \n  406075:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40607c:\t00 \n  40607d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406081:\t48 01 d0             \tadd    %rdx,%rax\n  406084:\t48 8b 00             \tmov    (%rax),%rax\n  406087:\t48 89 c7             \tmov    %rax,%rdi\n  40608a:\te8 92 d0 ff ff       \tcallq  403121 <pm_freerow>\n  40608f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  406093:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  406097:\t8b 40 18             \tmov    0x18(%rax),%eax\n  40609a:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  40609d:\t7c d1                \tjl     406070 <pnm_freepamarray+0x19>\n  40609f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4060a3:\t48 89 c7             \tmov    %rax,%rdi\n  4060a6:\te8 95 bf ff ff       \tcallq  402040 <free@plt>\n  4060ab:\t90                   \tnop\n  4060ac:\tc9                   \tleaveq \n  4060ad:\tc3                   \tretq   ", "code_s": "void __fastcall pnm_freepamarray(void **a1, __int64 a2) {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < *(_DWORD *)(a2 + Number);\n       ++<span class=\"supfact\">i</span>)\n    pm_freerow(a1[<span class=\"supfact\">i</span>]);\n  free(a1);\n}", "code_t": "void __cdecl pnm_freepamarray(tuple **const tuplearray, const pam *const pamP) {\n  int <span class=\"supfact\">row</span>;\n  for (<span class=\"supfact\">row</span> = Number; <span class=\"supfact\">row</span> < pamP->height;\n       ++<span class=\"supfact\">row</span>)\n    pm_freerow((char *const)tuplearray[<span class=\"supfact\">row</span>]);\n  free(tuplearray);\n}", "var": [{"name": "i", "type": "int", "ref_name": "row", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "moseymosey", "repo_name": "netpbm", "path": "moseymosey/netpbm/254687ad17578a4411e50c1a71c61d5d452f16288f64038833f1555086c2769a", "path_in_repo": "moseymosey/netpbm/other/pampick", "objdump": "000000000040c927 <pbm_writepbm>:\n  40c927:\t55                   \tpush   %rbp\n  40c928:\t48 89 e5             \tmov    %rsp,%rbp\n  40c92b:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40c92f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40c933:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40c937:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n  40c93a:\t89 4d d8             \tmov    %ecx,-0x28(%rbp)\n  40c93d:\t44 89 45 d4          \tmov    %r8d,-0x2c(%rbp)\n  40c941:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n  40c944:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n  40c947:\t8b 75 dc             \tmov    -0x24(%rbp),%esi\n  40c94a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c94e:\t48 89 c7             \tmov    %rax,%rdi\n  40c951:\te8 99 fa ff ff       \tcallq  40c3ef <pbm_writepbminit>\n  40c956:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40c95d:\teb 2d                \tjmp    40c98c <pbm_writepbm+0x65>\n  40c95f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40c962:\t48 98                \tcltq   \n  40c964:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40c96b:\t00 \n  40c96c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40c970:\t48 01 d0             \tadd    %rdx,%rax\n  40c973:\t48 8b 30             \tmov    (%rax),%rsi\n  40c976:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n  40c979:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  40c97c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c980:\t48 89 c7             \tmov    %rax,%rdi\n  40c983:\te8 63 fe ff ff       \tcallq  40c7eb <pbm_writepbmrow>\n  40c988:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40c98c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40c98f:\t3b 45 d8             \tcmp    -0x28(%rbp),%eax\n  40c992:\t7c cb                \tjl     40c95f <pbm_writepbm+0x38>\n  40c994:\t90                   \tnop\n  40c995:\t90                   \tnop\n  40c996:\tc9                   \tleaveq \n  40c997:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pbm_writepbm(FILE *a1, __int64 a2, unsigned int a3,\n                                signed int a4, int a5) {\n  __int64 v5;\n  __int64 v6;\n  __int64 result;\n  signed int <span class=\"supfact\">i</span>;\n  pbm_writepbminit(a1, a3, a4, a5);\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = (unsigned int)<span class=\"supfact\">i</span>;\n    if (<span class=\"supfact\">i</span> >= a4)\n      break;\n    pbm_writepbmrow(a1, *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + a2), a3, a5,\n                    v5, v6);\n  }\n  return result;\n}", "code_t": "void __cdecl pbm_writepbm(FILE *const fileP, bit **const bits, const int cols,\n                          const int rows, const int forceplain) {\n  int <span class=\"supfact\">row</span>;\n  pbm_writepbminit(fileP, cols, rows, forceplain);\n  for (<span class=\"supfact\">row</span> = Number; <span class=\"supfact\">row</span> < rows;\n       ++<span class=\"supfact\">row</span>)\n    pbm_writepbmrow(fileP, bits[<span class=\"supfact\">row</span>], cols, forceplain);\n}", "var": [{"name": "i", "type": "int", "ref_name": "row", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "zzilla", "repo_name": "CodeCollection", "path": "zzilla/CodeCollection/b368c3d6648f05157973d83f2df203d50cc140a158dcfd04ce7f6a661b320073", "path_in_repo": "zzilla/CodeCollection/OwnCode/ipCamera/Decode/ffmpeg/libavcodec/audiodsp.o", "objdump": "0000000000000038 <vector_clipf_c_opposite_sign>:\n  38:\t53                   \tpush   %rbx\n  39:\t48 83 ec 48          \tsub    $0x48,%rsp\n  3d:\t48 89 7c 24 20       \tmov    %rdi,0x20(%rsp)\n  42:\t48 89 74 24 18       \tmov    %rsi,0x18(%rsp)\n  47:\t48 89 54 24 10       \tmov    %rdx,0x10(%rsp)\n  4c:\t48 89 4c 24 08       \tmov    %rcx,0x8(%rsp)\n  51:\t44 89 44 24 04       \tmov    %r8d,0x4(%rsp)\n  56:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n  5b:\t8b 00                \tmov    (%rax),%eax\n  5d:\t89 44 24 40          \tmov    %eax,0x40(%rsp)\n  61:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  66:\t8b 00                \tmov    (%rax),%eax\n  68:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n  6c:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n  70:\t35 00 00 00 80       \txor    $0x80000000,%eax\n  75:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n  79:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n  7e:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n  83:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  88:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n  8d:\tc7 44 24 44 00 00 00 \tmovl   $0x0,0x44(%rsp)\n  94:\t00 \n  95:\te9 65 02 00 00       \tjmpq   2ff <vector_clipf_c_opposite_sign+0x2c7>\n  9a:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n  9e:\t48 98                \tcltq   \n  a0:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  a7:\t00 \n  a8:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  ad:\t48 01 d0             \tadd    %rdx,%rax\n  b0:\t8b 00                \tmov    (%rax),%eax\n  b2:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n  b6:\t48 63 d2             \tmovslq %edx,%rdx\n  b9:\t48 8d 0c 95 00 00 00 \tlea    0x0(,%rdx,4),%rcx\n  c0:\t00 \n  c1:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n  c6:\t48 8d 1c 11          \tlea    (%rcx,%rdx,1),%rbx\n  ca:\t8b 4c 24 38          \tmov    0x38(%rsp),%ecx\n  ce:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n  d2:\t8b 74 24 40          \tmov    0x40(%rsp),%esi\n  d6:\t89 c7                \tmov    %eax,%edi\n  d8:\te8 23 ff ff ff       \tcallq  0 <clipf_c_one>\n  dd:\t89 03                \tmov    %eax,(%rbx)\n  df:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n  e3:\t48 98                \tcltq   \n  e5:\t48 83 c0 01          \tadd    $0x1,%rax\n  e9:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  f0:\t00 \n  f1:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  f6:\t48 01 d0             \tadd    %rdx,%rax\n  f9:\t8b 00                \tmov    (%rax),%eax\n  fb:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n  ff:\t48 63 d2             \tmovslq %edx,%rdx\n 102:\t48 83 c2 01          \tadd    $0x1,%rdx\n 106:\t48 8d 0c 95 00 00 00 \tlea    0x0(,%rdx,4),%rcx\n 10d:\t00 \n 10e:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n 113:\t48 8d 1c 11          \tlea    (%rcx,%rdx,1),%rbx\n 117:\t8b 4c 24 38          \tmov    0x38(%rsp),%ecx\n 11b:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n 11f:\t8b 74 24 40          \tmov    0x40(%rsp),%esi\n 123:\t89 c7                \tmov    %eax,%edi\n 125:\te8 d6 fe ff ff       \tcallq  0 <clipf_c_one>\n 12a:\t89 03                \tmov    %eax,(%rbx)\n 12c:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n 130:\t48 98                \tcltq   \n 132:\t48 83 c0 02          \tadd    $0x2,%rax\n 136:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 13d:\t00 \n 13e:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n 143:\t48 01 d0             \tadd    %rdx,%rax\n 146:\t8b 00                \tmov    (%rax),%eax\n 148:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n 14c:\t48 63 d2             \tmovslq %edx,%rdx\n 14f:\t48 83 c2 02          \tadd    $0x2,%rdx\n 153:\t48 8d 0c 95 00 00 00 \tlea    0x0(,%rdx,4),%rcx\n 15a:\t00 \n 15b:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n 160:\t48 8d 1c 11          \tlea    (%rcx,%rdx,1),%rbx\n 164:\t8b 4c 24 38          \tmov    0x38(%rsp),%ecx\n 168:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n 16c:\t8b 74 24 40          \tmov    0x40(%rsp),%esi\n 170:\t89 c7                \tmov    %eax,%edi\n 172:\te8 89 fe ff ff       \tcallq  0 <clipf_c_one>\n 177:\t89 03                \tmov    %eax,(%rbx)\n 179:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n 17d:\t48 98                \tcltq   \n 17f:\t48 83 c0 03          \tadd    $0x3,%rax\n 183:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 18a:\t00 \n 18b:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n 190:\t48 01 d0             \tadd    %rdx,%rax\n 193:\t8b 00                \tmov    (%rax),%eax\n 195:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n 199:\t48 63 d2             \tmovslq %edx,%rdx\n 19c:\t48 83 c2 03          \tadd    $0x3,%rdx\n 1a0:\t48 8d 0c 95 00 00 00 \tlea    0x0(,%rdx,4),%rcx\n 1a7:\t00 \n 1a8:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n 1ad:\t48 8d 1c 11          \tlea    (%rcx,%rdx,1),%rbx\n 1b1:\t8b 4c 24 38          \tmov    0x38(%rsp),%ecx\n 1b5:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n 1b9:\t8b 74 24 40          \tmov    0x40(%rsp),%esi\n 1bd:\t89 c7                \tmov    %eax,%edi\n 1bf:\te8 3c fe ff ff       \tcallq  0 <clipf_c_one>\n 1c4:\t89 03                \tmov    %eax,(%rbx)\n 1c6:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n 1ca:\t48 98                \tcltq   \n 1cc:\t48 83 c0 04          \tadd    $0x4,%rax\n 1d0:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 1d7:\t00 \n 1d8:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n 1dd:\t48 01 d0             \tadd    %rdx,%rax\n 1e0:\t8b 00                \tmov    (%rax),%eax\n 1e2:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n 1e6:\t48 63 d2             \tmovslq %edx,%rdx\n 1e9:\t48 83 c2 04          \tadd    $0x4,%rdx\n 1ed:\t48 8d 0c 95 00 00 00 \tlea    0x0(,%rdx,4),%rcx\n 1f4:\t00 \n 1f5:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n 1fa:\t48 8d 1c 11          \tlea    (%rcx,%rdx,1),%rbx\n 1fe:\t8b 4c 24 38          \tmov    0x38(%rsp),%ecx\n 202:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n 206:\t8b 74 24 40          \tmov    0x40(%rsp),%esi\n 20a:\t89 c7                \tmov    %eax,%edi\n 20c:\te8 ef fd ff ff       \tcallq  0 <clipf_c_one>\n 211:\t89 03                \tmov    %eax,(%rbx)\n 213:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n 217:\t48 98                \tcltq   \n 219:\t48 83 c0 05          \tadd    $0x5,%rax\n 21d:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 224:\t00 \n 225:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n 22a:\t48 01 d0             \tadd    %rdx,%rax\n 22d:\t8b 00                \tmov    (%rax),%eax\n 22f:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n 233:\t48 63 d2             \tmovslq %edx,%rdx\n 236:\t48 83 c2 05          \tadd    $0x5,%rdx\n 23a:\t48 8d 0c 95 00 00 00 \tlea    0x0(,%rdx,4),%rcx\n 241:\t00 \n 242:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n 247:\t48 8d 1c 11          \tlea    (%rcx,%rdx,1),%rbx\n 24b:\t8b 4c 24 38          \tmov    0x38(%rsp),%ecx\n 24f:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n 253:\t8b 74 24 40          \tmov    0x40(%rsp),%esi\n 257:\t89 c7                \tmov    %eax,%edi\n 259:\te8 a2 fd ff ff       \tcallq  0 <clipf_c_one>\n 25e:\t89 03                \tmov    %eax,(%rbx)\n 260:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n 264:\t48 98                \tcltq   \n 266:\t48 83 c0 06          \tadd    $0x6,%rax\n 26a:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 271:\t00 \n 272:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n 277:\t48 01 d0             \tadd    %rdx,%rax\n 27a:\t8b 00                \tmov    (%rax),%eax\n 27c:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n 280:\t48 63 d2             \tmovslq %edx,%rdx\n 283:\t48 83 c2 06          \tadd    $0x6,%rdx\n 287:\t48 8d 0c 95 00 00 00 \tlea    0x0(,%rdx,4),%rcx\n 28e:\t00 \n 28f:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n 294:\t48 8d 1c 11          \tlea    (%rcx,%rdx,1),%rbx\n 298:\t8b 4c 24 38          \tmov    0x38(%rsp),%ecx\n 29c:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n 2a0:\t8b 74 24 40          \tmov    0x40(%rsp),%esi\n 2a4:\t89 c7                \tmov    %eax,%edi\n 2a6:\te8 55 fd ff ff       \tcallq  0 <clipf_c_one>\n 2ab:\t89 03                \tmov    %eax,(%rbx)\n 2ad:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n 2b1:\t48 98                \tcltq   \n 2b3:\t48 83 c0 07          \tadd    $0x7,%rax\n 2b7:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 2be:\t00 \n 2bf:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n 2c4:\t48 01 d0             \tadd    %rdx,%rax\n 2c7:\t8b 00                \tmov    (%rax),%eax\n 2c9:\t8b 54 24 44          \tmov    0x44(%rsp),%edx\n 2cd:\t48 63 d2             \tmovslq %edx,%rdx\n 2d0:\t48 83 c2 07          \tadd    $0x7,%rdx\n 2d4:\t48 8d 0c 95 00 00 00 \tlea    0x0(,%rdx,4),%rcx\n 2db:\t00 \n 2dc:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n 2e1:\t48 8d 1c 11          \tlea    (%rcx,%rdx,1),%rbx\n 2e5:\t8b 4c 24 38          \tmov    0x38(%rsp),%ecx\n 2e9:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n 2ed:\t8b 74 24 40          \tmov    0x40(%rsp),%esi\n 2f1:\t89 c7                \tmov    %eax,%edi\n 2f3:\te8 08 fd ff ff       \tcallq  0 <clipf_c_one>\n 2f8:\t89 03                \tmov    %eax,(%rbx)\n 2fa:\t83 44 24 44 08       \taddl   $0x8,0x44(%rsp)\n 2ff:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n 303:\t3b 44 24 04          \tcmp    0x4(%rsp),%eax\n 307:\t0f 8c 8d fd ff ff    \tjl     9a <vector_clipf_c_opposite_sign+0x62>\n 30d:\t90                   \tnop\n 30e:\t90                   \tnop\n 30f:\t48 83 c4 48          \tadd    $0x48,%rsp\n 313:\t5b                   \tpop    %rbx\n 314:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vector_clipf_c_opposite_sign(__int64 a1, __int64 a2,\n                                                unsigned int *a3,\n                                                unsigned int *a4, int a5) {\n  __int64 result;\n  unsigned int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v9</span> = *a3;\n  <span class=\"supfact\">v8</span> = *a4;\n  <span class=\"supfact\">v7</span> = *a4 ^ Number;\n  for (<span class=\"supfact\">i</span> = Number;; <span class=\"supfact\">i</span> += Number) {\n    result = <span class=\"supfact\">i</span>;\n    if ((int)<span class=\"supfact\">i</span> >= a5)\n      break;\n    *(_DWORD *)(Number L * (int)<span class=\"supfact\">i</span> + a1) =\n        clipf_c_one(*(_DWORD *)(Number L * (int)<span class=\"supfact\">i</span> + a2),\n                    <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n    *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a1) =\n        clipf_c_one(\n            *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a2),\n            <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n    *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a1) =\n        clipf_c_one(\n            *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a2),\n            <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n    *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a1) =\n        clipf_c_one(\n            *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a2),\n            <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n    *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a1) =\n        clipf_c_one(\n            *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a2),\n            <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n    *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a1) =\n        clipf_c_one(\n            *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a2),\n            <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n    *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a1) =\n        clipf_c_one(\n            *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a2),\n            <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n    *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a1) =\n        clipf_c_one(\n            *(_DWORD *)(Number * ((int)<span class=\"supfact\">i</span> + Number L) + a2),\n            <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n  }\n  return result;\n}", "code_t": "void __cdecl vector_clipf_c_opposite_sign(float *dst, const float *src,\n                                          float *min, float *max, int len) {\n  unsigned int <span class=\"supfact\">maxisign</span>;\n  uint32_t <span class=\"supfact\">maxi</span>;\n  uint32_t <span class=\"supfact\">mini</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">mini</span> = *(_DWORD *)min;\n  <span class=\"supfact\">maxi</span> = *(_DWORD *)max;\n  <span class=\"supfact\">maxisign</span> = *(_DWORD *)max ^ Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < len;\n       <span class=\"supfact\">i</span> += Number) {\n    LODWORD(dst[<span class=\"supfact\">i</span>]) =\n        clipf_c_one(LODWORD(src[<span class=\"supfact\">i</span>]), <span class=\"supfact\">mini</span>,\n                    <span class=\"supfact\">maxi</span>, <span class=\"supfact\">maxisign</span>);\n    LODWORD(dst[<span class=\"supfact\">i</span> + Number]) = clipf_c_one(\n        LODWORD(src[<span class=\"supfact\">i</span> + Number]), <span class=\"supfact\">mini</span>,\n        <span class=\"supfact\">maxi</span>, <span class=\"supfact\">maxisign</span>);\n    LODWORD(dst[<span class=\"supfact\">i</span> + Number]) = clipf_c_one(\n        LODWORD(src[<span class=\"supfact\">i</span> + Number]), <span class=\"supfact\">mini</span>,\n        <span class=\"supfact\">maxi</span>, <span class=\"supfact\">maxisign</span>);\n    LODWORD(dst[<span class=\"supfact\">i</span> + Number]) = clipf_c_one(\n        LODWORD(src[<span class=\"supfact\">i</span> + Number]), <span class=\"supfact\">mini</span>,\n        <span class=\"supfact\">maxi</span>, <span class=\"supfact\">maxisign</span>);\n    LODWORD(dst[<span class=\"supfact\">i</span> + Number]) = clipf_c_one(\n        LODWORD(src[<span class=\"supfact\">i</span> + Number]), <span class=\"supfact\">mini</span>,\n        <span class=\"supfact\">maxi</span>, <span class=\"supfact\">maxisign</span>);\n    LODWORD(dst[<span class=\"supfact\">i</span> + Number]) = clipf_c_one(\n        LODWORD(src[<span class=\"supfact\">i</span> + Number]), <span class=\"supfact\">mini</span>,\n        <span class=\"supfact\">maxi</span>, <span class=\"supfact\">maxisign</span>);\n    LODWORD(dst[<span class=\"supfact\">i</span> + Number]) = clipf_c_one(\n        LODWORD(src[<span class=\"supfact\">i</span> + Number]), <span class=\"supfact\">mini</span>,\n        <span class=\"supfact\">maxi</span>, <span class=\"supfact\">maxisign</span>);\n    LODWORD(dst[<span class=\"supfact\">i</span> + Number]) = clipf_c_one(\n        LODWORD(src[<span class=\"supfact\">i</span> + Number]), <span class=\"supfact\">mini</span>,\n        <span class=\"supfact\">maxi</span>, <span class=\"supfact\">maxisign</span>);\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v9", "type": "uint32_t", "ref_name": "mini", "ref_type": "uint32_t"}, {"name": "v8", "type": "uint32_t", "ref_name": "maxi", "ref_type": "uint32_t"}, {"name": "v7", "type": "uint32_t", "ref_name": "maxisign", "ref_type": "unsigned int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "timydaley", "repo_name": "preseq_dev", "path": "timydaley/preseq_dev/3c8769021f51ed4621c8244f700e9083085908d152c6a6cf550dd07689e6f375", "path_in_repo": "timydaley/preseq_dev/smithlab_cpp/GenomicRegion.o", "objdump": "0000000000000000 <_ZNKSt6vectorI13GenomicRegionSaIS0_EE3endEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  18:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  1c:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  20:\t48 89 d6             \tmov    %rdx,%rsi\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZNKSt6vectorI13GenomicRegionSaIS0_EE3endEv+0x2b>\n  2b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  2f:\tc9                   \tleaveq \n  30:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<GenomicRegion> end(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_QWORD *)(a1 + Number);\n  __gnu_cxx __normal_iterator<GenomicRegion const *, std vector<GenomicRegion>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>, &<span class=\"supfact\">v3</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "__int64 __fastcall std vector<GenomicRegion> end(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_QWORD *)(a1 + Number);\n  __gnu_cxx __normal_iterator<GenomicRegion const *, std vector<GenomicRegion>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>, &<span class=\"supfact\">v3</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v3", "type": "__int64", "ref_name": "v3", "ref_type": "__int64"}, {"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "__int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/b534a66dd5f2266c09081201bdebe0d8411d58e1af0a1570751a1779b1566328", "path_in_repo": "madeye/GRACE/qemu-0.12.5/ppc64abi32-linux-user/translate.o", "objdump": "000000000000c63d <gen_mulhw>:\n    c63d:\t55                   \tpush   %rbp\n    c63e:\t48 89 e5             \tmov    %rsp,%rbp\n    c641:\t48 83 ec 20          \tsub    $0x20,%rsp\n    c645:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    c649:\te8 65 3b ff ff       \tcallq  1b3 <tcg_temp_new_i64>\n    c64e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    c651:\te8 5d 3b ff ff       \tcallq  1b3 <tcg_temp_new_i64>\n    c656:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    c659:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    c65d:\t8b 40 10             \tmov    0x10(%rax),%eax\n    c660:\t89 c7                \tmov    %eax,%edi\n    c662:\te8 9f e1 ff ff       \tcallq  a806 <rA>\n    c667:\t89 c0                \tmov    %eax,%eax\n    c669:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    c670:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    c673:\t89 d6                \tmov    %edx,%esi\n    c675:\t89 c7                \tmov    %eax,%edi\n    c677:\te8 7a 50 ff ff       \tcallq  16f6 <tcg_gen_ext32s_i64>\n    c67c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    c680:\t8b 40 10             \tmov    0x10(%rax),%eax\n    c683:\t89 c7                \tmov    %eax,%edi\n    c685:\te8 8e e1 ff ff       \tcallq  a818 <rB>\n    c68a:\t89 c0                \tmov    %eax,%eax\n    c68c:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    c693:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    c696:\t89 d6                \tmov    %edx,%esi\n    c698:\t89 c7                \tmov    %eax,%edi\n    c69a:\te8 57 50 ff ff       \tcallq  16f6 <tcg_gen_ext32s_i64>\n    c69f:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    c6a2:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n    c6a5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    c6a8:\t89 ce                \tmov    %ecx,%esi\n    c6aa:\t89 c7                \tmov    %eax,%edi\n    c6ac:\te8 48 4d ff ff       \tcallq  13f9 <tcg_gen_mul_i64>\n    c6b1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    c6b5:\t8b 40 10             \tmov    0x10(%rax),%eax\n    c6b8:\t89 c7                \tmov    %eax,%edi\n    c6ba:\te8 23 e1 ff ff       \tcallq  a7e2 <rD>\n    c6bf:\t89 c0                \tmov    %eax,%eax\n    c6c1:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    c6c8:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n    c6cb:\tba 20 00 00 00       \tmov    $0x20,%edx\n    c6d0:\t89 ce                \tmov    %ecx,%esi\n    c6d2:\t89 c7                \tmov    %eax,%edi\n    c6d4:\te8 0f 4c ff ff       \tcallq  12e8 <tcg_gen_shri_i64>\n    c6d9:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    c6dc:\t89 c7                \tmov    %eax,%edi\n    c6de:\te8 00 00 00 00       \tcallq  c6e3 <gen_mulhw+0xa6>\n    c6e3:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    c6e6:\t89 c7                \tmov    %eax,%edi\n    c6e8:\te8 00 00 00 00       \tcallq  c6ed <gen_mulhw+0xb0>\n    c6ed:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    c6f1:\t8b 40 10             \tmov    0x10(%rax),%eax\n    c6f4:\t89 c7                \tmov    %eax,%edi\n    c6f6:\te8 d8 e0 ff ff       \tcallq  a7d3 <Rc>\n    c6fb:\t85 c0                \ttest   %eax,%eax\n    c6fd:\t0f 95 c0             \tsetne  %al\n    c700:\t0f b6 c0             \tmovzbl %al,%eax\n    c703:\t48 85 c0             \ttest   %rax,%rax\n    c706:\t74 25                \tje     c72d <gen_mulhw+0xf0>\n    c708:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    c70c:\t8b 40 10             \tmov    0x10(%rax),%eax\n    c70f:\t89 c7                \tmov    %eax,%edi\n    c711:\te8 cc e0 ff ff       \tcallq  a7e2 <rD>\n    c716:\t89 c0                \tmov    %eax,%eax\n    c718:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    c71f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    c723:\t89 d6                \tmov    %edx,%esi\n    c725:\t48 89 c7             \tmov    %rax,%rdi\n    c728:\te8 d8 e6 ff ff       \tcallq  ae05 <gen_set_Rc0>\n    c72d:\t90                   \tnop\n    c72e:\tc9                   \tleaveq \n    c72f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gen_mulhw(__int64 a1) {\n  int v1;\n  int v2;\n  int v3;\n  __int64 result;\n  int v5;\n  unsigned int <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = tcg_temp_new_i64();\n  <span class=\"supfact\">v6</span> = tcg_temp_new_i64();\n  v1 = rA(*(_DWORD *)(a1 + Number));\n  tcg_gen_ext32s_i64(<span class=\"supfact\">v7</span>, cpu_gpr[v1]);\n  v2 = rB(*(_DWORD *)(a1 + Number));\n  tcg_gen_ext32s_i64(<span class=\"supfact\">v6</span>, cpu_gpr[v2]);\n  tcg_gen_mul_i64(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v7</span>, <span class=\"supfact\">v6</span>);\n  v3 = rD(*(_DWORD *)(a1 + Number));\n  tcg_gen_shri_i64(cpu_gpr[v3], <span class=\"supfact\">v7</span>, Number L);\n  tcg_temp_free_i64(<span class=\"supfact\">v7</span>);\n  tcg_temp_free_i64(<span class=\"supfact\">v6</span>);\n  result = (unsigned int)Rc(*(_DWORD *)(a1 + Number)) != Number;\n  if (result) {\n    v5 = rD(*(_DWORD *)(a1 + Number));\n    result = gen_set_Rc0(a1, cpu_gpr[v5]);\n  }\n  return result;\n}", "code_t": "void __cdecl gen_mulhw(DisasContext_0 *ctx) {\n  uint32_t v1;\n  uint32_t v2;\n  uint32_t v3;\n  TCGv_i64 v4;\n  unsigned int <span class=\"supfact\">t1</span>;\n  unsigned int <span class=\"supfact\">t0</span>;\n  <span class=\"supfact\">t0</span> = tcg_temp_new_i64();\n  <span class=\"supfact\">t1</span> = tcg_temp_new_i64();\n  v1 = rA(ctx->opcode);\n  tcg_gen_ext32s_i64(<span class=\"supfact\">t0</span>, cpu_gpr[v1]);\n  v2 = rB(ctx->opcode);\n  tcg_gen_ext32s_i64(<span class=\"supfact\">t1</span>, cpu_gpr[v2]);\n  tcg_gen_mul_i64(<span class=\"supfact\">t0</span>, <span class=\"supfact\">t0</span>, <span class=\"supfact\">t1</span>);\n  v3 = rD(ctx->opcode);\n  tcg_gen_shri_i64(cpu_gpr[v3], <span class=\"supfact\">t0</span>, Number L);\n  tcg_temp_free_i64(<span class=\"supfact\">t0</span>);\n  tcg_temp_free_i64(<span class=\"supfact\">t1</span>);\n  if (Rc(ctx->opcode)) {\n    v4 = cpu_gpr[rD(ctx->opcode)];\n    gen_set_Rc0(ctx, v4);\n  }\n}", "var": [{"name": "v7", "type": "unsigned int", "ref_name": "t0", "ref_type": "unsigned int"}, {"name": "v6", "type": "unsigned int", "ref_name": "t1", "ref_type": "unsigned int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/06a0883dfe291ffc56f5aa7b4884149acf999e6b9b475cad0006ec6aeea02724", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/machine/upd4701.o", "objdump": "000000000000026c <_Z13upd4701_y_addP8device_tjtt>:\n 26c:\t55                   \tpush   %rbp\n 26d:\t48 89 e5             \tmov    %rsp,%rbp\n 270:\t48 83 ec 30          \tsub    $0x30,%rsp\n 274:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 278:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n 27b:\t89 c8                \tmov    %ecx,%eax\n 27d:\t66 89 55 e0          \tmov    %dx,-0x20(%rbp)\n 281:\t66 89 45 dc          \tmov    %ax,-0x24(%rbp)\n 285:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 289:\t48 89 c7             \tmov    %rax,%rdi\n 28c:\te8 6f fd ff ff       \tcallq  0 <_ZL14get_safe_tokenP8device_t>\n 291:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 295:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 299:\t8b 40 10             \tmov    0x10(%rax),%eax\n 29c:\t85 c0                \ttest   %eax,%eax\n 29e:\t75 30                \tjne    2d0 <_Z13upd4701_y_addP8device_tjtt+0x64>\n 2a0:\t66 83 7d e0 00       \tcmpw   $0x0,-0x20(%rbp)\n 2a5:\t74 29                \tje     2d0 <_Z13upd4701_y_addP8device_tjtt+0x64>\n 2a7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2ab:\t8b 50 28             \tmov    0x28(%rax),%edx\n 2ae:\t0f b7 45 e0          \tmovzwl -0x20(%rbp),%eax\n 2b2:\t01 c2                \tadd    %eax,%edx\n 2b4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2b8:\t89 50 28             \tmov    %edx,0x28(%rax)\n 2bb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2bf:\t8b 00                \tmov    (%rax),%eax\n 2c1:\t85 c0                \ttest   %eax,%eax\n 2c3:\t74 0b                \tje     2d0 <_Z13upd4701_y_addP8device_tjtt+0x64>\n 2c5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2c9:\tc7 40 34 00 00 00 00 \tmovl   $0x0,0x34(%rax)\n 2d0:\t90                   \tnop\n 2d1:\tc9                   \tleaveq \n 2d2:\tc3                   \tretq   ", "code_s": "unsigned int *__fastcall upd4701_y_add(device_t *a1, __int64 a2,\n                                       unsigned __int16 a3) {\n  unsigned int *result;\n  unsigned int *<span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = (unsigned int *)get_safe_token(a1);\n  result = (unsigned int *)<span class=\"supfact\">v5</span>[Number];\n  if (!(_DWORD)result && a3) {\n    <span class=\"supfact\">v5</span>[Number] += a3;\n    result = (unsigned int *)*<span class=\"supfact\">v5</span>;\n    if ((_DWORD)result) {\n      result = <span class=\"supfact\">v5</span>;\n      <span class=\"supfact\">v5</span>[Number] = Number;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl upd4701_y_add(device_t *device, offs_t offset, UINT16 data,\n                           UINT16 mem_mask) {\n  upd4701_state *<span class=\"supfact\">upd4701</span>;\n  <span class=\"supfact\">upd4701</span> = get_safe_token(device);\n  if (!<span class=\"supfact\">upd4701</span>->resety && data) {\n    <span class=\"supfact\">upd4701</span>->y += data;\n    if (<span class=\"supfact\">upd4701</span>->cs)\n      <span class=\"supfact\">upd4701</span>->cf = Number;\n  }\n}", "var": [{"name": "v5", "type": "jsmntok_t *", "ref_name": "upd4701", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "SamsungARTIK", "repo_name": "linux-artik", "path": "SamsungARTIK/linux-artik/27ce659e0400a2e1da4e33680d509e5b664b1f24d4af01d815b1f95d58268683", "path_in_repo": "SamsungARTIK/linux-artik/tools/lib/lockdep/liblockdep-in.o", "objdump": "0000000000002ba4 <mark_lock>:\n    2ba4:\t55                   \tpush   %rbp\n    2ba5:\t48 89 e5             \tmov    %rsp,%rbp\n    2ba8:\t48 83 ec 30          \tsub    $0x30,%rsp\n    2bac:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    2bb0:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    2bb4:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n    2bb7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    2bba:\tba 01 00 00 00       \tmov    $0x1,%edx\n    2bbf:\t89 c1                \tmov    %eax,%ecx\n    2bc1:\td3 e2                \tshl    %cl,%edx\n    2bc3:\t89 d0                \tmov    %edx,%eax\n    2bc5:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    2bc8:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n    2bcf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2bd3:\t48 89 c7             \tmov    %rax,%rdi\n    2bd6:\te8 01 d8 ff ff       \tcallq  3dc <hlock_class>\n    2bdb:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n    2bdf:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    2be2:\t48 21 d0             \tand    %rdx,%rax\n    2be5:\t48 85 c0             \ttest   %rax,%rax\n    2be8:\t74 0a                \tje     2bf4 <mark_lock+0x50>\n    2bea:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    2bef:\te9 34 01 00 00       \tjmpq   2d28 <mark_lock+0x184>\n    2bf4:\te8 2d d7 ff ff       \tcallq  326 <graph_lock>\n    2bf9:\t85 c0                \ttest   %eax,%eax\n    2bfb:\t75 0a                \tjne    2c07 <mark_lock+0x63>\n    2bfd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2c02:\te9 21 01 00 00       \tjmpq   2d28 <mark_lock+0x184>\n    2c07:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2c0b:\t48 89 c7             \tmov    %rax,%rdi\n    2c0e:\te8 c9 d7 ff ff       \tcallq  3dc <hlock_class>\n    2c13:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n    2c17:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    2c1a:\t48 21 d0             \tand    %rdx,%rax\n    2c1d:\t48 85 c0             \ttest   %rax,%rax\n    2c20:\t74 0f                \tje     2c31 <mark_lock+0x8d>\n    2c22:\te8 48 d7 ff ff       \tcallq  36f <graph_unlock>\n    2c27:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    2c2c:\te9 f7 00 00 00       \tjmpq   2d28 <mark_lock+0x184>\n    2c31:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2c35:\t48 89 c7             \tmov    %rax,%rdi\n    2c38:\te8 9f d7 ff ff       \tcallq  3dc <hlock_class>\n    2c3d:\t48 8b 48 30          \tmov    0x30(%rax),%rcx\n    2c41:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    2c44:\t48 09 ca             \tor     %rcx,%rdx\n    2c47:\t48 89 50 30          \tmov    %rdx,0x30(%rax)\n    2c4b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2c4f:\t48 89 c7             \tmov    %rax,%rdi\n    2c52:\te8 85 d7 ff ff       \tcallq  3dc <hlock_class>\n    2c57:\t48 8d 48 38          \tlea    0x38(%rax),%rcx\n    2c5b:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    2c5e:\t48 89 d0             \tmov    %rdx,%rax\n    2c61:\t48 01 c0             \tadd    %rax,%rax\n    2c64:\t48 01 d0             \tadd    %rdx,%rax\n    2c67:\t48 c1 e0 03          \tshl    $0x3,%rax\n    2c6b:\t48 01 c8             \tadd    %rcx,%rax\n    2c6e:\t48 89 c7             \tmov    %rax,%rdi\n    2c71:\te8 2b d8 ff ff       \tcallq  4a1 <save_trace>\n    2c76:\t85 c0                \ttest   %eax,%eax\n    2c78:\t75 0a                \tjne    2c84 <mark_lock+0xe0>\n    2c7a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2c7f:\te9 a4 00 00 00       \tjmpq   2d28 <mark_lock+0x184>\n    2c84:\t83 7d dc 0b          \tcmpl   $0xb,-0x24(%rbp)\n    2c88:\t76 08                \tjbe    2c92 <mark_lock+0xee>\n    2c8a:\t83 7d dc 0c          \tcmpl   $0xc,-0x24(%rbp)\n    2c8e:\t74 3f                \tje     2ccf <mark_lock+0x12b>\n    2c90:\teb 26                \tjmp    2cb8 <mark_lock+0x114>\n    2c92:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    2c95:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    2c99:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c9d:\t48 89 ce             \tmov    %rcx,%rsi\n    2ca0:\t48 89 c7             \tmov    %rax,%rdi\n    2ca3:\te8 b6 fe ff ff       \tcallq  2b5e <mark_lock_irq>\n    2ca8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    2cab:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    2caf:\t75 21                \tjne    2cd2 <mark_lock+0x12e>\n    2cb1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2cb6:\teb 70                \tjmp    2d28 <mark_lock+0x184>\n    2cb8:\te8 ff d6 ff ff       \tcallq  3bc <debug_locks_off_graph_unlock>\n    2cbd:\t85 c0                \ttest   %eax,%eax\n    2cbf:\t75 07                \tjne    2cc8 <mark_lock+0x124>\n    2cc1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2cc6:\teb 60                \tjmp    2d28 <mark_lock+0x184>\n    2cc8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2ccd:\teb 59                \tjmp    2d28 <mark_lock+0x184>\n    2ccf:\t90                   \tnop\n    2cd0:\teb 01                \tjmp    2cd3 <mark_lock+0x12f>\n    2cd2:\t90                   \tnop\n    2cd3:\te8 97 d6 ff ff       \tcallq  36f <graph_unlock>\n    2cd8:\t83 7d fc 02          \tcmpl   $0x2,-0x4(%rbp)\n    2cdc:\t75 47                \tjne    2d25 <mark_lock+0x181>\n    2cde:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    2ce1:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    2ce8:\t00 \n    2ce9:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 2cf0 <mark_lock+0x14c>\n    2cf0:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n    2cf4:\t48 89 c6             \tmov    %rax,%rsi\n    2cf7:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2cfe <mark_lock+0x15a>\n    2cfe:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2d03:\te8 00 00 00 00       \tcallq  2d08 <mark_lock+0x164>\n    2d08:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2d0c:\t48 89 c7             \tmov    %rax,%rdi\n    2d0f:\te8 37 dc ff ff       \tcallq  94b <print_lock>\n    2d14:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2d18:\t48 89 c7             \tmov    %rax,%rdi\n    2d1b:\te8 36 d5 ff ff       \tcallq  256 <print_irqtrace_events>\n    2d20:\te8 e9 d4 ff ff       \tcallq  20e <dump_stack>\n    2d25:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    2d28:\tc9                   \tleaveq \n    2d29:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mark_lock(__int64 a1, __int64 a2, unsigned int a3) {\n  char *v4;\n  char *v5;\n  const char *v6;\n  unsigned int <span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v9</span> = Number << a3;\n  <span class=\"supfact\">v10</span> = Number;\n  if ((*((_QWORD *)hlock_class(a2) + Number) & (unsigned int)(Number << a3)) !=\n      Number L)\n    return Number L;\n  if (!(unsigned int)graph_lock())\n    return Number L;\n  if ((*((_QWORD *)hlock_class(a2) + Number) & <span class=\"supfact\">v9</span>) !=\n      Number L) {\n    graph_unlock();\n    return Number L;\n  }\n  v4 = hlock_class(a2);\n  *((_QWORD *)v4 + Number) |= <span class=\"supfact\">v9</span>;\n  v5 = hlock_class(a2);\n  if (!(unsigned int)save_trace((int *)&v5[Number * a3 + Number]))\n    return Number L;\n  if (a3 <= Number) {\n    <span class=\"supfact\">v10</span> = mark_lock_irq(a1, a2, a3);\n    if (!<span class=\"supfact\">v10</span>)\n      return Number L;\n  } else if (a3 != Number) {\n    debug_locks_off_graph_unlock();\n    return Number L;\n  }\n  graph_unlock();\n  if (<span class=\"supfact\">v10</span> == Number) {\n    v6 = (&usage_str)[a3];\n    printf(String, v6);\n    print_lock(a2);\n    print_irqtrace_events();\n    dump_stack(a1, v6);\n  }\n  return <span class=\"supfact\">v10</span>;\n}", "code_t": "int __cdecl mark_lock(task_struct *curr, held_lock *this,\n                      lock_usage_bit new_bit) {\n  lock_class *v4;\n  lock_class *v5;\n  unsigned int <span class=\"supfact\">new_mask</span>;\n  unsigned int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">new_mask</span> = Number << new_bit;\n  <span class=\"supfact\">ret</span> = Number;\n  if ((hlock_class(this)->usage_mask & (unsigned int)(Number << new_bit)) !=\n      Number)\n    return Number;\n  if (!graph_lock())\n    return Number;\n  if ((hlock_class(this)->usage_mask & <span class=\"supfact\">new_mask</span>) != Number) {\n    graph_unlock();\n    return Number;\n  }\n  v4 = hlock_class(this);\n  v4->usage_mask |= <span class=\"supfact\">new_mask</span>;\n  v5 = hlock_class(this);\n  if (!save_trace(&v5->usage_traces[new_bit]))\n    return Number;\n  if ((unsigned int)new_bit <= LOCK_ENABLED_RECLAIM_FS_READ) {\n    <span class=\"supfact\">ret</span> = mark_lock_irq(curr, this, new_bit);\n    if (!<span class=\"supfact\">ret</span>)\n      return Number;\n  } else if (new_bit != LOCK_USED) {\n    debug_locks_off_graph_unlock();\n    return Number;\n  }\n  graph_unlock();\n  if (<span class=\"supfact\">ret</span> == Number) {\n    printf(String, usage_str[new_bit]);\n    print_lock(this);\n    print_irqtrace_events(curr);\n    dump_stack();\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v10", "type": "unsigned int", "ref_name": "ret", "ref_type": "unsigned int"}, {"name": "v9", "type": "unsigned int", "ref_name": "new_mask", "ref_type": "unsigned int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "forrest898", "repo_name": "Sample_Interface_HPL_Testing", "path": "forrest898/Sample_Interface_HPL_Testing/6db82e56bdd7670f5d78a6a79cb76f675480fd8dacf457b8801de94e4181bf6c", "path_in_repo": "forrest898/Sample_Interface_HPL_Testing/papi/src/libpfm4/perf_examples/syst_smpl", "objdump": "000000000041047c <pfm_netburst_detect>:\n  41047c:\t55                   \tpush   %rbp\n  41047d:\t48 89 e5             \tmov    %rsp,%rbp\n  410480:\t48 83 ec 20          \tsub    $0x20,%rsp\n  410484:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  410488:\te8 10 b1 ff ff       \tcallq  40b59d <pfm_intel_x86_detect>\n  41048d:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  410490:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  410494:\t74 05                \tje     41049b <pfm_netburst_detect+0x1f>\n  410496:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  410499:\teb 39                \tjmp    4104d4 <pfm_netburst_detect+0x58>\n  41049b:\t8b 05 c3 1a 0c 00    \tmov    0xc1ac3(%rip),%eax        # 4d1f64 <pfm_intel_x86_cfg+0x4>\n  4104a1:\t83 f8 0f             \tcmp    $0xf,%eax\n  4104a4:\t74 07                \tje     4104ad <pfm_netburst_detect+0x31>\n  4104a6:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4104ab:\teb 27                \tjmp    4104d4 <pfm_netburst_detect+0x58>\n  4104ad:\t8b 05 ad 1a 0c 00    \tmov    0xc1aad(%rip),%eax        # 4d1f60 <pfm_intel_x86_cfg>\n  4104b3:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4104b6:\t83 7d f8 03          \tcmpl   $0x3,-0x8(%rbp)\n  4104ba:\t74 0c                \tje     4104c8 <pfm_netburst_detect+0x4c>\n  4104bc:\t83 7d f8 04          \tcmpl   $0x4,-0x8(%rbp)\n  4104c0:\t74 06                \tje     4104c8 <pfm_netburst_detect+0x4c>\n  4104c2:\t83 7d f8 06          \tcmpl   $0x6,-0x8(%rbp)\n  4104c6:\t75 07                \tjne    4104cf <pfm_netburst_detect+0x53>\n  4104c8:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4104cd:\teb 05                \tjmp    4104d4 <pfm_netburst_detect+0x58>\n  4104cf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4104d4:\tc9                   \tleaveq \n  4104d5:\tc3                   \tretq   ", "code_s": "__int64 pfm_netburst_detect() {\n  unsigned int <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = pfm_intel_x86_detect();\n  if (<span class=\"supfact\">v1</span>)\n    return <span class=\"supfact\">v1</span>;\n  if (dword_4D1F64 != Number)\n    return Number;\n  if (pfm_intel_x86_cfg == Number || pfm_intel_x86_cfg == Number ||\n      pfm_intel_x86_cfg == Number)\n    return Number;\n  return Number L;\n}", "code_t": "int __cdecl pfm_netburst_detect(void *this) {\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = pfm_intel_x86_detect();\n  if (<span class=\"supfact\">ret</span>)\n    return <span class=\"supfact\">ret</span>;\n  if (pfm_intel_x86_cfg.family != Number)\n    return Number;\n  if (pfm_intel_x86_cfg.model == Number || pfm_intel_x86_cfg.model == Number ||\n      pfm_intel_x86_cfg.model == Number)\n    return Number;\n  return Number;\n}", "var": [{"name": "v1", "type": "int", "ref_name": "ret", "ref_type": "int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "lfgGitHub", "repo_name": "x264", "path": "lfgGitHub/x264/d3eaede1055e0e73de4fab2d8686f09caefde141f9a2afd43c21ac69173ae173", "path_in_repo": "lfgGitHub/x264//common/x86/mc-c-10.o", "objdump": "000000000000175c <plane_copy_swap_avx2>:\n    175c:\t48 81 ec b8 00 00 00 \tsub    $0xb8,%rsp\n    1763:\t48 89 7c 24 38       \tmov    %rdi,0x38(%rsp)\n    1768:\t48 89 74 24 30       \tmov    %rsi,0x30(%rsp)\n    176d:\t48 89 54 24 28       \tmov    %rdx,0x28(%rsp)\n    1772:\t48 89 4c 24 20       \tmov    %rcx,0x20(%rsp)\n    1777:\t44 89 44 24 1c       \tmov    %r8d,0x1c(%rsp)\n    177c:\t44 89 4c 24 18       \tmov    %r9d,0x18(%rsp)\n    1781:\tc7 44 24 78 07 00 00 \tmovl   $0x7,0x78(%rsp)\n    1788:\t00 \n    1789:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    178d:\t23 44 24 78          \tand    0x78(%rsp),%eax\n    1791:\t85 c0                \ttest   %eax,%eax\n    1793:\t75 30                \tjne    17c5 <plane_copy_swap_avx2+0x69>\n    1795:\t44 8b 44 24 18       \tmov    0x18(%rsp),%r8d\n    179a:\t8b 7c 24 1c          \tmov    0x1c(%rsp),%edi\n    179e:\t48 8b 4c 24 20       \tmov    0x20(%rsp),%rcx\n    17a3:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    17a8:\t48 8b 74 24 30       \tmov    0x30(%rsp),%rsi\n    17ad:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    17b2:\t45 89 c1             \tmov    %r8d,%r9d\n    17b5:\t41 89 f8             \tmov    %edi,%r8d\n    17b8:\t48 89 c7             \tmov    %rax,%rdi\n    17bb:\te8 00 00 00 00       \tcallq  17c0 <plane_copy_swap_avx2+0x64>\n    17c0:\te9 bf 01 00 00       \tjmpq   1984 <plane_copy_swap_avx2+0x228>\n    17c5:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    17c9:\t3b 44 24 78          \tcmp    0x78(%rsp),%eax\n    17cd:\t0f 8e 86 01 00 00    \tjle    1959 <plane_copy_swap_avx2+0x1fd>\n    17d3:\t83 6c 24 18 01       \tsubl   $0x1,0x18(%rsp)\n    17d8:\t83 7c 24 18 00       \tcmpl   $0x0,0x18(%rsp)\n    17dd:\t0f 8e c2 00 00 00    \tjle    18a5 <plane_copy_swap_avx2+0x149>\n    17e3:\t48 83 7c 24 20 00    \tcmpq   $0x0,0x20(%rsp)\n    17e9:\t7e 62                \tjle    184d <plane_copy_swap_avx2+0xf1>\n    17eb:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n    17ef:\t8b 44 24 78          \tmov    0x78(%rsp),%eax\n    17f3:\t01 c2                \tadd    %eax,%edx\n    17f5:\t8b 44 24 78          \tmov    0x78(%rsp),%eax\n    17f9:\tf7 d0                \tnot    %eax\n    17fb:\t21 c2                \tand    %eax,%edx\n    17fd:\t41 89 d0             \tmov    %edx,%r8d\n    1800:\t8b 7c 24 18          \tmov    0x18(%rsp),%edi\n    1804:\t48 8b 4c 24 20       \tmov    0x20(%rsp),%rcx\n    1809:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    180e:\t48 8b 74 24 30       \tmov    0x30(%rsp),%rsi\n    1813:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1818:\t41 89 f9             \tmov    %edi,%r9d\n    181b:\t48 89 c7             \tmov    %rax,%rdi\n    181e:\te8 00 00 00 00       \tcallq  1823 <plane_copy_swap_avx2+0xc7>\n    1823:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    1827:\t48 98                \tcltq   \n    1829:\t48 0f af 44 24 30    \timul   0x30(%rsp),%rax\n    182f:\t48 01 c0             \tadd    %rax,%rax\n    1832:\t48 01 44 24 38       \tadd    %rax,0x38(%rsp)\n    1837:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    183b:\t48 98                \tcltq   \n    183d:\t48 0f af 44 24 20    \timul   0x20(%rsp),%rax\n    1843:\t48 01 c0             \tadd    %rax,%rax\n    1846:\t48 01 44 24 28       \tadd    %rax,0x28(%rsp)\n    184b:\teb 58                \tjmp    18a5 <plane_copy_swap_avx2+0x149>\n    184d:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n    1851:\t8b 44 24 78          \tmov    0x78(%rsp),%eax\n    1855:\t01 c2                \tadd    %eax,%edx\n    1857:\t8b 44 24 78          \tmov    0x78(%rsp),%eax\n    185b:\tf7 d0                \tnot    %eax\n    185d:\t21 c2                \tand    %eax,%edx\n    185f:\t41 89 d0             \tmov    %edx,%r8d\n    1862:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    1867:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    186b:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1870:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n    1874:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    1879:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    187d:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1882:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n    1886:\t8b 4c 24 18          \tmov    0x18(%rsp),%ecx\n    188a:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n    188f:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    1894:\t41 89 c9             \tmov    %ecx,%r9d\n    1897:\t48 89 d1             \tmov    %rdx,%rcx\n    189a:\t48 89 f2             \tmov    %rsi,%rdx\n    189d:\t48 89 c6             \tmov    %rax,%rsi\n    18a0:\te8 00 00 00 00       \tcallq  18a5 <plane_copy_swap_avx2+0x149>\n    18a5:\t8b 44 24 78          \tmov    0x78(%rsp),%eax\n    18a9:\tf7 d0                \tnot    %eax\n    18ab:\t23 44 24 1c          \tand    0x1c(%rsp),%eax\n    18af:\t89 c1                \tmov    %eax,%ecx\n    18b1:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    18b6:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    18bb:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n    18c1:\t41 89 c8             \tmov    %ecx,%r8d\n    18c4:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    18c9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    18ce:\t48 89 c7             \tmov    %rax,%rdi\n    18d1:\te8 00 00 00 00       \tcallq  18d6 <plane_copy_swap_avx2+0x17a>\n    18d6:\t8b 44 24 78          \tmov    0x78(%rsp),%eax\n    18da:\tf7 d0                \tnot    %eax\n    18dc:\t23 44 24 1c          \tand    0x1c(%rsp),%eax\n    18e0:\t01 c0                \tadd    %eax,%eax\n    18e2:\t89 44 24 7c          \tmov    %eax,0x7c(%rsp)\n    18e6:\teb 63                \tjmp    194b <plane_copy_swap_avx2+0x1ef>\n    18e8:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    18ec:\t48 98                \tcltq   \n    18ee:\t48 83 c0 01          \tadd    $0x1,%rax\n    18f2:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    18f6:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    18fb:\t48 01 d0             \tadd    %rdx,%rax\n    18fe:\t8b 54 24 7c          \tmov    0x7c(%rsp),%edx\n    1902:\t48 63 d2             \tmovslq %edx,%rdx\n    1905:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n    1909:\t48 8b 54 24 38       \tmov    0x38(%rsp),%rdx\n    190e:\t48 01 ca             \tadd    %rcx,%rdx\n    1911:\t0f b7 00             \tmovzwl (%rax),%eax\n    1914:\t66 89 02             \tmov    %ax,(%rdx)\n    1917:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    191b:\t48 98                \tcltq   \n    191d:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    1921:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1926:\t48 01 d0             \tadd    %rdx,%rax\n    1929:\t8b 54 24 7c          \tmov    0x7c(%rsp),%edx\n    192d:\t48 63 d2             \tmovslq %edx,%rdx\n    1930:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1934:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n    1938:\t48 8b 54 24 38       \tmov    0x38(%rsp),%rdx\n    193d:\t48 01 ca             \tadd    %rcx,%rdx\n    1940:\t0f b7 00             \tmovzwl (%rax),%eax\n    1943:\t66 89 02             \tmov    %ax,(%rdx)\n    1946:\t83 44 24 7c 02       \taddl   $0x2,0x7c(%rsp)\n    194b:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    194f:\t01 c0                \tadd    %eax,%eax\n    1951:\t39 44 24 7c          \tcmp    %eax,0x7c(%rsp)\n    1955:\t7c 91                \tjl     18e8 <plane_copy_swap_avx2+0x18c>\n    1957:\teb 2b                \tjmp    1984 <plane_copy_swap_avx2+0x228>\n    1959:\t44 8b 44 24 18       \tmov    0x18(%rsp),%r8d\n    195e:\t8b 7c 24 1c          \tmov    0x1c(%rsp),%edi\n    1962:\t48 8b 4c 24 20       \tmov    0x20(%rsp),%rcx\n    1967:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    196c:\t48 8b 74 24 30       \tmov    0x30(%rsp),%rsi\n    1971:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1976:\t45 89 c1             \tmov    %r8d,%r9d\n    1979:\t41 89 f8             \tmov    %edi,%r8d\n    197c:\t48 89 c7             \tmov    %rax,%rdi\n    197f:\te8 00 00 00 00       \tcallq  1984 <plane_copy_swap_avx2+0x228>\n    1984:\t90                   \tnop\n    1985:\t48 81 c4 b8 00 00 00 \tadd    $0xb8,%rsp\n    198c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall plane_copy_swap_avx2(__int64 a1, __int64 a2, __int64 a3,\n                                        __int64 a4, int a5, unsigned int a6) {\n  __int64 result;\n  unsigned int <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  signed int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v11</span> = a1;\n  <span class=\"supfact\">v10</span> = a3;\n  if ((a5 & Number) == Number)\n    return x264_10_plane_copy_swap_core_avx2(a1, a2, a3, a4, (unsigned int)a5,\n                                             a6);\n  if (a5 <= Number)\n    return x264_10_plane_copy_swap_c(a1, a2, a3, a4, (unsigned int)a5, a6);\n  <span class=\"supfact\">v7</span> = a6 - Number;\n  if ((int)(a6 - Number) > Number) {\n    if (a4 <= Number) {\n      x264_10_plane_copy_swap_core_avx2(Number * a2 + a1, a2, Number * a4 + a3,\n                                        a4, (a5 + Number) & Number,\n                                        <span class=\"supfact\">v7</span>);\n    } else {\n      x264_10_plane_copy_swap_core_avx2(a1, a2, a3, a4, (a5 + Number) & Number,\n                                        <span class=\"supfact\">v7</span>);\n      <span class=\"supfact\">v11</span> = Number * a2 * (int)<span class=\"supfact\">v7</span> + a1;\n      <span class=\"supfact\">v10</span> += Number * a4 * (int)<span class=\"supfact\">v7</span>;\n    }\n  }\n  x264_10_plane_copy_swap_core_avx2(<span class=\"supfact\">v11</span>, Number L,\n                                    <span class=\"supfact\">v10</span>, Number L, a5 & Number,\n                                    Number L);\n  for (<span class=\"supfact\">i</span> = Number * (a5 & Number);;\n       <span class=\"supfact\">i</span> += Number) {\n    result = (unsigned int)(Number * a5);\n    if (<span class=\"supfact\">i</span> >= (int)result)\n      break;\n    *(_WORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">v11</span>) = *(\n        _WORD *)(Number * (<span class=\"supfact\">i</span> + Number L) + <span class=\"supfact\">v10</span>);\n    *(_WORD *)(Number * (<span class=\"supfact\">i</span> + Number L) + <span class=\"supfact\">v11</span>) =\n        *(_WORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">v10</span>);\n  }\n  return result;\n}", "code_t": "void __cdecl plane_copy_swap_avx2(pixel *dst, intptr_t i_dst, pixel *src,\n                                  intptr_t i_src, int w, int h) {\n  int <span class=\"supfact\">ha</span>;\n  pixel *<span class=\"supfact\">srca</span>;\n  pixel *<span class=\"supfact\">dsta</span>;\n  int <span class=\"supfact\">x</span>;\n  <span class=\"supfact\">dsta</span> = dst;\n  <span class=\"supfact\">srca</span> = src;\n  if ((w & Number) != Number) {\n    if (w <= Number) {\n      x264_10_plane_copy_swap_c(dst, i_dst, src, i_src, (unsigned int)w,\n                                (unsigned int)h);\n    } else {\n      <span class=\"supfact\">ha</span> = h - Number;\n      if (h - Number > Number) {\n        if (i_src <= Number) {\n          x264_10_plane_copy_swap_core_avx2(&dst[i_dst], i_dst, &src[i_src],\n                                            i_src, (w + Number) & Number,\n                                            (unsigned int)<span class=\"supfact\">ha</span>);\n        } else {\n          x264_10_plane_copy_swap_core_avx2(dst, i_dst, src, i_src,\n                                            (w + Number) & Number,\n                                            (unsigned int)<span class=\"supfact\">ha</span>);\n          <span class=\"supfact\">dsta</span> = &dst[i_dst * <span class=\"supfact\">ha</span>];\n          <span class=\"supfact\">srca</span> += i_src * <span class=\"supfact\">ha</span>;\n        }\n      }\n      x264_10_plane_copy_swap_core_avx2(<span class=\"supfact\">dsta</span>, Number L,\n                                        <span class=\"supfact\">srca</span>, Number L,\n                                        w & Number, Number L);\n      for (<span class=\"supfact\">x</span> = Number * (w & Number);\n           <span class=\"supfact\">x</span> < Number * w; <span class=\"supfact\">x</span> += Number) {\n        <span class=\"supfact\">dsta</span>[<span class=\"supfact\">x</span>] =\n            <span class=\"supfact\">srca</span>[<span class=\"supfact\">x</span> + Number];\n        <span class=\"supfact\">dsta</span>[<span class=\"supfact\">x</span> + Number] =\n            <span class=\"supfact\">srca</span>[<span class=\"supfact\">x</span>];\n      }\n    }\n  } else {\n    x264_10_plane_copy_swap_core_avx2(dst, i_dst, src, i_src, (unsigned int)w,\n                                      (unsigned int)h);\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "x", "ref_type": "int"}, {"name": "v11", "type": "int16_t *", "ref_name": "dsta", "ref_type": "pixel *"}, {"name": "v10", "type": "uint8_t *", "ref_name": "srca", "ref_type": "pixel *"}, {"name": "v7", "type": "int", "ref_name": "ha", "ref_type": "int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "GuaiYiHu", "repo_name": "android_kernel_xiaomi_sm6150", "path": "GuaiYiHu/android_kernel_xiaomi_sm6150/006018559b927c6c37911ea2b730ddd3e8d60361abe7245a6a348b6fa527e301", "path_in_repo": "GuaiYiHu/android_kernel_xiaomi_sm6150/tools/perf/tests/sample-parsing.o", "objdump": "00000000000012cd <test__sample_parsing>:\n    12cd:\t55                   \tpush   %rbp\n    12ce:\t48 89 e5             \tmov    %rsp,%rbp\n    12d1:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n    12d5:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    12d9:\t89 75 84             \tmov    %esi,-0x7c(%rbp)\n    12dc:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    12e3:\t00 00 \n    12e5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    12e9:\t31 c0                \txor    %eax,%eax\n    12eb:\t48 c7 45 b0 04 00 00 \tmovq   $0x4,-0x50(%rbp)\n    12f2:\t00 \n    12f3:\t48 c7 45 b8 05 00 00 \tmovq   $0x5,-0x48(%rbp)\n    12fa:\t00 \n    12fb:\t48 c7 45 c0 06 00 00 \tmovq   $0x6,-0x40(%rbp)\n    1302:\t00 \n    1303:\t48 c7 45 c8 07 00 00 \tmovq   $0x7,-0x38(%rbp)\n    130a:\t00 \n    130b:\t48 c7 45 d0 0c 00 00 \tmovq   $0xc,-0x30(%rbp)\n    1312:\t00 \n    1313:\t48 c7 45 d8 0d 00 00 \tmovq   $0xd,-0x28(%rbp)\n    131a:\t00 \n    131b:\t48 c7 45 e0 0e 00 00 \tmovq   $0xe,-0x20(%rbp)\n    1322:\t00 \n    1323:\t48 c7 45 e8 0f 00 00 \tmovq   $0xf,-0x18(%rbp)\n    132a:\t00 \n    132b:\t48 c7 45 98 01 00 00 \tmovq   $0x1,-0x68(%rbp)\n    1332:\t00 \n    1333:\te9 a0 00 00 00       \tjmpq   13d8 <test__sample_parsing+0x10b>\n    1338:\t48 83 7d 98 10       \tcmpq   $0x10,-0x68(%rbp)\n    133d:\t75 43                \tjne    1382 <test__sample_parsing+0xb5>\n    133f:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n    1346:\t00 \n    1347:\teb 30                \tjmp    1379 <test__sample_parsing+0xac>\n    1349:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    134d:\t48 8b 54 c5 b0       \tmov    -0x50(%rbp,%rax,8),%rdx\n    1352:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1356:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    135b:\t48 89 c7             \tmov    %rax,%rdi\n    135e:\te8 ad f8 ff ff       \tcallq  c10 <do_test>\n    1363:\t89 45 94             \tmov    %eax,-0x6c(%rbp)\n    1366:\t83 7d 94 00          \tcmpl   $0x0,-0x6c(%rbp)\n    136a:\t74 08                \tje     1374 <test__sample_parsing+0xa7>\n    136c:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n    136f:\te9 c7 00 00 00       \tjmpq   143b <test__sample_parsing+0x16e>\n    1374:\t48 83 45 a8 01       \taddq   $0x1,-0x58(%rbp)\n    1379:\t48 83 7d a8 07       \tcmpq   $0x7,-0x58(%rbp)\n    137e:\t76 c9                \tjbe    1349 <test__sample_parsing+0x7c>\n    1380:\teb 52                \tjmp    13d4 <test__sample_parsing+0x107>\n    1382:\t48 c7 45 a0 00 00 00 \tmovq   $0x0,-0x60(%rbp)\n    1389:\t00 \n    138a:\t48 81 7d 98 00 10 00 \tcmpq   $0x1000,-0x68(%rbp)\n    1391:\t00 \n    1392:\t75 08                \tjne    139c <test__sample_parsing+0xcf>\n    1394:\t48 c7 45 a0 ff 3f 00 \tmovq   $0x3fff,-0x60(%rbp)\n    139b:\t00 \n    139c:\t48 81 7d 98 00 00 04 \tcmpq   $0x40000,-0x68(%rbp)\n    13a3:\t00 \n    13a4:\t75 08                \tjne    13ae <test__sample_parsing+0xe1>\n    13a6:\t48 c7 45 a0 ff 0f ff \tmovq   $0xff0fff,-0x60(%rbp)\n    13ad:\t00 \n    13ae:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n    13b2:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    13b6:\tba 00 00 00 00       \tmov    $0x0,%edx\n    13bb:\t48 89 ce             \tmov    %rcx,%rsi\n    13be:\t48 89 c7             \tmov    %rax,%rdi\n    13c1:\te8 4a f8 ff ff       \tcallq  c10 <do_test>\n    13c6:\t89 45 94             \tmov    %eax,-0x6c(%rbp)\n    13c9:\t83 7d 94 00          \tcmpl   $0x0,-0x6c(%rbp)\n    13cd:\t74 05                \tje     13d4 <test__sample_parsing+0x107>\n    13cf:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n    13d2:\teb 67                \tjmp    143b <test__sample_parsing+0x16e>\n    13d4:\t48 d1 65 98          \tshlq   -0x68(%rbp)\n    13d8:\t48 81 7d 98 00 00 10 \tcmpq   $0x100000,-0x68(%rbp)\n    13df:\t00 \n    13e0:\t0f 85 52 ff ff ff    \tjne    1338 <test__sample_parsing+0x6b>\n    13e6:\t48 c7 45 98 ff ff 0f \tmovq   $0xfffff,-0x68(%rbp)\n    13ed:\t00 \n    13ee:\t48 c7 45 a0 ff 3f 00 \tmovq   $0x3fff,-0x60(%rbp)\n    13f5:\t00 \n    13f6:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n    13fd:\t00 \n    13fe:\teb 2f                \tjmp    142f <test__sample_parsing+0x162>\n    1400:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1404:\t48 8b 54 c5 b0       \tmov    -0x50(%rbp,%rax,8),%rdx\n    1409:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n    140d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1411:\t48 89 ce             \tmov    %rcx,%rsi\n    1414:\t48 89 c7             \tmov    %rax,%rdi\n    1417:\te8 f4 f7 ff ff       \tcallq  c10 <do_test>\n    141c:\t89 45 94             \tmov    %eax,-0x6c(%rbp)\n    141f:\t83 7d 94 00          \tcmpl   $0x0,-0x6c(%rbp)\n    1423:\t74 05                \tje     142a <test__sample_parsing+0x15d>\n    1425:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n    1428:\teb 11                \tjmp    143b <test__sample_parsing+0x16e>\n    142a:\t48 83 45 a8 01       \taddq   $0x1,-0x58(%rbp)\n    142f:\t48 83 7d a8 07       \tcmpq   $0x7,-0x58(%rbp)\n    1434:\t76 ca                \tjbe    1400 <test__sample_parsing+0x133>\n    1436:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    143b:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    143f:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    1446:\t00 00 \n    1448:\t74 05                \tje     144f <test__sample_parsing+0x182>\n    144a:\te8 00 00 00 00       \tcallq  144f <test__sample_parsing+0x182>\n    144f:\tc9                   \tleaveq \n    1450:\tc3                   \tretq   \n", "code_s": "__int64 test__sample_parsing() {\n  unsigned int v1;\n  unsigned int v2;\n  unsigned int v3;\n  __int64 <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned __int64 j;\n  unsigned __int64 k;\n  __int64 <span class=\"supfact\">v8</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = __readfsqword(Number);\n  <span class=\"supfact\">v8</span>[Number] = Number L;\n  <span class=\"supfact\">v8</span>[Number] = Number L;\n  <span class=\"supfact\">v8</span>[Number] = Number L;\n  <span class=\"supfact\">v8</span>[Number] = Number L;\n  <span class=\"supfact\">v8</span>[Number] = Number L;\n  <span class=\"supfact\">v8</span>[Number] = Number L;\n  <span class=\"supfact\">v8</span>[Number] = Number L;\n  <span class=\"supfact\">v8</span>[Number] = Number L;\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> != Number;\n       <span class=\"supfact\">i</span> *= Number L) {\n    if (<span class=\"supfact\">i</span> == Number) {\n      for (j = Number L; j <= Number; ++j) {\n        v1 = do_test(Number L, Number L, <span class=\"supfact\">v8</span>[j]);\n        if (v1)\n          return v1;\n      }\n    } else {\n      <span class=\"supfact\">v5</span> = Number L;\n      if (<span class=\"supfact\">i</span> == Number)\n        <span class=\"supfact\">v5</span> = Number;\n      if (<span class=\"supfact\">i</span> == Number)\n        <span class=\"supfact\">v5</span> = Number L;\n      v2 = do_test(<span class=\"supfact\">i</span>, <span class=\"supfact\">v5</span>, Number L);\n      if (v2)\n        return v2;\n    }\n  }\n  for (k = Number L; k <= Number; ++k) {\n    v3 = do_test(Number, Number, <span class=\"supfact\">v8</span>[k]);\n    if (v3)\n      return v3;\n  }\n  return Number L;\n}", "code_t": "int __cdecl test__sample_parsing(test *test, int subtest) {\n  int err;\n  int erra;\n  int errb;\n  u64 <span class=\"supfact\">sample_type</span>;\n  u64 <span class=\"supfact\">sample_regs</span>;\n  size_t i;\n  size_t ia;\n  u64 <span class=\"supfact\">rf</span>[Number];\n  unsigned __int64 v11;\n  v11 = __readfsqword(Number);\n  <span class=\"supfact\">rf</span>[Number] = Number L;\n  <span class=\"supfact\">rf</span>[Number] = Number L;\n  <span class=\"supfact\">rf</span>[Number] = Number L;\n  <span class=\"supfact\">rf</span>[Number] = Number L;\n  <span class=\"supfact\">rf</span>[Number] = Number L;\n  <span class=\"supfact\">rf</span>[Number] = Number L;\n  <span class=\"supfact\">rf</span>[Number] = Number L;\n  <span class=\"supfact\">rf</span>[Number] = Number L;\n  for (<span class=\"supfact\">sample_type</span> = Number L;\n       <span class=\"supfact\">sample_type</span> != Number;\n       <span class=\"supfact\">sample_type</span> *= Number L) {\n    if (<span class=\"supfact\">sample_type</span> == Number) {\n      for (i = Number L; i <= Number; ++i) {\n        err = do_test(Number, Number L, <span class=\"supfact\">rf</span>[i]);\n        if (err)\n          return err;\n      }\n    } else {\n      <span class=\"supfact\">sample_regs</span> = Number L;\n      if (<span class=\"supfact\">sample_type</span> == Number)\n        <span class=\"supfact\">sample_regs</span> = Number;\n      if (<span class=\"supfact\">sample_type</span> == Number)\n        <span class=\"supfact\">sample_regs</span> = Number L;\n      erra = do_test(<span class=\"supfact\">sample_type</span>, <span class=\"supfact\">sample_regs</span>,\n                     Number L);\n      if (erra)\n        return erra;\n    }\n  }\n  for (ia = Number L; ia <= Number; ++ia) {\n    errb = do_test(Number, Number, <span class=\"supfact\">rf</span>[ia]);\n    if (errb)\n      return errb;\n  }\n  return Number;\n}", "var": [{"name": "v8", "type": "u64[8]", "ref_name": "rf", "ref_type": "u64[8]"}, {"name": "v5", "type": "u64", "ref_name": "sample_regs", "ref_type": "u64"}, {"name": "i", "type": "u64", "ref_name": "sample_type", "ref_type": "u64"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "antmicro", "repo_name": "abc-lib", "path": "antmicro/abc-lib/5cbea705d76174a6da05bfd1a95c37373f45bbe53b7e27cbbd24458c44adaf4b", "path_in_repo": "antmicro/abc-lib//src/aig/aig/aigPartSat.o", "objdump": "00000000000004d1 <Vec_IntFill>:\n     4d1:\t55                   \tpush   %rbp\n     4d2:\t48 89 e5             \tmov    %rsp,%rbp\n     4d5:\t48 83 ec 20          \tsub    $0x20,%rsp\n     4d9:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     4dd:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     4e0:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n     4e3:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     4e6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4ea:\t89 d6                \tmov    %edx,%esi\n     4ec:\t48 89 c7             \tmov    %rax,%rdi\n     4ef:\te8 47 ff ff ff       \tcallq  43b <Vec_IntGrow>\n     4f4:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     4fb:\teb 1e                \tjmp    51b <Vec_IntFill+0x4a>\n     4fd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     501:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     505:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     508:\t48 63 d2             \tmovslq %edx,%rdx\n     50b:\t48 c1 e2 02          \tshl    $0x2,%rdx\n     50f:\t48 01 c2             \tadd    %rax,%rdx\n     512:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n     515:\t89 02                \tmov    %eax,(%rdx)\n     517:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     51b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     51e:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n     521:\t7c da                \tjl     4fd <Vec_IntFill+0x2c>\n     523:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     527:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     52a:\t89 50 04             \tmov    %edx,0x4(%rax)\n     52d:\t90                   \tnop\n     52e:\tc9                   \tleaveq \n     52f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Vec_IntFill(__int64 a1, int a2, int a3) {\n  __int64 result;\n  int <span class=\"supfact\">i</span>;\n  Vec_IntGrow((int *)a1, a2);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < a2; ++<span class=\"supfact\">i</span>)\n    *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L * <span class=\"supfact\">i</span>) = a3;\n  result = a1;\n  *(_DWORD *)(a1 + Number) = a2;\n  return result;\n}", "code_t": "void __cdecl Vec_IntFill(Vec_Int_t *p, int nSize, int Fill) {\n  int <span class=\"supfact\">i</span>;\n  Vec_IntGrow(p, nSize);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < nSize;\n       ++<span class=\"supfact\">i</span>)\n    p->pArray[<span class=\"supfact\">i</span>] = Fill;\n  p->nSize = nSize;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "macoscope", "repo_name": "ffmpeg", "path": "macoscope/ffmpeg/1879ff9e85fc70ecd7c6c33d2777082d60dd906aa139e2455e89099935717196", "path_in_repo": "macoscope/ffmpeg//libavformat/aiffdec.o", "objdump": "0000000000000e3f <aiff_read_packet>:\n e3f:\t53                   \tpush   %rbx\n e40:\t48 83 ec 40          \tsub    $0x40,%rsp\n e44:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n e49:\t48 89 34 24          \tmov    %rsi,(%rsp)\n e4d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n e52:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n e56:\t48 8b 00             \tmov    (%rax),%rax\n e59:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n e5e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n e63:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n e67:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n e6c:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n e71:\t48 8b 18             \tmov    (%rax),%rbx\n e74:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n e79:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n e7d:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n e82:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n e87:\tba 01 00 00 00       \tmov    $0x1,%edx\n e8c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n e91:\t48 89 c7             \tmov    %rax,%rdi\n e94:\te8 00 00 00 00       \tcallq  e99 <aiff_read_packet+0x5a>\n e99:\t48 29 c3             \tsub    %rax,%rbx\n e9c:\t48 89 d8             \tmov    %rbx,%rax\n e9f:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n ea4:\t48 83 7c 24 20 00    \tcmpq   $0x0,0x20(%rsp)\n eaa:\t7f 0a                \tjg     eb6 <aiff_read_packet+0x77>\n eac:\tb8 bb b0 b9 df       \tmov    $0xdfb9b0bb,%eax\n eb1:\te9 fc 00 00 00       \tjmpq   fb2 <aiff_read_packet+0x173>\n eb6:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n ebb:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n ebf:\t8b 80 e4 01 00 00    \tmov    0x1e4(%rax),%eax\n ec5:\t83 f8 10             \tcmp    $0x10,%eax\n ec8:\t7e 15                \tjle    edf <aiff_read_packet+0xa0>\n eca:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n ecf:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n ed3:\t8b 80 e4 01 00 00    \tmov    0x1e4(%rax),%eax\n ed9:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n edd:\teb 2f                \tjmp    f0e <aiff_read_packet+0xcf>\n edf:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n ee4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n ee8:\t8b 88 e4 01 00 00    \tmov    0x1e4(%rax),%ecx\n eee:\tb8 00 10 00 00       \tmov    $0x1000,%eax\n ef3:\t99                   \tcltd   \n ef4:\tf7 f9                \tidiv   %ecx\n ef6:\t89 c2                \tmov    %eax,%edx\n ef8:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n efd:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n f01:\t8b 80 e4 01 00 00    \tmov    0x1e4(%rax),%eax\n f07:\t0f af c2             \timul   %edx,%eax\n f0a:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n f0e:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n f12:\t48 98                \tcltq   \n f14:\t48 39 44 24 20       \tcmp    %rax,0x20(%rsp)\n f19:\t48 0f 4e 44 24 20    \tcmovle 0x20(%rsp),%rax\n f1f:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n f23:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n f28:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n f2c:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n f30:\t48 8b 0c 24          \tmov    (%rsp),%rcx\n f34:\t48 89 ce             \tmov    %rcx,%rsi\n f37:\t48 89 c7             \tmov    %rax,%rdi\n f3a:\te8 00 00 00 00       \tcallq  f3f <aiff_read_packet+0x100>\n f3f:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n f43:\t83 7c 24 1c 00       \tcmpl   $0x0,0x1c(%rsp)\n f48:\t79 06                \tjns    f50 <aiff_read_packet+0x111>\n f4a:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n f4e:\teb 62                \tjmp    fb2 <aiff_read_packet+0x173>\n f50:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n f55:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n f59:\t8b 80 e4 01 00 00    \tmov    0x1e4(%rax),%eax\n f5f:\t39 44 24 3c          \tcmp    %eax,0x3c(%rsp)\n f63:\t7c 13                \tjl     f78 <aiff_read_packet+0x139>\n f65:\t48 8b 04 24          \tmov    (%rsp),%rax\n f69:\t8b 40 28             \tmov    0x28(%rax),%eax\n f6c:\t83 e0 fd             \tand    $0xfffffffd,%eax\n f6f:\t89 c2                \tmov    %eax,%edx\n f71:\t48 8b 04 24          \tmov    (%rsp),%rax\n f75:\t89 50 28             \tmov    %edx,0x28(%rax)\n f78:\t48 8b 04 24          \tmov    (%rsp),%rax\n f7c:\tc7 40 24 00 00 00 00 \tmovl   $0x0,0x24(%rax)\n f83:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n f88:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n f8c:\t8b b0 e4 01 00 00    \tmov    0x1e4(%rax),%esi\n f92:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n f96:\t99                   \tcltd   \n f97:\tf7 fe                \tidiv   %esi\n f99:\t89 c2                \tmov    %eax,%edx\n f9b:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n fa0:\t8b 40 08             \tmov    0x8(%rax),%eax\n fa3:\t0f af d0             \timul   %eax,%edx\n fa6:\t48 8b 04 24          \tmov    (%rsp),%rax\n faa:\t89 50 3c             \tmov    %edx,0x3c(%rax)\n fad:\tb8 00 00 00 00       \tmov    $0x0,%eax\n fb2:\t48 83 c4 40          \tadd    $0x40,%rsp\n fb6:\t5b                   \tpop    %rbx\n fb7:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall aiff_read_packet(__int64 a1, _DWORD *a2) {\n  __int64 v2;\n  unsigned int v4;\n  int <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 *<span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int v9;\n  int v10;\n  <span class=\"supfact\">v8</span> = **(_QWORD **)(a1 + Number);\n  <span class=\"supfact\">v7</span> = *(__int64 **)(a1 + Number);\n  v2 = *<span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v6</span> =\n      v2 - avio_seek(*(_QWORD *)(a1 + Number), Number L, Number L);\n  if (<span class=\"supfact\">v6</span> <= Number)\n    return Number L;\n  if (*(int *)(*(_QWORD *)(<span class=\"supfact\">v8</span> + Number) + Number L) <= Number)\n    v9 = Number /\n         *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v8</span> + Number) + Number L) *\n         *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v8</span> + Number) + Number L);\n  else\n    v9 = *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v8</span> + Number) + Number L);\n  v4 = v9;\n  if (<span class=\"supfact\">v6</span> <= v9)\n    v4 = <span class=\"supfact\">v6</span>;\n  v10 = v4;\n  <span class=\"supfact\">v5</span> = av_get_packet(*(_QWORD *)(a1 + Number), a2, v4);\n  if (<span class=\"supfact\">v5</span> < Number)\n    return (unsigned int)<span class=\"supfact\">v5</span>;\n  if (v10 >= *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v8</span> + Number) + Number L))\n    a2[Number] &= Number;\n  a2[Number] = Number;\n  a2[Number] =\n      *((_DWORD *)<span class=\"supfact\">v7</span> + Number) *\n      (<span class=\"supfact\">v5</span> /\n       *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v8</span> + Number) + Number L));\n  return Number L;\n}", "code_t": "int __cdecl aiff_read_packet(AVFormatContext_0 *s, AVPacket_0 *pkt) {\n  int64_t v2;\n  unsigned int v4;\n  int <span class=\"supfact\">res</span>;\n  int64_t <span class=\"supfact\">max_size</span>;\n  AIFFInputContext *<span class=\"supfact\">aiff</span>;\n  AVStream_0 *<span class=\"supfact\">st</span>;\n  int size;\n  int sizea;\n  <span class=\"supfact\">st</span> = *s->streams;\n  <span class=\"supfact\">aiff</span> = (AIFFInputContext *)s->priv_data;\n  v2 = <span class=\"supfact\">aiff</span>->data_end;\n  <span class=\"supfact\">max_size</span> = v2 - avio_seek(s->pb, Number L, Number L);\n  if (<span class=\"supfact\">max_size</span> <= Number)\n    return Number;\n  if (<span class=\"supfact\">st</span>->codec->block_align <= Number)\n    size = Number / <span class=\"supfact\">st</span>->codec->block_align *\n           <span class=\"supfact\">st</span>->codec->block_align;\n  else\n    size = <span class=\"supfact\">st</span>->codec->block_align;\n  v4 = size;\n  if (<span class=\"supfact\">max_size</span> <= size)\n    v4 = <span class=\"supfact\">max_size</span>;\n  sizea = v4;\n  <span class=\"supfact\">res</span> = av_get_packet(s->pb, pkt, v4);\n  if (<span class=\"supfact\">res</span> < Number)\n    return <span class=\"supfact\">res</span>;\n  if (sizea >= <span class=\"supfact\">st</span>->codec->block_align)\n    pkt->flags &= Number;\n  pkt->stream_index = Number;\n  pkt->duration =\n      <span class=\"supfact\">aiff</span>->block_duration *\n      (<span class=\"supfact\">res</span> / <span class=\"supfact\">st</span>->codec->block_align);\n  return Number;\n}", "var": [{"name": "v8", "type": "AVStream_0 *", "ref_name": "st", "ref_type": "AVStream_0 *"}, {"name": "v7", "type": "int64_t", "ref_name": "aiff", "ref_type": "AIFFInputContext *"}, {"name": "v6", "type": "int64_t", "ref_name": "max_size", "ref_type": "int64_t"}, {"name": "v5", "type": "int", "ref_name": "res", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "msloth", "repo_name": "contiki-launchpad", "path": "msloth/contiki-launchpad/118bce9dcf7887b922ee6bd50bf9e24c456c4116ed0c71eaf16b96ebc71564d4", "path_in_repo": "msloth/contiki-launchpad/examples/wget/obj_native/tcpip.o", "objdump": "00000000000000b6 <tcp_connect>:\n  b6:\t55                   \tpush   %rbp\n  b7:\t48 89 e5             \tmov    %rsp,%rbp\n  ba:\t48 83 ec 30          \tsub    $0x30,%rsp\n  be:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  c2:\t89 f0                \tmov    %esi,%eax\n  c4:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  c8:\t66 89 45 e4          \tmov    %ax,-0x1c(%rbp)\n  cc:\t0f b7 55 e4          \tmovzwl -0x1c(%rbp),%edx\n  d0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  d4:\t89 d6                \tmov    %edx,%esi\n  d6:\t48 89 c7             \tmov    %rax,%rdi\n  d9:\te8 00 00 00 00       \tcallq  de <tcp_connect+0x28>\n  de:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  e2:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  e7:\t75 07                \tjne    f0 <tcp_connect+0x3a>\n  e9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  ee:\teb 2b                \tjmp    11b <tcp_connect+0x65>\n  f0:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # f7 <tcp_connect+0x41>\n  f7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  fb:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n  ff:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 103:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 107:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n 10b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 10f:\t48 89 c7             \tmov    %rax,%rdi\n 112:\te8 00 00 00 00       \tcallq  117 <tcp_connect+0x61>\n 117:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 11b:\tc9                   \tleaveq \n 11c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tcp_connect(__int64 a1, unsigned __int16 a2, __int64 a3) {\n  __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = uip_connect(a1, a2);\n  if (!<span class=\"supfact\">v5</span>)\n    return Number L;\n  *(_QWORD *)(<span class=\"supfact\">v5</span> + Number) = process_current;\n  *(_QWORD *)(<span class=\"supfact\">v5</span> + Number) = a3;\n  tcpip_poll_tcp(<span class=\"supfact\">v5</span>);\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "uip_conn *__cdecl tcp_connect(uip_ipaddr_t *ripaddr, uint16_t port,\n                              void *appstate) {\n  uip_conn *<span class=\"supfact\">c</span>;\n  <span class=\"supfact\">c</span> = (uip_conn *)uip_connect(ripaddr, port);\n  if (!<span class=\"supfact\">c</span>)\n    return Number L;\n  <span class=\"supfact\">c</span>->appstate.p = (process *)process_current;\n  <span class=\"supfact\">c</span>->appstate.state = appstate;\n  tcpip_poll_tcp(<span class=\"supfact\">c</span>);\n  return <span class=\"supfact\">c</span>;\n}", "var": [{"name": "v5", "type": "uip_conn *", "ref_name": "c", "ref_type": "uip_conn *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "ysat0", "repo_name": "uClibc", "path": "ysat0/uClibc/f3fce4c4e825bff7b394b139a83e6a2131be842ee3bddf754bddb40d3ff5da98", "path_in_repo": "ysat0/uClibc/test/misc/tst-utmp_glibc.o", "objdump": "00000000000009e2 <simulate_login>:\n     9e2:\t55                   \tpush   %rbp\n     9e3:\t48 89 e5             \tmov    %rsp,%rbp\n     9e6:\t48 83 ec 40          \tsub    $0x40,%rsp\n     9ea:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     9ee:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     9f2:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     9f9:\te9 a5 01 00 00       \tjmpq   ba3 <simulate_login+0x1c1>\n     9fe:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     a01:\t48 63 d0             \tmovslq %eax,%rdx\n     a04:\t48 89 d0             \tmov    %rdx,%rax\n     a07:\t48 01 c0             \tadd    %rax,%rax\n     a0a:\t48 01 d0             \tadd    %rdx,%rax\n     a0d:\t48 c1 e0 07          \tshl    $0x7,%rax\n     a11:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     a17:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n     a1b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     a1f:\t48 89 d6             \tmov    %rdx,%rsi\n     a22:\t48 89 c7             \tmov    %rax,%rdi\n     a25:\te8 00 00 00 00       \tcallq  a2a <simulate_login+0x48>\n     a2a:\t85 c0                \ttest   %eax,%eax\n     a2c:\t74 26                \tje     a54 <simulate_login+0x72>\n     a2e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     a31:\t48 63 d0             \tmovslq %eax,%rdx\n     a34:\t48 89 d0             \tmov    %rdx,%rax\n     a37:\t48 01 c0             \tadd    %rax,%rax\n     a3a:\t48 01 d0             \tadd    %rdx,%rax\n     a3d:\t48 c1 e0 07          \tshl    $0x7,%rax\n     a41:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     a47:\t0f b7 00             \tmovzwl (%rax),%eax\n     a4a:\t66 83 f8 08          \tcmp    $0x8,%ax\n     a4e:\t0f 85 4b 01 00 00    \tjne    b9f <simulate_login+0x1bd>\n     a54:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     a57:\t48 63 d0             \tmovslq %eax,%rdx\n     a5a:\t48 89 d0             \tmov    %rdx,%rax\n     a5d:\t48 01 c0             \tadd    %rax,%rax\n     a60:\t48 01 d0             \tadd    %rdx,%rax\n     a63:\t48 c1 e0 07          \tshl    $0x7,%rax\n     a67:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     a6d:\t8b 00                \tmov    (%rax),%eax\n     a6f:\t83 f8 08             \tcmp    $0x8,%eax\n     a72:\t75 30                \tjne    aa4 <simulate_login+0xc2>\n     a74:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a7a <simulate_login+0x98>\n     a7a:\t83 c0 1b             \tadd    $0x1b,%eax\n     a7d:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # a83 <simulate_login+0xa1>\n     a83:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # a89 <simulate_login+0xa7>\n     a89:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     a8c:\t48 63 d0             \tmovslq %eax,%rdx\n     a8f:\t48 89 d0             \tmov    %rdx,%rax\n     a92:\t48 01 c0             \tadd    %rax,%rax\n     a95:\t48 01 d0             \tadd    %rdx,%rax\n     a98:\t48 c1 e0 07          \tshl    $0x7,%rax\n     a9c:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     aa2:\t89 08                \tmov    %ecx,(%rax)\n     aa4:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     aa7:\t48 63 d0             \tmovslq %eax,%rdx\n     aaa:\t48 89 d0             \tmov    %rdx,%rax\n     aad:\t48 01 c0             \tadd    %rax,%rax\n     ab0:\t48 01 d0             \tadd    %rdx,%rax\n     ab3:\t48 c1 e0 07          \tshl    $0x7,%rax\n     ab7:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     abd:\t66 c7 00 07 00       \tmovw   $0x7,(%rax)\n     ac2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     ac5:\t48 63 d0             \tmovslq %eax,%rdx\n     ac8:\t48 89 d0             \tmov    %rdx,%rax\n     acb:\t48 01 c0             \tadd    %rax,%rax\n     ace:\t48 01 d0             \tadd    %rdx,%rax\n     ad1:\t48 c1 e0 07          \tshl    $0x7,%rax\n     ad5:\t48 83 c0 20          \tadd    $0x20,%rax\n     ad9:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     adf:\t48 8d 48 0c          \tlea    0xc(%rax),%rcx\n     ae3:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     ae7:\tba 20 00 00 00       \tmov    $0x20,%edx\n     aec:\t48 89 c6             \tmov    %rax,%rsi\n     aef:\t48 89 cf             \tmov    %rcx,%rdi\n     af2:\te8 00 00 00 00       \tcallq  af7 <simulate_login+0x115>\n     af7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # afe <simulate_login+0x11c>\n     afe:\t48 05 e8 03 00 00    \tadd    $0x3e8,%rax\n     b04:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # b0b <simulate_login+0x129>\n     b0b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b12 <simulate_login+0x130>\n     b12:\t89 c1                \tmov    %eax,%ecx\n     b14:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     b17:\t48 63 d0             \tmovslq %eax,%rdx\n     b1a:\t48 89 d0             \tmov    %rdx,%rax\n     b1d:\t48 01 c0             \tadd    %rax,%rax\n     b20:\t48 01 d0             \tadd    %rdx,%rax\n     b23:\t48 c1 e0 07          \tshl    $0x7,%rax\n     b27:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     b2d:\t89 08                \tmov    %ecx,(%rax)\n     b2f:\te8 00 00 00 00       \tcallq  b34 <simulate_login+0x152>\n     b34:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     b37:\t48 63 d0             \tmovslq %eax,%rdx\n     b3a:\t48 89 d0             \tmov    %rdx,%rax\n     b3d:\t48 01 c0             \tadd    %rax,%rax\n     b40:\t48 01 d0             \tadd    %rdx,%rax\n     b43:\t48 c1 e0 07          \tshl    $0x7,%rax\n     b47:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     b4d:\t48 89 c7             \tmov    %rax,%rdi\n     b50:\te8 00 00 00 00       \tcallq  b55 <simulate_login+0x173>\n     b55:\t48 85 c0             \ttest   %rax,%rax\n     b58:\t75 39                \tjne    b93 <simulate_login+0x1b1>\n     b5a:\te8 00 00 00 00       \tcallq  b5f <simulate_login+0x17d>\n     b5f:\t8b 00                \tmov    (%rax),%eax\n     b61:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n     b68:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     b6b:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     b72:\t00 \n     b73:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     b77:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n     b7a:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     b7d:\t89 ce                \tmov    %ecx,%esi\n     b7f:\t89 c7                \tmov    %eax,%edi\n     b81:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b86:\te8 00 00 00 00       \tcallq  b8b <simulate_login+0x1a9>\n     b8b:\t90                   \tnop\n     b8c:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     b91:\teb 53                \tjmp    be6 <simulate_login+0x204>\n     b93:\te8 00 00 00 00       \tcallq  b98 <simulate_login+0x1b6>\n     b98:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b9d:\teb 47                \tjmp    be6 <simulate_login+0x204>\n     b9f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     ba3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # ba9 <simulate_login+0x1c7>\n     ba9:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n     bac:\t0f 8c 4c fe ff ff    \tjl     9fe <simulate_login+0x1c>\n     bb2:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n     bb9:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n     bc0:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n     bc7:\t00 \n     bc8:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     bcc:\t8b 4d e0             \tmov    -0x20(%rbp),%ecx\n     bcf:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     bd2:\t89 ce                \tmov    %ecx,%esi\n     bd4:\t89 c7                \tmov    %eax,%edi\n     bd6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     bdb:\te8 00 00 00 00       \tcallq  be0 <simulate_login+0x1fe>\n     be0:\t90                   \tnop\n     be1:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     be6:\tc9                   \tleaveq \n     be7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall simulate_login(const char *a1, const char *a2) {\n  __int64 result;\n  int <span class=\"supfact\">errnum</span>;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">i</span> >= num_entries) {\n      error(Number, Number, String);\n      return Number L;\n    }\n    if (!strcmp(a1,\n                (const char *)&entry + Number * <span class=\"supfact\">i</span> + Number) ||\n        *((_WORD *)&entry + Number * <span class=\"supfact\">i</span>) == Number)\n      break;\n  }\n  if (*((_DWORD *)&entry + Number * <span class=\"supfact\">i</span> + Number) == Number) {\n    entry_pid += Number;\n    *((_DWORD *)&entry + Number * <span class=\"supfact\">i</span> + Number) = entry_pid;\n  }\n  *((_WORD *)&entry + Number * <span class=\"supfact\">i</span>) = Number;\n  strncpy((char *)&entry + Number * <span class=\"supfact\">i</span> + Number, a2, Number);\n  entry_time += Number L;\n  *((_DWORD *)&entry + Number * <span class=\"supfact\">i</span> + Number) = entry_time;\n  setutent();\n  if (pututline((const struct utmp *)&entry + <span class=\"supfact\">i</span>)) {\n    endutent();\n    result = Number L;\n  } else {\n    <span class=\"supfact\">errnum</span> = *_errno_location();\n    error(Number, <span class=\"supfact\">errnum</span>, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl simulate_login(const char *line, const char *user) {\n  int result;\n  int <span class=\"supfact\">errnum</span>;\n  int <span class=\"supfact\">n</span>;\n  for (<span class=\"supfact\">n</span> = Number;; ++<span class=\"supfact\">n</span>) {\n    if (<span class=\"supfact\">n</span> >= num_entries) {\n      error(Number, Number, String);\n      return Number;\n    }\n    if (!strcmp(line, entry[<span class=\"supfact\">n</span>].ut_line) ||\n        entry[<span class=\"supfact\">n</span>].ut_type == Number)\n      break;\n  }\n  if (entry[<span class=\"supfact\">n</span>].ut_pid == Number) {\n    entry_pid += Number;\n    entry[<span class=\"supfact\">n</span>].ut_pid = entry_pid;\n  }\n  entry[<span class=\"supfact\">n</span>].ut_type = Number;\n  strncpy(entry[<span class=\"supfact\">n</span>].ut_user, user, Number);\n  entry_time += Number L;\n  entry[<span class=\"supfact\">n</span>].ut_tv.tv_sec = entry_time;\n  setutent();\n  if (pututline(&entry[<span class=\"supfact\">n</span>])) {\n    endutent();\n    result = Number;\n  } else {\n    <span class=\"supfact\">errnum</span> = *_errno_location();\n    error(Number, <span class=\"supfact\">errnum</span>, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "i", "type": "int", "ref_name": "n", "ref_type": "int"}, {"name": "errnum", "type": "int", "ref_name": "errnum", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "jameswg2012", "repo_name": "libamplayer-m3", "path": "jameswg2012/libamplayer-m3/955bdfac12729080352f28e485be838589053c6a1d104f42a5cfe4f28cb64b18", "path_in_repo": "jameswg2012/libamplayer-m3/amffmpeg/libavcodec/flashsv.o", "objdump": "0000000000000053 <get_bits>:\n  53:\t53                   \tpush   %rbx\n  54:\t48 83 ec 20          \tsub    $0x20,%rsp\n  58:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n  5d:\t89 74 24 04          \tmov    %esi,0x4(%rsp)\n  61:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  66:\t8b 40 10             \tmov    0x10(%rax),%eax\n  69:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n  6d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  72:\t48 8b 00             \tmov    (%rax),%rax\n  75:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n  79:\tc1 ea 03             \tshr    $0x3,%edx\n  7c:\t89 d2                \tmov    %edx,%edx\n  7e:\t48 01 d0             \tadd    %rdx,%rax\n  81:\t8b 00                \tmov    (%rax),%eax\n  83:\t89 44 24 14          \tmov    %eax,0x14(%rsp)\n  87:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n  8b:\t0f c8                \tbswap  %eax\n  8d:\t89 44 24 14          \tmov    %eax,0x14(%rsp)\n  91:\t8b 54 24 14          \tmov    0x14(%rsp),%edx\n  95:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n  99:\t83 e0 07             \tand    $0x7,%eax\n  9c:\t89 c1                \tmov    %eax,%ecx\n  9e:\td3 e2                \tshl    %cl,%edx\n  a0:\t89 d0                \tmov    %edx,%eax\n  a2:\t89 44 24 18          \tmov    %eax,0x18(%rsp)\n  a6:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n  aa:\t0f be d0             \tmovsbl %al,%edx\n  ad:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n  b1:\t89 d6                \tmov    %edx,%esi\n  b3:\t89 c7                \tmov    %eax,%edi\n  b5:\te8 46 ff ff ff       \tcallq  0 <NEG_USR32>\n  ba:\t89 c3                \tmov    %eax,%ebx\n  bc:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n  c0:\t01 44 24 1c          \tadd    %eax,0x1c(%rsp)\n  c4:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n  c8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  cd:\t89 50 10             \tmov    %edx,0x10(%rax)\n  d0:\t89 d8                \tmov    %ebx,%eax\n  d2:\t48 83 c4 20          \tadd    $0x20,%rsp\n  d6:\t5b                   \tpop    %rbx\n  d7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_bits(__int64 a1, int a2) {\n  __int64 result;\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_DWORD *)(a1 + Number);\n  LODWORD(result) =\n      NEG_USR32(_byteswap_ulong(\n                    *(_DWORD *)((<span class=\"supfact\">v3</span> >> Number) + *(_QWORD *)a1))\n                    << (<span class=\"supfact\">v3</span> & Number),\n                a2);\n  *(_DWORD *)(a1 + Number) = a2 + <span class=\"supfact\">v3</span>;\n  return (unsigned int)result;\n}", "code_t": "unsigned int __cdecl get_bits(GetBitContext_0 *s, int n) {\n  unsigned int result;\n  unsigned int <span class=\"supfact\">re_index</span>;\n  <span class=\"supfact\">re_index</span> = s->index;\n  result = NEG_USR32(\n      _byteswap_ulong(*(_DWORD *)&s->buffer[<span class=\"supfact\">re_index</span> >> Number])\n          << (<span class=\"supfact\">re_index</span> & Number),\n      n);\n  s->index = n + <span class=\"supfact\">re_index</span>;\n  return result;\n}", "var": [{"name": "v3", "type": "unsigned int", "ref_name": "re_index", "ref_type": "unsigned int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/595c3e98191cf57769b97759699827ca28218afa0a93a92df66ae91608e0a02c", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/gaplus.o", "objdump": "0000000000001eaa <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring>:\n    1eaa:\t55                   \tpush   %rbp\n    1eab:\t48 89 e5             \tmov    %rsp,%rbp\n    1eae:\t53                   \tpush   %rbx\n    1eaf:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    1eb6:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    1eba:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n    1ebe:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    1ec5:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    1ec9:\t48 89 c7             \tmov    %rax,%rdi\n    1ecc:\te8 00 00 00 00       \tcallq  1ed1 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n    1ed1:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1ed8:\t00 \n    1ed9:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    1ee0:\t00 \n    1ee1:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    1ee8:\t00 \n    1ee9:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    1ef0:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    1ef7:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n    1efb:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    1eff:\t48 89 ce             \tmov    %rcx,%rsi\n    1f02:\t48 89 c7             \tmov    %rax,%rdi\n    1f05:\te8 b5 f0 ff ff       \tcallq  fbf <_ZL23construct_ioport_gaplusR8device_tR11tagged_listI17input_port_configER7astring>\n    1f0a:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    1f0e:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    1f12:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1f17:\t48 89 ce             \tmov    %rcx,%rsi\n    1f1a:\t48 89 c7             \tmov    %rax,%rdi\n    1f1d:\te8 00 00 00 00       \tcallq  1f22 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x78>\n    1f22:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1f26:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    1f2d:\t00 \n    1f2e:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1f35:\t00 \n    1f36:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    1f3d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1f41:\t41 b8 06 00 00 00    \tmov    $0x6,%r8d\n    1f47:\tb9 07 00 00 00       \tmov    $0x7,%ecx\n    1f4c:\tba 02 00 00 00       \tmov    $0x2,%edx\n    1f51:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    1f56:\t48 89 c7             \tmov    %rax,%rdi\n    1f59:\te8 00 00 00 00       \tcallq  1f5e <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0xb4>\n    1f5e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1f62:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1f69:\t00 \n    1f6a:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    1f71:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1f75:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f7a:\t48 89 c7             \tmov    %rax,%rdi\n    1f7d:\te8 00 00 00 00       \tcallq  1f82 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0xd8>\n    1f82:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1f86:\t8b 00                \tmov    (%rax),%eax\n    1f88:\t83 e0 02             \tand    $0x2,%eax\n    1f8b:\t89 c1                \tmov    %eax,%ecx\n    1f8d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1f91:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1f96:\t89 ce                \tmov    %ecx,%esi\n    1f98:\t48 89 c7             \tmov    %rax,%rdi\n    1f9b:\te8 00 00 00 00       \tcallq  1fa0 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0xf6>\n    1fa0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1fa4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1fa8:\t8b 00                \tmov    (%rax),%eax\n    1faa:\t83 e0 03             \tand    $0x3,%eax\n    1fad:\t89 c1                \tmov    %eax,%ecx\n    1faf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1fb3:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1fb8:\t89 ce                \tmov    %ecx,%esi\n    1fba:\t48 89 c7             \tmov    %rax,%rdi\n    1fbd:\te8 00 00 00 00       \tcallq  1fc2 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x118>\n    1fc2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1fc6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1fca:\t8b 00                \tmov    (%rax),%eax\n    1fcc:\t83 e0 04             \tand    $0x4,%eax\n    1fcf:\t89 c1                \tmov    %eax,%ecx\n    1fd1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1fd5:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1fda:\t89 ce                \tmov    %ecx,%esi\n    1fdc:\t48 89 c7             \tmov    %rax,%rdi\n    1fdf:\te8 00 00 00 00       \tcallq  1fe4 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x13a>\n    1fe4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1fe8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1fec:\t8b 00                \tmov    (%rax),%eax\n    1fee:\t83 e0 07             \tand    $0x7,%eax\n    1ff1:\t89 c1                \tmov    %eax,%ecx\n    1ff3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1ff7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1ffc:\t89 ce                \tmov    %ecx,%esi\n    1ffe:\t48 89 c7             \tmov    %rax,%rdi\n    2001:\te8 00 00 00 00       \tcallq  2006 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x15c>\n    2006:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    200a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    200e:\t8b 00                \tmov    (%rax),%eax\n    2010:\t83 e0 05             \tand    $0x5,%eax\n    2013:\t89 c1                \tmov    %eax,%ecx\n    2015:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2019:\tba 00 00 00 00       \tmov    $0x0,%edx\n    201e:\t89 ce                \tmov    %ecx,%esi\n    2020:\t48 89 c7             \tmov    %rax,%rdi\n    2023:\te8 00 00 00 00       \tcallq  2028 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x17e>\n    2028:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    202c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2030:\t8b 00                \tmov    (%rax),%eax\n    2032:\t83 e0 06             \tand    $0x6,%eax\n    2035:\t89 c1                \tmov    %eax,%ecx\n    2037:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    203b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2040:\t89 ce                \tmov    %ecx,%esi\n    2042:\t48 89 c7             \tmov    %rax,%rdi\n    2045:\te8 00 00 00 00       \tcallq  204a <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x1a0>\n    204a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    204e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2052:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2057:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    205c:\t48 89 c7             \tmov    %rax,%rdi\n    205f:\te8 00 00 00 00       \tcallq  2064 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x1ba>\n    2064:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2068:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    206c:\t8b 00                \tmov    (%rax),%eax\n    206e:\t83 e0 01             \tand    $0x1,%eax\n    2071:\t89 c1                \tmov    %eax,%ecx\n    2073:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2077:\tba 00 00 00 00       \tmov    $0x0,%edx\n    207c:\t89 ce                \tmov    %ecx,%esi\n    207e:\t48 89 c7             \tmov    %rax,%rdi\n    2081:\te8 00 00 00 00       \tcallq  2086 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x1dc>\n    2086:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    208a:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    208e:\t48 89 c7             \tmov    %rax,%rdi\n    2091:\te8 00 00 00 00       \tcallq  2096 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x1ec>\n    2096:\teb 1a                \tjmp    20b2 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x208>\n    2098:\t48 89 c3             \tmov    %rax,%rbx\n    209b:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    209f:\t48 89 c7             \tmov    %rax,%rdi\n    20a2:\te8 00 00 00 00       \tcallq  20a7 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x1fd>\n    20a7:\t48 89 d8             \tmov    %rbx,%rax\n    20aa:\t48 89 c7             \tmov    %rax,%rdi\n    20ad:\te8 00 00 00 00       \tcallq  20b2 <_ZL25construct_ioport_galaga3aR8device_tR11tagged_listI17input_port_configER7astring+0x208>\n    20b2:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    20b9:\t5b                   \tpop    %rbx\n    20ba:\t5d                   \tpop    %rbp\n    20bb:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_galaga3a(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  _DWORD *<span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v6</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  construct_ioport_gaplus(a1, a2, a3);\n  <span class=\"supfact\">v6</span> = ioconfig_modify_port(a2, a1, String);\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">v7</span> = (_DWORD *)ioconfig_alloc_field(\n      <span class=\"supfact\">v6</span>, Number L, Number L, Number L, Number L);\n  <span class=\"supfact\">v8</span> = Number L;\n  diplocation_list_alloc(<span class=\"supfact\">v7</span>, String, a3);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, String);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, String);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, String);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, String);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, String);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, String);\n  <span class=\"supfact\">v8</span> =\n      ioconfig_alloc_setting(<span class=\"supfact\">v7</span>, Number L, String);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, String);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl construct_ioport_galaga3a(device_t *owner, ioport_list *portlist,\n                                       astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value <span class=\"supfact\">maskbits</span>;\n  input_port_config *<span class=\"supfact\">curport</span>;\n  input_field_config *<span class=\"supfact\">curfield</span>;\n  input_setting_config *<span class=\"supfact\">cursetting</span>;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">curfield</span> = Number L;\n  <span class=\"supfact\">curport</span> = Number L;\n  <span class=\"supfact\">maskbits</span> = Number;\n  construct_ioport_gaplus(owner, portlist, errorbuf);\n  <span class=\"supfact\">curport</span> =\n      (input_port_config *)ioconfig_modify_port(portlist, owner, String);\n  <span class=\"supfact\">curfield</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">maskbits</span> = Number;\n  <span class=\"supfact\">curfield</span> = (input_field_config *)ioconfig_alloc_field(\n      <span class=\"supfact\">curport</span>, Number, Number, Number,\n      (const char *)&loc_4 + Number);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  diplocation_list_alloc(<span class=\"supfact\">curfield</span>, String, errorbuf);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      String);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      String);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      String);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      String);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      String);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      String);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, Number, String);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      String);\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v8", "type": "input_setting_config *", "ref_name": "cursetting", "ref_type": "input_setting_config *"}, {"name": "v7", "type": "input_field_config *", "ref_name": "curfield", "ref_type": "input_field_config *"}, {"name": "v6", "type": "input_port_config *", "ref_name": "curport", "ref_type": "input_port_config *"}, {"name": "v5", "type": "input_port_value", "ref_name": "maskbits", "ref_type": "input_port_value"}, {"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "has_struc": true, "body_in_train": false}, {"repo_owner": "ningwang100", "repo_name": "Chingoal-Web-Application", "path": "ningwang100/Chingoal-Web-Application/d0f8aa4d525e6db0e90a2d27370eaa8cf462ce9826251037aeb3ae3182fadc6a", "path_in_repo": "ningwang100/Chingoal-Web-Application/thirdpart/redis-3.0.5/deps/lua/src/luac", "objdump": "0000000000411822 <luaH_set>:\n  411822:\t55                   \tpush   %rbp\n  411823:\t48 89 e5             \tmov    %rsp,%rbp\n  411826:\t48 83 ec 30          \tsub    $0x30,%rsp\n  41182a:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  41182e:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  411832:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  411836:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  41183a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41183e:\t48 89 d6             \tmov    %rdx,%rsi\n  411841:\t48 89 c7             \tmov    %rax,%rdi\n  411844:\te8 ee fe ff ff       \tcallq  411737 <luaH_get>\n  411849:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  41184d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  411851:\tc6 40 0a 00          \tmovb   $0x0,0xa(%rax)\n  411855:\t48 81 7d f8 a0 cc 41 \tcmpq   $0x41cca0,-0x8(%rbp)\n  41185c:\t00 \n  41185d:\t74 06                \tje     411865 <luaH_set+0x43>\n  41185f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  411863:\teb 78                \tjmp    4118dd <luaH_set+0xbb>\n  411865:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  411869:\t8b 40 08             \tmov    0x8(%rax),%eax\n  41186c:\t85 c0                \ttest   %eax,%eax\n  41186e:\t75 18                \tjne    411888 <luaH_set+0x66>\n  411870:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  411874:\tbe cd d7 41 00       \tmov    $0x41d7cd,%esi\n  411879:\t48 89 c7             \tmov    %rax,%rdi\n  41187c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  411881:\te8 90 52 ff ff       \tcallq  406b16 <luaG_runerror>\n  411886:\teb 3e                \tjmp    4118c6 <luaH_set+0xa4>\n  411888:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41188c:\t8b 40 08             \tmov    0x8(%rax),%eax\n  41188f:\t83 f8 03             \tcmp    $0x3,%eax\n  411892:\t75 32                \tjne    4118c6 <luaH_set+0xa4>\n  411894:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  411898:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n  41189c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4118a0:\tf2 0f 10 08          \tmovsd  (%rax),%xmm1\n  4118a4:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n  4118a8:\t7a 06                \tjp     4118b0 <luaH_set+0x8e>\n  4118aa:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n  4118ae:\t74 16                \tje     4118c6 <luaH_set+0xa4>\n  4118b0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4118b4:\tbe e0 d7 41 00       \tmov    $0x41d7e0,%esi\n  4118b9:\t48 89 c7             \tmov    %rax,%rdi\n  4118bc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4118c1:\te8 50 52 ff ff       \tcallq  406b16 <luaG_runerror>\n  4118c6:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4118ca:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  4118ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4118d2:\t48 89 ce             \tmov    %rcx,%rsi\n  4118d5:\t48 89 c7             \tmov    %rax,%rdi\n  4118d8:\te8 7a fb ff ff       \tcallq  411457 <newkey>\n  4118dd:\tc9                   \tleaveq \n  4118de:\tc3                   \tretq   ", "code_s": "__int64 __fastcall luaH_set(_QWORD *a1, __int64 a2, __int64 a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  void *<span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = luaH_get(a2, a3);\n  *(_BYTE *)(a2 + Number) = Number;\n  if (<span class=\"supfact\">v9</span> != &luaO_nilobject_)\n    return (__int64)<span class=\"supfact\">v9</span>;\n  if (!*(_DWORD *)(a3 + Number))\n    luaG_runerror(a1, (__int64)String, v3, v4, v5, v6);\n  return newkey(a1, a2, a3);\n}", "code_t": "TValue *__cdecl luaH_set(lua_State_0 *L, Table_0 *t, const TValue *key) {\n  const TValue *<span class=\"supfact\">p</span>;\n  <span class=\"supfact\">p</span> = luaH_get(t, key);\n  t->flags = Number;\n  if (<span class=\"supfact\">p</span> != &luaO_nilobject_)\n    return (TValue *)<span class=\"supfact\">p</span>;\n  if (!key->tt)\n    luaG_runerror(L, String);\n  return newkey(L, t, key);\n}", "var": [{"name": "v9", "type": "lua_State *", "ref_name": "p", "ref_type": "const TValue *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "bulkin042", "repo_name": "cyanogenmod_kernel_lenovo_a5000_lollipop", "path": "bulkin042/cyanogenmod_kernel_lenovo_a5000_lollipop/f3d0a9d9f20d989b54bca3cc578d704115e6c3c9321d916040d9f088c5f408fd", "path_in_repo": "bulkin042/cyanogenmod_kernel_lenovo_a5000_lollipop/tools/perf/builtin-trace.o", "objdump": "00000000000004f5 <thread__trace>:\n     4f5:\t55                   \tpush   %rbp\n     4f6:\t48 89 e5             \tmov    %rsp,%rbp\n     4f9:\t48 83 ec 20          \tsub    $0x20,%rsp\n     4fd:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     501:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     508:\t00 00 \n     50a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     50e:\t31 c0                \txor    %eax,%eax\n     510:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     515:\t74 4d                \tje     564 <thread__trace+0x6f>\n     517:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     51b:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     51f:\t48 85 c0             \ttest   %rax,%rax\n     522:\t75 0d                \tjne    531 <thread__trace+0x3c>\n     524:\te8 95 ff ff ff       \tcallq  4be <thread_trace__new>\n     529:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     52d:\t48 89 42 68          \tmov    %rax,0x68(%rdx)\n     531:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     535:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     539:\t48 85 c0             \ttest   %rax,%rax\n     53c:\t74 29                \tje     567 <thread__trace+0x72>\n     53e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     542:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     546:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     54a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     54e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     552:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     556:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     55a:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n     55e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     562:\teb 27                \tjmp    58b <thread__trace+0x96>\n     564:\t90                   \tnop\n     565:\teb 01                \tjmp    568 <thread__trace+0x73>\n     567:\t90                   \tnop\n     568:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 56f <thread__trace+0x7a>\n     56f:\tba 00 00 00 00       \tmov    $0x0,%edx\n     574:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     579:\t48 89 c7             \tmov    %rax,%rdi\n     57c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     581:\te8 00 00 00 00       \tcallq  586 <thread__trace+0x91>\n     586:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     58b:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     58f:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     596:\t00 00 \n     598:\t74 05                \tje     59f <thread__trace+0xaa>\n     59a:\te8 00 00 00 00       \tcallq  59f <thread__trace+0xaa>\n     59f:\tc9                   \tleaveq \n     5a0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall thread__trace(__int64 a1) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v2</span>;\n  if (!a1)\n    goto LABEL_6;\n  if (!*(_QWORD *)(a1 + Number))\n    *(_QWORD *)(a1 + Number) = thread_trace__new();\n  if (*(_QWORD *)(a1 + Number)) {\n    <span class=\"supfact\">v2</span> = *(_QWORD *)(a1 + Number);\n    ++*(_QWORD *)(<span class=\"supfact\">v2</span> + Number);\n    result = <span class=\"supfact\">v2</span>;\n  } else {\n  LABEL_6:\n    color_fprintf(stdout, String, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "thread_trace *__cdecl thread__trace(thread *thread) {\n  thread_trace *result;\n  thread_trace *<span class=\"supfact\">ttrace</span>;\n  if (!thread)\n    goto fail;\n  if (!thread->priv)\n    thread->priv = thread_trace__new();\n  if (thread->priv) {\n    <span class=\"supfact\">ttrace</span> = (thread_trace *)thread->priv;\n    ++<span class=\"supfact\">ttrace</span>->nr_events;\n    result = <span class=\"supfact\">ttrace</span>;\n  } else {\n  fail:\n    color_fprintf(stdout, String, String);\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "thread_trace *", "ref_name": "ttrace", "ref_type": "thread_trace *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "sookee", "repo_name": "oa-mod", "path": "sookee/oa-mod/776479175374a24b9435754ca0209941ad11eaf21d5419fac921abe2ab88977a", "path_in_repo": "sookee/oa-mod//oa-0.8.8/build/debug-linux-x86_64/baseq3/cgame/cg_event.o", "objdump": "0000000000000000 <CG_PlaceString>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 83 ec 20          \tsub    $0x20,%rsp\n       8:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n       b:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n       e:\t25 00 40 00 00       \tand    $0x4000,%eax\n      13:\t85 c0                \ttest   %eax,%eax\n      15:\t74 14                \tje     2b <CG_PlaceString+0x2b>\n      17:\t81 65 ec ff bf ff ff \tandl   $0xffffbfff,-0x14(%rbp)\n      1e:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 25 <CG_PlaceString+0x25>\n      25:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n      29:\teb 0b                \tjmp    36 <CG_PlaceString+0x36>\n      2b:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 32 <CG_PlaceString+0x32>\n      32:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n      36:\t83 7d ec 01          \tcmpl   $0x1,-0x14(%rbp)\n      3a:\t75 10                \tjne    4c <CG_PlaceString+0x4c>\n      3c:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 43 <CG_PlaceString+0x43>\n      43:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      47:\te9 6c 01 00 00       \tjmpq   1b8 <CG_PlaceString+0x1b8>\n      4c:\t83 7d ec 02          \tcmpl   $0x2,-0x14(%rbp)\n      50:\t75 10                \tjne    62 <CG_PlaceString+0x62>\n      52:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 59 <CG_PlaceString+0x59>\n      59:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      5d:\te9 56 01 00 00       \tjmpq   1b8 <CG_PlaceString+0x1b8>\n      62:\t83 7d ec 03          \tcmpl   $0x3,-0x14(%rbp)\n      66:\t75 10                \tjne    78 <CG_PlaceString+0x78>\n      68:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 6f <CG_PlaceString+0x6f>\n      6f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      73:\te9 40 01 00 00       \tjmpq   1b8 <CG_PlaceString+0x1b8>\n      78:\t83 7d ec 0b          \tcmpl   $0xb,-0x14(%rbp)\n      7c:\t75 10                \tjne    8e <CG_PlaceString+0x8e>\n      7e:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 85 <CG_PlaceString+0x85>\n      85:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      89:\te9 2a 01 00 00       \tjmpq   1b8 <CG_PlaceString+0x1b8>\n      8e:\t83 7d ec 0c          \tcmpl   $0xc,-0x14(%rbp)\n      92:\t75 10                \tjne    a4 <CG_PlaceString+0xa4>\n      94:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 9b <CG_PlaceString+0x9b>\n      9b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      9f:\te9 14 01 00 00       \tjmpq   1b8 <CG_PlaceString+0x1b8>\n      a4:\t83 7d ec 0d          \tcmpl   $0xd,-0x14(%rbp)\n      a8:\t75 10                \tjne    ba <CG_PlaceString+0xba>\n      aa:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # b1 <CG_PlaceString+0xb1>\n      b1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      b5:\te9 fe 00 00 00       \tjmpq   1b8 <CG_PlaceString+0x1b8>\n      ba:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n      bd:\t48 63 c1             \tmovslq %ecx,%rax\n      c0:\t48 69 c0 67 66 66 66 \timul   $0x66666667,%rax,%rax\n      c7:\t48 c1 e8 20          \tshr    $0x20,%rax\n      cb:\t89 c2                \tmov    %eax,%edx\n      cd:\tc1 fa 02             \tsar    $0x2,%edx\n      d0:\t89 c8                \tmov    %ecx,%eax\n      d2:\tc1 f8 1f             \tsar    $0x1f,%eax\n      d5:\t29 c2                \tsub    %eax,%edx\n      d7:\t89 d0                \tmov    %edx,%eax\n      d9:\tc1 e0 02             \tshl    $0x2,%eax\n      dc:\t01 d0                \tadd    %edx,%eax\n      de:\t01 c0                \tadd    %eax,%eax\n      e0:\t29 c1                \tsub    %eax,%ecx\n      e2:\t89 ca                \tmov    %ecx,%edx\n      e4:\t83 fa 01             \tcmp    $0x1,%edx\n      e7:\t75 1f                \tjne    108 <CG_PlaceString+0x108>\n      e9:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n      ec:\t89 c6                \tmov    %eax,%esi\n      ee:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # f5 <CG_PlaceString+0xf5>\n      f5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      fa:\te8 00 00 00 00       \tcallq  ff <CG_PlaceString+0xff>\n      ff:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     103:\te9 b0 00 00 00       \tjmpq   1b8 <CG_PlaceString+0x1b8>\n     108:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n     10b:\t48 63 c1             \tmovslq %ecx,%rax\n     10e:\t48 69 c0 67 66 66 66 \timul   $0x66666667,%rax,%rax\n     115:\t48 c1 e8 20          \tshr    $0x20,%rax\n     119:\t89 c2                \tmov    %eax,%edx\n     11b:\tc1 fa 02             \tsar    $0x2,%edx\n     11e:\t89 c8                \tmov    %ecx,%eax\n     120:\tc1 f8 1f             \tsar    $0x1f,%eax\n     123:\t29 c2                \tsub    %eax,%edx\n     125:\t89 d0                \tmov    %edx,%eax\n     127:\tc1 e0 02             \tshl    $0x2,%eax\n     12a:\t01 d0                \tadd    %edx,%eax\n     12c:\t01 c0                \tadd    %eax,%eax\n     12e:\t29 c1                \tsub    %eax,%ecx\n     130:\t89 ca                \tmov    %ecx,%edx\n     132:\t83 fa 02             \tcmp    $0x2,%edx\n     135:\t75 1c                \tjne    153 <CG_PlaceString+0x153>\n     137:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     13a:\t89 c6                \tmov    %eax,%esi\n     13c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 143 <CG_PlaceString+0x143>\n     143:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     148:\te8 00 00 00 00       \tcallq  14d <CG_PlaceString+0x14d>\n     14d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     151:\teb 65                \tjmp    1b8 <CG_PlaceString+0x1b8>\n     153:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n     156:\t48 63 c1             \tmovslq %ecx,%rax\n     159:\t48 69 c0 67 66 66 66 \timul   $0x66666667,%rax,%rax\n     160:\t48 c1 e8 20          \tshr    $0x20,%rax\n     164:\t89 c2                \tmov    %eax,%edx\n     166:\tc1 fa 02             \tsar    $0x2,%edx\n     169:\t89 c8                \tmov    %ecx,%eax\n     16b:\tc1 f8 1f             \tsar    $0x1f,%eax\n     16e:\t29 c2                \tsub    %eax,%edx\n     170:\t89 d0                \tmov    %edx,%eax\n     172:\tc1 e0 02             \tshl    $0x2,%eax\n     175:\t01 d0                \tadd    %edx,%eax\n     177:\t01 c0                \tadd    %eax,%eax\n     179:\t29 c1                \tsub    %eax,%ecx\n     17b:\t89 ca                \tmov    %ecx,%edx\n     17d:\t83 fa 03             \tcmp    $0x3,%edx\n     180:\t75 1c                \tjne    19e <CG_PlaceString+0x19e>\n     182:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     185:\t89 c6                \tmov    %eax,%esi\n     187:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 18e <CG_PlaceString+0x18e>\n     18e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     193:\te8 00 00 00 00       \tcallq  198 <CG_PlaceString+0x198>\n     198:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     19c:\teb 1a                \tjmp    1b8 <CG_PlaceString+0x1b8>\n     19e:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     1a1:\t89 c6                \tmov    %eax,%esi\n     1a3:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1aa <CG_PlaceString+0x1aa>\n     1aa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     1af:\te8 00 00 00 00       \tcallq  1b4 <CG_PlaceString+0x1b4>\n     1b4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     1b8:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     1bc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     1c0:\t49 89 d0             \tmov    %rdx,%r8\n     1c3:\t48 89 c1             \tmov    %rax,%rcx\n     1c6:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 1cd <CG_PlaceString+0x1cd>\n     1cd:\tbe 40 00 00 00       \tmov    $0x40,%esi\n     1d2:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1d9 <CG_PlaceString+0x1d9>\n     1d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     1de:\te8 00 00 00 00       \tcallq  1e3 <CG_PlaceString+0x1e3>\n     1e3:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 1ea <CG_PlaceString+0x1ea>\n     1ea:\tc9                   \tleaveq \n     1eb:\tc3                   \tretq   ", "code_s": "void *__fastcall CG_PlaceString(unsigned int a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  const char *<span class=\"supfact\">v3</span>;\n  const char *v4;\n  const char *v5;\n  const char *v6;\n  <span class=\"supfact\">v2</span> = a1;\n  if ((a1 & Number) != Number) {\n    <span class=\"supfact\">v2</span> = a1 & Number;\n    <span class=\"supfact\">v3</span> = String;\n  } else {\n    <span class=\"supfact\">v3</span> = (const char *)&unk_386A;\n  }\n  switch (<span class=\"supfact\">v2</span>) {\n  case Number:\n    Com_sprintf(&str_10113, Number L, String, <span class=\"supfact\">v3</span>, String);\n    break;\n  case Number:\n    Com_sprintf(&str_10113, Number L, String, <span class=\"supfact\">v3</span>, String);\n    break;\n  case Number:\n    Com_sprintf(&str_10113, Number L, String, <span class=\"supfact\">v3</span>, String);\n    break;\n  case Number:\n    Com_sprintf(&str_10113, Number L, String, <span class=\"supfact\">v3</span>, String);\n    break;\n  case Number:\n    Com_sprintf(&str_10113, Number L, String, <span class=\"supfact\">v3</span>, String);\n    break;\n  case Number:\n    Com_sprintf(&str_10113, Number L, String, <span class=\"supfact\">v3</span>, String);\n    break;\n  default:\n    if ((int)<span class=\"supfact\">v2</span> % Number == Number) {\n      v4 = (const char *)va(String, <span class=\"supfact\">v2</span>);\n      Com_sprintf(&str_10113, Number L, String, <span class=\"supfact\">v3</span>, v4);\n    } else if ((int)<span class=\"supfact\">v2</span> % Number == Number) {\n      v5 = (const char *)va(String, <span class=\"supfact\">v2</span>);\n      Com_sprintf(&str_10113, Number L, String, <span class=\"supfact\">v3</span>, v5);\n    } else {\n      if ((int)<span class=\"supfact\">v2</span> % Number == Number)\n        v6 = (const char *)va(String, <span class=\"supfact\">v2</span>);\n      else\n        v6 = (const char *)va(String, <span class=\"supfact\">v2</span>);\n      Com_sprintf(&str_10113, Number L, String, <span class=\"supfact\">v3</span>, v6);\n    }\n    break;\n  }\n  return &str_10113;\n}", "code_t": "const char *__cdecl CG_PlaceString(int rank) {\n  unsigned int <span class=\"supfact\">ranka</span>;\n  char *<span class=\"supfact\">t</span>;\n  char *sa;\n  char *sb;\n  char *s;\n  <span class=\"supfact\">ranka</span> = rank;\n  if ((rank & Number) != Number) {\n    <span class=\"supfact\">ranka</span> = rank & Number;\n    <span class=\"supfact\">t</span> = String;\n  } else {\n    <span class=\"supfact\">t</span> = (char *)&unk_386A;\n  }\n  switch (<span class=\"supfact\">ranka</span>) {\n  case Number:\n    Com_sprintf(str_10113, Number L, String, <span class=\"supfact\">t</span>, String);\n    break;\n  case Number:\n    Com_sprintf(str_10113, Number L, String, <span class=\"supfact\">t</span>, String);\n    break;\n  case Number:\n    Com_sprintf(str_10113, Number L, String, <span class=\"supfact\">t</span>, String);\n    break;\n  case Number:\n    Com_sprintf(str_10113, Number L, String, <span class=\"supfact\">t</span>, String);\n    break;\n  case Number:\n    Com_sprintf(str_10113, Number L, String, <span class=\"supfact\">t</span>, String);\n    break;\n  case Number:\n    Com_sprintf(str_10113, Number L, String, <span class=\"supfact\">t</span>, String);\n    break;\n  default:\n    if ((int)<span class=\"supfact\">ranka</span> % Number == Number) {\n      sa = (char *)va(String, <span class=\"supfact\">ranka</span>);\n      Com_sprintf(str_10113, Number L, String, <span class=\"supfact\">t</span>, sa);\n    } else if ((int)<span class=\"supfact\">ranka</span> % Number == Number) {\n      sb = (char *)va(String, <span class=\"supfact\">ranka</span>);\n      Com_sprintf(str_10113, Number L, String, <span class=\"supfact\">t</span>, sb);\n    } else {\n      if ((int)<span class=\"supfact\">ranka</span> % Number == Number)\n        s = (char *)va(String, <span class=\"supfact\">ranka</span>);\n      else\n        s = (char *)va(String, <span class=\"supfact\">ranka</span>);\n      Com_sprintf(str_10113, Number L, String, <span class=\"supfact\">t</span>, s);\n    }\n    break;\n  }\n  return str_10113;\n}", "var": [{"name": "v3", "type": "char *", "ref_name": "t", "ref_type": "char *"}, {"name": "v2", "type": "int", "ref_name": "ranka", "ref_type": "unsigned int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/c9a7aeae2fc2533d34875501f6188151224c14a10186cc4b3f9e9e3daa87bf88", "path_in_repo": "sslab-gatech/janus/lkl/tools/lib/traceevent/plugin_scsi.so", "objdump": "0000000000001060 <scsi_trace_rw6>:\n    1060:\t55                   \tpush   %rbp\n    1061:\t48 89 e5             \tmov    %rsp,%rbp\n    1064:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1068:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    106c:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    1070:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n    1073:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1077:\t48 8b 10             \tmov    (%rax),%rdx\n    107a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    107e:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    1081:\t89 c0                \tmov    %eax,%eax\n    1083:\t48 01 d0             \tadd    %rdx,%rax\n    1086:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    108a:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    1091:\t00 \n    1092:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1099:\t00 \n    109a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    109e:\t48 83 c0 01          \tadd    $0x1,%rax\n    10a2:\t0f b6 00             \tmovzbl (%rax),%eax\n    10a5:\t0f b6 c0             \tmovzbl %al,%eax\n    10a8:\tc1 e0 10             \tshl    $0x10,%eax\n    10ab:\t48 98                \tcltq   \n    10ad:\t25 00 00 1f 00       \tand    $0x1f0000,%eax\n    10b2:\t48 09 45 f0          \tor     %rax,-0x10(%rbp)\n    10b6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    10ba:\t48 83 c0 02          \tadd    $0x2,%rax\n    10be:\t0f b6 00             \tmovzbl (%rax),%eax\n    10c1:\t0f b6 c0             \tmovzbl %al,%eax\n    10c4:\tc1 e0 08             \tshl    $0x8,%eax\n    10c7:\t48 98                \tcltq   \n    10c9:\t48 09 45 f0          \tor     %rax,-0x10(%rbp)\n    10cd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    10d1:\t48 83 c0 03          \tadd    $0x3,%rax\n    10d5:\t0f b6 00             \tmovzbl (%rax),%eax\n    10d8:\t0f b6 c0             \tmovzbl %al,%eax\n    10db:\t48 09 45 f0          \tor     %rax,-0x10(%rbp)\n    10df:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    10e3:\t48 83 c0 04          \tadd    $0x4,%rax\n    10e7:\t0f b6 00             \tmovzbl (%rax),%eax\n    10ea:\t0f b6 c0             \tmovzbl %al,%eax\n    10ed:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    10f1:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    10f5:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    10f9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    10fd:\t48 8d 35 fc 0e 00 00 \tlea    0xefc(%rip),%rsi        # 2000 <pevent_plugin_unloader+0x2ab>\n    1104:\t48 89 c7             \tmov    %rax,%rdi\n    1107:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    110c:\te8 ff fe ff ff       \tcallq  1010 <trace_seq_printf@plt>\n    1111:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1115:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    111a:\t48 89 c7             \tmov    %rax,%rdi\n    111d:\te8 0e ff ff ff       \tcallq  1030 <trace_seq_putc@plt>\n    1122:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1126:\tc9                   \tleaveq \n    1127:\tc3                   \tretq   ", "code_s": "__int64 __fastcall scsi_trace_rw6(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)a1 + *(unsigned int *)(a1 + Number);\n  trace_seq_printf();\n  trace_seq_putc();\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "const char *__cdecl scsi_trace_rw6(trace_seq *p, unsigned __int8 *cdb,\n                                   int len) {\n  char *<span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = &p->buffer[p->len];\n  trace_seq_printf();\n  trace_seq_putc();\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v2", "type": "char *", "ref_name": "ret", "ref_type": "char *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "fireae", "repo_name": "BasicOCR", "path": "fireae/BasicOCR/abce467643393d6f9a6b5089b8daeabe40407d1653b7df3b30c394771d5d7ac5", "path_in_repo": "fireae/BasicOCR/libtiff/libz/zlib123/example", "objdump": "000000000040c472 <set_data_type>:\n  40c472:\t55                   \tpush   %rbp\n  40c473:\t48 89 e5             \tmov    %rsp,%rbp\n  40c476:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40c47a:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40c481:\teb 1c                \tjmp    40c49f <set_data_type+0x2d>\n  40c483:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c487:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40c48a:\t48 63 d2             \tmovslq %edx,%rdx\n  40c48d:\t48 83 c2 30          \tadd    $0x30,%rdx\n  40c491:\t0f b7 44 90 04       \tmovzwl 0x4(%rax,%rdx,4),%eax\n  40c496:\t66 85 c0             \ttest   %ax,%ax\n  40c499:\t75 0c                \tjne    40c4a7 <set_data_type+0x35>\n  40c49b:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40c49f:\t83 7d fc 08          \tcmpl   $0x8,-0x4(%rbp)\n  40c4a3:\t7e de                \tjle    40c483 <set_data_type+0x11>\n  40c4a5:\teb 01                \tjmp    40c4a8 <set_data_type+0x36>\n  40c4a7:\t90                   \tnop\n  40c4a8:\t83 7d fc 09          \tcmpl   $0x9,-0x4(%rbp)\n  40c4ac:\t75 2e                \tjne    40c4dc <set_data_type+0x6a>\n  40c4ae:\tc7 45 fc 0e 00 00 00 \tmovl   $0xe,-0x4(%rbp)\n  40c4b5:\teb 1c                \tjmp    40c4d3 <set_data_type+0x61>\n  40c4b7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c4bb:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40c4be:\t48 63 d2             \tmovslq %edx,%rdx\n  40c4c1:\t48 83 c2 30          \tadd    $0x30,%rdx\n  40c4c5:\t0f b7 44 90 04       \tmovzwl 0x4(%rax,%rdx,4),%eax\n  40c4ca:\t66 85 c0             \ttest   %ax,%ax\n  40c4cd:\t75 0c                \tjne    40c4db <set_data_type+0x69>\n  40c4cf:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40c4d3:\t83 7d fc 1f          \tcmpl   $0x1f,-0x4(%rbp)\n  40c4d7:\t7e de                \tjle    40c4b7 <set_data_type+0x45>\n  40c4d9:\teb 01                \tjmp    40c4dc <set_data_type+0x6a>\n  40c4db:\t90                   \tnop\n  40c4dc:\t83 7d fc 20          \tcmpl   $0x20,-0x4(%rbp)\n  40c4e0:\t0f 94 c2             \tsete   %dl\n  40c4e3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c4e7:\t48 8b 00             \tmov    (%rax),%rax\n  40c4ea:\t0f b6 d2             \tmovzbl %dl,%edx\n  40c4ed:\t89 50 58             \tmov    %edx,0x58(%rax)\n  40c4f0:\t90                   \tnop\n  40c4f1:\t5d                   \tpop    %rbp\n  40c4f2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall set_data_type(__int64 *a1) {\n  __int64 result;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> <= Number &&\n       !*((_WORD *)a1 + Number * <span class=\"supfact\">i</span> + Number);\n       ++<span class=\"supfact\">i</span>)\n    ;\n  if (<span class=\"supfact\">i</span> == Number) {\n    for (<span class=\"supfact\">i</span> = Number;\n         <span class=\"supfact\">i</span> <= Number &&\n         !*((_WORD *)a1 + Number * <span class=\"supfact\">i</span> + Number);\n         ++<span class=\"supfact\">i</span>)\n      ;\n  }\n  result = *a1;\n  *(_DWORD *)(*a1 + Number) = <span class=\"supfact\">i</span> == Number;\n  return result;\n}", "code_t": "void __cdecl set_data_type(deflate_state_0 *s) {\n  int <span class=\"supfact\">n</span>;\n  for (<span class=\"supfact\">n</span> = Number;\n       <span class=\"supfact\">n</span> <= Number && !s->dyn_ltree[<span class=\"supfact\">n</span>].fc.freq;\n       ++<span class=\"supfact\">n</span>)\n    ;\n  if (<span class=\"supfact\">n</span> == Number) {\n    for (<span class=\"supfact\">n</span> = Number; <span class=\"supfact\">n</span> <= Number &&\n                                     !s->dyn_ltree[<span class=\"supfact\">n</span>].fc.freq;\n         ++<span class=\"supfact\">n</span>)\n      ;\n  }\n  s->strm->data_type = <span class=\"supfact\">n</span> == Number;\n}", "var": [{"name": "i", "type": "int", "ref_name": "n", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "trakons", "repo_name": "QEMU-s5l89xx-test", "path": "trakons/QEMU-s5l89xx-test/2d53edb2434ec64b313381a8520f55f785991cf5b2474d10030c414f3da403e7", "path_in_repo": "trakons/QEMU-s5l89xx-test//qemu-io", "objdump": "000000000040a2b5 <qemu_strnlen>:\n  40a2b5:\t55                   \tpush   %rbp\n  40a2b6:\t48 89 e5             \tmov    %rsp,%rbp\n  40a2b9:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40a2bd:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40a2c1:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  40a2c4:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  40a2cb:\t00 00 \n  40a2cd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40a2d1:\t31 c0                \txor    %eax,%eax\n  40a2d3:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  40a2da:\teb 18                \tjmp    40a2f4 <qemu_strnlen+0x3f>\n  40a2dc:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40a2df:\t48 63 d0             \tmovslq %eax,%rdx\n  40a2e2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40a2e6:\t48 01 d0             \tadd    %rdx,%rax\n  40a2e9:\t0f b6 00             \tmovzbl (%rax),%eax\n  40a2ec:\t84 c0                \ttest   %al,%al\n  40a2ee:\t74 0e                \tje     40a2fe <qemu_strnlen+0x49>\n  40a2f0:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  40a2f4:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40a2f7:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n  40a2fa:\t7c e0                \tjl     40a2dc <qemu_strnlen+0x27>\n  40a2fc:\teb 01                \tjmp    40a2ff <qemu_strnlen+0x4a>\n  40a2fe:\t90                   \tnop\n  40a2ff:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40a302:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  40a306:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n  40a30d:\t00 00 \n  40a30f:\t74 05                \tje     40a316 <qemu_strnlen+0x61>\n  40a311:\te8 4a 92 ff ff       \tcallq  403560 <__stack_chk_fail@plt>\n  40a316:\tc9                   \tleaveq \n  40a317:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qemu_strnlen(__int64 a1, int a2) {\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;\n       (int)<span class=\"supfact\">i</span> < a2 && *(_BYTE *)((int)<span class=\"supfact\">i</span> + a1);\n       ++<span class=\"supfact\">i</span>)\n    ;\n  return <span class=\"supfact\">i</span>;\n}", "code_t": "int __cdecl qemu_strnlen(const char *s, int max_len) {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < max_len && s[<span class=\"supfact\">i</span>]; ++<span class=\"supfact\">i</span>)\n    ;\n  return <span class=\"supfact\">i</span>;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "hall-lab", "repo_name": "speedseq", "path": "hall-lab/speedseq/44196aa6c1f1d3272f7909532fccde33c97d109b856db1c6a150b619af7dc4e6", "path_in_repo": "hall-lab/speedseq/src/samtools-1.3.1/htslib-1.3.1/test/test-regidx", "objdump": "0000000000467028 <cram_gamma_decode>:\n  467028:\t55                   \tpush   %rbp\n  467029:\t48 89 e5             \tmov    %rsp,%rbp\n  46702c:\t48 83 ec 48          \tsub    $0x48,%rsp\n  467030:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  467034:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  467038:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  46703c:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  467040:\t4c 89 45 b8          \tmov    %r8,-0x48(%rbp)\n  467044:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  467048:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  46704c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  467053:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  467057:\t8b 00                \tmov    (%rax),%eax\n  467059:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  46705c:\te9 e6 00 00 00       \tjmpq   467147 <cram_gamma_decode+0x11f>\n  467061:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  467068:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  46706c:\t48 89 c7             \tmov    %rax,%rdi\n  46706f:\te8 73 da ff ff       \tcallq  464ae7 <get_zero_bits_MSB>\n  467074:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  467077:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  46707a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  46707e:\t89 d6                \tmov    %edx,%esi\n  467080:\t48 89 c7             \tmov    %rax,%rdi\n  467083:\te8 f5 d8 ff ff       \tcallq  46497d <cram_not_enough_bits>\n  467088:\t85 c0                \ttest   %eax,%eax\n  46708a:\t74 0a                \tje     467096 <cram_gamma_decode+0x6e>\n  46708c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  467091:\te9 c2 00 00 00       \tjmpq   467158 <cram_gamma_decode+0x130>\n  467096:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n  46709d:\teb 7a                \tjmp    467119 <cram_gamma_decode+0xf1>\n  46709f:\td1 65 f4             \tshll   -0xc(%rbp)\n  4670a2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4670a6:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n  4670aa:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4670ae:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  4670b2:\t48 01 d0             \tadd    %rdx,%rax\n  4670b5:\t0f b6 00             \tmovzbl (%rax),%eax\n  4670b8:\t0f b6 d0             \tmovzbl %al,%edx\n  4670bb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4670bf:\t8b 40 38             \tmov    0x38(%rax),%eax\n  4670c2:\t89 c1                \tmov    %eax,%ecx\n  4670c4:\td3 fa                \tsar    %cl,%edx\n  4670c6:\t89 d0                \tmov    %edx,%eax\n  4670c8:\t83 e0 01             \tand    $0x1,%eax\n  4670cb:\t09 45 f4             \tor     %eax,-0xc(%rbp)\n  4670ce:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4670d2:\t8b 40 38             \tmov    0x38(%rax),%eax\n  4670d5:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  4670d8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4670dc:\t89 50 38             \tmov    %edx,0x38(%rax)\n  4670df:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4670e3:\t8b 40 38             \tmov    0x38(%rax),%eax\n  4670e6:\tc1 e8 1f             \tshr    $0x1f,%eax\n  4670e9:\t0f b6 c8             \tmovzbl %al,%ecx\n  4670ec:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4670f0:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n  4670f4:\t48 63 c1             \tmovslq %ecx,%rax\n  4670f7:\t48 01 c2             \tadd    %rax,%rdx\n  4670fa:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4670fe:\t48 89 50 30          \tmov    %rdx,0x30(%rax)\n  467102:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  467106:\t8b 40 38             \tmov    0x38(%rax),%eax\n  467109:\t83 e0 07             \tand    $0x7,%eax\n  46710c:\t89 c2                \tmov    %eax,%edx\n  46710e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  467112:\t89 50 38             \tmov    %edx,0x38(%rax)\n  467115:\t83 6d f8 01          \tsubl   $0x1,-0x8(%rbp)\n  467119:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  46711d:\t7f 80                \tjg     46709f <cram_gamma_decode+0x77>\n  46711f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  467123:\t8b 50 30             \tmov    0x30(%rax),%edx\n  467126:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  467129:\t48 98                \tcltq   \n  46712b:\t48 8d 0c 85 00 00 00 \tlea    0x0(,%rax,4),%rcx\n  467132:\t00 \n  467133:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  467137:\t48 01 c8             \tadd    %rcx,%rax\n  46713a:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n  46713d:\t29 d1                \tsub    %edx,%ecx\n  46713f:\t89 ca                \tmov    %ecx,%edx\n  467141:\t89 10                \tmov    %edx,(%rax)\n  467143:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  467147:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  46714a:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n  46714d:\t0f 8c 0e ff ff ff    \tjl     467061 <cram_gamma_decode+0x39>\n  467153:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  467158:\tc9                   \tleaveq \n  467159:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cram_gamma_decode(__int64 a1, __int64 a2, __int64 a3,\n                                     __int64 a4, int *a5) {\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = Number;\n  <span class=\"supfact\">v7</span> = *a5;\n  while (<span class=\"supfact\">v11</span> < <span class=\"supfact\">v7</span>) {\n    <span class=\"supfact\">v10</span> = get_zero_bits_MSB(a3);\n    if (cram_not_enough_bits(a3, <span class=\"supfact\">v10</span>))\n      return Number;\n    <span class=\"supfact\">v9</span> = Number;\n    while (<span class=\"supfact\">v10</span> > Number) {\n      <span class=\"supfact\">v9</span> =\n          ((int)*(unsigned __int8 *)(*(_QWORD *)(a3 + Number) +\n                                     *(_QWORD *)(a3 + Number)) >>\n           (*(_DWORD *)(a3 + Number))--) &\n              Number |\n          (Number * <span class=\"supfact\">v9</span>);\n      *(_QWORD *)(a3 + Number) += *(int *)(a3 + Number) < Number;\n      *(_DWORD *)(a3 + Number) &= Number;\n      --<span class=\"supfact\">v10</span>;\n    }\n    *(_DWORD *)(Number L * <span class=\"supfact\">v11</span>++ + a4) =\n        <span class=\"supfact\">v9</span> - *(_DWORD *)(a2 + Number);\n  }\n  return Number L;\n}", "code_t": "int __cdecl cram_gamma_decode(cram_slice_0 *slice, cram_codec_0 *c,\n                              cram_block_0 *in, char *out, int *out_size) {\n  int <span class=\"supfact\">n</span>;\n  int <span class=\"supfact\">val</span>;\n  int <span class=\"supfact\">nz</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">i</span> = Number;\n  <span class=\"supfact\">n</span> = *out_size;\n  while (<span class=\"supfact\">i</span> < <span class=\"supfact\">n</span>) {\n    <span class=\"supfact\">nz</span> = get_zero_bits_MSB(in);\n    if (cram_not_enough_bits(in, <span class=\"supfact\">nz</span>))\n      return Number;\n    <span class=\"supfact\">val</span> = Number;\n    while (<span class=\"supfact\">nz</span> > Number) {\n      <span class=\"supfact\">val</span> = ((int)in->data[in->byte] >> in->bit--) & Number |\n                            (Number * <span class=\"supfact\">val</span>);\n      in->byte += in->bit < Number;\n      in->bit &= Number;\n      --<span class=\"supfact\">nz</span>;\n    }\n    *(_DWORD *)&out[Number * <span class=\"supfact\">i</span>++] =\n        <span class=\"supfact\">val</span> - c->_anon_0.huffman.ncodes;\n  }\n  return Number;\n}", "var": [{"name": "v11", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v10", "type": "int", "ref_name": "nz", "ref_type": "int"}, {"name": "v9", "type": "int", "ref_name": "val", "ref_type": "int"}, {"name": "v7", "type": "int", "ref_name": "n", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "shekhawat2", "repo_name": "gg", "path": "shekhawat2/gg/085c648b25eba6511ee650bb704fb2c4ce09a1a4c3c895bdecc5b1db0d2f869e", "path_in_repo": "shekhawat2/gg/tools/perf/ui/browsers/hists.o", "objdump": "00000000000005bf <callchain_node__count_rows>:\n     5bf:\t55                   \tpush   %rbp\n     5c0:\t48 89 e5             \tmov    %rsp,%rbp\n     5c3:\t48 83 ec 40          \tsub    $0x40,%rsp\n     5c7:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     5cb:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     5d2:\t00 00 \n     5d4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     5d8:\t31 c0                \txor    %eax,%eax\n     5da:\tc6 45 db 00          \tmovb   $0x0,-0x25(%rbp)\n     5de:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n     5e5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     5e9:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n     5ed:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     5f1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5f5:\t48 83 e8 20          \tsub    $0x20,%rax\n     5f9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     5fd:\teb 27                \tjmp    626 <callchain_node__count_rows+0x67>\n     5ff:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n     603:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     607:\t0f b6 40 18          \tmovzbl 0x18(%rax),%eax\n     60b:\t88 45 db             \tmov    %al,-0x25(%rbp)\n     60e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     612:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     616:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     61a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     61e:\t48 83 e8 20          \tsub    $0x20,%rax\n     622:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     626:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     62a:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n     62e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     632:\t48 83 c0 28          \tadd    $0x28,%rax\n     636:\t48 39 c2             \tcmp    %rax,%rdx\n     639:\t75 c4                \tjne    5ff <callchain_node__count_rows+0x40>\n     63b:\t80 7d db 00          \tcmpb   $0x0,-0x25(%rbp)\n     63f:\t74 0f                \tje     650 <callchain_node__count_rows+0x91>\n     641:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     645:\t48 89 c7             \tmov    %rax,%rdi\n     648:\te8 73 fe ff ff       \tcallq  4c0 <callchain_node__count_rows_rb_tree>\n     64d:\t01 45 dc             \tadd    %eax,-0x24(%rbp)\n     650:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     653:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     657:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     65e:\t00 00 \n     660:\t74 05                \tje     667 <callchain_node__count_rows+0xa8>\n     662:\te8 00 00 00 00       \tcallq  667 <callchain_node__count_rows+0xa8>\n     667:\tc9                   \tleaveq \n     668:\tc3                   \tretq   ", "code_s": "__int64 __fastcall callchain_node__count_rows(__int64 a1) {\n  char <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v2</span> = Number;\n  <span class=\"supfact\">v3</span> = Number;\n  for (<span class=\"supfact\">i</span> = *(_QWORD *)(a1 + Number) - Number L;\n       <span class=\"supfact\">i</span> + Number != a1 + Number;\n       <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number) - Number L) {\n    ++<span class=\"supfact\">v3</span>;\n    <span class=\"supfact\">v2</span> = *(_BYTE *)(<span class=\"supfact\">i</span> + Number);\n  }\n  if (<span class=\"supfact\">v2</span>)\n    <span class=\"supfact\">v3</span> += callchain_node__count_rows_rb_tree(a1);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "int __cdecl callchain_node__count_rows(callchain_node *node) {\n  bool <span class=\"supfact\">unfolded</span>;\n  int <span class=\"supfact\">n</span>;\n  callchain_list *<span class=\"supfact\">chain</span>;\n  <span class=\"supfact\">unfolded</span> = Number;\n  <span class=\"supfact\">n</span> = Number;\n  for (<span class=\"supfact\">chain</span> = (callchain_list *)&node->val.next[Number];\n       &<span class=\"supfact\">chain</span>->list != &node->val;\n       <span class=\"supfact\">chain</span> =\n           (callchain_list *)&<span class=\"supfact\">chain</span>->list.next[Number]) {\n    ++<span class=\"supfact\">n</span>;\n    <span class=\"supfact\">unfolded</span> =\n        <span class=\"supfact\">chain</span>->ms.<span class=\"supfact\">unfolded</span>;\n  }\n  if (<span class=\"supfact\">unfolded</span>)\n    <span class=\"supfact\">n</span> += callchain_node__count_rows_rb_tree(node);\n  return <span class=\"supfact\">n</span>;\n}", "var": [{"name": "i", "type": "callchain_list *", "ref_name": "chain", "ref_type": "callchain_list *"}, {"name": "v3", "type": "int", "ref_name": "n", "ref_type": "int"}, {"name": "v2", "type": "bool", "ref_name": "unfolded", "ref_type": "bool"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "yanyiwu", "repo_name": "nlp_rasp", "path": "yanyiwu/nlp_rasp/6633cd11ff6d4fada71d1942a0568147d74589a19913f0174ea567ecc9d38be4", "path_in_repo": "yanyiwu/nlp_rasp/keyword_extraction/src/WordCluster.o", "objdump": "0000000000000000 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 b8 ff ff ff ff ff \tmovabs $0x3ffffffffffffff,%rax\n  13:\tff ff 03 \n  16:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  1a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  1e:\t48 89 c7             \tmov    %rax,%rdi\n  21:\te8 00 00 00 00       \tcallq  26 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x26>\n  26:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  2a:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  2e:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  32:\t48 89 d6             \tmov    %rdx,%rsi\n  35:\t48 89 c7             \tmov    %rax,%rdi\n  38:\te8 00 00 00 00       \tcallq  3d <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x3d>\n  3d:\t48 8b 00             \tmov    (%rax),%rax\n  40:\tc9                   \tleaveq \n  41:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>\n_S_max_size(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  <span class=\"supfact\">v2</span> =\n      std allocator_traits<std allocator<std __cxx11 basic_string<\n          char, std char_traits<char>, std allocator<char>>>>\n          max_size(a1);\n  return *(_QWORD *)std min<unsigned long>(&<span class=\"supfact\">v3</span>,\n                                           &<span class=\"supfact\">v2</span>);\n}", "code_t": "__int64 __fastcall std vector<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>\n_S_max_size(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  <span class=\"supfact\">v2</span> =\n      std allocator_traits<std allocator<std __cxx11 basic_string<\n          char, std char_traits<char>, std allocator<char>>>>\n          max_size(a1);\n  return *(_QWORD *)std min<unsigned long>(&<span class=\"supfact\">v3</span>,\n                                           &<span class=\"supfact\">v2</span>);\n}", "var": [{"name": "v3", "type": "__int64", "ref_name": "v3", "ref_type": "__int64"}, {"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "__int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "chrishaukap", "repo_name": "GameDev", "path": "chrishaukap/GameDev/475a787c36570a4c653323c6a604402c881204d71ef74bc3ee69c81d96cb0014", "path_in_repo": "chrishaukap/GameDev/lib_irrlicht/src/irrlicht-1.5/source/Irrlicht/CColorConverter.o", "objdump": "0000000000000772 <_ZN3irr5video15CColorConverter24convert_A1R5G5B5toR8G8B8EPKviPv>:\n     772:\t55                   \tpush   %rbp\n     773:\t48 89 e5             \tmov    %rsp,%rbp\n     776:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     77a:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n     77d:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     781:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     785:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     789:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     78d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     791:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n     798:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     79b:\t3b 45 d4             \tcmp    -0x2c(%rbp),%eax\n     79e:\t7d 5d                \tjge    7fd <_ZN3irr5video15CColorConverter24convert_A1R5G5B5toR8G8B8EPKviPv+0x8b>\n     7a0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7a4:\t0f b7 00             \tmovzwl (%rax),%eax\n     7a7:\t0f b7 c0             \tmovzwl %ax,%eax\n     7aa:\tc1 f8 07             \tsar    $0x7,%eax\n     7ad:\t89 c2                \tmov    %eax,%edx\n     7af:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7b3:\t48 83 c0 02          \tadd    $0x2,%rax\n     7b7:\t83 e2 f8             \tand    $0xfffffff8,%edx\n     7ba:\t88 10                \tmov    %dl,(%rax)\n     7bc:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7c0:\t0f b7 00             \tmovzwl (%rax),%eax\n     7c3:\t0f b7 c0             \tmovzwl %ax,%eax\n     7c6:\tc1 f8 02             \tsar    $0x2,%eax\n     7c9:\t89 c2                \tmov    %eax,%edx\n     7cb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7cf:\t48 83 c0 01          \tadd    $0x1,%rax\n     7d3:\t83 e2 f8             \tand    $0xfffffff8,%edx\n     7d6:\t88 10                \tmov    %dl,(%rax)\n     7d8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7dc:\t0f b7 00             \tmovzwl (%rax),%eax\n     7df:\t0f b7 c0             \tmovzwl %ax,%eax\n     7e2:\tc1 e0 03             \tshl    $0x3,%eax\n     7e5:\t89 c2                \tmov    %eax,%edx\n     7e7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7eb:\t88 10                \tmov    %dl,(%rax)\n     7ed:\t48 83 45 f8 02       \taddq   $0x2,-0x8(%rbp)\n     7f2:\t48 83 45 f0 03       \taddq   $0x3,-0x10(%rbp)\n     7f7:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n     7fb:\teb 9b                \tjmp    798 <_ZN3irr5video15CColorConverter24convert_A1R5G5B5toR8G8B8EPKviPv+0x26>\n     7fd:\t90                   \tnop\n     7fe:\t5d                   \tpop    %rbp\n     7ff:\tc3                   \tretq   ", "code_s": "__int64 __fastcall irr video CColorConverter convert_A1R5G5B5toR8G8B8(\n    irr video CColorConverter *this, const void *a2, _BYTE *a3, void *a4) {\n  __int64 result;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = (unsigned int)<span class=\"supfact\">i</span>;\n    if (<span class=\"supfact\">i</span> >= (int)a2)\n      break;\n    a3[Number] = ((int)*(unsigned __int16 *)this >> Number) & Number;\n    a3[Number] = ((int)*(unsigned __int16 *)this >> Number) & Number;\n    *a3 = Number * *(_WORD *)this;\n    this = (irr video CColorConverter *)((char *)this + Number);\n    a3 += Number;\n  }\n  return result;\n}", "code_t": "void __cdecl irr video CColorConverter\nconvert_A1R5G5B5toR8G8B8(const void *sP_0, irr s32 sN, void *dP) {\n  irr s32 <span class=\"supfact\">x</span>;\n  for (<span class=\"supfact\">x</span> = Number; <span class=\"supfact\">x</span> < sN;\n       ++<span class=\"supfact\">x</span>) {\n    *((_BYTE *)dP + Number) =\n        ((int)*(unsigned __int16 *)sP_0 >> Number) & Number;\n    *((_BYTE *)dP + Number) =\n        ((int)*(unsigned __int16 *)sP_0 >> Number) & Number;\n    *(_BYTE *)dP = Number * *(_WORD *)sP_0;\n    sP_0 = (char *)sP_0 + Number;\n    dP = (char *)dP + Number;\n  }\n}", "var": [{"name": "i", "type": "irr::u32", "ref_name": "x", "ref_type": "irr::s32"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "jiayuasu", "repo_name": "bitmap-postgresql", "path": "jiayuasu/bitmap-postgresql/1364e65dc1e5b40a2650cddd9efa62b821e30a44af36fe6c7e25bcef709fd842", "path_in_repo": "jiayuasu/bitmap-postgresql//src/backend/optimizer/util/restrictinfo.o", "objdump": "00000000000009a3 <extract_actual_clauses>:\n 9a3:\t55                   \tpush   %rbp\n 9a4:\t48 89 e5             \tmov    %rsp,%rbp\n 9a7:\t48 83 ec 30          \tsub    $0x30,%rsp\n 9ab:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 9af:\t89 f0                \tmov    %esi,%eax\n 9b1:\t88 45 d4             \tmov    %al,-0x2c(%rbp)\n 9b4:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 9bb:\t00 \n 9bc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 9c0:\t48 89 c7             \tmov    %rax,%rdi\n 9c3:\te8 38 f6 ff ff       \tcallq  0 <list_head>\n 9c8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 9cc:\teb 3f                \tjmp    a0d <extract_actual_clauses+0x6a>\n 9ce:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 9d2:\t48 8b 00             \tmov    (%rax),%rax\n 9d5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 9d9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 9dd:\t0f b6 40 13          \tmovzbl 0x13(%rax),%eax\n 9e1:\t38 45 d4             \tcmp    %al,-0x2c(%rbp)\n 9e4:\t75 1b                \tjne    a01 <extract_actual_clauses+0x5e>\n 9e6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 9ea:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 9ee:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 9f2:\t48 89 d6             \tmov    %rdx,%rsi\n 9f5:\t48 89 c7             \tmov    %rax,%rdi\n 9f8:\te8 00 00 00 00       \tcallq  9fd <extract_actual_clauses+0x5a>\n 9fd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n a01:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n a05:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n a09:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n a0d:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n a12:\t75 ba                \tjne    9ce <extract_actual_clauses+0x2b>\n a14:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n a18:\tc9                   \tleaveq \n a19:\tc3                   \tretq   ", "code_s": "__int64 __fastcall extract_actual_clauses(__int64 a1, char a2) {\n  _QWORD *<span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Number L;\n  for (<span class=\"supfact\">i</span> = (_QWORD *)list_head(a1); <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = (_QWORD *)<span class=\"supfact\">i</span>[Number]) {\n    if (a2 == *(_BYTE *)(*<span class=\"supfact\">i</span> + Number L))\n      <span class=\"supfact\">v4</span> = lappend(<span class=\"supfact\">v4</span>,\n                                   *(_QWORD *)(*<span class=\"supfact\">i</span> + Number L));\n  }\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "List_0 *__cdecl extract_actual_clauses(List_0 *restrictinfo_list,\n                                       bool pseudoconstant) {\n  ListCell_0 *<span class=\"supfact\">l</span>;\n  List_0 *<span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = Number L;\n  for (<span class=\"supfact\">l</span> = list_head(restrictinfo_list); <span class=\"supfact\">l</span>;\n       <span class=\"supfact\">l</span> = <span class=\"supfact\">l</span>->next) {\n    if (pseudoconstant ==\n        *((_BYTE *)<span class=\"supfact\">l</span>->data.ptr_value + Number))\n      <span class=\"supfact\">result</span> = (List_0 *)lappend(\n          <span class=\"supfact\">result</span>,\n          *((_QWORD *)<span class=\"supfact\">l</span>->data.ptr_value + Number));\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "v4", "type": "List_0 *", "ref_name": "result", "ref_type": "List_0 *"}, {"name": "i", "type": "ListCell_0 *", "ref_name": "l", "ref_type": "ListCell_0 *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "zhenghuijie", "repo_name": "learngit", "path": "zhenghuijie/learngit/8032e6074c3a2aa742e7599e67032bb2ee24354f5a49d3f9d550923f080d65fd", "path_in_repo": "zhenghuijie/learngit/unpv/unpv13e/lib/rtt.o", "objdump": "000000000000017f <rtt_stop>:\n 17f:\t55                   \tpush   %rbp\n 180:\t48 89 e5             \tmov    %rsp,%rbp\n 183:\t48 83 ec 20          \tsub    $0x20,%rsp\n 187:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 18b:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n 18e:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n 191:\t48 85 c0             \ttest   %rax,%rax\n 194:\t78 07                \tjs     19d <rtt_stop+0x1e>\n 196:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n 19b:\teb 15                \tjmp    1b2 <rtt_stop+0x33>\n 19d:\t48 89 c2             \tmov    %rax,%rdx\n 1a0:\t48 d1 ea             \tshr    %rdx\n 1a3:\t83 e0 01             \tand    $0x1,%eax\n 1a6:\t48 09 c2             \tor     %rax,%rdx\n 1a9:\tf2 48 0f 2a c2       \tcvtsi2sd %rdx,%xmm0\n 1ae:\tf2 0f 58 c0          \taddsd  %xmm0,%xmm0\n 1b2:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 1ba <rtt_stop+0x3b>\n 1b9:\t00 \n 1ba:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n 1be:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n 1c2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1c6:\tf3 0f 11 00          \tmovss  %xmm0,(%rax)\n 1ca:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1ce:\tf3 0f 10 00          \tmovss  (%rax),%xmm0\n 1d2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1d6:\tf3 0f 10 48 04       \tmovss  0x4(%rax),%xmm1\n 1db:\tf3 0f 5c c1          \tsubss  %xmm1,%xmm0\n 1df:\tf3 0f 5a c0          \tcvtss2sd %xmm0,%xmm0\n 1e3:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n 1e8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1ec:\tf3 0f 10 40 04       \tmovss  0x4(%rax),%xmm0\n 1f1:\tf3 0f 5a c8          \tcvtss2sd %xmm0,%xmm1\n 1f5:\tf2 0f 10 45 f8       \tmovsd  -0x8(%rbp),%xmm0\n 1fa:\tf2 0f 10 15 00 00 00 \tmovsd  0x0(%rip),%xmm2        # 202 <rtt_stop+0x83>\n 201:\t00 \n 202:\tf2 0f 5e c2          \tdivsd  %xmm2,%xmm0\n 206:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n 20a:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n 20e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 212:\tf3 0f 11 40 04       \tmovss  %xmm0,0x4(%rax)\n 217:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 21b:\t66 0f 2f 45 f8       \tcomisd -0x8(%rbp),%xmm0\n 220:\t76 16                \tjbe    238 <rtt_stop+0xb9>\n 222:\tf2 0f 10 45 f8       \tmovsd  -0x8(%rbp),%xmm0\n 227:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 22f <rtt_stop+0xb0>\n 22e:\t00 \n 22f:\t66 0f 57 c1          \txorpd  %xmm1,%xmm0\n 233:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n 238:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 23c:\tf3 0f 10 40 08       \tmovss  0x8(%rax),%xmm0\n 241:\tf3 0f 5a c8          \tcvtss2sd %xmm0,%xmm1\n 245:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 249:\tf3 0f 10 40 08       \tmovss  0x8(%rax),%xmm0\n 24e:\tf3 0f 5a d0          \tcvtss2sd %xmm0,%xmm2\n 252:\tf2 0f 10 45 f8       \tmovsd  -0x8(%rbp),%xmm0\n 257:\tf2 0f 5c c2          \tsubsd  %xmm2,%xmm0\n 25b:\tf2 0f 10 15 00 00 00 \tmovsd  0x0(%rip),%xmm2        # 263 <rtt_stop+0xe4>\n 262:\t00 \n 263:\tf2 0f 5e c2          \tdivsd  %xmm2,%xmm0\n 267:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n 26b:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n 26f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 273:\tf3 0f 11 40 08       \tmovss  %xmm0,0x8(%rax)\n 278:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 27c:\tf3 0f 10 40 04       \tmovss  0x4(%rax),%xmm0\n 281:\tf3 0f 5a c8          \tcvtss2sd %xmm0,%xmm1\n 285:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 289:\tf3 0f 10 40 08       \tmovss  0x8(%rax),%xmm0\n 28e:\tf3 0f 5a d0          \tcvtss2sd %xmm0,%xmm2\n 292:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 29a <rtt_stop+0x11b>\n 299:\t00 \n 29a:\tf2 0f 59 c2          \tmulsd  %xmm2,%xmm0\n 29e:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n 2a2:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n 2a6:\te8 55 fd ff ff       \tcallq  0 <rtt_minmax>\n 2ab:\t66 0f 7e c0          \tmovd   %xmm0,%eax\n 2af:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 2b3:\t89 42 0c             \tmov    %eax,0xc(%rdx)\n 2b6:\t90                   \tnop\n 2b7:\tc9                   \tleaveq \n 2b8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rtt_stop(__int64 a1, int a2) {\n  float v2;\n  float v3;\n  float v4;\n  __m128i v5;\n  __int64 result;\n  double <span class=\"supfact\">v7</span>;\n  v2 = (double)a2 / Number;\n  *(float *)a1 = v2;\n  <span class=\"supfact\">v7</span> = (float)(*(float *)a1 - *(float *)(a1 + Number));\n  v3 = <span class=\"supfact\">v7</span> / Number + *(float *)(a1 + Number);\n  *(float *)(a1 + Number) = v3;\n  if (<span class=\"supfact\">v7</span> < Number)\n    <span class=\"supfact\">v7</span> = -<span class=\"supfact\">v7</span>;\n  v4 = (<span class=\"supfact\">v7</span> - *(float *)(a1 + Number)) / Number +\n       *(float *)(a1 + Number);\n  *(float *)(a1 + Number) = v4;\n  v5 = (__m128i)Number;\n  *(double *)v5.m128i_i64 =\n      Number * *(float *)(a1 + Number) + *(float *)(a1 + Number);\n  *(float *)v5.m128i_i32 = *(double *)v5.m128i_i64;\n  *(float *)v5.m128i_i32 = rtt_minmax(*(float *)v5.m128i_i32);\n  result = (unsigned int)_mm_cvtsi128_si32(v5);\n  *(_DWORD *)(a1 + Number) = result;\n  return result;\n}", "code_t": "void __cdecl rtt_stop(rtt_info *ptr, uint32_t ms) {\n  float v2;\n  float v3;\n  float v4;\n  __m128i v5;\n  double <span class=\"supfact\">delta</span>;\n  v2 = (double)(int)ms / Number;\n  ptr->rtt_rtt = v2;\n  <span class=\"supfact\">delta</span> = (float)(ptr->rtt_rtt - ptr->rtt_srtt);\n  v3 = <span class=\"supfact\">delta</span> / Number + ptr->rtt_srtt;\n  ptr->rtt_srtt = v3;\n  if (<span class=\"supfact\">delta</span> < Number)\n    <span class=\"supfact\">delta</span> = -<span class=\"supfact\">delta</span>;\n  v4 = (<span class=\"supfact\">delta</span> - ptr->rtt_rttvar) / Number + ptr->rtt_rttvar;\n  ptr->rtt_rttvar = v4;\n  v5 = (__m128i)Number;\n  *(double *)v5.m128i_i64 = Number * ptr->rtt_rttvar + ptr->rtt_srtt;\n  *(float *)v5.m128i_i32 = *(double *)v5.m128i_i64;\n  *(float *)v5.m128i_i32 = rtt_minmax(*(float *)v5.m128i_i32);\n  LODWORD(ptr->rtt_rto) = _mm_cvtsi128_si32(v5);\n}", "var": [{"name": "v7", "type": "double", "ref_name": "delta", "ref_type": "double"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "AlexStocks", "repo_name": "numbfish", "path": "AlexStocks/numbfish/5ea00979738a7ee4d31c8db8a473f5d5b69fac12c1e1f41687839574228cd9a9", "path_in_repo": "AlexStocks/numbfish/api/nlbapi_test", "objdump": "0000000000402aee <get_meta_file_size>:\n  402aee:\t55                   \tpush   %rbp\n  402aef:\t48 89 e5             \tmov    %rsp,%rbp\n  402af2:\t48 83 ec 10          \tsub    $0x10,%rsp\n  402af6:\tbf 1e 00 00 00       \tmov    $0x1e,%edi\n  402afb:\te8 a0 e7 ff ff       \tcallq  4012a0 <sysconf@plt>\n  402b00:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  402b03:\tc7 45 f8 40 01 00 00 \tmovl   $0x140,-0x8(%rbp)\n  402b0a:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  402b0d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402b10:\t01 d0                \tadd    %edx,%eax\n  402b12:\t83 e8 01             \tsub    $0x1,%eax\n  402b15:\tba 00 00 00 00       \tmov    $0x0,%edx\n  402b1a:\tf7 75 fc             \tdivl   -0x4(%rbp)\n  402b1d:\t89 c2                \tmov    %eax,%edx\n  402b1f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402b22:\t0f af c2             \timul   %edx,%eax\n  402b25:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  402b28:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  402b2b:\tc9                   \tleaveq \n  402b2c:\tc3                   \tretq   ", "code_s": "__int64 get_meta_file_size() {\n  unsigned int <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = sysconf(Number);\n  return (<span class=\"supfact\">v1</span> + Number) / <span class=\"supfact\">v1</span> *\n         <span class=\"supfact\">v1</span>;\n}", "code_t": "uint32_t __cdecl get_meta_file_size() {\n  uint32_t <span class=\"supfact\">page_size</span>;\n  <span class=\"supfact\">page_size</span> = sysconf(Number);\n  return (<span class=\"supfact\">page_size</span> + Number) / <span class=\"supfact\">page_size</span> *\n         <span class=\"supfact\">page_size</span>;\n}", "var": [{"name": "v1", "type": "int", "ref_name": "page_size", "ref_type": "uint32_t"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "extvos", "repo_name": "udpxy", "path": "extvos/udpxy/7ea1908d3013bdfb62fae01a3734460452b679c0555bdcb51495ab24d4ffc7be", "path_in_repo": "extvos/udpxy//util.o", "objdump": "0000000000000d34 <hex_dump>:\n     d34:\t55                   \tpush   %rbp\n     d35:\t48 89 e5             \tmov    %rsp,%rbp\n     d38:\t48 83 ec 30          \tsub    $0x30,%rsp\n     d3c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     d40:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     d44:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     d48:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n     d4c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     d53:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     d58:\t74 1a                \tje     d74 <hex_dump+0x40>\n     d5a:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     d5e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     d62:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d67:\t48 89 c7             \tmov    %rax,%rdi\n     d6a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d6f:\te8 00 00 00 00       \tcallq  d74 <hex_dump+0x40>\n     d74:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     d7b:\teb 2d                \tjmp    daa <hex_dump+0x76>\n     d7d:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     d80:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     d84:\t48 01 d0             \tadd    %rdx,%rax\n     d87:\t0f b6 00             \tmovzbl (%rax),%eax\n     d8a:\t0f be c0             \tmovsbl %al,%eax\n     d8d:\t0f b6 d0             \tmovzbl %al,%edx\n     d90:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     d94:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d99:\t48 89 c7             \tmov    %rax,%rdi\n     d9c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     da1:\te8 00 00 00 00       \tcallq  da6 <hex_dump+0x72>\n     da6:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     daa:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     dad:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n     db1:\t77 ca                \tja     d7d <hex_dump+0x49>\n     db3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     db7:\t48 89 c6             \tmov    %rax,%rsi\n     dba:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n     dbf:\te8 00 00 00 00       \tcallq  dc4 <hex_dump+0x90>\n     dc4:\t90                   \tnop\n     dc5:\tc9                   \tleaveq \n     dc6:\tc3                   \tretq   ", "code_s": "int __fastcall hex_dump(const char *a1, __int64 a2, unsigned __int64 a3,\n                        FILE *a4) {\n  unsigned int <span class=\"supfact\">i</span>;\n  if (a1)\n    fprintf(a4, String, a1);\n  for (<span class=\"supfact\">i</span> = Number; a3 > <span class=\"supfact\">i</span>; ++<span class=\"supfact\">i</span>)\n    fprintf(a4, String, *(unsigned __int8 *)(<span class=\"supfact\">i</span> + a2));\n  return fputc(Number, a4);\n}", "code_t": "void __cdecl hex_dump(const char *msg, const char *data, size_t len,\n                      FILE *log) {\n  u_int <span class=\"supfact\">i</span>;\n  if (msg)\n    fprintf(log, String, msg);\n  for (<span class=\"supfact\">i</span> = Number; len > <span class=\"supfact\">i</span>; ++<span class=\"supfact\">i</span>)\n    fprintf(log, String, (unsigned __int8)data[<span class=\"supfact\">i</span>]);\n  fputc(Number, log);\n}", "var": [{"name": "i", "type": "unsigned int", "ref_name": "i", "ref_type": "u_int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "jcespinoza", "repo_name": "compilers_class", "path": "jcespinoza/compilers_class/728a799775116fd24c0eaf1459bd8aeb693c9ebd6ac80385bf7952ff49645241", "path_in_repo": "jcespinoza/compilers_class/adv_expr_printer/sample3", "objdump": "0000000000401363 <yytnamerr>:\n  401363:\t55                   \tpush   %rbp\n  401364:\t48 89 e5             \tmov    %rsp,%rbp\n  401367:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40136b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40136f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  401373:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401377:\t0f b6 00             \tmovzbl (%rax),%eax\n  40137a:\t3c 22                \tcmp    $0x22,%al\n  40137c:\t0f 85 8f 00 00 00    \tjne    401411 <yytnamerr+0xae>\n  401382:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  401389:\t00 \n  40138a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40138e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401392:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n  401397:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40139b:\t0f b6 00             \tmovzbl (%rax),%eax\n  40139e:\t0f be c0             \tmovsbl %al,%eax\n  4013a1:\t83 f8 5c             \tcmp    $0x5c,%eax\n  4013a4:\t74 1b                \tje     4013c1 <yytnamerr+0x5e>\n  4013a6:\t83 f8 5c             \tcmp    $0x5c,%eax\n  4013a9:\t7f 27                \tjg     4013d2 <yytnamerr+0x6f>\n  4013ab:\t83 f8 2c             \tcmp    $0x2c,%eax\n  4013ae:\t74 64                \tje     401414 <yytnamerr+0xb1>\n  4013b0:\t83 f8 2c             \tcmp    $0x2c,%eax\n  4013b3:\t7f 1d                \tjg     4013d2 <yytnamerr+0x6f>\n  4013b5:\t83 f8 22             \tcmp    $0x22,%eax\n  4013b8:\t74 3a                \tje     4013f4 <yytnamerr+0x91>\n  4013ba:\t83 f8 27             \tcmp    $0x27,%eax\n  4013bd:\t75 13                \tjne    4013d2 <yytnamerr+0x6f>\n  4013bf:\teb 53                \tjmp    401414 <yytnamerr+0xb1>\n  4013c1:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n  4013c6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4013ca:\t0f b6 00             \tmovzbl (%rax),%eax\n  4013cd:\t3c 5c                \tcmp    $0x5c,%al\n  4013cf:\t75 46                \tjne    401417 <yytnamerr+0xb4>\n  4013d1:\t90                   \tnop\n  4013d2:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  4013d7:\t74 14                \tje     4013ed <yytnamerr+0x8a>\n  4013d9:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4013dd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4013e1:\t48 01 c2             \tadd    %rax,%rdx\n  4013e4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4013e8:\t0f b6 00             \tmovzbl (%rax),%eax\n  4013eb:\t88 02                \tmov    %al,(%rdx)\n  4013ed:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  4013f2:\teb 1b                \tjmp    40140f <yytnamerr+0xac>\n  4013f4:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  4013f9:\t74 0e                \tje     401409 <yytnamerr+0xa6>\n  4013fb:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4013ff:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401403:\t48 01 d0             \tadd    %rdx,%rax\n  401406:\tc6 00 00             \tmovb   $0x0,(%rax)\n  401409:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40140d:\teb 35                \tjmp    401444 <yytnamerr+0xe1>\n  40140f:\teb 81                \tjmp    401392 <yytnamerr+0x2f>\n  401411:\t90                   \tnop\n  401412:\teb 04                \tjmp    401418 <yytnamerr+0xb5>\n  401414:\t90                   \tnop\n  401415:\teb 01                \tjmp    401418 <yytnamerr+0xb5>\n  401417:\t90                   \tnop\n  401418:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  40141d:\t75 0e                \tjne    40142d <yytnamerr+0xca>\n  40141f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401423:\t48 89 c7             \tmov    %rax,%rdi\n  401426:\te8 bc fe ff ff       \tcallq  4012e7 <yystrlen>\n  40142b:\teb 17                \tjmp    401444 <yytnamerr+0xe1>\n  40142d:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  401431:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401435:\t48 89 d6             \tmov    %rdx,%rsi\n  401438:\t48 89 c7             \tmov    %rax,%rdi\n  40143b:\te8 d6 fe ff ff       \tcallq  401316 <yystpcpy>\n  401440:\t48 2b 45 e8          \tsub    -0x18(%rbp),%rax\n  401444:\tc9                   \tleaveq \n  401445:\tc3                   \tretq   ", "code_s": "_BYTE *__fastcall yytnamerr(_BYTE *a1, _BYTE *a2) {\n  int v2;\n  _BYTE *result;\n  _BYTE *<span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  if (*a2 != Number) {\n  LABEL_17:\n    if (a1)\n      result = (_BYTE *)(yystpcpy(a1, a2) - a1);\n    else\n      result = (_BYTE *)yystrlen((__int64)a2);\n    return result;\n  }\n  <span class=\"supfact\">v5</span> = Number L;\n  <span class=\"supfact\">v4</span> = a2;\n  while (Number) {\n    v2 = (char)*++<span class=\"supfact\">v4</span>;\n    if (v2 != Number)\n      break;\n    if (*++<span class=\"supfact\">v4</span> != Number)\n      goto LABEL_17;\n  LABEL_11:\n    if (a1)\n      a1[<span class=\"supfact\">v5</span>] = *<span class=\"supfact\">v4</span>;\n    ++<span class=\"supfact\">v5</span>;\n  }\n  if (v2 > Number)\n    goto LABEL_11;\n  if (v2 == Number)\n    goto LABEL_17;\n  if (v2 > Number)\n    goto LABEL_11;\n  if (v2 != Number) {\n    if (v2 == Number)\n      goto LABEL_17;\n    goto LABEL_11;\n  }\n  if (a1)\n    a1[<span class=\"supfact\">v5</span>] = Number;\n  return (_BYTE *)<span class=\"supfact\">v5</span>;\n}", "code_t": "unsigned __int64 __cdecl yytnamerr(char *yyres, const char *yystr) {\n  int v2;\n  unsigned __int64 result;\n  char *<span class=\"supfact\">yyp</span>;\n  unsigned __int64 <span class=\"supfact\">yyn</span>;\n  if (*yystr != Number) {\n  do_not_strip_quotes:\n    if (yyres)\n      result = yystpcpy(yyres, yystr) - yyres;\n    else\n      result = yystrlen(yystr);\n    return result;\n  }\n  <span class=\"supfact\">yyn</span> = Number L;\n  <span class=\"supfact\">yyp</span> = (char *)yystr;\n  while (Number) {\n    v2 = *++<span class=\"supfact\">yyp</span>;\n    if (v2 != Number)\n      break;\n    if (*++<span class=\"supfact\">yyp</span> != Number)\n      goto do_not_strip_quotes;\n  append:\n    if (yyres)\n      yyres[<span class=\"supfact\">yyn</span>] = *<span class=\"supfact\">yyp</span>;\n    ++<span class=\"supfact\">yyn</span>;\n  }\n  if (v2 > Number)\n    goto append;\n  if (v2 == Number)\n    goto do_not_strip_quotes;\n  if (v2 > Number)\n    goto append;\n  if (v2 != Number) {\n    if (v2 == Number)\n      goto do_not_strip_quotes;\n    goto append;\n  }\n  if (yyres)\n    yyres[<span class=\"supfact\">yyn</span>] = Number;\n  return <span class=\"supfact\">yyn</span>;\n}", "var": [{"name": "v5", "type": "unsigned __int64", "ref_name": "yyn", "ref_type": "unsigned __int64"}, {"name": "v4", "type": "char *", "ref_name": "yyp", "ref_type": "char *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "dchadic", "repo_name": "linux-cmps107", "path": "dchadic/linux-cmps107/14aa4d5f35117440038b2428e4a32af2df53ba2743aebb183fee0a1acf31c93a", "path_in_repo": "dchadic/linux-cmps107/tools/lib/traceevent/libtraceevent-in.o", "objdump": "000000000000c5c6 <__pevent_parse_event>:\n    c5c6:\t55                   \tpush   %rbp\n    c5c7:\t48 89 e5             \tmov    %rsp,%rbp\n    c5ca:\t48 83 ec 40          \tsub    $0x40,%rsp\n    c5ce:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    c5d2:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    c5d6:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    c5da:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    c5de:\t4c 89 45 c8          \tmov    %r8,-0x38(%rbp)\n    c5e2:\t48 8b 7d c8          \tmov    -0x38(%rbp),%rdi\n    c5e6:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n    c5ea:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    c5ee:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    c5f2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    c5f6:\t49 89 f8             \tmov    %rdi,%r8\n    c5f9:\t48 89 c7             \tmov    %rax,%rdi\n    c5fc:\te8 00 00 00 00       \tcallq  c601 <__pevent_parse_event+0x3b>\n    c601:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    c604:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    c608:\t48 8b 00             \tmov    (%rax),%rax\n    c60b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    c60f:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    c614:\t75 05                \tjne    c61b <__pevent_parse_event+0x55>\n    c616:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    c619:\teb 3c                \tjmp    c657 <__pevent_parse_event+0x91>\n    c61b:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    c620:\t74 30                \tje     c652 <__pevent_parse_event+0x8c>\n    c622:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    c626:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    c62a:\t48 89 d6             \tmov    %rdx,%rsi\n    c62d:\t48 89 c7             \tmov    %rax,%rdi\n    c630:\te8 76 4b ff ff       \tcallq  11ab <add_event>\n    c635:\t85 c0                \ttest   %eax,%eax\n    c637:\t74 19                \tje     c652 <__pevent_parse_event+0x8c>\n    c639:\tc7 45 fc 61 79 fe ff \tmovl   $0xfffe7961,-0x4(%rbp)\n    c640:\t90                   \tnop\n    c641:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    c645:\t48 89 c7             \tmov    %rax,%rdi\n    c648:\te8 00 00 00 00       \tcallq  c64d <__pevent_parse_event+0x87>\n    c64d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    c650:\teb 05                \tjmp    c657 <__pevent_parse_event+0x91>\n    c652:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    c657:\tc9                   \tleaveq \n    c658:\tc3                   \tretq   ", "code_s": "__int64 __fastcall _pevent_parse_event(__int64 a1, __int64 *a2, __int64 a3,\n                                       __int64 a4, const char *a5) {\n  __int64 <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = _pevent_parse_format(a2, a1, a3, a4, a5);\n  <span class=\"supfact\">v6</span> = *a2;\n  if (!*a2)\n    return <span class=\"supfact\">v7</span>;\n  if (!a1 || !(unsigned int)add_event(a1, <span class=\"supfact\">v6</span>))\n    return Number L;\n  pevent_free_format(<span class=\"supfact\">v6</span>);\n  return Number L;\n}", "code_t": "pevent_errno __cdecl _pevent_parse_event(pevent *pevent, event_format **eventp,\n                                         const char *buf, unsigned __int64 size,\n                                         const char *sys) {\n  event_format *<span class=\"supfact\">event</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = _pevent_parse_format(eventp, pevent, buf, size, sys);\n  <span class=\"supfact\">event</span> = *eventp;\n  if (!*eventp)\n    return <span class=\"supfact\">ret</span>;\n  if (!pevent || !add_event(pevent, <span class=\"supfact\">event</span>))\n    return Number;\n  pevent_free_format(<span class=\"supfact\">event</span>);\n  return Number;\n}", "var": [{"name": "v7", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "v6", "type": "event_format *", "ref_name": "event", "ref_type": "event_format *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "dobbels", "repo_name": "thesis-code", "path": "dobbels/thesis-code/9f9be8f265ae3f77d39bc7252b52320b398376c259033178075c2521171c54e9", "path_in_repo": "dobbels/thesis-code/contiki/platform/micaz/apps/mts310/obj_native/rpl-dag.o", "objdump": "000000000000125a <rpl_find_parent>:\n    125a:\t55                   \tpush   %rbp\n    125b:\t48 89 e5             \tmov    %rsp,%rbp\n    125e:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1262:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1266:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    126a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    126e:\t48 89 c7             \tmov    %rax,%rdi\n    1271:\te8 a0 ff ff ff       \tcallq  1216 <find_parent_any_dag_any_instance>\n    1276:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    127a:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    127f:\t74 13                \tje     1294 <rpl_find_parent+0x3a>\n    1281:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1285:\t48 8b 00             \tmov    (%rax),%rax\n    1288:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    128c:\t75 06                \tjne    1294 <rpl_find_parent+0x3a>\n    128e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1292:\teb 05                \tjmp    1299 <rpl_find_parent+0x3f>\n    1294:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1299:\tc9                   \tleaveq \n    129a:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall rpl_find_parent(__int64 a1, __int64 a2) {\n  _QWORD *result;\n  _QWORD *<span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = (_QWORD *)find_parent_any_dag_any_instance(a2);\n  if (<span class=\"supfact\">v3</span> && a1 == *<span class=\"supfact\">v3</span>)\n    result = <span class=\"supfact\">v3</span>;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "rpl_parent_t *__cdecl rpl_find_parent(rpl_dag_t *dag, uip_ipaddr_t *addr) {\n  rpl_parent_t *result;\n  rpl_parent_t *<span class=\"supfact\">p</span>;\n  <span class=\"supfact\">p</span> = find_parent_any_dag_any_instance(addr);\n  if (<span class=\"supfact\">p</span> && dag == <span class=\"supfact\">p</span>->dag)\n    result = <span class=\"supfact\">p</span>;\n  else\n    result = Number L;\n  return result;\n}", "var": [{"name": "v3", "type": "rpl_parent_t *", "ref_name": "p", "ref_type": "rpl_parent_t *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "jerryos", "repo_name": "ffmpeg", "path": "jerryos/ffmpeg/8caacc43b43e5f39da356614a2fddb0ed4d86c003c65ef0deca5539cbf89e40e", "path_in_repo": "jerryos/ffmpeg//libavcodec/qdm2.o", "objdump": "0000000000001068 <qdm2_packet_checksum>:\n    1068:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n    106d:\t89 74 24 e4          \tmov    %esi,-0x1c(%rsp)\n    1071:\t89 54 24 e0          \tmov    %edx,-0x20(%rsp)\n    1075:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n    107c:\t00 \n    107d:\teb 1e                \tjmp    109d <qdm2_packet_checksum+0x35>\n    107f:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    1083:\t48 63 d0             \tmovslq %eax,%rdx\n    1086:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n    108b:\t48 01 d0             \tadd    %rdx,%rax\n    108e:\t0f b6 00             \tmovzbl (%rax),%eax\n    1091:\t0f b6 c0             \tmovzbl %al,%eax\n    1094:\t29 44 24 e0          \tsub    %eax,-0x20(%rsp)\n    1098:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n    109d:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    10a1:\t3b 44 24 e4          \tcmp    -0x1c(%rsp),%eax\n    10a5:\t7c d8                \tjl     107f <qdm2_packet_checksum+0x17>\n    10a7:\t8b 44 24 e0          \tmov    -0x20(%rsp),%eax\n    10ab:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qdm2_packet_checksum(__int64 a1, int a2, unsigned int a3) {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < a2; ++<span class=\"supfact\">i</span>)\n    a3 -= *(unsigned __int8 *)(<span class=\"supfact\">i</span> + a1);\n  return a3;\n}", "code_t": "uint16_t __cdecl qdm2_packet_checksum(const uint8_t *data, int length,\n                                      int value) {\n  uint16_t valuea;\n  int <span class=\"supfact\">i</span>;\n  valuea = value;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < length;\n       ++<span class=\"supfact\">i</span>)\n    valuea -= data[<span class=\"supfact\">i</span>];\n  return valuea;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "liushengxi13689209566", "repo_name": "SourceReading", "path": "liushengxi13689209566/SourceReading/cc9e5ecce6635c056cda931a24c4fcf085ac2cd62a037441996d366c55a42a0f", "path_in_repo": "liushengxi13689209566/SourceReading/redis-3.0-annotated/deps/lua/src/lua", "objdump": "0000000000410287 <funcname>:\n  410287:\t55                   \tpush   %rbp\n  410288:\t48 89 e5             \tmov    %rsp,%rbp\n  41028b:\t48 83 ec 20          \tsub    $0x20,%rsp\n  41028f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  410293:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  410297:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  41029e:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4102a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4102a6:\t48 89 d6             \tmov    %rdx,%rsi\n  4102a9:\t48 89 c7             \tmov    %rax,%rdi\n  4102ac:\te8 a6 d5 ff ff       \tcallq  40d857 <singlevar>\n  4102b1:\teb 13                \tjmp    4102c6 <funcname+0x3f>\n  4102b3:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4102b7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4102bb:\t48 89 d6             \tmov    %rdx,%rsi\n  4102be:\t48 89 c7             \tmov    %rax,%rdi\n  4102c1:\te8 72 df ff ff       \tcallq  40e238 <field>\n  4102c6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4102ca:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4102cd:\t83 f8 2e             \tcmp    $0x2e,%eax\n  4102d0:\t74 e1                \tje     4102b3 <funcname+0x2c>\n  4102d2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4102d6:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4102d9:\t83 f8 3a             \tcmp    $0x3a,%eax\n  4102dc:\t75 1a                \tjne    4102f8 <funcname+0x71>\n  4102de:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  4102e5:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4102e9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4102ed:\t48 89 d6             \tmov    %rdx,%rsi\n  4102f0:\t48 89 c7             \tmov    %rax,%rdi\n  4102f3:\te8 40 df ff ff       \tcallq  40e238 <field>\n  4102f8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4102fb:\tc9                   \tleaveq \n  4102fc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall funcname(__int64 a1, _DWORD *a2) {\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  singlevar(a1, a2);\n  while (*(_DWORD *)(a1 + Number) == Number)\n    field(a1, (__int64)a2);\n  if (*(_DWORD *)(a1 + Number) == Number) {\n    <span class=\"supfact\">v3</span> = Number;\n    field(a1, (__int64)a2);\n  }\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "int __cdecl funcname(LexState_0 *ls, expdesc_0 *v) {\n  int <span class=\"supfact\">needself</span>;\n  <span class=\"supfact\">needself</span> = Number;\n  singlevar(ls, v);\n  while (ls->t.token == Number)\n    field(ls, v);\n  if (ls->t.token == Number) {\n    <span class=\"supfact\">needself</span> = Number;\n    field(ls, v);\n  }\n  return <span class=\"supfact\">needself</span>;\n}", "var": [{"name": "v3", "type": "int", "ref_name": "needself", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "kjkasi", "repo_name": "030005", "path": "kjkasi/030005/d5329596a8a967e39fcb9a7ca4cd5c3aa31df6f07b8e9cad3624500fe8e91478", "path_in_repo": "kjkasi/030005/kernels/Realtek_3.1/Realtek_3.1/linux/scripts/kconfig/zconf.tab.o", "objdump": "00000000000091e8 <expr_eliminate_dups>:\n    91e8:\t48 83 ec 28          \tsub    $0x28,%rsp\n    91ec:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    91f1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    91f6:\t48 85 c0             \ttest   %rax,%rax\n    91f9:\t75 0a                \tjne    9205 <expr_eliminate_dups+0x1d>\n    91fb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    9200:\te9 87 00 00 00       \tjmpq   928c <expr_eliminate_dups+0xa4>\n    9205:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 920b <expr_eliminate_dups+0x23>\n    920b:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n    920f:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 9219 <expr_eliminate_dups+0x31>\n    9216:\t00 00 00 \n    9219:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    921e:\t8b 00                \tmov    (%rax),%eax\n    9220:\t83 e8 01             \tsub    $0x1,%eax\n    9223:\t83 f8 01             \tcmp    $0x1,%eax\n    9226:\t77 36                \tja     925e <expr_eliminate_dups+0x76>\n    9228:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    922d:\t8b 00                \tmov    (%rax),%eax\n    922f:\t48 8d 54 24 08       \tlea    0x8(%rsp),%rdx\n    9234:\t48 8d 4c 24 08       \tlea    0x8(%rsp),%rcx\n    9239:\t48 89 ce             \tmov    %rcx,%rsi\n    923c:\t89 c7                \tmov    %eax,%edi\n    923e:\te8 d7 fa ff ff       \tcallq  8d1a <expr_eliminate_dups1>\n    9243:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    9248:\t8b 00                \tmov    (%rax),%eax\n    924a:\t48 8d 54 24 08       \tlea    0x8(%rsp),%rdx\n    924f:\t48 8d 4c 24 08       \tlea    0x8(%rsp),%rcx\n    9254:\t48 89 ce             \tmov    %rcx,%rsi\n    9257:\t89 c7                \tmov    %eax,%edi\n    9259:\te8 d4 fc ff ff       \tcallq  8f32 <expr_eliminate_dups2>\n    925e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 9264 <expr_eliminate_dups+0x7c>\n    9264:\t85 c0                \ttest   %eax,%eax\n    9266:\t74 14                \tje     927c <expr_eliminate_dups+0x94>\n    9268:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    926d:\t48 89 c7             \tmov    %rax,%rdi\n    9270:\te8 00 00 00 00       \tcallq  9275 <expr_eliminate_dups+0x8d>\n    9275:\t48 89 44 24 08       \tmov    %rax,0x8(%rsp)\n    927a:\teb 93                \tjmp    920f <expr_eliminate_dups+0x27>\n    927c:\t90                   \tnop\n    927d:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    9281:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 9287 <expr_eliminate_dups+0x9f>\n    9287:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    928c:\t48 83 c4 28          \tadd    $0x28,%rsp\n    9290:\tc3                   \tretq   ", "code_s": "unsigned int *__fastcall expr_eliminate_dups(unsigned int *a1) {\n  unsigned int *<span class=\"supfact\">v2</span>[Number];\n  int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v2</span>[Number] = a1;\n  if (!a1)\n    return Number L;\n  <span class=\"supfact\">v3</span> = trans_count;\n  while (Number) {\n    trans_count = Number;\n    if (*<span class=\"supfact\">v2</span>[Number] - Number <= Number) {\n      expr_eliminate_dups1(*<span class=\"supfact\">v2</span>[Number],\n                           (__int64 *)<span class=\"supfact\">v2</span>,\n                           (__int64 *)<span class=\"supfact\">v2</span>);\n      expr_eliminate_dups2(*<span class=\"supfact\">v2</span>[Number], <span class=\"supfact\">v2</span>,\n                           <span class=\"supfact\">v2</span>);\n    }\n    if (!trans_count)\n      break;\n    <span class=\"supfact\">v2</span>[Number] =\n        (unsigned int *)expr_eliminate_yn((__int64)<span class=\"supfact\">v2</span>[Number]);\n  }\n  trans_count = <span class=\"supfact\">v3</span>;\n  return <span class=\"supfact\">v2</span>[Number];\n}", "code_t": "expr *__cdecl expr_eliminate_dups(expr *e) {\n  expr *<span class=\"supfact\">ea</span>[Number];\n  int <span class=\"supfact\">oldcount</span>;\n  <span class=\"supfact\">ea</span>[Number] = e;\n  if (!e)\n    return Number L;\n  <span class=\"supfact\">oldcount</span> = trans_count;\n  while (Number) {\n    trans_count = Number;\n    if ((unsigned int)(<span class=\"supfact\">ea</span>[Number]->type - Number) <= Number) {\n      expr_eliminate_dups1(<span class=\"supfact\">ea</span>[Number]->type, <span class=\"supfact\">ea</span>,\n                           <span class=\"supfact\">ea</span>);\n      expr_eliminate_dups2(<span class=\"supfact\">ea</span>[Number]->type, <span class=\"supfact\">ea</span>,\n                           <span class=\"supfact\">ea</span>);\n    }\n    if (!trans_count)\n      break;\n    <span class=\"supfact\">ea</span>[Number] = expr_eliminate_yn(<span class=\"supfact\">ea</span>[Number]);\n  }\n  trans_count = <span class=\"supfact\">oldcount</span>;\n  return <span class=\"supfact\">ea</span>[Number];\n}", "var": [{"name": "v3", "type": "int", "ref_name": "oldcount", "ref_type": "int"}, {"name": "v2", "type": "expr *[2]", "ref_name": "ea", "ref_type": "expr *[2]"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "Panopto", "repo_name": "panopto-ffmpeg", "path": "Panopto/panopto-ffmpeg/8be15ab908f494ac60ca27e64de0a66f7349184867fbfe983f6cb89b2302a8b2", "path_in_repo": "Panopto/panopto-ffmpeg//libavfilter/af_sidechaincompress.o", "objdump": "00000000000011f2 <acompressor_query_formats>:\n    11f2:\t48 83 ec 38          \tsub    $0x38,%rsp\n    11f6:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    11fb:\te8 00 00 00 00       \tcallq  1200 <acompressor_query_formats+0xe>\n    1200:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n    1205:\t48 83 7c 24 28 00    \tcmpq   $0x0,0x28(%rsp)\n    120b:\t75 0a                \tjne    1217 <acompressor_query_formats+0x25>\n    120d:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    1212:\te9 98 00 00 00       \tjmpq   12af <acompressor_query_formats+0xbd>\n    1217:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    121c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1221:\t48 89 d6             \tmov    %rdx,%rsi\n    1224:\t48 89 c7             \tmov    %rax,%rdi\n    1227:\te8 00 00 00 00       \tcallq  122c <acompressor_query_formats+0x3a>\n    122c:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n    1230:\t83 7c 24 24 00       \tcmpl   $0x0,0x24(%rsp)\n    1235:\t79 06                \tjns    123d <acompressor_query_formats+0x4b>\n    1237:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n    123b:\teb 72                \tjmp    12af <acompressor_query_formats+0xbd>\n    123d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1242:\te8 00 00 00 00       \tcallq  1247 <acompressor_query_formats+0x55>\n    1247:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n    124c:\t48 83 7c 24 18 00    \tcmpq   $0x0,0x18(%rsp)\n    1252:\t75 07                \tjne    125b <acompressor_query_formats+0x69>\n    1254:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    1259:\teb 54                \tjmp    12af <acompressor_query_formats+0xbd>\n    125b:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n    1260:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1265:\t48 89 d6             \tmov    %rdx,%rsi\n    1268:\t48 89 c7             \tmov    %rax,%rdi\n    126b:\te8 00 00 00 00       \tcallq  1270 <acompressor_query_formats+0x7e>\n    1270:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n    1274:\t83 7c 24 24 00       \tcmpl   $0x0,0x24(%rsp)\n    1279:\t79 06                \tjns    1281 <acompressor_query_formats+0x8f>\n    127b:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n    127f:\teb 2e                \tjmp    12af <acompressor_query_formats+0xbd>\n    1281:\te8 00 00 00 00       \tcallq  1286 <acompressor_query_formats+0x94>\n    1286:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n    128b:\t48 83 7c 24 18 00    \tcmpq   $0x0,0x18(%rsp)\n    1291:\t75 07                \tjne    129a <acompressor_query_formats+0xa8>\n    1293:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    1298:\teb 15                \tjmp    12af <acompressor_query_formats+0xbd>\n    129a:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n    129f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    12a4:\t48 89 d6             \tmov    %rdx,%rsi\n    12a7:\t48 89 c7             \tmov    %rax,%rdi\n    12aa:\te8 00 00 00 00       \tcallq  12af <acompressor_query_formats+0xbd>\n    12af:\t48 83 c4 38          \tadd    $0x38,%rsp\n    12b3:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall acompressor_query_formats(__int64 a1) {\n  __int64 result;\n  __int64 v2;\n  __int64 v3;\n  int v4;\n  int v5;\n  __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = ff_all_channel_counts();\n  if (!<span class=\"supfact\">v6</span>)\n    return Number L;\n  v4 = ff_set_common_channel_layouts(a1, <span class=\"supfact\">v6</span>);\n  if (v4 < Number)\n    return (unsigned int)v4;\n  v2 = ff_make_format_list(&sample_fmts_7324);\n  if (!v2)\n    return Number L;\n  v5 = ff_set_common_formats(a1, v2);\n  if (v5 < Number)\n    return (unsigned int)v5;\n  v3 = ff_all_samplerates();\n  if (v3)\n    result = ff_set_common_samplerates(a1, v3);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl acompressor_query_formats(AVFilterContext_0 *ctx) {\n  int result;\n  AVFilterFormats_0 *formats;\n  AVFilterFormats_0 *formatsa;\n  int ret;\n  int reta;\n  AVFilterChannelLayouts_0 *<span class=\"supfact\">layouts</span>;\n  <span class=\"supfact\">layouts</span> = (AVFilterChannelLayouts_0 *)ff_all_channel_counts();\n  if (!<span class=\"supfact\">layouts</span>)\n    return Number;\n  ret = ff_set_common_channel_layouts(ctx, <span class=\"supfact\">layouts</span>);\n  if (ret < Number)\n    return ret;\n  formats = (AVFilterFormats_0 *)ff_make_format_list(sample_fmts_7324);\n  if (!formats)\n    return Number;\n  reta = ff_set_common_formats(ctx, formats);\n  if (reta < Number)\n    return reta;\n  formatsa = (AVFilterFormats_0 *)ff_all_samplerates();\n  if (formatsa)\n    result = ff_set_common_samplerates(ctx, formatsa);\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v6", "type": "AVFilterChannelLayouts_0 *", "ref_name": "layouts", "ref_type": "AVFilterChannelLayouts_0 *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "htz", "repo_name": "hcc", "path": "htz/hcc/b4518024275f1f3faea013e85f65531e7413c7a3e9d3fef0061384f7fe333026", "path_in_repo": "htz/hcc//gen.o", "objdump": "0000000000004cf6 <gen>:\n    4cf6:\t55                   \tpush   %rbp\n    4cf7:\t48 89 e5             \tmov    %rsp,%rbp\n    4cfa:\t48 83 ec 20          \tsub    $0x20,%rsp\n    4cfe:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    4d02:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4d06:\t48 89 c7             \tmov    %rax,%rdi\n    4d09:\te8 8a fa ff ff       \tcallq  4798 <emit_data_section>\n    4d0e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    4d15:\teb 66                \tjmp    4d7d <gen+0x87>\n    4d17:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4d1b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4d1f:\t48 8b 00             \tmov    (%rax),%rax\n    4d22:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    4d25:\t48 63 d2             \tmovslq %edx,%rdx\n    4d28:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    4d2c:\t48 01 d0             \tadd    %rdx,%rax\n    4d2f:\t48 8b 00             \tmov    (%rax),%rax\n    4d32:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    4d36:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4d3a:\t8b 00                \tmov    (%rax),%eax\n    4d3c:\t83 f8 0c             \tcmp    $0xc,%eax\n    4d3f:\t74 10                \tje     4d51 <gen+0x5b>\n    4d41:\t83 f8 0c             \tcmp    $0xc,%eax\n    4d44:\t7f 20                \tjg     4d66 <gen+0x70>\n    4d46:\t85 c0                \ttest   %eax,%eax\n    4d48:\t74 2b                \tje     4d75 <gen+0x7f>\n    4d4a:\t83 f8 06             \tcmp    $0x6,%eax\n    4d4d:\t74 29                \tje     4d78 <gen+0x82>\n    4d4f:\teb 15                \tjmp    4d66 <gen+0x70>\n    4d51:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    4d55:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4d59:\t48 89 d6             \tmov    %rdx,%rsi\n    4d5c:\t48 89 c7             \tmov    %rax,%rdi\n    4d5f:\te8 e6 ef ff ff       \tcallq  3d4a <emit_function>\n    4d64:\teb 13                \tjmp    4d79 <gen+0x83>\n    4d66:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4d6b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4d70:\te8 00 00 00 00       \tcallq  4d75 <gen+0x7f>\n    4d75:\t90                   \tnop\n    4d76:\teb 01                \tjmp    4d79 <gen+0x83>\n    4d78:\t90                   \tnop\n    4d79:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    4d7d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4d81:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4d85:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4d88:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    4d8b:\t7c 8a                \tjl     4d17 <gen+0x21>\n    4d8d:\t90                   \tnop\n    4d8e:\t90                   \tnop\n    4d8f:\tc9                   \tleaveq \n    4d90:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall gen(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n                       __int64 a5, __int64 a6) {\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  int v9;\n  __int64 result;\n  int *<span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">i</span>;\n  emit_data_section(a1, a2, a3, a4, a5, a6);\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = *(unsigned int *)(*(_QWORD *)(a1 + Number) + Number L);\n    if (<span class=\"supfact\">i</span> >= (int)result)\n      break;\n    <span class=\"supfact\">v11</span> =\n        *(int **)(Number L * <span class=\"supfact\">i</span> + **(_QWORD **)(a1 + Number));\n    v9 = *<span class=\"supfact\">v11</span>;\n    if (*<span class=\"supfact\">v11</span> == Number) {\n      emit_function(a1, (__int64)<span class=\"supfact\">v11</span>,\n                    (__int64)<span class=\"supfact\">v11</span>, v6, v7, v8);\n    } else if (v9 > Number || v9 && v9 != Number) {\n      errorf(String);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl gen(parse_t *parse) {\n  int v1;\n  node_t *<span class=\"supfact\">node</span>;\n  int <span class=\"supfact\">i</span>;\n  emit_data_section(parse);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < parse->statements->size;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">node</span> = (node_t *)parse->statements->data[<span class=\"supfact\">i</span>];\n    v1 = <span class=\"supfact\">node</span>->kind;\n    if (<span class=\"supfact\">node</span>->kind == Number) {\n      emit_function(parse, <span class=\"supfact\">node</span>);\n    } else if (v1 > Number || v1 && v1 != Number) {\n      errorf(String);\n    }\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v11", "type": "arith_entropy_ptr", "ref_name": "node", "ref_type": "node_t *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "pamtabak", "repo_name": "CAD", "path": "pamtabak/CAD/225142dec8d63b0ba85e972ae8102a312b601c4519b5e6a6ef664ccf098ae5b9", "path_in_repo": "pamtabak/CAD/Trabalho1/Perfiladores/papi-5.3.0/src/libpfm-3.y/examples_v2.x/task_attach", "objdump": "0000000000401379 <fatal_error>:\n  401379:\t55                   \tpush   %rbp\n  40137a:\t48 89 e5             \tmov    %rsp,%rbp\n  40137d:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n  401384:\t48 89 bd 28 ff ff ff \tmov    %rdi,-0xd8(%rbp)\n  40138b:\t48 89 b5 58 ff ff ff \tmov    %rsi,-0xa8(%rbp)\n  401392:\t48 89 95 60 ff ff ff \tmov    %rdx,-0xa0(%rbp)\n  401399:\t48 89 8d 68 ff ff ff \tmov    %rcx,-0x98(%rbp)\n  4013a0:\t4c 89 85 70 ff ff ff \tmov    %r8,-0x90(%rbp)\n  4013a7:\t4c 89 8d 78 ff ff ff \tmov    %r9,-0x88(%rbp)\n  4013ae:\t84 c0                \ttest   %al,%al\n  4013b0:\t74 20                \tje     4013d2 <fatal_error+0x59>\n  4013b2:\t0f 29 45 80          \tmovaps %xmm0,-0x80(%rbp)\n  4013b6:\t0f 29 4d 90          \tmovaps %xmm1,-0x70(%rbp)\n  4013ba:\t0f 29 55 a0          \tmovaps %xmm2,-0x60(%rbp)\n  4013be:\t0f 29 5d b0          \tmovaps %xmm3,-0x50(%rbp)\n  4013c2:\t0f 29 65 c0          \tmovaps %xmm4,-0x40(%rbp)\n  4013c6:\t0f 29 6d d0          \tmovaps %xmm5,-0x30(%rbp)\n  4013ca:\t0f 29 75 e0          \tmovaps %xmm6,-0x20(%rbp)\n  4013ce:\t0f 29 7d f0          \tmovaps %xmm7,-0x10(%rbp)\n  4013d2:\tc7 85 38 ff ff ff 08 \tmovl   $0x8,-0xc8(%rbp)\n  4013d9:\t00 00 00 \n  4013dc:\tc7 85 3c ff ff ff 30 \tmovl   $0x30,-0xc4(%rbp)\n  4013e3:\t00 00 00 \n  4013e6:\t48 8d 45 10          \tlea    0x10(%rbp),%rax\n  4013ea:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n  4013f1:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  4013f8:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n  4013ff:\t48 8b 05 3a ce 0b 00 \tmov    0xbce3a(%rip),%rax        # 4be240 <stderr@@GLIBC_2.2.5>\n  401406:\t48 8d 95 38 ff ff ff \tlea    -0xc8(%rbp),%rdx\n  40140d:\t48 8b 8d 28 ff ff ff \tmov    -0xd8(%rbp),%rcx\n  401414:\t48 89 ce             \tmov    %rcx,%rsi\n  401417:\t48 89 c7             \tmov    %rax,%rdi\n  40141a:\te8 c1 fd ff ff       \tcallq  4011e0 <vfprintf@plt>\n  40141f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401424:\te8 07 fe ff ff       \tcallq  401230 <exit@plt>", "code_s": "void __noreturn fatal_error(const char *a1, __int64 a2, __int64 a3, __int64 a4,\n                            __int64 a5, __int64 a6, ...) {\n  gcc_va_list <span class=\"supfact\">arg</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  va_start(<span class=\"supfact\">arg</span>, a6);\n  <span class=\"supfact\">v7</span> = a2;\n  <span class=\"supfact\">v8</span> = a3;\n  <span class=\"supfact\">v9</span> = a4;\n  <span class=\"supfact\">v10</span> = a5;\n  <span class=\"supfact\">v11</span> = a6;\n  <span class=\"supfact\">arg</span>[Number].gp_offset = Number;\n  vfprintf(stderr, a1, <span class=\"supfact\">arg</span>);\n  exit(Number);\n}", "code_t": "void __noreturn fatal_error(char *fmt, ...) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  va_list <span class=\"supfact\">ap</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  va_start(<span class=\"supfact\">ap</span>, fmt);\n  v3 = va_arg(<span class=\"supfact\">ap</span>, _QWORD);\n  v1 = va_arg(<span class=\"supfact\">ap</span>, _QWORD);\n  v2 = va_arg(<span class=\"supfact\">ap</span>, _QWORD);\n  v4 = va_arg(<span class=\"supfact\">ap</span>, _QWORD);\n  v5 = va_arg(<span class=\"supfact\">ap</span>, _QWORD);\n  <span class=\"supfact\">v7</span> = v3;\n  <span class=\"supfact\">v8</span> = v1;\n  <span class=\"supfact\">v9</span> = v2;\n  <span class=\"supfact\">v10</span> = v4;\n  <span class=\"supfact\">v11</span> = v5;\n  <span class=\"supfact\">ap</span>[Number].gp_offset = Number;\n  vfprintf(stderr, fmt, <span class=\"supfact\">ap</span>);\n  exit(Number);\n}", "var": [{"name": "v11", "type": "__int64", "ref_name": "v11", "ref_type": "__int64"}, {"name": "v10", "type": "__int64", "ref_name": "v10", "ref_type": "__int64"}, {"name": "v9", "type": "__int64", "ref_name": "v9", "ref_type": "__int64"}, {"name": "v8", "type": "__int64", "ref_name": "v8", "ref_type": "__int64"}, {"name": "v7", "type": "__int64", "ref_name": "v7", "ref_type": "__int64"}, {"name": "arg", "type": "__va_list_tag[1]", "ref_name": "ap", "ref_type": "__va_list_tag[1]"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/f05cc9a80bb7786901725ef54f22f8383d8d5d6e786ab4f8b21e975f89b8cbb7", "path_in_repo": "madeye/GRACE/qemu-0.12.5/sh4-softmmu/tcg/tcg.o", "objdump": "0000000000005845 <temp_save>:\n    5845:\t55                   \tpush   %rbp\n    5846:\t48 89 e5             \tmov    %rsp,%rbp\n    5849:\t48 83 ec 20          \tsub    $0x20,%rsp\n    584d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    5851:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    5854:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n    5857:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    585b:\t48 8b 48 30          \tmov    0x30(%rax),%rcx\n    585f:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    5862:\t48 63 d0             \tmovslq %eax,%rdx\n    5865:\t48 89 d0             \tmov    %rdx,%rax\n    5868:\t48 c1 e0 03          \tshl    $0x3,%rax\n    586c:\t48 29 d0             \tsub    %rdx,%rax\n    586f:\t48 c1 e0 03          \tshl    $0x3,%rax\n    5873:\t48 01 c8             \tadd    %rcx,%rax\n    5876:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    587a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    587e:\t0f b6 40 28          \tmovzbl 0x28(%rax),%eax\n    5882:\t83 e0 01             \tand    $0x1,%eax\n    5885:\t84 c0                \ttest   %al,%al\n    5887:\t0f 85 1d 01 00 00    \tjne    59aa <temp_save+0x165>\n    588d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5891:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5894:\t83 f8 03             \tcmp    $0x3,%eax\n    5897:\t74 52                \tje     58eb <temp_save+0xa6>\n    5899:\t83 f8 03             \tcmp    $0x3,%eax\n    589c:\t0f 8f e0 00 00 00    \tjg     5982 <temp_save+0x13d>\n    58a2:\t83 f8 02             \tcmp    $0x2,%eax\n    58a5:\t0f 84 02 01 00 00    \tje     59ad <temp_save+0x168>\n    58ab:\t83 f8 02             \tcmp    $0x2,%eax\n    58ae:\t0f 8f ce 00 00 00    \tjg     5982 <temp_save+0x13d>\n    58b4:\t85 c0                \ttest   %eax,%eax\n    58b6:\t74 23                \tje     58db <temp_save+0x96>\n    58b8:\t83 f8 01             \tcmp    $0x1,%eax\n    58bb:\t0f 85 c1 00 00 00    \tjne    5982 <temp_save+0x13d>\n    58c1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    58c5:\t8b 50 0c             \tmov    0xc(%rax),%edx\n    58c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    58cc:\t89 d6                \tmov    %edx,%esi\n    58ce:\t48 89 c7             \tmov    %rax,%rdi\n    58d1:\te8 b9 fd ff ff       \tcallq  568f <tcg_reg_free>\n    58d6:\te9 d3 00 00 00       \tjmpq   59ae <temp_save+0x169>\n    58db:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    58df:\tc7 40 08 02 00 00 00 \tmovl   $0x2,0x8(%rax)\n    58e6:\te9 c3 00 00 00       \tjmpq   59ae <temp_save+0x169>\n    58eb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    58ef:\t8b 40 04             \tmov    0x4(%rax),%eax\n    58f2:\t48 98                \tcltq   \n    58f4:\t8b 0c 85 00 00 00 00 \tmov    0x0(,%rax,4),%ecx\n    58fb:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n    58fe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5902:\t89 ce                \tmov    %ecx,%esi\n    5904:\t48 89 c7             \tmov    %rax,%rdi\n    5907:\te8 4f fe ff ff       \tcallq  575b <tcg_reg_alloc>\n    590c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    590f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5913:\t0f b6 40 28          \tmovzbl 0x28(%rax),%eax\n    5917:\t83 e0 04             \tand    $0x4,%eax\n    591a:\t84 c0                \ttest   %al,%al\n    591c:\t75 11                \tjne    592f <temp_save+0xea>\n    591e:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    5921:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5925:\t89 d6                \tmov    %edx,%esi\n    5927:\t48 89 c7             \tmov    %rax,%rdi\n    592a:\te8 74 fc ff ff       \tcallq  55a3 <temp_allocate_frame>\n    592f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5933:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n    5937:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    593b:\t8b 70 04             \tmov    0x4(%rax),%esi\n    593e:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    5941:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5945:\t48 89 c7             \tmov    %rax,%rdi\n    5948:\te8 e7 b4 ff ff       \tcallq  e34 <tcg_out_movi>\n    594d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5951:\t48 8b 78 20          \tmov    0x20(%rax),%rdi\n    5955:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5959:\t8b 48 18             \tmov    0x18(%rax),%ecx\n    595c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5960:\t8b 70 04             \tmov    0x4(%rax),%esi\n    5963:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    5966:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    596a:\t49 89 f8             \tmov    %rdi,%r8\n    596d:\t48 89 c7             \tmov    %rax,%rdi\n    5970:\te8 10 b7 ff ff       \tcallq  1085 <tcg_out_st>\n    5975:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5979:\tc7 40 08 02 00 00 00 \tmovl   $0x2,0x8(%rax)\n    5980:\teb 2c                \tjmp    59ae <temp_save+0x169>\n    5982:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5989 <temp_save+0x144>\n    5989:\tb9 76 05 00 00       \tmov    $0x576,%ecx\n    598e:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5993:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5998:\t48 89 c7             \tmov    %rax,%rdi\n    599b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    59a0:\te8 00 00 00 00       \tcallq  59a5 <temp_save+0x160>\n    59a5:\te8 00 00 00 00       \tcallq  59aa <temp_save+0x165>\n    59aa:\t90                   \tnop\n    59ab:\teb 01                \tjmp    59ae <temp_save+0x169>\n    59ad:\t90                   \tnop\n    59ae:\t90                   \tnop\n    59af:\tc9                   \tleaveq \n    59b0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall temp_save(__int64 a1, int a2, int a3) {\n  __int64 result;\n  int <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = *(_QWORD *)(a1 + Number) + Number L * a2;\n  result = *(_BYTE *)(<span class=\"supfact\">v5</span> + Number) & Number;\n  if (!(_BYTE)result) {\n    result = *(unsigned int *)(<span class=\"supfact\">v5</span> + Number);\n    if ((_DWORD)result == Number) {\n      <span class=\"supfact\">v4</span> = tcg_reg_alloc(\n          a1, tcg_target_available_regs[*(int *)(<span class=\"supfact\">v5</span> + Number)],\n          a3);\n      if ((*(_BYTE *)(<span class=\"supfact\">v5</span> + Number) & Number) == Number)\n        temp_allocate_frame(a1, a2);\n      tcg_out_movi(a1, *(_DWORD *)(<span class=\"supfact\">v5</span> + Number),\n                   <span class=\"supfact\">v4</span>,\n                   *(_QWORD *)(<span class=\"supfact\">v5</span> + Number));\n      tcg_out_st(a1, *(_DWORD *)(<span class=\"supfact\">v5</span> + Number),\n                 <span class=\"supfact\">v4</span>, *(_DWORD *)(<span class=\"supfact\">v5</span> + Number),\n                 *(_QWORD *)(<span class=\"supfact\">v5</span> + Number));\n      result = <span class=\"supfact\">v5</span>;\n      *(_DWORD *)(<span class=\"supfact\">v5</span> + Number) = Number;\n    } else {\n      if ((int)result > Number)\n        goto LABEL_12;\n      if ((_DWORD)result == Number)\n        return result;\n      if ((_DWORD)result) {\n        if ((_DWORD)result == Number)\n          return tcg_reg_free(a1, *(_DWORD *)(<span class=\"supfact\">v5</span> + Number));\n      LABEL_12:\n        fprintf(stderr, String, String, Number L);\n        abort();\n      }\n      result = *(_QWORD *)(a1 + Number) + Number L * a2;\n      *(_DWORD *)(<span class=\"supfact\">v5</span> + Number) = Number;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl temp_save(TCGContext_0 *s, int temp, TCGRegSet allocated_regs) {\n  int v3;\n  int <span class=\"supfact\">reg</span>;\n  TCGTemp_0 *<span class=\"supfact\">ts</span>;\n  <span class=\"supfact\">ts</span> = &s->temps[temp];\n  if ((*((_BYTE *)<span class=\"supfact\">ts</span> + Number) & Number) == Number) {\n    v3 = <span class=\"supfact\">ts</span>->val_type;\n    if (v3 == Number) {\n      <span class=\"supfact\">reg</span> =\n          tcg_reg_alloc(s, tcg_target_available_regs[<span class=\"supfact\">ts</span>->type],\n                        allocated_regs);\n      if ((*((_BYTE *)<span class=\"supfact\">ts</span> + Number) & Number) == Number)\n        temp_allocate_frame(s, temp);\n      tcg_out_movi(s, <span class=\"supfact\">ts</span>->type, <span class=\"supfact\">reg</span>,\n                   <span class=\"supfact\">ts</span>->val);\n      tcg_out_st(s, <span class=\"supfact\">ts</span>->type, <span class=\"supfact\">reg</span>,\n                 <span class=\"supfact\">ts</span>->mem_reg, <span class=\"supfact\">ts</span>->mem_offset);\n      <span class=\"supfact\">ts</span>->val_type = Number;\n    } else {\n      if (v3 > Number)\n        goto LABEL_12;\n      if (v3 == Number)\n        return;\n      if (v3) {\n        if (v3 == Number) {\n          tcg_reg_free(s, <span class=\"supfact\">ts</span>-><span class=\"supfact\">reg</span>);\n          return;\n        }\n      LABEL_12:\n        fprintf(stderr, String, String, Number L);\n        abort();\n      }\n      <span class=\"supfact\">ts</span>->val_type = Number;\n    }\n  }\n}", "var": [{"name": "v5", "type": "TCGTemp_0 *", "ref_name": "ts", "ref_type": "TCGTemp_0 *"}, {"name": "v4", "type": "int", "ref_name": "reg", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "hustustor", "repo_name": "simplecfs", "path": "hustustor/simplecfs/6c5ab0dd6945359d509bb39dd892f6e9585bd63c429d2d0586134a818ccbbd9f", "path_in_repo": "hustustor/simplecfs/ext/redis/deps/lua/src/luac", "objdump": "00000000004086c9 <DumpConstants>:\n  4086c9:\t55                   \tpush   %rbp\n  4086ca:\t48 89 e5             \tmov    %rsp,%rbp\n  4086cd:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4086d1:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4086d5:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  4086d9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4086dd:\t8b 40 4c             \tmov    0x4c(%rax),%eax\n  4086e0:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4086e3:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4086e7:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4086ea:\t48 89 d6             \tmov    %rdx,%rsi\n  4086ed:\t89 c7                \tmov    %eax,%edi\n  4086ef:\te8 b3 fe ff ff       \tcallq  4085a7 <DumpInt>\n  4086f4:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4086fb:\te9 a7 00 00 00       \tjmpq   4087a7 <DumpConstants+0xde>\n  408700:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  408704:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  408708:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40870b:\t48 63 d2             \tmovslq %edx,%rdx\n  40870e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n  408712:\t48 01 d0             \tadd    %rdx,%rax\n  408715:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  408719:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40871d:\t8b 40 08             \tmov    0x8(%rax),%eax\n  408720:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  408724:\t48 89 d6             \tmov    %rdx,%rsi\n  408727:\t89 c7                \tmov    %eax,%edi\n  408729:\te8 4c fe ff ff       \tcallq  40857a <DumpChar>\n  40872e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  408732:\t8b 40 08             \tmov    0x8(%rax),%eax\n  408735:\t83 f8 04             \tcmp    $0x4,%eax\n  408738:\t74 4a                \tje     408784 <DumpConstants+0xbb>\n  40873a:\t83 f8 04             \tcmp    $0x4,%eax\n  40873d:\t7f 60                \tjg     40879f <DumpConstants+0xd6>\n  40873f:\t83 f8 03             \tcmp    $0x3,%eax\n  408742:\t74 26                \tje     40876a <DumpConstants+0xa1>\n  408744:\t83 f8 03             \tcmp    $0x3,%eax\n  408747:\t7f 56                \tjg     40879f <DumpConstants+0xd6>\n  408749:\t85 c0                \ttest   %eax,%eax\n  40874b:\t74 55                \tje     4087a2 <DumpConstants+0xd9>\n  40874d:\t83 f8 01             \tcmp    $0x1,%eax\n  408750:\t74 02                \tje     408754 <DumpConstants+0x8b>\n  408752:\teb 4b                \tjmp    40879f <DumpConstants+0xd6>\n  408754:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  408758:\t8b 00                \tmov    (%rax),%eax\n  40875a:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40875e:\t48 89 d6             \tmov    %rdx,%rsi\n  408761:\t89 c7                \tmov    %eax,%edi\n  408763:\te8 12 fe ff ff       \tcallq  40857a <DumpChar>\n  408768:\teb 39                \tjmp    4087a3 <DumpConstants+0xda>\n  40876a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40876e:\t48 8b 00             \tmov    (%rax),%rax\n  408771:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  408775:\t48 89 d7             \tmov    %rdx,%rdi\n  408778:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n  40877d:\te8 4c fe ff ff       \tcallq  4085ce <DumpNumber>\n  408782:\teb 1f                \tjmp    4087a3 <DumpConstants+0xda>\n  408784:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  408788:\t48 8b 00             \tmov    (%rax),%rax\n  40878b:\t48 89 c2             \tmov    %rax,%rdx\n  40878e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  408792:\t48 89 c6             \tmov    %rax,%rsi\n  408795:\t48 89 d7             \tmov    %rdx,%rdi\n  408798:\te8 a5 fe ff ff       \tcallq  408642 <DumpString>\n  40879d:\teb 04                \tjmp    4087a3 <DumpConstants+0xda>\n  40879f:\t90                   \tnop\n  4087a0:\teb 01                \tjmp    4087a3 <DumpConstants+0xda>\n  4087a2:\t90                   \tnop\n  4087a3:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4087a7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4087aa:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n  4087ad:\t0f 8c 4d ff ff ff    \tjl     408700 <DumpConstants+0x37>\n  4087b3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4087b7:\t8b 40 58             \tmov    0x58(%rax),%eax\n  4087ba:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4087bd:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4087c1:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4087c4:\t48 89 d6             \tmov    %rdx,%rsi\n  4087c7:\t89 c7                \tmov    %eax,%edi\n  4087c9:\te8 d9 fd ff ff       \tcallq  4085a7 <DumpInt>\n  4087ce:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4087d5:\teb 33                \tjmp    40880a <DumpConstants+0x141>\n  4087d7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4087db:\t48 8b 48 40          \tmov    0x40(%rax),%rcx\n  4087df:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4087e3:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4087e7:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4087ea:\t48 63 d2             \tmovslq %edx,%rdx\n  4087ed:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  4087f1:\t48 01 d0             \tadd    %rdx,%rax\n  4087f4:\t48 8b 00             \tmov    (%rax),%rax\n  4087f7:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4087fb:\t48 89 ce             \tmov    %rcx,%rsi\n  4087fe:\t48 89 c7             \tmov    %rax,%rdi\n  408801:\te8 7d 01 00 00       \tcallq  408983 <DumpFunction>\n  408806:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40880a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40880d:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n  408810:\t7c c5                \tjl     4087d7 <DumpConstants+0x10e>\n  408812:\t90                   \tnop\n  408813:\t90                   \tnop\n  408814:\tc9                   \tleaveq \n  408815:\tc3                   \tretq   ", "code_s": "__int64 __fastcall DumpConstants(__int64 a1, __int64 a2) {\n  int v2;\n  __int64 result;\n  __int64 <span class=\"supfact\">v4</span>;\n  int v5;\n  int v6;\n  int i;\n  int j;\n  v5 = *(_DWORD *)(a1 + Number);\n  DumpInt(v5, a2);\n  for (i = Number; i < v5; ++i) {\n    <span class=\"supfact\">v4</span> = Number L * i + *(_QWORD *)(a1 + Number);\n    DumpChar(*(_DWORD *)(<span class=\"supfact\">v4</span> + Number), a2);\n    v2 = *(_DWORD *)(<span class=\"supfact\">v4</span> + Number);\n    if (v2 == Number) {\n      DumpString(*(_QWORD *)<span class=\"supfact\">v4</span>, a2);\n    } else if (v2 <= Number) {\n      if (v2 == Number) {\n        DumpNumber(a2, *(double *)<span class=\"supfact\">v4</span>);\n      } else if (v2 && v2 == Number) {\n        DumpChar(*(_DWORD *)<span class=\"supfact\">v4</span>, a2);\n      }\n    }\n  }\n  v6 = *(_DWORD *)(a1 + Number);\n  DumpInt(v6, a2);\n  for (j = Number;; ++j) {\n    result = (unsigned int)j;\n    if (j >= v6)\n      break;\n    DumpFunction(*(_QWORD *)(Number L * j + *(_QWORD *)(a1 + Number)),\n                 *(_QWORD *)(a1 + Number), a2);\n  }\n  return result;\n}", "code_t": "void __cdecl DumpConstants(const Proto_0 *f, DumpState *D) {\n  int v2;\n  const TValue *<span class=\"supfact\">o</span>;\n  int n;\n  int na;\n  int i;\n  int ia;\n  n = f->sizek;\n  DumpInt(n, D);\n  for (i = Number; i < n; ++i) {\n    <span class=\"supfact\">o</span> = &f->k[i];\n    DumpChar(<span class=\"supfact\">o</span>->tt, D);\n    v2 = <span class=\"supfact\">o</span>->tt;\n    if (v2 == Number) {\n      DumpString((const TString_0 *)<span class=\"supfact\">o</span>->value.gc, D);\n    } else if (v2 <= Number) {\n      if (v2 == Number) {\n        DumpNumber(<span class=\"supfact\">o</span>->value.n, D);\n      } else if (v2 && v2 == Number) {\n        DumpChar(<span class=\"supfact\">o</span>->value.b, D);\n      }\n    }\n  }\n  na = f->sizep;\n  DumpInt(na, D);\n  for (ia = Number; ia < na; ++ia)\n    DumpFunction(f->p[ia], f->source, D);\n}", "var": [{"name": "v4", "type": "const TValue *", "ref_name": "o", "ref_type": "const TValue *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "DariuszO", "repo_name": "firmware-mod-kit", "path": "DariuszO/firmware-mod-kit/9246d29a195e73786b7f5db1fac28a03fcc931dfe8bb578616447c78e1ecbc36", "path_in_repo": "DariuszO/firmware-mod-kit/src/others/squashfs-3.2-r2/mksquashfs.o", "objdump": "0000000000007e11 <pre_duplicate>:\n    7e11:\t55                   \tpush   %rbp\n    7e12:\t48 89 e5             \tmov    %rsp,%rbp\n    7e15:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    7e19:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7e1d:\t0f b7 c0             \tmovzwl %ax,%eax\n    7e20:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    7e27:\t00 \n    7e28:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    7e2c:\teb 20                \tjmp    7e4e <pre_duplicate+0x3d>\n    7e2e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    7e32:\t48 8b 00             \tmov    (%rax),%rax\n    7e35:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    7e39:\t75 07                \tjne    7e42 <pre_duplicate+0x31>\n    7e3b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    7e40:\teb 18                \tjmp    7e5a <pre_duplicate+0x49>\n    7e42:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    7e46:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    7e4a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    7e4e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    7e53:\t75 d9                \tjne    7e2e <pre_duplicate+0x1d>\n    7e55:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7e5a:\t5d                   \tpop    %rbp\n    7e5b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pre_duplicate(__int64 a1) {\n  _QWORD *<span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = (_QWORD *)dupl[(unsigned __int16)a1];\n       <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = (_QWORD *)<span class=\"supfact\">i</span>[Number]) {\n    if (a1 == *<span class=\"supfact\">i</span>)\n      return Number L;\n  }\n  return Number L;\n}", "code_t": "int __cdecl pre_duplicate(__int64 file_size) {\n  file_info *<span class=\"supfact\">dupl_ptr</span>;\n  for (<span class=\"supfact\">dupl_ptr</span> = dupl[(unsigned __int16)file_size];\n       <span class=\"supfact\">dupl_ptr</span>;\n       <span class=\"supfact\">dupl_ptr</span> = <span class=\"supfact\">dupl_ptr</span>->next) {\n    if (file_size == <span class=\"supfact\">dupl_ptr</span>->file_size)\n      return Number;\n  }\n  return Number;\n}", "var": [{"name": "i", "type": "__unk__", "ref_name": "dupl_ptr", "ref_type": "file_info *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "G0go", "repo_name": "epitech", "path": "G0go/epitech/d974e661f9c4fed3560f04ef5a0cb893a0971a0f1f522bccc57a198514324075", "path_in_repo": "G0go/epitech/tek2/C++/cpp_nanotekspice/sources/classes/components/False.o", "objdump": "0000000000000000 <_ZSt12__miter_baseIPP3PinEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  10:\t48 89 c7             \tmov    %rax,%rdi\n  13:\te8 00 00 00 00       \tcallq  18 <_ZSt12__miter_baseIPP3PinEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E+0x18>\n  18:\t48 89 c7             \tmov    %rax,%rdi\n  1b:\te8 00 00 00 00       \tcallq  20 <_ZSt12__miter_baseIPP3PinEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E+0x20>\n  20:\tc9                   \tleaveq \n  21:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __miter_base<Pin **>(__int64 a1) {\n  __int64 v1;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = a1;\n  v1 = std move_iterator<Pin **> base(&<span class=\"supfact\">v3</span>);\n  return std __miter_base<Pin **>(v1);\n}", "code_t": "__int64 __fastcall std __miter_base<Pin **>(__int64 a1) {\n  __int64 v1;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = a1;\n  v1 = std move_iterator<Pin **> base(&<span class=\"supfact\">v3</span>);\n  return std __miter_base<Pin **>(v1);\n}", "var": [{"name": "v3", "type": "__int64", "ref_name": "v3", "ref_type": "__int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "moinnabi", "repo_name": "SubcategoryDiscovery", "path": "moinnabi/SubcategoryDiscovery/3313c18744a8190fd4689f2c35bc5c0c9a8281ba2fa46b1fb106f2aad3606c53", "path_in_repo": "moinnabi/SubcategoryDiscovery/code/vlfeat-0.9.19/bin/glnxa64/objs/liop.o", "objdump": "0000000000000237 <patch_sort_recursive>:\n     237:\t55                   \tpush   %rbp\n     238:\t48 89 e5             \tmov    %rsp,%rbp\n     23b:\t48 83 ec 40          \tsub    $0x40,%rsp\n     23f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     243:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     247:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     24b:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     24f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     253:\t48 01 d0             \tadd    %rdx,%rax\n     256:\t48 d1 e8             \tshr    %rax\n     259:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     25d:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     261:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n     265:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     269:\t48 89 ce             \tmov    %rcx,%rsi\n     26c:\t48 89 c7             \tmov    %rax,%rdi\n     26f:\te8 4f ff ff ff       \tcallq  1c3 <patch_swap>\n     274:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     278:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     27c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     280:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     284:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     288:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     28c:\teb 41                \tjmp    2cf <patch_sort_recursive+0x98>\n     28e:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     292:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n     296:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     29a:\t48 89 ce             \tmov    %rcx,%rsi\n     29d:\t48 89 c7             \tmov    %rax,%rdi\n     2a0:\te8 a6 fe ff ff       \tcallq  14b <patch_cmp>\n     2a5:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n     2a9:\t0f 2f c8             \tcomiss %xmm0,%xmm1\n     2ac:\t72 1c                \tjb     2ca <patch_sort_recursive+0x93>\n     2ae:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     2b2:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     2b6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     2ba:\t48 89 ce             \tmov    %rcx,%rsi\n     2bd:\t48 89 c7             \tmov    %rax,%rdi\n     2c0:\te8 fe fe ff ff       \tcallq  1c3 <patch_swap>\n     2c5:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n     2ca:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n     2cf:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     2d3:\t48 3b 45 c8          \tcmp    -0x38(%rbp),%rax\n     2d7:\t72 b5                \tjb     28e <patch_sort_recursive+0x57>\n     2d9:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     2dd:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     2e1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     2e5:\t48 89 ce             \tmov    %rcx,%rsi\n     2e8:\t48 89 c7             \tmov    %rax,%rdi\n     2eb:\te8 d3 fe ff ff       \tcallq  1c3 <patch_swap>\n     2f0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2f4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     2f8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     2fc:\t48 3b 45 d0          \tcmp    -0x30(%rbp),%rax\n     300:\t76 1b                \tjbe    31d <patch_sort_recursive+0xe6>\n     302:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     306:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n     30a:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     30e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     312:\t48 89 ce             \tmov    %rcx,%rsi\n     315:\t48 89 c7             \tmov    %rax,%rdi\n     318:\te8 1a ff ff ff       \tcallq  237 <patch_sort_recursive>\n     31d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     321:\t48 3b 45 c8          \tcmp    -0x38(%rbp),%rax\n     325:\t73 1b                \tjae    342 <patch_sort_recursive+0x10b>\n     327:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     32b:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n     32f:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     333:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     337:\t48 89 ce             \tmov    %rcx,%rsi\n     33a:\t48 89 c7             \tmov    %rax,%rdi\n     33d:\te8 f5 fe ff ff       \tcallq  237 <patch_sort_recursive>\n     342:\t90                   \tnop\n     343:\tc9                   \tleaveq \n     344:\tc3                   \tretq   ", "code_s": "__int64 __fastcall patch_sort_recursive(__int64 a1, unsigned __int64 a2,\n                                        unsigned __int64 a3) {\n  __int64 result;\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  patch_swap(a1, (a3 + a2) >> Number, a3);\n  <span class=\"supfact\">v6</span> = a2;\n  for (<span class=\"supfact\">i</span> = a2; <span class=\"supfact\">i</span> < a3; ++<span class=\"supfact\">i</span>) {\n    if (patch_cmp(a1, <span class=\"supfact\">i</span>, a3) <= Number)\n      patch_swap(a1, <span class=\"supfact\">v6</span>++, <span class=\"supfact\">i</span>);\n  }\n  patch_swap(a1, <span class=\"supfact\">v6</span>, a3);\n  if (<span class=\"supfact\">v6</span> > a2)\n    patch_sort_recursive(a1, a2, <span class=\"supfact\">v6</span> - Number);\n  result = <span class=\"supfact\">v6</span>;\n  if (<span class=\"supfact\">v6</span> < a3)\n    result = patch_sort_recursive(a1, <span class=\"supfact\">v6</span> + Number, a3);\n  return result;\n}", "code_t": "void __cdecl patch_sort_recursive(VlLiopDesc *array, vl_uindex begin,\n                                  vl_uindex end) {\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  unsigned __int64 <span class=\"supfact\">lowPart</span>;\n  patch_swap(array, (end + begin) >> Number, end);\n  <span class=\"supfact\">lowPart</span> = begin;\n  for (<span class=\"supfact\">i</span> = begin; <span class=\"supfact\">i</span> < end;\n       ++<span class=\"supfact\">i</span>) {\n    if (patch_cmp(array, <span class=\"supfact\">i</span>, end) <= Number)\n      patch_swap(array, <span class=\"supfact\">lowPart</span>++, <span class=\"supfact\">i</span>);\n  }\n  patch_swap(array, <span class=\"supfact\">lowPart</span>, end);\n  if (<span class=\"supfact\">lowPart</span> > begin)\n    patch_sort_recursive(array, begin, <span class=\"supfact\">lowPart</span> - Number);\n  if (<span class=\"supfact\">lowPart</span> < end)\n    patch_sort_recursive(array, <span class=\"supfact\">lowPart</span> + Number, end);\n}", "var": [{"name": "v6", "type": "unsigned __int64", "ref_name": "lowPart", "ref_type": "unsigned __int64"}, {"name": "i", "type": "unsigned __int64", "ref_name": "i", "ref_type": "unsigned __int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/9e7f6897b8488d29d54dca97af0dac7578909104c264ea22be022808a52dace3", "path_in_repo": "XanClic/qemu//mips64-softmmu/hw/virtio/virtio.o", "objdump": "00000000000067a0 <virtio_config_modern_writew>:\n    67a0:\t55                   \tpush   %rbp\n    67a1:\t48 89 e5             \tmov    %rsp,%rbp\n    67a4:\t48 83 ec 20          \tsub    $0x20,%rsp\n    67a8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    67ac:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    67af:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n    67b2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    67b6:\t48 89 c7             \tmov    %rax,%rdi\n    67b9:\te8 00 00 00 00       \tcallq  67be <virtio_config_modern_writew+0x1e>\n    67be:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 67c5 <virtio_config_modern_writew+0x25>\n    67c5:\tb9 39 08 00 00       \tmov    $0x839,%ecx\n    67ca:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 67d1 <virtio_config_modern_writew+0x31>\n    67d1:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 67d8 <virtio_config_modern_writew+0x38>\n    67d8:\t48 89 c7             \tmov    %rax,%rdi\n    67db:\te8 00 00 00 00       \tcallq  67e0 <virtio_config_modern_writew+0x40>\n    67e0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    67e4:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n    67e7:\t66 89 45 f6          \tmov    %ax,-0xa(%rbp)\n    67eb:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    67ee:\t48 8d 50 02          \tlea    0x2(%rax),%rdx\n    67f2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    67f6:\t48 8b 80 a0 00 00 00 \tmov    0xa0(%rax),%rax\n    67fd:\t48 39 c2             \tcmp    %rax,%rdx\n    6800:\t77 53                \tja     6855 <virtio_config_modern_writew+0xb5>\n    6802:\t0f b7 45 f6          \tmovzwl -0xa(%rbp),%eax\n    6806:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    680a:\t48 8b 8a a8 00 00 00 \tmov    0xa8(%rdx),%rcx\n    6811:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    6814:\t48 01 ca             \tadd    %rcx,%rdx\n    6817:\t89 c6                \tmov    %eax,%esi\n    6819:\t48 89 d7             \tmov    %rdx,%rdi\n    681c:\te8 76 99 ff ff       \tcallq  197 <stw_le_p>\n    6821:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6825:\t48 8b 80 e8 00 00 00 \tmov    0xe8(%rax),%rax\n    682c:\t48 85 c0             \ttest   %rax,%rax\n    682f:\t74 25                \tje     6856 <virtio_config_modern_writew+0xb6>\n    6831:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6835:\t48 8b 88 e8 00 00 00 \tmov    0xe8(%rax),%rcx\n    683c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6840:\t48 8b 90 a8 00 00 00 \tmov    0xa8(%rax),%rdx\n    6847:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    684b:\t48 89 d6             \tmov    %rdx,%rsi\n    684e:\t48 89 c7             \tmov    %rax,%rdi\n    6851:\tff d1                \tcallq  *%rcx\n    6853:\teb 01                \tjmp    6856 <virtio_config_modern_writew+0xb6>\n    6855:\t90                   \tnop\n    6856:\tc9                   \tleaveq \n    6857:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall virtio_config_modern_writew(__int64 a1,\n                                                        unsigned int a2,\n                                                        __int16 a3) {\n  __int64 v3;\n  unsigned __int64 result;\n  __int64 <span class=\"supfact\">v6</span>;\n  v3 = object_get_class(a1);\n  <span class=\"supfact\">v6</span> =\n      object_class_dynamic_cast_assert(v3, String, String, Number L, String);\n  result = *(_QWORD *)(a1 + Number);\n  if ((unsigned __int64)a2 + Number <= result) {\n    stw_le_p((_WORD *)(*(_QWORD *)(a1 + Number) + a2), a3);\n    result = *(_QWORD *)(<span class=\"supfact\">v6</span> + Number);\n    if (result)\n      result = (*(__int64(__fastcall **)(__int64, _QWORD))(\n          <span class=\"supfact\">v6</span> + Number))(a1, *(_QWORD *)(a1 + Number));\n  }\n  return result;\n}", "code_t": "void __cdecl virtio_config_modern_writew(VirtIODevice_0 *vdev, uint32_t addr,\n                                         uint32_t data) {\n  __int64 v3;\n  uint16_t dataa;\n  VirtioDeviceClass_0 *<span class=\"supfact\">k</span>;\n  dataa = data;\n  v3 = object_get_class(vdev);\n  <span class=\"supfact\">k</span> = (VirtioDeviceClass_0 *)object_class_dynamic_cast_assert(\n      v3, String, String, Number L, String);\n  if ((unsigned __int64)addr + Number <= vdev->config_len) {\n    stw_le_p((char *)vdev->config + addr, dataa);\n    if (<span class=\"supfact\">k</span>->set_config)\n      <span class=\"supfact\">k</span>->set_config(vdev, (const uint8_t *)vdev->config);\n  }\n}", "var": [{"name": "v6", "type": "VirtioDeviceClass_0 *", "ref_name": "k", "ref_type": "VirtioDeviceClass_0 *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "yank555-lu", "repo_name": "temp_moto_kernel", "path": "yank555-lu/temp_moto_kernel/15cf4fac26ca39db1ee148f539e030cb6ae1ade2e1456ad2426ebb81522a6a53", "path_in_repo": "yank555-lu/temp_moto_kernel/tools/perf/util/header.o", "objdump": "0000000000002e84 <write_numa_topology>:\n    2e84:\t55                   \tpush   %rbp\n    2e85:\t48 89 e5             \tmov    %rsp,%rbp\n    2e88:\t48 83 ec 60          \tsub    $0x60,%rsp\n    2e8c:\t89 7d bc             \tmov    %edi,-0x44(%rbp)\n    2e8f:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    2e93:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n    2e97:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2e9e:\t00 00 \n    2ea0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2ea4:\t31 c0                \txor    %eax,%eax\n    2ea6:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n    2ead:\t00 \n    2eae:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    2eb5:\t00 \n    2eb6:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    2ebd:\t00 \n    2ebe:\tc7 45 cc ff ff ff ff \tmovl   $0xffffffff,-0x34(%rbp)\n    2ec5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2eca:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2ecf:\te8 00 00 00 00       \tcallq  2ed4 <write_numa_topology+0x50>\n    2ed4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2ed8:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    2edd:\t75 0a                \tjne    2ee9 <write_numa_topology+0x65>\n    2edf:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    2ee4:\te9 16 01 00 00       \tjmpq   2fff <write_numa_topology+0x17b>\n    2ee9:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    2eed:\t48 8d 4d d8          \tlea    -0x28(%rbp),%rcx\n    2ef1:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    2ef5:\t48 89 ce             \tmov    %rcx,%rsi\n    2ef8:\t48 89 c7             \tmov    %rax,%rdi\n    2efb:\te8 00 00 00 00       \tcallq  2f00 <write_numa_topology+0x7c>\n    2f00:\t48 85 c0             \ttest   %rax,%rax\n    2f03:\t0f 8e c2 00 00 00    \tjle    2fcb <write_numa_topology+0x147>\n    2f09:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2f0d:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n    2f12:\t48 89 c7             \tmov    %rax,%rdi\n    2f15:\te8 00 00 00 00       \tcallq  2f1a <write_numa_topology+0x96>\n    2f1a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2f1e:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    2f23:\t74 07                \tje     2f2c <write_numa_topology+0xa8>\n    2f25:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2f29:\tc6 00 00             \tmovb   $0x0,(%rax)\n    2f2c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2f30:\t48 89 c7             \tmov    %rax,%rdi\n    2f33:\te8 00 00 00 00       \tcallq  2f38 <write_numa_topology+0xb4>\n    2f38:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    2f3c:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    2f41:\t0f 84 87 00 00 00    \tje     2fce <write_numa_topology+0x14a>\n    2f47:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2f4b:\t8b 00                \tmov    (%rax),%eax\n    2f4d:\t89 45 c0             \tmov    %eax,-0x40(%rbp)\n    2f50:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n    2f54:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    2f57:\tba 04 00 00 00       \tmov    $0x4,%edx\n    2f5c:\t48 89 ce             \tmov    %rcx,%rsi\n    2f5f:\t89 c7                \tmov    %eax,%edi\n    2f61:\te8 16 dc ff ff       \tcallq  b7c <do_write>\n    2f66:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    2f69:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    2f6d:\t78 62                \tjs     2fd1 <write_numa_topology+0x14d>\n    2f6f:\tc7 45 c8 00 00 00 00 \tmovl   $0x0,-0x38(%rbp)\n    2f76:\teb 49                \tjmp    2fc1 <write_numa_topology+0x13d>\n    2f78:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2f7c:\t8b 55 c8             \tmov    -0x38(%rbp),%edx\n    2f7f:\t8b 44 90 04          \tmov    0x4(%rax,%rdx,4),%eax\n    2f83:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n    2f86:\t48 8d 4d c4          \tlea    -0x3c(%rbp),%rcx\n    2f8a:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    2f8d:\tba 04 00 00 00       \tmov    $0x4,%edx\n    2f92:\t48 89 ce             \tmov    %rcx,%rsi\n    2f95:\t89 c7                \tmov    %eax,%edi\n    2f97:\te8 e0 db ff ff       \tcallq  b7c <do_write>\n    2f9c:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    2f9f:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    2fa3:\t78 2f                \tjs     2fd4 <write_numa_topology+0x150>\n    2fa5:\t8b 55 c8             \tmov    -0x38(%rbp),%edx\n    2fa8:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    2fab:\t89 d6                \tmov    %edx,%esi\n    2fad:\t89 c7                \tmov    %eax,%edi\n    2faf:\te8 ee fb ff ff       \tcallq  2ba2 <write_topo_node>\n    2fb4:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    2fb7:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    2fbb:\t78 1a                \tjs     2fd7 <write_numa_topology+0x153>\n    2fbd:\t83 45 c8 01          \taddl   $0x1,-0x38(%rbp)\n    2fc1:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    2fc4:\t39 45 c8             \tcmp    %eax,-0x38(%rbp)\n    2fc7:\t72 af                \tjb     2f78 <write_numa_topology+0xf4>\n    2fc9:\teb 0d                \tjmp    2fd8 <write_numa_topology+0x154>\n    2fcb:\t90                   \tnop\n    2fcc:\teb 0a                \tjmp    2fd8 <write_numa_topology+0x154>\n    2fce:\t90                   \tnop\n    2fcf:\teb 07                \tjmp    2fd8 <write_numa_topology+0x154>\n    2fd1:\t90                   \tnop\n    2fd2:\teb 04                \tjmp    2fd8 <write_numa_topology+0x154>\n    2fd4:\t90                   \tnop\n    2fd5:\teb 01                \tjmp    2fd8 <write_numa_topology+0x154>\n    2fd7:\t90                   \tnop\n    2fd8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2fdc:\t48 89 c7             \tmov    %rax,%rdi\n    2fdf:\te8 00 00 00 00       \tcallq  2fe4 <write_numa_topology+0x160>\n    2fe4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2fe8:\t48 89 c7             \tmov    %rax,%rdi\n    2feb:\te8 00 00 00 00       \tcallq  2ff0 <write_numa_topology+0x16c>\n    2ff0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2ff4:\t48 89 c7             \tmov    %rax,%rdi\n    2ff7:\te8 00 00 00 00       \tcallq  2ffc <write_numa_topology+0x178>\n    2ffc:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    2fff:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    3003:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    300a:\t00 00 \n    300c:\t74 05                \tje     3013 <write_numa_topology+0x18f>\n    300e:\te8 00 00 00 00       \tcallq  3013 <write_numa_topology+0x18f>\n    3013:\tc9                   \tleaveq \n    3014:\tc3                   \tretq   ", "code_s": "__int64 __fastcall write_numa_topology(int a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v5</span>;\n  char *<span class=\"supfact\">lineptr</span>;\n  size_t <span class=\"supfact\">n</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  FILE *<span class=\"supfact\">stream</span>;\n  char *<span class=\"supfact\">v10</span>;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = __readfsqword(Number);\n  <span class=\"supfact\">lineptr</span> = Number L;\n  <span class=\"supfact\">n</span> = Number L;\n  <span class=\"supfact\">ptr</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">stream</span> = fopen64(String, String);\n  if (!<span class=\"supfact\">stream</span>)\n    return Number;\n  if (getline(&<span class=\"supfact\">lineptr</span>, &<span class=\"supfact\">n</span>,\n              <span class=\"supfact\">stream</span>) > Number) {\n    <span class=\"supfact\">v10</span> = strchr(<span class=\"supfact\">lineptr</span>, Number);\n    if (<span class=\"supfact\">v10</span>)\n      *<span class=\"supfact\">v10</span> = Number;\n    <span class=\"supfact\">ptr</span> = (void *)cpu_map__new(<span class=\"supfact\">lineptr</span>);\n    if (<span class=\"supfact\">ptr</span>) {\n      <span class=\"supfact\">v2</span> = *(_DWORD *)<span class=\"supfact\">ptr</span>;\n      <span class=\"supfact\">v5</span> = do_write(a1, (char *)&<span class=\"supfact\">v2</span>, Number);\n      if (<span class=\"supfact\">v5</span> >= Number) {\n        for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v2</span>;\n             ++<span class=\"supfact\">i</span>) {\n          <span class=\"supfact\">v3</span> =\n              *((_DWORD *)<span class=\"supfact\">ptr</span> + <span class=\"supfact\">i</span> + Number);\n          <span class=\"supfact\">v5</span> =\n              do_write(a1, (char *)&<span class=\"supfact\">v3</span>, Number);\n          if (<span class=\"supfact\">v5</span> < Number)\n            break;\n          <span class=\"supfact\">v5</span> = write_topo_node(a1, <span class=\"supfact\">i</span>);\n          if (<span class=\"supfact\">v5</span> < Number)\n            break;\n        }\n      }\n    }\n  }\n  free(<span class=\"supfact\">lineptr</span>);\n  fclose(<span class=\"supfact\">stream</span>);\n  free(<span class=\"supfact\">ptr</span>);\n  return (unsigned int)<span class=\"supfact\">v5</span>;\n}", "code_t": "int __cdecl write_numa_topology(int fd, perf_header *h, perf_evlist *evlist) {\n  u32 <span class=\"supfact\">nr</span>;\n  u32 <span class=\"supfact\">j</span>;\n  u32 <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">ret</span>;\n  char *<span class=\"supfact\">buf</span>;\n  size_t <span class=\"supfact\">len</span>;\n  cpu_map *<span class=\"supfact\">node_map</span>;\n  FILE *<span class=\"supfact\">fp</span>;\n  char *<span class=\"supfact\">c</span>;\n  unsigned __int64 <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v13</span> = __readfsqword(Number);\n  <span class=\"supfact\">buf</span> = Number L;\n  <span class=\"supfact\">len</span> = Number L;\n  <span class=\"supfact\">node_map</span> = Number L;\n  <span class=\"supfact\">ret</span> = Number;\n  <span class=\"supfact\">fp</span> = fopen64(String, String);\n  if (!<span class=\"supfact\">fp</span>)\n    return Number;\n  if (getline(&<span class=\"supfact\">buf</span>, &<span class=\"supfact\">len</span>, <span class=\"supfact\">fp</span>) >\n      Number) {\n    <span class=\"supfact\">c</span> = strchr(<span class=\"supfact\">buf</span>, Number);\n    if (<span class=\"supfact\">c</span>)\n      *<span class=\"supfact\">c</span> = Number;\n    <span class=\"supfact\">node_map</span> = (cpu_map *)cpu_map__new(<span class=\"supfact\">buf</span>);\n    if (<span class=\"supfact\">node_map</span>) {\n      <span class=\"supfact\">nr</span> = <span class=\"supfact\">node_map</span>-><span class=\"supfact\">nr</span>;\n      <span class=\"supfact\">ret</span> = do_write(fd, &<span class=\"supfact\">nr</span>, Number);\n      if (<span class=\"supfact\">ret</span> >= Number) {\n        for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">nr</span>;\n             ++<span class=\"supfact\">i</span>) {\n          <span class=\"supfact\">j</span> =\n              <span class=\"supfact\">node_map</span>[<span class=\"supfact\">i</span> + Number]\n                  .<span class=\"supfact\">nr</span>;\n          <span class=\"supfact\">ret</span> = do_write(fd, &<span class=\"supfact\">j</span>, Number);\n          if (<span class=\"supfact\">ret</span> < Number)\n            break;\n          <span class=\"supfact\">ret</span> = write_topo_node(fd, <span class=\"supfact\">i</span>);\n          if (<span class=\"supfact\">ret</span> < Number)\n            break;\n        }\n      }\n    }\n  }\n  free(<span class=\"supfact\">buf</span>);\n  fclose(<span class=\"supfact\">fp</span>);\n  free(<span class=\"supfact\">node_map</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v11", "type": "unsigned __int64", "ref_name": "v13", "ref_type": "unsigned __int64"}, {"name": "v10", "type": "char *", "ref_name": "c", "ref_type": "char *"}, {"name": "stream", "type": "FILE *", "ref_name": "fp", "ref_type": "FILE *"}, {"name": "ptr", "type": "cpu_map *", "ref_name": "node_map", "ref_type": "cpu_map *"}, {"name": "n", "type": "size_t", "ref_name": "len", "ref_type": "size_t"}, {"name": "lineptr", "type": "char *", "ref_name": "buf", "ref_type": "char *"}, {"name": "v5", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "i", "type": "u32", "ref_name": "i", "ref_type": "u32"}, {"name": "v3", "type": "u32", "ref_name": "j", "ref_type": "u32"}, {"name": "v2", "type": "u32", "ref_name": "nr", "ref_type": "u32"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "rawmain", "repo_name": "AMOI-L861-Kernel-LOS", "path": "rawmain/AMOI-L861-Kernel-LOS/448a35bc5ce5b1780c5f5cf131bc1a10773906a2a6605c8e6a8649fa6af56660", "path_in_repo": "rawmain/AMOI-L861-Kernel-LOS/tools/perf/util/dwarf-aux.o", "objdump": "00000000000013d4 <die_find_variable_at>:\n    13d4:\t55                   \tpush   %rbp\n    13d5:\t48 89 e5             \tmov    %rsp,%rbp\n    13d8:\t48 83 ec 40          \tsub    $0x40,%rsp\n    13dc:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    13e0:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    13e4:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    13e8:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n    13ec:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    13f3:\t00 00 \n    13f5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    13f9:\t31 c0                \txor    %eax,%eax\n    13fb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    13ff:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1403:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1407:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    140b:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n    140f:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    1413:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1417:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    141c:\t48 89 c7             \tmov    %rax,%rdi\n    141f:\te8 00 00 00 00       \tcallq  1424 <die_find_variable_at+0x50>\n    1424:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n    1428:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n    142f:\t00 00 \n    1431:\t74 05                \tje     1438 <die_find_variable_at+0x64>\n    1433:\te8 00 00 00 00       \tcallq  1438 <die_find_variable_at+0x64>\n    1438:\tc9                   \tleaveq \n    1439:\tc3                   \tretq   ", "code_s": "Dwarf_Die *__fastcall die_find_variable_at(struct Dwarf_Die_s *a1, __int64 a2,\n                                           __int64 a3, Dwarf_Die *a4) {\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  <span class=\"supfact\">v5</span>[Number] = __readfsqword(Number);\n  <span class=\"supfact\">v5</span>[Number] = a2;\n  <span class=\"supfact\">v5</span>[Number] = a3;\n  return die_find_child(\n      a1, (__int64(__fastcall *)(Dwarf_Die *, __int64))_die_find_variable_cb,\n      (__int64)<span class=\"supfact\">v5</span>, a4);\n}", "code_t": "Dwarf_Die *__cdecl die_find_variable_at(Dwarf_Die *sp_die, const char *name,\n                                        Dwarf_Addr addr, Dwarf_Die *die_mem) {\n  __find_variable_param <span class=\"supfact\">fvp</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  <span class=\"supfact\">fvp</span>.name = name;\n  <span class=\"supfact\">fvp</span>.addr = addr;\n  return die_find_child(sp_die,\n                        (int (*)(Dwarf_Die *, void *))_die_find_variable_cb,\n                        &<span class=\"supfact\">fvp</span>, die_mem);\n}", "var": [{"name": "v5", "type": "struct __find_variable_param { const char * name; Dwarf_Addr addr; }", "ref_name": "fvp", "ref_type": "struct __find_variable_param { const char * name; Dwarf_Addr addr; }"}], "has_struc": true, "body_in_train": true}, {"repo_owner": "holyangel", "repo_name": "Shamu", "path": "holyangel/Shamu/f641a05a2ff584ffbf158532fa8000e3ec47038589a4175c0791947156d79e32", "path_in_repo": "holyangel/Shamu//scripts/kconfig/conf", "objdump": "000000000040947c <xmalloc>:\n  40947c:\t48 83 ec 28          \tsub    $0x28,%rsp\n  409480:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n  409485:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  40948a:\t48 89 c7             \tmov    %rax,%rdi\n  40948d:\te8 8e 8e ff ff       \tcallq  402320 <malloc@plt>\n  409492:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n  409497:\t48 83 7c 24 18 00    \tcmpq   $0x0,0x18(%rsp)\n  40949d:\t74 07                \tje     4094a6 <xmalloc+0x2a>\n  40949f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  4094a4:\teb 28                \tjmp    4094ce <xmalloc+0x52>\n  4094a6:\t48 8b 05 93 52 01 00 \tmov    0x15293(%rip),%rax        # 41e740 <stderr@@GLIBC_2.2.5>\n  4094ad:\t48 89 c1             \tmov    %rax,%rcx\n  4094b0:\tba 0f 00 00 00       \tmov    $0xf,%edx\n  4094b5:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4094ba:\tbf e9 8d 41 00       \tmov    $0x418de9,%edi\n  4094bf:\te8 6c 8f ff ff       \tcallq  402430 <fwrite@plt>\n  4094c4:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4094c9:\te8 52 8f ff ff       \tcallq  402420 <exit@plt>\n  4094ce:\t48 83 c4 28          \tadd    $0x28,%rsp\n  4094d2:\tc3                   \tretq   ", "code_s": "void *__fastcall xmalloc(size_t a1) {\n  void *<span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = malloc(a1);\n  if (!<span class=\"supfact\">v2</span>) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "void *__cdecl xmalloc(size_t size) {\n  void *<span class=\"supfact\">p</span>;\n  <span class=\"supfact\">p</span> = malloc(size);\n  if (!<span class=\"supfact\">p</span>) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  return <span class=\"supfact\">p</span>;\n}", "var": [{"name": "v2", "type": "void *", "ref_name": "p", "ref_type": "void *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "Rodderik", "repo_name": "android_kernel_epic4g_gb", "path": "Rodderik/android_kernel_epic4g_gb/c864e238c27f3adff2e4b66777cfdae5566eaf534385518bdbe5aab2f26c64cb", "path_in_repo": "Rodderik/android_kernel_epic4g_gb/kernel/tools/perf/util/trace-event-parse.o", "objdump": "00000000000015dd <read_token>:\n    15dd:\t55                   \tpush   %rbp\n    15de:\t48 89 e5             \tmov    %rsp,%rbp\n    15e1:\t48 83 ec 20          \tsub    $0x20,%rsp\n    15e5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    15e9:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    15f0:\t00 00 \n    15f2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    15f6:\t31 c0                \txor    %eax,%eax\n    15f8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    15fc:\t48 89 c7             \tmov    %rax,%rdi\n    15ff:\te8 a4 f9 ff ff       \tcallq  fa8 <__read_token>\n    1604:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    1607:\t83 7d f4 02          \tcmpl   $0x2,-0xc(%rbp)\n    160b:\t74 14                \tje     1621 <read_token+0x44>\n    160d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    1610:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    1614:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n    161b:\t00 00 \n    161d:\t74 18                \tje     1637 <read_token+0x5a>\n    161f:\teb 11                \tjmp    1632 <read_token+0x55>\n    1621:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1625:\t48 8b 00             \tmov    (%rax),%rax\n    1628:\t48 89 c7             \tmov    %rax,%rdi\n    162b:\te8 68 ff ff ff       \tcallq  1598 <free_token>\n    1630:\teb c6                \tjmp    15f8 <read_token+0x1b>\n    1632:\te8 00 00 00 00       \tcallq  1637 <read_token+0x5a>\n    1637:\tc9                   \tleaveq \n    1638:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_token(void **a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  while (Number) {\n    <span class=\"supfact\">v2</span> = _read_token(a1);\n    if (<span class=\"supfact\">v2</span> != Number)\n      break;\n    free_token(*a1);\n  }\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "event_type __cdecl read_token(char **tok) {\n  event_type <span class=\"supfact\">type</span>;\n  while (Number) {\n    <span class=\"supfact\">type</span> = _read_token(tok);\n    if (<span class=\"supfact\">type</span> != EVENT_SPACE)\n      break;\n    free_token(*tok);\n  }\n  return <span class=\"supfact\">type</span>;\n}", "var": [{"name": "v2", "type": "event_type", "ref_name": "type", "ref_type": "event_type"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "dkrand", "repo_name": "qpage", "path": "dkrand/qpage/9a0fc5a93f5cc3abdbdffb06d5c5674bae307f4e4f2dd4f3de8277b44506570e", "path_in_repo": "dkrand/qpage//qpage", "objdump": "000000000040fd8c <parseaddr>:\n  40fd8c:\t55                   \tpush   %rbp\n  40fd8d:\t48 89 e5             \tmov    %rsp,%rbp\n  40fd90:\t48 83 ec 40          \tsub    $0x40,%rsp\n  40fd94:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  40fd98:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40fd9c:\t48 89 c7             \tmov    %rax,%rdi\n  40fd9f:\te8 4c 34 ff ff       \tcallq  4031f0 <strlen@plt>\n  40fda4:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  40fda7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  40fdaa:\t83 c0 01             \tadd    $0x1,%eax\n  40fdad:\t48 98                \tcltq   \n  40fdaf:\t48 89 c7             \tmov    %rax,%rdi\n  40fdb2:\te8 99 36 ff ff       \tcallq  403450 <malloc@plt>\n  40fdb7:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  40fdbb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40fdbf:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40fdc3:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n  40fdca:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  40fdd1:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  40fdd8:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  40fddf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40fde3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40fde7:\te9 25 01 00 00       \tjmpq   40ff11 <parseaddr+0x185>\n  40fdec:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40fdf0:\t0f b6 00             \tmovzbl (%rax),%eax\n  40fdf3:\t0f be c0             \tmovsbl %al,%eax\n  40fdf6:\t83 f8 5c             \tcmp    $0x5c,%eax\n  40fdf9:\t74 3c                \tje     40fe37 <parseaddr+0xab>\n  40fdfb:\t83 f8 5c             \tcmp    $0x5c,%eax\n  40fdfe:\t0f 8f ea 00 00 00    \tjg     40feee <parseaddr+0x162>\n  40fe04:\t83 f8 3e             \tcmp    $0x3e,%eax\n  40fe07:\t0f 84 c5 00 00 00    \tje     40fed2 <parseaddr+0x146>\n  40fe0d:\t83 f8 3e             \tcmp    $0x3e,%eax\n  40fe10:\t0f 8f d8 00 00 00    \tjg     40feee <parseaddr+0x162>\n  40fe16:\t83 f8 3c             \tcmp    $0x3c,%eax\n  40fe19:\t0f 84 97 00 00 00    \tje     40feb6 <parseaddr+0x12a>\n  40fe1f:\t83 f8 3c             \tcmp    $0x3c,%eax\n  40fe22:\t0f 8f c6 00 00 00    \tjg     40feee <parseaddr+0x162>\n  40fe28:\t83 f8 22             \tcmp    $0x22,%eax\n  40fe2b:\t74 14                \tje     40fe41 <parseaddr+0xb5>\n  40fe2d:\t83 f8 28             \tcmp    $0x28,%eax\n  40fe30:\t74 21                \tje     40fe53 <parseaddr+0xc7>\n  40fe32:\te9 b7 00 00 00       \tjmpq   40feee <parseaddr+0x162>\n  40fe37:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  40fe3c:\te9 ad 00 00 00       \tjmpq   40feee <parseaddr+0x162>\n  40fe41:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  40fe45:\t0f 94 c0             \tsete   %al\n  40fe48:\t0f b6 c0             \tmovzbl %al,%eax\n  40fe4b:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  40fe4e:\te9 9b 00 00 00       \tjmpq   40feee <parseaddr+0x162>\n  40fe53:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  40fe57:\t0f 85 8a 00 00 00    \tjne    40fee7 <parseaddr+0x15b>\n  40fe5d:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  40fe61:\teb 2c                \tjmp    40fe8f <parseaddr+0x103>\n  40fe63:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40fe67:\t0f b6 00             \tmovzbl (%rax),%eax\n  40fe6a:\t3c 28                \tcmp    $0x28,%al\n  40fe6c:\t75 0b                \tjne    40fe79 <parseaddr+0xed>\n  40fe6e:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  40fe72:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  40fe77:\teb 16                \tjmp    40fe8f <parseaddr+0x103>\n  40fe79:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40fe7d:\t0f b6 00             \tmovzbl (%rax),%eax\n  40fe80:\t3c 29                \tcmp    $0x29,%al\n  40fe82:\t75 06                \tjne    40fe8a <parseaddr+0xfe>\n  40fe84:\t83 6d ec 01          \tsubl   $0x1,-0x14(%rbp)\n  40fe88:\teb 05                \tjmp    40fe8f <parseaddr+0x103>\n  40fe8a:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  40fe8f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40fe93:\t0f b6 00             \tmovzbl (%rax),%eax\n  40fe96:\t84 c0                \ttest   %al,%al\n  40fe98:\t74 06                \tje     40fea0 <parseaddr+0x114>\n  40fe9a:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  40fe9e:\t75 c3                \tjne    40fe63 <parseaddr+0xd7>\n  40fea0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40fea4:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  40fea8:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n  40feac:\tc6 00 20             \tmovb   $0x20,(%rax)\n  40feaf:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  40feb4:\teb 5b                \tjmp    40ff11 <parseaddr+0x185>\n  40feb6:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  40feba:\t75 2e                \tjne    40feea <parseaddr+0x15e>\n  40febc:\tc7 45 e4 01 00 00 00 \tmovl   $0x1,-0x1c(%rbp)\n  40fec3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40fec7:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40fecb:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  40fed0:\teb 3f                \tjmp    40ff11 <parseaddr+0x185>\n  40fed2:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  40fed6:\t75 15                \tjne    40feed <parseaddr+0x161>\n  40fed8:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  40fedc:\t74 0f                \tje     40feed <parseaddr+0x161>\n  40fede:\tc7 45 e0 01 00 00 00 \tmovl   $0x1,-0x20(%rbp)\n  40fee5:\teb 06                \tjmp    40feed <parseaddr+0x161>\n  40fee7:\t90                   \tnop\n  40fee8:\teb 04                \tjmp    40feee <parseaddr+0x162>\n  40feea:\t90                   \tnop\n  40feeb:\teb 01                \tjmp    40feee <parseaddr+0x162>\n  40feed:\t90                   \tnop\n  40feee:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n  40fef2:\t75 2e                \tjne    40ff22 <parseaddr+0x196>\n  40fef4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  40fef8:\t48 8d 42 01          \tlea    0x1(%rdx),%rax\n  40fefc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40ff00:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ff04:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n  40ff08:\t48 89 4d f0          \tmov    %rcx,-0x10(%rbp)\n  40ff0c:\t0f b6 12             \tmovzbl (%rdx),%edx\n  40ff0f:\t88 10                \tmov    %dl,(%rax)\n  40ff11:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40ff15:\t0f b6 00             \tmovzbl (%rax),%eax\n  40ff18:\t84 c0                \ttest   %al,%al\n  40ff1a:\t0f 85 cc fe ff ff    \tjne    40fdec <parseaddr+0x60>\n  40ff20:\teb 01                \tjmp    40ff23 <parseaddr+0x197>\n  40ff22:\t90                   \tnop\n  40ff23:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ff27:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n  40ff2b:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n  40ff2f:\tc6 00 00             \tmovb   $0x0,(%rax)\n  40ff32:\teb 0f                \tjmp    40ff43 <parseaddr+0x1b7>\n  40ff34:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ff38:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n  40ff3c:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n  40ff40:\tc6 00 00             \tmovb   $0x0,(%rax)\n  40ff43:\te8 48 38 ff ff       \tcallq  403790 <__ctype_b_loc@plt>\n  40ff48:\t48 8b 10             \tmov    (%rax),%rdx\n  40ff4b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ff4f:\t0f b6 00             \tmovzbl (%rax),%eax\n  40ff52:\t48 0f be c0          \tmovsbq %al,%rax\n  40ff56:\t48 01 c0             \tadd    %rax,%rax\n  40ff59:\t48 01 d0             \tadd    %rdx,%rax\n  40ff5c:\t0f b7 00             \tmovzwl (%rax),%eax\n  40ff5f:\t0f b7 c0             \tmovzwl %ax,%eax\n  40ff62:\t25 00 20 00 00       \tand    $0x2000,%eax\n  40ff67:\t85 c0                \ttest   %eax,%eax\n  40ff69:\t74 0a                \tje     40ff75 <parseaddr+0x1e9>\n  40ff6b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ff6f:\t48 3b 45 d0          \tcmp    -0x30(%rbp),%rax\n  40ff73:\t73 bf                \tjae    40ff34 <parseaddr+0x1a8>\n  40ff75:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40ff79:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40ff7d:\teb 05                \tjmp    40ff84 <parseaddr+0x1f8>\n  40ff7f:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  40ff84:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40ff88:\t0f b6 00             \tmovzbl (%rax),%eax\n  40ff8b:\t84 c0                \ttest   %al,%al\n  40ff8d:\t74 28                \tje     40ffb7 <parseaddr+0x22b>\n  40ff8f:\te8 fc 37 ff ff       \tcallq  403790 <__ctype_b_loc@plt>\n  40ff94:\t48 8b 10             \tmov    (%rax),%rdx\n  40ff97:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40ff9b:\t0f b6 00             \tmovzbl (%rax),%eax\n  40ff9e:\t48 0f be c0          \tmovsbq %al,%rax\n  40ffa2:\t48 01 c0             \tadd    %rax,%rax\n  40ffa5:\t48 01 d0             \tadd    %rdx,%rax\n  40ffa8:\t0f b7 00             \tmovzwl (%rax),%eax\n  40ffab:\t0f b7 c0             \tmovzwl %ax,%eax\n  40ffae:\t25 00 20 00 00       \tand    $0x2000,%eax\n  40ffb3:\t85 c0                \ttest   %eax,%eax\n  40ffb5:\t75 c8                \tjne    40ff7f <parseaddr+0x1f3>\n  40ffb7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40ffbb:\t48 3b 45 f8          \tcmp    -0x8(%rbp),%rax\n  40ffbf:\t74 13                \tje     40ffd4 <parseaddr+0x248>\n  40ffc1:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  40ffc5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40ffc9:\t48 89 d6             \tmov    %rdx,%rsi\n  40ffcc:\t48 89 c7             \tmov    %rax,%rdi\n  40ffcf:\te8 1c 31 ff ff       \tcallq  4030f0 <strcpy@plt>\n  40ffd4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40ffd8:\tc9                   \tleaveq \n  40ffd9:\tc3                   \tretq   ", "code_s": "char *__fastcall parseaddr(const char *a1) {\n  int v1;\n  char *v2;\n  char *v3;\n  char *v4;\n  char *v5;\n  char *v6;\n  char *<span class=\"supfact\">dest</span>;\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  _BOOL4 <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  char *v14;\n  char *v15;\n  char *src;\n  char *srca;\n  <span class=\"supfact\">v9</span> = strlen(a1);\n  <span class=\"supfact\">dest</span> = (char *)malloc(<span class=\"supfact\">v9</span> + Number);\n  v14 = <span class=\"supfact\">dest</span>;\n  <span class=\"supfact\">v10</span> = Number;\n  <span class=\"supfact\">v12</span> = Number;\n  <span class=\"supfact\">v13</span> = Number;\n  <span class=\"supfact\">v11</span> = Number;\n  src = (char *)a1;\n  while (*src) {\n    v1 = *src;\n    if (v1 == Number) {\n      ++src;\n      goto LABEL_28;\n    }\n    if (v1 > Number)\n      goto LABEL_28;\n    if (v1 == Number) {\n      if (!<span class=\"supfact\">v12</span> && <span class=\"supfact\">v11</span>)\n        <span class=\"supfact\">v10</span> = Number;\n      goto LABEL_28;\n    }\n    if (v1 > Number)\n      goto LABEL_28;\n    if (v1 == Number) {\n      if (<span class=\"supfact\">v12</span>)\n        goto LABEL_28;\n      <span class=\"supfact\">v11</span> = Number;\n      v14 = <span class=\"supfact\">dest</span>;\n      ++src;\n    } else {\n      if (v1 > Number)\n        goto LABEL_28;\n      if (v1 == Number) {\n        <span class=\"supfact\">v12</span> = !<span class=\"supfact\">v12</span>;\n        goto LABEL_28;\n      }\n      if (v1 != Number || <span class=\"supfact\">v12</span>) {\n      LABEL_28:\n        if (<span class=\"supfact\">v10</span>)\n          break;\n        v3 = src++;\n        v4 = v14++;\n        *v4 = *v3;\n      } else {\n        ++<span class=\"supfact\">v13</span>;\n        while (*src && <span class=\"supfact\">v13</span>) {\n          if (*src == Number) {\n            ++<span class=\"supfact\">v13</span>;\n            ++src;\n          } else if (*src == Number) {\n            --<span class=\"supfact\">v13</span>;\n          } else {\n            ++src;\n          }\n        }\n        v2 = v14++;\n        *v2 = Number;\n        ++src;\n      }\n    }\n  }\n  v5 = v14;\n  v15 = v14 - Number;\n  *v5 = Number;\n  while (((*__ctype_b_loc())[*v15] & Number) != Number &&\n         v15 >= <span class=\"supfact\">dest</span>) {\n    v6 = v15--;\n    *v6 = Number;\n  }\n  for (srca = <span class=\"supfact\">dest</span>;\n       *srca && ((*__ctype_b_loc())[*srca] & Number) != Number; ++srca)\n    ;\n  if (<span class=\"supfact\">dest</span> != srca)\n    strcpy(<span class=\"supfact\">dest</span>, srca);\n  return <span class=\"supfact\">dest</span>;\n}", "code_t": "char *__cdecl parseaddr(char *line) {\n  int v1;\n  char *v2;\n  char *v3;\n  char *v4;\n  char *v5;\n  char *v6;\n  char *<span class=\"supfact\">buff</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">done</span>;\n  int <span class=\"supfact\">bracketaddr</span>;\n  int <span class=\"supfact\">inquote</span>;\n  int <span class=\"supfact\">incomment</span>;\n  char *tmp;\n  char *tmpa;\n  char *ptr;\n  char *ptra;\n  <span class=\"supfact\">i</span> = strlen(line);\n  <span class=\"supfact\">buff</span> = (char *)malloc(<span class=\"supfact\">i</span> + Number);\n  tmp = <span class=\"supfact\">buff</span>;\n  <span class=\"supfact\">done</span> = Number;\n  <span class=\"supfact\">inquote</span> = Number;\n  <span class=\"supfact\">incomment</span> = Number;\n  <span class=\"supfact\">bracketaddr</span> = Number;\n  ptr = line;\n  while (*ptr) {\n    v1 = *ptr;\n    if (v1 == Number) {\n      ++ptr;\n      goto LABEL_28;\n    }\n    if (v1 > Number)\n      goto LABEL_28;\n    if (v1 == Number) {\n      if (!<span class=\"supfact\">inquote</span> && <span class=\"supfact\">bracketaddr</span>)\n        <span class=\"supfact\">done</span> = Number;\n      goto LABEL_28;\n    }\n    if (v1 > Number)\n      goto LABEL_28;\n    if (v1 == Number) {\n      if (<span class=\"supfact\">inquote</span>)\n        goto LABEL_28;\n      <span class=\"supfact\">bracketaddr</span> = Number;\n      tmp = <span class=\"supfact\">buff</span>;\n      ++ptr;\n    } else {\n      if (v1 > Number)\n        goto LABEL_28;\n      if (v1 == Number) {\n        <span class=\"supfact\">inquote</span> = <span class=\"supfact\">inquote</span> == Number;\n        goto LABEL_28;\n      }\n      if (v1 != Number || <span class=\"supfact\">inquote</span>) {\n      LABEL_28:\n        if (<span class=\"supfact\">done</span>)\n          break;\n        v3 = ptr++;\n        v4 = tmp++;\n        *v4 = *v3;\n      } else {\n        ++<span class=\"supfact\">incomment</span>;\n        while (*ptr && <span class=\"supfact\">incomment</span>) {\n          if (*ptr == Number) {\n            ++<span class=\"supfact\">incomment</span>;\n            ++ptr;\n          } else if (*ptr == Number) {\n            --<span class=\"supfact\">incomment</span>;\n          } else {\n            ++ptr;\n          }\n        }\n        v2 = tmp++;\n        *v2 = Number;\n        ++ptr;\n      }\n    }\n  }\n  v5 = tmp;\n  tmpa = tmp - Number;\n  *v5 = Number;\n  while (((*__ctype_b_loc())[*tmpa] & Number) != Number &&\n         tmpa >= <span class=\"supfact\">buff</span>) {\n    v6 = tmpa--;\n    *v6 = Number;\n  }\n  for (ptra = <span class=\"supfact\">buff</span>;\n       *ptra && ((*__ctype_b_loc())[*ptra] & Number) != Number; ++ptra)\n    ;\n  if (<span class=\"supfact\">buff</span> != ptra)\n    strcpy(<span class=\"supfact\">buff</span>, ptra);\n  return <span class=\"supfact\">buff</span>;\n}", "var": [{"name": "v13", "type": "int", "ref_name": "incomment", "ref_type": "int"}, {"name": "v12", "type": "int", "ref_name": "inquote", "ref_type": "int"}, {"name": "v11", "type": "int", "ref_name": "bracketaddr", "ref_type": "int"}, {"name": "v10", "type": "int", "ref_name": "done", "ref_type": "int"}, {"name": "v9", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "dest", "type": "char *", "ref_name": "buff", "ref_type": "char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "Crashbash-Kun", "repo_name": "dwm", "path": "Crashbash-Kun/dwm/782ad0e55fd42b654042be60fa58163e1ce2c426633828295992291cc1b40362", "path_in_repo": "Crashbash-Kun/dwm//dwm.o", "objdump": "0000000000006a01 <updatewmhints>:\n    6a01:\t55                   \tpush   %rbp\n    6a02:\t48 89 e5             \tmov    %rsp,%rbp\n    6a05:\t48 83 ec 20          \tsub    $0x20,%rsp\n    6a09:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    6a0d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6a11:\t48 8b 90 88 01 00 00 \tmov    0x188(%rax),%rdx\n    6a18:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6a1f <updatewmhints+0x1e>\n    6a1f:\t48 89 d6             \tmov    %rdx,%rsi\n    6a22:\t48 89 c7             \tmov    %rax,%rdi\n    6a25:\te8 00 00 00 00       \tcallq  6a2a <updatewmhints+0x29>\n    6a2a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    6a2e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    6a33:\t0f 84 b7 00 00 00    \tje     6af0 <updatewmhints+0xef>\n    6a39:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6a40 <updatewmhints+0x3f>\n    6a40:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n    6a44:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    6a48:\t75 48                \tjne    6a92 <updatewmhints+0x91>\n    6a4a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6a4e:\t48 8b 00             \tmov    (%rax),%rax\n    6a51:\t25 00 01 00 00       \tand    $0x100,%eax\n    6a56:\t48 85 c0             \ttest   %rax,%rax\n    6a59:\t74 37                \tje     6a92 <updatewmhints+0x91>\n    6a5b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6a5f:\t48 8b 00             \tmov    (%rax),%rax\n    6a62:\t80 e4 fe             \tand    $0xfe,%ah\n    6a65:\t48 89 c2             \tmov    %rax,%rdx\n    6a68:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6a6c:\t48 89 10             \tmov    %rdx,(%rax)\n    6a6f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6a73:\t48 8b 88 88 01 00 00 \tmov    0x188(%rax),%rcx\n    6a7a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6a81 <updatewmhints+0x80>\n    6a81:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    6a85:\t48 89 ce             \tmov    %rcx,%rsi\n    6a88:\t48 89 c7             \tmov    %rax,%rdi\n    6a8b:\te8 00 00 00 00       \tcallq  6a90 <updatewmhints+0x8f>\n    6a90:\teb 1a                \tjmp    6aac <updatewmhints+0xab>\n    6a92:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6a96:\t48 8b 00             \tmov    (%rax),%rax\n    6a99:\t48 c1 f8 08          \tsar    $0x8,%rax\n    6a9d:\t83 e0 01             \tand    $0x1,%eax\n    6aa0:\t89 c2                \tmov    %eax,%edx\n    6aa2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6aa6:\t89 90 5c 01 00 00    \tmov    %edx,0x15c(%rax)\n    6aac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6ab0:\t48 8b 00             \tmov    (%rax),%rax\n    6ab3:\t83 e0 01             \tand    $0x1,%eax\n    6ab6:\t48 85 c0             \ttest   %rax,%rax\n    6ab9:\t74 1b                \tje     6ad6 <updatewmhints+0xd5>\n    6abb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6abf:\t8b 40 08             \tmov    0x8(%rax),%eax\n    6ac2:\t85 c0                \ttest   %eax,%eax\n    6ac4:\t0f 94 c0             \tsete   %al\n    6ac7:\t0f b6 d0             \tmovzbl %al,%edx\n    6aca:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6ace:\t89 90 60 01 00 00    \tmov    %edx,0x160(%rax)\n    6ad4:\teb 0e                \tjmp    6ae4 <updatewmhints+0xe3>\n    6ad6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6ada:\tc7 80 60 01 00 00 00 \tmovl   $0x0,0x160(%rax)\n    6ae1:\t00 00 00 \n    6ae4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6ae8:\t48 89 c7             \tmov    %rax,%rdi\n    6aeb:\te8 00 00 00 00       \tcallq  6af0 <updatewmhints+0xef>\n    6af0:\t90                   \tnop\n    6af1:\tc9                   \tleaveq \n    6af2:\tc3                   \tretq   ", "code_s": "int __fastcall updatewmhints(__int64 a1) {\n  XWMHints *v1;\n  __int64 v2;\n  XWMHints *<span class=\"supfact\">v4</span>;\n  v1 = XGetWMHints(dpy, *(_QWORD *)(a1 + Number));\n  <span class=\"supfact\">v4</span> = v1;\n  if (v1) {\n    if (a1 == *((_QWORD *)selmon + Number) && (v1->flags & Number) != Number) {\n      v2 = v1->flags;\n      BYTE1(v2) = BYTE1(<span class=\"supfact\">v4</span>->flags) & Number;\n      <span class=\"supfact\">v4</span>->flags = v2;\n      XSetWMHints(dpy, *(_QWORD *)(a1 + Number), <span class=\"supfact\">v4</span>);\n    } else {\n      *(_DWORD *)(a1 + Number) = (v1->flags >> Number) & Number;\n    }\n    if ((<span class=\"supfact\">v4</span>->flags & Number) != Number)\n      *(_DWORD *)(a1 + Number) = <span class=\"supfact\">v4</span>->input == Number;\n    else\n      *(_DWORD *)(a1 + Number) = Number;\n    LODWORD(v1) = XFree(<span class=\"supfact\">v4</span>);\n  }\n  return (int)v1;\n}", "code_t": "void __cdecl updatewmhints(Client_0 *c) {\n  __int64 v1;\n  XWMHints *<span class=\"supfact\">wmh</span>;\n  <span class=\"supfact\">wmh</span> = XGetWMHints(dpy, c->win);\n  if (<span class=\"supfact\">wmh</span>) {\n    if (c == selmon->sel && (<span class=\"supfact\">wmh</span>->flags & Number) != Number) {\n      v1 = <span class=\"supfact\">wmh</span>->flags;\n      BYTE1(v1) = BYTE1(<span class=\"supfact\">wmh</span>->flags) & Number;\n      <span class=\"supfact\">wmh</span>->flags = v1;\n      XSetWMHints(dpy, c->win, <span class=\"supfact\">wmh</span>);\n    } else {\n      c->isurgent = (<span class=\"supfact\">wmh</span>->flags >> Number) & Number;\n    }\n    if ((<span class=\"supfact\">wmh</span>->flags & Number) != Number)\n      c->neverfocus = <span class=\"supfact\">wmh</span>->input == Number;\n    else\n      c->neverfocus = Number;\n    XFree(<span class=\"supfact\">wmh</span>);\n  }\n}", "var": [{"name": "v4", "type": "XWMHints *", "ref_name": "wmh", "ref_type": "XWMHints *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "iortcw", "repo_name": "iortcw", "path": "iortcw/iortcw/c4107f3ce74eb637c91bd32d8760a01bf3efe6e5ea64974c39225bd5ee18b5b5", "path_in_repo": "iortcw/iortcw/MP/build/release-linux-x86_64/main/game/g_weapon.o", "objdump": "00000000000075b7 <AddLean>:\n    75b7:\t55                   \tpush   %rbp\n    75b8:\t48 89 e5             \tmov    %rsp,%rbp\n    75bb:\t48 83 ec 20          \tsub    $0x20,%rsp\n    75bf:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    75c3:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    75c7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    75cb:\t48 8b 80 b0 02 00 00 \tmov    0x2b0(%rax),%rax\n    75d2:\t48 85 c0             \ttest   %rax,%rax\n    75d5:\t0f 84 e6 00 00 00    \tje     76c1 <AddLean+0x10a>\n    75db:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    75df:\t48 8b 80 b0 02 00 00 \tmov    0x2b0(%rax),%rax\n    75e6:\tf3 0f 10 40 3c       \tmovss  0x3c(%rax),%xmm0\n    75eb:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    75ef:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    75f2:\t7a 0e                \tjp     7602 <AddLean+0x4b>\n    75f4:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    75f8:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    75fb:\t75 05                \tjne    7602 <AddLean+0x4b>\n    75fd:\te9 bf 00 00 00       \tjmpq   76c1 <AddLean+0x10a>\n    7602:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7606:\t48 8b 80 b0 02 00 00 \tmov    0x2b0(%rax),%rax\n    760d:\t48 8d b8 b0 00 00 00 \tlea    0xb0(%rax),%rdi\n    7614:\t48 8d 45 f4          \tlea    -0xc(%rbp),%rax\n    7618:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    761d:\t48 89 c2             \tmov    %rax,%rdx\n    7620:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    7625:\te8 00 00 00 00       \tcallq  762a <AddLean+0x73>\n    762a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    762e:\tf3 0f 10 08          \tmovss  (%rax),%xmm1\n    7632:\tf3 0f 10 55 f4       \tmovss  -0xc(%rbp),%xmm2\n    7637:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    763b:\t48 8b 80 b0 02 00 00 \tmov    0x2b0(%rax),%rax\n    7642:\tf3 0f 10 40 3c       \tmovss  0x3c(%rax),%xmm0\n    7647:\tf3 0f 59 c2          \tmulss  %xmm2,%xmm0\n    764b:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n    764f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    7653:\tf3 0f 11 00          \tmovss  %xmm0,(%rax)\n    7657:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    765b:\t48 83 c0 04          \tadd    $0x4,%rax\n    765f:\tf3 0f 10 08          \tmovss  (%rax),%xmm1\n    7663:\tf3 0f 10 55 f8       \tmovss  -0x8(%rbp),%xmm2\n    7668:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    766c:\t48 8b 80 b0 02 00 00 \tmov    0x2b0(%rax),%rax\n    7673:\tf3 0f 10 40 3c       \tmovss  0x3c(%rax),%xmm0\n    7678:\tf3 0f 59 c2          \tmulss  %xmm2,%xmm0\n    767c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    7680:\t48 83 c0 04          \tadd    $0x4,%rax\n    7684:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n    7688:\tf3 0f 11 00          \tmovss  %xmm0,(%rax)\n    768c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    7690:\t48 83 c0 08          \tadd    $0x8,%rax\n    7694:\tf3 0f 10 08          \tmovss  (%rax),%xmm1\n    7698:\tf3 0f 10 55 fc       \tmovss  -0x4(%rbp),%xmm2\n    769d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    76a1:\t48 8b 80 b0 02 00 00 \tmov    0x2b0(%rax),%rax\n    76a8:\tf3 0f 10 40 3c       \tmovss  0x3c(%rax),%xmm0\n    76ad:\tf3 0f 59 c2          \tmulss  %xmm2,%xmm0\n    76b1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    76b5:\t48 83 c0 08          \tadd    $0x8,%rax\n    76b9:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n    76bd:\tf3 0f 11 00          \tmovss  %xmm0,(%rax)\n    76c1:\t90                   \tnop\n    76c2:\tc9                   \tleaveq \n    76c3:\tc3                   \tretq   ", "code_s": "float *__fastcall AddLean(__int64 a1, float *a2) {\n  float *result;\n  int <span class=\"supfact\">v3</span>[Number];\n  result = *(float **)(a1 + Number);\n  if (result) {\n    result = *(float **)(a1 + Number);\n    if (result[Number] != Number) {\n      AngleVectors(*(_QWORD *)(a1 + Number) + Number L, Number L,\n                   <span class=\"supfact\">v3</span>, Number L);\n      *a2 = (float)(*(float *)(*(_QWORD *)(a1 + Number) + Number L) *\n                    *(float *)<span class=\"supfact\">v3</span>) +\n            *a2;\n      a2[Number] = (float)(*(float *)(*(_QWORD *)(a1 + Number) + Number L) *\n                           *(float *)&<span class=\"supfact\">v3</span>[Number]) +\n                   a2[Number];\n      result = a2 + Number;\n      a2[Number] = (float)(*(float *)(*(_QWORD *)(a1 + Number) + Number L) *\n                           *(float *)&<span class=\"supfact\">v3</span>[Number]) +\n                   a2[Number];\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl AddLean(gentity_t *ent, vec_t *point) {\n  vec3_t <span class=\"supfact\">right</span>;\n  if (ent->client) {\n    if (ent->client->ps.leanf != Number) {\n      AngleVectors(ent->client->ps.viewangles, Number L, <span class=\"supfact\">right</span>,\n                   Number L);\n      *point = (float)(ent->client->ps.leanf * <span class=\"supfact\">right</span>[Number]) +\n               *point;\n      point[Number] =\n          (float)(ent->client->ps.leanf * <span class=\"supfact\">right</span>[Number]) +\n          point[Number];\n      point[Number] =\n          (float)(ent->client->ps.leanf * <span class=\"supfact\">right</span>[Number]) +\n          point[Number];\n    }\n  }\n}", "var": [{"name": "v3", "type": "vec_t[3]", "ref_name": "right", "ref_type": "vec_t[3]"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "vleet", "repo_name": "RomanNumeralKata", "path": "vleet/RomanNumeralKata/5c65339ea41e36216986d2a2e798e53ab257ed92fdd6a243c50e1bda299cb9b9", "path_in_repo": "vleet/RomanNumeralKata//output/testrunner", "objdump": "0000000000403216 <test_add_two_different_one_char_numbers_with_larger_number_on_left>:\n  403216:\t55                   \tpush   %rbp\n  403217:\t48 89 e5             \tmov    %rsp,%rbp\n  40321a:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40321e:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  403221:\tba 07 00 00 00       \tmov    $0x7,%edx\n  403226:\tbe 58 90 40 00       \tmov    $0x409058,%esi\n  40322b:\tbf 70 90 40 00       \tmov    $0x409070,%edi\n  403230:\te8 5b 20 00 00       \tcallq  405290 <tcase_fn_start>\n  403235:\t48 c7 45 f8 b3 90 40 \tmovq   $0x4090b3,-0x8(%rbp)\n  40323c:\t00 \n  40323d:\tbe b6 90 40 00       \tmov    $0x4090b6,%esi\n  403242:\tbf b8 90 40 00       \tmov    $0x4090b8,%edi\n  403247:\te8 f6 fd ff ff       \tcallq  403042 <add>\n  40324c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  403250:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  403254:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  403258:\t48 89 d6             \tmov    %rdx,%rsi\n  40325b:\t48 89 c7             \tmov    %rax,%rdi\n  40325e:\te8 7d ef ff ff       \tcallq  4021e0 <strcmp@plt>\n  403263:\t85 c0                \ttest   %eax,%eax\n  403265:\t75 11                \tjne    403278 <test_add_two_different_one_char_numbers_with_larger_number_on_left+0x62>\n  403267:\tbe 09 00 00 00       \tmov    $0x9,%esi\n  40326c:\tbf 58 90 40 00       \tmov    $0x409058,%edi\n  403271:\te8 4a 20 00 00       \tcallq  4052c0 <_mark_point>\n  403276:\teb 37                \tjmp    4032af <test_add_two_different_one_char_numbers_with_larger_number_on_left+0x99>\n  403278:\t6a 00                \tpushq  $0x0\n  40327a:\tff 75 f0             \tpushq  -0x10(%rbp)\n  40327d:\t68 35 91 40 00       \tpushq  $0x409135\n  403282:\tff 75 f8             \tpushq  -0x8(%rbp)\n  403285:\t41 b9 ba 90 40 00    \tmov    $0x4090ba,%r9d\n  40328b:\t41 b8 bf 90 40 00    \tmov    $0x4090bf,%r8d\n  403291:\tb9 d8 90 40 00       \tmov    $0x4090d8,%ecx\n  403296:\tba 08 91 40 00       \tmov    $0x409108,%edx\n  40329b:\tbe 09 00 00 00       \tmov    $0x9,%esi\n  4032a0:\tbf 58 90 40 00       \tmov    $0x409058,%edi\n  4032a5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4032aa:\te8 61 24 00 00       \tcallq  405710 <_ck_assert_failed>\n  4032af:\tc9                   \tleaveq \n  4032b0:\tc3                   \tretq   ", "code_s": "__int64 test_add_two_different_one_char_numbers_with_larger_number_on_left() {\n  char *<span class=\"supfact\">s1</span>;\n  tcase_fn_start(String, String, Number L);\n  <span class=\"supfact\">s1</span> = add(String, String);\n  if (strcmp(<span class=\"supfact\">s1</span>, String))\n    ck_assert_failed((unsigned int)String, Number, (unsigned int)String,\n                     (unsigned int)String, (unsigned int)String,\n                     (unsigned int)String, (char)String);\n  return mark_point(String, Number L);\n}", "code_t": "void __cdecl test_add_two_different_one_char_numbers_with_larger_number_on_left(\n    int _i) {\n  char *<span class=\"supfact\">_ck_y</span>;\n  tcase_fn_start(String, String, Number L);\n  <span class=\"supfact\">_ck_y</span> = add(String, String);\n  if (strcmp(<span class=\"supfact\">_ck_y</span>, String))\n    ck_assert_failed((unsigned int)String, Number, (unsigned int)String,\n                     (unsigned int)String, (unsigned int)String,\n                     (unsigned int)String, (char)String);\n  mark_point(String, Number L);\n}", "var": [{"name": "s1", "type": "const char *", "ref_name": "_ck_y", "ref_type": "char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "shishuo365", "repo_name": "ffmpeg-h265", "path": "shishuo365/ffmpeg-h265/e3255f1d393fd53b78613851bc67c058765843be83d4791c49d780433844ea67", "path_in_repo": "shishuo365/ffmpeg-h265//libavcodec/flashsv.o", "objdump": "0000000000000220 <init_get_bits>:\n     220:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n     225:\t48 89 74 24 e0       \tmov    %rsi,-0x20(%rsp)\n     22a:\t89 54 24 dc          \tmov    %edx,-0x24(%rsp)\n     22e:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n     235:\t00 \n     236:\t81 7c 24 dc fe fd ff \tcmpl   $0x7ffffdfe,-0x24(%rsp)\n     23d:\t7f \n     23e:\t7f 0f                \tjg     24f <init_get_bits+0x2f>\n     240:\t83 7c 24 dc 00       \tcmpl   $0x0,-0x24(%rsp)\n     245:\t78 08                \tjs     24f <init_get_bits+0x2f>\n     247:\t48 83 7c 24 e0 00    \tcmpq   $0x0,-0x20(%rsp)\n     24d:\t75 19                \tjne    268 <init_get_bits+0x48>\n     24f:\tc7 44 24 dc 00 00 00 \tmovl   $0x0,-0x24(%rsp)\n     256:\t00 \n     257:\t48 c7 44 24 e0 00 00 \tmovq   $0x0,-0x20(%rsp)\n     25e:\t00 00 \n     260:\tc7 44 24 fc b7 b1 bb \tmovl   $0xbebbb1b7,-0x4(%rsp)\n     267:\tbe \n     268:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n     26c:\t83 c0 07             \tadd    $0x7,%eax\n     26f:\tc1 f8 03             \tsar    $0x3,%eax\n     272:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n     276:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     27b:\t48 8b 54 24 e0       \tmov    -0x20(%rsp),%rdx\n     280:\t48 89 10             \tmov    %rdx,(%rax)\n     283:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     288:\t8b 54 24 dc          \tmov    -0x24(%rsp),%edx\n     28c:\t89 50 14             \tmov    %edx,0x14(%rax)\n     28f:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n     293:\t8d 50 08             \tlea    0x8(%rax),%edx\n     296:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     29b:\t89 50 18             \tmov    %edx,0x18(%rax)\n     29e:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n     2a2:\t48 63 d0             \tmovslq %eax,%rdx\n     2a5:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n     2aa:\t48 01 c2             \tadd    %rax,%rdx\n     2ad:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     2b2:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n     2b6:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     2bb:\tc7 40 10 00 00 00 00 \tmovl   $0x0,0x10(%rax)\n     2c2:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     2c6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall init_get_bits(__int64 a1, __int64 a2, int a3) {\n  int <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v5</span> = a2;\n  <span class=\"supfact\">v4</span> = a3;\n  <span class=\"supfact\">v6</span> = Number;\n  if (a3 > Number || a3 < Number || !a2) {\n    <span class=\"supfact\">v4</span> = Number;\n    <span class=\"supfact\">v5</span> = Number L;\n    <span class=\"supfact\">v6</span> = Number;\n  }\n  *(_QWORD *)a1 = <span class=\"supfact\">v5</span>;\n  *(_DWORD *)(a1 + Number) = <span class=\"supfact\">v4</span>;\n  *(_DWORD *)(a1 + Number) = <span class=\"supfact\">v4</span> + Number;\n  *(_QWORD *)(a1 + Number) =\n      <span class=\"supfact\">v5</span> + ((<span class=\"supfact\">v4</span> + Number) >> Number);\n  *(_DWORD *)(a1 + Number) = Number;\n  return <span class=\"supfact\">v6</span>;\n}", "code_t": "int __cdecl init_get_bits(GetBitContext_0 *s, const uint8_t *buffer,\n                          int bit_size) {\n  int <span class=\"supfact\">bit_sizea</span>;\n  const uint8_t *<span class=\"supfact\">buffera</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">buffera</span> = buffer;\n  <span class=\"supfact\">bit_sizea</span> = bit_size;\n  <span class=\"supfact\">ret</span> = Number;\n  if (bit_size > Number || bit_size < Number || !buffer) {\n    <span class=\"supfact\">bit_sizea</span> = Number;\n    <span class=\"supfact\">buffera</span> = Number L;\n    <span class=\"supfact\">ret</span> = Number;\n  }\n  s->buffer = <span class=\"supfact\">buffera</span>;\n  s->size_in_bits = <span class=\"supfact\">bit_sizea</span>;\n  s->size_in_bits_plus8 = <span class=\"supfact\">bit_sizea</span> + Number;\n  s->buffer_end =\n      &<span class=\"supfact\">buffera</span>[(<span class=\"supfact\">bit_sizea</span> + Number) >> Number];\n  s->index = Number;\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v6", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "v5", "type": "const uint8_t *", "ref_name": "buffera", "ref_type": "const uint8_t *"}, {"name": "v4", "type": "int", "ref_name": "bit_sizea", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "sconklin", "repo_name": "ltp-tools", "path": "sconklin/ltp-tools/0ad2cd6b7bec49f1bf13901edd70031f8a90235276ece31a8e105af0975d6f11", "path_in_repo": "sconklin/ltp-tools/ltp-full-20110915/testcases/network/stress/ns-tools/ns-icmpv6_sender", "objdump": "00000000004042d7 <create_source_filter>:\n  4042d7:\t55                   \tpush   %rbp\n  4042d8:\t48 89 e5             \tmov    %rsp,%rbp\n  4042db:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n  4042e2:\t89 7d 8c             \tmov    %edi,-0x74(%rbp)\n  4042e5:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n  4042e9:\t89 55 88             \tmov    %edx,-0x78(%rbp)\n  4042ec:\t48 89 8d 78 ff ff ff \tmov    %rcx,-0x88(%rbp)\n  4042f3:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  4042fa:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  404301:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  404305:\teb 14                \tjmp    40431b <create_source_filter+0x44>\n  404307:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40430b:\t0f b6 00             \tmovzbl (%rax),%eax\n  40430e:\t3c 2c                \tcmp    $0x2c,%al\n  404310:\t75 04                \tjne    404316 <create_source_filter+0x3f>\n  404312:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  404316:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n  40431b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40431f:\t0f b6 00             \tmovzbl (%rax),%eax\n  404322:\t84 c0                \ttest   %al,%al\n  404324:\t75 e1                \tjne    404307 <create_source_filter+0x30>\n  404326:\t8b 05 5c 3f 00 00    \tmov    0x3f5c(%rip),%eax        # 408288 <debug>\n  40432c:\t85 c0                \ttest   %eax,%eax\n  40432e:\t74 1c                \tje     40434c <create_source_filter+0x75>\n  404330:\t48 8b 05 89 3e 00 00 \tmov    0x3e89(%rip),%rax        # 4081c0 <stderr@@GLIBC_2.2.5>\n  404337:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40433a:\tbe 00 5a 40 00       \tmov    $0x405a00,%esi\n  40433f:\t48 89 c7             \tmov    %rax,%rdi\n  404342:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404347:\te8 54 de ff ff       \tcallq  4021a0 <fprintf@plt>\n  40434c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40434f:\t48 c1 e0 07          \tshl    $0x7,%rax\n  404353:\t48 05 90 00 00 00    \tadd    $0x90,%rax\n  404359:\t48 89 c6             \tmov    %rax,%rsi\n  40435c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  404361:\te8 2a de ff ff       \tcallq  402190 <calloc@plt>\n  404366:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40436a:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  40436f:\t75 0a                \tjne    40437b <create_source_filter+0xa4>\n  404371:\tbf f2 59 40 00       \tmov    $0x4059f2,%edi\n  404376:\te8 c8 f5 ff ff       \tcallq  403943 <fatal_error>\n  40437b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40437f:\t8b 55 8c             \tmov    -0x74(%rbp),%edx\n  404382:\t89 10                \tmov    %edx,(%rax)\n  404384:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  404388:\t8b 40 10             \tmov    0x10(%rax),%eax\n  40438b:\t89 c6                \tmov    %eax,%esi\n  40438d:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  404391:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  404395:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  404399:\t48 8d 4a 08          \tlea    0x8(%rdx),%rcx\n  40439d:\t48 89 f2             \tmov    %rsi,%rdx\n  4043a0:\t48 89 c6             \tmov    %rax,%rsi\n  4043a3:\t48 89 cf             \tmov    %rcx,%rdi\n  4043a6:\te8 25 de ff ff       \tcallq  4021d0 <memcpy@plt>\n  4043ab:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4043af:\t8b 55 88             \tmov    -0x78(%rbp),%edx\n  4043b2:\t89 90 88 00 00 00    \tmov    %edx,0x88(%rax)\n  4043b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4043bc:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4043bf:\t89 90 8c 00 00 00    \tmov    %edx,0x8c(%rax)\n  4043c5:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  4043c9:\tba 30 00 00 00       \tmov    $0x30,%edx\n  4043ce:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4043d3:\t48 89 c7             \tmov    %rax,%rdi\n  4043d6:\te8 35 dd ff ff       \tcallq  402110 <memset@plt>\n  4043db:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  4043df:\t8b 40 04             \tmov    0x4(%rax),%eax\n  4043e2:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n  4043e5:\tc7 45 a8 02 00 00 00 \tmovl   $0x2,-0x58(%rbp)\n  4043ec:\tc7 45 ac 11 00 00 00 \tmovl   $0x11,-0x54(%rbp)\n  4043f3:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  4043f6:\t83 c8 04             \tor     $0x4,%eax\n  4043f9:\t89 45 a0             \tmov    %eax,-0x60(%rbp)\n  4043fc:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  404400:\tba 30 00 00 00       \tmov    $0x30,%edx\n  404405:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40440a:\t48 89 c7             \tmov    %rax,%rdi\n  40440d:\te8 fe dc ff ff       \tcallq  402110 <memset@plt>\n  404412:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  404416:\t8b 40 04             \tmov    0x4(%rax),%eax\n  404419:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n  40441c:\tc7 45 a8 02 00 00 00 \tmovl   $0x2,-0x58(%rbp)\n  404423:\tc7 45 ac 11 00 00 00 \tmovl   $0x11,-0x54(%rbp)\n  40442a:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  40442d:\t83 c8 04             \tor     $0x4,%eax\n  404430:\t89 45 a0             \tmov    %eax,-0x60(%rbp)\n  404433:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  40443a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40443e:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  404445:\te9 ef 00 00 00       \tjmpq   404539 <create_source_filter+0x262>\n  40444a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40444e:\tbe 2c 00 00 00       \tmov    $0x2c,%esi\n  404453:\t48 89 c7             \tmov    %rax,%rdi\n  404456:\te8 75 dc ff ff       \tcallq  4020d0 <strchr@plt>\n  40445b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40445f:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  404464:\t74 07                \tje     40446d <create_source_filter+0x196>\n  404466:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40446a:\tc6 00 00             \tmovb   $0x0,(%rax)\n  40446d:\t8b 05 15 3e 00 00    \tmov    0x3e15(%rip),%eax        # 408288 <debug>\n  404473:\t85 c0                \ttest   %eax,%eax\n  404475:\t74 20                \tje     404497 <create_source_filter+0x1c0>\n  404477:\t48 8b 05 42 3d 00 00 \tmov    0x3d42(%rip),%rax        # 4081c0 <stderr@@GLIBC_2.2.5>\n  40447e:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  404482:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  404485:\tbe 20 5a 40 00       \tmov    $0x405a20,%esi\n  40448a:\t48 89 c7             \tmov    %rax,%rdi\n  40448d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404492:\te8 09 dd ff ff       \tcallq  4021a0 <fprintf@plt>\n  404497:\t48 8d 4d 98          \tlea    -0x68(%rbp),%rcx\n  40449b:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n  40449f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4044a3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4044a8:\t48 89 c7             \tmov    %rax,%rdi\n  4044ab:\te8 f0 dd ff ff       \tcallq  4022a0 <getaddrinfo@plt>\n  4044b0:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  4044b3:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n  4044b7:\t74 30                \tje     4044e9 <create_source_filter+0x212>\n  4044b9:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4044bc:\t89 c7                \tmov    %eax,%edi\n  4044be:\te8 3d dc ff ff       \tcallq  402100 <gai_strerror@plt>\n  4044c3:\t48 89 c2             \tmov    %rax,%rdx\n  4044c6:\t48 8b 05 f3 3c 00 00 \tmov    0x3cf3(%rip),%rax        # 4081c0 <stderr@@GLIBC_2.2.5>\n  4044cd:\tbe b1 59 40 00       \tmov    $0x4059b1,%esi\n  4044d2:\t48 89 c7             \tmov    %rax,%rdi\n  4044d5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4044da:\te8 c1 dc ff ff       \tcallq  4021a0 <fprintf@plt>\n  4044df:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4044e4:\te8 97 dd ff ff       \tcallq  402280 <exit@plt>\n  4044e9:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4044ed:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4044f0:\t89 c6                \tmov    %eax,%esi\n  4044f2:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4044f6:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4044fa:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  4044fd:\t48 c1 e2 07          \tshl    $0x7,%rdx\n  404501:\t48 8d 8a 90 00 00 00 \tlea    0x90(%rdx),%rcx\n  404508:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40450c:\t48 01 d1             \tadd    %rdx,%rcx\n  40450f:\t48 89 f2             \tmov    %rsi,%rdx\n  404512:\t48 89 c6             \tmov    %rax,%rsi\n  404515:\t48 89 cf             \tmov    %rcx,%rdi\n  404518:\te8 b3 dc ff ff       \tcallq  4021d0 <memcpy@plt>\n  40451d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  404521:\t48 89 c7             \tmov    %rax,%rdi\n  404524:\te8 a7 dd ff ff       \tcallq  4022d0 <freeaddrinfo@plt>\n  404529:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40452d:\t48 83 c0 01          \tadd    $0x1,%rax\n  404531:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  404535:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  404539:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40453c:\t3b 45 fc             \tcmp    -0x4(%rbp),%eax\n  40453f:\t0f 82 05 ff ff ff    \tjb     40444a <create_source_filter+0x173>\n  404545:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  404549:\tc9                   \tleaveq \n  40454a:\tc3                   \tretq   \n  40454b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)", "code_s": "_DWORD *__fastcall create_source_filter(int a1, __int64 a2, int a3, char *a4) {\n  const char *v4;\n  struct addrinfo *<span class=\"supfact\">pai</span>;\n  struct addrinfo <span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">ecode</span>;\n  char *<span class=\"supfact\">v11</span>;\n  _DWORD *<span class=\"supfact\">v12</span>;\n  char *<span class=\"supfact\">name</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v15</span> = Number;\n  for (<span class=\"supfact\">name</span> = a4; *<span class=\"supfact\">name</span>;\n       ++<span class=\"supfact\">name</span>) {\n    if (*<span class=\"supfact\">name</span> == Number)\n      ++<span class=\"supfact\">v15</span>;\n  }\n  if (debug)\n    fprintf(stderr, String, <span class=\"supfact\">v15</span>);\n  <span class=\"supfact\">v12</span> = calloc(\n      Number, ((unsigned __int64)<span class=\"supfact\">v15</span> << Number) + Number);\n  if (!<span class=\"supfact\">v12</span>)\n    fatal_error(String);\n  *<span class=\"supfact\">v12</span> = a1;\n  memcpy(<span class=\"supfact\">v12</span> + Number, *(const void **)(a2 + Number),\n         *(unsigned int *)(a2 + Number));\n  <span class=\"supfact\">v12</span>[Number] = a3;\n  <span class=\"supfact\">v12</span>[Number] = <span class=\"supfact\">v15</span>;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.ai_family = *(_DWORD *)(a2 + Number);\n  <span class=\"supfact\">s</span>.ai_socktype = Number;\n  <span class=\"supfact\">s</span>.ai_protocol = Number;\n  <span class=\"supfact\">s</span>.ai_flags |= Number;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.ai_family = *(_DWORD *)(a2 + Number);\n  <span class=\"supfact\">s</span>.ai_socktype = Number;\n  <span class=\"supfact\">s</span>.ai_protocol = Number;\n  <span class=\"supfact\">s</span>.ai_flags |= Number;\n  <span class=\"supfact\">name</span> = a4;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v15</span>;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v11</span> = strchr(<span class=\"supfact\">name</span>, Number);\n    if (<span class=\"supfact\">v11</span>)\n      *<span class=\"supfact\">v11</span> = Number;\n    if (debug)\n      fprintf(stderr, String, <span class=\"supfact\">i</span>, <span class=\"supfact\">name</span>);\n    <span class=\"supfact\">ecode</span> =\n        getaddrinfo(<span class=\"supfact\">name</span>, Number L, &<span class=\"supfact\">s</span>,\n                    &<span class=\"supfact\">pai</span>);\n    if (<span class=\"supfact\">ecode</span>) {\n      v4 = gai_strerror(<span class=\"supfact\">ecode</span>);\n      fprintf(stderr, String, v4);\n      exit(Number);\n    }\n    memcpy(&<span class=\"supfact\">v12</span>[Number * (unsigned __int64)<span class=\"supfact\">i</span> +\n                                Number],\n           <span class=\"supfact\">pai</span>->ai_addr, <span class=\"supfact\">pai</span>->ai_addrlen);\n    freeaddrinfo(<span class=\"supfact\">pai</span>);\n    <span class=\"supfact\">name</span> = <span class=\"supfact\">v11</span> + Number;\n  }\n  return <span class=\"supfact\">v12</span>;\n}", "code_t": "group_filter *__cdecl create_source_filter(uint32_t ifindex, addrinfo *mainfo_p,\n                                           uint32_t fmode, char *saddrs) {\n  const char *v4;\n  addrinfo *<span class=\"supfact\">res</span>;\n  addrinfo <span class=\"supfact\">hints</span>;\n  int <span class=\"supfact\">err</span>;\n  char *<span class=\"supfact\">ep</span>;\n  group_filter *<span class=\"supfact\">gsf</span>;\n  char *<span class=\"supfact\">sp_0</span>;\n  uint32_t <span class=\"supfact\">idx</span>;\n  uint32_t <span class=\"supfact\">numsrc</span>;\n  <span class=\"supfact\">numsrc</span> = Number;\n  for (<span class=\"supfact\">sp_0</span> = saddrs; *<span class=\"supfact\">sp_0</span>;\n       ++<span class=\"supfact\">sp_0</span>) {\n    if (*<span class=\"supfact\">sp_0</span> == Number)\n      ++<span class=\"supfact\">numsrc</span>;\n  }\n  if (debug)\n    fprintf(stderr, String, <span class=\"supfact\">numsrc</span>);\n  <span class=\"supfact\">gsf</span> = (group_filter *)calloc(\n      Number, ((unsigned __int64)<span class=\"supfact\">numsrc</span> << Number) + Number);\n  if (!<span class=\"supfact\">gsf</span>)\n    fatal_error(String);\n  <span class=\"supfact\">gsf</span>->gf_interface = ifindex;\n  memcpy(&<span class=\"supfact\">gsf</span>->gf_group, mainfo_p->ai_addr,\n         mainfo_p->ai_addrlen);\n  <span class=\"supfact\">gsf</span>->gf_fmode = fmode;\n  <span class=\"supfact\">gsf</span>->gf_numsrc = <span class=\"supfact\">numsrc</span>;\n  memset(&<span class=\"supfact\">hints</span>, Number, sizeof(<span class=\"supfact\">hints</span>));\n  <span class=\"supfact\">hints</span>.ai_family = mainfo_p->ai_family;\n  <span class=\"supfact\">hints</span>.ai_socktype = Number;\n  <span class=\"supfact\">hints</span>.ai_protocol = Number;\n  <span class=\"supfact\">hints</span>.ai_flags |= Number;\n  memset(&<span class=\"supfact\">hints</span>, Number, sizeof(<span class=\"supfact\">hints</span>));\n  <span class=\"supfact\">hints</span>.ai_family = mainfo_p->ai_family;\n  <span class=\"supfact\">hints</span>.ai_socktype = Number;\n  <span class=\"supfact\">hints</span>.ai_protocol = Number;\n  <span class=\"supfact\">hints</span>.ai_flags |= Number;\n  <span class=\"supfact\">sp_0</span> = saddrs;\n  for (<span class=\"supfact\">idx</span> = Number;\n       <span class=\"supfact\">idx</span> < <span class=\"supfact\">numsrc</span>; ++<span class=\"supfact\">idx</span>) {\n    <span class=\"supfact\">ep</span> = strchr(<span class=\"supfact\">sp_0</span>, Number);\n    if (<span class=\"supfact\">ep</span>)\n      *<span class=\"supfact\">ep</span> = Number;\n    if (debug)\n      fprintf(stderr, String, <span class=\"supfact\">idx</span>, <span class=\"supfact\">sp_0</span>);\n    <span class=\"supfact\">err</span> =\n        getaddrinfo(<span class=\"supfact\">sp_0</span>, Number L, &<span class=\"supfact\">hints</span>,\n                    &<span class=\"supfact\">res</span>);\n    if (<span class=\"supfact\">err</span>) {\n      v4 = gai_strerror(<span class=\"supfact\">err</span>);\n      fprintf(stderr, String, v4);\n      exit(Number);\n    }\n    memcpy(\n        &<span class=\"supfact\">gsf</span>->gf_slist[(unsigned __int64)<span class=\"supfact\">idx</span>],\n        <span class=\"supfact\">res</span>->ai_addr, <span class=\"supfact\">res</span>->ai_addrlen);\n    freeaddrinfo(<span class=\"supfact\">res</span>);\n    <span class=\"supfact\">sp_0</span> = <span class=\"supfact\">ep</span> + Number;\n  }\n  return <span class=\"supfact\">gsf</span>;\n}", "var": [{"name": "v15", "type": "int", "ref_name": "numsrc", "ref_type": "uint32_t"}, {"name": "i", "type": "int", "ref_name": "idx", "ref_type": "uint32_t"}, {"name": "name", "type": "const char *", "ref_name": "sp_0", "ref_type": "char *"}, {"name": "v12", "type": "group_filter *", "ref_name": "gsf", "ref_type": "group_filter *"}, {"name": "v11", "type": "char *", "ref_name": "ep", "ref_type": "char *"}, {"name": "ecode", "type": "int", "ref_name": "err", "ref_type": "int"}, {"name": "s", "type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }", "ref_name": "hints", "ref_type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }"}, {"name": "pai", "type": "addrinfo *", "ref_name": "res", "ref_type": "addrinfo *"}], "has_struc": true, "body_in_train": true}, {"repo_owner": "NavInfoNC", "repo_name": "visual-wrk", "path": "NavInfoNC/visual-wrk/613b3c25bc8c76cbf1f2e8c1e4782ed874eef380dd685d667a49a8821e3688bf", "path_in_repo": "NavInfoNC/visual-wrk//obj/openssl-1.1.0g/crypto/asn1/asn_mime.o", "objdump": "0000000000001e11 <mime_hdr_new>:\n    1e11:\t55                   \tpush   %rbp\n    1e12:\t48 89 e5             \tmov    %rsp,%rbp\n    1e15:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1e19:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1e1d:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    1e21:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    1e28:\t00 \n    1e29:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    1e30:\t00 \n    1e31:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1e38:\t00 \n    1e39:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    1e3e:\t0f 84 8f 00 00 00    \tje     1ed3 <mime_hdr_new+0xc2>\n    1e44:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1e48:\tba 1d 03 00 00       \tmov    $0x31d,%edx\n    1e4d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1e54 <mime_hdr_new+0x43>\n    1e54:\t48 89 c7             \tmov    %rax,%rdi\n    1e57:\te8 00 00 00 00       \tcallq  1e5c <mime_hdr_new+0x4b>\n    1e5c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1e60:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1e65:\t75 0a                \tjne    1e71 <mime_hdr_new+0x60>\n    1e67:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e6c:\te9 a9 01 00 00       \tjmpq   201a <mime_hdr_new+0x209>\n    1e71:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1e75:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1e79:\teb 4d                \tjmp    1ec8 <mime_hdr_new+0xb7>\n    1e7b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1e7f:\t0f b6 00             \tmovzbl (%rax),%eax\n    1e82:\t0f b6 c0             \tmovzbl %al,%eax\n    1e85:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    1e88:\te8 00 00 00 00       \tcallq  1e8d <mime_hdr_new+0x7c>\n    1e8d:\t48 8b 00             \tmov    (%rax),%rax\n    1e90:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    1e93:\t48 63 d2             \tmovslq %edx,%rdx\n    1e96:\t48 01 d2             \tadd    %rdx,%rdx\n    1e99:\t48 01 d0             \tadd    %rdx,%rax\n    1e9c:\t0f b7 00             \tmovzwl (%rax),%eax\n    1e9f:\t0f b7 c0             \tmovzwl %ax,%eax\n    1ea2:\t25 00 01 00 00       \tand    $0x100,%eax\n    1ea7:\t85 c0                \ttest   %eax,%eax\n    1ea9:\t74 18                \tje     1ec3 <mime_hdr_new+0xb2>\n    1eab:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    1eae:\t89 c7                \tmov    %eax,%edi\n    1eb0:\te8 00 00 00 00       \tcallq  1eb5 <mime_hdr_new+0xa4>\n    1eb5:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    1eb8:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    1ebb:\t89 c2                \tmov    %eax,%edx\n    1ebd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1ec1:\t88 10                \tmov    %dl,(%rax)\n    1ec3:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n    1ec8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1ecc:\t0f b6 00             \tmovzbl (%rax),%eax\n    1ecf:\t84 c0                \ttest   %al,%al\n    1ed1:\t75 a8                \tjne    1e7b <mime_hdr_new+0x6a>\n    1ed3:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n    1ed8:\t0f 84 89 00 00 00    \tje     1f67 <mime_hdr_new+0x156>\n    1ede:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1ee2:\tba 28 03 00 00       \tmov    $0x328,%edx\n    1ee7:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1eee <mime_hdr_new+0xdd>\n    1eee:\t48 89 c7             \tmov    %rax,%rdi\n    1ef1:\te8 00 00 00 00       \tcallq  1ef6 <mime_hdr_new+0xe5>\n    1ef6:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1efa:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    1eff:\t0f 84 c1 00 00 00    \tje     1fc6 <mime_hdr_new+0x1b5>\n    1f05:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1f09:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1f0d:\teb 4d                \tjmp    1f5c <mime_hdr_new+0x14b>\n    1f0f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1f13:\t0f b6 00             \tmovzbl (%rax),%eax\n    1f16:\t0f b6 c0             \tmovzbl %al,%eax\n    1f19:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    1f1c:\te8 00 00 00 00       \tcallq  1f21 <mime_hdr_new+0x110>\n    1f21:\t48 8b 00             \tmov    (%rax),%rax\n    1f24:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    1f27:\t48 63 d2             \tmovslq %edx,%rdx\n    1f2a:\t48 01 d2             \tadd    %rdx,%rdx\n    1f2d:\t48 01 d0             \tadd    %rdx,%rax\n    1f30:\t0f b7 00             \tmovzwl (%rax),%eax\n    1f33:\t0f b7 c0             \tmovzwl %ax,%eax\n    1f36:\t25 00 01 00 00       \tand    $0x100,%eax\n    1f3b:\t85 c0                \ttest   %eax,%eax\n    1f3d:\t74 18                \tje     1f57 <mime_hdr_new+0x146>\n    1f3f:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    1f42:\t89 c7                \tmov    %eax,%edi\n    1f44:\te8 00 00 00 00       \tcallq  1f49 <mime_hdr_new+0x138>\n    1f49:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    1f4c:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    1f4f:\t89 c2                \tmov    %eax,%edx\n    1f51:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1f55:\t88 10                \tmov    %dl,(%rax)\n    1f57:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n    1f5c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1f60:\t0f b6 00             \tmovzbl (%rax),%eax\n    1f63:\t84 c0                \ttest   %al,%al\n    1f65:\t75 a8                \tjne    1f0f <mime_hdr_new+0xfe>\n    1f67:\tba 32 03 00 00       \tmov    $0x332,%edx\n    1f6c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1f73 <mime_hdr_new+0x162>\n    1f73:\tbf 18 00 00 00       \tmov    $0x18,%edi\n    1f78:\te8 00 00 00 00       \tcallq  1f7d <mime_hdr_new+0x16c>\n    1f7d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1f81:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    1f86:\t74 41                \tje     1fc9 <mime_hdr_new+0x1b8>\n    1f88:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1f8c:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1f90:\t48 89 10             \tmov    %rdx,(%rax)\n    1f93:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1f97:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1f9b:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    1f9f:\t48 8d 3d 8e 02 00 00 \tlea    0x28e(%rip),%rdi        # 2234 <mime_param_cmp>\n    1fa6:\te8 60 e1 ff ff       \tcallq  10b <sk_MIME_PARAM_new>\n    1fab:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    1faf:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n    1fb3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1fb7:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1fbb:\t48 85 c0             \ttest   %rax,%rax\n    1fbe:\t74 0c                \tje     1fcc <mime_hdr_new+0x1bb>\n    1fc0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1fc4:\teb 54                \tjmp    201a <mime_hdr_new+0x209>\n    1fc6:\t90                   \tnop\n    1fc7:\teb 04                \tjmp    1fcd <mime_hdr_new+0x1bc>\n    1fc9:\t90                   \tnop\n    1fca:\teb 01                \tjmp    1fcd <mime_hdr_new+0x1bc>\n    1fcc:\t90                   \tnop\n    1fcd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1fd1:\tba 3c 03 00 00       \tmov    $0x33c,%edx\n    1fd6:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1fdd <mime_hdr_new+0x1cc>\n    1fdd:\t48 89 c7             \tmov    %rax,%rdi\n    1fe0:\te8 00 00 00 00       \tcallq  1fe5 <mime_hdr_new+0x1d4>\n    1fe5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1fe9:\tba 3d 03 00 00       \tmov    $0x33d,%edx\n    1fee:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1ff5 <mime_hdr_new+0x1e4>\n    1ff5:\t48 89 c7             \tmov    %rax,%rdi\n    1ff8:\te8 00 00 00 00       \tcallq  1ffd <mime_hdr_new+0x1ec>\n    1ffd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2001:\tba 3e 03 00 00       \tmov    $0x33e,%edx\n    2006:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 200d <mime_hdr_new+0x1fc>\n    200d:\t48 89 c7             \tmov    %rax,%rdi\n    2010:\te8 00 00 00 00       \tcallq  2015 <mime_hdr_new+0x204>\n    2015:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    201a:\tc9                   \tleaveq \n    201b:\tc3                   \tretq   ", "code_s": "__int64 *__fastcall mime_hdr_new(__int64 a1, __int64 a2) {\n  int c;\n  int ca;\n  _BYTE *i;\n  _BYTE *j;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 *<span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = Number L;\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v7</span> = Number L;\n  if (a1) {\n    <span class=\"supfact\">v8</span> = CRYPTO_strdup(a1, String, Number L);\n    if (!<span class=\"supfact\">v8</span>)\n      return Number L;\n    for (i = (_BYTE *)<span class=\"supfact\">v8</span>; *i; ++i) {\n      c = (unsigned __int8)*i;\n      if (((*_ctype_b_loc())[c] & Number) != Number)\n        *i = tolower(c);\n    }\n  }\n  if (a2) {\n    <span class=\"supfact\">v7</span> = CRYPTO_strdup(a2, String, Number L);\n    if (!<span class=\"supfact\">v7</span>)\n      goto LABEL_19;\n    for (j = (_BYTE *)<span class=\"supfact\">v7</span>; *j; ++j) {\n      ca = (unsigned __int8)*j;\n      if (((*_ctype_b_loc())[ca] & Number) != Number)\n        *j = tolower(ca);\n    }\n  }\n  <span class=\"supfact\">v9</span> = (__int64 *)CRYPTO_malloc(Number L, String, Number L);\n  if (<span class=\"supfact\">v9</span>) {\n    *<span class=\"supfact\">v9</span> = <span class=\"supfact\">v8</span>;\n    <span class=\"supfact\">v9</span>[Number] = <span class=\"supfact\">v7</span>;\n    <span class=\"supfact\">v9</span>[Number] = sk_MIME_PARAM_new((__int64)mime_param_cmp);\n    if (<span class=\"supfact\">v9</span>[Number])\n      return <span class=\"supfact\">v9</span>;\n  }\nLABEL_19:\n  CRYPTO_free(<span class=\"supfact\">v8</span>, String, Number L);\n  CRYPTO_free(<span class=\"supfact\">v7</span>, String, Number L);\n  CRYPTO_free(<span class=\"supfact\">v9</span>, String, Number L);\n  return Number L;\n}", "code_t": "MIME_HEADER *__cdecl mime_hdr_new(const char *name, const char *value) {\n  int c;\n  int ca;\n  char *p;\n  char *pa;\n  char *<span class=\"supfact\">tmpval</span>;\n  char *<span class=\"supfact\">tmpname</span>;\n  MIME_HEADER *<span class=\"supfact\">mhdr</span>;\n  <span class=\"supfact\">mhdr</span> = Number L;\n  <span class=\"supfact\">tmpname</span> = Number L;\n  <span class=\"supfact\">tmpval</span> = Number L;\n  if (name) {\n    <span class=\"supfact\">tmpname</span> = (char *)CRYPTO_strdup(name, String, Number L);\n    if (!<span class=\"supfact\">tmpname</span>)\n      return Number L;\n    for (p = <span class=\"supfact\">tmpname</span>; *p; ++p) {\n      c = (unsigned __int8)*p;\n      if (((*_ctype_b_loc())[c] & Number) != Number)\n        *p = tolower(c);\n    }\n  }\n  if (value) {\n    <span class=\"supfact\">tmpval</span> = (char *)CRYPTO_strdup(value, String, Number L);\n    if (!<span class=\"supfact\">tmpval</span>)\n      goto err;\n    for (pa = <span class=\"supfact\">tmpval</span>; *pa; ++pa) {\n      ca = (unsigned __int8)*pa;\n      if (((*_ctype_b_loc())[ca] & Number) != Number)\n        *pa = tolower(ca);\n    }\n  }\n  <span class=\"supfact\">mhdr</span> =\n      (MIME_HEADER *)CRYPTO_malloc(Number L, String, Number L);\n  if (<span class=\"supfact\">mhdr</span>) {\n    <span class=\"supfact\">mhdr</span>->name = <span class=\"supfact\">tmpname</span>;\n    <span class=\"supfact\">mhdr</span>->value = <span class=\"supfact\">tmpval</span>;\n    <span class=\"supfact\">mhdr</span>->params =\n        sk_MIME_PARAM_new((sk_MIME_PARAM_compfunc)mime_param_cmp);\n    if (<span class=\"supfact\">mhdr</span>->params)\n      return <span class=\"supfact\">mhdr</span>;\n  }\nerr:\n  CRYPTO_free(<span class=\"supfact\">tmpname</span>, String, Number L);\n  CRYPTO_free(<span class=\"supfact\">tmpval</span>, String, Number L);\n  CRYPTO_free(<span class=\"supfact\">mhdr</span>, String, Number L);\n  return Number L;\n}", "var": [{"name": "v9", "type": "unsigned __int64", "ref_name": "mhdr", "ref_type": "MIME_HEADER *"}, {"name": "v8", "type": "unsigned __int64", "ref_name": "tmpname", "ref_type": "char *"}, {"name": "v7", "type": "unsigned __int64", "ref_name": "tmpval", "ref_type": "char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "hai046", "repo_name": "MediaPlayer", "path": "hai046/MediaPlayer/6656137dc096a51f01b950925cac9446eea31fe808dea26fd8ddda5fba588bc7", "path_in_repo": "hai046/MediaPlayer/app/src/main/jni/ffmpeg/libavcodec/hqx.o", "objdump": "0000000000000a9b <hqx_decode_422>:\n     a9b:\t48 83 ec 58          \tsub    $0x58,%rsp\n     a9f:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n     aa4:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n     aa8:\t89 54 24 10          \tmov    %edx,0x10(%rsp)\n     aac:\t89 4c 24 0c          \tmov    %ecx,0xc(%rsp)\n     ab0:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n     ab4:\t48 63 d0             \tmovslq %eax,%rdx\n     ab7:\t48 89 d0             \tmov    %rdx,%rax\n     aba:\t48 c1 e0 06          \tshl    $0x6,%rax\n     abe:\t48 01 d0             \tadd    %rdx,%rax\n     ac1:\t48 c1 e0 05          \tshl    $0x5,%rax\n     ac5:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n     ac9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     ace:\t48 01 d0             \tadd    %rdx,%rax\n     ad1:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n     ad6:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     adb:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n     ae0:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     ae5:\t8b 80 30 82 00 00    \tmov    0x8230(%rax),%eax\n     aeb:\t85 c0                \ttest   %eax,%eax\n     aed:\t74 13                \tje     b02 <hqx_decode_422+0x67>\n     aef:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n     af4:\t48 89 c7             \tmov    %rax,%rdi\n     af7:\te8 03 f7 ff ff       \tcallq  1ff <get_bits1>\n     afc:\t89 44 24 4c          \tmov    %eax,0x4c(%rsp)\n     b00:\teb 08                \tjmp    b0a <hqx_decode_422+0x6f>\n     b02:\tc7 44 24 4c 00 00 00 \tmovl   $0x0,0x4c(%rsp)\n     b09:\t00 \n     b0a:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n     b0f:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     b14:\t48 89 c7             \tmov    %rax,%rdi\n     b17:\te8 3e f5 ff ff       \tcallq  5a <get_bits>\n     b1c:\t89 c0                \tmov    %eax,%eax\n     b1e:\t48 c1 e0 04          \tshl    $0x4,%rax\n     b22:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     b28:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n     b2d:\tc7 44 24 48 00 00 00 \tmovl   $0x0,0x48(%rsp)\n     b34:\t00 \n     b35:\te9 a8 00 00 00       \tjmpq   be2 <hqx_decode_422+0x147>\n     b3a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     b3f:\t8b 80 24 82 00 00    \tmov    0x8224(%rax),%eax\n     b45:\t83 e8 09             \tsub    $0x9,%eax\n     b48:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n     b4c:\t83 7c 24 48 00       \tcmpl   $0x0,0x48(%rsp)\n     b51:\t74 0e                \tje     b61 <hqx_decode_422+0xc6>\n     b53:\t83 7c 24 48 04       \tcmpl   $0x4,0x48(%rsp)\n     b58:\t74 07                \tje     b61 <hqx_decode_422+0xc6>\n     b5a:\t83 7c 24 48 06       \tcmpl   $0x6,0x48(%rsp)\n     b5f:\t75 08                \tjne    b69 <hqx_decode_422+0xce>\n     b61:\tc7 44 24 24 00 00 00 \tmovl   $0x0,0x24(%rsp)\n     b68:\t00 \n     b69:\t8b 44 24 48          \tmov    0x48(%rsp),%eax\n     b6d:\t48 98                \tcltq   \n     b6f:\t48 c1 e0 07          \tshl    $0x7,%rax\n     b73:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n     b77:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     b7c:\t4c 8d 04 02          \tlea    (%rdx,%rax,1),%r8\n     b80:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     b85:\t8b 88 24 82 00 00    \tmov    0x8224(%rax),%ecx\n     b8b:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n     b8f:\t48 63 d0             \tmovslq %eax,%rdx\n     b92:\t48 89 d0             \tmov    %rdx,%rax\n     b95:\t48 01 c0             \tadd    %rax,%rax\n     b98:\t48 01 d0             \tadd    %rdx,%rax\n     b9b:\t48 c1 e0 03          \tshl    $0x3,%rax\n     b9f:\t48 8d 90 a0 82 00 00 \tlea    0x82a0(%rax),%rdx\n     ba6:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     bab:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n     baf:\t48 8d 7c 24 24       \tlea    0x24(%rsp),%rdi\n     bb4:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n     bb9:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n     bbe:\t49 89 f9             \tmov    %rdi,%r9\n     bc1:\t48 89 c7             \tmov    %rax,%rdi\n     bc4:\te8 eb f9 ff ff       \tcallq  5b4 <decode_block>\n     bc9:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n     bcd:\t83 7c 24 28 00       \tcmpl   $0x0,0x28(%rsp)\n     bd2:\t79 09                \tjns    bdd <hqx_decode_422+0x142>\n     bd4:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n     bd8:\te9 41 01 00 00       \tjmpq   d1e <hqx_decode_422+0x283>\n     bdd:\t83 44 24 48 01       \taddl   $0x1,0x48(%rsp)\n     be2:\t83 7c 24 48 07       \tcmpl   $0x7,0x48(%rsp)\n     be7:\t0f 8e 4d ff ff ff    \tjle    b3a <hqx_decode_422+0x9f>\n     bed:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     bf2:\t48 8d b0 20 01 00 00 \tlea    0x120(%rax),%rsi\n     bf9:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     bfe:\t4c 8d 40 20          \tlea    0x20(%rax),%r8\n     c02:\t8b 7c 24 4c          \tmov    0x4c(%rsp),%edi\n     c06:\t8b 4c 24 0c          \tmov    0xc(%rsp),%ecx\n     c0a:\t8b 54 24 10          \tmov    0x10(%rsp),%edx\n     c0e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     c13:\t68 00 00 00 00       \tpushq  $0x0\n     c18:\t56                   \tpush   %rsi\n     c19:\t4d 89 c1             \tmov    %r8,%r9\n     c1c:\t41 89 f8             \tmov    %edi,%r8d\n     c1f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c24:\t48 89 c7             \tmov    %rax,%rdi\n     c27:\te8 3c f7 ff ff       \tcallq  368 <put_blocks>\n     c2c:\t48 83 c4 10          \tadd    $0x10,%rsp\n     c30:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     c35:\t48 8d 88 a0 01 00 00 \tlea    0x1a0(%rax),%rcx\n     c3c:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     c41:\t4c 8d 80 a0 00 00 00 \tlea    0xa0(%rax),%r8\n     c48:\t8b 44 24 10          \tmov    0x10(%rsp),%eax\n     c4c:\t8d 70 08             \tlea    0x8(%rax),%esi\n     c4f:\t8b 7c 24 4c          \tmov    0x4c(%rsp),%edi\n     c53:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n     c57:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     c5c:\t68 00 00 00 00       \tpushq  $0x0\n     c61:\t51                   \tpush   %rcx\n     c62:\t4d 89 c1             \tmov    %r8,%r9\n     c65:\t41 89 f8             \tmov    %edi,%r8d\n     c68:\t89 d1                \tmov    %edx,%ecx\n     c6a:\t89 f2                \tmov    %esi,%edx\n     c6c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c71:\t48 89 c7             \tmov    %rax,%rdi\n     c74:\te8 ef f6 ff ff       \tcallq  368 <put_blocks>\n     c79:\t48 83 c4 10          \tadd    $0x10,%rsp\n     c7d:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     c82:\t48 8d 88 a0 02 00 00 \tlea    0x2a0(%rax),%rcx\n     c89:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     c8e:\t4c 8d 80 20 02 00 00 \tlea    0x220(%rax),%r8\n     c95:\t8b 44 24 10          \tmov    0x10(%rsp),%eax\n     c99:\td1 f8                \tsar    %eax\n     c9b:\t89 c6                \tmov    %eax,%esi\n     c9d:\t8b 7c 24 4c          \tmov    0x4c(%rsp),%edi\n     ca1:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n     ca5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     caa:\t68 00 00 00 00       \tpushq  $0x0\n     caf:\t51                   \tpush   %rcx\n     cb0:\t4d 89 c1             \tmov    %r8,%r9\n     cb3:\t41 89 f8             \tmov    %edi,%r8d\n     cb6:\t89 d1                \tmov    %edx,%ecx\n     cb8:\t89 f2                \tmov    %esi,%edx\n     cba:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     cbf:\t48 89 c7             \tmov    %rax,%rdi\n     cc2:\te8 a1 f6 ff ff       \tcallq  368 <put_blocks>\n     cc7:\t48 83 c4 10          \tadd    $0x10,%rsp\n     ccb:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     cd0:\t48 8d 88 a0 03 00 00 \tlea    0x3a0(%rax),%rcx\n     cd7:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     cdc:\t4c 8d 80 20 03 00 00 \tlea    0x320(%rax),%r8\n     ce3:\t8b 44 24 10          \tmov    0x10(%rsp),%eax\n     ce7:\td1 f8                \tsar    %eax\n     ce9:\t89 c6                \tmov    %eax,%esi\n     ceb:\t8b 7c 24 4c          \tmov    0x4c(%rsp),%edi\n     cef:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n     cf3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     cf8:\t68 00 00 00 00       \tpushq  $0x0\n     cfd:\t51                   \tpush   %rcx\n     cfe:\t4d 89 c1             \tmov    %r8,%r9\n     d01:\t41 89 f8             \tmov    %edi,%r8d\n     d04:\t89 d1                \tmov    %edx,%ecx\n     d06:\t89 f2                \tmov    %esi,%edx\n     d08:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     d0d:\t48 89 c7             \tmov    %rax,%rdi\n     d10:\te8 53 f6 ff ff       \tcallq  368 <put_blocks>\n     d15:\t48 83 c4 10          \tadd    $0x10,%rsp\n     d19:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d1e:\t48 83 c4 58          \tadd    $0x58,%rsp\n     d22:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hqx_decode_422(__int64 a1, int a2, int a3, int a4) {\n  int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v12</span> = Number L * a2 + Number + a1;\n  <span class=\"supfact\">v11</span> = <span class=\"supfact\">v12</span>;\n  if (*(_DWORD *)(a1 + Number))\n    <span class=\"supfact\">v14</span> = get_bits1(<span class=\"supfact\">v11</span>);\n  else\n    <span class=\"supfact\">v14</span> = Number;\n  <span class=\"supfact\">v10</span> =\n      (__int64)&hqx_quants +\n      Number * (unsigned int)get_bits(<span class=\"supfact\">v11</span>, Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v9</span> = *(_DWORD *)(a1 + Number) - Number;\n    if (!<span class=\"supfact\">i</span> || <span class=\"supfact\">i</span> == Number ||\n        <span class=\"supfact\">i</span> == Number)\n      <span class=\"supfact\">v7</span> = Number;\n    <span class=\"supfact\">v8</span> = decode_block(\n        <span class=\"supfact\">v11</span>, Number L * <span class=\"supfact\">v9</span> + Number + a1,\n        <span class=\"supfact\">v10</span>, *(_DWORD *)(a1 + Number),\n        (_WORD *)(((__int64)<span class=\"supfact\">i</span> << Number) + Number +\n                  <span class=\"supfact\">v12</span>),\n        &<span class=\"supfact\">v7</span>);\n    if ((<span class=\"supfact\">v8</span> & Number) != Number)\n      return <span class=\"supfact\">v8</span>;\n  }\n  put_blocks(a1, Number, a3, a4, <span class=\"supfact\">v14</span>,\n             <span class=\"supfact\">v12</span> + Number, <span class=\"supfact\">v12</span> + Number,\n             (__int64)&hqx_quant_luma);\n  put_blocks(a1, Number, a3 + Number, a4, <span class=\"supfact\">v14</span>,\n             <span class=\"supfact\">v12</span> + Number, <span class=\"supfact\">v12</span> + Number,\n             (__int64)&hqx_quant_luma);\n  put_blocks(a1, Number, a3 >> Number, a4, <span class=\"supfact\">v14</span>,\n             <span class=\"supfact\">v12</span> + Number, <span class=\"supfact\">v12</span> + Number,\n             (__int64)&hqx_quant_chroma);\n  put_blocks(a1, Number, a3 >> Number, a4, <span class=\"supfact\">v14</span>,\n             <span class=\"supfact\">v12</span> + Number, <span class=\"supfact\">v12</span> + Number,\n             (__int64)&hqx_quant_chroma);\n  return Number L;\n}", "code_t": "int __cdecl hqx_decode_422(HQXContext_0 *ctx, int slice_no, int x, int y) {\n  int <span class=\"supfact\">last_dc</span>;\n  int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">vlc_index</span>;\n  const int *<span class=\"supfact\">quants</span>;\n  GetBitContext_0 *<span class=\"supfact\">gb</span>;\n  HQXSlice_0 *<span class=\"supfact\">slice</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">flag</span>;\n  <span class=\"supfact\">slice</span> = &ctx-><span class=\"supfact\">slice</span>[slice_no];\n  <span class=\"supfact\">gb</span> = &<span class=\"supfact\">slice</span>-><span class=\"supfact\">gb</span>;\n  if (ctx->interlaced)\n    <span class=\"supfact\">flag</span> = get_bits1(<span class=\"supfact\">gb</span>);\n  else\n    <span class=\"supfact\">flag</span> = Number;\n  <span class=\"supfact\">quants</span> = hqx_quants[get_bits(<span class=\"supfact\">gb</span>, Number)];\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">vlc_index</span> = ctx->dcb - Number;\n    if (!<span class=\"supfact\">i</span> || <span class=\"supfact\">i</span> == Number ||\n        <span class=\"supfact\">i</span> == Number)\n      <span class=\"supfact\">last_dc</span> = Number;\n    <span class=\"supfact\">ret</span> = decode_block(\n        <span class=\"supfact\">gb</span>, &ctx->dc_vlc[<span class=\"supfact\">vlc_index</span>],\n        <span class=\"supfact\">quants</span>, ctx->dcb,\n        <span class=\"supfact\">slice</span>->block[(__int64)<span class=\"supfact\">i</span>],\n        &<span class=\"supfact\">last_dc</span>);\n    if (<span class=\"supfact\">ret</span> < Number)\n      return <span class=\"supfact\">ret</span>;\n  }\n  put_blocks(ctx, Number, x, y, <span class=\"supfact\">flag</span>,\n             (int16_t *)<span class=\"supfact\">slice</span>->block,\n             <span class=\"supfact\">slice</span>->block[Number], hqx_quant_luma);\n  put_blocks(ctx, Number, x + Number, y, <span class=\"supfact\">flag</span>,\n             <span class=\"supfact\">slice</span>->block[Number],\n             <span class=\"supfact\">slice</span>->block[Number], hqx_quant_luma);\n  put_blocks(ctx, Number, x >> Number, y, <span class=\"supfact\">flag</span>,\n             <span class=\"supfact\">slice</span>->block[Number],\n             <span class=\"supfact\">slice</span>->block[Number], hqx_quant_chroma);\n  put_blocks(ctx, Number, x >> Number, y, <span class=\"supfact\">flag</span>,\n             <span class=\"supfact\">slice</span>->block[Number],\n             <span class=\"supfact\">slice</span>->block[Number], hqx_quant_chroma);\n  return Number;\n}", "var": [{"name": "v14", "type": "int", "ref_name": "flag", "ref_type": "int"}, {"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v12", "type": "HQXSlice_0 *", "ref_name": "slice", "ref_type": "HQXSlice_0 *"}, {"name": "v11", "type": "GetBitContext_0 *", "ref_name": "gb", "ref_type": "GetBitContext_0 *"}, {"name": "v10", "type": "const int *", "ref_name": "quants", "ref_type": "const int *"}, {"name": "v9", "type": "int", "ref_name": "vlc_index", "ref_type": "int"}, {"name": "v8", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "v7", "type": "int", "ref_name": "last_dc", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "yiming623", "repo_name": "mqttproxy", "path": "yiming623/mqttproxy/79273aeaa38bada53ab26b594cd9f848148080884504b6810654f607545a6466", "path_in_repo": "yiming623/mqttproxy/org.eclipse.mosquitto-1.4.4/src/net_mosq.o", "objdump": "0000000000000d98 <_mosquitto_packet_write>:\n     d98:\t55                   \tpush   %rbp\n     d99:\t48 89 e5             \tmov    %rsp,%rbp\n     d9c:\t48 83 ec 20          \tsub    $0x20,%rsp\n     da0:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     da4:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     da9:\t75 0a                \tjne    db5 <_mosquitto_packet_write+0x1d>\n     dab:\tb8 03 00 00 00       \tmov    $0x3,%eax\n     db0:\te9 d9 01 00 00       \tjmpq   f8e <_mosquitto_packet_write+0x1f6>\n     db5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     db9:\t8b 00                \tmov    (%rax),%eax\n     dbb:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     dbe:\t75 0a                \tjne    dca <_mosquitto_packet_write+0x32>\n     dc0:\tb8 04 00 00 00       \tmov    $0x4,%eax\n     dc5:\te9 c4 01 00 00       \tjmpq   f8e <_mosquitto_packet_write+0x1f6>\n     dca:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     dce:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n     dd2:\t48 85 c0             \ttest   %rax,%rax\n     dd5:\t74 4d                \tje     e24 <_mosquitto_packet_write+0x8c>\n     dd7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ddb:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n     ddf:\t48 85 c0             \ttest   %rax,%rax\n     de2:\t75 40                \tjne    e24 <_mosquitto_packet_write+0x8c>\n     de4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     de8:\t48 8b 50 78          \tmov    0x78(%rax),%rdx\n     dec:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     df0:\t48 89 50 70          \tmov    %rdx,0x70(%rax)\n     df4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     df8:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n     dfc:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     e00:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e04:\t48 89 50 78          \tmov    %rdx,0x78(%rax)\n     e08:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e0c:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n     e10:\t48 85 c0             \ttest   %rax,%rax\n     e13:\t75 0f                \tjne    e24 <_mosquitto_packet_write+0x8c>\n     e15:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e19:\t48 c7 80 c8 00 00 00 \tmovq   $0x0,0xc8(%rax)\n     e20:\t00 00 00 00 \n     e24:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e28:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n     e2b:\t83 f8 04             \tcmp    $0x4,%eax\n     e2e:\t0f 85 44 01 00 00    \tjne    f78 <_mosquitto_packet_write+0x1e0>\n     e34:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e39:\te9 50 01 00 00       \tjmpq   f8e <_mosquitto_packet_write+0x1f6>\n     e3e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e42:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n     e46:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     e4a:\te9 a8 00 00 00       \tjmpq   ef7 <_mosquitto_packet_write+0x15f>\n     e4f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e53:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n     e56:\t89 c6                \tmov    %eax,%esi\n     e58:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e5c:\t48 8b 10             \tmov    (%rax),%rdx\n     e5f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e63:\t8b 40 20             \tmov    0x20(%rax),%eax\n     e66:\t89 c0                \tmov    %eax,%eax\n     e68:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n     e6c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e70:\t48 89 f2             \tmov    %rsi,%rdx\n     e73:\t48 89 ce             \tmov    %rcx,%rsi\n     e76:\t48 89 c7             \tmov    %rax,%rdi\n     e79:\te8 00 00 00 00       \tcallq  e7e <_mosquitto_packet_write+0xe6>\n     e7e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     e82:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     e87:\t7e 2c                \tjle    eb5 <_mosquitto_packet_write+0x11d>\n     e89:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e8d:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n     e90:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     e94:\t29 d0                \tsub    %edx,%eax\n     e96:\t89 c2                \tmov    %eax,%edx\n     e98:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e9c:\t89 50 1c             \tmov    %edx,0x1c(%rax)\n     e9f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     ea3:\t8b 40 20             \tmov    0x20(%rax),%eax\n     ea6:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     eaa:\t01 c2                \tadd    %eax,%edx\n     eac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     eb0:\t89 50 20             \tmov    %edx,0x20(%rax)\n     eb3:\teb 42                \tjmp    ef7 <_mosquitto_packet_write+0x15f>\n     eb5:\te8 00 00 00 00       \tcallq  eba <_mosquitto_packet_write+0x122>\n     eba:\t8b 00                \tmov    (%rax),%eax\n     ebc:\t83 f8 0b             \tcmp    $0xb,%eax\n     ebf:\t74 0c                \tje     ecd <_mosquitto_packet_write+0x135>\n     ec1:\te8 00 00 00 00       \tcallq  ec6 <_mosquitto_packet_write+0x12e>\n     ec6:\t8b 00                \tmov    (%rax),%eax\n     ec8:\t83 f8 0b             \tcmp    $0xb,%eax\n     ecb:\t75 0a                \tjne    ed7 <_mosquitto_packet_write+0x13f>\n     ecd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ed2:\te9 b7 00 00 00       \tjmpq   f8e <_mosquitto_packet_write+0x1f6>\n     ed7:\te8 00 00 00 00       \tcallq  edc <_mosquitto_packet_write+0x144>\n     edc:\t8b 00                \tmov    (%rax),%eax\n     ede:\t83 f8 68             \tcmp    $0x68,%eax\n     ee1:\t75 0a                \tjne    eed <_mosquitto_packet_write+0x155>\n     ee3:\tb8 07 00 00 00       \tmov    $0x7,%eax\n     ee8:\te9 a1 00 00 00       \tjmpq   f8e <_mosquitto_packet_write+0x1f6>\n     eed:\tb8 0e 00 00 00       \tmov    $0xe,%eax\n     ef2:\te9 97 00 00 00       \tjmpq   f8e <_mosquitto_packet_write+0x1f6>\n     ef7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     efb:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n     efe:\t85 c0                \ttest   %eax,%eax\n     f00:\t0f 85 49 ff ff ff    \tjne    e4f <_mosquitto_packet_write+0xb7>\n     f06:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f0a:\t48 8b 50 78          \tmov    0x78(%rax),%rdx\n     f0e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f12:\t48 89 50 70          \tmov    %rdx,0x70(%rax)\n     f16:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f1a:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n     f1e:\t48 85 c0             \ttest   %rax,%rax\n     f21:\t74 30                \tje     f53 <_mosquitto_packet_write+0x1bb>\n     f23:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f27:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n     f2b:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     f2f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f33:\t48 89 50 78          \tmov    %rdx,0x78(%rax)\n     f37:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f3b:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n     f3f:\t48 85 c0             \ttest   %rax,%rax\n     f42:\t75 0f                \tjne    f53 <_mosquitto_packet_write+0x1bb>\n     f44:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f48:\t48 c7 80 c8 00 00 00 \tmovq   $0x0,0xc8(%rax)\n     f4f:\t00 00 00 00 \n     f53:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     f57:\t48 89 c7             \tmov    %rax,%rdi\n     f5a:\te8 00 00 00 00       \tcallq  f5f <_mosquitto_packet_write+0x1c7>\n     f5f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     f63:\t48 89 c7             \tmov    %rax,%rdi\n     f66:\te8 00 00 00 00       \tcallq  f6b <_mosquitto_packet_write+0x1d3>\n     f6b:\te8 00 00 00 00       \tcallq  f70 <_mosquitto_packet_write+0x1d8>\n     f70:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     f74:\t48 89 42 38          \tmov    %rax,0x38(%rdx)\n     f78:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f7c:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n     f80:\t48 85 c0             \ttest   %rax,%rax\n     f83:\t0f 85 b5 fe ff ff    \tjne    e3e <_mosquitto_packet_write+0xa6>\n     f89:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f8e:\tc9                   \tleaveq \n     f8f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mosquitto_packet_write(__int64 a1) {\n  ssize_t <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  if (!a1)\n    return Number L;\n  if (*(_DWORD *)a1 == Number)\n    return Number L;\n  if (*(_QWORD *)(a1 + Number)) {\n    if (!*(_QWORD *)(a1 + Number)) {\n      *(_QWORD *)(a1 + Number) = *(_QWORD *)(a1 + Number);\n      *(_QWORD *)(a1 + Number) =\n          *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n      if (!*(_QWORD *)(a1 + Number))\n        *(_QWORD *)(a1 + Number) = Number L;\n    }\n  }\n  if (*(_DWORD *)(a1 + Number) == Number)\n    return Number L;\n  while (*(_QWORD *)(a1 + Number)) {\n    for (<span class=\"supfact\">i</span> = *(_QWORD *)(a1 + Number);\n         *(_DWORD *)(<span class=\"supfact\">i</span> + Number);\n         *(_DWORD *)(<span class=\"supfact\">i</span> + Number) += <span class=\"supfact\">v2</span>) {\n      <span class=\"supfact\">v2</span> = mosquitto_net_write(\n          (int *)a1,\n          (const void *)(*(_QWORD *)<span class=\"supfact\">i</span> +\n                         *(unsigned int *)(<span class=\"supfact\">i</span> + Number)),\n          *(unsigned int *)(<span class=\"supfact\">i</span> + Number));\n      if (<span class=\"supfact\">v2</span> <= Number) {\n        if (*_errno_location() == Number || *_errno_location() == Number)\n          return Number L;\n        if (*_errno_location() == Number)\n          return Number L;\n        return Number L;\n      }\n      *(_DWORD *)(<span class=\"supfact\">i</span> + Number) -= <span class=\"supfact\">v2</span>;\n    }\n    *(_QWORD *)(a1 + Number) = *(_QWORD *)(a1 + Number);\n    if (*(_QWORD *)(a1 + Number)) {\n      *(_QWORD *)(a1 + Number) =\n          *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n      if (!*(_QWORD *)(a1 + Number))\n        *(_QWORD *)(a1 + Number) = Number L;\n    }\n    mosquitto_packet_cleanup(<span class=\"supfact\">i</span>);\n    mosquitto_free(<span class=\"supfact\">i</span>);\n    *(_QWORD *)(a1 + Number) = mosquitto_time();\n  }\n  return Number L;\n}", "code_t": "int __cdecl mosquitto_packet_write(mosquitto *mosq) {\n  __int64 <span class=\"supfact\">write_length</span>;\n  _mosquitto_packet *<span class=\"supfact\">packet</span>;\n  if (!mosq)\n    return Number;\n  if (mosq->sock == Number)\n    return Number;\n  if (mosq->out_packet) {\n    if (!mosq->current_out_packet) {\n      mosq->current_out_packet = mosq->out_packet;\n      mosq->out_packet = mosq->out_packet->next;\n      if (!mosq->out_packet)\n        mosq->out_packet_last = Number L;\n    }\n  }\n  if (mosq->state == mosq_cs_connect_pending)\n    return Number;\n  while (mosq->current_out_packet) {\n    for (<span class=\"supfact\">packet</span> = mosq->current_out_packet;\n         <span class=\"supfact\">packet</span>->to_process;\n         <span class=\"supfact\">packet</span>->pos += <span class=\"supfact\">write_length</span>) {\n      <span class=\"supfact\">write_length</span> = mosquitto_net_write(\n          mosq, &<span class=\"supfact\">packet</span>->payload[<span class=\"supfact\">packet</span>->pos],\n          <span class=\"supfact\">packet</span>->to_process);\n      if (<span class=\"supfact\">write_length</span> <= Number) {\n        if (*_errno_location() == Number || *_errno_location() == Number)\n          return Number;\n        if (*_errno_location() == Number)\n          return Number;\n        return Number;\n      }\n      <span class=\"supfact\">packet</span>->to_process -= <span class=\"supfact\">write_length</span>;\n    }\n    mosq->current_out_packet = mosq->out_packet;\n    if (mosq->out_packet) {\n      mosq->out_packet = mosq->out_packet->next;\n      if (!mosq->out_packet)\n        mosq->out_packet_last = Number L;\n    }\n    mosquitto_packet_cleanup(<span class=\"supfact\">packet</span>);\n    mosquitto_free(<span class=\"supfact\">packet</span>);\n    mosq->last_msg_out = mosquitto_time();\n  }\n  return Number;\n}", "var": [{"name": "i", "type": "_mosquitto_packet *", "ref_name": "packet", "ref_type": "_mosquitto_packet *"}, {"name": "v2", "type": "__int64", "ref_name": "write_length", "ref_type": "__int64"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "Hoalle", "repo_name": "fillit", "path": "Hoalle/fillit/270e8a19d3b6966588d448d67a3425b3b959edfd5a0fe53e0850a8b54bd9ae3b", "path_in_repo": "Hoalle/fillit/libft/ft_itoa.o", "objdump": "00000000000000af <ft_itoa>:\n  af:\t55                   \tpush   %rbp\n  b0:\t48 89 e5             \tmov    %rsp,%rbp\n  b3:\t48 83 ec 20          \tsub    $0x20,%rsp\n  b7:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  ba:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  bd:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  c0:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  c7:\t81 7d ec 00 00 00 80 \tcmpl   $0x80000000,-0x14(%rbp)\n  ce:\t75 14                \tjne    e4 <ft_itoa+0x35>\n  d0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  d5:\te8 00 00 00 00       \tcallq  da <ft_itoa+0x2b>\n  da:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  de:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  e2:\teb 7c                \tjmp    160 <ft_itoa+0xb1>\n  e4:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  e8:\t79 28                \tjns    112 <ft_itoa+0x63>\n  ea:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  ee:\teb 22                \tjmp    112 <ft_itoa+0x63>\n  f0:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  f3:\t48 63 d0             \tmovslq %eax,%rdx\n  f6:\t48 69 d2 67 66 66 66 \timul   $0x66666667,%rdx,%rdx\n  fd:\t48 c1 ea 20          \tshr    $0x20,%rdx\n 101:\tc1 fa 02             \tsar    $0x2,%edx\n 104:\tc1 f8 1f             \tsar    $0x1f,%eax\n 107:\t29 c2                \tsub    %eax,%edx\n 109:\t89 d0                \tmov    %edx,%eax\n 10b:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 10e:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 112:\t83 7d f8 09          \tcmpl   $0x9,-0x8(%rbp)\n 116:\t7f d8                \tjg     f0 <ft_itoa+0x41>\n 118:\t83 7d f8 f7          \tcmpl   $0xfffffff7,-0x8(%rbp)\n 11c:\t7c d2                \tjl     f0 <ft_itoa+0x41>\n 11e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 121:\t83 c0 02             \tadd    $0x2,%eax\n 124:\t48 98                \tcltq   \n 126:\t48 89 c7             \tmov    %rax,%rdi\n 129:\te8 00 00 00 00       \tcallq  12e <ft_itoa+0x7f>\n 12e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 132:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 137:\t75 07                \tjne    140 <ft_itoa+0x91>\n 139:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 13e:\teb 20                \tjmp    160 <ft_itoa+0xb1>\n 140:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 144:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 147:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n 14a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 14e:\t89 ce                \tmov    %ecx,%esi\n 150:\t48 89 c7             \tmov    %rax,%rdi\n 153:\te8 a8 fe ff ff       \tcallq  0 <ft_write>\n 158:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 15c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 160:\tc9                   \tleaveq \n 161:\tc3                   \tretq   \n", "code_s": "_BYTE *__fastcall ft_itoa(int a1) {\n  _BYTE *result;\n  _BYTE *<span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v3</span> = a1;\n  <span class=\"supfact\">v4</span> = Number;\n  if (a1 == Number)\n    return (_BYTE *)ft_strdup(String);\n  if (a1 < Number)\n    <span class=\"supfact\">v4</span> = Number;\n  while (<span class=\"supfact\">v3</span> > Number || <span class=\"supfact\">v3</span> < Number) {\n    <span class=\"supfact\">v3</span> /= Number;\n    ++<span class=\"supfact\">v4</span>;\n  }\n  <span class=\"supfact\">v2</span> = malloc(<span class=\"supfact\">v4</span> + Number);\n  if (<span class=\"supfact\">v2</span>)\n    result = ft_write(<span class=\"supfact\">v2</span>, a1, <span class=\"supfact\">v4</span> + Number);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "char *__cdecl ft_itoa(int n) {\n  char *result;\n  char *<span class=\"supfact\">str</span>;\n  int <span class=\"supfact\">temp</span>;\n  int <span class=\"supfact\">len</span>;\n  <span class=\"supfact\">temp</span> = n;\n  <span class=\"supfact\">len</span> = Number;\n  if (n == Number)\n    return (char *)ft_strdup(String);\n  if (n < Number)\n    <span class=\"supfact\">len</span> = Number;\n  while (<span class=\"supfact\">temp</span> > Number || <span class=\"supfact\">temp</span> < Number) {\n    <span class=\"supfact\">temp</span> /= Number;\n    ++<span class=\"supfact\">len</span>;\n  }\n  <span class=\"supfact\">str</span> = (char *)malloc(<span class=\"supfact\">len</span> + Number);\n  if (<span class=\"supfact\">str</span>)\n    result = ft_write(<span class=\"supfact\">str</span>, n, <span class=\"supfact\">len</span> + Number);\n  else\n    result = Number L;\n  return result;\n}", "var": [{"name": "v4", "type": "int", "ref_name": "len", "ref_type": "int"}, {"name": "v3", "type": "int", "ref_name": "temp", "ref_type": "int"}, {"name": "v2", "type": "char *", "ref_name": "str", "ref_type": "char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "vmware", "repo_name": "likewise-open", "path": "vmware/likewise-open/bb255da41fd974ec8429252b9a8a1b5f1748bbff7f4eb5f527b7322cab998ced", "path_in_repo": "vmware/likewise-open/openssl/test/rsa_test", "objdump": "00000000004069bd <engine_unlocked_init>:\n  4069bd:\t55                   \tpush   %rbp\n  4069be:\t48 89 e5             \tmov    %rsp,%rbp\n  4069c1:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4069c5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4069c9:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  4069d0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4069d4:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n  4069da:\t85 c0                \ttest   %eax,%eax\n  4069dc:\t75 21                \tjne    4069ff <engine_unlocked_init+0x42>\n  4069de:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4069e2:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n  4069e6:\t48 85 c0             \ttest   %rax,%rax\n  4069e9:\t74 14                \tje     4069ff <engine_unlocked_init+0x42>\n  4069eb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4069ef:\t48 8b 50 60          \tmov    0x60(%rax),%rdx\n  4069f3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4069f7:\t48 89 c7             \tmov    %rax,%rdi\n  4069fa:\tff d2                \tcallq  *%rdx\n  4069fc:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4069ff:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  406a03:\t74 2e                \tje     406a33 <engine_unlocked_init+0x76>\n  406a05:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406a09:\t8b 80 94 00 00 00    \tmov    0x94(%rax),%eax\n  406a0f:\t8d 50 01             \tlea    0x1(%rax),%edx\n  406a12:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406a16:\t89 90 94 00 00 00    \tmov    %edx,0x94(%rax)\n  406a1c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406a20:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n  406a26:\t8d 50 01             \tlea    0x1(%rax),%edx\n  406a29:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406a2d:\t89 90 98 00 00 00    \tmov    %edx,0x98(%rax)\n  406a33:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  406a36:\tc9                   \tleaveq \n  406a37:\tc3                   \tretq   ", "code_s": "__int64 __fastcall engine_unlocked_init(__int64 a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = Number;\n  if (!*(_DWORD *)(a1 + Number) && *(_QWORD *)(a1 + Number))\n    <span class=\"supfact\">v2</span> = (*(__int64(__fastcall **)(__int64))(a1 + Number))(a1);\n  if (<span class=\"supfact\">v2</span>) {\n    ++*(_DWORD *)(a1 + Number);\n    ++*(_DWORD *)(a1 + Number);\n  }\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "int __cdecl engine_unlocked_init(ENGINE *e) {\n  int <span class=\"supfact\">to_return</span>;\n  <span class=\"supfact\">to_return</span> = Number;\n  if (!e->funct_ref && e->init)\n    <span class=\"supfact\">to_return</span> = e->init(e);\n  if (<span class=\"supfact\">to_return</span>) {\n    ++e->struct_ref;\n    ++e->funct_ref;\n  }\n  return <span class=\"supfact\">to_return</span>;\n}", "var": [{"name": "v2", "type": "int", "ref_name": "to_return", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "YijingWang", "repo_name": "linux-pci", "path": "YijingWang/linux-pci/59ae980c1577000cff44b73c732019dbe21eee6bf59160217d4550dc2ffc55cb", "path_in_repo": "YijingWang/linux-pci/tools/perf/ui/browsers/header.o", "objdump": "0000000000000403 <tui__header_window>:\n 403:\t55                   \tpush   %rbp\n 404:\t48 89 e5             \tmov    %rsp,%rbp\n 407:\t48 83 ec 60          \tsub    $0x60,%rsp\n 40b:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n 40f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 416:\t00 00 \n 418:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 41c:\t31 c0                \txor    %eax,%eax\n 41e:\tc7 45 bc 00 00 00 00 \tmovl   $0x0,-0x44(%rbp)\n 425:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n 429:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 42d:\t48 89 d6             \tmov    %rdx,%rsi\n 430:\t48 89 c7             \tmov    %rax,%rdi\n 433:\te8 00 00 00 00       \tcallq  438 <tui__header_window+0x35>\n 438:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 43c:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 440:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 444:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 448:\t48 83 e8 40          \tsub    $0x40,%rax\n 44c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 450:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n 454:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 458:\tba 01 00 00 00       \tmov    $0x1,%edx\n 45d:\t48 89 ce             \tmov    %rcx,%rsi\n 460:\t48 89 c7             \tmov    %rax,%rdi\n 463:\te8 00 00 00 00       \tcallq  468 <tui__header_window+0x65>\n 468:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 46c:\t48 89 c7             \tmov    %rax,%rdi\n 46f:\te8 00 00 00 00       \tcallq  474 <tui__header_window+0x71>\n 474:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 478:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 47c:\tc7 45 bc 00 00 00 00 \tmovl   $0x0,-0x44(%rbp)\n 483:\teb 09                \tjmp    48e <tui__header_window+0x8b>\n 485:\t83 45 bc 01          \taddl   $0x1,-0x44(%rbp)\n 489:\t48 83 45 d0 01       \taddq   $0x1,-0x30(%rbp)\n 48e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 492:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n 497:\t48 89 c7             \tmov    %rax,%rdi\n 49a:\te8 00 00 00 00       \tcallq  49f <tui__header_window+0x9c>\n 49f:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 4a3:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n 4a8:\t75 db                \tjne    485 <tui__header_window+0x82>\n 4aa:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n 4ad:\t83 c0 01             \tadd    $0x1,%eax\n 4b0:\t48 98                \tcltq   \n 4b2:\tbe 08 00 00 00       \tmov    $0x8,%esi\n 4b7:\t48 89 c7             \tmov    %rax,%rdi\n 4ba:\te8 00 00 00 00       \tcallq  4bf <tui__header_window+0xbc>\n 4bf:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 4c3:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 4c8:\t0f 84 9d 00 00 00    \tje     56b <tui__header_window+0x168>\n 4ce:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 4d2:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 4d6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 4da:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 4de:\t48 89 10             \tmov    %rdx,(%rax)\n 4e1:\tc7 45 b8 01 00 00 00 \tmovl   $0x1,-0x48(%rbp)\n 4e8:\teb 2e                \tjmp    518 <tui__header_window+0x115>\n 4ea:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 4ee:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 4f2:\t48 89 55 d0          \tmov    %rdx,-0x30(%rbp)\n 4f6:\tc6 00 00             \tmovb   $0x0,(%rax)\n 4f9:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n 4fc:\t48 98                \tcltq   \n 4fe:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 505:\t00 \n 506:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 50a:\t48 01 c2             \tadd    %rax,%rdx\n 50d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 511:\t48 89 02             \tmov    %rax,(%rdx)\n 514:\t83 45 b8 01          \taddl   $0x1,-0x48(%rbp)\n 518:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 51c:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n 521:\t48 89 c7             \tmov    %rax,%rdi\n 524:\te8 00 00 00 00       \tcallq  529 <tui__header_window+0x126>\n 529:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 52d:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n 532:\t75 b6                \tjne    4ea <tui__header_window+0xe7>\n 534:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n 537:\t83 c0 01             \tadd    $0x1,%eax\n 53a:\t39 45 b8             \tcmp    %eax,-0x48(%rbp)\n 53d:\t74 19                \tje     558 <tui__header_window+0x155>\n 53f:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 544:\tba 77 00 00 00       \tmov    $0x77,%edx\n 549:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 54e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 553:\te8 00 00 00 00       \tcallq  558 <tui__header_window+0x155>\n 558:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 55c:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n 55f:\t48 89 d6             \tmov    %rdx,%rsi\n 562:\t89 c7                \tmov    %eax,%edi\n 564:\te8 11 fe ff ff       \tcallq  37a <ui__list_menu>\n 569:\teb 01                \tjmp    56c <tui__header_window+0x169>\n 56b:\t90                   \tnop\n 56c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 570:\t48 89 c7             \tmov    %rax,%rdi\n 573:\te8 00 00 00 00       \tcallq  578 <tui__header_window+0x175>\n 578:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 57c:\t48 89 c7             \tmov    %rax,%rdi\n 57f:\te8 00 00 00 00       \tcallq  584 <tui__header_window+0x181>\n 584:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 589:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 58d:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 594:\t00 00 \n 596:\t74 05                \tje     59d <tui__header_window+0x19a>\n 598:\te8 00 00 00 00       \tcallq  59d <tui__header_window+0x19a>\n 59d:\tc9                   \tleaveq \n 59e:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall tui__header_window(__int64 a1) {\n  char *v1;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  char *<span class=\"supfact\">bufloc</span>;\n  size_t <span class=\"supfact\">sizeloc</span>;\n  char *<span class=\"supfact\">s</span>;\n  FILE *<span class=\"supfact\">stream</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  <span class=\"supfact\">stream</span> =\n      open_memstream(&<span class=\"supfact\">bufloc</span>, &<span class=\"supfact\">sizeloc</span>);\n  <span class=\"supfact\">v9</span> = a1;\n  <span class=\"supfact\">v10</span> = a1 - Number;\n  perf_header__fprintf_info(a1 - Number, <span class=\"supfact\">stream</span>, Number L);\n  fclose(<span class=\"supfact\">stream</span>);\n  <span class=\"supfact\">s</span> = <span class=\"supfact\">bufloc</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">s</span> = strchr(<span class=\"supfact\">s</span>, Number);\n    if (!<span class=\"supfact\">s</span>)\n      break;\n    ++<span class=\"supfact\">s</span>;\n  }\n  <span class=\"supfact\">ptr</span> = calloc(<span class=\"supfact\">i</span> + Number, Number);\n  if (<span class=\"supfact\">ptr</span>) {\n    <span class=\"supfact\">s</span> = <span class=\"supfact\">bufloc</span>;\n    *(_QWORD *)<span class=\"supfact\">ptr</span> = <span class=\"supfact\">bufloc</span>;\n    for (<span class=\"supfact\">j</span> = Number;; ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">s</span> = strchr(<span class=\"supfact\">s</span>, Number);\n      if (!<span class=\"supfact\">s</span>)\n        break;\n      v1 = <span class=\"supfact\">s</span>++;\n      *v1 = Number;\n      *((_QWORD *)<span class=\"supfact\">ptr</span> + <span class=\"supfact\">j</span>) = <span class=\"supfact\">s</span>;\n    }\n    if (<span class=\"supfact\">j</span> != <span class=\"supfact\">i</span> + Number)\n      _assert_fail(String, String, Number, String);\n    ui__list_menu(<span class=\"supfact\">i</span>, (__int64)<span class=\"supfact\">ptr</span>);\n  }\n  free(<span class=\"supfact\">ptr</span>);\n  free(<span class=\"supfact\">bufloc</span>);\n  return Number L;\n}", "code_t": "int __cdecl tui__header_window(perf_session_env *env) {\n  char *v1;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">argc</span>;\n  char *<span class=\"supfact\">ptr</span>;\n  size_t <span class=\"supfact\">size</span>;\n  char *<span class=\"supfact\">pos</span>;\n  FILE *<span class=\"supfact\">fp</span>;\n  const perf_session_env *<span class=\"supfact\">__mptr</span>;\n  perf_session *<span class=\"supfact\">session</span>;\n  char **<span class=\"supfact\">argv</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  <span class=\"supfact\">fp</span> =\n      open_memstream(&<span class=\"supfact\">ptr</span>, &<span class=\"supfact\">size</span>);\n  <span class=\"supfact\">__mptr</span> = env;\n  <span class=\"supfact\">session</span> = (perf_session *)&env[Number].nr_cmdline;\n  perf_header__fprintf_info(&env[Number].nr_cmdline, <span class=\"supfact\">fp</span>,\n                            Number L);\n  fclose(<span class=\"supfact\">fp</span>);\n  <span class=\"supfact\">pos</span> = <span class=\"supfact\">ptr</span>;\n  for (<span class=\"supfact\">argc</span> = Number;; ++<span class=\"supfact\">argc</span>) {\n    <span class=\"supfact\">pos</span> = strchr(<span class=\"supfact\">pos</span>, Number);\n    if (!<span class=\"supfact\">pos</span>)\n      break;\n    ++<span class=\"supfact\">pos</span>;\n  }\n  <span class=\"supfact\">argv</span> = (char **)calloc(<span class=\"supfact\">argc</span> + Number, Number);\n  if (<span class=\"supfact\">argv</span>) {\n    <span class=\"supfact\">pos</span> = <span class=\"supfact\">ptr</span>;\n    *<span class=\"supfact\">argv</span> = <span class=\"supfact\">ptr</span>;\n    for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">pos</span> = strchr(<span class=\"supfact\">pos</span>, Number);\n      if (!<span class=\"supfact\">pos</span>)\n        break;\n      v1 = <span class=\"supfact\">pos</span>++;\n      *v1 = Number;\n      <span class=\"supfact\">argv</span>[<span class=\"supfact\">i</span>] = <span class=\"supfact\">pos</span>;\n    }\n    if (<span class=\"supfact\">i</span> != <span class=\"supfact\">argc</span> + Number)\n      _assert_fail(String, String, Number, String);\n    ui__list_menu(<span class=\"supfact\">argc</span>, <span class=\"supfact\">argv</span>);\n  }\n  free(<span class=\"supfact\">argv</span>);\n  free(<span class=\"supfact\">ptr</span>);\n  return Number;\n}", "var": [{"name": "v12", "type": "unsigned __int64", "ref_name": "v12", "ref_type": "unsigned __int64"}, {"name": "ptr", "type": "char * *", "ref_name": "argv", "ref_type": "char * *"}, {"name": "v10", "type": "perf_session *", "ref_name": "session", "ref_type": "perf_session *"}, {"name": "v9", "type": "const perf_session_env *", "ref_name": "__mptr", "ref_type": "const perf_session_env *"}, {"name": "stream", "type": "FILE *", "ref_name": "fp", "ref_type": "FILE *"}, {"name": "s", "type": "char *", "ref_name": "pos", "ref_type": "char *"}, {"name": "sizeloc", "type": "size_t", "ref_name": "size", "ref_type": "size_t"}, {"name": "bufloc", "type": "char *", "ref_name": "ptr", "ref_type": "char *"}, {"name": "i", "type": "int", "ref_name": "argc", "ref_type": "int"}, {"name": "j", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "filipe3x", "repo_name": "gerevendas", "path": "filipe3x/gerevendas/7498c86365ee7facd68553f282277b9b8b8d1196f265fb8f3596aeea2480982b", "path_in_repo": "filipe3x/gerevendas//gestao_filiais.o", "objdump": "0000000000001fb5 <produtosNinguemComprou_filial>:\n    1fb5:\t55                   \tpush   %rbp\n    1fb6:\t48 89 e5             \tmov    %rsp,%rbp\n    1fb9:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1fbd:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1fc1:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    1fc5:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n    1fc8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1fcc:\t48 89 c7             \tmov    %rax,%rdi\n    1fcf:\te8 00 00 00 00       \tcallq  1fd4 <produtosNinguemComprou_filial+0x1f>\n    1fd4:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    1fd7:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    1fda:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1fdf:\t89 c7                \tmov    %eax,%edi\n    1fe1:\te8 00 00 00 00       \tcallq  1fe6 <produtosNinguemComprou_filial+0x31>\n    1fe6:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1fea:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    1ff1:\te9 88 00 00 00       \tjmpq   207e <produtosNinguemComprou_filial+0xc9>\n    1ff6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ffb:\te8 00 00 00 00       \tcallq  2000 <produtosNinguemComprou_filial+0x4b>\n    2000:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2004:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    2007:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    200b:\t89 d6                \tmov    %edx,%esi\n    200d:\t48 89 c7             \tmov    %rax,%rdi\n    2010:\te8 00 00 00 00       \tcallq  2015 <produtosNinguemComprou_filial+0x60>\n    2015:\t48 89 c2             \tmov    %rax,%rdx\n    2018:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    201c:\t48 89 d6             \tmov    %rdx,%rsi\n    201f:\t48 89 c7             \tmov    %rax,%rdi\n    2022:\te8 00 00 00 00       \tcallq  2027 <produtosNinguemComprou_filial+0x72>\n    2027:\teb 2e                \tjmp    2057 <produtosNinguemComprou_filial+0xa2>\n    2029:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    202c:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    2030:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2034:\t48 89 ce             \tmov    %rcx,%rsi\n    2037:\t48 89 c7             \tmov    %rax,%rdi\n    203a:\te8 00 00 00 00       \tcallq  203f <produtosNinguemComprou_filial+0x8a>\n    203f:\t48 85 c0             \ttest   %rax,%rax\n    2042:\t75 13                \tjne    2057 <produtosNinguemComprou_filial+0xa2>\n    2044:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    2048:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    204c:\t48 89 d6             \tmov    %rdx,%rsi\n    204f:\t48 89 c7             \tmov    %rax,%rdi\n    2052:\te8 00 00 00 00       \tcallq  2057 <produtosNinguemComprou_filial+0xa2>\n    2057:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    205b:\t48 89 c7             \tmov    %rax,%rdi\n    205e:\te8 00 00 00 00       \tcallq  2063 <produtosNinguemComprou_filial+0xae>\n    2063:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    2067:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    206c:\t75 bb                \tjne    2029 <produtosNinguemComprou_filial+0x74>\n    206e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2072:\t48 89 c7             \tmov    %rax,%rdi\n    2075:\te8 00 00 00 00       \tcallq  207a <produtosNinguemComprou_filial+0xc5>\n    207a:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    207e:\t83 7d fc 1a          \tcmpl   $0x1a,-0x4(%rbp)\n    2082:\t0f 8e 6e ff ff ff    \tjle    1ff6 <produtosNinguemComprou_filial+0x41>\n    2088:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    208c:\tc9                   \tleaveq \n    208d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall produtosNinguemComprou_filial(__int64 a1, __int64 a2,\n                                                 int a3) {\n  __int64 v3;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v9</span> = calcularTotalProdutos(a2);\n  <span class=\"supfact\">v8</span> = paginaResultadosInit(<span class=\"supfact\">v9</span>, Number L);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v7</span> = avl_trav_alloc();\n    v3 = getCatalogoProdutosPorIndice(a2, (unsigned int)<span class=\"supfact\">i</span>);\n    avl_t_init(<span class=\"supfact\">v7</span>, v3);\n    while (Number) {\n      <span class=\"supfact\">v6</span> = avl_t_next(<span class=\"supfact\">v7</span>);\n      if (!<span class=\"supfact\">v6</span>)\n        break;\n      if (!produtoFoiVendido_filial(a1, <span class=\"supfact\">v6</span>, a3))\n        inserirResultadoLista(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v6</span>);\n    }\n    freeTravessiaCatalogoProdutos(<span class=\"supfact\">v7</span>);\n  }\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "PAGINA_RESULTADOS __cdecl produtosNinguemComprou_filial(\n    MODULO_GESTAO_FILIAIS modulo, CATALOGO_PRODUTOS catalogo, Filial_st f) {\n  __int64 v3;\n  char *<span class=\"supfact\">produto</span>;\n  TravessiaModulo <span class=\"supfact\">trav</span>;\n  paginaResultados *<span class=\"supfact\">pagina</span>;\n  unsigned int <span class=\"supfact\">totalProdutos</span>;\n  int <span class=\"supfact\">ind</span>;\n  <span class=\"supfact\">totalProdutos</span> = calcularTotalProdutos(catalogo);\n  <span class=\"supfact\">pagina</span> = (paginaResultados *)paginaResultadosInit(\n      <span class=\"supfact\">totalProdutos</span>, Number L);\n  for (<span class=\"supfact\">ind</span> = Number; <span class=\"supfact\">ind</span> <= Number;\n       ++<span class=\"supfact\">ind</span>) {\n    <span class=\"supfact\">trav</span> = (TravessiaModulo)avl_trav_alloc();\n    v3 = getCatalogoProdutosPorIndice(catalogo,\n                                      (unsigned int)<span class=\"supfact\">ind</span>);\n    avl_t_init(<span class=\"supfact\">trav</span>, v3);\n    while (Number) {\n      <span class=\"supfact\">produto</span> = (char *)avl_t_next(<span class=\"supfact\">trav</span>);\n      if (!<span class=\"supfact\">produto</span>)\n        break;\n      if (!produtoFoiVendido_filial(modulo, <span class=\"supfact\">produto</span>, f))\n        inserirResultadoLista(<span class=\"supfact\">pagina</span>, <span class=\"supfact\">produto</span>);\n    }\n    freeTravessiaCatalogoProdutos(<span class=\"supfact\">trav</span>);\n  }\n  return <span class=\"supfact\">pagina</span>;\n}", "var": [{"name": "i", "type": "int", "ref_name": "ind", "ref_type": "int"}, {"name": "v9", "type": "int", "ref_name": "totalProdutos", "ref_type": "unsigned int"}, {"name": "v8", "type": "paginaResultados *", "ref_name": "pagina", "ref_type": "paginaResultados *"}, {"name": "v7", "type": "__unk__", "ref_name": "trav", "ref_type": "__unk__"}, {"name": "v6", "type": "paginaResultados *", "ref_name": "produto", "ref_type": "char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "woshinieao", "repo_name": "neo-h3", "path": "woshinieao/neo-h3/7a3fc60398dec2123c43f29d2cc369e004a2c6f4a9d6ed330b6b889355cb5755", "path_in_repo": "woshinieao/neo-h3/buildroot/target/dragonboard/src/lib/salsa-lib-0.0.22/src/pcm_params.o", "objdump": "000000000000140c <_snd_pcm_hw_param_get>:\n    140c:\t55                   \tpush   %rbp\n    140d:\t48 89 e5             \tmov    %rsp,%rbp\n    1410:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1414:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1418:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    141b:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    141f:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    1423:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    1426:\t89 c7                \tmov    %eax,%edi\n    1428:\te8 f3 fc ff ff       \tcallq  1120 <hw_is_mask>\n    142d:\t85 c0                \ttest   %eax,%eax\n    142f:\t74 73                \tje     14a4 <_snd_pcm_hw_param_get+0x98>\n    1431:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    1434:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1438:\t89 d6                \tmov    %edx,%esi\n    143a:\t48 89 c7             \tmov    %rax,%rdi\n    143d:\te8 79 fd ff ff       \tcallq  11bb <hw_param_mask_c>\n    1442:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1446:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    144a:\t48 89 c7             \tmov    %rax,%rdi\n    144d:\te8 d7 ec ff ff       \tcallq  129 <_snd_mask_empty>\n    1452:\t85 c0                \ttest   %eax,%eax\n    1454:\t75 10                \tjne    1466 <_snd_pcm_hw_param_get+0x5a>\n    1456:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    145a:\t48 89 c7             \tmov    %rax,%rdi\n    145d:\te8 ac ee ff ff       \tcallq  30e <snd_mask_single>\n    1462:\t85 c0                \ttest   %eax,%eax\n    1464:\t75 0a                \tjne    1470 <_snd_pcm_hw_param_get+0x64>\n    1466:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    146b:\te9 c0 00 00 00       \tjmpq   1530 <_snd_pcm_hw_param_get+0x124>\n    1470:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n    1475:\t74 0a                \tje     1481 <_snd_pcm_hw_param_get+0x75>\n    1477:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    147b:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    1481:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    1486:\t74 12                \tje     149a <_snd_pcm_hw_param_get+0x8e>\n    1488:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    148c:\t48 89 c7             \tmov    %rax,%rdi\n    148f:\te8 5c f0 ff ff       \tcallq  4f0 <snd_mask_min>\n    1494:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1498:\t89 02                \tmov    %eax,(%rdx)\n    149a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    149f:\te9 8c 00 00 00       \tjmpq   1530 <_snd_pcm_hw_param_get+0x124>\n    14a4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    14a7:\t89 c7                \tmov    %eax,%edi\n    14a9:\te8 93 fc ff ff       \tcallq  1141 <hw_is_interval>\n    14ae:\t85 c0                \ttest   %eax,%eax\n    14b0:\t74 79                \tje     152b <_snd_pcm_hw_param_get+0x11f>\n    14b2:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    14b5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    14b9:\t89 d6                \tmov    %edx,%esi\n    14bb:\t48 89 c7             \tmov    %rax,%rdi\n    14be:\te8 1a fd ff ff       \tcallq  11dd <hw_param_interval_c>\n    14c3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    14c7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    14cb:\t48 89 c7             \tmov    %rax,%rdi\n    14ce:\te8 ef f3 ff ff       \tcallq  8c2 <snd_interval_empty>\n    14d3:\t85 c0                \ttest   %eax,%eax\n    14d5:\t75 10                \tjne    14e7 <_snd_pcm_hw_param_get+0xdb>\n    14d7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    14db:\t48 89 c7             \tmov    %rax,%rdi\n    14de:\te8 fa f3 ff ff       \tcallq  8dd <snd_interval_single>\n    14e3:\t85 c0                \ttest   %eax,%eax\n    14e5:\t75 07                \tjne    14ee <_snd_pcm_hw_param_get+0xe2>\n    14e7:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    14ec:\teb 42                \tjmp    1530 <_snd_pcm_hw_param_get+0x124>\n    14ee:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n    14f3:\t74 14                \tje     1509 <_snd_pcm_hw_param_get+0xfd>\n    14f5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    14f9:\t0f b6 40 08          \tmovzbl 0x8(%rax),%eax\n    14fd:\t83 e0 01             \tand    $0x1,%eax\n    1500:\t0f b6 d0             \tmovzbl %al,%edx\n    1503:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1507:\t89 10                \tmov    %edx,(%rax)\n    1509:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    150e:\t74 14                \tje     1524 <_snd_pcm_hw_param_get+0x118>\n    1510:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1514:\t48 89 c7             \tmov    %rax,%rdi\n    1517:\te8 0b f4 ff ff       \tcallq  927 <snd_interval_value>\n    151c:\t89 c2                \tmov    %eax,%edx\n    151e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1522:\t89 10                \tmov    %edx,(%rax)\n    1524:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1529:\teb 05                \tjmp    1530 <_snd_pcm_hw_param_get+0x124>\n    152b:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    1530:\tc9                   \tleaveq \n    1531:\tc3                   \tretq   ", "code_s": "__int64 __fastcall snd_pcm_hw_param_get(__int64 a1, int a2, _DWORD *a3,\n                                        int *a4) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  if (hw_is_mask(a2)) {\n    <span class=\"supfact\">v7</span> = hw_param_mask_c(a1, a2);\n    if (!(unsigned int)snd_mask_empty(<span class=\"supfact\">v7</span>) &&\n        (unsigned int)snd_mask_single(<span class=\"supfact\">v7</span>)) {\n      if (a4)\n        *a4 = Number;\n      if (a3)\n        *a3 = snd_mask_min(<span class=\"supfact\">v7</span>);\n      result = Number L;\n    } else {\n      result = Number L;\n    }\n  } else if (hw_is_interval(a2)) {\n    <span class=\"supfact\">v8</span> = hw_param_interval_c(a1, a2);\n    if (!snd_interval_empty(<span class=\"supfact\">v8</span>) &&\n        snd_interval_single(<span class=\"supfact\">v8</span>)) {\n      if (a4)\n        *a4 = *(_BYTE *)(<span class=\"supfact\">v8</span> + Number) & Number;\n      if (a3)\n        *a3 = snd_interval_value((unsigned int *)<span class=\"supfact\">v8</span>);\n      result = Number L;\n    } else {\n      result = Number L;\n    }\n  } else {\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl snd_pcm_hw_param_get(const snd_pcm_hw_params_t *params, int var,\n                                 unsigned int *val, int *dir) {\n  int result;\n  const snd_mask_t *<span class=\"supfact\">mask</span>;\n  const snd_interval_t *<span class=\"supfact\">i</span>;\n  if (hw_is_mask(var)) {\n    <span class=\"supfact\">mask</span> = hw_param_mask_c(params, var);\n    if (!snd_mask_empty(<span class=\"supfact\">mask</span>) &&\n        snd_mask_single(<span class=\"supfact\">mask</span>)) {\n      if (dir)\n        *dir = Number;\n      if (val)\n        *val = snd_mask_min(<span class=\"supfact\">mask</span>);\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else if (hw_is_interval(var)) {\n    <span class=\"supfact\">i</span> = hw_param_interval_c(params, var);\n    if (!snd_interval_empty(<span class=\"supfact\">i</span>) &&\n        snd_interval_single(<span class=\"supfact\">i</span>)) {\n      if (dir)\n        *dir = *((_BYTE *)<span class=\"supfact\">i</span> + Number) & Number;\n      if (val)\n        *val = snd_interval_value(<span class=\"supfact\">i</span>);\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else {\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v8", "type": "nl_cb *", "ref_name": "i", "ref_type": "__unk__"}, {"name": "v7", "type": "ASN1_STRING *", "ref_name": "mask", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "deemka", "repo_name": "tw-mlat", "path": "deemka/tw-mlat/c75fa404505e1d87ccfee211ea951781b5fcb347df3bcd91175bc786c669b7cf", "path_in_repo": "deemka/tw-mlat//calibration", "objdump": "000000000040ade8 <median>:\n  40ade8:\t55                   \tpush   %rbp\n  40ade9:\t48 89 e5             \tmov    %rsp,%rbp\n  40adec:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40adf0:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40adf4:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40adf8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40adfc:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40ae00:\t48 89 c7             \tmov    %rax,%rdi\n  40ae03:\te8 a8 73 ff ff       \tcallq  4021b0 <malloc@plt>\n  40ae08:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40ae0c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40ae10:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40ae17:\t00 \n  40ae18:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  40ae1c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40ae20:\t48 89 ce             \tmov    %rcx,%rsi\n  40ae23:\t48 89 c7             \tmov    %rax,%rdi\n  40ae26:\te8 75 73 ff ff       \tcallq  4021a0 <memcpy@plt>\n  40ae2b:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n  40ae2f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40ae33:\tb9 c2 ad 40 00       \tmov    $0x40adc2,%ecx\n  40ae38:\tba 08 00 00 00       \tmov    $0x8,%edx\n  40ae3d:\t48 89 c7             \tmov    %rax,%rdi\n  40ae40:\te8 3b 72 ff ff       \tcallq  402080 <qsort@plt>\n  40ae45:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40ae49:\t48 d1 e8             \tshr    %rax\n  40ae4c:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40ae53:\t00 \n  40ae54:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40ae58:\t48 01 d0             \tadd    %rdx,%rax\n  40ae5b:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n  40ae5f:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n  40ae64:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40ae68:\t48 89 c7             \tmov    %rax,%rdi\n  40ae6b:\te8 c0 71 ff ff       \tcallq  402030 <free@plt>\n  40ae70:\tf2 0f 10 45 f0       \tmovsd  -0x10(%rbp),%xmm0\n  40ae75:\tc9                   \tleaveq \n  40ae76:\tc3                   \tretq   ", "code_s": "double __fastcall median(const void *a1, size_t a2) {\n  double <span class=\"supfact\">v3</span>;\n  void *<span class=\"supfact\">dest</span>;\n  <span class=\"supfact\">dest</span> = malloc(Number * a2);\n  memcpy(<span class=\"supfact\">dest</span>, a1, Number * a2);\n  qsort(<span class=\"supfact\">dest</span>, a2, Number, (__compar_fn_t)compare_flt);\n  <span class=\"supfact\">v3</span> = *((double *)<span class=\"supfact\">dest</span> + (a2 >> Number));\n  free(<span class=\"supfact\">dest</span>);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "double __cdecl median(const double *const in, const size_t len) {\n  double <span class=\"supfact\">res</span>;\n  double *<span class=\"supfact\">copy</span>;\n  <span class=\"supfact\">copy</span> = (double *)malloc(Number * len);\n  memcpy(<span class=\"supfact\">copy</span>, in, Number * len);\n  qsort(<span class=\"supfact\">copy</span>, len, Number, (__compar_fn_t)compare_flt);\n  <span class=\"supfact\">res</span> = <span class=\"supfact\">copy</span>[len >> Number];\n  free(<span class=\"supfact\">copy</span>);\n  return <span class=\"supfact\">res</span>;\n}", "var": [{"name": "dest", "type": "float *", "ref_name": "copy", "ref_type": "double *"}, {"name": "v3", "type": "double", "ref_name": "res", "ref_type": "double"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "revast", "repo_name": "dvj", "path": "revast/dvj/4ad1f5dedc29a8d8afdb61bd6473f0f43fb697bac2081fa4b6e35d8ede91bc65", "path_in_repo": "revast/dvj/dep/src/ffmpeg/libavformat/rmenc.o", "objdump": "0000000000000dae <rm_write_header>:\n     dae:\t48 83 ec 38          \tsub    $0x38,%rsp\n     db2:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     db7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     dbc:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     dc0:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n     dc5:\tc7 44 24 2c 00 00 00 \tmovl   $0x0,0x2c(%rsp)\n     dcc:\t00 \n     dcd:\te9 77 01 00 00       \tjmpq   f49 <rm_write_header+0x19b>\n     dd2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     dd7:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n     ddb:\t48 63 d2             \tmovslq %edx,%rdx\n     dde:\t48 83 c2 06          \tadd    $0x6,%rdx\n     de2:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n     de6:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n     dea:\t89 50 04             \tmov    %edx,0x4(%rax)\n     ded:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     df2:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n     df6:\t48 63 d2             \tmovslq %edx,%rdx\n     df9:\t48 83 c2 06          \tadd    $0x6,%rdx\n     dfd:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n     e01:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     e05:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n     e0a:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n     e0e:\t48 63 d0             \tmovslq %eax,%rdx\n     e11:\t48 89 d0             \tmov    %rdx,%rax\n     e14:\t48 c1 e0 02          \tshl    $0x2,%rax\n     e18:\t48 01 d0             \tadd    %rdx,%rax\n     e1b:\t48 c1 e0 03          \tshl    $0x3,%rax\n     e1f:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n     e24:\t48 01 d0             \tadd    %rdx,%rax\n     e27:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n     e2c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     e31:\tba 28 00 00 00       \tmov    $0x28,%edx\n     e36:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     e3b:\t48 89 c7             \tmov    %rax,%rdi\n     e3e:\te8 00 00 00 00       \tcallq  e43 <rm_write_header+0x95>\n     e43:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     e48:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n     e4c:\t89 50 1c             \tmov    %edx,0x1c(%rax)\n     e4f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     e54:\t8b 50 08             \tmov    0x8(%rax),%edx\n     e57:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     e5c:\t89 50 0c             \tmov    %edx,0xc(%rax)\n     e5f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     e64:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n     e69:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n     e6d:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     e72:\t8b 80 08 01 00 00    \tmov    0x108(%rax),%eax\n     e78:\t85 c0                \ttest   %eax,%eax\n     e7a:\t74 65                \tje     ee1 <rm_write_header+0x133>\n     e7c:\t83 f8 01             \tcmp    $0x1,%eax\n     e7f:\t0f 85 b8 00 00 00    \tjne    f3d <rm_write_header+0x18f>\n     e85:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     e8a:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n     e8f:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n     e93:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     e98:\t8b 40 50             \tmov    0x50(%rax),%eax\n     e9b:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n     e9f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     ea4:\t8b 40 5c             \tmov    0x5c(%rax),%eax\n     ea7:\tf3 0f 2a c8          \tcvtsi2ss %eax,%xmm1\n     eab:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n     eaf:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     eb4:\tf3 0f 11 40 10       \tmovss  %xmm0,0x10(%rax)\n     eb9:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     ebe:\tc7 40 08 00 04 00 00 \tmovl   $0x400,0x8(%rax)\n     ec5:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     eca:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     ed0:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     ed5:\t8b 10                \tmov    (%rax),%edx\n     ed7:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     edc:\t89 50 18             \tmov    %edx,0x18(%rax)\n     edf:\teb 63                \tjmp    f44 <rm_write_header+0x196>\n     ee1:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     ee6:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n     eeb:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n     eef:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     ef4:\t8b 40 30             \tmov    0x30(%rax),%eax\n     ef7:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n     efb:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     f00:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n     f03:\tf3 0f 2a c8          \tcvtsi2ss %eax,%xmm1\n     f07:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n     f0b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     f10:\tf3 0f 11 40 10       \tmovss  %xmm0,0x10(%rax)\n     f15:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     f1a:\tc7 40 08 00 10 00 00 \tmovl   $0x1000,0x8(%rax)\n     f21:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     f26:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     f2c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     f31:\t8b 10                \tmov    (%rax),%edx\n     f33:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     f38:\t89 50 18             \tmov    %edx,0x18(%rax)\n     f3b:\teb 07                \tjmp    f44 <rm_write_header+0x196>\n     f3d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     f42:\teb 51                \tjmp    f95 <rm_write_header+0x1e7>\n     f44:\t83 44 24 2c 01       \taddl   $0x1,0x2c(%rsp)\n     f49:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f4e:\t8b 50 28             \tmov    0x28(%rax),%edx\n     f51:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n     f55:\t39 c2                \tcmp    %eax,%edx\n     f57:\t0f 87 75 fe ff ff    \tja     dd2 <rm_write_header+0x24>\n     f5d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f62:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f67:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f6c:\t48 89 c7             \tmov    %rax,%rdi\n     f6f:\te8 58 f1 ff ff       \tcallq  cc <rv10_write_header>\n     f74:\t85 c0                \ttest   %eax,%eax\n     f76:\t74 07                \tje     f7f <rm_write_header+0x1d1>\n     f78:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n     f7d:\teb 16                \tjmp    f95 <rm_write_header+0x1e7>\n     f7f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f84:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     f88:\t48 89 c7             \tmov    %rax,%rdi\n     f8b:\te8 00 00 00 00       \tcallq  f90 <rm_write_header+0x1e2>\n     f90:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f95:\t48 83 c4 38          \tadd    $0x38,%rsp\n     f99:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rm_write_header(__int64 a1) {\n  int v1;\n  _DWORD *<span class=\"supfact\">s</span>;\n  _DWORD *<span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v5</span> = *(_QWORD *)(a1 + Number);\n  for (<span class=\"supfact\">i</span> = Number; *(_DWORD *)(a1 + Number) > <span class=\"supfact\">i</span>;\n       ++<span class=\"supfact\">i</span>) {\n    *(_DWORD *)(*(_QWORD *)(a1 + Number * ((int)<span class=\"supfact\">i</span> + Number L)) +\n                Number L) = <span class=\"supfact\">i</span>;\n    <span class=\"supfact\">v4</span> =\n        *(_DWORD **)(*(_QWORD *)(a1 +\n                                 Number * ((int)<span class=\"supfact\">i</span> + Number L)) +\n                     Number L);\n    <span class=\"supfact\">s</span> =\n        (_DWORD *)(<span class=\"supfact\">v5</span> + Number L * (int)<span class=\"supfact\">i</span>);\n    memset(<span class=\"supfact\">s</span>, Number, Number);\n    <span class=\"supfact\">s</span>[Number] = <span class=\"supfact\">i</span>;\n    <span class=\"supfact\">s</span>[Number] = <span class=\"supfact\">v4</span>[Number];\n    *((_QWORD *)<span class=\"supfact\">s</span> + Number) = <span class=\"supfact\">v4</span>;\n    v1 = <span class=\"supfact\">v4</span>[Number];\n    if (v1) {\n      if (v1 != Number)\n        return Number;\n      *(_QWORD *)(<span class=\"supfact\">v5</span> + Number) = <span class=\"supfact\">s</span>;\n      *((float *)<span class=\"supfact\">s</span> + Number) =\n          (float)(int)<span class=\"supfact\">v4</span>[Number] /\n          (float)(int)<span class=\"supfact\">v4</span>[Number];\n      <span class=\"supfact\">s</span>[Number] = Number;\n      *<span class=\"supfact\">s</span> = Number;\n      <span class=\"supfact\">s</span>[Number] = *<span class=\"supfact\">s</span>;\n    } else {\n      *(_QWORD *)(<span class=\"supfact\">v5</span> + Number) = <span class=\"supfact\">s</span>;\n      *((float *)<span class=\"supfact\">s</span> + Number) =\n          (float)(int)<span class=\"supfact\">v4</span>[Number] /\n          (float)(int)<span class=\"supfact\">v4</span>[Number];\n      <span class=\"supfact\">s</span>[Number] = Number;\n      *<span class=\"supfact\">s</span> = Number;\n      <span class=\"supfact\">s</span>[Number] = *<span class=\"supfact\">s</span>;\n    }\n  }\n  if ((unsigned int)rv10_write_header(a1, Number, Number))\n    return Number L;\n  put_flush_packet(*(_QWORD *)(a1 + Number));\n  return Number L;\n}", "code_t": "int __cdecl rm_write_header(AVFormatContext_0 *s) {\n  AVMediaType v1;\n  StreamInfo *<span class=\"supfact\">stream</span>;\n  AVCodecContext_0 *<span class=\"supfact\">codec</span>;\n  RMMuxContext *<span class=\"supfact\">rm</span>;\n  unsigned int <span class=\"supfact\">n</span>;\n  <span class=\"supfact\">rm</span> = (RMMuxContext *)s->priv_data;\n  for (<span class=\"supfact\">n</span> = Number; s->nb_streams > <span class=\"supfact\">n</span>;\n       ++<span class=\"supfact\">n</span>) {\n    s->streams[<span class=\"supfact\">n</span>]->id = <span class=\"supfact\">n</span>;\n    <span class=\"supfact\">codec</span> =\n        s->streams[<span class=\"supfact\">n</span>]-><span class=\"supfact\">codec</span>;\n    <span class=\"supfact\">stream</span> = &<span class=\"supfact\">rm</span>->streams[<span class=\"supfact\">n</span>];\n    memset(<span class=\"supfact\">stream</span>, Number, sizeof(StreamInfo));\n    <span class=\"supfact\">stream</span>->num = <span class=\"supfact\">n</span>;\n    <span class=\"supfact\">stream</span>->bit_rate = <span class=\"supfact\">codec</span>->bit_rate;\n    <span class=\"supfact\">stream</span>->enc = <span class=\"supfact\">codec</span>;\n    v1 = <span class=\"supfact\">codec</span>->codec_type;\n    if (v1) {\n      if (v1 != AVMEDIA_TYPE_AUDIO)\n        return Number;\n      <span class=\"supfact\">rm</span>->audio_stream = <span class=\"supfact\">stream</span>;\n      <span class=\"supfact\">stream</span>->frame_rate =\n          (float)<span class=\"supfact\">codec</span>->sample_rate /\n          (float)<span class=\"supfact\">codec</span>->frame_size;\n      <span class=\"supfact\">stream</span>->packet_max_size = Number;\n      <span class=\"supfact\">stream</span>->nb_packets = Number;\n      <span class=\"supfact\">stream</span>->total_frames = <span class=\"supfact\">stream</span>->nb_packets;\n    } else {\n      <span class=\"supfact\">rm</span>->video_stream = <span class=\"supfact\">stream</span>;\n      <span class=\"supfact\">stream</span>->frame_rate =\n          (float)<span class=\"supfact\">codec</span>->time_base.den /\n          (float)<span class=\"supfact\">codec</span>->time_base.num;\n      <span class=\"supfact\">stream</span>->packet_max_size = Number;\n      <span class=\"supfact\">stream</span>->nb_packets = Number;\n      <span class=\"supfact\">stream</span>->total_frames = <span class=\"supfact\">stream</span>->nb_packets;\n    }\n  }\n  if (rv10_write_header(s, Number, Number))\n    return Number;\n  put_flush_packet(s->pb);\n  return Number;\n}", "var": [{"name": "i", "type": "int", "ref_name": "n", "ref_type": "unsigned int"}, {"name": "v5", "type": "RMMuxContext *", "ref_name": "rm", "ref_type": "RMMuxContext *"}, {"name": "v4", "type": "AVCodecContext_0 *", "ref_name": "codec", "ref_type": "AVCodecContext_0 *"}, {"name": "s", "type": "StreamInfo *", "ref_name": "stream", "ref_type": "StreamInfo *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/6e574a86885122e0b494ae96a594cf9542382e7cfe7bedbfef7c97f620e34c23", "path_in_repo": "eerimoq/pumbaa/simba/tst/inet/http_websocket_client/build/linux/obj/usr/src/repo/simba/src/drivers/ports/linux/socket_device.o", "objdump": "0000000000000000 <uart_client_main>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <uart_client_main+0xd>\n   d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  11:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18 <uart_client_main+0x18>\n  18:\t48 83 c0 01          \tadd    $0x1,%rax\n  1c:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 23 <uart_client_main+0x23>\n  23:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  27:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  2b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  2f:\t48 83 c0 10          \tadd    $0x10,%rax\n  33:\t48 89 c6             \tmov    %rax,%rsi\n  36:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  3b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40:\te8 00 00 00 00       \tcallq  45 <uart_client_main+0x45>\n  45:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4c <uart_client_main+0x4c>\n  4c:\t48 83 c0 01          \tadd    $0x1,%rax\n  50:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 57 <uart_client_main+0x57>\n  57:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5e <uart_client_main+0x5e>\n  5e:\t48 89 c7             \tmov    %rax,%rdi\n  61:\te8 00 00 00 00       \tcallq  66 <uart_client_main+0x66>\n  66:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6d <uart_client_main+0x6d>\n  6d:\t48 83 c0 01          \tadd    $0x1,%rax\n  71:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 78 <uart_client_main+0x78>\n  78:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  7c:\t8b 00                \tmov    (%rax),%eax\n  7e:\t48 8d 4d ef          \tlea    -0x11(%rbp),%rcx\n  82:\tba 01 00 00 00       \tmov    $0x1,%edx\n  87:\t48 89 ce             \tmov    %rcx,%rsi\n  8a:\t89 c7                \tmov    %eax,%edi\n  8c:\te8 00 00 00 00       \tcallq  91 <uart_client_main+0x91>\n  91:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  95:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9c <uart_client_main+0x9c>\n  9c:\t48 83 c0 01          \tadd    $0x1,%rax\n  a0:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # a7 <uart_client_main+0xa7>\n  a7:\t48 83 7d f0 01       \tcmpq   $0x1,-0x10(%rbp)\n  ac:\t0f 85 8a 00 00 00    \tjne    13c <uart_client_main+0x13c>\n  b2:\te8 00 00 00 00       \tcallq  b7 <uart_client_main+0xb7>\n  b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # be <uart_client_main+0xbe>\n  be:\t48 83 c0 01          \tadd    $0x1,%rax\n  c2:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # c9 <uart_client_main+0xc9>\n  c9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  cd:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  d1:\t48 8b 00             \tmov    (%rax),%rax\n  d4:\t48 85 c0             \ttest   %rax,%rax\n  d7:\t74 46                \tje     11f <uart_client_main+0x11f>\n  d9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e0 <uart_client_main+0xe0>\n  e0:\t48 83 c0 01          \tadd    $0x1,%rax\n  e4:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # eb <uart_client_main+0xeb>\n  eb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  ef:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  f3:\t48 8b 00             \tmov    (%rax),%rax\n  f6:\t48 89 c1             \tmov    %rax,%rcx\n  f9:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  fd:\tba 01 00 00 00       \tmov    $0x1,%edx\n 102:\t48 89 c6             \tmov    %rax,%rsi\n 105:\t48 89 cf             \tmov    %rcx,%rdi\n 108:\te8 00 00 00 00       \tcallq  10d <uart_client_main+0x10d>\n 10d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 114 <uart_client_main+0x114>\n 114:\t48 83 c0 01          \tadd    $0x1,%rax\n 118:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 11f <uart_client_main+0x11f>\n 11f:\te8 00 00 00 00       \tcallq  124 <uart_client_main+0x124>\n 124:\t90                   \tnop\n 125:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 12c <uart_client_main+0x12c>\n 12c:\t48 83 c0 01          \tadd    $0x1,%rax\n 130:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 137 <uart_client_main+0x137>\n 137:\te9 3c ff ff ff       \tjmpq   78 <uart_client_main+0x78>\n 13c:\t90                   \tnop\n 13d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 144 <uart_client_main+0x144>\n 144:\t48 83 c0 01          \tadd    $0x1,%rax\n 148:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 14f <uart_client_main+0x14f>\n 14f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 153:\t8b 00                \tmov    (%rax),%eax\n 155:\t89 c7                \tmov    %eax,%edi\n 157:\te8 00 00 00 00       \tcallq  15c <uart_client_main+0x15c>\n 15c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 163 <uart_client_main+0x163>\n 163:\t48 83 c0 01          \tadd    $0x1,%rax\n 167:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 16e <uart_client_main+0x16e>\n 16e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 172:\tc7 00 fe ff ff ff    \tmovl   $0xfffffffe,(%rax)\n 178:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 17c:\t48 83 c0 10          \tadd    $0x10,%rax\n 180:\t48 89 c6             \tmov    %rax,%rsi\n 183:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 188:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 18d:\te8 00 00 00 00       \tcallq  192 <uart_client_main+0x192>\n 192:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 199 <uart_client_main+0x199>\n 199:\t48 83 c0 01          \tadd    $0x1,%rax\n 19d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1a4 <uart_client_main+0x1a4>\n 1a4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ab <uart_client_main+0x1ab>\n 1ab:\t48 89 c7             \tmov    %rax,%rdi\n 1ae:\te8 00 00 00 00       \tcallq  1b3 <uart_client_main+0x1b3>\n 1b3:\tba 00 00 00 00       \tmov    $0x0,%edx\n 1b8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1bf <uart_client_main+0x1bf>\n 1bf:\t48 83 c0 01          \tadd    $0x1,%rax\n 1c3:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1ca <uart_client_main+0x1ca>\n 1ca:\t48 89 d0             \tmov    %rdx,%rax\n 1cd:\tc9                   \tleaveq \n 1ce:\tc3                   \tretq   ", "code_s": "void *__fastcall uart_client_main(void *a1) {\n  char <span class=\"supfact\">buf</span>;\n  ssize_t <span class=\"supfact\">v3</span>;\n  int *<span class=\"supfact\">v4</span>;\n  ++_gcov0_uart_client_main;\n  <span class=\"supfact\">v4</span> = (int *)a1;\n  printf(String, (const char *)a1 + Number);\n  ++qword_9D08;\n  fflush(stdout);\n  ++qword_9D10;\n  while (Number) {\n    <span class=\"supfact\">v3</span> =\n        read(*<span class=\"supfact\">v4</span>, &<span class=\"supfact\">buf</span>, Number);\n    ++qword_9D18;\n    if (<span class=\"supfact\">v3</span> != Number)\n      break;\n    sys_lock();\n    ++qword_9D28;\n    if (**((_QWORD **)<span class=\"supfact\">v4</span> + Number)) {\n      ++qword_9D30;\n      queue_write_isr(**((_QWORD **)<span class=\"supfact\">v4</span> + Number),\n                      &<span class=\"supfact\">buf</span>, Number L);\n      ++qword_9D38;\n    }\n    sys_unlock();\n    ++qword_9D40;\n  }\n  ++qword_9D20;\n  close(*<span class=\"supfact\">v4</span>);\n  ++qword_9D48;\n  *<span class=\"supfact\">v4</span> = Number;\n  printf(String, (const char *)<span class=\"supfact\">v4</span> + Number);\n  ++qword_9D50;\n  fflush(stdout);\n  ++qword_9D58;\n  return Number L;\n}", "code_t": "void *__cdecl uart_client_main(void *arg_p) {\n  uint8_t <span class=\"supfact\">byte</span>;\n  ssize_t <span class=\"supfact\">size</span>;\n  uart_client_t *<span class=\"supfact\">client_p</span>;\n  ++_gcov0_uart_client_main;\n  <span class=\"supfact\">client_p</span> = (uart_client_t *)arg_p;\n  printf(String, (const char *)arg_p + Number);\n  ++qword_9D08;\n  fflush(stdout);\n  ++qword_9D10;\n  while (Number) {\n    <span class=\"supfact\">size</span> =\n        read(<span class=\"supfact\">client_p</span>->socket, &<span class=\"supfact\">byte</span>, Number);\n    ++qword_9D18;\n    if (<span class=\"supfact\">size</span> != Number)\n      break;\n    sys_lock();\n    ++qword_9D28;\n    if (<span class=\"supfact\">client_p</span>->dev_p->drv_p) {\n      ++qword_9D30;\n      queue_write_isr(<span class=\"supfact\">client_p</span>->dev_p->drv_p,\n                      &<span class=\"supfact\">byte</span>, Number L);\n      ++qword_9D38;\n    }\n    sys_unlock();\n    ++qword_9D40;\n  }\n  ++qword_9D20;\n  close(<span class=\"supfact\">client_p</span>->socket);\n  ++qword_9D48;\n  <span class=\"supfact\">client_p</span>->socket = Number;\n  printf(String, <span class=\"supfact\">client_p</span>->name);\n  ++qword_9D50;\n  fflush(stdout);\n  ++qword_9D58;\n  return Number L;\n}", "var": [{"name": "v4", "type": "uart_client_t *", "ref_name": "client_p", "ref_type": "uart_client_t *"}, {"name": "v3", "type": "ssize_t", "ref_name": "size", "ref_type": "ssize_t"}, {"name": "buf", "type": "uint8_t", "ref_name": "byte", "ref_type": "uint8_t"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "bloodstalker", "repo_name": "blogstuff", "path": "bloodstalker/blogstuff/e5d1c8fad2951977dc94940e542db30173b87fe2732e6c1c20f8e810270889e7", "path_in_repo": "bloodstalker/blogstuff/src/cstruct2luatbale/lua/lua", "objdump": "000000000040a350 <rname>:\n  40a350:\t55                   \tpush   %rbp\n  40a351:\t48 89 e5             \tmov    %rsp,%rbp\n  40a354:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40a358:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40a35c:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  40a35f:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n  40a362:\t48 89 4d d8          \tmov    %rcx,-0x28(%rbp)\n  40a366:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  40a36a:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  40a36d:\t8b 75 e4             \tmov    -0x1c(%rbp),%esi\n  40a370:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40a374:\t48 89 c7             \tmov    %rax,%rdi\n  40a377:\te8 9e 02 00 00       \tcallq  40a61a <getobjname>\n  40a37c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40a380:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40a385:\t74 0b                \tje     40a392 <rname+0x42>\n  40a387:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40a38b:\t0f b6 00             \tmovzbl (%rax),%eax\n  40a38e:\t3c 63                \tcmp    $0x63,%al\n  40a390:\t74 0b                \tje     40a39d <rname+0x4d>\n  40a392:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40a396:\t48 c7 00 00 c6 43 00 \tmovq   $0x43c600,(%rax)\n  40a39d:\t90                   \tnop\n  40a39e:\tc9                   \tleaveq \n  40a39f:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall rname(__int64 a1, unsigned int a2, unsigned int a3,\n                         _QWORD *a4) {\n  _QWORD *result;\n  unsigned __int8 *<span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = (unsigned __int8 *)getobjname(a1, a2, a3, a4);\n  if (!<span class=\"supfact\">v6</span> ||\n      (result = (_QWORD *)*<span class=\"supfact\">v6</span>, (_BYTE)result != Number)) {\n    result = a4;\n    *a4 = &unk_43C600;\n  }\n  return result;\n}", "code_t": "void __cdecl rname(const Proto_0 *p, int pc, int c, const char **name) {\n  const char *<span class=\"supfact\">what</span>;\n  <span class=\"supfact\">what</span> = getobjname(p, pc, c, name);\n  if (!<span class=\"supfact\">what</span> || *<span class=\"supfact\">what</span> != Number)\n    *name = (const char *)&unk_43C600;\n}", "var": [{"name": "v6", "type": "const char *", "ref_name": "what", "ref_type": "const char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "Smosia", "repo_name": "hennessy_kernel_5.0.2", "path": "Smosia/hennessy_kernel_5.0.2/3a0708b633ebd607ba481658474d90e816b524f1ed0157f634f6eab238009731", "path_in_repo": "Smosia/hennessy_kernel_5.0.2/kernel-3.10/tools/perf/util/scripting-engines/trace-event-perl.o", "objdump": "0000000000000fec <find_cache_event>:\n     fec:\t55                   \tpush   %rbp\n     fed:\t48 89 e5             \tmov    %rsp,%rbp\n     ff0:\t48 83 ec 30          \tsub    $0x30,%rsp\n     ff4:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     ff8:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     fff:\t00 00 \n    1001:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1005:\t31 c0                \txor    %eax,%eax\n    1007:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    100b:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    100f:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    1012:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    1015:\t48 98                \tcltq   \n    1017:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    101e:\t00 \n    101f:\t48 85 c0             \ttest   %rax,%rax\n    1022:\t74 0f                \tje     1033 <find_cache_event+0x47>\n    1024:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    1027:\t48 98                \tcltq   \n    1029:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    1030:\t00 \n    1031:\teb 75                \tjmp    10a8 <find_cache_event+0xbc>\n    1033:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1037:\t48 8b 80 98 02 00 00 \tmov    0x298(%rax),%rax\n    103e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1042:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    1045:\t48 98                \tcltq   \n    1047:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    104b:\t48 89 14 c5 00 00 00 \tmov    %rdx,0x0(,%rax,8)\n    1052:\t00 \n    1053:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1058:\t75 07                \tjne    1061 <find_cache_event+0x75>\n    105a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    105f:\teb 47                \tjmp    10a8 <find_cache_event+0xbc>\n    1061:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1065:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    1069:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    106d:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    1071:\t48 89 d1             \tmov    %rdx,%rcx\n    1074:\t48 89 c2             \tmov    %rax,%rdx\n    1077:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    107c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1081:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1086:\te8 00 00 00 00       \tcallq  108b <find_cache_event+0x9f>\n    108b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    108f:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n    1093:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1097:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    109c:\t48 89 c7             \tmov    %rax,%rdi\n    109f:\te8 ea fc ff ff       \tcallq  d8e <define_event_symbols>\n    10a4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    10a8:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    10ac:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    10b3:\t00 00 \n    10b5:\t74 05                \tje     10bc <find_cache_event+0xd0>\n    10b7:\te8 00 00 00 00       \tcallq  10bc <find_cache_event+0xd0>\n    10bc:\tc9                   \tleaveq \n    10bd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall find_cache_event(__int64 a1) {\n  int <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)(a1 + Number);\n  if (events[<span class=\"supfact\">v2</span>])\n    return events[<span class=\"supfact\">v2</span>];\n  <span class=\"supfact\">v3</span> = *(_QWORD *)(a1 + Number);\n  events[<span class=\"supfact\">v2</span>] = <span class=\"supfact\">v3</span>;\n  if (!<span class=\"supfact\">v3</span>)\n    return Number L;\n  sprintf(ev_name_29730, String, *(const char **)(<span class=\"supfact\">v3</span> + Number),\n          *(const char **)(<span class=\"supfact\">v3</span> + Number));\n  define_event_symbols(<span class=\"supfact\">v3</span>, (__int64)ev_name_29730,\n                       *(_QWORD *)(<span class=\"supfact\">v3</span> + Number));\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "event_format *__cdecl find_cache_event(perf_evsel *evsel) {\n  int <span class=\"supfact\">type</span>;\n  event_format *<span class=\"supfact\">event</span>;\n  <span class=\"supfact\">type</span> = evsel->attr.config;\n  if (events[<span class=\"supfact\">type</span>])\n    return events[<span class=\"supfact\">type</span>];\n  <span class=\"supfact\">event</span> = evsel->tp_format;\n  events[<span class=\"supfact\">type</span>] = <span class=\"supfact\">event</span>;\n  if (!<span class=\"supfact\">event</span>)\n    return Number L;\n  sprintf(ev_name_29730, String, <span class=\"supfact\">event</span>->system,\n          <span class=\"supfact\">event</span>->name);\n  define_event_symbols(<span class=\"supfact\">event</span>, ev_name_29730,\n                       <span class=\"supfact\">event</span>->print_fmt.args);\n  return <span class=\"supfact\">event</span>;\n}", "var": [{"name": "v3", "type": "event_format *", "ref_name": "event", "ref_type": "event_format *"}, {"name": "v2", "type": "int", "ref_name": "type", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "AmadeusConsulting", "repo_name": "AndroidMagazineReader", "path": "AmadeusConsulting/AndroidMagazineReader/efe450f2b1ac2cd22dddef6ac0817e2bc99586bb690f375e0fd1a5e5a04d3b5c", "path_in_repo": "AmadeusConsulting/AndroidMagazineReader/AmadeusMagazineReader/build/debug/pdf_write.o", "objdump": "0000000000001be6 <page_objects_list_renumber>:\n    1be6:\t55                   \tpush   %rbp\n    1be7:\t48 89 e5             \tmov    %rsp,%rbp\n    1bea:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1bee:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    1bf5:\te9 8f 00 00 00       \tjmpq   1c89 <page_objects_list_renumber+0xa3>\n    1bfa:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1bfe:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    1c05:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    1c08:\t48 63 d2             \tmovslq %edx,%rdx\n    1c0b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1c10:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1c14:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    1c1b:\teb 3b                \tjmp    1c58 <page_objects_list_renumber+0x72>\n    1c1d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1c21:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n    1c25:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1c29:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n    1c2c:\t48 63 c9             \tmovslq %ecx,%rcx\n    1c2f:\t48 83 c1 04          \tadd    $0x4,%rcx\n    1c33:\t8b 44 88 0c          \tmov    0xc(%rax,%rcx,4),%eax\n    1c37:\t48 98                \tcltq   \n    1c39:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1c3d:\t48 01 d0             \tadd    %rdx,%rax\n    1c40:\t8b 10                \tmov    (%rax),%edx\n    1c42:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1c46:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n    1c49:\t48 63 c9             \tmovslq %ecx,%rcx\n    1c4c:\t48 83 c1 04          \tadd    $0x4,%rcx\n    1c50:\t89 54 88 0c          \tmov    %edx,0xc(%rax,%rcx,4)\n    1c54:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n    1c58:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1c5c:\t8b 40 18             \tmov    0x18(%rax),%eax\n    1c5f:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n    1c62:\t7c b9                \tjl     1c1d <page_objects_list_renumber+0x37>\n    1c64:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1c68:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n    1c6c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1c70:\t8b 40 04             \tmov    0x4(%rax),%eax\n    1c73:\t48 98                \tcltq   \n    1c75:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1c79:\t48 01 d0             \tadd    %rdx,%rax\n    1c7c:\t8b 10                \tmov    (%rax),%edx\n    1c7e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1c82:\t89 50 04             \tmov    %edx,0x4(%rax)\n    1c85:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    1c89:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1c8d:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    1c94:\t8b 40 04             \tmov    0x4(%rax),%eax\n    1c97:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    1c9a:\t0f 8c 5a ff ff ff    \tjl     1bfa <page_objects_list_renumber+0x14>\n    1ca0:\t90                   \tnop\n    1ca1:\t90                   \tnop\n    1ca2:\t5d                   \tpop    %rbp\n    1ca3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall page_objects_list_renumber(__int64 a1) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = *(unsigned int *)(*(_QWORD *)(a1 + Number) + Number L);\n    if (<span class=\"supfact\">i</span> >= (int)result)\n      break;\n    <span class=\"supfact\">v2</span> = *(_QWORD *)(*(_QWORD *)(a1 + Number) +\n                                     Number L * <span class=\"supfact\">i</span> + Number);\n    for (<span class=\"supfact\">j</span> = Number;\n         <span class=\"supfact\">j</span> < *(_DWORD *)(<span class=\"supfact\">v2</span> + Number);\n         ++<span class=\"supfact\">j</span>)\n      *(_DWORD *)(<span class=\"supfact\">v2</span> + Number * (<span class=\"supfact\">j</span> + Number L) +\n                  Number) =\n          *(_DWORD *)(*(_QWORD *)(a1 + Number) +\n                      Number L *\n                          *(int *)(<span class=\"supfact\">v2</span> +\n                                   Number * (<span class=\"supfact\">j</span> + Number L) +\n                                   Number));\n    *(_DWORD *)(<span class=\"supfact\">v2</span> + Number) =\n        *(_DWORD *)(*(_QWORD *)(a1 + Number) +\n                    Number L * *(int *)(<span class=\"supfact\">v2</span> + Number));\n  }\n  return result;\n}", "code_t": "void __cdecl page_objects_list_renumber(pdf_write_options *opts) {\n  page_objects *<span class=\"supfact\">po</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < opts->page_object_lists->len; ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">po</span> = opts->page_object_lists->page[<span class=\"supfact\">i</span>];\n    for (<span class=\"supfact\">j</span> = Number;\n         <span class=\"supfact\">j</span> < <span class=\"supfact\">po</span>->len; ++<span class=\"supfact\">j</span>)\n      <span class=\"supfact\">po</span>->object[<span class=\"supfact\">j</span>] =\n          opts->renumber_map[<span class=\"supfact\">po</span>->object[<span class=\"supfact\">j</span>]];\n    <span class=\"supfact\">po</span>->page_object_number =\n        opts->renumber_map[<span class=\"supfact\">po</span>->page_object_number];\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "j", "type": "int", "ref_name": "j", "ref_type": "int"}, {"name": "v2", "type": "__int64", "ref_name": "po", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "jackguo380", "repo_name": "CPEN391", "path": "jackguo380/CPEN391/90541ecba71f97a6b48370ae188de60936b12ac6c7cd10d7449e4b62d64293c2", "path_in_repo": "jackguo380/CPEN391/software/kernel/linux-4.5/tools/power/cpupower/utils/helpers/bitmask.o", "objdump": "0000000000000203 <nexttoken>:\n 203:\t55                   \tpush   %rbp\n 204:\t48 89 e5             \tmov    %rsp,%rbp\n 207:\t48 83 ec 10          \tsub    $0x10,%rsp\n 20b:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n 20f:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n 212:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 217:\t74 15                \tje     22e <nexttoken+0x2b>\n 219:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 21c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 220:\t89 d6                \tmov    %edx,%esi\n 222:\t48 89 c7             \tmov    %rax,%rdi\n 225:\te8 00 00 00 00       \tcallq  22a <nexttoken+0x27>\n 22a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 22e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 233:\t74 05                \tje     23a <nexttoken+0x37>\n 235:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n 23a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 23e:\tc9                   \tleaveq \n 23f:\tc3                   \tretq   ", "code_s": "char *__fastcall nexttoken(const char *a1, int a2) {\n  char *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (char *)a1;\n  if (a1)\n    <span class=\"supfact\">s</span> = strchr(a1, a2);\n  if (<span class=\"supfact\">s</span>)\n    ++<span class=\"supfact\">s</span>;\n  return <span class=\"supfact\">s</span>;\n}", "code_t": "const char *__cdecl nexttoken(const char *q, int sep) {\n  const char *<span class=\"supfact\">qa</span>;\n  <span class=\"supfact\">qa</span> = q;\n  if (q)\n    <span class=\"supfact\">qa</span> = strchr(q, sep);\n  if (<span class=\"supfact\">qa</span>)\n    ++<span class=\"supfact\">qa</span>;\n  return <span class=\"supfact\">qa</span>;\n}", "var": [{"name": "s", "type": "const char *", "ref_name": "qa", "ref_type": "const char *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "tgni", "repo_name": "alg", "path": "tgni/alg/5f7dc5019e034d818088f39580c99607dda9d44c3056b958f5e6c2a67d598108", "path_in_repo": "tgni/alg/kaoYan/sjtu/printPath.exe", "objdump": "0000000000406138 <_ZSt12__niter_baseIP4nodeSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:\n  406138:\t55                   \tpush   %rbp\n  406139:\t48 89 e5             \tmov    %rsp,%rbp\n  40613c:\t48 83 ec 10          \tsub    $0x10,%rsp\n  406140:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  406144:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  406148:\t48 89 c7             \tmov    %rax,%rdi\n  40614b:\te8 0a d2 ff ff       \tcallq  40335a <_ZNK9__gnu_cxx17__normal_iteratorIP4nodeSt6vectorIS1_SaIS1_EEE4baseEv>\n  406150:\t48 8b 00             \tmov    (%rax),%rax\n  406153:\tc9                   \tleaveq \n  406154:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __niter_base<node *, std vector<node>>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = a1;\n  return *(_QWORD *)__gnu_cxx __normal_iterator<node *, std vector<node>> base(\n      (__int64)&<span class=\"supfact\">v2</span>);\n}", "code_t": "__int64 __fastcall std __niter_base<node *, std vector<node>>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = a1;\n  return *(_QWORD *)__gnu_cxx __normal_iterator<node *, std vector<node>> base(\n      (__int64)&<span class=\"supfact\">v2</span>);\n}", "var": [{"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "__int64"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "guoyuquan", "repo_name": "Graduate", "path": "guoyuquan/Graduate/b853e13490c2f4adf901daf46fdbd625a9facc3049d5e0dd7633ff3938c0e90f", "path_in_repo": "guoyuquan/Graduate/Programming/C/Programming_in_Unix/apue.3e/advio/nonblockw", "objdump": "0000000000401481 <err_cont>:\n  401481:\t55                   \tpush   %rbp\n  401482:\t48 89 e5             \tmov    %rsp,%rbp\n  401485:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n  40148c:\t89 bd 2c ff ff ff    \tmov    %edi,-0xd4(%rbp)\n  401492:\t48 89 b5 20 ff ff ff \tmov    %rsi,-0xe0(%rbp)\n  401499:\t48 89 95 60 ff ff ff \tmov    %rdx,-0xa0(%rbp)\n  4014a0:\t48 89 8d 68 ff ff ff \tmov    %rcx,-0x98(%rbp)\n  4014a7:\t4c 89 85 70 ff ff ff \tmov    %r8,-0x90(%rbp)\n  4014ae:\t4c 89 8d 78 ff ff ff \tmov    %r9,-0x88(%rbp)\n  4014b5:\t84 c0                \ttest   %al,%al\n  4014b7:\t74 20                \tje     4014d9 <err_cont+0x58>\n  4014b9:\t0f 29 45 80          \tmovaps %xmm0,-0x80(%rbp)\n  4014bd:\t0f 29 4d 90          \tmovaps %xmm1,-0x70(%rbp)\n  4014c1:\t0f 29 55 a0          \tmovaps %xmm2,-0x60(%rbp)\n  4014c5:\t0f 29 5d b0          \tmovaps %xmm3,-0x50(%rbp)\n  4014c9:\t0f 29 65 c0          \tmovaps %xmm4,-0x40(%rbp)\n  4014cd:\t0f 29 6d d0          \tmovaps %xmm5,-0x30(%rbp)\n  4014d1:\t0f 29 75 e0          \tmovaps %xmm6,-0x20(%rbp)\n  4014d5:\t0f 29 7d f0          \tmovaps %xmm7,-0x10(%rbp)\n  4014d9:\tc7 85 38 ff ff ff 10 \tmovl   $0x10,-0xc8(%rbp)\n  4014e0:\t00 00 00 \n  4014e3:\tc7 85 3c ff ff ff 30 \tmovl   $0x30,-0xc4(%rbp)\n  4014ea:\t00 00 00 \n  4014ed:\t48 8d 45 10          \tlea    0x10(%rbp),%rax\n  4014f1:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n  4014f8:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  4014ff:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n  401506:\t48 8d 8d 38 ff ff ff \tlea    -0xc8(%rbp),%rcx\n  40150d:\t48 8b 95 20 ff ff ff \tmov    -0xe0(%rbp),%rdx\n  401514:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n  40151a:\t89 c6                \tmov    %eax,%esi\n  40151c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401521:\te8 bd 02 00 00       \tcallq  4017e3 <err_doit>\n  401526:\t90                   \tnop\n  401527:\tc9                   \tleaveq \n  401528:\tc3                   \tretq   ", "code_s": "__int64 err_cont(unsigned int a1, __int64 a2, __int64 a3, __int64 a4,\n                 __int64 a5, __int64 a6, ...) {\n  gcc_va_list <span class=\"supfact\">va</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  va_start(<span class=\"supfact\">va</span>, a6);\n  <span class=\"supfact\">v8</span> = a3;\n  <span class=\"supfact\">v9</span> = a4;\n  <span class=\"supfact\">v10</span> = a5;\n  <span class=\"supfact\">v11</span> = a6;\n  <span class=\"supfact\">va</span>[Number].gp_offset = Number;\n  return err_doit(Number L, a1, a2, <span class=\"supfact\">va</span>);\n}", "code_t": "void err_cont(int error, const char *fmt, ...) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  va_list <span class=\"supfact\">ap</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  va_start(<span class=\"supfact\">ap</span>, fmt);\n  v2 = va_arg(<span class=\"supfact\">ap</span>, _QWORD);\n  v3 = va_arg(<span class=\"supfact\">ap</span>, _QWORD);\n  v4 = va_arg(<span class=\"supfact\">ap</span>, _QWORD);\n  v5 = va_arg(<span class=\"supfact\">ap</span>, _QWORD);\n  <span class=\"supfact\">v7</span> = v2;\n  <span class=\"supfact\">v8</span> = v3;\n  <span class=\"supfact\">v9</span> = v4;\n  <span class=\"supfact\">v10</span> = v5;\n  <span class=\"supfact\">ap</span>[Number].gp_offset = Number;\n  err_doit(Number, error, fmt, <span class=\"supfact\">ap</span>);\n}", "var": [{"name": "v11", "type": "__int64", "ref_name": "v10", "ref_type": "__int64"}, {"name": "v10", "type": "__int64", "ref_name": "v9", "ref_type": "__int64"}, {"name": "v9", "type": "__int64", "ref_name": "v8", "ref_type": "__int64"}, {"name": "v8", "type": "__int64", "ref_name": "v7", "ref_type": "__int64"}, {"name": "va", "type": "__va_list_tag[1]", "ref_name": "ap", "ref_type": "__va_list_tag[1]"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/a2002ae660175968e0b86e8dc91bf56b26f8865ccb1769d705308d7677d5574f", "path_in_repo": "madeye/GRACE/qemu-0.12.5/ppcemb-softmmu/translate.o", "objdump": "0000000000003836 <gen_helper_vcmpgtub>:\n    3836:\t55                   \tpush   %rbp\n    3837:\t48 89 e5             \tmov    %rsp,%rbp\n    383a:\t48 83 ec 30          \tsub    $0x30,%rsp\n    383e:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n    3841:\t89 75 d8             \tmov    %esi,-0x28(%rbp)\n    3844:\t89 55 d4             \tmov    %edx,-0x2c(%rbp)\n    3847:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    384e:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    3851:\t48 98                \tcltq   \n    3853:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    3857:\t83 4d fc 02          \torl    $0x2,-0x4(%rbp)\n    385b:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n    385e:\t48 98                \tcltq   \n    3860:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    3864:\t83 4d fc 04          \torl    $0x4,-0x4(%rbp)\n    3868:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    386b:\t48 98                \tcltq   \n    386d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    3871:\t83 4d fc 08          \torl    $0x8,-0x4(%rbp)\n    3875:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    3879:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    387c:\t49 89 d1             \tmov    %rdx,%r9\n    387f:\t41 b8 03 00 00 00    \tmov    $0x3,%r8d\n    3885:\t48 c7 c1 ff ff ff ff \tmov    $0xffffffffffffffff,%rcx\n    388c:\t89 c2                \tmov    %eax,%edx\n    388e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3893:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3898:\te8 d3 d0 ff ff       \tcallq  970 <tcg_gen_helperN>\n    389d:\t90                   \tnop\n    389e:\tc9                   \tleaveq \n    389f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gen_helper_vcmpgtub(int a1, int a2, int a3) {\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v4</span>[Number] = a1;\n  <span class=\"supfact\">v4</span>[Number] = a2;\n  <span class=\"supfact\">v4</span>[Number] = a3;\n  <span class=\"supfact\">v5</span> = Number;\n  return tcg_gen_helperN((__int64)&helper_vcmpgtub, Number, Number, Number,\n                         Number, (__int64)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl gen_helper_vcmpgtub(TCGv_i64 arg1, TCGv_i64 arg2, TCGv_i64 arg3) {\n  TCGArg <span class=\"supfact\">args</span>[Number];\n  int <span class=\"supfact\">sizemask</span>;\n  <span class=\"supfact\">args</span>[Number] = arg1;\n  <span class=\"supfact\">args</span>[Number] = arg2;\n  <span class=\"supfact\">args</span>[Number] = arg3;\n  <span class=\"supfact\">sizemask</span> = Number;\n  tcg_gen_helperN(&helper_vcmpgtub, Number, Number, Number, Number,\n                  <span class=\"supfact\">args</span>);\n}", "var": [{"name": "v5", "type": "int", "ref_name": "sizemask", "ref_type": "int"}, {"name": "v4", "type": "TCGArg[3]", "ref_name": "args", "ref_type": "TCGArg[3]"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "shishujuan", "repo_name": "dsalg", "path": "shishujuan/dsalg/637c5791677f06fcc07eb2ba150723a5aebb6d732bd968f006a78221fab3083e", "path_in_repo": "shishujuan/dsalg/code/ds/list/aslist/main.o", "objdump": "0000000000000d6e <sortedListAddNodeUnify>:\n     d6e:\t55                   \tpush   %rbp\n     d6f:\t48 89 e5             \tmov    %rsp,%rbp\n     d72:\t48 83 ec 20          \tsub    $0x20,%rsp\n     d76:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     d7a:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     d7d:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     d80:\t89 c7                \tmov    %eax,%edi\n     d82:\te8 00 00 00 00       \tcallq  d87 <sortedListAddNodeUnify+0x19>\n     d87:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     d8b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d8f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d93:\teb 0b                \tjmp    da0 <sortedListAddNodeUnify+0x32>\n     d95:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     d99:\t48 8b 00             \tmov    (%rax),%rax\n     d9c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     da0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     da4:\t48 8b 00             \tmov    (%rax),%rax\n     da7:\t48 85 c0             \ttest   %rax,%rax\n     daa:\t74 0f                \tje     dbb <sortedListAddNodeUnify+0x4d>\n     dac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     db0:\t48 8b 00             \tmov    (%rax),%rax\n     db3:\t8b 40 08             \tmov    0x8(%rax),%eax\n     db6:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n     db9:\t7f da                \tjg     d95 <sortedListAddNodeUnify+0x27>\n     dbb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     dbf:\t48 8b 10             \tmov    (%rax),%rdx\n     dc2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     dc6:\t48 89 10             \tmov    %rdx,(%rax)\n     dc9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     dcd:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     dd1:\t48 89 10             \tmov    %rdx,(%rax)\n     dd4:\t90                   \tnop\n     dd5:\tc9                   \tleaveq \n     dd6:\tc3                   \tretq   ", "code_s": "__int64 *__fastcall sortedListAddNodeUnify(__int64 *a1, unsigned int a2) {\n  __int64 *result;\n  _QWORD *<span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = (_QWORD *)listNewNode(a2);\n  while (*a1 && (signed int)a2 > *(_DWORD *)(*a1 + Number))\n    a1 = (__int64 *)*a1;\n  *<span class=\"supfact\">v3</span> = *a1;\n  result = a1;\n  *a1 = (__int64)<span class=\"supfact\">v3</span>;\n  return result;\n}", "code_t": "void __cdecl sortedListAddNodeUnify(ListNode_0 **head, int value) {\n  ListNode_0 *<span class=\"supfact\">node</span>;\n  <span class=\"supfact\">node</span> = (ListNode_0 *)listNewNode((unsigned int)value);\n  while (*head && value > (*head)->value)\n    head = (ListNode_0 **)*head;\n  <span class=\"supfact\">node</span>->next = *head;\n  *head = <span class=\"supfact\">node</span>;\n}", "var": [{"name": "v3", "type": "listNode_0 *", "ref_name": "node", "ref_type": "ListNode_0 *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "josephgbr", "repo_name": "cups-pt_BR", "path": "josephgbr/cups-pt_BR/9e000c5258cbc547dc3ef736b5de990812af4d5dfe2453b60a5c8644159bdf15", "path_in_repo": "josephgbr/cups-pt_BR/cups-2.1.2/backend/snmp.o", "objdump": "0000000000000971 <free_array>:\n     971:\t55                   \tpush   %rbp\n     972:\t48 89 e5             \tmov    %rsp,%rbp\n     975:\t48 83 ec 20          \tsub    $0x20,%rsp\n     979:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     97d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     981:\t48 89 c7             \tmov    %rax,%rdi\n     984:\te8 00 00 00 00       \tcallq  989 <free_array+0x18>\n     989:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     98d:\teb 1c                \tjmp    9ab <free_array+0x3a>\n     98f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     993:\t48 89 c7             \tmov    %rax,%rdi\n     996:\te8 00 00 00 00       \tcallq  99b <free_array+0x2a>\n     99b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     99f:\t48 89 c7             \tmov    %rax,%rdi\n     9a2:\te8 00 00 00 00       \tcallq  9a7 <free_array+0x36>\n     9a7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     9ab:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     9b0:\t75 dd                \tjne    98f <free_array+0x1e>\n     9b2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9b6:\t48 89 c7             \tmov    %rax,%rdi\n     9b9:\te8 00 00 00 00       \tcallq  9be <free_array+0x4d>\n     9be:\t90                   \tnop\n     9bf:\tc9                   \tleaveq \n     9c0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall free_array(__int64 a1) {\n  void *<span class=\"supfact\">ptr</span>;\n  for (<span class=\"supfact\">ptr</span> = (void *)cupsArrayFirst(a1); <span class=\"supfact\">ptr</span>;\n       <span class=\"supfact\">ptr</span> = (void *)cupsArrayNext(a1))\n    free(<span class=\"supfact\">ptr</span>);\n  return cupsArrayDelete(a1);\n}", "code_t": "void __cdecl free_array(cups_array_t *a) {\n  char *<span class=\"supfact\">s</span>;\n  for (<span class=\"supfact\">s</span> = (char *)cupsArrayFirst(a); <span class=\"supfact\">s</span>;\n       <span class=\"supfact\">s</span> = (char *)cupsArrayNext(a))\n    free(<span class=\"supfact\">s</span>);\n  cupsArrayDelete(a);\n}", "var": [{"name": "ptr", "type": "http_credential_t *", "ref_name": "s", "ref_type": "char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "wjlandryiii", "repo_name": "mycc", "path": "wjlandryiii/mycc/12db2ff2ba05adaa596529e0dccbdaab24a0462375579c9e565be038185bd06b", "path_in_repo": "wjlandryiii/mycc/grammar/lr0", "objdump": "0000000000402616 <printItem>:\n  402616:\t55                   \tpush   %rbp\n  402617:\t48 89 e5             \tmov    %rsp,%rbp\n  40261a:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40261e:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  402621:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  402624:\t48 98                \tcltq   \n  402626:\t8b 04 85 00 81 40 00 \tmov    0x408100(,%rax,4),%eax\n  40262d:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  402630:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  402633:\t48 98                \tcltq   \n  402635:\t8b 04 85 00 91 40 00 \tmov    0x409100(,%rax,4),%eax\n  40263c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40263f:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  402642:\t48 98                \tcltq   \n  402644:\t8b 04 85 c0 91 c1 01 \tmov    0x1c191c0(,%rax,4),%eax\n  40264b:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40264e:\t8b 75 f4             \tmov    -0xc(%rbp),%esi\n  402651:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n  402654:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  402657:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40265a:\t41 89 f0             \tmov    %esi,%r8d\n  40265d:\t89 c6                \tmov    %eax,%esi\n  40265f:\tbf a8 44 40 00       \tmov    $0x4044a8,%edi\n  402664:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402669:\te8 02 ea ff ff       \tcallq  401070 <printf@plt>\n  40266e:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  402671:\t48 98                \tcltq   \n  402673:\t8b 04 85 c0 95 c1 01 \tmov    0x1c195c0(,%rax,4),%eax\n  40267a:\t48 98                \tcltq   \n  40267c:\t8b 04 85 80 11 c1 01 \tmov    0x1c11180(,%rax,4),%eax\n  402683:\t48 98                \tcltq   \n  402685:\t48 8b 04 c5 a0 60 40 \tmov    0x4060a0(,%rax,8),%rax\n  40268c:\t00 \n  40268d:\t48 89 c6             \tmov    %rax,%rsi\n  402690:\tbf db 44 40 00       \tmov    $0x4044db,%edi\n  402695:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40269a:\te8 d1 e9 ff ff       \tcallq  401070 <printf@plt>\n  40269f:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4026a6:\teb 58                \tjmp    402700 <printItem+0xea>\n  4026a8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4026ab:\t48 98                \tcltq   \n  4026ad:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  4026b0:\t48 63 d2             \tmovslq %edx,%rdx\n  4026b3:\t48 c1 e2 07          \tshl    $0x7,%rdx\n  4026b7:\t48 01 d0             \tadd    %rdx,%rax\n  4026ba:\t8b 04 85 c0 99 c1 01 \tmov    0x1c199c0(,%rax,4),%eax\n  4026c1:\t48 98                \tcltq   \n  4026c3:\t8b 04 85 80 11 c1 01 \tmov    0x1c11180(,%rax,4),%eax\n  4026ca:\t48 98                \tcltq   \n  4026cc:\t48 8b 04 c5 a0 60 40 \tmov    0x4060a0(,%rax,8),%rax\n  4026d3:\t00 \n  4026d4:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4026d7:\t3b 55 f4             \tcmp    -0xc(%rbp),%edx\n  4026da:\t75 07                \tjne    4026e3 <printItem+0xcd>\n  4026dc:\tb9 2e 00 00 00       \tmov    $0x2e,%ecx\n  4026e1:\teb 05                \tjmp    4026e8 <printItem+0xd2>\n  4026e3:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n  4026e8:\t48 89 c2             \tmov    %rax,%rdx\n  4026eb:\t89 ce                \tmov    %ecx,%esi\n  4026ed:\tbf d6 40 40 00       \tmov    $0x4040d6,%edi\n  4026f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4026f7:\te8 74 e9 ff ff       \tcallq  401070 <printf@plt>\n  4026fc:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  402700:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402703:\t3b 45 f0             \tcmp    -0x10(%rbp),%eax\n  402706:\t7c a0                \tjl     4026a8 <printItem+0x92>\n  402708:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40270b:\t3b 45 f4             \tcmp    -0xc(%rbp),%eax\n  40270e:\t75 0f                \tjne    40271f <printItem+0x109>\n  402710:\tbf de 40 40 00       \tmov    $0x4040de,%edi\n  402715:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40271a:\te8 51 e9 ff ff       \tcallq  401070 <printf@plt>\n  40271f:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  402724:\te8 07 e9 ff ff       \tcallq  401030 <putchar@plt>\n  402729:\t90                   \tnop\n  40272a:\tc9                   \tleaveq \n  40272b:\tc3                   \tretq   ", "code_s": "int __fastcall printItem(unsigned int a1) {\n  unsigned int v1;\n  int <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v5</span> = ITEM[a1];\n  <span class=\"supfact\">v4</span> = ITEMDOT[a1];\n  <span class=\"supfact\">v3</span> = RULESIZE[<span class=\"supfact\">v5</span>];\n  printf(String, a1, (unsigned int)<span class=\"supfact\">v5</span>,\n         (unsigned int)<span class=\"supfact\">v3</span>, <span class=\"supfact\">v4</span>);\n  printf(String, (&STRING)[SYMBOL[RULENAME[<span class=\"supfact\">v5</span>]]]);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v3</span>;\n       ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">i</span> == <span class=\"supfact\">v4</span>)\n      v1 = Number;\n    else\n      v1 = Number;\n    printf(String, v1,\n           (&STRING)[SYMBOL[RULE[Number * (__int64)<span class=\"supfact\">v5</span> +\n                                 <span class=\"supfact\">i</span>]]]);\n  }\n  if (<span class=\"supfact\">i</span> == <span class=\"supfact\">v4</span>)\n    printf(String);\n  return putchar(Number);\n}", "code_t": "void __cdecl printItem(int item) {\n  unsigned int v1;\n  int <span class=\"supfact\">ruleSize</span>;\n  unsigned int <span class=\"supfact\">dot</span>;\n  int <span class=\"supfact\">rule</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">rule</span> = ITEM[item];\n  <span class=\"supfact\">dot</span> = ITEMDOT[item];\n  <span class=\"supfact\">ruleSize</span> = RULESIZE[<span class=\"supfact\">rule</span>];\n  printf(String, (unsigned int)item, (unsigned int)<span class=\"supfact\">rule</span>,\n         (unsigned int)<span class=\"supfact\">ruleSize</span>, <span class=\"supfact\">dot</span>);\n  printf(String, STRING[SYMBOL[RULENAME[<span class=\"supfact\">rule</span>]]]);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">ruleSize</span>;\n       ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">i</span> == <span class=\"supfact\">dot</span>)\n      v1 = Number;\n    else\n      v1 = Number;\n    printf(\n        String, v1,\n        STRING[SYMBOL[RULE[(__int64)<span class=\"supfact\">rule</span>][<span class=\"supfact\">i</span>]]]);\n  }\n  if (<span class=\"supfact\">i</span> == <span class=\"supfact\">dot</span>)\n    printf(String);\n  putchar(Number);\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v5", "type": "int", "ref_name": "rule", "ref_type": "int"}, {"name": "v4", "type": "int", "ref_name": "dot", "ref_type": "unsigned int"}, {"name": "v3", "type": "int", "ref_name": "ruleSize", "ref_type": "int"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/551092bfdc10d900c4ed59747cc830b82db8e3ac4d0b79320e736cded7aa12b7", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/galaxi.o", "objdump": "0000000000000ae0 <_ZL15galaxi_500004_wP13address_spacejtt>:\n     ae0:\t55                   \tpush   %rbp\n     ae1:\t48 89 e5             \tmov    %rsp,%rbp\n     ae4:\t53                   \tpush   %rbx\n     ae5:\t48 83 ec 38          \tsub    $0x38,%rsp\n     ae9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     aed:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n     af0:\t89 c8                \tmov    %ecx,%eax\n     af2:\t66 89 55 d0          \tmov    %dx,-0x30(%rbp)\n     af6:\t66 89 45 cc          \tmov    %ax,-0x34(%rbp)\n     afa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     afe:\t48 89 c7             \tmov    %rax,%rdi\n     b01:\te8 00 00 00 00       \tcallq  b06 <_ZL15galaxi_500004_wP13address_spacejtt+0x26>\n     b06:\t48 89 c7             \tmov    %rax,%rdi\n     b09:\te8 00 00 00 00       \tcallq  b0e <_ZL15galaxi_500004_wP13address_spacejtt+0x2e>\n     b0e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     b12:\t0f b7 45 cc          \tmovzwl -0x34(%rbp),%eax\n     b16:\t0f b6 c0             \tmovzbl %al,%eax\n     b19:\t85 c0                \ttest   %eax,%eax\n     b1b:\t0f 84 80 00 00 00    \tje     ba1 <_ZL15galaxi_500004_wP13address_spacejtt+0xc1>\n     b21:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n     b25:\t83 e0 01             \tand    $0x1,%eax\n     b28:\t89 c6                \tmov    %eax,%esi\n     b2a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     b2f:\te8 cc f4 ff ff       \tcallq  0 <_ZL21output_set_lamp_valueii>\n     b34:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n     b38:\td1 f8                \tsar    %eax\n     b3a:\t83 e0 01             \tand    $0x1,%eax\n     b3d:\t89 c6                \tmov    %eax,%esi\n     b3f:\tbf 02 00 00 00       \tmov    $0x2,%edi\n     b44:\te8 b7 f4 ff ff       \tcallq  0 <_ZL21output_set_lamp_valueii>\n     b49:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n     b4d:\tc1 f8 02             \tsar    $0x2,%eax\n     b50:\t83 e0 01             \tand    $0x1,%eax\n     b53:\t89 c6                \tmov    %eax,%esi\n     b55:\tbf 03 00 00 00       \tmov    $0x3,%edi\n     b5a:\te8 a1 f4 ff ff       \tcallq  0 <_ZL21output_set_lamp_valueii>\n     b5f:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n     b63:\tc1 f8 03             \tsar    $0x3,%eax\n     b66:\t83 e0 01             \tand    $0x1,%eax\n     b69:\t89 c6                \tmov    %eax,%esi\n     b6b:\tbf 04 00 00 00       \tmov    $0x4,%edi\n     b70:\te8 8b f4 ff ff       \tcallq  0 <_ZL21output_set_lamp_valueii>\n     b75:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n     b79:\tc1 f8 04             \tsar    $0x4,%eax\n     b7c:\t83 e0 01             \tand    $0x1,%eax\n     b7f:\t89 c6                \tmov    %eax,%esi\n     b81:\tbf 05 00 00 00       \tmov    $0x5,%edi\n     b86:\te8 75 f4 ff ff       \tcallq  0 <_ZL21output_set_lamp_valueii>\n     b8b:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n     b8f:\tc1 f8 05             \tsar    $0x5,%eax\n     b92:\t83 e0 01             \tand    $0x1,%eax\n     b95:\t89 c6                \tmov    %eax,%esi\n     b97:\tbf 06 00 00 00       \tmov    $0x6,%edi\n     b9c:\te8 5f f4 ff ff       \tcallq  0 <_ZL21output_set_lamp_valueii>\n     ba1:\t0f b7 45 cc          \tmovzwl -0x34(%rbp),%eax\n     ba5:\t25 00 ff 00 00       \tand    $0xff00,%eax\n     baa:\t85 c0                \ttest   %eax,%eax\n     bac:\t74 50                \tje     bfe <_ZL15galaxi_500004_wP13address_spacejtt+0x11e>\n     bae:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n     bb2:\t25 00 01 00 00       \tand    $0x100,%eax\n     bb7:\t89 c2                \tmov    %eax,%edx\n     bb9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bbd:\t89 90 44 02 00 00    \tmov    %edx,0x244(%rax)\n     bc3:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n     bc7:\t25 00 10 00 00       \tand    $0x1000,%eax\n     bcc:\t89 c2                \tmov    %eax,%edx\n     bce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bd2:\t89 90 40 02 00 00    \tmov    %edx,0x240(%rax)\n     bd8:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n     bdc:\t25 00 20 00 00       \tand    $0x2000,%eax\n     be1:\t89 c3                \tmov    %eax,%ebx\n     be3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     be7:\t48 89 c7             \tmov    %rax,%rdi\n     bea:\te8 00 00 00 00       \tcallq  bef <_ZL15galaxi_500004_wP13address_spacejtt+0x10f>\n     bef:\t89 da                \tmov    %ebx,%edx\n     bf1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     bf6:\t48 89 c7             \tmov    %rax,%rdi\n     bf9:\te8 00 00 00 00       \tcallq  bfe <_ZL15galaxi_500004_wP13address_spacejtt+0x11e>\n     bfe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c02:\t0f b7 80 4c 02 00 00 \tmovzwl 0x24c(%rax),%eax\n     c09:\t89 c2                \tmov    %eax,%edx\n     c0b:\t0f b7 45 cc          \tmovzwl -0x34(%rbp),%eax\n     c0f:\tf7 d0                \tnot    %eax\n     c11:\t21 c2                \tand    %eax,%edx\n     c13:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n     c17:\t66 23 45 cc          \tand    -0x34(%rbp),%ax\n     c1b:\t09 d0                \tor     %edx,%eax\n     c1d:\t89 c2                \tmov    %eax,%edx\n     c1f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c23:\t66 89 90 4c 02 00 00 \tmov    %dx,0x24c(%rax)\n     c2a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c2e:\t48 89 c7             \tmov    %rax,%rdi\n     c31:\te8 00 00 00 00       \tcallq  c36 <_ZL15galaxi_500004_wP13address_spacejtt+0x156>\n     c36:\t48 89 c7             \tmov    %rax,%rdi\n     c39:\te8 af fd ff ff       \tcallq  9ed <_ZL8show_outR15running_machine>\n     c3e:\t90                   \tnop\n     c3f:\t48 83 c4 38          \tadd    $0x38,%rsp\n     c43:\t5b                   \tpop    %rbx\n     c44:\t5d                   \tpop    %rbp\n     c45:\tc3                   \tretq   ", "code_s": "void __fastcall galaxi_500004_w(address_space *a1, unsigned int a2,\n                                unsigned __int16 a3, __int16 a4) {\n  __int64 v4;\n  __int64 v5;\n  __int64 <span class=\"supfact\">v8</span>;\n  v4 = address_space machine(a1);\n  <span class=\"supfact\">v8</span> = running_machine driver_data<galaxi_state>(v4);\n  if ((_BYTE)a4) {\n    output_set_lamp_value(Number, a3 & Number);\n    output_set_lamp_value(Number, ((int)a3 >> Number) & Number);\n    output_set_lamp_value(Number, ((int)a3 >> Number) & Number);\n    output_set_lamp_value(Number, ((int)a3 >> Number) & Number);\n    output_set_lamp_value(Number, ((int)a3 >> Number) & Number);\n    output_set_lamp_value(Number, ((int)a3 >> Number) & Number);\n  }\n  if ((a4 & Number) != Number) {\n    *(_DWORD *)(<span class=\"supfact\">v8</span> + Number) = a3 & Number;\n    *(_DWORD *)(<span class=\"supfact\">v8</span> + Number) = a3 & Number;\n    v5 = address_space machine(a1);\n    coin_counter_w(v5, Number L, a3 & Number);\n  }\n  *(_WORD *)(<span class=\"supfact\">v8</span> + Number) =\n      ~a4 & *(_WORD *)(<span class=\"supfact\">v8</span> + Number) | a4 & a3;\n  address_space machine(a1);\n  show_out();\n}", "code_t": "void __cdecl galaxi_500004_w(address_space *space, offs_t offset, UINT16 data,\n                             UINT16 mem_mask) {\n  running_machine *v4;\n  running_machine *v5;\n  running_machine *v6;\n  galaxi_state *<span class=\"supfact\">state</span>;\n  v4 = address_space machine(space);\n  <span class=\"supfact\">state</span> = running_machine driver_data<galaxi_state>(v4);\n  if ((_BYTE)mem_mask) {\n    output_set_lamp_value(Number, data & Number);\n    output_set_lamp_value(Number, ((int)data >> Number) & Number);\n    output_set_lamp_value(Number, ((int)data >> Number) & Number);\n    output_set_lamp_value(Number, ((int)data >> Number) & Number);\n    output_set_lamp_value(Number, ((int)data >> Number) & Number);\n    output_set_lamp_value(Number, ((int)data >> Number) & Number);\n  }\n  if ((mem_mask & Number) != Number) {\n    <span class=\"supfact\">state</span>->m_ticket = data & Number;\n    <span class=\"supfact\">state</span>->m_hopper = data & Number;\n    v5 = address_space machine(space);\n    coin_counter_w(v5, Number, data & Number);\n  }\n  <span class=\"supfact\">state</span>->m_out[Number] =\n      ~mem_mask & <span class=\"supfact\">state</span>->m_out[Number] | mem_mask & data;\n  v6 = address_space machine(space);\n  show_out(v6);\n}", "var": [{"name": "v8", "type": "__int64", "ref_name": "state", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "s3lsensor", "repo_name": "snowfort", "path": "s3lsensor/snowfort/d550c79949919192cd4b875a6cc3f6f207923ba0245787eacb3e0fadab416cb9", "path_in_repo": "s3lsensor/snowfort/examples/ipv6/simple-udp-rpl/obj_native/sicslowmac.o", "objdump": "0000000000000000 <is_broadcast_addr>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 f8                \tmov    %edi,%eax\n   6:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n   a:\t88 45 ec             \tmov    %al,-0x14(%rbp)\n   d:\t80 7d ec 02          \tcmpb   $0x2,-0x14(%rbp)\n  11:\t75 07                \tjne    1a <is_broadcast_addr+0x1a>\n  13:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  18:\teb 05                \tjmp    1f <is_broadcast_addr+0x1f>\n  1a:\tb8 08 00 00 00       \tmov    $0x8,%eax\n  1f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  22:\teb 1b                \tjmp    3f <is_broadcast_addr+0x3f>\n  24:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  27:\t48 63 d0             \tmovslq %eax,%rdx\n  2a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  2e:\t48 01 d0             \tadd    %rdx,%rax\n  31:\t0f b6 00             \tmovzbl (%rax),%eax\n  34:\t3c ff                \tcmp    $0xff,%al\n  36:\t74 07                \tje     3f <is_broadcast_addr+0x3f>\n  38:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  3d:\teb 12                \tjmp    51 <is_broadcast_addr+0x51>\n  3f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  42:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  45:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  48:\t85 c0                \ttest   %eax,%eax\n  4a:\t7f d8                \tjg     24 <is_broadcast_addr+0x24>\n  4c:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  51:\t5d                   \tpop    %rbp\n  52:\tc3                   \tretq   ", "code_s": "__int64 __fastcall is_broadcast_addr(char a1, __int64 a2) {\n  int v2;\n  int v4;\n  int <span class=\"supfact\">v5</span>;\n  if (a1 == Number)\n    v2 = Number;\n  else\n    v2 = Number;\n  <span class=\"supfact\">v5</span> = v2;\n  while (Number) {\n    v4 = <span class=\"supfact\">v5</span>--;\n    if (v4 <= Number)\n      break;\n    if (*(_BYTE *)(<span class=\"supfact\">v5</span> + a2) != Number)\n      return Number L;\n  }\n  return Number L;\n}", "code_t": "int __cdecl is_broadcast_addr(uint8_t mode, uint8_t *addr) {\n  int v2;\n  int v4;\n  int <span class=\"supfact\">i</span>;\n  if (mode == Number)\n    v2 = Number;\n  else\n    v2 = Number;\n  <span class=\"supfact\">i</span> = v2;\n  while (Number) {\n    v4 = <span class=\"supfact\">i</span>--;\n    if (v4 <= Number)\n      break;\n    if (addr[<span class=\"supfact\">i</span>] != Number)\n      return Number;\n  }\n  return Number;\n}", "var": [{"name": "v5", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "bloodstalker", "repo_name": "blogstuff", "path": "bloodstalker/blogstuff/e5d1c8fad2951977dc94940e542db30173b87fe2732e6c1c20f8e810270889e7", "path_in_repo": "bloodstalker/blogstuff/src/cstruct2luatbale/lua/lua", "objdump": "0000000000409ce1 <funcinfo>:\n  409ce1:\t55                   \tpush   %rbp\n  409ce2:\t48 89 e5             \tmov    %rsp,%rbp\n  409ce5:\t48 83 ec 20          \tsub    $0x20,%rsp\n  409ce9:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  409ced:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  409cf1:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  409cf6:\t74 0c                \tje     409d04 <funcinfo+0x23>\n  409cf8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  409cfc:\t0f b6 40 08          \tmovzbl 0x8(%rax),%eax\n  409d00:\t3c 36                \tcmp    $0x36,%al\n  409d02:\t75 30                \tjne    409d34 <funcinfo+0x53>\n  409d04:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409d08:\t48 c7 40 20 19 c6 43 \tmovq   $0x43c619,0x20(%rax)\n  409d0f:\t00 \n  409d10:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409d14:\tc7 40 2c ff ff ff ff \tmovl   $0xffffffff,0x2c(%rax)\n  409d1b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409d1f:\tc7 40 30 ff ff ff ff \tmovl   $0xffffffff,0x30(%rax)\n  409d26:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409d2a:\t48 c7 40 18 1e c6 43 \tmovq   $0x43c61e,0x18(%rax)\n  409d31:\t00 \n  409d32:\teb 6f                \tjmp    409da3 <funcinfo+0xc2>\n  409d34:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  409d38:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  409d3c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  409d40:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  409d44:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n  409d48:\t48 85 c0             \ttest   %rax,%rax\n  409d4b:\t74 0e                \tje     409d5b <funcinfo+0x7a>\n  409d4d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  409d51:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n  409d55:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n  409d59:\teb 05                \tjmp    409d60 <funcinfo+0x7f>\n  409d5b:\tba 20 c6 43 00       \tmov    $0x43c620,%edx\n  409d60:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409d64:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n  409d68:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  409d6c:\t8b 50 2c             \tmov    0x2c(%rax),%edx\n  409d6f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409d73:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n  409d76:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  409d7a:\t8b 50 30             \tmov    0x30(%rax),%edx\n  409d7d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409d81:\t89 50 30             \tmov    %edx,0x30(%rax)\n  409d84:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409d88:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n  409d8b:\t85 c0                \ttest   %eax,%eax\n  409d8d:\t75 07                \tjne    409d96 <funcinfo+0xb5>\n  409d8f:\tba 23 c6 43 00       \tmov    $0x43c623,%edx\n  409d94:\teb 05                \tjmp    409d9b <funcinfo+0xba>\n  409d96:\tba 28 c6 43 00       \tmov    $0x43c628,%edx\n  409d9b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409d9f:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n  409da3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409da7:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  409dab:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  409daf:\t48 8d 4a 3c          \tlea    0x3c(%rdx),%rcx\n  409db3:\tba 3c 00 00 00       \tmov    $0x3c,%edx\n  409db8:\t48 89 c6             \tmov    %rax,%rsi\n  409dbb:\t48 89 cf             \tmov    %rcx,%rdi\n  409dbe:\te8 48 96 00 00       \tcallq  41340b <luaO_chunkid>\n  409dc3:\t90                   \tnop\n  409dc4:\tc9                   \tleaveq \n  409dc5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall funcinfo(__int64 a1, __int64 a2) {\n  const char *v2;\n  const char *v3;\n  __int64 <span class=\"supfact\">v5</span>;\n  if (a2 && *(_BYTE *)(a2 + Number) != Number) {\n    <span class=\"supfact\">v5</span> = *(_QWORD *)(a2 + Number);\n    if (*(_QWORD *)(<span class=\"supfact\">v5</span> + Number))\n      v2 = (const char *)(*(_QWORD *)(<span class=\"supfact\">v5</span> + Number) + Number L);\n    else\n      v2 = String;\n    *(_QWORD *)(a1 + Number) = v2;\n    *(_DWORD *)(a1 + Number) = *(_DWORD *)(<span class=\"supfact\">v5</span> + Number);\n    *(_DWORD *)(a1 + Number) = *(_DWORD *)(<span class=\"supfact\">v5</span> + Number);\n    if (*(_DWORD *)(a1 + Number))\n      v3 = String;\n    else\n      v3 = String;\n    *(_QWORD *)(a1 + Number) = v3;\n  } else {\n    *(_QWORD *)(a1 + Number) = String;\n    *(_DWORD *)(a1 + Number) = Number;\n    *(_DWORD *)(a1 + Number) = Number;\n    *(_QWORD *)(a1 + Number) = String;\n  }\n  return luaO_chunkid(a1 + Number, *(_QWORD *)(a1 + Number), Number L);\n}", "code_t": "void __cdecl funcinfo(lua_Debug_0 *ar, Closure_0 *cl_0) {\n  const char *v2;\n  const char *v3;\n  const Proto_0 *<span class=\"supfact\">p</span>;\n  if (cl_0 && cl_0->c.tt != Number) {\n    <span class=\"supfact\">p</span> = cl_0->l.<span class=\"supfact\">p</span>;\n    if (<span class=\"supfact\">p</span>->source)\n      v2 = (const char *)&<span class=\"supfact\">p</span>->source[Number];\n    else\n      v2 = String;\n    ar->source = v2;\n    ar->linedefined = <span class=\"supfact\">p</span>->linedefined;\n    ar->lastlinedefined = <span class=\"supfact\">p</span>->lastlinedefined;\n    if (ar->linedefined)\n      v3 = String;\n    else\n      v3 = String;\n    ar->what = v3;\n  } else {\n    ar->source = String;\n    ar->linedefined = Number;\n    ar->lastlinedefined = Number;\n    ar->what = String;\n  }\n  luaO_chunkid(ar->short_src, ar->source, Number);\n}", "var": [{"name": "v5", "type": "Proto_0 *", "ref_name": "p", "ref_type": "const Proto_0 *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "yoshii", "repo_name": "qemu", "path": "yoshii/qemu/27599d9d0feab011f797f0aec00e6557f662ac2e377ea4e8ccb8467cf9b6395d", "path_in_repo": "yoshii/qemu//ppc64-softmmu/rtl8139.o", "objdump": "0000000000002543 <rtl8139_Cfg9346_read>:\n    2543:\t55                   \tpush   %rbp\n    2544:\t48 89 e5             \tmov    %rsp,%rbp\n    2547:\t48 83 ec 30          \tsub    $0x30,%rsp\n    254b:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    254f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2556:\t00 00 \n    2558:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    255c:\t31 c0                \txor    %eax,%eax\n    255e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2562:\t0f b6 80 b2 02 00 00 \tmovzbl 0x2b2(%rax),%eax\n    2569:\t0f b6 c0             \tmovzbl %al,%eax\n    256c:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    256f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    2572:\t25 c0 00 00 00       \tand    $0xc0,%eax\n    2577:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    257a:\t81 7d f0 80 00 00 00 \tcmpl   $0x80,-0x10(%rbp)\n    2581:\t75 1f                \tjne    25a2 <rtl8139_Cfg9346_read+0x5f>\n    2583:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2587:\t48 89 c7             \tmov    %rax,%rdi\n    258a:\te8 a3 e3 ff ff       \tcallq  932 <prom9346_get_wire>\n    258f:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    2592:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    2596:\t74 06                \tje     259e <rtl8139_Cfg9346_read+0x5b>\n    2598:\t83 4d ec 01          \torl    $0x1,-0x14(%rbp)\n    259c:\teb 04                \tjmp    25a2 <rtl8139_Cfg9346_read+0x5f>\n    259e:\t83 65 ec fe          \tandl   $0xfffffffe,-0x14(%rbp)\n    25a2:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    25a5:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    25a9:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n    25b0:\t00 00 \n    25b2:\t74 05                \tje     25b9 <rtl8139_Cfg9346_read+0x76>\n    25b4:\te8 00 00 00 00       \tcallq  25b9 <rtl8139_Cfg9346_read+0x76>\n    25b9:\tc9                   \tleaveq \n    25ba:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rtl8139_Cfg9346_read(__int64 a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = *(unsigned __int8 *)(a1 + Number);\n  if ((<span class=\"supfact\">v2</span> & Number) == Number) {\n    if ((unsigned int)prom9346_get_wire(a1))\n      <span class=\"supfact\">v2</span> |= Number;\n    else\n      <span class=\"supfact\">v2</span> &= Number;\n  }\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "uint32_t __cdecl rtl8139_Cfg9346_read(RTL8139State_0 *s) {\n  uint32_t <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = s->Cfg9346;\n  if ((<span class=\"supfact\">ret</span> & Number) == Number) {\n    if (prom9346_get_wire(s))\n      <span class=\"supfact\">ret</span> |= Number;\n    else\n      <span class=\"supfact\">ret</span> &= Number;\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v2", "type": "uint32_t", "ref_name": "ret", "ref_type": "uint32_t"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/2f0e4605cd222ce637e3b7716ada7f79fbf94d4aa020e7b29aadee0131d83542", "path_in_repo": "madeye/GRACE/qemu-0.12.5/mips64-softmmu/ac97.o", "objdump": "00000000000008a5 <mixer_reset>:\n     8a5:\t55                   \tpush   %rbp\n     8a6:\t48 89 e5             \tmov    %rsp,%rbp\n     8a9:\t48 83 ec 20          \tsub    $0x20,%rsp\n     8ad:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     8b1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8b5:\t48 05 c8 02 00 00    \tadd    $0x2c8,%rax\n     8bb:\tba 00 01 00 00       \tmov    $0x100,%edx\n     8c0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     8c5:\t48 89 c7             \tmov    %rax,%rdi\n     8c8:\te8 00 00 00 00       \tcallq  8cd <mixer_reset+0x28>\n     8cd:\t48 8d 45 fd          \tlea    -0x3(%rbp),%rax\n     8d1:\tba 03 00 00 00       \tmov    $0x3,%edx\n     8d6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     8db:\t48 89 c7             \tmov    %rax,%rdi\n     8de:\te8 00 00 00 00       \tcallq  8e3 <mixer_reset+0x3e>\n     8e3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8e7:\tba 00 00 00 00       \tmov    $0x0,%edx\n     8ec:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     8f1:\t48 89 c7             \tmov    %rax,%rdi\n     8f4:\te8 f3 fb ff ff       \tcallq  4ec <mixer_store>\n     8f9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8fd:\tba 00 80 00 00       \tmov    $0x8000,%edx\n     902:\tbe 06 00 00 00       \tmov    $0x6,%esi\n     907:\t48 89 c7             \tmov    %rax,%rdi\n     90a:\te8 dd fb ff ff       \tcallq  4ec <mixer_store>\n     90f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     913:\tba 00 00 00 00       \tmov    $0x0,%edx\n     918:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n     91d:\t48 89 c7             \tmov    %rax,%rdi\n     920:\te8 c7 fb ff ff       \tcallq  4ec <mixer_store>\n     925:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     929:\tba 08 80 00 00       \tmov    $0x8008,%edx\n     92e:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n     933:\t48 89 c7             \tmov    %rax,%rdi\n     936:\te8 b1 fb ff ff       \tcallq  4ec <mixer_store>\n     93b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     93f:\tba 08 80 00 00       \tmov    $0x8008,%edx\n     944:\tbe 0e 00 00 00       \tmov    $0xe,%esi\n     949:\t48 89 c7             \tmov    %rax,%rdi\n     94c:\te8 9b fb ff ff       \tcallq  4ec <mixer_store>\n     951:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     955:\tba 08 88 00 00       \tmov    $0x8808,%edx\n     95a:\tbe 12 00 00 00       \tmov    $0x12,%esi\n     95f:\t48 89 c7             \tmov    %rax,%rdi\n     962:\te8 85 fb ff ff       \tcallq  4ec <mixer_store>\n     967:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     96b:\tba 08 88 00 00       \tmov    $0x8808,%edx\n     970:\tbe 16 00 00 00       \tmov    $0x16,%esi\n     975:\t48 89 c7             \tmov    %rax,%rdi\n     978:\te8 6f fb ff ff       \tcallq  4ec <mixer_store>\n     97d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     981:\tba 00 80 00 00       \tmov    $0x8000,%edx\n     986:\tbe 1e 00 00 00       \tmov    $0x1e,%esi\n     98b:\t48 89 c7             \tmov    %rax,%rdi\n     98e:\te8 59 fb ff ff       \tcallq  4ec <mixer_store>\n     993:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     997:\tba 00 00 00 00       \tmov    $0x0,%edx\n     99c:\tbe 20 00 00 00       \tmov    $0x20,%esi\n     9a1:\t48 89 c7             \tmov    %rax,%rdi\n     9a4:\te8 43 fb ff ff       \tcallq  4ec <mixer_store>\n     9a9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9ad:\tba 00 00 00 00       \tmov    $0x0,%edx\n     9b2:\tbe 22 00 00 00       \tmov    $0x22,%esi\n     9b7:\t48 89 c7             \tmov    %rax,%rdi\n     9ba:\te8 2d fb ff ff       \tcallq  4ec <mixer_store>\n     9bf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9c3:\tba 0f 00 00 00       \tmov    $0xf,%edx\n     9c8:\tbe 26 00 00 00       \tmov    $0x26,%esi\n     9cd:\t48 89 c7             \tmov    %rax,%rdi\n     9d0:\te8 17 fb ff ff       \tcallq  4ec <mixer_store>\n     9d5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9d9:\tba 84 83 00 00       \tmov    $0x8384,%edx\n     9de:\tbe 7c 00 00 00       \tmov    $0x7c,%esi\n     9e3:\t48 89 c7             \tmov    %rax,%rdi\n     9e6:\te8 01 fb ff ff       \tcallq  4ec <mixer_store>\n     9eb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9ef:\tba 00 76 00 00       \tmov    $0x7600,%edx\n     9f4:\tbe 7e 00 00 00       \tmov    $0x7e,%esi\n     9f9:\t48 89 c7             \tmov    %rax,%rdi\n     9fc:\te8 eb fa ff ff       \tcallq  4ec <mixer_store>\n     a01:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a05:\tba 09 08 00 00       \tmov    $0x809,%edx\n     a0a:\tbe 28 00 00 00       \tmov    $0x28,%esi\n     a0f:\t48 89 c7             \tmov    %rax,%rdi\n     a12:\te8 d5 fa ff ff       \tcallq  4ec <mixer_store>\n     a17:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a1b:\tba 09 00 00 00       \tmov    $0x9,%edx\n     a20:\tbe 2a 00 00 00       \tmov    $0x2a,%esi\n     a25:\t48 89 c7             \tmov    %rax,%rdi\n     a28:\te8 bf fa ff ff       \tcallq  4ec <mixer_store>\n     a2d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a31:\tba 80 bb 00 00       \tmov    $0xbb80,%edx\n     a36:\tbe 2c 00 00 00       \tmov    $0x2c,%esi\n     a3b:\t48 89 c7             \tmov    %rax,%rdi\n     a3e:\te8 a9 fa ff ff       \tcallq  4ec <mixer_store>\n     a43:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a47:\tba 80 bb 00 00       \tmov    $0xbb80,%edx\n     a4c:\tbe 2e 00 00 00       \tmov    $0x2e,%esi\n     a51:\t48 89 c7             \tmov    %rax,%rdi\n     a54:\te8 93 fa ff ff       \tcallq  4ec <mixer_store>\n     a59:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a5d:\tba 80 bb 00 00       \tmov    $0xbb80,%edx\n     a62:\tbe 30 00 00 00       \tmov    $0x30,%esi\n     a67:\t48 89 c7             \tmov    %rax,%rdi\n     a6a:\te8 7d fa ff ff       \tcallq  4ec <mixer_store>\n     a6f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a73:\tba 80 bb 00 00       \tmov    $0xbb80,%edx\n     a78:\tbe 32 00 00 00       \tmov    $0x32,%esi\n     a7d:\t48 89 c7             \tmov    %rax,%rdi\n     a80:\te8 67 fa ff ff       \tcallq  4ec <mixer_store>\n     a85:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a89:\tba 80 bb 00 00       \tmov    $0xbb80,%edx\n     a8e:\tbe 34 00 00 00       \tmov    $0x34,%esi\n     a93:\t48 89 c7             \tmov    %rax,%rdi\n     a96:\te8 51 fa ff ff       \tcallq  4ec <mixer_store>\n     a9b:\t48 8d 55 fd          \tlea    -0x3(%rbp),%rdx\n     a9f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     aa3:\t48 89 d6             \tmov    %rdx,%rsi\n     aa6:\t48 89 c7             \tmov    %rax,%rdi\n     aa9:\te8 01 fd ff ff       \tcallq  7af <reset_voices>\n     aae:\t90                   \tnop\n     aaf:\tc9                   \tleaveq \n     ab0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mixer_reset(_QWORD *a1) {\n  char <span class=\"supfact\">s</span>[Number];\n  memset(a1 + Number, Number, Number);\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  mixer_store((__int64)a1, Number, Number);\n  return reset_voices(a1, (unsigned __int8 *)<span class=\"supfact\">s</span>);\n}", "code_t": "void __cdecl mixer_reset(AC97LinkState_0 *s) {\n  uint8_t <span class=\"supfact\">active</span>[Number];\n  memset(s->mixer_data, Number, sizeof(s->mixer_data));\n  memset(<span class=\"supfact\">active</span>, Number, sizeof(<span class=\"supfact\">active</span>));\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  mixer_store(s, Number, Number);\n  reset_voices(s, <span class=\"supfact\">active</span>);\n}", "var": [{"name": "s", "type": "uint8_t[3]", "ref_name": "active", "ref_type": "uint8_t[3]"}], "has_struc": false, "body_in_train": true}, {"code_s": "void __fastcall rocksdb_writebatch_merge(__int64 *a1, __int64 a2, __int64 a3,\n                                         __int64 a4, __int64 a5) {\n  __int64 v5;\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  char <span class=\"supfact\">v8</span>[Number];\n  void *<span class=\"supfact\">ptr</span>;\n  v5 = *a1;\n  <span class=\"supfact\">v7</span>[Number] = a4;\n  <span class=\"supfact\">v7</span>[Number] = a5;\n  <span class=\"supfact\">v6</span>[Number] = a2;\n  <span class=\"supfact\">v6</span>[Number] = a3;\n  (*(void(__fastcall **)(char *, __int64 *, _QWORD, __int64 *, __int64 *))(\n      v5 + Number))(<span class=\"supfact\">v8</span>, a1, Number L, <span class=\"supfact\">v6</span>,\n                    <span class=\"supfact\">v7</span>);\n  free(<span class=\"supfact\">ptr</span>);\n}", "code_t": "void __fastcall rocksdb_writebatch_merge(rocksdb_writebatch_t_0 *b,\n                                         const char *key, size_t klen,\n                                         const char *val, size_t vlen) {\n  __int64 v5;\n  const char *<span class=\"supfact\">v6</span>;\n  size_t klena;\n  const char *<span class=\"supfact\">vala</span>;\n  size_t vlena;\n  char <span class=\"supfact\">v10</span>[Number];\n  void *<span class=\"supfact\">ptr</span>;\n  v5 = *(_QWORD *)b->rep;\n  <span class=\"supfact\">vala</span> = val;\n  vlena = vlen;\n  <span class=\"supfact\">v6</span> = key;\n  klena = klen;\n  (*(void(__fastcall **)(char *, rocksdb_writebatch_t_0 *, _QWORD,\n                         const char **, const char **))(v5 + Number))(\n      <span class=\"supfact\">v10</span>, b, Number L, &<span class=\"supfact\">v6</span>,\n      &<span class=\"supfact\">vala</span>);\n  free(<span class=\"supfact\">ptr</span>);\n}", "var": [{"name": "ptr", "type": "__unk__", "ref_name": "ptr", "ref_type": "void *"}, {"name": "v8", "type": "char[8]", "ref_name": "v10", "ref_type": "char[8]"}, {"name": "v7", "type": "char[16]", "ref_name": "vala", "ref_type": "const char *"}, {"name": "v6", "type": "char[16]", "ref_name": "v6", "ref_type": "const char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "SlimRoms", "repo_name": "kernel_htc_msm8974", "path": "SlimRoms/kernel_htc_msm8974/a44c8ed92c0fb7c202f75cf1f0be375fdcb256554283143f3fb58dce5cf3686a", "path_in_repo": "SlimRoms/kernel_htc_msm8974/tools/perf/builtin-lock.o", "objdump": "000000000000136c <process_lock_contended_event>:\n    136c:\t55                   \tpush   %rbp\n    136d:\t48 89 e5             \tmov    %rsp,%rbp\n    1370:\t48 83 ec 60          \tsub    $0x60,%rsp\n    1374:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1378:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    137c:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n    137f:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n    1383:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n    1387:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    138e:\t00 00 \n    1390:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1394:\t31 c0                \txor    %eax,%eax\n    1396:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    139a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    139e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    13a3:\t48 89 c7             \tmov    %rax,%rdi\n    13a6:\te8 00 00 00 00       \tcallq  13ab <process_lock_contended_event+0x3f>\n    13ab:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    13af:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    13b3:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    13b7:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    13bb:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    13bf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    13c4:\t48 89 c7             \tmov    %rax,%rdi\n    13c7:\te8 00 00 00 00       \tcallq  13cc <process_lock_contended_event+0x60>\n    13cc:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    13d0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 13d7 <process_lock_contended_event+0x6b>\n    13d7:\t48 8b 00             \tmov    (%rax),%rax\n    13da:\t48 85 c0             \ttest   %rax,%rax\n    13dd:\t74 27                \tje     1406 <process_lock_contended_event+0x9a>\n    13df:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 13e6 <process_lock_contended_event+0x7a>\n    13e6:\t4c 8b 48 10          \tmov    0x10(%rax),%r9\n    13ea:\t48 8b 7d a8          \tmov    -0x58(%rbp),%rdi\n    13ee:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n    13f2:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n    13f5:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n    13f9:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    13fd:\t49 89 f8             \tmov    %rdi,%r8\n    1400:\t48 89 c7             \tmov    %rax,%rdi\n    1403:\t41 ff d1             \tcallq  *%r9\n    1406:\t90                   \tnop\n    1407:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    140b:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1412:\t00 00 \n    1414:\t74 05                \tje     141b <process_lock_contended_event+0xaf>\n    1416:\te8 00 00 00 00       \tcallq  141b <process_lock_contended_event+0xaf>\n    141b:\tc9                   \tleaveq \n    141c:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall process_lock_contended_event(__int64 a1, __int64 a2,\n                                                         unsigned int a3,\n                                                         __int64 a4,\n                                                         __int64 a5) {\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  <span class=\"supfact\">v9</span>[Number] = raw_field_value(a2, String, a1);\n  <span class=\"supfact\">v9</span>[Number] = raw_field_ptr(a2, String, a1);\n  if (*(_QWORD *)trace_handler)\n    (*(void(__fastcall **)(__int64 *, __int64, _QWORD, __int64, __int64))(\n        trace_handler + Number))(<span class=\"supfact\">v9</span>, a2, a3, a4, a5);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v10</span>;\n}", "code_t": "void __cdecl process_lock_contended_event(void *data, event *event, int cpu,\n                                          u64 timestamp, thread *thread) {\n  trace_contended_event <span class=\"supfact\">contended_event</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  <span class=\"supfact\">contended_event</span>.addr =\n      (void *)raw_field_value(event, String, data);\n  <span class=\"supfact\">contended_event</span>.name =\n      (const char *)raw_field_ptr(event, String, data);\n  if (trace_handler->acquire_event)\n    trace_handler-><span class=\"supfact\">contended_event</span>(\n        &<span class=\"supfact\">contended_event</span>, event, cpu, timestamp, thread);\n}", "var": [{"name": "v10", "type": "unsigned __int64", "ref_name": "v9", "ref_type": "unsigned __int64"}, {"name": "v9", "type": "struct trace_contended_event { void * addr; const char * name; }", "ref_name": "contended_event", "ref_type": "struct trace_contended_event { void * addr; const char * name; }"}], "has_struc": true, "body_in_train": true}, {"repo_owner": "zzilla", "repo_name": "CodeCollection", "path": "zzilla/CodeCollection/9ac3389e7c2c8fb8ee63ae8614d691a50f095497c5b248bbea1ba50436302044", "path_in_repo": "zzilla/CodeCollection/A-V/ffmpeg/libavcodec/iff.o", "objdump": "00000000000022e3 <decode_end>:\n    22e3:\t48 83 ec 28          \tsub    $0x28,%rsp\n    22e7:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    22ec:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    22f1:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    22f8:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n    22fd:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2302:\t48 8b 00             \tmov    (%rax),%rax\n    2305:\t48 85 c0             \ttest   %rax,%rax\n    2308:\t74 1e                \tje     2328 <decode_end+0x45>\n    230a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    230f:\t48 8b 88 30 01 00 00 \tmov    0x130(%rax),%rcx\n    2316:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n    231b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2320:\t48 89 d6             \tmov    %rdx,%rsi\n    2323:\t48 89 c7             \tmov    %rax,%rdi\n    2326:\tff d1                \tcallq  *%rcx\n    2328:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    232d:\t48 05 78 01 00 00    \tadd    $0x178,%rax\n    2333:\t48 89 c7             \tmov    %rax,%rdi\n    2336:\te8 00 00 00 00       \tcallq  233b <decode_end+0x58>\n    233b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2340:\t48 05 80 01 00 00    \tadd    $0x180,%rax\n    2346:\t48 89 c7             \tmov    %rax,%rdi\n    2349:\te8 00 00 00 00       \tcallq  234e <decode_end+0x6b>\n    234e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2353:\t48 05 88 01 00 00    \tadd    $0x188,%rax\n    2359:\t48 89 c7             \tmov    %rax,%rdi\n    235c:\te8 00 00 00 00       \tcallq  2361 <decode_end+0x7e>\n    2361:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2366:\t48 83 c4 28          \tadd    $0x28,%rsp\n    236a:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall decode_end(__int64 a1) {\n  _QWORD *<span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD **)(a1 + Number);\n  if (*<span class=\"supfact\">v2</span>)\n    (*(void(__fastcall **)(__int64, _QWORD *))(a1 + Number))(\n        a1, <span class=\"supfact\">v2</span>);\n  av_freep(<span class=\"supfact\">v2</span> + Number);\n  av_freep(<span class=\"supfact\">v2</span> + Number);\n  av_freep(<span class=\"supfact\">v2</span> + Number);\n  return Number L;\n}", "code_t": "int __cdecl decode_end(AVCodecContext_0 *avctx) {\n  IffContext *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (IffContext *)avctx->priv_data;\n  if (<span class=\"supfact\">s</span>->frame.data[Number])\n    avctx->release_buffer(avctx, (AVFrame_0 *)<span class=\"supfact\">s</span>);\n  av_freep(&<span class=\"supfact\">s</span>->planebuf);\n  av_freep(&<span class=\"supfact\">s</span>->ham_buf);\n  av_freep(&<span class=\"supfact\">s</span>->ham_palbuf);\n  return Number;\n}", "var": [{"name": "v2", "type": "IffContext *", "ref_name": "s", "ref_type": "IffContext *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "antmicro", "repo_name": "abc-lib", "path": "antmicro/abc-lib/5cbea705d76174a6da05bfd1a95c37373f45bbe53b7e27cbbd24458c44adaf4b", "path_in_repo": "antmicro/abc-lib//src/aig/aig/aigPartSat.o", "objdump": "00000000000005b0 <Vec_IntFindMax>:\n     5b0:\t55                   \tpush   %rbp\n     5b1:\t48 89 e5             \tmov    %rsp,%rbp\n     5b4:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     5b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5bc:\t8b 40 04             \tmov    0x4(%rax),%eax\n     5bf:\t85 c0                \ttest   %eax,%eax\n     5c1:\t75 07                \tjne    5ca <Vec_IntFindMax+0x1a>\n     5c3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5c8:\teb 5f                \tjmp    629 <Vec_IntFindMax+0x79>\n     5ca:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5ce:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     5d2:\t8b 00                \tmov    (%rax),%eax\n     5d4:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     5d7:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n     5de:\teb 3a                \tjmp    61a <Vec_IntFindMax+0x6a>\n     5e0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5e4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     5e8:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     5eb:\t48 63 d2             \tmovslq %edx,%rdx\n     5ee:\t48 c1 e2 02          \tshl    $0x2,%rdx\n     5f2:\t48 01 d0             \tadd    %rdx,%rax\n     5f5:\t8b 00                \tmov    (%rax),%eax\n     5f7:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n     5fa:\t7d 1a                \tjge    616 <Vec_IntFindMax+0x66>\n     5fc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     600:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     604:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     607:\t48 63 d2             \tmovslq %edx,%rdx\n     60a:\t48 c1 e2 02          \tshl    $0x2,%rdx\n     60e:\t48 01 d0             \tadd    %rdx,%rax\n     611:\t8b 00                \tmov    (%rax),%eax\n     613:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     616:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     61a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     61e:\t8b 40 04             \tmov    0x4(%rax),%eax\n     621:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n     624:\t7c ba                \tjl     5e0 <Vec_IntFindMax+0x30>\n     626:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     629:\t5d                   \tpop    %rbp\n     62a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Vec_IntFindMax(__int64 a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">i</span>;\n  if (!*(_DWORD *)(a1 + Number))\n    return Number L;\n  <span class=\"supfact\">v2</span> = **(_DWORD **)(a1 + Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < *(_DWORD *)(a1 + Number);\n       ++<span class=\"supfact\">i</span>) {\n    if ((signed int)<span class=\"supfact\">v2</span> <\n        *(_DWORD *)(Number L * <span class=\"supfact\">i</span> + *(_QWORD *)(a1 + Number)))\n      <span class=\"supfact\">v2</span> =\n          *(_DWORD *)(Number L * <span class=\"supfact\">i</span> + *(_QWORD *)(a1 + Number));\n  }\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "int __cdecl Vec_IntFindMax(Vec_Int_t *p) {\n  int <span class=\"supfact\">Best</span>;\n  int <span class=\"supfact\">i</span>;\n  if (!p->nSize)\n    return Number;\n  <span class=\"supfact\">Best</span> = *p->pArray;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < p->nSize;\n       ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">Best</span> < p->pArray[<span class=\"supfact\">i</span>])\n      <span class=\"supfact\">Best</span> = p->pArray[<span class=\"supfact\">i</span>];\n  }\n  return <span class=\"supfact\">Best</span>;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v2", "type": "int", "ref_name": "Best", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "vmware", "repo_name": "likewise-open", "path": "vmware/likewise-open/0d12d8375c06cf3be3dd9b726707740c6465fa6d0504f79ba9ec4663c5c581a4", "path_in_repo": "vmware/likewise-open/openssl/test/rc4test", "objdump": "00000000004018b4 <SHA1_Update>:\n  4018b4:\t55                   \tpush   %rbp\n  4018b5:\t48 89 e5             \tmov    %rsp,%rbp\n  4018b8:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4018bc:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4018c0:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  4018c4:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  4018c8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4018cc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4018d0:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  4018d5:\t75 0a                \tjne    4018e1 <SHA1_Update+0x2d>\n  4018d7:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4018dc:\te9 ba 01 00 00       \tjmpq   401a9b <SHA1_Update+0x1e7>\n  4018e1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4018e5:\t8b 40 14             \tmov    0x14(%rax),%eax\n  4018e8:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4018ec:\tc1 e2 03             \tshl    $0x3,%edx\n  4018ef:\t01 d0                \tadd    %edx,%eax\n  4018f1:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4018f4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4018f8:\t8b 40 14             \tmov    0x14(%rax),%eax\n  4018fb:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n  4018fe:\t73 11                \tjae    401911 <SHA1_Update+0x5d>\n  401900:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401904:\t8b 40 18             \tmov    0x18(%rax),%eax\n  401907:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40190a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40190e:\t89 50 18             \tmov    %edx,0x18(%rax)\n  401911:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401915:\t8b 40 18             \tmov    0x18(%rax),%eax\n  401918:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  40191c:\t48 c1 ea 1d          \tshr    $0x1d,%rdx\n  401920:\t01 c2                \tadd    %eax,%edx\n  401922:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401926:\t89 50 18             \tmov    %edx,0x18(%rax)\n  401929:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40192d:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  401930:\t89 50 14             \tmov    %edx,0x14(%rax)\n  401933:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401937:\t8b 40 5c             \tmov    0x5c(%rax),%eax\n  40193a:\t89 c0                \tmov    %eax,%eax\n  40193c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  401940:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  401945:\t0f 84 d5 00 00 00    \tje     401a20 <SHA1_Update+0x16c>\n  40194b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40194f:\t48 83 c0 1c          \tadd    $0x1c,%rax\n  401953:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  401957:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40195b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40195f:\t48 01 d0             \tadd    %rdx,%rax\n  401962:\t48 83 f8 3f          \tcmp    $0x3f,%rax\n  401966:\t76 7e                \tjbe    4019e6 <SHA1_Update+0x132>\n  401968:\tb8 40 00 00 00       \tmov    $0x40,%eax\n  40196d:\t48 2b 45 e8          \tsub    -0x18(%rbp),%rax\n  401971:\t48 89 c2             \tmov    %rax,%rdx\n  401974:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  401978:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40197c:\t48 01 c1             \tadd    %rax,%rcx\n  40197f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401983:\t48 89 c6             \tmov    %rax,%rsi\n  401986:\t48 89 cf             \tmov    %rcx,%rdi\n  401989:\te8 f2 f6 ff ff       \tcallq  401080 <memcpy@plt>\n  40198e:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  401992:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401996:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40199b:\t48 89 ce             \tmov    %rcx,%rsi\n  40199e:\t48 89 c7             \tmov    %rax,%rdi\n  4019a1:\te8 8e 03 00 00       \tcallq  401d34 <sha1_block_data_order>\n  4019a6:\tb8 40 00 00 00       \tmov    $0x40,%eax\n  4019ab:\t48 2b 45 e8          \tsub    -0x18(%rbp),%rax\n  4019af:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4019b3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4019b7:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n  4019bb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4019bf:\t48 29 45 c8          \tsub    %rax,-0x38(%rbp)\n  4019c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4019c7:\tc7 40 5c 00 00 00 00 \tmovl   $0x0,0x5c(%rax)\n  4019ce:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4019d2:\tba 40 00 00 00       \tmov    $0x40,%edx\n  4019d7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4019dc:\t48 89 c7             \tmov    %rax,%rdi\n  4019df:\te8 7c f6 ff ff       \tcallq  401060 <memset@plt>\n  4019e4:\teb 3a                \tjmp    401a20 <SHA1_Update+0x16c>\n  4019e6:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4019ea:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4019ee:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n  4019f2:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4019f6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4019fa:\t48 89 c6             \tmov    %rax,%rsi\n  4019fd:\t48 89 cf             \tmov    %rcx,%rdi\n  401a00:\te8 7b f6 ff ff       \tcallq  401080 <memcpy@plt>\n  401a05:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401a09:\t8b 40 5c             \tmov    0x5c(%rax),%eax\n  401a0c:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  401a10:\t01 c2                \tadd    %eax,%edx\n  401a12:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401a16:\t89 50 5c             \tmov    %edx,0x5c(%rax)\n  401a19:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401a1e:\teb 7b                \tjmp    401a9b <SHA1_Update+0x1e7>\n  401a20:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  401a24:\t48 c1 e8 06          \tshr    $0x6,%rax\n  401a28:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  401a2c:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  401a31:\t74 2c                \tje     401a5f <SHA1_Update+0x1ab>\n  401a33:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  401a37:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  401a3b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401a3f:\t48 89 ce             \tmov    %rcx,%rsi\n  401a42:\t48 89 c7             \tmov    %rax,%rdi\n  401a45:\te8 ea 02 00 00       \tcallq  401d34 <sha1_block_data_order>\n  401a4a:\t48 c1 65 e8 06       \tshlq   $0x6,-0x18(%rbp)\n  401a4f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401a53:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n  401a57:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401a5b:\t48 29 45 c8          \tsub    %rax,-0x38(%rbp)\n  401a5f:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  401a64:\t74 30                \tje     401a96 <SHA1_Update+0x1e2>\n  401a66:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401a6a:\t48 83 c0 1c          \tadd    $0x1c,%rax\n  401a6e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  401a72:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  401a76:\t89 c2                \tmov    %eax,%edx\n  401a78:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401a7c:\t89 50 5c             \tmov    %edx,0x5c(%rax)\n  401a7f:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  401a83:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  401a87:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401a8b:\t48 89 ce             \tmov    %rcx,%rsi\n  401a8e:\t48 89 c7             \tmov    %rax,%rdi\n  401a91:\te8 ea f5 ff ff       \tcallq  401080 <memcpy@plt>\n  401a96:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401a9b:\tc9                   \tleaveq \n  401a9c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall SHA1_Update(_DWORD *a1, char *a2, size_t a3) {\n  size_t <span class=\"supfact\">n</span>;\n  char *<span class=\"supfact\">s</span>;\n  __int64 v6;\n  __int64 v7;\n  size_t v8;\n  size_t v9;\n  unsigned int <span class=\"supfact\">v10</span>;\n  char *<span class=\"supfact\">src</span>;\n  <span class=\"supfact\">n</span> = a3;\n  <span class=\"supfact\">src</span> = a2;\n  if (!a3)\n    return Number L;\n  <span class=\"supfact\">v10</span> = Number * a3 + a1[Number];\n  if (<span class=\"supfact\">v10</span> < a1[Number])\n    ++a1[Number];\n  a1[Number] += a3 >> Number;\n  a1[Number] = <span class=\"supfact\">v10</span>;\n  v6 = (unsigned int)a1[Number];\n  if (a1[Number]) {\n    <span class=\"supfact\">s</span> = (char *)(a1 + Number);\n    if (v6 + a3 <= Number) {\n      memcpy(&<span class=\"supfact\">s</span>[v6], a2, a3);\n      a1[Number] += <span class=\"supfact\">n</span>;\n      return Number L;\n    }\n    memcpy(&<span class=\"supfact\">s</span>[v6], a2, Number - v6);\n    sha1_block_data_order(a1, <span class=\"supfact\">s</span>, Number L);\n    v7 = Number - v6;\n    <span class=\"supfact\">src</span> = &a2[v7];\n    <span class=\"supfact\">n</span> -= v7;\n    a1[Number] = Number;\n    memset(<span class=\"supfact\">s</span>, Number, Number);\n  }\n  v8 = <span class=\"supfact\">n</span> >> Number;\n  if (<span class=\"supfact\">n</span> >> Number) {\n    sha1_block_data_order(a1, <span class=\"supfact\">src</span>, v8);\n    v9 = v8 << Number;\n    <span class=\"supfact\">src</span> += v9;\n    <span class=\"supfact\">n</span> -= v9;\n  }\n  if (<span class=\"supfact\">n</span>) {\n    a1[Number] = <span class=\"supfact\">n</span>;\n    memcpy(a1 + Number, <span class=\"supfact\">src</span>, <span class=\"supfact\">n</span>);\n  }\n  return Number L;\n}", "code_t": "int __cdecl SHA1_Update(SHA_CTX *c, const void *data_, size_t len) {\n  size_t <span class=\"supfact\">lena</span>;\n  unsigned __int8 *<span class=\"supfact\">p</span>;\n  size_t n;\n  size_t nb;\n  size_t na;\n  size_t nc;\n  unsigned int <span class=\"supfact\">l</span>;\n  const unsigned __int8 *<span class=\"supfact\">data</span>;\n  <span class=\"supfact\">lena</span> = len;\n  <span class=\"supfact\">data</span> = (const unsigned __int8 *)data_;\n  if (!len)\n    return Number;\n  <span class=\"supfact\">l</span> = Number * len + c->Nl;\n  if (<span class=\"supfact\">l</span> < c->Nl)\n    ++c->Nh;\n  c->Nh += len >> Number;\n  c->Nl = <span class=\"supfact\">l</span>;\n  n = c->num;\n  if (c->num) {\n    <span class=\"supfact\">p</span> = (unsigned __int8 *)c-><span class=\"supfact\">data</span>;\n    if (n + len <= Number) {\n      memcpy(&<span class=\"supfact\">p</span>[n], data_, len);\n      c->num += <span class=\"supfact\">lena</span>;\n      return Number;\n    }\n    memcpy(&<span class=\"supfact\">p</span>[n], data_, Number - n);\n    sha1_block_data_order(c, <span class=\"supfact\">p</span>, Number);\n    nb = Number - n;\n    <span class=\"supfact\">data</span> = (const unsigned __int8 *)data_ + nb;\n    <span class=\"supfact\">lena</span> -= nb;\n    c->num = Number;\n    memset(<span class=\"supfact\">p</span>, Number, Number);\n  }\n  na = <span class=\"supfact\">lena</span> >> Number;\n  if (<span class=\"supfact\">lena</span> >> Number) {\n    sha1_block_data_order(c, <span class=\"supfact\">data</span>, na);\n    nc = na << Number;\n    <span class=\"supfact\">data</span> += nc;\n    <span class=\"supfact\">lena</span> -= nc;\n  }\n  if (<span class=\"supfact\">lena</span>) {\n    c->num = <span class=\"supfact\">lena</span>;\n    memcpy(c-><span class=\"supfact\">data</span>, <span class=\"supfact\">data</span>, <span class=\"supfact\">lena</span>);\n  }\n  return Number;\n}", "var": [{"name": "src", "type": "const unsigned __int8 *", "ref_name": "data", "ref_type": "const unsigned __int8 *"}, {"name": "v10", "type": "unsigned int", "ref_name": "l", "ref_type": "unsigned int"}, {"name": "s", "type": "unsigned __int8 *", "ref_name": "p", "ref_type": "unsigned __int8 *"}, {"name": "n", "type": "size_t", "ref_name": "lena", "ref_type": "size_t"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "postgrespro", "repo_name": "postgres_cluster", "path": "postgrespro/postgres_cluster/ef45ca18a4e6c049ebd713febf585420cff84017119805294f477df8428153a5", "path_in_repo": "postgrespro/postgres_cluster//src/backend/access/gist/gistutil.o", "objdump": "0000000000000d18 <gistKeyIsEQ>:\n     d18:\t55                   \tpush   %rbp\n     d19:\t48 89 e5             \tmov    %rsp,%rbp\n     d1c:\t48 83 ec 30          \tsub    $0x30,%rsp\n     d20:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     d24:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     d27:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     d2b:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n     d2f:\t48 8d 4d ff          \tlea    -0x1(%rbp),%rcx\n     d33:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d37:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     d3a:\t48 63 d2             \tmovslq %edx,%rdx\n     d3d:\t48 81 c2 88 0d 00 00 \tadd    $0xd88,%rdx\n     d44:\t8b 34 90             \tmov    (%rax,%rdx,4),%esi\n     d47:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     d4a:\t48 63 d0             \tmovslq %eax,%rdx\n     d4d:\t48 89 d0             \tmov    %rdx,%rax\n     d50:\t48 01 c0             \tadd    %rax,%rax\n     d53:\t48 01 d0             \tadd    %rdx,%rax\n     d56:\t48 c1 e0 04          \tshl    $0x4,%rax\n     d5a:\t48 8d 90 20 24 00 00 \tlea    0x2420(%rax),%rdx\n     d61:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d65:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n     d69:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     d6d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d71:\t49 89 c8             \tmov    %rcx,%r8\n     d74:\t48 89 d1             \tmov    %rdx,%rcx\n     d77:\t48 89 c2             \tmov    %rax,%rdx\n     d7a:\te8 00 00 00 00       \tcallq  d7f <gistKeyIsEQ+0x67>\n     d7f:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n     d83:\tc9                   \tleaveq \n     d84:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gistKeyIsEQ(__int64 a1, int a2, __int64 a3, __int64 a4) {\n  unsigned __int8 <span class=\"supfact\">v5</span>;\n  FunctionCall3Coll(Number L * a2 + Number + a1,\n                    *(unsigned int *)(a1 + Number * (a2 + Number L)), a3, a4,\n                    &<span class=\"supfact\">v5</span>);\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "bool __cdecl gistKeyIsEQ(GISTSTATE_0 *giststate, int attno, Datum a, Datum b) {\n  bool <span class=\"supfact\">result</span>;\n  FunctionCall3Coll(&giststate->equalFn[attno],\n                    giststate->supportCollation[attno], a, b,\n                    &<span class=\"supfact\">result</span>);\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "v5", "type": "uint8_t", "ref_name": "result", "ref_type": "bool"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "ChengyuSong", "repo_name": "lll-50", "path": "ChengyuSong/lll-50/7fce79de96584760868d98269e59ace30bfca021139901b9c3eff6abf3055560", "path_in_repo": "ChengyuSong/lll-50/tools/testing/radix-tree/multiorder.o", "objdump": "000000000000614f <creator_func>:\n    614f:\t55                   \tpush   %rbp\n    6150:\t48 89 e5             \tmov    %rsp,%rbp\n    6153:\t53                   \tpush   %rbx\n    6154:\t48 83 ec 28          \tsub    $0x28,%rsp\n    6158:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    615c:\tc7 45 e4 02 00 00 00 \tmovl   $0x2,-0x1c(%rbp)\n    6163:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    6167:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    616b:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n    6172:\teb 49                \tjmp    61bd <creator_func+0x6e>\n    6174:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    6177:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    617b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6180:\t48 89 c7             \tmov    %rax,%rdi\n    6183:\te8 36 b4 ff ff       \tcallq  15be <item_insert_order>\n    6188:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    618c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6191:\t48 89 c7             \tmov    %rax,%rdi\n    6194:\te8 00 00 00 00       \tcallq  6199 <creator_func+0x4a>\n    6199:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n    619c:\t83 c0 01             \tadd    $0x1,%eax\n    619f:\t89 c3                \tmov    %eax,%ebx\n    61a1:\t71 17                \tjno    61ba <creator_func+0x6b>\n    61a3:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n    61a6:\t48 98                \tcltq   \n    61a8:\tba 01 00 00 00       \tmov    $0x1,%edx\n    61ad:\t48 89 c6             \tmov    %rax,%rsi\n    61b0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    61b5:\te8 00 00 00 00       \tcallq  61ba <creator_func+0x6b>\n    61ba:\t89 5d e0             \tmov    %ebx,-0x20(%rbp)\n    61bd:\t81 7d e0 0f 27 00 00 \tcmpl   $0x270f,-0x20(%rbp)\n    61c4:\t7e ae                \tjle    6174 <creator_func+0x25>\n    61c6:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # 61cd <creator_func+0x7e>\n    61cd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    61d2:\t48 83 c4 28          \tadd    $0x28,%rsp\n    61d6:\t5b                   \tpop    %rbx\n    61d7:\t5d                   \tpop    %rbp\n    61d8:\tc3                   \tretq   ", "code_s": "void *__fastcall creator_func(void *a1) {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    item_insert_order((__int64)a1, Number L, Number);\n    item_delete_rcu(a1, Number L);\n    if (__OFADD__(Number, <span class=\"supfact\">i</span>))\n      _ubsan_handle_add_overflow(&off_A260, <span class=\"supfact\">i</span>, Number L);\n  }\n  stop_iteration = Number;\n  return Number L;\n}", "code_t": "void *__cdecl creator_func(void *ptr) {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    item_insert_order((xarray *)ptr, Number L, Number);\n    item_delete_rcu(ptr, Number L);\n    if (__OFADD__(Number, <span class=\"supfact\">i</span>))\n      _ubsan_handle_add_overflow(&off_A260, <span class=\"supfact\">i</span>, Number L);\n  }\n  stop_iteration = Number;\n  return Number L;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "jphines", "repo_name": "os-homework", "path": "jphines/os-homework/6131d001956f38035891419c74fd6af3089aa442040245fe743105de070bc122", "path_in_repo": "jphines/os-homework/hmwk5/android-tegra-3.1/tools/perf/util/hist.o", "objdump": "000000000000167f <callchain__fprintf_graph>:\n    167f:\t55                   \tpush   %rbp\n    1680:\t48 89 e5             \tmov    %rsp,%rbp\n    1683:\t48 83 ec 50          \tsub    $0x50,%rsp\n    1687:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    168b:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    168f:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    1693:\t89 4d b4             \tmov    %ecx,-0x4c(%rbp)\n    1696:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    169d:\t00 00 \n    169f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    16a3:\t31 c0                \txor    %eax,%eax\n    16a5:\tc6 45 d3 00          \tmovb   $0x0,-0x2d(%rbp)\n    16a9:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    16b0:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n    16b7:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    16be:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    16c2:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    16c6:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    16ca:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    16ce:\t48 83 e8 20          \tsub    $0x20,%rax\n    16d2:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    16d6:\te9 35 01 00 00       \tjmpq   1810 <callchain__fprintf_graph+0x191>\n    16db:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    16de:\t8d 50 01             \tlea    0x1(%rax),%edx\n    16e1:\t89 55 d4             \tmov    %edx,-0x2c(%rbp)\n    16e4:\t85 c0                \ttest   %eax,%eax\n    16e6:\t75 0f                \tjne    16f7 <callchain__fprintf_graph+0x78>\n    16e8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 16ee <callchain__fprintf_graph+0x6f>\n    16ee:\t83 f8 03             \tcmp    $0x3,%eax\n    16f1:\t0f 84 00 01 00 00    \tje     17f7 <callchain__fprintf_graph+0x178>\n    16f7:\t0f b6 45 d3          \tmovzbl -0x2d(%rbp),%eax\n    16fb:\t83 f0 01             \txor    $0x1,%eax\n    16fe:\t84 c0                \ttest   %al,%al\n    1700:\t74 72                \tje     1774 <callchain__fprintf_graph+0xf5>\n    1702:\t8b 55 b4             \tmov    -0x4c(%rbp),%edx\n    1705:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1709:\t89 d6                \tmov    %edx,%esi\n    170b:\t48 89 c7             \tmov    %rax,%rdi\n    170e:\te8 e0 f8 ff ff       \tcallq  ff3 <callchain__fprintf_left_margin>\n    1713:\t89 c2                \tmov    %eax,%edx\n    1715:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n    1718:\t01 d0                \tadd    %edx,%eax\n    171a:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    171d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1721:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1726:\t48 89 c7             \tmov    %rax,%rdi\n    1729:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    172e:\te8 00 00 00 00       \tcallq  1733 <callchain__fprintf_graph+0xb4>\n    1733:\t01 45 d8             \tadd    %eax,-0x28(%rbp)\n    1736:\t8b 55 b4             \tmov    -0x4c(%rbp),%edx\n    1739:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    173d:\t89 d6                \tmov    %edx,%esi\n    173f:\t48 89 c7             \tmov    %rax,%rdi\n    1742:\te8 ac f8 ff ff       \tcallq  ff3 <callchain__fprintf_left_margin>\n    1747:\t89 c2                \tmov    %eax,%edx\n    1749:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n    174c:\t01 d0                \tadd    %edx,%eax\n    174e:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    1751:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1755:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    175a:\t48 89 c7             \tmov    %rax,%rdi\n    175d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1762:\te8 00 00 00 00       \tcallq  1767 <callchain__fprintf_graph+0xe8>\n    1767:\t01 45 d8             \tadd    %eax,-0x28(%rbp)\n    176a:\t83 45 b4 03          \taddl   $0x3,-0x4c(%rbp)\n    176e:\tc6 45 d3 01          \tmovb   $0x1,-0x2d(%rbp)\n    1772:\teb 1b                \tjmp    178f <callchain__fprintf_graph+0x110>\n    1774:\t8b 55 b4             \tmov    -0x4c(%rbp),%edx\n    1777:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    177b:\t89 d6                \tmov    %edx,%esi\n    177d:\t48 89 c7             \tmov    %rax,%rdi\n    1780:\te8 6e f8 ff ff       \tcallq  ff3 <callchain__fprintf_left_margin>\n    1785:\t89 c2                \tmov    %eax,%edx\n    1787:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n    178a:\t01 d0                \tadd    %edx,%eax\n    178c:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    178f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1793:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1797:\t48 85 c0             \ttest   %rax,%rax\n    179a:\t74 27                \tje     17c3 <callchain__fprintf_graph+0x144>\n    179c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    17a0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    17a4:\t48 8d 50 2c          \tlea    0x2c(%rax),%rdx\n    17a8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    17ac:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    17b1:\t48 89 c7             \tmov    %rax,%rdi\n    17b4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    17b9:\te8 00 00 00 00       \tcallq  17be <callchain__fprintf_graph+0x13f>\n    17be:\t01 45 d8             \tadd    %eax,-0x28(%rbp)\n    17c1:\teb 23                \tjmp    17e6 <callchain__fprintf_graph+0x167>\n    17c3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    17c7:\t48 8b 00             \tmov    (%rax),%rax\n    17ca:\t48 89 c2             \tmov    %rax,%rdx\n    17cd:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    17d1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    17d6:\t48 89 c7             \tmov    %rax,%rdi\n    17d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    17de:\te8 00 00 00 00       \tcallq  17e3 <callchain__fprintf_graph+0x164>\n    17e3:\t01 45 d8             \tadd    %eax,-0x28(%rbp)\n    17e6:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n    17ea:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 17f0 <callchain__fprintf_graph+0x171>\n    17f0:\t39 45 dc             \tcmp    %eax,-0x24(%rbp)\n    17f3:\t74 36                \tje     182b <callchain__fprintf_graph+0x1ac>\n    17f5:\teb 01                \tjmp    17f8 <callchain__fprintf_graph+0x179>\n    17f7:\t90                   \tnop\n    17f8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    17fc:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1800:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1804:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1808:\t48 83 e8 20          \tsub    $0x20,%rax\n    180c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1810:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1814:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n    1818:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    181c:\t48 83 c0 28          \tadd    $0x28,%rax\n    1820:\t48 39 c2             \tcmp    %rax,%rdx\n    1823:\t0f 85 b2 fe ff ff    \tjne    16db <callchain__fprintf_graph+0x5c>\n    1829:\teb 01                \tjmp    182c <callchain__fprintf_graph+0x1ad>\n    182b:\t90                   \tnop\n    182c:\t8b 4d b4             \tmov    -0x4c(%rbp),%ecx\n    182f:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    1833:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n    1837:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    183b:\t41 89 c9             \tmov    %ecx,%r9d\n    183e:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    1844:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    1849:\t48 89 c7             \tmov    %rax,%rdi\n    184c:\te8 79 fb ff ff       \tcallq  13ca <__callchain__fprintf_graph>\n    1851:\t89 c2                \tmov    %eax,%edx\n    1853:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n    1856:\t01 d0                \tadd    %edx,%eax\n    1858:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    185b:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n    185e:\t48 98                \tcltq   \n    1860:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1864:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    186b:\t00 00 \n    186d:\t74 05                \tje     1874 <callchain__fprintf_graph+0x1f5>\n    186f:\te8 00 00 00 00       \tcallq  1874 <callchain__fprintf_graph+0x1f5>\n    1874:\tc9                   \tleaveq \n    1875:\tc3                   \tretq   ", "code_s": "__int64 __fastcall callchain__fprintf_graph(FILE *a1, __int64 a2, __int64 a3,\n                                            unsigned int a4) {\n  int v4;\n  char <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  int v10;\n  int v11;\n  int v12;\n  int v13;\n  int <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v8</span> = Number;\n  <span class=\"supfact\">v9</span> = Number;\n  v10 = Number;\n  <span class=\"supfact\">v14</span> = Number;\n  for (<span class=\"supfact\">i</span> = *(_QWORD *)(a2 + Number) - Number L;\n       <span class=\"supfact\">i</span> + Number != a2 + Number;\n       <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number) - Number L) {\n    v4 = <span class=\"supfact\">v9</span>++;\n    if (v4 || sort__first_dimension != Number) {\n      v11 = callchain__fprintf_left_margin(a1, a4) + v10;\n      if (<span class=\"supfact\">v8</span> != Number) {\n        v12 = fprintf(a1, String) + v11;\n        v13 = callchain__fprintf_left_margin(a1, a4) + v12;\n        v11 = fprintf(a1, String) + v13;\n        a4 += Number;\n        <span class=\"supfact\">v8</span> = Number;\n      }\n      v10 =\n          *(_QWORD *)(<span class=\"supfact\">i</span> + Number)\n              ? fprintf(a1, String,\n                        (const char *)(*(_QWORD *)(<span class=\"supfact\">i</span> + Number) +\n                                       Number L)) +\n                    v11\n              : fprintf(a1, String, *(const void **)<span class=\"supfact\">i</span>) + v11;\n      if (++<span class=\"supfact\">v14</span> == callchain_param[Number])\n        break;\n    }\n  }\n  return (int)(_callchain__fprintf_graph(a1, a2, a3, Number, Number, a4) + v10);\n}", "code_t": "size_t __cdecl callchain__fprintf_graph(FILE *fp, callchain_node *self,\n                                        u64 total_samples, int left_margin) {\n  int v4;\n  bool <span class=\"supfact\">printed</span>;\n  int <span class=\"supfact\">i</span>;\n  int ret;\n  int reta;\n  int retb;\n  int retc;\n  u32 <span class=\"supfact\">entries_printed</span>;\n  callchain_list *<span class=\"supfact\">chain</span>;\n  <span class=\"supfact\">printed</span> = Number;\n  <span class=\"supfact\">i</span> = Number;\n  ret = Number;\n  <span class=\"supfact\">entries_printed</span> = Number;\n  for (<span class=\"supfact\">chain</span> = (callchain_list *)&self->val.next[Number];\n       &<span class=\"supfact\">chain</span>->list != &self->val;\n       <span class=\"supfact\">chain</span> =\n           (callchain_list *)&<span class=\"supfact\">chain</span>->list.next[Number]) {\n    v4 = <span class=\"supfact\">i</span>++;\n    if (v4 || sort__first_dimension != Number) {\n      reta = callchain__fprintf_left_margin(fp, left_margin) + ret;\n      if (!<span class=\"supfact\">printed</span>) {\n        retb = fprintf(fp, String) + reta;\n        retc = callchain__fprintf_left_margin(fp, left_margin) + retb;\n        reta = fprintf(fp, String) + retc;\n        left_margin += Number;\n        <span class=\"supfact\">printed</span> = Number;\n      }\n      ret =\n          <span class=\"supfact\">chain</span>->ms.sym\n              ? fprintf(fp, String, <span class=\"supfact\">chain</span>->ms.sym->name) + reta\n              : fprintf(fp, String, (const void *)<span class=\"supfact\">chain</span>->ip) +\n                    reta;\n      if (++<span class=\"supfact\">entries_printed</span> == callchain_param_0.print_limit)\n        break;\n    }\n  }\n  return (int)(_callchain__fprintf_graph(fp, self, total_samples, Number,\n                                         Number, left_margin) +\n               ret);\n}", "var": [{"name": "i", "type": "callchain_list *", "ref_name": "chain", "ref_type": "callchain_list *"}, {"name": "v14", "type": "u32", "ref_name": "entries_printed", "ref_type": "u32"}, {"name": "v9", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v8", "type": "bool", "ref_name": "printed", "ref_type": "bool"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "rvion", "repo_name": "school-mega-repo", "path": "rvion/school-mega-repo/e7ad0dda12a557104d9e5b54a3211939c042a4b71647504d8382a098f03260c5", "path_in_repo": "rvion/school-mega-repo/app5-img-manipulation-tp1/VION/tp", "objdump": "0000000000402613 <somme_prod_i>:\n  402613:\t55                   \tpush   %rbp\n  402614:\t48 89 e5             \tmov    %rsp,%rbp\n  402617:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40261b:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  40261e:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n  402621:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  402625:\tf3 0f 11 45 f8       \tmovss  %xmm0,-0x8(%rbp)\n  40262a:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40262d:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  402630:\teb 51                \tjmp    402683 <somme_prod_i+0x70>\n  402632:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402635:\t48 98                \tcltq   \n  402637:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  40263e:\t00 \n  40263f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402643:\t48 01 d0             \tadd    %rdx,%rax\n  402646:\t8b 10                \tmov    (%rax),%edx\n  402648:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40264b:\t0f af c2             \timul   %edx,%eax\n  40264e:\t89 c0                \tmov    %eax,%eax\n  402650:\t48 85 c0             \ttest   %rax,%rax\n  402653:\t78 07                \tjs     40265c <somme_prod_i+0x49>\n  402655:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n  40265a:\teb 15                \tjmp    402671 <somme_prod_i+0x5e>\n  40265c:\t48 89 c2             \tmov    %rax,%rdx\n  40265f:\t48 d1 ea             \tshr    %rdx\n  402662:\t83 e0 01             \tand    $0x1,%eax\n  402665:\t48 09 c2             \tor     %rax,%rdx\n  402668:\tf3 48 0f 2a c2       \tcvtsi2ss %rdx,%xmm0\n  40266d:\tf3 0f 58 c0          \taddss  %xmm0,%xmm0\n  402671:\tf3 0f 10 4d f8       \tmovss  -0x8(%rbp),%xmm1\n  402676:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n  40267a:\tf3 0f 11 45 f8       \tmovss  %xmm0,-0x8(%rbp)\n  40267f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  402683:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402686:\t3b 45 e0             \tcmp    -0x20(%rbp),%eax\n  402689:\t7e a7                \tjle    402632 <somme_prod_i+0x1f>\n  40268b:\tf3 0f 10 45 f8       \tmovss  -0x8(%rbp),%xmm0\n  402690:\t5d                   \tpop    %rbp\n  402691:\tc3                   \tretq   ", "code_s": "float __fastcall somme_prod_i(__int64 a1, int a2, int a3) {\n  float <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Number;\n  while (a2 <= a3) {\n    <span class=\"supfact\">v4</span> =\n        (float)(*(_DWORD *)(Number L * a2 + a1) * a2) + <span class=\"supfact\">v4</span>;\n    ++a2;\n  }\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "float32 __cdecl somme_prod_i(uint32 *X, int i0, int i1) {\n  float <span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = Number;\n  while (i0 <= i1) {\n    <span class=\"supfact\">s</span> = (float)(int)(X[i0] * i0) + <span class=\"supfact\">s</span>;\n    ++i0;\n  }\n  return <span class=\"supfact\">s</span>;\n}", "var": [{"name": "v4", "type": "float", "ref_name": "s", "ref_type": "float"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "ardax", "repo_name": "Pellet", "path": "ardax/Pellet/1009c4814db861e4c1376fbd6e8b182cb1fd0e2c1417c50bb7412b41cdb5c630", "path_in_repo": "ardax/Pellet//TransitionGraph.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 50          \tsub    $0x50,%rsp\n   b:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   f:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  13:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  17:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n  1b:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n  1f:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n  24:\t75 4d                \tjne    73 <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x73>\n  26:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  2a:\t48 89 c7             \tmov    %rax,%rdi\n  2d:\te8 00 00 00 00       \tcallq  32 <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x32>\n  32:\t48 39 45 b8          \tcmp    %rax,-0x48(%rbp)\n  36:\t74 3b                \tje     73 <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x73>\n  38:\t48 8b 5d c8          \tmov    -0x38(%rbp),%rbx\n  3c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40:\t48 89 c7             \tmov    %rax,%rdi\n  43:\te8 00 00 00 00       \tcallq  48 <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x48>\n  48:\t4c 8b 20             \tmov    (%rax),%r12\n  4b:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  4f:\t48 8d 45 d7          \tlea    -0x29(%rbp),%rax\n  53:\t48 89 d6             \tmov    %rdx,%rsi\n  56:\t48 89 c7             \tmov    %rax,%rdi\n  59:\te8 00 00 00 00       \tcallq  5e <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x5e>\n  5e:\t48 8b 00             \tmov    (%rax),%rax\n  61:\t4c 89 e2             \tmov    %r12,%rdx\n  64:\t48 89 c6             \tmov    %rax,%rsi\n  67:\t48 89 df             \tmov    %rbx,%rdi\n  6a:\te8 00 00 00 00       \tcallq  6f <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x6f>\n  6f:\t84 c0                \ttest   %al,%al\n  71:\t74 07                \tje     7a <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x7a>\n  73:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  78:\teb 05                \tjmp    7f <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x7f>\n  7a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  7f:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n  82:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  86:\t48 89 c7             \tmov    %rax,%rdi\n  89:\te8 00 00 00 00       \tcallq  8e <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x8e>\n  8e:\t48 89 c2             \tmov    %rax,%rdx\n  91:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  95:\t48 89 d6             \tmov    %rdx,%rsi\n  98:\t48 89 c7             \tmov    %rax,%rdi\n  9b:\te8 00 00 00 00       \tcallq  a0 <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0xa0>\n  a0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  a4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  a8:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n  ac:\t0f b6 45 ef          \tmovzbl -0x11(%rbp),%eax\n  b0:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  b4:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n  b8:\t89 c7                \tmov    %eax,%edi\n  ba:\te8 00 00 00 00       \tcallq  bf <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0xbf>\n  bf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  c3:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  c7:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  cb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  cf:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n  d3:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  d7:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  db:\t48 89 d6             \tmov    %rdx,%rsi\n  de:\t48 89 c7             \tmov    %rax,%rdi\n  e1:\te8 00 00 00 00       \tcallq  e6 <_ZNSt8_Rb_treeIP5StateS1_St9_IdentityIS1_E11strCmpStateSaIS1_EE10_M_insert_IRKS1_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0xe6>\n  e6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  ea:\t48 83 c4 50          \tadd    $0x50,%rsp\n  ee:\t5b                   \tpop    %rbx\n  ef:\t41 5c                \tpop    %r12\n  f1:\t5d                   \tpop    %rbp\n  f2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std _Rb_tree<State *, State *, std _Identity<State *>,\n                                strCmpState, std allocator<State *>>\n_M_insert_<State *const &,\n           std _Rb_tree<State *, State *, std _Identity<State *>, strCmpState,\n                        std allocator<State *>>\n               _Alloc_node>(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n                            __int64 a5) {\n  const State *v5;\n  const State **v6;\n  bool v7;\n  __int64 v8;\n  char <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  unsigned __int8 <span class=\"supfact\">v16</span>;\n  v7 = Number;\n  if (!a2 && a3 != std _Rb_tree<State *, State *, std _Identity<State *>,\n                                strCmpState, std allocator<State *>>\n                       _M_end(a1)) {\n    v5 = *(const State **)std _Rb_tree<State *, State *, std _Identity<State *>,\n                                       strCmpState, std allocator<State *>>\n             _S_key(a3);\n    v6 = (const State **)std _Identity<State *> operator()(\n        (__int64)&<span class=\"supfact\">v13</span>, a4);\n    if (!(unsigned __int8)strCmpState operator()(a1, *v6, v5))\n      v7 = Number;\n  }\n  <span class=\"supfact\">v16</span> = v7;\n  v8 = std forward<State *const &>(a4);\n  <span class=\"supfact\">v15</span> = std _Rb_tree<State *, State *, std _Identity<State *>,\n                                     strCmpState, std allocator<State *>>\n      _Alloc_node operator()<State *const &>(a5, v8);\n  std _Rb_tree_insert_and_rebalance(<span class=\"supfact\">v16</span>, <span class=\"supfact\">v15</span>,\n                                    a3, a1 + Number);\n  ++*(_QWORD *)(a1 + Number);\n  std _Rb_tree_iterator<State *> _Rb_tree_iterator(&<span class=\"supfact\">v14</span>,\n                                                   <span class=\"supfact\">v15</span>);\n  return <span class=\"supfact\">v14</span>;\n}", "code_t": "std _Rb_tree<State *, State *, std _Identity<State *>, strCmpState,\n             std allocator<State *>>\n    iterator __cdecl std _Rb_tree<State *, State *, std _Identity<State *>,\n                                  strCmpState, std allocator<State *>>\n    _M_insert_<State *const &,\n               std _Rb_tree<State *, State *, std _Identity<State *>,\n                            strCmpState, std allocator<State *>>\n                   _Alloc_node>(\n        std _Rb_tree<State *, State *, std _Identity<State *>, strCmpState,\n                     std allocator<State *>> *const this,\n        std _Rb_tree<State *, State *, std _Identity<State *>, strCmpState,\n                     std allocator<State *>>\n            _Base_ptr __x,\n        std _Rb_tree<State *, State *, std _Identity<State *>, strCmpState,\n                     std allocator<State *>>\n            _Base_ptr __p,\n        State *const *__v,\n        std _Rb_tree<State *, State *, std _Identity<State *>, strCmpState,\n                     std allocator<State *>>\n            _Alloc_node *__node_gen) {\n  const State *v5;\n  const State **v6;\n  bool v7;\n  State *const *v8;\n  std _Identity<State *> <span class=\"supfact\">v13</span>;\n  std _Rb_tree_iterator<State *> <span class=\"supfact\">v14</span>;\n  std _Rb_tree<State *, State *, std _Identity<State *>, strCmpState,\n               std allocator<State *>>\n      _Link_type <span class=\"supfact\">__z</span>;\n  bool <span class=\"supfact\">__insert_left</span>;\n  v7 = Number;\n  if (!__x && __p != std _Rb_tree<State *, State *, std _Identity<State *>,\n                                  strCmpState, std allocator<State *>>\n                         _M_end(this)) {\n    v5 = *std _Rb_tree<State *, State *, std _Identity<State *>, strCmpState,\n                       std allocator<State *>>\n             _S_key(__p);\n    v6 = (const State **)std _Identity<State *> operator()(&<span class=\"supfact\">v13</span>,\n                                                           __v);\n    if (!strCmpState operator()((const strCmpState *const)this, *v6, v5))\n      v7 = Number;\n  }\n  <span class=\"supfact\">__insert_left</span> = v7;\n  v8 = std forward<State *const &>(\n      (std remove_reference<State *const &> type *)__v);\n  <span class=\"supfact\">__z</span> = std _Rb_tree<State *, State *, std _Identity<State *>,\n                                     strCmpState, std allocator<State *>>\n      _Alloc_node operator()<State *const &>(__node_gen, v8);\n  std _Rb_tree_insert_and_rebalance(<span class=\"supfact\">__insert_left</span>,\n                                    <span class=\"supfact\">__z</span>, __p,\n                                    &this->_M_impl._M_header);\n  ++this->_M_impl._M_node_count;\n  std _Rb_tree_iterator<State *> _Rb_tree_iterator(&<span class=\"supfact\">v14</span>,\n                                                   <span class=\"supfact\">__z</span>);\n  return <span class=\"supfact\">v14</span>;\n}", "var": [{"name": "v16", "type": "bool", "ref_name": "__insert_left", "ref_type": "bool"}, {"name": "v15", "type": "__unk__", "ref_name": "__z", "ref_type": "__unk__"}, {"name": "v14", "type": "__unk__", "ref_name": "v14", "ref_type": "__unk__"}, {"name": "v13", "type": "__unk__", "ref_name": "v13", "ref_type": "__unk__"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "mezentsev", "repo_name": "OpenSSL-Backport", "path": "mezentsev/OpenSSL-Backport/3418f1ec5b911602dca1d5062e3a4d895a377c80ddb721e9cfd41787d64b5c7e", "path_in_repo": "mezentsev/OpenSSL-Backport/openssl-1.0.1c/crypto/ex_data.o", "objdump": "0000000000000353 <def_add_index>:\n 353:\t55                   \tpush   %rbp\n 354:\t48 89 e5             \tmov    %rsp,%rbp\n 357:\t48 83 ec 40          \tsub    $0x40,%rsp\n 35b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 35f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 363:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 367:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n 36b:\t4c 89 45 c8          \tmov    %r8,-0x38(%rbp)\n 36f:\t4c 89 4d c0          \tmov    %r9,-0x40(%rbp)\n 373:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n 37a:\tba 52 01 00 00       \tmov    $0x152,%edx\n 37f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 384:\tbf 28 00 00 00       \tmov    $0x28,%edi\n 389:\te8 00 00 00 00       \tcallq  38e <def_add_index+0x3b>\n 38e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 392:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 397:\t75 29                \tjne    3c2 <def_add_index+0x6f>\n 399:\t41 b8 56 01 00 00    \tmov    $0x156,%r8d\n 39f:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 3a4:\tba 41 00 00 00       \tmov    $0x41,%edx\n 3a9:\tbe 68 00 00 00       \tmov    $0x68,%esi\n 3ae:\tbf 0f 00 00 00       \tmov    $0xf,%edi\n 3b3:\te8 00 00 00 00       \tcallq  3b8 <def_add_index+0x65>\n 3b8:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 3bd:\te9 00 01 00 00       \tjmpq   4c2 <def_add_index+0x16f>\n 3c2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3c6:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 3ca:\t48 89 10             \tmov    %rdx,(%rax)\n 3cd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3d1:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 3d5:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n 3d9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3dd:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 3e1:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 3e5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3e9:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 3ed:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n 3f1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3f5:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n 3f9:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n 3fd:\tb9 5e 01 00 00       \tmov    $0x15e,%ecx\n 402:\tba 00 00 00 00       \tmov    $0x0,%edx\n 407:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 40c:\tbf 09 00 00 00       \tmov    $0x9,%edi\n 411:\te8 00 00 00 00       \tcallq  416 <def_add_index+0xc3>\n 416:\teb 46                \tjmp    45e <def_add_index+0x10b>\n 418:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 41c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 420:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 425:\t48 89 c7             \tmov    %rax,%rdi\n 428:\te8 00 00 00 00       \tcallq  42d <def_add_index+0xda>\n 42d:\t85 c0                \ttest   %eax,%eax\n 42f:\t75 2d                \tjne    45e <def_add_index+0x10b>\n 431:\t41 b8 63 01 00 00    \tmov    $0x163,%r8d\n 437:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 43c:\tba 41 00 00 00       \tmov    $0x41,%edx\n 441:\tbe 68 00 00 00       \tmov    $0x68,%esi\n 446:\tbf 0f 00 00 00       \tmov    $0xf,%edi\n 44b:\te8 00 00 00 00       \tcallq  450 <def_add_index+0xfd>\n 450:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 454:\t48 89 c7             \tmov    %rax,%rdi\n 457:\te8 00 00 00 00       \tcallq  45c <def_add_index+0x109>\n 45c:\teb 48                \tjmp    4a6 <def_add_index+0x153>\n 45e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 462:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 466:\t48 89 c7             \tmov    %rax,%rdi\n 469:\te8 00 00 00 00       \tcallq  46e <def_add_index+0x11b>\n 46e:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 472:\t8b 52 10             \tmov    0x10(%rdx),%edx\n 475:\t39 d0                \tcmp    %edx,%eax\n 477:\t7e 9f                \tjle    418 <def_add_index+0xc5>\n 479:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 47d:\t8b 40 10             \tmov    0x10(%rax),%eax\n 480:\t8d 48 01             \tlea    0x1(%rax),%ecx\n 483:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 487:\t89 4a 10             \tmov    %ecx,0x10(%rdx)\n 48a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 48d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 491:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 495:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 499:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n 49c:\t89 ce                \tmov    %ecx,%esi\n 49e:\t48 89 c7             \tmov    %rax,%rdi\n 4a1:\te8 00 00 00 00       \tcallq  4a6 <def_add_index+0x153>\n 4a6:\tb9 6b 01 00 00       \tmov    $0x16b,%ecx\n 4ab:\tba 00 00 00 00       \tmov    $0x0,%edx\n 4b0:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 4b5:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n 4ba:\te8 00 00 00 00       \tcallq  4bf <def_add_index+0x16c>\n 4bf:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 4c2:\tc9                   \tleaveq \n 4c3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall def_add_index(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n                                 __int64 a5, __int64 a6) {\n  __int64 result;\n  unsigned int v7;\n  _QWORD *<span class=\"supfact\">v12</span>;\n  unsigned int <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v13</span> = Number;\n  <span class=\"supfact\">v12</span> = (_QWORD *)CRYPTO_malloc(Number L, String, Number L);\n  if (<span class=\"supfact\">v12</span>) {\n    *<span class=\"supfact\">v12</span> = a2;\n    <span class=\"supfact\">v12</span>[Number] = a3;\n    <span class=\"supfact\">v12</span>[Number] = a4;\n    <span class=\"supfact\">v12</span>[Number] = a5;\n    <span class=\"supfact\">v12</span>[Number] = a6;\n    CRYPTO_lock(Number L, Number L, String, Number L);\n    while ((int)sk_num(*(_QWORD *)(a1 + Number)) <= *(_DWORD *)(a1 + Number)) {\n      if (!(unsigned int)sk_push(*(_QWORD *)(a1 + Number), Number L)) {\n        ERR_put_error(Number L, Number L, Number L, String, Number L);\n        CRYPTO_free(<span class=\"supfact\">v12</span>);\n        goto LABEL_8;\n      }\n    }\n    v7 = *(_DWORD *)(a1 + Number);\n    *(_DWORD *)(a1 + Number) = v7 + Number;\n    <span class=\"supfact\">v13</span> = v7;\n    sk_set(*(_QWORD *)(a1 + Number), v7, <span class=\"supfact\">v12</span>);\n  LABEL_8:\n    CRYPTO_lock(Number L, Number L, String, Number L);\n    result = <span class=\"supfact\">v13</span>;\n  } else {\n    ERR_put_error(Number L, Number L, Number L, String, Number L);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl def_add_index(EX_CLASS_ITEM *item, __int64 argl, void *argp,\n                          CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func,\n                          CRYPTO_EX_free *free_func) {\n  int result;\n  unsigned int v7;\n  CRYPTO_EX_DATA_FUNCS *<span class=\"supfact\">a</span>;\n  int <span class=\"supfact\">toret</span>;\n  <span class=\"supfact\">toret</span> = Number;\n  <span class=\"supfact\">a</span> =\n      (CRYPTO_EX_DATA_FUNCS *)CRYPTO_malloc(Number L, String, Number L);\n  if (<span class=\"supfact\">a</span>) {\n    <span class=\"supfact\">a</span>->argl = argl;\n    <span class=\"supfact\">a</span>->argp = argp;\n    <span class=\"supfact\">a</span>->new_func = new_func;\n    <span class=\"supfact\">a</span>->dup_func = dup_func;\n    <span class=\"supfact\">a</span>->free_func = free_func;\n    CRYPTO_lock(Number L, Number L, String, Number L);\n    while ((int)sk_num(item->meth) <= item->meth_num) {\n      if (!(unsigned int)sk_push(item->meth, Number L)) {\n        ERR_put_error(Number L, Number L, Number L, String, Number L);\n        CRYPTO_free(<span class=\"supfact\">a</span>);\n        goto err;\n      }\n    }\n    v7 = item->meth_num;\n    item->meth_num = v7 + Number;\n    <span class=\"supfact\">toret</span> = v7;\n    sk_set(item->meth, v7, <span class=\"supfact\">a</span>);\n  err:\n    CRYPTO_lock(Number L, Number L, String, Number L);\n    result = <span class=\"supfact\">toret</span>;\n  } else {\n    ERR_put_error(Number L, Number L, Number L, String, Number L);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v13", "type": "int", "ref_name": "toret", "ref_type": "int"}, {"name": "v12", "type": "CRYPTO_EX_DATA_FUNCS *", "ref_name": "a", "ref_type": "CRYPTO_EX_DATA_FUNCS *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "Cwocco", "repo_name": "Get_next_line", "path": "Cwocco/Get_next_line/a2b63265ee6a6adcc3c11997adda8c2dd8285715285ddb6a60fa4c5a06c2f270", "path_in_repo": "Cwocco/Get_next_line/libft/ft_strsplit.o", "objdump": "00000000000001f5 <ft_count_words>:\n 1f5:\t55                   \tpush   %rbp\n 1f6:\t48 89 e5             \tmov    %rsp,%rbp\n 1f9:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 1fd:\t89 f0                \tmov    %esi,%eax\n 1ff:\t88 45 e4             \tmov    %al,-0x1c(%rbp)\n 202:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 209:\t00 \n 20a:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n 211:\t00 \n 212:\teb 05                \tjmp    219 <ft_count_words+0x24>\n 214:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n 219:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 21d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 221:\t48 01 d0             \tadd    %rdx,%rax\n 224:\t0f b6 00             \tmovzbl (%rax),%eax\n 227:\t84 c0                \ttest   %al,%al\n 229:\t74 70                \tje     29b <ft_count_words+0xa6>\n 22b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 22f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 233:\t48 01 d0             \tadd    %rdx,%rax\n 236:\t0f b6 00             \tmovzbl (%rax),%eax\n 239:\t38 45 e4             \tcmp    %al,-0x1c(%rbp)\n 23c:\t74 d6                \tje     214 <ft_count_words+0x1f>\n 23e:\teb 5b                \tjmp    29b <ft_count_words+0xa6>\n 240:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n 245:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 249:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 24d:\t48 01 d0             \tadd    %rdx,%rax\n 250:\t0f b6 00             \tmovzbl (%rax),%eax\n 253:\t84 c0                \ttest   %al,%al\n 255:\t74 1a                \tje     271 <ft_count_words+0x7c>\n 257:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 25b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 25f:\t48 01 d0             \tadd    %rdx,%rax\n 262:\t0f b6 00             \tmovzbl (%rax),%eax\n 265:\t38 45 e4             \tcmp    %al,-0x1c(%rbp)\n 268:\t75 d6                \tjne    240 <ft_count_words+0x4b>\n 26a:\teb 05                \tjmp    271 <ft_count_words+0x7c>\n 26c:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n 271:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 275:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 279:\t48 01 d0             \tadd    %rdx,%rax\n 27c:\t0f b6 00             \tmovzbl (%rax),%eax\n 27f:\t84 c0                \ttest   %al,%al\n 281:\t74 13                \tje     296 <ft_count_words+0xa1>\n 283:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 287:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 28b:\t48 01 d0             \tadd    %rdx,%rax\n 28e:\t0f b6 00             \tmovzbl (%rax),%eax\n 291:\t38 45 e4             \tcmp    %al,-0x1c(%rbp)\n 294:\t74 d6                \tje     26c <ft_count_words+0x77>\n 296:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n 29b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 29f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 2a3:\t48 01 d0             \tadd    %rdx,%rax\n 2a6:\t0f b6 00             \tmovzbl (%rax),%eax\n 2a9:\t84 c0                \ttest   %al,%al\n 2ab:\t75 98                \tjne    245 <ft_count_words+0x50>\n 2ad:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2b1:\t5d                   \tpop    %rbp\n 2b2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ft_count_words(__int64 a1, char a2) {\n  __int64 <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Number L;\n  for (<span class=\"supfact\">i</span> = Number L; *(_BYTE *)(a1 + <span class=\"supfact\">i</span>) &&\n                                     a2 == *(_BYTE *)(a1 + <span class=\"supfact\">i</span>);\n       ++<span class=\"supfact\">i</span>)\n    ;\n  while (*(_BYTE *)(a1 + <span class=\"supfact\">i</span>)) {\n    while (*(_BYTE *)(a1 + <span class=\"supfact\">i</span>) &&\n           a2 != *(_BYTE *)(a1 + <span class=\"supfact\">i</span>))\n      ++<span class=\"supfact\">i</span>;\n    while (*(_BYTE *)(a1 + <span class=\"supfact\">i</span>) &&\n           a2 == *(_BYTE *)(a1 + <span class=\"supfact\">i</span>))\n      ++<span class=\"supfact\">i</span>;\n    ++<span class=\"supfact\">v4</span>;\n  }\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "size_t __cdecl ft_count_words(char *s, char c) {\n  size_t <span class=\"supfact\">i</span>;\n  size_t <span class=\"supfact\">len</span>;\n  <span class=\"supfact\">len</span> = Number L;\n  for (<span class=\"supfact\">i</span> = Number L;\n       s[<span class=\"supfact\">i</span>] && c == s[<span class=\"supfact\">i</span>]; ++<span class=\"supfact\">i</span>)\n    ;\n  while (s[<span class=\"supfact\">i</span>]) {\n    while (s[<span class=\"supfact\">i</span>] && c != s[<span class=\"supfact\">i</span>])\n      ++<span class=\"supfact\">i</span>;\n    while (s[<span class=\"supfact\">i</span>] && c == s[<span class=\"supfact\">i</span>])\n      ++<span class=\"supfact\">i</span>;\n    ++<span class=\"supfact\">len</span>;\n  }\n  return <span class=\"supfact\">len</span>;\n}", "var": [{"name": "v4", "type": "size_t", "ref_name": "len", "ref_type": "size_t"}, {"name": "i", "type": "size_t", "ref_name": "i", "ref_type": "size_t"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "xenko3d", "repo_name": "freeimage", "path": "xenko3d/freeimage/9bc6c4637ca4b3a95074aa71d174e375c4c5f7e7d396d9036c4e82b65c7528ce", "path_in_repo": "xenko3d/freeimage//Source/LibJPEG/jdmaster.o", "objdump": "0000000000000d97 <jpeg_new_colormap>:\n d97:\t55                   \tpush   %rbp\n d98:\t48 89 e5             \tmov    %rsp,%rbp\n d9b:\t48 83 ec 20          \tsub    $0x20,%rsp\n d9f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n da3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n da7:\t48 8b 80 20 02 00 00 \tmov    0x220(%rax),%rax\n dae:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n db2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n db6:\t8b 40 24             \tmov    0x24(%rax),%eax\n db9:\t3d cf 00 00 00       \tcmp    $0xcf,%eax\n dbe:\t74 32                \tje     df2 <jpeg_new_colormap+0x5b>\n dc0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n dc4:\t48 8b 00             \tmov    (%rax),%rax\n dc7:\tc7 40 28 15 00 00 00 \tmovl   $0x15,0x28(%rax)\n dce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n dd2:\t48 8b 00             \tmov    (%rax),%rax\n dd5:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n dd9:\t8b 52 24             \tmov    0x24(%rdx),%edx\n ddc:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n ddf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n de3:\t48 8b 00             \tmov    (%rax),%rax\n de6:\t48 8b 10             \tmov    (%rax),%rdx\n de9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n ded:\t48 89 c7             \tmov    %rax,%rdi\n df0:\tff d2                \tcallq  *%rdx\n df2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n df6:\t0f b6 40 62          \tmovzbl 0x62(%rax),%eax\n dfa:\t84 c0                \ttest   %al,%al\n dfc:\t74 51                \tje     e4f <jpeg_new_colormap+0xb8>\n dfe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n e02:\t0f b6 40 71          \tmovzbl 0x71(%rax),%eax\n e06:\t84 c0                \ttest   %al,%al\n e08:\t74 45                \tje     e4f <jpeg_new_colormap+0xb8>\n e0a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n e0e:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n e15:\t48 85 c0             \ttest   %rax,%rax\n e18:\t74 35                \tje     e4f <jpeg_new_colormap+0xb8>\n e1a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n e1e:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n e22:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n e26:\t48 89 90 70 02 00 00 \tmov    %rdx,0x270(%rax)\n e2d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n e31:\t48 8b 80 70 02 00 00 \tmov    0x270(%rax),%rax\n e38:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n e3c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n e40:\t48 89 c7             \tmov    %rax,%rdi\n e43:\tff d2                \tcallq  *%rdx\n e45:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n e49:\tc6 40 10 00          \tmovb   $0x0,0x10(%rax)\n e4d:\teb 22                \tjmp    e71 <jpeg_new_colormap+0xda>\n e4f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n e53:\t48 8b 00             \tmov    (%rax),%rax\n e56:\tc7 40 28 2f 00 00 00 \tmovl   $0x2f,0x28(%rax)\n e5d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n e61:\t48 8b 00             \tmov    (%rax),%rax\n e64:\t48 8b 10             \tmov    (%rax),%rdx\n e67:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n e6b:\t48 89 c7             \tmov    %rax,%rdi\n e6e:\tff d2                \tcallq  *%rdx\n e70:\t90                   \tnop\n e71:\t90                   \tnop\n e72:\tc9                   \tleaveq \n e73:\tc3                   \tretq   ", "code_s": "__int64 __fastcall jpeg_new_colormap(__int64 a1) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)(a1 + Number);\n  if (*(_DWORD *)(a1 + Number) != Number) {\n    *(_DWORD *)(*(_QWORD *)a1 + Number L) = Number;\n    *(_DWORD *)(*(_QWORD *)a1 + Number L) = *(_DWORD *)(a1 + Number);\n    (**(void(__fastcall ***)(__int64))a1)(a1);\n  }\n  if (*(_BYTE *)(a1 + Number) && *(_BYTE *)(a1 + Number) &&\n      *(_QWORD *)(a1 + Number)) {\n    *(_QWORD *)(a1 + Number) = *(_QWORD *)(<span class=\"supfact\">v2</span> + Number);\n    (*(void(__fastcall **)(__int64))(*(_QWORD *)(a1 + Number) + Number L))(a1);\n    result = <span class=\"supfact\">v2</span>;\n    *(_BYTE *)(<span class=\"supfact\">v2</span> + Number) = Number;\n  } else {\n    *(_DWORD *)(*(_QWORD *)a1 + Number L) = Number;\n    result = (**(__int64(__fastcall ***)(__int64))a1)(a1);\n  }\n  return result;\n}", "code_t": "void __cdecl jpeg_new_colormap(j_decompress_ptr cinfo) {\n  my_master_ptr <span class=\"supfact\">master</span>;\n  <span class=\"supfact\">master</span> = (my_master_ptr)cinfo-><span class=\"supfact\">master</span>;\n  if (cinfo->global_state != Number) {\n    cinfo->err->msg_code = Number;\n    cinfo->err->msg_parm.i[Number] = cinfo->global_state;\n    cinfo->err->error_exit((j_common_ptr)cinfo);\n  }\n  if (cinfo->quantize_colors && cinfo->enable_external_quant &&\n      cinfo->colormap) {\n    cinfo->cquantize = <span class=\"supfact\">master</span>->quantizer_2pass;\n    cinfo->cquantize->new_color_map(cinfo);\n    <span class=\"supfact\">master</span>->pub.is_dummy_pass = Number;\n  } else {\n    cinfo->err->msg_code = Number;\n    cinfo->err->error_exit((j_common_ptr)cinfo);\n  }\n}", "var": [{"name": "v2", "type": "my_master_ptr", "ref_name": "master", "ref_type": "my_master_ptr"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "wloot", "repo_name": "android_kernel_xiaomi_msm8998", "path": "wloot/android_kernel_xiaomi_msm8998/f6b83e460e0ded218de3945b873b8578a57b28ced994747be89f02f007af8c93", "path_in_repo": "wloot/android_kernel_xiaomi_msm8998/tools/perf/util/db-export.o", "objdump": "00000000000013e2 <db_export__call_return>:\n    13e2:\t55                   \tpush   %rbp\n    13e3:\t48 89 e5             \tmov    %rsp,%rbp\n    13e6:\t48 83 ec 20          \tsub    $0x20,%rsp\n    13ea:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    13ee:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    13f2:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    13f9:\t00 00 \n    13fb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    13ff:\t31 c0                \txor    %eax,%eax\n    1401:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1405:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    1409:\t48 85 c0             \ttest   %rax,%rax\n    140c:\t74 07                \tje     1415 <db_export__call_return+0x33>\n    140e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1413:\teb 7e                \tjmp    1493 <db_export__call_return+0xb1>\n    1415:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1419:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    141d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1421:\t48 89 d6             \tmov    %rdx,%rsi\n    1424:\t48 89 c7             \tmov    %rax,%rdi\n    1427:\te8 00 00 00 00       \tcallq  142c <db_export__call_return+0x4a>\n    142c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    142f:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    1433:\t74 05                \tje     143a <db_export__call_return+0x58>\n    1435:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    1438:\teb 59                \tjmp    1493 <db_export__call_return+0xb1>\n    143a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    143e:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n    1445:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    1449:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    144d:\t48 89 90 a8 00 00 00 \tmov    %rdx,0xa8(%rax)\n    1454:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1458:\t48 8b 90 a8 00 00 00 \tmov    0xa8(%rax),%rdx\n    145f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1463:\t48 89 50 40          \tmov    %rdx,0x40(%rax)\n    1467:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    146b:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n    146f:\t48 85 c0             \ttest   %rax,%rax\n    1472:\t74 1a                \tje     148e <db_export__call_return+0xac>\n    1474:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1478:\t48 8b 48 50          \tmov    0x50(%rax),%rcx\n    147c:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    1480:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1484:\t48 89 d6             \tmov    %rdx,%rsi\n    1487:\t48 89 c7             \tmov    %rax,%rdi\n    148a:\tff d1                \tcallq  *%rcx\n    148c:\teb 05                \tjmp    1493 <db_export__call_return+0xb1>\n    148e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1493:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1497:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    149e:\t00 00 \n    14a0:\t74 05                \tje     14a7 <db_export__call_return+0xc5>\n    14a2:\te8 00 00 00 00       \tcallq  14a7 <db_export__call_return+0xc5>\n    14a7:\tc9                   \tleaveq \n    14a8:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall db_export__call_return(__int64 a1, __int64 a2) {\n  __int64 result;\n  unsigned int <span class=\"supfact\">v3</span>;\n  if (*(_QWORD *)(a2 + Number))\n    return Number L;\n  <span class=\"supfact\">v3</span> = db_export__call_path(a1, *(_QWORD **)(a2 + Number));\n  if (<span class=\"supfact\">v3</span>)\n    return <span class=\"supfact\">v3</span>;\n  *(_QWORD *)(a2 + Number) = ++*(_QWORD *)(a1 + Number);\n  if (*(_QWORD *)(a1 + Number))\n    result = (*(__int64(__fastcall **)(__int64, __int64))(a1 + Number))(a1, a2);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl db_export__call_return(db_export *dbe, call_return *cr) {\n  int result;\n  int <span class=\"supfact\">err</span>;\n  if (cr->db_id)\n    return Number;\n  <span class=\"supfact\">err</span> = db_export__call_path(dbe, cr->cp);\n  if (<span class=\"supfact\">err</span>)\n    return <span class=\"supfact\">err</span>;\n  cr->db_id = ++dbe->call_return_last_db_id;\n  if (dbe->export_call_return)\n    result = dbe->export_call_return(dbe, cr);\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v3", "type": "int", "ref_name": "err", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"code_s": "Poco ProcessHandle *__fastcall Poco Process launch(Poco ProcessHandle *this,\n                                                   const char **a2, __int64 *a3,\n                                                   __int64 a4,\n                                                   Poco PipeImpl **a5, char *a6,\n                                                   __int64 <span class=\"supfact\">a7</span>,\n                                                   __int64 <span class=\"supfact\">a8</span>) {\n  Poco PipeImpl **v12;\n  Poco ProcessHandleImpl *v13;\n  int v14;\n  __int64 <span class=\"supfact\">v16</span>;\n  char *<span class=\"supfact\">v17</span>;\n  v12 = (Poco PipeImpl **)<span class=\"supfact\">a7</span>;\n  if (a5 && (a5 == (Poco PipeImpl **)a6 ||\n             a5 == (Poco PipeImpl **)<span class=\"supfact\">a7</span>)) {\n    <span class=\"supfact\">v17</span> = a6;\n    Poco Bugcheck assertion((Poco Bugcheck *)String, String,\n                            (const char *)&loc_AD + Number, Number, a6);\n    v12 = (Poco PipeImpl **)<span class=\"supfact\">a7</span>;\n    a6 = <span class=\"supfact\">v17</span>;\n  }\n  v13 = Poco ProcessImpl launchImpl(a2, a3, a4, a5, (Poco PipeImpl **)a6, v12,\n                                    <span class=\"supfact\">a8</span>);\n  Poco ProcessHandle ProcessHandle(this, v13, <span class=\"supfact\">v16</span>, v14);\n  return this;\n}", "code_t": "Poco ProcessHandle *__fastcall Poco Process launch(Poco ProcessHandle *this,\n                                                   const char **a2, __int64 *a3,\n                                                   __int64 a4,\n                                                   Poco PipeImpl **a5, char *a6,\n                                                   __int64 a7, __int64 a8) {\n  Poco PipeImpl **v12;\n  Poco ProcessHandleImpl *v13;\n  int v14;\n  __int64 <span class=\"supfact\">v16</span>;\n  char *<span class=\"supfact\">v17</span>;\n  v12 = (Poco PipeImpl **)a7;\n  if (a5 && (a5 == (Poco PipeImpl **)a6 || a5 == (Poco PipeImpl **)a7)) {\n    <span class=\"supfact\">v17</span> = a6;\n    Poco Bugcheck assertion((Poco Bugcheck *)String, String,\n                            (const char *)&loc_AD + Number, Number, a6);\n    v12 = (Poco PipeImpl **)a7;\n    a6 = <span class=\"supfact\">v17</span>;\n  }\n  v13 = Poco ProcessImpl launchImpl(a2, a3, a4, a5, (Poco PipeImpl **)a6, v12,\n                                    a8);\n  Poco ProcessHandle ProcessHandle(this, v13, <span class=\"supfact\">v16</span>, v14);\n  return this;\n}", "var": [{"name": "v17", "type": "Poco::PipeImpl * *", "ref_name": "v17", "ref_type": "char *"}, {"name": "v16", "type": "Poco::PipeImpl * *", "ref_name": "v16", "ref_type": "__int64"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "tchandrahas", "repo_name": "Defogging-Algorithm", "path": "tchandrahas/Defogging-Algorithm/221b3a5223bdb55ba61dae765286ca585e6ff96cc500b74d36de4b4c489cfeaf", "path_in_repo": "tchandrahas/Defogging-Algorithm//removefog", "objdump": "00000000004050b4 <get_soi>:\n  4050b4:\t55                   \tpush   %rbp\n  4050b5:\t48 89 e5             \tmov    %rsp,%rbp\n  4050b8:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4050bc:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4050c0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4050c4:\t48 8b 00             \tmov    (%rax),%rax\n  4050c7:\tc7 40 28 68 00 00 00 \tmovl   $0x68,0x28(%rax)\n  4050ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4050d2:\t48 8b 00             \tmov    (%rax),%rax\n  4050d5:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  4050d9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4050dd:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4050e2:\t48 89 c7             \tmov    %rax,%rdi\n  4050e5:\tff d2                \tcallq  *%rdx\n  4050e7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4050eb:\t48 8b 80 68 02 00 00 \tmov    0x268(%rax),%rax\n  4050f2:\t8b 40 18             \tmov    0x18(%rax),%eax\n  4050f5:\t85 c0                \ttest   %eax,%eax\n  4050f7:\t74 21                \tje     40511a <get_soi+0x66>\n  4050f9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4050fd:\t48 8b 00             \tmov    (%rax),%rax\n  405100:\tc7 40 28 40 00 00 00 \tmovl   $0x40,0x28(%rax)\n  405107:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40510b:\t48 8b 00             \tmov    (%rax),%rax\n  40510e:\t48 8b 10             \tmov    (%rax),%rdx\n  405111:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405115:\t48 89 c7             \tmov    %rax,%rdi\n  405118:\tff d2                \tcallq  *%rdx\n  40511a:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  405121:\teb 37                \tjmp    40515a <get_soi+0xa6>\n  405123:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  405127:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40512a:\t48 98                \tcltq   \n  40512c:\tc6 84 02 44 01 00 00 \tmovb   $0x0,0x144(%rdx,%rax,1)\n  405133:\t00 \n  405134:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  405138:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40513b:\t48 98                \tcltq   \n  40513d:\tc6 84 02 54 01 00 00 \tmovb   $0x1,0x154(%rdx,%rax,1)\n  405144:\t01 \n  405145:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  405149:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40514c:\t48 98                \tcltq   \n  40514e:\tc6 84 02 64 01 00 00 \tmovb   $0x5,0x164(%rdx,%rax,1)\n  405155:\t05 \n  405156:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40515a:\t83 7d fc 0f          \tcmpl   $0xf,-0x4(%rbp)\n  40515e:\t7e c3                \tjle    405123 <get_soi+0x6f>\n  405160:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405164:\tc7 80 74 01 00 00 00 \tmovl   $0x0,0x174(%rax)\n  40516b:\t00 00 00 \n  40516e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405172:\tc7 40 3c 00 00 00 00 \tmovl   $0x0,0x3c(%rax)\n  405179:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40517d:\tc7 80 8c 01 00 00 00 \tmovl   $0x0,0x18c(%rax)\n  405184:\t00 00 00 \n  405187:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40518b:\tc7 80 90 01 00 00 00 \tmovl   $0x0,0x190(%rax)\n  405192:\t00 00 00 \n  405195:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405199:\tc7 80 78 01 00 00 00 \tmovl   $0x0,0x178(%rax)\n  4051a0:\t00 00 00 \n  4051a3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4051a7:\tc6 80 7c 01 00 00 01 \tmovb   $0x1,0x17c(%rax)\n  4051ae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4051b2:\tc6 80 7d 01 00 00 01 \tmovb   $0x1,0x17d(%rax)\n  4051b9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4051bd:\tc6 80 7e 01 00 00 00 \tmovb   $0x0,0x17e(%rax)\n  4051c4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4051c8:\t66 c7 80 80 01 00 00 \tmovw   $0x1,0x180(%rax)\n  4051cf:\t01 00 \n  4051d1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4051d5:\t66 c7 80 82 01 00 00 \tmovw   $0x1,0x182(%rax)\n  4051dc:\t01 00 \n  4051de:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4051e2:\tc7 80 84 01 00 00 00 \tmovl   $0x0,0x184(%rax)\n  4051e9:\t00 00 00 \n  4051ec:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4051f0:\tc6 80 88 01 00 00 00 \tmovb   $0x0,0x188(%rax)\n  4051f7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4051fb:\t48 8b 80 68 02 00 00 \tmov    0x268(%rax),%rax\n  405202:\tc7 40 18 01 00 00 00 \tmovl   $0x1,0x18(%rax)\n  405209:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40520e:\tc9                   \tleaveq \n  40520f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_soi(__int64 a1) {\n  int <span class=\"supfact\">i</span>;\n  *(_DWORD *)(*(_QWORD *)a1 + Number L) = Number;\n  (*(void(__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + Number L))(\n      a1, Number L);\n  if (*(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L)) {\n    *(_DWORD *)(*(_QWORD *)a1 + Number L) = Number;\n    (**(void(__fastcall ***)(__int64))a1)(a1);\n  }\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    *(_BYTE *)(a1 + <span class=\"supfact\">i</span> + Number) = Number;\n    *(_BYTE *)(a1 + <span class=\"supfact\">i</span> + Number) = Number;\n    *(_BYTE *)(a1 + <span class=\"supfact\">i</span> + Number) = Number;\n  }\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_BYTE *)(a1 + Number) = Number;\n  *(_BYTE *)(a1 + Number) = Number;\n  *(_BYTE *)(a1 + Number) = Number;\n  *(_WORD *)(a1 + Number) = Number;\n  *(_WORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_BYTE *)(a1 + Number) = Number;\n  *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L) = Number;\n  return Number L;\n}", "code_t": "boolean __cdecl get_soi(j_decompress_ptr cinfo) {\n  int <span class=\"supfact\">i</span>;\n  cinfo->err->msg_code = Number;\n  cinfo->err->emit_message((j_common_ptr)cinfo, Number);\n  if (cinfo->marker->saw_SOI) {\n    cinfo->err->msg_code = Number;\n    cinfo->err->error_exit((j_common_ptr)cinfo);\n  }\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    cinfo->arith_dc_L[<span class=\"supfact\">i</span>] = Number;\n    cinfo->arith_dc_U[<span class=\"supfact\">i</span>] = Number;\n    cinfo->arith_ac_K[<span class=\"supfact\">i</span>] = Number;\n  }\n  cinfo->restart_interval = Number;\n  cinfo->jpeg_color_space = JCS_UNKNOWN;\n  cinfo->color_transform = JCT_NONE;\n  cinfo->CCIR601_sampling = FALSE;\n  cinfo->saw_JFIF_marker = FALSE;\n  cinfo->JFIF_major_version = Number;\n  cinfo->JFIF_minor_version = Number;\n  cinfo->density_unit = Number;\n  cinfo->X_density = Number;\n  cinfo->Y_density = Number;\n  cinfo->saw_Adobe_marker = FALSE;\n  cinfo->Adobe_transform = Number;\n  cinfo->marker->saw_SOI = TRUE;\n  return Number;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "sslab-gatech", "repo_name": "perf-fuzz", "path": "sslab-gatech/perf-fuzz/250ba0d31506930d18eceb2ae22b372e548c0bd2acb6a90268f94cab677347ce", "path_in_repo": "sslab-gatech/perf-fuzz/linux-4.8.10/tools/power/cpupower/libcpupower.so.0.0.1", "objdump": "000000000000339b <cpufreq_set_frequency>:\n    339b:\t55                   \tpush   %rbp\n    339c:\t48 89 e5             \tmov    %rsp,%rbp\n    339f:\t48 81 ec 30 01 00 00 \tsub    $0x130,%rsp\n    33a6:\t89 bd dc fe ff ff    \tmov    %edi,-0x124(%rbp)\n    33ac:\t48 89 b5 d0 fe ff ff \tmov    %rsi,-0x130(%rbp)\n    33b3:\t8b 85 dc fe ff ff    \tmov    -0x124(%rbp),%eax\n    33b9:\t89 c7                \tmov    %eax,%edi\n    33bb:\te8 00 ed ff ff       \tcallq  20c0 <cpufreq_get_policy@plt>\n    33c0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    33c4:\t48 b8 75 73 65 72 73 \tmovabs $0x6361707372657375,%rax\n    33cb:\t70 61 63 \n    33ce:\t48 89 45 ea          \tmov    %rax,-0x16(%rbp)\n    33d2:\t66 c7 45 f2 65 00    \tmovw   $0x65,-0xe(%rbp)\n    33d8:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    33dd:\t75 0a                \tjne    33e9 <cpufreq_set_frequency+0x4e>\n    33df:\tb8 ed ff ff ff       \tmov    $0xffffffed,%eax\n    33e4:\te9 af 00 00 00       \tjmpq   3498 <cpufreq_set_frequency+0xfd>\n    33e9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    33ed:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    33f1:\t48 8d 4d ea          \tlea    -0x16(%rbp),%rcx\n    33f5:\tba 09 00 00 00       \tmov    $0x9,%edx\n    33fa:\t48 89 ce             \tmov    %rcx,%rsi\n    33fd:\t48 89 c7             \tmov    %rax,%rdi\n    3400:\te8 6b ec ff ff       \tcallq  2070 <strncmp@plt>\n    3405:\t85 c0                \ttest   %eax,%eax\n    3407:\t74 2e                \tje     3437 <cpufreq_set_frequency+0x9c>\n    3409:\t48 8d 55 ea          \tlea    -0x16(%rbp),%rdx\n    340d:\t8b 85 dc fe ff ff    \tmov    -0x124(%rbp),%eax\n    3413:\t48 89 d6             \tmov    %rdx,%rsi\n    3416:\t89 c7                \tmov    %eax,%edi\n    3418:\te8 83 ec ff ff       \tcallq  20a0 <cpufreq_modify_policy_governor@plt>\n    341d:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    3420:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    3424:\t74 11                \tje     3437 <cpufreq_set_frequency+0x9c>\n    3426:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    342a:\t48 89 c7             \tmov    %rax,%rdi\n    342d:\te8 8e ed ff ff       \tcallq  21c0 <cpufreq_put_policy@plt>\n    3432:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    3435:\teb 61                \tjmp    3498 <cpufreq_set_frequency+0xfd>\n    3437:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    343b:\t48 89 c7             \tmov    %rax,%rdi\n    343e:\te8 7d ed ff ff       \tcallq  21c0 <cpufreq_put_policy@plt>\n    3443:\t48 8b 95 d0 fe ff ff \tmov    -0x130(%rbp),%rdx\n    344a:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n    3451:\t48 89 d1             \tmov    %rdx,%rcx\n    3454:\t48 8d 15 cc 1c 00 00 \tlea    0x1ccc(%rip),%rdx        # 5127 <_fini+0xb87>\n    345b:\tbe ff 00 00 00       \tmov    $0xff,%esi\n    3460:\t48 89 c7             \tmov    %rax,%rdi\n    3463:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3468:\te8 63 ec ff ff       \tcallq  20d0 <snprintf@plt>\n    346d:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n    3474:\t48 89 c7             \tmov    %rax,%rdi\n    3477:\te8 34 ec ff ff       \tcallq  20b0 <strlen@plt>\n    347c:\t48 89 c1             \tmov    %rax,%rcx\n    347f:\t48 8d 95 e0 fe ff ff \tlea    -0x120(%rbp),%rdx\n    3486:\t8b 85 dc fe ff ff    \tmov    -0x124(%rbp),%eax\n    348c:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    3491:\t89 c7                \tmov    %eax,%edi\n    3493:\te8 d4 f0 ff ff       \tcallq  256c <sysfs_cpufreq_write_one_value>\n    3498:\tc9                   \tleaveq \n    3499:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cpufreq_set_frequency(unsigned int a1, __int64 a2) {\n  __int64 result;\n  size_t v3;\n  char <span class=\"supfact\">s</span>[Number];\n  char <span class=\"supfact\">s2</span>[Number];\n  unsigned int <span class=\"supfact\">v6</span>;\n  struct cpufreq_policy *<span class=\"supfact\">policy</span>;\n  <span class=\"supfact\">policy</span> = cpufreq_get_policy(a1);\n  strcpy(<span class=\"supfact\">s2</span>, String);\n  if (!<span class=\"supfact\">policy</span>)\n    return Number L;\n  if (!strncmp(<span class=\"supfact\">policy</span>->governor, <span class=\"supfact\">s2</span>, Number) ||\n      (<span class=\"supfact\">v6</span> =\n           cpufreq_modify_policy_governor(a1, <span class=\"supfact\">s2</span>)) == Number) {\n    cpufreq_put_policy(<span class=\"supfact\">policy</span>);\n    snprintf(<span class=\"supfact\">s</span>, Number, String, a2);\n    v3 = strlen(<span class=\"supfact\">s</span>);\n    result = sysfs_cpufreq_write_one_value(a1, Number, <span class=\"supfact\">s</span>, v3);\n  } else {\n    cpufreq_put_policy(<span class=\"supfact\">policy</span>);\n    result = <span class=\"supfact\">v6</span>;\n  }\n  return result;\n}", "code_t": "int __cdecl cpufreq_set_frequency(unsigned int cpu,\n                                  unsigned __int64 target_frequency) {\n  int result;\n  size_t v3;\n  char <span class=\"supfact\">freq</span>[Number];\n  char <span class=\"supfact\">userspace_gov</span>[Number];\n  int <span class=\"supfact\">ret</span>;\n  cpufreq_policy *<span class=\"supfact\">pol</span>;\n  <span class=\"supfact\">pol</span> = cpufreq_get_policy(cpu);\n  strcpy(<span class=\"supfact\">userspace_gov</span>, String);\n  if (!<span class=\"supfact\">pol</span>)\n    return Number;\n  if (!strncmp(<span class=\"supfact\">pol</span>->governor, <span class=\"supfact\">userspace_gov</span>,\n               Number) ||\n      (<span class=\"supfact\">ret</span> = cpufreq_modify_policy_governor(\n           cpu, <span class=\"supfact\">userspace_gov</span>)) == Number) {\n    cpufreq_put_policy(<span class=\"supfact\">pol</span>);\n    snprintf(<span class=\"supfact\">freq</span>, Number, String, target_frequency);\n    v3 = strlen(<span class=\"supfact\">freq</span>);\n    result = sysfs_cpufreq_write_one_value(cpu, WRITE_SCALING_SET_SPEED,\n                                           <span class=\"supfact\">freq</span>, v3);\n  } else {\n    cpufreq_put_policy(<span class=\"supfact\">pol</span>);\n    result = <span class=\"supfact\">ret</span>;\n  }\n  return result;\n}", "var": [{"name": "policy", "type": "cpufreq_policy *", "ref_name": "pol", "ref_type": "cpufreq_policy *"}, {"name": "v6", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "s2", "type": "char[10]", "ref_name": "userspace_gov", "ref_type": "char[10]"}, {"name": "s", "type": "char[255]", "ref_name": "freq", "ref_type": "char[255]"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "ningwang100", "repo_name": "Chingoal-Web-Application", "path": "ningwang100/Chingoal-Web-Application/d0f8aa4d525e6db0e90a2d27370eaa8cf462ce9826251037aeb3ae3182fadc6a", "path_in_repo": "ningwang100/Chingoal-Web-Application/thirdpart/redis-3.0.5/deps/lua/src/luac", "objdump": "000000000040ef6b <test_then_block>:\n  40ef6b:\t55                   \tpush   %rbp\n  40ef6c:\t48 89 e5             \tmov    %rsp,%rbp\n  40ef6f:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40ef73:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40ef77:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ef7b:\t48 89 c7             \tmov    %rax,%rdi\n  40ef7e:\te8 22 cc 00 00       \tcallq  41bba5 <luaX_next>\n  40ef83:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ef87:\t48 89 c7             \tmov    %rax,%rdi\n  40ef8a:\te8 29 f7 ff ff       \tcallq  40e6b8 <cond>\n  40ef8f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40ef92:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ef96:\tbe 12 01 00 00       \tmov    $0x112,%esi\n  40ef9b:\t48 89 c7             \tmov    %rax,%rdi\n  40ef9e:\te8 bd d0 ff ff       \tcallq  40c060 <checknext>\n  40efa3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40efa7:\t48 89 c7             \tmov    %rax,%rdi\n  40efaa:\te8 fe f3 ff ff       \tcallq  40e3ad <block>\n  40efaf:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40efb2:\tc9                   \tleaveq \n  40efb3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall test_then_block(__int64 a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  luaX_next(a1);\n  <span class=\"supfact\">v2</span> = cond(a1);\n  checknext(a1, Number);\n  block(a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "int __cdecl test_then_block(LexState_0 *ls) {\n  int <span class=\"supfact\">condexit</span>;\n  luaX_next(ls);\n  <span class=\"supfact\">condexit</span> = cond(ls);\n  checknext(ls, Number);\n  block(ls);\n  return <span class=\"supfact\">condexit</span>;\n}", "var": [{"name": "v2", "type": "int", "ref_name": "condexit", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/fe9a2828919a86196de030888b21b4c6ef32cb5da36678d86b5154635ce252d8", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Benchmarks/Prolangs-C/agrep/Output/agrep.native", "objdump": "000000000040ae4a <bm>:\n  40ae4a:\t55                   \tpush   %rbp\n  40ae4b:\t48 89 e5             \tmov    %rsp,%rbp\n  40ae4e:\t41 55                \tpush   %r13\n  40ae50:\t41 54                \tpush   %r12\n  40ae52:\t53                   \tpush   %rbx\n  40ae53:\t48 83 ec 28          \tsub    $0x28,%rsp\n  40ae57:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  40ae5b:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  40ae5e:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  40ae62:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  40ae66:\t44 8b 25 77 7e 17 00 \tmov    0x177e77(%rip),%r12d        # 582ce4 <shift_1>\n  40ae6d:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  40ae70:\t44 8d 68 ff          \tlea    -0x1(%rax),%r13d\n  40ae74:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n  40ae79:\te9 e1 01 00 00       \tjmpq   40b05f <bm+0x215>\n  40ae7e:\t48 63 c3             \tmovslq %ebx,%rax\n  40ae81:\t48 01 45 c8          \tadd    %rax,-0x38(%rbp)\n  40ae85:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40ae89:\t0f b6 00             \tmovzbl (%rax),%eax\n  40ae8c:\t0f b6 c0             \tmovzbl %al,%eax\n  40ae8f:\t48 98                \tcltq   \n  40ae91:\t0f b6 80 00 2d 58 00 \tmovzbl 0x582d00(%rax),%eax\n  40ae98:\t0f b6 d8             \tmovzbl %al,%ebx\n  40ae9b:\teb 57                \tjmp    40aef4 <bm+0xaa>\n  40ae9d:\t48 63 c3             \tmovslq %ebx,%rax\n  40aea0:\t48 01 45 c8          \tadd    %rax,-0x38(%rbp)\n  40aea4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40aea8:\t0f b6 00             \tmovzbl (%rax),%eax\n  40aeab:\t0f b6 c0             \tmovzbl %al,%eax\n  40aeae:\t48 98                \tcltq   \n  40aeb0:\t0f b6 80 00 2d 58 00 \tmovzbl 0x582d00(%rax),%eax\n  40aeb7:\t0f b6 d8             \tmovzbl %al,%ebx\n  40aeba:\t48 63 c3             \tmovslq %ebx,%rax\n  40aebd:\t48 01 45 c8          \tadd    %rax,-0x38(%rbp)\n  40aec1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40aec5:\t0f b6 00             \tmovzbl (%rax),%eax\n  40aec8:\t0f b6 c0             \tmovzbl %al,%eax\n  40aecb:\t48 98                \tcltq   \n  40aecd:\t0f b6 80 00 2d 58 00 \tmovzbl 0x582d00(%rax),%eax\n  40aed4:\t0f b6 d8             \tmovzbl %al,%ebx\n  40aed7:\t48 63 c3             \tmovslq %ebx,%rax\n  40aeda:\t48 01 45 c8          \tadd    %rax,-0x38(%rbp)\n  40aede:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40aee2:\t0f b6 00             \tmovzbl (%rax),%eax\n  40aee5:\t0f b6 c0             \tmovzbl %al,%eax\n  40aee8:\t48 98                \tcltq   \n  40aeea:\t0f b6 80 00 2d 58 00 \tmovzbl 0x582d00(%rax),%eax\n  40aef1:\t0f b6 d8             \tmovzbl %al,%ebx\n  40aef4:\t85 db                \ttest   %ebx,%ebx\n  40aef6:\t75 a5                \tjne    40ae9d <bm+0x53>\n  40aef8:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n  40aefd:\teb 08                \tjmp    40af07 <bm+0xbd>\n  40aeff:\t83 c3 01             \tadd    $0x1,%ebx\n  40af02:\t3b 5d d4             \tcmp    -0x2c(%rbp),%ebx\n  40af05:\t74 43                \tje     40af4a <bm+0x100>\n  40af07:\t44 89 e8             \tmov    %r13d,%eax\n  40af0a:\t29 d8                \tsub    %ebx,%eax\n  40af0c:\t48 63 d0             \tmovslq %eax,%rdx\n  40af0f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40af13:\t48 01 d0             \tadd    %rdx,%rax\n  40af16:\t0f b6 00             \tmovzbl (%rax),%eax\n  40af19:\t0f b6 c0             \tmovzbl %al,%eax\n  40af1c:\t48 98                \tcltq   \n  40af1e:\t0f b6 90 e0 2a 58 00 \tmovzbl 0x582ae0(%rax),%edx\n  40af25:\t48 63 c3             \tmovslq %ebx,%rax\n  40af28:\t48 f7 d8             \tneg    %rax\n  40af2b:\t48 89 c1             \tmov    %rax,%rcx\n  40af2e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40af32:\t48 01 c8             \tadd    %rcx,%rax\n  40af35:\t0f b6 00             \tmovzbl (%rax),%eax\n  40af38:\t0f b6 c0             \tmovzbl %al,%eax\n  40af3b:\t48 98                \tcltq   \n  40af3d:\t0f b6 80 e0 2a 58 00 \tmovzbl 0x582ae0(%rax),%eax\n  40af44:\t38 c2                \tcmp    %al,%dl\n  40af46:\t74 b7                \tje     40aeff <bm+0xb5>\n  40af48:\teb 01                \tjmp    40af4b <bm+0x101>\n  40af4a:\t90                   \tnop\n  40af4b:\t3b 5d d4             \tcmp    -0x2c(%rbp),%ebx\n  40af4e:\t0f 85 08 01 00 00    \tjne    40b05c <bm+0x212>\n  40af54:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40af58:\t48 3b 45 c0          \tcmp    -0x40(%rbp),%rax\n  40af5c:\t0f 87 0d 01 00 00    \tja     40b06f <bm+0x225>\n  40af62:\t8b 05 4c 64 00 00    \tmov    0x644c(%rip),%eax        # 4113b4 <WORDBOUND>\n  40af68:\t85 c0                \ttest   %eax,%eax\n  40af6a:\t74 48                \tje     40afb4 <bm+0x16a>\n  40af6c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40af70:\t48 83 c0 01          \tadd    $0x1,%rax\n  40af74:\t0f b6 00             \tmovzbl (%rax),%eax\n  40af77:\t0f b6 c0             \tmovzbl %al,%eax\n  40af7a:\t48 98                \tcltq   \n  40af7c:\t0f b6 80 e0 2a 58 00 \tmovzbl 0x582ae0(%rax),%eax\n  40af83:\t3c 80                \tcmp    $0x80,%al\n  40af85:\t0f 85 c6 00 00 00    \tjne    40b051 <bm+0x207>\n  40af8b:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  40af8e:\t48 98                \tcltq   \n  40af90:\t48 f7 d8             \tneg    %rax\n  40af93:\t48 89 c2             \tmov    %rax,%rdx\n  40af96:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40af9a:\t48 01 d0             \tadd    %rdx,%rax\n  40af9d:\t0f b6 00             \tmovzbl (%rax),%eax\n  40afa0:\t0f b6 c0             \tmovzbl %al,%eax\n  40afa3:\t48 98                \tcltq   \n  40afa5:\t0f b6 80 e0 2a 58 00 \tmovzbl 0x582ae0(%rax),%eax\n  40afac:\t3c 80                \tcmp    $0x80,%al\n  40afae:\t0f 85 a0 00 00 00    \tjne    40b054 <bm+0x20a>\n  40afb4:\t8b 05 c6 46 05 00    \tmov    0x546c6(%rip),%eax        # 45f680 <num_of_matched>\n  40afba:\t83 c0 01             \tadd    $0x1,%eax\n  40afbd:\t89 05 bd 46 05 00    \tmov    %eax,0x546bd(%rip)        # 45f680 <num_of_matched>\n  40afc3:\t8b 05 9b 61 00 00    \tmov    0x619b(%rip),%eax        # 411164 <FILENAMEONLY>\n  40afc9:\t85 c0                \ttest   %eax,%eax\n  40afcb:\t0f 85 a1 00 00 00    \tjne    40b072 <bm+0x228>\n  40afd1:\t8b 05 69 36 05 00    \tmov    0x53669(%rip),%eax        # 45e640 <COUNT>\n  40afd7:\t85 c0                \ttest   %eax,%eax\n  40afd9:\t75 69                \tjne    40b044 <bm+0x1fa>\n  40afdb:\t8b 05 87 36 05 00    \tmov    0x53687(%rip),%eax        # 45e668 <FNAME>\n  40afe1:\t85 c0                \ttest   %eax,%eax\n  40afe3:\t74 14                \tje     40aff9 <bm+0x1af>\n  40afe5:\tbe 20 dc 41 00       \tmov    $0x41dc20,%esi\n  40afea:\tbf c0 e3 40 00       \tmov    $0x40e3c0,%edi\n  40afef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40aff4:\te8 47 60 ff ff       \tcallq  401040 <printf@plt>\n  40aff9:\t48 83 6d c8 01       \tsubq   $0x1,-0x38(%rbp)\n  40affe:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40b002:\t0f b6 00             \tmovzbl (%rax),%eax\n  40b005:\t3c 0a                \tcmp    $0xa,%al\n  40b007:\t75 f0                \tjne    40aff9 <bm+0x1af>\n  40b009:\teb 11                \tjmp    40b01c <bm+0x1d2>\n  40b00b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40b00f:\t0f b6 00             \tmovzbl (%rax),%eax\n  40b012:\t0f b6 c0             \tmovzbl %al,%eax\n  40b015:\t89 c7                \tmov    %eax,%edi\n  40b017:\te8 04 61 ff ff       \tcallq  401120 <putchar@plt>\n  40b01c:\t48 83 45 c8 01       \taddq   $0x1,-0x38(%rbp)\n  40b021:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40b025:\t0f b6 00             \tmovzbl (%rax),%eax\n  40b028:\t3c 0a                \tcmp    $0xa,%al\n  40b02a:\t75 df                \tjne    40b00b <bm+0x1c1>\n  40b02c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40b030:\t0f b6 00             \tmovzbl (%rax),%eax\n  40b033:\t0f b6 c0             \tmovzbl %al,%eax\n  40b036:\t89 c7                \tmov    %eax,%edi\n  40b038:\te8 e3 60 ff ff       \tcallq  401120 <putchar@plt>\n  40b03d:\teb 16                \tjmp    40b055 <bm+0x20b>\n  40b03f:\t48 83 45 c8 01       \taddq   $0x1,-0x38(%rbp)\n  40b044:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40b048:\t0f b6 00             \tmovzbl (%rax),%eax\n  40b04b:\t3c 0a                \tcmp    $0xa,%al\n  40b04d:\t75 f0                \tjne    40b03f <bm+0x1f5>\n  40b04f:\teb 04                \tjmp    40b055 <bm+0x20b>\n  40b051:\t90                   \tnop\n  40b052:\teb 01                \tjmp    40b055 <bm+0x20b>\n  40b054:\t90                   \tnop\n  40b055:\tbb 01 00 00 00       \tmov    $0x1,%ebx\n  40b05a:\teb 03                \tjmp    40b05f <bm+0x215>\n  40b05c:\t44 89 e3             \tmov    %r12d,%ebx\n  40b05f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40b063:\t48 3b 45 c0          \tcmp    -0x40(%rbp),%rax\n  40b067:\t0f 86 11 fe ff ff    \tjbe    40ae7e <bm+0x34>\n  40b06d:\teb 04                \tjmp    40b073 <bm+0x229>\n  40b06f:\t90                   \tnop\n  40b070:\teb 01                \tjmp    40b073 <bm+0x229>\n  40b072:\t90                   \tnop\n  40b073:\t48 83 c4 28          \tadd    $0x28,%rsp\n  40b077:\t5b                   \tpop    %rbx\n  40b078:\t41 5c                \tpop    %r12\n  40b07a:\t41 5d                \tpop    %r13\n  40b07c:\t5d                   \tpop    %rbp\n  40b07d:\tc3                   \tretq   ", "code_s": "unsigned __int8 *__fastcall bm(__int64 a1, int a2, unsigned __int8 *a3,\n                               unsigned __int64 a4) {\n  int v4;\n  int v5;\n  int i;\n  int v7;\n  unsigned __int8 *result;\n  unsigned __int8 *<span class=\"supfact\">v11</span>;\n  v4 = shift_1;\n  v5 = Number;\n  while (Number) {\n    result = a3;\n    if ((unsigned __int64)a3 > a4)\n      break;\n    a3 += v5;\n    for (i = (unsigned __int8)SHIFT[*a3]; i; i = (unsigned __int8)SHIFT[*a3]) {\n      <span class=\"supfact\">v11</span> = &a3[i + (unsigned __int8)SHIFT[a3[i]]];\n      a3 = &<span class=\"supfact\">v11</span>[(unsigned __int8)SHIFT[*<span class=\"supfact\">v11</span>]];\n    }\n    v7 = Number;\n    do {\n      if (TR[*(unsigned __int8 *)(a2 - Number - v7 + a1)] != TR[a3[-v7]])\n        break;\n      ++v7;\n    } while (v7 != a2);\n    if (v7 == a2) {\n      result = a3;\n      if ((unsigned __int64)a3 > a4)\n        return result;\n      if (!WORDBOUND ||\n          TR[a3[Number]] == (char)Number && TR[a3[-a2]] == (char)Number) {\n        ++num_of_matched;\n        result = (unsigned __int8 *)(unsigned int)FILENAMEONLY;\n        if (FILENAMEONLY)\n          return result;\n        if (COUNT) {\n          while (*a3 != Number)\n            ++a3;\n        } else {\n          if (FNAME)\n            printf(String, CurrentFileName);\n          do\n            --a3;\n          while (*a3 != Number);\n          while (*++a3 != Number)\n            putchar(*a3);\n          putchar(*a3);\n        }\n      }\n      v5 = Number;\n    } else {\n      v5 = v4;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl bm(unsigned __int8 *pat, int m, unsigned __int8 *text,\n                unsigned __int8 *textend) {\n  int v4;\n  int v5;\n  int i;\n  int v7;\n  unsigned __int8 *<span class=\"supfact\">textb</span>;\n  v4 = shift_1;\n  v5 = Number;\n  while (text <= textend) {\n    text += v5;\n    for (i = SHIFT[*text]; i; i = SHIFT[*text]) {\n      <span class=\"supfact\">textb</span> = &text[i + SHIFT[text[i]]];\n      text = &<span class=\"supfact\">textb</span>[SHIFT[*<span class=\"supfact\">textb</span>]];\n    }\n    v7 = Number;\n    do {\n      if (TR[pat[m - Number - v7]] != TR[text[-v7]])\n        break;\n      ++v7;\n    } while (v7 != m);\n    if (v7 == m) {\n      if (text > textend)\n        return;\n      if (!WORDBOUND || TR[text[Number]] == Number && TR[text[-m]] == Number) {\n        ++num_of_matched;\n        if (FILENAMEONLY)\n          return;\n        if (COUNT) {\n          while (*text != Number)\n            ++text;\n        } else {\n          if (FNAME)\n            printf(String, (const char *)CurrentFileName);\n          do\n            --text;\n          while (*text != Number);\n          while (*++text != Number)\n            putchar(*text);\n          putchar(*text);\n        }\n      }\n      v5 = Number;\n    } else {\n      v5 = v4;\n    }\n  }\n}", "var": [{"name": "v11", "type": "unsigned __int64", "ref_name": "textb", "ref_type": "unsigned __int8 *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "sslab-gatech", "repo_name": "opensgx", "path": "sslab-gatech/opensgx/a849da55d85194232312e2db94baee78c1053120a67f7c9eb4648c73d4e252eb", "path_in_repo": "sslab-gatech/opensgx/libsgx/musl-libc/src/mman/shm_open.o", "objdump": "0000000000000196 <shm_unlink>:\n 196:\t48 81 ec 28 01 00 00 \tsub    $0x128,%rsp\n 19d:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n 1a2:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n 1a7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 1ac:\t48 89 d6             \tmov    %rdx,%rsi\n 1af:\t48 89 c7             \tmov    %rax,%rdi\n 1b2:\te8 00 00 00 00       \tcallq  1b7 <shm_unlink+0x21>\n 1b7:\t48 89 44 24 08       \tmov    %rax,0x8(%rsp)\n 1bc:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n 1c2:\t75 07                \tjne    1cb <shm_unlink+0x35>\n 1c4:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 1c9:\teb 0d                \tjmp    1d8 <shm_unlink+0x42>\n 1cb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 1d0:\t48 89 c7             \tmov    %rax,%rdi\n 1d3:\te8 00 00 00 00       \tcallq  1d8 <shm_unlink+0x42>\n 1d8:\t48 81 c4 28 01 00 00 \tadd    $0x128,%rsp\n 1df:\tc3                   \tretq   \n", "code_s": "int __fastcall shm_unlink(_BYTE *a1) {\n  int result;\n  char *<span class=\"supfact\">name</span>;\n  char <span class=\"supfact\">v3</span>[Number];\n  <span class=\"supfact\">name</span> = (char *)_shm_mapname(a1, (__int64)<span class=\"supfact\">v3</span>);\n  if (<span class=\"supfact\">name</span>)\n    result = unlink(<span class=\"supfact\">name</span>);\n  else\n    result = Number;\n  return result;\n}", "code_t": "int __cdecl shm_unlink(const char *name) {\n  int result;\n  char *<span class=\"supfact\">namea</span>;\n  char <span class=\"supfact\">buf</span>[Number];\n  <span class=\"supfact\">namea</span> = _shm_mapname(name, <span class=\"supfact\">buf</span>);\n  if (<span class=\"supfact\">namea</span>)\n    result = unlink(<span class=\"supfact\">namea</span>);\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v3", "type": "char[265]", "ref_name": "buf", "ref_type": "char[265]"}, {"name": "name", "type": "char *", "ref_name": "namea", "ref_type": "char *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "rajatgupta1998", "repo_name": "kernel_x86-64", "path": "rajatgupta1998/kernel_x86-64/66cfc33dbbc3aa255f557425b1859505da4df8332e5b84190f26f0029fa783a4", "path_in_repo": "rajatgupta1998/kernel_x86-64/tools/perf/ui/browsers/hists.o", "objdump": "000000000000109b <hierarchy_count_rows>:\n    109b:\t55                   \tpush   %rbp\n    109c:\t48 89 e5             \tmov    %rsp,%rbp\n    109f:\t48 83 ec 50          \tsub    $0x50,%rsp\n    10a3:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    10a7:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    10ab:\t89 d0                \tmov    %edx,%eax\n    10ad:\t88 45 bc             \tmov    %al,-0x44(%rbp)\n    10b0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    10b7:\t00 00 \n    10b9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    10bd:\t31 c0                \txor    %eax,%eax\n    10bf:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n    10c6:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    10ca:\t0f b6 80 cb 00 00 00 \tmovzbl 0xcb(%rax),%eax\n    10d1:\t84 c0                \ttest   %al,%al\n    10d3:\t74 17                \tje     10ec <hierarchy_count_rows+0x51>\n    10d5:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    10d9:\t48 05 40 01 00 00    \tadd    $0x140,%rax\n    10df:\t48 89 c7             \tmov    %rax,%rdi\n    10e2:\te8 2d ff ff ff       \tcallq  1014 <callchain__count_rows>\n    10e7:\te9 d2 00 00 00       \tjmpq   11be <hierarchy_count_rows+0x123>\n    10ec:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    10f0:\t0f b6 80 d7 00 00 00 \tmovzbl 0xd7(%rax),%eax\n    10f7:\t84 c0                \ttest   %al,%al\n    10f9:\t74 0a                \tje     1105 <hierarchy_count_rows+0x6a>\n    10fb:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1100:\te9 b9 00 00 00       \tjmpq   11be <hierarchy_count_rows+0x123>\n    1105:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1109:\t48 05 48 01 00 00    \tadd    $0x148,%rax\n    110f:\t48 89 c7             \tmov    %rax,%rdi\n    1112:\te8 00 00 00 00       \tcallq  1117 <hierarchy_count_rows+0x7c>\n    1117:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    111b:\te9 90 00 00 00       \tjmpq   11b0 <hierarchy_count_rows+0x115>\n    1120:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1124:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1128:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    112c:\t48 83 e8 18          \tsub    $0x18,%rax\n    1130:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1134:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1138:\t48 89 c7             \tmov    %rax,%rdi\n    113b:\te8 e8 f3 ff ff       \tcallq  528 <hist_entry__get_percent_limit>\n    1140:\t66 0f 7e c0          \tmovd   %xmm0,%eax\n    1144:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    1147:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    114b:\t0f b6 80 cd 00 00 00 \tmovzbl 0xcd(%rax),%eax\n    1152:\t84 c0                \ttest   %al,%al\n    1154:\t75 4a                \tjne    11a0 <hierarchy_count_rows+0x105>\n    1156:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    115a:\tf3 0f 10 88 c0 00 00 \tmovss  0xc0(%rax),%xmm1\n    1161:\t00 \n    1162:\tf3 0f 10 45 dc       \tmovss  -0x24(%rbp),%xmm0\n    1167:\t0f 2f c1             \tcomiss %xmm1,%xmm0\n    116a:\t72 34                \tjb     11a0 <hierarchy_count_rows+0x105>\n    116c:\t83 45 d8 01          \taddl   $0x1,-0x28(%rbp)\n    1170:\t80 7d bc 00          \tcmpb   $0x0,-0x44(%rbp)\n    1174:\t74 2a                \tje     11a0 <hierarchy_count_rows+0x105>\n    1176:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    117a:\t0f b6 80 d5 00 00 00 \tmovzbl 0xd5(%rax),%eax\n    1181:\t84 c0                \ttest   %al,%al\n    1183:\t74 1b                \tje     11a0 <hierarchy_count_rows+0x105>\n    1185:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    1189:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    118d:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1192:\t48 89 ce             \tmov    %rcx,%rsi\n    1195:\t48 89 c7             \tmov    %rax,%rdi\n    1198:\te8 fe fe ff ff       \tcallq  109b <hierarchy_count_rows>\n    119d:\t01 45 d8             \tadd    %eax,-0x28(%rbp)\n    11a0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    11a4:\t48 89 c7             \tmov    %rax,%rdi\n    11a7:\te8 00 00 00 00       \tcallq  11ac <hierarchy_count_rows+0x111>\n    11ac:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    11b0:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    11b5:\t0f 85 65 ff ff ff    \tjne    1120 <hierarchy_count_rows+0x85>\n    11bb:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n    11be:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    11c2:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n    11c9:\t00 00 \n    11cb:\t74 05                \tje     11d2 <hierarchy_count_rows+0x137>\n    11cd:\te8 00 00 00 00       \tcallq  11d2 <hierarchy_count_rows+0x137>\n    11d2:\tc9                   \tleaveq \n    11d3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hierarchy_count_rows(__int64 a1, __int64 a2, char a3,\n                                        __m128i a4) {\n  unsigned int <span class=\"supfact\">v6</span>;\n  float <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v6</span> = Number;\n  if (*(_BYTE *)(a2 + Number))\n    return callchain__count_rows(a2 + Number);\n  if (*(_BYTE *)(a2 + Number))\n    return Number L;\n  for (<span class=\"supfact\">i</span> = rb_first(a2 + Number); <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = rb_next(<span class=\"supfact\">i</span>)) {\n    <span class=\"supfact\">v9</span> = <span class=\"supfact\">i</span> - Number;\n    hist_entry__get_percent_limit(<span class=\"supfact\">i</span> - Number);\n    <span class=\"supfact\">v7</span> = COERCE_FLOAT(_mm_cvtsi128_si32(a4));\n    if (!*(_BYTE *)(<span class=\"supfact\">i</span> - Number + Number)) {\n      a4 = (__m128i)LODWORD(<span class=\"supfact\">v7</span>);\n      if (<span class=\"supfact\">v7</span> >= *(float *)(a1 + Number)) {\n        ++<span class=\"supfact\">v6</span>;\n        if (a3) {\n          if (*(_BYTE *)(<span class=\"supfact\">v9</span> + Number))\n            <span class=\"supfact\">v6</span> +=\n                hierarchy_count_rows(a1, <span class=\"supfact\">v9</span>, Number L);\n        }\n      }\n    }\n  }\n  return <span class=\"supfact\">v6</span>;\n}", "code_t": "int __cdecl hierarchy_count_rows(hist_browser *hb, hist_entry *he,\n                                 bool include_children) {\n  __m128i v3;\n  int <span class=\"supfact\">count</span>;\n  float <span class=\"supfact\">percent</span>;\n  rb_node *<span class=\"supfact\">node</span>;\n  hist_entry *<span class=\"supfact\">child</span>;\n  <span class=\"supfact\">count</span> = Number;\n  if (he->leaf)\n    return callchain__count_rows(&he->_anon_1._anon_0.hroot_in);\n  if (he->_anon_0._anon_0.has_no_entry)\n    return Number;\n  for (<span class=\"supfact\">node</span> =\n           (rb_node *)rb_first(&he->_anon_1.sorted_chain + Number);\n       <span class=\"supfact\">node</span>;\n       <span class=\"supfact\">node</span> = (rb_node *)rb_next(<span class=\"supfact\">node</span>)) {\n    <span class=\"supfact\">child</span> = (hist_entry *)&<span class=\"supfact\">node</span>[Number];\n    *(float *)v3.m128i_i32 = hist_entry__get_percent_limit(\n        (hist_entry *)&<span class=\"supfact\">node</span>[Number]);\n    <span class=\"supfact\">percent</span> = COERCE_FLOAT(_mm_cvtsi128_si32(v3));\n    if (!BYTE5(<span class=\"supfact\">node</span>[Number].rb_right)) {\n      v3 = (__m128i)LODWORD(<span class=\"supfact\">percent</span>);\n      if (<span class=\"supfact\">percent</span> >= hb->min_pcnt) {\n        ++<span class=\"supfact\">count</span>;\n        if (include_children && <span class=\"supfact\">child</span>->_anon_0._anon_0.unfolded)\n          <span class=\"supfact\">count</span> +=\n              hierarchy_count_rows(hb, <span class=\"supfact\">child</span>, Number);\n      }\n    }\n  }\n  return <span class=\"supfact\">count</span>;\n}", "var": [{"name": "v9", "type": "hist_entry *", "ref_name": "child", "ref_type": "hist_entry *"}, {"name": "i", "type": "rb_node *", "ref_name": "node", "ref_type": "rb_node *"}, {"name": "v7", "type": "float", "ref_name": "percent", "ref_type": "float"}, {"name": "v6", "type": "int", "ref_name": "count", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "mligor", "repo_name": "jucpp", "path": "mligor/jucpp/5869f61513beec07fe02719c8b5102d7ceba8929c4aa32c31c6f9689f11dbc7b", "path_in_repo": "mligor/jucpp//build/mongoose_lib.obj", "objdump": "0000000000004908 <mg_if_timer>:\n    4908:\t55                   \tpush   %rbp\n    4909:\t48 89 e5             \tmov    %rsp,%rbp\n    490c:\t48 83 ec 20          \tsub    $0x20,%rsp\n    4910:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    4914:\tf2 0f 11 45 e0       \tmovsd  %xmm0,-0x20(%rbp)\n    4919:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    491d:\tf2 0f 10 40 78       \tmovsd  0x78(%rax),%xmm0\n    4922:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    4926:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    492a:\t77 02                \tja     492e <mg_if_timer+0x26>\n    492c:\teb 67                \tjmp    4995 <mg_if_timer+0x8d>\n    492e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4932:\tf2 0f 10 48 78       \tmovsd  0x78(%rax),%xmm1\n    4937:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n    493c:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    4940:\t73 02                \tjae    4944 <mg_if_timer+0x3c>\n    4942:\teb 51                \tjmp    4995 <mg_if_timer+0x8d>\n    4944:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4948:\tf2 0f 10 40 78       \tmovsd  0x78(%rax),%xmm0\n    494d:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n    4952:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    4956:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    495a:\t48 89 d1             \tmov    %rdx,%rcx\n    495d:\tba 06 00 00 00       \tmov    $0x6,%edx\n    4962:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4967:\t48 89 c7             \tmov    %rax,%rdi\n    496a:\te8 10 fd ff ff       \tcallq  467f <_ZL7mg_callP13mg_connectionPFvS0_iPvEiS1_>\n    496f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4973:\tf2 0f 10 40 78       \tmovsd  0x78(%rax),%xmm0\n    4978:\t66 0f 2e 45 f8       \tucomisd -0x8(%rbp),%xmm0\n    497d:\t7a 16                \tjp     4995 <mg_if_timer+0x8d>\n    497f:\t66 0f 2e 45 f8       \tucomisd -0x8(%rbp),%xmm0\n    4984:\t74 02                \tje     4988 <mg_if_timer+0x80>\n    4986:\teb 0d                \tjmp    4995 <mg_if_timer+0x8d>\n    4988:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    498c:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    4990:\tf2 0f 11 40 78       \tmovsd  %xmm0,0x78(%rax)\n    4995:\t90                   \tnop\n    4996:\tc9                   \tleaveq \n    4997:\tc3                   \tretq   ", "code_s": "double *__fastcall mg_if_timer(double *a1, double a2) {\n  double *result;\n  double <span class=\"supfact\">v3</span>;\n  double *<span class=\"supfact\">v4</span>;\n  double <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v4</span> = a1;\n  <span class=\"supfact\">v3</span> = a2;\n  result = a1;\n  if (a1[Number] > Number) {\n    result = <span class=\"supfact\">v4</span>;\n    if (<span class=\"supfact\">v3</span> >= <span class=\"supfact\">v4</span>[Number]) {\n      <span class=\"supfact\">v5</span> = <span class=\"supfact\">v4</span>[Number];\n      mg_call(<span class=\"supfact\">v4</span>, Number L, Number,\n              (unsigned int *)&<span class=\"supfact\">v3</span>);\n      result = <span class=\"supfact\">v4</span>;\n      if (<span class=\"supfact\">v4</span>[Number] == <span class=\"supfact\">v5</span>) {\n        result = <span class=\"supfact\">v4</span>;\n        <span class=\"supfact\">v4</span>[Number] = Number;\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl mg_if_timer(mg_connection *c, double now) {\n  double <span class=\"supfact\">nowa</span>;\n  mg_connection *<span class=\"supfact\">ca</span>;\n  double <span class=\"supfact\">old_value</span>;\n  <span class=\"supfact\">ca</span> = c;\n  <span class=\"supfact\">nowa</span> = now;\n  if (c->ev_timer_time > Number &&\n      <span class=\"supfact\">nowa</span> >= <span class=\"supfact\">ca</span>->ev_timer_time) {\n    <span class=\"supfact\">old_value</span> = <span class=\"supfact\">ca</span>->ev_timer_time;\n    mg_call(<span class=\"supfact\">ca</span>, Number L, Number, &<span class=\"supfact\">nowa</span>);\n    if (<span class=\"supfact\">ca</span>->ev_timer_time == <span class=\"supfact\">old_value</span>)\n      <span class=\"supfact\">ca</span>->ev_timer_time = Number;\n  }\n}", "var": [{"name": "v5", "type": "double", "ref_name": "old_value", "ref_type": "double"}, {"name": "v4", "type": "double", "ref_name": "ca", "ref_type": "mg_connection *"}, {"name": "v3", "type": "double", "ref_name": "nowa", "ref_type": "double"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "dgboy2000", "repo_name": "spl", "path": "dgboy2000/spl/a3b62142fd2cde7975a59ba59c65c92b6f632bcc795a709ad851b3b6861582b9", "path_in_repo": "dgboy2000/spl/bbox/AlternateConvexSearch/svm_common.o", "objdump": "0000000000004113 <read_word>:\n    4113:\t55                   \tpush   %rbp\n    4114:\t48 89 e5             \tmov    %rsp,%rbp\n    4117:\t48 83 ec 20          \tsub    $0x20,%rsp\n    411b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    411f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    4123:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    412a:\teb 09                \tjmp    4135 <read_word+0x22>\n    412c:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n    4131:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    4135:\te8 00 00 00 00       \tcallq  413a <read_word+0x27>\n    413a:\t48 8b 10             \tmov    (%rax),%rdx\n    413d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4141:\t0f b6 00             \tmovzbl (%rax),%eax\n    4144:\t48 0f be c0          \tmovsbq %al,%rax\n    4148:\t48 01 c0             \tadd    %rax,%rax\n    414b:\t48 01 d0             \tadd    %rdx,%rax\n    414e:\t0f b7 00             \tmovzwl (%rax),%eax\n    4151:\t0f b7 c0             \tmovzwl %ax,%eax\n    4154:\t25 00 20 00 00       \tand    $0x2000,%eax\n    4159:\t85 c0                \ttest   %eax,%eax\n    415b:\t74 28                \tje     4185 <read_word+0x72>\n    415d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4161:\t0f b6 00             \tmovzbl (%rax),%eax\n    4164:\t84 c0                \ttest   %al,%al\n    4166:\t75 c4                \tjne    412c <read_word+0x19>\n    4168:\teb 1b                \tjmp    4185 <read_word+0x72>\n    416a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    416e:\t0f b6 10             \tmovzbl (%rax),%edx\n    4171:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    4175:\t88 10                \tmov    %dl,(%rax)\n    4177:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n    417c:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    4180:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n    4185:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4189:\t0f b6 00             \tmovzbl (%rax),%eax\n    418c:\t0f be c0             \tmovsbl %al,%eax\n    418f:\t89 c7                \tmov    %eax,%edi\n    4191:\te8 00 00 00 00       \tcallq  4196 <read_word+0x83>\n    4196:\t85 c0                \ttest   %eax,%eax\n    4198:\t74 d0                \tje     416a <read_word+0x57>\n    419a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    419e:\tc6 00 00             \tmovb   $0x0,(%rax)\n    41a1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    41a4:\tc9                   \tleaveq \n    41a5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_word(_BYTE *a1, _BYTE *a2) {\n  unsigned int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = Number;\n  while (((*_ctype_b_loc())[(char)*a1] & Number) != Number && *a1) {\n    ++a1;\n    ++<span class=\"supfact\">v5</span>;\n  }\n  while (!(unsigned int)space_or_null((char)*a1)) {\n    *a2 = *a1++;\n    ++<span class=\"supfact\">v5</span>;\n    ++a2;\n  }\n  *a2 = Number;\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "int __cdecl read_word(char *in, char *out) {\n  int <span class=\"supfact\">found</span>;\n  <span class=\"supfact\">found</span> = Number;\n  while (((*_ctype_b_loc())[*in] & Number) != Number && *in) {\n    ++in;\n    ++<span class=\"supfact\">found</span>;\n  }\n  while (!space_or_null(*in)) {\n    *out = *in++;\n    ++<span class=\"supfact\">found</span>;\n    ++out;\n  }\n  *out = Number;\n  return <span class=\"supfact\">found</span>;\n}", "var": [{"name": "v5", "type": "int", "ref_name": "found", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "filipeaguiargeissler", "repo_name": "faultinjector_sw_based", "path": "filipeaguiargeissler/faultinjector_sw_based/6a6400f0dd97da0c2ac61f0102943a8dfaccfc3d269e18211bd462d9dfa8eca0", "path_in_repo": "filipeaguiargeissler/faultinjector_sw_based/qemu-1.6.0/block/cloop.o", "objdump": "0000000000000727 <cloop_co_read>:\n 727:\t55                   \tpush   %rbp\n 728:\t48 89 e5             \tmov    %rsp,%rbp\n 72b:\t48 83 ec 40          \tsub    $0x40,%rsp\n 72f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 733:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n 737:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n 73b:\t89 4d c4             \tmov    %ecx,-0x3c(%rbp)\n 73e:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 745:\t00 00 \n 747:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 74b:\t31 c0                \txor    %eax,%eax\n 74d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 751:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n 755:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 759:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 75d:\t48 89 c7             \tmov    %rax,%rdi\n 760:\te8 00 00 00 00       \tcallq  765 <cloop_co_read+0x3e>\n 765:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n 768:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 76c:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n 770:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 774:\t48 89 c7             \tmov    %rax,%rdi\n 777:\te8 ad fe ff ff       \tcallq  629 <cloop_read>\n 77c:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 77f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 783:\t48 89 c7             \tmov    %rax,%rdi\n 786:\te8 00 00 00 00       \tcallq  78b <cloop_co_read+0x64>\n 78b:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 78e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 792:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n 799:\t00 00 \n 79b:\t74 05                \tje     7a2 <cloop_co_read+0x7b>\n 79d:\te8 00 00 00 00       \tcallq  7a2 <cloop_co_read+0x7b>\n 7a2:\tc9                   \tleaveq \n 7a3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cloop_co_read(__int64 a1, __int64 a2, __int64 a3, int a4) {\n  unsigned int <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = *(_QWORD *)(a1 + Number);\n  qemu_co_mutex_lock(<span class=\"supfact\">v8</span>);\n  <span class=\"supfact\">v7</span> = cloop_read(a1, a2, a3, a4);\n  qemu_co_mutex_unlock(<span class=\"supfact\">v8</span>);\n  return <span class=\"supfact\">v7</span>;\n}", "code_t": "int __cdecl cloop_co_read(BlockDriverState_0 *bs, int64_t sector_num,\n                          uint8_t *buf, int nb_sectors) {\n  int <span class=\"supfact\">ret</span>;\n  BDRVCloopState_0 *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (BDRVCloopState_0 *)bs->opaque;\n  qemu_co_mutex_lock(<span class=\"supfact\">s</span>);\n  <span class=\"supfact\">ret</span> = cloop_read(bs, sector_num, buf, nb_sectors);\n  qemu_co_mutex_unlock(<span class=\"supfact\">s</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v8", "type": "BDRVCloopState_0 *", "ref_name": "s", "ref_type": "BDRVCloopState_0 *"}, {"name": "v7", "type": "int", "ref_name": "ret", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "rofl0r", "repo_name": "ellcc", "path": "rofl0r/ellcc/3a7e58a9a5719478ed482a94dc7b49115c9021e51cd65c9f279647c6f40a1cf4", "path_in_repo": "rofl0r/ellcc/llvm/lib/Support/Release+Asserts/Path.o", "objdump": "00000000000011e0 <_ZN4llvm3sys4path13has_root_nameERKNS_5TwineE>:\n    11e0:\t41 54                \tpush   %r12\n    11e2:\t53                   \tpush   %rbx\n    11e3:\t48 81 ec a8 00 00 00 \tsub    $0xa8,%rsp\n    11ea:\t48 8d 5c 24 18       \tlea    0x18(%rsp),%rbx\n    11ef:\t48 89 e6             \tmov    %rsp,%rsi\n    11f2:\t48 8d 84 24 98 00 00 \tlea    0x98(%rsp),%rax\n    11f9:\t00 \n    11fa:\t66 48 0f 6e c3       \tmovq   %rbx,%xmm0\n    11ff:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n    1204:\t66 0f 6c c0          \tpunpcklqdq %xmm0,%xmm0\n    1208:\t0f 29 04 24          \tmovaps %xmm0,(%rsp)\n    120c:\te8 00 00 00 00       \tcallq  1211 <_ZN4llvm3sys4path13has_root_nameERKNS_5TwineE+0x31>\n    1211:\t48 89 c7             \tmov    %rax,%rdi\n    1214:\t48 89 d6             \tmov    %rdx,%rsi\n    1217:\te8 00 00 00 00       \tcallq  121c <_ZN4llvm3sys4path13has_root_nameERKNS_5TwineE+0x3c>\n    121c:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n    1220:\t48 85 d2             \ttest   %rdx,%rdx\n    1223:\t41 0f 95 c4          \tsetne  %r12b\n    1227:\t48 39 df             \tcmp    %rbx,%rdi\n    122a:\t74 05                \tje     1231 <_ZN4llvm3sys4path13has_root_nameERKNS_5TwineE+0x51>\n    122c:\te8 00 00 00 00       \tcallq  1231 <_ZN4llvm3sys4path13has_root_nameERKNS_5TwineE+0x51>\n    1231:\t48 81 c4 a8 00 00 00 \tadd    $0xa8,%rsp\n    1238:\t44 89 e0             \tmov    %r12d,%eax\n    123b:\t5b                   \tpop    %rbx\n    123c:\t41 5c                \tpop    %r12\n    123e:\tc3                   \tretq   \n    123f:\t90                   \tnop", "code_s": "__int64 __fastcall llvm sys path has_root_name(__int64 a1) {\n  unsigned int v1;\n  char *v2;\n  unsigned __int64 v3;\n  __int64 v4;\n  void *<span class=\"supfact\">ptr</span>[Number];\n  char *<span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>[Number];\n  char <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v7</span> = &<span class=\"supfact\">v9</span>;\n  *(__m128i *)<span class=\"supfact\">ptr</span> =\n      _mm_unpacklo_epi64((__m128i)(unsigned __int64)<span class=\"supfact\">v8</span>,\n                         (__m128i)(unsigned __int64)<span class=\"supfact\">v8</span>);\n  v2 = (char *)llvm Twine toStringRef(a1, <span class=\"supfact\">ptr</span>);\n  llvm sys path root_name(v2, v3);\n  LOBYTE(v1) = v4 != Number;\n  if (<span class=\"supfact\">ptr</span>[Number] != <span class=\"supfact\">v8</span>)\n    free(<span class=\"supfact\">ptr</span>[Number]);\n  return v1;\n}", "code_t": "__int64 __fastcall llvm sys path has_root_name(__int64 a1) {\n  unsigned int v1;\n  char *v2;\n  unsigned __int64 v3;\n  __int64 v4;\n  void *<span class=\"supfact\">ptr</span>[Number];\n  char *<span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>[Number];\n  char <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v7</span> = &<span class=\"supfact\">v9</span>;\n  *(__m128i *)<span class=\"supfact\">ptr</span> =\n      _mm_unpacklo_epi64((__m128i)(unsigned __int64)<span class=\"supfact\">v8</span>,\n                         (__m128i)(unsigned __int64)<span class=\"supfact\">v8</span>);\n  v2 = (char *)llvm Twine toStringRef(a1, <span class=\"supfact\">ptr</span>);\n  llvm sys path root_name(v2, v3);\n  LOBYTE(v1) = v4 != Number;\n  if (<span class=\"supfact\">ptr</span>[Number] != <span class=\"supfact\">v8</span>)\n    free(<span class=\"supfact\">ptr</span>[Number]);\n  return v1;\n}", "var": [{"name": "v9", "type": "char", "ref_name": "v9", "ref_type": "char"}, {"name": "v8", "type": "char[128]", "ref_name": "v8", "ref_type": "char[128]"}, {"name": "v7", "type": "char *", "ref_name": "v7", "ref_type": "char *"}, {"name": "ptr", "type": "__int64[2]", "ref_name": "ptr", "ref_type": "void *[2]"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "sookee", "repo_name": "oa-mod", "path": "sookee/oa-mod/69c0c4ec96f0aaf8cc7ede6ebe6046ae1341ab0af4c2814dfe7f227e89be1252", "path_in_repo": "sookee/oa-mod//ioq3/build/debug-linux-x86_64/ded/common.o", "objdump": "0000000000000c3b <Com_StringContains>:\n     c3b:\t55                   \tpush   %rbp\n     c3c:\t48 89 e5             \tmov    %rsp,%rbp\n     c3f:\t53                   \tpush   %rbx\n     c40:\t48 83 ec 38          \tsub    $0x38,%rsp\n     c44:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     c48:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     c4c:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n     c4f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c53:\t48 89 c7             \tmov    %rax,%rdi\n     c56:\te8 00 00 00 00       \tcallq  c5b <Com_StringContains+0x20>\n     c5b:\t89 c3                \tmov    %eax,%ebx\n     c5d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     c61:\t48 89 c7             \tmov    %rax,%rdi\n     c64:\te8 00 00 00 00       \tcallq  c69 <Com_StringContains+0x2e>\n     c69:\t29 c3                \tsub    %eax,%ebx\n     c6b:\t89 d8                \tmov    %ebx,%eax\n     c6d:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     c70:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n     c77:\te9 ad 00 00 00       \tjmpq   d29 <Com_StringContains+0xee>\n     c7c:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n     c83:\teb 6a                \tjmp    cef <Com_StringContains+0xb4>\n     c85:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n     c89:\t74 26                \tje     cb1 <Com_StringContains+0x76>\n     c8b:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     c8e:\t48 63 d0             \tmovslq %eax,%rdx\n     c91:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c95:\t48 01 d0             \tadd    %rdx,%rax\n     c98:\t0f b6 10             \tmovzbl (%rax),%edx\n     c9b:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     c9e:\t48 63 c8             \tmovslq %eax,%rcx\n     ca1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     ca5:\t48 01 c8             \tadd    %rcx,%rax\n     ca8:\t0f b6 00             \tmovzbl (%rax),%eax\n     cab:\t38 c2                \tcmp    %al,%dl\n     cad:\t74 3c                \tje     ceb <Com_StringContains+0xb0>\n     caf:\teb 55                \tjmp    d06 <Com_StringContains+0xcb>\n     cb1:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     cb4:\t48 63 d0             \tmovslq %eax,%rdx\n     cb7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     cbb:\t48 01 d0             \tadd    %rdx,%rax\n     cbe:\t0f b6 00             \tmovzbl (%rax),%eax\n     cc1:\t0f be c0             \tmovsbl %al,%eax\n     cc4:\t89 c7                \tmov    %eax,%edi\n     cc6:\te8 00 00 00 00       \tcallq  ccb <Com_StringContains+0x90>\n     ccb:\t89 c3                \tmov    %eax,%ebx\n     ccd:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     cd0:\t48 63 d0             \tmovslq %eax,%rdx\n     cd3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     cd7:\t48 01 d0             \tadd    %rdx,%rax\n     cda:\t0f b6 00             \tmovzbl (%rax),%eax\n     cdd:\t0f be c0             \tmovsbl %al,%eax\n     ce0:\t89 c7                \tmov    %eax,%edi\n     ce2:\te8 00 00 00 00       \tcallq  ce7 <Com_StringContains+0xac>\n     ce7:\t39 c3                \tcmp    %eax,%ebx\n     ce9:\t75 1a                \tjne    d05 <Com_StringContains+0xca>\n     ceb:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n     cef:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     cf2:\t48 63 d0             \tmovslq %eax,%rdx\n     cf5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     cf9:\t48 01 d0             \tadd    %rdx,%rax\n     cfc:\t0f b6 00             \tmovzbl (%rax),%eax\n     cff:\t84 c0                \ttest   %al,%al\n     d01:\t75 82                \tjne    c85 <Com_StringContains+0x4a>\n     d03:\teb 01                \tjmp    d06 <Com_StringContains+0xcb>\n     d05:\t90                   \tnop\n     d06:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     d09:\t48 63 d0             \tmovslq %eax,%rdx\n     d0c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     d10:\t48 01 d0             \tadd    %rdx,%rax\n     d13:\t0f b6 00             \tmovzbl (%rax),%eax\n     d16:\t84 c0                \ttest   %al,%al\n     d18:\t75 06                \tjne    d20 <Com_StringContains+0xe5>\n     d1a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d1e:\teb 1a                \tjmp    d3a <Com_StringContains+0xff>\n     d20:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n     d24:\t48 83 45 d8 01       \taddq   $0x1,-0x28(%rbp)\n     d29:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     d2c:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n     d2f:\t0f 8e 47 ff ff ff    \tjle    c7c <Com_StringContains+0x41>\n     d35:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d3a:\t48 83 c4 38          \tadd    $0x38,%rsp\n     d3e:\t5b                   \tpop    %rbx\n     d3f:\t5d                   \tpop    %rbp\n     d40:\tc3                   \tretq   ", "code_s": "char *__fastcall Com_StringContains(const char *a1, const char *a2, int a3) {\n  int v3;\n  int v4;\n  char *<span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">s</span> = (char *)a1;\n  v3 = strlen(a1);\n  <span class=\"supfact\">v8</span> = v3 - strlen(a2);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= <span class=\"supfact\">v8</span>;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number; a2[<span class=\"supfact\">j</span>];\n         ++<span class=\"supfact\">j</span>) {\n      if (a3) {\n        if (<span class=\"supfact\">s</span>[<span class=\"supfact\">j</span>] != a2[<span class=\"supfact\">j</span>])\n          break;\n      } else {\n        v4 = toupper(<span class=\"supfact\">s</span>[<span class=\"supfact\">j</span>]);\n        if (v4 != toupper(a2[<span class=\"supfact\">j</span>]))\n          break;\n      }\n    }\n    if (!a2[<span class=\"supfact\">j</span>])\n      return <span class=\"supfact\">s</span>;\n    ++<span class=\"supfact\">s</span>;\n  }\n  return Number L;\n}", "code_t": "char *__cdecl Com_StringContains(char *str1, char *str2, int casesensitive) {\n  int v3;\n  int v4;\n  char *<span class=\"supfact\">str1a</span>;\n  int <span class=\"supfact\">len</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">str1a</span> = str1;\n  v3 = strlen(str1);\n  <span class=\"supfact\">len</span> = v3 - strlen(str2);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= <span class=\"supfact\">len</span>;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number; str2[<span class=\"supfact\">j</span>];\n         ++<span class=\"supfact\">j</span>) {\n      if (casesensitive) {\n        if (<span class=\"supfact\">str1a</span>[<span class=\"supfact\">j</span>] != str2[<span class=\"supfact\">j</span>])\n          break;\n      } else {\n        v4 = toupper(<span class=\"supfact\">str1a</span>[<span class=\"supfact\">j</span>]);\n        if (v4 != toupper(str2[<span class=\"supfact\">j</span>]))\n          break;\n      }\n    }\n    if (!str2[<span class=\"supfact\">j</span>])\n      return <span class=\"supfact\">str1a</span>;\n    ++<span class=\"supfact\">str1a</span>;\n  }\n  return Number L;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "j", "type": "int", "ref_name": "j", "ref_type": "int"}, {"name": "v8", "type": "int", "ref_name": "len", "ref_type": "int"}, {"name": "s", "type": "char *", "ref_name": "str1a", "ref_type": "char *"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/12e71b9d82cf875de947a6749db609d34656f18bae69fc78a7fe1eef74e9edc4", "path_in_repo": "XanClic/qemu//aarch64-linux-user/target/arm/iwmmxt_helper.o", "objdump": "0000000000004d4a <helper_iwmmxt_adduw>:\n    4d4a:\t55                   \tpush   %rbp\n    4d4b:\t48 89 e5             \tmov    %rsp,%rbp\n    4d4e:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    4d52:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    4d56:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n    4d5a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4d5e:\t0f b7 d0             \tmovzwl %ax,%edx\n    4d61:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4d65:\t0f b7 c0             \tmovzwl %ax,%eax\n    4d68:\t01 d0                \tadd    %edx,%eax\n    4d6a:\t48 98                \tcltq   \n    4d6c:\t0f b7 c0             \tmovzwl %ax,%eax\n    4d6f:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    4d73:\t48 c1 ea 10          \tshr    $0x10,%rdx\n    4d77:\t0f b7 ca             \tmovzwl %dx,%ecx\n    4d7a:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    4d7e:\t48 c1 ea 10          \tshr    $0x10,%rdx\n    4d82:\t0f b7 d2             \tmovzwl %dx,%edx\n    4d85:\t01 ca                \tadd    %ecx,%edx\n    4d87:\t48 63 d2             \tmovslq %edx,%rdx\n    4d8a:\t48 c1 e2 10          \tshl    $0x10,%rdx\n    4d8e:\t89 d2                \tmov    %edx,%edx\n    4d90:\t48 09 d0             \tor     %rdx,%rax\n    4d93:\t48 89 c1             \tmov    %rax,%rcx\n    4d96:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4d9a:\t48 c1 e8 20          \tshr    $0x20,%rax\n    4d9e:\t0f b7 d0             \tmovzwl %ax,%edx\n    4da1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4da5:\t48 c1 e8 20          \tshr    $0x20,%rax\n    4da9:\t0f b7 c0             \tmovzwl %ax,%eax\n    4dac:\t01 d0                \tadd    %edx,%eax\n    4dae:\t48 98                \tcltq   \n    4db0:\t48 c1 e0 20          \tshl    $0x20,%rax\n    4db4:\t48 89 c2             \tmov    %rax,%rdx\n    4db7:\t48 b8 00 00 00 00 ff \tmovabs $0xffff00000000,%rax\n    4dbe:\tff 00 00 \n    4dc1:\t48 21 d0             \tand    %rdx,%rax\n    4dc4:\t48 09 c1             \tor     %rax,%rcx\n    4dc7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4dcb:\t48 c1 e8 30          \tshr    $0x30,%rax\n    4dcf:\t0f b7 d0             \tmovzwl %ax,%edx\n    4dd2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4dd6:\t48 c1 e8 30          \tshr    $0x30,%rax\n    4dda:\t0f b7 c0             \tmovzwl %ax,%eax\n    4ddd:\t01 d0                \tadd    %edx,%eax\n    4ddf:\t48 98                \tcltq   \n    4de1:\t48 c1 e0 30          \tshl    $0x30,%rax\n    4de5:\t48 09 c8             \tor     %rcx,%rax\n    4de8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    4dec:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4df0:\t48 c1 e8 08          \tshr    $0x8,%rax\n    4df4:\t25 80 00 00 00       \tand    $0x80,%eax\n    4df9:\t89 c2                \tmov    %eax,%edx\n    4dfb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4dff:\t0f b7 c0             \tmovzwl %ax,%eax\n    4e02:\t48 85 c0             \ttest   %rax,%rax\n    4e05:\t75 07                \tjne    4e0e <helper_iwmmxt_adduw+0xc4>\n    4e07:\tb8 40 00 00 00       \tmov    $0x40,%eax\n    4e0c:\teb 05                \tjmp    4e13 <helper_iwmmxt_adduw+0xc9>\n    4e0e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4e13:\t09 c2                \tor     %eax,%edx\n    4e15:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4e19:\t48 c1 e8 10          \tshr    $0x10,%rax\n    4e1d:\t25 00 80 00 00       \tand    $0x8000,%eax\n    4e22:\t09 c2                \tor     %eax,%edx\n    4e24:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4e28:\t48 c1 e8 10          \tshr    $0x10,%rax\n    4e2c:\t0f b7 c0             \tmovzwl %ax,%eax\n    4e2f:\t48 85 c0             \ttest   %rax,%rax\n    4e32:\t75 07                \tjne    4e3b <helper_iwmmxt_adduw+0xf1>\n    4e34:\tb8 00 40 00 00       \tmov    $0x4000,%eax\n    4e39:\teb 05                \tjmp    4e40 <helper_iwmmxt_adduw+0xf6>\n    4e3b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4e40:\t09 c2                \tor     %eax,%edx\n    4e42:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4e46:\t48 c1 e8 18          \tshr    $0x18,%rax\n    4e4a:\t25 00 00 80 00       \tand    $0x800000,%eax\n    4e4f:\t09 c2                \tor     %eax,%edx\n    4e51:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4e55:\t48 c1 e8 20          \tshr    $0x20,%rax\n    4e59:\t0f b7 c0             \tmovzwl %ax,%eax\n    4e5c:\t48 85 c0             \ttest   %rax,%rax\n    4e5f:\t75 07                \tjne    4e68 <helper_iwmmxt_adduw+0x11e>\n    4e61:\tb8 00 00 40 00       \tmov    $0x400000,%eax\n    4e66:\teb 05                \tjmp    4e6d <helper_iwmmxt_adduw+0x123>\n    4e68:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4e6d:\t09 c2                \tor     %eax,%edx\n    4e6f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4e73:\t48 c1 f8 20          \tsar    $0x20,%rax\n    4e77:\t25 00 00 00 80       \tand    $0x80000000,%eax\n    4e7c:\t09 c2                \tor     %eax,%edx\n    4e7e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4e82:\t48 c1 e8 30          \tshr    $0x30,%rax\n    4e86:\t48 85 c0             \ttest   %rax,%rax\n    4e89:\t75 07                \tjne    4e92 <helper_iwmmxt_adduw+0x148>\n    4e8b:\tb8 00 00 00 40       \tmov    $0x40000000,%eax\n    4e90:\teb 05                \tjmp    4e97 <helper_iwmmxt_adduw+0x14d>\n    4e92:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4e97:\t09 d0                \tor     %edx,%eax\n    4e99:\t89 c2                \tmov    %eax,%edx\n    4e9b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4e9f:\t89 90 9c 2f 00 00    \tmov    %edx,0x2f9c(%rax)\n    4ea5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4ea9:\t5d                   \tpop    %rbp\n    4eaa:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall helper_iwmmxt_adduw(__int64 a1, __int64 a2,\n                                                __int64 a3) {\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  unsigned int v8;\n  int v9;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = ((__int64)(WORD2(a2) + WORD2(a3)) << Number) & Number |\n                        ((WORD1(a2) + (unsigned int)WORD1(a3)) << Number) |\n                        (unsigned __int64)(unsigned __int16)(a2 + a3) |\n                        ((__int64)(HIWORD(a2) + HIWORD(a3)) << Number);\n  if ((_WORD)a2 + (_WORD)a3)\n    v3 = Number;\n  else\n    v3 = Number;\n  v4 = (<span class=\"supfact\">v11</span> >> Number) & Number | v3 |\n       (<span class=\"supfact\">v11</span> >> Number) & Number;\n  if (WORD1(<span class=\"supfact\">v11</span>))\n    v5 = Number;\n  else\n    v5 = Number;\n  v6 = (<span class=\"supfact\">v11</span> >> Number) & Number | v5 | v4;\n  if (WORD2(<span class=\"supfact\">v11</span>))\n    v7 = Number;\n  else\n    v7 = Number;\n  v8 = HIDWORD(<span class=\"supfact\">v11</span>) & Number | v7 | v6;\n  if (HIWORD(<span class=\"supfact\">v11</span>))\n    v9 = Number;\n  else\n    v9 = Number;\n  *(_DWORD *)(a1 + Number) = v8 | v9;\n  return <span class=\"supfact\">v11</span>;\n}", "code_t": "uint64_t __cdecl helper_iwmmxt_adduw(CPUARMState_0 *env, uint64_t a,\n                                     uint64_t b) {\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  unsigned int v8;\n  int v9;\n  unsigned __int64 <span class=\"supfact\">aa</span>;\n  <span class=\"supfact\">aa</span> = ((__int64)(WORD2(a) + WORD2(b)) << Number) & Number |\n                       ((WORD1(a) + (unsigned int)WORD1(b)) << Number) |\n                       (unsigned __int64)(unsigned __int16)(a + b) |\n                       ((__int64)(HIWORD(a) + HIWORD(b)) << Number);\n  if ((_WORD)a + (_WORD)b)\n    v3 = Number;\n  else\n    v3 = Number;\n  v4 = (<span class=\"supfact\">aa</span> >> Number) & Number | v3 |\n       (<span class=\"supfact\">aa</span> >> Number) & Number;\n  if (WORD1(<span class=\"supfact\">aa</span>))\n    v5 = Number;\n  else\n    v5 = Number;\n  v6 = (<span class=\"supfact\">aa</span> >> Number) & Number | v5 | v4;\n  if (WORD2(<span class=\"supfact\">aa</span>))\n    v7 = Number;\n  else\n    v7 = Number;\n  v8 = HIDWORD(<span class=\"supfact\">aa</span>) & Number | v7 | v6;\n  if (HIWORD(<span class=\"supfact\">aa</span>))\n    v9 = Number;\n  else\n    v9 = Number;\n  env->iwmmxt.cregs[Number] = v8 | v9;\n  return <span class=\"supfact\">aa</span>;\n}", "var": [{"name": "v11", "type": "uint64_t", "ref_name": "aa", "ref_type": "unsigned __int64"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "pret", "repo_name": "agbcc", "path": "pret/agbcc/41727916c71c4b1721ca0d375eba67ae0b5906309f6b5f01a48ef0a4d10f43b6", "path_in_repo": "pret/agbcc/gcc/varasm.o", "objdump": "0000000000004535 <record_constant>:\n    4535:\t55                   \tpush   %rbp\n    4536:\t48 89 e5             \tmov    %rsp,%rbp\n    4539:\t48 83 ec 50          \tsub    $0x50,%rsp\n    453d:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    4541:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n    4548:\t00 \n    4549:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n    4550:\t00 \n    4551:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    4558:\t00 \n    4559:\tc7 45 f4 08 00 00 00 \tmovl   $0x8,-0xc(%rbp)\n    4560:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4564:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    4568:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    456b:\t48 98                \tcltq   \n    456d:\t48 01 c2             \tadd    %rax,%rdx\n    4570:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4574:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    4578:\t48 39 c2             \tcmp    %rax,%rdx\n    457b:\t76 11                \tjbe    458e <record_constant+0x59>\n    457d:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    4580:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4584:\t89 d6                \tmov    %edx,%esi\n    4586:\t48 89 c7             \tmov    %rax,%rdi\n    4589:\te8 00 00 00 00       \tcallq  458e <record_constant+0x59>\n    458e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4591:\t48 63 d0             \tmovslq %eax,%rdx\n    4594:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4598:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    459c:\t48 8d 4d c8          \tlea    -0x38(%rbp),%rcx\n    45a0:\t48 89 ce             \tmov    %rcx,%rsi\n    45a3:\t48 89 c7             \tmov    %rax,%rdi\n    45a6:\te8 00 00 00 00       \tcallq  45ab <record_constant+0x76>\n    45ab:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    45af:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    45b3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    45b6:\t48 98                \tcltq   \n    45b8:\t48 01 c2             \tadd    %rax,%rdx\n    45bb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    45bf:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    45c3:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    45ca:\t00 \n    45cb:\tc7 45 e4 08 00 00 00 \tmovl   $0x8,-0x1c(%rbp)\n    45d2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    45d6:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    45da:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    45dd:\t48 98                \tcltq   \n    45df:\t48 01 c2             \tadd    %rax,%rdx\n    45e2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    45e6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    45ea:\t48 39 c2             \tcmp    %rax,%rdx\n    45ed:\t76 11                \tjbe    4600 <record_constant+0xcb>\n    45ef:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    45f2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    45f6:\t89 d6                \tmov    %edx,%esi\n    45f8:\t48 89 c7             \tmov    %rax,%rdi\n    45fb:\te8 00 00 00 00       \tcallq  4600 <record_constant+0xcb>\n    4600:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    4603:\t48 63 d0             \tmovslq %eax,%rdx\n    4606:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    460a:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    460e:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n    4612:\t48 89 ce             \tmov    %rcx,%rsi\n    4615:\t48 89 c7             \tmov    %rax,%rdi\n    4618:\te8 00 00 00 00       \tcallq  461d <record_constant+0xe8>\n    461d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4621:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    4625:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    4628:\t48 98                \tcltq   \n    462a:\t48 01 c2             \tadd    %rax,%rdx\n    462d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4631:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    4635:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4639:\t48 89 c7             \tmov    %rax,%rdi\n    463c:\te8 9b 00 00 00       \tcallq  46dc <record_constant_1>\n    4641:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    4648:\t00 \n    4649:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    464d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4651:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    4655:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4659:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    465d:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n    4661:\t75 0e                \tjne    4671 <record_constant+0x13c>\n    4663:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4667:\t0f b6 50 50          \tmovzbl 0x50(%rax),%edx\n    466b:\t83 ca 02             \tor     $0x2,%edx\n    466e:\t88 50 50             \tmov    %dl,0x50(%rax)\n    4671:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4675:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    4679:\t48 89 c2             \tmov    %rax,%rdx\n    467c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4680:\t8b 40 30             \tmov    0x30(%rax),%eax\n    4683:\t48 98                \tcltq   \n    4685:\t48 01 c2             \tadd    %rax,%rdx\n    4688:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    468c:\t8b 40 30             \tmov    0x30(%rax),%eax\n    468f:\tf7 d0                \tnot    %eax\n    4691:\t48 98                \tcltq   \n    4693:\t48 21 d0             \tand    %rdx,%rax\n    4696:\t48 89 c2             \tmov    %rax,%rdx\n    4699:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    469d:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    46a1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    46a5:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    46a9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    46ad:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    46b1:\t48 39 c2             \tcmp    %rax,%rdx\n    46b4:\t76 10                \tjbe    46c6 <record_constant+0x191>\n    46b6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    46ba:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n    46be:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    46c2:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    46c6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    46ca:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    46ce:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    46d2:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    46d6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    46da:\tc9                   \tleaveq \n    46db:\tc3                   \tretq   ", "code_s": "char *__fastcall record_constant(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">src</span>;\n  char *<span class=\"supfact\">v4</span>;\n  struct obstack *<span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  struct obstack *<span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  struct obstack *<span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">src</span> = Number L;\n  <span class=\"supfact\">v2</span> = Number L;\n  <span class=\"supfact\">v9</span> = &permanent_obstack;\n  <span class=\"supfact\">v8</span> = Number;\n  if (permanent_obstack.next_free + Number > permanent_obstack.chunk_limit)\n    obstack_newchunk(<span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>);\n  memcpy(<span class=\"supfact\">v9</span>->next_free, &<span class=\"supfact\">src</span>,\n         <span class=\"supfact\">v8</span>);\n  <span class=\"supfact\">v9</span>->next_free += <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v7</span> = &permanent_obstack;\n  <span class=\"supfact\">v6</span> = Number;\n  if (permanent_obstack.next_free + Number > permanent_obstack.chunk_limit)\n    obstack_newchunk(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v6</span>);\n  memcpy(<span class=\"supfact\">v7</span>->next_free, &<span class=\"supfact\">v2</span>,\n         <span class=\"supfact\">v6</span>);\n  <span class=\"supfact\">v7</span>->next_free += <span class=\"supfact\">v6</span>;\n  record_constant_1(a1);\n  <span class=\"supfact\">v5</span> = &permanent_obstack;\n  <span class=\"supfact\">v4</span> = permanent_obstack.object_base;\n  if (<span class=\"supfact\">v4</span> == permanent_obstack.next_free)\n    *((_BYTE *)<span class=\"supfact\">v5</span> + Number) |= Number;\n  <span class=\"supfact\">v5</span>->next_free =\n      (char *)((__int64)&<span class=\"supfact\">v5</span>\n                   ->next_free[<span class=\"supfact\">v5</span>->alignment_mask] &\n               ~<span class=\"supfact\">v5</span>->alignment_mask);\n  if (<span class=\"supfact\">v5</span>->next_free > <span class=\"supfact\">v5</span>->chunk_limit)\n    <span class=\"supfact\">v5</span>->next_free = <span class=\"supfact\">v5</span>->chunk_limit;\n  <span class=\"supfact\">v5</span>->object_base = <span class=\"supfact\">v5</span>->next_free;\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "constant_descriptor *__cdecl record_constant(tree exp) {\n  char *<span class=\"supfact\">label</span>;\n  constant_descriptor *<span class=\"supfact\">next</span>;\n  void *<span class=\"supfact\">value</span>;\n  obstack *<span class=\"supfact\">__o1</span>;\n  int <span class=\"supfact\">__len_0</span>;\n  obstack *<span class=\"supfact\">__o_0</span>;\n  int <span class=\"supfact\">__len</span>;\n  obstack *<span class=\"supfact\">__o</span>;\n  <span class=\"supfact\">next</span> = Number L;\n  <span class=\"supfact\">label</span> = Number L;\n  <span class=\"supfact\">__o</span> = &permanent_obstack;\n  <span class=\"supfact\">__len</span> = Number;\n  if (permanent_obstack.next_free + Number > permanent_obstack.chunk_limit)\n    obstack_newchunk(<span class=\"supfact\">__o</span>, <span class=\"supfact\">__len</span>);\n  memcpy(<span class=\"supfact\">__o</span>->next_free, &<span class=\"supfact\">next</span>,\n         <span class=\"supfact\">__len</span>);\n  <span class=\"supfact\">__o</span>->next_free += <span class=\"supfact\">__len</span>;\n  <span class=\"supfact\">__o_0</span> = &permanent_obstack;\n  <span class=\"supfact\">__len_0</span> = Number;\n  if (permanent_obstack.next_free + Number > permanent_obstack.chunk_limit)\n    obstack_newchunk(<span class=\"supfact\">__o_0</span>, <span class=\"supfact\">__len_0</span>);\n  memcpy(<span class=\"supfact\">__o_0</span>->next_free, &<span class=\"supfact\">label</span>,\n         <span class=\"supfact\">__len_0</span>);\n  <span class=\"supfact\">__o_0</span>->next_free += <span class=\"supfact\">__len_0</span>;\n  record_constant_1(exp);\n  <span class=\"supfact\">__o1</span> = &permanent_obstack;\n  <span class=\"supfact\">value</span> = permanent_obstack.object_base;\n  if (<span class=\"supfact\">value</span> == permanent_obstack.next_free)\n    *((_BYTE *)<span class=\"supfact\">__o1</span> + Number) |= Number;\n  <span class=\"supfact\">__o1</span>->next_free =\n      (char *)((__int64)&<span class=\"supfact\">__o1</span>\n                   ->next_free[<span class=\"supfact\">__o1</span>->alignment_mask] &\n               ~<span class=\"supfact\">__o1</span>->alignment_mask);\n  if (<span class=\"supfact\">__o1</span>->next_free > <span class=\"supfact\">__o1</span>->chunk_limit)\n    <span class=\"supfact\">__o1</span>->next_free = <span class=\"supfact\">__o1</span>->chunk_limit;\n  <span class=\"supfact\">__o1</span>->object_base = <span class=\"supfact\">__o1</span>->next_free;\n  return (constant_descriptor *)<span class=\"supfact\">value</span>;\n}", "var": [{"name": "v9", "type": "obstack *", "ref_name": "__o", "ref_type": "obstack *"}, {"name": "v8", "type": "int", "ref_name": "__len", "ref_type": "int"}, {"name": "v7", "type": "obstack *", "ref_name": "__o_0", "ref_type": "obstack *"}, {"name": "v6", "type": "int", "ref_name": "__len_0", "ref_type": "int"}, {"name": "v5", "type": "obstack *", "ref_name": "__o1", "ref_type": "obstack *"}, {"name": "v4", "type": "obstack *", "ref_name": "value", "ref_type": "void *"}, {"name": "src", "type": "void *", "ref_name": "next", "ref_type": "__unk__"}, {"name": "v2", "type": "obstack *", "ref_name": "label", "ref_type": "char *"}], "has_struc": false, "body_in_train": false}, {"repo_owner": "webosose", "repo_name": "gst-libav", "path": "webosose/gst-libav/93463de309c254e68db371a63897ceedc10e9d0c30b4ed8407aeba943f5e96ab", "path_in_repo": "webosose/gst-libav/gst-libs/ext/libav/libavcodec/utils.o", "objdump": "0000000000006553 <ff_add_cpb_side_data>:\n    6553:\t48 83 ec 38          \tsub    $0x38,%rsp\n    6557:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    655c:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n    6561:\t48 89 c7             \tmov    %rax,%rdi\n    6564:\te8 00 00 00 00       \tcallq  6569 <ff_add_cpb_side_data+0x16>\n    6569:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n    656e:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    6573:\t48 85 c0             \ttest   %rax,%rax\n    6576:\t75 0a                \tjne    6582 <ff_add_cpb_side_data+0x2f>\n    6578:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    657d:\te9 03 01 00 00       \tjmpq   6685 <ff_add_cpb_side_data+0x132>\n    6582:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    6587:\t8b 80 58 04 00 00    \tmov    0x458(%rax),%eax\n    658d:\t83 c0 01             \tadd    $0x1,%eax\n    6590:\t48 63 c8             \tmovslq %eax,%rcx\n    6593:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    6598:\t48 8b 80 50 04 00 00 \tmov    0x450(%rax),%rax\n    659f:\tba 10 00 00 00       \tmov    $0x10,%edx\n    65a4:\t48 89 ce             \tmov    %rcx,%rsi\n    65a7:\t48 89 c7             \tmov    %rax,%rdi\n    65aa:\te8 00 00 00 00       \tcallq  65af <ff_add_cpb_side_data+0x5c>\n    65af:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n    65b4:\t48 83 7c 24 28 00    \tcmpq   $0x0,0x28(%rsp)\n    65ba:\t75 17                \tjne    65d3 <ff_add_cpb_side_data+0x80>\n    65bc:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    65c1:\t48 89 c7             \tmov    %rax,%rdi\n    65c4:\te8 00 00 00 00       \tcallq  65c9 <ff_add_cpb_side_data+0x76>\n    65c9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    65ce:\te9 b2 00 00 00       \tjmpq   6685 <ff_add_cpb_side_data+0x132>\n    65d3:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    65d8:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    65dd:\t48 89 90 50 04 00 00 \tmov    %rdx,0x450(%rax)\n    65e4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    65e9:\t8b 80 58 04 00 00    \tmov    0x458(%rax),%eax\n    65ef:\t8d 50 01             \tlea    0x1(%rax),%edx\n    65f2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    65f7:\t89 90 58 04 00 00    \tmov    %edx,0x458(%rax)\n    65fd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    6602:\t48 8b 90 50 04 00 00 \tmov    0x450(%rax),%rdx\n    6609:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    660e:\t8b 80 58 04 00 00    \tmov    0x458(%rax),%eax\n    6614:\t48 98                \tcltq   \n    6616:\t48 c1 e0 04          \tshl    $0x4,%rax\n    661a:\t48 83 e8 10          \tsub    $0x10,%rax\n    661e:\t48 01 d0             \tadd    %rdx,%rax\n    6621:\tc7 40 0c 0a 00 00 00 \tmovl   $0xa,0xc(%rax)\n    6628:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    662d:\t48 8b 90 50 04 00 00 \tmov    0x450(%rax),%rdx\n    6634:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    6639:\t8b 80 58 04 00 00    \tmov    0x458(%rax),%eax\n    663f:\t48 98                \tcltq   \n    6641:\t48 c1 e0 04          \tshl    $0x4,%rax\n    6645:\t48 83 e8 10          \tsub    $0x10,%rax\n    6649:\t48 01 c2             \tadd    %rax,%rdx\n    664c:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    6651:\t48 89 02             \tmov    %rax,(%rdx)\n    6654:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n    6659:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    665e:\t48 8b 88 50 04 00 00 \tmov    0x450(%rax),%rcx\n    6665:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    666a:\t8b 80 58 04 00 00    \tmov    0x458(%rax),%eax\n    6670:\t48 98                \tcltq   \n    6672:\t48 c1 e0 04          \tshl    $0x4,%rax\n    6676:\t48 83 e8 10          \tsub    $0x10,%rax\n    667a:\t48 01 c8             \tadd    %rcx,%rax\n    667d:\t89 50 08             \tmov    %edx,0x8(%rax)\n    6680:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    6685:\t48 83 c4 38          \tadd    $0x38,%rsp\n    6689:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ff_add_cpb_side_data(__int64 a1, __int64 a2, __int64 a3) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v5</span> = av_cpb_properties_alloc(&<span class=\"supfact\">v4</span>, a2, a3);\n  if (!<span class=\"supfact\">v5</span>)\n    return Number L;\n  <span class=\"supfact\">v6</span> = av_realloc_array(\n      *(_QWORD *)(a1 + Number), *(_DWORD *)(a1 + Number) + Number, Number L);\n  if (<span class=\"supfact\">v6</span>) {\n    *(_QWORD *)(a1 + Number) = <span class=\"supfact\">v6</span>;\n    *(_DWORD *)(*(_QWORD *)(a1 + Number) +\n                Number L * (int)++*(_DWORD *)(a1 + Number) - Number + Number) =\n        Number;\n    *(_QWORD *)(Number L * *(int *)(a1 + Number) - Number +\n                *(_QWORD *)(a1 + Number)) = <span class=\"supfact\">v5</span>;\n    *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L * *(int *)(a1 + Number) -\n                Number + Number) = <span class=\"supfact\">v4</span>;\n    result = <span class=\"supfact\">v5</span>;\n  } else {\n    av_freep(&<span class=\"supfact\">v5</span>);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "AVCPBProperties_0 *__cdecl ff_add_cpb_side_data(AVCodecContext_0 *avctx) {\n  AVCPBProperties_0 *result;\n  size_t <span class=\"supfact\">size</span>;\n  AVCPBProperties_0 *<span class=\"supfact\">props</span>;\n  AVPacketSideData_0 *<span class=\"supfact\">tmp</span>;\n  <span class=\"supfact\">props</span> = av_cpb_properties_alloc(&<span class=\"supfact\">size</span>);\n  if (!<span class=\"supfact\">props</span>)\n    return Number L;\n  <span class=\"supfact\">tmp</span> = (AVPacketSideData_0 *)av_realloc_array(\n      avctx->coded_side_data, avctx->nb_coded_side_data + Number, Number L);\n  if (<span class=\"supfact\">tmp</span>) {\n    avctx->coded_side_data = <span class=\"supfact\">tmp</span>;\n    avctx->coded_side_data[avctx->nb_coded_side_data++].type =\n        AV_PKT_DATA_CPB_PROPERTIES;\n    avctx->coded_side_data[avctx->nb_coded_side_data - Number].data =\n        (uint8_t *)<span class=\"supfact\">props</span>;\n    avctx->coded_side_data[avctx->nb_coded_side_data - Number]\n        .<span class=\"supfact\">size</span> = <span class=\"supfact\">size</span>;\n    result = <span class=\"supfact\">props</span>;\n  } else {\n    av_freep(&<span class=\"supfact\">props</span>);\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "uint8_t *", "ref_name": "tmp", "ref_type": "AVPacketSideData_0 *"}, {"name": "v5", "type": "AVBufferRef_0 *", "ref_name": "props", "ref_type": "AVCPBProperties_0 *"}, {"name": "v4", "type": "uint8_t *", "ref_name": "size", "ref_type": "size_t"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "daydaygit", "repo_name": "smdk6410-v1.6", "path": "daydaygit/smdk6410-v1.6/70b1568b1932ba34888a5bb51a51d7c83729d3a3265eb537769cf29a9e146660", "path_in_repo": "daydaygit/smdk6410-v1.6/rootfs/yaffs2/yaffs2-20110815/direct/timothy_tests/mirror_tests/yaffs_norif1.o", "objdump": "00000000000000a7 <Chunk2SpareAddr>:\n  a7:\t55                   \tpush   %rbp\n  a8:\t48 89 e5             \tmov    %rsp,%rbp\n  ab:\t48 83 ec 20          \tsub    $0x20,%rsp\n  af:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  b3:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  b6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  ba:\t8b 48 10             \tmov    0x10(%rax),%ecx\n  bd:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  c0:\t99                   \tcltd   \n  c1:\tf7 f9                \tidiv   %ecx\n  c3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  c6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  ca:\t8b 48 10             \tmov    0x10(%rax),%ecx\n  cd:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  d0:\t99                   \tcltd   \n  d1:\tf7 f9                \tidiv   %ecx\n  d3:\t89 d0                \tmov    %edx,%eax\n  d5:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  d8:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  db:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  df:\t89 d6                \tmov    %edx,%esi\n  e1:\t48 89 c7             \tmov    %rax,%rdi\n  e4:\te8 00 00 00 00       \tcallq  e9 <Chunk2SpareAddr+0x42>\n  e9:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  ec:\t81 45 f4 00 e0 03 00 \taddl   $0x3e000,-0xc(%rbp)\n  f3:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  f6:\tc1 e0 05             \tshl    $0x5,%eax\n  f9:\t01 45 f4             \tadd    %eax,-0xc(%rbp)\n  fc:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  ff:\tc9                   \tleaveq \n 100:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Chunk2SpareAddr(__int64 a1, int a2) {\n  int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = a2 % *(_DWORD *)(a1 + Number);\n  return Number * <span class=\"supfact\">v3</span> +\n         (unsigned int)Block2Addr(a1, a2 / *(_DWORD *)(a1 + Number)) + Number;\n}", "code_t": "u32 *__cdecl Chunk2SpareAddr(yaffs_dev *dev, int chunk_id) {\n  int <span class=\"supfact\">chunkInBlock</span>;\n  <span class=\"supfact\">chunkInBlock</span> = chunk_id % dev->param.chunks_per_block;\n  return (u32 *)(Number * <span class=\"supfact\">chunkInBlock</span> +\n                 (unsigned int)Block2Addr(\n                     dev, chunk_id / dev->param.chunks_per_block) +\n                 Number);\n}", "var": [{"name": "v3", "type": "int", "ref_name": "chunkInBlock", "ref_type": "int"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "esy-packages", "repo_name": "esy-zlib", "path": "esy-packages/esy-zlib/a076594c1cd723ae0ed11d433c76333e5ba0a0cfc7190282f2625af801afa922", "path_in_repo": "esy-packages/esy-zlib/contrib/minizip/zip.o", "objdump": "0000000000003b94 <Write_GlobalComment>:\n    3b94:\t55                   \tpush   %rbp\n    3b95:\t48 89 e5             \tmov    %rsp,%rbp\n    3b98:\t48 83 ec 20          \tsub    $0x20,%rsp\n    3b9c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    3ba0:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    3ba4:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    3bab:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    3bb2:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    3bb7:\t74 0f                \tje     3bc8 <Write_GlobalComment+0x34>\n    3bb9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    3bbd:\t48 89 c7             \tmov    %rax,%rdi\n    3bc0:\te8 00 00 00 00       \tcallq  3bc5 <Write_GlobalComment+0x31>\n    3bc5:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    3bc8:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    3bcb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3bcf:\t48 8b 70 58          \tmov    0x58(%rax),%rsi\n    3bd3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3bd7:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n    3bdc:\t48 89 c7             \tmov    %rax,%rdi\n    3bdf:\te8 24 ca ff ff       \tcallq  608 <zip64local_putValue>\n    3be4:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    3be7:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    3beb:\t75 3a                \tjne    3c27 <Write_GlobalComment+0x93>\n    3bed:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n    3bf1:\t74 34                \tje     3c27 <Write_GlobalComment+0x93>\n    3bf3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3bf7:\t4c 8b 40 10          \tmov    0x10(%rax),%r8\n    3bfb:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n    3bfe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3c02:\t48 8b 70 58          \tmov    0x58(%rax),%rsi\n    3c06:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3c0a:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    3c0e:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    3c12:\t48 89 c7             \tmov    %rax,%rdi\n    3c15:\t41 ff d0             \tcallq  *%r8\n    3c18:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    3c1b:\t48 39 d0             \tcmp    %rdx,%rax\n    3c1e:\t74 07                \tje     3c27 <Write_GlobalComment+0x93>\n    3c20:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n    3c27:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    3c2a:\tc9                   \tleaveq \n    3c2b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Write_GlobalComment(__int64 a1, const char *a2) {\n  unsigned int <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  if (a2)\n    <span class=\"supfact\">v3</span> = strlen(a2);\n  <span class=\"supfact\">v4</span> = zip64local_putValue(a1, *(_QWORD *)(a1 + Number),\n                                           <span class=\"supfact\">v3</span>, Number);\n  if (!<span class=\"supfact\">v4</span> && <span class=\"supfact\">v3</span> &&\n      (*(__int64(__fastcall **)(_QWORD, _QWORD, const char *, _QWORD))(\n          a1 + Number))(*(_QWORD *)(a1 + Number), *(_QWORD *)(a1 + Number), a2,\n                        <span class=\"supfact\">v3</span>) != <span class=\"supfact\">v3</span>) {\n    <span class=\"supfact\">v4</span> = Number;\n  }\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "int __cdecl Write_GlobalComment(zip64_internal *zi,\n                                const char *global_comment) {\n  uInt <span class=\"supfact\">size_global_comment</span>;\n  int <span class=\"supfact\">err</span>;\n  <span class=\"supfact\">size_global_comment</span> = Number;\n  if (global_comment)\n    <span class=\"supfact\">size_global_comment</span> = strlen(global_comment);\n  <span class=\"supfact\">err</span> =\n      zip64local_putValue(&zi->z_filefunc, zi->filestream,\n                          <span class=\"supfact\">size_global_comment</span>, Number);\n  if (!<span class=\"supfact\">err</span> && <span class=\"supfact\">size_global_comment</span> &&\n      (__int64)zi->z_filefunc.zfile_func64.zwrite_file(\n          zi->z_filefunc.zfile_func64.opaque, zi->filestream, global_comment,\n          <span class=\"supfact\">size_global_comment</span>) !=\n          <span class=\"supfact\">size_global_comment</span>) {\n    <span class=\"supfact\">err</span> = Number;\n  }\n  return <span class=\"supfact\">err</span>;\n}", "var": [{"name": "v4", "type": "int", "ref_name": "err", "ref_type": "int"}, {"name": "v3", "type": "uInt", "ref_name": "size_global_comment", "ref_type": "uInt"}], "has_struc": false, "body_in_train": true}, {"repo_owner": "lunixbochs", "repo_name": "inscount", "path": "lunixbochs/inscount/6c7a4c202d40946893375928b607a8a731f2d3abcacc80c2ef2fde1c8da51b0a", "path_in_repo": "lunixbochs/inscount//hw/pci/pci.o", "objdump": "0000000000000967 <pci_bus_class_init>:\n     967:\t55                   \tpush   %rbp\n     968:\t48 89 e5             \tmov    %rsp,%rbp\n     96b:\t48 83 ec 20          \tsub    $0x20,%rsp\n     96f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     973:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     977:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     97b:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 982 <pci_bus_class_init+0x1b>\n     982:\tb9 73 00 00 00       \tmov    $0x73,%ecx\n     987:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 98e <pci_bus_class_init+0x27>\n     98e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 995 <pci_bus_class_init+0x2e>\n     995:\t48 89 c7             \tmov    %rax,%rdi\n     998:\te8 00 00 00 00       \tcallq  99d <pci_bus_class_init+0x36>\n     99d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     9a1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9a5:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 9ac <pci_bus_class_init+0x45>\n     9ac:\tb9 74 00 00 00       \tmov    $0x74,%ecx\n     9b1:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 9b8 <pci_bus_class_init+0x51>\n     9b8:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 9bf <pci_bus_class_init+0x58>\n     9bf:\t48 89 c7             \tmov    %rax,%rdi\n     9c2:\te8 00 00 00 00       \tcallq  9c7 <pci_bus_class_init+0x60>\n     9c7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     9cb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     9cf:\t48 8d 15 24 51 00 00 \tlea    0x5124(%rip),%rdx        # 5afa <pcibus_dev_print>\n     9d6:\t48 89 50 60          \tmov    %rdx,0x60(%rax)\n     9da:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     9de:\t48 8d 15 37 56 00 00 \tlea    0x5637(%rip),%rdx        # 601c <pcibus_get_dev_path>\n     9e5:\t48 89 50 68          \tmov    %rdx,0x68(%rax)\n     9e9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     9ed:\t48 8d 15 1b 55 00 00 \tlea    0x551b(%rip),%rdx        # 5f0f <pcibus_get_fw_dev_path>\n     9f4:\t48 89 50 70          \tmov    %rdx,0x70(%rax)\n     9f8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     9fc:\t48 8d 15 4d fe ff ff \tlea    -0x1b3(%rip),%rdx        # 850 <pci_bus_realize>\n     a03:\t48 89 90 80 00 00 00 \tmov    %rdx,0x80(%rax)\n     a0a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     a0e:\t48 8d 15 95 fe ff ff \tlea    -0x16b(%rip),%rdx        # 8aa <pci_bus_unrealize>\n     a15:\t48 89 90 88 00 00 00 \tmov    %rdx,0x88(%rax)\n     a1c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     a20:\t48 8d 15 3c 05 00 00 \tlea    0x53c(%rip),%rdx        # f63 <pcibus_reset>\n     a27:\t48 89 50 78          \tmov    %rdx,0x78(%rax)\n     a2b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a2f:\t48 8d 15 c9 fe ff ff \tlea    -0x137(%rip),%rdx        # 8ff <pcibus_is_root>\n     a36:\t48 89 90 98 00 00 00 \tmov    %rdx,0x98(%rax)\n     a3d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a41:\t48 8d 15 d2 fe ff ff \tlea    -0x12e(%rip),%rdx        # 91a <pcibus_num>\n     a48:\t48 89 90 a0 00 00 00 \tmov    %rdx,0xa0(%rax)\n     a4f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a53:\t48 8d 15 fe fe ff ff \tlea    -0x102(%rip),%rdx        # 958 <pcibus_numa_node>\n     a5a:\t48 89 90 a8 00 00 00 \tmov    %rdx,0xa8(%rax)\n     a61:\t90                   \tnop\n     a62:\tc9                   \tleaveq \n     a63:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall pci_bus_class_init(__int64 a1) {\n  _QWORD *result;\n  _QWORD *<span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = (_QWORD *)object_class_dynamic_cast_assert(\n      a1, String, String, Number L, String);\n  result = (_QWORD *)object_class_dynamic_cast_assert(a1, String, String,\n                                                      Number L, String);\n  <span class=\"supfact\">v2</span>[Number] = pcibus_dev_print;\n  <span class=\"supfact\">v2</span>[Number] = pcibus_get_dev_path;\n  <span class=\"supfact\">v2</span>[Number] = pcibus_get_fw_dev_path;\n  <span class=\"supfact\">v2</span>[Number] = pci_bus_realize;\n  <span class=\"supfact\">v2</span>[Number] = pci_bus_unrealize;\n  <span class=\"supfact\">v2</span>[Number] = pcibus_reset;\n  result[Number] = pcibus_is_root;\n  result[Number] = pcibus_num;\n  result[Number] = pcibus_numa_node;\n  return result;\n}", "code_t": "void __cdecl pci_bus_class_init(ObjectClass_0 *klass, void *data) {\n  BusClass_0 *<span class=\"supfact\">k</span>;\n  PCIBusClass_0 *pbc;\n  <span class=\"supfact\">k</span> = (BusClass_0 *)object_class_dynamic_cast_assert(\n      klass, String, String, Number L, String);\n  pbc = (PCIBusClass_0 *)object_class_dynamic_cast_assert(klass, String, String,\n                                                          Number L, String);\n  <span class=\"supfact\">k</span>->print_dev =\n      (void (*)(Monitor_0 *, DeviceState_0 *, int))pcibus_dev_print;\n  <span class=\"supfact\">k</span>->get_dev_path =\n      (char *(*)(DeviceState_0 *))pcibus_get_dev_path;\n  <span class=\"supfact\">k</span>->get_fw_dev_path =\n      (char *(*)(DeviceState_0 *))pcibus_get_fw_dev_path;\n  <span class=\"supfact\">k</span>->realize = (BusRealize)pci_bus_realize;\n  <span class=\"supfact\">k</span>->unrealize = (BusUnrealize)pci_bus_unrealize;\n  <span class=\"supfact\">k</span>->reset = (void (*)(BusState_0 *))pcibus_reset;\n  pbc->is_root = (bool (*)(PCIBus_0 *))pcibus_is_root;\n  pbc->bus_num = (int (*)(PCIBus_0 *))pcibus_num;\n  pbc->numa_node = (uint16_t(*)(PCIBus_0 *))pcibus_numa_node;\n}", "var": [{"name": "v2", "type": "PCIBus_0 *", "ref_name": "k", "ref_type": "BusClass_0 *"}], "has_struc": false, "body_in_train": false}]