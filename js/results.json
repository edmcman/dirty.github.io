[{"repo_owner": "vvidic", "repo_name": "ocfs2-tools", "path": "vvidic/ocfs2-tools/2c75441a8d81b84cf157128fbb413f4a7ab9358b4a76ddc0f53de286caf7e774", "path_in_repo": "vvidic/ocfs2-tools/fsck.ocfs2/pass1b.o", "objdump": "000000000000258e <swap_clone>:\n    258e:\t55                   \tpush   %rbp\n    258f:\t48 89 e5             \tmov    %rsp,%rbp\n    2592:\t48 83 ec 50          \tsub    $0x50,%rsp\n    2596:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    259a:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    259e:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    25a2:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    25a9:\t00 \n    25aa:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    25ae:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    25b2:\t48 05 c0 00 00 00    \tadd    $0xc0,%rax\n    25b8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    25bc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    25c0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    25c4:\t48 05 c0 00 00 00    \tadd    $0xc0,%rax\n    25ca:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    25ce:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    25d2:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n    25d6:\t0f b7 c0             \tmovzwl %ax,%eax\n    25d9:\t48 83 c0 01          \tadd    $0x1,%rax\n    25dd:\tc1 e0 04             \tshl    $0x4,%eax\n    25e0:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    25e3:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    25e6:\t48 98                \tcltq   \n    25e8:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n    25ec:\t48 89 d6             \tmov    %rdx,%rsi\n    25ef:\t48 89 c7             \tmov    %rax,%rdi\n    25f2:\te8 00 00 00 00       \tcallq  25f7 <swap_clone+0x69>\n    25f7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    25fb:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    2600:\t74 25                \tje     2627 <swap_clone+0x99>\n    2602:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2609 <swap_clone+0x7b>\n    2609:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    260d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2612:\t48 89 ce             \tmov    %rcx,%rsi\n    2615:\t48 89 c7             \tmov    %rax,%rdi\n    2618:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    261d:\te8 00 00 00 00       \tcallq  2622 <swap_clone+0x94>\n    2622:\te9 0e 01 00 00       \tjmpq   2735 <swap_clone+0x1a7>\n    2627:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    262a:\t48 63 d0             \tmovslq %eax,%rdx\n    262d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2631:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    2635:\t48 89 ce             \tmov    %rcx,%rsi\n    2638:\t48 89 c7             \tmov    %rax,%rdi\n    263b:\te8 00 00 00 00       \tcallq  2640 <swap_clone+0xb2>\n    2640:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    2643:\t48 63 d0             \tmovslq %eax,%rdx\n    2646:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    264a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    264e:\t48 89 ce             \tmov    %rcx,%rsi\n    2651:\t48 89 c7             \tmov    %rax,%rdi\n    2654:\te8 00 00 00 00       \tcallq  2659 <swap_clone+0xcb>\n    2659:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    265c:\t48 63 d0             \tmovslq %eax,%rdx\n    265f:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n    2663:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2667:\t48 89 ce             \tmov    %rcx,%rsi\n    266a:\t48 89 c7             \tmov    %rax,%rdi\n    266d:\te8 00 00 00 00       \tcallq  2672 <swap_clone+0xe4>\n    2672:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2676:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    267a:\t8b 40 14             \tmov    0x14(%rax),%eax\n    267d:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    2680:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2684:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    2688:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    268c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2690:\t8b 52 14             \tmov    0x14(%rdx),%edx\n    2693:\t89 50 14             \tmov    %edx,0x14(%rax)\n    2696:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    269a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    269e:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n    26a1:\t89 50 14             \tmov    %edx,0x14(%rax)\n    26a4:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    26a8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    26ac:\t48 89 d6             \tmov    %rdx,%rsi\n    26af:\t48 89 c7             \tmov    %rax,%rdi\n    26b2:\te8 00 00 00 00       \tcallq  26b7 <swap_clone+0x129>\n    26b7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    26bb:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    26c0:\t74 2a                \tje     26ec <swap_clone+0x15e>\n    26c2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    26c6:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    26ca:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 26d1 <swap_clone+0x143>\n    26d1:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n    26d5:\t48 89 d1             \tmov    %rdx,%rcx\n    26d8:\tba 00 00 00 00       \tmov    $0x0,%edx\n    26dd:\t48 89 c7             \tmov    %rax,%rdi\n    26e0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    26e5:\te8 00 00 00 00       \tcallq  26ea <swap_clone+0x15c>\n    26ea:\teb 49                \tjmp    2735 <swap_clone+0x1a7>\n    26ec:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    26f0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    26f4:\t48 89 d6             \tmov    %rdx,%rsi\n    26f7:\t48 89 c7             \tmov    %rax,%rdi\n    26fa:\te8 00 00 00 00       \tcallq  26ff <swap_clone+0x171>\n    26ff:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2703:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    2708:\t74 2a                \tje     2734 <swap_clone+0x1a6>\n    270a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    270e:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    2712:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2719 <swap_clone+0x18b>\n    2719:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n    271d:\t48 89 d1             \tmov    %rdx,%rcx\n    2720:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2725:\t48 89 c7             \tmov    %rax,%rdi\n    2728:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    272d:\te8 00 00 00 00       \tcallq  2732 <swap_clone+0x1a4>\n    2732:\teb 01                \tjmp    2735 <swap_clone+0x1a7>\n    2734:\t90                   \tnop\n    2735:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2739:\t48 85 c0             \ttest   %rax,%rax\n    273c:\t74 0c                \tje     274a <swap_clone+0x1bc>\n    273e:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    2742:\t48 89 c7             \tmov    %rax,%rdi\n    2745:\te8 00 00 00 00       \tcallq  274a <swap_clone+0x1bc>\n    274a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    274e:\tc9                   \tleaveq \n    274f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall swap_clone(__int64 a1, __int64 a2, __int64 a3) {\n  void *dest;\n  int v6;\n  int v7;\n  void *v8;\n  void *src;\n  __int64 v10;\n  dest = Number L;\n  src = (void *)(*(_QWORD *)(a2 + Number) + Number L);\n  v8 = (void *)(*(_QWORD *)(a3 + Number) + Number L);\n  v7 = Number * (*((unsigned __int16 *)src + Number) + Number);\n  v10 = ocfs2_malloc0(v7, &dest);\n  if (v10) {\n    com_err(whoami, v10, String);\n  } else {\n    memcpy(dest, src, v7);\n    memcpy(src, v8, v7);\n    memcpy(v8, dest, v7);\n    v6 = *(_DWORD *)(*(_QWORD *)(a2 + Number) + Number L);\n    *(_DWORD *)(*(_QWORD *)(a2 + Number) + Number L) =\n        *(_DWORD *)(*(_QWORD *)(a3 + Number) + Number L);\n    *(_DWORD *)(*(_QWORD *)(a3 + Number) + Number L) = v6;\n    v10 = ocfs2_write_cached_inode(a1, a3);\n    if (v10) {\n      com_err(whoami, v10, String, *(_QWORD *)(a3 + Number));\n    } else {\n      v10 = ocfs2_write_cached_inode(a1, a2);\n      if (v10)\n        com_err(whoami, v10, String, *(_QWORD *)(a2 + Number));\n    }\n  }\n  if (dest)\n    ocfs2_free(&dest);\n  return v10;\n}", "code_t": "errcode_t __cdecl swap_clone(ocfs2_filesys *<span class=\"supfact\">fs_0</span>,\n                             ocfs2_cached_inode *<span class=\"supfact\">orig_ci</span>,\n                             ocfs2_cached_inode *<span class=\"supfact\">clone_ci</span>) {\n  ocfs2_extent_list *<span class=\"supfact\">tmp_el</span>;\n  uint32_t <span class=\"supfact\">clusters</span>;\n  int <span class=\"supfact\">el_size</span>;\n  ocfs2_extent_list *<span class=\"supfact\">clone_el</span>;\n  ocfs2_extent_list *<span class=\"supfact\">orig_el</span>;\n  errcode_t <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">tmp_el</span> = Number L;\n  <span class=\"supfact\">orig_el</span> =\n      (ocfs2_extent_list *)&<span class=\"supfact\">orig_ci</span>->ci_inode->id2;\n  <span class=\"supfact\">clone_el</span> =\n      (ocfs2_extent_list *)&<span class=\"supfact\">clone_ci</span>->ci_inode->id2;\n  <span class=\"supfact\">el_size</span> =\n      Number * (<span class=\"supfact\">orig_el</span>->l_count + Number);\n  <span class=\"supfact\">ret</span> =\n      ocfs2_malloc0(<span class=\"supfact\">el_size</span>, &<span class=\"supfact\">tmp_el</span>);\n  if (<span class=\"supfact\">ret</span>) {\n    com_err(whoami, <span class=\"supfact\">ret</span>, String);\n  } else {\n    memcpy(<span class=\"supfact\">tmp_el</span>, <span class=\"supfact\">orig_el</span>,\n           <span class=\"supfact\">el_size</span>);\n    memcpy(<span class=\"supfact\">orig_el</span>, <span class=\"supfact\">clone_el</span>,\n           <span class=\"supfact\">el_size</span>);\n    memcpy(<span class=\"supfact\">clone_el</span>, <span class=\"supfact\">tmp_el</span>,\n           <span class=\"supfact\">el_size</span>);\n    <span class=\"supfact\">clusters</span> = <span class=\"supfact\">orig_ci</span>->ci_inode->i_clusters;\n    <span class=\"supfact\">orig_ci</span>->ci_inode->i_clusters =\n        <span class=\"supfact\">clone_ci</span>->ci_inode->i_clusters;\n    <span class=\"supfact\">clone_ci</span>->ci_inode->i_clusters = <span class=\"supfact\">clusters</span>;\n    <span class=\"supfact\">ret</span> = ocfs2_write_cached_inode(<span class=\"supfact\">fs_0</span>,\n                                                   <span class=\"supfact\">clone_ci</span>);\n    if (<span class=\"supfact\">ret</span>) {\n      com_err(whoami, <span class=\"supfact\">ret</span>, String,\n              <span class=\"supfact\">clone_ci</span>->ci_blkno);\n    } else {\n      <span class=\"supfact\">ret</span> = ocfs2_write_cached_inode(<span class=\"supfact\">fs_0</span>,\n                                                     <span class=\"supfact\">orig_ci</span>);\n      if (<span class=\"supfact\">ret</span>)\n        com_err(whoami, <span class=\"supfact\">ret</span>, String,\n                <span class=\"supfact\">orig_ci</span>->ci_blkno);\n    }\n  }\n  if (<span class=\"supfact\">tmp_el</span>)\n    ocfs2_free(&<span class=\"supfact\">tmp_el</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "o2fsck_state *", "pred_name": "ost", "ref_name": "fs_0", "ref_type": "ocfs2_filesys *"}, {"name": "a2", "type": "ocfs2_filesys *", "pred_name": "fs_0", "ref_name": "orig_ci", "ref_type": "ocfs2_cached_inode *"}, {"name": "a3", "type": "__unk__", "pred_name": "__unk__", "ref_name": "clone_ci", "ref_type": "ocfs2_cached_inode *"}, {"name": "dest", "type": "char *", "pred_name": "buf", "ref_name": "tmp_el", "ref_type": "ocfs2_extent_list *"}, {"name": "v6", "type": "errcode_t", "pred_name": "ret", "ref_name": "clusters", "ref_type": "uint32_t"}, {"name": "v7", "type": "int", "pred_name": "len", "ref_name": "el_size", "ref_type": "int"}, {"name": "v8", "type": "errcode_t", "pred_name": "err", "ref_name": "clone_el", "ref_type": "ocfs2_extent_list *"}, {"name": "src", "type": "__unk__", "pred_name": "__unk__", "ref_name": "orig_el", "ref_type": "ocfs2_extent_list *"}, {"name": "v10", "type": "errcode_t", "pred_name": "ret", "ref_name": "ret", "ref_type": "errcode_t"}], "body_in_train": false}, {"repo_owner": "faucks", "repo_name": "android_kernel_asus_a500cg", "path": "faucks/android_kernel_asus_a500cg/4d5417788d571569a9e4cbf5edd50ad96bfe0488147de322c4058dfa7a164514", "path_in_repo": "faucks/android_kernel_asus_a500cg/linux/kernel/tools/perf/util/hist.o", "objdump": "0000000000001174 <hists__inc_nr_entries>:\n    1174:\t55                   \tpush   %rbp\n    1175:\t48 89 e5             \tmov    %rsp,%rbp\n    1178:\t48 83 ec 20          \tsub    $0x20,%rsp\n    117c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1180:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    1184:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    118b:\t00 00 \n    118d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1191:\t31 c0                \txor    %eax,%eax\n    1193:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1197:\t0f b6 80 cf 00 00 00 \tmovzbl 0xcf(%rax),%eax\n    119e:\t84 c0                \ttest   %al,%al\n    11a0:\t75 42                \tjne    11e4 <hists__inc_nr_entries+0x70>\n    11a2:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    11a6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11aa:\t48 89 d6             \tmov    %rdx,%rsi\n    11ad:\t48 89 c7             \tmov    %rax,%rdi\n    11b0:\te8 00 00 00 00       \tcallq  11b5 <hists__inc_nr_entries+0x41>\n    11b5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11b9:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    11bd:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    11c1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11c5:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n    11c9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11cd:\t48 8b 50 78          \tmov    0x78(%rax),%rdx\n    11d1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    11d5:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    11d9:\t48 01 c2             \tadd    %rax,%rdx\n    11dc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11e0:\t48 89 50 78          \tmov    %rdx,0x78(%rax)\n    11e4:\t90                   \tnop\n    11e5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11e9:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    11f0:\t00 00 \n    11f2:\t74 05                \tje     11f9 <hists__inc_nr_entries+0x85>\n    11f4:\te8 00 00 00 00       \tcallq  11f9 <hists__inc_nr_entries+0x85>\n    11f9:\tc9                   \tleaveq \n    11fa:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall hists__inc_nr_entries(__int64 a1, __int64 a2) {\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  if (!*(_BYTE *)(a2 + Number)) {\n    hists__calc_col_len(a1, (_QWORD *)a2);\n    ++*(_QWORD *)(a1 + Number);\n    *(_QWORD *)(a1 + Number) += *(_QWORD *)(a2 + Number);\n  }\n  return __readfsqword(Number) ^ v3;\n}", "code_t": "void __cdecl hists__inc_nr_entries(<span class=\"supfact\">hists</span> *<span class=\"supfact\">hists</span>,\n                                   hist_entry *<span class=\"supfact\">h</span>) {\n  if (!<span class=\"supfact\">h</span>->filtered) {\n    hists__calc_col_len(<span class=\"supfact\">hists</span>, <span class=\"supfact\">h</span>);\n    ++<span class=\"supfact\">hists</span>->nr_entries;\n    <span class=\"supfact\">hists</span>->stats.total_period += <span class=\"supfact\">h</span>->stat.period;\n  }\n}", "var": [{"name": "a1", "type": "hists *", "pred_name": "self", "ref_name": "hists", "ref_type": "hists *"}, {"name": "a2", "type": "hist_entry *", "pred_name": "h", "ref_name": "h", "ref_type": "hist_entry *"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "converse2006", "repo_name": "ArduinoUno-QEMU", "path": "converse2006/ArduinoUno-QEMU/45965dd55a3879f04e6160abe75dd9e2af6ebe0f22b2c2b7ea1726eddb4e64a3", "path_in_repo": "converse2006/ArduinoUno-QEMU//mips64el-softmmu/balloon.o", "objdump": "00000000000002ee <do_balloon>:\n 2ee:\t55                   \tpush   %rbp\n 2ef:\t48 89 e5             \tmov    %rsp,%rbp\n 2f2:\t48 83 ec 30          \tsub    $0x30,%rsp\n 2f6:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 2fa:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 2fe:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 302:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n 306:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 30d:\t00 00 \n 30f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 313:\t31 c0                \txor    %eax,%eax\n 315:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 319:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 31e:\t48 89 c7             \tmov    %rax,%rdi\n 321:\te8 00 00 00 00       \tcallq  326 <do_balloon+0x38>\n 326:\t48 89 c1             \tmov    %rax,%rcx\n 329:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 32d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 331:\t48 89 c6             \tmov    %rax,%rsi\n 334:\t48 89 cf             \tmov    %rcx,%rdi\n 337:\te8 00 00 00 00       \tcallq  33c <do_balloon+0x4e>\n 33c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 33f:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 343:\t75 2b                \tjne    370 <do_balloon+0x82>\n 345:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 34b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 350:\tba 00 00 00 00       \tmov    $0x0,%edx\n 355:\tbe 8c 00 00 00       \tmov    $0x8c,%esi\n 35a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 35f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 364:\te8 00 00 00 00       \tcallq  369 <do_balloon+0x7b>\n 369:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 36e:\teb 17                \tjmp    387 <do_balloon+0x99>\n 370:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 374:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 378:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 37d:\t48 89 c7             \tmov    %rax,%rdi\n 380:\tff d2                \tcallq  *%rdx\n 382:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 387:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 38b:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 392:\t00 00 \n 394:\t74 05                \tje     39b <do_balloon+0xad>\n 396:\te8 00 00 00 00       \tcallq  39b <do_balloon+0xad>\n 39b:\tc9                   \tleaveq \n 39c:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall do_balloon(__int64 a1, __int64 a2,\n                              void(__fastcall *a3)(__int64, _QWORD),\n                              __int64 a4) {\n  __int64 v4;\n  __int64 result;\n  v4 = qdict_get_int(a2, String);\n  if ((unsigned int)qemu_balloon(v4, (__int64)a3, a4)) {\n    a3(a4, Number L);\n    result = Number L;\n  } else {\n    qerror_report_internal(String, Number L, String, String, String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl do_balloon(Monitor_0 *<span class=\"supfact\">mon</span>,\n                       const QDict_0 *<span class=\"supfact\">params</span>,\n                       MonitorCompletion *<span class=\"supfact\">cb</span>,\n                       void *<span class=\"supfact\">opaque</span>) {\n  ram_addr_t v4;\n  int result;\n  v4 = qdict_get_int(<span class=\"supfact\">params</span>, String);\n  if (qemu_balloon(v4, <span class=\"supfact\">cb</span>, <span class=\"supfact\">opaque</span>)) {\n    <span class=\"supfact\">cb</span>(<span class=\"supfact\">opaque</span>, Number L);\n    result = Number;\n  } else {\n    qerror_report_internal(String, Number L, String, String, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "Monitor_0 *", "pred_name": "mon", "ref_name": "mon", "ref_type": "Monitor_0 *"}, {"name": "a2", "type": "const QDict_0 *", "pred_name": "params", "ref_name": "params", "ref_type": "const QDict_0 *"}, {"name": "a3", "type": "MonitorCompletion *", "pred_name": "cb", "ref_name": "cb", "ref_type": "MonitorCompletion *"}, {"name": "a4", "type": "void *", "pred_name": "opaque", "ref_name": "opaque", "ref_type": "void *"}], "body_in_train": true}, {"repo_owner": "Notevill", "repo_name": "Reporter", "path": "Notevill/Reporter/cf01a52b4c37a3332459dbf279850b200158ddea5f86cd310f53da6a41102033", "path_in_repo": "Notevill/Reporter/IncludeLibraries/myhtml-master/examples/myhtml/serialization_high_level", "objdump": "000000000040d125 <myhtml_token_destroy>:\n  40d125:\t55                   \tpush   %rbp\n  40d126:\t48 89 e5             \tmov    %rsp,%rbp\n  40d129:\t48 83 ec 10          \tsub    $0x10,%rsp\n  40d12d:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  40d131:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40d136:\t75 07                \tjne    40d13f <myhtml_token_destroy+0x1a>\n  40d138:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40d13d:\teb 65                \tjmp    40d1a4 <myhtml_token_destroy+0x7f>\n  40d13f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d143:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40d147:\t48 85 c0             \ttest   %rax,%rax\n  40d14a:\t74 1d                \tje     40d169 <myhtml_token_destroy+0x44>\n  40d14c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d150:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40d154:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40d159:\t48 89 c7             \tmov    %rax,%rdi\n  40d15c:\te8 af 84 01 00       \tcallq  425610 <mcobject_async_destroy>\n  40d161:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  40d165:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n  40d169:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d16d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40d171:\t48 85 c0             \ttest   %rax,%rax\n  40d174:\t74 1d                \tje     40d193 <myhtml_token_destroy+0x6e>\n  40d176:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d17a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40d17e:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40d183:\t48 89 c7             \tmov    %rax,%rdi\n  40d186:\te8 85 84 01 00       \tcallq  425610 <mcobject_async_destroy>\n  40d18b:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  40d18f:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n  40d193:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d197:\t48 89 c7             \tmov    %rax,%rdi\n  40d19a:\te8 37 1d 01 00       \tcallq  41eed6 <mycore_free>\n  40d19f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40d1a4:\tc9                   \tleaveq \n  40d1a5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall myhtml_token_destroy(__int64 a1) {\n  if (!a1)\n    return Number L;\n  if (*(_QWORD *)(a1 + Number))\n    *(_QWORD *)(a1 + Number) =\n        mcobject_async_destroy(*(_QWORD *)(a1 + Number), Number L);\n  if (*(_QWORD *)(a1 + Number))\n    *(_QWORD *)(a1 + Number) =\n        mcobject_async_destroy(*(_QWORD *)(a1 + Number), Number L);\n  mycore_free(a1);\n  return Number L;\n}", "code_t": "myhtml_token_t *__cdecl myhtml_token_destroy(\n    myhtml_token_t *<span class=\"supfact\">token</span>) {\n  if (!<span class=\"supfact\">token</span>)\n    return Number L;\n  if (<span class=\"supfact\">token</span>->nodes_obj)\n    <span class=\"supfact\">token</span>->nodes_obj =\n        mcobject_async_destroy(<span class=\"supfact\">token</span>->nodes_obj, Number);\n  if (<span class=\"supfact\">token</span>->attr_obj)\n    <span class=\"supfact\">token</span>->attr_obj =\n        mcobject_async_destroy(<span class=\"supfact\">token</span>->attr_obj, Number);\n  mycore_free(<span class=\"supfact\">token</span>);\n  return Number L;\n}", "var": [{"name": "a1", "type": "myhtml_token_t *", "pred_name": "token", "ref_name": "token", "ref_type": "myhtml_token_t *"}], "body_in_train": true}, {"repo_owner": "GeoffColburn", "repo_name": "pydcamp", "path": "GeoffColburn/pydcamp/7bbdee6b438511cbf9f7676c615108dfb2b77f72539e7fdbfbf970537fdbfab2", "path_in_repo": "GeoffColburn/pydcamp/extern/samtools-0.1.18/phase.o", "objdump": "0000000000000626 <ks_getuntil>:\n     626:\t55                   \tpush   %rbp\n     627:\t48 89 e5             \tmov    %rsp,%rbp\n     62a:\t48 83 ec 20          \tsub    $0x20,%rsp\n     62e:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     632:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n     635:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n     639:\t48 89 4d e0          \tmov    %rcx,-0x20(%rbp)\n     63d:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n     641:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     645:\t8b 75 f4             \tmov    -0xc(%rbp),%esi\n     648:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     64c:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     652:\t48 89 c7             \tmov    %rax,%rdi\n     655:\te8 9f fb ff ff       \tcallq  1f9 <ks_getuntil2>\n     65a:\tc9                   \tleaveq \n     65b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ks_getuntil(__int64 a1, int a2, __int64 *a3, _DWORD *a4) {\n  return ks_getuntil2(a1, a2, a3, a4, Number);\n}", "code_t": "int __cdecl ks_getuntil(kstream_t *<span class=\"supfact\">ks</span>,\n                        int <span class=\"supfact\">delimiter</span>,\n                        kstring_t *<span class=\"supfact\">str</span>,\n                        int *<span class=\"supfact\">dret</span>) {\n  return ks_getuntil2(<span class=\"supfact\">ks</span>, <span class=\"supfact\">delimiter</span>,\n                      <span class=\"supfact\">str</span>, <span class=\"supfact\">dret</span>, Number);\n}", "var": [{"name": "a1", "type": "kstream_t *", "pred_name": "ks", "ref_name": "ks", "ref_type": "kstream_t *"}, {"name": "a2", "type": "int", "pred_name": "delimiter", "ref_name": "delimiter", "ref_type": "int"}, {"name": "a3", "type": "kstring_t *", "pred_name": "str", "ref_name": "str", "ref_type": "kstring_t *"}, {"name": "a4", "type": "int *", "pred_name": "dret", "ref_name": "dret", "ref_type": "int *"}], "body_in_train": true}, {"repo_owner": "wlanjie", "repo_name": "MacFFPlay", "path": "wlanjie/MacFFPlay/a9921fee5c4efd790ab67824f1a0bf7a05a04cf9d585da74927caae0ea14dba6", "path_in_repo": "wlanjie/MacFFPlay/ffmpeg/libavcodec/opus_celt.o", "objdump": "0000000000004595 <celt_exp_rotation>:\n    4595:\t48 83 ec 48          \tsub    $0x48,%rsp\n    4599:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    459e:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n    45a2:\t89 54 24 10          \tmov    %edx,0x10(%rsp)\n    45a6:\t89 4c 24 0c          \tmov    %ecx,0xc(%rsp)\n    45aa:\t44 89 44 24 08       \tmov    %r8d,0x8(%rsp)\n    45af:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n    45b6:\t00 \n    45b7:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    45bb:\t01 c0                \tadd    %eax,%eax\n    45bd:\t39 44 24 14          \tcmp    %eax,0x14(%rsp)\n    45c1:\t0f 86 cc 01 00 00    \tjbe    4793 <celt_exp_rotation+0x1fe>\n    45c7:\t83 7c 24 08 00       \tcmpl   $0x0,0x8(%rsp)\n    45cc:\t0f 84 c1 01 00 00    \tje     4793 <celt_exp_rotation+0x1fe>\n    45d2:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    45d6:\t48 85 c0             \ttest   %rax,%rax\n    45d9:\t78 07                \tjs     45e2 <celt_exp_rotation+0x4d>\n    45db:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n    45e0:\teb 15                \tjmp    45f7 <celt_exp_rotation+0x62>\n    45e2:\t48 89 c2             \tmov    %rax,%rdx\n    45e5:\t48 d1 ea             \tshr    %rdx\n    45e8:\t83 e0 01             \tand    $0x1,%eax\n    45eb:\t48 09 c2             \tor     %rax,%rdx\n    45ee:\tf3 48 0f 2a c2       \tcvtsi2ss %rdx,%xmm0\n    45f3:\tf3 0f 58 c0          \taddss  %xmm0,%xmm0\n    45f7:\t8b 54 24 08          \tmov    0x8(%rsp),%edx\n    45fb:\t89 d0                \tmov    %edx,%eax\n    45fd:\tc1 e0 02             \tshl    $0x2,%eax\n    4600:\t01 d0                \tadd    %edx,%eax\n    4602:\tba 14 00 00 00       \tmov    $0x14,%edx\n    4607:\t29 c2                \tsub    %eax,%edx\n    4609:\t89 d0                \tmov    %edx,%eax\n    460b:\t0f af 44 24 0c       \timul   0xc(%rsp),%eax\n    4610:\t89 c2                \tmov    %eax,%edx\n    4612:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    4616:\t01 d0                \tadd    %edx,%eax\n    4618:\t89 c0                \tmov    %eax,%eax\n    461a:\t48 85 c0             \ttest   %rax,%rax\n    461d:\t78 07                \tjs     4626 <celt_exp_rotation+0x91>\n    461f:\tf3 48 0f 2a c8       \tcvtsi2ss %rax,%xmm1\n    4624:\teb 15                \tjmp    463b <celt_exp_rotation+0xa6>\n    4626:\t48 89 c2             \tmov    %rax,%rdx\n    4629:\t48 d1 ea             \tshr    %rdx\n    462c:\t83 e0 01             \tand    $0x1,%eax\n    462f:\t48 09 c2             \tor     %rax,%rdx\n    4632:\tf3 48 0f 2a ca       \tcvtsi2ss %rdx,%xmm1\n    4637:\tf3 0f 58 c9          \taddss  %xmm1,%xmm1\n    463b:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n    463f:\tf3 0f 11 44 24 34    \tmovss  %xmm0,0x34(%rsp)\n    4645:\tf3 0f 5a 4c 24 34    \tcvtss2sd 0x34(%rsp),%xmm1\n    464b:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 4653 <celt_exp_rotation+0xbe>\n    4652:\t00 \n    4653:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n    4657:\tf3 0f 5a 44 24 34    \tcvtss2sd 0x34(%rsp),%xmm0\n    465d:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n    4661:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 4669 <celt_exp_rotation+0xd4>\n    4668:\t00 \n    4669:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    466d:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n    4671:\tf3 0f 11 44 24 30    \tmovss  %xmm0,0x30(%rsp)\n    4677:\tf3 0f 5a 44 24 30    \tcvtss2sd 0x30(%rsp),%xmm0\n    467d:\te8 00 00 00 00       \tcallq  4682 <celt_exp_rotation+0xed>\n    4682:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n    4686:\tf3 0f 11 44 24 2c    \tmovss  %xmm0,0x2c(%rsp)\n    468c:\tf3 0f 5a 44 24 30    \tcvtss2sd 0x30(%rsp),%xmm0\n    4692:\te8 00 00 00 00       \tcallq  4697 <celt_exp_rotation+0x102>\n    4697:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n    469b:\tf3 0f 11 44 24 28    \tmovss  %xmm0,0x28(%rsp)\n    46a1:\t8b 44 24 10          \tmov    0x10(%rsp),%eax\n    46a5:\tc1 e0 03             \tshl    $0x3,%eax\n    46a8:\t39 44 24 14          \tcmp    %eax,0x14(%rsp)\n    46ac:\t72 2f                \tjb     46dd <celt_exp_rotation+0x148>\n    46ae:\tc7 44 24 3c 01 00 00 \tmovl   $0x1,0x3c(%rsp)\n    46b5:\t00 \n    46b6:\teb 05                \tjmp    46bd <celt_exp_rotation+0x128>\n    46b8:\t83 44 24 3c 01       \taddl   $0x1,0x3c(%rsp)\n    46bd:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n    46c1:\t83 c0 01             \tadd    $0x1,%eax\n    46c4:\t0f af 44 24 3c       \timul   0x3c(%rsp),%eax\n    46c9:\t0f af 44 24 10       \timul   0x10(%rsp),%eax\n    46ce:\t8b 54 24 10          \tmov    0x10(%rsp),%edx\n    46d2:\tc1 ea 02             \tshr    $0x2,%edx\n    46d5:\t01 d0                \tadd    %edx,%eax\n    46d7:\t39 44 24 14          \tcmp    %eax,0x14(%rsp)\n    46db:\t77 db                \tja     46b8 <celt_exp_rotation+0x123>\n    46dd:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    46e1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    46e6:\tf7 74 24 10          \tdivl   0x10(%rsp)\n    46ea:\t89 44 24 14          \tmov    %eax,0x14(%rsp)\n    46ee:\tc7 44 24 38 00 00 00 \tmovl   $0x0,0x38(%rsp)\n    46f5:\t00 \n    46f6:\te9 88 00 00 00       \tjmpq   4783 <celt_exp_rotation+0x1ee>\n    46fb:\t83 7c 24 3c 00       \tcmpl   $0x0,0x3c(%rsp)\n    4700:\t74 3c                \tje     473e <celt_exp_rotation+0x1a9>\n    4702:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n    4706:\t0f af 44 24 14       \timul   0x14(%rsp),%eax\n    470b:\t89 c0                \tmov    %eax,%eax\n    470d:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    4714:\t00 \n    4715:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    471a:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n    471e:\tf3 0f 10 44 24 2c    \tmovss  0x2c(%rsp),%xmm0\n    4724:\t8b 4c 24 28          \tmov    0x28(%rsp),%ecx\n    4728:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    472c:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    4730:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n    4733:\t66 0f 6e c1          \tmovd   %ecx,%xmm0\n    4737:\t89 c6                \tmov    %eax,%esi\n    4739:\te8 95 fc ff ff       \tcallq  43d3 <celt_exp_rotation1>\n    473e:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n    4742:\t0f af 44 24 14       \timul   0x14(%rsp),%eax\n    4747:\t89 c0                \tmov    %eax,%eax\n    4749:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    4750:\t00 \n    4751:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    4756:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n    475a:\tf3 0f 10 44 24 28    \tmovss  0x28(%rsp),%xmm0\n    4760:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n    4764:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    4768:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n    476b:\t66 0f 6e c2          \tmovd   %edx,%xmm0\n    476f:\tba 01 00 00 00       \tmov    $0x1,%edx\n    4774:\t89 c6                \tmov    %eax,%esi\n    4776:\t48 89 cf             \tmov    %rcx,%rdi\n    4779:\te8 55 fc ff ff       \tcallq  43d3 <celt_exp_rotation1>\n    477e:\t83 44 24 38 01       \taddl   $0x1,0x38(%rsp)\n    4783:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n    4787:\t39 44 24 10          \tcmp    %eax,0x10(%rsp)\n    478b:\t0f 87 6a ff ff ff    \tja     46fb <celt_exp_rotation+0x166>\n    4791:\teb 01                \tjmp    4794 <celt_exp_rotation+0x1ff>\n    4793:\t90                   \tnop\n    4794:\t48 83 c4 48          \tadd    $0x48,%rsp\n    4798:\tc3                   \tretq   ", "code_s": "__int64 __fastcall celt_exp_rotation(__int64 a1, unsigned int a2,\n                                     unsigned int a3, int a4, int a5) {\n  __int64 result;\n  double v6;\n  float v7;\n  float v8;\n  float v9;\n  int v11;\n  float v12;\n  float v13;\n  unsigned int j;\n  int i;\n  i = Number;\n  result = (unsigned int)(Number * a4);\n  if (a2 > (unsigned int)result && a5) {\n    v6 = (float)((float)(int)a2 /\n                 (float)(int)(a4 * (Number - Number * a5) + a2));\n    v7 = v6 * (v6 * Number) / Number;\n    v13 = v7;\n    v8 = cos(v7);\n    v12 = v8;\n    v9 = sin(v13);\n    if (a2 >= Number * a3) {\n      for (i = Number; a2 > (a3 >> Number) + a3 * i * (i + Number); ++i)\n        ;\n    }\n    v11 = a2 / a3;\n    for (j = Number;; ++j) {\n      result = j;\n      if (a3 <= j)\n        break;\n      if (i)\n        celt_exp_rotation1((float *)(Number L * v11 * j + a1), v11, i, v9, v12);\n      celt_exp_rotation1((float *)(Number L * v11 * j + a1), v11, Number, v12,\n                         v9);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl celt_exp_rotation(float *<span class=\"supfact\">X</span>,\n                               unsigned int <span class=\"supfact\">len</span>,\n                               unsigned int <span class=\"supfact\">stride</span>,\n                               unsigned int <span class=\"supfact\">K</span>,\n                               CeltSpread <span class=\"supfact\">spread</span>) {\n  float <span class=\"supfact\">v5</span>;\n  float v6;\n  float v7;\n  float v8;\n  unsigned int <span class=\"supfact\">lena</span>;\n  float <span class=\"supfact\">c</span>;\n  float <span class=\"supfact\">theta</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">stride2</span>;\n  <span class=\"supfact\">stride2</span> = Number;\n  if (<span class=\"supfact\">len</span> > Number * <span class=\"supfact\">K</span> &&\n      <span class=\"supfact\">spread</span>) {\n    <span class=\"supfact\">v5</span> =\n        (float)(int)(<span class=\"supfact\">K</span> *\n                         (Number - Number * <span class=\"supfact\">spread</span>) +\n                     <span class=\"supfact\">len</span>);\n    v6 = (float)((float)(int)<span class=\"supfact\">len</span> / <span class=\"supfact\">v5</span>) *\n         ((float)((float)(int)<span class=\"supfact\">len</span> / <span class=\"supfact\">v5</span>) *\n          Number) /\n         Number;\n    <span class=\"supfact\">theta</span> = v6;\n    v7 = cos(v6);\n    <span class=\"supfact\">c</span> = v7;\n    v8 = sin(<span class=\"supfact\">theta</span>);\n    if (<span class=\"supfact\">len</span> >= Number * <span class=\"supfact\">stride</span>) {\n      for (<span class=\"supfact\">stride2</span> = Number;\n           <span class=\"supfact\">len</span> > (<span class=\"supfact\">stride</span> >> Number) +\n                                     <span class=\"supfact\">stride</span> *\n                                         <span class=\"supfact\">stride2</span> *\n                                         (<span class=\"supfact\">stride2</span> + Number);\n           ++<span class=\"supfact\">stride2</span>)\n        ;\n    }\n    <span class=\"supfact\">lena</span> = <span class=\"supfact\">len</span> / <span class=\"supfact\">stride</span>;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">stride</span> > <span class=\"supfact\">i</span>;\n         ++<span class=\"supfact\">i</span>) {\n      if (<span class=\"supfact\">stride2</span>)\n        celt_exp_rotation1(\n            &<span class=\"supfact\">X</span>[<span class=\"supfact\">lena</span> * <span class=\"supfact\">i</span>],\n            <span class=\"supfact\">lena</span>, <span class=\"supfact\">stride2</span>, v8,\n            <span class=\"supfact\">c</span>);\n      celt_exp_rotation1(\n          &<span class=\"supfact\">X</span>[<span class=\"supfact\">lena</span> * <span class=\"supfact\">i</span>],\n          <span class=\"supfact\">lena</span>, Number, <span class=\"supfact\">c</span>, v8);\n    }\n  }\n}", "var": [{"name": "a1", "type": "float *", "pred_name": "X", "ref_name": "X", "ref_type": "float *"}, {"name": "a2", "type": "unsigned int", "pred_name": "len", "ref_name": "len", "ref_type": "unsigned int"}, {"name": "a3", "type": "unsigned int", "pred_name": "stride", "ref_name": "stride", "ref_type": "unsigned int"}, {"name": "a4", "type": "unsigned int", "pred_name": "K", "ref_name": "K", "ref_type": "unsigned int"}, {"name": "a5", "type": "CeltSpread", "pred_name": "spread", "ref_name": "spread", "ref_type": "CeltSpread"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "double", "pred_name": "v5", "ref_name": "v5", "ref_type": "float"}, {"name": "v11", "type": "unsigned int", "pred_name": "lena", "ref_name": "lena", "ref_type": "unsigned int"}, {"name": "v12", "type": "float", "pred_name": "c", "ref_name": "c", "ref_type": "float"}, {"name": "v13", "type": "float", "pred_name": "theta", "ref_name": "theta", "ref_type": "float"}, {"name": "j", "type": "unsigned int", "pred_name": "i", "ref_name": "i", "ref_type": "unsigned int"}, {"name": "i", "type": "int", "pred_name": "stride2", "ref_name": "stride2", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "irl", "repo_name": "direwolf", "path": "irl/direwolf/da69ed739db6f4577641a740c1f46041fa4bc6cf338af527129769e8d8443b12", "path_in_repo": "irl/direwolf//decode_aprs", "objdump": "0000000000411d4e <ax25_safe_print>:\n  411d4e:\t55                   \tpush   %rbp\n  411d4f:\t48 89 e5             \tmov    %rsp,%rbp\n  411d52:\t48 81 ec e0 0b 00 00 \tsub    $0xbe0,%rsp\n  411d59:\t48 89 bd 28 f4 ff ff \tmov    %rdi,-0xbd8(%rbp)\n  411d60:\t89 b5 24 f4 ff ff    \tmov    %esi,-0xbdc(%rbp)\n  411d66:\t89 95 20 f4 ff ff    \tmov    %edx,-0xbe0(%rbp)\n  411d6c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  411d73:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  411d76:\t48 98                \tcltq   \n  411d78:\tc6 84 05 30 f4 ff ff \tmovb   $0x0,-0xbd0(%rbp,%rax,1)\n  411d7f:\t00 \n  411d80:\t83 bd 24 f4 ff ff 00 \tcmpl   $0x0,-0xbdc(%rbp)\n  411d87:\t79 15                \tjns    411d9e <ax25_safe_print+0x50>\n  411d89:\t48 8b 85 28 f4 ff ff \tmov    -0xbd8(%rbp),%rax\n  411d90:\t48 89 c7             \tmov    %rax,%rdi\n  411d93:\te8 48 03 ff ff       \tcallq  4020e0 <strlen@plt>\n  411d98:\t89 85 24 f4 ff ff    \tmov    %eax,-0xbdc(%rbp)\n  411d9e:\t81 bd 24 f4 ff ff f4 \tcmpl   $0x1f4,-0xbdc(%rbp)\n  411da5:\t01 00 00 \n  411da8:\t0f 8e 15 01 00 00    \tjle    411ec3 <ax25_safe_print+0x175>\n  411dae:\tc7 85 24 f4 ff ff f4 \tmovl   $0x1f4,-0xbdc(%rbp)\n  411db5:\t01 00 00 \n  411db8:\te9 06 01 00 00       \tjmpq   411ec3 <ax25_safe_print+0x175>\n  411dbd:\t48 8b 85 28 f4 ff ff \tmov    -0xbd8(%rbp),%rax\n  411dc4:\t0f b6 00             \tmovzbl (%rax),%eax\n  411dc7:\t0f b6 c0             \tmovzbl %al,%eax\n  411dca:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  411dcd:\t83 7d f8 20          \tcmpl   $0x20,-0x8(%rbp)\n  411dd1:\t75 58                \tjne    411e2b <ax25_safe_print+0xdd>\n  411dd3:\t83 bd 24 f4 ff ff 01 \tcmpl   $0x1,-0xbdc(%rbp)\n  411dda:\t74 12                \tje     411dee <ax25_safe_print+0xa0>\n  411ddc:\t48 8b 85 28 f4 ff ff \tmov    -0xbd8(%rbp),%rax\n  411de3:\t48 83 c0 01          \tadd    $0x1,%rax\n  411de7:\t0f b6 00             \tmovzbl (%rax),%eax\n  411dea:\t84 c0                \ttest   %al,%al\n  411dec:\t75 3d                \tjne    411e2b <ax25_safe_print+0xdd>\n  411dee:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  411df1:\t48 98                \tcltq   \n  411df3:\tba b9 0b 00 00       \tmov    $0xbb9,%edx\n  411df8:\t48 89 d6             \tmov    %rdx,%rsi\n  411dfb:\t48 29 c6             \tsub    %rax,%rsi\n  411dfe:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  411e01:\t48 98                \tcltq   \n  411e03:\t48 8d 95 30 f4 ff ff \tlea    -0xbd0(%rbp),%rdx\n  411e0a:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n  411e0e:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  411e11:\t89 c1                \tmov    %eax,%ecx\n  411e13:\tba 32 ea 41 00       \tmov    $0x41ea32,%edx\n  411e18:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  411e1d:\te8 3e 06 ff ff       \tcallq  402460 <snprintf@plt>\n  411e22:\t83 45 fc 06          \taddl   $0x6,-0x4(%rbp)\n  411e26:\te9 89 00 00 00       \tjmpq   411eb4 <ax25_safe_print+0x166>\n  411e2b:\t83 7d f8 1f          \tcmpl   $0x1f,-0x8(%rbp)\n  411e2f:\t7e 27                \tjle    411e58 <ax25_safe_print+0x10a>\n  411e31:\t83 7d f8 7f          \tcmpl   $0x7f,-0x8(%rbp)\n  411e35:\t74 21                \tje     411e58 <ax25_safe_print+0x10a>\n  411e37:\t81 7d f8 fe 00 00 00 \tcmpl   $0xfe,-0x8(%rbp)\n  411e3e:\t74 18                \tje     411e58 <ax25_safe_print+0x10a>\n  411e40:\t81 7d f8 ff 00 00 00 \tcmpl   $0xff,-0x8(%rbp)\n  411e47:\t74 0f                \tje     411e58 <ax25_safe_print+0x10a>\n  411e49:\t83 bd 20 f4 ff ff 00 \tcmpl   $0x0,-0xbe0(%rbp)\n  411e50:\t74 40                \tje     411e92 <ax25_safe_print+0x144>\n  411e52:\t83 7d f8 7f          \tcmpl   $0x7f,-0x8(%rbp)\n  411e56:\t7e 3a                \tjle    411e92 <ax25_safe_print+0x144>\n  411e58:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  411e5b:\t48 98                \tcltq   \n  411e5d:\tba b9 0b 00 00       \tmov    $0xbb9,%edx\n  411e62:\t48 89 d6             \tmov    %rdx,%rsi\n  411e65:\t48 29 c6             \tsub    %rax,%rsi\n  411e68:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  411e6b:\t48 98                \tcltq   \n  411e6d:\t48 8d 95 30 f4 ff ff \tlea    -0xbd0(%rbp),%rdx\n  411e74:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n  411e78:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  411e7b:\t89 c1                \tmov    %eax,%ecx\n  411e7d:\tba 32 ea 41 00       \tmov    $0x41ea32,%edx\n  411e82:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  411e87:\te8 d4 05 ff ff       \tcallq  402460 <snprintf@plt>\n  411e8c:\t83 45 fc 06          \taddl   $0x6,-0x4(%rbp)\n  411e90:\teb 22                \tjmp    411eb4 <ax25_safe_print+0x166>\n  411e92:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  411e95:\t8d 50 01             \tlea    0x1(%rax),%edx\n  411e98:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  411e9b:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  411e9e:\t48 98                \tcltq   \n  411ea0:\t88 94 05 30 f4 ff ff \tmov    %dl,-0xbd0(%rbp,%rax,1)\n  411ea7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  411eaa:\t48 98                \tcltq   \n  411eac:\tc6 84 05 30 f4 ff ff \tmovb   $0x0,-0xbd0(%rbp,%rax,1)\n  411eb3:\t00 \n  411eb4:\t48 83 85 28 f4 ff ff \taddq   $0x1,-0xbd8(%rbp)\n  411ebb:\t01 \n  411ebc:\t83 ad 24 f4 ff ff 01 \tsubl   $0x1,-0xbdc(%rbp)\n  411ec3:\t83 bd 24 f4 ff ff 00 \tcmpl   $0x0,-0xbdc(%rbp)\n  411eca:\t7e 12                \tjle    411ede <ax25_safe_print+0x190>\n  411ecc:\t48 8b 85 28 f4 ff ff \tmov    -0xbd8(%rbp),%rax\n  411ed3:\t0f b6 00             \tmovzbl (%rax),%eax\n  411ed6:\t84 c0                \ttest   %al,%al\n  411ed8:\t0f 85 df fe ff ff    \tjne    411dbd <ax25_safe_print+0x6f>\n  411ede:\t48 8d 85 30 f4 ff ff \tlea    -0xbd0(%rbp),%rax\n  411ee5:\t48 89 c6             \tmov    %rax,%rsi\n  411ee8:\tbf 3b ea 41 00       \tmov    $0x41ea3b,%edi\n  411eed:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  411ef2:\te8 04 02 00 00       \tcallq  4120fb <dw_printf>\n  411ef7:\t90                   \tnop\n  411ef8:\tc9                   \tleaveq \n  411ef9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ax25_safe_print(const char *a1, int a2, int a3, int a4,\n                                   int a5, int a6) {\n  int v6;\n  int v8;\n  int v9;\n  char *s;\n  char v11[Number];\n  int v12;\n  int v13;\n  s = (char *)a1;\n  v9 = a2;\n  v8 = a3;\n  v13 = Number;\n  v11[Number] = Number;\n  if (a2 < Number)\n    v9 = strlen(a1);\n  if (v9 > Number)\n    v9 = Number;\n  while (v9 > Number && *s) {\n    v12 = (unsigned __int8)*s;\n    if (v12 == Number && (v9 == Number || !s[Number]) || v12 <= Number ||\n        v12 == Number || v12 == Number || v12 == Number || v8 && v12 > Number) {\n      snprintf(&v11[v13], Number L - v13, String, (unsigned int)v12);\n      v13 += Number;\n    } else {\n      v6 = v13++;\n      a3 = v12;\n      v11[v6] = v12;\n      v11[v13] = Number;\n    }\n    ++s;\n    --v9;\n  }\n  return dw_printf((unsigned int)String, (unsigned int)v11, a3, a4, a5, a6);\n}", "code_t": "void __cdecl ax25_safe_print(char *<span class=\"supfact\">pstr</span>,\n                             int <span class=\"supfact\">len</span>,\n                             int <span class=\"supfact\">ascii_only</span>) {\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">lena</span>;\n  char *<span class=\"supfact\">pstra</span>;\n  char <span class=\"supfact\">safe_str</span>[Number];\n  int <span class=\"supfact\">ch_0</span>;\n  int <span class=\"supfact\">safe_len</span>;\n  <span class=\"supfact\">pstra</span> = <span class=\"supfact\">pstr</span>;\n  <span class=\"supfact\">lena</span> = <span class=\"supfact\">len</span>;\n  <span class=\"supfact\">safe_len</span> = Number;\n  <span class=\"supfact\">safe_str</span>[Number] = Number;\n  if (<span class=\"supfact\">len</span> < Number)\n    <span class=\"supfact\">lena</span> = strlen(<span class=\"supfact\">pstr</span>);\n  if (<span class=\"supfact\">lena</span> > Number)\n    <span class=\"supfact\">lena</span> = Number;\n  while (<span class=\"supfact\">lena</span> > Number && *<span class=\"supfact\">pstra</span>) {\n    <span class=\"supfact\">ch_0</span> = (unsigned __int8)*<span class=\"supfact\">pstra</span>;\n    if (<span class=\"supfact\">ch_0</span> == Number && (<span class=\"supfact\">lena</span> == Number ||\n                                           !<span class=\"supfact\">pstra</span>[Number]) ||\n        <span class=\"supfact\">ch_0</span> <= Number || <span class=\"supfact\">ch_0</span> == Number ||\n        <span class=\"supfact\">ch_0</span> == Number || <span class=\"supfact\">ch_0</span> == Number ||\n        <span class=\"supfact\">ascii_only</span> && <span class=\"supfact\">ch_0</span> > Number) {\n      snprintf(&<span class=\"supfact\">safe_str</span>[<span class=\"supfact\">safe_len</span>],\n               Number L - <span class=\"supfact\">safe_len</span>, String,\n               (unsigned int)<span class=\"supfact\">ch_0</span>);\n      <span class=\"supfact\">safe_len</span> += Number;\n    } else {\n      <span class=\"supfact\">v3</span> = <span class=\"supfact\">safe_len</span>++;\n      <span class=\"supfact\">safe_str</span>[<span class=\"supfact\">v3</span>] = <span class=\"supfact\">ch_0</span>;\n      <span class=\"supfact\">safe_str</span>[<span class=\"supfact\">safe_len</span>] = Number;\n    }\n    ++<span class=\"supfact\">pstra</span>;\n    --<span class=\"supfact\">lena</span>;\n  }\n  dw_printf(String, <span class=\"supfact\">safe_str</span>);\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "buf", "ref_name": "pstr", "ref_type": "char *"}, {"name": "a2", "type": "int", "pred_name": "buflen", "ref_name": "len", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "buflena", "ref_name": "ascii_only", "ref_type": "int"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "int", "pred_name": "v3", "ref_name": "v3", "ref_type": "int"}, {"name": "v8", "type": "int", "pred_name": "v4", "ref_name": "", "ref_type": "disappear"}, {"name": "v9", "type": "int", "pred_name": "lena", "ref_name": "lena", "ref_type": "int"}, {"name": "s", "type": "char *", "pred_name": "bufa", "ref_name": "pstra", "ref_type": "char *"}, {"name": "v11", "type": "char[8192]", "pred_name": "str", "ref_name": "safe_str", "ref_type": "char[3001]"}, {"name": "v12", "type": "int", "pred_name": "len", "ref_name": "ch_0", "ref_type": "int"}, {"name": "v13", "type": "int", "pred_name": "i", "ref_name": "safe_len", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/c673d24279897e0ed327c3625ff045a41a9a5867c152ea7fe06e8edce4293947", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Foundation/testsuite/obj/Linux/x86_64/release_shared/HexBinaryTest.o", "objdump": "0000000000000000 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:\n   0:\t48 b9 ff ff ff ff ff \tmovabs $0xfffffffffffffff,%rcx\n   7:\tff ff 0f \n   a:\t41 57                \tpush   %r15\n   c:\t41 56                \tpush   %r14\n   e:\t41 55                \tpush   %r13\n  10:\t41 54                \tpush   %r12\n  12:\t55                   \tpush   %rbp\n  13:\t53                   \tpush   %rbx\n  14:\t48 83 ec 18          \tsub    $0x18,%rsp\n  18:\t4c 8b 67 08          \tmov    0x8(%rdi),%r12\n  1c:\t4c 8b 07             \tmov    (%rdi),%r8\n  1f:\t4c 89 e0             \tmov    %r12,%rax\n  22:\t4c 29 c0             \tsub    %r8,%rax\n  25:\t48 c1 f8 03          \tsar    $0x3,%rax\n  29:\t48 39 c8             \tcmp    %rcx,%rax\n  2c:\t0f 84 f9 00 00 00    \tje     12b <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x12b>\n  32:\t49 89 d7             \tmov    %rdx,%r15\n  35:\t48 89 f2             \tmov    %rsi,%rdx\n  38:\t48 89 fb             \tmov    %rdi,%rbx\n  3b:\t49 89 f5             \tmov    %rsi,%r13\n  3e:\t4c 29 c2             \tsub    %r8,%rdx\n  41:\t48 85 c0             \ttest   %rax,%rax\n  44:\t0f 84 d6 00 00 00    \tje     120 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x120>\n  4a:\t49 be f8 ff ff ff ff \tmovabs $0x7ffffffffffffff8,%r14\n  51:\tff ff 7f \n  54:\t48 8d 34 00          \tlea    (%rax,%rax,1),%rsi\n  58:\t48 39 f0             \tcmp    %rsi,%rax\n  5b:\t0f 86 8f 00 00 00    \tjbe    f0 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf0>\n  61:\t4c 89 f7             \tmov    %r14,%rdi\n  64:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n  69:\t4c 89 04 24          \tmov    %r8,(%rsp)\n  6d:\te8 00 00 00 00       \tcallq  72 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>\n  72:\t4c 8b 04 24          \tmov    (%rsp),%r8\n  76:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n  7b:\t48 89 c5             \tmov    %rax,%rbp\n  7e:\t49 01 c6             \tadd    %rax,%r14\n  81:\t49 8b 07             \tmov    (%r15),%rax\n  84:\t4c 8d 4c 15 08       \tlea    0x8(%rbp,%rdx,1),%r9\n  89:\t4d 29 ec             \tsub    %r13,%r12\n  8c:\t4f 8d 3c 21          \tlea    (%r9,%r12,1),%r15\n  90:\t48 89 44 15 00       \tmov    %rax,0x0(%rbp,%rdx,1)\n  95:\t48 85 d2             \ttest   %rdx,%rdx\n  98:\t7f 26                \tjg     c0 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xc0>\n  9a:\t4d 85 e4             \ttest   %r12,%r12\n  9d:\t7f 61                \tjg     100 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x100>\n  9f:\t4d 85 c0             \ttest   %r8,%r8\n  a2:\t75 3e                \tjne    e2 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xe2>\n  a4:\t48 89 2b             \tmov    %rbp,(%rbx)\n  a7:\t4c 89 7b 08          \tmov    %r15,0x8(%rbx)\n  ab:\t4c 89 73 10          \tmov    %r14,0x10(%rbx)\n  af:\t48 83 c4 18          \tadd    $0x18,%rsp\n  b3:\t5b                   \tpop    %rbx\n  b4:\t5d                   \tpop    %rbp\n  b5:\t41 5c                \tpop    %r12\n  b7:\t41 5d                \tpop    %r13\n  b9:\t41 5e                \tpop    %r14\n  bb:\t41 5f                \tpop    %r15\n  bd:\tc3                   \tretq   \n  be:\t66 90                \txchg   %ax,%ax\n  c0:\t4c 89 c6             \tmov    %r8,%rsi\n  c3:\t48 89 ef             \tmov    %rbp,%rdi\n  c6:\t4c 89 4c 24 08       \tmov    %r9,0x8(%rsp)\n  cb:\t4c 89 04 24          \tmov    %r8,(%rsp)\n  cf:\te8 00 00 00 00       \tcallq  d4 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xd4>\n  d4:\t4d 85 e4             \ttest   %r12,%r12\n  d7:\t4c 8b 04 24          \tmov    (%rsp),%r8\n  db:\t4c 8b 4c 24 08       \tmov    0x8(%rsp),%r9\n  e0:\t7f 1e                \tjg     100 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x100>\n  e2:\t4c 89 c7             \tmov    %r8,%rdi\n  e5:\te8 00 00 00 00       \tcallq  ea <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xea>\n  ea:\teb b8                \tjmp    a4 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xa4>\n  ec:\t0f 1f 40 00          \tnopl   0x0(%rax)\n  f0:\t48 85 f6             \ttest   %rsi,%rsi\n  f3:\t75 42                \tjne    137 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x137>\n  f5:\t45 31 f6             \txor    %r14d,%r14d\n  f8:\t31 ed                \txor    %ebp,%ebp\n  fa:\teb 85                \tjmp    81 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x81>\n  fc:\t0f 1f 40 00          \tnopl   0x0(%rax)\n 100:\t4c 89 e2             \tmov    %r12,%rdx\n 103:\t4c 89 ee             \tmov    %r13,%rsi\n 106:\t4c 89 cf             \tmov    %r9,%rdi\n 109:\t4c 89 04 24          \tmov    %r8,(%rsp)\n 10d:\te8 00 00 00 00       \tcallq  112 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x112>\n 112:\t4c 8b 04 24          \tmov    (%rsp),%r8\n 116:\t4d 85 c0             \ttest   %r8,%r8\n 119:\t74 89                \tje     a4 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xa4>\n 11b:\teb c5                \tjmp    e2 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xe2>\n 11d:\t0f 1f 00             \tnopl   (%rax)\n 120:\t41 be 08 00 00 00    \tmov    $0x8,%r14d\n 126:\te9 36 ff ff ff       \tjmpq   61 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x61>\n 12b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 132 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x132>\n 132:\te8 00 00 00 00       \tcallq  137 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x137>\n 137:\t48 39 ce             \tcmp    %rcx,%rsi\n 13a:\t48 0f 46 ce          \tcmovbe %rsi,%rcx\n 13e:\t49 89 ce             \tmov    %rcx,%r14\n 141:\t49 c1 e6 03          \tshl    $0x3,%r14\n 145:\te9 17 ff ff ff       \tjmpq   61 <_ZNSt6vectorIPN7CppUnit4TestESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x61>", "code_s": "void __fastcall std vector<CppUnit Test *>\n_M_realloc_insert<CppUnit Test *const &>(__int64 a1, _BYTE *a2, __int64 *a3) {\n  __int64 v3;\n  __int64 v4;\n  _BYTE *v5;\n  unsigned __int64 v6;\n  signed __int64 v9;\n  unsigned __int64 v10;\n  unsigned __int64 v11;\n  char *v12;\n  char *v13;\n  char *v14;\n  __int64 v15;\n  char *v16;\n  signed __int64 v17;\n  char *v18;\n  _BYTE *src;\n  _BYTE *srca;\n  _BYTE *srcb;\n  size_t n;\n  size_t na;\n  v3 = Number;\n  v4 = *(_QWORD *)(a1 + Number);\n  v5 = *(_BYTE **)a1;\n  v6 = (v4 - *(_QWORD *)a1) >> Number;\n  if (v6 == Number)\n    std __throw_length_error(String);\n  v9 = a2 - v5;\n  if (!v6) {\n    v10 = Number L;\n    goto LABEL_4;\n  }\n  v10 = Number;\n  v11 = Number * v6;\n  if (v6 > Number * v6) {\n  LABEL_4:\n    n = v9;\n    src = *(_BYTE **)a1;\n    v12 = (char *)operator new(v10);\n    v5 = src;\n    v9 = n;\n    v13 = v12;\n    v14 = &v12[v10];\n    goto LABEL_5;\n  }\n  if (v11) {\n    if (v11 <= Number)\n      v3 = Number * v6;\n    v10 = Number * v3;\n    goto LABEL_4;\n  }\n  v14 = Number L;\n  v13 = Number L;\nLABEL_5:\n  v15 = *a3;\n  v16 = &v13[v9 + Number];\n  v17 = v4 - (_QWORD)a2;\n  v18 = &v16[v17];\n  *(_QWORD *)&v13[v9] = v15;\n  if (v9 > Number) {\n    na = (size_t)&v13[v9 + Number];\n    srca = v5;\n    memmove(v13, v5, v9);\n    v5 = srca;\n    v16 = (char *)na;\n    if (v17 <= Number)\n      goto LABEL_10;\n  LABEL_13:\n    srcb = v5;\n    memcpy(v16, a2, v17);\n    v5 = srcb;\n    if (!srcb)\n      goto LABEL_8;\n    goto LABEL_10;\n  }\n  if (v17 > Number)\n    goto LABEL_13;\n  if (v5)\n  LABEL_10:\n    operator delete(v5);\nLABEL_8:\n  *(_QWORD *)a1 = v13;\n  *(_QWORD *)(a1 + Number) = v18;\n  *(_QWORD *)(a1 + Number) = v14;\n}", "code_t": "void __fastcall std vector<CppUnit Test *>\n_M_realloc_insert<CppUnit Test *const &>(__int64 <span class=\"supfact\">a1</span>,\n                                         _BYTE *<span class=\"supfact\">a2</span>,\n                                         __int64 *<span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 v4;\n  _BYTE *<span class=\"supfact\">v5</span>;\n  unsigned __int64 v6;\n  signed __int64 v9;\n  unsigned __int64 v10;\n  unsigned __int64 v11;\n  char *v12;\n  char *<span class=\"supfact\">v13</span>;\n  char *v14;\n  __int64 v15;\n  char *<span class=\"supfact\">v16</span>;\n  signed __int64 v17;\n  char *<span class=\"supfact\">v18</span>;\n  _BYTE *src;\n  _BYTE *srca;\n  _BYTE *srcb;\n  size_t n;\n  size_t na;\n  <span class=\"supfact\">v3</span> = Number;\n  v4 = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v5</span> = *(_BYTE **)<span class=\"supfact\">a1</span>;\n  v6 = (v4 - *(_QWORD *)<span class=\"supfact\">a1</span>) >> Number;\n  if (v6 == Number)\n    std __throw_length_error(String);\n  v9 = <span class=\"supfact\">a2</span> - <span class=\"supfact\">v5</span>;\n  if (!v6) {\n    v10 = Number L;\n    goto LABEL_4;\n  }\n  v10 = Number;\n  v11 = Number * v6;\n  if (v6 > Number * v6) {\n  LABEL_4:\n    n = v9;\n    src = *(_BYTE **)<span class=\"supfact\">a1</span>;\n    v12 = (char *)operator new(v10);\n    <span class=\"supfact\">v5</span> = src;\n    v9 = n;\n    <span class=\"supfact\">v13</span> = v12;\n    v14 = &v12[v10];\n    goto LABEL_5;\n  }\n  if (v11) {\n    if (v11 <= Number)\n      <span class=\"supfact\">v3</span> = Number * v6;\n    v10 = Number * <span class=\"supfact\">v3</span>;\n    goto LABEL_4;\n  }\n  v14 = Number L;\n  <span class=\"supfact\">v13</span> = Number L;\nLABEL_5:\n  v15 = *<span class=\"supfact\">a3</span>;\n  <span class=\"supfact\">v16</span> = &<span class=\"supfact\">v13</span>[v9 + Number];\n  v17 = v4 - (_QWORD)<span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v18</span> = &<span class=\"supfact\">v16</span>[v17];\n  *(_QWORD *)&<span class=\"supfact\">v13</span>[v9] = v15;\n  if (v9 > Number) {\n    na = (size_t)&<span class=\"supfact\">v13</span>[v9 + Number];\n    srca = <span class=\"supfact\">v5</span>;\n    memmove(<span class=\"supfact\">v13</span>, <span class=\"supfact\">v5</span>, v9);\n    <span class=\"supfact\">v5</span> = srca;\n    <span class=\"supfact\">v16</span> = (char *)na;\n    if (v17 <= Number)\n      goto LABEL_10;\n  LABEL_13:\n    srcb = <span class=\"supfact\">v5</span>;\n    memcpy(<span class=\"supfact\">v16</span>, <span class=\"supfact\">a2</span>, v17);\n    <span class=\"supfact\">v5</span> = srcb;\n    if (!srcb)\n      goto LABEL_8;\n    goto LABEL_10;\n  }\n  if (v17 > Number)\n    goto LABEL_13;\n  if (<span class=\"supfact\">v5</span>)\n  LABEL_10:\n    operator delete(<span class=\"supfact\">v5</span>);\nLABEL_8:\n  *(_QWORD *)<span class=\"supfact\">a1</span> = <span class=\"supfact\">v13</span>;\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v18</span>;\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = v14;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "_BYTE *", "pred_name": "a2", "ref_name": "a2", "ref_type": "_BYTE *"}, {"name": "a3", "type": "__int64 *", "pred_name": "a3", "ref_name": "a3", "ref_type": "__int64 *"}, {"name": "v3", "type": "__int64", "pred_name": "v3", "ref_name": "v3", "ref_type": "__int64"}, {"name": "v5", "type": "_BYTE *", "pred_name": "v5", "ref_name": "v5", "ref_type": "_BYTE *"}, {"name": "v13", "type": "char *", "pred_name": "v13", "ref_name": "v13", "ref_type": "char *"}, {"name": "v16", "type": "char *", "pred_name": "v16", "ref_name": "v16", "ref_type": "char *"}, {"name": "v18", "type": "char *", "pred_name": "v18", "ref_name": "v18", "ref_type": "char *"}], "body_in_train": true}, {"repo_owner": "linbercsu", "repo_name": "FFmpegMAC", "path": "linbercsu/FFmpegMAC/649db27e1a3d4693083fadc7f77921dea0c46978820dfcbc5f52a7fd5d7afa45", "path_in_repo": "linbercsu/FFmpegMAC/ffmpegSource/2.5.3/libavcodec/lagarith.o", "objdump": "00000000000003d3 <lag_get_rac>:\n     3d3:\t48 83 ec 18          \tsub    $0x18,%rsp\n     3d7:\t48 89 3c 24          \tmov    %rdi,(%rsp)\n     3db:\t48 8b 04 24          \tmov    (%rsp),%rax\n     3df:\t48 89 c7             \tmov    %rax,%rdi\n     3e2:\te8 27 ff ff ff       \tcallq  30e <lag_rac_refill>\n     3e7:\t48 8b 04 24          \tmov    (%rsp),%rax\n     3eb:\t8b 50 0c             \tmov    0xc(%rax),%edx\n     3ee:\t48 8b 04 24          \tmov    (%rsp),%rax\n     3f2:\t8b 40 10             \tmov    0x10(%rax),%eax\n     3f5:\t89 c1                \tmov    %eax,%ecx\n     3f7:\td3 ea                \tshr    %cl,%edx\n     3f9:\t89 d0                \tmov    %edx,%eax\n     3fb:\t89 44 24 10          \tmov    %eax,0x10(%rsp)\n     3ff:\t48 8b 04 24          \tmov    (%rsp),%rax\n     403:\t8b 50 08             \tmov    0x8(%rax),%edx\n     406:\t48 8b 04 24          \tmov    (%rsp),%rax\n     40a:\t8b 80 2c 04 00 00    \tmov    0x42c(%rax),%eax\n     410:\t0f af 44 24 10       \timul   0x10(%rsp),%eax\n     415:\t39 c2                \tcmp    %eax,%edx\n     417:\t0f 83 c2 00 00 00    \tjae    4df <lag_get_rac+0x10c>\n     41d:\t48 8b 04 24          \tmov    (%rsp),%rax\n     421:\t8b 50 08             \tmov    0x8(%rax),%edx\n     424:\t48 8b 04 24          \tmov    (%rsp),%rax\n     428:\t8b 40 34             \tmov    0x34(%rax),%eax\n     42b:\t0f af 44 24 10       \timul   0x10(%rsp),%eax\n     430:\t39 c2                \tcmp    %eax,%edx\n     432:\t73 0a                \tjae    43e <lag_get_rac+0x6b>\n     434:\tc7 44 24 14 00 00 00 \tmovl   $0x0,0x14(%rsp)\n     43b:\t00 \n     43c:\teb 66                \tjmp    4a4 <lag_get_rac+0xd1>\n     43e:\t48 8b 04 24          \tmov    (%rsp),%rax\n     442:\t8b 40 08             \tmov    0x8(%rax),%eax\n     445:\t48 8b 14 24          \tmov    (%rsp),%rdx\n     449:\t8b 52 14             \tmov    0x14(%rdx),%edx\n     44c:\t8b 74 24 10          \tmov    0x10(%rsp),%esi\n     450:\t89 d1                \tmov    %edx,%ecx\n     452:\td3 e6                \tshl    %cl,%esi\n     454:\t89 f7                \tmov    %esi,%edi\n     456:\tba 00 00 00 00       \tmov    $0x0,%edx\n     45b:\tf7 f7                \tdiv    %edi\n     45d:\t89 44 24 0c          \tmov    %eax,0xc(%rsp)\n     461:\t48 8b 14 24          \tmov    (%rsp),%rdx\n     465:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n     469:\t0f b6 84 02 38 04 00 \tmovzbl 0x438(%rdx,%rax,1),%eax\n     470:\t00 \n     471:\t0f b6 c0             \tmovzbl %al,%eax\n     474:\t89 44 24 14          \tmov    %eax,0x14(%rsp)\n     478:\teb 05                \tjmp    47f <lag_get_rac+0xac>\n     47a:\t83 44 24 14 01       \taddl   $0x1,0x14(%rsp)\n     47f:\t48 8b 04 24          \tmov    (%rsp),%rax\n     483:\t8b 50 08             \tmov    0x8(%rax),%edx\n     486:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n     48a:\t8d 48 01             \tlea    0x1(%rax),%ecx\n     48d:\t48 8b 04 24          \tmov    (%rsp),%rax\n     491:\t48 63 c9             \tmovslq %ecx,%rcx\n     494:\t48 83 c1 0c          \tadd    $0xc,%rcx\n     498:\t8b 04 88             \tmov    (%rax,%rcx,4),%eax\n     49b:\t0f af 44 24 10       \timul   0x10(%rsp),%eax\n     4a0:\t39 c2                \tcmp    %eax,%edx\n     4a2:\t73 d6                \tjae    47a <lag_get_rac+0xa7>\n     4a4:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n     4a8:\t8d 50 01             \tlea    0x1(%rax),%edx\n     4ab:\t48 8b 04 24          \tmov    (%rsp),%rax\n     4af:\t48 63 d2             \tmovslq %edx,%rdx\n     4b2:\t48 83 c2 0c          \tadd    $0xc,%rdx\n     4b6:\t8b 14 90             \tmov    (%rax,%rdx,4),%edx\n     4b9:\t48 8b 04 24          \tmov    (%rsp),%rax\n     4bd:\t8b 4c 24 14          \tmov    0x14(%rsp),%ecx\n     4c1:\t48 63 c9             \tmovslq %ecx,%rcx\n     4c4:\t48 83 c1 0c          \tadd    $0xc,%rcx\n     4c8:\t8b 04 88             \tmov    (%rax,%rcx,4),%eax\n     4cb:\t29 c2                \tsub    %eax,%edx\n     4cd:\t89 d0                \tmov    %edx,%eax\n     4cf:\t0f af 44 24 10       \timul   0x10(%rsp),%eax\n     4d4:\t89 c2                \tmov    %eax,%edx\n     4d6:\t48 8b 04 24          \tmov    (%rsp),%rax\n     4da:\t89 50 0c             \tmov    %edx,0xc(%rax)\n     4dd:\teb 27                \tjmp    506 <lag_get_rac+0x133>\n     4df:\tc7 44 24 14 ff 00 00 \tmovl   $0xff,0x14(%rsp)\n     4e6:\t00 \n     4e7:\t48 8b 04 24          \tmov    (%rsp),%rax\n     4eb:\t8b 50 0c             \tmov    0xc(%rax),%edx\n     4ee:\t48 8b 04 24          \tmov    (%rsp),%rax\n     4f2:\t8b 80 2c 04 00 00    \tmov    0x42c(%rax),%eax\n     4f8:\t0f af 44 24 10       \timul   0x10(%rsp),%eax\n     4fd:\t29 c2                \tsub    %eax,%edx\n     4ff:\t48 8b 04 24          \tmov    (%rsp),%rax\n     503:\t89 50 0c             \tmov    %edx,0xc(%rax)\n     506:\t48 8b 04 24          \tmov    (%rsp),%rax\n     50a:\t8b 40 0c             \tmov    0xc(%rax),%eax\n     50d:\t85 c0                \ttest   %eax,%eax\n     50f:\t75 0b                \tjne    51c <lag_get_rac+0x149>\n     511:\t48 8b 04 24          \tmov    (%rsp),%rax\n     515:\tc7 40 0c 80 00 00 00 \tmovl   $0x80,0xc(%rax)\n     51c:\t48 8b 04 24          \tmov    (%rsp),%rax\n     520:\t8b 50 08             \tmov    0x8(%rax),%edx\n     523:\t48 8b 04 24          \tmov    (%rsp),%rax\n     527:\t8b 4c 24 14          \tmov    0x14(%rsp),%ecx\n     52b:\t48 63 c9             \tmovslq %ecx,%rcx\n     52e:\t48 83 c1 0c          \tadd    $0xc,%rcx\n     532:\t8b 04 88             \tmov    (%rax,%rcx,4),%eax\n     535:\t0f af 44 24 10       \timul   0x10(%rsp),%eax\n     53a:\t29 c2                \tsub    %eax,%edx\n     53c:\t48 8b 04 24          \tmov    (%rsp),%rax\n     540:\t89 50 08             \tmov    %edx,0x8(%rax)\n     543:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n     547:\t48 83 c4 18          \tadd    $0x18,%rsp\n     54b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall lag_get_rac(_DWORD *a1) {\n  int v3;\n  int i;\n  lag_rac_refill((__int64)a1);\n  v3 = a1[Number] >> a1[Number];\n  if (a1[Number] >= (unsigned int)(v3 * a1[Number])) {\n    i = Number;\n    a1[Number] -= v3 * a1[Number];\n  } else {\n    if (a1[Number] >= (unsigned int)(v3 * a1[Number])) {\n      for (i = *((unsigned __int8 *)a1 +\n                 a1[Number] / (unsigned int)(v3 << a1[Number]) + Number);\n           a1[Number] >= (unsigned int)(v3 * a1[i + Number]); ++i) {\n        ;\n      }\n    } else {\n      i = Number;\n    }\n    a1[Number] = v3 * (a1[i + Number] - a1[i + Number]);\n  }\n  if (!a1[Number])\n    a1[Number] = Number;\n  a1[Number] -= v3 * a1[i + Number];\n  return (unsigned int)i;\n}", "code_t": "uint8_t __cdecl lag_get_rac(lag_rac_0 *<span class=\"supfact\">l</span>) {\n  unsigned int <span class=\"supfact\">range_scaled</span>;\n  int <span class=\"supfact\">val</span>;\n  lag_rac_refill(<span class=\"supfact\">l</span>);\n  <span class=\"supfact\">range_scaled</span> =\n      <span class=\"supfact\">l</span>->range >> <span class=\"supfact\">l</span>->scale;\n  if (<span class=\"supfact\">l</span>->low >=\n      <span class=\"supfact\">range_scaled</span> * <span class=\"supfact\">l</span>->prob[Number]) {\n    <span class=\"supfact\">val</span> = Number;\n    <span class=\"supfact\">l</span>->range -=\n        <span class=\"supfact\">range_scaled</span> * <span class=\"supfact\">l</span>->prob[Number];\n  } else {\n    if (<span class=\"supfact\">l</span>->low >=\n        <span class=\"supfact\">range_scaled</span> * <span class=\"supfact\">l</span>->prob[Number]) {\n      for (<span class=\"supfact\">val</span> =\n               <span class=\"supfact\">l</span>\n                   ->range_hash[<span class=\"supfact\">l</span>->low /\n                                (<span class=\"supfact\">range_scaled</span>\n                                 << <span class=\"supfact\">l</span>->hash_shift)];\n           <span class=\"supfact\">l</span>->low >=\n           <span class=\"supfact\">range_scaled</span> *\n               <span class=\"supfact\">l</span>->prob[<span class=\"supfact\">val</span> + Number];\n           ++<span class=\"supfact\">val</span>)\n        ;\n    } else {\n      <span class=\"supfact\">val</span> = Number;\n    }\n    <span class=\"supfact\">l</span>->range =\n        <span class=\"supfact\">range_scaled</span> *\n        (<span class=\"supfact\">l</span>->prob[<span class=\"supfact\">val</span> + Number] -\n         <span class=\"supfact\">l</span>->prob[<span class=\"supfact\">val</span>]);\n  }\n  if (!<span class=\"supfact\">l</span>->range)\n    <span class=\"supfact\">l</span>->range = Number;\n  <span class=\"supfact\">l</span>->low -= <span class=\"supfact\">range_scaled</span> *\n                            <span class=\"supfact\">l</span>->prob[<span class=\"supfact\">val</span>];\n  return <span class=\"supfact\">val</span>;\n}", "var": [{"name": "a1", "type": "lag_rac_0 *", "pred_name": "l", "ref_name": "l", "ref_type": "lag_rac_0 *"}, {"name": "v3", "type": "unsigned int", "pred_name": "range_scaled", "ref_name": "range_scaled", "ref_type": "unsigned int"}, {"name": "i", "type": "int", "pred_name": "val", "ref_name": "val", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/0089fea9471557fa47b18f6091713fa221ec03b6834bf83767373912ddce59b5", "path_in_repo": "sslab-gatech/janus/core/Image.o", "objdump": "0000000000000000 <_ZNSt6vectorIP12BufferObjectSaIS1_EE9push_backEOS1_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  10:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  14:\t48 89 c7             \tmov    %rax,%rdi\n  17:\te8 00 00 00 00       \tcallq  1c <_ZNSt6vectorIP12BufferObjectSaIS1_EE9push_backEOS1_+0x1c>\n  1c:\t48 89 c2             \tmov    %rax,%rdx\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\t48 89 d6             \tmov    %rdx,%rsi\n  26:\t48 89 c7             \tmov    %rax,%rdi\n  29:\te8 00 00 00 00       \tcallq  2e <_ZNSt6vectorIP12BufferObjectSaIS1_EE9push_backEOS1_+0x2e>\n  2e:\t90                   \tnop\n  2f:\tc9                   \tleaveq \n  30:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<BufferObject *> push_back(__int64 a1,\n                                                        __int64 a2) {\n  __int64 v2;\n  v2 = std move<BufferObject *&>(a2);\n  return std vector<BufferObject *> emplace_back<BufferObject *>(a1, v2);\n}", "code_t": "void __cdecl std vector<BufferObject *>\npush_back(std vector<BufferObject *> *const <span class=\"supfact\">this</span>,\n          std vector<BufferObject *> value_type *<span class=\"supfact\">__x</span>) {\n  BufferObject **v2;\n  v2 = std move<BufferObject *&>(<span class=\"supfact\">__x</span>);\n  std vector<BufferObject *> emplace_back<BufferObject *>(<span class=\"supfact\">this</span>,\n                                                          v2, v2);\n}", "var": [{"name": "a1", "type": "std::vector<BufferObject*> *", "pred_name": "this", "ref_name": "this", "ref_type": "std::vector<BufferObject*> *"}, {"name": "a2", "type": "__unk__", "pred_name": "__x", "ref_name": "__x", "ref_type": "std::vector<BufferObject*>::value_type *"}, {"name": "v2", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "hephaex", "repo_name": "a10c", "path": "hephaex/a10c/01077586dafe91cbd1e7e0ad6b64c9bbc721749d28564059071a77fcb076658a", "path_in_repo": "hephaex/a10c/tools/perf/util/sort.o", "objdump": "0000000000000f5f <hist_entry__parent_snprintf>:\n     f5f:\t55                   \tpush   %rbp\n     f60:\t48 89 e5             \tmov    %rsp,%rbp\n     f63:\t48 83 ec 30          \tsub    $0x30,%rsp\n     f67:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     f6b:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     f6f:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     f73:\t89 4d d4             \tmov    %ecx,-0x2c(%rbp)\n     f76:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     f7d:\t00 00 \n     f7f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     f83:\t31 c0                \txor    %eax,%eax\n     f85:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f89:\t48 8b 80 e0 00 00 00 \tmov    0xe0(%rax),%rax\n     f90:\t48 85 c0             \ttest   %rax,%rax\n     f93:\t74 11                \tje     fa6 <hist_entry__parent_snprintf+0x47>\n     f95:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f99:\t48 8b 80 e0 00 00 00 \tmov    0xe0(%rax),%rax\n     fa0:\t48 8d 48 2c          \tlea    0x2c(%rax),%rcx\n     fa4:\teb 05                \tjmp    fab <hist_entry__parent_snprintf+0x4c>\n     fa6:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     fab:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n     fae:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n     fb2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     fb6:\t49 89 c8             \tmov    %rcx,%r8\n     fb9:\t89 d1                \tmov    %edx,%ecx\n     fbb:\tba 00 00 00 00       \tmov    $0x0,%edx\n     fc0:\t48 89 c7             \tmov    %rax,%rdi\n     fc3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     fc8:\te8 a3 f1 ff ff       \tcallq  170 <repsep_snprintf>\n     fcd:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n     fd1:\t64 48 33 3c 25 28 00 \txor    %fs:0x28,%rdi\n     fd8:\t00 00 \n     fda:\t74 05                \tje     fe1 <hist_entry__parent_snprintf+0x82>\n     fdc:\te8 00 00 00 00       \tcallq  fe1 <hist_entry__parent_snprintf+0x82>\n     fe1:\tc9                   \tleaveq \n     fe2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hist_entry__parent_snprintf(__int64 a1, char *a2, size_t a3,\n                                               unsigned int a4, __int64 a5,\n                                               __int64 a6) {\n  const char *v6;\n  if (*(_QWORD *)(a1 + Number))\n    v6 = (const char *)(*(_QWORD *)(a1 + Number) + Number L);\n  else\n    v6 = String;\n  return repsep_snprintf(a2, a3, String, a4, (__int64)v6, a6);\n}", "code_t": "int __cdecl hist_entry__parent_snprintf(hist_entry *<span class=\"supfact\">self</span>,\n                                        char *<span class=\"supfact\">bf</span>,\n                                        size_t <span class=\"supfact\">size</span>,\n                                        unsigned int <span class=\"supfact\">width</span>) {\n  char *v4;\n  if (<span class=\"supfact\">self</span>->parent)\n    v4 = <span class=\"supfact\">self</span>->parent->name;\n  else\n    v4 = String;\n  return repsep_snprintf(<span class=\"supfact\">bf</span>, <span class=\"supfact\">size</span>, String,\n                         <span class=\"supfact\">width</span>, v4);\n}", "var": [{"name": "a1", "type": "hist_entry *", "pred_name": "self", "ref_name": "self", "ref_type": "hist_entry *"}, {"name": "a2", "type": "char *", "pred_name": "bf", "ref_name": "bf", "ref_type": "char *"}, {"name": "a3", "type": "size_t", "pred_name": "size", "ref_name": "size", "ref_type": "size_t"}, {"name": "a4", "type": "unsigned int", "pred_name": "width", "ref_name": "width", "ref_type": "unsigned int"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "awaterma", "repo_name": "flite-bin", "path": "awaterma/flite-bin/d4340175b1368e272e742cf139f3895ec05a351de8daf209ef3e52ef17dbeafe", "path_in_repo": "awaterma/flite-bin/flite-1.4-release/testsuite/record_in_noise", "objdump": "0000000000405e91 <cst_rateconv_in>:\n  405e91:\t55                   \tpush   %rbp\n  405e92:\t48 89 e5             \tmov    %rsp,%rbp\n  405e95:\t48 83 ec 20          \tsub    $0x20,%rsp\n  405e99:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  405e9d:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  405ea1:\t89 55 ec             \tmov    %edx,-0x14(%rbp)\n  405ea4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405ea8:\t8b 50 38             \tmov    0x38(%rax),%edx\n  405eab:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405eaf:\t8b 40 18             \tmov    0x18(%rax),%eax\n  405eb2:\t29 c2                \tsub    %eax,%edx\n  405eb4:\t89 d0                \tmov    %edx,%eax\n  405eb6:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  405eb9:\t7e 15                \tjle    405ed0 <cst_rateconv_in+0x3f>\n  405ebb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405ebf:\t8b 50 38             \tmov    0x38(%rax),%edx\n  405ec2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405ec6:\t8b 40 18             \tmov    0x18(%rax),%eax\n  405ec9:\t29 c2                \tsub    %eax,%edx\n  405ecb:\t89 d0                \tmov    %edx,%eax\n  405ecd:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  405ed0:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  405ed4:\t7e 55                \tjle    405f2b <cst_rateconv_in+0x9a>\n  405ed6:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  405ed9:\t48 98                \tcltq   \n  405edb:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n  405edf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405ee3:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  405ee7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405eeb:\t8b 40 18             \tmov    0x18(%rax),%eax\n  405eee:\t48 98                \tcltq   \n  405ef0:\t48 c1 e0 02          \tshl    $0x2,%rax\n  405ef4:\t48 01 c1             \tadd    %rax,%rcx\n  405ef7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  405efb:\t48 89 c6             \tmov    %rax,%rsi\n  405efe:\t48 89 cf             \tmov    %rcx,%rdi\n  405f01:\te8 9a b2 ff ff       \tcallq  4011a0 <memcpy@plt>\n  405f06:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405f0a:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n  405f0e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405f12:\t8b 40 18             \tmov    0x18(%rax),%eax\n  405f15:\t48 98                \tcltq   \n  405f17:\t48 c1 e0 02          \tshl    $0x2,%rax\n  405f1b:\t48 01 c2             \tadd    %rax,%rdx\n  405f1e:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  405f21:\t89 c6                \tmov    %eax,%esi\n  405f23:\t48 89 d7             \tmov    %rdx,%rdi\n  405f26:\te8 8c fe ff ff       \tcallq  405db7 <sample_to_int>\n  405f2b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405f2f:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  405f32:\t89 50 40             \tmov    %edx,0x40(%rax)\n  405f35:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  405f38:\tc9                   \tleaveq \n  405f39:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cst_rateconv_in(__int64 a1, const void *a2, int a3) {\n  int v4;\n  v4 = a3;\n  if (a3 > *(_DWORD *)(a1 + Number) - *(_DWORD *)(a1 + Number))\n    v4 = *(_DWORD *)(a1 + Number) - *(_DWORD *)(a1 + Number);\n  if (v4 > Number) {\n    memcpy(\n        (void *)(Number L * *(int *)(a1 + Number) + *(_QWORD *)(a1 + Number)),\n        a2, Number L * v4);\n    sample_to_int((__int16 *)(Number L * *(int *)(a1 + Number) +\n                              *(_QWORD *)(a1 + Number)),\n                  v4);\n  }\n  *(_DWORD *)(a1 + Number) = v4;\n  return (unsigned int)v4;\n}", "code_t": "int __cdecl cst_rateconv_in(cst_rateconv *<span class=\"supfact\">filt</span>,\n                            const __int16 *<span class=\"supfact\">inptr</span>,\n                            int <span class=\"supfact\">max</span>) {\n  int <span class=\"supfact\">maxa</span>;\n  <span class=\"supfact\">maxa</span> = <span class=\"supfact\">max</span>;\n  if (<span class=\"supfact\">max</span> >\n      <span class=\"supfact\">filt</span>->insize - <span class=\"supfact\">filt</span>->lag)\n    <span class=\"supfact\">maxa</span> =\n        <span class=\"supfact\">filt</span>->insize - <span class=\"supfact\">filt</span>->lag;\n  if (<span class=\"supfact\">maxa</span> > Number) {\n    memcpy(&<span class=\"supfact\">filt</span>->sin[<span class=\"supfact\">filt</span>->lag],\n           <span class=\"supfact\">inptr</span>, Number L * <span class=\"supfact\">maxa</span>);\n    sample_to_int(\n        (__int16 *)&<span class=\"supfact\">filt</span>->sin[<span class=\"supfact\">filt</span>->lag],\n        <span class=\"supfact\">maxa</span>);\n  }\n  <span class=\"supfact\">filt</span>->incount = <span class=\"supfact\">maxa</span>;\n  return <span class=\"supfact\">maxa</span>;\n}", "var": [{"name": "a1", "type": "__int16 *", "pred_name": "a1", "ref_name": "filt", "ref_type": "cst_rateconv *"}, {"name": "a2", "type": "__int16 *", "pred_name": "a2", "ref_name": "inptr", "ref_type": "const __int16 *"}, {"name": "a3", "type": "int", "pred_name": "a3", "ref_name": "max", "ref_type": "int"}, {"name": "v4", "type": "int", "pred_name": "v4", "ref_name": "maxa", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "daveti", "repo_name": "prov-kernel", "path": "daveti/prov-kernel/908bf8601bfa6832cf295e8070b76203e100fecfa007eacb2c6f05a8afe12d28", "path_in_repo": "daveti/prov-kernel/tools/testing/selftests/mqueue/mq_perf_tests", "objdump": "", "code_s": "void free(void *ptr) { free(ptr); }", "code_t": "void free(void *<span class=\"supfact\">ptr</span>) { free(<span class=\"supfact\">ptr</span>); }", "var": [{"name": "ptr", "type": "void *", "pred_name": "ptr", "ref_name": "ptr", "ref_type": "void *"}], "body_in_train": true}, {"repo_owner": "vgmrips", "repo_name": "vgmtools", "path": "vgmrips/vgmtools/65b4ea09c978212c03aae34b6728cd44ecd127981d2947652f9541a5dc2d9cb2", "path_in_repo": "vgmrips/vgmtools//vgm_smp1", "objdump": "", "code_s": "void *memmove(void *dest, const void *src, size_t n) {\n  return memmove(dest, src, n);\n}", "code_t": "void *memmove(void *<span class=\"supfact\">dest</span>, const void *<span class=\"supfact\">src</span>,\n              size_t <span class=\"supfact\">n</span>) {\n  return memmove(<span class=\"supfact\">dest</span>, <span class=\"supfact\">src</span>, <span class=\"supfact\">n</span>);\n}", "var": [{"name": "dest", "type": "void *", "pred_name": "dest", "ref_name": "dest", "ref_type": "void *"}, {"name": "src", "type": "const void *", "pred_name": "src", "ref_name": "src", "ref_type": "const void *"}, {"name": "n", "type": "size_t", "pred_name": "n", "ref_name": "n", "ref_type": "size_t"}], "body_in_train": true}, {"repo_owner": "xhjcehust", "repo_name": "csdnBlogSpider", "path": "xhjcehust/csdnBlogSpider/32aa22bb13fab9bbf0d6c9ee8e86e0a2bb1285078f433bafa08a3e059b8e2b67", "path_in_repo": "xhjcehust/csdnBlogSpider//csdnBlogSpider", "objdump": "", "code_s": "int fcntl(int fd, int cmd, ...) { return fcntl(fd, cmd); }", "code_t": "int fcntl(int <span class=\"supfact\">fd</span>, int <span class=\"supfact\">cmd</span>, ...) {\n  return fcntl(<span class=\"supfact\">fd</span>, <span class=\"supfact\">cmd</span>);\n}", "var": [{"name": "fd", "type": "int", "pred_name": "fd", "ref_name": "fd", "ref_type": "int"}, {"name": "cmd", "type": "int", "pred_name": "cmd", "ref_name": "cmd", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "lalithsuresh", "repo_name": "QEMU-Device-State-Visualisations", "path": "lalithsuresh/QEMU-Device-State-Visualisations/efc6dff76e21f77264ae729ee0c19c802d80462b04cad29c83fdb7a8fea32b0c", "path_in_repo": "lalithsuresh/QEMU-Device-State-Visualisations//ppc64-softmmu/op_helper.o", "objdump": "000000000000f25d <efscmplt>:\n    f25d:\t55                   \tpush   %rbp\n    f25e:\t48 89 e5             \tmov    %rsp,%rbp\n    f261:\t48 83 ec 20          \tsub    $0x20,%rsp\n    f265:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n    f268:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n    f26b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    f272:\t00 00 \n    f274:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    f278:\t31 c0                \txor    %eax,%eax\n    f27a:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n    f27d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    f280:\t89 d6                \tmov    %edx,%esi\n    f282:\t89 c7                \tmov    %eax,%edi\n    f284:\te8 9c fe ff ff       \tcallq  f125 <efststlt>\n    f289:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    f28d:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    f294:\t00 00 \n    f296:\t74 05                \tje     f29d <efscmplt+0x40>\n    f298:\te8 00 00 00 00       \tcallq  f29d <efscmplt+0x40>\n    f29d:\tc9                   \tleaveq \n    f29e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall efscmplt(unsigned int a1, unsigned int a2) {\n  return efststlt(a1, a2);\n}", "code_t": "uint32_t __cdecl efscmplt(uint32_t <span class=\"supfact\">op1</span>,\n                          uint32_t <span class=\"supfact\">op2</span>) {\n  return efststlt(<span class=\"supfact\">op1</span>, <span class=\"supfact\">op2</span>);\n}", "var": [{"name": "a1", "type": "uint32_t", "pred_name": "op1", "ref_name": "op1", "ref_type": "uint32_t"}, {"name": "a2", "type": "uint32_t", "pred_name": "op2", "ref_name": "op2", "ref_type": "uint32_t"}], "body_in_train": true}, {"repo_owner": "islanderz", "repo_name": "ARDRoneSDK", "path": "islanderz/ARDRoneSDK/7855c3ca514d139573ece4d0c77614e2f101580fe32776edcced49eb2f43c708", "path_in_repo": "islanderz/ARDRoneSDK/ARDroneLib/FFMPEG/ffmpeg/libavcodec/dsputil.o", "objdump": "0000000000026907 <avg_h264_qpel4_v_lowpass_8>:\n   26907:\t48 89 7c 24 a8       \tmov    %rdi,-0x58(%rsp)\n   2690c:\t48 89 74 24 a0       \tmov    %rsi,-0x60(%rsp)\n   26911:\t89 54 24 9c          \tmov    %edx,-0x64(%rsp)\n   26915:\t89 4c 24 98          \tmov    %ecx,-0x68(%rsp)\n   26919:\tc7 44 24 e4 04 00 00 \tmovl   $0x4,-0x1c(%rsp)\n   26920:\t00 \n   26921:\t48 c7 44 24 d8 00 00 \tmovq   $0x0,-0x28(%rsp)\n   26928:\t00 00 \n   2692a:\t48 8b 44 24 a8       \tmov    -0x58(%rsp),%rax\n   2692f:\t48 89 44 24 f0       \tmov    %rax,-0x10(%rsp)\n   26934:\t48 8b 44 24 a0       \tmov    -0x60(%rsp),%rax\n   26939:\t48 89 44 24 e8       \tmov    %rax,-0x18(%rsp)\n   2693e:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n   26945:\t00 \n   26946:\te9 03 03 00 00       \tjmpq   26c4e <avg_h264_qpel4_v_lowpass_8+0x347>\n   2694b:\t8b 54 24 98          \tmov    -0x68(%rsp),%edx\n   2694f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   26954:\t29 d0                \tsub    %edx,%eax\n   26956:\t01 c0                \tadd    %eax,%eax\n   26958:\t48 63 d0             \tmovslq %eax,%rdx\n   2695b:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   26960:\t48 01 d0             \tadd    %rdx,%rax\n   26963:\t0f b6 00             \tmovzbl (%rax),%eax\n   26966:\t0f b6 c0             \tmovzbl %al,%eax\n   26969:\t89 44 24 d4          \tmov    %eax,-0x2c(%rsp)\n   2696d:\t8b 44 24 98          \tmov    -0x68(%rsp),%eax\n   26971:\tf7 d8                \tneg    %eax\n   26973:\t48 63 d0             \tmovslq %eax,%rdx\n   26976:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   2697b:\t48 01 d0             \tadd    %rdx,%rax\n   2697e:\t0f b6 00             \tmovzbl (%rax),%eax\n   26981:\t0f b6 c0             \tmovzbl %al,%eax\n   26984:\t89 44 24 d0          \tmov    %eax,-0x30(%rsp)\n   26988:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   2698d:\t0f b6 00             \tmovzbl (%rax),%eax\n   26990:\t0f b6 c0             \tmovzbl %al,%eax\n   26993:\t89 44 24 cc          \tmov    %eax,-0x34(%rsp)\n   26997:\t8b 44 24 98          \tmov    -0x68(%rsp),%eax\n   2699b:\t48 63 d0             \tmovslq %eax,%rdx\n   2699e:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   269a3:\t48 01 d0             \tadd    %rdx,%rax\n   269a6:\t0f b6 00             \tmovzbl (%rax),%eax\n   269a9:\t0f b6 c0             \tmovzbl %al,%eax\n   269ac:\t89 44 24 c8          \tmov    %eax,-0x38(%rsp)\n   269b0:\t8b 44 24 98          \tmov    -0x68(%rsp),%eax\n   269b4:\t01 c0                \tadd    %eax,%eax\n   269b6:\t48 63 d0             \tmovslq %eax,%rdx\n   269b9:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   269be:\t48 01 d0             \tadd    %rdx,%rax\n   269c1:\t0f b6 00             \tmovzbl (%rax),%eax\n   269c4:\t0f b6 c0             \tmovzbl %al,%eax\n   269c7:\t89 44 24 c4          \tmov    %eax,-0x3c(%rsp)\n   269cb:\t8b 54 24 98          \tmov    -0x68(%rsp),%edx\n   269cf:\t89 d0                \tmov    %edx,%eax\n   269d1:\t01 c0                \tadd    %eax,%eax\n   269d3:\t01 d0                \tadd    %edx,%eax\n   269d5:\t48 63 d0             \tmovslq %eax,%rdx\n   269d8:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   269dd:\t48 01 d0             \tadd    %rdx,%rax\n   269e0:\t0f b6 00             \tmovzbl (%rax),%eax\n   269e3:\t0f b6 c0             \tmovzbl %al,%eax\n   269e6:\t89 44 24 c0          \tmov    %eax,-0x40(%rsp)\n   269ea:\t8b 44 24 98          \tmov    -0x68(%rsp),%eax\n   269ee:\tc1 e0 02             \tshl    $0x2,%eax\n   269f1:\t48 63 d0             \tmovslq %eax,%rdx\n   269f4:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   269f9:\t48 01 d0             \tadd    %rdx,%rax\n   269fc:\t0f b6 00             \tmovzbl (%rax),%eax\n   269ff:\t0f b6 c0             \tmovzbl %al,%eax\n   26a02:\t89 44 24 bc          \tmov    %eax,-0x44(%rsp)\n   26a06:\t8b 54 24 98          \tmov    -0x68(%rsp),%edx\n   26a0a:\t89 d0                \tmov    %edx,%eax\n   26a0c:\tc1 e0 02             \tshl    $0x2,%eax\n   26a0f:\t01 d0                \tadd    %edx,%eax\n   26a11:\t48 63 d0             \tmovslq %eax,%rdx\n   26a14:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   26a19:\t48 01 d0             \tadd    %rdx,%rax\n   26a1c:\t0f b6 00             \tmovzbl (%rax),%eax\n   26a1f:\t0f b6 c0             \tmovzbl %al,%eax\n   26a22:\t89 44 24 b8          \tmov    %eax,-0x48(%rsp)\n   26a26:\t8b 54 24 98          \tmov    -0x68(%rsp),%edx\n   26a2a:\t89 d0                \tmov    %edx,%eax\n   26a2c:\t01 c0                \tadd    %eax,%eax\n   26a2e:\t01 d0                \tadd    %edx,%eax\n   26a30:\t01 c0                \tadd    %eax,%eax\n   26a32:\t48 63 d0             \tmovslq %eax,%rdx\n   26a35:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   26a3a:\t48 01 d0             \tadd    %rdx,%rax\n   26a3d:\t0f b6 00             \tmovzbl (%rax),%eax\n   26a40:\t0f b6 c0             \tmovzbl %al,%eax\n   26a43:\t89 44 24 b4          \tmov    %eax,-0x4c(%rsp)\n   26a47:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   26a4c:\t0f b6 00             \tmovzbl (%rax),%eax\n   26a4f:\t0f b6 c8             \tmovzbl %al,%ecx\n   26a52:\t8b 54 24 cc          \tmov    -0x34(%rsp),%edx\n   26a56:\t8b 44 24 c8          \tmov    -0x38(%rsp),%eax\n   26a5a:\t01 c2                \tadd    %eax,%edx\n   26a5c:\t89 d0                \tmov    %edx,%eax\n   26a5e:\tc1 e0 02             \tshl    $0x2,%eax\n   26a61:\t01 d0                \tadd    %edx,%eax\n   26a63:\tc1 e0 02             \tshl    $0x2,%eax\n   26a66:\t89 c6                \tmov    %eax,%esi\n   26a68:\t8b 54 24 d0          \tmov    -0x30(%rsp),%edx\n   26a6c:\t8b 44 24 c4          \tmov    -0x3c(%rsp),%eax\n   26a70:\t01 c2                \tadd    %eax,%edx\n   26a72:\t89 d0                \tmov    %edx,%eax\n   26a74:\tc1 e0 02             \tshl    $0x2,%eax\n   26a77:\t01 d0                \tadd    %edx,%eax\n   26a79:\tf7 d8                \tneg    %eax\n   26a7b:\t01 c6                \tadd    %eax,%esi\n   26a7d:\t8b 54 24 d4          \tmov    -0x2c(%rsp),%edx\n   26a81:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n   26a85:\t01 d0                \tadd    %edx,%eax\n   26a87:\t01 f0                \tadd    %esi,%eax\n   26a89:\t83 c0 10             \tadd    $0x10,%eax\n   26a8c:\tc1 f8 05             \tsar    $0x5,%eax\n   26a8f:\t48 63 d0             \tmovslq %eax,%rdx\n   26a92:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n   26a97:\t48 01 d0             \tadd    %rdx,%rax\n   26a9a:\t0f b6 00             \tmovzbl (%rax),%eax\n   26a9d:\t0f b6 c0             \tmovzbl %al,%eax\n   26aa0:\t01 c8                \tadd    %ecx,%eax\n   26aa2:\t83 c0 01             \tadd    $0x1,%eax\n   26aa5:\td1 f8                \tsar    %eax\n   26aa7:\t89 c2                \tmov    %eax,%edx\n   26aa9:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   26aae:\t88 10                \tmov    %dl,(%rax)\n   26ab0:\t8b 44 24 9c          \tmov    -0x64(%rsp),%eax\n   26ab4:\t48 63 d0             \tmovslq %eax,%rdx\n   26ab7:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   26abc:\t48 01 d0             \tadd    %rdx,%rax\n   26abf:\t0f b6 00             \tmovzbl (%rax),%eax\n   26ac2:\t0f b6 c8             \tmovzbl %al,%ecx\n   26ac5:\t8b 54 24 c8          \tmov    -0x38(%rsp),%edx\n   26ac9:\t8b 44 24 c4          \tmov    -0x3c(%rsp),%eax\n   26acd:\t01 c2                \tadd    %eax,%edx\n   26acf:\t89 d0                \tmov    %edx,%eax\n   26ad1:\tc1 e0 02             \tshl    $0x2,%eax\n   26ad4:\t01 d0                \tadd    %edx,%eax\n   26ad6:\tc1 e0 02             \tshl    $0x2,%eax\n   26ad9:\t89 c6                \tmov    %eax,%esi\n   26adb:\t8b 54 24 cc          \tmov    -0x34(%rsp),%edx\n   26adf:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n   26ae3:\t01 c2                \tadd    %eax,%edx\n   26ae5:\t89 d0                \tmov    %edx,%eax\n   26ae7:\tc1 e0 02             \tshl    $0x2,%eax\n   26aea:\t01 d0                \tadd    %edx,%eax\n   26aec:\tf7 d8                \tneg    %eax\n   26aee:\t01 c6                \tadd    %eax,%esi\n   26af0:\t8b 54 24 d0          \tmov    -0x30(%rsp),%edx\n   26af4:\t8b 44 24 bc          \tmov    -0x44(%rsp),%eax\n   26af8:\t01 d0                \tadd    %edx,%eax\n   26afa:\t01 f0                \tadd    %esi,%eax\n   26afc:\t83 c0 10             \tadd    $0x10,%eax\n   26aff:\tc1 f8 05             \tsar    $0x5,%eax\n   26b02:\t48 63 d0             \tmovslq %eax,%rdx\n   26b05:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n   26b0a:\t48 01 d0             \tadd    %rdx,%rax\n   26b0d:\t0f b6 00             \tmovzbl (%rax),%eax\n   26b10:\t0f b6 c0             \tmovzbl %al,%eax\n   26b13:\t01 c8                \tadd    %ecx,%eax\n   26b15:\t83 c0 01             \tadd    $0x1,%eax\n   26b18:\td1 f8                \tsar    %eax\n   26b1a:\t89 c1                \tmov    %eax,%ecx\n   26b1c:\t8b 44 24 9c          \tmov    -0x64(%rsp),%eax\n   26b20:\t48 63 d0             \tmovslq %eax,%rdx\n   26b23:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   26b28:\t48 01 d0             \tadd    %rdx,%rax\n   26b2b:\t89 ca                \tmov    %ecx,%edx\n   26b2d:\t88 10                \tmov    %dl,(%rax)\n   26b2f:\t8b 44 24 9c          \tmov    -0x64(%rsp),%eax\n   26b33:\t01 c0                \tadd    %eax,%eax\n   26b35:\t48 63 d0             \tmovslq %eax,%rdx\n   26b38:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   26b3d:\t48 01 d0             \tadd    %rdx,%rax\n   26b40:\t0f b6 00             \tmovzbl (%rax),%eax\n   26b43:\t0f b6 c8             \tmovzbl %al,%ecx\n   26b46:\t8b 54 24 c4          \tmov    -0x3c(%rsp),%edx\n   26b4a:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n   26b4e:\t01 c2                \tadd    %eax,%edx\n   26b50:\t89 d0                \tmov    %edx,%eax\n   26b52:\tc1 e0 02             \tshl    $0x2,%eax\n   26b55:\t01 d0                \tadd    %edx,%eax\n   26b57:\tc1 e0 02             \tshl    $0x2,%eax\n   26b5a:\t89 c6                \tmov    %eax,%esi\n   26b5c:\t8b 54 24 c8          \tmov    -0x38(%rsp),%edx\n   26b60:\t8b 44 24 bc          \tmov    -0x44(%rsp),%eax\n   26b64:\t01 c2                \tadd    %eax,%edx\n   26b66:\t89 d0                \tmov    %edx,%eax\n   26b68:\tc1 e0 02             \tshl    $0x2,%eax\n   26b6b:\t01 d0                \tadd    %edx,%eax\n   26b6d:\tf7 d8                \tneg    %eax\n   26b6f:\t01 c6                \tadd    %eax,%esi\n   26b71:\t8b 54 24 cc          \tmov    -0x34(%rsp),%edx\n   26b75:\t8b 44 24 b8          \tmov    -0x48(%rsp),%eax\n   26b79:\t01 d0                \tadd    %edx,%eax\n   26b7b:\t01 f0                \tadd    %esi,%eax\n   26b7d:\t83 c0 10             \tadd    $0x10,%eax\n   26b80:\tc1 f8 05             \tsar    $0x5,%eax\n   26b83:\t48 63 d0             \tmovslq %eax,%rdx\n   26b86:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n   26b8b:\t48 01 d0             \tadd    %rdx,%rax\n   26b8e:\t0f b6 00             \tmovzbl (%rax),%eax\n   26b91:\t0f b6 c0             \tmovzbl %al,%eax\n   26b94:\t01 c8                \tadd    %ecx,%eax\n   26b96:\t83 c0 01             \tadd    $0x1,%eax\n   26b99:\td1 f8                \tsar    %eax\n   26b9b:\t89 c1                \tmov    %eax,%ecx\n   26b9d:\t8b 44 24 9c          \tmov    -0x64(%rsp),%eax\n   26ba1:\t01 c0                \tadd    %eax,%eax\n   26ba3:\t48 63 d0             \tmovslq %eax,%rdx\n   26ba6:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   26bab:\t48 01 d0             \tadd    %rdx,%rax\n   26bae:\t89 ca                \tmov    %ecx,%edx\n   26bb0:\t88 10                \tmov    %dl,(%rax)\n   26bb2:\t8b 54 24 9c          \tmov    -0x64(%rsp),%edx\n   26bb6:\t89 d0                \tmov    %edx,%eax\n   26bb8:\t01 c0                \tadd    %eax,%eax\n   26bba:\t01 d0                \tadd    %edx,%eax\n   26bbc:\t48 63 d0             \tmovslq %eax,%rdx\n   26bbf:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   26bc4:\t48 01 d0             \tadd    %rdx,%rax\n   26bc7:\t0f b6 00             \tmovzbl (%rax),%eax\n   26bca:\t0f b6 c8             \tmovzbl %al,%ecx\n   26bcd:\t8b 54 24 c0          \tmov    -0x40(%rsp),%edx\n   26bd1:\t8b 44 24 bc          \tmov    -0x44(%rsp),%eax\n   26bd5:\t01 c2                \tadd    %eax,%edx\n   26bd7:\t89 d0                \tmov    %edx,%eax\n   26bd9:\tc1 e0 02             \tshl    $0x2,%eax\n   26bdc:\t01 d0                \tadd    %edx,%eax\n   26bde:\tc1 e0 02             \tshl    $0x2,%eax\n   26be1:\t89 c6                \tmov    %eax,%esi\n   26be3:\t8b 54 24 c4          \tmov    -0x3c(%rsp),%edx\n   26be7:\t8b 44 24 b8          \tmov    -0x48(%rsp),%eax\n   26beb:\t01 c2                \tadd    %eax,%edx\n   26bed:\t89 d0                \tmov    %edx,%eax\n   26bef:\tc1 e0 02             \tshl    $0x2,%eax\n   26bf2:\t01 d0                \tadd    %edx,%eax\n   26bf4:\tf7 d8                \tneg    %eax\n   26bf6:\t01 c6                \tadd    %eax,%esi\n   26bf8:\t8b 54 24 c8          \tmov    -0x38(%rsp),%edx\n   26bfc:\t8b 44 24 b4          \tmov    -0x4c(%rsp),%eax\n   26c00:\t01 d0                \tadd    %edx,%eax\n   26c02:\t01 f0                \tadd    %esi,%eax\n   26c04:\t83 c0 10             \tadd    $0x10,%eax\n   26c07:\tc1 f8 05             \tsar    $0x5,%eax\n   26c0a:\t48 63 d0             \tmovslq %eax,%rdx\n   26c0d:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n   26c12:\t48 01 d0             \tadd    %rdx,%rax\n   26c15:\t0f b6 00             \tmovzbl (%rax),%eax\n   26c18:\t0f b6 c0             \tmovzbl %al,%eax\n   26c1b:\t01 c8                \tadd    %ecx,%eax\n   26c1d:\t83 c0 01             \tadd    $0x1,%eax\n   26c20:\td1 f8                \tsar    %eax\n   26c22:\t89 c1                \tmov    %eax,%ecx\n   26c24:\t8b 54 24 9c          \tmov    -0x64(%rsp),%edx\n   26c28:\t89 d0                \tmov    %edx,%eax\n   26c2a:\t01 c0                \tadd    %eax,%eax\n   26c2c:\t01 d0                \tadd    %edx,%eax\n   26c2e:\t48 63 d0             \tmovslq %eax,%rdx\n   26c31:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   26c36:\t48 01 d0             \tadd    %rdx,%rax\n   26c39:\t89 ca                \tmov    %ecx,%edx\n   26c3b:\t88 10                \tmov    %dl,(%rax)\n   26c3d:\t48 83 44 24 f0 01    \taddq   $0x1,-0x10(%rsp)\n   26c43:\t48 83 44 24 e8 01    \taddq   $0x1,-0x18(%rsp)\n   26c49:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n   26c4e:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   26c52:\t3b 44 24 e4          \tcmp    -0x1c(%rsp),%eax\n   26c56:\t0f 8c ef fc ff ff    \tjl     2694b <avg_h264_qpel4_v_lowpass_8+0x44>\n   26c5c:\t90                   \tnop\n   26c5d:\t90                   \tnop\n   26c5e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall avg_h264_qpel4_v_lowpass_8(_BYTE *a1, unsigned __int8 *a2,\n                                              int a3, int a4) {\n  __int64 result;\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  int v10;\n  int v11;\n  int v12;\n  char *v13;\n  int i;\n  v13 = &ff_cropTbl + Number;\n  for (i = Number;; ++i) {\n    result = (unsigned int)i;\n    if (i >= Number)\n      break;\n    v12 = a2[-a4];\n    v11 = *a2;\n    v10 = a2[a4];\n    v9 = a2[Number * a4];\n    v8 = a2[Number * a4];\n    v7 = a2[Number * a4];\n    v6 = a2[Number * a4];\n    v5 = a2[Number * a4];\n    *a1 = ((unsigned __int8)*a1 +\n           (unsigned __int8)v13[(Number * (v9 + v12) + Number * (v10 + v11) +\n                                 a2[Number * a4] + v8 + Number) >>\n                                Number] +\n           Number) >>\n          Number;\n    a1[a3] = ((unsigned __int8)a1[a3] +\n              (unsigned __int8)v13[(Number * (v8 + v11) + Number * (v9 + v10) +\n                                    v12 + v7 + Number) >>\n                                   Number] +\n              Number) >>\n             Number;\n    a1[Number * a3] =\n        ((unsigned __int8)a1[Number * a3] +\n         (unsigned __int8)v13[(Number * (v7 + v10) + Number * (v8 + v9) + v11 +\n                               v6 + Number) >>\n                              Number] +\n         Number) >>\n        Number;\n    a1[Number * a3] =\n        ((unsigned __int8)a1[Number * a3] +\n         (unsigned __int8)v13[(Number * (v6 + v9) + Number * (v7 + v8) + v10 +\n                               v5 + Number) >>\n                              Number] +\n         Number) >>\n        Number;\n    ++a1;\n    ++a2;\n  }\n  return result;\n}", "code_t": "void __cdecl avg_h264_qpel4_v_lowpass_8(uint8_t *<span class=\"supfact\">p_dst</span>,\n                                        uint8_t *<span class=\"supfact\">p_src</span>,\n                                        int <span class=\"supfact\">dstStride</span>,\n                                        int <span class=\"supfact\">srcStride</span>) {\n  int <span class=\"supfact\">src6</span>;\n  int <span class=\"supfact\">src5</span>;\n  int <span class=\"supfact\">src4</span>;\n  int <span class=\"supfact\">src3</span>;\n  int <span class=\"supfact\">src2</span>;\n  int <span class=\"supfact\">src1</span>;\n  int <span class=\"supfact\">src0</span>;\n  int <span class=\"supfact\">srcA</span>;\n  uint8_t *<span class=\"supfact\">cm</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">cm</span> = &ff_cropTbl[Number];\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">srcA</span> = <span class=\"supfact\">p_src</span>[-<span class=\"supfact\">srcStride</span>];\n    <span class=\"supfact\">src0</span> = *<span class=\"supfact\">p_src</span>;\n    <span class=\"supfact\">src1</span> = <span class=\"supfact\">p_src</span>[<span class=\"supfact\">srcStride</span>];\n    <span class=\"supfact\">src2</span> =\n        <span class=\"supfact\">p_src</span>[Number * <span class=\"supfact\">srcStride</span>];\n    <span class=\"supfact\">src3</span> =\n        <span class=\"supfact\">p_src</span>[Number * <span class=\"supfact\">srcStride</span>];\n    <span class=\"supfact\">src4</span> =\n        <span class=\"supfact\">p_src</span>[Number * <span class=\"supfact\">srcStride</span>];\n    <span class=\"supfact\">src5</span> =\n        <span class=\"supfact\">p_src</span>[Number * <span class=\"supfact\">srcStride</span>];\n    <span class=\"supfact\">src6</span> =\n        <span class=\"supfact\">p_src</span>[Number * <span class=\"supfact\">srcStride</span>];\n    *<span class=\"supfact\">p_dst</span> =\n        (*<span class=\"supfact\">p_dst</span> +\n         <span class=\"supfact\">cm</span>\n             [(Number * (<span class=\"supfact\">src2</span> + <span class=\"supfact\">srcA</span>) +\n               Number * (<span class=\"supfact\">src1</span> + <span class=\"supfact\">src0</span>) +\n               <span class=\"supfact\">p_src</span>[Number * <span class=\"supfact\">srcStride</span>] +\n               <span class=\"supfact\">src3</span> + Number) >>\n              Number] +\n         Number) >>\n        Number;\n    <span class=\"supfact\">p_dst</span>[<span class=\"supfact\">dstStride</span>] =\n        (<span class=\"supfact\">p_dst</span>[<span class=\"supfact\">dstStride</span>] +\n         <span class=\"supfact\">cm</span>\n             [(Number * (<span class=\"supfact\">src3</span> + <span class=\"supfact\">src0</span>) +\n               Number * (<span class=\"supfact\">src2</span> + <span class=\"supfact\">src1</span>) +\n               <span class=\"supfact\">srcA</span> + <span class=\"supfact\">src4</span> + Number) >>\n              Number] +\n         Number) >>\n        Number;\n    <span class=\"supfact\">p_dst</span>[Number * <span class=\"supfact\">dstStride</span>] =\n        (<span class=\"supfact\">p_dst</span>[Number * <span class=\"supfact\">dstStride</span>] +\n         <span class=\"supfact\">cm</span>\n             [(Number * (<span class=\"supfact\">src4</span> + <span class=\"supfact\">src1</span>) +\n               Number * (<span class=\"supfact\">src3</span> + <span class=\"supfact\">src2</span>) +\n               <span class=\"supfact\">src0</span> + <span class=\"supfact\">src5</span> + Number) >>\n              Number] +\n         Number) >>\n        Number;\n    <span class=\"supfact\">p_dst</span>[Number * <span class=\"supfact\">dstStride</span>] =\n        (<span class=\"supfact\">p_dst</span>[Number * <span class=\"supfact\">dstStride</span>] +\n         <span class=\"supfact\">cm</span>\n             [(Number * (<span class=\"supfact\">src5</span> + <span class=\"supfact\">src2</span>) +\n               Number * (<span class=\"supfact\">src4</span> + <span class=\"supfact\">src3</span>) +\n               <span class=\"supfact\">src1</span> + <span class=\"supfact\">src6</span> + Number) >>\n              Number] +\n         Number) >>\n        Number;\n    ++<span class=\"supfact\">p_dst</span>;\n    ++<span class=\"supfact\">p_src</span>;\n  }\n}", "var": [{"name": "a1", "type": "uint8_t *", "pred_name": "dst", "ref_name": "p_dst", "ref_type": "uint8_t *"}, {"name": "a2", "type": "uint8_t *", "pred_name": "src", "ref_name": "p_src", "ref_type": "uint8_t *"}, {"name": "a3", "type": "int", "pred_name": "dstStride", "ref_name": "dstStride", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "srcStride", "ref_name": "srcStride", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v5", "type": "int", "pred_name": "src6", "ref_name": "src6", "ref_type": "int"}, {"name": "v6", "type": "int", "pred_name": "src5", "ref_name": "src5", "ref_type": "int"}, {"name": "v7", "type": "int", "pred_name": "src4", "ref_name": "src4", "ref_type": "int"}, {"name": "v8", "type": "int", "pred_name": "src3", "ref_name": "src3", "ref_type": "int"}, {"name": "v9", "type": "int", "pred_name": "src2", "ref_name": "src2", "ref_type": "int"}, {"name": "v10", "type": "int", "pred_name": "src1", "ref_name": "src1", "ref_type": "int"}, {"name": "v11", "type": "int", "pred_name": "src0", "ref_name": "src0", "ref_type": "int"}, {"name": "v12", "type": "int", "pred_name": "srcA", "ref_name": "srcA", "ref_type": "int"}, {"name": "v13", "type": "uint8_t *", "pred_name": "cm", "ref_name": "cm", "ref_type": "uint8_t *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "oantonen", "repo_name": "Corewar", "path": "oantonen/Corewar/045d137b94ba2b016b6599b909e444b39f83239840d29d18b3d2a1ddb9ba92cc", "path_in_repo": "oantonen/Corewar/libft/obj/printfuncs/ft_printf/params_set.o", "objdump": "0000000000000084 <get_flags>:\n  84:\t55                   \tpush   %rbp\n  85:\t48 89 e5             \tmov    %rsp,%rbp\n  88:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  8c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  90:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  94:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  9b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  9e:\t48 63 d0             \tmovslq %eax,%rdx\n  a1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  a5:\t48 01 d0             \tadd    %rdx,%rax\n  a8:\t0f b6 00             \tmovzbl (%rax),%eax\n  ab:\t3c 2b                \tcmp    $0x2b,%al\n  ad:\t75 0d                \tjne    bc <get_flags+0x38>\n  af:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  b3:\tc6 40 02 01          \tmovb   $0x1,0x2(%rax)\n  b7:\te9 93 00 00 00       \tjmpq   14f <get_flags+0xcb>\n  bc:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  bf:\t48 63 d0             \tmovslq %eax,%rdx\n  c2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  c6:\t48 01 d0             \tadd    %rdx,%rax\n  c9:\t0f b6 00             \tmovzbl (%rax),%eax\n  cc:\t3c 2d                \tcmp    $0x2d,%al\n  ce:\t75 0a                \tjne    da <get_flags+0x56>\n  d0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  d4:\tc6 40 03 01          \tmovb   $0x1,0x3(%rax)\n  d8:\teb 75                \tjmp    14f <get_flags+0xcb>\n  da:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  dd:\t48 63 d0             \tmovslq %eax,%rdx\n  e0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  e4:\t48 01 d0             \tadd    %rdx,%rax\n  e7:\t0f b6 00             \tmovzbl (%rax),%eax\n  ea:\t3c 30                \tcmp    $0x30,%al\n  ec:\t75 0a                \tjne    f8 <get_flags+0x74>\n  ee:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  f2:\tc6 40 04 01          \tmovb   $0x1,0x4(%rax)\n  f6:\teb 57                \tjmp    14f <get_flags+0xcb>\n  f8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  fb:\t48 63 d0             \tmovslq %eax,%rdx\n  fe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 102:\t48 01 d0             \tadd    %rdx,%rax\n 105:\t0f b6 00             \tmovzbl (%rax),%eax\n 108:\t3c 23                \tcmp    $0x23,%al\n 10a:\t75 0a                \tjne    116 <get_flags+0x92>\n 10c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 110:\tc6 40 01 01          \tmovb   $0x1,0x1(%rax)\n 114:\teb 39                \tjmp    14f <get_flags+0xcb>\n 116:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 119:\t48 63 d0             \tmovslq %eax,%rdx\n 11c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 120:\t48 01 d0             \tadd    %rdx,%rax\n 123:\t0f b6 00             \tmovzbl (%rax),%eax\n 126:\t3c 20                \tcmp    $0x20,%al\n 128:\t75 09                \tjne    133 <get_flags+0xaf>\n 12a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 12e:\tc6 00 01             \tmovb   $0x1,(%rax)\n 131:\teb 1c                \tjmp    14f <get_flags+0xcb>\n 133:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 136:\t48 63 d0             \tmovslq %eax,%rdx\n 139:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 13d:\t48 01 d0             \tadd    %rdx,%rax\n 140:\t0f b6 00             \tmovzbl (%rax),%eax\n 143:\t3c 27                \tcmp    $0x27,%al\n 145:\t75 11                \tjne    158 <get_flags+0xd4>\n 147:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 14b:\tc6 40 05 01          \tmovb   $0x1,0x5(%rax)\n 14f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 153:\te9 43 ff ff ff       \tjmpq   9b <get_flags+0x17>\n 158:\t90                   \tnop\n 159:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 15d:\t8b 10                \tmov    (%rax),%edx\n 15f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 162:\t01 c2                \tadd    %eax,%edx\n 164:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 168:\t89 10                \tmov    %edx,(%rax)\n 16a:\t90                   \tnop\n 16b:\t5d                   \tpop    %rbp\n 16c:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall get_flags(__int64 a1, _DWORD *a2, _BYTE *a3) {\n  _DWORD *result;\n  int i;\n  for (i = Number;; ++i) {\n    switch (*(_BYTE *)(i + a1)) {\n    case String:\n      a3[Number] = Number;\n      continue;\n    case String:\n      a3[Number] = Number;\n      continue;\n    case String:\n      a3[Number] = Number;\n      continue;\n    case String:\n      a3[Number] = Number;\n      continue;\n    case String:\n      *a3 = Number;\n      continue;\n    }\n    if (*(_BYTE *)(i + a1) != Number)\n      break;\n    a3[Number] = Number;\n  }\n  result = a2;\n  *a2 += i;\n  return result;\n}", "code_t": "void __cdecl get_flags(char *<span class=\"supfact\">str</span>, int *<span class=\"supfact\">p</span>,\n                       t_flags *<span class=\"supfact\">f</span>) {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    switch (<span class=\"supfact\">str</span>[<span class=\"supfact\">i</span>]) {\n    case String:\n      <span class=\"supfact\">f</span>->plus = Number;\n      continue;\n    case String:\n      <span class=\"supfact\">f</span>->minus = Number;\n      continue;\n    case String:\n      <span class=\"supfact\">f</span>->zero = Number;\n      continue;\n    case String:\n      <span class=\"supfact\">f</span>->hash = Number;\n      continue;\n    case String:\n      <span class=\"supfact\">f</span>->space = Number;\n      continue;\n    }\n    if (<span class=\"supfact\">str</span>[<span class=\"supfact\">i</span>] != Number)\n      break;\n    <span class=\"supfact\">f</span>->apostrophe = Number;\n  }\n  *<span class=\"supfact\">p</span> += <span class=\"supfact\">i</span>;\n}", "var": [{"name": "a1", "type": "const char *", "pred_name": "fmt", "ref_name": "str", "ref_type": "char *"}, {"name": "a2", "type": "__va_list_tag *", "pred_name": "ap", "ref_name": "p", "ref_type": "int *"}, {"name": "a3", "type": "t_arg *", "pred_name": "args", "ref_name": "f", "ref_type": "t_flags *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "crossbuild", "repo_name": "isl", "path": "crossbuild/isl/e659db3779578487c71b05efb588796cb8c6aca0e0ee495e3e0d4f37a59b7478", "path_in_repo": "crossbuild/isl/imath/pi", "objdump": "", "code_s": "__int64 (**init_proc())(void) {\n  __int64 (**result)(void);\n  result = &_gmon_start__;\n  if (&_gmon_start__)\n    result = (__int64 (**)(void))_gmon_start__();\n  return result;\n}", "code_t": "__int64 (**init_proc())(void) {\n  __int64 (**<span class=\"supfact\">result</span>)(void);\n  <span class=\"supfact\">result</span> = &_gmon_start__;\n  if (&_gmon_start__)\n    <span class=\"supfact\">result</span> = (__int64 (**)(void))_gmon_start__();\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "result", "type": "__int64 (**)(void)", "pred_name": "result", "ref_name": "result", "ref_type": "__int64 (**)(void)"}], "body_in_train": true}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "000000000000e597 <glGenFramebuffersEXT>:\n    e597:\t55                   \tpush   %rbp\n    e598:\t48 89 e5             \tmov    %rsp,%rbp\n    e59b:\t48 83 ec 10          \tsub    $0x10,%rsp\n    e59f:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    e5a2:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    e5a6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e5ad <glGenFramebuffersEXT+0x16>\n    e5ad:\t48 8b 88 68 1a 00 00 \tmov    0x1a68(%rax),%rcx\n    e5b4:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    e5b8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    e5bb:\t48 89 d6             \tmov    %rdx,%rsi\n    e5be:\t89 c7                \tmov    %eax,%edi\n    e5c0:\tff d1                \tcallq  *%rcx\n    e5c2:\t90                   \tnop\n    e5c3:\tc9                   \tleaveq \n    e5c4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glGenFramebuffersEXT(unsigned int a1, __int64 a2) {\n  return (*(__int64(__fastcall **)(_QWORD, __int64))(glapi_Dispatch +\n                                                     Number L))(a1, a2);\n}", "code_t": "void __cdecl glGenFramebuffersEXT(GLsizei <span class=\"supfact\">n</span>,\n                                  GLuint *<span class=\"supfact\">framebuffers</span>) {\n  (*(void(__fastcall **)(_QWORD, GLuint *))(glapi_Dispatch + Number L))(\n      (unsigned int)<span class=\"supfact\">n</span>, <span class=\"supfact\">framebuffers</span>);\n}", "var": [{"name": "a1", "type": "GLenum", "pred_name": "type", "ref_name": "n", "ref_type": "GLsizei"}, {"name": "a2", "type": "const void *", "pred_name": "pointer", "ref_name": "framebuffers", "ref_type": "GLuint *"}], "body_in_train": false}, {"repo_owner": "avafinger", "repo_name": "ffmpeg-3.3.4_cedrus264", "path": "avafinger/ffmpeg-3.3.4_cedrus264/0fac22d04bfb561e07f9323c932a90d9401c19e39202f67cea777055d9c6883a", "path_in_repo": "avafinger/ffmpeg-3.3.4_cedrus264/src/libavcodec/dca_core.o", "objdump": "00000000000003b1 <skip_bits>:\n     3b1:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n     3b6:\t89 74 24 e4          \tmov    %esi,-0x1c(%rsp)\n     3ba:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     3bf:\t8b 40 10             \tmov    0x10(%rax),%eax\n     3c2:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n     3c6:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     3cb:\t8b 40 18             \tmov    0x18(%rax),%eax\n     3ce:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n     3d2:\t8b 54 24 e4          \tmov    -0x1c(%rsp),%edx\n     3d6:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     3da:\t01 d0                \tadd    %edx,%eax\n     3dc:\t39 44 24 f8          \tcmp    %eax,-0x8(%rsp)\n     3e0:\t0f 46 44 24 f8       \tcmovbe -0x8(%rsp),%eax\n     3e5:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n     3e9:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n     3ed:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     3f2:\t89 50 10             \tmov    %edx,0x10(%rax)\n     3f5:\t90                   \tnop\n     3f6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall skip_bits(__int64 a1, int a2) {\n  unsigned int v2;\n  unsigned int v3;\n  __int64 result;\n  v2 = a2 + *(_DWORD *)(a1 + Number);\n  if (*(_DWORD *)(a1 + Number) <= v2)\n    v2 = *(_DWORD *)(a1 + Number);\n  v3 = v2;\n  result = a1;\n  *(_DWORD *)(a1 + Number) = v3;\n  return result;\n}", "code_t": "void __cdecl skip_bits(GetBitContext_0 *<span class=\"supfact\">s</span>,\n                       int <span class=\"supfact\">n</span>) {\n  unsigned int v2;\n  v2 = <span class=\"supfact\">n</span> + <span class=\"supfact\">s</span>->index;\n  if (<span class=\"supfact\">s</span>->size_in_bits_plus8 <= v2)\n    v2 = <span class=\"supfact\">s</span>->size_in_bits_plus8;\n  <span class=\"supfact\">s</span>->index = v2;\n}", "var": [{"name": "a1", "type": "GetBitContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "GetBitContext_0 *"}, {"name": "a2", "type": "int", "pred_name": "n", "ref_name": "n", "ref_type": "int"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "silbak04", "repo_name": "EECE4029", "path": "silbak04/EECE4029/50111f939ff3ab730c10fb83bbb168bee522070b84a77034ad410c3900705848", "path_in_repo": "silbak04/EECE4029/hw_5/bbfs", "objdump": "", "code_s": "int __lxstat64(int ver, const char *filename, struct stat64 *stat_buf) {\n  return _lxstat64(ver, filename, stat_buf);\n}", "code_t": "int __lxstat64(int <span class=\"supfact\">ver</span>, const char *<span class=\"supfact\">filename</span>,\n               struct stat64 *<span class=\"supfact\">stat_buf</span>) {\n  return _lxstat64(<span class=\"supfact\">ver</span>, <span class=\"supfact\">filename</span>,\n                   <span class=\"supfact\">stat_buf</span>);\n}", "var": [{"name": "ver", "type": "int", "pred_name": "ver", "ref_name": "ver", "ref_type": "int"}, {"name": "filename", "type": "const char *", "pred_name": "filename", "ref_name": "filename", "ref_type": "const char *"}, {"name": "stat_buf", "type": "struct stat64 *", "pred_name": "stat_buf", "ref_name": "stat_buf", "ref_type": "struct stat64 *"}], "body_in_train": true}, {"repo_owner": "Jeongseob", "repo_name": "xen-coboost-sched", "path": "Jeongseob/xen-coboost-sched/52c2de33ae2bf31212b1a0a5735892c885ee519ef555683d86f54e293008761b", "path_in_repo": "Jeongseob/xen-coboost-sched/tools/qemu-xen/arm-linux-user/tcg/tcg.o", "objdump": "0000000000004318 <tcg_temp_free_internal>:\n    4318:\t55                   \tpush   %rbp\n    4319:\t48 89 e5             \tmov    %rsp,%rbp\n    431c:\t48 83 ec 30          \tsub    $0x30,%rsp\n    4320:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n    4323:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    432a:\t00 00 \n    432c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4330:\t31 c0                \txor    %eax,%eax\n    4332:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 4339 <tcg_temp_free_internal+0x21>\n    4339:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    433d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4341:\t48 8b 48 30          \tmov    0x30(%rax),%rcx\n    4345:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    4348:\t48 63 d0             \tmovslq %eax,%rdx\n    434b:\t48 89 d0             \tmov    %rdx,%rax\n    434e:\t48 c1 e0 03          \tshl    $0x3,%rax\n    4352:\t48 29 d0             \tsub    %rdx,%rax\n    4355:\t48 c1 e0 03          \tshl    $0x3,%rax\n    4359:\t48 01 c8             \tadd    %rcx,%rax\n    435c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    4360:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4364:\t0f b6 50 28          \tmovzbl 0x28(%rax),%edx\n    4368:\t83 e2 ef             \tand    $0xffffffef,%edx\n    436b:\t88 50 28             \tmov    %dl,0x28(%rax)\n    436e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4372:\t8b 00                \tmov    (%rax),%eax\n    4374:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    4377:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    437b:\t0f b6 40 28          \tmovzbl 0x28(%rax),%eax\n    437f:\t83 e0 08             \tand    $0x8,%eax\n    4382:\t84 c0                \ttest   %al,%al\n    4384:\t74 04                \tje     438a <tcg_temp_free_internal+0x72>\n    4386:\t83 45 e4 02          \taddl   $0x2,-0x1c(%rbp)\n    438a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    438e:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    4391:\t48 63 d2             \tmovslq %edx,%rdx\n    4394:\t48 83 c2 10          \tadd    $0x10,%rdx\n    4398:\t8b 14 90             \tmov    (%rax,%rdx,4),%edx\n    439b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    439f:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n    43a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    43a6:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    43a9:\t48 63 d2             \tmovslq %edx,%rdx\n    43ac:\t48 8d 4a 10          \tlea    0x10(%rdx),%rcx\n    43b0:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    43b3:\t89 14 88             \tmov    %edx,(%rax,%rcx,4)\n    43b6:\t90                   \tnop\n    43b7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    43bb:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    43c2:\t00 00 \n    43c4:\t74 05                \tje     43cb <tcg_temp_free_internal+0xb3>\n    43c6:\te8 00 00 00 00       \tcallq  43cb <tcg_temp_free_internal+0xb3>\n    43cb:\tc9                   \tleaveq \n    43cc:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall tcg_temp_free_internal(int a1) {\n  int v2;\n  __int64 v3;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  v3 = tcg_ctx[Number] + Number L * a1;\n  *(_BYTE *)(v3 + Number) &= Number;\n  v2 = *(_DWORD *)v3;\n  if ((*(_BYTE *)(v3 + Number) & Number) != Number)\n    v2 += Number;\n  *(_DWORD *)(v3 + Number) = *((_DWORD *)&tcg_ctx[Number] + v2);\n  *((_DWORD *)&tcg_ctx[Number] + v2) = a1;\n  return __readfsqword(Number) ^ v4;\n}", "code_t": "void __cdecl tcg_temp_free_internal(int <span class=\"supfact\">idx</span>) {\n  int <span class=\"supfact\">k</span>;\n  TCGTemp_0 *<span class=\"supfact\">ts</span>;\n  <span class=\"supfact\">ts</span> = &tcg_ctx.temps[<span class=\"supfact\">idx</span>];\n  *((_BYTE *)<span class=\"supfact\">ts</span> + Number) &= Number;\n  <span class=\"supfact\">k</span> = <span class=\"supfact\">ts</span>->base_type;\n  if ((*((_BYTE *)<span class=\"supfact\">ts</span> + Number) & Number) != Number)\n    <span class=\"supfact\">k</span> += Number;\n  <span class=\"supfact\">ts</span>->next_free_temp =\n      tcg_ctx.first_free_temp[<span class=\"supfact\">k</span>];\n  tcg_ctx.first_free_temp[<span class=\"supfact\">k</span>] = <span class=\"supfact\">idx</span>;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "idx", "ref_name": "idx", "ref_type": "int"}, {"name": "v2", "type": "int", "pred_name": "k", "ref_name": "k", "ref_type": "int"}, {"name": "v3", "type": "TCGTemp_0 *", "pred_name": "ts", "ref_name": "ts", "ref_type": "TCGTemp_0 *"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "krishnair", "repo_name": "qlz", "path": "krishnair/qlz/c04e1ad6a663364772adc90f7d926ce705fabd1e29e47bd31cce69dcd12bc0b5", "path_in_repo": "krishnair/qlz//qdecomp", "objdump": "0000000000401dab <qlz_decompress>:\n  401dab:\t55                   \tpush   %rbp\n  401dac:\t48 89 e5             \tmov    %rsp,%rbp\n  401daf:\t48 83 ec 30          \tsub    $0x30,%rsp\n  401db3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  401db7:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  401dbb:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  401dbf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401dc3:\t48 89 c7             \tmov    %rax,%rdi\n  401dc6:\te8 7b f5 ff ff       \tcallq  401346 <qlz_size_decompressed>\n  401dcb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401dcf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401dd3:\t0f b6 00             \tmovzbl (%rax),%eax\n  401dd6:\t0f be c0             \tmovsbl %al,%eax\n  401dd9:\t83 e0 01             \tand    $0x1,%eax\n  401ddc:\t85 c0                \ttest   %eax,%eax\n  401dde:\t74 31                \tje     401e11 <qlz_decompress+0x66>\n  401de0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401de4:\t48 89 c7             \tmov    %rax,%rdi\n  401de7:\te8 73 f4 ff ff       \tcallq  40125f <reset_table_decompress>\n  401dec:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n  401df0:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  401df4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  401df8:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n  401dfc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401e00:\t49 89 f8             \tmov    %rdi,%r8\n  401e03:\t48 89 c7             \tmov    %rax,%rdi\n  401e06:\te8 f1 fb ff ff       \tcallq  4019fc <qlz_decompress_core>\n  401e0b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401e0f:\teb 27                \tjmp    401e38 <qlz_decompress+0x8d>\n  401e11:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401e15:\t48 89 c7             \tmov    %rax,%rdi\n  401e18:\te8 f3 f5 ff ff       \tcallq  401410 <qlz_size_header>\n  401e1d:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  401e21:\t48 8d 0c 10          \tlea    (%rax,%rdx,1),%rcx\n  401e25:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  401e29:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401e2d:\t48 89 ce             \tmov    %rcx,%rsi\n  401e30:\t48 89 c7             \tmov    %rax,%rdi\n  401e33:\te8 28 f2 ff ff       \tcallq  401060 <memcpy@plt>\n  401e38:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401e3c:\t48 c7 80 00 90 00 00 \tmovq   $0x0,0x9000(%rax)\n  401e43:\t00 00 00 00 \n  401e47:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401e4b:\t48 89 c7             \tmov    %rax,%rdi\n  401e4e:\te8 0c f4 ff ff       \tcallq  40125f <reset_table_decompress>\n  401e53:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401e57:\tc9                   \tleaveq \n  401e58:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qlz_decompress(_BYTE *a1, _DWORD *a2, __int64 a3) {\n  __int64 v3;\n  __int64 n;\n  n = qlz_size_decompressed(a1);\n  if ((*a1 & Number) != Number) {\n    reset_table_decompress();\n    n = qlz_decompress_core(a1, a2, n, a3);\n  } else {\n    v3 = qlz_size_header(a1);\n    memcpy(a2, &a1[v3], n);\n  }\n  *(_QWORD *)(a3 + Number) = Number L;\n  reset_table_decompress();\n  return n;\n}", "code_t": "size_t __cdecl qlz_decompress(const char *<span class=\"supfact\">source</span>,\n                              void *<span class=\"supfact\">destination</span>,\n                              qlz_state_decompress *<span class=\"supfact\">state</span>) {\n  const char *v3;\n  size_t <span class=\"supfact\">dsiz</span>;\n  <span class=\"supfact\">dsiz</span> = qlz_size_decompressed(<span class=\"supfact\">source</span>);\n  if ((*<span class=\"supfact\">source</span> & Number) != Number) {\n    reset_table_decompress(<span class=\"supfact\">state</span>);\n    <span class=\"supfact\">dsiz</span> = qlz_decompress_core(\n        (const unsigned __int8 *)<span class=\"supfact\">source</span>,\n        (unsigned __int8 *)<span class=\"supfact\">destination</span>, <span class=\"supfact\">dsiz</span>,\n        <span class=\"supfact\">state</span>,\n        (const unsigned __int8 *)<span class=\"supfact\">destination</span>);\n  } else {\n    v3 = &<span class=\"supfact\">source</span>[qlz_size_header(<span class=\"supfact\">source</span>)];\n    memcpy(<span class=\"supfact\">destination</span>, v3, <span class=\"supfact\">dsiz</span>);\n  }\n  <span class=\"supfact\">state</span>->stream_counter = Number L;\n  reset_table_decompress(<span class=\"supfact\">state</span>);\n  return <span class=\"supfact\">dsiz</span>;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "h", "ref_name": "source", "ref_type": "const char *"}, {"name": "a2", "type": "void *", "pred_name": "dest", "ref_name": "destination", "ref_type": "void *"}, {"name": "a3", "type": "size_t", "pred_name": "size", "ref_name": "state", "ref_type": "qlz_state_decompress *"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "n", "type": "disappear", "pred_name": "", "ref_name": "dsiz", "ref_type": "size_t"}], "body_in_train": false}, {"repo_owner": "ProjectVault", "repo_name": "orp", "path": "ProjectVault/orp/8ab0fa6a75642037601404d6690f67a740733a4e568ebda70fab018caaa449ea", "path_in_repo": "ProjectVault/orp/third-party/qemu-orp/hw/display/exynos4210_fimd.o", "objdump": "0000000000001fcf <fimd_update_putpix_qemu>:\n    1fcf:\t55                   \tpush   %rbp\n    1fd0:\t48 89 e5             \tmov    %rsp,%rbp\n    1fd3:\t48 83 ec 10          \tsub    $0x10,%rsp\n    1fd7:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    1fda:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1fdd:\t83 e8 08             \tsub    $0x8,%eax\n    1fe0:\t83 f8 18             \tcmp    $0x18,%eax\n    1fe3:\t77 72                \tja     2057 <fimd_update_putpix_qemu+0x88>\n    1fe5:\t89 c0                \tmov    %eax,%eax\n    1fe7:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1fee:\t00 \n    1fef:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 1ff6 <fimd_update_putpix_qemu+0x27>\n    1ff6:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n    1ff9:\t48 98                \tcltq   \n    1ffb:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 2002 <fimd_update_putpix_qemu+0x33>\n    2002:\t48 01 d0             \tadd    %rdx,%rax\n    2005:\tff e0                \tjmpq   *%rax\n    2007:\t48 8d 05 3c fe ff ff \tlea    -0x1c4(%rip),%rax        # 1e4a <put_to_qemufb_pixel8>\n    200e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2015 <fimd_update_putpix_qemu+0x46>\n    2015:\teb 56                \tjmp    206d <fimd_update_putpix_qemu+0x9e>\n    2017:\t48 8d 05 6f fe ff ff \tlea    -0x191(%rip),%rax        # 1e8d <put_to_qemufb_pixel15>\n    201e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2025 <fimd_update_putpix_qemu+0x56>\n    2025:\teb 46                \tjmp    206d <fimd_update_putpix_qemu+0x9e>\n    2027:\t48 8d 05 a3 fe ff ff \tlea    -0x15d(%rip),%rax        # 1ed1 <put_to_qemufb_pixel16>\n    202e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2035 <fimd_update_putpix_qemu+0x66>\n    2035:\teb 36                \tjmp    206d <fimd_update_putpix_qemu+0x9e>\n    2037:\t48 8d 05 d7 fe ff ff \tlea    -0x129(%rip),%rax        # 1f15 <put_to_qemufb_pixel24>\n    203e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2045 <fimd_update_putpix_qemu+0x76>\n    2045:\teb 26                \tjmp    206d <fimd_update_putpix_qemu+0x9e>\n    2047:\t48 8d 05 40 ff ff ff \tlea    -0xc0(%rip),%rax        # 1f8e <put_to_qemufb_pixel32>\n    204e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2055 <fimd_update_putpix_qemu+0x86>\n    2055:\teb 16                \tjmp    206d <fimd_update_putpix_qemu+0x9e>\n    2057:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    205a:\t89 c6                \tmov    %eax,%esi\n    205c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2063 <fimd_update_putpix_qemu+0x94>\n    2063:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2068:\te8 00 00 00 00       \tcallq  206d <fimd_update_putpix_qemu+0x9e>\n    206d:\t90                   \tnop\n    206e:\tc9                   \tleaveq \n    206f:\tc3                   \tretq   ", "code_s": "void *__fastcall fimd_update_putpix_qemu(unsigned int a1) {\n  void *result;\n  switch (a1) {\n  case Number:\n    result = put_to_qemufb_pixel8;\n    put_pixel_toqemu = (__int64)put_to_qemufb_pixel8;\n    break;\n  case Number:\n    result = put_to_qemufb_pixel15;\n    put_pixel_toqemu = (__int64)put_to_qemufb_pixel15;\n    break;\n  case Number:\n    result = put_to_qemufb_pixel16;\n    put_pixel_toqemu = (__int64)put_to_qemufb_pixel16;\n    break;\n  case Number:\n    result = put_to_qemufb_pixel24;\n    put_pixel_toqemu = (__int64)put_to_qemufb_pixel24;\n    break;\n  case Number:\n    result = put_to_qemufb_pixel32;\n    put_pixel_toqemu = (__int64)put_to_qemufb_pixel32;\n    break;\n  default:\n    result = (void *)hw_error(String, a1);\n    break;\n  }\n  return result;\n}", "code_t": "void __cdecl fimd_update_putpix_qemu(int <span class=\"supfact\">bpp</span>) {\n  switch (<span class=\"supfact\">bpp</span>) {\n  case Number:\n    put_pixel_toqemu = (int (*)(const rgba, uint8_t *))put_to_qemufb_pixel8;\n    break;\n  case Number:\n    put_pixel_toqemu = (int (*)(const rgba, uint8_t *))put_to_qemufb_pixel15;\n    break;\n  case Number:\n    put_pixel_toqemu = (int (*)(const rgba, uint8_t *))put_to_qemufb_pixel16;\n    break;\n  case Number:\n    put_pixel_toqemu = (int (*)(const rgba, uint8_t *))put_to_qemufb_pixel24;\n    break;\n  case Number:\n    put_pixel_toqemu = (int (*)(const rgba, uint8_t *))put_to_qemufb_pixel32;\n    break;\n  default:\n    hw_error(String, (unsigned int)<span class=\"supfact\">bpp</span>);\n    break;\n  }\n}", "var": [{"name": "a1", "type": "int", "pred_name": "bpp", "ref_name": "bpp", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "Panopto", "repo_name": "panopto-ffmpeg", "path": "Panopto/panopto-ffmpeg/d1bbb79f72ca6a6b111d8e0e01ec4b1f801112fe78c15a4aeabb445dbd5f3a63", "path_in_repo": "Panopto/panopto-ffmpeg//libavcodec/hevcdsp.o", "objdump": "0000000000006573 <put_hevc_qpel_uni_w_v_8>:\n    6573:\t48 89 7c 24 b8       \tmov    %rdi,-0x48(%rsp)\n    6578:\t48 89 74 24 b0       \tmov    %rsi,-0x50(%rsp)\n    657d:\t48 89 54 24 a8       \tmov    %rdx,-0x58(%rsp)\n    6582:\t48 89 4c 24 a0       \tmov    %rcx,-0x60(%rsp)\n    6587:\t44 89 44 24 9c       \tmov    %r8d,-0x64(%rsp)\n    658c:\t44 89 4c 24 98       \tmov    %r9d,-0x68(%rsp)\n    6591:\t48 8b 44 24 a8       \tmov    -0x58(%rsp),%rax\n    6596:\t48 89 44 24 f0       \tmov    %rax,-0x10(%rsp)\n    659b:\t48 8b 44 24 a0       \tmov    -0x60(%rsp),%rax\n    65a0:\t48 89 44 24 e0       \tmov    %rax,-0x20(%rsp)\n    65a5:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n    65aa:\t48 89 44 24 e8       \tmov    %rax,-0x18(%rsp)\n    65af:\t48 8b 44 24 b0       \tmov    -0x50(%rsp),%rax\n    65b4:\t48 89 44 24 d8       \tmov    %rax,-0x28(%rsp)\n    65b9:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    65be:\t48 83 e8 01          \tsub    $0x1,%rax\n    65c2:\t48 c1 e0 04          \tshl    $0x4,%rax\n    65c6:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    65cc:\t48 89 44 24 d0       \tmov    %rax,-0x30(%rsp)\n    65d1:\t8b 44 24 98          \tmov    -0x68(%rsp),%eax\n    65d5:\t83 c0 06             \tadd    $0x6,%eax\n    65d8:\t89 44 24 cc          \tmov    %eax,-0x34(%rsp)\n    65dc:\t8b 44 24 cc          \tmov    -0x34(%rsp),%eax\n    65e0:\t83 e8 01             \tsub    $0x1,%eax\n    65e3:\tba 01 00 00 00       \tmov    $0x1,%edx\n    65e8:\t89 c1                \tmov    %eax,%ecx\n    65ea:\td3 e2                \tshl    %cl,%edx\n    65ec:\t89 d0                \tmov    %edx,%eax\n    65ee:\t89 44 24 c8          \tmov    %eax,-0x38(%rsp)\n    65f2:\tc7 44 24 f8 00 00 00 \tmovl   $0x0,-0x8(%rsp)\n    65f9:\t00 \n    65fa:\te9 2e 02 00 00       \tjmpq   682d <put_hevc_qpel_uni_w_v_8+0x2ba>\n    65ff:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n    6606:\t00 \n    6607:\te9 fa 01 00 00       \tjmpq   6806 <put_hevc_qpel_uni_w_v_8+0x293>\n    660c:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n    6611:\t0f b6 00             \tmovzbl (%rax),%eax\n    6614:\t0f be d0             \tmovsbl %al,%edx\n    6617:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    661b:\t48 63 c8             \tmovslq %eax,%rcx\n    661e:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n    6623:\t48 89 c6             \tmov    %rax,%rsi\n    6626:\t48 c1 e0 02          \tshl    $0x2,%rax\n    662a:\t48 29 c6             \tsub    %rax,%rsi\n    662d:\t48 89 f0             \tmov    %rsi,%rax\n    6630:\t48 01 c8             \tadd    %rcx,%rax\n    6633:\t48 89 c1             \tmov    %rax,%rcx\n    6636:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n    663b:\t48 01 c8             \tadd    %rcx,%rax\n    663e:\t0f b6 00             \tmovzbl (%rax),%eax\n    6641:\t0f b6 c0             \tmovzbl %al,%eax\n    6644:\t0f af d0             \timul   %eax,%edx\n    6647:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n    664c:\t48 83 c0 01          \tadd    $0x1,%rax\n    6650:\t0f b6 00             \tmovzbl (%rax),%eax\n    6653:\t0f be c8             \tmovsbl %al,%ecx\n    6656:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    665a:\t48 98                \tcltq   \n    665c:\t48 8b 74 24 e0       \tmov    -0x20(%rsp),%rsi\n    6661:\t48 01 f6             \tadd    %rsi,%rsi\n    6664:\t48 29 f0             \tsub    %rsi,%rax\n    6667:\t48 89 c6             \tmov    %rax,%rsi\n    666a:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n    666f:\t48 01 f0             \tadd    %rsi,%rax\n    6672:\t0f b6 00             \tmovzbl (%rax),%eax\n    6675:\t0f b6 c0             \tmovzbl %al,%eax\n    6678:\t0f af c1             \timul   %ecx,%eax\n    667b:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    667e:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n    6683:\t48 83 c0 02          \tadd    $0x2,%rax\n    6687:\t0f b6 00             \tmovzbl (%rax),%eax\n    668a:\t0f be d0             \tmovsbl %al,%edx\n    668d:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    6691:\t48 98                \tcltq   \n    6693:\t48 2b 44 24 e0       \tsub    -0x20(%rsp),%rax\n    6698:\t48 89 c6             \tmov    %rax,%rsi\n    669b:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n    66a0:\t48 01 f0             \tadd    %rsi,%rax\n    66a3:\t0f b6 00             \tmovzbl (%rax),%eax\n    66a6:\t0f b6 c0             \tmovzbl %al,%eax\n    66a9:\t0f af c2             \timul   %edx,%eax\n    66ac:\t8d 34 01             \tlea    (%rcx,%rax,1),%esi\n    66af:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n    66b4:\t48 83 c0 03          \tadd    $0x3,%rax\n    66b8:\t0f b6 00             \tmovzbl (%rax),%eax\n    66bb:\t0f be d0             \tmovsbl %al,%edx\n    66be:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    66c2:\t48 63 c8             \tmovslq %eax,%rcx\n    66c5:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n    66ca:\t48 01 c8             \tadd    %rcx,%rax\n    66cd:\t0f b6 00             \tmovzbl (%rax),%eax\n    66d0:\t0f b6 c0             \tmovzbl %al,%eax\n    66d3:\t0f af c2             \timul   %edx,%eax\n    66d6:\t01 c6                \tadd    %eax,%esi\n    66d8:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n    66dd:\t48 83 c0 04          \tadd    $0x4,%rax\n    66e1:\t0f b6 00             \tmovzbl (%rax),%eax\n    66e4:\t0f be d0             \tmovsbl %al,%edx\n    66e7:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    66eb:\t48 63 c8             \tmovslq %eax,%rcx\n    66ee:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n    66f3:\t48 01 c8             \tadd    %rcx,%rax\n    66f6:\t48 89 c1             \tmov    %rax,%rcx\n    66f9:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n    66fe:\t48 01 c8             \tadd    %rcx,%rax\n    6701:\t0f b6 00             \tmovzbl (%rax),%eax\n    6704:\t0f b6 c0             \tmovzbl %al,%eax\n    6707:\t0f af c2             \timul   %edx,%eax\n    670a:\t01 c6                \tadd    %eax,%esi\n    670c:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n    6711:\t48 83 c0 05          \tadd    $0x5,%rax\n    6715:\t0f b6 00             \tmovzbl (%rax),%eax\n    6718:\t0f be d0             \tmovsbl %al,%edx\n    671b:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    671f:\t48 98                \tcltq   \n    6721:\t48 8b 4c 24 e0       \tmov    -0x20(%rsp),%rcx\n    6726:\t48 01 c9             \tadd    %rcx,%rcx\n    6729:\t48 01 c8             \tadd    %rcx,%rax\n    672c:\t48 89 c1             \tmov    %rax,%rcx\n    672f:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n    6734:\t48 01 c8             \tadd    %rcx,%rax\n    6737:\t0f b6 00             \tmovzbl (%rax),%eax\n    673a:\t0f b6 c0             \tmovzbl %al,%eax\n    673d:\t0f af c2             \timul   %edx,%eax\n    6740:\t8d 3c 06             \tlea    (%rsi,%rax,1),%edi\n    6743:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n    6748:\t48 83 c0 06          \tadd    $0x6,%rax\n    674c:\t0f b6 00             \tmovzbl (%rax),%eax\n    674f:\t0f be c8             \tmovsbl %al,%ecx\n    6752:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    6756:\t48 63 f0             \tmovslq %eax,%rsi\n    6759:\t48 8b 54 24 e0       \tmov    -0x20(%rsp),%rdx\n    675e:\t48 89 d0             \tmov    %rdx,%rax\n    6761:\t48 01 c0             \tadd    %rax,%rax\n    6764:\t48 01 d0             \tadd    %rdx,%rax\n    6767:\t48 01 f0             \tadd    %rsi,%rax\n    676a:\t48 89 c2             \tmov    %rax,%rdx\n    676d:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n    6772:\t48 01 d0             \tadd    %rdx,%rax\n    6775:\t0f b6 00             \tmovzbl (%rax),%eax\n    6778:\t0f b6 c0             \tmovzbl %al,%eax\n    677b:\t0f af c1             \timul   %ecx,%eax\n    677e:\t8d 34 07             \tlea    (%rdi,%rax,1),%esi\n    6781:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n    6786:\t48 83 c0 07          \tadd    $0x7,%rax\n    678a:\t0f b6 00             \tmovzbl (%rax),%eax\n    678d:\t0f be d0             \tmovsbl %al,%edx\n    6790:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    6794:\t48 98                \tcltq   \n    6796:\t48 8b 4c 24 e0       \tmov    -0x20(%rsp),%rcx\n    679b:\t48 c1 e1 02          \tshl    $0x2,%rcx\n    679f:\t48 01 c8             \tadd    %rcx,%rax\n    67a2:\t48 89 c1             \tmov    %rax,%rcx\n    67a5:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n    67aa:\t48 01 c8             \tadd    %rcx,%rax\n    67ad:\t0f b6 00             \tmovzbl (%rax),%eax\n    67b0:\t0f b6 c0             \tmovzbl %al,%eax\n    67b3:\t0f af c2             \timul   %edx,%eax\n    67b6:\t01 f0                \tadd    %esi,%eax\n    67b8:\t0f af 44 24 08       \timul   0x8(%rsp),%eax\n    67bd:\t89 c2                \tmov    %eax,%edx\n    67bf:\t8b 44 24 c8          \tmov    -0x38(%rsp),%eax\n    67c3:\t01 c2                \tadd    %eax,%edx\n    67c5:\t8b 44 24 cc          \tmov    -0x34(%rsp),%eax\n    67c9:\t89 c1                \tmov    %eax,%ecx\n    67cb:\td3 fa                \tsar    %cl,%edx\n    67cd:\t8b 44 24 10          \tmov    0x10(%rsp),%eax\n    67d1:\t01 c2                \tadd    %eax,%edx\n    67d3:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    67d7:\t48 63 c8             \tmovslq %eax,%rcx\n    67da:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n    67df:\t48 01 c8             \tadd    %rcx,%rax\n    67e2:\t89 54 24 c4          \tmov    %edx,-0x3c(%rsp)\n    67e6:\t8b 54 24 c4          \tmov    -0x3c(%rsp),%edx\n    67ea:\tb2 00                \tmov    $0x0,%dl\n    67ec:\t85 d2                \ttest   %edx,%edx\n    67ee:\t74 0b                \tje     67fb <put_hevc_qpel_uni_w_v_8+0x288>\n    67f0:\t8b 54 24 c4          \tmov    -0x3c(%rsp),%edx\n    67f4:\tf7 da                \tneg    %edx\n    67f6:\tc1 fa 1f             \tsar    $0x1f,%edx\n    67f9:\teb 04                \tjmp    67ff <put_hevc_qpel_uni_w_v_8+0x28c>\n    67fb:\t8b 54 24 c4          \tmov    -0x3c(%rsp),%edx\n    67ff:\t88 10                \tmov    %dl,(%rax)\n    6801:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n    6806:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    680a:\t3b 44 24 28          \tcmp    0x28(%rsp),%eax\n    680e:\t0f 8c f8 fd ff ff    \tjl     660c <put_hevc_qpel_uni_w_v_8+0x99>\n    6814:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n    6819:\t48 01 44 24 f0       \tadd    %rax,-0x10(%rsp)\n    681e:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n    6823:\t48 01 44 24 e8       \tadd    %rax,-0x18(%rsp)\n    6828:\t83 44 24 f8 01       \taddl   $0x1,-0x8(%rsp)\n    682d:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n    6831:\t3b 44 24 9c          \tcmp    -0x64(%rsp),%eax\n    6835:\t0f 8c c4 fd ff ff    \tjl     65ff <put_hevc_qpel_uni_w_v_8+0x8c>\n    683b:\t90                   \tnop\n    683c:\t90                   \tnop\n    683d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall put_hevc_qpel_uni_w_v_8(__int64 a1, __int64 a2, __int64 a3,\n                                           __int64 a4, int a5, char a6, int a7,\n                                           int a8, int a9, __int64 a10,\n                                           int a11) {\n  int v11;\n  int v12;\n  __int64 result;\n  int v14;\n  char v15;\n  char *v16;\n  unsigned int i;\n  int j;\n  v16 = (char *)&ff_hevc_qpel_filters + Number * a10 - Number;\n  v15 = a6 + Number;\n  v14 = Number << (a6 + Number);\n  for (i = Number;; ++i) {\n    result = i;\n    if ((int)i >= a5)\n      break;\n    for (j = Number; j < a11; ++j) {\n      v11 =\n          a8 +\n          ((v14 +\n            a7 * (v16[Number] * *(unsigned __int8 *)(j + a4 + a3) +\n                  v16[Number] * *(unsigned __int8 *)(j + a3) +\n                  *(unsigned __int8 *)(j - Number * a4 + a3) * *v16 +\n                  v16[Number] * *(unsigned __int8 *)(j - Number * a4 + a3) +\n                  v16[Number] * *(unsigned __int8 *)(j - a4 + a3) +\n                  v16[Number] * *(unsigned __int8 *)(Number * a4 + j + a3) +\n                  v16[Number] * *(unsigned __int8 *)(j + Number * a4 + a3) +\n                  v16[Number] * *(unsigned __int8 *)(Number * a4 + j + a3))) >>\n           v15);\n      LOBYTE(v11) = Number;\n      if (v11)\n        v12 =\n            -(a8 +\n              ((v14 +\n                a7 * (v16[Number] * *(unsigned __int8 *)(j + a4 + a3) +\n                      v16[Number] * *(unsigned __int8 *)(j + a3) +\n                      *(unsigned __int8 *)(j - Number * a4 + a3) * *v16 +\n                      v16[Number] * *(unsigned __int8 *)(j - Number * a4 + a3) +\n                      v16[Number] * *(unsigned __int8 *)(j - a4 + a3) +\n                      v16[Number] * *(unsigned __int8 *)(Number * a4 + j + a3) +\n                      v16[Number] * *(unsigned __int8 *)(j + Number * a4 + a3) +\n                      v16[Number] *\n                          *(unsigned __int8 *)(Number * a4 + j + a3))) >>\n               v15)) >>\n            Number;\n      else\n        v12 = a8 +\n              ((v14 +\n                a7 * (v16[Number] * *(unsigned __int8 *)(j + a4 + a3) +\n                      v16[Number] * *(unsigned __int8 *)(j + a3) +\n                      *(unsigned __int8 *)(j - Number * a4 + a3) * *v16 +\n                      v16[Number] * *(unsigned __int8 *)(j - Number * a4 + a3) +\n                      v16[Number] * *(unsigned __int8 *)(j - a4 + a3) +\n                      v16[Number] * *(unsigned __int8 *)(Number * a4 + j + a3) +\n                      v16[Number] * *(unsigned __int8 *)(j + Number * a4 + a3) +\n                      v16[Number] *\n                          *(unsigned __int8 *)(Number * a4 + j + a3))) >>\n               v15);\n      *(_BYTE *)(j + a1) = v12;\n    }\n    a3 += a4;\n    a1 += a2;\n  }\n  return result;\n}", "code_t": "void __cdecl put_hevc_qpel_uni_w_v_8(\n    uint8_t *<span class=\"supfact\">_dst</span>, ptrdiff_t <span class=\"supfact\">_dststride</span>,\n    uint8_t *<span class=\"supfact\">_src</span>, ptrdiff_t <span class=\"supfact\">_srcstride</span>,\n    int <span class=\"supfact\">height</span>, int <span class=\"supfact\">denom</span>,\n    int <span class=\"supfact\">wx</span>, int <span class=\"supfact\">ox</span>, intptr_t <span class=\"supfact\">mx</span>,\n    intptr_t <span class=\"supfact\">my</span>, int <span class=\"supfact\">width</span>) {\n  int v11;\n  int v12;\n  int <span class=\"supfact\">offset</span>;\n  char <span class=\"supfact\">shift</span>;\n  const int8_t *<span class=\"supfact\">filter</span>;\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">x</span>;\n  <span class=\"supfact\">filter</span> =\n      &ff_hevc_qpel_filters[Number * <span class=\"supfact\">my</span> - Number];\n  <span class=\"supfact\">shift</span> = <span class=\"supfact\">denom</span> + Number;\n  <span class=\"supfact\">offset</span> = Number << (<span class=\"supfact\">denom</span> + Number);\n  for (<span class=\"supfact\">y</span> = Number; <span class=\"supfact\">y</span> < <span class=\"supfact\">height</span>;\n       ++<span class=\"supfact\">y</span>) {\n    for (<span class=\"supfact\">x</span> = Number; <span class=\"supfact\">x</span> < <span class=\"supfact\">width</span>;\n         ++<span class=\"supfact\">x</span>) {\n      v11 =\n          <span class=\"supfact\">ox</span> +\n          ((<span class=\"supfact\">offset</span> +\n            <span class=\"supfact\">wx</span> *\n                (<span class=\"supfact\">filter</span>[Number] *\n                     <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> +\n                                          <span class=\"supfact\">_srcstride</span>] +\n                 <span class=\"supfact\">filter</span>[Number] *\n                     <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span>] +\n                 <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> -\n                                      Number * <span class=\"supfact\">_srcstride</span>] *\n                     *<span class=\"supfact\">filter</span> +\n                 <span class=\"supfact\">filter</span>[Number] *\n                     <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> -\n                                          Number * <span class=\"supfact\">_srcstride</span>] +\n                 <span class=\"supfact\">filter</span>[Number] *\n                     <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> -\n                                          <span class=\"supfact\">_srcstride</span>] +\n                 <span class=\"supfact\">filter</span>[Number] *\n                     <span class=\"supfact\">_src</span>[Number * <span class=\"supfact\">_srcstride</span> +\n                                          <span class=\"supfact\">x</span>] +\n                 <span class=\"supfact\">filter</span>[Number] *\n                     <span class=\"supfact\">_src</span>[Number * <span class=\"supfact\">_srcstride</span> +\n                                          <span class=\"supfact\">x</span>] +\n                 <span class=\"supfact\">filter</span>[Number] *\n                     <span class=\"supfact\">_src</span>[Number * <span class=\"supfact\">_srcstride</span> +\n                                          <span class=\"supfact\">x</span>])) >>\n           <span class=\"supfact\">shift</span>);\n      LOBYTE(v11) = Number;\n      if (v11)\n        v12 =\n            -(<span class=\"supfact\">ox</span> +\n              ((<span class=\"supfact\">offset</span> +\n                <span class=\"supfact\">wx</span> *\n                    (<span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> +\n                                              <span class=\"supfact\">_srcstride</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span>] +\n                     <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> -\n                                          Number * <span class=\"supfact\">_srcstride</span>] *\n                         *<span class=\"supfact\">filter</span> +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> -\n                                              Number *\n                                                  <span class=\"supfact\">_srcstride</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> -\n                                              <span class=\"supfact\">_srcstride</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[Number *\n                                                  <span class=\"supfact\">_srcstride</span> +\n                                              <span class=\"supfact\">x</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[Number *\n                                                  <span class=\"supfact\">_srcstride</span> +\n                                              <span class=\"supfact\">x</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[Number *\n                                                  <span class=\"supfact\">_srcstride</span> +\n                                              <span class=\"supfact\">x</span>])) >>\n               <span class=\"supfact\">shift</span>)) >>\n            Number;\n      else\n        v12 = <span class=\"supfact\">ox</span> +\n              ((<span class=\"supfact\">offset</span> +\n                <span class=\"supfact\">wx</span> *\n                    (<span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> +\n                                              <span class=\"supfact\">_srcstride</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span>] +\n                     <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> -\n                                          Number * <span class=\"supfact\">_srcstride</span>] *\n                         *<span class=\"supfact\">filter</span> +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> -\n                                              Number *\n                                                  <span class=\"supfact\">_srcstride</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[<span class=\"supfact\">x</span> -\n                                              <span class=\"supfact\">_srcstride</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[Number *\n                                                  <span class=\"supfact\">_srcstride</span> +\n                                              <span class=\"supfact\">x</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[Number *\n                                                  <span class=\"supfact\">_srcstride</span> +\n                                              <span class=\"supfact\">x</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         <span class=\"supfact\">_src</span>[Number *\n                                                  <span class=\"supfact\">_srcstride</span> +\n                                              <span class=\"supfact\">x</span>])) >>\n               <span class=\"supfact\">shift</span>);\n      <span class=\"supfact\">_dst</span>[<span class=\"supfact\">x</span>] = v12;\n    }\n    <span class=\"supfact\">_src</span> += <span class=\"supfact\">_srcstride</span>;\n    <span class=\"supfact\">_dst</span> += <span class=\"supfact\">_dststride</span>;\n  }\n}", "var": [{"name": "a1", "type": "uint8_t *", "pred_name": "_dst", "ref_name": "_dst", "ref_type": "uint8_t *"}, {"name": "a2", "type": "ptrdiff_t", "pred_name": "_dststride", "ref_name": "_dststride", "ref_type": "ptrdiff_t"}, {"name": "a3", "type": "uint8_t *", "pred_name": "_src", "ref_name": "_src", "ref_type": "uint8_t *"}, {"name": "a4", "type": "ptrdiff_t", "pred_name": "_srcstride", "ref_name": "_srcstride", "ref_type": "ptrdiff_t"}, {"name": "a5", "type": "int", "pred_name": "height", "ref_name": "height", "ref_type": "int"}, {"name": "a6", "type": "int", "pred_name": "denom", "ref_name": "denom", "ref_type": "int"}, {"name": "a7", "type": "int", "pred_name": "_wx", "ref_name": "wx", "ref_type": "int"}, {"name": "a8", "type": "int", "pred_name": "_ox", "ref_name": "ox", "ref_type": "int"}, {"name": "a9", "type": "intptr_t", "pred_name": "mx", "ref_name": "mx", "ref_type": "intptr_t"}, {"name": "a10", "type": "intptr_t", "pred_name": "my", "ref_name": "my", "ref_type": "intptr_t"}, {"name": "a11", "type": "int", "pred_name": "width", "ref_name": "width", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v14", "type": "int", "pred_name": "offset", "ref_name": "offset", "ref_type": "int"}, {"name": "v15", "type": "char", "pred_name": "shift", "ref_name": "shift", "ref_type": "char"}, {"name": "v16", "type": "const int8_t *", "pred_name": "filter", "ref_name": "filter", "ref_type": "const int8_t *"}, {"name": "i", "type": "int", "pred_name": "y", "ref_name": "y", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "x", "ref_name": "x", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "lvgeek", "repo_name": "kodibackup", "path": "lvgeek/kodibackup/e68d7178a6f255da997ccfad60a78f65a04e94f15d59722ed377795ed4007d53", "path_in_repo": "lvgeek/kodibackup/temp/src/pigpio-master/pigs", "objdump": "", "code_s": "char *getenv(const char *name) { return getenv(name); }", "code_t": "char *getenv(const char *<span class=\"supfact\">name</span>) {\n  return getenv(<span class=\"supfact\">name</span>);\n}", "var": [{"name": "name", "type": "const char *", "pred_name": "name", "ref_name": "name", "ref_type": "const char *"}], "body_in_train": true}, {"repo_owner": "ubinix-warun", "repo_name": "sketchbook-promela", "path": "ubinix-warun/sketchbook-promela/a1c645ce325cf0b59b50843a90e6b607e780b09a70a2b9b0ff15edca0d2a8ded", "path_in_repo": "ubinix-warun/sketchbook-promela/cheatsheet/Spin644/Src6.4.4/spin", "objdump": "000000000041fc56 <reverse_names>:\n  41fc56:\t55                   \tpush   %rbp\n  41fc57:\t48 89 e5             \tmov    %rsp,%rbp\n  41fc5a:\t48 83 ec 10          \tsub    $0x10,%rsp\n  41fc5e:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  41fc62:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  41fc67:\t74 35                \tje     41fc9e <reverse_names+0x48>\n  41fc69:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41fc6d:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  41fc71:\t48 89 c7             \tmov    %rax,%rdi\n  41fc74:\te8 dd ff ff ff       \tcallq  41fc56 <reverse_names>\n  41fc79:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41fc7d:\t48 8b 00             \tmov    (%rax),%rax\n  41fc80:\t48 8b 10             \tmov    (%rax),%rdx\n  41fc83:\t48 8b 05 ee 63 0f 00 \tmov    0xf63ee(%rip),%rax        # 516078 <tc>\n  41fc8a:\tbe 80 6b 49 00       \tmov    $0x496b80,%esi\n  41fc8f:\t48 89 c7             \tmov    %rax,%rdi\n  41fc92:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41fc97:\te8 24 25 fe ff       \tcallq  4021c0 <fprintf@plt>\n  41fc9c:\teb 01                \tjmp    41fc9f <reverse_names+0x49>\n  41fc9e:\t90                   \tnop\n  41fc9f:\tc9                   \tleaveq \n  41fca0:\tc3                   \tretq   ", "code_s": "int __fastcall reverse_names(__int64 a1) {\n  int result;\n  if (a1) {\n    reverse_names(*(_QWORD *)(a1 + Number));\n    result = fprintf(tc, String, **(const char ***)a1);\n  }\n  return result;\n}", "code_t": "void __cdecl reverse_names(ProcList_0 *<span class=\"supfact\">p</span>) {\n  if (<span class=\"supfact\">p</span>) {\n    reverse_names(<span class=\"supfact\">p</span>->nxt);\n    fprintf(tc, String, <span class=\"supfact\">p</span>->n->name);\n  }\n}", "var": [{"name": "a1", "type": "STATE *", "pred_name": "state", "ref_name": "p", "ref_type": "ProcList_0 *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "luknw", "repo_name": "os", "path": "luknw/os/47fee36e901e6a93f22ec387f90c4f4bca6e462af8baa0e4e5be9948804b7d51", "path_in_repo": "luknw/os/barberqueue/mothership_SYSV", "objdump": "000000000040363e <safe_fmemopen>:\n  40363e:\t55                   \tpush   %rbp\n  40363f:\t48 89 e5             \tmov    %rsp,%rbp\n  403642:\t48 83 ec 30          \tsub    $0x30,%rsp\n  403646:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40364a:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40364e:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  403652:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  403656:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  40365a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40365e:\t48 89 ce             \tmov    %rcx,%rsi\n  403661:\t48 89 c7             \tmov    %rax,%rdi\n  403664:\te8 07 ea ff ff       \tcallq  402070 <fmemopen@plt>\n  403669:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40366d:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  403672:\t75 14                \tjne    403688 <safe_fmemopen+0x4a>\n  403674:\tbf ed 46 40 00       \tmov    $0x4046ed,%edi\n  403679:\te8 22 ec ff ff       \tcallq  4022a0 <perror@plt>\n  40367e:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  403683:\te8 a8 ec ff ff       \tcallq  402330 <exit@plt>\n  403688:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40368c:\tc9                   \tleaveq \n  40368d:\tc3                   \tretq   ", "code_s": "FILE *__fastcall safe_fmemopen(void *a1, size_t a2, const char *a3) {\n  FILE *v4;\n  v4 = fmemopen(a1, a2, a3);\n  if (!v4) {\n    perror(String);\n    exit(Number);\n  }\n  return v4;\n}", "code_t": "FILE *__cdecl safe_fmemopen(void *<span class=\"supfact\">pMem</span>,\n                            size_t <span class=\"supfact\">len</span>,\n                            const char *<span class=\"supfact\">modes</span>) {\n  FILE *<span class=\"supfact\">sMem</span>;\n  <span class=\"supfact\">sMem</span> = fmemopen(<span class=\"supfact\">pMem</span>, <span class=\"supfact\">len</span>,\n                                  <span class=\"supfact\">modes</span>);\n  if (!<span class=\"supfact\">sMem</span>) {\n    perror(String);\n    exit(Number);\n  }\n  return <span class=\"supfact\">sMem</span>;\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "pMem", "ref_name": "pMem", "ref_type": "void *"}, {"name": "a2", "type": "size_t", "pred_name": "len", "ref_name": "len", "ref_type": "size_t"}, {"name": "a3", "type": "size_t", "pred_name": "modes", "ref_name": "modes", "ref_type": "const char *"}, {"name": "v4", "type": "FILE *", "pred_name": "sMem", "ref_name": "sMem", "ref_type": "FILE *"}], "body_in_train": true}, {"repo_owner": "fidele007", "repo_name": "structured-data-learning", "path": "fidele007/structured-data-learning/f1f6e0dbb3521f7163b79f0ffa3cb7d69189788a01fe63ce3c079f167bf3db5a", "path_in_repo": "fidele007/structured-data-learning/svm-python-v204/svm_light/svm_common.o", "objdump": "00000000000041e7 <my_malloc>:\n    41e7:\t55                   \tpush   %rbp\n    41e8:\t48 89 e5             \tmov    %rsp,%rbp\n    41eb:\t48 83 ec 20          \tsub    $0x20,%rsp\n    41ef:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    41f3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    41f7:\t48 89 c7             \tmov    %rax,%rdi\n    41fa:\te8 00 00 00 00       \tcallq  41ff <my_malloc+0x18>\n    41ff:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4203:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    4208:\t75 14                \tjne    421e <my_malloc+0x37>\n    420a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    420f:\te8 00 00 00 00       \tcallq  4214 <my_malloc+0x2d>\n    4214:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4219:\te8 00 00 00 00       \tcallq  421e <my_malloc+0x37>\n    421e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4222:\tc9                   \tleaveq \n    4223:\tc3                   \tretq   ", "code_s": "void *__fastcall my_malloc(size_t a1) {\n  void *v2;\n  v2 = malloc(a1);\n  if (!v2) {\n    perror(String);\n    exit(Number);\n  }\n  return v2;\n}", "code_t": "void *__cdecl my_malloc(size_t <span class=\"supfact\">size</span>) {\n  void *<span class=\"supfact\">ptr</span>;\n  <span class=\"supfact\">ptr</span> = malloc(<span class=\"supfact\">size</span>);\n  if (!<span class=\"supfact\">ptr</span>) {\n    perror(String);\n    exit(Number);\n  }\n  return <span class=\"supfact\">ptr</span>;\n}", "var": [{"name": "a1", "type": "size_t", "pred_name": "size", "ref_name": "size", "ref_type": "size_t"}, {"name": "v2", "type": "void *", "pred_name": "p", "ref_name": "ptr", "ref_type": "void *"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/53d830a43215f228fc0a4c27e6f0f8ad5a6e43d5f5cf7f601c574db1fd46c809", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/recfile", "objdump": "0000000000481f76 <grp_lock_unset_owner_thread>:\n  481f76:\t55                   \tpush   %rbp\n  481f77:\t48 89 e5             \tmov    %rsp,%rbp\n  481f7a:\t53                   \tpush   %rbx\n  481f7b:\t48 83 ec 18          \tsub    $0x18,%rsp\n  481f7f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  481f83:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  481f87:\t48 8b 58 40          \tmov    0x40(%rax),%rbx\n  481f8b:\te8 2f b3 ff ff       \tcallq  47d2bf <pj_thread_this>\n  481f90:\t48 39 c3             \tcmp    %rax,%rbx\n  481f93:\t74 19                \tje     481fae <grp_lock_unset_owner_thread+0x38>\n  481f95:\tb9 e0 5e 4a 00       \tmov    $0x4a5ee0,%ecx\n  481f9a:\tba 11 01 00 00       \tmov    $0x111,%edx\n  481f9f:\tbe 50 5d 4a 00       \tmov    $0x4a5d50,%esi\n  481fa4:\tbf 88 5d 4a 00       \tmov    $0x4a5d88,%edi\n  481fa9:\te8 52 41 f8 ff       \tcallq  406100 <__assert_fail@plt>\n  481fae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  481fb2:\t8b 40 48             \tmov    0x48(%rax),%eax\n  481fb5:\t85 c0                \ttest   %eax,%eax\n  481fb7:\t7f 19                \tjg     481fd2 <grp_lock_unset_owner_thread+0x5c>\n  481fb9:\tb9 e0 5e 4a 00       \tmov    $0x4a5ee0,%ecx\n  481fbe:\tba 12 01 00 00       \tmov    $0x112,%edx\n  481fc3:\tbe 50 5d 4a 00       \tmov    $0x4a5d50,%esi\n  481fc8:\tbf a9 5d 4a 00       \tmov    $0x4a5da9,%edi\n  481fcd:\te8 2e 41 f8 ff       \tcallq  406100 <__assert_fail@plt>\n  481fd2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  481fd6:\t8b 40 48             \tmov    0x48(%rax),%eax\n  481fd9:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  481fdc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  481fe0:\t89 50 48             \tmov    %edx,0x48(%rax)\n  481fe3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  481fe7:\t8b 40 48             \tmov    0x48(%rax),%eax\n  481fea:\t85 c0                \ttest   %eax,%eax\n  481fec:\t7f 17                \tjg     482005 <grp_lock_unset_owner_thread+0x8f>\n  481fee:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  481ff2:\t48 c7 40 40 00 00 00 \tmovq   $0x0,0x40(%rax)\n  481ff9:\t00 \n  481ffa:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  481ffe:\tc7 40 48 00 00 00 00 \tmovl   $0x0,0x48(%rax)\n  482005:\t90                   \tnop\n  482006:\t48 83 c4 18          \tadd    $0x18,%rsp\n  48200a:\t5b                   \tpop    %rbx\n  48200b:\t5d                   \tpop    %rbp\n  48200c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall grp_lock_unset_owner_thread(__int64 a1) {\n  __int64 v1;\n  __int64 result;\n  v1 = *(_QWORD *)(a1 + Number);\n  if (v1 != pj_thread_this())\n    __assert_fail(String, String, Number, String);\n  if (*(int *)(a1 + Number) <= Number)\n    __assert_fail(String, String, Number, String);\n  result = (unsigned int)--*(_DWORD *)(a1 + Number);\n  if ((int)result <= Number) {\n    *(_QWORD *)(a1 + Number) = Number L;\n    result = a1;\n    *(_DWORD *)(a1 + Number) = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl grp_lock_unset_owner_thread(\n    pj_grp_lock_t_0 *<span class=\"supfact\">glock</span>) {\n  pj_thread_t_0 *<span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = <span class=\"supfact\">glock</span>->owner;\n  if (<span class=\"supfact\">v1</span> != pj_thread_this())\n    __assert_fail(String, String, Number, String);\n  if (<span class=\"supfact\">glock</span>->owner_cnt <= Number)\n    __assert_fail(String, String, Number, String);\n  if (--<span class=\"supfact\">glock</span>->owner_cnt <= Number) {\n    <span class=\"supfact\">glock</span>->owner = Number L;\n    <span class=\"supfact\">glock</span>->owner_cnt = Number;\n  }\n}", "var": [{"name": "a1", "type": "pj_grp_lock_t_0 *", "pred_name": "glock", "ref_name": "glock", "ref_type": "pj_grp_lock_t_0 *"}, {"name": "v1", "type": "pj_thread_t_0 *", "pred_name": "v1", "ref_name": "v1", "ref_type": "pj_thread_t_0 *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "popo55668", "repo_name": "DAG-Aware-MIG-Rewriting", "path": "popo55668/DAG-Aware-MIG-Rewriting/8b9aa039fdbb94e5eec295199e1c953b988c49e81fa51f8ca29b914b0be9b6f4", "path_in_repo": "popo55668/DAG-Aware-MIG-Rewriting//src/opt/csw/cswCore.o", "objdump": "00000000000007f4 <Vec_VecSortCompare1>:\n     7f4:\t55                   \tpush   %rbp\n     7f5:\t48 89 e5             \tmov    %rsp,%rbp\n     7f8:\t53                   \tpush   %rbx\n     7f9:\t48 83 ec 10          \tsub    $0x10,%rsp\n     7fd:\t48 89 7d f0          \tmov    %rdi,-0x10(%rbp)\n     801:\t48 89 75 e8          \tmov    %rsi,-0x18(%rbp)\n     805:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     809:\t48 8b 00             \tmov    (%rax),%rax\n     80c:\t48 89 c7             \tmov    %rax,%rdi\n     80f:\te8 3f fc ff ff       \tcallq  453 <Vec_PtrSize>\n     814:\t89 c3                \tmov    %eax,%ebx\n     816:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     81a:\t48 8b 00             \tmov    (%rax),%rax\n     81d:\t48 89 c7             \tmov    %rax,%rdi\n     820:\te8 2e fc ff ff       \tcallq  453 <Vec_PtrSize>\n     825:\t39 c3                \tcmp    %eax,%ebx\n     827:\t7d 07                \tjge    830 <Vec_VecSortCompare1+0x3c>\n     829:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     82e:\teb 30                \tjmp    860 <Vec_VecSortCompare1+0x6c>\n     830:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     834:\t48 8b 00             \tmov    (%rax),%rax\n     837:\t48 89 c7             \tmov    %rax,%rdi\n     83a:\te8 14 fc ff ff       \tcallq  453 <Vec_PtrSize>\n     83f:\t89 c3                \tmov    %eax,%ebx\n     841:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     845:\t48 8b 00             \tmov    (%rax),%rax\n     848:\t48 89 c7             \tmov    %rax,%rdi\n     84b:\te8 03 fc ff ff       \tcallq  453 <Vec_PtrSize>\n     850:\t39 c3                \tcmp    %eax,%ebx\n     852:\t7e 07                \tjle    85b <Vec_VecSortCompare1+0x67>\n     854:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     859:\teb 05                \tjmp    860 <Vec_VecSortCompare1+0x6c>\n     85b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     860:\t48 83 c4 10          \tadd    $0x10,%rsp\n     864:\t5b                   \tpop    %rbx\n     865:\t5d                   \tpop    %rbp\n     866:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Vec_VecSortCompare1(__int64 *a1, __int64 *a2) {\n  int v2;\n  int v4;\n  v2 = Vec_PtrSize(*a1);\n  if (v2 < (int)Vec_PtrSize(*a2))\n    return Number;\n  v4 = Vec_PtrSize(*a1);\n  return v4 > (int)Vec_PtrSize(*a2);\n}", "code_t": "int __cdecl Vec_VecSortCompare1(Vec_Ptr_t **<span class=\"supfact\">pp1</span>,\n                                Vec_Ptr_t **<span class=\"supfact\">pp2</span>) {\n  int v2;\n  int v4;\n  v2 = Vec_PtrSize(*<span class=\"supfact\">pp1</span>);\n  if (v2 < Vec_PtrSize(*<span class=\"supfact\">pp2</span>))\n    return Number;\n  v4 = Vec_PtrSize(*<span class=\"supfact\">pp1</span>);\n  return v4 > Vec_PtrSize(*<span class=\"supfact\">pp2</span>);\n}", "var": [{"name": "a1", "type": "Vec_Ptr_t * *", "pred_name": "pp1", "ref_name": "pp1", "ref_type": "Vec_Ptr_t * *"}, {"name": "a2", "type": "Vec_Ptr_t * *", "pred_name": "pp2", "ref_name": "pp2", "ref_type": "Vec_Ptr_t * *"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/5b20b1d7f24861e1ed26f4141fba93e21c6c267329ff208155e802f55f394d35", "path_in_repo": "XanClic/qemu//sh4eb-softmmu/tcg/tcg-op-gvec.o", "objdump": "0000000000005a0d <check_overlap_3>:\n    5a0d:\t55                   \tpush   %rbp\n    5a0e:\t48 89 e5             \tmov    %rsp,%rbp\n    5a11:\t48 83 ec 10          \tsub    $0x10,%rsp\n    5a15:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    5a18:\t89 75 f8             \tmov    %esi,-0x8(%rbp)\n    5a1b:\t89 55 f4             \tmov    %edx,-0xc(%rbp)\n    5a1e:\t89 4d f0             \tmov    %ecx,-0x10(%rbp)\n    5a21:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n    5a24:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n    5a27:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    5a2a:\t89 ce                \tmov    %ecx,%esi\n    5a2c:\t89 c7                \tmov    %eax,%edi\n    5a2e:\te8 aa ff ff ff       \tcallq  59dd <check_overlap_2>\n    5a33:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n    5a36:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n    5a39:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    5a3c:\t89 ce                \tmov    %ecx,%esi\n    5a3e:\t89 c7                \tmov    %eax,%edi\n    5a40:\te8 98 ff ff ff       \tcallq  59dd <check_overlap_2>\n    5a45:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n    5a48:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n    5a4b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    5a4e:\t89 ce                \tmov    %ecx,%esi\n    5a50:\t89 c7                \tmov    %eax,%edi\n    5a52:\te8 86 ff ff ff       \tcallq  59dd <check_overlap_2>\n    5a57:\t90                   \tnop\n    5a58:\tc9                   \tleaveq \n    5a59:\tc3                   \tretq   ", "code_s": "__int64 __fastcall check_overlap_3(unsigned int a1, unsigned int a2,\n                                   unsigned int a3, int a4) {\n  check_overlap_2(a1, a2, a4);\n  check_overlap_2(a1, a3, a4);\n  return check_overlap_2(a2, a3, a4);\n}", "code_t": "void __cdecl check_overlap_3(uint32_t <span class=\"supfact\">d</span>,\n                             uint32_t <span class=\"supfact\">a</span>,\n                             uint32_t <span class=\"supfact\">b</span>,\n                             uint32_t <span class=\"supfact\">s</span>) {\n  check_overlap_2(<span class=\"supfact\">d</span>, <span class=\"supfact\">a</span>, <span class=\"supfact\">s</span>);\n  check_overlap_2(<span class=\"supfact\">d</span>, <span class=\"supfact\">b</span>, <span class=\"supfact\">s</span>);\n  check_overlap_2(<span class=\"supfact\">a</span>, <span class=\"supfact\">b</span>, <span class=\"supfact\">s</span>);\n}", "var": [{"name": "a1", "type": "uint32_t", "pred_name": "d", "ref_name": "d", "ref_type": "uint32_t"}, {"name": "a2", "type": "uint32_t", "pred_name": "a", "ref_name": "a", "ref_type": "uint32_t"}, {"name": "a3", "type": "uint32_t", "pred_name": "b", "ref_name": "b", "ref_type": "uint32_t"}, {"name": "a4", "type": "uint32_t", "pred_name": "s", "ref_name": "s", "ref_type": "uint32_t"}], "body_in_train": true}, {"repo_owner": "CPFL", "repo_name": "gxen", "path": "CPFL/gxen/c35b9846bdf3bbe7eb6ad5adfa09ee3654099b36f1db890750fd388704352071", "path_in_repo": "CPFL/gxen/tools/qemu-xen-traditional/qemu-nbd", "objdump": "0000000000421d6b <raw_create>:\n  421d6b:\t55                   \tpush   %rbp\n  421d6c:\t48 89 e5             \tmov    %rsp,%rbp\n  421d6f:\t48 83 ec 30          \tsub    $0x30,%rsp\n  421d73:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  421d77:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  421d7b:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  421d7f:\t89 4d d4             \tmov    %ecx,-0x2c(%rbp)\n  421d82:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n  421d86:\t75 07                \tjne    421d8f <raw_create+0x24>\n  421d88:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  421d8d:\t74 07                \tje     421d96 <raw_create+0x2b>\n  421d8f:\tb8 a1 ff ff ff       \tmov    $0xffffffa1,%eax\n  421d94:\teb 52                \tjmp    421de8 <raw_create+0x7d>\n  421d96:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  421d9a:\tba a4 01 00 00       \tmov    $0x1a4,%edx\n  421d9f:\tbe 41 02 00 00       \tmov    $0x241,%esi\n  421da4:\t48 89 c7             \tmov    %rax,%rdi\n  421da7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  421dac:\te8 7f 18 fe ff       \tcallq  403630 <open64@plt>\n  421db1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  421db4:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  421db8:\t79 07                \tjns    421dc1 <raw_create+0x56>\n  421dba:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n  421dbf:\teb 27                \tjmp    421de8 <raw_create+0x7d>\n  421dc1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  421dc5:\t48 c1 e0 09          \tshl    $0x9,%rax\n  421dc9:\t48 89 c2             \tmov    %rax,%rdx\n  421dcc:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  421dcf:\t48 89 d6             \tmov    %rdx,%rsi\n  421dd2:\t89 c7                \tmov    %eax,%edi\n  421dd4:\te8 c7 13 fe ff       \tcallq  4031a0 <ftruncate64@plt>\n  421dd9:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  421ddc:\t89 c7                \tmov    %eax,%edi\n  421dde:\te8 ed 18 fe ff       \tcallq  4036d0 <close@plt>\n  421de3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  421de8:\tc9                   \tleaveq \n  421de9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall raw_create(const char *a1, __int64 a2, __int64 a3, int a4) {\n  int fd;\n  if (a4 || a3)\n    return Number L;\n  fd = open64(a1, Number, Number L);\n  if (fd < Number)\n    return Number L;\n  ftruncate64(fd, a2 << Number);\n  close(fd);\n  return Number L;\n}", "code_t": "int __cdecl raw_create(const char *<span class=\"supfact\">filename</span>,\n                       int64_t <span class=\"supfact\">total_size</span>,\n                       const char *<span class=\"supfact\">backing_file</span>,\n                       int <span class=\"supfact\">flags</span>) {\n  int <span class=\"supfact\">fd</span>;\n  if (<span class=\"supfact\">flags</span> || <span class=\"supfact\">backing_file</span>)\n    return Number;\n  <span class=\"supfact\">fd</span> = open64(<span class=\"supfact\">filename</span>, Number, Number L);\n  if (<span class=\"supfact\">fd</span> < Number)\n    return Number;\n  ftruncate64(<span class=\"supfact\">fd</span>, <span class=\"supfact\">total_size</span> << Number);\n  close(<span class=\"supfact\">fd</span>);\n  return Number;\n}", "var": [{"name": "a1", "type": "const char *", "pred_name": "filename", "ref_name": "filename", "ref_type": "const char *"}, {"name": "a2", "type": "int64_t", "pred_name": "total_size", "ref_name": "total_size", "ref_type": "int64_t"}, {"name": "a3", "type": "const char *", "pred_name": "backing_file", "ref_name": "backing_file", "ref_type": "const char *"}, {"name": "a4", "type": "int", "pred_name": "flags", "ref_name": "flags", "ref_type": "int"}, {"name": "fd", "type": "int", "pred_name": "fd", "ref_name": "fd", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/af4a34ceecd9a87fd3e5a0029c8f79de9225a5c3b51e2361fd394a2608d155c0", "path_in_repo": "AlexanderVangelov/pjsip//pjsip/build/output/pjsua-lib-x86_64-unknown-linux-gnu/pjsua_call.o", "objdump": "0000000000000160 <pj_bzero>:\n     160:\t55                   \tpush   %rbp\n     161:\t48 89 e5             \tmov    %rsp,%rbp\n     164:\t48 83 ec 10          \tsub    $0x10,%rsp\n     168:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     16c:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n     170:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     174:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     178:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     17d:\t48 89 c7             \tmov    %rax,%rdi\n     180:\te8 00 00 00 00       \tcallq  185 <pj_bzero+0x25>\n     185:\t90                   \tnop\n     186:\tc9                   \tleaveq \n     187:\tc3                   \tretq   ", "code_s": "void *__fastcall pj_bzero(void *a1, size_t a2) {\n  return memset(a1, Number, a2);\n}", "code_t": "void __cdecl pj_bzero(void *<span class=\"supfact\">dst</span>,\n                      pj_size_t <span class=\"supfact\">size</span>) {\n  memset(<span class=\"supfact\">dst</span>, Number, <span class=\"supfact\">size</span>);\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "dst", "ref_name": "dst", "ref_type": "void *"}, {"name": "a2", "type": "pj_size_t", "pred_name": "size", "ref_name": "size", "ref_type": "pj_size_t"}], "body_in_train": true}, {"repo_owner": "Azeirah", "repo_name": "projectSlimotica", "path": "Azeirah/projectSlimotica/5c9ac959008054b31b4d037050ddae4aab8fb2bb6aee23f0732d190a63f21647", "path_in_repo": "Azeirah/projectSlimotica/domotica/contiki/examples/hello-world/obj_native/netflood.o", "objdump": "000000000000028e <netflood_close>:\n 28e:\t55                   \tpush   %rbp\n 28f:\t48 89 e5             \tmov    %rsp,%rbp\n 292:\t48 83 ec 10          \tsub    $0x10,%rsp\n 296:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n 29a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 29e:\t48 89 c7             \tmov    %rax,%rdi\n 2a1:\te8 00 00 00 00       \tcallq  2a6 <netflood_close+0x18>\n 2a6:\t90                   \tnop\n 2a7:\tc9                   \tleaveq \n 2a8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall netflood_close(__int64 a1) { return ipolite_close(a1); }", "code_t": "void __cdecl netflood_close(netflood_conn *<span class=\"supfact\">c</span>) {\n  ipolite_close(<span class=\"supfact\">c</span>);\n}", "var": [{"name": "a1", "type": "netflood_conn *", "pred_name": "c", "ref_name": "c", "ref_type": "netflood_conn *"}], "body_in_train": true}, {"repo_owner": "TheDemon12", "repo_name": "msm8916", "path": "TheDemon12/msm8916/47177211625347dbe27099ef4adc8b855512c9b4c87d10791acd1da577626e45", "path_in_repo": "TheDemon12/msm8916/tools/perf/util/symbol-elf.o", "objdump": "00000000000028a7 <symbol__elf_init>:\n    28a7:\t55                   \tpush   %rbp\n    28a8:\t48 89 e5             \tmov    %rsp,%rbp\n    28ab:\t48 83 ec 10          \tsub    $0x10,%rsp\n    28af:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    28b6:\t00 00 \n    28b8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    28bc:\t31 c0                \txor    %eax,%eax\n    28be:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    28c3:\te8 00 00 00 00       \tcallq  28c8 <symbol__elf_init+0x21>\n    28c8:\t90                   \tnop\n    28c9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    28cd:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    28d4:\t00 00 \n    28d6:\t74 05                \tje     28dd <symbol__elf_init+0x36>\n    28d8:\te8 00 00 00 00       \tcallq  28dd <symbol__elf_init+0x36>\n    28dd:\tc9                   \tleaveq \n    28de:\tc3                   \tretq   \n", "code_s": "unsigned __int64 symbol__elf_init() {\n  unsigned __int64 v1;\n  v1 = __readfsqword(Number);\n  elf_version(Number L);\n  return __readfsqword(Number) ^ v1;\n}", "code_t": "void __cdecl symbol__elf_init() { elf_version(Number L); }", "var": [{"name": "v1", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/72d863e358d23a9787e1d769e3a76917875ec295a59ff580baf5a03eba41f638", "path_in_repo": "ftnapps/pkg-sbbs/src/uifc/gcc.linux.exe.debug/uifctest", "objdump": "0000000000417f54 <init_mode>:\n  417f54:\t55                   \tpush   %rbp\n  417f55:\t48 89 e5             \tmov    %rsp,%rbp\n  417f58:\t48 83 ec 40          \tsub    $0x40,%rsp\n  417f5c:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n  417f5f:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  417f62:\t89 c7                \tmov    %eax,%edi\n  417f64:\te8 d6 2f 00 00       \tcallq  41af3f <find_vmode>\n  417f69:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  417f6c:\t83 7d f8 ff          \tcmpl   $0xffffffff,-0x8(%rbp)\n  417f70:\t75 1e                \tjne    417f90 <init_mode+0x3c>\n  417f72:\tc7 05 c4 b4 04 00 19 \tmovl   $0xfffffc19,0x4b4c4(%rip)        # 463440 <console_new_mode>\n  417f79:\tfc ff ff \n  417f7c:\tbf b8 dc 46 00       \tmov    $0x46dcb8,%edi\n  417f81:\te8 ac 7d 00 00       \tcallq  41fd32 <xp_sem_post>\n  417f86:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  417f8b:\te9 64 01 00 00       \tjmpq   4180f4 <init_mode+0x1a0>\n  417f90:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  417f93:\t48 98                \tcltq   \n  417f95:\t48 c1 e0 05          \tshl    $0x5,%rax\n  417f99:\t48 8d 88 80 3b 46 00 \tlea    0x463b80(%rax),%rcx\n  417fa0:\t48 8b 01             \tmov    (%rcx),%rax\n  417fa3:\t48 8b 51 08          \tmov    0x8(%rcx),%rdx\n  417fa7:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  417fab:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  417faf:\t48 8b 41 10          \tmov    0x10(%rcx),%rax\n  417fb3:\t48 8b 51 18          \tmov    0x18(%rcx),%rdx\n  417fb7:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  417fbb:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  417fbf:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  417fc2:\t66 89 05 f7 6f 05 00 \tmov    %ax,0x56ff7(%rip)        # 46efc0 <DpyCols>\n  417fc9:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  417fcc:\t88 05 ce 5c 05 00    \tmov    %al,0x55cce(%rip)        # 46dca0 <CursStart>\n  417fd2:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  417fd5:\t88 05 8d 5f 05 00    \tmov    %al,0x55f8d(%rip)        # 46df68 <CursEnd>\n  417fdb:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  417fde:\t83 e8 01             \tsub    $0x1,%eax\n  417fe1:\t88 05 01 5d 05 00    \tmov    %al,0x55d01(%rip)        # 46dce8 <DpyRows>\n  417fe7:\t0f b6 05 b2 5c 05 00 \tmovzbl 0x55cb2(%rip),%eax        # 46dca0 <CursStart>\n  417fee:\t0f b6 c0             \tmovzbl %al,%eax\n  417ff1:\t89 05 f1 5d 05 00    \tmov    %eax,0x55df1(%rip)        # 46dde8 <InitCS>\n  417ff7:\t0f b6 05 6a 5f 05 00 \tmovzbl 0x55f6a(%rip),%eax        # 46df68 <CursEnd>\n  417ffe:\t0f b6 c0             \tmovzbl %al,%eax\n  418001:\t89 05 5d 70 05 00    \tmov    %eax,0x5705d(%rip)        # 46f064 <InitCE>\n  418007:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n  41800a:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  41800d:\t0f af c2             \timul   %edx,%eax\n  418010:\t48 98                \tcltq   \n  418012:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n  418016:\t48 8b 05 d3 25 05 00 \tmov    0x525d3(%rip),%rax        # 46a5f0 <vmem>\n  41801d:\t48 89 d6             \tmov    %rdx,%rsi\n  418020:\t48 89 c7             \tmov    %rax,%rdi\n  418023:\te8 88 b6 fe ff       \tcallq  4036b0 <realloc@plt>\n  418028:\t48 89 05 c1 25 05 00 \tmov    %rax,0x525c1(%rip)        # 46a5f0 <vmem>\n  41802f:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  418032:\t48 98                \tcltq   \n  418034:\t48 c1 e0 04          \tshl    $0x4,%rax\n  418038:\t48 05 00 40 46 00    \tadd    $0x464000,%rax\n  41803e:\t48 89 05 53 6f 05 00 \tmov    %rax,0x56f53(%rip)        # 46ef98 <palette>\n  418045:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41804a:\te8 77 fd ff ff       \tcallq  417dc6 <update_pixels>\n  41804f:\t8b 0d f3 b3 04 00    \tmov    0x4b3f3(%rip),%ecx        # 463448 <FontScale>\n  418055:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  418058:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  41805b:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  418061:\t89 c6                \tmov    %eax,%esi\n  418063:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  418068:\te8 e6 f6 ff ff       \tcallq  417753 <load_font>\n  41806d:\t85 c0                \ttest   %eax,%eax\n  41806f:\t74 11                \tje     418082 <init_mode+0x12e>\n  418071:\tbf b8 dc 46 00       \tmov    $0x46dcb8,%edi\n  418076:\te8 b7 7c 00 00       \tcallq  41fd32 <xp_sem_post>\n  41807b:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  418080:\teb 72                \tjmp    4180f4 <init_mode+0x1a0>\n  418082:\te8 19 f0 ff ff       \tcallq  4170a0 <resize_window>\n  418087:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41808c:\te8 83 d5 ff ff       \tcallq  415614 <get_lines>\n  418091:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  418098:\teb 1c                \tjmp    4180b6 <init_mode+0x162>\n  41809a:\t48 8b 05 4f 25 05 00 \tmov    0x5254f(%rip),%rax        # 46a5f0 <vmem>\n  4180a1:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4180a4:\t48 63 d2             \tmovslq %edx,%rdx\n  4180a7:\t48 01 d2             \tadd    %rdx,%rdx\n  4180aa:\t48 01 d0             \tadd    %rdx,%rax\n  4180ad:\t66 c7 00 00 07       \tmovw   $0x700,(%rax)\n  4180b2:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4180b6:\t0f b7 05 03 6f 05 00 \tmovzwl 0x56f03(%rip),%eax        # 46efc0 <DpyCols>\n  4180bd:\t0f b7 d0             \tmovzwl %ax,%edx\n  4180c0:\t0f b6 05 21 5c 05 00 \tmovzbl 0x55c21(%rip),%eax        # 46dce8 <DpyRows>\n  4180c7:\t0f b6 c0             \tmovzbl %al,%eax\n  4180ca:\t0f af c2             \timul   %edx,%eax\n  4180cd:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  4180d0:\t7c c8                \tjl     41809a <init_mode+0x146>\n  4180d2:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  4180d5:\t89 05 79 5c 05 00    \tmov    %eax,0x55c79(%rip)        # 46dd54 <CurrMode>\n  4180db:\tc7 05 5b b3 04 00 19 \tmovl   $0xfffffc19,0x4b35b(%rip)        # 463440 <console_new_mode>\n  4180e2:\tfc ff ff \n  4180e5:\tbf b8 dc 46 00       \tmov    $0x46dcb8,%edi\n  4180ea:\te8 43 7c 00 00       \tcallq  41fd32 <xp_sem_post>\n  4180ef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4180f4:\tc9                   \tleaveq \n  4180f5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall init_mode(unsigned int a1) {\n  __int64 result;\n  __int64 *v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  int v7;\n  int i;\n  v7 = find_vmode(a1);\n  if (v7 == Number) {\n    console_new_mode = Number;\n    xp_sem_post(&console_mode_changed);\n    result = Number;\n  } else {\n    v2 = (__int64 *)((char *)&vparams + Number * v7);\n    v3 = *v2;\n    v4 = v2[Number];\n    v5 = v2[Number];\n    v6 = v2[Number];\n    DpyCols = v4;\n    CursStart = v5;\n    CursEnd = BYTE4(v5);\n    DpyRows = BYTE4(v4) - Number;\n    InitCS = (unsigned __int8)v5;\n    InitCE = BYTE4(v5);\n    vmem = realloc(vmem, Number L * (int)v4 * HIDWORD(v4));\n    palette = Number L * SHIDWORD(v3) + Number;\n    update_pixels();\n    if ((unsigned int)load_font(Number L, SHIDWORD(v6), v6, FontScale,\n                                Number L)) {\n      xp_sem_post(&console_mode_changed);\n      result = Number;\n    } else {\n      resize_window();\n      get_lines();\n      for (i = Number; i < (unsigned __int16)DpyCols * (unsigned __int8)DpyRows;\n           ++i)\n        *((_WORD *)vmem + i) = Number;\n      CurrMode = a1;\n      console_new_mode = Number;\n      xp_sem_post(&console_mode_changed);\n      result = Number L;\n    }\n  }\n  return result;\n}", "code_t": "int __cdecl init_mode(int <span class=\"supfact\">mode</span>) {\n  int <span class=\"supfact\">result</span>;\n  video_params *<span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">vmode</span>;\n  __int64 <span class=\"supfact\">vmode_8</span>;\n  __int64 <span class=\"supfact\">vmode_16</span>;\n  __int64 <span class=\"supfact\">vmode_24</span>;\n  int <span class=\"supfact\">idx</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">idx</span> = find_vmode(<span class=\"supfact\">mode</span>);\n  if (<span class=\"supfact\">idx</span> == Number) {\n    console_new_mode = Number;\n    xp_sem_post(&console_mode_changed);\n    <span class=\"supfact\">result</span> = Number;\n  } else {\n    <span class=\"supfact\">v2</span> = &vparams[<span class=\"supfact\">idx</span>];\n    <span class=\"supfact\">vmode</span> =\n        *(_QWORD *)&<span class=\"supfact\">v2</span>-><span class=\"supfact\">mode</span>;\n    <span class=\"supfact\">vmode_8</span> = *(_QWORD *)&<span class=\"supfact\">v2</span>->cols;\n    <span class=\"supfact\">vmode_16</span> = *(_QWORD *)&<span class=\"supfact\">v2</span>->curs_start;\n    <span class=\"supfact\">vmode_24</span> = *(_QWORD *)&<span class=\"supfact\">v2</span>->charheight;\n    DpyCols = <span class=\"supfact\">vmode_8</span>;\n    CursStart = <span class=\"supfact\">vmode_16</span>;\n    CursEnd = BYTE4(<span class=\"supfact\">vmode_16</span>);\n    DpyRows = BYTE4(<span class=\"supfact\">vmode_8</span>) - Number;\n    InitCS = (unsigned __int8)<span class=\"supfact\">vmode_16</span>;\n    InitCE = BYTE4(<span class=\"supfact\">vmode_16</span>);\n    vmem = (ushort *)realloc(vmem, Number L * (int)<span class=\"supfact\">vmode_8</span> *\n                                       HIDWORD(<span class=\"supfact\">vmode_8</span>));\n    palette = (unsigned __int8 *)(Number L * SHIDWORD(<span class=\"supfact\">vmode</span>) +\n                                  Number);\n    update_pixels();\n    if (load_font(Number L, SHIDWORD(<span class=\"supfact\">vmode_24</span>),\n                  <span class=\"supfact\">vmode_24</span>, FontScale, Number L)) {\n      xp_sem_post(&console_mode_changed);\n      <span class=\"supfact\">result</span> = Number;\n    } else {\n      resize_window();\n      get_lines();\n      for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < DpyCols * DpyRows;\n           ++<span class=\"supfact\">i</span>)\n        vmem[<span class=\"supfact\">i</span>] = Number;\n      CurrMode = <span class=\"supfact\">mode</span>;\n      console_new_mode = Number;\n      xp_sem_post(&console_mode_changed);\n      <span class=\"supfact\">result</span> = Number;\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "mode", "ref_name": "mode", "ref_type": "int"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "v2", "type": "__unk__", "pred_name": "__unk__", "ref_name": "v2", "ref_type": "video_params *"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "vmode", "ref_type": "__int64"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "vmode_8", "ref_type": "__int64"}, {"name": "v5", "type": "disappear", "pred_name": "", "ref_name": "vmode_16", "ref_type": "__int64"}, {"name": "v6", "type": "disappear", "pred_name": "", "ref_name": "vmode_24", "ref_type": "__int64"}, {"name": "v7", "type": "int", "pred_name": "__unk__", "ref_name": "idx", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "moseymosey", "repo_name": "netpbm", "path": "moseymosey/netpbm/9e4e39191d9b9752d37f477742a52828a21803ed27693bd69911be856058ea4a", "path_in_repo": "moseymosey/netpbm/converter/ppm/neotoppm", "objdump": "000000000040b485 <writePackedRawRow>:\n  40b485:\t55                   \tpush   %rbp\n  40b486:\t48 89 e5             \tmov    %rsp,%rbp\n  40b489:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40b48d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40b491:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40b495:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n  40b498:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  40b49b:\t83 c0 07             \tadd    $0x7,%eax\n  40b49e:\t8d 50 07             \tlea    0x7(%rax),%edx\n  40b4a1:\t85 c0                \ttest   %eax,%eax\n  40b4a3:\t0f 48 c2             \tcmovs  %edx,%eax\n  40b4a6:\tc1 f8 03             \tsar    $0x3,%eax\n  40b4a9:\t48 63 d0             \tmovslq %eax,%rdx\n  40b4ac:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  40b4b0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40b4b4:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40b4b9:\t48 89 c7             \tmov    %rax,%rdi\n  40b4bc:\te8 4f 6e ff ff       \tcallq  402310 <fwrite@plt>\n  40b4c1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40b4c4:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  40b4c7:\t83 c0 07             \tadd    $0x7,%eax\n  40b4ca:\t8d 50 07             \tlea    0x7(%rax),%edx\n  40b4cd:\t85 c0                \ttest   %eax,%eax\n  40b4cf:\t0f 48 c2             \tcmovs  %edx,%eax\n  40b4d2:\tc1 f8 03             \tsar    $0x3,%eax\n  40b4d5:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  40b4d8:\t7d 11                \tjge    40b4eb <writePackedRawRow+0x66>\n  40b4da:\t48 8d 3d 2f 3e 00 00 \tlea    0x3e2f(%rip),%rdi        # 40f310 <_IO_stdin_used+0x2310>\n  40b4e1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b4e6:\te8 ab 75 ff ff       \tcallq  402a96 <pm_error>\n  40b4eb:\t90                   \tnop\n  40b4ec:\tc9                   \tleaveq \n  40b4ed:\tc3                   \tretq   ", "code_s": "__int64 __fastcall writePackedRawRow(FILE *a1, const void *a2, int a3) {\n  int v3;\n  int v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  int v8;\n  __int64 result;\n  int v11;\n  v3 = a3 + Number;\n  v4 = a3 + Number;\n  if (v3 < Number)\n    v3 = v4;\n  v11 = fwrite(a2, Number, v3 >> Number, a1);\n  v8 = a3 + Number;\n  if (a3 + Number < Number)\n    v8 = a3 + Number;\n  result = (unsigned int)(v8 >> Number);\n  if (v11 < (int)result)\n    pm_error(String, Number L, (unsigned int)(a3 + Number), v5, v6, v7);\n  return result;\n}", "code_t": "void __cdecl writePackedRawRow(\n    FILE *const <span class=\"supfact\">fileP</span>,\n    const unsigned __int8 *const <span class=\"supfact\">packed_bits</span>,\n    const int <span class=\"supfact\">cols</span>) {\n  int v3;\n  int v4;\n  int v5;\n  int <span class=\"supfact\">bytesWritten</span>;\n  v3 = <span class=\"supfact\">cols</span> + Number;\n  v4 = <span class=\"supfact\">cols</span> + Number;\n  if (v3 < Number)\n    v3 = v4;\n  <span class=\"supfact\">bytesWritten</span> = fwrite(<span class=\"supfact\">packed_bits</span>, Number,\n                                        v3 >> Number, <span class=\"supfact\">fileP</span>);\n  v5 = <span class=\"supfact\">cols</span> + Number;\n  if (<span class=\"supfact\">cols</span> + Number < Number)\n    v5 = <span class=\"supfact\">cols</span> + Number;\n  if (<span class=\"supfact\">bytesWritten</span><v5> > Number)\n    pm_error(String);\n}", "var": [{"name": "a1", "type": "FILE *", "pred_name": "fileP", "ref_name": "fileP", "ref_type": "FILE *"}, {"name": "a2", "type": "const unsigned __int8 *", "pred_name": "packed_bits", "ref_name": "packed_bits", "ref_type": "const unsigned __int8 *"}, {"name": "a3", "type": "const int", "pred_name": "cols", "ref_name": "cols", "ref_type": "const int"}, {"name": "v5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v7", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v11", "type": "int", "pred_name": "bytesWritten", "ref_name": "bytesWritten", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2af4e000b03dbd36bf5f5b1e94bd385a31b5c6a785c70e9770f2544cd62ecd92", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/m68000/m68kops.o", "objdump": "0000000000028254 <_ZL20m68k_op_cmpi_32_pcdiP15_m68ki_cpu_core>:\n   28254:\t55                   \tpush   %rbp\n   28255:\t48 89 e5             \tmov    %rsp,%rbp\n   28258:\t48 83 ec 20          \tsub    $0x20,%rsp\n   2825c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   28260:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28264:\t8b 00                \tmov    (%rax),%eax\n   28266:\t25 f8 02 00 00       \tand    $0x2f8,%eax\n   2826b:\t85 c0                \ttest   %eax,%eax\n   2826d:\t0f 84 8f 00 00 00    \tje     28302 <_ZL20m68k_op_cmpi_32_pcdiP15_m68ki_cpu_core+0xae>\n   28273:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28277:\t48 89 c7             \tmov    %rax,%rdi\n   2827a:\te8 b9 81 fd ff       \tcallq  438 <_ZL17m68ki_read_imm_32P15_m68ki_cpu_core>\n   2827f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n   28282:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28286:\t48 89 c7             \tmov    %rax,%rdi\n   28289:\te8 fe 92 fd ff       \tcallq  158c <_ZL12OPER_PCDI_32P15_m68ki_cpu_core>\n   2828e:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n   28291:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n   28294:\t2b 45 fc             \tsub    -0x4(%rbp),%eax\n   28297:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n   2829a:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n   2829d:\tc1 e8 18             \tshr    $0x18,%eax\n   282a0:\t89 c2                \tmov    %eax,%edx\n   282a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   282a6:\t89 90 28 01 00 00    \tmov    %edx,0x128(%rax)\n   282ac:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   282b0:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n   282b3:\t89 90 2c 01 00 00    \tmov    %edx,0x12c(%rax)\n   282b9:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   282bc:\t33 45 f8             \txor    -0x8(%rbp),%eax\n   282bf:\t89 c2                \tmov    %eax,%edx\n   282c1:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n   282c4:\t33 45 f8             \txor    -0x8(%rbp),%eax\n   282c7:\t21 d0                \tand    %edx,%eax\n   282c9:\tc1 e8 18             \tshr    $0x18,%eax\n   282cc:\t89 c2                \tmov    %eax,%edx\n   282ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   282d2:\t89 90 30 01 00 00    \tmov    %edx,0x130(%rax)\n   282d8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   282db:\t23 45 f4             \tand    -0xc(%rbp),%eax\n   282de:\t89 c2                \tmov    %eax,%edx\n   282e0:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n   282e3:\tf7 d0                \tnot    %eax\n   282e5:\t89 c1                \tmov    %eax,%ecx\n   282e7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   282ea:\t0b 45 f4             \tor     -0xc(%rbp),%eax\n   282ed:\t21 c8                \tand    %ecx,%eax\n   282ef:\t09 d0                \tor     %edx,%eax\n   282f1:\tc1 e8 17             \tshr    $0x17,%eax\n   282f4:\t89 c2                \tmov    %eax,%edx\n   282f6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   282fa:\t89 90 34 01 00 00    \tmov    %edx,0x134(%rax)\n   28300:\teb 0c                \tjmp    2830e <_ZL20m68k_op_cmpi_32_pcdiP15_m68ki_cpu_core+0xba>\n   28302:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28306:\t48 89 c7             \tmov    %rax,%rdi\n   28309:\te8 36 9d fd ff       \tcallq  2044 <_ZL23m68ki_exception_illegalP15_m68ki_cpu_core>\n   2830e:\tc9                   \tleaveq \n   2830f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall m68k_op_cmpi_32_pcdi(_DWORD *a1) {\n  int v1;\n  unsigned int v2;\n  __int64 result;\n  unsigned int v4;\n  if ((*a1 & Number) == Number)\n    return m68ki_exception_illegal((__int64)a1);\n  v4 = m68ki_read_imm_32((__int64)a1);\n  v1 = OPER_PCDI_32((__int64)a1);\n  a1[Number] = (v1 - v4) >> Number;\n  a1[Number] = v1 - v4;\n  a1[Number] = ((v1 ^ v4) & (v1 ^ (v1 - v4))) >> Number;\n  v2 = ((v1 - v4) & v4 | ~v1 & ((v1 - v4) | v4)) >> Number;\n  result = (__int64)a1;\n  a1[Number] = v2;\n  return result;\n}", "code_t": "void __cdecl m68k_op_cmpi_32_pcdi(m68ki_cpu_core *<span class=\"supfact\">m68k</span>) {\n  UINT32 v1;\n  UINT32 <span class=\"supfact\">src</span>;\n  if ((<span class=\"supfact\">m68k</span>->cpu_type & Number) != Number) {\n    <span class=\"supfact\">src</span> = m68ki_read_imm_32(<span class=\"supfact\">m68k</span>);\n    v1 = OPER_PCDI_32(<span class=\"supfact\">m68k</span>);\n    <span class=\"supfact\">m68k</span>->n_flag = (v1 - <span class=\"supfact\">src</span>) >> Number;\n    <span class=\"supfact\">m68k</span>->not_z_flag = v1 - <span class=\"supfact\">src</span>;\n    <span class=\"supfact\">m68k</span>->v_flag =\n        ((v1 ^ <span class=\"supfact\">src</span>) & (v1 ^ (v1 - <span class=\"supfact\">src</span>))) >>\n        Number;\n    <span class=\"supfact\">m68k</span>->c_flag =\n        ((v1 - <span class=\"supfact\">src</span>) & <span class=\"supfact\">src</span> |\n         ~v1 & ((v1 - <span class=\"supfact\">src</span>) | <span class=\"supfact\">src</span>)) >>\n        Number;\n  } else {\n    m68ki_exception_illegal(<span class=\"supfact\">m68k</span>);\n  }\n}", "var": [{"name": "a1", "type": "target_ulong", "pred_name": "addr", "ref_name": "m68k", "ref_type": "m68ki_cpu_core *"}, {"name": "v2", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v4", "type": "target_ulong", "pred_name": "addra", "ref_name": "src", "ref_type": "UINT32"}], "body_in_train": false}, {"repo_owner": "tss", "repo_name": "qemu", "path": "tss/qemu/8c2cab8d66f5a09ebcb40c46c5c99046e67c4e2379a719d455e89808e4ee1768", "path_in_repo": "tss/qemu//hw/usb/hcd-uhci.o", "objdump": "0000000000000185 <dma_memory_rw_relaxed>:\n     185:\t55                   \tpush   %rbp\n     186:\t48 89 e5             \tmov    %rsp,%rbp\n     189:\t48 83 ec 30          \tsub    $0x30,%rsp\n     18d:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     191:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n     195:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n     199:\t48 89 4d e0          \tmov    %rcx,-0x20(%rbp)\n     19d:\t44 89 45 dc          \tmov    %r8d,-0x24(%rbp)\n     1a1:\t83 7d dc 01          \tcmpl   $0x1,-0x24(%rbp)\n     1a5:\t0f 94 c0             \tsete   %al\n     1a8:\t0f b6 c8             \tmovzbl %al,%ecx\n     1ab:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     1af:\t89 c7                \tmov    %eax,%edi\n     1b1:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     1b5:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n     1b9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1bd:\t41 89 c8             \tmov    %ecx,%r8d\n     1c0:\t89 f9                \tmov    %edi,%ecx\n     1c2:\t48 89 c7             \tmov    %rax,%rdi\n     1c5:\te8 00 00 00 00       \tcallq  1ca <dma_memory_rw_relaxed+0x45>\n     1ca:\t0f b6 c0             \tmovzbl %al,%eax\n     1cd:\tc9                   \tleaveq \n     1ce:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dma_memory_rw_relaxed(__int64 a1, __int64 a2, __int64 a3,\n                                         unsigned int a4, int a5) {\n  return (unsigned __int8)address_space_rw(a1, a2, a3, a4, a5 == Number);\n}", "code_t": "int __cdecl dma_memory_rw_relaxed(AddressSpace_0 *<span class=\"supfact\">as</span>,\n                                  dma_addr_t <span class=\"supfact\">addr</span>,\n                                  void *<span class=\"supfact\">buf</span>,\n                                  dma_addr_t <span class=\"supfact\">len</span>,\n                                  DMADirection <span class=\"supfact\">dir</span>) {\n  return (unsigned __int8)address_space_rw(\n      <span class=\"supfact\">as</span>, <span class=\"supfact\">addr</span>, <span class=\"supfact\">buf</span>,\n      (unsigned int)<span class=\"supfact\">len</span>,\n      <span class=\"supfact\">dir</span> == DMA_DIRECTION_FROM_DEVICE);\n}", "var": [{"name": "a1", "type": "AddressSpace_0 *", "pred_name": "as", "ref_name": "as", "ref_type": "AddressSpace_0 *"}, {"name": "a2", "type": "dma_addr_t", "pred_name": "addr", "ref_name": "addr", "ref_type": "dma_addr_t"}, {"name": "a3", "type": "void *", "pred_name": "buf", "ref_name": "buf", "ref_type": "void *"}, {"name": "a4", "type": "dma_addr_t", "pred_name": "len", "ref_name": "len", "ref_type": "dma_addr_t"}, {"name": "a5", "type": "DMADirection", "pred_name": "dir", "ref_name": "dir", "ref_type": "DMADirection"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/53d830a43215f228fc0a4c27e6f0f8ad5a6e43d5f5cf7f601c574db1fd46c809", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/recfile", "objdump": "", "code_s": "_QWORD *__fastcall pj_list_init_5(_QWORD *a1) {\n  _QWORD *result;\n  *a1 = a1;\n  result = a1;\n  a1[Number] = *a1;\n  return result;\n}", "code_t": "void __cdecl pj_list_init_5(pj_list_type *<span class=\"supfact\">node</span>) {\n  *(_QWORD *)<span class=\"supfact\">node</span> = <span class=\"supfact\">node</span>;\n  *((_QWORD *)<span class=\"supfact\">node</span> + Number) = *(_QWORD *)<span class=\"supfact\">node</span>;\n}", "var": [{"name": "a1", "type": "pj_list_type *", "pred_name": "node", "ref_name": "node", "ref_type": "pj_list_type *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "Notevill", "repo_name": "Reporter", "path": "Notevill/Reporter/cf01a52b4c37a3332459dbf279850b200158ddea5f86cd310f53da6a41102033", "path_in_repo": "Notevill/Reporter/IncludeLibraries/myhtml-master/examples/myhtml/serialization_high_level", "objdump": "0000000000421fe4 <mycore_string_raw_copy>:\n  421fe4:\t55                   \tpush   %rbp\n  421fe5:\t48 89 e5             \tmov    %rsp,%rbp\n  421fe8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  421fec:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  421ff0:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  421ff4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  421ff8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  421ffc:\t48 01 d0             \tadd    %rdx,%rax\n  421fff:\tc6 00 00             \tmovb   $0x0,(%rax)\n  422002:\teb 20                \tjmp    422024 <mycore_string_raw_copy+0x40>\n  422004:\t48 83 6d e8 01       \tsubq   $0x1,-0x18(%rbp)\n  422009:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  42200d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  422011:\t48 01 d0             \tadd    %rdx,%rax\n  422014:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  422018:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  42201c:\t48 01 ca             \tadd    %rcx,%rdx\n  42201f:\t0f b6 00             \tmovzbl (%rax),%eax\n  422022:\t88 02                \tmov    %al,(%rdx)\n  422024:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  422029:\t75 d9                \tjne    422004 <mycore_string_raw_copy+0x20>\n  42202b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42202f:\t5d                   \tpop    %rbp\n  422030:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mycore_string_raw_copy(__int64 a1, __int64 a2, __int64 a3) {\n  __int64 v4;\n  v4 = a3;\n  *(_BYTE *)(a1 + a3) = Number;\n  while (v4) {\n    --v4;\n    *(_BYTE *)(a1 + v4) = *(_BYTE *)(a2 + v4);\n  }\n  return Number L;\n}", "code_t": "size_t __cdecl mycore_string_raw_copy(char *<span class=\"supfact\">str1</span>,\n                                      const char *<span class=\"supfact\">str2</span>,\n                                      size_t <span class=\"supfact\">size</span>) {\n  size_t <span class=\"supfact\">sizea</span>;\n  <span class=\"supfact\">sizea</span> = <span class=\"supfact\">size</span>;\n  <span class=\"supfact\">str1</span>[<span class=\"supfact\">size</span>] = Number;\n  while (<span class=\"supfact\">sizea</span>) {\n    --<span class=\"supfact\">sizea</span>;\n    <span class=\"supfact\">str1</span>[<span class=\"supfact\">sizea</span>] =\n        <span class=\"supfact\">str2</span>[<span class=\"supfact\">sizea</span>];\n  }\n  return Number L;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "str1", "ref_name": "str1", "ref_type": "char *"}, {"name": "a2", "type": "const char *", "pred_name": "str2", "ref_name": "str2", "ref_type": "const char *"}, {"name": "a3", "type": "size_t", "pred_name": "size", "ref_name": "size", "ref_type": "size_t"}, {"name": "v4", "type": "size_t", "pred_name": "sizea", "ref_name": "sizea", "ref_type": "size_t"}], "body_in_train": true}, {"repo_owner": "cbaus", "repo_name": "pPbCrossSection", "path": "cbaus/pPbCrossSection/2aedf6973b9780e7d9aca882e1b5585d22653d3732b90ea6e479db86cb6a238b", "path_in_repo": "cbaus/pPbCrossSection/diffraction/ParticleInfo.o", "objdump": "0000000000000000 <_ZNSt6vectorISt3setIiSt4lessIiESaIiEESaIS4_EE9push_backERKS4_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  10:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  14:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  18:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  1c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  20:\t48 39 c2             \tcmp    %rax,%rdx\n  23:\t74 31                \tje     56 <_ZNSt6vectorISt3setIiSt4lessIiESaIiEESaIS4_EE9push_backERKS4_+0x56>\n  25:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  29:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  2d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  31:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  35:\t48 89 ce             \tmov    %rcx,%rsi\n  38:\t48 89 c7             \tmov    %rax,%rdi\n  3b:\te8 00 00 00 00       \tcallq  40 <_ZNSt6vectorISt3setIiSt4lessIiESaIiEESaIS4_EE9push_backERKS4_+0x40>\n  40:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  44:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  48:\t48 8d 50 30          \tlea    0x30(%rax),%rdx\n  4c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  50:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  54:\teb 22                \tjmp    78 <_ZNSt6vectorISt3setIiSt4lessIiESaIiEESaIS4_EE9push_backERKS4_+0x78>\n  56:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  5a:\t48 89 c7             \tmov    %rax,%rdi\n  5d:\te8 00 00 00 00       \tcallq  62 <_ZNSt6vectorISt3setIiSt4lessIiESaIiEESaIS4_EE9push_backERKS4_+0x62>\n  62:\t48 89 c1             \tmov    %rax,%rcx\n  65:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  69:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  6d:\t48 89 ce             \tmov    %rcx,%rsi\n  70:\t48 89 c7             \tmov    %rax,%rdi\n  73:\te8 00 00 00 00       \tcallq  78 <_ZNSt6vectorISt3setIiSt4lessIiESaIiEESaIS4_EE9push_backERKS4_+0x78>\n  78:\t90                   \tnop\n  79:\tc9                   \tleaveq \n  7a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<std set<int>> push_back(__int64 a1, __int64 a2) {\n  __int64 result;\n  __int64 v3;\n  if (*(_QWORD *)(a1 + Number) == *(_QWORD *)(a1 + Number)) {\n    v3 = std vector<std set<int>> end(a1);\n    result = std vector<std set<int>> _M_realloc_insert<std set<int> const &>(\n        a1, v3, a2);\n  } else {\n    std allocator_traits<std allocator<std set<int>>>\n        construct<std set<int>, std set<int> const &>(\n            a1, *(_QWORD *)(a1 + Number), a2);\n    result = a1;\n    *(_QWORD *)(a1 + Number) += Number L;\n  }\n  return result;\n}", "code_t": "void __cdecl std vector<std set<int>>\npush_back(std vector<std set<int>> *const <span class=\"supfact\">this</span>,\n          const std vector<std set<int>> value_type *<span class=\"supfact\">__x</span>) {\n  std set<int> *v2;\n  if (<span class=\"supfact\">this</span>->_M_impl._M_finish ==\n      <span class=\"supfact\">this</span>->_M_impl._M_end_of_storage) {\n    v2 = std vector<std set<int>> end(<span class=\"supfact\">this</span>)._M_current;\n    std vector<std set<int>> _M_realloc_insert<std set<int> const &>(\n        <span class=\"supfact\">this</span>, (std vector<std set<int>> iterator)v2,\n        <span class=\"supfact\">__x</span>, v2);\n  } else {\n    std allocator_traits<std allocator<std set<int>>>\n        construct<std set<int>, std set<int> const &>(\n            (std allocator_traits<std allocator<std set<int>>> allocator_type *)\n                <span class=\"supfact\">this</span>,\n            <span class=\"supfact\">this</span>->_M_impl._M_finish, <span class=\"supfact\">__x</span>,\n            <span class=\"supfact\">this</span>->_M_impl._M_finish);\n    ++<span class=\"supfact\">this</span>->_M_impl._M_finish;\n  }\n}", "var": [{"name": "a1", "type": "std::vector<Poco::SharedPtr<Poco::AbstractDelegate<std::set<int> >,Poco::ReferenceCounter,Poco::ReleasePolicy<Poco::AbstractDelegate<std::set<int> > > >> *", "pred_name": "this", "ref_name": "this", "ref_type": "std::vector<std::set<int>> *"}, {"name": "a2", "type": "__unk__", "pred_name": "__x", "ref_name": "__x", "ref_type": "const std::vector<std::set<int>>::value_type *"}], "body_in_train": true}, {"repo_owner": "VasiliBaranov", "repo_name": "PorousMediaAnalysis", "path": "VasiliBaranov/PorousMediaAnalysis/f3a3090ac33e22fc7d476c7940007eddf8fcaa4157b206557ca9c34d715b409a", "path_in_repo": "VasiliBaranov/PorousMediaAnalysis/Externals/FreeImage/Source/LibTIFF4/tif_dirwrite.o", "objdump": "0000000000004936 <TIFFWriteDirectoryTagCheckedRational>:\n    4936:\t55                   \tpush   %rbp\n    4937:\t48 89 e5             \tmov    %rsp,%rbp\n    493a:\t48 83 ec 40          \tsub    $0x40,%rsp\n    493e:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    4942:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    4946:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    494a:\t89 c8                \tmov    %ecx,%eax\n    494c:\tf2 0f 11 45 c8       \tmovsd  %xmm0,-0x38(%rbp)\n    4951:\t66 89 45 d4          \tmov    %ax,-0x2c(%rbp)\n    4955:\tf2 0f 10 45 c8       \tmovsd  -0x38(%rbp),%xmm0\n    495a:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    495e:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    4962:\t73 1f                \tjae    4983 <TIFFWriteDirectoryTagCheckedRational+0x4d>\n    4964:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 496b <TIFFWriteDirectoryTagCheckedRational+0x35>\n    496b:\tba 24 08 00 00       \tmov    $0x824,%edx\n    4970:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4977 <TIFFWriteDirectoryTagCheckedRational+0x41>\n    4977:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 497e <TIFFWriteDirectoryTagCheckedRational+0x48>\n    497e:\te8 00 00 00 00       \tcallq  4983 <TIFFWriteDirectoryTagCheckedRational+0x4d>\n    4983:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    4987:\t66 0f 2f 45 c8       \tcomisd -0x38(%rbp),%xmm0\n    498c:\t72 13                \tjb     49a1 <TIFFWriteDirectoryTagCheckedRational+0x6b>\n    498e:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    4995:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n    499c:\te9 9e 00 00 00       \tjmpq   4a3f <TIFFWriteDirectoryTagCheckedRational+0x109>\n    49a1:\tf2 0f 10 45 c8       \tmovsd  -0x38(%rbp),%xmm0\n    49a6:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n    49ab:\t89 c0                \tmov    %eax,%eax\n    49ad:\t48 85 c0             \ttest   %rax,%rax\n    49b0:\t78 07                \tjs     49b9 <TIFFWriteDirectoryTagCheckedRational+0x83>\n    49b2:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n    49b7:\teb 15                \tjmp    49ce <TIFFWriteDirectoryTagCheckedRational+0x98>\n    49b9:\t48 89 c2             \tmov    %rax,%rdx\n    49bc:\t48 d1 ea             \tshr    %rdx\n    49bf:\t83 e0 01             \tand    $0x1,%eax\n    49c2:\t48 09 c2             \tor     %rax,%rdx\n    49c5:\tf2 48 0f 2a c2       \tcvtsi2sd %rdx,%xmm0\n    49ca:\tf2 0f 58 c0          \taddsd  %xmm0,%xmm0\n    49ce:\t66 0f 2e 45 c8       \tucomisd -0x38(%rbp),%xmm0\n    49d3:\t7a 1d                \tjp     49f2 <TIFFWriteDirectoryTagCheckedRational+0xbc>\n    49d5:\t66 0f 2e 45 c8       \tucomisd -0x38(%rbp),%xmm0\n    49da:\t75 16                \tjne    49f2 <TIFFWriteDirectoryTagCheckedRational+0xbc>\n    49dc:\tf2 0f 10 45 c8       \tmovsd  -0x38(%rbp),%xmm0\n    49e1:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n    49e6:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    49e9:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n    49f0:\teb 4d                \tjmp    4a3f <TIFFWriteDirectoryTagCheckedRational+0x109>\n    49f2:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 49fa <TIFFWriteDirectoryTagCheckedRational+0xc4>\n    49f9:\t00 \n    49fa:\t66 0f 2f 45 c8       \tcomisd -0x38(%rbp),%xmm0\n    49ff:\t76 22                \tjbe    4a23 <TIFFWriteDirectoryTagCheckedRational+0xed>\n    4a01:\tf2 0f 10 4d c8       \tmovsd  -0x38(%rbp),%xmm1\n    4a06:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 4a0e <TIFFWriteDirectoryTagCheckedRational+0xd8>\n    4a0d:\t00 \n    4a0e:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n    4a12:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n    4a17:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    4a1a:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n    4a21:\teb 1c                \tjmp    4a3f <TIFFWriteDirectoryTagCheckedRational+0x109>\n    4a23:\tc7 45 f8 ff ff ff ff \tmovl   $0xffffffff,-0x8(%rbp)\n    4a2a:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 4a32 <TIFFWriteDirectoryTagCheckedRational+0xfc>\n    4a31:\t00 \n    4a32:\tf2 0f 5e 45 c8       \tdivsd  -0x38(%rbp),%xmm0\n    4a37:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n    4a3c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    4a3f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4a43:\t8b 40 10             \tmov    0x10(%rax),%eax\n    4a46:\t25 80 00 00 00       \tand    $0x80,%eax\n    4a4b:\t85 c0                \ttest   %eax,%eax\n    4a4d:\t74 1c                \tje     4a6b <TIFFWriteDirectoryTagCheckedRational+0x135>\n    4a4f:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n    4a53:\t48 89 c7             \tmov    %rax,%rdi\n    4a56:\te8 00 00 00 00       \tcallq  4a5b <TIFFWriteDirectoryTagCheckedRational+0x125>\n    4a5b:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n    4a5f:\t48 83 c0 04          \tadd    $0x4,%rax\n    4a63:\t48 89 c7             \tmov    %rax,%rdi\n    4a66:\te8 00 00 00 00       \tcallq  4a6b <TIFFWriteDirectoryTagCheckedRational+0x135>\n    4a6b:\t0f b7 4d d4          \tmovzwl -0x2c(%rbp),%ecx\n    4a6f:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    4a73:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n    4a77:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4a7b:\t48 8d 7d f8          \tlea    -0x8(%rbp),%rdi\n    4a7f:\t57                   \tpush   %rdi\n    4a80:\t6a 08                \tpushq  $0x8\n    4a82:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n    4a88:\t41 b8 05 00 00 00    \tmov    $0x5,%r8d\n    4a8e:\t48 89 c7             \tmov    %rax,%rdi\n    4a91:\te8 94 07 00 00       \tcallq  522a <TIFFWriteDirectoryTagData>\n    4a96:\t48 83 c4 10          \tadd    $0x10,%rsp\n    4a9a:\tc9                   \tleaveq \n    4a9b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall TIFFWriteDirectoryTagCheckedRational(__int64 a1, int a2,\n                                                        int a3,\n                                                        unsigned __int16 a4,\n                                                        double a5) {\n  int v8;\n  int v9;\n  if (a5 < Number)\n    _assert_fail(String, String, Number, String);\n  if (a5 > Number) {\n    if ((double)(int)a5 == a5) {\n      v8 = (int)a5;\n      v9 = Number;\n    } else if (a5 >= Number) {\n      v8 = Number;\n      v9 = (int)(Number / a5);\n    } else {\n      v8 = (int)(Number * a5);\n      v9 = Number;\n    }\n  } else {\n    v8 = Number;\n    v9 = Number;\n  }\n  if ((*(_DWORD *)(a1 + Number) & Number) != Number) {\n    TIFFSwabLong(&v8);\n    TIFFSwabLong(&v9);\n  }\n  return TIFFWriteDirectoryTagData(a1, a2, a3, a4, Number, Number, Number,\n                                   (__int64)&v8);\n}", "code_t": "int __cdecl TIFFWriteDirectoryTagCheckedRational(\n    TIFF *<span class=\"supfact\">tif</span>, uint32 *<span class=\"supfact\">ndir</span>,\n    TIFFDirEntry *<span class=\"supfact\">dir</span>, uint16 <span class=\"supfact\">tag</span>,\n    double <span class=\"supfact\">value</span>) {\n  uint32 <span class=\"supfact\">m</span>[Number];\n  if (<span class=\"supfact\">value</span> < Number)\n    _assert_fail(String, String, Number, String);\n  if (<span class=\"supfact\">value</span> > Number) {\n    if ((double)(int)<span class=\"supfact\">value</span> == <span class=\"supfact\">value</span>) {\n      <span class=\"supfact\">m</span>[Number] = (int)<span class=\"supfact\">value</span>;\n      <span class=\"supfact\">m</span>[Number] = Number;\n    } else if (<span class=\"supfact\">value</span> >= Number) {\n      <span class=\"supfact\">m</span>[Number] = Number;\n      <span class=\"supfact\">m</span>[Number] = (int)(Number / <span class=\"supfact\">value</span>);\n    } else {\n      <span class=\"supfact\">m</span>[Number] = (int)(Number * <span class=\"supfact\">value</span>);\n      <span class=\"supfact\">m</span>[Number] = Number;\n    }\n  } else {\n    <span class=\"supfact\">m</span>[Number] = Number;\n    <span class=\"supfact\">m</span>[Number] = Number;\n  }\n  if ((<span class=\"supfact\">tif</span>->tif_flags & Number) != Number) {\n    TIFFSwabLong(<span class=\"supfact\">m</span>);\n    TIFFSwabLong(&<span class=\"supfact\">m</span>[Number]);\n  }\n  return TIFFWriteDirectoryTagData(<span class=\"supfact\">tif</span>, <span class=\"supfact\">ndir</span>,\n                                   <span class=\"supfact\">dir</span>, <span class=\"supfact\">tag</span>,\n                                   Number, Number, Number, <span class=\"supfact\">m</span>);\n}", "var": [{"name": "a1", "type": "TIFF *", "pred_name": "tif", "ref_name": "tif", "ref_type": "TIFF *"}, {"name": "a2", "type": "uint32", "pred_name": "tag", "ref_name": "ndir", "ref_type": "uint32 *"}, {"name": "a3", "type": "uint32", "pred_name": "offset", "ref_name": "dir", "ref_type": "TIFFDirEntry *"}, {"name": "a4", "type": "uint16", "pred_name": "size", "ref_name": "tag", "ref_type": "uint16"}, {"name": "a5", "type": "double", "pred_name": "__unk__", "ref_name": "value", "ref_type": "double"}, {"name": "v8", "type": "int", "pred_name": "m", "ref_name": "m", "ref_type": "uint32[2]"}, {"name": "v9", "type": "int", "pred_name": "n", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "DevriesL", "repo_name": "Bluecross_ImageBreaker", "path": "DevriesL/Bluecross_ImageBreaker/52fce5d47a61456cdaf25f7dd5a9e4028aaa0bd9048a2eaf6138f021d765bd08", "path_in_repo": "DevriesL/Bluecross_ImageBreaker/tools/objtool/objtool-in.o", "objdump": "00000000000000a9 <inat_is_evex_prefix>:\n      a9:\t89 7c 24 fc          \tmov    %edi,-0x4(%rsp)\n      ad:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n      b1:\t83 e0 0f             \tand    $0xf,%eax\n      b4:\t83 f8 0f             \tcmp    $0xf,%eax\n      b7:\t0f 94 c0             \tsete   %al\n      ba:\t0f b6 c0             \tmovzbl %al,%eax\n      bd:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall inat_is_evex_prefix(char a1) {\n  return (a1 & Number) == Number;\n}", "code_t": "int __cdecl inat_is_evex_prefix(insn_attr_t <span class=\"supfact\">attr</span>) {\n  return (<span class=\"supfact\">attr</span> & Number) == Number;\n}", "var": [{"name": "a1", "type": "insn_attr_t", "pred_name": "attr", "ref_name": "attr", "ref_type": "insn_attr_t"}], "body_in_train": true}, {"repo_owner": "axelnxp", "repo_name": "linux-imx", "path": "axelnxp/linux-imx/45c34d647d3d077472e22e4ce51419a10e49793ea7500c8d2aa10164148a7b8e", "path_in_repo": "axelnxp/linux-imx/tools/perf/scripts/perl/Perf-Trace-Util/Context.o", "objdump": "0000000000000000 <S_POPMARK>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  13:\t00 00 \n  15:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  19:\t31 c0                \txor    %eax,%eax\n  1b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  1f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n  23:\t48 8d 48 fc          \tlea    -0x4(%rax),%rcx\n  27:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  2b:\t48 89 4a 78          \tmov    %rcx,0x78(%rdx)\n  2f:\t8b 00                \tmov    (%rax),%eax\n  31:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n  35:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n  3c:\t00 00 \n  3e:\t74 05                \tje     45 <S_POPMARK+0x45>\n  40:\te8 00 00 00 00       \tcallq  45 <S_POPMARK+0x45>\n  45:\tc9                   \tleaveq \n  46:\tc3                   \tretq   ", "code_s": "__int64 __fastcall S_POPMARK(__int64 a1) {\n  unsigned int *v1;\n  v1 = *(unsigned int **)(a1 + Number);\n  *(_QWORD *)(a1 + Number) = v1 - Number;\n  return *v1;\n}", "code_t": "I32 __cdecl S_POPMARK(PerlInterpreter *<span class=\"supfact\">my_perl</span>) {\n  I32 *<span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = <span class=\"supfact\">my_perl</span>->Imarkstack_ptr;\n  <span class=\"supfact\">my_perl</span>->Imarkstack_ptr = <span class=\"supfact\">v1</span> - Number;\n  return *<span class=\"supfact\">v1</span>;\n}", "var": [{"name": "a1", "type": "PerlInterpreter *", "pred_name": "my_perl", "ref_name": "my_perl", "ref_type": "PerlInterpreter *"}, {"name": "v1", "type": "I32 *", "pred_name": "v1", "ref_name": "v1", "ref_type": "I32 *"}], "body_in_train": true}, {"repo_owner": "slapin", "repo_name": "q2-dev", "path": "slapin/q2-dev/e1b91f1ae6f6bf16d95fca94468a1efb869b9f59680796b18b71f5c99abc0058", "path_in_repo": "slapin/q2-dev/quake2/releasex86_64/ref_glx.so", "objdump": "000000000002e8f9 <logNormal3b>:\n   2e8f9:\t48 83 ec 18          \tsub    $0x18,%rsp\n   2e8fd:\t89 f1                \tmov    %esi,%ecx\n   2e8ff:\t89 d0                \tmov    %edx,%eax\n   2e901:\t89 fa                \tmov    %edi,%edx\n   2e903:\t88 54 24 0c          \tmov    %dl,0xc(%rsp)\n   2e907:\t89 ca                \tmov    %ecx,%edx\n   2e909:\t88 54 24 08          \tmov    %dl,0x8(%rsp)\n   2e90d:\t88 44 24 04          \tmov    %al,0x4(%rsp)\n   2e911:\t48 8b 05 98 ee 01 00 \tmov    0x1ee98(%rip),%rax        # 4d7b0 <glw_state@@Base-0xfe800>\n   2e918:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   2e91c:\t48 89 c1             \tmov    %rax,%rcx\n   2e91f:\tba 0b 00 00 00       \tmov    $0xb,%edx\n   2e924:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   2e929:\t48 8d 3d 03 59 01 00 \tlea    0x15903(%rip),%rdi        # 44233 <_fini+0x2aa3>\n   2e930:\te8 3b 36 fe ff       \tcallq  11f70 <fwrite@plt>\n   2e935:\t4c 8b 05 fc 42 04 00 \tmov    0x442fc(%rip),%r8        # 72c38 <dllNormal3b>\n   2e93c:\t0f be 54 24 04       \tmovsbl 0x4(%rsp),%edx\n   2e941:\t0f be 4c 24 08       \tmovsbl 0x8(%rsp),%ecx\n   2e946:\t0f be 44 24 0c       \tmovsbl 0xc(%rsp),%eax\n   2e94b:\t89 ce                \tmov    %ecx,%esi\n   2e94d:\t89 c7                \tmov    %eax,%edi\n   2e94f:\t41 ff d0             \tcallq  *%r8\n   2e952:\t90                   \tnop\n   2e953:\t48 83 c4 18          \tadd    $0x18,%rsp\n   2e957:\tc3                   \tretq   ", "code_s": "__int64 __fastcall logNormal3b(char a1, char a2, char a3) {\n  fwrite(String, Number, Number, *((FILE **)&glw_state + Number));\n  return dllNormal3b((unsigned int)a1, (unsigned int)a2, (unsigned int)a3);\n}", "code_t": "void __cdecl logNormal3b(GLbyte <span class=\"supfact\">nx</span>, GLbyte <span class=\"supfact\">ny</span>,\n                         GLbyte <span class=\"supfact\">nz</span>) {\n  fwrite(String, Number, Number, glw_state.log_fp);\n  dllNormal3b(<span class=\"supfact\">nx</span>, <span class=\"supfact\">ny</span>, <span class=\"supfact\">nz</span>);\n}", "var": [{"name": "a1", "type": "GLbyte", "pred_name": "nx", "ref_name": "nx", "ref_type": "GLbyte"}, {"name": "a2", "type": "GLbyte", "pred_name": "ny", "ref_name": "ny", "ref_type": "GLbyte"}, {"name": "a3", "type": "GLbyte", "pred_name": "nz", "ref_name": "nz", "ref_type": "GLbyte"}], "body_in_train": true}, {"repo_owner": "calixtosystems", "repo_name": "linux-am335x", "path": "calixtosystems/linux-am335x/c6d3953cd78c16874d009fad06dda525eb4d9922e957eb170ceb1b73e2affd2a", "path_in_repo": "calixtosystems/linux-am335x/linux-am33x/tools/perf/util/svghelper.o", "objdump": "0000000000000fc8 <svg_cstate>:\n     fc8:\t55                   \tpush   %rbp\n     fc9:\t48 89 e5             \tmov    %rsp,%rbp\n     fcc:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n     fd3:\t89 bd 5c ff ff ff    \tmov    %edi,-0xa4(%rbp)\n     fd9:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n     fe0:\t48 89 95 48 ff ff ff \tmov    %rdx,-0xb8(%rbp)\n     fe7:\t89 8d 58 ff ff ff    \tmov    %ecx,-0xa8(%rbp)\n     fed:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     ff4:\t00 00 \n     ff6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     ffa:\t31 c0                \txor    %eax,%eax\n     ffc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1003 <svg_cstate+0x3b>\n    1003:\t48 85 c0             \ttest   %rax,%rax\n    1006:\t0f 84 c8 01 00 00    \tje     11d4 <svg_cstate+0x20c>\n    100c:\t83 bd 58 ff ff ff 06 \tcmpl   $0x6,-0xa8(%rbp)\n    1013:\t7e 0a                \tjle    101f <svg_cstate+0x57>\n    1015:\tc7 85 58 ff ff ff 06 \tmovl   $0x6,-0xa8(%rbp)\n    101c:\t00 00 00 \n    101f:\t8b 95 58 ff ff ff    \tmov    -0xa8(%rbp),%edx\n    1025:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    102c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1031:\t48 89 c7             \tmov    %rax,%rdi\n    1034:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1039:\te8 00 00 00 00       \tcallq  103e <svg_cstate+0x76>\n    103e:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    1044:\t89 c7                \tmov    %eax,%edi\n    1046:\te8 f1 ef ff ff       \tcallq  3c <cpu2y>\n    104b:\tf2 0f 11 85 40 ff ff \tmovsd  %xmm0,-0xc0(%rbp)\n    1052:\tff \n    1053:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    105a:\t48 89 c7             \tmov    %rax,%rdi\n    105d:\te8 20 f0 ff ff       \tcallq  82 <time2pixels>\n    1062:\tf2 0f 11 85 38 ff ff \tmovsd  %xmm0,-0xc8(%rbp)\n    1069:\tff \n    106a:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1071:\t48 89 c7             \tmov    %rax,%rdi\n    1074:\te8 09 f0 ff ff       \tcallq  82 <time2pixels>\n    1079:\tf2 0f 10 a5 38 ff ff \tmovsd  -0xc8(%rbp),%xmm4\n    1080:\tff \n    1081:\tf2 0f 5c e0          \tsubsd  %xmm0,%xmm4\n    1085:\tf2 0f 11 a5 38 ff ff \tmovsd  %xmm4,-0xc8(%rbp)\n    108c:\tff \n    108d:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1094:\t48 89 c7             \tmov    %rax,%rdi\n    1097:\te8 e6 ef ff ff       \tcallq  82 <time2pixels>\n    109c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10a3 <svg_cstate+0xdb>\n    10a3:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 10ab <svg_cstate+0xe3>\n    10aa:\t00 \n    10ab:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n    10b2:\t66 0f 28 d9          \tmovapd %xmm1,%xmm3\n    10b6:\tf2 0f 10 95 40 ff ff \tmovsd  -0xc0(%rbp),%xmm2\n    10bd:\tff \n    10be:\tf2 0f 10 8d 38 ff ff \tmovsd  -0xc8(%rbp),%xmm1\n    10c5:\tff \n    10c6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    10cb:\t48 89 c7             \tmov    %rax,%rdi\n    10ce:\tb8 04 00 00 00       \tmov    $0x4,%eax\n    10d3:\te8 00 00 00 00       \tcallq  10d8 <svg_cstate+0x110>\n    10d8:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    10df:\t48 89 c7             \tmov    %rax,%rdi\n    10e2:\te8 9b ef ff ff       \tcallq  82 <time2pixels>\n    10e7:\tf2 0f 11 85 40 ff ff \tmovsd  %xmm0,-0xc0(%rbp)\n    10ee:\tff \n    10ef:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    10f6:\t48 89 c7             \tmov    %rax,%rdi\n    10f9:\te8 84 ef ff ff       \tcallq  82 <time2pixels>\n    10fe:\tf2 0f 10 ad 40 ff ff \tmovsd  -0xc0(%rbp),%xmm5\n    1105:\tff \n    1106:\tf2 0f 5c e8          \tsubsd  %xmm0,%xmm5\n    110a:\t66 0f 28 c5          \tmovapd %xmm5,%xmm0\n    110e:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 1116 <svg_cstate+0x14e>\n    1115:\t00 \n    1116:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    111a:\tf2 0f 11 85 68 ff ff \tmovsd  %xmm0,-0x98(%rbp)\n    1121:\tff \n    1122:\tf2 0f 10 85 68 ff ff \tmovsd  -0x98(%rbp),%xmm0\n    1129:\tff \n    112a:\t66 0f 2f 05 00 00 00 \tcomisd 0x0(%rip),%xmm0        # 1132 <svg_cstate+0x16a>\n    1131:\t00 \n    1132:\t76 10                \tjbe    1144 <svg_cstate+0x17c>\n    1134:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 113c <svg_cstate+0x174>\n    113b:\t00 \n    113c:\tf2 0f 11 85 68 ff ff \tmovsd  %xmm0,-0x98(%rbp)\n    1143:\tff \n    1144:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    114b:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n    1150:\te8 e5 ef ff ff       \tcallq  13a <round_text_size>\n    1155:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n    115a:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n    1161:\tf2 0f 10 85 68 ff ff \tmovsd  -0x98(%rbp),%xmm0\n    1168:\tff \n    1169:\t66 0f 2f 05 00 00 00 \tcomisd 0x0(%rip),%xmm0        # 1171 <svg_cstate+0x1a9>\n    1170:\t00 \n    1171:\t76 62                \tjbe    11d5 <svg_cstate+0x20d>\n    1173:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    1179:\t89 c7                \tmov    %eax,%edi\n    117b:\te8 bc ee ff ff       \tcallq  3c <cpu2y>\n    1180:\tf2 0f 58 85 68 ff ff \taddsd  -0x98(%rbp),%xmm0\n    1187:\tff \n    1188:\tf2 0f 11 85 40 ff ff \tmovsd  %xmm0,-0xc0(%rbp)\n    118f:\tff \n    1190:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1197:\t48 89 c7             \tmov    %rax,%rdi\n    119a:\te8 e3 ee ff ff       \tcallq  82 <time2pixels>\n    119f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11a6 <svg_cstate+0x1de>\n    11a6:\t8b 95 58 ff ff ff    \tmov    -0xa8(%rbp),%edx\n    11ac:\tf2 0f 10 8d 68 ff ff \tmovsd  -0x98(%rbp),%xmm1\n    11b3:\tff \n    11b4:\t66 0f 28 d1          \tmovapd %xmm1,%xmm2\n    11b8:\tf2 0f 10 8d 40 ff ff \tmovsd  -0xc0(%rbp),%xmm1\n    11bf:\tff \n    11c0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11c5:\t48 89 c7             \tmov    %rax,%rdi\n    11c8:\tb8 03 00 00 00       \tmov    $0x3,%eax\n    11cd:\te8 00 00 00 00       \tcallq  11d2 <svg_cstate+0x20a>\n    11d2:\teb 01                \tjmp    11d5 <svg_cstate+0x20d>\n    11d4:\t90                   \tnop\n    11d5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11d9:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    11e0:\t00 00 \n    11e2:\t74 05                \tje     11e9 <svg_cstate+0x221>\n    11e4:\te8 00 00 00 00       \tcallq  11e9 <svg_cstate+0x221>\n    11e9:\tc9                   \tleaveq \n    11ea:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall svg_cstate(unsigned int a1, __int64 a2, __int64 a3,\n                                       int a4, double a5) {\n  double v5;\n  double v6;\n  double v8;\n  double v9;\n  double v11;\n  unsigned int v13;\n  double v14;\n  char s[Number];\n  unsigned __int64 v16;\n  v13 = a4;\n  v16 = __readfsqword(Number);\n  if (svgfile) {\n    if (a4 > Number)\n      v13 = Number;\n    sprintf(s, String, v13);\n    cpu2y(a1);\n    v8 = time2pixels(a3);\n    v9 = v8 - time2pixels(a2);\n    v5 = time2pixels(a2);\n    fprintf(svgfile, String, s, v5, v9, a5, Number);\n    v11 = time2pixels(a3);\n    v14 = (v11 - time2pixels(a2)) / Number;\n    if (v14 > Number)\n      v14 = Number;\n    round_text_size(v14);\n    if (v14 > Number) {\n      cpu2y(a1);\n      v6 = time2pixels(a2);\n      fprintf(svgfile, String, v6, v14 + v14, v14, v13);\n    }\n  }\n  return __readfsqword(Number) ^ v16;\n}", "code_t": "void __cdecl svg_cstate(int <span class=\"supfact\">cpu</span>, u64 <span class=\"supfact\">start</span>,\n                        u64 <span class=\"supfact\">end</span>, int <span class=\"supfact\">type</span>) {\n  double v4;\n  double v5;\n  double v6;\n  double v7;\n  double v8;\n  double v9;\n  double v10;\n  unsigned int <span class=\"supfact\">typea</span>;\n  double width;\n  double widtha;\n  char <span class=\"supfact\">style</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v16</span>;\n  <span class=\"supfact\">typea</span> = <span class=\"supfact\">type</span>;\n  <span class=\"supfact\">v16</span> = __readfsqword(Number);\n  if (svgfile) {\n    if (<span class=\"supfact\">type</span> > Number)\n      <span class=\"supfact\">typea</span> = Number;\n    sprintf(<span class=\"supfact\">style</span>, String, <span class=\"supfact\">typea</span>);\n    v8 = cpu2y(<span class=\"supfact\">cpu</span>);\n    v6 = time2pixels(<span class=\"supfact\">end</span>);\n    v7 = v6 - time2pixels(<span class=\"supfact\">start</span>);\n    v4 = time2pixels(<span class=\"supfact\">start</span>);\n    fprintf(svgfile, String, <span class=\"supfact\">style</span>, v4, v7, v8, Number);\n    v9 = time2pixels(<span class=\"supfact\">end</span>);\n    width = (v9 - time2pixels(<span class=\"supfact\">start</span>)) / Number;\n    if (width > Number)\n      width = Number;\n    widtha = round_text_size(width);\n    if (widtha > Number) {\n      v10 = cpu2y(<span class=\"supfact\">cpu</span>) + widtha;\n      v5 = time2pixels(<span class=\"supfact\">start</span>);\n      fprintf(svgfile, String, v5, v10, widtha, <span class=\"supfact\">typea</span>);\n    }\n  }\n}", "var": [{"name": "a1", "type": "int", "pred_name": "cpu", "ref_name": "cpu", "ref_type": "int"}, {"name": "a2", "type": "u64", "pred_name": "start", "ref_name": "start", "ref_type": "u64"}, {"name": "a3", "type": "u64", "pred_name": "end", "ref_name": "end", "ref_type": "u64"}, {"name": "a4", "type": "int", "pred_name": "type", "ref_name": "type", "ref_type": "int"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v11", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v13", "type": "unsigned int", "pred_name": "typea", "ref_name": "typea", "ref_type": "unsigned int"}, {"name": "v14", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "s", "type": "char[128]", "pred_name": "style", "ref_name": "style", "ref_type": "char[128]"}, {"name": "v16", "type": "unsigned __int64", "pred_name": "v16", "ref_name": "v16", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "gloomykeel", "repo_name": "mt7688", "path": "gloomykeel/mt7688/11a9e0dfe4c7d7d12f2b0c4c852f2898d8eb511ba3516522bb2ef28e1db8c285", "path_in_repo": "gloomykeel/mt7688//scripts/config/conf", "objdump": "0000000000408847 <str_new>:\n  408847:\t55                   \tpush   %rbp\n  408848:\t48 89 e5             \tmov    %rsp,%rbp\n  40884b:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40884f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  408853:\tbf 40 00 00 00       \tmov    $0x40,%edi\n  408858:\te8 ec 01 00 00       \tcallq  408a49 <xmalloc>\n  40885d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  408861:\t48 c7 45 e0 40 00 00 \tmovq   $0x40,-0x20(%rbp)\n  408868:\t00 \n  408869:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n  408870:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  408874:\tc6 00 00             \tmovb   $0x0,(%rax)\n  408877:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  40887b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40887f:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  408883:\t48 89 01             \tmov    %rax,(%rcx)\n  408886:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n  40888a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40888e:\t48 89 41 10          \tmov    %rax,0x10(%rcx)\n  408892:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408896:\tc9                   \tleaveq \n  408897:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall str_new(_QWORD *a1) {\n  _BYTE *v1;\n  __int64 v3;\n  v1 = (_BYTE *)xmalloc(Number L);\n  LODWORD(v3) = Number;\n  *v1 = Number;\n  *a1 = Number L;\n  a1[Number] = v1;\n  a1[Number] = v3;\n  return a1;\n}", "code_t": "gstr *__cdecl str_new(gstr *<span class=\"supfact\">retstr</span>) {\n  char *<span class=\"supfact\">v1</span>;\n  __int64 <span class=\"supfact\">gs_0_16</span>;\n  <span class=\"supfact\">v1</span> = (char *)xmalloc(Number);\n  LODWORD(<span class=\"supfact\">gs_0_16</span>) = Number;\n  *<span class=\"supfact\">v1</span> = Number;\n  <span class=\"supfact\">retstr</span>->len = Number L;\n  <span class=\"supfact\">retstr</span>->s = <span class=\"supfact\">v1</span>;\n  *(_QWORD *)&<span class=\"supfact\">retstr</span>->max_width = <span class=\"supfact\">gs_0_16</span>;\n  return <span class=\"supfact\">retstr</span>;\n}", "var": [{"name": "a1", "type": "gstr *", "pred_name": "retstr", "ref_name": "retstr", "ref_type": "gstr *"}, {"name": "v1", "type": "char *", "pred_name": "v1", "ref_name": "v1", "ref_type": "char *"}, {"name": "v3", "type": "__int64", "pred_name": "gs_0_16", "ref_name": "gs_0_16", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "rockchip-toybrick", "repo_name": "external-wpa_supplicant_8", "path": "rockchip-toybrick/external-wpa_supplicant_8/6c2672fab34303e61c1d7e93a0407c1791fe28b43ea8f5250feccdda94afd81e", "path_in_repo": "rockchip-toybrick/external-wpa_supplicant_8/hostapd/hostapd", "objdump": "000000000041d6f2 <hostapd_config_free_wep>:\n  41d6f2:\t55                   \tpush   %rbp\n  41d6f3:\t48 89 e5             \tmov    %rsp,%rbp\n  41d6f6:\t48 83 ec 20          \tsub    $0x20,%rsp\n  41d6fa:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  41d6fe:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  41d705:\teb 44                \tjmp    41d74b <hostapd_config_free_wep+0x59>\n  41d707:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41d70b:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  41d70e:\t48 63 d2             \tmovslq %edx,%rdx\n  41d711:\t48 83 c2 04          \tadd    $0x4,%rdx\n  41d715:\t48 8b 54 d0 08       \tmov    0x8(%rax,%rdx,8),%rdx\n  41d71a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41d71e:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n  41d721:\t48 63 c9             \tmovslq %ecx,%rcx\n  41d724:\t48 8b 44 c8 08       \tmov    0x8(%rax,%rcx,8),%rax\n  41d729:\t48 89 d6             \tmov    %rdx,%rsi\n  41d72c:\t48 89 c7             \tmov    %rax,%rdi\n  41d72f:\te8 d1 88 01 00       \tcallq  436005 <bin_clear_free>\n  41d734:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41d738:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  41d73b:\t48 63 d2             \tmovslq %edx,%rdx\n  41d73e:\t48 c7 44 d0 08 00 00 \tmovq   $0x0,0x8(%rax,%rdx,8)\n  41d745:\t00 00 \n  41d747:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  41d74b:\t83 7d fc 03          \tcmpl   $0x3,-0x4(%rbp)\n  41d74f:\t7e b6                \tjle    41d707 <hostapd_config_free_wep+0x15>\n  41d751:\t90                   \tnop\n  41d752:\t90                   \tnop\n  41d753:\tc9                   \tleaveq \n  41d754:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hostapd_config_free_wep(__int64 a1) {\n  __int64 result;\n  int i;\n  for (i = Number; i <= Number; ++i) {\n    bin_clear_free(*(_QWORD *)(a1 + Number L * i + Number),\n                   *(_QWORD *)(a1 + Number * (i + Number L) + Number));\n    result = a1;\n    *(_QWORD *)(a1 + Number L * i + Number) = Number L;\n  }\n  return result;\n}", "code_t": "void __cdecl hostapd_config_free_wep(hostapd_wep_keys *<span class=\"supfact\">keys</span>) {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    bin_clear_free(<span class=\"supfact\">keys</span>->key[<span class=\"supfact\">i</span>],\n                   <span class=\"supfact\">keys</span>->len[<span class=\"supfact\">i</span>]);\n    <span class=\"supfact\">keys</span>->key[<span class=\"supfact\">i</span>] = Number L;\n  }\n}", "var": [{"name": "a1", "type": "hostapd_wep_keys *", "pred_name": "keys", "ref_name": "keys", "ref_type": "hostapd_wep_keys *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "lixuewei", "repo_name": "rt-n56u", "path": "lixuewei/rt-n56u/38349714616a43b8927cd9e1485b4d6547dafaf08db61e8f96818df5fbdd5906", "path_in_repo": "lixuewei/rt-n56u/trunk/user/ntfs-3g/ntfsprogs-2014.2.15/ntfsprogs/ntfscluster", "objdump": "000000000041bd66 <ntfs_link>:\n  41bd66:\t55                   \tpush   %rbp\n  41bd67:\t48 89 e5             \tmov    %rsp,%rbp\n  41bd6a:\t48 83 ec 20          \tsub    $0x20,%rsp\n  41bd6e:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  41bd72:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  41bd76:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  41bd7a:\t89 c8                \tmov    %ecx,%eax\n  41bd7c:\t88 45 e4             \tmov    %al,-0x1c(%rbp)\n  41bd7f:\t0f b6 4d e4          \tmovzbl -0x1c(%rbp),%ecx\n  41bd83:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  41bd87:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n  41bd8b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41bd8f:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  41bd95:\t48 89 c7             \tmov    %rax,%rdi\n  41bd98:\te8 cf fb ff ff       \tcallq  41b96c <ntfs_link_i>\n  41bd9d:\tc9                   \tleaveq \n  41bd9e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ntfs_link(__int64 a1, _QWORD *a2, _WORD *a3,\n                             unsigned __int8 a4) {\n  return ntfs_link_i(a1, a2, a3, a4, Number);\n}", "code_t": "int __cdecl ntfs_link(ntfs_inode *<span class=\"supfact\">ni</span>,\n                      ntfs_inode *<span class=\"supfact\">dir_ni</span>,\n                      const ntfschar *<span class=\"supfact\">name</span>,\n                      u8 <span class=\"supfact\">name_len</span>) {\n  return ntfs_link_i(<span class=\"supfact\">ni</span>, <span class=\"supfact\">dir_ni</span>,\n                     <span class=\"supfact\">name</span>, <span class=\"supfact\">name_len</span>,\n                     FILE_NAME_POSIX);\n}", "var": [{"name": "a1", "type": "expand_t *", "pred_name": "expand", "ref_name": "ni", "ref_type": "ntfs_inode *"}, {"name": "a2", "type": "s64", "pred_name": "pos", "ref_name": "dir_ni", "ref_type": "ntfs_inode *"}, {"name": "a3", "type": "s64", "pred_name": "length", "ref_name": "name", "ref_type": "const ntfschar *"}, {"name": "a4", "type": "u8", "pred_name": "type", "ref_name": "name_len", "ref_type": "u8"}], "body_in_train": false}, {"repo_owner": "bluescan", "repo_name": "tacent", "path": "bluescan/tacent/89accdadbb5c20fd07e449c088073ca863f3a374d51f7c1d2fb5d5aa46494b2a", "path_in_repo": "bluescan/tacent/Contrib/imgui/examples/example_glfw_opengl3/imgui_draw.o", "objdump": "", "code_s": "__int64 __fastcall ImVector<ImDrawCmd> ~ImVector(__int64 a1, void *a2) {\n  __int64 result;\n  result = *(_QWORD *)(a1 + Number);\n  if (result)\n    result = ImGui MemFree(*(ImGui **)(a1 + Number), a2);\n  return result;\n}", "code_t": "__int64 __fastcall ImVector<ImDrawCmd> ~ImVector(__int64 <span class=\"supfact\">a1</span>,\n                                                 void *<span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  if (<span class=\"supfact\">result</span>)\n    <span class=\"supfact\">result</span> = ImGui MemFree(\n        *(ImGui **)(<span class=\"supfact\">a1</span> + Number), <span class=\"supfact\">a2</span>);\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "void *", "pred_name": "a2", "ref_name": "a2", "ref_type": "void *"}, {"name": "result", "type": "__int64", "pred_name": "result", "ref_name": "result", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "daveti", "repo_name": "tcpSockHack", "path": "daveti/tcpSockHack/b9dbe5d444624a13796fd1eb9bb12053537d113a7b25257cb2c4145f6b9d13b5", "path_in_repo": "daveti/tcpSockHack/kernel/linux-2.6.32-573.7.1.el6.x86_64/scripts/kconfig/conf", "objdump": "", "code_s": "size_t strlen(const char *s) { return strlen(s); }", "code_t": "size_t strlen(const char *<span class=\"supfact\">s</span>) {\n  return strlen(<span class=\"supfact\">s</span>);\n}", "var": [{"name": "s", "type": "const char *", "pred_name": "s", "ref_name": "s", "ref_type": "const char *"}], "body_in_train": true}, {"repo_owner": "zlsun", "repo_name": "TIIv3", "path": "zlsun/TIIv3/04850a782e4207ca7625ebeeb22fc08b3a850318de87f30151a8d8deacfe24fc", "path_in_repo": "zlsun/TIIv3/chap01/ttcpcli", "objdump": "", "code_s": "int printf(const char *format, ...) { return printf(format); }", "code_t": "int printf(const char *<span class=\"supfact\">format</span>, ...) {\n  return printf(<span class=\"supfact\">format</span>);\n}", "var": [{"name": "format", "type": "const char *", "pred_name": "format", "ref_name": "format", "ref_type": "const char *"}], "body_in_train": true}, {"repo_owner": "pathscale", "repo_name": "nvopencc", "path": "pathscale/nvopencc/b568d72b7632794c72db24e491e1d9d0ddbc2dd55173eb1474b521e116f53573", "path_in_repo": "pathscale/nvopencc/src/targia3264_nvisa_rel/gccfe/gnu/reload1.o", "objdump": "0000000000018793 <move2add_note_store>:\n   18793:\t55                   \tpush   %rbp\n   18794:\t48 89 e5             \tmov    %rsp,%rbp\n   18797:\t48 83 ec 60          \tsub    $0x60,%rsp\n   1879b:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n   1879f:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n   187a3:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n   187a7:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n   187ae:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   187b2:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   187b6:\t0f b6 c0             \tmovzbl %al,%eax\n   187b9:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   187bc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   187c0:\t0f b7 00             \tmovzwl (%rax),%eax\n   187c3:\t66 83 f8 49          \tcmp    $0x49,%ax\n   187c7:\t75 42                \tjne    1880b <move2add_note_store+0x78>\n   187c9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   187cd:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   187d1:\t0f b6 c8             \tmovzbl %al,%ecx\n   187d4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   187d8:\t8b 50 10             \tmov    0x10(%rax),%edx\n   187db:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   187df:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   187e3:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   187e7:\t0f b6 f0             \tmovzbl %al,%esi\n   187ea:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   187ee:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   187f2:\t8b 40 08             \tmov    0x8(%rax),%eax\n   187f5:\t89 c7                \tmov    %eax,%edi\n   187f7:\te8 00 00 00 00       \tcallq  187fc <move2add_note_store+0x69>\n   187fc:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n   187ff:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   18803:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   18807:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n   1880b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   1880f:\t0f b7 00             \tmovzwl (%rax),%eax\n   18812:\t66 83 f8 4c          \tcmp    $0x4c,%ax\n   18816:\t75 61                \tjne    18879 <move2add_note_store+0xe6>\n   18818:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   1881c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   18820:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n   18824:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   18828:\t0f b7 00             \tmovzwl (%rax),%eax\n   1882b:\t66 83 f8 6b          \tcmp    $0x6b,%ax\n   1882f:\t74 2b                \tje     1885c <move2add_note_store+0xc9>\n   18831:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   18835:\t0f b7 00             \tmovzwl (%rax),%eax\n   18838:\t66 83 f8 6d          \tcmp    $0x6d,%ax\n   1883c:\t74 1e                \tje     1885c <move2add_note_store+0xc9>\n   1883e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   18842:\t0f b7 00             \tmovzwl (%rax),%eax\n   18845:\t66 83 f8 6a          \tcmp    $0x6a,%ax\n   18849:\t74 11                \tje     1885c <move2add_note_store+0xc9>\n   1884b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   1884f:\t0f b7 00             \tmovzwl (%rax),%eax\n   18852:\t66 83 f8 6c          \tcmp    $0x6c,%ax\n   18856:\t0f 85 38 06 00 00    \tjne    18e94 <move2add_note_store+0x701>\n   1885c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   18860:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   18864:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18867:\t89 c0                \tmov    %eax,%eax\n   18869:\tc7 04 85 00 00 00 00 \tmovl   $0x0,0x0(,%rax,4)\n   18870:\t00 00 00 00 \n   18874:\te9 1b 06 00 00       \tjmpq   18e94 <move2add_note_store+0x701>\n   18879:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   1887d:\t0f b7 00             \tmovzwl (%rax),%eax\n   18880:\t66 83 f8 47          \tcmp    $0x47,%ax\n   18884:\t0f 85 0d 06 00 00    \tjne    18e97 <move2add_note_store+0x704>\n   1888a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   1888e:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18891:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n   18894:\t83 7d fc 07          \tcmpl   $0x7,-0x4(%rbp)\n   18898:\t76 06                \tjbe    188a0 <move2add_note_store+0x10d>\n   1889a:\t83 7d fc 0f          \tcmpl   $0xf,-0x4(%rbp)\n   1889e:\t76 24                \tjbe    188c4 <move2add_note_store+0x131>\n   188a0:\t83 7d fc 14          \tcmpl   $0x14,-0x4(%rbp)\n   188a4:\t76 06                \tjbe    188ac <move2add_note_store+0x119>\n   188a6:\t83 7d fc 1c          \tcmpl   $0x1c,-0x4(%rbp)\n   188aa:\t76 18                \tjbe    188c4 <move2add_note_store+0x131>\n   188ac:\t83 7d fc 2c          \tcmpl   $0x2c,-0x4(%rbp)\n   188b0:\t76 06                \tjbe    188b8 <move2add_note_store+0x125>\n   188b2:\t83 7d fc 34          \tcmpl   $0x34,-0x4(%rbp)\n   188b6:\t76 0c                \tjbe    188c4 <move2add_note_store+0x131>\n   188b8:\t83 7d fc 1c          \tcmpl   $0x1c,-0x4(%rbp)\n   188bc:\t76 41                \tjbe    188ff <move2add_note_store+0x16c>\n   188be:\t83 7d fc 24          \tcmpl   $0x24,-0x4(%rbp)\n   188c2:\t77 3b                \tja     188ff <move2add_note_store+0x16c>\n   188c4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   188c7:\t48 98                \tcltq   \n   188c9:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   188d0:\t83 f8 05             \tcmp    $0x5,%eax\n   188d3:\t74 18                \tje     188ed <move2add_note_store+0x15a>\n   188d5:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   188d8:\t48 98                \tcltq   \n   188da:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   188e1:\t83 f8 06             \tcmp    $0x6,%eax\n   188e4:\t74 07                \tje     188ed <move2add_note_store+0x15a>\n   188e6:\tb8 01 00 00 00       \tmov    $0x1,%eax\n   188eb:\teb 05                \tjmp    188f2 <move2add_note_store+0x15f>\n   188ed:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   188f2:\t83 e0 01             \tand    $0x1,%eax\n   188f5:\t84 c0                \ttest   %al,%al\n   188f7:\t0f 84 70 04 00 00    \tje     18d6d <move2add_note_store+0x5da>\n   188fd:\teb 77                \tjmp    18976 <move2add_note_store+0x1e3>\n   188ff:\t83 7d e4 12          \tcmpl   $0x12,-0x1c(%rbp)\n   18903:\t74 61                \tje     18966 <move2add_note_store+0x1d3>\n   18905:\t83 7d e4 18          \tcmpl   $0x18,-0x1c(%rbp)\n   18909:\t74 5b                \tje     18966 <move2add_note_store+0x1d3>\n   1890b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   1890e:\t48 98                \tcltq   \n   18910:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   18917:\t0f b6 c0             \tmovzbl %al,%eax\n   1891a:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 18920 <move2add_note_store+0x18d>\n   18920:\t81 e2 00 00 10 00    \tand    $0x100000,%edx\n   18926:\t85 d2                \ttest   %edx,%edx\n   18928:\t74 07                \tje     18931 <move2add_note_store+0x19e>\n   1892a:\tba 08 00 00 00       \tmov    $0x8,%edx\n   1892f:\teb 05                \tjmp    18936 <move2add_note_store+0x1a3>\n   18931:\tba 04 00 00 00       \tmov    $0x4,%edx\n   18936:\t01 d0                \tadd    %edx,%eax\n   18938:\t83 e8 01             \tsub    $0x1,%eax\n   1893b:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 18941 <move2add_note_store+0x1ae>\n   18941:\t81 e2 00 00 10 00    \tand    $0x100000,%edx\n   18947:\t85 d2                \ttest   %edx,%edx\n   18949:\t74 07                \tje     18952 <move2add_note_store+0x1bf>\n   1894b:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   18950:\teb 05                \tjmp    18957 <move2add_note_store+0x1c4>\n   18952:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n   18957:\t99                   \tcltd   \n   18958:\tf7 f9                \tidiv   %ecx\n   1895a:\t83 f8 01             \tcmp    $0x1,%eax\n   1895d:\t75 07                \tjne    18966 <move2add_note_store+0x1d3>\n   1895f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n   18964:\teb 05                \tjmp    1896b <move2add_note_store+0x1d8>\n   18966:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   1896b:\t83 e0 01             \tand    $0x1,%eax\n   1896e:\t84 c0                \ttest   %al,%al\n   18970:\t0f 84 f7 03 00 00    \tje     18d6d <move2add_note_store+0x5da>\n   18976:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   1897a:\t0f b7 00             \tmovzwl (%rax),%eax\n   1897d:\t66 83 f8 39          \tcmp    $0x39,%ax\n   18981:\t0f 85 e6 03 00 00    \tjne    18d6d <move2add_note_store+0x5da>\n   18987:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   1898b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   1898f:\t0f b7 00             \tmovzwl (%rax),%eax\n   18992:\t66 3d 8f 00          \tcmp    $0x8f,%ax\n   18996:\t0f 84 d1 03 00 00    \tje     18d6d <move2add_note_store+0x5da>\n   1899c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   189a0:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   189a4:\t0f b7 00             \tmovzwl (%rax),%eax\n   189a7:\t66 3d 8e 00          \tcmp    $0x8e,%ax\n   189ab:\t0f 84 bc 03 00 00    \tje     18d6d <move2add_note_store+0x5da>\n   189b1:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   189b5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   189b9:\t0f b7 00             \tmovzwl (%rax),%eax\n   189bc:\t66 83 f8 4a          \tcmp    $0x4a,%ax\n   189c0:\t0f 84 a7 03 00 00    \tje     18d6d <move2add_note_store+0x5da>\n   189c6:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   189ca:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   189ce:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   189d2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   189d6:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   189da:\t0f b6 c0             \tmovzbl %al,%eax\n   189dd:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n   189e0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   189e4:\t0f b7 00             \tmovzwl (%rax),%eax\n   189e7:\t0f b7 c0             \tmovzwl %ax,%eax\n   189ea:\t83 f8 55             \tcmp    $0x55,%eax\n   189ed:\t74 20                \tje     18a0f <move2add_note_store+0x27c>\n   189ef:\t83 f8 55             \tcmp    $0x55,%eax\n   189f2:\t0f 87 47 02 00 00    \tja     18c3f <move2add_note_store+0x4ac>\n   189f8:\t83 f8 40             \tcmp    $0x40,%eax\n   189fb:\t0f 84 ea 01 00 00    \tje     18beb <move2add_note_store+0x458>\n   18a01:\t83 f8 47             \tcmp    $0x47,%eax\n   18a04:\t0f 84 cf 01 00 00    \tje     18bd9 <move2add_note_store+0x446>\n   18a0a:\te9 30 02 00 00       \tjmpq   18c3f <move2add_note_store+0x4ac>\n   18a0f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18a13:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   18a17:\t0f b7 00             \tmovzwl (%rax),%eax\n   18a1a:\t66 83 f8 47          \tcmp    $0x47,%ax\n   18a1e:\t0f 85 11 02 00 00    \tjne    18c35 <move2add_note_store+0x4a2>\n   18a24:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18a28:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   18a2c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   18a30:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18a34:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18a38:\t0f b7 00             \tmovzwl (%rax),%eax\n   18a3b:\t66 83 f8 40          \tcmp    $0x40,%ax\n   18a3f:\t75 15                \tjne    18a56 <move2add_note_store+0x2c3>\n   18a41:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18a45:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18a49:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   18a4d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   18a51:\te9 fc 01 00 00       \tjmpq   18c52 <move2add_note_store+0x4bf>\n   18a56:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18a5a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18a5e:\t0f b7 00             \tmovzwl (%rax),%eax\n   18a61:\t66 83 f8 47          \tcmp    $0x47,%ax\n   18a65:\t0f 85 cd 01 00 00    \tjne    18c38 <move2add_note_store+0x4a5>\n   18a6b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18a6f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18a73:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18a76:\t89 c0                \tmov    %eax,%eax\n   18a78:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n   18a7f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 18a85 <move2add_note_store+0x2f2>\n   18a85:\t39 c2                \tcmp    %eax,%edx\n   18a87:\t0f 8e ab 01 00 00    \tjle    18c38 <move2add_note_store+0x4a5>\n   18a8d:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   18a90:\t48 98                \tcltq   \n   18a92:\t0f b6 90 00 00 00 00 \tmovzbl 0x0(%rax),%edx\n   18a99:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18a9d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18aa1:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18aa4:\t89 c0                \tmov    %eax,%eax\n   18aa6:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   18aad:\t48 98                \tcltq   \n   18aaf:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   18ab6:\t38 c2                \tcmp    %al,%dl\n   18ab8:\t74 31                \tje     18aeb <move2add_note_store+0x358>\n   18aba:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   18abd:\t48 98                \tcltq   \n   18abf:\t0f b6 90 00 00 00 00 \tmovzbl 0x0(%rax),%edx\n   18ac6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18aca:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18ace:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18ad1:\t89 c0                \tmov    %eax,%eax\n   18ad3:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   18ada:\t48 98                \tcltq   \n   18adc:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   18ae3:\t38 c2                \tcmp    %al,%dl\n   18ae5:\t0f 87 4d 01 00 00    \tja     18c38 <move2add_note_store+0x4a5>\n   18aeb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18aef:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18af3:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18af6:\t89 c0                \tmov    %eax,%eax\n   18af8:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   18aff:\t85 c0                \ttest   %eax,%eax\n   18b01:\t79 1e                \tjns    18b21 <move2add_note_store+0x38e>\n   18b03:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18b07:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18b0b:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18b0e:\t89 c0                \tmov    %eax,%eax\n   18b10:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n   18b17:\t00 \n   18b18:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   18b1c:\te9 b5 00 00 00       \tjmpq   18bd6 <move2add_note_store+0x443>\n   18b21:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   18b25:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18b28:\t89 c0                \tmov    %eax,%eax\n   18b2a:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n   18b31:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 18b37 <move2add_note_store+0x3a4>\n   18b37:\t39 c2                \tcmp    %eax,%edx\n   18b39:\t0f 8e fc 00 00 00    \tjle    18c3b <move2add_note_store+0x4a8>\n   18b3f:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   18b42:\t48 98                \tcltq   \n   18b44:\t0f b6 90 00 00 00 00 \tmovzbl 0x0(%rax),%edx\n   18b4b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18b4f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18b53:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18b56:\t89 c0                \tmov    %eax,%eax\n   18b58:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   18b5f:\t48 98                \tcltq   \n   18b61:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   18b68:\t38 c2                \tcmp    %al,%dl\n   18b6a:\t74 31                \tje     18b9d <move2add_note_store+0x40a>\n   18b6c:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   18b6f:\t48 98                \tcltq   \n   18b71:\t0f b6 90 00 00 00 00 \tmovzbl 0x0(%rax),%edx\n   18b78:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18b7c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18b80:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18b83:\t89 c0                \tmov    %eax,%eax\n   18b85:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   18b8c:\t48 98                \tcltq   \n   18b8e:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   18b95:\t38 c2                \tcmp    %al,%dl\n   18b97:\t0f 87 9e 00 00 00    \tja     18c3b <move2add_note_store+0x4a8>\n   18b9d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   18ba1:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18ba4:\t89 c0                \tmov    %eax,%eax\n   18ba6:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   18bad:\t85 c0                \ttest   %eax,%eax\n   18baf:\t0f 89 86 00 00 00    \tjns    18c3b <move2add_note_store+0x4a8>\n   18bb5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   18bb9:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18bbc:\t89 c0                \tmov    %eax,%eax\n   18bbe:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n   18bc5:\t00 \n   18bc6:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   18bca:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18bce:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18bd2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   18bd6:\t90                   \tnop\n   18bd7:\teb 79                \tjmp    18c52 <move2add_note_store+0x4bf>\n   18bd9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   18bdd:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   18be1:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   18be8:\t00 \n   18be9:\teb 67                \tjmp    18c52 <move2add_note_store+0x4bf>\n   18beb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   18bee:\tc7 04 85 00 00 00 00 \tmovl   $0xffffffff,0x0(,%rax,4)\n   18bf5:\tff ff ff ff \n   18bf9:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   18bfd:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   18c01:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n   18c05:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   18c08:\t48 89 14 c5 00 00 00 \tmov    %rdx,0x0(,%rax,8)\n   18c0f:\t00 \n   18c10:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 18c16 <move2add_note_store+0x483>\n   18c16:\t8d 50 01             \tlea    0x1(%rax),%edx\n   18c19:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   18c1c:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n   18c23:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   18c26:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n   18c29:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n   18c30:\te9 63 02 00 00       \tjmpq   18e98 <move2add_note_store+0x705>\n   18c35:\t90                   \tnop\n   18c36:\teb 07                \tjmp    18c3f <move2add_note_store+0x4ac>\n   18c38:\t90                   \tnop\n   18c39:\teb 04                \tjmp    18c3f <move2add_note_store+0x4ac>\n   18c3b:\t90                   \tnop\n   18c3c:\teb 01                \tjmp    18c3f <move2add_note_store+0x4ac>\n   18c3e:\t90                   \tnop\n   18c3f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   18c42:\tc7 04 85 00 00 00 00 \tmovl   $0x0,0x0(,%rax,4)\n   18c49:\t00 00 00 00 \n   18c4d:\te9 46 02 00 00       \tjmpq   18e98 <move2add_note_store+0x705>\n   18c52:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   18c56:\t8b 40 08             \tmov    0x8(%rax),%eax\n   18c59:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n   18c5c:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   18c5f:\t48 98                \tcltq   \n   18c61:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n   18c68:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 18c6e <move2add_note_store+0x4db>\n   18c6e:\t39 c2                \tcmp    %eax,%edx\n   18c70:\t7f 43                \tjg     18cb5 <move2add_note_store+0x522>\n   18c72:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   18c75:\t48 98                \tcltq   \n   18c77:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n   18c7a:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n   18c81:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   18c84:\t48 98                \tcltq   \n   18c86:\t48 c7 04 c5 00 00 00 \tmovq   $0x0,0x0(,%rax,8)\n   18c8d:\t00 00 00 00 00 \n   18c92:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 18c98 <move2add_note_store+0x505>\n   18c98:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   18c9b:\t48 98                \tcltq   \n   18c9d:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n   18ca4:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   18ca7:\t48 98                \tcltq   \n   18ca9:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n   18cac:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n   18cb3:\teb 4e                \tjmp    18d03 <move2add_note_store+0x570>\n   18cb5:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   18cb8:\t48 98                \tcltq   \n   18cba:\t0f b6 90 00 00 00 00 \tmovzbl 0x0(%rax),%edx\n   18cc1:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   18cc4:\t48 98                \tcltq   \n   18cc6:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   18ccd:\t48 98                \tcltq   \n   18ccf:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   18cd6:\t38 c2                \tcmp    %al,%dl\n   18cd8:\t74 29                \tje     18d03 <move2add_note_store+0x570>\n   18cda:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   18cdd:\t48 98                \tcltq   \n   18cdf:\t0f b6 90 00 00 00 00 \tmovzbl 0x0(%rax),%edx\n   18ce6:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   18ce9:\t48 98                \tcltq   \n   18ceb:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   18cf2:\t48 98                \tcltq   \n   18cf4:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   18cfb:\t38 c2                \tcmp    %al,%dl\n   18cfd:\t0f 87 3b ff ff ff    \tja     18c3e <move2add_note_store+0x4ab>\n   18d03:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   18d06:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n   18d09:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n   18d10:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   18d13:\t48 98                \tcltq   \n   18d15:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n   18d1c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   18d1f:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n   18d26:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   18d29:\t48 98                \tcltq   \n   18d2b:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n   18d32:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   18d35:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n   18d3c:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   18d3f:\t48 98                \tcltq   \n   18d41:\t48 8b 14 c5 00 00 00 \tmov    0x0(,%rax,8),%rdx\n   18d48:\t00 \n   18d49:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   18d4d:\t48 01 c2             \tadd    %rax,%rdx\n   18d50:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   18d53:\t48 89 d6             \tmov    %rdx,%rsi\n   18d56:\t89 c7                \tmov    %eax,%edi\n   18d58:\te8 d2 f2 ff ff       \tcallq  1802f <sext_for_mode>\n   18d5d:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n   18d60:\t48 89 04 d5 00 00 00 \tmov    %rax,0x0(,%rdx,8)\n   18d67:\t00 \n   18d68:\te9 2b 01 00 00       \tjmpq   18e98 <move2add_note_store+0x705>\n   18d6d:\t83 7d fc 07          \tcmpl   $0x7,-0x4(%rbp)\n   18d71:\t76 06                \tjbe    18d79 <move2add_note_store+0x5e6>\n   18d73:\t83 7d fc 0f          \tcmpl   $0xf,-0x4(%rbp)\n   18d77:\t76 24                \tjbe    18d9d <move2add_note_store+0x60a>\n   18d79:\t83 7d fc 14          \tcmpl   $0x14,-0x4(%rbp)\n   18d7d:\t76 06                \tjbe    18d85 <move2add_note_store+0x5f2>\n   18d7f:\t83 7d fc 1c          \tcmpl   $0x1c,-0x4(%rbp)\n   18d83:\t76 18                \tjbe    18d9d <move2add_note_store+0x60a>\n   18d85:\t83 7d fc 2c          \tcmpl   $0x2c,-0x4(%rbp)\n   18d89:\t76 06                \tjbe    18d91 <move2add_note_store+0x5fe>\n   18d8b:\t83 7d fc 34          \tcmpl   $0x34,-0x4(%rbp)\n   18d8f:\t76 0c                \tjbe    18d9d <move2add_note_store+0x60a>\n   18d91:\t83 7d fc 1c          \tcmpl   $0x1c,-0x4(%rbp)\n   18d95:\t76 3c                \tjbe    18dd3 <move2add_note_store+0x640>\n   18d97:\t83 7d fc 24          \tcmpl   $0x24,-0x4(%rbp)\n   18d9b:\t77 36                \tja     18dd3 <move2add_note_store+0x640>\n   18d9d:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   18da0:\t48 98                \tcltq   \n   18da2:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   18da9:\t83 f8 05             \tcmp    $0x5,%eax\n   18dac:\t74 11                \tje     18dbf <move2add_note_store+0x62c>\n   18dae:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   18db1:\t48 98                \tcltq   \n   18db3:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   18dba:\t83 f8 06             \tcmp    $0x6,%eax\n   18dbd:\t75 0a                \tjne    18dc9 <move2add_note_store+0x636>\n   18dbf:\tb8 02 00 00 00       \tmov    $0x2,%eax\n   18dc4:\te9 9f 00 00 00       \tjmpq   18e68 <move2add_note_store+0x6d5>\n   18dc9:\tb8 01 00 00 00       \tmov    $0x1,%eax\n   18dce:\te9 95 00 00 00       \tjmpq   18e68 <move2add_note_store+0x6d5>\n   18dd3:\t83 7d e4 12          \tcmpl   $0x12,-0x1c(%rbp)\n   18dd7:\t75 1d                \tjne    18df6 <move2add_note_store+0x663>\n   18dd9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 18ddf <move2add_note_store+0x64c>\n   18ddf:\t25 00 00 10 00       \tand    $0x100000,%eax\n   18de4:\t85 c0                \ttest   %eax,%eax\n   18de6:\t74 07                \tje     18def <move2add_note_store+0x65c>\n   18de8:\tb8 02 00 00 00       \tmov    $0x2,%eax\n   18ded:\teb 79                \tjmp    18e68 <move2add_note_store+0x6d5>\n   18def:\tb8 03 00 00 00       \tmov    $0x3,%eax\n   18df4:\teb 72                \tjmp    18e68 <move2add_note_store+0x6d5>\n   18df6:\t83 7d e4 18          \tcmpl   $0x18,-0x1c(%rbp)\n   18dfa:\t75 1d                \tjne    18e19 <move2add_note_store+0x686>\n   18dfc:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 18e02 <move2add_note_store+0x66f>\n   18e02:\t25 00 00 10 00       \tand    $0x100000,%eax\n   18e07:\t85 c0                \ttest   %eax,%eax\n   18e09:\t74 07                \tje     18e12 <move2add_note_store+0x67f>\n   18e0b:\tb8 04 00 00 00       \tmov    $0x4,%eax\n   18e10:\teb 56                \tjmp    18e68 <move2add_note_store+0x6d5>\n   18e12:\tb8 06 00 00 00       \tmov    $0x6,%eax\n   18e17:\teb 4f                \tjmp    18e68 <move2add_note_store+0x6d5>\n   18e19:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   18e1c:\t48 98                \tcltq   \n   18e1e:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   18e25:\t0f b6 c0             \tmovzbl %al,%eax\n   18e28:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 18e2e <move2add_note_store+0x69b>\n   18e2e:\t81 e2 00 00 10 00    \tand    $0x100000,%edx\n   18e34:\t85 d2                \ttest   %edx,%edx\n   18e36:\t74 07                \tje     18e3f <move2add_note_store+0x6ac>\n   18e38:\tba 08 00 00 00       \tmov    $0x8,%edx\n   18e3d:\teb 05                \tjmp    18e44 <move2add_note_store+0x6b1>\n   18e3f:\tba 04 00 00 00       \tmov    $0x4,%edx\n   18e44:\t01 d0                \tadd    %edx,%eax\n   18e46:\t83 e8 01             \tsub    $0x1,%eax\n   18e49:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 18e4f <move2add_note_store+0x6bc>\n   18e4f:\t81 e2 00 00 10 00    \tand    $0x100000,%edx\n   18e55:\t85 d2                \ttest   %edx,%edx\n   18e57:\t74 07                \tje     18e60 <move2add_note_store+0x6cd>\n   18e59:\tbf 08 00 00 00       \tmov    $0x8,%edi\n   18e5e:\teb 05                \tjmp    18e65 <move2add_note_store+0x6d2>\n   18e60:\tbf 04 00 00 00       \tmov    $0x4,%edi\n   18e65:\t99                   \tcltd   \n   18e66:\tf7 ff                \tidiv   %edi\n   18e68:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n   18e6b:\t01 d0                \tadd    %edx,%eax\n   18e6d:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n   18e70:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   18e73:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n   18e76:\teb 12                \tjmp    18e8a <move2add_note_store+0x6f7>\n   18e78:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n   18e7b:\tc7 04 85 00 00 00 00 \tmovl   $0x0,0x0(,%rax,4)\n   18e82:\t00 00 00 00 \n   18e86:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n   18e8a:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n   18e8d:\t3b 45 cc             \tcmp    -0x34(%rbp),%eax\n   18e90:\t72 e6                \tjb     18e78 <move2add_note_store+0x6e5>\n   18e92:\teb 04                \tjmp    18e98 <move2add_note_store+0x705>\n   18e94:\t90                   \tnop\n   18e95:\teb 01                \tjmp    18e98 <move2add_note_store+0x705>\n   18e97:\t90                   \tnop\n   18e98:\tc9                   \tleaveq \n   18e99:\tc3                   \tretq   ", "code_s": "__int64 __fastcall move2add_note_store(unsigned __int16 *a1, __int64 a2) {\n  __int64 result;\n  int v4;\n  int v5;\n  bool v6;\n  unsigned int v7;\n  int v8;\n  int v9;\n  int v10;\n  unsigned __int16 *v11;\n  unsigned __int16 *v12;\n  unsigned int v13;\n  int v14;\n  int v15;\n  unsigned __int16 *v16;\n  int v17;\n  __int64 v18;\n  __int64 v19;\n  unsigned int i;\n  int v21;\n  unsigned int v22;\n  v11 = a1;\n  v21 = Number;\n  v17 = *((unsigned __int8 *)a1 + Number);\n  if (*a1 == Number) {\n    v21 = subreg_regno_offset(\n        *(unsigned int *)(*((_QWORD *)a1 + Number) + Number L),\n        *(unsigned __int8 *)(*((_QWORD *)a1 + Number) + Number L),\n        *((unsigned int *)a1 + Number), *((unsigned __int8 *)a1 + Number));\n    v11 = (unsigned __int16 *)*((_QWORD *)a1 + Number);\n  }\n  if (*v11 == Number) {\n    v12 = (unsigned __int16 *)*((_QWORD *)v11 + Number);\n    if (*v12 == Number || *v12 == Number || *v12 == Number ||\n        (result = *v12, (_WORD)result == Number)) {\n      result = *(unsigned int *)(*((_QWORD *)v12 + Number) + Number L);\n      reg_set_luid[result] = Number;\n    }\n    return result;\n  }\n  result = *v11;\n  if ((_WORD)result != Number)\n    return result;\n  v22 = *((_DWORD *)v11 + Number) + v21;\n  if ((v22 <= Number || v22 > Number) && (v22 <= Number || v22 > Number) &&\n      (v22 <= Number || v22 > Number) && (v22 <= Number || v22 > Number)) {\n    v6 = Number;\n    if (v17 != Number && v17 != Number) {\n      v4 = (target_flags & Number) != Number ? Number : Number;\n      v5 = (target_flags & Number) != Number ? Number : Number;\n      if ((v4 + *((unsigned __int8 *)&mode_size + v17) - Number) / v5 == Number)\n        v6 = Number;\n    }\n    if (!v6)\n      goto LABEL_67;\n  } else if (*((_DWORD *)&mode_class + v17) == Number ||\n             *((_DWORD *)&mode_class + v17) == Number) {\n    goto LABEL_67;\n  }\n  if (*(_WORD *)a2 == Number && **(_WORD **)(a2 + Number) != Number &&\n      **(_WORD **)(a2 + Number) != Number &&\n      **(_WORD **)(a2 + Number) != Number) {\n    v16 = *(unsigned __int16 **)(a2 + Number);\n    v15 = *((unsigned __int8 *)v11 + Number);\n    v7 = *v16;\n    if (v7 == Number) {\n      if (**((_WORD **)v16 + Number) != Number)\n        goto LABEL_61;\n      v19 = *((_QWORD *)v16 + Number);\n      if (**((_WORD **)v16 + Number) == Number) {\n        v18 = *(_QWORD *)(*((_QWORD *)v16 + Number) + Number L);\n      } else {\n        if (**((_WORD **)v16 + Number) != Number ||\n            reg_set_luid[*(unsigned int *)(*((_QWORD *)v16 + Number) +\n                                           Number L)] <=\n                move2add_last_label_luid ||\n            *((_BYTE *)&mode_size + *((unsigned __int8 *)v11 + Number)) !=\n                    *((_BYTE *)&mode_size +\n                      reg_mode[*(unsigned int *)(*((_QWORD *)v16 + Number) +\n                                                 Number L)]) &&\n                *((_BYTE *)&mode_size + *((unsigned __int8 *)v11 + Number)) >\n                    *((_BYTE *)&mode_size +\n                      reg_mode[*(unsigned int *)(*((_QWORD *)v16 + Number) +\n                                                 Number L)])) {\n          goto LABEL_61;\n        }\n        if (reg_base_reg[*(unsigned int *)(*((_QWORD *)v16 + Number) +\n                                           Number L)] >= Number) {\n          if (reg_set_luid[*(unsigned int *)(v19 + Number)] <=\n                  move2add_last_label_luid ||\n              *((_BYTE *)&mode_size + *((unsigned __int8 *)v11 + Number)) !=\n                      *((_BYTE *)&mode_size +\n                        reg_mode[*(unsigned int *)(*((_QWORD *)v16 + Number) +\n                                                   Number L)]) &&\n                  *((_BYTE *)&mode_size + *((unsigned __int8 *)v11 + Number)) >\n                      *((_BYTE *)&mode_size +\n                        reg_mode[*(unsigned int *)(*((_QWORD *)v16 + Number) +\n                                                   Number L)]) ||\n              reg_base_reg[*(unsigned int *)(v19 + Number)] >= Number) {\n            goto LABEL_61;\n          }\n          v18 = reg_offset[*(unsigned int *)(v19 + Number)];\n          v19 = *((_QWORD *)v16 + Number);\n        } else {\n          v18 = reg_offset[*(unsigned int *)(*((_QWORD *)v16 + Number) +\n                                             Number L)];\n        }\n      }\n    } else {\n      if (v7 > Number)\n        goto LABEL_61;\n      if (v7 == Number) {\n        reg_base_reg[v22] = Number;\n        reg_offset[v22] = *(_QWORD *)(*(_QWORD *)(a2 + Number) + Number L);\n        reg_set_luid[v22] = move2add_last_label_luid + Number;\n        result = v22;\n        reg_mode[v22] = v17;\n        return result;\n      }\n      if (v7 != Number)\n        goto LABEL_61;\n      v19 = *(_QWORD *)(a2 + Number);\n      v18 = Number L;\n    }\n    v14 = *(_DWORD *)(v19 + Number);\n    if (reg_set_luid[v14] <= move2add_last_label_luid) {\n      reg_base_reg[v14] = v14;\n      reg_offset[v14] = Number L;\n      reg_set_luid[v14] = move2add_luid;\n      reg_mode[v14] = v17;\n    LABEL_66:\n      reg_mode[v22] = v17;\n      reg_set_luid[v22] = reg_set_luid[v14];\n      reg_base_reg[v22] = reg_base_reg[v14];\n      result = sext_for_mode(v15, v18 + reg_offset[v14]);\n      reg_offset[v22] = result;\n      return result;\n    }\n    if (*((_BYTE *)&mode_size + *((unsigned __int8 *)v11 + Number)) ==\n            *((_BYTE *)&mode_size + reg_mode[v14]) ||\n        *((_BYTE *)&mode_size + *((unsigned __int8 *)v11 + Number)) <=\n            *((_BYTE *)&mode_size + reg_mode[v14])) {\n      goto LABEL_66;\n    }\n  LABEL_61:\n    result = v22;\n    reg_set_luid[v22] = Number;\n    return result;\n  }\nLABEL_67:\n  if ((v22 <= Number || v22 > Number) && (v22 <= Number || v22 > Number) &&\n      (v22 <= Number || v22 > Number) && (v22 <= Number || v22 > Number)) {\n    if (v17 == Number) {\n      if ((target_flags & Number) != Number)\n        v8 = Number;\n      else\n        v8 = Number;\n    } else if (v17 == Number) {\n      if ((target_flags & Number) != Number)\n        v8 = Number;\n      else\n        v8 = Number;\n    } else {\n      if ((target_flags & Number) != Number)\n        v9 = Number;\n      else\n        v9 = Number;\n      if ((target_flags & Number) != Number)\n        v10 = Number;\n      else\n        v10 = Number;\n      v8 = (v9 + *((unsigned __int8 *)&mode_size + v17) - Number) / v10;\n    }\n  } else if (*((_DWORD *)&mode_class + v17) == Number ||\n             *((_DWORD *)&mode_class + v17) == Number) {\n    v8 = Number;\n  } else {\n    v8 = Number;\n  }\n  v13 = v22 + v8;\n  for (i = v22;; ++i) {\n    result = i;\n    if (i >= v13)\n      break;\n    reg_set_luid[i] = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl move2add_note_store(rtx <span class=\"supfact\">dst</span>,\n                                 rtx <span class=\"supfact\">set</span>, void *data) {\n  int v4;\n  int <span class=\"supfact\">v5</span>;\n  bool v6;\n  unsigned int v7;\n  int v8;\n  int v9;\n  int v10;\n  rtx dsta;\n  rtx dstb;\n  int <span class=\"supfact\">base_regno</span>;\n  machine_mode <span class=\"supfact\">dst_mode</span>;\n  rtx <span class=\"supfact\">src</span>;\n  machine_mode <span class=\"supfact\">mode</span>;\n  __int64 <span class=\"supfact\">offset</span>;\n  rtx <span class=\"supfact\">base_reg</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  unsigned int regno;\n  unsigned int regnoa;\n  dsta = <span class=\"supfact\">dst</span>;\n  regno = Number;\n  <span class=\"supfact\">mode</span> = *((unsigned __int8 *)<span class=\"supfact\">dst</span> + Number);\n  if (*(_WORD *)<span class=\"supfact\">dst</span> == Number) {\n    regno = subreg_regno_offset(\n        *(unsigned int *)(<span class=\"supfact\">dst</span>->fld[Number].rtwint + Number),\n        *(unsigned __int8 *)(<span class=\"supfact\">dst</span>->fld[Number].rtwint + Number),\n        *(_DWORD *)&<span class=\"supfact\">dst</span>[Number],\n        *((unsigned __int8 *)<span class=\"supfact\">dst</span> + Number));\n    dsta = <span class=\"supfact\">dst</span>->fld[Number].rtx;\n  }\n  if (*(_WORD *)dsta == Number) {\n    dstb = dsta->fld[Number].rtx;\n    if (*(_WORD *)dstb == Number || *(_WORD *)dstb == Number ||\n        *(_WORD *)dstb == Number || *(_WORD *)dstb == Number)\n      reg_set_luid[*(unsigned int *)(dstb->fld[Number].rtwint + Number)] =\n          Number;\n    return;\n  }\n  if (*(_WORD *)dsta != Number)\n    return;\n  regnoa = dsta->fld[Number].rtint + regno;\n  if ((regnoa <= Number || regnoa > Number) &&\n      (regnoa <= Number || regnoa > Number) &&\n      (regnoa <= Number || regnoa > Number) &&\n      (regnoa <= Number || regnoa > Number)) {\n    v6 = Number;\n    if (<span class=\"supfact\">mode</span> != TFmode && <span class=\"supfact\">mode</span> != TCmode) {\n      v4 = (target_flags & Number) != Number ? Number : Number;\n      <span class=\"supfact\">v5</span> = (target_flags & Number) != Number ? Number : Number;\n      if ((v4 + *((unsigned __int8 *)&mode_size + (int)<span class=\"supfact\">mode</span>) -\n           Number) /\n              <span class=\"supfact\">v5</span> ==\n          Number)\n        v6 = Number;\n    }\n    if (!v6)\n      goto LABEL_67;\n  } else if (*((_DWORD *)&mode_class_0 + (int)<span class=\"supfact\">mode</span>) == Number ||\n             *((_DWORD *)&mode_class_0 + (int)<span class=\"supfact\">mode</span>) == Number) {\n    goto LABEL_67;\n  }\n  if (*(_WORD *)<span class=\"supfact\">set</span> == Number &&\n      *(_WORD *)<span class=\"supfact\">set</span>->fld[Number].rtwint != Number &&\n      *(_WORD *)<span class=\"supfact\">set</span>->fld[Number].rtwint != Number &&\n      *(_WORD *)<span class=\"supfact\">set</span>->fld[Number].rtwint != Number) {\n    <span class=\"supfact\">src</span> = (rtx)<span class=\"supfact\">set</span>[Number];\n    <span class=\"supfact\">dst_mode</span> = *((unsigned __int8 *)dsta + Number);\n    v7 = *(_WORD *)<span class=\"supfact\">src</span>;\n    if (v7 == Number) {\n      if (*(_WORD *)<span class=\"supfact\">src</span>->fld[Number].rtwint != Number)\n        goto invalidate;\n      <span class=\"supfact\">base_reg</span> = <span class=\"supfact\">src</span>->fld[Number].rtx;\n      if (**(_WORD **)&<span class=\"supfact\">src</span>[Number] == Number) {\n        <span class=\"supfact\">offset</span> =\n            *(_QWORD *)(*(_QWORD *)&<span class=\"supfact\">src</span>[Number] + Number L);\n      } else {\n        if (**(_WORD **)&<span class=\"supfact\">src</span>[Number] != Number ||\n            reg_set_luid[*(\n                unsigned int *)(*(_QWORD *)&<span class=\"supfact\">src</span>[Number] +\n                                Number L)] <= move2add_last_label_luid ||\n            *((_BYTE *)&mode_size + *((unsigned __int8 *)dsta + Number)) !=\n                    *((_BYTE *)&mode_size +\n                      (int)reg_mode[*(\n                          unsigned int\n                              *)(*(_QWORD *)&<span class=\"supfact\">src</span>[Number] +\n                                 Number L)]) &&\n                *((_BYTE *)&mode_size + *((unsigned __int8 *)dsta + Number)) >\n                    *((_BYTE *)&mode_size +\n                      (int)reg_mode[*(\n                          unsigned int\n                              *)(*(_QWORD *)&<span class=\"supfact\">src</span>[Number] +\n                                 Number L)])) {\n          goto invalidate;\n        }\n        if (reg_base_reg[*(\n                unsigned int *)(*(_QWORD *)&<span class=\"supfact\">src</span>[Number] +\n                                Number L)] >= Number) {\n          if (reg_set_luid[<span class=\"supfact\">base_reg</span>->fld[Number].rtuint] <=\n                  move2add_last_label_luid ||\n              *((_BYTE *)&mode_size + *((unsigned __int8 *)dsta + Number)) !=\n                      *((_BYTE *)&mode_size +\n                        (int)reg_mode[*(\n                            unsigned int\n                                *)(*(_QWORD *)&<span class=\"supfact\">src</span>[Number] +\n                                   Number L)]) &&\n                  *((_BYTE *)&mode_size + *((unsigned __int8 *)dsta + Number)) >\n                      *((_BYTE *)&mode_size +\n                        (int)reg_mode[*(\n                            unsigned int\n                                *)(*(_QWORD *)&<span class=\"supfact\">src</span>[Number] +\n                                   Number L)]) ||\n              reg_base_reg[<span class=\"supfact\">base_reg</span>->fld[Number].rtuint] >=\n                  Number) {\n            goto invalidate;\n          }\n          <span class=\"supfact\">offset</span> =\n              reg_offset[<span class=\"supfact\">base_reg</span>->fld[Number].rtuint];\n          <span class=\"supfact\">base_reg</span> = (rtx)<span class=\"supfact\">src</span>[Number];\n        } else {\n          <span class=\"supfact\">offset</span> = reg_offset[*(\n              unsigned int *)(*(_QWORD *)&<span class=\"supfact\">src</span>[Number] +\n                              Number L)];\n        }\n      }\n    } else {\n      if (v7 > Number)\n        goto invalidate;\n      if (v7 == Number) {\n        reg_base_reg[regnoa] = Number;\n        reg_offset[regnoa] =\n            *(_QWORD *)(*(_QWORD *)&<span class=\"supfact\">set</span>[Number] + Number L);\n        reg_set_luid[regnoa] = move2add_last_label_luid + Number;\n        reg_mode[regnoa] = <span class=\"supfact\">mode</span>;\n        return;\n      }\n      if (v7 != Number)\n        goto invalidate;\n      <span class=\"supfact\">base_reg</span> = (rtx)<span class=\"supfact\">set</span>[Number];\n      <span class=\"supfact\">offset</span> = Number L;\n    }\n    <span class=\"supfact\">base_regno</span> = <span class=\"supfact\">base_reg</span>->fld[Number].rtint;\n    if (reg_set_luid[<span class=\"supfact\">base_regno</span>] <= move2add_last_label_luid) {\n      reg_base_reg[<span class=\"supfact\">base_regno</span>] = <span class=\"supfact\">base_regno</span>;\n      reg_offset[<span class=\"supfact\">base_regno</span>] = Number L;\n      reg_set_luid[<span class=\"supfact\">base_regno</span>] = move2add_luid;\n      reg_mode[<span class=\"supfact\">base_regno</span>] = <span class=\"supfact\">mode</span>;\n    LABEL_66:\n      reg_mode[regnoa] = <span class=\"supfact\">mode</span>;\n      reg_set_luid[regnoa] = reg_set_luid[<span class=\"supfact\">base_regno</span>];\n      reg_base_reg[regnoa] = reg_base_reg[<span class=\"supfact\">base_regno</span>];\n      reg_offset[regnoa] = sext_for_mode(\n          <span class=\"supfact\">dst_mode</span>,\n          <span class=\"supfact\">offset</span> + reg_offset[<span class=\"supfact\">base_regno</span>]);\n      return;\n    }\n    if (*((_BYTE *)&mode_size + *((unsigned __int8 *)dsta + Number)) ==\n            *((_BYTE *)&mode_size +\n              (int)reg_mode[<span class=\"supfact\">base_regno</span>]) ||\n        *((_BYTE *)&mode_size + *((unsigned __int8 *)dsta + Number)) <=\n            *((_BYTE *)&mode_size +\n              (int)reg_mode[<span class=\"supfact\">base_regno</span>])) {\n      goto LABEL_66;\n    }\n  invalidate:\n    reg_set_luid[regnoa] = Number;\n    return;\n  }\nLABEL_67:\n  if ((regnoa <= Number || regnoa > Number) &&\n      (regnoa <= Number || regnoa > Number) &&\n      (regnoa <= Number || regnoa > Number) &&\n      (regnoa <= Number || regnoa > Number)) {\n    if (<span class=\"supfact\">mode</span> == TFmode) {\n      if ((target_flags & Number) != Number)\n        v8 = Number;\n      else\n        v8 = Number;\n    } else if (<span class=\"supfact\">mode</span> == TCmode) {\n      if ((target_flags & Number) != Number)\n        v8 = Number;\n      else\n        v8 = Number;\n    } else {\n      if ((target_flags & Number) != Number)\n        v9 = Number;\n      else\n        v9 = Number;\n      if ((target_flags & Number) != Number)\n        v10 = Number;\n      else\n        v10 = Number;\n      v8 = (v9 + *((unsigned __int8 *)&mode_size + (int)<span class=\"supfact\">mode</span>) -\n            Number) /\n           v10;\n    }\n  } else if (*((_DWORD *)&mode_class_0 + (int)<span class=\"supfact\">mode</span>) == Number ||\n             *((_DWORD *)&mode_class_0 + (int)<span class=\"supfact\">mode</span>) == Number) {\n    v8 = Number;\n  } else {\n    v8 = Number;\n  }\n  for (<span class=\"supfact\">i</span> = regnoa; <span class=\"supfact\">i</span> < regnoa + v8;\n       ++<span class=\"supfact\">i</span>)\n    reg_set_luid[<span class=\"supfact\">i</span>] = Number;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "dst", "ref_type": "rtx"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "set", "ref_type": "rtx"}, {"name": "v5", "type": "int", "pred_name": "v5", "ref_name": "v5", "ref_type": "int"}, {"name": "v13", "type": "int", "pred_name": "v13", "ref_name": "", "ref_type": "disappear"}, {"name": "v14", "type": "int", "pred_name": "v14", "ref_name": "base_regno", "ref_type": "int"}, {"name": "v15", "type": "__int64", "pred_name": "v15", "ref_name": "dst_mode", "ref_type": "machine_mode"}, {"name": "v16", "type": "__int64", "pred_name": "v16", "ref_name": "src", "ref_type": "rtx"}, {"name": "v17", "type": "int", "pred_name": "v17", "ref_name": "mode", "ref_type": "machine_mode"}, {"name": "v18", "type": "__int64", "pred_name": "v18", "ref_name": "offset", "ref_type": "__int64"}, {"name": "v19", "type": "__int64", "pred_name": "v19", "ref_name": "base_reg", "ref_type": "rtx"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "slapin", "repo_name": "q2-dev", "path": "slapin/q2-dev/e1b91f1ae6f6bf16d95fca94468a1efb869b9f59680796b18b71f5c99abc0058", "path_in_repo": "slapin/q2-dev/quake2/releasex86_64/ref_glx.so", "objdump": "000000000003d216 <Info_SetValueForKey>:\n   3d216:\t53                   \tpush   %rbx\n   3d217:\t48 81 ec 30 02 00 00 \tsub    $0x230,%rsp\n   3d21e:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n   3d223:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n   3d228:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n   3d22d:\tc7 84 24 24 02 00 00 \tmovl   $0x200,0x224(%rsp)\n   3d234:\t00 02 00 00 \n   3d238:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   3d23d:\tbe 5c 00 00 00       \tmov    $0x5c,%esi\n   3d242:\t48 89 c7             \tmov    %rax,%rdi\n   3d245:\te8 96 42 fd ff       \tcallq  114e0 <strchr@plt>\n   3d24a:\t48 85 c0             \ttest   %rax,%rax\n   3d24d:\t75 17                \tjne    3d266 <Info_SetValueForKey+0x50>\n   3d24f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   3d254:\tbe 5c 00 00 00       \tmov    $0x5c,%esi\n   3d259:\t48 89 c7             \tmov    %rax,%rdi\n   3d25c:\te8 7f 42 fd ff       \tcallq  114e0 <strchr@plt>\n   3d261:\t48 85 c0             \ttest   %rax,%rax\n   3d264:\t74 16                \tje     3d27c <Info_SetValueForKey+0x66>\n   3d266:\t48 8d 3d 43 8a 00 00 \tlea    0x8a43(%rip),%rdi        # 45cb0 <_fini+0x4520>\n   3d26d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d272:\te8 e9 47 fd ff       \tcallq  11a60 <Com_Printf@plt>\n   3d277:\te9 e0 01 00 00       \tjmpq   3d45c <Info_SetValueForKey+0x246>\n   3d27c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   3d281:\tbe 3b 00 00 00       \tmov    $0x3b,%esi\n   3d286:\t48 89 c7             \tmov    %rax,%rdi\n   3d289:\te8 52 42 fd ff       \tcallq  114e0 <strchr@plt>\n   3d28e:\t48 85 c0             \ttest   %rax,%rax\n   3d291:\t74 16                \tje     3d2a9 <Info_SetValueForKey+0x93>\n   3d293:\t48 8d 3d 3e 8a 00 00 \tlea    0x8a3e(%rip),%rdi        # 45cd8 <_fini+0x4548>\n   3d29a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d29f:\te8 bc 47 fd ff       \tcallq  11a60 <Com_Printf@plt>\n   3d2a4:\te9 b3 01 00 00       \tjmpq   3d45c <Info_SetValueForKey+0x246>\n   3d2a9:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   3d2ae:\tbe 22 00 00 00       \tmov    $0x22,%esi\n   3d2b3:\t48 89 c7             \tmov    %rax,%rdi\n   3d2b6:\te8 25 42 fd ff       \tcallq  114e0 <strchr@plt>\n   3d2bb:\t48 85 c0             \ttest   %rax,%rax\n   3d2be:\t75 17                \tjne    3d2d7 <Info_SetValueForKey+0xc1>\n   3d2c0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   3d2c5:\tbe 22 00 00 00       \tmov    $0x22,%esi\n   3d2ca:\t48 89 c7             \tmov    %rax,%rdi\n   3d2cd:\te8 0e 42 fd ff       \tcallq  114e0 <strchr@plt>\n   3d2d2:\t48 85 c0             \ttest   %rax,%rax\n   3d2d5:\t74 16                \tje     3d2ed <Info_SetValueForKey+0xd7>\n   3d2d7:\t48 8d 3d 2a 8a 00 00 \tlea    0x8a2a(%rip),%rdi        # 45d08 <_fini+0x4578>\n   3d2de:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d2e3:\te8 78 47 fd ff       \tcallq  11a60 <Com_Printf@plt>\n   3d2e8:\te9 6f 01 00 00       \tjmpq   3d45c <Info_SetValueForKey+0x246>\n   3d2ed:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   3d2f2:\t48 89 c7             \tmov    %rax,%rdi\n   3d2f5:\te8 56 41 fd ff       \tcallq  11450 <strlen@plt>\n   3d2fa:\t48 83 f8 3f          \tcmp    $0x3f,%rax\n   3d2fe:\t77 13                \tja     3d313 <Info_SetValueForKey+0xfd>\n   3d300:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   3d305:\t48 89 c7             \tmov    %rax,%rdi\n   3d308:\te8 43 41 fd ff       \tcallq  11450 <strlen@plt>\n   3d30d:\t48 83 f8 3f          \tcmp    $0x3f,%rax\n   3d311:\t76 16                \tjbe    3d329 <Info_SetValueForKey+0x113>\n   3d313:\t48 8d 3d 16 8a 00 00 \tlea    0x8a16(%rip),%rdi        # 45d30 <_fini+0x45a0>\n   3d31a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d31f:\te8 3c 47 fd ff       \tcallq  11a60 <Com_Printf@plt>\n   3d324:\te9 33 01 00 00       \tjmpq   3d45c <Info_SetValueForKey+0x246>\n   3d329:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n   3d32e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   3d333:\t48 89 d6             \tmov    %rdx,%rsi\n   3d336:\t48 89 c7             \tmov    %rax,%rdi\n   3d339:\te8 42 4c fd ff       \tcallq  11f80 <Info_RemoveKey@plt>\n   3d33e:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n   3d344:\t0f 84 11 01 00 00    \tje     3d45b <Info_SetValueForKey+0x245>\n   3d34a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   3d34f:\t0f b6 00             \tmovzbl (%rax),%eax\n   3d352:\t84 c0                \ttest   %al,%al\n   3d354:\t0f 84 01 01 00 00    \tje     3d45b <Info_SetValueForKey+0x245>\n   3d35a:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n   3d35f:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n   3d364:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n   3d369:\t49 89 c8             \tmov    %rcx,%r8\n   3d36c:\t48 89 d1             \tmov    %rdx,%rcx\n   3d36f:\t48 8d 15 e4 89 00 00 \tlea    0x89e4(%rip),%rdx        # 45d5a <_fini+0x45ca>\n   3d376:\tbe 00 02 00 00       \tmov    $0x200,%esi\n   3d37b:\t48 89 c7             \tmov    %rax,%rdi\n   3d37e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d383:\te8 f8 45 fd ff       \tcallq  11980 <Com_sprintf@plt>\n   3d388:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n   3d38d:\t48 89 c7             \tmov    %rax,%rdi\n   3d390:\te8 bb 40 fd ff       \tcallq  11450 <strlen@plt>\n   3d395:\t48 89 c3             \tmov    %rax,%rbx\n   3d398:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   3d39d:\t48 89 c7             \tmov    %rax,%rdi\n   3d3a0:\te8 ab 40 fd ff       \tcallq  11450 <strlen@plt>\n   3d3a5:\t48 8d 14 03          \tlea    (%rbx,%rax,1),%rdx\n   3d3a9:\t8b 84 24 24 02 00 00 \tmov    0x224(%rsp),%eax\n   3d3b0:\t48 98                \tcltq   \n   3d3b2:\t48 39 c2             \tcmp    %rax,%rdx\n   3d3b5:\t76 16                \tjbe    3d3cd <Info_SetValueForKey+0x1b7>\n   3d3b7:\t48 8d 3d a3 89 00 00 \tlea    0x89a3(%rip),%rdi        # 45d61 <_fini+0x45d1>\n   3d3be:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d3c3:\te8 98 46 fd ff       \tcallq  11a60 <Com_Printf@plt>\n   3d3c8:\te9 8f 00 00 00       \tjmpq   3d45c <Info_SetValueForKey+0x246>\n   3d3cd:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   3d3d2:\t48 89 c7             \tmov    %rax,%rdi\n   3d3d5:\te8 76 40 fd ff       \tcallq  11450 <strlen@plt>\n   3d3da:\t48 01 44 24 18       \tadd    %rax,0x18(%rsp)\n   3d3df:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n   3d3e4:\t48 89 84 24 28 02 00 \tmov    %rax,0x228(%rsp)\n   3d3eb:\t00 \n   3d3ec:\teb 54                \tjmp    3d442 <Info_SetValueForKey+0x22c>\n   3d3ee:\t48 8b 84 24 28 02 00 \tmov    0x228(%rsp),%rax\n   3d3f5:\t00 \n   3d3f6:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n   3d3fa:\t48 89 94 24 28 02 00 \tmov    %rdx,0x228(%rsp)\n   3d401:\t00 \n   3d402:\t0f b6 00             \tmovzbl (%rax),%eax\n   3d405:\t0f be c0             \tmovsbl %al,%eax\n   3d408:\t89 84 24 20 02 00 00 \tmov    %eax,0x220(%rsp)\n   3d40f:\t83 a4 24 20 02 00 00 \tandl   $0x7f,0x220(%rsp)\n   3d416:\t7f \n   3d417:\t83 bc 24 20 02 00 00 \tcmpl   $0x1f,0x220(%rsp)\n   3d41e:\t1f \n   3d41f:\t7e 21                \tjle    3d442 <Info_SetValueForKey+0x22c>\n   3d421:\t83 bc 24 20 02 00 00 \tcmpl   $0x7e,0x220(%rsp)\n   3d428:\t7e \n   3d429:\t7f 17                \tjg     3d442 <Info_SetValueForKey+0x22c>\n   3d42b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   3d430:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n   3d434:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n   3d439:\t8b 94 24 20 02 00 00 \tmov    0x220(%rsp),%edx\n   3d440:\t88 10                \tmov    %dl,(%rax)\n   3d442:\t48 8b 84 24 28 02 00 \tmov    0x228(%rsp),%rax\n   3d449:\t00 \n   3d44a:\t0f b6 00             \tmovzbl (%rax),%eax\n   3d44d:\t84 c0                \ttest   %al,%al\n   3d44f:\t75 9d                \tjne    3d3ee <Info_SetValueForKey+0x1d8>\n   3d451:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   3d456:\tc6 00 00             \tmovb   $0x0,(%rax)\n   3d459:\teb 01                \tjmp    3d45c <Info_SetValueForKey+0x246>\n   3d45b:\t90                   \tnop\n   3d45c:\t48 81 c4 30 02 00 00 \tadd    $0x230,%rsp\n   3d463:\t5b                   \tpop    %rbx\n   3d464:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Info_SetValueForKey(const char *a1, const char *a2,\n                                       const char *a3) {\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  __int64 result;\n  int v8;\n  int v9;\n  int v10;\n  int v11;\n  int v12;\n  int v13;\n  int v14;\n  int v15;\n  int v16;\n  int v17;\n  int v18;\n  int v19;\n  int v20;\n  size_t v21;\n  unsigned __int64 v22;\n  int v23;\n  int v24;\n  int v25;\n  char *v26;\n  char *v27;\n  char v28;\n  char v29;\n  char *v31;\n  char v32[Number];\n  unsigned int v33;\n  int v34;\n  char *v35;\n  v34 = Number;\n  if (strchr(a2, Number) || strchr(a3, Number))\n    return Com_Printf((int)String, Number, v3, v4, v5, v6, v28);\n  if (strchr(a2, Number))\n    return Com_Printf((int)String, Number, v8, v9, v10, v11, v28);\n  if (strchr(a2, Number) || strchr(a3, Number))\n    return Com_Printf((int)String, Number, v12, v13, v14, v15, v28);\n  if (strlen(a2) > Number || strlen(a3) > Number)\n    return Com_Printf((int)String, Number, v16, v17, v18, v19, v28);\n  result = Info_RemoveKey(a1, a2);\n  if (a3) {\n    result = *(unsigned __int8 *)a3;\n    if ((_BYTE)result) {\n      Com_sprintf((int)v32, Number, (int)String, (int)a2, (int)a3, v20, v28);\n      v21 = strlen(v32);\n      v22 = v21 + strlen(a1);\n      if (v22 <= v34) {\n        v31 = (char *)&a1[strlen(a1)];\n        v35 = v32;\n        while (*v35) {\n          v26 = v35++;\n          v33 = *v26 & Number;\n          if (v33 > Number && (int)v33 <= Number) {\n            v27 = v31++;\n            *v27 = v33;\n          }\n        }\n        result = (__int64)v31;\n        *v31 = Number;\n      } else {\n        result = Com_Printf((int)String, Number, v22, v23, v24, v25, v29);\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl Info_SetValueForKey(char *<span class=\"supfact\">s</span>,\n                                 char *<span class=\"supfact\">key</span>,\n                                 char *<span class=\"supfact\">value</span>) {\n  size_t <span class=\"supfact\">v3</span>;\n  size_t v4;\n  char *v5;\n  char *v6;\n  char *<span class=\"supfact\">sa</span>;\n  char <span class=\"supfact\">newi</span>[Number];\n  int <span class=\"supfact\">c</span>;\n  int <span class=\"supfact\">maxsize</span>;\n  char *<span class=\"supfact\">v</span>;\n  <span class=\"supfact\">maxsize</span> = Number;\n  if (strchr(<span class=\"supfact\">key</span>, Number) ||\n      strchr(<span class=\"supfact\">value</span>, Number)) {\n    Com_Printf(String);\n  } else if (strchr(<span class=\"supfact\">key</span>, Number)) {\n    Com_Printf(String);\n  } else if (strchr(<span class=\"supfact\">key</span>, Number) ||\n             strchr(<span class=\"supfact\">value</span>, Number)) {\n    Com_Printf(String);\n  } else if (strlen(<span class=\"supfact\">key</span>) <= Number &&\n             strlen(<span class=\"supfact\">value</span>) <= Number) {\n    Info_RemoveKey(<span class=\"supfact\">s</span>, <span class=\"supfact\">key</span>);\n    if (<span class=\"supfact\">value</span> && *<span class=\"supfact\">value</span>) {\n      Com_sprintf(<span class=\"supfact\">newi</span>, Number, String, <span class=\"supfact\">key</span>,\n                  <span class=\"supfact\">value</span>);\n      <span class=\"supfact\">v3</span> = strlen(<span class=\"supfact\">newi</span>);\n      v4 = strlen(<span class=\"supfact\">s</span>);\n      if (<span class=\"supfact\">v3</span> + v4 <= <span class=\"supfact\">maxsize</span>) {\n        <span class=\"supfact\">sa</span> = &<span class=\"supfact\">s</span>[strlen(<span class=\"supfact\">s</span>)];\n        <span class=\"supfact\">v</span> = <span class=\"supfact\">newi</span>;\n        while (*<span class=\"supfact\">v</span>) {\n          v5 = <span class=\"supfact\">v</span>++;\n          <span class=\"supfact\">c</span> = *v5 & Number;\n          if ((unsigned int)<span class=\"supfact\">c</span> > Number &&\n              <span class=\"supfact\">c</span> <= Number) {\n            v6 = <span class=\"supfact\">sa</span>++;\n            *v6 = <span class=\"supfact\">c</span>;\n          }\n        }\n        *<span class=\"supfact\">sa</span> = Number;\n      } else {\n        Com_Printf(String);\n      }\n    }\n  } else {\n    Com_Printf(String);\n  }\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "s", "ref_name": "s", "ref_type": "char *"}, {"name": "a2", "type": "char *", "pred_name": "key", "ref_name": "key", "ref_type": "char *"}, {"name": "a3", "type": "char *", "pred_name": "value", "ref_name": "value", "ref_type": "char *"}, {"name": "v21", "type": "size_t", "pred_name": "v3", "ref_name": "v3", "ref_type": "size_t"}, {"name": "v31", "type": "char *", "pred_name": "sa", "ref_name": "sa", "ref_type": "char *"}, {"name": "v32", "type": "char[512]", "pred_name": "newi", "ref_name": "newi", "ref_type": "char[512]"}, {"name": "v33", "type": "int", "pred_name": "c", "ref_name": "c", "ref_type": "int"}, {"name": "v34", "type": "int", "pred_name": "maxsize", "ref_name": "maxsize", "ref_type": "int"}, {"name": "v35", "type": "char *", "pred_name": "v", "ref_name": "v", "ref_type": "char *"}], "body_in_train": true}, {"repo_owner": "UltraAOST", "repo_name": "platform_external_wpa_supplicant_8", "path": "UltraAOST/platform_external_wpa_supplicant_8/f7adf06b74d6d7e400e0458262bda7be793f8e709983d480578db4dcc878a690", "path_in_repo": "UltraAOST/platform_external_wpa_supplicant_8/src/tls/tlsv1_common.o", "objdump": "00000000000008e0 <tls_key_x_server_params_hash>:\n 8e0:\t55                   \tpush   %rbp\n 8e1:\t48 89 e5             \tmov    %rsp,%rbp\n 8e4:\t48 83 ec 50          \tsub    $0x50,%rsp\n 8e8:\t89 f8                \tmov    %edi,%eax\n 8ea:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n 8ee:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n 8f2:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n 8f6:\t4c 89 45 b8          \tmov    %r8,-0x48(%rbp)\n 8fa:\t4c 89 4d b0          \tmov    %r9,-0x50(%rbp)\n 8fe:\t66 89 45 dc          \tmov    %ax,-0x24(%rbp)\n 902:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 906:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 90a:\tba 00 00 00 00       \tmov    $0x0,%edx\n 90f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 914:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 919:\te8 00 00 00 00       \tcallq  91e <tls_key_x_server_params_hash+0x3e>\n 91e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 922:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 927:\t75 0a                \tjne    933 <tls_key_x_server_params_hash+0x53>\n 929:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 92e:\te9 2e 01 00 00       \tjmpq   a61 <tls_key_x_server_params_hash+0x181>\n 933:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n 937:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 93b:\tba 20 00 00 00       \tmov    $0x20,%edx\n 940:\t48 89 ce             \tmov    %rcx,%rsi\n 943:\t48 89 c7             \tmov    %rax,%rdi\n 946:\te8 00 00 00 00       \tcallq  94b <tls_key_x_server_params_hash+0x6b>\n 94b:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n 94f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 953:\tba 20 00 00 00       \tmov    $0x20,%edx\n 958:\t48 89 ce             \tmov    %rcx,%rsi\n 95b:\t48 89 c7             \tmov    %rax,%rdi\n 95e:\te8 00 00 00 00       \tcallq  963 <tls_key_x_server_params_hash+0x83>\n 963:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n 967:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n 96b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 96f:\t48 89 ce             \tmov    %rcx,%rsi\n 972:\t48 89 c7             \tmov    %rax,%rdi\n 975:\te8 00 00 00 00       \tcallq  97a <tls_key_x_server_params_hash+0x9a>\n 97a:\t48 c7 45 e8 10 00 00 \tmovq   $0x10,-0x18(%rbp)\n 981:\t00 \n 982:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n 986:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n 98a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 98e:\t48 89 ce             \tmov    %rcx,%rsi\n 991:\t48 89 c7             \tmov    %rax,%rdi\n 994:\te8 00 00 00 00       \tcallq  999 <tls_key_x_server_params_hash+0xb9>\n 999:\t85 c0                \ttest   %eax,%eax\n 99b:\t79 0a                \tjns    9a7 <tls_key_x_server_params_hash+0xc7>\n 99d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 9a2:\te9 ba 00 00 00       \tjmpq   a61 <tls_key_x_server_params_hash+0x181>\n 9a7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 9ab:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n 9af:\tba 00 00 00 00       \tmov    $0x0,%edx\n 9b4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 9b9:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 9be:\te8 00 00 00 00       \tcallq  9c3 <tls_key_x_server_params_hash+0xe3>\n 9c3:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 9c7:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 9cc:\t75 0a                \tjne    9d8 <tls_key_x_server_params_hash+0xf8>\n 9ce:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 9d3:\te9 89 00 00 00       \tjmpq   a61 <tls_key_x_server_params_hash+0x181>\n 9d8:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n 9dc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 9e0:\tba 20 00 00 00       \tmov    $0x20,%edx\n 9e5:\t48 89 ce             \tmov    %rcx,%rsi\n 9e8:\t48 89 c7             \tmov    %rax,%rdi\n 9eb:\te8 00 00 00 00       \tcallq  9f0 <tls_key_x_server_params_hash+0x110>\n 9f0:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n 9f4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 9f8:\tba 20 00 00 00       \tmov    $0x20,%edx\n 9fd:\t48 89 ce             \tmov    %rcx,%rsi\n a00:\t48 89 c7             \tmov    %rax,%rdi\n a03:\te8 00 00 00 00       \tcallq  a08 <tls_key_x_server_params_hash+0x128>\n a08:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n a0c:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n a10:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n a14:\t48 89 ce             \tmov    %rcx,%rsi\n a17:\t48 89 c7             \tmov    %rax,%rdi\n a1a:\te8 00 00 00 00       \tcallq  a1f <tls_key_x_server_params_hash+0x13f>\n a1f:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n a23:\t48 83 c0 08          \tadd    $0x8,%rax\n a27:\t48 2b 45 f8          \tsub    -0x8(%rbp),%rax\n a2b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n a2f:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n a33:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n a37:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n a3b:\t48 89 ce             \tmov    %rcx,%rsi\n a3e:\t48 89 c7             \tmov    %rax,%rdi\n a41:\te8 00 00 00 00       \tcallq  a46 <tls_key_x_server_params_hash+0x166>\n a46:\t85 c0                \ttest   %eax,%eax\n a48:\t79 07                \tjns    a51 <tls_key_x_server_params_hash+0x171>\n a4a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n a4f:\teb 10                \tjmp    a61 <tls_key_x_server_params_hash+0x181>\n a51:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n a55:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n a59:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n a5d:\t48 2b 45 b0          \tsub    -0x50(%rbp),%rax\n a61:\tc9                   \tleaveq \n a62:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tls_key_x_server_params_hash(__int64 a1, __int64 a2,\n                                                __int64 a3, __int64 a4,\n                                                __int64 a5, __int64 a6) {\n  __int64 result;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  v13 = a6;\n  v12 = crypto_hash_init(Number L, Number L, Number L);\n  if (!v12)\n    return Number;\n  crypto_hash_update(v12, a2, Number L);\n  crypto_hash_update(v12, a3, Number L);\n  crypto_hash_update(v12, a4, a5);\n  v11 = Number L;\n  if ((int)crypto_hash_finish(v12, a6, &v11) < Number)\n    return Number;\n  v13 += v11;\n  v12 = crypto_hash_init(Number L, Number L, Number L);\n  if (!v12)\n    return Number;\n  crypto_hash_update(v12, a2, Number L);\n  crypto_hash_update(v12, a3, Number L);\n  crypto_hash_update(v12, a4, a5);\n  v11 = a6 + Number - v13;\n  if ((int)crypto_hash_finish(v12, v13, &v11) >= Number)\n    result = v11 + v13 - a6;\n  else\n    result = Number;\n  return result;\n}", "code_t": "int __cdecl tls_key_x_server_params_hash(\n    u16 <span class=\"supfact\">tls_version</span>, const u8 *<span class=\"supfact\">client_random</span>,\n    const u8 *<span class=\"supfact\">server_random</span>,\n    const u8 *<span class=\"supfact\">server_params</span>,\n    size_t <span class=\"supfact\">server_params_len</span>, u8 *<span class=\"supfact\">hash</span>) {\n  int <span class=\"supfact\">result</span>;\n  size_t <span class=\"supfact\">hlen</span>;\n  crypto_hash *<span class=\"supfact\">ctx</span>;\n  u8 *<span class=\"supfact\">hpos</span>;\n  <span class=\"supfact\">hpos</span> = <span class=\"supfact\">hash</span>;\n  <span class=\"supfact\">ctx</span> =\n      (crypto_hash *)crypto_hash_init(Number L, Number L, Number L);\n  if (!<span class=\"supfact\">ctx</span>)\n    return Number;\n  crypto_hash_update(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">client_random</span>,\n                     Number L);\n  crypto_hash_update(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">server_random</span>,\n                     Number L);\n  crypto_hash_update(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">server_params</span>,\n                     <span class=\"supfact\">server_params_len</span>);\n  <span class=\"supfact\">hlen</span> = Number L;\n  if ((int)crypto_hash_finish(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">hash</span>,\n                              &<span class=\"supfact\">hlen</span>) < Number)\n    return Number;\n  <span class=\"supfact\">hpos</span> += <span class=\"supfact\">hlen</span>;\n  <span class=\"supfact\">ctx</span> =\n      (crypto_hash *)crypto_hash_init(Number L, Number L, Number L);\n  if (!<span class=\"supfact\">ctx</span>)\n    return Number;\n  crypto_hash_update(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">client_random</span>,\n                     Number L);\n  crypto_hash_update(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">server_random</span>,\n                     Number L);\n  crypto_hash_update(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">server_params</span>,\n                     <span class=\"supfact\">server_params_len</span>);\n  <span class=\"supfact\">hlen</span> = <span class=\"supfact\">hash</span> + Number - <span class=\"supfact\">hpos</span>;\n  if ((int)crypto_hash_finish(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">hpos</span>,\n                              &<span class=\"supfact\">hlen</span>) >= Number)\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">hlen</span> +\n                             (_DWORD)<span class=\"supfact\">hpos</span> -\n                             (_DWORD)<span class=\"supfact\">hash</span>;\n  else\n    <span class=\"supfact\">result</span> = Number;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "const u8 *", "pred_name": "__unk__", "ref_name": "tls_version", "ref_type": "u16"}, {"name": "a2", "type": "const u8 *", "pred_name": "__unk__", "ref_name": "client_random", "ref_type": "const u8 *"}, {"name": "a3", "type": "const u8 *", "pred_name": "__unk__", "ref_name": "server_random", "ref_type": "const u8 *"}, {"name": "a4", "type": "size_t", "pred_name": "__unk__", "ref_name": "server_params", "ref_type": "const u8 *"}, {"name": "a5", "type": "const u8 *", "pred_name": "__unk__", "ref_name": "server_params_len", "ref_type": "size_t"}, {"name": "a6", "type": "u8 *", "pred_name": "__unk__", "ref_name": "hash", "ref_type": "u8 *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "v11", "type": "const u8 *", "pred_name": "__unk__", "ref_name": "hlen", "ref_type": "size_t"}, {"name": "v12", "type": "crypto_hash *", "pred_name": "__unk__", "ref_name": "ctx", "ref_type": "crypto_hash *"}, {"name": "v13", "type": "crypto_hash *", "pred_name": "hash", "ref_name": "hpos", "ref_type": "u8 *"}], "body_in_train": true}, {"repo_owner": "luparev22", "repo_name": "TEST", "path": "luparev22/TEST/438f11d16cde2b43a7fdd640d693e761746bb526576bf348a065d80f552572e4", "path_in_repo": "luparev22/TEST//include_gtk/lib64/libgobject-2.0.so.0.5800.3", "objdump": "", "code_s": "void __fastcall sub_1F440(__int64 a1) {\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = Number L;\n}", "code_t": "void __fastcall sub_1F440(__int64 <span class=\"supfact\">a1</span>) {\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = Number L;\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = Number L;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "vmware", "repo_name": "likewise-open", "path": "vmware/likewise-open/804f97446220d375cafe88a3f03f0efdb56bc424111ec325b5a425780dd49d85", "path_in_repo": "vmware/likewise-open/openssl/test/dhtest", "objdump": "00000000004225ea <bn_mul_recursive>:\n  4225ea:\t55                   \tpush   %rbp\n  4225eb:\t48 89 e5             \tmov    %rsp,%rbp\n  4225ee:\t48 83 ec 70          \tsub    $0x70,%rsp\n  4225f2:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  4225f6:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  4225fa:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n  4225fe:\t89 4d a4             \tmov    %ecx,-0x5c(%rbp)\n  422601:\t44 89 45 a0          \tmov    %r8d,-0x60(%rbp)\n  422605:\t44 89 4d 9c          \tmov    %r9d,-0x64(%rbp)\n  422609:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  42260c:\t89 c2                \tmov    %eax,%edx\n  42260e:\tc1 ea 1f             \tshr    $0x1f,%edx\n  422611:\t01 d0                \tadd    %edx,%eax\n  422613:\td1 f8                \tsar    %eax\n  422615:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  422618:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  42261b:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  42261e:\t01 d0                \tadd    %edx,%eax\n  422620:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  422623:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  422626:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  422629:\t01 d0                \tadd    %edx,%eax\n  42262b:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  42262e:\t83 7d a4 08          \tcmpl   $0x8,-0x5c(%rbp)\n  422632:\t75 28                \tjne    42265c <bn_mul_recursive+0x72>\n  422634:\t83 7d a0 00          \tcmpl   $0x0,-0x60(%rbp)\n  422638:\t75 22                \tjne    42265c <bn_mul_recursive+0x72>\n  42263a:\t83 7d 9c 00          \tcmpl   $0x0,-0x64(%rbp)\n  42263e:\t75 1c                \tjne    42265c <bn_mul_recursive+0x72>\n  422640:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  422644:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n  422648:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  42264c:\t48 89 ce             \tmov    %rcx,%rsi\n  42264f:\t48 89 c7             \tmov    %rax,%rdi\n  422652:\te8 ad 4b fe ff       \tcallq  407204 <bn_mul_comba8>\n  422657:\te9 d1 07 00 00       \tjmpq   422e2d <bn_mul_recursive+0x843>\n  42265c:\t83 7d a4 0f          \tcmpl   $0xf,-0x5c(%rbp)\n  422660:\t0f 8f 85 00 00 00    \tjg     4226eb <bn_mul_recursive+0x101>\n  422666:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n  422669:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  42266c:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n  42266f:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n  422672:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  422675:\t8d 3c 02             \tlea    (%rdx,%rax,1),%edi\n  422678:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  42267c:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n  422680:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422684:\t41 89 c8             \tmov    %ecx,%r8d\n  422687:\t48 89 d1             \tmov    %rdx,%rcx\n  42268a:\t89 fa                \tmov    %edi,%edx\n  42268c:\t48 89 c7             \tmov    %rax,%rdi\n  42268f:\te8 66 20 00 00       \tcallq  4246fa <bn_mul_normal>\n  422694:\t8b 55 a0             \tmov    -0x60(%rbp),%edx\n  422697:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  42269a:\t01 d0                \tadd    %edx,%eax\n  42269c:\t85 c0                \ttest   %eax,%eax\n  42269e:\t0f 89 88 07 00 00    \tjns    422e2c <bn_mul_recursive+0x842>\n  4226a4:\t8b 55 a0             \tmov    -0x60(%rbp),%edx\n  4226a7:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  4226aa:\t01 d0                \tadd    %edx,%eax\n  4226ac:\tf7 d8                \tneg    %eax\n  4226ae:\t48 98                \tcltq   \n  4226b0:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4226b7:\t00 \n  4226b8:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  4226bb:\t8d 0c 00             \tlea    (%rax,%rax,1),%ecx\n  4226be:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  4226c1:\t01 c1                \tadd    %eax,%ecx\n  4226c3:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  4226c6:\t01 c8                \tadd    %ecx,%eax\n  4226c8:\t48 98                \tcltq   \n  4226ca:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  4226d1:\t00 \n  4226d2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4226d6:\t48 01 c8             \tadd    %rcx,%rax\n  4226d9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4226de:\t48 89 c7             \tmov    %rax,%rdi\n  4226e1:\te8 3a ea fd ff       \tcallq  401120 <memset@plt>\n  4226e6:\te9 41 07 00 00       \tjmpq   422e2c <bn_mul_recursive+0x842>\n  4226eb:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4226ee:\t2b 45 e0             \tsub    -0x20(%rbp),%eax\n  4226f1:\t89 c1                \tmov    %eax,%ecx\n  4226f3:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4226f6:\t48 98                \tcltq   \n  4226f8:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4226ff:\t00 \n  422700:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  422704:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  422708:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  42270b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  42270f:\t48 89 c7             \tmov    %rax,%rdi\n  422712:\te8 52 22 fe ff       \tcallq  404969 <bn_cmp_part_words>\n  422717:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  42271a:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  42271d:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n  422720:\t89 c1                \tmov    %eax,%ecx\n  422722:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422725:\t48 98                \tcltq   \n  422727:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  42272e:\t00 \n  42272f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  422733:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n  422737:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  42273a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  42273e:\t48 89 c6             \tmov    %rax,%rsi\n  422741:\te8 23 22 fe ff       \tcallq  404969 <bn_cmp_part_words>\n  422746:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  422749:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  422750:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  422753:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  422756:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  422759:\t89 d0                \tmov    %edx,%eax\n  42275b:\t01 c0                \tadd    %eax,%eax\n  42275d:\t01 c2                \tadd    %eax,%edx\n  42275f:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  422762:\t01 d0                \tadd    %edx,%eax\n  422764:\t83 c0 04             \tadd    $0x4,%eax\n  422767:\t83 f8 08             \tcmp    $0x8,%eax\n  42276a:\t0f 87 43 02 00 00    \tja     4229b3 <bn_mul_recursive+0x3c9>\n  422770:\t89 c0                \tmov    %eax,%eax\n  422772:\t48 8b 04 c5 e0 a1 44 \tmov    0x44a1e0(,%rax,8),%rax\n  422779:\t00 \n  42277a:\tff e0                \tjmpq   *%rax\n  42277c:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  42277f:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n  422782:\t89 c1                \tmov    %eax,%ecx\n  422784:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422787:\t48 98                \tcltq   \n  422789:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422790:\t00 \n  422791:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  422795:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  422799:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  42279c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  4227a0:\t41 89 c8             \tmov    %ecx,%r8d\n  4227a3:\t89 d1                \tmov    %edx,%ecx\n  4227a5:\t48 89 c2             \tmov    %rax,%rdx\n  4227a8:\t48 8b 7d 10          \tmov    0x10(%rbp),%rdi\n  4227ac:\te8 ed f4 ff ff       \tcallq  421c9e <bn_sub_part_words>\n  4227b1:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4227b4:\t2b 45 dc             \tsub    -0x24(%rbp),%eax\n  4227b7:\t89 c1                \tmov    %eax,%ecx\n  4227b9:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4227bc:\t48 98                \tcltq   \n  4227be:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4227c5:\t00 \n  4227c6:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4227ca:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  4227ce:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4227d1:\t48 98                \tcltq   \n  4227d3:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4227da:\t00 \n  4227db:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  4227df:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n  4227e3:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  4227e6:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4227ea:\t41 89 c8             \tmov    %ecx,%r8d\n  4227ed:\t89 d1                \tmov    %edx,%ecx\n  4227ef:\t48 89 f2             \tmov    %rsi,%rdx\n  4227f2:\t48 89 c6             \tmov    %rax,%rsi\n  4227f5:\te8 a4 f4 ff ff       \tcallq  421c9e <bn_sub_part_words>\n  4227fa:\te9 b4 01 00 00       \tjmpq   4229b3 <bn_mul_recursive+0x3c9>\n  4227ff:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n  422806:\te9 a8 01 00 00       \tjmpq   4229b3 <bn_mul_recursive+0x3c9>\n  42280b:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  42280e:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n  422811:\t89 c1                \tmov    %eax,%ecx\n  422813:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422816:\t48 98                \tcltq   \n  422818:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  42281f:\t00 \n  422820:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  422824:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  422828:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  42282b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  42282f:\t41 89 c8             \tmov    %ecx,%r8d\n  422832:\t89 d1                \tmov    %edx,%ecx\n  422834:\t48 89 c2             \tmov    %rax,%rdx\n  422837:\t48 8b 7d 10          \tmov    0x10(%rbp),%rdi\n  42283b:\te8 5e f4 ff ff       \tcallq  421c9e <bn_sub_part_words>\n  422840:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  422843:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n  422846:\t89 c1                \tmov    %eax,%ecx\n  422848:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  42284b:\t48 98                \tcltq   \n  42284d:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422854:\t00 \n  422855:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  422859:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  42285d:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422860:\t48 98                \tcltq   \n  422862:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422869:\t00 \n  42286a:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  42286e:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n  422872:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  422875:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  422879:\t41 89 c8             \tmov    %ecx,%r8d\n  42287c:\t89 d1                \tmov    %edx,%ecx\n  42287e:\t48 89 c2             \tmov    %rax,%rdx\n  422881:\te8 18 f4 ff ff       \tcallq  421c9e <bn_sub_part_words>\n  422886:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  42288d:\te9 21 01 00 00       \tjmpq   4229b3 <bn_mul_recursive+0x3c9>\n  422892:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n  422899:\te9 15 01 00 00       \tjmpq   4229b3 <bn_mul_recursive+0x3c9>\n  42289e:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4228a1:\t2b 45 e0             \tsub    -0x20(%rbp),%eax\n  4228a4:\t89 c1                \tmov    %eax,%ecx\n  4228a6:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4228a9:\t48 98                \tcltq   \n  4228ab:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4228b2:\t00 \n  4228b3:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  4228b7:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  4228bb:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  4228be:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  4228c2:\t41 89 c8             \tmov    %ecx,%r8d\n  4228c5:\t89 d1                \tmov    %edx,%ecx\n  4228c7:\t48 89 f2             \tmov    %rsi,%rdx\n  4228ca:\t48 89 c6             \tmov    %rax,%rsi\n  4228cd:\t48 8b 7d 10          \tmov    0x10(%rbp),%rdi\n  4228d1:\te8 c8 f3 ff ff       \tcallq  421c9e <bn_sub_part_words>\n  4228d6:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4228d9:\t2b 45 dc             \tsub    -0x24(%rbp),%eax\n  4228dc:\t89 c1                \tmov    %eax,%ecx\n  4228de:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4228e1:\t48 98                \tcltq   \n  4228e3:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4228ea:\t00 \n  4228eb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4228ef:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  4228f3:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4228f6:\t48 98                \tcltq   \n  4228f8:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4228ff:\t00 \n  422900:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422904:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n  422908:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  42290b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  42290f:\t41 89 c8             \tmov    %ecx,%r8d\n  422912:\t89 d1                \tmov    %edx,%ecx\n  422914:\t48 89 f2             \tmov    %rsi,%rdx\n  422917:\t48 89 c6             \tmov    %rax,%rsi\n  42291a:\te8 7f f3 ff ff       \tcallq  421c9e <bn_sub_part_words>\n  42291f:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  422926:\te9 88 00 00 00       \tjmpq   4229b3 <bn_mul_recursive+0x3c9>\n  42292b:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n  422932:\teb 7f                \tjmp    4229b3 <bn_mul_recursive+0x3c9>\n  422934:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422937:\t2b 45 e0             \tsub    -0x20(%rbp),%eax\n  42293a:\t89 c1                \tmov    %eax,%ecx\n  42293c:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  42293f:\t48 98                \tcltq   \n  422941:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422948:\t00 \n  422949:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  42294d:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  422951:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  422954:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  422958:\t41 89 c8             \tmov    %ecx,%r8d\n  42295b:\t89 d1                \tmov    %edx,%ecx\n  42295d:\t48 89 f2             \tmov    %rsi,%rdx\n  422960:\t48 89 c6             \tmov    %rax,%rsi\n  422963:\t48 8b 7d 10          \tmov    0x10(%rbp),%rdi\n  422967:\te8 32 f3 ff ff       \tcallq  421c9e <bn_sub_part_words>\n  42296c:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  42296f:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n  422972:\t89 c1                \tmov    %eax,%ecx\n  422974:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422977:\t48 98                \tcltq   \n  422979:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422980:\t00 \n  422981:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  422985:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  422989:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  42298c:\t48 98                \tcltq   \n  42298e:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422995:\t00 \n  422996:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  42299a:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n  42299e:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  4229a1:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4229a5:\t41 89 c8             \tmov    %ecx,%r8d\n  4229a8:\t89 d1                \tmov    %edx,%ecx\n  4229aa:\t48 89 c2             \tmov    %rax,%rdx\n  4229ad:\te8 ec f2 ff ff       \tcallq  421c9e <bn_sub_part_words>\n  4229b2:\t90                   \tnop\n  4229b3:\t83 7d e4 04          \tcmpl   $0x4,-0x1c(%rbp)\n  4229b7:\t0f 85 d9 00 00 00    \tjne    422a96 <bn_mul_recursive+0x4ac>\n  4229bd:\t83 7d a0 00          \tcmpl   $0x0,-0x60(%rbp)\n  4229c1:\t0f 85 cf 00 00 00    \tjne    422a96 <bn_mul_recursive+0x4ac>\n  4229c7:\t83 7d 9c 00          \tcmpl   $0x0,-0x64(%rbp)\n  4229cb:\t0f 85 c5 00 00 00    \tjne    422a96 <bn_mul_recursive+0x4ac>\n  4229d1:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  4229d5:\t75 36                \tjne    422a0d <bn_mul_recursive+0x423>\n  4229d7:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4229da:\t48 98                \tcltq   \n  4229dc:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4229e3:\t00 \n  4229e4:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  4229e8:\t48 01 c2             \tadd    %rax,%rdx\n  4229eb:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  4229ee:\t48 98                \tcltq   \n  4229f0:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  4229f7:\t00 \n  4229f8:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  4229fc:\t48 01 c8             \tadd    %rcx,%rax\n  4229ff:\t48 8b 75 10          \tmov    0x10(%rbp),%rsi\n  422a03:\t48 89 c7             \tmov    %rax,%rdi\n  422a06:\te8 a0 bc fe ff       \tcallq  40e6ab <bn_mul_comba4>\n  422a0b:\teb 26                \tjmp    422a33 <bn_mul_recursive+0x449>\n  422a0d:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422a10:\t48 98                \tcltq   \n  422a12:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422a19:\t00 \n  422a1a:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422a1e:\t48 01 d0             \tadd    %rdx,%rax\n  422a21:\tba 40 00 00 00       \tmov    $0x40,%edx\n  422a26:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  422a2b:\t48 89 c7             \tmov    %rax,%rdi\n  422a2e:\te8 ed e6 fd ff       \tcallq  401120 <memset@plt>\n  422a33:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  422a37:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n  422a3b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422a3f:\t48 89 ce             \tmov    %rcx,%rsi\n  422a42:\t48 89 c7             \tmov    %rax,%rdi\n  422a45:\te8 61 bc fe ff       \tcallq  40e6ab <bn_mul_comba4>\n  422a4a:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422a4d:\t48 98                \tcltq   \n  422a4f:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422a56:\t00 \n  422a57:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  422a5b:\t48 01 c2             \tadd    %rax,%rdx\n  422a5e:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422a61:\t48 98                \tcltq   \n  422a63:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  422a6a:\t00 \n  422a6b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  422a6f:\t48 01 c1             \tadd    %rax,%rcx\n  422a72:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422a75:\t48 98                \tcltq   \n  422a77:\t48 8d 34 c5 00 00 00 \tlea    0x0(,%rax,8),%rsi\n  422a7e:\t00 \n  422a7f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422a83:\t48 01 f0             \tadd    %rsi,%rax\n  422a86:\t48 89 ce             \tmov    %rcx,%rsi\n  422a89:\t48 89 c7             \tmov    %rax,%rdi\n  422a8c:\te8 1a bc fe ff       \tcallq  40e6ab <bn_mul_comba4>\n  422a91:\te9 0f 02 00 00       \tjmpq   422ca5 <bn_mul_recursive+0x6bb>\n  422a96:\t83 7d e4 08          \tcmpl   $0x8,-0x1c(%rbp)\n  422a9a:\t0f 85 d9 00 00 00    \tjne    422b79 <bn_mul_recursive+0x58f>\n  422aa0:\t83 7d a0 00          \tcmpl   $0x0,-0x60(%rbp)\n  422aa4:\t0f 85 cf 00 00 00    \tjne    422b79 <bn_mul_recursive+0x58f>\n  422aaa:\t83 7d 9c 00          \tcmpl   $0x0,-0x64(%rbp)\n  422aae:\t0f 85 c5 00 00 00    \tjne    422b79 <bn_mul_recursive+0x58f>\n  422ab4:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  422ab8:\t75 36                \tjne    422af0 <bn_mul_recursive+0x506>\n  422aba:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422abd:\t48 98                \tcltq   \n  422abf:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422ac6:\t00 \n  422ac7:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422acb:\t48 01 c2             \tadd    %rax,%rdx\n  422ace:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422ad1:\t48 98                \tcltq   \n  422ad3:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  422ada:\t00 \n  422adb:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422adf:\t48 01 c8             \tadd    %rcx,%rax\n  422ae2:\t48 8b 75 10          \tmov    0x10(%rbp),%rsi\n  422ae6:\t48 89 c7             \tmov    %rax,%rdi\n  422ae9:\te8 16 47 fe ff       \tcallq  407204 <bn_mul_comba8>\n  422aee:\teb 26                \tjmp    422b16 <bn_mul_recursive+0x52c>\n  422af0:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422af3:\t48 98                \tcltq   \n  422af5:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422afc:\t00 \n  422afd:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422b01:\t48 01 d0             \tadd    %rdx,%rax\n  422b04:\tba 80 00 00 00       \tmov    $0x80,%edx\n  422b09:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  422b0e:\t48 89 c7             \tmov    %rax,%rdi\n  422b11:\te8 0a e6 fd ff       \tcallq  401120 <memset@plt>\n  422b16:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  422b1a:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n  422b1e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422b22:\t48 89 ce             \tmov    %rcx,%rsi\n  422b25:\t48 89 c7             \tmov    %rax,%rdi\n  422b28:\te8 d7 46 fe ff       \tcallq  407204 <bn_mul_comba8>\n  422b2d:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422b30:\t48 98                \tcltq   \n  422b32:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422b39:\t00 \n  422b3a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  422b3e:\t48 01 c2             \tadd    %rax,%rdx\n  422b41:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422b44:\t48 98                \tcltq   \n  422b46:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  422b4d:\t00 \n  422b4e:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  422b52:\t48 01 c1             \tadd    %rax,%rcx\n  422b55:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422b58:\t48 98                \tcltq   \n  422b5a:\t48 8d 34 c5 00 00 00 \tlea    0x0(,%rax,8),%rsi\n  422b61:\t00 \n  422b62:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422b66:\t48 01 f0             \tadd    %rsi,%rax\n  422b69:\t48 89 ce             \tmov    %rcx,%rsi\n  422b6c:\t48 89 c7             \tmov    %rax,%rdi\n  422b6f:\te8 90 46 fe ff       \tcallq  407204 <bn_mul_comba8>\n  422b74:\te9 2c 01 00 00       \tjmpq   422ca5 <bn_mul_recursive+0x6bb>\n  422b79:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422b7c:\t01 c0                \tadd    %eax,%eax\n  422b7e:\t48 98                \tcltq   \n  422b80:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422b87:\t00 \n  422b88:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422b8c:\t48 01 d0             \tadd    %rdx,%rax\n  422b8f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  422b93:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  422b97:\t75 50                \tjne    422be9 <bn_mul_recursive+0x5ff>\n  422b99:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422b9c:\t48 98                \tcltq   \n  422b9e:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422ba5:\t00 \n  422ba6:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422baa:\t48 01 c2             \tadd    %rax,%rdx\n  422bad:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422bb0:\t48 98                \tcltq   \n  422bb2:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  422bb9:\t00 \n  422bba:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422bbe:\t48 8d 3c 01          \tlea    (%rcx,%rax,1),%rdi\n  422bc2:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422bc5:\t48 83 ec 08          \tsub    $0x8,%rsp\n  422bc9:\tff 75 e8             \tpushq  -0x18(%rbp)\n  422bcc:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  422bd2:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  422bd8:\t89 c1                \tmov    %eax,%ecx\n  422bda:\t48 8b 75 10          \tmov    0x10(%rbp),%rsi\n  422bde:\te8 07 fa ff ff       \tcallq  4225ea <bn_mul_recursive>\n  422be3:\t48 83 c4 10          \tadd    $0x10,%rsp\n  422be7:\teb 2e                \tjmp    422c17 <bn_mul_recursive+0x62d>\n  422be9:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422bec:\t48 98                \tcltq   \n  422bee:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422bf5:\t00 \n  422bf6:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422bf9:\t48 98                \tcltq   \n  422bfb:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  422c02:\t00 \n  422c03:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422c07:\t48 01 c8             \tadd    %rcx,%rax\n  422c0a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  422c0f:\t48 89 c7             \tmov    %rax,%rdi\n  422c12:\te8 09 e5 fd ff       \tcallq  401120 <memset@plt>\n  422c17:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n  422c1a:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  422c1e:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n  422c22:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422c26:\t48 83 ec 08          \tsub    $0x8,%rsp\n  422c2a:\tff 75 e8             \tpushq  -0x18(%rbp)\n  422c2d:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  422c33:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  422c39:\t48 89 c7             \tmov    %rax,%rdi\n  422c3c:\te8 a9 f9 ff ff       \tcallq  4225ea <bn_mul_recursive>\n  422c41:\t48 83 c4 10          \tadd    $0x10,%rsp\n  422c45:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422c48:\t48 98                \tcltq   \n  422c4a:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422c51:\t00 \n  422c52:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  422c56:\t48 01 c2             \tadd    %rax,%rdx\n  422c59:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422c5c:\t48 98                \tcltq   \n  422c5e:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  422c65:\t00 \n  422c66:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  422c6a:\t48 8d 34 01          \tlea    (%rcx,%rax,1),%rsi\n  422c6e:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422c71:\t48 98                \tcltq   \n  422c73:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  422c7a:\t00 \n  422c7b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422c7f:\t48 8d 3c 01          \tlea    (%rcx,%rax,1),%rdi\n  422c83:\t44 8b 45 9c          \tmov    -0x64(%rbp),%r8d\n  422c87:\t8b 4d a0             \tmov    -0x60(%rbp),%ecx\n  422c8a:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422c8d:\t48 83 ec 08          \tsub    $0x8,%rsp\n  422c91:\tff 75 e8             \tpushq  -0x18(%rbp)\n  422c94:\t45 89 c1             \tmov    %r8d,%r9d\n  422c97:\t41 89 c8             \tmov    %ecx,%r8d\n  422c9a:\t89 c1                \tmov    %eax,%ecx\n  422c9c:\te8 49 f9 ff ff       \tcallq  4225ea <bn_mul_recursive>\n  422ca1:\t48 83 c4 10          \tadd    $0x10,%rsp\n  422ca5:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422ca8:\t48 98                \tcltq   \n  422caa:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422cb1:\t00 \n  422cb2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422cb6:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  422cba:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n  422cbd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422cc1:\t89 d1                \tmov    %edx,%ecx\n  422cc3:\t48 89 f2             \tmov    %rsi,%rdx\n  422cc6:\t48 89 c6             \tmov    %rax,%rsi\n  422cc9:\t48 8b 7d 10          \tmov    0x10(%rbp),%rdi\n  422ccd:\te8 48 41 fe ff       \tcallq  406e1a <bn_add_words>\n  422cd2:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  422cd5:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  422cd9:\t74 3c                \tje     422d17 <bn_mul_recursive+0x72d>\n  422cdb:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422cde:\t48 98                \tcltq   \n  422ce0:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422ce7:\t00 \n  422ce8:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422cec:\t48 01 c2             \tadd    %rax,%rdx\n  422cef:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422cf2:\t48 98                \tcltq   \n  422cf4:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  422cfb:\t00 \n  422cfc:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422d00:\t48 8d 3c 01          \tlea    (%rcx,%rax,1),%rdi\n  422d04:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422d07:\t89 c1                \tmov    %eax,%ecx\n  422d09:\t48 8b 75 10          \tmov    0x10(%rbp),%rsi\n  422d0d:\te8 2a 43 fe ff       \tcallq  40703c <bn_sub_words>\n  422d12:\t29 45 fc             \tsub    %eax,-0x4(%rbp)\n  422d15:\teb 3b                \tjmp    422d52 <bn_mul_recursive+0x768>\n  422d17:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422d1a:\t48 98                \tcltq   \n  422d1c:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422d23:\t00 \n  422d24:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422d28:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  422d2c:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422d2f:\t48 98                \tcltq   \n  422d31:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422d38:\t00 \n  422d39:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422d3d:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n  422d41:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422d44:\t89 c1                \tmov    %eax,%ecx\n  422d46:\t48 8b 55 10          \tmov    0x10(%rbp),%rdx\n  422d4a:\te8 cb 40 fe ff       \tcallq  406e1a <bn_add_words>\n  422d4f:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  422d52:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422d55:\t48 98                \tcltq   \n  422d57:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422d5e:\t00 \n  422d5f:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  422d63:\t48 01 c2             \tadd    %rax,%rdx\n  422d66:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422d69:\t48 98                \tcltq   \n  422d6b:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  422d72:\t00 \n  422d73:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422d77:\t48 8d 34 01          \tlea    (%rcx,%rax,1),%rsi\n  422d7b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  422d7e:\t48 98                \tcltq   \n  422d80:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  422d87:\t00 \n  422d88:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422d8c:\t48 8d 3c 01          \tlea    (%rcx,%rax,1),%rdi\n  422d90:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422d93:\t89 c1                \tmov    %eax,%ecx\n  422d95:\te8 80 40 fe ff       \tcallq  406e1a <bn_add_words>\n  422d9a:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  422d9d:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  422da1:\t0f 84 86 00 00 00    \tje     422e2d <bn_mul_recursive+0x843>\n  422da7:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  422daa:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  422dad:\t01 d0                \tadd    %edx,%eax\n  422daf:\t48 98                \tcltq   \n  422db1:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  422db8:\t00 \n  422db9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  422dbd:\t48 01 d0             \tadd    %rdx,%rax\n  422dc0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  422dc4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  422dc8:\t48 8b 00             \tmov    (%rax),%rax\n  422dcb:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  422dcf:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  422dd2:\t48 63 d0             \tmovslq %eax,%rdx\n  422dd5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  422dd9:\t48 01 d0             \tadd    %rdx,%rax\n  422ddc:\t83 e0 ff             \tand    $0xffffffff,%eax\n  422ddf:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  422de3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  422de7:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  422deb:\t48 89 10             \tmov    %rdx,(%rax)\n  422dee:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  422df1:\t48 98                \tcltq   \n  422df3:\t48 39 45 c8          \tcmp    %rax,-0x38(%rbp)\n  422df7:\t73 34                \tjae    422e2d <bn_mul_recursive+0x843>\n  422df9:\t48 83 45 e8 08       \taddq   $0x8,-0x18(%rbp)\n  422dfe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  422e02:\t48 8b 00             \tmov    (%rax),%rax\n  422e05:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  422e09:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  422e0d:\t48 83 c0 01          \tadd    $0x1,%rax\n  422e11:\t83 e0 ff             \tand    $0xffffffff,%eax\n  422e14:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  422e18:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  422e1c:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  422e20:\t48 89 10             \tmov    %rdx,(%rax)\n  422e23:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  422e28:\t74 cf                \tje     422df9 <bn_mul_recursive+0x80f>\n  422e2a:\teb 01                \tjmp    422e2d <bn_mul_recursive+0x843>\n  422e2c:\t90                   \tnop\n  422e2d:\tc9                   \tleaveq \n  422e2e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bn_mul_recursive(_QWORD *a1, unsigned __int64 *a2,\n                                    unsigned __int64 *a3, int a4, int a5,\n                                    int a6, unsigned __int64 *a7) {\n  __int64 result;\n  unsigned __int64 v12;\n  unsigned __int64 v13;\n  int v14;\n  int v15;\n  int v16;\n  __int64 v17;\n  unsigned __int64 *v18;\n  int v19;\n  int v20;\n  int v21;\n  int v22;\n  int v23;\n  int v24;\n  v16 = a4 / Number;\n  v15 = a4 / Number + a5;\n  v14 = a4 / Number + a6;\n  if (a4 == Number && !a5 && !a6)\n    return bn_mul_comba8(a1, a2, a3);\n  if (a4 > Number) {\n    v21 = bn_cmp_part_words((__int64)a2, (__int64)&a2[v16], v15, v16 - v15);\n    v20 = Number;\n    v19 = Number;\n    switch (Number * v21 + (unsigned int)bn_cmp_part_words((__int64)&a3[v16],\n                                                           (__int64)a3, v14,\n                                                           v14 - v16)) {\n    case Number:\n      bn_sub_part_words(a7, &a2[v16], a2, v15, v15 - v16);\n      bn_sub_part_words(&a7[v16], a3, &a3[v16], v14, v16 - v14);\n      break;\n    case Number:\n      v19 = Number;\n      break;\n    case Number:\n      bn_sub_part_words(a7, &a2[v16], a2, v15, v15 - v16);\n      bn_sub_part_words(&a7[v16], &a3[v16], a3, v14, v14 - v16);\n      v20 = Number;\n      break;\n    case Number:\n    case Number:\n    case Number:\n      v19 = Number;\n      break;\n    case Number:\n      bn_sub_part_words(a7, a2, &a2[v16], v15, v16 - v15);\n      bn_sub_part_words(&a7[v16], a3, &a3[v16], v14, v16 - v14);\n      v20 = Number;\n      break;\n    case Number:\n      v19 = Number;\n      break;\n    case Number:\n      bn_sub_part_words(a7, a2, &a2[v16], v15, v16 - v15);\n      bn_sub_part_words(&a7[v16], &a3[v16], a3, v14, v14 - v16);\n      break;\n    default:\n      break;\n    }\n    if (v16 != Number || a5 || a6) {\n      if (v16 != Number || a5 || a6) {\n        v17 = (__int64)&a7[Number * a4];\n        if (v19)\n          memset(&a7[a4], Number, Number L * a4);\n        else\n          bn_mul_recursive(Number * a4 + (_DWORD)a7, (_DWORD)a7,\n                           (_DWORD)a7 + Number * v16, v16, Number, Number, v17);\n        bn_mul_recursive((_DWORD)a1, (_DWORD)a2, (_DWORD)a3, v16, Number,\n                         Number, v17);\n        bn_mul_recursive(Number * a4 + (_DWORD)a1, Number * v16 + (_DWORD)a2,\n                         (_DWORD)a3 + Number * v16, v16, a5, a6, v17);\n      } else {\n        if (v19)\n          memset(&a7[a4], Number, Number);\n        else\n          bn_mul_comba8(&a7[a4], a7, a7 + Number);\n        bn_mul_comba8(a1, a2, a3);\n        bn_mul_comba8(&a1[a4], a2 + Number, a3 + Number);\n      }\n    } else {\n      if (v19)\n        memset(&a7[a4], Number, Number);\n      else\n        bn_mul_comba4(&a7[a4], a7, a7 + Number);\n      bn_mul_comba4(a1, a2, a3);\n      bn_mul_comba4(&a1[a4], a2 + Number, a3 + Number);\n    }\n    v22 = bn_add_words(a7, a1, &a1[a4], a4);\n    if (v20)\n      v23 = v22 - bn_sub_words(&a7[a4], a7, &a7[a4], a4);\n    else\n      v23 = bn_add_words(&a7[a4], &a7[a4], a7, a4) + v22;\n    result = bn_add_words(&a1[v16], &a1[v16], &a7[a4], a4);\n    v24 = result + v23;\n    if (v24) {\n      v18 = &a1[v16 + a4];\n      v12 = v24 + (unsigned int)*v18;\n      *v18 = v12;\n      result = v24;\n      if (v12 < v24) {\n        do {\n          v13 = (unsigned int)*++v18 + Number;\n          result = (__int64)v18;\n          *v18 = v13;\n        } while (!v13);\n      }\n    }\n  } else {\n    bn_mul_normal(a1, a2, (unsigned int)(a4 + a5), a3, (unsigned int)(a4 + a6));\n    result = (unsigned int)(a5 + a6);\n    if ((int)result < Number)\n      result = (__int64)memset(&a1[Number * a4 + a5 + a6], Number,\n                               Number L * -(a5 + a6));\n  }\n  return result;\n}", "code_t": "void __cdecl bn_mul_recursive(unsigned __int64 *<span class=\"supfact\">r</span>,\n                              unsigned __int64 *<span class=\"supfact\">a</span>,\n                              unsigned __int64 *<span class=\"supfact\">b</span>,\n                              int <span class=\"supfact\">n2</span>, int <span class=\"supfact\">dna</span>,\n                              int <span class=\"supfact\">dnb</span>,\n                              unsigned __int64 *<span class=\"supfact\">t</span>) {\n  unsigned __int64 ln;\n  unsigned __int64 lna;\n  int <span class=\"supfact\">tnb</span>;\n  int <span class=\"supfact\">tna</span>;\n  int <span class=\"supfact\">n</span>;\n  unsigned __int64 *p;\n  unsigned __int64 *pa;\n  unsigned int <span class=\"supfact\">zero</span>;\n  unsigned int <span class=\"supfact\">neg</span>;\n  int c1c;\n  int c1;\n  int c1a;\n  int c1b;\n  <span class=\"supfact\">n</span> = <span class=\"supfact\">n2</span> / Number;\n  <span class=\"supfact\">tna</span> = <span class=\"supfact\">n2</span> / Number + <span class=\"supfact\">dna</span>;\n  <span class=\"supfact\">tnb</span> = <span class=\"supfact\">n2</span> / Number + <span class=\"supfact\">dnb</span>;\n  if (<span class=\"supfact\">n2</span> != Number || <span class=\"supfact\">dna</span> ||\n      <span class=\"supfact\">dnb</span>) {\n    if (<span class=\"supfact\">n2</span> > Number) {\n      c1c = bn_cmp_part_words(\n          <span class=\"supfact\">a</span>, &<span class=\"supfact\">a</span>[<span class=\"supfact\">n</span>],\n          <span class=\"supfact\">tna</span>, <span class=\"supfact\">n</span> - <span class=\"supfact\">tna</span>);\n      <span class=\"supfact\">neg</span> = Number;\n      <span class=\"supfact\">zero</span> = Number;\n      switch (Number * c1c +\n              bn_cmp_part_words(&<span class=\"supfact\">b</span>[<span class=\"supfact\">n</span>],\n                                <span class=\"supfact\">b</span>, <span class=\"supfact\">tnb</span>,\n                                <span class=\"supfact\">tnb</span> - <span class=\"supfact\">n</span>)) {\n      case Number:\n        bn_sub_part_words(<span class=\"supfact\">t</span>,\n                          &<span class=\"supfact\">a</span>[<span class=\"supfact\">n</span>],\n                          <span class=\"supfact\">a</span>, <span class=\"supfact\">tna</span>,\n                          <span class=\"supfact\">tna</span> - <span class=\"supfact\">n</span>);\n        bn_sub_part_words(\n            &<span class=\"supfact\">t</span>[<span class=\"supfact\">n</span>], <span class=\"supfact\">b</span>,\n            &<span class=\"supfact\">b</span>[<span class=\"supfact\">n</span>], <span class=\"supfact\">tnb</span>,\n            <span class=\"supfact\">n</span> - <span class=\"supfact\">tnb</span>);\n        break;\n      case Number:\n        <span class=\"supfact\">zero</span> = Number;\n        break;\n      case Number:\n        bn_sub_part_words(<span class=\"supfact\">t</span>,\n                          &<span class=\"supfact\">a</span>[<span class=\"supfact\">n</span>],\n                          <span class=\"supfact\">a</span>, <span class=\"supfact\">tna</span>,\n                          <span class=\"supfact\">tna</span> - <span class=\"supfact\">n</span>);\n        bn_sub_part_words(&<span class=\"supfact\">t</span>[<span class=\"supfact\">n</span>],\n                          &<span class=\"supfact\">b</span>[<span class=\"supfact\">n</span>],\n                          <span class=\"supfact\">b</span>, <span class=\"supfact\">tnb</span>,\n                          <span class=\"supfact\">tnb</span> - <span class=\"supfact\">n</span>);\n        <span class=\"supfact\">neg</span> = Number;\n        break;\n      case Number:\n      case Number:\n      case Number:\n        <span class=\"supfact\">zero</span> = Number;\n        break;\n      case Number:\n        bn_sub_part_words(<span class=\"supfact\">t</span>, <span class=\"supfact\">a</span>,\n                          &<span class=\"supfact\">a</span>[<span class=\"supfact\">n</span>],\n                          <span class=\"supfact\">tna</span>,\n                          <span class=\"supfact\">n</span> - <span class=\"supfact\">tna</span>);\n        bn_sub_part_words(\n            &<span class=\"supfact\">t</span>[<span class=\"supfact\">n</span>], <span class=\"supfact\">b</span>,\n            &<span class=\"supfact\">b</span>[<span class=\"supfact\">n</span>], <span class=\"supfact\">tnb</span>,\n            <span class=\"supfact\">n</span> - <span class=\"supfact\">tnb</span>);\n        <span class=\"supfact\">neg</span> = Number;\n        break;\n      case Number:\n        <span class=\"supfact\">zero</span> = Number;\n        break;\n      case Number:\n        bn_sub_part_words(<span class=\"supfact\">t</span>, <span class=\"supfact\">a</span>,\n                          &<span class=\"supfact\">a</span>[<span class=\"supfact\">n</span>],\n                          <span class=\"supfact\">tna</span>,\n                          <span class=\"supfact\">n</span> - <span class=\"supfact\">tna</span>);\n        bn_sub_part_words(&<span class=\"supfact\">t</span>[<span class=\"supfact\">n</span>],\n                          &<span class=\"supfact\">b</span>[<span class=\"supfact\">n</span>],\n                          <span class=\"supfact\">b</span>, <span class=\"supfact\">tnb</span>,\n                          <span class=\"supfact\">tnb</span> - <span class=\"supfact\">n</span>);\n        break;\n      default:\n        break;\n      }\n      if (<span class=\"supfact\">n</span> != Number || <span class=\"supfact\">dna</span> ||\n          <span class=\"supfact\">dnb</span>) {\n        if (<span class=\"supfact\">n</span> != Number || <span class=\"supfact\">dna</span> ||\n            <span class=\"supfact\">dnb</span>) {\n          p = &<span class=\"supfact\">t</span>[Number * <span class=\"supfact\">n2</span>];\n          if (<span class=\"supfact\">zero</span>)\n            memset(&<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>], Number,\n                   Number L * <span class=\"supfact\">n2</span>);\n          else\n            bn_mul_recursive(&<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>],\n                             <span class=\"supfact\">t</span>,\n                             &<span class=\"supfact\">t</span>[<span class=\"supfact\">n</span>],\n                             <span class=\"supfact\">n</span>, Number, Number, p);\n          bn_mul_recursive(<span class=\"supfact\">r</span>, <span class=\"supfact\">a</span>,\n                           <span class=\"supfact\">b</span>, <span class=\"supfact\">n</span>, Number, Number,\n                           p);\n          bn_mul_recursive(&<span class=\"supfact\">r</span>[<span class=\"supfact\">n2</span>],\n                           &<span class=\"supfact\">a</span>[<span class=\"supfact\">n</span>],\n                           &<span class=\"supfact\">b</span>[<span class=\"supfact\">n</span>],\n                           <span class=\"supfact\">n</span>, <span class=\"supfact\">dna</span>,\n                           <span class=\"supfact\">dnb</span>, p);\n        } else {\n          if (<span class=\"supfact\">zero</span>)\n            memset(&<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>], Number, Number);\n          else\n            bn_mul_comba8(&<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>],\n                          <span class=\"supfact\">t</span>, <span class=\"supfact\">t</span> + Number);\n          bn_mul_comba8(<span class=\"supfact\">r</span>, <span class=\"supfact\">a</span>,\n                        <span class=\"supfact\">b</span>);\n          bn_mul_comba8(&<span class=\"supfact\">r</span>[<span class=\"supfact\">n2</span>],\n                        <span class=\"supfact\">a</span> + Number, <span class=\"supfact\">b</span> + Number);\n        }\n      } else {\n        if (<span class=\"supfact\">zero</span>)\n          memset(&<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>], Number, Number);\n        else\n          bn_mul_comba4(&<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>],\n                        <span class=\"supfact\">t</span>, <span class=\"supfact\">t</span> + Number);\n        bn_mul_comba4(<span class=\"supfact\">r</span>, <span class=\"supfact\">a</span>, <span class=\"supfact\">b</span>);\n        bn_mul_comba4(&<span class=\"supfact\">r</span>[<span class=\"supfact\">n2</span>],\n                      <span class=\"supfact\">a</span> + Number, <span class=\"supfact\">b</span> + Number);\n      }\n      c1 = bn_add_words(<span class=\"supfact\">t</span>, <span class=\"supfact\">r</span>,\n                        &<span class=\"supfact\">r</span>[<span class=\"supfact\">n2</span>],\n                        <span class=\"supfact\">n2</span>);\n      if (<span class=\"supfact\">neg</span>)\n        c1a = c1 - bn_sub_words(&<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>],\n                                <span class=\"supfact\">t</span>,\n                                &<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>],\n                                <span class=\"supfact\">n2</span>);\n      else\n        c1a = bn_add_words(&<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>],\n                           &<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>],\n                           <span class=\"supfact\">t</span>, <span class=\"supfact\">n2</span>) +\n              c1;\n      c1b = bn_add_words(&<span class=\"supfact\">r</span>[<span class=\"supfact\">n</span>],\n                         &<span class=\"supfact\">r</span>[<span class=\"supfact\">n</span>],\n                         &<span class=\"supfact\">t</span>[<span class=\"supfact\">n2</span>],\n                         <span class=\"supfact\">n2</span>) +\n            c1a;\n      if (c1b) {\n        pa = &<span class=\"supfact\">r</span>[<span class=\"supfact\">n</span> + <span class=\"supfact\">n2</span>];\n        ln = c1b + (unsigned int)*pa;\n        *pa = ln;\n        if (ln < c1b) {\n          do {\n            lna = (unsigned int)*++pa + Number;\n            *pa = lna;\n          } while (!lna);\n        }\n      }\n    } else {\n      bn_mul_normal(<span class=\"supfact\">r</span>, <span class=\"supfact\">a</span>,\n                    <span class=\"supfact\">n2</span> + <span class=\"supfact\">dna</span>, <span class=\"supfact\">b</span>,\n                    <span class=\"supfact\">n2</span> + <span class=\"supfact\">dnb</span>);\n      if (<span class=\"supfact\">dna</span> + <span class=\"supfact\">dnb</span> < Number)\n        memset(&<span class=\"supfact\">r</span>[Number * <span class=\"supfact\">n2</span> +\n                                  <span class=\"supfact\">dna</span> + <span class=\"supfact\">dnb</span>],\n               Number, Number L * -(<span class=\"supfact\">dna</span> + <span class=\"supfact\">dnb</span>));\n    }\n  } else {\n    bn_mul_comba8(<span class=\"supfact\">r</span>, <span class=\"supfact\">a</span>, <span class=\"supfact\">b</span>);\n  }\n}", "var": [{"name": "a1", "type": "unsigned __int64 *", "pred_name": "r", "ref_name": "r", "ref_type": "unsigned __int64 *"}, {"name": "a2", "type": "unsigned __int64 *", "pred_name": "a", "ref_name": "a", "ref_type": "unsigned __int64 *"}, {"name": "a3", "type": "unsigned __int64 *", "pred_name": "b", "ref_name": "b", "ref_type": "unsigned __int64 *"}, {"name": "a4", "type": "int", "pred_name": "n2", "ref_name": "n2", "ref_type": "int"}, {"name": "a5", "type": "int", "pred_name": "dna", "ref_name": "dna", "ref_type": "int"}, {"name": "a6", "type": "int", "pred_name": "dnb", "ref_name": "dnb", "ref_type": "int"}, {"name": "a7", "type": "unsigned __int64 *", "pred_name": "t", "ref_name": "t", "ref_type": "unsigned __int64 *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v14", "type": "int", "pred_name": "tnb", "ref_name": "tnb", "ref_type": "int"}, {"name": "v15", "type": "int", "pred_name": "tna", "ref_name": "tna", "ref_type": "int"}, {"name": "v16", "type": "int", "pred_name": "n", "ref_name": "n", "ref_type": "int"}, {"name": "v19", "type": "unsigned int", "pred_name": "zero", "ref_name": "zero", "ref_type": "unsigned int"}, {"name": "v20", "type": "unsigned int", "pred_name": "neg", "ref_name": "neg", "ref_type": "unsigned int"}], "body_in_train": true}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/9d9b3cb984271790df9fd014f222508bdb151ed2c5c171fdadfc4d05e72f7a86", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Source/CMakeFiles/CMakeLib.dir/cmComputeLinkDepends.cxx.o", "objdump": "0000000000000000 <_ZSt15__alloc_on_copyISaISt13_Rb_tree_nodeIiEEEvRT_RKS3_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  14:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  18:\t48 89 d6             \tmov    %rdx,%rsi\n  1b:\t48 89 c7             \tmov    %rax,%rdi\n  1e:\te8 00 00 00 00       \tcallq  23 <_ZSt15__alloc_on_copyISaISt13_Rb_tree_nodeIiEEEvRT_RKS3_+0x23>\n  23:\t90                   \tnop\n  24:\tc9                   \tleaveq \n  25:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n__alloc_on_copy<std allocator<std _Rb_tree_node<int>>>(__int64 a1, __int64 a2) {\n  return std __do_alloc_on_copy<std allocator<std _Rb_tree_node<int>>>(a1, a2);\n}", "code_t": "__int64 __fastcall std __alloc_on_copy<std allocator<std _Rb_tree_node<int>>>(\n    __int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>) {\n  return std __do_alloc_on_copy<std allocator<std _Rb_tree_node<int>>>(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "junehappylove", "repo_name": "june.everything", "path": "junehappylove/june.everything/c394e684b76582360a76ce774ee17d3643faa8d629898f92f4162c6761825a14", "path_in_repo": "junehappylove/june.everything/c++/zlib-1.2.8/libz.so.1.2.8", "objdump": "0000000000013f02 <gzclearerr>:\n   13f02:\t55                   \tpush   %rbp\n   13f03:\t48 89 e5             \tmov    %rsp,%rbp\n   13f06:\t48 83 ec 20          \tsub    $0x20,%rsp\n   13f0a:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   13f0e:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n   13f13:\t74 60                \tje     13f75 <gzclearerr+0x73>\n   13f15:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   13f19:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   13f1d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   13f21:\t8b 40 18             \tmov    0x18(%rax),%eax\n   13f24:\t3d 4f 1c 00 00       \tcmp    $0x1c4f,%eax\n   13f29:\t74 0e                \tje     13f39 <gzclearerr+0x37>\n   13f2b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   13f2f:\t8b 40 18             \tmov    0x18(%rax),%eax\n   13f32:\t3d b1 79 00 00       \tcmp    $0x79b1,%eax\n   13f37:\t75 3f                \tjne    13f78 <gzclearerr+0x76>\n   13f39:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   13f3d:\t8b 40 18             \tmov    0x18(%rax),%eax\n   13f40:\t3d 4f 1c 00 00       \tcmp    $0x1c4f,%eax\n   13f45:\t75 16                \tjne    13f5d <gzclearerr+0x5b>\n   13f47:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   13f4b:\tc7 40 50 00 00 00 00 \tmovl   $0x0,0x50(%rax)\n   13f52:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   13f56:\tc7 40 54 00 00 00 00 \tmovl   $0x0,0x54(%rax)\n   13f5d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   13f61:\tba 00 00 00 00       \tmov    $0x0,%edx\n   13f66:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   13f6b:\t48 89 c7             \tmov    %rax,%rdi\n   13f6e:\te8 08 00 00 00       \tcallq  13f7b <gz_error>\n   13f73:\teb 04                \tjmp    13f79 <gzclearerr+0x77>\n   13f75:\t90                   \tnop\n   13f76:\teb 01                \tjmp    13f79 <gzclearerr+0x77>\n   13f78:\t90                   \tnop\n   13f79:\tc9                   \tleaveq \n   13f7a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gzclearerr(_DWORD *a1) {\n  __int64 result;\n  if (a1) {\n    if (a1[Number] == Number ||\n        (result = (unsigned int)a1[Number], (_DWORD)result == Number)) {\n      if (a1[Number] == Number) {\n        a1[Number] = Number;\n        a1[Number] = Number;\n      }\n      result = gz_error(a1, Number L, Number L);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl gzclearerr(gzFile <span class=\"supfact\">file</span>) {\n  if (<span class=\"supfact\">file</span> && (<span class=\"supfact\">file</span>[Number].have == Number ||\n                               <span class=\"supfact\">file</span>[Number].have == Number)) {\n    if (<span class=\"supfact\">file</span>[Number].have == Number) {\n      LODWORD(<span class=\"supfact\">file</span>[Number].next) = Number;\n      HIDWORD(<span class=\"supfact\">file</span>[Number].next) = Number;\n    }\n    gz_error((gz_statep)<span class=\"supfact\">file</span>, Number, Number L);\n  }\n}", "var": [{"name": "a1", "type": "gzFile", "pred_name": "file", "ref_name": "file", "ref_type": "gzFile"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "afni", "repo_name": "afni", "path": "afni/afni/12f9e4a9d90aa4f3633a7351f4acfc4d9829f9345666ef901b82ad04dd05acd1", "path_in_repo": "afni/afni/src/gifti/gifti_tool", "objdump": "0000000000411207 <gifti_copy_gifti_meta>:\n  411207:\t55                   \tpush   %rbp\n  411208:\t48 89 e5             \tmov    %rsp,%rbp\n  41120b:\t48 83 ec 30          \tsub    $0x30,%rsp\n  41120f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  411213:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  411217:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  41121b:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  411220:\t74 0e                \tje     411230 <gifti_copy_gifti_meta+0x29>\n  411222:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  411227:\t74 07                \tje     411230 <gifti_copy_gifti_meta+0x29>\n  411229:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  41122e:\t75 39                \tjne    411269 <gifti_copy_gifti_meta+0x62>\n  411230:\t8b 05 12 d7 04 00    \tmov    0x4d712(%rip),%eax        # 45e948 <G>\n  411236:\t85 c0                \ttest   %eax,%eax\n  411238:\t7e 28                \tjle    411262 <gifti_copy_gifti_meta+0x5b>\n  41123a:\t48 8b 05 5f dd 04 00 \tmov    0x4dd5f(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  411241:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n  411245:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  411249:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  41124d:\t49 89 f0             \tmov    %rsi,%r8\n  411250:\tbe 28 9e 44 00       \tmov    $0x449e28,%esi\n  411255:\t48 89 c7             \tmov    %rax,%rdi\n  411258:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41125d:\te8 de 10 ff ff       \tcallq  402340 <fprintf@plt>\n  411262:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  411267:\teb 6e                \tjmp    4112d7 <gifti_copy_gifti_meta+0xd0>\n  411269:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41126d:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n  411271:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  411275:\t48 89 c6             \tmov    %rax,%rsi\n  411278:\t48 89 d7             \tmov    %rdx,%rdi\n  41127b:\te8 28 a9 ff ff       \tcallq  40bba8 <gifti_get_meta_value>\n  411280:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  411284:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  411289:\t75 2f                \tjne    4112ba <gifti_copy_gifti_meta+0xb3>\n  41128b:\t8b 05 b7 d6 04 00    \tmov    0x4d6b7(%rip),%eax        # 45e948 <G>\n  411291:\t83 f8 04             \tcmp    $0x4,%eax\n  411294:\t7e 1d                \tjle    4112b3 <gifti_copy_gifti_meta+0xac>\n  411296:\t48 8b 05 03 dd 04 00 \tmov    0x4dd03(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  41129d:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4112a1:\tbe 58 9e 44 00       \tmov    $0x449e58,%esi\n  4112a6:\t48 89 c7             \tmov    %rax,%rdi\n  4112a9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4112ae:\te8 8d 10 ff ff       \tcallq  402340 <fprintf@plt>\n  4112b3:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4112b8:\teb 1d                \tjmp    4112d7 <gifti_copy_gifti_meta+0xd0>\n  4112ba:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4112be:\t48 8d 78 10          \tlea    0x10(%rax),%rdi\n  4112c2:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  4112c6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4112ca:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n  4112cf:\t48 89 c6             \tmov    %rax,%rsi\n  4112d2:\te8 dc 51 00 00       \tcallq  4164b3 <gifti_add_to_meta>\n  4112d7:\tc9                   \tleaveq \n  4112d8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gifti_copy_gifti_meta(char *a1, _QWORD *a2, const char *a3) {\n  __int64 result;\n  __int64 v5;\n  if (a1 && a2 && a3) {\n    v5 = gifti_get_meta_value(a2 + Number, a3);\n    if (v5) {\n      result = gifti_add_to_meta(a1 + Number, a3, v5, Number L);\n    } else {\n      if (G > Number)\n        fprintf(stderr, String, a3);\n      result = Number L;\n    }\n  } else {\n    if (G > Number)\n      fprintf(stderr, String, a1, a2, a3);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl gifti_copy_gifti_meta(gifti_image *<span class=\"supfact\">dest</span>,\n                                  gifti_image *<span class=\"supfact\">src</span>,\n                                  const char *<span class=\"supfact\">name</span>) {\n  int <span class=\"supfact\">result</span>;\n  const char *<span class=\"supfact\">value</span>;\n  if (<span class=\"supfact\">dest</span> && <span class=\"supfact\">src</span> && <span class=\"supfact\">name</span>) {\n    <span class=\"supfact\">value</span> =\n        gifti_get_meta_value(&<span class=\"supfact\">src</span>->meta, <span class=\"supfact\">name</span>);\n    if (<span class=\"supfact\">value</span>) {\n      <span class=\"supfact\">result</span> =\n          gifti_add_to_meta(&<span class=\"supfact\">dest</span>->meta, <span class=\"supfact\">name</span>,\n                            <span class=\"supfact\">value</span>, Number);\n    } else {\n      if (G.verb > Number)\n        fprintf(stderr, String, <span class=\"supfact\">name</span>);\n      <span class=\"supfact\">result</span> = Number;\n    }\n  } else {\n    if (G.verb > Number)\n      fprintf(stderr, String, <span class=\"supfact\">dest</span>, <span class=\"supfact\">src</span>,\n              <span class=\"supfact\">name</span>);\n    <span class=\"supfact\">result</span> = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "key", "ref_name": "dest", "ref_type": "gifti_image *"}, {"name": "a2", "type": "char *", "pred_name": "value", "ref_name": "src", "ref_type": "gifti_image *"}, {"name": "a3", "type": "gentity_t *", "pred_name": "ent", "ref_name": "name", "ref_type": "const char *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "v5", "type": "char *", "pred_name": "p", "ref_name": "value", "ref_type": "const char *"}], "body_in_train": false}, {"repo_owner": "Notevill", "repo_name": "Reporter", "path": "Notevill/Reporter/cf01a52b4c37a3332459dbf279850b200158ddea5f86cd310f53da6a41102033", "path_in_repo": "Notevill/Reporter/IncludeLibraries/myhtml-master/examples/myhtml/serialization_high_level", "objdump": "0000000000426683 <__mtree_search_lowercase_to_start>:\n  426683:\t55                   \tpush   %rbp\n  426684:\t48 89 e5             \tmov    %rsp,%rbp\n  426687:\t48 83 ec 30          \tsub    $0x30,%rsp\n  42668b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  42668f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  426693:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  426697:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n  42669b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42669f:\t48 8b 00             \tmov    (%rax),%rax\n  4266a2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4266a6:\te9 94 01 00 00       \tjmpq   42683f <__mtree_search_lowercase_to_start+0x1bc>\n  4266ab:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4266af:\t48 89 d0             \tmov    %rdx,%rax\n  4266b2:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4266b6:\t48 29 d0             \tsub    %rdx,%rax\n  4266b9:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4266bd:\t48 89 c2             \tmov    %rax,%rdx\n  4266c0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4266c4:\t48 01 d0             \tadd    %rdx,%rax\n  4266c7:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4266cb:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n  4266cf:\t75 69                \tjne    42673a <__mtree_search_lowercase_to_start+0xb7>\n  4266d1:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4266d5:\t48 89 d0             \tmov    %rdx,%rax\n  4266d8:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4266dc:\t48 29 d0             \tsub    %rdx,%rax\n  4266df:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4266e3:\t48 89 c2             \tmov    %rax,%rdx\n  4266e6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4266ea:\t48 01 d0             \tadd    %rdx,%rax\n  4266ed:\t48 8b 08             \tmov    (%rax),%rcx\n  4266f0:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  4266f4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4266f8:\t48 89 ce             \tmov    %rcx,%rsi\n  4266fb:\t48 89 c7             \tmov    %rax,%rdi\n  4266fe:\te8 63 bd ff ff       \tcallq  422466 <mycore_strncasecmp>\n  426703:\t48 85 c0             \ttest   %rax,%rax\n  426706:\t75 09                \tjne    426711 <__mtree_search_lowercase_to_start+0x8e>\n  426708:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  42670c:\te9 3e 01 00 00       \tjmpq   42684f <__mtree_search_lowercase_to_start+0x1cc>\n  426711:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  426715:\t48 89 d0             \tmov    %rdx,%rax\n  426718:\t48 c1 e0 03          \tshl    $0x3,%rax\n  42671c:\t48 29 d0             \tsub    %rdx,%rax\n  42671f:\t48 c1 e0 03          \tshl    $0x3,%rax\n  426723:\t48 89 c2             \tmov    %rax,%rdx\n  426726:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  42672a:\t48 01 d0             \tadd    %rdx,%rax\n  42672d:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  426731:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  426735:\te9 05 01 00 00       \tjmpq   42683f <__mtree_search_lowercase_to_start+0x1bc>\n  42673a:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  42673e:\t48 89 d0             \tmov    %rdx,%rax\n  426741:\t48 c1 e0 03          \tshl    $0x3,%rax\n  426745:\t48 29 d0             \tsub    %rdx,%rax\n  426748:\t48 c1 e0 03          \tshl    $0x3,%rax\n  42674c:\t48 89 c2             \tmov    %rax,%rdx\n  42674f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  426753:\t48 01 d0             \tadd    %rdx,%rax\n  426756:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  42675a:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n  42675e:\t76 72                \tjbe    4267d2 <__mtree_search_lowercase_to_start+0x14f>\n  426760:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  426764:\t48 89 d0             \tmov    %rdx,%rax\n  426767:\t48 c1 e0 03          \tshl    $0x3,%rax\n  42676b:\t48 29 d0             \tsub    %rdx,%rax\n  42676e:\t48 c1 e0 03          \tshl    $0x3,%rax\n  426772:\t48 89 c2             \tmov    %rax,%rdx\n  426775:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  426779:\t48 01 d0             \tadd    %rdx,%rax\n  42677c:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  426780:\t48 89 d0             \tmov    %rdx,%rax\n  426783:\t48 c1 e0 03          \tshl    $0x3,%rax\n  426787:\t48 29 d0             \tsub    %rdx,%rax\n  42678a:\t48 c1 e0 03          \tshl    $0x3,%rax\n  42678e:\t48 89 c2             \tmov    %rax,%rdx\n  426791:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  426795:\t48 01 d0             \tadd    %rdx,%rax\n  426798:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  42679c:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n  4267a0:\t73 0a                \tjae    4267ac <__mtree_search_lowercase_to_start+0x129>\n  4267a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4267a7:\te9 a3 00 00 00       \tjmpq   42684f <__mtree_search_lowercase_to_start+0x1cc>\n  4267ac:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4267b0:\t48 89 d0             \tmov    %rdx,%rax\n  4267b3:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4267b7:\t48 29 d0             \tsub    %rdx,%rax\n  4267ba:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4267be:\t48 89 c2             \tmov    %rax,%rdx\n  4267c1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4267c5:\t48 01 d0             \tadd    %rdx,%rax\n  4267c8:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  4267cc:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4267d0:\teb 6d                \tjmp    42683f <__mtree_search_lowercase_to_start+0x1bc>\n  4267d2:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4267d6:\t48 89 d0             \tmov    %rdx,%rax\n  4267d9:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4267dd:\t48 29 d0             \tsub    %rdx,%rax\n  4267e0:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4267e4:\t48 89 c2             \tmov    %rax,%rdx\n  4267e7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4267eb:\t48 01 d0             \tadd    %rdx,%rax\n  4267ee:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n  4267f2:\t48 89 d0             \tmov    %rdx,%rax\n  4267f5:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4267f9:\t48 29 d0             \tsub    %rdx,%rax\n  4267fc:\t48 c1 e0 03          \tshl    $0x3,%rax\n  426800:\t48 89 c2             \tmov    %rax,%rdx\n  426803:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  426807:\t48 01 d0             \tadd    %rdx,%rax\n  42680a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  42680e:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n  426812:\t76 07                \tjbe    42681b <__mtree_search_lowercase_to_start+0x198>\n  426814:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  426819:\teb 34                \tjmp    42684f <__mtree_search_lowercase_to_start+0x1cc>\n  42681b:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  42681f:\t48 89 d0             \tmov    %rdx,%rax\n  426822:\t48 c1 e0 03          \tshl    $0x3,%rax\n  426826:\t48 29 d0             \tsub    %rdx,%rax\n  426829:\t48 c1 e0 03          \tshl    $0x3,%rax\n  42682d:\t48 89 c2             \tmov    %rax,%rdx\n  426830:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  426834:\t48 01 d0             \tadd    %rdx,%rax\n  426837:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  42683b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  42683f:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  426844:\t0f 85 61 fe ff ff    \tjne    4266ab <__mtree_search_lowercase_to_start+0x28>\n  42684a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42684f:\tc9                   \tleaveq \n  426850:\tc3                   \tretq   ", "code_s": "__int64 __fastcall _mtree_search_lowercase_to_start(__int64 *a1, __int64 a2,\n                                                    unsigned __int8 *a3,\n                                                    unsigned __int64 a4) {\n  __int64 v8;\n  v8 = *a1;\n  while (a2) {\n    if (a4 == *(_QWORD *)(Number * a2 + v8 + Number)) {\n      if (!mycore_strncasecmp(a3, *(unsigned __int8 **)(Number * a2 + v8), a4))\n        return a2;\n      a2 = *(_QWORD *)(Number * a2 + v8 + Number);\n    } else if (a4 <= *(_QWORD *)(Number * a2 + v8 + Number)) {\n      if (a4 > *(_QWORD *)(Number L * *(_QWORD *)(Number * a2 + v8 + Number) +\n                           v8 + Number))\n        return Number L;\n      a2 = *(_QWORD *)(Number * a2 + v8 + Number);\n    } else {\n      if (a4 < *(_QWORD *)(Number L * *(_QWORD *)(Number * a2 + v8 + Number) +\n                           v8 + Number))\n        return Number L;\n      a2 = *(_QWORD *)(Number * a2 + v8 + Number);\n    }\n  }\n  return Number L;\n}", "code_t": "mctree_index_t __cdecl _mtree_search_lowercase_to_start(\n    mctree_t *<span class=\"supfact\">mctree</span>, mctree_index_t <span class=\"supfact\">idx</span>,\n    const char *<span class=\"supfact\">key</span>, size_t <span class=\"supfact\">key_size</span>) {\n  mctree_node_t *<span class=\"supfact\">nodes</span>;\n  <span class=\"supfact\">nodes</span> = <span class=\"supfact\">mctree</span>-><span class=\"supfact\">nodes</span>;\n  while (<span class=\"supfact\">idx</span>) {\n    if (<span class=\"supfact\">key_size</span> ==\n        <span class=\"supfact\">nodes</span>[<span class=\"supfact\">idx</span>].str_size) {\n      if (!mycore_strncasecmp(<span class=\"supfact\">key</span>,\n                              <span class=\"supfact\">nodes</span>[<span class=\"supfact\">idx</span>].str,\n                              <span class=\"supfact\">key_size</span>))\n        return <span class=\"supfact\">idx</span>;\n      <span class=\"supfact\">idx</span> = <span class=\"supfact\">nodes</span>[<span class=\"supfact\">idx</span>].child;\n    } else if (<span class=\"supfact\">key_size</span> <=\n               <span class=\"supfact\">nodes</span>[<span class=\"supfact\">idx</span>].str_size) {\n      if (<span class=\"supfact\">key_size</span> >\n          <span class=\"supfact\">nodes</span>[<span class=\"supfact\">nodes</span>[<span class=\"supfact\">idx</span>].prev]\n              .str_size)\n        return Number L;\n      <span class=\"supfact\">idx</span> = <span class=\"supfact\">nodes</span>[<span class=\"supfact\">idx</span>].prev;\n    } else {\n      if (<span class=\"supfact\">key_size</span> <\n          <span class=\"supfact\">nodes</span>[<span class=\"supfact\">nodes</span>[<span class=\"supfact\">idx</span>].next]\n              .str_size)\n        return Number L;\n      <span class=\"supfact\">idx</span> = <span class=\"supfact\">nodes</span>[<span class=\"supfact\">idx</span>].next;\n    }\n  }\n  return Number L;\n}", "var": [{"name": "a1", "type": "mctree_t *", "pred_name": "mctree", "ref_name": "mctree", "ref_type": "mctree_t *"}, {"name": "a2", "type": "mctree_index_t", "pred_name": "idx", "ref_name": "idx", "ref_type": "mctree_index_t"}, {"name": "a3", "type": "const char *", "pred_name": "key", "ref_name": "key", "ref_type": "const char *"}, {"name": "a4", "type": "size_t", "pred_name": "key_size", "ref_name": "key_size", "ref_type": "size_t"}, {"name": "v8", "type": "mctree_node_t *", "pred_name": "nodes", "ref_name": "nodes", "ref_type": "mctree_node_t *"}], "body_in_train": true}, {"repo_owner": "austinweitao", "repo_name": "PowerMeter", "path": "austinweitao/PowerMeter/e325fb28854a4710c94404df77baff97880956027ce90684df90a4cb03e7f26d", "path_in_repo": "austinweitao/PowerMeter/curl-7.37.0/docs/examples/ftpsget.o", "objdump": "000000000000012c <main>:\n 12c:\t55                   \tpush   %rbp\n 12d:\t48 89 e5             \tmov    %rsp,%rbp\n 130:\t48 83 ec 30          \tsub    $0x30,%rsp\n 134:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n 13b:\t00 \n 13c:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n 143:\t00 \n 144:\tbf 03 00 00 00       \tmov    $0x3,%edi\n 149:\te8 00 00 00 00       \tcallq  14e <main+0x22>\n 14e:\te8 00 00 00 00       \tcallq  153 <main+0x27>\n 153:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 157:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 15c:\t0f 84 e6 00 00 00    \tje     248 <main+0x11c>\n 162:\tc7 45 f4 12 27 00 00 \tmovl   $0x2712,-0xc(%rbp)\n 169:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n 16c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 170:\tba 00 00 00 00       \tmov    $0x0,%edx\n 175:\t89 ce                \tmov    %ecx,%esi\n 177:\t48 89 c7             \tmov    %rax,%rdi\n 17a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 17f:\te8 00 00 00 00       \tcallq  184 <main+0x58>\n 184:\tc7 45 f0 2b 4e 00 00 \tmovl   $0x4e2b,-0x10(%rbp)\n 18b:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n 18e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 192:\tba 00 00 00 00       \tmov    $0x0,%edx\n 197:\t89 ce                \tmov    %ecx,%esi\n 199:\t48 89 c7             \tmov    %rax,%rdi\n 19c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1a1:\te8 00 00 00 00       \tcallq  1a6 <main+0x7a>\n 1a6:\tc7 45 ec 11 27 00 00 \tmovl   $0x2711,-0x14(%rbp)\n 1ad:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n 1b0:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n 1b4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1b8:\t89 ce                \tmov    %ecx,%esi\n 1ba:\t48 89 c7             \tmov    %rax,%rdi\n 1bd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1c2:\te8 00 00 00 00       \tcallq  1c7 <main+0x9b>\n 1c7:\tc7 45 e8 77 00 00 00 \tmovl   $0x77,-0x18(%rbp)\n 1ce:\t8b 4d e8             \tmov    -0x18(%rbp),%ecx\n 1d1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1d5:\tba 03 00 00 00       \tmov    $0x3,%edx\n 1da:\t89 ce                \tmov    %ecx,%esi\n 1dc:\t48 89 c7             \tmov    %rax,%rdi\n 1df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1e4:\te8 00 00 00 00       \tcallq  1e9 <main+0xbd>\n 1e9:\tc7 45 e4 29 00 00 00 \tmovl   $0x29,-0x1c(%rbp)\n 1f0:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n 1f3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1f7:\tba 01 00 00 00       \tmov    $0x1,%edx\n 1fc:\t89 ce                \tmov    %ecx,%esi\n 1fe:\t48 89 c7             \tmov    %rax,%rdi\n 201:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 206:\te8 00 00 00 00       \tcallq  20b <main+0xdf>\n 20b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 20f:\t48 89 c7             \tmov    %rax,%rdi\n 212:\te8 00 00 00 00       \tcallq  217 <main+0xeb>\n 217:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n 21a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 21e:\t48 89 c7             \tmov    %rax,%rdi\n 221:\te8 00 00 00 00       \tcallq  226 <main+0xfa>\n 226:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n 22a:\t74 1c                \tje     248 <main+0x11c>\n 22c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 233 <main+0x107>\n 233:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n 236:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 23b:\t48 89 c7             \tmov    %rax,%rdi\n 23e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 243:\te8 00 00 00 00       \tcallq  248 <main+0x11c>\n 248:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 24c:\t48 85 c0             \ttest   %rax,%rax\n 24f:\t74 0c                \tje     25d <main+0x131>\n 251:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 255:\t48 89 c7             \tmov    %rax,%rdi\n 258:\te8 00 00 00 00       \tcallq  25d <main+0x131>\n 25d:\te8 00 00 00 00       \tcallq  262 <main+0x136>\n 262:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 267:\tc9                   \tleaveq \n 268:\tc3                   \tretq   \n", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  const char *v4;\n  FILE *stream;\n  unsigned int v6;\n  int v7;\n  int v8;\n  int v9;\n  int v10;\n  int v11;\n  __int64 v12;\n  v4 = String;\n  stream = Number L;\n  curl_global_init(Number L, argv, envp);\n  v12 = curl_easy_init();\n  if (v12) {\n    v11 = Number;\n    curl_easy_setopt(v12, Number L, String);\n    v10 = Number;\n    curl_easy_setopt(v12, Number L, my_fwrite);\n    v9 = Number;\n    curl_easy_setopt(v12, Number L, &v4);\n    v8 = Number;\n    curl_easy_setopt(v12, Number L, Number L);\n    v7 = Number;\n    curl_easy_setopt(v12, Number L, Number L);\n    v6 = curl_easy_perform(v12);\n    curl_easy_cleanup(v12);\n    if (v6)\n      fprintf(stderr, String, v6);\n  }\n  if (stream)\n    fclose(stream);\n  curl_global_cleanup();\n  return Number;\n}", "code_t": "int __cdecl main(int <span class=\"supfact\">argc</span>, const char **<span class=\"supfact\">argv</span>,\n                 const char **<span class=\"supfact\">envp</span>) {\n  FtpFile <span class=\"supfact\">ftpfile</span>;\n  CURLcode <span class=\"supfact\">res</span>;\n  int <span class=\"supfact\">_curl_opt_3</span>;\n  int <span class=\"supfact\">_curl_opt_2</span>;\n  int <span class=\"supfact\">_curl_opt_1</span>;\n  int <span class=\"supfact\">_curl_opt_0</span>;\n  int <span class=\"supfact\">_curl_opt</span>;\n  CURL *<span class=\"supfact\">curl</span>;\n  <span class=\"supfact\">ftpfile</span>.filename = String;\n  <span class=\"supfact\">ftpfile</span>.stream = Number L;\n  curl_global_init(Number L, <span class=\"supfact\">argv</span>, <span class=\"supfact\">envp</span>);\n  <span class=\"supfact\">curl</span> = (CURL *)curl_easy_init();\n  if (<span class=\"supfact\">curl</span>) {\n    <span class=\"supfact\">_curl_opt</span> = Number;\n    curl_easy_setopt(<span class=\"supfact\">curl</span>, Number L, String);\n    <span class=\"supfact\">_curl_opt_0</span> = Number;\n    curl_easy_setopt(<span class=\"supfact\">curl</span>, Number L, my_fwrite);\n    <span class=\"supfact\">_curl_opt_1</span> = Number;\n    curl_easy_setopt(<span class=\"supfact\">curl</span>, Number L, &<span class=\"supfact\">ftpfile</span>);\n    <span class=\"supfact\">_curl_opt_2</span> = Number;\n    curl_easy_setopt(<span class=\"supfact\">curl</span>, Number L, Number L);\n    <span class=\"supfact\">_curl_opt_3</span> = Number;\n    curl_easy_setopt(<span class=\"supfact\">curl</span>, Number L, Number L);\n    <span class=\"supfact\">res</span> = (unsigned int)curl_easy_perform(<span class=\"supfact\">curl</span>);\n    curl_easy_cleanup(<span class=\"supfact\">curl</span>);\n    if (<span class=\"supfact\">res</span>)\n      fprintf(stderr, String, (unsigned int)<span class=\"supfact\">res</span>);\n  }\n  if (<span class=\"supfact\">ftpfile</span>.stream)\n    fclose(<span class=\"supfact\">ftpfile</span>.stream);\n  curl_global_cleanup();\n  return Number;\n}", "var": [{"name": "argc", "type": "int", "pred_name": "argc", "ref_name": "argc", "ref_type": "int"}, {"name": "argv", "type": "const char * *", "pred_name": "argv", "ref_name": "argv", "ref_type": "const char * *"}, {"name": "envp", "type": "const char * *", "pred_name": "envp", "ref_name": "envp", "ref_type": "const char * *"}, {"name": "v4", "type": "CURL *", "pred_name": "curl", "ref_name": "ftpfile", "ref_type": "struct FtpFile { const char * filename; FILE * stream; }"}, {"name": "stream", "type": "FILE *", "pred_name": "stream", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "int", "pred_name": "num", "ref_name": "res", "ref_type": "CURLcode"}, {"name": "v7", "type": "int", "pred_name": "__unk__", "ref_name": "_curl_opt_3", "ref_type": "int"}, {"name": "v8", "type": "int", "pred_name": "__unk__", "ref_name": "_curl_opt_2", "ref_type": "int"}, {"name": "v9", "type": "int", "pred_name": "__unk__", "ref_name": "_curl_opt_1", "ref_type": "int"}, {"name": "v10", "type": "int", "pred_name": "__unk__", "ref_name": "_curl_opt_0", "ref_type": "int"}, {"name": "v11", "type": "int", "pred_name": "__unk__", "ref_name": "_curl_opt", "ref_type": "int"}, {"name": "v12", "type": "CURL *", "pred_name": "curl", "ref_name": "curl", "ref_type": "CURL *"}], "body_in_train": false}, {"repo_owner": "wnoguchi", "repo_name": "hikari_denwa_asterisk", "path": "wnoguchi/hikari_denwa_asterisk/513dcb0a92eafe6237d3f1016fb0a9d8e0e0abaa48a3af0a523fb3d2c8d326f6", "path_in_repo": "wnoguchi/hikari_denwa_asterisk/asterisk-11.0.1/res/pjproject/pjnath/bin/pjturn-client-x86_64-unknown-linux-gnu", "objdump": "00000000004124e4 <pj_stun_client_tsx_is_complete>:\n  4124e4:\t55                   \tpush   %rbp\n  4124e5:\t48 89 e5             \tmov    %rsp,%rbp\n  4124e8:\t48 83 ec 10          \tsub    $0x10,%rsp\n  4124ec:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  4124f0:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4124f5:\t75 27                \tjne    41251e <pj_stun_client_tsx_is_complete+0x3a>\n  4124f7:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4124fc:\t75 19                \tjne    412517 <pj_stun_client_tsx_is_complete+0x33>\n  4124fe:\tb9 90 49 43 00       \tmov    $0x434990,%ecx\n  412503:\tba 99 00 00 00       \tmov    $0x99,%edx\n  412508:\tbe 00 47 43 00       \tmov    $0x434700,%esi\n  41250d:\tbf 90 47 43 00       \tmov    $0x434790,%edi\n  412512:\te8 79 0b ff ff       \tcallq  403090 <__assert_fail@plt>\n  412517:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41251c:\teb 07                \tjmp    412525 <pj_stun_client_tsx_is_complete+0x41>\n  41251e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  412522:\t8b 40 40             \tmov    0x40(%rax),%eax\n  412525:\tc9                   \tleaveq \n  412526:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_stun_client_tsx_is_complete(__int64 a1) {\n  if (!a1)\n    __assert_fail(String, String, Number, String);\n  return *(unsigned int *)(a1 + Number);\n}", "code_t": "pj_bool_t __cdecl pj_stun_client_tsx_is_complete(\n    pj_stun_client_tsx_0 *<span class=\"supfact\">tsx</span>) {\n  if (!<span class=\"supfact\">tsx</span>)\n    __assert_fail(String, String, Number, String);\n  return <span class=\"supfact\">tsx</span>->complete;\n}", "var": [{"name": "a1", "type": "pj_stun_client_tsx_0 *", "pred_name": "tsx", "ref_name": "tsx", "ref_type": "pj_stun_client_tsx_0 *"}], "body_in_train": false}, {"repo_owner": "tzanussi", "repo_name": "linux-yocto-micro-3.14", "path": "tzanussi/linux-yocto-micro-3.14/2ae592ded234df31f71b31422241d2f6ad1b41e28ef1f5d5111d459ab3e808d0", "path_in_repo": "tzanussi/linux-yocto-micro-3.14/tools/perf/util/util.o", "objdump": "00000000000009ba <hex2u64>:\n     9ba:\t55                   \tpush   %rbp\n     9bb:\t48 89 e5             \tmov    %rsp,%rbp\n     9be:\t48 83 ec 30          \tsub    $0x30,%rsp\n     9c2:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     9c6:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     9ca:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     9d1:\t00 00 \n     9d3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     9d7:\t31 c0                \txor    %eax,%eax\n     9d9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     9dd:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     9e1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     9e5:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     9ec:\teb 3c                \tjmp    a2a <hex2u64+0x70>\n     9ee:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     9f2:\t0f b6 00             \tmovzbl (%rax),%eax\n     9f5:\t0f be c0             \tmovsbl %al,%eax\n     9f8:\t89 c7                \tmov    %eax,%edi\n     9fa:\te8 45 ff ff ff       \tcallq  944 <hex>\n     9ff:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     a02:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     a06:\t78 2f                \tjs     a37 <hex2u64+0x7d>\n     a08:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     a0c:\t48 8b 00             \tmov    (%rax),%rax\n     a0f:\t48 c1 e0 04          \tshl    $0x4,%rax\n     a13:\t48 89 c2             \tmov    %rax,%rdx\n     a16:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     a19:\t48 98                \tcltq   \n     a1b:\t48 09 c2             \tor     %rax,%rdx\n     a1e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     a22:\t48 89 10             \tmov    %rdx,(%rax)\n     a25:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n     a2a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     a2e:\t0f b6 00             \tmovzbl (%rax),%eax\n     a31:\t84 c0                \ttest   %al,%al\n     a33:\t75 b9                \tjne    9ee <hex2u64+0x34>\n     a35:\teb 01                \tjmp    a38 <hex2u64+0x7e>\n     a37:\t90                   \tnop\n     a38:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     a3c:\t48 2b 45 d8          \tsub    -0x28(%rbp),%rax\n     a40:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     a44:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     a4b:\t00 00 \n     a4d:\t74 05                \tje     a54 <hex2u64+0x9a>\n     a4f:\te8 00 00 00 00       \tcallq  a54 <hex2u64+0x9a>\n     a54:\tc9                   \tleaveq \n     a55:\tc3                   \tretq   ", "code_s": "char *__fastcall hex2u64(char *a1, unsigned __int64 *a2) {\n  int v3;\n  char *v4;\n  v4 = a1;\n  *a2 = Number L;\n  while (*v4) {\n    v3 = hex(*v4);\n    if (v3 < Number)\n      break;\n    *a2 = v3 | (Number * *a2);\n    ++v4;\n  }\n  return (char *)(v4 - a1);\n}", "code_t": "int __cdecl hex2u64(const char *<span class=\"supfact\">ptr</span>,\n                    u64 *<span class=\"supfact\">long_val</span>) {\n  int <span class=\"supfact\">hex_val</span>;\n  char *<span class=\"supfact\">p</span>;\n  <span class=\"supfact\">p</span> = (char *)<span class=\"supfact\">ptr</span>;\n  *<span class=\"supfact\">long_val</span> = Number L;\n  while (*<span class=\"supfact\">p</span>) {\n    <span class=\"supfact\">hex_val</span> = hex(*<span class=\"supfact\">p</span>);\n    if (<span class=\"supfact\">hex_val</span> < Number)\n      break;\n    *<span class=\"supfact\">long_val</span> =\n        <span class=\"supfact\">hex_val</span> | (Number * *<span class=\"supfact\">long_val</span>);\n    ++<span class=\"supfact\">p</span>;\n  }\n  return (_DWORD)<span class=\"supfact\">p</span> - (_DWORD)<span class=\"supfact\">ptr</span>;\n}", "var": [{"name": "a1", "type": "const char *", "pred_name": "ptr", "ref_name": "ptr", "ref_type": "const char *"}, {"name": "a2", "type": "u64 *", "pred_name": "long_val", "ref_name": "long_val", "ref_type": "u64 *"}, {"name": "v3", "type": "int", "pred_name": "hex_val", "ref_name": "hex_val", "ref_type": "int"}, {"name": "v4", "type": "char *", "pred_name": "p", "ref_name": "p", "ref_type": "char *"}], "body_in_train": true}, {"repo_owner": "mdeejay", "repo_name": "pyramid-gb-mr", "path": "mdeejay/pyramid-gb-mr/9d8b96a3b29046da77308fc48a0752742e77c2706435ca5597e2bd260db3c7e3", "path_in_repo": "mdeejay/pyramid-gb-mr//scripts/kconfig/zconf.tab.o", "objdump": "0000000000003634 <yy_get_previous_state>:\n    3634:\t55                   \tpush   %rbp\n    3635:\t53                   \tpush   %rbx\n    3636:\t8b 2d 00 00 00 00    \tmov    0x0(%rip),%ebp        # 363c <yy_get_previous_state+0x8>\n    363c:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 3643 <yy_get_previous_state+0xf>\n    3643:\teb 3f                \tjmp    3684 <yy_get_previous_state+0x50>\n    3645:\t0f b6 03             \tmovzbl (%rbx),%eax\n    3648:\t84 c0                \ttest   %al,%al\n    364a:\t74 11                \tje     365d <yy_get_previous_state+0x29>\n    364c:\t0f b6 03             \tmovzbl (%rbx),%eax\n    364f:\t0f b6 c0             \tmovzbl %al,%eax\n    3652:\t89 c0                \tmov    %eax,%eax\n    3654:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    365b:\teb 05                \tjmp    3662 <yy_get_previous_state+0x2e>\n    365d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    3662:\t48 63 c8             \tmovslq %eax,%rcx\n    3665:\t48 63 d5             \tmovslq %ebp,%rdx\n    3668:\t48 89 d0             \tmov    %rdx,%rax\n    366b:\t48 c1 e0 04          \tshl    $0x4,%rax\n    366f:\t48 01 d0             \tadd    %rdx,%rax\n    3672:\t48 01 c8             \tadd    %rcx,%rax\n    3675:\t0f b7 84 00 00 00 00 \tmovzwl 0x0(%rax,%rax,1),%eax\n    367c:\t00 \n    367d:\t0f bf e8             \tmovswl %ax,%ebp\n    3680:\t48 83 c3 01          \tadd    $0x1,%rbx\n    3684:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 368b <yy_get_previous_state+0x57>\n    368b:\t48 39 c3             \tcmp    %rax,%rbx\n    368e:\t72 b5                \tjb     3645 <yy_get_previous_state+0x11>\n    3690:\t89 e8                \tmov    %ebp,%eax\n    3692:\t5b                   \tpop    %rbx\n    3693:\t5d                   \tpop    %rbp\n    3694:\tc3                   \tretq   ", "code_s": "__int64 yy_get_previous_state() {\n  unsigned int v0;\n  _BYTE *i;\n  int v2;\n  v0 = yy_start;\n  for (i = (_BYTE *)zconftext; (unsigned __int64)i < yy_c_buf_p; ++i) {\n    if (*i)\n      v2 = yy_ec[(unsigned __int8)*i];\n    else\n      v2 = Number;\n    v0 = yy_nxt[Number * v0 + v2];\n  }\n  return v0;\n}", "code_t": "yy_state_type __cdecl yy_get_previous_state() {\n  yy_state_type <span class=\"supfact\">v0</span>;\n  char *<span class=\"supfact\">i</span>;\n  flex_int32_t <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v0</span> = yy_start;\n  for (<span class=\"supfact\">i</span> = zconftext; <span class=\"supfact\">i</span> < yy_c_buf_p;\n       ++<span class=\"supfact\">i</span>) {\n    if (*<span class=\"supfact\">i</span>)\n      <span class=\"supfact\">v2</span> = yy_ec[(unsigned __int8)*<span class=\"supfact\">i</span>];\n    else\n      <span class=\"supfact\">v2</span> = Number;\n    <span class=\"supfact\">v0</span> = yy_nxt[<span class=\"supfact\">v0</span>][<span class=\"supfact\">v2</span>];\n  }\n  return <span class=\"supfact\">v0</span>;\n}", "var": [{"name": "v0", "type": "yy_state_type", "pred_name": "v0", "ref_name": "v0", "ref_type": "yy_state_type"}, {"name": "i", "type": "char *", "pred_name": "i", "ref_name": "i", "ref_type": "char *"}, {"name": "v2", "type": "flex_int32_t", "pred_name": "v2", "ref_name": "v2", "ref_type": "flex_int32_t"}], "body_in_train": true}, {"repo_owner": "wwAlarm", "repo_name": "Android", "path": "wwAlarm/Android/e182cea49b9361ddddebd4e2e43f8316ee28fe058a93f514a9176d4beb5a563c", "path_in_repo": "wwAlarm/Android/AVCodec/jni_ffmpeg/libavcodec/vc1dsp.o", "objdump": "000000000000b030 <put_vc1_mspel_mc21_c>:\n    b030:\t48 81 ec f0 00 00 00 \tsub    $0xf0,%rsp\n    b037:\t48 89 7c 24 98       \tmov    %rdi,-0x68(%rsp)\n    b03c:\t48 89 74 24 90       \tmov    %rsi,-0x70(%rsp)\n    b041:\t89 54 24 8c          \tmov    %edx,-0x74(%rsp)\n    b045:\t89 4c 24 88          \tmov    %ecx,-0x78(%rsp)\n    b049:\t48 8b 44 24 98       \tmov    -0x68(%rsp),%rax\n    b04e:\t48 89 84 24 e8 00 00 \tmov    %rax,0xe8(%rsp)\n    b055:\t00 \n    b056:\t48 8b 44 24 90       \tmov    -0x70(%rsp),%rax\n    b05b:\t48 89 84 24 e0 00 00 \tmov    %rax,0xe0(%rsp)\n    b062:\t00 \n    b063:\t8b 44 24 8c          \tmov    -0x74(%rsp),%eax\n    b067:\t89 84 24 dc 00 00 00 \tmov    %eax,0xdc(%rsp)\n    b06e:\tc7 84 24 d8 00 00 00 \tmovl   $0x2,0xd8(%rsp)\n    b075:\t02 00 00 00 \n    b079:\tc7 84 24 d4 00 00 00 \tmovl   $0x1,0xd4(%rsp)\n    b080:\t01 00 00 00 \n    b084:\t8b 44 24 88          \tmov    -0x78(%rsp),%eax\n    b088:\t89 84 24 d0 00 00 00 \tmov    %eax,0xd0(%rsp)\n    b08f:\t83 bc 24 d4 00 00 00 \tcmpl   $0x0,0xd4(%rsp)\n    b096:\t00 \n    b097:\t0f 84 38 09 00 00    \tje     b9d5 <put_vc1_mspel_mc21_c+0x9a5>\n    b09d:\t83 bc 24 d8 00 00 00 \tcmpl   $0x0,0xd8(%rsp)\n    b0a4:\t00 \n    b0a5:\t0f 84 44 06 00 00    \tje     b6ef <put_vc1_mspel_mc21_c+0x6bf>\n    b0ab:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n    b0b2:\t48 98                \tcltq   \n    b0b4:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    b0bb:\t8b 84 24 d4 00 00 00 \tmov    0xd4(%rsp),%eax\n    b0c2:\t48 98                \tcltq   \n    b0c4:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    b0cb:\t01 d0                \tadd    %edx,%eax\n    b0cd:\td1 f8                \tsar    %eax\n    b0cf:\t89 84 24 cc 00 00 00 \tmov    %eax,0xcc(%rsp)\n    b0d6:\t48 8d 44 24 a0       \tlea    -0x60(%rsp),%rax\n    b0db:\t48 89 84 24 c0 00 00 \tmov    %rax,0xc0(%rsp)\n    b0e2:\t00 \n    b0e3:\t8b 84 24 cc 00 00 00 \tmov    0xcc(%rsp),%eax\n    b0ea:\t83 e8 01             \tsub    $0x1,%eax\n    b0ed:\tba 01 00 00 00       \tmov    $0x1,%edx\n    b0f2:\t89 c1                \tmov    %eax,%ecx\n    b0f4:\td3 e2                \tshl    %cl,%edx\n    b0f6:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n    b0fd:\t01 d0                \tadd    %edx,%eax\n    b0ff:\t83 e8 01             \tsub    $0x1,%eax\n    b102:\t89 84 24 bc 00 00 00 \tmov    %eax,0xbc(%rsp)\n    b109:\t48 83 ac 24 e0 00 00 \tsubq   $0x1,0xe0(%rsp)\n    b110:\t00 01 \n    b112:\tc7 84 24 b8 00 00 00 \tmovl   $0x0,0xb8(%rsp)\n    b119:\t00 00 00 00 \n    b11d:\te9 a4 02 00 00       \tjmpq   b3c6 <put_vc1_mspel_mc21_c+0x396>\n    b122:\tc7 84 24 b4 00 00 00 \tmovl   $0x0,0xb4(%rsp)\n    b129:\t00 00 00 00 \n    b12d:\te9 64 02 00 00       \tjmpq   b396 <put_vc1_mspel_mc21_c+0x366>\n    b132:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n    b139:\t48 63 d0             \tmovslq %eax,%rdx\n    b13c:\t48 8b 84 24 e0 00 00 \tmov    0xe0(%rsp),%rax\n    b143:\t00 \n    b144:\t48 01 d0             \tadd    %rdx,%rax\n    b147:\t48 89 84 24 a8 00 00 \tmov    %rax,0xa8(%rsp)\n    b14e:\t00 \n    b14f:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    b156:\t89 84 24 a4 00 00 00 \tmov    %eax,0xa4(%rsp)\n    b15d:\t8b 84 24 d4 00 00 00 \tmov    0xd4(%rsp),%eax\n    b164:\t89 84 24 a0 00 00 00 \tmov    %eax,0xa0(%rsp)\n    b16b:\t83 bc 24 a0 00 00 00 \tcmpl   $0x3,0xa0(%rsp)\n    b172:\t03 \n    b173:\t0f 84 5c 01 00 00    \tje     b2d5 <put_vc1_mspel_mc21_c+0x2a5>\n    b179:\t83 bc 24 a0 00 00 00 \tcmpl   $0x3,0xa0(%rsp)\n    b180:\t03 \n    b181:\t0f 8f d3 01 00 00    \tjg     b35a <put_vc1_mspel_mc21_c+0x32a>\n    b187:\t83 bc 24 a0 00 00 00 \tcmpl   $0x2,0xa0(%rsp)\n    b18e:\t02 \n    b18f:\t0f 84 c1 00 00 00    \tje     b256 <put_vc1_mspel_mc21_c+0x226>\n    b195:\t83 bc 24 a0 00 00 00 \tcmpl   $0x2,0xa0(%rsp)\n    b19c:\t02 \n    b19d:\t0f 8f b7 01 00 00    \tjg     b35a <put_vc1_mspel_mc21_c+0x32a>\n    b1a3:\t83 bc 24 a0 00 00 00 \tcmpl   $0x0,0xa0(%rsp)\n    b1aa:\t00 \n    b1ab:\t74 0f                \tje     b1bc <put_vc1_mspel_mc21_c+0x18c>\n    b1ad:\t83 bc 24 a0 00 00 00 \tcmpl   $0x1,0xa0(%rsp)\n    b1b4:\t01 \n    b1b5:\t74 0f                \tje     b1c6 <put_vc1_mspel_mc21_c+0x196>\n    b1b7:\te9 9e 01 00 00       \tjmpq   b35a <put_vc1_mspel_mc21_c+0x32a>\n    b1bc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    b1c1:\te9 99 01 00 00       \tjmpq   b35f <put_vc1_mspel_mc21_c+0x32f>\n    b1c6:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n    b1cd:\tf7 d8                \tneg    %eax\n    b1cf:\t48 63 d0             \tmovslq %eax,%rdx\n    b1d2:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b1d9:\t00 \n    b1da:\t48 01 d0             \tadd    %rdx,%rax\n    b1dd:\t0f b6 00             \tmovzbl (%rax),%eax\n    b1e0:\t0f b6 d0             \tmovzbl %al,%edx\n    b1e3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    b1e8:\t29 d0                \tsub    %edx,%eax\n    b1ea:\tc1 e0 02             \tshl    $0x2,%eax\n    b1ed:\t89 c2                \tmov    %eax,%edx\n    b1ef:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b1f6:\t00 \n    b1f7:\t0f b6 00             \tmovzbl (%rax),%eax\n    b1fa:\t0f b6 c0             \tmovzbl %al,%eax\n    b1fd:\t6b c0 35             \timul   $0x35,%eax,%eax\n    b200:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    b203:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n    b20a:\t48 63 d0             \tmovslq %eax,%rdx\n    b20d:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b214:\t00 \n    b215:\t48 01 d0             \tadd    %rdx,%rax\n    b218:\t0f b6 00             \tmovzbl (%rax),%eax\n    b21b:\t0f b6 d0             \tmovzbl %al,%edx\n    b21e:\t89 d0                \tmov    %edx,%eax\n    b220:\tc1 e0 03             \tshl    $0x3,%eax\n    b223:\t01 d0                \tadd    %edx,%eax\n    b225:\t01 c0                \tadd    %eax,%eax\n    b227:\t01 c1                \tadd    %eax,%ecx\n    b229:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n    b230:\t01 c0                \tadd    %eax,%eax\n    b232:\t48 63 d0             \tmovslq %eax,%rdx\n    b235:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b23c:\t00 \n    b23d:\t48 01 d0             \tadd    %rdx,%rax\n    b240:\t0f b6 00             \tmovzbl (%rax),%eax\n    b243:\t0f b6 c0             \tmovzbl %al,%eax\n    b246:\t89 c2                \tmov    %eax,%edx\n    b248:\tc1 e0 02             \tshl    $0x2,%eax\n    b24b:\t29 c2                \tsub    %eax,%edx\n    b24d:\t89 d0                \tmov    %edx,%eax\n    b24f:\t01 c8                \tadd    %ecx,%eax\n    b251:\te9 09 01 00 00       \tjmpq   b35f <put_vc1_mspel_mc21_c+0x32f>\n    b256:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b25d:\t00 \n    b25e:\t0f b6 00             \tmovzbl (%rax),%eax\n    b261:\t0f b6 d0             \tmovzbl %al,%edx\n    b264:\t89 d0                \tmov    %edx,%eax\n    b266:\tc1 e0 03             \tshl    $0x3,%eax\n    b269:\t8d 0c 10             \tlea    (%rax,%rdx,1),%ecx\n    b26c:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n    b273:\tf7 d8                \tneg    %eax\n    b275:\t48 63 d0             \tmovslq %eax,%rdx\n    b278:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b27f:\t00 \n    b280:\t48 01 d0             \tadd    %rdx,%rax\n    b283:\t0f b6 00             \tmovzbl (%rax),%eax\n    b286:\t0f b6 c0             \tmovzbl %al,%eax\n    b289:\t29 c1                \tsub    %eax,%ecx\n    b28b:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n    b292:\t48 63 d0             \tmovslq %eax,%rdx\n    b295:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b29c:\t00 \n    b29d:\t48 01 d0             \tadd    %rdx,%rax\n    b2a0:\t0f b6 00             \tmovzbl (%rax),%eax\n    b2a3:\t0f b6 d0             \tmovzbl %al,%edx\n    b2a6:\t89 d0                \tmov    %edx,%eax\n    b2a8:\tc1 e0 03             \tshl    $0x3,%eax\n    b2ab:\t01 d0                \tadd    %edx,%eax\n    b2ad:\t01 c1                \tadd    %eax,%ecx\n    b2af:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n    b2b6:\t01 c0                \tadd    %eax,%eax\n    b2b8:\t48 63 d0             \tmovslq %eax,%rdx\n    b2bb:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b2c2:\t00 \n    b2c3:\t48 01 d0             \tadd    %rdx,%rax\n    b2c6:\t0f b6 00             \tmovzbl (%rax),%eax\n    b2c9:\t0f b6 c0             \tmovzbl %al,%eax\n    b2cc:\t29 c1                \tsub    %eax,%ecx\n    b2ce:\t89 c8                \tmov    %ecx,%eax\n    b2d0:\te9 8a 00 00 00       \tjmpq   b35f <put_vc1_mspel_mc21_c+0x32f>\n    b2d5:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n    b2dc:\tf7 d8                \tneg    %eax\n    b2de:\t48 63 d0             \tmovslq %eax,%rdx\n    b2e1:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b2e8:\t00 \n    b2e9:\t48 01 d0             \tadd    %rdx,%rax\n    b2ec:\t0f b6 00             \tmovzbl (%rax),%eax\n    b2ef:\t0f b6 c0             \tmovzbl %al,%eax\n    b2f2:\t89 c2                \tmov    %eax,%edx\n    b2f4:\tc1 e0 02             \tshl    $0x2,%eax\n    b2f7:\t89 d1                \tmov    %edx,%ecx\n    b2f9:\t29 c1                \tsub    %eax,%ecx\n    b2fb:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b302:\t00 \n    b303:\t0f b6 00             \tmovzbl (%rax),%eax\n    b306:\t0f b6 d0             \tmovzbl %al,%edx\n    b309:\t89 d0                \tmov    %edx,%eax\n    b30b:\tc1 e0 03             \tshl    $0x3,%eax\n    b30e:\t01 d0                \tadd    %edx,%eax\n    b310:\t01 c0                \tadd    %eax,%eax\n    b312:\t01 c1                \tadd    %eax,%ecx\n    b314:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n    b31b:\t48 63 d0             \tmovslq %eax,%rdx\n    b31e:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b325:\t00 \n    b326:\t48 01 d0             \tadd    %rdx,%rax\n    b329:\t0f b6 00             \tmovzbl (%rax),%eax\n    b32c:\t0f b6 c0             \tmovzbl %al,%eax\n    b32f:\t6b c0 35             \timul   $0x35,%eax,%eax\n    b332:\t01 c1                \tadd    %eax,%ecx\n    b334:\t8b 84 24 a4 00 00 00 \tmov    0xa4(%rsp),%eax\n    b33b:\t01 c0                \tadd    %eax,%eax\n    b33d:\t48 63 d0             \tmovslq %eax,%rdx\n    b340:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    b347:\t00 \n    b348:\t48 01 d0             \tadd    %rdx,%rax\n    b34b:\t0f b6 00             \tmovzbl (%rax),%eax\n    b34e:\t0f b6 c0             \tmovzbl %al,%eax\n    b351:\tc1 e0 02             \tshl    $0x2,%eax\n    b354:\t29 c1                \tsub    %eax,%ecx\n    b356:\t89 c8                \tmov    %ecx,%eax\n    b358:\teb 05                \tjmp    b35f <put_vc1_mspel_mc21_c+0x32f>\n    b35a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    b35f:\t8b 94 24 bc 00 00 00 \tmov    0xbc(%rsp),%edx\n    b366:\t01 c2                \tadd    %eax,%edx\n    b368:\t8b 84 24 cc 00 00 00 \tmov    0xcc(%rsp),%eax\n    b36f:\t89 c1                \tmov    %eax,%ecx\n    b371:\td3 fa                \tsar    %cl,%edx\n    b373:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n    b37a:\t48 98                \tcltq   \n    b37c:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n    b380:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n    b387:\t00 \n    b388:\t48 01 c8             \tadd    %rcx,%rax\n    b38b:\t66 89 10             \tmov    %dx,(%rax)\n    b38e:\t83 84 24 b4 00 00 00 \taddl   $0x1,0xb4(%rsp)\n    b395:\t01 \n    b396:\t83 bc 24 b4 00 00 00 \tcmpl   $0xa,0xb4(%rsp)\n    b39d:\t0a \n    b39e:\t0f 8e 8e fd ff ff    \tjle    b132 <put_vc1_mspel_mc21_c+0x102>\n    b3a4:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    b3ab:\t48 98                \tcltq   \n    b3ad:\t48 01 84 24 e0 00 00 \tadd    %rax,0xe0(%rsp)\n    b3b4:\t00 \n    b3b5:\t48 83 84 24 c0 00 00 \taddq   $0x16,0xc0(%rsp)\n    b3bc:\t00 16 \n    b3be:\t83 84 24 b8 00 00 00 \taddl   $0x1,0xb8(%rsp)\n    b3c5:\t01 \n    b3c6:\t83 bc 24 b8 00 00 00 \tcmpl   $0x7,0xb8(%rsp)\n    b3cd:\t07 \n    b3ce:\t0f 8e 4e fd ff ff    \tjle    b122 <put_vc1_mspel_mc21_c+0xf2>\n    b3d4:\tb8 40 00 00 00       \tmov    $0x40,%eax\n    b3d9:\t2b 84 24 d0 00 00 00 \tsub    0xd0(%rsp),%eax\n    b3e0:\t89 84 24 bc 00 00 00 \tmov    %eax,0xbc(%rsp)\n    b3e7:\t48 8d 44 24 a0       \tlea    -0x60(%rsp),%rax\n    b3ec:\t48 83 c0 02          \tadd    $0x2,%rax\n    b3f0:\t48 89 84 24 c0 00 00 \tmov    %rax,0xc0(%rsp)\n    b3f7:\t00 \n    b3f8:\tc7 84 24 b8 00 00 00 \tmovl   $0x0,0xb8(%rsp)\n    b3ff:\t00 00 00 00 \n    b403:\te9 d4 02 00 00       \tjmpq   b6dc <put_vc1_mspel_mc21_c+0x6ac>\n    b408:\tc7 84 24 b4 00 00 00 \tmovl   $0x0,0xb4(%rsp)\n    b40f:\t00 00 00 00 \n    b413:\te9 94 02 00 00       \tjmpq   b6ac <put_vc1_mspel_mc21_c+0x67c>\n    b418:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n    b41f:\t48 98                \tcltq   \n    b421:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    b425:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n    b42c:\t00 \n    b42d:\t48 01 d0             \tadd    %rdx,%rax\n    b430:\t48 89 84 24 98 00 00 \tmov    %rax,0x98(%rsp)\n    b437:\t00 \n    b438:\tc7 84 24 94 00 00 00 \tmovl   $0x1,0x94(%rsp)\n    b43f:\t01 00 00 00 \n    b443:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n    b44a:\t89 84 24 90 00 00 00 \tmov    %eax,0x90(%rsp)\n    b451:\t83 bc 24 90 00 00 00 \tcmpl   $0x3,0x90(%rsp)\n    b458:\t03 \n    b459:\t0f 84 69 01 00 00    \tje     b5c8 <put_vc1_mspel_mc21_c+0x598>\n    b45f:\t83 bc 24 90 00 00 00 \tcmpl   $0x3,0x90(%rsp)\n    b466:\t03 \n    b467:\t0f 8f e4 01 00 00    \tjg     b651 <put_vc1_mspel_mc21_c+0x621>\n    b46d:\t83 bc 24 90 00 00 00 \tcmpl   $0x2,0x90(%rsp)\n    b474:\t02 \n    b475:\t0f 84 c7 00 00 00    \tje     b542 <put_vc1_mspel_mc21_c+0x512>\n    b47b:\t83 bc 24 90 00 00 00 \tcmpl   $0x2,0x90(%rsp)\n    b482:\t02 \n    b483:\t0f 8f c8 01 00 00    \tjg     b651 <put_vc1_mspel_mc21_c+0x621>\n    b489:\t83 bc 24 90 00 00 00 \tcmpl   $0x0,0x90(%rsp)\n    b490:\t00 \n    b491:\t74 0f                \tje     b4a2 <put_vc1_mspel_mc21_c+0x472>\n    b493:\t83 bc 24 90 00 00 00 \tcmpl   $0x1,0x90(%rsp)\n    b49a:\t01 \n    b49b:\t74 0f                \tje     b4ac <put_vc1_mspel_mc21_c+0x47c>\n    b49d:\te9 af 01 00 00       \tjmpq   b651 <put_vc1_mspel_mc21_c+0x621>\n    b4a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    b4a7:\te9 aa 01 00 00       \tjmpq   b656 <put_vc1_mspel_mc21_c+0x626>\n    b4ac:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n    b4b3:\tf7 d8                \tneg    %eax\n    b4b5:\t48 98                \tcltq   \n    b4b7:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    b4bb:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b4c2:\t00 \n    b4c3:\t48 01 d0             \tadd    %rdx,%rax\n    b4c6:\t0f b7 00             \tmovzwl (%rax),%eax\n    b4c9:\t0f bf d0             \tmovswl %ax,%edx\n    b4cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    b4d1:\t29 d0                \tsub    %edx,%eax\n    b4d3:\tc1 e0 02             \tshl    $0x2,%eax\n    b4d6:\t89 c2                \tmov    %eax,%edx\n    b4d8:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b4df:\t00 \n    b4e0:\t0f b7 00             \tmovzwl (%rax),%eax\n    b4e3:\t98                   \tcwtl   \n    b4e4:\t6b c0 35             \timul   $0x35,%eax,%eax\n    b4e7:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    b4ea:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n    b4f1:\t48 98                \tcltq   \n    b4f3:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    b4f7:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b4fe:\t00 \n    b4ff:\t48 01 d0             \tadd    %rdx,%rax\n    b502:\t0f b7 00             \tmovzwl (%rax),%eax\n    b505:\t0f bf d0             \tmovswl %ax,%edx\n    b508:\t89 d0                \tmov    %edx,%eax\n    b50a:\tc1 e0 03             \tshl    $0x3,%eax\n    b50d:\t01 d0                \tadd    %edx,%eax\n    b50f:\t01 c0                \tadd    %eax,%eax\n    b511:\t8d 14 01             \tlea    (%rcx,%rax,1),%edx\n    b514:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n    b51b:\t01 c0                \tadd    %eax,%eax\n    b51d:\t48 98                \tcltq   \n    b51f:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n    b523:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b52a:\t00 \n    b52b:\t48 01 c8             \tadd    %rcx,%rax\n    b52e:\t0f b7 00             \tmovzwl (%rax),%eax\n    b531:\t98                   \tcwtl   \n    b532:\t89 c1                \tmov    %eax,%ecx\n    b534:\tc1 e0 02             \tshl    $0x2,%eax\n    b537:\t29 c1                \tsub    %eax,%ecx\n    b539:\t89 c8                \tmov    %ecx,%eax\n    b53b:\t01 d0                \tadd    %edx,%eax\n    b53d:\te9 14 01 00 00       \tjmpq   b656 <put_vc1_mspel_mc21_c+0x626>\n    b542:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b549:\t00 \n    b54a:\t0f b7 00             \tmovzwl (%rax),%eax\n    b54d:\t0f bf d0             \tmovswl %ax,%edx\n    b550:\t89 d0                \tmov    %edx,%eax\n    b552:\tc1 e0 03             \tshl    $0x3,%eax\n    b555:\t01 c2                \tadd    %eax,%edx\n    b557:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n    b55e:\tf7 d8                \tneg    %eax\n    b560:\t48 98                \tcltq   \n    b562:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n    b566:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b56d:\t00 \n    b56e:\t48 01 c8             \tadd    %rcx,%rax\n    b571:\t0f b7 00             \tmovzwl (%rax),%eax\n    b574:\t98                   \tcwtl   \n    b575:\t89 d1                \tmov    %edx,%ecx\n    b577:\t29 c1                \tsub    %eax,%ecx\n    b579:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n    b580:\t48 98                \tcltq   \n    b582:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    b586:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b58d:\t00 \n    b58e:\t48 01 d0             \tadd    %rdx,%rax\n    b591:\t0f b7 00             \tmovzwl (%rax),%eax\n    b594:\t0f bf d0             \tmovswl %ax,%edx\n    b597:\t89 d0                \tmov    %edx,%eax\n    b599:\tc1 e0 03             \tshl    $0x3,%eax\n    b59c:\t01 d0                \tadd    %edx,%eax\n    b59e:\t8d 14 01             \tlea    (%rcx,%rax,1),%edx\n    b5a1:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n    b5a8:\t01 c0                \tadd    %eax,%eax\n    b5aa:\t48 98                \tcltq   \n    b5ac:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n    b5b0:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b5b7:\t00 \n    b5b8:\t48 01 c8             \tadd    %rcx,%rax\n    b5bb:\t0f b7 00             \tmovzwl (%rax),%eax\n    b5be:\t98                   \tcwtl   \n    b5bf:\t29 c2                \tsub    %eax,%edx\n    b5c1:\t89 d0                \tmov    %edx,%eax\n    b5c3:\te9 8e 00 00 00       \tjmpq   b656 <put_vc1_mspel_mc21_c+0x626>\n    b5c8:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n    b5cf:\tf7 d8                \tneg    %eax\n    b5d1:\t48 98                \tcltq   \n    b5d3:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    b5d7:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b5de:\t00 \n    b5df:\t48 01 d0             \tadd    %rdx,%rax\n    b5e2:\t0f b7 00             \tmovzwl (%rax),%eax\n    b5e5:\t98                   \tcwtl   \n    b5e6:\t89 c2                \tmov    %eax,%edx\n    b5e8:\tc1 e0 02             \tshl    $0x2,%eax\n    b5eb:\t89 d1                \tmov    %edx,%ecx\n    b5ed:\t29 c1                \tsub    %eax,%ecx\n    b5ef:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b5f6:\t00 \n    b5f7:\t0f b7 00             \tmovzwl (%rax),%eax\n    b5fa:\t0f bf d0             \tmovswl %ax,%edx\n    b5fd:\t89 d0                \tmov    %edx,%eax\n    b5ff:\tc1 e0 03             \tshl    $0x3,%eax\n    b602:\t01 d0                \tadd    %edx,%eax\n    b604:\t01 c0                \tadd    %eax,%eax\n    b606:\t8d 14 01             \tlea    (%rcx,%rax,1),%edx\n    b609:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n    b610:\t48 98                \tcltq   \n    b612:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n    b616:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b61d:\t00 \n    b61e:\t48 01 c8             \tadd    %rcx,%rax\n    b621:\t0f b7 00             \tmovzwl (%rax),%eax\n    b624:\t98                   \tcwtl   \n    b625:\t6b c0 35             \timul   $0x35,%eax,%eax\n    b628:\t01 c2                \tadd    %eax,%edx\n    b62a:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n    b631:\t01 c0                \tadd    %eax,%eax\n    b633:\t48 98                \tcltq   \n    b635:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n    b639:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    b640:\t00 \n    b641:\t48 01 c8             \tadd    %rcx,%rax\n    b644:\t0f b7 00             \tmovzwl (%rax),%eax\n    b647:\t98                   \tcwtl   \n    b648:\tc1 e0 02             \tshl    $0x2,%eax\n    b64b:\t29 c2                \tsub    %eax,%edx\n    b64d:\t89 d0                \tmov    %edx,%eax\n    b64f:\teb 05                \tjmp    b656 <put_vc1_mspel_mc21_c+0x626>\n    b651:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    b656:\t8b 94 24 bc 00 00 00 \tmov    0xbc(%rsp),%edx\n    b65d:\t01 d0                \tadd    %edx,%eax\n    b65f:\tc1 f8 07             \tsar    $0x7,%eax\n    b662:\t89 c2                \tmov    %eax,%edx\n    b664:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n    b66b:\t48 63 c8             \tmovslq %eax,%rcx\n    b66e:\t48 8b 84 24 e8 00 00 \tmov    0xe8(%rsp),%rax\n    b675:\t00 \n    b676:\t48 01 c8             \tadd    %rcx,%rax\n    b679:\t89 94 24 8c 00 00 00 \tmov    %edx,0x8c(%rsp)\n    b680:\t8b 94 24 8c 00 00 00 \tmov    0x8c(%rsp),%edx\n    b687:\tb2 00                \tmov    $0x0,%dl\n    b689:\t85 d2                \ttest   %edx,%edx\n    b68b:\t74 0e                \tje     b69b <put_vc1_mspel_mc21_c+0x66b>\n    b68d:\t8b 94 24 8c 00 00 00 \tmov    0x8c(%rsp),%edx\n    b694:\tf7 da                \tneg    %edx\n    b696:\tc1 fa 1f             \tsar    $0x1f,%edx\n    b699:\teb 07                \tjmp    b6a2 <put_vc1_mspel_mc21_c+0x672>\n    b69b:\t8b 94 24 8c 00 00 00 \tmov    0x8c(%rsp),%edx\n    b6a2:\t88 10                \tmov    %dl,(%rax)\n    b6a4:\t83 84 24 b4 00 00 00 \taddl   $0x1,0xb4(%rsp)\n    b6ab:\t01 \n    b6ac:\t83 bc 24 b4 00 00 00 \tcmpl   $0x7,0xb4(%rsp)\n    b6b3:\t07 \n    b6b4:\t0f 8e 5e fd ff ff    \tjle    b418 <put_vc1_mspel_mc21_c+0x3e8>\n    b6ba:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    b6c1:\t48 98                \tcltq   \n    b6c3:\t48 01 84 24 e8 00 00 \tadd    %rax,0xe8(%rsp)\n    b6ca:\t00 \n    b6cb:\t48 83 84 24 c0 00 00 \taddq   $0x16,0xc0(%rsp)\n    b6d2:\t00 16 \n    b6d4:\t83 84 24 b8 00 00 00 \taddl   $0x1,0xb8(%rsp)\n    b6db:\t01 \n    b6dc:\t83 bc 24 b8 00 00 00 \tcmpl   $0x7,0xb8(%rsp)\n    b6e3:\t07 \n    b6e4:\t0f 8e 1e fd ff ff    \tjle    b408 <put_vc1_mspel_mc21_c+0x3d8>\n    b6ea:\te9 86 05 00 00       \tjmpq   bc75 <put_vc1_mspel_mc21_c+0xc45>\n    b6ef:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    b6f4:\t2b 84 24 d0 00 00 00 \tsub    0xd0(%rsp),%eax\n    b6fb:\t89 84 24 bc 00 00 00 \tmov    %eax,0xbc(%rsp)\n    b702:\tc7 84 24 b8 00 00 00 \tmovl   $0x0,0xb8(%rsp)\n    b709:\t00 00 00 00 \n    b70d:\te9 b0 02 00 00       \tjmpq   b9c2 <put_vc1_mspel_mc21_c+0x992>\n    b712:\tc7 84 24 b4 00 00 00 \tmovl   $0x0,0xb4(%rsp)\n    b719:\t00 00 00 00 \n    b71d:\te9 68 02 00 00       \tjmpq   b98a <put_vc1_mspel_mc21_c+0x95a>\n    b722:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n    b729:\t48 63 d0             \tmovslq %eax,%rdx\n    b72c:\t48 8b 84 24 e0 00 00 \tmov    0xe0(%rsp),%rax\n    b733:\t00 \n    b734:\t48 01 d0             \tadd    %rdx,%rax\n    b737:\t48 89 84 24 80 00 00 \tmov    %rax,0x80(%rsp)\n    b73e:\t00 \n    b73f:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    b746:\t89 44 24 7c          \tmov    %eax,0x7c(%rsp)\n    b74a:\t8b 84 24 d4 00 00 00 \tmov    0xd4(%rsp),%eax\n    b751:\t89 44 24 78          \tmov    %eax,0x78(%rsp)\n    b755:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    b75c:\t89 44 24 74          \tmov    %eax,0x74(%rsp)\n    b760:\t83 7c 24 78 03       \tcmpl   $0x3,0x78(%rsp)\n    b765:\t0f 84 58 01 00 00    \tje     b8c3 <put_vc1_mspel_mc21_c+0x893>\n    b76b:\t83 7c 24 78 03       \tcmpl   $0x3,0x78(%rsp)\n    b770:\t0f 8f d3 01 00 00    \tjg     b949 <put_vc1_mspel_mc21_c+0x919>\n    b776:\t83 7c 24 78 02       \tcmpl   $0x2,0x78(%rsp)\n    b77b:\t0f 84 c2 00 00 00    \tje     b843 <put_vc1_mspel_mc21_c+0x813>\n    b781:\t83 7c 24 78 02       \tcmpl   $0x2,0x78(%rsp)\n    b786:\t0f 8f bd 01 00 00    \tjg     b949 <put_vc1_mspel_mc21_c+0x919>\n    b78c:\t83 7c 24 78 00       \tcmpl   $0x0,0x78(%rsp)\n    b791:\t74 0c                \tje     b79f <put_vc1_mspel_mc21_c+0x76f>\n    b793:\t83 7c 24 78 01       \tcmpl   $0x1,0x78(%rsp)\n    b798:\t74 18                \tje     b7b2 <put_vc1_mspel_mc21_c+0x782>\n    b79a:\te9 aa 01 00 00       \tjmpq   b949 <put_vc1_mspel_mc21_c+0x919>\n    b79f:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b7a6:\t00 \n    b7a7:\t0f b6 00             \tmovzbl (%rax),%eax\n    b7aa:\t0f b6 c0             \tmovzbl %al,%eax\n    b7ad:\te9 9c 01 00 00       \tjmpq   b94e <put_vc1_mspel_mc21_c+0x91e>\n    b7b2:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    b7b6:\tf7 d8                \tneg    %eax\n    b7b8:\t48 63 d0             \tmovslq %eax,%rdx\n    b7bb:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b7c2:\t00 \n    b7c3:\t48 01 d0             \tadd    %rdx,%rax\n    b7c6:\t0f b6 00             \tmovzbl (%rax),%eax\n    b7c9:\t0f b6 d0             \tmovzbl %al,%edx\n    b7cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    b7d1:\t29 d0                \tsub    %edx,%eax\n    b7d3:\tc1 e0 02             \tshl    $0x2,%eax\n    b7d6:\t89 c2                \tmov    %eax,%edx\n    b7d8:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b7df:\t00 \n    b7e0:\t0f b6 00             \tmovzbl (%rax),%eax\n    b7e3:\t0f b6 c0             \tmovzbl %al,%eax\n    b7e6:\t6b c0 35             \timul   $0x35,%eax,%eax\n    b7e9:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    b7ec:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    b7f0:\t48 63 d0             \tmovslq %eax,%rdx\n    b7f3:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b7fa:\t00 \n    b7fb:\t48 01 d0             \tadd    %rdx,%rax\n    b7fe:\t0f b6 00             \tmovzbl (%rax),%eax\n    b801:\t0f b6 d0             \tmovzbl %al,%edx\n    b804:\t89 d0                \tmov    %edx,%eax\n    b806:\tc1 e0 03             \tshl    $0x3,%eax\n    b809:\t01 d0                \tadd    %edx,%eax\n    b80b:\t01 c0                \tadd    %eax,%eax\n    b80d:\t01 c1                \tadd    %eax,%ecx\n    b80f:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    b813:\t01 c0                \tadd    %eax,%eax\n    b815:\t48 63 d0             \tmovslq %eax,%rdx\n    b818:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b81f:\t00 \n    b820:\t48 01 d0             \tadd    %rdx,%rax\n    b823:\t0f b6 00             \tmovzbl (%rax),%eax\n    b826:\t0f b6 c0             \tmovzbl %al,%eax\n    b829:\t89 c2                \tmov    %eax,%edx\n    b82b:\tc1 e0 02             \tshl    $0x2,%eax\n    b82e:\t29 c2                \tsub    %eax,%edx\n    b830:\t89 d0                \tmov    %edx,%eax\n    b832:\t01 c8                \tadd    %ecx,%eax\n    b834:\t83 c0 20             \tadd    $0x20,%eax\n    b837:\t2b 44 24 74          \tsub    0x74(%rsp),%eax\n    b83b:\tc1 f8 06             \tsar    $0x6,%eax\n    b83e:\te9 0b 01 00 00       \tjmpq   b94e <put_vc1_mspel_mc21_c+0x91e>\n    b843:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b84a:\t00 \n    b84b:\t0f b6 00             \tmovzbl (%rax),%eax\n    b84e:\t0f b6 d0             \tmovzbl %al,%edx\n    b851:\t89 d0                \tmov    %edx,%eax\n    b853:\tc1 e0 03             \tshl    $0x3,%eax\n    b856:\t8d 0c 10             \tlea    (%rax,%rdx,1),%ecx\n    b859:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    b85d:\tf7 d8                \tneg    %eax\n    b85f:\t48 63 d0             \tmovslq %eax,%rdx\n    b862:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b869:\t00 \n    b86a:\t48 01 d0             \tadd    %rdx,%rax\n    b86d:\t0f b6 00             \tmovzbl (%rax),%eax\n    b870:\t0f b6 c0             \tmovzbl %al,%eax\n    b873:\t29 c1                \tsub    %eax,%ecx\n    b875:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    b879:\t48 63 d0             \tmovslq %eax,%rdx\n    b87c:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b883:\t00 \n    b884:\t48 01 d0             \tadd    %rdx,%rax\n    b887:\t0f b6 00             \tmovzbl (%rax),%eax\n    b88a:\t0f b6 d0             \tmovzbl %al,%edx\n    b88d:\t89 d0                \tmov    %edx,%eax\n    b88f:\tc1 e0 03             \tshl    $0x3,%eax\n    b892:\t01 d0                \tadd    %edx,%eax\n    b894:\t01 c1                \tadd    %eax,%ecx\n    b896:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    b89a:\t01 c0                \tadd    %eax,%eax\n    b89c:\t48 63 d0             \tmovslq %eax,%rdx\n    b89f:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b8a6:\t00 \n    b8a7:\t48 01 d0             \tadd    %rdx,%rax\n    b8aa:\t0f b6 00             \tmovzbl (%rax),%eax\n    b8ad:\t0f b6 c0             \tmovzbl %al,%eax\n    b8b0:\t29 c1                \tsub    %eax,%ecx\n    b8b2:\t89 c8                \tmov    %ecx,%eax\n    b8b4:\t83 c0 08             \tadd    $0x8,%eax\n    b8b7:\t2b 44 24 74          \tsub    0x74(%rsp),%eax\n    b8bb:\tc1 f8 04             \tsar    $0x4,%eax\n    b8be:\te9 8b 00 00 00       \tjmpq   b94e <put_vc1_mspel_mc21_c+0x91e>\n    b8c3:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    b8c7:\tf7 d8                \tneg    %eax\n    b8c9:\t48 63 d0             \tmovslq %eax,%rdx\n    b8cc:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b8d3:\t00 \n    b8d4:\t48 01 d0             \tadd    %rdx,%rax\n    b8d7:\t0f b6 00             \tmovzbl (%rax),%eax\n    b8da:\t0f b6 c0             \tmovzbl %al,%eax\n    b8dd:\t89 c2                \tmov    %eax,%edx\n    b8df:\tc1 e0 02             \tshl    $0x2,%eax\n    b8e2:\t89 d1                \tmov    %edx,%ecx\n    b8e4:\t29 c1                \tsub    %eax,%ecx\n    b8e6:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b8ed:\t00 \n    b8ee:\t0f b6 00             \tmovzbl (%rax),%eax\n    b8f1:\t0f b6 d0             \tmovzbl %al,%edx\n    b8f4:\t89 d0                \tmov    %edx,%eax\n    b8f6:\tc1 e0 03             \tshl    $0x3,%eax\n    b8f9:\t01 d0                \tadd    %edx,%eax\n    b8fb:\t01 c0                \tadd    %eax,%eax\n    b8fd:\t01 c1                \tadd    %eax,%ecx\n    b8ff:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    b903:\t48 63 d0             \tmovslq %eax,%rdx\n    b906:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b90d:\t00 \n    b90e:\t48 01 d0             \tadd    %rdx,%rax\n    b911:\t0f b6 00             \tmovzbl (%rax),%eax\n    b914:\t0f b6 c0             \tmovzbl %al,%eax\n    b917:\t6b c0 35             \timul   $0x35,%eax,%eax\n    b91a:\t01 c1                \tadd    %eax,%ecx\n    b91c:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n    b920:\t01 c0                \tadd    %eax,%eax\n    b922:\t48 63 d0             \tmovslq %eax,%rdx\n    b925:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    b92c:\t00 \n    b92d:\t48 01 d0             \tadd    %rdx,%rax\n    b930:\t0f b6 00             \tmovzbl (%rax),%eax\n    b933:\t0f b6 c0             \tmovzbl %al,%eax\n    b936:\tc1 e0 02             \tshl    $0x2,%eax\n    b939:\t29 c1                \tsub    %eax,%ecx\n    b93b:\t89 c8                \tmov    %ecx,%eax\n    b93d:\t83 c0 20             \tadd    $0x20,%eax\n    b940:\t2b 44 24 74          \tsub    0x74(%rsp),%eax\n    b944:\tc1 f8 06             \tsar    $0x6,%eax\n    b947:\teb 05                \tjmp    b94e <put_vc1_mspel_mc21_c+0x91e>\n    b949:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    b94e:\t8b 94 24 b4 00 00 00 \tmov    0xb4(%rsp),%edx\n    b955:\t48 63 ca             \tmovslq %edx,%rcx\n    b958:\t48 8b 94 24 e8 00 00 \tmov    0xe8(%rsp),%rdx\n    b95f:\t00 \n    b960:\t48 01 ca             \tadd    %rcx,%rdx\n    b963:\t89 44 24 70          \tmov    %eax,0x70(%rsp)\n    b967:\t8b 44 24 70          \tmov    0x70(%rsp),%eax\n    b96b:\tb0 00                \tmov    $0x0,%al\n    b96d:\t85 c0                \ttest   %eax,%eax\n    b96f:\t74 0b                \tje     b97c <put_vc1_mspel_mc21_c+0x94c>\n    b971:\t8b 44 24 70          \tmov    0x70(%rsp),%eax\n    b975:\tf7 d8                \tneg    %eax\n    b977:\tc1 f8 1f             \tsar    $0x1f,%eax\n    b97a:\teb 04                \tjmp    b980 <put_vc1_mspel_mc21_c+0x950>\n    b97c:\t8b 44 24 70          \tmov    0x70(%rsp),%eax\n    b980:\t88 02                \tmov    %al,(%rdx)\n    b982:\t83 84 24 b4 00 00 00 \taddl   $0x1,0xb4(%rsp)\n    b989:\t01 \n    b98a:\t83 bc 24 b4 00 00 00 \tcmpl   $0x7,0xb4(%rsp)\n    b991:\t07 \n    b992:\t0f 8e 8a fd ff ff    \tjle    b722 <put_vc1_mspel_mc21_c+0x6f2>\n    b998:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    b99f:\t48 98                \tcltq   \n    b9a1:\t48 01 84 24 e0 00 00 \tadd    %rax,0xe0(%rsp)\n    b9a8:\t00 \n    b9a9:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    b9b0:\t48 98                \tcltq   \n    b9b2:\t48 01 84 24 e8 00 00 \tadd    %rax,0xe8(%rsp)\n    b9b9:\t00 \n    b9ba:\t83 84 24 b8 00 00 00 \taddl   $0x1,0xb8(%rsp)\n    b9c1:\t01 \n    b9c2:\t83 bc 24 b8 00 00 00 \tcmpl   $0x7,0xb8(%rsp)\n    b9c9:\t07 \n    b9ca:\t0f 8e 42 fd ff ff    \tjle    b712 <put_vc1_mspel_mc21_c+0x6e2>\n    b9d0:\te9 a0 02 00 00       \tjmpq   bc75 <put_vc1_mspel_mc21_c+0xc45>\n    b9d5:\tc7 84 24 b8 00 00 00 \tmovl   $0x0,0xb8(%rsp)\n    b9dc:\t00 00 00 00 \n    b9e0:\te9 80 02 00 00       \tjmpq   bc65 <put_vc1_mspel_mc21_c+0xc35>\n    b9e5:\tc7 84 24 b4 00 00 00 \tmovl   $0x0,0xb4(%rsp)\n    b9ec:\t00 00 00 00 \n    b9f0:\te9 38 02 00 00       \tjmpq   bc2d <put_vc1_mspel_mc21_c+0xbfd>\n    b9f5:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n    b9fc:\t48 63 d0             \tmovslq %eax,%rdx\n    b9ff:\t48 8b 84 24 e0 00 00 \tmov    0xe0(%rsp),%rax\n    ba06:\t00 \n    ba07:\t48 01 d0             \tadd    %rdx,%rax\n    ba0a:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n    ba0f:\tc7 44 24 64 01 00 00 \tmovl   $0x1,0x64(%rsp)\n    ba16:\t00 \n    ba17:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n    ba1e:\t89 44 24 60          \tmov    %eax,0x60(%rsp)\n    ba22:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n    ba29:\t89 44 24 5c          \tmov    %eax,0x5c(%rsp)\n    ba2d:\t83 7c 24 60 03       \tcmpl   $0x3,0x60(%rsp)\n    ba32:\t0f 84 3a 01 00 00    \tje     bb72 <put_vc1_mspel_mc21_c+0xb42>\n    ba38:\t83 7c 24 60 03       \tcmpl   $0x3,0x60(%rsp)\n    ba3d:\t0f 8f a9 01 00 00    \tjg     bbec <put_vc1_mspel_mc21_c+0xbbc>\n    ba43:\t83 7c 24 60 02       \tcmpl   $0x2,0x60(%rsp)\n    ba48:\t0f 84 b3 00 00 00    \tje     bb01 <put_vc1_mspel_mc21_c+0xad1>\n    ba4e:\t83 7c 24 60 02       \tcmpl   $0x2,0x60(%rsp)\n    ba53:\t0f 8f 93 01 00 00    \tjg     bbec <put_vc1_mspel_mc21_c+0xbbc>\n    ba59:\t83 7c 24 60 00       \tcmpl   $0x0,0x60(%rsp)\n    ba5e:\t74 0c                \tje     ba6c <put_vc1_mspel_mc21_c+0xa3c>\n    ba60:\t83 7c 24 60 01       \tcmpl   $0x1,0x60(%rsp)\n    ba65:\t74 15                \tje     ba7c <put_vc1_mspel_mc21_c+0xa4c>\n    ba67:\te9 80 01 00 00       \tjmpq   bbec <put_vc1_mspel_mc21_c+0xbbc>\n    ba6c:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    ba71:\t0f b6 00             \tmovzbl (%rax),%eax\n    ba74:\t0f b6 c0             \tmovzbl %al,%eax\n    ba77:\te9 75 01 00 00       \tjmpq   bbf1 <put_vc1_mspel_mc21_c+0xbc1>\n    ba7c:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    ba80:\tf7 d8                \tneg    %eax\n    ba82:\t48 63 d0             \tmovslq %eax,%rdx\n    ba85:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    ba8a:\t48 01 d0             \tadd    %rdx,%rax\n    ba8d:\t0f b6 00             \tmovzbl (%rax),%eax\n    ba90:\t0f b6 d0             \tmovzbl %al,%edx\n    ba93:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    ba98:\t29 d0                \tsub    %edx,%eax\n    ba9a:\tc1 e0 02             \tshl    $0x2,%eax\n    ba9d:\t89 c2                \tmov    %eax,%edx\n    ba9f:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    baa4:\t0f b6 00             \tmovzbl (%rax),%eax\n    baa7:\t0f b6 c0             \tmovzbl %al,%eax\n    baaa:\t6b c0 35             \timul   $0x35,%eax,%eax\n    baad:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    bab0:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    bab4:\t48 63 d0             \tmovslq %eax,%rdx\n    bab7:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    babc:\t48 01 d0             \tadd    %rdx,%rax\n    babf:\t0f b6 00             \tmovzbl (%rax),%eax\n    bac2:\t0f b6 d0             \tmovzbl %al,%edx\n    bac5:\t89 d0                \tmov    %edx,%eax\n    bac7:\tc1 e0 03             \tshl    $0x3,%eax\n    baca:\t01 d0                \tadd    %edx,%eax\n    bacc:\t01 c0                \tadd    %eax,%eax\n    bace:\t01 c1                \tadd    %eax,%ecx\n    bad0:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    bad4:\t01 c0                \tadd    %eax,%eax\n    bad6:\t48 63 d0             \tmovslq %eax,%rdx\n    bad9:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    bade:\t48 01 d0             \tadd    %rdx,%rax\n    bae1:\t0f b6 00             \tmovzbl (%rax),%eax\n    bae4:\t0f b6 c0             \tmovzbl %al,%eax\n    bae7:\t89 c2                \tmov    %eax,%edx\n    bae9:\tc1 e0 02             \tshl    $0x2,%eax\n    baec:\t29 c2                \tsub    %eax,%edx\n    baee:\t89 d0                \tmov    %edx,%eax\n    baf0:\t01 c8                \tadd    %ecx,%eax\n    baf2:\t83 c0 20             \tadd    $0x20,%eax\n    baf5:\t2b 44 24 5c          \tsub    0x5c(%rsp),%eax\n    baf9:\tc1 f8 06             \tsar    $0x6,%eax\n    bafc:\te9 f0 00 00 00       \tjmpq   bbf1 <put_vc1_mspel_mc21_c+0xbc1>\n    bb01:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    bb06:\t0f b6 00             \tmovzbl (%rax),%eax\n    bb09:\t0f b6 d0             \tmovzbl %al,%edx\n    bb0c:\t89 d0                \tmov    %edx,%eax\n    bb0e:\tc1 e0 03             \tshl    $0x3,%eax\n    bb11:\t8d 0c 10             \tlea    (%rax,%rdx,1),%ecx\n    bb14:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    bb18:\tf7 d8                \tneg    %eax\n    bb1a:\t48 63 d0             \tmovslq %eax,%rdx\n    bb1d:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    bb22:\t48 01 d0             \tadd    %rdx,%rax\n    bb25:\t0f b6 00             \tmovzbl (%rax),%eax\n    bb28:\t0f b6 c0             \tmovzbl %al,%eax\n    bb2b:\t29 c1                \tsub    %eax,%ecx\n    bb2d:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    bb31:\t48 63 d0             \tmovslq %eax,%rdx\n    bb34:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    bb39:\t48 01 d0             \tadd    %rdx,%rax\n    bb3c:\t0f b6 00             \tmovzbl (%rax),%eax\n    bb3f:\t0f b6 d0             \tmovzbl %al,%edx\n    bb42:\t89 d0                \tmov    %edx,%eax\n    bb44:\tc1 e0 03             \tshl    $0x3,%eax\n    bb47:\t01 d0                \tadd    %edx,%eax\n    bb49:\t01 c1                \tadd    %eax,%ecx\n    bb4b:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    bb4f:\t01 c0                \tadd    %eax,%eax\n    bb51:\t48 63 d0             \tmovslq %eax,%rdx\n    bb54:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    bb59:\t48 01 d0             \tadd    %rdx,%rax\n    bb5c:\t0f b6 00             \tmovzbl (%rax),%eax\n    bb5f:\t0f b6 c0             \tmovzbl %al,%eax\n    bb62:\t29 c1                \tsub    %eax,%ecx\n    bb64:\t89 c8                \tmov    %ecx,%eax\n    bb66:\t83 c0 08             \tadd    $0x8,%eax\n    bb69:\t2b 44 24 5c          \tsub    0x5c(%rsp),%eax\n    bb6d:\tc1 f8 04             \tsar    $0x4,%eax\n    bb70:\teb 7f                \tjmp    bbf1 <put_vc1_mspel_mc21_c+0xbc1>\n    bb72:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    bb76:\tf7 d8                \tneg    %eax\n    bb78:\t48 63 d0             \tmovslq %eax,%rdx\n    bb7b:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    bb80:\t48 01 d0             \tadd    %rdx,%rax\n    bb83:\t0f b6 00             \tmovzbl (%rax),%eax\n    bb86:\t0f b6 c0             \tmovzbl %al,%eax\n    bb89:\t89 c2                \tmov    %eax,%edx\n    bb8b:\tc1 e0 02             \tshl    $0x2,%eax\n    bb8e:\t89 d1                \tmov    %edx,%ecx\n    bb90:\t29 c1                \tsub    %eax,%ecx\n    bb92:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    bb97:\t0f b6 00             \tmovzbl (%rax),%eax\n    bb9a:\t0f b6 d0             \tmovzbl %al,%edx\n    bb9d:\t89 d0                \tmov    %edx,%eax\n    bb9f:\tc1 e0 03             \tshl    $0x3,%eax\n    bba2:\t01 d0                \tadd    %edx,%eax\n    bba4:\t01 c0                \tadd    %eax,%eax\n    bba6:\t01 c1                \tadd    %eax,%ecx\n    bba8:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    bbac:\t48 63 d0             \tmovslq %eax,%rdx\n    bbaf:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    bbb4:\t48 01 d0             \tadd    %rdx,%rax\n    bbb7:\t0f b6 00             \tmovzbl (%rax),%eax\n    bbba:\t0f b6 c0             \tmovzbl %al,%eax\n    bbbd:\t6b c0 35             \timul   $0x35,%eax,%eax\n    bbc0:\t01 c1                \tadd    %eax,%ecx\n    bbc2:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    bbc6:\t01 c0                \tadd    %eax,%eax\n    bbc8:\t48 63 d0             \tmovslq %eax,%rdx\n    bbcb:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    bbd0:\t48 01 d0             \tadd    %rdx,%rax\n    bbd3:\t0f b6 00             \tmovzbl (%rax),%eax\n    bbd6:\t0f b6 c0             \tmovzbl %al,%eax\n    bbd9:\tc1 e0 02             \tshl    $0x2,%eax\n    bbdc:\t29 c1                \tsub    %eax,%ecx\n    bbde:\t89 c8                \tmov    %ecx,%eax\n    bbe0:\t83 c0 20             \tadd    $0x20,%eax\n    bbe3:\t2b 44 24 5c          \tsub    0x5c(%rsp),%eax\n    bbe7:\tc1 f8 06             \tsar    $0x6,%eax\n    bbea:\teb 05                \tjmp    bbf1 <put_vc1_mspel_mc21_c+0xbc1>\n    bbec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    bbf1:\t8b 94 24 b4 00 00 00 \tmov    0xb4(%rsp),%edx\n    bbf8:\t48 63 ca             \tmovslq %edx,%rcx\n    bbfb:\t48 8b 94 24 e8 00 00 \tmov    0xe8(%rsp),%rdx\n    bc02:\t00 \n    bc03:\t48 01 ca             \tadd    %rcx,%rdx\n    bc06:\t89 44 24 58          \tmov    %eax,0x58(%rsp)\n    bc0a:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    bc0e:\tb0 00                \tmov    $0x0,%al\n    bc10:\t85 c0                \ttest   %eax,%eax\n    bc12:\t74 0b                \tje     bc1f <put_vc1_mspel_mc21_c+0xbef>\n    bc14:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    bc18:\tf7 d8                \tneg    %eax\n    bc1a:\tc1 f8 1f             \tsar    $0x1f,%eax\n    bc1d:\teb 04                \tjmp    bc23 <put_vc1_mspel_mc21_c+0xbf3>\n    bc1f:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    bc23:\t88 02                \tmov    %al,(%rdx)\n    bc25:\t83 84 24 b4 00 00 00 \taddl   $0x1,0xb4(%rsp)\n    bc2c:\t01 \n    bc2d:\t83 bc 24 b4 00 00 00 \tcmpl   $0x7,0xb4(%rsp)\n    bc34:\t07 \n    bc35:\t0f 8e ba fd ff ff    \tjle    b9f5 <put_vc1_mspel_mc21_c+0x9c5>\n    bc3b:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    bc42:\t48 98                \tcltq   \n    bc44:\t48 01 84 24 e8 00 00 \tadd    %rax,0xe8(%rsp)\n    bc4b:\t00 \n    bc4c:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    bc53:\t48 98                \tcltq   \n    bc55:\t48 01 84 24 e0 00 00 \tadd    %rax,0xe0(%rsp)\n    bc5c:\t00 \n    bc5d:\t83 84 24 b8 00 00 00 \taddl   $0x1,0xb8(%rsp)\n    bc64:\t01 \n    bc65:\t83 bc 24 b8 00 00 00 \tcmpl   $0x7,0xb8(%rsp)\n    bc6c:\t07 \n    bc6d:\t0f 8e 72 fd ff ff    \tjle    b9e5 <put_vc1_mspel_mc21_c+0x9b5>\n    bc73:\teb 00                \tjmp    bc75 <put_vc1_mspel_mc21_c+0xc45>\n    bc75:\t90                   \tnop\n    bc76:\t48 81 c4 f0 00 00 00 \tadd    $0xf0,%rsp\n    bc7d:\tc3                   \tretq   ", "code_s": "_BYTE *__fastcall put_vc1_mspel_mc21_c(__int64 a1, __int64 a2, int a3, int a4) {\n  int v4;\n  _BYTE *result;\n  int v6;\n  int v7;\n  int v8;\n  char v9;\n  _BYTE v10[Number];\n  int v11;\n  int v12;\n  int v13;\n  char *v14;\n  int v15;\n  int v16;\n  unsigned __int8 *v17;\n  int i;\n  int j;\n  int v20;\n  char *v21;\n  int v22;\n  int v23;\n  int v24;\n  int v25;\n  int v26;\n  __int64 v27;\n  __int64 v28;\n  v28 = a1;\n  v27 = a2;\n  v26 = a3;\n  v25 = Number;\n  v24 = Number;\n  v23 = a4;\n  v22 = (shift_value_10143[Number] + shift_value_10143[Number]) >> Number;\n  v21 = &v9;\n  v20 = (Number << (v22 - Number)) + a4 - Number;\n  v27 = a2 - Number;\n  j = Number;\nLABEL_18:\n  if (j <= Number) {\n    for (i = Number;; ++i) {\n      if (i > Number) {\n        v27 += v26;\n        v21 += Number;\n        ++j;\n        goto LABEL_18;\n      }\n      v17 = (unsigned __int8 *)(i + v27);\n      v16 = v26;\n      v15 = v24;\n      if (v24 == Number) {\n        v4 = Number * v17[v16] + Number * *v17 - Number * v17[-v16] -\n             Number * v17[Number * v16];\n      } else {\n        if (v15 <= Number) {\n          if (v15 == Number) {\n            v4 = Number * v17[v16] + Number * *v17 - v17[-v16] -\n                 v17[Number * v16];\n            goto LABEL_15;\n          }\n          if (v15 <= Number) {\n            if (!v15) {\n              v4 = Number;\n              goto LABEL_15;\n            }\n            if (v15 == Number) {\n              v4 = Number * v17[v16] + Number * v17[-v16] + Number * *v17 -\n                   Number * v17[Number * v16];\n              goto LABEL_15;\n            }\n          }\n        }\n        v4 = Number;\n      }\n    LABEL_15:\n      *(_WORD *)&v21[Number * i] = (v4 + v20) >> v22;\n    }\n  }\n  v20 = Number - v23;\n  result = v10;\n  v21 = v10;\n  for (j = Number; j <= Number; ++j) {\n    for (i = Number; i <= Number; ++i) {\n      v14 = &v21[Number * i];\n      v13 = Number;\n      v12 = v25;\n      if (v25 == Number) {\n        v6 = Number * *(__int16 *)&v14[Number * v13] +\n             Number * *(__int16 *)&v14[Number * v13] +\n             Number * *(__int16 *)v14 - Number * *(__int16 *)&v14[Number * v13];\n      } else {\n        if (v12 <= Number) {\n          if (v12 == Number) {\n            v6 = Number * *(__int16 *)v14 - *(__int16 *)&v14[Number * v13] +\n                 Number * *(__int16 *)&v14[Number * v13] -\n                 *(__int16 *)&v14[Number * v13];\n            goto LABEL_33;\n          }\n          if (v12 <= Number) {\n            if (!v12) {\n              v6 = Number;\n              goto LABEL_33;\n            }\n            if (v12 == Number) {\n              v6 = Number * *(__int16 *)&v14[Number * v13] +\n                   Number * *(__int16 *)v14 +\n                   Number * *(__int16 *)&v14[Number * v13] -\n                   Number * *(__int16 *)&v14[Number * v13];\n              goto LABEL_33;\n            }\n          }\n        }\n        v6 = Number;\n      }\n    LABEL_33:\n      v11 = (v20 + v6) >> Number;\n      v7 = v11;\n      LOBYTE(v7) = Number;\n      if (v7)\n        v8 = -v11 >> Number;\n      else\n        LOBYTE(v8) = v11;\n      *(_BYTE *)(i + v28) = v8;\n    }\n    result = (_BYTE *)v26;\n    v28 += v26;\n    v21 += Number;\n  }\n  return result;\n}", "code_t": "void __cdecl put_vc1_mspel_mc21_c(uint8_t *<span class=\"supfact\">dst</span>,\n                                  const uint8_t *<span class=\"supfact\">src</span>,\n                                  int <span class=\"supfact\">stride</span>,\n                                  int <span class=\"supfact\">rnd</span>) {\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  char <span class=\"supfact\">v8</span>;\n  _BYTE <span class=\"supfact\">v9</span>[Number];\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  char *<span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>;\n  const uint8_t *<span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">v19</span>;\n  char *<span class=\"supfact\">v20</span>;\n  int <span class=\"supfact\">v21</span>;\n  int <span class=\"supfact\">v22</span>;\n  int <span class=\"supfact\">v23</span>;\n  int <span class=\"supfact\">v24</span>;\n  int <span class=\"supfact\">v25</span>;\n  const uint8_t *<span class=\"supfact\">v26</span>;\n  uint8_t *<span class=\"supfact\">v27</span>;\n  <span class=\"supfact\">v27</span> = <span class=\"supfact\">dst</span>;\n  <span class=\"supfact\">v26</span> = <span class=\"supfact\">src</span>;\n  <span class=\"supfact\">v25</span> = <span class=\"supfact\">stride</span>;\n  <span class=\"supfact\">v24</span> = Number;\n  <span class=\"supfact\">v23</span> = Number;\n  <span class=\"supfact\">v22</span> = <span class=\"supfact\">rnd</span>;\n  <span class=\"supfact\">v21</span> =\n      (shift_value_10143[Number] + shift_value_10143[Number]) >> Number;\n  <span class=\"supfact\">v20</span> = &<span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v19</span> =\n      (Number << (<span class=\"supfact\">v21</span> - Number)) + <span class=\"supfact\">rnd</span> - Number;\n  <span class=\"supfact\">v26</span> = <span class=\"supfact\">src</span> - Number;\n  <span class=\"supfact\">j</span> = Number;\nLABEL_18:\n  if (<span class=\"supfact\">j</span> <= Number) {\n    for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n      if (<span class=\"supfact\">i</span> > Number) {\n        <span class=\"supfact\">v26</span> += <span class=\"supfact\">v25</span>;\n        <span class=\"supfact\">v20</span> += Number;\n        ++<span class=\"supfact\">j</span>;\n        goto LABEL_18;\n      }\n      <span class=\"supfact\">v16</span> = &<span class=\"supfact\">v26</span>[<span class=\"supfact\">i</span>];\n      <span class=\"supfact\">v15</span> = <span class=\"supfact\">v25</span>;\n      <span class=\"supfact\">v14</span> = <span class=\"supfact\">v23</span>;\n      if (<span class=\"supfact\">v23</span> == Number) {\n        v4 = Number * <span class=\"supfact\">v16</span>[<span class=\"supfact\">v15</span>] +\n             Number * *<span class=\"supfact\">v16</span> -\n             Number * <span class=\"supfact\">v16</span>[-<span class=\"supfact\">v15</span>] -\n             Number * <span class=\"supfact\">v16</span>[Number * <span class=\"supfact\">v15</span>];\n      } else {\n        if (<span class=\"supfact\">v14</span> <= Number) {\n          if (<span class=\"supfact\">v14</span> == Number) {\n            v4 = Number * <span class=\"supfact\">v16</span>[<span class=\"supfact\">v15</span>] +\n                 Number * *<span class=\"supfact\">v16</span> -\n                 <span class=\"supfact\">v16</span>[-<span class=\"supfact\">v15</span>] -\n                 <span class=\"supfact\">v16</span>[Number * <span class=\"supfact\">v15</span>];\n            goto LABEL_15;\n          }\n          if (<span class=\"supfact\">v14</span> <= Number) {\n            if (!<span class=\"supfact\">v14</span>) {\n              v4 = Number;\n              goto LABEL_15;\n            }\n            if (<span class=\"supfact\">v14</span> == Number) {\n              v4 = Number * <span class=\"supfact\">v16</span>[<span class=\"supfact\">v15</span>] +\n                   Number * <span class=\"supfact\">v16</span>[-<span class=\"supfact\">v15</span>] +\n                   Number * *<span class=\"supfact\">v16</span> -\n                   Number * <span class=\"supfact\">v16</span>[Number * <span class=\"supfact\">v15</span>];\n              goto LABEL_15;\n            }\n          }\n        }\n        v4 = Number;\n      }\n    LABEL_15:\n      *(_WORD *)&<span class=\"supfact\">v20</span>[Number * <span class=\"supfact\">i</span>] =\n          (v4 + <span class=\"supfact\">v19</span>) >> <span class=\"supfact\">v21</span>;\n    }\n  }\n  <span class=\"supfact\">v19</span> = Number - <span class=\"supfact\">v22</span>;\n  <span class=\"supfact\">v20</span> = <span class=\"supfact\">v9</span>;\n  for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n       ++<span class=\"supfact\">j</span>) {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">v13</span> = &<span class=\"supfact\">v20</span>[Number * <span class=\"supfact\">i</span>];\n      <span class=\"supfact\">v12</span> = Number;\n      <span class=\"supfact\">v11</span> = <span class=\"supfact\">v24</span>;\n      if (<span class=\"supfact\">v24</span> == Number) {\n        v5 =\n            Number *\n                *(__int16 *)&<span class=\"supfact\">v13</span>[Number * <span class=\"supfact\">v12</span>] +\n            Number *\n                *(__int16 *)&<span class=\"supfact\">v13</span>[Number * <span class=\"supfact\">v12</span>] +\n            Number * *(__int16 *)<span class=\"supfact\">v13</span> -\n            Number *\n                *(__int16 *)&<span class=\"supfact\">v13</span>[Number * <span class=\"supfact\">v12</span>];\n      } else {\n        if (<span class=\"supfact\">v11</span> <= Number) {\n          if (<span class=\"supfact\">v11</span> == Number) {\n            v5 =\n                Number * *(__int16 *)<span class=\"supfact\">v13</span> -\n                *(__int16 *)&<span class=\"supfact\">v13</span>[Number * <span class=\"supfact\">v12</span>] +\n                Number * *(__int16 *)&<span class=\"supfact\">v13</span>[Number *\n                                                          <span class=\"supfact\">v12</span>] -\n                *(__int16 *)&<span class=\"supfact\">v13</span>[Number * <span class=\"supfact\">v12</span>];\n            goto LABEL_33;\n          }\n          if (<span class=\"supfact\">v11</span> <= Number) {\n            if (!<span class=\"supfact\">v11</span>) {\n              v5 = Number;\n              goto LABEL_33;\n            }\n            if (<span class=\"supfact\">v11</span> == Number) {\n              v5 = Number *\n                       *(__int16 *)&<span class=\"supfact\">v13</span>[Number *\n                                                        <span class=\"supfact\">v12</span>] +\n                   Number * *(__int16 *)<span class=\"supfact\">v13</span> +\n                   Number *\n                       *(__int16 *)&<span class=\"supfact\">v13</span>[Number *\n                                                        <span class=\"supfact\">v12</span>] -\n                   Number *\n                       *(__int16 *)&<span class=\"supfact\">v13</span>[Number *\n                                                        <span class=\"supfact\">v12</span>];\n              goto LABEL_33;\n            }\n          }\n        }\n        v5 = Number;\n      }\n    LABEL_33:\n      <span class=\"supfact\">v10</span> = (<span class=\"supfact\">v19</span> + v5) >> Number;\n      v6 = <span class=\"supfact\">v10</span>;\n      LOBYTE(v6) = Number;\n      if (v6)\n        v7 = -<span class=\"supfact\">v10</span> >> Number;\n      else\n        LOBYTE(v7) = <span class=\"supfact\">v10</span>;\n      <span class=\"supfact\">v27</span>[<span class=\"supfact\">i</span>] = v7;\n    }\n    <span class=\"supfact\">v27</span> += <span class=\"supfact\">v25</span>;\n    <span class=\"supfact\">v20</span> += Number;\n  }\n}", "var": [{"name": "a1", "type": "uint8_t *", "pred_name": "dst", "ref_name": "dst", "ref_type": "uint8_t *"}, {"name": "a2", "type": "const uint8_t *", "pred_name": "src", "ref_name": "src", "ref_type": "const uint8_t *"}, {"name": "a3", "type": "int", "pred_name": "stride", "ref_name": "stride", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "rnd", "ref_name": "rnd", "ref_type": "int"}, {"name": "v9", "type": "char", "pred_name": "v9", "ref_name": "v8", "ref_type": "char"}, {"name": "v10", "type": "_BYTE[6]", "pred_name": "v10", "ref_name": "v9", "ref_type": "_BYTE[6]"}, {"name": "v11", "type": "int", "pred_name": "v11", "ref_name": "v10", "ref_type": "int"}, {"name": "v12", "type": "int", "pred_name": "v12", "ref_name": "v11", "ref_type": "int"}, {"name": "v13", "type": "int", "pred_name": "v13", "ref_name": "v12", "ref_type": "int"}, {"name": "v14", "type": "char *", "pred_name": "v14", "ref_name": "v13", "ref_type": "char *"}, {"name": "v15", "type": "int", "pred_name": "v15", "ref_name": "v14", "ref_type": "int"}, {"name": "v16", "type": "int", "pred_name": "v16", "ref_name": "v15", "ref_type": "int"}, {"name": "v17", "type": "const uint8_t *", "pred_name": "v17", "ref_name": "v16", "ref_type": "const uint8_t *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "j", "ref_name": "j", "ref_type": "int"}, {"name": "v20", "type": "int", "pred_name": "v19", "ref_name": "v19", "ref_type": "int"}, {"name": "v21", "type": "const uint8_t *", "pred_name": "v20", "ref_name": "v20", "ref_type": "char *"}, {"name": "v22", "type": "int", "pred_name": "v21", "ref_name": "v21", "ref_type": "int"}, {"name": "v23", "type": "int", "pred_name": "v22", "ref_name": "v22", "ref_type": "int"}, {"name": "v24", "type": "int", "pred_name": "v23", "ref_name": "v23", "ref_type": "int"}, {"name": "v25", "type": "int", "pred_name": "v24", "ref_name": "v24", "ref_type": "int"}, {"name": "v26", "type": "int", "pred_name": "v25", "ref_name": "v25", "ref_type": "int"}, {"name": "v27", "type": "ptrdiff_t", "pred_name": "v26", "ref_name": "v26", "ref_type": "const uint8_t *"}, {"name": "v28", "type": "const uint8_t *", "pred_name": "v27", "ref_name": "v27", "ref_type": "uint8_t *"}], "body_in_train": false}, {"repo_owner": "rofl0r", "repo_name": "agsutils", "path": "rofl0r/agsutils/f31a77ae49e423a419e736ca78645b46750de045054c0d2c81e3cdfdfc19d08f", "path_in_repo": "rofl0r/agsutils//agssemble", "objdump": "0000000000405d25 <ByteArray_readInt>:\n  405d25:\t55                   \tpush   %rbp\n  405d26:\t48 89 e5             \tmov    %rsp,%rbp\n  405d29:\t48 83 ec 20          \tsub    $0x20,%rsp\n  405d2d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  405d31:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405d35:\t4c 8b 40 40          \tmov    0x40(%rax),%r8\n  405d39:\t48 8d 4d fc          \tlea    -0x4(%rbp),%rcx\n  405d3d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405d41:\tba 04 00 00 00       \tmov    $0x4,%edx\n  405d46:\t48 89 ce             \tmov    %rcx,%rsi\n  405d49:\t48 89 c7             \tmov    %rax,%rdi\n  405d4c:\t41 ff d0             \tcallq  *%r8\n  405d4f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405d53:\t8b 50 08             \tmov    0x8(%rax),%edx\n  405d56:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405d5a:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  405d5d:\t39 c2                \tcmp    %eax,%edx\n  405d5f:\t74 2d                \tje     405d8e <ByteArray_readInt+0x69>\n  405d61:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405d64:\tc1 e8 18             \tshr    $0x18,%eax\n  405d67:\t89 c2                \tmov    %eax,%edx\n  405d69:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405d6c:\tc1 e8 08             \tshr    $0x8,%eax\n  405d6f:\t25 00 ff 00 00       \tand    $0xff00,%eax\n  405d74:\t09 c2                \tor     %eax,%edx\n  405d76:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405d79:\tc1 e0 08             \tshl    $0x8,%eax\n  405d7c:\t25 00 00 ff 00       \tand    $0xff0000,%eax\n  405d81:\t09 c2                \tor     %eax,%edx\n  405d83:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405d86:\tc1 e0 18             \tshl    $0x18,%eax\n  405d89:\t09 d0                \tor     %edx,%eax\n  405d8b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  405d8e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  405d91:\tc9                   \tleaveq \n  405d92:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ByteArray_readInt(__int64 a1) {\n  unsigned int v2;\n  (*(void(__fastcall **)(__int64, unsigned int *, __int64))(a1 + Number))(\n      a1, &v2, Number L);\n  if (*(_DWORD *)(a1 + Number) != *(_DWORD *)(a1 + Number))\n    v2 = (v2 << Number) & Number | (v2 >> Number) & Number | HIBYTE(v2) |\n         (v2 << Number);\n  return v2;\n}", "code_t": "int __cdecl ByteArray_readInt(ByteArray *<span class=\"supfact\">self</span>) {\n  ByteArray_readInt $7DAA7ACFC0AD0868D6E6D59613B180C6 <span class=\"supfact\">buf</span>;\n  <span class=\"supfact\">self</span>->readMultiByte(<span class=\"supfact\">self</span>,\n                                      (char *)&<span class=\"supfact\">buf</span>, Number L);\n  if (<span class=\"supfact\">self</span>->endian != <span class=\"supfact\">self</span>->sys_endian)\n    <span class=\"supfact\">buf</span>.intval =\n        (<span class=\"supfact\">buf</span>.intval << Number) & Number |\n        (<span class=\"supfact\">buf</span>.intval >> Number) & Number |\n        <span class=\"supfact\">buf</span>.charval[Number] |\n        (<span class=\"supfact\">buf</span>.intval << Number);\n  return <span class=\"supfact\">buf</span>.intval;\n}", "var": [{"name": "a1", "type": "cups_array_t *", "pred_name": "a", "ref_name": "self", "ref_type": "ByteArray *"}, {"name": "v2", "type": "int", "pred_name": "i", "ref_name": "buf", "ref_type": "void"}], "body_in_train": false}, {"repo_owner": "avble", "repo_name": "pjproject-2.4", "path": "avble/pjproject-2.4/1b43c36d3299c9c1fba0434f9663dbf733414ea3e3d34bb281c472923461750b", "path_in_repo": "avble/pjproject-2.4/pjmedia/build/output/pjmedia-audiodev-x86_64-unknown-linux-gnu/pa_dev.o", "objdump": "0000000000000f24 <create_rec_stream>:\n     f24:\t55                   \tpush   %rbp\n     f25:\t48 89 e5             \tmov    %rsp,%rbp\n     f28:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n     f2f:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n     f33:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n     f37:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n     f3b:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n     f3f:\t4c 89 85 78 ff ff ff \tmov    %r8,-0x88(%rbp)\n     f46:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     f4d:\t00 \n     f4e:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     f55:\t00 \n     f56:\t48 83 7d 88 00       \tcmpq   $0x0,-0x78(%rbp)\n     f5b:\t74 0a                \tje     f67 <create_rec_stream+0x43>\n     f5d:\t48 83 bd 78 ff ff ff \tcmpq   $0x0,-0x88(%rbp)\n     f64:\t00 \n     f65:\t75 34                \tjne    f9b <create_rec_stream+0x77>\n     f67:\t48 83 7d 88 00       \tcmpq   $0x0,-0x78(%rbp)\n     f6c:\t74 0a                \tje     f78 <create_rec_stream+0x54>\n     f6e:\t48 83 bd 78 ff ff ff \tcmpq   $0x0,-0x88(%rbp)\n     f75:\t00 \n     f76:\t75 19                \tjne    f91 <create_rec_stream+0x6d>\n     f78:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     f7d:\tba c7 02 00 00       \tmov    $0x2c7,%edx\n     f82:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f87:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     f8c:\te8 00 00 00 00       \tcallq  f91 <create_rec_stream+0x6d>\n     f91:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n     f96:\te9 a9 03 00 00       \tjmpq   1344 <create_rec_stream+0x420>\n     f9b:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n     f9f:\t8b 40 04             \tmov    0x4(%rax),%eax\n     fa2:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     fa5:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     fa9:\t79 21                \tjns    fcc <create_rec_stream+0xa8>\n     fab:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n     faf:\t8b 40 10             \tmov    0x10(%rax),%eax\n     fb2:\t89 c7                \tmov    %eax,%edi\n     fb4:\te8 05 fe ff ff       \tcallq  dbe <pa_get_default_input_dev>\n     fb9:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     fbc:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     fc0:\t79 0a                \tjns    fcc <create_rec_stream+0xa8>\n     fc2:\tb8 a6 68 06 00       \tmov    $0x668a6,%eax\n     fc7:\te9 78 03 00 00       \tjmpq   1344 <create_rec_stream+0x420>\n     fcc:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     fcf:\t89 c7                \tmov    %eax,%edi\n     fd1:\te8 00 00 00 00       \tcallq  fd6 <create_rec_stream+0xb2>\n     fd6:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     fda:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     fdf:\t75 0a                \tjne    feb <create_rec_stream+0xc7>\n     fe1:\tb8 a4 68 06 00       \tmov    $0x668a4,%eax\n     fe6:\te9 59 03 00 00       \tjmpq   1344 <create_rec_stream+0x420>\n     feb:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n     fef:\t8b 40 18             \tmov    0x18(%rax),%eax\n     ff2:\t83 f8 08             \tcmp    $0x8,%eax\n     ff5:\t75 09                \tjne    1000 <create_rec_stream+0xdc>\n     ff7:\tc7 45 f8 20 00 00 00 \tmovl   $0x20,-0x8(%rbp)\n     ffe:\teb 34                \tjmp    1034 <create_rec_stream+0x110>\n    1000:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    1004:\t8b 40 18             \tmov    0x18(%rax),%eax\n    1007:\t83 f8 10             \tcmp    $0x10,%eax\n    100a:\t75 09                \tjne    1015 <create_rec_stream+0xf1>\n    100c:\tc7 45 f8 08 00 00 00 \tmovl   $0x8,-0x8(%rbp)\n    1013:\teb 1f                \tjmp    1034 <create_rec_stream+0x110>\n    1015:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    1019:\t8b 40 18             \tmov    0x18(%rax),%eax\n    101c:\t83 f8 20             \tcmp    $0x20,%eax\n    101f:\t75 09                \tjne    102a <create_rec_stream+0x106>\n    1021:\tc7 45 f8 02 00 00 00 \tmovl   $0x2,-0x8(%rbp)\n    1028:\teb 0a                \tjmp    1034 <create_rec_stream+0x110>\n    102a:\tb8 ab 68 06 00       \tmov    $0x668ab,%eax\n    102f:\te9 10 03 00 00       \tjmpq   1344 <create_rec_stream+0x420>\n    1034:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1038:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    103c:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1042:\tb9 00 04 00 00       \tmov    $0x400,%ecx\n    1047:\tba 00 04 00 00       \tmov    $0x400,%edx\n    104c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1051:\t48 89 c7             \tmov    %rax,%rdi\n    1054:\te8 00 00 00 00       \tcallq  1059 <create_rec_stream+0x135>\n    1059:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    105d:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    1062:\t75 0a                \tjne    106e <create_rec_stream+0x14a>\n    1064:\tb8 77 11 01 00       \tmov    $0x11177,%eax\n    1069:\te9 d6 02 00 00       \tjmpq   1344 <create_rec_stream+0x420>\n    106e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1072:\tbe d0 04 00 00       \tmov    $0x4d0,%esi\n    1077:\t48 89 c7             \tmov    %rax,%rdi\n    107a:\te8 81 ef ff ff       \tcallq  0 <pj_pool_zalloc>\n    107f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1083:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1087:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    108b:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    108f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1093:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    1097:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    109b:\t48 8d 48 18          \tlea    0x18(%rax),%rcx\n    109f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    10a3:\t48 89 ce             \tmov    %rcx,%rsi\n    10a6:\t48 89 c7             \tmov    %rax,%rdi\n    10a9:\te8 00 00 00 00       \tcallq  10ae <create_rec_stream+0x18a>\n    10ae:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    10b2:\tc7 40 28 01 00 00 00 \tmovl   $0x1,0x28(%rax)\n    10b9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    10bd:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    10c0:\t89 50 30             \tmov    %edx,0x30(%rax)\n    10c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    10c7:\tc7 40 2c ff ff ff ff \tmovl   $0xffffffff,0x2c(%rax)\n    10ce:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    10d2:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n    10d6:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n    10da:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    10de:\t8b 50 0c             \tmov    0xc(%rax),%edx\n    10e1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    10e5:\t89 50 38             \tmov    %edx,0x38(%rax)\n    10e8:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    10ec:\t8b 50 14             \tmov    0x14(%rax),%edx\n    10ef:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    10f3:\t89 50 3c             \tmov    %edx,0x3c(%rax)\n    10f6:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    10fa:\t8b 40 18             \tmov    0x18(%rax),%eax\n    10fd:\tc1 e8 03             \tshr    $0x3,%eax\n    1100:\t89 c2                \tmov    %eax,%edx\n    1102:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1106:\t89 50 34             \tmov    %edx,0x34(%rax)\n    1109:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    110d:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1110:\t89 c2                \tmov    %eax,%edx\n    1112:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1116:\t89 50 40             \tmov    %edx,0x40(%rax)\n    1119:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    111d:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    1121:\t48 89 50 60          \tmov    %rdx,0x60(%rax)\n    1125:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1129:\t8b 50 3c             \tmov    0x3c(%rax),%edx\n    112c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1130:\t8b 40 34             \tmov    0x34(%rax),%eax\n    1133:\t0f af c2             \timul   %edx,%eax\n    1136:\t89 c2                \tmov    %eax,%edx\n    1138:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    113c:\t48 89 d6             \tmov    %rdx,%rsi\n    113f:\t48 89 c7             \tmov    %rax,%rdi\n    1142:\te8 00 00 00 00       \tcallq  1147 <create_rec_stream+0x223>\n    1147:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    114b:\t48 89 82 b0 04 00 00 \tmov    %rax,0x4b0(%rdx)\n    1152:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1156:\tc7 80 b8 04 00 00 00 \tmovl   $0x0,0x4b8(%rax)\n    115d:\t00 00 00 \n    1160:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1164:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    1169:\t48 89 c7             \tmov    %rax,%rdi\n    116c:\te8 b6 ee ff ff       \tcallq  27 <pj_bzero>\n    1171:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1174:\t89 45 a0             \tmov    %eax,-0x60(%rbp)\n    1177:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    117b:\t8b 40 10             \tmov    0x10(%rax),%eax\n    117e:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n    1181:\t48 c7 45 b8 00 00 00 \tmovq   $0x0,-0x48(%rbp)\n    1188:\t00 \n    1189:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    118c:\t48 98                \tcltq   \n    118e:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    1192:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    1196:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    1199:\t83 e0 02             \tand    $0x2,%eax\n    119c:\t85 c0                \ttest   %eax,%eax\n    119e:\t74 3d                \tje     11dd <create_rec_stream+0x2b9>\n    11a0:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    11a4:\t8b 40 44             \tmov    0x44(%rax),%eax\n    11a7:\t89 c0                \tmov    %eax,%eax\n    11a9:\t48 85 c0             \ttest   %rax,%rax\n    11ac:\t78 07                \tjs     11b5 <create_rec_stream+0x291>\n    11ae:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n    11b3:\teb 15                \tjmp    11ca <create_rec_stream+0x2a6>\n    11b5:\t48 89 c2             \tmov    %rax,%rdx\n    11b8:\t48 d1 ea             \tshr    %rdx\n    11bb:\t83 e0 01             \tand    $0x1,%eax\n    11be:\t48 09 c2             \tor     %rax,%rdx\n    11c1:\tf2 48 0f 2a c2       \tcvtsi2sd %rdx,%xmm0\n    11c6:\tf2 0f 58 c0          \taddsd  %xmm0,%xmm0\n    11ca:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 11d2 <create_rec_stream+0x2ae>\n    11d1:\t00 \n    11d2:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    11d6:\tf2 0f 11 45 b0       \tmovsd  %xmm0,-0x50(%rbp)\n    11db:\teb 0d                \tjmp    11ea <create_rec_stream+0x2c6>\n    11dd:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 11e5 <create_rec_stream+0x2c1>\n    11e4:\t00 \n    11e5:\tf2 0f 11 45 b0       \tmovsd  %xmm0,-0x50(%rbp)\n    11ea:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    11ee:\t8b 40 10             \tmov    0x10(%rax),%eax\n    11f1:\t89 c7                \tmov    %eax,%edi\n    11f3:\te8 00 00 00 00       \tcallq  11f8 <create_rec_stream+0x2d4>\n    11f8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    11fc:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    1200:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1203:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    1207:\t8b 4a 10             \tmov    0x10(%rdx),%ecx\n    120a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    120f:\tf7 f1                \tdiv    %ecx\n    1211:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    1214:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n    1217:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    121b:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    121e:\t89 c0                \tmov    %eax,%eax\n    1220:\t48 85 c0             \ttest   %rax,%rax\n    1223:\t78 07                \tjs     122c <create_rec_stream+0x308>\n    1225:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n    122a:\teb 15                \tjmp    1241 <create_rec_stream+0x31d>\n    122c:\t48 89 c2             \tmov    %rax,%rdx\n    122f:\t48 d1 ea             \tshr    %rdx\n    1232:\t83 e0 01             \tand    $0x1,%eax\n    1235:\t48 09 c2             \tor     %rax,%rdx\n    1238:\tf2 48 0f 2a c2       \tcvtsi2sd %rdx,%xmm0\n    123d:\tf2 0f 58 c0          \taddsd  %xmm0,%xmm0\n    1241:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1245:\t48 8d 78 48          \tlea    0x48(%rax),%rdi\n    1249:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    124d:\t48 83 ec 08          \tsub    $0x8,%rsp\n    1251:\tff 75 d8             \tpushq  -0x28(%rbp)\n    1254:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    125a:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    1260:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1265:\t48 89 c6             \tmov    %rax,%rsi\n    1268:\te8 00 00 00 00       \tcallq  126d <create_rec_stream+0x349>\n    126d:\t48 83 c4 10          \tadd    $0x10,%rsp\n    1271:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    1274:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n    1278:\t74 19                \tje     1293 <create_rec_stream+0x36f>\n    127a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    127e:\t48 89 c7             \tmov    %rax,%rdi\n    1281:\te8 00 00 00 00       \tcallq  1286 <create_rec_stream+0x362>\n    1286:\tb8 df 04 07 00       \tmov    $0x704df,%eax\n    128b:\t2b 45 d0             \tsub    -0x30(%rbp),%eax\n    128e:\te9 b1 00 00 00       \tjmpq   1344 <create_rec_stream+0x420>\n    1293:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1297:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    129b:\t48 89 c7             \tmov    %rax,%rdi\n    129e:\te8 00 00 00 00       \tcallq  12a3 <create_rec_stream+0x37f>\n    12a3:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    12a7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    12ab:\tf2 0f 10 40 18       \tmovsd  0x18(%rax),%xmm0\n    12b0:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n    12b5:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n    12b8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    12bc:\tf2 0f 10 48 08       \tmovsd  0x8(%rax),%xmm1\n    12c1:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 12c9 <create_rec_stream+0x3a5>\n    12c8:\t00 \n    12c9:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n    12cd:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n    12d2:\t89 45 c0             \tmov    %eax,-0x40(%rbp)\n    12d5:\te8 00 00 00 00       \tcallq  12da <create_rec_stream+0x3b6>\n    12da:\t83 f8 04             \tcmp    $0x4,%eax\n    12dd:\t7e 52                \tjle    1331 <create_rec_stream+0x40d>\n    12df:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    12e3:\t8b 70 14             \tmov    0x14(%rax),%esi\n    12e6:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    12ea:\t8b 48 18             \tmov    0x18(%rax),%ecx\n    12ed:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    12f1:\t44 8b 48 10          \tmov    0x10(%rax),%r9d\n    12f5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12f9:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    12fd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1301:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1305:\t44 8b 45 c4          \tmov    -0x3c(%rbp),%r8d\n    1309:\t48 83 ec 08          \tsub    $0x8,%rsp\n    130d:\t8b 7d c0             \tmov    -0x40(%rbp),%edi\n    1310:\t57                   \tpush   %rdi\n    1311:\t56                   \tpush   %rsi\n    1312:\t51                   \tpush   %rcx\n    1313:\t48 89 d1             \tmov    %rdx,%rcx\n    1316:\t48 89 c2             \tmov    %rax,%rdx\n    1319:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    131e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1323:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1328:\te8 00 00 00 00       \tcallq  132d <create_rec_stream+0x409>\n    132d:\t48 83 c4 20          \tadd    $0x20,%rsp\n    1331:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1335:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    133c:\t48 89 10             \tmov    %rdx,(%rax)\n    133f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1344:\tc9                   \tleaveq \n    1345:\tc3                   \tretq   ", "code_s": "__int64 __fastcall create_rec_stream(__int64 a1, _DWORD *a2, __int64 a3,\n                                     __int64 a4, _QWORD *a5) {\n  __int64 result;\n  __int64 v6;\n  int v10[Number];\n  __int64 v11;\n  double v12;\n  __int64 v13;\n  unsigned int v14;\n  unsigned int v15;\n  __int64 v16;\n  int v17;\n  unsigned int v18;\n  __int64 v19;\n  __int64 v20;\n  __int64 v21;\n  __int64 v22;\n  int v23;\n  int v24;\n  v22 = Number L;\n  v21 = Number L;\n  if (a3 && a5) {\n    v24 = a2[Number];\n    if (v24 < Number) {\n      v24 = pa_get_default_input_dev(a2[Number]);\n      if (v24 < Number)\n        return Number L;\n    }\n    v22 = Pa_GetDeviceInfo((unsigned int)v24);\n    if (!v22)\n      return Number L;\n    switch (a2[Number]) {\n    case Number:\n      v23 = Number;\n      break;\n    case Number:\n      v23 = Number;\n      break;\n    case Number:\n      v23 = Number;\n      break;\n    default:\n      return Number L;\n    }\n    v20 = pj_pool_create(*(_QWORD *)(a1 + Number), String, Number L, Number L,\n                         Number L);\n    if (v20) {\n      v19 = pj_pool_zalloc(v20, Number L);\n      *(_QWORD *)(v19 + Number) = v20;\n      pj_strdup2_with_null(v20, v19 + Number, *(_QWORD *)(v22 + Number));\n      *(_DWORD *)(v19 + Number) = Number;\n      *(_DWORD *)(v19 + Number) = v24;\n      *(_DWORD *)(v19 + Number) = Number;\n      *(_QWORD *)(v19 + Number) = a4;\n      *(_DWORD *)(v19 + Number) = a2[Number];\n      *(_DWORD *)(v19 + Number) = a2[Number];\n      *(_DWORD *)(v19 + Number) = a2[Number] >> Number;\n      *(_DWORD *)(v19 + Number) = a2[Number];\n      *(_QWORD *)(v19 + Number) = a3;\n      *(_QWORD *)(v19 + Number) =\n          pj_pool_alloc(v20, (unsigned int)(*(_DWORD *)(v19 + Number) *\n                                            *(_DWORD *)(v19 + Number)));\n      *(_DWORD *)(v19 + Number) = Number;\n      pj_bzero(v10, Number);\n      v10[Number] = v24;\n      v10[Number] = a2[Number];\n      v13 = Number L;\n      v11 = v23;\n      if ((a2[Number] & Number) != Number)\n        v12 = (double)(int)a2[Number] / Number;\n      else\n        v12 = Number;\n      v21 = Pa_GetHostApiInfo(*(unsigned int *)(v22 + Number));\n      v18 = a2[Number] / a2[Number];\n      v17 = Pa_OpenStream(v19 + Number, v10, Number L, v18, Number L,\n                          PaRecorderCallback, (double)(int)a2[Number], v19);\n      if (v17) {\n        pj_pool_release(v20);\n        result = (unsigned int)(Number - v17);\n      } else {\n        v6 = *(_QWORD *)(v19 + Number);\n        v16 = Pa_GetStreamInfo(v6);\n        v15 = (int)*(double *)(v16 + Number);\n        v14 = (int)(Number * *(double *)(v16 + Number));\n        if ((int)pj_log_get_level(v6) > Number)\n          pj_log_5(String, String, *(const char **)(v22 + Number),\n                   *(const char **)(v21 + Number), v15,\n                   (unsigned int)a2[Number], (unsigned int)a2[Number],\n                   (unsigned int)a2[Number], v14);\n        *a5 = v19;\n        result = Number L;\n      }\n    } else {\n      result = Number L;\n    }\n  } else {\n    if (!a3 || !a5)\n      _assert_fail(String, String, Number, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl create_rec_stream(\n    pa_aud_factory *<span class=\"supfact\">pa</span>,\n    const pjmedia_aud_param_0 *<span class=\"supfact\">param</span>,\n    pjmedia_aud_rec_cb <span class=\"supfact\">rec_cb</span>, void *<span class=\"supfact\">user_data</span>,\n    pjmedia_aud_stream_0 **<span class=\"supfact\">p_snd_strm</span>) {\n  pj_status_t <span class=\"supfact\">result</span>;\n  PaStream *v6;\n  PaStreamParameters_0 <span class=\"supfact\">inputParam</span>;\n  unsigned int <span class=\"supfact\">paLatency</span>;\n  unsigned int <span class=\"supfact\">paRate</span>;\n  const PaStreamInfo_0 *<span class=\"supfact\">paSI</span>;\n  PaError <span class=\"supfact\">err</span>;\n  unsigned int <span class=\"supfact\">paFrames</span>;\n  pa_aud_stream *<span class=\"supfact\">stream</span>;\n  pj_pool_t_0 *<span class=\"supfact\">pool</span>;\n  const PaHostApiInfo_0 *<span class=\"supfact\">paHostApiInfo</span>;\n  const PaDeviceInfo_0 *<span class=\"supfact\">paDevInfo</span>;\n  int <span class=\"supfact\">sampleFormat</span>;\n  pjmedia_aud_dev_index <span class=\"supfact\">rec_id</span>;\n  <span class=\"supfact\">paDevInfo</span> = Number L;\n  <span class=\"supfact\">paHostApiInfo</span> = Number L;\n  if (<span class=\"supfact\">rec_cb</span> && <span class=\"supfact\">p_snd_strm</span>) {\n    <span class=\"supfact\">rec_id</span> = <span class=\"supfact\">param</span>-><span class=\"supfact\">rec_id</span>;\n    if (<span class=\"supfact\">rec_id</span> < Number) {\n      <span class=\"supfact\">rec_id</span> =\n          pa_get_default_input_dev(<span class=\"supfact\">param</span>->channel_count);\n      if (<span class=\"supfact\">rec_id</span> < Number)\n        return Number;\n    }\n    <span class=\"supfact\">paDevInfo</span> = (const PaDeviceInfo_0 *)Pa_GetDeviceInfo(\n        (unsigned int)<span class=\"supfact\">rec_id</span>);\n    if (!<span class=\"supfact\">paDevInfo</span>)\n      return Number;\n    switch (<span class=\"supfact\">param</span>->bits_per_sample) {\n    case Number:\n      <span class=\"supfact\">sampleFormat</span> = Number;\n      break;\n    case Number:\n      <span class=\"supfact\">sampleFormat</span> = Number;\n      break;\n    case Number:\n      <span class=\"supfact\">sampleFormat</span> = Number;\n      break;\n    default:\n      return Number;\n    }\n    <span class=\"supfact\">pool</span> = (pj_pool_t_0 *)pj_pool_create(\n        <span class=\"supfact\">pa</span>->pf, String, Number L, Number L, Number L);\n    if (<span class=\"supfact\">pool</span>) {\n      <span class=\"supfact\">stream</span> =\n          (pa_aud_stream *)pj_pool_zalloc(<span class=\"supfact\">pool</span>, Number);\n      <span class=\"supfact\">stream</span>-><span class=\"supfact\">pool</span> = <span class=\"supfact\">pool</span>;\n      pj_strdup2_with_null(<span class=\"supfact\">pool</span>, &<span class=\"supfact\">stream</span>->name,\n                           <span class=\"supfact\">paDevInfo</span>->name);\n      <span class=\"supfact\">stream</span>->dir = PJMEDIA_DIR_ENCODING;\n      <span class=\"supfact\">stream</span>-><span class=\"supfact\">rec_id</span> = <span class=\"supfact\">rec_id</span>;\n      <span class=\"supfact\">stream</span>->play_id = Number;\n      <span class=\"supfact\">stream</span>-><span class=\"supfact\">user_data</span> =\n          <span class=\"supfact\">user_data</span>;\n      <span class=\"supfact\">stream</span>->samples_per_sec =\n          <span class=\"supfact\">param</span>->clock_rate;\n      <span class=\"supfact\">stream</span>->samples_per_frame =\n          <span class=\"supfact\">param</span>->samples_per_frame;\n      <span class=\"supfact\">stream</span>->bytes_per_sample =\n          <span class=\"supfact\">param</span>->bits_per_sample >> Number;\n      <span class=\"supfact\">stream</span>->channel_count =\n          <span class=\"supfact\">param</span>->channel_count;\n      <span class=\"supfact\">stream</span>-><span class=\"supfact\">rec_cb</span> = <span class=\"supfact\">rec_cb</span>;\n      <span class=\"supfact\">stream</span>->rec_buf = (pj_int16_t *)pj_pool_alloc(\n          <span class=\"supfact\">pool</span>, <span class=\"supfact\">stream</span>->samples_per_frame *\n                                    <span class=\"supfact\">stream</span>->bytes_per_sample);\n      <span class=\"supfact\">stream</span>->rec_buf_count = Number;\n      pj_bzero(&<span class=\"supfact\">inputParam</span>, Number);\n      <span class=\"supfact\">inputParam</span>.device = <span class=\"supfact\">rec_id</span>;\n      <span class=\"supfact\">inputParam</span>.channelCount =\n          <span class=\"supfact\">param</span>->channel_count;\n      <span class=\"supfact\">inputParam</span>.hostApiSpecificStreamInfo = Number L;\n      <span class=\"supfact\">inputParam</span>.<span class=\"supfact\">sampleFormat</span> =\n          <span class=\"supfact\">sampleFormat</span>;\n      if ((<span class=\"supfact\">param</span>->flags & Number) != Number)\n        <span class=\"supfact\">inputParam</span>.suggestedLatency =\n            (double)(int)<span class=\"supfact\">param</span>->input_latency_ms / Number;\n      else\n        <span class=\"supfact\">inputParam</span>.suggestedLatency = Number;\n      <span class=\"supfact\">paHostApiInfo</span> =\n          (const PaHostApiInfo_0 *)Pa_GetHostApiInfo(\n              (unsigned int)<span class=\"supfact\">paDevInfo</span>->hostApi);\n      <span class=\"supfact\">paFrames</span> = <span class=\"supfact\">param</span>->samples_per_frame /\n                                 <span class=\"supfact\">param</span>->channel_count;\n      <span class=\"supfact\">err</span> = Pa_OpenStream(\n          &<span class=\"supfact\">stream</span>->rec_strm, &<span class=\"supfact\">inputParam</span>,\n          Number L, <span class=\"supfact\">paFrames</span>, Number L, PaRecorderCallback,\n          (double)(int)<span class=\"supfact\">param</span>->clock_rate,\n          <span class=\"supfact\">stream</span>);\n      if (<span class=\"supfact\">err</span>) {\n        pj_pool_release(<span class=\"supfact\">pool</span>);\n        <span class=\"supfact\">result</span> = Number - <span class=\"supfact\">err</span>;\n      } else {\n        v6 = <span class=\"supfact\">stream</span>->rec_strm;\n        <span class=\"supfact\">paSI</span> = (const PaStreamInfo_0 *)Pa_GetStreamInfo(v6);\n        <span class=\"supfact\">paRate</span> = (int)<span class=\"supfact\">paSI</span>->sampleRate;\n        <span class=\"supfact\">paLatency</span> =\n            (int)(Number * <span class=\"supfact\">paSI</span>->inputLatency);\n        if ((int)pj_log_get_level(v6) > Number)\n          pj_log_5(String, String, <span class=\"supfact\">paDevInfo</span>->name,\n                   <span class=\"supfact\">paHostApiInfo</span>->name, <span class=\"supfact\">paRate</span>,\n                   <span class=\"supfact\">param</span>->channel_count,\n                   <span class=\"supfact\">param</span>->bits_per_sample,\n                   <span class=\"supfact\">param</span>->samples_per_frame,\n                   <span class=\"supfact\">paLatency</span>);\n        *<span class=\"supfact\">p_snd_strm</span> = &<span class=\"supfact\">stream</span>->base;\n        <span class=\"supfact\">result</span> = Number;\n      }\n    } else {\n      <span class=\"supfact\">result</span> = Number;\n    }\n  } else {\n    if (!<span class=\"supfact\">rec_cb</span> || !<span class=\"supfact\">p_snd_strm</span>)\n      _assert_fail(String, String, Number, String);\n    <span class=\"supfact\">result</span> = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "pj_pool_t_0 *", "pred_name": "pool", "ref_name": "pa", "ref_type": "pa_aud_factory *"}, {"name": "a2", "type": "__unk__", "pred_name": "stream", "ref_name": "param", "ref_type": "const pjmedia_aud_param_0 *"}, {"name": "a3", "type": "void *", "pred_name": "user_data", "ref_name": "rec_cb", "ref_type": "pjmedia_aud_rec_cb"}, {"name": "a4", "type": "__unk__", "pred_name": "__unk__", "ref_name": "user_data", "ref_type": "void *"}, {"name": "a5", "type": "__unk__", "pred_name": "__unk__", "ref_name": "p_snd_strm", "ref_type": "pjmedia_aud_stream_0 * *"}, {"name": "result", "type": "pj_status_t", "pred_name": "result", "ref_name": "result", "ref_type": "pj_status_t"}, {"name": "v10", "type": "__unk__", "pred_name": "pi", "ref_name": "inputParam", "ref_type": "struct PaStreamParameters_0 { PaDeviceIndex device; int channelCount; PaSampleFormat sampleFormat; PaTime suggestedLatency; void * hostApiSpecificStreamInfo; }"}, {"name": "v11", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v12", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v13", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v14", "type": "disappear", "pred_name": "", "ref_name": "paLatency", "ref_type": "unsigned int"}, {"name": "v15", "type": "disappear", "pred_name": "", "ref_name": "paRate", "ref_type": "unsigned int"}, {"name": "v16", "type": "disappear", "pred_name": "", "ref_name": "paSI", "ref_type": "const PaStreamInfo_0 *"}, {"name": "v17", "type": "disappear", "pred_name": "", "ref_name": "err", "ref_type": "PaError"}, {"name": "v18", "type": "disappear", "pred_name": "", "ref_name": "paFrames", "ref_type": "unsigned int"}, {"name": "v19", "type": "__unk__", "pred_name": "__unk__", "ref_name": "stream", "ref_type": "pa_aud_stream *"}, {"name": "v20", "type": "__unk__", "pred_name": "__unk__", "ref_name": "pool", "ref_type": "pj_pool_t_0 *"}, {"name": "v21", "type": "__unk__", "pred_name": "__unk__", "ref_name": "paHostApiInfo", "ref_type": "const PaHostApiInfo_0 *"}, {"name": "v22", "type": "__unk__", "pred_name": "__unk__", "ref_name": "paDevInfo", "ref_type": "const PaDeviceInfo_0 *"}, {"name": "v23", "type": "pj_status_t", "pred_name": "status", "ref_name": "sampleFormat", "ref_type": "int"}, {"name": "v24", "type": "unsigned int", "pred_name": "__unk__", "ref_name": "rec_id", "ref_type": "pjmedia_aud_dev_index"}], "body_in_train": true}, {"repo_owner": "karshan", "repo_name": "vaayu", "path": "karshan/vaayu/2bc87934c97049fdc1f78182a158a32eae652cf690966ba433b5a1156978962b", "path_in_repo": "karshan/vaayu/software/mios32/trunk/modules/uip/unix/obj/psock.o", "objdump": "00000000000001f2 <buf_bufto>:\n 1f2:\t55                   \tpush   %rbp\n 1f3:\t48 89 e5             \tmov    %rsp,%rbp\n 1f6:\t48 89 c8             \tmov    %rcx,%rax\n 1f9:\t89 f1                \tmov    %esi,%ecx\n 1fb:\t88 4d ec             \tmov    %cl,-0x14(%rbp)\n 1fe:\teb 4a                \tjmp    24a <buf_bufto+0x58>\n 200:\t48 8b 32             \tmov    (%rdx),%rsi\n 203:\t48 8b 0f             \tmov    (%rdi),%rcx\n 206:\t0f b6 36             \tmovzbl (%rsi),%esi\n 209:\t40 88 31             \tmov    %sil,(%rcx)\n 20c:\t0f b6 09             \tmovzbl (%rcx),%ecx\n 20f:\t88 4d ff             \tmov    %cl,-0x1(%rbp)\n 212:\t48 8b 0a             \tmov    (%rdx),%rcx\n 215:\t48 83 c1 01          \tadd    $0x1,%rcx\n 219:\t48 89 0a             \tmov    %rcx,(%rdx)\n 21c:\t48 8b 0f             \tmov    (%rdi),%rcx\n 21f:\t48 83 c1 01          \tadd    $0x1,%rcx\n 223:\t48 89 0f             \tmov    %rcx,(%rdi)\n 226:\t0f b7 08             \tmovzwl (%rax),%ecx\n 229:\t83 e9 01             \tsub    $0x1,%ecx\n 22c:\t66 89 08             \tmov    %cx,(%rax)\n 22f:\t0f b7 4f 08          \tmovzwl 0x8(%rdi),%ecx\n 233:\t83 e9 01             \tsub    $0x1,%ecx\n 236:\t66 89 4f 08          \tmov    %cx,0x8(%rdi)\n 23a:\t0f b6 4d ff          \tmovzbl -0x1(%rbp),%ecx\n 23e:\t3a 4d ec             \tcmp    -0x14(%rbp),%cl\n 241:\t75 07                \tjne    24a <buf_bufto+0x58>\n 243:\tb8 02 00 00 00       \tmov    $0x2,%eax\n 248:\teb 59                \tjmp    2a3 <buf_bufto+0xb1>\n 24a:\t0f b7 4f 08          \tmovzwl 0x8(%rdi),%ecx\n 24e:\t66 85 c9             \ttest   %cx,%cx\n 251:\t74 08                \tje     25b <buf_bufto+0x69>\n 253:\t0f b7 08             \tmovzwl (%rax),%ecx\n 256:\t66 85 c9             \ttest   %cx,%cx\n 259:\t75 a5                \tjne    200 <buf_bufto+0xe>\n 25b:\t0f b7 08             \tmovzwl (%rax),%ecx\n 25e:\t66 85 c9             \ttest   %cx,%cx\n 261:\t75 33                \tjne    296 <buf_bufto+0xa4>\n 263:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 268:\teb 39                \tjmp    2a3 <buf_bufto+0xb1>\n 26a:\t48 8b 0a             \tmov    (%rdx),%rcx\n 26d:\t0f b6 09             \tmovzbl (%rcx),%ecx\n 270:\t88 4d ff             \tmov    %cl,-0x1(%rbp)\n 273:\t0f b7 08             \tmovzwl (%rax),%ecx\n 276:\t83 e9 01             \tsub    $0x1,%ecx\n 279:\t66 89 08             \tmov    %cx,(%rax)\n 27c:\t48 8b 0a             \tmov    (%rdx),%rcx\n 27f:\t48 83 c1 01          \tadd    $0x1,%rcx\n 283:\t48 89 0a             \tmov    %rcx,(%rdx)\n 286:\t0f b6 4d ff          \tmovzbl -0x1(%rbp),%ecx\n 28a:\t3a 4d ec             \tcmp    -0x14(%rbp),%cl\n 28d:\t75 07                \tjne    296 <buf_bufto+0xa4>\n 28f:\tb8 03 00 00 00       \tmov    $0x3,%eax\n 294:\teb 0d                \tjmp    2a3 <buf_bufto+0xb1>\n 296:\t0f b7 08             \tmovzwl (%rax),%ecx\n 299:\t66 85 c9             \ttest   %cx,%cx\n 29c:\t75 cc                \tjne    26a <buf_bufto+0x78>\n 29e:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 2a3:\t5d                   \tpop    %rbp\n 2a4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall buf_bufto(__int64 a1, char a2, char **a3, _WORD *a4) {\n  char *v5;\n  char v7;\n  char v8;\n  while (*(_WORD *)(a1 + Number) && *a4) {\n    v5 = *(char **)a1;\n    *v5 = **a3;\n    v7 = *v5;\n    ++*a3;\n    ++*(_QWORD *)a1;\n    --*a4;\n    --*(_WORD *)(a1 + Number);\n    if (v7 == a2)\n      return Number L;\n  }\n  if (!*a4)\n    return Number L;\n  while (*a4) {\n    v8 = **a3;\n    --*a4;\n    ++*a3;\n    if (v8 == a2)\n      return Number L;\n  }\n  return Number L;\n}", "code_t": "__int64 __fastcall buf_bufto(psock_buf *<span class=\"supfact\">buf</span>,\n                             char <span class=\"supfact\">a2</span>,\n                             u8_t **<span class=\"supfact\">dataptr</span>,\n                             _WORD *<span class=\"supfact\">a4</span>) {\n  u8_t *v5;\n  u8_t c;\n  u8_t ca;\n  while (<span class=\"supfact\">buf</span>->left && *<span class=\"supfact\">a4</span>) {\n    v5 = <span class=\"supfact\">buf</span>->ptr;\n    *v5 = **<span class=\"supfact\">dataptr</span>;\n    c = *v5;\n    ++*<span class=\"supfact\">dataptr</span>;\n    ++<span class=\"supfact\">buf</span>->ptr;\n    --*<span class=\"supfact\">a4</span>;\n    --<span class=\"supfact\">buf</span>->left;\n    if (c == <span class=\"supfact\">a2</span>)\n      return Number L;\n  }\n  if (!*<span class=\"supfact\">a4</span>)\n    return Number L;\n  while (*<span class=\"supfact\">a4</span>) {\n    ca = **<span class=\"supfact\">dataptr</span>;\n    --*<span class=\"supfact\">a4</span>;\n    ++*<span class=\"supfact\">dataptr</span>;\n    if (ca == <span class=\"supfact\">a2</span>)\n      return Number L;\n  }\n  return Number L;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "buf", "ref_type": "psock_buf *"}, {"name": "a2", "type": "uint8_t * *", "pred_name": "dataptr", "ref_name": "a2", "ref_type": "char"}, {"name": "a3", "type": "uint16_t *", "pred_name": "datalen", "ref_name": "dataptr", "ref_type": "u8_t * *"}, {"name": "a4", "type": "_WORD *", "pred_name": "a4", "ref_name": "a4", "ref_type": "_WORD *"}], "body_in_train": true}, {"repo_owner": "CGrader", "repo_name": "ffmpeg-modif", "path": "CGrader/ffmpeg-modif/224083bd3f64412911eab862d510e39a69dc95135737b97049d749fb050408ef", "path_in_repo": "CGrader/ffmpeg-modif//libswresample/rematrix.o", "objdump": "0000000000001bfb <get_mix_any_func_s32>:\n    1bfb:\t48 89 7c 24 f8       \tmov    %rdi,-0x8(%rsp)\n    1c00:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1c05:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1c09:\t48 83 f8 03          \tcmp    $0x3,%rax\n    1c0d:\t0f 85 fe 00 00 00    \tjne    1d11 <get_mix_any_func_s32+0x116>\n    1c13:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1c18:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    1c1c:\t48 3d 0f 06 00 00    \tcmp    $0x60f,%rax\n    1c22:\t74 13                \tje     1c37 <get_mix_any_func_s32+0x3c>\n    1c24:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1c29:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    1c2d:\t48 83 f8 3f          \tcmp    $0x3f,%rax\n    1c31:\t0f 85 da 00 00 00    \tjne    1d11 <get_mix_any_func_s32+0x116>\n    1c37:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1c3c:\tf3 0f 10 80 d8 20 00 \tmovss  0x20d8(%rax),%xmm0\n    1c43:\t00 \n    1c44:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1c49:\tf3 0f 10 88 58 21 00 \tmovss  0x2158(%rax),%xmm1\n    1c50:\t00 \n    1c51:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1c54:\t0f 8a b7 00 00 00    \tjp     1d11 <get_mix_any_func_s32+0x116>\n    1c5a:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1c5d:\t0f 85 ae 00 00 00    \tjne    1d11 <get_mix_any_func_s32+0x116>\n    1c63:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1c68:\tf3 0f 10 80 dc 20 00 \tmovss  0x20dc(%rax),%xmm0\n    1c6f:\t00 \n    1c70:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1c75:\tf3 0f 10 88 5c 21 00 \tmovss  0x215c(%rax),%xmm1\n    1c7c:\t00 \n    1c7d:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1c80:\t0f 8a 8b 00 00 00    \tjp     1d11 <get_mix_any_func_s32+0x116>\n    1c86:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1c89:\t0f 85 82 00 00 00    \tjne    1d11 <get_mix_any_func_s32+0x116>\n    1c8f:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1c94:\tf3 0f 10 80 d4 20 00 \tmovss  0x20d4(%rax),%xmm0\n    1c9b:\t00 \n    1c9c:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1ca0:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1ca3:\t7a 6c                \tjp     1d11 <get_mix_any_func_s32+0x116>\n    1ca5:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1ca9:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1cac:\t75 63                \tjne    1d11 <get_mix_any_func_s32+0x116>\n    1cae:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1cb3:\tf3 0f 10 80 e4 20 00 \tmovss  0x20e4(%rax),%xmm0\n    1cba:\t00 \n    1cbb:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1cbf:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1cc2:\t7a 4d                \tjp     1d11 <get_mix_any_func_s32+0x116>\n    1cc4:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1cc8:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1ccb:\t75 44                \tjne    1d11 <get_mix_any_func_s32+0x116>\n    1ccd:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1cd2:\tf3 0f 10 80 50 21 00 \tmovss  0x2150(%rax),%xmm0\n    1cd9:\t00 \n    1cda:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1cde:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1ce1:\t7a 2e                \tjp     1d11 <get_mix_any_func_s32+0x116>\n    1ce3:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1ce7:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1cea:\t75 25                \tjne    1d11 <get_mix_any_func_s32+0x116>\n    1cec:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1cf1:\tf3 0f 10 80 60 21 00 \tmovss  0x2160(%rax),%xmm0\n    1cf8:\t00 \n    1cf9:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1cfd:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1d00:\t7a 0f                \tjp     1d11 <get_mix_any_func_s32+0x116>\n    1d02:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1d06:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1d09:\t75 06                \tjne    1d11 <get_mix_any_func_s32+0x116>\n    1d0b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d10:\tc3                   \tretq   \n    1d11:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1d16:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1d1a:\t48 83 f8 03          \tcmp    $0x3,%rax\n    1d1e:\t0f 85 3d 01 00 00    \tjne    1e61 <get_mix_any_func_s32+0x266>\n    1d24:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1d29:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    1d2d:\t48 3d 3f 06 00 00    \tcmp    $0x63f,%rax\n    1d33:\t0f 85 28 01 00 00    \tjne    1e61 <get_mix_any_func_s32+0x266>\n    1d39:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1d3e:\tf3 0f 10 80 d8 20 00 \tmovss  0x20d8(%rax),%xmm0\n    1d45:\t00 \n    1d46:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1d4b:\tf3 0f 10 88 58 21 00 \tmovss  0x2158(%rax),%xmm1\n    1d52:\t00 \n    1d53:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1d56:\t0f 8a 05 01 00 00    \tjp     1e61 <get_mix_any_func_s32+0x266>\n    1d5c:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1d5f:\t0f 85 fc 00 00 00    \tjne    1e61 <get_mix_any_func_s32+0x266>\n    1d65:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1d6a:\tf3 0f 10 80 dc 20 00 \tmovss  0x20dc(%rax),%xmm0\n    1d71:\t00 \n    1d72:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1d77:\tf3 0f 10 88 5c 21 00 \tmovss  0x215c(%rax),%xmm1\n    1d7e:\t00 \n    1d7f:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1d82:\t0f 8a d9 00 00 00    \tjp     1e61 <get_mix_any_func_s32+0x266>\n    1d88:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1d8b:\t0f 85 d0 00 00 00    \tjne    1e61 <get_mix_any_func_s32+0x266>\n    1d91:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1d96:\tf3 0f 10 80 d4 20 00 \tmovss  0x20d4(%rax),%xmm0\n    1d9d:\t00 \n    1d9e:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1da2:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1da5:\t0f 8a b6 00 00 00    \tjp     1e61 <get_mix_any_func_s32+0x266>\n    1dab:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1daf:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1db2:\t0f 85 a9 00 00 00    \tjne    1e61 <get_mix_any_func_s32+0x266>\n    1db8:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1dbd:\tf3 0f 10 80 e4 20 00 \tmovss  0x20e4(%rax),%xmm0\n    1dc4:\t00 \n    1dc5:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1dc9:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1dcc:\t0f 8a 8f 00 00 00    \tjp     1e61 <get_mix_any_func_s32+0x266>\n    1dd2:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1dd6:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1dd9:\t0f 85 82 00 00 00    \tjne    1e61 <get_mix_any_func_s32+0x266>\n    1ddf:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1de4:\tf3 0f 10 80 50 21 00 \tmovss  0x2150(%rax),%xmm0\n    1deb:\t00 \n    1dec:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1df0:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1df3:\t7a 6c                \tjp     1e61 <get_mix_any_func_s32+0x266>\n    1df5:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1df9:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1dfc:\t75 63                \tjne    1e61 <get_mix_any_func_s32+0x266>\n    1dfe:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1e03:\tf3 0f 10 80 60 21 00 \tmovss  0x2160(%rax),%xmm0\n    1e0a:\t00 \n    1e0b:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1e0f:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1e12:\t7a 4d                \tjp     1e61 <get_mix_any_func_s32+0x266>\n    1e14:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1e18:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1e1b:\t75 44                \tjne    1e61 <get_mix_any_func_s32+0x266>\n    1e1d:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1e22:\tf3 0f 10 80 ec 20 00 \tmovss  0x20ec(%rax),%xmm0\n    1e29:\t00 \n    1e2a:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1e2e:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1e31:\t7a 2e                \tjp     1e61 <get_mix_any_func_s32+0x266>\n    1e33:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1e37:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1e3a:\t75 25                \tjne    1e61 <get_mix_any_func_s32+0x266>\n    1e3c:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n    1e41:\tf3 0f 10 80 68 21 00 \tmovss  0x2168(%rax),%xmm0\n    1e48:\t00 \n    1e49:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1e4d:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1e50:\t7a 0f                \tjp     1e61 <get_mix_any_func_s32+0x266>\n    1e52:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    1e56:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    1e59:\t75 06                \tjne    1e61 <get_mix_any_func_s32+0x266>\n    1e5b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e60:\tc3                   \tretq   \n    1e61:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e66:\tc3                   \tretq   ", "code_s": "__int64(__fastcall *__fastcall get_mix_any_func_s32(__int64 a1))(_QWORD *a1,\n                                                                 _QWORD *a2,\n                                                                 int *a3,\n                                                                 __int64 a4) {\n  if (*(_QWORD *)(a1 + Number) == Number L &&\n      (*(_QWORD *)(a1 + Number) == Number L ||\n       *(_QWORD *)(a1 + Number) == Number L) &&\n      *(float *)(a1 + Number) == *(float *)(a1 + Number) &&\n      *(float *)(a1 + Number) == *(float *)(a1 + Number) &&\n      *(float *)(a1 + Number) == Number && *(float *)(a1 + Number) == Number &&\n      *(float *)(a1 + Number) == Number && *(float *)(a1 + Number) == Number) {\n    return mix6to2_s32;\n  }\n  if (*(_QWORD *)(a1 + Number) == Number L &&\n      *(_QWORD *)(a1 + Number) == Number L &&\n      *(float *)(a1 + Number) == *(float *)(a1 + Number) &&\n      *(float *)(a1 + Number) == *(float *)(a1 + Number) &&\n      *(float *)(a1 + Number) == Number && *(float *)(a1 + Number) == Number &&\n      *(float *)(a1 + Number) == Number && *(float *)(a1 + Number) == Number &&\n      *(float *)(a1 + Number) == Number && *(float *)(a1 + Number) == Number) {\n    return mix8to2_s32;\n  }\n  return Number L;\n}", "code_t": "mix_any_func_type_s32 *__cdecl get_mix_any_func_s32(\n    SwrContext_0 *<span class=\"supfact\">s</span>) {\n  if (<span class=\"supfact\">s</span>->out_ch_layout == Number &&\n      (<span class=\"supfact\">s</span>->in_ch_layout == Number ||\n       <span class=\"supfact\">s</span>->in_ch_layout == Number) &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] ==\n          <span class=\"supfact\">s</span>->matrix[Number][Number] &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] ==\n          <span class=\"supfact\">s</span>->matrix[Number][Number] &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] == Number &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] == Number &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] == Number &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] == Number) {\n    return (mix_any_func_type_s32 *)mix6to2_s32;\n  }\n  if (<span class=\"supfact\">s</span>->out_ch_layout == Number &&\n      <span class=\"supfact\">s</span>->in_ch_layout == Number &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] ==\n          <span class=\"supfact\">s</span>->matrix[Number][Number] &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] ==\n          <span class=\"supfact\">s</span>->matrix[Number][Number] &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] == Number &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] == Number &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] == Number &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] == Number &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] == Number &&\n      <span class=\"supfact\">s</span>->matrix[Number][Number] == Number) {\n    return (mix_any_func_type_s32 *)mix8to2_s32;\n  }\n  return Number L;\n}", "var": [{"name": "a1", "type": "SwrContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "SwrContext_0 *"}], "body_in_train": true}, {"repo_owner": "daveti", "repo_name": "prov-kernel", "path": "daveti/prov-kernel/dcb671330763a82819090cfd531f14dadb46a786857c166ada35a1c220484311", "path_in_repo": "daveti/prov-kernel/tools/perf/util/evlist.o", "objdump": "0000000000000f07 <perf_evlist__add_tracepoints>:\n     f07:\t55                   \tpush   %rbp\n     f08:\t48 89 e5             \tmov    %rsp,%rbp\n     f0b:\t48 83 ec 40          \tsub    $0x40,%rsp\n     f0f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     f13:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     f17:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     f1b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     f22:\t00 00 \n     f24:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     f28:\t31 c0                \txor    %eax,%eax\n     f2a:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     f2e:\t48 89 d0             \tmov    %rdx,%rax\n     f31:\t48 c1 e0 02          \tshl    $0x2,%rax\n     f35:\t48 01 d0             \tadd    %rdx,%rax\n     f38:\t48 c1 e0 04          \tshl    $0x4,%rax\n     f3c:\t48 89 c7             \tmov    %rax,%rdi\n     f3f:\te8 bc f0 ff ff       \tcallq  0 <zalloc>\n     f44:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     f48:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     f4d:\t75 0a                \tjne    f59 <perf_evlist__add_tracepoints+0x52>\n     f4f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     f54:\te9 06 01 00 00       \tjmpq   105f <perf_evlist__add_tracepoints+0x158>\n     f59:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     f60:\t00 \n     f61:\te9 bf 00 00 00       \tjmpq   1025 <perf_evlist__add_tracepoints+0x11e>\n     f66:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f6a:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     f71:\t00 \n     f72:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     f76:\t48 01 d0             \tadd    %rdx,%rax\n     f79:\t48 8b 00             \tmov    (%rax),%rax\n     f7c:\t48 89 c7             \tmov    %rax,%rdi\n     f7f:\te8 96 fe ff ff       \tcallq  e1a <trace_event__id>\n     f84:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     f87:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n     f8b:\t0f 88 be 00 00 00    \tjs     104f <perf_evlist__add_tracepoints+0x148>\n     f91:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     f95:\t48 89 d0             \tmov    %rdx,%rax\n     f98:\t48 c1 e0 02          \tshl    $0x2,%rax\n     f9c:\t48 01 d0             \tadd    %rdx,%rax\n     f9f:\t48 c1 e0 04          \tshl    $0x4,%rax\n     fa3:\t48 89 c2             \tmov    %rax,%rdx\n     fa6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     faa:\t48 01 d0             \tadd    %rdx,%rax\n     fad:\tc7 00 02 00 00 00    \tmovl   $0x2,(%rax)\n     fb3:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     fb7:\t48 89 d0             \tmov    %rdx,%rax\n     fba:\t48 c1 e0 02          \tshl    $0x2,%rax\n     fbe:\t48 01 d0             \tadd    %rdx,%rax\n     fc1:\t48 c1 e0 04          \tshl    $0x4,%rax\n     fc5:\t48 89 c2             \tmov    %rax,%rdx\n     fc8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     fcc:\t48 01 c2             \tadd    %rax,%rdx\n     fcf:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     fd2:\t48 98                \tcltq   \n     fd4:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n     fd8:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     fdc:\t48 89 d0             \tmov    %rdx,%rax\n     fdf:\t48 c1 e0 02          \tshl    $0x2,%rax\n     fe3:\t48 01 d0             \tadd    %rdx,%rax\n     fe6:\t48 c1 e0 04          \tshl    $0x4,%rax\n     fea:\t48 89 c2             \tmov    %rax,%rdx\n     fed:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     ff1:\t48 01 d0             \tadd    %rdx,%rax\n     ff4:\t48 c7 40 18 84 05 00 \tmovq   $0x584,0x18(%rax)\n     ffb:\t00 \n     ffc:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1000:\t48 89 d0             \tmov    %rdx,%rax\n    1003:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1007:\t48 01 d0             \tadd    %rdx,%rax\n    100a:\t48 c1 e0 04          \tshl    $0x4,%rax\n    100e:\t48 89 c2             \tmov    %rax,%rdx\n    1011:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1015:\t48 01 d0             \tadd    %rdx,%rax\n    1018:\t48 c7 40 10 01 00 00 \tmovq   $0x1,0x10(%rax)\n    101f:\t00 \n    1020:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n    1025:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1029:\t48 3b 45 c8          \tcmp    -0x38(%rbp),%rax\n    102d:\t0f 82 33 ff ff ff    \tjb     f66 <perf_evlist__add_tracepoints+0x5f>\n    1033:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    1037:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    103b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    103f:\t48 89 ce             \tmov    %rcx,%rsi\n    1042:\t48 89 c7             \tmov    %rax,%rdi\n    1045:\te8 00 00 00 00       \tcallq  104a <perf_evlist__add_tracepoints+0x143>\n    104a:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    104d:\teb 01                \tjmp    1050 <perf_evlist__add_tracepoints+0x149>\n    104f:\t90                   \tnop\n    1050:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1054:\t48 89 c7             \tmov    %rax,%rdi\n    1057:\te8 00 00 00 00       \tcallq  105c <perf_evlist__add_tracepoints+0x155>\n    105c:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    105f:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1063:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    106a:\t00 00 \n    106c:\t74 05                \tje     1073 <perf_evlist__add_tracepoints+0x16c>\n    106e:\te8 00 00 00 00       \tcallq  1073 <perf_evlist__add_tracepoints+0x16c>\n    1073:\tc9                   \tleaveq \n    1074:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_evlist__add_tracepoints(__int64 a1, __int64 a2,\n                                                unsigned __int64 a3,\n                                                double a4) {\n  int v6;\n  unsigned __int64 i;\n  _DWORD *ptr;\n  ptr = zalloc(Number * a3);\n  if (!ptr)\n    return Number;\n  for (i = Number L; i < a3; ++i) {\n    v6 = trace_event(*(const char **)(Number * i + a2), a4);\n    if (v6 < Number)\n      goto LABEL_8;\n    ptr[Number * i] = Number;\n    *(_QWORD *)&ptr[Number * i + Number] = v6;\n    *(_QWORD *)&ptr[Number * i + Number] = Number L;\n    *(_QWORD *)&ptr[Number * i + Number] = Number L;\n  }\n  v6 = perf_evlist__add_attrs(a1, (__int64)ptr, a3);\nLABEL_8:\n  free(ptr);\n  return (unsigned int)v6;\n}", "code_t": "int __cdecl perf_evlist__add_tracepoints(\n    perf_evlist *<span class=\"supfact\">evlist</span>,\n    const char **<span class=\"supfact\">tracepoints</span>,\n    size_t <span class=\"supfact\">nr_tracepoints</span>) {\n  int <span class=\"supfact\">err</span>;\n  size_t <span class=\"supfact\">i</span>;\n  perf_event_attr *<span class=\"supfact\">attrs</span>;\n  <span class=\"supfact\">attrs</span> =\n      (perf_event_attr *)zalloc(Number * <span class=\"supfact\">nr_tracepoints</span>);\n  if (!<span class=\"supfact\">attrs</span>)\n    return Number;\n  for (<span class=\"supfact\">i</span> = Number L;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">nr_tracepoints</span>;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">err</span> =\n        trace_event(<span class=\"supfact\">tracepoints</span>[<span class=\"supfact\">i</span>]);\n    if (<span class=\"supfact\">err</span> < Number)\n      goto out_free_attrs;\n    <span class=\"supfact\">attrs</span>[<span class=\"supfact\">i</span>].type = Number;\n    <span class=\"supfact\">attrs</span>[<span class=\"supfact\">i</span>].config = <span class=\"supfact\">err</span>;\n    <span class=\"supfact\">attrs</span>[<span class=\"supfact\">i</span>].sample_type = Number L;\n    <span class=\"supfact\">attrs</span>[<span class=\"supfact\">i</span>]._anon_0.sample_period = Number L;\n  }\n  <span class=\"supfact\">err</span> =\n      perf_evlist__add_attrs(<span class=\"supfact\">evlist</span>, <span class=\"supfact\">attrs</span>,\n                             <span class=\"supfact\">nr_tracepoints</span>);\nout_free_attrs:\n  free(<span class=\"supfact\">attrs</span>);\n  return <span class=\"supfact\">err</span>;\n}", "var": [{"name": "a1", "type": "perf_evlist *", "pred_name": "evlist", "ref_name": "evlist", "ref_type": "perf_evlist *"}, {"name": "a2", "type": "const char * *", "pred_name": "tracepoints", "ref_name": "tracepoints", "ref_type": "const char * *"}, {"name": "a3", "type": "size_t", "pred_name": "nr_tracepoints", "ref_name": "nr_tracepoints", "ref_type": "size_t"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "int", "pred_name": "err", "ref_name": "err", "ref_type": "int"}, {"name": "i", "type": "size_t", "pred_name": "i", "ref_name": "i", "ref_type": "size_t"}, {"name": "ptr", "type": "perf_event_attr *", "pred_name": "attrs", "ref_name": "attrs", "ref_type": "perf_event_attr *"}], "body_in_train": true}, {"repo_owner": "kradalby", "repo_name": "ntnu", "path": "kradalby/ntnu/5f091f641b617781f2dd2bd955aa94ab823b793bf3046f84f8ce20d3c5f2a6c0", "path_in_repo": "kradalby/ntnu/tdt4200/ps2/lenna/lodepng.c.o", "objdump": "000000000000534e <zlib_compress>:\n    534e:\t55                   \tpush   %rbp\n    534f:\t48 89 e5             \tmov    %rsp,%rbp\n    5352:\t48 83 ec 30          \tsub    $0x30,%rsp\n    5356:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    535a:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    535e:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n    5362:\t48 89 4d e0          \tmov    %rcx,-0x20(%rbp)\n    5366:\t4c 89 45 d8          \tmov    %r8,-0x28(%rbp)\n    536a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    536e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    5372:\t48 85 c0             \ttest   %rax,%rax\n    5375:\t74 27                \tje     539e <zlib_compress+0x50>\n    5377:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    537b:\t4c 8b 48 18          \tmov    0x18(%rax),%r9\n    537f:\t48 8b 7d d8          \tmov    -0x28(%rbp),%rdi\n    5383:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    5387:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    538b:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n    538f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5393:\t49 89 f8             \tmov    %rdi,%r8\n    5396:\t48 89 c7             \tmov    %rax,%rdi\n    5399:\t41 ff d1             \tcallq  *%r9\n    539c:\teb 1f                \tjmp    53bd <zlib_compress+0x6f>\n    539e:\t48 8b 7d d8          \tmov    -0x28(%rbp),%rdi\n    53a2:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    53a6:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    53aa:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n    53ae:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    53b2:\t49 89 f8             \tmov    %rdi,%r8\n    53b5:\t48 89 c7             \tmov    %rax,%rdi\n    53b8:\te8 00 00 00 00       \tcallq  53bd <zlib_compress+0x6f>\n    53bd:\tc9                   \tleaveq \n    53be:\tc3                   \tretq   ", "code_s": "__int64 __fastcall zlib_compress(__int64 *a1, __int64 *a2, unsigned __int8 *a3,\n                                 unsigned __int64 a4, __int64 a5) {\n  __int64 result;\n  if (*(_QWORD *)(a5 + Number))\n    result = (*(__int64(__fastcall **)(__int64 *, __int64 *, unsigned __int8 *,\n                                       unsigned __int64, __int64))(\n        a5 + Number))(a1, a2, a3, a4, a5);\n  else\n    result = lodepng_zlib_compress(a1, a2, a3, a4, a5);\n  return result;\n}", "code_t": "unsigned int __cdecl zlib_compress(\n    unsigned __int8 **<span class=\"supfact\">out</span>, size_t *<span class=\"supfact\">outsize</span>,\n    const unsigned __int8 *<span class=\"supfact\">in</span>, size_t <span class=\"supfact\">insize</span>,\n    const LodePNGCompressSettings_0 *<span class=\"supfact\">settings</span>) {\n  unsigned int <span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">settings</span>->custom_zlib)\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">settings</span>->custom_zlib(\n        <span class=\"supfact\">out</span>, <span class=\"supfact\">outsize</span>, <span class=\"supfact\">in</span>,\n        <span class=\"supfact\">insize</span>, <span class=\"supfact\">settings</span>);\n  else\n    <span class=\"supfact\">result</span> = lodepng_zlib_compress(\n        <span class=\"supfact\">out</span>, <span class=\"supfact\">outsize</span>, <span class=\"supfact\">in</span>,\n        <span class=\"supfact\">insize</span>, <span class=\"supfact\">settings</span>);\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "unsigned __int8 * *", "pred_name": "out", "ref_name": "out", "ref_type": "unsigned __int8 * *"}, {"name": "a2", "type": "size_t *", "pred_name": "outsize", "ref_name": "outsize", "ref_type": "size_t *"}, {"name": "a3", "type": "const unsigned __int8 *", "pred_name": "in", "ref_name": "in", "ref_type": "const unsigned __int8 *"}, {"name": "a4", "type": "size_t", "pred_name": "insize", "ref_name": "insize", "ref_type": "size_t"}, {"name": "a5", "type": "__unk__", "pred_name": "settings", "ref_name": "settings", "ref_type": "const LodePNGCompressSettings_0 *"}, {"name": "result", "type": "unsigned int", "pred_name": "result", "ref_name": "result", "ref_type": "unsigned int"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/31be13082a522ba4e367ce005b78294ff286adbc5317ae73fabea061c7c3710f", "path_in_repo": "XanClic/qemu//aarch64-linux-user/trace/control-target.o", "objdump": "0000000000000270 <qemu_loglevel_mask>:\n 270:\t55                   \tpush   %rbp\n 271:\t48 89 e5             \tmov    %rsp,%rbp\n 274:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n 277:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 27d <qemu_loglevel_mask+0xd>\n 27d:\t23 45 fc             \tand    -0x4(%rbp),%eax\n 280:\t85 c0                \ttest   %eax,%eax\n 282:\t0f 95 c0             \tsetne  %al\n 285:\t5d                   \tpop    %rbp\n 286:\tc3                   \tretq   ", "code_s": "bool __fastcall qemu_loglevel_mask(int a1) {\n  return (a1 & qemu_loglevel) != Number;\n}", "code_t": "bool __cdecl qemu_loglevel_mask(int <span class=\"supfact\">mask</span>) {\n  return (<span class=\"supfact\">mask</span> & qemu_loglevel) != Number;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "mask", "ref_name": "mask", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "sipwise", "repo_name": "kamailio", "path": "sipwise/kamailio/44c4b01aeb2cf98bfef6630c741ded96c3adfc1340f5e56311df6b098a4b0508", "path_in_repo": "sipwise/kamailio/src/modules/pua/pua_db.o", "objdump": "0000000000010476 <delete_dialog_puadb>:\n   10476:\t55                   \tpush   %rbp\n   10477:\t48 89 e5             \tmov    %rsp,%rbp\n   1047a:\t41 57                \tpush   %r15\n   1047c:\t41 56                \tpush   %r14\n   1047e:\t41 55                \tpush   %r13\n   10480:\t41 54                \tpush   %r12\n   10482:\t53                   \tpush   %rbx\n   10483:\t48 81 ec a8 00 00 00 \tsub    $0xa8,%rsp\n   1048a:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n   10491:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n   10498:\t48 83 bd 38 ff ff ff \tcmpq   $0x0,-0xc8(%rbp)\n   1049f:\t00 \n   104a0:\t0f 85 fe 02 00 00    \tjne    107a4 <delete_dialog_puadb+0x32e>\n   104a6:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   104ab:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 104b2 <delete_dialog_puadb+0x3c>\n   104b2:\te8 00 00 00 00       \tcallq  104b7 <delete_dialog_puadb+0x41>\n   104b7:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n   104ba:\t0f 8c da 02 00 00    \tjl     1079a <delete_dialog_puadb+0x324>\n   104c0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 104c7 <delete_dialog_puadb+0x51>\n   104c7:\t8b 00                \tmov    (%rax),%eax\n   104c9:\t85 c0                \ttest   %eax,%eax\n   104cb:\t0f 85 c9 02 00 00    \tjne    1079a <delete_dialog_puadb+0x324>\n   104d1:\tc7 45 bc ff ff ff ff \tmovl   $0xffffffff,-0x44(%rbp)\n   104d8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 104df <delete_dialog_puadb+0x69>\n   104df:\t8b 00                \tmov    (%rax),%eax\n   104e1:\t8d 50 01             \tlea    0x1(%rax),%edx\n   104e4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 104eb <delete_dialog_puadb+0x75>\n   104eb:\t89 10                \tmov    %edx,(%rax)\n   104ed:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 104f4 <delete_dialog_puadb+0x7e>\n   104f4:\t8b 00                \tmov    (%rax),%eax\n   104f6:\t85 c0                \ttest   %eax,%eax\n   104f8:\t0f 95 c0             \tsetne  %al\n   104fb:\t0f b6 c0             \tmovzbl %al,%eax\n   104fe:\t48 85 c0             \ttest   %rax,%rax\n   10501:\t0f 84 46 01 00 00    \tje     1064d <delete_dialog_puadb+0x1d7>\n   10507:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1050e <delete_dialog_puadb+0x98>\n   1050e:\t8b 00                \tmov    (%rax),%eax\n   10510:\t85 c0                \ttest   %eax,%eax\n   10512:\t0f 95 c0             \tsetne  %al\n   10515:\t0f b6 c0             \tmovzbl %al,%eax\n   10518:\t48 85 c0             \ttest   %rax,%rax\n   1051b:\t74 0a                \tje     10527 <delete_dialog_puadb+0xb1>\n   1051d:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n   10520:\t89 c7                \tmov    %eax,%edi\n   10522:\te8 00 00 00 00       \tcallq  10527 <delete_dialog_puadb+0xb1>\n   10527:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1052e <delete_dialog_puadb+0xb8>\n   1052e:\t48 8b 00             \tmov    (%rax),%rax\n   10531:\t48 85 c0             \ttest   %rax,%rax\n   10534:\t0f 95 c0             \tsetne  %al\n   10537:\t0f b6 c0             \tmovzbl %al,%eax\n   1053a:\t48 85 c0             \ttest   %rax,%rax\n   1053d:\t0f 84 84 00 00 00    \tje     105c7 <delete_dialog_puadb+0x151>\n   10543:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1054a <delete_dialog_puadb+0xd4>\n   1054a:\t48 8b 00             \tmov    (%rax),%rax\n   1054d:\t48 8b 18             \tmov    (%rax),%rbx\n   10550:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10557 <delete_dialog_puadb+0xe1>\n   10557:\t48 8b 00             \tmov    (%rax),%rax\n   1055a:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n   1055e:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n   10561:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10564:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1056b <delete_dialog_puadb+0xf5>\n   1056b:\t48 63 d2             \tmovslq %edx,%rdx\n   1056e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10572:\t48 01 d0             \tadd    %rdx,%rax\n   10575:\t4c 8b 20             \tmov    (%rax),%r12\n   10578:\te8 00 00 00 00       \tcallq  1057d <delete_dialog_puadb+0x107>\n   1057d:\t89 c1                \tmov    %eax,%ecx\n   1057f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10586 <delete_dialog_puadb+0x110>\n   10586:\t8b 10                \tmov    (%rax),%edx\n   10588:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1058f <delete_dialog_puadb+0x119>\n   1058f:\t48 8b 00             \tmov    (%rax),%rax\n   10592:\t48 83 ec 08          \tsub    $0x8,%rsp\n   10596:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1059d <delete_dialog_puadb+0x127>\n   1059d:\t56                   \tpush   %rsi\n   1059e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 105a5 <delete_dialog_puadb+0x12f>\n   105a5:\t56                   \tpush   %rsi\n   105a6:\t53                   \tpush   %rbx\n   105a7:\t45 89 e9             \tmov    %r13d,%r9d\n   105aa:\t4d 89 e0             \tmov    %r12,%r8\n   105ad:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 105b4 <delete_dialog_puadb+0x13e>\n   105b4:\t48 89 c7             \tmov    %rax,%rdi\n   105b7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   105bc:\te8 00 00 00 00       \tcallq  105c1 <delete_dialog_puadb+0x14b>\n   105c1:\t48 83 c4 20          \tadd    $0x20,%rsp\n   105c5:\teb 62                \tjmp    10629 <delete_dialog_puadb+0x1b3>\n   105c7:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n   105ca:\t8d 50 05             \tlea    0x5(%rax),%edx\n   105cd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 105d4 <delete_dialog_puadb+0x15e>\n   105d4:\t48 63 d2             \tmovslq %edx,%rdx\n   105d7:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   105db:\t48 01 d0             \tadd    %rdx,%rax\n   105de:\t48 8b 18             \tmov    (%rax),%rbx\n   105e1:\te8 00 00 00 00       \tcallq  105e6 <delete_dialog_puadb+0x170>\n   105e6:\t89 c1                \tmov    %eax,%ecx\n   105e8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 105ef <delete_dialog_puadb+0x179>\n   105ef:\t8b 10                \tmov    (%rax),%edx\n   105f1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 105f8 <delete_dialog_puadb+0x182>\n   105f8:\t48 8b 00             \tmov    (%rax),%rax\n   105fb:\t48 83 ec 08          \tsub    $0x8,%rsp\n   105ff:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10606 <delete_dialog_puadb+0x190>\n   10606:\t56                   \tpush   %rsi\n   10607:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 1060e <delete_dialog_puadb+0x198>\n   1060e:\t49 89 d8             \tmov    %rbx,%r8\n   10611:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10618 <delete_dialog_puadb+0x1a2>\n   10618:\t48 89 c7             \tmov    %rax,%rdi\n   1061b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10620:\te8 00 00 00 00       \tcallq  10625 <delete_dialog_puadb+0x1af>\n   10625:\t48 83 c4 10          \tadd    $0x10,%rsp\n   10629:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10630 <delete_dialog_puadb+0x1ba>\n   10630:\t8b 00                \tmov    (%rax),%eax\n   10632:\t85 c0                \ttest   %eax,%eax\n   10634:\t0f 95 c0             \tsetne  %al\n   10637:\t0f b6 c0             \tmovzbl %al,%eax\n   1063a:\t48 85 c0             \ttest   %rax,%rax\n   1063d:\t0f 84 42 01 00 00    \tje     10785 <delete_dialog_puadb+0x30f>\n   10643:\te8 00 00 00 00       \tcallq  10648 <delete_dialog_puadb+0x1d2>\n   10648:\te9 38 01 00 00       \tjmpq   10785 <delete_dialog_puadb+0x30f>\n   1064d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10654 <delete_dialog_puadb+0x1de>\n   10654:\t48 8b 00             \tmov    (%rax),%rax\n   10657:\t48 85 c0             \ttest   %rax,%rax\n   1065a:\t0f 95 c0             \tsetne  %al\n   1065d:\t0f b6 c0             \tmovzbl %al,%eax\n   10660:\t48 85 c0             \ttest   %rax,%rax\n   10663:\t0f 84 a4 00 00 00    \tje     1070d <delete_dialog_puadb+0x297>\n   10669:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10670 <delete_dialog_puadb+0x1fa>\n   10670:\t4c 8b 28             \tmov    (%rax),%r13\n   10673:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1067a <delete_dialog_puadb+0x204>\n   1067a:\t48 8b 00             \tmov    (%rax),%rax\n   1067d:\t4c 8b 38             \tmov    (%rax),%r15\n   10680:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10687 <delete_dialog_puadb+0x211>\n   10687:\t48 8b 00             \tmov    (%rax),%rax\n   1068a:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n   1068e:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n   10691:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10694:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1069b <delete_dialog_puadb+0x225>\n   1069b:\t48 63 d2             \tmovslq %edx,%rdx\n   1069e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   106a2:\t48 01 d0             \tadd    %rdx,%rax\n   106a5:\t48 8b 18             \tmov    (%rax),%rbx\n   106a8:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n   106ab:\t8d 50 05             \tlea    0x5(%rax),%edx\n   106ae:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 106b5 <delete_dialog_puadb+0x23f>\n   106b5:\t48 63 d2             \tmovslq %edx,%rdx\n   106b8:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   106bc:\t48 01 d0             \tadd    %rdx,%rax\n   106bf:\t48 83 c0 08          \tadd    $0x8,%rax\n   106c3:\t44 8b 30             \tmov    (%rax),%r14d\n   106c6:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   106cb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 106d2 <delete_dialog_puadb+0x25c>\n   106d2:\te8 00 00 00 00       \tcallq  106d7 <delete_dialog_puadb+0x261>\n   106d7:\t44 09 f0             \tor     %r14d,%eax\n   106da:\t48 83 ec 08          \tsub    $0x8,%rsp\n   106de:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 106e5 <delete_dialog_puadb+0x26f>\n   106e5:\t52                   \tpush   %rdx\n   106e6:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 106ed <delete_dialog_puadb+0x277>\n   106ed:\t4d 89 f8             \tmov    %r15,%r8\n   106f0:\t44 89 e1             \tmov    %r12d,%ecx\n   106f3:\t48 89 da             \tmov    %rbx,%rdx\n   106f6:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 106fd <delete_dialog_puadb+0x287>\n   106fd:\t89 c7                \tmov    %eax,%edi\n   106ff:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10704:\t41 ff d5             \tcallq  *%r13\n   10707:\t48 83 c4 10          \tadd    $0x10,%rsp\n   1070b:\teb 78                \tjmp    10785 <delete_dialog_puadb+0x30f>\n   1070d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10714 <delete_dialog_puadb+0x29e>\n   10714:\t4c 8b 20             \tmov    (%rax),%r12\n   10717:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n   1071a:\t8d 50 05             \tlea    0x5(%rax),%edx\n   1071d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10724 <delete_dialog_puadb+0x2ae>\n   10724:\t48 63 d2             \tmovslq %edx,%rdx\n   10727:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   1072b:\t48 01 d0             \tadd    %rdx,%rax\n   1072e:\t48 8b 18             \tmov    (%rax),%rbx\n   10731:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n   10734:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10737:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1073e <delete_dialog_puadb+0x2c8>\n   1073e:\t48 63 d2             \tmovslq %edx,%rdx\n   10741:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10745:\t48 01 d0             \tadd    %rdx,%rax\n   10748:\t48 83 c0 08          \tadd    $0x8,%rax\n   1074c:\t44 8b 28             \tmov    (%rax),%r13d\n   1074f:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   10754:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1075b <delete_dialog_puadb+0x2e5>\n   1075b:\te8 00 00 00 00       \tcallq  10760 <delete_dialog_puadb+0x2ea>\n   10760:\t44 09 e8             \tor     %r13d,%eax\n   10763:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 1076a <delete_dialog_puadb+0x2f4>\n   1076a:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 10771 <delete_dialog_puadb+0x2fb>\n   10771:\t48 89 da             \tmov    %rbx,%rdx\n   10774:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1077b <delete_dialog_puadb+0x305>\n   1077b:\t89 c7                \tmov    %eax,%edi\n   1077d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10782:\t41 ff d4             \tcallq  *%r12\n   10785:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1078c <delete_dialog_puadb+0x316>\n   1078c:\t8b 00                \tmov    (%rax),%eax\n   1078e:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n   10791:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10798 <delete_dialog_puadb+0x322>\n   10798:\t89 10                \tmov    %edx,(%rax)\n   1079a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   1079f:\te9 16 0b 00 00       \tjmpq   112ba <delete_dialog_puadb+0xe44>\n   107a4:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   107a7:\t48 98                \tcltq   \n   107a9:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 107b0 <delete_dialog_puadb+0x33a>\n   107b0:\t48 89 54 c5 a0       \tmov    %rdx,-0x60(%rbp,%rax,8)\n   107b5:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   107b8:\t48 98                \tcltq   \n   107ba:\t48 c1 e0 05          \tshl    $0x5,%rax\n   107be:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   107c2:\t48 01 d8             \tadd    %rbx,%rax\n   107c5:\t48 2d 90 00 00 00    \tsub    $0x90,%rax\n   107cb:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n   107d1:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   107d4:\t48 98                \tcltq   \n   107d6:\t48 c1 e0 05          \tshl    $0x5,%rax\n   107da:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   107de:\t48 01 d8             \tadd    %rbx,%rax\n   107e1:\t48 2d 8c 00 00 00    \tsub    $0x8c,%rax\n   107e7:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   107ed:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   107f0:\t48 98                \tcltq   \n   107f2:\t48 c1 e0 05          \tshl    $0x5,%rax\n   107f6:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n   107fa:\t48 01 f8             \tadd    %rdi,%rax\n   107fd:\t48 8d 48 80          \tlea    -0x80(%rax),%rcx\n   10801:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n   10808:\t48 8b 90 98 00 00 00 \tmov    0x98(%rax),%rdx\n   1080f:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n   10816:\t48 89 01             \tmov    %rax,(%rcx)\n   10819:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n   1081d:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   10821:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   10824:\t48 98                \tcltq   \n   10826:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 1082d <delete_dialog_puadb+0x3b7>\n   1082d:\t48 89 54 c5 a0       \tmov    %rdx,-0x60(%rbp,%rax,8)\n   10832:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   10835:\t48 98                \tcltq   \n   10837:\t48 c1 e0 05          \tshl    $0x5,%rax\n   1083b:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   1083f:\t48 01 d8             \tadd    %rbx,%rax\n   10842:\t48 2d 90 00 00 00    \tsub    $0x90,%rax\n   10848:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n   1084e:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   10851:\t48 98                \tcltq   \n   10853:\t48 c1 e0 05          \tshl    $0x5,%rax\n   10857:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n   1085b:\t48 01 f8             \tadd    %rdi,%rax\n   1085e:\t48 2d 8c 00 00 00    \tsub    $0x8c,%rax\n   10864:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   1086a:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   1086d:\t48 98                \tcltq   \n   1086f:\t48 c1 e0 05          \tshl    $0x5,%rax\n   10873:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   10877:\t48 01 d8             \tadd    %rbx,%rax\n   1087a:\t48 8d 48 80          \tlea    -0x80(%rax),%rcx\n   1087e:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n   10885:\t48 8b 90 b8 00 00 00 \tmov    0xb8(%rax),%rdx\n   1088c:\t48 8b 80 b0 00 00 00 \tmov    0xb0(%rax),%rax\n   10893:\t48 89 01             \tmov    %rax,(%rcx)\n   10896:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n   1089a:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   1089e:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n   108a5:\t8b 80 a8 00 00 00    \tmov    0xa8(%rax),%eax\n   108ab:\t85 c0                \ttest   %eax,%eax\n   108ad:\t0f 8e 90 00 00 00    \tjle    10943 <delete_dialog_puadb+0x4cd>\n   108b3:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n   108ba:\t48 8b 80 a0 00 00 00 \tmov    0xa0(%rax),%rax\n   108c1:\t48 85 c0             \ttest   %rax,%rax\n   108c4:\t74 7d                \tje     10943 <delete_dialog_puadb+0x4cd>\n   108c6:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   108c9:\t48 98                \tcltq   \n   108cb:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 108d2 <delete_dialog_puadb+0x45c>\n   108d2:\t48 89 54 c5 a0       \tmov    %rdx,-0x60(%rbp,%rax,8)\n   108d7:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   108da:\t48 98                \tcltq   \n   108dc:\t48 c1 e0 05          \tshl    $0x5,%rax\n   108e0:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n   108e4:\t48 01 f8             \tadd    %rdi,%rax\n   108e7:\t48 2d 90 00 00 00    \tsub    $0x90,%rax\n   108ed:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n   108f3:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   108f6:\t48 98                \tcltq   \n   108f8:\t48 c1 e0 05          \tshl    $0x5,%rax\n   108fc:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   10900:\t48 01 d8             \tadd    %rbx,%rax\n   10903:\t48 2d 8c 00 00 00    \tsub    $0x8c,%rax\n   10909:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   1090f:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   10912:\t48 98                \tcltq   \n   10914:\t48 c1 e0 05          \tshl    $0x5,%rax\n   10918:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n   1091c:\t48 01 f8             \tadd    %rdi,%rax\n   1091f:\t48 8d 48 80          \tlea    -0x80(%rax),%rcx\n   10923:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n   1092a:\t48 8b 90 a8 00 00 00 \tmov    0xa8(%rax),%rdx\n   10931:\t48 8b 80 a0 00 00 00 \tmov    0xa0(%rax),%rax\n   10938:\t48 89 01             \tmov    %rax,(%rcx)\n   1093b:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n   1093f:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   10943:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1094a <delete_dialog_puadb+0x4d4>\n   1094a:\t48 8b 00             \tmov    (%rax),%rax\n   1094d:\t48 85 c0             \ttest   %rax,%rax\n   10950:\t0f 85 fe 02 00 00    \tjne    10c54 <delete_dialog_puadb+0x7de>\n   10956:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   1095b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 10962 <delete_dialog_puadb+0x4ec>\n   10962:\te8 00 00 00 00       \tcallq  10967 <delete_dialog_puadb+0x4f1>\n   10967:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n   1096a:\t0f 8c da 02 00 00    \tjl     10c4a <delete_dialog_puadb+0x7d4>\n   10970:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10977 <delete_dialog_puadb+0x501>\n   10977:\t8b 00                \tmov    (%rax),%eax\n   10979:\t85 c0                \ttest   %eax,%eax\n   1097b:\t0f 85 c9 02 00 00    \tjne    10c4a <delete_dialog_puadb+0x7d4>\n   10981:\tc7 45 c0 ff ff ff ff \tmovl   $0xffffffff,-0x40(%rbp)\n   10988:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1098f <delete_dialog_puadb+0x519>\n   1098f:\t8b 00                \tmov    (%rax),%eax\n   10991:\t8d 50 01             \tlea    0x1(%rax),%edx\n   10994:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1099b <delete_dialog_puadb+0x525>\n   1099b:\t89 10                \tmov    %edx,(%rax)\n   1099d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 109a4 <delete_dialog_puadb+0x52e>\n   109a4:\t8b 00                \tmov    (%rax),%eax\n   109a6:\t85 c0                \ttest   %eax,%eax\n   109a8:\t0f 95 c0             \tsetne  %al\n   109ab:\t0f b6 c0             \tmovzbl %al,%eax\n   109ae:\t48 85 c0             \ttest   %rax,%rax\n   109b1:\t0f 84 46 01 00 00    \tje     10afd <delete_dialog_puadb+0x687>\n   109b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 109be <delete_dialog_puadb+0x548>\n   109be:\t8b 00                \tmov    (%rax),%eax\n   109c0:\t85 c0                \ttest   %eax,%eax\n   109c2:\t0f 95 c0             \tsetne  %al\n   109c5:\t0f b6 c0             \tmovzbl %al,%eax\n   109c8:\t48 85 c0             \ttest   %rax,%rax\n   109cb:\t74 0a                \tje     109d7 <delete_dialog_puadb+0x561>\n   109cd:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n   109d0:\t89 c7                \tmov    %eax,%edi\n   109d2:\te8 00 00 00 00       \tcallq  109d7 <delete_dialog_puadb+0x561>\n   109d7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 109de <delete_dialog_puadb+0x568>\n   109de:\t48 8b 00             \tmov    (%rax),%rax\n   109e1:\t48 85 c0             \ttest   %rax,%rax\n   109e4:\t0f 95 c0             \tsetne  %al\n   109e7:\t0f b6 c0             \tmovzbl %al,%eax\n   109ea:\t48 85 c0             \ttest   %rax,%rax\n   109ed:\t0f 84 84 00 00 00    \tje     10a77 <delete_dialog_puadb+0x601>\n   109f3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 109fa <delete_dialog_puadb+0x584>\n   109fa:\t48 8b 00             \tmov    (%rax),%rax\n   109fd:\t48 8b 18             \tmov    (%rax),%rbx\n   10a00:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10a07 <delete_dialog_puadb+0x591>\n   10a07:\t48 8b 00             \tmov    (%rax),%rax\n   10a0a:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n   10a0e:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n   10a11:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10a14:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10a1b <delete_dialog_puadb+0x5a5>\n   10a1b:\t48 63 d2             \tmovslq %edx,%rdx\n   10a1e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10a22:\t48 01 d0             \tadd    %rdx,%rax\n   10a25:\t4c 8b 20             \tmov    (%rax),%r12\n   10a28:\te8 00 00 00 00       \tcallq  10a2d <delete_dialog_puadb+0x5b7>\n   10a2d:\t89 c1                \tmov    %eax,%ecx\n   10a2f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10a36 <delete_dialog_puadb+0x5c0>\n   10a36:\t8b 10                \tmov    (%rax),%edx\n   10a38:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10a3f <delete_dialog_puadb+0x5c9>\n   10a3f:\t48 8b 00             \tmov    (%rax),%rax\n   10a42:\t48 83 ec 08          \tsub    $0x8,%rsp\n   10a46:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10a4d <delete_dialog_puadb+0x5d7>\n   10a4d:\t56                   \tpush   %rsi\n   10a4e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10a55 <delete_dialog_puadb+0x5df>\n   10a55:\t56                   \tpush   %rsi\n   10a56:\t53                   \tpush   %rbx\n   10a57:\t45 89 e9             \tmov    %r13d,%r9d\n   10a5a:\t4d 89 e0             \tmov    %r12,%r8\n   10a5d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10a64 <delete_dialog_puadb+0x5ee>\n   10a64:\t48 89 c7             \tmov    %rax,%rdi\n   10a67:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10a6c:\te8 00 00 00 00       \tcallq  10a71 <delete_dialog_puadb+0x5fb>\n   10a71:\t48 83 c4 20          \tadd    $0x20,%rsp\n   10a75:\teb 62                \tjmp    10ad9 <delete_dialog_puadb+0x663>\n   10a77:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n   10a7a:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10a7d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10a84 <delete_dialog_puadb+0x60e>\n   10a84:\t48 63 d2             \tmovslq %edx,%rdx\n   10a87:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10a8b:\t48 01 d0             \tadd    %rdx,%rax\n   10a8e:\t48 8b 18             \tmov    (%rax),%rbx\n   10a91:\te8 00 00 00 00       \tcallq  10a96 <delete_dialog_puadb+0x620>\n   10a96:\t89 c1                \tmov    %eax,%ecx\n   10a98:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10a9f <delete_dialog_puadb+0x629>\n   10a9f:\t8b 10                \tmov    (%rax),%edx\n   10aa1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10aa8 <delete_dialog_puadb+0x632>\n   10aa8:\t48 8b 00             \tmov    (%rax),%rax\n   10aab:\t48 83 ec 08          \tsub    $0x8,%rsp\n   10aaf:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10ab6 <delete_dialog_puadb+0x640>\n   10ab6:\t56                   \tpush   %rsi\n   10ab7:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 10abe <delete_dialog_puadb+0x648>\n   10abe:\t49 89 d8             \tmov    %rbx,%r8\n   10ac1:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10ac8 <delete_dialog_puadb+0x652>\n   10ac8:\t48 89 c7             \tmov    %rax,%rdi\n   10acb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10ad0:\te8 00 00 00 00       \tcallq  10ad5 <delete_dialog_puadb+0x65f>\n   10ad5:\t48 83 c4 10          \tadd    $0x10,%rsp\n   10ad9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10ae0 <delete_dialog_puadb+0x66a>\n   10ae0:\t8b 00                \tmov    (%rax),%eax\n   10ae2:\t85 c0                \ttest   %eax,%eax\n   10ae4:\t0f 95 c0             \tsetne  %al\n   10ae7:\t0f b6 c0             \tmovzbl %al,%eax\n   10aea:\t48 85 c0             \ttest   %rax,%rax\n   10aed:\t0f 84 42 01 00 00    \tje     10c35 <delete_dialog_puadb+0x7bf>\n   10af3:\te8 00 00 00 00       \tcallq  10af8 <delete_dialog_puadb+0x682>\n   10af8:\te9 38 01 00 00       \tjmpq   10c35 <delete_dialog_puadb+0x7bf>\n   10afd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10b04 <delete_dialog_puadb+0x68e>\n   10b04:\t48 8b 00             \tmov    (%rax),%rax\n   10b07:\t48 85 c0             \ttest   %rax,%rax\n   10b0a:\t0f 95 c0             \tsetne  %al\n   10b0d:\t0f b6 c0             \tmovzbl %al,%eax\n   10b10:\t48 85 c0             \ttest   %rax,%rax\n   10b13:\t0f 84 a4 00 00 00    \tje     10bbd <delete_dialog_puadb+0x747>\n   10b19:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10b20 <delete_dialog_puadb+0x6aa>\n   10b20:\t4c 8b 28             \tmov    (%rax),%r13\n   10b23:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10b2a <delete_dialog_puadb+0x6b4>\n   10b2a:\t48 8b 00             \tmov    (%rax),%rax\n   10b2d:\t4c 8b 38             \tmov    (%rax),%r15\n   10b30:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10b37 <delete_dialog_puadb+0x6c1>\n   10b37:\t48 8b 00             \tmov    (%rax),%rax\n   10b3a:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n   10b3e:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n   10b41:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10b44:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10b4b <delete_dialog_puadb+0x6d5>\n   10b4b:\t48 63 d2             \tmovslq %edx,%rdx\n   10b4e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10b52:\t48 01 d0             \tadd    %rdx,%rax\n   10b55:\t48 8b 18             \tmov    (%rax),%rbx\n   10b58:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n   10b5b:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10b5e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10b65 <delete_dialog_puadb+0x6ef>\n   10b65:\t48 63 d2             \tmovslq %edx,%rdx\n   10b68:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10b6c:\t48 01 d0             \tadd    %rdx,%rax\n   10b6f:\t48 83 c0 08          \tadd    $0x8,%rax\n   10b73:\t44 8b 30             \tmov    (%rax),%r14d\n   10b76:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   10b7b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 10b82 <delete_dialog_puadb+0x70c>\n   10b82:\te8 00 00 00 00       \tcallq  10b87 <delete_dialog_puadb+0x711>\n   10b87:\t44 09 f0             \tor     %r14d,%eax\n   10b8a:\t48 83 ec 08          \tsub    $0x8,%rsp\n   10b8e:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 10b95 <delete_dialog_puadb+0x71f>\n   10b95:\t52                   \tpush   %rdx\n   10b96:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 10b9d <delete_dialog_puadb+0x727>\n   10b9d:\t4d 89 f8             \tmov    %r15,%r8\n   10ba0:\t44 89 e1             \tmov    %r12d,%ecx\n   10ba3:\t48 89 da             \tmov    %rbx,%rdx\n   10ba6:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10bad <delete_dialog_puadb+0x737>\n   10bad:\t89 c7                \tmov    %eax,%edi\n   10baf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10bb4:\t41 ff d5             \tcallq  *%r13\n   10bb7:\t48 83 c4 10          \tadd    $0x10,%rsp\n   10bbb:\teb 78                \tjmp    10c35 <delete_dialog_puadb+0x7bf>\n   10bbd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10bc4 <delete_dialog_puadb+0x74e>\n   10bc4:\t4c 8b 20             \tmov    (%rax),%r12\n   10bc7:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n   10bca:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10bcd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10bd4 <delete_dialog_puadb+0x75e>\n   10bd4:\t48 63 d2             \tmovslq %edx,%rdx\n   10bd7:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10bdb:\t48 01 d0             \tadd    %rdx,%rax\n   10bde:\t48 8b 18             \tmov    (%rax),%rbx\n   10be1:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n   10be4:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10be7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10bee <delete_dialog_puadb+0x778>\n   10bee:\t48 63 d2             \tmovslq %edx,%rdx\n   10bf1:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10bf5:\t48 01 d0             \tadd    %rdx,%rax\n   10bf8:\t48 83 c0 08          \tadd    $0x8,%rax\n   10bfc:\t44 8b 28             \tmov    (%rax),%r13d\n   10bff:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   10c04:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 10c0b <delete_dialog_puadb+0x795>\n   10c0b:\te8 00 00 00 00       \tcallq  10c10 <delete_dialog_puadb+0x79a>\n   10c10:\t44 09 e8             \tor     %r13d,%eax\n   10c13:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 10c1a <delete_dialog_puadb+0x7a4>\n   10c1a:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 10c21 <delete_dialog_puadb+0x7ab>\n   10c21:\t48 89 da             \tmov    %rbx,%rdx\n   10c24:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10c2b <delete_dialog_puadb+0x7b5>\n   10c2b:\t89 c7                \tmov    %eax,%edi\n   10c2d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10c32:\t41 ff d4             \tcallq  *%r12\n   10c35:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10c3c <delete_dialog_puadb+0x7c6>\n   10c3c:\t8b 00                \tmov    (%rax),%eax\n   10c3e:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n   10c41:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10c48 <delete_dialog_puadb+0x7d2>\n   10c48:\t89 10                \tmov    %edx,(%rax)\n   10c4a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   10c4f:\te9 66 06 00 00       \tjmpq   112ba <delete_dialog_puadb+0xe44>\n   10c54:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10c5b <delete_dialog_puadb+0x7e5>\n   10c5b:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n   10c5f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10c66 <delete_dialog_puadb+0x7f0>\n   10c66:\t48 8b 00             \tmov    (%rax),%rax\n   10c69:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 10c70 <delete_dialog_puadb+0x7fa>\n   10c70:\t48 89 d6             \tmov    %rdx,%rsi\n   10c73:\t48 89 c7             \tmov    %rax,%rdi\n   10c76:\tff d1                \tcallq  *%rcx\n   10c78:\t85 c0                \ttest   %eax,%eax\n   10c7a:\t0f 89 fe 02 00 00    \tjns    10f7e <delete_dialog_puadb+0xb08>\n   10c80:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   10c85:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 10c8c <delete_dialog_puadb+0x816>\n   10c8c:\te8 00 00 00 00       \tcallq  10c91 <delete_dialog_puadb+0x81b>\n   10c91:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n   10c94:\t0f 8c da 02 00 00    \tjl     10f74 <delete_dialog_puadb+0xafe>\n   10c9a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10ca1 <delete_dialog_puadb+0x82b>\n   10ca1:\t8b 00                \tmov    (%rax),%eax\n   10ca3:\t85 c0                \ttest   %eax,%eax\n   10ca5:\t0f 85 c9 02 00 00    \tjne    10f74 <delete_dialog_puadb+0xafe>\n   10cab:\tc7 45 c4 ff ff ff ff \tmovl   $0xffffffff,-0x3c(%rbp)\n   10cb2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10cb9 <delete_dialog_puadb+0x843>\n   10cb9:\t8b 00                \tmov    (%rax),%eax\n   10cbb:\t8d 50 01             \tlea    0x1(%rax),%edx\n   10cbe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10cc5 <delete_dialog_puadb+0x84f>\n   10cc5:\t89 10                \tmov    %edx,(%rax)\n   10cc7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10cce <delete_dialog_puadb+0x858>\n   10cce:\t8b 00                \tmov    (%rax),%eax\n   10cd0:\t85 c0                \ttest   %eax,%eax\n   10cd2:\t0f 95 c0             \tsetne  %al\n   10cd5:\t0f b6 c0             \tmovzbl %al,%eax\n   10cd8:\t48 85 c0             \ttest   %rax,%rax\n   10cdb:\t0f 84 46 01 00 00    \tje     10e27 <delete_dialog_puadb+0x9b1>\n   10ce1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10ce8 <delete_dialog_puadb+0x872>\n   10ce8:\t8b 00                \tmov    (%rax),%eax\n   10cea:\t85 c0                \ttest   %eax,%eax\n   10cec:\t0f 95 c0             \tsetne  %al\n   10cef:\t0f b6 c0             \tmovzbl %al,%eax\n   10cf2:\t48 85 c0             \ttest   %rax,%rax\n   10cf5:\t74 0a                \tje     10d01 <delete_dialog_puadb+0x88b>\n   10cf7:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n   10cfa:\t89 c7                \tmov    %eax,%edi\n   10cfc:\te8 00 00 00 00       \tcallq  10d01 <delete_dialog_puadb+0x88b>\n   10d01:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10d08 <delete_dialog_puadb+0x892>\n   10d08:\t48 8b 00             \tmov    (%rax),%rax\n   10d0b:\t48 85 c0             \ttest   %rax,%rax\n   10d0e:\t0f 95 c0             \tsetne  %al\n   10d11:\t0f b6 c0             \tmovzbl %al,%eax\n   10d14:\t48 85 c0             \ttest   %rax,%rax\n   10d17:\t0f 84 84 00 00 00    \tje     10da1 <delete_dialog_puadb+0x92b>\n   10d1d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10d24 <delete_dialog_puadb+0x8ae>\n   10d24:\t48 8b 00             \tmov    (%rax),%rax\n   10d27:\t48 8b 18             \tmov    (%rax),%rbx\n   10d2a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10d31 <delete_dialog_puadb+0x8bb>\n   10d31:\t48 8b 00             \tmov    (%rax),%rax\n   10d34:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n   10d38:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n   10d3b:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10d3e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10d45 <delete_dialog_puadb+0x8cf>\n   10d45:\t48 63 d2             \tmovslq %edx,%rdx\n   10d48:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10d4c:\t48 01 d0             \tadd    %rdx,%rax\n   10d4f:\t4c 8b 20             \tmov    (%rax),%r12\n   10d52:\te8 00 00 00 00       \tcallq  10d57 <delete_dialog_puadb+0x8e1>\n   10d57:\t89 c1                \tmov    %eax,%ecx\n   10d59:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10d60 <delete_dialog_puadb+0x8ea>\n   10d60:\t8b 10                \tmov    (%rax),%edx\n   10d62:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10d69 <delete_dialog_puadb+0x8f3>\n   10d69:\t48 8b 00             \tmov    (%rax),%rax\n   10d6c:\t48 83 ec 08          \tsub    $0x8,%rsp\n   10d70:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10d77 <delete_dialog_puadb+0x901>\n   10d77:\t56                   \tpush   %rsi\n   10d78:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10d7f <delete_dialog_puadb+0x909>\n   10d7f:\t56                   \tpush   %rsi\n   10d80:\t53                   \tpush   %rbx\n   10d81:\t45 89 e9             \tmov    %r13d,%r9d\n   10d84:\t4d 89 e0             \tmov    %r12,%r8\n   10d87:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10d8e <delete_dialog_puadb+0x918>\n   10d8e:\t48 89 c7             \tmov    %rax,%rdi\n   10d91:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10d96:\te8 00 00 00 00       \tcallq  10d9b <delete_dialog_puadb+0x925>\n   10d9b:\t48 83 c4 20          \tadd    $0x20,%rsp\n   10d9f:\teb 62                \tjmp    10e03 <delete_dialog_puadb+0x98d>\n   10da1:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n   10da4:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10da7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10dae <delete_dialog_puadb+0x938>\n   10dae:\t48 63 d2             \tmovslq %edx,%rdx\n   10db1:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10db5:\t48 01 d0             \tadd    %rdx,%rax\n   10db8:\t48 8b 18             \tmov    (%rax),%rbx\n   10dbb:\te8 00 00 00 00       \tcallq  10dc0 <delete_dialog_puadb+0x94a>\n   10dc0:\t89 c1                \tmov    %eax,%ecx\n   10dc2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10dc9 <delete_dialog_puadb+0x953>\n   10dc9:\t8b 10                \tmov    (%rax),%edx\n   10dcb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10dd2 <delete_dialog_puadb+0x95c>\n   10dd2:\t48 8b 00             \tmov    (%rax),%rax\n   10dd5:\t48 83 ec 08          \tsub    $0x8,%rsp\n   10dd9:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10de0 <delete_dialog_puadb+0x96a>\n   10de0:\t56                   \tpush   %rsi\n   10de1:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 10de8 <delete_dialog_puadb+0x972>\n   10de8:\t49 89 d8             \tmov    %rbx,%r8\n   10deb:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10df2 <delete_dialog_puadb+0x97c>\n   10df2:\t48 89 c7             \tmov    %rax,%rdi\n   10df5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10dfa:\te8 00 00 00 00       \tcallq  10dff <delete_dialog_puadb+0x989>\n   10dff:\t48 83 c4 10          \tadd    $0x10,%rsp\n   10e03:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10e0a <delete_dialog_puadb+0x994>\n   10e0a:\t8b 00                \tmov    (%rax),%eax\n   10e0c:\t85 c0                \ttest   %eax,%eax\n   10e0e:\t0f 95 c0             \tsetne  %al\n   10e11:\t0f b6 c0             \tmovzbl %al,%eax\n   10e14:\t48 85 c0             \ttest   %rax,%rax\n   10e17:\t0f 84 42 01 00 00    \tje     10f5f <delete_dialog_puadb+0xae9>\n   10e1d:\te8 00 00 00 00       \tcallq  10e22 <delete_dialog_puadb+0x9ac>\n   10e22:\te9 38 01 00 00       \tjmpq   10f5f <delete_dialog_puadb+0xae9>\n   10e27:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10e2e <delete_dialog_puadb+0x9b8>\n   10e2e:\t48 8b 00             \tmov    (%rax),%rax\n   10e31:\t48 85 c0             \ttest   %rax,%rax\n   10e34:\t0f 95 c0             \tsetne  %al\n   10e37:\t0f b6 c0             \tmovzbl %al,%eax\n   10e3a:\t48 85 c0             \ttest   %rax,%rax\n   10e3d:\t0f 84 a4 00 00 00    \tje     10ee7 <delete_dialog_puadb+0xa71>\n   10e43:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10e4a <delete_dialog_puadb+0x9d4>\n   10e4a:\t4c 8b 28             \tmov    (%rax),%r13\n   10e4d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10e54 <delete_dialog_puadb+0x9de>\n   10e54:\t48 8b 00             \tmov    (%rax),%rax\n   10e57:\t4c 8b 38             \tmov    (%rax),%r15\n   10e5a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10e61 <delete_dialog_puadb+0x9eb>\n   10e61:\t48 8b 00             \tmov    (%rax),%rax\n   10e64:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n   10e68:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n   10e6b:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10e6e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10e75 <delete_dialog_puadb+0x9ff>\n   10e75:\t48 63 d2             \tmovslq %edx,%rdx\n   10e78:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10e7c:\t48 01 d0             \tadd    %rdx,%rax\n   10e7f:\t48 8b 18             \tmov    (%rax),%rbx\n   10e82:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n   10e85:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10e88:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10e8f <delete_dialog_puadb+0xa19>\n   10e8f:\t48 63 d2             \tmovslq %edx,%rdx\n   10e92:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10e96:\t48 01 d0             \tadd    %rdx,%rax\n   10e99:\t48 83 c0 08          \tadd    $0x8,%rax\n   10e9d:\t44 8b 30             \tmov    (%rax),%r14d\n   10ea0:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   10ea5:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 10eac <delete_dialog_puadb+0xa36>\n   10eac:\te8 00 00 00 00       \tcallq  10eb1 <delete_dialog_puadb+0xa3b>\n   10eb1:\t44 09 f0             \tor     %r14d,%eax\n   10eb4:\t48 83 ec 08          \tsub    $0x8,%rsp\n   10eb8:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 10ebf <delete_dialog_puadb+0xa49>\n   10ebf:\t52                   \tpush   %rdx\n   10ec0:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 10ec7 <delete_dialog_puadb+0xa51>\n   10ec7:\t4d 89 f8             \tmov    %r15,%r8\n   10eca:\t44 89 e1             \tmov    %r12d,%ecx\n   10ecd:\t48 89 da             \tmov    %rbx,%rdx\n   10ed0:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10ed7 <delete_dialog_puadb+0xa61>\n   10ed7:\t89 c7                \tmov    %eax,%edi\n   10ed9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10ede:\t41 ff d5             \tcallq  *%r13\n   10ee1:\t48 83 c4 10          \tadd    $0x10,%rsp\n   10ee5:\teb 78                \tjmp    10f5f <delete_dialog_puadb+0xae9>\n   10ee7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10eee <delete_dialog_puadb+0xa78>\n   10eee:\t4c 8b 20             \tmov    (%rax),%r12\n   10ef1:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n   10ef4:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10ef7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10efe <delete_dialog_puadb+0xa88>\n   10efe:\t48 63 d2             \tmovslq %edx,%rdx\n   10f01:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10f05:\t48 01 d0             \tadd    %rdx,%rax\n   10f08:\t48 8b 18             \tmov    (%rax),%rbx\n   10f0b:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n   10f0e:\t8d 50 05             \tlea    0x5(%rax),%edx\n   10f11:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10f18 <delete_dialog_puadb+0xaa2>\n   10f18:\t48 63 d2             \tmovslq %edx,%rdx\n   10f1b:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   10f1f:\t48 01 d0             \tadd    %rdx,%rax\n   10f22:\t48 83 c0 08          \tadd    $0x8,%rax\n   10f26:\t44 8b 28             \tmov    (%rax),%r13d\n   10f29:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   10f2e:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 10f35 <delete_dialog_puadb+0xabf>\n   10f35:\te8 00 00 00 00       \tcallq  10f3a <delete_dialog_puadb+0xac4>\n   10f3a:\t44 09 e8             \tor     %r13d,%eax\n   10f3d:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 10f44 <delete_dialog_puadb+0xace>\n   10f44:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 10f4b <delete_dialog_puadb+0xad5>\n   10f4b:\t48 89 da             \tmov    %rbx,%rdx\n   10f4e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10f55 <delete_dialog_puadb+0xadf>\n   10f55:\t89 c7                \tmov    %eax,%edi\n   10f57:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10f5c:\t41 ff d4             \tcallq  *%r12\n   10f5f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10f66 <delete_dialog_puadb+0xaf0>\n   10f66:\t8b 00                \tmov    (%rax),%eax\n   10f68:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n   10f6b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10f72 <delete_dialog_puadb+0xafc>\n   10f72:\t89 10                \tmov    %edx,(%rax)\n   10f74:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   10f79:\te9 3c 03 00 00       \tjmpq   112ba <delete_dialog_puadb+0xe44>\n   10f7e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10f85 <delete_dialog_puadb+0xb0f>\n   10f85:\t4c 8b 48 50          \tmov    0x50(%rax),%r9\n   10f89:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10f90 <delete_dialog_puadb+0xb1a>\n   10f90:\t48 8b 00             \tmov    (%rax),%rax\n   10f93:\t8b 4d cc             \tmov    -0x34(%rbp),%ecx\n   10f96:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n   10f9d:\t48 8d 75 a0          \tlea    -0x60(%rbp),%rsi\n   10fa1:\t41 89 c8             \tmov    %ecx,%r8d\n   10fa4:\t48 89 d1             \tmov    %rdx,%rcx\n   10fa7:\tba 00 00 00 00       \tmov    $0x0,%edx\n   10fac:\t48 89 c7             \tmov    %rax,%rdi\n   10faf:\t41 ff d1             \tcallq  *%r9\n   10fb2:\t85 c0                \ttest   %eax,%eax\n   10fb4:\t0f 89 fb 02 00 00    \tjns    112b5 <delete_dialog_puadb+0xe3f>\n   10fba:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   10fbf:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 10fc6 <delete_dialog_puadb+0xb50>\n   10fc6:\te8 00 00 00 00       \tcallq  10fcb <delete_dialog_puadb+0xb55>\n   10fcb:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n   10fce:\t0f 8c da 02 00 00    \tjl     112ae <delete_dialog_puadb+0xe38>\n   10fd4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10fdb <delete_dialog_puadb+0xb65>\n   10fdb:\t8b 00                \tmov    (%rax),%eax\n   10fdd:\t85 c0                \ttest   %eax,%eax\n   10fdf:\t0f 85 c9 02 00 00    \tjne    112ae <delete_dialog_puadb+0xe38>\n   10fe5:\tc7 45 c8 ff ff ff ff \tmovl   $0xffffffff,-0x38(%rbp)\n   10fec:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10ff3 <delete_dialog_puadb+0xb7d>\n   10ff3:\t8b 00                \tmov    (%rax),%eax\n   10ff5:\t8d 50 01             \tlea    0x1(%rax),%edx\n   10ff8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10fff <delete_dialog_puadb+0xb89>\n   10fff:\t89 10                \tmov    %edx,(%rax)\n   11001:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11008 <delete_dialog_puadb+0xb92>\n   11008:\t8b 00                \tmov    (%rax),%eax\n   1100a:\t85 c0                \ttest   %eax,%eax\n   1100c:\t0f 95 c0             \tsetne  %al\n   1100f:\t0f b6 c0             \tmovzbl %al,%eax\n   11012:\t48 85 c0             \ttest   %rax,%rax\n   11015:\t0f 84 46 01 00 00    \tje     11161 <delete_dialog_puadb+0xceb>\n   1101b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11022 <delete_dialog_puadb+0xbac>\n   11022:\t8b 00                \tmov    (%rax),%eax\n   11024:\t85 c0                \ttest   %eax,%eax\n   11026:\t0f 95 c0             \tsetne  %al\n   11029:\t0f b6 c0             \tmovzbl %al,%eax\n   1102c:\t48 85 c0             \ttest   %rax,%rax\n   1102f:\t74 0a                \tje     1103b <delete_dialog_puadb+0xbc5>\n   11031:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   11034:\t89 c7                \tmov    %eax,%edi\n   11036:\te8 00 00 00 00       \tcallq  1103b <delete_dialog_puadb+0xbc5>\n   1103b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11042 <delete_dialog_puadb+0xbcc>\n   11042:\t48 8b 00             \tmov    (%rax),%rax\n   11045:\t48 85 c0             \ttest   %rax,%rax\n   11048:\t0f 95 c0             \tsetne  %al\n   1104b:\t0f b6 c0             \tmovzbl %al,%eax\n   1104e:\t48 85 c0             \ttest   %rax,%rax\n   11051:\t0f 84 84 00 00 00    \tje     110db <delete_dialog_puadb+0xc65>\n   11057:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1105e <delete_dialog_puadb+0xbe8>\n   1105e:\t48 8b 00             \tmov    (%rax),%rax\n   11061:\t48 8b 18             \tmov    (%rax),%rbx\n   11064:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1106b <delete_dialog_puadb+0xbf5>\n   1106b:\t48 8b 00             \tmov    (%rax),%rax\n   1106e:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n   11072:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   11075:\t8d 50 05             \tlea    0x5(%rax),%edx\n   11078:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1107f <delete_dialog_puadb+0xc09>\n   1107f:\t48 63 d2             \tmovslq %edx,%rdx\n   11082:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   11086:\t48 01 d0             \tadd    %rdx,%rax\n   11089:\t4c 8b 20             \tmov    (%rax),%r12\n   1108c:\te8 00 00 00 00       \tcallq  11091 <delete_dialog_puadb+0xc1b>\n   11091:\t89 c1                \tmov    %eax,%ecx\n   11093:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1109a <delete_dialog_puadb+0xc24>\n   1109a:\t8b 10                \tmov    (%rax),%edx\n   1109c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 110a3 <delete_dialog_puadb+0xc2d>\n   110a3:\t48 8b 00             \tmov    (%rax),%rax\n   110a6:\t48 83 ec 08          \tsub    $0x8,%rsp\n   110aa:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 110b1 <delete_dialog_puadb+0xc3b>\n   110b1:\t56                   \tpush   %rsi\n   110b2:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 110b9 <delete_dialog_puadb+0xc43>\n   110b9:\t56                   \tpush   %rsi\n   110ba:\t53                   \tpush   %rbx\n   110bb:\t45 89 e9             \tmov    %r13d,%r9d\n   110be:\t4d 89 e0             \tmov    %r12,%r8\n   110c1:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 110c8 <delete_dialog_puadb+0xc52>\n   110c8:\t48 89 c7             \tmov    %rax,%rdi\n   110cb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   110d0:\te8 00 00 00 00       \tcallq  110d5 <delete_dialog_puadb+0xc5f>\n   110d5:\t48 83 c4 20          \tadd    $0x20,%rsp\n   110d9:\teb 62                \tjmp    1113d <delete_dialog_puadb+0xcc7>\n   110db:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   110de:\t8d 50 05             \tlea    0x5(%rax),%edx\n   110e1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 110e8 <delete_dialog_puadb+0xc72>\n   110e8:\t48 63 d2             \tmovslq %edx,%rdx\n   110eb:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   110ef:\t48 01 d0             \tadd    %rdx,%rax\n   110f2:\t48 8b 18             \tmov    (%rax),%rbx\n   110f5:\te8 00 00 00 00       \tcallq  110fa <delete_dialog_puadb+0xc84>\n   110fa:\t89 c1                \tmov    %eax,%ecx\n   110fc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11103 <delete_dialog_puadb+0xc8d>\n   11103:\t8b 10                \tmov    (%rax),%edx\n   11105:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1110c <delete_dialog_puadb+0xc96>\n   1110c:\t48 8b 00             \tmov    (%rax),%rax\n   1110f:\t48 83 ec 08          \tsub    $0x8,%rsp\n   11113:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1111a <delete_dialog_puadb+0xca4>\n   1111a:\t56                   \tpush   %rsi\n   1111b:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 11122 <delete_dialog_puadb+0xcac>\n   11122:\t49 89 d8             \tmov    %rbx,%r8\n   11125:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1112c <delete_dialog_puadb+0xcb6>\n   1112c:\t48 89 c7             \tmov    %rax,%rdi\n   1112f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   11134:\te8 00 00 00 00       \tcallq  11139 <delete_dialog_puadb+0xcc3>\n   11139:\t48 83 c4 10          \tadd    $0x10,%rsp\n   1113d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11144 <delete_dialog_puadb+0xcce>\n   11144:\t8b 00                \tmov    (%rax),%eax\n   11146:\t85 c0                \ttest   %eax,%eax\n   11148:\t0f 95 c0             \tsetne  %al\n   1114b:\t0f b6 c0             \tmovzbl %al,%eax\n   1114e:\t48 85 c0             \ttest   %rax,%rax\n   11151:\t0f 84 42 01 00 00    \tje     11299 <delete_dialog_puadb+0xe23>\n   11157:\te8 00 00 00 00       \tcallq  1115c <delete_dialog_puadb+0xce6>\n   1115c:\te9 38 01 00 00       \tjmpq   11299 <delete_dialog_puadb+0xe23>\n   11161:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11168 <delete_dialog_puadb+0xcf2>\n   11168:\t48 8b 00             \tmov    (%rax),%rax\n   1116b:\t48 85 c0             \ttest   %rax,%rax\n   1116e:\t0f 95 c0             \tsetne  %al\n   11171:\t0f b6 c0             \tmovzbl %al,%eax\n   11174:\t48 85 c0             \ttest   %rax,%rax\n   11177:\t0f 84 a4 00 00 00    \tje     11221 <delete_dialog_puadb+0xdab>\n   1117d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11184 <delete_dialog_puadb+0xd0e>\n   11184:\t4c 8b 28             \tmov    (%rax),%r13\n   11187:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1118e <delete_dialog_puadb+0xd18>\n   1118e:\t48 8b 00             \tmov    (%rax),%rax\n   11191:\t4c 8b 38             \tmov    (%rax),%r15\n   11194:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1119b <delete_dialog_puadb+0xd25>\n   1119b:\t48 8b 00             \tmov    (%rax),%rax\n   1119e:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n   111a2:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   111a5:\t8d 50 05             \tlea    0x5(%rax),%edx\n   111a8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 111af <delete_dialog_puadb+0xd39>\n   111af:\t48 63 d2             \tmovslq %edx,%rdx\n   111b2:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   111b6:\t48 01 d0             \tadd    %rdx,%rax\n   111b9:\t48 8b 18             \tmov    (%rax),%rbx\n   111bc:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   111bf:\t8d 50 05             \tlea    0x5(%rax),%edx\n   111c2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 111c9 <delete_dialog_puadb+0xd53>\n   111c9:\t48 63 d2             \tmovslq %edx,%rdx\n   111cc:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   111d0:\t48 01 d0             \tadd    %rdx,%rax\n   111d3:\t48 83 c0 08          \tadd    $0x8,%rax\n   111d7:\t44 8b 30             \tmov    (%rax),%r14d\n   111da:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   111df:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 111e6 <delete_dialog_puadb+0xd70>\n   111e6:\te8 00 00 00 00       \tcallq  111eb <delete_dialog_puadb+0xd75>\n   111eb:\t44 09 f0             \tor     %r14d,%eax\n   111ee:\t48 83 ec 08          \tsub    $0x8,%rsp\n   111f2:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 111f9 <delete_dialog_puadb+0xd83>\n   111f9:\t52                   \tpush   %rdx\n   111fa:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 11201 <delete_dialog_puadb+0xd8b>\n   11201:\t4d 89 f8             \tmov    %r15,%r8\n   11204:\t44 89 e1             \tmov    %r12d,%ecx\n   11207:\t48 89 da             \tmov    %rbx,%rdx\n   1120a:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 11211 <delete_dialog_puadb+0xd9b>\n   11211:\t89 c7                \tmov    %eax,%edi\n   11213:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   11218:\t41 ff d5             \tcallq  *%r13\n   1121b:\t48 83 c4 10          \tadd    $0x10,%rsp\n   1121f:\teb 78                \tjmp    11299 <delete_dialog_puadb+0xe23>\n   11221:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11228 <delete_dialog_puadb+0xdb2>\n   11228:\t4c 8b 20             \tmov    (%rax),%r12\n   1122b:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   1122e:\t8d 50 05             \tlea    0x5(%rax),%edx\n   11231:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11238 <delete_dialog_puadb+0xdc2>\n   11238:\t48 63 d2             \tmovslq %edx,%rdx\n   1123b:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   1123f:\t48 01 d0             \tadd    %rdx,%rax\n   11242:\t48 8b 18             \tmov    (%rax),%rbx\n   11245:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   11248:\t8d 50 05             \tlea    0x5(%rax),%edx\n   1124b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11252 <delete_dialog_puadb+0xddc>\n   11252:\t48 63 d2             \tmovslq %edx,%rdx\n   11255:\t48 c1 e2 04          \tshl    $0x4,%rdx\n   11259:\t48 01 d0             \tadd    %rdx,%rax\n   1125c:\t48 83 c0 08          \tadd    $0x8,%rax\n   11260:\t44 8b 28             \tmov    (%rax),%r13d\n   11263:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   11268:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1126f <delete_dialog_puadb+0xdf9>\n   1126f:\te8 00 00 00 00       \tcallq  11274 <delete_dialog_puadb+0xdfe>\n   11274:\t44 09 e8             \tor     %r13d,%eax\n   11277:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 1127e <delete_dialog_puadb+0xe08>\n   1127e:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 11285 <delete_dialog_puadb+0xe0f>\n   11285:\t48 89 da             \tmov    %rbx,%rdx\n   11288:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1128f <delete_dialog_puadb+0xe19>\n   1128f:\t89 c7                \tmov    %eax,%edi\n   11291:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   11296:\t41 ff d4             \tcallq  *%r12\n   11299:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 112a0 <delete_dialog_puadb+0xe2a>\n   112a0:\t8b 00                \tmov    (%rax),%eax\n   112a2:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n   112a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 112ac <delete_dialog_puadb+0xe36>\n   112ac:\t89 10                \tmov    %edx,(%rax)\n   112ae:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   112b3:\teb 05                \tjmp    112ba <delete_dialog_puadb+0xe44>\n   112b5:\tb8 01 00 00 00       \tmov    $0x1,%eax\n   112ba:\t48 8d 65 d8          \tlea    -0x28(%rbp),%rsp\n   112be:\t5b                   \tpop    %rbx\n   112bf:\t41 5c                \tpop    %r12\n   112c1:\t41 5d                \tpop    %r13\n   112c3:\t41 5e                \tpop    %r14\n   112c5:\t41 5f                \tpop    %r15\n   112c7:\t5d                   \tpop    %rbp\n   112c8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall delete_dialog_puadb(int *a1) {\n  const char *v1;\n  int v2;\n  const char *v3;\n  unsigned int v4;\n  const char *v5;\n  unsigned int v6;\n  void (*v7)(_QWORD, const char *, ...);\n  __int64 v8;\n  unsigned int v9;\n  __int64 v10;\n  int v11;\n  unsigned int v12;\n  void (*v13)(_QWORD, const char *, ...);\n  const char *v14;\n  int v15;\n  unsigned int v16;\n  __int64 result;\n  _QWORD *v18;\n  __int64 v19;\n  _QWORD *v20;\n  __int64 v21;\n  _QWORD *v22;\n  __int64 v23;\n  const char *v24;\n  int v25;\n  const char *v26;\n  unsigned int v27;\n  const char *v28;\n  unsigned int v29;\n  void (*v30)(_QWORD, const char *, ...);\n  __int64 v31;\n  unsigned int v32;\n  __int64 v33;\n  int v34;\n  unsigned int v35;\n  void (*v36)(_QWORD, const char *, ...);\n  const char *v37;\n  int v38;\n  unsigned int v39;\n  const char *v40;\n  int v41;\n  const char *v42;\n  unsigned int v43;\n  const char *v44;\n  unsigned int v45;\n  void (*v46)(_QWORD, const char *, ...);\n  __int64 v47;\n  unsigned int v48;\n  __int64 v49;\n  int v50;\n  unsigned int v51;\n  void (*v52)(_QWORD, const char *, ...);\n  const char *v53;\n  int v54;\n  unsigned int v55;\n  const char *v56;\n  int v57;\n  const char *v58;\n  unsigned int v59;\n  const char *v60;\n  unsigned int v61;\n  void (*v62)(_QWORD, const char *, ...);\n  __int64 v63;\n  unsigned int v64;\n  __int64 v65;\n  int v66;\n  unsigned int v67;\n  void (*v68)(_QWORD, const char *, ...);\n  const char *v69;\n  int v70;\n  unsigned int v71;\n  _DWORD v72[Number];\n  __int64 v73[Number];\n  unsigned int v74;\n  unsigned int v75;\n  unsigned int v76;\n  unsigned int v77;\n  unsigned int v78;\n  _OWORD v79[Number];\n  v78 = Number;\n  if (a1) {\n    v73[v78] = (__int64)&str_call_id_col;\n    v72[Number * v78] = Number;\n    *((_DWORD *)&v79[Number * (int)v78 - Number] - Number) = Number;\n    v18 = &v79[Number * (int)v78 - Number];\n    v19 = *((_QWORD *)a1 + Number);\n    *v18 = *((_QWORD *)a1 + Number);\n    v18[Number] = v19;\n    v73[++v78] = (__int64)&str_from_tag_col;\n    v72[Number * v78] = Number;\n    *((_DWORD *)&v79[Number * (int)v78 - Number] - Number) = Number;\n    v20 = &v79[Number * (int)v78 - Number];\n    v21 = *((_QWORD *)a1 + Number);\n    *v20 = *((_QWORD *)a1 + Number);\n    v20[Number] = v21;\n    ++v78;\n    if (a1[Number] > Number && *((_QWORD *)a1 + Number)) {\n      v73[v78] = (__int64)&str_to_tag_col;\n      v72[Number * v78] = Number;\n      *((_DWORD *)&v79[Number * (int)v78 - Number] - Number) = Number;\n      v22 = &v79[Number * (int)v78 - Number];\n      v23 = *((_QWORD *)a1 + Number);\n      *v22 = *((_QWORD *)a1 + Number);\n      v22[Number] = v23;\n      ++v78;\n    }\n    if (pua_db) {\n      if ((int)((__int64(__fastcall **)(_QWORD, void *))pua_dbf)[Number](\n              pua_db, &db_table) >= Number) {\n        if (((int(__fastcall *)(_QWORD, __int64 *, _QWORD, _DWORD *, _QWORD))\n                 pua_dbf[Number])(pua_db, v73, Number L, v72, v78) >= Number) {\n          result = Number L;\n        } else {\n          if ((int)get_debug_level(&unk_15A30, Number L) >= Number &&\n              !dprint_crit) {\n            v77 = Number;\n            ++dprint_crit;\n            if (log_stderr) {\n              if (log_color)\n                dprint_color(v77);\n              if (log_prefix_val) {\n                v56 = (const char *)*log_prefix_val;\n                v57 = *((_DWORD *)log_prefix_val + Number);\n                v58 = (const char *)*((_QWORD *)&log_level_info +\n                                      Number * (int)(v77 + Number));\n                v59 = my_pid();\n                fprintf(stderr, String, process_no, v59, v58, v57, v56, String,\n                        String);\n              } else {\n                v60 = (const char *)*((_QWORD *)&log_level_info +\n                                      Number * (int)(v77 + Number));\n                v61 = my_pid();\n                fprintf(stderr, String, process_no, v61, v60, String, String);\n              }\n              if (log_color)\n                dprint_color_reset();\n            } else if (log_prefix_val) {\n              v62 = (void (*)(_QWORD, const char *, ...))km_log_func;\n              v63 = *log_prefix_val;\n              v64 = *((_DWORD *)log_prefix_val + Number);\n              v65 = *((_QWORD *)&log_level_info + Number * (int)(v77 + Number));\n              v66 = *((_DWORD *)&log_level_info + Number * (int)(v77 + Number) +\n                      Number);\n              v67 = get_debug_facility(&unk_15A30, Number L);\n              v62(v66 | v67, String, v65, v64, v63, String, String);\n            } else {\n              v68 = (void (*)(_QWORD, const char *, ...))km_log_func;\n              v69 = (const char *)*((_QWORD *)&log_level_info +\n                                    Number * (int)(v77 + Number));\n              v70 = *((_DWORD *)&log_level_info + Number * (int)(v77 + Number) +\n                      Number);\n              v71 = get_debug_facility(&unk_15A30, Number L);\n              v68(v70 | v71, String, v69, String, String);\n            }\n            --dprint_crit;\n          }\n          result = Number;\n        }\n      } else {\n        if ((int)get_debug_level(&unk_15A30, Number L) >= Number &&\n            !dprint_crit) {\n          v76 = Number;\n          ++dprint_crit;\n          if (log_stderr) {\n            if (log_color)\n              dprint_color(v76);\n            if (log_prefix_val) {\n              v40 = (const char *)*log_prefix_val;\n              v41 = *((_DWORD *)log_prefix_val + Number);\n              v42 = (const char *)*((_QWORD *)&log_level_info +\n                                    Number * (int)(v76 + Number));\n              v43 = my_pid();\n              fprintf(stderr, String, process_no, v43, v42, v41, v40, String,\n                      String);\n            } else {\n              v44 = (const char *)*((_QWORD *)&log_level_info +\n                                    Number * (int)(v76 + Number));\n              v45 = my_pid();\n              fprintf(stderr, String, process_no, v45, v44, String, String);\n            }\n            if (log_color)\n              dprint_color_reset();\n          } else if (log_prefix_val) {\n            v46 = (void (*)(_QWORD, const char *, ...))km_log_func;\n            v47 = *log_prefix_val;\n            v48 = *((_DWORD *)log_prefix_val + Number);\n            v49 = *((_QWORD *)&log_level_info + Number * (int)(v76 + Number));\n            v50 = *((_DWORD *)&log_level_info + Number * (int)(v76 + Number) +\n                    Number);\n            v51 = get_debug_facility(&unk_15A30, Number L);\n            v46(v50 | v51, String, v49, v48, v47, String, String);\n          } else {\n            v52 = (void (*)(_QWORD, const char *, ...))km_log_func;\n            v53 = (const char *)*((_QWORD *)&log_level_info +\n                                  Number * (int)(v76 + Number));\n            v54 = *((_DWORD *)&log_level_info + Number * (int)(v76 + Number) +\n                    Number);\n            v55 = get_debug_facility(&unk_15A30, Number L);\n            v52(v54 | v55, String, v53, String, String);\n          }\n          --dprint_crit;\n        }\n        result = Number;\n      }\n    } else {\n      if ((int)get_debug_level(&unk_15A30, Number L) >= Number &&\n          !dprint_crit) {\n        v75 = Number;\n        ++dprint_crit;\n        if (log_stderr) {\n          if (log_color)\n            dprint_color(v75);\n          if (log_prefix_val) {\n            v24 = (const char *)*log_prefix_val;\n            v25 = *((_DWORD *)log_prefix_val + Number);\n            v26 = (const char *)*((_QWORD *)&log_level_info +\n                                  Number * (int)(v75 + Number));\n            v27 = my_pid();\n            fprintf(stderr, String, process_no, v27, v26, v25, v24, String,\n                    String);\n          } else {\n            v28 = (const char *)*((_QWORD *)&log_level_info +\n                                  Number * (int)(v75 + Number));\n            v29 = my_pid();\n            fprintf(stderr, String, process_no, v29, v28, String, String);\n          }\n          if (log_color)\n            dprint_color_reset();\n        } else if (log_prefix_val) {\n          v30 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v31 = *log_prefix_val;\n          v32 = *((_DWORD *)log_prefix_val + Number);\n          v33 = *((_QWORD *)&log_level_info + Number * (int)(v75 + Number));\n          v34 = *((_DWORD *)&log_level_info + Number * (int)(v75 + Number) +\n                  Number);\n          v35 = get_debug_facility(&unk_15A30, Number L);\n          v30(v34 | v35, String, v33, v32, v31, String, String);\n        } else {\n          v36 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v37 = (const char *)*((_QWORD *)&log_level_info +\n                                Number * (int)(v75 + Number));\n          v38 = *((_DWORD *)&log_level_info + Number * (int)(v75 + Number) +\n                  Number);\n          v39 = get_debug_facility(&unk_15A30, Number L);\n          v36(v38 | v39, String, v37, String, String);\n        }\n        --dprint_crit;\n      }\n      result = Number;\n    }\n  } else {\n    if ((int)get_debug_level(&unk_15A30, Number L) >= Number && !dprint_crit) {\n      v74 = Number;\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color(v74);\n        if (log_prefix_val) {\n          v1 = (const char *)*log_prefix_val;\n          v2 = *((_DWORD *)log_prefix_val + Number);\n          v3 = (const char *)*((_QWORD *)&log_level_info +\n                               Number * (int)(v74 + Number));\n          v4 = my_pid();\n          fprintf(stderr, String, process_no, v4, v3, v2, v1, String, String);\n        } else {\n          v5 = (const char *)*((_QWORD *)&log_level_info +\n                               Number * (int)(v74 + Number));\n          v6 = my_pid();\n          fprintf(stderr, String, process_no, v6, v5, String, String);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v7 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v8 = *log_prefix_val;\n        v9 = *((_DWORD *)log_prefix_val + Number);\n        v10 = *((_QWORD *)&log_level_info + Number * (int)(v74 + Number));\n        v11 = *((_DWORD *)&log_level_info + Number * (int)(v74 + Number) +\n                Number);\n        v12 = get_debug_facility(&unk_15A30, Number L);\n        v7(v11 | v12, String, v10, v9, v8, String, String);\n      } else {\n        v13 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v14 = (const char *)*((_QWORD *)&log_level_info +\n                              Number * (int)(v74 + Number));\n        v15 = *((_DWORD *)&log_level_info + Number * (int)(v74 + Number) +\n                Number);\n        v16 = get_debug_facility(&unk_15A30, Number L);\n        v13(v15 | v16, String, v14, String, String);\n      }\n      --dprint_crit;\n    }\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl delete_dialog_puadb(ua_pres_t *<span class=\"supfact\">pres</span>) {\n  const char *v1;\n  int v2;\n  const char *v3;\n  unsigned int v4;\n  const char *v5;\n  unsigned int v6;\n  void (*v7)(_QWORD, const char *, ...);\n  __int64 v8;\n  unsigned int v9;\n  __int64 v10;\n  int v11;\n  unsigned int v12;\n  void (*v13)(_QWORD, const char *, ...);\n  const char *v14;\n  int v15;\n  unsigned int v16;\n  int result;\n  char **v18;\n  char *v19;\n  char **v20;\n  char *v21;\n  char **v22;\n  char *v23;\n  const char *v24;\n  int v25;\n  const char *v26;\n  unsigned int v27;\n  const char *v28;\n  unsigned int v29;\n  void (*v30)(_QWORD, const char *, ...);\n  __int64 v31;\n  unsigned int v32;\n  __int64 v33;\n  int v34;\n  unsigned int v35;\n  void (*v36)(_QWORD, const char *, ...);\n  const char *v37;\n  int v38;\n  unsigned int v39;\n  const char *v40;\n  int v41;\n  const char *v42;\n  unsigned int v43;\n  const char *v44;\n  unsigned int v45;\n  void (*v46)(_QWORD, const char *, ...);\n  __int64 v47;\n  unsigned int v48;\n  __int64 v49;\n  int v50;\n  unsigned int v51;\n  void (*v52)(_QWORD, const char *, ...);\n  const char *v53;\n  int v54;\n  unsigned int v55;\n  const char *v56;\n  int v57;\n  const char *v58;\n  unsigned int v59;\n  const char *v60;\n  unsigned int v61;\n  void (*v62)(_QWORD, const char *, ...);\n  __int64 v63;\n  unsigned int v64;\n  __int64 v65;\n  int v66;\n  unsigned int v67;\n  void (*v68)(_QWORD, const char *, ...);\n  const char *v69;\n  int v70;\n  unsigned int v71;\n  db_val_t <span class=\"supfact\">q_vals</span>[Number];\n  db_key_t <span class=\"supfact\">q_cols</span>[Number];\n  int <span class=\"supfact\">__llevel</span>;\n  int <span class=\"supfact\">__llevel_0</span>;\n  int <span class=\"supfact\">__llevel_1</span>;\n  int <span class=\"supfact\">__llevel_2</span>;\n  int <span class=\"supfact\">n_query_cols</span>;\n  _OWORD <span class=\"supfact\">v79</span>[Number];\n  <span class=\"supfact\">n_query_cols</span> = Number;\n  if (<span class=\"supfact\">pres</span>) {\n    <span class=\"supfact\">q_cols</span>[<span class=\"supfact\">n_query_cols</span>] = &str_call_id_col;\n    <span class=\"supfact\">q_vals</span>[<span class=\"supfact\">n_query_cols</span>].type = DB1_STR;\n    *((_DWORD *)&<span class=\"supfact\">v79</span>[Number * <span class=\"supfact\">n_query_cols</span> -\n                                     Number] -\n      Number) = Number;\n    v18 = (char **)&<span class=\"supfact\">v79</span>[Number * <span class=\"supfact\">n_query_cols</span> -\n                                        Number];\n    v19 = *(char **)&<span class=\"supfact\">pres</span>->call_id.len;\n    *v18 = <span class=\"supfact\">pres</span>->call_id.s;\n    v18[Number] = v19;\n    <span class=\"supfact\">q_cols</span>[++<span class=\"supfact\">n_query_cols</span>] = &str_from_tag_col;\n    <span class=\"supfact\">q_vals</span>[<span class=\"supfact\">n_query_cols</span>].type = DB1_STR;\n    *((_DWORD *)&<span class=\"supfact\">v79</span>[Number * <span class=\"supfact\">n_query_cols</span> -\n                                     Number] -\n      Number) = Number;\n    v20 = (char **)&<span class=\"supfact\">v79</span>[Number * <span class=\"supfact\">n_query_cols</span> -\n                                        Number];\n    v21 = *(char **)&<span class=\"supfact\">pres</span>->from_tag.len;\n    *v20 = <span class=\"supfact\">pres</span>->from_tag.s;\n    v20[Number] = v21;\n    ++<span class=\"supfact\">n_query_cols</span>;\n    if (<span class=\"supfact\">pres</span>->to_tag.len > Number &&\n        <span class=\"supfact\">pres</span>->to_tag.s) {\n      <span class=\"supfact\">q_cols</span>[<span class=\"supfact\">n_query_cols</span>] = &str_to_tag_col;\n      <span class=\"supfact\">q_vals</span>[<span class=\"supfact\">n_query_cols</span>].type = DB1_STR;\n      *((_DWORD *)&<span class=\"supfact\">v79</span>[Number * <span class=\"supfact\">n_query_cols</span> -\n                                       Number] -\n        Number) = Number;\n      v22 =\n          (char **)&<span class=\"supfact\">v79</span>[Number * <span class=\"supfact\">n_query_cols</span> -\n                                        Number];\n      v23 = *(char **)&<span class=\"supfact\">pres</span>->to_tag.len;\n      *v22 = <span class=\"supfact\">pres</span>->to_tag.s;\n      v22[Number] = v23;\n      ++<span class=\"supfact\">n_query_cols</span>;\n    }\n    if (pua_db) {\n      if (((int(__fastcall *)(_QWORD, void *))pua_dbf[Number])(\n              pua_db, &db_table) >= Number) {\n        if (((int(__fastcall *)(_QWORD, db_key_t *, _QWORD, db_val_t *,\n                                _QWORD))pua_dbf[Number])(\n                pua_db, <span class=\"supfact\">q_cols</span>, Number L,\n                <span class=\"supfact\">q_vals</span>,\n                (unsigned int)<span class=\"supfact\">n_query_cols</span>) >= Number) {\n          result = Number;\n        } else {\n          if ((int)get_debug_level(&unk_15A30, Number L) >= Number &&\n              !dprint_crit) {\n            <span class=\"supfact\">__llevel_2</span> = Number;\n            ++dprint_crit;\n            if (log_stderr) {\n              if (log_color)\n                dprint_color((unsigned int)<span class=\"supfact\">__llevel_2</span>);\n              if (log_prefix_val) {\n                v56 = (const char *)*log_prefix_val;\n                v57 = *((_DWORD *)log_prefix_val + Number);\n                v58 = (const char *)*((_QWORD *)&log_level_info_0 +\n                                      Number * <span class=\"supfact\">__llevel_2</span> +\n                                      Number);\n                v59 = my_pid();\n                fprintf(stderr, String, process_no, v59, v58, v57, v56, String,\n                        String);\n              } else {\n                v60 = (const char *)*((_QWORD *)&log_level_info_0 +\n                                      Number * <span class=\"supfact\">__llevel_2</span> +\n                                      Number);\n                v61 = my_pid();\n                fprintf(stderr, String, process_no, v61, v60, String, String);\n              }\n              if (log_color)\n                dprint_color_reset();\n            } else if (log_prefix_val) {\n              v62 = (void (*)(_QWORD, const char *, ...))km_log_func;\n              v63 = *log_prefix_val;\n              v64 = *((_DWORD *)log_prefix_val + Number);\n              v65 = *((_QWORD *)&log_level_info_0 +\n                      Number * <span class=\"supfact\">__llevel_2</span> + Number);\n              v66 = *((_DWORD *)&log_level_info_0 +\n                      Number * <span class=\"supfact\">__llevel_2</span> + Number);\n              v67 = get_debug_facility(&unk_15A30, Number L);\n              v62(v66 | v67, String, v65, v64, v63, String, String);\n            } else {\n              v68 = (void (*)(_QWORD, const char *, ...))km_log_func;\n              v69 =\n                  (const char *)*((_QWORD *)&log_level_info_0 +\n                                  Number * <span class=\"supfact\">__llevel_2</span> + Number);\n              v70 = *((_DWORD *)&log_level_info_0 +\n                      Number * <span class=\"supfact\">__llevel_2</span> + Number);\n              v71 = get_debug_facility(&unk_15A30, Number L);\n              v68(v70 | v71, String, v69, String, String);\n            }\n            --dprint_crit;\n          }\n          result = Number;\n        }\n      } else {\n        if ((int)get_debug_level(&unk_15A30, Number L) >= Number &&\n            !dprint_crit) {\n          <span class=\"supfact\">__llevel_1</span> = Number;\n          ++dprint_crit;\n          if (log_stderr) {\n            if (log_color)\n              dprint_color((unsigned int)<span class=\"supfact\">__llevel_1</span>);\n            if (log_prefix_val) {\n              v40 = (const char *)*log_prefix_val;\n              v41 = *((_DWORD *)log_prefix_val + Number);\n              v42 =\n                  (const char *)*((_QWORD *)&log_level_info_0 +\n                                  Number * <span class=\"supfact\">__llevel_1</span> + Number);\n              v43 = my_pid();\n              fprintf(stderr, String, process_no, v43, v42, v41, v40, String,\n                      String);\n            } else {\n              v44 =\n                  (const char *)*((_QWORD *)&log_level_info_0 +\n                                  Number * <span class=\"supfact\">__llevel_1</span> + Number);\n              v45 = my_pid();\n              fprintf(stderr, String, process_no, v45, v44, String, String);\n            }\n            if (log_color)\n              dprint_color_reset();\n          } else if (log_prefix_val) {\n            v46 = (void (*)(_QWORD, const char *, ...))km_log_func;\n            v47 = *log_prefix_val;\n            v48 = *((_DWORD *)log_prefix_val + Number);\n            v49 = *((_QWORD *)&log_level_info_0 +\n                    Number * <span class=\"supfact\">__llevel_1</span> + Number);\n            v50 = *((_DWORD *)&log_level_info_0 +\n                    Number * <span class=\"supfact\">__llevel_1</span> + Number);\n            v51 = get_debug_facility(&unk_15A30, Number L);\n            v46(v50 | v51, String, v49, v48, v47, String, String);\n          } else {\n            v52 = (void (*)(_QWORD, const char *, ...))km_log_func;\n            v53 = (const char *)*((_QWORD *)&log_level_info_0 +\n                                  Number * <span class=\"supfact\">__llevel_1</span> + Number);\n            v54 = *((_DWORD *)&log_level_info_0 +\n                    Number * <span class=\"supfact\">__llevel_1</span> + Number);\n            v55 = get_debug_facility(&unk_15A30, Number L);\n            v52(v54 | v55, String, v53, String, String);\n          }\n          --dprint_crit;\n        }\n        result = Number;\n      }\n    } else {\n      if ((int)get_debug_level(&unk_15A30, Number L) >= Number &&\n          !dprint_crit) {\n        <span class=\"supfact\">__llevel_0</span> = Number;\n        ++dprint_crit;\n        if (log_stderr) {\n          if (log_color)\n            dprint_color((unsigned int)<span class=\"supfact\">__llevel_0</span>);\n          if (log_prefix_val) {\n            v24 = (const char *)*log_prefix_val;\n            v25 = *((_DWORD *)log_prefix_val + Number);\n            v26 = (const char *)*((_QWORD *)&log_level_info_0 +\n                                  Number * <span class=\"supfact\">__llevel_0</span> + Number);\n            v27 = my_pid();\n            fprintf(stderr, String, process_no, v27, v26, v25, v24, String,\n                    String);\n          } else {\n            v28 = (const char *)*((_QWORD *)&log_level_info_0 +\n                                  Number * <span class=\"supfact\">__llevel_0</span> + Number);\n            v29 = my_pid();\n            fprintf(stderr, String, process_no, v29, v28, String, String);\n          }\n          if (log_color)\n            dprint_color_reset();\n        } else if (log_prefix_val) {\n          v30 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v31 = *log_prefix_val;\n          v32 = *((_DWORD *)log_prefix_val + Number);\n          v33 = *((_QWORD *)&log_level_info_0 +\n                  Number * <span class=\"supfact\">__llevel_0</span> + Number);\n          v34 = *((_DWORD *)&log_level_info_0 +\n                  Number * <span class=\"supfact\">__llevel_0</span> + Number);\n          v35 = get_debug_facility(&unk_15A30, Number L);\n          v30(v34 | v35, String, v33, v32, v31, String, String);\n        } else {\n          v36 = (void (*)(_QWORD, const char *, ...))km_log_func;\n          v37 = (const char *)*((_QWORD *)&log_level_info_0 +\n                                Number * <span class=\"supfact\">__llevel_0</span> + Number);\n          v38 = *((_DWORD *)&log_level_info_0 +\n                  Number * <span class=\"supfact\">__llevel_0</span> + Number);\n          v39 = get_debug_facility(&unk_15A30, Number L);\n          v36(v38 | v39, String, v37, String, String);\n        }\n        --dprint_crit;\n      }\n      result = Number;\n    }\n  } else {\n    if ((int)get_debug_level(&unk_15A30, Number L) >= Number && !dprint_crit) {\n      <span class=\"supfact\">__llevel</span> = Number;\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color((unsigned int)<span class=\"supfact\">__llevel</span>);\n        if (log_prefix_val) {\n          v1 = (const char *)*log_prefix_val;\n          v2 = *((_DWORD *)log_prefix_val + Number);\n          v3 = (const char *)*((_QWORD *)&log_level_info_0 +\n                               Number * <span class=\"supfact\">__llevel</span> + Number);\n          v4 = my_pid();\n          fprintf(stderr, String, process_no, v4, v3, v2, v1, String, String);\n        } else {\n          v5 = (const char *)*((_QWORD *)&log_level_info_0 +\n                               Number * <span class=\"supfact\">__llevel</span> + Number);\n          v6 = my_pid();\n          fprintf(stderr, String, process_no, v6, v5, String, String);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v7 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v8 = *log_prefix_val;\n        v9 = *((_DWORD *)log_prefix_val + Number);\n        v10 = *((_QWORD *)&log_level_info_0 +\n                Number * <span class=\"supfact\">__llevel</span> + Number);\n        v11 = *((_DWORD *)&log_level_info_0 +\n                Number * <span class=\"supfact\">__llevel</span> + Number);\n        v12 = get_debug_facility(&unk_15A30, Number L);\n        v7(v11 | v12, String, v10, v9, v8, String, String);\n      } else {\n        v13 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v14 = (const char *)*((_QWORD *)&log_level_info_0 +\n                              Number * <span class=\"supfact\">__llevel</span> + Number);\n        v15 = *((_DWORD *)&log_level_info_0 +\n                Number * <span class=\"supfact\">__llevel</span> + Number);\n        v16 = get_debug_facility(&unk_15A30, Number L);\n        v13(v15 | v16, String, v14, String, String);\n      }\n      --dprint_crit;\n    }\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "__unk__", "ref_name": "pres", "ref_type": "ua_pres_t *"}, {"name": "v72", "type": "__unk__", "pred_name": "__unk__", "ref_name": "q_vals", "ref_type": "db_val_t[3]"}, {"name": "v73", "type": "__unk__", "pred_name": "__unk__", "ref_name": "q_cols", "ref_type": "db_key_t[3]"}, {"name": "v74", "type": "int", "pred_name": "v74", "ref_name": "__llevel", "ref_type": "int"}, {"name": "v75", "type": "int", "pred_name": "v75", "ref_name": "__llevel_0", "ref_type": "int"}, {"name": "v76", "type": "int", "pred_name": "v76", "ref_name": "__llevel_1", "ref_type": "int"}, {"name": "v77", "type": "int", "pred_name": "v77", "ref_name": "__llevel_2", "ref_type": "int"}, {"name": "v78", "type": "int", "pred_name": "v78", "ref_name": "n_query_cols", "ref_type": "int"}, {"name": "v79", "type": "__int128[4]", "pred_name": "v79", "ref_name": "v79", "ref_type": "_OWORD[3]"}], "body_in_train": false}, {"repo_owner": "jzeng4", "repo_name": "top", "path": "jzeng4/top/5bedebeb5f2c390f9f6cb186258c0f717e6d8b5478f8784c27f4a75bb480c02f", "path_in_repo": "jzeng4/top//hw/display/exynos4210_fimd.o", "objdump": "00000000000023f3 <draw_line_mapcolor>:\n    23f3:\t55                   \tpush   %rbp\n    23f4:\t48 89 e5             \tmov    %rsp,%rbp\n    23f7:\t48 83 ec 50          \tsub    $0x50,%rsp\n    23fb:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    23ff:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    2403:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    2407:\t89 c8                \tmov    %ecx,%eax\n    2409:\t88 45 b4             \tmov    %al,-0x4c(%rbp)\n    240c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2413:\t00 00 \n    2415:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2419:\t31 c0                \txor    %eax,%eax\n    241b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    241f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    2423:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2427:\t0f b7 80 5c 04 00 00 \tmovzwl 0x45c(%rax),%eax\n    242e:\t0f b7 d0             \tmovzwl %ax,%edx\n    2431:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2435:\t0f b7 80 58 04 00 00 \tmovzwl 0x458(%rax),%eax\n    243c:\t0f b7 c0             \tmovzwl %ax,%eax\n    243f:\t29 c2                \tsub    %eax,%edx\n    2441:\t89 d0                \tmov    %edx,%eax\n    2443:\t83 c0 01             \tadd    $0x1,%eax\n    2446:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    2449:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    244d:\t8b 40 28             \tmov    0x28(%rax),%eax\n    2450:\t25 ff ff ff 00       \tand    $0xffffff,%eax\n    2455:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    2458:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    245c:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    245f:\t48 89 d6             \tmov    %rdx,%rsi\n    2462:\t89 c7                \tmov    %eax,%edi\n    2464:\te8 2c e6 ff ff       \tcallq  a95 <pixel_888_to_rgb>\n    2469:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    246d:\t48 8b 88 50 04 00 00 \tmov    0x450(%rax),%rcx\n    2474:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    2477:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    247b:\t89 d6                \tmov    %edx,%esi\n    247d:\t48 89 c7             \tmov    %rax,%rdi\n    2480:\tff d1                \tcallq  *%rcx\n    2482:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    2485:\t80 7d b4 00          \tcmpb   $0x0,-0x4c(%rbp)\n    2489:\t74 30                \tje     24bb <draw_line_mapcolor+0xc8>\n    248b:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n    248f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2493:\t48 89 d6             \tmov    %rdx,%rsi\n    2496:\t48 89 c7             \tmov    %rax,%rdi\n    2499:\te8 91 e9 ff ff       \tcallq  e2f <get_pixel_ifb>\n    249e:\t48 98                \tcltq   \n    24a0:\t48 01 45 e0          \tadd    %rax,-0x20(%rbp)\n    24a4:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    24a8:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    24ac:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    24b0:\t48 89 ce             \tmov    %rcx,%rsi\n    24b3:\t48 89 c7             \tmov    %rax,%rdi\n    24b6:\te8 28 f2 ff ff       \tcallq  16e3 <exynos4210_fimd_blend_pixel>\n    24bb:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    24bf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    24c3:\t48 89 d6             \tmov    %rdx,%rsi\n    24c6:\t48 89 c7             \tmov    %rax,%rdi\n    24c9:\te8 e8 e8 ff ff       \tcallq  db6 <put_pixel_ifb>\n    24ce:\t48 98                \tcltq   \n    24d0:\t48 01 45 b8          \tadd    %rax,-0x48(%rbp)\n    24d4:\t83 6d d8 01          \tsubl   $0x1,-0x28(%rbp)\n    24d8:\t83 7d d8 00          \tcmpl   $0x0,-0x28(%rbp)\n    24dc:\t0f 85 76 ff ff ff    \tjne    2458 <draw_line_mapcolor+0x65>\n    24e2:\t90                   \tnop\n    24e3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    24e7:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    24ee:\t00 00 \n    24f0:\t74 05                \tje     24f7 <draw_line_mapcolor+0x104>\n    24f2:\te8 00 00 00 00       \tcallq  24f7 <draw_line_mapcolor+0x104>\n    24f7:\tc9                   \tleaveq \n    24f8:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall draw_line_mapcolor(__int64 a1, __int64 a2,\n                                               __int64 a3, char a4) {\n  __int64 v6;\n  int v7;\n  int v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  unsigned __int64 v12;\n  v6 = a3;\n  v12 = __readfsqword(Number);\n  v9 = a3;\n  v7 = *(unsigned __int16 *)(a1 + Number) - *(unsigned __int16 *)(a1 + Number) +\n       Number;\n  v8 = *(_DWORD *)(a1 + Number) & Number;\n  do {\n    pixel_888_to_rgb(v8, (__int64)&v10);\n    HIDWORD(v10) = (*(__int64(__fastcall **)(__int64, _QWORD))(a1 + Number))(\n        a1, HIDWORD(v10));\n    if (a4) {\n      v9 += (int)get_pixel_ifb(v9, (__int64)&v11);\n      exynos4210_fimd_blend_pixel((_DWORD *)a1, v11, (__int64)&v10);\n    }\n    v6 += (int)put_pixel_ifb(v10, v6);\n    --v7;\n  } while (v7);\n  return __readfsqword(Number) ^ v12;\n}", "code_t": "void __cdecl draw_line_mapcolor(Exynos4210fimdWindow_0 *<span class=\"supfact\">w</span>,\n                                uint8_t *<span class=\"supfact\">src</span>,\n                                uint8_t *<span class=\"supfact\">dst</span>,\n                                bool <span class=\"supfact\">blend</span>) {\n  rgba v4;\n  rgba v5;\n  uint8_t *<span class=\"supfact\">dsta</span>;\n  int <span class=\"supfact\">width</span>;\n  uint32_t <span class=\"supfact\">map_color</span>;\n  const uint8_t *<span class=\"supfact\">ifb</span>;\n  rgba <span class=\"supfact\">p</span>;\n  rgba <span class=\"supfact\">p_old</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">dsta</span> = <span class=\"supfact\">dst</span>;\n  <span class=\"supfact\">v14</span> = __readfsqword(Number);\n  <span class=\"supfact\">ifb</span> = <span class=\"supfact\">dst</span>;\n  <span class=\"supfact\">width</span> =\n      <span class=\"supfact\">w</span>->rightbot_x - <span class=\"supfact\">w</span>->lefttop_x + Number;\n  <span class=\"supfact\">map_color</span> = <span class=\"supfact\">w</span>->winmap & Number;\n  do {\n    pixel_888_to_rgb(<span class=\"supfact\">map_color</span>, &<span class=\"supfact\">p</span>);\n    <span class=\"supfact\">p</span>.a =\n        <span class=\"supfact\">w</span>->get_alpha(<span class=\"supfact\">w</span>, <span class=\"supfact\">p</span>.a);\n    if (<span class=\"supfact\">blend</span>) {\n      <span class=\"supfact\">ifb</span> +=\n          get_pixel_ifb(<span class=\"supfact\">ifb</span>, &<span class=\"supfact\">p_old</span>);\n      v4 = <span class=\"supfact\">p_old</span>;\n      exynos4210_fimd_blend_pixel(<span class=\"supfact\">w</span>, v4, &<span class=\"supfact\">p</span>);\n    }\n    v5 = <span class=\"supfact\">p</span>;\n    <span class=\"supfact\">dsta</span> += put_pixel_ifb(v5, <span class=\"supfact\">dsta</span>);\n    --<span class=\"supfact\">width</span>;\n  } while (<span class=\"supfact\">width</span>);\n}", "var": [{"name": "a1", "type": "Exynos4210fimdWindow_0 *", "pred_name": "w", "ref_name": "w", "ref_type": "Exynos4210fimdWindow_0 *"}, {"name": "a2", "type": "uint8_t *", "pred_name": "src", "ref_name": "src", "ref_type": "uint8_t *"}, {"name": "a3", "type": "uint8_t *", "pred_name": "dst", "ref_name": "dst", "ref_type": "uint8_t *"}, {"name": "a4", "type": "bool", "pred_name": "blend", "ref_name": "blend", "ref_type": "bool"}, {"name": "v6", "type": "uint8_t *", "pred_name": "dsta", "ref_name": "dsta", "ref_type": "uint8_t *"}, {"name": "v7", "type": "int", "pred_name": "width", "ref_name": "width", "ref_type": "int"}, {"name": "v8", "type": "uint32_t", "pred_name": "data", "ref_name": "map_color", "ref_type": "uint32_t"}, {"name": "v9", "type": "const uint8_t *", "pred_name": "ifb", "ref_name": "ifb", "ref_type": "const uint8_t *"}, {"name": "v10", "type": "struct rgba { uint8_t r; uint8_t g; uint8_t b; PADDING (1); uint32_t a; }", "pred_name": "p", "ref_name": "p", "ref_type": "struct rgba { uint8_t r; uint8_t g; uint8_t b; PADDING (1); uint32_t a; }"}, {"name": "v11", "type": "struct rgba { uint8_t r; uint8_t g; uint8_t b; PADDING (1); uint32_t a; }", "pred_name": "p_old", "ref_name": "p_old", "ref_type": "struct rgba { uint8_t r; uint8_t g; uint8_t b; PADDING (1); uint32_t a; }"}, {"name": "v12", "type": "unsigned __int64", "pred_name": "v11", "ref_name": "v14", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "wsmoses", "repo_name": "6.828-qemu", "path": "wsmoses/6.828-qemu/329baae8e24b73eb32aeb6dda3f5c3eb3fa60a179a528dcc87ea651faf48784c", "path_in_repo": "wsmoses/6.828-qemu//hw/pci/pci.o", "objdump": "000000000000019f <vmstate_register>:\n     19f:\t55                   \tpush   %rbp\n     1a0:\t48 89 e5             \tmov    %rsp,%rbp\n     1a3:\t48 83 ec 20          \tsub    $0x20,%rsp\n     1a7:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     1ab:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n     1ae:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n     1b2:\t48 89 4d e0          \tmov    %rcx,-0x20(%rbp)\n     1b6:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n     1ba:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     1be:\t8b 75 f4             \tmov    -0xc(%rbp),%esi\n     1c1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1c5:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n     1cb:\t41 b8 ff ff ff ff    \tmov    $0xffffffff,%r8d\n     1d1:\t48 89 c7             \tmov    %rax,%rdi\n     1d4:\te8 00 00 00 00       \tcallq  1d9 <vmstate_register+0x3a>\n     1d9:\tc9                   \tleaveq \n     1da:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vmstate_register(__int64 a1, unsigned int a2, __int64 a3,\n                                    __int64 a4) {\n  return vmstate_register_with_alias_id(a1, a2, a3, a4, Number, Number L, a4,\n                                        a3);\n}", "code_t": "int __cdecl vmstate_register(DeviceState_0 *<span class=\"supfact\">dev</span>,\n                             int <span class=\"supfact\">instance_id</span>,\n                             const VMStateDescription_0 *<span class=\"supfact\">vmsd</span>,\n                             void *<span class=\"supfact\">opaque</span>) {\n  return vmstate_register_with_alias_id(\n      <span class=\"supfact\">dev</span>, (unsigned int)<span class=\"supfact\">instance_id</span>,\n      <span class=\"supfact\">vmsd</span>, <span class=\"supfact\">opaque</span>, Number, Number L,\n      <span class=\"supfact\">opaque</span>, <span class=\"supfact\">vmsd</span>);\n}", "var": [{"name": "a1", "type": "DeviceState_0 *", "pred_name": "dev", "ref_name": "dev", "ref_type": "DeviceState_0 *"}, {"name": "a2", "type": "int", "pred_name": "instance_id", "ref_name": "instance_id", "ref_type": "int"}, {"name": "a3", "type": "const VMStateDescription_0 *", "pred_name": "vmsd", "ref_name": "vmsd", "ref_type": "const VMStateDescription_0 *"}, {"name": "a4", "type": "void *", "pred_name": "opaque", "ref_name": "opaque", "ref_type": "void *"}], "body_in_train": true}, {"repo_owner": "anthony-kolesov", "repo_name": "arc_ltp", "path": "anthony-kolesov/arc_ltp/fd8a7d93710d49f46b8fdf272b8aec1efbafd26a221f454671a2469b5b92b1ff", "path_in_repo": "anthony-kolesov/arc_ltp/pan/ltp-pan", "objdump": "", "code_s": "FILE *freopen(const char *filename, const char *modes, FILE *stream) {\n  return freopen(filename, modes, stream);\n}", "code_t": "FILE *freopen(const char *<span class=\"supfact\">filename</span>,\n              const char *<span class=\"supfact\">modes</span>, FILE *<span class=\"supfact\">stream</span>) {\n  return freopen(<span class=\"supfact\">filename</span>, <span class=\"supfact\">modes</span>,\n                 <span class=\"supfact\">stream</span>);\n}", "var": [{"name": "filename", "type": "const char *", "pred_name": "filename", "ref_name": "filename", "ref_type": "const char *"}, {"name": "modes", "type": "const char *", "pred_name": "modes", "ref_name": "modes", "ref_type": "const char *"}, {"name": "stream", "type": "FILE *", "pred_name": "stream", "ref_name": "stream", "ref_type": "FILE *"}], "body_in_train": true}, {"repo_owner": "jtanx", "repo_name": "libclipboard", "path": "jtanx/libclipboard/a5bb405315a8c227b400ae53e138e8a073501fc810add8d462a26e6d2a667d6c", "path_in_repo": "jtanx/libclipboard/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "0000000000000000 <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  14:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  1b:\t00 \n  1c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  20:\t48 8b 00             \tmov    (%rax),%rax\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x2b>\n  2b:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  2f:\t0f 92 c0             \tsetb   %al\n  32:\t84 c0                \ttest   %al,%al\n  34:\t0f 84 10 01 00 00    \tje     14a <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x14a>\n  3a:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  3e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42:\t48 89 d6             \tmov    %rdx,%rsi\n  45:\t48 89 c7             \tmov    %rax,%rdi\n  48:\te8 00 00 00 00       \tcallq  4d <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x4d>\n  4d:\t0f b6 00             \tmovzbl (%rax),%eax\n  50:\t84 c0                \ttest   %al,%al\n  52:\t0f 95 c0             \tsetne  %al\n  55:\t84 c0                \ttest   %al,%al\n  57:\t0f 85 df 00 00 00    \tjne    13c <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x13c>\n  5d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  61:\t48 8b 00             \tmov    (%rax),%rax\n  64:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  68:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  6c:\t48 89 ce             \tmov    %rcx,%rsi\n  6f:\t48 89 c7             \tmov    %rax,%rdi\n  72:\te8 00 00 00 00       \tcallq  77 <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x77>\n  77:\t83 f0 01             \txor    $0x1,%eax\n  7a:\t84 c0                \ttest   %al,%al\n  7c:\t0f 85 bd 00 00 00    \tjne    13f <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x13f>\n  82:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  86:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  8a:\t48 89 d6             \tmov    %rdx,%rsi\n  8d:\t48 89 c7             \tmov    %rax,%rdi\n  90:\te8 00 00 00 00       \tcallq  95 <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x95>\n  95:\tc6 00 01             \tmovb   $0x1,(%rax)\n  98:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  9c:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n  a0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  a4:\t48 89 c6             \tmov    %rax,%rsi\n  a7:\t48 89 d7             \tmov    %rdx,%rdi\n  aa:\te8 00 00 00 00       \tcallq  af <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0xaf>\n  af:\t48 8b 00             \tmov    (%rax),%rax\n  b2:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n  b6:\t74 31                \tje     e9 <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0xe9>\n  b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  bc:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n  c0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  c4:\t48 89 c6             \tmov    %rax,%rsi\n  c7:\t48 89 d7             \tmov    %rdx,%rdi\n  ca:\te8 00 00 00 00       \tcallq  cf <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0xcf>\n  cf:\t48 8b 08             \tmov    (%rax),%rcx\n  d2:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  d6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  da:\t48 89 ce             \tmov    %rcx,%rsi\n  dd:\t48 89 c7             \tmov    %rax,%rdi\n  e0:\te8 00 00 00 00       \tcallq  e5 <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0xe5>\n  e5:\t84 c0                \ttest   %al,%al\n  e7:\t74 07                \tje     f0 <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0xf0>\n  e9:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  ee:\teb 05                \tjmp    f5 <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0xf5>\n  f0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  f5:\t84 c0                \ttest   %al,%al\n  f7:\t74 47                \tje     140 <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x140>\n  f9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  fd:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n 101:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 105:\t48 89 c6             \tmov    %rax,%rsi\n 108:\t48 89 d7             \tmov    %rdx,%rdi\n 10b:\te8 00 00 00 00       \tcallq  110 <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x110>\n 110:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 114:\t48 89 10             \tmov    %rdx,(%rax)\n 117:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 11b:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n 11f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 123:\t48 89 c6             \tmov    %rax,%rsi\n 126:\t48 89 d7             \tmov    %rdx,%rdi\n 129:\te8 00 00 00 00       \tcallq  12e <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x12e>\n 12e:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 132:\t48 89 10             \tmov    %rdx,(%rax)\n 135:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 13a:\teb 13                \tjmp    14f <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x14f>\n 13c:\t90                   \tnop\n 13d:\teb 01                \tjmp    140 <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x140>\n 13f:\t90                   \tnop\n 140:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n 145:\te9 d2 fe ff ff       \tjmpq   1c <_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE+0x1c>\n 14a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 14f:\tc9                   \tleaveq \n 150:\tc3                   \tretq   ", "code_s": "__int64 __fastcall testing internal MaxBipartiteMatchState\nTryAugment(testing internal MatchMatrix **a1, unsigned __int64 a2, __int64 a3) {\n  _QWORD *v3;\n  unsigned __int64 i;\n  for (i = Number L; i < testing internal MatchMatrix RhsSize(*a1); ++i) {\n    if (!*(_BYTE *)std vector<char> operator[](a3, i) &&\n        testing internal MatchMatrix HasEdge(*a1, a2, i)) {\n      *(_BYTE *)std vector<char> operator[](a3, i) = Number;\n      if (*(_QWORD *)std vector<unsigned long> operator[](a1 + Number, i) ==\n              Number ||\n          (v3 = (_QWORD *)std vector<unsigned long> operator[](a1 + Number, i),\n           (unsigned __int8)testing internal MaxBipartiteMatchState TryAugment(\n               a1, *v3, a3))) {\n        *(_QWORD *)std vector<unsigned long> operator[](a1 + Number, a2) = i;\n        *(_QWORD *)std vector<unsigned long> operator[](a1 + Number, i) = a2;\n        return Number L;\n      }\n    }\n  }\n  return Number L;\n}", "code_t": "bool __cdecl testing internal MaxBipartiteMatchState TryAugment(\n    testing internal MaxBipartiteMatchState *const <span class=\"supfact\">this</span>,\n    size_t <span class=\"supfact\">ilhs</span>, std vector<char> *<span class=\"supfact\">seen</span>) {\n  __gnu_cxx __alloc_traits<std allocator<long unsigned int>, long unsigned int>\n      value_type v3;\n  std vector<char> size_type <span class=\"supfact\">irhs</span>;\n  for (<span class=\"supfact\">irhs</span> = Number L;\n       <span class=\"supfact\">irhs</span> <\n       testing internal MatchMatrix RhsSize(<span class=\"supfact\">this</span>->graph_);\n       ++<span class=\"supfact\">irhs</span>) {\n    if (!*std vector<char> operator[](<span class=\"supfact\">seen</span>,\n                                      <span class=\"supfact\">irhs</span>) &&\n        testing internal MatchMatrix HasEdge(<span class=\"supfact\">this</span>->graph_,\n                                             <span class=\"supfact\">ilhs</span>,\n                                             <span class=\"supfact\">irhs</span>)) {\n      *std vector<char> operator[](<span class=\"supfact\">seen</span>, <span class=\"supfact\">irhs</span>) =\n          Number;\n      if (*std vector<unsigned long> operator[](\n              &<span class=\"supfact\">this</span>->right_, <span class=\"supfact\">irhs</span>) == Number ||\n          (v3 = *std vector<unsigned long> operator[](\n               &<span class=\"supfact\">this</span>->right_, <span class=\"supfact\">irhs</span>),\n           testing internal MaxBipartiteMatchState TryAugment(\n               <span class=\"supfact\">this</span>, v3, <span class=\"supfact\">seen</span>))) {\n        *std vector<unsigned long> operator[](&<span class=\"supfact\">this</span>->left_,\n                                              <span class=\"supfact\">ilhs</span>) =\n            <span class=\"supfact\">irhs</span>;\n        *std vector<unsigned long> operator[](&<span class=\"supfact\">this</span>->right_,\n                                              <span class=\"supfact\">irhs</span>) =\n            <span class=\"supfact\">ilhs</span>;\n        return Number;\n      }\n    }\n  }\n  return Number;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "testing::internal::MaxBipartiteMatchState *"}, {"name": "a2", "type": "size_t", "pred_name": "__unk__", "ref_name": "ilhs", "ref_type": "size_t"}, {"name": "a3", "type": "const unsigned __int64 *", "pred_name": "__unk__", "ref_name": "seen", "ref_type": "std::vector<char> *"}, {"name": "v3", "type": "const unsigned __int64 *", "pred_name": "v3", "ref_name": "", "ref_type": "disappear"}, {"name": "i", "type": "size_t", "pred_name": "i", "ref_name": "irhs", "ref_type": "std::vector<char>::size_type"}], "body_in_train": true}, {"repo_owner": "plume-design", "repo_name": "opensync", "path": "plume-design/opensync/f3e2bccf173094c3e0cc04f1b05ab8aa53821c86a06a00a72690ba8595b9c4e9", "path_in_repo": "plume-design/opensync//work/native-debian10-x86_64/obj/src.lib.synclist/src/lib/synclist/src/synclist.o", "objdump": "000000000000072c <synclist_end>:\n 72c:\t55                   \tpush   %rbp\n 72d:\t48 89 e5             \tmov    %rsp,%rbp\n 730:\t48 83 ec 40          \tsub    $0x40,%rsp\n 734:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 738:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 73c:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 740:\t48 89 d6             \tmov    %rdx,%rsi\n 743:\t48 89 c7             \tmov    %rax,%rdi\n 746:\te8 57 fa ff ff       \tcallq  1a2 <ds_tree_ifirst>\n 74b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 74f:\teb 5f                \tjmp    7b0 <synclist_end+0x84>\n 751:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 755:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n 759:\t48 89 c2             \tmov    %rax,%rdx\n 75c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 760:\t48 01 d0             \tadd    %rdx,%rax\n 763:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 767:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 76b:\t0f b6 40 28          \tmovzbl 0x28(%rax),%eax\n 76f:\t84 c0                \ttest   %al,%al\n 771:\t75 2c                \tjne    79f <synclist_end+0x73>\n 773:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 777:\t48 89 c7             \tmov    %rax,%rdi\n 77a:\te8 63 fb ff ff       \tcallq  2e2 <ds_tree_iremove>\n 77f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 783:\t4c 8b 40 30          \tmov    0x30(%rax),%r8\n 787:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 78b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 78f:\tba 00 00 00 00       \tmov    $0x0,%edx\n 794:\t48 89 ce             \tmov    %rcx,%rsi\n 797:\t48 89 c7             \tmov    %rax,%rdi\n 79a:\t41 ff d0             \tcallq  *%r8\n 79d:\teb 01                \tjmp    7a0 <synclist_end+0x74>\n 79f:\t90                   \tnop\n 7a0:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 7a4:\t48 89 c7             \tmov    %rax,%rdi\n 7a7:\te8 a4 fa ff ff       \tcallq  250 <ds_tree_inext>\n 7ac:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 7b0:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 7b5:\t75 9a                \tjne    751 <synclist_end+0x25>\n 7b7:\t90                   \tnop\n 7b8:\t90                   \tnop\n 7b9:\tc9                   \tleaveq \n 7ba:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall synclist_end(__int64 a1) {\n  __int64 result;\n  _QWORD v2[Number];\n  __int64 v3;\n  __int64 i;\n  result = ds_tree_ifirst(v2, a1);\n  for (i = result; i; i = result) {\n    v3 = *(_QWORD *)(a1 + Number) + i;\n    if (!*(_BYTE *)(v3 + Number)) {\n      ds_tree_iremove(v2);\n      (*(void(__fastcall **)(__int64, __int64, _QWORD))(a1 + Number))(a1, i,\n                                                                      Number L);\n    }\n    result = ds_tree_inext((__int64)v2);\n  }\n  return result;\n}", "code_t": "void __cdecl synclist_end(synclist_t *<span class=\"supfact\">list</span>) {\n  ds_tree_iter_t <span class=\"supfact\">iter</span>;\n  synclist_node_t *<span class=\"supfact\">psl</span>;\n  void *<span class=\"supfact\">pdata</span>;\n  for (<span class=\"supfact\">pdata</span> = ds_tree_ifirst(&<span class=\"supfact\">iter</span>,\n                                              &<span class=\"supfact\">list</span>->sl_tree);\n       <span class=\"supfact\">pdata</span>;\n       <span class=\"supfact\">pdata</span> = ds_tree_inext(&<span class=\"supfact\">iter</span>)) {\n    <span class=\"supfact\">psl</span> = (synclist_node_t *)((char *)<span class=\"supfact\">pdata</span> +\n                                              <span class=\"supfact\">list</span>->sl_cof);\n    if (!<span class=\"supfact\">psl</span>->sl_active) {\n      ds_tree_iremove(&<span class=\"supfact\">iter</span>);\n      <span class=\"supfact\">list</span>->sl_fn(<span class=\"supfact\">list</span>, <span class=\"supfact\">pdata</span>,\n                                  Number L);\n    }\n  }\n}", "var": [{"name": "a1", "type": "ds_tree_t *", "pred_name": "root", "ref_name": "list", "ref_type": "synclist_t *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v2", "type": "__unk__", "pred_name": "iter", "ref_name": "iter", "ref_type": "struct ds_tree_iter_t { ds_tree_t * oti_root; ds_tree_node_t * oti_curr; ds_tree_node_t * oti_next; uint32_t oti_ndel; PADDING (4); }"}, {"name": "v3", "type": "void *", "pred_name": "ret", "ref_name": "psl", "ref_type": "synclist_node_t *"}, {"name": "i", "type": "__unk__", "pred_name": "iter", "ref_name": "pdata", "ref_type": "void *"}], "body_in_train": false}, {"repo_owner": "wjfsanhe", "repo_name": "newPlayer", "path": "wjfsanhe/newPlayer/bb7f4c8af23ffcb79a4a712851df51eff14cbc7fbe3ccc859d44a79493db8ac3", "path_in_repo": "wjfsanhe/newPlayer/amffmpeg/src/libavcodec/dsputil.o", "objdump": "00000000000041aa <avg_no_rnd_pixels16_c>:\n    41aa:\t48 83 ec 18          \tsub    $0x18,%rsp\n    41ae:\t48 89 7c 24 10       \tmov    %rdi,0x10(%rsp)\n    41b3:\t48 89 74 24 08       \tmov    %rsi,0x8(%rsp)\n    41b8:\t89 54 24 04          \tmov    %edx,0x4(%rsp)\n    41bc:\t89 0c 24             \tmov    %ecx,(%rsp)\n    41bf:\t8b 0c 24             \tmov    (%rsp),%ecx\n    41c2:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n    41c6:\t48 8b 74 24 08       \tmov    0x8(%rsp),%rsi\n    41cb:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    41d0:\t48 89 c7             \tmov    %rax,%rdi\n    41d3:\te8 ae ea ff ff       \tcallq  2c86 <avg_pixels8_c>\n    41d8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    41dd:\t48 8d 70 08          \tlea    0x8(%rax),%rsi\n    41e1:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    41e6:\t48 8d 78 08          \tlea    0x8(%rax),%rdi\n    41ea:\t8b 14 24             \tmov    (%rsp),%edx\n    41ed:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n    41f1:\t89 d1                \tmov    %edx,%ecx\n    41f3:\t89 c2                \tmov    %eax,%edx\n    41f5:\te8 8c ea ff ff       \tcallq  2c86 <avg_pixels8_c>\n    41fa:\t90                   \tnop\n    41fb:\t48 83 c4 18          \tadd    $0x18,%rsp\n    41ff:\tc3                   \tretq   ", "code_s": "__int64 __fastcall avg_no_rnd_pixels16_c(unsigned int *a1, int *a2, int a3,\n                                         int a4) {\n  avg_pixels8_c(a1, a2, a3, a4);\n  return avg_pixels8_c(a1 + Number, a2 + Number, a3, a4);\n}", "code_t": "void __cdecl avg_no_rnd_pixels16_c(uint8_t *<span class=\"supfact\">block</span>,\n                                   const uint8_t *<span class=\"supfact\">pixels</span>,\n                                   int <span class=\"supfact\">line_size</span>,\n                                   int <span class=\"supfact\">h</span>) {\n  avg_pixels8_c(<span class=\"supfact\">block</span>, <span class=\"supfact\">pixels</span>,\n                <span class=\"supfact\">line_size</span>, <span class=\"supfact\">h</span>);\n  avg_pixels8_c(<span class=\"supfact\">block</span> + Number, <span class=\"supfact\">pixels</span> + Number,\n                <span class=\"supfact\">line_size</span>, <span class=\"supfact\">h</span>);\n}", "var": [{"name": "a1", "type": "uint8_t *", "pred_name": "block", "ref_name": "block", "ref_type": "uint8_t *"}, {"name": "a2", "type": "const uint8_t *", "pred_name": "pixels", "ref_name": "pixels", "ref_type": "const uint8_t *"}, {"name": "a3", "type": "int", "pred_name": "line_size", "ref_name": "line_size", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "h", "ref_name": "h", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "bluescan", "repo_name": "tacent", "path": "bluescan/tacent/89accdadbb5c20fd07e449c088073ca863f3a374d51f7c1d2fb5d5aa46494b2a", "path_in_repo": "bluescan/tacent/Contrib/imgui/examples/example_glfw_opengl3/imgui_draw.o", "objdump": "000000000000b452 <stbtt_PackFontRangesRenderIntoRects>:\n    b452:\t55                   \tpush   %rbp\n    b453:\t48 89 e5             \tmov    %rsp,%rbp\n    b456:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n    b45d:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    b461:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n    b465:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    b46c:\t89 8d 74 ff ff ff    \tmov    %ecx,-0x8c(%rbp)\n    b472:\t4c 89 85 68 ff ff ff \tmov    %r8,-0x98(%rbp)\n    b479:\tc7 45 f0 01 00 00 00 \tmovl   $0x1,-0x10(%rbp)\n    b480:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b484:\t8b 40 20             \tmov    0x20(%rax),%eax\n    b487:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    b48a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b48e:\t8b 40 24             \tmov    0x24(%rax),%eax\n    b491:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    b494:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n    b49b:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    b4a2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    b4a5:\t3b 85 74 ff ff ff    \tcmp    -0x8c(%rbp),%eax\n    b4ab:\t0f 8d 90 06 00 00    \tjge    bb41 <stbtt_PackFontRangesRenderIntoRects+0x6ef>\n    b4b1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    b4b4:\t48 63 d0             \tmovslq %eax,%rdx\n    b4b7:\t48 89 d0             \tmov    %rdx,%rax\n    b4ba:\t48 c1 e0 02          \tshl    $0x2,%rax\n    b4be:\t48 01 d0             \tadd    %rdx,%rax\n    b4c1:\t48 c1 e0 03          \tshl    $0x3,%rax\n    b4c5:\t48 89 c2             \tmov    %rax,%rdx\n    b4c8:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    b4cf:\t48 01 d0             \tadd    %rdx,%rax\n    b4d2:\tf3 0f 10 00          \tmovss  (%rax),%xmm0\n    b4d6:\tf3 0f 11 45 e4       \tmovss  %xmm0,-0x1c(%rbp)\n    b4db:\tf3 0f 10 45 e4       \tmovss  -0x1c(%rbp),%xmm0\n    b4e0:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    b4e4:\t0f 2f c1             \tcomiss %xmm1,%xmm0\n    b4e7:\t76 19                \tjbe    b502 <stbtt_PackFontRangesRenderIntoRects+0xb0>\n    b4e9:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    b4ec:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    b4f0:\t66 0f 6e c2          \tmovd   %edx,%xmm0\n    b4f4:\t48 89 c7             \tmov    %rax,%rdi\n    b4f7:\te8 f6 b2 ff ff       \tcallq  67f2 <stbtt_ScaleForPixelHeight>\n    b4fc:\t66 0f 7e c0          \tmovd   %xmm0,%eax\n    b500:\teb 20                \tjmp    b522 <stbtt_PackFontRangesRenderIntoRects+0xd0>\n    b502:\tf3 0f 10 45 e4       \tmovss  -0x1c(%rbp),%xmm0\n    b507:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # b50f <stbtt_PackFontRangesRenderIntoRects+0xbd>\n    b50e:\t00 \n    b50f:\t0f 57 c1             \txorps  %xmm1,%xmm0\n    b512:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    b516:\t48 89 c7             \tmov    %rax,%rdi\n    b519:\te8 46 b3 ff ff       \tcallq  6864 <stbtt_ScaleForMappingEmToPixels>\n    b51e:\t66 0f 7e c0          \tmovd   %xmm0,%eax\n    b522:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    b525:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    b528:\t48 63 d0             \tmovslq %eax,%rdx\n    b52b:\t48 89 d0             \tmov    %rdx,%rax\n    b52e:\t48 c1 e0 02          \tshl    $0x2,%rax\n    b532:\t48 01 d0             \tadd    %rdx,%rax\n    b535:\t48 c1 e0 03          \tshl    $0x3,%rax\n    b539:\t48 89 c2             \tmov    %rax,%rdx\n    b53c:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    b543:\t48 01 d0             \tadd    %rdx,%rax\n    b546:\t0f b6 40 20          \tmovzbl 0x20(%rax),%eax\n    b54a:\t0f b6 d0             \tmovzbl %al,%edx\n    b54d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b551:\t89 50 20             \tmov    %edx,0x20(%rax)\n    b554:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    b557:\t48 63 d0             \tmovslq %eax,%rdx\n    b55a:\t48 89 d0             \tmov    %rdx,%rax\n    b55d:\t48 c1 e0 02          \tshl    $0x2,%rax\n    b561:\t48 01 d0             \tadd    %rdx,%rax\n    b564:\t48 c1 e0 03          \tshl    $0x3,%rax\n    b568:\t48 89 c2             \tmov    %rax,%rdx\n    b56b:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    b572:\t48 01 d0             \tadd    %rdx,%rax\n    b575:\t0f b6 40 21          \tmovzbl 0x21(%rax),%eax\n    b579:\t0f b6 d0             \tmovzbl %al,%edx\n    b57c:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b580:\t89 50 24             \tmov    %edx,0x24(%rax)\n    b583:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b587:\t8b 40 20             \tmov    0x20(%rax),%eax\n    b58a:\t89 c0                \tmov    %eax,%eax\n    b58c:\t48 85 c0             \ttest   %rax,%rax\n    b58f:\t78 07                \tjs     b598 <stbtt_PackFontRangesRenderIntoRects+0x146>\n    b591:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n    b596:\teb 15                \tjmp    b5ad <stbtt_PackFontRangesRenderIntoRects+0x15b>\n    b598:\t48 89 c2             \tmov    %rax,%rdx\n    b59b:\t48 d1 ea             \tshr    %rdx\n    b59e:\t83 e0 01             \tand    $0x1,%eax\n    b5a1:\t48 09 c2             \tor     %rax,%rdx\n    b5a4:\tf3 48 0f 2a c2       \tcvtsi2ss %rdx,%xmm0\n    b5a9:\tf3 0f 58 c0          \taddss  %xmm0,%xmm0\n    b5ad:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # b5b5 <stbtt_PackFontRangesRenderIntoRects+0x163>\n    b5b4:\t00 \n    b5b5:\tf3 0f 5e c8          \tdivss  %xmm0,%xmm1\n    b5b9:\t0f 28 c1             \tmovaps %xmm1,%xmm0\n    b5bc:\tf3 0f 11 45 dc       \tmovss  %xmm0,-0x24(%rbp)\n    b5c1:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b5c5:\t8b 40 24             \tmov    0x24(%rax),%eax\n    b5c8:\t89 c0                \tmov    %eax,%eax\n    b5ca:\t48 85 c0             \ttest   %rax,%rax\n    b5cd:\t78 07                \tjs     b5d6 <stbtt_PackFontRangesRenderIntoRects+0x184>\n    b5cf:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n    b5d4:\teb 15                \tjmp    b5eb <stbtt_PackFontRangesRenderIntoRects+0x199>\n    b5d6:\t48 89 c2             \tmov    %rax,%rdx\n    b5d9:\t48 d1 ea             \tshr    %rdx\n    b5dc:\t83 e0 01             \tand    $0x1,%eax\n    b5df:\t48 09 c2             \tor     %rax,%rdx\n    b5e2:\tf3 48 0f 2a c2       \tcvtsi2ss %rdx,%xmm0\n    b5e7:\tf3 0f 58 c0          \taddss  %xmm0,%xmm0\n    b5eb:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # b5f3 <stbtt_PackFontRangesRenderIntoRects+0x1a1>\n    b5f2:\t00 \n    b5f3:\tf3 0f 5e c8          \tdivss  %xmm0,%xmm1\n    b5f7:\t0f 28 c1             \tmovaps %xmm1,%xmm0\n    b5fa:\tf3 0f 11 45 d8       \tmovss  %xmm0,-0x28(%rbp)\n    b5ff:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b603:\t8b 40 20             \tmov    0x20(%rax),%eax\n    b606:\t89 c7                \tmov    %eax,%edi\n    b608:\te8 4d fa ff ff       \tcallq  b05a <_ZL23stbtt__oversample_shifti>\n    b60d:\t66 0f 7e c0          \tmovd   %xmm0,%eax\n    b611:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    b614:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b618:\t8b 40 24             \tmov    0x24(%rax),%eax\n    b61b:\t89 c7                \tmov    %eax,%edi\n    b61d:\te8 38 fa ff ff       \tcallq  b05a <_ZL23stbtt__oversample_shifti>\n    b622:\t66 0f 7e c0          \tmovd   %xmm0,%eax\n    b626:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    b629:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    b630:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    b633:\t48 63 d0             \tmovslq %eax,%rdx\n    b636:\t48 89 d0             \tmov    %rdx,%rax\n    b639:\t48 c1 e0 02          \tshl    $0x2,%rax\n    b63d:\t48 01 d0             \tadd    %rdx,%rax\n    b640:\t48 c1 e0 03          \tshl    $0x3,%rax\n    b644:\t48 89 c2             \tmov    %rax,%rdx\n    b647:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    b64e:\t48 01 d0             \tadd    %rdx,%rax\n    b651:\t8b 40 10             \tmov    0x10(%rax),%eax\n    b654:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n    b657:\t0f 8d db 04 00 00    \tjge    bb38 <stbtt_PackFontRangesRenderIntoRects+0x6e6>\n    b65d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    b660:\t48 98                \tcltq   \n    b662:\t48 c1 e0 04          \tshl    $0x4,%rax\n    b666:\t48 89 c2             \tmov    %rax,%rdx\n    b669:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    b670:\t48 01 d0             \tadd    %rdx,%rax\n    b673:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    b677:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b67b:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    b67e:\t85 c0                \ttest   %eax,%eax\n    b680:\t0f 84 9e 04 00 00    \tje     bb24 <stbtt_PackFontRangesRenderIntoRects+0x6d2>\n    b686:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    b689:\t48 63 d0             \tmovslq %eax,%rdx\n    b68c:\t48 89 d0             \tmov    %rdx,%rax\n    b68f:\t48 c1 e0 02          \tshl    $0x2,%rax\n    b693:\t48 01 d0             \tadd    %rdx,%rax\n    b696:\t48 c1 e0 03          \tshl    $0x3,%rax\n    b69a:\t48 89 c2             \tmov    %rax,%rdx\n    b69d:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    b6a4:\t48 01 d0             \tadd    %rdx,%rax\n    b6a7:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n    b6ab:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    b6ae:\t48 63 d0             \tmovslq %eax,%rdx\n    b6b1:\t48 89 d0             \tmov    %rdx,%rax\n    b6b4:\t48 c1 e0 03          \tshl    $0x3,%rax\n    b6b8:\t48 29 d0             \tsub    %rdx,%rax\n    b6bb:\t48 c1 e0 02          \tshl    $0x2,%rax\n    b6bf:\t48 01 c8             \tadd    %rcx,%rax\n    b6c2:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    b6c6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    b6c9:\t48 63 d0             \tmovslq %eax,%rdx\n    b6cc:\t48 89 d0             \tmov    %rdx,%rax\n    b6cf:\t48 c1 e0 02          \tshl    $0x2,%rax\n    b6d3:\t48 01 d0             \tadd    %rdx,%rax\n    b6d6:\t48 c1 e0 03          \tshl    $0x3,%rax\n    b6da:\t48 89 c2             \tmov    %rax,%rdx\n    b6dd:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    b6e4:\t48 01 d0             \tadd    %rdx,%rax\n    b6e7:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    b6eb:\t48 85 c0             \ttest   %rax,%rax\n    b6ee:\t75 2b                \tjne    b71b <stbtt_PackFontRangesRenderIntoRects+0x2c9>\n    b6f0:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    b6f3:\t48 63 d0             \tmovslq %eax,%rdx\n    b6f6:\t48 89 d0             \tmov    %rdx,%rax\n    b6f9:\t48 c1 e0 02          \tshl    $0x2,%rax\n    b6fd:\t48 01 d0             \tadd    %rdx,%rax\n    b700:\t48 c1 e0 03          \tshl    $0x3,%rax\n    b704:\t48 89 c2             \tmov    %rax,%rdx\n    b707:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    b70e:\t48 01 d0             \tadd    %rdx,%rax\n    b711:\t8b 50 04             \tmov    0x4(%rax),%edx\n    b714:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    b717:\t01 d0                \tadd    %edx,%eax\n    b719:\teb 34                \tjmp    b74f <stbtt_PackFontRangesRenderIntoRects+0x2fd>\n    b71b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    b71e:\t48 63 d0             \tmovslq %eax,%rdx\n    b721:\t48 89 d0             \tmov    %rdx,%rax\n    b724:\t48 c1 e0 02          \tshl    $0x2,%rax\n    b728:\t48 01 d0             \tadd    %rdx,%rax\n    b72b:\t48 c1 e0 03          \tshl    $0x3,%rax\n    b72f:\t48 89 c2             \tmov    %rax,%rdx\n    b732:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    b739:\t48 01 d0             \tadd    %rdx,%rax\n    b73c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    b740:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    b743:\t48 63 d2             \tmovslq %edx,%rdx\n    b746:\t48 c1 e2 02          \tshl    $0x2,%rdx\n    b74a:\t48 01 d0             \tadd    %rdx,%rax\n    b74d:\t8b 00                \tmov    (%rax),%eax\n    b74f:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n    b752:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n    b755:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    b759:\t89 d6                \tmov    %edx,%esi\n    b75b:\t48 89 c7             \tmov    %rax,%rdi\n    b75e:\te8 07 6f ff ff       \tcallq  266a <stbtt_FindGlyphIndex>\n    b763:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n    b766:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b76a:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    b76d:\t66 89 45 b6          \tmov    %ax,-0x4a(%rbp)\n    b771:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b775:\t0f b7 50 08          \tmovzwl 0x8(%rax),%edx\n    b779:\t0f b7 45 b6          \tmovzwl -0x4a(%rbp),%eax\n    b77d:\t01 c2                \tadd    %eax,%edx\n    b77f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b783:\t66 89 50 08          \tmov    %dx,0x8(%rax)\n    b787:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b78b:\t0f b7 50 0a          \tmovzwl 0xa(%rax),%edx\n    b78f:\t0f b7 45 b6          \tmovzwl -0x4a(%rbp),%eax\n    b793:\t01 c2                \tadd    %eax,%edx\n    b795:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b799:\t66 89 50 0a          \tmov    %dx,0xa(%rax)\n    b79d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b7a1:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    b7a5:\t66 2b 45 b6          \tsub    -0x4a(%rbp),%ax\n    b7a9:\t89 c2                \tmov    %eax,%edx\n    b7ab:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b7af:\t66 89 50 04          \tmov    %dx,0x4(%rax)\n    b7b3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b7b7:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n    b7bb:\t66 2b 45 b6          \tsub    -0x4a(%rbp),%ax\n    b7bf:\t89 c2                \tmov    %eax,%edx\n    b7c1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b7c5:\t66 89 50 06          \tmov    %dx,0x6(%rax)\n    b7c9:\t48 8d 4d ac          \tlea    -0x54(%rbp),%rcx\n    b7cd:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    b7d1:\t8b 75 b8             \tmov    -0x48(%rbp),%esi\n    b7d4:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    b7d8:\t48 89 c7             \tmov    %rax,%rdi\n    b7db:\te8 02 a1 ff ff       \tcallq  58e2 <stbtt_GetGlyphHMetrics>\n    b7e0:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b7e4:\t8b 40 24             \tmov    0x24(%rax),%eax\n    b7e7:\t89 c0                \tmov    %eax,%eax\n    b7e9:\t48 85 c0             \ttest   %rax,%rax\n    b7ec:\t78 07                \tjs     b7f5 <stbtt_PackFontRangesRenderIntoRects+0x3a3>\n    b7ee:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n    b7f3:\teb 15                \tjmp    b80a <stbtt_PackFontRangesRenderIntoRects+0x3b8>\n    b7f5:\t48 89 c2             \tmov    %rax,%rdx\n    b7f8:\t48 d1 ea             \tshr    %rdx\n    b7fb:\t83 e0 01             \tand    $0x1,%eax\n    b7fe:\t48 09 c2             \tor     %rax,%rdx\n    b801:\tf3 48 0f 2a c2       \tcvtsi2ss %rdx,%xmm0\n    b806:\tf3 0f 58 c0          \taddss  %xmm0,%xmm0\n    b80a:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n    b80d:\tf3 0f 59 4d e0       \tmulss  -0x20(%rbp),%xmm1\n    b812:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b816:\t8b 40 20             \tmov    0x20(%rax),%eax\n    b819:\t89 c0                \tmov    %eax,%eax\n    b81b:\t48 85 c0             \ttest   %rax,%rax\n    b81e:\t78 07                \tjs     b827 <stbtt_PackFontRangesRenderIntoRects+0x3d5>\n    b820:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n    b825:\teb 15                \tjmp    b83c <stbtt_PackFontRangesRenderIntoRects+0x3ea>\n    b827:\t48 89 c2             \tmov    %rax,%rdx\n    b82a:\t48 d1 ea             \tshr    %rdx\n    b82d:\t83 e0 01             \tand    $0x1,%eax\n    b830:\t48 09 c2             \tor     %rax,%rdx\n    b833:\tf3 48 0f 2a c2       \tcvtsi2ss %rdx,%xmm0\n    b838:\tf3 0f 58 c0          \taddss  %xmm0,%xmm0\n    b83c:\tf3 0f 59 45 e0       \tmulss  -0x20(%rbp),%xmm0\n    b841:\t4c 8d 45 9c          \tlea    -0x64(%rbp),%r8\n    b845:\t48 8d 7d a0          \tlea    -0x60(%rbp),%rdi\n    b849:\t48 8d 4d a4          \tlea    -0x5c(%rbp),%rcx\n    b84d:\t48 8d 55 a8          \tlea    -0x58(%rbp),%rdx\n    b851:\t8b 75 b8             \tmov    -0x48(%rbp),%esi\n    b854:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    b858:\t4d 89 c1             \tmov    %r8,%r9\n    b85b:\t49 89 f8             \tmov    %rdi,%r8\n    b85e:\t48 89 c7             \tmov    %rax,%rdi\n    b861:\te8 c3 b1 ff ff       \tcallq  6a29 <stbtt_GetGlyphBitmapBox>\n    b866:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b86a:\t8b 40 24             \tmov    0x24(%rax),%eax\n    b86d:\t89 c0                \tmov    %eax,%eax\n    b86f:\t48 85 c0             \ttest   %rax,%rax\n    b872:\t78 07                \tjs     b87b <stbtt_PackFontRangesRenderIntoRects+0x429>\n    b874:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n    b879:\teb 15                \tjmp    b890 <stbtt_PackFontRangesRenderIntoRects+0x43e>\n    b87b:\t48 89 c2             \tmov    %rax,%rdx\n    b87e:\t48 d1 ea             \tshr    %rdx\n    b881:\t83 e0 01             \tand    $0x1,%eax\n    b884:\t48 09 c2             \tor     %rax,%rdx\n    b887:\tf3 48 0f 2a c2       \tcvtsi2ss %rdx,%xmm0\n    b88c:\tf3 0f 58 c0          \taddss  %xmm0,%xmm0\n    b890:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n    b893:\tf3 0f 59 4d e0       \tmulss  -0x20(%rbp),%xmm1\n    b898:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b89c:\t8b 40 20             \tmov    0x20(%rax),%eax\n    b89f:\t89 c0                \tmov    %eax,%eax\n    b8a1:\t48 85 c0             \ttest   %rax,%rax\n    b8a4:\t78 07                \tjs     b8ad <stbtt_PackFontRangesRenderIntoRects+0x45b>\n    b8a6:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n    b8ab:\teb 15                \tjmp    b8c2 <stbtt_PackFontRangesRenderIntoRects+0x470>\n    b8ad:\t48 89 c2             \tmov    %rax,%rdx\n    b8b0:\t48 d1 ea             \tshr    %rdx\n    b8b3:\t83 e0 01             \tand    $0x1,%eax\n    b8b6:\t48 09 c2             \tor     %rax,%rdx\n    b8b9:\tf3 48 0f 2a c2       \tcvtsi2ss %rdx,%xmm0\n    b8be:\tf3 0f 58 c0          \taddss  %xmm0,%xmm0\n    b8c2:\tf3 0f 59 45 e0       \tmulss  -0x20(%rbp),%xmm0\n    b8c7:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b8cb:\t8b 78 18             \tmov    0x18(%rax),%edi\n    b8ce:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b8d2:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n    b8d6:\t0f b7 d0             \tmovzwl %ax,%edx\n    b8d9:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b8dd:\t8b 40 24             \tmov    0x24(%rax),%eax\n    b8e0:\t29 c2                \tsub    %eax,%edx\n    b8e2:\t89 d0                \tmov    %edx,%eax\n    b8e4:\t83 c0 01             \tadd    $0x1,%eax\n    b8e7:\t41 89 c3             \tmov    %eax,%r11d\n    b8ea:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b8ee:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    b8f2:\t0f b7 d0             \tmovzwl %ax,%edx\n    b8f5:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b8f9:\t8b 40 20             \tmov    0x20(%rax),%eax\n    b8fc:\t29 c2                \tsub    %eax,%edx\n    b8fe:\t89 d0                \tmov    %edx,%eax\n    b900:\t83 c0 01             \tadd    $0x1,%eax\n    b903:\t41 89 c2             \tmov    %eax,%r10d\n    b906:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b90a:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n    b90e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b912:\t0f b7 40 08          \tmovzwl 0x8(%rax),%eax\n    b916:\t0f b7 c8             \tmovzwl %ax,%ecx\n    b919:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b91d:\t0f b7 40 0a          \tmovzwl 0xa(%rax),%eax\n    b921:\t0f b7 f0             \tmovzwl %ax,%esi\n    b924:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b928:\t8b 40 18             \tmov    0x18(%rax),%eax\n    b92b:\t0f af c6             \timul   %esi,%eax\n    b92e:\t48 98                \tcltq   \n    b930:\t48 01 c8             \tadd    %rcx,%rax\n    b933:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n    b937:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n    b93a:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    b93e:\t41 89 d1             \tmov    %edx,%r9d\n    b941:\t66 0f ef db          \tpxor   %xmm3,%xmm3\n    b945:\t66 0f ef d2          \tpxor   %xmm2,%xmm2\n    b949:\t41 89 f8             \tmov    %edi,%r8d\n    b94c:\t44 89 d9             \tmov    %r11d,%ecx\n    b94f:\t44 89 d2             \tmov    %r10d,%edx\n    b952:\t48 89 c7             \tmov    %rax,%rdi\n    b955:\te8 85 e3 ff ff       \tcallq  9cdf <stbtt_MakeGlyphBitmapSubpixel>\n    b95a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b95e:\t8b 40 20             \tmov    0x20(%rax),%eax\n    b961:\t83 f8 01             \tcmp    $0x1,%eax\n    b964:\t76 63                \tjbe    b9c9 <stbtt_PackFontRangesRenderIntoRects+0x577>\n    b966:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b96a:\t44 8b 50 20          \tmov    0x20(%rax),%r10d\n    b96e:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b972:\t8b 48 18             \tmov    0x18(%rax),%ecx\n    b975:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b979:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n    b97d:\t0f b7 d0             \tmovzwl %ax,%edx\n    b980:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b984:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    b988:\t0f b7 c0             \tmovzwl %ax,%eax\n    b98b:\t48 8b 75 88          \tmov    -0x78(%rbp),%rsi\n    b98f:\t48 8b 7e 28          \tmov    0x28(%rsi),%rdi\n    b993:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n    b997:\t0f b7 76 08          \tmovzwl 0x8(%rsi),%esi\n    b99b:\t44 0f b7 c6          \tmovzwl %si,%r8d\n    b99f:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n    b9a3:\t0f b7 76 0a          \tmovzwl 0xa(%rsi),%esi\n    b9a7:\t44 0f b7 ce          \tmovzwl %si,%r9d\n    b9ab:\t48 8b 75 88          \tmov    -0x78(%rbp),%rsi\n    b9af:\t8b 76 18             \tmov    0x18(%rsi),%esi\n    b9b2:\t41 0f af f1          \timul   %r9d,%esi\n    b9b6:\t48 63 f6             \tmovslq %esi,%rsi\n    b9b9:\t4c 01 c6             \tadd    %r8,%rsi\n    b9bc:\t48 01 f7             \tadd    %rsi,%rdi\n    b9bf:\t45 89 d0             \tmov    %r10d,%r8d\n    b9c2:\t89 c6                \tmov    %eax,%esi\n    b9c4:\te8 ba ee ff ff       \tcallq  a883 <_ZL18stbtt__h_prefilterPhiiij>\n    b9c9:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b9cd:\t8b 40 24             \tmov    0x24(%rax),%eax\n    b9d0:\t83 f8 01             \tcmp    $0x1,%eax\n    b9d3:\t76 63                \tjbe    ba38 <stbtt_PackFontRangesRenderIntoRects+0x5e6>\n    b9d5:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b9d9:\t44 8b 50 24          \tmov    0x24(%rax),%r10d\n    b9dd:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    b9e1:\t8b 48 18             \tmov    0x18(%rax),%ecx\n    b9e4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b9e8:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n    b9ec:\t0f b7 d0             \tmovzwl %ax,%edx\n    b9ef:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b9f3:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    b9f7:\t0f b7 c0             \tmovzwl %ax,%eax\n    b9fa:\t48 8b 75 88          \tmov    -0x78(%rbp),%rsi\n    b9fe:\t48 8b 7e 28          \tmov    0x28(%rsi),%rdi\n    ba02:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n    ba06:\t0f b7 76 08          \tmovzwl 0x8(%rsi),%esi\n    ba0a:\t44 0f b7 c6          \tmovzwl %si,%r8d\n    ba0e:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n    ba12:\t0f b7 76 0a          \tmovzwl 0xa(%rsi),%esi\n    ba16:\t44 0f b7 ce          \tmovzwl %si,%r9d\n    ba1a:\t48 8b 75 88          \tmov    -0x78(%rbp),%rsi\n    ba1e:\t8b 76 18             \tmov    0x18(%rsi),%esi\n    ba21:\t41 0f af f1          \timul   %r9d,%esi\n    ba25:\t48 63 f6             \tmovslq %esi,%rsi\n    ba28:\t4c 01 c6             \tadd    %r8,%rsi\n    ba2b:\t48 01 f7             \tadd    %rsi,%rdi\n    ba2e:\t45 89 d0             \tmov    %r10d,%r8d\n    ba31:\t89 c6                \tmov    %eax,%esi\n    ba33:\te8 10 f2 ff ff       \tcallq  ac48 <_ZL18stbtt__v_prefilterPhiiij>\n    ba38:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    ba3c:\t0f b7 50 08          \tmovzwl 0x8(%rax),%edx\n    ba40:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    ba44:\t66 89 10             \tmov    %dx,(%rax)\n    ba47:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    ba4b:\t0f b7 50 0a          \tmovzwl 0xa(%rax),%edx\n    ba4f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    ba53:\t66 89 50 02          \tmov    %dx,0x2(%rax)\n    ba57:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    ba5b:\t0f b7 50 08          \tmovzwl 0x8(%rax),%edx\n    ba5f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    ba63:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    ba67:\t01 c2                \tadd    %eax,%edx\n    ba69:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    ba6d:\t66 89 50 04          \tmov    %dx,0x4(%rax)\n    ba71:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    ba75:\t0f b7 50 0a          \tmovzwl 0xa(%rax),%edx\n    ba79:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    ba7d:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n    ba81:\t01 c2                \tadd    %eax,%edx\n    ba83:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    ba87:\t66 89 50 06          \tmov    %dx,0x6(%rax)\n    ba8b:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n    ba8e:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    ba92:\tf3 0f 59 45 e0       \tmulss  -0x20(%rbp),%xmm0\n    ba97:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    ba9b:\tf3 0f 11 40 10       \tmovss  %xmm0,0x10(%rax)\n    baa0:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    baa3:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    baa7:\tf3 0f 59 45 dc       \tmulss  -0x24(%rbp),%xmm0\n    baac:\tf3 0f 58 45 d4       \taddss  -0x2c(%rbp),%xmm0\n    bab1:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    bab5:\tf3 0f 11 40 08       \tmovss  %xmm0,0x8(%rax)\n    baba:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n    babd:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    bac1:\tf3 0f 59 45 d8       \tmulss  -0x28(%rbp),%xmm0\n    bac6:\tf3 0f 58 45 d0       \taddss  -0x30(%rbp),%xmm0\n    bacb:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    bacf:\tf3 0f 11 40 0c       \tmovss  %xmm0,0xc(%rax)\n    bad4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    bad8:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    badc:\t0f b7 d0             \tmovzwl %ax,%edx\n    badf:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    bae2:\t01 d0                \tadd    %edx,%eax\n    bae4:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    bae8:\tf3 0f 59 45 dc       \tmulss  -0x24(%rbp),%xmm0\n    baed:\tf3 0f 58 45 d4       \taddss  -0x2c(%rbp),%xmm0\n    baf2:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    baf6:\tf3 0f 11 40 14       \tmovss  %xmm0,0x14(%rax)\n    bafb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    baff:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n    bb03:\t0f b7 d0             \tmovzwl %ax,%edx\n    bb06:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n    bb09:\t01 d0                \tadd    %edx,%eax\n    bb0b:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    bb0f:\tf3 0f 59 45 d8       \tmulss  -0x28(%rbp),%xmm0\n    bb14:\tf3 0f 58 45 d0       \taddss  -0x30(%rbp),%xmm0\n    bb19:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    bb1d:\tf3 0f 11 40 18       \tmovss  %xmm0,0x18(%rax)\n    bb22:\teb 07                \tjmp    bb2b <stbtt_PackFontRangesRenderIntoRects+0x6d9>\n    bb24:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n    bb2b:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n    bb2f:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n    bb33:\te9 f8 fa ff ff       \tjmpq   b630 <stbtt_PackFontRangesRenderIntoRects+0x1de>\n    bb38:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    bb3c:\te9 61 f9 ff ff       \tjmpq   b4a2 <stbtt_PackFontRangesRenderIntoRects+0x50>\n    bb41:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    bb44:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    bb48:\t89 50 20             \tmov    %edx,0x20(%rax)\n    bb4b:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n    bb4e:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    bb52:\t89 50 24             \tmov    %edx,0x24(%rax)\n    bb55:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    bb58:\tc9                   \tleaveq \n    bb59:\tc3                   \tretq   ", "code_s": "__int64 __fastcall stbtt_PackFontRangesRenderIntoRects(__int64 a1, void **a2,\n                                                       __int64 a3, int a4,\n                                                       __int64 a5) {\n  __m128i v5;\n  __m128 v6;\n  __m128 v7;\n  int v8;\n  int v13;\n  int v14;\n  int v15;\n  int v16;\n  int v17;\n  int v18;\n  __int16 v19;\n  unsigned int v20;\n  int v21;\n  __int64 v22;\n  __int64 v23;\n  float v24;\n  float v25;\n  float v26;\n  float v27;\n  float v28;\n  float v29;\n  int v30;\n  int v31;\n  unsigned int v32;\n  int v33;\n  int j;\n  int i;\n  v32 = Number;\n  v31 = *(_DWORD *)(a1 + Number);\n  v30 = *(_DWORD *)(a1 + Number);\n  v33 = Number;\n  for (i = Number; i < a4; ++i) {\n    v29 = *(float *)(Number L * i + a3);\n    if (v29 <= Number) {\n      v5 = (__m128i)_mm_xor_ps((__m128)LODWORD(v29), (__m128)Number);\n      *(float *)v5.m128i_i32 =\n          stbtt_ScaleForMappingEmToPixels((__int64)a2, *(float *)v5.m128i_i32);\n    } else {\n      v5 = _mm_cvtsi32_si128(LODWORD(v29));\n      *(float *)v5.m128i_i32 =\n          stbtt_ScaleForPixelHeight((__int64)a2, *(float *)v5.m128i_i32);\n    }\n    v28 = COERCE_FLOAT(_mm_cvtsi128_si32(v5));\n    *(_DWORD *)(a1 + Number) = *(unsigned __int8 *)(Number L * i + a3 + Number);\n    *(_DWORD *)(a1 + Number) = *(unsigned __int8 *)(Number L * i + a3 + Number);\n    v27 = Number / (float)*(int *)(a1 + Number);\n    v6 = (__m128)Number;\n    v26 = Number / (float)*(int *)(a1 + Number);\n    v6.m128_f32[Number] = v26;\n    v7 = stbtt__oversample_shift(*(_DWORD *)(a1 + Number),\n                                 *(double *)v6.m128_u64, v6);\n    v25 = COERCE_FLOAT(_mm_cvtsi128_si32((__m128i)v7));\n    v24 = COERCE_FLOAT(_mm_cvtsi128_si32((__m128i)stbtt__oversample_shift(\n        *(_DWORD *)(a1 + Number), *(double *)v7.m128_u64, v6)));\n    for (j = Number; j < *(_DWORD *)(Number L * i + a3 + Number); ++j) {\n      v23 = Number L * v33 + a5;\n      if (*(_DWORD *)(v23 + Number)) {\n        v22 = *(_QWORD *)(Number L * i + a3 + Number) + Number L * j;\n        if (*(_QWORD *)(Number L * i + a3 + Number))\n          v8 = *(_DWORD *)(Number L * j +\n                           *(_QWORD *)(Number L * i + a3 + Number));\n        else\n          v8 = *(_DWORD *)(Number L * i + a3 + Number) + j;\n        v21 = v8;\n        v20 = stbtt_FindGlyphIndex((__int64)a2, v8);\n        v19 = *(_DWORD *)(a1 + Number);\n        *(_WORD *)(v23 + Number) += v19;\n        *(_WORD *)(v23 + Number) += v19;\n        *(_WORD *)(v23 + Number) -= v19;\n        *(_WORD *)(v23 + Number) -= v19;\n        stbtt_GetGlyphHMetrics((__int64)a2, v20, &v18, &v17);\n        stbtt_GetGlyphBitmapBox((__int64)a2, v20, &v16, &v15, &v14, &v13,\n                                (float)*(int *)(a1 + Number) * v28,\n                                (float)*(int *)(a1 + Number) * v28);\n        stbtt_MakeGlyphBitmapSubpixel(\n            a2,\n            *(_QWORD *)(a1 + Number) + *(unsigned __int16 *)(v23 + Number) +\n                (__int64)(*(unsigned __int16 *)(v23 + Number) *\n                          *(_DWORD *)(a1 + Number)),\n            *(unsigned __int16 *)(v23 + Number) - *(_DWORD *)(a1 + Number) +\n                Number,\n            *(unsigned __int16 *)(v23 + Number) - *(_DWORD *)(a1 + Number) +\n                Number,\n            *(_DWORD *)(a1 + Number), v20, (float)*(int *)(a1 + Number) * v28,\n            (float)*(int *)(a1 + Number) * v28, Number, Number);\n        if (*(_DWORD *)(a1 + Number) > Number)\n          stbtt__h_prefilter(\n              (unsigned __int8 *)(*(unsigned __int16 *)(v23 + Number) +\n                                  (__int64)(*(unsigned __int16 *)(v23 +\n                                                                  Number) *\n                                            *(_DWORD *)(a1 + Number)) +\n                                  *(_QWORD *)(a1 + Number)),\n              *(unsigned __int16 *)(v23 + Number),\n              *(unsigned __int16 *)(v23 + Number), *(_DWORD *)(a1 + Number),\n              *(_DWORD *)(a1 + Number));\n        if (*(_DWORD *)(a1 + Number) > Number)\n          stbtt__v_prefilter(\n              (unsigned __int8 *)(*(unsigned __int16 *)(v23 + Number) +\n                                  (__int64)(*(unsigned __int16 *)(v23 +\n                                                                  Number) *\n                                            *(_DWORD *)(a1 + Number)) +\n                                  *(_QWORD *)(a1 + Number)),\n              *(unsigned __int16 *)(v23 + Number),\n              *(unsigned __int16 *)(v23 + Number), *(_DWORD *)(a1 + Number),\n              *(_DWORD *)(a1 + Number));\n        *(_WORD *)v22 = *(_WORD *)(v23 + Number);\n        *(_WORD *)(v22 + Number) = *(_WORD *)(v23 + Number);\n        *(_WORD *)(v22 + Number) =\n            *(_WORD *)(v23 + Number) + *(_WORD *)(v23 + Number);\n        *(_WORD *)(v22 + Number) =\n            *(_WORD *)(v23 + Number) + *(_WORD *)(v23 + Number);\n        *(float *)(v22 + Number) = (float)v18 * v28;\n        *(float *)(v22 + Number) = (float)((float)v16 * v27) + v25;\n        *(float *)(v22 + Number) = (float)((float)v15 * v26) + v24;\n        *(float *)(v22 + Number) =\n            (float)((float)(*(unsigned __int16 *)(v23 + Number) + v16) * v27) +\n            v25;\n        *(float *)(v22 + Number) =\n            (float)((float)(*(unsigned __int16 *)(v23 + Number) + v15) * v26) +\n            v24;\n      } else {\n        v32 = Number;\n      }\n      ++v33;\n    }\n  }\n  *(_DWORD *)(a1 + Number) = v31;\n  *(_DWORD *)(a1 + Number) = v30;\n  return v32;\n}", "code_t": "__int64 __fastcall stbtt_PackFontRangesRenderIntoRects(\n    __int64 <span class=\"supfact\">a1</span>, void **<span class=\"supfact\">a2</span>,\n    __int64 <span class=\"supfact\">a3</span>, int <span class=\"supfact\">a4</span>,\n    __int64 <span class=\"supfact\">a5</span>) {\n  __m128i v5;\n  __m128 <span class=\"supfact\">v6</span>;\n  __m128 v7;\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">v17</span>;\n  int <span class=\"supfact\">v18</span>;\n  __int16 <span class=\"supfact\">v19</span>;\n  unsigned int <span class=\"supfact\">v20</span>;\n  int <span class=\"supfact\">v21</span>;\n  __int64 <span class=\"supfact\">v22</span>;\n  __int64 <span class=\"supfact\">v23</span>;\n  float <span class=\"supfact\">v24</span>;\n  float <span class=\"supfact\">v25</span>;\n  float <span class=\"supfact\">v26</span>;\n  float <span class=\"supfact\">v27</span>;\n  float <span class=\"supfact\">v28</span>;\n  float <span class=\"supfact\">v29</span>;\n  int <span class=\"supfact\">v30</span>;\n  int <span class=\"supfact\">v31</span>;\n  unsigned int <span class=\"supfact\">v32</span>;\n  int <span class=\"supfact\">v33</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v32</span> = Number;\n  <span class=\"supfact\">v31</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v30</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v33</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">a4</span>;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v29</span> =\n        *(float *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">a3</span>);\n    if (<span class=\"supfact\">v29</span> <= Number) {\n      v5 = (__m128i)_mm_xor_ps((__m128)LODWORD(<span class=\"supfact\">v29</span>),\n                               (__m128)Number);\n      *(float *)v5.m128i_i32 = stbtt_ScaleForMappingEmToPixels(\n          (__int64)<span class=\"supfact\">a2</span>, *(float *)v5.m128i_i32);\n    } else {\n      v5 = _mm_cvtsi32_si128(LODWORD(<span class=\"supfact\">v29</span>));\n      *(float *)v5.m128i_i32 = stbtt_ScaleForPixelHeight(\n          (__int64)<span class=\"supfact\">a2</span>, *(float *)v5.m128i_i32);\n    }\n    <span class=\"supfact\">v28</span> = COERCE_FLOAT(_mm_cvtsi128_si32(v5));\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n        *(unsigned __int8 *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">a3</span> +\n                             Number);\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n        *(unsigned __int8 *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">a3</span> +\n                             Number);\n    <span class=\"supfact\">v27</span> = Number / (float)*(int *)(<span class=\"supfact\">a1</span> + Number);\n    <span class=\"supfact\">v6</span> = (__m128)Number;\n    <span class=\"supfact\">v26</span> = Number / (float)*(int *)(<span class=\"supfact\">a1</span> + Number);\n    <span class=\"supfact\">v6</span>.m128_f32[Number] = <span class=\"supfact\">v26</span>;\n    v7 = stbtt__oversample_shift(*(_DWORD *)(<span class=\"supfact\">a1</span> + Number),\n                                 *(double *)<span class=\"supfact\">v6</span>.m128_u64,\n                                 <span class=\"supfact\">v6</span>);\n    <span class=\"supfact\">v25</span> = COERCE_FLOAT(_mm_cvtsi128_si32((__m128i)v7));\n    <span class=\"supfact\">v24</span> =\n        COERCE_FLOAT(_mm_cvtsi128_si32((__m128i)stbtt__oversample_shift(\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number), *(double *)v7.m128_u64,\n            <span class=\"supfact\">v6</span>)));\n    for (<span class=\"supfact\">j</span> = Number;\n         <span class=\"supfact\">j</span> < *(_DWORD *)(Number L * <span class=\"supfact\">i</span> +\n                                         <span class=\"supfact\">a3</span> + Number);\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">v23</span> = Number L * <span class=\"supfact\">v33</span> + <span class=\"supfact\">a5</span>;\n      if (*(_DWORD *)(<span class=\"supfact\">v23</span> + Number)) {\n        <span class=\"supfact\">v22</span> = *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                                          <span class=\"supfact\">a3</span> + Number) +\n                              Number L * <span class=\"supfact\">j</span>;\n        if (*(_QWORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">a3</span> +\n                        Number))\n          <span class=\"supfact\">v8</span> =\n              *(_DWORD *)(Number L * <span class=\"supfact\">j</span> +\n                          *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                                      <span class=\"supfact\">a3</span> + Number));\n        else\n          <span class=\"supfact\">v8</span> = *(_DWORD *)(Number L * <span class=\"supfact\">i</span> +\n                                           <span class=\"supfact\">a3</span> + Number) +\n                               <span class=\"supfact\">j</span>;\n        <span class=\"supfact\">v21</span> = <span class=\"supfact\">v8</span>;\n        <span class=\"supfact\">v20</span> = stbtt_FindGlyphIndex((__int64)<span class=\"supfact\">a2</span>,\n                                                   <span class=\"supfact\">v8</span>);\n        <span class=\"supfact\">v19</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n        *(_WORD *)(<span class=\"supfact\">v23</span> + Number) += <span class=\"supfact\">v19</span>;\n        *(_WORD *)(<span class=\"supfact\">v23</span> + Number) += <span class=\"supfact\">v19</span>;\n        *(_WORD *)(<span class=\"supfact\">v23</span> + Number) -= <span class=\"supfact\">v19</span>;\n        *(_WORD *)(<span class=\"supfact\">v23</span> + Number) -= <span class=\"supfact\">v19</span>;\n        stbtt_GetGlyphHMetrics((__int64)<span class=\"supfact\">a2</span>, <span class=\"supfact\">v20</span>,\n                               &<span class=\"supfact\">v18</span>, &<span class=\"supfact\">v17</span>);\n        stbtt_GetGlyphBitmapBox(\n            (__int64)<span class=\"supfact\">a2</span>, <span class=\"supfact\">v20</span>,\n            &<span class=\"supfact\">v16</span>, &<span class=\"supfact\">v15</span>, &<span class=\"supfact\">v14</span>,\n            &<span class=\"supfact\">v13</span>,\n            (float)*(int *)(<span class=\"supfact\">a1</span> + Number) * <span class=\"supfact\">v28</span>,\n            (float)*(int *)(<span class=\"supfact\">a1</span> + Number) * <span class=\"supfact\">v28</span>);\n        stbtt_MakeGlyphBitmapSubpixel(\n            <span class=\"supfact\">a2</span>,\n            *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                *(unsigned __int16 *)(<span class=\"supfact\">v23</span> + Number) +\n                (__int64)(*(unsigned __int16 *)(<span class=\"supfact\">v23</span> + Number) *\n                          *(_DWORD *)(<span class=\"supfact\">a1</span> + Number)),\n            *(unsigned __int16 *)(<span class=\"supfact\">v23</span> + Number) -\n                *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) + Number,\n            *(unsigned __int16 *)(<span class=\"supfact\">v23</span> + Number) -\n                *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) + Number,\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number), <span class=\"supfact\">v20</span>,\n            (float)*(int *)(<span class=\"supfact\">a1</span> + Number) * <span class=\"supfact\">v28</span>,\n            (float)*(int *)(<span class=\"supfact\">a1</span> + Number) * <span class=\"supfact\">v28</span>,\n            Number, Number);\n        if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) > Number)\n          stbtt__h_prefilter(\n              (unsigned __int8\n                   *)(*(unsigned __int16 *)(<span class=\"supfact\">v23</span> + Number) +\n                      (__int64)(*(unsigned __int16 *)(<span class=\"supfact\">v23</span> +\n                                                      Number) *\n                                *(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) +\n                      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number)),\n              *(unsigned __int16 *)(<span class=\"supfact\">v23</span> + Number),\n              *(unsigned __int16 *)(<span class=\"supfact\">v23</span> + Number),\n              *(_DWORD *)(<span class=\"supfact\">a1</span> + Number),\n              *(_DWORD *)(<span class=\"supfact\">a1</span> + Number));\n        if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) > Number)\n          stbtt__v_prefilter(\n              (unsigned __int8\n                   *)(*(unsigned __int16 *)(<span class=\"supfact\">v23</span> + Number) +\n                      (__int64)(*(unsigned __int16 *)(<span class=\"supfact\">v23</span> +\n                                                      Number) *\n                                *(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) +\n                      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number)),\n              *(unsigned __int16 *)(<span class=\"supfact\">v23</span> + Number),\n              *(unsigned __int16 *)(<span class=\"supfact\">v23</span> + Number),\n              *(_DWORD *)(<span class=\"supfact\">a1</span> + Number),\n              *(_DWORD *)(<span class=\"supfact\">a1</span> + Number));\n        *(_WORD *)<span class=\"supfact\">v22</span> =\n            *(_WORD *)(<span class=\"supfact\">v23</span> + Number);\n        *(_WORD *)(<span class=\"supfact\">v22</span> + Number) =\n            *(_WORD *)(<span class=\"supfact\">v23</span> + Number);\n        *(_WORD *)(<span class=\"supfact\">v22</span> + Number) =\n            *(_WORD *)(<span class=\"supfact\">v23</span> + Number) +\n            *(_WORD *)(<span class=\"supfact\">v23</span> + Number);\n        *(_WORD *)(<span class=\"supfact\">v22</span> + Number) =\n            *(_WORD *)(<span class=\"supfact\">v23</span> + Number) +\n            *(_WORD *)(<span class=\"supfact\">v23</span> + Number);\n        *(float *)(<span class=\"supfact\">v22</span> + Number) =\n            (float)<span class=\"supfact\">v18</span> * <span class=\"supfact\">v28</span>;\n        *(float *)(<span class=\"supfact\">v22</span> + Number) =\n            (float)((float)<span class=\"supfact\">v16</span> * <span class=\"supfact\">v27</span>) +\n            <span class=\"supfact\">v25</span>;\n        *(float *)(<span class=\"supfact\">v22</span> + Number) =\n            (float)((float)<span class=\"supfact\">v15</span> * <span class=\"supfact\">v26</span>) +\n            <span class=\"supfact\">v24</span>;\n        *(float *)(<span class=\"supfact\">v22</span> + Number) =\n            (float)((float)(*(unsigned __int16 *)(<span class=\"supfact\">v23</span> +\n                                                  Number) +\n                            <span class=\"supfact\">v16</span>) *\n                    <span class=\"supfact\">v27</span>) +\n            <span class=\"supfact\">v25</span>;\n        *(float *)(<span class=\"supfact\">v22</span> + Number) =\n            (float)((float)(*(unsigned __int16 *)(<span class=\"supfact\">v23</span> +\n                                                  Number) +\n                            <span class=\"supfact\">v15</span>) *\n                    <span class=\"supfact\">v26</span>) +\n            <span class=\"supfact\">v24</span>;\n      } else {\n        <span class=\"supfact\">v32</span> = Number;\n      }\n      ++<span class=\"supfact\">v33</span>;\n    }\n  }\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v31</span>;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v30</span>;\n  return <span class=\"supfact\">v32</span>;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "void * *"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "__int64"}, {"name": "a4", "type": "int", "pred_name": "a4", "ref_name": "a4", "ref_type": "int"}, {"name": "a5", "type": "__int64", "pred_name": "a5", "ref_name": "a5", "ref_type": "__int64"}, {"name": "v6", "type": "void", "pred_name": "v6", "ref_name": "v6", "ref_type": "void"}, {"name": "v8", "type": "int", "pred_name": "v8", "ref_name": "v8", "ref_type": "int"}, {"name": "v13", "type": "int", "pred_name": "v13", "ref_name": "v13", "ref_type": "int"}, {"name": "v14", "type": "int", "pred_name": "v14", "ref_name": "v14", "ref_type": "int"}, {"name": "v15", "type": "int", "pred_name": "v15", "ref_name": "v15", "ref_type": "int"}, {"name": "v16", "type": "int", "pred_name": "v16", "ref_name": "v16", "ref_type": "int"}, {"name": "v17", "type": "int", "pred_name": "v17", "ref_name": "v17", "ref_type": "int"}, {"name": "v18", "type": "int", "pred_name": "v18", "ref_name": "v18", "ref_type": "int"}, {"name": "v19", "type": "unsigned __int16", "pred_name": "v19", "ref_name": "v19", "ref_type": "__int16"}, {"name": "v20", "type": "int", "pred_name": "v20", "ref_name": "v20", "ref_type": "unsigned int"}, {"name": "v21", "type": "int", "pred_name": "v21", "ref_name": "v21", "ref_type": "int"}, {"name": "v22", "type": "__int64", "pred_name": "v22", "ref_name": "v22", "ref_type": "__int64"}, {"name": "v23", "type": "__int64", "pred_name": "v23", "ref_name": "v23", "ref_type": "__int64"}, {"name": "v24", "type": "int", "pred_name": "v24", "ref_name": "v24", "ref_type": "float"}, {"name": "v25", "type": "int", "pred_name": "v25", "ref_name": "v25", "ref_type": "float"}, {"name": "v26", "type": "int", "pred_name": "v26", "ref_name": "v26", "ref_type": "float"}, {"name": "v27", "type": "int", "pred_name": "v27", "ref_name": "v27", "ref_type": "float"}, {"name": "v28", "type": "int", "pred_name": "v28", "ref_name": "v28", "ref_type": "float"}, {"name": "v29", "type": "int", "pred_name": "v29", "ref_name": "v29", "ref_type": "float"}, {"name": "v30", "type": "int", "pred_name": "v30", "ref_name": "v30", "ref_type": "int"}, {"name": "v31", "type": "int", "pred_name": "v31", "ref_name": "v31", "ref_type": "int"}, {"name": "v32", "type": "int", "pred_name": "v32", "ref_name": "v32", "ref_type": "unsigned int"}, {"name": "v33", "type": "int", "pred_name": "v33", "ref_name": "v33", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "j", "ref_name": "j", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/53d830a43215f228fc0a4c27e6f0f8ad5a6e43d5f5cf7f601c574db1fd46c809", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/recfile", "objdump": "000000000047cb07 <pj_shutdown>:\n  47cb07:\t55                   \tpush   %rbp\n  47cb08:\t48 89 e5             \tmov    %rsp,%rbp\n  47cb0b:\t48 83 ec 10          \tsub    $0x10,%rsp\n  47cb0f:\t8b 05 ab c3 03 00    \tmov    0x3c3ab(%rip),%eax        # 4b8ec0 <initialized>\n  47cb15:\t85 c0                \ttest   %eax,%eax\n  47cb17:\t7f 19                \tjg     47cb32 <pj_shutdown+0x2b>\n  47cb19:\tb9 48 4c 4a 00       \tmov    $0x4a4c48,%ecx\n  47cb1e:\tba f0 00 00 00       \tmov    $0xf0,%edx\n  47cb23:\tbe 28 49 4a 00       \tmov    $0x4a4928,%esi\n  47cb28:\tbf 86 49 4a 00       \tmov    $0x4a4986,%edi\n  47cb2d:\te8 ce 95 f8 ff       \tcallq  406100 <__assert_fail@plt>\n  47cb32:\t8b 05 88 c3 03 00    \tmov    0x3c388(%rip),%eax        # 4b8ec0 <initialized>\n  47cb38:\t83 e8 01             \tsub    $0x1,%eax\n  47cb3b:\t89 05 7f c3 03 00    \tmov    %eax,0x3c37f(%rip)        # 4b8ec0 <initialized>\n  47cb41:\t8b 05 79 c3 03 00    \tmov    0x3c379(%rip),%eax        # 4b8ec0 <initialized>\n  47cb47:\t85 c0                \ttest   %eax,%eax\n  47cb49:\t0f 85 9a 00 00 00    \tjne    47cbe9 <pj_shutdown+0xe2>\n  47cb4f:\t8b 05 63 c4 03 00    \tmov    0x3c463(%rip),%eax        # 4b8fb8 <atexit_count>\n  47cb55:\t83 e8 01             \tsub    $0x1,%eax\n  47cb58:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  47cb5b:\teb 13                \tjmp    47cb70 <pj_shutdown+0x69>\n  47cb5d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  47cb60:\t48 98                \tcltq   \n  47cb62:\t48 8b 04 c5 c0 8f 4b \tmov    0x4b8fc0(,%rax,8),%rax\n  47cb69:\t00 \n  47cb6a:\tff d0                \tcallq  *%rax\n  47cb6c:\t83 6d fc 01          \tsubl   $0x1,-0x4(%rbp)\n  47cb70:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  47cb74:\t79 e7                \tjns    47cb5d <pj_shutdown+0x56>\n  47cb76:\tc7 05 38 c4 03 00 00 \tmovl   $0x0,0x3c438(%rip)        # 4b8fb8 <atexit_count>\n  47cb7d:\t00 00 00 \n  47cb80:\t8b 05 22 cc 03 00    \tmov    0x3cc22(%rip),%eax        # 4b97a8 <PJ_NO_MEMORY_EXCEPTION>\n  47cb86:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  47cb89:\t74 17                \tje     47cba2 <pj_shutdown+0x9b>\n  47cb8b:\t8b 05 17 cc 03 00    \tmov    0x3cc17(%rip),%eax        # 4b97a8 <PJ_NO_MEMORY_EXCEPTION>\n  47cb91:\t89 c7                \tmov    %eax,%edi\n  47cb93:\te8 ac 4a 00 00       \tcallq  481644 <pj_exception_id_free>\n  47cb98:\tc7 05 06 cc 03 00 ff \tmovl   $0xffffffff,0x3cc06(%rip)        # 4b97a8 <PJ_NO_MEMORY_EXCEPTION>\n  47cb9f:\tff ff ff \n  47cba2:\tbf 40 8f 4b 00       \tmov    $0x4b8f40,%edi\n  47cba7:\te8 3c 11 00 00       \tcallq  47dce8 <pj_mutex_destroy>\n  47cbac:\t48 8b 05 75 c3 03 00 \tmov    0x3c375(%rip),%rax        # 4b8f28 <thread_tls_id>\n  47cbb3:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n  47cbb7:\t74 1a                \tje     47cbd3 <pj_shutdown+0xcc>\n  47cbb9:\t48 8b 05 68 c3 03 00 \tmov    0x3c368(%rip),%rax        # 4b8f28 <thread_tls_id>\n  47cbc0:\t48 89 c7             \tmov    %rax,%rdi\n  47cbc3:\te8 5e 0b 00 00       \tcallq  47d726 <pj_thread_local_free>\n  47cbc8:\t48 c7 05 55 c3 03 00 \tmovq   $0xffffffffffffffff,0x3c355(%rip)        # 4b8f28 <thread_tls_id>\n  47cbcf:\tff ff ff ff \n  47cbd3:\tbe 48 00 00 00       \tmov    $0x48,%esi\n  47cbd8:\tbf e0 8e 4b 00       \tmov    $0x4b8ee0,%edi\n  47cbdd:\te8 a4 fd ff ff       \tcallq  47c986 <pj_bzero>\n  47cbe2:\te8 b4 40 00 00       \tcallq  480c9b <pj_errno_clear_handlers>\n  47cbe7:\teb 01                \tjmp    47cbea <pj_shutdown+0xe3>\n  47cbe9:\t90                   \tnop\n  47cbea:\tc9                   \tleaveq \n  47cbeb:\tc3                   \tretq   ", "code_s": "__int64 pj_shutdown() {\n  __int64 result;\n  int i;\n  if (initialized <= Number)\n    __assert_fail(String, String, Number, String);\n  result = (unsigned int)--initialized;\n  if (!initialized) {\n    for (i = atexit_count - Number; i >= Number; --i)\n      ((void (*)(void))atexit_func[i])();\n    atexit_count = Number;\n    if (PJ_NO_MEMORY_EXCEPTION != Number) {\n      pj_exception_id_free((unsigned int)PJ_NO_MEMORY_EXCEPTION);\n      PJ_NO_MEMORY_EXCEPTION = Number;\n    }\n    pj_mutex_destroy(&critical_section);\n    if (thread_tls_id != Number) {\n      pj_thread_local_free(thread_tls_id);\n      thread_tls_id = Number;\n    }\n    pj_bzero_13(&main_thread, Number);\n    result = pj_errno_clear_handlers();\n  }\n  return result;\n}", "code_t": "void __cdecl pj_shutdown() {\n  int <span class=\"supfact\">i</span>;\n  if (initialized <= Number)\n    __assert_fail(String, String, Number, String);\n  if (!--initialized) {\n    for (<span class=\"supfact\">i</span> = atexit_count - Number; <span class=\"supfact\">i</span> >= Number;\n         --<span class=\"supfact\">i</span>)\n      atexit_func[<span class=\"supfact\">i</span>]();\n    atexit_count = Number;\n    if (PJ_NO_MEMORY_EXCEPTION != Number) {\n      pj_exception_id_free(PJ_NO_MEMORY_EXCEPTION);\n      PJ_NO_MEMORY_EXCEPTION = Number;\n    }\n    pj_mutex_destroy(&critical_section);\n    if (thread_tls_id != Number) {\n      pj_thread_local_free(thread_tls_id);\n      thread_tls_id = Number;\n    }\n    pj_bzero_13(&main_thread, Number);\n    pj_errno_clear_handlers();\n  }\n}", "var": [{"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "RSB4760", "repo_name": "apq8016_external_wpa_supplicant_8", "path": "RSB4760/apq8016_external_wpa_supplicant_8/e5ac252a2e189ada9ab1dc584ff2dacd5bca65f0cf132a5f66c7de5643be387b", "path_in_repo": "RSB4760/apq8016_external_wpa_supplicant_8/src/ap/wpa_auth_glue.o", "objdump": "00000000000011cf <hostapd_wpa_auth_add_sta>:\n    11cf:\t55                   \tpush   %rbp\n    11d0:\t48 89 e5             \tmov    %rsp,%rbp\n    11d3:\t48 83 ec 20          \tsub    $0x20,%rsp\n    11d7:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    11db:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    11df:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11e3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    11e7:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    11eb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11ef:\tba 02 00 00 00       \tmov    $0x2,%edx\n    11f4:\t48 89 ce             \tmov    %rcx,%rsi\n    11f7:\t48 89 c7             \tmov    %rax,%rdi\n    11fa:\te8 00 00 00 00       \tcallq  11ff <hostapd_wpa_auth_add_sta+0x30>\n    11ff:\t85 c0                \ttest   %eax,%eax\n    1201:\t79 0a                \tjns    120d <hostapd_wpa_auth_add_sta+0x3e>\n    1203:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1208:\te9 bc 00 00 00       \tjmpq   12c9 <hostapd_wpa_auth_add_sta+0xfa>\n    120d:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    1211:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1215:\t48 89 d6             \tmov    %rdx,%rsi\n    1218:\t48 89 c7             \tmov    %rax,%rdi\n    121b:\te8 00 00 00 00       \tcallq  1220 <hostapd_wpa_auth_add_sta+0x51>\n    1220:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1224:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1229:\t75 0a                \tjne    1235 <hostapd_wpa_auth_add_sta+0x66>\n    122b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1230:\te9 94 00 00 00       \tjmpq   12c9 <hostapd_wpa_auth_add_sta+0xfa>\n    1235:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1239:\t48 8b 80 c0 00 00 00 \tmov    0xc0(%rax),%rax\n    1240:\t48 85 c0             \ttest   %rax,%rax\n    1243:\t74 17                \tje     125c <hostapd_wpa_auth_add_sta+0x8d>\n    1245:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1249:\t66 c7 40 64 02 00    \tmovw   $0x2,0x64(%rax)\n    124f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1253:\t48 8b 80 c0 00 00 00 \tmov    0xc0(%rax),%rax\n    125a:\teb 6d                \tjmp    12c9 <hostapd_wpa_auth_add_sta+0xfa>\n    125c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1260:\t48 8d 48 10          \tlea    0x10(%rax),%rcx\n    1264:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1268:\t48 8b 80 88 09 00 00 \tmov    0x988(%rax),%rax\n    126f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1274:\t48 89 ce             \tmov    %rcx,%rsi\n    1277:\t48 89 c7             \tmov    %rax,%rdi\n    127a:\te8 00 00 00 00       \tcallq  127f <hostapd_wpa_auth_add_sta+0xb0>\n    127f:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1283:\t48 89 82 c0 00 00 00 \tmov    %rax,0xc0(%rdx)\n    128a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    128e:\t48 8b 80 c0 00 00 00 \tmov    0xc0(%rax),%rax\n    1295:\t48 85 c0             \ttest   %rax,%rax\n    1298:\t75 1a                \tjne    12b4 <hostapd_wpa_auth_add_sta+0xe5>\n    129a:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    129e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    12a2:\t48 89 d6             \tmov    %rdx,%rsi\n    12a5:\t48 89 c7             \tmov    %rax,%rdi\n    12a8:\te8 00 00 00 00       \tcallq  12ad <hostapd_wpa_auth_add_sta+0xde>\n    12ad:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12b2:\teb 15                \tjmp    12c9 <hostapd_wpa_auth_add_sta+0xfa>\n    12b4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    12b8:\t66 c7 40 64 02 00    \tmovw   $0x2,0x64(%rax)\n    12be:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    12c2:\t48 8b 80 c0 00 00 00 \tmov    0xc0(%rax),%rax\n    12c9:\tc9                   \tleaveq \n    12ca:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hostapd_wpa_auth_add_sta(__int64 a1, __int64 a2) {\n  __int64 result;\n  __int64 v3;\n  if ((int)hostapd_add_sta_node(a1, a2, Number L) < Number)\n    return Number L;\n  v3 = ap_sta_add(a1, a2);\n  if (!v3)\n    return Number L;\n  if (*(_QWORD *)(v3 + Number)) {\n    *(_WORD *)(v3 + Number) = Number;\n    result = *(_QWORD *)(v3 + Number);\n  } else {\n    *(_QWORD *)(v3 + Number) =\n        wpa_auth_sta_init(*(_QWORD *)(a1 + Number), v3 + Number, Number L);\n    if (*(_QWORD *)(v3 + Number)) {\n      *(_WORD *)(v3 + Number) = Number;\n      result = *(_QWORD *)(v3 + Number);\n    } else {\n      ap_free_sta(a1, v3);\n      result = Number L;\n    }\n  }\n  return result;\n}", "code_t": "wpa_state_machine *__cdecl hostapd_wpa_auth_add_sta(\n    void *<span class=\"supfact\">ctx</span>, const u8 *<span class=\"supfact\">sta_addr</span>) {\n  wpa_state_machine *<span class=\"supfact\">result</span>;\n  sta_info *<span class=\"supfact\">sta</span>;\n  if ((int)hostapd_add_sta_node(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">sta_addr</span>,\n                                Number L) < Number)\n    return Number L;\n  <span class=\"supfact\">sta</span> =\n      (sta_info *)ap_sta_add(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">sta_addr</span>);\n  if (!<span class=\"supfact\">sta</span>)\n    return Number L;\n  if (<span class=\"supfact\">sta</span>->wpa_sm) {\n    <span class=\"supfact\">sta</span>->auth_alg = Number;\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">sta</span>->wpa_sm;\n  } else {\n    <span class=\"supfact\">sta</span>->wpa_sm = (wpa_state_machine *)wpa_auth_sta_init(\n        *((_QWORD *)<span class=\"supfact\">ctx</span> + Number), <span class=\"supfact\">sta</span>->addr,\n        Number L);\n    if (<span class=\"supfact\">sta</span>->wpa_sm) {\n      <span class=\"supfact\">sta</span>->auth_alg = Number;\n      <span class=\"supfact\">result</span> = <span class=\"supfact\">sta</span>->wpa_sm;\n    } else {\n      ap_free_sta(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">sta</span>);\n      <span class=\"supfact\">result</span> = Number L;\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "hostapd_data *", "pred_name": "hapd", "ref_name": "ctx", "ref_type": "void *"}, {"name": "a2", "type": "const u8 *", "pred_name": "addr", "ref_name": "sta_addr", "ref_type": "const u8 *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "wpa_state_machine *"}, {"name": "v3", "type": "sta_info *", "pred_name": "sta", "ref_name": "sta", "ref_type": "sta_info *"}], "body_in_train": true}, {"repo_owner": "awaterma", "repo_name": "flite-bin", "path": "awaterma/flite-bin/d4340175b1368e272e742cf139f3895ec05a351de8daf209ef3e52ef17dbeafe", "path_in_repo": "awaterma/flite-bin/flite-1.4-release/testsuite/record_in_noise", "objdump": "00000000004086c2 <val_less>:\n  4086c2:\t55                   \tpush   %rbp\n  4086c3:\t48 89 e5             \tmov    %rsp,%rbp\n  4086c6:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4086ca:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  4086ce:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  4086d2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4086d6:\t48 89 c7             \tmov    %rax,%rdi\n  4086d9:\te8 13 f7 ff ff       \tcallq  407df1 <val_float>\n  4086de:\tf3 0f 11 45 ec       \tmovss  %xmm0,-0x14(%rbp)\n  4086e3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4086e7:\t48 89 c7             \tmov    %rax,%rdi\n  4086ea:\te8 02 f7 ff ff       \tcallq  407df1 <val_float>\n  4086ef:\t0f 2f 45 ec          \tcomiss -0x14(%rbp),%xmm0\n  4086f3:\t0f 97 c0             \tseta   %al\n  4086f6:\t0f b6 c0             \tmovzbl %al,%eax\n  4086f9:\tc9                   \tleaveq \n  4086fa:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall val_less(__int16 *a1, __int16 *a2, __int64 a3, __int64 a4,\n                           __int64 a5, __int64 a6) {\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  float v11;\n  v11 = val_float(a1, (__int64)a2, a3, a4, a5, a6);\n  return val_float(a2, (__int64)a2, v6, v7, v8, v9) > v11;\n}", "code_t": "int __cdecl val_less(const cst_val *<span class=\"supfact\">v1</span>,\n                     const cst_val *<span class=\"supfact\">v2</span>) {\n  float <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = val_float(<span class=\"supfact\">v1</span>);\n  return val_float(<span class=\"supfact\">v2</span>) > <span class=\"supfact\">v3</span>;\n}", "var": [{"name": "a1", "type": "const cst_val *", "pred_name": "v1", "ref_name": "v1", "ref_type": "const cst_val *"}, {"name": "a2", "type": "const cst_val *", "pred_name": "v2", "ref_name": "v2", "ref_type": "const cst_val *"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v11", "type": "float", "pred_name": "v3", "ref_name": "v3", "ref_type": "float"}], "body_in_train": true}, {"repo_owner": "yosh1k104", "repo_name": "D-Switch", "path": "yosh1k104/D-Switch/da7245200acf06b3b90ecbc613f814e0586e2e1f07ee902eaebf9a4f984f605b", "path_in_repo": "yosh1k104/D-Switch/contiki-2.6/cpu/6502/dhcp/obj_native/rucb.o", "objdump": "000000000000007f <acked>:\n  7f:\t55                   \tpush   %rbp\n  80:\t48 89 e5             \tmov    %rsp,%rbp\n  83:\t48 83 ec 30          \tsub    $0x30,%rsp\n  87:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  8b:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  8f:\t89 d0                \tmov    %edx,%eax\n  91:\t88 45 dc             \tmov    %al,-0x24(%rbp)\n  94:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  98:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  9c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  a0:\t0f b7 80 ac 00 00 00 \tmovzwl 0xac(%rax),%eax\n  a7:\t8d 50 01             \tlea    0x1(%rax),%edx\n  aa:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  ae:\t66 89 90 ac 00 00 00 \tmov    %dx,0xac(%rax)\n  b5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  b9:\t48 89 c7             \tmov    %rax,%rdi\n  bc:\te8 3f ff ff ff       \tcallq  0 <read_data>\n  c1:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  c4:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  c8:\t75 0e                \tjne    d8 <acked+0x59>\n  ca:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  ce:\t8b 80 b0 00 00 00    \tmov    0xb0(%rax),%eax\n  d4:\t85 c0                \ttest   %eax,%eax\n  d6:\t74 34                \tje     10c <acked+0x8d>\n  d8:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  dc:\t78 2f                \tjs     10d <acked+0x8e>\n  de:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  e2:\t48 8d 88 a8 00 00 00 \tlea    0xa8(%rax),%rcx\n  e9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  ed:\tba 08 00 00 00       \tmov    $0x8,%edx\n  f2:\t48 89 ce             \tmov    %rcx,%rsi\n  f5:\t48 89 c7             \tmov    %rax,%rdi\n  f8:\te8 00 00 00 00       \tcallq  fd <acked+0x7e>\n  fd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 101:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 104:\t89 90 b0 00 00 00    \tmov    %edx,0xb0(%rax)\n 10a:\teb 01                \tjmp    10d <acked+0x8e>\n 10c:\t90                   \tnop\n 10d:\tc9                   \tleaveq \n 10e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall acked(__int64 a1) {\n  __int64 result;\n  int v2;\n  ++*(_WORD *)(a1 + Number);\n  result = read_data(a1);\n  v2 = result;\n  if ((_DWORD)result ||\n      (result = *(unsigned int *)(a1 + Number), (_DWORD)result)) {\n    if (v2 >= Number) {\n      runicast_send(a1, a1 + Number, Number L);\n      result = a1;\n      *(_DWORD *)(a1 + Number) = v2;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl acked(runicast_conn *<span class=\"supfact\">ruc</span>, const rimeaddr_t *to,\n                   uint8_t retransmissions) {\n  int <span class=\"supfact\">len</span>;\n  ++*(&<span class=\"supfact\">ruc</span>[Number].c.c.c.c.channel.channelno + Number);\n  <span class=\"supfact\">len</span> = read_data((rucb_conn *)<span class=\"supfact\">ruc</span>);\n  if ((<span class=\"supfact\">len</span> ||\n       LODWORD(<span class=\"supfact\">ruc</span>[Number].c.c.c.c.channel.attrlist)) &&\n      <span class=\"supfact\">len</span> >= Number) {\n    runicast_send(<span class=\"supfact\">ruc</span>,\n                  &<span class=\"supfact\">ruc</span>[Number].c.c.c.c.channel.channelno,\n                  Number L);\n    LODWORD(<span class=\"supfact\">ruc</span>[Number].c.c.c.c.channel.attrlist) =\n        <span class=\"supfact\">len</span>;\n  }\n}", "var": [{"name": "a1", "type": "runicast_conn *", "pred_name": "ruc", "ref_name": "ruc", "ref_type": "runicast_conn *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v2", "type": "int", "pred_name": "len", "ref_name": "len", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "zzilla", "repo_name": "CodeCollection", "path": "zzilla/CodeCollection/77ec8ab161cdf0ae01184dc8646d8bf2fdabd4566a5f89331178edbcf37b9b7c", "path_in_repo": "zzilla/CodeCollection/A-V/ffmpeg/libavcodec/loco.o", "objdump": "0000000000000043 <NEG_USR32>:\n      43:\t89 7c 24 fc          \tmov    %edi,-0x4(%rsp)\n      47:\t89 f0                \tmov    %esi,%eax\n      49:\t88 44 24 f8          \tmov    %al,-0x8(%rsp)\n      4d:\t0f b6 44 24 f8       \tmovzbl -0x8(%rsp),%eax\n      52:\tf7 d8                \tneg    %eax\n      54:\t89 c2                \tmov    %eax,%edx\n      56:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n      5a:\t89 d1                \tmov    %edx,%ecx\n      5c:\td3 e8                \tshr    %cl,%eax\n      5e:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n      62:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n      66:\tc3                   \tretq   ", "code_s": "__int64 __fastcall NEG_USR32(unsigned int a1, char a2) { return a1 >> -a2; }", "code_t": "uint32_t __cdecl NEG_USR32(uint32_t <span class=\"supfact\">a</span>,\n                           int8_t <span class=\"supfact\">s</span>) {\n  return <span class=\"supfact\">a</span> >> -<span class=\"supfact\">s</span>;\n}", "var": [{"name": "a1", "type": "uint32_t", "pred_name": "a", "ref_name": "a", "ref_type": "uint32_t"}, {"name": "a2", "type": "int8_t", "pred_name": "s", "ref_name": "s", "ref_type": "int8_t"}], "body_in_train": true}, {"repo_owner": "unicorn-engine", "repo_name": "unicorn", "path": "unicorn-engine/unicorn/b53183f7cbbc4ab88ffaa467036529dc8c028722fdc15457026fe6ceb8238d21", "path_in_repo": "unicorn-engine/unicorn//qemu/mipsel-softmmu/target-mips/op_helper.o", "objdump": "0000000000003e7e <helper_mtc0_tcschefback_mipsel>:\n    3e7e:\t55                   \tpush   %rbp\n    3e7f:\t48 89 e5             \tmov    %rsp,%rbp\n    3e82:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    3e86:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n    3e89:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3e8d:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    3e90:\t89 90 cc 00 00 00    \tmov    %edx,0xcc(%rax)\n    3e96:\t90                   \tnop\n    3e97:\t5d                   \tpop    %rbp\n    3e98:\tc3                   \tretq   ", "code_s": "__int64 __fastcall helper_mtc0_tcschefback_mipsel(__int64 a1, int a2) {\n  __int64 result;\n  result = a1;\n  *(_DWORD *)(a1 + Number) = a2;\n  return result;\n}", "code_t": "void __cdecl helper_mtc0_tcschefback_mipsel(CPUMIPSState_0 *<span class=\"supfact\">env</span>,\n                                            target_ulong <span class=\"supfact\">arg1</span>) {\n  <span class=\"supfact\">env</span>->active_tc.CP0_TCScheFBack = <span class=\"supfact\">arg1</span>;\n}", "var": [{"name": "a1", "type": "CPUMIPSState_0 *", "pred_name": "env", "ref_name": "env", "ref_type": "CPUMIPSState_0 *"}, {"name": "a2", "type": "target_ulong", "pred_name": "arg1", "ref_name": "arg1", "ref_type": "target_ulong"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "plume-design", "repo_name": "opensync", "path": "plume-design/opensync/08f33a0ec46a8bad3d880504be1cd38675ebe105adca2213f7eee928a7fdeda6", "path_in_repo": "plume-design/opensync//work/native-debian10-x86_64/obj/src.lib.schema/src/lib/schema/src/schema.o", "objdump": "000000000002a439 <schema_Alarms_mark_changed>:\n   2a439:\t55                   \tpush   %rbp\n   2a43a:\t48 89 e5             \tmov    %rsp,%rbp\n   2a43d:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   2a441:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n   2a445:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   2a449:\t0f b6 90 d6 00 00 00 \tmovzbl 0xd6(%rax),%edx\n   2a450:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2a454:\t88 90 d7 00 00 00    \tmov    %dl,0xd7(%rax)\n   2a45a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   2a45e:\t0f b6 90 e0 00 00 00 \tmovzbl 0xe0(%rax),%edx\n   2a465:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2a469:\t88 90 e1 00 00 00    \tmov    %dl,0xe1(%rax)\n   2a46f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   2a473:\t0f b6 90 64 01 00 00 \tmovzbl 0x164(%rax),%edx\n   2a47a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2a47e:\t88 90 65 01 00 00    \tmov    %dl,0x165(%rax)\n   2a484:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   2a488:\t0f b6 90 e8 01 00 00 \tmovzbl 0x1e8(%rax),%edx\n   2a48f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2a493:\t88 90 e9 01 00 00    \tmov    %dl,0x1e9(%rax)\n   2a499:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   2a49d:\t0f b6 50 52          \tmovzbl 0x52(%rax),%edx\n   2a4a1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2a4a5:\t88 50 53             \tmov    %dl,0x53(%rax)\n   2a4a8:\t90                   \tnop\n   2a4a9:\t5d                   \tpop    %rbp\n   2a4aa:\tc3                   \tretq   ", "code_s": "_BYTE *__fastcall schema_Alarms_mark_changed(_BYTE *a1, _BYTE *a2) {\n  _BYTE *result;\n  a2[Number] = a1[Number];\n  a2[Number] = a1[Number];\n  a2[Number] = a1[Number];\n  a2[Number] = a1[Number];\n  result = a2;\n  a2[Number] = a1[Number];\n  return result;\n}", "code_t": "void __cdecl schema_Alarms_mark_changed(schema_Alarms *<span class=\"supfact\">old</span>,\n                                        schema_Alarms *<span class=\"supfact\">rec</span>) {\n  <span class=\"supfact\">rec</span>->code_changed = <span class=\"supfact\">old</span>->code_present;\n  <span class=\"supfact\">rec</span>->timestamp_changed =\n      <span class=\"supfact\">old</span>->timestamp_present;\n  <span class=\"supfact\">rec</span>->source_changed = <span class=\"supfact\">old</span>->source_present;\n  <span class=\"supfact\">rec</span>->add_info_changed = <span class=\"supfact\">old</span>->add_info_present;\n  <span class=\"supfact\">rec</span>->_version_changed = <span class=\"supfact\">old</span>->_version_present;\n}", "var": [{"name": "a1", "type": "schema_Bridge *", "pred_name": "old", "ref_name": "old", "ref_type": "schema_Alarms *"}, {"name": "a2", "type": "schema_Bridge *", "pred_name": "rec", "ref_name": "rec", "ref_type": "schema_Alarms *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/53d830a43215f228fc0a4c27e6f0f8ad5a6e43d5f5cf7f601c574db1fd46c809", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/recfile", "objdump": "0000000000426954 <update_stream>:\n  426954:\t55                   \tpush   %rbp\n  426955:\t48 89 e5             \tmov    %rsp,%rbp\n  426958:\t48 83 ec 40          \tsub    $0x40,%rsp\n  42695c:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  426960:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  426964:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  426968:\t8b 40 04             \tmov    0x4(%rax),%eax\n  42696b:\t89 c7                \tmov    %eax,%edi\n  42696d:\te8 ee ff fd ff       \tcallq  406960 <htonl@plt>\n  426972:\t89 c2                \tmov    %eax,%edx\n  426974:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  426978:\t89 d6                \tmov    %edx,%esi\n  42697a:\t48 89 c7             \tmov    %rax,%rdi\n  42697d:\te8 36 f9 ff ff       \tcallq  4262b8 <srtp_get_stream>\n  426982:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  426986:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  42698b:\t75 0a                \tjne    426997 <update_stream+0x43>\n  42698d:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  426992:\te9 d2 00 00 00       \tjmpq   426a69 <update_stream+0x115>\n  426997:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  42699b:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  42699f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4269a3:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  4269a7:\t48 8b 41 38          \tmov    0x38(%rcx),%rax\n  4269ab:\t48 8b 51 40          \tmov    0x40(%rcx),%rdx\n  4269af:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4269b3:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  4269b7:\t48 8b 41 48          \tmov    0x48(%rcx),%rax\n  4269bb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4269bf:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  4269c3:\t8b 40 04             \tmov    0x4(%rax),%eax\n  4269c6:\t89 c7                \tmov    %eax,%edi\n  4269c8:\te8 93 ff fd ff       \tcallq  406960 <htonl@plt>\n  4269cd:\t89 c2                \tmov    %eax,%edx\n  4269cf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4269d3:\t89 d6                \tmov    %edx,%esi\n  4269d5:\t48 89 c7             \tmov    %rax,%rdi\n  4269d8:\te8 c9 fb ff ff       \tcallq  4265a6 <srtp_remove_stream>\n  4269dd:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4269e0:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  4269e4:\t74 05                \tje     4269eb <update_stream+0x97>\n  4269e6:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4269e9:\teb 7e                \tjmp    426a69 <update_stream+0x115>\n  4269eb:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  4269ef:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4269f3:\t48 89 d6             \tmov    %rdx,%rsi\n  4269f6:\t48 89 c7             \tmov    %rax,%rdi\n  4269f9:\te8 99 f9 ff ff       \tcallq  426397 <srtp_add_stream>\n  4269fe:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  426a01:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  426a05:\t74 05                \tje     426a0c <update_stream+0xb8>\n  426a07:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  426a0a:\teb 5d                \tjmp    426a69 <update_stream+0x115>\n  426a0c:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  426a10:\t8b 40 04             \tmov    0x4(%rax),%eax\n  426a13:\t89 c7                \tmov    %eax,%edi\n  426a15:\te8 46 ff fd ff       \tcallq  406960 <htonl@plt>\n  426a1a:\t89 c2                \tmov    %eax,%edx\n  426a1c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  426a20:\t89 d6                \tmov    %edx,%esi\n  426a22:\t48 89 c7             \tmov    %rax,%rdi\n  426a25:\te8 8e f8 ff ff       \tcallq  4262b8 <srtp_get_stream>\n  426a2a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  426a2e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  426a33:\t75 07                \tjne    426a3c <update_stream+0xe8>\n  426a35:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  426a3a:\teb 2d                \tjmp    426a69 <update_stream+0x115>\n  426a3c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  426a40:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  426a44:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n  426a48:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  426a4c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  426a50:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  426a54:\t48 89 41 38          \tmov    %rax,0x38(%rcx)\n  426a58:\t48 89 51 40          \tmov    %rdx,0x40(%rcx)\n  426a5c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  426a60:\t48 89 41 48          \tmov    %rax,0x48(%rcx)\n  426a64:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  426a69:\tc9                   \tleaveq \n  426a6a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall update_stream(__int64 *a1, __int64 a2) {\n  int v2;\n  int v4;\n  int v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  unsigned int v9;\n  unsigned int v10;\n  __int64 v11;\n  _QWORD *v12;\n  _QWORD *v13;\n  v2 = htonl(*(_DWORD *)(a2 + Number));\n  v12 = (_QWORD *)srtp_get_stream(a1, v2);\n  if (!v12)\n    return Number L;\n  v11 = v12[Number];\n  v6 = v12[Number];\n  v7 = v12[Number];\n  v8 = v12[Number];\n  v4 = htonl(*(_DWORD *)(a2 + Number));\n  v9 = srtp_remove_stream(a1, v4);\n  if (v9)\n    return v9;\n  v10 = srtp_add_stream((__int64)a1, (_QWORD *)a2);\n  if (v10)\n    return v10;\n  v5 = htonl(*(_DWORD *)(a2 + Number));\n  v13 = (_QWORD *)srtp_get_stream(a1, v5);\n  if (!v13)\n    return Number L;\n  v13[Number] = v11;\n  v13[Number] = v6;\n  v13[Number] = v7;\n  v13[Number] = v8;\n  return Number L;\n}", "code_t": "srtp_err_status_t __cdecl update_stream(\n    srtp_t <span class=\"supfact\">session</span>,\n    const srtp_policy_t_0 *<span class=\"supfact\">policy</span>) {\n  uint32_t v2;\n  uint32_t v4;\n  uint32_t v5;\n  __int64 <span class=\"supfact\">old_rtcp_rdb</span>;\n  v128_t <span class=\"supfact\">old_rtcp_rdb_8</span>;\n  srtp_err_status_t status;\n  srtp_err_status_t statusa;\n  srtp_xtd_seq_num_t <span class=\"supfact\">old_index</span>;\n  srtp_stream_ctx_t *stream;\n  srtp_stream_ctx_t *streama;\n  v2 = htonl(<span class=\"supfact\">policy</span>->ssrc.value);\n  stream = srtp_get_stream(<span class=\"supfact\">session</span>, v2);\n  if (!stream)\n    return Number;\n  <span class=\"supfact\">old_index</span> = stream->rtp_rdbx.index;\n  <span class=\"supfact\">old_rtcp_rdb</span> = *(_QWORD *)&stream->rtcp_rdb.window_start;\n  <span class=\"supfact\">old_rtcp_rdb_8</span> = stream->rtcp_rdb.bitmask;\n  v4 = htonl(<span class=\"supfact\">policy</span>->ssrc.value);\n  status = srtp_remove_stream(<span class=\"supfact\">session</span>, v4);\n  if (status)\n    return status;\n  statusa = srtp_add_stream(<span class=\"supfact\">session</span>, <span class=\"supfact\">policy</span>);\n  if (statusa)\n    return statusa;\n  v5 = htonl(<span class=\"supfact\">policy</span>->ssrc.value);\n  streama = srtp_get_stream(<span class=\"supfact\">session</span>, v5);\n  if (!streama)\n    return Number;\n  streama->rtp_rdbx.index = <span class=\"supfact\">old_index</span>;\n  *(_QWORD *)&streama->rtcp_rdb.window_start = <span class=\"supfact\">old_rtcp_rdb</span>;\n  streama->rtcp_rdb.bitmask = <span class=\"supfact\">old_rtcp_rdb_8</span>;\n  return Number;\n}", "var": [{"name": "a1", "type": "srtp_t", "pred_name": "srtp", "ref_name": "session", "ref_type": "srtp_t"}, {"name": "a2", "type": "void *", "pred_name": "ssrc", "ref_name": "policy", "ref_type": "const srtp_policy_t_0 *"}, {"name": "v6", "type": "AVStream_0 *", "pred_name": "st", "ref_name": "old_rtcp_rdb", "ref_type": "__int64"}, {"name": "v7", "type": "disappear", "pred_name": "", "ref_name": "old_rtcp_rdb_8", "ref_type": "void"}, {"name": "v8", "type": "AVStream_0 *", "pred_name": "st2_0", "ref_name": "", "ref_type": "disappear"}, {"name": "v11", "type": "AVStream_0 *", "pred_name": "st1_0", "ref_name": "old_index", "ref_type": "srtp_xtd_seq_num_t"}], "body_in_train": true}, {"repo_owner": "HachimanH20", "repo_name": "android_kernel_samsung_exynos7420", "path": "HachimanH20/android_kernel_samsung_exynos7420/f289c6a3486b74c299c3162826a6cd45ad7575aa7c9b1f162a8ff16f21991765", "path_in_repo": "HachimanH20/android_kernel_samsung_exynos7420/tools/perf/util/pmu.o", "objdump": "0000000000000ac4 <pmu_type>:\n     ac4:\t55                   \tpush   %rbp\n     ac5:\t48 89 e5             \tmov    %rsp,%rbp\n     ac8:\t48 81 ec d0 10 00 00 \tsub    $0x10d0,%rsp\n     acf:\t48 89 bd 38 ef ff ff \tmov    %rdi,-0x10c8(%rbp)\n     ad6:\t48 89 b5 30 ef ff ff \tmov    %rsi,-0x10d0(%rbp)\n     add:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     ae4:\t00 00 \n     ae6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     aea:\t31 c0                \txor    %eax,%eax\n     aec:\tc7 85 4c ef ff ff 00 \tmovl   $0x0,-0x10b4(%rbp)\n     af3:\t00 00 00 \n     af6:\te8 00 00 00 00       \tcallq  afb <pmu_type+0x37>\n     afb:\t48 89 85 50 ef ff ff \tmov    %rax,-0x10b0(%rbp)\n     b02:\t48 83 bd 50 ef ff ff \tcmpq   $0x0,-0x10b0(%rbp)\n     b09:\t00 \n     b0a:\t75 0a                \tjne    b16 <pmu_type+0x52>\n     b0c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     b11:\te9 c6 00 00 00       \tjmpq   bdc <pmu_type+0x118>\n     b16:\t48 8b 8d 38 ef ff ff \tmov    -0x10c8(%rbp),%rcx\n     b1d:\t48 8b 95 50 ef ff ff \tmov    -0x10b0(%rbp),%rdx\n     b24:\t48 8d 85 f0 ef ff ff \tlea    -0x1010(%rbp),%rax\n     b2b:\t49 89 c8             \tmov    %rcx,%r8\n     b2e:\t48 89 d1             \tmov    %rdx,%rcx\n     b31:\tba 00 00 00 00       \tmov    $0x0,%edx\n     b36:\tbe 00 10 00 00       \tmov    $0x1000,%esi\n     b3b:\t48 89 c7             \tmov    %rax,%rdi\n     b3e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b43:\te8 00 00 00 00       \tcallq  b48 <pmu_type+0x84>\n     b48:\t48 8d 95 60 ef ff ff \tlea    -0x10a0(%rbp),%rdx\n     b4f:\t48 8d 85 f0 ef ff ff \tlea    -0x1010(%rbp),%rax\n     b56:\t48 89 d6             \tmov    %rdx,%rsi\n     b59:\t48 89 c7             \tmov    %rax,%rdi\n     b5c:\te8 00 00 00 00       \tcallq  b61 <pmu_type+0x9d>\n     b61:\t85 c0                \ttest   %eax,%eax\n     b63:\t79 07                \tjns    b6c <pmu_type+0xa8>\n     b65:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     b6a:\teb 70                \tjmp    bdc <pmu_type+0x118>\n     b6c:\t48 8d 85 f0 ef ff ff \tlea    -0x1010(%rbp),%rax\n     b73:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b78:\t48 89 c7             \tmov    %rax,%rdi\n     b7b:\te8 00 00 00 00       \tcallq  b80 <pmu_type+0xbc>\n     b80:\t48 89 85 58 ef ff ff \tmov    %rax,-0x10a8(%rbp)\n     b87:\t48 83 bd 58 ef ff ff \tcmpq   $0x0,-0x10a8(%rbp)\n     b8e:\t00 \n     b8f:\t75 07                \tjne    b98 <pmu_type+0xd4>\n     b91:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n     b96:\teb 44                \tjmp    bdc <pmu_type+0x118>\n     b98:\t48 8b 95 30 ef ff ff \tmov    -0x10d0(%rbp),%rdx\n     b9f:\t48 8b 85 58 ef ff ff \tmov    -0x10a8(%rbp),%rax\n     ba6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     bab:\t48 89 c7             \tmov    %rax,%rdi\n     bae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     bb3:\te8 00 00 00 00       \tcallq  bb8 <pmu_type+0xf4>\n     bb8:\t83 f8 01             \tcmp    $0x1,%eax\n     bbb:\t74 0a                \tje     bc7 <pmu_type+0x103>\n     bbd:\tc7 85 4c ef ff ff ff \tmovl   $0xffffffff,-0x10b4(%rbp)\n     bc4:\tff ff ff \n     bc7:\t48 8b 85 58 ef ff ff \tmov    -0x10a8(%rbp),%rax\n     bce:\t48 89 c7             \tmov    %rax,%rdi\n     bd1:\te8 00 00 00 00       \tcallq  bd6 <pmu_type+0x112>\n     bd6:\t8b 85 4c ef ff ff    \tmov    -0x10b4(%rbp),%eax\n     bdc:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     be0:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     be7:\t00 00 \n     be9:\t74 05                \tje     bf0 <pmu_type+0x12c>\n     beb:\te8 00 00 00 00       \tcallq  bf0 <pmu_type+0x12c>\n     bf0:\tc9                   \tleaveq \n     bf1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pmu_type(const char *a1, __int64 a2) {\n  unsigned int v3;\n  const char *v4;\n  FILE *stream;\n  struct stat64 v6;\n  char s[Number];\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  v3 = Number;\n  v4 = (const char *)sysfs_find_mountpoint();\n  if (!v4)\n    return Number;\n  snprintf(s, Number, String, v4, a1);\n  if (stat64(s, &v6) < Number)\n    return Number;\n  stream = fopen64(s, String);\n  if (!stream)\n    return Number L;\n  if (fscanf(stream, String, a2) != Number)\n    v3 = Number;\n  fclose(stream);\n  return v3;\n}", "code_t": "int __cdecl pmu_type(char *<span class=\"supfact\">name</span>, __u32 *<span class=\"supfact\">type</span>) {\n  int <span class=\"supfact\">ret</span>;\n  const char *<span class=\"supfact\">sysfs</span>;\n  FILE *<span class=\"supfact\">file</span>;\n  stat <span class=\"supfact\">st</span>;\n  char <span class=\"supfact\">path</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  <span class=\"supfact\">ret</span> = Number;\n  <span class=\"supfact\">sysfs</span> = (const char *)sysfs_find_mountpoint();\n  if (!<span class=\"supfact\">sysfs</span>)\n    return Number;\n  snprintf(<span class=\"supfact\">path</span>, Number, String, <span class=\"supfact\">sysfs</span>,\n           <span class=\"supfact\">name</span>);\n  if (stat64(<span class=\"supfact\">path</span>, (struct stat64 *)&<span class=\"supfact\">st</span>) <\n      Number)\n    return Number;\n  <span class=\"supfact\">file</span> = fopen64(<span class=\"supfact\">path</span>, String);\n  if (!<span class=\"supfact\">file</span>)\n    return Number;\n  if (fscanf(<span class=\"supfact\">file</span>, String, <span class=\"supfact\">type</span>) != Number)\n    <span class=\"supfact\">ret</span> = Number;\n  fclose(<span class=\"supfact\">file</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "name", "ref_name": "name", "ref_type": "char *"}, {"name": "a2", "type": "__u32 *", "pred_name": "type", "ref_name": "type", "ref_type": "__u32 *"}, {"name": "v3", "type": "int", "pred_name": "ret", "ref_name": "ret", "ref_type": "int"}, {"name": "v4", "type": "const char *", "pred_name": "sysfs", "ref_name": "sysfs", "ref_type": "const char *"}, {"name": "stream", "type": "FILE *", "pred_name": "file", "ref_name": "file", "ref_type": "FILE *"}, {"name": "v6", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "st", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}, {"name": "s", "type": "char[4096]", "pred_name": "path", "ref_name": "path", "ref_type": "char[4096]"}, {"name": "v8", "type": "unsigned __int64", "pred_name": "v8", "ref_name": "v8", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "mthuurne", "repo_name": "qemu-dingoo", "path": "mthuurne/qemu-dingoo/56fbc5f0d128f407eec607694bba72beb91c3f9b941c314b0bfb948dccfc7a05", "path_in_repo": "mthuurne/qemu-dingoo//microblaze-softmmu/translate.o", "objdump": "0000000000001cec <gen_io_start>:\n    1cec:\t55                   \tpush   %rbp\n    1ced:\t48 89 e5             \tmov    %rsp,%rbp\n    1cf0:\t48 83 ec 10          \tsub    $0x10,%rsp\n    1cf4:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1cfb:\t00 00 \n    1cfd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1d01:\t31 c0                \txor    %eax,%eax\n    1d03:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    1d08:\te8 00 00 00 00       \tcallq  1d0d <gen_io_start+0x21>\n    1d0d:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    1d10:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 1d16 <gen_io_start+0x2a>\n    1d16:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    1d19:\tba dc f3 00 00       \tmov    $0xf3dc,%edx\n    1d1e:\t89 ce                \tmov    %ecx,%esi\n    1d20:\t89 c7                \tmov    %eax,%edi\n    1d22:\te8 55 ec ff ff       \tcallq  97c <tcg_gen_st_i32>\n    1d27:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    1d2a:\t89 c7                \tmov    %eax,%edi\n    1d2c:\te8 00 00 00 00       \tcallq  1d31 <gen_io_start+0x45>\n    1d31:\t90                   \tnop\n    1d32:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1d36:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1d3d:\t00 00 \n    1d3f:\t74 05                \tje     1d46 <gen_io_start+0x5a>\n    1d41:\te8 00 00 00 00       \tcallq  1d46 <gen_io_start+0x5a>\n    1d46:\tc9                   \tleaveq \n    1d47:\tc3                   \tretq   ", "code_s": "unsigned __int64 gen_io_start() {\n  unsigned int v1;\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  v1 = tcg_const_i32(Number L);\n  tcg_gen_st_i32(v1, cpu_env, Number L);\n  tcg_temp_free_i32(v1);\n  return __readfsqword(Number) ^ v2;\n}", "code_t": "void __cdecl gen_io_start() {\n  unsigned int <span class=\"supfact\">tmp</span>;\n  <span class=\"supfact\">tmp</span> = tcg_const_i32(Number L);\n  tcg_gen_st_i32(<span class=\"supfact\">tmp</span>, cpu_env, Number L);\n  tcg_temp_free_i32(<span class=\"supfact\">tmp</span>);\n}", "var": [{"name": "v1", "type": "unsigned int", "pred_name": "tmp", "ref_name": "tmp", "ref_type": "unsigned int"}, {"name": "v2", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "marcelloceschia", "repo_name": "asterisk-11-extended_codec", "path": "marcelloceschia/asterisk-11-extended_codec/a2253950212d74200a0862b77ad82b8bcc3c4c22c53e7b90efee6ddcfb215979", "path_in_repo": "marcelloceschia/asterisk-11-extended_codec/res/pjproject/pjlib-util/build/output/pjlib-util-x86_64-unknown-linux-gnu/xml.o", "objdump": "00000000000000f8 <alloc_node>:\n      f8:\t55                   \tpush   %rbp\n      f9:\t48 89 e5             \tmov    %rsp,%rbp\n      fc:\t48 83 ec 20          \tsub    $0x20,%rsp\n     100:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     104:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     108:\tbe 70 00 00 00       \tmov    $0x70,%esi\n     10d:\t48 89 c7             \tmov    %rax,%rdi\n     110:\te8 79 ff ff ff       \tcallq  8e <pj_pool_zalloc>\n     115:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     119:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     11d:\t48 83 c0 20          \tadd    $0x20,%rax\n     121:\t48 89 c7             \tmov    %rax,%rdi\n     124:\te8 d7 fe ff ff       \tcallq  0 <pj_list_init>\n     129:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     12d:\t48 83 c0 50          \tadd    $0x50,%rax\n     131:\t48 89 c7             \tmov    %rax,%rdi\n     134:\te8 c7 fe ff ff       \tcallq  0 <pj_list_init>\n     139:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     13d:\tc9                   \tleaveq \n     13e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall alloc_node(__int64 a1) {\n  __int64 v2;\n  v2 = pj_pool_zalloc(a1, Number L);\n  pj_list_init((_QWORD *)(v2 + Number));\n  pj_list_init((_QWORD *)(v2 + Number));\n  return v2;\n}", "code_t": "pj_xml_node_0 *__cdecl alloc_node(pj_pool_t_0 *<span class=\"supfact\">pool</span>) {\n  pj_xml_node_0 *<span class=\"supfact\">node</span>;\n  <span class=\"supfact\">node</span> =\n      (pj_xml_node_0 *)pj_pool_zalloc(<span class=\"supfact\">pool</span>, Number);\n  pj_list_init(&<span class=\"supfact\">node</span>->attr_head);\n  pj_list_init(&<span class=\"supfact\">node</span>->node_head);\n  return <span class=\"supfact\">node</span>;\n}", "var": [{"name": "a1", "type": "pj_pool_t_0 *", "pred_name": "pool", "ref_name": "pool", "ref_type": "pj_pool_t_0 *"}, {"name": "v2", "type": "pj_xml_node_0 *", "pred_name": "node", "ref_name": "node", "ref_type": "pj_xml_node_0 *"}], "body_in_train": true}, {"repo_owner": "tks2103", "repo_name": "angel-test", "path": "tks2103/angel-test/c85a4934ab026169cb361afa3f7f99a18875134454ca8efb7bc0b1981a5e058c", "path_in_repo": "tks2103/angel-test/Code/Angel/Libraries/freetype-2.4.8/src/psaux/psaux.o", "objdump": "000000000000436a <t1_cmap_std_done>:\n    436a:\t55                   \tpush   %rbp\n    436b:\t48 89 e5             \tmov    %rsp,%rbp\n    436e:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    4372:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4376:\tc7 40 28 00 00 00 00 \tmovl   $0x0,0x28(%rax)\n    437d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4381:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    4388:\t00 \n    4389:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    438d:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    4394:\t00 \n    4395:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4399:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n    43a0:\t00 \n    43a1:\t90                   \tnop\n    43a2:\t5d                   \tpop    %rbp\n    43a3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall t1_cmap_std_done(__int64 a1) {\n  __int64 result;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = Number L;\n  result = a1;\n  *(_QWORD *)(a1 + Number) = Number L;\n  return result;\n}", "code_t": "void __cdecl t1_cmap_std_done(T1_CMapStd <span class=\"supfact\">cmap</span>) {\n  <span class=\"supfact\">cmap</span>->num_glyphs = Number;\n  <span class=\"supfact\">cmap</span>->glyph_names = Number L;\n  <span class=\"supfact\">cmap</span>->sid_to_string = Number L;\n  <span class=\"supfact\">cmap</span>->code_to_sid = Number L;\n}", "var": [{"name": "a1", "type": "T1_CMapStd", "pred_name": "cmap", "ref_name": "cmap", "ref_type": "T1_CMapStd"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "Panopto", "repo_name": "panopto-ffmpeg", "path": "Panopto/panopto-ffmpeg/4ce3e9df5f6ecdb761a3ea8e5a19ec52b290684600232a92a34a1b5687f91d03", "path_in_repo": "Panopto/panopto-ffmpeg//libavcodec/h264_sei.o", "objdump": "0000000000000246 <get_bits1>:\n     246:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n     24b:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     250:\t8b 40 10             \tmov    0x10(%rax),%eax\n     253:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n     257:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     25c:\t48 8b 00             \tmov    (%rax),%rax\n     25f:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n     263:\tc1 ea 03             \tshr    $0x3,%edx\n     266:\t89 d2                \tmov    %edx,%edx\n     268:\t48 01 d0             \tadd    %rdx,%rax\n     26b:\t0f b6 00             \tmovzbl (%rax),%eax\n     26e:\t88 44 24 fb          \tmov    %al,-0x5(%rsp)\n     272:\t0f b6 54 24 fb       \tmovzbl -0x5(%rsp),%edx\n     277:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     27b:\t83 e0 07             \tand    $0x7,%eax\n     27e:\t89 c1                \tmov    %eax,%ecx\n     280:\td3 e2                \tshl    %cl,%edx\n     282:\t89 d0                \tmov    %edx,%eax\n     284:\t88 44 24 fb          \tmov    %al,-0x5(%rsp)\n     288:\tc0 6c 24 fb 07       \tshrb   $0x7,-0x5(%rsp)\n     28d:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     292:\t8b 50 10             \tmov    0x10(%rax),%edx\n     295:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     29a:\t8b 40 18             \tmov    0x18(%rax),%eax\n     29d:\t39 c2                \tcmp    %eax,%edx\n     29f:\t7d 05                \tjge    2a6 <get_bits1+0x60>\n     2a1:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n     2a6:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n     2aa:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     2af:\t89 50 10             \tmov    %edx,0x10(%rax)\n     2b2:\t0f b6 44 24 fb       \tmovzbl -0x5(%rsp),%eax\n     2b7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_bits1(__int64 a1) {\n  unsigned __int8 v2;\n  unsigned int v3;\n  v3 = *(_DWORD *)(a1 + Number);\n  v2 = (unsigned __int8)(*(unsigned __int8 *)((v3 >> Number) + *(_QWORD *)a1)\n                         << (v3 & Number)) >>\n       Number;\n  if ((signed int)v3 < *(_DWORD *)(a1 + Number))\n    ++v3;\n  *(_DWORD *)(a1 + Number) = v3;\n  return v2;\n}", "code_t": "unsigned int __cdecl get_bits1(GetBitContext_0 *<span class=\"supfact\">s</span>) {\n  uint8_t <span class=\"supfact\">result</span>;\n  unsigned int <span class=\"supfact\">index</span>;\n  <span class=\"supfact\">index</span> = <span class=\"supfact\">s</span>-><span class=\"supfact\">index</span>;\n  <span class=\"supfact\">result</span> =\n      (unsigned __int8)(<span class=\"supfact\">s</span>\n                            ->buffer[<span class=\"supfact\">index</span> >> Number]\n                        << (<span class=\"supfact\">index</span> & Number)) >>\n      Number;\n  if ((signed int)<span class=\"supfact\">index</span> < <span class=\"supfact\">s</span>->size_in_bits_plus8)\n    ++<span class=\"supfact\">index</span>;\n  <span class=\"supfact\">s</span>-><span class=\"supfact\">index</span> = <span class=\"supfact\">index</span>;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "GetBitContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "GetBitContext_0 *"}, {"name": "v2", "type": "uint8_t", "pred_name": "result", "ref_name": "result", "ref_type": "uint8_t"}, {"name": "v3", "type": "unsigned int", "pred_name": "index", "ref_name": "index", "ref_type": "unsigned int"}], "body_in_train": true}, {"repo_owner": "Upstream-Kernels", "repo_name": "jf", "path": "Upstream-Kernels/jf/78a5c25d415dd1ee0d8d94a1325ce3beff1a23f81f2772e34e60ff36b352a993", "path_in_repo": "Upstream-Kernels/jf/tools/perf/builtin-lock.o", "objdump": "000000000000048f <thread_stat_findnew_after_first>:\n     48f:\t55                   \tpush   %rbp\n     490:\t48 89 e5             \tmov    %rsp,%rbp\n     493:\t48 83 ec 20          \tsub    $0x20,%rsp\n     497:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n     49a:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     4a1:\t00 00 \n     4a3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     4a7:\t31 c0                \txor    %eax,%eax\n     4a9:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     4ac:\t89 c7                \tmov    %eax,%edi\n     4ae:\te8 52 fe ff ff       \tcallq  305 <thread_stat_find>\n     4b3:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     4b7:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     4bc:\t74 06                \tje     4c4 <thread_stat_findnew_after_first+0x35>\n     4be:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     4c2:\teb 4e                \tjmp    512 <thread_stat_findnew_after_first+0x83>\n     4c4:\tbf 30 00 00 00       \tmov    $0x30,%edi\n     4c9:\te8 32 fb ff ff       \tcallq  0 <zalloc>\n     4ce:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     4d2:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     4d7:\t75 0f                \tjne    4e8 <thread_stat_findnew_after_first+0x59>\n     4d9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     4de:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     4e3:\te8 00 00 00 00       \tcallq  4e8 <thread_stat_findnew_after_first+0x59>\n     4e8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     4ec:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n     4ef:\t89 50 18             \tmov    %edx,0x18(%rax)\n     4f2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     4f6:\t48 83 c0 20          \tadd    $0x20,%rax\n     4fa:\t48 89 c7             \tmov    %rax,%rdi\n     4fd:\te8 40 fb ff ff       \tcallq  42 <INIT_LIST_HEAD>\n     502:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     506:\t48 89 c7             \tmov    %rax,%rdi\n     509:\te8 88 fe ff ff       \tcallq  396 <thread_stat_insert>\n     50e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     512:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     516:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     51d:\t00 00 \n     51f:\t74 05                \tje     526 <thread_stat_findnew_after_first+0x97>\n     521:\te8 00 00 00 00       \tcallq  526 <thread_stat_findnew_after_first+0x97>\n     526:\tc9                   \tleaveq \n     527:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall thread_stat_findnew_after_first(unsigned int a1) {\n  __int64 v2;\n  _DWORD *v3;\n  v2 = thread_stat_find(a1);\n  if (v2)\n    return (_DWORD *)v2;\n  v3 = zalloc(Number);\n  if (!v3)\n    die(String);\n  v3[Number] = a1;\n  INIT_LIST_HEAD((_QWORD *)v3 + Number);\n  thread_stat_insert((__int64)v3);\n  return v3;\n}", "code_t": "thread_stat *__cdecl thread_stat_findnew_after_first(u32 <span class=\"supfact\">tid</span>) {\n  thread_stat *st;\n  thread_stat *sta;\n  st = thread_stat_find(<span class=\"supfact\">tid</span>);\n  if (st)\n    return st;\n  sta = (thread_stat *)zalloc(Number);\n  if (!sta)\n    die(String);\n  sta-><span class=\"supfact\">tid</span> = <span class=\"supfact\">tid</span>;\n  INIT_LIST_HEAD(&sta->seq_list);\n  thread_stat_insert(sta);\n  return sta;\n}", "var": [{"name": "a1", "type": "u32", "pred_name": "tid", "ref_name": "tid", "ref_type": "u32"}], "body_in_train": true}, {"repo_owner": "daveti", "repo_name": "tcpSockHack", "path": "daveti/tcpSockHack/b9dbe5d444624a13796fd1eb9bb12053537d113a7b25257cb2c4145f6b9d13b5", "path_in_repo": "daveti/tcpSockHack/kernel/linux-2.6.32-573.7.1.el6.x86_64/scripts/kconfig/conf", "objdump": "", "code_s": "int putchar(int c) { return putchar(c); }", "code_t": "int putchar(int <span class=\"supfact\">c</span>) { return putchar(<span class=\"supfact\">c</span>); }", "var": [{"name": "c", "type": "int", "pred_name": "c", "ref_name": "c", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "HexHive", "repo_name": "SMoTherSpectre", "path": "HexHive/SMoTherSpectre/e1cdbed3a4daa5b9c6f2dabe1c504e5dbb4dd4829ebad0f32df49942f26374a9", "path_in_repo": "HexHive/SMoTherSpectre/openssl_attack/openssl/crypto/evp/p_lib.o", "objdump": "0000000000001568 <EVP_PKEY_get_default_digest_nid>:\n    1568:\t55                   \tpush   %rbp\n    1569:\t48 89 e5             \tmov    %rsp,%rbp\n    156c:\t48 83 ec 10          \tsub    $0x10,%rsp\n    1570:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    1574:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    1578:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    157c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1580:\t48 89 d1             \tmov    %rdx,%rcx\n    1583:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1588:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    158d:\t48 89 c7             \tmov    %rax,%rdi\n    1590:\te8 6d ff ff ff       \tcallq  1502 <evp_pkey_asn1_ctrl>\n    1595:\tc9                   \tleaveq \n    1596:\tc3                   \tretq   ", "code_s": "__int64 __fastcall EVP_PKEY_get_default_digest_nid(__int64 a1, __int64 a2) {\n  return evp_pkey_asn1_ctrl(a1, Number, Number, a2);\n}", "code_t": "int __cdecl EVP_PKEY_get_default_digest_nid(EVP_PKEY *<span class=\"supfact\">pkey</span>,\n                                            int *<span class=\"supfact\">pnid</span>) {\n  return evp_pkey_asn1_ctrl(<span class=\"supfact\">pkey</span>, Number, Number,\n                            <span class=\"supfact\">pnid</span>);\n}", "var": [{"name": "a1", "type": "EVP_PKEY *", "pred_name": "pkey", "ref_name": "pkey", "ref_type": "EVP_PKEY *"}, {"name": "a2", "type": "int *", "pred_name": "pnid", "ref_name": "pnid", "ref_type": "int *"}], "body_in_train": true}]