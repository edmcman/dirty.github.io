[{"repo_owner": "collinoswalt", "repo_name": "Quake2-VS2017", "path": "collinoswalt/Quake2-VS2017/39cff31ad06b99e580d20ed164f768c537e849da6b1d5baf330f9fa28ae7b694", "path_in_repo": "collinoswalt/Quake2-VS2017/game/include/libxml/nanoftp.o", "objdump": "0000000000000f3a <xmlNanoFTPReadResponse>:\n     f3a:\t55                   \tpush   %rbp\n     f3b:\t48 89 e5             \tmov    %rsp,%rbp\n     f3e:\t48 83 ec 40          \tsub    $0x40,%rsp\n     f42:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     f46:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     f4a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     f4e:\tc7 45 f4 ff ff ff ff \tmovl   $0xffffffff,-0xc(%rbp)\n     f55:\tc7 45 e4 ff ff ff ff \tmovl   $0xffffffff,-0x1c(%rbp)\n     f5c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     f60:\t48 89 c7             \tmov    %rax,%rdi\n     f63:\te8 04 fe ff ff       \tcallq  d6c <xmlNanoFTPGetMore>\n     f68:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     f6b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f6f:\t8b 80 5c 02 00 00    \tmov    0x25c(%rax),%eax\n     f75:\t85 c0                \ttest   %eax,%eax\n     f77:\t75 10                \tjne    f89 <xmlNanoFTPReadResponse+0x4f>\n     f79:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n     f7d:\t75 0a                \tjne    f89 <xmlNanoFTPReadResponse+0x4f>\n     f7f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     f84:\te9 6c 01 00 00       \tjmpq   10f5 <xmlNanoFTPReadResponse+0x1bb>\n     f89:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f8d:\t8b 80 58 02 00 00    \tmov    0x258(%rax),%eax\n     f93:\t48 98                \tcltq   \n     f95:\t48 8d 50 50          \tlea    0x50(%rax),%rdx\n     f99:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f9d:\t48 01 d0             \tadd    %rdx,%rax\n     fa0:\t48 83 c0 04          \tadd    $0x4,%rax\n     fa4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     fa8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     fac:\t8b 80 5c 02 00 00    \tmov    0x25c(%rax),%eax\n     fb2:\t48 98                \tcltq   \n     fb4:\t48 8d 50 50          \tlea    0x50(%rax),%rdx\n     fb8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     fbc:\t48 01 d0             \tadd    %rdx,%rax\n     fbf:\t48 83 c0 04          \tadd    $0x4,%rax\n     fc3:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     fc7:\te9 d7 00 00 00       \tjmpq   10a3 <xmlNanoFTPReadResponse+0x169>\n     fcc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     fd0:\t48 2b 45 f8          \tsub    -0x8(%rbp),%rax\n     fd4:\t89 c2                \tmov    %eax,%edx\n     fd6:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     fda:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     fde:\t48 89 ce             \tmov    %rcx,%rsi\n     fe1:\t48 89 c7             \tmov    %rax,%rdi\n     fe4:\te8 77 fc ff ff       \tcallq  c60 <xmlNanoFTPParseResponse>\n     fe9:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     fec:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n     ff0:\t7e 69                \tjle    105b <xmlNanoFTPReadResponse+0x121>\n     ff2:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     ff5:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     ff8:\t48 83 45 f8 03       \taddq   $0x3,-0x8(%rbp)\n     ffd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1001:\t48 8d 50 54          \tlea    0x54(%rax),%rdx\n    1005:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1009:\t48 29 d0             \tsub    %rdx,%rax\n    100c:\t89 c2                \tmov    %eax,%edx\n    100e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1012:\t89 90 60 02 00 00    \tmov    %edx,0x260(%rax)\n    1018:\teb 05                \tjmp    101f <xmlNanoFTPReadResponse+0xe5>\n    101a:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    101f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1023:\t48 3b 45 d8          \tcmp    -0x28(%rbp),%rax\n    1027:\t73 0b                \tjae    1034 <xmlNanoFTPReadResponse+0xfa>\n    1029:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    102d:\t0f b6 00             \tmovzbl (%rax),%eax\n    1030:\t3c 0a                \tcmp    $0xa,%al\n    1032:\t75 e6                \tjne    101a <xmlNanoFTPReadResponse+0xe0>\n    1034:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1038:\t0f b6 00             \tmovzbl (%rax),%eax\n    103b:\t3c 0a                \tcmp    $0xa,%al\n    103d:\t75 05                \tjne    1044 <xmlNanoFTPReadResponse+0x10a>\n    103f:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    1044:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1048:\t0f b6 00             \tmovzbl (%rax),%eax\n    104b:\t3c 0d                \tcmp    $0xd,%al\n    104d:\t75 64                \tjne    10b3 <xmlNanoFTPReadResponse+0x179>\n    104f:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    1054:\teb 5d                \tjmp    10b3 <xmlNanoFTPReadResponse+0x179>\n    1056:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    105b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    105f:\t48 3b 45 d8          \tcmp    -0x28(%rbp),%rax\n    1063:\t73 0b                \tjae    1070 <xmlNanoFTPReadResponse+0x136>\n    1065:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1069:\t0f b6 00             \tmovzbl (%rax),%eax\n    106c:\t3c 0a                \tcmp    $0xa,%al\n    106e:\t75 e6                \tjne    1056 <xmlNanoFTPReadResponse+0x11c>\n    1070:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1074:\t48 3b 45 d8          \tcmp    -0x28(%rbp),%rax\n    1078:\t72 19                \tjb     1093 <xmlNanoFTPReadResponse+0x159>\n    107a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    107e:\t8b 90 5c 02 00 00    \tmov    0x25c(%rax),%edx\n    1084:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1088:\t89 90 58 02 00 00    \tmov    %edx,0x258(%rax)\n    108e:\te9 c9 fe ff ff       \tjmpq   f5c <xmlNanoFTPReadResponse+0x22>\n    1093:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1097:\t0f b6 00             \tmovzbl (%rax),%eax\n    109a:\t3c 0d                \tcmp    $0xd,%al\n    109c:\t74 05                \tje     10a3 <xmlNanoFTPReadResponse+0x169>\n    109e:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    10a3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    10a7:\t48 3b 45 d8          \tcmp    -0x28(%rbp),%rax\n    10ab:\t0f 82 1b ff ff ff    \tjb     fcc <xmlNanoFTPReadResponse+0x92>\n    10b1:\teb 01                \tjmp    10b4 <xmlNanoFTPReadResponse+0x17a>\n    10b3:\t90                   \tnop\n    10b4:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    10b8:\t79 05                \tjns    10bf <xmlNanoFTPReadResponse+0x185>\n    10ba:\te9 9d fe ff ff       \tjmpq   f5c <xmlNanoFTPReadResponse+0x22>\n    10bf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    10c3:\t48 8d 50 54          \tlea    0x54(%rax),%rdx\n    10c7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    10cb:\t48 29 d0             \tsub    %rdx,%rax\n    10ce:\t89 c2                \tmov    %eax,%edx\n    10d0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    10d4:\t89 90 58 02 00 00    \tmov    %edx,0x258(%rax)\n    10da:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    10dd:\t48 63 d0             \tmovslq %eax,%rdx\n    10e0:\t48 69 d2 1f 85 eb 51 \timul   $0x51eb851f,%rdx,%rdx\n    10e7:\t48 c1 ea 20          \tshr    $0x20,%rdx\n    10eb:\tc1 fa 05             \tsar    $0x5,%edx\n    10ee:\tc1 f8 1f             \tsar    $0x1f,%eax\n    10f1:\t29 c2                \tsub    %eax,%edx\n    10f3:\t89 d0                \tmov    %edx,%eax\n    10f5:\tc9                   \tleaveq \n    10f6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall xmlNanoFTPReadResponse(int *<span class=\"supfact\">a1</span>) {\n  unsigned __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  char *<span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v5</span> = Number;\n  do {\n  LABEL_2:\n    <span class=\"supfact\">v3</span> = xmlNanoFTPGetMore(<span class=\"supfact\">a1</span>);\n    if (!<span class=\"supfact\">a1</span>[Number] && !<span class=\"supfact\">v3</span>)\n      return Number;\n    <span class=\"supfact\">v6</span> =\n        (char *)<span class=\"supfact\">a1</span> + <span class=\"supfact\">a1</span>[Number] + Number;\n    <span class=\"supfact\">v2</span> = (unsigned __int64)<span class=\"supfact\">a1</span> +\n                         <span class=\"supfact\">a1</span>[Number] + Number;\n    while ((unsigned __int64)<span class=\"supfact\">v6</span> < <span class=\"supfact\">v2</span>) {\n      <span class=\"supfact\">v4</span> = xmlNanoFTPParseResponse(\n          (__int64)<span class=\"supfact\">a1</span>, <span class=\"supfact\">v6</span>,\n          (int)<span class=\"supfact\">v2</span> - (int)<span class=\"supfact\">v6</span>);\n      if (<span class=\"supfact\">v4</span> > Number) {\n        <span class=\"supfact\">v5</span> = <span class=\"supfact\">v4</span>;\n        <span class=\"supfact\">v6</span> += Number;\n        <span class=\"supfact\">a1</span>[Number] =\n            (_DWORD)<span class=\"supfact\">v6</span> - ((_DWORD)<span class=\"supfact\">a1</span> + Number);\n        while ((unsigned __int64)<span class=\"supfact\">v6</span> < <span class=\"supfact\">v2</span> &&\n               *<span class=\"supfact\">v6</span> != Number)\n          ++<span class=\"supfact\">v6</span>;\n        if (*<span class=\"supfact\">v6</span> == Number)\n          ++<span class=\"supfact\">v6</span>;\n        if (*<span class=\"supfact\">v6</span> == Number)\n          LODWORD(<span class=\"supfact\">v6</span>) = (_DWORD)<span class=\"supfact\">v6</span> + Number;\n        break;\n      }\n      while ((unsigned __int64)<span class=\"supfact\">v6</span> < <span class=\"supfact\">v2</span> &&\n             *<span class=\"supfact\">v6</span> != Number)\n        ++<span class=\"supfact\">v6</span>;\n      if ((unsigned __int64)<span class=\"supfact\">v6</span> >= <span class=\"supfact\">v2</span>) {\n        <span class=\"supfact\">a1</span>[Number] = <span class=\"supfact\">a1</span>[Number];\n        goto LABEL_2;\n      }\n      if (*<span class=\"supfact\">v6</span> != Number)\n        ++<span class=\"supfact\">v6</span>;\n    }\n  } while (<span class=\"supfact\">v5</span> < Number);\n  <span class=\"supfact\">a1</span>[Number] =\n      (_DWORD)<span class=\"supfact\">v6</span> - ((_DWORD)<span class=\"supfact\">a1</span> + Number);\n  return (unsigned int)(<span class=\"supfact\">v5</span> / Number);\n}", "code_t": "int __cdecl xmlNanoFTPReadResponse(void *<span class=\"supfact\">ctx</span>) {\n  char *<span class=\"supfact\">end</span>;\n  int <span class=\"supfact\">len</span>;\n  int <span class=\"supfact\">cur</span>;\n  int <span class=\"supfact\">res</span>;\n  char *<span class=\"supfact\">ptr</span>;\n  <span class=\"supfact\">res</span> = Number;\n  do {\n  get_more:\n    <span class=\"supfact\">len</span> = xmlNanoFTPGetMore(<span class=\"supfact\">ctx</span>);\n    if (!*((_DWORD *)<span class=\"supfact\">ctx</span> + Number) && !<span class=\"supfact\">len</span>)\n      return Number;\n    <span class=\"supfact\">ptr</span> = (char *)<span class=\"supfact\">ctx</span> +\n                          *((int *)<span class=\"supfact\">ctx</span> + Number) + Number;\n    <span class=\"supfact\">end</span> = (char *)<span class=\"supfact\">ctx</span> +\n                          *((int *)<span class=\"supfact\">ctx</span> + Number) + Number;\n    while (<span class=\"supfact\">ptr</span> < <span class=\"supfact\">end</span>) {\n      <span class=\"supfact\">cur</span> = xmlNanoFTPParseResponse(\n          <span class=\"supfact\">ctx</span>, <span class=\"supfact\">ptr</span>,\n          (_DWORD)<span class=\"supfact\">end</span> - (_DWORD)<span class=\"supfact\">ptr</span>);\n      if (<span class=\"supfact\">cur</span> > Number) {\n        <span class=\"supfact\">res</span> = <span class=\"supfact\">cur</span>;\n        <span class=\"supfact\">ptr</span> += Number;\n        *((_DWORD *)<span class=\"supfact\">ctx</span> + Number) =\n            (_DWORD)<span class=\"supfact\">ptr</span> -\n            ((_DWORD)<span class=\"supfact\">ctx</span> + Number);\n        while (<span class=\"supfact\">ptr</span> < <span class=\"supfact\">end</span> &&\n               *<span class=\"supfact\">ptr</span> != Number)\n          ++<span class=\"supfact\">ptr</span>;\n        if (*<span class=\"supfact\">ptr</span> == Number)\n          ++<span class=\"supfact\">ptr</span>;\n        if (*<span class=\"supfact\">ptr</span> == Number)\n          LODWORD(<span class=\"supfact\">ptr</span>) = (_DWORD)<span class=\"supfact\">ptr</span> + Number;\n        break;\n      }\n      while (<span class=\"supfact\">ptr</span> < <span class=\"supfact\">end</span> &&\n             *<span class=\"supfact\">ptr</span> != Number)\n        ++<span class=\"supfact\">ptr</span>;\n      if (<span class=\"supfact\">ptr</span> >= <span class=\"supfact\">end</span>) {\n        *((_DWORD *)<span class=\"supfact\">ctx</span> + Number) =\n            *((_DWORD *)<span class=\"supfact\">ctx</span> + Number);\n        goto get_more;\n      }\n      if (*<span class=\"supfact\">ptr</span> != Number)\n        ++<span class=\"supfact\">ptr</span>;\n    }\n  } while (<span class=\"supfact\">res</span> < Number);\n  *((_DWORD *)<span class=\"supfact\">ctx</span> + Number) =\n      (_DWORD)<span class=\"supfact\">ptr</span> - ((_DWORD)<span class=\"supfact\">ctx</span> + Number);\n  return <span class=\"supfact\">res</span> / Number;\n}", "var": [{"name": "a1", "type": "xmlURIPtr", "pred_name": "uri", "ref_name": "ctx", "ref_type": "void *"}, {"name": "v2", "type": "xmlNodePtr", "pred_name": "vec", "ref_name": "end", "ref_type": "char *"}, {"name": "v3", "type": "int", "pred_name": "length", "ref_name": "len", "ref_type": "int"}, {"name": "v4", "type": "int", "pred_name": "read", "ref_name": "cur", "ref_type": "int"}, {"name": "v5", "type": "int", "pred_name": "i", "ref_name": "res", "ref_type": "int"}, {"name": "v6", "type": "const char *", "pred_name": "p", "ref_name": "ptr", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "slapin", "repo_name": "q2-dev", "path": "slapin/q2-dev/e1b91f1ae6f6bf16d95fca94468a1efb869b9f59680796b18b71f5c99abc0058", "path_in_repo": "slapin/q2-dev/quake2/releasex86_64/ref_glx.so", "objdump": "00000000000174d3 <GL_ShutdownImages>:\n   174d3:\t48 83 ec 18          \tsub    $0x18,%rsp\n   174d7:\tc7 44 24 0c 00 00 00 \tmovl   $0x0,0xc(%rsp)\n   174de:\t00 \n   174df:\t48 8b 05 2a 5c 03 00 \tmov    0x35c2a(%rip),%rax        # 4d110 <gltextures@@Base-0x36c50>\n   174e6:\t48 89 04 24          \tmov    %rax,(%rsp)\n   174ea:\teb 4a                \tjmp    17536 <GL_ShutdownImages+0x63>\n   174ec:\t48 8b 04 24          \tmov    (%rsp),%rax\n   174f0:\t8b 40 54             \tmov    0x54(%rax),%eax\n   174f3:\t85 c0                \ttest   %eax,%eax\n   174f5:\t74 34                \tje     1752b <GL_ShutdownImages+0x58>\n   174f7:\t48 8b 05 2a 63 03 00 \tmov    0x3632a(%rip),%rax        # 4d828 <qglDeleteTextures@@Base-0xfe1b0>\n   174fe:\t48 8b 10             \tmov    (%rax),%rdx\n   17501:\t48 8b 04 24          \tmov    (%rsp),%rax\n   17505:\t48 83 c0 60          \tadd    $0x60,%rax\n   17509:\t48 89 c6             \tmov    %rax,%rsi\n   1750c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n   17511:\tff d2                \tcallq  *%rdx\n   17513:\t48 8b 04 24          \tmov    (%rsp),%rax\n   17517:\tba 80 00 00 00       \tmov    $0x80,%edx\n   1751c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   17521:\t48 89 c7             \tmov    %rax,%rdi\n   17524:\te8 07 a1 ff ff       \tcallq  11630 <memset@plt>\n   17529:\teb 01                \tjmp    1752c <GL_ShutdownImages+0x59>\n   1752b:\t90                   \tnop\n   1752c:\t83 44 24 0c 01       \taddl   $0x1,0xc(%rsp)\n   17531:\t48 83 2c 24 80       \tsubq   $0xffffffffffffff80,(%rsp)\n   17536:\t48 8b 05 fb 5a 03 00 \tmov    0x35afb(%rip),%rax        # 4d038 <numgltextures@@Base-0x36d08>\n   1753d:\t8b 00                \tmov    (%rax),%eax\n   1753f:\t39 44 24 0c          \tcmp    %eax,0xc(%rsp)\n   17543:\t7c a7                \tjl     174ec <GL_ShutdownImages+0x19>\n   17545:\t90                   \tnop\n   17546:\t90                   \tnop\n   17547:\t48 83 c4 18          \tadd    $0x18,%rsp\n   1754b:\tc3                   \tretq   ", "code_s": "__int64 GL_ShutdownImages() {\n  __int64 <span class=\"supfact\">result</span>;\n  _DWORD *<span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = Number;\n  for (<span class=\"supfact\">s</span> = &gltextures;; <span class=\"supfact\">s</span> += Number) {\n    <span class=\"supfact\">result</span> = numgltextures;\n    if (<span class=\"supfact\">v2</span> >= numgltextures)\n      break;\n    if (<span class=\"supfact\">s</span>[Number]) {\n      qglDeleteTextures(Number L, <span class=\"supfact\">s</span> + Number);\n      memset(<span class=\"supfact\">s</span>, Number, Number);\n    }\n    ++<span class=\"supfact\">v2</span>;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl GL_ShutdownImages() {\n  image_t *<span class=\"supfact\">image</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">i</span> = Number;\n  <span class=\"supfact\">image</span> = gltextures;\n  while (<span class=\"supfact\">i</span> < numgltextures) {\n    if (<span class=\"supfact\">image</span>->registration_sequence) {\n      qglDeleteTextures(Number, (const GLuint *)&<span class=\"supfact\">image</span>->texnum);\n      memset(<span class=\"supfact\">image</span>, Number, sizeof(image_t));\n    }\n    ++<span class=\"supfact\">i</span>;\n    ++<span class=\"supfact\">image</span>;\n  }\n}", "var": [{"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "s", "type": "image_t *", "pred_name": "image", "ref_name": "image", "ref_type": "image_t *"}, {"name": "v2", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "CGrader", "repo_name": "ffmpeg-modif", "path": "CGrader/ffmpeg-modif/426ef4f8a9c38689879faeb23bb0c7a50f04f7bfc46d9fe41639841c747c240c", "path_in_repo": "CGrader/ffmpeg-modif//libavfilter/vf_dctdnoiz.o", "objdump": "0000000000000c1f <color_decorrelation>:\n     c1f:\t48 89 7c 24 c8       \tmov    %rdi,-0x38(%rsp)\n     c24:\t48 89 74 24 c0       \tmov    %rsi,-0x40(%rsp)\n     c29:\t89 54 24 bc          \tmov    %edx,-0x44(%rsp)\n     c2d:\t48 89 4c 24 b0       \tmov    %rcx,-0x50(%rsp)\n     c32:\t44 89 44 24 b8       \tmov    %r8d,-0x48(%rsp)\n     c37:\t44 89 4c 24 ac       \tmov    %r9d,-0x54(%rsp)\n     c3c:\t48 8b 44 24 c0       \tmov    -0x40(%rsp),%rax\n     c41:\t48 8b 00             \tmov    (%rax),%rax\n     c44:\t48 89 44 24 f0       \tmov    %rax,-0x10(%rsp)\n     c49:\t48 8b 44 24 c0       \tmov    -0x40(%rsp),%rax\n     c4e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     c52:\t48 89 44 24 e8       \tmov    %rax,-0x18(%rsp)\n     c57:\t48 8b 44 24 c0       \tmov    -0x40(%rsp),%rax\n     c5c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     c60:\t48 89 44 24 e0       \tmov    %rax,-0x20(%rsp)\n     c65:\tc7 44 24 f8 00 00 00 \tmovl   $0x0,-0x8(%rsp)\n     c6c:\t00 \n     c6d:\te9 05 02 00 00       \tjmpq   e77 <color_decorrelation+0x258>\n     c72:\t48 8b 44 24 b0       \tmov    -0x50(%rsp),%rax\n     c77:\t48 89 44 24 d8       \tmov    %rax,-0x28(%rsp)\n     c7c:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n     c83:\t00 \n     c84:\te9 a3 01 00 00       \tjmpq   e2c <color_decorrelation+0x20d>\n     c89:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     c8e:\t0f b6 00             \tmovzbl (%rax),%eax\n     c91:\t0f b6 c0             \tmovzbl %al,%eax\n     c94:\tf3 0f 2a c8          \tcvtsi2ss %eax,%xmm1\n     c98:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     c9d:\tf3 0f 10 00          \tmovss  (%rax),%xmm0\n     ca1:\tf3 0f 59 c8          \tmulss  %xmm0,%xmm1\n     ca5:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     caa:\t48 83 c0 01          \tadd    $0x1,%rax\n     cae:\t0f b6 00             \tmovzbl (%rax),%eax\n     cb1:\t0f b6 c0             \tmovzbl %al,%eax\n     cb4:\tf3 0f 2a d0          \tcvtsi2ss %eax,%xmm2\n     cb8:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     cbd:\tf3 0f 10 40 04       \tmovss  0x4(%rax),%xmm0\n     cc2:\tf3 0f 59 c2          \tmulss  %xmm2,%xmm0\n     cc6:\tf3 0f 58 c8          \taddss  %xmm0,%xmm1\n     cca:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     ccf:\t48 83 c0 02          \tadd    $0x2,%rax\n     cd3:\t0f b6 00             \tmovzbl (%rax),%eax\n     cd6:\t0f b6 c0             \tmovzbl %al,%eax\n     cd9:\tf3 0f 2a d0          \tcvtsi2ss %eax,%xmm2\n     cdd:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     ce2:\tf3 0f 10 40 08       \tmovss  0x8(%rax),%xmm0\n     ce7:\tf3 0f 59 c2          \tmulss  %xmm2,%xmm0\n     ceb:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     cef:\t48 98                \tcltq   \n     cf1:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n     cf8:\t00 \n     cf9:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n     cfe:\t48 01 d0             \tadd    %rdx,%rax\n     d01:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n     d05:\tf3 0f 11 00          \tmovss  %xmm0,(%rax)\n     d09:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     d0e:\t0f b6 00             \tmovzbl (%rax),%eax\n     d11:\t0f b6 c0             \tmovzbl %al,%eax\n     d14:\tf3 0f 2a c8          \tcvtsi2ss %eax,%xmm1\n     d18:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     d1d:\t48 83 c0 0c          \tadd    $0xc,%rax\n     d21:\tf3 0f 10 00          \tmovss  (%rax),%xmm0\n     d25:\tf3 0f 59 c8          \tmulss  %xmm0,%xmm1\n     d29:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     d2e:\t48 83 c0 01          \tadd    $0x1,%rax\n     d32:\t0f b6 00             \tmovzbl (%rax),%eax\n     d35:\t0f b6 c0             \tmovzbl %al,%eax\n     d38:\tf3 0f 2a d0          \tcvtsi2ss %eax,%xmm2\n     d3c:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     d41:\t48 83 c0 0c          \tadd    $0xc,%rax\n     d45:\tf3 0f 10 40 04       \tmovss  0x4(%rax),%xmm0\n     d4a:\tf3 0f 59 c2          \tmulss  %xmm2,%xmm0\n     d4e:\tf3 0f 58 c8          \taddss  %xmm0,%xmm1\n     d52:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     d57:\t48 83 c0 02          \tadd    $0x2,%rax\n     d5b:\t0f b6 00             \tmovzbl (%rax),%eax\n     d5e:\t0f b6 c0             \tmovzbl %al,%eax\n     d61:\tf3 0f 2a d0          \tcvtsi2ss %eax,%xmm2\n     d65:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     d6a:\t48 83 c0 0c          \tadd    $0xc,%rax\n     d6e:\tf3 0f 10 40 08       \tmovss  0x8(%rax),%xmm0\n     d73:\tf3 0f 59 c2          \tmulss  %xmm2,%xmm0\n     d77:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     d7b:\t48 98                \tcltq   \n     d7d:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n     d84:\t00 \n     d85:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     d8a:\t48 01 d0             \tadd    %rdx,%rax\n     d8d:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n     d91:\tf3 0f 11 00          \tmovss  %xmm0,(%rax)\n     d95:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     d9a:\t0f b6 00             \tmovzbl (%rax),%eax\n     d9d:\t0f b6 c0             \tmovzbl %al,%eax\n     da0:\tf3 0f 2a c8          \tcvtsi2ss %eax,%xmm1\n     da4:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     da9:\t48 83 c0 18          \tadd    $0x18,%rax\n     dad:\tf3 0f 10 00          \tmovss  (%rax),%xmm0\n     db1:\tf3 0f 59 c8          \tmulss  %xmm0,%xmm1\n     db5:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     dba:\t48 83 c0 01          \tadd    $0x1,%rax\n     dbe:\t0f b6 00             \tmovzbl (%rax),%eax\n     dc1:\t0f b6 c0             \tmovzbl %al,%eax\n     dc4:\tf3 0f 2a d0          \tcvtsi2ss %eax,%xmm2\n     dc8:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     dcd:\t48 83 c0 18          \tadd    $0x18,%rax\n     dd1:\tf3 0f 10 40 04       \tmovss  0x4(%rax),%xmm0\n     dd6:\tf3 0f 59 c2          \tmulss  %xmm2,%xmm0\n     dda:\tf3 0f 58 c8          \taddss  %xmm0,%xmm1\n     dde:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     de3:\t48 83 c0 02          \tadd    $0x2,%rax\n     de7:\t0f b6 00             \tmovzbl (%rax),%eax\n     dea:\t0f b6 c0             \tmovzbl %al,%eax\n     ded:\tf3 0f 2a d0          \tcvtsi2ss %eax,%xmm2\n     df1:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     df6:\t48 83 c0 18          \tadd    $0x18,%rax\n     dfa:\tf3 0f 10 40 08       \tmovss  0x8(%rax),%xmm0\n     dff:\tf3 0f 59 c2          \tmulss  %xmm2,%xmm0\n     e03:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     e07:\t48 98                \tcltq   \n     e09:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n     e10:\t00 \n     e11:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n     e16:\t48 01 d0             \tadd    %rdx,%rax\n     e19:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n     e1d:\tf3 0f 11 00          \tmovss  %xmm0,(%rax)\n     e21:\t48 83 44 24 d8 03    \taddq   $0x3,-0x28(%rsp)\n     e27:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n     e2c:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     e30:\t3b 44 24 ac          \tcmp    -0x54(%rsp),%eax\n     e34:\t0f 8c 4f fe ff ff    \tjl     c89 <color_decorrelation+0x6a>\n     e3a:\t8b 44 24 b8          \tmov    -0x48(%rsp),%eax\n     e3e:\t48 98                \tcltq   \n     e40:\t48 01 44 24 b0       \tadd    %rax,-0x50(%rsp)\n     e45:\t8b 44 24 bc          \tmov    -0x44(%rsp),%eax\n     e49:\t48 98                \tcltq   \n     e4b:\t48 c1 e0 02          \tshl    $0x2,%rax\n     e4f:\t48 01 44 24 f0       \tadd    %rax,-0x10(%rsp)\n     e54:\t8b 44 24 bc          \tmov    -0x44(%rsp),%eax\n     e58:\t48 98                \tcltq   \n     e5a:\t48 c1 e0 02          \tshl    $0x2,%rax\n     e5e:\t48 01 44 24 e8       \tadd    %rax,-0x18(%rsp)\n     e63:\t8b 44 24 bc          \tmov    -0x44(%rsp),%eax\n     e67:\t48 98                \tcltq   \n     e69:\t48 c1 e0 02          \tshl    $0x2,%rax\n     e6d:\t48 01 44 24 e0       \tadd    %rax,-0x20(%rsp)\n     e72:\t83 44 24 f8 01       \taddl   $0x1,-0x8(%rsp)\n     e77:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n     e7b:\t3b 44 24 08          \tcmp    0x8(%rsp),%eax\n     e7f:\t0f 8c ed fd ff ff    \tjl     c72 <color_decorrelation+0x53>\n     e85:\t90                   \tnop\n     e86:\t90                   \tnop\n     e87:\tc3                   \tretq   ", "code_s": "__int64 __fastcall color_decorrelation(\n    float *<span class=\"supfact\">a1</span>, __int64 *<span class=\"supfact\">a2</span>,\n    int <span class=\"supfact\">a3</span>, unsigned __int8 *<span class=\"supfact\">a4</span>,\n    int <span class=\"supfact\">a5</span>, int <span class=\"supfact\">a6</span>, int <span class=\"supfact\">a7</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  unsigned __int8 *<span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">j</span>;\n  <span class=\"supfact\">v12</span> = *<span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v11</span> = <span class=\"supfact\">a2</span>[Number];\n  <span class=\"supfact\">v10</span> = <span class=\"supfact\">a2</span>[Number];\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">i</span>;\n    if ((int)<span class=\"supfact\">i</span> >= <span class=\"supfact\">a7</span>)\n      break;\n    <span class=\"supfact\">v9</span> = <span class=\"supfact\">a4</span>;\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < <span class=\"supfact\">a6</span>;\n         ++<span class=\"supfact\">j</span>) {\n      *(float *)(Number L * <span class=\"supfact\">j</span> + <span class=\"supfact\">v12</span>) =\n          (float)(<span class=\"supfact\">a1</span>[Number] *\n                  (float)<span class=\"supfact\">v9</span>[Number]) +\n          (float)((float)((float)*<span class=\"supfact\">v9</span> * *<span class=\"supfact\">a1</span>) +\n                  (float)(<span class=\"supfact\">a1</span>[Number] *\n                          (float)<span class=\"supfact\">v9</span>[Number]));\n      *(float *)(Number L * <span class=\"supfact\">j</span> + <span class=\"supfact\">v11</span>) =\n          (float)(<span class=\"supfact\">a1</span>[Number] *\n                  (float)<span class=\"supfact\">v9</span>[Number]) +\n          (float)((float)((float)*<span class=\"supfact\">v9</span> *\n                          <span class=\"supfact\">a1</span>[Number]) +\n                  (float)(<span class=\"supfact\">a1</span>[Number] *\n                          (float)<span class=\"supfact\">v9</span>[Number]));\n      *(float *)(Number L * <span class=\"supfact\">j</span> + <span class=\"supfact\">v10</span>) =\n          (float)(<span class=\"supfact\">a1</span>[Number] *\n                  (float)<span class=\"supfact\">v9</span>[Number]) +\n          (float)((float)((float)*<span class=\"supfact\">v9</span> *\n                          <span class=\"supfact\">a1</span>[Number]) +\n                  (float)(<span class=\"supfact\">a1</span>[Number] *\n                          (float)<span class=\"supfact\">v9</span>[Number]));\n      <span class=\"supfact\">v9</span> += Number;\n    }\n    <span class=\"supfact\">a4</span> += <span class=\"supfact\">a5</span>;\n    <span class=\"supfact\">v12</span> += Number L * <span class=\"supfact\">a3</span>;\n    <span class=\"supfact\">v11</span> += Number L * <span class=\"supfact\">a3</span>;\n    <span class=\"supfact\">v10</span> += Number L * <span class=\"supfact\">a3</span>;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl color_decorrelation(float (*<span class=\"supfact\">dct3ch</span>)[Number],\n                                 float **<span class=\"supfact\">dst</span>,\n                                 int <span class=\"supfact\">dst_linesize</span>,\n                                 const uint8_t *<span class=\"supfact\">src</span>,\n                                 int <span class=\"supfact\">src_linesize</span>,\n                                 int <span class=\"supfact\">w</span>, int <span class=\"supfact\">h</span>) {\n  const uint8_t *<span class=\"supfact\">srcp</span>;\n  float *<span class=\"supfact\">dstp_b</span>;\n  float *<span class=\"supfact\">dstp_g</span>;\n  float *<span class=\"supfact\">dstp_r</span>;\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">x</span>;\n  <span class=\"supfact\">dstp_r</span> = *<span class=\"supfact\">dst</span>;\n  <span class=\"supfact\">dstp_g</span> = <span class=\"supfact\">dst</span>[Number];\n  <span class=\"supfact\">dstp_b</span> = <span class=\"supfact\">dst</span>[Number];\n  for (<span class=\"supfact\">y</span> = Number; <span class=\"supfact\">y</span> < <span class=\"supfact\">h</span>;\n       ++<span class=\"supfact\">y</span>) {\n    <span class=\"supfact\">srcp</span> = <span class=\"supfact\">src</span>;\n    for (<span class=\"supfact\">x</span> = Number; <span class=\"supfact\">x</span> < <span class=\"supfact\">w</span>;\n         ++<span class=\"supfact\">x</span>) {\n      <span class=\"supfact\">dstp_r</span>[<span class=\"supfact\">x</span>] =\n          (float)((*<span class=\"supfact\">dct3ch</span>)[Number] *\n                  (float)<span class=\"supfact\">srcp</span>[Number]) +\n          (float)((float)((float)*<span class=\"supfact\">srcp</span> *\n                          (*<span class=\"supfact\">dct3ch</span>)[Number]) +\n                  (float)((*<span class=\"supfact\">dct3ch</span>)[Number] *\n                          (float)<span class=\"supfact\">srcp</span>[Number]));\n      <span class=\"supfact\">dstp_g</span>[<span class=\"supfact\">x</span>] =\n          (float)((*<span class=\"supfact\">dct3ch</span>)[Number] *\n                  (float)<span class=\"supfact\">srcp</span>[Number]) +\n          (float)((float)((float)*<span class=\"supfact\">srcp</span> *\n                          (*<span class=\"supfact\">dct3ch</span>)[Number]) +\n                  (float)((*<span class=\"supfact\">dct3ch</span>)[Number] *\n                          (float)<span class=\"supfact\">srcp</span>[Number]));\n      <span class=\"supfact\">dstp_b</span>[<span class=\"supfact\">x</span>] =\n          (float)((*<span class=\"supfact\">dct3ch</span>)[Number] *\n                  (float)<span class=\"supfact\">srcp</span>[Number]) +\n          (float)((float)((float)*<span class=\"supfact\">srcp</span> *\n                          (*<span class=\"supfact\">dct3ch</span>)[Number]) +\n                  (float)((*<span class=\"supfact\">dct3ch</span>)[Number] *\n                          (float)<span class=\"supfact\">srcp</span>[Number]));\n      <span class=\"supfact\">srcp</span> += Number;\n    }\n    <span class=\"supfact\">src</span> += <span class=\"supfact\">src_linesize</span>;\n    <span class=\"supfact\">dstp_r</span> += <span class=\"supfact\">dst_linesize</span>;\n    <span class=\"supfact\">dstp_g</span> += <span class=\"supfact\">dst_linesize</span>;\n    <span class=\"supfact\">dstp_b</span> += <span class=\"supfact\">dst_linesize</span>;\n  }\n}", "var": [{"name": "a1", "type": "float * *", "pred_name": "dst", "ref_name": "dct3ch", "ref_type": "float (*)[3]"}, {"name": "a2", "type": "const uint8_t *", "pred_name": "src", "ref_name": "dst", "ref_type": "float * *"}, {"name": "a3", "type": "int", "pred_name": "linesize", "ref_name": "dst_linesize", "ref_type": "int"}, {"name": "a4", "type": "const uint8_t *", "pred_name": "s3", "ref_name": "src", "ref_type": "const uint8_t *"}, {"name": "a5", "type": "int", "pred_name": "s2", "ref_name": "src_linesize", "ref_type": "int"}, {"name": "a6", "type": "int", "pred_name": "s1", "ref_name": "w", "ref_type": "int"}, {"name": "a7", "type": "int", "pred_name": "s3", "ref_name": "h", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v9", "type": "float *", "pred_name": "v8", "ref_name": "srcp", "ref_type": "const uint8_t *"}, {"name": "v10", "type": "float *", "pred_name": "v9", "ref_name": "dstp_b", "ref_type": "float *"}, {"name": "v11", "type": "float *", "pred_name": "v10", "ref_name": "dstp_g", "ref_type": "float *"}, {"name": "v12", "type": "float *", "pred_name": "v11", "ref_name": "dstp_r", "ref_type": "float *"}, {"name": "i", "type": "int", "pred_name": "w", "ref_name": "y", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "i", "ref_name": "x", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "emfoa23", "repo_name": "LinuxKernel", "path": "emfoa23/LinuxKernel/9f449c06418031693a2e762089bf526afec773b64acf6c58520b2d685cc26f99", "path_in_repo": "emfoa23/LinuxKernel/tools/testing/radix-tree/xarray", "objdump": "000000000042515c <check_create_range>:\n  42515c:\t55                   \tpush   %rbp\n  42515d:\t48 89 e5             \tmov    %rsp,%rbp\n  425160:\t53                   \tpush   %rbx\n  425161:\t48 83 ec 28          \tsub    $0x28,%rsp\n  425165:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  425169:\tc7 45 ec 0c 00 00 00 \tmovl   $0xc,-0x14(%rbp)\n  425170:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  425177:\te9 15 03 00 00       \tjmpq   425491 <check_create_range+0x335>\n  42517c:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  42517f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  425183:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  425188:\t48 89 c7             \tmov    %rax,%rdi\n  42518b:\te8 3a f3 ff ff       \tcallq  4244ca <check_create_range_1>\n  425190:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  425193:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  425196:\t76 14                \tjbe    4251ac <check_create_range+0x50>\n  425198:\t89 d8                \tmov    %ebx,%eax\n  42519a:\t48 89 c2             \tmov    %rax,%rdx\n  42519d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4251a2:\tbf 80 22 46 00       \tmov    $0x462280,%edi\n  4251a7:\te8 94 cf fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  4251ac:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4251b1:\t89 d9                \tmov    %ebx,%ecx\n  4251b3:\td3 e0                \tshl    %cl,%eax\n  4251b5:\t89 c1                \tmov    %eax,%ecx\n  4251b7:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  4251ba:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4251be:\t48 89 ce             \tmov    %rcx,%rsi\n  4251c1:\t48 89 c7             \tmov    %rax,%rdi\n  4251c4:\te8 01 f3 ff ff       \tcallq  4244ca <check_create_range_1>\n  4251c9:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  4251cc:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  4251cf:\t76 14                \tjbe    4251e5 <check_create_range+0x89>\n  4251d1:\t89 d8                \tmov    %ebx,%eax\n  4251d3:\t48 89 c2             \tmov    %rax,%rdx\n  4251d6:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  4251db:\tbf c0 22 46 00       \tmov    $0x4622c0,%edi\n  4251e0:\te8 5b cf fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  4251e5:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4251ea:\t89 d9                \tmov    %ebx,%ecx\n  4251ec:\td3 e0                \tshl    %cl,%eax\n  4251ee:\t89 c1                \tmov    %eax,%ecx\n  4251f0:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  4251f3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4251f7:\t48 89 ce             \tmov    %rcx,%rsi\n  4251fa:\t48 89 c7             \tmov    %rax,%rdi\n  4251fd:\te8 c8 f2 ff ff       \tcallq  4244ca <check_create_range_1>\n  425202:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  425205:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  425208:\t76 14                \tjbe    42521e <check_create_range+0xc2>\n  42520a:\t89 d8                \tmov    %ebx,%eax\n  42520c:\t48 89 c2             \tmov    %rax,%rdx\n  42520f:\tbe 03 00 00 00       \tmov    $0x3,%esi\n  425214:\tbf 00 23 46 00       \tmov    $0x462300,%edi\n  425219:\te8 22 cf fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  42521e:\tb8 03 00 00 00       \tmov    $0x3,%eax\n  425223:\t89 d9                \tmov    %ebx,%ecx\n  425225:\td3 e0                \tshl    %cl,%eax\n  425227:\t89 c1                \tmov    %eax,%ecx\n  425229:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  42522c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  425230:\t48 89 ce             \tmov    %rcx,%rsi\n  425233:\t48 89 c7             \tmov    %rax,%rdi\n  425236:\te8 8f f2 ff ff       \tcallq  4244ca <check_create_range_1>\n  42523b:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  42523e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  425242:\tbe 00 00 00 01       \tmov    $0x1000000,%esi\n  425247:\t48 89 c7             \tmov    %rax,%rdi\n  42524a:\te8 7b f2 ff ff       \tcallq  4244ca <check_create_range_1>\n  42524f:\t83 7d e8 09          \tcmpl   $0x9,-0x18(%rbp)\n  425253:\t77 11                \tja     425266 <check_create_range+0x10a>\n  425255:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  425258:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42525c:\t89 d6                \tmov    %edx,%esi\n  42525e:\t48 89 c7             \tmov    %rax,%rdi\n  425261:\te8 62 f3 ff ff       \tcallq  4245c8 <check_create_range_2>\n  425266:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  425269:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42526d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  425272:\t48 89 c7             \tmov    %rax,%rdi\n  425275:\te8 97 f6 ff ff       \tcallq  424911 <check_create_range_4>\n  42527a:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  42527d:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  425280:\t76 14                \tjbe    425296 <check_create_range+0x13a>\n  425282:\t89 d8                \tmov    %ebx,%eax\n  425284:\t48 89 c2             \tmov    %rax,%rdx\n  425287:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  42528c:\tbf 40 23 46 00       \tmov    $0x462340,%edi\n  425291:\te8 aa ce fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  425296:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  42529b:\t89 d9                \tmov    %ebx,%ecx\n  42529d:\td3 e0                \tshl    %cl,%eax\n  42529f:\t89 c1                \tmov    %eax,%ecx\n  4252a1:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  4252a4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4252a8:\t48 89 ce             \tmov    %rcx,%rsi\n  4252ab:\t48 89 c7             \tmov    %rax,%rdi\n  4252ae:\te8 5e f6 ff ff       \tcallq  424911 <check_create_range_4>\n  4252b3:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  4252b6:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  4252b9:\t76 14                \tjbe    4252cf <check_create_range+0x173>\n  4252bb:\t89 d8                \tmov    %ebx,%eax\n  4252bd:\t48 89 c2             \tmov    %rax,%rdx\n  4252c0:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  4252c5:\tbf 80 23 46 00       \tmov    $0x462380,%edi\n  4252ca:\te8 71 ce fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  4252cf:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4252d4:\t89 d9                \tmov    %ebx,%ecx\n  4252d6:\td3 e0                \tshl    %cl,%eax\n  4252d8:\t89 c1                \tmov    %eax,%ecx\n  4252da:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  4252dd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4252e1:\t48 89 ce             \tmov    %rcx,%rsi\n  4252e4:\t48 89 c7             \tmov    %rax,%rdi\n  4252e7:\te8 25 f6 ff ff       \tcallq  424911 <check_create_range_4>\n  4252ec:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  4252ef:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  4252f2:\t76 14                \tjbe    425308 <check_create_range+0x1ac>\n  4252f4:\t89 d8                \tmov    %ebx,%eax\n  4252f6:\t48 89 c2             \tmov    %rax,%rdx\n  4252f9:\tbe 03 00 00 00       \tmov    $0x3,%esi\n  4252fe:\tbf c0 23 46 00       \tmov    $0x4623c0,%edi\n  425303:\te8 38 ce fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  425308:\tb8 03 00 00 00       \tmov    $0x3,%eax\n  42530d:\t89 d9                \tmov    %ebx,%ecx\n  42530f:\td3 e0                \tshl    %cl,%eax\n  425311:\t89 c1                \tmov    %eax,%ecx\n  425313:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  425316:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42531a:\t48 89 ce             \tmov    %rcx,%rsi\n  42531d:\t48 89 c7             \tmov    %rax,%rdi\n  425320:\te8 ec f5 ff ff       \tcallq  424911 <check_create_range_4>\n  425325:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  425328:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42532c:\tbe 00 00 00 01       \tmov    $0x1000000,%esi\n  425331:\t48 89 c7             \tmov    %rax,%rdi\n  425334:\te8 d8 f5 ff ff       \tcallq  424911 <check_create_range_4>\n  425339:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  42533c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  425340:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  425345:\t48 89 c7             \tmov    %rax,%rdi\n  425348:\te8 c4 f5 ff ff       \tcallq  424911 <check_create_range_4>\n  42534d:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  425350:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  425353:\t76 14                \tjbe    425369 <check_create_range+0x20d>\n  425355:\t89 d8                \tmov    %ebx,%eax\n  425357:\t48 89 c2             \tmov    %rax,%rdx\n  42535a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  42535f:\tbf 00 24 46 00       \tmov    $0x462400,%edi\n  425364:\te8 d7 cd fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  425369:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  42536e:\t89 d9                \tmov    %ebx,%ecx\n  425370:\td3 e0                \tshl    %cl,%eax\n  425372:\t83 c0 01             \tadd    $0x1,%eax\n  425375:\t89 c1                \tmov    %eax,%ecx\n  425377:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  42537a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42537e:\t48 89 ce             \tmov    %rcx,%rsi\n  425381:\t48 89 c7             \tmov    %rax,%rdi\n  425384:\te8 88 f5 ff ff       \tcallq  424911 <check_create_range_4>\n  425389:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  42538c:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  42538f:\t76 14                \tjbe    4253a5 <check_create_range+0x249>\n  425391:\t89 d8                \tmov    %ebx,%eax\n  425393:\t48 89 c2             \tmov    %rax,%rdx\n  425396:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  42539b:\tbf 40 24 46 00       \tmov    $0x462440,%edi\n  4253a0:\te8 9b cd fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  4253a5:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4253aa:\t89 d9                \tmov    %ebx,%ecx\n  4253ac:\td3 e0                \tshl    %cl,%eax\n  4253ae:\t83 c0 01             \tadd    $0x1,%eax\n  4253b1:\t89 c1                \tmov    %eax,%ecx\n  4253b3:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  4253b6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4253ba:\t48 89 ce             \tmov    %rcx,%rsi\n  4253bd:\t48 89 c7             \tmov    %rax,%rdi\n  4253c0:\te8 4c f5 ff ff       \tcallq  424911 <check_create_range_4>\n  4253c5:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  4253c8:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  4253cb:\t76 14                \tjbe    4253e1 <check_create_range+0x285>\n  4253cd:\t89 d8                \tmov    %ebx,%eax\n  4253cf:\t48 89 c2             \tmov    %rax,%rdx\n  4253d2:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  4253d7:\tbf 80 24 46 00       \tmov    $0x462480,%edi\n  4253dc:\te8 5f cd fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  4253e1:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4253e6:\t89 d9                \tmov    %ebx,%ecx\n  4253e8:\td3 e0                \tshl    %cl,%eax\n  4253ea:\t83 e8 01             \tsub    $0x1,%eax\n  4253ed:\t89 c1                \tmov    %eax,%ecx\n  4253ef:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  4253f2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4253f6:\t48 89 ce             \tmov    %rcx,%rsi\n  4253f9:\t48 89 c7             \tmov    %rax,%rdi\n  4253fc:\te8 10 f5 ff ff       \tcallq  424911 <check_create_range_4>\n  425401:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  425404:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  425407:\t76 14                \tjbe    42541d <check_create_range+0x2c1>\n  425409:\t89 d8                \tmov    %ebx,%eax\n  42540b:\t48 89 c2             \tmov    %rax,%rdx\n  42540e:\tbe 03 00 00 00       \tmov    $0x3,%esi\n  425413:\tbf c0 24 46 00       \tmov    $0x4624c0,%edi\n  425418:\te8 23 cd fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  42541d:\tb8 03 00 00 00       \tmov    $0x3,%eax\n  425422:\t89 d9                \tmov    %ebx,%ecx\n  425424:\td3 e0                \tshl    %cl,%eax\n  425426:\t83 c0 01             \tadd    $0x1,%eax\n  425429:\t89 c1                \tmov    %eax,%ecx\n  42542b:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  42542e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  425432:\t48 89 ce             \tmov    %rcx,%rsi\n  425435:\t48 89 c7             \tmov    %rax,%rdi\n  425438:\te8 d4 f4 ff ff       \tcallq  424911 <check_create_range_4>\n  42543d:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  425440:\t83 fb 1f             \tcmp    $0x1f,%ebx\n  425443:\t76 14                \tjbe    425459 <check_create_range+0x2fd>\n  425445:\t89 d8                \tmov    %ebx,%eax\n  425447:\t48 89 c2             \tmov    %rax,%rdx\n  42544a:\tbe 03 00 00 00       \tmov    $0x3,%esi\n  42544f:\tbf 00 25 46 00       \tmov    $0x462500,%edi\n  425454:\te8 e7 cc fd ff       \tcallq  402140 <__ubsan_handle_shift_out_of_bounds@plt>\n  425459:\tb8 03 00 00 00       \tmov    $0x3,%eax\n  42545e:\t89 d9                \tmov    %ebx,%ecx\n  425460:\td3 e0                \tshl    %cl,%eax\n  425462:\t83 e8 01             \tsub    $0x1,%eax\n  425465:\t89 c1                \tmov    %eax,%ecx\n  425467:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  42546a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42546e:\t48 89 ce             \tmov    %rcx,%rsi\n  425471:\t48 89 c7             \tmov    %rax,%rdi\n  425474:\te8 98 f4 ff ff       \tcallq  424911 <check_create_range_4>\n  425479:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  42547c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  425480:\tbe 01 00 00 01       \tmov    $0x1000001,%esi\n  425485:\t48 89 c7             \tmov    %rax,%rdi\n  425488:\te8 84 f4 ff ff       \tcallq  424911 <check_create_range_4>\n  42548d:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  425491:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  425494:\t3b 45 ec             \tcmp    -0x14(%rbp),%eax\n  425497:\t0f 82 df fc ff ff    \tjb     42517c <check_create_range+0x20>\n  42549d:\te8 42 f2 ff ff       \tcallq  4246e4 <check_create_range_3>\n  4254a2:\t90                   \tnop\n  4254a3:\t48 83 c4 28          \tadd    $0x28,%rsp\n  4254a7:\t5b                   \tpop    %rbx\n  4254a8:\t5d                   \tpop    %rbp\n  4254a9:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall check_create_range(\n    unsigned __int64 <span class=\"supfact\">a1</span>) {\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < Number;\n       ++<span class=\"supfact\">i</span>) {\n    check_create_range_1(<span class=\"supfact\">a1</span>, Number L, <span class=\"supfact\">i</span>);\n    check_create_range_1(<span class=\"supfact\">a1</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">i</span>),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_1(<span class=\"supfact\">a1</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">i</span>),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_1(<span class=\"supfact\">a1</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">i</span>),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_1(<span class=\"supfact\">a1</span>, Number, <span class=\"supfact\">i</span>);\n    if (<span class=\"supfact\">i</span> <= Number)\n      check_create_range_2(<span class=\"supfact\">a1</span>, <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>, Number L, <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">i</span>),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">i</span>),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">i</span>),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>, Number, <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>, Number, <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>,\n                         (unsigned int)((Number << <span class=\"supfact\">i</span>) + Number),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>,\n                         (unsigned int)((Number << <span class=\"supfact\">i</span>) + Number),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>,\n                         (unsigned int)((Number << <span class=\"supfact\">i</span>) - Number),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>,\n                         (unsigned int)((Number << <span class=\"supfact\">i</span>) + Number),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>,\n                         (unsigned int)((Number << <span class=\"supfact\">i</span>) - Number),\n                         <span class=\"supfact\">i</span>);\n    check_create_range_4(<span class=\"supfact\">a1</span>, Number, <span class=\"supfact\">i</span>);\n  }\n  return check_create_range_3();\n}", "code_t": "void __cdecl check_create_range(xarray *<span class=\"supfact\">xa</span>) {\n  unsigned int <span class=\"supfact\">order</span>;\n  for (<span class=\"supfact\">order</span> = Number; <span class=\"supfact\">order</span> < Number;\n       ++<span class=\"supfact\">order</span>) {\n    check_create_range_1(<span class=\"supfact\">xa</span>, Number L, <span class=\"supfact\">order</span>);\n    check_create_range_1(<span class=\"supfact\">xa</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">order</span>),\n                         <span class=\"supfact\">order</span>);\n    check_create_range_1(<span class=\"supfact\">xa</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">order</span>),\n                         <span class=\"supfact\">order</span>);\n    check_create_range_1(<span class=\"supfact\">xa</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">order</span>),\n                         <span class=\"supfact\">order</span>);\n    check_create_range_1(<span class=\"supfact\">xa</span>, Number, <span class=\"supfact\">order</span>);\n    if (<span class=\"supfact\">order</span> <= Number)\n      check_create_range_2(<span class=\"supfact\">xa</span>, <span class=\"supfact\">order</span>);\n    check_create_range_4(<span class=\"supfact\">xa</span>, Number L, <span class=\"supfact\">order</span>);\n    check_create_range_4(<span class=\"supfact\">xa</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">order</span>),\n                         <span class=\"supfact\">order</span>);\n    check_create_range_4(<span class=\"supfact\">xa</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">order</span>),\n                         <span class=\"supfact\">order</span>);\n    check_create_range_4(<span class=\"supfact\">xa</span>,\n                         (unsigned int)(Number << <span class=\"supfact\">order</span>),\n                         <span class=\"supfact\">order</span>);\n    check_create_range_4(<span class=\"supfact\">xa</span>, Number, <span class=\"supfact\">order</span>);\n    check_create_range_4(<span class=\"supfact\">xa</span>, Number, <span class=\"supfact\">order</span>);\n    check_create_range_4(\n        <span class=\"supfact\">xa</span>,\n        (unsigned int)((Number << <span class=\"supfact\">order</span>) + Number),\n        <span class=\"supfact\">order</span>);\n    check_create_range_4(\n        <span class=\"supfact\">xa</span>,\n        (unsigned int)((Number << <span class=\"supfact\">order</span>) + Number),\n        <span class=\"supfact\">order</span>);\n    check_create_range_4(\n        <span class=\"supfact\">xa</span>,\n        (unsigned int)((Number << <span class=\"supfact\">order</span>) - Number),\n        <span class=\"supfact\">order</span>);\n    check_create_range_4(\n        <span class=\"supfact\">xa</span>,\n        (unsigned int)((Number << <span class=\"supfact\">order</span>) + Number),\n        <span class=\"supfact\">order</span>);\n    check_create_range_4(\n        <span class=\"supfact\">xa</span>,\n        (unsigned int)((Number << <span class=\"supfact\">order</span>) - Number),\n        <span class=\"supfact\">order</span>);\n    check_create_range_4(<span class=\"supfact\">xa</span>, Number, <span class=\"supfact\">order</span>);\n  }\n  check_create_range_3();\n}", "var": [{"name": "a1", "type": "xarray *", "pred_name": "xa", "ref_name": "xa", "ref_type": "xarray *"}, {"name": "i", "type": "unsigned int", "pred_name": "order", "ref_name": "order", "ref_type": "unsigned int"}], "body_in_train": true}, {"repo_owner": "hai046", "repo_name": "MediaPlayer", "path": "hai046/MediaPlayer/13b7a18fa5f9722e5ccdd4f88df20e7e1bfddcf8e1d594b770e2a668b8a00ab7", "path_in_repo": "hai046/MediaPlayer/app/src/main/jni/ffmpeg/libswresample/resample_dsp.o", "objdump": "0000000000000535 <resample_common_int32>:\n     535:\t48 89 7c 24 b8       \tmov    %rdi,-0x48(%rsp)\n     53a:\t48 89 74 24 b0       \tmov    %rsi,-0x50(%rsp)\n     53f:\t48 89 54 24 a8       \tmov    %rdx,-0x58(%rsp)\n     544:\t89 4c 24 a4          \tmov    %ecx,-0x5c(%rsp)\n     548:\t44 89 44 24 a0       \tmov    %r8d,-0x60(%rsp)\n     54d:\t48 8b 44 24 b0       \tmov    -0x50(%rsp),%rax\n     552:\t48 89 44 24 d8       \tmov    %rax,-0x28(%rsp)\n     557:\t48 8b 44 24 a8       \tmov    -0x58(%rsp),%rax\n     55c:\t48 89 44 24 d0       \tmov    %rax,-0x30(%rsp)\n     561:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     566:\t8b 40 28             \tmov    0x28(%rax),%eax\n     569:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n     56d:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     572:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n     575:\t89 44 24 f4          \tmov    %eax,-0xc(%rsp)\n     579:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     57e:\t8b 40 38             \tmov    0x38(%rax),%eax\n     581:\t8b 54 24 f8          \tmov    -0x8(%rsp),%edx\n     585:\t89 c1                \tmov    %eax,%ecx\n     587:\td3 fa                \tsar    %cl,%edx\n     589:\t89 d0                \tmov    %edx,%eax\n     58b:\t89 44 24 f0          \tmov    %eax,-0x10(%rsp)\n     58f:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     594:\t8b 40 3c             \tmov    0x3c(%rax),%eax\n     597:\t21 44 24 f8          \tand    %eax,-0x8(%rsp)\n     59b:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n     5a2:\t00 \n     5a3:\te9 59 01 00 00       \tjmpq   701 <resample_common_int32+0x1cc>\n     5a8:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     5ad:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     5b1:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     5b6:\t8b 40 14             \tmov    0x14(%rax),%eax\n     5b9:\t0f af 44 24 f8       \timul   -0x8(%rsp),%eax\n     5be:\t48 98                \tcltq   \n     5c0:\t48 c1 e0 02          \tshl    $0x2,%rax\n     5c4:\t48 01 d0             \tadd    %rdx,%rax\n     5c7:\t48 89 44 24 c8       \tmov    %rax,-0x38(%rsp)\n     5cc:\t48 c7 44 24 e8 00 00 \tmovq   $0x0,-0x18(%rsp)\n     5d3:\t00 00 \n     5d5:\tc7 44 24 e4 00 00 00 \tmovl   $0x0,-0x1c(%rsp)\n     5dc:\t00 \n     5dd:\teb 49                \tjmp    628 <resample_common_int32+0xf3>\n     5df:\t8b 54 24 f0          \tmov    -0x10(%rsp),%edx\n     5e3:\t8b 44 24 e4          \tmov    -0x1c(%rsp),%eax\n     5e7:\t01 d0                \tadd    %edx,%eax\n     5e9:\t48 98                \tcltq   \n     5eb:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n     5f2:\t00 \n     5f3:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n     5f8:\t48 01 d0             \tadd    %rdx,%rax\n     5fb:\t8b 00                \tmov    (%rax),%eax\n     5fd:\t48 63 d0             \tmovslq %eax,%rdx\n     600:\t8b 44 24 e4          \tmov    -0x1c(%rsp),%eax\n     604:\t48 98                \tcltq   \n     606:\t48 8d 0c 85 00 00 00 \tlea    0x0(,%rax,4),%rcx\n     60d:\t00 \n     60e:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     613:\t48 01 c8             \tadd    %rcx,%rax\n     616:\t8b 00                \tmov    (%rax),%eax\n     618:\t48 98                \tcltq   \n     61a:\t48 0f af c2          \timul   %rdx,%rax\n     61e:\t48 01 44 24 e8       \tadd    %rax,-0x18(%rsp)\n     623:\t83 44 24 e4 01       \taddl   $0x1,-0x1c(%rsp)\n     628:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     62d:\t8b 40 10             \tmov    0x10(%rax),%eax\n     630:\t39 44 24 e4          \tcmp    %eax,-0x1c(%rsp)\n     634:\t7c a9                \tjl     5df <resample_common_int32+0xaa>\n     636:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     63b:\t48 05 00 00 00 20    \tadd    $0x20000000,%rax\n     641:\t48 c1 f8 1e          \tsar    $0x1e,%rax\n     645:\t48 89 44 24 e8       \tmov    %rax,-0x18(%rsp)\n     64a:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     64e:\t48 98                \tcltq   \n     650:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n     657:\t00 \n     658:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     65d:\t48 01 c2             \tadd    %rax,%rdx\n     660:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     665:\t48 89 44 24 c0       \tmov    %rax,-0x40(%rsp)\n     66a:\tb9 00 00 00 80       \tmov    $0x80000000,%ecx\n     66f:\t48 8b 44 24 c0       \tmov    -0x40(%rsp),%rax\n     674:\t48 01 c8             \tadd    %rcx,%rax\n     677:\t48 89 c1             \tmov    %rax,%rcx\n     67a:\t48 b8 00 00 00 00 ff \tmovabs $0xffffffff00000000,%rax\n     681:\tff ff ff \n     684:\t48 21 c8             \tand    %rcx,%rax\n     687:\t48 85 c0             \ttest   %rax,%rax\n     68a:\t74 10                \tje     69c <resample_common_int32+0x167>\n     68c:\t48 8b 44 24 c0       \tmov    -0x40(%rsp),%rax\n     691:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n     695:\t35 ff ff ff 7f       \txor    $0x7fffffff,%eax\n     69a:\teb 05                \tjmp    6a1 <resample_common_int32+0x16c>\n     69c:\t48 8b 44 24 c0       \tmov    -0x40(%rsp),%rax\n     6a1:\t89 02                \tmov    %eax,(%rdx)\n     6a3:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     6a8:\t8b 40 24             \tmov    0x24(%rax),%eax\n     6ab:\t01 44 24 f4          \tadd    %eax,-0xc(%rsp)\n     6af:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     6b4:\t8b 40 20             \tmov    0x20(%rax),%eax\n     6b7:\t01 44 24 f8          \tadd    %eax,-0x8(%rsp)\n     6bb:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     6c0:\t8b 40 30             \tmov    0x30(%rax),%eax\n     6c3:\t39 44 24 f4          \tcmp    %eax,-0xc(%rsp)\n     6c7:\t7c 11                \tjl     6da <resample_common_int32+0x1a5>\n     6c9:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     6ce:\t8b 40 30             \tmov    0x30(%rax),%eax\n     6d1:\t29 44 24 f4          \tsub    %eax,-0xc(%rsp)\n     6d5:\t83 44 24 f8 01       \taddl   $0x1,-0x8(%rsp)\n     6da:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     6df:\t8b 40 38             \tmov    0x38(%rax),%eax\n     6e2:\t8b 54 24 f8          \tmov    -0x8(%rsp),%edx\n     6e6:\t89 c1                \tmov    %eax,%ecx\n     6e8:\td3 fa                \tsar    %cl,%edx\n     6ea:\t89 d0                \tmov    %edx,%eax\n     6ec:\t01 44 24 f0          \tadd    %eax,-0x10(%rsp)\n     6f0:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     6f5:\t8b 40 3c             \tmov    0x3c(%rax),%eax\n     6f8:\t21 44 24 f8          \tand    %eax,-0x8(%rsp)\n     6fc:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n     701:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     705:\t3b 44 24 a4          \tcmp    -0x5c(%rsp),%eax\n     709:\t0f 8c 99 fe ff ff    \tjl     5a8 <resample_common_int32+0x73>\n     70f:\t83 7c 24 a0 00       \tcmpl   $0x0,-0x60(%rsp)\n     714:\t74 18                \tje     72e <resample_common_int32+0x1f9>\n     716:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     71b:\t8b 54 24 f4          \tmov    -0xc(%rsp),%edx\n     71f:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n     722:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     727:\t8b 54 24 f8          \tmov    -0x8(%rsp),%edx\n     72b:\t89 50 28             \tmov    %edx,0x28(%rax)\n     72e:\t8b 44 24 f0          \tmov    -0x10(%rsp),%eax\n     732:\tc3                   \tretq   ", "code_s": "__int64 __fastcall resample_common_int32(__int64 <span class=\"supfact\">a1</span>,\n                                         __int64 <span class=\"supfact\">a2</span>,\n                                         __int64 <span class=\"supfact\">a3</span>,\n                                         int <span class=\"supfact\">a4</span>,\n                                         int <span class=\"supfact\">a5</span>) {\n  __int64 <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">j</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  int v11;\n  int v12;\n  int v13;\n  int <span class=\"supfact\">i</span>;\n  v11 = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v10</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v9</span> = v11 >> *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  v12 = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & v11;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">a4</span>;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v8</span> = Number L;\n    for (<span class=\"supfact\">j</span> = Number;\n         <span class=\"supfact\">j</span> < *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n         ++<span class=\"supfact\">j</span>)\n      <span class=\"supfact\">v8</span> +=\n          *(int *)(Number L * (int)(<span class=\"supfact\">v9</span> + <span class=\"supfact\">j</span>) +\n                   <span class=\"supfact\">a3</span>) *\n          (__int64)*(int *)(Number L * <span class=\"supfact\">j</span> +\n                            *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                            Number L * v12 *\n                                *(_DWORD *)(<span class=\"supfact\">a1</span> + Number));\n    if (((((<span class=\"supfact\">v8</span> + Number) >> Number) + Number) & Number) !=\n        Number)\n      LODWORD(<span class=\"supfact\">v5</span>) =\n          ((<span class=\"supfact\">v8</span> + Number) >> Number) ^ Number;\n    else\n      <span class=\"supfact\">v5</span> = (<span class=\"supfact\">v8</span> + Number) >> Number;\n    *(_DWORD *)(<span class=\"supfact\">a2</span> + Number L * <span class=\"supfact\">i</span>) =\n        <span class=\"supfact\">v5</span>;\n    <span class=\"supfact\">v10</span> += *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n    v13 = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) + v12;\n    if (<span class=\"supfact\">v10</span> >= *(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n      <span class=\"supfact\">v10</span> -= *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n      ++v13;\n    }\n    <span class=\"supfact\">v9</span> += v13 >> *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n    v12 = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & v13;\n  }\n  if (<span class=\"supfact\">a5</span>) {\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v10</span>;\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = v12;\n  }\n  return <span class=\"supfact\">v9</span>;\n}", "code_t": "int __cdecl resample_common_int32(ResampleContext_0 *<span class=\"supfact\">c</span>,\n                                  void *<span class=\"supfact\">dest</span>,\n                                  const void *<span class=\"supfact\">source</span>,\n                                  int <span class=\"supfact\">n</span>,\n                                  int <span class=\"supfact\">update_ctx</span>) {\n  __int64 <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">i</span>;\n  int64_t <span class=\"supfact\">val</span>;\n  int <span class=\"supfact\">sample_index</span>;\n  int <span class=\"supfact\">frac</span>;\n  int indexb;\n  int index;\n  int indexa;\n  int <span class=\"supfact\">dst_index</span>;\n  indexb = <span class=\"supfact\">c</span>->index;\n  <span class=\"supfact\">frac</span> = <span class=\"supfact\">c</span>-><span class=\"supfact\">frac</span>;\n  <span class=\"supfact\">sample_index</span> = indexb >> <span class=\"supfact\">c</span>->phase_shift;\n  index = <span class=\"supfact\">c</span>->phase_mask & indexb;\n  for (<span class=\"supfact\">dst_index</span> = Number;\n       <span class=\"supfact\">dst_index</span> < <span class=\"supfact\">n</span>;\n       ++<span class=\"supfact\">dst_index</span>) {\n    <span class=\"supfact\">val</span> = Number L;\n    for (<span class=\"supfact\">i</span> = Number;\n         <span class=\"supfact\">i</span> < <span class=\"supfact\">c</span>->filter_length;\n         ++<span class=\"supfact\">i</span>)\n      <span class=\"supfact\">val</span> +=\n          *((int *)<span class=\"supfact\">source</span> + <span class=\"supfact\">sample_index</span> +\n            <span class=\"supfact\">i</span>) *\n          (__int64)*(int *)&<span class=\"supfact\">c</span>\n              ->filter_bank[Number * index * <span class=\"supfact\">c</span>->filter_alloc +\n                            Number * <span class=\"supfact\">i</span>];\n    if (((((<span class=\"supfact\">val</span> + Number) >> Number) + Number) & Number) !=\n        Number)\n      LODWORD(<span class=\"supfact\">v5</span>) =\n          ((<span class=\"supfact\">val</span> + Number) >> Number) ^ Number;\n    else\n      <span class=\"supfact\">v5</span> = (<span class=\"supfact\">val</span> + Number) >> Number;\n    *((_DWORD *)<span class=\"supfact\">dest</span> + <span class=\"supfact\">dst_index</span>) =\n        <span class=\"supfact\">v5</span>;\n    <span class=\"supfact\">frac</span> += <span class=\"supfact\">c</span>->dst_incr_mod;\n    indexa = <span class=\"supfact\">c</span>->dst_incr_div + index;\n    if (<span class=\"supfact\">frac</span> >= <span class=\"supfact\">c</span>->src_incr) {\n      <span class=\"supfact\">frac</span> -= <span class=\"supfact\">c</span>->src_incr;\n      ++indexa;\n    }\n    <span class=\"supfact\">sample_index</span> += indexa >> <span class=\"supfact\">c</span>->phase_shift;\n    index = <span class=\"supfact\">c</span>->phase_mask & indexa;\n  }\n  if (<span class=\"supfact\">update_ctx</span>) {\n    <span class=\"supfact\">c</span>-><span class=\"supfact\">frac</span> = <span class=\"supfact\">frac</span>;\n    <span class=\"supfact\">c</span>->index = index;\n  }\n  return <span class=\"supfact\">sample_index</span>;\n}", "var": [{"name": "a1", "type": "ResampleContext_0 *", "pred_name": "c", "ref_name": "c", "ref_type": "ResampleContext_0 *"}, {"name": "a2", "type": "void *", "pred_name": "dest", "ref_name": "dest", "ref_type": "void *"}, {"name": "a3", "type": "const void *", "pred_name": "source", "ref_name": "source", "ref_type": "const void *"}, {"name": "a4", "type": "int", "pred_name": "n", "ref_name": "n", "ref_type": "int"}, {"name": "a5", "type": "int", "pred_name": "update_ctx", "ref_name": "update_ctx", "ref_type": "int"}, {"name": "v5", "type": "__int64", "pred_name": "v5", "ref_name": "v5", "ref_type": "__int64"}, {"name": "j", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "v8", "type": "int64_t", "pred_name": "val", "ref_name": "val", "ref_type": "int64_t"}, {"name": "v9", "type": "int", "pred_name": "sample_index", "ref_name": "sample_index", "ref_type": "int"}, {"name": "v10", "type": "int", "pred_name": "frac", "ref_name": "frac", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "dst_index", "ref_name": "dst_index", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "szehl", "repo_name": "contiki-zigbit-rpl-border-router", "path": "szehl/contiki-zigbit-rpl-border-router/31c1c74f82f7a14ed71861007583e4aff3b4aa982c6606c4c5ca8500db07fd58", "path_in_repo": "szehl/contiki-zigbit-rpl-border-router/examples/cc2530dk/obj_native/uip-neighbor.o", "objdump": "0000000000000037 <uip_neighbor_periodic>:\n  37:\t55                   \tpush   %rbp\n  38:\t48 89 e5             \tmov    %rsp,%rbp\n  3b:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  42:\teb 5e                \tjmp    a2 <uip_neighbor_periodic+0x6b>\n  44:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  47:\t48 63 d0             \tmovslq %eax,%rdx\n  4a:\t48 89 d0             \tmov    %rdx,%rax\n  4d:\t48 01 c0             \tadd    %rax,%rax\n  50:\t48 01 d0             \tadd    %rdx,%rax\n  53:\t48 c1 e0 02          \tshl    $0x2,%rax\n  57:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n  5d:\t0f b6 00             \tmovzbl (%rax),%eax\n  60:\t84 c0                \ttest   %al,%al\n  62:\t78 3a                \tjs     9e <uip_neighbor_periodic+0x67>\n  64:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  67:\t48 63 d0             \tmovslq %eax,%rdx\n  6a:\t48 89 d0             \tmov    %rdx,%rax\n  6d:\t48 01 c0             \tadd    %rax,%rax\n  70:\t48 01 d0             \tadd    %rdx,%rax\n  73:\t48 c1 e0 02          \tshl    $0x2,%rax\n  77:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n  7d:\t0f b6 00             \tmovzbl (%rax),%eax\n  80:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  83:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  86:\t48 63 d0             \tmovslq %eax,%rdx\n  89:\t48 89 d0             \tmov    %rdx,%rax\n  8c:\t48 01 c0             \tadd    %rax,%rax\n  8f:\t48 01 d0             \tadd    %rdx,%rax\n  92:\t48 c1 e0 02          \tshl    $0x2,%rax\n  96:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n  9c:\t88 08                \tmov    %cl,(%rax)\n  9e:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  a2:\t83 7d fc 07          \tcmpl   $0x7,-0x4(%rbp)\n  a6:\t7e 9c                \tjle    44 <uip_neighbor_periodic+0xd>\n  a8:\t90                   \tnop\n  a9:\t90                   \tnop\n  aa:\t5d                   \tpop    %rbp\n  ab:\tc3                   \tretq   ", "code_s": "unsigned __int8 *uip_neighbor_periodic() {\n  unsigned __int8 *<span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">result</span> =\n        (unsigned __int8 *)byte_32A[Number * <span class=\"supfact\">i</span>];\n    if ((char)<span class=\"supfact\">result</span> >= Number) {\n      <span class=\"supfact\">result</span> = &byte_32A[Number * <span class=\"supfact\">i</span>];\n      ++*<span class=\"supfact\">result</span>;\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl uip_neighbor_periodic() {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if ((entries[<span class=\"supfact\">i</span>].time & Number) == Number)\n      ++entries[<span class=\"supfact\">i</span>].time;\n  }\n}", "var": [{"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "gshanr", "repo_name": "smartmeship", "path": "gshanr/smartmeship/e44cfaded2a54cff1e18880bcef6496a0d3ec84682f3e5f2eb889c12aaa02752", "path_in_repo": "gshanr/smartmeship/looci-contiki-os/contiki-2.6/examples/ping-ipv6/obj_native/rpl-dag.o", "objdump": "0000000000000d6f <rpl_find_parent_any_dag>:\n     d6f:\t55                   \tpush   %rbp\n     d70:\t48 89 e5             \tmov    %rsp,%rbp\n     d73:\t48 83 ec 30          \tsub    $0x30,%rsp\n     d77:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     d7b:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     d7f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d83:\t48 83 c0 18          \tadd    $0x18,%rax\n     d87:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     d8b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d8f:\t48 05 b0 00 00 00    \tadd    $0xb0,%rax\n     d95:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     d99:\teb 5f                \tjmp    dfa <rpl_find_parent_any_dag+0x8b>\n     d9b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d9f:\t0f b6 40 15          \tmovzbl 0x15(%rax),%eax\n     da3:\t84 c0                \ttest   %al,%al\n     da5:\t74 4e                \tje     df5 <rpl_find_parent_any_dag+0x86>\n     da7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     dab:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     daf:\t48 89 c7             \tmov    %rax,%rdi\n     db2:\te8 00 00 00 00       \tcallq  db7 <rpl_find_parent_any_dag+0x48>\n     db7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     dbb:\teb 31                \tjmp    dee <rpl_find_parent_any_dag+0x7f>\n     dbd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     dc1:\t48 8d 48 18          \tlea    0x18(%rax),%rcx\n     dc5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     dc9:\tba 10 00 00 00       \tmov    $0x10,%edx\n     dce:\t48 89 c6             \tmov    %rax,%rsi\n     dd1:\t48 89 cf             \tmov    %rcx,%rdi\n     dd4:\te8 00 00 00 00       \tcallq  dd9 <rpl_find_parent_any_dag+0x6a>\n     dd9:\t85 c0                \ttest   %eax,%eax\n     ddb:\t75 06                \tjne    de3 <rpl_find_parent_any_dag+0x74>\n     ddd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     de1:\teb 26                \tjmp    e09 <rpl_find_parent_any_dag+0x9a>\n     de3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     de7:\t48 8b 00             \tmov    (%rax),%rax\n     dea:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     dee:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     df3:\t75 c8                \tjne    dbd <rpl_find_parent_any_dag+0x4e>\n     df5:\t48 83 45 f0 58       \taddq   $0x58,-0x10(%rbp)\n     dfa:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     dfe:\t48 3b 45 e8          \tcmp    -0x18(%rbp),%rax\n     e02:\t72 97                \tjb     d9b <rpl_find_parent_any_dag+0x2c>\n     e04:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e09:\tc9                   \tleaveq \n     e0a:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall rpl_find_parent_any_dag(__int64 <span class=\"supfact\">a1</span>,\n                                           const void *<span class=\"supfact\">a2</span>) {\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  _QWORD *<span class=\"supfact\">j</span>;\n  for (<span class=\"supfact\">i</span> = <span class=\"supfact\">a1</span> + Number;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">a1</span> + Number;\n       <span class=\"supfact\">i</span> += Number L) {\n    if (*(_BYTE *)(<span class=\"supfact\">i</span> + Number)) {\n      for (<span class=\"supfact\">j</span> =\n               (_QWORD *)list_head(*(_QWORD *)(<span class=\"supfact\">i</span> + Number));\n           <span class=\"supfact\">j</span>;\n           <span class=\"supfact\">j</span> = (_QWORD *)*<span class=\"supfact\">j</span>) {\n        if (!memcmp(<span class=\"supfact\">j</span> + Number, <span class=\"supfact\">a2</span>, Number))\n          return <span class=\"supfact\">j</span>;\n      }\n    }\n  }\n  return Number L;\n}", "code_t": "rpl_parent_t *__cdecl rpl_find_parent_any_dag(\n    rpl_instance_t *<span class=\"supfact\">instance</span>,\n    uip_ipaddr_t *<span class=\"supfact\">addr</span>) {\n  rpl_dag_t *<span class=\"supfact\">dag</span>;\n  rpl_parent_t *<span class=\"supfact\">p</span>;\n  for (<span class=\"supfact\">dag</span> = <span class=\"supfact\">instance</span>->dag_table;\n       <span class=\"supfact\">dag</span> < (rpl_dag_t *)&<span class=\"supfact\">instance</span>->def_route;\n       ++<span class=\"supfact\">dag</span>) {\n    if (<span class=\"supfact\">dag</span>->used) {\n      for (<span class=\"supfact\">p</span> =\n               (rpl_parent_t *)list_head(<span class=\"supfact\">dag</span>->parents);\n           <span class=\"supfact\">p</span>; <span class=\"supfact\">p</span> = <span class=\"supfact\">p</span>->next) {\n        if (!memcmp(&<span class=\"supfact\">p</span>-><span class=\"supfact\">addr</span>,\n                    <span class=\"supfact\">addr</span>, Number))\n          return <span class=\"supfact\">p</span>;\n      }\n    }\n  }\n  return Number L;\n}", "var": [{"name": "a1", "type": "rpl_instance_t *", "pred_name": "instance", "ref_name": "instance", "ref_type": "rpl_instance_t *"}, {"name": "a2", "type": "uip_ipaddr_t *", "pred_name": "addr", "ref_name": "addr", "ref_type": "uip_ipaddr_t *"}, {"name": "i", "type": "rpl_dag_t *", "pred_name": "dag", "ref_name": "dag", "ref_type": "rpl_dag_t *"}, {"name": "j", "type": "rpl_parent_t *", "pred_name": "p", "ref_name": "p", "ref_type": "rpl_parent_t *"}], "body_in_train": true}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/31feca0b01f7963552d84f00505fe4a77a17dbe5b130536a7d7912b04adf2717", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Applications/d/Output/make_dparser.native", "objdump": "0000000000402669 <new_term_string>:\n  402669:\t55                   \tpush   %rbp\n  40266a:\t48 89 e5             \tmov    %rsp,%rbp\n  40266d:\t48 83 ec 30          \tsub    $0x30,%rsp\n  402671:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  402675:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  402679:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  40267d:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n  402681:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402686:\te8 36 fe ff ff       \tcallq  4024c1 <new_term>\n  40268b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40268f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  402693:\t48 2b 45 e0          \tsub    -0x20(%rbp),%rax\n  402697:\t48 83 c0 01          \tadd    $0x1,%rax\n  40269b:\t48 89 c7             \tmov    %rax,%rdi\n  40269e:\te8 fd ea ff ff       \tcallq  4011a0 <malloc@plt>\n  4026a3:\t48 89 c2             \tmov    %rax,%rdx\n  4026a6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4026aa:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n  4026ae:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4026b2:\t48 2b 45 e0          \tsub    -0x20(%rbp),%rax\n  4026b6:\t48 89 c2             \tmov    %rax,%rdx\n  4026b9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4026bd:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4026c1:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  4026c5:\t48 89 ce             \tmov    %rcx,%rsi\n  4026c8:\t48 89 c7             \tmov    %rax,%rdi\n  4026cb:\te8 00 ea ff ff       \tcallq  4010d0 <memcpy@plt>\n  4026d0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4026d4:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n  4026d8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4026dc:\t48 2b 45 e0          \tsub    -0x20(%rbp),%rax\n  4026e0:\t48 01 d0             \tadd    %rdx,%rax\n  4026e3:\tc6 00 00             \tmovb   $0x0,(%rax)\n  4026e6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4026ea:\t48 2b 45 e0          \tsub    -0x20(%rbp),%rax\n  4026ee:\t89 c2                \tmov    %eax,%edx\n  4026f0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4026f4:\t89 50 20             \tmov    %edx,0x20(%rax)\n  4026f7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4026fb:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  4026ff:\t48 85 c0             \ttest   %rax,%rax\n  402702:\t75 3f                \tjne    402743 <new_term_string+0xda>\n  402704:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402708:\t48 8d 50 40          \tlea    0x40(%rax),%rdx\n  40270c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402710:\t48 89 50 38          \tmov    %rdx,0x38(%rax)\n  402714:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402718:\t48 8b 70 38          \tmov    0x38(%rax),%rsi\n  40271c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402720:\t8b 40 30             \tmov    0x30(%rax),%eax\n  402723:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  402726:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40272a:\t89 4a 30             \tmov    %ecx,0x30(%rdx)\n  40272d:\t89 c0                \tmov    %eax,%eax\n  40272f:\t48 c1 e0 03          \tshl    $0x3,%rax\n  402733:\t48 8d 14 06          \tlea    (%rsi,%rax,1),%rdx\n  402737:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40273b:\t48 89 02             \tmov    %rax,(%rdx)\n  40273e:\te9 9e 00 00 00       \tjmpq   4027e1 <new_term_string+0x178>\n  402743:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402747:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  40274b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40274f:\t48 83 c2 40          \tadd    $0x40,%rdx\n  402753:\t48 39 d0             \tcmp    %rdx,%rax\n  402756:\t75 38                \tjne    402790 <new_term_string+0x127>\n  402758:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40275c:\t8b 40 30             \tmov    0x30(%rax),%eax\n  40275f:\t83 f8 02             \tcmp    $0x2,%eax\n  402762:\t77 66                \tja     4027ca <new_term_string+0x161>\n  402764:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402768:\t48 8b 70 38          \tmov    0x38(%rax),%rsi\n  40276c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402770:\t8b 40 30             \tmov    0x30(%rax),%eax\n  402773:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  402776:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40277a:\t89 4a 30             \tmov    %ecx,0x30(%rdx)\n  40277d:\t89 c0                \tmov    %eax,%eax\n  40277f:\t48 c1 e0 03          \tshl    $0x3,%rax\n  402783:\t48 8d 14 06          \tlea    (%rsi,%rax,1),%rdx\n  402787:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40278b:\t48 89 02             \tmov    %rax,(%rdx)\n  40278e:\teb 51                \tjmp    4027e1 <new_term_string+0x178>\n  402790:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402794:\t8b 40 30             \tmov    0x30(%rax),%eax\n  402797:\t83 e0 07             \tand    $0x7,%eax\n  40279a:\t85 c0                \ttest   %eax,%eax\n  40279c:\t74 2c                \tje     4027ca <new_term_string+0x161>\n  40279e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4027a2:\t48 8b 70 38          \tmov    0x38(%rax),%rsi\n  4027a6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4027aa:\t8b 40 30             \tmov    0x30(%rax),%eax\n  4027ad:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  4027b0:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4027b4:\t89 4a 30             \tmov    %ecx,0x30(%rdx)\n  4027b7:\t89 c0                \tmov    %eax,%eax\n  4027b9:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4027bd:\t48 8d 14 06          \tlea    (%rsi,%rax,1),%rdx\n  4027c1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4027c5:\t48 89 02             \tmov    %rax,(%rdx)\n  4027c8:\teb 17                \tjmp    4027e1 <new_term_string+0x178>\n  4027ca:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4027ce:\t48 8d 50 30          \tlea    0x30(%rax),%rdx\n  4027d2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4027d6:\t48 89 c6             \tmov    %rax,%rsi\n  4027d9:\t48 89 d7             \tmov    %rdx,%rdi\n  4027dc:\te8 a2 96 01 00       \tcallq  41be83 <vec_add_internal>\n  4027e1:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  4027e5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4027e9:\t48 89 d6             \tmov    %rdx,%rsi\n  4027ec:\t48 89 c7             \tmov    %rax,%rdi\n  4027ef:\te8 ff fc ff ff       \tcallq  4024f3 <new_elem_term>\n  4027f4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4027f8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4027fc:\tc9                   \tleaveq \n  4027fd:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall new_term_string(__int64 <span class=\"supfact\">a1</span>,\n                                   const void *<span class=\"supfact\">a2</span>,\n                                   __int64 <span class=\"supfact\">a3</span>,\n                                   __int64 <span class=\"supfact\">a4</span>) {\n  __int64 v4;\n  unsigned int v5;\n  __int64 v6;\n  unsigned int v7;\n  void *<span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = new_term();\n  *((_QWORD *)<span class=\"supfact\">v11</span> + Number) =\n      malloc(<span class=\"supfact\">a3</span> - (_QWORD)<span class=\"supfact\">a2</span> + Number);\n  memcpy(*((void **)<span class=\"supfact\">v11</span> + Number), <span class=\"supfact\">a2</span>,\n         <span class=\"supfact\">a3</span> - (_QWORD)<span class=\"supfact\">a2</span>);\n  *(_BYTE *)(*((_QWORD *)<span class=\"supfact\">v11</span> + Number) + <span class=\"supfact\">a3</span> -\n             (_QWORD)<span class=\"supfact\">a2</span>) = Number;\n  *((_DWORD *)<span class=\"supfact\">v11</span> + Number) =\n      <span class=\"supfact\">a3</span> - (_DWORD)<span class=\"supfact\">a2</span>;\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) ==\n        <span class=\"supfact\">a1</span> + Number) {\n      if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) <= Number) {\n      LABEL_5:\n        v6 = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n        v7 = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = v7 + Number;\n        *(_QWORD *)(v6 + Number L * v7) = <span class=\"supfact\">v11</span>;\n        return new_elem_term((__int64)<span class=\"supfact\">v11</span>, <span class=\"supfact\">a4</span>);\n      }\n    } else if ((*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & Number) != Number) {\n      goto LABEL_5;\n    }\n    vec_add_internal(<span class=\"supfact\">a1</span> + Number, <span class=\"supfact\">v11</span>);\n    return new_elem_term((__int64)<span class=\"supfact\">v11</span>, <span class=\"supfact\">a4</span>);\n  }\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">a1</span> + Number;\n  v4 = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  v5 = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = v5 + Number;\n  *(_QWORD *)(v4 + Number L * v5) = <span class=\"supfact\">v11</span>;\n  return new_elem_term((__int64)<span class=\"supfact\">v11</span>, <span class=\"supfact\">a4</span>);\n}", "code_t": "Elem_0 *__cdecl new_term_string(Grammar_0 *<span class=\"supfact\">g</span>,\n                                char *<span class=\"supfact\">s</span>,\n                                char *<span class=\"supfact\">e</span>,\n                                Rule_0 *<span class=\"supfact\">r</span>) {\n  Term_0 **v4;\n  uint v5;\n  Term_0 **v6;\n  uint v7;\n  Term_0 *<span class=\"supfact\">t</span>;\n  <span class=\"supfact\">t</span> = new_term();\n  <span class=\"supfact\">t</span>->string =\n      (char *)malloc(<span class=\"supfact\">e</span> - <span class=\"supfact\">s</span> + Number);\n  memcpy(<span class=\"supfact\">t</span>->string, <span class=\"supfact\">s</span>,\n         <span class=\"supfact\">e</span> - <span class=\"supfact\">s</span>);\n  <span class=\"supfact\">t</span>->string[<span class=\"supfact\">e</span> - <span class=\"supfact\">s</span>] = Number;\n  <span class=\"supfact\">t</span>->string_len =\n      (_DWORD)<span class=\"supfact\">e</span> - (_DWORD)<span class=\"supfact\">s</span>;\n  if (<span class=\"supfact\">g</span>->terminals.v) {\n    if (<span class=\"supfact\">g</span>->terminals.v ==\n        <span class=\"supfact\">g</span>->terminals.<span class=\"supfact\">e</span>) {\n      if (<span class=\"supfact\">g</span>->terminals.n <= Number) {\n      LABEL_5:\n        v6 = <span class=\"supfact\">g</span>->terminals.v;\n        v7 = <span class=\"supfact\">g</span>->terminals.n;\n        <span class=\"supfact\">g</span>->terminals.n = v7 + Number;\n        v6[v7] = <span class=\"supfact\">t</span>;\n        return new_elem_term(<span class=\"supfact\">t</span>, <span class=\"supfact\">r</span>);\n      }\n    } else if ((<span class=\"supfact\">g</span>->terminals.n & Number) != Number) {\n      goto LABEL_5;\n    }\n    vec_add_internal(&<span class=\"supfact\">g</span>->terminals, <span class=\"supfact\">t</span>);\n    return new_elem_term(<span class=\"supfact\">t</span>, <span class=\"supfact\">r</span>);\n  }\n  <span class=\"supfact\">g</span>->terminals.v =\n      <span class=\"supfact\">g</span>->terminals.<span class=\"supfact\">e</span>;\n  v4 = <span class=\"supfact\">g</span>->terminals.v;\n  v5 = <span class=\"supfact\">g</span>->terminals.n;\n  <span class=\"supfact\">g</span>->terminals.n = v5 + Number;\n  v4[v5] = <span class=\"supfact\">t</span>;\n  return new_elem_term(<span class=\"supfact\">t</span>, <span class=\"supfact\">r</span>);\n}", "var": [{"name": "a1", "type": "pj_json_elem_0 *", "pred_name": "el", "ref_name": "g", "ref_type": "Grammar_0 *"}, {"name": "a2", "type": "char *", "pred_name": "data", "ref_name": "s", "ref_type": "char *"}, {"name": "a3", "type": "size_t", "pred_name": "size", "ref_name": "e", "ref_type": "char *"}, {"name": "a4", "type": "__unk__", "pred_name": "__unk__", "ref_name": "r", "ref_type": "Rule_0 *"}, {"name": "v11", "type": "__unk__", "pred_name": "__unk__", "ref_name": "t", "ref_type": "Term_0 *"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/53d830a43215f228fc0a4c27e6f0f8ad5a6e43d5f5cf7f601c574db1fd46c809", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/recfile", "objdump": "000000000045c0a5 <MulIm>:\n  45c0a5:\t55                   \tpush   %rbp\n  45c0a6:\t48 89 e5             \tmov    %rsp,%rbp\n  45c0a9:\tf3 0f 11 45 fc       \tmovss  %xmm0,-0x4(%rbp)\n  45c0ae:\tf3 0f 11 4d f8       \tmovss  %xmm1,-0x8(%rbp)\n  45c0b3:\tf3 0f 11 55 f4       \tmovss  %xmm2,-0xc(%rbp)\n  45c0b8:\tf3 0f 11 5d f0       \tmovss  %xmm3,-0x10(%rbp)\n  45c0bd:\tf3 0f 10 45 fc       \tmovss  -0x4(%rbp),%xmm0\n  45c0c2:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n  45c0c5:\tf3 0f 59 4d f0       \tmulss  -0x10(%rbp),%xmm1\n  45c0ca:\tf3 0f 10 45 f8       \tmovss  -0x8(%rbp),%xmm0\n  45c0cf:\tf3 0f 59 45 f4       \tmulss  -0xc(%rbp),%xmm0\n  45c0d4:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n  45c0d8:\t5d                   \tpop    %rbp\n  45c0d9:\tc3                   \tretq   ", "code_s": "float __fastcall MulIm(float <span class=\"supfact\">a1</span>, float <span class=\"supfact\">a2</span>,\n                       float <span class=\"supfact\">a3</span>, float <span class=\"supfact\">a4</span>) {\n  return (float)(<span class=\"supfact\">a2</span> * <span class=\"supfact\">a3</span>) +\n         (float)(<span class=\"supfact\">a1</span> * <span class=\"supfact\">a4</span>);\n}", "code_t": "float __cdecl MulIm(float <span class=\"supfact\">aRe</span>, float <span class=\"supfact\">aIm</span>,\n                    float <span class=\"supfact\">bRe</span>, float <span class=\"supfact\">bIm</span>) {\n  return (float)(<span class=\"supfact\">aIm</span> * <span class=\"supfact\">bRe</span>) +\n         (float)(<span class=\"supfact\">aRe</span> * <span class=\"supfact\">bIm</span>);\n}", "var": [{"name": "a1", "type": "float", "pred_name": "x", "ref_name": "aRe", "ref_type": "float"}, {"name": "a2", "type": "float", "pred_name": "y", "ref_name": "aIm", "ref_type": "float"}, {"name": "a3", "type": "float", "pred_name": "z", "ref_name": "bRe", "ref_type": "float"}, {"name": "a4", "type": "float", "pred_name": "w", "ref_name": "bIm", "ref_type": "float"}], "body_in_train": true}, {"repo_owner": "githubzenganiu", "repo_name": "first", "path": "githubzenganiu/first/5b8f3184af53602f792898776ad2d9457636f1c6604f4c8c99ec24bde1fbb4f2", "path_in_repo": "githubzenganiu/first/books/unpv22e/shm/test3", "objdump": "", "code_s": "int shm_unlink(const char *<span class=\"supfact\">name</span>) {\n  return shm_unlink(<span class=\"supfact\">name</span>);\n}", "code_t": "int shm_unlink(const char *<span class=\"supfact\">name</span>) {\n  return shm_unlink(<span class=\"supfact\">name</span>);\n}", "var": [{"name": "name", "type": "const char *", "pred_name": "name", "ref_name": "name", "ref_type": "const char *"}], "body_in_train": true}, {"repo_owner": "lesps", "repo_name": "KiNaomatics", "path": "lesps/KiNaomatics/2761c161b68a7e046b2441382bf646c1afe6bffd61f41e6675dd129bf748f2a8", "path_in_repo": "lesps/KiNaomatics/OpenNI/Platform/Linux/Build/Modules/nimMockNodes/x64-Release/MockDepthGenerator.o", "objdump": "0000000000000550 <_ZTv0_n24_N18MockDepthGeneratorD1Ev>:\n     550:\t4c 8b 17             \tmov    (%rdi),%r10\n     553:\t49 03 7a e8          \tadd    -0x18(%r10),%rdi\n     557:\te9 74 ff ff ff       \tjmpq   4d0 <_ZN18MockDepthGeneratorD1Ev>\n     55c:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "void __fastcall ` virtual thunk to ' MockDepthGenerator ~ MockDepthGenerator ( MockDepthGenerator * <span class=\"supfact\">this</span> ) { MockDepthGenerator ~ MockDepthGenerator ( ( MockDepthGenerator * ) ( ( char * ) <span class=\"supfact\">this</span> + * ( _QWORD * ) ( * ( _QWORD * ) <span class=\"supfact\">this</span> - Number L ) ) ) ; }", "code_t": "void __fastcall ` virtual thunk to ' MockDepthGenerator ~ MockDepthGenerator ( MockDepthGenerator * <span class=\"supfact\">this</span> ) { MockDepthGenerator ~ MockDepthGenerator ( ( MockDepthGenerator * ) ( ( char * ) <span class=\"supfact\">this</span> + * ( _QWORD * ) ( * ( _QWORD * ) <span class=\"supfact\">this</span> - Number L ) ) ) ; }", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "MockDepthGenerator *"}], "body_in_train": false}, {"repo_owner": "mdsitton", "repo_name": "musicgame", "path": "mdsitton/musicgame/5e1c7fdfe3c6e4d0e154330d4313f67aea5d9a4a7d6ba52958965816848824ce", "path_in_repo": "mdsitton/musicgame/extern/spdlog/bench/spdlog-async", "objdump": "0000000000406e20 <_ZN6spdlog6logger5flushEv>:\n  406e20:\t55                   \tpush   %rbp\n  406e21:\t53                   \tpush   %rbx\n  406e22:\t48 83 ec 08          \tsub    $0x8,%rsp\n  406e26:\t48 8b 5f 28          \tmov    0x28(%rdi),%rbx\n  406e2a:\t48 8b 6f 30          \tmov    0x30(%rdi),%rbp\n  406e2e:\t48 39 eb             \tcmp    %rbp,%rbx\n  406e31:\t74 17                \tje     406e4a <_ZN6spdlog6logger5flushEv+0x2a>\n  406e33:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n  406e38:\t48 8b 3b             \tmov    (%rbx),%rdi\n  406e3b:\t48 83 c3 10          \tadd    $0x10,%rbx\n  406e3f:\t48 8b 07             \tmov    (%rdi),%rax\n  406e42:\tff 50 18             \tcallq  *0x18(%rax)\n  406e45:\t48 39 dd             \tcmp    %rbx,%rbp\n  406e48:\t75 ee                \tjne    406e38 <_ZN6spdlog6logger5flushEv+0x18>\n  406e4a:\t48 83 c4 08          \tadd    $0x8,%rsp\n  406e4e:\t5b                   \tpop    %rbx\n  406e4f:\t5d                   \tpop    %rbp\n  406e50:\tc3                   \tretq   \n  406e51:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n  406e58:\t00 00 00 00 \n  406e5c:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "__int64 __fastcall spdlog logger flush(spdlog logger *<span class=\"supfact\">this</span>) {\n  __int64 *<span class=\"supfact\">v1</span>;\n  __int64 *<span class=\"supfact\">i</span>;\n  __int64 v3;\n  __int64 <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">v1</span> = (__int64 *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  for (<span class=\"supfact\">i</span> =\n           (__int64 *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n       <span class=\"supfact\">i</span> != <span class=\"supfact\">v1</span>;\n       <span class=\"supfact\">result</span> =\n           (*(__int64(__fastcall **)(__int64))(*(_QWORD *)v3 + Number L))(v3)) {\n    v3 = *<span class=\"supfact\">v1</span>;\n    <span class=\"supfact\">v1</span> += Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "__int64 __fastcall spdlog logger flush(spdlog logger *<span class=\"supfact\">this</span>) {\n  __int64 *<span class=\"supfact\">v1</span>;\n  __int64 *<span class=\"supfact\">i</span>;\n  __int64 v3;\n  __int64 <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">v1</span> = (__int64 *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  for (<span class=\"supfact\">i</span> =\n           (__int64 *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n       <span class=\"supfact\">i</span> != <span class=\"supfact\">v1</span>;\n       <span class=\"supfact\">result</span> =\n           (*(__int64(__fastcall **)(__int64))(*(_QWORD *)v3 + Number L))(v3)) {\n    v3 = *<span class=\"supfact\">v1</span>;\n    <span class=\"supfact\">v1</span> += Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "this", "type": "spdlog::logger *", "pred_name": "this", "ref_name": "this", "ref_type": "spdlog::logger *"}, {"name": "v1", "type": "__int64 *", "pred_name": "v1", "ref_name": "v1", "ref_type": "__int64 *"}, {"name": "i", "type": "__int64 *", "pred_name": "i", "ref_name": "i", "ref_type": "__int64 *"}, {"name": "result", "type": "__int64", "pred_name": "result", "ref_name": "result", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "webosose", "repo_name": "gst-libav", "path": "webosose/gst-libav/229b60ebe2c26979c636772b61b17ae90fc33d86fa89a390f2a10018250c4de2", "path_in_repo": "webosose/gst-libav/gst-libs/ext/libav/libavcodec/takdec.o", "objdump": "0000000000000637 <decode_lpc>:\n     637:\t48 89 7c 24 c8       \tmov    %rdi,-0x38(%rsp)\n     63c:\t89 74 24 c4          \tmov    %esi,-0x3c(%rsp)\n     640:\t89 54 24 c0          \tmov    %edx,-0x40(%rsp)\n     644:\t83 7c 24 c0 01       \tcmpl   $0x1,-0x40(%rsp)\n     649:\t0f 8e 85 02 00 00    \tjle    8d4 <decode_lpc+0x29d>\n     64f:\t83 7c 24 c4 01       \tcmpl   $0x1,-0x3c(%rsp)\n     654:\t0f 85 ab 00 00 00    \tjne    705 <decode_lpc+0xce>\n     65a:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     65f:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n     663:\t48 89 54 24 c8       \tmov    %rdx,-0x38(%rsp)\n     668:\t8b 00                \tmov    (%rax),%eax\n     66a:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n     66e:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n     675:\t00 \n     676:\teb 53                \tjmp    6cb <decode_lpc+0x94>\n     678:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     67d:\t8b 00                \tmov    (%rax),%eax\n     67f:\t89 c2                \tmov    %eax,%edx\n     681:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n     685:\t01 d0                \tadd    %edx,%eax\n     687:\t89 c2                \tmov    %eax,%edx\n     689:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     68e:\t89 10                \tmov    %edx,(%rax)\n     690:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     695:\t48 83 c0 04          \tadd    $0x4,%rax\n     699:\t8b 00                \tmov    (%rax),%eax\n     69b:\t89 c2                \tmov    %eax,%edx\n     69d:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     6a2:\t8b 00                \tmov    (%rax),%eax\n     6a4:\t01 c2                \tadd    %eax,%edx\n     6a6:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     6ab:\t48 83 c0 04          \tadd    $0x4,%rax\n     6af:\t89 10                \tmov    %edx,(%rax)\n     6b1:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     6b6:\t48 83 c0 04          \tadd    $0x4,%rax\n     6ba:\t8b 00                \tmov    (%rax),%eax\n     6bc:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n     6c0:\t48 83 44 24 c8 08    \taddq   $0x8,-0x38(%rsp)\n     6c6:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n     6cb:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n     6cf:\t83 e8 01             \tsub    $0x1,%eax\n     6d2:\td1 f8                \tsar    %eax\n     6d4:\t39 44 24 fc          \tcmp    %eax,-0x4(%rsp)\n     6d8:\t7c 9e                \tjl     678 <decode_lpc+0x41>\n     6da:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n     6de:\t83 e8 01             \tsub    $0x1,%eax\n     6e1:\t83 e0 01             \tand    $0x1,%eax\n     6e4:\t85 c0                \ttest   %eax,%eax\n     6e6:\t0f 84 e9 01 00 00    \tje     8d5 <decode_lpc+0x29e>\n     6ec:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     6f1:\t8b 00                \tmov    (%rax),%eax\n     6f3:\t89 c2                \tmov    %eax,%edx\n     6f5:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n     6f9:\t01 d0                \tadd    %edx,%eax\n     6fb:\t89 c2                \tmov    %eax,%edx\n     6fd:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     702:\t89 10                \tmov    %edx,(%rax)\n     704:\tc3                   \tretq   \n     705:\t83 7c 24 c4 02       \tcmpl   $0x2,-0x3c(%rsp)\n     70a:\t0f 85 f4 00 00 00    \tjne    804 <decode_lpc+0x1cd>\n     710:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     715:\t48 83 c0 04          \tadd    $0x4,%rax\n     719:\t8b 00                \tmov    (%rax),%eax\n     71b:\t89 44 24 f4          \tmov    %eax,-0xc(%rsp)\n     71f:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     724:\t8b 00                \tmov    (%rax),%eax\n     726:\t89 c2                \tmov    %eax,%edx\n     728:\t8b 44 24 f4          \tmov    -0xc(%rsp),%eax\n     72c:\t01 d0                \tadd    %edx,%eax\n     72e:\t89 44 24 f0          \tmov    %eax,-0x10(%rsp)\n     732:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     737:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n     73b:\t8b 44 24 f0          \tmov    -0x10(%rsp),%eax\n     73f:\t89 02                \tmov    %eax,(%rdx)\n     741:\t83 7c 24 c0 02       \tcmpl   $0x2,-0x40(%rsp)\n     746:\t0f 8e 89 01 00 00    \tjle    8d5 <decode_lpc+0x29e>\n     74c:\t48 83 44 24 c8 08    \taddq   $0x8,-0x38(%rsp)\n     752:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n     759:\t00 \n     75a:\teb 6b                \tjmp    7c7 <decode_lpc+0x190>\n     75c:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     761:\t8b 00                \tmov    (%rax),%eax\n     763:\t89 c2                \tmov    %eax,%edx\n     765:\t8b 44 24 f4          \tmov    -0xc(%rsp),%eax\n     769:\t01 d0                \tadd    %edx,%eax\n     76b:\t89 44 24 d8          \tmov    %eax,-0x28(%rsp)\n     76f:\t8b 54 24 d8          \tmov    -0x28(%rsp),%edx\n     773:\t8b 44 24 f0          \tmov    -0x10(%rsp),%eax\n     777:\t01 d0                \tadd    %edx,%eax\n     779:\t89 44 24 d4          \tmov    %eax,-0x2c(%rsp)\n     77d:\t8b 54 24 d4          \tmov    -0x2c(%rsp),%edx\n     781:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     786:\t89 10                \tmov    %edx,(%rax)\n     788:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     78d:\t48 83 c0 04          \tadd    $0x4,%rax\n     791:\t8b 00                \tmov    (%rax),%eax\n     793:\t89 c2                \tmov    %eax,%edx\n     795:\t8b 44 24 d8          \tmov    -0x28(%rsp),%eax\n     799:\t01 d0                \tadd    %edx,%eax\n     79b:\t89 44 24 f4          \tmov    %eax,-0xc(%rsp)\n     79f:\t8b 54 24 f4          \tmov    -0xc(%rsp),%edx\n     7a3:\t8b 44 24 d4          \tmov    -0x2c(%rsp),%eax\n     7a7:\t01 d0                \tadd    %edx,%eax\n     7a9:\t89 44 24 f0          \tmov    %eax,-0x10(%rsp)\n     7ad:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     7b2:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n     7b6:\t8b 44 24 f0          \tmov    -0x10(%rsp),%eax\n     7ba:\t89 02                \tmov    %eax,(%rdx)\n     7bc:\t48 83 44 24 c8 08    \taddq   $0x8,-0x38(%rsp)\n     7c2:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n     7c7:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n     7cb:\t83 e8 02             \tsub    $0x2,%eax\n     7ce:\td1 f8                \tsar    %eax\n     7d0:\t39 44 24 fc          \tcmp    %eax,-0x4(%rsp)\n     7d4:\t7c 86                \tjl     75c <decode_lpc+0x125>\n     7d6:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n     7da:\t83 e0 01             \tand    $0x1,%eax\n     7dd:\t85 c0                \ttest   %eax,%eax\n     7df:\t0f 84 f0 00 00 00    \tje     8d5 <decode_lpc+0x29e>\n     7e5:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     7ea:\t8b 00                \tmov    (%rax),%eax\n     7ec:\t89 c1                \tmov    %eax,%ecx\n     7ee:\t8b 54 24 f4          \tmov    -0xc(%rsp),%edx\n     7f2:\t8b 44 24 f0          \tmov    -0x10(%rsp),%eax\n     7f6:\t01 d0                \tadd    %edx,%eax\n     7f8:\t01 c8                \tadd    %ecx,%eax\n     7fa:\t89 c2                \tmov    %eax,%edx\n     7fc:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     801:\t89 10                \tmov    %edx,(%rax)\n     803:\tc3                   \tretq   \n     804:\t83 7c 24 c4 03       \tcmpl   $0x3,-0x3c(%rsp)\n     809:\t0f 85 c6 00 00 00    \tjne    8d5 <decode_lpc+0x29e>\n     80f:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     814:\t48 83 c0 04          \tadd    $0x4,%rax\n     818:\t8b 00                \tmov    (%rax),%eax\n     81a:\t89 44 24 e0          \tmov    %eax,-0x20(%rsp)\n     81e:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     823:\t8b 00                \tmov    (%rax),%eax\n     825:\t89 c2                \tmov    %eax,%edx\n     827:\t8b 44 24 e0          \tmov    -0x20(%rsp),%eax\n     82b:\t01 d0                \tadd    %edx,%eax\n     82d:\t89 44 24 dc          \tmov    %eax,-0x24(%rsp)\n     831:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     836:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n     83a:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n     83e:\t89 02                \tmov    %eax,(%rdx)\n     840:\t83 7c 24 c0 02       \tcmpl   $0x2,-0x40(%rsp)\n     845:\t0f 8e 8a 00 00 00    \tjle    8d5 <decode_lpc+0x29e>\n     84b:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     850:\t48 83 c0 08          \tadd    $0x8,%rax\n     854:\t8b 00                \tmov    (%rax),%eax\n     856:\t89 44 24 ec          \tmov    %eax,-0x14(%rsp)\n     85a:\t8b 54 24 ec          \tmov    -0x14(%rsp),%edx\n     85e:\t8b 44 24 e0          \tmov    -0x20(%rsp),%eax\n     862:\t01 d0                \tadd    %edx,%eax\n     864:\t89 44 24 e8          \tmov    %eax,-0x18(%rsp)\n     868:\t8b 54 24 e8          \tmov    -0x18(%rsp),%edx\n     86c:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n     870:\t01 d0                \tadd    %edx,%eax\n     872:\t89 44 24 e4          \tmov    %eax,-0x1c(%rsp)\n     876:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     87b:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n     87f:\t8b 44 24 e4          \tmov    -0x1c(%rsp),%eax\n     883:\t89 02                \tmov    %eax,(%rdx)\n     885:\t48 83 44 24 c8 0c    \taddq   $0xc,-0x38(%rsp)\n     88b:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n     892:\t00 \n     893:\teb 31                \tjmp    8c6 <decode_lpc+0x28f>\n     895:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     89a:\t8b 00                \tmov    (%rax),%eax\n     89c:\t01 44 24 ec          \tadd    %eax,-0x14(%rsp)\n     8a0:\t8b 44 24 ec          \tmov    -0x14(%rsp),%eax\n     8a4:\t01 44 24 e8          \tadd    %eax,-0x18(%rsp)\n     8a8:\t8b 44 24 e8          \tmov    -0x18(%rsp),%eax\n     8ac:\t01 44 24 e4          \tadd    %eax,-0x1c(%rsp)\n     8b0:\t8b 54 24 e4          \tmov    -0x1c(%rsp),%edx\n     8b4:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n     8b9:\t89 10                \tmov    %edx,(%rax)\n     8bb:\t48 83 44 24 c8 04    \taddq   $0x4,-0x38(%rsp)\n     8c1:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n     8c6:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n     8ca:\t83 e8 03             \tsub    $0x3,%eax\n     8cd:\t39 44 24 fc          \tcmp    %eax,-0x4(%rsp)\n     8d1:\t7c c2                \tjl     895 <decode_lpc+0x25e>\n     8d3:\tc3                   \tretq   \n     8d4:\t90                   \tnop\n     8d5:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall decode_lpc(unsigned int *<span class=\"supfact\">a1</span>,\n                                       int <span class=\"supfact\">a2</span>,\n                                       int <span class=\"supfact\">a3</span>) {\n  unsigned __int64 <span class=\"supfact\">result</span>;\n  _DWORD *v4;\n  _DWORD *v5;\n  unsigned int *v6;\n  unsigned int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">v11</span>;\n  unsigned int <span class=\"supfact\">v12</span>;\n  unsigned int <span class=\"supfact\">v13</span>;\n  unsigned int <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  int j;\n  int k;\n  if (<span class=\"supfact\">a3</span> > Number) {\n    switch (<span class=\"supfact\">a2</span>) {\n    case Number:\n      v4 = <span class=\"supfact\">a1</span> + Number;\n      for (<span class=\"supfact\">i</span> = *<span class=\"supfact\">a1</span>;\n           SHIDWORD(<span class=\"supfact\">i</span>) < (<span class=\"supfact\">a3</span> - Number) >>\n           Number;\n           ++HIDWORD(<span class=\"supfact\">i</span>)) {\n        *v4 += <span class=\"supfact\">i</span>;\n        v4[Number] += *v4;\n        LODWORD(<span class=\"supfact\">i</span>) = v4[Number];\n        v4 += Number;\n      }\n      <span class=\"supfact\">result</span> = ((_BYTE)<span class=\"supfact\">a3</span> - Number) & Number;\n      if ((((_BYTE)<span class=\"supfact\">a3</span> - Number) & Number) != Number) {\n        <span class=\"supfact\">result</span> = (unsigned __int64)v4;\n        *v4 += <span class=\"supfact\">i</span>;\n      }\n      break;\n    case Number:\n      <span class=\"supfact\">v14</span> = <span class=\"supfact\">a1</span>[Number];\n      <span class=\"supfact\">v13</span> = *<span class=\"supfact\">a1</span> + <span class=\"supfact\">v14</span>;\n      <span class=\"supfact\">result</span> = <span class=\"supfact\">v13</span>;\n      <span class=\"supfact\">a1</span>[Number] = <span class=\"supfact\">v13</span>;\n      if (<span class=\"supfact\">a3</span> > Number) {\n        v5 = <span class=\"supfact\">a1</span> + Number;\n        for (j = Number; j<(<span class=\"supfact\">a3</span> - Number)> > Number; ++j) {\n          <span class=\"supfact\">v7</span> = *v5 + <span class=\"supfact\">v14</span>;\n          *v5 = <span class=\"supfact\">v7</span> + <span class=\"supfact\">v13</span>;\n          <span class=\"supfact\">v14</span> = v5[Number] + <span class=\"supfact\">v7</span>;\n          <span class=\"supfact\">v13</span> += <span class=\"supfact\">v14</span> + <span class=\"supfact\">v7</span>;\n          v5[Number] = <span class=\"supfact\">v13</span>;\n          v5 += Number;\n        }\n        <span class=\"supfact\">result</span> = <span class=\"supfact\">a3</span> & Number;\n        if ((<span class=\"supfact\">a3</span> & Number) != Number) {\n          <span class=\"supfact\">result</span> = (unsigned __int64)v5;\n          *v5 += <span class=\"supfact\">v14</span> + <span class=\"supfact\">v13</span>;\n        }\n      }\n      break;\n    case Number:\n      <span class=\"supfact\">v9</span> = <span class=\"supfact\">a1</span>[Number];\n      <span class=\"supfact\">v8</span> = *<span class=\"supfact\">a1</span> + <span class=\"supfact\">v9</span>;\n      <span class=\"supfact\">result</span> = <span class=\"supfact\">v8</span>;\n      <span class=\"supfact\">a1</span>[Number] = <span class=\"supfact\">v8</span>;\n      if (<span class=\"supfact\">a3</span> > Number) {\n        <span class=\"supfact\">v12</span> = <span class=\"supfact\">a1</span>[Number];\n        <span class=\"supfact\">v11</span> = <span class=\"supfact\">v12</span> + <span class=\"supfact\">v9</span>;\n        <span class=\"supfact\">v10</span> =\n            <span class=\"supfact\">v12</span> + <span class=\"supfact\">v9</span> + <span class=\"supfact\">v8</span>;\n        <span class=\"supfact\">a1</span>[Number] = <span class=\"supfact\">v10</span>;\n        v6 = <span class=\"supfact\">a1</span> + Number;\n        for (k = Number;; ++k) {\n          <span class=\"supfact\">result</span> = (unsigned int)(<span class=\"supfact\">a3</span> - Number);\n          if (k >= (int)<span class=\"supfact\">result</span>)\n            break;\n          <span class=\"supfact\">v12</span> += *v6;\n          <span class=\"supfact\">v11</span> += <span class=\"supfact\">v12</span>;\n          <span class=\"supfact\">v10</span> += <span class=\"supfact\">v11</span>;\n          *v6++ = <span class=\"supfact\">v10</span>;\n        }\n      }\n      break;\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl decode_lpc(int32_t *<span class=\"supfact\">coeffs</span>,\n                        int <span class=\"supfact\">mode</span>, int <span class=\"supfact\">length</span>) {\n  int32_t *coeffsa;\n  int32_t *coeffsb;\n  int32_t *coeffsc;\n  unsigned int <span class=\"supfact\">a3</span>;\n  unsigned int <span class=\"supfact\">a2_0</span>;\n  unsigned int <span class=\"supfact\">a1_1</span>;\n  unsigned int <span class=\"supfact\">a5</span>;\n  unsigned int <span class=\"supfact\">a4_0</span>;\n  unsigned int <span class=\"supfact\">a3_0</span>;\n  unsigned int <span class=\"supfact\">a2</span>;\n  unsigned int <span class=\"supfact\">a1_0</span>;\n  __int64 <span class=\"supfact\">a1</span>;\n  int i;\n  int ia;\n  if (<span class=\"supfact\">length</span> > Number) {\n    switch (<span class=\"supfact\">mode</span>) {\n    case Number:\n      coeffsa = <span class=\"supfact\">coeffs</span> + Number;\n      for (<span class=\"supfact\">a1</span> = (unsigned int)*<span class=\"supfact\">coeffs</span>;\n           SHIDWORD(<span class=\"supfact\">a1</span>) < (<span class=\"supfact\">length</span> - Number) >>\n           Number;\n           ++HIDWORD(<span class=\"supfact\">a1</span>)) {\n        *coeffsa += <span class=\"supfact\">a1</span>;\n        coeffsa[Number] += *coeffsa;\n        LODWORD(<span class=\"supfact\">a1</span>) = coeffsa[Number];\n        coeffsa += Number;\n      }\n      if ((((_BYTE)<span class=\"supfact\">length</span> - Number) & Number) != Number)\n        *coeffsa += <span class=\"supfact\">a1</span>;\n      break;\n    case Number:\n      <span class=\"supfact\">a1_0</span> = <span class=\"supfact\">coeffs</span>[Number];\n      <span class=\"supfact\">a2</span> = *<span class=\"supfact\">coeffs</span> + <span class=\"supfact\">a1_0</span>;\n      <span class=\"supfact\">coeffs</span>[Number] = <span class=\"supfact\">a2</span>;\n      if (<span class=\"supfact\">length</span> > Number) {\n        coeffsb = <span class=\"supfact\">coeffs</span> + Number;\n        for (i = Number; i<(<span class=\"supfact\">length</span> - Number)> > Number; ++i) {\n          <span class=\"supfact\">a3</span> = *coeffsb + <span class=\"supfact\">a1_0</span>;\n          *coeffsb = <span class=\"supfact\">a3</span> + <span class=\"supfact\">a2</span>;\n          <span class=\"supfact\">a1_0</span> = coeffsb[Number] + <span class=\"supfact\">a3</span>;\n          <span class=\"supfact\">a2</span> += <span class=\"supfact\">a1_0</span> + <span class=\"supfact\">a3</span>;\n          coeffsb[Number] = <span class=\"supfact\">a2</span>;\n          coeffsb += Number;\n        }\n        if ((<span class=\"supfact\">length</span> & Number) != Number)\n          *coeffsb += <span class=\"supfact\">a1_0</span> + <span class=\"supfact\">a2</span>;\n      }\n      break;\n    case Number:\n      <span class=\"supfact\">a1_1</span> = <span class=\"supfact\">coeffs</span>[Number];\n      <span class=\"supfact\">a2_0</span> = *<span class=\"supfact\">coeffs</span> + <span class=\"supfact\">a1_1</span>;\n      <span class=\"supfact\">coeffs</span>[Number] = <span class=\"supfact\">a2_0</span>;\n      if (<span class=\"supfact\">length</span> > Number) {\n        <span class=\"supfact\">a3_0</span> = <span class=\"supfact\">coeffs</span>[Number];\n        <span class=\"supfact\">a4_0</span> = <span class=\"supfact\">a3_0</span> + <span class=\"supfact\">a1_1</span>;\n        <span class=\"supfact\">a5</span> =\n            <span class=\"supfact\">a3_0</span> + <span class=\"supfact\">a1_1</span> + <span class=\"supfact\">a2_0</span>;\n        <span class=\"supfact\">coeffs</span>[Number] = <span class=\"supfact\">a5</span>;\n        coeffsc = <span class=\"supfact\">coeffs</span> + Number;\n        for (ia = Number; ia < <span class=\"supfact\">length</span> - Number; ++ia) {\n          <span class=\"supfact\">a3_0</span> += *coeffsc;\n          <span class=\"supfact\">a4_0</span> += <span class=\"supfact\">a3_0</span>;\n          <span class=\"supfact\">a5</span> += <span class=\"supfact\">a4_0</span>;\n          *coeffsc++ = <span class=\"supfact\">a5</span>;\n        }\n      }\n      break;\n    }\n  }\n}", "var": [{"name": "a1", "type": "int32_t *", "pred_name": "coeffs", "ref_name": "coeffs", "ref_type": "int32_t *"}, {"name": "a2", "type": "int", "pred_name": "mode", "ref_name": "mode", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "len", "ref_name": "length", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v7", "type": "int", "pred_name": "a3", "ref_name": "a3", "ref_type": "unsigned int"}, {"name": "v8", "type": "int", "pred_name": "a2", "ref_name": "a2_0", "ref_type": "unsigned int"}, {"name": "v9", "type": "int", "pred_name": "a1", "ref_name": "a1_1", "ref_type": "unsigned int"}, {"name": "v10", "type": "int", "pred_name": "a5", "ref_name": "a5", "ref_type": "unsigned int"}, {"name": "v11", "type": "int", "pred_name": "a6", "ref_name": "a4_0", "ref_type": "unsigned int"}, {"name": "v12", "type": "int", "pred_name": "a7", "ref_name": "a3_0", "ref_type": "unsigned int"}, {"name": "v13", "type": "int", "pred_name": "a5", "ref_name": "a2", "ref_type": "unsigned int"}, {"name": "v14", "type": "int", "pred_name": "a7", "ref_name": "a1_0", "ref_type": "unsigned int"}, {"name": "i", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "daydaygit", "repo_name": "smdk6410-v1.6", "path": "daydaygit/smdk6410-v1.6/0fe5a051cabd9015fd5ec3d938a30f78e91a11f75491a0d1176333e698247abf", "path_in_repo": "daydaygit/smdk6410-v1.6/linux-3.8.3/scripts/kconfig/zconf.tab.o", "objdump": "00000000000087cb <expr_eliminate_eq>:\n    87cb:\t48 83 ec 18          \tsub    $0x18,%rsp\n    87cf:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    87d4:\t48 89 34 24          \tmov    %rsi,(%rsp)\n    87d8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    87dd:\t48 8b 00             \tmov    (%rax),%rax\n    87e0:\t48 85 c0             \ttest   %rax,%rax\n    87e3:\t0f 84 b6 00 00 00    \tje     889f <expr_eliminate_eq+0xd4>\n    87e9:\t48 8b 04 24          \tmov    (%rsp),%rax\n    87ed:\t48 8b 00             \tmov    (%rax),%rax\n    87f0:\t48 85 c0             \ttest   %rax,%rax\n    87f3:\t0f 84 a6 00 00 00    \tje     889f <expr_eliminate_eq+0xd4>\n    87f9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    87fe:\t48 8b 00             \tmov    (%rax),%rax\n    8801:\t8b 00                \tmov    (%rax),%eax\n    8803:\t83 e8 01             \tsub    $0x1,%eax\n    8806:\t83 f8 01             \tcmp    $0x1,%eax\n    8809:\t77 1d                \tja     8828 <expr_eliminate_eq+0x5d>\n    880b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8810:\t48 8b 00             \tmov    (%rax),%rax\n    8813:\t8b 00                \tmov    (%rax),%eax\n    8815:\t48 8b 14 24          \tmov    (%rsp),%rdx\n    8819:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    881e:\t48 89 ce             \tmov    %rcx,%rsi\n    8821:\t89 c7                \tmov    %eax,%edi\n    8823:\te8 c9 fd ff ff       \tcallq  85f1 <__expr_eliminate_eq>\n    8828:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    882d:\t48 8b 00             \tmov    (%rax),%rax\n    8830:\t8b 10                \tmov    (%rax),%edx\n    8832:\t48 8b 04 24          \tmov    (%rsp),%rax\n    8836:\t48 8b 00             \tmov    (%rax),%rax\n    8839:\t8b 00                \tmov    (%rax),%eax\n    883b:\t39 c2                \tcmp    %eax,%edx\n    883d:\t74 2f                \tje     886e <expr_eliminate_eq+0xa3>\n    883f:\t48 8b 04 24          \tmov    (%rsp),%rax\n    8843:\t48 8b 00             \tmov    (%rax),%rax\n    8846:\t8b 00                \tmov    (%rax),%eax\n    8848:\t83 e8 01             \tsub    $0x1,%eax\n    884b:\t83 f8 01             \tcmp    $0x1,%eax\n    884e:\t77 1f                \tja     886f <expr_eliminate_eq+0xa4>\n    8850:\t48 8b 04 24          \tmov    (%rsp),%rax\n    8854:\t48 8b 00             \tmov    (%rax),%rax\n    8857:\t8b 00                \tmov    (%rax),%eax\n    8859:\t48 8b 14 24          \tmov    (%rsp),%rdx\n    885d:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    8862:\t48 89 ce             \tmov    %rcx,%rsi\n    8865:\t89 c7                \tmov    %eax,%edi\n    8867:\te8 85 fd ff ff       \tcallq  85f1 <__expr_eliminate_eq>\n    886c:\teb 01                \tjmp    886f <expr_eliminate_eq+0xa4>\n    886e:\t90                   \tnop\n    886f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8874:\t48 8b 00             \tmov    (%rax),%rax\n    8877:\t48 89 c7             \tmov    %rax,%rdi\n    887a:\te8 00 00 00 00       \tcallq  887f <expr_eliminate_eq+0xb4>\n    887f:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n    8884:\t48 89 02             \tmov    %rax,(%rdx)\n    8887:\t48 8b 04 24          \tmov    (%rsp),%rax\n    888b:\t48 8b 00             \tmov    (%rax),%rax\n    888e:\t48 89 c7             \tmov    %rax,%rdi\n    8891:\te8 00 00 00 00       \tcallq  8896 <expr_eliminate_eq+0xcb>\n    8896:\t48 8b 14 24          \tmov    (%rsp),%rdx\n    889a:\t48 89 02             \tmov    %rax,(%rdx)\n    889d:\teb 01                \tjmp    88a0 <expr_eliminate_eq+0xd5>\n    889f:\t90                   \tnop\n    88a0:\t48 83 c4 18          \tadd    $0x18,%rsp\n    88a4:\tc3                   \tretq   ", "code_s": "unsigned int *__fastcall expr_eliminate_eq(unsigned int **<span class=\"supfact\">a1</span>,\n                                           unsigned int **<span class=\"supfact\">a2</span>) {\n  unsigned int *<span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = *<span class=\"supfact\">a1</span>;\n  if (*<span class=\"supfact\">a1</span>) {\n    <span class=\"supfact\">result</span> = *<span class=\"supfact\">a2</span>;\n    if (*<span class=\"supfact\">a2</span>) {\n      if (**<span class=\"supfact\">a1</span> - Number <= Number)\n        _expr_eliminate_eq(**<span class=\"supfact\">a1</span>, <span class=\"supfact\">a1</span>,\n                           <span class=\"supfact\">a2</span>);\n      if (**<span class=\"supfact\">a1</span> != **<span class=\"supfact\">a2</span> &&\n          **<span class=\"supfact\">a2</span> - Number <= Number)\n        _expr_eliminate_eq(**<span class=\"supfact\">a2</span>, <span class=\"supfact\">a1</span>,\n                           <span class=\"supfact\">a2</span>);\n      *<span class=\"supfact\">a1</span> =\n          (unsigned int *)expr_eliminate_yn(*<span class=\"supfact\">a1</span>);\n      <span class=\"supfact\">result</span> =\n          (unsigned int *)expr_eliminate_yn(*<span class=\"supfact\">a2</span>);\n      *<span class=\"supfact\">a2</span> = <span class=\"supfact\">result</span>;\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl expr_eliminate_eq(expr **<span class=\"supfact\">ep1</span>,\n                               expr **<span class=\"supfact\">ep2</span>) {\n  if (*<span class=\"supfact\">ep1</span> && *<span class=\"supfact\">ep2</span>) {\n    if ((unsigned int)((*<span class=\"supfact\">ep1</span>)->type - Number) <= Number)\n      _expr_eliminate_eq((*<span class=\"supfact\">ep1</span>)->type, <span class=\"supfact\">ep1</span>,\n                         <span class=\"supfact\">ep2</span>);\n    if ((*<span class=\"supfact\">ep1</span>)->type != (*<span class=\"supfact\">ep2</span>)->type &&\n        (unsigned int)((*<span class=\"supfact\">ep2</span>)->type - Number) <= Number)\n      _expr_eliminate_eq((*<span class=\"supfact\">ep2</span>)->type, <span class=\"supfact\">ep1</span>,\n                         <span class=\"supfact\">ep2</span>);\n    *<span class=\"supfact\">ep1</span> = expr_eliminate_yn(*<span class=\"supfact\">ep1</span>);\n    *<span class=\"supfact\">ep2</span> = expr_eliminate_yn(*<span class=\"supfact\">ep2</span>);\n  }\n}", "var": [{"name": "a1", "type": "expr * *", "pred_name": "ep1", "ref_name": "ep1", "ref_type": "expr * *"}, {"name": "a2", "type": "expr * *", "pred_name": "ep2", "ref_name": "ep2", "ref_type": "expr * *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "BlastarIndia", "repo_name": "Blastarix", "path": "BlastarIndia/Blastarix/e7cfbafe5fae40e9c3445a9e72d650b811a5ef3627bfdb4a71fb6700f2ca7d63", "path_in_repo": "BlastarIndia/Blastarix/qemu-1.7.0/ui/sdl.o", "objdump": "00000000000005b1 <check_for_evdev>:\n     5b1:\t55                   \tpush   %rbp\n     5b2:\t48 89 e5             \tmov    %rsp,%rbp\n     5b5:\t48 83 ec 70          \tsub    $0x70,%rsp\n     5b9:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     5c0:\t00 00 \n     5c2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     5c6:\t31 c0                \txor    %eax,%eax\n     5c8:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n     5cf:\t00 \n     5d0:\tc7 45 9c 00 00 00 00 \tmovl   $0x0,-0x64(%rbp)\n     5d7:\t48 c7 45 a0 00 00 00 \tmovq   $0x0,-0x60(%rbp)\n     5de:\t00 \n     5df:\tc6 45 b0 01          \tmovb   $0x1,-0x50(%rbp)\n     5e3:\tc6 45 b1 02          \tmovb   $0x2,-0x4f(%rbp)\n     5e7:\tc6 45 b2 0f          \tmovb   $0xf,-0x4e(%rbp)\n     5eb:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     5ef:\t48 89 c7             \tmov    %rax,%rdi\n     5f2:\te8 00 00 00 00       \tcallq  5f7 <check_for_evdev+0x46>\n     5f7:\t85 c0                \ttest   %eax,%eax\n     5f9:\t75 0a                \tjne    605 <check_for_evdev+0x54>\n     5fb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     600:\te9 10 01 00 00       \tjmpq   715 <check_for_evdev+0x164>\n     605:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     609:\tba 00 01 00 00       \tmov    $0x100,%edx\n     60e:\tbe ff 00 00 00       \tmov    $0xff,%esi\n     613:\t48 89 c7             \tmov    %rax,%rdi\n     616:\te8 00 00 00 00       \tcallq  61b <check_for_evdev+0x6a>\n     61b:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n     61f:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n     624:\t0f 84 b8 00 00 00    \tje     6e2 <check_for_evdev+0x131>\n     62a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     62e:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     632:\t48 85 c0             \ttest   %rax,%rax\n     635:\t0f 84 a7 00 00 00    \tje     6e2 <check_for_evdev+0x131>\n     63b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     63f:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     643:\t48 8b 10             \tmov    (%rax),%rdx\n     646:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     64a:\t48 89 d6             \tmov    %rdx,%rsi\n     64d:\t48 89 c7             \tmov    %rax,%rdi\n     650:\te8 00 00 00 00       \tcallq  655 <check_for_evdev+0xa4>\n     655:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n     659:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n     65e:\t75 22                \tjne    682 <check_for_evdev+0xd1>\n     660:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 667 <check_for_evdev+0xb6>\n     667:\t48 89 c1             \tmov    %rax,%rcx\n     66a:\tba 1e 00 00 00       \tmov    $0x1e,%edx\n     66f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     674:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 67b <check_for_evdev+0xca>\n     67b:\te8 00 00 00 00       \tcallq  680 <check_for_evdev+0xcf>\n     680:\teb 60                \tjmp    6e2 <check_for_evdev+0x131>\n     682:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     686:\tba 00 00 00 00       \tmov    $0x0,%edx\n     68b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 692 <check_for_evdev+0xe1>\n     692:\t48 89 c7             \tmov    %rax,%rdi\n     695:\te8 00 00 00 00       \tcallq  69a <check_for_evdev+0xe9>\n     69a:\t85 c0                \ttest   %eax,%eax\n     69c:\t74 09                \tje     6a7 <check_for_evdev+0xf6>\n     69e:\tc7 45 9c 01 00 00 00 \tmovl   $0x1,-0x64(%rbp)\n     6a5:\teb 3b                \tjmp    6e2 <check_for_evdev+0x131>\n     6a7:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     6ab:\tba 00 00 00 00       \tmov    $0x0,%edx\n     6b0:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6b7 <check_for_evdev+0x106>\n     6b7:\t48 89 c7             \tmov    %rax,%rdi\n     6ba:\te8 00 00 00 00       \tcallq  6bf <check_for_evdev+0x10e>\n     6bf:\t85 c0                \ttest   %eax,%eax\n     6c1:\t75 1f                \tjne    6e2 <check_for_evdev+0x131>\n     6c3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6ca <check_for_evdev+0x119>\n     6ca:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n     6ce:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6d5 <check_for_evdev+0x124>\n     6d5:\t48 89 c7             \tmov    %rax,%rdi\n     6d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6dd:\te8 00 00 00 00       \tcallq  6e2 <check_for_evdev+0x131>\n     6e2:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n     6e7:\t74 16                \tje     6ff <check_for_evdev+0x14e>\n     6e9:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     6ed:\tba 01 00 00 00       \tmov    $0x1,%edx\n     6f2:\tbe ff 00 00 00       \tmov    $0xff,%esi\n     6f7:\t48 89 c7             \tmov    %rax,%rdi\n     6fa:\te8 00 00 00 00       \tcallq  6ff <check_for_evdev+0x14e>\n     6ff:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n     704:\t74 0c                \tje     712 <check_for_evdev+0x161>\n     706:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     70a:\t48 89 c7             \tmov    %rax,%rdi\n     70d:\te8 00 00 00 00       \tcallq  712 <check_for_evdev+0x161>\n     712:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n     715:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     719:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     720:\t00 00 \n     722:\t74 05                \tje     729 <check_for_evdev+0x178>\n     724:\te8 00 00 00 00       \tcallq  729 <check_for_evdev+0x178>\n     729:\tc9                   \tleaveq \n     72a:\tc3                   \tretq   ", "code_s": "__int64 check_for_evdev() {\n  unsigned int <span class=\"supfact\">v1</span>;\n  char *<span class=\"supfact\">v2</span>;\n  XkbDescPtr <span class=\"supfact\">v3</span>;\n  char <span class=\"supfact\">v4</span>[Number];\n  Display *<span class=\"supfact\">v5</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  <span class=\"supfact\">v1</span> = Number;\n  <span class=\"supfact\">v2</span> = Number L;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  if (!(unsigned int)SDL_GetWMInfo(<span class=\"supfact\">v4</span>))\n    return Number L;\n  <span class=\"supfact\">v3</span> = XkbGetKeyboard(<span class=\"supfact\">v5</span>, Number, Number);\n  if (<span class=\"supfact\">v3</span> && <span class=\"supfact\">v3</span>->names) {\n    <span class=\"supfact\">v2</span> =\n        XGetAtomName(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v3</span>->names->keycodes);\n    if (<span class=\"supfact\">v2</span>) {\n      if ((unsigned int)strstart(<span class=\"supfact\">v2</span>, String, Number L)) {\n        <span class=\"supfact\">v1</span> = Number;\n      } else if (!(unsigned int)strstart(<span class=\"supfact\">v2</span>, String,\n                                         Number L)) {\n        fprintf(stderr, String, <span class=\"supfact\">v2</span>);\n      }\n    } else {\n      fwrite(String, Number, Number, stderr);\n    }\n  }\n  if (<span class=\"supfact\">v3</span>)\n    XkbFreeKeyboard(<span class=\"supfact\">v3</span>, Number, Number);\n  if (<span class=\"supfact\">v2</span>)\n    XFree(<span class=\"supfact\">v2</span>);\n  return <span class=\"supfact\">v1</span>;\n}", "code_t": "int __cdecl check_for_evdev() {\n  int <span class=\"supfact\">has_evdev</span>;\n  char *<span class=\"supfact\">keycodes</span>;\n  XkbDescPtr <span class=\"supfact\">desc</span>;\n  SDL_SysWMinfo_0 <span class=\"supfact\">info</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  <span class=\"supfact\">has_evdev</span> = Number;\n  <span class=\"supfact\">keycodes</span> = Number L;\n  <span class=\"supfact\">info</span>.version.major = Number;\n  <span class=\"supfact\">info</span>.version.minor = Number;\n  <span class=\"supfact\">info</span>.version.patch = Number;\n  if (!(unsigned int)SDL_GetWMInfo(&<span class=\"supfact\">info</span>))\n    return Number;\n  <span class=\"supfact\">desc</span> = XkbGetKeyboard(\n      <span class=\"supfact\">info</span>.<span class=\"supfact\">info</span>.x11.display, Number, Number);\n  if (<span class=\"supfact\">desc</span> && <span class=\"supfact\">desc</span>->names) {\n    <span class=\"supfact\">keycodes</span> =\n        XGetAtomName(<span class=\"supfact\">info</span>.<span class=\"supfact\">info</span>.x11.display,\n                     <span class=\"supfact\">desc</span>->names-><span class=\"supfact\">keycodes</span>);\n    if (<span class=\"supfact\">keycodes</span>) {\n      if ((unsigned int)strstart(<span class=\"supfact\">keycodes</span>, String, Number L)) {\n        <span class=\"supfact\">has_evdev</span> = Number;\n      } else if (!(unsigned int)strstart(<span class=\"supfact\">keycodes</span>, String,\n                                         Number L)) {\n        fprintf(stderr, String, <span class=\"supfact\">keycodes</span>);\n      }\n    } else {\n      fwrite(String, Number, Number, stderr);\n    }\n  }\n  if (<span class=\"supfact\">desc</span>)\n    XkbFreeKeyboard(<span class=\"supfact\">desc</span>, Number, Number);\n  if (<span class=\"supfact\">keycodes</span>)\n    XFree(<span class=\"supfact\">keycodes</span>);\n  return <span class=\"supfact\">has_evdev</span>;\n}", "var": [{"name": "v1", "type": "int", "pred_name": "has_evdev", "ref_name": "has_evdev", "ref_type": "int"}, {"name": "v2", "type": "char *", "pred_name": "keycodes", "ref_name": "keycodes", "ref_type": "char *"}, {"name": "v3", "type": "XkbDescPtr", "pred_name": "desc", "ref_name": "desc", "ref_type": "XkbDescPtr"}, {"name": "v4", "type": "struct SDL_SysWMinfo_0 { SDL_version_0 version; PADDING (1); SDL_SYSWM_TYPE subsystem; $ADE5B86C5B8392B4C2F70FC09CD8F506 info; }", "pred_name": "info", "ref_name": "info", "ref_type": "struct SDL_SysWMinfo_0 { SDL_version_0 version; PADDING (1); SDL_SYSWM_TYPE subsystem; $ADE5B86C5B8392B4C2F70FC09CD8F506 info; }"}, {"name": "v5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "unsigned __int64", "pred_name": "v5", "ref_name": "v5", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "revast", "repo_name": "dvj", "path": "revast/dvj/9d740b9192cdd2aabfc0ff916aa0a90dd8701c25cc2d30b04fb1073533f12bb7", "path_in_repo": "revast/dvj/dep/src/ffmpeg/libavcodec/msmpeg4.o", "objdump": "0000000000007098 <msmpeg4_decode_ext_header>:\n    7098:\t53                   \tpush   %rbx\n    7099:\t48 83 ec 20          \tsub    $0x20,%rsp\n    709d:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    70a2:\t89 74 24 04          \tmov    %esi,0x4(%rsp)\n    70a6:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n    70aa:\t8d 1c c5 00 00 00 00 \tlea    0x0(,%rax,8),%ebx\n    70b1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    70b6:\t48 05 00 3d 00 00    \tadd    $0x3d00,%rax\n    70bc:\t48 89 c7             \tmov    %rax,%rdi\n    70bf:\te8 84 8f ff ff       \tcallq  48 <get_bits_count>\n    70c4:\t29 c3                \tsub    %eax,%ebx\n    70c6:\t89 d8                \tmov    %ebx,%eax\n    70c8:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n    70cc:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    70d1:\t8b 80 e0 3c 00 00    \tmov    0x3ce0(%rax),%eax\n    70d7:\t83 f8 02             \tcmp    $0x2,%eax\n    70da:\t7e 07                \tjle    70e3 <msmpeg4_decode_ext_header+0x4b>\n    70dc:\tb8 11 00 00 00       \tmov    $0x11,%eax\n    70e1:\teb 05                \tjmp    70e8 <msmpeg4_decode_ext_header+0x50>\n    70e3:\tb8 10 00 00 00       \tmov    $0x10,%eax\n    70e8:\t89 44 24 18          \tmov    %eax,0x18(%rsp)\n    70ec:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    70f0:\t3b 44 24 18          \tcmp    0x18(%rsp),%eax\n    70f4:\t0f 8c 98 00 00 00    \tjl     7192 <msmpeg4_decode_ext_header+0xfa>\n    70fa:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    70fe:\t83 c0 07             \tadd    $0x7,%eax\n    7101:\t39 44 24 1c          \tcmp    %eax,0x1c(%rsp)\n    7105:\t0f 8f 87 00 00 00    \tjg     7192 <msmpeg4_decode_ext_header+0xfa>\n    710b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7110:\t48 05 00 3d 00 00    \tadd    $0x3d00,%rax\n    7116:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    711b:\t48 89 c7             \tmov    %rax,%rdi\n    711e:\te8 33 8f ff ff       \tcallq  56 <get_bits>\n    7123:\t89 44 24 14          \tmov    %eax,0x14(%rsp)\n    7127:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    712c:\t48 05 00 3d 00 00    \tadd    $0x3d00,%rax\n    7132:\tbe 0b 00 00 00       \tmov    $0xb,%esi\n    7137:\t48 89 c7             \tmov    %rax,%rdi\n    713a:\te8 17 8f ff ff       \tcallq  56 <get_bits>\n    713f:\tc1 e0 0a             \tshl    $0xa,%eax\n    7142:\t89 c2                \tmov    %eax,%edx\n    7144:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7149:\t89 50 18             \tmov    %edx,0x18(%rax)\n    714c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7151:\t8b 80 e0 3c 00 00    \tmov    0x3ce0(%rax),%eax\n    7157:\t83 f8 02             \tcmp    $0x2,%eax\n    715a:\t7e 25                \tjle    7181 <msmpeg4_decode_ext_header+0xe9>\n    715c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7161:\t48 05 00 3d 00 00    \tadd    $0x3d00,%rax\n    7167:\t48 89 c7             \tmov    %rax,%rdi\n    716a:\te8 e0 8f ff ff       \tcallq  14f <get_bits1>\n    716f:\t89 c2                \tmov    %eax,%edx\n    7171:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7176:\t89 90 dc 3c 00 00    \tmov    %edx,0x3cdc(%rax)\n    717c:\te9 83 00 00 00       \tjmpq   7204 <msmpeg4_decode_ext_header+0x16c>\n    7181:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7186:\tc7 80 dc 3c 00 00 00 \tmovl   $0x0,0x3cdc(%rax)\n    718d:\t00 00 00 \n    7190:\teb 72                \tjmp    7204 <msmpeg4_decode_ext_header+0x16c>\n    7192:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    7196:\t83 c0 07             \tadd    $0x7,%eax\n    7199:\t39 44 24 1c          \tcmp    %eax,0x1c(%rsp)\n    719d:\t7f 46                \tjg     71e5 <msmpeg4_decode_ext_header+0x14d>\n    719f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    71a4:\tc7 80 dc 3c 00 00 00 \tmovl   $0x0,0x3cdc(%rax)\n    71ab:\t00 00 00 \n    71ae:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    71b3:\t8b 80 e0 3c 00 00    \tmov    0x3ce0(%rax),%eax\n    71b9:\t83 f8 02             \tcmp    $0x2,%eax\n    71bc:\t74 46                \tje     7204 <msmpeg4_decode_ext_header+0x16c>\n    71be:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    71c3:\t48 8b 00             \tmov    (%rax),%rax\n    71c6:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n    71ca:\t89 d1                \tmov    %edx,%ecx\n    71cc:\tba 00 00 00 00       \tmov    $0x0,%edx\n    71d1:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    71d6:\t48 89 c7             \tmov    %rax,%rdi\n    71d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    71de:\te8 00 00 00 00       \tcallq  71e3 <msmpeg4_decode_ext_header+0x14b>\n    71e3:\teb 1f                \tjmp    7204 <msmpeg4_decode_ext_header+0x16c>\n    71e5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    71ea:\t48 8b 00             \tmov    (%rax),%rax\n    71ed:\tba 00 00 00 00       \tmov    $0x0,%edx\n    71f2:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    71f7:\t48 89 c7             \tmov    %rax,%rdi\n    71fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    71ff:\te8 00 00 00 00       \tcallq  7204 <msmpeg4_decode_ext_header+0x16c>\n    7204:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7209:\t48 83 c4 20          \tadd    $0x20,%rsp\n    720d:\t5b                   \tpop    %rbx\n    720e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall msmpeg4_decode_ext_header(__int64 <span class=\"supfact\">a1</span>,\n                                             int <span class=\"supfact\">a2</span>) {\n  int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> =\n      Number * <span class=\"supfact\">a2</span> - get_bits_count(<span class=\"supfact\">a1</span> + Number);\n  if (*(int *)(<span class=\"supfact\">a1</span> + Number) <= Number)\n    <span class=\"supfact\">v2</span> = Number;\n  else\n    <span class=\"supfact\">v2</span> = Number;\n  if (<span class=\"supfact\">v4</span> < <span class=\"supfact\">v2</span> ||\n      <span class=\"supfact\">v4</span> > <span class=\"supfact\">v2</span> + Number) {\n    if (<span class=\"supfact\">v4</span> > <span class=\"supfact\">v2</span> + Number) {\n      av_log(*(_QWORD *)<span class=\"supfact\">a1</span>, Number L, String);\n    } else {\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n      if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) != Number)\n        av_log(*(_QWORD *)<span class=\"supfact\">a1</span>, Number L, String,\n               (unsigned int)<span class=\"supfact\">v4</span>);\n    }\n  } else {\n    get_bits(<span class=\"supfact\">a1</span> + Number, Number);\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n        (unsigned int)get_bits(<span class=\"supfact\">a1</span> + Number, Number) << Number;\n    if (*(int *)(<span class=\"supfact\">a1</span> + Number) <= Number)\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n    else\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n          get_bits1(<span class=\"supfact\">a1</span> + Number);\n  }\n  return Number L;\n}", "code_t": "int __cdecl msmpeg4_decode_ext_header(MpegEncContext_0 *<span class=\"supfact\">s</span>,\n                                      int <span class=\"supfact\">buf_size</span>) {\n  int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">left</span>;\n  <span class=\"supfact\">left</span> = Number * <span class=\"supfact\">buf_size</span> -\n                         get_bits_count(&<span class=\"supfact\">s</span>->gb);\n  if (<span class=\"supfact\">s</span>->msmpeg4_version <= Number)\n    <span class=\"supfact\">v2</span> = Number;\n  else\n    <span class=\"supfact\">v2</span> = Number;\n  if (<span class=\"supfact\">left</span> < <span class=\"supfact\">v2</span> ||\n      <span class=\"supfact\">left</span> > <span class=\"supfact\">v2</span> + Number) {\n    if (<span class=\"supfact\">left</span> > <span class=\"supfact\">v2</span> + Number) {\n      av_log(<span class=\"supfact\">s</span>->avctx, Number L, String);\n    } else {\n      <span class=\"supfact\">s</span>->flipflop_rounding = Number;\n      if (<span class=\"supfact\">s</span>->msmpeg4_version != Number)\n        av_log(<span class=\"supfact\">s</span>->avctx, Number L, String,\n               (unsigned int)<span class=\"supfact\">left</span>);\n    }\n  } else {\n    get_bits(&<span class=\"supfact\">s</span>->gb, Number);\n    <span class=\"supfact\">s</span>->bit_rate = get_bits(&<span class=\"supfact\">s</span>->gb, Number)\n                                  << Number;\n    if (<span class=\"supfact\">s</span>->msmpeg4_version <= Number)\n      <span class=\"supfact\">s</span>->flipflop_rounding = Number;\n    else\n      <span class=\"supfact\">s</span>->flipflop_rounding = get_bits1(&<span class=\"supfact\">s</span>->gb);\n  }\n  return Number;\n}", "var": [{"name": "a1", "type": "MpegEncContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "MpegEncContext_0 *"}, {"name": "a2", "type": "int", "pred_name": "buf_size", "ref_name": "buf_size", "ref_type": "int"}, {"name": "v2", "type": "int", "pred_name": "v2", "ref_name": "v2", "ref_type": "int"}, {"name": "v4", "type": "int", "pred_name": "left", "ref_name": "left", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "lipeiran", "repo_name": "PR_FFmpeg", "path": "lipeiran/PR_FFmpeg/bd33fee69a4bf0482a3d8a581b678f9e5800424792fd282cb68632456a9fb277", "path_in_repo": "lipeiran/PR_FFmpeg/ffmpeg/libavfilter/af_replaygain.o", "objdump": "0000000000001592 <filter_frame>:\n    1592:\t48 83 ec 48          \tsub    $0x48,%rsp\n    1596:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    159b:\t48 89 34 24          \tmov    %rsi,(%rsp)\n    159f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    15a4:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    15a8:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    15ad:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    15b2:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    15b6:\t48 8b 00             \tmov    (%rax),%rax\n    15b9:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n    15be:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    15c3:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    15c7:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n    15cc:\t48 8b 04 24          \tmov    (%rsp),%rax\n    15d0:\t8b 50 70             \tmov    0x70(%rax),%edx\n    15d3:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    15d8:\t89 d6                \tmov    %edx,%esi\n    15da:\t48 89 c7             \tmov    %rax,%rdi\n    15dd:\te8 00 00 00 00       \tcallq  15e2 <filter_frame+0x50>\n    15e2:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n    15e7:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    15ec:\t48 85 c0             \ttest   %rax,%rax\n    15ef:\t75 15                \tjne    1606 <filter_frame+0x74>\n    15f1:\t48 89 e0             \tmov    %rsp,%rax\n    15f4:\t48 89 c7             \tmov    %rax,%rdi\n    15f7:\te8 00 00 00 00       \tcallq  15fc <filter_frame+0x6a>\n    15fc:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    1601:\te9 18 01 00 00       \tjmpq   171e <filter_frame+0x18c>\n    1606:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    160b:\t48 8d 90 80 bb 00 00 \tlea    0xbb80(%rax),%rdx\n    1612:\t48 8b 04 24          \tmov    (%rsp),%rax\n    1616:\t8b 48 70             \tmov    0x70(%rax),%ecx\n    1619:\t48 8b 04 24          \tmov    (%rsp),%rax\n    161d:\t48 8b 00             \tmov    (%rax),%rax\n    1620:\t89 ce                \tmov    %ecx,%esi\n    1622:\t48 89 c7             \tmov    %rax,%rdi\n    1625:\te8 91 ec ff ff       \tcallq  2bb <calc_stereo_peak>\n    162a:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    162f:\t8b 48 70             \tmov    0x70(%rax),%ecx\n    1632:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1637:\t48 8b 10             \tmov    (%rax),%rdx\n    163a:\t48 8b 04 24          \tmov    (%rsp),%rax\n    163e:\t48 8b 30             \tmov    (%rax),%rsi\n    1641:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1646:\t48 89 c7             \tmov    %rax,%rdi\n    1649:\te8 b1 f2 ff ff       \tcallq  8ff <yule_filter_stereo_samples>\n    164e:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1653:\t8b 50 70             \tmov    0x70(%rax),%edx\n    1656:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    165b:\t48 8b 08             \tmov    (%rax),%rcx\n    165e:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1663:\t48 89 ce             \tmov    %rcx,%rsi\n    1666:\t48 89 c7             \tmov    %rax,%rdi\n    1669:\te8 30 ee ff ff       \tcallq  49e <butter_filter_stereo_samples>\n    166e:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1673:\t8b 50 70             \tmov    0x70(%rax),%edx\n    1676:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    167b:\t48 8b 00             \tmov    (%rax),%rax\n    167e:\t89 d6                \tmov    %edx,%esi\n    1680:\t48 89 c7             \tmov    %rax,%rdi\n    1683:\te8 52 ed ff ff       \tcallq  3da <calc_stereo_rms>\n    1688:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 1690 <filter_frame+0xfe>\n    168f:\t00 \n    1690:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n    1694:\te8 00 00 00 00       \tcallq  1699 <filter_frame+0x107>\n    1699:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n    169e:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n    16a2:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n    16a6:\t89 44 24 20          \tmov    %eax,0x20(%rsp)\n    16aa:\tc7 44 24 1c 00 00 00 \tmovl   $0x0,0x1c(%rsp)\n    16b1:\t00 \n    16b2:\tc7 44 24 18 df 2e 00 \tmovl   $0x2edf,0x18(%rsp)\n    16b9:\t00 \n    16ba:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n    16be:\t3b 44 24 1c          \tcmp    0x1c(%rsp),%eax\n    16c2:\t7d 06                \tjge    16ca <filter_frame+0x138>\n    16c4:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    16c8:\teb 14                \tjmp    16de <filter_frame+0x14c>\n    16ca:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n    16ce:\t3b 44 24 18          \tcmp    0x18(%rsp),%eax\n    16d2:\t7e 06                \tjle    16da <filter_frame+0x148>\n    16d4:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    16d8:\teb 04                \tjmp    16de <filter_frame+0x14c>\n    16da:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n    16de:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n    16e2:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    16e7:\t8b 54 24 24          \tmov    0x24(%rsp),%edx\n    16eb:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    16ee:\t8d 48 01             \tlea    0x1(%rax),%ecx\n    16f1:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    16f6:\t8b 54 24 24          \tmov    0x24(%rsp),%edx\n    16fa:\t89 0c 90             \tmov    %ecx,(%rax,%rdx,4)\n    16fd:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n    1702:\t48 89 c7             \tmov    %rax,%rdi\n    1705:\te8 00 00 00 00       \tcallq  170a <filter_frame+0x178>\n    170a:\t48 8b 14 24          \tmov    (%rsp),%rdx\n    170e:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    1713:\t48 89 d6             \tmov    %rdx,%rsi\n    1716:\t48 89 c7             \tmov    %rax,%rdi\n    1719:\te8 00 00 00 00       \tcallq  171e <filter_frame+0x18c>\n    171e:\t48 83 c4 48          \tadd    $0x48,%rsp\n    1722:\tc3                   \tretq   ", "code_s": "__int64 __fastcall filter_frame(__int64 <span class=\"supfact\">a1</span>,\n                                __int64 <span class=\"supfact\">a2</span>) {\n  __int64 result;\n  double <span class=\"supfact\">v3</span>;\n  unsigned int v4;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v5</span>[Number] = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v5</span>[Number] = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v13</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v12</span> = **(_QWORD **)(<span class=\"supfact\">v13</span> + Number);\n  <span class=\"supfact\">v11</span> = *(_QWORD *)(<span class=\"supfact\">v13</span> + Number);\n  <span class=\"supfact\">v6</span> = ff_get_audio_buffer(\n      <span class=\"supfact\">v12</span>, *(unsigned int *)(<span class=\"supfact\">a2</span> + Number));\n  if (<span class=\"supfact\">v6</span>) {\n    calc_stereo_peak(*(float **)<span class=\"supfact\">v5</span>[Number],\n                     *(_DWORD *)(<span class=\"supfact\">v5</span>[Number] + Number),\n                     (float *)(<span class=\"supfact\">v11</span> + Number));\n    yule_filter_stereo_samples(<span class=\"supfact\">v11</span>,\n                               *(float **)<span class=\"supfact\">v5</span>[Number],\n                               *(_DWORD **)<span class=\"supfact\">v6</span>,\n                               *(_DWORD *)(<span class=\"supfact\">v6</span> + Number));\n    butter_filter_stereo_samples(<span class=\"supfact\">v11</span>,\n                                 *(float **)<span class=\"supfact\">v6</span>,\n                                 *(_DWORD *)(<span class=\"supfact\">v6</span> + Number));\n    <span class=\"supfact\">v3</span> =\n        calc_stereo_rms(*(float **)<span class=\"supfact\">v6</span>,\n                        *(_DWORD *)(<span class=\"supfact\">v6</span> + Number));\n    <span class=\"supfact\">v9</span> = (int)floor(<span class=\"supfact\">v3</span> * Number);\n    <span class=\"supfact\">v8</span> = Number;\n    <span class=\"supfact\">v7</span> = Number;\n    if (<span class=\"supfact\">v9</span> >= Number) {\n      if (<span class=\"supfact\">v9</span> <= <span class=\"supfact\">v7</span>)\n        v4 = <span class=\"supfact\">v9</span>;\n      else\n        v4 = <span class=\"supfact\">v7</span>;\n    } else {\n      v4 = <span class=\"supfact\">v8</span>;\n    }\n    <span class=\"supfact\">v10</span> = v4;\n    ++*(_DWORD *)(<span class=\"supfact\">v11</span> + Number L * v4);\n    av_frame_free(&<span class=\"supfact\">v6</span>);\n    result = ff_filter_frame(<span class=\"supfact\">v12</span>, <span class=\"supfact\">v5</span>[Number]);\n  } else {\n    av_frame_free(<span class=\"supfact\">v5</span>);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl filter_frame(AVFilterLink_0 *<span class=\"supfact\">inlink</span>,\n                         AVFrame_0 *<span class=\"supfact\">in</span>) {\n  int result;\n  double <span class=\"supfact\">v3</span>;\n  uint32_t v4;\n  AVFrame_0 *<span class=\"supfact\">ina</span>;\n  AVFilterLink_0 *inlinka;\n  AVFrame_0 *<span class=\"supfact\">out</span>;\n  int <span class=\"supfact\">v8</span>;\n  uint32_t <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  uint32_t <span class=\"supfact\">level</span>;\n  ReplayGainContext_0 *<span class=\"supfact\">s</span>;\n  AVFilterLink_0 *<span class=\"supfact\">outlink</span>;\n  AVFilterContext_0 *<span class=\"supfact\">ctx</span>;\n  inlinka = <span class=\"supfact\">inlink</span>;\n  <span class=\"supfact\">ina</span> = <span class=\"supfact\">in</span>;\n  <span class=\"supfact\">ctx</span> = <span class=\"supfact\">inlink</span>->dst;\n  <span class=\"supfact\">outlink</span> = *<span class=\"supfact\">ctx</span>->outputs;\n  <span class=\"supfact\">s</span> = (ReplayGainContext_0 *)<span class=\"supfact\">ctx</span>->priv;\n  <span class=\"supfact\">out</span> = (AVFrame_0 *)ff_get_audio_buffer(\n      <span class=\"supfact\">outlink</span>, (unsigned int)<span class=\"supfact\">in</span>->nb_samples);\n  if (<span class=\"supfact\">out</span>) {\n    calc_stereo_peak((const float *)<span class=\"supfact\">ina</span>->data[Number],\n                     <span class=\"supfact\">ina</span>->nb_samples, &<span class=\"supfact\">s</span>->peak);\n    yule_filter_stereo_samples(<span class=\"supfact\">s</span>,\n                               (const float *)<span class=\"supfact\">ina</span>->data[Number],\n                               (float *)<span class=\"supfact\">out</span>->data[Number],\n                               <span class=\"supfact\">out</span>->nb_samples);\n    butter_filter_stereo_samples(<span class=\"supfact\">s</span>,\n                                 (float *)<span class=\"supfact\">out</span>->data[Number],\n                                 <span class=\"supfact\">out</span>->nb_samples);\n    <span class=\"supfact\">v3</span> =\n        calc_stereo_rms((const float *)<span class=\"supfact\">out</span>->data[Number],\n                        <span class=\"supfact\">out</span>->nb_samples);\n    <span class=\"supfact\">v10</span> = (int)floor(<span class=\"supfact\">v3</span> * Number);\n    <span class=\"supfact\">v9</span> = Number;\n    <span class=\"supfact\">v8</span> = Number;\n    if (<span class=\"supfact\">v10</span> >= Number) {\n      if (<span class=\"supfact\">v10</span> <= <span class=\"supfact\">v8</span>)\n        v4 = <span class=\"supfact\">v10</span>;\n      else\n        v4 = <span class=\"supfact\">v8</span>;\n    } else {\n      v4 = <span class=\"supfact\">v9</span>;\n    }\n    <span class=\"supfact\">level</span> = v4;\n    ++<span class=\"supfact\">s</span>->histogram[v4];\n    av_frame_free(&<span class=\"supfact\">out</span>);\n    result = ff_filter_frame(<span class=\"supfact\">outlink</span>, <span class=\"supfact\">ina</span>);\n  } else {\n    av_frame_free(&<span class=\"supfact\">ina</span>);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "AVFilterLink_0 *", "pred_name": "inlink", "ref_name": "inlink", "ref_type": "AVFilterLink_0 *"}, {"name": "a2", "type": "AVFrame_0 *", "pred_name": "in", "ref_name": "in", "ref_type": "AVFrame_0 *"}, {"name": "v3", "type": "double", "pred_name": "v3", "ref_name": "v3", "ref_type": "double"}, {"name": "v5", "type": "AVFrame_0 *", "pred_name": "ina", "ref_name": "ina", "ref_type": "AVFrame_0 *"}, {"name": "v6", "type": "AVFrame_0 *", "pred_name": "out", "ref_name": "out", "ref_type": "AVFrame_0 *"}, {"name": "v7", "type": "int", "pred_name": "v8", "ref_name": "v8", "ref_type": "int"}, {"name": "v8", "type": "uint32_t", "pred_name": "v9", "ref_name": "v9", "ref_type": "uint32_t"}, {"name": "v9", "type": "int", "pred_name": "v10", "ref_name": "v10", "ref_type": "int"}, {"name": "v10", "type": "uint32_t", "pred_name": "level", "ref_name": "level", "ref_type": "uint32_t"}, {"name": "v11", "type": "ReplayGainContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "ReplayGainContext_0 *"}, {"name": "v12", "type": "AVFilterLink_0 *", "pred_name": "outlink", "ref_name": "outlink", "ref_type": "AVFilterLink_0 *"}, {"name": "v13", "type": "AVFilterContext_0 *", "pred_name": "ctx", "ref_name": "ctx", "ref_type": "AVFilterContext_0 *"}], "body_in_train": true}, {"repo_owner": "KG7QIN", "repo_name": "AllStarLink", "path": "KG7QIN/AllStarLink/669eb6c4cb13ded01b86bf63d27fdb2a93cbed7e9801d93d33d28d3c72c5b4e4", "path_in_repo": "KG7QIN/AllStarLink/trunk/asterisk/menuselect/mxml/mxml-index.o", "objdump": "00000000000006a7 <index_sort>:\n 6a7:\t55                   \tpush   %rbp\n 6a8:\t48 89 e5             \tmov    %rsp,%rbp\n 6ab:\t48 83 ec 30          \tsub    $0x30,%rsp\n 6af:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 6b3:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n 6b6:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n 6b9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 6bd:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 6c1:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n 6c4:\t48 63 d2             \tmovslq %edx,%rdx\n 6c7:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 6cb:\t48 01 d0             \tadd    %rdx,%rax\n 6ce:\t48 8b 00             \tmov    (%rax),%rax\n 6d1:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 6d5:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 6d8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 6db:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n 6de:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 6e1:\te9 e9 00 00 00       \tjmpq   7cf <index_sort+0x128>\n 6e6:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 6ea:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 6ed:\t3b 45 d0             \tcmp    -0x30(%rbp),%eax\n 6f0:\t7d 35                \tjge    727 <index_sort+0x80>\n 6f2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 6f6:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 6fa:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 6fd:\t48 63 d2             \tmovslq %edx,%rdx\n 700:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 704:\t48 01 d0             \tadd    %rdx,%rax\n 707:\t48 8b 08             \tmov    (%rax),%rcx\n 70a:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 70e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 712:\t48 89 ce             \tmov    %rcx,%rsi\n 715:\t48 89 c7             \tmov    %rax,%rdi\n 718:\te8 64 fe ff ff       \tcallq  581 <index_compare>\n 71d:\t85 c0                \ttest   %eax,%eax\n 71f:\t7e c5                \tjle    6e6 <index_sort+0x3f>\n 721:\teb 04                \tjmp    727 <index_sort+0x80>\n 723:\t83 6d f8 01          \tsubl   $0x1,-0x8(%rbp)\n 727:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 72a:\t3b 45 d4             \tcmp    -0x2c(%rbp),%eax\n 72d:\t7e 2f                \tjle    75e <index_sort+0xb7>\n 72f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 733:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 737:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n 73a:\t48 63 d2             \tmovslq %edx,%rdx\n 73d:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 741:\t48 01 d0             \tadd    %rdx,%rax\n 744:\t48 8b 08             \tmov    (%rax),%rcx\n 747:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 74b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 74f:\t48 89 ce             \tmov    %rcx,%rsi\n 752:\t48 89 c7             \tmov    %rax,%rdi\n 755:\te8 27 fe ff ff       \tcallq  581 <index_compare>\n 75a:\t85 c0                \ttest   %eax,%eax\n 75c:\t7f c5                \tjg     723 <index_sort+0x7c>\n 75e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 761:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n 764:\t7d 69                \tjge    7cf <index_sort+0x128>\n 766:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 76a:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 76e:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 771:\t48 63 d2             \tmovslq %edx,%rdx\n 774:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 778:\t48 01 d0             \tadd    %rdx,%rax\n 77b:\t48 8b 00             \tmov    (%rax),%rax\n 77e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 782:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 786:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 78a:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n 78d:\t48 63 d2             \tmovslq %edx,%rdx\n 790:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 794:\t48 8d 0c 10          \tlea    (%rax,%rdx,1),%rcx\n 798:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 79c:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 7a0:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 7a3:\t48 63 d2             \tmovslq %edx,%rdx\n 7a6:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 7aa:\t48 01 c2             \tadd    %rax,%rdx\n 7ad:\t48 8b 01             \tmov    (%rcx),%rax\n 7b0:\t48 89 02             \tmov    %rax,(%rdx)\n 7b3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 7b7:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 7bb:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n 7be:\t48 63 d2             \tmovslq %edx,%rdx\n 7c1:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 7c5:\t48 01 c2             \tadd    %rax,%rdx\n 7c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 7cc:\t48 89 02             \tmov    %rax,(%rdx)\n 7cf:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 7d2:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n 7d5:\t0f 8c 0f ff ff ff    \tjl     6ea <index_sort+0x43>\n 7db:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 7df:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 7e3:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n 7e6:\t48 63 d2             \tmovslq %edx,%rdx\n 7e9:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 7ed:\t48 01 d0             \tadd    %rdx,%rax\n 7f0:\t48 8b 10             \tmov    (%rax),%rdx\n 7f3:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n 7f7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 7fb:\t48 89 ce             \tmov    %rcx,%rsi\n 7fe:\t48 89 c7             \tmov    %rax,%rdi\n 801:\te8 7b fd ff ff       \tcallq  581 <index_compare>\n 806:\t85 c0                \ttest   %eax,%eax\n 808:\t7e 4d                \tjle    857 <index_sort+0x1b0>\n 80a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 80e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 812:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n 815:\t48 63 d2             \tmovslq %edx,%rdx\n 818:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 81c:\t48 8d 0c 10          \tlea    (%rax,%rdx,1),%rcx\n 820:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 824:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 828:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n 82b:\t48 63 d2             \tmovslq %edx,%rdx\n 82e:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 832:\t48 01 c2             \tadd    %rax,%rdx\n 835:\t48 8b 01             \tmov    (%rcx),%rax\n 838:\t48 89 02             \tmov    %rax,(%rdx)\n 83b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 83f:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 843:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n 846:\t48 63 d2             \tmovslq %edx,%rdx\n 849:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 84d:\t48 01 c2             \tadd    %rax,%rdx\n 850:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 854:\t48 89 02             \tmov    %rax,(%rdx)\n 857:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 85a:\t83 e8 01             \tsub    $0x1,%eax\n 85d:\t39 45 d4             \tcmp    %eax,-0x2c(%rbp)\n 860:\t7d 17                \tjge    879 <index_sort+0x1d2>\n 862:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 865:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n 868:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n 86b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 86f:\t89 ce                \tmov    %ecx,%esi\n 871:\t48 89 c7             \tmov    %rax,%rdi\n 874:\te8 2e fe ff ff       \tcallq  6a7 <index_sort>\n 879:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 87c:\t83 c0 01             \tadd    $0x1,%eax\n 87f:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n 882:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 885:\t3b 45 d0             \tcmp    -0x30(%rbp),%eax\n 888:\t0f 8c 2b fe ff ff    \tjl     6b9 <index_sort+0x12>\n 88e:\t90                   \tnop\n 88f:\t90                   \tnop\n 890:\tc9                   \tleaveq \n 891:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall index_sort(_QWORD *<span class=\"supfact\">a1</span>,\n                              unsigned int <span class=\"supfact\">a2</span>,\n                              unsigned int <span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v4</span> = __PAIR64__(<span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>);\n  do {\n    <span class=\"supfact\">v6</span> = *(_QWORD *)(Number L * SHIDWORD(<span class=\"supfact\">v4</span>) +\n                                     <span class=\"supfact\">a1</span>[Number]);\n    <span class=\"supfact\">v7</span> = <span class=\"supfact\">v4</span>;\n    while (SHIDWORD(<span class=\"supfact\">v7</span>) < (int)<span class=\"supfact\">v7</span>) {\n      while (SHIDWORD(<span class=\"supfact\">v7</span>) < (int)<span class=\"supfact\">v4</span> &&\n             (int)index_compare(\n                 <span class=\"supfact\">a1</span>,\n                 *(_QWORD *)(Number L * SHIDWORD(<span class=\"supfact\">v7</span>) +\n                             <span class=\"supfact\">a1</span>[Number]),\n                 <span class=\"supfact\">v6</span>) <= Number)\n        ++HIDWORD(<span class=\"supfact\">v7</span>);\n      while ((int)<span class=\"supfact\">v7</span> > SHIDWORD(<span class=\"supfact\">v4</span>) &&\n             (int)index_compare(<span class=\"supfact\">a1</span>,\n                                *(_QWORD *)(Number L * (int)<span class=\"supfact\">v7</span> +\n                                            <span class=\"supfact\">a1</span>[Number]),\n                                <span class=\"supfact\">v6</span>) > Number)\n        LODWORD(<span class=\"supfact\">v7</span>) = <span class=\"supfact\">v7</span> - Number;\n      if (SHIDWORD(<span class=\"supfact\">v7</span>) < (int)<span class=\"supfact\">v7</span>) {\n        <span class=\"supfact\">v5</span> =\n            *(_QWORD *)(Number L * SHIDWORD(<span class=\"supfact\">v7</span>) +\n                        <span class=\"supfact\">a1</span>[Number]);\n        *(_QWORD *)(<span class=\"supfact\">a1</span>[Number] +\n                    Number L * SHIDWORD(<span class=\"supfact\">v7</span>)) =\n            *(_QWORD *)(<span class=\"supfact\">a1</span>[Number] +\n                        Number L * (int)<span class=\"supfact\">v7</span>);\n        *(_QWORD *)(<span class=\"supfact\">a1</span>[Number] +\n                    Number L * (int)<span class=\"supfact\">v7</span>) = <span class=\"supfact\">v5</span>;\n      }\n    }\n    if ((int)index_compare(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v6</span>,\n                           *(_QWORD *)(Number L * (int)<span class=\"supfact\">v7</span> +\n                                       <span class=\"supfact\">a1</span>[Number])) > Number) {\n      *(_QWORD *)(<span class=\"supfact\">a1</span>[Number] +\n                  Number L * SHIDWORD(<span class=\"supfact\">v4</span>)) =\n          *(_QWORD *)(<span class=\"supfact\">a1</span>[Number] +\n                      Number L * (int)<span class=\"supfact\">v7</span>);\n      *(_QWORD *)(<span class=\"supfact\">a1</span>[Number] +\n                  Number L * (int)<span class=\"supfact\">v7</span>) = <span class=\"supfact\">v6</span>;\n    }\n    if (SHIDWORD(<span class=\"supfact\">v4</span>) < (int)<span class=\"supfact\">v7</span> - Number)\n      index_sort(<span class=\"supfact\">a1</span>, HIDWORD(<span class=\"supfact\">v4</span>),\n                 (unsigned int)(<span class=\"supfact\">v7</span> - Number));\n    HIDWORD(<span class=\"supfact\">v4</span>) = <span class=\"supfact\">v7</span> + Number;\n    <span class=\"supfact\">result</span> = (unsigned int)(<span class=\"supfact\">v7</span> + Number);\n  } while ((int)<span class=\"supfact\">result</span> < (int)<span class=\"supfact\">v4</span>);\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl index_sort(mxml_index_t *<span class=\"supfact\">ind</span>,\n                        int <span class=\"supfact\">left</span>, int <span class=\"supfact\">right</span>) {\n  unsigned __int64 <span class=\"supfact\">righta</span>;\n  mxml_node_t *<span class=\"supfact\">temp</span>;\n  mxml_node_t *<span class=\"supfact\">pivot</span>;\n  unsigned __int64 <span class=\"supfact\">tempr</span>;\n  <span class=\"supfact\">righta</span> =\n      __PAIR64__(<span class=\"supfact\">left</span>, <span class=\"supfact\">right</span>);\n  do {\n    <span class=\"supfact\">pivot</span> =\n        <span class=\"supfact\">ind</span>->nodes[SHIDWORD(<span class=\"supfact\">righta</span>)];\n    <span class=\"supfact\">tempr</span> = <span class=\"supfact\">righta</span>;\n    while (SHIDWORD(<span class=\"supfact\">tempr</span>) < (int)<span class=\"supfact\">tempr</span>) {\n      while (SHIDWORD(<span class=\"supfact\">tempr</span>) < (int)<span class=\"supfact\">righta</span> &&\n             index_compare(\n                 <span class=\"supfact\">ind</span>,\n                 <span class=\"supfact\">ind</span>->nodes[SHIDWORD(<span class=\"supfact\">tempr</span>)],\n                 <span class=\"supfact\">pivot</span>) <= Number)\n        ++HIDWORD(<span class=\"supfact\">tempr</span>);\n      while (\n          (int)<span class=\"supfact\">tempr</span> > SHIDWORD(<span class=\"supfact\">righta</span>) &&\n          index_compare(<span class=\"supfact\">ind</span>,\n                        <span class=\"supfact\">ind</span>->nodes[(int)<span class=\"supfact\">tempr</span>],\n                        <span class=\"supfact\">pivot</span>) > Number)\n        LODWORD(<span class=\"supfact\">tempr</span>) = <span class=\"supfact\">tempr</span> - Number;\n      if (SHIDWORD(<span class=\"supfact\">tempr</span>) < (int)<span class=\"supfact\">tempr</span>) {\n        <span class=\"supfact\">temp</span> =\n            <span class=\"supfact\">ind</span>->nodes[SHIDWORD(<span class=\"supfact\">tempr</span>)];\n        <span class=\"supfact\">ind</span>->nodes[SHIDWORD(<span class=\"supfact\">tempr</span>)] =\n            <span class=\"supfact\">ind</span>->nodes[(int)<span class=\"supfact\">tempr</span>];\n        <span class=\"supfact\">ind</span>->nodes[(int)<span class=\"supfact\">tempr</span>] =\n            <span class=\"supfact\">temp</span>;\n      }\n    }\n    if (index_compare(<span class=\"supfact\">ind</span>, <span class=\"supfact\">pivot</span>,\n                      <span class=\"supfact\">ind</span>->nodes[(int)<span class=\"supfact\">tempr</span>]) >\n        Number) {\n      <span class=\"supfact\">ind</span>->nodes[SHIDWORD(<span class=\"supfact\">righta</span>)] =\n          <span class=\"supfact\">ind</span>->nodes[(int)<span class=\"supfact\">tempr</span>];\n      <span class=\"supfact\">ind</span>->nodes[(int)<span class=\"supfact\">tempr</span>] =\n          <span class=\"supfact\">pivot</span>;\n    }\n    if (SHIDWORD(<span class=\"supfact\">righta</span>) < (int)<span class=\"supfact\">tempr</span> - Number)\n      index_sort(<span class=\"supfact\">ind</span>, SHIDWORD(<span class=\"supfact\">righta</span>),\n                 <span class=\"supfact\">tempr</span> - Number);\n    HIDWORD(<span class=\"supfact\">righta</span>) = <span class=\"supfact\">tempr</span> + Number;\n  } while ((int)<span class=\"supfact\">tempr</span> + Number < (int)<span class=\"supfact\">righta</span>);\n}", "var": [{"name": "a1", "type": "void * *", "pred_name": "array", "ref_name": "ind", "ref_type": "mxml_index_t *"}, {"name": "a2", "type": "int", "pred_name": "n", "ref_name": "left", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "dir", "ref_name": "right", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v4", "type": "unsigned __int64", "pred_name": "j", "ref_name": "righta", "ref_type": "unsigned __int64"}, {"name": "v5", "type": "unsigned __int64", "pred_name": "ja", "ref_name": "temp", "ref_type": "mxml_node_t *"}, {"name": "v6", "type": "unsigned __int64", "pred_name": "i", "ref_name": "pivot", "ref_type": "mxml_node_t *"}, {"name": "v7", "type": "unsigned __int64", "pred_name": "j", "ref_name": "tempr", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "Soldie", "repo_name": "zimg-image-alto-desempenho", "path": "Soldie/zimg-image-alto-desempenho/2b9589f9b30d2eb55d9861e7b5245fdb5ed0f0d7c582b81cfe4da676768b3499", "path_in_repo": "Soldie/zimg-image-alto-desempenho//deps/libwebp/src/enc/libwebpencode_la-vp8l_enc.o", "objdump": "0000000000000d83 <GetHistoBits>:\n     d83:\t55                   \tpush   %rbp\n     d84:\t48 89 e5             \tmov    %rsp,%rbp\n     d87:\t53                   \tpush   %rbx\n     d88:\t48 83 ec 20          \tsub    $0x20,%rsp\n     d8c:\t89 7d e4             \tmov    %edi,-0x1c(%rbp)\n     d8f:\t89 75 e0             \tmov    %esi,-0x20(%rbp)\n     d92:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n     d95:\t89 4d d8             \tmov    %ecx,-0x28(%rbp)\n     d98:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n     d9c:\t74 07                \tje     da5 <GetHistoBits+0x22>\n     d9e:\tb8 09 00 00 00       \tmov    $0x9,%eax\n     da3:\teb 05                \tjmp    daa <GetHistoBits+0x27>\n     da5:\tb8 07 00 00 00       \tmov    $0x7,%eax\n     daa:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n     dad:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     db0:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n     db3:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     db6:\t89 d6                \tmov    %edx,%esi\n     db8:\t89 c7                \tmov    %eax,%edi\n     dba:\te8 7d f4 ff ff       \tcallq  23c <VP8LSubSampleSize>\n     dbf:\t89 c3                \tmov    %eax,%ebx\n     dc1:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n     dc4:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     dc7:\t89 d6                \tmov    %edx,%esi\n     dc9:\t89 c7                \tmov    %eax,%edi\n     dcb:\te8 6c f4 ff ff       \tcallq  23c <VP8LSubSampleSize>\n     dd0:\t0f af c3             \timul   %ebx,%eax\n     dd3:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n     dd6:\t81 7d f0 28 0a 00 00 \tcmpl   $0xa28,-0x10(%rbp)\n     ddd:\t7e 06                \tjle    de5 <GetHistoBits+0x62>\n     ddf:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n     de3:\teb cb                \tjmp    db0 <GetHistoBits+0x2d>\n     de5:\t90                   \tnop\n     de6:\t83 7d f4 01          \tcmpl   $0x1,-0xc(%rbp)\n     dea:\t7e 0f                \tjle    dfb <GetHistoBits+0x78>\n     dec:\tb8 09 00 00 00       \tmov    $0x9,%eax\n     df1:\t83 7d f4 09          \tcmpl   $0x9,-0xc(%rbp)\n     df5:\t0f 4e 45 f4          \tcmovle -0xc(%rbp),%eax\n     df9:\teb 05                \tjmp    e00 <GetHistoBits+0x7d>\n     dfb:\tb8 02 00 00 00       \tmov    $0x2,%eax\n     e00:\t48 83 c4 20          \tadd    $0x20,%rsp\n     e04:\t5b                   \tpop    %rbx\n     e05:\t5d                   \tpop    %rbp\n     e06:\tc3                   \tretq   ", "code_s": "__int64 __fastcall GetHistoBits(int <span class=\"supfact\">a1</span>, int <span class=\"supfact\">a2</span>,\n                                int <span class=\"supfact\">a3</span>,\n                                int <span class=\"supfact\">a4</span>) {\n  int v4;\n  int <span class=\"supfact\">v5</span>;\n  __int64 result;\n  int <span class=\"supfact\">i</span>;\n  if (<span class=\"supfact\">a2</span>)\n    v4 = Number;\n  else\n    v4 = Number;\n  for (<span class=\"supfact\">i</span> = v4 - <span class=\"supfact\">a1</span>;; ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v5</span> =\n        VP8LSubSampleSize(<span class=\"supfact\">a3</span>, <span class=\"supfact\">i</span>);\n    if ((int)(<span class=\"supfact\">v5</span> *\n              VP8LSubSampleSize(<span class=\"supfact\">a4</span>, <span class=\"supfact\">i</span>)) <=\n        Number)\n      break;\n  }\n  if (<span class=\"supfact\">i</span> <= Number)\n    return Number L;\n  result = Number L;\n  if (<span class=\"supfact\">i</span> <= Number)\n    result = (unsigned int)<span class=\"supfact\">i</span>;\n  return result;\n}", "code_t": "int __cdecl GetHistoBits(int <span class=\"supfact\">method</span>,\n                         int <span class=\"supfact\">use_palette</span>,\n                         int <span class=\"supfact\">width</span>,\n                         int <span class=\"supfact\">height</span>) {\n  int v4;\n  uint32_t <span class=\"supfact\">v5</span>;\n  int result;\n  int <span class=\"supfact\">histo_bits</span>;\n  if (<span class=\"supfact\">use_palette</span>)\n    v4 = Number;\n  else\n    v4 = Number;\n  for (<span class=\"supfact\">histo_bits</span> = v4 - <span class=\"supfact\">method</span>;;\n       ++<span class=\"supfact\">histo_bits</span>) {\n    <span class=\"supfact\">v5</span> =\n        VP8LSubSampleSize(<span class=\"supfact\">width</span>, <span class=\"supfact\">histo_bits</span>);\n    if ((int)(<span class=\"supfact\">v5</span> *\n              VP8LSubSampleSize(<span class=\"supfact\">height</span>,\n                                <span class=\"supfact\">histo_bits</span>)) <= Number)\n      break;\n  }\n  if (<span class=\"supfact\">histo_bits</span> <= Number)\n    return Number;\n  result = Number;\n  if (<span class=\"supfact\">histo_bits</span> <= Number)\n    result = <span class=\"supfact\">histo_bits</span>;\n  return result;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "size", "ref_name": "method", "ref_type": "int"}, {"name": "a2", "type": "int", "pred_name": "width", "ref_name": "use_palette", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "height", "ref_name": "width", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "alpha", "ref_name": "height", "ref_type": "int"}, {"name": "v5", "type": "int", "pred_name": "v5", "ref_name": "v5", "ref_type": "uint32_t"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "histo_bits", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "L4STeam", "repo_name": "sch_dualpi2_upstream", "path": "L4STeam/sch_dualpi2_upstream/17922399f8dcb96b7c0326622cbba620ea61e052574bee719088de42f27b38d6", "path_in_repo": "L4STeam/sch_dualpi2_upstream/tools/testing/selftests/futex/functional/futex_requeue_pi_signal_restart", "objdump": "00000000004012ff <futex_unlock_pi>:\n  4012ff:\t55                   \tpush   %rbp\n  401300:\t48 89 e5             \tmov    %rsp,%rbp\n  401303:\t48 83 ec 10          \tsub    $0x10,%rsp\n  401307:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  40130b:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n  40130e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  401311:\t83 c8 07             \tor     $0x7,%eax\n  401314:\t89 c2                \tmov    %eax,%edx\n  401316:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40131a:\t48 83 ec 08          \tsub    $0x8,%rsp\n  40131e:\t6a 00                \tpushq  $0x0\n  401320:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  401326:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  40132c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  401331:\t48 89 c6             \tmov    %rax,%rsi\n  401334:\tbf ca 00 00 00       \tmov    $0xca,%edi\n  401339:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40133e:\te8 ad fd ff ff       \tcallq  4010f0 <syscall@plt>\n  401343:\t48 83 c4 10          \tadd    $0x10,%rsp\n  401347:\tc9                   \tleaveq \n  401348:\tc3                   \tretq   ", "code_s": "__int64 __fastcall futex_unlock_pi(__int64 <span class=\"supfact\">a1</span>,\n                                   int <span class=\"supfact\">a2</span>) {\n  return syscall(Number L, <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span> | Number,\n                 Number L, Number L, Number L, Number L);\n}", "code_t": "int __cdecl futex_unlock_pi(futex_t *<span class=\"supfact\">uaddr</span>,\n                            int <span class=\"supfact\">opflags</span>) {\n  return syscall(Number L, <span class=\"supfact\">uaddr</span>,\n                 <span class=\"supfact\">opflags</span> | Number, Number L, Number L, Number L,\n                 Number L);\n}", "var": [{"name": "a1", "type": "futex_t *", "pred_name": "uaddr", "ref_name": "uaddr", "ref_type": "futex_t *"}, {"name": "a2", "type": "int", "pred_name": "opflags", "ref_name": "opflags", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "slapin", "repo_name": "q2-dev", "path": "slapin/q2-dev/e1b91f1ae6f6bf16d95fca94468a1efb869b9f59680796b18b71f5c99abc0058", "path_in_repo": "slapin/q2-dev/quake2/releasex86_64/ref_glx.so", "objdump": "", "code_s": "int strcmp(const char *<span class=\"supfact\">s1</span>, const char *<span class=\"supfact\">s2</span>) {\n  return strcmp(<span class=\"supfact\">s1</span>, <span class=\"supfact\">s2</span>);\n}", "code_t": "int strcmp(const char *<span class=\"supfact\">s1</span>, const char *<span class=\"supfact\">s2</span>) {\n  return strcmp(<span class=\"supfact\">s1</span>, <span class=\"supfact\">s2</span>);\n}", "var": [{"name": "s1", "type": "const char *", "pred_name": "s1", "ref_name": "s1", "ref_type": "const char *"}, {"name": "s2", "type": "const char *", "pred_name": "s2", "ref_name": "s2", "ref_type": "const char *"}], "body_in_train": true}, {"repo_owner": "deeponion", "repo_name": "deeponion-legacy", "path": "deeponion/deeponion-legacy/67ec94185c036a4087635d7c4988300ac248e7a67adafa162618d00c1699e799", "path_in_repo": "deeponion/deeponion-legacy/src/leveldb/out-static/hash_test", "objdump": "0000000000410fa0 <_ZN7leveldb10EnvWrapper9NewLoggerERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPPNS_6LoggerE>:\n  410fa0:\t41 54                \tpush   %r12\n  410fa2:\t48 8b 76 08          \tmov    0x8(%rsi),%rsi\n  410fa6:\t49 89 fc             \tmov    %rdi,%r12\n  410fa9:\t48 8b 06             \tmov    (%rsi),%rax\n  410fac:\tff 90 90 00 00 00    \tcallq  *0x90(%rax)\n  410fb2:\t4c 89 e0             \tmov    %r12,%rax\n  410fb5:\t41 5c                \tpop    %r12\n  410fb7:\tc3                   \tretq   \n  410fb8:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n  410fbf:\t00 ", "code_s": "__int64 __fastcall leveldb EnvWrapper NewLogger(__int64 <span class=\"supfact\">a1</span>,\n                                                __int64 <span class=\"supfact\">a2</span>) {\n  (*(void (**)(void))(**(_QWORD **)(<span class=\"supfact\">a2</span> + Number) + Number L))();\n  return <span class=\"supfact\">a1</span>;\n}", "code_t": "__int64 __fastcall leveldb EnvWrapper NewLogger(__int64 <span class=\"supfact\">a1</span>,\n                                                __int64 <span class=\"supfact\">a2</span>) {\n  (*(void (**)(void))(**(_QWORD **)(<span class=\"supfact\">a2</span> + Number) + Number L))();\n  return <span class=\"supfact\">a1</span>;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "aosp-caf-upstream", "repo_name": "platform_external_vboot_reference", "path": "aosp-caf-upstream/platform_external_vboot_reference/7738446ec78482e212d124570bc843594b54a1a22912e3dfd1fe8ade56e86e54", "path_in_repo": "aosp-caf-upstream/platform_external_vboot_reference//build/futility/vb1_helper.o", "objdump": "0000000000000d0d <WriteSomeParts>:\n     d0d:\t55                   \tpush   %rbp\n     d0e:\t48 89 e5             \tmov    %rsp,%rbp\n     d11:\t48 83 ec 40          \tsub    $0x40,%rsp\n     d15:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     d19:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     d1d:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     d21:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n     d25:\t4c 89 45 c8          \tmov    %r8,-0x38(%rbp)\n     d29:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n     d2d:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     d31:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d35:\t48 89 c6             \tmov    %rax,%rsi\n     d38:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # d3f <WriteSomeParts+0x32>\n     d3f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d44:\te8 00 00 00 00       \tcallq  d49 <WriteSomeParts+0x3c>\n     d49:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d4d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d54 <WriteSomeParts+0x47>\n     d54:\t48 89 c7             \tmov    %rax,%rdi\n     d57:\te8 00 00 00 00       \tcallq  d5c <WriteSomeParts+0x4f>\n     d5c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d60:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     d65:\t75 3a                \tjne    da1 <WriteSomeParts+0x94>\n     d67:\te8 00 00 00 00       \tcallq  d6c <WriteSomeParts+0x5f>\n     d6c:\t8b 00                \tmov    (%rax),%eax\n     d6e:\t89 c7                \tmov    %eax,%edi\n     d70:\te8 00 00 00 00       \tcallq  d75 <WriteSomeParts+0x68>\n     d75:\t48 89 c1             \tmov    %rax,%rcx\n     d78:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d7f <WriteSomeParts+0x72>\n     d7f:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     d83:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d8a <WriteSomeParts+0x7d>\n     d8a:\t48 89 c7             \tmov    %rax,%rdi\n     d8d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d92:\te8 00 00 00 00       \tcallq  d97 <WriteSomeParts+0x8a>\n     d97:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     d9c:\te9 12 01 00 00       \tjmpq   eb3 <WriteSomeParts+0x1a6>\n     da1:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n     da6:\t74 7b                \tje     e23 <WriteSomeParts+0x116>\n     da8:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n     dad:\t74 74                \tje     e23 <WriteSomeParts+0x116>\n     daf:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     db3:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n     db7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     dbb:\t48 89 d1             \tmov    %rdx,%rcx\n     dbe:\tba 01 00 00 00       \tmov    $0x1,%edx\n     dc3:\t48 89 c7             \tmov    %rax,%rdi\n     dc6:\te8 00 00 00 00       \tcallq  dcb <WriteSomeParts+0xbe>\n     dcb:\t48 83 f8 01          \tcmp    $0x1,%rax\n     dcf:\t74 52                \tje     e23 <WriteSomeParts+0x116>\n     dd1:\te8 00 00 00 00       \tcallq  dd6 <WriteSomeParts+0xc9>\n     dd6:\t8b 00                \tmov    (%rax),%eax\n     dd8:\t89 c7                \tmov    %eax,%edi\n     dda:\te8 00 00 00 00       \tcallq  ddf <WriteSomeParts+0xd2>\n     ddf:\t48 89 c1             \tmov    %rax,%rcx\n     de2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # de9 <WriteSomeParts+0xdc>\n     de9:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     ded:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # df4 <WriteSomeParts+0xe7>\n     df4:\t48 89 c7             \tmov    %rax,%rdi\n     df7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     dfc:\te8 00 00 00 00       \tcallq  e01 <WriteSomeParts+0xf4>\n     e01:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e05:\t48 89 c7             \tmov    %rax,%rdi\n     e08:\te8 00 00 00 00       \tcallq  e0d <WriteSomeParts+0x100>\n     e0d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e11:\t48 89 c7             \tmov    %rax,%rdi\n     e14:\te8 00 00 00 00       \tcallq  e19 <WriteSomeParts+0x10c>\n     e19:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     e1e:\te9 90 00 00 00       \tjmpq   eb3 <WriteSomeParts+0x1a6>\n     e23:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n     e28:\t74 78                \tje     ea2 <WriteSomeParts+0x195>\n     e2a:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n     e2f:\t74 71                \tje     ea2 <WriteSomeParts+0x195>\n     e31:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     e35:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n     e39:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e3d:\t48 89 d1             \tmov    %rdx,%rcx\n     e40:\tba 01 00 00 00       \tmov    $0x1,%edx\n     e45:\t48 89 c7             \tmov    %rax,%rdi\n     e48:\te8 00 00 00 00       \tcallq  e4d <WriteSomeParts+0x140>\n     e4d:\t48 83 f8 01          \tcmp    $0x1,%rax\n     e51:\t74 4f                \tje     ea2 <WriteSomeParts+0x195>\n     e53:\te8 00 00 00 00       \tcallq  e58 <WriteSomeParts+0x14b>\n     e58:\t8b 00                \tmov    (%rax),%eax\n     e5a:\t89 c7                \tmov    %eax,%edi\n     e5c:\te8 00 00 00 00       \tcallq  e61 <WriteSomeParts+0x154>\n     e61:\t48 89 c1             \tmov    %rax,%rcx\n     e64:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e6b <WriteSomeParts+0x15e>\n     e6b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     e6f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # e76 <WriteSomeParts+0x169>\n     e76:\t48 89 c7             \tmov    %rax,%rdi\n     e79:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e7e:\te8 00 00 00 00       \tcallq  e83 <WriteSomeParts+0x176>\n     e83:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e87:\t48 89 c7             \tmov    %rax,%rdi\n     e8a:\te8 00 00 00 00       \tcallq  e8f <WriteSomeParts+0x182>\n     e8f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e93:\t48 89 c7             \tmov    %rax,%rdi\n     e96:\te8 00 00 00 00       \tcallq  e9b <WriteSomeParts+0x18e>\n     e9b:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     ea0:\teb 11                \tjmp    eb3 <WriteSomeParts+0x1a6>\n     ea2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     ea6:\t48 89 c7             \tmov    %rax,%rdi\n     ea9:\te8 00 00 00 00       \tcallq  eae <WriteSomeParts+0x1a1>\n     eae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     eb3:\tc9                   \tleaveq \n     eb4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall WriteSomeParts(const char *<span class=\"supfact\">a1</span>,\n                                  const void *<span class=\"supfact\">a2</span>,\n                                  size_t <span class=\"supfact\">a3</span>,\n                                  const void *<span class=\"supfact\">a4</span>,\n                                  size_t <span class=\"supfact\">a5</span>) {\n  int *v5;\n  char *v6;\n  __int64 result;\n  int *v8;\n  char *v9;\n  FILE *<span class=\"supfact\">s</span>;\n  Debug(String, <span class=\"supfact\">a1</span>, <span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>);\n  <span class=\"supfact\">s</span> = fopen64(<span class=\"supfact\">a1</span>, String);\n  if (<span class=\"supfact\">s</span>) {\n    if (<span class=\"supfact\">a2</span> && <span class=\"supfact\">a3</span> &&\n            fwrite(<span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>, Number,\n                   <span class=\"supfact\">s</span>) != Number ||\n        <span class=\"supfact\">a4</span> && <span class=\"supfact\">a5</span> &&\n            fwrite(<span class=\"supfact\">a4</span>, <span class=\"supfact\">a5</span>, Number,\n                   <span class=\"supfact\">s</span>) != Number) {\n      v8 = _errno_location();\n      v9 = strerror(*v8);\n      fprintf(stderr, String, <span class=\"supfact\">a1</span>, v9);\n      fclose(<span class=\"supfact\">s</span>);\n      unlink(<span class=\"supfact\">a1</span>);\n      result = Number;\n    } else {\n      fclose(<span class=\"supfact\">s</span>);\n      result = Number L;\n    }\n  } else {\n    v5 = _errno_location();\n    v6 = strerror(*v5);\n    fprintf(stderr, String, <span class=\"supfact\">a1</span>, v6);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl WriteSomeParts(const char *<span class=\"supfact\">outfile</span>,\n                           void *<span class=\"supfact\">part1_data</span>,\n                           uint64_t <span class=\"supfact\">part1_size</span>,\n                           void *<span class=\"supfact\">part2_data</span>,\n                           uint64_t <span class=\"supfact\">part2_size</span>) {\n  int *v5;\n  char *v6;\n  int result;\n  int *v8;\n  char *v9;\n  FILE *<span class=\"supfact\">f</span>;\n  Debug(String, <span class=\"supfact\">outfile</span>, <span class=\"supfact\">part1_size</span>,\n        <span class=\"supfact\">part2_size</span>);\n  <span class=\"supfact\">f</span> = fopen64(<span class=\"supfact\">outfile</span>, String);\n  if (<span class=\"supfact\">f</span>) {\n    if (<span class=\"supfact\">part1_data</span> && <span class=\"supfact\">part1_size</span> &&\n            fwrite(<span class=\"supfact\">part1_data</span>, <span class=\"supfact\">part1_size</span>,\n                   Number, <span class=\"supfact\">f</span>) != Number ||\n        <span class=\"supfact\">part2_data</span> && <span class=\"supfact\">part2_size</span> &&\n            fwrite(<span class=\"supfact\">part2_data</span>, <span class=\"supfact\">part2_size</span>,\n                   Number, <span class=\"supfact\">f</span>) != Number) {\n      v8 = _errno_location();\n      v9 = strerror(*v8);\n      fprintf(stderr, String, <span class=\"supfact\">outfile</span>, v9);\n      fclose(<span class=\"supfact\">f</span>);\n      unlink(<span class=\"supfact\">outfile</span>);\n      result = Number;\n    } else {\n      fclose(<span class=\"supfact\">f</span>);\n      result = Number;\n    }\n  } else {\n    v5 = _errno_location();\n    v6 = strerror(*v5);\n    fprintf(stderr, String, <span class=\"supfact\">outfile</span>, v6);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "p", "ref_name": "outfile", "ref_type": "const char *"}, {"name": "a2", "type": "const char *", "pred_name": "file", "ref_name": "part1_data", "ref_type": "void *"}, {"name": "a3", "type": "const char *", "pred_name": "func", "ref_name": "part1_size", "ref_type": "uint64_t"}, {"name": "a4", "type": "const char *", "pred_name": "loc", "ref_name": "part2_data", "ref_type": "void *"}, {"name": "a5", "type": "const char *", "pred_name": "reason", "ref_name": "part2_size", "ref_type": "uint64_t"}, {"name": "s", "type": "FILE *", "pred_name": "fp", "ref_name": "f", "ref_type": "FILE *"}], "body_in_train": false}, {"repo_owner": "sconklin", "repo_name": "ltp-tools", "path": "sconklin/ltp-tools/87ba2e1fbe19f5836a3eadd5670cecf7ef237db6d6c11a2869f6f0619faca291", "path_in_repo": "sconklin/ltp-tools/ltp-full-20110915/testcases/open_posix_testsuite/conformance/interfaces/shm_open/28-3.run-test", "objdump": "", "code_s": "int strcmp(const char *<span class=\"supfact\">s1</span>, const char *<span class=\"supfact\">s2</span>) {\n  return strcmp(<span class=\"supfact\">s1</span>, <span class=\"supfact\">s2</span>);\n}", "code_t": "int strcmp(const char *<span class=\"supfact\">s1</span>, const char *<span class=\"supfact\">s2</span>) {\n  return strcmp(<span class=\"supfact\">s1</span>, <span class=\"supfact\">s2</span>);\n}", "var": [{"name": "s1", "type": "const char *", "pred_name": "s1", "ref_name": "s1", "ref_type": "const char *"}, {"name": "s2", "type": "const char *", "pred_name": "s2", "ref_name": "s2", "ref_type": "const char *"}], "body_in_train": true}, {"repo_owner": "lfgGitHub", "repo_name": "x264", "path": "lfgGitHub/x264/ab93bde61053763cc897f547f8d1b0c3d36341e3b00fa077bc5d5a180bc5c4cc", "path_in_repo": "lfgGitHub/x264//common/x86/sad16-a-10.o", "objdump": "0000000000000e20 <x264_10_pixel_vsad_sse2>:\n     e20:\t66 0f 6f 07          \tmovdqa (%rdi),%xmm0\n     e24:\t66 0f 6f 4f 10       \tmovdqa 0x10(%rdi),%xmm1\n     e29:\t66 0f 6f 14 77       \tmovdqa (%rdi,%rsi,2),%xmm2\n     e2e:\t66 0f 6f 5c 77 10    \tmovdqa 0x10(%rdi,%rsi,2),%xmm3\n     e34:\t48 8d 3c b7          \tlea    (%rdi,%rsi,4),%rdi\n     e38:\t66 0f f9 c2          \tpsubw  %xmm2,%xmm0\n     e3c:\t66 0f f9 cb          \tpsubw  %xmm3,%xmm1\n     e40:\t66 0f ef e4          \tpxor   %xmm4,%xmm4\n     e44:\t66 0f ef ed          \tpxor   %xmm5,%xmm5\n     e48:\t66 0f f9 e0          \tpsubw  %xmm0,%xmm4\n     e4c:\t66 0f f9 e9          \tpsubw  %xmm1,%xmm5\n     e50:\t66 0f ee c4          \tpmaxsw %xmm4,%xmm0\n     e54:\t66 0f ee cd          \tpmaxsw %xmm5,%xmm1\n     e58:\t66 0f fd c1          \tpaddw  %xmm1,%xmm0\n     e5c:\t83 ea 02             \tsub    $0x2,%edx\n     e5f:\t74 75                \tje     ed6 <x264_10_pixel_vsad_sse2+0xb6>\n     e61:\t66 0f 6f 27          \tmovdqa (%rdi),%xmm4\n     e65:\t66 0f 6f 6f 10       \tmovdqa 0x10(%rdi),%xmm5\n     e6a:\t66 0f 6f 34 77       \tmovdqa (%rdi,%rsi,2),%xmm6\n     e6f:\t66 0f 6f 7c 77 10    \tmovdqa 0x10(%rdi,%rsi,2),%xmm7\n     e75:\t48 8d 3c b7          \tlea    (%rdi,%rsi,4),%rdi\n     e79:\t66 0f f9 d4          \tpsubw  %xmm4,%xmm2\n     e7d:\t66 0f f9 dd          \tpsubw  %xmm5,%xmm3\n     e81:\t66 0f f9 e6          \tpsubw  %xmm6,%xmm4\n     e85:\t66 0f f9 ef          \tpsubw  %xmm7,%xmm5\n     e89:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n     e8d:\t66 0f f9 ca          \tpsubw  %xmm2,%xmm1\n     e91:\t66 0f ee d1          \tpmaxsw %xmm1,%xmm2\n     e95:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n     e99:\t66 0f f9 cb          \tpsubw  %xmm3,%xmm1\n     e9d:\t66 0f ee d9          \tpmaxsw %xmm1,%xmm3\n     ea1:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n     ea5:\t66 0f f9 cc          \tpsubw  %xmm4,%xmm1\n     ea9:\t66 0f ee e1          \tpmaxsw %xmm1,%xmm4\n     ead:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n     eb1:\t66 0f f9 cd          \tpsubw  %xmm5,%xmm1\n     eb5:\t66 0f ee e9          \tpmaxsw %xmm1,%xmm5\n     eb9:\t66 0f fd c2          \tpaddw  %xmm2,%xmm0\n     ebd:\t66 0f fd c3          \tpaddw  %xmm3,%xmm0\n     ec1:\t66 0f fd c4          \tpaddw  %xmm4,%xmm0\n     ec5:\t66 0f fd c5          \tpaddw  %xmm5,%xmm0\n     ec9:\t66 0f 6f d6          \tmovdqa %xmm6,%xmm2\n     ecd:\t66 0f 6f df          \tmovdqa %xmm7,%xmm3\n     ed1:\t83 ea 02             \tsub    $0x2,%edx\n     ed4:\t7f 8b                \tjg     e61 <x264_10_pixel_vsad_sse2+0x41>\n     ed6:\t66 0f 6f c8          \tmovdqa %xmm0,%xmm1\n     eda:\t66 0f 72 d1 10       \tpsrld  $0x10,%xmm1\n     edf:\t66 0f 72 f0 10       \tpslld  $0x10,%xmm0\n     ee4:\t66 0f 72 d0 10       \tpsrld  $0x10,%xmm0\n     ee9:\t66 0f fe c1          \tpaddd  %xmm1,%xmm0\n     eed:\t0f 12 c8             \tmovhlps %xmm0,%xmm1\n     ef0:\t66 0f fe c1          \tpaddd  %xmm1,%xmm0\n     ef4:\tf2 0f 70 c8 4e       \tpshuflw $0x4e,%xmm0,%xmm1\n     ef9:\t66 0f fe c1          \tpaddd  %xmm1,%xmm0\n     efd:\t66 0f 7e c0          \tmovd   %xmm0,%eax\n     f01:\tc3                   \tretq   \n     f02:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n     f09:\t00 \n     f0a:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)", "code_s": "__int64 __fastcall x264_10_pixel_vsad_sse2(const __m128i *<span class=\"supfact\">a1</span>,\n                                           __int64 <span class=\"supfact\">a2</span>,\n                                           int <span class=\"supfact\">a3</span>) {\n  __m128i v3;\n  __m128i v4;\n  __m128i v5;\n  __m128i v6;\n  const __m128i *v7;\n  __m128i v8;\n  __m128i v9;\n  __m128i v10;\n  int v11;\n  __m128i v12;\n  __m128i v13;\n  __m128i <span class=\"supfact\">v14</span>;\n  __m128i <span class=\"supfact\">v15</span>;\n  __m128i v16;\n  __m128i v17;\n  __m128i v18;\n  __m128i v19;\n  bool <span class=\"supfact\">v20</span>;\n  __m128 v21;\n  __m128 v22;\n  __m128i v23;\n  v3 = _mm_load_si128(<span class=\"supfact\">a1</span>);\n  v4 = _mm_load_si128(<span class=\"supfact\">a1</span> + Number);\n  v5 = _mm_load_si128((const __m128i *)((char *)<span class=\"supfact\">a1</span> +\n                                        Number * <span class=\"supfact\">a2</span>));\n  v6 = _mm_load_si128((const __m128i *)((char *)<span class=\"supfact\">a1</span> +\n                                        Number * <span class=\"supfact\">a2</span> + Number));\n  v7 = (const __m128i *)((char *)<span class=\"supfact\">a1</span> +\n                         Number * <span class=\"supfact\">a2</span>);\n  v8 = _mm_sub_epi16(v3, v5);\n  v9 = _mm_sub_epi16(v4, v6);\n  v10 = _mm_add_epi16(_mm_max_epi16(v8, _mm_sub_epi16((__m128i)Number L, v8)),\n                      _mm_max_epi16(v9, _mm_sub_epi16((__m128i)Number L, v9)));\n  v11 = <span class=\"supfact\">a3</span> - Number;\n  if (v11) {\n    do {\n      v12 = _mm_load_si128(v7);\n      v13 = _mm_load_si128(v7 + Number);\n      <span class=\"supfact\">v14</span> = _mm_load_si128(\n          (const __m128i *)((char *)v7 + Number * <span class=\"supfact\">a2</span>));\n      <span class=\"supfact\">v15</span> = _mm_load_si128(\n          (const __m128i *)((char *)v7 + Number * <span class=\"supfact\">a2</span> + Number));\n      v7 = (const __m128i *)((char *)v7 + Number * <span class=\"supfact\">a2</span>);\n      v16 = _mm_sub_epi16(v5, v12);\n      v17 = _mm_sub_epi16(v6, v13);\n      v18 = _mm_sub_epi16(v12, <span class=\"supfact\">v14</span>);\n      v19 = _mm_sub_epi16(v13, <span class=\"supfact\">v15</span>);\n      v10 = _mm_add_epi16(\n          _mm_add_epi16(\n              _mm_add_epi16(\n                  _mm_add_epi16(\n                      v10, _mm_max_epi16(\n                               v16, _mm_sub_epi16((__m128i)Number L, v16))),\n                  _mm_max_epi16(v17, _mm_sub_epi16((__m128i)Number L, v17))),\n              _mm_max_epi16(v18, _mm_sub_epi16((__m128i)Number L, v18))),\n          _mm_max_epi16(v19, _mm_sub_epi16((__m128i)Number L, v19)));\n      v5 = <span class=\"supfact\">v14</span>;\n      v6 = <span class=\"supfact\">v15</span>;\n      <span class=\"supfact\">v20</span> = v11 <= Number;\n      v11 -= Number;\n    } while (!<span class=\"supfact\">v20</span>);\n  }\n  v21 = (__m128)_mm_srli_epi32(v10, Number);\n  v22 = (__m128)_mm_add_epi32(\n      _mm_srli_epi32(_mm_slli_epi32(v10, Number), Number), (__m128i)v21);\n  v23 = _mm_add_epi32((__m128i)v22, (__m128i)_mm_movehl_ps(v21, v22));\n  return (unsigned int)_mm_cvtsi128_si32(\n      _mm_add_epi32(v23, _mm_shufflelo_epi16(v23, Number)));\n}", "code_t": "__int64 __fastcall x264_10_pixel_vsad_sse2(const __m128i *<span class=\"supfact\">a1</span>,\n                                           __int64 <span class=\"supfact\">a2</span>,\n                                           int <span class=\"supfact\">a3</span>) {\n  __m128i v3;\n  __m128i v4;\n  __m128i v5;\n  __m128i v6;\n  const __m128i *v7;\n  __m128i v8;\n  __m128i v9;\n  __m128i v10;\n  int v11;\n  __m128i v12;\n  __m128i v13;\n  __m128i <span class=\"supfact\">v14</span>;\n  __m128i <span class=\"supfact\">v15</span>;\n  __m128i v16;\n  __m128i v17;\n  __m128i v18;\n  __m128i v19;\n  bool <span class=\"supfact\">v20</span>;\n  __m128 v21;\n  __m128 v22;\n  __m128i v23;\n  v3 = _mm_load_si128(<span class=\"supfact\">a1</span>);\n  v4 = _mm_load_si128(<span class=\"supfact\">a1</span> + Number);\n  v5 = _mm_load_si128((const __m128i *)((char *)<span class=\"supfact\">a1</span> +\n                                        Number * <span class=\"supfact\">a2</span>));\n  v6 = _mm_load_si128((const __m128i *)((char *)<span class=\"supfact\">a1</span> +\n                                        Number * <span class=\"supfact\">a2</span> + Number));\n  v7 = (const __m128i *)((char *)<span class=\"supfact\">a1</span> +\n                         Number * <span class=\"supfact\">a2</span>);\n  v8 = _mm_sub_epi16(v3, v5);\n  v9 = _mm_sub_epi16(v4, v6);\n  v10 = _mm_add_epi16(_mm_max_epi16(v8, _mm_sub_epi16((__m128i)Number L, v8)),\n                      _mm_max_epi16(v9, _mm_sub_epi16((__m128i)Number L, v9)));\n  v11 = <span class=\"supfact\">a3</span> - Number;\n  if (v11) {\n    do {\n      v12 = _mm_load_si128(v7);\n      v13 = _mm_load_si128(v7 + Number);\n      <span class=\"supfact\">v14</span> = _mm_load_si128(\n          (const __m128i *)((char *)v7 + Number * <span class=\"supfact\">a2</span>));\n      <span class=\"supfact\">v15</span> = _mm_load_si128(\n          (const __m128i *)((char *)v7 + Number * <span class=\"supfact\">a2</span> + Number));\n      v7 = (const __m128i *)((char *)v7 + Number * <span class=\"supfact\">a2</span>);\n      v16 = _mm_sub_epi16(v5, v12);\n      v17 = _mm_sub_epi16(v6, v13);\n      v18 = _mm_sub_epi16(v12, <span class=\"supfact\">v14</span>);\n      v19 = _mm_sub_epi16(v13, <span class=\"supfact\">v15</span>);\n      v10 = _mm_add_epi16(\n          _mm_add_epi16(\n              _mm_add_epi16(\n                  _mm_add_epi16(\n                      v10, _mm_max_epi16(\n                               v16, _mm_sub_epi16((__m128i)Number L, v16))),\n                  _mm_max_epi16(v17, _mm_sub_epi16((__m128i)Number L, v17))),\n              _mm_max_epi16(v18, _mm_sub_epi16((__m128i)Number L, v18))),\n          _mm_max_epi16(v19, _mm_sub_epi16((__m128i)Number L, v19)));\n      v5 = <span class=\"supfact\">v14</span>;\n      v6 = <span class=\"supfact\">v15</span>;\n      <span class=\"supfact\">v20</span> = v11 <= Number;\n      v11 -= Number;\n    } while (!<span class=\"supfact\">v20</span>);\n  }\n  v21 = (__m128)_mm_srli_epi32(v10, Number);\n  v22 = (__m128)_mm_add_epi32(\n      _mm_srli_epi32(_mm_slli_epi32(v10, Number), Number), (__m128i)v21);\n  v23 = _mm_add_epi32((__m128i)v22, (__m128i)_mm_movehl_ps(v21, v22));\n  return (unsigned int)_mm_cvtsi128_si32(\n      _mm_add_epi32(v23, _mm_shufflelo_epi16(v23, Number)));\n}", "var": [{"name": "a1", "type": "__m128i *", "pred_name": "a1", "ref_name": "a1", "ref_type": "const __m128i *"}, {"name": "a2", "type": "const __m128i *", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "a3", "type": "int", "pred_name": "a3", "ref_name": "a3", "ref_type": "int"}, {"name": "v14", "type": "void", "pred_name": "v14", "ref_name": "v14", "ref_type": "void"}, {"name": "v15", "type": "void", "pred_name": "v15", "ref_name": "v15", "ref_type": "void"}, {"name": "v20", "type": "bool", "pred_name": "v20", "ref_name": "v20", "ref_type": "bool"}], "body_in_train": false}, {"repo_owner": "abgoyal-archive", "repo_name": "OT_5035D", "path": "abgoyal-archive/OT_5035D/64c8052f86c4c434ad89b74efc40dc5a15e973bee9c36812bb8e2156cd4262e3", "path_in_repo": "abgoyal-archive/OT_5035D/kernel/tools/power/x86/x86_energy_perf_policy/x86_energy_perf_policy", "objdump": "00000000004017e4 <print_msr>:\n  4017e4:\t55                   \tpush   %rbp\n  4017e5:\t48 89 e5             \tmov    %rsp,%rbp\n  4017e8:\t48 83 ec 10          \tsub    $0x10,%rsp\n  4017ec:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n  4017ef:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4017f2:\tbe b0 01 00 00       \tmov    $0x1b0,%esi\n  4017f7:\t89 c7                \tmov    %eax,%edi\n  4017f9:\te8 11 fe ff ff       \tcallq  40160f <get_msr>\n  4017fe:\t48 89 c2             \tmov    %rax,%rdx\n  401801:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401804:\t89 c6                \tmov    %eax,%esi\n  401806:\tbf af 21 40 00       \tmov    $0x4021af,%edi\n  40180b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401810:\te8 3b f8 ff ff       \tcallq  401050 <printf@plt>\n  401815:\t90                   \tnop\n  401816:\tc9                   \tleaveq \n  401817:\tc3                   \tretq   ", "code_s": "int __fastcall print_msr(unsigned int <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = get_msr(<span class=\"supfact\">a1</span>, Number);\n  return printf(String, <span class=\"supfact\">a1</span>, <span class=\"supfact\">v1</span>);\n}", "code_t": "void __cdecl print_msr(int <span class=\"supfact\">cpu</span>) {\n  unsigned __int64 <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = get_msr(<span class=\"supfact\">cpu</span>, Number);\n  printf(String, (unsigned int)<span class=\"supfact\">cpu</span>, <span class=\"supfact\">v1</span>);\n}", "var": [{"name": "a1", "type": "int", "pred_name": "cpu", "ref_name": "cpu", "ref_type": "int"}, {"name": "v1", "type": "unsigned __int64", "pred_name": "v1", "ref_name": "v1", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "Upstream-Kernels", "repo_name": "jf", "path": "Upstream-Kernels/jf/78a5c25d415dd1ee0d8d94a1325ce3beff1a23f81f2772e34e60ff36b352a993", "path_in_repo": "Upstream-Kernels/jf/tools/perf/builtin-lock.o", "objdump": "0000000000000f41 <report_lock_contended_event>:\n     f41:\t55                   \tpush   %rbp\n     f42:\t48 89 e5             \tmov    %rsp,%rbp\n     f45:\t48 83 ec 50          \tsub    $0x50,%rsp\n     f49:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     f4d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     f51:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n     f54:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n     f58:\t4c 89 45 b8          \tmov    %r8,-0x48(%rbp)\n     f5c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     f63:\t00 00 \n     f65:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     f69:\t31 c0                \txor    %eax,%eax\n     f6b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f6f:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     f73:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f77:\t48 8b 00             \tmov    (%rax),%rax\n     f7a:\t48 89 d6             \tmov    %rdx,%rsi\n     f7d:\t48 89 c7             \tmov    %rax,%rdi\n     f80:\te8 ff f9 ff ff       \tcallq  984 <lock_stat_findnew>\n     f85:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     f89:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f8d:\t8b 40 68             \tmov    0x68(%rax),%eax\n     f90:\t85 c0                \ttest   %eax,%eax\n     f92:\t0f 85 d1 00 00 00    \tjne    1069 <report_lock_contended_event+0x128>\n     f98:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f9f <report_lock_contended_event+0x5e>\n     f9f:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     fa3:\t8b 52 50             \tmov    0x50(%rdx),%edx\n     fa6:\t89 d7                \tmov    %edx,%edi\n     fa8:\tff d0                \tcallq  *%rax\n     faa:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     fae:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     fb2:\t48 8b 10             \tmov    (%rax),%rdx\n     fb5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     fb9:\t48 89 d6             \tmov    %rdx,%rsi\n     fbc:\t48 89 c7             \tmov    %rax,%rdi\n     fbf:\te8 fa fa ff ff       \tcallq  abe <get_seq>\n     fc4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     fc8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     fcc:\t8b 40 10             \tmov    0x10(%rax),%eax\n     fcf:\t83 f8 05             \tcmp    $0x5,%eax\n     fd2:\t7f 51                \tjg     1025 <report_lock_contended_event+0xe4>\n     fd4:\t83 f8 03             \tcmp    $0x3,%eax\n     fd7:\t7d 17                \tjge    ff0 <report_lock_contended_event+0xaf>\n     fd9:\t83 f8 02             \tcmp    $0x2,%eax\n     fdc:\t74 60                \tje     103e <report_lock_contended_event+0xfd>\n     fde:\t83 f8 02             \tcmp    $0x2,%eax\n     fe1:\t7f 42                \tjg     1025 <report_lock_contended_event+0xe4>\n     fe3:\t85 c0                \ttest   %eax,%eax\n     fe5:\t0f 84 81 00 00 00    \tje     106c <report_lock_contended_event+0x12b>\n     feb:\t83 f8 01             \tcmp    $0x1,%eax\n     fee:\t75 35                \tjne    1025 <report_lock_contended_event+0xe4>\n     ff0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     ff4:\tc7 40 68 01 00 00 00 \tmovl   $0x1,0x68(%rax)\n     ffb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1001 <report_lock_contended_event+0xc0>\n    1001:\t83 c0 01             \tadd    $0x1,%eax\n    1004:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 100a <report_lock_contended_event+0xc9>\n    100a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    100e:\t48 89 c7             \tmov    %rax,%rdi\n    1011:\te8 7a f1 ff ff       \tcallq  190 <list_del>\n    1016:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    101a:\t48 89 c7             \tmov    %rax,%rdi\n    101d:\te8 00 00 00 00       \tcallq  1022 <report_lock_contended_event+0xe1>\n    1022:\t90                   \tnop\n    1023:\teb 48                \tjmp    106d <report_lock_contended_event+0x12c>\n    1025:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    102a:\tba 3d 02 00 00       \tmov    $0x23d,%edx\n    102f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1034:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1039:\te8 00 00 00 00       \tcallq  103e <report_lock_contended_event+0xfd>\n    103e:\t90                   \tnop\n    103f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1043:\tc7 40 10 05 00 00 00 \tmovl   $0x5,0x10(%rax)\n    104a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    104e:\t8b 40 40             \tmov    0x40(%rax),%eax\n    1051:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1054:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1058:\t89 50 40             \tmov    %edx,0x40(%rax)\n    105b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    105f:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    1063:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    1067:\teb 04                \tjmp    106d <report_lock_contended_event+0x12c>\n    1069:\t90                   \tnop\n    106a:\teb 01                \tjmp    106d <report_lock_contended_event+0x12c>\n    106c:\t90                   \tnop\n    106d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1071:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1078:\t00 00 \n    107a:\t74 05                \tje     1081 <report_lock_contended_event+0x140>\n    107c:\te8 00 00 00 00       \tcallq  1081 <report_lock_contended_event+0x140>\n    1081:\tc9                   \tleaveq \n    1082:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall report_lock_contended_event(\n    __int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n    __int64 <span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>,\n    __int64 <span class=\"supfact\">a5</span>) {\n  int <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  _DWORD *<span class=\"supfact\">ptr</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  <span class=\"supfact\">v9</span> =\n      lock_stat_findnew(*(_QWORD *)<span class=\"supfact\">a1</span>,\n                        *(const char **)(<span class=\"supfact\">a1</span> + Number));\n  if (!*(_DWORD *)(<span class=\"supfact\">v9</span> + Number)) {\n    <span class=\"supfact\">v10</span> =\n        thread_stat_findnew(*(unsigned int *)(<span class=\"supfact\">a5</span> + Number));\n    <span class=\"supfact\">ptr</span> =\n        get_seq(<span class=\"supfact\">v10</span>, *(_QWORD *)<span class=\"supfact\">a1</span>);\n    <span class=\"supfact\">v5</span> = <span class=\"supfact\">ptr</span>[Number];\n    if (<span class=\"supfact\">v5</span> > Number)\n      goto LABEL_8;\n    if (<span class=\"supfact\">v5</span> >= Number) {\n    LABEL_7:\n      *(_DWORD *)(<span class=\"supfact\">v9</span> + Number) = Number;\n      ++dword_122A8;\n      list_del((__int64)<span class=\"supfact\">ptr</span>);\n      free(<span class=\"supfact\">ptr</span>);\n      return __readfsqword(Number) ^ <span class=\"supfact\">v12</span>;\n    }\n    if (<span class=\"supfact\">v5</span> == Number) {\n      <span class=\"supfact\">ptr</span>[Number] = Number;\n      ++*(_DWORD *)(<span class=\"supfact\">v9</span> + Number);\n      *((_QWORD *)<span class=\"supfact\">ptr</span> + Number) = <span class=\"supfact\">a4</span>;\n      return __readfsqword(Number) ^ <span class=\"supfact\">v12</span>;\n    }\n    if (<span class=\"supfact\">v5</span>) {\n      if (<span class=\"supfact\">v5</span> == Number)\n        goto LABEL_7;\n    LABEL_8:\n      _assert_fail(String, String, Number, String);\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v12</span>;\n}", "code_t": "void __cdecl report_lock_contended_event(\n    trace_contended_event *<span class=\"supfact\">contended_event</span>,\n    event *<span class=\"supfact\">__event</span>, int <span class=\"supfact\">cpu</span>,\n    u64 <span class=\"supfact\">timestamp</span>,\n    <span class=\"supfact\">thread</span> *<span class=\"supfact\">thread</span>) {\n  int <span class=\"supfact\">v5</span>;\n  lock_stat *<span class=\"supfact\">ls</span>;\n  thread_stat *<span class=\"supfact\">ts</span>;\n  lock_seq_stat *<span class=\"supfact\">seq</span>;\n  <span class=\"supfact\">ls</span> = lock_stat_findnew(<span class=\"supfact\">contended_event</span>->addr,\n                                         <span class=\"supfact\">contended_event</span>->name);\n  if (!<span class=\"supfact\">ls</span>->discard) {\n    <span class=\"supfact\">ts</span> = thread_stat_findnew(<span class=\"supfact\">thread</span>->pid);\n    <span class=\"supfact\">seq</span> =\n        get_seq(<span class=\"supfact\">ts</span>, <span class=\"supfact\">contended_event</span>->addr);\n    <span class=\"supfact\">v5</span> = <span class=\"supfact\">seq</span>->state;\n    if (<span class=\"supfact\">v5</span> > Number)\n      goto LABEL_8;\n    if (<span class=\"supfact\">v5</span> >= Number) {\n    LABEL_7:\n      <span class=\"supfact\">ls</span>->discard = Number;\n      ++bad_hist[Number];\n      list_del(&<span class=\"supfact\">seq</span>->list);\n      free(<span class=\"supfact\">seq</span>);\n      return;\n    }\n    if (<span class=\"supfact\">v5</span> != Number) {\n      if (!<span class=\"supfact\">v5</span>)\n        return;\n      if (<span class=\"supfact\">v5</span> == Number)\n        goto LABEL_7;\n    LABEL_8:\n      _assert_fail(String, String, Number, String);\n    }\n    <span class=\"supfact\">seq</span>->state = Number;\n    ++<span class=\"supfact\">ls</span>->nr_contended;\n    <span class=\"supfact\">seq</span>->prev_event_time = <span class=\"supfact\">timestamp</span>;\n  }\n}", "var": [{"name": "a1", "type": "trace_contended_event *", "pred_name": "contended_event", "ref_name": "contended_event", "ref_type": "trace_contended_event *"}, {"name": "a2", "type": "event *", "pred_name": "__event", "ref_name": "__event", "ref_type": "event *"}, {"name": "a3", "type": "int", "pred_name": "cpu", "ref_name": "cpu", "ref_type": "int"}, {"name": "a4", "type": "u64", "pred_name": "timestamp", "ref_name": "timestamp", "ref_type": "u64"}, {"name": "a5", "type": "thread *", "pred_name": "thread", "ref_name": "thread", "ref_type": "thread *"}, {"name": "v5", "type": "int", "pred_name": "v5", "ref_name": "v5", "ref_type": "int"}, {"name": "v9", "type": "lock_stat *", "pred_name": "ls", "ref_name": "ls", "ref_type": "lock_stat *"}, {"name": "v10", "type": "thread_stat *", "pred_name": "ts", "ref_name": "ts", "ref_type": "thread_stat *"}, {"name": "ptr", "type": "lock_seq_stat *", "pred_name": "seq", "ref_name": "seq", "ref_type": "lock_seq_stat *"}, {"name": "v12", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "awaterma", "repo_name": "flite-bin", "path": "awaterma/flite-bin/d4340175b1368e272e742cf139f3895ec05a351de8daf209ef3e52ef17dbeafe", "path_in_repo": "awaterma/flite-bin/flite-1.4-release/testsuite/record_in_noise", "objdump": "", "code_s": "ssize_t read(int <span class=\"supfact\">fd</span>, void *<span class=\"supfact\">buf</span>,\n             size_t <span class=\"supfact\">nbytes</span>) {\n  return read(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, <span class=\"supfact\">nbytes</span>);\n}", "code_t": "ssize_t read(int <span class=\"supfact\">fd</span>, void *<span class=\"supfact\">buf</span>,\n             size_t <span class=\"supfact\">nbytes</span>) {\n  return read(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, <span class=\"supfact\">nbytes</span>);\n}", "var": [{"name": "fd", "type": "int", "pred_name": "fd", "ref_name": "fd", "ref_type": "int"}, {"name": "buf", "type": "void *", "pred_name": "buf", "ref_name": "buf", "ref_type": "void *"}, {"name": "nbytes", "type": "size_t", "pred_name": "nbytes", "ref_name": "nbytes", "ref_type": "size_t"}], "body_in_train": true}, {"repo_owner": "aschils", "repo_name": "packetdrill_mptcp", "path": "aschils/packetdrill_mptcp/f12586e93c870ce6d623d457774db79bece9afbd194c2c1db368116c352992a8", "path_in_repo": "aschils/packetdrill_mptcp/gtests/net/packetdrill/packet_to_string_test", "objdump": "", "code_s": "ssize_t recv(int <span class=\"supfact\">fd</span>, void *<span class=\"supfact\">buf</span>,\n             size_t <span class=\"supfact\">n</span>, int <span class=\"supfact\">flags</span>) {\n  return recv(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, <span class=\"supfact\">n</span>,\n              <span class=\"supfact\">flags</span>);\n}", "code_t": "ssize_t recv(int <span class=\"supfact\">fd</span>, void *<span class=\"supfact\">buf</span>,\n             size_t <span class=\"supfact\">n</span>, int <span class=\"supfact\">flags</span>) {\n  return recv(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, <span class=\"supfact\">n</span>,\n              <span class=\"supfact\">flags</span>);\n}", "var": [{"name": "fd", "type": "int", "pred_name": "fd", "ref_name": "fd", "ref_type": "int"}, {"name": "buf", "type": "void *", "pred_name": "buf", "ref_name": "buf", "ref_type": "void *"}, {"name": "n", "type": "size_t", "pred_name": "n", "ref_name": "n", "ref_type": "size_t"}, {"name": "flags", "type": "int", "pred_name": "flags", "ref_name": "flags", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "vgmrips", "repo_name": "vgmplay", "path": "vgmrips/vgmplay/f6a47779b6f58b9cba03105c7b94c7d9d4c75dcf2aa895dde4ea38d0468150e7", "path_in_repo": "vgmrips/vgmplay/VGMPlay/obj/VGMPlay.o", "objdump": "0000000000000877 <gcd>:\n     877:\t55                   \tpush   %rbp\n     878:\t48 89 e5             \tmov    %rsp,%rbp\n     87b:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n     87e:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n     881:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     885:\t74 06                \tje     88d <gcd+0x16>\n     887:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n     88b:\t75 08                \tjne    895 <gcd+0x1e>\n     88d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     890:\t0b 45 e8             \tor     -0x18(%rbp),%eax\n     893:\teb 78                \tjmp    90d <gcd+0x96>\n     895:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     89c:\teb 0a                \tjmp    8a8 <gcd+0x31>\n     89e:\td1 6d ec             \tshrl   -0x14(%rbp)\n     8a1:\td1 6d e8             \tshrl   -0x18(%rbp)\n     8a4:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     8a8:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     8ab:\t0b 45 e8             \tor     -0x18(%rbp),%eax\n     8ae:\t83 e0 01             \tand    $0x1,%eax\n     8b1:\t85 c0                \ttest   %eax,%eax\n     8b3:\t74 e9                \tje     89e <gcd+0x27>\n     8b5:\teb 03                \tjmp    8ba <gcd+0x43>\n     8b7:\td1 6d ec             \tshrl   -0x14(%rbp)\n     8ba:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     8bd:\t83 e0 01             \tand    $0x1,%eax\n     8c0:\t85 c0                \ttest   %eax,%eax\n     8c2:\t74 f3                \tje     8b7 <gcd+0x40>\n     8c4:\teb 03                \tjmp    8c9 <gcd+0x52>\n     8c6:\td1 6d e8             \tshrl   -0x18(%rbp)\n     8c9:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     8cc:\t83 e0 01             \tand    $0x1,%eax\n     8cf:\t85 c0                \ttest   %eax,%eax\n     8d1:\t74 f3                \tje     8c6 <gcd+0x4f>\n     8d3:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     8d6:\t3b 45 e8             \tcmp    -0x18(%rbp),%eax\n     8d9:\t73 08                \tjae    8e3 <gcd+0x6c>\n     8db:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     8de:\t29 45 e8             \tsub    %eax,-0x18(%rbp)\n     8e1:\teb 15                \tjmp    8f8 <gcd+0x81>\n     8e3:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     8e6:\t2b 45 e8             \tsub    -0x18(%rbp),%eax\n     8e9:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     8ec:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     8ef:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     8f2:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     8f5:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n     8f8:\td1 6d e8             \tshrl   -0x18(%rbp)\n     8fb:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n     8ff:\t75 c8                \tjne    8c9 <gcd+0x52>\n     901:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     904:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n     907:\t89 c1                \tmov    %eax,%ecx\n     909:\td3 e2                \tshl    %cl,%edx\n     90b:\t89 d0                \tmov    %edx,%eax\n     90d:\t5d                   \tpop    %rbp\n     90e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gcd(unsigned int <span class=\"supfact\">a1</span>,\n                       unsigned int <span class=\"supfact\">a2</span>) {\n  unsigned int v3;\n  unsigned int v4;\n  unsigned int <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  char <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v5</span> = <span class=\"supfact\">a1</span>;\n  v3 = <span class=\"supfact\">a2</span>;\n  if (!<span class=\"supfact\">a1</span> || !<span class=\"supfact\">a2</span>)\n    return <span class=\"supfact\">a2</span> | <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v7</span> = Number;\n  while ((((unsigned __int8)v3 | (unsigned __int8)<span class=\"supfact\">v5</span>) &\n          Number) == Number) {\n    <span class=\"supfact\">v5</span> >>= Number;\n    v3 >>= Number;\n    ++<span class=\"supfact\">v7</span>;\n  }\n  while ((<span class=\"supfact\">v5</span> & Number) == Number)\n    <span class=\"supfact\">v5</span> >>= Number;\n  do {\n    while ((v3 & Number) == Number)\n      v3 >>= Number;\n    if (<span class=\"supfact\">v5</span> >= v3) {\n      <span class=\"supfact\">v6</span> = <span class=\"supfact\">v5</span> - v3;\n      <span class=\"supfact\">v5</span> = v3;\n      v4 = <span class=\"supfact\">v6</span>;\n    } else {\n      v4 = v3 - <span class=\"supfact\">v5</span>;\n    }\n    v3 = v4 >> Number;\n  } while (v3);\n  return <span class=\"supfact\">v5</span> << <span class=\"supfact\">v7</span>;\n}", "code_t": "UINT32 __cdecl gcd(UINT32 <span class=\"supfact\">x</span>, UINT32 <span class=\"supfact\">y</span>) {\n  UINT32 ya;\n  UINT32 yb;\n  UINT32 <span class=\"supfact\">xa</span>;\n  UINT32 <span class=\"supfact\">diff</span>;\n  char <span class=\"supfact\">shift</span>;\n  <span class=\"supfact\">xa</span> = <span class=\"supfact\">x</span>;\n  ya = <span class=\"supfact\">y</span>;\n  if (!<span class=\"supfact\">x</span> || !<span class=\"supfact\">y</span>)\n    return <span class=\"supfact\">y</span> | <span class=\"supfact\">x</span>;\n  <span class=\"supfact\">shift</span> = Number;\n  while ((((unsigned __int8)ya | (unsigned __int8)<span class=\"supfact\">xa</span>) &\n          Number) == Number) {\n    <span class=\"supfact\">xa</span> >>= Number;\n    ya >>= Number;\n    ++<span class=\"supfact\">shift</span>;\n  }\n  while ((<span class=\"supfact\">xa</span> & Number) == Number)\n    <span class=\"supfact\">xa</span> >>= Number;\n  do {\n    while ((ya & Number) == Number)\n      ya >>= Number;\n    if (<span class=\"supfact\">xa</span> >= ya) {\n      <span class=\"supfact\">diff</span> = <span class=\"supfact\">xa</span> - ya;\n      <span class=\"supfact\">xa</span> = ya;\n      yb = <span class=\"supfact\">diff</span>;\n    } else {\n      yb = ya - <span class=\"supfact\">xa</span>;\n    }\n    ya = yb >> Number;\n  } while (ya);\n  return <span class=\"supfact\">xa</span> << <span class=\"supfact\">shift</span>;\n}", "var": [{"name": "a1", "type": "u32", "pred_name": "val", "ref_name": "x", "ref_type": "UINT32"}, {"name": "a2", "type": "int", "pred_name": "bits", "ref_name": "y", "ref_type": "UINT32"}, {"name": "v5", "type": "u32", "pred_name": "vala", "ref_name": "xa", "ref_type": "UINT32"}, {"name": "v6", "type": "u32", "pred_name": "product", "ref_name": "diff", "ref_type": "UINT32"}, {"name": "v7", "type": "char", "pred_name": "a", "ref_name": "shift", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "rogerq", "repo_name": "ltp-ddt", "path": "rogerq/ltp-ddt/e26e6bbcf215e07a5506a457eeb2172ed21bf1588099d9cf07b54b6f3a3184ab", "path_in_repo": "rogerq/ltp-ddt/testcases/open_posix_testsuite/conformance/interfaces/sigaction/4-46.run-test", "objdump": "", "code_s": "int sigaddset(sigset_t *<span class=\"supfact\">set</span>, int <span class=\"supfact\">signo</span>) {\n  return sigaddset(<span class=\"supfact\">set</span>, <span class=\"supfact\">signo</span>);\n}", "code_t": "int sigaddset(sigset_t *<span class=\"supfact\">set</span>, int <span class=\"supfact\">signo</span>) {\n  return sigaddset(<span class=\"supfact\">set</span>, <span class=\"supfact\">signo</span>);\n}", "var": [{"name": "set", "type": "sigset_t *", "pred_name": "set", "ref_name": "set", "ref_type": "sigset_t *"}, {"name": "signo", "type": "int", "pred_name": "signo", "ref_name": "signo", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "wtfbbqhax", "repo_name": "thz", "path": "wtfbbqhax/thz/7304c5729297575adfba87c00138dfa181258e99f5b1121ea35bff86f4f09b2d", "path_in_repo": "wtfbbqhax/thz//build/release-linux-x86_64/base/game/g_maprotation.o", "objdump": "0000000000000788 <G_ParseMapRotationFile>:\n     788:\t48 81 ec a8 4e 00 00 \tsub    $0x4ea8,%rsp\n     78f:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     794:\tc7 84 24 98 4e 00 00 \tmovl   $0x0,0x4e98(%rsp)\n     79b:\t00 00 00 00 \n     79f:\t48 8d 4c 24 1c       \tlea    0x1c(%rsp),%rcx\n     7a4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     7a9:\tba 00 00 00 00       \tmov    $0x0,%edx\n     7ae:\t48 89 ce             \tmov    %rcx,%rsi\n     7b1:\t48 89 c7             \tmov    %rax,%rdi\n     7b4:\te8 00 00 00 00       \tcallq  7b9 <G_ParseMapRotationFile+0x31>\n     7b9:\t89 84 24 94 4e 00 00 \tmov    %eax,0x4e94(%rsp)\n     7c0:\t83 bc 24 94 4e 00 00 \tcmpl   $0x0,0x4e94(%rsp)\n     7c7:\t00 \n     7c8:\t7f 0a                \tjg     7d4 <G_ParseMapRotationFile+0x4c>\n     7ca:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     7cf:\te9 9c 02 00 00       \tjmpq   a70 <G_ParseMapRotationFile+0x2e8>\n     7d4:\t8b 84 24 94 4e 00 00 \tmov    0x4e94(%rsp),%eax\n     7db:\t3d 1e 4e 00 00       \tcmp    $0x4e1e,%eax\n     7e0:\t76 23                \tjbe    805 <G_ParseMapRotationFile+0x7d>\n     7e2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     7e7:\t48 89 c6             \tmov    %rax,%rsi\n     7ea:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 7f1 <G_ParseMapRotationFile+0x69>\n     7f1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     7f6:\te8 00 00 00 00       \tcallq  7fb <G_ParseMapRotationFile+0x73>\n     7fb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     800:\te9 6b 02 00 00       \tjmpq   a70 <G_ParseMapRotationFile+0x2e8>\n     805:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n     809:\t8b 8c 24 94 4e 00 00 \tmov    0x4e94(%rsp),%ecx\n     810:\t48 8d 44 24 60       \tlea    0x60(%rsp),%rax\n     815:\t89 ce                \tmov    %ecx,%esi\n     817:\t48 89 c7             \tmov    %rax,%rdi\n     81a:\te8 00 00 00 00       \tcallq  81f <G_ParseMapRotationFile+0x97>\n     81f:\t8b 84 24 94 4e 00 00 \tmov    0x4e94(%rsp),%eax\n     826:\t48 98                \tcltq   \n     828:\tc6 44 04 60 00       \tmovb   $0x0,0x60(%rsp,%rax,1)\n     82d:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n     831:\t89 c7                \tmov    %eax,%edi\n     833:\te8 00 00 00 00       \tcallq  838 <G_ParseMapRotationFile+0xb0>\n     838:\t48 8d 44 24 60       \tlea    0x60(%rsp),%rax\n     83d:\t48 89 84 24 80 4e 00 \tmov    %rax,0x4e80(%rsp)\n     844:\t00 \n     845:\t48 8d 84 24 80 4e 00 \tlea    0x4e80(%rsp),%rax\n     84c:\t00 \n     84d:\t48 89 c7             \tmov    %rax,%rdi\n     850:\te8 00 00 00 00       \tcallq  855 <G_ParseMapRotationFile+0xcd>\n     855:\t48 89 84 24 88 4e 00 \tmov    %rax,0x4e88(%rsp)\n     85c:\t00 \n     85d:\t48 83 bc 24 88 4e 00 \tcmpq   $0x0,0x4e88(%rsp)\n     864:\t00 00 \n     866:\t0f 84 fb 01 00 00    \tje     a67 <G_ParseMapRotationFile+0x2df>\n     86c:\t48 8b 84 24 88 4e 00 \tmov    0x4e88(%rsp),%rax\n     873:\t00 \n     874:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 87b <G_ParseMapRotationFile+0xf3>\n     87b:\t48 89 c7             \tmov    %rax,%rdi\n     87e:\te8 00 00 00 00       \tcallq  883 <G_ParseMapRotationFile+0xfb>\n     883:\t85 c0                \ttest   %eax,%eax\n     885:\t0f 84 df 01 00 00    \tje     a6a <G_ParseMapRotationFile+0x2e2>\n     88b:\t48 8b 84 24 88 4e 00 \tmov    0x4e88(%rsp),%rax\n     892:\t00 \n     893:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 89a <G_ParseMapRotationFile+0x112>\n     89a:\t48 89 c7             \tmov    %rax,%rdi\n     89d:\te8 00 00 00 00       \tcallq  8a2 <G_ParseMapRotationFile+0x11a>\n     8a2:\t85 c0                \ttest   %eax,%eax\n     8a4:\t0f 85 69 01 00 00    \tjne    a13 <G_ParseMapRotationFile+0x28b>\n     8aa:\t83 bc 24 98 4e 00 00 \tcmpl   $0x0,0x4e98(%rsp)\n     8b1:\t00 \n     8b2:\t0f 84 43 01 00 00    \tje     9fb <G_ParseMapRotationFile+0x273>\n     8b8:\tc7 84 24 9c 4e 00 00 \tmovl   $0x0,0x4e9c(%rsp)\n     8bf:\t00 00 00 00 \n     8c3:\teb 59                \tjmp    91e <G_ParseMapRotationFile+0x196>\n     8c5:\t8b 84 24 9c 4e 00 00 \tmov    0x4e9c(%rsp),%eax\n     8cc:\t48 98                \tcltq   \n     8ce:\t48 69 c0 48 66 01 00 \timul   $0x16648,%rax,%rax\n     8d5:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 8dc <G_ParseMapRotationFile+0x154>\n     8dc:\t48 01 c2             \tadd    %rax,%rdx\n     8df:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n     8e4:\t48 89 c6             \tmov    %rax,%rsi\n     8e7:\t48 89 d7             \tmov    %rdx,%rdi\n     8ea:\te8 00 00 00 00       \tcallq  8ef <G_ParseMapRotationFile+0x167>\n     8ef:\t85 c0                \ttest   %eax,%eax\n     8f1:\t75 23                \tjne    916 <G_ParseMapRotationFile+0x18e>\n     8f3:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n     8f8:\t48 89 c6             \tmov    %rax,%rsi\n     8fb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 902 <G_ParseMapRotationFile+0x17a>\n     902:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     907:\te8 00 00 00 00       \tcallq  90c <G_ParseMapRotationFile+0x184>\n     90c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     911:\te9 5a 01 00 00       \tjmpq   a70 <G_ParseMapRotationFile+0x2e8>\n     916:\t83 84 24 9c 4e 00 00 \taddl   $0x1,0x4e9c(%rsp)\n     91d:\t01 \n     91e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 924 <G_ParseMapRotationFile+0x19c>\n     924:\t39 84 24 9c 4e 00 00 \tcmp    %eax,0x4e9c(%rsp)\n     92b:\t7c 98                \tjl     8c5 <G_ParseMapRotationFile+0x13d>\n     92d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 933 <G_ParseMapRotationFile+0x1ab>\n     933:\t48 98                \tcltq   \n     935:\t48 69 c0 48 66 01 00 \timul   $0x16648,%rax,%rax\n     93c:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 943 <G_ParseMapRotationFile+0x1bb>\n     943:\t48 8d 0c 10          \tlea    (%rax,%rdx,1),%rcx\n     947:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n     94c:\tba 40 00 00 00       \tmov    $0x40,%edx\n     951:\t48 89 c6             \tmov    %rax,%rsi\n     954:\t48 89 cf             \tmov    %rcx,%rdi\n     957:\te8 00 00 00 00       \tcallq  95c <G_ParseMapRotationFile+0x1d4>\n     95c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 962 <G_ParseMapRotationFile+0x1da>\n     962:\t48 98                \tcltq   \n     964:\t48 69 c0 48 66 01 00 \timul   $0x16648,%rax,%rax\n     96b:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 972 <G_ParseMapRotationFile+0x1ea>\n     972:\t48 01 c2             \tadd    %rax,%rdx\n     975:\t48 8d 84 24 80 4e 00 \tlea    0x4e80(%rsp),%rax\n     97c:\t00 \n     97d:\t48 89 c6             \tmov    %rax,%rsi\n     980:\t48 89 d7             \tmov    %rdx,%rdi\n     983:\te8 5a f8 ff ff       \tcallq  1e2 <G_ParseMapRotation>\n     988:\t85 c0                \ttest   %eax,%eax\n     98a:\t75 28                \tjne    9b4 <G_ParseMapRotationFile+0x22c>\n     98c:\t48 8d 54 24 20       \tlea    0x20(%rsp),%rdx\n     991:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     996:\t48 89 c6             \tmov    %rax,%rsi\n     999:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 9a0 <G_ParseMapRotationFile+0x218>\n     9a0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9a5:\te8 00 00 00 00       \tcallq  9aa <G_ParseMapRotationFile+0x222>\n     9aa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9af:\te9 bc 00 00 00       \tjmpq   a70 <G_ParseMapRotationFile+0x2e8>\n     9b4:\tc7 84 24 98 4e 00 00 \tmovl   $0x0,0x4e98(%rsp)\n     9bb:\t00 00 00 00 \n     9bf:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 9c5 <G_ParseMapRotationFile+0x23d>\n     9c5:\t83 f8 10             \tcmp    $0x10,%eax\n     9c8:\t75 20                \tjne    9ea <G_ParseMapRotationFile+0x262>\n     9ca:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     9cf:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 9d6 <G_ParseMapRotationFile+0x24e>\n     9d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9db:\te8 00 00 00 00       \tcallq  9e0 <G_ParseMapRotationFile+0x258>\n     9e0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9e5:\te9 86 00 00 00       \tjmpq   a70 <G_ParseMapRotationFile+0x2e8>\n     9ea:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 9f0 <G_ParseMapRotationFile+0x268>\n     9f0:\t83 c0 01             \tadd    $0x1,%eax\n     9f3:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 9f9 <G_ParseMapRotationFile+0x271>\n     9f9:\teb 67                \tjmp    a62 <G_ParseMapRotationFile+0x2da>\n     9fb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # a02 <G_ParseMapRotationFile+0x27a>\n     a02:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a07:\te8 00 00 00 00       \tcallq  a0c <G_ParseMapRotationFile+0x284>\n     a0c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a11:\teb 5d                \tjmp    a70 <G_ParseMapRotationFile+0x2e8>\n     a13:\t83 bc 24 98 4e 00 00 \tcmpl   $0x0,0x4e98(%rsp)\n     a1a:\t00 \n     a1b:\t75 2d                \tjne    a4a <G_ParseMapRotationFile+0x2c2>\n     a1d:\t48 8b 8c 24 88 4e 00 \tmov    0x4e88(%rsp),%rcx\n     a24:\t00 \n     a25:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n     a2a:\tba 40 00 00 00       \tmov    $0x40,%edx\n     a2f:\t48 89 ce             \tmov    %rcx,%rsi\n     a32:\t48 89 c7             \tmov    %rax,%rdi\n     a35:\te8 00 00 00 00       \tcallq  a3a <G_ParseMapRotationFile+0x2b2>\n     a3a:\tc7 84 24 98 4e 00 00 \tmovl   $0x1,0x4e98(%rsp)\n     a41:\t01 00 00 00 \n     a45:\te9 fb fd ff ff       \tjmpq   845 <G_ParseMapRotationFile+0xbd>\n     a4a:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # a51 <G_ParseMapRotationFile+0x2c9>\n     a51:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a56:\te8 00 00 00 00       \tcallq  a5b <G_ParseMapRotationFile+0x2d3>\n     a5b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a60:\teb 0e                \tjmp    a70 <G_ParseMapRotationFile+0x2e8>\n     a62:\te9 de fd ff ff       \tjmpq   845 <G_ParseMapRotationFile+0xbd>\n     a67:\t90                   \tnop\n     a68:\teb 01                \tjmp    a6b <G_ParseMapRotationFile+0x2e3>\n     a6a:\t90                   \tnop\n     a6b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     a70:\t48 81 c4 a8 4e 00 00 \tadd    $0x4ea8,%rsp\n     a77:\tc3                   \tretq   ", "code_s": "__int64 __fastcall G_ParseMapRotationFile(const char *<span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  unsigned int <span class=\"supfact\">v2</span>;\n  char <span class=\"supfact\">v3</span>[Number];\n  char <span class=\"supfact\">v4</span>[Number];\n  char *<span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v8</span> = Number;\n  <span class=\"supfact\">v7</span> =\n      trap_FS_FOpenFile(<span class=\"supfact\">a1</span>, &<span class=\"supfact\">v2</span>, Number L);\n  if ((int)<span class=\"supfact\">v7</span> <= Number)\n    return Number L;\n  if (<span class=\"supfact\">v7</span> <= Number) {\n    trap_FS_Read(<span class=\"supfact\">v4</span>, <span class=\"supfact\">v7</span>, <span class=\"supfact\">v2</span>);\n    <span class=\"supfact\">v4</span>[<span class=\"supfact\">v7</span>] = Number;\n    trap_FS_FCloseFile(<span class=\"supfact\">v2</span>);\n    <span class=\"supfact\">v5</span> = <span class=\"supfact\">v4</span>;\n    while (Number) {\n      <span class=\"supfact\">v6</span> = COM_Parse(&<span class=\"supfact\">v5</span>);\n      if (!<span class=\"supfact\">v6</span> ||\n          !(unsigned int)Q_stricmp(<span class=\"supfact\">v6</span>, &unk_167A20))\n        break;\n      if ((unsigned int)Q_stricmp(<span class=\"supfact\">v6</span>, String)) {\n        if (<span class=\"supfact\">v8</span>) {\n          G_Printf(String);\n          return Number L;\n        }\n        Q_strncpyz(<span class=\"supfact\">v3</span>, <span class=\"supfact\">v6</span>, Number L);\n        <span class=\"supfact\">v8</span> = Number;\n      } else {\n        if (!<span class=\"supfact\">v8</span>) {\n          G_Printf(String);\n          return Number L;\n        }\n        for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < dword_1679C0;\n             ++<span class=\"supfact\">i</span>) {\n          if (!(unsigned int)Q_stricmp((char *)&mapRotations +\n                                           Number * <span class=\"supfact\">i</span>,\n                                       <span class=\"supfact\">v3</span>)) {\n            G_Printf(String, <span class=\"supfact\">v3</span>);\n            return Number L;\n          }\n        }\n        Q_strncpyz((char *)&mapRotations + Number * dword_1679C0,\n                   <span class=\"supfact\">v3</span>, Number L);\n        if (!(unsigned int)G_ParseMapRotation((__int64)&mapRotations +\n                                                  Number * dword_1679C0,\n                                              (__int64)&<span class=\"supfact\">v5</span>)) {\n          G_Printf(String, <span class=\"supfact\">a1</span>, <span class=\"supfact\">v3</span>);\n          return Number L;\n        }\n        <span class=\"supfact\">v8</span> = Number;\n        if (dword_1679C0 == Number) {\n          G_Printf(String, Number L);\n          return Number L;\n        }\n        ++dword_1679C0;\n      }\n    }\n    <span class=\"supfact\">result</span> = Number L;\n  } else {\n    G_Printf(String, <span class=\"supfact\">a1</span>);\n    <span class=\"supfact\">result</span> = Number L;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "qboolean __cdecl G_ParseMapRotationFile(const char *<span class=\"supfact\">fileName</span>) {\n  qboolean <span class=\"supfact\">result</span>;\n  fileHandle_t <span class=\"supfact\">f</span>;\n  char <span class=\"supfact\">mrName</span>[Number];\n  char <span class=\"supfact\">text</span>[Number];\n  char *<span class=\"supfact\">text_p</span>;\n  char *<span class=\"supfact\">token</span>;\n  int <span class=\"supfact\">len</span>;\n  qboolean <span class=\"supfact\">mrNameSet</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">mrNameSet</span> = qfalse;\n  <span class=\"supfact\">len</span> =\n      trap_FS_FOpenFile(<span class=\"supfact\">fileName</span>, &<span class=\"supfact\">f</span>, Number L);\n  if (<span class=\"supfact\">len</span> <= Number)\n    return Number;\n  if ((unsigned int)<span class=\"supfact\">len</span> <= Number) {\n    trap_FS_Read(<span class=\"supfact\">text</span>, (unsigned int)<span class=\"supfact\">len</span>,\n                 (unsigned int)<span class=\"supfact\">f</span>);\n    <span class=\"supfact\">text</span>[<span class=\"supfact\">len</span>] = Number;\n    trap_FS_FCloseFile((unsigned int)<span class=\"supfact\">f</span>);\n    <span class=\"supfact\">text_p</span> = <span class=\"supfact\">text</span>;\n    while (Number) {\n      <span class=\"supfact\">token</span> = (char *)COM_Parse(&<span class=\"supfact\">text_p</span>);\n      if (!<span class=\"supfact\">token</span> ||\n          !(unsigned int)Q_stricmp(<span class=\"supfact\">token</span>, &unk_167A20))\n        break;\n      if ((unsigned int)Q_stricmp(<span class=\"supfact\">token</span>, String)) {\n        if (<span class=\"supfact\">mrNameSet</span>) {\n          G_Printf(String);\n          return Number;\n        }\n        Q_strncpyz(<span class=\"supfact\">mrName</span>, <span class=\"supfact\">token</span>, Number L);\n        <span class=\"supfact\">mrNameSet</span> = qtrue;\n      } else {\n        if (<span class=\"supfact\">mrNameSet</span> == qfalse) {\n          G_Printf(String);\n          return Number;\n        }\n        for (<span class=\"supfact\">i</span> = Number;\n             <span class=\"supfact\">i</span> < mapRotations.numRotations;\n             ++<span class=\"supfact\">i</span>) {\n          if (!(unsigned int)Q_stricmp(\n                  &mapRotations.rotations[<span class=\"supfact\">i</span>],\n                  <span class=\"supfact\">mrName</span>)) {\n            G_Printf(String, <span class=\"supfact\">mrName</span>);\n            return Number;\n          }\n        }\n        Q_strncpyz(&mapRotations.rotations[mapRotations.numRotations],\n                   <span class=\"supfact\">mrName</span>, Number L);\n        if (G_ParseMapRotation(\n                &mapRotations.rotations[mapRotations.numRotations],\n                &<span class=\"supfact\">text_p</span>) == qfalse) {\n          G_Printf(String, <span class=\"supfact\">fileName</span>, <span class=\"supfact\">mrName</span>);\n          return Number;\n        }\n        <span class=\"supfact\">mrNameSet</span> = qfalse;\n        if (mapRotations.numRotations == Number) {\n          G_Printf(String, Number L);\n          return Number;\n        }\n        ++mapRotations.numRotations;\n      }\n    }\n    <span class=\"supfact\">result</span> = qtrue;\n  } else {\n    G_Printf(String, <span class=\"supfact\">fileName</span>);\n    <span class=\"supfact\">result</span> = qfalse;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "filename", "ref_name": "fileName", "ref_type": "const char *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "qboolean"}, {"name": "v2", "type": "fileHandle_t", "pred_name": "f", "ref_name": "f", "ref_type": "fileHandle_t"}, {"name": "v3", "type": "char[64]", "pred_name": "filename", "ref_name": "mrName", "ref_type": "char[64]"}, {"name": "v4", "type": "char[20000]", "pred_name": "text", "ref_name": "text", "ref_type": "char[20000]"}, {"name": "v5", "type": "char *", "pred_name": "text_p", "ref_name": "text_p", "ref_type": "char *"}, {"name": "v6", "type": "char *", "pred_name": "token", "ref_name": "token", "ref_type": "char *"}, {"name": "v7", "type": "int", "pred_name": "len", "ref_name": "len", "ref_type": "int"}, {"name": "v8", "type": "int", "pred_name": "skip", "ref_name": "mrNameSet", "ref_type": "qboolean"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "jzeng4", "repo_name": "top", "path": "jzeng4/top/bbbc3e97a7d79d5d4ea86c8ff94d3d9daa4714f1558985a28ee5d50f47119871", "path_in_repo": "jzeng4/top//hw/display/pl110.o", "objdump": "0000000000026ac6 <pl110_resize>:\n   26ac6:\t55                   \tpush   %rbp\n   26ac7:\t48 89 e5             \tmov    %rsp,%rbp\n   26aca:\t48 83 ec 20          \tsub    $0x20,%rsp\n   26ace:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   26ad2:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n   26ad5:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n   26ad8:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n   26adf:\t00 00 \n   26ae1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   26ae5:\t31 c0                \txor    %eax,%eax\n   26ae7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   26aeb:\t8b 80 20 24 00 00    \tmov    0x2420(%rax),%eax\n   26af1:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n   26af4:\t75 0f                \tjne    26b05 <pl110_resize+0x3f>\n   26af6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   26afa:\t8b 80 24 24 00 00    \tmov    0x2424(%rax),%eax\n   26b00:\t39 45 e0             \tcmp    %eax,-0x20(%rbp)\n   26b03:\t74 2b                \tje     26b30 <pl110_resize+0x6a>\n   26b05:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   26b09:\t48 89 c7             \tmov    %rax,%rdi\n   26b0c:\te8 7a f9 ff ff       \tcallq  2648b <pl110_enabled>\n   26b11:\t85 c0                \ttest   %eax,%eax\n   26b13:\t74 1b                \tje     26b30 <pl110_resize+0x6a>\n   26b15:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   26b19:\t48 8b 80 f0 23 00 00 \tmov    0x23f0(%rax),%rax\n   26b20:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n   26b23:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n   26b26:\t89 ce                \tmov    %ecx,%esi\n   26b28:\t48 89 c7             \tmov    %rax,%rdi\n   26b2b:\te8 00 00 00 00       \tcallq  26b30 <pl110_resize+0x6a>\n   26b30:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   26b34:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n   26b37:\t89 90 20 24 00 00    \tmov    %edx,0x2420(%rax)\n   26b3d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   26b41:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n   26b44:\t89 90 24 24 00 00    \tmov    %edx,0x2424(%rax)\n   26b4a:\t90                   \tnop\n   26b4b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   26b4f:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n   26b56:\t00 00 \n   26b58:\t74 05                \tje     26b5f <pl110_resize+0x99>\n   26b5a:\te8 00 00 00 00       \tcallq  26b5f <pl110_resize+0x99>\n   26b5f:\tc9                   \tleaveq \n   26b60:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall pl110_resize(__int64 <span class=\"supfact\">a1</span>,\n                                         unsigned int <span class=\"supfact\">a2</span>,\n                                         unsigned int <span class=\"supfact\">a3</span>) {\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if ((<span class=\"supfact\">a2</span> != *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) ||\n       <span class=\"supfact\">a3</span> != *(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) &&\n      pl110_enabled(<span class=\"supfact\">a1</span>))\n    qemu_console_resize(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                        <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>);\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">a2</span>;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">a3</span>;\n  return __readfsqword(Number) ^ <span class=\"supfact\">v5</span>;\n}", "code_t": "void __cdecl pl110_resize(PL110State_0 *<span class=\"supfact\">s</span>,\n                          int <span class=\"supfact\">width</span>,\n                          int <span class=\"supfact\">height</span>) {\n  if (<span class=\"supfact\">width</span> != <span class=\"supfact\">s</span>->cols ||\n      <span class=\"supfact\">height</span> != <span class=\"supfact\">s</span>->rows) {\n    if (pl110_enabled(<span class=\"supfact\">s</span>))\n      qemu_console_resize(<span class=\"supfact\">s</span>->con,\n                          (unsigned int)<span class=\"supfact\">width</span>,\n                          (unsigned int)<span class=\"supfact\">height</span>);\n  }\n  <span class=\"supfact\">s</span>->cols = <span class=\"supfact\">width</span>;\n  <span class=\"supfact\">s</span>->rows = <span class=\"supfact\">height</span>;\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "opaque", "ref_name": "s", "ref_type": "PL110State_0 *"}, {"name": "a2", "type": "int", "pred_name": "width", "ref_name": "width", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "height", "ref_name": "height", "ref_type": "int"}, {"name": "v5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "lolo32", "repo_name": "mupdf-mirror", "path": "lolo32/mupdf-mirror/0542c2d9046ac8dd641070dad3827c18a3386323896d39f480d9faada1eb4bf0", "path_in_repo": "lolo32/mupdf-mirror//build/debug/pdf/pdf-object.o", "objdump": "000000000000136b <pdf_array_put>:\n    136b:\t55                   \tpush   %rbp\n    136c:\t48 89 e5             \tmov    %rsp,%rbp\n    136f:\t53                   \tpush   %rbx\n    1370:\t48 83 ec 28          \tsub    $0x28,%rsp\n    1374:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1378:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    137b:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    137f:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    1384:\t74 1c                \tje     13a2 <pdf_array_put+0x37>\n    1386:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    138a:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n    138e:\t3c 72                \tcmp    $0x72,%al\n    1390:\t75 10                \tjne    13a2 <pdf_array_put+0x37>\n    1392:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1396:\t48 89 c7             \tmov    %rax,%rdi\n    1399:\te8 00 00 00 00       \tcallq  139e <pdf_array_put+0x33>\n    139e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    13a2:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    13a7:\t0f 84 00 01 00 00    \tje     14ad <pdf_array_put+0x142>\n    13ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    13b1:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n    13b5:\t3c 61                \tcmp    $0x61,%al\n    13b7:\t74 35                \tje     13ee <pdf_array_put+0x83>\n    13b9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    13bd:\t48 89 c7             \tmov    %rax,%rdi\n    13c0:\te8 5e fa ff ff       \tcallq  e23 <pdf_objkindstr>\n    13c5:\t48 89 c2             \tmov    %rax,%rdx\n    13c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    13cc:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    13d0:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    13d7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    13dc:\t48 89 c7             \tmov    %rax,%rdi\n    13df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    13e4:\te8 00 00 00 00       \tcallq  13e9 <pdf_array_put+0x7e>\n    13e9:\te9 aa 00 00 00       \tjmpq   1498 <pdf_array_put+0x12d>\n    13ee:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n    13f2:\t79 26                \tjns    141a <pdf_array_put+0xaf>\n    13f4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    13f8:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    13fc:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    1403:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    1406:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    140b:\t48 89 c7             \tmov    %rax,%rdi\n    140e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1413:\te8 00 00 00 00       \tcallq  1418 <pdf_array_put+0xad>\n    1418:\teb 7e                \tjmp    1498 <pdf_array_put+0x12d>\n    141a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    141e:\t8b 40 18             \tmov    0x18(%rax),%eax\n    1421:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n    1424:\t7c 2d                \tjl     1453 <pdf_array_put+0xe8>\n    1426:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    142a:\t8b 48 18             \tmov    0x18(%rax),%ecx\n    142d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1431:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1435:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    143c:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    143f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1444:\t48 89 c7             \tmov    %rax,%rdi\n    1447:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    144c:\te8 00 00 00 00       \tcallq  1451 <pdf_array_put+0xe6>\n    1451:\teb 45                \tjmp    1498 <pdf_array_put+0x12d>\n    1453:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1457:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    145b:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    145e:\t48 63 d2             \tmovslq %edx,%rdx\n    1461:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    1465:\t48 01 d0             \tadd    %rdx,%rax\n    1468:\t48 8b 00             \tmov    (%rax),%rax\n    146b:\t48 89 c7             \tmov    %rax,%rdi\n    146e:\te8 00 00 00 00       \tcallq  1473 <pdf_array_put+0x108>\n    1473:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1477:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    147b:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    147e:\t48 63 d2             \tmovslq %edx,%rdx\n    1481:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    1485:\t48 8d 1c 10          \tlea    (%rax,%rdx,1),%rbx\n    1489:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    148d:\t48 89 c7             \tmov    %rax,%rdi\n    1490:\te8 00 00 00 00       \tcallq  1495 <pdf_array_put+0x12a>\n    1495:\t48 89 03             \tmov    %rax,(%rbx)\n    1498:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    149c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    14a0:\t48 89 d6             \tmov    %rdx,%rsi\n    14a3:\t48 89 c7             \tmov    %rax,%rdi\n    14a6:\te8 60 fe ff ff       \tcallq  130b <object_altered>\n    14ab:\teb 01                \tjmp    14ae <pdf_array_put+0x143>\n    14ad:\t90                   \tnop\n    14ae:\t48 83 c4 28          \tadd    $0x28,%rsp\n    14b2:\t5b                   \tpop    %rbx\n    14b3:\t5d                   \tpop    %rbp\n    14b4:\tc3                   \tretq   ", "code_s": "void __fastcall pdf_array_put(__int64 <span class=\"supfact\">a1</span>,\n                              int <span class=\"supfact\">a2</span>,\n                              _DWORD *<span class=\"supfact\">a3</span>) {\n  const char *<span class=\"supfact\">v3</span>;\n  _QWORD *<span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = <span class=\"supfact\">a1</span>;\n  if (<span class=\"supfact\">a1</span> && *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) == Number)\n    <span class=\"supfact\">v6</span> = pdf_resolve_indirect(<span class=\"supfact\">a1</span>);\n  if (<span class=\"supfact\">v6</span>) {\n    if (*(_BYTE *)(<span class=\"supfact\">v6</span> + Number) == Number) {\n      if (<span class=\"supfact\">a2</span> >= Number) {\n        if (<span class=\"supfact\">a2</span> < *(_DWORD *)(<span class=\"supfact\">v6</span> + Number)) {\n          pdf_drop_obj(*(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                                   *(_QWORD *)(<span class=\"supfact\">v6</span> + Number)));\n          <span class=\"supfact\">v4</span> =\n              (_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number) +\n                         Number L * <span class=\"supfact\">a2</span>);\n          *<span class=\"supfact\">v4</span> = pdf_keep_obj(<span class=\"supfact\">a3</span>);\n        } else {\n          fz_warn(\n              *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number) + Number L),\n              String, (unsigned int)<span class=\"supfact\">a2</span>,\n              *(unsigned int *)(<span class=\"supfact\">v6</span> + Number));\n        }\n      } else {\n        fz_warn(\n            *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number) + Number L),\n            String, (unsigned int)<span class=\"supfact\">a2</span>);\n      }\n    } else {\n      <span class=\"supfact\">v3</span> = pdf_objkindstr(<span class=\"supfact\">v6</span>);\n      fz_warn(*(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number) + Number L),\n              String, <span class=\"supfact\">v3</span>);\n    }\n    object_altered(<span class=\"supfact\">v6</span>, (__int64)<span class=\"supfact\">a3</span>);\n  }\n}", "code_t": "void __cdecl pdf_array_put(pdf_obj *<span class=\"supfact\">obj</span>, int <span class=\"supfact\">i</span>,\n                           pdf_obj *<span class=\"supfact\">item</span>) {\n  char *<span class=\"supfact\">v3</span>;\n  pdf_obj **<span class=\"supfact\">v4</span>;\n  pdf_obj *<span class=\"supfact\">obja</span>;\n  <span class=\"supfact\">obja</span> = <span class=\"supfact\">obj</span>;\n  if (<span class=\"supfact\">obj</span> && <span class=\"supfact\">obj</span>->kind == Number)\n    <span class=\"supfact\">obja</span> = (pdf_obj *)pdf_resolve_indirect(<span class=\"supfact\">obj</span>);\n  if (<span class=\"supfact\">obja</span>) {\n    if (<span class=\"supfact\">obja</span>->kind == Number) {\n      if (<span class=\"supfact\">i</span> >= Number) {\n        if (<span class=\"supfact\">i</span> < <span class=\"supfact\">obja</span>->u.b) {\n          pdf_drop_obj(<span class=\"supfact\">obja</span>->u.a.items[<span class=\"supfact\">i</span>]);\n          <span class=\"supfact\">v4</span> =\n              &<span class=\"supfact\">obja</span>->u.a.items[<span class=\"supfact\">i</span>];\n          *<span class=\"supfact\">v4</span> = pdf_keep_obj(<span class=\"supfact\">item</span>);\n        } else {\n          fz_warn(<span class=\"supfact\">obja</span>->doc->ctx, String,\n                  (unsigned int)<span class=\"supfact\">i</span>,\n                  (unsigned int)<span class=\"supfact\">obja</span>->u.b);\n        }\n      } else {\n        fz_warn(<span class=\"supfact\">obja</span>->doc->ctx, String,\n                (unsigned int)<span class=\"supfact\">i</span>);\n      }\n    } else {\n      <span class=\"supfact\">v3</span> = pdf_objkindstr(<span class=\"supfact\">obja</span>);\n      fz_warn(<span class=\"supfact\">obja</span>->doc->ctx, String, <span class=\"supfact\">v3</span>);\n    }\n    object_altered(<span class=\"supfact\">obja</span>, <span class=\"supfact\">item</span>);\n  }\n}", "var": [{"name": "a1", "type": "fz_context *", "pred_name": "ctx", "ref_name": "obj", "ref_type": "pdf_obj *"}, {"name": "a2", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "a3", "type": "char *", "pred_name": "str", "ref_name": "item", "ref_type": "pdf_obj *"}, {"name": "v3", "type": "char *", "pred_name": "v3", "ref_name": "v3", "ref_type": "char *"}, {"name": "v4", "type": "char *", "pred_name": "v4", "ref_name": "v4", "ref_type": "pdf_obj * *"}, {"name": "v6", "type": "pdf_obj *", "pred_name": "obj", "ref_name": "obja", "ref_type": "pdf_obj *"}], "body_in_train": false}, {"repo_owner": "AHzZ123", "repo_name": "learn", "path": "AHzZ123/learn/be1e89d3a186fa6e51192d5819166aafb95f48cabdcc97bf7dfd1b79928ac2e0", "path_in_repo": "AHzZ123/learn/UNP/unpv13e/names/prmyaddrs", "objdump": "", "code_s": "char *strerror(int <span class=\"supfact\">errnum</span>) {\n  return strerror(<span class=\"supfact\">errnum</span>);\n}", "code_t": "char *strerror(int <span class=\"supfact\">errnum</span>) {\n  return strerror(<span class=\"supfact\">errnum</span>);\n}", "var": [{"name": "errnum", "type": "int", "pred_name": "errnum", "ref_name": "errnum", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "mp-lee", "repo_name": "ffmpeg", "path": "mp-lee/ffmpeg/79acb89cae61846a7bdee8d180cd3dffe5895f93414d295353e608e8a80c090c", "path_in_repo": "mp-lee/ffmpeg//libavcodec/eac3enc.o", "objdump": "00000000000002ca <ff_eac3_get_frame_exp_strategy>:\n     2ca:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n     2cf:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     2d4:\t8b 80 bc 09 00 00    \tmov    0x9bc(%rax),%eax\n     2da:\t83 f8 05             \tcmp    $0x5,%eax\n     2dd:\t7f 10                \tjg     2ef <ff_eac3_get_frame_exp_strategy+0x25>\n     2df:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     2e4:\tc7 80 94 0b 00 00 00 \tmovl   $0x0,0xb94(%rax)\n     2eb:\t00 00 00 \n     2ee:\tc3                   \tretq   \n     2ef:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     2f4:\tc7 80 94 0b 00 00 01 \tmovl   $0x1,0xb94(%rax)\n     2fb:\t00 00 00 \n     2fe:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     303:\t8b 80 48 0a 00 00    \tmov    0xa48(%rax),%eax\n     309:\t85 c0                \ttest   %eax,%eax\n     30b:\t0f 94 c0             \tsete   %al\n     30e:\t0f b6 c0             \tmovzbl %al,%eax\n     311:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n     315:\te9 63 01 00 00       \tjmpq   47d <ff_eac3_get_frame_exp_strategy+0x1b3>\n     31a:\t48 8b 4c 24 e8       \tmov    -0x18(%rsp),%rcx\n     31f:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     323:\t48 63 d0             \tmovslq %eax,%rdx\n     326:\t48 89 d0             \tmov    %rdx,%rax\n     329:\t48 01 c0             \tadd    %rax,%rax\n     32c:\t48 01 d0             \tadd    %rdx,%rax\n     32f:\t48 01 c0             \tadd    %rax,%rax\n     332:\t48 01 c8             \tadd    %rcx,%rax\n     335:\t48 05 60 0b 00 00    \tadd    $0xb60,%rax\n     33b:\t0f b6 00             \tmovzbl (%rax),%eax\n     33e:\t0f b6 c0             \tmovzbl %al,%eax\n     341:\t44 8d 50 ff          \tlea    -0x1(%rax),%r10d\n     345:\t48 8b 4c 24 e8       \tmov    -0x18(%rsp),%rcx\n     34a:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     34e:\t48 63 d0             \tmovslq %eax,%rdx\n     351:\t48 89 d0             \tmov    %rdx,%rax\n     354:\t48 01 c0             \tadd    %rax,%rax\n     357:\t48 01 d0             \tadd    %rdx,%rax\n     35a:\t48 01 c0             \tadd    %rax,%rax\n     35d:\t48 01 c8             \tadd    %rcx,%rax\n     360:\t48 05 61 0b 00 00    \tadd    $0xb61,%rax\n     366:\t0f b6 00             \tmovzbl (%rax),%eax\n     369:\t0f b6 f8             \tmovzbl %al,%edi\n     36c:\t48 8b 4c 24 e8       \tmov    -0x18(%rsp),%rcx\n     371:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     375:\t48 63 d0             \tmovslq %eax,%rdx\n     378:\t48 89 d0             \tmov    %rdx,%rax\n     37b:\t48 01 c0             \tadd    %rax,%rax\n     37e:\t48 01 d0             \tadd    %rdx,%rax\n     381:\t48 01 c0             \tadd    %rax,%rax\n     384:\t48 01 c8             \tadd    %rcx,%rax\n     387:\t48 05 62 0b 00 00    \tadd    $0xb62,%rax\n     38d:\t0f b6 00             \tmovzbl (%rax),%eax\n     390:\t0f b6 f0             \tmovzbl %al,%esi\n     393:\t48 8b 4c 24 e8       \tmov    -0x18(%rsp),%rcx\n     398:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     39c:\t48 63 d0             \tmovslq %eax,%rdx\n     39f:\t48 89 d0             \tmov    %rdx,%rax\n     3a2:\t48 01 c0             \tadd    %rax,%rax\n     3a5:\t48 01 d0             \tadd    %rdx,%rax\n     3a8:\t48 01 c0             \tadd    %rax,%rax\n     3ab:\t48 01 c8             \tadd    %rcx,%rax\n     3ae:\t48 05 63 0b 00 00    \tadd    $0xb63,%rax\n     3b4:\t0f b6 00             \tmovzbl (%rax),%eax\n     3b7:\t44 0f b6 c0          \tmovzbl %al,%r8d\n     3bb:\t48 8b 4c 24 e8       \tmov    -0x18(%rsp),%rcx\n     3c0:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     3c4:\t48 63 d0             \tmovslq %eax,%rdx\n     3c7:\t48 89 d0             \tmov    %rdx,%rax\n     3ca:\t48 01 c0             \tadd    %rax,%rax\n     3cd:\t48 01 d0             \tadd    %rdx,%rax\n     3d0:\t48 01 c0             \tadd    %rax,%rax\n     3d3:\t48 01 c8             \tadd    %rcx,%rax\n     3d6:\t48 05 64 0b 00 00    \tadd    $0xb64,%rax\n     3dc:\t0f b6 00             \tmovzbl (%rax),%eax\n     3df:\t0f b6 c8             \tmovzbl %al,%ecx\n     3e2:\t4c 8b 4c 24 e8       \tmov    -0x18(%rsp),%r9\n     3e7:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     3eb:\t48 63 d0             \tmovslq %eax,%rdx\n     3ee:\t48 89 d0             \tmov    %rdx,%rax\n     3f1:\t48 01 c0             \tadd    %rax,%rax\n     3f4:\t48 01 d0             \tadd    %rdx,%rax\n     3f7:\t48 01 c0             \tadd    %rax,%rax\n     3fa:\t4c 01 c8             \tadd    %r9,%rax\n     3fd:\t48 05 65 0b 00 00    \tadd    $0xb65,%rax\n     403:\t0f b6 00             \tmovzbl (%rax),%eax\n     406:\t0f b6 c0             \tmovzbl %al,%eax\n     409:\t48 98                \tcltq   \n     40b:\t49 63 d0             \tmovslq %r8d,%rdx\n     40e:\t48 63 ff             \tmovslq %edi,%rdi\n     411:\t4d 63 c2             \tmovslq %r10d,%r8\n     414:\t49 c1 e0 02          \tshl    $0x2,%r8\n     418:\t4c 01 c7             \tadd    %r8,%rdi\n     41b:\t48 63 f6             \tmovslq %esi,%rsi\n     41e:\t48 c1 e7 02          \tshl    $0x2,%rdi\n     422:\t48 01 fe             \tadd    %rdi,%rsi\n     425:\t48 c1 e6 02          \tshl    $0x2,%rsi\n     429:\t48 01 d6             \tadd    %rdx,%rsi\n     42c:\t48 63 d1             \tmovslq %ecx,%rdx\n     42f:\t48 8d 0c b5 00 00 00 \tlea    0x0(,%rsi,4),%rcx\n     436:\t00 \n     437:\t48 01 ca             \tadd    %rcx,%rdx\n     43a:\t0f b6 84 90 00 00 00 \tmovzbl 0x0(%rax,%rdx,4),%eax\n     441:\t00 \n     442:\t0f be c0             \tmovsbl %al,%eax\n     445:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n     449:\t83 7c 24 f8 00       \tcmpl   $0x0,-0x8(%rsp)\n     44e:\t79 10                \tjns    460 <ff_eac3_get_frame_exp_strategy+0x196>\n     450:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     455:\tc7 80 94 0b 00 00 00 \tmovl   $0x0,0xb94(%rax)\n     45c:\t00 00 00 \n     45f:\tc3                   \tretq   \n     460:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n     464:\t89 c1                \tmov    %eax,%ecx\n     466:\t48 8b 54 24 e8       \tmov    -0x18(%rsp),%rdx\n     46b:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     46f:\t48 98                \tcltq   \n     471:\t88 8c 02 8a 0b 00 00 \tmov    %cl,0xb8a(%rdx,%rax,1)\n     478:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n     47d:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     482:\t8b 80 e0 09 00 00    \tmov    0x9e0(%rax),%eax\n     488:\t39 44 24 fc          \tcmp    %eax,-0x4(%rsp)\n     48c:\t0f 8e 88 fe ff ff    \tjle    31a <ff_eac3_get_frame_exp_strategy+0x50>\n     492:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall ff_eac3_get_frame_exp_strategy(\n    _DWORD *<span class=\"supfact\">a1</span>) {\n  unsigned __int64 <span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">i</span>;\n  if ((int)<span class=\"supfact\">a1</span>[Number] > Number) {\n    <span class=\"supfact\">a1</span>[Number] = Number;\n    for (<span class=\"supfact\">i</span> = <span class=\"supfact\">a1</span>[Number] == Number;;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">result</span> = (unsigned int)<span class=\"supfact\">a1</span>[Number];\n      if (<span class=\"supfact\">i</span> > (int)<span class=\"supfact\">result</span>)\n        break;\n      <span class=\"supfact\">v2</span> = eac3_frame_expstr_index_tab\n          [Number * *((unsigned __int8 *)<span class=\"supfact\">a1</span> +\n                      Number * <span class=\"supfact\">i</span> + Number) -\n           Number +\n           Number * *((unsigned __int8 *)<span class=\"supfact\">a1</span> +\n                      Number * <span class=\"supfact\">i</span> + Number) +\n           Number * *((unsigned __int8 *)<span class=\"supfact\">a1</span> +\n                      Number * <span class=\"supfact\">i</span> + Number) +\n           Number * *((unsigned __int8 *)<span class=\"supfact\">a1</span> +\n                      Number * <span class=\"supfact\">i</span> + Number) +\n           Number * *((unsigned __int8 *)<span class=\"supfact\">a1</span> +\n                      Number * <span class=\"supfact\">i</span> + Number) +\n           *((unsigned __int8 *)<span class=\"supfact\">a1</span> +\n             Number * <span class=\"supfact\">i</span> + Number)];\n      if (<span class=\"supfact\">v2</span> < Number) {\n        <span class=\"supfact\">result</span> = (unsigned __int64)<span class=\"supfact\">a1</span>;\n        <span class=\"supfact\">a1</span>[Number] = Number;\n        return <span class=\"supfact\">result</span>;\n      }\n      *((_BYTE *)<span class=\"supfact\">a1</span> + <span class=\"supfact\">i</span> + Number) =\n          <span class=\"supfact\">v2</span>;\n    }\n  } else {\n    <span class=\"supfact\">result</span> = (unsigned __int64)<span class=\"supfact\">a1</span>;\n    <span class=\"supfact\">a1</span>[Number] = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl ff_eac3_get_frame_exp_strategy(\n    AC3EncodeContext_0 *<span class=\"supfact\">s</span>) {\n  int <span class=\"supfact\">expstr</span>;\n  int <span class=\"supfact\">ch_0</span>;\n  if (<span class=\"supfact\">s</span>->num_blocks > Number) {\n    <span class=\"supfact\">s</span>->use_frame_exp_strategy = Number;\n    for (<span class=\"supfact\">ch_0</span> = <span class=\"supfact\">s</span>->cpl_on == Number;\n         <span class=\"supfact\">ch_0</span> <= <span class=\"supfact\">s</span>->fbw_channels;\n         ++<span class=\"supfact\">ch_0</span>) {\n      <span class=\"supfact\">expstr</span> = eac3_frame_expstr_index_tab\n          [Number *\n               <span class=\"supfact\">s</span>->exp_strategy[<span class=\"supfact\">ch_0</span>][Number] -\n           Number +\n           Number *\n               <span class=\"supfact\">s</span>->exp_strategy[<span class=\"supfact\">ch_0</span>][Number] +\n           Number *\n               <span class=\"supfact\">s</span>->exp_strategy[<span class=\"supfact\">ch_0</span>][Number] +\n           Number *\n               <span class=\"supfact\">s</span>->exp_strategy[<span class=\"supfact\">ch_0</span>][Number] +\n           Number *\n               <span class=\"supfact\">s</span>->exp_strategy[<span class=\"supfact\">ch_0</span>][Number] +\n           <span class=\"supfact\">s</span>->exp_strategy[<span class=\"supfact\">ch_0</span>][Number]];\n      if (<span class=\"supfact\">expstr</span> < Number) {\n        <span class=\"supfact\">s</span>->use_frame_exp_strategy = Number;\n        return;\n      }\n      <span class=\"supfact\">s</span>->frame_exp_strategy[<span class=\"supfact\">ch_0</span>] =\n          <span class=\"supfact\">expstr</span>;\n    }\n  } else {\n    <span class=\"supfact\">s</span>->use_frame_exp_strategy = Number;\n  }\n}", "var": [{"name": "a1", "type": "AC3EncodeContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "AC3EncodeContext_0 *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v2", "type": "int", "pred_name": "expstr", "ref_name": "expstr", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "ch_0", "ref_name": "ch_0", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "macoscope", "repo_name": "ffmpeg", "path": "macoscope/ffmpeg/533673f15802fb3c972a5646d1877e215ec75c8a02dc7cd1bde17aee0d16514e", "path_in_repo": "macoscope/ffmpeg//libavcodec/vorbis_parser.o", "objdump": "0000000000000bc3 <vorbis_parse>:\n bc3:\t48 83 ec 48          \tsub    $0x48,%rsp\n bc7:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n bcc:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n bd1:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n bd6:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n bdb:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n be0:\t44 89 4c 24 04       \tmov    %r9d,0x4(%rsp)\n be5:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n bea:\t48 8b 00             \tmov    (%rax),%rax\n bed:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n bf2:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n bf7:\t8b 40 08             \tmov    0x8(%rax),%eax\n bfa:\t85 c0                \ttest   %eax,%eax\n bfc:\t75 36                \tjne    c34 <vorbis_parse+0x71>\n bfe:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n c03:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n c07:\t48 85 c0             \ttest   %rax,%rax\n c0a:\t74 28                \tje     c34 <vorbis_parse+0x71>\n c0c:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n c11:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n c17:\t85 c0                \ttest   %eax,%eax\n c19:\t74 19                \tje     c34 <vorbis_parse+0x71>\n c1b:\t48 8b 54 24 38       \tmov    0x38(%rsp),%rdx\n c20:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n c25:\t48 89 d6             \tmov    %rdx,%rsi\n c28:\t48 89 c7             \tmov    %rax,%rdi\n c2b:\te8 00 00 00 00       \tcallq  c30 <vorbis_parse+0x6d>\n c30:\t85 c0                \ttest   %eax,%eax\n c32:\t75 35                \tjne    c69 <vorbis_parse+0xa6>\n c34:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n c38:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n c3d:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n c42:\t48 89 ce             \tmov    %rcx,%rsi\n c45:\t48 89 c7             \tmov    %rax,%rdi\n c48:\te8 00 00 00 00       \tcallq  c4d <vorbis_parse+0x8a>\n c4d:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n c51:\t83 7c 24 34 00       \tcmpl   $0x0,0x34(%rsp)\n c56:\t78 14                \tjs     c6c <vorbis_parse+0xa9>\n c58:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n c5d:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n c61:\t89 90 38 01 00 00    \tmov    %edx,0x138(%rax)\n c67:\teb 04                \tjmp    c6d <vorbis_parse+0xaa>\n c69:\t90                   \tnop\n c6a:\teb 01                \tjmp    c6d <vorbis_parse+0xaa>\n c6c:\t90                   \tnop\n c6d:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n c72:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n c77:\t48 89 10             \tmov    %rdx,(%rax)\n c7a:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n c7f:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n c83:\t89 10                \tmov    %edx,(%rax)\n c85:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n c89:\t48 83 c4 48          \tadd    $0x48,%rsp\n c8d:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall vorbis_parse(_DWORD *<span class=\"supfact\">a1</span>,\n                                __int64 <span class=\"supfact\">a2</span>,\n                                _QWORD *<span class=\"supfact\">a3</span>,\n                                unsigned int *<span class=\"supfact\">a4</span>,\n                                _BYTE *<span class=\"supfact\">a5</span>,\n                                unsigned int <span class=\"supfact\">a6</span>) {\n  int <span class=\"supfact\">v11</span>;\n  _QWORD *<span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = *(_QWORD **)<span class=\"supfact\">a1</span>;\n  if (*(_DWORD *)(*(_QWORD *)<span class=\"supfact\">a1</span> + Number L) ||\n      !*(_QWORD *)(<span class=\"supfact\">a2</span> + Number) ||\n      !*(_DWORD *)(<span class=\"supfact\">a2</span> + Number) ||\n      !(unsigned int)avpriv_vorbis_parse_extradata(<span class=\"supfact\">a2</span>,\n                                                   <span class=\"supfact\">v12</span>)) {\n    <span class=\"supfact\">v11</span> = avpriv_vorbis_parse_frame(\n        <span class=\"supfact\">v12</span>, <span class=\"supfact\">a5</span>, <span class=\"supfact\">a6</span>);\n    if (<span class=\"supfact\">v11</span> >= Number)\n      <span class=\"supfact\">a1</span>[Number] = <span class=\"supfact\">v11</span>;\n  }\n  *<span class=\"supfact\">a3</span> = <span class=\"supfact\">a5</span>;\n  *<span class=\"supfact\">a4</span> = <span class=\"supfact\">a6</span>;\n  return <span class=\"supfact\">a6</span>;\n}", "code_t": "int __cdecl vorbis_parse(AVCodecParserContext_0 *<span class=\"supfact\">s1</span>,\n                         AVCodecContext_0 *<span class=\"supfact\">avctx</span>,\n                         const uint8_t **<span class=\"supfact\">poutbuf</span>,\n                         int *<span class=\"supfact\">poutbuf_size</span>,\n                         const uint8_t *<span class=\"supfact\">buf</span>,\n                         int <span class=\"supfact\">buf_size</span>) {\n  int <span class=\"supfact\">duration</span>;\n  VorbisParseContext_0 *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (VorbisParseContext_0 *)<span class=\"supfact\">s1</span>->priv_data;\n  if (*((_DWORD *)<span class=\"supfact\">s1</span>->priv_data + Number) ||\n      !<span class=\"supfact\">avctx</span>->extradata ||\n      !<span class=\"supfact\">avctx</span>->extradata_size ||\n      !avpriv_vorbis_parse_extradata(<span class=\"supfact\">avctx</span>,\n                                     <span class=\"supfact\">s</span>)) {\n    <span class=\"supfact\">duration</span> = avpriv_vorbis_parse_frame(\n        <span class=\"supfact\">s</span>, <span class=\"supfact\">buf</span>, <span class=\"supfact\">buf_size</span>);\n    if (<span class=\"supfact\">duration</span> >= Number)\n      <span class=\"supfact\">s1</span>-><span class=\"supfact\">duration</span> = <span class=\"supfact\">duration</span>;\n  }\n  *<span class=\"supfact\">poutbuf</span> = <span class=\"supfact\">buf</span>;\n  *<span class=\"supfact\">poutbuf_size</span> = <span class=\"supfact\">buf_size</span>;\n  return <span class=\"supfact\">buf_size</span>;\n}", "var": [{"name": "a1", "type": "AVCodecParserContext_0 *", "pred_name": "s1", "ref_name": "s1", "ref_type": "AVCodecParserContext_0 *"}, {"name": "a2", "type": "AVCodecContext_0 *", "pred_name": "avctx", "ref_name": "avctx", "ref_type": "AVCodecContext_0 *"}, {"name": "a3", "type": "const uint8_t * *", "pred_name": "poutbuf", "ref_name": "poutbuf", "ref_type": "const uint8_t * *"}, {"name": "a4", "type": "int *", "pred_name": "poutbuf_size", "ref_name": "poutbuf_size", "ref_type": "int *"}, {"name": "a5", "type": "const uint8_t *", "pred_name": "buf", "ref_name": "buf", "ref_type": "const uint8_t *"}, {"name": "a6", "type": "int", "pred_name": "buf_size", "ref_name": "buf_size", "ref_type": "int"}, {"name": "v11", "type": "int", "pred_name": "duration", "ref_name": "duration", "ref_type": "int"}, {"name": "v12", "type": "VorbisParseContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "VorbisParseContext_0 *"}], "body_in_train": true}, {"repo_owner": "evan-su", "repo_name": "openwrt-castnow", "path": "evan-su/openwrt-castnow/b693c19c4d121e13d3fab34db553bd026df3acd2b81fc1b09c06a324365016c3", "path_in_repo": "evan-su/openwrt-castnow//staging_dir/host/bin/mkbrnimg", "objdump": "", "code_s": "unsigned __int64 strtoul(const char *<span class=\"supfact\">nptr</span>,\n                         char **<span class=\"supfact\">endptr</span>,\n                         int <span class=\"supfact\">base</span>) {\n  return strtoul(<span class=\"supfact\">nptr</span>, <span class=\"supfact\">endptr</span>,\n                 <span class=\"supfact\">base</span>);\n}", "code_t": "unsigned __int64 strtoul(const char *<span class=\"supfact\">nptr</span>,\n                         char **<span class=\"supfact\">endptr</span>,\n                         int <span class=\"supfact\">base</span>) {\n  return strtoul(<span class=\"supfact\">nptr</span>, <span class=\"supfact\">endptr</span>,\n                 <span class=\"supfact\">base</span>);\n}", "var": [{"name": "nptr", "type": "const char *", "pred_name": "nptr", "ref_name": "nptr", "ref_type": "const char *"}, {"name": "endptr", "type": "char * *", "pred_name": "endptr", "ref_name": "endptr", "ref_type": "char * *"}, {"name": "base", "type": "int", "pred_name": "base", "ref_name": "base", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "ola-ct", "repo_name": "random-tools", "path": "ola-ct/random-tools/357844cc232d7e8b4d833aaa89c9baf7c7aea8cf6a0c93fc9ee85cb17ca96c44", "path_in_repo": "ola-ct/random-tools/bzip2-1.0.5/bzlib.o", "objdump": "0000000000000792 <flush_RL>:\n     792:\t55                   \tpush   %rbp\n     793:\t48 89 e5             \tmov    %rsp,%rbp\n     796:\t48 83 ec 08          \tsub    $0x8,%rsp\n     79a:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     79e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7a2:\t8b 40 5c             \tmov    0x5c(%rax),%eax\n     7a5:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n     7aa:\t77 0c                \tja     7b8 <flush_RL+0x26>\n     7ac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7b0:\t48 89 c7             \tmov    %rax,%rdi\n     7b3:\te8 2d fd ff ff       \tcallq  4e5 <add_pair_to_block>\n     7b8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7bc:\t48 89 c7             \tmov    %rax,%rdi\n     7bf:\te8 72 f9 ff ff       \tcallq  136 <init_RL>\n     7c4:\t90                   \tnop\n     7c5:\tc9                   \tleaveq \n     7c6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall flush_RL(__int64 <span class=\"supfact\">a1</span>) {\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) <= Number)\n    add_pair_to_block(<span class=\"supfact\">a1</span>);\n  return init_RL(<span class=\"supfact\">a1</span>);\n}", "code_t": "void __cdecl flush_RL(EState *<span class=\"supfact\">s</span>) {\n  if (<span class=\"supfact\">s</span>->state_in_ch <= Number)\n    add_pair_to_block(<span class=\"supfact\">s</span>);\n  init_RL(<span class=\"supfact\">s</span>);\n}", "var": [{"name": "a1", "type": "EState *", "pred_name": "s", "ref_name": "s", "ref_type": "EState *"}], "body_in_train": true}, {"repo_owner": "AICP", "repo_name": "kernel_htc_msm8994", "path": "AICP/kernel_htc_msm8994/316300b471037d506859bfd87099e16f7028c347368ddff540f4dc8fc93c9a6b", "path_in_repo": "AICP/kernel_htc_msm8994/tools/perf/util/header.o", "objdump": "0000000000007d89 <perf_event__process_event_type>:\n    7d89:\t55                   \tpush   %rbp\n    7d8a:\t48 89 e5             \tmov    %rsp,%rbp\n    7d8d:\t48 83 ec 20          \tsub    $0x20,%rsp\n    7d91:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    7d95:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    7d99:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    7da0:\t00 00 \n    7da2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    7da6:\t31 c0                \txor    %eax,%eax\n    7da8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    7dac:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n    7db0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    7db4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    7db8:\t48 89 d6             \tmov    %rdx,%rsi\n    7dbb:\t48 89 c7             \tmov    %rax,%rdi\n    7dbe:\te8 00 00 00 00       \tcallq  7dc3 <perf_event__process_event_type+0x3a>\n    7dc3:\t85 c0                \ttest   %eax,%eax\n    7dc5:\t79 07                \tjns    7dce <perf_event__process_event_type+0x45>\n    7dc7:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    7dcc:\teb 05                \tjmp    7dd3 <perf_event__process_event_type+0x4a>\n    7dce:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7dd3:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    7dd7:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    7dde:\t00 00 \n    7de0:\t74 05                \tje     7de7 <perf_event__process_event_type+0x5e>\n    7de2:\te8 00 00 00 00       \tcallq  7de7 <perf_event__process_event_type+0x5e>\n    7de7:\tc9                   \tleaveq \n    7de8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_event__process_event_type(__int64 <span class=\"supfact\">a1</span>,\n                                                  __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  if ((int)perf_header__push_event(\n          *(_QWORD *)(<span class=\"supfact\">a2</span> + Number),\n          (const char *)(<span class=\"supfact\">a2</span> + Number)) >= Number)\n    <span class=\"supfact\">result</span> = Number L;\n  else\n    <span class=\"supfact\">result</span> = Number L;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl perf_event__process_event_type(perf_tool *<span class=\"supfact\">tool</span>,\n                                           perf_event *<span class=\"supfact\">event</span>) {\n  int <span class=\"supfact\">result</span>;\n  if (perf_header__push_event(<span class=\"supfact\">event</span>->ip.ip,\n                              <span class=\"supfact\">event</span>->comm.comm) >= Number)\n    <span class=\"supfact\">result</span> = Number;\n  else\n    <span class=\"supfact\">result</span> = Number;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "perf_tool *", "pred_name": "tool", "ref_name": "tool", "ref_type": "perf_tool *"}, {"name": "a2", "type": "perf_event *", "pred_name": "event", "ref_name": "event", "ref_type": "perf_event *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "blacklion", "repo_name": "GEOM-Events", "path": "blacklion/GEOM-Events/a64b4efee018904fcd825077255cf68d6a4132c420ac6f229361406cb1824c9f", "path_in_repo": "blacklion/GEOM-Events/gnu/usr.bin/gdb/libgdb/linespec.po", "objdump": "0000000000000983 <is_objc_method_format>:\n     983:\t55                   \tpush   %rbp\n     984:\t48 89 e5             \tmov    %rsp,%rbp\n     987:\t48 83 ec 10          \tsub    $0x10,%rsp\n     98b:\te8 00 00 00 00       \tcallq  990 <is_objc_method_format+0xd>\n     990:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     994:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     999:\t74 0b                \tje     9a6 <is_objc_method_format+0x23>\n     99b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     99f:\t0f b6 00             \tmovzbl (%rax),%eax\n     9a2:\t84 c0                \ttest   %al,%al\n     9a4:\t75 0a                \tjne    9b0 <is_objc_method_format+0x2d>\n     9a6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9ab:\te9 a2 00 00 00       \tjmpq   a52 <is_objc_method_format+0xcf>\n     9b0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     9b4:\t0f b6 00             \tmovzbl (%rax),%eax\n     9b7:\t3c 3a                \tcmp    $0x3a,%al\n     9b9:\t75 4b                \tjne    a06 <is_objc_method_format+0x83>\n     9bb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     9bf:\t48 83 c0 01          \tadd    $0x1,%rax\n     9c3:\t0f b6 00             \tmovzbl (%rax),%eax\n     9c6:\t0f be c0             \tmovsbl %al,%eax\n     9c9:\t89 c6                \tmov    %eax,%esi\n     9cb:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     9d0:\te8 00 00 00 00       \tcallq  9d5 <is_objc_method_format+0x52>\n     9d5:\t48 85 c0             \ttest   %rax,%rax\n     9d8:\t74 2c                \tje     a06 <is_objc_method_format+0x83>\n     9da:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     9de:\t48 83 c0 02          \tadd    $0x2,%rax\n     9e2:\t0f b6 00             \tmovzbl (%rax),%eax\n     9e5:\t3c 5b                \tcmp    $0x5b,%al\n     9e7:\t75 1d                \tjne    a06 <is_objc_method_format+0x83>\n     9e9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     9ed:\tbe 5d 00 00 00       \tmov    $0x5d,%esi\n     9f2:\t48 89 c7             \tmov    %rax,%rdi\n     9f5:\te8 00 00 00 00       \tcallq  9fa <is_objc_method_format+0x77>\n     9fa:\t48 85 c0             \ttest   %rax,%rax\n     9fd:\t74 07                \tje     a06 <is_objc_method_format+0x83>\n     9ff:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     a04:\teb 4c                \tjmp    a52 <is_objc_method_format+0xcf>\n     a06:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a0a:\t0f b6 00             \tmovzbl (%rax),%eax\n     a0d:\t0f be c0             \tmovsbl %al,%eax\n     a10:\t89 c6                \tmov    %eax,%esi\n     a12:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     a17:\te8 00 00 00 00       \tcallq  a1c <is_objc_method_format+0x99>\n     a1c:\t48 85 c0             \ttest   %rax,%rax\n     a1f:\t74 2c                \tje     a4d <is_objc_method_format+0xca>\n     a21:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a25:\t48 83 c0 01          \tadd    $0x1,%rax\n     a29:\t0f b6 00             \tmovzbl (%rax),%eax\n     a2c:\t3c 5b                \tcmp    $0x5b,%al\n     a2e:\t75 1d                \tjne    a4d <is_objc_method_format+0xca>\n     a30:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a34:\tbe 5d 00 00 00       \tmov    $0x5d,%esi\n     a39:\t48 89 c7             \tmov    %rax,%rdi\n     a3c:\te8 00 00 00 00       \tcallq  a41 <is_objc_method_format+0xbe>\n     a41:\t48 85 c0             \ttest   %rax,%rax\n     a44:\t74 07                \tje     a4d <is_objc_method_format+0xca>\n     a46:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     a4b:\teb 05                \tjmp    a52 <is_objc_method_format+0xcf>\n     a4d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a52:\tc9                   \tleaveq \n     a53:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall is_objc_method_format(const char *<span class=\"supfact\">a1</span>) {\n  if (!<span class=\"supfact\">a1</span> || !*<span class=\"supfact\">a1</span>)\n    return Number L;\n  if (*<span class=\"supfact\">a1</span> == Number &&\n      strchr(String, <span class=\"supfact\">a1</span>[Number]) &&\n      <span class=\"supfact\">a1</span>[Number] == Number &&\n      strchr(<span class=\"supfact\">a1</span>, Number))\n    return Number L;\n  return strchr(String, *<span class=\"supfact\">a1</span>) &&\n         <span class=\"supfact\">a1</span>[Number] == Number &&\n         strchr(<span class=\"supfact\">a1</span>, Number);\n}", "code_t": "int __cdecl is_objc_method_format(const char *<span class=\"supfact\">s</span>) {\n  if (!<span class=\"supfact\">s</span> || !*<span class=\"supfact\">s</span>)\n    return Number;\n  if (*<span class=\"supfact\">s</span> == Number &&\n      strchr(String, <span class=\"supfact\">s</span>[Number]) &&\n      <span class=\"supfact\">s</span>[Number] == Number && strchr(<span class=\"supfact\">s</span>, Number))\n    return Number;\n  return strchr(String, *<span class=\"supfact\">s</span>) &&\n         <span class=\"supfact\">s</span>[Number] == Number &&\n         strchr(<span class=\"supfact\">s</span>, Number);\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "s", "ref_name": "s", "ref_type": "const char *"}], "body_in_train": true}, {"repo_owner": "deeponion", "repo_name": "deeponion-legacy", "path": "deeponion/deeponion-legacy/67ec94185c036a4087635d7c4988300ac248e7a67adafa162618d00c1699e799", "path_in_repo": "deeponion/deeponion-legacy/src/leveldb/out-static/hash_test", "objdump": "0000000000404164 <_ZN7leveldb6DBImpl16WriteLevel0TableEPNS_8MemTableEPNS_11VersionEditEPNS_7VersionE.cold>:\n  404164:\t48 8d bd 78 ff ff ff \tlea    -0x88(%rbp),%rdi\n  40416b:\te8 90 ce 00 00       \tcallq  411000 <_ZN7leveldb12FileMetaDataD1Ev>\n  404170:\t48 8d bd 10 ff ff ff \tlea    -0xf0(%rbp),%rdi\n  404177:\te8 84 ce 00 00       \tcallq  411000 <_ZN7leveldb12FileMetaDataD1Ev>\n  40417c:\t49 8b 3c 24          \tmov    (%r12),%rdi\n  404180:\t48 85 ff             \ttest   %rdi,%rdi\n  404183:\t74 05                \tje     40418a <_ZN7leveldb6DBImpl16WriteLevel0TableEPNS_8MemTableEPNS_11VersionEditEPNS_7VersionE.cold+0x26>\n  404185:\te8 76 f2 ff ff       \tcallq  403400 <_ZdaPv@plt>\n  40418a:\t4c 89 ff             \tmov    %r15,%rdi\n  40418d:\te8 6e ce 00 00       \tcallq  411000 <_ZN7leveldb12FileMetaDataD1Ev>\n  404192:\t48 89 df             \tmov    %rbx,%rdi\n  404195:\te8 16 f4 ff ff       \tcallq  4035b0 <_Unwind_Resume@plt>\n  40419a:\t48 8b bd 70 ff ff ff \tmov    -0x90(%rbp),%rdi\n  4041a1:\t48 85 ff             \ttest   %rdi,%rdi\n  4041a4:\t74 d6                \tje     40417c <_ZN7leveldb6DBImpl16WriteLevel0TableEPNS_8MemTableEPNS_11VersionEditEPNS_7VersionE.cold+0x18>\n  4041a6:\te8 55 f2 ff ff       \tcallq  403400 <_ZdaPv@plt>\n  4041ab:\teb cf                \tjmp    40417c <_ZN7leveldb6DBImpl16WriteLevel0TableEPNS_8MemTableEPNS_11VersionEditEPNS_7VersionE.cold+0x18>\n  4041ad:\t48 8b 7d 90          \tmov    -0x70(%rbp),%rdi\n  4041b1:\t4c 39 ef             \tcmp    %r13,%rdi\n  4041b4:\t74 ba                \tje     404170 <_ZN7leveldb6DBImpl16WriteLevel0TableEPNS_8MemTableEPNS_11VersionEditEPNS_7VersionE.cold+0xc>\n  4041b6:\te8 25 f1 ff ff       \tcallq  4032e0 <_ZdlPv@plt>\n  4041bb:\teb b3                \tjmp    404170 <_ZN7leveldb6DBImpl16WriteLevel0TableEPNS_8MemTableEPNS_11VersionEditEPNS_7VersionE.cold+0xc>\n  4041bd:\t48 8b bd 70 ff ff ff \tmov    -0x90(%rbp),%rdi\n  4041c4:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  4041c8:\t48 39 c7             \tcmp    %rax,%rdi\n  4041cb:\t74 af                \tje     40417c <_ZN7leveldb6DBImpl16WriteLevel0TableEPNS_8MemTableEPNS_11VersionEditEPNS_7VersionE.cold+0x18>\n  4041cd:\te8 0e f1 ff ff       \tcallq  4032e0 <_ZdlPv@plt>\n  4041d2:\teb a8                \tjmp    40417c <_ZN7leveldb6DBImpl16WriteLevel0TableEPNS_8MemTableEPNS_11VersionEditEPNS_7VersionE.cold+0x18>", "code_s": "void __fastcall __noreturn leveldb DBImpl WriteLevel0Table() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  __int64 <span class=\"supfact\">v1</span>;\n  void **<span class=\"supfact\">v2</span>;\n  leveldb FileMetaData *<span class=\"supfact\">v3</span>;\n  leveldb FileMetaData ~FileMetaData(\n      (leveldb FileMetaData *)(<span class=\"supfact\">v1</span> - Number));\n  leveldb FileMetaData ~FileMetaData(\n      (leveldb FileMetaData *)(<span class=\"supfact\">v1</span> - Number));\n  if (*<span class=\"supfact\">v2</span>)\n    operator delete[](*<span class=\"supfact\">v2</span>);\n  leveldb FileMetaData ~FileMetaData(<span class=\"supfact\">v3</span>);\n  _Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "code_t": "void __fastcall __noreturn leveldb DBImpl WriteLevel0Table() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  __int64 <span class=\"supfact\">v1</span>;\n  void **<span class=\"supfact\">v2</span>;\n  leveldb FileMetaData *<span class=\"supfact\">v3</span>;\n  leveldb FileMetaData ~FileMetaData(\n      (leveldb FileMetaData *)(<span class=\"supfact\">v1</span> - Number));\n  leveldb FileMetaData ~FileMetaData(\n      (leveldb FileMetaData *)(<span class=\"supfact\">v1</span> - Number));\n  if (*<span class=\"supfact\">v2</span>)\n    operator delete[](*<span class=\"supfact\">v2</span>);\n  leveldb FileMetaData ~FileMetaData(<span class=\"supfact\">v3</span>);\n  _Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "var": [{"name": "v0", "type": "struct _Unwind_Exception *", "pred_name": "v0", "ref_name": "v0", "ref_type": "struct _Unwind_Exception *"}, {"name": "v1", "type": "__int64", "pred_name": "v1", "ref_name": "v1", "ref_type": "__int64"}, {"name": "v2", "type": "void * *", "pred_name": "v2", "ref_name": "v2", "ref_type": "void * *"}, {"name": "v3", "type": "void * *", "pred_name": "v3", "ref_name": "v3", "ref_type": "leveldb::FileMetaData *"}], "body_in_train": true}, {"repo_owner": "zzilla", "repo_name": "CodeCollection", "path": "zzilla/CodeCollection/4cdc498b982777880e498087458557c6f63861b03cfe20f336cb33d1800ac0b7", "path_in_repo": "zzilla/CodeCollection/OwnCode/ipCamera/Decode/ffmpeg/libavcodec/h264dsp.o", "objdump": "0000000000010ca9 <h264_v_loop_filter_luma_12_c>:\n   10ca9:\t48 83 ec 38          \tsub    $0x38,%rsp\n   10cad:\t48 89 7c 24 a0       \tmov    %rdi,-0x60(%rsp)\n   10cb2:\t89 74 24 9c          \tmov    %esi,-0x64(%rsp)\n   10cb6:\t89 54 24 98          \tmov    %edx,-0x68(%rsp)\n   10cba:\t89 4c 24 94          \tmov    %ecx,-0x6c(%rsp)\n   10cbe:\t4c 89 44 24 88       \tmov    %r8,-0x78(%rsp)\n   10cc3:\t48 8b 44 24 a0       \tmov    -0x60(%rsp),%rax\n   10cc8:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n   10ccd:\t8b 44 24 9c          \tmov    -0x64(%rsp),%eax\n   10cd1:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n   10cd5:\tc7 44 24 28 02 00 00 \tmovl   $0x2,0x28(%rsp)\n   10cdc:\t00 \n   10cdd:\tc7 44 24 24 04 00 00 \tmovl   $0x4,0x24(%rsp)\n   10ce4:\t00 \n   10ce5:\t8b 44 24 98          \tmov    -0x68(%rsp),%eax\n   10ce9:\t89 44 24 20          \tmov    %eax,0x20(%rsp)\n   10ced:\t8b 44 24 94          \tmov    -0x6c(%rsp),%eax\n   10cf1:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n   10cf5:\t48 8b 44 24 88       \tmov    -0x78(%rsp),%rax\n   10cfa:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n   10cff:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n   10d04:\t48 89 44 24 08       \tmov    %rax,0x8(%rsp)\n   10d09:\td1 7c 24 2c          \tsarl   0x2c(%rsp)\n   10d0d:\td1 7c 24 28          \tsarl   0x28(%rsp)\n   10d11:\tc1 64 24 20 04       \tshll   $0x4,0x20(%rsp)\n   10d16:\tc1 64 24 1c 04       \tshll   $0x4,0x1c(%rsp)\n   10d1b:\tc7 44 24 04 00 00 00 \tmovl   $0x0,0x4(%rsp)\n   10d22:\t00 \n   10d23:\te9 c7 03 00 00       \tjmpq   110ef <h264_v_loop_filter_luma_12_c+0x446>\n   10d28:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n   10d2c:\t48 63 d0             \tmovslq %eax,%rdx\n   10d2f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   10d34:\t48 01 d0             \tadd    %rdx,%rax\n   10d37:\t0f b6 00             \tmovzbl (%rax),%eax\n   10d3a:\t0f be c0             \tmovsbl %al,%eax\n   10d3d:\tc1 e0 04             \tshl    $0x4,%eax\n   10d40:\t89 04 24             \tmov    %eax,(%rsp)\n   10d43:\t83 3c 24 00          \tcmpl   $0x0,(%rsp)\n   10d47:\t79 18                \tjns    10d61 <h264_v_loop_filter_luma_12_c+0xb8>\n   10d49:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n   10d4d:\t0f af 44 24 28       \timul   0x28(%rsp),%eax\n   10d52:\t48 98                \tcltq   \n   10d54:\t48 01 c0             \tadd    %rax,%rax\n   10d57:\t48 01 44 24 08       \tadd    %rax,0x8(%rsp)\n   10d5c:\te9 89 03 00 00       \tjmpq   110ea <h264_v_loop_filter_luma_12_c+0x441>\n   10d61:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n   10d68:\t00 \n   10d69:\te9 6e 03 00 00       \tjmpq   110dc <h264_v_loop_filter_luma_12_c+0x433>\n   10d6e:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   10d72:\tf7 d8                \tneg    %eax\n   10d74:\t48 98                \tcltq   \n   10d76:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   10d7a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   10d7f:\t48 01 d0             \tadd    %rdx,%rax\n   10d82:\t0f b7 00             \tmovzwl (%rax),%eax\n   10d85:\t0f b7 c0             \tmovzwl %ax,%eax\n   10d88:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n   10d8c:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n   10d90:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10d95:\t29 d0                \tsub    %edx,%eax\n   10d97:\t01 c0                \tadd    %eax,%eax\n   10d99:\t48 98                \tcltq   \n   10d9b:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   10d9f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   10da4:\t48 01 d0             \tadd    %rdx,%rax\n   10da7:\t0f b7 00             \tmovzwl (%rax),%eax\n   10daa:\t0f b7 c0             \tmovzwl %ax,%eax\n   10dad:\t89 44 24 f4          \tmov    %eax,-0xc(%rsp)\n   10db1:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   10db5:\t89 c2                \tmov    %eax,%edx\n   10db7:\tc1 e0 02             \tshl    $0x2,%eax\n   10dba:\t29 c2                \tsub    %eax,%edx\n   10dbc:\t89 d0                \tmov    %edx,%eax\n   10dbe:\t48 98                \tcltq   \n   10dc0:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   10dc4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   10dc9:\t48 01 d0             \tadd    %rdx,%rax\n   10dcc:\t0f b7 00             \tmovzwl (%rax),%eax\n   10dcf:\t0f b7 c0             \tmovzwl %ax,%eax\n   10dd2:\t89 44 24 f0          \tmov    %eax,-0x10(%rsp)\n   10dd6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   10ddb:\t0f b7 00             \tmovzwl (%rax),%eax\n   10dde:\t0f b7 c0             \tmovzwl %ax,%eax\n   10de1:\t89 44 24 ec          \tmov    %eax,-0x14(%rsp)\n   10de5:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   10de9:\t48 98                \tcltq   \n   10deb:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   10def:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   10df4:\t48 01 d0             \tadd    %rdx,%rax\n   10df7:\t0f b7 00             \tmovzwl (%rax),%eax\n   10dfa:\t0f b7 c0             \tmovzwl %ax,%eax\n   10dfd:\t89 44 24 e8          \tmov    %eax,-0x18(%rsp)\n   10e01:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   10e05:\t01 c0                \tadd    %eax,%eax\n   10e07:\t48 98                \tcltq   \n   10e09:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   10e0d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   10e12:\t48 01 d0             \tadd    %rdx,%rax\n   10e15:\t0f b7 00             \tmovzwl (%rax),%eax\n   10e18:\t0f b7 c0             \tmovzwl %ax,%eax\n   10e1b:\t89 44 24 e4          \tmov    %eax,-0x1c(%rsp)\n   10e1f:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n   10e23:\t2b 44 24 ec          \tsub    -0x14(%rsp),%eax\n   10e27:\t99                   \tcltd   \n   10e28:\t31 d0                \txor    %edx,%eax\n   10e2a:\t29 d0                \tsub    %edx,%eax\n   10e2c:\t39 44 24 20          \tcmp    %eax,0x20(%rsp)\n   10e30:\t0f 8e 93 02 00 00    \tjle    110c9 <h264_v_loop_filter_luma_12_c+0x420>\n   10e36:\t8b 44 24 f4          \tmov    -0xc(%rsp),%eax\n   10e3a:\t2b 44 24 f8          \tsub    -0x8(%rsp),%eax\n   10e3e:\t99                   \tcltd   \n   10e3f:\t31 d0                \txor    %edx,%eax\n   10e41:\t29 d0                \tsub    %edx,%eax\n   10e43:\t39 44 24 1c          \tcmp    %eax,0x1c(%rsp)\n   10e47:\t0f 8e 7c 02 00 00    \tjle    110c9 <h264_v_loop_filter_luma_12_c+0x420>\n   10e4d:\t8b 44 24 e8          \tmov    -0x18(%rsp),%eax\n   10e51:\t2b 44 24 ec          \tsub    -0x14(%rsp),%eax\n   10e55:\t99                   \tcltd   \n   10e56:\t31 d0                \txor    %edx,%eax\n   10e58:\t29 d0                \tsub    %edx,%eax\n   10e5a:\t39 44 24 1c          \tcmp    %eax,0x1c(%rsp)\n   10e5e:\t0f 8e 65 02 00 00    \tjle    110c9 <h264_v_loop_filter_luma_12_c+0x420>\n   10e64:\t8b 04 24             \tmov    (%rsp),%eax\n   10e67:\t89 44 24 e0          \tmov    %eax,-0x20(%rsp)\n   10e6b:\t8b 44 24 f0          \tmov    -0x10(%rsp),%eax\n   10e6f:\t2b 44 24 f8          \tsub    -0x8(%rsp),%eax\n   10e73:\t99                   \tcltd   \n   10e74:\t31 d0                \txor    %edx,%eax\n   10e76:\t29 d0                \tsub    %edx,%eax\n   10e78:\t39 44 24 1c          \tcmp    %eax,0x1c(%rsp)\n   10e7c:\t0f 8e 8f 00 00 00    \tjle    10f11 <h264_v_loop_filter_luma_12_c+0x268>\n   10e82:\t83 3c 24 00          \tcmpl   $0x0,(%rsp)\n   10e86:\t0f 84 80 00 00 00    \tje     10f0c <h264_v_loop_filter_luma_12_c+0x263>\n   10e8c:\t8b 04 24             \tmov    (%rsp),%eax\n   10e8f:\tf7 d8                \tneg    %eax\n   10e91:\t89 c2                \tmov    %eax,%edx\n   10e93:\t8b 4c 24 f8          \tmov    -0x8(%rsp),%ecx\n   10e97:\t8b 44 24 ec          \tmov    -0x14(%rsp),%eax\n   10e9b:\t01 c8                \tadd    %ecx,%eax\n   10e9d:\t83 c0 01             \tadd    $0x1,%eax\n   10ea0:\td1 f8                \tsar    %eax\n   10ea2:\t89 c1                \tmov    %eax,%ecx\n   10ea4:\t8b 44 24 f0          \tmov    -0x10(%rsp),%eax\n   10ea8:\t01 c8                \tadd    %ecx,%eax\n   10eaa:\td1 f8                \tsar    %eax\n   10eac:\t2b 44 24 f4          \tsub    -0xc(%rsp),%eax\n   10eb0:\t89 44 24 dc          \tmov    %eax,-0x24(%rsp)\n   10eb4:\t89 54 24 d8          \tmov    %edx,-0x28(%rsp)\n   10eb8:\t8b 04 24             \tmov    (%rsp),%eax\n   10ebb:\t89 44 24 d4          \tmov    %eax,-0x2c(%rsp)\n   10ebf:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n   10ec3:\t3b 44 24 d8          \tcmp    -0x28(%rsp),%eax\n   10ec7:\t7d 06                \tjge    10ecf <h264_v_loop_filter_luma_12_c+0x226>\n   10ec9:\t8b 44 24 d8          \tmov    -0x28(%rsp),%eax\n   10ecd:\teb 14                \tjmp    10ee3 <h264_v_loop_filter_luma_12_c+0x23a>\n   10ecf:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n   10ed3:\t3b 44 24 d4          \tcmp    -0x2c(%rsp),%eax\n   10ed7:\t7e 06                \tjle    10edf <h264_v_loop_filter_luma_12_c+0x236>\n   10ed9:\t8b 44 24 d4          \tmov    -0x2c(%rsp),%eax\n   10edd:\teb 04                \tjmp    10ee3 <h264_v_loop_filter_luma_12_c+0x23a>\n   10edf:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n   10ee3:\t89 c6                \tmov    %eax,%esi\n   10ee5:\t8b 44 24 f4          \tmov    -0xc(%rsp),%eax\n   10ee9:\t89 c1                \tmov    %eax,%ecx\n   10eeb:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n   10eef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10ef4:\t29 d0                \tsub    %edx,%eax\n   10ef6:\t01 c0                \tadd    %eax,%eax\n   10ef8:\t48 98                \tcltq   \n   10efa:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   10efe:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   10f03:\t48 01 d0             \tadd    %rdx,%rax\n   10f06:\t8d 14 0e             \tlea    (%rsi,%rcx,1),%edx\n   10f09:\t66 89 10             \tmov    %dx,(%rax)\n   10f0c:\t83 44 24 e0 01       \taddl   $0x1,-0x20(%rsp)\n   10f11:\t8b 44 24 e4          \tmov    -0x1c(%rsp),%eax\n   10f15:\t2b 44 24 ec          \tsub    -0x14(%rsp),%eax\n   10f19:\t99                   \tcltd   \n   10f1a:\t31 d0                \txor    %edx,%eax\n   10f1c:\t29 d0                \tsub    %edx,%eax\n   10f1e:\t39 44 24 1c          \tcmp    %eax,0x1c(%rsp)\n   10f22:\t0f 8e 82 00 00 00    \tjle    10faa <h264_v_loop_filter_luma_12_c+0x301>\n   10f28:\t83 3c 24 00          \tcmpl   $0x0,(%rsp)\n   10f2c:\t74 77                \tje     10fa5 <h264_v_loop_filter_luma_12_c+0x2fc>\n   10f2e:\t8b 04 24             \tmov    (%rsp),%eax\n   10f31:\tf7 d8                \tneg    %eax\n   10f33:\t89 c2                \tmov    %eax,%edx\n   10f35:\t8b 4c 24 f8          \tmov    -0x8(%rsp),%ecx\n   10f39:\t8b 44 24 ec          \tmov    -0x14(%rsp),%eax\n   10f3d:\t01 c8                \tadd    %ecx,%eax\n   10f3f:\t83 c0 01             \tadd    $0x1,%eax\n   10f42:\td1 f8                \tsar    %eax\n   10f44:\t89 c1                \tmov    %eax,%ecx\n   10f46:\t8b 44 24 e4          \tmov    -0x1c(%rsp),%eax\n   10f4a:\t01 c8                \tadd    %ecx,%eax\n   10f4c:\td1 f8                \tsar    %eax\n   10f4e:\t2b 44 24 e8          \tsub    -0x18(%rsp),%eax\n   10f52:\t89 44 24 d0          \tmov    %eax,-0x30(%rsp)\n   10f56:\t89 54 24 cc          \tmov    %edx,-0x34(%rsp)\n   10f5a:\t8b 04 24             \tmov    (%rsp),%eax\n   10f5d:\t89 44 24 c8          \tmov    %eax,-0x38(%rsp)\n   10f61:\t8b 44 24 d0          \tmov    -0x30(%rsp),%eax\n   10f65:\t3b 44 24 cc          \tcmp    -0x34(%rsp),%eax\n   10f69:\t7d 06                \tjge    10f71 <h264_v_loop_filter_luma_12_c+0x2c8>\n   10f6b:\t8b 44 24 cc          \tmov    -0x34(%rsp),%eax\n   10f6f:\teb 14                \tjmp    10f85 <h264_v_loop_filter_luma_12_c+0x2dc>\n   10f71:\t8b 44 24 d0          \tmov    -0x30(%rsp),%eax\n   10f75:\t3b 44 24 c8          \tcmp    -0x38(%rsp),%eax\n   10f79:\t7e 06                \tjle    10f81 <h264_v_loop_filter_luma_12_c+0x2d8>\n   10f7b:\t8b 44 24 c8          \tmov    -0x38(%rsp),%eax\n   10f7f:\teb 04                \tjmp    10f85 <h264_v_loop_filter_luma_12_c+0x2dc>\n   10f81:\t8b 44 24 d0          \tmov    -0x30(%rsp),%eax\n   10f85:\t89 c6                \tmov    %eax,%esi\n   10f87:\t8b 44 24 e8          \tmov    -0x18(%rsp),%eax\n   10f8b:\t89 c1                \tmov    %eax,%ecx\n   10f8d:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   10f91:\t48 98                \tcltq   \n   10f93:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   10f97:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   10f9c:\t48 01 d0             \tadd    %rdx,%rax\n   10f9f:\t8d 14 0e             \tlea    (%rsi,%rcx,1),%edx\n   10fa2:\t66 89 10             \tmov    %dx,(%rax)\n   10fa5:\t83 44 24 e0 01       \taddl   $0x1,-0x20(%rsp)\n   10faa:\t8b 44 24 e0          \tmov    -0x20(%rsp),%eax\n   10fae:\tf7 d8                \tneg    %eax\n   10fb0:\t89 c2                \tmov    %eax,%edx\n   10fb2:\t8b 44 24 ec          \tmov    -0x14(%rsp),%eax\n   10fb6:\t2b 44 24 f8          \tsub    -0x8(%rsp),%eax\n   10fba:\t8d 0c 85 00 00 00 00 \tlea    0x0(,%rax,4),%ecx\n   10fc1:\t8b 44 24 f4          \tmov    -0xc(%rsp),%eax\n   10fc5:\t2b 44 24 e8          \tsub    -0x18(%rsp),%eax\n   10fc9:\t01 c8                \tadd    %ecx,%eax\n   10fcb:\t83 c0 04             \tadd    $0x4,%eax\n   10fce:\tc1 f8 03             \tsar    $0x3,%eax\n   10fd1:\t89 44 24 c4          \tmov    %eax,-0x3c(%rsp)\n   10fd5:\t89 54 24 c0          \tmov    %edx,-0x40(%rsp)\n   10fd9:\t8b 44 24 e0          \tmov    -0x20(%rsp),%eax\n   10fdd:\t89 44 24 bc          \tmov    %eax,-0x44(%rsp)\n   10fe1:\t8b 44 24 c4          \tmov    -0x3c(%rsp),%eax\n   10fe5:\t3b 44 24 c0          \tcmp    -0x40(%rsp),%eax\n   10fe9:\t7d 06                \tjge    10ff1 <h264_v_loop_filter_luma_12_c+0x348>\n   10feb:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n   10fef:\teb 14                \tjmp    11005 <h264_v_loop_filter_luma_12_c+0x35c>\n   10ff1:\t8b 44 24 c4          \tmov    -0x3c(%rsp),%eax\n   10ff5:\t3b 44 24 bc          \tcmp    -0x44(%rsp),%eax\n   10ff9:\t7e 06                \tjle    11001 <h264_v_loop_filter_luma_12_c+0x358>\n   10ffb:\t8b 44 24 bc          \tmov    -0x44(%rsp),%eax\n   10fff:\teb 04                \tjmp    11005 <h264_v_loop_filter_luma_12_c+0x35c>\n   11001:\t8b 44 24 c4          \tmov    -0x3c(%rsp),%eax\n   11005:\t89 44 24 b8          \tmov    %eax,-0x48(%rsp)\n   11009:\t8b 54 24 f8          \tmov    -0x8(%rsp),%edx\n   1100d:\t8b 44 24 b8          \tmov    -0x48(%rsp),%eax\n   11011:\t01 d0                \tadd    %edx,%eax\n   11013:\t89 44 24 b4          \tmov    %eax,-0x4c(%rsp)\n   11017:\tc7 44 24 b0 0c 00 00 \tmovl   $0xc,-0x50(%rsp)\n   1101e:\t00 \n   1101f:\t8b 44 24 b0          \tmov    -0x50(%rsp),%eax\n   11023:\tba 01 00 00 00       \tmov    $0x1,%edx\n   11028:\t89 c1                \tmov    %eax,%ecx\n   1102a:\td3 e2                \tshl    %cl,%edx\n   1102c:\t89 d0                \tmov    %edx,%eax\n   1102e:\tf7 d8                \tneg    %eax\n   11030:\t23 44 24 b4          \tand    -0x4c(%rsp),%eax\n   11034:\t85 c0                \ttest   %eax,%eax\n   11036:\t74 1d                \tje     11055 <h264_v_loop_filter_luma_12_c+0x3ac>\n   11038:\t8b 44 24 b4          \tmov    -0x4c(%rsp),%eax\n   1103c:\tf7 d8                \tneg    %eax\n   1103e:\t99                   \tcltd   \n   1103f:\t8b 44 24 b0          \tmov    -0x50(%rsp),%eax\n   11043:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   11048:\t89 c1                \tmov    %eax,%ecx\n   1104a:\td3 e6                \tshl    %cl,%esi\n   1104c:\t89 f0                \tmov    %esi,%eax\n   1104e:\t83 e8 01             \tsub    $0x1,%eax\n   11051:\t21 d0                \tand    %edx,%eax\n   11053:\teb 04                \tjmp    11059 <h264_v_loop_filter_luma_12_c+0x3b0>\n   11055:\t8b 44 24 b4          \tmov    -0x4c(%rsp),%eax\n   11059:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n   1105d:\tf7 da                \tneg    %edx\n   1105f:\t48 63 d2             \tmovslq %edx,%rdx\n   11062:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n   11066:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n   1106b:\t48 01 ca             \tadd    %rcx,%rdx\n   1106e:\t66 89 02             \tmov    %ax,(%rdx)\n   11071:\t8b 44 24 ec          \tmov    -0x14(%rsp),%eax\n   11075:\t2b 44 24 b8          \tsub    -0x48(%rsp),%eax\n   11079:\t89 44 24 ac          \tmov    %eax,-0x54(%rsp)\n   1107d:\tc7 44 24 a8 0c 00 00 \tmovl   $0xc,-0x58(%rsp)\n   11084:\t00 \n   11085:\t8b 44 24 a8          \tmov    -0x58(%rsp),%eax\n   11089:\tba 01 00 00 00       \tmov    $0x1,%edx\n   1108e:\t89 c1                \tmov    %eax,%ecx\n   11090:\td3 e2                \tshl    %cl,%edx\n   11092:\t89 d0                \tmov    %edx,%eax\n   11094:\tf7 d8                \tneg    %eax\n   11096:\t23 44 24 ac          \tand    -0x54(%rsp),%eax\n   1109a:\t85 c0                \ttest   %eax,%eax\n   1109c:\t74 1d                \tje     110bb <h264_v_loop_filter_luma_12_c+0x412>\n   1109e:\t8b 44 24 ac          \tmov    -0x54(%rsp),%eax\n   110a2:\tf7 d8                \tneg    %eax\n   110a4:\t99                   \tcltd   \n   110a5:\t8b 44 24 a8          \tmov    -0x58(%rsp),%eax\n   110a9:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   110ae:\t89 c1                \tmov    %eax,%ecx\n   110b0:\td3 e6                \tshl    %cl,%esi\n   110b2:\t89 f0                \tmov    %esi,%eax\n   110b4:\t83 e8 01             \tsub    $0x1,%eax\n   110b7:\t21 d0                \tand    %edx,%eax\n   110b9:\teb 04                \tjmp    110bf <h264_v_loop_filter_luma_12_c+0x416>\n   110bb:\t8b 44 24 ac          \tmov    -0x54(%rsp),%eax\n   110bf:\t89 c2                \tmov    %eax,%edx\n   110c1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   110c6:\t66 89 10             \tmov    %dx,(%rax)\n   110c9:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n   110cd:\t48 98                \tcltq   \n   110cf:\t48 01 c0             \tadd    %rax,%rax\n   110d2:\t48 01 44 24 08       \tadd    %rax,0x8(%rsp)\n   110d7:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n   110dc:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n   110e0:\t3b 44 24 fc          \tcmp    -0x4(%rsp),%eax\n   110e4:\t0f 8f 84 fc ff ff    \tjg     10d6e <h264_v_loop_filter_luma_12_c+0xc5>\n   110ea:\t83 44 24 04 01       \taddl   $0x1,0x4(%rsp)\n   110ef:\t83 7c 24 04 03       \tcmpl   $0x3,0x4(%rsp)\n   110f4:\t0f 8e 2e fc ff ff    \tjle    10d28 <h264_v_loop_filter_luma_12_c+0x7f>\n   110fa:\t90                   \tnop\n   110fb:\t90                   \tnop\n   110fc:\t48 83 c4 38          \tadd    $0x38,%rsp\n   11100:\tc3                   \tretq   ", "code_s": "__int64 __fastcall h264_v_loop_filter_luma_12_c(_WORD *<span class=\"supfact\">a1</span>,\n                                                int <span class=\"supfact\">a2</span>,\n                                                int <span class=\"supfact\">a3</span>,\n                                                int <span class=\"supfact\">a4</span>,\n                                                __int64 <span class=\"supfact\">a5</span>) {\n  __int64 result;\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">v17</span>;\n  int <span class=\"supfact\">v18</span>;\n  int <span class=\"supfact\">v19</span>;\n  int <span class=\"supfact\">v20</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">v22</span>;\n  int <span class=\"supfact\">i</span>;\n  _WORD *<span class=\"supfact\">v24</span>;\n  int <span class=\"supfact\">v25</span>;\n  int <span class=\"supfact\">v26</span>;\n  result = (__int64)<span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v24</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v26</span> = <span class=\"supfact\">a2</span> >> Number;\n  <span class=\"supfact\">v25</span> = Number * <span class=\"supfact\">a4</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v22</span> =\n        Number * *(char *)(<span class=\"supfact\">i</span> + <span class=\"supfact\">a5</span>);\n    if ((*(char *)(<span class=\"supfact\">i</span> + <span class=\"supfact\">a5</span>) & Number) !=\n        Number) {\n      result = Number L;\n      <span class=\"supfact\">v24</span> += Number;\n    } else {\n      for (<span class=\"supfact\">j</span> = Number;; ++<span class=\"supfact\">j</span>) {\n        result = Number L;\n        if (<span class=\"supfact\">j</span> >= Number)\n          break;\n        <span class=\"supfact\">v20</span> =\n            (unsigned __int16)<span class=\"supfact\">v24</span>[-<span class=\"supfact\">v26</span>];\n        <span class=\"supfact\">v19</span> =\n            (unsigned __int16)<span class=\"supfact\">v24</span>[Number * <span class=\"supfact\">v26</span>];\n        <span class=\"supfact\">v18</span> =\n            (unsigned __int16)<span class=\"supfact\">v24</span>[Number * <span class=\"supfact\">v26</span>];\n        <span class=\"supfact\">v17</span> = (unsigned __int16)*<span class=\"supfact\">v24</span>;\n        <span class=\"supfact\">v16</span> =\n            (unsigned __int16)<span class=\"supfact\">v24</span>[<span class=\"supfact\">v26</span>];\n        <span class=\"supfact\">v15</span> =\n            (unsigned __int16)<span class=\"supfact\">v24</span>[Number * <span class=\"supfact\">v26</span>];\n        if (Number * <span class=\"supfact\">a3</span> >\n                (int)abs32(<span class=\"supfact\">v20</span> - <span class=\"supfact\">v17</span>) &&\n            <span class=\"supfact\">v25</span> >\n                (int)abs32(<span class=\"supfact\">v19</span> - <span class=\"supfact\">v20</span>) &&\n            <span class=\"supfact\">v25</span> >\n                (int)abs32(<span class=\"supfact\">v16</span> - <span class=\"supfact\">v17</span>)) {\n          <span class=\"supfact\">v14</span> = <span class=\"supfact\">v22</span>;\n          if (<span class=\"supfact\">v25</span> >\n              (int)abs32(<span class=\"supfact\">v18</span> - <span class=\"supfact\">v20</span>)) {\n            if (<span class=\"supfact\">v22</span>) {\n              <span class=\"supfact\">v13</span> =\n                  ((((<span class=\"supfact\">v20</span> + <span class=\"supfact\">v17</span> + Number) >>\n                     Number) +\n                    <span class=\"supfact\">v18</span>) >>\n                   Number) -\n                  <span class=\"supfact\">v19</span>;\n              if (<span class=\"supfact\">v13</span> >= -<span class=\"supfact\">v22</span>) {\n                if (<span class=\"supfact\">v13</span> <= <span class=\"supfact\">v22</span>)\n                  v6 =\n                      ((((<span class=\"supfact\">v20</span> + <span class=\"supfact\">v17</span> + Number) >>\n                         Number) +\n                        <span class=\"supfact\">v18</span>) >>\n                       Number) -\n                      <span class=\"supfact\">v19</span>;\n                else\n                  LOWORD(v6) = <span class=\"supfact\">v22</span>;\n              } else {\n                v6 = -<span class=\"supfact\">v22</span>;\n              }\n              <span class=\"supfact\">v24</span>[Number * <span class=\"supfact\">v26</span>] =\n                  v6 + <span class=\"supfact\">v19</span>;\n            }\n            <span class=\"supfact\">v14</span> = <span class=\"supfact\">v22</span> + Number;\n          }\n          if (<span class=\"supfact\">v25</span> >\n              (int)abs32(<span class=\"supfact\">v15</span> - <span class=\"supfact\">v17</span>)) {\n            if (<span class=\"supfact\">v22</span>) {\n              <span class=\"supfact\">v12</span> =\n                  ((((<span class=\"supfact\">v20</span> + <span class=\"supfact\">v17</span> + Number) >>\n                     Number) +\n                    <span class=\"supfact\">v15</span>) >>\n                   Number) -\n                  <span class=\"supfact\">v16</span>;\n              if (<span class=\"supfact\">v12</span> >= -<span class=\"supfact\">v22</span>) {\n                if (<span class=\"supfact\">v12</span> <= <span class=\"supfact\">v22</span>)\n                  v7 =\n                      ((((<span class=\"supfact\">v20</span> + <span class=\"supfact\">v17</span> + Number) >>\n                         Number) +\n                        <span class=\"supfact\">v15</span>) >>\n                       Number) -\n                      <span class=\"supfact\">v16</span>;\n                else\n                  LOWORD(v7) = <span class=\"supfact\">v22</span>;\n              } else {\n                v7 = -<span class=\"supfact\">v22</span>;\n              }\n              <span class=\"supfact\">v24</span>[<span class=\"supfact\">v26</span>] =\n                  v7 + <span class=\"supfact\">v16</span>;\n            }\n            ++<span class=\"supfact\">v14</span>;\n          }\n          <span class=\"supfact\">v11</span> =\n              (Number * (<span class=\"supfact\">v17</span> - <span class=\"supfact\">v20</span>) +\n               <span class=\"supfact\">v19</span> - <span class=\"supfact\">v16</span> + Number) >>\n              Number;\n          if (<span class=\"supfact\">v11</span> >= -<span class=\"supfact\">v14</span>) {\n            if (<span class=\"supfact\">v11</span> <= <span class=\"supfact\">v14</span>)\n              v8 = (Number * (<span class=\"supfact\">v17</span> - <span class=\"supfact\">v20</span>) +\n                    <span class=\"supfact\">v19</span> - <span class=\"supfact\">v16</span> + Number) >>\n                   Number;\n            else\n              v8 = <span class=\"supfact\">v14</span>;\n          } else {\n            v8 = -<span class=\"supfact\">v14</span>;\n          }\n          <span class=\"supfact\">v10</span> = v8;\n          if (((<span class=\"supfact\">v20</span> + v8) & Number) != Number)\n            v8 = (-(<span class=\"supfact\">v20</span> + v8) >> Number) & Number;\n          else\n            LOWORD(v8) = <span class=\"supfact\">v20</span> + v8;\n          <span class=\"supfact\">v24</span>[-<span class=\"supfact\">v26</span>] = v8;\n          if (((<span class=\"supfact\">v17</span> - <span class=\"supfact\">v10</span>) & Number) != Number)\n            v9 = ((<span class=\"supfact\">v10</span> - <span class=\"supfact\">v17</span>) >> Number) &\n                 Number;\n          else\n            LOWORD(v9) = <span class=\"supfact\">v17</span> - <span class=\"supfact\">v10</span>;\n          *<span class=\"supfact\">v24</span> = v9;\n        }\n        ++<span class=\"supfact\">v24</span>;\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl h264_v_loop_filter_luma_12_c(uint8_t *<span class=\"supfact\">pix</span>,\n                                          int <span class=\"supfact\">stride</span>,\n                                          int <span class=\"supfact\">alpha</span>,\n                                          int <span class=\"supfact\">beta</span>,\n                                          int8_t *<span class=\"supfact\">tc0</span>) {\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">v17</span>;\n  int <span class=\"supfact\">v18</span>;\n  int <span class=\"supfact\">v19</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">v21</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v24</span>;\n  int <span class=\"supfact\">v25</span>;\n  <span class=\"supfact\">v25</span> = <span class=\"supfact\">stride</span> >> Number;\n  <span class=\"supfact\">v24</span> = Number * <span class=\"supfact\">beta</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v21</span> = Number * <span class=\"supfact\">tc0</span>[<span class=\"supfact\">i</span>];\n    if ((<span class=\"supfact\">tc0</span>[<span class=\"supfact\">i</span>] & Number) != Number) {\n      <span class=\"supfact\">pix</span> += Number;\n    } else {\n      for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < Number;\n           ++<span class=\"supfact\">j</span>) {\n        <span class=\"supfact\">v19</span> =\n            *(unsigned __int16\n                  *)&<span class=\"supfact\">pix</span>[Number * <span class=\"supfact\">v25</span>];\n        <span class=\"supfact\">v18</span> =\n            *(unsigned __int16\n                  *)&<span class=\"supfact\">pix</span>[Number * <span class=\"supfact\">v25</span>];\n        <span class=\"supfact\">v17</span> =\n            *(unsigned __int16\n                  *)&<span class=\"supfact\">pix</span>[Number * <span class=\"supfact\">v25</span>];\n        <span class=\"supfact\">v16</span> = *(unsigned __int16 *)<span class=\"supfact\">pix</span>;\n        <span class=\"supfact\">v15</span> =\n            *(unsigned __int16\n                  *)&<span class=\"supfact\">pix</span>[Number * <span class=\"supfact\">v25</span>];\n        <span class=\"supfact\">v14</span> =\n            *(unsigned __int16\n                  *)&<span class=\"supfact\">pix</span>[Number * <span class=\"supfact\">v25</span>];\n        if (Number * <span class=\"supfact\">alpha</span> >\n                (int)abs32(<span class=\"supfact\">v19</span> - <span class=\"supfact\">v16</span>) &&\n            <span class=\"supfact\">v24</span> >\n                (int)abs32(<span class=\"supfact\">v18</span> - <span class=\"supfact\">v19</span>) &&\n            <span class=\"supfact\">v24</span> >\n                (int)abs32(<span class=\"supfact\">v15</span> - <span class=\"supfact\">v16</span>)) {\n          <span class=\"supfact\">v13</span> = <span class=\"supfact\">v21</span>;\n          if (<span class=\"supfact\">v24</span> >\n              (int)abs32(<span class=\"supfact\">v17</span> - <span class=\"supfact\">v19</span>)) {\n            if (<span class=\"supfact\">v21</span>) {\n              <span class=\"supfact\">v12</span> =\n                  ((((<span class=\"supfact\">v19</span> + <span class=\"supfact\">v16</span> + Number) >>\n                     Number) +\n                    <span class=\"supfact\">v17</span>) >>\n                   Number) -\n                  <span class=\"supfact\">v18</span>;\n              if (<span class=\"supfact\">v12</span> >= -<span class=\"supfact\">v21</span>) {\n                if (<span class=\"supfact\">v12</span> <= <span class=\"supfact\">v21</span>)\n                  v5 =\n                      ((((<span class=\"supfact\">v19</span> + <span class=\"supfact\">v16</span> + Number) >>\n                         Number) +\n                        <span class=\"supfact\">v17</span>) >>\n                       Number) -\n                      <span class=\"supfact\">v18</span>;\n                else\n                  LOWORD(v5) = <span class=\"supfact\">v21</span>;\n              } else {\n                v5 = -<span class=\"supfact\">v21</span>;\n              }\n              *(_WORD *)&<span class=\"supfact\">pix</span>[Number * <span class=\"supfact\">v25</span>] =\n                  v5 + <span class=\"supfact\">v18</span>;\n            }\n            <span class=\"supfact\">v13</span> = <span class=\"supfact\">v21</span> + Number;\n          }\n          if (<span class=\"supfact\">v24</span> >\n              (int)abs32(<span class=\"supfact\">v14</span> - <span class=\"supfact\">v16</span>)) {\n            if (<span class=\"supfact\">v21</span>) {\n              <span class=\"supfact\">v11</span> =\n                  ((((<span class=\"supfact\">v19</span> + <span class=\"supfact\">v16</span> + Number) >>\n                     Number) +\n                    <span class=\"supfact\">v14</span>) >>\n                   Number) -\n                  <span class=\"supfact\">v15</span>;\n              if (<span class=\"supfact\">v11</span> >= -<span class=\"supfact\">v21</span>) {\n                if (<span class=\"supfact\">v11</span> <= <span class=\"supfact\">v21</span>)\n                  v6 =\n                      ((((<span class=\"supfact\">v19</span> + <span class=\"supfact\">v16</span> + Number) >>\n                         Number) +\n                        <span class=\"supfact\">v14</span>) >>\n                       Number) -\n                      <span class=\"supfact\">v15</span>;\n                else\n                  LOWORD(v6) = <span class=\"supfact\">v21</span>;\n              } else {\n                v6 = -<span class=\"supfact\">v21</span>;\n              }\n              *(_WORD *)&<span class=\"supfact\">pix</span>[Number * <span class=\"supfact\">v25</span>] =\n                  v6 + <span class=\"supfact\">v15</span>;\n            }\n            ++<span class=\"supfact\">v13</span>;\n          }\n          <span class=\"supfact\">v10</span> =\n              (Number * (<span class=\"supfact\">v16</span> - <span class=\"supfact\">v19</span>) +\n               <span class=\"supfact\">v18</span> - <span class=\"supfact\">v15</span> + Number) >>\n              Number;\n          if (<span class=\"supfact\">v10</span> >= -<span class=\"supfact\">v13</span>) {\n            if (<span class=\"supfact\">v10</span> <= <span class=\"supfact\">v13</span>)\n              v7 = (Number * (<span class=\"supfact\">v16</span> - <span class=\"supfact\">v19</span>) +\n                    <span class=\"supfact\">v18</span> - <span class=\"supfact\">v15</span> + Number) >>\n                   Number;\n            else\n              v7 = <span class=\"supfact\">v13</span>;\n          } else {\n            v7 = -<span class=\"supfact\">v13</span>;\n          }\n          <span class=\"supfact\">v9</span> = v7;\n          if (((<span class=\"supfact\">v19</span> + v7) & Number) != Number)\n            v7 = (-(<span class=\"supfact\">v19</span> + v7) >> Number) & Number;\n          else\n            LOWORD(v7) = <span class=\"supfact\">v19</span> + v7;\n          *(_WORD *)&<span class=\"supfact\">pix</span>[Number * <span class=\"supfact\">v25</span>] = v7;\n          if (((<span class=\"supfact\">v16</span> - <span class=\"supfact\">v9</span>) & Number) != Number)\n            v8 =\n                ((<span class=\"supfact\">v9</span> - <span class=\"supfact\">v16</span>) >> Number) & Number;\n          else\n            LOWORD(v8) = <span class=\"supfact\">v16</span> - <span class=\"supfact\">v9</span>;\n          *(_WORD *)<span class=\"supfact\">pix</span> = v8;\n        }\n        <span class=\"supfact\">pix</span> += Number;\n      }\n    }\n  }\n}", "var": [{"name": "a1", "type": "uint8_t *", "pred_name": "pix", "ref_name": "pix", "ref_type": "uint8_t *"}, {"name": "a2", "type": "int", "pred_name": "stride", "ref_name": "stride", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "alpha", "ref_name": "alpha", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "beta", "ref_name": "beta", "ref_type": "int"}, {"name": "a5", "type": "int8_t *", "pred_name": "tc0", "ref_name": "tc0", "ref_type": "int8_t *"}, {"name": "v10", "type": "int", "pred_name": "v9", "ref_name": "v9", "ref_type": "int"}, {"name": "v11", "type": "int", "pred_name": "v10", "ref_name": "v10", "ref_type": "int"}, {"name": "v12", "type": "int", "pred_name": "v11", "ref_name": "v11", "ref_type": "int"}, {"name": "v13", "type": "int", "pred_name": "v12", "ref_name": "v12", "ref_type": "int"}, {"name": "v14", "type": "int", "pred_name": "v13", "ref_name": "v13", "ref_type": "int"}, {"name": "v15", "type": "int", "pred_name": "v14", "ref_name": "v14", "ref_type": "int"}, {"name": "v16", "type": "int", "pred_name": "v15", "ref_name": "v15", "ref_type": "int"}, {"name": "v17", "type": "int", "pred_name": "v16", "ref_name": "v16", "ref_type": "int"}, {"name": "v18", "type": "int", "pred_name": "v17", "ref_name": "v17", "ref_type": "int"}, {"name": "v19", "type": "int", "pred_name": "v18", "ref_name": "v18", "ref_type": "int"}, {"name": "v20", "type": "int", "pred_name": "v19", "ref_name": "v19", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "j", "ref_name": "j", "ref_type": "int"}, {"name": "v22", "type": "int", "pred_name": "v21", "ref_name": "v21", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "v24", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v25", "type": "int", "pred_name": "v24", "ref_name": "v24", "ref_type": "int"}, {"name": "v26", "type": "int", "pred_name": "v25", "ref_name": "v25", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "Jeongseob", "repo_name": "xen-coboost-sched", "path": "Jeongseob/xen-coboost-sched/bba4c077b51102d1da8c5214588c972d1ff60428ea266fe5eb91e5c5dda7492a", "path_in_repo": "Jeongseob/xen-coboost-sched/tools/qemu-xen/microblazeel-linux-user/syscall.o", "objdump": "000000000000bb6d <target_offset64>:\n    bb6d:\t55                   \tpush   %rbp\n    bb6e:\t48 89 e5             \tmov    %rsp,%rbp\n    bb71:\t48 83 ec 20          \tsub    $0x20,%rsp\n    bb75:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n    bb78:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n    bb7b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    bb82:\t00 00 \n    bb84:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    bb88:\t31 c0                \txor    %eax,%eax\n    bb8a:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    bb8d:\t48 c1 e0 20          \tshl    $0x20,%rax\n    bb91:\t48 89 c2             \tmov    %rax,%rdx\n    bb94:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    bb97:\t48 09 d0             \tor     %rdx,%rax\n    bb9a:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    bb9e:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    bba5:\t00 00 \n    bba7:\t74 05                \tje     bbae <target_offset64+0x41>\n    bba9:\te8 00 00 00 00       \tcallq  bbae <target_offset64+0x41>\n    bbae:\tc9                   \tleaveq \n    bbaf:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall target_offset64(unsigned int <span class=\"supfact\">a1</span>,\n                                            unsigned int <span class=\"supfact\">a2</span>) {\n  return ((unsigned __int64)<span class=\"supfact\">a2</span> << Number) | <span class=\"supfact\">a1</span>;\n}", "code_t": "uint64_t __cdecl target_offset64(uint32_t <span class=\"supfact\">word0</span>,\n                                 uint32_t <span class=\"supfact\">word1</span>) {\n  return ((unsigned __int64)<span class=\"supfact\">word1</span> << Number) |\n         <span class=\"supfact\">word0</span>;\n}", "var": [{"name": "a1", "type": "uint32_t", "pred_name": "word0", "ref_name": "word0", "ref_type": "uint32_t"}, {"name": "a2", "type": "uint32_t", "pred_name": "word1", "ref_name": "word1", "ref_type": "uint32_t"}], "body_in_train": true}, {"repo_owner": "rockchip-toybrick", "repo_name": "external-wpa_supplicant_8", "path": "rockchip-toybrick/external-wpa_supplicant_8/6c2672fab34303e61c1d7e93a0407c1791fe28b43ea8f5250feccdda94afd81e", "path_in_repo": "rockchip-toybrick/external-wpa_supplicant_8/hostapd/hostapd", "objdump": "00000000004307c8 <update_channel_utilization>:\n  4307c8:\t55                   \tpush   %rbp\n  4307c9:\t48 89 e5             \tmov    %rsp,%rbp\n  4307cc:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4307d0:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4307d4:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  4307d8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4307dc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4307e0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4307e4:\t8b 80 18 0a 00 00    \tmov    0xa18(%rax),%eax\n  4307ea:\t85 c0                \ttest   %eax,%eax\n  4307ec:\t0f 84 d9 00 00 00    \tje     4308cb <update_channel_utilization+0x103>\n  4307f2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4307f6:\t0f b6 40 1c          \tmovzbl 0x1c(%rax),%eax\n  4307fa:\t83 e0 01             \tand    $0x1,%eax\n  4307fd:\t84 c0                \ttest   %al,%al\n  4307ff:\t0f 84 c6 00 00 00    \tje     4308cb <update_channel_utilization+0x103>\n  430805:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  430809:\t48 8b 00             \tmov    (%rax),%rax\n  43080c:\t8b 80 b0 08 00 00    \tmov    0x8b0(%rax),%eax\n  430812:\t89 c2                \tmov    %eax,%edx\n  430814:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  430818:\t89 d6                \tmov    %edx,%esi\n  43081a:\t48 89 c7             \tmov    %rax,%rdi\n  43081d:\te8 39 ff ff ff       \tcallq  43075b <hostapd_drv_get_survey>\n  430822:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  430825:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  430829:\t74 19                \tje     430844 <update_channel_utilization+0x7c>\n  43082b:\tbe 08 5b 46 00       \tmov    $0x465b08,%esi\n  430830:\tbf 05 00 00 00       \tmov    $0x5,%edi\n  430835:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  43083a:\te8 23 5e 00 00       \tcallq  436662 <wpa_printf>\n  43083f:\te9 88 00 00 00       \tjmpq   4308cc <update_channel_utilization+0x104>\n  430844:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  430848:\t48 89 c7             \tmov    %rax,%rdi\n  43084b:\te8 91 fb ff ff       \tcallq  4303e1 <ieee802_11_set_beacon>\n  430850:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  430854:\t8b 80 00 0b 00 00    \tmov    0xb00(%rax),%eax\n  43085a:\t89 c0                \tmov    %eax,%eax\n  43085c:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n  430863:\t48 c1 e8 20          \tshr    $0x20,%rax\n  430867:\tc1 e8 06             \tshr    $0x6,%eax\n  43086a:\tc1 e0 0a             \tshl    $0xa,%eax\n  43086d:\t89 c0                \tmov    %eax,%eax\n  43086f:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n  430876:\t48 c1 e8 20          \tshr    $0x20,%rax\n  43087a:\tc1 e8 06             \tshr    $0x6,%eax\n  43087d:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  430880:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  430884:\t8b 90 00 0b 00 00    \tmov    0xb00(%rax),%edx\n  43088a:\t89 d0                \tmov    %edx,%eax\n  43088c:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n  430893:\t48 c1 e8 20          \tshr    $0x20,%rax\n  430897:\tc1 e8 06             \tshr    $0x6,%eax\n  43089a:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n  4308a0:\t29 c2                \tsub    %eax,%edx\n  4308a2:\t89 d0                \tmov    %edx,%eax\n  4308a4:\tc1 e0 0a             \tshl    $0xa,%eax\n  4308a7:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4308aa:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  4308ae:\t8b 75 ec             \tmov    -0x14(%rbp),%esi\n  4308b1:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  4308b4:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  4308ba:\t48 89 d1             \tmov    %rdx,%rcx\n  4308bd:\tba c8 07 43 00       \tmov    $0x4307c8,%edx\n  4308c2:\t89 c7                \tmov    %eax,%edi\n  4308c4:\te8 19 2d 00 00       \tcallq  4335e2 <eloop_register_timeout>\n  4308c9:\teb 01                \tjmp    4308cc <update_channel_utilization+0x104>\n  4308cb:\t90                   \tnop\n  4308cc:\tc9                   \tleaveq \n  4308cd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall update_channel_utilization(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">result</span> = *(unsigned int *)(<span class=\"supfact\">a1</span> + Number);\n  if ((_DWORD)<span class=\"supfact\">result</span>) {\n    <span class=\"supfact\">result</span> = *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) & Number;\n    if ((_BYTE)<span class=\"supfact\">result</span>) {\n      <span class=\"supfact\">v2</span> =\n          *(unsigned int *)(*(_QWORD *)<span class=\"supfact\">a1</span> + Number L);\n      if ((unsigned int)hostapd_drv_get_survey(<span class=\"supfact\">a1</span>,\n                                               <span class=\"supfact\">v2</span>)) {\n        <span class=\"supfact\">result</span> = wpa_printf(\n            Number, (unsigned int)String, <span class=\"supfact\">v3</span>,\n            <span class=\"supfact\">v4</span>, <span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>);\n      } else {\n        ieee802_11_set_beacon(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v2</span>,\n                              <span class=\"supfact\">v3</span>, <span class=\"supfact\">v4</span>,\n                              <span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>);\n        <span class=\"supfact\">result</span> = eloop_register_timeout(\n            ((*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number) << Number) /\n                Number,\n            (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) % Number) << Number,\n            update_channel_utilization, <span class=\"supfact\">a1</span>, Number L);\n      }\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl update_channel_utilization(void *<span class=\"supfact\">eloop_data</span>,\n                                        void *<span class=\"supfact\">user_data</span>) {\n  if (*((_DWORD *)<span class=\"supfact\">eloop_data</span> + Number) &&\n      (*((_BYTE *)<span class=\"supfact\">eloop_data</span> + Number) & Number) != Number) {\n    if (hostapd_drv_get_survey(\n            (hostapd_data *)<span class=\"supfact\">eloop_data</span>,\n            *(_DWORD *)(*(_QWORD *)<span class=\"supfact\">eloop_data</span> + Number L))) {\n      wpa_printf(Number, String);\n    } else {\n      ieee802_11_set_beacon((hostapd_data *)<span class=\"supfact\">eloop_data</span>);\n      eloop_register_timeout(\n          ((*((_DWORD *)<span class=\"supfact\">eloop_data</span> + Number) / Number)\n           << Number) /\n              Number,\n          (*((_DWORD *)<span class=\"supfact\">eloop_data</span> + Number) % Number) << Number,\n          (eloop_timeout_handler)update_channel_utilization,\n          <span class=\"supfact\">eloop_data</span>, Number L);\n    }\n  }\n}", "var": [{"name": "a1", "type": "hostapd_data *", "pred_name": "hapd", "ref_name": "eloop_data", "ref_type": "void *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "", "ref_type": "disappear"}, {"name": "v2", "type": "wpabuf *", "pred_name": "assocresp", "ref_name": "user_data", "ref_type": "void *"}, {"name": "v3", "type": "int", "pred_name": "timeout", "ref_name": "", "ref_type": "disappear"}, {"name": "v4", "type": "int", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v5", "type": "int", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "int", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "darrensessions", "repo_name": "rtn56u", "path": "darrensessions/rtn56u/08b55a88ec179a6a01de0cd59ea0e97c79ecc06f79b606f2122ba268082450f3", "path_in_repo": "darrensessions/rtn56u/user/ffmpeg-0.6.2/source/libavcodec/ptx.o", "objdump": "0000000000000000 <ptx_init>:\n   0:\t48 83 ec 28          \tsub    $0x28,%rsp\n   4:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n   9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   e:\t48 8b 80 a0 00 00 00 \tmov    0xa0(%rax),%rax\n  15:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n  1a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  1f:\t48 89 c7             \tmov    %rax,%rdi\n  22:\te8 00 00 00 00       \tcallq  27 <ptx_init+0x27>\n  27:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n  2c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  31:\t48 89 90 e8 01 00 00 \tmov    %rdx,0x1e8(%rax)\n  38:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  3d:\t48 83 c4 28          \tadd    $0x28,%rsp\n  41:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ptx_init(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  avcodec_get_frame_defaults(<span class=\"supfact\">v2</span>);\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v2</span>;\n  return Number L;\n}", "code_t": "int __cdecl ptx_init(AVCodecContext_0 *<span class=\"supfact\">avctx</span>) {\n  PTXContext_0 *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (PTXContext_0 *)<span class=\"supfact\">avctx</span>->priv_data;\n  avcodec_get_frame_defaults(<span class=\"supfact\">s</span>);\n  <span class=\"supfact\">avctx</span>->coded_frame = &<span class=\"supfact\">s</span>->picture;\n  return Number;\n}", "var": [{"name": "a1", "type": "AVCodecContext_0 *", "pred_name": "avctx", "ref_name": "avctx", "ref_type": "AVCodecContext_0 *"}, {"name": "v2", "type": "PTXContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "PTXContext_0 *"}], "body_in_train": true}, {"repo_owner": "yantouyantou", "repo_name": "imame4all", "path": "yantouyantou/imame4all/d85e6bf9044634826cacf3e5d000872f01e4e68baca95374d5aada8dc52ac564", "path_in_repo": "yantouyantou/imame4all/Reloaded/tags/MAME4droid 1.5 (0.139u1)/src/lib/zlib/minigzip", "objdump": "000000000040e0dc <inflateSync>:\n  40e0dc:\t55                   \tpush   %rbp\n  40e0dd:\t48 89 e5             \tmov    %rsp,%rbp\n  40e0e0:\t48 83 ec 38          \tsub    $0x38,%rsp\n  40e0e4:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  40e0e8:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  40e0ed:\t74 0d                \tje     40e0fc <inflateSync+0x20>\n  40e0ef:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e0f3:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  40e0f7:\t48 85 c0             \ttest   %rax,%rax\n  40e0fa:\t75 0a                \tjne    40e106 <inflateSync+0x2a>\n  40e0fc:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n  40e101:\te9 be 01 00 00       \tjmpq   40e2c4 <inflateSync+0x1e8>\n  40e106:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e10a:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  40e10e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40e112:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e116:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40e119:\t85 c0                \ttest   %eax,%eax\n  40e11b:\t75 16                \tjne    40e133 <inflateSync+0x57>\n  40e11d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e121:\t8b 40 50             \tmov    0x50(%rax),%eax\n  40e124:\t83 f8 07             \tcmp    $0x7,%eax\n  40e127:\t77 0a                \tja     40e133 <inflateSync+0x57>\n  40e129:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n  40e12e:\te9 91 01 00 00       \tjmpq   40e2c4 <inflateSync+0x1e8>\n  40e133:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e137:\t8b 00                \tmov    (%rax),%eax\n  40e139:\t83 f8 1d             \tcmp    $0x1d,%eax\n  40e13c:\t0f 84 bd 00 00 00    \tje     40e1ff <inflateSync+0x123>\n  40e142:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e146:\tc7 00 1d 00 00 00    \tmovl   $0x1d,(%rax)\n  40e14c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e150:\t48 8b 50 48          \tmov    0x48(%rax),%rdx\n  40e154:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e158:\t8b 40 50             \tmov    0x50(%rax),%eax\n  40e15b:\t83 e0 07             \tand    $0x7,%eax\n  40e15e:\t89 c1                \tmov    %eax,%ecx\n  40e160:\t48 d3 e2             \tshl    %cl,%rdx\n  40e163:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e167:\t48 89 50 48          \tmov    %rdx,0x48(%rax)\n  40e16b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e16f:\t8b 40 50             \tmov    0x50(%rax),%eax\n  40e172:\t83 e0 f8             \tand    $0xfffffff8,%eax\n  40e175:\t89 c2                \tmov    %eax,%edx\n  40e177:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e17b:\t89 50 50             \tmov    %edx,0x50(%rax)\n  40e17e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40e185:\teb 41                \tjmp    40e1c8 <inflateSync+0xec>\n  40e187:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e18b:\t48 8b 48 48          \tmov    0x48(%rax),%rcx\n  40e18f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40e192:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40e195:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40e198:\t89 ca                \tmov    %ecx,%edx\n  40e19a:\t89 c0                \tmov    %eax,%eax\n  40e19c:\t88 54 05 dc          \tmov    %dl,-0x24(%rbp,%rax,1)\n  40e1a0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e1a4:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n  40e1a8:\t48 c1 e8 08          \tshr    $0x8,%rax\n  40e1ac:\t48 89 c2             \tmov    %rax,%rdx\n  40e1af:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e1b3:\t48 89 50 48          \tmov    %rdx,0x48(%rax)\n  40e1b7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e1bb:\t8b 40 50             \tmov    0x50(%rax),%eax\n  40e1be:\t8d 50 f8             \tlea    -0x8(%rax),%edx\n  40e1c1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e1c5:\t89 50 50             \tmov    %edx,0x50(%rax)\n  40e1c8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e1cc:\t8b 40 50             \tmov    0x50(%rax),%eax\n  40e1cf:\t83 f8 07             \tcmp    $0x7,%eax\n  40e1d2:\t77 b3                \tja     40e187 <inflateSync+0xab>\n  40e1d4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e1d8:\tc7 80 84 00 00 00 00 \tmovl   $0x0,0x84(%rax)\n  40e1df:\t00 00 00 \n  40e1e2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e1e6:\t48 8d 88 84 00 00 00 \tlea    0x84(%rax),%rcx\n  40e1ed:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40e1f0:\t48 8d 45 dc          \tlea    -0x24(%rbp),%rax\n  40e1f4:\t48 89 c6             \tmov    %rax,%rsi\n  40e1f7:\t48 89 cf             \tmov    %rcx,%rdi\n  40e1fa:\te8 4b fe ff ff       \tcallq  40e04a <syncsearch>\n  40e1ff:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e203:\t8b 50 08             \tmov    0x8(%rax),%edx\n  40e206:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e20a:\t48 8b 00             \tmov    (%rax),%rax\n  40e20d:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  40e211:\t48 81 c1 84 00 00 00 \tadd    $0x84,%rcx\n  40e218:\t48 89 c6             \tmov    %rax,%rsi\n  40e21b:\t48 89 cf             \tmov    %rcx,%rdi\n  40e21e:\te8 27 fe ff ff       \tcallq  40e04a <syncsearch>\n  40e223:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40e226:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e22a:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40e22d:\t2b 45 fc             \tsub    -0x4(%rbp),%eax\n  40e230:\t89 c2                \tmov    %eax,%edx\n  40e232:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e236:\t89 50 08             \tmov    %edx,0x8(%rax)\n  40e239:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e23d:\t48 8b 10             \tmov    (%rax),%rdx\n  40e240:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40e243:\t48 01 c2             \tadd    %rax,%rdx\n  40e246:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e24a:\t48 89 10             \tmov    %rdx,(%rax)\n  40e24d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e251:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  40e255:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40e258:\t48 01 c2             \tadd    %rax,%rdx\n  40e25b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e25f:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  40e263:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e267:\t8b 80 84 00 00 00    \tmov    0x84(%rax),%eax\n  40e26d:\t83 f8 04             \tcmp    $0x4,%eax\n  40e270:\t74 07                \tje     40e279 <inflateSync+0x19d>\n  40e272:\tb8 fd ff ff ff       \tmov    $0xfffffffd,%eax\n  40e277:\teb 4b                \tjmp    40e2c4 <inflateSync+0x1e8>\n  40e279:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e27d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40e281:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40e285:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e289:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  40e28d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40e291:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e295:\t48 89 c7             \tmov    %rax,%rdi\n  40e298:\te8 fc d3 ff ff       \tcallq  40b699 <inflateReset>\n  40e29d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e2a1:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40e2a5:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  40e2a9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40e2ad:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40e2b1:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n  40e2b5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40e2b9:\tc7 00 0b 00 00 00    \tmovl   $0xb,(%rax)\n  40e2bf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40e2c4:\tc9                   \tleaveq \n  40e2c5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall inflateSync(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  char <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  if (!<span class=\"supfact\">a1</span> || !*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    return Number L;\n  <span class=\"supfact\">v7</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  if (!*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n      *(_DWORD *)(<span class=\"supfact\">v7</span> + Number) <= Number)\n    return Number L;\n  if (*(_DWORD *)<span class=\"supfact\">v7</span> != Number) {\n    *(_DWORD *)<span class=\"supfact\">v7</span> = Number;\n    *(_QWORD *)(<span class=\"supfact\">v7</span> + Number) <<=\n        *(_BYTE *)(<span class=\"supfact\">v7</span> + Number) & Number;\n    *(_DWORD *)(<span class=\"supfact\">v7</span> + Number) &= Number;\n    <span class=\"supfact\">v8</span> = Number;\n    while (*(_DWORD *)(<span class=\"supfact\">v7</span> + Number) > Number) {\n      <span class=\"supfact\">v2</span> = *(_QWORD *)(<span class=\"supfact\">v7</span> + Number);\n      <span class=\"supfact\">v3</span> = <span class=\"supfact\">v8</span>++;\n      <span class=\"supfact\">v4</span>[<span class=\"supfact\">v3</span>] = <span class=\"supfact\">v2</span>;\n      *(_QWORD *)(<span class=\"supfact\">v7</span> + Number) >>= Number;\n      *(_DWORD *)(<span class=\"supfact\">v7</span> + Number) -= Number;\n    }\n    *(_DWORD *)(<span class=\"supfact\">v7</span> + Number) = Number;\n    syncsearch((unsigned int *)(<span class=\"supfact\">v7</span> + Number),\n               (__int64)<span class=\"supfact\">v4</span>, <span class=\"supfact\">v8</span>);\n  }\n  <span class=\"supfact\">v8</span> = syncsearch((unsigned int *)(<span class=\"supfact\">v7</span> + Number),\n                                  *(_QWORD *)<span class=\"supfact\">a1</span>,\n                                  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number));\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) -= <span class=\"supfact\">v8</span>;\n  *(_QWORD *)<span class=\"supfact\">a1</span> += <span class=\"supfact\">v8</span>;\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) += <span class=\"supfact\">v8</span>;\n  if (*(_DWORD *)(<span class=\"supfact\">v7</span> + Number) != Number)\n    return Number L;\n  <span class=\"supfact\">v6</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v5</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  inflateReset((_QWORD *)<span class=\"supfact\">a1</span>);\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v6</span>;\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v5</span>;\n  *(_DWORD *)<span class=\"supfact\">v7</span> = Number;\n  return Number L;\n}", "code_t": "int __cdecl inflateSync(z_streamp_0 <span class=\"supfact\">strm</span>) {\n  unsigned __int64 <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  unsigned __int8 <span class=\"supfact\">buf</span>[Number];\n  unsigned __int64 <span class=\"supfact\">out</span>;\n  unsigned __int64 <span class=\"supfact\">in</span>;\n  inflate_state *<span class=\"supfact\">state</span>;\n  unsigned int <span class=\"supfact\">len</span>;\n  if (!<span class=\"supfact\">strm</span> || !<span class=\"supfact\">strm</span>-><span class=\"supfact\">state</span>)\n    return Number;\n  <span class=\"supfact\">state</span> =\n      (inflate_state *)<span class=\"supfact\">strm</span>-><span class=\"supfact\">state</span>;\n  if (!<span class=\"supfact\">strm</span>->avail_in && <span class=\"supfact\">state</span>->bits <= Number)\n    return Number;\n  if (<span class=\"supfact\">state</span>->mode != SYNC) {\n    <span class=\"supfact\">state</span>->mode = SYNC;\n    <span class=\"supfact\">state</span>->hold <<= <span class=\"supfact\">state</span>->bits & Number;\n    <span class=\"supfact\">state</span>->bits &= Number;\n    <span class=\"supfact\">len</span> = Number;\n    while (<span class=\"supfact\">state</span>->bits > Number) {\n      <span class=\"supfact\">v2</span> = <span class=\"supfact\">state</span>->hold;\n      <span class=\"supfact\">v3</span> = <span class=\"supfact\">len</span>++;\n      <span class=\"supfact\">buf</span>[<span class=\"supfact\">v3</span>] = <span class=\"supfact\">v2</span>;\n      <span class=\"supfact\">state</span>->hold >>= Number;\n      <span class=\"supfact\">state</span>->bits -= Number;\n    }\n    <span class=\"supfact\">state</span>->have = Number;\n    syncsearch(&<span class=\"supfact\">state</span>->have, <span class=\"supfact\">buf</span>,\n               <span class=\"supfact\">len</span>);\n  }\n  <span class=\"supfact\">len</span> =\n      syncsearch(&<span class=\"supfact\">state</span>->have, <span class=\"supfact\">strm</span>->next_in,\n                 <span class=\"supfact\">strm</span>->avail_in);\n  <span class=\"supfact\">strm</span>->avail_in -= <span class=\"supfact\">len</span>;\n  <span class=\"supfact\">strm</span>->next_in += <span class=\"supfact\">len</span>;\n  <span class=\"supfact\">strm</span>->total_in += <span class=\"supfact\">len</span>;\n  if (<span class=\"supfact\">state</span>->have != Number)\n    return Number;\n  <span class=\"supfact\">in</span> = <span class=\"supfact\">strm</span>->total_in;\n  <span class=\"supfact\">out</span> = <span class=\"supfact\">strm</span>->total_out;\n  inflateReset(<span class=\"supfact\">strm</span>);\n  <span class=\"supfact\">strm</span>->total_in = <span class=\"supfact\">in</span>;\n  <span class=\"supfact\">strm</span>->total_out = <span class=\"supfact\">out</span>;\n  <span class=\"supfact\">state</span>->mode = TYPE;\n  return Number;\n}", "var": [{"name": "a1", "type": "z_streamp", "pred_name": "strm", "ref_name": "strm", "ref_type": "z_streamp_0"}, {"name": "v2", "type": "unsigned __int64", "pred_name": "v2", "ref_name": "v2", "ref_type": "unsigned __int64"}, {"name": "v3", "type": "unsigned int", "pred_name": "v3", "ref_name": "v3", "ref_type": "unsigned int"}, {"name": "v4", "type": "unsigned __int8[4]", "pred_name": "buf", "ref_name": "buf", "ref_type": "unsigned __int8[4]"}, {"name": "v5", "type": "unsigned __int64", "pred_name": "out", "ref_name": "out", "ref_type": "unsigned __int64"}, {"name": "v6", "type": "unsigned __int64", "pred_name": "in", "ref_name": "in", "ref_type": "unsigned __int64"}, {"name": "v7", "type": "inflate_state *", "pred_name": "state", "ref_name": "state", "ref_type": "inflate_state *"}, {"name": "v8", "type": "unsigned int", "pred_name": "len", "ref_name": "len", "ref_type": "unsigned int"}], "body_in_train": true}, {"repo_owner": "peterfillmore", "repo_name": "QEMU-Experimentation", "path": "peterfillmore/QEMU-Experimentation/38f44db9beb4c95f7cf2de7ede4261e9e872ccc841ea03a675e9cb6a54edba18", "path_in_repo": "peterfillmore/QEMU-Experimentation//disas/ppc.o", "objdump": "00000000000005e0 <extract_fxm>:\n     5e0:\t55                   \tpush   %rbp\n     5e1:\t48 89 e5             \tmov    %rsp,%rbp\n     5e4:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     5e8:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     5eb:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     5ef:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5f3:\t48 c1 e8 0c          \tshr    $0xc,%rax\n     5f7:\t25 ff 00 00 00       \tand    $0xff,%eax\n     5fc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     600:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     604:\t25 00 00 10 00       \tand    $0x100000,%eax\n     609:\t48 85 c0             \ttest   %rax,%rax\n     60c:\t74 24                \tje     632 <extract_fxm+0x52>\n     60e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     613:\t74 11                \tje     626 <extract_fxm+0x46>\n     615:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     619:\t48 f7 d8             \tneg    %rax\n     61c:\t48 23 45 f8          \tand    -0x8(%rbp),%rax\n     620:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n     624:\t74 2c                \tje     652 <extract_fxm+0x72>\n     626:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     62a:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n     630:\teb 20                \tjmp    652 <extract_fxm+0x72>\n     632:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     636:\t25 fe 07 00 00       \tand    $0x7fe,%eax\n     63b:\t48 83 f8 26          \tcmp    $0x26,%rax\n     63f:\t75 11                \tjne    652 <extract_fxm+0x72>\n     641:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     646:\t74 0a                \tje     652 <extract_fxm+0x72>\n     648:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     64c:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n     652:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     656:\t5d                   \tpop    %rbp\n     657:\tc3                   \tretq   ", "code_s": "__int64 __fastcall extract_fxm(unsigned __int64 <span class=\"supfact\">a1</span>,\n                               __int64 <span class=\"supfact\">a2</span>,\n                               _DWORD *<span class=\"supfact\">a3</span>) {\n  if ((<span class=\"supfact\">a1</span> & Number) != Number) {\n    if (!(unsigned __int8)(<span class=\"supfact\">a1</span> >> Number) ||\n        (unsigned __int8)(<span class=\"supfact\">a1</span> >> Number) !=\n            ((unsigned __int8)(<span class=\"supfact\">a1</span> >> Number) &\n             (unsigned __int64)-(__int64)(unsigned __int8)(<span class=\"supfact\">a1</span> >>\n                                                           Number))) {\n      *<span class=\"supfact\">a3</span> = Number;\n    }\n  } else if ((<span class=\"supfact\">a1</span> & Number) == Number &&\n             (unsigned __int8)(<span class=\"supfact\">a1</span> >> Number)) {\n    *<span class=\"supfact\">a3</span> = Number;\n  }\n  return (unsigned __int8)(<span class=\"supfact\">a1</span> >> Number);\n}", "code_t": "__int64 __cdecl extract_fxm(unsigned __int64 <span class=\"supfact\">insn</span>,\n                            int <span class=\"supfact\">dialect</span>,\n                            int *<span class=\"supfact\">invalid</span>) {\n  if ((<span class=\"supfact\">insn</span> & Number) != Number) {\n    if (!(unsigned __int8)(<span class=\"supfact\">insn</span> >> Number) ||\n        (unsigned __int8)(<span class=\"supfact\">insn</span> >> Number) !=\n            ((unsigned __int8)(<span class=\"supfact\">insn</span> >> Number) &\n             (unsigned __int64)-(\n                 __int64)(unsigned __int8)(<span class=\"supfact\">insn</span> >> Number))) {\n      *<span class=\"supfact\">invalid</span> = Number;\n    }\n  } else if ((<span class=\"supfact\">insn</span> & Number) == Number &&\n             (unsigned __int8)(<span class=\"supfact\">insn</span> >> Number)) {\n    *<span class=\"supfact\">invalid</span> = Number;\n  }\n  return (unsigned __int8)(<span class=\"supfact\">insn</span> >> Number);\n}", "var": [{"name": "a1", "type": "unsigned __int64", "pred_name": "insn", "ref_name": "insn", "ref_type": "unsigned __int64"}, {"name": "a2", "type": "int", "pred_name": "dialect", "ref_name": "dialect", "ref_type": "int"}, {"name": "a3", "type": "int *", "pred_name": "invalid", "ref_name": "invalid", "ref_type": "int *"}], "body_in_train": true}, {"repo_owner": "cust1105", "repo_name": "ffmpeg-4.0.2", "path": "cust1105/ffmpeg-4.0.2/761e0299dd7c7b707ac73a78c9e8a2db9128b79ecdbe6bc87d9659e425091a95", "path_in_repo": "cust1105/ffmpeg-4.0.2/FFmpeg-4.0.2/FFmpeg-n4.0.2/libavcodec/hevcdsp.o", "objdump": "000000000002a759 <put_hevc_epel_v_12>:\n   2a759:\t48 89 7c 24 d8       \tmov    %rdi,-0x28(%rsp)\n   2a75e:\t48 89 74 24 d0       \tmov    %rsi,-0x30(%rsp)\n   2a763:\t48 89 54 24 c8       \tmov    %rdx,-0x38(%rsp)\n   2a768:\t89 4c 24 c4          \tmov    %ecx,-0x3c(%rsp)\n   2a76c:\t4c 89 44 24 b8       \tmov    %r8,-0x48(%rsp)\n   2a771:\t4c 89 4c 24 b0       \tmov    %r9,-0x50(%rsp)\n   2a776:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n   2a77b:\t48 89 44 24 f0       \tmov    %rax,-0x10(%rsp)\n   2a780:\t48 8b 44 24 c8       \tmov    -0x38(%rsp),%rax\n   2a785:\t48 d1 e8             \tshr    %rax\n   2a788:\t48 89 44 24 e8       \tmov    %rax,-0x18(%rsp)\n   2a78d:\t48 8b 44 24 b0       \tmov    -0x50(%rsp),%rax\n   2a792:\t48 83 e8 01          \tsub    $0x1,%rax\n   2a796:\t48 c1 e0 02          \tshl    $0x2,%rax\n   2a79a:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n   2a7a0:\t48 89 44 24 e0       \tmov    %rax,-0x20(%rsp)\n   2a7a5:\tc7 44 24 f8 00 00 00 \tmovl   $0x0,-0x8(%rsp)\n   2a7ac:\t00 \n   2a7ad:\te9 16 01 00 00       \tjmpq   2a8c8 <put_hevc_epel_v_12+0x16f>\n   2a7b2:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n   2a7b9:\t00 \n   2a7ba:\te9 e3 00 00 00       \tjmpq   2a8a2 <put_hevc_epel_v_12+0x149>\n   2a7bf:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n   2a7c4:\t0f b6 00             \tmovzbl (%rax),%eax\n   2a7c7:\t0f be d0             \tmovsbl %al,%edx\n   2a7ca:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2a7ce:\t48 98                \tcltq   \n   2a7d0:\t48 2b 44 24 e8       \tsub    -0x18(%rsp),%rax\n   2a7d5:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   2a7d9:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   2a7de:\t48 01 c8             \tadd    %rcx,%rax\n   2a7e1:\t0f b7 00             \tmovzwl (%rax),%eax\n   2a7e4:\t0f b7 c0             \tmovzwl %ax,%eax\n   2a7e7:\t0f af d0             \timul   %eax,%edx\n   2a7ea:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n   2a7ef:\t48 83 c0 01          \tadd    $0x1,%rax\n   2a7f3:\t0f b6 00             \tmovzbl (%rax),%eax\n   2a7f6:\t0f be c8             \tmovsbl %al,%ecx\n   2a7f9:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2a7fd:\t48 98                \tcltq   \n   2a7ff:\t48 8d 34 00          \tlea    (%rax,%rax,1),%rsi\n   2a803:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   2a808:\t48 01 f0             \tadd    %rsi,%rax\n   2a80b:\t0f b7 00             \tmovzwl (%rax),%eax\n   2a80e:\t0f b7 c0             \tmovzwl %ax,%eax\n   2a811:\t0f af c1             \timul   %ecx,%eax\n   2a814:\t8d 34 02             \tlea    (%rdx,%rax,1),%esi\n   2a817:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n   2a81c:\t48 83 c0 02          \tadd    $0x2,%rax\n   2a820:\t0f b6 00             \tmovzbl (%rax),%eax\n   2a823:\t0f be d0             \tmovsbl %al,%edx\n   2a826:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2a82a:\t48 63 c8             \tmovslq %eax,%rcx\n   2a82d:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   2a832:\t48 01 c8             \tadd    %rcx,%rax\n   2a835:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   2a839:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   2a83e:\t48 01 c8             \tadd    %rcx,%rax\n   2a841:\t0f b7 00             \tmovzwl (%rax),%eax\n   2a844:\t0f b7 c0             \tmovzwl %ax,%eax\n   2a847:\t0f af c2             \timul   %edx,%eax\n   2a84a:\t01 c6                \tadd    %eax,%esi\n   2a84c:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n   2a851:\t48 83 c0 03          \tadd    $0x3,%rax\n   2a855:\t0f b6 00             \tmovzbl (%rax),%eax\n   2a858:\t0f be d0             \tmovsbl %al,%edx\n   2a85b:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2a85f:\t48 98                \tcltq   \n   2a861:\t48 8b 4c 24 e8       \tmov    -0x18(%rsp),%rcx\n   2a866:\t48 01 c9             \tadd    %rcx,%rcx\n   2a869:\t48 01 c8             \tadd    %rcx,%rax\n   2a86c:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   2a870:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   2a875:\t48 01 c8             \tadd    %rcx,%rax\n   2a878:\t0f b7 00             \tmovzwl (%rax),%eax\n   2a87b:\t0f b7 c0             \tmovzwl %ax,%eax\n   2a87e:\t0f af c2             \timul   %edx,%eax\n   2a881:\t01 f0                \tadd    %esi,%eax\n   2a883:\tc1 f8 04             \tsar    $0x4,%eax\n   2a886:\t89 c2                \tmov    %eax,%edx\n   2a888:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2a88c:\t48 98                \tcltq   \n   2a88e:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   2a892:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n   2a897:\t48 01 c8             \tadd    %rcx,%rax\n   2a89a:\t66 89 10             \tmov    %dx,(%rax)\n   2a89d:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n   2a8a2:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2a8a6:\t3b 44 24 08          \tcmp    0x8(%rsp),%eax\n   2a8aa:\t0f 8c 0f ff ff ff    \tjl     2a7bf <put_hevc_epel_v_12+0x66>\n   2a8b0:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n   2a8b5:\t48 01 c0             \tadd    %rax,%rax\n   2a8b8:\t48 01 44 24 f0       \tadd    %rax,-0x10(%rsp)\n   2a8bd:\t48 83 6c 24 d8 80    \tsubq   $0xffffffffffffff80,-0x28(%rsp)\n   2a8c3:\t83 44 24 f8 01       \taddl   $0x1,-0x8(%rsp)\n   2a8c8:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n   2a8cc:\t3b 44 24 c4          \tcmp    -0x3c(%rsp),%eax\n   2a8d0:\t0f 8c dc fe ff ff    \tjl     2a7b2 <put_hevc_epel_v_12+0x59>\n   2a8d6:\t90                   \tnop\n   2a8d7:\t90                   \tnop\n   2a8d8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall put_hevc_epel_v_12(__int64 <span class=\"supfact\">a1</span>,\n                                      __int64 <span class=\"supfact\">a2</span>,\n                                      unsigned __int64 <span class=\"supfact\">a3</span>,\n                                      int <span class=\"supfact\">a4</span>,\n                                      __int64 <span class=\"supfact\">a5</span>,\n                                      __int64 <span class=\"supfact\">a6</span>,\n                                      int <span class=\"supfact\">a7</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  char *<span class=\"supfact\">v9</span>;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">j</span>;\n  <span class=\"supfact\">v10</span> = <span class=\"supfact\">a3</span> >> Number;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">i</span>;\n    if ((int)<span class=\"supfact\">i</span> >= <span class=\"supfact\">a4</span>)\n      break;\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < <span class=\"supfact\">a7</span>;\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">v9</span> =\n          (char *)&ff_hevc_epel_filters + Number * <span class=\"supfact\">a6</span> - Number;\n      *(_WORD *)(Number L * <span class=\"supfact\">j</span> + <span class=\"supfact\">a1</span>) =\n          (<span class=\"supfact\">v9</span>[Number] *\n               *(unsigned __int16 *)(Number * (<span class=\"supfact\">j</span> +\n                                               <span class=\"supfact\">v10</span>) +\n                                     <span class=\"supfact\">a2</span>) +\n           *(unsigned __int16 *)(Number *\n                                     (<span class=\"supfact\">j</span> - <span class=\"supfact\">v10</span>) +\n                                 <span class=\"supfact\">a2</span>) *\n               *<span class=\"supfact\">v9</span> +\n           <span class=\"supfact\">v9</span>[Number] *\n               *(unsigned __int16 *)(Number L * <span class=\"supfact\">j</span> +\n                                     <span class=\"supfact\">a2</span>) +\n           <span class=\"supfact\">v9</span>[Number] *\n               *(unsigned __int16 *)(Number * (Number * <span class=\"supfact\">v10</span> +\n                                               <span class=\"supfact\">j</span>) +\n                                     <span class=\"supfact\">a2</span>)) >>\n          Number;\n    }\n    <span class=\"supfact\">a2</span> += Number * <span class=\"supfact\">v10</span>;\n    <span class=\"supfact\">a1</span> += Number L;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl put_hevc_epel_v_12(int16_t *<span class=\"supfact\">dst</span>,\n                                uint8_t *<span class=\"supfact\">_src</span>,\n                                ptrdiff_t <span class=\"supfact\">_srcstride</span>,\n                                int <span class=\"supfact\">height</span>,\n                                intptr_t <span class=\"supfact\">mx</span>,\n                                intptr_t <span class=\"supfact\">my</span>,\n                                int <span class=\"supfact\">width</span>) {\n  const int8_t *<span class=\"supfact\">filter</span>;\n  unsigned __int64 <span class=\"supfact\">srcstride</span>;\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">x</span>;\n  <span class=\"supfact\">srcstride</span> =\n      (unsigned __int64)<span class=\"supfact\">_srcstride</span> >> Number;\n  for (<span class=\"supfact\">y</span> = Number; <span class=\"supfact\">y</span> < <span class=\"supfact\">height</span>;\n       ++<span class=\"supfact\">y</span>) {\n    for (<span class=\"supfact\">x</span> = Number; <span class=\"supfact\">x</span> < <span class=\"supfact\">width</span>;\n         ++<span class=\"supfact\">x</span>) {\n      <span class=\"supfact\">filter</span> =\n          &ff_hevc_epel_filters[Number * <span class=\"supfact\">my</span> - Number];\n      <span class=\"supfact\">dst</span>[<span class=\"supfact\">x</span>] =\n          (<span class=\"supfact\">filter</span>[Number] *\n               *(unsigned __int16\n                     *)&<span class=\"supfact\">_src</span>[Number * <span class=\"supfact\">x</span> +\n                                             Number *\n                                                 <span class=\"supfact\">srcstride</span>] +\n           *(unsigned __int16\n                 *)&<span class=\"supfact\">_src</span>[Number * (<span class=\"supfact\">x</span> -\n                                                   <span class=\"supfact\">srcstride</span>)] *\n               *<span class=\"supfact\">filter</span> +\n           <span class=\"supfact\">filter</span>[Number] *\n               *(unsigned __int16\n                     *)&<span class=\"supfact\">_src</span>[Number * <span class=\"supfact\">x</span>] +\n           <span class=\"supfact\">filter</span>[Number] *\n               *(unsigned __int16\n                     *)&<span class=\"supfact\">_src</span>[Number *\n                                                 <span class=\"supfact\">srcstride</span> +\n                                             Number * <span class=\"supfact\">x</span>]) >>\n          Number;\n    }\n    <span class=\"supfact\">_src</span> += Number * <span class=\"supfact\">srcstride</span>;\n    <span class=\"supfact\">dst</span> += Number;\n  }\n}", "var": [{"name": "a1", "type": "int16_t *", "pred_name": "dst", "ref_name": "dst", "ref_type": "int16_t *"}, {"name": "a2", "type": "ptrdiff_t", "pred_name": "dststride", "ref_name": "_src", "ref_type": "uint8_t *"}, {"name": "a3", "type": "uint8_t *", "pred_name": "_src", "ref_name": "_srcstride", "ref_type": "ptrdiff_t"}, {"name": "a4", "type": "ptrdiff_t", "pred_name": "_srcstride", "ref_name": "height", "ref_type": "int"}, {"name": "a5", "type": "int16_t *", "pred_name": "src2", "ref_name": "mx", "ref_type": "intptr_t"}, {"name": "a6", "type": "ptrdiff_t", "pred_name": "srcstride", "ref_name": "my", "ref_type": "intptr_t"}, {"name": "a7", "type": "int", "pred_name": "width", "ref_name": "width", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v9", "type": "const int8_t *", "pred_name": "filter", "ref_name": "filter", "ref_type": "const int8_t *"}, {"name": "v10", "type": "unsigned __int64", "pred_name": "srcstride", "ref_name": "srcstride", "ref_type": "unsigned __int64"}, {"name": "i", "type": "int", "pred_name": "y", "ref_name": "y", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "x", "ref_name": "x", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/b91df0dd35cf5646c5a75dc0470b01a9002de38c1a4bbbd76c40360aac3725bd", "path_in_repo": "AlexanderVangelov/pjsip//pjlib/bin/pjlib-test-x86_64-unknown-linux-gnu", "objdump": "0000000000425adb <pj_elapsed_msec64>:\n  425adb:\t55                   \tpush   %rbp\n  425adc:\t48 89 e5             \tmov    %rsp,%rbp\n  425adf:\t48 83 ec 10          \tsub    $0x10,%rsp\n  425ae3:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  425ae7:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  425aeb:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  425aef:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  425af3:\t48 89 d6             \tmov    %rdx,%rsi\n  425af6:\t48 89 c7             \tmov    %rax,%rdi\n  425af9:\te8 a6 fd ff ff       \tcallq  4258a4 <elapsed_msec>\n  425afe:\t66 0f 2f 05 22 b5 01 \tcomisd 0x1b522(%rip),%xmm0        # 441028 <__PRETTY_FUNCTION__.5245+0x30>\n  425b05:\t00 \n  425b06:\t73 07                \tjae    425b0f <pj_elapsed_msec64+0x34>\n  425b08:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n  425b0d:\teb 1e                \tjmp    425b2d <pj_elapsed_msec64+0x52>\n  425b0f:\tf2 0f 10 0d 11 b5 01 \tmovsd  0x1b511(%rip),%xmm1        # 441028 <__PRETTY_FUNCTION__.5245+0x30>\n  425b16:\t00 \n  425b17:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n  425b1b:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n  425b20:\t48 ba 00 00 00 00 00 \tmovabs $0x8000000000000000,%rdx\n  425b27:\t00 00 80 \n  425b2a:\t48 31 d0             \txor    %rdx,%rax\n  425b2d:\tc9                   \tleaveq \n  425b2e:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall pj_elapsed_msec64(_DWORD *<span class=\"supfact\">a1</span>,\n                                              _DWORD *<span class=\"supfact\">a2</span>) {\n  double <span class=\"supfact\">v2</span>;\n  unsigned __int64 <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">v2</span> = elapsed_msec(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n  if (<span class=\"supfact\">v2</span> >= Number)\n    <span class=\"supfact\">result</span> =\n        (unsigned int)(int)(<span class=\"supfact\">v2</span> - Number) ^ Number;\n  else\n    <span class=\"supfact\">result</span> = (unsigned int)(int)<span class=\"supfact\">v2</span>;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "pj_uint64_t __cdecl pj_elapsed_msec64(\n    const pj_timestamp_0 *<span class=\"supfact\">start</span>,\n    const pj_timestamp_0 *<span class=\"supfact\">stop</span>) {\n  double <span class=\"supfact\">v2</span>;\n  pj_uint64_t <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">v2</span> =\n      elapsed_msec(<span class=\"supfact\">start</span>, <span class=\"supfact\">stop</span>);\n  if (<span class=\"supfact\">v2</span> >= Number)\n    <span class=\"supfact\">result</span> =\n        (unsigned int)(int)(<span class=\"supfact\">v2</span> - Number) ^ Number;\n  else\n    <span class=\"supfact\">result</span> = (unsigned int)(int)<span class=\"supfact\">v2</span>;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "const pj_timestamp_0 *", "pred_name": "start", "ref_name": "start", "ref_type": "const pj_timestamp_0 *"}, {"name": "a2", "type": "const pj_timestamp_0 *", "pred_name": "stop", "ref_name": "stop", "ref_type": "const pj_timestamp_0 *"}, {"name": "v2", "type": "double", "pred_name": "v2", "ref_name": "v2", "ref_type": "double"}, {"name": "result", "type": "pj_uint64_t", "pred_name": "result", "ref_name": "result", "ref_type": "pj_uint64_t"}], "body_in_train": true}, {"repo_owner": "gloomykeel", "repo_name": "mt7688", "path": "gloomykeel/mt7688/11a9e0dfe4c7d7d12f2b0c4c852f2898d8eb511ba3516522bb2ef28e1db8c285", "path_in_repo": "gloomykeel/mt7688//scripts/config/conf", "objdump": "0000000000411679 <_menu_init>:\n  411679:\t55                   \tpush   %rbp\n  41167a:\t48 89 e5             \tmov    %rsp,%rbp\n  41167d:\t48 c7 05 b0 c6 00 00 \tmovq   $0x41ef40,0xc6b0(%rip)        # 41dd38 <current_menu>\n  411684:\t40 ef 41 00 \n  411688:\t48 8b 05 a9 c6 00 00 \tmov    0xc6a9(%rip),%rax        # 41dd38 <current_menu>\n  41168f:\t48 89 05 aa c6 00 00 \tmov    %rax,0xc6aa(%rip)        # 41dd40 <current_entry>\n  411696:\t48 c7 05 47 c7 00 00 \tmovq   $0x41ef50,0xc747(%rip)        # 41dde8 <last_entry_ptr>\n  41169d:\t50 ef 41 00 \n  4116a1:\t90                   \tnop\n  4116a2:\t5d                   \tpop    %rbp\n  4116a3:\tc3                   \tretq   ", "code_s": "Menu_Hook menu_init(const MENU *<span class=\"supfact\">a1</span>) {\n  Menu_Hook <span class=\"supfact\">result</span>;\n  current_menu = (__int64)rootmenu;\n  <span class=\"supfact\">result</span> = (Menu_Hook)rootmenu;\n  current_entry = (__int64)rootmenu;\n  last_entry_ptr = (__int64)&qword_41EF50;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl menu_init() {\n  current_menu = &rootmenu;\n  current_entry = &rootmenu;\n  last_entry_ptr = (menu **)(&rootmenu + Number);\n}", "var": [{"name": "a1", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "antmicro", "repo_name": "abc-lib", "path": "antmicro/abc-lib/3518266fda3e88804e120e2963449c4aaf6904972ec58ff5bc9e1e99ba06b236", "path_in_repo": "antmicro/abc-lib//src/bdd/llb/llb4Sweep.o", "objdump": "0000000000002260 <Llb_Nonlin4SweepPrintSuppProfile>:\n    2260:\t55                   \tpush   %rbp\n    2261:\t48 89 e5             \tmov    %rsp,%rbp\n    2264:\t53                   \tpush   %rbx\n    2265:\t48 83 ec 68          \tsub    $0x68,%rsp\n    2269:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    226d:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    2271:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n    2275:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n    2279:\t44 89 45 9c          \tmov    %r8d,-0x64(%rbp)\n    227d:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n    2284:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n    228b:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n    2292:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    2299:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n    22a0:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    22a7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    22ab:\t48 89 c7             \tmov    %rax,%rdi\n    22ae:\te8 00 00 00 00       \tcallq  22b3 <Llb_Nonlin4SweepPrintSuppProfile+0x53>\n    22b3:\t48 98                \tcltq   \n    22b5:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    22ba:\t48 89 c7             \tmov    %rax,%rdi\n    22bd:\te8 00 00 00 00       \tcallq  22c2 <Llb_Nonlin4SweepPrintSuppProfile+0x62>\n    22c2:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    22c6:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    22ca:\t48 89 c7             \tmov    %rax,%rdi\n    22cd:\te8 66 e3 ff ff       \tcallq  638 <Vec_PtrSize>\n    22d2:\t89 c3                \tmov    %eax,%ebx\n    22d4:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    22d8:\t48 89 c7             \tmov    %rax,%rdi\n    22db:\te8 46 e3 ff ff       \tcallq  626 <Vec_PtrArray>\n    22e0:\t48 89 c6             \tmov    %rax,%rsi\n    22e3:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    22e7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    22eb:\t48 89 d1             \tmov    %rdx,%rcx\n    22ee:\t89 da                \tmov    %ebx,%edx\n    22f0:\t48 89 c7             \tmov    %rax,%rdi\n    22f3:\te8 00 00 00 00       \tcallq  22f8 <Llb_Nonlin4SweepPrintSuppProfile+0x98>\n    22f8:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    22ff:\te9 05 01 00 00       \tjmpq   2409 <Llb_Nonlin4SweepPrintSuppProfile+0x1a9>\n    2304:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    2308:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    230c:\t48 89 d6             \tmov    %rdx,%rsi\n    230f:\t48 89 c7             \tmov    %rax,%rdi\n    2312:\te8 59 ee ff ff       \tcallq  1170 <Llb_ObjBddVar>\n    2317:\t85 c0                \ttest   %eax,%eax\n    2319:\t0f 88 e2 00 00 00    \tjs     2401 <Llb_Nonlin4SweepPrintSuppProfile+0x1a1>\n    231f:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    2323:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2327:\t48 89 d6             \tmov    %rdx,%rsi\n    232a:\t48 89 c7             \tmov    %rax,%rdi\n    232d:\te8 3e ee ff ff       \tcallq  1170 <Llb_ObjBddVar>\n    2332:\t48 98                \tcltq   \n    2334:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    233b:\t00 \n    233c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2340:\t48 01 d0             \tadd    %rdx,%rax\n    2343:\t8b 00                \tmov    (%rax),%eax\n    2345:\t85 c0                \ttest   %eax,%eax\n    2347:\t75 3a                \tjne    2383 <Llb_Nonlin4SweepPrintSuppProfile+0x123>\n    2349:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    234d:\t48 89 c7             \tmov    %rax,%rdi\n    2350:\te8 5f eb ff ff       \tcallq  eb4 <Aig_ObjIsNode>\n    2355:\t85 c0                \ttest   %eax,%eax\n    2357:\t0f 84 a7 00 00 00    \tje     2404 <Llb_Nonlin4SweepPrintSuppProfile+0x1a4>\n    235d:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    2361:\t48 89 c7             \tmov    %rax,%rdi\n    2364:\te8 bc eb ff ff       \tcallq  f25 <Aig_ObjId>\n    2369:\t89 c1                \tmov    %eax,%ecx\n    236b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    236f:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    2374:\t89 ce                \tmov    %ecx,%esi\n    2376:\t48 89 c7             \tmov    %rax,%rdi\n    2379:\te8 fa dd ff ff       \tcallq  178 <Vec_IntWriteEntry>\n    237e:\te9 81 00 00 00       \tjmpq   2404 <Llb_Nonlin4SweepPrintSuppProfile+0x1a4>\n    2383:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n    2387:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    238b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    238f:\t48 89 d6             \tmov    %rdx,%rsi\n    2392:\t48 89 c7             \tmov    %rax,%rdi\n    2395:\te8 8e ec ff ff       \tcallq  1028 <Saig_ObjIsPi>\n    239a:\t85 c0                \ttest   %eax,%eax\n    239c:\t74 06                \tje     23a4 <Llb_Nonlin4SweepPrintSuppProfile+0x144>\n    239e:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n    23a2:\teb 61                \tjmp    2405 <Llb_Nonlin4SweepPrintSuppProfile+0x1a5>\n    23a4:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    23a8:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    23ac:\t48 89 d6             \tmov    %rdx,%rsi\n    23af:\t48 89 c7             \tmov    %rax,%rdi\n    23b2:\te8 15 ed ff ff       \tcallq  10cc <Saig_ObjIsLo>\n    23b7:\t85 c0                \ttest   %eax,%eax\n    23b9:\t74 06                \tje     23c1 <Llb_Nonlin4SweepPrintSuppProfile+0x161>\n    23bb:\t83 45 d8 01          \taddl   $0x1,-0x28(%rbp)\n    23bf:\teb 44                \tjmp    2405 <Llb_Nonlin4SweepPrintSuppProfile+0x1a5>\n    23c1:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    23c5:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    23c9:\t48 89 d6             \tmov    %rdx,%rsi\n    23cc:\t48 89 c7             \tmov    %rax,%rdi\n    23cf:\te8 a6 ec ff ff       \tcallq  107a <Saig_ObjIsPo>\n    23d4:\t85 c0                \ttest   %eax,%eax\n    23d6:\t74 06                \tje     23de <Llb_Nonlin4SweepPrintSuppProfile+0x17e>\n    23d8:\t83 45 e0 01          \taddl   $0x1,-0x20(%rbp)\n    23dc:\teb 27                \tjmp    2405 <Llb_Nonlin4SweepPrintSuppProfile+0x1a5>\n    23de:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    23e2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    23e6:\t48 89 d6             \tmov    %rdx,%rsi\n    23e9:\t48 89 c7             \tmov    %rax,%rdi\n    23ec:\te8 2d ed ff ff       \tcallq  111e <Saig_ObjIsLi>\n    23f1:\t85 c0                \ttest   %eax,%eax\n    23f3:\t74 06                \tje     23fb <Llb_Nonlin4SweepPrintSuppProfile+0x19b>\n    23f5:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n    23f9:\teb 0a                \tjmp    2405 <Llb_Nonlin4SweepPrintSuppProfile+0x1a5>\n    23fb:\t83 45 d4 01          \taddl   $0x1,-0x2c(%rbp)\n    23ff:\teb 04                \tjmp    2405 <Llb_Nonlin4SweepPrintSuppProfile+0x1a5>\n    2401:\t90                   \tnop\n    2402:\teb 01                \tjmp    2405 <Llb_Nonlin4SweepPrintSuppProfile+0x1a5>\n    2404:\t90                   \tnop\n    2405:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    2409:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    240d:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    2411:\t48 89 c7             \tmov    %rax,%rdi\n    2414:\te8 1f e2 ff ff       \tcallq  638 <Vec_PtrSize>\n    2419:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n    241c:\t7d 25                \tjge    2443 <Llb_Nonlin4SweepPrintSuppProfile+0x1e3>\n    241e:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    2422:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    2426:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    2429:\t89 d6                \tmov    %edx,%esi\n    242b:\t48 89 c7             \tmov    %rax,%rdi\n    242e:\te8 16 e2 ff ff       \tcallq  649 <Vec_PtrEntry>\n    2433:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    2437:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n    243c:\t74 c7                \tje     2405 <Llb_Nonlin4SweepPrintSuppProfile+0x1a5>\n    243e:\te9 c1 fe ff ff       \tjmpq   2304 <Llb_Nonlin4SweepPrintSuppProfile+0xa4>\n    2443:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    2448:\t74 14                \tje     245e <Llb_Nonlin4SweepPrintSuppProfile+0x1fe>\n    244a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    244e:\t48 89 c7             \tmov    %rax,%rdi\n    2451:\te8 00 00 00 00       \tcallq  2456 <Llb_Nonlin4SweepPrintSuppProfile+0x1f6>\n    2456:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n    245d:\t00 \n    245e:\t83 7d 9c 00          \tcmpl   $0x0,-0x64(%rbp)\n    2462:\t0f 84 9f 00 00 00    \tje     2507 <Llb_Nonlin4SweepPrintSuppProfile+0x2a7>\n    2468:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    246c:\t48 89 c7             \tmov    %rax,%rdi\n    246f:\te8 c4 e1 ff ff       \tcallq  638 <Vec_PtrSize>\n    2474:\t89 c6                \tmov    %eax,%esi\n    2476:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    247b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2480:\te8 00 00 00 00       \tcallq  2485 <Llb_Nonlin4SweepPrintSuppProfile+0x225>\n    2485:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    2488:\t89 c6                \tmov    %eax,%esi\n    248a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    248f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2494:\te8 00 00 00 00       \tcallq  2499 <Llb_Nonlin4SweepPrintSuppProfile+0x239>\n    2499:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    249c:\t89 c6                \tmov    %eax,%esi\n    249e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    24a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24a8:\te8 00 00 00 00       \tcallq  24ad <Llb_Nonlin4SweepPrintSuppProfile+0x24d>\n    24ad:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n    24b0:\t89 c6                \tmov    %eax,%esi\n    24b2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    24b7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24bc:\te8 00 00 00 00       \tcallq  24c1 <Llb_Nonlin4SweepPrintSuppProfile+0x261>\n    24c1:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n    24c4:\t89 c6                \tmov    %eax,%esi\n    24c6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    24cb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24d0:\te8 00 00 00 00       \tcallq  24d5 <Llb_Nonlin4SweepPrintSuppProfile+0x275>\n    24d5:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    24d8:\t89 c6                \tmov    %eax,%esi\n    24da:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    24df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24e4:\te8 00 00 00 00       \tcallq  24e9 <Llb_Nonlin4SweepPrintSuppProfile+0x289>\n    24e9:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    24ec:\t89 c6                \tmov    %eax,%esi\n    24ee:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    24f3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24f8:\te8 00 00 00 00       \tcallq  24fd <Llb_Nonlin4SweepPrintSuppProfile+0x29d>\n    24fd:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n    2502:\te8 00 00 00 00       \tcallq  2507 <Llb_Nonlin4SweepPrintSuppProfile+0x2a7>\n    2507:\t90                   \tnop\n    2508:\t48 83 c4 68          \tadd    $0x68,%rsp\n    250c:\t5b                   \tpop    %rbx\n    250d:\t5d                   \tpop    %rbp\n    250e:\tc3                   \tretq   ", "code_s": "void __fastcall Llb_Nonlin4SweepPrintSuppProfile(__int64 <span class=\"supfact\">a1</span>,\n                                                 __int64 <span class=\"supfact\">a2</span>,\n                                                 __int64 <span class=\"supfact\">a3</span>,\n                                                 __int64 <span class=\"supfact\">a4</span>,\n                                                 int <span class=\"supfact\">a5</span>) {\n  int v5;\n  unsigned int <span class=\"supfact\">v6</span>;\n  __int64 v7;\n  int v8;\n  unsigned int v9;\n  unsigned int *<span class=\"supfact\">v13</span>;\n  _DWORD *<span class=\"supfact\">ptr</span>;\n  unsigned int <span class=\"supfact\">v15</span>;\n  unsigned int <span class=\"supfact\">v16</span>;\n  unsigned int <span class=\"supfact\">v17</span>;\n  unsigned int <span class=\"supfact\">v18</span>;\n  unsigned int <span class=\"supfact\">v19</span>;\n  unsigned int <span class=\"supfact\">v20</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v20</span> = Number;\n  <span class=\"supfact\">v19</span> = Number;\n  <span class=\"supfact\">v18</span> = Number;\n  <span class=\"supfact\">v17</span> = Number;\n  <span class=\"supfact\">v16</span> = Number;\n  <span class=\"supfact\">v15</span> = Number;\n  v5 = Cudd_ReadSize(<span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">ptr</span> = calloc(v5, Number);\n  <span class=\"supfact\">v6</span> = Vec_PtrSize(<span class=\"supfact\">a4</span>);\n  v7 = Vec_PtrArray(<span class=\"supfact\">a4</span>);\n  Extra_VectorSupportArray(<span class=\"supfact\">a1</span>, v7, <span class=\"supfact\">v6</span>,\n                           <span class=\"supfact\">ptr</span>);\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> <\n       (int)Vec_PtrSize(*(_QWORD *)(<span class=\"supfact\">a2</span> + Number));\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v13</span> = (unsigned int *)Vec_PtrEntry(\n        *(_QWORD *)(<span class=\"supfact\">a2</span> + Number), <span class=\"supfact\">i</span>);\n    if (<span class=\"supfact\">v13</span> &&\n        (int)Llb_ObjBddVar(<span class=\"supfact\">a3</span>, (__int64)<span class=\"supfact\">v13</span>) >=\n            Number) {\n      if (<span class=\"supfact\">ptr</span>[(int)Llb_ObjBddVar(\n              <span class=\"supfact\">a3</span>, (__int64)<span class=\"supfact\">v13</span>)]) {\n        ++<span class=\"supfact\">v20</span>;\n        if (Saig_ObjIsPi(<span class=\"supfact\">a2</span>, <span class=\"supfact\">v13</span>)) {\n          ++<span class=\"supfact\">v19</span>;\n        } else if (Saig_ObjIsLo(<span class=\"supfact\">a2</span>, <span class=\"supfact\">v13</span>)) {\n          ++<span class=\"supfact\">v16</span>;\n        } else if (Saig_ObjIsPo(<span class=\"supfact\">a2</span>, <span class=\"supfact\">v13</span>)) {\n          ++<span class=\"supfact\">v18</span>;\n        } else if (Saig_ObjIsLi(<span class=\"supfact\">a2</span>, <span class=\"supfact\">v13</span>)) {\n          ++<span class=\"supfact\">v17</span>;\n        } else {\n          ++<span class=\"supfact\">v15</span>;\n        }\n      } else if (Aig_ObjIsNode((__int64)<span class=\"supfact\">v13</span>)) {\n        v8 = Aig_ObjId((__int64)<span class=\"supfact\">v13</span>);\n        Vec_IntWriteEntry(<span class=\"supfact\">a3</span>, v8, Number);\n      }\n    }\n  }\n  if (<span class=\"supfact\">ptr</span>)\n    free(<span class=\"supfact\">ptr</span>);\n  if (<span class=\"supfact\">a5</span>) {\n    v9 = Vec_PtrSize(<span class=\"supfact\">a4</span>);\n    printf(String, v9);\n    printf(String, <span class=\"supfact\">v20</span>);\n    printf(String, <span class=\"supfact\">v19</span>);\n    printf(String, <span class=\"supfact\">v18</span>);\n    printf(String, <span class=\"supfact\">v16</span>);\n    printf(String, <span class=\"supfact\">v17</span>);\n    printf(String, <span class=\"supfact\">v15</span>);\n    putchar(Number);\n  }\n}", "code_t": "void __cdecl Llb_Nonlin4SweepPrintSuppProfile(\n    DdManager_0 *<span class=\"supfact\">dd</span>, Aig_Man_t *<span class=\"supfact\">pAig</span>,\n    Vec_Int_t *<span class=\"supfact\">vOrder</span>, Vec_Ptr_t *<span class=\"supfact\">vGroups</span>,\n    int <span class=\"supfact\">fVerbose</span>) {\n  int v5;\n  unsigned int <span class=\"supfact\">v6</span>;\n  void **v7;\n  int v8;\n  unsigned int v9;\n  Aig_Obj_t *<span class=\"supfact\">pObj</span>;\n  int *<span class=\"supfact\">pSupp</span>;\n  unsigned int <span class=\"supfact\">nSuppAnd</span>;\n  unsigned int <span class=\"supfact\">nSuppLo</span>;\n  unsigned int <span class=\"supfact\">nSuppLi</span>;\n  unsigned int <span class=\"supfact\">nSuppPo</span>;\n  unsigned int <span class=\"supfact\">nSuppPi</span>;\n  unsigned int <span class=\"supfact\">nSuppAll</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">nSuppAll</span> = Number;\n  <span class=\"supfact\">nSuppPi</span> = Number;\n  <span class=\"supfact\">nSuppPo</span> = Number;\n  <span class=\"supfact\">nSuppLi</span> = Number;\n  <span class=\"supfact\">nSuppLo</span> = Number;\n  <span class=\"supfact\">nSuppAnd</span> = Number;\n  v5 = Cudd_ReadSize(<span class=\"supfact\">dd</span>);\n  <span class=\"supfact\">pSupp</span> = (int *)calloc(v5, Number);\n  <span class=\"supfact\">v6</span> = Vec_PtrSize(<span class=\"supfact\">vGroups</span>);\n  v7 = Vec_PtrArray(<span class=\"supfact\">vGroups</span>);\n  Extra_VectorSupportArray(<span class=\"supfact\">dd</span>, v7, <span class=\"supfact\">v6</span>,\n                           <span class=\"supfact\">pSupp</span>);\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < Vec_PtrSize(<span class=\"supfact\">pAig</span>->vObjs);\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">pObj</span> = (Aig_Obj_t *)Vec_PtrEntry(\n        <span class=\"supfact\">pAig</span>->vObjs, <span class=\"supfact\">i</span>);\n    if (<span class=\"supfact\">pObj</span> &&\n        Llb_ObjBddVar(<span class=\"supfact\">vOrder</span>, <span class=\"supfact\">pObj</span>) >= Number) {\n      if (<span class=\"supfact\">pSupp</span>[Llb_ObjBddVar(<span class=\"supfact\">vOrder</span>,\n                                              <span class=\"supfact\">pObj</span>)]) {\n        ++<span class=\"supfact\">nSuppAll</span>;\n        if (Saig_ObjIsPi(<span class=\"supfact\">pAig</span>, <span class=\"supfact\">pObj</span>)) {\n          ++<span class=\"supfact\">nSuppPi</span>;\n        } else if (Saig_ObjIsLo(<span class=\"supfact\">pAig</span>, <span class=\"supfact\">pObj</span>)) {\n          ++<span class=\"supfact\">nSuppLo</span>;\n        } else if (Saig_ObjIsPo(<span class=\"supfact\">pAig</span>, <span class=\"supfact\">pObj</span>)) {\n          ++<span class=\"supfact\">nSuppPo</span>;\n        } else if (Saig_ObjIsLi(<span class=\"supfact\">pAig</span>, <span class=\"supfact\">pObj</span>)) {\n          ++<span class=\"supfact\">nSuppLi</span>;\n        } else {\n          ++<span class=\"supfact\">nSuppAnd</span>;\n        }\n      } else if (Aig_ObjIsNode(<span class=\"supfact\">pObj</span>)) {\n        v8 = Aig_ObjId(<span class=\"supfact\">pObj</span>);\n        Vec_IntWriteEntry(<span class=\"supfact\">vOrder</span>, v8, Number);\n      }\n    }\n  }\n  if (<span class=\"supfact\">pSupp</span>)\n    free(<span class=\"supfact\">pSupp</span>);\n  if (<span class=\"supfact\">fVerbose</span>) {\n    v9 = Vec_PtrSize(<span class=\"supfact\">vGroups</span>);\n    printf(String, v9);\n    printf(String, <span class=\"supfact\">nSuppAll</span>);\n    printf(String, <span class=\"supfact\">nSuppPi</span>);\n    printf(String, <span class=\"supfact\">nSuppPo</span>);\n    printf(String, <span class=\"supfact\">nSuppLo</span>);\n    printf(String, <span class=\"supfact\">nSuppLi</span>);\n    printf(String, <span class=\"supfact\">nSuppAnd</span>);\n    putchar(Number);\n  }\n}", "var": [{"name": "a1", "type": "Res_Win_t *", "pred_name": "pWin", "ref_name": "dd", "ref_type": "DdManager_0 *"}, {"name": "a2", "type": "Abc_Ntk_t *", "pred_name": "pAig", "ref_name": "pAig", "ref_type": "Aig_Man_t *"}, {"name": "a3", "type": "__unk__", "pred_name": "pSim", "ref_name": "vOrder", "ref_type": "Vec_Int_t *"}, {"name": "a4", "type": "Vec_Vec_t *", "pred_name": "__unk__", "ref_name": "vGroups", "ref_type": "Vec_Ptr_t *"}, {"name": "a5", "type": "int", "pred_name": "nFaninsMax", "ref_name": "fVerbose", "ref_type": "int"}, {"name": "v6", "type": "int", "pred_name": "v6", "ref_name": "v6", "ref_type": "unsigned int"}, {"name": "v13", "type": "Aig_Obj_t *", "pred_name": "pObj", "ref_name": "pObj", "ref_type": "Aig_Obj_t *"}, {"name": "ptr", "type": "int *", "pred_name": "__unk__", "ref_name": "pSupp", "ref_type": "int *"}, {"name": "v15", "type": "int", "pred_name": "__unk__", "ref_name": "nSuppAnd", "ref_type": "unsigned int"}, {"name": "v16", "type": "int", "pred_name": "__unk__", "ref_name": "nSuppLo", "ref_type": "unsigned int"}, {"name": "v17", "type": "int", "pred_name": "__unk__", "ref_name": "nSuppLi", "ref_type": "unsigned int"}, {"name": "v18", "type": "int", "pred_name": "__unk__", "ref_name": "nSuppPo", "ref_type": "unsigned int"}, {"name": "v19", "type": "int", "pred_name": "__unk__", "ref_name": "nSuppPi", "ref_type": "unsigned int"}, {"name": "v20", "type": "int", "pred_name": "i", "ref_name": "nSuppAll", "ref_type": "unsigned int"}, {"name": "i", "type": "int", "pred_name": "v", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "qiupq", "repo_name": "kernel-xillinx", "path": "qiupq/kernel-xillinx/6383e765d168f492724d1b12d4a3f0089d9acb2e568b899d8a32fd3fe567ece0", "path_in_repo": "qiupq/kernel-xillinx/tools/perf/bench/mem-memset.o", "objdump": "000000000000017d <get_cycle>:\n 17d:\t55                   \tpush   %rbp\n 17e:\t48 89 e5             \tmov    %rsp,%rbp\n 181:\t48 83 ec 20          \tsub    $0x20,%rsp\n 185:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 18c:\t00 00 \n 18e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 192:\t31 c0                \txor    %eax,%eax\n 194:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 19a <get_cycle+0x1d>\n 19a:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n 19e:\tba 08 00 00 00       \tmov    $0x8,%edx\n 1a3:\t48 89 ce             \tmov    %rcx,%rsi\n 1a6:\t89 c7                \tmov    %eax,%edi\n 1a8:\te8 00 00 00 00       \tcallq  1ad <get_cycle+0x30>\n 1ad:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 1b0:\t83 7d ec 08          \tcmpl   $0x8,-0x14(%rbp)\n 1b4:\t74 19                \tje     1cf <get_cycle+0x52>\n 1b6:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 1bb:\tba 64 00 00 00       \tmov    $0x64,%edx\n 1c0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1c5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1ca:\te8 00 00 00 00       \tcallq  1cf <get_cycle+0x52>\n 1cf:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 1d3:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 1d7:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n 1de:\t00 00 \n 1e0:\t74 05                \tje     1e7 <get_cycle+0x6a>\n 1e2:\te8 00 00 00 00       \tcallq  1e7 <get_cycle+0x6a>\n 1e7:\tc9                   \tleaveq \n 1e8:\tc3                   \tretq   ", "code_s": "__int64 get_cycle() {\n  __int64 <span class=\"supfact\">buf</span>[Number];\n  <span class=\"supfact\">buf</span>[Number] = __readfsqword(Number);\n  if ((unsigned int)read(cycle_fd, <span class=\"supfact\">buf</span>, Number) != Number)\n    _assert_fail(String, String, Number, String);\n  return <span class=\"supfact\">buf</span>[Number];\n}", "code_t": "u64 __cdecl get_cycle() {\n  u64 <span class=\"supfact\">clk</span>[Number];\n  <span class=\"supfact\">clk</span>[Number] = __readfsqword(Number);\n  if ((unsigned int)read(cycle_fd, <span class=\"supfact\">clk</span>, Number) != Number)\n    _assert_fail(String, String, Number, String);\n  return <span class=\"supfact\">clk</span>[Number];\n}", "var": [{"name": "buf", "type": "u64[2]", "pred_name": "clk", "ref_name": "clk", "ref_type": "u64[2]"}], "body_in_train": true}, {"repo_owner": "coder-Jonathan", "repo_name": "putty-with-timestamp", "path": "coder-Jonathan/putty-with-timestamp/916618af5f2c87dfc5c88a0f367313b71a610800127bba1702b425494a95a558", "path_in_repo": "coder-Jonathan/putty-with-timestamp//unix/uxstore.o", "objdump": "0000000000000bd0 <open_settings_r>:\n     bd0:\t55                   \tpush   %rbp\n     bd1:\t48 89 e5             \tmov    %rsp,%rbp\n     bd4:\t48 83 ec 40          \tsub    $0x40,%rsp\n     bd8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     bdc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     be0:\t48 89 c6             \tmov    %rax,%rsi\n     be3:\tbf 05 00 00 00       \tmov    $0x5,%edi\n     be8:\te8 b0 f6 ff ff       \tcallq  29d <make_filename>\n     bed:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     bf1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     bf5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     bfa:\t48 89 c7             \tmov    %rax,%rdi\n     bfd:\te8 00 00 00 00       \tcallq  c02 <open_settings_r+0x32>\n     c02:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     c06:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     c0a:\t48 89 c7             \tmov    %rax,%rdi\n     c0d:\te8 00 00 00 00       \tcallq  c12 <open_settings_r+0x42>\n     c12:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     c17:\t75 0a                \tjne    c23 <open_settings_r+0x53>\n     c19:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c1e:\te9 ee 00 00 00       \tjmpq   d11 <open_settings_r+0x141>\n     c23:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c28:\te8 00 00 00 00       \tcallq  c2d <open_settings_r+0x5d>\n     c2d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     c31:\te9 b0 00 00 00       \tjmpq   ce6 <open_settings_r+0x116>\n     c36:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     c3a:\tbe 3d 00 00 00       \tmov    $0x3d,%esi\n     c3f:\t48 89 c7             \tmov    %rax,%rdi\n     c42:\te8 00 00 00 00       \tcallq  c47 <open_settings_r+0x77>\n     c47:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     c4b:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n     c50:\t75 11                \tjne    c63 <open_settings_r+0x93>\n     c52:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     c56:\t48 89 c7             \tmov    %rax,%rdi\n     c59:\te8 00 00 00 00       \tcallq  c5e <open_settings_r+0x8e>\n     c5e:\te9 83 00 00 00       \tjmpq   ce6 <open_settings_r+0x116>\n     c63:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c67:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     c6b:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     c6f:\tc6 00 00             \tmovb   $0x0,(%rax)\n     c72:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c76:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c7b:\t48 89 c7             \tmov    %rax,%rdi\n     c7e:\te8 00 00 00 00       \tcallq  c83 <open_settings_r+0xb3>\n     c83:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     c87:\t48 01 d0             \tadd    %rdx,%rax\n     c8a:\tc6 00 00             \tmovb   $0x0,(%rax)\n     c8d:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     c92:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     c97:\te8 00 00 00 00       \tcallq  c9c <open_settings_r+0xcc>\n     c9c:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     ca0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     ca4:\t48 89 c7             \tmov    %rax,%rdi\n     ca7:\te8 00 00 00 00       \tcallq  cac <open_settings_r+0xdc>\n     cac:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     cb0:\t48 89 02             \tmov    %rax,(%rdx)\n     cb3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     cb7:\t48 89 c7             \tmov    %rax,%rdi\n     cba:\te8 00 00 00 00       \tcallq  cbf <open_settings_r+0xef>\n     cbf:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     cc3:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n     cc7:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     ccb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ccf:\t48 89 d6             \tmov    %rdx,%rsi\n     cd2:\t48 89 c7             \tmov    %rax,%rdi\n     cd5:\te8 00 00 00 00       \tcallq  cda <open_settings_r+0x10a>\n     cda:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     cde:\t48 89 c7             \tmov    %rax,%rdi\n     ce1:\te8 00 00 00 00       \tcallq  ce6 <open_settings_r+0x116>\n     ce6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     cea:\t48 89 c7             \tmov    %rax,%rdi\n     ced:\te8 00 00 00 00       \tcallq  cf2 <open_settings_r+0x122>\n     cf2:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     cf6:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n     cfb:\t0f 85 35 ff ff ff    \tjne    c36 <open_settings_r+0x66>\n     d01:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d05:\t48 89 c7             \tmov    %rax,%rdi\n     d08:\te8 00 00 00 00       \tcallq  d0d <open_settings_r+0x13d>\n     d0d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d11:\tc9                   \tleaveq \n     d12:\tc3                   \tretq   ", "code_s": "__int64 __fastcall open_settings_r(char *<span class=\"supfact\">a1</span>) {\n  char *<span class=\"supfact\">v2</span>;\n  _QWORD *<span class=\"supfact\">v3</span>;\n  char *v4;\n  char *v5;\n  char *<span class=\"supfact\">s</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  FILE *<span class=\"supfact\">stream</span>;\n  char *<span class=\"supfact\">filename</span>;\n  <span class=\"supfact\">filename</span> = (char *)make_filename(Number, <span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">stream</span> = fopen(<span class=\"supfact\">filename</span>, String);\n  safefree(<span class=\"supfact\">filename</span>);\n  if (!<span class=\"supfact\">stream</span>)\n    return Number L;\n  <span class=\"supfact\">v7</span> = newtree234(keycmp);\n  while (Number) {\n    <span class=\"supfact\">s</span> = (char *)fgetline(<span class=\"supfact\">stream</span>);\n    if (!<span class=\"supfact\">s</span>)\n      break;\n    v4 = strchr(<span class=\"supfact\">s</span>, Number);\n    if (v4) {\n      <span class=\"supfact\">v2</span> = v4;\n      v5 = v4 + Number;\n      *<span class=\"supfact\">v2</span> = Number;\n      v5[strcspn(v5, String)] = Number;\n      <span class=\"supfact\">v3</span> = (_QWORD *)safemalloc(Number L, Number L);\n      *<span class=\"supfact\">v3</span> = dupstr(<span class=\"supfact\">s</span>);\n      <span class=\"supfact\">v3</span>[Number] = dupstr(v5);\n      add234(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v3</span>);\n    }\n    safefree(<span class=\"supfact\">s</span>);\n  }\n  fclose(<span class=\"supfact\">stream</span>);\n  return <span class=\"supfact\">v7</span>;\n}", "code_t": "void *__cdecl open_settings_r(const char *<span class=\"supfact\">sessionname</span>) {\n  char *<span class=\"supfact\">v2</span>;\n  skeyval *<span class=\"supfact\">kv</span>;\n  char *value;\n  char *valuea;\n  char *<span class=\"supfact\">line</span>;\n  tree234 *<span class=\"supfact\">ret</span>;\n  FILE *<span class=\"supfact\">fp</span>;\n  const char *<span class=\"supfact\">filename</span>;\n  <span class=\"supfact\">filename</span> = make_filename(Number, <span class=\"supfact\">sessionname</span>);\n  <span class=\"supfact\">fp</span> = fopen(<span class=\"supfact\">filename</span>, String);\n  safefree(<span class=\"supfact\">filename</span>);\n  if (!<span class=\"supfact\">fp</span>)\n    return Number L;\n  <span class=\"supfact\">ret</span> = (tree234 *)newtree234(keycmp);\n  while (Number) {\n    <span class=\"supfact\">line</span> = (char *)fgetline(<span class=\"supfact\">fp</span>);\n    if (!<span class=\"supfact\">line</span>)\n      break;\n    value = strchr(<span class=\"supfact\">line</span>, Number);\n    if (value) {\n      <span class=\"supfact\">v2</span> = value;\n      valuea = value + Number;\n      *<span class=\"supfact\">v2</span> = Number;\n      valuea[strcspn(valuea, String)] = Number;\n      <span class=\"supfact\">kv</span> = (skeyval *)safemalloc(Number L, Number L);\n      <span class=\"supfact\">kv</span>->key = (const char *)dupstr(<span class=\"supfact\">line</span>);\n      <span class=\"supfact\">kv</span>->value = (const char *)dupstr(valuea);\n      add234(<span class=\"supfact\">ret</span>, <span class=\"supfact\">kv</span>);\n    }\n    safefree(<span class=\"supfact\">line</span>);\n  }\n  fclose(<span class=\"supfact\">fp</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "WORD_LIST *", "pred_name": "list", "ref_name": "sessionname", "ref_type": "const char *"}, {"name": "v2", "type": "char *", "pred_name": "v2", "ref_name": "v2", "ref_type": "char *"}, {"name": "v3", "type": "char *", "pred_name": "v3", "ref_name": "kv", "ref_type": "skeyval *"}, {"name": "s", "type": "char *", "pred_name": "line", "ref_name": "line", "ref_type": "char *"}, {"name": "v7", "type": "char *", "pred_name": "cp", "ref_name": "ret", "ref_type": "tree234 *"}, {"name": "stream", "type": "FILE *", "pred_name": "fp", "ref_name": "fp", "ref_type": "FILE *"}, {"name": "filename", "type": "char *", "pred_name": "__unk__", "ref_name": "filename", "ref_type": "const char *"}], "body_in_train": false}, {"repo_owner": "FireLeaf", "repo_name": "XGame", "path": "FireLeaf/XGame/678ba43ed8cb45475d02995746fc864a22ef52be342a07b08fd660c31c443c76", "path_in_repo": "FireLeaf/XGame/XGame/XSrc/3-Party/openssl/engines/e_chil.o", "objdump": "0000000000001555 <hwcrhk_rsa_mod_exp>:\n    1555:\t55                   \tpush   %rbp\n    1556:\t48 89 e5             \tmov    %rsp,%rbp\n    1559:\t48 81 ec f0 04 00 00 \tsub    $0x4f0,%rsp\n    1560:\t48 89 bd 28 fb ff ff \tmov    %rdi,-0x4d8(%rbp)\n    1567:\t48 89 b5 20 fb ff ff \tmov    %rsi,-0x4e0(%rbp)\n    156e:\t48 89 95 18 fb ff ff \tmov    %rdx,-0x4e8(%rbp)\n    1575:\t48 89 8d 10 fb ff ff \tmov    %rcx,-0x4f0(%rbp)\n    157c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    1583:\t48 8d 85 d0 fb ff ff \tlea    -0x430(%rbp),%rax\n    158a:\t48 89 85 c0 fb ff ff \tmov    %rax,-0x440(%rbp)\n    1591:\t48 c7 85 c8 fb ff ff \tmovq   $0x400,-0x438(%rbp)\n    1598:\t00 04 00 00 \n    159c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 15a3 <hwcrhk_rsa_mod_exp+0x4e>\n    15a3:\t48 85 c0             \ttest   %rax,%rax\n    15a6:\t75 1e                \tjne    15c6 <hwcrhk_rsa_mod_exp+0x71>\n    15a8:\tb9 c7 03 00 00       \tmov    $0x3c7,%ecx\n    15ad:\tba 00 00 00 00       \tmov    $0x0,%edx\n    15b2:\tbe 6a 00 00 00       \tmov    $0x6a,%esi\n    15b7:\tbf 6d 00 00 00       \tmov    $0x6d,%edi\n    15bc:\te8 06 eb ff ff       \tcallq  c7 <ERR_HWCRHK_error>\n    15c1:\te9 17 05 00 00       \tjmpq   1add <hwcrhk_rsa_mod_exp+0x588>\n    15c6:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 15cc <hwcrhk_rsa_mod_exp+0x77>\n    15cc:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    15d3:\t89 d6                \tmov    %edx,%esi\n    15d5:\t48 89 c7             \tmov    %rax,%rdi\n    15d8:\te8 00 00 00 00       \tcallq  15dd <hwcrhk_rsa_mod_exp+0x88>\n    15dd:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    15e1:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    15e6:\t0f 84 c0 01 00 00    \tje     17ac <hwcrhk_rsa_mod_exp+0x257>\n    15ec:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    15f3:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    15f7:\t48 85 c0             \ttest   %rax,%rax\n    15fa:\t75 1e                \tjne    161a <hwcrhk_rsa_mod_exp+0xc5>\n    15fc:\tb9 d5 03 00 00       \tmov    $0x3d5,%ecx\n    1601:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1606:\tbe 69 00 00 00       \tmov    $0x69,%esi\n    160b:\tbf 6d 00 00 00       \tmov    $0x6d,%edi\n    1610:\te8 b2 ea ff ff       \tcallq  c7 <ERR_HWCRHK_error>\n    1615:\te9 c3 04 00 00       \tjmpq   1add <hwcrhk_rsa_mod_exp+0x588>\n    161a:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    1621:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1625:\t8b 50 08             \tmov    0x8(%rax),%edx\n    1628:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    162f:\t89 d6                \tmov    %edx,%esi\n    1631:\t48 89 c7             \tmov    %rax,%rdi\n    1634:\te8 00 00 00 00       \tcallq  1639 <hwcrhk_rsa_mod_exp+0xe4>\n    1639:\t48 8b 85 20 fb ff ff \tmov    -0x4e0(%rbp),%rax\n    1640:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1643:\t48 98                \tcltq   \n    1645:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1649:\t48 89 85 b8 fb ff ff \tmov    %rax,-0x448(%rbp)\n    1650:\t48 8b 85 20 fb ff ff \tmov    -0x4e0(%rbp),%rax\n    1657:\t48 8b 00             \tmov    (%rax),%rax\n    165a:\t48 89 85 b0 fb ff ff \tmov    %rax,-0x450(%rbp)\n    1661:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1668:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    166b:\t48 98                \tcltq   \n    166d:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1671:\t48 89 85 a8 fb ff ff \tmov    %rax,-0x458(%rbp)\n    1678:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    167f:\t48 8b 00             \tmov    (%rax),%rax\n    1682:\t48 89 85 a0 fb ff ff \tmov    %rax,-0x460(%rbp)\n    1689:\t4c 8b 0d 00 00 00 00 \tmov    0x0(%rip),%r9        # 1690 <hwcrhk_rsa_mod_exp+0x13b>\n    1690:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1694:\t48 8b 10             \tmov    (%rax),%rdx\n    1697:\t48 8d bd c0 fb ff ff \tlea    -0x440(%rbp),%rdi\n    169e:\t48 8d 8d a0 fb ff ff \tlea    -0x460(%rbp),%rcx\n    16a5:\t48 8b b5 b0 fb ff ff \tmov    -0x450(%rbp),%rsi\n    16ac:\t48 8b 85 b8 fb ff ff \tmov    -0x448(%rbp),%rax\n    16b3:\t49 89 f8             \tmov    %rdi,%r8\n    16b6:\t48 89 f7             \tmov    %rsi,%rdi\n    16b9:\t48 89 c6             \tmov    %rax,%rsi\n    16bc:\t41 ff d1             \tcallq  *%r9\n    16bf:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    16c2:\t48 8b 85 a8 fb ff ff \tmov    -0x458(%rbp),%rax\n    16c9:\t48 c1 e8 03          \tshr    $0x3,%rax\n    16cd:\t89 c2                \tmov    %eax,%edx\n    16cf:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    16d6:\t89 50 08             \tmov    %edx,0x8(%rax)\n    16d9:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    16e0:\t8b 40 08             \tmov    0x8(%rax),%eax\n    16e3:\t85 c0                \ttest   %eax,%eax\n    16e5:\t7e 63                \tjle    174a <hwcrhk_rsa_mod_exp+0x1f5>\n    16e7:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    16ee:\t48 8b 10             \tmov    (%rax),%rdx\n    16f1:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    16f8:\t8b 40 08             \tmov    0x8(%rax),%eax\n    16fb:\t48 98                \tcltq   \n    16fd:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1701:\t48 83 e8 08          \tsub    $0x8,%rax\n    1705:\t48 01 d0             \tadd    %rdx,%rax\n    1708:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    170c:\teb 2b                \tjmp    1739 <hwcrhk_rsa_mod_exp+0x1e4>\n    170e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1712:\t48 8d 50 f8          \tlea    -0x8(%rax),%rdx\n    1716:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n    171a:\t48 8b 00             \tmov    (%rax),%rax\n    171d:\t48 85 c0             \ttest   %rax,%rax\n    1720:\t75 27                \tjne    1749 <hwcrhk_rsa_mod_exp+0x1f4>\n    1722:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1729:\t8b 40 08             \tmov    0x8(%rax),%eax\n    172c:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    172f:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1736:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1739:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1740:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1743:\t85 c0                \ttest   %eax,%eax\n    1745:\t7f c7                \tjg     170e <hwcrhk_rsa_mod_exp+0x1b9>\n    1747:\teb 01                \tjmp    174a <hwcrhk_rsa_mod_exp+0x1f5>\n    1749:\t90                   \tnop\n    174a:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    174e:\t0f 89 82 03 00 00    \tjns    1ad6 <hwcrhk_rsa_mod_exp+0x581>\n    1754:\t83 7d dc fe          \tcmpl   $0xfffffffe,-0x24(%rbp)\n    1758:\t75 1b                \tjne    1775 <hwcrhk_rsa_mod_exp+0x220>\n    175a:\tb9 ed 03 00 00       \tmov    $0x3ed,%ecx\n    175f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1764:\tbe 70 00 00 00       \tmov    $0x70,%esi\n    1769:\tbf 6d 00 00 00       \tmov    $0x6d,%edi\n    176e:\te8 54 e9 ff ff       \tcallq  c7 <ERR_HWCRHK_error>\n    1773:\teb 19                \tjmp    178e <hwcrhk_rsa_mod_exp+0x239>\n    1775:\tb9 f2 03 00 00       \tmov    $0x3f2,%ecx\n    177a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    177f:\tbe 6f 00 00 00       \tmov    $0x6f,%esi\n    1784:\tbf 6d 00 00 00       \tmov    $0x6d,%edi\n    1789:\te8 39 e9 ff ff       \tcallq  c7 <ERR_HWCRHK_error>\n    178e:\t48 8b 85 c0 fb ff ff \tmov    -0x440(%rbp),%rax\n    1795:\t48 89 c6             \tmov    %rax,%rsi\n    1798:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    179d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    17a2:\te8 00 00 00 00       \tcallq  17a7 <hwcrhk_rsa_mod_exp+0x252>\n    17a7:\te9 31 03 00 00       \tjmpq   1add <hwcrhk_rsa_mod_exp+0x588>\n    17ac:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    17b3:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    17b7:\t48 85 c0             \ttest   %rax,%rax\n    17ba:\t74 40                \tje     17fc <hwcrhk_rsa_mod_exp+0x2a7>\n    17bc:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    17c3:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    17c7:\t48 85 c0             \ttest   %rax,%rax\n    17ca:\t74 30                \tje     17fc <hwcrhk_rsa_mod_exp+0x2a7>\n    17cc:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    17d3:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    17d7:\t48 85 c0             \ttest   %rax,%rax\n    17da:\t74 20                \tje     17fc <hwcrhk_rsa_mod_exp+0x2a7>\n    17dc:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    17e3:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n    17e7:\t48 85 c0             \ttest   %rax,%rax\n    17ea:\t74 10                \tje     17fc <hwcrhk_rsa_mod_exp+0x2a7>\n    17ec:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    17f3:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n    17f7:\t48 85 c0             \ttest   %rax,%rax\n    17fa:\t75 1e                \tjne    181a <hwcrhk_rsa_mod_exp+0x2c5>\n    17fc:\tb9 ff 03 00 00       \tmov    $0x3ff,%ecx\n    1801:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1806:\tbe 69 00 00 00       \tmov    $0x69,%esi\n    180b:\tbf 6d 00 00 00       \tmov    $0x6d,%edi\n    1810:\te8 b2 e8 ff ff       \tcallq  c7 <ERR_HWCRHK_error>\n    1815:\te9 c3 02 00 00       \tjmpq   1add <hwcrhk_rsa_mod_exp+0x588>\n    181a:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    1821:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1825:\t8b 50 08             \tmov    0x8(%rax),%edx\n    1828:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    182f:\t89 d6                \tmov    %edx,%esi\n    1831:\t48 89 c7             \tmov    %rax,%rdi\n    1834:\te8 00 00 00 00       \tcallq  1839 <hwcrhk_rsa_mod_exp+0x2e4>\n    1839:\t48 8b 85 20 fb ff ff \tmov    -0x4e0(%rbp),%rax\n    1840:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1843:\t48 98                \tcltq   \n    1845:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1849:\t48 89 85 98 fb ff ff \tmov    %rax,-0x468(%rbp)\n    1850:\t48 8b 85 20 fb ff ff \tmov    -0x4e0(%rbp),%rax\n    1857:\t48 8b 00             \tmov    (%rax),%rax\n    185a:\t48 89 85 90 fb ff ff \tmov    %rax,-0x470(%rbp)\n    1861:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    1868:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    186c:\t8b 40 08             \tmov    0x8(%rax),%eax\n    186f:\t48 98                \tcltq   \n    1871:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1875:\t48 89 85 88 fb ff ff \tmov    %rax,-0x478(%rbp)\n    187c:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    1883:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    1887:\t48 8b 00             \tmov    (%rax),%rax\n    188a:\t48 89 85 80 fb ff ff \tmov    %rax,-0x480(%rbp)\n    1891:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    1898:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    189c:\t8b 40 08             \tmov    0x8(%rax),%eax\n    189f:\t48 98                \tcltq   \n    18a1:\t48 c1 e0 03          \tshl    $0x3,%rax\n    18a5:\t48 89 85 78 fb ff ff \tmov    %rax,-0x488(%rbp)\n    18ac:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    18b3:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    18b7:\t48 8b 00             \tmov    (%rax),%rax\n    18ba:\t48 89 85 70 fb ff ff \tmov    %rax,-0x490(%rbp)\n    18c1:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    18c8:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    18cc:\t8b 40 08             \tmov    0x8(%rax),%eax\n    18cf:\t48 98                \tcltq   \n    18d1:\t48 c1 e0 03          \tshl    $0x3,%rax\n    18d5:\t48 89 85 68 fb ff ff \tmov    %rax,-0x498(%rbp)\n    18dc:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    18e3:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    18e7:\t48 8b 00             \tmov    (%rax),%rax\n    18ea:\t48 89 85 60 fb ff ff \tmov    %rax,-0x4a0(%rbp)\n    18f1:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    18f8:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n    18fc:\t8b 40 08             \tmov    0x8(%rax),%eax\n    18ff:\t48 98                \tcltq   \n    1901:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1905:\t48 89 85 58 fb ff ff \tmov    %rax,-0x4a8(%rbp)\n    190c:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    1913:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n    1917:\t48 8b 00             \tmov    (%rax),%rax\n    191a:\t48 89 85 50 fb ff ff \tmov    %rax,-0x4b0(%rbp)\n    1921:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    1928:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n    192c:\t8b 40 08             \tmov    0x8(%rax),%eax\n    192f:\t48 98                \tcltq   \n    1931:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1935:\t48 89 85 48 fb ff ff \tmov    %rax,-0x4b8(%rbp)\n    193c:\t48 8b 85 18 fb ff ff \tmov    -0x4e8(%rbp),%rax\n    1943:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n    1947:\t48 8b 00             \tmov    (%rax),%rax\n    194a:\t48 89 85 40 fb ff ff \tmov    %rax,-0x4c0(%rbp)\n    1951:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1958:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    195b:\t48 98                \tcltq   \n    195d:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1961:\t48 89 85 38 fb ff ff \tmov    %rax,-0x4c8(%rbp)\n    1968:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    196f:\t48 8b 00             \tmov    (%rax),%rax\n    1972:\t48 89 85 30 fb ff ff \tmov    %rax,-0x4d0(%rbp)\n    1979:\t4c 8b 15 00 00 00 00 \tmov    0x0(%rip),%r10        # 1980 <hwcrhk_rsa_mod_exp+0x42b>\n    1980:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1987 <hwcrhk_rsa_mod_exp+0x432>\n    1987:\t4c 8d 8d 30 fb ff ff \tlea    -0x4d0(%rbp),%r9\n    198e:\t48 8b 8d 80 fb ff ff \tmov    -0x480(%rbp),%rcx\n    1995:\t4c 8b 85 88 fb ff ff \tmov    -0x478(%rbp),%r8\n    199c:\t48 8b b5 90 fb ff ff \tmov    -0x470(%rbp),%rsi\n    19a3:\t48 8b 95 98 fb ff ff \tmov    -0x468(%rbp),%rdx\n    19aa:\t48 83 ec 08          \tsub    $0x8,%rsp\n    19ae:\t48 8d bd c0 fb ff ff \tlea    -0x440(%rbp),%rdi\n    19b5:\t57                   \tpush   %rdi\n    19b6:\tff b5 48 fb ff ff    \tpushq  -0x4b8(%rbp)\n    19bc:\tff b5 40 fb ff ff    \tpushq  -0x4c0(%rbp)\n    19c2:\tff b5 58 fb ff ff    \tpushq  -0x4a8(%rbp)\n    19c8:\tff b5 50 fb ff ff    \tpushq  -0x4b0(%rbp)\n    19ce:\tff b5 68 fb ff ff    \tpushq  -0x498(%rbp)\n    19d4:\tff b5 60 fb ff ff    \tpushq  -0x4a0(%rbp)\n    19da:\tff b5 78 fb ff ff    \tpushq  -0x488(%rbp)\n    19e0:\tff b5 70 fb ff ff    \tpushq  -0x490(%rbp)\n    19e6:\t48 89 c7             \tmov    %rax,%rdi\n    19e9:\t41 ff d2             \tcallq  *%r10\n    19ec:\t48 83 c4 50          \tadd    $0x50,%rsp\n    19f0:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    19f3:\t48 8b 85 38 fb ff ff \tmov    -0x4c8(%rbp),%rax\n    19fa:\t48 c1 e8 03          \tshr    $0x3,%rax\n    19fe:\t89 c2                \tmov    %eax,%edx\n    1a00:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1a07:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1a0a:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1a11:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1a14:\t85 c0                \ttest   %eax,%eax\n    1a16:\t7e 63                \tjle    1a7b <hwcrhk_rsa_mod_exp+0x526>\n    1a18:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1a1f:\t48 8b 10             \tmov    (%rax),%rdx\n    1a22:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1a29:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1a2c:\t48 98                \tcltq   \n    1a2e:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1a32:\t48 83 e8 08          \tsub    $0x8,%rax\n    1a36:\t48 01 d0             \tadd    %rdx,%rax\n    1a39:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1a3d:\teb 2b                \tjmp    1a6a <hwcrhk_rsa_mod_exp+0x515>\n    1a3f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1a43:\t48 8d 50 f8          \tlea    -0x8(%rax),%rdx\n    1a47:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n    1a4b:\t48 8b 00             \tmov    (%rax),%rax\n    1a4e:\t48 85 c0             \ttest   %rax,%rax\n    1a51:\t75 27                \tjne    1a7a <hwcrhk_rsa_mod_exp+0x525>\n    1a53:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1a5a:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1a5d:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    1a60:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1a67:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1a6a:\t48 8b 85 28 fb ff ff \tmov    -0x4d8(%rbp),%rax\n    1a71:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1a74:\t85 c0                \ttest   %eax,%eax\n    1a76:\t7f c7                \tjg     1a3f <hwcrhk_rsa_mod_exp+0x4ea>\n    1a78:\teb 01                \tjmp    1a7b <hwcrhk_rsa_mod_exp+0x526>\n    1a7a:\t90                   \tnop\n    1a7b:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    1a7f:\t79 55                \tjns    1ad6 <hwcrhk_rsa_mod_exp+0x581>\n    1a81:\t83 7d dc fe          \tcmpl   $0xfffffffe,-0x24(%rbp)\n    1a85:\t75 1b                \tjne    1aa2 <hwcrhk_rsa_mod_exp+0x54d>\n    1a87:\tb9 1d 04 00 00       \tmov    $0x41d,%ecx\n    1a8c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1a91:\tbe 70 00 00 00       \tmov    $0x70,%esi\n    1a96:\tbf 6d 00 00 00       \tmov    $0x6d,%edi\n    1a9b:\te8 27 e6 ff ff       \tcallq  c7 <ERR_HWCRHK_error>\n    1aa0:\teb 19                \tjmp    1abb <hwcrhk_rsa_mod_exp+0x566>\n    1aa2:\tb9 22 04 00 00       \tmov    $0x422,%ecx\n    1aa7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1aac:\tbe 6f 00 00 00       \tmov    $0x6f,%esi\n    1ab1:\tbf 6d 00 00 00       \tmov    $0x6d,%edi\n    1ab6:\te8 0c e6 ff ff       \tcallq  c7 <ERR_HWCRHK_error>\n    1abb:\t48 8b 85 c0 fb ff ff \tmov    -0x440(%rbp),%rax\n    1ac2:\t48 89 c6             \tmov    %rax,%rsi\n    1ac5:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    1aca:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1acf:\te8 00 00 00 00       \tcallq  1ad4 <hwcrhk_rsa_mod_exp+0x57f>\n    1ad4:\teb 07                \tjmp    1add <hwcrhk_rsa_mod_exp+0x588>\n    1ad6:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n    1add:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1ae0:\tc9                   \tleaveq \n    1ae1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hwcrhk_rsa_mod_exp(__int64 <span class=\"supfact\">a1</span>,\n                                      __int64 <span class=\"supfact\">a2</span>,\n                                      _QWORD *<span class=\"supfact\">a3</span>) {\n  _QWORD *v3;\n  _QWORD *v4;\n  __int64 <span class=\"supfact\">v7</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  __int64 <span class=\"supfact\">v17</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  __int64 <span class=\"supfact\">v19</span>;\n  __int64 <span class=\"supfact\">v20</span>;\n  __int64 <span class=\"supfact\">v21</span>;\n  unsigned __int64 <span class=\"supfact\">v22</span>;\n  __int64 <span class=\"supfact\">v23</span>;\n  __int64 <span class=\"supfact\">v24</span>;\n  __int64 <span class=\"supfact\">v25</span>[Number];\n  char <span class=\"supfact\">v26</span>;\n  int <span class=\"supfact\">v27</span>;\n  _QWORD *<span class=\"supfact\">v28</span>;\n  _QWORD *<span class=\"supfact\">v29</span>;\n  _QWORD *<span class=\"supfact\">v30</span>;\n  unsigned int <span class=\"supfact\">v31</span>;\n  <span class=\"supfact\">v31</span> = Number;\n  <span class=\"supfact\">v25</span>[Number] = (__int64)&<span class=\"supfact\">v26</span>;\n  <span class=\"supfact\">v25</span>[Number] = Number L;\n  if (!hwcrhk_context) {\n    ERR_HWCRHK_error(Number, Number, (__int64)String, Number);\n    return <span class=\"supfact\">v31</span>;\n  }\n  <span class=\"supfact\">v28</span> =\n      (_QWORD *)RSA_get_ex_data(<span class=\"supfact\">a3</span>, (unsigned int)hndidx_rsa);\n  if (<span class=\"supfact\">v28</span>) {\n    if (!<span class=\"supfact\">a3</span>[Number]) {\n      ERR_HWCRHK_error(Number, Number, (__int64)String, Number);\n      return <span class=\"supfact\">v31</span>;\n    }\n    bn_expand2(<span class=\"supfact\">a1</span>,\n               *(unsigned int *)(<span class=\"supfact\">a3</span>[Number] + Number L));\n    <span class=\"supfact\">v24</span> = Number L * *(int *)(<span class=\"supfact\">a2</span> + Number);\n    <span class=\"supfact\">v23</span> = *(_QWORD *)<span class=\"supfact\">a2</span>;\n    <span class=\"supfact\">v22</span> = Number L * *(int *)(<span class=\"supfact\">a1</span> + Number);\n    <span class=\"supfact\">v21</span> = *(_QWORD *)<span class=\"supfact\">a1</span>;\n    <span class=\"supfact\">v27</span> = p_hwcrhk_RSA(\n        <span class=\"supfact\">v23</span>, <span class=\"supfact\">v24</span>, *<span class=\"supfact\">v28</span>,\n        &<span class=\"supfact\">v21</span>, <span class=\"supfact\">v25</span>);\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v22</span> >> Number;\n    if (*(int *)(<span class=\"supfact\">a1</span> + Number) > Number) {\n      <span class=\"supfact\">v30</span> =\n          (_QWORD *)(*(_QWORD *)<span class=\"supfact\">a1</span> +\n                     Number L * *(int *)(<span class=\"supfact\">a1</span> + Number) - Number);\n      while (*(int *)(<span class=\"supfact\">a1</span> + Number) > Number) {\n        v3 = <span class=\"supfact\">v30</span>--;\n        if (*v3)\n          break;\n        --*(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n      }\n    }\n    if (<span class=\"supfact\">v27</span> < Number) {\n      if (<span class=\"supfact\">v27</span> == Number)\n        ERR_HWCRHK_error(Number, Number, (__int64)String, Number);\n      else\n        ERR_HWCRHK_error(Number, Number, (__int64)String, Number);\n      ERR_add_error_data(Number L, <span class=\"supfact\">v25</span>[Number]);\n      return <span class=\"supfact\">v31</span>;\n    }\n    return Number;\n  }\n  if (!<span class=\"supfact\">a3</span>[Number] || !<span class=\"supfact\">a3</span>[Number] ||\n      !<span class=\"supfact\">a3</span>[Number] || !<span class=\"supfact\">a3</span>[Number] ||\n      !<span class=\"supfact\">a3</span>[Number]) {\n    ERR_HWCRHK_error(Number, Number, (__int64)String, Number);\n    return <span class=\"supfact\">v31</span>;\n  }\n  bn_expand2(<span class=\"supfact\">a1</span>,\n             *(unsigned int *)(<span class=\"supfact\">a3</span>[Number] + Number L));\n  <span class=\"supfact\">v20</span> = Number L * *(int *)(<span class=\"supfact\">a2</span> + Number);\n  <span class=\"supfact\">v19</span> = *(_QWORD *)<span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v18</span> =\n      Number L * *(int *)(<span class=\"supfact\">a3</span>[Number] + Number L);\n  <span class=\"supfact\">v17</span> = *(_QWORD *)<span class=\"supfact\">a3</span>[Number];\n  <span class=\"supfact\">v16</span> =\n      Number L * *(int *)(<span class=\"supfact\">a3</span>[Number] + Number L);\n  <span class=\"supfact\">v15</span> = *(_QWORD *)<span class=\"supfact\">a3</span>[Number];\n  <span class=\"supfact\">v14</span> =\n      Number L * *(int *)(<span class=\"supfact\">a3</span>[Number] + Number L);\n  <span class=\"supfact\">v13</span> = *(_QWORD *)<span class=\"supfact\">a3</span>[Number];\n  <span class=\"supfact\">v12</span> =\n      Number L * *(int *)(<span class=\"supfact\">a3</span>[Number] + Number L);\n  <span class=\"supfact\">v11</span> = *(_QWORD *)<span class=\"supfact\">a3</span>[Number];\n  <span class=\"supfact\">v10</span> =\n      Number L * *(int *)(<span class=\"supfact\">a3</span>[Number] + Number L);\n  <span class=\"supfact\">v9</span> = *(_QWORD *)<span class=\"supfact\">a3</span>[Number];\n  <span class=\"supfact\">v8</span> = Number L * *(int *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v7</span> = *(_QWORD *)<span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v27</span> = p_hwcrhk_ModExpCRT(\n      hwcrhk_context, <span class=\"supfact\">v19</span>, <span class=\"supfact\">v20</span>,\n      <span class=\"supfact\">v17</span>, <span class=\"supfact\">v18</span>, &<span class=\"supfact\">v7</span>,\n      <span class=\"supfact\">v15</span>, <span class=\"supfact\">v16</span>, <span class=\"supfact\">v13</span>,\n      <span class=\"supfact\">v14</span>, <span class=\"supfact\">v11</span>, <span class=\"supfact\">v12</span>,\n      <span class=\"supfact\">v9</span>, <span class=\"supfact\">v10</span>, <span class=\"supfact\">v25</span>);\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v8</span> >> Number;\n  if (*(int *)(<span class=\"supfact\">a1</span> + Number) > Number) {\n    <span class=\"supfact\">v29</span> =\n        (_QWORD *)(*(_QWORD *)<span class=\"supfact\">a1</span> +\n                   Number L * *(int *)(<span class=\"supfact\">a1</span> + Number) - Number);\n    while (*(int *)(<span class=\"supfact\">a1</span> + Number) > Number) {\n      v4 = <span class=\"supfact\">v29</span>--;\n      if (*v4)\n        break;\n      --*(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n    }\n  }\n  if (<span class=\"supfact\">v27</span> >= Number)\n    return Number;\n  if (<span class=\"supfact\">v27</span> == Number)\n    ERR_HWCRHK_error(Number, Number, (__int64)String, Number);\n  else\n    ERR_HWCRHK_error(Number, Number, (__int64)String, Number);\n  ERR_add_error_data(Number L, <span class=\"supfact\">v25</span>[Number]);\n  return <span class=\"supfact\">v31</span>;\n}", "code_t": "int __cdecl hwcrhk_rsa_mod_exp(BIGNUM *<span class=\"supfact\">r</span>,\n                               const BIGNUM *<span class=\"supfact\">I</span>,\n                               RSA *<span class=\"supfact\">rsa</span>, BN_CTX *ctx) {\n  unsigned __int64 *v4;\n  unsigned __int64 *v5;\n  HWCryptoHook_MPI <span class=\"supfact\">m_r_0</span>;\n  HWCryptoHook_MPI <span class=\"supfact\">m_iqmp</span>;\n  HWCryptoHook_MPI <span class=\"supfact\">m_dmq1</span>;\n  HWCryptoHook_MPI <span class=\"supfact\">m_dmp1</span>;\n  HWCryptoHook_MPI <span class=\"supfact\">m_q</span>;\n  HWCryptoHook_MPI <span class=\"supfact\">m_p</span>;\n  HWCryptoHook_MPI <span class=\"supfact\">m_a_0</span>;\n  HWCryptoHook_MPI <span class=\"supfact\">m_r</span>;\n  HWCryptoHook_MPI <span class=\"supfact\">m_a</span>;\n  HWCryptoHook_ErrMsgBuf <span class=\"supfact\">rmsg</span>;\n  char <span class=\"supfact\">tempbuf</span>[Number];\n  int <span class=\"supfact\">ret</span>;\n  HWCryptoHook_RSAKeyHandle *<span class=\"supfact\">hptr</span>;\n  unsigned __int64 *<span class=\"supfact\">ftl_0</span>;\n  unsigned __int64 *<span class=\"supfact\">ftl</span>;\n  int <span class=\"supfact\">to_return</span>;\n  <span class=\"supfact\">to_return</span> = Number;\n  <span class=\"supfact\">rmsg</span>.buf = <span class=\"supfact\">tempbuf</span>;\n  <span class=\"supfact\">rmsg</span>.size = Number L;\n  if (!hwcrhk_context) {\n    ERR_HWCRHK_error(Number, Number, String, Number);\n    return <span class=\"supfact\">to_return</span>;\n  }\n  <span class=\"supfact\">hptr</span> = (HWCryptoHook_RSAKeyHandle *)RSA_get_ex_data(\n      <span class=\"supfact\">rsa</span>, (unsigned int)hndidx_rsa);\n  if (<span class=\"supfact\">hptr</span>) {\n    if (!<span class=\"supfact\">rsa</span>->n) {\n      ERR_HWCRHK_error(Number, Number, String, Number);\n      return <span class=\"supfact\">to_return</span>;\n    }\n    bn_expand2(<span class=\"supfact\">r</span>, (unsigned int)<span class=\"supfact\">rsa</span>->n->top);\n    <span class=\"supfact\">m_a</span>.size = Number L * <span class=\"supfact\">I</span>->top;\n    <span class=\"supfact\">m_a</span>.buf = (unsigned __int8 *)<span class=\"supfact\">I</span>->d;\n    <span class=\"supfact\">m_r</span>.size = Number L * <span class=\"supfact\">r</span>->dmax;\n    <span class=\"supfact\">m_r</span>.buf = (unsigned __int8 *)<span class=\"supfact\">r</span>->d;\n    <span class=\"supfact\">ret</span> =\n        p_hwcrhk_RSA(<span class=\"supfact\">m_a</span>, *<span class=\"supfact\">hptr</span>,\n                     &<span class=\"supfact\">m_r</span>, &<span class=\"supfact\">rmsg</span>);\n    <span class=\"supfact\">r</span>->top = <span class=\"supfact\">m_r</span>.size >> Number;\n    if (<span class=\"supfact\">r</span>->top > Number) {\n      <span class=\"supfact\">ftl</span> =\n          &<span class=\"supfact\">r</span>->d[<span class=\"supfact\">r</span>->top - Number];\n      while (<span class=\"supfact\">r</span>->top > Number) {\n        v4 = <span class=\"supfact\">ftl</span>--;\n        if (*v4)\n          break;\n        --<span class=\"supfact\">r</span>->top;\n      }\n    }\n    if (<span class=\"supfact\">ret</span> < Number) {\n      if (<span class=\"supfact\">ret</span> == Number)\n        ERR_HWCRHK_error(Number, Number, String, Number);\n      else\n        ERR_HWCRHK_error(Number, Number, String, Number);\n      ERR_add_error_data(Number L, <span class=\"supfact\">rmsg</span>.buf);\n      return <span class=\"supfact\">to_return</span>;\n    }\n    return Number;\n  }\n  if (!<span class=\"supfact\">rsa</span>->p || !<span class=\"supfact\">rsa</span>->q ||\n      !<span class=\"supfact\">rsa</span>->dmp1 || !<span class=\"supfact\">rsa</span>->dmq1 ||\n      !<span class=\"supfact\">rsa</span>->iqmp) {\n    ERR_HWCRHK_error(Number, Number, String, Number);\n    return <span class=\"supfact\">to_return</span>;\n  }\n  bn_expand2(<span class=\"supfact\">r</span>, (unsigned int)<span class=\"supfact\">rsa</span>->n->top);\n  <span class=\"supfact\">m_a_0</span>.size = Number L * <span class=\"supfact\">I</span>->top;\n  <span class=\"supfact\">m_a_0</span>.buf = (unsigned __int8 *)<span class=\"supfact\">I</span>->d;\n  <span class=\"supfact\">m_p</span>.size = Number L * <span class=\"supfact\">rsa</span>->p->top;\n  <span class=\"supfact\">m_p</span>.buf = (unsigned __int8 *)<span class=\"supfact\">rsa</span>->p->d;\n  <span class=\"supfact\">m_q</span>.size = Number L * <span class=\"supfact\">rsa</span>->q->top;\n  <span class=\"supfact\">m_q</span>.buf = (unsigned __int8 *)<span class=\"supfact\">rsa</span>->q->d;\n  <span class=\"supfact\">m_dmp1</span>.size = Number L * <span class=\"supfact\">rsa</span>->dmp1->top;\n  <span class=\"supfact\">m_dmp1</span>.buf = (unsigned __int8 *)<span class=\"supfact\">rsa</span>->dmp1->d;\n  <span class=\"supfact\">m_dmq1</span>.size = Number L * <span class=\"supfact\">rsa</span>->dmq1->top;\n  <span class=\"supfact\">m_dmq1</span>.buf = (unsigned __int8 *)<span class=\"supfact\">rsa</span>->dmq1->d;\n  <span class=\"supfact\">m_iqmp</span>.size = Number L * <span class=\"supfact\">rsa</span>->iqmp->top;\n  <span class=\"supfact\">m_iqmp</span>.buf = (unsigned __int8 *)<span class=\"supfact\">rsa</span>->iqmp->d;\n  <span class=\"supfact\">m_r_0</span>.size = Number L * <span class=\"supfact\">r</span>->dmax;\n  <span class=\"supfact\">m_r_0</span>.buf = (unsigned __int8 *)<span class=\"supfact\">r</span>->d;\n  <span class=\"supfact\">ret</span> = p_hwcrhk_ModExpCRT(\n      hwcrhk_context, <span class=\"supfact\">m_a_0</span>, <span class=\"supfact\">m_p</span>,\n      <span class=\"supfact\">m_q</span>, <span class=\"supfact\">m_dmp1</span>, <span class=\"supfact\">m_dmq1</span>,\n      <span class=\"supfact\">m_iqmp</span>, &<span class=\"supfact\">m_r_0</span>, &<span class=\"supfact\">rmsg</span>);\n  <span class=\"supfact\">r</span>->top = <span class=\"supfact\">m_r_0</span>.size >> Number;\n  if (<span class=\"supfact\">r</span>->top > Number) {\n    <span class=\"supfact\">ftl_0</span> =\n        &<span class=\"supfact\">r</span>->d[<span class=\"supfact\">r</span>->top - Number];\n    while (<span class=\"supfact\">r</span>->top > Number) {\n      v5 = <span class=\"supfact\">ftl_0</span>--;\n      if (*v5)\n        break;\n      --<span class=\"supfact\">r</span>->top;\n    }\n  }\n  if (<span class=\"supfact\">ret</span> >= Number)\n    return Number;\n  if (<span class=\"supfact\">ret</span> == Number)\n    ERR_HWCRHK_error(Number, Number, String, Number);\n  else\n    ERR_HWCRHK_error(Number, Number, String, Number);\n  ERR_add_error_data(Number L, <span class=\"supfact\">rmsg</span>.buf);\n  return <span class=\"supfact\">to_return</span>;\n}", "var": [{"name": "a1", "type": "BIGNUM *", "pred_name": "r", "ref_name": "r", "ref_type": "BIGNUM *"}, {"name": "a2", "type": "const BIGNUM *", "pred_name": "I", "ref_name": "I", "ref_type": "const BIGNUM *"}, {"name": "a3", "type": "RSA *", "pred_name": "rsa", "ref_name": "rsa", "ref_type": "RSA *"}, {"name": "v7", "type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }", "pred_name": "__unk__", "ref_name": "m_r_0", "ref_type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }"}, {"name": "v8", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v9", "type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }", "pred_name": "__unk__", "ref_name": "m_iqmp", "ref_type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }"}, {"name": "v10", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v11", "type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }", "pred_name": "m_p", "ref_name": "m_dmq1", "ref_type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }"}, {"name": "v12", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v13", "type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }", "pred_name": "m_a", "ref_name": "m_dmp1", "ref_type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }"}, {"name": "v14", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v15", "type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }", "pred_name": "m_a", "ref_name": "m_q", "ref_type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }"}, {"name": "v16", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v17", "type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }", "pred_name": "m_p", "ref_name": "m_p", "ref_type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }"}, {"name": "v18", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v19", "type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }", "pred_name": "m_a", "ref_name": "m_a_0", "ref_type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }"}, {"name": "v20", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v21", "type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }", "pred_name": "m_r", "ref_name": "m_r", "ref_type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }"}, {"name": "v22", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v23", "type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }", "pred_name": "m_a", "ref_name": "m_a", "ref_type": "struct HWCryptoHook_MPI { unsigned __int8 * buf; size_t size; }"}, {"name": "v24", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v25", "type": "struct HWCryptoHook_ErrMsgBuf { char * buf; size_t size; }", "pred_name": "rmsg", "ref_name": "rmsg", "ref_type": "struct HWCryptoHook_ErrMsgBuf { char * buf; size_t size; }"}, {"name": "v26", "type": "char[1024]", "pred_name": "tempbuf", "ref_name": "tempbuf", "ref_type": "char[1024]"}, {"name": "v27", "type": "int", "pred_name": "ret", "ref_name": "ret", "ref_type": "int"}, {"name": "v28", "type": "HWCryptoHook_RSAKeyHandle *", "pred_name": "hptr", "ref_name": "hptr", "ref_type": "HWCryptoHook_RSAKeyHandle *"}, {"name": "v29", "type": "unsigned __int64 *", "pred_name": "ftl_0", "ref_name": "ftl_0", "ref_type": "unsigned __int64 *"}, {"name": "v30", "type": "unsigned __int64 *", "pred_name": "ftl", "ref_name": "ftl", "ref_type": "unsigned __int64 *"}, {"name": "v31", "type": "int", "pred_name": "to_return", "ref_name": "to_return", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "pangfudong", "repo_name": "i.mx53", "path": "pangfudong/i.mx53/4460f52ed4b3eac00c25488e487932787aae4973604c6b9cd35f2b367752d545", "path_in_repo": "pangfudong/i.mx53/linux/tools/perf/util/probe-finder.o", "objdump": "0000000000000cfe <die_find_variable>:\n     cfe:\t55                   \tpush   %rbp\n     cff:\t48 89 e5             \tmov    %rsp,%rbp\n     d02:\t48 83 ec 30          \tsub    $0x30,%rsp\n     d06:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     d0a:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     d0e:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     d12:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     d19:\t00 00 \n     d1b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d1f:\t31 c0                \txor    %eax,%eax\n     d21:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n     d25:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     d29:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d2d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d32:\t48 89 c7             \tmov    %rax,%rdi\n     d35:\te8 88 fc ff ff       \tcallq  9c2 <die_find_child>\n     d3a:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n     d3e:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n     d45:\t00 00 \n     d47:\t74 05                \tje     d4e <die_find_variable+0x50>\n     d49:\te8 00 00 00 00       \tcallq  d4e <die_find_variable+0x50>\n     d4e:\tc9                   \tleaveq \n     d4f:\tc3                   \tretq   ", "code_s": "Dwarf_Die *__fastcall die_find_variable(struct Dwarf_Die_s *<span class=\"supfact\">a1</span>,\n                                        __int64 <span class=\"supfact\">a2</span>,\n                                        Dwarf_Die *<span class=\"supfact\">a3</span>) {\n  return die_find_child(\n      <span class=\"supfact\">a1</span>,\n      (__int64(__fastcall *)(Dwarf_Die *, __int64))_die_find_variable_cb,\n      <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>);\n}", "code_t": "Dwarf_Die *__cdecl die_find_variable(Dwarf_Die *<span class=\"supfact\">sp_die</span>,\n                                     const char *<span class=\"supfact\">name</span>,\n                                     Dwarf_Die *<span class=\"supfact\">die_mem</span>) {\n  return die_find_child(<span class=\"supfact\">sp_die</span>,\n                        (int (*)(Dwarf_Die *, void *))_die_find_variable_cb,\n                        (void *)<span class=\"supfact\">name</span>, <span class=\"supfact\">die_mem</span>);\n}", "var": [{"name": "a1", "type": "Dwarf_Die *", "pred_name": "st_die", "ref_name": "sp_die", "ref_type": "Dwarf_Die *"}, {"name": "a2", "type": "const char *", "pred_name": "name", "ref_name": "name", "ref_type": "const char *"}, {"name": "a3", "type": "Dwarf_Die *", "pred_name": "die_mem", "ref_name": "die_mem", "ref_type": "Dwarf_Die *"}], "body_in_train": false}, {"repo_owner": "vgmrips", "repo_name": "vgmtools", "path": "vgmrips/vgmtools/5045fd9aa0ca97399d084bb0c317c1d7ccb98e4e6207193c94aedb7f547d36bd", "path_in_repo": "vgmrips/vgmtools//vgm_trim", "objdump": "", "code_s": "size_t fwrite(const void *<span class=\"supfact\">ptr</span>, size_t <span class=\"supfact\">size</span>,\n              size_t <span class=\"supfact\">n</span>, FILE *<span class=\"supfact\">s</span>) {\n  return fwrite(<span class=\"supfact\">ptr</span>, <span class=\"supfact\">size</span>, <span class=\"supfact\">n</span>,\n                <span class=\"supfact\">s</span>);\n}", "code_t": "size_t fwrite(const void *<span class=\"supfact\">ptr</span>, size_t <span class=\"supfact\">size</span>,\n              size_t <span class=\"supfact\">n</span>, FILE *<span class=\"supfact\">s</span>) {\n  return fwrite(<span class=\"supfact\">ptr</span>, <span class=\"supfact\">size</span>, <span class=\"supfact\">n</span>,\n                <span class=\"supfact\">s</span>);\n}", "var": [{"name": "ptr", "type": "const void *", "pred_name": "ptr", "ref_name": "ptr", "ref_type": "const void *"}, {"name": "size", "type": "size_t", "pred_name": "size", "ref_name": "size", "ref_type": "size_t"}, {"name": "n", "type": "size_t", "pred_name": "n", "ref_name": "n", "ref_type": "size_t"}, {"name": "s", "type": "FILE *", "pred_name": "s", "ref_name": "s", "ref_type": "FILE *"}], "body_in_train": true}, {"repo_owner": "OnePlusOSS", "repo_name": "android_kernel_oneplus_sm8150", "path": "OnePlusOSS/android_kernel_oneplus_sm8150/03df6bccffc3f776e1af988d7c07622802ff4d7925846e78abca3bf75878a036", "path_in_repo": "OnePlusOSS/android_kernel_oneplus_sm8150/tools/objtool/objtool", "objdump": "000000000040fed6 <prepare_exec_cmd>:\n  40fed6:\t55                   \tpush   %rbp\n  40fed7:\t48 89 e5             \tmov    %rsp,%rbp\n  40feda:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40fede:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40fee2:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40fee9:\teb 04                \tjmp    40feef <prepare_exec_cmd+0x19>\n  40feeb:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40feef:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40fef2:\t48 98                \tcltq   \n  40fef4:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40fefb:\t00 \n  40fefc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ff00:\t48 01 d0             \tadd    %rdx,%rax\n  40ff03:\t48 8b 00             \tmov    (%rax),%rax\n  40ff06:\t48 85 c0             \ttest   %rax,%rax\n  40ff09:\t75 e0                \tjne    40feeb <prepare_exec_cmd+0x15>\n  40ff0b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40ff0e:\t83 c0 02             \tadd    $0x2,%eax\n  40ff11:\t48 98                \tcltq   \n  40ff13:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40ff17:\t48 89 c7             \tmov    %rax,%rdi\n  40ff1a:\te8 41 24 ff ff       \tcallq  402360 <malloc@plt>\n  40ff1f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40ff23:\t48 c7 c0 c0 03 42 00 \tmov    $0x4203c0,%rax\n  40ff2a:\t48 8b 10             \tmov    (%rax),%rdx\n  40ff2d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ff31:\t48 89 10             \tmov    %rdx,(%rax)\n  40ff34:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40ff3b:\teb 37                \tjmp    40ff74 <prepare_exec_cmd+0x9e>\n  40ff3d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40ff40:\t48 98                \tcltq   \n  40ff42:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40ff49:\t00 \n  40ff4a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ff4e:\t48 01 d0             \tadd    %rdx,%rax\n  40ff51:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40ff54:\t48 63 d2             \tmovslq %edx,%rdx\n  40ff57:\t48 83 c2 01          \tadd    $0x1,%rdx\n  40ff5b:\t48 8d 0c d5 00 00 00 \tlea    0x0(,%rdx,8),%rcx\n  40ff62:\t00 \n  40ff63:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  40ff67:\t48 01 ca             \tadd    %rcx,%rdx\n  40ff6a:\t48 8b 00             \tmov    (%rax),%rax\n  40ff6d:\t48 89 02             \tmov    %rax,(%rdx)\n  40ff70:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40ff74:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40ff77:\t48 98                \tcltq   \n  40ff79:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40ff80:\t00 \n  40ff81:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ff85:\t48 01 d0             \tadd    %rdx,%rax\n  40ff88:\t48 8b 00             \tmov    (%rax),%rax\n  40ff8b:\t48 85 c0             \ttest   %rax,%rax\n  40ff8e:\t75 ad                \tjne    40ff3d <prepare_exec_cmd+0x67>\n  40ff90:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40ff93:\t48 98                \tcltq   \n  40ff95:\t48 83 c0 01          \tadd    $0x1,%rax\n  40ff99:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40ffa0:\t00 \n  40ffa1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ffa5:\t48 01 d0             \tadd    %rdx,%rax\n  40ffa8:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  40ffaf:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40ffb3:\tc9                   \tleaveq \n  40ffb4:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall prepare_exec_cmd(__int64 <span class=\"supfact\">a1</span>) {\n  _QWORD *<span class=\"supfact\">v2</span>;\n  int i;\n  int j;\n  for (i = Number; *(_QWORD *)(Number L * i + <span class=\"supfact\">a1</span>); ++i)\n    ;\n  <span class=\"supfact\">v2</span> = malloc(Number L * (i + Number));\n  *<span class=\"supfact\">v2</span> = subcmd_config;\n  for (j = Number; *(_QWORD *)(Number L * j + <span class=\"supfact\">a1</span>); ++j)\n    <span class=\"supfact\">v2</span>[j + Number] =\n        *(_QWORD *)(Number L * j + <span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v2</span>[j + Number] = Number L;\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "const char **__cdecl prepare_exec_cmd(const char **<span class=\"supfact\">argv</span>) {\n  const char **<span class=\"supfact\">nargv</span>;\n  int argc;\n  int argca;\n  for (argc = Number; <span class=\"supfact\">argv</span>[argc]; ++argc)\n    ;\n  <span class=\"supfact\">nargv</span> = (const char **)malloc(Number L * (argc + Number));\n  *<span class=\"supfact\">nargv</span> = subcmd_config_0.exec_name;\n  for (argca = Number; <span class=\"supfact\">argv</span>[argca]; ++argca)\n    <span class=\"supfact\">nargv</span>[argca + Number] = <span class=\"supfact\">argv</span>[argca];\n  <span class=\"supfact\">nargv</span>[argca + Number] = Number L;\n  return <span class=\"supfact\">nargv</span>;\n}", "var": [{"name": "a1", "type": "const char * *", "pred_name": "argv", "ref_name": "argv", "ref_type": "const char * *"}, {"name": "v2", "type": "const char * *", "pred_name": "nargv", "ref_name": "nargv", "ref_type": "const char * *"}], "body_in_train": true}, {"repo_owner": "pombreda", "repo_name": "servetome", "path": "pombreda/servetome/79af8097f2ee2521a1b4f2272535266be46d8a43b4dff2d98824473066a5112d", "path_in_repo": "pombreda/servetome/ffmpeg-stm/libavformat/rl2.o", "objdump": "000000000000008b <rl2_read_header>:\n  8b:\t53                   \tpush   %rbx\n  8c:\t48 83 ec 70          \tsub    $0x70,%rsp\n  90:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n  95:\t48 89 34 24          \tmov    %rsi,(%rsp)\n  99:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  9e:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  a2:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n  a7:\tc7 44 24 6c 00 00 00 \tmovl   $0x0,0x6c(%rsp)\n  ae:\t00 \n  af:\tc7 44 24 68 00 00 00 \tmovl   $0x0,0x68(%rsp)\n  b6:\t00 \n  b7:\tc7 44 24 64 11 2b 00 \tmovl   $0x2b11,0x64(%rsp)\n  be:\t00 \n  bf:\tc7 44 24 60 4f 04 00 \tmovl   $0x44f,0x60(%rsp)\n  c6:\t00 \n  c7:\t48 c7 44 24 48 00 00 \tmovq   $0x0,0x48(%rsp)\n  ce:\t00 00 \n  d0:\t48 c7 44 24 40 00 00 \tmovq   $0x0,0x40(%rsp)\n  d7:\t00 00 \n  d9:\t48 c7 44 24 38 00 00 \tmovq   $0x0,0x38(%rsp)\n  e0:\t00 00 \n  e2:\tc7 44 24 58 00 00 00 \tmovl   $0x0,0x58(%rsp)\n  e9:\t00 \n  ea:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  ef:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  f4:\t48 89 c7             \tmov    %rax,%rdi\n  f7:\te8 00 00 00 00       \tcallq  fc <rl2_read_header+0x71>\n  fc:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 101:\t48 89 c7             \tmov    %rax,%rdi\n 104:\te8 00 00 00 00       \tcallq  109 <rl2_read_header+0x7e>\n 109:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n 10d:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 112:\t48 89 c7             \tmov    %rax,%rdi\n 115:\te8 00 00 00 00       \tcallq  11a <rl2_read_header+0x8f>\n 11a:\t89 44 24 30          \tmov    %eax,0x30(%rsp)\n 11e:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 123:\t48 89 c7             \tmov    %rax,%rdi\n 126:\te8 00 00 00 00       \tcallq  12b <rl2_read_header+0xa0>\n 12b:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n 12f:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 134:\t48 89 c7             \tmov    %rax,%rdi\n 137:\te8 00 00 00 00       \tcallq  13c <rl2_read_header+0xb1>\n 13c:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n 140:\t81 7c 24 34 ff ff ff \tcmpl   $0x3fffffff,0x34(%rsp)\n 147:\t3f \n 148:\t77 0a                \tja     154 <rl2_read_header+0xc9>\n 14a:\t81 7c 24 28 ff ff ff \tcmpl   $0x1fffffff,0x28(%rsp)\n 151:\t1f \n 152:\t76 0a                \tjbe    15e <rl2_read_header+0xd3>\n 154:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n 159:\te9 22 06 00 00       \tjmpq   780 <rl2_read_header+0x6f5>\n 15e:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 163:\t48 89 c7             \tmov    %rax,%rdi\n 166:\te8 00 00 00 00       \tcallq  16b <rl2_read_header+0xe0>\n 16b:\t66 89 44 24 26       \tmov    %ax,0x26(%rsp)\n 170:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 175:\t48 89 c7             \tmov    %rax,%rdi\n 178:\te8 00 00 00 00       \tcallq  17d <rl2_read_header+0xf2>\n 17d:\t66 89 44 24 24       \tmov    %ax,0x24(%rsp)\n 182:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 187:\t48 89 c7             \tmov    %rax,%rdi\n 18a:\te8 00 00 00 00       \tcallq  18f <rl2_read_header+0x104>\n 18f:\t66 89 44 24 22       \tmov    %ax,0x22(%rsp)\n 194:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 199:\t48 89 c7             \tmov    %rax,%rdi\n 19c:\te8 00 00 00 00       \tcallq  1a1 <rl2_read_header+0x116>\n 1a1:\t66 89 44 24 20       \tmov    %ax,0x20(%rsp)\n 1a6:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 1ab:\t48 89 c7             \tmov    %rax,%rdi\n 1ae:\te8 00 00 00 00       \tcallq  1b3 <rl2_read_header+0x128>\n 1b3:\t66 89 44 24 1e       \tmov    %ax,0x1e(%rsp)\n 1b8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 1bd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1c2:\t48 89 c7             \tmov    %rax,%rdi\n 1c5:\te8 00 00 00 00       \tcallq  1ca <rl2_read_header+0x13f>\n 1ca:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n 1cf:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n 1d5:\t75 0a                \tjne    1e1 <rl2_read_header+0x156>\n 1d7:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n 1dc:\te9 9f 05 00 00       \tjmpq   780 <rl2_read_header+0x6f5>\n 1e1:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 1e6:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 1ea:\tc7 80 08 01 00 00 00 \tmovl   $0x0,0x108(%rax)\n 1f1:\t00 00 00 \n 1f4:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 1f9:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 1fd:\tc7 80 0c 01 00 00 76 \tmovl   $0x76,0x10c(%rax)\n 204:\t00 00 00 \n 207:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 20c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 210:\tc7 80 10 01 00 00 00 \tmovl   $0x0,0x110(%rax)\n 217:\t00 00 00 \n 21a:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 21f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 223:\tc7 40 34 40 01 00 00 \tmovl   $0x140,0x34(%rax)\n 22a:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 22f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 233:\tc7 40 38 c8 00 00 00 \tmovl   $0xc8,0x38(%rax)\n 23a:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 23f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 243:\tc7 40 28 06 03 00 00 \tmovl   $0x306,0x28(%rax)\n 24a:\t81 7c 24 30 33 56 4c \tcmpl   $0x524c5633,0x30(%rsp)\n 251:\t52 \n 252:\t75 27                \tjne    27b <rl2_read_header+0x1f0>\n 254:\t83 7c 24 34 00       \tcmpl   $0x0,0x34(%rsp)\n 259:\t74 20                \tje     27b <rl2_read_header+0x1f0>\n 25b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 260:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 264:\t8b 40 28             \tmov    0x28(%rax),%eax\n 267:\t89 c2                \tmov    %eax,%edx\n 269:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n 26d:\t01 c2                \tadd    %eax,%edx\n 26f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 274:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 278:\t89 50 28             \tmov    %edx,0x28(%rax)\n 27b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 280:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 284:\t8b 40 28             \tmov    0x28(%rax),%eax\n 287:\t83 c0 08             \tadd    $0x8,%eax\n 28a:\t89 c2                \tmov    %eax,%edx\n 28c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 291:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n 295:\t89 d7                \tmov    %edx,%edi\n 297:\te8 00 00 00 00       \tcallq  29c <rl2_read_header+0x211>\n 29c:\t48 89 43 20          \tmov    %rax,0x20(%rbx)\n 2a0:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 2a5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 2a9:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n 2ad:\t48 85 c0             \ttest   %rax,%rax\n 2b0:\t75 0a                \tjne    2bc <rl2_read_header+0x231>\n 2b2:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n 2b7:\te9 c4 04 00 00       \tjmpq   780 <rl2_read_header+0x6f5>\n 2bc:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 2c1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 2c5:\t8b 50 28             \tmov    0x28(%rax),%edx\n 2c8:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 2cd:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 2d1:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n 2d5:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 2da:\t48 89 ce             \tmov    %rcx,%rsi\n 2dd:\t48 89 c7             \tmov    %rax,%rdi\n 2e0:\te8 00 00 00 00       \tcallq  2e5 <rl2_read_header+0x25a>\n 2e5:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n 2ea:\t48 8b 52 08          \tmov    0x8(%rdx),%rdx\n 2ee:\t8b 52 28             \tmov    0x28(%rdx),%edx\n 2f1:\t39 d0                \tcmp    %edx,%eax\n 2f3:\t74 0a                \tje     2ff <rl2_read_header+0x274>\n 2f5:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n 2fa:\te9 81 04 00 00       \tjmpq   780 <rl2_read_header+0x6f5>\n 2ff:\t66 83 7c 24 24 00    \tcmpw   $0x0,0x24(%rsp)\n 305:\t0f 84 3e 01 00 00    \tje     449 <rl2_read_header+0x3be>\n 30b:\t0f b7 44 24 1e       \tmovzwl 0x1e(%rsp),%eax\n 310:\t89 44 24 60          \tmov    %eax,0x60(%rsp)\n 314:\t0f b7 44 24 22       \tmovzwl 0x22(%rsp),%eax\n 319:\t89 44 24 64          \tmov    %eax,0x64(%rsp)\n 31d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 322:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 327:\t48 89 c7             \tmov    %rax,%rdi\n 32a:\te8 00 00 00 00       \tcallq  32f <rl2_read_header+0x2a4>\n 32f:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n 334:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n 33a:\t75 0a                \tjne    346 <rl2_read_header+0x2bb>\n 33c:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n 341:\te9 3a 04 00 00       \tjmpq   780 <rl2_read_header+0x6f5>\n 346:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 34b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 34f:\tc7 80 08 01 00 00 01 \tmovl   $0x1,0x108(%rax)\n 356:\t00 00 00 \n 359:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 35e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 362:\tc7 80 0c 01 00 00 05 \tmovl   $0x10005,0x10c(%rax)\n 369:\t00 01 00 \n 36c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 371:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 375:\tc7 80 10 01 00 00 01 \tmovl   $0x1,0x110(%rax)\n 37c:\t00 00 00 \n 37f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 384:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 388:\t0f b7 54 24 20       \tmovzwl 0x20(%rsp),%edx\n 38d:\t89 50 54             \tmov    %edx,0x54(%rax)\n 390:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 395:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 399:\tc7 80 d8 01 00 00 08 \tmovl   $0x8,0x1d8(%rax)\n 3a0:\t00 00 00 \n 3a3:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 3a8:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 3ac:\t0f b7 54 24 22       \tmovzwl 0x22(%rsp),%edx\n 3b1:\t89 50 50             \tmov    %edx,0x50(%rax)\n 3b4:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 3b9:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 3bd:\t8b 50 54             \tmov    0x54(%rax),%edx\n 3c0:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 3c5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 3c9:\t8b 40 50             \tmov    0x50(%rax),%eax\n 3cc:\t89 d1                \tmov    %edx,%ecx\n 3ce:\t0f af c8             \timul   %eax,%ecx\n 3d1:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 3d6:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 3da:\t8b 90 d8 01 00 00    \tmov    0x1d8(%rax),%edx\n 3e0:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 3e5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 3e9:\t0f af d1             \timul   %ecx,%edx\n 3ec:\t89 50 08             \tmov    %edx,0x8(%rax)\n 3ef:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 3f4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 3f8:\t8b 50 54             \tmov    0x54(%rax),%edx\n 3fb:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 400:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 404:\t8b 80 d8 01 00 00    \tmov    0x1d8(%rax),%eax\n 40a:\t89 d1                \tmov    %edx,%ecx\n 40c:\t0f af c8             \timul   %eax,%ecx\n 40f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 414:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 418:\t89 c8                \tmov    %ecx,%eax\n 41a:\t8d 48 07             \tlea    0x7(%rax),%ecx\n 41d:\t85 c0                \ttest   %eax,%eax\n 41f:\t0f 48 c1             \tcmovs  %ecx,%eax\n 422:\tc1 f8 03             \tsar    $0x3,%eax\n 425:\t89 82 44 01 00 00    \tmov    %eax,0x144(%rdx)\n 42b:\t0f b7 54 24 22       \tmovzwl 0x22(%rsp),%edx\n 430:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 435:\t89 d1                \tmov    %edx,%ecx\n 437:\tba 01 00 00 00       \tmov    $0x1,%edx\n 43c:\tbe 20 00 00 00       \tmov    $0x20,%esi\n 441:\t48 89 c7             \tmov    %rax,%rdi\n 444:\te8 00 00 00 00       \tcallq  449 <rl2_read_header+0x3be>\n 449:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 44e:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 452:\t8b 4c 24 64          \tmov    0x64(%rsp),%ecx\n 456:\t8b 54 24 60          \tmov    0x60(%rsp),%edx\n 45a:\tbe 20 00 00 00       \tmov    $0x20,%esi\n 45f:\t48 89 c7             \tmov    %rax,%rdi\n 462:\te8 00 00 00 00       \tcallq  467 <rl2_read_header+0x3dc>\n 467:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n 46b:\tc1 e0 02             \tshl    $0x2,%eax\n 46e:\t89 c7                \tmov    %eax,%edi\n 470:\te8 00 00 00 00       \tcallq  475 <rl2_read_header+0x3ea>\n 475:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n 47a:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n 47e:\tc1 e0 02             \tshl    $0x2,%eax\n 481:\t89 c7                \tmov    %eax,%edi\n 483:\te8 00 00 00 00       \tcallq  488 <rl2_read_header+0x3fd>\n 488:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n 48d:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n 491:\tc1 e0 02             \tshl    $0x2,%eax\n 494:\t89 c7                \tmov    %eax,%edi\n 496:\te8 00 00 00 00       \tcallq  49b <rl2_read_header+0x410>\n 49b:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n 4a0:\t48 83 7c 24 40 00    \tcmpq   $0x0,0x40(%rsp)\n 4a6:\t74 10                \tje     4b8 <rl2_read_header+0x42d>\n 4a8:\t48 83 7c 24 38 00    \tcmpq   $0x0,0x38(%rsp)\n 4ae:\t74 08                \tje     4b8 <rl2_read_header+0x42d>\n 4b0:\t48 83 7c 24 48 00    \tcmpq   $0x0,0x48(%rsp)\n 4b6:\t75 31                \tjne    4e9 <rl2_read_header+0x45e>\n 4b8:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n 4bd:\t48 89 c7             \tmov    %rax,%rdi\n 4c0:\te8 00 00 00 00       \tcallq  4c5 <rl2_read_header+0x43a>\n 4c5:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 4ca:\t48 89 c7             \tmov    %rax,%rdi\n 4cd:\te8 00 00 00 00       \tcallq  4d2 <rl2_read_header+0x447>\n 4d2:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 4d7:\t48 89 c7             \tmov    %rax,%rdi\n 4da:\te8 00 00 00 00       \tcallq  4df <rl2_read_header+0x454>\n 4df:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n 4e4:\te9 97 02 00 00       \tjmpq   780 <rl2_read_header+0x6f5>\n 4e9:\tc7 44 24 5c 00 00 00 \tmovl   $0x0,0x5c(%rsp)\n 4f0:\t00 \n 4f1:\teb 2b                \tjmp    51e <rl2_read_header+0x493>\n 4f3:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 4f8:\t48 89 c7             \tmov    %rax,%rdi\n 4fb:\te8 00 00 00 00       \tcallq  500 <rl2_read_header+0x475>\n 500:\t8b 54 24 5c          \tmov    0x5c(%rsp),%edx\n 504:\t48 63 d2             \tmovslq %edx,%rdx\n 507:\t48 8d 0c 95 00 00 00 \tlea    0x0(,%rdx,4),%rcx\n 50e:\t00 \n 50f:\t48 8b 54 24 40       \tmov    0x40(%rsp),%rdx\n 514:\t48 01 ca             \tadd    %rcx,%rdx\n 517:\t89 02                \tmov    %eax,(%rdx)\n 519:\t83 44 24 5c 01       \taddl   $0x1,0x5c(%rsp)\n 51e:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 522:\t39 44 24 28          \tcmp    %eax,0x28(%rsp)\n 526:\t77 cb                \tja     4f3 <rl2_read_header+0x468>\n 528:\tc7 44 24 5c 00 00 00 \tmovl   $0x0,0x5c(%rsp)\n 52f:\t00 \n 530:\teb 2b                \tjmp    55d <rl2_read_header+0x4d2>\n 532:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 536:\t48 98                \tcltq   \n 538:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 53f:\t00 \n 540:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 545:\t48 8d 1c 02          \tlea    (%rdx,%rax,1),%rbx\n 549:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 54e:\t48 89 c7             \tmov    %rax,%rdi\n 551:\te8 00 00 00 00       \tcallq  556 <rl2_read_header+0x4cb>\n 556:\t89 03                \tmov    %eax,(%rbx)\n 558:\t83 44 24 5c 01       \taddl   $0x1,0x5c(%rsp)\n 55d:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 561:\t39 44 24 28          \tcmp    %eax,0x28(%rsp)\n 565:\t77 cb                \tja     532 <rl2_read_header+0x4a7>\n 567:\tc7 44 24 5c 00 00 00 \tmovl   $0x0,0x5c(%rsp)\n 56e:\t00 \n 56f:\teb 2f                \tjmp    5a0 <rl2_read_header+0x515>\n 571:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 576:\t48 89 c7             \tmov    %rax,%rdi\n 579:\te8 00 00 00 00       \tcallq  57e <rl2_read_header+0x4f3>\n 57e:\t89 c1                \tmov    %eax,%ecx\n 580:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 584:\t48 98                \tcltq   \n 586:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 58d:\t00 \n 58e:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 593:\t48 01 c2             \tadd    %rax,%rdx\n 596:\t0f b7 c1             \tmovzwl %cx,%eax\n 599:\t89 02                \tmov    %eax,(%rdx)\n 59b:\t83 44 24 5c 01       \taddl   $0x1,0x5c(%rsp)\n 5a0:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 5a4:\t39 44 24 28          \tcmp    %eax,0x28(%rsp)\n 5a8:\t77 c7                \tja     571 <rl2_read_header+0x4e6>\n 5aa:\tc7 44 24 5c 00 00 00 \tmovl   $0x0,0x5c(%rsp)\n 5b1:\t00 \n 5b2:\te9 90 01 00 00       \tjmpq   747 <rl2_read_header+0x6bc>\n 5b7:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 5bb:\t48 98                \tcltq   \n 5bd:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 5c4:\t00 \n 5c5:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n 5ca:\t48 01 d0             \tadd    %rdx,%rax\n 5cd:\t8b 00                \tmov    (%rax),%eax\n 5cf:\t85 c0                \ttest   %eax,%eax\n 5d1:\t78 34                \tjs     607 <rl2_read_header+0x57c>\n 5d3:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 5d7:\t48 98                \tcltq   \n 5d9:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 5e0:\t00 \n 5e1:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 5e6:\t48 01 d0             \tadd    %rdx,%rax\n 5e9:\t8b 10                \tmov    (%rax),%edx\n 5eb:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 5ef:\t48 98                \tcltq   \n 5f1:\t48 8d 0c 85 00 00 00 \tlea    0x0(,%rax,4),%rcx\n 5f8:\t00 \n 5f9:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n 5fe:\t48 01 c8             \tadd    %rcx,%rax\n 601:\t8b 00                \tmov    (%rax),%eax\n 603:\t39 c2                \tcmp    %eax,%edx\n 605:\t7e 0d                \tjle    614 <rl2_read_header+0x589>\n 607:\tc7 44 24 58 ea ff ff \tmovl   $0xffffffea,0x58(%rsp)\n 60e:\tff \n 60f:\te9 41 01 00 00       \tjmpq   755 <rl2_read_header+0x6ca>\n 614:\t66 83 7c 24 24 00    \tcmpw   $0x0,0x24(%rsp)\n 61a:\t0f 84 93 00 00 00    \tje     6b3 <rl2_read_header+0x628>\n 620:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 624:\t48 98                \tcltq   \n 626:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 62d:\t00 \n 62e:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 633:\t48 01 d0             \tadd    %rdx,%rax\n 636:\t8b 00                \tmov    (%rax),%eax\n 638:\t85 c0                \ttest   %eax,%eax\n 63a:\t74 77                \tje     6b3 <rl2_read_header+0x628>\n 63c:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 640:\t48 98                \tcltq   \n 642:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 649:\t00 \n 64a:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 64f:\t48 01 d0             \tadd    %rdx,%rax\n 652:\t8b 08                \tmov    (%rax),%ecx\n 654:\t8b 54 24 6c          \tmov    0x6c(%rsp),%edx\n 658:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 65c:\t48 98                \tcltq   \n 65e:\t48 8d 34 85 00 00 00 \tlea    0x0(,%rax,4),%rsi\n 665:\t00 \n 666:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 66b:\t48 01 f0             \tadd    %rsi,%rax\n 66e:\t8b 00                \tmov    (%rax),%eax\n 670:\t89 c6                \tmov    %eax,%esi\n 672:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 677:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n 67b:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n 681:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 687:\t48 89 c7             \tmov    %rax,%rdi\n 68a:\te8 00 00 00 00       \tcallq  68f <rl2_read_header+0x604>\n 68f:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 693:\t48 98                \tcltq   \n 695:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 69c:\t00 \n 69d:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 6a2:\t48 01 d0             \tadd    %rdx,%rax\n 6a5:\t8b 00                \tmov    (%rax),%eax\n 6a7:\t0f b7 5c 24 20       \tmovzwl 0x20(%rsp),%ebx\n 6ac:\t99                   \tcltd   \n 6ad:\tf7 fb                \tidiv   %ebx\n 6af:\t01 44 24 6c          \tadd    %eax,0x6c(%rsp)\n 6b3:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 6b7:\t48 98                \tcltq   \n 6b9:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 6c0:\t00 \n 6c1:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n 6c6:\t48 01 d0             \tadd    %rdx,%rax\n 6c9:\t8b 10                \tmov    (%rax),%edx\n 6cb:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 6cf:\t48 98                \tcltq   \n 6d1:\t48 8d 0c 85 00 00 00 \tlea    0x0(,%rax,4),%rcx\n 6d8:\t00 \n 6d9:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 6de:\t48 01 c8             \tadd    %rcx,%rax\n 6e1:\t8b 00                \tmov    (%rax),%eax\n 6e3:\t89 d1                \tmov    %edx,%ecx\n 6e5:\t29 c1                \tsub    %eax,%ecx\n 6e7:\t8b 54 24 68          \tmov    0x68(%rsp),%edx\n 6eb:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 6ef:\t48 98                \tcltq   \n 6f1:\t48 8d 34 85 00 00 00 \tlea    0x0(,%rax,4),%rsi\n 6f8:\t00 \n 6f9:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 6fe:\t48 01 f0             \tadd    %rsi,%rax\n 701:\t8b 00                \tmov    (%rax),%eax\n 703:\t8b 74 24 5c          \tmov    0x5c(%rsp),%esi\n 707:\t48 63 f6             \tmovslq %esi,%rsi\n 70a:\t48 8d 3c b5 00 00 00 \tlea    0x0(,%rsi,4),%rdi\n 711:\t00 \n 712:\t48 8b 74 24 38       \tmov    0x38(%rsp),%rsi\n 717:\t48 01 fe             \tadd    %rdi,%rsi\n 71a:\t8b 36                \tmov    (%rsi),%esi\n 71c:\t01 f0                \tadd    %esi,%eax\n 71e:\t89 c6                \tmov    %eax,%esi\n 720:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 725:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 729:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n 72f:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 735:\t48 89 c7             \tmov    %rax,%rdi\n 738:\te8 00 00 00 00       \tcallq  73d <rl2_read_header+0x6b2>\n 73d:\t83 44 24 68 01       \taddl   $0x1,0x68(%rsp)\n 742:\t83 44 24 5c 01       \taddl   $0x1,0x5c(%rsp)\n 747:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 74b:\t39 44 24 28          \tcmp    %eax,0x28(%rsp)\n 74f:\t0f 87 62 fe ff ff    \tja     5b7 <rl2_read_header+0x52c>\n 755:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n 75a:\t48 89 c7             \tmov    %rax,%rdi\n 75d:\te8 00 00 00 00       \tcallq  762 <rl2_read_header+0x6d7>\n 762:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 767:\t48 89 c7             \tmov    %rax,%rdi\n 76a:\te8 00 00 00 00       \tcallq  76f <rl2_read_header+0x6e4>\n 76f:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 774:\t48 89 c7             \tmov    %rax,%rdi\n 777:\te8 00 00 00 00       \tcallq  77c <rl2_read_header+0x6f1>\n 77c:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n 780:\t48 83 c4 70          \tadd    $0x70,%rsp\n 784:\t5b                   \tpop    %rbx\n 785:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rl2_read_header(_QWORD *<span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 v3;\n  __int64 v4;\n  unsigned __int16 <span class=\"supfact\">v5</span>;\n  unsigned __int16 <span class=\"supfact\">v6</span>;\n  unsigned __int16 <span class=\"supfact\">v7</span>;\n  __int16 <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  unsigned int <span class=\"supfact\">v16</span>;\n  unsigned int i;\n  unsigned int j;\n  unsigned int k;\n  signed int l;\n  unsigned int <span class=\"supfact\">v21</span>;\n  unsigned int <span class=\"supfact\">v22</span>;\n  unsigned int <span class=\"supfact\">v23</span>;\n  unsigned int <span class=\"supfact\">v24</span>;\n  <span class=\"supfact\">v15</span> = <span class=\"supfact\">a1</span>[Number];\n  <span class=\"supfact\">v24</span> = Number;\n  <span class=\"supfact\">v23</span> = Number;\n  <span class=\"supfact\">v22</span> = Number;\n  <span class=\"supfact\">v21</span> = Number;\n  <span class=\"supfact\">v16</span> = Number;\n  url_fskip(<span class=\"supfact\">v15</span>, Number L);\n  <span class=\"supfact\">v11</span> = (unsigned int)get_le32(<span class=\"supfact\">v15</span>);\n  <span class=\"supfact\">v10</span> = get_be32(<span class=\"supfact\">v15</span>);\n  get_be32(<span class=\"supfact\">v15</span>);\n  <span class=\"supfact\">v9</span> = get_le32(<span class=\"supfact\">v15</span>);\n  if ((unsigned int)<span class=\"supfact\">v11</span> > Number || <span class=\"supfact\">v9</span> > Number)\n    return Number L;\n  get_le16(<span class=\"supfact\">v15</span>);\n  <span class=\"supfact\">v8</span> = get_le16(<span class=\"supfact\">v15</span>);\n  <span class=\"supfact\">v7</span> = get_le16(<span class=\"supfact\">v15</span>);\n  <span class=\"supfact\">v6</span> = get_le16(<span class=\"supfact\">v15</span>);\n  <span class=\"supfact\">v5</span> = get_le16(<span class=\"supfact\">v15</span>);\n  v3 = av_new_stream(<span class=\"supfact\">a1</span>, Number L);\n  if (!v3)\n    return Number L;\n  *(_DWORD *)(*(_QWORD *)(v3 + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(v3 + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(v3 + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(v3 + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(v3 + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(v3 + Number) + Number L) = Number;\n  if (<span class=\"supfact\">v10</span> == Number && (_DWORD)<span class=\"supfact\">v11</span>)\n    *(_DWORD *)(*(_QWORD *)(v3 + Number) + Number L) += <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)(v3 + Number);\n  *(_QWORD *)(<span class=\"supfact\">v2</span> + Number) = av_mallocz(\n      (unsigned int)(*(_DWORD *)(<span class=\"supfact\">v2</span> + Number) + Number));\n  if (!*(_QWORD *)(*(_QWORD *)(v3 + Number) + Number L))\n    return Number L;\n  if ((unsigned int)get_buffer(\n          <span class=\"supfact\">v15</span>, *(_QWORD *)(*(_QWORD *)(v3 + Number) + Number L),\n          *(unsigned int *)(*(_QWORD *)(v3 + Number) + Number L)) !=\n      *(_DWORD *)(*(_QWORD *)(v3 + Number) + Number L))\n    return Number L;\n  if (<span class=\"supfact\">v8</span>) {\n    <span class=\"supfact\">v21</span> = <span class=\"supfact\">v5</span>;\n    <span class=\"supfact\">v22</span> = <span class=\"supfact\">v7</span>;\n    v4 = av_new_stream(<span class=\"supfact\">a1</span>, Number L);\n    if (!v4)\n      return Number L;\n    *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) = Number;\n    *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) = Number;\n    *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) = Number;\n    *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) = <span class=\"supfact\">v6</span>;\n    *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) = Number;\n    *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) = <span class=\"supfact\">v7</span>;\n    *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) =\n        *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) *\n        *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) *\n        *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L);\n    *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) =\n        *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) *\n        *(_DWORD *)(*(_QWORD *)(v4 + Number) + Number L) / Number;\n    av_set_pts_info(v4, Number L, Number L, <span class=\"supfact\">v7</span>);\n  }\n  av_set_pts_info(<span class=\"supfact\">a1</span>[Number], Number L, <span class=\"supfact\">v21</span>,\n                  <span class=\"supfact\">v22</span>);\n  <span class=\"supfact\">v13</span> = av_malloc(Number * <span class=\"supfact\">v9</span>);\n  <span class=\"supfact\">v12</span> = av_malloc(Number * <span class=\"supfact\">v9</span>);\n  <span class=\"supfact\">v14</span> = av_malloc(Number * <span class=\"supfact\">v9</span>);\n  if (<span class=\"supfact\">v13</span> && <span class=\"supfact\">v12</span> && <span class=\"supfact\">v14</span>) {\n    for (i = Number; <span class=\"supfact\">v9</span> > i; ++i)\n      *(_DWORD *)(Number L * (int)i + <span class=\"supfact\">v13</span>) =\n          get_le32(<span class=\"supfact\">v15</span>);\n    for (j = Number; <span class=\"supfact\">v9</span> > j; ++j)\n      *(_DWORD *)(Number L * (int)j + <span class=\"supfact\">v14</span>) =\n          get_le32(<span class=\"supfact\">v15</span>);\n    for (k = Number; <span class=\"supfact\">v9</span> > k; ++k)\n      *(_DWORD *)(<span class=\"supfact\">v12</span> + Number L * (int)k) =\n          (unsigned __int16)get_le32(<span class=\"supfact\">v15</span>);\n    for (l = Number; <span class=\"supfact\">v9</span> > l; ++l) {\n      if (*(int *)(Number L * l + <span class=\"supfact\">v13</span>) < Number ||\n          *(_DWORD *)(Number L * l + <span class=\"supfact\">v12</span>) >\n              *(_DWORD *)(Number L * l + <span class=\"supfact\">v13</span>)) {\n        <span class=\"supfact\">v16</span> = Number;\n        break;\n      }\n      if (<span class=\"supfact\">v8</span>) {\n        if (*(_DWORD *)(Number L * l + <span class=\"supfact\">v12</span>)) {\n          av_add_index_entry(\n              <span class=\"supfact\">a1</span>[Number],\n              *(unsigned int *)(Number L * l + <span class=\"supfact\">v14</span>),\n              <span class=\"supfact\">v24</span>,\n              *(unsigned int *)(Number L * l + <span class=\"supfact\">v12</span>), Number L,\n              Number L);\n          <span class=\"supfact\">v24</span> +=\n              *(_DWORD *)(Number L * l + <span class=\"supfact\">v12</span>) /\n              (int)<span class=\"supfact\">v6</span>;\n        }\n      }\n      av_add_index_entry(\n          <span class=\"supfact\">a1</span>[Number],\n          (unsigned int)(*(_DWORD *)(Number L * l + <span class=\"supfact\">v12</span>) +\n                         *(_DWORD *)(Number L * l + <span class=\"supfact\">v14</span>)),\n          <span class=\"supfact\">v23</span>++,\n          (unsigned int)(*(_DWORD *)(Number L * l + <span class=\"supfact\">v13</span>) -\n                         *(_DWORD *)(Number L * l + <span class=\"supfact\">v12</span>)),\n          Number L, Number L);\n    }\n    av_free(<span class=\"supfact\">v13</span>);\n    av_free(<span class=\"supfact\">v12</span>);\n    av_free(<span class=\"supfact\">v14</span>);\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">v16</span>;\n  } else {\n    av_free(<span class=\"supfact\">v13</span>);\n    av_free(<span class=\"supfact\">v12</span>);\n    av_free(<span class=\"supfact\">v14</span>);\n    <span class=\"supfact\">result</span> = Number L;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl rl2_read_header(AVFormatContext_0 *<span class=\"supfact\">s</span>,\n                            AVFormatParameters_0 *ap) {\n  int <span class=\"supfact\">result</span>;\n  AVCodecContext_0 *<span class=\"supfact\">v3</span>;\n  AVStream_0 *st;\n  AVStream_0 *sta;\n  unsigned __int16 <span class=\"supfact\">def_sound_size</span>;\n  unsigned __int16 <span class=\"supfact\">channels</span>;\n  unsigned __int16 <span class=\"supfact\">rate</span>;\n  unsigned __int16 <span class=\"supfact\">sound_rate</span>;\n  unsigned int <span class=\"supfact\">frame_count</span>;\n  unsigned int <span class=\"supfact\">signature</span>;\n  __int64 <span class=\"supfact\">back_size</span>;\n  int *<span class=\"supfact\">audio_size</span>;\n  int *<span class=\"supfact\">chunk_size</span>;\n  unsigned int *<span class=\"supfact\">chunk_offset</span>;\n  ByteIOContext *<span class=\"supfact\">pb</span>;\n  int <span class=\"supfact\">ret</span>;\n  int i;\n  int ia;\n  int ib;\n  int ic;\n  unsigned int <span class=\"supfact\">pts_num</span>;\n  unsigned int <span class=\"supfact\">pts_den</span>;\n  unsigned int <span class=\"supfact\">video_frame_counter</span>;\n  unsigned int <span class=\"supfact\">audio_frame_counter</span>;\n  <span class=\"supfact\">pb</span> = <span class=\"supfact\">s</span>-><span class=\"supfact\">pb</span>;\n  <span class=\"supfact\">audio_frame_counter</span> = Number;\n  <span class=\"supfact\">video_frame_counter</span> = Number;\n  <span class=\"supfact\">pts_den</span> = Number;\n  <span class=\"supfact\">pts_num</span> = Number;\n  <span class=\"supfact\">ret</span> = Number;\n  url_fskip(<span class=\"supfact\">pb</span>, Number L);\n  <span class=\"supfact\">back_size</span> = (unsigned int)get_le32(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">signature</span> = get_be32(<span class=\"supfact\">pb</span>);\n  get_be32(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">frame_count</span> = get_le32(<span class=\"supfact\">pb</span>);\n  if ((unsigned int)<span class=\"supfact\">back_size</span> > Number ||\n      <span class=\"supfact\">frame_count</span> > Number)\n    return Number;\n  get_le16(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">sound_rate</span> = get_le16(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">rate</span> = get_le16(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">channels</span> = get_le16(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">def_sound_size</span> = get_le16(<span class=\"supfact\">pb</span>);\n  st = (AVStream_0 *)av_new_stream(<span class=\"supfact\">s</span>, Number L);\n  if (!st)\n    return Number;\n  st->codec->codec_type = AVMEDIA_TYPE_VIDEO;\n  st->codec->codec_id = CODEC_ID_RL2;\n  st->codec->codec_tag = Number;\n  st->codec->width = Number;\n  st->codec->height = Number;\n  st->codec->extradata_size = Number;\n  if (<span class=\"supfact\">signature</span> == Number && (_DWORD)<span class=\"supfact\">back_size</span>)\n    st->codec->extradata_size += <span class=\"supfact\">back_size</span>;\n  <span class=\"supfact\">v3</span> = st->codec;\n  <span class=\"supfact\">v3</span>->extradata = (uint8_t *)av_mallocz(\n      (unsigned int)(<span class=\"supfact\">v3</span>->extradata_size + Number));\n  if (!st->codec->extradata)\n    return Number;\n  if ((unsigned int)get_buffer(<span class=\"supfact\">pb</span>, st->codec->extradata,\n                               (unsigned int)st->codec->extradata_size) !=\n      st->codec->extradata_size)\n    return Number;\n  if (<span class=\"supfact\">sound_rate</span>) {\n    <span class=\"supfact\">pts_num</span> = <span class=\"supfact\">def_sound_size</span>;\n    <span class=\"supfact\">pts_den</span> = <span class=\"supfact\">rate</span>;\n    sta = (AVStream_0 *)av_new_stream(<span class=\"supfact\">s</span>, Number L);\n    if (!sta)\n      return Number;\n    sta->codec->codec_type = AVMEDIA_TYPE_AUDIO;\n    sta->codec->codec_id = CODEC_ID_PCM_U8;\n    sta->codec->codec_tag = Number;\n    sta->codec-><span class=\"supfact\">channels</span> = <span class=\"supfact\">channels</span>;\n    sta->codec->bits_per_coded_sample = Number;\n    sta->codec->sample_rate = <span class=\"supfact\">rate</span>;\n    sta->codec->bit_rate = sta->codec->sample_rate *\n                           sta->codec-><span class=\"supfact\">channels</span> *\n                           sta->codec->bits_per_coded_sample;\n    sta->codec->block_align = sta->codec->bits_per_coded_sample *\n                              sta->codec-><span class=\"supfact\">channels</span> / Number;\n    av_set_pts_info(sta, Number L, Number L, <span class=\"supfact\">rate</span>);\n  }\n  av_set_pts_info(<span class=\"supfact\">s</span>->streams[Number], Number L,\n                  <span class=\"supfact\">pts_num</span>, <span class=\"supfact\">pts_den</span>);\n  <span class=\"supfact\">chunk_size</span> =\n      (int *)av_malloc(Number * <span class=\"supfact\">frame_count</span>);\n  <span class=\"supfact\">audio_size</span> =\n      (int *)av_malloc(Number * <span class=\"supfact\">frame_count</span>);\n  <span class=\"supfact\">chunk_offset</span> =\n      (unsigned int *)av_malloc(Number * <span class=\"supfact\">frame_count</span>);\n  if (<span class=\"supfact\">chunk_size</span> && <span class=\"supfact\">audio_size</span> &&\n      <span class=\"supfact\">chunk_offset</span>) {\n    for (i = Number; <span class=\"supfact\">frame_count</span> > i; ++i)\n      <span class=\"supfact\">chunk_size</span>[i] = get_le32(<span class=\"supfact\">pb</span>);\n    for (ia = Number; <span class=\"supfact\">frame_count</span> > ia; ++ia)\n      <span class=\"supfact\">chunk_offset</span>[ia] = get_le32(<span class=\"supfact\">pb</span>);\n    for (ib = Number; <span class=\"supfact\">frame_count</span> > ib; ++ib)\n      <span class=\"supfact\">audio_size</span>[ib] =\n          (unsigned __int16)get_le32(<span class=\"supfact\">pb</span>);\n    for (ic = Number; <span class=\"supfact\">frame_count</span> > ic; ++ic) {\n      if (<span class=\"supfact\">chunk_size</span>[ic] < Number ||\n          <span class=\"supfact\">audio_size</span>[ic] > <span class=\"supfact\">chunk_size</span>[ic]) {\n        <span class=\"supfact\">ret</span> = Number;\n        break;\n      }\n      if (<span class=\"supfact\">sound_rate</span>) {\n        if (<span class=\"supfact\">audio_size</span>[ic]) {\n          av_add_index_entry(<span class=\"supfact\">s</span>->streams[Number],\n                             <span class=\"supfact\">chunk_offset</span>[ic],\n                             <span class=\"supfact\">audio_frame_counter</span>,\n                             (unsigned int)<span class=\"supfact\">audio_size</span>[ic],\n                             Number L, Number L);\n          <span class=\"supfact\">audio_frame_counter</span> +=\n              <span class=\"supfact\">audio_size</span>[ic] / <span class=\"supfact\">channels</span>;\n        }\n      }\n      av_add_index_entry(<span class=\"supfact\">s</span>->streams[Number],\n                         <span class=\"supfact\">audio_size</span>[ic] +\n                             <span class=\"supfact\">chunk_offset</span>[ic],\n                         <span class=\"supfact\">video_frame_counter</span>++,\n                         (unsigned int)(<span class=\"supfact\">chunk_size</span>[ic] -\n                                        <span class=\"supfact\">audio_size</span>[ic]),\n                         Number L, Number L);\n    }\n    av_free(<span class=\"supfact\">chunk_size</span>);\n    av_free(<span class=\"supfact\">audio_size</span>);\n    av_free(<span class=\"supfact\">chunk_offset</span>);\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">ret</span>;\n  } else {\n    av_free(<span class=\"supfact\">chunk_size</span>);\n    av_free(<span class=\"supfact\">audio_size</span>);\n    av_free(<span class=\"supfact\">chunk_offset</span>);\n    <span class=\"supfact\">result</span> = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "AVFormatContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "AVFormatContext_0 *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "v2", "type": "AVCodecContext_0 *", "pred_name": "v3", "ref_name": "v3", "ref_type": "AVCodecContext_0 *"}, {"name": "v5", "type": "unsigned __int16", "pred_name": "def_sound_size", "ref_name": "def_sound_size", "ref_type": "unsigned __int16"}, {"name": "v6", "type": "unsigned __int16", "pred_name": "channels", "ref_name": "channels", "ref_type": "unsigned __int16"}, {"name": "v7", "type": "unsigned __int16", "pred_name": "rate", "ref_name": "rate", "ref_type": "unsigned __int16"}, {"name": "v8", "type": "unsigned __int16", "pred_name": "sound_rate", "ref_name": "sound_rate", "ref_type": "unsigned __int16"}, {"name": "v9", "type": "unsigned int", "pred_name": "frame_count", "ref_name": "frame_count", "ref_type": "unsigned int"}, {"name": "v10", "type": "unsigned int", "pred_name": "signature", "ref_name": "signature", "ref_type": "unsigned int"}, {"name": "v11", "type": "__int64", "pred_name": "back_size", "ref_name": "back_size", "ref_type": "__int64"}, {"name": "v12", "type": "int *", "pred_name": "audio_size", "ref_name": "audio_size", "ref_type": "int *"}, {"name": "v13", "type": "int *", "pred_name": "chunk_size", "ref_name": "chunk_size", "ref_type": "int *"}, {"name": "v14", "type": "unsigned int *", "pred_name": "chunk_offset", "ref_name": "chunk_offset", "ref_type": "unsigned int *"}, {"name": "v15", "type": "ByteIOContext *", "pred_name": "pb", "ref_name": "pb", "ref_type": "ByteIOContext *"}, {"name": "v16", "type": "int", "pred_name": "ret", "ref_name": "ret", "ref_type": "int"}, {"name": "v21", "type": "unsigned int", "pred_name": "pts_num", "ref_name": "pts_num", "ref_type": "unsigned int"}, {"name": "v22", "type": "unsigned int", "pred_name": "pts_den", "ref_name": "pts_den", "ref_type": "unsigned int"}, {"name": "v23", "type": "unsigned int", "pred_name": "video_frame_counter", "ref_name": "video_frame_counter", "ref_type": "unsigned int"}, {"name": "v24", "type": "unsigned int", "pred_name": "audio_frame_counter", "ref_name": "audio_frame_counter", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "jtanx", "repo_name": "libclipboard", "path": "jtanx/libclipboard/a5bb405315a8c227b400ae53e138e8a073501fc810add8d462a26e6d2a667d6c", "path_in_repo": "jtanx/libclipboard/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "0000000000000000 <_ZN7testing8internal10linked_ptrIKNS_16MatcherInterfaceIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE6departEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  10:\t48 83 c0 08          \tadd    $0x8,%rax\n  14:\t48 89 c7             \tmov    %rax,%rdi\n  17:\te8 00 00 00 00       \tcallq  1c <_ZN7testing8internal10linked_ptrIKNS_16MatcherInterfaceIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE6departEv+0x1c>\n  1c:\t84 c0                \ttest   %al,%al\n  1e:\t74 1b                \tje     3b <_ZN7testing8internal10linked_ptrIKNS_16MatcherInterfaceIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE6departEv+0x3b>\n  20:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  24:\t48 8b 00             \tmov    (%rax),%rax\n  27:\t48 85 c0             \ttest   %rax,%rax\n  2a:\t74 0f                \tje     3b <_ZN7testing8internal10linked_ptrIKNS_16MatcherInterfaceIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE6departEv+0x3b>\n  2c:\t48 8b 10             \tmov    (%rax),%rdx\n  2f:\t48 83 c2 08          \tadd    $0x8,%rdx\n  33:\t48 8b 12             \tmov    (%rdx),%rdx\n  36:\t48 89 c7             \tmov    %rax,%rdi\n  39:\tff d2                \tcallq  *%rdx\n  3b:\t90                   \tnop\n  3c:\tc9                   \tleaveq \n  3d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall testing\n    internal linked_ptr<testing MatcherInterface<std __cxx11 basic_string<\n        char, std char_traits<char>, std allocator<char>> const &> const>\n    depart(__int64 *<span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = testing internal linked_ptr_internal depart(\n      (testing internal linked_ptr_internal *)(<span class=\"supfact\">a1</span> + Number));\n  if ((_BYTE)<span class=\"supfact\">result</span>) {\n    <span class=\"supfact\">result</span> = *<span class=\"supfact\">a1</span>;\n    if (*<span class=\"supfact\">a1</span>)\n      <span class=\"supfact\">result</span> = (*(__int64(__fastcall **)(__int64))(\n          *(_QWORD *)<span class=\"supfact\">result</span> + Number L))(*<span class=\"supfact\">a1</span>);\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl testing\n    internal linked_ptr<testing MatcherInterface<std __cxx11 basic_string<\n        char, std char_traits<char>, std allocator<char>> const &> const>\n    depart(testing internal linked_ptr<\n           const testing MatcherInterface<const std __cxx11 basic_string<\n               char, std char_traits<char>, std allocator<char>> &>>\n               *const <span class=\"supfact\">this</span>) {\n  if (testing internal linked_ptr_internal depart(\n          &<span class=\"supfact\">this</span>->link_)) {\n    if (<span class=\"supfact\">this</span>->value_)\n      (*((void(__fastcall **)(\n             const testing MatcherInterface<const std __cxx11 basic_string<\n                 char, std char_traits<char>, std allocator<char>> &> *))\n             <span class=\"supfact\">this</span>->value_->_vptr_MatcherDescriberInterface +\n         Number))(<span class=\"supfact\">this</span>->value_);\n  }\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "testing::internal::linked_ptr<const testing::MatcherInterface<const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >&> > *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "rcounts", "repo_name": "cs362s15", "path": "rcounts/cs362s15/d7a8b27ed5ed8e96925d74b204c5acf00a8ebd7d90729bd60967dd80daa58e40", "path_in_repo": "rcounts/cs362s15/projects/tomlinja/dominion/verage", "objdump": "0000000000000000 <Random>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 c7 45 f8 c8 ad 00 \tmovq   $0xadc8,-0x8(%rbp)\n   b:\t00 \n   c:\t48 c7 45 f0 47 0d 00 \tmovq   $0xd47,-0x10(%rbp)\n  13:\t00 \n  14:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1a <Random+0x1a>\n  1a:\t48 98                \tcltq   \n  1c:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  23:\t00 \n  24:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 2b <Random+0x2b>\n  2b:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n  2f:\t48 99                \tcqto   \n  31:\t48 f7 7d f8          \tidivq  -0x8(%rbp)\n  35:\t48 89 d0             \tmov    %rdx,%rax\n  38:\t48 69 c8 8f bc 00 00 \timul   $0xbc8f,%rax,%rcx\n  3f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 45 <Random+0x45>\n  45:\t48 98                \tcltq   \n  47:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4e:\t00 \n  4f:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 56 <Random+0x56>\n  56:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n  5a:\t48 99                \tcqto   \n  5c:\t48 f7 7d f8          \tidivq  -0x8(%rbp)\n  60:\t48 0f af 45 f0       \timul   -0x10(%rbp),%rax\n  65:\t48 29 c1             \tsub    %rax,%rcx\n  68:\t48 89 c8             \tmov    %rcx,%rax\n  6b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  6f:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  74:\t7e 21                \tjle    97 <Random+0x97>\n  76:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7c <Random+0x7c>\n  7c:\t48 98                \tcltq   \n  7e:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  85:\t00 \n  86:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 8d <Random+0x8d>\n  8d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  91:\t48 89 04 11          \tmov    %rax,(%rcx,%rdx,1)\n  95:\teb 26                \tjmp    bd <Random+0xbd>\n  97:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 9d <Random+0x9d>\n  9d:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  a1:\t48 8d 8a ff ff ff 7f \tlea    0x7fffffff(%rdx),%rcx\n  a8:\t48 98                \tcltq   \n  aa:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  b1:\t00 \n  b2:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # b9 <Random+0xb9>\n  b9:\t48 89 0c 02          \tmov    %rcx,(%rdx,%rax,1)\n  bd:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # c3 <Random+0xc3>\n  c3:\t48 98                \tcltq   \n  c5:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  cc:\t00 \n  cd:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # d4 <Random+0xd4>\n  d4:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n  d8:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  dd:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # e5 <Random+0xe5>\n  e4:\t00 \n  e5:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n  e9:\t5d                   \tpop    %rbp\n  ea:\tc3                   \tretq   ", "code_s": "double Random() {\n  __int64 <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> =\n      Number * (seed[stream] % Number L) - Number * (seed[stream] / Number L);\n  if (<span class=\"supfact\">v1</span> <= Number)\n    seed[stream] = <span class=\"supfact\">v1</span> + Number;\n  else\n    seed[stream] = <span class=\"supfact\">v1</span>;\n  return (double)(int)seed[stream] / Number;\n}", "code_t": "double __cdecl Random() {\n  __int64 <span class=\"supfact\">t</span>;\n  <span class=\"supfact\">t</span> =\n      Number * (seed[stream] % Number) - Number * (seed[stream] / Number);\n  if (<span class=\"supfact\">t</span> <= Number)\n    seed[stream] = <span class=\"supfact\">t</span> + Number;\n  else\n    seed[stream] = <span class=\"supfact\">t</span>;\n  return (double)(int)seed[stream] / Number;\n}", "var": [{"name": "v1", "type": "__int64", "pred_name": "t", "ref_name": "t", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/ca1dd6dbc387e57387fa23081b00d4601391b3ff1a58576aaafcd095443a15f4", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Bootstrap.cmk/cmListFileCache.o", "objdump": "0000000000000000 <_ZNK9__gnu_cxx17__normal_iteratorIP18cmListFileFunctionSt6vectorIS1_SaIS1_EEE4baseEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   c:\t5d                   \tpop    %rbp\n   d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall __gnu_cxx\n    __normal_iterator<cmListFileFunction *, std vector<cmListFileFunction>>\n    base(__int64 <span class=\"supfact\">a1</span>) {\n  return <span class=\"supfact\">a1</span>;\n}", "code_t": "__int64 __fastcall __gnu_cxx\n    __normal_iterator<cmListFileFunction *, std vector<cmListFileFunction>>\n    base(__int64 <span class=\"supfact\">a1</span>) {\n  return <span class=\"supfact\">a1</span>;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "gmpetrov", "repo_name": "rush_2048", "path": "gmpetrov/rush_2048/26edbba50285d77cb5d8ef209641ed63b6da30c1a2829d027fc697c4e501b2c3", "path_in_repo": "gmpetrov/rush_2048//srcs/.obj/print_8.o", "objdump": "0000000000000000 <print_8>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n   f:\t89 55 f0             \tmov    %edx,-0x10(%rbp)\n  12:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  16:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n  1a:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  1d:\t48 63 d2             \tmovslq %edx,%rdx\n  20:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  24:\t48 01 d0             \tadd    %rdx,%rax\n  27:\t48 8b 00             \tmov    (%rax),%rax\n  2a:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  2d:\t48 63 d2             \tmovslq %edx,%rdx\n  30:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  34:\t48 01 d0             \tadd    %rdx,%rax\n  37:\t48 8b 00             \tmov    (%rax),%rax\n  3a:\tba 00 00 00 00       \tmov    $0x0,%edx\n  3f:\tbe 00 04 00 00       \tmov    $0x400,%esi\n  44:\t48 89 c7             \tmov    %rax,%rdi\n  47:\te8 00 00 00 00       \tcallq  4c <print_8+0x4c>\n  4c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  50:\t8b 40 08             \tmov    0x8(%rax),%eax\n  53:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  57:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n  5a:\t99                   \tcltd   \n  5b:\tf7 f9                \tidiv   %ecx\n  5d:\t89 c2                \tmov    %eax,%edx\n  5f:\tc1 ea 1f             \tshr    $0x1f,%edx\n  62:\t01 d0                \tadd    %edx,%eax\n  64:\td1 f8                \tsar    %eax\n  66:\t8d 78 fb             \tlea    -0x5(%rax),%edi\n  69:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  6d:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  70:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  74:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n  77:\t99                   \tcltd   \n  78:\tf7 f9                \tidiv   %ecx\n  7a:\t89 c2                \tmov    %eax,%edx\n  7c:\tc1 ea 1f             \tshr    $0x1f,%edx\n  7f:\t01 d0                \tadd    %edx,%eax\n  81:\td1 f8                \tsar    %eax\n  83:\t8d 70 fb             \tlea    -0x5(%rax),%esi\n  86:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  8a:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n  8e:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  91:\t48 63 d2             \tmovslq %edx,%rdx\n  94:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  98:\t48 01 d0             \tadd    %rdx,%rax\n  9b:\t48 8b 00             \tmov    (%rax),%rax\n  9e:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  a1:\t48 63 d2             \tmovslq %edx,%rdx\n  a4:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  a8:\t48 01 d0             \tadd    %rdx,%rax\n  ab:\t48 8b 00             \tmov    (%rax),%rax\n  ae:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  b3:\t89 fa                \tmov    %edi,%edx\n  b5:\t48 89 c7             \tmov    %rax,%rdi\n  b8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  bd:\te8 00 00 00 00       \tcallq  c2 <print_8+0xc2>\n  c2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  c6:\t8b 40 08             \tmov    0x8(%rax),%eax\n  c9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  cd:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n  d0:\t99                   \tcltd   \n  d1:\tf7 f9                \tidiv   %ecx\n  d3:\t89 c2                \tmov    %eax,%edx\n  d5:\tc1 ea 1f             \tshr    $0x1f,%edx\n  d8:\t01 d0                \tadd    %edx,%eax\n  da:\td1 f8                \tsar    %eax\n  dc:\t8d 78 fb             \tlea    -0x5(%rax),%edi\n  df:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  e3:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  e6:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  ea:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n  ed:\t99                   \tcltd   \n  ee:\tf7 f9                \tidiv   %ecx\n  f0:\t89 c2                \tmov    %eax,%edx\n  f2:\tc1 ea 1f             \tshr    $0x1f,%edx\n  f5:\t01 d0                \tadd    %edx,%eax\n  f7:\td1 f8                \tsar    %eax\n  f9:\t8d 70 fc             \tlea    -0x4(%rax),%esi\n  fc:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 100:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n 104:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 107:\t48 63 d2             \tmovslq %edx,%rdx\n 10a:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 10e:\t48 01 d0             \tadd    %rdx,%rax\n 111:\t48 8b 00             \tmov    (%rax),%rax\n 114:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 117:\t48 63 d2             \tmovslq %edx,%rdx\n 11a:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 11e:\t48 01 d0             \tadd    %rdx,%rax\n 121:\t48 8b 00             \tmov    (%rax),%rax\n 124:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 129:\t89 fa                \tmov    %edi,%edx\n 12b:\t48 89 c7             \tmov    %rax,%rdi\n 12e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 133:\te8 00 00 00 00       \tcallq  138 <print_8+0x138>\n 138:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 13c:\t8b 40 08             \tmov    0x8(%rax),%eax\n 13f:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 143:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n 146:\t99                   \tcltd   \n 147:\tf7 f9                \tidiv   %ecx\n 149:\t89 c2                \tmov    %eax,%edx\n 14b:\tc1 ea 1f             \tshr    $0x1f,%edx\n 14e:\t01 d0                \tadd    %edx,%eax\n 150:\td1 f8                \tsar    %eax\n 152:\t8d 78 fb             \tlea    -0x5(%rax),%edi\n 155:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 159:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 15c:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 160:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n 163:\t99                   \tcltd   \n 164:\tf7 f9                \tidiv   %ecx\n 166:\t89 c2                \tmov    %eax,%edx\n 168:\tc1 ea 1f             \tshr    $0x1f,%edx\n 16b:\t01 d0                \tadd    %edx,%eax\n 16d:\td1 f8                \tsar    %eax\n 16f:\t8d 70 fd             \tlea    -0x3(%rax),%esi\n 172:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 176:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n 17a:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 17d:\t48 63 d2             \tmovslq %edx,%rdx\n 180:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 184:\t48 01 d0             \tadd    %rdx,%rax\n 187:\t48 8b 00             \tmov    (%rax),%rax\n 18a:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 18d:\t48 63 d2             \tmovslq %edx,%rdx\n 190:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 194:\t48 01 d0             \tadd    %rdx,%rax\n 197:\t48 8b 00             \tmov    (%rax),%rax\n 19a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 19f:\t89 fa                \tmov    %edi,%edx\n 1a1:\t48 89 c7             \tmov    %rax,%rdi\n 1a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1a9:\te8 00 00 00 00       \tcallq  1ae <print_8+0x1ae>\n 1ae:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1b2:\t8b 40 08             \tmov    0x8(%rax),%eax\n 1b5:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 1b9:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n 1bc:\t99                   \tcltd   \n 1bd:\tf7 f9                \tidiv   %ecx\n 1bf:\t89 c2                \tmov    %eax,%edx\n 1c1:\tc1 ea 1f             \tshr    $0x1f,%edx\n 1c4:\t01 d0                \tadd    %edx,%eax\n 1c6:\td1 f8                \tsar    %eax\n 1c8:\t8d 78 fb             \tlea    -0x5(%rax),%edi\n 1cb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1cf:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 1d2:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 1d6:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n 1d9:\t99                   \tcltd   \n 1da:\tf7 f9                \tidiv   %ecx\n 1dc:\t89 c2                \tmov    %eax,%edx\n 1de:\tc1 ea 1f             \tshr    $0x1f,%edx\n 1e1:\t01 d0                \tadd    %edx,%eax\n 1e3:\td1 f8                \tsar    %eax\n 1e5:\t8d 70 fe             \tlea    -0x2(%rax),%esi\n 1e8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1ec:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n 1f0:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 1f3:\t48 63 d2             \tmovslq %edx,%rdx\n 1f6:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 1fa:\t48 01 d0             \tadd    %rdx,%rax\n 1fd:\t48 8b 00             \tmov    (%rax),%rax\n 200:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 203:\t48 63 d2             \tmovslq %edx,%rdx\n 206:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 20a:\t48 01 d0             \tadd    %rdx,%rax\n 20d:\t48 8b 00             \tmov    (%rax),%rax\n 210:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 215:\t89 fa                \tmov    %edi,%edx\n 217:\t48 89 c7             \tmov    %rax,%rdi\n 21a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 21f:\te8 00 00 00 00       \tcallq  224 <print_8+0x224>\n 224:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 228:\t8b 40 08             \tmov    0x8(%rax),%eax\n 22b:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 22f:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n 232:\t99                   \tcltd   \n 233:\tf7 f9                \tidiv   %ecx\n 235:\t89 c2                \tmov    %eax,%edx\n 237:\tc1 ea 1f             \tshr    $0x1f,%edx\n 23a:\t01 d0                \tadd    %edx,%eax\n 23c:\td1 f8                \tsar    %eax\n 23e:\t8d 78 fb             \tlea    -0x5(%rax),%edi\n 241:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 245:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 248:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 24c:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n 24f:\t99                   \tcltd   \n 250:\tf7 f9                \tidiv   %ecx\n 252:\t89 c2                \tmov    %eax,%edx\n 254:\tc1 ea 1f             \tshr    $0x1f,%edx\n 257:\t01 d0                \tadd    %edx,%eax\n 259:\td1 f8                \tsar    %eax\n 25b:\t8d 70 ff             \tlea    -0x1(%rax),%esi\n 25e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 262:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n 266:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 269:\t48 63 d2             \tmovslq %edx,%rdx\n 26c:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 270:\t48 01 d0             \tadd    %rdx,%rax\n 273:\t48 8b 00             \tmov    (%rax),%rax\n 276:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 279:\t48 63 d2             \tmovslq %edx,%rdx\n 27c:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 280:\t48 01 d0             \tadd    %rdx,%rax\n 283:\t48 8b 00             \tmov    (%rax),%rax\n 286:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 28b:\t89 fa                \tmov    %edi,%edx\n 28d:\t48 89 c7             \tmov    %rax,%rdi\n 290:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 295:\te8 00 00 00 00       \tcallq  29a <print_8+0x29a>\n 29a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 29e:\t8b 40 08             \tmov    0x8(%rax),%eax\n 2a1:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 2a5:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n 2a8:\t99                   \tcltd   \n 2a9:\tf7 f9                \tidiv   %ecx\n 2ab:\t89 c2                \tmov    %eax,%edx\n 2ad:\tc1 ea 1f             \tshr    $0x1f,%edx\n 2b0:\t01 d0                \tadd    %edx,%eax\n 2b2:\td1 f8                \tsar    %eax\n 2b4:\t8d 70 fb             \tlea    -0x5(%rax),%esi\n 2b7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2bb:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 2be:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 2c2:\t8b 7a 18             \tmov    0x18(%rdx),%edi\n 2c5:\t99                   \tcltd   \n 2c6:\tf7 ff                \tidiv   %edi\n 2c8:\t89 c2                \tmov    %eax,%edx\n 2ca:\tc1 ea 1f             \tshr    $0x1f,%edx\n 2cd:\t01 d0                \tadd    %edx,%eax\n 2cf:\td1 f8                \tsar    %eax\n 2d1:\t89 c7                \tmov    %eax,%edi\n 2d3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2d7:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n 2db:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 2de:\t48 63 d2             \tmovslq %edx,%rdx\n 2e1:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 2e5:\t48 01 d0             \tadd    %rdx,%rax\n 2e8:\t48 8b 00             \tmov    (%rax),%rax\n 2eb:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 2ee:\t48 63 d2             \tmovslq %edx,%rdx\n 2f1:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 2f5:\t48 01 d0             \tadd    %rdx,%rax\n 2f8:\t48 8b 00             \tmov    (%rax),%rax\n 2fb:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 300:\t89 f2                \tmov    %esi,%edx\n 302:\t89 fe                \tmov    %edi,%esi\n 304:\t48 89 c7             \tmov    %rax,%rdi\n 307:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 30c:\te8 00 00 00 00       \tcallq  311 <print_8+0x311>\n 311:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 315:\t8b 40 08             \tmov    0x8(%rax),%eax\n 318:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 31c:\t8b 72 18             \tmov    0x18(%rdx),%esi\n 31f:\t99                   \tcltd   \n 320:\tf7 fe                \tidiv   %esi\n 322:\t89 c2                \tmov    %eax,%edx\n 324:\tc1 ea 1f             \tshr    $0x1f,%edx\n 327:\t01 d0                \tadd    %edx,%eax\n 329:\td1 f8                \tsar    %eax\n 32b:\t8d 78 fb             \tlea    -0x5(%rax),%edi\n 32e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 332:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 335:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 339:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n 33c:\t99                   \tcltd   \n 33d:\tf7 f9                \tidiv   %ecx\n 33f:\t89 c2                \tmov    %eax,%edx\n 341:\tc1 ea 1f             \tshr    $0x1f,%edx\n 344:\t01 d0                \tadd    %edx,%eax\n 346:\td1 f8                \tsar    %eax\n 348:\t8d 70 01             \tlea    0x1(%rax),%esi\n 34b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 34f:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n 353:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 356:\t48 63 d2             \tmovslq %edx,%rdx\n 359:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 35d:\t48 01 d0             \tadd    %rdx,%rax\n 360:\t48 8b 00             \tmov    (%rax),%rax\n 363:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 366:\t48 63 d2             \tmovslq %edx,%rdx\n 369:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 36d:\t48 01 d0             \tadd    %rdx,%rax\n 370:\t48 8b 00             \tmov    (%rax),%rax\n 373:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 378:\t89 fa                \tmov    %edi,%edx\n 37a:\t48 89 c7             \tmov    %rax,%rdi\n 37d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 382:\te8 00 00 00 00       \tcallq  387 <print_8+0x387>\n 387:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 38b:\t8b 40 08             \tmov    0x8(%rax),%eax\n 38e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 392:\t8b 72 18             \tmov    0x18(%rdx),%esi\n 395:\t99                   \tcltd   \n 396:\tf7 fe                \tidiv   %esi\n 398:\t89 c2                \tmov    %eax,%edx\n 39a:\tc1 ea 1f             \tshr    $0x1f,%edx\n 39d:\t01 d0                \tadd    %edx,%eax\n 39f:\td1 f8                \tsar    %eax\n 3a1:\t8d 78 fb             \tlea    -0x5(%rax),%edi\n 3a4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3a8:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 3ab:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 3af:\t8b 4a 18             \tmov    0x18(%rdx),%ecx\n 3b2:\t99                   \tcltd   \n 3b3:\tf7 f9                \tidiv   %ecx\n 3b5:\t89 c2                \tmov    %eax,%edx\n 3b7:\tc1 ea 1f             \tshr    $0x1f,%edx\n 3ba:\t01 d0                \tadd    %edx,%eax\n 3bc:\td1 f8                \tsar    %eax\n 3be:\t8d 70 02             \tlea    0x2(%rax),%esi\n 3c1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3c5:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n 3c9:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 3cc:\t48 63 d2             \tmovslq %edx,%rdx\n 3cf:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 3d3:\t48 01 d0             \tadd    %rdx,%rax\n 3d6:\t48 8b 00             \tmov    (%rax),%rax\n 3d9:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 3dc:\t48 63 d2             \tmovslq %edx,%rdx\n 3df:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 3e3:\t48 01 d0             \tadd    %rdx,%rax\n 3e6:\t48 8b 00             \tmov    (%rax),%rax\n 3e9:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 3ee:\t89 fa                \tmov    %edi,%edx\n 3f0:\t48 89 c7             \tmov    %rax,%rdi\n 3f3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3f8:\te8 00 00 00 00       \tcallq  3fd <print_8+0x3fd>\n 3fd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 401:\t8b 40 08             \tmov    0x8(%rax),%eax\n 404:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 408:\t8b 7a 18             \tmov    0x18(%rdx),%edi\n 40b:\t99                   \tcltd   \n 40c:\tf7 ff                \tidiv   %edi\n 40e:\t89 c2                \tmov    %eax,%edx\n 410:\tc1 ea 1f             \tshr    $0x1f,%edx\n 413:\t01 d0                \tadd    %edx,%eax\n 415:\td1 f8                \tsar    %eax\n 417:\t8d 78 fb             \tlea    -0x5(%rax),%edi\n 41a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 41e:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 421:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 425:\t8b 72 18             \tmov    0x18(%rdx),%esi\n 428:\t99                   \tcltd   \n 429:\tf7 fe                \tidiv   %esi\n 42b:\t89 c2                \tmov    %eax,%edx\n 42d:\tc1 ea 1f             \tshr    $0x1f,%edx\n 430:\t01 d0                \tadd    %edx,%eax\n 432:\td1 f8                \tsar    %eax\n 434:\t8d 70 03             \tlea    0x3(%rax),%esi\n 437:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 43b:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n 43f:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 442:\t48 63 d2             \tmovslq %edx,%rdx\n 445:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 449:\t48 01 d0             \tadd    %rdx,%rax\n 44c:\t48 8b 00             \tmov    (%rax),%rax\n 44f:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 452:\t48 63 d2             \tmovslq %edx,%rdx\n 455:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 459:\t48 01 d0             \tadd    %rdx,%rax\n 45c:\t48 8b 00             \tmov    (%rax),%rax\n 45f:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 464:\t89 fa                \tmov    %edi,%edx\n 466:\t48 89 c7             \tmov    %rax,%rdi\n 469:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 46e:\te8 00 00 00 00       \tcallq  473 <print_8+0x473>\n 473:\t90                   \tnop\n 474:\tc9                   \tleaveq \n 475:\tc3                   \tretq   \n", "code_s": "int __fastcall print_8(__int64 <span class=\"supfact\">a1</span>, int <span class=\"supfact\">a2</span>,\n                       int <span class=\"supfact\">a3</span>) {\n  wattr_on(*(WINDOW **)(Number L * <span class=\"supfact\">a3</span> +\n                        *(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                                    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))),\n           Number, Number L);\n  mvwprintw(*(WINDOW **)(Number L * <span class=\"supfact\">a3</span> +\n                         *(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                                     *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))),\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            String);\n  mvwprintw(*(WINDOW **)(Number L * <span class=\"supfact\">a3</span> +\n                         *(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                                     *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))),\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            String);\n  mvwprintw(*(WINDOW **)(Number L * <span class=\"supfact\">a3</span> +\n                         *(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                                     *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))),\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            String);\n  mvwprintw(*(WINDOW **)(Number L * <span class=\"supfact\">a3</span> +\n                         *(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                                     *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))),\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            String);\n  mvwprintw(*(WINDOW **)(Number L * <span class=\"supfact\">a3</span> +\n                         *(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                                     *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))),\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            String);\n  mvwprintw(*(WINDOW **)(Number L * <span class=\"supfact\">a3</span> +\n                         *(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                                     *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))),\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number,\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            String);\n  mvwprintw(*(WINDOW **)(Number L * <span class=\"supfact\">a3</span> +\n                         *(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                                     *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))),\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number +\n                Number,\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            String);\n  mvwprintw(*(WINDOW **)(Number L * <span class=\"supfact\">a3</span> +\n                         *(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                                     *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))),\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number +\n                Number,\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n                    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n                Number,\n            String);\n  return mvwprintw(\n      *(WINDOW **)(Number L * <span class=\"supfact\">a3</span> +\n                   *(_QWORD *)(Number L * <span class=\"supfact\">a2</span> +\n                               *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))),\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n              *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number +\n          Number,\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) /\n              *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number -\n          Number,\n      String);\n}", "code_t": "void __cdecl print_8(t_env *<span class=\"supfact\">e</span>, int <span class=\"supfact\">j</span>,\n                     int <span class=\"supfact\">i</span>) {\n  wattr_on(<span class=\"supfact\">e</span>->win_tab[<span class=\"supfact\">j</span>][<span class=\"supfact\">i</span>],\n           Number, Number L);\n  mvwprintw(<span class=\"supfact\">e</span>->win_tab[<span class=\"supfact\">j</span>][<span class=\"supfact\">i</span>],\n            <span class=\"supfact\">e</span>->height / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            <span class=\"supfact\">e</span>->width / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            String);\n  mvwprintw(<span class=\"supfact\">e</span>->win_tab[<span class=\"supfact\">j</span>][<span class=\"supfact\">i</span>],\n            <span class=\"supfact\">e</span>->height / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            <span class=\"supfact\">e</span>->width / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            String);\n  mvwprintw(<span class=\"supfact\">e</span>->win_tab[<span class=\"supfact\">j</span>][<span class=\"supfact\">i</span>],\n            <span class=\"supfact\">e</span>->height / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            <span class=\"supfact\">e</span>->width / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            String);\n  mvwprintw(<span class=\"supfact\">e</span>->win_tab[<span class=\"supfact\">j</span>][<span class=\"supfact\">i</span>],\n            <span class=\"supfact\">e</span>->height / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            <span class=\"supfact\">e</span>->width / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            String);\n  mvwprintw(<span class=\"supfact\">e</span>->win_tab[<span class=\"supfact\">j</span>][<span class=\"supfact\">i</span>],\n            <span class=\"supfact\">e</span>->height / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            <span class=\"supfact\">e</span>->width / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            String);\n  mvwprintw(<span class=\"supfact\">e</span>->win_tab[<span class=\"supfact\">j</span>][<span class=\"supfact\">i</span>],\n            <span class=\"supfact\">e</span>->height / <span class=\"supfact\">e</span>->grid_size / Number,\n            <span class=\"supfact\">e</span>->width / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            String);\n  mvwprintw(<span class=\"supfact\">e</span>->win_tab[<span class=\"supfact\">j</span>][<span class=\"supfact\">i</span>],\n            <span class=\"supfact\">e</span>->height / <span class=\"supfact\">e</span>->grid_size / Number +\n                Number,\n            <span class=\"supfact\">e</span>->width / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            String);\n  mvwprintw(<span class=\"supfact\">e</span>->win_tab[<span class=\"supfact\">j</span>][<span class=\"supfact\">i</span>],\n            <span class=\"supfact\">e</span>->height / <span class=\"supfact\">e</span>->grid_size / Number +\n                Number,\n            <span class=\"supfact\">e</span>->width / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            String);\n  mvwprintw(<span class=\"supfact\">e</span>->win_tab[<span class=\"supfact\">j</span>][<span class=\"supfact\">i</span>],\n            <span class=\"supfact\">e</span>->height / <span class=\"supfact\">e</span>->grid_size / Number +\n                Number,\n            <span class=\"supfact\">e</span>->width / <span class=\"supfact\">e</span>->grid_size / Number -\n                Number,\n            String);\n}", "var": [{"name": "a1", "type": "t_env *", "pred_name": "e", "ref_name": "e", "ref_type": "t_env *"}, {"name": "a2", "type": "int", "pred_name": "x", "ref_name": "j", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "y", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "tlewowski", "repo_name": "CppProjectTemplate", "path": "tlewowski/CppProjectTemplate/acc787bbbda65e30d99b4050e22e00e21eb825d0c43681a53a0a66d9d464216e", "path_in_repo": "tlewowski/CppProjectTemplate/production/libs/pugixml/pugixml/build/make-g++-debug-standard/tests/test_xpath_xalan_1.cpp.o", "objdump": "0000000000005afe <_Z41__static_initialization_and_destruction_0ii>:\n    5afe:\t55                   \tpush   %rbp\n    5aff:\t48 89 e5             \tmov    %rsp,%rbp\n    5b02:\t48 83 ec 10          \tsub    $0x10,%rsp\n    5b06:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    5b09:\t89 75 f8             \tmov    %esi,-0x8(%rbp)\n    5b0c:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n    5b10:\t0f 85 0b 02 00 00    \tjne    5d21 <_Z41__static_initialization_and_destruction_0ii+0x223>\n    5b16:\t81 7d f8 ff ff 00 00 \tcmpl   $0xffff,-0x8(%rbp)\n    5b1d:\t0f 85 fe 01 00 00    \tjne    5d21 <_Z41__static_initialization_and_destruction_0ii+0x223>\n    5b23:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5b28:\te8 00 00 00 00       \tcallq  5b2d <_Z41__static_initialization_and_destruction_0ii+0x2f>\n    5b2d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5b32:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5b37:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5b3c:\te8 00 00 00 00       \tcallq  5b41 <_Z41__static_initialization_and_destruction_0ii+0x43>\n    5b41:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5b46:\te8 00 00 00 00       \tcallq  5b4b <_Z41__static_initialization_and_destruction_0ii+0x4d>\n    5b4b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5b50:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5b55:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5b5a:\te8 00 00 00 00       \tcallq  5b5f <_Z41__static_initialization_and_destruction_0ii+0x61>\n    5b5f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5b64:\te8 00 00 00 00       \tcallq  5b69 <_Z41__static_initialization_and_destruction_0ii+0x6b>\n    5b69:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5b6e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5b73:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5b78:\te8 00 00 00 00       \tcallq  5b7d <_Z41__static_initialization_and_destruction_0ii+0x7f>\n    5b7d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5b82:\te8 00 00 00 00       \tcallq  5b87 <_Z41__static_initialization_and_destruction_0ii+0x89>\n    5b87:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5b8c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5b91:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5b96:\te8 00 00 00 00       \tcallq  5b9b <_Z41__static_initialization_and_destruction_0ii+0x9d>\n    5b9b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5ba0:\te8 00 00 00 00       \tcallq  5ba5 <_Z41__static_initialization_and_destruction_0ii+0xa7>\n    5ba5:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5baa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5baf:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5bb4:\te8 00 00 00 00       \tcallq  5bb9 <_Z41__static_initialization_and_destruction_0ii+0xbb>\n    5bb9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5bbe:\te8 00 00 00 00       \tcallq  5bc3 <_Z41__static_initialization_and_destruction_0ii+0xc5>\n    5bc3:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5bc8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5bcd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5bd2:\te8 00 00 00 00       \tcallq  5bd7 <_Z41__static_initialization_and_destruction_0ii+0xd9>\n    5bd7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5bdc:\te8 00 00 00 00       \tcallq  5be1 <_Z41__static_initialization_and_destruction_0ii+0xe3>\n    5be1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5be6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5beb:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5bf0:\te8 00 00 00 00       \tcallq  5bf5 <_Z41__static_initialization_and_destruction_0ii+0xf7>\n    5bf5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5bfa:\te8 00 00 00 00       \tcallq  5bff <_Z41__static_initialization_and_destruction_0ii+0x101>\n    5bff:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5c04:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5c09:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c0e:\te8 00 00 00 00       \tcallq  5c13 <_Z41__static_initialization_and_destruction_0ii+0x115>\n    5c13:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c18:\te8 00 00 00 00       \tcallq  5c1d <_Z41__static_initialization_and_destruction_0ii+0x11f>\n    5c1d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5c22:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5c27:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c2c:\te8 00 00 00 00       \tcallq  5c31 <_Z41__static_initialization_and_destruction_0ii+0x133>\n    5c31:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c36:\te8 00 00 00 00       \tcallq  5c3b <_Z41__static_initialization_and_destruction_0ii+0x13d>\n    5c3b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5c40:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5c45:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c4a:\te8 00 00 00 00       \tcallq  5c4f <_Z41__static_initialization_and_destruction_0ii+0x151>\n    5c4f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c54:\te8 00 00 00 00       \tcallq  5c59 <_Z41__static_initialization_and_destruction_0ii+0x15b>\n    5c59:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5c5e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5c63:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c68:\te8 00 00 00 00       \tcallq  5c6d <_Z41__static_initialization_and_destruction_0ii+0x16f>\n    5c6d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c72:\te8 00 00 00 00       \tcallq  5c77 <_Z41__static_initialization_and_destruction_0ii+0x179>\n    5c77:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5c7c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5c81:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c86:\te8 00 00 00 00       \tcallq  5c8b <_Z41__static_initialization_and_destruction_0ii+0x18d>\n    5c8b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c90:\te8 00 00 00 00       \tcallq  5c95 <_Z41__static_initialization_and_destruction_0ii+0x197>\n    5c95:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5c9a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5c9f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5ca4:\te8 00 00 00 00       \tcallq  5ca9 <_Z41__static_initialization_and_destruction_0ii+0x1ab>\n    5ca9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5cae:\te8 00 00 00 00       \tcallq  5cb3 <_Z41__static_initialization_and_destruction_0ii+0x1b5>\n    5cb3:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5cb8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5cbd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5cc2:\te8 00 00 00 00       \tcallq  5cc7 <_Z41__static_initialization_and_destruction_0ii+0x1c9>\n    5cc7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5ccc:\te8 00 00 00 00       \tcallq  5cd1 <_Z41__static_initialization_and_destruction_0ii+0x1d3>\n    5cd1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5cd6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5cdb:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5ce0:\te8 00 00 00 00       \tcallq  5ce5 <_Z41__static_initialization_and_destruction_0ii+0x1e7>\n    5ce5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5cea:\te8 00 00 00 00       \tcallq  5cef <_Z41__static_initialization_and_destruction_0ii+0x1f1>\n    5cef:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5cf4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5cf9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5cfe:\te8 00 00 00 00       \tcallq  5d03 <_Z41__static_initialization_and_destruction_0ii+0x205>\n    5d03:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5d08:\te8 00 00 00 00       \tcallq  5d0d <_Z41__static_initialization_and_destruction_0ii+0x20f>\n    5d0d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5d12:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5d17:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5d1c:\te8 00 00 00 00       \tcallq  5d21 <_Z41__static_initialization_and_destruction_0ii+0x223>\n    5d21:\t90                   \tnop\n    5d22:\tc9                   \tleaveq \n    5d23:\tc3                   \tretq   ", "code_s": "int __fastcall __static_initialization_and_destruction_0(\n    int <span class=\"supfact\">a1</span>, int <span class=\"supfact\">a2</span>) {\n  int <span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">a1</span> == Number && <span class=\"supfact\">a2</span> == Number) {\n    test_runner_xpath_xalan_boolean_1 test_runner_xpath_xalan_boolean_1(\n        (test_runner_xpath_xalan_boolean_1\n             *)&test_runner_instance_xpath_xalan_boolean_1);\n    _cxa_atexit(\n        test_runner_xpath_xalan_boolean_1 ~test_runner_xpath_xalan_boolean_1,\n        &test_runner_instance_xpath_xalan_boolean_1, &_dso_handle);\n    test_runner_xpath_xalan_boolean_2 test_runner_xpath_xalan_boolean_2(\n        (test_runner_xpath_xalan_boolean_2\n             *)&test_runner_instance_xpath_xalan_boolean_2);\n    _cxa_atexit(\n        test_runner_xpath_xalan_boolean_2 ~test_runner_xpath_xalan_boolean_2,\n        &test_runner_instance_xpath_xalan_boolean_2, &_dso_handle);\n    test_runner_xpath_xalan_boolean_3 test_runner_xpath_xalan_boolean_3(\n        (test_runner_xpath_xalan_boolean_3\n             *)&test_runner_instance_xpath_xalan_boolean_3);\n    _cxa_atexit(\n        test_runner_xpath_xalan_boolean_3 ~test_runner_xpath_xalan_boolean_3,\n        &test_runner_instance_xpath_xalan_boolean_3, &_dso_handle);\n    test_runner_xpath_xalan_boolean_4 test_runner_xpath_xalan_boolean_4(\n        (test_runner_xpath_xalan_boolean_4\n             *)&test_runner_instance_xpath_xalan_boolean_4);\n    _cxa_atexit(\n        test_runner_xpath_xalan_boolean_4 ~test_runner_xpath_xalan_boolean_4,\n        &test_runner_instance_xpath_xalan_boolean_4, &_dso_handle);\n    test_runner_xpath_xalan_boolean_5 test_runner_xpath_xalan_boolean_5(\n        (test_runner_xpath_xalan_boolean_5\n             *)&test_runner_instance_xpath_xalan_boolean_5);\n    _cxa_atexit(\n        test_runner_xpath_xalan_boolean_5 ~test_runner_xpath_xalan_boolean_5,\n        &test_runner_instance_xpath_xalan_boolean_5, &_dso_handle);\n    test_runner_xpath_xalan_boolean_6 test_runner_xpath_xalan_boolean_6(\n        (test_runner_xpath_xalan_boolean_6\n             *)&test_runner_instance_xpath_xalan_boolean_6);\n    _cxa_atexit(\n        test_runner_xpath_xalan_boolean_6 ~test_runner_xpath_xalan_boolean_6,\n        &test_runner_instance_xpath_xalan_boolean_6, &_dso_handle);\n    test_runner_xpath_xalan_boolean_7 test_runner_xpath_xalan_boolean_7(\n        (test_runner_xpath_xalan_boolean_7\n             *)&test_runner_instance_xpath_xalan_boolean_7);\n    _cxa_atexit(\n        test_runner_xpath_xalan_boolean_7 ~test_runner_xpath_xalan_boolean_7,\n        &test_runner_instance_xpath_xalan_boolean_7, &_dso_handle);\n    test_runner_xpath_xalan_conditional test_runner_xpath_xalan_conditional(\n        (test_runner_xpath_xalan_conditional\n             *)&test_runner_instance_xpath_xalan_conditional);\n    _cxa_atexit(\n        test_runner_xpath_xalan_conditional ~test_runner_xpath_xalan_conditional,\n        &test_runner_instance_xpath_xalan_conditional, &_dso_handle);\n    test_runner_xpath_xalan_math_1 test_runner_xpath_xalan_math_1(\n        (test_runner_xpath_xalan_math_1\n             *)&test_runner_instance_xpath_xalan_math_1);\n    _cxa_atexit(test_runner_xpath_xalan_math_1 ~test_runner_xpath_xalan_math_1,\n                &test_runner_instance_xpath_xalan_math_1, &_dso_handle);\n    test_runner_xpath_xalan_math_2 test_runner_xpath_xalan_math_2(\n        (test_runner_xpath_xalan_math_2\n             *)&test_runner_instance_xpath_xalan_math_2);\n    _cxa_atexit(test_runner_xpath_xalan_math_2 ~test_runner_xpath_xalan_math_2,\n                &test_runner_instance_xpath_xalan_math_2, &_dso_handle);\n    test_runner_xpath_xalan_math_3 test_runner_xpath_xalan_math_3(\n        (test_runner_xpath_xalan_math_3\n             *)&test_runner_instance_xpath_xalan_math_3);\n    _cxa_atexit(test_runner_xpath_xalan_math_3 ~test_runner_xpath_xalan_math_3,\n                &test_runner_instance_xpath_xalan_math_3, &_dso_handle);\n    test_runner_xpath_xalan_math_4 test_runner_xpath_xalan_math_4(\n        (test_runner_xpath_xalan_math_4\n             *)&test_runner_instance_xpath_xalan_math_4);\n    _cxa_atexit(test_runner_xpath_xalan_math_4 ~test_runner_xpath_xalan_math_4,\n                &test_runner_instance_xpath_xalan_math_4, &_dso_handle);\n    test_runner_xpath_xalan_math_5 test_runner_xpath_xalan_math_5(\n        (test_runner_xpath_xalan_math_5\n             *)&test_runner_instance_xpath_xalan_math_5);\n    _cxa_atexit(test_runner_xpath_xalan_math_5 ~test_runner_xpath_xalan_math_5,\n                &test_runner_instance_xpath_xalan_math_5, &_dso_handle);\n    test_runner_xpath_xalan_math_6 test_runner_xpath_xalan_math_6(\n        (test_runner_xpath_xalan_math_6\n             *)&test_runner_instance_xpath_xalan_math_6);\n    _cxa_atexit(test_runner_xpath_xalan_math_6 ~test_runner_xpath_xalan_math_6,\n                &test_runner_instance_xpath_xalan_math_6, &_dso_handle);\n    test_runner_xpath_xalan_math_7 test_runner_xpath_xalan_math_7(\n        (test_runner_xpath_xalan_math_7\n             *)&test_runner_instance_xpath_xalan_math_7);\n    _cxa_atexit(test_runner_xpath_xalan_math_7 ~test_runner_xpath_xalan_math_7,\n                &test_runner_instance_xpath_xalan_math_7, &_dso_handle);\n    test_runner_xpath_xalan_math_8 test_runner_xpath_xalan_math_8(\n        (test_runner_xpath_xalan_math_8\n             *)&test_runner_instance_xpath_xalan_math_8);\n    _cxa_atexit(test_runner_xpath_xalan_math_8 ~test_runner_xpath_xalan_math_8,\n                &test_runner_instance_xpath_xalan_math_8, &_dso_handle);\n    test_runner_xpath_xalan_math_9 test_runner_xpath_xalan_math_9(\n        (test_runner_xpath_xalan_math_9\n             *)&test_runner_instance_xpath_xalan_math_9);\n    <span class=\"supfact\">result</span> = _cxa_atexit(\n        test_runner_xpath_xalan_math_9 ~test_runner_xpath_xalan_math_9,\n        &test_runner_instance_xpath_xalan_math_9, &_dso_handle);\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl __static_initialization_and_destruction_0(\n    int <span class=\"supfact\">__initialize_p</span>, int <span class=\"supfact\">__priority</span>) {\n  if (<span class=\"supfact\">__initialize_p</span> == Number &&\n      <span class=\"supfact\">__priority</span> == Number) {\n    test_runner_xpath_xalan_boolean_1 test_runner_xpath_xalan_boolean_1(\n        &test_runner_instance_xpath_xalan_boolean_1);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_boolean_1 ~test_runner_xpath_xalan_boolean_1,\n        &test_runner_instance_xpath_xalan_boolean_1, &_dso_handle);\n    test_runner_xpath_xalan_boolean_2 test_runner_xpath_xalan_boolean_2(\n        &test_runner_instance_xpath_xalan_boolean_2);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_boolean_2 ~test_runner_xpath_xalan_boolean_2,\n        &test_runner_instance_xpath_xalan_boolean_2, &_dso_handle);\n    test_runner_xpath_xalan_boolean_3 test_runner_xpath_xalan_boolean_3(\n        &test_runner_instance_xpath_xalan_boolean_3);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_boolean_3 ~test_runner_xpath_xalan_boolean_3,\n        &test_runner_instance_xpath_xalan_boolean_3, &_dso_handle);\n    test_runner_xpath_xalan_boolean_4 test_runner_xpath_xalan_boolean_4(\n        &test_runner_instance_xpath_xalan_boolean_4);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_boolean_4 ~test_runner_xpath_xalan_boolean_4,\n        &test_runner_instance_xpath_xalan_boolean_4, &_dso_handle);\n    test_runner_xpath_xalan_boolean_5 test_runner_xpath_xalan_boolean_5(\n        &test_runner_instance_xpath_xalan_boolean_5);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_boolean_5 ~test_runner_xpath_xalan_boolean_5,\n        &test_runner_instance_xpath_xalan_boolean_5, &_dso_handle);\n    test_runner_xpath_xalan_boolean_6 test_runner_xpath_xalan_boolean_6(\n        &test_runner_instance_xpath_xalan_boolean_6);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_boolean_6 ~test_runner_xpath_xalan_boolean_6,\n        &test_runner_instance_xpath_xalan_boolean_6, &_dso_handle);\n    test_runner_xpath_xalan_boolean_7 test_runner_xpath_xalan_boolean_7(\n        &test_runner_instance_xpath_xalan_boolean_7);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_boolean_7 ~test_runner_xpath_xalan_boolean_7,\n        &test_runner_instance_xpath_xalan_boolean_7, &_dso_handle);\n    test_runner_xpath_xalan_conditional test_runner_xpath_xalan_conditional(\n        &test_runner_instance_xpath_xalan_conditional);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_conditional ~test_runner_xpath_xalan_conditional,\n        &test_runner_instance_xpath_xalan_conditional, &_dso_handle);\n    test_runner_xpath_xalan_math_1 test_runner_xpath_xalan_math_1(\n        &test_runner_instance_xpath_xalan_math_1);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_math_1 ~test_runner_xpath_xalan_math_1,\n        &test_runner_instance_xpath_xalan_math_1, &_dso_handle);\n    test_runner_xpath_xalan_math_2 test_runner_xpath_xalan_math_2(\n        &test_runner_instance_xpath_xalan_math_2);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_math_2 ~test_runner_xpath_xalan_math_2,\n        &test_runner_instance_xpath_xalan_math_2, &_dso_handle);\n    test_runner_xpath_xalan_math_3 test_runner_xpath_xalan_math_3(\n        &test_runner_instance_xpath_xalan_math_3);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_math_3 ~test_runner_xpath_xalan_math_3,\n        &test_runner_instance_xpath_xalan_math_3, &_dso_handle);\n    test_runner_xpath_xalan_math_4 test_runner_xpath_xalan_math_4(\n        &test_runner_instance_xpath_xalan_math_4);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_math_4 ~test_runner_xpath_xalan_math_4,\n        &test_runner_instance_xpath_xalan_math_4, &_dso_handle);\n    test_runner_xpath_xalan_math_5 test_runner_xpath_xalan_math_5(\n        &test_runner_instance_xpath_xalan_math_5);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_math_5 ~test_runner_xpath_xalan_math_5,\n        &test_runner_instance_xpath_xalan_math_5, &_dso_handle);\n    test_runner_xpath_xalan_math_6 test_runner_xpath_xalan_math_6(\n        &test_runner_instance_xpath_xalan_math_6);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_math_6 ~test_runner_xpath_xalan_math_6,\n        &test_runner_instance_xpath_xalan_math_6, &_dso_handle);\n    test_runner_xpath_xalan_math_7 test_runner_xpath_xalan_math_7(\n        &test_runner_instance_xpath_xalan_math_7);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_math_7 ~test_runner_xpath_xalan_math_7,\n        &test_runner_instance_xpath_xalan_math_7, &_dso_handle);\n    test_runner_xpath_xalan_math_8 test_runner_xpath_xalan_math_8(\n        &test_runner_instance_xpath_xalan_math_8);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_math_8 ~test_runner_xpath_xalan_math_8,\n        &test_runner_instance_xpath_xalan_math_8, &_dso_handle);\n    test_runner_xpath_xalan_math_9 test_runner_xpath_xalan_math_9(\n        &test_runner_instance_xpath_xalan_math_9);\n    _cxa_atexit(\n        (void(__fastcall *)(void *))\n            test_runner_xpath_xalan_math_9 ~test_runner_xpath_xalan_math_9,\n        &test_runner_instance_xpath_xalan_math_9, &_dso_handle);\n  }\n}", "var": [{"name": "a1", "type": "int", "pred_name": "__initialize_p", "ref_name": "__initialize_p", "ref_type": "int"}, {"name": "a2", "type": "int", "pred_name": "__priority", "ref_name": "__priority", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "disdi", "repo_name": "MMC-DMA-Linux-performance", "path": "disdi/MMC-DMA-Linux-performance/791c69123393eca2b093aa97f34b3228364032d5ce737aaddef123b436f5c1eb", "path_in_repo": "disdi/MMC-DMA-Linux-performance/linux-3.15-rc8/tools/testing/selftests/timers/posix_timers", "objdump": "", "code_s": "int timer_create(clockid_t <span class=\"supfact\">clock_id</span>,\n                 struct sigevent *<span class=\"supfact\">evp</span>,\n                 timer_t *<span class=\"supfact\">timerid</span>) {\n  return timer_create(<span class=\"supfact\">clock_id</span>, <span class=\"supfact\">evp</span>,\n                      <span class=\"supfact\">timerid</span>);\n}", "code_t": "int timer_create(clockid_t <span class=\"supfact\">clock_id</span>,\n                 struct sigevent *<span class=\"supfact\">evp</span>,\n                 timer_t *<span class=\"supfact\">timerid</span>) {\n  return timer_create(<span class=\"supfact\">clock_id</span>, <span class=\"supfact\">evp</span>,\n                      <span class=\"supfact\">timerid</span>);\n}", "var": [{"name": "clock_id", "type": "clockid_t", "pred_name": "clock_id", "ref_name": "clock_id", "ref_type": "clockid_t"}, {"name": "evp", "type": "struct sigevent *", "pred_name": "evp", "ref_name": "evp", "ref_type": "struct sigevent *"}, {"name": "timerid", "type": "timer_t *", "pred_name": "timerid", "ref_name": "timerid", "ref_type": "timer_t *"}], "body_in_train": true}, {"repo_owner": "yosh1k104", "repo_name": "D-Switch", "path": "yosh1k104/D-Switch/80f9017a6541251d82dc9f6d383e517f9420c2d5859afcd99f016ead78536116", "path_in_repo": "yosh1k104/D-Switch/contiki-2.6/examples/mb851/temperature/obj_native/lpp.o", "objdump": "0000000000000094 <register_encounter>:\n  94:\t55                   \tpush   %rbp\n  95:\t48 89 e5             \tmov    %rsp,%rbp\n  98:\t48 83 ec 20          \tsub    $0x20,%rsp\n  9c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  a0:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  a4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ab <register_encounter+0x17>\n  ab:\t48 89 c7             \tmov    %rax,%rdi\n  ae:\te8 00 00 00 00       \tcallq  b3 <register_encounter+0x1f>\n  b3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  b7:\teb 57                \tjmp    110 <register_encounter+0x7c>\n  b9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  bd:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  c1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  c5:\t48 89 d6             \tmov    %rdx,%rsi\n  c8:\t48 89 c7             \tmov    %rax,%rdi\n  cb:\te8 00 00 00 00       \tcallq  d0 <register_encounter+0x3c>\n  d0:\t85 c0                \ttest   %eax,%eax\n  d2:\t74 2c                \tje     100 <register_encounter+0x6c>\n  d4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  d8:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  dc:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  e0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  e4:\t48 8d 78 18          \tlea    0x18(%rax),%rdi\n  e8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  ec:\t48 89 c1             \tmov    %rax,%rcx\n  ef:\tba 00 00 00 00       \tmov    $0x0,%edx\n  f4:\tbe 60 07 00 00       \tmov    $0x760,%esi\n  f9:\te8 00 00 00 00       \tcallq  fe <register_encounter+0x6a>\n  fe:\teb 17                \tjmp    117 <register_encounter+0x83>\n 100:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 104:\t48 89 c7             \tmov    %rax,%rdi\n 107:\te8 00 00 00 00       \tcallq  10c <register_encounter+0x78>\n 10c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 110:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 115:\t75 a2                \tjne    b9 <register_encounter+0x25>\n 117:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 11c:\t75 6f                \tjne    18d <register_encounter+0xf9>\n 11e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 123:\te8 00 00 00 00       \tcallq  128 <register_encounter+0x94>\n 128:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 12c:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 131:\t74 59                \tje     18c <register_encounter+0xf8>\n 133:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 137:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n 13b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 13f:\t48 89 c6             \tmov    %rax,%rsi\n 142:\t48 89 d7             \tmov    %rdx,%rdi\n 145:\te8 00 00 00 00       \tcallq  14a <register_encounter+0xb6>\n 14a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 14e:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 152:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 156:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 15a:\t48 8d 78 18          \tlea    0x18(%rax),%rdi\n 15e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 162:\t48 89 c1             \tmov    %rax,%rcx\n 165:\tba 00 00 00 00       \tmov    $0x0,%edx\n 16a:\tbe 60 07 00 00       \tmov    $0x760,%esi\n 16f:\te8 00 00 00 00       \tcallq  174 <register_encounter+0xe0>\n 174:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 17b <register_encounter+0xe7>\n 17b:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 17f:\t48 89 d6             \tmov    %rdx,%rsi\n 182:\t48 89 c7             \tmov    %rax,%rdi\n 185:\te8 00 00 00 00       \tcallq  18a <register_encounter+0xf6>\n 18a:\teb 01                \tjmp    18d <register_encounter+0xf9>\n 18c:\t90                   \tnop\n 18d:\tc9                   \tleaveq \n 18e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall register_encounter(__int64 <span class=\"supfact\">a1</span>,\n                                      __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 i;\n  __int64 v4;\n  <span class=\"supfact\">result</span> = list_head(encounter_list);\n  for (i = <span class=\"supfact\">result</span>; i; i = <span class=\"supfact\">result</span>) {\n    if ((unsigned int)rimeaddr_cmp(<span class=\"supfact\">a1</span>, i + Number)) {\n      *(_QWORD *)(i + Number) = <span class=\"supfact\">a2</span>;\n      <span class=\"supfact\">result</span> =\n          ctimer_set(i + Number, Number L, remove_encounter, i);\n      break;\n    }\n    <span class=\"supfact\">result</span> = list_item_next(i);\n  }\n  if (!i) {\n    <span class=\"supfact\">result</span> = memb_alloc(&encounter_memb);\n    v4 = <span class=\"supfact\">result</span>;\n    if (<span class=\"supfact\">result</span>) {\n      rimeaddr_copy(<span class=\"supfact\">result</span> + Number, <span class=\"supfact\">a1</span>);\n      *(_QWORD *)(v4 + Number) = <span class=\"supfact\">a2</span>;\n      ctimer_set(v4 + Number, Number L, remove_encounter, v4);\n      <span class=\"supfact\">result</span> = list_add(encounter_list, v4);\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl register_encounter(rimeaddr_t *<span class=\"supfact\">neighbor</span>,\n                                clock_time_t <span class=\"supfact\">time</span>) {\n  encounter *e;\n  encounter *ea;\n  for (e = (encounter *)list_head(encounter_list); e;\n       e = (encounter *)list_item_next(e)) {\n    if ((unsigned int)rimeaddr_cmp(<span class=\"supfact\">neighbor</span>,\n                                   &e-><span class=\"supfact\">neighbor</span>)) {\n      e-><span class=\"supfact\">time</span> = <span class=\"supfact\">time</span>;\n      ctimer_set(&e->remove_timer, Number L, remove_encounter, e);\n      break;\n    }\n  }\n  if (!e) {\n    ea = (encounter *)memb_alloc(&encounter_memb);\n    if (ea) {\n      rimeaddr_copy(&ea-><span class=\"supfact\">neighbor</span>, <span class=\"supfact\">neighbor</span>);\n      ea-><span class=\"supfact\">time</span> = <span class=\"supfact\">time</span>;\n      ctimer_set(&ea->remove_timer, Number L, remove_encounter, ea);\n      list_add(encounter_list, ea);\n    }\n  }\n}", "var": [{"name": "a1", "type": "rimeaddr_t *", "pred_name": "neighbor", "ref_name": "neighbor", "ref_type": "rimeaddr_t *"}, {"name": "a2", "type": "clock_time_t", "pred_name": "time", "ref_name": "time", "ref_type": "clock_time_t"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "alchero", "repo_name": "BPI-Kernel4.0", "path": "alchero/BPI-Kernel4.0/27a2a4303e03117e7b93c90ea857f62954a78915fee7c5c9859c3684675ec13c", "path_in_repo": "alchero/BPI-Kernel4.0/linux-4.0.2/tools/perf/util/sort.o", "objdump": "00000000000009cf <sort__sym_cmp>:\n     9cf:\t55                   \tpush   %rbp\n     9d0:\t48 89 e5             \tmov    %rsp,%rbp\n     9d3:\t48 83 ec 20          \tsub    $0x20,%rsp\n     9d7:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     9db:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     9df:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     9e6:\t00 00 \n     9e8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     9ec:\t31 c0                \txor    %eax,%eax\n     9ee:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9f2:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n     9f9:\t48 85 c0             \ttest   %rax,%rax\n     9fc:\t75 33                \tjne    a31 <sort__sym_cmp+0x62>\n     9fe:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     a02:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n     a09:\t48 85 c0             \ttest   %rax,%rax\n     a0c:\t75 23                \tjne    a31 <sort__sym_cmp+0x62>\n     a0e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     a12:\t48 8b 90 a8 00 00 00 \tmov    0xa8(%rax),%rdx\n     a19:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a1d:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n     a24:\t48 89 d6             \tmov    %rdx,%rsi\n     a27:\t48 89 c7             \tmov    %rax,%rdi\n     a2a:\te8 da fe ff ff       \tcallq  909 <_sort__addr_cmp>\n     a2f:\teb 4f                \tjmp    a80 <sort__sym_cmp+0xb1>\n     a31:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a37 <sort__sym_cmp+0x68>\n     a37:\t85 c0                \ttest   %eax,%eax\n     a39:\t75 24                \tjne    a5f <sort__sym_cmp+0x90>\n     a3b:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     a3f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a43:\t48 89 d6             \tmov    %rdx,%rsi\n     a46:\t48 89 c7             \tmov    %rax,%rdi\n     a49:\te8 34 fd ff ff       \tcallq  782 <sort__dso_cmp>\n     a4e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     a52:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     a57:\t74 06                \tje     a5f <sort__sym_cmp+0x90>\n     a59:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     a5d:\teb 21                \tjmp    a80 <sort__sym_cmp+0xb1>\n     a5f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     a63:\t48 8b 90 88 00 00 00 \tmov    0x88(%rax),%rdx\n     a6a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a6e:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n     a75:\t48 89 d6             \tmov    %rdx,%rsi\n     a78:\t48 89 c7             \tmov    %rax,%rdi\n     a7b:\te8 c6 fe ff ff       \tcallq  946 <_sort__sym_cmp>\n     a80:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     a84:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     a8b:\t00 00 \n     a8d:\t74 05                \tje     a94 <sort__sym_cmp+0xc5>\n     a8f:\te8 00 00 00 00       \tcallq  a94 <sort__sym_cmp+0xc5>\n     a94:\tc9                   \tleaveq \n     a95:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sort__sym_cmp(__int64 <span class=\"supfact\">a1</span>,\n                                 __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n      !*(_QWORD *)(<span class=\"supfact\">a2</span> + Number))\n    return sort__addr_cmp(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                          *(_QWORD *)(<span class=\"supfact\">a2</span> + Number));\n  if (sort__has_dso)\n    return sort__sym_cmp(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                         *(_QWORD *)(<span class=\"supfact\">a2</span> + Number));\n  <span class=\"supfact\">v3</span> = sort__dso_cmp(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n  if (!<span class=\"supfact\">v3</span>)\n    return sort__sym_cmp(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                         *(_QWORD *)(<span class=\"supfact\">a2</span> + Number));\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "int64_t __cdecl sort__sym_cmp(hist_entry *<span class=\"supfact\">left</span>,\n                              hist_entry *<span class=\"supfact\">right</span>) {\n  int64_t <span class=\"supfact\">ret</span>;\n  if (!<span class=\"supfact\">left</span>->ms.sym && !<span class=\"supfact\">right</span>->ms.sym)\n    return sort__addr_cmp(<span class=\"supfact\">left</span>->ip, <span class=\"supfact\">right</span>->ip);\n  if (sort__has_dso)\n    return sort__sym_cmp(<span class=\"supfact\">left</span>->ms.sym,\n                         <span class=\"supfact\">right</span>->ms.sym);\n  <span class=\"supfact\">ret</span> =\n      sort__dso_cmp(<span class=\"supfact\">left</span>, <span class=\"supfact\">right</span>);\n  if (!<span class=\"supfact\">ret</span>)\n    return sort__sym_cmp(<span class=\"supfact\">left</span>->ms.sym,\n                         <span class=\"supfact\">right</span>->ms.sym);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "hist_entry *", "pred_name": "left", "ref_name": "left", "ref_type": "hist_entry *"}, {"name": "a2", "type": "hist_entry *", "pred_name": "right", "ref_name": "right", "ref_type": "hist_entry *"}, {"name": "v3", "type": "int64_t", "pred_name": "ret", "ref_name": "ret", "ref_type": "int64_t"}], "body_in_train": true}, {"repo_owner": "mdsteele", "repo_name": "azimuth", "path": "mdsteele/azimuth/b6dc1d710d5ac48e2bf946540d07696754221d94a4367091937e385289269a8d", "path_in_repo": "mdsteele/azimuth//out/debug/host/obj/editor/state.o", "objdump": "0000000000006800 <az_advance_wall_data_index>:\n    6800:\t55                   \tpush   %rbp\n    6801:\t48 89 e5             \tmov    %rsp,%rbp\n    6804:\t48 83 ec 20          \tsub    $0x20,%rsp\n    6808:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n    680b:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n    680e:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 6815 <az_advance_wall_data_index+0x15>\n    6815:\t84 c0                \ttest   %al,%al\n    6817:\t75 1e                \tjne    6837 <az_advance_wall_data_index+0x37>\n    6819:\te8 00 00 00 00       \tcallq  681e <az_advance_wall_data_index+0x1e>\n    681e:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    6823:\tba e2 02 00 00       \tmov    $0x2e2,%edx\n    6828:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    682d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    6832:\te8 00 00 00 00       \tcallq  6837 <az_advance_wall_data_index+0x37>\n    6837:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    683b:\t78 43                \tjs     6880 <az_advance_wall_data_index+0x80>\n    683d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6842:\t48 89 c2             \tmov    %rax,%rdx\n    6845:\t48 c1 ea 03          \tshr    $0x3,%rdx\n    6849:\t48 81 c2 00 80 ff 7f \tadd    $0x7fff8000,%rdx\n    6850:\t0f b6 12             \tmovzbl (%rdx),%edx\n    6853:\t84 d2                \ttest   %dl,%dl\n    6855:\t0f 95 c1             \tsetne  %cl\n    6858:\t48 89 c6             \tmov    %rax,%rsi\n    685b:\t83 e6 07             \tand    $0x7,%esi\n    685e:\t83 c6 03             \tadd    $0x3,%esi\n    6861:\t40 38 d6             \tcmp    %dl,%sil\n    6864:\t0f 9d c2             \tsetge  %dl\n    6867:\t21 ca                \tand    %ecx,%edx\n    6869:\t84 d2                \ttest   %dl,%dl\n    686b:\t74 08                \tje     6875 <az_advance_wall_data_index+0x75>\n    686d:\t48 89 c7             \tmov    %rax,%rdi\n    6870:\te8 00 00 00 00       \tcallq  6875 <az_advance_wall_data_index+0x75>\n    6875:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 687b <az_advance_wall_data_index+0x7b>\n    687b:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n    687e:\t7c 1e                \tjl     689e <az_advance_wall_data_index+0x9e>\n    6880:\te8 00 00 00 00       \tcallq  6885 <az_advance_wall_data_index+0x85>\n    6885:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    688a:\tba e3 02 00 00       \tmov    $0x2e3,%edx\n    688f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6894:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    6899:\te8 00 00 00 00       \tcallq  689e <az_advance_wall_data_index+0x9e>\n    689e:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    68a1:\t48 98                \tcltq   \n    68a3:\t48 c1 e0 02          \tshl    $0x2,%rax\n    68a7:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    68ad:\t48 89 c2             \tmov    %rax,%rdx\n    68b0:\t48 c1 ea 03          \tshr    $0x3,%rdx\n    68b4:\t48 81 c2 00 80 ff 7f \tadd    $0x7fff8000,%rdx\n    68bb:\t0f b6 12             \tmovzbl (%rdx),%edx\n    68be:\t84 d2                \ttest   %dl,%dl\n    68c0:\t0f 95 c1             \tsetne  %cl\n    68c3:\t48 89 c6             \tmov    %rax,%rsi\n    68c6:\t83 e6 07             \tand    $0x7,%esi\n    68c9:\t83 c6 03             \tadd    $0x3,%esi\n    68cc:\t40 38 d6             \tcmp    %dl,%sil\n    68cf:\t0f 9d c2             \tsetge  %dl\n    68d2:\t21 ca                \tand    %ecx,%edx\n    68d4:\t84 d2                \ttest   %dl,%dl\n    68d6:\t74 08                \tje     68e0 <az_advance_wall_data_index+0xe0>\n    68d8:\t48 89 c7             \tmov    %rax,%rdi\n    68db:\te8 00 00 00 00       \tcallq  68e0 <az_advance_wall_data_index+0xe0>\n    68e0:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    68e3:\t48 98                \tcltq   \n    68e5:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    68ec:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    68ef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    68f4:\t48 89 c2             \tmov    %rax,%rdx\n    68f7:\t48 c1 ea 03          \tshr    $0x3,%rdx\n    68fb:\t48 81 c2 00 80 ff 7f \tadd    $0x7fff8000,%rdx\n    6902:\t0f b6 12             \tmovzbl (%rdx),%edx\n    6905:\t84 d2                \ttest   %dl,%dl\n    6907:\t0f 95 c1             \tsetne  %cl\n    690a:\t48 89 c6             \tmov    %rax,%rsi\n    690d:\t83 e6 07             \tand    $0x7,%esi\n    6910:\t83 c6 03             \tadd    $0x3,%esi\n    6913:\t40 38 d6             \tcmp    %dl,%sil\n    6916:\t0f 9d c2             \tsetge  %dl\n    6919:\t21 ca                \tand    %ecx,%edx\n    691b:\t84 d2                \ttest   %dl,%dl\n    691d:\t74 08                \tje     6927 <az_advance_wall_data_index+0x127>\n    691f:\t48 89 c7             \tmov    %rax,%rdi\n    6922:\te8 00 00 00 00       \tcallq  6927 <az_advance_wall_data_index+0x127>\n    6927:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 692d <az_advance_wall_data_index+0x12d>\n    692d:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n    6930:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n    6933:\t01 ca                \tadd    %ecx,%edx\n    6935:\t89 c6                \tmov    %eax,%esi\n    6937:\t89 d7                \tmov    %edx,%edi\n    6939:\te8 00 00 00 00       \tcallq  693e <az_advance_wall_data_index+0x13e>\n    693e:\t89 c2                \tmov    %eax,%edx\n    6940:\t48 63 c2             \tmovslq %edx,%rax\n    6943:\t48 c1 e0 02          \tshl    $0x2,%rax\n    6947:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    694d:\t48 89 c1             \tmov    %rax,%rcx\n    6950:\t48 c1 e9 03          \tshr    $0x3,%rcx\n    6954:\t48 81 c1 00 80 ff 7f \tadd    $0x7fff8000,%rcx\n    695b:\t0f b6 09             \tmovzbl (%rcx),%ecx\n    695e:\t84 c9                \ttest   %cl,%cl\n    6960:\t40 0f 95 c6          \tsetne  %sil\n    6964:\t48 89 c7             \tmov    %rax,%rdi\n    6967:\t83 e7 07             \tand    $0x7,%edi\n    696a:\t83 c7 03             \tadd    $0x3,%edi\n    696d:\t40 38 cf             \tcmp    %cl,%dil\n    6970:\t0f 9d c1             \tsetge  %cl\n    6973:\t21 f1                \tand    %esi,%ecx\n    6975:\t84 c9                \ttest   %cl,%cl\n    6977:\t74 08                \tje     6981 <az_advance_wall_data_index+0x181>\n    6979:\t48 89 c7             \tmov    %rax,%rdi\n    697c:\te8 00 00 00 00       \tcallq  6981 <az_advance_wall_data_index+0x181>\n    6981:\t48 63 c2             \tmovslq %edx,%rax\n    6984:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    698b:\tc9                   \tleaveq \n    698c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall az_advance_wall_data_index(int <span class=\"supfact\">a1</span>,\n                                              int <span class=\"supfact\">a2</span>,\n                                              double <span class=\"supfact\">a3</span>) {\n  char v3;\n  int v4;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v7</span>;\n  if (!reverse_indices_initialized) {\n    _asan_handle_no_return(<span class=\"supfact\">a3</span>);\n    _assert_fail(String, String, Number, String);\n  }\n  if (<span class=\"supfact\">a1</span> < Number)\n    goto LABEL_7;\n  if (*(_BYTE *)(((unsigned __int64)&AZ_NUM_WALL_DATAS >> Number) + Number) !=\n          Number &&\n      (char)(((unsigned __int8)&AZ_NUM_WALL_DATAS & Number) + Number) >=\n          *(_BYTE *)(((unsigned __int64)&AZ_NUM_WALL_DATAS >> Number) +\n                     Number)) {\n    <span class=\"supfact\">a3</span> = _asan_report_load4(&AZ_NUM_WALL_DATAS);\n  }\n  if (<span class=\"supfact\">a1</span> >= AZ_NUM_WALL_DATAS) {\n  LABEL_7:\n    _asan_handle_no_return(<span class=\"supfact\">a3</span>);\n    _assert_fail(String, String, Number, String);\n  }\n  v3 = *(_BYTE *)(((unsigned __int64)&reverse_wall_data_indices\n                       [<span class=\"supfact\">a1</span>] >>\n                   Number) +\n                  Number);\n  if (v3 != Number &&\n      (char)(((unsigned __int8)&reverse_wall_data_indices[<span class=\"supfact\">a1</span>] &\n              Number) +\n             Number) >= v3)\n    _asan_report_load4(&reverse_wall_data_indices[<span class=\"supfact\">a1</span>]);\n  <span class=\"supfact\">v7</span> = reverse_wall_data_indices[<span class=\"supfact\">a1</span>];\n  if (*(_BYTE *)(((unsigned __int64)&AZ_NUM_WALL_DATAS >> Number) + Number) !=\n          Number &&\n      (char)(((unsigned __int8)&AZ_NUM_WALL_DATAS & Number) + Number) >=\n          *(_BYTE *)(((unsigned __int64)&AZ_NUM_WALL_DATAS >> Number) +\n                     Number)) {\n    _asan_report_load4(&AZ_NUM_WALL_DATAS);\n  }\n  v4 = az_modulo((unsigned int)(<span class=\"supfact\">v7</span> + <span class=\"supfact\">a2</span>),\n                 AZ_NUM_WALL_DATAS);\n  <span class=\"supfact\">v5</span> = (unsigned __int64)&wall_data_indices[v4];\n  if (*(_BYTE *)((<span class=\"supfact\">v5</span> >> Number) + Number) != Number &&\n      (char)((<span class=\"supfact\">v5</span> & Number) + Number) >=\n          *(_BYTE *)((<span class=\"supfact\">v5</span> >> Number) + Number))\n    _asan_report_load4(<span class=\"supfact\">v5</span>);\n  return (unsigned int)wall_data_indices[v4];\n}", "code_t": "int __cdecl az_advance_wall_data_index(int <span class=\"supfact\">wall_data_index</span>,\n                                       int <span class=\"supfact\">delta</span>) {\n  char v2;\n  int v3;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">old</span>;\n  if (!reverse_indices_initialized) {\n    _asan_handle_no_return();\n    _assert_fail(String, String, Number, String);\n  }\n  if (<span class=\"supfact\">wall_data_index</span> < Number)\n    goto LABEL_7;\n  if (*(_BYTE *)(((unsigned __int64)&AZ_NUM_WALL_DATAS >> Number) + Number) !=\n          Number &&\n      (char)(((unsigned __int8)&AZ_NUM_WALL_DATAS & Number) + Number) >=\n          *(_BYTE *)(((unsigned __int64)&AZ_NUM_WALL_DATAS >> Number) +\n                     Number)) {\n    _asan_report_load4(&AZ_NUM_WALL_DATAS);\n  }\n  if (<span class=\"supfact\">wall_data_index</span> >= AZ_NUM_WALL_DATAS) {\n  LABEL_7:\n    _asan_handle_no_return();\n    _assert_fail(String, String, Number, String);\n  }\n  v2 = *(_BYTE *)(((unsigned __int64)&reverse_wall_data_indices\n                       [<span class=\"supfact\">wall_data_index</span>] >>\n                   Number) +\n                  Number);\n  if (v2 != Number && (char)(((unsigned __int8)&reverse_wall_data_indices\n                                  [<span class=\"supfact\">wall_data_index</span>] &\n                              Number) +\n                             Number) >= v2)\n    _asan_report_load4(\n        &reverse_wall_data_indices[<span class=\"supfact\">wall_data_index</span>]);\n  <span class=\"supfact\">old</span> =\n      reverse_wall_data_indices[<span class=\"supfact\">wall_data_index</span>];\n  if (*(_BYTE *)(((unsigned __int64)&AZ_NUM_WALL_DATAS >> Number) + Number) !=\n          Number &&\n      (char)(((unsigned __int8)&AZ_NUM_WALL_DATAS & Number) + Number) >=\n          *(_BYTE *)(((unsigned __int64)&AZ_NUM_WALL_DATAS >> Number) +\n                     Number)) {\n    _asan_report_load4(&AZ_NUM_WALL_DATAS);\n  }\n  v3 = az_modulo((unsigned int)(<span class=\"supfact\">old</span> + <span class=\"supfact\">delta</span>),\n                 AZ_NUM_WALL_DATAS);\n  <span class=\"supfact\">v4</span> = (unsigned __int64)&wall_data_indices[v3];\n  if (*(_BYTE *)((<span class=\"supfact\">v4</span> >> Number) + Number) != Number &&\n      (char)((<span class=\"supfact\">v4</span> & Number) + Number) >=\n          *(_BYTE *)((<span class=\"supfact\">v4</span> >> Number) + Number))\n    _asan_report_load4(<span class=\"supfact\">v4</span>);\n  return wall_data_indices[v3];\n}", "var": [{"name": "a1", "type": "int", "pred_name": "index", "ref_name": "wall_data_index", "ref_type": "int"}, {"name": "a2", "type": "int", "pred_name": "count", "ref_name": "delta", "ref_type": "int"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v5", "type": "const char *", "pred_name": "v4", "ref_name": "v4", "ref_type": "unsigned __int64"}, {"name": "v7", "type": "int", "pred_name": "__unk__", "ref_name": "old", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "mezentsev", "repo_name": "OpenSSL-Backport", "path": "mezentsev/OpenSSL-Backport/dca1753b72653d99e2b3b55adcab4ec0ad0d0dff9de71c0cb3aa9e54095b03bf", "path_in_repo": "mezentsev/OpenSSL-Backport/openssl-1.0.1c/crypto/pkcs7/pk7_smime.o", "objdump": "0000000000000615 <pkcs7_copy_existing_digest>:\n     615:\t55                   \tpush   %rbp\n     616:\t48 89 e5             \tmov    %rsp,%rbp\n     619:\t48 83 ec 30          \tsub    $0x30,%rsp\n     61d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     621:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     625:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     62c:\t00 \n     62d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     631:\t48 89 c7             \tmov    %rax,%rdi\n     634:\te8 00 00 00 00       \tcallq  639 <pkcs7_copy_existing_digest+0x24>\n     639:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     63d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     644:\teb 73                \tjmp    6b9 <pkcs7_copy_existing_digest+0xa4>\n     646:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     649:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     64d:\t89 d6                \tmov    %edx,%esi\n     64f:\t48 89 c7             \tmov    %rax,%rdi\n     652:\te8 00 00 00 00       \tcallq  657 <pkcs7_copy_existing_digest+0x42>\n     657:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     65b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     65f:\t48 3b 45 e0          \tcmp    -0x20(%rbp),%rax\n     663:\t74 6b                \tje     6d0 <pkcs7_copy_existing_digest+0xbb>\n     665:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     669:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     66d:\t48 89 c7             \tmov    %rax,%rdi\n     670:\te8 00 00 00 00       \tcallq  675 <pkcs7_copy_existing_digest+0x60>\n     675:\t85 c0                \ttest   %eax,%eax\n     677:\t7e 3b                \tjle    6b4 <pkcs7_copy_existing_digest+0x9f>\n     679:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     67d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     681:\t48 8b 10             \tmov    (%rax),%rdx\n     684:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     688:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     68c:\t48 8b 00             \tmov    (%rax),%rax\n     68f:\t48 89 d6             \tmov    %rdx,%rsi\n     692:\t48 89 c7             \tmov    %rax,%rdi\n     695:\te8 00 00 00 00       \tcallq  69a <pkcs7_copy_existing_digest+0x85>\n     69a:\t85 c0                \ttest   %eax,%eax\n     69c:\t75 17                \tjne    6b5 <pkcs7_copy_existing_digest+0xa0>\n     69e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     6a2:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     6a6:\t48 89 c7             \tmov    %rax,%rdi\n     6a9:\te8 00 00 00 00       \tcallq  6ae <pkcs7_copy_existing_digest+0x99>\n     6ae:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     6b2:\teb 1d                \tjmp    6d1 <pkcs7_copy_existing_digest+0xbc>\n     6b4:\t90                   \tnop\n     6b5:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     6b9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     6bd:\t48 89 c7             \tmov    %rax,%rdi\n     6c0:\te8 00 00 00 00       \tcallq  6c5 <pkcs7_copy_existing_digest+0xb0>\n     6c5:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n     6c8:\t0f 8c 78 ff ff ff    \tjl     646 <pkcs7_copy_existing_digest+0x31>\n     6ce:\teb 01                \tjmp    6d1 <pkcs7_copy_existing_digest+0xbc>\n     6d0:\t90                   \tnop\n     6d1:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     6d6:\t74 1f                \tje     6f7 <pkcs7_copy_existing_digest+0xe2>\n     6d8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     6dc:\t8b 10                \tmov    (%rax),%edx\n     6de:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     6e2:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n     6e6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     6ea:\t48 89 ce             \tmov    %rcx,%rsi\n     6ed:\t48 89 c7             \tmov    %rax,%rdi\n     6f0:\te8 00 00 00 00       \tcallq  6f5 <pkcs7_copy_existing_digest+0xe0>\n     6f5:\teb 24                \tjmp    71b <pkcs7_copy_existing_digest+0x106>\n     6f7:\t41 b8 05 01 00 00    \tmov    $0x105,%r8d\n     6fd:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     702:\tba 9a 00 00 00       \tmov    $0x9a,%edx\n     707:\tbe 8a 00 00 00       \tmov    $0x8a,%esi\n     70c:\tbf 21 00 00 00       \tmov    $0x21,%edi\n     711:\te8 00 00 00 00       \tcallq  716 <pkcs7_copy_existing_digest+0x101>\n     716:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     71b:\tc9                   \tleaveq \n     71c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pkcs7_copy_existing_digest(__int64 <span class=\"supfact\">a1</span>,\n                                              __int64 <span class=\"supfact\">a2</span>) {\n  int <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned int *<span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v6</span> = Number L;\n  <span class=\"supfact\">v5</span> = PKCS7_get_signer_info(<span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v7</span> = Number;\n  for (<span class=\"supfact\">i</span> = sk_num(<span class=\"supfact\">v5</span>);\n       (int)<span class=\"supfact\">v7</span> < <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = sk_num(<span class=\"supfact\">v5</span>)) {\n    <span class=\"supfact\">v4</span> = sk_value(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v7</span>);\n    if (<span class=\"supfact\">a2</span> == <span class=\"supfact\">v4</span>)\n      break;\n    if ((int)sk_num(*(_QWORD *)(<span class=\"supfact\">v4</span> + Number)) > Number &&\n        !(unsigned int)OBJ_cmp(**(_QWORD **)(<span class=\"supfact\">a2</span> + Number),\n                               **(_QWORD **)(<span class=\"supfact\">v4</span> + Number))) {\n      <span class=\"supfact\">v6</span> = (unsigned int *)PKCS7_digest_from_attributes(\n          *(_QWORD *)(<span class=\"supfact\">v4</span> + Number));\n      break;\n    }\n    ++<span class=\"supfact\">v7</span>;\n  }\n  if (<span class=\"supfact\">v6</span>)\n    return PKCS7_add1_attrib_digest(<span class=\"supfact\">a2</span>,\n                                    *((_QWORD *)<span class=\"supfact\">v6</span> + Number),\n                                    *<span class=\"supfact\">v6</span>);\n  ERR_put_error(Number L, Number L, Number L, String, Number L);\n  return Number L;\n}", "code_t": "int __cdecl pkcs7_copy_existing_digest(\n    PKCS7 *<span class=\"supfact\">p7</span>, PKCS7_SIGNER_INFO *<span class=\"supfact\">si_0</span>) {\n  PKCS7_SIGNER_INFO *<span class=\"supfact\">sitmp</span>;\n  stack_st_PKCS7_SIGNER_INFO *<span class=\"supfact\">sinfos</span>;\n  ASN1_OCTET_STRING *<span class=\"supfact\">osdig</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">osdig</span> = Number L;\n  <span class=\"supfact\">sinfos</span> =\n      (stack_st_PKCS7_SIGNER_INFO *)PKCS7_get_signer_info(<span class=\"supfact\">p7</span>);\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < (int)sk_num(<span class=\"supfact\">sinfos</span>);\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">sitmp</span> = (PKCS7_SIGNER_INFO *)sk_value(\n        <span class=\"supfact\">sinfos</span>, (unsigned int)<span class=\"supfact\">i</span>);\n    if (<span class=\"supfact\">si_0</span> == <span class=\"supfact\">sitmp</span>)\n      break;\n    if ((int)sk_num(<span class=\"supfact\">sitmp</span>->auth_attr) > Number &&\n        !(unsigned int)OBJ_cmp(<span class=\"supfact\">si_0</span>->digest_alg->algorithm,\n                               <span class=\"supfact\">sitmp</span>->digest_alg->algorithm)) {\n      <span class=\"supfact\">osdig</span> = (ASN1_OCTET_STRING *)PKCS7_digest_from_attributes(\n          <span class=\"supfact\">sitmp</span>->auth_attr);\n      break;\n    }\n  }\n  if (<span class=\"supfact\">osdig</span>)\n    return PKCS7_add1_attrib_digest(\n        <span class=\"supfact\">si_0</span>, <span class=\"supfact\">osdig</span>->data,\n        (unsigned int)<span class=\"supfact\">osdig</span>->length);\n  ERR_put_error(Number L, Number L, Number L, String, Number L);\n  return Number;\n}", "var": [{"name": "a1", "type": "PKCS7 *", "pred_name": "p7", "ref_name": "p7", "ref_type": "PKCS7 *"}, {"name": "a2", "type": "PKCS7_SIGNER_INFO *", "pred_name": "si_0", "ref_name": "si_0", "ref_type": "PKCS7_SIGNER_INFO *"}, {"name": "i", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v4", "type": "PKCS7_SIGNER_INFO *", "pred_name": "si_0", "ref_name": "sitmp", "ref_type": "PKCS7_SIGNER_INFO *"}, {"name": "v5", "type": "ASN1_OCTET_STRING *", "pred_name": "os", "ref_name": "sinfos", "ref_type": "stack_st_PKCS7_SIGNER_INFO *"}, {"name": "v6", "type": "__unk__", "pred_name": "sk", "ref_name": "osdig", "ref_type": "ASN1_OCTET_STRING *"}, {"name": "v7", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "SymbianSource", "repo_name": "oss.FCL.interim.QEMU", "path": "SymbianSource/oss.FCL.interim.QEMU/b2974f32dd04f9cb18645a2bd74f1d4437cdc84ad204f4f9d31755927350cf09", "path_in_repo": "SymbianSource/oss.FCL.interim.QEMU/symbian-qemu-0.9.1-12/qemu-symbian-svp/mips-linux-user/tcg/tcg.o", "objdump": "000000000000324f <tcg_const_i64>:\n    324f:\t55                   \tpush   %rbp\n    3250:\t48 89 e5             \tmov    %rsp,%rbp\n    3253:\t48 83 ec 20          \tsub    $0x20,%rsp\n    3257:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    325b:\te8 43 ce ff ff       \tcallq  a3 <tcg_temp_new_i64>\n    3260:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    3263:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    3267:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    326a:\t48 89 d6             \tmov    %rdx,%rsi\n    326d:\t89 c7                \tmov    %eax,%edi\n    326f:\te8 2f cf ff ff       \tcallq  1a3 <tcg_gen_movi_i64>\n    3274:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    3277:\tc9                   \tleaveq \n    3278:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tcg_const_i64(__int64 <span class=\"supfact\">a1</span>) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = tcg_temp_new_i64();\n  tcg_gen_movi_i64(<span class=\"supfact\">v2</span>, <span class=\"supfact\">a1</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "TCGv_i64 __cdecl tcg_const_i64(int64_t <span class=\"supfact\">val</span>) {\n  TCGv_i64 <span class=\"supfact\">t0</span>;\n  <span class=\"supfact\">t0</span> = tcg_temp_new_i64();\n  tcg_gen_movi_i64(<span class=\"supfact\">t0</span>, <span class=\"supfact\">val</span>);\n  return <span class=\"supfact\">t0</span>;\n}", "var": [{"name": "a1", "type": "int64_t", "pred_name": "val", "ref_name": "val", "ref_type": "int64_t"}, {"name": "v2", "type": "TCGv_i64", "pred_name": "t0", "ref_name": "t0", "ref_type": "TCGv_i64"}], "body_in_train": true}, {"repo_owner": "wnoguchi", "repo_name": "hikari_denwa_asterisk", "path": "wnoguchi/hikari_denwa_asterisk/513dcb0a92eafe6237d3f1016fb0a9d8e0e0abaa48a3af0a523fb3d2c8d326f6", "path_in_repo": "wnoguchi/hikari_denwa_asterisk/asterisk-11.0.1/res/pjproject/pjnath/bin/pjturn-client-x86_64-unknown-linux-gnu", "objdump": "0000000000428986 <pj_pop_exception_handler_>:\n  428986:\t55                   \tpush   %rbp\n  428987:\t48 89 e5             \tmov    %rsp,%rbp\n  42898a:\t48 83 ec 20          \tsub    $0x20,%rsp\n  42898e:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  428992:\t48 8b 05 97 b3 01 00 \tmov    0x1b397(%rip),%rax        # 443d30 <thread_local_id>\n  428999:\t48 89 c7             \tmov    %rax,%rdi\n  42899c:\te8 d9 a8 ff ff       \tcallq  42327a <pj_thread_local_get>\n  4289a1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4289a5:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4289aa:\t74 23                \tje     4289cf <pj_pop_exception_handler_+0x49>\n  4289ac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4289b0:\t48 3b 45 e8          \tcmp    -0x18(%rbp),%rax\n  4289b4:\t75 19                \tjne    4289cf <pj_pop_exception_handler_+0x49>\n  4289b6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4289ba:\t48 8b 10             \tmov    (%rax),%rdx\n  4289bd:\t48 8b 05 6c b3 01 00 \tmov    0x1b36c(%rip),%rax        # 443d30 <thread_local_id>\n  4289c4:\t48 89 d6             \tmov    %rdx,%rsi\n  4289c7:\t48 89 c7             \tmov    %rax,%rdi\n  4289ca:\te8 6d a8 ff ff       \tcallq  42323c <pj_thread_local_set>\n  4289cf:\t90                   \tnop\n  4289d0:\tc9                   \tleaveq \n  4289d1:\tc3                   \tretq   ", "code_s": "const void **__fastcall pj_pop_exception_handler_(\n    const void **<span class=\"supfact\">a1</span>) {\n  const void **<span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = (const void **)pj_thread_local_get(thread_local_id);\n  if (<span class=\"supfact\">result</span>) {\n    if (<span class=\"supfact\">result</span> == <span class=\"supfact\">a1</span>)\n      <span class=\"supfact\">result</span> = (const void **)pj_thread_local_set(\n          thread_local_id, *<span class=\"supfact\">result</span>);\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl pj_pop_exception_handler_(\n    pj_exception_state_t *<span class=\"supfact\">rec</span>) {\n  pj_exception_state_t *handler;\n  handler = (pj_exception_state_t *)pj_thread_local_get(thread_local_id);\n  if (handler) {\n    if (handler == <span class=\"supfact\">rec</span>)\n      pj_thread_local_set(thread_local_id, handler->prev);\n  }\n}", "var": [{"name": "a1", "type": "pj_exception_state_t *", "pred_name": "rec", "ref_name": "rec", "ref_type": "pj_exception_state_t *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "sekcheong", "repo_name": "tgrep2", "path": "sekcheong/tgrep2/c3c0148e6eda0ba194943c5c6d7d67ff9e34261f2c4b28a3de0963ab70b38733", "path_in_repo": "sekcheong/tgrep2//tgrep2", "objdump": "000000000040c5c7 <readLine>:\n  40c5c7:\t55                   \tpush   %rbp\n  40c5c8:\t48 89 e5             \tmov    %rsp,%rbp\n  40c5cb:\t48 81 ec 10 04 00 00 \tsub    $0x410,%rsp\n  40c5d2:\t48 89 bd f8 fb ff ff \tmov    %rdi,-0x408(%rbp)\n  40c5d9:\t48 89 b5 f0 fb ff ff \tmov    %rsi,-0x410(%rbp)\n  40c5e0:\t48 8b 85 f8 fb ff ff \tmov    -0x408(%rbp),%rax\n  40c5e7:\t48 89 c7             \tmov    %rax,%rdi\n  40c5ea:\te8 75 ff ff ff       \tcallq  40c564 <clearString>\n  40c5ef:\t48 8b 95 f0 fb ff ff \tmov    -0x410(%rbp),%rdx\n  40c5f6:\t48 8d 85 00 fc ff ff \tlea    -0x400(%rbp),%rax\n  40c5fd:\tbe 00 04 00 00       \tmov    $0x400,%esi\n  40c602:\t48 89 c7             \tmov    %rax,%rdi\n  40c605:\te8 c6 5b ff ff       \tcallq  4021d0 <fgets@plt>\n  40c60a:\t48 85 c0             \ttest   %rax,%rax\n  40c60d:\t75 14                \tjne    40c623 <readLine+0x5c>\n  40c60f:\t48 8b 85 f8 fb ff ff \tmov    -0x408(%rbp),%rax\n  40c616:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40c619:\t85 c0                \ttest   %eax,%eax\n  40c61b:\t0f 9f c0             \tsetg   %al\n  40c61e:\t0f b6 c0             \tmovzbl %al,%eax\n  40c621:\teb 77                \tjmp    40c69a <readLine+0xd3>\n  40c623:\t48 8d 95 00 fc ff ff \tlea    -0x400(%rbp),%rdx\n  40c62a:\t48 8b 85 f8 fb ff ff \tmov    -0x408(%rbp),%rax\n  40c631:\t48 89 d6             \tmov    %rdx,%rsi\n  40c634:\t48 89 c7             \tmov    %rax,%rdi\n  40c637:\te8 63 fe ff ff       \tcallq  40c49f <stringAppend>\n  40c63c:\t48 8b 85 f8 fb ff ff \tmov    -0x408(%rbp),%rax\n  40c643:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  40c647:\t48 8b 85 f8 fb ff ff \tmov    -0x408(%rbp),%rax\n  40c64e:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40c651:\t48 98                \tcltq   \n  40c653:\t48 83 e8 01          \tsub    $0x1,%rax\n  40c657:\t48 01 d0             \tadd    %rdx,%rax\n  40c65a:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c65d:\t3c 0a                \tcmp    $0xa,%al\n  40c65f:\t75 8e                \tjne    40c5ef <readLine+0x28>\n  40c661:\t48 8b 85 f8 fb ff ff \tmov    -0x408(%rbp),%rax\n  40c668:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  40c66c:\t48 8b 85 f8 fb ff ff \tmov    -0x408(%rbp),%rax\n  40c673:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40c676:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n  40c679:\t48 8b 85 f8 fb ff ff \tmov    -0x408(%rbp),%rax\n  40c680:\t89 48 08             \tmov    %ecx,0x8(%rax)\n  40c683:\t48 8b 85 f8 fb ff ff \tmov    -0x408(%rbp),%rax\n  40c68a:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40c68d:\t48 98                \tcltq   \n  40c68f:\t48 01 d0             \tadd    %rdx,%rax\n  40c692:\tc6 00 00             \tmovb   $0x0,(%rax)\n  40c695:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40c69a:\tc9                   \tleaveq \n  40c69b:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall readLine(__int64 <span class=\"supfact\">a1</span>,\n                           FILE *<span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  char <span class=\"supfact\">s</span>[Number];\n  clearString(<span class=\"supfact\">a1</span>);\n  do {\n    if (!fgets(<span class=\"supfact\">s</span>, Number, <span class=\"supfact\">a2</span>))\n      return *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) > Number;\n    stringAppend(<span class=\"supfact\">a1</span>, <span class=\"supfact\">s</span>);\n  } while (*(_BYTE *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                      *(int *)(<span class=\"supfact\">a1</span> + Number) - Number L) !=\n           Number);\n  <span class=\"supfact\">v3</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  *(_BYTE *)(<span class=\"supfact\">v3</span> +\n             (int)--*(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) = Number;\n  return Number L;\n}", "code_t": "flag __cdecl readLine(String <span class=\"supfact\">S</span>, FILE *<span class=\"supfact\">file</span>) {\n  char *<span class=\"supfact\">v3</span>;\n  char <span class=\"supfact\">buf</span>[Number];\n  clearString(<span class=\"supfact\">S</span>);\n  do {\n    if (!fgets(<span class=\"supfact\">buf</span>, Number, <span class=\"supfact\">file</span>))\n      return <span class=\"supfact\">S</span>->numChars > Number;\n    stringAppend(<span class=\"supfact\">S</span>, <span class=\"supfact\">buf</span>);\n  } while (<span class=\"supfact\">S</span>->s[<span class=\"supfact\">S</span>->numChars - Number] !=\n           Number);\n  <span class=\"supfact\">v3</span> = <span class=\"supfact\">S</span>->s;\n  <span class=\"supfact\">v3</span>[--<span class=\"supfact\">S</span>->numChars] = Number;\n  return Number;\n}", "var": [{"name": "a1", "type": "string", "pred_name": "s", "ref_name": "S", "ref_type": "String"}, {"name": "a2", "type": "FILE *", "pred_name": "file", "ref_name": "file", "ref_type": "FILE *"}, {"name": "v3", "type": "char *", "pred_name": "v3", "ref_name": "v3", "ref_type": "char *"}, {"name": "s", "type": "char[1024]", "pred_name": "line", "ref_name": "buf", "ref_type": "char[1024]"}], "body_in_train": false}, {"repo_owner": "wipple", "repo_name": "GPAC-old", "path": "wipple/GPAC-old/6cb84d14db242b31716d4ad054c7237fe512a5e63985e64a1c3115f3c5f2437b", "path_in_repo": "wipple/GPAC-old/src/isomedia/box_dump.o", "objdump": "0000000000006b0c <meta_dump>:\n    6b0c:\t55                   \tpush   %rbp\n    6b0d:\t48 89 e5             \tmov    %rsp,%rbp\n    6b10:\t48 83 ec 20          \tsub    $0x20,%rsp\n    6b14:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    6b18:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    6b1c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6b20:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    6b24:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    6b28:\t48 89 c1             \tmov    %rax,%rcx\n    6b2b:\tba 0a 00 00 00       \tmov    $0xa,%edx\n    6b30:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    6b35:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6b3c <meta_dump+0x30>\n    6b3c:\te8 00 00 00 00       \tcallq  6b41 <meta_dump+0x35>\n    6b41:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6b45:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6b49:\t48 89 d6             \tmov    %rdx,%rsi\n    6b4c:\t48 89 c7             \tmov    %rax,%rdi\n    6b4f:\te8 00 00 00 00       \tcallq  6b54 <meta_dump+0x48>\n    6b54:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6b58:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6b5c:\t48 89 d6             \tmov    %rdx,%rsi\n    6b5f:\t48 89 c7             \tmov    %rax,%rdi\n    6b62:\te8 00 00 00 00       \tcallq  6b67 <meta_dump+0x5b>\n    6b67:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6b6b:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    6b6f:\t48 85 c0             \ttest   %rax,%rax\n    6b72:\t74 17                \tje     6b8b <meta_dump+0x7f>\n    6b74:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6b78:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    6b7c:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6b80:\t48 89 d6             \tmov    %rdx,%rsi\n    6b83:\t48 89 c7             \tmov    %rax,%rdi\n    6b86:\te8 00 00 00 00       \tcallq  6b8b <meta_dump+0x7f>\n    6b8b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6b8f:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    6b93:\t48 85 c0             \ttest   %rax,%rax\n    6b96:\t74 17                \tje     6baf <meta_dump+0xa3>\n    6b98:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6b9c:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    6ba0:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6ba4:\t48 89 d6             \tmov    %rdx,%rsi\n    6ba7:\t48 89 c7             \tmov    %rax,%rdi\n    6baa:\te8 00 00 00 00       \tcallq  6baf <meta_dump+0xa3>\n    6baf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6bb3:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    6bb7:\t48 85 c0             \ttest   %rax,%rax\n    6bba:\t74 17                \tje     6bd3 <meta_dump+0xc7>\n    6bbc:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6bc0:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    6bc4:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6bc8:\t48 89 d6             \tmov    %rdx,%rsi\n    6bcb:\t48 89 c7             \tmov    %rax,%rdi\n    6bce:\te8 00 00 00 00       \tcallq  6bd3 <meta_dump+0xc7>\n    6bd3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6bd7:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    6bdb:\t48 85 c0             \ttest   %rax,%rax\n    6bde:\t74 17                \tje     6bf7 <meta_dump+0xeb>\n    6be0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6be4:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    6be8:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6bec:\t48 89 d6             \tmov    %rdx,%rsi\n    6bef:\t48 89 c7             \tmov    %rax,%rdi\n    6bf2:\te8 00 00 00 00       \tcallq  6bf7 <meta_dump+0xeb>\n    6bf7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6bfb:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    6bff:\t48 85 c0             \ttest   %rax,%rax\n    6c02:\t74 17                \tje     6c1b <meta_dump+0x10f>\n    6c04:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6c08:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    6c0c:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6c10:\t48 89 d6             \tmov    %rdx,%rsi\n    6c13:\t48 89 c7             \tmov    %rax,%rdi\n    6c16:\te8 00 00 00 00       \tcallq  6c1b <meta_dump+0x10f>\n    6c1b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6c1f:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    6c23:\t48 85 c0             \ttest   %rax,%rax\n    6c26:\t74 17                \tje     6c3f <meta_dump+0x133>\n    6c28:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6c2c:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    6c30:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6c34:\t48 89 d6             \tmov    %rdx,%rsi\n    6c37:\t48 89 c7             \tmov    %rax,%rdi\n    6c3a:\te8 00 00 00 00       \tcallq  6c3f <meta_dump+0x133>\n    6c3f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6c43:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    6c47:\t48 85 c0             \ttest   %rax,%rax\n    6c4a:\t74 17                \tje     6c63 <meta_dump+0x157>\n    6c4c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6c50:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    6c54:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6c58:\t48 89 d6             \tmov    %rdx,%rsi\n    6c5b:\t48 89 c7             \tmov    %rax,%rdi\n    6c5e:\te8 00 00 00 00       \tcallq  6c63 <meta_dump+0x157>\n    6c63:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6c67:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n    6c6b:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    6c6f:\t48 89 d6             \tmov    %rdx,%rsi\n    6c72:\t48 89 c7             \tmov    %rax,%rdi\n    6c75:\te8 00 00 00 00       \tcallq  6c7a <meta_dump+0x16e>\n    6c7a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    6c7e:\t48 89 c1             \tmov    %rax,%rcx\n    6c81:\tba 0b 00 00 00       \tmov    $0xb,%edx\n    6c86:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    6c8b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6c92 <meta_dump+0x186>\n    6c92:\te8 00 00 00 00       \tcallq  6c97 <meta_dump+0x18b>\n    6c97:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6c9c:\tc9                   \tleaveq \n    6c9d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall meta_dump(__int64 <span class=\"supfact\">a1</span>,\n                             FILE *<span class=\"supfact\">a2</span>) {\n  fwrite(String, Number, Number, <span class=\"supfact\">a2</span>);\n  DumpBox((unsigned int *)<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n  gf_full_box_dump(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    gf_box_dump(*(unsigned int **)(<span class=\"supfact\">a1</span> + Number),\n                <span class=\"supfact\">a2</span>);\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    gf_box_dump(*(unsigned int **)(<span class=\"supfact\">a1</span> + Number),\n                <span class=\"supfact\">a2</span>);\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    gf_box_dump(*(unsigned int **)(<span class=\"supfact\">a1</span> + Number),\n                <span class=\"supfact\">a2</span>);\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    gf_box_dump(*(unsigned int **)(<span class=\"supfact\">a1</span> + Number),\n                <span class=\"supfact\">a2</span>);\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    gf_box_dump(*(unsigned int **)(<span class=\"supfact\">a1</span> + Number),\n                <span class=\"supfact\">a2</span>);\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    gf_box_dump(*(unsigned int **)(<span class=\"supfact\">a1</span> + Number),\n                <span class=\"supfact\">a2</span>);\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    gf_box_dump(*(unsigned int **)(<span class=\"supfact\">a1</span> + Number),\n                <span class=\"supfact\">a2</span>);\n  gf_box_array_dump(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                    <span class=\"supfact\">a2</span>);\n  fwrite(String, Number, Number, <span class=\"supfact\">a2</span>);\n  return Number L;\n}", "code_t": "GF_Err __cdecl meta_dump(GF_Box *<span class=\"supfact\">a</span>,\n                         FILE *<span class=\"supfact\">trace</span>) {\n  fwrite(String, Number, Number, <span class=\"supfact\">trace</span>);\n  DumpBox(<span class=\"supfact\">a</span>, <span class=\"supfact\">trace</span>);\n  gf_full_box_dump(<span class=\"supfact\">a</span>, <span class=\"supfact\">trace</span>);\n  if (<span class=\"supfact\">a</span>[Number].size)\n    gf_box_dump((void *)<span class=\"supfact\">a</span>[Number].size, <span class=\"supfact\">trace</span>);\n  if (*(_QWORD *)&<span class=\"supfact\">a</span>[Number].type)\n    gf_box_dump(*(void **)&<span class=\"supfact\">a</span>[Number].type,\n                <span class=\"supfact\">trace</span>);\n  if (<span class=\"supfact\">a</span>[Number].size)\n    gf_box_dump((void *)<span class=\"supfact\">a</span>[Number].size, <span class=\"supfact\">trace</span>);\n  if (*(_QWORD *)&<span class=\"supfact\">a</span>[Number].type)\n    gf_box_dump(*(void **)&<span class=\"supfact\">a</span>[Number].type,\n                <span class=\"supfact\">trace</span>);\n  if (<span class=\"supfact\">a</span>[Number].size)\n    gf_box_dump((void *)<span class=\"supfact\">a</span>[Number].size, <span class=\"supfact\">trace</span>);\n  if (*(_QWORD *)&<span class=\"supfact\">a</span>[Number].type)\n    gf_box_dump(*(void **)&<span class=\"supfact\">a</span>[Number].type,\n                <span class=\"supfact\">trace</span>);\n  if (<span class=\"supfact\">a</span>[Number].size)\n    gf_box_dump((void *)<span class=\"supfact\">a</span>[Number].size, <span class=\"supfact\">trace</span>);\n  gf_box_array_dump(*(GF_List **)&<span class=\"supfact\">a</span>[Number].type,\n                    <span class=\"supfact\">trace</span>);\n  fwrite(String, Number, Number, <span class=\"supfact\">trace</span>);\n  return Number;\n}", "var": [{"name": "a1", "type": "GF_Box *", "pred_name": "s", "ref_name": "a", "ref_type": "GF_Box *"}, {"name": "a2", "type": "GF_BitStream *", "pred_name": "bs", "ref_name": "trace", "ref_type": "FILE *"}], "body_in_train": false}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/64ff4f1119dc9a3401eb29d3e647f585df0cc92c34240f110fee7bb356ba1046", "path_in_repo": "eerimoq/pumbaa/simba/tst/oam/shell/build/linux/obj/usr/src/repo/simba/src/sync/chan.o", "objdump": "0000000000000000 <chan_write_isr>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <chan_write_isr+0xd>\n   d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  11:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  15:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  19:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 20 <chan_write_isr+0x20>\n  20:\t48 83 c0 01          \tadd    $0x1,%rax\n  24:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2b <chan_write_isr+0x2b>\n  2b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  2f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  33:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  37:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  3b:\t48 85 c0             \ttest   %rax,%rax\n  3e:\t74 5e                \tje     9e <chan_write_isr+0x9e>\n  40:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 47 <chan_write_isr+0x47>\n  47:\t48 83 c0 01          \tadd    $0x1,%rax\n  4b:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 52 <chan_write_isr+0x52>\n  52:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  56:\t4c 8b 40 30          \tmov    0x30(%rax),%r8\n  5a:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  5e:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  62:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  66:\t48 89 ce             \tmov    %rcx,%rsi\n  69:\t48 89 c7             \tmov    %rax,%rdi\n  6c:\t41 ff d0             \tcallq  *%r8\n  6f:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 76 <chan_write_isr+0x76>\n  76:\t48 83 c2 01          \tadd    $0x1,%rdx\n  7a:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 81 <chan_write_isr+0x81>\n  81:\t83 f8 01             \tcmp    $0x1,%eax\n  84:\t75 18                \tjne    9e <chan_write_isr+0x9e>\n  86:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  8a:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 91 <chan_write_isr+0x91>\n  91:\t48 83 c2 01          \tadd    $0x1,%rdx\n  95:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 9c <chan_write_isr+0x9c>\n  9c:\teb 2f                \tjmp    cd <chan_write_isr+0xcd>\n  9e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  a2:\t4c 8b 40 28          \tmov    0x28(%rax),%r8\n  a6:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  aa:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  ae:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  b2:\t48 89 ce             \tmov    %rcx,%rsi\n  b5:\t48 89 c7             \tmov    %rax,%rdi\n  b8:\t41 ff d0             \tcallq  *%r8\n  bb:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # c2 <chan_write_isr+0xc2>\n  c2:\t48 83 c2 01          \tadd    $0x1,%rdx\n  c6:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # cd <chan_write_isr+0xcd>\n  cd:\tc9                   \tleaveq \n  ce:\tc3                   \tretq   ", "code_s": "__int64 __fastcall chan_write_isr(__int64 <span class=\"supfact\">a1</span>,\n                                  __int64 <span class=\"supfact\">a2</span>,\n                                  __int64 <span class=\"supfact\">a3</span>) {\n  int v3;\n  __int64 result;\n  ++_gcov0_chan_write_isr;\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n      (++qword_1D08,\n       v3 = (*(__int64(__fastcall **)(__int64, __int64, __int64))(\n           <span class=\"supfact\">a1</span> + Number))(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>,\n                                         <span class=\"supfact\">a3</span>),\n       ++qword_1D10, v3 == Number)) {\n    result = <span class=\"supfact\">a3</span>;\n    ++qword_1D18;\n  } else {\n    result = (*(__int64(__fastcall **)(__int64, __int64, __int64))(\n        <span class=\"supfact\">a1</span> + Number))(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>,\n                                      <span class=\"supfact\">a3</span>);\n    ++qword_1D20;\n  }\n  return result;\n}", "code_t": "ssize_t __cdecl chan_write_isr(void *<span class=\"supfact\">self_in_p</span>,\n                               const void *<span class=\"supfact\">buf_p</span>,\n                               size_t <span class=\"supfact\">size</span>) {\n  int v3;\n  ssize_t result;\n  ++_gcov0_chan_write_isr;\n  if (*((_QWORD *)<span class=\"supfact\">self_in_p</span> + Number) &&\n      (++qword_1D08,\n       v3 = (*((__int64(__fastcall **)(void *, const void *,\n                                       size_t))<span class=\"supfact\">self_in_p</span> +\n               Number))(<span class=\"supfact\">self_in_p</span>, <span class=\"supfact\">buf_p</span>,\n                        <span class=\"supfact\">size</span>),\n       ++qword_1D10, v3 == Number)) {\n    result = <span class=\"supfact\">size</span>;\n    ++qword_1D18;\n  } else {\n    result = (*((__int64(__fastcall **)(void *, const void *,\n                                        size_t))<span class=\"supfact\">self_in_p</span> +\n                Number))(<span class=\"supfact\">self_in_p</span>, <span class=\"supfact\">buf_p</span>,\n                         <span class=\"supfact\">size</span>);\n    ++qword_1D20;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "self_in_p", "ref_name": "self_in_p", "ref_type": "void *"}, {"name": "a2", "type": "const void *", "pred_name": "buf_p", "ref_name": "buf_p", "ref_type": "const void *"}, {"name": "a3", "type": "size_t", "pred_name": "size", "ref_name": "size", "ref_type": "size_t"}], "body_in_train": true}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "00000000000061d9 <glAttachShader>:\n    61d9:\t55                   \tpush   %rbp\n    61da:\t48 89 e5             \tmov    %rsp,%rbp\n    61dd:\t48 83 ec 10          \tsub    $0x10,%rsp\n    61e1:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    61e4:\t89 75 f8             \tmov    %esi,-0x8(%rbp)\n    61e7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 61ee <glAttachShader+0x15>\n    61ee:\t48 8b 88 c0 0c 00 00 \tmov    0xcc0(%rax),%rcx\n    61f5:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    61f8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    61fb:\t89 d6                \tmov    %edx,%esi\n    61fd:\t89 c7                \tmov    %eax,%edi\n    61ff:\tff d1                \tcallq  *%rcx\n    6201:\t90                   \tnop\n    6202:\tc9                   \tleaveq \n    6203:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glAttachShader(unsigned int <span class=\"supfact\">a1</span>,\n                                  unsigned int <span class=\"supfact\">a2</span>) {\n  return (*(__int64(__fastcall **)(_QWORD, _QWORD))(glapi_Dispatch + Number L))(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n}", "code_t": "void __cdecl glAttachShader(GLuint <span class=\"supfact\">program</span>,\n                            GLuint <span class=\"supfact\">shader</span>) {\n  (*(void(__fastcall **)(_QWORD, _QWORD))(glapi_Dispatch + Number L))(\n      <span class=\"supfact\">program</span>, <span class=\"supfact\">shader</span>);\n}", "var": [{"name": "a1", "type": "GLuint", "pred_name": "name", "ref_name": "program", "ref_type": "GLuint"}, {"name": "a2", "type": "GLuint", "pred_name": "mode", "ref_name": "shader", "ref_type": "GLuint"}], "body_in_train": false}, {"repo_owner": "isDerek", "repo_name": "BTC-Device", "path": "isDerek/BTC-Device/9eb5bdb0143a63b31132ea31d83410eefa0b801b31f29f5ffc43fd093e6ca1ae", "path_in_repo": "isDerek/BTC-Device/BTC_APP/middleware/multicore/erpc/Debug/Linux/erpcsniffer/obj/erpcgen/src/types/Type.o", "objdump": "0000000000000000 <_ZNK12IntegerValue5cloneEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 10          \tsub    $0x10,%rsp\n   b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   f:\tbf 20 00 00 00       \tmov    $0x20,%edi\n  14:\te8 00 00 00 00       \tcallq  19 <_ZNK12IntegerValue5cloneEv+0x19>\n  19:\t48 89 c3             \tmov    %rax,%rbx\n  1c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  20:\t48 89 c6             \tmov    %rax,%rsi\n  23:\t48 89 df             \tmov    %rbx,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZNK12IntegerValue5cloneEv+0x2b>\n  2b:\t48 89 d8             \tmov    %rbx,%rax\n  2e:\teb 16                \tjmp    46 <_ZNK12IntegerValue5cloneEv+0x46>\n  30:\t49 89 c4             \tmov    %rax,%r12\n  33:\t48 89 df             \tmov    %rbx,%rdi\n  36:\te8 00 00 00 00       \tcallq  3b <_ZNK12IntegerValue5cloneEv+0x3b>\n  3b:\t4c 89 e0             \tmov    %r12,%rax\n  3e:\t48 89 c7             \tmov    %rax,%rdi\n  41:\te8 00 00 00 00       \tcallq  46 <_ZNK12IntegerValue5cloneEv+0x46>\n  46:\t48 83 c4 10          \tadd    $0x10,%rsp\n  4a:\t5b                   \tpop    %rbx\n  4b:\t41 5c                \tpop    %r12\n  4d:\t5d                   \tpop    %rbp\n  4e:\tc3                   \tretq   ", "code_s": "IntegerValue *__fastcall IntegerValue\nclone(IntegerValue *<span class=\"supfact\">this</span>) {\n  IntegerValue *<span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = (IntegerValue *)operator new(Number);\n  IntegerValue IntegerValue(<span class=\"supfact\">v1</span>, <span class=\"supfact\">this</span>);\n  return <span class=\"supfact\">v1</span>;\n}", "code_t": "Value *__cdecl IntegerValue\nclone(const IntegerValue *const <span class=\"supfact\">this</span>) {\n  IntegerValue *<span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = (IntegerValue *)operator new(Number);\n  IntegerValue IntegerValue(<span class=\"supfact\">v1</span>, <span class=\"supfact\">this</span>);\n  return <span class=\"supfact\">v1</span>;\n}", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "const IntegerValue *"}, {"name": "v1", "type": "__unk__", "pred_name": "v1", "ref_name": "v1", "ref_type": "IntegerValue *"}], "body_in_train": false}, {"repo_owner": "webosose", "repo_name": "gst-libav", "path": "webosose/gst-libav/bb0005cd32dd9da1c11415bf0f99ff4e298022bd68404578288cb08deaf03dcf", "path_in_repo": "webosose/gst-libav/gst-libs/ext/libav/libavcodec/x86/vc1dsp_mmx.o", "objdump": "000000000000212b <put_vc1_mspel_mc32_mmx>:\n    212b:\t48 83 ec 28          \tsub    $0x28,%rsp\n    212f:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    2134:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    2139:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    213e:\t89 4c 24 04          \tmov    %ecx,0x4(%rsp)\n    2142:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2147:\t89 c7                \tmov    %eax,%edi\n    2149:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n    214d:\t48 8b 74 24 10       \tmov    0x10(%rsp),%rsi\n    2152:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2157:\t41 89 d1             \tmov    %edx,%r9d\n    215a:\t41 b8 02 00 00 00    \tmov    $0x2,%r8d\n    2160:\tb9 03 00 00 00       \tmov    $0x3,%ecx\n    2165:\t89 fa                \tmov    %edi,%edx\n    2167:\t48 89 c7             \tmov    %rax,%rdi\n    216a:\te8 c4 eb ff ff       \tcallq  d33 <put_vc1_mspel_mc>\n    216f:\t90                   \tnop\n    2170:\t48 83 c4 28          \tadd    $0x28,%rsp\n    2174:\tc3                   \tretq   ", "code_s": "__int64 __fastcall put_vc1_mspel_mc32_mmx(__int64 <span class=\"supfact\">a1</span>,\n                                          __int64 <span class=\"supfact\">a2</span>,\n                                          int <span class=\"supfact\">a3</span>,\n                                          unsigned int <span class=\"supfact\">a4</span>) {\n  return put_vc1_mspel_mc(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>,\n                          <span class=\"supfact\">a3</span>, Number, Number,\n                          <span class=\"supfact\">a4</span>);\n}", "code_t": "void __cdecl put_vc1_mspel_mc32_mmx(uint8_t *<span class=\"supfact\">dst</span>,\n                                    const uint8_t *<span class=\"supfact\">src</span>,\n                                    ptrdiff_t <span class=\"supfact\">stride</span>,\n                                    int <span class=\"supfact\">rnd</span>) {\n  put_vc1_mspel_mc(<span class=\"supfact\">dst</span>, <span class=\"supfact\">src</span>,\n                   <span class=\"supfact\">stride</span>, Number, Number, <span class=\"supfact\">rnd</span>);\n}", "var": [{"name": "a1", "type": "uint8_t *", "pred_name": "dst", "ref_name": "dst", "ref_type": "uint8_t *"}, {"name": "a2", "type": "const uint8_t *", "pred_name": "src", "ref_name": "src", "ref_type": "const uint8_t *"}, {"name": "a3", "type": "ptrdiff_t", "pred_name": "stride", "ref_name": "stride", "ref_type": "ptrdiff_t"}, {"name": "a4", "type": "int", "pred_name": "rnd", "ref_name": "rnd", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "antmicro", "repo_name": "abc-lib", "path": "antmicro/abc-lib/1ca539f2240a0805f8f4c84c9854faf10a1e362bdb6384dbbe82fd8f775fdc10", "path_in_repo": "antmicro/abc-lib//src/proof/live/combination.o", "objdump": "0000000000000fdd <Aig_ObjFanin0>:\n     fdd:\t55                   \tpush   %rbp\n     fde:\t48 89 e5             \tmov    %rsp,%rbp\n     fe1:\t48 83 ec 08          \tsub    $0x8,%rsp\n     fe5:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     fe9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     fed:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     ff1:\t48 89 c7             \tmov    %rax,%rdi\n     ff4:\te8 5e fe ff ff       \tcallq  e57 <Aig_Regular>\n     ff9:\tc9                   \tleaveq \n     ffa:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall Aig_ObjFanin0(__int64 <span class=\"supfact\">a1</span>) {\n  return Aig_Regular(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n}", "code_t": "Aig_Obj_t *__cdecl Aig_ObjFanin0(Aig_Obj_t *<span class=\"supfact\">pObj</span>) {\n  return Aig_Regular(<span class=\"supfact\">pObj</span>->pFanin0);\n}", "var": [{"name": "a1", "type": "Aig_Obj_t *", "pred_name": "pObj", "ref_name": "pObj", "ref_type": "Aig_Obj_t *"}], "body_in_train": true}, {"repo_owner": "IOOPM-UU", "repo_name": "stack-calculator", "path": "IOOPM-UU/stack-calculator/82032a8975a55883159738007f0717c0ec3707b1f23e6f36afcb36e088278f19", "path_in_repo": "IOOPM-UU/stack-calculator/finished/calc", "objdump": "", "code_s": "__int64 (**init_proc())(void) {\n  __int64 (**<span class=\"supfact\">result</span>)(void);\n  <span class=\"supfact\">result</span> = &_gmon_start__;\n  if (&_gmon_start__)\n    <span class=\"supfact\">result</span> = (__int64 (**)(void))_gmon_start__();\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "__int64 (**init_proc())(void) {\n  __int64 (**<span class=\"supfact\">result</span>)(void);\n  <span class=\"supfact\">result</span> = &_gmon_start__;\n  if (&_gmon_start__)\n    <span class=\"supfact\">result</span> = (__int64 (**)(void))_gmon_start__();\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "result", "type": "__int64 (**)(void)", "pred_name": "result", "ref_name": "result", "ref_type": "__int64 (**)(void)"}], "body_in_train": true}, {"repo_owner": "irgeek", "repo_name": "ebtables", "path": "irgeek/ebtables/87c53cac73c8b5e5ebee7158daf8efef625bee89055b6c443cac72e6180c40c1", "path_in_repo": "irgeek/ebtables//useful_functions.o", "objdump": "00000000000005ee <undot_ip>:\n 5ee:\t55                   \tpush   %rbp\n 5ef:\t48 89 e5             \tmov    %rsp,%rbp\n 5f2:\t48 83 ec 50          \tsub    $0x50,%rsp\n 5f6:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n 5fa:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n 5fe:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n 602:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 606:\tba 13 00 00 00       \tmov    $0x13,%edx\n 60b:\t48 89 ce             \tmov    %rcx,%rsi\n 60e:\t48 89 c7             \tmov    %rax,%rdi\n 611:\te8 00 00 00 00       \tcallq  616 <undot_ip+0x28>\n 616:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 61a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 61e:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n 625:\te9 8f 00 00 00       \tjmpq   6b9 <undot_ip+0xcb>\n 62a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 62e:\tbe 2e 00 00 00       \tmov    $0x2e,%esi\n 633:\t48 89 c7             \tmov    %rax,%rdi\n 636:\te8 00 00 00 00       \tcallq  63b <undot_ip+0x4d>\n 63b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 63f:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n 644:\t75 0a                \tjne    650 <undot_ip+0x62>\n 646:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 64b:\te9 c5 00 00 00       \tjmpq   715 <undot_ip+0x127>\n 650:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 654:\tc6 00 00             \tmovb   $0x0,(%rax)\n 657:\t48 8d 4d d8          \tlea    -0x28(%rbp),%rcx\n 65b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 65f:\tba 0a 00 00 00       \tmov    $0xa,%edx\n 664:\t48 89 ce             \tmov    %rcx,%rsi\n 667:\t48 89 c7             \tmov    %rax,%rdi\n 66a:\te8 00 00 00 00       \tcallq  66f <undot_ip+0x81>\n 66f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 673:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 677:\t0f b6 00             \tmovzbl (%rax),%eax\n 67a:\t84 c0                \ttest   %al,%al\n 67c:\t75 11                \tjne    68f <undot_ip+0xa1>\n 67e:\t48 81 7d e8 ff 00 00 \tcmpq   $0xff,-0x18(%rbp)\n 685:\t00 \n 686:\t7f 07                \tjg     68f <undot_ip+0xa1>\n 688:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 68d:\t79 07                \tjns    696 <undot_ip+0xa8>\n 68f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 694:\teb 7f                \tjmp    715 <undot_ip+0x127>\n 696:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 699:\t48 63 d0             \tmovslq %eax,%rdx\n 69c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 6a0:\t48 01 d0             \tadd    %rdx,%rax\n 6a3:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 6a7:\t88 10                \tmov    %dl,(%rax)\n 6a9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 6ad:\t48 83 c0 01          \tadd    $0x1,%rax\n 6b1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 6b5:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n 6b9:\t83 7d f4 02          \tcmpl   $0x2,-0xc(%rbp)\n 6bd:\t0f 8e 67 ff ff ff    \tjle    62a <undot_ip+0x3c>\n 6c3:\t48 8d 4d d8          \tlea    -0x28(%rbp),%rcx\n 6c7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 6cb:\tba 0a 00 00 00       \tmov    $0xa,%edx\n 6d0:\t48 89 ce             \tmov    %rcx,%rsi\n 6d3:\t48 89 c7             \tmov    %rax,%rdi\n 6d6:\te8 00 00 00 00       \tcallq  6db <undot_ip+0xed>\n 6db:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 6df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 6e3:\t0f b6 00             \tmovzbl (%rax),%eax\n 6e6:\t84 c0                \ttest   %al,%al\n 6e8:\t75 11                \tjne    6fb <undot_ip+0x10d>\n 6ea:\t48 81 7d e8 ff 00 00 \tcmpq   $0xff,-0x18(%rbp)\n 6f1:\t00 \n 6f2:\t7f 07                \tjg     6fb <undot_ip+0x10d>\n 6f4:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 6f9:\t79 07                \tjns    702 <undot_ip+0x114>\n 6fb:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 700:\teb 13                \tjmp    715 <undot_ip+0x127>\n 702:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 706:\t48 83 c0 03          \tadd    $0x3,%rax\n 70a:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 70e:\t88 10                \tmov    %dl,(%rax)\n 710:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 715:\tc9                   \tleaveq \n 716:\tc3                   \tretq   ", "code_s": "__int64 __fastcall undot_ip(const char *<span class=\"supfact\">a1</span>,\n                            __int64 <span class=\"supfact\">a2</span>) {\n  char <span class=\"supfact\">dest</span>[Number];\n  char *<span class=\"supfact\">endptr</span>;\n  char *<span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">i</span>;\n  char *<span class=\"supfact\">s</span>;\n  strncpy(<span class=\"supfact\">dest</span>, <span class=\"supfact\">a1</span>, Number);\n  <span class=\"supfact\">s</span> = <span class=\"supfact\">dest</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v5</span> = strchr(<span class=\"supfact\">s</span>, Number);\n    if (!<span class=\"supfact\">v5</span>)\n      return Number;\n    *<span class=\"supfact\">v5</span> = Number;\n    <span class=\"supfact\">v6</span> =\n        strtol(<span class=\"supfact\">s</span>, &<span class=\"supfact\">endptr</span>, Number);\n    if (*<span class=\"supfact\">endptr</span> || <span class=\"supfact\">v6</span> > Number ||\n        <span class=\"supfact\">v6</span> < Number)\n      return Number;\n    *(_BYTE *)(<span class=\"supfact\">i</span> + <span class=\"supfact\">a2</span>) = <span class=\"supfact\">v6</span>;\n    <span class=\"supfact\">s</span> = <span class=\"supfact\">v5</span> + Number;\n  }\n  <span class=\"supfact\">v6</span> =\n      strtol(<span class=\"supfact\">s</span>, &<span class=\"supfact\">endptr</span>, Number);\n  if (*<span class=\"supfact\">endptr</span> || <span class=\"supfact\">v6</span> > Number ||\n      <span class=\"supfact\">v6</span> < Number)\n    return Number;\n  *(_BYTE *)(<span class=\"supfact\">a2</span> + Number) = <span class=\"supfact\">v6</span>;\n  return Number L;\n}", "code_t": "int __cdecl undot_ip(char *<span class=\"supfact\">ip_0</span>,\n                     unsigned __int8 *<span class=\"supfact\">ip2</span>) {\n  char <span class=\"supfact\">buf</span>[Number];\n  char *<span class=\"supfact\">end</span>;\n  char *<span class=\"supfact\">q</span>;\n  __int64 <span class=\"supfact\">onebyte</span>;\n  int <span class=\"supfact\">i</span>;\n  char *<span class=\"supfact\">p</span>;\n  strncpy(<span class=\"supfact\">buf</span>, <span class=\"supfact\">ip_0</span>, Number);\n  <span class=\"supfact\">p</span> = <span class=\"supfact\">buf</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">q</span> = strchr(<span class=\"supfact\">p</span>, Number);\n    if (!<span class=\"supfact\">q</span>)\n      return Number;\n    *<span class=\"supfact\">q</span> = Number;\n    <span class=\"supfact\">onebyte</span> =\n        strtol(<span class=\"supfact\">p</span>, &<span class=\"supfact\">end</span>, Number);\n    if (*<span class=\"supfact\">end</span> || <span class=\"supfact\">onebyte</span> > Number ||\n        <span class=\"supfact\">onebyte</span> < Number)\n      return Number;\n    <span class=\"supfact\">ip2</span>[<span class=\"supfact\">i</span>] = <span class=\"supfact\">onebyte</span>;\n    <span class=\"supfact\">p</span> = <span class=\"supfact\">q</span> + Number;\n  }\n  <span class=\"supfact\">onebyte</span> =\n      strtol(<span class=\"supfact\">p</span>, &<span class=\"supfact\">end</span>, Number);\n  if (*<span class=\"supfact\">end</span> || <span class=\"supfact\">onebyte</span> > Number ||\n      <span class=\"supfact\">onebyte</span> < Number)\n    return Number;\n  <span class=\"supfact\">ip2</span>[Number] = <span class=\"supfact\">onebyte</span>;\n  return Number;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "str", "ref_name": "ip_0", "ref_type": "char *"}, {"name": "a2", "type": "unsigned __int8 *", "pred_name": "mac", "ref_name": "ip2", "ref_type": "unsigned __int8 *"}, {"name": "dest", "type": "char[20]", "pred_name": "tmp", "ref_name": "buf", "ref_type": "char[20]"}, {"name": "endptr", "type": "char *", "pred_name": "tmp2", "ref_name": "end", "ref_type": "char *"}, {"name": "v5", "type": "__int64", "pred_name": "v", "ref_name": "q", "ref_type": "char *"}, {"name": "v6", "type": "__int64", "pred_name": "n", "ref_name": "onebyte", "ref_type": "__int64"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "s", "type": "const char *", "pred_name": "s", "ref_name": "p", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "daveti", "repo_name": "GoodUSB", "path": "daveti/GoodUSB/cc106b8f45c10383e83fa68796c0d482ee45dec45138d80d9ed94b9e9b660d93", "path_in_repo": "daveti/GoodUSB/kernel/linux-3.13.0/tools/perf/util/session.o", "objdump": "0000000000003568 <perf_session__process_event>:\n    3568:\t55                   \tpush   %rbp\n    3569:\t48 89 e5             \tmov    %rsp,%rbp\n    356c:\t48 81 ec f0 00 00 00 \tsub    $0xf0,%rsp\n    3573:\t48 89 bd 28 ff ff ff \tmov    %rdi,-0xd8(%rbp)\n    357a:\t48 89 b5 20 ff ff ff \tmov    %rsi,-0xe0(%rbp)\n    3581:\t48 89 95 18 ff ff ff \tmov    %rdx,-0xe8(%rbp)\n    3588:\t48 89 8d 10 ff ff ff \tmov    %rcx,-0xf0(%rbp)\n    358f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    3596:\t00 00 \n    3598:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    359c:\t31 c0                \txor    %eax,%eax\n    359e:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    35a5:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n    35a9:\t84 c0                \ttest   %al,%al\n    35ab:\t74 2a                \tje     35d7 <perf_session__process_event+0x6f>\n    35ad:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    35b4:\t48 8b 80 a0 01 00 00 \tmov    0x1a0(%rax),%rax\n    35bb:\t48 89 c7             \tmov    %rax,%rdi\n    35be:\te8 00 00 00 00       \tcallq  35c3 <perf_session__process_event+0x5b>\n    35c3:\t0f b6 d0             \tmovzbl %al,%edx\n    35c6:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    35cd:\t89 d6                \tmov    %edx,%esi\n    35cf:\t48 89 c7             \tmov    %rax,%rdi\n    35d2:\te8 2c ff ff ff       \tcallq  3503 <event_swap>\n    35d7:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    35de:\t8b 00                \tmov    (%rax),%eax\n    35e0:\t83 f8 44             \tcmp    $0x44,%eax\n    35e3:\t76 0a                \tjbe    35ef <perf_session__process_event+0x87>\n    35e5:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    35ea:\te9 0e 01 00 00       \tjmpq   36fd <perf_session__process_event+0x195>\n    35ef:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    35f6:\t8b 00                \tmov    (%rax),%eax\n    35f8:\t48 8b 95 28 ff ff ff \tmov    -0xd8(%rbp),%rdx\n    35ff:\t48 81 c2 b0 01 00 00 \tadd    $0x1b0,%rdx\n    3606:\t89 c6                \tmov    %eax,%esi\n    3608:\t48 89 d7             \tmov    %rdx,%rdi\n    360b:\te8 00 00 00 00       \tcallq  3610 <perf_session__process_event+0xa8>\n    3610:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    3617:\t8b 00                \tmov    (%rax),%eax\n    3619:\t83 f8 3f             \tcmp    $0x3f,%eax\n    361c:\t76 29                \tjbe    3647 <perf_session__process_event+0xdf>\n    361e:\t48 8b 8d 10 ff ff ff \tmov    -0xf0(%rbp),%rcx\n    3625:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n    362c:\t48 8b b5 20 ff ff ff \tmov    -0xe0(%rbp),%rsi\n    3633:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    363a:\t48 89 c7             \tmov    %rax,%rdi\n    363d:\te8 66 fd ff ff       \tcallq  33a8 <perf_session__process_user_event>\n    3642:\te9 b6 00 00 00       \tjmpq   36fd <perf_session__process_event+0x195>\n    3647:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    364e:\t48 8b 80 a0 01 00 00 \tmov    0x1a0(%rax),%rax\n    3655:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n    365c:\t48 8b 8d 20 ff ff ff \tmov    -0xe0(%rbp),%rcx\n    3663:\t48 89 ce             \tmov    %rcx,%rsi\n    3666:\t48 89 c7             \tmov    %rax,%rdi\n    3669:\te8 00 00 00 00       \tcallq  366e <perf_session__process_event+0x106>\n    366e:\t89 85 3c ff ff ff    \tmov    %eax,-0xc4(%rbp)\n    3674:\t83 bd 3c ff ff ff 00 \tcmpl   $0x0,-0xc4(%rbp)\n    367b:\t74 08                \tje     3685 <perf_session__process_event+0x11d>\n    367d:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n    3683:\teb 78                \tjmp    36fd <perf_session__process_event+0x195>\n    3685:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    368c:\t0f b6 40 70          \tmovzbl 0x70(%rax),%eax\n    3690:\t84 c0                \ttest   %al,%al\n    3692:\t74 3b                \tje     36cf <perf_session__process_event+0x167>\n    3694:\t48 8b 8d 10 ff ff ff \tmov    -0xf0(%rbp),%rcx\n    369b:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n    36a2:\t48 8b b5 20 ff ff ff \tmov    -0xe0(%rbp),%rsi\n    36a9:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    36b0:\t48 89 c7             \tmov    %rax,%rdi\n    36b3:\te8 00 00 00 00       \tcallq  36b8 <perf_session__process_event+0x150>\n    36b8:\t89 85 3c ff ff ff    \tmov    %eax,-0xc4(%rbp)\n    36be:\t83 bd 3c ff ff ff c2 \tcmpl   $0xffffffc2,-0xc4(%rbp)\n    36c5:\t74 08                \tje     36cf <perf_session__process_event+0x167>\n    36c7:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n    36cd:\teb 2e                \tjmp    36fd <perf_session__process_event+0x195>\n    36cf:\t48 8b bd 10 ff ff ff \tmov    -0xf0(%rbp),%rdi\n    36d6:\t48 8b 8d 18 ff ff ff \tmov    -0xe8(%rbp),%rcx\n    36dd:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n    36e4:\t48 8b b5 20 ff ff ff \tmov    -0xe0(%rbp),%rsi\n    36eb:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n    36f2:\t49 89 f8             \tmov    %rdi,%r8\n    36f5:\t48 89 c7             \tmov    %rax,%rdi\n    36f8:\te8 b5 f9 ff ff       \tcallq  30b2 <perf_session_deliver_event>\n    36fd:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n    3701:\t64 48 33 3c 25 28 00 \txor    %fs:0x28,%rdi\n    3708:\t00 00 \n    370a:\t74 05                \tje     3711 <perf_session__process_event+0x1a9>\n    370c:\te8 00 00 00 00       \tcallq  3711 <perf_session__process_event+0x1a9>\n    3711:\tc9                   \tleaveq \n    3712:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_session__process_event(\n    __int64 <span class=\"supfact\">a1</span>, unsigned int *<span class=\"supfact\">a2</span>,\n    __int64 <span class=\"supfact\">a3</span>, unsigned __int64 <span class=\"supfact\">a4</span>,\n    float <span class=\"supfact\">a5</span>, double <span class=\"supfact\">a6</span>) {\n  unsigned __int8 <span class=\"supfact\">v6</span>;\n  unsigned int v10;\n  unsigned int v11;\n  char <span class=\"supfact\">v12</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v13</span> = __readfsqword(Number);\n  if (*(_BYTE *)(<span class=\"supfact\">a1</span> + Number)) {\n    <span class=\"supfact\">v6</span> =\n        perf_evlist__sample_id_all(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n    event_swap(<span class=\"supfact\">a2</span>, <span class=\"supfact\">v6</span>);\n  }\n  if (*<span class=\"supfact\">a2</span> > Number)\n    return Number L;\n  events_stats__inc(<span class=\"supfact\">a1</span> + Number, *<span class=\"supfact\">a2</span>);\n  if (*<span class=\"supfact\">a2</span> > Number)\n    return perf_session__process_user_event(\n        <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>,\n        (__int64(__fastcall **)(_QWORD, _QWORD, _QWORD))<span class=\"supfact\">a3</span>,\n        <span class=\"supfact\">a4</span>, <span class=\"supfact\">a5</span>, <span class=\"supfact\">a6</span>);\n  v10 = perf_evlist__parse_sample(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                                  <span class=\"supfact\">a2</span>, <span class=\"supfact\">v12</span>);\n  if (v10)\n    return v10;\n  if (!*(_BYTE *)(<span class=\"supfact\">a3</span> + Number))\n    return perf_session_deliver_event(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>,\n                                      (__int64)<span class=\"supfact\">v12</span>,\n                                      <span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>);\n  v11 = perf_session_queue_event(\n      <span class=\"supfact\">a1</span>, (unsigned __int64)<span class=\"supfact\">a2</span>,\n      (__int64)<span class=\"supfact\">v12</span>, <span class=\"supfact\">a4</span>);\n  if (v11 == Number)\n    return perf_session_deliver_event(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>,\n                                      (__int64)<span class=\"supfact\">v12</span>,\n                                      <span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>);\n  return v11;\n}", "code_t": "int __cdecl perf_session__process_event(perf_session *<span class=\"supfact\">session</span>,\n                                        perf_event *<span class=\"supfact\">event</span>,\n                                        perf_tool *<span class=\"supfact\">tool</span>,\n                                        u64 <span class=\"supfact\">file_offset</span>) {\n  char v4;\n  int ret;\n  int reta;\n  perf_sample <span class=\"supfact\">sample</span>;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = __readfsqword(Number);\n  if (<span class=\"supfact\">session</span>->header.needs_swap) {\n    v4 = perf_evlist__sample_id_all(<span class=\"supfact\">session</span>->evlist);\n    event_swap(<span class=\"supfact\">event</span>, v4);\n  }\n  if (<span class=\"supfact\">event</span>->header.type > Number)\n    return Number;\n  events_stats__inc(&<span class=\"supfact\">session</span>->stats,\n                    <span class=\"supfact\">event</span>->header.type);\n  if (<span class=\"supfact\">event</span>->header.type > Number)\n    return perf_session__process_user_event(\n        <span class=\"supfact\">session</span>, <span class=\"supfact\">event</span>, <span class=\"supfact\">tool</span>,\n        <span class=\"supfact\">file_offset</span>);\n  ret =\n      perf_evlist__parse_sample(<span class=\"supfact\">session</span>->evlist,\n                                <span class=\"supfact\">event</span>, &<span class=\"supfact\">sample</span>);\n  if (ret)\n    return ret;\n  if (!<span class=\"supfact\">tool</span>->ordered_samples)\n    return perf_session_deliver_event(\n        <span class=\"supfact\">session</span>, <span class=\"supfact\">event</span>, &<span class=\"supfact\">sample</span>,\n        <span class=\"supfact\">tool</span>, <span class=\"supfact\">file_offset</span>);\n  reta = perf_session_queue_event(\n      <span class=\"supfact\">session</span>, <span class=\"supfact\">event</span>, &<span class=\"supfact\">sample</span>,\n      <span class=\"supfact\">file_offset</span>);\n  if (reta == Number)\n    return perf_session_deliver_event(\n        <span class=\"supfact\">session</span>, <span class=\"supfact\">event</span>, &<span class=\"supfact\">sample</span>,\n        <span class=\"supfact\">tool</span>, <span class=\"supfact\">file_offset</span>);\n  return reta;\n}", "var": [{"name": "a1", "type": "perf_session *", "pred_name": "session", "ref_name": "session", "ref_type": "perf_session *"}, {"name": "a2", "type": "perf_event *", "pred_name": "event", "ref_name": "event", "ref_type": "perf_event *"}, {"name": "a3", "type": "perf_event_ops *", "pred_name": "ops", "ref_name": "tool", "ref_type": "perf_tool *"}, {"name": "a4", "type": "u64", "pred_name": "file_offset", "ref_name": "file_offset", "ref_type": "u64"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v12", "type": "struct perf_sample { u64 ip; u32 pid; u32 tid; u64 time; u64 addr; u64 id; u64 stream_id; u64 period; u64 weight; u64 transaction; u32 cpu; u32 raw_size; u64 data_src; void * raw_data; ip_callchain * callchain; branch_stack * branch_stack; regs_dump user_regs; stack_dump user_stack; sample_read read; }", "pred_name": "sample", "ref_name": "sample", "ref_type": "struct perf_sample { u64 ip; u32 pid; u32 tid; u64 time; u64 addr; u64 id; u64 stream_id; u64 period; u64 weight; u64 transaction; u32 cpu; u32 raw_size; u64 data_src; void * raw_data; ip_callchain * callchain; branch_stack * branch_stack; regs_dump user_regs; stack_dump user_stack; sample_read read; }"}, {"name": "v13", "type": "unsigned __int64", "pred_name": "v11", "ref_name": "v11", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "narendrahl", "repo_name": "AEROQUAD-ARDUCOPTER_", "path": "narendrahl/AEROQUAD-ARDUCOPTER_/ec92e1190513e4908efabf2dd24c43d4e49b98bdf809a651efffc1d83bd34698", "path_in_repo": "narendrahl/AEROQUAD-ARDUCOPTER_/libraries/PROJECT_X_/AEROQUAD+ARDUCOPTER_/libraries/mavlink/mavlink/share/pyshared/pymavlink/generator/C/test/posix/testmav0.9_test", "objdump": "00000000004024f1 <_MAV_RETURN_int32_t_array>:\n  4024f1:\t55                   \tpush   %rbp\n  4024f2:\t48 89 e5             \tmov    %rsp,%rbp\n  4024f5:\t53                   \tpush   %rbx\n  4024f6:\t48 83 ec 28          \tsub    $0x28,%rsp\n  4024fa:\t48 89 7d e0          \tmov    %rdi,-0x20(%rbp)\n  4024fe:\t48 89 75 d8          \tmov    %rsi,-0x28(%rbp)\n  402502:\t89 c8                \tmov    %ecx,%eax\n  402504:\t88 55 d4             \tmov    %dl,-0x2c(%rbp)\n  402507:\t88 45 d0             \tmov    %al,-0x30(%rbp)\n  40250a:\t66 c7 45 f6 00 00    \tmovw   $0x0,-0xa(%rbp)\n  402510:\teb 43                \tjmp    402555 <_MAV_RETURN_int32_t_array+0x64>\n  402512:\t0f b7 45 f6          \tmovzwl -0xa(%rbp),%eax\n  402516:\t8d 14 85 00 00 00 00 \tlea    0x0(,%rax,4),%edx\n  40251d:\t0f b6 45 d0          \tmovzbl -0x30(%rbp),%eax\n  402521:\t01 d0                \tadd    %edx,%eax\n  402523:\t0f b6 d0             \tmovzbl %al,%edx\n  402526:\t0f b7 45 f6          \tmovzwl -0xa(%rbp),%eax\n  40252a:\t48 8d 0c 85 00 00 00 \tlea    0x0(,%rax,4),%rcx\n  402531:\t00 \n  402532:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  402536:\t48 8d 1c 01          \tlea    (%rcx,%rax,1),%rbx\n  40253a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40253e:\t89 d6                \tmov    %edx,%esi\n  402540:\t48 89 c7             \tmov    %rax,%rdi\n  402543:\te8 fe fb ff ff       \tcallq  402146 <_MAV_RETURN_int32_t>\n  402548:\t89 03                \tmov    %eax,(%rbx)\n  40254a:\t0f b7 45 f6          \tmovzwl -0xa(%rbp),%eax\n  40254e:\t83 c0 01             \tadd    $0x1,%eax\n  402551:\t66 89 45 f6          \tmov    %ax,-0xa(%rbp)\n  402555:\t0f b6 45 d4          \tmovzbl -0x2c(%rbp),%eax\n  402559:\t66 39 45 f6          \tcmp    %ax,-0xa(%rbp)\n  40255d:\t72 b3                \tjb     402512 <_MAV_RETURN_int32_t_array+0x21>\n  40255f:\t0f b6 45 d4          \tmovzbl -0x2c(%rbp),%eax\n  402563:\tc1 e0 02             \tshl    $0x2,%eax\n  402566:\t48 83 c4 28          \tadd    $0x28,%rsp\n  40256a:\t5b                   \tpop    %rbx\n  40256b:\t5d                   \tpop    %rbp\n  40256c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall MAV_RETURN_int32_t_array(__int64 <span class=\"supfact\">a1</span>,\n                                            __int64 <span class=\"supfact\">a2</span>,\n                                            unsigned __int8 <span class=\"supfact\">a3</span>,\n                                            char <span class=\"supfact\">a4</span>) {\n  unsigned __int16 <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">a3</span>;\n       ++<span class=\"supfact\">i</span>)\n    *(_DWORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">a2</span>) =\n        MAV_RETURN_int32_t(<span class=\"supfact\">a1</span>,\n                           Number * (unsigned __int8)<span class=\"supfact\">i</span> +\n                               <span class=\"supfact\">a4</span>);\n  return Number * (unsigned int)<span class=\"supfact\">a3</span>;\n}", "code_t": "uint16_t __cdecl MAV_RETURN_int32_t_array(\n    const mavlink_message_t *<span class=\"supfact\">msg</span>,\n    int32_t *<span class=\"supfact\">value</span>, uint8_t <span class=\"supfact\">array_length</span>,\n    uint8_t <span class=\"supfact\">wire_offset</span>) {\n  uint16_t <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">array_length</span>; ++<span class=\"supfact\">i</span>)\n    <span class=\"supfact\">value</span>[<span class=\"supfact\">i</span>] = MAV_RETURN_int32_t(\n        <span class=\"supfact\">msg</span>,\n        Number * <span class=\"supfact\">i</span> + <span class=\"supfact\">wire_offset</span>);\n  return Number * <span class=\"supfact\">array_length</span>;\n}", "var": [{"name": "a1", "type": "const mavlink_message_t *", "pred_name": "msg", "ref_name": "msg", "ref_type": "const mavlink_message_t *"}, {"name": "a2", "type": "int32_t *", "pred_name": "value", "ref_name": "value", "ref_type": "int32_t *"}, {"name": "a3", "type": "uint8_t", "pred_name": "array_length", "ref_name": "array_length", "ref_type": "uint8_t"}, {"name": "a4", "type": "uint8_t", "pred_name": "wire_offset", "ref_name": "wire_offset", "ref_type": "uint8_t"}, {"name": "i", "type": "uint16_t", "pred_name": "i", "ref_name": "i", "ref_type": "uint16_t"}], "body_in_train": true}, {"repo_owner": "AndersTrier", "repo_name": "QEMU-bitflip", "path": "AndersTrier/QEMU-bitflip/899d17aa0a9a84e6a9fdafa7c656bc3ff22db8b01ca7a91154d99bcd6b73c89b", "path_in_repo": "AndersTrier/QEMU-bitflip//block/qcow2-cluster.o", "objdump": "0000000000000ffe <qcow2_write_l1_entry>:\n     ffe:\t55                   \tpush   %rbp\n     fff:\t48 89 e5             \tmov    %rsp,%rbp\n    1002:\t48 81 ec 40 02 00 00 \tsub    $0x240,%rsp\n    1009:\t48 89 bd c8 fd ff ff \tmov    %rdi,-0x238(%rbp)\n    1010:\t89 b5 c4 fd ff ff    \tmov    %esi,-0x23c(%rbp)\n    1016:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    101d:\t00 00 \n    101f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1023:\t31 c0                \txor    %eax,%eax\n    1025:\t48 8b 85 c8 fd ff ff \tmov    -0x238(%rbp),%rax\n    102c:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    1030:\t48 89 85 e8 fd ff ff \tmov    %rax,-0x218(%rbp)\n    1037:\t48 8d 95 f0 fd ff ff \tlea    -0x210(%rbp),%rdx\n    103e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1043:\tb9 40 00 00 00       \tmov    $0x40,%ecx\n    1048:\t48 89 d7             \tmov    %rdx,%rdi\n    104b:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    104e:\t8b 85 c4 fd ff ff    \tmov    -0x23c(%rbp),%eax\n    1054:\t83 e0 c0             \tand    $0xffffffc0,%eax\n    1057:\t89 85 e0 fd ff ff    \tmov    %eax,-0x220(%rbp)\n    105d:\tc7 85 dc fd ff ff 00 \tmovl   $0x0,-0x224(%rbp)\n    1064:\t00 00 00 \n    1067:\teb 46                \tjmp    10af <qcow2_write_l1_entry+0xb1>\n    1069:\t48 8b 85 e8 fd ff ff \tmov    -0x218(%rbp),%rax\n    1070:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    1074:\t8b 8d e0 fd ff ff    \tmov    -0x220(%rbp),%ecx\n    107a:\t8b 95 dc fd ff ff    \tmov    -0x224(%rbp),%edx\n    1080:\t01 ca                \tadd    %ecx,%edx\n    1082:\t48 63 d2             \tmovslq %edx,%rdx\n    1085:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    1089:\t48 01 d0             \tadd    %rdx,%rax\n    108c:\t48 8b 00             \tmov    (%rax),%rax\n    108f:\t48 89 c7             \tmov    %rax,%rdi\n    1092:\te8 d3 ef ff ff       \tcallq  6a <cpu_to_be64>\n    1097:\t8b 95 dc fd ff ff    \tmov    -0x224(%rbp),%edx\n    109d:\t48 63 d2             \tmovslq %edx,%rdx\n    10a0:\t48 89 84 d5 f0 fd ff \tmov    %rax,-0x210(%rbp,%rdx,8)\n    10a7:\tff \n    10a8:\t83 85 dc fd ff ff 01 \taddl   $0x1,-0x224(%rbp)\n    10af:\t83 bd dc fd ff ff 3f \tcmpl   $0x3f,-0x224(%rbp)\n    10b6:\t7f 1c                \tjg     10d4 <qcow2_write_l1_entry+0xd6>\n    10b8:\t8b 95 e0 fd ff ff    \tmov    -0x220(%rbp),%edx\n    10be:\t8b 85 dc fd ff ff    \tmov    -0x224(%rbp),%eax\n    10c4:\t01 c2                \tadd    %eax,%edx\n    10c6:\t48 8b 85 e8 fd ff ff \tmov    -0x218(%rbp),%rax\n    10cd:\t8b 40 14             \tmov    0x14(%rax),%eax\n    10d0:\t39 c2                \tcmp    %eax,%edx\n    10d2:\t7c 95                \tjl     1069 <qcow2_write_l1_entry+0x6b>\n    10d4:\t48 8b 85 e8 fd ff ff \tmov    -0x218(%rbp),%rax\n    10db:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n    10df:\t8b 85 e0 fd ff ff    \tmov    -0x220(%rbp),%eax\n    10e5:\tc1 e0 03             \tshl    $0x3,%eax\n    10e8:\t48 98                \tcltq   \n    10ea:\t48 01 d0             \tadd    %rdx,%rax\n    10ed:\t48 89 c2             \tmov    %rax,%rdx\n    10f0:\t48 8b 85 c8 fd ff ff \tmov    -0x238(%rbp),%rax\n    10f7:\tb9 00 02 00 00       \tmov    $0x200,%ecx\n    10fc:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    1101:\t48 89 c7             \tmov    %rax,%rdi\n    1104:\te8 00 00 00 00       \tcallq  1109 <qcow2_write_l1_entry+0x10b>\n    1109:\t89 85 e4 fd ff ff    \tmov    %eax,-0x21c(%rbp)\n    110f:\t83 bd e4 fd ff ff 00 \tcmpl   $0x0,-0x21c(%rbp)\n    1116:\t79 0b                \tjns    1123 <qcow2_write_l1_entry+0x125>\n    1118:\t8b 85 e4 fd ff ff    \tmov    -0x21c(%rbp),%eax\n    111e:\te9 8b 00 00 00       \tjmpq   11ae <qcow2_write_l1_entry+0x1b0>\n    1123:\t48 8b 85 c8 fd ff ff \tmov    -0x238(%rbp),%rax\n    112a:\t48 8b 80 80 30 00 00 \tmov    0x3080(%rax),%rax\n    1131:\t48 85 c0             \ttest   %rax,%rax\n    1134:\t74 1e                \tje     1154 <qcow2_write_l1_entry+0x156>\n    1136:\t48 8b 85 c8 fd ff ff \tmov    -0x238(%rbp),%rax\n    113d:\t48 8b 80 80 30 00 00 \tmov    0x3080(%rax),%rax\n    1144:\t48 8b 00             \tmov    (%rax),%rax\n    1147:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    114c:\t48 89 c7             \tmov    %rax,%rdi\n    114f:\te8 00 00 00 00       \tcallq  1154 <qcow2_write_l1_entry+0x156>\n    1154:\t48 8b 85 e8 fd ff ff \tmov    -0x218(%rbp),%rax\n    115b:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n    115f:\t8b 85 e0 fd ff ff    \tmov    -0x220(%rbp),%eax\n    1165:\tc1 e0 03             \tshl    $0x3,%eax\n    1168:\t48 98                \tcltq   \n    116a:\t48 01 d0             \tadd    %rdx,%rax\n    116d:\t48 89 c6             \tmov    %rax,%rsi\n    1170:\t48 8b 85 c8 fd ff ff \tmov    -0x238(%rbp),%rax\n    1177:\t48 8b 80 80 30 00 00 \tmov    0x3080(%rax),%rax\n    117e:\t48 8d 95 f0 fd ff ff \tlea    -0x210(%rbp),%rdx\n    1185:\tb9 00 02 00 00       \tmov    $0x200,%ecx\n    118a:\t48 89 c7             \tmov    %rax,%rdi\n    118d:\te8 00 00 00 00       \tcallq  1192 <qcow2_write_l1_entry+0x194>\n    1192:\t89 85 e4 fd ff ff    \tmov    %eax,-0x21c(%rbp)\n    1198:\t83 bd e4 fd ff ff 00 \tcmpl   $0x0,-0x21c(%rbp)\n    119f:\t79 08                \tjns    11a9 <qcow2_write_l1_entry+0x1ab>\n    11a1:\t8b 85 e4 fd ff ff    \tmov    -0x21c(%rbp),%eax\n    11a7:\teb 05                \tjmp    11ae <qcow2_write_l1_entry+0x1b0>\n    11a9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    11ae:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    11b2:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    11b9:\t00 00 \n    11bb:\t74 05                \tje     11c2 <qcow2_write_l1_entry+0x1c4>\n    11bd:\te8 00 00 00 00       \tcallq  11c2 <qcow2_write_l1_entry+0x1c4>\n    11c2:\tc9                   \tleaveq \n    11c3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qcow2_write_l1_entry(__int64 <span class=\"supfact\">a1</span>,\n                                        int <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  int v5;\n  int v6;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = __readfsqword(Number);\n  <span class=\"supfact\">v7</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  memset(<span class=\"supfact\">v8</span>, Number, Number);\n  <span class=\"supfact\">v4</span> = <span class=\"supfact\">a2</span> & Number;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> <= Number &&\n       (signed int)(<span class=\"supfact\">i</span> + <span class=\"supfact\">v4</span>) <\n           *(_DWORD *)(<span class=\"supfact\">v7</span> + Number);\n       ++<span class=\"supfact\">i</span>)\n    <span class=\"supfact\">v8</span>[<span class=\"supfact\">i</span>] = cpu_to_be64(\n        *(_QWORD *)(Number L * (int)(<span class=\"supfact\">v4</span> + <span class=\"supfact\">i</span>) +\n                    *(_QWORD *)(<span class=\"supfact\">v7</span> + Number)));\n  v5 = qcow2_pre_write_overlap_check(<span class=\"supfact\">a1</span>, Number L,\n                                     *(_QWORD *)(<span class=\"supfact\">v7</span> + Number) +\n                                         (int)(Number * <span class=\"supfact\">v4</span>),\n                                     Number L);\n  if (v5 < Number)\n    return (unsigned int)v5;\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    bdrv_debug_event(**(_QWORD **)(<span class=\"supfact\">a1</span> + Number), Number L);\n  v6 = bdrv_pwrite_sync(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                        *(_QWORD *)(<span class=\"supfact\">v7</span> + Number) +\n                            (int)(Number * <span class=\"supfact\">v4</span>),\n                        <span class=\"supfact\">v8</span>, Number L);\n  if (v6 >= Number)\n    <span class=\"supfact\">result</span> = Number L;\n  else\n    <span class=\"supfact\">result</span> = (unsigned int)v6;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl qcow2_write_l1_entry(BlockDriverState_0 *<span class=\"supfact\">bs</span>,\n                                 int <span class=\"supfact\">l1_index</span>) {\n  int <span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">l1_start_index</span>;\n  int ret;\n  int reta;\n  BDRVQcow2State_0 *<span class=\"supfact\">s</span>;\n  uint64_t <span class=\"supfact\">buf</span>[Number];\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  <span class=\"supfact\">s</span> = (BDRVQcow2State_0 *)<span class=\"supfact\">bs</span>->opaque;\n  memset(<span class=\"supfact\">buf</span>, Number, sizeof(<span class=\"supfact\">buf</span>));\n  <span class=\"supfact\">l1_start_index</span> = <span class=\"supfact\">l1_index</span> & Number;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> <= Number &&\n       <span class=\"supfact\">i</span> + <span class=\"supfact\">l1_start_index</span> <\n           <span class=\"supfact\">s</span>->l1_size;\n       ++<span class=\"supfact\">i</span>)\n    <span class=\"supfact\">buf</span>[<span class=\"supfact\">i</span>] = cpu_to_be64(\n        <span class=\"supfact\">s</span>\n            ->l1_table[<span class=\"supfact\">l1_start_index</span> + <span class=\"supfact\">i</span>]);\n  ret =\n      qcow2_pre_write_overlap_check(<span class=\"supfact\">bs</span>, Number L,\n                                    <span class=\"supfact\">s</span>->l1_table_offset +\n                                        Number * <span class=\"supfact\">l1_start_index</span>,\n                                    Number L);\n  if (ret < Number)\n    return ret;\n  if (<span class=\"supfact\">bs</span>->file)\n    bdrv_debug_event(<span class=\"supfact\">bs</span>->file-><span class=\"supfact\">bs</span>, Number L);\n  reta = bdrv_pwrite_sync(<span class=\"supfact\">bs</span>->file,\n                          <span class=\"supfact\">s</span>->l1_table_offset +\n                              Number * <span class=\"supfact\">l1_start_index</span>,\n                          <span class=\"supfact\">buf</span>, Number L);\n  if (reta >= Number)\n    <span class=\"supfact\">result</span> = Number;\n  else\n    <span class=\"supfact\">result</span> = reta;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "BlockDriverState_0 *", "pred_name": "bs", "ref_name": "bs", "ref_type": "BlockDriverState_0 *"}, {"name": "a2", "type": "int", "pred_name": "l1_index", "ref_name": "l1_index", "ref_type": "int"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "v4", "type": "int", "pred_name": "l1_start_index", "ref_name": "l1_start_index", "ref_type": "int"}, {"name": "v7", "type": "BDRVQcowState_2 *", "pred_name": "s", "ref_name": "s", "ref_type": "BDRVQcow2State_0 *"}, {"name": "v8", "type": "uint64_t[64]", "pred_name": "buf", "ref_name": "buf", "ref_type": "uint64_t[64]"}], "body_in_train": false}, {"repo_owner": "mthuurne", "repo_name": "qemu-dingoo", "path": "mthuurne/qemu-dingoo/76e1e97ecd0a03ab49fd0e910f057bf424905309ce97575a7340422bf2316daf", "path_in_repo": "mthuurne/qemu-dingoo//libhw64/acpi_piix4.o", "objdump": "00000000000012e9 <pcihotplug_write>:\n    12e9:\t55                   \tpush   %rbp\n    12ea:\t48 89 e5             \tmov    %rsp,%rbp\n    12ed:\t48 83 ec 20          \tsub    $0x20,%rsp\n    12f1:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    12f5:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    12f8:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n    12fb:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1302:\t00 00 \n    1304:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1308:\t31 c0                \txor    %eax,%eax\n    130a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    130e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1312:\t81 7d e4 00 ae 00 00 \tcmpl   $0xae00,-0x1c(%rbp)\n    1319:\t74 0b                \tje     1326 <pcihotplug_write+0x3d>\n    131b:\t81 7d e4 04 ae 00 00 \tcmpl   $0xae04,-0x1c(%rbp)\n    1322:\t74 0d                \tje     1331 <pcihotplug_write+0x48>\n    1324:\teb 16                \tjmp    133c <pcihotplug_write+0x53>\n    1326:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    132a:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n    132d:\t89 10                \tmov    %edx,(%rax)\n    132f:\teb 0b                \tjmp    133c <pcihotplug_write+0x53>\n    1331:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1335:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n    1338:\t89 50 04             \tmov    %edx,0x4(%rax)\n    133b:\t90                   \tnop\n    133c:\t90                   \tnop\n    133d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1341:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1348:\t00 00 \n    134a:\t74 05                \tje     1351 <pcihotplug_write+0x68>\n    134c:\te8 00 00 00 00       \tcallq  1351 <pcihotplug_write+0x68>\n    1351:\tc9                   \tleaveq \n    1352:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall pcihotplug_write(_DWORD *<span class=\"supfact\">a1</span>,\n                                             int <span class=\"supfact\">a2</span>,\n                                             int <span class=\"supfact\">a3</span>) {\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (<span class=\"supfact\">a2</span> == Number) {\n    *<span class=\"supfact\">a1</span> = <span class=\"supfact\">a3</span>;\n  } else if (<span class=\"supfact\">a2</span> == Number) {\n    <span class=\"supfact\">a1</span>[Number] = <span class=\"supfact\">a3</span>;\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n}", "code_t": "void __cdecl pcihotplug_write(void *<span class=\"supfact\">opaque</span>,\n                              uint32_t <span class=\"supfact\">addr</span>,\n                              uint32_t <span class=\"supfact\">val</span>) {\n  if (<span class=\"supfact\">addr</span> == Number) {\n    *(_DWORD *)<span class=\"supfact\">opaque</span> = <span class=\"supfact\">val</span>;\n  } else if (<span class=\"supfact\">addr</span> == Number) {\n    *((_DWORD *)<span class=\"supfact\">opaque</span> + Number) = <span class=\"supfact\">val</span>;\n  }\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "opaque", "ref_name": "opaque", "ref_type": "void *"}, {"name": "a2", "type": "uint32_t", "pred_name": "addr", "ref_name": "addr", "ref_type": "uint32_t"}, {"name": "a3", "type": "uint32_t", "pred_name": "val", "ref_name": "val", "ref_type": "uint32_t"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "arkadiuszroch", "repo_name": "nmonit", "path": "arkadiuszroch/nmonit/34a76bf54d4346632d599131fd80369a028903109a039cb130e8755c661cb9b2", "path_in_repo": "arkadiuszroch/nmonit//classes/database.o", "objdump": "0000000000000000 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  10:\t48 89 c7             \tmov    %rax,%rdi\n  13:\te8 00 00 00 00       \tcallq  18 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_+0x18>\n  18:\t90                   \tnop\n  19:\tc9                   \tleaveq \n  1a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std _Destroy<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>(\n    __int64 <span class=\"supfact\">a1</span>) {\n  return std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">a1</span>);\n}", "code_t": "__int64 __fastcall std _Destroy<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>>(\n    __int64 <span class=\"supfact\">a1</span>) {\n  return std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">a1</span>);\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "Pixel-AOSP", "repo_name": "kernel_google_wahoo_hardened", "path": "Pixel-AOSP/kernel_google_wahoo_hardened/01e7e7992ac473f0352418a26e53b7060c024275051d5dd5779fd24099733a57", "path_in_repo": "Pixel-AOSP/kernel_google_wahoo_hardened/tools/perf/ui/browsers/hists.o", "objdump": "00000000000046ad <free_popup_options>:\n    46ad:\t55                   \tpush   %rbp\n    46ae:\t48 89 e5             \tmov    %rsp,%rbp\n    46b1:\t48 83 ec 20          \tsub    $0x20,%rsp\n    46b5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    46b9:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    46bc:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    46c3:\t00 00 \n    46c5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    46c9:\t31 c0                \txor    %eax,%eax\n    46cb:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n    46d2:\teb 3e                \tjmp    4712 <free_popup_options+0x65>\n    46d4:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    46d7:\t48 98                \tcltq   \n    46d9:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    46e0:\t00 \n    46e1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    46e5:\t48 01 d0             \tadd    %rdx,%rax\n    46e8:\t48 8b 00             \tmov    (%rax),%rax\n    46eb:\t48 89 c7             \tmov    %rax,%rdi\n    46ee:\te8 00 00 00 00       \tcallq  46f3 <free_popup_options+0x46>\n    46f3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    46f6:\t48 98                \tcltq   \n    46f8:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    46ff:\t00 \n    4700:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4704:\t48 01 d0             \tadd    %rdx,%rax\n    4707:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    470e:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n    4712:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4715:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n    4718:\t7c ba                \tjl     46d4 <free_popup_options+0x27>\n    471a:\t90                   \tnop\n    471b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    471f:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    4726:\t00 00 \n    4728:\t74 05                \tje     472f <free_popup_options+0x82>\n    472a:\te8 00 00 00 00       \tcallq  472f <free_popup_options+0x82>\n    472f:\tc9                   \tleaveq \n    4730:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall free_popup_options(__int64 <span class=\"supfact\">a1</span>,\n                                               int <span class=\"supfact\">a2</span>) {\n  int <span class=\"supfact\">i</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">a2</span>;\n       ++<span class=\"supfact\">i</span>) {\n    free(*(void **)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">a1</span>));\n    *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">a1</span>) = Number L;\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n}", "code_t": "void __cdecl free_popup_options(char **<span class=\"supfact\">options</span>,\n                                int <span class=\"supfact\">n</span>) {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">n</span>;\n       ++<span class=\"supfact\">i</span>) {\n    free(<span class=\"supfact\">options</span>[<span class=\"supfact\">i</span>]);\n    <span class=\"supfact\">options</span>[<span class=\"supfact\">i</span>] = Number L;\n  }\n}", "var": [{"name": "a1", "type": "char * *", "pred_name": "options", "ref_name": "options", "ref_type": "char * *"}, {"name": "a2", "type": "int", "pred_name": "n", "ref_name": "n", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "Qitas", "repo_name": "USB", "path": "Qitas/USB/2bc5d623527471d28f0918063065421f46c784e1ace850a8a12af3e83b1a58d2", "path_in_repo": "Qitas/USB/ESP/esp82xx/web/mfsmaker", "objdump": "", "code_s": "int __xstat(int <span class=\"supfact\">ver</span>, const char *<span class=\"supfact\">filename</span>,\n            struct stat *<span class=\"supfact\">stat_buf</span>) {\n  return _xstat(<span class=\"supfact\">ver</span>, <span class=\"supfact\">filename</span>,\n                <span class=\"supfact\">stat_buf</span>);\n}", "code_t": "int __xstat(int <span class=\"supfact\">ver</span>, const char *<span class=\"supfact\">filename</span>,\n            struct stat *<span class=\"supfact\">stat_buf</span>) {\n  return _xstat(<span class=\"supfact\">ver</span>, <span class=\"supfact\">filename</span>,\n                <span class=\"supfact\">stat_buf</span>);\n}", "var": [{"name": "ver", "type": "int", "pred_name": "ver", "ref_name": "ver", "ref_type": "int"}, {"name": "filename", "type": "const char *", "pred_name": "filename", "ref_name": "filename", "ref_type": "const char *"}, {"name": "stat_buf", "type": "struct stat *", "pred_name": "stat_buf", "ref_name": "stat_buf", "ref_type": "struct stat *"}], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2af4e000b03dbd36bf5f5b1e94bd385a31b5c6a785c70e9770f2544cd62ecd92", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/m68000/m68kops.o", "objdump": "000000000005b3d4 <_ZL16m68k_op_slt_8_pdP15_m68ki_cpu_core>:\n   5b3d4:\t55                   \tpush   %rbp\n   5b3d5:\t48 89 e5             \tmov    %rsp,%rbp\n   5b3d8:\t48 83 ec 10          \tsub    $0x10,%rsp\n   5b3dc:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   5b3e0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   5b3e4:\t8b 90 28 01 00 00    \tmov    0x128(%rax),%edx\n   5b3ea:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   5b3ee:\t8b 80 30 01 00 00    \tmov    0x130(%rax),%eax\n   5b3f4:\t31 d0                \txor    %edx,%eax\n   5b3f6:\t25 80 00 00 00       \tand    $0x80,%eax\n   5b3fb:\t85 c0                \ttest   %eax,%eax\n   5b3fd:\t74 07                \tje     5b406 <_ZL16m68k_op_slt_8_pdP15_m68ki_cpu_core+0x32>\n   5b3ff:\tbf ff 00 00 00       \tmov    $0xff,%edi\n   5b404:\teb 05                \tjmp    5b40b <_ZL16m68k_op_slt_8_pdP15_m68ki_cpu_core+0x37>\n   5b406:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   5b40b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   5b40f:\t8b 80 1c 01 00 00    \tmov    0x11c(%rax),%eax\n   5b415:\t83 c8 01             \tor     $0x1,%eax\n   5b418:\t89 c2                \tmov    %eax,%edx\n   5b41a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   5b41e:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n   5b422:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   5b426:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n   5b42c:\t89 c0                \tmov    %eax,%eax\n   5b42e:\t83 e0 07             \tand    $0x7,%eax\n   5b431:\t48 83 c0 08          \tadd    $0x8,%rax\n   5b435:\t48 c1 e0 02          \tshl    $0x2,%rax\n   5b439:\t48 01 c8             \tadd    %rcx,%rax\n   5b43c:\t8b 08                \tmov    (%rax),%ecx\n   5b43e:\t83 e9 01             \tsub    $0x1,%ecx\n   5b441:\t89 08                \tmov    %ecx,(%rax)\n   5b443:\t8b 30                \tmov    (%rax),%esi\n   5b445:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   5b449:\t89 f9                \tmov    %edi,%ecx\n   5b44b:\t48 89 c7             \tmov    %rax,%rdi\n   5b44e:\te8 17 53 fa ff       \tcallq  76a <_ZL16m68ki_write_8_fcP15_m68ki_cpu_corejjj>\n   5b453:\t90                   \tnop\n   5b454:\tc9                   \tleaveq \n   5b455:\tc3                   \tretq   ", "code_s": "__int64 __fastcall m68k_op_slt_8_pd(_DWORD *<span class=\"supfact\">a1</span>) {\n  unsigned __int8 v1;\n  int <span class=\"supfact\">v2</span>;\n  _DWORD *<span class=\"supfact\">v3</span>;\n  if ((((unsigned __int8)<span class=\"supfact\">a1</span>[Number] ^\n        (unsigned __int8)<span class=\"supfact\">a1</span>[Number]) &\n       Number) != Number)\n    v1 = Number;\n  else\n    v1 = Number;\n  <span class=\"supfact\">v2</span> = <span class=\"supfact\">a1</span>[Number] | Number;\n  <span class=\"supfact\">v3</span> =\n      &<span class=\"supfact\">a1</span>[(<span class=\"supfact\">a1</span>[Number] & Number) + Number];\n  return m68ki_write_8_fc((__int64)<span class=\"supfact\">a1</span>, --*<span class=\"supfact\">v3</span>,\n                          <span class=\"supfact\">v2</span>, v1);\n}", "code_t": "void __cdecl m68k_op_slt_8_pd(m68ki_cpu_core *<span class=\"supfact\">m68k</span>) {\n  UINT32 v1;\n  UINT32 <span class=\"supfact\">v2</span>;\n  UINT32 *<span class=\"supfact\">v3</span>;\n  if ((((unsigned __int8)<span class=\"supfact\">m68k</span>->n_flag ^\n        (unsigned __int8)<span class=\"supfact\">m68k</span>->v_flag) &\n       Number) != Number)\n    v1 = Number;\n  else\n    v1 = Number;\n  <span class=\"supfact\">v2</span> = <span class=\"supfact\">m68k</span>->s_flag | Number;\n  <span class=\"supfact\">v3</span> =\n      &<span class=\"supfact\">m68k</span>->dar[(<span class=\"supfact\">m68k</span>->ir & Number) + Number];\n  m68ki_write_8_fc(<span class=\"supfact\">m68k</span>, --*<span class=\"supfact\">v3</span>,\n                   <span class=\"supfact\">v2</span>, v1);\n}", "var": [{"name": "a1", "type": "perf_mmap *", "pred_name": "md", "ref_name": "m68k", "ref_type": "m68ki_cpu_core *"}, {"name": "v2", "type": "unsigned int", "pred_name": "v2", "ref_name": "v2", "ref_type": "UINT32"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "v3", "ref_type": "UINT32 *"}], "body_in_train": false}, {"repo_owner": "a110605", "repo_name": "optimized_qemu", "path": "a110605/optimized_qemu/f2466451c9bd024f35dc06fd6c9e5c3938160861425586449fee3f23276d8135", "path_in_repo": "a110605/optimized_qemu//libhw64/ide/isa.o", "objdump": "000000000000027b <do_qemu_init_isa_ide_register_devices>:\n 27b:\t55                   \tpush   %rbp\n 27c:\t48 89 e5             \tmov    %rsp,%rbp\n 27f:\t48 83 ec 10          \tsub    $0x10,%rsp\n 283:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 28a:\t00 00 \n 28c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 290:\t31 c0                \txor    %eax,%eax\n 292:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 297:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 29c:\te8 00 00 00 00       \tcallq  2a1 <do_qemu_init_isa_ide_register_devices+0x26>\n 2a1:\t90                   \tnop\n 2a2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2a6:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 2ad:\t00 00 \n 2af:\t74 05                \tje     2b6 <do_qemu_init_isa_ide_register_devices+0x3b>\n 2b1:\te8 00 00 00 00       \tcallq  2b6 <do_qemu_init_isa_ide_register_devices+0x3b>\n 2b6:\tc9                   \tleaveq \n 2b7:\tc3                   \tretq   \n", "code_s": "unsigned __int64 do_qemu_init_isa_ide_register_devices() {\n  unsigned __int64 <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = __readfsqword(Number);\n  register_module_init(isa_ide_register_devices, Number L);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v1</span>;\n}", "code_t": "void __cdecl do_qemu_init_isa_ide_register_devices() {\n  register_module_init(isa_ide_register_devices, Number L);\n}", "var": [{"name": "v1", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "converse2006", "repo_name": "ArduinoUno-QEMU", "path": "converse2006/ArduinoUno-QEMU/02c26ff9c66577c4055ff74e22cccde86c36bcc8da15fbc4287a4f8d07c9d7dc", "path_in_repo": "converse2006/ArduinoUno-QEMU//ppc64-softmmu/ppc405_boards.o", "objdump": "00000000000003f7 <ref405ep_fpga_init>:\n     3f7:\t55                   \tpush   %rbp\n     3f8:\t48 89 e5             \tmov    %rsp,%rbp\n     3fb:\t48 83 ec 30          \tsub    $0x30,%rsp\n     3ff:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n     402:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     409:\t00 00 \n     40b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     40f:\t31 c0                \txor    %eax,%eax\n     411:\tbf 02 00 00 00       \tmov    $0x2,%edi\n     416:\te8 00 00 00 00       \tcallq  41b <ref405ep_fpga_init+0x24>\n     41b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     41f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     423:\t48 89 c2             \tmov    %rax,%rdx\n     426:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     42b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     430:\te8 00 00 00 00       \tcallq  435 <ref405ep_fpga_init+0x3e>\n     435:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     438:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     43b:\t48 63 d0             \tmovslq %eax,%rdx\n     43e:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     441:\tbe 00 01 00 00       \tmov    $0x100,%esi\n     446:\t48 89 c7             \tmov    %rax,%rdi\n     449:\te8 b2 fb ff ff       \tcallq  0 <cpu_register_physical_memory>\n     44e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     452:\t48 89 c6             \tmov    %rax,%rsi\n     455:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     45a:\te8 00 00 00 00       \tcallq  45f <ref405ep_fpga_init+0x68>\n     45f:\t90                   \tnop\n     460:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     464:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     46b:\t00 00 \n     46d:\t74 05                \tje     474 <ref405ep_fpga_init+0x7d>\n     46f:\te8 00 00 00 00       \tcallq  474 <ref405ep_fpga_init+0x7d>\n     474:\tc9                   \tleaveq \n     475:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall ref405ep_fpga_init(\n    unsigned int <span class=\"supfact\">a1</span>) {\n  int <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  <span class=\"supfact\">v3</span> = qemu_mallocz(Number L);\n  <span class=\"supfact\">v2</span> = cpu_register_io_memory(\n      ref405ep_fpga_read, ref405ep_fpga_write, <span class=\"supfact\">v3</span>);\n  cpu_register_physical_memory(<span class=\"supfact\">a1</span>, Number L,\n                               <span class=\"supfact\">v2</span>);\n  qemu_register_reset(ref405ep_fpga_reset, <span class=\"supfact\">v3</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n}", "code_t": "void __cdecl ref405ep_fpga_init(uint32_t <span class=\"supfact\">base</span>) {\n  int <span class=\"supfact\">fpga_memory</span>;\n  ref405ep_fpga_t_0 *<span class=\"supfact\">fpga</span>;\n  <span class=\"supfact\">fpga</span> = (ref405ep_fpga_t_0 *)qemu_mallocz(Number L);\n  <span class=\"supfact\">fpga_memory</span> = cpu_register_io_memory(\n      ref405ep_fpga_read, ref405ep_fpga_write, <span class=\"supfact\">fpga</span>);\n  cpu_register_physical_memory(<span class=\"supfact\">base</span>, Number,\n                               <span class=\"supfact\">fpga_memory</span>);\n  qemu_register_reset(ref405ep_fpga_reset, <span class=\"supfact\">fpga</span>);\n}", "var": [{"name": "a1", "type": "int", "pred_name": "base", "ref_name": "base", "ref_type": "uint32_t"}, {"name": "v2", "type": "int", "pred_name": "__unk__", "ref_name": "fpga_memory", "ref_type": "int"}, {"name": "v3", "type": "__unk__", "pred_name": "fpga", "ref_name": "fpga", "ref_type": "ref405ep_fpga_t_0 *"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "mr-sven", "repo_name": "ipc-25hdc", "path": "mr-sven/ipc-25hdc/b4c106b3691920501f14666615f91cc79b2ba5867b4d79d93c0991bef1200936", "path_in_repo": "mr-sven/ipc-25hdc/source/user/busybox/scripts/kconfig/conf.o", "objdump": "0000000000000000 <sym_get_tristate_value>:\n       0:\t48 89 7c 24 f8       \tmov    %rdi,-0x8(%rsp)\n       5:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n       a:\t8b 40 28             \tmov    0x28(%rax),%eax\n       d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sym_get_tristate_value(__int64 <span class=\"supfact\">a1</span>) {\n  return *(unsigned int *)(<span class=\"supfact\">a1</span> + Number);\n}", "code_t": "tristate_0 __cdecl sym_get_tristate_value(symbol *<span class=\"supfact\">sym</span>) {\n  return <span class=\"supfact\">sym</span>->curr.tri;\n}", "var": [{"name": "a1", "type": "symbol *", "pred_name": "sym", "ref_name": "sym", "ref_type": "symbol *"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/455f1468db8cd665f9cac45c4b5a9b5a361e76a2cb390da3afb5529799ae5396", "path_in_repo": "XanClic/qemu//disas/riscv.o", "objdump": "000000000000245d <operand_shamt6>:\n    245d:\t55                   \tpush   %rbp\n    245e:\t48 89 e5             \tmov    %rsp,%rbp\n    2461:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    2465:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2469:\t48 c1 e0 26          \tshl    $0x26,%rax\n    246d:\t48 c1 e8 3a          \tshr    $0x3a,%rax\n    2471:\t5d                   \tpop    %rbp\n    2472:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall operand_shamt6(__int64 <span class=\"supfact\">a1</span>) {\n  return (unsigned __int64)(<span class=\"supfact\">a1</span> << Number) >> Number;\n}", "code_t": "uint32_t __cdecl operand_shamt6(rv_inst <span class=\"supfact\">inst</span>) {\n  return <span class=\"supfact\">inst</span> << Number >> Number;\n}", "var": [{"name": "a1", "type": "Mips *", "pred_name": "emu", "ref_name": "inst", "ref_type": "rv_inst"}], "body_in_train": false}, {"repo_owner": "DavidAlphaFox", "repo_name": "git", "path": "DavidAlphaFox/git/d8b7f3f621aa99bf6d66394e10930fcf2cf7954ab34ab89bd8ea235a36af9b07", "path_in_repo": "DavidAlphaFox/git//commit.o", "objdump": "0000000000000bc2 <buffer_slab_at_peek>:\n     bc2:\t55                   \tpush   %rbp\n     bc3:\t48 89 e5             \tmov    %rsp,%rbp\n     bc6:\t53                   \tpush   %rbx\n     bc7:\t48 83 ec 38          \tsub    $0x38,%rsp\n     bcb:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     bcf:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     bd3:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n     bd6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     bda:\t8b 40 20             \tmov    0x20(%rax),%eax\n     bdd:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     be1:\t8b 1a                \tmov    (%rdx),%ebx\n     be3:\tba 00 00 00 00       \tmov    $0x0,%edx\n     be8:\tf7 f3                \tdiv    %ebx\n     bea:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n     bed:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     bf1:\t8b 40 20             \tmov    0x20(%rax),%eax\n     bf4:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     bf8:\t8b 0a                \tmov    (%rdx),%ecx\n     bfa:\tba 00 00 00 00       \tmov    $0x0,%edx\n     bff:\tf7 f1                \tdiv    %ecx\n     c01:\t89 d0                \tmov    %edx,%eax\n     c03:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     c06:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c0a:\t8b 50 08             \tmov    0x8(%rax),%edx\n     c0d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     c10:\t39 c2                \tcmp    %eax,%edx\n     c12:\t0f 87 8d 00 00 00    \tja     ca5 <buffer_slab_at_peek+0xe3>\n     c18:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n     c1c:\t75 0a                \tjne    c28 <buffer_slab_at_peek+0x66>\n     c1e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c23:\te9 0b 01 00 00       \tjmpq   d33 <buffer_slab_at_peek+0x171>\n     c28:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     c2b:\t83 c0 01             \tadd    $0x1,%eax\n     c2e:\t48 98                \tcltq   \n     c30:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     c37:\t00 \n     c38:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c3c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     c40:\t48 89 d6             \tmov    %rdx,%rsi\n     c43:\t48 89 c7             \tmov    %rax,%rdi\n     c46:\te8 00 00 00 00       \tcallq  c4b <buffer_slab_at_peek+0x89>\n     c4b:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     c4f:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n     c53:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # c59 <buffer_slab_at_peek+0x97>\n     c59:\t83 c0 01             \tadd    $0x1,%eax\n     c5c:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # c62 <buffer_slab_at_peek+0xa0>\n     c62:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c66:\t8b 40 08             \tmov    0x8(%rax),%eax\n     c69:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     c6c:\teb 20                \tjmp    c8e <buffer_slab_at_peek+0xcc>\n     c6e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c72:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     c76:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n     c79:\t48 63 d2             \tmovslq %edx,%rdx\n     c7c:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     c80:\t48 01 d0             \tadd    %rdx,%rax\n     c83:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     c8a:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n     c8e:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     c91:\t3b 45 e8             \tcmp    -0x18(%rbp),%eax\n     c94:\t7e d8                \tjle    c6e <buffer_slab_at_peek+0xac>\n     c96:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     c99:\t83 c0 01             \tadd    $0x1,%eax\n     c9c:\t89 c2                \tmov    %eax,%edx\n     c9e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ca2:\t89 50 08             \tmov    %edx,0x8(%rax)\n     ca5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ca9:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     cad:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n     cb0:\t48 63 d2             \tmovslq %edx,%rdx\n     cb3:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     cb7:\t48 01 d0             \tadd    %rdx,%rax\n     cba:\t48 8b 00             \tmov    (%rax),%rax\n     cbd:\t48 85 c0             \ttest   %rax,%rax\n     cc0:\t75 43                \tjne    d05 <buffer_slab_at_peek+0x143>\n     cc2:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n     cc6:\t75 07                \tjne    ccf <buffer_slab_at_peek+0x10d>\n     cc8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ccd:\teb 64                \tjmp    d33 <buffer_slab_at_peek+0x171>\n     ccf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     cd3:\t8b 40 04             \tmov    0x4(%rax),%eax\n     cd6:\t89 c0                \tmov    %eax,%eax\n     cd8:\t48 c1 e0 04          \tshl    $0x4,%rax\n     cdc:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     ce0:\t8b 12                \tmov    (%rdx),%edx\n     ce2:\t89 d7                \tmov    %edx,%edi\n     ce4:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     ce8:\t48 8b 52 10          \tmov    0x10(%rdx),%rdx\n     cec:\t8b 4d e8             \tmov    -0x18(%rbp),%ecx\n     cef:\t48 63 c9             \tmovslq %ecx,%rcx\n     cf2:\t48 c1 e1 03          \tshl    $0x3,%rcx\n     cf6:\t48 8d 1c 0a          \tlea    (%rdx,%rcx,1),%rbx\n     cfa:\t48 89 c6             \tmov    %rax,%rsi\n     cfd:\te8 00 00 00 00       \tcallq  d02 <buffer_slab_at_peek+0x140>\n     d02:\t48 89 03             \tmov    %rax,(%rbx)\n     d05:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d09:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     d0d:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n     d10:\t48 63 d2             \tmovslq %edx,%rdx\n     d13:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     d17:\t48 01 d0             \tadd    %rdx,%rax\n     d1a:\t48 8b 10             \tmov    (%rax),%rdx\n     d1d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d21:\t8b 48 04             \tmov    0x4(%rax),%ecx\n     d24:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     d27:\t0f af c1             \timul   %ecx,%eax\n     d2a:\t89 c0                \tmov    %eax,%eax\n     d2c:\t48 c1 e0 04          \tshl    $0x4,%rax\n     d30:\t48 01 d0             \tadd    %rdx,%rax\n     d33:\t48 83 c4 38          \tadd    $0x38,%rsp\n     d37:\t5b                   \tpop    %rbx\n     d38:\t5d                   \tpop    %rbp\n     d39:\tc3                   \tretq   ", "code_s": "__int64 __fastcall buffer_slab_at_peek(unsigned int *<span class=\"supfact\">a1</span>,\n                                       __int64 <span class=\"supfact\">a2</span>,\n                                       int <span class=\"supfact\">a3</span>) {\n  _QWORD *<span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v7</span> =\n      *(_DWORD *)(<span class=\"supfact\">a2</span> + Number) / *<span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v6</span> =\n      *(_DWORD *)(<span class=\"supfact\">a2</span> + Number) % *<span class=\"supfact\">a1</span>;\n  if (<span class=\"supfact\">a1</span>[Number] <= <span class=\"supfact\">v7</span>) {\n    if (!<span class=\"supfact\">a3</span>)\n      return Number L;\n    *((_QWORD *)<span class=\"supfact\">a1</span> + Number) =\n        xrealloc(*((_QWORD *)<span class=\"supfact\">a1</span> + Number),\n                 Number L * (<span class=\"supfact\">v7</span> + Number));\n    ++stat_buffer_slabrealloc;\n    for (<span class=\"supfact\">i</span> = <span class=\"supfact\">a1</span>[Number];\n         <span class=\"supfact\">i</span> <= <span class=\"supfact\">v7</span>; ++<span class=\"supfact\">i</span>)\n      *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                  *((_QWORD *)<span class=\"supfact\">a1</span> + Number)) = Number L;\n    <span class=\"supfact\">a1</span>[Number] = <span class=\"supfact\">v7</span> + Number;\n  }\n  if (!*(_QWORD *)(Number L * <span class=\"supfact\">v7</span> +\n                   *((_QWORD *)<span class=\"supfact\">a1</span> + Number))) {\n    if (!<span class=\"supfact\">a3</span>)\n      return Number L;\n    <span class=\"supfact\">v4</span> = (_QWORD *)(*((_QWORD *)<span class=\"supfact\">a1</span> + Number) +\n                                    Number L * <span class=\"supfact\">v7</span>);\n    *<span class=\"supfact\">v4</span> =\n        xcalloc(*<span class=\"supfact\">a1</span>, Number L * <span class=\"supfact\">a1</span>[Number]);\n  }\n  return *(_QWORD *)(Number L * <span class=\"supfact\">v7</span> +\n                     *((_QWORD *)<span class=\"supfact\">a1</span> + Number)) +\n         Number L * <span class=\"supfact\">a1</span>[Number] * <span class=\"supfact\">v6</span>;\n}", "code_t": "commit_buffer *__cdecl buffer_slab_at_peek(buffer_slab *<span class=\"supfact\">s</span>,\n                                           const commit *<span class=\"supfact\">c</span>,\n                                           int <span class=\"supfact\">add_if_missing</span>) {\n  commit_buffer **<span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">nth_slot</span>;\n  int <span class=\"supfact\">nth_slab</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">nth_slab</span> =\n      <span class=\"supfact\">c</span>->index / <span class=\"supfact\">s</span>->slab_size;\n  <span class=\"supfact\">nth_slot</span> =\n      <span class=\"supfact\">c</span>->index % <span class=\"supfact\">s</span>->slab_size;\n  if (<span class=\"supfact\">s</span>->slab_count <= <span class=\"supfact\">nth_slab</span>) {\n    if (!<span class=\"supfact\">add_if_missing</span>)\n      return Number L;\n    <span class=\"supfact\">s</span>->slab = (commit_buffer **)xrealloc(\n        <span class=\"supfact\">s</span>->slab,\n        Number L * (<span class=\"supfact\">nth_slab</span> + Number));\n    ++stat_buffer_slabrealloc;\n    for (<span class=\"supfact\">i</span> = <span class=\"supfact\">s</span>->slab_count;\n         <span class=\"supfact\">i</span> <= <span class=\"supfact\">nth_slab</span>; ++<span class=\"supfact\">i</span>)\n      <span class=\"supfact\">s</span>->slab[<span class=\"supfact\">i</span>] = Number L;\n    <span class=\"supfact\">s</span>->slab_count = <span class=\"supfact\">nth_slab</span> + Number;\n  }\n  if (!<span class=\"supfact\">s</span>->slab[<span class=\"supfact\">nth_slab</span>]) {\n    if (!<span class=\"supfact\">add_if_missing</span>)\n      return Number L;\n    <span class=\"supfact\">v4</span> = &<span class=\"supfact\">s</span>->slab[<span class=\"supfact\">nth_slab</span>];\n    *<span class=\"supfact\">v4</span> = (commit_buffer *)xcalloc(\n        <span class=\"supfact\">s</span>->slab_size, Number L * <span class=\"supfact\">s</span>->stride);\n  }\n  return &<span class=\"supfact\">s</span>\n              ->slab[<span class=\"supfact\">nth_slab</span>]\n                    [<span class=\"supfact\">s</span>->stride * <span class=\"supfact\">nth_slot</span>];\n}", "var": [{"name": "a1", "type": "buffer_slab *", "pred_name": "s", "ref_name": "s", "ref_type": "buffer_slab *"}, {"name": "a2", "type": "const commit *", "pred_name": "c", "ref_name": "c", "ref_type": "const commit *"}, {"name": "a3", "type": "int", "pred_name": "add_if_missing", "ref_name": "add_if_missing", "ref_type": "int"}, {"name": "v4", "type": "__unk__", "pred_name": "v4", "ref_name": "v4", "ref_type": "commit_buffer * *"}, {"name": "v6", "type": "int", "pred_name": "nth_slot", "ref_name": "nth_slot", "ref_type": "int"}, {"name": "v7", "type": "int", "pred_name": "nth_slab", "ref_name": "nth_slab", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "yoshii", "repo_name": "qemu", "path": "yoshii/qemu/a0b9b22bb7154f6710eff7d7b8e4b86a4d7452962480fd449e2223efca26dbdf", "path_in_repo": "yoshii/qemu//sh4eb-softmmu/translate.o", "objdump": "000000000000213b <gen_helper_movcal>:\n    213b:\t55                   \tpush   %rbp\n    213c:\t48 89 e5             \tmov    %rsp,%rbp\n    213f:\t48 83 ec 40          \tsub    $0x40,%rsp\n    2143:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    2146:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    2149:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2150:\t00 00 \n    2152:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2156:\t31 c0                \txor    %eax,%eax\n    2158:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    215f:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    2162:\t48 98                \tcltq   \n    2164:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    2168:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    216b:\t48 98                \tcltq   \n    216d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2171:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    2175:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    2178:\t49 89 d1             \tmov    %rdx,%r9\n    217b:\t41 b8 02 00 00 00    \tmov    $0x2,%r8d\n    2181:\t48 c7 c1 ff ff ff ff \tmov    $0xffffffffffffffff,%rcx\n    2188:\t89 c2                \tmov    %eax,%edx\n    218a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    218f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2194:\te8 ba e7 ff ff       \tcallq  953 <tcg_gen_helperN>\n    2199:\t90                   \tnop\n    219a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    219e:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    21a5:\t00 00 \n    21a7:\t74 05                \tje     21ae <gen_helper_movcal+0x73>\n    21a9:\te8 00 00 00 00       \tcallq  21ae <gen_helper_movcal+0x73>\n    21ae:\tc9                   \tleaveq \n    21af:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall gen_helper_movcal(int <span class=\"supfact\">a1</span>,\n                                              int <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  <span class=\"supfact\">v3</span>[Number] = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v3</span>[Number] = <span class=\"supfact\">a2</span>;\n  tcg_gen_helperN((__int64)&helper_movcal, Number, Number, Number, Number,\n                  (__int64)<span class=\"supfact\">v3</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n}", "code_t": "void __cdecl gen_helper_movcal(TCGv_i32 <span class=\"supfact\">arg1</span>,\n                               TCGv_i32 <span class=\"supfact\">arg2</span>) {\n  TCGArg <span class=\"supfact\">args</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = __readfsqword(Number);\n  <span class=\"supfact\">args</span>[Number] = <span class=\"supfact\">arg1</span>;\n  <span class=\"supfact\">args</span>[Number] = <span class=\"supfact\">arg2</span>;\n  tcg_gen_helperN(&helper_movcal, Number, Number, Number, Number,\n                  <span class=\"supfact\">args</span>);\n}", "var": [{"name": "a1", "type": "TCGv_i64", "pred_name": "arg1", "ref_name": "arg1", "ref_type": "TCGv_i32"}, {"name": "a2", "type": "TCGv_i32", "pred_name": "arg2", "ref_name": "arg2", "ref_type": "TCGv_i32"}, {"name": "v3", "type": "TCGArg[2]", "pred_name": "args", "ref_name": "args", "ref_type": "TCGArg[2]"}, {"name": "v4", "type": "unsigned __int64", "pred_name": "v3", "ref_name": "v3", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "MarchM4", "repo_name": "Milkyway-home-server-expansion", "path": "MarchM4/Milkyway-home-server-expansion/14b4a4d1f9d4adc6b6b6556e5ea27548989f6c47a8698b630b5001cd4814e22d", "path_in_repo": "MarchM4/Milkyway-home-server-expansion/boinc/boinc/samples/multi_thread/multi_thread.o", "objdump": "0000000000000000 <_ZSt12__miter_baseIPP6THREADEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  10:\t48 89 c7             \tmov    %rax,%rdi\n  13:\te8 00 00 00 00       \tcallq  18 <_ZSt12__miter_baseIPP6THREADEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E+0x18>\n  18:\t48 89 c7             \tmov    %rax,%rdi\n  1b:\te8 00 00 00 00       \tcallq  20 <_ZSt12__miter_baseIPP6THREADEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E+0x20>\n  20:\tc9                   \tleaveq \n  21:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __miter_base<THREAD **>(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v1</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v1</span> = std move_iterator<THREAD **> base(&<span class=\"supfact\">v3</span>);\n  return std __miter_base<THREAD **>(<span class=\"supfact\">v1</span>);\n}", "code_t": "THREAD **__cdecl std\n__miter_base<THREAD **>(std move_iterator<THREAD **> <span class=\"supfact\">__it</span>) {\n  THREAD **<span class=\"supfact\">v1</span>;\n  std move_iterator<THREAD **> <span class=\"supfact\">__ita</span>;\n  <span class=\"supfact\">__ita</span>._M_current = <span class=\"supfact\">__it</span>._M_current;\n  <span class=\"supfact\">v1</span> =\n      std move_iterator<THREAD **> base(&<span class=\"supfact\">__ita</span>);\n  return std __miter_base<THREAD **>(<span class=\"supfact\">v1</span>);\n}", "var": [{"name": "a1", "type": "const BIGNUM *", "pred_name": "__it", "ref_name": "__it", "ref_type": "struct std::move_iterator<THREAD**> { THREAD ** _M_current; }"}, {"name": "v1", "type": "void ** *", "pred_name": "v1", "ref_name": "v1", "ref_type": "THREAD * *"}, {"name": "v3", "type": "const BIGNUM *", "pred_name": "__ita", "ref_name": "__ita", "ref_type": "struct std::move_iterator<THREAD**> { THREAD ** _M_current; }"}], "body_in_train": false}, {"repo_owner": "csjpeter", "repo_name": "psqldroid", "path": "csjpeter/psqldroid/94c7084f66ef578b98993829ffd1ba68cfa8a73106849332b149f95918961413", "path_in_repo": "csjpeter/psqldroid//src/backend/nodes/copyfuncs.o", "objdump": "000000000000869f <_copyDropOwnedStmt>:\n    869f:\t55                   \tpush   %rbp\n    86a0:\t48 89 e5             \tmov    %rsp,%rbp\n    86a3:\t48 83 ec 20          \tsub    $0x20,%rsp\n    86a7:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    86ab:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 86b2 <_copyDropOwnedStmt+0x13>\n    86b2:\tbe 18 00 00 00       \tmov    $0x18,%esi\n    86b7:\t48 89 c7             \tmov    %rax,%rdi\n    86ba:\te8 00 00 00 00       \tcallq  86bf <_copyDropOwnedStmt+0x20>\n    86bf:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    86c3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    86c7:\tc7 00 06 03 00 00    \tmovl   $0x306,(%rax)\n    86cd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    86d1:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    86d5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    86d9:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    86dd:\t48 89 c7             \tmov    %rax,%rdi\n    86e0:\te8 00 00 00 00       \tcallq  86e5 <_copyDropOwnedStmt+0x46>\n    86e5:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    86e9:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n    86ed:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    86f1:\t8b 50 10             \tmov    0x10(%rax),%edx\n    86f4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    86f8:\t89 50 10             \tmov    %edx,0x10(%rax)\n    86fb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    86ff:\tc9                   \tleaveq \n    8700:\tc3                   \tretq   ", "code_s": "__int64 __fastcall copyDropOwnedStmt(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> =\n      MemoryContextAllocZeroAligned(CurrentMemoryContext, Number L);\n  *(_DWORD *)<span class=\"supfact\">v2</span> = Number;\n  *(_QWORD *)(<span class=\"supfact\">v2</span> + Number) =\n      copyObject(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n  *(_DWORD *)(<span class=\"supfact\">v2</span> + Number) =\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "DropOwnedStmt_0 *__cdecl copyDropOwnedStmt(\n    DropOwnedStmt_0 *<span class=\"supfact\">from</span>) {\n  Node_0 *<span class=\"supfact\">_result</span>;\n  <span class=\"supfact\">_result</span> =\n      (Node_0 *)MemoryContextAllocZeroAligned(CurrentMemoryContext, Number L);\n  <span class=\"supfact\">_result</span>->type = T_DropOwnedStmt;\n  *(_QWORD *)&<span class=\"supfact\">_result</span>[Number].type =\n      copyObject(<span class=\"supfact\">from</span>->roles);\n  <span class=\"supfact\">_result</span>[Number].type =\n      (NodeTag_0)<span class=\"supfact\">from</span>->behavior;\n  return (DropOwnedStmt_0 *)<span class=\"supfact\">_result</span>;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "from", "ref_name": "from", "ref_type": "DropOwnedStmt_0 *"}, {"name": "v2", "type": "__unk__", "pred_name": "newnode", "ref_name": "_result", "ref_type": "Node_0 *"}], "body_in_train": false}, {"repo_owner": "jvanverth", "repo_name": "essentialmath", "path": "jvanverth/essentialmath/2c3dc89263d1c24d60b512ab1658b19cf27b3c6b5f3fa7fb2512af65dc6c36e8", "path_in_repo": "jvanverth/essentialmath/src/Examples/Ch06-Interpolation/Curves-10-SpeedControl/LinuxRelease/Game.o", "objdump": "", "code_s": "void __fastcall Game Game(Game *<span class=\"supfact\">this</span>) {\n  IvGame IvGame(<span class=\"supfact\">this</span>); * ( _QWORD * ) <span class=\"supfact\">this</span> = & ` vtable for ' Game + Number ; * ( ( _QWORD * ) <span class=\"supfact\">this</span> + Number ) = Number L ; }", "code_t": "void __fastcall Game Game(Game *<span class=\"supfact\">this</span>) {\n  IvGame IvGame(<span class=\"supfact\">this</span>); * ( _QWORD * ) <span class=\"supfact\">this</span> = & ` vtable for ' Game + Number ; * ( ( _QWORD * ) <span class=\"supfact\">this</span> + Number ) = Number L ; }", "var": [{"name": "this", "type": "Game *", "pred_name": "this", "ref_name": "this", "ref_type": "Game *"}], "body_in_train": true}, {"repo_owner": "FireLeaf", "repo_name": "XGame", "path": "FireLeaf/XGame/0d1910b702b569e6357754b925e11a3dd327b3f23daca59f17877c2a84d382f8", "path_in_repo": "FireLeaf/XGame/XGame/XSrc/3-Party/openssl/crypto/err/err.o", "objdump": "000000000000086f <ERR_add_error_data>:\n 86f:\t55                   \tpush   %rbp\n 870:\t48 89 e5             \tmov    %rsp,%rbp\n 873:\t48 81 ec 00 01 00 00 \tsub    $0x100,%rsp\n 87a:\t89 bd 0c ff ff ff    \tmov    %edi,-0xf4(%rbp)\n 880:\t48 89 b5 58 ff ff ff \tmov    %rsi,-0xa8(%rbp)\n 887:\t48 89 95 60 ff ff ff \tmov    %rdx,-0xa0(%rbp)\n 88e:\t48 89 8d 68 ff ff ff \tmov    %rcx,-0x98(%rbp)\n 895:\t4c 89 85 70 ff ff ff \tmov    %r8,-0x90(%rbp)\n 89c:\t4c 89 8d 78 ff ff ff \tmov    %r9,-0x88(%rbp)\n 8a3:\t84 c0                \ttest   %al,%al\n 8a5:\t74 20                \tje     8c7 <ERR_add_error_data+0x58>\n 8a7:\t0f 29 45 80          \tmovaps %xmm0,-0x80(%rbp)\n 8ab:\t0f 29 4d 90          \tmovaps %xmm1,-0x70(%rbp)\n 8af:\t0f 29 55 a0          \tmovaps %xmm2,-0x60(%rbp)\n 8b3:\t0f 29 5d b0          \tmovaps %xmm3,-0x50(%rbp)\n 8b7:\t0f 29 65 c0          \tmovaps %xmm4,-0x40(%rbp)\n 8bb:\t0f 29 6d d0          \tmovaps %xmm5,-0x30(%rbp)\n 8bf:\t0f 29 75 e0          \tmovaps %xmm6,-0x20(%rbp)\n 8c3:\t0f 29 7d f0          \tmovaps %xmm7,-0x10(%rbp)\n 8c7:\tc7 85 44 ff ff ff 50 \tmovl   $0x50,-0xbc(%rbp)\n 8ce:\t00 00 00 \n 8d1:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n 8d7:\t83 c0 01             \tadd    $0x1,%eax\n 8da:\tba 43 01 00 00       \tmov    $0x143,%edx\n 8df:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 8e4:\t89 c7                \tmov    %eax,%edi\n 8e6:\te8 00 00 00 00       \tcallq  8eb <ERR_add_error_data+0x7c>\n 8eb:\t48 89 85 38 ff ff ff \tmov    %rax,-0xc8(%rbp)\n 8f2:\t48 83 bd 38 ff ff ff \tcmpq   $0x0,-0xc8(%rbp)\n 8f9:\t00 \n 8fa:\t0f 84 8a 01 00 00    \tje     a8a <ERR_add_error_data+0x21b>\n 900:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 907:\tc6 00 00             \tmovb   $0x0,(%rax)\n 90a:\tc7 85 10 ff ff ff 08 \tmovl   $0x8,-0xf0(%rbp)\n 911:\t00 00 00 \n 914:\tc7 85 14 ff ff ff 30 \tmovl   $0x30,-0xec(%rbp)\n 91b:\t00 00 00 \n 91e:\t48 8d 45 10          \tlea    0x10(%rbp),%rax\n 922:\t48 89 85 18 ff ff ff \tmov    %rax,-0xe8(%rbp)\n 929:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n 930:\t48 89 85 20 ff ff ff \tmov    %rax,-0xe0(%rbp)\n 937:\tc7 85 48 ff ff ff 00 \tmovl   $0x0,-0xb8(%rbp)\n 93e:\t00 00 00 \n 941:\tc7 85 4c ff ff ff 00 \tmovl   $0x0,-0xb4(%rbp)\n 948:\t00 00 00 \n 94b:\te9 12 01 00 00       \tjmpq   a62 <ERR_add_error_data+0x1f3>\n 950:\t8b 85 10 ff ff ff    \tmov    -0xf0(%rbp),%eax\n 956:\t83 f8 2f             \tcmp    $0x2f,%eax\n 959:\t77 23                \tja     97e <ERR_add_error_data+0x10f>\n 95b:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 962:\t8b 95 10 ff ff ff    \tmov    -0xf0(%rbp),%edx\n 968:\t89 d2                \tmov    %edx,%edx\n 96a:\t48 01 d0             \tadd    %rdx,%rax\n 96d:\t8b 95 10 ff ff ff    \tmov    -0xf0(%rbp),%edx\n 973:\t83 c2 08             \tadd    $0x8,%edx\n 976:\t89 95 10 ff ff ff    \tmov    %edx,-0xf0(%rbp)\n 97c:\teb 12                \tjmp    990 <ERR_add_error_data+0x121>\n 97e:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n 985:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n 989:\t48 89 95 18 ff ff ff \tmov    %rdx,-0xe8(%rbp)\n 990:\t48 8b 00             \tmov    (%rax),%rax\n 993:\t48 89 85 30 ff ff ff \tmov    %rax,-0xd0(%rbp)\n 99a:\t48 83 bd 30 ff ff ff \tcmpq   $0x0,-0xd0(%rbp)\n 9a1:\t00 \n 9a2:\t0f 84 b3 00 00 00    \tje     a5b <ERR_add_error_data+0x1ec>\n 9a8:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 9af:\t48 89 c7             \tmov    %rax,%rdi\n 9b2:\te8 00 00 00 00       \tcallq  9b7 <ERR_add_error_data+0x148>\n 9b7:\t89 c2                \tmov    %eax,%edx\n 9b9:\t8b 85 48 ff ff ff    \tmov    -0xb8(%rbp),%eax\n 9bf:\t01 d0                \tadd    %edx,%eax\n 9c1:\t89 85 48 ff ff ff    \tmov    %eax,-0xb8(%rbp)\n 9c7:\t8b 85 48 ff ff ff    \tmov    -0xb8(%rbp),%eax\n 9cd:\t3b 85 44 ff ff ff    \tcmp    -0xbc(%rbp),%eax\n 9d3:\t7e 61                \tjle    a36 <ERR_add_error_data+0x1c7>\n 9d5:\t8b 85 48 ff ff ff    \tmov    -0xb8(%rbp),%eax\n 9db:\t83 c0 14             \tadd    $0x14,%eax\n 9de:\t89 85 44 ff ff ff    \tmov    %eax,-0xbc(%rbp)\n 9e4:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n 9ea:\t8d 70 01             \tlea    0x1(%rax),%esi\n 9ed:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 9f4:\tb9 53 01 00 00       \tmov    $0x153,%ecx\n 9f9:\tba 00 00 00 00       \tmov    $0x0,%edx\n 9fe:\t48 89 c7             \tmov    %rax,%rdi\n a01:\te8 00 00 00 00       \tcallq  a06 <ERR_add_error_data+0x197>\n a06:\t48 89 85 28 ff ff ff \tmov    %rax,-0xd8(%rbp)\n a0d:\t48 83 bd 28 ff ff ff \tcmpq   $0x0,-0xd8(%rbp)\n a14:\t00 \n a15:\t75 11                \tjne    a28 <ERR_add_error_data+0x1b9>\n a17:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n a1e:\t48 89 c7             \tmov    %rax,%rdi\n a21:\te8 00 00 00 00       \tcallq  a26 <ERR_add_error_data+0x1b7>\n a26:\teb 63                \tjmp    a8b <ERR_add_error_data+0x21c>\n a28:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n a2f:\t48 89 85 38 ff ff ff \tmov    %rax,-0xc8(%rbp)\n a36:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n a3c:\t48 98                \tcltq   \n a3e:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n a42:\t48 8b 8d 30 ff ff ff \tmov    -0xd0(%rbp),%rcx\n a49:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n a50:\t48 89 ce             \tmov    %rcx,%rsi\n a53:\t48 89 c7             \tmov    %rax,%rdi\n a56:\te8 00 00 00 00       \tcallq  a5b <ERR_add_error_data+0x1ec>\n a5b:\t83 85 4c ff ff ff 01 \taddl   $0x1,-0xb4(%rbp)\n a62:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n a68:\t3b 85 0c ff ff ff    \tcmp    -0xf4(%rbp),%eax\n a6e:\t0f 8c dc fe ff ff    \tjl     950 <ERR_add_error_data+0xe1>\n a74:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n a7b:\tbe 03 00 00 00       \tmov    $0x3,%esi\n a80:\t48 89 c7             \tmov    %rax,%rdi\n a83:\te8 00 00 00 00       \tcallq  a88 <ERR_add_error_data+0x219>\n a88:\teb 01                \tjmp    a8b <ERR_add_error_data+0x21c>\n a8a:\t90                   \tnop\n a8b:\tc9                   \tleaveq \n a8c:\tc3                   \tretq   ", "code_s": "_BYTE *ERR_add_error_data(int <span class=\"supfact\">a1</span>, ...) {\n  _BYTE *result;\n  char **v2;\n  gcc_va_list <span class=\"supfact\">va</span>;\n  _BYTE *<span class=\"supfact\">v4</span>;\n  char *<span class=\"supfact\">s</span>;\n  _BYTE *<span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v7</span> = Number;\n  result = (_BYTE *)CRYPTO_malloc(Number L, String, Number L);\n  <span class=\"supfact\">v6</span> = result;\n  if (result) {\n    *result = Number;\n    va_start(<span class=\"supfact\">va</span>, <span class=\"supfact\">a1</span>);\n    <span class=\"supfact\">v8</span> = Number;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">a1</span>;\n         ++<span class=\"supfact\">i</span>) {\n      if (<span class=\"supfact\">va</span>[Number].gp_offset > Number) {\n        v2 = (char **)<span class=\"supfact\">va</span>[Number].overflow_arg_area;\n        <span class=\"supfact\">va</span>[Number].overflow_arg_area =\n            (char *)<span class=\"supfact\">va</span>[Number].overflow_arg_area + Number;\n      } else {\n        v2 = (char **)((char *)<span class=\"supfact\">va</span>[Number].reg_save_area +\n                       <span class=\"supfact\">va</span>[Number].gp_offset);\n        <span class=\"supfact\">va</span>[Number].gp_offset += Number;\n      }\n      <span class=\"supfact\">s</span> = *v2;\n      if (*v2) {\n        <span class=\"supfact\">v8</span> += strlen(<span class=\"supfact\">s</span>);\n        if (<span class=\"supfact\">v8</span> > <span class=\"supfact\">v7</span>) {\n          <span class=\"supfact\">v7</span> = <span class=\"supfact\">v8</span> + Number;\n          <span class=\"supfact\">v4</span> = (_BYTE *)CRYPTO_realloc(\n              <span class=\"supfact\">v6</span>, (unsigned int)(<span class=\"supfact\">v8</span> + Number),\n              String, Number L);\n          if (!<span class=\"supfact\">v4</span>)\n            return (_BYTE *)CRYPTO_free(<span class=\"supfact\">v6</span>);\n          <span class=\"supfact\">v6</span> = <span class=\"supfact\">v4</span>;\n        }\n        BUF_strlcat(<span class=\"supfact\">v6</span>, <span class=\"supfact\">s</span>,\n                    <span class=\"supfact\">v7</span> + Number L);\n      }\n    }\n    result = (_BYTE *)ERR_set_error_data((__int64)<span class=\"supfact\">v6</span>, Number);\n  }\n  return result;\n}", "code_t": "void ERR_add_error_data(int <span class=\"supfact\">num</span>, ...) {\n  char **v1;\n  va_list <span class=\"supfact\">args</span>;\n  char *<span class=\"supfact\">p</span>;\n  char *<span class=\"supfact\">a</span>;\n  char *<span class=\"supfact\">str</span>;\n  int <span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">n</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">s</span> = Number;\n  <span class=\"supfact\">str</span> = (char *)CRYPTO_malloc(Number L, String, Number L);\n  if (<span class=\"supfact\">str</span>) {\n    *<span class=\"supfact\">str</span> = Number;\n    va_start(<span class=\"supfact\">args</span>, <span class=\"supfact\">num</span>);\n    <span class=\"supfact\">n</span> = Number;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">num</span>;\n         ++<span class=\"supfact\">i</span>) {\n      if (<span class=\"supfact\">args</span>[Number].gp_offset > Number) {\n        v1 = (char **)<span class=\"supfact\">args</span>[Number].overflow_arg_area;\n        <span class=\"supfact\">args</span>[Number].overflow_arg_area =\n            (char *)<span class=\"supfact\">args</span>[Number].overflow_arg_area + Number;\n      } else {\n        v1 = (char **)((char *)<span class=\"supfact\">args</span>[Number].reg_save_area +\n                       <span class=\"supfact\">args</span>[Number].gp_offset);\n        <span class=\"supfact\">args</span>[Number].gp_offset += Number;\n      }\n      <span class=\"supfact\">a</span> = *v1;\n      if (*v1) {\n        <span class=\"supfact\">n</span> += strlen(<span class=\"supfact\">a</span>);\n        if (<span class=\"supfact\">n</span> > <span class=\"supfact\">s</span>) {\n          <span class=\"supfact\">s</span> = <span class=\"supfact\">n</span> + Number;\n          <span class=\"supfact\">p</span> = (char *)CRYPTO_realloc(\n              <span class=\"supfact\">str</span>, (unsigned int)(<span class=\"supfact\">n</span> + Number),\n              String, Number L);\n          if (!<span class=\"supfact\">p</span>) {\n            CRYPTO_free(<span class=\"supfact\">str</span>);\n            return;\n          }\n          <span class=\"supfact\">str</span> = <span class=\"supfact\">p</span>;\n        }\n        BUF_strlcat(<span class=\"supfact\">str</span>, <span class=\"supfact\">a</span>,\n                    <span class=\"supfact\">s</span> + Number L);\n      }\n    }\n    ERR_set_error_data(<span class=\"supfact\">str</span>, Number);\n  }\n}", "var": [{"name": "a1", "type": "int", "pred_name": "num", "ref_name": "num", "ref_type": "int"}, {"name": "va", "type": "__va_list_tag[1]", "pred_name": "args", "ref_name": "args", "ref_type": "__va_list_tag[1]"}, {"name": "v4", "type": "char *", "pred_name": "p", "ref_name": "p", "ref_type": "char *"}, {"name": "s", "type": "char *", "pred_name": "a", "ref_name": "a", "ref_type": "char *"}, {"name": "v6", "type": "char *", "pred_name": "str", "ref_name": "str", "ref_type": "char *"}, {"name": "v7", "type": "int", "pred_name": "s", "ref_name": "s", "ref_type": "int"}, {"name": "v8", "type": "int", "pred_name": "n", "ref_name": "n", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "NavInfoNC", "repo_name": "visual-wrk", "path": "NavInfoNC/visual-wrk/017a2538ae4d5eb09f758fcde8300ff146d3b6a33b2259b596b40aef186114aa", "path_in_repo": "NavInfoNC/visual-wrk//obj/openssl-1.1.0g/crypto/dsa/dsa_asn1.o", "objdump": "00000000000002fc <i2d_DSAPublicKey>:\n 2fc:\t55                   \tpush   %rbp\n 2fd:\t48 89 e5             \tmov    %rsp,%rbp\n 300:\t48 83 ec 10          \tsub    $0x10,%rsp\n 304:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n 308:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n 30c:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n 310:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 314:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 31b <i2d_DSAPublicKey+0x1f>\n 31b:\t48 89 ce             \tmov    %rcx,%rsi\n 31e:\t48 89 c7             \tmov    %rax,%rdi\n 321:\te8 00 00 00 00       \tcallq  326 <i2d_DSAPublicKey+0x2a>\n 326:\tc9                   \tleaveq \n 327:\tc3                   \tretq   ", "code_s": "__int64 __fastcall i2d_DSAPublicKey(__int64 <span class=\"supfact\">a1</span>,\n                                    __int64 <span class=\"supfact\">a2</span>) {\n  return ASN1_item_i2d(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>,\n                       &DSAPublicKey_it);\n}", "code_t": "int __cdecl i2d_DSAPublicKey(const DSA *<span class=\"supfact\">a</span>,\n                             unsigned __int8 **<span class=\"supfact\">out</span>) {\n  return ASN1_item_i2d(<span class=\"supfact\">a</span>, <span class=\"supfact\">out</span>,\n                       &DSAPublicKey_it);\n}", "var": [{"name": "a1", "type": "const DSA *", "pred_name": "a", "ref_name": "a", "ref_type": "const DSA *"}, {"name": "a2", "type": "unsigned __int8 * *", "pred_name": "out", "ref_name": "out", "ref_type": "unsigned __int8 * *"}], "body_in_train": true}, {"repo_owner": "Jeongseob", "repo_name": "xen-coboost-sched", "path": "Jeongseob/xen-coboost-sched/bba4c077b51102d1da8c5214588c972d1ff60428ea266fe5eb91e5c5dda7492a", "path_in_repo": "Jeongseob/xen-coboost-sched/tools/qemu-xen/microblazeel-linux-user/syscall.o", "objdump": "00000000000014ae <do_brk>:\n    14ae:\t55                   \tpush   %rbp\n    14af:\t48 89 e5             \tmov    %rsp,%rbp\n    14b2:\t48 83 ec 20          \tsub    $0x20,%rsp\n    14b6:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n    14b9:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    14c0:\t00 00 \n    14c2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    14c6:\t31 c0                \txor    %eax,%eax\n    14c8:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    14cc:\t75 0b                \tjne    14d9 <do_brk+0x2b>\n    14ce:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 14d4 <do_brk+0x26>\n    14d4:\te9 55 01 00 00       \tjmpq   162e <do_brk+0x180>\n    14d9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 14df <do_brk+0x31>\n    14df:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n    14e2:\t73 0b                \tjae    14ef <do_brk+0x41>\n    14e4:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 14ea <do_brk+0x3c>\n    14ea:\te9 3f 01 00 00       \tjmpq   162e <do_brk+0x180>\n    14ef:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 14f5 <do_brk+0x47>\n    14f5:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n    14f8:\t77 4d                \tja     1547 <do_brk+0x99>\n    14fa:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1500 <do_brk+0x52>\n    1500:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n    1503:\t76 2e                \tjbe    1533 <do_brk+0x85>\n    1505:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 150b <do_brk+0x5d>\n    150b:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    150e:\t29 c2                \tsub    %eax,%edx\n    1510:\t89 d0                \tmov    %edx,%eax\n    1512:\t89 c2                \tmov    %eax,%edx\n    1514:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 151a <do_brk+0x6c>\n    151a:\t89 c1                \tmov    %eax,%ecx\n    151c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1523 <do_brk+0x75>\n    1523:\t48 01 c8             \tadd    %rcx,%rax\n    1526:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    152b:\t48 89 c7             \tmov    %rax,%rdi\n    152e:\te8 00 00 00 00       \tcallq  1533 <do_brk+0x85>\n    1533:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    1536:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 153c <do_brk+0x8e>\n    153c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1542 <do_brk+0x94>\n    1542:\te9 e7 00 00 00       \tjmpq   162e <do_brk+0x180>\n    1547:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 154d <do_brk+0x9f>\n    154d:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    1550:\t29 c2                \tsub    %eax,%edx\n    1552:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1559 <do_brk+0xab>\n    1559:\t01 d0                \tadd    %edx,%eax\n    155b:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    155e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1565 <do_brk+0xb7>\n    1565:\t21 d0                \tand    %edx,%eax\n    1567:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    156a:\t8b 75 f0             \tmov    -0x10(%rbp),%esi\n    156d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1573 <do_brk+0xc5>\n    1573:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    1579:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    157f:\tb9 22 00 00 00       \tmov    $0x22,%ecx\n    1584:\tba 03 00 00 00       \tmov    $0x3,%edx\n    1589:\t89 c7                \tmov    %eax,%edi\n    158b:\te8 00 00 00 00       \tcallq  1590 <do_brk+0xe2>\n    1590:\t89 c7                \tmov    %eax,%edi\n    1592:\te8 cd fd ff ff       \tcallq  1364 <get_errno>\n    1597:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    159a:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    159d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 15a3 <do_brk+0xf5>\n    15a3:\t39 c2                \tcmp    %eax,%edx\n    15a5:\t75 65                \tjne    160c <do_brk+0x15e>\n    15a7:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 15ad <do_brk+0xff>\n    15ad:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 15b3 <do_brk+0x105>\n    15b3:\t29 c2                \tsub    %eax,%edx\n    15b5:\t89 d0                \tmov    %edx,%eax\n    15b7:\t89 c2                \tmov    %eax,%edx\n    15b9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 15bf <do_brk+0x111>\n    15bf:\t89 c1                \tmov    %eax,%ecx\n    15c1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 15c8 <do_brk+0x11a>\n    15c8:\t48 01 c8             \tadd    %rcx,%rax\n    15cb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    15d0:\t48 89 c7             \tmov    %rax,%rdi\n    15d3:\te8 00 00 00 00       \tcallq  15d8 <do_brk+0x12a>\n    15d8:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    15db:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 15e1 <do_brk+0x133>\n    15e1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 15e8 <do_brk+0x13a>\n    15e8:\t89 c2                \tmov    %eax,%edx\n    15ea:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 15f0 <do_brk+0x142>\n    15f0:\t01 d0                \tadd    %edx,%eax\n    15f2:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    15f5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 15fc <do_brk+0x14e>\n    15fc:\t21 d0                \tand    %edx,%eax\n    15fe:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1604 <do_brk+0x156>\n    1604:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 160a <do_brk+0x15c>\n    160a:\teb 22                \tjmp    162e <do_brk+0x180>\n    160c:\t83 7d f4 ff          \tcmpl   $0xffffffff,-0xc(%rbp)\n    1610:\t74 16                \tje     1628 <do_brk+0x17a>\n    1612:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n    1615:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    1618:\t89 d6                \tmov    %edx,%esi\n    161a:\t89 c7                \tmov    %eax,%edi\n    161c:\te8 00 00 00 00       \tcallq  1621 <do_brk+0x173>\n    1621:\tc7 45 f4 ff ff ff ff \tmovl   $0xffffffff,-0xc(%rbp)\n    1628:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 162e <do_brk+0x180>\n    162e:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1632:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    1639:\t00 00 \n    163b:\t74 05                \tje     1642 <do_brk+0x194>\n    163d:\te8 00 00 00 00       \tcallq  1642 <do_brk+0x194>\n    1642:\tc9                   \tleaveq \n    1643:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_brk(unsigned int <span class=\"supfact\">a1</span>) {\n  __int64 result;\n  unsigned int v2;\n  unsigned int <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  if (!<span class=\"supfact\">a1</span>)\n    return (unsigned int)target_brk;\n  if (<span class=\"supfact\">a1</span> < target_original_brk)\n    return (unsigned int)target_brk;\n  if (<span class=\"supfact\">a1</span> > brk_page) {\n    <span class=\"supfact\">v3</span> =\n        (<span class=\"supfact\">a1</span> - brk_page + qemu_host_page_size - Number) &\n        qemu_host_page_mask;\n    v2 = target_mmap((unsigned int)brk_page, <span class=\"supfact\">v3</span>, Number L,\n                     Number L, Number L, Number L);\n    <span class=\"supfact\">v4</span> = get_errno(v2);\n    if (<span class=\"supfact\">v4</span> == brk_page) {\n      memset((void *)((unsigned int)target_brk + guest_base), Number,\n             (unsigned int)(brk_page - target_brk));\n      target_brk = <span class=\"supfact\">a1</span>;\n      brk_page = (qemu_host_page_size + <span class=\"supfact\">a1</span> - Number) &\n                 qemu_host_page_mask;\n      result = <span class=\"supfact\">a1</span>;\n    } else {\n      if (<span class=\"supfact\">v4</span> != Number)\n        target_munmap(<span class=\"supfact\">v4</span>, <span class=\"supfact\">v3</span>);\n      result = (unsigned int)target_brk;\n    }\n  } else {\n    if (<span class=\"supfact\">a1</span> > target_brk)\n      memset((void *)((unsigned int)target_brk + guest_base), Number,\n             <span class=\"supfact\">a1</span> - target_brk);\n    target_brk = <span class=\"supfact\">a1</span>;\n    result = <span class=\"supfact\">a1</span>;\n  }\n  return result;\n}", "code_t": "abi_long __cdecl do_brk(abi_ulong <span class=\"supfact\">new_brk</span>) {\n  abi_long result;\n  abi_long v2;\n  unsigned int <span class=\"supfact\">new_alloc_size</span>;\n  unsigned int <span class=\"supfact\">mapped_addr</span>;\n  if (!<span class=\"supfact\">new_brk</span>)\n    return target_brk;\n  if (<span class=\"supfact\">new_brk</span> < target_original_brk)\n    return target_brk;\n  if (<span class=\"supfact\">new_brk</span> > brk_page) {\n    <span class=\"supfact\">new_alloc_size</span> =\n        (<span class=\"supfact\">new_brk</span> - brk_page + qemu_host_page_size - Number) &\n        qemu_host_page_mask;\n    v2 = target_mmap(brk_page, <span class=\"supfact\">new_alloc_size</span>, Number L,\n                     Number L, Number L, Number L);\n    <span class=\"supfact\">mapped_addr</span> = get_errno(v2);\n    if (<span class=\"supfact\">mapped_addr</span> == brk_page) {\n      memset((void *)(target_brk + guest_base), Number, brk_page - target_brk);\n      target_brk = <span class=\"supfact\">new_brk</span>;\n      brk_page = (qemu_host_page_size + <span class=\"supfact\">new_brk</span> - Number) &\n                 qemu_host_page_mask;\n      result = <span class=\"supfact\">new_brk</span>;\n    } else {\n      if (<span class=\"supfact\">mapped_addr</span> != Number)\n        target_munmap(<span class=\"supfact\">mapped_addr</span>,\n                      <span class=\"supfact\">new_alloc_size</span>);\n      result = target_brk;\n    }\n  } else {\n    if (<span class=\"supfact\">new_brk</span> > target_brk)\n      memset((void *)(target_brk + guest_base), Number,\n             <span class=\"supfact\">new_brk</span> - target_brk);\n    target_brk = <span class=\"supfact\">new_brk</span>;\n    result = <span class=\"supfact\">new_brk</span>;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "abi_ulong", "pred_name": "new_brk", "ref_name": "new_brk", "ref_type": "abi_ulong"}, {"name": "v3", "type": "unsigned int", "pred_name": "new_alloc_size", "ref_name": "new_alloc_size", "ref_type": "unsigned int"}, {"name": "v4", "type": "unsigned int", "pred_name": "mapped_addr", "ref_name": "mapped_addr", "ref_type": "unsigned int"}], "body_in_train": true}]